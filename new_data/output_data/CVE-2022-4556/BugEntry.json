{"buggy_code": ["/* SOGoUserDefaults.m - this file is part of SOGo\n *\n * Copyright (C) 2009-2022 Inverse inc.\n *\n * This file is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This file is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; see the file COPYING.  If not, write to\n * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n#import <Foundation/NSData.h>\n#import <Foundation/NSDictionary.h>\n#import <Foundation/NSTimeZone.h>\n#import <Foundation/NSValue.h>\n\n#import <NGExtensions/NGBase64Coding.h>\n#import <NGImap4/NSString+Imap4.h>\n#import <NGObjWeb/WOApplication.h>\n#import <NGObjWeb/WOContext+SoObjects.h>\n#import <NGObjWeb/WEClientCapabilities.h>\n\n#import \"NSString+Utilities.h\"\n#import \"SOGoSystemDefaults.h\"\n#import \"SOGoUserProfile.h\"\n\n\n\nNSString *SOGoWeekStartJanuary1 = @\"January1\";\nNSString *SOGoWeekStartFirst4DayWeek = @\"First4DayWeek\";\nNSString *SOGoWeekStartFirstFullWeek = @\"FirstFullWeek\";\n\nNSString *SOGoPasswordRecoveryDisabled = @\"Disabled\";\nNSString *SOGoPasswordRecoveryQuestion = @\"SecretQuestion\";\nNSString *SOGoPasswordRecoveryQuestion1 = @\"SecretQuestion1\";\nNSString *SOGoPasswordRecoveryQuestion2 = @\"SecretQuestion2\";\nNSString *SOGoPasswordRecoveryQuestion3 = @\"SecretQuestion3\";\nNSString *SOGoPasswordRecoverySecondaryEmail = @\"SecondaryEmail\";\n\n\n@implementation SOGoUserDefaults\n\n+ (NSString *) userProfileClassName\n{\n  return @\"SOGoSQLUserProfile\";\n}\n\n+ (SOGoUserDefaults *) defaultsForUser: (NSString *) userId\n                              inDomain: (NSString *) domainId\n{\n  SOGoUserProfile *up;\n  SOGoUserDefaults *ud;\n  SOGoDefaultsSource *parent;\n  WOContext *context;\n  WEClientCapabilities *cc;\n  static Class SOGoUserProfileKlass = Nil;\n\n  if (!SOGoUserProfileKlass)\n    SOGoUserProfileKlass = NSClassFromString ([self userProfileClassName]);\n\n  up = [SOGoUserProfileKlass userProfileWithType: SOGoUserProfileTypeDefaults\n                                          forUID: userId];\n  [up fetchProfile];\n\n  parent = [SOGoDomainDefaults defaultsForDomain: domainId];\n  if (!parent)\n    parent = [SOGoSystemDefaults sharedSystemDefaults];\n\n  ud = [self defaultsSourceWithSource: up andParentSource: parent];\n\n  // CKEditor (the HTML editor) is no longer compatible with IE7;\n  // force the user to use the plain text editor with IE7\n  context = [[WOApplication application] context];\n  cc = [[context request] clientCapabilities];\n  if ([cc isInternetExplorer] && [cc majorVersion] < 8)\n    {\n      [ud setObject: @\"text\" forKey: @\"SOGoMailComposeMessageType\"];\n    }\n\n  return ud;\n}\n\n- (id) init\n{\n  if ((self = [super init]))\n    {\n      userLanguage = nil;\n    }\n\n  return self;\n}\n\n- (void) dealloc\n{\n  [userLanguage release];\n  [super dealloc];\n}\n\n- (BOOL) _migrateLastModule\n{\n  BOOL rc;\n  NSString *loginModule;\n\n  loginModule = [source objectForKey: @\"SOGoUIxLastModule\"];\n  if ([loginModule length])\n    {\n      rc = YES;\n      /* we need to use the old key, otherwise the migration will be blocked */\n      [self setObject: loginModule forKey: @\"SOGoUIxDefaultModule\"];\n      [self setRememberLastModule: YES];\n      [self removeObjectForKey: @\"SOGoUIxLastModule\"];\n    }\n  else\n    rc = NO;\n\n  return rc;\n}\n\n- (BOOL) _migrateMailIdentities\n{\n  BOOL rc;\n  NSArray *mailIdentities;\n  NSMutableDictionary *identity;\n  NSString *fullName, *email, *replyTo, *signature;\n\n  mailIdentities = [self mailIdentities];\n  if (mailIdentities)\n    {\n      rc = NO;\n    }\n  else\n    {\n      identity = [NSMutableDictionary dictionaryWithCapacity: 4];\n      fullName = [self stringForKey: @\"SOGoMailCustomFullName\"];\n      email = [self stringForKey: @\"SOGoMailCustomEmail\"];\n      replyTo = [self stringForKey: @\"SOGoMailReplyTo\"];\n      signature = [self stringForKey: @\"SOGoMailSignature\"];\n      rc = NO;\n\n      if ([fullName length])\n        [identity setObject: fullName forKey: @\"fullName\"];\n      if ([email length])\n        [identity setObject: email forKey: @\"email\"];\n      if ([replyTo length])\n        [identity setObject: replyTo forKey: @\"replyTo\"];\n      if ([signature length])\n        [identity setObject: signature forKey: @\"signature\"];\n\n      if ([identity count])\n        {\n          [identity setObject: [NSNumber numberWithBool: YES] forKey: @\"isDefault\"];\n          [self setMailIdentities: [NSArray arrayWithObject: identity]];\n          rc = YES;\n        }\n\n      /**\n       * Keep old attributes for now because v2 doesn't handle identities\n       *\n      if (fullName)\n       [self removeObjectForKey: @\"SOGoMailCustomFullName\"];\n      if (email)\n       [self removeObjectForKey: @\"SOGoMailCustomEmail\"];\n      if (replyTo)\n       [self removeObjectForKey: @\"SOGoMailReplyTo\"];\n      if (signature)\n        [self removeObjectForKey: @\"SOGoMailSignature\"];\n      */\n    }\n\n  return rc;\n}\n\n- (BOOL) _migrateCalendarCategories\n{\n  NSArray *categories, *colors;\n  NSDictionary *newColors;\n  BOOL rc;\n\n  colors = [source objectForKey: @\"SOGoCalendarCategoriesColors\"];\n  if ([colors isKindOfClass: [NSArray class]])\n    {\n      categories = [source objectForKey: @\"SOGoCalendarCategories\"];\n      if ([categories count] == [colors count])\n        {\n          newColors = [NSDictionary dictionaryWithObjects: colors\n                                                  forKeys: categories];\n          [source setObject: newColors\n                     forKey: @\"SOGoCalendarCategoriesColors\"];\n        }\n      else\n        [source removeObjectForKey: @\"SOGoCalendarCategoriesColors\"];\n      rc = YES;\n    }\n  else\n    rc = NO;\n\n  return rc;\n}\n\n- (BOOL) migrate\n{\n  static NSDictionary *migratedKeys = nil;\n\n  if (!migratedKeys)\n    {\n      migratedKeys\n        = [NSDictionary dictionaryWithObjectsAndKeys:\n                        @\"SOGoLoginModule\", @\"SOGoUIxDefaultModule\",\n                        @\"SOGoLoginModule\", @\"SOGoDefaultModule\",\n                        @\"SOGoTimeFormat\", @\"TimeFormat\",\n                        @\"SOGoShortDateFormat\", @\"ShortDateFormat\",\n                        @\"SOGoLongDateFormat\", @\"LongDateFormat\",\n                        @\"SOGoDayStartTime\", @\"DayStartTime\",\n                        @\"SOGoDayEndTime\", @\"DayEndTime\",\n                        @\"SOGoFirstDayOfWeek\", @\"WeekStartDay\",\n                        @\"SOGoFirstWeekOfYear\", @\"FirstWeek\",\n                        @\"SOGoLanguage\", @\"SOGoDefaultLanguage\",\n                        @\"SOGoLanguage\", @\"Language\",\n                        @\"SOGoMailComposeMessageType\", @\"ComposeMessagesType\",\n                        @\"SOGoSelectedAddressBook\", @\"SelectedAddressBook\",\n                        @\"SOGoRefreshViewCheck\", @\"RefreshViewCheck\",\n                        @\"SOGoMailMessageForwarding\", @\"MessageForwarding\",\n                        @\"SOGoMailSignature\", @\"MailSignature\",\n                        @\"SOGoMailSignaturePlacement\", @\"SignaturePlacement\",\n                        @\"SOGoMailReplyPlacement\", @\"ReplyPlacement\",\n                        @\"SOGoTimeZone\", @\"TimeZone\",\n                        @\"SOGoCalendarShouldDisplayWeekend\", @\"SOGoShouldDisplayWeekend\",\n                        @\"SOGoMailShowSubscribedFoldersOnly\", @\"showSubscribedFoldersOnly\",\n                        @\"SOGoReminderEnabled\", @\"ReminderEnabled\",\n                        @\"SOGoReminderTime\", @\"ReminderTime\",\n                        @\"SOGoRemindWithASound\", @\"RemindWithASound\",\n                        @\"SOGoTOTPEnabled\", @\"SOGoGoogleAuthenticatorEnabled\",\n                        nil];\n      [migratedKeys retain];\n    }\n\n  /* we must not use a boolean operation, otherwise subsequent migrations will\n     not be invoked in the case where rc = YES. */\n  return ([self _migrateLastModule]\n          // | [self _migrateSignature]\n          | [self _migrateMailIdentities]\n          | [self _migrateCalendarCategories]\n          | [self migrateOldDefaultsWithDictionary: migratedKeys]\n          | [super migrate]);\n}\n\n- (void) setLoginModule: (NSString *) newLoginModule\n{\n  [self setObject: newLoginModule forKey: @\"SOGoLoginModule\"];\n}\n\n- (NSString *) loginModule\n{\n  return [self stringForKey: @\"SOGoLoginModule\"];\n}\n\n- (void) setRememberLastModule: (BOOL) rememberLastModule\n{\n  [self setBool: rememberLastModule forKey: @\"SOGoRememberLastModule\"];\n}\n\n- (BOOL) rememberLastModule\n{\n  return [self boolForKey: @\"SOGoRememberLastModule\"];\n}\n\n- (void) setDefaultCalendar: (NSString *) newDefaultCalendar\n{\n  [self setObject: newDefaultCalendar forKey: @\"SOGoDefaultCalendar\"];\n}\n\n- (NSString *) defaultCalendar\n{\n  return [self stringForKey: @\"SOGoDefaultCalendar\"];\n}\n\n- (void) setDayStartTime: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoDayStartTime\"];\n}\n\n- (NSString *) dayStartTime\n{\n  return [self stringForKey: @\"SOGoDayStartTime\"];\n}\n\n- (unsigned int) dayStartHour\n{\n  return [[self dayStartTime] timeValue];\n}\n\n- (void) setDayEndTime: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoDayEndTime\"];\n}\n\n- (NSString *) dayEndTime\n{\n  return [self stringForKey: @\"SOGoDayEndTime\"];\n}\n\n- (unsigned int) dayEndHour\n{\n  return [[self dayEndTime] timeValue];\n}\n\n- (void) setBusyOffHours: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoBusyOffHours\"];\n}\n\n- (BOOL) busyOffHours\n{\n  return [self boolForKey: @\"SOGoBusyOffHours\"];\n}\n\n- (void) setTimeZoneName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoTimeZone\"];\n}\n\n- (NSString *) timeZoneName\n{\n  return [self stringForKey: @\"SOGoTimeZone\"];\n}\n\n- (void) setTimeZone: (NSTimeZone *) newValue\n{\n  [self setTimeZoneName: [newValue name]];\n}\n\n- (NSTimeZone *) timeZone\n{\n  return [NSTimeZone timeZoneWithName: [self timeZoneName]];\n}\n\n- (void) setLongDateFormat: (NSString *) newFormat\n{\n  [self setObject: newFormat forKey: @\"SOGoLongDateFormat\"];\n}\n\n- (void) unsetLongDateFormat\n{\n  [self removeObjectForKey: @\"SOGoLongDateFormat\"];\n}\n\n- (NSString *) longDateFormat\n{\n  return [self stringForKey: @\"SOGoLongDateFormat\"];\n}\n\n- (void) setShortDateFormat: (NSString *) newFormat;\n{\n  [self setObject: newFormat forKey: @\"SOGoShortDateFormat\"];\n}\n\n- (void) unsetShortDateFormat\n{\n  [self removeObjectForKey: @\"SOGoShortDateFormat\"];\n}\n\n- (NSString *) shortDateFormat;\n{\n  return [self stringForKey: @\"SOGoShortDateFormat\"];\n}\n\n- (void) setTimeFormat: (NSString *) newFormat\n{\n  [self setObject: newFormat forKey: @\"SOGoTimeFormat\"];\n}\n\n- (void) unsetTimeFormat\n{\n  [self removeObjectForKey: @\"SOGoTimeFormat\"];\n}\n\n- (NSString *) timeFormat\n{\n  return [self stringForKey: @\"SOGoTimeFormat\"];\n}\n\n- (void) setLanguage: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoLanguage\"];\n}\n\n- (NSString *) language\n{\n  NSArray *supportedLanguages;\n\n  if (!userLanguage)\n    {\n      /* see SOGoDomainDefaults for the meaning of this */\n      userLanguage = [source objectForKey: @\"SOGoLanguage\"];\n      if (!(userLanguage && [userLanguage isKindOfClass: [NSString class]]))\n        userLanguage = [(SOGoDomainDefaults *) parentSource language];\n  \n      supportedLanguages = [[SOGoSystemDefaults sharedSystemDefaults]\n                             supportedLanguages];\n\n      /* make sure the language is part of the supported languages */\n      if (![supportedLanguages containsObject: userLanguage])\n        userLanguage = [parentSource stringForKey: @\"SOGoLanguage\"];\n      [userLanguage retain];\n    }\n\n  return userLanguage;\n}\n\n- (void) setMailAddOutgoingAddresses: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailAddOutgoingAddresses\"];\n}\n\n- (BOOL) mailAddOutgoingAddresses\n{\n  return [self boolForKey: @\"SOGoMailAddOutgoingAddresses\"];\n}\n\n- (void) setMailShowSubscribedFoldersOnly: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailShowSubscribedFoldersOnly\"];\n}\n\n- (BOOL) mailShowSubscribedFoldersOnly\n{\n  return [self boolForKey: @\"SOGoMailShowSubscribedFoldersOnly\"];\n}\n\n- (void) setSynchronizeOnlyDefaultMailFolders: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailSynchronizeOnlyDefaultFolders\"];\n}\n\n- (BOOL) synchronizeOnlyDefaultMailFolders\n{\n  return [self boolForKey: @\"SOGoMailSynchronizeOnlyDefaultFolders\"];\n}\n\n- (void) setMailSortByThreads: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailSortByThreads\"];\n}\n\n- (BOOL) mailSortByThreads\n{\n  return [self boolForKey: @\"SOGoMailSortByThreads\"];\n}\n\n- (void) setDraftsFolderName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoDraftsFolderName\"];\n}\n\n- (NSString *) draftsFolderName\n{\n  return [[self stringForKey: @\"SOGoDraftsFolderName\"]\n             stringByEncodingImap4FolderName];\n}\n\n- (void) setSentFolderName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoSentFolderName\"];\n}\n\n- (NSString *) sentFolderName\n{\n  return [[self stringForKey: @\"SOGoSentFolderName\"]\n             stringByEncodingImap4FolderName];\n}\n\n- (void) setTrashFolderName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoTrashFolderName\"];\n}\n\n- (NSString *) trashFolderName\n{\n  return [[self stringForKey: @\"SOGoTrashFolderName\"]\n             stringByEncodingImap4FolderName];\n}\n\n- (void) setJunkFolderName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoJunkFolderName\"];\n}\n\n- (NSString *) junkFolderName\n{\n  return [[self stringForKey: @\"SOGoJunkFolderName\"]\n             stringByEncodingImap4FolderName];\n}\n\n- (void) setTemplatesFolderName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoTemplatesFolderName\"];\n}\n\n- (NSString *) templatesFolderName\n{\n  return [[self stringForKey: @\"SOGoTemplatesFolderName\"]\n           stringByEncodingImap4FolderName];\n}\n\n- (void) setFirstDayOfWeek: (int) newValue\n{\n  [self setInteger: newValue forKey: @\"SOGoFirstDayOfWeek\"];\n}\n\n- (int) firstDayOfWeek\n{\n  return [self integerForKey: @\"SOGoFirstDayOfWeek\"];\n}\n\n- (void) setFirstWeekOfYear: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoFirstWeekOfYear\"];\n}\n\n- (NSString *) firstWeekOfYear\n{\n  return [self stringForKey: @\"SOGoFirstWeekOfYear\"];\n}\n\n- (void) setMailListViewColumnsOrder: (NSArray *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailListViewColumnsOrder\"];\n}\n\n- (NSArray *) mailListViewColumnsOrder\n{\n  return [self stringArrayForKey: @\"SOGoMailListViewColumnsOrder\"];\n}\n\n- (void) setSelectedAddressBook: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoSelectedAddressBook\"];\n}\n\n- (NSString *) selectedAddressBook\n{\n  return [self stringForKey: @\"SOGoSelectedAddressBook\"];\n}\n\n- (void) setRefreshViewCheck: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoRefreshViewCheck\"];\n}\n\n- (NSString *) refreshViewCheck\n{\n  return [self stringForKey: @\"SOGoRefreshViewCheck\"];\n}\n\n- (BOOL) gravatarEnabled\n{\n  return [self boolForKey: @\"SOGoGravatarEnabled\"];\n}\n\n- (void) setAlternateAvatar: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoAlternateAvatar\"];\n}\n\n- (NSString *) alternateAvatar\n{\n  return [self stringForKey: @\"SOGoAlternateAvatar\"];\n}\n\n- (void) setAnimationMode: (NSString *) newValue\n{\n  if ([newValue isEqualToString: @\"normal\"] ||\n      [newValue isEqualToString: @\"limited\"] ||\n      [newValue isEqualToString: @\"none\"])\n    [self setObject: newValue forKey: @\"SOGoAnimationMode\"];\n}\n\n- (NSString *) animationMode\n{\n  return [self stringForKey: @\"SOGoAnimationMode\"];\n}\n\n- (BOOL) totpEnabled\n{\n  return [self boolForKey: @\"SOGoTOTPEnabled\"];\n}\n\n- (void) setTotpEnabled: (BOOL) newValue\n{\n  [self setBool: newValue  forKey: @\"SOGoTOTPEnabled\"];\n}\n\n- (void) setMailComposeWindow: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailComposeWindow\"];\n}\n\n- (NSString *) mailComposeWindow\n{\n  return [self stringForKey: @\"SOGoMailComposeWindow\"];\n}\n\n- (void) setMailComposeMessageType: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailComposeMessageType\"];\n}\n\n- (NSString *) mailComposeMessageType\n{\n  return [self stringForKey: @\"SOGoMailComposeMessageType\"];\n}\n\n- (void) setMailComposeFontSize: (int) newValue\n{\n  [self setInteger: newValue forKey: @\"SOGoMailComposeFontSize\"];\n}\n\n- (int) mailComposeFontSize\n{\n  return [self integerForKey: @\"SOGoMailComposeFontSize\"];\n}\n\n- (void) setMailDisplayRemoteInlineImages: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailDisplayRemoteInlineImages\"];\n}\n\n- (NSString *) mailDisplayRemoteInlineImages;\n{\n  return [self stringForKey: @\"SOGoMailDisplayRemoteInlineImages\"];\n}\n\n- (void) setMailAutoMarkAsReadDelay: (int) newValue\n{\n  [self setInteger: newValue forKey: @\"SOGoMailAutoMarkAsReadDelay\"];\n}\n\n- (int) mailAutoMarkAsReadDelay\n{\n  return [self integerForKey: @\"SOGoMailAutoMarkAsReadDelay\"];\n}\n\n- (void) setMailAutoSave: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailAutoSave\"];\n}\n\n- (NSString *) mailAutoSave\n{\n  NSString *s;\n\n  s = [self stringForKey: @\"SOGoMailAutoSave\"];\n\n  if ([s intValue] == 0)\n    s = @\"5\";\n  \n  return s;\n}\n\n- (void) setMailMessageForwarding: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailMessageForwarding\"];\n}\n\n- (NSString *) mailMessageForwarding\n{\n  return [self stringForKey: @\"SOGoMailMessageForwarding\"];\n}\n\n- (void) setMailReplyPlacement: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailReplyPlacement\"];\n}\n\n- (NSString *) mailReplyPlacement\n{\n  return [self stringForKey: @\"SOGoMailReplyPlacement\"];\n}\n\n- (void) setMailSignaturePlacement: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailSignaturePlacement\"];\n}\n\n- (NSString *) mailSignaturePlacement\n{\n  NSString *signaturePlacement;\n\n  if ([[self mailReplyPlacement] isEqualToString: @\"below\"])\n    // When replying to an email, if the reply is below the quoted text,\n    // the signature must also be below the quoted text.\n    signaturePlacement = @\"below\";\n  else\n    signaturePlacement = [self stringForKey: @\"SOGoMailSignaturePlacement\"];\n\n  return signaturePlacement;\n}\n\n- (void) setAllowUserReceipt: (BOOL) allow\n{\n  [self setBool: allow forKey: @\"SOGoMailReceiptAllow\"];\n}\n\n- (BOOL) allowUserReceipt\n{\n  return [self boolForKey: @\"SOGoMailReceiptAllow\"];\n}\n\n- (void) setUserReceiptNonRecipientAction: (NSString *) action\n{\n  [self setObject: action forKey: @\"SOGoMailReceiptNonRecipientAction\"];\n}\n\n- (NSString *) userReceiptNonRecipientAction\n{\n  return [self stringForKey: @\"SOGoMailReceiptNonRecipientAction\"];\n}\n\n- (void) setUserReceiptOutsideDomainAction: (NSString *) action\n{\n  [self setObject: action forKey: @\"SOGoMailReceiptOutsideDomainAction\"];\n}\n\n- (NSString *) userReceiptOutsideDomainAction\n{\n  return [self stringForKey: @\"SOGoMailReceiptOutsideDomainAction\"];\n}\n\n- (void) setUserReceiptAnyAction: (NSString *) action\n{\n  [self setObject: action forKey: @\"SOGoMailReceiptAnyAction\"];\n}\n\n- (NSString *) userReceiptAnyAction\n{\n  return [self stringForKey: @\"SOGoMailReceiptAnyAction\"];\n}\n\n- (void) setMailUseOutlookStyleReplies: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailUseOutlookStyleReplies\"];\n}\n\n- (BOOL) mailUseOutlookStyleReplies\n{\n  return [self boolForKey: @\"SOGoMailUseOutlookStyleReplies\"];\n}\n\n- (void) setMailCertificate: (NSData *) newValue\n{\n  [self setObject: [newValue stringByEncodingBase64] forKey: @\"SOGoMailCertificate\"];\n}\n\n- (void) unsetMailCertificate\n{\n  [self removeObjectForKey: @\"SOGoMailCertificate\"];\n}\n\n- (NSString *) mailCertificate\n{\n  return [self stringForKey: @\"SOGoMailCertificate\"];\n}\n\n- (void) setMailCertificateAlwaysSign: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailCertificateAlwaysSign\"];\n}\n\n- (BOOL) mailCertificateAlwaysSign\n{\n  return [self boolForKey: @\"SOGoMailCertificateAlwaysSign\"];\n}\n\n- (void) setMailCertificateAlwaysEncrypt: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailCertificateAlwaysEncrypt\"];\n}\n\n- (BOOL) mailCertificateAlwaysEncrypt\n{\n  return [self boolForKey: @\"SOGoMailCertificateAlwaysEncrypt\"];\n}\n\n- (void) setMailIdentities: (NSArray *) newIdentites\n{\n  [self setObject: newIdentites forKey: @\"SOGoMailIdentities\"];\n}\n\n- (NSArray *) mailIdentities\n{\n  return [self arrayForKey: @\"SOGoMailIdentities\"];\n}\n\n- (void) setMailForceDefaultIdentity: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailForceDefaultIdentity\"];\n}\n\n- (BOOL) mailForceDefaultIdentity\n{\n  return [self boolForKey: @\"SOGoMailForceDefaultIdentity\"];\n}\n\n- (void) setAuxiliaryMailAccounts: (NSArray *) newAccounts\n{\n  [self setObject: newAccounts forKey: @\"AuxiliaryMailAccounts\"];\n}\n\n- (NSArray *) auxiliaryMailAccounts\n{\n  return [self arrayForKey: @\"AuxiliaryMailAccounts\"];\n}\n\n- (void) setCalendarCategories: (NSArray *) newValues\n{\n  [self setObject: newValues forKey: @\"SOGoCalendarCategories\"];\n}\n\n- (NSArray *) calendarCategories\n{\n  return [self stringArrayForKey: @\"SOGoCalendarCategories\"];\n}\n\n- (void) setCalendarCategoriesColors: (NSDictionary *) newValues\n{\n  [self setObject: newValues forKey: @\"SOGoCalendarCategoriesColors\"];\n}\n\n- (NSDictionary *) calendarCategoriesColors\n{\n  return [self objectForKey: @\"SOGoCalendarCategoriesColors\"];\n}\n\n- (void) setCalendarWeekdays: (NSArray *) newValues\n{\n  [self setObject: newValues forKey: @\"SOGoCalendarWeekdays\"];\n}\n\n- (NSArray *) calendarWeekdays\n{\n  return [self stringArrayForKey: @\"SOGoCalendarWeekdays\"];\n}\n\n- (void) setCalendarShouldDisplayWeekend: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoCalendarShouldDisplayWeekend\"];\n}\n\n- (BOOL) calendarShouldDisplayWeekend\n{\n  return [self boolForKey: @\"SOGoCalendarShouldDisplayWeekend\"];\n}\n\n- (void) setCalendarEventsDefaultClassification: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoCalendarEventsDefaultClassification\"];\n}\n\n- (NSString *) calendarEventsDefaultClassification\n{\n  return [self stringForKey: @\"SOGoCalendarEventsDefaultClassification\"];\n}\n\n- (void) setCalendarTasksDefaultClassification: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoCalendarTasksDefaultClassification\"];\n}\n\n- (NSString *) calendarTasksDefaultClassification\n{\n  return [self stringForKey: @\"SOGoCalendarTasksDefaultClassification\"];\n}\n\n- (void) setCalendarDefaultReminder: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoCalendarDefaultReminder\"];\n}\n\n- (NSString *) calendarDefaultReminder\n{\n  return [self stringForKey: @\"SOGoCalendarDefaultReminder\"];\n}\n\n//\n// Dictionary of arrays. Example:\n//\n// {\n//   label1 => (\"Important\", \"#FF0000\");\n//   label2 => (\"Work\" \"#00FF00\");\n//   foo_bar => (\"Foo Bar\", \"#0000FF\");\n// }\n//\n- (void) setMailLabelsColors: (NSDictionary *) newValues\n{\n  [self setObject: newValues forKey: @\"SOGoMailLabelsColors\"];\n}\n\n- (NSDictionary *) mailLabelsColors\n{\n  return [self objectForKey: @\"SOGoMailLabelsColors\"];\n}\n\n- (void) setSieveFilters: (NSArray *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoSieveFilters\"];\n}\n\n- (NSArray *) sieveFilters\n{\n  return [self arrayForKey: @\"SOGoSieveFilters\"];\n}\n\n- (void) setVacationOptions: (NSDictionary *) newValue\n{\n  [self setObject: newValue forKey: @\"Vacation\"];\n}\n\n- (NSDictionary *) vacationOptions\n{\n  return [self dictionaryForKey: @\"Vacation\"];\n}\n\n- (void) setForwardOptions: (NSDictionary *) newValue\n{\n  [self setObject: newValue forKey: @\"Forward\"];\n}\n\n- (NSDictionary *) forwardOptions\n{\n  return [self dictionaryForKey: @\"Forward\"];\n}\n\n- (void) setContactsCategories: (NSArray *) newValues\n{\n  [self setObject: newValues forKey: @\"SOGoContactsCategories\"];\n}\n\n- (NSArray *) contactsCategories\n{\n  return [self stringArrayForKey: @\"SOGoContactsCategories\"];\n}\n\n- (void) setPasswordRecoveryMode: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoPasswordRecoveryMode\"];\n}\n\n- (NSString *) passwordRecoveryMode\n{\n  return [self stringForKey: @\"SOGoPasswordRecoveryMode\"];\n}\n\n- (void) setPasswordRecoveryQuestion: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoPasswordRecoveryQuestion\"];\n}\n\n- (NSString *) passwordRecoveryQuestion\n{\n  return [self stringForKey: @\"SOGoPasswordRecoveryQuestion\"];\n}\n\n- (void) setPasswordRecoveryQuestionAnswer: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoPasswordRecoveryQuestionAnswer\"];\n}\n\n- (NSString *) passwordRecoveryQuestionAnswer\n{\n  return [self stringForKey: @\"SOGoPasswordRecoveryQuestionAnswer\"];\n}\n\n- (void) setPasswordRecoverySecondaryEmail: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoPasswordRecoverySecondaryEmail\"];\n}\n\n- (NSString *) passwordRecoverySecondaryEmail\n{\n  return [self stringForKey: @\"SOGoPasswordRecoverySecondaryEmail\"];\n}\n\n@end\n"], "fixing_code": ["/* SOGoUserDefaults.m - this file is part of SOGo\n *\n * Copyright (C) 2009-2022 Inverse inc.\n *\n * This file is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This file is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; see the file COPYING.  If not, write to\n * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n#import <Foundation/NSData.h>\n#import <Foundation/NSDictionary.h>\n#import <Foundation/NSTimeZone.h>\n#import <Foundation/NSValue.h>\n\n#import <NGExtensions/NGBase64Coding.h>\n#import <NGImap4/NSString+Imap4.h>\n#import <NGObjWeb/WOApplication.h>\n#import <NGObjWeb/WOContext+SoObjects.h>\n#import <NGObjWeb/WEClientCapabilities.h>\n\n#import \"NSString+Utilities.h\"\n#import \"SOGoSystemDefaults.h\"\n#import \"SOGoUserProfile.h\"\n\n\n\nNSString *SOGoWeekStartJanuary1 = @\"January1\";\nNSString *SOGoWeekStartFirst4DayWeek = @\"First4DayWeek\";\nNSString *SOGoWeekStartFirstFullWeek = @\"FirstFullWeek\";\n\nNSString *SOGoPasswordRecoveryDisabled = @\"Disabled\";\nNSString *SOGoPasswordRecoveryQuestion = @\"SecretQuestion\";\nNSString *SOGoPasswordRecoveryQuestion1 = @\"SecretQuestion1\";\nNSString *SOGoPasswordRecoveryQuestion2 = @\"SecretQuestion2\";\nNSString *SOGoPasswordRecoveryQuestion3 = @\"SecretQuestion3\";\nNSString *SOGoPasswordRecoverySecondaryEmail = @\"SecondaryEmail\";\n\n\n@implementation SOGoUserDefaults\n\n+ (NSString *) userProfileClassName\n{\n  return @\"SOGoSQLUserProfile\";\n}\n\n+ (SOGoUserDefaults *) defaultsForUser: (NSString *) userId\n                              inDomain: (NSString *) domainId\n{\n  SOGoUserProfile *up;\n  SOGoUserDefaults *ud;\n  SOGoDefaultsSource *parent;\n  WOContext *context;\n  WEClientCapabilities *cc;\n  static Class SOGoUserProfileKlass = Nil;\n\n  if (!SOGoUserProfileKlass)\n    SOGoUserProfileKlass = NSClassFromString ([self userProfileClassName]);\n\n  up = [SOGoUserProfileKlass userProfileWithType: SOGoUserProfileTypeDefaults\n                                          forUID: userId];\n  [up fetchProfile];\n\n  parent = [SOGoDomainDefaults defaultsForDomain: domainId];\n  if (!parent)\n    parent = [SOGoSystemDefaults sharedSystemDefaults];\n\n  ud = [self defaultsSourceWithSource: up andParentSource: parent];\n\n  // CKEditor (the HTML editor) is no longer compatible with IE7;\n  // force the user to use the plain text editor with IE7\n  context = [[WOApplication application] context];\n  cc = [[context request] clientCapabilities];\n  if ([cc isInternetExplorer] && [cc majorVersion] < 8)\n    {\n      [ud setObject: @\"text\" forKey: @\"SOGoMailComposeMessageType\"];\n    }\n\n  return ud;\n}\n\n- (id) init\n{\n  if ((self = [super init]))\n    {\n      userLanguage = nil;\n    }\n\n  return self;\n}\n\n- (void) dealloc\n{\n  [userLanguage release];\n  [super dealloc];\n}\n\n- (BOOL) _migrateLastModule\n{\n  BOOL rc;\n  NSString *loginModule;\n\n  loginModule = [source objectForKey: @\"SOGoUIxLastModule\"];\n  if ([loginModule length])\n    {\n      rc = YES;\n      /* we need to use the old key, otherwise the migration will be blocked */\n      [self setObject: loginModule forKey: @\"SOGoUIxDefaultModule\"];\n      [self setRememberLastModule: YES];\n      [self removeObjectForKey: @\"SOGoUIxLastModule\"];\n    }\n  else\n    rc = NO;\n\n  return rc;\n}\n\n- (BOOL) _migrateMailIdentities\n{\n  BOOL rc;\n  NSArray *mailIdentities;\n  NSMutableDictionary *identity;\n  NSString *fullName, *email, *replyTo, *signature;\n\n  mailIdentities = [self mailIdentities];\n  if (mailIdentities)\n    {\n      rc = NO;\n    }\n  else\n    {\n      identity = [NSMutableDictionary dictionaryWithCapacity: 4];\n      fullName = [self stringForKey: @\"SOGoMailCustomFullName\"];\n      email = [self stringForKey: @\"SOGoMailCustomEmail\"];\n      replyTo = [self stringForKey: @\"SOGoMailReplyTo\"];\n      signature = [self stringForKey: @\"SOGoMailSignature\"];\n      rc = NO;\n\n      if ([fullName length])\n        [identity setObject: [fullName stringWithoutHTMLInjection: YES] forKey: @\"fullName\"];\n      if ([email length])\n        [identity setObject: email forKey: @\"email\"];\n      if ([replyTo length])\n        [identity setObject: replyTo forKey: @\"replyTo\"];\n      if ([signature length])\n        [identity setObject: signature forKey: @\"signature\"];\n\n      if ([identity count])\n        {\n          [identity setObject: [NSNumber numberWithBool: YES] forKey: @\"isDefault\"];\n          [self setMailIdentities: [NSArray arrayWithObject: identity]];\n          rc = YES;\n        }\n\n      /**\n       * Keep old attributes for now because v2 doesn't handle identities\n       *\n      if (fullName)\n       [self removeObjectForKey: @\"SOGoMailCustomFullName\"];\n      if (email)\n       [self removeObjectForKey: @\"SOGoMailCustomEmail\"];\n      if (replyTo)\n       [self removeObjectForKey: @\"SOGoMailReplyTo\"];\n      if (signature)\n        [self removeObjectForKey: @\"SOGoMailSignature\"];\n      */\n    }\n\n  return rc;\n}\n\n- (BOOL) _migrateCalendarCategories\n{\n  NSArray *categories, *colors;\n  NSDictionary *newColors;\n  BOOL rc;\n\n  colors = [source objectForKey: @\"SOGoCalendarCategoriesColors\"];\n  if ([colors isKindOfClass: [NSArray class]])\n    {\n      categories = [source objectForKey: @\"SOGoCalendarCategories\"];\n      if ([categories count] == [colors count])\n        {\n          newColors = [NSDictionary dictionaryWithObjects: colors\n                                                  forKeys: categories];\n          [source setObject: newColors\n                     forKey: @\"SOGoCalendarCategoriesColors\"];\n        }\n      else\n        [source removeObjectForKey: @\"SOGoCalendarCategoriesColors\"];\n      rc = YES;\n    }\n  else\n    rc = NO;\n\n  return rc;\n}\n\n- (BOOL) migrate\n{\n  static NSDictionary *migratedKeys = nil;\n\n  if (!migratedKeys)\n    {\n      migratedKeys\n        = [NSDictionary dictionaryWithObjectsAndKeys:\n                        @\"SOGoLoginModule\", @\"SOGoUIxDefaultModule\",\n                        @\"SOGoLoginModule\", @\"SOGoDefaultModule\",\n                        @\"SOGoTimeFormat\", @\"TimeFormat\",\n                        @\"SOGoShortDateFormat\", @\"ShortDateFormat\",\n                        @\"SOGoLongDateFormat\", @\"LongDateFormat\",\n                        @\"SOGoDayStartTime\", @\"DayStartTime\",\n                        @\"SOGoDayEndTime\", @\"DayEndTime\",\n                        @\"SOGoFirstDayOfWeek\", @\"WeekStartDay\",\n                        @\"SOGoFirstWeekOfYear\", @\"FirstWeek\",\n                        @\"SOGoLanguage\", @\"SOGoDefaultLanguage\",\n                        @\"SOGoLanguage\", @\"Language\",\n                        @\"SOGoMailComposeMessageType\", @\"ComposeMessagesType\",\n                        @\"SOGoSelectedAddressBook\", @\"SelectedAddressBook\",\n                        @\"SOGoRefreshViewCheck\", @\"RefreshViewCheck\",\n                        @\"SOGoMailMessageForwarding\", @\"MessageForwarding\",\n                        @\"SOGoMailSignature\", @\"MailSignature\",\n                        @\"SOGoMailSignaturePlacement\", @\"SignaturePlacement\",\n                        @\"SOGoMailReplyPlacement\", @\"ReplyPlacement\",\n                        @\"SOGoTimeZone\", @\"TimeZone\",\n                        @\"SOGoCalendarShouldDisplayWeekend\", @\"SOGoShouldDisplayWeekend\",\n                        @\"SOGoMailShowSubscribedFoldersOnly\", @\"showSubscribedFoldersOnly\",\n                        @\"SOGoReminderEnabled\", @\"ReminderEnabled\",\n                        @\"SOGoReminderTime\", @\"ReminderTime\",\n                        @\"SOGoRemindWithASound\", @\"RemindWithASound\",\n                        @\"SOGoTOTPEnabled\", @\"SOGoGoogleAuthenticatorEnabled\",\n                        nil];\n      [migratedKeys retain];\n    }\n\n  /* we must not use a boolean operation, otherwise subsequent migrations will\n     not be invoked in the case where rc = YES. */\n  return ([self _migrateLastModule]\n          // | [self _migrateSignature]\n          | [self _migrateMailIdentities]\n          | [self _migrateCalendarCategories]\n          | [self migrateOldDefaultsWithDictionary: migratedKeys]\n          | [super migrate]);\n}\n\n- (void) setLoginModule: (NSString *) newLoginModule\n{\n  [self setObject: newLoginModule forKey: @\"SOGoLoginModule\"];\n}\n\n- (NSString *) loginModule\n{\n  return [self stringForKey: @\"SOGoLoginModule\"];\n}\n\n- (void) setRememberLastModule: (BOOL) rememberLastModule\n{\n  [self setBool: rememberLastModule forKey: @\"SOGoRememberLastModule\"];\n}\n\n- (BOOL) rememberLastModule\n{\n  return [self boolForKey: @\"SOGoRememberLastModule\"];\n}\n\n- (void) setDefaultCalendar: (NSString *) newDefaultCalendar\n{\n  [self setObject: newDefaultCalendar forKey: @\"SOGoDefaultCalendar\"];\n}\n\n- (NSString *) defaultCalendar\n{\n  return [self stringForKey: @\"SOGoDefaultCalendar\"];\n}\n\n- (void) setDayStartTime: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoDayStartTime\"];\n}\n\n- (NSString *) dayStartTime\n{\n  return [self stringForKey: @\"SOGoDayStartTime\"];\n}\n\n- (unsigned int) dayStartHour\n{\n  return [[self dayStartTime] timeValue];\n}\n\n- (void) setDayEndTime: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoDayEndTime\"];\n}\n\n- (NSString *) dayEndTime\n{\n  return [self stringForKey: @\"SOGoDayEndTime\"];\n}\n\n- (unsigned int) dayEndHour\n{\n  return [[self dayEndTime] timeValue];\n}\n\n- (void) setBusyOffHours: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoBusyOffHours\"];\n}\n\n- (BOOL) busyOffHours\n{\n  return [self boolForKey: @\"SOGoBusyOffHours\"];\n}\n\n- (void) setTimeZoneName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoTimeZone\"];\n}\n\n- (NSString *) timeZoneName\n{\n  return [self stringForKey: @\"SOGoTimeZone\"];\n}\n\n- (void) setTimeZone: (NSTimeZone *) newValue\n{\n  [self setTimeZoneName: [newValue name]];\n}\n\n- (NSTimeZone *) timeZone\n{\n  return [NSTimeZone timeZoneWithName: [self timeZoneName]];\n}\n\n- (void) setLongDateFormat: (NSString *) newFormat\n{\n  [self setObject: newFormat forKey: @\"SOGoLongDateFormat\"];\n}\n\n- (void) unsetLongDateFormat\n{\n  [self removeObjectForKey: @\"SOGoLongDateFormat\"];\n}\n\n- (NSString *) longDateFormat\n{\n  return [self stringForKey: @\"SOGoLongDateFormat\"];\n}\n\n- (void) setShortDateFormat: (NSString *) newFormat;\n{\n  [self setObject: newFormat forKey: @\"SOGoShortDateFormat\"];\n}\n\n- (void) unsetShortDateFormat\n{\n  [self removeObjectForKey: @\"SOGoShortDateFormat\"];\n}\n\n- (NSString *) shortDateFormat;\n{\n  return [self stringForKey: @\"SOGoShortDateFormat\"];\n}\n\n- (void) setTimeFormat: (NSString *) newFormat\n{\n  [self setObject: newFormat forKey: @\"SOGoTimeFormat\"];\n}\n\n- (void) unsetTimeFormat\n{\n  [self removeObjectForKey: @\"SOGoTimeFormat\"];\n}\n\n- (NSString *) timeFormat\n{\n  return [self stringForKey: @\"SOGoTimeFormat\"];\n}\n\n- (void) setLanguage: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoLanguage\"];\n}\n\n- (NSString *) language\n{\n  NSArray *supportedLanguages;\n\n  if (!userLanguage)\n    {\n      /* see SOGoDomainDefaults for the meaning of this */\n      userLanguage = [source objectForKey: @\"SOGoLanguage\"];\n      if (!(userLanguage && [userLanguage isKindOfClass: [NSString class]]))\n        userLanguage = [(SOGoDomainDefaults *) parentSource language];\n  \n      supportedLanguages = [[SOGoSystemDefaults sharedSystemDefaults]\n                             supportedLanguages];\n\n      /* make sure the language is part of the supported languages */\n      if (![supportedLanguages containsObject: userLanguage])\n        userLanguage = [parentSource stringForKey: @\"SOGoLanguage\"];\n      [userLanguage retain];\n    }\n\n  return userLanguage;\n}\n\n- (void) setMailAddOutgoingAddresses: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailAddOutgoingAddresses\"];\n}\n\n- (BOOL) mailAddOutgoingAddresses\n{\n  return [self boolForKey: @\"SOGoMailAddOutgoingAddresses\"];\n}\n\n- (void) setMailShowSubscribedFoldersOnly: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailShowSubscribedFoldersOnly\"];\n}\n\n- (BOOL) mailShowSubscribedFoldersOnly\n{\n  return [self boolForKey: @\"SOGoMailShowSubscribedFoldersOnly\"];\n}\n\n- (void) setSynchronizeOnlyDefaultMailFolders: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailSynchronizeOnlyDefaultFolders\"];\n}\n\n- (BOOL) synchronizeOnlyDefaultMailFolders\n{\n  return [self boolForKey: @\"SOGoMailSynchronizeOnlyDefaultFolders\"];\n}\n\n- (void) setMailSortByThreads: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailSortByThreads\"];\n}\n\n- (BOOL) mailSortByThreads\n{\n  return [self boolForKey: @\"SOGoMailSortByThreads\"];\n}\n\n- (void) setDraftsFolderName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoDraftsFolderName\"];\n}\n\n- (NSString *) draftsFolderName\n{\n  return [[self stringForKey: @\"SOGoDraftsFolderName\"]\n             stringByEncodingImap4FolderName];\n}\n\n- (void) setSentFolderName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoSentFolderName\"];\n}\n\n- (NSString *) sentFolderName\n{\n  return [[self stringForKey: @\"SOGoSentFolderName\"]\n             stringByEncodingImap4FolderName];\n}\n\n- (void) setTrashFolderName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoTrashFolderName\"];\n}\n\n- (NSString *) trashFolderName\n{\n  return [[self stringForKey: @\"SOGoTrashFolderName\"]\n             stringByEncodingImap4FolderName];\n}\n\n- (void) setJunkFolderName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoJunkFolderName\"];\n}\n\n- (NSString *) junkFolderName\n{\n  return [[self stringForKey: @\"SOGoJunkFolderName\"]\n             stringByEncodingImap4FolderName];\n}\n\n- (void) setTemplatesFolderName: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoTemplatesFolderName\"];\n}\n\n- (NSString *) templatesFolderName\n{\n  return [[self stringForKey: @\"SOGoTemplatesFolderName\"]\n           stringByEncodingImap4FolderName];\n}\n\n- (void) setFirstDayOfWeek: (int) newValue\n{\n  [self setInteger: newValue forKey: @\"SOGoFirstDayOfWeek\"];\n}\n\n- (int) firstDayOfWeek\n{\n  return [self integerForKey: @\"SOGoFirstDayOfWeek\"];\n}\n\n- (void) setFirstWeekOfYear: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoFirstWeekOfYear\"];\n}\n\n- (NSString *) firstWeekOfYear\n{\n  return [self stringForKey: @\"SOGoFirstWeekOfYear\"];\n}\n\n- (void) setMailListViewColumnsOrder: (NSArray *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailListViewColumnsOrder\"];\n}\n\n- (NSArray *) mailListViewColumnsOrder\n{\n  return [self stringArrayForKey: @\"SOGoMailListViewColumnsOrder\"];\n}\n\n- (void) setSelectedAddressBook: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoSelectedAddressBook\"];\n}\n\n- (NSString *) selectedAddressBook\n{\n  return [self stringForKey: @\"SOGoSelectedAddressBook\"];\n}\n\n- (void) setRefreshViewCheck: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoRefreshViewCheck\"];\n}\n\n- (NSString *) refreshViewCheck\n{\n  return [self stringForKey: @\"SOGoRefreshViewCheck\"];\n}\n\n- (BOOL) gravatarEnabled\n{\n  return [self boolForKey: @\"SOGoGravatarEnabled\"];\n}\n\n- (void) setAlternateAvatar: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoAlternateAvatar\"];\n}\n\n- (NSString *) alternateAvatar\n{\n  return [self stringForKey: @\"SOGoAlternateAvatar\"];\n}\n\n- (void) setAnimationMode: (NSString *) newValue\n{\n  if ([newValue isEqualToString: @\"normal\"] ||\n      [newValue isEqualToString: @\"limited\"] ||\n      [newValue isEqualToString: @\"none\"])\n    [self setObject: newValue forKey: @\"SOGoAnimationMode\"];\n}\n\n- (NSString *) animationMode\n{\n  return [self stringForKey: @\"SOGoAnimationMode\"];\n}\n\n- (BOOL) totpEnabled\n{\n  return [self boolForKey: @\"SOGoTOTPEnabled\"];\n}\n\n- (void) setTotpEnabled: (BOOL) newValue\n{\n  [self setBool: newValue  forKey: @\"SOGoTOTPEnabled\"];\n}\n\n- (void) setMailComposeWindow: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailComposeWindow\"];\n}\n\n- (NSString *) mailComposeWindow\n{\n  return [self stringForKey: @\"SOGoMailComposeWindow\"];\n}\n\n- (void) setMailComposeMessageType: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailComposeMessageType\"];\n}\n\n- (NSString *) mailComposeMessageType\n{\n  return [self stringForKey: @\"SOGoMailComposeMessageType\"];\n}\n\n- (void) setMailComposeFontSize: (int) newValue\n{\n  [self setInteger: newValue forKey: @\"SOGoMailComposeFontSize\"];\n}\n\n- (int) mailComposeFontSize\n{\n  return [self integerForKey: @\"SOGoMailComposeFontSize\"];\n}\n\n- (void) setMailDisplayRemoteInlineImages: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailDisplayRemoteInlineImages\"];\n}\n\n- (NSString *) mailDisplayRemoteInlineImages;\n{\n  return [self stringForKey: @\"SOGoMailDisplayRemoteInlineImages\"];\n}\n\n- (void) setMailAutoMarkAsReadDelay: (int) newValue\n{\n  [self setInteger: newValue forKey: @\"SOGoMailAutoMarkAsReadDelay\"];\n}\n\n- (int) mailAutoMarkAsReadDelay\n{\n  return [self integerForKey: @\"SOGoMailAutoMarkAsReadDelay\"];\n}\n\n- (void) setMailAutoSave: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailAutoSave\"];\n}\n\n- (NSString *) mailAutoSave\n{\n  NSString *s;\n\n  s = [self stringForKey: @\"SOGoMailAutoSave\"];\n\n  if ([s intValue] == 0)\n    s = @\"5\";\n  \n  return s;\n}\n\n- (void) setMailMessageForwarding: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailMessageForwarding\"];\n}\n\n- (NSString *) mailMessageForwarding\n{\n  return [self stringForKey: @\"SOGoMailMessageForwarding\"];\n}\n\n- (void) setMailReplyPlacement: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailReplyPlacement\"];\n}\n\n- (NSString *) mailReplyPlacement\n{\n  return [self stringForKey: @\"SOGoMailReplyPlacement\"];\n}\n\n- (void) setMailSignaturePlacement: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoMailSignaturePlacement\"];\n}\n\n- (NSString *) mailSignaturePlacement\n{\n  NSString *signaturePlacement;\n\n  if ([[self mailReplyPlacement] isEqualToString: @\"below\"])\n    // When replying to an email, if the reply is below the quoted text,\n    // the signature must also be below the quoted text.\n    signaturePlacement = @\"below\";\n  else\n    signaturePlacement = [self stringForKey: @\"SOGoMailSignaturePlacement\"];\n\n  return signaturePlacement;\n}\n\n- (void) setAllowUserReceipt: (BOOL) allow\n{\n  [self setBool: allow forKey: @\"SOGoMailReceiptAllow\"];\n}\n\n- (BOOL) allowUserReceipt\n{\n  return [self boolForKey: @\"SOGoMailReceiptAllow\"];\n}\n\n- (void) setUserReceiptNonRecipientAction: (NSString *) action\n{\n  [self setObject: action forKey: @\"SOGoMailReceiptNonRecipientAction\"];\n}\n\n- (NSString *) userReceiptNonRecipientAction\n{\n  return [self stringForKey: @\"SOGoMailReceiptNonRecipientAction\"];\n}\n\n- (void) setUserReceiptOutsideDomainAction: (NSString *) action\n{\n  [self setObject: action forKey: @\"SOGoMailReceiptOutsideDomainAction\"];\n}\n\n- (NSString *) userReceiptOutsideDomainAction\n{\n  return [self stringForKey: @\"SOGoMailReceiptOutsideDomainAction\"];\n}\n\n- (void) setUserReceiptAnyAction: (NSString *) action\n{\n  [self setObject: action forKey: @\"SOGoMailReceiptAnyAction\"];\n}\n\n- (NSString *) userReceiptAnyAction\n{\n  return [self stringForKey: @\"SOGoMailReceiptAnyAction\"];\n}\n\n- (void) setMailUseOutlookStyleReplies: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailUseOutlookStyleReplies\"];\n}\n\n- (BOOL) mailUseOutlookStyleReplies\n{\n  return [self boolForKey: @\"SOGoMailUseOutlookStyleReplies\"];\n}\n\n- (void) setMailCertificate: (NSData *) newValue\n{\n  [self setObject: [newValue stringByEncodingBase64] forKey: @\"SOGoMailCertificate\"];\n}\n\n- (void) unsetMailCertificate\n{\n  [self removeObjectForKey: @\"SOGoMailCertificate\"];\n}\n\n- (NSString *) mailCertificate\n{\n  return [self stringForKey: @\"SOGoMailCertificate\"];\n}\n\n- (void) setMailCertificateAlwaysSign: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailCertificateAlwaysSign\"];\n}\n\n- (BOOL) mailCertificateAlwaysSign\n{\n  return [self boolForKey: @\"SOGoMailCertificateAlwaysSign\"];\n}\n\n- (void) setMailCertificateAlwaysEncrypt: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailCertificateAlwaysEncrypt\"];\n}\n\n- (BOOL) mailCertificateAlwaysEncrypt\n{\n  return [self boolForKey: @\"SOGoMailCertificateAlwaysEncrypt\"];\n}\n\n- (void) setMailIdentities: (NSArray *) newIdentites\n{\n  [self setObject: newIdentites forKey: @\"SOGoMailIdentities\"];\n}\n\n- (NSArray *) mailIdentities\n{\n  NSMutableArray *mailIdentities;\n  NSMutableDictionary *mailIdentity;\n  NSUInteger i;\n\n  // Remove possible XSS injection\n  mailIdentities = [NSMutableArray arrayWithArray: [self arrayForKey: @\"SOGoMailIdentities\"]];\n  for (i = 0 ; i < [mailIdentities length] ; i++) {\n    mailIdentity = [mailIdentities objectAtIndex: i];\n    if ([mailIdentity objectForKey: @\"fullName\"]) {\n      [mailIdentity setObject: [[mailIdentity objectForKey: @\"fullName\"] stringWithoutHTMLInjection: YES] forKey: @\"fullName\"];\n      [mailIdentities setObject: mailIdentity atIndexedSubscript: i];\n    }\n  }\n\n  return mailIdentities;\n}\n\n- (void) setMailForceDefaultIdentity: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoMailForceDefaultIdentity\"];\n}\n\n- (BOOL) mailForceDefaultIdentity\n{\n  return [self boolForKey: @\"SOGoMailForceDefaultIdentity\"];\n}\n\n- (void) setAuxiliaryMailAccounts: (NSArray *) newAccounts\n{\n  [self setObject: newAccounts forKey: @\"AuxiliaryMailAccounts\"];\n}\n\n- (NSArray *) auxiliaryMailAccounts\n{\n  return [self arrayForKey: @\"AuxiliaryMailAccounts\"];\n}\n\n- (void) setCalendarCategories: (NSArray *) newValues\n{\n  [self setObject: newValues forKey: @\"SOGoCalendarCategories\"];\n}\n\n- (NSArray *) calendarCategories\n{\n  return [self stringArrayForKey: @\"SOGoCalendarCategories\"];\n}\n\n- (void) setCalendarCategoriesColors: (NSDictionary *) newValues\n{\n  [self setObject: newValues forKey: @\"SOGoCalendarCategoriesColors\"];\n}\n\n- (NSDictionary *) calendarCategoriesColors\n{\n  return [self objectForKey: @\"SOGoCalendarCategoriesColors\"];\n}\n\n- (void) setCalendarWeekdays: (NSArray *) newValues\n{\n  [self setObject: newValues forKey: @\"SOGoCalendarWeekdays\"];\n}\n\n- (NSArray *) calendarWeekdays\n{\n  return [self stringArrayForKey: @\"SOGoCalendarWeekdays\"];\n}\n\n- (void) setCalendarShouldDisplayWeekend: (BOOL) newValue\n{\n  [self setBool: newValue forKey: @\"SOGoCalendarShouldDisplayWeekend\"];\n}\n\n- (BOOL) calendarShouldDisplayWeekend\n{\n  return [self boolForKey: @\"SOGoCalendarShouldDisplayWeekend\"];\n}\n\n- (void) setCalendarEventsDefaultClassification: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoCalendarEventsDefaultClassification\"];\n}\n\n- (NSString *) calendarEventsDefaultClassification\n{\n  return [self stringForKey: @\"SOGoCalendarEventsDefaultClassification\"];\n}\n\n- (void) setCalendarTasksDefaultClassification: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoCalendarTasksDefaultClassification\"];\n}\n\n- (NSString *) calendarTasksDefaultClassification\n{\n  return [self stringForKey: @\"SOGoCalendarTasksDefaultClassification\"];\n}\n\n- (void) setCalendarDefaultReminder: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoCalendarDefaultReminder\"];\n}\n\n- (NSString *) calendarDefaultReminder\n{\n  return [self stringForKey: @\"SOGoCalendarDefaultReminder\"];\n}\n\n//\n// Dictionary of arrays. Example:\n//\n// {\n//   label1 => (\"Important\", \"#FF0000\");\n//   label2 => (\"Work\" \"#00FF00\");\n//   foo_bar => (\"Foo Bar\", \"#0000FF\");\n// }\n//\n- (void) setMailLabelsColors: (NSDictionary *) newValues\n{\n  [self setObject: newValues forKey: @\"SOGoMailLabelsColors\"];\n}\n\n- (NSDictionary *) mailLabelsColors\n{\n  return [self objectForKey: @\"SOGoMailLabelsColors\"];\n}\n\n- (void) setSieveFilters: (NSArray *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoSieveFilters\"];\n}\n\n- (NSArray *) sieveFilters\n{\n  return [self arrayForKey: @\"SOGoSieveFilters\"];\n}\n\n- (void) setVacationOptions: (NSDictionary *) newValue\n{\n  [self setObject: newValue forKey: @\"Vacation\"];\n}\n\n- (NSDictionary *) vacationOptions\n{\n  return [self dictionaryForKey: @\"Vacation\"];\n}\n\n- (void) setForwardOptions: (NSDictionary *) newValue\n{\n  [self setObject: newValue forKey: @\"Forward\"];\n}\n\n- (NSDictionary *) forwardOptions\n{\n  return [self dictionaryForKey: @\"Forward\"];\n}\n\n- (void) setContactsCategories: (NSArray *) newValues\n{\n  [self setObject: newValues forKey: @\"SOGoContactsCategories\"];\n}\n\n- (NSArray *) contactsCategories\n{\n  return [self stringArrayForKey: @\"SOGoContactsCategories\"];\n}\n\n- (void) setPasswordRecoveryMode: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoPasswordRecoveryMode\"];\n}\n\n- (NSString *) passwordRecoveryMode\n{\n  return [self stringForKey: @\"SOGoPasswordRecoveryMode\"];\n}\n\n- (void) setPasswordRecoveryQuestion: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoPasswordRecoveryQuestion\"];\n}\n\n- (NSString *) passwordRecoveryQuestion\n{\n  return [self stringForKey: @\"SOGoPasswordRecoveryQuestion\"];\n}\n\n- (void) setPasswordRecoveryQuestionAnswer: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoPasswordRecoveryQuestionAnswer\"];\n}\n\n- (NSString *) passwordRecoveryQuestionAnswer\n{\n  return [self stringForKey: @\"SOGoPasswordRecoveryQuestionAnswer\"];\n}\n\n- (void) setPasswordRecoverySecondaryEmail: (NSString *) newValue\n{\n  [self setObject: newValue forKey: @\"SOGoPasswordRecoverySecondaryEmail\"];\n}\n\n- (NSString *) passwordRecoverySecondaryEmail\n{\n  return [self stringForKey: @\"SOGoPasswordRecoverySecondaryEmail\"];\n}\n\n@end\n"], "filenames": ["SoObjects/SOGo/SOGoUserDefaults.m"], "buggy_code_start_loc": [150], "buggy_code_end_loc": [801], "fixing_code_start_loc": [150], "fixing_code_end_loc": [815], "type": "CWE-707", "message": "A vulnerability was found in Alinto SOGo up to 5.7.1 and classified as problematic. Affected by this issue is the function _migrateMailIdentities of the file SoObjects/SOGo/SOGoUserDefaults.m of the component Identity Handler. The manipulation of the argument fullName leads to cross site scripting. The attack may be launched remotely. Upgrading to version 5.8.0 is able to address this issue. The name of the patch is efac49ae91a4a325df9931e78e543f707a0f8e5e. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-215960.", "other": {"cve": {"id": "CVE-2022-4556", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-16T17:15:08.790", "lastModified": "2022-12-22T13:24:50.580", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Alinto SOGo up to 5.7.1 and classified as problematic. Affected by this issue is the function _migrateMailIdentities of the file SoObjects/SOGo/SOGoUserDefaults.m of the component Identity Handler. The manipulation of the argument fullName leads to cross site scripting. The attack may be launched remotely. Upgrading to version 5.8.0 is able to address this issue. The name of the patch is efac49ae91a4a325df9931e78e543f707a0f8e5e. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-215960."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:alinto:sogo:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.8.0", "matchCriteriaId": "BA321919-1C9F-445A-A486-59848483F5EE"}]}]}], "references": [{"url": "https://github.com/Alinto/sogo/commit/efac49ae91a4a325df9931e78e543f707a0f8e5e", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Alinto/sogo/releases/tag/SOGo-5.8.0", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.215960", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Alinto/sogo/commit/efac49ae91a4a325df9931e78e543f707a0f8e5e"}}