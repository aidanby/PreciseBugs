{"buggy_code": ["# OmniAuth Facebook &nbsp;[![Build Status](http://travis-ci.org/mkdynamic/omniauth-facebook.png?branch=master)](http://travis-ci.org/mkdynamic/omniauth-facebook)\n\nFacebook OAuth2 Strategy for OmniAuth 1.0.\n\nSupports the OAuth 2.0 server-side and client-side flows. Read the Facebook docs for more details: http://developers.facebook.com/docs/authentication\n\n## Installing\n\nAdd to your `Gemfile`:\n\n```ruby\ngem 'omniauth-facebook'\n```\n\nThen `bundle install`.\n\n## Usage\n\n`OmniAuth::Strategies::Facebook` is simply a Rack middleware. Read the OmniAuth 1.0 docs for detailed instructions: https://github.com/intridea/omniauth.\n\nHere's a quick example, adding the middleware to a Rails app in `config/initializers/omniauth.rb`:\n\n```ruby\nRails.application.config.middleware.use OmniAuth::Builder do\n  provider :facebook, ENV['FACEBOOK_KEY'], ENV['FACEBOOK_SECRET']\nend\n```\n\n[See the example Sinatra app for full examples](https://github.com/mkdynamic/omniauth-facebook/blob/master/example/config.ru) of both the server and client-side flows (including using the Facebook Javascript SDK).\n\n## Configuring\n\nYou can configure several options, which you pass in to the `provider` method via a `Hash`:\n\n* `scope`: A comma-separated list of permissions you want to request from the user. See the Facebook docs for a full list of available permissions: http://developers.facebook.com/docs/reference/api/permissions. Default: `email`\n* `display`: The display context to show the authentication page. Options are: `page`, `popup` and `touch`. Read the Facebook docs for more details: https://developers.facebook.com/docs/reference/dialogs/oauth/. Default: `page`\n* `auth_type`: Optionally specifies the requested authentication features as a comma-separated list, as per https://developers.facebook.com/docs/authentication/reauthentication/.\nValid values are `https` (checks for the presence of the secure cookie and asks for re-authentication if it is not present), and `reauthenticate` (asks the user to re-authenticate unconditionally). Default is `nil`.\n* `secure_image_url`: Set to `true` to use https for the avatar image url returned in the auth hash. Default is `false`.\n* `image_size`: Set the size for the returned image url in the auth hash. Valid options are `square` (50x50), `small` (50 pixels wide, variable height), `normal` (100 pixels wide, variable height), or `large` (about 200 pixels wide, variable height). Default is `square` (50x50).\n\nFor example, to request `email`, `user_birthday` and `read_stream` permissions and display the authentication page in a popup window:\n\n```ruby\nRails.application.config.middleware.use OmniAuth::Builder do\n  provider :facebook, ENV['FACEBOOK_KEY'], ENV['FACEBOOK_SECRET'],\n           :scope => 'email,user_birthday,read_stream', :display => 'popup'\nend\n```\n\n### Per-Request Options\n\nIf you want to set the `display` format or `scope` on a per-request basis, you can just pass it to the OmniAuth request phase URL, for example: `/auth/facebook?display=popup` or `/auth/facebook?scope=email`.\n\nYou can also pass through a `state` param which will be passed along to the callback url.\n\n### Custom Callback URL/Path\n\nYou can set a custom `callback_url` or `callback_path` option to override the default value. See [OmniAuth::Strategy#callback_url](https://github.com/intridea/omniauth/blob/master/lib/omniauth/strategy.rb#L411) for more details on the default.\n\n## Auth Hash\n\nHere's an example *Auth Hash* available in `request.env['omniauth.auth']`:\n\n```ruby\n{\n  :provider => 'facebook',\n  :uid => '1234567',\n  :info => {\n    :nickname => 'jbloggs',\n    :email => 'joe@bloggs.com',\n    :name => 'Joe Bloggs',\n    :first_name => 'Joe',\n    :last_name => 'Bloggs',\n    :image => 'http://graph.facebook.com/1234567/picture?type=square',\n    :urls => { :Facebook => 'http://www.facebook.com/jbloggs' },\n    :location => 'Palo Alto, California',\n    :verified => true\n  },\n  :credentials => {\n    :token => 'ABCDEF...', # OAuth 2.0 access_token, which you may wish to store\n    :expires_at => 1321747205, # when the access token expires (it always will)\n    :expires => true # this will always be true\n  },\n  :extra => {\n    :raw_info => {\n      :id => '1234567',\n      :name => 'Joe Bloggs',\n      :first_name => 'Joe',\n      :last_name => 'Bloggs',\n      :link => 'http://www.facebook.com/jbloggs',\n      :username => 'jbloggs',\n      :location => { :id => '123456789', :name => 'Palo Alto, California' },\n      :gender => 'male',\n      :email => 'joe@bloggs.com',\n      :timezone => -8,\n      :locale => 'en_US',\n      :verified => true,\n      :updated_time => '2011-11-11T06:21:03+0000'\n    }\n  }\n}\n```\n\nThe precise information available may depend on the permissions which you request.\n\n## Client-side Flow\n\nYou can use the Facebook Javascript SDK with `FB.login`, and just hit the callback endpoint (`/auth/facebook/callback` by default) once the user has authenticated in the success callback.\n\nNote that you must enable cookies in the `FB.init` config for this process to work.\n\nSee the example Sinatra app under `example/` and read the [Facebook docs on Client-Side Authentication](https://developers.facebook.com/docs/authentication/client-side/) for more details.\n\n### How it Works\n\nThe client-side flow is supported by parsing the authorization code from the signed request which Facebook places in a cookie.\n\nWhen you call `/auth/facebook/callback` in the success callback of `FB.login` that will pass the cookie back to the server. omniauth-facebook will see this cookie and:\n\n1. parse it,\n2. extract the authorization code contained in it\n3. and hit Facebook and obtain an access token which will get placed in the `request.env['omniauth.auth']['credentials']` hash.\n\nNote that this access token will be the same token obtained and available in the client through the hash [as detailed in the Facebook docs](https://developers.facebook.com/docs/authentication/client-side/).\n\n## Canvas Apps\n\nCanvas apps will send a signed request with the initial POST, therefore you *can* (if it makes sense for your app) pass this to the authorize endpoint (`/auth/facebook` by default) in the querystring.\n\nThere are then 2 scenarios for what happens next:\n\n1. A user has already granted access to your app, this will contain an access token. In this case, omniauth-facebook will skip asking the user for authentication and immediately redirect to the callback endpoint (`/auth/facebook/callback` by default) with the access token present in the `request.env['omniauth.auth']['credentials']` hash.\n\n2. A user has not granted access to your app, and the signed request *will not* contain an access token. In this case omniauth-facebook will simply follow the standard auth flow.\n\nTake a look at [the example Sinatra app for one option of how you can integrate with a canvas page](https://github.com/mkdynamic/omniauth-facebook/blob/master/example/config.ru).\n\nBear in mind you have several options (including [authenticated referrals](https://developers.facebook.com/docs/opengraph/authentication/#referrals)). Read [the Facebook docs on canvas page  authentication](https://developers.facebook.com/docs/authentication/canvas/) for more info.\n\n## Token Expiry\n\nSince Facebook deprecated the `offline_access` permission, this has become more complex. The expiration time of the access token you obtain will depend on which flow you are using. See below for more details.\n\n### Client-Side Flow\n\nIf you use the client-side flow, Facebook will give you back a short lived access token (~ 2 hours).\n\nYou can exchange this short lived access token for a longer lived version. Read the [Facebook docs about the offline_access  deprecation](https://developers.facebook.com/roadmap/offline-access-removal/) for more information.\n\n### Server-Side Flow\n\nIf you use the server-side flow, Facebook will give you back a longer loved access token (~ 60 days).\n\nIf you're having issue getting a long lived token with the server-side flow, make sure to enable the 'deprecate offline_access setting' in you Facebook app config. Read the [Facebook docs about the offline_access  deprecation](https://developers.facebook.com/roadmap/offline-access-removal/) for more information.\n\n## Supported Rubies\n\nActively tested with the following Ruby versions:\n\n- MRI 1.9.3\n- MRI 1.9.2\n- MRI 1.8.7\n- JRuby 1.6.5\n\n*NB.* For JRuby, you'll need to install the `jruby-openssl` gem. There's no way to automatically specify this in a Rubygem gemspec, so you need to manually add it your project's own Gemfile:\n\n```ruby\ngem 'jruby-openssl', :platform => :jruby\n```\n\n## License\n\nCopyright (c) 2012 by Mark Dodwell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n", "module OmniAuth\n  module Facebook\n    VERSION = \"1.4.1\"\n  end\nend\n", "require 'omniauth/strategies/oauth2'\nrequire 'base64'\nrequire 'openssl'\nrequire 'rack/utils'\n\nmodule OmniAuth\n  module Strategies\n    class Facebook < OmniAuth::Strategies::OAuth2\n      class NoAuthorizationCodeError < StandardError; end\n\n      DEFAULT_SCOPE = 'email'\n\n      option :client_options, {\n        :site => 'https://graph.facebook.com',\n        :token_url => '/oauth/access_token'\n      }\n\n      option :token_params, {\n        :parse => :query\n      }\n\n      option :access_token_options, {\n        :header_format => 'OAuth %s',\n        :param_name => 'access_token'\n      }\n\n      option :authorize_options, [:scope, :display, :auth_type]\n\n      uid { raw_info['id'] }\n\n      info do\n        prune!({\n          'nickname' => raw_info['username'],\n          'email' => raw_info['email'],\n          'name' => raw_info['name'],\n          'first_name' => raw_info['first_name'],\n          'last_name' => raw_info['last_name'],\n          'image' => \"#{options[:secure_image_url] ? 'https' : 'http'}://graph.facebook.com/#{uid}/picture?type=#{options[:image_size] || 'square'}\",\n          'description' => raw_info['bio'],\n          'urls' => {\n            'Facebook' => raw_info['link'],\n            'Website' => raw_info['website']\n          },\n          'location' => (raw_info['location'] || {})['name'],\n          'verified' => raw_info['verified']\n        })\n      end\n\n      extra do\n        hash = {}\n        hash['raw_info'] = raw_info unless skip_info?\n        prune! hash\n      end\n\n      def raw_info\n        @raw_info ||= access_token.get('/me').parsed || {}\n      end\n\n      def build_access_token\n        if access_token = request.params[\"access_token\"]\n          ::OAuth2::AccessToken.from_hash(\n            client, \n            {\"access_token\" => access_token}.update(access_token_options)\n          )\n        elsif signed_request_contains_access_token?\n          hash = signed_request.clone\n          ::OAuth2::AccessToken.new(\n            client,\n            hash.delete('oauth_token'),\n            hash.merge!(access_token_options.merge(:expires_at => hash.delete('expires')))\n          )\n        else\n          with_authorization_code! { super }.tap do |token|\n            token.options.merge!(access_token_options)\n          end\n        end\n      end\n\n      def request_phase\n        if signed_request_contains_access_token?\n          # if we already have an access token, we can just hit the\n          # callback URL directly and pass the signed request along\n          params = { :signed_request => raw_signed_request }\n          params[:state] = request.params['state'] if request.params['state']\n          query = Rack::Utils.build_query(params)\n\n          url = callback_url\n          url << \"?\" unless url.match(/\\?/)\n          url << \"&\" unless url.match(/[\\&\\?]$/)\n          url << query\n\n          redirect url\n        else\n          super\n        end\n      end\n\n      # NOTE if we're using code from the signed request\n      # then FB sets the redirect_uri to '' during the authorize\n      # phase + it must match during the access_token phase:\n      # https://github.com/facebook/php-sdk/blob/master/src/base_facebook.php#L348\n      def callback_url\n        if @authorization_code_from_signed_request\n          ''\n        else\n          options[:callback_url] || super\n        end\n      end\n\n      def access_token_options\n        options.access_token_options.inject({}) { |h,(k,v)| h[k.to_sym] = v; h }\n      end\n\n      ##\n      # You can pass +display+, +state+ or +scope+ params to the auth request, if\n      # you need to set them dynamically. You can also set these options\n      # in the OmniAuth config :authorize_params option.\n      #\n      # /auth/facebook?display=popup&state=ABC\n      #\n      def authorize_params\n        super.tap do |params|\n          %w[display state scope].each do |v|\n            if request.params[v]\n              params[v.to_sym] = request.params[v]\n\n              # to support omniauth-oauth2's auto csrf protection\n              session['omniauth.state'] = params[:state] if v == 'state'\n            end\n          end\n\n          params[:scope] ||= DEFAULT_SCOPE\n        end\n      end\n\n      ##\n      # Parse signed request in order, from:\n      #\n      # 1. the request 'signed_request' param (server-side flow from canvas pages) or\n      # 2. a cookie (client-side flow via JS SDK)\n      #\n      def signed_request\n        @signed_request ||= raw_signed_request &&\n          parse_signed_request(raw_signed_request)\n      end\n\n      private\n\n      def raw_signed_request\n        request.params['signed_request'] ||\n        request.cookies[\"fbsr_#{client.id}\"]\n      end\n\n      ##\n      # If the signed_request comes from a FB canvas page and the user\n      # has already authorized your application, the JSON object will be\n      # contain the access token.\n      #\n      # https://developers.facebook.com/docs/authentication/canvas/\n      #\n      def signed_request_contains_access_token?\n        signed_request &&\n        signed_request['oauth_token']\n      end\n\n      ##\n      # Picks the authorization code in order, from:\n      #\n      # 1. the request 'code' param (manual callback from standard server-side flow)\n      # 2. a signed request (see #signed_request for more)\n      #\n      def with_authorization_code!\n        if request.params.key?('code')\n          yield\n        elsif code_from_signed_request = signed_request && signed_request['code']\n          request.params['code'] = code_from_signed_request\n          @authorization_code_from_signed_request = true\n          begin\n            yield\n          ensure\n            request.params.delete('code')\n            @authorization_code_from_signed_request = false\n          end\n        else\n          raise NoAuthorizationCodeError, 'must pass either a `code` parameter or a signed request (via `signed_request` parameter or a `fbsr_XXX` cookie)'\n        end\n      end\n\n      def prune!(hash)\n        hash.delete_if do |_, value|\n          prune!(value) if value.is_a?(Hash)\n          value.nil? || (value.respond_to?(:empty?) && value.empty?)\n        end\n      end\n\n      def parse_signed_request(value)\n        signature, encoded_payload = value.split('.')\n\n        decoded_hex_signature = base64_decode_url(signature)\n        decoded_payload = MultiJson.decode(base64_decode_url(encoded_payload))\n\n        unless decoded_payload['algorithm'] == 'HMAC-SHA256'\n          raise NotImplementedError, \"unkown algorithm: #{decoded_payload['algorithm']}\"\n        end\n\n        if valid_signature?(client.secret, decoded_hex_signature, encoded_payload)\n          decoded_payload\n        end\n      end\n\n      def valid_signature?(secret, signature, payload, algorithm = OpenSSL::Digest::SHA256.new)\n        OpenSSL::HMAC.digest(algorithm, secret, payload) == signature\n      end\n\n      def base64_decode_url(value)\n        value += '=' * (4 - value.size.modulo(4))\n        Base64.decode64(value.tr('-_', '+/'))\n      end\n    end\n  end\nend\n", "# NOTE it would be useful if this lived in omniauth-oauth2 eventually\nmodule OAuth2StrategyTests\n  def self.included(base)\n    base.class_eval do\n      include ClientTests\n      include AuthorizeParamsTests\n      include CSRFAuthorizeParamsTests\n      include TokenParamsTests\n    end\n  end\n  \n  module ClientTests\n    extend BlockTestHelper\n    \n    test 'should be initialized with symbolized client_options' do\n      @options = { :client_options => { 'authorize_url' => 'https://example.com' } }\n      assert_equal 'https://example.com', strategy.client.options[:authorize_url]\n    end\n  end\n\n  module AuthorizeParamsTests\n    extend BlockTestHelper\n    \n    test 'should include any authorize params passed in the :authorize_params option' do\n      @options = { :authorize_params => { :foo => 'bar', :baz => 'zip' } }\n      assert_equal 'bar', strategy.authorize_params['foo']\n      assert_equal 'zip', strategy.authorize_params['baz']\n    end\n\n    test 'should include top-level options that are marked as :authorize_options' do\n      @options = { :authorize_options => [:scope, :foo], :scope => 'bar', :foo => 'baz' }\n      assert_equal 'bar', strategy.authorize_params['scope']\n      assert_equal 'baz', strategy.authorize_params['foo']\n    end\n    \n    test 'should exclude top-level options that are not passed' do\n      @options = { :authorize_options => [:bar] }\n      refute_has_key :bar, strategy.authorize_params\n      refute_has_key 'bar', strategy.authorize_params\n    end\n  end\n\n  module CSRFAuthorizeParamsTests\n    extend BlockTestHelper\n\n    test 'should store random state in the session when none is present in authorize or request params' do\n      assert_includes strategy.authorize_params.keys, 'state'\n      refute_empty strategy.authorize_params['state']\n      refute_empty strategy.session['omniauth.state']\n      assert_equal strategy.authorize_params['state'], strategy.session['omniauth.state']\n    end\n\n    test 'should store state in the session when present in authorize params vs. a random one' do\n      @options = { :authorize_params => { :state => 'bar' } }\n      refute_empty strategy.authorize_params['state']\n      assert_equal 'bar', strategy.authorize_params[:state]\n      refute_empty strategy.session['omniauth.state']\n      assert_equal 'bar', strategy.session['omniauth.state']\n    end\n\n    test 'should store state in the session when present in request params vs. a random one' do\n      @request.stubs(:params).returns({ 'state' => 'foo' })\n      refute_empty strategy.authorize_params['state']\n      assert_equal 'foo', strategy.authorize_params[:state]\n      refute_empty strategy.session['omniauth.state']\n      assert_equal 'foo', strategy.session['omniauth.state']\n    end\n  end\n\n  module TokenParamsTests\n    extend BlockTestHelper\n    \n    test 'should include any authorize params passed in the :token_params option' do\n      @options = { :token_params => { :foo => 'bar', :baz => 'zip' } }\n      assert_equal 'bar', strategy.token_params['foo']\n      assert_equal 'zip', strategy.token_params['baz']\n    end\n\n    test 'should include top-level options that are marked as :token_options' do\n      @options = { :token_options => [:scope, :foo], :scope => 'bar', :foo => 'baz' }\n      assert_equal 'bar', strategy.token_params['scope']\n      assert_equal 'baz', strategy.token_params['foo']\n    end\n  end\nend\n", "require 'helper'\nrequire 'omniauth-facebook'\nrequire 'openssl'\nrequire 'base64'\n\nclass StrategyTest < StrategyTestCase\n  include OAuth2StrategyTests\nend\n\nclass ClientTest < StrategyTestCase\n  test 'has correct Facebook site' do\n    assert_equal 'https://graph.facebook.com', strategy.client.site\n  end\n\n  test 'has correct authorize url' do\n    assert_equal '/oauth/authorize', strategy.client.options[:authorize_url]\n  end\n\n  test 'has correct token url' do\n    assert_equal '/oauth/access_token', strategy.client.options[:token_url]\n  end\nend\n\nclass CallbackUrlTest < StrategyTestCase\n  test \"returns the default callback url\" do\n    url_base = 'http://auth.request.com'\n    @request.stubs(:url).returns(\"#{url_base}/some/page\")\n    strategy.stubs(:script_name).returns('') # as not to depend on Rack env\n    assert_equal \"#{url_base}/auth/facebook/callback\", strategy.callback_url\n  end\n\n  test \"returns path from callback_path option\" do\n    @options = { :callback_path => \"/auth/FB/done\"}\n    url_base = 'http://auth.request.com'\n    @request.stubs(:url).returns(\"#{url_base}/page/path\")\n    strategy.stubs(:script_name).returns('') # as not to depend on Rack env\n    assert_equal \"#{url_base}/auth/FB/done\", strategy.callback_url\n  end\n\n  test \"returns url from callback_url option\" do\n    url = 'https://auth.myapp.com/auth/fb/callback'\n    @options = { :callback_url => url }\n    assert_equal url, strategy.callback_url\n  end\nend\n\nclass AuthorizeParamsTest < StrategyTestCase\n  test 'includes default scope for email' do\n    assert strategy.authorize_params.is_a?(Hash)\n    assert_equal 'email', strategy.authorize_params[:scope]\n  end\n\n  test 'includes display parameter from request when present' do\n    @request.stubs(:params).returns({ 'display' => 'touch' })\n    assert strategy.authorize_params.is_a?(Hash)\n    assert_equal 'touch', strategy.authorize_params[:display]\n  end\n\n  test 'includes state parameter from request when present' do\n    @request.stubs(:params).returns({ 'state' => 'some_state' })\n    assert strategy.authorize_params.is_a?(Hash)\n    assert_equal 'some_state', strategy.authorize_params[:state]\n  end\n\n  test 'overrides default scope with parameter passed from request' do\n    @request.stubs(:params).returns({ 'scope' => 'email' })\n    assert strategy.authorize_params.is_a?(Hash)\n    assert_equal 'email', strategy.authorize_params[:scope]\n  end\nend\n\nclass TokeParamsTest < StrategyTestCase\n  test 'has correct parse strategy' do\n    assert_equal :query, strategy.token_params[:parse]\n  end\nend\n\nclass AccessTokenOptionsTest < StrategyTestCase\n  test 'has correct param name by default' do\n    assert_equal 'access_token', strategy.access_token_options[:param_name]\n  end\n\n  test 'has correct header format by default' do\n    assert_equal 'OAuth %s', strategy.access_token_options[:header_format]\n  end\nend\n\nclass UidTest < StrategyTestCase\n  def setup\n    super\n    strategy.stubs(:raw_info).returns({ 'id' => '123' })\n  end\n\n  test 'returns the id from raw_info' do\n    assert_equal '123', strategy.uid\n  end\nend\n\nclass InfoTest < StrategyTestCase\n  test 'returns the secure facebook avatar url when `secure_image_url` option is specified' do\n    @options = { :secure_image_url => true }\n    raw_info = { 'name' => 'Fred Smith', 'id' => '321' }\n    strategy.stubs(:raw_info).returns(raw_info)\n    assert_equal 'https://graph.facebook.com/321/picture?type=square', strategy.info['image']\n  end\n\n  test 'returns the image size specified in the `image_size` option' do\n    @options = { :image_size => 'normal' }\n    raw_info = { 'name' => 'Fred Smith', 'id' => '321' }\n    strategy.stubs(:raw_info).returns(raw_info)\n    assert_equal 'http://graph.facebook.com/321/picture?type=normal', strategy.info['image']\n  end\nend\n\nclass InfoTestOptionalDataPresent < StrategyTestCase\n  def setup\n    super\n    @raw_info ||= { 'name' => 'Fred Smith' }\n    strategy.stubs(:raw_info).returns(@raw_info)\n  end\n\n  test 'returns the name' do\n    assert_equal 'Fred Smith', strategy.info['name']\n  end\n\n  test 'returns the email' do\n    @raw_info['email'] = 'fred@smith.com'\n    assert_equal 'fred@smith.com', strategy.info['email']\n  end\n\n  test 'returns the username as nickname' do\n    @raw_info['username'] = 'fredsmith'\n    assert_equal 'fredsmith', strategy.info['nickname']\n  end\n\n  test 'returns the first name' do\n    @raw_info['first_name'] = 'Fred'\n    assert_equal 'Fred', strategy.info['first_name']\n  end\n\n  test 'returns the last name' do\n    @raw_info['last_name'] = 'Smith'\n    assert_equal 'Smith', strategy.info['last_name']\n  end\n\n  test 'returns the location name as location' do\n    @raw_info['location'] = { 'id' => '104022926303756', 'name' => 'Palo Alto, California' }\n    assert_equal 'Palo Alto, California', strategy.info['location']\n  end\n\n  test 'returns bio as description' do\n    @raw_info['bio'] = 'I am great'\n    assert_equal 'I am great', strategy.info['description']\n  end\n\n  test 'returns the square format facebook avatar url' do\n    @raw_info['id'] = '321'\n    assert_equal 'http://graph.facebook.com/321/picture?type=square', strategy.info['image']\n  end\n\n  test 'returns the Facebook link as the Facebook url' do\n    @raw_info['link'] = 'http://www.facebook.com/fredsmith'\n    assert_kind_of Hash, strategy.info['urls']\n    assert_equal 'http://www.facebook.com/fredsmith', strategy.info['urls']['Facebook']\n  end\n\n  test 'returns website url' do\n    @raw_info['website'] = 'https://my-wonderful-site.com'\n    assert_kind_of Hash, strategy.info['urls']\n    assert_equal 'https://my-wonderful-site.com', strategy.info['urls']['Website']\n  end\n\n  test 'return both Facebook link and website urls' do\n    @raw_info['link'] = 'http://www.facebook.com/fredsmith'\n    @raw_info['website'] = 'https://my-wonderful-site.com'\n    assert_kind_of Hash, strategy.info['urls']\n    assert_equal 'http://www.facebook.com/fredsmith', strategy.info['urls']['Facebook']\n    assert_equal 'https://my-wonderful-site.com', strategy.info['urls']['Website']\n  end\n\n  test 'returns the positive verified status' do\n    @raw_info['verified'] = true\n    assert strategy.info['verified']\n  end\n\n  test 'returns the negative verified status' do\n    @raw_info['verified'] = false\n    refute strategy.info['verified']\n  end\nend\n\nclass InfoTestOptionalDataNotPresent < StrategyTestCase\n  def setup\n    super\n    @raw_info ||= { 'name' => 'Fred Smith' }\n    strategy.stubs(:raw_info).returns(@raw_info)\n  end\n\n  test 'has no email key' do\n    refute_has_key 'email', strategy.info\n  end\n\n  test 'has no nickname key' do\n    refute_has_key 'nickname', strategy.info\n  end\n\n  test 'has no first name key' do\n    refute_has_key 'first_name', strategy.info\n  end\n\n  test 'has no last name key' do\n    refute_has_key 'last_name', strategy.info\n  end\n\n  test 'has no location key' do\n    refute_has_key 'location', strategy.info\n  end\n\n  test 'has no description key' do\n    refute_has_key 'description', strategy.info\n  end\n\n  test 'has no urls' do\n    refute_has_key 'urls', strategy.info\n  end\n\n  test 'has no verified key' do\n    refute_has_key 'verified', strategy.info\n  end\nend\n\nclass RawInfoTest < StrategyTestCase\n  def setup\n    super\n    @access_token = stub('OAuth2::AccessToken')\n  end\n\n  test 'performs a GET to https://graph.facebook.com/me' do\n    strategy.stubs(:access_token).returns(@access_token)\n    @access_token.expects(:get).with('/me').returns(stub_everything('OAuth2::Response'))\n    strategy.raw_info\n  end\n\n  test 'returns a Hash' do\n    strategy.stubs(:access_token).returns(@access_token)\n    raw_response = stub('Faraday::Response')\n    raw_response.stubs(:body).returns('{ \"ohai\": \"thar\" }')\n    raw_response.stubs(:status).returns(200)\n    raw_response.stubs(:headers).returns({'Content-Type' => 'application/json' })\n    oauth2_response = OAuth2::Response.new(raw_response)\n    @access_token.stubs(:get).with('/me').returns(oauth2_response)\n    assert_kind_of Hash, strategy.raw_info\n    assert_equal 'thar', strategy.raw_info['ohai']\n  end\n\n  test 'returns an empty hash when the response is false' do\n    strategy.stubs(:access_token).returns(@access_token)\n    oauth2_response = stub('OAuth2::Response', :parsed => false)\n    @access_token.stubs(:get).with('/me').returns(oauth2_response)\n    assert_kind_of Hash, strategy.raw_info\n  end\n\n  test 'should not include raw_info in extras hash when skip_info is specified' do\n    @options = { :skip_info => true }\n    strategy.stubs(:raw_info).returns({:foo => 'bar' })\n    refute_has_key 'raw_info', strategy.extra\n  end\nend\n\nclass CredentialsTest < StrategyTestCase\n  def setup\n    super\n    @access_token = stub('OAuth2::AccessToken')\n    @access_token.stubs(:token)\n    @access_token.stubs(:expires?)\n    @access_token.stubs(:expires_at)\n    @access_token.stubs(:refresh_token)\n    strategy.stubs(:access_token).returns(@access_token)\n  end\n\n  test 'returns a Hash' do\n    assert_kind_of Hash, strategy.credentials\n  end\n\n  test 'returns the token' do\n    @access_token.stubs(:token).returns('123')\n    assert_equal '123', strategy.credentials['token']\n  end\n\n  test 'returns the expiry status' do\n    @access_token.stubs(:expires?).returns(true)\n    assert strategy.credentials['expires']\n\n    @access_token.stubs(:expires?).returns(false)\n    refute strategy.credentials['expires']\n  end\n\n  test 'returns the refresh token and expiry time when expiring' do\n    ten_mins_from_now = (Time.now + 600).to_i\n    @access_token.stubs(:expires?).returns(true)\n    @access_token.stubs(:refresh_token).returns('321')\n    @access_token.stubs(:expires_at).returns(ten_mins_from_now)\n    assert_equal '321', strategy.credentials['refresh_token']\n    assert_equal ten_mins_from_now, strategy.credentials['expires_at']\n  end\n\n  test 'does not return the refresh token when test is nil and expiring' do\n    @access_token.stubs(:expires?).returns(true)\n    @access_token.stubs(:refresh_token).returns(nil)\n    assert_nil strategy.credentials['refresh_token']\n    refute_has_key 'refresh_token', strategy.credentials\n  end\n\n  test 'does not return the refresh token when not expiring' do\n    @access_token.stubs(:expires?).returns(false)\n    @access_token.stubs(:refresh_token).returns('XXX')\n    assert_nil strategy.credentials['refresh_token']\n    refute_has_key 'refresh_token', strategy.credentials\n  end\nend\n\nclass ExtraTest < StrategyTestCase\n  def setup\n    super\n    @raw_info = { 'name' => 'Fred Smith' }\n    strategy.stubs(:raw_info).returns(@raw_info)\n  end\n\n  test 'returns a Hash' do\n    assert_kind_of Hash, strategy.extra\n  end\n\n  test 'contains raw info' do\n    assert_equal({ 'raw_info' => @raw_info }, strategy.extra)\n  end\nend\n\nmodule SignedRequestHelpers\n  def signed_request(payload, secret)\n    encoded_payload = base64_encode_url(MultiJson.encode(payload))\n    encoded_signature = base64_encode_url(signature(encoded_payload, secret))\n    [encoded_signature, encoded_payload].join('.')\n  end\n\n  def base64_encode_url(value)\n    Base64.encode64(value).tr('+/', '-_').gsub(/\\n/, '')\n  end\n\n  def signature(payload, secret, algorithm = OpenSSL::Digest::SHA256.new)\n    OpenSSL::HMAC.digest(algorithm, secret, payload)\n  end\nend\n\nmodule SignedRequestTests\n  class TestCase < StrategyTestCase\n    include SignedRequestHelpers\n  end\n\n  class CookieAndParamNotPresentTest < TestCase\n    test 'is nil' do\n      assert_nil strategy.send(:signed_request)\n    end\n  end\n\n  class CookiePresentTest < TestCase\n    def setup\n      super\n      @payload = {\n        'algorithm' => 'HMAC-SHA256',\n        'code' => 'm4c0d3z',\n        'issued_at' => Time.now.to_i,\n        'user_id' => '123456'\n      }\n\n      @request.stubs(:cookies).returns({\"fbsr_#{@client_id}\" => signed_request(@payload, @client_secret)})\n    end\n\n    test 'parses the access code out from the cookie' do\n      assert_equal @payload, strategy.send(:signed_request)\n    end\n  end\n\n  class ParamPresentTest < TestCase\n    def setup\n      super\n      @payload = {\n        'algorithm' => 'HMAC-SHA256',\n        'oauth_token' => 'XXX',\n        'issued_at' => Time.now.to_i,\n        'user_id' => '123456'\n      }\n\n      @request.stubs(:params).returns({'signed_request' => signed_request(@payload, @client_secret)})\n    end\n\n    test 'parses the access code out from the param' do\n      assert_equal @payload, strategy.send(:signed_request)\n    end\n  end\n\n  class CookieAndParamPresentTest < TestCase\n    def setup\n      super\n      @payload_from_cookie = {\n        'algorithm' => 'HMAC-SHA256',\n        'from' => 'cookie'\n      }\n\n      @request.stubs(:cookies).returns({\"fbsr_#{@client_id}\" => signed_request(@payload_from_cookie, @client_secret)})\n\n      @payload_from_param = {\n        'algorithm' => 'HMAC-SHA256',\n        'from' => 'param'\n      }\n\n      @request.stubs(:params).returns({'signed_request' => signed_request(@payload_from_param, @client_secret)})\n    end\n\n    test 'picks param over cookie' do\n      assert_equal @payload_from_param, strategy.send(:signed_request)\n    end\n  end\nend\n\nclass RequestPhaseWithSignedRequestTest < StrategyTestCase\n  include SignedRequestHelpers\n\n  def setup\n    super\n\n    payload = {\n      'algorithm' => 'HMAC-SHA256',\n      'oauth_token' => 'm4c0d3z'\n    }\n    @raw_signed_request = signed_request(payload, @client_secret)\n    @request.stubs(:params).returns(\"signed_request\" => @raw_signed_request)\n\n    strategy.stubs(:callback_url).returns('/')\n  end\n\n  test 'redirects to callback passing along signed request' do\n    strategy.expects(:redirect).with(\"/?signed_request=#{Rack::Utils.escape(@raw_signed_request)}\").once\n    strategy.request_phase\n  end\nend\n\nmodule BuildAccessTokenTests\n  class TestCase < StrategyTestCase\n    include SignedRequestHelpers\n  end\n\n  class ParamsContainSignedRequestWithAccessTokenTest < TestCase\n    def setup\n      super\n\n      @payload = {\n        'algorithm' => 'HMAC-SHA256',\n        'oauth_token' => 'm4c0d3z',\n        'expires' => Time.now.to_i\n      }\n      @raw_signed_request = signed_request(@payload, @client_secret)\n      @request.stubs(:params).returns({\"signed_request\" => @raw_signed_request})\n\n      strategy.stubs(:callback_url).returns('/')\n    end\n\n    test 'returns a new access token from the signed request' do\n      result = strategy.build_access_token\n      assert_kind_of ::OAuth2::AccessToken, result\n      assert_equal @payload['oauth_token'], result.token\n    end\n\n    test 'returns an access token with the correct expiry time' do\n      result = strategy.build_access_token\n      assert_equal @payload['expires'], result.expires_at\n    end\n  end\n\n  class ParamsContainAccessTokenStringTest < TestCase\n    def setup\n      super\n\n      @request.stubs(:params).returns({'access_token' => 'm4c0d3z'})\n\n      strategy.stubs(:callback_url).returns('/')\n    end\n\n    test 'returns a new access token' do\n      result = strategy.build_access_token\n      assert_kind_of ::OAuth2::AccessToken, result\n      assert_equal 'm4c0d3z', result.token\n    end\n  end\nend\n"], "fixing_code": ["# OmniAuth Facebook &nbsp;[![Build Status](http://travis-ci.org/mkdynamic/omniauth-facebook.png?branch=master)](http://travis-ci.org/mkdynamic/omniauth-facebook)\n\nFacebook OAuth2 Strategy for OmniAuth 1.0.\n\nSupports the OAuth 2.0 server-side and client-side flows. Read the Facebook docs for more details: http://developers.facebook.com/docs/authentication\n\n## Installing\n\nAdd to your `Gemfile`:\n\n```ruby\ngem 'omniauth-facebook'\n```\n\nThen `bundle install`.\n\n## Usage\n\n`OmniAuth::Strategies::Facebook` is simply a Rack middleware. Read the OmniAuth 1.0 docs for detailed instructions: https://github.com/intridea/omniauth.\n\nHere's a quick example, adding the middleware to a Rails app in `config/initializers/omniauth.rb`:\n\n```ruby\nRails.application.config.middleware.use OmniAuth::Builder do\n  provider :facebook, ENV['FACEBOOK_KEY'], ENV['FACEBOOK_SECRET']\nend\n```\n\n[See the example Sinatra app for full examples](https://github.com/mkdynamic/omniauth-facebook/blob/master/example/config.ru) of both the server and client-side flows (including using the Facebook Javascript SDK).\n\n## Configuring\n\nYou can configure several options, which you pass in to the `provider` method via a `Hash`:\n\n* `scope`: A comma-separated list of permissions you want to request from the user. See the Facebook docs for a full list of available permissions: http://developers.facebook.com/docs/reference/api/permissions. Default: `email`\n* `display`: The display context to show the authentication page. Options are: `page`, `popup` and `touch`. Read the Facebook docs for more details: https://developers.facebook.com/docs/reference/dialogs/oauth/. Default: `page`\n* `auth_type`: Optionally specifies the requested authentication features as a comma-separated list, as per https://developers.facebook.com/docs/authentication/reauthentication/.\nValid values are `https` (checks for the presence of the secure cookie and asks for re-authentication if it is not present), and `reauthenticate` (asks the user to re-authenticate unconditionally). Default is `nil`.\n* `secure_image_url`: Set to `true` to use https for the avatar image url returned in the auth hash. Default is `false`.\n* `image_size`: Set the size for the returned image url in the auth hash. Valid options are `square` (50x50), `small` (50 pixels wide, variable height), `normal` (100 pixels wide, variable height), or `large` (about 200 pixels wide, variable height). Default is `square` (50x50).\n\nFor example, to request `email`, `user_birthday` and `read_stream` permissions and display the authentication page in a popup window:\n\n```ruby\nRails.application.config.middleware.use OmniAuth::Builder do\n  provider :facebook, ENV['FACEBOOK_KEY'], ENV['FACEBOOK_SECRET'],\n           :scope => 'email,user_birthday,read_stream', :display => 'popup'\nend\n```\n\n### Per-Request Options\n\nIf you want to set the `display` format or `scope` on a per-request basis, you can just pass it to the OmniAuth request phase URL, for example: `/auth/facebook?display=popup` or `/auth/facebook?scope=email`.\n\n### Custom Callback URL/Path\n\nYou can set a custom `callback_url` or `callback_path` option to override the default value. See [OmniAuth::Strategy#callback_url](https://github.com/intridea/omniauth/blob/master/lib/omniauth/strategy.rb#L411) for more details on the default.\n\n## Auth Hash\n\nHere's an example *Auth Hash* available in `request.env['omniauth.auth']`:\n\n```ruby\n{\n  :provider => 'facebook',\n  :uid => '1234567',\n  :info => {\n    :nickname => 'jbloggs',\n    :email => 'joe@bloggs.com',\n    :name => 'Joe Bloggs',\n    :first_name => 'Joe',\n    :last_name => 'Bloggs',\n    :image => 'http://graph.facebook.com/1234567/picture?type=square',\n    :urls => { :Facebook => 'http://www.facebook.com/jbloggs' },\n    :location => 'Palo Alto, California',\n    :verified => true\n  },\n  :credentials => {\n    :token => 'ABCDEF...', # OAuth 2.0 access_token, which you may wish to store\n    :expires_at => 1321747205, # when the access token expires (it always will)\n    :expires => true # this will always be true\n  },\n  :extra => {\n    :raw_info => {\n      :id => '1234567',\n      :name => 'Joe Bloggs',\n      :first_name => 'Joe',\n      :last_name => 'Bloggs',\n      :link => 'http://www.facebook.com/jbloggs',\n      :username => 'jbloggs',\n      :location => { :id => '123456789', :name => 'Palo Alto, California' },\n      :gender => 'male',\n      :email => 'joe@bloggs.com',\n      :timezone => -8,\n      :locale => 'en_US',\n      :verified => true,\n      :updated_time => '2011-11-11T06:21:03+0000'\n    }\n  }\n}\n```\n\nThe precise information available may depend on the permissions which you request.\n\n## Client-side Flow\n\nYou can use the Facebook Javascript SDK with `FB.login`, and just hit the callback endpoint (`/auth/facebook/callback` by default) once the user has authenticated in the success callback.\n\nNote that you must enable cookies in the `FB.init` config for this process to work.\n\nSee the example Sinatra app under `example/` and read the [Facebook docs on Client-Side Authentication](https://developers.facebook.com/docs/authentication/client-side/) for more details.\n\n### How it Works\n\nThe client-side flow is supported by parsing the authorization code from the signed request which Facebook places in a cookie.\n\nWhen you call `/auth/facebook/callback` in the success callback of `FB.login` that will pass the cookie back to the server. omniauth-facebook will see this cookie and:\n\n1. parse it,\n2. extract the authorization code contained in it\n3. and hit Facebook and obtain an access token which will get placed in the `request.env['omniauth.auth']['credentials']` hash.\n\nNote that this access token will be the same token obtained and available in the client through the hash [as detailed in the Facebook docs](https://developers.facebook.com/docs/authentication/client-side/).\n\n## Canvas Apps\n\nCanvas apps will send a signed request with the initial POST, therefore you *can* (if it makes sense for your app) pass this to the authorize endpoint (`/auth/facebook` by default) in the querystring.\n\nThere are then 2 scenarios for what happens next:\n\n1. A user has already granted access to your app, this will contain an access token. In this case, omniauth-facebook will skip asking the user for authentication and immediately redirect to the callback endpoint (`/auth/facebook/callback` by default) with the access token present in the `request.env['omniauth.auth']['credentials']` hash.\n\n2. A user has not granted access to your app, and the signed request *will not* contain an access token. In this case omniauth-facebook will simply follow the standard auth flow.\n\nTake a look at [the example Sinatra app for one option of how you can integrate with a canvas page](https://github.com/mkdynamic/omniauth-facebook/blob/master/example/config.ru).\n\nBear in mind you have several options (including [authenticated referrals](https://developers.facebook.com/docs/opengraph/authentication/#referrals)). Read [the Facebook docs on canvas page  authentication](https://developers.facebook.com/docs/authentication/canvas/) for more info.\n\n## Token Expiry\n\nSince Facebook deprecated the `offline_access` permission, this has become more complex. The expiration time of the access token you obtain will depend on which flow you are using. See below for more details.\n\n### Client-Side Flow\n\nIf you use the client-side flow, Facebook will give you back a short lived access token (~ 2 hours).\n\nYou can exchange this short lived access token for a longer lived version. Read the [Facebook docs about the offline_access  deprecation](https://developers.facebook.com/roadmap/offline-access-removal/) for more information.\n\n### Server-Side Flow\n\nIf you use the server-side flow, Facebook will give you back a longer loved access token (~ 60 days).\n\nIf you're having issue getting a long lived token with the server-side flow, make sure to enable the 'deprecate offline_access setting' in you Facebook app config. Read the [Facebook docs about the offline_access  deprecation](https://developers.facebook.com/roadmap/offline-access-removal/) for more information.\n\n## Supported Rubies\n\nActively tested with the following Ruby versions:\n\n- MRI 1.9.3\n- MRI 1.9.2\n- MRI 1.8.7\n- JRuby 1.6.5\n\n*NB.* For JRuby, you'll need to install the `jruby-openssl` gem. There's no way to automatically specify this in a Rubygem gemspec, so you need to manually add it your project's own Gemfile:\n\n```ruby\ngem 'jruby-openssl', :platform => :jruby\n```\n\n## License\n\nCopyright (c) 2012 by Mark Dodwell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n", "module OmniAuth\n  module Facebook\n    VERSION = \"1.5.0\"\n  end\nend\n", "require 'omniauth/strategies/oauth2'\nrequire 'base64'\nrequire 'openssl'\nrequire 'rack/utils'\n\nmodule OmniAuth\n  module Strategies\n    class Facebook < OmniAuth::Strategies::OAuth2\n      class NoAuthorizationCodeError < StandardError; end\n\n      DEFAULT_SCOPE = 'email'\n\n      option :client_options, {\n        :site => 'https://graph.facebook.com',\n        :token_url => '/oauth/access_token'\n      }\n\n      option :token_params, {\n        :parse => :query\n      }\n\n      option :access_token_options, {\n        :header_format => 'OAuth %s',\n        :param_name => 'access_token'\n      }\n\n      option :authorize_options, [:scope, :display, :auth_type]\n\n      uid { raw_info['id'] }\n\n      info do\n        prune!({\n          'nickname' => raw_info['username'],\n          'email' => raw_info['email'],\n          'name' => raw_info['name'],\n          'first_name' => raw_info['first_name'],\n          'last_name' => raw_info['last_name'],\n          'image' => \"#{options[:secure_image_url] ? 'https' : 'http'}://graph.facebook.com/#{uid}/picture?type=#{options[:image_size] || 'square'}\",\n          'description' => raw_info['bio'],\n          'urls' => {\n            'Facebook' => raw_info['link'],\n            'Website' => raw_info['website']\n          },\n          'location' => (raw_info['location'] || {})['name'],\n          'verified' => raw_info['verified']\n        })\n      end\n\n      extra do\n        hash = {}\n        hash['raw_info'] = raw_info unless skip_info?\n        prune! hash\n      end\n\n      def raw_info\n        @raw_info ||= access_token.get('/me').parsed || {}\n      end\n\n      def build_access_token\n        if access_token = request.params[\"access_token\"]\n          ::OAuth2::AccessToken.from_hash(\n            client, \n            {\"access_token\" => access_token}.update(access_token_options)\n          )\n        elsif signed_request_contains_access_token?\n          hash = signed_request.clone\n          ::OAuth2::AccessToken.new(\n            client,\n            hash.delete('oauth_token'),\n            hash.merge!(access_token_options.merge(:expires_at => hash.delete('expires')))\n          )\n        else\n          with_authorization_code! { super }.tap do |token|\n            token.options.merge!(access_token_options)\n          end\n        end\n      end\n\n      def request_phase\n        if signed_request_contains_access_token?\n          # if we already have an access token, we can just hit the\n          # callback URL directly and pass the signed request along\n          params = { :signed_request => raw_signed_request }\n          params[:state] = request.params['state'] if request.params['state']\n          query = Rack::Utils.build_query(params)\n\n          url = callback_url\n          url << \"?\" unless url.match(/\\?/)\n          url << \"&\" unless url.match(/[\\&\\?]$/)\n          url << query\n\n          redirect url\n        else\n          super\n        end\n      end\n\n      # NOTE if we're using code from the signed request\n      # then FB sets the redirect_uri to '' during the authorize\n      # phase + it must match during the access_token phase:\n      # https://github.com/facebook/php-sdk/blob/master/src/base_facebook.php#L348\n      def callback_url\n        if @authorization_code_from_signed_request\n          ''\n        else\n          options[:callback_url] || super\n        end\n      end\n\n      def access_token_options\n        options.access_token_options.inject({}) { |h,(k,v)| h[k.to_sym] = v; h }\n      end\n\n      ##\n      # You can pass +display+ or +scope+ params to the auth request, if\n      # you need to set them dynamically. You can also set these options\n      # in the OmniAuth config :authorize_params option.\n      #\n      # /auth/facebook?display=popup&state=ABC\n      #\n      def authorize_params\n        super.tap do |params|\n          %w[display scope].each do |v|\n            if request.params[v]\n              params[v.to_sym] = request.params[v]\n            end\n          end\n\n          params[:scope] ||= DEFAULT_SCOPE\n        end\n      end\n\n      ##\n      # Parse signed request in order, from:\n      #\n      # 1. the request 'signed_request' param (server-side flow from canvas pages) or\n      # 2. a cookie (client-side flow via JS SDK)\n      #\n      def signed_request\n        @signed_request ||= raw_signed_request &&\n          parse_signed_request(raw_signed_request)\n      end\n\n      private\n\n      def raw_signed_request\n        request.params['signed_request'] ||\n        request.cookies[\"fbsr_#{client.id}\"]\n      end\n\n      ##\n      # If the signed_request comes from a FB canvas page and the user\n      # has already authorized your application, the JSON object will be\n      # contain the access token.\n      #\n      # https://developers.facebook.com/docs/authentication/canvas/\n      #\n      def signed_request_contains_access_token?\n        signed_request &&\n        signed_request['oauth_token']\n      end\n\n      ##\n      # Picks the authorization code in order, from:\n      #\n      # 1. the request 'code' param (manual callback from standard server-side flow)\n      # 2. a signed request (see #signed_request for more)\n      #\n      def with_authorization_code!\n        if request.params.key?('code')\n          yield\n        elsif code_from_signed_request = signed_request && signed_request['code']\n          request.params['code'] = code_from_signed_request\n          @authorization_code_from_signed_request = true\n          begin\n            yield\n          ensure\n            request.params.delete('code')\n            @authorization_code_from_signed_request = false\n          end\n        else\n          raise NoAuthorizationCodeError, 'must pass either a `code` parameter or a signed request (via `signed_request` parameter or a `fbsr_XXX` cookie)'\n        end\n      end\n\n      def prune!(hash)\n        hash.delete_if do |_, value|\n          prune!(value) if value.is_a?(Hash)\n          value.nil? || (value.respond_to?(:empty?) && value.empty?)\n        end\n      end\n\n      def parse_signed_request(value)\n        signature, encoded_payload = value.split('.')\n\n        decoded_hex_signature = base64_decode_url(signature)\n        decoded_payload = MultiJson.decode(base64_decode_url(encoded_payload))\n\n        unless decoded_payload['algorithm'] == 'HMAC-SHA256'\n          raise NotImplementedError, \"unkown algorithm: #{decoded_payload['algorithm']}\"\n        end\n\n        if valid_signature?(client.secret, decoded_hex_signature, encoded_payload)\n          decoded_payload\n        end\n      end\n\n      def valid_signature?(secret, signature, payload, algorithm = OpenSSL::Digest::SHA256.new)\n        OpenSSL::HMAC.digest(algorithm, secret, payload) == signature\n      end\n\n      def base64_decode_url(value)\n        value += '=' * (4 - value.size.modulo(4))\n        Base64.decode64(value.tr('-_', '+/'))\n      end\n    end\n  end\nend\n", "# NOTE it would be useful if this lived in omniauth-oauth2 eventually\nmodule OAuth2StrategyTests\n  def self.included(base)\n    base.class_eval do\n      include ClientTests\n      include AuthorizeParamsTests\n      include CSRFAuthorizeParamsTests\n      include TokenParamsTests\n    end\n  end\n  \n  module ClientTests\n    extend BlockTestHelper\n    \n    test 'should be initialized with symbolized client_options' do\n      @options = { :client_options => { 'authorize_url' => 'https://example.com' } }\n      assert_equal 'https://example.com', strategy.client.options[:authorize_url]\n    end\n  end\n\n  module AuthorizeParamsTests\n    extend BlockTestHelper\n    \n    test 'should include any authorize params passed in the :authorize_params option' do\n      @options = { :authorize_params => { :foo => 'bar', :baz => 'zip' } }\n      assert_equal 'bar', strategy.authorize_params['foo']\n      assert_equal 'zip', strategy.authorize_params['baz']\n    end\n\n    test 'should include top-level options that are marked as :authorize_options' do\n      @options = { :authorize_options => [:scope, :foo], :scope => 'bar', :foo => 'baz' }\n      assert_equal 'bar', strategy.authorize_params['scope']\n      assert_equal 'baz', strategy.authorize_params['foo']\n    end\n    \n    test 'should exclude top-level options that are not passed' do\n      @options = { :authorize_options => [:bar] }\n      refute_has_key :bar, strategy.authorize_params\n      refute_has_key 'bar', strategy.authorize_params\n    end\n  end\n\n  module CSRFAuthorizeParamsTests\n    extend BlockTestHelper\n\n    test 'should store random state in the session when none is present in authorize or request params' do\n      assert_includes strategy.authorize_params.keys, 'state'\n      refute_empty strategy.authorize_params['state']\n      refute_empty strategy.session['omniauth.state']\n      assert_equal strategy.authorize_params['state'], strategy.session['omniauth.state']\n    end\n\n    test 'should not store state in the session when present in authorize params vs. a random one' do\n      @options = { :authorize_params => { :state => 'bar' } }\n      refute_empty strategy.authorize_params['state']\n      refute_equal 'bar', strategy.authorize_params[:state]\n      refute_empty strategy.session['omniauth.state']\n      refute_equal 'bar', strategy.session['omniauth.state']\n    end\n\n    test 'should not store state in the session when present in request params vs. a random one' do\n      @request.stubs(:params).returns({ 'state' => 'foo' })\n      refute_empty strategy.authorize_params['state']\n      refute_equal 'foo', strategy.authorize_params[:state]\n      refute_empty strategy.session['omniauth.state']\n      refute_equal 'foo', strategy.session['omniauth.state']\n    end\n  end\n\n  module TokenParamsTests\n    extend BlockTestHelper\n    \n    test 'should include any authorize params passed in the :token_params option' do\n      @options = { :token_params => { :foo => 'bar', :baz => 'zip' } }\n      assert_equal 'bar', strategy.token_params['foo']\n      assert_equal 'zip', strategy.token_params['baz']\n    end\n\n    test 'should include top-level options that are marked as :token_options' do\n      @options = { :token_options => [:scope, :foo], :scope => 'bar', :foo => 'baz' }\n      assert_equal 'bar', strategy.token_params['scope']\n      assert_equal 'baz', strategy.token_params['foo']\n    end\n  end\nend\n", "require 'helper'\nrequire 'omniauth-facebook'\nrequire 'openssl'\nrequire 'base64'\n\nclass StrategyTest < StrategyTestCase\n  include OAuth2StrategyTests\nend\n\nclass ClientTest < StrategyTestCase\n  test 'has correct Facebook site' do\n    assert_equal 'https://graph.facebook.com', strategy.client.site\n  end\n\n  test 'has correct authorize url' do\n    assert_equal '/oauth/authorize', strategy.client.options[:authorize_url]\n  end\n\n  test 'has correct token url' do\n    assert_equal '/oauth/access_token', strategy.client.options[:token_url]\n  end\nend\n\nclass CallbackUrlTest < StrategyTestCase\n  test \"returns the default callback url\" do\n    url_base = 'http://auth.request.com'\n    @request.stubs(:url).returns(\"#{url_base}/some/page\")\n    strategy.stubs(:script_name).returns('') # as not to depend on Rack env\n    assert_equal \"#{url_base}/auth/facebook/callback\", strategy.callback_url\n  end\n\n  test \"returns path from callback_path option\" do\n    @options = { :callback_path => \"/auth/FB/done\"}\n    url_base = 'http://auth.request.com'\n    @request.stubs(:url).returns(\"#{url_base}/page/path\")\n    strategy.stubs(:script_name).returns('') # as not to depend on Rack env\n    assert_equal \"#{url_base}/auth/FB/done\", strategy.callback_url\n  end\n\n  test \"returns url from callback_url option\" do\n    url = 'https://auth.myapp.com/auth/fb/callback'\n    @options = { :callback_url => url }\n    assert_equal url, strategy.callback_url\n  end\nend\n\nclass AuthorizeParamsTest < StrategyTestCase\n  test 'includes default scope for email' do\n    assert strategy.authorize_params.is_a?(Hash)\n    assert_equal 'email', strategy.authorize_params[:scope]\n  end\n\n  test 'includes display parameter from request when present' do\n    @request.stubs(:params).returns({ 'display' => 'touch' })\n    assert strategy.authorize_params.is_a?(Hash)\n    assert_equal 'touch', strategy.authorize_params[:display]\n  end\n\n  test 'overrides default scope with parameter passed from request' do\n    @request.stubs(:params).returns({ 'scope' => 'email' })\n    assert strategy.authorize_params.is_a?(Hash)\n    assert_equal 'email', strategy.authorize_params[:scope]\n  end\nend\n\nclass TokeParamsTest < StrategyTestCase\n  test 'has correct parse strategy' do\n    assert_equal :query, strategy.token_params[:parse]\n  end\nend\n\nclass AccessTokenOptionsTest < StrategyTestCase\n  test 'has correct param name by default' do\n    assert_equal 'access_token', strategy.access_token_options[:param_name]\n  end\n\n  test 'has correct header format by default' do\n    assert_equal 'OAuth %s', strategy.access_token_options[:header_format]\n  end\nend\n\nclass UidTest < StrategyTestCase\n  def setup\n    super\n    strategy.stubs(:raw_info).returns({ 'id' => '123' })\n  end\n\n  test 'returns the id from raw_info' do\n    assert_equal '123', strategy.uid\n  end\nend\n\nclass InfoTest < StrategyTestCase\n  test 'returns the secure facebook avatar url when `secure_image_url` option is specified' do\n    @options = { :secure_image_url => true }\n    raw_info = { 'name' => 'Fred Smith', 'id' => '321' }\n    strategy.stubs(:raw_info).returns(raw_info)\n    assert_equal 'https://graph.facebook.com/321/picture?type=square', strategy.info['image']\n  end\n\n  test 'returns the image size specified in the `image_size` option' do\n    @options = { :image_size => 'normal' }\n    raw_info = { 'name' => 'Fred Smith', 'id' => '321' }\n    strategy.stubs(:raw_info).returns(raw_info)\n    assert_equal 'http://graph.facebook.com/321/picture?type=normal', strategy.info['image']\n  end\nend\n\nclass InfoTestOptionalDataPresent < StrategyTestCase\n  def setup\n    super\n    @raw_info ||= { 'name' => 'Fred Smith' }\n    strategy.stubs(:raw_info).returns(@raw_info)\n  end\n\n  test 'returns the name' do\n    assert_equal 'Fred Smith', strategy.info['name']\n  end\n\n  test 'returns the email' do\n    @raw_info['email'] = 'fred@smith.com'\n    assert_equal 'fred@smith.com', strategy.info['email']\n  end\n\n  test 'returns the username as nickname' do\n    @raw_info['username'] = 'fredsmith'\n    assert_equal 'fredsmith', strategy.info['nickname']\n  end\n\n  test 'returns the first name' do\n    @raw_info['first_name'] = 'Fred'\n    assert_equal 'Fred', strategy.info['first_name']\n  end\n\n  test 'returns the last name' do\n    @raw_info['last_name'] = 'Smith'\n    assert_equal 'Smith', strategy.info['last_name']\n  end\n\n  test 'returns the location name as location' do\n    @raw_info['location'] = { 'id' => '104022926303756', 'name' => 'Palo Alto, California' }\n    assert_equal 'Palo Alto, California', strategy.info['location']\n  end\n\n  test 'returns bio as description' do\n    @raw_info['bio'] = 'I am great'\n    assert_equal 'I am great', strategy.info['description']\n  end\n\n  test 'returns the square format facebook avatar url' do\n    @raw_info['id'] = '321'\n    assert_equal 'http://graph.facebook.com/321/picture?type=square', strategy.info['image']\n  end\n\n  test 'returns the Facebook link as the Facebook url' do\n    @raw_info['link'] = 'http://www.facebook.com/fredsmith'\n    assert_kind_of Hash, strategy.info['urls']\n    assert_equal 'http://www.facebook.com/fredsmith', strategy.info['urls']['Facebook']\n  end\n\n  test 'returns website url' do\n    @raw_info['website'] = 'https://my-wonderful-site.com'\n    assert_kind_of Hash, strategy.info['urls']\n    assert_equal 'https://my-wonderful-site.com', strategy.info['urls']['Website']\n  end\n\n  test 'return both Facebook link and website urls' do\n    @raw_info['link'] = 'http://www.facebook.com/fredsmith'\n    @raw_info['website'] = 'https://my-wonderful-site.com'\n    assert_kind_of Hash, strategy.info['urls']\n    assert_equal 'http://www.facebook.com/fredsmith', strategy.info['urls']['Facebook']\n    assert_equal 'https://my-wonderful-site.com', strategy.info['urls']['Website']\n  end\n\n  test 'returns the positive verified status' do\n    @raw_info['verified'] = true\n    assert strategy.info['verified']\n  end\n\n  test 'returns the negative verified status' do\n    @raw_info['verified'] = false\n    refute strategy.info['verified']\n  end\nend\n\nclass InfoTestOptionalDataNotPresent < StrategyTestCase\n  def setup\n    super\n    @raw_info ||= { 'name' => 'Fred Smith' }\n    strategy.stubs(:raw_info).returns(@raw_info)\n  end\n\n  test 'has no email key' do\n    refute_has_key 'email', strategy.info\n  end\n\n  test 'has no nickname key' do\n    refute_has_key 'nickname', strategy.info\n  end\n\n  test 'has no first name key' do\n    refute_has_key 'first_name', strategy.info\n  end\n\n  test 'has no last name key' do\n    refute_has_key 'last_name', strategy.info\n  end\n\n  test 'has no location key' do\n    refute_has_key 'location', strategy.info\n  end\n\n  test 'has no description key' do\n    refute_has_key 'description', strategy.info\n  end\n\n  test 'has no urls' do\n    refute_has_key 'urls', strategy.info\n  end\n\n  test 'has no verified key' do\n    refute_has_key 'verified', strategy.info\n  end\nend\n\nclass RawInfoTest < StrategyTestCase\n  def setup\n    super\n    @access_token = stub('OAuth2::AccessToken')\n  end\n\n  test 'performs a GET to https://graph.facebook.com/me' do\n    strategy.stubs(:access_token).returns(@access_token)\n    @access_token.expects(:get).with('/me').returns(stub_everything('OAuth2::Response'))\n    strategy.raw_info\n  end\n\n  test 'returns a Hash' do\n    strategy.stubs(:access_token).returns(@access_token)\n    raw_response = stub('Faraday::Response')\n    raw_response.stubs(:body).returns('{ \"ohai\": \"thar\" }')\n    raw_response.stubs(:status).returns(200)\n    raw_response.stubs(:headers).returns({'Content-Type' => 'application/json' })\n    oauth2_response = OAuth2::Response.new(raw_response)\n    @access_token.stubs(:get).with('/me').returns(oauth2_response)\n    assert_kind_of Hash, strategy.raw_info\n    assert_equal 'thar', strategy.raw_info['ohai']\n  end\n\n  test 'returns an empty hash when the response is false' do\n    strategy.stubs(:access_token).returns(@access_token)\n    oauth2_response = stub('OAuth2::Response', :parsed => false)\n    @access_token.stubs(:get).with('/me').returns(oauth2_response)\n    assert_kind_of Hash, strategy.raw_info\n  end\n\n  test 'should not include raw_info in extras hash when skip_info is specified' do\n    @options = { :skip_info => true }\n    strategy.stubs(:raw_info).returns({:foo => 'bar' })\n    refute_has_key 'raw_info', strategy.extra\n  end\nend\n\nclass CredentialsTest < StrategyTestCase\n  def setup\n    super\n    @access_token = stub('OAuth2::AccessToken')\n    @access_token.stubs(:token)\n    @access_token.stubs(:expires?)\n    @access_token.stubs(:expires_at)\n    @access_token.stubs(:refresh_token)\n    strategy.stubs(:access_token).returns(@access_token)\n  end\n\n  test 'returns a Hash' do\n    assert_kind_of Hash, strategy.credentials\n  end\n\n  test 'returns the token' do\n    @access_token.stubs(:token).returns('123')\n    assert_equal '123', strategy.credentials['token']\n  end\n\n  test 'returns the expiry status' do\n    @access_token.stubs(:expires?).returns(true)\n    assert strategy.credentials['expires']\n\n    @access_token.stubs(:expires?).returns(false)\n    refute strategy.credentials['expires']\n  end\n\n  test 'returns the refresh token and expiry time when expiring' do\n    ten_mins_from_now = (Time.now + 600).to_i\n    @access_token.stubs(:expires?).returns(true)\n    @access_token.stubs(:refresh_token).returns('321')\n    @access_token.stubs(:expires_at).returns(ten_mins_from_now)\n    assert_equal '321', strategy.credentials['refresh_token']\n    assert_equal ten_mins_from_now, strategy.credentials['expires_at']\n  end\n\n  test 'does not return the refresh token when test is nil and expiring' do\n    @access_token.stubs(:expires?).returns(true)\n    @access_token.stubs(:refresh_token).returns(nil)\n    assert_nil strategy.credentials['refresh_token']\n    refute_has_key 'refresh_token', strategy.credentials\n  end\n\n  test 'does not return the refresh token when not expiring' do\n    @access_token.stubs(:expires?).returns(false)\n    @access_token.stubs(:refresh_token).returns('XXX')\n    assert_nil strategy.credentials['refresh_token']\n    refute_has_key 'refresh_token', strategy.credentials\n  end\nend\n\nclass ExtraTest < StrategyTestCase\n  def setup\n    super\n    @raw_info = { 'name' => 'Fred Smith' }\n    strategy.stubs(:raw_info).returns(@raw_info)\n  end\n\n  test 'returns a Hash' do\n    assert_kind_of Hash, strategy.extra\n  end\n\n  test 'contains raw info' do\n    assert_equal({ 'raw_info' => @raw_info }, strategy.extra)\n  end\nend\n\nmodule SignedRequestHelpers\n  def signed_request(payload, secret)\n    encoded_payload = base64_encode_url(MultiJson.encode(payload))\n    encoded_signature = base64_encode_url(signature(encoded_payload, secret))\n    [encoded_signature, encoded_payload].join('.')\n  end\n\n  def base64_encode_url(value)\n    Base64.encode64(value).tr('+/', '-_').gsub(/\\n/, '')\n  end\n\n  def signature(payload, secret, algorithm = OpenSSL::Digest::SHA256.new)\n    OpenSSL::HMAC.digest(algorithm, secret, payload)\n  end\nend\n\nmodule SignedRequestTests\n  class TestCase < StrategyTestCase\n    include SignedRequestHelpers\n  end\n\n  class CookieAndParamNotPresentTest < TestCase\n    test 'is nil' do\n      assert_nil strategy.send(:signed_request)\n    end\n  end\n\n  class CookiePresentTest < TestCase\n    def setup\n      super\n      @payload = {\n        'algorithm' => 'HMAC-SHA256',\n        'code' => 'm4c0d3z',\n        'issued_at' => Time.now.to_i,\n        'user_id' => '123456'\n      }\n\n      @request.stubs(:cookies).returns({\"fbsr_#{@client_id}\" => signed_request(@payload, @client_secret)})\n    end\n\n    test 'parses the access code out from the cookie' do\n      assert_equal @payload, strategy.send(:signed_request)\n    end\n  end\n\n  class ParamPresentTest < TestCase\n    def setup\n      super\n      @payload = {\n        'algorithm' => 'HMAC-SHA256',\n        'oauth_token' => 'XXX',\n        'issued_at' => Time.now.to_i,\n        'user_id' => '123456'\n      }\n\n      @request.stubs(:params).returns({'signed_request' => signed_request(@payload, @client_secret)})\n    end\n\n    test 'parses the access code out from the param' do\n      assert_equal @payload, strategy.send(:signed_request)\n    end\n  end\n\n  class CookieAndParamPresentTest < TestCase\n    def setup\n      super\n      @payload_from_cookie = {\n        'algorithm' => 'HMAC-SHA256',\n        'from' => 'cookie'\n      }\n\n      @request.stubs(:cookies).returns({\"fbsr_#{@client_id}\" => signed_request(@payload_from_cookie, @client_secret)})\n\n      @payload_from_param = {\n        'algorithm' => 'HMAC-SHA256',\n        'from' => 'param'\n      }\n\n      @request.stubs(:params).returns({'signed_request' => signed_request(@payload_from_param, @client_secret)})\n    end\n\n    test 'picks param over cookie' do\n      assert_equal @payload_from_param, strategy.send(:signed_request)\n    end\n  end\nend\n\nclass RequestPhaseWithSignedRequestTest < StrategyTestCase\n  include SignedRequestHelpers\n\n  def setup\n    super\n\n    payload = {\n      'algorithm' => 'HMAC-SHA256',\n      'oauth_token' => 'm4c0d3z'\n    }\n    @raw_signed_request = signed_request(payload, @client_secret)\n    @request.stubs(:params).returns(\"signed_request\" => @raw_signed_request)\n\n    strategy.stubs(:callback_url).returns('/')\n  end\n\n  test 'redirects to callback passing along signed request' do\n    strategy.expects(:redirect).with(\"/?signed_request=#{Rack::Utils.escape(@raw_signed_request)}\").once\n    strategy.request_phase\n  end\nend\n\nmodule BuildAccessTokenTests\n  class TestCase < StrategyTestCase\n    include SignedRequestHelpers\n  end\n\n  class ParamsContainSignedRequestWithAccessTokenTest < TestCase\n    def setup\n      super\n\n      @payload = {\n        'algorithm' => 'HMAC-SHA256',\n        'oauth_token' => 'm4c0d3z',\n        'expires' => Time.now.to_i\n      }\n      @raw_signed_request = signed_request(@payload, @client_secret)\n      @request.stubs(:params).returns({\"signed_request\" => @raw_signed_request})\n\n      strategy.stubs(:callback_url).returns('/')\n    end\n\n    test 'returns a new access token from the signed request' do\n      result = strategy.build_access_token\n      assert_kind_of ::OAuth2::AccessToken, result\n      assert_equal @payload['oauth_token'], result.token\n    end\n\n    test 'returns an access token with the correct expiry time' do\n      result = strategy.build_access_token\n      assert_equal @payload['expires'], result.expires_at\n    end\n  end\n\n  class ParamsContainAccessTokenStringTest < TestCase\n    def setup\n      super\n\n      @request.stubs(:params).returns({'access_token' => 'm4c0d3z'})\n\n      strategy.stubs(:callback_url).returns('/')\n    end\n\n    test 'returns a new access token' do\n      result = strategy.build_access_token\n      assert_kind_of ::OAuth2::AccessToken, result\n      assert_equal 'm4c0d3z', result.token\n    end\n  end\nend\n"], "filenames": ["README.md", "lib/omniauth/facebook/version.rb", "lib/omniauth/strategies/facebook.rb", "test/support/shared_examples.rb", "test/test.rb"], "buggy_code_start_loc": [54, 3, 115, 53, 57], "buggy_code_end_loc": [56, 4, 129, 67, 63], "fixing_code_start_loc": [53, 3, 115, 53, 56], "fixing_code_end_loc": [53, 4, 125, 67, 56], "type": "CWE-352", "message": "The omniauth-facebook gem 1.4.1 before 1.5.0 does not properly store the session parameter, which allows remote attackers to conduct cross-site request forgery (CSRF) attacks via the state parameter.", "other": {"cve": {"id": "CVE-2013-4562", "sourceIdentifier": "secalert@redhat.com", "published": "2014-05-13T15:55:04.890", "lastModified": "2014-05-14T17:19:26.107", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The omniauth-facebook gem 1.4.1 before 1.5.0 does not properly store the session parameter, which allows remote attackers to conduct cross-site request forgery (CSRF) attacks via the state parameter."}, {"lang": "es", "value": "La gema omniauth-facebook 1.4.1 anterior a 1.5.0 no almacena debidamente el par\u00e1metro session, lo que permite a atacantes remotos realizar ataques de CSRF a trav\u00e9s del par\u00e1metro state."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:madeofcode:omniauth-facebook:1.4.1:*:*:*:*:ruby:*:*", "matchCriteriaId": "8FF2554E-9BA0-4948-A4DC-C74240D07D78"}]}]}], "references": [{"url": "http://seclists.org/oss-sec/2013/q4/264", "source": "secalert@redhat.com"}, {"url": "http://seclists.org/oss-sec/2013/q4/267", "source": "secalert@redhat.com"}, {"url": "https://github.com/mkdynamic/omniauth-facebook/commit/ccfcc26fe7e34acbd75ad4a095fd01ce5ff48ee7", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://groups.google.com/d/msg/ruby-security-ann/-tJHNlTiPh4/9SJxdEWLIawJ", "source": "secalert@redhat.com"}]}, "github_commit_url": "https://github.com/mkdynamic/omniauth-facebook/commit/ccfcc26fe7e34acbd75ad4a095fd01ce5ff48ee7"}}