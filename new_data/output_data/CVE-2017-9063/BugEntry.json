{"buggy_code": ["<?php\n/**\n * Theme Customize Screen.\n *\n * @package WordPress\n * @subpackage Customize\n * @since 3.4.0\n */\n\ndefine( 'IFRAME_REQUEST', true );\n\n/** Load WordPress Administration Bootstrap */\nrequire_once( dirname( __FILE__ ) . '/admin.php' );\n\nif ( ! current_user_can( 'customize' ) ) {\n\twp_die(\n\t\t'<h1>' . __( 'Cheatin&#8217; uh?' ) . '</h1>' .\n\t\t'<p>' . __( 'Sorry, you are not allowed to customize this site.' ) . '</p>',\n\t\t403\n\t);\n}\n\n/**\n * @global WP_Scripts           $wp_scripts\n * @global WP_Customize_Manager $wp_customize\n */\nglobal $wp_scripts, $wp_customize;\n\nif ( $wp_customize->changeset_post_id() ) {\n\tif ( ! current_user_can( get_post_type_object( 'customize_changeset' )->cap->edit_post, $wp_customize->changeset_post_id() ) ) {\n\t\twp_die(\n\t\t\t'<h1>' . __( 'Cheatin&#8217; uh?' ) . '</h1>' .\n\t\t\t'<p>' . __( 'Sorry, you are not allowed to edit this changeset.' ) . '</p>',\n\t\t\t403\n\t\t);\n\t}\n\tif ( in_array( get_post_status( $wp_customize->changeset_post_id() ), array( 'publish', 'trash' ), true ) ) {\n\t\twp_die(\n\t\t\t'<h1>' . __( 'Cheatin&#8217; uh?' ) . '</h1>' .\n\t\t\t'<p>' . __( 'This changeset has already been published and cannot be further modified.' ) . '</p>' .\n\t\t\t'<p><a href=\"' . esc_url( remove_query_arg( 'changeset_uuid' ) ) . '\">' . __( 'Customize New Changes' ) . '</a></p>',\n\t\t\t403\n\t\t);\n\t}\n}\n\n\nwp_reset_vars( array( 'url', 'return', 'autofocus' ) );\nif ( ! empty( $url ) ) {\n\t$wp_customize->set_preview_url( wp_unslash( $url ) );\n}\nif ( ! empty( $return ) ) {\n\t$wp_customize->set_return_url( wp_unslash( $return ) );\n}\nif ( ! empty( $autofocus ) && is_array( $autofocus ) ) {\n\t$wp_customize->set_autofocus( wp_unslash( $autofocus ) );\n}\n\n$registered = $wp_scripts->registered;\n$wp_scripts = new WP_Scripts;\n$wp_scripts->registered = $registered;\n\nadd_action( 'customize_controls_print_scripts',        'print_head_scripts', 20 );\nadd_action( 'customize_controls_print_footer_scripts', '_wp_footer_scripts'     );\nadd_action( 'customize_controls_print_styles',         'print_admin_styles', 20 );\n\n/**\n * Fires when Customizer controls are initialized, before scripts are enqueued.\n *\n * @since 3.4.0\n */\ndo_action( 'customize_controls_init' );\n\nwp_enqueue_script( 'customize-controls' );\nwp_enqueue_style( 'customize-controls' );\n\n/**\n * Enqueue Customizer control scripts.\n *\n * @since 3.4.0\n */\ndo_action( 'customize_controls_enqueue_scripts' );\n\n// Let's roll.\n@header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));\n\nwp_user_settings();\n_wp_admin_html_begin();\n\n$body_class = 'wp-core-ui wp-customizer js';\n\nif ( wp_is_mobile() ) :\n\t$body_class .= ' mobile';\n\n\t?><meta name=\"viewport\" id=\"viewport-meta\" content=\"width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=1.2\" /><?php\nendif;\n\nif ( $wp_customize->is_ios() ) {\n\t$body_class .= ' ios';\n}\n\nif ( is_rtl() ) {\n\t$body_class .= ' rtl';\n}\n$body_class .= ' locale-' . sanitize_html_class( strtolower( str_replace( '_', '-', get_user_locale() ) ) );\n\n$admin_title = sprintf( $wp_customize->get_document_title_template(), __( 'Loading&hellip;' ) );\n\n?><title><?php echo $admin_title; ?></title>\n\n<script type=\"text/javascript\">\nvar ajaxurl = <?php echo wp_json_encode( admin_url( 'admin-ajax.php', 'relative' ) ); ?>;\n</script>\n\n<?php\n/**\n * Fires when Customizer control styles are printed.\n *\n * @since 3.4.0\n */\ndo_action( 'customize_controls_print_styles' );\n\n/**\n * Fires when Customizer control scripts are printed.\n *\n * @since 3.4.0\n */\ndo_action( 'customize_controls_print_scripts' );\n?>\n</head>\n<body class=\"<?php echo esc_attr( $body_class ); ?>\">\n<div class=\"wp-full-overlay expanded\">\n\t<form id=\"customize-controls\" class=\"wrap wp-full-overlay-sidebar\">\n\t\t<div id=\"customize-header-actions\" class=\"wp-full-overlay-header\">\n\t\t\t<?php\n\t\t\t$save_text = $wp_customize->is_theme_active() ? __( 'Save &amp; Publish' ) : __( 'Save &amp; Activate' );\n\t\t\t$save_attrs = array();\n\t\t\tif ( ! current_user_can( get_post_type_object( 'customize_changeset' )->cap->publish_posts ) ) {\n\t\t\t\t$save_attrs['style'] = 'display: none';\n\t\t\t}\n\t\t\tsubmit_button( $save_text, 'primary save', 'save', false, $save_attrs );\n\t\t\t?>\n\t\t\t<span class=\"spinner\"></span>\n\t\t\t<button type=\"button\" class=\"customize-controls-preview-toggle\">\n\t\t\t\t<span class=\"controls\"><?php _e( 'Customize' ); ?></span>\n\t\t\t\t<span class=\"preview\"><?php _e( 'Preview' ); ?></span>\n\t\t\t</button>\n\t\t\t<a class=\"customize-controls-close\" href=\"<?php echo esc_url( $wp_customize->get_return_url() ); ?>\">\n\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Close the Customizer and go back to the previous page' ); ?></span>\n\t\t\t</a>\n\t\t</div>\n\n\t\t<div id=\"widgets-right\" class=\"wp-clearfix\"><!-- For Widget Customizer, many widgets try to look for instances under div#widgets-right, so we have to add that ID to a container div in the Customizer for compat -->\n\t\t<div class=\"wp-full-overlay-sidebar-content\" tabindex=\"-1\">\n\t\t\t<div id=\"customize-info\" class=\"accordion-section customize-info\">\n\t\t\t\t<div class=\"accordion-section-title\">\n\t\t\t\t\t<span class=\"preview-notice\"><?php\n\t\t\t\t\t\techo sprintf( __( 'You are customizing %s' ), '<strong class=\"panel-title site-title\">' . get_bloginfo( 'name' ) . '</strong>' );\n\t\t\t\t\t?></span>\n\t\t\t\t\t<button type=\"button\" class=\"customize-help-toggle dashicons dashicons-editor-help\" aria-expanded=\"false\"><span class=\"screen-reader-text\"><?php _e( 'Help' ); ?></span></button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"customize-panel-description\"><?php\n\t\t\t\t\t_e( 'The Customizer allows you to preview changes to your site before publishing them. You can navigate to different pages on your site within the preview. Edit shortcuts are shown for some editable elements.' );\n\t\t\t\t?></div>\n\t\t\t</div>\n\n\t\t\t<div id=\"customize-theme-controls\">\n\t\t\t\t<ul class=\"customize-pane-parent\"><?php // Panels and sections are managed here via JavaScript ?></ul>\n\t\t\t</div>\n\t\t</div>\n\t\t</div>\n\n\t\t<div id=\"customize-footer-actions\" class=\"wp-full-overlay-footer\">\n\t\t\t<button type=\"button\" class=\"collapse-sidebar button\" aria-expanded=\"true\" aria-label=\"<?php echo esc_attr( _x( 'Hide Controls', 'label for hide controls button without length constraints' ) ); ?>\">\n\t\t\t\t<span class=\"collapse-sidebar-arrow\"></span>\n\t\t\t\t<span class=\"collapse-sidebar-label\"><?php _ex( 'Hide Controls', 'short (~12 characters) label for hide controls button' ); ?></span>\n\t\t\t</button>\n\t\t\t<?php $previewable_devices = $wp_customize->get_previewable_devices(); ?>\n\t\t\t<?php if ( ! empty( $previewable_devices ) ) : ?>\n\t\t\t<div class=\"devices-wrapper\">\n\t\t\t\t<div class=\"devices\">\n\t\t\t\t\t<?php foreach ( (array) $previewable_devices as $device => $settings ) : ?>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tif ( empty( $settings['label'] ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$active = ! empty( $settings['default'] );\n\t\t\t\t\t\t$class = 'preview-' . $device;\n\t\t\t\t\t\tif ( $active ) {\n\t\t\t\t\t\t\t$class .= ' active';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<button type=\"button\" class=\"<?php echo esc_attr( $class ); ?>\" aria-pressed=\"<?php echo esc_attr( $active ) ?>\" data-device=\"<?php echo esc_attr( $device ); ?>\">\n\t\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php echo esc_html( $settings['label'] ); ?></span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t<?php endforeach; ?>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<?php endif; ?>\n\t\t</div>\n\t</form>\n\t<div id=\"customize-preview\" class=\"wp-full-overlay-main\"></div>\n\t<?php\n\n\t/**\n\t * Prints templates, control scripts, and settings in the footer.\n\t *\n\t * @since 3.4.0\n\t */\n\tdo_action( 'customize_controls_print_footer_scripts' );\n\t?>\n</div>\n</body>\n</html>\n", "/* global _wpCustomizeHeader, _wpCustomizeBackground, _wpMediaViewsL10n, MediaElementPlayer */\n(function( exports, $ ){\n\tvar Container, focus, normalizedTransitionendEventName, api = wp.customize;\n\n\t/**\n\t * A Customizer Setting.\n\t *\n\t * A setting is WordPress data (theme mod, option, menu, etc.) that the user can\n\t * draft changes to in the Customizer.\n\t *\n\t * @see PHP class WP_Customize_Setting.\n\t *\n\t * @class\n\t * @augments wp.customize.Value\n\t * @augments wp.customize.Class\n\t *\n\t * @param {object} id                The Setting ID.\n\t * @param {object} value             The initial value of the setting.\n\t * @param {object} options.previewer The Previewer instance to sync with.\n\t * @param {object} options.transport The transport to use for previewing. Supports 'refresh' and 'postMessage'.\n\t * @param {object} options.dirty\n\t */\n\tapi.Setting = api.Value.extend({\n\t\tinitialize: function( id, value, options ) {\n\t\t\tvar setting = this;\n\t\t\tapi.Value.prototype.initialize.call( setting, value, options );\n\n\t\t\tsetting.id = id;\n\t\t\tsetting.transport = setting.transport || 'refresh';\n\t\t\tsetting._dirty = options.dirty || false;\n\t\t\tsetting.notifications = new api.Values({ defaultConstructor: api.Notification });\n\n\t\t\t// Whenever the setting's value changes, refresh the preview.\n\t\t\tsetting.bind( setting.preview );\n\t\t},\n\n\t\t/**\n\t\t * Refresh the preview, respective of the setting's refresh policy.\n\t\t *\n\t\t * If the preview hasn't sent a keep-alive message and is likely\n\t\t * disconnected by having navigated to a non-allowed URL, then the\n\t\t * refresh transport will be forced when postMessage is the transport.\n\t\t * Note that postMessage does not throw an error when the recipient window\n\t\t * fails to match the origin window, so using try/catch around the\n\t\t * previewer.send() call to then fallback to refresh will not work.\n\t\t *\n\t\t * @since 3.4.0\n\t\t * @access public\n\t\t *\n\t\t * @returns {void}\n\t\t */\n\t\tpreview: function() {\n\t\t\tvar setting = this, transport;\n\t\t\ttransport = setting.transport;\n\n\t\t\tif ( 'postMessage' === transport && ! api.state( 'previewerAlive' ).get() ) {\n\t\t\t\ttransport = 'refresh';\n\t\t\t}\n\n\t\t\tif ( 'postMessage' === transport ) {\n\t\t\t\tsetting.previewer.send( 'setting', [ setting.id, setting() ] );\n\t\t\t} else if ( 'refresh' === transport ) {\n\t\t\t\tsetting.previewer.refresh();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Find controls associated with this setting.\n\t\t *\n\t\t * @since 4.6.0\n\t\t * @returns {wp.customize.Control[]} Controls associated with setting.\n\t\t */\n\t\tfindControls: function() {\n\t\t\tvar setting = this, controls = [];\n\t\t\tapi.control.each( function( control ) {\n\t\t\t\t_.each( control.settings, function( controlSetting ) {\n\t\t\t\t\tif ( controlSetting.id === setting.id ) {\n\t\t\t\t\t\tcontrols.push( control );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\t\treturn controls;\n\t\t}\n\t});\n\n\t/**\n\t * Current change count.\n\t *\n\t * @since 4.7.0\n\t * @type {number}\n\t * @protected\n\t */\n\tapi._latestRevision = 0;\n\n\t/**\n\t * Last revision that was saved.\n\t *\n\t * @since 4.7.0\n\t * @type {number}\n\t * @protected\n\t */\n\tapi._lastSavedRevision = 0;\n\n\t/**\n\t * Latest revisions associated with the updated setting.\n\t *\n\t * @since 4.7.0\n\t * @type {object}\n\t * @protected\n\t */\n\tapi._latestSettingRevisions = {};\n\n\t/*\n\t * Keep track of the revision associated with each updated setting so that\n\t * requestChangesetUpdate knows which dirty settings to include. Also, once\n\t * ready is triggered and all initial settings have been added, increment\n\t * revision for each newly-created initially-dirty setting so that it will\n\t * also be included in changeset update requests.\n\t */\n\tapi.bind( 'change', function incrementChangedSettingRevision( setting ) {\n\t\tapi._latestRevision += 1;\n\t\tapi._latestSettingRevisions[ setting.id ] = api._latestRevision;\n\t} );\n\tapi.bind( 'ready', function() {\n\t\tapi.bind( 'add', function incrementCreatedSettingRevision( setting ) {\n\t\t\tif ( setting._dirty ) {\n\t\t\t\tapi._latestRevision += 1;\n\t\t\t\tapi._latestSettingRevisions[ setting.id ] = api._latestRevision;\n\t\t\t}\n\t\t} );\n\t} );\n\n\t/**\n\t * Get the dirty setting values.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param {object} [options] Options.\n\t * @param {boolean} [options.unsaved=false] Whether only values not saved yet into a changeset will be returned (differential changes).\n\t * @returns {object} Dirty setting values.\n\t */\n\tapi.dirtyValues = function dirtyValues( options ) {\n\t\tvar values = {};\n\t\tapi.each( function( setting ) {\n\t\t\tvar settingRevision;\n\n\t\t\tif ( ! setting._dirty ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsettingRevision = api._latestSettingRevisions[ setting.id ];\n\n\t\t\t// Skip including settings that have already been included in the changeset, if only requesting unsaved.\n\t\t\tif ( api.state( 'changesetStatus' ).get() && ( options && options.unsaved ) && ( _.isUndefined( settingRevision ) || settingRevision <= api._lastSavedRevision ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalues[ setting.id ] = setting.get();\n\t\t} );\n\t\treturn values;\n\t};\n\n\t/**\n\t * Request updates to the changeset.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param {object} [changes] Mapping of setting IDs to setting params each normally including a value property, or mapping to null.\n\t *                           If not provided, then the changes will still be obtained from unsaved dirty settings.\n\t * @returns {jQuery.Promise} Promise resolving with the response data.\n\t */\n\tapi.requestChangesetUpdate = function requestChangesetUpdate( changes ) {\n\t\tvar deferred, request, submittedChanges = {}, data;\n\t\tdeferred = new $.Deferred();\n\n\t\tif ( changes ) {\n\t\t\t_.extend( submittedChanges, changes );\n\t\t}\n\n\t\t// Ensure all revised settings (changes pending save) are also included, but not if marked for deletion in changes.\n\t\t_.each( api.dirtyValues( { unsaved: true } ), function( dirtyValue, settingId ) {\n\t\t\tif ( ! changes || null !== changes[ settingId ] ) {\n\t\t\t\tsubmittedChanges[ settingId ] = _.extend(\n\t\t\t\t\t{},\n\t\t\t\t\tsubmittedChanges[ settingId ] || {},\n\t\t\t\t\t{ value: dirtyValue }\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t\t// Short-circuit when there are no pending changes.\n\t\tif ( _.isEmpty( submittedChanges ) ) {\n\t\t\tdeferred.resolve( {} );\n\t\t\treturn deferred.promise();\n\t\t}\n\n\t\t// Make sure that publishing a changeset waits for all changeset update requests to complete.\n\t\tapi.state( 'processing' ).set( api.state( 'processing' ).get() + 1 );\n\t\tdeferred.always( function() {\n\t\t\tapi.state( 'processing' ).set( api.state( 'processing' ).get() - 1 );\n\t\t} );\n\n\t\t// Allow plugins to attach additional params to the settings.\n\t\tapi.trigger( 'changeset-save', submittedChanges );\n\n\t\t// Ensure that if any plugins add data to save requests by extending query() that they get included here.\n\t\tdata = api.previewer.query( { excludeCustomizedSaved: true } );\n\t\tdelete data.customized; // Being sent in customize_changeset_data instead.\n\t\t_.extend( data, {\n\t\t\tnonce: api.settings.nonce.save,\n\t\t\tcustomize_theme: api.settings.theme.stylesheet,\n\t\t\tcustomize_changeset_data: JSON.stringify( submittedChanges )\n\t\t} );\n\n\t\trequest = wp.ajax.post( 'customize_save', data );\n\n\t\trequest.done( function requestChangesetUpdateDone( data ) {\n\t\t\tvar savedChangesetValues = {};\n\n\t\t\t// Ensure that all settings updated subsequently will be included in the next changeset update request.\n\t\t\tapi._lastSavedRevision = Math.max( api._latestRevision, api._lastSavedRevision );\n\n\t\t\tapi.state( 'changesetStatus' ).set( data.changeset_status );\n\t\t\tdeferred.resolve( data );\n\t\t\tapi.trigger( 'changeset-saved', data );\n\n\t\t\tif ( data.setting_validities ) {\n\t\t\t\t_.each( data.setting_validities, function( validity, settingId ) {\n\t\t\t\t\tif ( true === validity && _.isObject( submittedChanges[ settingId ] ) && ! _.isUndefined( submittedChanges[ settingId ].value ) ) {\n\t\t\t\t\t\tsavedChangesetValues[ settingId ] = submittedChanges[ settingId ].value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tapi.previewer.send( 'changeset-saved', _.extend( {}, data, { saved_changeset_values: savedChangesetValues } ) );\n\t\t} );\n\t\trequest.fail( function requestChangesetUpdateFail( data ) {\n\t\t\tdeferred.reject( data );\n\t\t\tapi.trigger( 'changeset-error', data );\n\t\t} );\n\t\trequest.always( function( data ) {\n\t\t\tif ( data.setting_validities ) {\n\t\t\t\tapi._handleSettingValidities( {\n\t\t\t\t\tsettingValidities: data.setting_validities\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\treturn deferred.promise();\n\t};\n\n\t/**\n\t * Watch all changes to Value properties, and bubble changes to parent Values instance\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {wp.customize.Class} instance\n\t * @param {Array}              properties  The names of the Value instances to watch.\n\t */\n\tapi.utils.bubbleChildValueChanges = function ( instance, properties ) {\n\t\t$.each( properties, function ( i, key ) {\n\t\t\tinstance[ key ].bind( function ( to, from ) {\n\t\t\t\tif ( instance.parent && to !== from ) {\n\t\t\t\t\tinstance.parent.trigger( 'change', instance );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t};\n\n\t/**\n\t * Expand a panel, section, or control and focus on the first focusable element.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {Object}   [params]\n\t * @param {Function} [params.completeCallback]\n\t */\n\tfocus = function ( params ) {\n\t\tvar construct, completeCallback, focus, focusElement;\n\t\tconstruct = this;\n\t\tparams = params || {};\n\t\tfocus = function () {\n\t\t\tvar focusContainer;\n\t\t\tif ( ( construct.extended( api.Panel ) || construct.extended( api.Section ) ) && construct.expanded && construct.expanded() ) {\n\t\t\t\tfocusContainer = construct.contentContainer;\n\t\t\t} else {\n\t\t\t\tfocusContainer = construct.container;\n\t\t\t}\n\n\t\t\tfocusElement = focusContainer.find( '.control-focus:first' );\n\t\t\tif ( 0 === focusElement.length ) {\n\t\t\t\t// Note that we can't use :focusable due to a jQuery UI issue. See: https://github.com/jquery/jquery-ui/pull/1583\n\t\t\t\tfocusElement = focusContainer.find( 'input, select, textarea, button, object, a[href], [tabindex]' ).filter( ':visible' ).first();\n\t\t\t}\n\t\t\tfocusElement.focus();\n\t\t};\n\t\tif ( params.completeCallback ) {\n\t\t\tcompleteCallback = params.completeCallback;\n\t\t\tparams.completeCallback = function () {\n\t\t\t\tfocus();\n\t\t\t\tcompleteCallback();\n\t\t\t};\n\t\t} else {\n\t\t\tparams.completeCallback = focus;\n\t\t}\n\n\t\tapi.state( 'paneVisible' ).set( true );\n\t\tif ( construct.expand ) {\n\t\t\tconstruct.expand( params );\n\t\t} else {\n\t\t\tparams.completeCallback();\n\t\t}\n\t};\n\n\t/**\n\t * Stable sort for Panels, Sections, and Controls.\n\t *\n\t * If a.priority() === b.priority(), then sort by their respective params.instanceNumber.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {(wp.customize.Panel|wp.customize.Section|wp.customize.Control)} a\n\t * @param {(wp.customize.Panel|wp.customize.Section|wp.customize.Control)} b\n\t * @returns {Number}\n\t */\n\tapi.utils.prioritySort = function ( a, b ) {\n\t\tif ( a.priority() === b.priority() && typeof a.params.instanceNumber === 'number' && typeof b.params.instanceNumber === 'number' ) {\n\t\t\treturn a.params.instanceNumber - b.params.instanceNumber;\n\t\t} else {\n\t\t\treturn a.priority() - b.priority();\n\t\t}\n\t};\n\n\t/**\n\t * Return whether the supplied Event object is for a keydown event but not the Enter key.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {jQuery.Event} event\n\t * @returns {boolean}\n\t */\n\tapi.utils.isKeydownButNotEnterEvent = function ( event ) {\n\t\treturn ( 'keydown' === event.type && 13 !== event.which );\n\t};\n\n\t/**\n\t * Return whether the two lists of elements are the same and are in the same order.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {Array|jQuery} listA\n\t * @param {Array|jQuery} listB\n\t * @returns {boolean}\n\t */\n\tapi.utils.areElementListsEqual = function ( listA, listB ) {\n\t\tvar equal = (\n\t\t\tlistA.length === listB.length && // if lists are different lengths, then naturally they are not equal\n\t\t\t-1 === _.indexOf( _.map( // are there any false values in the list returned by map?\n\t\t\t\t_.zip( listA, listB ), // pair up each element between the two lists\n\t\t\t\tfunction ( pair ) {\n\t\t\t\t\treturn $( pair[0] ).is( pair[1] ); // compare to see if each pair are equal\n\t\t\t\t}\n\t\t\t), false ) // check for presence of false in map's return value\n\t\t);\n\t\treturn equal;\n\t};\n\n\t/**\n\t * Return browser supported `transitionend` event name.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @returns {string|null} Normalized `transitionend` event name or null if CSS transitions are not supported.\n\t */\n\tnormalizedTransitionendEventName = (function () {\n\t\tvar el, transitions, prop;\n\t\tel = document.createElement( 'div' );\n\t\ttransitions = {\n\t\t\t'transition'      : 'transitionend',\n\t\t\t'OTransition'     : 'oTransitionEnd',\n\t\t\t'MozTransition'   : 'transitionend',\n\t\t\t'WebkitTransition': 'webkitTransitionEnd'\n\t\t};\n\t\tprop = _.find( _.keys( transitions ), function( prop ) {\n\t\t\treturn ! _.isUndefined( el.style[ prop ] );\n\t\t} );\n\t\tif ( prop ) {\n\t\t\treturn transitions[ prop ];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t})();\n\n\t/**\n\t * Base class for Panel and Section.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @class\n\t * @augments wp.customize.Class\n\t */\n\tContainer = api.Class.extend({\n\t\tdefaultActiveArguments: { duration: 'fast', completeCallback: $.noop },\n\t\tdefaultExpandedArguments: { duration: 'fast', completeCallback: $.noop },\n\t\tcontainerType: 'container',\n\t\tdefaults: {\n\t\t\ttitle: '',\n\t\t\tdescription: '',\n\t\t\tpriority: 100,\n\t\t\ttype: 'default',\n\t\t\tcontent: null,\n\t\t\tactive: true,\n\t\t\tinstanceNumber: null\n\t\t},\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {string}         id - The ID for the container.\n\t\t * @param {object}         options - Object containing one property: params.\n\t\t * @param {object}         options.params - Object containing the following properties.\n\t\t * @param {string}         options.params.title - Title shown when panel is collapsed and expanded.\n\t\t * @param {string=}        [options.params.description] - Description shown at the top of the panel.\n\t\t * @param {number=100}     [options.params.priority] - The sort priority for the panel.\n\t\t * @param {string=default} [options.params.type] - The type of the panel. See wp.customize.panelConstructor.\n\t\t * @param {string=}        [options.params.content] - The markup to be used for the panel container. If empty, a JS template is used.\n\t\t * @param {boolean=true}   [options.params.active] - Whether the panel is active or not.\n\t\t */\n\t\tinitialize: function ( id, options ) {\n\t\t\tvar container = this;\n\t\t\tcontainer.id = id;\n\t\t\toptions = options || {};\n\n\t\t\toptions.params = _.defaults(\n\t\t\t\toptions.params || {},\n\t\t\t\tcontainer.defaults\n\t\t\t);\n\n\t\t\t$.extend( container, options );\n\t\t\tcontainer.templateSelector = 'customize-' + container.containerType + '-' + container.params.type;\n\t\t\tcontainer.container = $( container.params.content );\n\t\t\tif ( 0 === container.container.length ) {\n\t\t\t\tcontainer.container = $( container.getContainer() );\n\t\t\t}\n\t\t\tcontainer.headContainer = container.container;\n\t\t\tcontainer.contentContainer = container.getContent();\n\t\t\tcontainer.container = container.container.add( container.contentContainer );\n\n\t\t\tcontainer.deferred = {\n\t\t\t\tembedded: new $.Deferred()\n\t\t\t};\n\t\t\tcontainer.priority = new api.Value();\n\t\t\tcontainer.active = new api.Value();\n\t\t\tcontainer.activeArgumentsQueue = [];\n\t\t\tcontainer.expanded = new api.Value();\n\t\t\tcontainer.expandedArgumentsQueue = [];\n\n\t\t\tcontainer.active.bind( function ( active ) {\n\t\t\t\tvar args = container.activeArgumentsQueue.shift();\n\t\t\t\targs = $.extend( {}, container.defaultActiveArguments, args );\n\t\t\t\tactive = ( active && container.isContextuallyActive() );\n\t\t\t\tcontainer.onChangeActive( active, args );\n\t\t\t});\n\t\t\tcontainer.expanded.bind( function ( expanded ) {\n\t\t\t\tvar args = container.expandedArgumentsQueue.shift();\n\t\t\t\targs = $.extend( {}, container.defaultExpandedArguments, args );\n\t\t\t\tcontainer.onChangeExpanded( expanded, args );\n\t\t\t});\n\n\t\t\tcontainer.deferred.embedded.done( function () {\n\t\t\t\tcontainer.attachEvents();\n\t\t\t});\n\n\t\t\tapi.utils.bubbleChildValueChanges( container, [ 'priority', 'active' ] );\n\n\t\t\tcontainer.priority.set( container.params.priority );\n\t\t\tcontainer.active.set( container.params.active );\n\t\t\tcontainer.expanded.set( false );\n\t\t},\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @abstract\n\t\t */\n\t\tready: function() {},\n\n\t\t/**\n\t\t * Get the child models associated with this parent, sorting them by their priority Value.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {String} parentType\n\t\t * @param {String} childType\n\t\t * @returns {Array}\n\t\t */\n\t\t_children: function ( parentType, childType ) {\n\t\t\tvar parent = this,\n\t\t\t\tchildren = [];\n\t\t\tapi[ childType ].each( function ( child ) {\n\t\t\t\tif ( child[ parentType ].get() === parent.id ) {\n\t\t\t\t\tchildren.push( child );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tchildren.sort( api.utils.prioritySort );\n\t\t\treturn children;\n\t\t},\n\n\t\t/**\n\t\t * To override by subclass, to return whether the container has active children.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @abstract\n\t\t */\n\t\tisContextuallyActive: function () {\n\t\t\tthrow new Error( 'Container.isContextuallyActive() must be overridden in a subclass.' );\n\t\t},\n\n\t\t/**\n\t\t * Active state change handler.\n\t\t *\n\t\t * Shows the container if it is active, hides it if not.\n\t\t *\n\t\t * To override by subclass, update the container's UI to reflect the provided active state.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {boolean}  active - The active state to transiution to.\n\t\t * @param {Object}   [args] - Args.\n\t\t * @param {Object}   [args.duration] - The duration for the slideUp/slideDown animation.\n\t\t * @param {boolean}  [args.unchanged] - Whether the state is already known to not be changed, and so short-circuit with calling completeCallback early.\n\t\t * @param {Function} [args.completeCallback] - Function to call when the slideUp/slideDown has completed.\n\t\t */\n\t\tonChangeActive: function( active, args ) {\n\t\t\tvar construct = this,\n\t\t\t\theadContainer = construct.headContainer,\n\t\t\t\tduration, expandedOtherPanel;\n\n\t\t\tif ( args.unchanged ) {\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tduration = ( 'resolved' === api.previewer.deferred.active.state() ? args.duration : 0 );\n\n\t\t\tif ( construct.extended( api.Panel ) ) {\n\t\t\t\t// If this is a panel is not currently expanded but another panel is expanded, do not animate.\n\t\t\t\tapi.panel.each(function ( panel ) {\n\t\t\t\t\tif ( panel !== construct && panel.expanded() ) {\n\t\t\t\t\t\texpandedOtherPanel = panel;\n\t\t\t\t\t\tduration = 0;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Collapse any expanded sections inside of this panel first before deactivating.\n\t\t\t\tif ( ! active ) {\n\t\t\t\t\t_.each( construct.sections(), function( section ) {\n\t\t\t\t\t\tsection.collapse( { duration: 0 } );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! $.contains( document, headContainer.get( 0 ) ) ) {\n\t\t\t\t// If the element is not in the DOM, then jQuery.fn.slideUp() does nothing. In this case, a hard toggle is required instead.\n\t\t\t\theadContainer.toggle( active );\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t} else if ( active ) {\n\t\t\t\theadContainer.slideDown( duration, args.completeCallback );\n\t\t\t} else {\n\t\t\t\tif ( construct.expanded() ) {\n\t\t\t\t\tconstruct.collapse({\n\t\t\t\t\t\tduration: duration,\n\t\t\t\t\t\tcompleteCallback: function() {\n\t\t\t\t\t\t\theadContainer.slideUp( duration, args.completeCallback );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\theadContainer.slideUp( duration, args.completeCallback );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @params {Boolean} active\n\t\t * @param {Object}   [params]\n\t\t * @returns {Boolean} false if state already applied\n\t\t */\n\t\t_toggleActive: function ( active, params ) {\n\t\t\tvar self = this;\n\t\t\tparams = params || {};\n\t\t\tif ( ( active && this.active.get() ) || ( ! active && ! this.active.get() ) ) {\n\t\t\t\tparams.unchanged = true;\n\t\t\t\tself.onChangeActive( self.active.get(), params );\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tparams.unchanged = false;\n\t\t\t\tthis.activeArgumentsQueue.push( params );\n\t\t\t\tthis.active.set( active );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already active\n\t\t */\n\t\tactivate: function ( params ) {\n\t\t\treturn this._toggleActive( true, params );\n\t\t},\n\n\t\t/**\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already inactive\n\t\t */\n\t\tdeactivate: function ( params ) {\n\t\t\treturn this._toggleActive( false, params );\n\t\t},\n\n\t\t/**\n\t\t * To override by subclass, update the container's UI to reflect the provided active state.\n\t\t * @abstract\n\t\t */\n\t\tonChangeExpanded: function () {\n\t\t\tthrow new Error( 'Must override with subclass.' );\n\t\t},\n\n\t\t/**\n\t\t * Handle the toggle logic for expand/collapse.\n\t\t *\n\t\t * @param {Boolean}  expanded - The new state to apply.\n\t\t * @param {Object}   [params] - Object containing options for expand/collapse.\n\t\t * @param {Function} [params.completeCallback] - Function to call when expansion/collapse is complete.\n\t\t * @returns {Boolean} false if state already applied or active state is false\n\t\t */\n\t\t_toggleExpanded: function( expanded, params ) {\n\t\t\tvar instance = this, previousCompleteCallback;\n\t\t\tparams = params || {};\n\t\t\tpreviousCompleteCallback = params.completeCallback;\n\n\t\t\t// Short-circuit expand() if the instance is not active.\n\t\t\tif ( expanded && ! instance.active() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tapi.state( 'paneVisible' ).set( true );\n\t\t\tparams.completeCallback = function() {\n\t\t\t\tif ( previousCompleteCallback ) {\n\t\t\t\t\tpreviousCompleteCallback.apply( instance, arguments );\n\t\t\t\t}\n\t\t\t\tif ( expanded ) {\n\t\t\t\t\tinstance.container.trigger( 'expanded' );\n\t\t\t\t} else {\n\t\t\t\t\tinstance.container.trigger( 'collapsed' );\n\t\t\t\t}\n\t\t\t};\n\t\t\tif ( ( expanded && instance.expanded.get() ) || ( ! expanded && ! instance.expanded.get() ) ) {\n\t\t\t\tparams.unchanged = true;\n\t\t\t\tinstance.onChangeExpanded( instance.expanded.get(), params );\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tparams.unchanged = false;\n\t\t\t\tinstance.expandedArgumentsQueue.push( params );\n\t\t\t\tinstance.expanded.set( expanded );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already expanded or if inactive.\n\t\t */\n\t\texpand: function ( params ) {\n\t\t\treturn this._toggleExpanded( true, params );\n\t\t},\n\n\t\t/**\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already collapsed.\n\t\t */\n\t\tcollapse: function ( params ) {\n\t\t\treturn this._toggleExpanded( false, params );\n\t\t},\n\n\t\t/**\n\t\t * Animate container state change if transitions are supported by the browser.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @private\n\t\t *\n\t\t * @param {function} completeCallback Function to be called after transition is completed.\n\t\t * @returns {void}\n\t\t */\n\t\t_animateChangeExpanded: function( completeCallback ) {\n\t\t\t// Return if CSS transitions are not supported.\n\t\t\tif ( ! normalizedTransitionendEventName ) {\n\t\t\t\tif ( completeCallback ) {\n\t\t\t\t\tcompleteCallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar construct = this,\n\t\t\t\tcontent = construct.contentContainer,\n\t\t\t\toverlay = content.closest( '.wp-full-overlay' ),\n\t\t\t\telements, transitionEndCallback, transitionParentPane;\n\n\t\t\t// Determine set of elements that are affected by the animation.\n\t\t\telements = overlay.add( content );\n\n\t\t\tif ( ! construct.panel || '' === construct.panel() ) {\n\t\t\t\ttransitionParentPane = true;\n\t\t\t} else if ( api.panel( construct.panel() ).contentContainer.hasClass( 'skip-transition' ) ) {\n\t\t\t\ttransitionParentPane = true;\n\t\t\t} else {\n\t\t\t\ttransitionParentPane = false;\n\t\t\t}\n\t\t\tif ( transitionParentPane ) {\n\t\t\t\telements = elements.add( '#customize-info, .customize-pane-parent' );\n\t\t\t}\n\n\t\t\t// Handle `transitionEnd` event.\n\t\t\ttransitionEndCallback = function( e ) {\n\t\t\t\tif ( 2 !== e.eventPhase || ! $( e.target ).is( content ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcontent.off( normalizedTransitionendEventName, transitionEndCallback );\n\t\t\t\telements.removeClass( 'busy' );\n\t\t\t\tif ( completeCallback ) {\n\t\t\t\t\tcompleteCallback();\n\t\t\t\t}\n\t\t\t};\n\t\t\tcontent.on( normalizedTransitionendEventName, transitionEndCallback );\n\t\t\telements.addClass( 'busy' );\n\n\t\t\t// Prevent screen flicker when pane has been scrolled before expanding.\n\t\t\t_.defer( function() {\n\t\t\t\tvar container = content.closest( '.wp-full-overlay-sidebar-content' ),\n\t\t\t\t\tcurrentScrollTop = container.scrollTop(),\n\t\t\t\t\tpreviousScrollTop = content.data( 'previous-scrollTop' ) || 0,\n\t\t\t\t\texpanded = construct.expanded();\n\n\t\t\t\tif ( expanded && 0 < currentScrollTop ) {\n\t\t\t\t\tcontent.css( 'top', currentScrollTop + 'px' );\n\t\t\t\t\tcontent.data( 'previous-scrollTop', currentScrollTop );\n\t\t\t\t} else if ( ! expanded && 0 < currentScrollTop + previousScrollTop ) {\n\t\t\t\t\tcontent.css( 'top', previousScrollTop - currentScrollTop + 'px' );\n\t\t\t\t\tcontainer.scrollTop( previousScrollTop );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Bring the container into view and then expand this and bring it into view\n\t\t * @param {Object} [params]\n\t\t */\n\t\tfocus: focus,\n\n\t\t/**\n\t\t * Return the container html, generated from its JS template, if it exists.\n\t\t *\n\t\t * @since 4.3.0\n\t\t */\n\t\tgetContainer: function () {\n\t\t\tvar template,\n\t\t\t\tcontainer = this;\n\n\t\t\tif ( 0 !== $( '#tmpl-' + container.templateSelector ).length ) {\n\t\t\t\ttemplate = wp.template( container.templateSelector );\n\t\t\t} else {\n\t\t\t\ttemplate = wp.template( 'customize-' + container.containerType + '-default' );\n\t\t\t}\n\t\t\tif ( template && container.container ) {\n\t\t\t\treturn $.trim( template( container.params ) );\n\t\t\t}\n\n\t\t\treturn '<li></li>';\n\t\t},\n\n\t\t/**\n\t\t * Find content element which is displayed when the section is expanded.\n\t\t *\n\t\t * After a construct is initialized, the return value will be available via the `contentContainer` property.\n\t\t * By default the element will be related it to the parent container with `aria-owns` and detached.\n\t\t * Custom panels and sections (such as the `NewMenuSection`) that do not have a sliding pane should\n\t\t * just return the content element without needing to add the `aria-owns` element or detach it from\n\t\t * the container. Such non-sliding pane custom sections also need to override the `onChangeExpanded`\n\t\t * method to handle animating the panel/section into and out of view.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access public\n\t\t *\n\t\t * @returns {jQuery} Detached content element.\n\t\t */\n\t\tgetContent: function() {\n\t\t\tvar construct = this,\n\t\t\t\tcontainer = construct.container,\n\t\t\t\tcontent = container.find( '.accordion-section-content, .control-panel-content' ).first(),\n\t\t\t\tcontentId = 'sub-' + container.attr( 'id' ),\n\t\t\t\townedElements = contentId,\n\t\t\t\talreadyOwnedElements = container.attr( 'aria-owns' );\n\n\t\t\tif ( alreadyOwnedElements ) {\n\t\t\t\townedElements = ownedElements + ' ' + alreadyOwnedElements;\n\t\t\t}\n\t\t\tcontainer.attr( 'aria-owns', ownedElements );\n\n\t\t\treturn content.detach().attr( {\n\t\t\t\t'id': contentId,\n\t\t\t\t'class': 'customize-pane-child ' + content.attr( 'class' ) + ' ' + container.attr( 'class' )\n\t\t\t} );\n\t\t}\n\t});\n\n\t/**\n\t * @since 4.1.0\n\t *\n\t * @class\n\t * @augments wp.customize.Class\n\t */\n\tapi.Section = Container.extend({\n\t\tcontainerType: 'section',\n\t\tdefaults: {\n\t\t\ttitle: '',\n\t\t\tdescription: '',\n\t\t\tpriority: 100,\n\t\t\ttype: 'default',\n\t\t\tcontent: null,\n\t\t\tactive: true,\n\t\t\tinstanceNumber: null,\n\t\t\tpanel: null,\n\t\t\tcustomizeAction: ''\n\t\t},\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {string}         id - The ID for the section.\n\t\t * @param {object}         options - Object containing one property: params.\n\t\t * @param {object}         options.params - Object containing the following properties.\n\t\t * @param {string}         options.params.title - Title shown when section is collapsed and expanded.\n\t\t * @param {string=}        [options.params.description] - Description shown at the top of the section.\n\t\t * @param {number=100}     [options.params.priority] - The sort priority for the section.\n\t\t * @param {string=default} [options.params.type] - The type of the section. See wp.customize.sectionConstructor.\n\t\t * @param {string=}        [options.params.content] - The markup to be used for the section container. If empty, a JS template is used.\n\t\t * @param {boolean=true}   [options.params.active] - Whether the section is active or not.\n\t\t * @param {string}         options.params.panel - The ID for the panel this section is associated with.\n\t\t * @param {string=}        [options.params.customizeAction] - Additional context information shown before the section title when expanded.\n\t\t */\n\t\tinitialize: function ( id, options ) {\n\t\t\tvar section = this;\n\t\t\tContainer.prototype.initialize.call( section, id, options );\n\n\t\t\tsection.id = id;\n\t\t\tsection.panel = new api.Value();\n\t\t\tsection.panel.bind( function ( id ) {\n\t\t\t\t$( section.headContainer ).toggleClass( 'control-subsection', !! id );\n\t\t\t});\n\t\t\tsection.panel.set( section.params.panel || '' );\n\t\t\tapi.utils.bubbleChildValueChanges( section, [ 'panel' ] );\n\n\t\t\tsection.embed();\n\t\t\tsection.deferred.embedded.done( function () {\n\t\t\t\tsection.ready();\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Embed the container in the DOM when any parent panel is ready.\n\t\t *\n\t\t * @since 4.1.0\n\t\t */\n\t\tembed: function () {\n\t\t\tvar inject,\n\t\t\t\tsection = this,\n\t\t\t\tcontainer = $( '#customize-theme-controls' );\n\n\t\t\t// Watch for changes to the panel state\n\t\t\tinject = function ( panelId ) {\n\t\t\t\tvar parentContainer;\n\t\t\t\tif ( panelId ) {\n\t\t\t\t\t// The panel has been supplied, so wait until the panel object is registered\n\t\t\t\t\tapi.panel( panelId, function ( panel ) {\n\t\t\t\t\t\t// The panel has been registered, wait for it to become ready/initialized\n\t\t\t\t\t\tpanel.deferred.embedded.done( function () {\n\t\t\t\t\t\t\tparentContainer = panel.contentContainer;\n\t\t\t\t\t\t\tif ( ! section.headContainer.parent().is( parentContainer ) ) {\n\t\t\t\t\t\t\t\tparentContainer.append( section.headContainer );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( ! section.contentContainer.parent().is( section.headContainer ) ) {\n\t\t\t\t\t\t\t\tcontainer.append( section.contentContainer );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsection.deferred.embedded.resolve();\n\t\t\t\t\t\t});\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\t// There is no panel, so embed the section in the root of the customizer\n\t\t\t\t\tparentContainer = $( '.customize-pane-parent' ); // @todo This should be defined elsewhere, and to be configurable\n\t\t\t\t\tif ( ! section.headContainer.parent().is( parentContainer ) ) {\n\t\t\t\t\t\tparentContainer.append( section.headContainer );\n\t\t\t\t\t}\n\t\t\t\t\tif ( ! section.contentContainer.parent().is( section.headContainer ) ) {\n\t\t\t\t\t\tcontainer.append( section.contentContainer );\n\t\t\t\t\t}\n\t\t\t\t\tsection.deferred.embedded.resolve();\n\t\t\t\t}\n\t\t\t};\n\t\t\tsection.panel.bind( inject );\n\t\t\tinject( section.panel.get() ); // Since a section may never get a panel, assume that it won't ever get one\n\t\t},\n\n\t\t/**\n\t\t * Add behaviors for the accordion section.\n\t\t *\n\t\t * @since 4.1.0\n\t\t */\n\t\tattachEvents: function () {\n\t\t\tvar meta, content, section = this;\n\n\t\t\tif ( section.container.hasClass( 'cannot-expand' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Expand/Collapse accordion sections on click.\n\t\t\tsection.container.find( '.accordion-section-title, .customize-section-back' ).on( 'click keydown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tif ( section.expanded() ) {\n\t\t\t\t\tsection.collapse();\n\t\t\t\t} else {\n\t\t\t\t\tsection.expand();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// This is very similar to what is found for api.Panel.attachEvents().\n\t\t\tsection.container.find( '.customize-section-title .customize-help-toggle' ).on( 'click', function() {\n\n\t\t\t\tmeta = section.container.find( '.section-meta' );\n\t\t\t\tif ( meta.hasClass( 'cannot-expand' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcontent = meta.find( '.customize-section-description:first' );\n\t\t\t\tcontent.toggleClass( 'open' );\n\t\t\t\tcontent.slideToggle();\n\t\t\t\tcontent.attr( 'aria-expanded', function ( i, attr ) {\n\t\t\t\t\treturn 'true' === attr ? 'false' : 'true';\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Return whether this section has any active controls.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisContextuallyActive: function () {\n\t\t\tvar section = this,\n\t\t\t\tcontrols = section.controls(),\n\t\t\t\tactiveCount = 0;\n\t\t\t_( controls ).each( function ( control ) {\n\t\t\t\tif ( control.active() ) {\n\t\t\t\t\tactiveCount += 1;\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn ( activeCount !== 0 );\n\t\t},\n\n\t\t/**\n\t\t * Get the controls that are associated with this section, sorted by their priority Value.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @returns {Array}\n\t\t */\n\t\tcontrols: function () {\n\t\t\treturn this._children( 'section', 'control' );\n\t\t},\n\n\t\t/**\n\t\t * Update UI to reflect expanded state.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {Boolean} expanded\n\t\t * @param {Object}  args\n\t\t */\n\t\tonChangeExpanded: function ( expanded, args ) {\n\t\t\tvar section = this,\n\t\t\t\tcontainer = section.headContainer.closest( '.wp-full-overlay-sidebar-content' ),\n\t\t\t\tcontent = section.contentContainer,\n\t\t\t\toverlay = section.headContainer.closest( '.wp-full-overlay' ),\n\t\t\t\tbackBtn = content.find( '.customize-section-back' ),\n\t\t\t\tsectionTitle = section.headContainer.find( '.accordion-section-title' ).first(),\n\t\t\t\texpand, panel;\n\n\t\t\tif ( expanded && ! content.hasClass( 'open' ) ) {\n\n\t\t\t\tif ( args.unchanged ) {\n\t\t\t\t\texpand = args.completeCallback;\n\t\t\t\t} else {\n\t\t\t\t\texpand = $.proxy( function() {\n\t\t\t\t\t\tsection._animateChangeExpanded( function() {\n\t\t\t\t\t\t\tsectionTitle.attr( 'tabindex', '-1' );\n\t\t\t\t\t\t\tbackBtn.attr( 'tabindex', '0' );\n\n\t\t\t\t\t\t\tbackBtn.focus();\n\t\t\t\t\t\t\tcontent.css( 'top', '' );\n\t\t\t\t\t\t\tcontainer.scrollTop( 0 );\n\n\t\t\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tcontent.addClass( 'open' );\n\t\t\t\t\t\toverlay.addClass( 'section-open' );\n\t\t\t\t\t\tapi.state( 'expandedSection' ).set( section );\n\t\t\t\t\t}, this );\n\t\t\t\t}\n\n\t\t\t\tif ( ! args.allowMultiple ) {\n\t\t\t\t\tapi.section.each( function ( otherSection ) {\n\t\t\t\t\t\tif ( otherSection !== section ) {\n\t\t\t\t\t\t\totherSection.collapse( { duration: args.duration } );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif ( section.panel() ) {\n\t\t\t\t\tapi.panel( section.panel() ).expand({\n\t\t\t\t\t\tduration: args.duration,\n\t\t\t\t\t\tcompleteCallback: expand\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tapi.panel.each( function( panel ) {\n\t\t\t\t\t\tpanel.collapse();\n\t\t\t\t\t});\n\t\t\t\t\texpand();\n\t\t\t\t}\n\n\t\t\t} else if ( ! expanded && content.hasClass( 'open' ) ) {\n\t\t\t\tif ( section.panel() ) {\n\t\t\t\t\tpanel = api.panel( section.panel() );\n\t\t\t\t\tif ( panel.contentContainer.hasClass( 'skip-transition' ) ) {\n\t\t\t\t\t\tpanel.collapse();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsection._animateChangeExpanded( function() {\n\t\t\t\t\tbackBtn.attr( 'tabindex', '-1' );\n\t\t\t\t\tsectionTitle.attr( 'tabindex', '0' );\n\n\t\t\t\t\tsectionTitle.focus();\n\t\t\t\t\tcontent.css( 'top', '' );\n\n\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tcontent.removeClass( 'open' );\n\t\t\t\toverlay.removeClass( 'section-open' );\n\t\t\t\tif ( section === api.state( 'expandedSection' ).get() ) {\n\t\t\t\t\tapi.state( 'expandedSection' ).set( false );\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * wp.customize.ThemesSection\n\t *\n\t * Custom section for themes that functions similarly to a backwards panel,\n\t * and also handles the theme-details view rendering and navigation.\n\t *\n\t * @constructor\n\t * @augments wp.customize.Section\n\t * @augments wp.customize.Container\n\t */\n\tapi.ThemesSection = api.Section.extend({\n\t\tcurrentTheme: '',\n\t\toverlay: '',\n\t\ttemplate: '',\n\t\tscreenshotQueue: null,\n\t\t$window: $( window ),\n\n\t\t/**\n\t\t * @since 4.2.0\n\t\t */\n\t\tinitialize: function () {\n\t\t\tthis.$customizeSidebar = $( '.wp-full-overlay-sidebar-content:first' );\n\t\t\treturn api.Section.prototype.initialize.apply( this, arguments );\n\t\t},\n\n\t\t/**\n\t\t * @since 4.2.0\n\t\t */\n\t\tready: function () {\n\t\t\tvar section = this;\n\t\t\tsection.overlay = section.container.find( '.theme-overlay' );\n\t\t\tsection.template = wp.template( 'customize-themes-details-view' );\n\n\t\t\t// Bind global keyboard events.\n\t\t\tsection.container.on( 'keydown', function( event ) {\n\t\t\t\tif ( ! section.overlay.find( '.theme-wrap' ).is( ':visible' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Pressing the right arrow key fires a theme:next event\n\t\t\t\tif ( 39 === event.keyCode ) {\n\t\t\t\t\tsection.nextTheme();\n\t\t\t\t}\n\n\t\t\t\t// Pressing the left arrow key fires a theme:previous event\n\t\t\t\tif ( 37 === event.keyCode ) {\n\t\t\t\t\tsection.previousTheme();\n\t\t\t\t}\n\n\t\t\t\t// Pressing the escape key fires a theme:collapse event\n\t\t\t\tif ( 27 === event.keyCode ) {\n\t\t\t\t\tsection.closeDetails();\n\t\t\t\t\tevent.stopPropagation(); // Prevent section from being collapsed.\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t_.bindAll( this, 'renderScreenshots' );\n\t\t},\n\n\t\t/**\n\t\t * Override Section.isContextuallyActive method.\n\t\t *\n\t\t * Ignore the active states' of the contained theme controls, and just\n\t\t * use the section's own active state instead. This ensures empty search\n\t\t * results for themes to cause the section to become inactive.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisContextuallyActive: function () {\n\t\t\treturn this.active();\n\t\t},\n\n\t\t/**\n\t\t * @since 4.2.0\n\t\t */\n\t\tattachEvents: function () {\n\t\t\tvar section = this;\n\n\t\t\t// Expand/Collapse section/panel.\n\t\t\tsection.container.find( '.change-theme, .customize-theme' ).on( 'click keydown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tif ( section.expanded() ) {\n\t\t\t\t\tsection.collapse();\n\t\t\t\t} else {\n\t\t\t\t\tsection.expand();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Theme navigation in details view.\n\t\t\tsection.container.on( 'click keydown', '.left', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tsection.previousTheme();\n\t\t\t});\n\n\t\t\tsection.container.on( 'click keydown', '.right', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tsection.nextTheme();\n\t\t\t});\n\n\t\t\tsection.container.on( 'click keydown', '.theme-backdrop, .close', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tsection.closeDetails();\n\t\t\t});\n\n\t\t\tvar renderScreenshots = _.throttle( _.bind( section.renderScreenshots, this ), 100 );\n\t\t\tsection.container.on( 'input', '#themes-filter', function( event ) {\n\t\t\t\tvar count,\n\t\t\t\t\tterm = event.currentTarget.value.toLowerCase().trim().replace( '-', ' ' ),\n\t\t\t\t\tcontrols = section.controls();\n\n\t\t\t\t_.each( controls, function( control ) {\n\t\t\t\t\tcontrol.filter( term );\n\t\t\t\t});\n\n\t\t\t\trenderScreenshots();\n\n\t\t\t\t// Update theme count.\n\t\t\t\tcount = section.container.find( 'li.customize-control:visible' ).length;\n\t\t\t\tsection.container.find( '.theme-count' ).text( count );\n\t\t\t});\n\n\t\t\t// Pre-load the first 3 theme screenshots.\n\t\t\tapi.bind( 'ready', function () {\n\t\t\t\t_.each( section.controls().slice( 0, 3 ), function ( control ) {\n\t\t\t\t\tvar img, src = control.params.theme.screenshot[0];\n\t\t\t\t\tif ( src ) {\n\t\t\t\t\t\timg = new Image();\n\t\t\t\t\t\timg.src = src;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Update UI to reflect expanded state\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param {Boolean}  expanded\n\t\t * @param {Object}   args\n\t\t * @param {Boolean}  args.unchanged\n\t\t * @param {Callback} args.completeCallback\n\t\t */\n\t\tonChangeExpanded: function ( expanded, args ) {\n\n\t\t\t// Immediately call the complete callback if there were no changes\n\t\t\tif ( args.unchanged ) {\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Note: there is a second argument 'args' passed\n\t\t\tvar panel = this,\n\t\t\t\tsection = panel.contentContainer,\n\t\t\t\toverlay = section.closest( '.wp-full-overlay' ),\n\t\t\t\tcontainer = section.closest( '.wp-full-overlay-sidebar-content' ),\n\t\t\t\tcustomizeBtn = section.find( '.customize-theme' ),\n\t\t\t\tchangeBtn = panel.headContainer.find( '.change-theme' );\n\n\t\t\tif ( expanded && ! section.hasClass( 'current-panel' ) ) {\n\t\t\t\t// Collapse any sibling sections/panels\n\t\t\t\tapi.section.each( function ( otherSection ) {\n\t\t\t\t\tif ( otherSection !== panel ) {\n\t\t\t\t\t\totherSection.collapse( { duration: args.duration } );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tapi.panel.each( function ( otherPanel ) {\n\t\t\t\t\totherPanel.collapse( { duration: 0 } );\n\t\t\t\t});\n\n\t\t\t\tpanel._animateChangeExpanded( function() {\n\t\t\t\t\tchangeBtn.attr( 'tabindex', '-1' );\n\t\t\t\t\tcustomizeBtn.attr( 'tabindex', '0' );\n\n\t\t\t\t\tcustomizeBtn.focus();\n\t\t\t\t\tsection.css( 'top', '' );\n\t\t\t\t\tcontainer.scrollTop( 0 );\n\n\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\toverlay.addClass( 'in-themes-panel' );\n\t\t\t\tsection.addClass( 'current-panel' );\n\t\t\t\t_.delay( panel.renderScreenshots, 10 ); // Wait for the controls\n\t\t\t\tpanel.$customizeSidebar.on( 'scroll.customize-themes-section', _.throttle( panel.renderScreenshots, 300 ) );\n\n\t\t\t} else if ( ! expanded && section.hasClass( 'current-panel' ) ) {\n\t\t\t\tpanel._animateChangeExpanded( function() {\n\t\t\t\t\tchangeBtn.attr( 'tabindex', '0' );\n\t\t\t\t\tcustomizeBtn.attr( 'tabindex', '-1' );\n\n\t\t\t\t\tchangeBtn.focus();\n\t\t\t\t\tsection.css( 'top', '' );\n\n\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\toverlay.removeClass( 'in-themes-panel' );\n\t\t\t\tsection.removeClass( 'current-panel' );\n\t\t\t\tpanel.$customizeSidebar.off( 'scroll.customize-themes-section' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Render control's screenshot if the control comes into view.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\trenderScreenshots: function( ) {\n\t\t\tvar section = this;\n\n\t\t\t// Fill queue initially.\n\t\t\tif ( section.screenshotQueue === null ) {\n\t\t\t\tsection.screenshotQueue = section.controls();\n\t\t\t}\n\n\t\t\t// Are all screenshots rendered?\n\t\t\tif ( ! section.screenshotQueue.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsection.screenshotQueue = _.filter( section.screenshotQueue, function( control ) {\n\t\t\t\tvar $imageWrapper = control.container.find( '.theme-screenshot' ),\n\t\t\t\t\t$image = $imageWrapper.find( 'img' );\n\n\t\t\t\tif ( ! $image.length ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif ( $image.is( ':hidden' ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Based on unveil.js.\n\t\t\t\tvar wt = section.$window.scrollTop(),\n\t\t\t\t\twb = wt + section.$window.height(),\n\t\t\t\t\tet = $image.offset().top,\n\t\t\t\t\tih = $imageWrapper.height(),\n\t\t\t\t\teb = et + ih,\n\t\t\t\t\tthreshold = ih * 3,\n\t\t\t\t\tinView = eb >= wt - threshold && et <= wb + threshold;\n\n\t\t\t\tif ( inView ) {\n\t\t\t\t\tcontrol.container.trigger( 'render-screenshot' );\n\t\t\t\t}\n\n\t\t\t\t// If the image is in view return false so it's cleared from the queue.\n\t\t\t\treturn ! inView;\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Advance the modal to the next theme.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tnextTheme: function () {\n\t\t\tvar section = this;\n\t\t\tif ( section.getNextTheme() ) {\n\t\t\t\tsection.showDetails( section.getNextTheme(), function() {\n\t\t\t\t\tsection.overlay.find( '.right' ).focus();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Get the next theme model.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tgetNextTheme: function () {\n\t\t\tvar control, next;\n\t\t\tcontrol = api.control( 'theme_' + this.currentTheme );\n\t\t\tnext = control.container.next( 'li.customize-control-theme' );\n\t\t\tif ( ! next.length ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnext = next[0].id.replace( 'customize-control-', '' );\n\t\t\tcontrol = api.control( next );\n\n\t\t\treturn control.params.theme;\n\t\t},\n\n\t\t/**\n\t\t * Advance the modal to the previous theme.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tpreviousTheme: function () {\n\t\t\tvar section = this;\n\t\t\tif ( section.getPreviousTheme() ) {\n\t\t\t\tsection.showDetails( section.getPreviousTheme(), function() {\n\t\t\t\t\tsection.overlay.find( '.left' ).focus();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Get the previous theme model.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tgetPreviousTheme: function () {\n\t\t\tvar control, previous;\n\t\t\tcontrol = api.control( 'theme_' + this.currentTheme );\n\t\t\tprevious = control.container.prev( 'li.customize-control-theme' );\n\t\t\tif ( ! previous.length ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tprevious = previous[0].id.replace( 'customize-control-', '' );\n\t\t\tcontrol = api.control( previous );\n\n\t\t\treturn control.params.theme;\n\t\t},\n\n\t\t/**\n\t\t * Disable buttons when we're viewing the first or last theme.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tupdateLimits: function () {\n\t\t\tif ( ! this.getNextTheme() ) {\n\t\t\t\tthis.overlay.find( '.right' ).addClass( 'disabled' );\n\t\t\t}\n\t\t\tif ( ! this.getPreviousTheme() ) {\n\t\t\t\tthis.overlay.find( '.left' ).addClass( 'disabled' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Load theme preview.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access public\n\t\t *\n\t\t * @param {string} themeId Theme ID.\n\t\t * @returns {jQuery.promise} Promise.\n\t\t */\n\t\tloadThemePreview: function( themeId ) {\n\t\t\tvar deferred = $.Deferred(), onceProcessingComplete, overlay, urlParser;\n\n\t\t\turlParser = document.createElement( 'a' );\n\t\t\turlParser.href = location.href;\n\t\t\turlParser.search = $.param( _.extend(\n\t\t\t\tapi.utils.parseQueryString( urlParser.search.substr( 1 ) ),\n\t\t\t\t{\n\t\t\t\t\ttheme: themeId,\n\t\t\t\t\tchangeset_uuid: api.settings.changeset.uuid\n\t\t\t\t}\n\t\t\t) );\n\n\t\t\toverlay = $( '.wp-full-overlay' );\n\t\t\toverlay.addClass( 'customize-loading' );\n\n\t\t\tonceProcessingComplete = function() {\n\t\t\t\tvar request;\n\t\t\t\tif ( api.state( 'processing' ).get() > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapi.state( 'processing' ).unbind( onceProcessingComplete );\n\n\t\t\t\trequest = api.requestChangesetUpdate();\n\t\t\t\trequest.done( function() {\n\t\t\t\t\t$( window ).off( 'beforeunload.customize-confirm' );\n\t\t\t\t\ttop.location.href = urlParser.href;\n\t\t\t\t\tdeferred.resolve();\n\t\t\t\t} );\n\t\t\t\trequest.fail( function() {\n\t\t\t\t\toverlay.removeClass( 'customize-loading' );\n\t\t\t\t\tdeferred.reject();\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tif ( 0 === api.state( 'processing' ).get() ) {\n\t\t\t\tonceProcessingComplete();\n\t\t\t} else {\n\t\t\t\tapi.state( 'processing' ).bind( onceProcessingComplete );\n\t\t\t}\n\n\t\t\treturn deferred.promise();\n\t\t},\n\n\t\t/**\n\t\t * Render & show the theme details for a given theme model.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param {Object}   theme\n\t\t */\n\t\tshowDetails: function ( theme, callback ) {\n\t\t\tvar section = this, link;\n\t\t\tcallback = callback || function(){};\n\t\t\tsection.currentTheme = theme.id;\n\t\t\tsection.overlay.html( section.template( theme ) )\n\t\t\t\t.fadeIn( 'fast' )\n\t\t\t\t.focus();\n\t\t\t$( 'body' ).addClass( 'modal-open' );\n\t\t\tsection.containFocus( section.overlay );\n\t\t\tsection.updateLimits();\n\n\t\t\tlink = section.overlay.find( '.inactive-theme > a' );\n\n\t\t\tlink.on( 'click', function( event ) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t// Short-circuit if request is currently being made.\n\t\t\t\tif ( link.hasClass( 'disabled' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlink.addClass( 'disabled' );\n\n\t\t\t\tsection.loadThemePreview( theme.id ).fail( function() {\n\t\t\t\t\tlink.removeClass( 'disabled' );\n\t\t\t\t} );\n\t\t\t} );\n\t\t\tcallback();\n\t\t},\n\n\t\t/**\n\t\t * Close the theme details modal.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tcloseDetails: function () {\n\t\t\t$( 'body' ).removeClass( 'modal-open' );\n\t\t\tthis.overlay.fadeOut( 'fast' );\n\t\t\tapi.control( 'theme_' + this.currentTheme ).focus();\n\t\t},\n\n\t\t/**\n\t\t * Keep tab focus within the theme details modal.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tcontainFocus: function( el ) {\n\t\t\tvar tabbables;\n\n\t\t\tel.on( 'keydown', function( event ) {\n\n\t\t\t\t// Return if it's not the tab key\n\t\t\t\t// When navigating with prev/next focus is already handled\n\t\t\t\tif ( 9 !== event.keyCode ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// uses jQuery UI to get the tabbable elements\n\t\t\t\ttabbables = $( ':tabbable', el );\n\n\t\t\t\t// Keep focus within the overlay\n\t\t\t\tif ( tabbables.last()[0] === event.target && ! event.shiftKey ) {\n\t\t\t\t\ttabbables.first().focus();\n\t\t\t\t\treturn false;\n\t\t\t\t} else if ( tabbables.first()[0] === event.target && event.shiftKey ) {\n\t\t\t\t\ttabbables.last().focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * @since 4.1.0\n\t *\n\t * @class\n\t * @augments wp.customize.Class\n\t */\n\tapi.Panel = Container.extend({\n\t\tcontainerType: 'panel',\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {string}         id - The ID for the panel.\n\t\t * @param {object}         options - Object containing one property: params.\n\t\t * @param {object}         options.params - Object containing the following properties.\n\t\t * @param {string}         options.params.title - Title shown when panel is collapsed and expanded.\n\t\t * @param {string=}        [options.params.description] - Description shown at the top of the panel.\n\t\t * @param {number=100}     [options.params.priority] - The sort priority for the panel.\n\t\t * @param {string=default} [options.params.type] - The type of the panel. See wp.customize.panelConstructor.\n\t\t * @param {string=}        [options.params.content] - The markup to be used for the panel container. If empty, a JS template is used.\n\t\t * @param {boolean=true}   [options.params.active] - Whether the panel is active or not.\n\t\t */\n\t\tinitialize: function ( id, options ) {\n\t\t\tvar panel = this;\n\t\t\tContainer.prototype.initialize.call( panel, id, options );\n\t\t\tpanel.embed();\n\t\t\tpanel.deferred.embedded.done( function () {\n\t\t\t\tpanel.ready();\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Embed the container in the DOM when any parent panel is ready.\n\t\t *\n\t\t * @since 4.1.0\n\t\t */\n\t\tembed: function () {\n\t\t\tvar panel = this,\n\t\t\t\tcontainer = $( '#customize-theme-controls' ),\n\t\t\t\tparentContainer = $( '.customize-pane-parent' ); // @todo This should be defined elsewhere, and to be configurable\n\n\t\t\tif ( ! panel.headContainer.parent().is( parentContainer ) ) {\n\t\t\t\tparentContainer.append( panel.headContainer );\n\t\t\t}\n\t\t\tif ( ! panel.contentContainer.parent().is( panel.headContainer ) ) {\n\t\t\t\tcontainer.append( panel.contentContainer );\n\t\t\t\tpanel.renderContent();\n\t\t\t}\n\n\t\t\tpanel.deferred.embedded.resolve();\n\t\t},\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t */\n\t\tattachEvents: function () {\n\t\t\tvar meta, panel = this;\n\n\t\t\t// Expand/Collapse accordion sections on click.\n\t\t\tpanel.headContainer.find( '.accordion-section-title' ).on( 'click keydown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tif ( ! panel.expanded() ) {\n\t\t\t\t\tpanel.expand();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Close panel.\n\t\t\tpanel.container.find( '.customize-panel-back' ).on( 'click keydown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tif ( panel.expanded() ) {\n\t\t\t\t\tpanel.collapse();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmeta = panel.container.find( '.panel-meta:first' );\n\n\t\t\tmeta.find( '> .accordion-section-title .customize-help-toggle' ).on( 'click keydown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tif ( meta.hasClass( 'cannot-expand' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar content = meta.find( '.customize-panel-description:first' );\n\t\t\t\tif ( meta.hasClass( 'open' ) ) {\n\t\t\t\t\tmeta.toggleClass( 'open' );\n\t\t\t\t\tcontent.slideUp( panel.defaultExpandedArguments.duration );\n\t\t\t\t\t$( this ).attr( 'aria-expanded', false );\n\t\t\t\t} else {\n\t\t\t\t\tcontent.slideDown( panel.defaultExpandedArguments.duration );\n\t\t\t\t\tmeta.toggleClass( 'open' );\n\t\t\t\t\t$( this ).attr( 'aria-expanded', true );\n\t\t\t\t}\n\t\t\t});\n\n\t\t},\n\n\t\t/**\n\t\t * Get the sections that are associated with this panel, sorted by their priority Value.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @returns {Array}\n\t\t */\n\t\tsections: function () {\n\t\t\treturn this._children( 'panel', 'section' );\n\t\t},\n\n\t\t/**\n\t\t * Return whether this panel has any active sections.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @returns {boolean}\n\t\t */\n\t\tisContextuallyActive: function () {\n\t\t\tvar panel = this,\n\t\t\t\tsections = panel.sections(),\n\t\t\t\tactiveCount = 0;\n\t\t\t_( sections ).each( function ( section ) {\n\t\t\t\tif ( section.active() && section.isContextuallyActive() ) {\n\t\t\t\t\tactiveCount += 1;\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn ( activeCount !== 0 );\n\t\t},\n\n\t\t/**\n\t\t * Update UI to reflect expanded state\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {Boolean}  expanded\n\t\t * @param {Object}   args\n\t\t * @param {Boolean}  args.unchanged\n\t\t * @param {Function} args.completeCallback\n\t\t */\n\t\tonChangeExpanded: function ( expanded, args ) {\n\n\t\t\t// Immediately call the complete callback if there were no changes\n\t\t\tif ( args.unchanged ) {\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Note: there is a second argument 'args' passed\n\t\t\tvar panel = this,\n\t\t\t\taccordionSection = panel.contentContainer,\n\t\t\t\toverlay = accordionSection.closest( '.wp-full-overlay' ),\n\t\t\t\tcontainer = accordionSection.closest( '.wp-full-overlay-sidebar-content' ),\n\t\t\t\ttopPanel = panel.headContainer.find( '.accordion-section-title' ),\n\t\t\t\tbackBtn = accordionSection.find( '.customize-panel-back' ),\n\t\t\t\tchildSections = panel.sections(),\n\t\t\t\tskipTransition;\n\n\t\t\tif ( expanded && ! accordionSection.hasClass( 'current-panel' ) ) {\n\t\t\t\t// Collapse any sibling sections/panels\n\t\t\t\tapi.section.each( function ( section ) {\n\t\t\t\t\tif ( panel.id !== section.panel() ) {\n\t\t\t\t\t\tsection.collapse( { duration: 0 } );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tapi.panel.each( function ( otherPanel ) {\n\t\t\t\t\tif ( panel !== otherPanel ) {\n\t\t\t\t\t\totherPanel.collapse( { duration: 0 } );\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif ( panel.params.autoExpandSoleSection && 1 === childSections.length && childSections[0].active.get() ) {\n\t\t\t\t\taccordionSection.addClass( 'current-panel skip-transition' );\n\t\t\t\t\toverlay.addClass( 'in-sub-panel' );\n\n\t\t\t\t\tchildSections[0].expand( {\n\t\t\t\t\t\tcompleteCallback: args.completeCallback\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tpanel._animateChangeExpanded( function() {\n\t\t\t\t\t\ttopPanel.attr( 'tabindex', '-1' );\n\t\t\t\t\t\tbackBtn.attr( 'tabindex', '0' );\n\n\t\t\t\t\t\tbackBtn.focus();\n\t\t\t\t\t\taccordionSection.css( 'top', '' );\n\t\t\t\t\t\tcontainer.scrollTop( 0 );\n\n\t\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\taccordionSection.addClass( 'current-panel' );\n\t\t\t\t\toverlay.addClass( 'in-sub-panel' );\n\t\t\t\t}\n\n\t\t\t\tapi.state( 'expandedPanel' ).set( panel );\n\n\t\t\t} else if ( ! expanded && accordionSection.hasClass( 'current-panel' ) ) {\n\t\t\t\tskipTransition = accordionSection.hasClass( 'skip-transition' );\n\t\t\t\tif ( ! skipTransition ) {\n\t\t\t\t\tpanel._animateChangeExpanded( function() {\n\t\t\t\t\t\ttopPanel.attr( 'tabindex', '0' );\n\t\t\t\t\t\tbackBtn.attr( 'tabindex', '-1' );\n\n\t\t\t\t\t\ttopPanel.focus();\n\t\t\t\t\t\taccordionSection.css( 'top', '' );\n\n\t\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\taccordionSection.removeClass( 'skip-transition' );\n\t\t\t\t}\n\n\t\t\t\toverlay.removeClass( 'in-sub-panel' );\n\t\t\t\taccordionSection.removeClass( 'current-panel' );\n\t\t\t\tif ( panel === api.state( 'expandedPanel' ).get() ) {\n\t\t\t\t\tapi.state( 'expandedPanel' ).set( false );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Render the panel from its JS template, if it exists.\n\t\t *\n\t\t * The panel's container must already exist in the DOM.\n\t\t *\n\t\t * @since 4.3.0\n\t\t */\n\t\trenderContent: function () {\n\t\t\tvar template,\n\t\t\t\tpanel = this;\n\n\t\t\t// Add the content to the container.\n\t\t\tif ( 0 !== $( '#tmpl-' + panel.templateSelector + '-content' ).length ) {\n\t\t\t\ttemplate = wp.template( panel.templateSelector + '-content' );\n\t\t\t} else {\n\t\t\t\ttemplate = wp.template( 'customize-panel-default-content' );\n\t\t\t}\n\t\t\tif ( template && panel.headContainer ) {\n\t\t\t\tpanel.contentContainer.html( template( panel.params ) );\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * A Customizer Control.\n\t *\n\t * A control provides a UI element that allows a user to modify a Customizer Setting.\n\t *\n\t * @see PHP class WP_Customize_Control.\n\t *\n\t * @class\n\t * @augments wp.customize.Class\n\t *\n\t * @param {string} id                              Unique identifier for the control instance.\n\t * @param {object} options                         Options hash for the control instance.\n\t * @param {object} options.params\n\t * @param {object} options.params.type             Type of control (e.g. text, radio, dropdown-pages, etc.)\n\t * @param {string} options.params.content          The HTML content for the control.\n\t * @param {string} options.params.priority         Order of priority to show the control within the section.\n\t * @param {string} options.params.active\n\t * @param {string} options.params.section          The ID of the section the control belongs to.\n\t * @param {string} options.params.settings.default The ID of the setting the control relates to.\n\t * @param {string} options.params.settings.data\n\t * @param {string} options.params.label\n\t * @param {string} options.params.description\n\t * @param {string} options.params.instanceNumber Order in which this instance was created in relation to other instances.\n\t */\n\tapi.Control = api.Class.extend({\n\t\tdefaultActiveArguments: { duration: 'fast', completeCallback: $.noop },\n\n\t\tinitialize: function( id, options ) {\n\t\t\tvar control = this,\n\t\t\t\tnodes, radios, settings;\n\n\t\t\tcontrol.params = {};\n\t\t\t$.extend( control, options || {} );\n\t\t\tcontrol.id = id;\n\t\t\tcontrol.selector = '#customize-control-' + id.replace( /\\]/g, '' ).replace( /\\[/g, '-' );\n\t\t\tcontrol.templateSelector = 'customize-control-' + control.params.type + '-content';\n\t\t\tcontrol.container = control.params.content ? $( control.params.content ) : $( control.selector );\n\n\t\t\tcontrol.deferred = {\n\t\t\t\tembedded: new $.Deferred()\n\t\t\t};\n\t\t\tcontrol.section = new api.Value();\n\t\t\tcontrol.priority = new api.Value();\n\t\t\tcontrol.active = new api.Value();\n\t\t\tcontrol.activeArgumentsQueue = [];\n\t\t\tcontrol.notifications = new api.Values({ defaultConstructor: api.Notification });\n\n\t\t\tcontrol.elements = [];\n\n\t\t\tnodes  = control.container.find('[data-customize-setting-link]');\n\t\t\tradios = {};\n\n\t\t\tnodes.each( function() {\n\t\t\t\tvar node = $( this ),\n\t\t\t\t\tname;\n\n\t\t\t\tif ( node.is( ':radio' ) ) {\n\t\t\t\t\tname = node.prop( 'name' );\n\t\t\t\t\tif ( radios[ name ] ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tradios[ name ] = true;\n\t\t\t\t\tnode = nodes.filter( '[name=\"' + name + '\"]' );\n\t\t\t\t}\n\n\t\t\t\tapi( node.data( 'customizeSettingLink' ), function( setting ) {\n\t\t\t\t\tvar element = new api.Element( node );\n\t\t\t\t\tcontrol.elements.push( element );\n\t\t\t\t\telement.sync( setting );\n\t\t\t\t\telement.set( setting() );\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tcontrol.active.bind( function ( active ) {\n\t\t\t\tvar args = control.activeArgumentsQueue.shift();\n\t\t\t\targs = $.extend( {}, control.defaultActiveArguments, args );\n\t\t\t\tcontrol.onChangeActive( active, args );\n\t\t\t} );\n\n\t\t\tcontrol.section.set( control.params.section );\n\t\t\tcontrol.priority.set( isNaN( control.params.priority ) ? 10 : control.params.priority );\n\t\t\tcontrol.active.set( control.params.active );\n\n\t\t\tapi.utils.bubbleChildValueChanges( control, [ 'section', 'priority', 'active' ] );\n\n\t\t\t/*\n\t\t\t * After all settings related to the control are available,\n\t\t\t * make them available on the control and embed the control into the page.\n\t\t\t */\n\t\t\tsettings = $.map( control.params.settings, function( value ) {\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tif ( 0 === settings.length ) {\n\t\t\t\tcontrol.setting = null;\n\t\t\t\tcontrol.settings = {};\n\t\t\t\tcontrol.embed();\n\t\t\t} else {\n\t\t\t\tapi.apply( api, settings.concat( function() {\n\t\t\t\t\tvar key;\n\n\t\t\t\t\tcontrol.settings = {};\n\t\t\t\t\tfor ( key in control.params.settings ) {\n\t\t\t\t\t\tcontrol.settings[ key ] = api( control.params.settings[ key ] );\n\t\t\t\t\t}\n\n\t\t\t\t\tcontrol.setting = control.settings['default'] || null;\n\n\t\t\t\t\t// Add setting notifications to the control notification.\n\t\t\t\t\t_.each( control.settings, function( setting ) {\n\t\t\t\t\t\tsetting.notifications.bind( 'add', function( settingNotification ) {\n\t\t\t\t\t\t\tvar controlNotification, code, params;\n\t\t\t\t\t\t\tcode = setting.id + ':' + settingNotification.code;\n\t\t\t\t\t\t\tparams = _.extend(\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tsettingNotification,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsetting: setting.id\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrolNotification = new api.Notification( code, params );\n\t\t\t\t\t\t\tcontrol.notifications.add( controlNotification.code, controlNotification );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tsetting.notifications.bind( 'remove', function( settingNotification ) {\n\t\t\t\t\t\t\tcontrol.notifications.remove( setting.id + ':' + settingNotification.code );\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\n\t\t\t\t\tcontrol.embed();\n\t\t\t\t}) );\n\t\t\t}\n\n\t\t\t// After the control is embedded on the page, invoke the \"ready\" method.\n\t\t\tcontrol.deferred.embedded.done( function () {\n\t\t\t\t/*\n\t\t\t\t * Note that this debounced/deferred rendering is needed for two reasons:\n\t\t\t\t * 1) The 'remove' event is triggered just _before_ the notification is actually removed.\n\t\t\t\t * 2) Improve performance when adding/removing multiple notifications at a time.\n\t\t\t\t */\n\t\t\t\tvar debouncedRenderNotifications = _.debounce( function renderNotifications() {\n\t\t\t\t\tcontrol.renderNotifications();\n\t\t\t\t} );\n\t\t\t\tcontrol.notifications.bind( 'add', function( notification ) {\n\t\t\t\t\twp.a11y.speak( notification.message, 'assertive' );\n\t\t\t\t\tdebouncedRenderNotifications();\n\t\t\t\t} );\n\t\t\t\tcontrol.notifications.bind( 'remove', debouncedRenderNotifications );\n\t\t\t\tcontrol.renderNotifications();\n\n\t\t\t\tcontrol.ready();\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Embed the control into the page.\n\t\t */\n\t\tembed: function () {\n\t\t\tvar control = this,\n\t\t\t\tinject;\n\n\t\t\t// Watch for changes to the section state\n\t\t\tinject = function ( sectionId ) {\n\t\t\t\tvar parentContainer;\n\t\t\t\tif ( ! sectionId ) { // @todo allow a control to be embedded without a section, for instance a control embedded in the front end.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Wait for the section to be registered\n\t\t\t\tapi.section( sectionId, function ( section ) {\n\t\t\t\t\t// Wait for the section to be ready/initialized\n\t\t\t\t\tsection.deferred.embedded.done( function () {\n\t\t\t\t\t\tparentContainer = ( section.contentContainer.is( 'ul' ) ) ? section.contentContainer : section.contentContainer.find( 'ul:first' );\n\t\t\t\t\t\tif ( ! control.container.parent().is( parentContainer ) ) {\n\t\t\t\t\t\t\tparentContainer.append( control.container );\n\t\t\t\t\t\t\tcontrol.renderContent();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontrol.deferred.embedded.resolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t\tcontrol.section.bind( inject );\n\t\t\tinject( control.section.get() );\n\t\t},\n\n\t\t/**\n\t\t * Triggered when the control's markup has been injected into the DOM.\n\t\t *\n\t\t * @returns {void}\n\t\t */\n\t\tready: function() {\n\t\t\tvar control = this, newItem;\n\t\t\tif ( 'dropdown-pages' === control.params.type && control.params.allow_addition ) {\n\t\t\t\tnewItem = control.container.find( '.new-content-item' );\n\t\t\t\tnewItem.hide(); // Hide in JS to preserve flex display when showing.\n\t\t\t\tcontrol.container.on( 'click', '.add-new-toggle', function( e ) {\n\t\t\t\t\t$( e.currentTarget ).slideUp( 180 );\n\t\t\t\t\tnewItem.slideDown( 180 );\n\t\t\t\t\tnewItem.find( '.create-item-input' ).focus();\n\t\t\t\t});\n\t\t\t\tcontrol.container.on( 'click', '.add-content', function() {\n\t\t\t\t\tcontrol.addNewPage();\n\t\t\t\t});\n\t\t\t\tcontrol.container.on( 'keyup', '.create-item-input', function( e ) {\n\t\t\t\t\tif ( 13 === e.which ) { // Enter\n\t\t\t\t\t\tcontrol.addNewPage();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Get the element inside of a control's container that contains the validation error message.\n\t\t *\n\t\t * Control subclasses may override this to return the proper container to render notifications into.\n\t\t * Injects the notification container for existing controls that lack the necessary container,\n\t\t * including special handling for nav menu items and widgets.\n\t\t *\n\t\t * @since 4.6.0\n\t\t * @returns {jQuery} Setting validation message element.\n\t\t * @this {wp.customize.Control}\n\t\t */\n\t\tgetNotificationsContainerElement: function() {\n\t\t\tvar control = this, controlTitle, notificationsContainer;\n\n\t\t\tnotificationsContainer = control.container.find( '.customize-control-notifications-container:first' );\n\t\t\tif ( notificationsContainer.length ) {\n\t\t\t\treturn notificationsContainer;\n\t\t\t}\n\n\t\t\tnotificationsContainer = $( '<div class=\"customize-control-notifications-container\"></div>' );\n\n\t\t\tif ( control.container.hasClass( 'customize-control-nav_menu_item' ) ) {\n\t\t\t\tcontrol.container.find( '.menu-item-settings:first' ).prepend( notificationsContainer );\n\t\t\t} else if ( control.container.hasClass( 'customize-control-widget_form' ) ) {\n\t\t\t\tcontrol.container.find( '.widget-inside:first' ).prepend( notificationsContainer );\n\t\t\t} else {\n\t\t\t\tcontrolTitle = control.container.find( '.customize-control-title' );\n\t\t\t\tif ( controlTitle.length ) {\n\t\t\t\t\tcontrolTitle.after( notificationsContainer );\n\t\t\t\t} else {\n\t\t\t\t\tcontrol.container.prepend( notificationsContainer );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn notificationsContainer;\n\t\t},\n\n\t\t/**\n\t\t * Render notifications.\n\t\t *\n\t\t * Renders the `control.notifications` into the control's container.\n\t\t * Control subclasses may override this method to do their own handling\n\t\t * of rendering notifications.\n\t\t *\n\t\t * @since 4.6.0\n\t\t * @this {wp.customize.Control}\n\t\t */\n\t\trenderNotifications: function() {\n\t\t\tvar control = this, container, notifications, hasError = false;\n\t\t\tcontainer = control.getNotificationsContainerElement();\n\t\t\tif ( ! container || ! container.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tnotifications = [];\n\t\t\tcontrol.notifications.each( function( notification ) {\n\t\t\t\tnotifications.push( notification );\n\t\t\t\tif ( 'error' === notification.type ) {\n\t\t\t\t\thasError = true;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( 0 === notifications.length ) {\n\t\t\t\tcontainer.stop().slideUp( 'fast' );\n\t\t\t} else {\n\t\t\t\tcontainer.stop().slideDown( 'fast', null, function() {\n\t\t\t\t\t$( this ).css( 'height', 'auto' );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( ! control.notificationsTemplate ) {\n\t\t\t\tcontrol.notificationsTemplate = wp.template( 'customize-control-notifications' );\n\t\t\t}\n\n\t\t\tcontrol.container.toggleClass( 'has-notifications', 0 !== notifications.length );\n\t\t\tcontrol.container.toggleClass( 'has-error', hasError );\n\t\t\tcontainer.empty().append( $.trim(\n\t\t\t\tcontrol.notificationsTemplate( { notifications: notifications, altNotice: Boolean( control.altNotice ) } )\n\t\t\t) );\n\t\t},\n\n\t\t/**\n\t\t * Normal controls do not expand, so just expand its parent\n\t\t *\n\t\t * @param {Object} [params]\n\t\t */\n\t\texpand: function ( params ) {\n\t\t\tapi.section( this.section() ).expand( params );\n\t\t},\n\n\t\t/**\n\t\t * Bring the containing section and panel into view and then\n\t\t * this control into view, focusing on the first input.\n\t\t */\n\t\tfocus: focus,\n\n\t\t/**\n\t\t * Update UI in response to a change in the control's active state.\n\t\t * This does not change the active state, it merely handles the behavior\n\t\t * for when it does change.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {Boolean}  active\n\t\t * @param {Object}   args\n\t\t * @param {Number}   args.duration\n\t\t * @param {Callback} args.completeCallback\n\t\t */\n\t\tonChangeActive: function ( active, args ) {\n\t\t\tif ( args.unchanged ) {\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ! $.contains( document, this.container[0] ) ) {\n\t\t\t\t// jQuery.fn.slideUp is not hiding an element if it is not in the DOM\n\t\t\t\tthis.container.toggle( active );\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t} else if ( active ) {\n\t\t\t\tthis.container.slideDown( args.duration, args.completeCallback );\n\t\t\t} else {\n\t\t\t\tthis.container.slideUp( args.duration, args.completeCallback );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @deprecated 4.1.0 Use this.onChangeActive() instead.\n\t\t */\n\t\ttoggle: function ( active ) {\n\t\t\treturn this.onChangeActive( active, this.defaultActiveArguments );\n\t\t},\n\n\t\t/**\n\t\t * Shorthand way to enable the active state.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already active\n\t\t */\n\t\tactivate: Container.prototype.activate,\n\n\t\t/**\n\t\t * Shorthand way to disable the active state.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already inactive\n\t\t */\n\t\tdeactivate: Container.prototype.deactivate,\n\n\t\t/**\n\t\t * Re-use _toggleActive from Container class.\n\t\t *\n\t\t * @access private\n\t\t */\n\t\t_toggleActive: Container.prototype._toggleActive,\n\n\t\tdropdownInit: function() {\n\t\t\tvar control      = this,\n\t\t\t\tstatuses     = this.container.find('.dropdown-status'),\n\t\t\t\tparams       = this.params,\n\t\t\t\ttoggleFreeze = false,\n\t\t\t\tupdate       = function( to ) {\n\t\t\t\t\tif ( typeof to === 'string' && params.statuses && params.statuses[ to ] )\n\t\t\t\t\t\tstatuses.html( params.statuses[ to ] ).show();\n\t\t\t\t\telse\n\t\t\t\t\t\tstatuses.hide();\n\t\t\t\t};\n\n\t\t\t// Support the .dropdown class to open/close complex elements\n\t\t\tthis.container.on( 'click keydown', '.dropdown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tif (!toggleFreeze)\n\t\t\t\t\tcontrol.container.toggleClass('open');\n\n\t\t\t\tif ( control.container.hasClass('open') )\n\t\t\t\t\tcontrol.container.parent().parent().find('li.library-selected').focus();\n\n\t\t\t\t// Don't want to fire focus and click at same time\n\t\t\t\ttoggleFreeze = true;\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\ttoggleFreeze = false;\n\t\t\t\t}, 400);\n\t\t\t});\n\n\t\t\tthis.setting.bind( update );\n\t\t\tupdate( this.setting() );\n\t\t},\n\n\t\t/**\n\t\t * Render the control from its JS template, if it exists.\n\t\t *\n\t\t * The control's container must already exist in the DOM.\n\t\t *\n\t\t * @since 4.1.0\n\t\t */\n\t\trenderContent: function () {\n\t\t\tvar template,\n\t\t\t\tcontrol = this;\n\n\t\t\t// Replace the container element's content with the control.\n\t\t\tif ( 0 !== $( '#tmpl-' + control.templateSelector ).length ) {\n\t\t\t\ttemplate = wp.template( control.templateSelector );\n\t\t\t\tif ( template && control.container ) {\n\t\t\t\t\tcontrol.container.html( template( control.params ) );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add a new page to a dropdown-pages control reusing menus code for this.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access private\n\t\t * @returns {void}\n\t\t */\n\t\taddNewPage: function () {\n\t\t\tvar control = this, promise, toggle, container, input, title, select;\n\n\t\t\tif ( 'dropdown-pages' !== control.params.type || ! control.params.allow_addition || ! api.Menus ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttoggle = control.container.find( '.add-new-toggle' );\n\t\t\tcontainer = control.container.find( '.new-content-item' );\n\t\t\tinput = control.container.find( '.create-item-input' );\n\t\t\ttitle = input.val();\n\t\t\tselect = control.container.find( 'select' );\n\n\t\t\tif ( ! title ) {\n\t\t\t\tinput.addClass( 'invalid' );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tinput.removeClass( 'invalid' );\n\t\t\tinput.attr( 'disabled', 'disabled' );\n\n\t\t\t// The menus functions add the page, publish when appropriate, and also add the new page to the dropdown-pages controls.\n\t\t\tpromise = api.Menus.insertAutoDraftPost( {\n\t\t\t\tpost_title: title,\n\t\t\t\tpost_type: 'page'\n\t\t\t} );\n\t\t\tpromise.done( function( data ) {\n\t\t\t\tvar availableItem, $content, itemTemplate;\n\n\t\t\t\t// Prepare the new page as an available menu item.\n\t\t\t\t// See api.Menus.submitNew().\n\t\t\t\tavailableItem = new api.Menus.AvailableItemModel( {\n\t\t\t\t\t'id': 'post-' + data.post_id, // Used for available menu item Backbone models.\n\t\t\t\t\t'title': title,\n\t\t\t\t\t'type': 'post_type',\n\t\t\t\t\t'type_label': api.Menus.data.l10n.page_label,\n\t\t\t\t\t'object': 'page',\n\t\t\t\t\t'object_id': data.post_id,\n\t\t\t\t\t'url': data.url\n\t\t\t\t} );\n\n\t\t\t\t// Add the new item to the list of available menu items.\n\t\t\t\tapi.Menus.availableMenuItemsPanel.collection.add( availableItem );\n\t\t\t\t$content = $( '#available-menu-items-post_type-page' ).find( '.available-menu-items-list' );\n\t\t\t\titemTemplate = wp.template( 'available-menu-item' );\n\t\t\t\t$content.prepend( itemTemplate( availableItem.attributes ) );\n\n\t\t\t\t// Focus the select control.\n\t\t\t\tselect.focus();\n\t\t\t\tcontrol.setting.set( String( data.post_id ) ); // Triggers a preview refresh and updates the setting.\n\n\t\t\t\t// Reset the create page form.\n\t\t\t\tcontainer.slideUp( 180 );\n\t\t\t\ttoggle.slideDown( 180 );\n\t\t\t} );\n\t\t\tpromise.always( function() {\n\t\t\t\tinput.val( '' ).removeAttr( 'disabled' );\n\t\t\t} );\n\t\t}\n\t});\n\n\t/**\n\t * A colorpicker control.\n\t *\n\t * @class\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.ColorControl = api.Control.extend({\n\t\tready: function() {\n\t\t\tvar control = this,\n\t\t\t\tisHueSlider = this.params.mode === 'hue',\n\t\t\t\tupdating = false,\n\t\t\t\tpicker;\n\n\t\t\tif ( isHueSlider ) {\n\t\t\t\tpicker = this.container.find( '.color-picker-hue' );\n\t\t\t\tpicker.val( control.setting() ).wpColorPicker({\n\t\t\t\t\tchange: function( event, ui ) {\n\t\t\t\t\t\tupdating = true;\n\t\t\t\t\t\tcontrol.setting( ui.color.h() );\n\t\t\t\t\t\tupdating = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpicker = this.container.find( '.color-picker-hex' );\n\t\t\t\tpicker.val( control.setting() ).wpColorPicker({\n\t\t\t\t\tchange: function() {\n\t\t\t\t\t\tupdating = true;\n\t\t\t\t\t\tcontrol.setting.set( picker.wpColorPicker( 'color' ) );\n\t\t\t\t\t\tupdating = false;\n\t\t\t\t\t},\n\t\t\t\t\tclear: function() {\n\t\t\t\t\t\tupdating = true;\n\t\t\t\t\t\tcontrol.setting.set( '' );\n\t\t\t\t\t\tupdating = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tcontrol.setting.bind( function ( value ) {\n\t\t\t\t// Bail if the update came from the control itself.\n\t\t\t\tif ( updating ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tpicker.val( value );\n\t\t\t\tpicker.wpColorPicker( 'color', value );\n\t\t\t} );\n\n\t\t\t// Collapse color picker when hitting Esc instead of collapsing the current section.\n\t\t\tcontrol.container.on( 'keydown', function( event ) {\n\t\t\t\tvar pickerContainer;\n\t\t\t\tif ( 27 !== event.which ) { // Esc.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tpickerContainer = control.container.find( '.wp-picker-container' );\n\t\t\t\tif ( pickerContainer.hasClass( 'wp-picker-active' ) ) {\n\t\t\t\t\tpicker.wpColorPicker( 'close' );\n\t\t\t\t\tcontrol.container.find( '.wp-color-result' ).focus();\n\t\t\t\t\tevent.stopPropagation(); // Prevent section from being collapsed.\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t});\n\n\t/**\n\t * A control that implements the media modal.\n\t *\n\t * @class\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.MediaControl = api.Control.extend({\n\n\t\t/**\n\t\t * When the control's DOM structure is ready,\n\t\t * set up internal event bindings.\n\t\t */\n\t\tready: function() {\n\t\t\tvar control = this;\n\t\t\t// Shortcut so that we don't have to use _.bind every time we add a callback.\n\t\t\t_.bindAll( control, 'restoreDefault', 'removeFile', 'openFrame', 'select', 'pausePlayer' );\n\n\t\t\t// Bind events, with delegation to facilitate re-rendering.\n\t\t\tcontrol.container.on( 'click keydown', '.upload-button', control.openFrame );\n\t\t\tcontrol.container.on( 'click keydown', '.upload-button', control.pausePlayer );\n\t\t\tcontrol.container.on( 'click keydown', '.thumbnail-image img', control.openFrame );\n\t\t\tcontrol.container.on( 'click keydown', '.default-button', control.restoreDefault );\n\t\t\tcontrol.container.on( 'click keydown', '.remove-button', control.pausePlayer );\n\t\t\tcontrol.container.on( 'click keydown', '.remove-button', control.removeFile );\n\t\t\tcontrol.container.on( 'click keydown', '.remove-button', control.cleanupPlayer );\n\n\t\t\t// Resize the player controls when it becomes visible (ie when section is expanded)\n\t\t\tapi.section( control.section() ).container\n\t\t\t\t.on( 'expanded', function() {\n\t\t\t\t\tif ( control.player ) {\n\t\t\t\t\t\tcontrol.player.setControlsSize();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.on( 'collapsed', function() {\n\t\t\t\t\tcontrol.pausePlayer();\n\t\t\t\t});\n\n\t\t\t/**\n\t\t\t * Set attachment data and render content.\n\t\t\t *\n\t\t\t * Note that BackgroundImage.prototype.ready applies this ready method\n\t\t\t * to itself. Since BackgroundImage is an UploadControl, the value\n\t\t\t * is the attachment URL instead of the attachment ID. In this case\n\t\t\t * we skip fetching the attachment data because we have no ID available,\n\t\t\t * and it is the responsibility of the UploadControl to set the control's\n\t\t\t * attachmentData before calling the renderContent method.\n\t\t\t *\n\t\t\t * @param {number|string} value Attachment\n\t\t\t */\n\t\t\tfunction setAttachmentDataAndRenderContent( value ) {\n\t\t\t\tvar hasAttachmentData = $.Deferred();\n\n\t\t\t\tif ( control.extended( api.UploadControl ) ) {\n\t\t\t\t\thasAttachmentData.resolve();\n\t\t\t\t} else {\n\t\t\t\t\tvalue = parseInt( value, 10 );\n\t\t\t\t\tif ( _.isNaN( value ) || value <= 0 ) {\n\t\t\t\t\t\tdelete control.params.attachment;\n\t\t\t\t\t\thasAttachmentData.resolve();\n\t\t\t\t\t} else if ( control.params.attachment && control.params.attachment.id === value ) {\n\t\t\t\t\t\thasAttachmentData.resolve();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Fetch the attachment data.\n\t\t\t\tif ( 'pending' === hasAttachmentData.state() ) {\n\t\t\t\t\twp.media.attachment( value ).fetch().done( function() {\n\t\t\t\t\t\tcontrol.params.attachment = this.attributes;\n\t\t\t\t\t\thasAttachmentData.resolve();\n\n\t\t\t\t\t\t// Send attachment information to the preview for possible use in `postMessage` transport.\n\t\t\t\t\t\twp.customize.previewer.send( control.setting.id + '-attachment-data', this.attributes );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\thasAttachmentData.done( function() {\n\t\t\t\t\tcontrol.renderContent();\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Ensure attachment data is initially set (for dynamically-instantiated controls).\n\t\t\tsetAttachmentDataAndRenderContent( control.setting() );\n\n\t\t\t// Update the attachment data and re-render the control when the setting changes.\n\t\t\tcontrol.setting.bind( setAttachmentDataAndRenderContent );\n\t\t},\n\n\t\tpausePlayer: function () {\n\t\t\tthis.player && this.player.pause();\n\t\t},\n\n\t\tcleanupPlayer: function () {\n\t\t\tthis.player && wp.media.mixin.removePlayer( this.player );\n\t\t},\n\n\t\t/**\n\t\t * Open the media modal.\n\t\t */\n\t\topenFrame: function( event ) {\n\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( ! this.frame ) {\n\t\t\t\tthis.initFrame();\n\t\t\t}\n\n\t\t\tthis.frame.open();\n\t\t},\n\n\t\t/**\n\t\t * Create a media modal select frame, and store it so the instance can be reused when needed.\n\t\t */\n\t\tinitFrame: function() {\n\t\t\tthis.frame = wp.media({\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: this.params.button_labels.frame_button\n\t\t\t\t},\n\t\t\t\tstates: [\n\t\t\t\t\tnew wp.media.controller.Library({\n\t\t\t\t\t\ttitle:     this.params.button_labels.frame_title,\n\t\t\t\t\t\tlibrary:   wp.media.query({ type: this.params.mime_type }),\n\t\t\t\t\t\tmultiple:  false,\n\t\t\t\t\t\tdate:      false\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\n\t\t\t// When a file is selected, run a callback.\n\t\t\tthis.frame.on( 'select', this.select );\n\t\t},\n\n\t\t/**\n\t\t * Callback handler for when an attachment is selected in the media modal.\n\t\t * Gets the selected image information, and sets it within the control.\n\t\t */\n\t\tselect: function() {\n\t\t\t// Get the attachment from the modal frame.\n\t\t\tvar node,\n\t\t\t\tattachment = this.frame.state().get( 'selection' ).first().toJSON(),\n\t\t\t\tmejsSettings = window._wpmejsSettings || {};\n\n\t\t\tthis.params.attachment = attachment;\n\n\t\t\t// Set the Customizer setting; the callback takes care of rendering.\n\t\t\tthis.setting( attachment.id );\n\t\t\tnode = this.container.find( 'audio, video' ).get(0);\n\n\t\t\t// Initialize audio/video previews.\n\t\t\tif ( node ) {\n\t\t\t\tthis.player = new MediaElementPlayer( node, mejsSettings );\n\t\t\t} else {\n\t\t\t\tthis.cleanupPlayer();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Reset the setting to the default value.\n\t\t */\n\t\trestoreDefault: function( event ) {\n\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.params.attachment = this.params.defaultAttachment;\n\t\t\tthis.setting( this.params.defaultAttachment.url );\n\t\t},\n\n\t\t/**\n\t\t * Called when the \"Remove\" link is clicked. Empties the setting.\n\t\t *\n\t\t * @param {object} event jQuery Event object\n\t\t */\n\t\tremoveFile: function( event ) {\n\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.params.attachment = {};\n\t\t\tthis.setting( '' );\n\t\t\tthis.renderContent(); // Not bound to setting change when emptying.\n\t\t}\n\t});\n\n\t/**\n\t * An upload control, which utilizes the media modal.\n\t *\n\t * @class\n\t * @augments wp.customize.MediaControl\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.UploadControl = api.MediaControl.extend({\n\n\t\t/**\n\t\t * Callback handler for when an attachment is selected in the media modal.\n\t\t * Gets the selected image information, and sets it within the control.\n\t\t */\n\t\tselect: function() {\n\t\t\t// Get the attachment from the modal frame.\n\t\t\tvar node,\n\t\t\t\tattachment = this.frame.state().get( 'selection' ).first().toJSON(),\n\t\t\t\tmejsSettings = window._wpmejsSettings || {};\n\n\t\t\tthis.params.attachment = attachment;\n\n\t\t\t// Set the Customizer setting; the callback takes care of rendering.\n\t\t\tthis.setting( attachment.url );\n\t\t\tnode = this.container.find( 'audio, video' ).get(0);\n\n\t\t\t// Initialize audio/video previews.\n\t\t\tif ( node ) {\n\t\t\t\tthis.player = new MediaElementPlayer( node, mejsSettings );\n\t\t\t} else {\n\t\t\t\tthis.cleanupPlayer();\n\t\t\t}\n\t\t},\n\n\t\t// @deprecated\n\t\tsuccess: function() {},\n\n\t\t// @deprecated\n\t\tremoverVisibility: function() {}\n\t});\n\n\t/**\n\t * A control for uploading images.\n\t *\n\t * This control no longer needs to do anything more\n\t * than what the upload control does in JS.\n\t *\n\t * @class\n\t * @augments wp.customize.UploadControl\n\t * @augments wp.customize.MediaControl\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.ImageControl = api.UploadControl.extend({\n\t\t// @deprecated\n\t\tthumbnailSrc: function() {}\n\t});\n\n\t/**\n\t * A control for uploading background images.\n\t *\n\t * @class\n\t * @augments wp.customize.UploadControl\n\t * @augments wp.customize.MediaControl\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.BackgroundControl = api.UploadControl.extend({\n\n\t\t/**\n\t\t * When the control's DOM structure is ready,\n\t\t * set up internal event bindings.\n\t\t */\n\t\tready: function() {\n\t\t\tapi.UploadControl.prototype.ready.apply( this, arguments );\n\t\t},\n\n\t\t/**\n\t\t * Callback handler for when an attachment is selected in the media modal.\n\t\t * Does an additional AJAX request for setting the background context.\n\t\t */\n\t\tselect: function() {\n\t\t\tapi.UploadControl.prototype.select.apply( this, arguments );\n\n\t\t\twp.ajax.post( 'custom-background-add', {\n\t\t\t\tnonce: _wpCustomizeBackground.nonces.add,\n\t\t\t\twp_customize: 'on',\n\t\t\t\tcustomize_theme: api.settings.theme.stylesheet,\n\t\t\t\tattachment_id: this.params.attachment.id\n\t\t\t} );\n\t\t}\n\t});\n\n\t/**\n\t * A control for positioning a background image.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @class\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.BackgroundPositionControl = api.Control.extend( {\n\n\t\t/**\n\t\t * Set up control UI once embedded in DOM and settings are created.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access public\n\t\t */\n\t\tready: function() {\n\t\t\tvar control = this, updateRadios;\n\n\t\t\tcontrol.container.on( 'change', 'input[name=\"background-position\"]', function() {\n\t\t\t\tvar position = $( this ).val().split( ' ' );\n\t\t\t\tcontrol.settings.x( position[0] );\n\t\t\t\tcontrol.settings.y( position[1] );\n\t\t\t} );\n\n\t\t\tupdateRadios = _.debounce( function() {\n\t\t\t\tvar x, y, radioInput, inputValue;\n\t\t\t\tx = control.settings.x.get();\n\t\t\t\ty = control.settings.y.get();\n\t\t\t\tinputValue = String( x ) + ' ' + String( y );\n\t\t\t\tradioInput = control.container.find( 'input[name=\"background-position\"][value=\"' + inputValue + '\"]' );\n\t\t\t\tradioInput.click();\n\t\t\t} );\n\t\t\tcontrol.settings.x.bind( updateRadios );\n\t\t\tcontrol.settings.y.bind( updateRadios );\n\n\t\t\tupdateRadios(); // Set initial UI.\n\t\t}\n\t} );\n\n\t/**\n\t * A control for selecting and cropping an image.\n\t *\n\t * @class\n\t * @augments wp.customize.MediaControl\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.CroppedImageControl = api.MediaControl.extend({\n\n\t\t/**\n\t\t * Open the media modal to the library state.\n\t\t */\n\t\topenFrame: function( event ) {\n\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.initFrame();\n\t\t\tthis.frame.setState( 'library' ).open();\n\t\t},\n\n\t\t/**\n\t\t * Create a media modal select frame, and store it so the instance can be reused when needed.\n\t\t */\n\t\tinitFrame: function() {\n\t\t\tvar l10n = _wpMediaViewsL10n;\n\n\t\t\tthis.frame = wp.media({\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: l10n.select,\n\t\t\t\t\tclose: false\n\t\t\t\t},\n\t\t\t\tstates: [\n\t\t\t\t\tnew wp.media.controller.Library({\n\t\t\t\t\t\ttitle: this.params.button_labels.frame_title,\n\t\t\t\t\t\tlibrary: wp.media.query({ type: 'image' }),\n\t\t\t\t\t\tmultiple: false,\n\t\t\t\t\t\tdate: false,\n\t\t\t\t\t\tpriority: 20,\n\t\t\t\t\t\tsuggestedWidth: this.params.width,\n\t\t\t\t\t\tsuggestedHeight: this.params.height\n\t\t\t\t\t}),\n\t\t\t\t\tnew wp.media.controller.CustomizeImageCropper({\n\t\t\t\t\t\timgSelectOptions: this.calculateImageSelectOptions,\n\t\t\t\t\t\tcontrol: this\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tthis.frame.on( 'select', this.onSelect, this );\n\t\t\tthis.frame.on( 'cropped', this.onCropped, this );\n\t\t\tthis.frame.on( 'skippedcrop', this.onSkippedCrop, this );\n\t\t},\n\n\t\t/**\n\t\t * After an image is selected in the media modal, switch to the cropper\n\t\t * state if the image isn't the right size.\n\t\t */\n\t\tonSelect: function() {\n\t\t\tvar attachment = this.frame.state().get( 'selection' ).first().toJSON();\n\n\t\t\tif ( this.params.width === attachment.width && this.params.height === attachment.height && ! this.params.flex_width && ! this.params.flex_height ) {\n\t\t\t\tthis.setImageFromAttachment( attachment );\n\t\t\t\tthis.frame.close();\n\t\t\t} else {\n\t\t\t\tthis.frame.setState( 'cropper' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * After the image has been cropped, apply the cropped image data to the setting.\n\t\t *\n\t\t * @param {object} croppedImage Cropped attachment data.\n\t\t */\n\t\tonCropped: function( croppedImage ) {\n\t\t\tthis.setImageFromAttachment( croppedImage );\n\t\t},\n\n\t\t/**\n\t\t * Returns a set of options, computed from the attached image data and\n\t\t * control-specific data, to be fed to the imgAreaSelect plugin in\n\t\t * wp.media.view.Cropper.\n\t\t *\n\t\t * @param {wp.media.model.Attachment} attachment\n\t\t * @param {wp.media.controller.Cropper} controller\n\t\t * @returns {Object} Options\n\t\t */\n\t\tcalculateImageSelectOptions: function( attachment, controller ) {\n\t\t\tvar control    = controller.get( 'control' ),\n\t\t\t\tflexWidth  = !! parseInt( control.params.flex_width, 10 ),\n\t\t\t\tflexHeight = !! parseInt( control.params.flex_height, 10 ),\n\t\t\t\trealWidth  = attachment.get( 'width' ),\n\t\t\t\trealHeight = attachment.get( 'height' ),\n\t\t\t\txInit = parseInt( control.params.width, 10 ),\n\t\t\t\tyInit = parseInt( control.params.height, 10 ),\n\t\t\t\tratio = xInit / yInit,\n\t\t\t\txImg  = xInit,\n\t\t\t\tyImg  = yInit,\n\t\t\t\tx1, y1, imgSelectOptions;\n\n\t\t\tcontroller.set( 'canSkipCrop', ! control.mustBeCropped( flexWidth, flexHeight, xInit, yInit, realWidth, realHeight ) );\n\n\t\t\tif ( realWidth / realHeight > ratio ) {\n\t\t\t\tyInit = realHeight;\n\t\t\t\txInit = yInit * ratio;\n\t\t\t} else {\n\t\t\t\txInit = realWidth;\n\t\t\t\tyInit = xInit / ratio;\n\t\t\t}\n\n\t\t\tx1 = ( realWidth - xInit ) / 2;\n\t\t\ty1 = ( realHeight - yInit ) / 2;\n\n\t\t\timgSelectOptions = {\n\t\t\t\thandles: true,\n\t\t\t\tkeys: true,\n\t\t\t\tinstance: true,\n\t\t\t\tpersistent: true,\n\t\t\t\timageWidth: realWidth,\n\t\t\t\timageHeight: realHeight,\n\t\t\t\tminWidth: xImg > xInit ? xInit : xImg,\n\t\t\t\tminHeight: yImg > yInit ? yInit : yImg,\n\t\t\t\tx1: x1,\n\t\t\t\ty1: y1,\n\t\t\t\tx2: xInit + x1,\n\t\t\t\ty2: yInit + y1\n\t\t\t};\n\n\t\t\tif ( flexHeight === false && flexWidth === false ) {\n\t\t\t\timgSelectOptions.aspectRatio = xInit + ':' + yInit;\n\t\t\t}\n\n\t\t\tif ( true === flexHeight ) {\n\t\t\t\tdelete imgSelectOptions.minHeight;\n\t\t\t\timgSelectOptions.maxWidth = realWidth;\n\t\t\t}\n\n\t\t\tif ( true === flexWidth ) {\n\t\t\t\tdelete imgSelectOptions.minWidth;\n\t\t\t\timgSelectOptions.maxHeight = realHeight;\n\t\t\t}\n\n\t\t\treturn imgSelectOptions;\n\t\t},\n\n\t\t/**\n\t\t * Return whether the image must be cropped, based on required dimensions.\n\t\t *\n\t\t * @param {bool} flexW\n\t\t * @param {bool} flexH\n\t\t * @param {int}  dstW\n\t\t * @param {int}  dstH\n\t\t * @param {int}  imgW\n\t\t * @param {int}  imgH\n\t\t * @return {bool}\n\t\t */\n\t\tmustBeCropped: function( flexW, flexH, dstW, dstH, imgW, imgH ) {\n\t\t\tif ( true === flexW && true === flexH ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( true === flexW && dstH === imgH ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( true === flexH && dstW === imgW ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( dstW === imgW && dstH === imgH ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( imgW <= dstW ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\t * If cropping was skipped, apply the image data directly to the setting.\n\t\t */\n\t\tonSkippedCrop: function() {\n\t\t\tvar attachment = this.frame.state().get( 'selection' ).first().toJSON();\n\t\t\tthis.setImageFromAttachment( attachment );\n\t\t},\n\n\t\t/**\n\t\t * Updates the setting and re-renders the control UI.\n\t\t *\n\t\t * @param {object} attachment\n\t\t */\n\t\tsetImageFromAttachment: function( attachment ) {\n\t\t\tthis.params.attachment = attachment;\n\n\t\t\t// Set the Customizer setting; the callback takes care of rendering.\n\t\t\tthis.setting( attachment.id );\n\t\t}\n\t});\n\n\t/**\n\t * A control for selecting and cropping Site Icons.\n\t *\n\t * @class\n\t * @augments wp.customize.CroppedImageControl\n\t * @augments wp.customize.MediaControl\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.SiteIconControl = api.CroppedImageControl.extend({\n\n\t\t/**\n\t\t * Create a media modal select frame, and store it so the instance can be reused when needed.\n\t\t */\n\t\tinitFrame: function() {\n\t\t\tvar l10n = _wpMediaViewsL10n;\n\n\t\t\tthis.frame = wp.media({\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: l10n.select,\n\t\t\t\t\tclose: false\n\t\t\t\t},\n\t\t\t\tstates: [\n\t\t\t\t\tnew wp.media.controller.Library({\n\t\t\t\t\t\ttitle: this.params.button_labels.frame_title,\n\t\t\t\t\t\tlibrary: wp.media.query({ type: 'image' }),\n\t\t\t\t\t\tmultiple: false,\n\t\t\t\t\t\tdate: false,\n\t\t\t\t\t\tpriority: 20,\n\t\t\t\t\t\tsuggestedWidth: this.params.width,\n\t\t\t\t\t\tsuggestedHeight: this.params.height\n\t\t\t\t\t}),\n\t\t\t\t\tnew wp.media.controller.SiteIconCropper({\n\t\t\t\t\t\timgSelectOptions: this.calculateImageSelectOptions,\n\t\t\t\t\t\tcontrol: this\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tthis.frame.on( 'select', this.onSelect, this );\n\t\t\tthis.frame.on( 'cropped', this.onCropped, this );\n\t\t\tthis.frame.on( 'skippedcrop', this.onSkippedCrop, this );\n\t\t},\n\n\t\t/**\n\t\t * After an image is selected in the media modal, switch to the cropper\n\t\t * state if the image isn't the right size.\n\t\t */\n\t\tonSelect: function() {\n\t\t\tvar attachment = this.frame.state().get( 'selection' ).first().toJSON(),\n\t\t\t\tcontroller = this;\n\n\t\t\tif ( this.params.width === attachment.width && this.params.height === attachment.height && ! this.params.flex_width && ! this.params.flex_height ) {\n\t\t\t\twp.ajax.post( 'crop-image', {\n\t\t\t\t\tnonce: attachment.nonces.edit,\n\t\t\t\t\tid: attachment.id,\n\t\t\t\t\tcontext: 'site-icon',\n\t\t\t\t\tcropDetails: {\n\t\t\t\t\t\tx1: 0,\n\t\t\t\t\t\ty1: 0,\n\t\t\t\t\t\twidth: this.params.width,\n\t\t\t\t\t\theight: this.params.height,\n\t\t\t\t\t\tdst_width: this.params.width,\n\t\t\t\t\t\tdst_height: this.params.height\n\t\t\t\t\t}\n\t\t\t\t} ).done( function( croppedImage ) {\n\t\t\t\t\tcontroller.setImageFromAttachment( croppedImage );\n\t\t\t\t\tcontroller.frame.close();\n\t\t\t\t} ).fail( function() {\n\t\t\t\t\tcontroller.frame.trigger('content:error:crop');\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tthis.frame.setState( 'cropper' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Updates the setting and re-renders the control UI.\n\t\t *\n\t\t * @param {object} attachment\n\t\t */\n\t\tsetImageFromAttachment: function( attachment ) {\n\t\t\tvar sizes = [ 'site_icon-32', 'thumbnail', 'full' ], link,\n\t\t\t\ticon;\n\n\t\t\t_.each( sizes, function( size ) {\n\t\t\t\tif ( ! icon && ! _.isUndefined ( attachment.sizes[ size ] ) ) {\n\t\t\t\t\ticon = attachment.sizes[ size ];\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.params.attachment = attachment;\n\n\t\t\t// Set the Customizer setting; the callback takes care of rendering.\n\t\t\tthis.setting( attachment.id );\n\n\t\t\tif ( ! icon ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Update the icon in-browser.\n\t\t\tlink = $( 'link[rel=\"icon\"][sizes=\"32x32\"]' );\n\t\t\tlink.attr( 'href', icon.url );\n\t\t},\n\n\t\t/**\n\t\t * Called when the \"Remove\" link is clicked. Empties the setting.\n\t\t *\n\t\t * @param {object} event jQuery Event object\n\t\t */\n\t\tremoveFile: function( event ) {\n\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.params.attachment = {};\n\t\t\tthis.setting( '' );\n\t\t\tthis.renderContent(); // Not bound to setting change when emptying.\n\t\t\t$( 'link[rel=\"icon\"][sizes=\"32x32\"]' ).attr( 'href', '/favicon.ico' ); // Set to default.\n\t\t}\n\t});\n\n\t/**\n\t * @class\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.HeaderControl = api.Control.extend({\n\t\tready: function() {\n\t\t\tthis.btnRemove = $('#customize-control-header_image .actions .remove');\n\t\t\tthis.btnNew    = $('#customize-control-header_image .actions .new');\n\n\t\t\t_.bindAll(this, 'openMedia', 'removeImage');\n\n\t\t\tthis.btnNew.on( 'click', this.openMedia );\n\t\t\tthis.btnRemove.on( 'click', this.removeImage );\n\n\t\t\tapi.HeaderTool.currentHeader = this.getInitialHeaderImage();\n\n\t\t\tnew api.HeaderTool.CurrentView({\n\t\t\t\tmodel: api.HeaderTool.currentHeader,\n\t\t\t\tel: '#customize-control-header_image .current .container'\n\t\t\t});\n\n\t\t\tnew api.HeaderTool.ChoiceListView({\n\t\t\t\tcollection: api.HeaderTool.UploadsList = new api.HeaderTool.ChoiceList(),\n\t\t\t\tel: '#customize-control-header_image .choices .uploaded .list'\n\t\t\t});\n\n\t\t\tnew api.HeaderTool.ChoiceListView({\n\t\t\t\tcollection: api.HeaderTool.DefaultsList = new api.HeaderTool.DefaultsList(),\n\t\t\t\tel: '#customize-control-header_image .choices .default .list'\n\t\t\t});\n\n\t\t\tapi.HeaderTool.combinedList = api.HeaderTool.CombinedList = new api.HeaderTool.CombinedList([\n\t\t\t\tapi.HeaderTool.UploadsList,\n\t\t\t\tapi.HeaderTool.DefaultsList\n\t\t\t]);\n\n\t\t\t// Ensure custom-header-crop Ajax requests bootstrap the Customizer to activate the previewed theme.\n\t\t\twp.media.controller.Cropper.prototype.defaults.doCropArgs.wp_customize = 'on';\n\t\t\twp.media.controller.Cropper.prototype.defaults.doCropArgs.customize_theme = api.settings.theme.stylesheet;\n\t\t},\n\n\t\t/**\n\t\t * Returns a new instance of api.HeaderTool.ImageModel based on the currently\n\t\t * saved header image (if any).\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @returns {Object} Options\n\t\t */\n\t\tgetInitialHeaderImage: function() {\n\t\t\tif ( ! api.get().header_image || ! api.get().header_image_data || _.contains( [ 'remove-header', 'random-default-image', 'random-uploaded-image' ], api.get().header_image ) ) {\n\t\t\t\treturn new api.HeaderTool.ImageModel();\n\t\t\t}\n\n\t\t\t// Get the matching uploaded image object.\n\t\t\tvar currentHeaderObject = _.find( _wpCustomizeHeader.uploads, function( imageObj ) {\n\t\t\t\treturn ( imageObj.attachment_id === api.get().header_image_data.attachment_id );\n\t\t\t} );\n\t\t\t// Fall back to raw current header image.\n\t\t\tif ( ! currentHeaderObject ) {\n\t\t\t\tcurrentHeaderObject = {\n\t\t\t\t\turl: api.get().header_image,\n\t\t\t\t\tthumbnail_url: api.get().header_image,\n\t\t\t\t\tattachment_id: api.get().header_image_data.attachment_id\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn new api.HeaderTool.ImageModel({\n\t\t\t\theader: currentHeaderObject,\n\t\t\t\tchoice: currentHeaderObject.url.split( '/' ).pop()\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Returns a set of options, computed from the attached image data and\n\t\t * theme-specific data, to be fed to the imgAreaSelect plugin in\n\t\t * wp.media.view.Cropper.\n\t\t *\n\t\t * @param {wp.media.model.Attachment} attachment\n\t\t * @param {wp.media.controller.Cropper} controller\n\t\t * @returns {Object} Options\n\t\t */\n\t\tcalculateImageSelectOptions: function(attachment, controller) {\n\t\t\tvar xInit = parseInt(_wpCustomizeHeader.data.width, 10),\n\t\t\t\tyInit = parseInt(_wpCustomizeHeader.data.height, 10),\n\t\t\t\tflexWidth = !! parseInt(_wpCustomizeHeader.data['flex-width'], 10),\n\t\t\t\tflexHeight = !! parseInt(_wpCustomizeHeader.data['flex-height'], 10),\n\t\t\t\tratio, xImg, yImg, realHeight, realWidth,\n\t\t\t\timgSelectOptions;\n\n\t\t\trealWidth = attachment.get('width');\n\t\t\trealHeight = attachment.get('height');\n\n\t\t\tthis.headerImage = new api.HeaderTool.ImageModel();\n\t\t\tthis.headerImage.set({\n\t\t\t\tthemeWidth: xInit,\n\t\t\t\tthemeHeight: yInit,\n\t\t\t\tthemeFlexWidth: flexWidth,\n\t\t\t\tthemeFlexHeight: flexHeight,\n\t\t\t\timageWidth: realWidth,\n\t\t\t\timageHeight: realHeight\n\t\t\t});\n\n\t\t\tcontroller.set( 'canSkipCrop', ! this.headerImage.shouldBeCropped() );\n\n\t\t\tratio = xInit / yInit;\n\t\t\txImg = realWidth;\n\t\t\tyImg = realHeight;\n\n\t\t\tif ( xImg / yImg > ratio ) {\n\t\t\t\tyInit = yImg;\n\t\t\t\txInit = yInit * ratio;\n\t\t\t} else {\n\t\t\t\txInit = xImg;\n\t\t\t\tyInit = xInit / ratio;\n\t\t\t}\n\n\t\t\timgSelectOptions = {\n\t\t\t\thandles: true,\n\t\t\t\tkeys: true,\n\t\t\t\tinstance: true,\n\t\t\t\tpersistent: true,\n\t\t\t\timageWidth: realWidth,\n\t\t\t\timageHeight: realHeight,\n\t\t\t\tx1: 0,\n\t\t\t\ty1: 0,\n\t\t\t\tx2: xInit,\n\t\t\t\ty2: yInit\n\t\t\t};\n\n\t\t\tif (flexHeight === false && flexWidth === false) {\n\t\t\t\timgSelectOptions.aspectRatio = xInit + ':' + yInit;\n\t\t\t}\n\t\t\tif (flexHeight === false ) {\n\t\t\t\timgSelectOptions.maxHeight = yInit;\n\t\t\t}\n\t\t\tif (flexWidth === false ) {\n\t\t\t\timgSelectOptions.maxWidth = xInit;\n\t\t\t}\n\n\t\t\treturn imgSelectOptions;\n\t\t},\n\n\t\t/**\n\t\t * Sets up and opens the Media Manager in order to select an image.\n\t\t * Depending on both the size of the image and the properties of the\n\t\t * current theme, a cropping step after selection may be required or\n\t\t * skippable.\n\t\t *\n\t\t * @param {event} event\n\t\t */\n\t\topenMedia: function(event) {\n\t\t\tvar l10n = _wpMediaViewsL10n;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.frame = wp.media({\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: l10n.selectAndCrop,\n\t\t\t\t\tclose: false\n\t\t\t\t},\n\t\t\t\tstates: [\n\t\t\t\t\tnew wp.media.controller.Library({\n\t\t\t\t\t\ttitle:     l10n.chooseImage,\n\t\t\t\t\t\tlibrary:   wp.media.query({ type: 'image' }),\n\t\t\t\t\t\tmultiple:  false,\n\t\t\t\t\t\tdate:      false,\n\t\t\t\t\t\tpriority:  20,\n\t\t\t\t\t\tsuggestedWidth: _wpCustomizeHeader.data.width,\n\t\t\t\t\t\tsuggestedHeight: _wpCustomizeHeader.data.height\n\t\t\t\t\t}),\n\t\t\t\t\tnew wp.media.controller.Cropper({\n\t\t\t\t\t\timgSelectOptions: this.calculateImageSelectOptions\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tthis.frame.on('select', this.onSelect, this);\n\t\t\tthis.frame.on('cropped', this.onCropped, this);\n\t\t\tthis.frame.on('skippedcrop', this.onSkippedCrop, this);\n\n\t\t\tthis.frame.open();\n\t\t},\n\n\t\t/**\n\t\t * After an image is selected in the media modal,\n\t\t * switch to the cropper state.\n\t\t */\n\t\tonSelect: function() {\n\t\t\tthis.frame.setState('cropper');\n\t\t},\n\n\t\t/**\n\t\t * After the image has been cropped, apply the cropped image data to the setting.\n\t\t *\n\t\t * @param {object} croppedImage Cropped attachment data.\n\t\t */\n\t\tonCropped: function(croppedImage) {\n\t\t\tvar url = croppedImage.url,\n\t\t\t\tattachmentId = croppedImage.attachment_id,\n\t\t\t\tw = croppedImage.width,\n\t\t\t\th = croppedImage.height;\n\t\t\tthis.setImageFromURL(url, attachmentId, w, h);\n\t\t},\n\n\t\t/**\n\t\t * If cropping was skipped, apply the image data directly to the setting.\n\t\t *\n\t\t * @param {object} selection\n\t\t */\n\t\tonSkippedCrop: function(selection) {\n\t\t\tvar url = selection.get('url'),\n\t\t\t\tw = selection.get('width'),\n\t\t\t\th = selection.get('height');\n\t\t\tthis.setImageFromURL(url, selection.id, w, h);\n\t\t},\n\n\t\t/**\n\t\t * Creates a new wp.customize.HeaderTool.ImageModel from provided\n\t\t * header image data and inserts it into the user-uploaded headers\n\t\t * collection.\n\t\t *\n\t\t * @param {String} url\n\t\t * @param {Number} attachmentId\n\t\t * @param {Number} width\n\t\t * @param {Number} height\n\t\t */\n\t\tsetImageFromURL: function(url, attachmentId, width, height) {\n\t\t\tvar choice, data = {};\n\n\t\t\tdata.url = url;\n\t\t\tdata.thumbnail_url = url;\n\t\t\tdata.timestamp = _.now();\n\n\t\t\tif (attachmentId) {\n\t\t\t\tdata.attachment_id = attachmentId;\n\t\t\t}\n\n\t\t\tif (width) {\n\t\t\t\tdata.width = width;\n\t\t\t}\n\n\t\t\tif (height) {\n\t\t\t\tdata.height = height;\n\t\t\t}\n\n\t\t\tchoice = new api.HeaderTool.ImageModel({\n\t\t\t\theader: data,\n\t\t\t\tchoice: url.split('/').pop()\n\t\t\t});\n\t\t\tapi.HeaderTool.UploadsList.add(choice);\n\t\t\tapi.HeaderTool.currentHeader.set(choice.toJSON());\n\t\t\tchoice.save();\n\t\t\tchoice.importImage();\n\t\t},\n\n\t\t/**\n\t\t * Triggers the necessary events to deselect an image which was set as\n\t\t * the currently selected one.\n\t\t */\n\t\tremoveImage: function() {\n\t\t\tapi.HeaderTool.currentHeader.trigger('hide');\n\t\t\tapi.HeaderTool.CombinedList.trigger('control:removeImage');\n\t\t}\n\n\t});\n\n\t/**\n\t * wp.customize.ThemeControl\n\t *\n\t * @constructor\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.ThemeControl = api.Control.extend({\n\n\t\ttouchDrag: false,\n\t\tisRendered: false,\n\n\t\t/**\n\t\t * Defer rendering the theme control until the section is displayed.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\trenderContent: function () {\n\t\t\tvar control = this,\n\t\t\t\trenderContentArgs = arguments;\n\n\t\t\tapi.section( control.section(), function( section ) {\n\t\t\t\tif ( section.expanded() ) {\n\t\t\t\t\tapi.Control.prototype.renderContent.apply( control, renderContentArgs );\n\t\t\t\t\tcontrol.isRendered = true;\n\t\t\t\t} else {\n\t\t\t\t\tsection.expanded.bind( function( expanded ) {\n\t\t\t\t\t\tif ( expanded && ! control.isRendered ) {\n\t\t\t\t\t\t\tapi.Control.prototype.renderContent.apply( control, renderContentArgs );\n\t\t\t\t\t\t\tcontrol.isRendered = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * @since 4.2.0\n\t\t */\n\t\tready: function() {\n\t\t\tvar control = this;\n\n\t\t\tcontrol.container.on( 'touchmove', '.theme', function() {\n\t\t\t\tcontrol.touchDrag = true;\n\t\t\t});\n\n\t\t\t// Bind details view trigger.\n\t\t\tcontrol.container.on( 'click keydown touchend', '.theme', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Bail if the user scrolled on a touch device.\n\t\t\t\tif ( control.touchDrag === true ) {\n\t\t\t\t\treturn control.touchDrag = false;\n\t\t\t\t}\n\n\t\t\t\t// Prevent the modal from showing when the user clicks the action button.\n\t\t\t\tif ( $( event.target ).is( '.theme-actions .button' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapi.section( control.section() ).loadThemePreview( control.params.theme.id );\n\t\t\t});\n\n\t\t\tcontrol.container.on( 'click keydown', '.theme-actions .theme-details', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tapi.section( control.section() ).showDetails( control.params.theme );\n\t\t\t});\n\n\t\t\tcontrol.container.on( 'render-screenshot', function() {\n\t\t\t\tvar $screenshot = $( this ).find( 'img' ),\n\t\t\t\t\tsource = $screenshot.data( 'src' );\n\n\t\t\t\tif ( source ) {\n\t\t\t\t\t$screenshot.attr( 'src', source );\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Show or hide the theme based on the presence of the term in the title, description, and author.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tfilter: function( term ) {\n\t\t\tvar control = this,\n\t\t\t\thaystack = control.params.theme.name + ' ' +\n\t\t\t\t\tcontrol.params.theme.description + ' ' +\n\t\t\t\t\tcontrol.params.theme.tags + ' ' +\n\t\t\t\t\tcontrol.params.theme.author;\n\t\t\thaystack = haystack.toLowerCase().replace( '-', ' ' );\n\t\t\tif ( -1 !== haystack.search( term ) ) {\n\t\t\t\tcontrol.activate();\n\t\t\t} else {\n\t\t\t\tcontrol.deactivate();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Change objects contained within the main customize object to Settings.\n\tapi.defaultConstructor = api.Setting;\n\n\t// Create the collections for Controls, Sections and Panels.\n\tapi.control = new api.Values({ defaultConstructor: api.Control });\n\tapi.section = new api.Values({ defaultConstructor: api.Section });\n\tapi.panel = new api.Values({ defaultConstructor: api.Panel });\n\n\t/**\n\t * An object that fetches a preview in the background of the document, which\n\t * allows for seamless replacement of an existing preview.\n\t *\n\t * @class\n\t * @augments wp.customize.Messenger\n\t * @augments wp.customize.Class\n\t * @mixes wp.customize.Events\n\t */\n\tapi.PreviewFrame = api.Messenger.extend({\n\t\tsensitivity: null, // Will get set to api.settings.timeouts.previewFrameSensitivity.\n\n\t\t/**\n\t\t * Initialize the PreviewFrame.\n\t\t *\n\t\t * @param {object} params.container\n\t\t * @param {object} params.previewUrl\n\t\t * @param {object} params.query\n\t\t * @param {object} options\n\t\t */\n\t\tinitialize: function( params, options ) {\n\t\t\tvar deferred = $.Deferred();\n\n\t\t\t/*\n\t\t\t * Make the instance of the PreviewFrame the promise object\n\t\t\t * so other objects can easily interact with it.\n\t\t\t */\n\t\t\tdeferred.promise( this );\n\n\t\t\tthis.container = params.container;\n\n\t\t\t$.extend( params, { channel: api.PreviewFrame.uuid() });\n\n\t\t\tapi.Messenger.prototype.initialize.call( this, params, options );\n\n\t\t\tthis.add( 'previewUrl', params.previewUrl );\n\n\t\t\tthis.query = $.extend( params.query || {}, { customize_messenger_channel: this.channel() });\n\n\t\t\tthis.run( deferred );\n\t\t},\n\n\t\t/**\n\t\t * Run the preview request.\n\t\t *\n\t\t * @param {object} deferred jQuery Deferred object to be resolved with\n\t\t *                          the request.\n\t\t */\n\t\trun: function( deferred ) {\n\t\t\tvar previewFrame = this,\n\t\t\t\tloaded = false,\n\t\t\t\tready = false,\n\t\t\t\treadyData = null,\n\t\t\t\thasPendingChangesetUpdate = '{}' !== previewFrame.query.customized,\n\t\t\t\turlParser,\n\t\t\t\tparams,\n\t\t\t\tform;\n\n\t\t\tif ( previewFrame._ready ) {\n\t\t\t\tpreviewFrame.unbind( 'ready', previewFrame._ready );\n\t\t\t}\n\n\t\t\tpreviewFrame._ready = function( data ) {\n\t\t\t\tready = true;\n\t\t\t\treadyData = data;\n\t\t\t\tpreviewFrame.container.addClass( 'iframe-ready' );\n\t\t\t\tif ( ! data ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( loaded ) {\n\t\t\t\t\tdeferred.resolveWith( previewFrame, [ data ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tpreviewFrame.bind( 'ready', previewFrame._ready );\n\n\t\t\turlParser = document.createElement( 'a' );\n\t\t\turlParser.href = previewFrame.previewUrl();\n\n\t\t\tparams = _.extend(\n\t\t\t\tapi.utils.parseQueryString( urlParser.search.substr( 1 ) ),\n\t\t\t\t{\n\t\t\t\t\tcustomize_changeset_uuid: previewFrame.query.customize_changeset_uuid,\n\t\t\t\t\tcustomize_theme: previewFrame.query.customize_theme,\n\t\t\t\t\tcustomize_messenger_channel: previewFrame.query.customize_messenger_channel\n\t\t\t\t}\n\t\t\t);\n\n\t\t\turlParser.search = $.param( params );\n\t\t\tpreviewFrame.iframe = $( '<iframe />', {\n\t\t\t\ttitle: api.l10n.previewIframeTitle,\n\t\t\t\tname: 'customize-' + previewFrame.channel()\n\t\t\t} );\n\t\t\tpreviewFrame.iframe.attr( 'onmousewheel', '' ); // Workaround for Safari bug. See WP Trac #38149.\n\n\t\t\tif ( ! hasPendingChangesetUpdate ) {\n\t\t\t\tpreviewFrame.iframe.attr( 'src', urlParser.href );\n\t\t\t} else {\n\t\t\t\tpreviewFrame.iframe.attr( 'data-src', urlParser.href ); // For debugging purposes.\n\t\t\t}\n\n\t\t\tpreviewFrame.iframe.appendTo( previewFrame.container );\n\t\t\tpreviewFrame.targetWindow( previewFrame.iframe[0].contentWindow );\n\n\t\t\t/*\n\t\t\t * Submit customized data in POST request to preview frame window since\n\t\t\t * there are setting value changes not yet written to changeset.\n\t\t\t */\n\t\t\tif ( hasPendingChangesetUpdate ) {\n\t\t\t\tform = $( '<form>', {\n\t\t\t\t\taction: urlParser.href,\n\t\t\t\t\ttarget: previewFrame.iframe.attr( 'name' ),\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\thidden: 'hidden'\n\t\t\t\t} );\n\t\t\t\tform.append( $( '<input>', {\n\t\t\t\t\ttype: 'hidden',\n\t\t\t\t\tname: '_method',\n\t\t\t\t\tvalue: 'GET'\n\t\t\t\t} ) );\n\t\t\t\t_.each( previewFrame.query, function( value, key ) {\n\t\t\t\t\tform.append( $( '<input>', {\n\t\t\t\t\t\ttype: 'hidden',\n\t\t\t\t\t\tname: key,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t} ) );\n\t\t\t\t} );\n\t\t\t\tpreviewFrame.container.append( form );\n\t\t\t\tform.submit();\n\t\t\t\tform.remove(); // No need to keep the form around after submitted.\n\t\t\t}\n\n\t\t\tpreviewFrame.bind( 'iframe-loading-error', function( error ) {\n\t\t\t\tpreviewFrame.iframe.remove();\n\n\t\t\t\t// Check if the user is not logged in.\n\t\t\t\tif ( 0 === error ) {\n\t\t\t\t\tpreviewFrame.login( deferred );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check for cheaters.\n\t\t\t\tif ( -1 === error ) {\n\t\t\t\t\tdeferred.rejectWith( previewFrame, [ 'cheatin' ] );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdeferred.rejectWith( previewFrame, [ 'request failure' ] );\n\t\t\t} );\n\n\t\t\tpreviewFrame.iframe.one( 'load', function() {\n\t\t\t\tloaded = true;\n\n\t\t\t\tif ( ready ) {\n\t\t\t\t\tdeferred.resolveWith( previewFrame, [ readyData ] );\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\tdeferred.rejectWith( previewFrame, [ 'ready timeout' ] );\n\t\t\t\t\t}, previewFrame.sensitivity );\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tlogin: function( deferred ) {\n\t\t\tvar self = this,\n\t\t\t\treject;\n\n\t\t\treject = function() {\n\t\t\t\tdeferred.rejectWith( self, [ 'logged out' ] );\n\t\t\t};\n\n\t\t\tif ( this.triedLogin ) {\n\t\t\t\treturn reject();\n\t\t\t}\n\n\t\t\t// Check if we have an admin cookie.\n\t\t\t$.get( api.settings.url.ajax, {\n\t\t\t\taction: 'logged-in'\n\t\t\t}).fail( reject ).done( function( response ) {\n\t\t\t\tvar iframe;\n\n\t\t\t\tif ( '1' !== response ) {\n\t\t\t\t\treject();\n\t\t\t\t}\n\n\t\t\t\tiframe = $( '<iframe />', { 'src': self.previewUrl(), 'title': api.l10n.previewIframeTitle } ).hide();\n\t\t\t\tiframe.appendTo( self.container );\n\t\t\t\tiframe.on( 'load', function() {\n\t\t\t\t\tself.triedLogin = true;\n\n\t\t\t\t\tiframe.remove();\n\t\t\t\t\tself.run( deferred );\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tdestroy: function() {\n\t\t\tapi.Messenger.prototype.destroy.call( this );\n\n\t\t\tif ( this.iframe ) {\n\t\t\t\tthis.iframe.remove();\n\t\t\t}\n\n\t\t\tdelete this.iframe;\n\t\t\tdelete this.targetWindow;\n\t\t}\n\t});\n\n\t(function(){\n\t\tvar id = 0;\n\t\t/**\n\t\t * Return an incremented ID for a preview messenger channel.\n\t\t *\n\t\t * This function is named \"uuid\" for historical reasons, but it is a\n\t\t * misnomer as it is not an actual UUID, and it is not universally unique.\n\t\t * This is not to be confused with `api.settings.changeset.uuid`.\n\t\t *\n\t\t * @return {string}\n\t\t */\n\t\tapi.PreviewFrame.uuid = function() {\n\t\t\treturn 'preview-' + String( id++ );\n\t\t};\n\t}());\n\n\t/**\n\t * Set the document title of the customizer.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {string} documentTitle\n\t */\n\tapi.setDocumentTitle = function ( documentTitle ) {\n\t\tvar tmpl, title;\n\t\ttmpl = api.settings.documentTitleTmpl;\n\t\ttitle = tmpl.replace( '%s', documentTitle );\n\t\tdocument.title = title;\n\t\tapi.trigger( 'title', title );\n\t};\n\n\t/**\n\t * @class\n\t * @augments wp.customize.Messenger\n\t * @augments wp.customize.Class\n\t * @mixes wp.customize.Events\n\t */\n\tapi.Previewer = api.Messenger.extend({\n\t\trefreshBuffer: null, // Will get set to api.settings.timeouts.windowRefresh.\n\n\t\t/**\n\t\t * @param {array}  params.allowedUrls\n\t\t * @param {string} params.container   A selector or jQuery element for the preview\n\t\t *                                    frame to be placed.\n\t\t * @param {string} params.form\n\t\t * @param {string} params.previewUrl  The URL to preview.\n\t\t * @param {object} options\n\t\t */\n\t\tinitialize: function( params, options ) {\n\t\t\tvar previewer = this,\n\t\t\t\turlParser = document.createElement( 'a' );\n\n\t\t\t$.extend( previewer, options || {} );\n\t\t\tpreviewer.deferred = {\n\t\t\t\tactive: $.Deferred()\n\t\t\t};\n\n\t\t\t// Debounce to prevent hammering server and then wait for any pending update requests.\n\t\t\tpreviewer.refresh = _.debounce(\n\t\t\t\t( function( originalRefresh ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tvar isProcessingComplete, refreshOnceProcessingComplete;\n\t\t\t\t\t\tisProcessingComplete = function() {\n\t\t\t\t\t\t\treturn 0 === api.state( 'processing' ).get();\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif ( isProcessingComplete() ) {\n\t\t\t\t\t\t\toriginalRefresh.call( previewer );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trefreshOnceProcessingComplete = function() {\n\t\t\t\t\t\t\t\tif ( isProcessingComplete() ) {\n\t\t\t\t\t\t\t\t\toriginalRefresh.call( previewer );\n\t\t\t\t\t\t\t\t\tapi.state( 'processing' ).unbind( refreshOnceProcessingComplete );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tapi.state( 'processing' ).bind( refreshOnceProcessingComplete );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}( previewer.refresh ) ),\n\t\t\t\tpreviewer.refreshBuffer\n\t\t\t);\n\n\t\t\tpreviewer.container   = api.ensure( params.container );\n\t\t\tpreviewer.allowedUrls = params.allowedUrls;\n\n\t\t\tparams.url = window.location.href;\n\n\t\t\tapi.Messenger.prototype.initialize.call( previewer, params );\n\n\t\t\turlParser.href = previewer.origin();\n\t\t\tpreviewer.add( 'scheme', urlParser.protocol.replace( /:$/, '' ) );\n\n\t\t\t// Limit the URL to internal, front-end links.\n\t\t\t//\n\t\t\t// If the front end and the admin are served from the same domain, load the\n\t\t\t// preview over ssl if the Customizer is being loaded over ssl. This avoids\n\t\t\t// insecure content warnings. This is not attempted if the admin and front end\n\t\t\t// are on different domains to avoid the case where the front end doesn't have\n\t\t\t// ssl certs.\n\n\t\t\tpreviewer.add( 'previewUrl', params.previewUrl ).setter( function( to ) {\n\t\t\t\tvar result = null, urlParser, queryParams, parsedAllowedUrl, parsedCandidateUrls = [];\n\t\t\t\turlParser = document.createElement( 'a' );\n\t\t\t\turlParser.href = to;\n\n\t\t\t\t// Abort if URL is for admin or (static) files in wp-includes or wp-content.\n\t\t\t\tif ( /\\/wp-(admin|includes|content)(\\/|$)/.test( urlParser.pathname ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Remove state query params.\n\t\t\t\tif ( urlParser.search.length > 1 ) {\n\t\t\t\t\tqueryParams = api.utils.parseQueryString( urlParser.search.substr( 1 ) );\n\t\t\t\t\tdelete queryParams.customize_changeset_uuid;\n\t\t\t\t\tdelete queryParams.customize_theme;\n\t\t\t\t\tdelete queryParams.customize_messenger_channel;\n\t\t\t\t\tif ( _.isEmpty( queryParams ) ) {\n\t\t\t\t\t\turlParser.search = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\turlParser.search = $.param( queryParams );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tparsedCandidateUrls.push( urlParser );\n\n\t\t\t\t// Prepend list with URL that matches the scheme/protocol of the iframe.\n\t\t\t\tif ( previewer.scheme.get() + ':' !== urlParser.protocol ) {\n\t\t\t\t\turlParser = document.createElement( 'a' );\n\t\t\t\t\turlParser.href = parsedCandidateUrls[0].href;\n\t\t\t\t\turlParser.protocol = previewer.scheme.get() + ':';\n\t\t\t\t\tparsedCandidateUrls.unshift( urlParser );\n\t\t\t\t}\n\n\t\t\t\t// Attempt to match the URL to the control frame's scheme and check if it's allowed. If not, try the original URL.\n\t\t\t\tparsedAllowedUrl = document.createElement( 'a' );\n\t\t\t\t_.find( parsedCandidateUrls, function( parsedCandidateUrl ) {\n\t\t\t\t\treturn ! _.isUndefined( _.find( previewer.allowedUrls, function( allowedUrl ) {\n\t\t\t\t\t\tparsedAllowedUrl.href = allowedUrl;\n\t\t\t\t\t\tif ( urlParser.protocol === parsedAllowedUrl.protocol && urlParser.host === parsedAllowedUrl.host && 0 === urlParser.pathname.indexOf( parsedAllowedUrl.pathname.replace( /\\/$/, '' ) ) ) {\n\t\t\t\t\t\t\tresult = parsedCandidateUrl.href;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) );\n\t\t\t\t} );\n\n\t\t\t\treturn result;\n\t\t\t});\n\n\t\t\tpreviewer.bind( 'ready', previewer.ready );\n\n\t\t\t// Start listening for keep-alive messages when iframe first loads.\n\t\t\tpreviewer.deferred.active.done( _.bind( previewer.keepPreviewAlive, previewer ) );\n\n\t\t\tpreviewer.bind( 'synced', function() {\n\t\t\t\tpreviewer.send( 'active' );\n\t\t\t} );\n\n\t\t\t// Refresh the preview when the URL is changed (but not yet).\n\t\t\tpreviewer.previewUrl.bind( previewer.refresh );\n\n\t\t\tpreviewer.scroll = 0;\n\t\t\tpreviewer.bind( 'scroll', function( distance ) {\n\t\t\t\tpreviewer.scroll = distance;\n\t\t\t});\n\n\t\t\t// Update the URL when the iframe sends a URL message, resetting scroll position. If URL is unchanged, then refresh.\n\t\t\tpreviewer.bind( 'url', function( url ) {\n\t\t\t\tvar onUrlChange, urlChanged = false;\n\t\t\t\tpreviewer.scroll = 0;\n\t\t\t\tonUrlChange = function() {\n\t\t\t\t\turlChanged = true;\n\t\t\t\t};\n\t\t\t\tpreviewer.previewUrl.bind( onUrlChange );\n\t\t\t\tpreviewer.previewUrl.set( url );\n\t\t\t\tpreviewer.previewUrl.unbind( onUrlChange );\n\t\t\t\tif ( ! urlChanged ) {\n\t\t\t\t\tpreviewer.refresh();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Update the document title when the preview changes.\n\t\t\tpreviewer.bind( 'documentTitle', function ( title ) {\n\t\t\t\tapi.setDocumentTitle( title );\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Handle the preview receiving the ready message.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access public\n\t\t *\n\t\t * @param {object} data - Data from preview.\n\t\t * @param {string} data.currentUrl - Current URL.\n\t\t * @param {object} data.activePanels - Active panels.\n\t\t * @param {object} data.activeSections Active sections.\n\t\t * @param {object} data.activeControls Active controls.\n\t\t * @returns {void}\n\t\t */\n\t\tready: function( data ) {\n\t\t\tvar previewer = this, synced = {}, constructs;\n\n\t\t\tsynced.settings = api.get();\n\t\t\tsynced['settings-modified-while-loading'] = previewer.settingsModifiedWhileLoading;\n\t\t\tif ( 'resolved' !== previewer.deferred.active.state() || previewer.loading ) {\n\t\t\t\tsynced.scroll = previewer.scroll;\n\t\t\t}\n\t\t\tsynced['edit-shortcut-visibility'] = api.state( 'editShortcutVisibility' ).get();\n\t\t\tpreviewer.send( 'sync', synced );\n\n\t\t\t// Set the previewUrl without causing the url to set the iframe.\n\t\t\tif ( data.currentUrl ) {\n\t\t\t\tpreviewer.previewUrl.unbind( previewer.refresh );\n\t\t\t\tpreviewer.previewUrl.set( data.currentUrl );\n\t\t\t\tpreviewer.previewUrl.bind( previewer.refresh );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Walk over all panels, sections, and controls and set their\n\t\t\t * respective active states to true if the preview explicitly\n\t\t\t * indicates as such.\n\t\t\t */\n\t\t\tconstructs = {\n\t\t\t\tpanel: data.activePanels,\n\t\t\t\tsection: data.activeSections,\n\t\t\t\tcontrol: data.activeControls\n\t\t\t};\n\t\t\t_( constructs ).each( function ( activeConstructs, type ) {\n\t\t\t\tapi[ type ].each( function ( construct, id ) {\n\t\t\t\t\tvar isDynamicallyCreated = _.isUndefined( api.settings[ type + 's' ][ id ] );\n\n\t\t\t\t\t/*\n\t\t\t\t\t * If the construct was created statically in PHP (not dynamically in JS)\n\t\t\t\t\t * then consider a missing (undefined) value in the activeConstructs to\n\t\t\t\t\t * mean it should be deactivated (since it is gone). But if it is\n\t\t\t\t\t * dynamically created then only toggle activation if the value is defined,\n\t\t\t\t\t * as this means that the construct was also then correspondingly\n\t\t\t\t\t * created statically in PHP and the active callback is available.\n\t\t\t\t\t * Otherwise, dynamically-created constructs should normally have\n\t\t\t\t\t * their active states toggled in JS rather than from PHP.\n\t\t\t\t\t */\n\t\t\t\t\tif ( ! isDynamicallyCreated || ! _.isUndefined( activeConstructs[ id ] ) ) {\n\t\t\t\t\t\tif ( activeConstructs[ id ] ) {\n\t\t\t\t\t\t\tconstruct.activate();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconstruct.deactivate();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tif ( data.settingValidities ) {\n\t\t\t\tapi._handleSettingValidities( {\n\t\t\t\t\tsettingValidities: data.settingValidities,\n\t\t\t\t\tfocusInvalidControl: false\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Keep the preview alive by listening for ready and keep-alive messages.\n\t\t *\n\t\t * If a message is not received in the allotted time then the iframe will be set back to the last known valid URL.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access public\n\t\t *\n\t\t * @returns {void}\n\t\t */\n\t\tkeepPreviewAlive: function keepPreviewAlive() {\n\t\t\tvar previewer = this, keepAliveTick, timeoutId, handleMissingKeepAlive, scheduleKeepAliveCheck;\n\n\t\t\t/**\n\t\t\t * Schedule a preview keep-alive check.\n\t\t\t *\n\t\t\t * Note that if a page load takes longer than keepAliveCheck milliseconds,\n\t\t\t * the keep-alive messages will still be getting sent from the previous\n\t\t\t * URL.\n\t\t\t */\n\t\t\tscheduleKeepAliveCheck = function() {\n\t\t\t\ttimeoutId = setTimeout( handleMissingKeepAlive, api.settings.timeouts.keepAliveCheck );\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Set the previewerAlive state to true when receiving a message from the preview.\n\t\t\t */\n\t\t\tkeepAliveTick = function() {\n\t\t\t\tapi.state( 'previewerAlive' ).set( true );\n\t\t\t\tclearTimeout( timeoutId );\n\t\t\t\tscheduleKeepAliveCheck();\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Set the previewerAlive state to false if keepAliveCheck milliseconds have transpired without a message.\n\t\t\t *\n\t\t\t * This is most likely to happen in the case of a connectivity error, or if the theme causes the browser\n\t\t\t * to navigate to a non-allowed URL. Setting this state to false will force settings with a postMessage\n\t\t\t * transport to use refresh instead, causing the preview frame also to be replaced with the current\n\t\t\t * allowed preview URL.\n\t\t\t */\n\t\t\thandleMissingKeepAlive = function() {\n\t\t\t\tapi.state( 'previewerAlive' ).set( false );\n\t\t\t};\n\t\t\tscheduleKeepAliveCheck();\n\n\t\t\tpreviewer.bind( 'ready', keepAliveTick );\n\t\t\tpreviewer.bind( 'keep-alive', keepAliveTick );\n\t\t},\n\n\t\t/**\n\t\t * Query string data sent with each preview request.\n\t\t *\n\t\t * @abstract\n\t\t */\n\t\tquery: function() {},\n\n\t\tabort: function() {\n\t\t\tif ( this.loading ) {\n\t\t\t\tthis.loading.destroy();\n\t\t\t\tdelete this.loading;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Refresh the preview seamlessly.\n\t\t *\n\t\t * @since 3.4.0\n\t\t * @access public\n\t\t * @returns {void}\n\t\t */\n\t\trefresh: function() {\n\t\t\tvar previewer = this, onSettingChange;\n\n\t\t\t// Display loading indicator\n\t\t\tpreviewer.send( 'loading-initiated' );\n\n\t\t\tpreviewer.abort();\n\n\t\t\tpreviewer.loading = new api.PreviewFrame({\n\t\t\t\turl:        previewer.url(),\n\t\t\t\tpreviewUrl: previewer.previewUrl(),\n\t\t\t\tquery:      previewer.query( { excludeCustomizedSaved: true } ) || {},\n\t\t\t\tcontainer:  previewer.container\n\t\t\t});\n\n\t\t\tpreviewer.settingsModifiedWhileLoading = {};\n\t\t\tonSettingChange = function( setting ) {\n\t\t\t\tpreviewer.settingsModifiedWhileLoading[ setting.id ] = true;\n\t\t\t};\n\t\t\tapi.bind( 'change', onSettingChange );\n\t\t\tpreviewer.loading.always( function() {\n\t\t\t\tapi.unbind( 'change', onSettingChange );\n\t\t\t} );\n\n\t\t\tpreviewer.loading.done( function( readyData ) {\n\t\t\t\tvar loadingFrame = this, onceSynced;\n\n\t\t\t\tpreviewer.preview = loadingFrame;\n\t\t\t\tpreviewer.targetWindow( loadingFrame.targetWindow() );\n\t\t\t\tpreviewer.channel( loadingFrame.channel() );\n\n\t\t\t\tonceSynced = function() {\n\t\t\t\t\tloadingFrame.unbind( 'synced', onceSynced );\n\t\t\t\t\tif ( previewer._previousPreview ) {\n\t\t\t\t\t\tpreviewer._previousPreview.destroy();\n\t\t\t\t\t}\n\t\t\t\t\tpreviewer._previousPreview = previewer.preview;\n\t\t\t\t\tpreviewer.deferred.active.resolve();\n\t\t\t\t\tdelete previewer.loading;\n\t\t\t\t};\n\t\t\t\tloadingFrame.bind( 'synced', onceSynced );\n\n\t\t\t\t// This event will be received directly by the previewer in normal navigation; this is only needed for seamless refresh.\n\t\t\t\tpreviewer.trigger( 'ready', readyData );\n\t\t\t});\n\n\t\t\tpreviewer.loading.fail( function( reason ) {\n\t\t\t\tpreviewer.send( 'loading-failed' );\n\n\t\t\t\tif ( 'logged out' === reason ) {\n\t\t\t\t\tif ( previewer.preview ) {\n\t\t\t\t\t\tpreviewer.preview.destroy();\n\t\t\t\t\t\tdelete previewer.preview;\n\t\t\t\t\t}\n\n\t\t\t\t\tpreviewer.login().done( previewer.refresh );\n\t\t\t\t}\n\n\t\t\t\tif ( 'cheatin' === reason ) {\n\t\t\t\t\tpreviewer.cheatin();\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tlogin: function() {\n\t\t\tvar previewer = this,\n\t\t\t\tdeferred, messenger, iframe;\n\n\t\t\tif ( this._login )\n\t\t\t\treturn this._login;\n\n\t\t\tdeferred = $.Deferred();\n\t\t\tthis._login = deferred.promise();\n\n\t\t\tmessenger = new api.Messenger({\n\t\t\t\tchannel: 'login',\n\t\t\t\turl:     api.settings.url.login\n\t\t\t});\n\n\t\t\tiframe = $( '<iframe />', { 'src': api.settings.url.login, 'title': api.l10n.loginIframeTitle } ).appendTo( this.container );\n\n\t\t\tmessenger.targetWindow( iframe[0].contentWindow );\n\n\t\t\tmessenger.bind( 'login', function () {\n\t\t\t\tvar refreshNonces = previewer.refreshNonces();\n\n\t\t\t\trefreshNonces.always( function() {\n\t\t\t\t\tiframe.remove();\n\t\t\t\t\tmessenger.destroy();\n\t\t\t\t\tdelete previewer._login;\n\t\t\t\t});\n\n\t\t\t\trefreshNonces.done( function() {\n\t\t\t\t\tdeferred.resolve();\n\t\t\t\t});\n\n\t\t\t\trefreshNonces.fail( function() {\n\t\t\t\t\tpreviewer.cheatin();\n\t\t\t\t\tdeferred.reject();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn this._login;\n\t\t},\n\n\t\tcheatin: function() {\n\t\t\t$( document.body ).empty().addClass( 'cheatin' ).append(\n\t\t\t\t'<h1>' + api.l10n.cheatin + '</h1>' +\n\t\t\t\t'<p>' + api.l10n.notAllowed + '</p>'\n\t\t\t);\n\t\t},\n\n\t\trefreshNonces: function() {\n\t\t\tvar request, deferred = $.Deferred();\n\n\t\t\tdeferred.promise();\n\n\t\t\trequest = wp.ajax.post( 'customize_refresh_nonces', {\n\t\t\t\twp_customize: 'on',\n\t\t\t\tcustomize_theme: api.settings.theme.stylesheet\n\t\t\t});\n\n\t\t\trequest.done( function( response ) {\n\t\t\t\tapi.trigger( 'nonce-refresh', response );\n\t\t\t\tdeferred.resolve();\n\t\t\t});\n\n\t\t\trequest.fail( function() {\n\t\t\t\tdeferred.reject();\n\t\t\t});\n\n\t\t\treturn deferred;\n\t\t}\n\t});\n\n\tapi.settingConstructor = {};\n\tapi.controlConstructor = {\n\t\tcolor:               api.ColorControl,\n\t\tmedia:               api.MediaControl,\n\t\tupload:              api.UploadControl,\n\t\timage:               api.ImageControl,\n\t\tcropped_image:       api.CroppedImageControl,\n\t\tsite_icon:           api.SiteIconControl,\n\t\theader:              api.HeaderControl,\n\t\tbackground:          api.BackgroundControl,\n\t\tbackground_position: api.BackgroundPositionControl,\n\t\ttheme:               api.ThemeControl\n\t};\n\tapi.panelConstructor = {};\n\tapi.sectionConstructor = {\n\t\tthemes: api.ThemesSection\n\t};\n\n\t/**\n\t * Handle setting_validities in an error response for the customize-save request.\n\t *\n\t * Add notifications to the settings and focus on the first control that has an invalid setting.\n\t *\n\t * @since 4.6.0\n\t * @private\n\t *\n\t * @param {object}  args\n\t * @param {object}  args.settingValidities\n\t * @param {boolean} [args.focusInvalidControl=false]\n\t * @returns {void}\n\t */\n\tapi._handleSettingValidities = function handleSettingValidities( args ) {\n\t\tvar invalidSettingControls, invalidSettings = [], wasFocused = false;\n\n\t\t// Find the controls that correspond to each invalid setting.\n\t\t_.each( args.settingValidities, function( validity, settingId ) {\n\t\t\tvar setting = api( settingId );\n\t\t\tif ( setting ) {\n\n\t\t\t\t// Add notifications for invalidities.\n\t\t\t\tif ( _.isObject( validity ) ) {\n\t\t\t\t\t_.each( validity, function( params, code ) {\n\t\t\t\t\t\tvar notification, existingNotification, needsReplacement = false;\n\t\t\t\t\t\tnotification = new api.Notification( code, _.extend( { fromServer: true }, params ) );\n\n\t\t\t\t\t\t// Remove existing notification if already exists for code but differs in parameters.\n\t\t\t\t\t\texistingNotification = setting.notifications( notification.code );\n\t\t\t\t\t\tif ( existingNotification ) {\n\t\t\t\t\t\t\tneedsReplacement = notification.type !== existingNotification.type || notification.message !== existingNotification.message || ! _.isEqual( notification.data, existingNotification.data );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( needsReplacement ) {\n\t\t\t\t\t\t\tsetting.notifications.remove( code );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! setting.notifications.has( notification.code ) ) {\n\t\t\t\t\t\t\tsetting.notifications.add( code, notification );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinvalidSettings.push( setting.id );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// Remove notification errors that are no longer valid.\n\t\t\t\tsetting.notifications.each( function( notification ) {\n\t\t\t\t\tif ( notification.fromServer && 'error' === notification.type && ( true === validity || ! validity[ notification.code ] ) ) {\n\t\t\t\t\t\tsetting.notifications.remove( notification.code );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\tif ( args.focusInvalidControl ) {\n\t\t\tinvalidSettingControls = api.findControlsForSettings( invalidSettings );\n\n\t\t\t// Focus on the first control that is inside of an expanded section (one that is visible).\n\t\t\t_( _.values( invalidSettingControls ) ).find( function( controls ) {\n\t\t\t\treturn _( controls ).find( function( control ) {\n\t\t\t\t\tvar isExpanded = control.section() && api.section.has( control.section() ) && api.section( control.section() ).expanded();\n\t\t\t\t\tif ( isExpanded && control.expanded ) {\n\t\t\t\t\t\tisExpanded = control.expanded();\n\t\t\t\t\t}\n\t\t\t\t\tif ( isExpanded ) {\n\t\t\t\t\t\tcontrol.focus();\n\t\t\t\t\t\twasFocused = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn wasFocused;\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\t// Focus on the first invalid control.\n\t\t\tif ( ! wasFocused && ! _.isEmpty( invalidSettingControls ) ) {\n\t\t\t\t_.values( invalidSettingControls )[0][0].focus();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Find all controls associated with the given settings.\n\t *\n\t * @since 4.6.0\n\t * @param {string[]} settingIds Setting IDs.\n\t * @returns {object<string, wp.customize.Control>} Mapping setting ids to arrays of controls.\n\t */\n\tapi.findControlsForSettings = function findControlsForSettings( settingIds ) {\n\t\tvar controls = {}, settingControls;\n\t\t_.each( _.unique( settingIds ), function( settingId ) {\n\t\t\tvar setting = api( settingId );\n\t\t\tif ( setting ) {\n\t\t\t\tsettingControls = setting.findControls();\n\t\t\t\tif ( settingControls && settingControls.length > 0 ) {\n\t\t\t\t\tcontrols[ settingId ] = settingControls;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\treturn controls;\n\t};\n\n\t/**\n\t * Sort panels, sections, controls by priorities. Hide empty sections and panels.\n\t *\n\t * @since 4.1.0\n\t */\n\tapi.reflowPaneContents = _.bind( function () {\n\n\t\tvar appendContainer, activeElement, rootHeadContainers, rootNodes = [], wasReflowed = false;\n\n\t\tif ( document.activeElement ) {\n\t\t\tactiveElement = $( document.activeElement );\n\t\t}\n\n\t\t// Sort the sections within each panel\n\t\tapi.panel.each( function ( panel ) {\n\t\t\tvar sections = panel.sections(),\n\t\t\t\tsectionHeadContainers = _.pluck( sections, 'headContainer' );\n\t\t\trootNodes.push( panel );\n\t\t\tappendContainer = ( panel.contentContainer.is( 'ul' ) ) ? panel.contentContainer : panel.contentContainer.find( 'ul:first' );\n\t\t\tif ( ! api.utils.areElementListsEqual( sectionHeadContainers, appendContainer.children( '[id]' ) ) ) {\n\t\t\t\t_( sections ).each( function ( section ) {\n\t\t\t\t\tappendContainer.append( section.headContainer );\n\t\t\t\t} );\n\t\t\t\twasReflowed = true;\n\t\t\t}\n\t\t} );\n\n\t\t// Sort the controls within each section\n\t\tapi.section.each( function ( section ) {\n\t\t\tvar controls = section.controls(),\n\t\t\t\tcontrolContainers = _.pluck( controls, 'container' );\n\t\t\tif ( ! section.panel() ) {\n\t\t\t\trootNodes.push( section );\n\t\t\t}\n\t\t\tappendContainer = ( section.contentContainer.is( 'ul' ) ) ? section.contentContainer : section.contentContainer.find( 'ul:first' );\n\t\t\tif ( ! api.utils.areElementListsEqual( controlContainers, appendContainer.children( '[id]' ) ) ) {\n\t\t\t\t_( controls ).each( function ( control ) {\n\t\t\t\t\tappendContainer.append( control.container );\n\t\t\t\t} );\n\t\t\t\twasReflowed = true;\n\t\t\t}\n\t\t} );\n\n\t\t// Sort the root panels and sections\n\t\trootNodes.sort( api.utils.prioritySort );\n\t\trootHeadContainers = _.pluck( rootNodes, 'headContainer' );\n\t\tappendContainer = $( '#customize-theme-controls .customize-pane-parent' ); // @todo This should be defined elsewhere, and to be configurable\n\t\tif ( ! api.utils.areElementListsEqual( rootHeadContainers, appendContainer.children() ) ) {\n\t\t\t_( rootNodes ).each( function ( rootNode ) {\n\t\t\t\tappendContainer.append( rootNode.headContainer );\n\t\t\t} );\n\t\t\twasReflowed = true;\n\t\t}\n\n\t\t// Now re-trigger the active Value callbacks to that the panels and sections can decide whether they can be rendered\n\t\tapi.panel.each( function ( panel ) {\n\t\t\tvar value = panel.active();\n\t\t\tpanel.active.callbacks.fireWith( panel.active, [ value, value ] );\n\t\t} );\n\t\tapi.section.each( function ( section ) {\n\t\t\tvar value = section.active();\n\t\t\tsection.active.callbacks.fireWith( section.active, [ value, value ] );\n\t\t} );\n\n\t\t// Restore focus if there was a reflow and there was an active (focused) element\n\t\tif ( wasReflowed && activeElement ) {\n\t\t\tactiveElement.focus();\n\t\t}\n\t\tapi.trigger( 'pane-contents-reflowed' );\n\t}, api );\n\n\t$( function() {\n\t\tapi.settings = window._wpCustomizeSettings;\n\t\tapi.l10n = window._wpCustomizeControlsL10n;\n\n\t\t// Check if we can run the Customizer.\n\t\tif ( ! api.settings ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Bail if any incompatibilities are found.\n\t\tif ( ! $.support.postMessage || ( ! $.support.cors && api.settings.isCrossDomain ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( null === api.PreviewFrame.prototype.sensitivity ) {\n\t\t\tapi.PreviewFrame.prototype.sensitivity = api.settings.timeouts.previewFrameSensitivity;\n\t\t}\n\t\tif ( null === api.Previewer.prototype.refreshBuffer ) {\n\t\t\tapi.Previewer.prototype.refreshBuffer = api.settings.timeouts.windowRefresh;\n\t\t}\n\n\t\tvar parent,\n\t\t\tbody = $( document.body ),\n\t\t\toverlay = body.children( '.wp-full-overlay' ),\n\t\t\ttitle = $( '#customize-info .panel-title.site-title' ),\n\t\t\tcloseBtn = $( '.customize-controls-close' ),\n\t\t\tsaveBtn = $( '#save' ),\n\t\t\tfooterActions = $( '#customize-footer-actions' );\n\n\t\t// Prevent the form from saving when enter is pressed on an input or select element.\n\t\t$('#customize-controls').on( 'keydown', function( e ) {\n\t\t\tvar isEnter = ( 13 === e.which ),\n\t\t\t\t$el = $( e.target );\n\n\t\t\tif ( isEnter && ( $el.is( 'input:not([type=button])' ) || $el.is( 'select' ) ) ) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t});\n\n\t\t// Expand/Collapse the main customizer customize info.\n\t\t$( '.customize-info' ).find( '> .accordion-section-title .customize-help-toggle' ).on( 'click', function() {\n\t\t\tvar section = $( this ).closest( '.accordion-section' ),\n\t\t\t\tcontent = section.find( '.customize-panel-description:first' );\n\n\t\t\tif ( section.hasClass( 'cannot-expand' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( section.hasClass( 'open' ) ) {\n\t\t\t\tsection.toggleClass( 'open' );\n\t\t\t\tcontent.slideUp( api.Panel.prototype.defaultExpandedArguments.duration );\n\t\t\t\t$( this ).attr( 'aria-expanded', false );\n\t\t\t} else {\n\t\t\t\tcontent.slideDown( api.Panel.prototype.defaultExpandedArguments.duration );\n\t\t\t\tsection.toggleClass( 'open' );\n\t\t\t\t$( this ).attr( 'aria-expanded', true );\n\t\t\t}\n\t\t});\n\n\t\t// Initialize Previewer\n\t\tapi.previewer = new api.Previewer({\n\t\t\tcontainer:   '#customize-preview',\n\t\t\tform:        '#customize-controls',\n\t\t\tpreviewUrl:  api.settings.url.preview,\n\t\t\tallowedUrls: api.settings.url.allowed\n\t\t}, {\n\n\t\t\tnonce: api.settings.nonce,\n\n\t\t\t/**\n\t\t\t * Build the query to send along with the Preview request.\n\t\t\t *\n\t\t\t * @since 3.4.0\n\t\t\t * @since 4.7.0 Added options param.\n\t\t\t * @access public\n\t\t\t *\n\t\t\t * @param {object}  [options] Options.\n\t\t\t * @param {boolean} [options.excludeCustomizedSaved=false] Exclude saved settings in customized response (values pending writing to changeset).\n\t\t\t * @return {object} Query vars.\n\t\t\t */\n\t\t\tquery: function( options ) {\n\t\t\t\tvar queryVars = {\n\t\t\t\t\twp_customize: 'on',\n\t\t\t\t\tcustomize_theme: api.settings.theme.stylesheet,\n\t\t\t\t\tnonce: this.nonce.preview,\n\t\t\t\t\tcustomize_changeset_uuid: api.settings.changeset.uuid\n\t\t\t\t};\n\n\t\t\t\t/*\n\t\t\t\t * Exclude customized data if requested especially for calls to requestChangesetUpdate.\n\t\t\t\t * Changeset updates are differential and so it is a performance waste to send all of\n\t\t\t\t * the dirty settings with each update.\n\t\t\t\t */\n\t\t\t\tqueryVars.customized = JSON.stringify( api.dirtyValues( {\n\t\t\t\t\tunsaved: options && options.excludeCustomizedSaved\n\t\t\t\t} ) );\n\n\t\t\t\treturn queryVars;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Save (and publish) the customizer changeset.\n\t\t\t *\n\t\t\t * Updates to the changeset are transactional. If any of the settings\n\t\t\t * are invalid then none of them will be written into the changeset.\n\t\t\t * A revision will be made for the changeset post if revisions support\n\t\t\t * has been added to the post type.\n\t\t\t *\n\t\t\t * @since 3.4.0\n\t\t\t * @since 4.7.0 Added args param and return value.\n\t\t\t *\n\t\t\t * @param {object} [args] Args.\n\t\t\t * @param {string} [args.status=publish] Status.\n\t\t\t * @param {string} [args.date] Date, in local time in MySQL format.\n\t\t\t * @param {string} [args.title] Title\n\t\t\t * @returns {jQuery.promise} Promise.\n\t\t\t */\n\t\t\tsave: function( args ) {\n\t\t\t\tvar previewer = this,\n\t\t\t\t\tdeferred = $.Deferred(),\n\t\t\t\t\tchangesetStatus = 'publish',\n\t\t\t\t\tprocessing = api.state( 'processing' ),\n\t\t\t\t\tsubmitWhenDoneProcessing,\n\t\t\t\t\tsubmit,\n\t\t\t\t\tmodifiedWhileSaving = {},\n\t\t\t\t\tinvalidSettings = [],\n\t\t\t\t\tinvalidControls;\n\n\t\t\t\tif ( args && args.status ) {\n\t\t\t\t\tchangesetStatus = args.status;\n\t\t\t\t}\n\n\t\t\t\tif ( api.state( 'saving' ).get() ) {\n\t\t\t\t\tdeferred.reject( 'already_saving' );\n\t\t\t\t\tdeferred.promise();\n\t\t\t\t}\n\n\t\t\t\tapi.state( 'saving' ).set( true );\n\n\t\t\t\tfunction captureSettingModifiedDuringSave( setting ) {\n\t\t\t\t\tmodifiedWhileSaving[ setting.id ] = true;\n\t\t\t\t}\n\n\t\t\t\tsubmit = function () {\n\t\t\t\t\tvar request, query, settingInvalidities = {}, latestRevision = api._latestRevision;\n\n\t\t\t\t\tapi.bind( 'change', captureSettingModifiedDuringSave );\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Block saving if there are any settings that are marked as\n\t\t\t\t\t * invalid from the client (not from the server). Focus on\n\t\t\t\t\t * the control.\n\t\t\t\t\t */\n\t\t\t\t\tapi.each( function( setting ) {\n\t\t\t\t\t\tsetting.notifications.each( function( notification ) {\n\t\t\t\t\t\t\tif ( 'error' === notification.type && ! notification.fromServer ) {\n\t\t\t\t\t\t\t\tinvalidSettings.push( setting.id );\n\t\t\t\t\t\t\t\tif ( ! settingInvalidities[ setting.id ] ) {\n\t\t\t\t\t\t\t\t\tsettingInvalidities[ setting.id ] = {};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsettingInvalidities[ setting.id ][ notification.code ] = notification;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t\tinvalidControls = api.findControlsForSettings( invalidSettings );\n\t\t\t\t\tif ( ! _.isEmpty( invalidControls ) ) {\n\t\t\t\t\t\t_.values( invalidControls )[0][0].focus();\n\t\t\t\t\t\tapi.unbind( 'change', captureSettingModifiedDuringSave );\n\t\t\t\t\t\tdeferred.rejectWith( previewer, [\n\t\t\t\t\t\t\t{ setting_invalidities: settingInvalidities }\n\t\t\t\t\t\t] );\n\t\t\t\t\t\tapi.state( 'saving' ).set( false );\n\t\t\t\t\t\treturn deferred.promise();\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Note that excludeCustomizedSaved is intentionally false so that the entire\n\t\t\t\t\t * set of customized data will be included if bypassed changeset update.\n\t\t\t\t\t */\n\t\t\t\t\tquery = $.extend( previewer.query( { excludeCustomizedSaved: false } ), {\n\t\t\t\t\t\tnonce: previewer.nonce.save,\n\t\t\t\t\t\tcustomize_changeset_status: changesetStatus\n\t\t\t\t\t} );\n\t\t\t\t\tif ( args && args.date ) {\n\t\t\t\t\t\tquery.customize_changeset_date = args.date;\n\t\t\t\t\t}\n\t\t\t\t\tif ( args && args.title ) {\n\t\t\t\t\t\tquery.customize_changeset_title = args.title;\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Note that the dirty customized values will have already been set in the\n\t\t\t\t\t * changeset and so technically query.customized could be deleted. However,\n\t\t\t\t\t * it is remaining here to make sure that any settings that got updated\n\t\t\t\t\t * quietly which may have not triggered an update request will also get\n\t\t\t\t\t * included in the values that get saved to the changeset. This will ensure\n\t\t\t\t\t * that values that get injected via the saved event will be included in\n\t\t\t\t\t * the changeset. This also ensures that setting values that were invalid\n\t\t\t\t\t * will get re-validated, perhaps in the case of settings that are invalid\n\t\t\t\t\t * due to dependencies on other settings.\n\t\t\t\t\t */\n\t\t\t\t\trequest = wp.ajax.post( 'customize_save', query );\n\n\t\t\t\t\t// Disable save button during the save request.\n\t\t\t\t\tsaveBtn.prop( 'disabled', true );\n\n\t\t\t\t\tapi.trigger( 'save', request );\n\n\t\t\t\t\trequest.always( function () {\n\t\t\t\t\t\tapi.state( 'saving' ).set( false );\n\t\t\t\t\t\tsaveBtn.prop( 'disabled', false );\n\t\t\t\t\t\tapi.unbind( 'change', captureSettingModifiedDuringSave );\n\t\t\t\t\t} );\n\n\t\t\t\t\trequest.fail( function ( response ) {\n\n\t\t\t\t\t\tif ( '0' === response ) {\n\t\t\t\t\t\t\tresponse = 'not_logged_in';\n\t\t\t\t\t\t} else if ( '-1' === response ) {\n\t\t\t\t\t\t\t// Back-compat in case any other check_ajax_referer() call is dying\n\t\t\t\t\t\t\tresponse = 'invalid_nonce';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( 'invalid_nonce' === response ) {\n\t\t\t\t\t\t\tpreviewer.cheatin();\n\t\t\t\t\t\t} else if ( 'not_logged_in' === response ) {\n\t\t\t\t\t\t\tpreviewer.preview.iframe.hide();\n\t\t\t\t\t\t\tpreviewer.login().done( function() {\n\t\t\t\t\t\t\t\tpreviewer.save();\n\t\t\t\t\t\t\t\tpreviewer.preview.iframe.show();\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( response.setting_validities ) {\n\t\t\t\t\t\t\tapi._handleSettingValidities( {\n\t\t\t\t\t\t\t\tsettingValidities: response.setting_validities,\n\t\t\t\t\t\t\t\tfocusInvalidControl: true\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdeferred.rejectWith( previewer, [ response ] );\n\t\t\t\t\t\tapi.trigger( 'error', response );\n\t\t\t\t\t} );\n\n\t\t\t\t\trequest.done( function( response ) {\n\n\t\t\t\t\t\tpreviewer.send( 'saved', response );\n\n\t\t\t\t\t\tapi.state( 'changesetStatus' ).set( response.changeset_status );\n\t\t\t\t\t\tif ( 'publish' === response.changeset_status ) {\n\n\t\t\t\t\t\t\t// Mark all published as clean if they haven't been modified during the request.\n\t\t\t\t\t\t\tapi.each( function( setting ) {\n\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t * Note that the setting revision will be undefined in the case of setting\n\t\t\t\t\t\t\t\t * values that are marked as dirty when the customizer is loaded, such as\n\t\t\t\t\t\t\t\t * when applying starter content. All other dirty settings will have an\n\t\t\t\t\t\t\t\t * associated revision due to their modification triggering a change event.\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tif ( setting._dirty && ( _.isUndefined( api._latestSettingRevisions[ setting.id ] ) || api._latestSettingRevisions[ setting.id ] <= latestRevision ) ) {\n\t\t\t\t\t\t\t\t\tsetting._dirty = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\tapi.state( 'changesetStatus' ).set( '' );\n\t\t\t\t\t\t\tapi.settings.changeset.uuid = response.next_changeset_uuid;\n\t\t\t\t\t\t\tparent.send( 'changeset-uuid', api.settings.changeset.uuid );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( response.setting_validities ) {\n\t\t\t\t\t\t\tapi._handleSettingValidities( {\n\t\t\t\t\t\t\t\tsettingValidities: response.setting_validities,\n\t\t\t\t\t\t\t\tfocusInvalidControl: true\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdeferred.resolveWith( previewer, [ response ] );\n\t\t\t\t\t\tapi.trigger( 'saved', response );\n\n\t\t\t\t\t\t// Restore the global dirty state if any settings were modified during save.\n\t\t\t\t\t\tif ( ! _.isEmpty( modifiedWhileSaving ) ) {\n\t\t\t\t\t\t\tapi.state( 'saved' ).set( false );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t};\n\n\t\t\t\tif ( 0 === processing() ) {\n\t\t\t\t\tsubmit();\n\t\t\t\t} else {\n\t\t\t\t\tsubmitWhenDoneProcessing = function () {\n\t\t\t\t\t\tif ( 0 === processing() ) {\n\t\t\t\t\t\t\tapi.state.unbind( 'change', submitWhenDoneProcessing );\n\t\t\t\t\t\t\tsubmit();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tapi.state.bind( 'change', submitWhenDoneProcessing );\n\t\t\t\t}\n\n\t\t\t\treturn deferred.promise();\n\t\t\t}\n\t\t});\n\n\t\t// Refresh the nonces if the preview sends updated nonces over.\n\t\tapi.previewer.bind( 'nonce', function( nonce ) {\n\t\t\t$.extend( this.nonce, nonce );\n\t\t});\n\n\t\t// Refresh the nonces if login sends updated nonces over.\n\t\tapi.bind( 'nonce-refresh', function( nonce ) {\n\t\t\t$.extend( api.settings.nonce, nonce );\n\t\t\t$.extend( api.previewer.nonce, nonce );\n\t\t\tapi.previewer.send( 'nonce-refresh', nonce );\n\t\t});\n\n\t\t// Create Settings\n\t\t$.each( api.settings.settings, function( id, data ) {\n\t\t\tvar constructor = api.settingConstructor[ data.type ] || api.Setting,\n\t\t\t\tsetting;\n\n\t\t\tsetting = new constructor( id, data.value, {\n\t\t\t\ttransport: data.transport,\n\t\t\t\tpreviewer: api.previewer,\n\t\t\t\tdirty: !! data.dirty\n\t\t\t} );\n\t\t\tapi.add( id, setting );\n\t\t});\n\n\t\t// Create Panels\n\t\t$.each( api.settings.panels, function ( id, data ) {\n\t\t\tvar constructor = api.panelConstructor[ data.type ] || api.Panel,\n\t\t\t\tpanel;\n\n\t\t\tpanel = new constructor( id, {\n\t\t\t\tparams: data\n\t\t\t} );\n\t\t\tapi.panel.add( id, panel );\n\t\t});\n\n\t\t// Create Sections\n\t\t$.each( api.settings.sections, function ( id, data ) {\n\t\t\tvar constructor = api.sectionConstructor[ data.type ] || api.Section,\n\t\t\t\tsection;\n\n\t\t\tsection = new constructor( id, {\n\t\t\t\tparams: data\n\t\t\t} );\n\t\t\tapi.section.add( id, section );\n\t\t});\n\n\t\t// Create Controls\n\t\t$.each( api.settings.controls, function( id, data ) {\n\t\t\tvar constructor = api.controlConstructor[ data.type ] || api.Control,\n\t\t\t\tcontrol;\n\n\t\t\tcontrol = new constructor( id, {\n\t\t\t\tparams: data,\n\t\t\t\tpreviewer: api.previewer\n\t\t\t} );\n\t\t\tapi.control.add( id, control );\n\t\t});\n\n\t\t// Focus the autofocused element\n\t\t_.each( [ 'panel', 'section', 'control' ], function( type ) {\n\t\t\tvar id = api.settings.autofocus[ type ];\n\t\t\tif ( ! id ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Defer focus until:\n\t\t\t * 1. The panel, section, or control exists (especially for dynamically-created ones).\n\t\t\t * 2. The instance is embedded in the document (and so is focusable).\n\t\t\t * 3. The preview has finished loading so that the active states have been set.\n\t\t\t */\n\t\t\tapi[ type ]( id, function( instance ) {\n\t\t\t\tinstance.deferred.embedded.done( function() {\n\t\t\t\t\tapi.previewer.deferred.active.done( function() {\n\t\t\t\t\t\tinstance.focus();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tapi.bind( 'ready', api.reflowPaneContents );\n\t\t$( [ api.panel, api.section, api.control ] ).each( function ( i, values ) {\n\t\t\tvar debouncedReflowPaneContents = _.debounce( api.reflowPaneContents, api.settings.timeouts.reflowPaneContents );\n\t\t\tvalues.bind( 'add', debouncedReflowPaneContents );\n\t\t\tvalues.bind( 'change', debouncedReflowPaneContents );\n\t\t\tvalues.bind( 'remove', debouncedReflowPaneContents );\n\t\t} );\n\n\t\t// Save and activated states\n\t\t(function() {\n\t\t\tvar state = new api.Values(),\n\t\t\t\tsaved = state.create( 'saved' ),\n\t\t\t\tsaving = state.create( 'saving' ),\n\t\t\t\tactivated = state.create( 'activated' ),\n\t\t\t\tprocessing = state.create( 'processing' ),\n\t\t\t\tpaneVisible = state.create( 'paneVisible' ),\n\t\t\t\texpandedPanel = state.create( 'expandedPanel' ),\n\t\t\t\texpandedSection = state.create( 'expandedSection' ),\n\t\t\t\tchangesetStatus = state.create( 'changesetStatus' ),\n\t\t\t\tpreviewerAlive = state.create( 'previewerAlive' ),\n\t\t\t\teditShortcutVisibility  = state.create( 'editShortcutVisibility' ),\n\t\t\t\tpopulateChangesetUuidParam;\n\n\t\t\tstate.bind( 'change', function() {\n\t\t\t\tvar canSave;\n\n\t\t\t\tif ( ! activated() ) {\n\t\t\t\t\tsaveBtn.val( api.l10n.activate );\n\t\t\t\t\tcloseBtn.find( '.screen-reader-text' ).text( api.l10n.cancel );\n\n\t\t\t\t} else if ( '' === changesetStatus.get() && saved() ) {\n\t\t\t\t\tsaveBtn.val( api.l10n.saved );\n\t\t\t\t\tcloseBtn.find( '.screen-reader-text' ).text( api.l10n.close );\n\n\t\t\t\t} else {\n\t\t\t\t\tsaveBtn.val( api.l10n.save );\n\t\t\t\t\tcloseBtn.find( '.screen-reader-text' ).text( api.l10n.cancel );\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Save (publish) button should be enabled if saving is not currently happening,\n\t\t\t\t * and if the theme is not active or the changeset exists but is not published.\n\t\t\t\t */\n\t\t\t\tcanSave = ! saving() && ( ! activated() || ! saved() || ( '' !== changesetStatus() && 'publish' !== changesetStatus() ) );\n\n\t\t\t\tsaveBtn.prop( 'disabled', ! canSave );\n\t\t\t});\n\n\t\t\t// Set default states.\n\t\t\tchangesetStatus( api.settings.changeset.status );\n\t\t\tsaved( true );\n\t\t\tif ( '' === changesetStatus() ) { // Handle case for loading starter content.\n\t\t\t\tapi.each( function( setting ) {\n\t\t\t\t\tif ( setting._dirty ) {\n\t\t\t\t\t\tsaved( false );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\tsaving( false );\n\t\t\tactivated( api.settings.theme.active );\n\t\t\tprocessing( 0 );\n\t\t\tpaneVisible( true );\n\t\t\texpandedPanel( false );\n\t\t\texpandedSection( false );\n\t\t\tpreviewerAlive( true );\n\t\t\teditShortcutVisibility( 'visible' );\n\n\t\t\tapi.bind( 'change', function() {\n\t\t\t\tif ( state( 'saved' ).get() ) {\n\t\t\t\t\tstate( 'saved' ).set( false );\n\t\t\t\t\tpopulateChangesetUuidParam( true );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tsaving.bind( function( isSaving ) {\n\t\t\t\tbody.toggleClass( 'saving', isSaving );\n\t\t\t} );\n\n\t\t\tapi.bind( 'saved', function( response ) {\n\t\t\t\tstate('saved').set( true );\n\t\t\t\tif ( 'publish' === response.changeset_status ) {\n\t\t\t\t\tstate( 'activated' ).set( true );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tactivated.bind( function( to ) {\n\t\t\t\tif ( to ) {\n\t\t\t\t\tapi.trigger( 'activated' );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * Populate URL with UUID via `history.replaceState()`.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @access private\n\t\t\t *\n\t\t\t * @param {boolean} isIncluded Is UUID included.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tpopulateChangesetUuidParam = function( isIncluded ) {\n\t\t\t\tvar urlParser, queryParams;\n\n\t\t\t\t// Abort on IE9 which doesn't support history management.\n\t\t\t\tif ( ! history.replaceState ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\turlParser = document.createElement( 'a' );\n\t\t\t\turlParser.href = location.href;\n\t\t\t\tqueryParams = api.utils.parseQueryString( urlParser.search.substr( 1 ) );\n\t\t\t\tif ( isIncluded ) {\n\t\t\t\t\tif ( queryParams.changeset_uuid === api.settings.changeset.uuid ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tqueryParams.changeset_uuid = api.settings.changeset.uuid;\n\t\t\t\t} else {\n\t\t\t\t\tif ( ! queryParams.changeset_uuid ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdelete queryParams.changeset_uuid;\n\t\t\t\t}\n\t\t\t\turlParser.search = $.param( queryParams );\n\t\t\t\thistory.replaceState( {}, document.title, urlParser.href );\n\t\t\t};\n\n\t\t\tchangesetStatus.bind( function( newStatus ) {\n\t\t\t\tpopulateChangesetUuidParam( '' !== newStatus && 'publish' !== newStatus );\n\t\t\t} );\n\n\t\t\t// Expose states to the API.\n\t\t\tapi.state = state;\n\t\t}());\n\n\t\t// Check if preview url is valid and load the preview frame.\n\t\tif ( api.previewer.previewUrl() ) {\n\t\t\tapi.previewer.refresh();\n\t\t} else {\n\t\t\tapi.previewer.previewUrl( api.settings.url.home );\n\t\t}\n\n\t\t// Button bindings.\n\t\tsaveBtn.click( function( event ) {\n\t\t\tapi.previewer.save();\n\t\t\tevent.preventDefault();\n\t\t}).keydown( function( event ) {\n\t\t\tif ( 9 === event.which ) // tab\n\t\t\t\treturn;\n\t\t\tif ( 13 === event.which ) // enter\n\t\t\t\tapi.previewer.save();\n\t\t\tevent.preventDefault();\n\t\t});\n\n\t\tcloseBtn.keydown( function( event ) {\n\t\t\tif ( 9 === event.which ) // tab\n\t\t\t\treturn;\n\t\t\tif ( 13 === event.which ) // enter\n\t\t\t\tthis.click();\n\t\t\tevent.preventDefault();\n\t\t});\n\n\t\t$( '.collapse-sidebar' ).on( 'click', function() {\n\t\t\tapi.state( 'paneVisible' ).set( ! api.state( 'paneVisible' ).get() );\n\t\t});\n\n\t\tapi.state( 'paneVisible' ).bind( function( paneVisible ) {\n\t\t\toverlay.toggleClass( 'preview-only', ! paneVisible );\n\t\t\toverlay.toggleClass( 'expanded', paneVisible );\n\t\t\toverlay.toggleClass( 'collapsed', ! paneVisible );\n\n\t\t\tif ( ! paneVisible ) {\n\t\t\t\t$( '.collapse-sidebar' ).attr({ 'aria-expanded': 'false', 'aria-label': api.l10n.expandSidebar });\n\t\t\t} else {\n\t\t\t\t$( '.collapse-sidebar' ).attr({ 'aria-expanded': 'true', 'aria-label': api.l10n.collapseSidebar });\n\t\t\t}\n\t\t});\n\n\t\t// Keyboard shortcuts - esc to exit section/panel.\n\t\t$( 'body' ).on( 'keydown', function( event ) {\n\t\t\tvar collapsedObject, expandedControls = [], expandedSections = [], expandedPanels = [];\n\n\t\t\tif ( 27 !== event.which ) { // Esc.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Abort if the event target is not the body (the default) and not inside of #customize-controls.\n\t\t\t * This ensures that ESC meant to collapse a modal dialog or a TinyMCE toolbar won't collapse something else.\n\t\t\t */\n\t\t\tif ( ! $( event.target ).is( 'body' ) && ! $.contains( $( '#customize-controls' )[0], event.target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check for expanded expandable controls (e.g. widgets and nav menus items), sections, and panels.\n\t\t\tapi.control.each( function( control ) {\n\t\t\t\tif ( control.expanded && control.expanded() && _.isFunction( control.collapse ) ) {\n\t\t\t\t\texpandedControls.push( control );\n\t\t\t\t}\n\t\t\t});\n\t\t\tapi.section.each( function( section ) {\n\t\t\t\tif ( section.expanded() ) {\n\t\t\t\t\texpandedSections.push( section );\n\t\t\t\t}\n\t\t\t});\n\t\t\tapi.panel.each( function( panel ) {\n\t\t\t\tif ( panel.expanded() ) {\n\t\t\t\t\texpandedPanels.push( panel );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Skip collapsing expanded controls if there are no expanded sections.\n\t\t\tif ( expandedControls.length > 0 && 0 === expandedSections.length ) {\n\t\t\t\texpandedControls.length = 0;\n\t\t\t}\n\n\t\t\t// Collapse the most granular expanded object.\n\t\t\tcollapsedObject = expandedControls[0] || expandedSections[0] || expandedPanels[0];\n\t\t\tif ( collapsedObject ) {\n\t\t\t\tcollapsedObject.collapse();\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t});\n\n\t\t$( '.customize-controls-preview-toggle' ).on( 'click', function() {\n\t\t\tapi.state( 'paneVisible' ).set( ! api.state( 'paneVisible' ).get() );\n\t\t});\n\n\t\t/*\n\t\t * Sticky header feature.\n\t\t */\n\t\t(function initStickyHeaders() {\n\t\t\tvar parentContainer = $( '.wp-full-overlay-sidebar-content' ),\n\t\t\t\tchangeContainer, getHeaderHeight, releaseStickyHeader, resetStickyHeader, positionStickyHeader,\n\t\t\t\tactiveHeader, lastScrollTop;\n\n\t\t\t/**\n\t\t\t * Determine which panel or section is currently expanded.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @access private\n\t\t\t *\n\t\t\t * @param {wp.customize.Panel|wp.customize.Section} container Construct.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tchangeContainer = function( container ) {\n\t\t\t\tvar newInstance = container,\n\t\t\t\t\texpandedSection = api.state( 'expandedSection' ).get(),\n\t\t\t\t\texpandedPanel = api.state( 'expandedPanel' ).get(),\n\t\t\t\t\theaderElement;\n\n\t\t\t\t// Release previously active header element.\n\t\t\t\tif ( activeHeader && activeHeader.element ) {\n\t\t\t\t\treleaseStickyHeader( activeHeader.element );\n\t\t\t\t}\n\n\t\t\t\tif ( ! newInstance ) {\n\t\t\t\t\tif ( ! expandedSection && expandedPanel && expandedPanel.contentContainer ) {\n\t\t\t\t\t\tnewInstance = expandedPanel;\n\t\t\t\t\t} else if ( ! expandedPanel && expandedSection && expandedSection.contentContainer ) {\n\t\t\t\t\t\tnewInstance = expandedSection;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tactiveHeader = false;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\theaderElement = newInstance.contentContainer.find( '.customize-section-title, .panel-meta' ).first();\n\t\t\t\tif ( headerElement.length ) {\n\t\t\t\t\tactiveHeader = {\n\t\t\t\t\t\tinstance: newInstance,\n\t\t\t\t\t\telement:  headerElement,\n\t\t\t\t\t\tparent:   headerElement.closest( '.customize-pane-child' ),\n\t\t\t\t\t\theight:   getHeaderHeight( headerElement )\n\t\t\t\t\t};\n\t\t\t\t\tif ( expandedSection ) {\n\t\t\t\t\t\tresetStickyHeader( activeHeader.element, activeHeader.parent );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tactiveHeader = false;\n\t\t\t\t}\n\t\t\t};\n\t\t\tapi.state( 'expandedSection' ).bind( changeContainer );\n\t\t\tapi.state( 'expandedPanel' ).bind( changeContainer );\n\n\t\t\t// Throttled scroll event handler.\n\t\t\tparentContainer.on( 'scroll', _.throttle( function() {\n\t\t\t\tif ( ! activeHeader ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar scrollTop = parentContainer.scrollTop(),\n\t\t\t\t\tisScrollingUp = ( lastScrollTop ) ? scrollTop <= lastScrollTop : true;\n\n\t\t\t\tlastScrollTop = scrollTop;\n\t\t\t\tpositionStickyHeader( activeHeader, scrollTop, isScrollingUp );\n\t\t\t}, 8 ) );\n\n\t\t\t// Release header element if it is sticky.\n\t\t\treleaseStickyHeader = function( headerElement ) {\n\t\t\t\tif ( ! headerElement.hasClass( 'is-sticky' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\theaderElement\n\t\t\t\t\t.removeClass( 'is-sticky' )\n\t\t\t\t\t.addClass( 'maybe-sticky is-in-view' )\n\t\t\t\t\t.css( 'top', parentContainer.scrollTop() + 'px' );\n\t\t\t};\n\n\t\t\t// Reset position of the sticky header.\n\t\t\tresetStickyHeader = function( headerElement, headerParent ) {\n\t\t\t\theaderElement\n\t\t\t\t\t.removeClass( 'maybe-sticky is-in-view' )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\twidth: '',\n\t\t\t\t\t\ttop: ''\n\t\t\t\t\t} );\n\t\t\t\theaderParent.css( 'padding-top', '' );\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Get header height.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @access private\n\t\t\t *\n\t\t\t * @param {jQuery} headerElement Header element.\n\t\t\t * @returns {number} Height.\n\t\t\t */\n\t\t\tgetHeaderHeight = function( headerElement ) {\n\t\t\t\tvar height = headerElement.data( 'height' );\n\t\t\t\tif ( ! height ) {\n\t\t\t\t\theight = headerElement.outerHeight();\n\t\t\t\t\theaderElement.data( 'height', height );\n\t\t\t\t}\n\t\t\t\treturn height;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Reposition header on throttled `scroll` event.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @access private\n\t\t\t *\n\t\t\t * @param {object}  header        Header.\n\t\t\t * @param {number}  scrollTop     Scroll top.\n\t\t\t * @param {boolean} isScrollingUp Is scrolling up?\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tpositionStickyHeader = function( header, scrollTop, isScrollingUp ) {\n\t\t\t\tvar headerElement = header.element,\n\t\t\t\t\theaderParent = header.parent,\n\t\t\t\t\theaderHeight = header.height,\n\t\t\t\t\theaderTop = parseInt( headerElement.css( 'top' ), 10 ),\n\t\t\t\t\tmaybeSticky = headerElement.hasClass( 'maybe-sticky' ),\n\t\t\t\t\tisSticky = headerElement.hasClass( 'is-sticky' ),\n\t\t\t\t\tisInView = headerElement.hasClass( 'is-in-view' );\n\n\t\t\t\t// When scrolling down, gradually hide sticky header.\n\t\t\t\tif ( ! isScrollingUp ) {\n\t\t\t\t\tif ( isSticky ) {\n\t\t\t\t\t\theaderTop = scrollTop;\n\t\t\t\t\t\theaderElement\n\t\t\t\t\t\t\t.removeClass( 'is-sticky' )\n\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\ttop:   headerTop + 'px',\n\t\t\t\t\t\t\t\twidth: ''\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t\tif ( isInView && scrollTop > headerTop + headerHeight ) {\n\t\t\t\t\t\theaderElement.removeClass( 'is-in-view' );\n\t\t\t\t\t\theaderParent.css( 'padding-top', '' );\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Scrolling up.\n\t\t\t\tif ( ! maybeSticky && scrollTop >= headerHeight ) {\n\t\t\t\t\tmaybeSticky = true;\n\t\t\t\t\theaderElement.addClass( 'maybe-sticky' );\n\t\t\t\t} else if ( 0 === scrollTop ) {\n\t\t\t\t\t// Reset header in base position.\n\t\t\t\t\theaderElement\n\t\t\t\t\t\t.removeClass( 'maybe-sticky is-in-view is-sticky' )\n\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\ttop:   '',\n\t\t\t\t\t\t\twidth: ''\n\t\t\t\t\t\t} );\n\t\t\t\t\theaderParent.css( 'padding-top', '' );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( isInView && ! isSticky ) {\n\t\t\t\t\t// Header is in the view but is not yet sticky.\n\t\t\t\t\tif ( headerTop >= scrollTop ) {\n\t\t\t\t\t\t// Header is fully visible.\n\t\t\t\t\t\theaderElement\n\t\t\t\t\t\t\t.addClass( 'is-sticky' )\n\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\ttop:   '',\n\t\t\t\t\t\t\t\twidth: headerParent.outerWidth() + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} else if ( maybeSticky && ! isInView ) {\n\t\t\t\t\t// Header is out of the view.\n\t\t\t\t\theaderElement\n\t\t\t\t\t\t.addClass( 'is-in-view' )\n\t\t\t\t\t\t.css( 'top', ( scrollTop - headerHeight ) + 'px' );\n\t\t\t\t\theaderParent.css( 'padding-top', headerHeight + 'px' );\n\t\t\t\t}\n\t\t\t};\n\t\t}());\n\n\t\t// Previewed device bindings.\n\t\tapi.previewedDevice = new api.Value();\n\n\t\t// Set the default device.\n\t\tapi.bind( 'ready', function() {\n\t\t\t_.find( api.settings.previewableDevices, function( value, key ) {\n\t\t\t\tif ( true === value['default'] ) {\n\t\t\t\t\tapi.previewedDevice.set( key );\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\t// Set the toggled device.\n\t\tfooterActions.find( '.devices button' ).on( 'click', function( event ) {\n\t\t\tapi.previewedDevice.set( $( event.currentTarget ).data( 'device' ) );\n\t\t});\n\n\t\t// Bind device changes.\n\t\tapi.previewedDevice.bind( function( newDevice ) {\n\t\t\tvar overlay = $( '.wp-full-overlay' ),\n\t\t\t\tdevices = '';\n\n\t\t\tfooterActions.find( '.devices button' )\n\t\t\t\t.removeClass( 'active' )\n\t\t\t\t.attr( 'aria-pressed', false );\n\n\t\t\tfooterActions.find( '.devices .preview-' + newDevice )\n\t\t\t\t.addClass( 'active' )\n\t\t\t\t.attr( 'aria-pressed', true );\n\n\t\t\t$.each( api.settings.previewableDevices, function( device ) {\n\t\t\t\tdevices += ' preview-' + device;\n\t\t\t} );\n\n\t\t\toverlay\n\t\t\t\t.removeClass( devices )\n\t\t\t\t.addClass( 'preview-' + newDevice );\n\t\t} );\n\n\t\t// Bind site title display to the corresponding field.\n\t\tif ( title.length ) {\n\t\t\tapi( 'blogname', function( setting ) {\n\t\t\t\tvar updateTitle = function() {\n\t\t\t\t\ttitle.text( $.trim( setting() ) || api.l10n.untitledBlogName );\n\t\t\t\t};\n\t\t\t\tsetting.bind( updateTitle );\n\t\t\t\tupdateTitle();\n\t\t\t} );\n\t\t}\n\n\t\t/*\n\t\t * Create a postMessage connection with a parent frame,\n\t\t * in case the Customizer frame was opened with the Customize loader.\n\t\t *\n\t\t * @see wp.customize.Loader\n\t\t */\n\t\tparent = new api.Messenger({\n\t\t\turl: api.settings.url.parent,\n\t\t\tchannel: 'loader'\n\t\t});\n\n\t\t/*\n\t\t * If we receive a 'back' event, we're inside an iframe.\n\t\t * Send any clicks to the 'Return' link to the parent page.\n\t\t */\n\t\tparent.bind( 'back', function() {\n\t\t\tcloseBtn.on( 'click.customize-controls-close', function( event ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tparent.send( 'close' );\n\t\t\t});\n\t\t});\n\n\t\t// Prompt user with AYS dialog if leaving the Customizer with unsaved changes\n\t\t$( window ).on( 'beforeunload.customize-confirm', function () {\n\t\t\tif ( ! api.state( 'saved' )() ) {\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\toverlay.removeClass( 'customize-loading' );\n\t\t\t\t}, 1 );\n\t\t\t\treturn api.l10n.saveAlert;\n\t\t\t}\n\t\t} );\n\n\t\t// Pass events through to the parent.\n\t\t$.each( [ 'saved', 'change' ], function ( i, event ) {\n\t\t\tapi.bind( event, function() {\n\t\t\t\tparent.send( event );\n\t\t\t});\n\t\t} );\n\n\t\t// Pass titles to the parent\n\t\tapi.bind( 'title', function( newTitle ) {\n\t\t\tparent.send( 'title', newTitle );\n\t\t});\n\n\t\tparent.send( 'changeset-uuid', api.settings.changeset.uuid );\n\n\t\t// Initialize the connection with the parent frame.\n\t\tparent.send( 'ready' );\n\n\t\t// Control visibility for default controls\n\t\t$.each({\n\t\t\t'background_image': {\n\t\t\t\tcontrols: [ 'background_preset', 'background_position', 'background_size', 'background_repeat', 'background_attachment' ],\n\t\t\t\tcallback: function( to ) { return !! to; }\n\t\t\t},\n\t\t\t'show_on_front': {\n\t\t\t\tcontrols: [ 'page_on_front', 'page_for_posts' ],\n\t\t\t\tcallback: function( to ) { return 'page' === to; }\n\t\t\t},\n\t\t\t'header_textcolor': {\n\t\t\t\tcontrols: [ 'header_textcolor' ],\n\t\t\t\tcallback: function( to ) { return 'blank' !== to; }\n\t\t\t}\n\t\t}, function( settingId, o ) {\n\t\t\tapi( settingId, function( setting ) {\n\t\t\t\t$.each( o.controls, function( i, controlId ) {\n\t\t\t\t\tapi.control( controlId, function( control ) {\n\t\t\t\t\t\tvar visibility = function( to ) {\n\t\t\t\t\t\t\tcontrol.container.toggle( o.callback( to ) );\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvisibility( setting.get() );\n\t\t\t\t\t\tsetting.bind( visibility );\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tapi.control( 'background_preset', function( control ) {\n\t\t\tvar visibility, defaultValues, values, toggleVisibility, updateSettings, preset;\n\n\t\t\tvisibility = { // position, size, repeat, attachment\n\t\t\t\t'default': [ false, false, false, false ],\n\t\t\t\t'fill': [ true, false, false, false ],\n\t\t\t\t'fit': [ true, false, true, false ],\n\t\t\t\t'repeat': [ true, false, false, true ],\n\t\t\t\t'custom': [ true, true, true, true ]\n\t\t\t};\n\n\t\t\tdefaultValues = [\n\t\t\t\t_wpCustomizeBackground.defaults['default-position-x'],\n\t\t\t\t_wpCustomizeBackground.defaults['default-position-y'],\n\t\t\t\t_wpCustomizeBackground.defaults['default-size'],\n\t\t\t\t_wpCustomizeBackground.defaults['default-repeat'],\n\t\t\t\t_wpCustomizeBackground.defaults['default-attachment']\n\t\t\t];\n\n\t\t\tvalues = { // position_x, position_y, size, repeat, attachment\n\t\t\t\t'default': defaultValues,\n\t\t\t\t'fill': [ 'left', 'top', 'cover', 'no-repeat', 'fixed' ],\n\t\t\t\t'fit': [ 'left', 'top', 'contain', 'no-repeat', 'fixed' ],\n\t\t\t\t'repeat': [ 'left', 'top', 'auto', 'repeat', 'scroll' ]\n\t\t\t};\n\n\t\t\t// @todo These should actually toggle the active state, but without the preview overriding the state in data.activeControls.\n\t\t\ttoggleVisibility = function( preset ) {\n\t\t\t\t_.each( [ 'background_position', 'background_size', 'background_repeat', 'background_attachment' ], function( controlId, i ) {\n\t\t\t\t\tvar control = api.control( controlId );\n\t\t\t\t\tif ( control ) {\n\t\t\t\t\t\tcontrol.container.toggle( visibility[ preset ][ i ] );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tupdateSettings = function( preset ) {\n\t\t\t\t_.each( [ 'background_position_x', 'background_position_y', 'background_size', 'background_repeat', 'background_attachment' ], function( settingId, i ) {\n\t\t\t\t\tvar setting = api( settingId );\n\t\t\t\t\tif ( setting ) {\n\t\t\t\t\t\tsetting.set( values[ preset ][ i ] );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tpreset = control.setting.get();\n\t\t\ttoggleVisibility( preset );\n\n\t\t\tcontrol.setting.bind( 'change', function( preset ) {\n\t\t\t\ttoggleVisibility( preset );\n\t\t\t\tif ( 'custom' !== preset ) {\n\t\t\t\t\tupdateSettings( preset );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\tapi.control( 'background_repeat', function( control ) {\n\t\t\tcontrol.elements[0].unsync( api( 'background_repeat' ) );\n\n\t\t\tcontrol.element = new api.Element( control.container.find( 'input' ) );\n\t\t\tcontrol.element.set( 'no-repeat' !== control.setting() );\n\n\t\t\tcontrol.element.bind( function( to ) {\n\t\t\t\tcontrol.setting.set( to ? 'repeat' : 'no-repeat' );\n\t\t\t} );\n\n\t\t\tcontrol.setting.bind( function( to ) {\n\t\t\t\tcontrol.element.set( 'no-repeat' !== to );\n\t\t\t} );\n\t\t} );\n\n\t\tapi.control( 'background_attachment', function( control ) {\n\t\t\tcontrol.elements[0].unsync( api( 'background_attachment' ) );\n\n\t\t\tcontrol.element = new api.Element( control.container.find( 'input' ) );\n\t\t\tcontrol.element.set( 'fixed' !== control.setting() );\n\n\t\t\tcontrol.element.bind( function( to ) {\n\t\t\t\tcontrol.setting.set( to ? 'scroll' : 'fixed' );\n\t\t\t} );\n\n\t\t\tcontrol.setting.bind( function( to ) {\n\t\t\t\tcontrol.element.set( 'fixed' !== to );\n\t\t\t} );\n\t\t} );\n\n\t\t// Juggle the two controls that use header_textcolor\n\t\tapi.control( 'display_header_text', function( control ) {\n\t\t\tvar last = '';\n\n\t\t\tcontrol.elements[0].unsync( api( 'header_textcolor' ) );\n\n\t\t\tcontrol.element = new api.Element( control.container.find('input') );\n\t\t\tcontrol.element.set( 'blank' !== control.setting() );\n\n\t\t\tcontrol.element.bind( function( to ) {\n\t\t\t\tif ( ! to )\n\t\t\t\t\tlast = api( 'header_textcolor' ).get();\n\n\t\t\t\tcontrol.setting.set( to ? last : 'blank' );\n\t\t\t});\n\n\t\t\tcontrol.setting.bind( function( to ) {\n\t\t\t\tcontrol.element.set( 'blank' !== to );\n\t\t\t});\n\t\t});\n\n\t\t// Change previewed URL to the homepage when changing the page_on_front.\n\t\tapi( 'show_on_front', 'page_on_front', function( showOnFront, pageOnFront ) {\n\t\t\tvar updatePreviewUrl = function() {\n\t\t\t\tif ( showOnFront() === 'page' && parseInt( pageOnFront(), 10 ) > 0 ) {\n\t\t\t\t\tapi.previewer.previewUrl.set( api.settings.url.home );\n\t\t\t\t}\n\t\t\t};\n\t\t\tshowOnFront.bind( updatePreviewUrl );\n\t\t\tpageOnFront.bind( updatePreviewUrl );\n\t\t});\n\n\t\t// Change the previewed URL to the selected page when changing the page_for_posts.\n\t\tapi( 'page_for_posts', function( setting ) {\n\t\t\tsetting.bind(function( pageId ) {\n\t\t\t\tpageId = parseInt( pageId, 10 );\n\t\t\t\tif ( pageId > 0 ) {\n\t\t\t\t\tapi.previewer.previewUrl.set( api.settings.url.home + '?page_id=' + pageId );\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Allow tabs to be entered in Custom CSS textarea.\n\t\tapi.control( 'custom_css', function setupCustomCssControl( control ) {\n\t\t\tcontrol.deferred.embedded.done( function allowTabs() {\n\t\t\t\tvar $textarea = control.container.find( 'textarea' ), textarea = $textarea[0];\n\n\t\t\t\t$textarea.on( 'blur', function onBlur() {\n\t\t\t\t\t$textarea.data( 'next-tab-blurs', false );\n\t\t\t\t} );\n\n\t\t\t\t$textarea.on( 'keydown', function onKeydown( event ) {\n\t\t\t\t\tvar selectionStart, selectionEnd, value, tabKeyCode = 9, escKeyCode = 27;\n\n\t\t\t\t\tif ( escKeyCode === event.keyCode ) {\n\t\t\t\t\t\tif ( ! $textarea.data( 'next-tab-blurs' ) ) {\n\t\t\t\t\t\t\t$textarea.data( 'next-tab-blurs', true );\n\t\t\t\t\t\t\tevent.stopPropagation(); // Prevent collapsing the section.\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Short-circuit if tab key is not being pressed or if a modifier key *is* being pressed.\n\t\t\t\t\tif ( tabKeyCode !== event.keyCode || event.ctrlKey || event.altKey || event.shiftKey ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent capturing Tab characters if Esc was pressed.\n\t\t\t\t\tif ( $textarea.data( 'next-tab-blurs' ) ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectionStart = textarea.selectionStart;\n\t\t\t\t\tselectionEnd = textarea.selectionEnd;\n\t\t\t\t\tvalue = textarea.value;\n\n\t\t\t\t\tif ( selectionStart >= 0 ) {\n\t\t\t\t\t\ttextarea.value = value.substring( 0, selectionStart ).concat( '\\t', value.substring( selectionEnd ) );\n\t\t\t\t\t\t$textarea.selectionStart = textarea.selectionEnd = selectionStart + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t} );\n\t\t\t} );\n\t\t} );\n\n\t\t// Toggle visibility of Header Video notice when active state change.\n\t\tapi.control( 'header_video', function( headerVideoControl ) {\n\t\t\theaderVideoControl.deferred.embedded.done( function() {\n\t\t\t\tvar toggleNotice = function() {\n\t\t\t\t\tvar section = api.section( headerVideoControl.section() ), notice;\n\t\t\t\t\tif ( ! section ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tnotice = section.container.find( '.header-video-not-currently-previewable:first' );\n\t\t\t\t\tif ( headerVideoControl.active.get() ) {\n\t\t\t\t\t\tnotice.stop().slideUp( 'fast' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnotice.stop().slideDown( 'fast' );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\ttoggleNotice();\n\t\t\t\theaderVideoControl.active.bind( toggleNotice );\n\t\t\t} );\n\t\t} );\n\n\t\t// Update the setting validities.\n\t\tapi.previewer.bind( 'selective-refresh-setting-validities', function handleSelectiveRefreshedSettingValidities( settingValidities ) {\n\t\t\tapi._handleSettingValidities( {\n\t\t\t\tsettingValidities: settingValidities,\n\t\t\t\tfocusInvalidControl: false\n\t\t\t} );\n\t\t} );\n\n\t\t// Focus on the control that is associated with the given setting.\n\t\tapi.previewer.bind( 'focus-control-for-setting', function( settingId ) {\n\t\t\tvar matchedControls = [];\n\t\t\tapi.control.each( function( control ) {\n\t\t\t\tvar settingIds = _.pluck( control.settings, 'id' );\n\t\t\t\tif ( -1 !== _.indexOf( settingIds, settingId ) ) {\n\t\t\t\t\tmatchedControls.push( control );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Focus on the matched control with the lowest priority (appearing higher).\n\t\t\tif ( matchedControls.length ) {\n\t\t\t\tmatchedControls.sort( function( a, b ) {\n\t\t\t\t\treturn a.priority() - b.priority();\n\t\t\t\t} );\n\t\t\t\tmatchedControls[0].focus();\n\t\t\t}\n\t\t} );\n\n\t\t// Refresh the preview when it requests.\n\t\tapi.previewer.bind( 'refresh', function() {\n\t\t\tapi.previewer.refresh();\n\t\t});\n\n\t\t// Update the edit shortcut visibility state.\n\t\tapi.state( 'paneVisible' ).bind( function( isPaneVisible ) {\n\t\t\tvar isMobileScreen;\n\t\t\tif ( window.matchMedia ) {\n\t\t\t\tisMobileScreen = window.matchMedia( 'screen and ( max-width: 640px )' ).matches;\n\t\t\t} else {\n\t\t\t\tisMobileScreen = $( window ).width() <= 640;\n\t\t\t}\n\t\t\tapi.state( 'editShortcutVisibility' ).set( isPaneVisible || isMobileScreen ? 'visible' : 'hidden' );\n\t\t} );\n\t\tif ( window.matchMedia ) {\n\t\t\twindow.matchMedia( 'screen and ( max-width: 640px )' ).addListener( function() {\n\t\t\t\tvar state = api.state( 'paneVisible' );\n\t\t\t\tstate.callbacks.fireWith( state, [ state.get(), state.get() ] );\n\t\t\t} );\n\t\t}\n\t\tapi.previewer.bind( 'edit-shortcut-visibility', function( visibility ) {\n\t\t\tapi.state( 'editShortcutVisibility' ).set( visibility );\n\t\t} );\n\t\tapi.state( 'editShortcutVisibility' ).bind( function( visibility ) {\n\t\t\tapi.previewer.send( 'edit-shortcut-visibility', visibility );\n\t\t} );\n\n\t\t// Autosave changeset.\n\t\t( function() {\n\t\t\tvar timeoutId, updateChangesetWithReschedule, scheduleChangesetUpdate, updatePending = false;\n\n\t\t\t/**\n\t\t\t * Request changeset update and then re-schedule the next changeset update time.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @private\n\t\t\t */\n\t\t\tupdateChangesetWithReschedule = function() {\n\t\t\t\tif ( ! updatePending ) {\n\t\t\t\t\tupdatePending = true;\n\t\t\t\t\tapi.requestChangesetUpdate().always( function() {\n\t\t\t\t\t\tupdatePending = false;\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tscheduleChangesetUpdate();\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Schedule changeset update.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @private\n\t\t\t */\n\t\t\tscheduleChangesetUpdate = function() {\n\t\t\t\tclearTimeout( timeoutId );\n\t\t\t\ttimeoutId = setTimeout( function() {\n\t\t\t\t\tupdateChangesetWithReschedule();\n\t\t\t\t}, api.settings.timeouts.changesetAutoSave );\n\t\t\t};\n\n\t\t\t// Start auto-save interval for updating changeset.\n\t\t\tscheduleChangesetUpdate();\n\n\t\t\t// Save changeset when focus removed from window.\n\t\t\t$( window ).on( 'blur.wp-customize-changeset-update', function() {\n\t\t\t\tupdateChangesetWithReschedule();\n\t\t\t} );\n\n\t\t\t// Save changeset before unloading window.\n\t\t\t$( window ).on( 'beforeunload.wp-customize-changeset-update', function() {\n\t\t\t\tupdateChangesetWithReschedule();\n\t\t\t} );\n\t\t} ());\n\n\t\tapi.trigger( 'ready' );\n\t});\n\n})( wp, jQuery );\n", "!function(a,b){var c,d,e,f=wp.customize;f.Setting=f.Value.extend({initialize:function(a,b,c){var d=this;f.Value.prototype.initialize.call(d,b,c),d.id=a,d.transport=d.transport||\"refresh\",d._dirty=c.dirty||!1,d.notifications=new f.Values({defaultConstructor:f.Notification}),d.bind(d.preview)},preview:function(){var a,b=this;a=b.transport,\"postMessage\"!==a||f.state(\"previewerAlive\").get()||(a=\"refresh\"),\"postMessage\"===a?b.previewer.send(\"setting\",[b.id,b()]):\"refresh\"===a&&b.previewer.refresh()},findControls:function(){var a=this,b=[];return f.control.each(function(c){_.each(c.settings,function(d){d.id===a.id&&b.push(c)})}),b}}),f._latestRevision=0,f._lastSavedRevision=0,f._latestSettingRevisions={},f.bind(\"change\",function(a){f._latestRevision+=1,f._latestSettingRevisions[a.id]=f._latestRevision}),f.bind(\"ready\",function(){f.bind(\"add\",function(a){a._dirty&&(f._latestRevision+=1,f._latestSettingRevisions[a.id]=f._latestRevision)})}),f.dirtyValues=function(a){var b={};return f.each(function(c){var d;c._dirty&&(d=f._latestSettingRevisions[c.id],f.state(\"changesetStatus\").get()&&a&&a.unsaved&&(_.isUndefined(d)||d<=f._lastSavedRevision)||(b[c.id]=c.get()))}),b},f.requestChangesetUpdate=function(a){var c,d,e,g={};return c=new b.Deferred,a&&_.extend(g,a),_.each(f.dirtyValues({unsaved:!0}),function(b,c){a&&null===a[c]||(g[c]=_.extend({},g[c]||{},{value:b}))}),_.isEmpty(g)?(c.resolve({}),c.promise()):(f.state(\"processing\").set(f.state(\"processing\").get()+1),c.always(function(){f.state(\"processing\").set(f.state(\"processing\").get()-1)}),f.trigger(\"changeset-save\",g),e=f.previewer.query({excludeCustomizedSaved:!0}),delete e.customized,_.extend(e,{nonce:f.settings.nonce.save,customize_theme:f.settings.theme.stylesheet,customize_changeset_data:JSON.stringify(g)}),d=wp.ajax.post(\"customize_save\",e),d.done(function(a){var b={};f._lastSavedRevision=Math.max(f._latestRevision,f._lastSavedRevision),f.state(\"changesetStatus\").set(a.changeset_status),c.resolve(a),f.trigger(\"changeset-saved\",a),a.setting_validities&&_.each(a.setting_validities,function(a,c){!0===a&&_.isObject(g[c])&&!_.isUndefined(g[c].value)&&(b[c]=g[c].value)}),f.previewer.send(\"changeset-saved\",_.extend({},a,{saved_changeset_values:b}))}),d.fail(function(a){c.reject(a),f.trigger(\"changeset-error\",a)}),d.always(function(a){a.setting_validities&&f._handleSettingValidities({settingValidities:a.setting_validities})}),c.promise())},f.utils.bubbleChildValueChanges=function(a,c){b.each(c,function(b,c){a[c].bind(function(b,c){a.parent&&b!==c&&a.parent.trigger(\"change\",a)})})},d=function(a){var b,c,d,e;b=this,a=a||{},d=function(){var a;a=(b.extended(f.Panel)||b.extended(f.Section))&&b.expanded&&b.expanded()?b.contentContainer:b.container,e=a.find(\".control-focus:first\"),0===e.length&&(e=a.find(\"input, select, textarea, button, object, a[href], [tabindex]\").filter(\":visible\").first()),e.focus()},a.completeCallback?(c=a.completeCallback,a.completeCallback=function(){d(),c()}):a.completeCallback=d,f.state(\"paneVisible\").set(!0),b.expand?b.expand(a):a.completeCallback()},f.utils.prioritySort=function(a,b){return a.priority()===b.priority()&&\"number\"==typeof a.params.instanceNumber&&\"number\"==typeof b.params.instanceNumber?a.params.instanceNumber-b.params.instanceNumber:a.priority()-b.priority()},f.utils.isKeydownButNotEnterEvent=function(a){return\"keydown\"===a.type&&13!==a.which},f.utils.areElementListsEqual=function(a,c){var d=a.length===c.length&&-1===_.indexOf(_.map(_.zip(a,c),function(a){return b(a[0]).is(a[1])}),!1);return d},e=function(){var a,b,c;return a=document.createElement(\"div\"),b={transition:\"transitionend\",OTransition:\"oTransitionEnd\",MozTransition:\"transitionend\",WebkitTransition:\"webkitTransitionEnd\"},c=_.find(_.keys(b),function(b){return!_.isUndefined(a.style[b])}),c?b[c]:null}(),c=f.Class.extend({defaultActiveArguments:{duration:\"fast\",completeCallback:b.noop},defaultExpandedArguments:{duration:\"fast\",completeCallback:b.noop},containerType:\"container\",defaults:{title:\"\",description:\"\",priority:100,type:\"default\",content:null,active:!0,instanceNumber:null},initialize:function(a,c){var d=this;d.id=a,c=c||{},c.params=_.defaults(c.params||{},d.defaults),b.extend(d,c),d.templateSelector=\"customize-\"+d.containerType+\"-\"+d.params.type,d.container=b(d.params.content),0===d.container.length&&(d.container=b(d.getContainer())),d.headContainer=d.container,d.contentContainer=d.getContent(),d.container=d.container.add(d.contentContainer),d.deferred={embedded:new b.Deferred},d.priority=new f.Value,d.active=new f.Value,d.activeArgumentsQueue=[],d.expanded=new f.Value,d.expandedArgumentsQueue=[],d.active.bind(function(a){var c=d.activeArgumentsQueue.shift();c=b.extend({},d.defaultActiveArguments,c),a=a&&d.isContextuallyActive(),d.onChangeActive(a,c)}),d.expanded.bind(function(a){var c=d.expandedArgumentsQueue.shift();c=b.extend({},d.defaultExpandedArguments,c),d.onChangeExpanded(a,c)}),d.deferred.embedded.done(function(){d.attachEvents()}),f.utils.bubbleChildValueChanges(d,[\"priority\",\"active\"]),d.priority.set(d.params.priority),d.active.set(d.params.active),d.expanded.set(!1)},ready:function(){},_children:function(a,b){var c=this,d=[];return f[b].each(function(b){b[a].get()===c.id&&d.push(b)}),d.sort(f.utils.prioritySort),d},isContextuallyActive:function(){throw new Error(\"Container.isContextuallyActive() must be overridden in a subclass.\")},onChangeActive:function(a,c){var d,e,g=this,h=g.headContainer;return c.unchanged?void(c.completeCallback&&c.completeCallback()):(d=\"resolved\"===f.previewer.deferred.active.state()?c.duration:0,g.extended(f.Panel)&&(f.panel.each(function(a){a!==g&&a.expanded()&&(e=a,d=0)}),a||_.each(g.sections(),function(a){a.collapse({duration:0})})),void(b.contains(document,h.get(0))?a?h.slideDown(d,c.completeCallback):g.expanded()?g.collapse({duration:d,completeCallback:function(){h.slideUp(d,c.completeCallback)}}):h.slideUp(d,c.completeCallback):(h.toggle(a),c.completeCallback&&c.completeCallback())))},_toggleActive:function(a,b){var c=this;return b=b||{},a&&this.active.get()||!a&&!this.active.get()?(b.unchanged=!0,c.onChangeActive(c.active.get(),b),!1):(b.unchanged=!1,this.activeArgumentsQueue.push(b),this.active.set(a),!0)},activate:function(a){return this._toggleActive(!0,a)},deactivate:function(a){return this._toggleActive(!1,a)},onChangeExpanded:function(){throw new Error(\"Must override with subclass.\")},_toggleExpanded:function(a,b){var c,d=this;return b=b||{},c=b.completeCallback,!(a&&!d.active())&&(f.state(\"paneVisible\").set(!0),b.completeCallback=function(){c&&c.apply(d,arguments),a?d.container.trigger(\"expanded\"):d.container.trigger(\"collapsed\")},a&&d.expanded.get()||!a&&!d.expanded.get()?(b.unchanged=!0,d.onChangeExpanded(d.expanded.get(),b),!1):(b.unchanged=!1,d.expandedArgumentsQueue.push(b),d.expanded.set(a),!0))},expand:function(a){return this._toggleExpanded(!0,a)},collapse:function(a){return this._toggleExpanded(!1,a)},_animateChangeExpanded:function(a){if(!e)return void(a&&a());var c,d,g,h=this,i=h.contentContainer,j=i.closest(\".wp-full-overlay\");c=j.add(i),g=!h.panel||\"\"===h.panel()||!!f.panel(h.panel()).contentContainer.hasClass(\"skip-transition\"),g&&(c=c.add(\"#customize-info, .customize-pane-parent\")),d=function(f){2===f.eventPhase&&b(f.target).is(i)&&(i.off(e,d),c.removeClass(\"busy\"),a&&a())},i.on(e,d),c.addClass(\"busy\"),_.defer(function(){var a=i.closest(\".wp-full-overlay-sidebar-content\"),b=a.scrollTop(),c=i.data(\"previous-scrollTop\")||0,d=h.expanded();d&&0<b?(i.css(\"top\",b+\"px\"),i.data(\"previous-scrollTop\",b)):!d&&0<b+c&&(i.css(\"top\",c-b+\"px\"),a.scrollTop(c))})},focus:d,getContainer:function(){var a,c=this;return a=0!==b(\"#tmpl-\"+c.templateSelector).length?wp.template(c.templateSelector):wp.template(\"customize-\"+c.containerType+\"-default\"),a&&c.container?b.trim(a(c.params)):\"<li></li>\"},getContent:function(){var a=this,b=a.container,c=b.find(\".accordion-section-content, .control-panel-content\").first(),d=\"sub-\"+b.attr(\"id\"),e=d,f=b.attr(\"aria-owns\");return f&&(e=e+\" \"+f),b.attr(\"aria-owns\",e),c.detach().attr({id:d,\"class\":\"customize-pane-child \"+c.attr(\"class\")+\" \"+b.attr(\"class\")})}}),f.Section=c.extend({containerType:\"section\",defaults:{title:\"\",description:\"\",priority:100,type:\"default\",content:null,active:!0,instanceNumber:null,panel:null,customizeAction:\"\"},initialize:function(a,d){var e=this;c.prototype.initialize.call(e,a,d),e.id=a,e.panel=new f.Value,e.panel.bind(function(a){b(e.headContainer).toggleClass(\"control-subsection\",!!a)}),e.panel.set(e.params.panel||\"\"),f.utils.bubbleChildValueChanges(e,[\"panel\"]),e.embed(),e.deferred.embedded.done(function(){e.ready()})},embed:function(){var a,c=this,d=b(\"#customize-theme-controls\");a=function(a){var e;a?f.panel(a,function(a){a.deferred.embedded.done(function(){e=a.contentContainer,c.headContainer.parent().is(e)||e.append(c.headContainer),c.contentContainer.parent().is(c.headContainer)||d.append(c.contentContainer),c.deferred.embedded.resolve()})}):(e=b(\".customize-pane-parent\"),c.headContainer.parent().is(e)||e.append(c.headContainer),c.contentContainer.parent().is(c.headContainer)||d.append(c.contentContainer),c.deferred.embedded.resolve())},c.panel.bind(a),a(c.panel.get())},attachEvents:function(){var a,b,c=this;c.container.hasClass(\"cannot-expand\")||(c.container.find(\".accordion-section-title, .customize-section-back\").on(\"click keydown\",function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),c.expanded()?c.collapse():c.expand())}),c.container.find(\".customize-section-title .customize-help-toggle\").on(\"click\",function(){a=c.container.find(\".section-meta\"),a.hasClass(\"cannot-expand\")||(b=a.find(\".customize-section-description:first\"),b.toggleClass(\"open\"),b.slideToggle(),b.attr(\"aria-expanded\",function(a,b){return\"true\"===b?\"false\":\"true\"}))}))},isContextuallyActive:function(){var a=this,b=a.controls(),c=0;return _(b).each(function(a){a.active()&&(c+=1)}),0!==c},controls:function(){return this._children(\"section\",\"control\")},onChangeExpanded:function(a,c){var d,e,g=this,h=g.headContainer.closest(\".wp-full-overlay-sidebar-content\"),i=g.contentContainer,j=g.headContainer.closest(\".wp-full-overlay\"),k=i.find(\".customize-section-back\"),l=g.headContainer.find(\".accordion-section-title\").first();a&&!i.hasClass(\"open\")?(d=c.unchanged?c.completeCallback:b.proxy(function(){g._animateChangeExpanded(function(){l.attr(\"tabindex\",\"-1\"),k.attr(\"tabindex\",\"0\"),k.focus(),i.css(\"top\",\"\"),h.scrollTop(0),c.completeCallback&&c.completeCallback()}),i.addClass(\"open\"),j.addClass(\"section-open\"),f.state(\"expandedSection\").set(g)},this),c.allowMultiple||f.section.each(function(a){a!==g&&a.collapse({duration:c.duration})}),g.panel()?f.panel(g.panel()).expand({duration:c.duration,completeCallback:d}):(f.panel.each(function(a){a.collapse()}),d())):!a&&i.hasClass(\"open\")?(g.panel()&&(e=f.panel(g.panel()),e.contentContainer.hasClass(\"skip-transition\")&&e.collapse()),g._animateChangeExpanded(function(){k.attr(\"tabindex\",\"-1\"),l.attr(\"tabindex\",\"0\"),l.focus(),i.css(\"top\",\"\"),c.completeCallback&&c.completeCallback()}),i.removeClass(\"open\"),j.removeClass(\"section-open\"),g===f.state(\"expandedSection\").get()&&f.state(\"expandedSection\").set(!1)):c.completeCallback&&c.completeCallback()}}),f.ThemesSection=f.Section.extend({currentTheme:\"\",overlay:\"\",template:\"\",screenshotQueue:null,$window:b(window),initialize:function(){return this.$customizeSidebar=b(\".wp-full-overlay-sidebar-content:first\"),f.Section.prototype.initialize.apply(this,arguments)},ready:function(){var a=this;a.overlay=a.container.find(\".theme-overlay\"),a.template=wp.template(\"customize-themes-details-view\"),a.container.on(\"keydown\",function(b){a.overlay.find(\".theme-wrap\").is(\":visible\")&&(39===b.keyCode&&a.nextTheme(),37===b.keyCode&&a.previousTheme(),27===b.keyCode&&(a.closeDetails(),b.stopPropagation()))}),_.bindAll(this,\"renderScreenshots\")},isContextuallyActive:function(){return this.active()},attachEvents:function(){var a=this;a.container.find(\".change-theme, .customize-theme\").on(\"click keydown\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),a.expanded()?a.collapse():a.expand())}),a.container.on(\"click keydown\",\".left\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),a.previousTheme())}),a.container.on(\"click keydown\",\".right\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),a.nextTheme())}),a.container.on(\"click keydown\",\".theme-backdrop, .close\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),a.closeDetails())});var b=_.throttle(_.bind(a.renderScreenshots,this),100);a.container.on(\"input\",\"#themes-filter\",function(c){var d,e=c.currentTarget.value.toLowerCase().trim().replace(\"-\",\" \"),f=a.controls();_.each(f,function(a){a.filter(e)}),b(),d=a.container.find(\"li.customize-control:visible\").length,a.container.find(\".theme-count\").text(d)}),f.bind(\"ready\",function(){_.each(a.controls().slice(0,3),function(a){var b,c=a.params.theme.screenshot[0];c&&(b=new Image,b.src=c)})})},onChangeExpanded:function(a,b){if(b.unchanged)return void(b.completeCallback&&b.completeCallback());var c=this,d=c.contentContainer,e=d.closest(\".wp-full-overlay\"),g=d.closest(\".wp-full-overlay-sidebar-content\"),h=d.find(\".customize-theme\"),i=c.headContainer.find(\".change-theme\");a&&!d.hasClass(\"current-panel\")?(f.section.each(function(a){a!==c&&a.collapse({duration:b.duration})}),f.panel.each(function(a){a.collapse({duration:0})}),c._animateChangeExpanded(function(){i.attr(\"tabindex\",\"-1\"),h.attr(\"tabindex\",\"0\"),h.focus(),d.css(\"top\",\"\"),g.scrollTop(0),b.completeCallback&&b.completeCallback()}),e.addClass(\"in-themes-panel\"),d.addClass(\"current-panel\"),_.delay(c.renderScreenshots,10),c.$customizeSidebar.on(\"scroll.customize-themes-section\",_.throttle(c.renderScreenshots,300))):!a&&d.hasClass(\"current-panel\")&&(c._animateChangeExpanded(function(){i.attr(\"tabindex\",\"0\"),h.attr(\"tabindex\",\"-1\"),i.focus(),d.css(\"top\",\"\"),b.completeCallback&&b.completeCallback()}),e.removeClass(\"in-themes-panel\"),d.removeClass(\"current-panel\"),c.$customizeSidebar.off(\"scroll.customize-themes-section\"))},renderScreenshots:function(){var a=this;null===a.screenshotQueue&&(a.screenshotQueue=a.controls()),a.screenshotQueue.length&&(a.screenshotQueue=_.filter(a.screenshotQueue,function(b){var c=b.container.find(\".theme-screenshot\"),d=c.find(\"img\");if(!d.length)return!1;if(d.is(\":hidden\"))return!0;var e=a.$window.scrollTop(),f=e+a.$window.height(),g=d.offset().top,h=c.height(),i=g+h,j=3*h,k=i>=e-j&&g<=f+j;return k&&b.container.trigger(\"render-screenshot\"),!k}))},nextTheme:function(){var a=this;a.getNextTheme()&&a.showDetails(a.getNextTheme(),function(){a.overlay.find(\".right\").focus()})},getNextTheme:function(){var a,b;return a=f.control(\"theme_\"+this.currentTheme),b=a.container.next(\"li.customize-control-theme\"),!!b.length&&(b=b[0].id.replace(\"customize-control-\",\"\"),a=f.control(b),a.params.theme)},previousTheme:function(){var a=this;a.getPreviousTheme()&&a.showDetails(a.getPreviousTheme(),function(){a.overlay.find(\".left\").focus()})},getPreviousTheme:function(){var a,b;return a=f.control(\"theme_\"+this.currentTheme),b=a.container.prev(\"li.customize-control-theme\"),!!b.length&&(b=b[0].id.replace(\"customize-control-\",\"\"),a=f.control(b),a.params.theme)},updateLimits:function(){this.getNextTheme()||this.overlay.find(\".right\").addClass(\"disabled\"),this.getPreviousTheme()||this.overlay.find(\".left\").addClass(\"disabled\")},loadThemePreview:function(a){var c,d,e,g=b.Deferred();return e=document.createElement(\"a\"),e.href=location.href,e.search=b.param(_.extend(f.utils.parseQueryString(e.search.substr(1)),{theme:a,changeset_uuid:f.settings.changeset.uuid})),d=b(\".wp-full-overlay\"),d.addClass(\"customize-loading\"),c=function(){var a;f.state(\"processing\").get()>0||(f.state(\"processing\").unbind(c),a=f.requestChangesetUpdate(),a.done(function(){b(window).off(\"beforeunload.customize-confirm\"),top.location.href=e.href,g.resolve()}),a.fail(function(){d.removeClass(\"customize-loading\"),g.reject()}))},0===f.state(\"processing\").get()?c():f.state(\"processing\").bind(c),g.promise()},showDetails:function(a,c){var d,e=this;c=c||function(){},e.currentTheme=a.id,e.overlay.html(e.template(a)).fadeIn(\"fast\").focus(),b(\"body\").addClass(\"modal-open\"),e.containFocus(e.overlay),e.updateLimits(),d=e.overlay.find(\".inactive-theme > a\"),d.on(\"click\",function(b){b.preventDefault(),d.hasClass(\"disabled\")||(d.addClass(\"disabled\"),e.loadThemePreview(a.id).fail(function(){d.removeClass(\"disabled\")}))}),c()},closeDetails:function(){b(\"body\").removeClass(\"modal-open\"),this.overlay.fadeOut(\"fast\"),f.control(\"theme_\"+this.currentTheme).focus()},containFocus:function(a){var c;a.on(\"keydown\",function(d){if(9===d.keyCode)return c=b(\":tabbable\",a),c.last()[0]!==d.target||d.shiftKey?c.first()[0]===d.target&&d.shiftKey?(c.last().focus(),!1):void 0:(c.first().focus(),!1)})}}),f.Panel=c.extend({containerType:\"panel\",initialize:function(a,b){var d=this;c.prototype.initialize.call(d,a,b),d.embed(),d.deferred.embedded.done(function(){d.ready()})},embed:function(){var a=this,c=b(\"#customize-theme-controls\"),d=b(\".customize-pane-parent\");a.headContainer.parent().is(d)||d.append(a.headContainer),a.contentContainer.parent().is(a.headContainer)||(c.append(a.contentContainer),a.renderContent()),a.deferred.embedded.resolve()},attachEvents:function(){var a,c=this;c.headContainer.find(\".accordion-section-title\").on(\"click keydown\",function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),c.expanded()||c.expand())}),c.container.find(\".customize-panel-back\").on(\"click keydown\",function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),c.expanded()&&c.collapse())}),a=c.container.find(\".panel-meta:first\"),a.find(\"> .accordion-section-title .customize-help-toggle\").on(\"click keydown\",function(d){if(!f.utils.isKeydownButNotEnterEvent(d)&&(d.preventDefault(),!a.hasClass(\"cannot-expand\"))){var e=a.find(\".customize-panel-description:first\");a.hasClass(\"open\")?(a.toggleClass(\"open\"),e.slideUp(c.defaultExpandedArguments.duration),b(this).attr(\"aria-expanded\",!1)):(e.slideDown(c.defaultExpandedArguments.duration),a.toggleClass(\"open\"),b(this).attr(\"aria-expanded\",!0))}})},sections:function(){return this._children(\"panel\",\"section\")},isContextuallyActive:function(){var a=this,b=a.sections(),c=0;return _(b).each(function(a){a.active()&&a.isContextuallyActive()&&(c+=1)}),0!==c},onChangeExpanded:function(a,b){if(b.unchanged)return void(b.completeCallback&&b.completeCallback());var c,d=this,e=d.contentContainer,g=e.closest(\".wp-full-overlay\"),h=e.closest(\".wp-full-overlay-sidebar-content\"),i=d.headContainer.find(\".accordion-section-title\"),j=e.find(\".customize-panel-back\"),k=d.sections();a&&!e.hasClass(\"current-panel\")?(f.section.each(function(a){d.id!==a.panel()&&a.collapse({duration:0})}),f.panel.each(function(a){d!==a&&a.collapse({duration:0})}),d.params.autoExpandSoleSection&&1===k.length&&k[0].active.get()?(e.addClass(\"current-panel skip-transition\"),g.addClass(\"in-sub-panel\"),k[0].expand({completeCallback:b.completeCallback})):(d._animateChangeExpanded(function(){i.attr(\"tabindex\",\"-1\"),j.attr(\"tabindex\",\"0\"),j.focus(),e.css(\"top\",\"\"),h.scrollTop(0),b.completeCallback&&b.completeCallback()}),e.addClass(\"current-panel\"),g.addClass(\"in-sub-panel\")),f.state(\"expandedPanel\").set(d)):!a&&e.hasClass(\"current-panel\")&&(c=e.hasClass(\"skip-transition\"),c?e.removeClass(\"skip-transition\"):d._animateChangeExpanded(function(){i.attr(\"tabindex\",\"0\"),j.attr(\"tabindex\",\"-1\"),i.focus(),e.css(\"top\",\"\"),b.completeCallback&&b.completeCallback()}),g.removeClass(\"in-sub-panel\"),e.removeClass(\"current-panel\"),d===f.state(\"expandedPanel\").get()&&f.state(\"expandedPanel\").set(!1))},renderContent:function(){var a,c=this;a=0!==b(\"#tmpl-\"+c.templateSelector+\"-content\").length?wp.template(c.templateSelector+\"-content\"):wp.template(\"customize-panel-default-content\"),a&&c.headContainer&&c.contentContainer.html(a(c.params))}}),f.Control=f.Class.extend({defaultActiveArguments:{duration:\"fast\",completeCallback:b.noop},initialize:function(a,c){var d,e,g,h=this;h.params={},b.extend(h,c||{}),h.id=a,h.selector=\"#customize-control-\"+a.replace(/\\]/g,\"\").replace(/\\[/g,\"-\"),h.templateSelector=\"customize-control-\"+h.params.type+\"-content\",h.container=b(h.params.content?h.params.content:h.selector),h.deferred={embedded:new b.Deferred},h.section=new f.Value,h.priority=new f.Value,h.active=new f.Value,h.activeArgumentsQueue=[],h.notifications=new f.Values({defaultConstructor:f.Notification}),h.elements=[],d=h.container.find(\"[data-customize-setting-link]\"),e={},d.each(function(){var a,c=b(this);if(c.is(\":radio\")){if(a=c.prop(\"name\"),e[a])return;e[a]=!0,c=d.filter('[name=\"'+a+'\"]')}f(c.data(\"customizeSettingLink\"),function(a){var b=new f.Element(c);h.elements.push(b),b.sync(a),b.set(a())})}),h.active.bind(function(a){var c=h.activeArgumentsQueue.shift();c=b.extend({},h.defaultActiveArguments,c),h.onChangeActive(a,c)}),h.section.set(h.params.section),h.priority.set(isNaN(h.params.priority)?10:h.params.priority),h.active.set(h.params.active),f.utils.bubbleChildValueChanges(h,[\"section\",\"priority\",\"active\"]),g=b.map(h.params.settings,function(a){return a}),0===g.length?(h.setting=null,h.settings={},h.embed()):f.apply(f,g.concat(function(){var a;h.settings={};for(a in h.params.settings)h.settings[a]=f(h.params.settings[a]);h.setting=h.settings[\"default\"]||null,_.each(h.settings,function(a){a.notifications.bind(\"add\",function(b){var c,d,e;d=a.id+\":\"+b.code,e=_.extend({},b,{setting:a.id}),c=new f.Notification(d,e),h.notifications.add(c.code,c)}),a.notifications.bind(\"remove\",function(b){h.notifications.remove(a.id+\":\"+b.code)})}),h.embed()})),h.deferred.embedded.done(function(){var a=_.debounce(function(){h.renderNotifications()});h.notifications.bind(\"add\",function(b){wp.a11y.speak(b.message,\"assertive\"),a()}),h.notifications.bind(\"remove\",a),h.renderNotifications(),h.ready()})},embed:function(){var a,b=this;a=function(a){var c;a&&f.section(a,function(a){a.deferred.embedded.done(function(){c=a.contentContainer.is(\"ul\")?a.contentContainer:a.contentContainer.find(\"ul:first\"),b.container.parent().is(c)||(c.append(b.container),b.renderContent()),b.deferred.embedded.resolve()})})},b.section.bind(a),a(b.section.get())},ready:function(){var a,c=this;\"dropdown-pages\"===c.params.type&&c.params.allow_addition&&(a=c.container.find(\".new-content-item\"),a.hide(),c.container.on(\"click\",\".add-new-toggle\",function(c){b(c.currentTarget).slideUp(180),a.slideDown(180),a.find(\".create-item-input\").focus()}),c.container.on(\"click\",\".add-content\",function(){c.addNewPage()}),c.container.on(\"keyup\",\".create-item-input\",function(a){13===a.which&&c.addNewPage()}))},getNotificationsContainerElement:function(){var a,c,d=this;return c=d.container.find(\".customize-control-notifications-container:first\"),c.length?c:(c=b('<div class=\"customize-control-notifications-container\"></div>'),d.container.hasClass(\"customize-control-nav_menu_item\")?d.container.find(\".menu-item-settings:first\").prepend(c):d.container.hasClass(\"customize-control-widget_form\")?d.container.find(\".widget-inside:first\").prepend(c):(a=d.container.find(\".customize-control-title\"),a.length?a.after(c):d.container.prepend(c)),c)},renderNotifications:function(){var a,c,d=this,e=!1;a=d.getNotificationsContainerElement(),a&&a.length&&(c=[],d.notifications.each(function(a){c.push(a),\"error\"===a.type&&(e=!0)}),0===c.length?a.stop().slideUp(\"fast\"):a.stop().slideDown(\"fast\",null,function(){b(this).css(\"height\",\"auto\")}),d.notificationsTemplate||(d.notificationsTemplate=wp.template(\"customize-control-notifications\")),d.container.toggleClass(\"has-notifications\",0!==c.length),d.container.toggleClass(\"has-error\",e),a.empty().append(b.trim(d.notificationsTemplate({notifications:c,altNotice:Boolean(d.altNotice)}))))},expand:function(a){f.section(this.section()).expand(a)},focus:d,onChangeActive:function(a,c){return c.unchanged?void(c.completeCallback&&c.completeCallback()):void(b.contains(document,this.container[0])?a?this.container.slideDown(c.duration,c.completeCallback):this.container.slideUp(c.duration,c.completeCallback):(this.container.toggle(a),c.completeCallback&&c.completeCallback()))},toggle:function(a){return this.onChangeActive(a,this.defaultActiveArguments)},activate:c.prototype.activate,deactivate:c.prototype.deactivate,_toggleActive:c.prototype._toggleActive,dropdownInit:function(){var a=this,b=this.container.find(\".dropdown-status\"),c=this.params,d=!1,e=function(a){\"string\"==typeof a&&c.statuses&&c.statuses[a]?b.html(c.statuses[a]).show():b.hide()};this.container.on(\"click keydown\",\".dropdown\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),d||a.container.toggleClass(\"open\"),a.container.hasClass(\"open\")&&a.container.parent().parent().find(\"li.library-selected\").focus(),d=!0,setTimeout(function(){d=!1},400))}),this.setting.bind(e),e(this.setting())},renderContent:function(){var a,c=this;0!==b(\"#tmpl-\"+c.templateSelector).length&&(a=wp.template(c.templateSelector),a&&c.container&&c.container.html(a(c.params)))},addNewPage:function(){var a,c,d,e,g,h,i=this;if(\"dropdown-pages\"===i.params.type&&i.params.allow_addition&&f.Menus){if(c=i.container.find(\".add-new-toggle\"),d=i.container.find(\".new-content-item\"),e=i.container.find(\".create-item-input\"),g=e.val(),h=i.container.find(\"select\"),!g)return void e.addClass(\"invalid\");e.removeClass(\"invalid\"),e.attr(\"disabled\",\"disabled\"),a=f.Menus.insertAutoDraftPost({post_title:g,post_type:\"page\"}),a.done(function(a){var e,j,k;e=new f.Menus.AvailableItemModel({id:\"post-\"+a.post_id,title:g,type:\"post_type\",type_label:f.Menus.data.l10n.page_label,object:\"page\",object_id:a.post_id,url:a.url}),f.Menus.availableMenuItemsPanel.collection.add(e),j=b(\"#available-menu-items-post_type-page\").find(\".available-menu-items-list\"),k=wp.template(\"available-menu-item\"),j.prepend(k(e.attributes)),h.focus(),i.setting.set(String(a.post_id)),d.slideUp(180),c.slideDown(180)}),a.always(function(){e.val(\"\").removeAttr(\"disabled\")})}}}),f.ColorControl=f.Control.extend({ready:function(){var a,b=this,c=\"hue\"===this.params.mode,d=!1;c?(a=this.container.find(\".color-picker-hue\"),a.val(b.setting()).wpColorPicker({change:function(a,c){d=!0,b.setting(c.color.h()),d=!1}})):(a=this.container.find(\".color-picker-hex\"),a.val(b.setting()).wpColorPicker({change:function(){d=!0,b.setting.set(a.wpColorPicker(\"color\")),d=!1},clear:function(){d=!0,b.setting.set(\"\"),d=!1}})),b.setting.bind(function(b){d||(a.val(b),a.wpColorPicker(\"color\",b))}),b.container.on(\"keydown\",function(c){var d;27===c.which&&(d=b.container.find(\".wp-picker-container\"),d.hasClass(\"wp-picker-active\")&&(a.wpColorPicker(\"close\"),b.container.find(\".wp-color-result\").focus(),c.stopPropagation()))})}}),f.MediaControl=f.Control.extend({ready:function(){function a(a){var d=b.Deferred();c.extended(f.UploadControl)?d.resolve():(a=parseInt(a,10),_.isNaN(a)||a<=0?(delete c.params.attachment,d.resolve()):c.params.attachment&&c.params.attachment.id===a&&d.resolve()),\"pending\"===d.state()&&wp.media.attachment(a).fetch().done(function(){c.params.attachment=this.attributes,d.resolve(),wp.customize.previewer.send(c.setting.id+\"-attachment-data\",this.attributes)}),d.done(function(){c.renderContent()})}var c=this;_.bindAll(c,\"restoreDefault\",\"removeFile\",\"openFrame\",\"select\",\"pausePlayer\"),c.container.on(\"click keydown\",\".upload-button\",c.openFrame),c.container.on(\"click keydown\",\".upload-button\",c.pausePlayer),c.container.on(\"click keydown\",\".thumbnail-image img\",c.openFrame),c.container.on(\"click keydown\",\".default-button\",c.restoreDefault),c.container.on(\"click keydown\",\".remove-button\",c.pausePlayer),c.container.on(\"click keydown\",\".remove-button\",c.removeFile),c.container.on(\"click keydown\",\".remove-button\",c.cleanupPlayer),f.section(c.section()).container.on(\"expanded\",function(){c.player&&c.player.setControlsSize()}).on(\"collapsed\",function(){c.pausePlayer()}),a(c.setting()),c.setting.bind(a)},pausePlayer:function(){this.player&&this.player.pause()},cleanupPlayer:function(){this.player&&wp.media.mixin.removePlayer(this.player)},openFrame:function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),this.frame||this.initFrame(),this.frame.open())},initFrame:function(){this.frame=wp.media({button:{text:this.params.button_labels.frame_button},states:[new wp.media.controller.Library({title:this.params.button_labels.frame_title,library:wp.media.query({type:this.params.mime_type}),multiple:!1,date:!1})]}),this.frame.on(\"select\",this.select)},select:function(){var a,b=this.frame.state().get(\"selection\").first().toJSON(),c=window._wpmejsSettings||{};this.params.attachment=b,this.setting(b.id),a=this.container.find(\"audio, video\").get(0),a?this.player=new MediaElementPlayer(a,c):this.cleanupPlayer()},restoreDefault:function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),this.params.attachment=this.params.defaultAttachment,this.setting(this.params.defaultAttachment.url))},removeFile:function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),this.params.attachment={},this.setting(\"\"),this.renderContent())}}),f.UploadControl=f.MediaControl.extend({select:function(){var a,b=this.frame.state().get(\"selection\").first().toJSON(),c=window._wpmejsSettings||{};this.params.attachment=b,this.setting(b.url),a=this.container.find(\"audio, video\").get(0),a?this.player=new MediaElementPlayer(a,c):this.cleanupPlayer()},success:function(){},removerVisibility:function(){}}),f.ImageControl=f.UploadControl.extend({thumbnailSrc:function(){}}),f.BackgroundControl=f.UploadControl.extend({ready:function(){f.UploadControl.prototype.ready.apply(this,arguments)},select:function(){f.UploadControl.prototype.select.apply(this,arguments),wp.ajax.post(\"custom-background-add\",{nonce:_wpCustomizeBackground.nonces.add,wp_customize:\"on\",customize_theme:f.settings.theme.stylesheet,attachment_id:this.params.attachment.id})}}),f.BackgroundPositionControl=f.Control.extend({ready:function(){var a,c=this;c.container.on(\"change\",'input[name=\"background-position\"]',function(){var a=b(this).val().split(\" \");c.settings.x(a[0]),c.settings.y(a[1])}),a=_.debounce(function(){var a,b,d,e;a=c.settings.x.get(),b=c.settings.y.get(),e=String(a)+\" \"+String(b),d=c.container.find('input[name=\"background-position\"][value=\"'+e+'\"]'),d.click()}),c.settings.x.bind(a),c.settings.y.bind(a),a()}}),f.CroppedImageControl=f.MediaControl.extend({openFrame:function(a){f.utils.isKeydownButNotEnterEvent(a)||(this.initFrame(),this.frame.setState(\"library\").open())},initFrame:function(){var a=_wpMediaViewsL10n;this.frame=wp.media({button:{text:a.select,close:!1},states:[new wp.media.controller.Library({title:this.params.button_labels.frame_title,library:wp.media.query({type:\"image\"}),multiple:!1,date:!1,priority:20,suggestedWidth:this.params.width,suggestedHeight:this.params.height}),new wp.media.controller.CustomizeImageCropper({imgSelectOptions:this.calculateImageSelectOptions,control:this})]}),this.frame.on(\"select\",this.onSelect,this),this.frame.on(\"cropped\",this.onCropped,this),this.frame.on(\"skippedcrop\",this.onSkippedCrop,this)},onSelect:function(){var a=this.frame.state().get(\"selection\").first().toJSON();this.params.width!==a.width||this.params.height!==a.height||this.params.flex_width||this.params.flex_height?this.frame.setState(\"cropper\"):(this.setImageFromAttachment(a),this.frame.close())},onCropped:function(a){this.setImageFromAttachment(a)},calculateImageSelectOptions:function(a,b){var c,d,e,f=b.get(\"control\"),g=!!parseInt(f.params.flex_width,10),h=!!parseInt(f.params.flex_height,10),i=a.get(\"width\"),j=a.get(\"height\"),k=parseInt(f.params.width,10),l=parseInt(f.params.height,10),m=k/l,n=k,o=l;return b.set(\"canSkipCrop\",!f.mustBeCropped(g,h,k,l,i,j)),i/j>m?(l=j,k=l*m):(k=i,l=k/m),c=(i-k)/2,d=(j-l)/2,e={handles:!0,keys:!0,instance:!0,persistent:!0,imageWidth:i,imageHeight:j,minWidth:n>k?k:n,minHeight:o>l?l:o,x1:c,y1:d,x2:k+c,y2:l+d},h===!1&&g===!1&&(e.aspectRatio=k+\":\"+l),!0===h&&(delete e.minHeight,\ne.maxWidth=i),!0===g&&(delete e.minWidth,e.maxHeight=j),e},mustBeCropped:function(a,b,c,d,e,f){return(!0!==a||!0!==b)&&((!0!==a||d!==f)&&((!0!==b||c!==e)&&((c!==e||d!==f)&&!(e<=c))))},onSkippedCrop:function(){var a=this.frame.state().get(\"selection\").first().toJSON();this.setImageFromAttachment(a)},setImageFromAttachment:function(a){this.params.attachment=a,this.setting(a.id)}}),f.SiteIconControl=f.CroppedImageControl.extend({initFrame:function(){var a=_wpMediaViewsL10n;this.frame=wp.media({button:{text:a.select,close:!1},states:[new wp.media.controller.Library({title:this.params.button_labels.frame_title,library:wp.media.query({type:\"image\"}),multiple:!1,date:!1,priority:20,suggestedWidth:this.params.width,suggestedHeight:this.params.height}),new wp.media.controller.SiteIconCropper({imgSelectOptions:this.calculateImageSelectOptions,control:this})]}),this.frame.on(\"select\",this.onSelect,this),this.frame.on(\"cropped\",this.onCropped,this),this.frame.on(\"skippedcrop\",this.onSkippedCrop,this)},onSelect:function(){var a=this.frame.state().get(\"selection\").first().toJSON(),b=this;this.params.width!==a.width||this.params.height!==a.height||this.params.flex_width||this.params.flex_height?this.frame.setState(\"cropper\"):wp.ajax.post(\"crop-image\",{nonce:a.nonces.edit,id:a.id,context:\"site-icon\",cropDetails:{x1:0,y1:0,width:this.params.width,height:this.params.height,dst_width:this.params.width,dst_height:this.params.height}}).done(function(a){b.setImageFromAttachment(a),b.frame.close()}).fail(function(){b.frame.trigger(\"content:error:crop\")})},setImageFromAttachment:function(a){var c,d,e=[\"site_icon-32\",\"thumbnail\",\"full\"];_.each(e,function(b){d||_.isUndefined(a.sizes[b])||(d=a.sizes[b])}),this.params.attachment=a,this.setting(a.id),d&&(c=b('link[rel=\"icon\"][sizes=\"32x32\"]'),c.attr(\"href\",d.url))},removeFile:function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),this.params.attachment={},this.setting(\"\"),this.renderContent(),b('link[rel=\"icon\"][sizes=\"32x32\"]').attr(\"href\",\"/favicon.ico\"))}}),f.HeaderControl=f.Control.extend({ready:function(){this.btnRemove=b(\"#customize-control-header_image .actions .remove\"),this.btnNew=b(\"#customize-control-header_image .actions .new\"),_.bindAll(this,\"openMedia\",\"removeImage\"),this.btnNew.on(\"click\",this.openMedia),this.btnRemove.on(\"click\",this.removeImage),f.HeaderTool.currentHeader=this.getInitialHeaderImage(),new f.HeaderTool.CurrentView({model:f.HeaderTool.currentHeader,el:\"#customize-control-header_image .current .container\"}),new f.HeaderTool.ChoiceListView({collection:f.HeaderTool.UploadsList=new f.HeaderTool.ChoiceList,el:\"#customize-control-header_image .choices .uploaded .list\"}),new f.HeaderTool.ChoiceListView({collection:f.HeaderTool.DefaultsList=new f.HeaderTool.DefaultsList,el:\"#customize-control-header_image .choices .default .list\"}),f.HeaderTool.combinedList=f.HeaderTool.CombinedList=new f.HeaderTool.CombinedList([f.HeaderTool.UploadsList,f.HeaderTool.DefaultsList]),wp.media.controller.Cropper.prototype.defaults.doCropArgs.wp_customize=\"on\",wp.media.controller.Cropper.prototype.defaults.doCropArgs.customize_theme=f.settings.theme.stylesheet},getInitialHeaderImage:function(){if(!f.get().header_image||!f.get().header_image_data||_.contains([\"remove-header\",\"random-default-image\",\"random-uploaded-image\"],f.get().header_image))return new f.HeaderTool.ImageModel;var a=_.find(_wpCustomizeHeader.uploads,function(a){return a.attachment_id===f.get().header_image_data.attachment_id});return a||(a={url:f.get().header_image,thumbnail_url:f.get().header_image,attachment_id:f.get().header_image_data.attachment_id}),new f.HeaderTool.ImageModel({header:a,choice:a.url.split(\"/\").pop()})},calculateImageSelectOptions:function(a,b){var c,d,e,g,h,i,j=parseInt(_wpCustomizeHeader.data.width,10),k=parseInt(_wpCustomizeHeader.data.height,10),l=!!parseInt(_wpCustomizeHeader.data[\"flex-width\"],10),m=!!parseInt(_wpCustomizeHeader.data[\"flex-height\"],10);return h=a.get(\"width\"),g=a.get(\"height\"),this.headerImage=new f.HeaderTool.ImageModel,this.headerImage.set({themeWidth:j,themeHeight:k,themeFlexWidth:l,themeFlexHeight:m,imageWidth:h,imageHeight:g}),b.set(\"canSkipCrop\",!this.headerImage.shouldBeCropped()),c=j/k,d=h,e=g,d/e>c?(k=e,j=k*c):(j=d,k=j/c),i={handles:!0,keys:!0,instance:!0,persistent:!0,imageWidth:h,imageHeight:g,x1:0,y1:0,x2:j,y2:k},m===!1&&l===!1&&(i.aspectRatio=j+\":\"+k),m===!1&&(i.maxHeight=k),l===!1&&(i.maxWidth=j),i},openMedia:function(a){var b=_wpMediaViewsL10n;a.preventDefault(),this.frame=wp.media({button:{text:b.selectAndCrop,close:!1},states:[new wp.media.controller.Library({title:b.chooseImage,library:wp.media.query({type:\"image\"}),multiple:!1,date:!1,priority:20,suggestedWidth:_wpCustomizeHeader.data.width,suggestedHeight:_wpCustomizeHeader.data.height}),new wp.media.controller.Cropper({imgSelectOptions:this.calculateImageSelectOptions})]}),this.frame.on(\"select\",this.onSelect,this),this.frame.on(\"cropped\",this.onCropped,this),this.frame.on(\"skippedcrop\",this.onSkippedCrop,this),this.frame.open()},onSelect:function(){this.frame.setState(\"cropper\")},onCropped:function(a){var b=a.url,c=a.attachment_id,d=a.width,e=a.height;this.setImageFromURL(b,c,d,e)},onSkippedCrop:function(a){var b=a.get(\"url\"),c=a.get(\"width\"),d=a.get(\"height\");this.setImageFromURL(b,a.id,c,d)},setImageFromURL:function(a,b,c,d){var e,g={};g.url=a,g.thumbnail_url=a,g.timestamp=_.now(),b&&(g.attachment_id=b),c&&(g.width=c),d&&(g.height=d),e=new f.HeaderTool.ImageModel({header:g,choice:a.split(\"/\").pop()}),f.HeaderTool.UploadsList.add(e),f.HeaderTool.currentHeader.set(e.toJSON()),e.save(),e.importImage()},removeImage:function(){f.HeaderTool.currentHeader.trigger(\"hide\"),f.HeaderTool.CombinedList.trigger(\"control:removeImage\")}}),f.ThemeControl=f.Control.extend({touchDrag:!1,isRendered:!1,renderContent:function(){var a=this,b=arguments;f.section(a.section(),function(c){c.expanded()?(f.Control.prototype.renderContent.apply(a,b),a.isRendered=!0):c.expanded.bind(function(c){c&&!a.isRendered&&(f.Control.prototype.renderContent.apply(a,b),a.isRendered=!0)})})},ready:function(){var a=this;a.container.on(\"touchmove\",\".theme\",function(){a.touchDrag=!0}),a.container.on(\"click keydown touchend\",\".theme\",function(c){if(!f.utils.isKeydownButNotEnterEvent(c))return a.touchDrag===!0?a.touchDrag=!1:void(b(c.target).is(\".theme-actions .button\")||f.section(a.section()).loadThemePreview(a.params.theme.id))}),a.container.on(\"click keydown\",\".theme-actions .theme-details\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),f.section(a.section()).showDetails(a.params.theme))}),a.container.on(\"render-screenshot\",function(){var a=b(this).find(\"img\"),c=a.data(\"src\");c&&a.attr(\"src\",c)})},filter:function(a){var b=this,c=b.params.theme.name+\" \"+b.params.theme.description+\" \"+b.params.theme.tags+\" \"+b.params.theme.author;c=c.toLowerCase().replace(\"-\",\" \"),-1!==c.search(a)?b.activate():b.deactivate()}}),f.defaultConstructor=f.Setting,f.control=new f.Values({defaultConstructor:f.Control}),f.section=new f.Values({defaultConstructor:f.Section}),f.panel=new f.Values({defaultConstructor:f.Panel}),f.PreviewFrame=f.Messenger.extend({sensitivity:null,initialize:function(a,c){var d=b.Deferred();d.promise(this),this.container=a.container,b.extend(a,{channel:f.PreviewFrame.uuid()}),f.Messenger.prototype.initialize.call(this,a,c),this.add(\"previewUrl\",a.previewUrl),this.query=b.extend(a.query||{},{customize_messenger_channel:this.channel()}),this.run(d)},run:function(a){var c,d,e,g=this,h=!1,i=!1,j=null,k=\"{}\"!==g.query.customized;g._ready&&g.unbind(\"ready\",g._ready),g._ready=function(b){i=!0,j=b,g.container.addClass(\"iframe-ready\"),b&&h&&a.resolveWith(g,[b])},g.bind(\"ready\",g._ready),c=document.createElement(\"a\"),c.href=g.previewUrl(),d=_.extend(f.utils.parseQueryString(c.search.substr(1)),{customize_changeset_uuid:g.query.customize_changeset_uuid,customize_theme:g.query.customize_theme,customize_messenger_channel:g.query.customize_messenger_channel}),c.search=b.param(d),g.iframe=b(\"<iframe />\",{title:f.l10n.previewIframeTitle,name:\"customize-\"+g.channel()}),g.iframe.attr(\"onmousewheel\",\"\"),k?g.iframe.attr(\"data-src\",c.href):g.iframe.attr(\"src\",c.href),g.iframe.appendTo(g.container),g.targetWindow(g.iframe[0].contentWindow),k&&(e=b(\"<form>\",{action:c.href,target:g.iframe.attr(\"name\"),method:\"post\",hidden:\"hidden\"}),e.append(b(\"<input>\",{type:\"hidden\",name:\"_method\",value:\"GET\"})),_.each(g.query,function(a,c){e.append(b(\"<input>\",{type:\"hidden\",name:c,value:a}))}),g.container.append(e),e.submit(),e.remove()),g.bind(\"iframe-loading-error\",function(b){return g.iframe.remove(),0===b?void g.login(a):-1===b?void a.rejectWith(g,[\"cheatin\"]):void a.rejectWith(g,[\"request failure\"])}),g.iframe.one(\"load\",function(){h=!0,i?a.resolveWith(g,[j]):setTimeout(function(){a.rejectWith(g,[\"ready timeout\"])},g.sensitivity)})},login:function(a){var c,d=this;return c=function(){a.rejectWith(d,[\"logged out\"])},this.triedLogin?c():void b.get(f.settings.url.ajax,{action:\"logged-in\"}).fail(c).done(function(e){var g;\"1\"!==e&&c(),g=b(\"<iframe />\",{src:d.previewUrl(),title:f.l10n.previewIframeTitle}).hide(),g.appendTo(d.container),g.on(\"load\",function(){d.triedLogin=!0,g.remove(),d.run(a)})})},destroy:function(){f.Messenger.prototype.destroy.call(this),this.iframe&&this.iframe.remove(),delete this.iframe,delete this.targetWindow}}),function(){var a=0;f.PreviewFrame.uuid=function(){return\"preview-\"+String(a++)}}(),f.setDocumentTitle=function(a){var b,c;b=f.settings.documentTitleTmpl,c=b.replace(\"%s\",a),document.title=c,f.trigger(\"title\",c)},f.Previewer=f.Messenger.extend({refreshBuffer:null,initialize:function(a,c){var d=this,e=document.createElement(\"a\");b.extend(d,c||{}),d.deferred={active:b.Deferred()},d.refresh=_.debounce(function(a){return function(){var b,c;b=function(){return 0===f.state(\"processing\").get()},b()?a.call(d):(c=function(){b()&&(a.call(d),f.state(\"processing\").unbind(c))},f.state(\"processing\").bind(c))}}(d.refresh),d.refreshBuffer),d.container=f.ensure(a.container),d.allowedUrls=a.allowedUrls,a.url=window.location.href,f.Messenger.prototype.initialize.call(d,a),e.href=d.origin(),d.add(\"scheme\",e.protocol.replace(/:$/,\"\")),d.add(\"previewUrl\",a.previewUrl).setter(function(a){var c,e,g,h=null,i=[];return c=document.createElement(\"a\"),c.href=a,/\\/wp-(admin|includes|content)(\\/|$)/.test(c.pathname)?null:(c.search.length>1&&(e=f.utils.parseQueryString(c.search.substr(1)),delete e.customize_changeset_uuid,delete e.customize_theme,delete e.customize_messenger_channel,_.isEmpty(e)?c.search=\"\":c.search=b.param(e)),i.push(c),d.scheme.get()+\":\"!==c.protocol&&(c=document.createElement(\"a\"),c.href=i[0].href,c.protocol=d.scheme.get()+\":\",i.unshift(c)),g=document.createElement(\"a\"),_.find(i,function(a){return!_.isUndefined(_.find(d.allowedUrls,function(b){if(g.href=b,c.protocol===g.protocol&&c.host===g.host&&0===c.pathname.indexOf(g.pathname.replace(/\\/$/,\"\")))return h=a.href,!0}))}),h)}),d.bind(\"ready\",d.ready),d.deferred.active.done(_.bind(d.keepPreviewAlive,d)),d.bind(\"synced\",function(){d.send(\"active\")}),d.previewUrl.bind(d.refresh),d.scroll=0,d.bind(\"scroll\",function(a){d.scroll=a}),d.bind(\"url\",function(a){var b,c=!1;d.scroll=0,b=function(){c=!0},d.previewUrl.bind(b),d.previewUrl.set(a),d.previewUrl.unbind(b),c||d.refresh()}),d.bind(\"documentTitle\",function(a){f.setDocumentTitle(a)})},ready:function(a){var b,c=this,d={};d.settings=f.get(),d[\"settings-modified-while-loading\"]=c.settingsModifiedWhileLoading,(\"resolved\"!==c.deferred.active.state()||c.loading)&&(d.scroll=c.scroll),d[\"edit-shortcut-visibility\"]=f.state(\"editShortcutVisibility\").get(),c.send(\"sync\",d),a.currentUrl&&(c.previewUrl.unbind(c.refresh),c.previewUrl.set(a.currentUrl),c.previewUrl.bind(c.refresh)),b={panel:a.activePanels,section:a.activeSections,control:a.activeControls},_(b).each(function(a,b){f[b].each(function(c,d){var e=_.isUndefined(f.settings[b+\"s\"][d]);e&&_.isUndefined(a[d])||(a[d]?c.activate():c.deactivate())})}),a.settingValidities&&f._handleSettingValidities({settingValidities:a.settingValidities,focusInvalidControl:!1})},keepPreviewAlive:function(){var a,b,c,d,e=this;d=function(){b=setTimeout(c,f.settings.timeouts.keepAliveCheck)},a=function(){f.state(\"previewerAlive\").set(!0),clearTimeout(b),d()},c=function(){f.state(\"previewerAlive\").set(!1)},d(),e.bind(\"ready\",a),e.bind(\"keep-alive\",a)},query:function(){},abort:function(){this.loading&&(this.loading.destroy(),delete this.loading)},refresh:function(){var a,b=this;b.send(\"loading-initiated\"),b.abort(),b.loading=new f.PreviewFrame({url:b.url(),previewUrl:b.previewUrl(),query:b.query({excludeCustomizedSaved:!0})||{},container:b.container}),b.settingsModifiedWhileLoading={},a=function(a){b.settingsModifiedWhileLoading[a.id]=!0},f.bind(\"change\",a),b.loading.always(function(){f.unbind(\"change\",a)}),b.loading.done(function(a){var c,d=this;b.preview=d,b.targetWindow(d.targetWindow()),b.channel(d.channel()),c=function(){d.unbind(\"synced\",c),b._previousPreview&&b._previousPreview.destroy(),b._previousPreview=b.preview,b.deferred.active.resolve(),delete b.loading},d.bind(\"synced\",c),b.trigger(\"ready\",a)}),b.loading.fail(function(a){b.send(\"loading-failed\"),\"logged out\"===a&&(b.preview&&(b.preview.destroy(),delete b.preview),b.login().done(b.refresh)),\"cheatin\"===a&&b.cheatin()})},login:function(){var a,c,d,e=this;return this._login?this._login:(a=b.Deferred(),this._login=a.promise(),c=new f.Messenger({channel:\"login\",url:f.settings.url.login}),d=b(\"<iframe />\",{src:f.settings.url.login,title:f.l10n.loginIframeTitle}).appendTo(this.container),c.targetWindow(d[0].contentWindow),c.bind(\"login\",function(){var b=e.refreshNonces();b.always(function(){d.remove(),c.destroy(),delete e._login}),b.done(function(){a.resolve()}),b.fail(function(){e.cheatin(),a.reject()})}),this._login)},cheatin:function(){b(document.body).empty().addClass(\"cheatin\").append(\"<h1>\"+f.l10n.cheatin+\"</h1><p>\"+f.l10n.notAllowed+\"</p>\")},refreshNonces:function(){var a,c=b.Deferred();return c.promise(),a=wp.ajax.post(\"customize_refresh_nonces\",{wp_customize:\"on\",customize_theme:f.settings.theme.stylesheet}),a.done(function(a){f.trigger(\"nonce-refresh\",a),c.resolve()}),a.fail(function(){c.reject()}),c}}),f.settingConstructor={},f.controlConstructor={color:f.ColorControl,media:f.MediaControl,upload:f.UploadControl,image:f.ImageControl,cropped_image:f.CroppedImageControl,site_icon:f.SiteIconControl,header:f.HeaderControl,background:f.BackgroundControl,background_position:f.BackgroundPositionControl,theme:f.ThemeControl},f.panelConstructor={},f.sectionConstructor={themes:f.ThemesSection},f._handleSettingValidities=function(a){var b,c=[],d=!1;_.each(a.settingValidities,function(a,b){var d=f(b);d&&(_.isObject(a)&&_.each(a,function(a,b){var e,g,h=!1;e=new f.Notification(b,_.extend({fromServer:!0},a)),g=d.notifications(e.code),g&&(h=e.type!==g.type||e.message!==g.message||!_.isEqual(e.data,g.data)),h&&d.notifications.remove(b),d.notifications.has(e.code)||d.notifications.add(b,e),c.push(d.id)}),d.notifications.each(function(b){!b.fromServer||\"error\"!==b.type||!0!==a&&a[b.code]||d.notifications.remove(b.code)}))}),a.focusInvalidControl&&(b=f.findControlsForSettings(c),_(_.values(b)).find(function(a){return _(a).find(function(a){var b=a.section()&&f.section.has(a.section())&&f.section(a.section()).expanded();return b&&a.expanded&&(b=a.expanded()),b&&(a.focus(),d=!0),d})}),d||_.isEmpty(b)||_.values(b)[0][0].focus())},f.findControlsForSettings=function(a){var b,c={};return _.each(_.unique(a),function(a){var d=f(a);d&&(b=d.findControls(),b&&b.length>0&&(c[a]=b))}),c},f.reflowPaneContents=_.bind(function(){var a,c,d,e=[],g=!1;document.activeElement&&(c=b(document.activeElement)),f.panel.each(function(b){var c=b.sections(),d=_.pluck(c,\"headContainer\");e.push(b),a=b.contentContainer.is(\"ul\")?b.contentContainer:b.contentContainer.find(\"ul:first\"),f.utils.areElementListsEqual(d,a.children(\"[id]\"))||(_(c).each(function(b){a.append(b.headContainer)}),g=!0)}),f.section.each(function(b){var c=b.controls(),d=_.pluck(c,\"container\");b.panel()||e.push(b),a=b.contentContainer.is(\"ul\")?b.contentContainer:b.contentContainer.find(\"ul:first\"),f.utils.areElementListsEqual(d,a.children(\"[id]\"))||(_(c).each(function(b){a.append(b.container)}),g=!0)}),e.sort(f.utils.prioritySort),d=_.pluck(e,\"headContainer\"),a=b(\"#customize-theme-controls .customize-pane-parent\"),f.utils.areElementListsEqual(d,a.children())||(_(e).each(function(b){a.append(b.headContainer)}),g=!0),f.panel.each(function(a){var b=a.active();a.active.callbacks.fireWith(a.active,[b,b])}),f.section.each(function(a){var b=a.active();a.active.callbacks.fireWith(a.active,[b,b])}),g&&c&&c.focus(),f.trigger(\"pane-contents-reflowed\")},f),b(function(){if(f.settings=window._wpCustomizeSettings,f.l10n=window._wpCustomizeControlsL10n,f.settings&&b.support.postMessage&&(b.support.cors||!f.settings.isCrossDomain)){null===f.PreviewFrame.prototype.sensitivity&&(f.PreviewFrame.prototype.sensitivity=f.settings.timeouts.previewFrameSensitivity),null===f.Previewer.prototype.refreshBuffer&&(f.Previewer.prototype.refreshBuffer=f.settings.timeouts.windowRefresh);var a,c=b(document.body),d=c.children(\".wp-full-overlay\"),e=b(\"#customize-info .panel-title.site-title\"),g=b(\".customize-controls-close\"),h=b(\"#save\"),i=b(\"#customize-footer-actions\");b(\"#customize-controls\").on(\"keydown\",function(a){var c=13===a.which,d=b(a.target);c&&(d.is(\"input:not([type=button])\")||d.is(\"select\"))&&a.preventDefault()}),b(\".customize-info\").find(\"> .accordion-section-title .customize-help-toggle\").on(\"click\",function(){var a=b(this).closest(\".accordion-section\"),c=a.find(\".customize-panel-description:first\");a.hasClass(\"cannot-expand\")||(a.hasClass(\"open\")?(a.toggleClass(\"open\"),c.slideUp(f.Panel.prototype.defaultExpandedArguments.duration),b(this).attr(\"aria-expanded\",!1)):(c.slideDown(f.Panel.prototype.defaultExpandedArguments.duration),a.toggleClass(\"open\"),b(this).attr(\"aria-expanded\",!0)))}),f.previewer=new f.Previewer({container:\"#customize-preview\",form:\"#customize-controls\",previewUrl:f.settings.url.preview,allowedUrls:f.settings.url.allowed},{nonce:f.settings.nonce,query:function(a){var b={wp_customize:\"on\",customize_theme:f.settings.theme.stylesheet,nonce:this.nonce.preview,customize_changeset_uuid:f.settings.changeset.uuid};return b.customized=JSON.stringify(f.dirtyValues({unsaved:a&&a.excludeCustomizedSaved})),b},save:function(c){function d(a){n[a.id]=!0}var e,g,i,j=this,k=b.Deferred(),l=\"publish\",m=f.state(\"processing\"),n={},o=[];return c&&c.status&&(l=c.status),f.state(\"saving\").get()&&(k.reject(\"already_saving\"),k.promise()),f.state(\"saving\").set(!0),g=function(){var e,g,m={},p=f._latestRevision;return f.bind(\"change\",d),f.each(function(a){a.notifications.each(function(b){\"error\"!==b.type||b.fromServer||(o.push(a.id),m[a.id]||(m[a.id]={}),m[a.id][b.code]=b)})}),i=f.findControlsForSettings(o),_.isEmpty(i)?(g=b.extend(j.query({excludeCustomizedSaved:!1}),{nonce:j.nonce.save,customize_changeset_status:l}),c&&c.date&&(g.customize_changeset_date=c.date),c&&c.title&&(g.customize_changeset_title=c.title),e=wp.ajax.post(\"customize_save\",g),h.prop(\"disabled\",!0),f.trigger(\"save\",e),e.always(function(){f.state(\"saving\").set(!1),h.prop(\"disabled\",!1),f.unbind(\"change\",d)}),e.fail(function(a){\"0\"===a?a=\"not_logged_in\":\"-1\"===a&&(a=\"invalid_nonce\"),\"invalid_nonce\"===a?j.cheatin():\"not_logged_in\"===a&&(j.preview.iframe.hide(),j.login().done(function(){j.save(),j.preview.iframe.show()})),a.setting_validities&&f._handleSettingValidities({settingValidities:a.setting_validities,focusInvalidControl:!0}),k.rejectWith(j,[a]),f.trigger(\"error\",a)}),void e.done(function(b){j.send(\"saved\",b),f.state(\"changesetStatus\").set(b.changeset_status),\"publish\"===b.changeset_status&&(f.each(function(a){a._dirty&&(_.isUndefined(f._latestSettingRevisions[a.id])||f._latestSettingRevisions[a.id]<=p)&&(a._dirty=!1)}),f.state(\"changesetStatus\").set(\"\"),f.settings.changeset.uuid=b.next_changeset_uuid,a.send(\"changeset-uuid\",f.settings.changeset.uuid)),b.setting_validities&&f._handleSettingValidities({settingValidities:b.setting_validities,focusInvalidControl:!0}),k.resolveWith(j,[b]),f.trigger(\"saved\",b),_.isEmpty(n)||f.state(\"saved\").set(!1)})):(_.values(i)[0][0].focus(),f.unbind(\"change\",d),k.rejectWith(j,[{setting_invalidities:m}]),f.state(\"saving\").set(!1),k.promise())},0===m()?g():(e=function(){0===m()&&(f.state.unbind(\"change\",e),g())},f.state.bind(\"change\",e)),k.promise()}}),f.previewer.bind(\"nonce\",function(a){b.extend(this.nonce,a)}),f.bind(\"nonce-refresh\",function(a){b.extend(f.settings.nonce,a),b.extend(f.previewer.nonce,a),f.previewer.send(\"nonce-refresh\",a)}),b.each(f.settings.settings,function(a,b){var c,d=f.settingConstructor[b.type]||f.Setting;c=new d(a,b.value,{transport:b.transport,previewer:f.previewer,dirty:!!b.dirty}),f.add(a,c)}),b.each(f.settings.panels,function(a,b){var c,d=f.panelConstructor[b.type]||f.Panel;c=new d(a,{params:b}),f.panel.add(a,c)}),b.each(f.settings.sections,function(a,b){var c,d=f.sectionConstructor[b.type]||f.Section;c=new d(a,{params:b}),f.section.add(a,c)}),b.each(f.settings.controls,function(a,b){var c,d=f.controlConstructor[b.type]||f.Control;c=new d(a,{params:b,previewer:f.previewer}),f.control.add(a,c)}),_.each([\"panel\",\"section\",\"control\"],function(a){var b=f.settings.autofocus[a];b&&f[a](b,function(a){a.deferred.embedded.done(function(){f.previewer.deferred.active.done(function(){a.focus()})})})}),f.bind(\"ready\",f.reflowPaneContents),b([f.panel,f.section,f.control]).each(function(a,b){var c=_.debounce(f.reflowPaneContents,f.settings.timeouts.reflowPaneContents);b.bind(\"add\",c),b.bind(\"change\",c),b.bind(\"remove\",c)}),function(){var a,d=new f.Values,e=d.create(\"saved\"),i=d.create(\"saving\"),j=d.create(\"activated\"),k=d.create(\"processing\"),l=d.create(\"paneVisible\"),m=d.create(\"expandedPanel\"),n=d.create(\"expandedSection\"),o=d.create(\"changesetStatus\"),p=d.create(\"previewerAlive\"),q=d.create(\"editShortcutVisibility\");d.bind(\"change\",function(){var a;j()?\"\"===o.get()&&e()?(h.val(f.l10n.saved),g.find(\".screen-reader-text\").text(f.l10n.close)):(h.val(f.l10n.save),g.find(\".screen-reader-text\").text(f.l10n.cancel)):(h.val(f.l10n.activate),g.find(\".screen-reader-text\").text(f.l10n.cancel)),a=!i()&&(!j()||!e()||\"\"!==o()&&\"publish\"!==o()),h.prop(\"disabled\",!a)}),o(f.settings.changeset.status),e(!0),\"\"===o()&&f.each(function(a){a._dirty&&e(!1)}),i(!1),j(f.settings.theme.active),k(0),l(!0),m(!1),n(!1),p(!0),q(\"visible\"),f.bind(\"change\",function(){d(\"saved\").get()&&(d(\"saved\").set(!1),a(!0))}),i.bind(function(a){c.toggleClass(\"saving\",a)}),f.bind(\"saved\",function(a){d(\"saved\").set(!0),\"publish\"===a.changeset_status&&d(\"activated\").set(!0)}),j.bind(function(a){a&&f.trigger(\"activated\")}),a=function(a){var c,d;if(history.replaceState){if(c=document.createElement(\"a\"),c.href=location.href,d=f.utils.parseQueryString(c.search.substr(1)),a){if(d.changeset_uuid===f.settings.changeset.uuid)return;d.changeset_uuid=f.settings.changeset.uuid}else{if(!d.changeset_uuid)return;delete d.changeset_uuid}c.search=b.param(d),history.replaceState({},document.title,c.href)}},o.bind(function(b){a(\"\"!==b&&\"publish\"!==b)}),f.state=d}(),f.previewer.previewUrl()?f.previewer.refresh():f.previewer.previewUrl(f.settings.url.home),h.click(function(a){f.previewer.save(),a.preventDefault()}).keydown(function(a){9!==a.which&&(13===a.which&&f.previewer.save(),a.preventDefault())}),g.keydown(function(a){9!==a.which&&(13===a.which&&this.click(),a.preventDefault())}),b(\".collapse-sidebar\").on(\"click\",function(){f.state(\"paneVisible\").set(!f.state(\"paneVisible\").get())}),f.state(\"paneVisible\").bind(function(a){d.toggleClass(\"preview-only\",!a),d.toggleClass(\"expanded\",a),d.toggleClass(\"collapsed\",!a),a?b(\".collapse-sidebar\").attr({\"aria-expanded\":\"true\",\"aria-label\":f.l10n.collapseSidebar}):b(\".collapse-sidebar\").attr({\"aria-expanded\":\"false\",\"aria-label\":f.l10n.expandSidebar})}),b(\"body\").on(\"keydown\",function(a){var c,d=[],e=[],g=[];27===a.which&&(b(a.target).is(\"body\")||b.contains(b(\"#customize-controls\")[0],a.target))&&(f.control.each(function(a){a.expanded&&a.expanded()&&_.isFunction(a.collapse)&&d.push(a)}),f.section.each(function(a){a.expanded()&&e.push(a)}),f.panel.each(function(a){a.expanded()&&g.push(a)}),d.length>0&&0===e.length&&(d.length=0),c=d[0]||e[0]||g[0],c&&(c.collapse(),a.preventDefault()))}),b(\".customize-controls-preview-toggle\").on(\"click\",function(){f.state(\"paneVisible\").set(!f.state(\"paneVisible\").get())}),function(){var a,c,d,e,g,h,i,j=b(\".wp-full-overlay-sidebar-content\");a=function(a){var b,g=a,i=f.state(\"expandedSection\").get(),j=f.state(\"expandedPanel\").get();if(h&&h.element&&d(h.element),!g)if(!i&&j&&j.contentContainer)g=j;else{if(j||!i||!i.contentContainer)return void(h=!1);g=i}b=g.contentContainer.find(\".customize-section-title, .panel-meta\").first(),b.length?(h={instance:g,element:b,parent:b.closest(\".customize-pane-child\"),height:c(b)},i&&e(h.element,h.parent)):h=!1},f.state(\"expandedSection\").bind(a),f.state(\"expandedPanel\").bind(a),j.on(\"scroll\",_.throttle(function(){if(h){var a=j.scrollTop(),b=!i||a<=i;i=a,g(h,a,b)}},8)),d=function(a){a.hasClass(\"is-sticky\")&&a.removeClass(\"is-sticky\").addClass(\"maybe-sticky is-in-view\").css(\"top\",j.scrollTop()+\"px\")},e=function(a,b){a.removeClass(\"maybe-sticky is-in-view\").css({width:\"\",top:\"\"}),b.css(\"padding-top\",\"\")},c=function(a){var b=a.data(\"height\");return b||(b=a.outerHeight(),a.data(\"height\",b)),b},g=function(a,b,c){var d=a.element,e=a.parent,f=a.height,g=parseInt(d.css(\"top\"),10),h=d.hasClass(\"maybe-sticky\"),i=d.hasClass(\"is-sticky\"),j=d.hasClass(\"is-in-view\");if(!c)return i&&(g=b,d.removeClass(\"is-sticky\").css({top:g+\"px\",width:\"\"})),void(j&&b>g+f&&(d.removeClass(\"is-in-view\"),e.css(\"padding-top\",\"\")));if(!h&&b>=f)h=!0,d.addClass(\"maybe-sticky\");else if(0===b)return d.removeClass(\"maybe-sticky is-in-view is-sticky\").css({top:\"\",width:\"\"}),void e.css(\"padding-top\",\"\");j&&!i?g>=b&&d.addClass(\"is-sticky\").css({top:\"\",width:e.outerWidth()+\"px\"}):h&&!j&&(d.addClass(\"is-in-view\").css(\"top\",b-f+\"px\"),e.css(\"padding-top\",f+\"px\"))}}(),f.previewedDevice=new f.Value,f.bind(\"ready\",function(){_.find(f.settings.previewableDevices,function(a,b){if(!0===a[\"default\"])return f.previewedDevice.set(b),!0})}),i.find(\".devices button\").on(\"click\",function(a){f.previewedDevice.set(b(a.currentTarget).data(\"device\"))}),f.previewedDevice.bind(function(a){var c=b(\".wp-full-overlay\"),d=\"\";i.find(\".devices button\").removeClass(\"active\").attr(\"aria-pressed\",!1),i.find(\".devices .preview-\"+a).addClass(\"active\").attr(\"aria-pressed\",!0),b.each(f.settings.previewableDevices,function(a){d+=\" preview-\"+a}),c.removeClass(d).addClass(\"preview-\"+a)}),e.length&&f(\"blogname\",function(a){var c=function(){e.text(b.trim(a())||f.l10n.untitledBlogName)};a.bind(c),c()}),a=new f.Messenger({url:f.settings.url.parent,channel:\"loader\"}),a.bind(\"back\",function(){g.on(\"click.customize-controls-close\",function(b){b.preventDefault(),a.send(\"close\")})}),b(window).on(\"beforeunload.customize-confirm\",function(){if(!f.state(\"saved\")())return setTimeout(function(){d.removeClass(\"customize-loading\")},1),f.l10n.saveAlert}),b.each([\"saved\",\"change\"],function(b,c){f.bind(c,function(){a.send(c)})}),f.bind(\"title\",function(b){a.send(\"title\",b)}),a.send(\"changeset-uuid\",f.settings.changeset.uuid),a.send(\"ready\"),b.each({background_image:{controls:[\"background_preset\",\"background_position\",\"background_size\",\"background_repeat\",\"background_attachment\"],callback:function(a){return!!a}},show_on_front:{controls:[\"page_on_front\",\"page_for_posts\"],callback:function(a){return\"page\"===a}},header_textcolor:{controls:[\"header_textcolor\"],callback:function(a){return\"blank\"!==a}}},function(a,c){f(a,function(a){b.each(c.controls,function(b,d){f.control(d,function(b){var d=function(a){b.container.toggle(c.callback(a))};d(a.get()),a.bind(d)})})})}),f.control(\"background_preset\",function(a){var b,c,d,e,g,h;b={\"default\":[!1,!1,!1,!1],fill:[!0,!1,!1,!1],fit:[!0,!1,!0,!1],repeat:[!0,!1,!1,!0],custom:[!0,!0,!0,!0]},c=[_wpCustomizeBackground.defaults[\"default-position-x\"],_wpCustomizeBackground.defaults[\"default-position-y\"],_wpCustomizeBackground.defaults[\"default-size\"],_wpCustomizeBackground.defaults[\"default-repeat\"],_wpCustomizeBackground.defaults[\"default-attachment\"]],d={\"default\":c,fill:[\"left\",\"top\",\"cover\",\"no-repeat\",\"fixed\"],fit:[\"left\",\"top\",\"contain\",\"no-repeat\",\"fixed\"],repeat:[\"left\",\"top\",\"auto\",\"repeat\",\"scroll\"]},e=function(a){_.each([\"background_position\",\"background_size\",\"background_repeat\",\"background_attachment\"],function(c,d){var e=f.control(c);e&&e.container.toggle(b[a][d])})},g=function(a){_.each([\"background_position_x\",\"background_position_y\",\"background_size\",\"background_repeat\",\"background_attachment\"],function(b,c){var e=f(b);e&&e.set(d[a][c])})},h=a.setting.get(),e(h),a.setting.bind(\"change\",function(a){e(a),\"custom\"!==a&&g(a)})}),f.control(\"background_repeat\",function(a){a.elements[0].unsync(f(\"background_repeat\")),a.element=new f.Element(a.container.find(\"input\")),a.element.set(\"no-repeat\"!==a.setting()),a.element.bind(function(b){a.setting.set(b?\"repeat\":\"no-repeat\")}),a.setting.bind(function(b){a.element.set(\"no-repeat\"!==b)})}),f.control(\"background_attachment\",function(a){a.elements[0].unsync(f(\"background_attachment\")),a.element=new f.Element(a.container.find(\"input\")),a.element.set(\"fixed\"!==a.setting()),a.element.bind(function(b){a.setting.set(b?\"scroll\":\"fixed\")}),a.setting.bind(function(b){a.element.set(\"fixed\"!==b)})}),f.control(\"display_header_text\",function(a){var b=\"\";a.elements[0].unsync(f(\"header_textcolor\")),a.element=new f.Element(a.container.find(\"input\")),a.element.set(\"blank\"!==a.setting()),a.element.bind(function(c){c||(b=f(\"header_textcolor\").get()),a.setting.set(c?b:\"blank\")}),a.setting.bind(function(b){a.element.set(\"blank\"!==b)})}),f(\"show_on_front\",\"page_on_front\",function(a,b){var c=function(){\"page\"===a()&&parseInt(b(),10)>0&&f.previewer.previewUrl.set(f.settings.url.home)};a.bind(c),b.bind(c)}),f(\"page_for_posts\",function(a){a.bind(function(a){a=parseInt(a,10),a>0&&f.previewer.previewUrl.set(f.settings.url.home+\"?page_id=\"+a)})}),f.control(\"custom_css\",function(a){a.deferred.embedded.done(function(){var b=a.container.find(\"textarea\"),c=b[0];b.on(\"blur\",function(){b.data(\"next-tab-blurs\",!1)}),b.on(\"keydown\",function(a){var d,e,f,g=9,h=27;return h===a.keyCode?void(b.data(\"next-tab-blurs\")||(b.data(\"next-tab-blurs\",!0),a.stopPropagation())):void(g!==a.keyCode||a.ctrlKey||a.altKey||a.shiftKey||b.data(\"next-tab-blurs\")||(d=c.selectionStart,e=c.selectionEnd,f=c.value,d>=0&&(c.value=f.substring(0,d).concat(\"\\t\",f.substring(e)),b.selectionStart=c.selectionEnd=d+1),a.stopPropagation(),a.preventDefault()))})})}),f.control(\"header_video\",function(a){a.deferred.embedded.done(function(){var b=function(){var b,c=f.section(a.section());c&&(b=c.container.find(\".header-video-not-currently-previewable:first\"),a.active.get()?b.stop().slideUp(\"fast\"):b.stop().slideDown(\"fast\"))};b(),a.active.bind(b)})}),f.previewer.bind(\"selective-refresh-setting-validities\",function(a){f._handleSettingValidities({settingValidities:a,focusInvalidControl:!1})}),f.previewer.bind(\"focus-control-for-setting\",function(a){var b=[];f.control.each(function(c){var d=_.pluck(c.settings,\"id\");-1!==_.indexOf(d,a)&&b.push(c)}),b.length&&(b.sort(function(a,b){return a.priority()-b.priority()}),b[0].focus())}),f.previewer.bind(\"refresh\",function(){f.previewer.refresh()}),f.state(\"paneVisible\").bind(function(a){var c;c=window.matchMedia?window.matchMedia(\"screen and ( max-width: 640px )\").matches:b(window).width()<=640,f.state(\"editShortcutVisibility\").set(a||c?\"visible\":\"hidden\")}),window.matchMedia&&window.matchMedia(\"screen and ( max-width: 640px )\").addListener(function(){var a=f.state(\"paneVisible\");a.callbacks.fireWith(a,[a.get(),a.get()])}),f.previewer.bind(\"edit-shortcut-visibility\",function(a){f.state(\"editShortcutVisibility\").set(a)}),f.state(\"editShortcutVisibility\").bind(function(a){\nf.previewer.send(\"edit-shortcut-visibility\",a)}),function(){var a,c,d,e=!1;c=function(){e||(e=!0,f.requestChangesetUpdate().always(function(){e=!1})),d()},d=function(){clearTimeout(a),a=setTimeout(function(){c()},f.settings.timeouts.changesetAutoSave)},d(),b(window).on(\"blur.wp-customize-changeset-update\",function(){c()}),b(window).on(\"beforeunload.wp-customize-changeset-update\",function(){c()})}(),f.trigger(\"ready\")}})}(wp,jQuery);", "<?php\n/**\n * WordPress Customize Manager classes\n *\n * @package WordPress\n * @subpackage Customize\n * @since 3.4.0\n */\n\n/**\n * Customize Manager class.\n *\n * Bootstraps the Customize experience on the server-side.\n *\n * Sets up the theme-switching process if a theme other than the active one is\n * being previewed and customized.\n *\n * Serves as a factory for Customize Controls and Settings, and\n * instantiates default Customize Controls and Settings.\n *\n * @since 3.4.0\n */\nfinal class WP_Customize_Manager {\n\t/**\n\t * An instance of the theme being previewed.\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var WP_Theme\n\t */\n\tprotected $theme;\n\n\t/**\n\t * The directory name of the previously active theme (within the theme_root).\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var string\n\t */\n\tprotected $original_stylesheet;\n\n\t/**\n\t * Whether this is a Customizer pageload.\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var bool\n\t */\n\tprotected $previewing = false;\n\n\t/**\n\t * Methods and properties dealing with managing widgets in the Customizer.\n\t *\n\t * @since 3.9.0\n\t * @access public\n\t * @var WP_Customize_Widgets\n\t */\n\tpublic $widgets;\n\n\t/**\n\t * Methods and properties dealing with managing nav menus in the Customizer.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t * @var WP_Customize_Nav_Menus\n\t */\n\tpublic $nav_menus;\n\n\t/**\n\t * Methods and properties dealing with selective refresh in the Customizer preview.\n\t *\n\t * @since 4.5.0\n\t * @access public\n\t * @var WP_Customize_Selective_Refresh\n\t */\n\tpublic $selective_refresh;\n\n\t/**\n\t * Registered instances of WP_Customize_Setting.\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $settings = array();\n\n\t/**\n\t * Sorted top-level instances of WP_Customize_Panel and WP_Customize_Section.\n\t *\n\t * @since 4.0.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $containers = array();\n\n\t/**\n\t * Registered instances of WP_Customize_Panel.\n\t *\n\t * @since 4.0.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $panels = array();\n\n\t/**\n\t * List of core components.\n\t *\n\t * @since 4.5.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $components = array( 'widgets', 'nav_menus' );\n\n\t/**\n\t * Registered instances of WP_Customize_Section.\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $sections = array();\n\n\t/**\n\t * Registered instances of WP_Customize_Control.\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $controls = array();\n\n\t/**\n\t * Panel types that may be rendered from JS templates.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $registered_panel_types = array();\n\n\t/**\n\t * Section types that may be rendered from JS templates.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $registered_section_types = array();\n\n\t/**\n\t * Control types that may be rendered from JS templates.\n\t *\n\t * @since 4.1.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $registered_control_types = array();\n\n\t/**\n\t * Initial URL being previewed.\n\t *\n\t * @since 4.4.0\n\t * @access protected\n\t * @var string\n\t */\n\tprotected $preview_url;\n\n\t/**\n\t * URL to link the user to when closing the Customizer.\n\t *\n\t * @since 4.4.0\n\t * @access protected\n\t * @var string\n\t */\n\tprotected $return_url;\n\n\t/**\n\t * Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.\n\t *\n\t * @since 4.4.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $autofocus = array();\n\n\t/**\n\t * Messenger channel.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t * @var string\n\t */\n\tprotected $messenger_channel;\n\n\t/**\n\t * Unsanitized values for Customize Settings parsed from $_POST['customized'].\n\t *\n\t * @var array\n\t */\n\tprivate $_post_values;\n\n\t/**\n\t * Changeset UUID.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @var string\n\t */\n\tprivate $_changeset_uuid;\n\n\t/**\n\t * Changeset post ID.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @var int|false\n\t */\n\tprivate $_changeset_post_id;\n\n\t/**\n\t * Changeset data loaded from a customize_changeset post.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @var array\n\t */\n\tprivate $_changeset_data;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 3.4.0\n\t * @since 4.7.0 Added $args param.\n\t *\n\t * @param array $args {\n\t *     Args.\n\t *\n\t *     @type string $changeset_uuid    Changeset UUID, the post_name for the customize_changeset post containing the customized state. Defaults to new UUID.\n\t *     @type string $theme             Theme to be previewed (for theme switch). Defaults to customize_theme or theme query params.\n\t *     @type string $messenger_channel Messenger channel. Defaults to customize_messenger_channel query param.\n\t * }\n\t */\n\tpublic function __construct( $args = array() ) {\n\n\t\t$args = array_merge(\n\t\t\tarray_fill_keys( array( 'changeset_uuid', 'theme', 'messenger_channel' ), null ),\n\t\t\t$args\n\t\t);\n\n\t\t// Note that the UUID format will be validated in the setup_theme() method.\n\t\tif ( ! isset( $args['changeset_uuid'] ) ) {\n\t\t\t$args['changeset_uuid'] = wp_generate_uuid4();\n\t\t}\n\n\t\t// The theme and messenger_channel should be supplied via $args, but they are also looked at in the $_REQUEST global here for back-compat.\n\t\tif ( ! isset( $args['theme'] ) ) {\n\t\t\tif ( isset( $_REQUEST['customize_theme'] ) ) {\n\t\t\t\t$args['theme'] = wp_unslash( $_REQUEST['customize_theme'] );\n\t\t\t} elseif ( isset( $_REQUEST['theme'] ) ) { // Deprecated.\n\t\t\t\t$args['theme'] = wp_unslash( $_REQUEST['theme'] );\n\t\t\t}\n\t\t}\n\t\tif ( ! isset( $args['messenger_channel'] ) && isset( $_REQUEST['customize_messenger_channel'] ) ) {\n\t\t\t$args['messenger_channel'] = sanitize_key( wp_unslash( $_REQUEST['customize_messenger_channel'] ) );\n\t\t}\n\n\t\t$this->original_stylesheet = get_stylesheet();\n\t\t$this->theme = wp_get_theme( $args['theme'] );\n\t\t$this->messenger_channel = $args['messenger_channel'];\n\t\t$this->_changeset_uuid = $args['changeset_uuid'];\n\n\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-panel.php' );\n\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-section.php' );\n\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-control.php' );\n\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-color-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-media-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-upload-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-image-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-background-image-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-background-position-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-cropped-image-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-site-icon-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-header-image-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-theme-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-widget-area-customize-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-widget-form-customize-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-item-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-location-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-name-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-auto-add-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-new-menu-control.php' );\n\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menus-panel.php' );\n\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-themes-section.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-sidebar-section.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-section.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-new-menu-section.php' );\n\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-custom-css-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-filter-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-header-image-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-background-image-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-item-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-setting.php' );\n\n\t\t/**\n\t\t * Filters the core Customizer components to load.\n\t\t *\n\t\t * This allows Core components to be excluded from being instantiated by\n\t\t * filtering them out of the array. Note that this filter generally runs\n\t\t * during the {@see 'plugins_loaded'} action, so it cannot be added\n\t\t * in a theme.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @see WP_Customize_Manager::__construct()\n\t\t *\n\t\t * @param array                $components List of core components to load.\n\t\t * @param WP_Customize_Manager $this       WP_Customize_Manager instance.\n\t\t */\n\t\t$components = apply_filters( 'customize_loaded_components', $this->components, $this );\n\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-selective-refresh.php' );\n\t\t$this->selective_refresh = new WP_Customize_Selective_Refresh( $this );\n\n\t\tif ( in_array( 'widgets', $components, true ) ) {\n\t\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-widgets.php' );\n\t\t\t$this->widgets = new WP_Customize_Widgets( $this );\n\t\t}\n\n\t\tif ( in_array( 'nav_menus', $components, true ) ) {\n\t\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-nav-menus.php' );\n\t\t\t$this->nav_menus = new WP_Customize_Nav_Menus( $this );\n\t\t}\n\n\t\tadd_action( 'setup_theme', array( $this, 'setup_theme' ) );\n\t\tadd_action( 'wp_loaded',   array( $this, 'wp_loaded' ) );\n\n\t\t// Do not spawn cron (especially the alternate cron) while running the Customizer.\n\t\tremove_action( 'init', 'wp_cron' );\n\n\t\t// Do not run update checks when rendering the controls.\n\t\tremove_action( 'admin_init', '_maybe_update_core' );\n\t\tremove_action( 'admin_init', '_maybe_update_plugins' );\n\t\tremove_action( 'admin_init', '_maybe_update_themes' );\n\n\t\tadd_action( 'wp_ajax_customize_save',           array( $this, 'save' ) );\n\t\tadd_action( 'wp_ajax_customize_refresh_nonces', array( $this, 'refresh_nonces' ) );\n\n\t\tadd_action( 'customize_register',                 array( $this, 'register_controls' ) );\n\t\tadd_action( 'customize_register',                 array( $this, 'register_dynamic_settings' ), 11 ); // allow code to create settings first\n\t\tadd_action( 'customize_controls_init',            array( $this, 'prepare_controls' ) );\n\t\tadd_action( 'customize_controls_enqueue_scripts', array( $this, 'enqueue_control_scripts' ) );\n\n\t\t// Render Panel, Section, and Control templates.\n\t\tadd_action( 'customize_controls_print_footer_scripts', array( $this, 'render_panel_templates' ), 1 );\n\t\tadd_action( 'customize_controls_print_footer_scripts', array( $this, 'render_section_templates' ), 1 );\n\t\tadd_action( 'customize_controls_print_footer_scripts', array( $this, 'render_control_templates' ), 1 );\n\n\t\t// Export header video settings with the partial response.\n\t\tadd_filter( 'customize_render_partials_response', array( $this, 'export_header_video_settings' ), 10, 3 );\n\n\t\t// Export the settings to JS via the _wpCustomizeSettings variable.\n\t\tadd_action( 'customize_controls_print_footer_scripts', array( $this, 'customize_pane_settings' ), 1000 );\n\t}\n\n\t/**\n\t * Return true if it's an Ajax request.\n\t *\n\t * @since 3.4.0\n\t * @since 4.2.0 Added `$action` param.\n\t * @access public\n\t *\n\t * @param string|null $action Whether the supplied Ajax action is being run.\n\t * @return bool True if it's an Ajax request, false otherwise.\n\t */\n\tpublic function doing_ajax( $action = null ) {\n\t\tif ( ! wp_doing_ajax() ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( ! $action ) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\t/*\n\t\t\t * Note: we can't just use doing_action( \"wp_ajax_{$action}\" ) because we need\n\t\t\t * to check before admin-ajax.php gets to that point.\n\t\t\t */\n\t\t\treturn isset( $_REQUEST['action'] ) && wp_unslash( $_REQUEST['action'] ) === $action;\n\t\t}\n\t}\n\n\t/**\n\t * Custom wp_die wrapper. Returns either the standard message for UI\n\t * or the Ajax message.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param mixed $ajax_message Ajax return\n\t * @param mixed $message UI message\n\t */\n\tprotected function wp_die( $ajax_message, $message = null ) {\n\t\tif ( $this->doing_ajax() ) {\n\t\t\twp_die( $ajax_message );\n\t\t}\n\n\t\tif ( ! $message ) {\n\t\t\t$message = __( 'Cheatin&#8217; uh?' );\n\t\t}\n\n\t\tif ( $this->messenger_channel ) {\n\t\t\tob_start();\n\t\t\twp_enqueue_scripts();\n\t\t\twp_print_scripts( array( 'customize-base' ) );\n\n\t\t\t$settings = array(\n\t\t\t\t'messengerArgs' => array(\n\t\t\t\t\t'channel' => $this->messenger_channel,\n\t\t\t\t\t'url' => wp_customize_url(),\n\t\t\t\t),\n\t\t\t\t'error' => $ajax_message,\n\t\t\t);\n\t\t\t?>\n\t\t\t<script>\n\t\t\t( function( api, settings ) {\n\t\t\t\tvar preview = new api.Messenger( settings.messengerArgs );\n\t\t\t\tpreview.send( 'iframe-loading-error', settings.error );\n\t\t\t} )( wp.customize, <?php echo wp_json_encode( $settings ) ?> );\n\t\t\t</script>\n\t\t\t<?php\n\t\t\t$message .= ob_get_clean();\n\t\t}\n\n\t\twp_die( $message );\n\t}\n\n\t/**\n\t * Return the Ajax wp_die() handler if it's a customized request.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0\n\t *\n\t * @return callable Die handler.\n\t */\n\tpublic function wp_die_handler() {\n\t\t_deprecated_function( __METHOD__, '4.7.0' );\n\n\t\tif ( $this->doing_ajax() || isset( $_POST['customized'] ) ) {\n\t\t\treturn '_ajax_wp_die_handler';\n\t\t}\n\n\t\treturn '_default_wp_die_handler';\n\t}\n\n\t/**\n\t * Start preview and customize theme.\n\t *\n\t * Check if customize query variable exist. Init filters to filter the current theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @global string $pagenow\n\t */\n\tpublic function setup_theme() {\n\t\tglobal $pagenow;\n\n\t\t// Check permissions for customize.php access since this method is called before customize.php can run any code,\n\t\tif ( 'customize.php' === $pagenow && ! current_user_can( 'customize' ) ) {\n\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\tauth_redirect();\n\t\t\t} else {\n\t\t\t\twp_die(\n\t\t\t\t\t'<h1>' . __( 'Cheatin&#8217; uh?' ) . '</h1>' .\n\t\t\t\t\t'<p>' . __( 'Sorry, you are not allowed to customize this site.' ) . '</p>',\n\t\t\t\t\t403\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! preg_match( '/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/', $this->_changeset_uuid ) ) {\n\t\t\t$this->wp_die( -1, __( 'Invalid changeset UUID' ) );\n\t\t}\n\n\t\t/*\n\t\t * If unauthenticated then require a valid changeset UUID to load the preview.\n\t\t * In this way, the UUID serves as a secret key. If the messenger channel is present,\n\t\t * then send unauthenticated code to prompt re-auth.\n\t\t */\n\t\tif ( ! current_user_can( 'customize' ) && ! $this->changeset_post_id() ) {\n\t\t\t$this->wp_die( $this->messenger_channel ? 0 : -1, __( 'Non-existent changeset UUID.' ) );\n\t\t}\n\n\t\tif ( ! headers_sent() ) {\n\t\t\tsend_origin_headers();\n\t\t}\n\n\t\t// Hide the admin bar if we're embedded in the customizer iframe.\n\t\tif ( $this->messenger_channel ) {\n\t\t\tshow_admin_bar( false );\n\t\t}\n\n\t\tif ( $this->is_theme_active() ) {\n\t\t\t// Once the theme is loaded, we'll validate it.\n\t\t\tadd_action( 'after_setup_theme', array( $this, 'after_setup_theme' ) );\n\t\t} else {\n\t\t\t// If the requested theme is not the active theme and the user doesn't have the\n\t\t\t// switch_themes cap, bail.\n\t\t\tif ( ! current_user_can( 'switch_themes' ) ) {\n\t\t\t\t$this->wp_die( -1, __( 'Sorry, you are not allowed to edit theme options on this site.' ) );\n\t\t\t}\n\n\t\t\t// If the theme has errors while loading, bail.\n\t\t\tif ( $this->theme()->errors() ) {\n\t\t\t\t$this->wp_die( -1, $this->theme()->errors()->get_error_message() );\n\t\t\t}\n\n\t\t\t// If the theme isn't allowed per multisite settings, bail.\n\t\t\tif ( ! $this->theme()->is_allowed() ) {\n\t\t\t\t$this->wp_die( -1, __( 'The requested theme does not exist.' ) );\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Import theme starter content for fresh installs when landing in the customizer.\n\t\t * Import starter content at after_setup_theme:100 so that any\n\t\t * add_theme_support( 'starter-content' ) calls will have been made.\n\t\t */\n\t\tif ( get_option( 'fresh_site' ) && 'customize.php' === $pagenow ) {\n\t\t\tadd_action( 'after_setup_theme', array( $this, 'import_theme_starter_content' ), 100 );\n\t\t}\n\n\t\t$this->start_previewing_theme();\n\t}\n\n\t/**\n\t * Callback to validate a theme once it is loaded\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function after_setup_theme() {\n\t\t$doing_ajax_or_is_customized = ( $this->doing_ajax() || isset( $_POST['customized'] ) );\n\t\tif ( ! $doing_ajax_or_is_customized && ! validate_current_theme() ) {\n\t\t\twp_redirect( 'themes.php?broken=true' );\n\t\t\texit;\n\t\t}\n\t}\n\n\t/**\n\t * If the theme to be previewed isn't the active theme, add filter callbacks\n\t * to swap it out at runtime.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function start_previewing_theme() {\n\t\t// Bail if we're already previewing.\n\t\tif ( $this->is_preview() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->previewing = true;\n\n\t\tif ( ! $this->is_theme_active() ) {\n\t\t\tadd_filter( 'template', array( $this, 'get_template' ) );\n\t\t\tadd_filter( 'stylesheet', array( $this, 'get_stylesheet' ) );\n\t\t\tadd_filter( 'pre_option_current_theme', array( $this, 'current_theme' ) );\n\n\t\t\t// @link: https://core.trac.wordpress.org/ticket/20027\n\t\t\tadd_filter( 'pre_option_stylesheet', array( $this, 'get_stylesheet' ) );\n\t\t\tadd_filter( 'pre_option_template', array( $this, 'get_template' ) );\n\n\t\t\t// Handle custom theme roots.\n\t\t\tadd_filter( 'pre_option_stylesheet_root', array( $this, 'get_stylesheet_root' ) );\n\t\t\tadd_filter( 'pre_option_template_root', array( $this, 'get_template_root' ) );\n\t\t}\n\n\t\t/**\n\t\t * Fires once the Customizer theme preview has started.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param WP_Customize_Manager $this WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'start_previewing_theme', $this );\n\t}\n\n\t/**\n\t * Stop previewing the selected theme.\n\t *\n\t * Removes filters to change the current theme.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function stop_previewing_theme() {\n\t\tif ( ! $this->is_preview() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->previewing = false;\n\n\t\tif ( ! $this->is_theme_active() ) {\n\t\t\tremove_filter( 'template', array( $this, 'get_template' ) );\n\t\t\tremove_filter( 'stylesheet', array( $this, 'get_stylesheet' ) );\n\t\t\tremove_filter( 'pre_option_current_theme', array( $this, 'current_theme' ) );\n\n\t\t\t// @link: https://core.trac.wordpress.org/ticket/20027\n\t\t\tremove_filter( 'pre_option_stylesheet', array( $this, 'get_stylesheet' ) );\n\t\t\tremove_filter( 'pre_option_template', array( $this, 'get_template' ) );\n\n\t\t\t// Handle custom theme roots.\n\t\t\tremove_filter( 'pre_option_stylesheet_root', array( $this, 'get_stylesheet_root' ) );\n\t\t\tremove_filter( 'pre_option_template_root', array( $this, 'get_template_root' ) );\n\t\t}\n\n\t\t/**\n\t\t * Fires once the Customizer theme preview has stopped.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param WP_Customize_Manager $this WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'stop_previewing_theme', $this );\n\t}\n\n\t/**\n\t * Get the changeset UUID.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return string UUID.\n\t */\n\tpublic function changeset_uuid() {\n\t\treturn $this->_changeset_uuid;\n\t}\n\n\t/**\n\t * Get the theme being customized.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return WP_Theme\n\t */\n\tpublic function theme() {\n\t\tif ( ! $this->theme ) {\n\t\t\t$this->theme = wp_get_theme();\n\t\t}\n\t\treturn $this->theme;\n\t}\n\n\t/**\n\t * Get the registered settings.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return array\n\t */\n\tpublic function settings() {\n\t\treturn $this->settings;\n\t}\n\n\t/**\n\t * Get the registered controls.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return array\n\t */\n\tpublic function controls() {\n\t\treturn $this->controls;\n\t}\n\n\t/**\n\t * Get the registered containers.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @return array\n\t */\n\tpublic function containers() {\n\t\treturn $this->containers;\n\t}\n\n\t/**\n\t * Get the registered sections.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return array\n\t */\n\tpublic function sections() {\n\t\treturn $this->sections;\n\t}\n\n\t/**\n\t * Get the registered panels.\n\t *\n\t * @since 4.0.0\n\t * @access public\n\t *\n\t * @return array Panels.\n\t */\n\tpublic function panels() {\n\t\treturn $this->panels;\n\t}\n\n\t/**\n\t * Checks if the current theme is active.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return bool\n\t */\n\tpublic function is_theme_active() {\n\t\treturn $this->get_stylesheet() == $this->original_stylesheet;\n\t}\n\n\t/**\n\t * Register styles/scripts and initialize the preview of each setting\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function wp_loaded() {\n\n\t\t/**\n\t\t * Fires once WordPress has loaded, allowing scripts and styles to be initialized.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param WP_Customize_Manager $this WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_register', $this );\n\n\t\t/*\n\t\t * Note that settings must be previewed here even outside the customizer preview\n\t\t * and also in the customizer pane itself. This is to enable loading an existing\n\t\t * changeset into the customizer. Previewing the settings only has to be prevented\n\t\t * in the case of a customize_save action because then update_option()\n\t\t * may short-circuit because it will detect that there are no changes to\n\t\t * make.\n\t\t */\n\t\tif ( ! $this->doing_ajax( 'customize_save' ) ) {\n\t\t\tforeach ( $this->settings as $setting ) {\n\t\t\t\t$setting->preview();\n\t\t\t}\n\t\t}\n\n\t\tif ( $this->is_preview() && ! is_admin() ) {\n\t\t\t$this->customize_preview_init();\n\t\t}\n\t}\n\n\t/**\n\t * Prevents Ajax requests from following redirects when previewing a theme\n\t * by issuing a 200 response instead of a 30x.\n\t *\n\t * Instead, the JS will sniff out the location header.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0\n\t *\n\t * @param int $status Status.\n\t * @return int\n\t */\n\tpublic function wp_redirect_status( $status ) {\n\t\t_deprecated_function( __FUNCTION__, '4.7.0' );\n\n\t\tif ( $this->is_preview() && ! is_admin() ) {\n\t\t\treturn 200;\n\t\t}\n\n\t\treturn $status;\n\t}\n\n\t/**\n\t * Find the changeset post ID for a given changeset UUID.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param string $uuid Changeset UUID.\n\t * @return int|null Returns post ID on success and null on failure.\n\t */\n\tpublic function find_changeset_post_id( $uuid ) {\n\t\t$cache_group = 'customize_changeset_post';\n\t\t$changeset_post_id = wp_cache_get( $uuid, $cache_group );\n\t\tif ( $changeset_post_id && 'customize_changeset' === get_post_type( $changeset_post_id ) ) {\n\t\t\treturn $changeset_post_id;\n\t\t}\n\n\t\t$changeset_post_query = new WP_Query( array(\n\t\t\t'post_type' => 'customize_changeset',\n\t\t\t'post_status' => get_post_stati(),\n\t\t\t'name' => $uuid,\n\t\t\t'posts_per_page' => 1,\n\t\t\t'no_found_rows' => true,\n\t\t\t'cache_results' => true,\n\t\t\t'update_post_meta_cache' => false,\n\t\t\t'update_post_term_cache' => false,\n\t\t\t'lazy_load_term_meta' => false,\n\t\t) );\n\t\tif ( ! empty( $changeset_post_query->posts ) ) {\n\t\t\t// Note: 'fields'=>'ids' is not being used in order to cache the post object as it will be needed.\n\t\t\t$changeset_post_id = $changeset_post_query->posts[0]->ID;\n\t\t\twp_cache_set( $this->_changeset_uuid, $changeset_post_id, $cache_group );\n\t\t\treturn $changeset_post_id;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Get the changeset post id for the loaded changeset.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return int|null Post ID on success or null if there is no post yet saved.\n\t */\n\tpublic function changeset_post_id() {\n\t\tif ( ! isset( $this->_changeset_post_id ) ) {\n\t\t\t$post_id = $this->find_changeset_post_id( $this->_changeset_uuid );\n\t\t\tif ( ! $post_id ) {\n\t\t\t\t$post_id = false;\n\t\t\t}\n\t\t\t$this->_changeset_post_id = $post_id;\n\t\t}\n\t\tif ( false === $this->_changeset_post_id ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn $this->_changeset_post_id;\n\t}\n\n\t/**\n\t * Get the data stored in a changeset post.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t *\n\t * @param int $post_id Changeset post ID.\n\t * @return array|WP_Error Changeset data or WP_Error on error.\n\t */\n\tprotected function get_changeset_post_data( $post_id ) {\n\t\tif ( ! $post_id ) {\n\t\t\treturn new WP_Error( 'empty_post_id' );\n\t\t}\n\t\t$changeset_post = get_post( $post_id );\n\t\tif ( ! $changeset_post ) {\n\t\t\treturn new WP_Error( 'missing_post' );\n\t\t}\n\t\tif ( 'customize_changeset' !== $changeset_post->post_type ) {\n\t\t\treturn new WP_Error( 'wrong_post_type' );\n\t\t}\n\t\t$changeset_data = json_decode( $changeset_post->post_content, true );\n\t\tif ( function_exists( 'json_last_error' ) && json_last_error() ) {\n\t\t\treturn new WP_Error( 'json_parse_error', '', json_last_error() );\n\t\t}\n\t\tif ( ! is_array( $changeset_data ) ) {\n\t\t\treturn new WP_Error( 'expected_array' );\n\t\t}\n\t\treturn $changeset_data;\n\t}\n\n\t/**\n\t * Get changeset data.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return array Changeset data.\n\t */\n\tpublic function changeset_data() {\n\t\tif ( isset( $this->_changeset_data ) ) {\n\t\t\treturn $this->_changeset_data;\n\t\t}\n\t\t$changeset_post_id = $this->changeset_post_id();\n\t\tif ( ! $changeset_post_id ) {\n\t\t\t$this->_changeset_data = array();\n\t\t} else {\n\t\t\t$data = $this->get_changeset_post_data( $changeset_post_id );\n\t\t\tif ( ! is_wp_error( $data ) ) {\n\t\t\t\t$this->_changeset_data = $data;\n\t\t\t} else {\n\t\t\t\t$this->_changeset_data = array();\n\t\t\t}\n\t\t}\n\t\treturn $this->_changeset_data;\n\t}\n\n\t/**\n\t * Starter content setting IDs.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @var array\n\t */\n\tprotected $pending_starter_content_settings_ids = array();\n\n\t/**\n\t * Import theme starter content into the customized state.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param array $starter_content Starter content. Defaults to `get_theme_starter_content()`.\n\t */\n\tfunction import_theme_starter_content( $starter_content = array() ) {\n\t\tif ( empty( $starter_content ) ) {\n\t\t\t$starter_content = get_theme_starter_content();\n\t\t}\n\n\t\t$changeset_data = array();\n\t\tif ( $this->changeset_post_id() ) {\n\t\t\t$changeset_data = $this->get_changeset_post_data( $this->changeset_post_id() );\n\t\t}\n\n\t\t$sidebars_widgets = isset( $starter_content['widgets'] ) && ! empty( $this->widgets ) ? $starter_content['widgets'] : array();\n\t\t$attachments = isset( $starter_content['attachments'] ) && ! empty( $this->nav_menus ) ? $starter_content['attachments'] : array();\n\t\t$posts = isset( $starter_content['posts'] ) && ! empty( $this->nav_menus ) ? $starter_content['posts'] : array();\n\t\t$options = isset( $starter_content['options'] ) ? $starter_content['options'] : array();\n\t\t$nav_menus = isset( $starter_content['nav_menus'] ) && ! empty( $this->nav_menus ) ? $starter_content['nav_menus'] : array();\n\t\t$theme_mods = isset( $starter_content['theme_mods'] ) ? $starter_content['theme_mods'] : array();\n\n\t\t// Widgets.\n\t\t$max_widget_numbers = array();\n\t\tforeach ( $sidebars_widgets as $sidebar_id => $widgets ) {\n\t\t\t$sidebar_widget_ids = array();\n\t\t\tforeach ( $widgets as $widget ) {\n\t\t\t\tlist( $id_base, $instance ) = $widget;\n\n\t\t\t\tif ( ! isset( $max_widget_numbers[ $id_base ] ) ) {\n\n\t\t\t\t\t// When $settings is an array-like object, get an intrinsic array for use with array_keys().\n\t\t\t\t\t$settings = get_option( \"widget_{$id_base}\", array() );\n\t\t\t\t\tif ( $settings instanceof ArrayObject || $settings instanceof ArrayIterator ) {\n\t\t\t\t\t\t$settings = $settings->getArrayCopy();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Find the max widget number for this type.\n\t\t\t\t\t$widget_numbers = array_keys( $settings );\n\t\t\t\t\tif ( count( $widget_numbers ) > 0 ) {\n\t\t\t\t\t\t$widget_numbers[] = 1;\n\t\t\t\t\t\t$max_widget_numbers[ $id_base ] = call_user_func_array( 'max', $widget_numbers );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$max_widget_numbers[ $id_base ] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$max_widget_numbers[ $id_base ] += 1;\n\n\t\t\t\t$widget_id = sprintf( '%s-%d', $id_base, $max_widget_numbers[ $id_base ] );\n\t\t\t\t$setting_id = sprintf( 'widget_%s[%d]', $id_base, $max_widget_numbers[ $id_base ] );\n\n\t\t\t\t$setting_value = $this->widgets->sanitize_widget_js_instance( $instance );\n\t\t\t\tif ( empty( $changeset_data[ $setting_id ] ) || ! empty( $changeset_data[ $setting_id ]['starter_content'] ) ) {\n\t\t\t\t\t$this->set_post_value( $setting_id, $setting_value );\n\t\t\t\t\t$this->pending_starter_content_settings_ids[] = $setting_id;\n\t\t\t\t}\n\t\t\t\t$sidebar_widget_ids[] = $widget_id;\n\t\t\t}\n\n\t\t\t$setting_id = sprintf( 'sidebars_widgets[%s]', $sidebar_id );\n\t\t\tif ( empty( $changeset_data[ $setting_id ] ) || ! empty( $changeset_data[ $setting_id ]['starter_content'] ) ) {\n\t\t\t\t$this->set_post_value( $setting_id, $sidebar_widget_ids );\n\t\t\t\t$this->pending_starter_content_settings_ids[] = $setting_id;\n\t\t\t}\n\t\t}\n\n\t\t$starter_content_auto_draft_post_ids = array();\n\t\tif ( ! empty( $changeset_data['nav_menus_created_posts']['value'] ) ) {\n\t\t\t$starter_content_auto_draft_post_ids = array_merge( $starter_content_auto_draft_post_ids, $changeset_data['nav_menus_created_posts']['value'] );\n\t\t}\n\n\t\t// Make an index of all the posts needed and what their slugs are.\n\t\t$needed_posts = array();\n\t\t$attachments = $this->prepare_starter_content_attachments( $attachments );\n\t\tforeach ( $attachments as $attachment ) {\n\t\t\t$key = 'attachment:' . $attachment['post_name'];\n\t\t\t$needed_posts[ $key ] = true;\n\t\t}\n\t\tforeach ( array_keys( $posts ) as $post_symbol ) {\n\t\t\tif ( empty( $posts[ $post_symbol ]['post_name'] ) && empty( $posts[ $post_symbol ]['post_title'] ) ) {\n\t\t\t\tunset( $posts[ $post_symbol ] );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ( empty( $posts[ $post_symbol ]['post_name'] ) ) {\n\t\t\t\t$posts[ $post_symbol ]['post_name'] = sanitize_title( $posts[ $post_symbol ]['post_title'] );\n\t\t\t}\n\t\t\tif ( empty( $posts[ $post_symbol ]['post_type'] ) ) {\n\t\t\t\t$posts[ $post_symbol ]['post_type'] = 'post';\n\t\t\t}\n\t\t\t$needed_posts[ $posts[ $post_symbol ]['post_type'] . ':' . $posts[ $post_symbol ]['post_name'] ] = true;\n\t\t}\n\t\t$all_post_slugs = array_merge(\n\t\t\twp_list_pluck( $attachments, 'post_name' ),\n\t\t\twp_list_pluck( $posts, 'post_name' )\n\t\t);\n\n\t\t/*\n\t\t * Obtain all post types referenced in starter content to use in query.\n\t\t * This is needed because 'any' will not account for post types not yet registered.\n\t\t */\n\t\t$post_types = array_filter( array_merge( array( 'attachment' ), wp_list_pluck( $posts, 'post_type' ) ) );\n\n\t\t// Re-use auto-draft starter content posts referenced in the current customized state.\n\t\t$existing_starter_content_posts = array();\n\t\tif ( ! empty( $starter_content_auto_draft_post_ids ) ) {\n\t\t\t$existing_posts_query = new WP_Query( array(\n\t\t\t\t'post__in' => $starter_content_auto_draft_post_ids,\n\t\t\t\t'post_status' => 'auto-draft',\n\t\t\t\t'post_type' => $post_types,\n\t\t\t\t'posts_per_page' => -1,\n\t\t\t) );\n\t\t\tforeach ( $existing_posts_query->posts as $existing_post ) {\n\t\t\t\t$post_name = $existing_post->post_name;\n\t\t\t\tif ( empty( $post_name ) ) {\n\t\t\t\t\t$post_name = get_post_meta( $existing_post->ID, '_customize_draft_post_name', true );\n\t\t\t\t}\n\t\t\t\t$existing_starter_content_posts[ $existing_post->post_type . ':' . $post_name ] = $existing_post;\n\t\t\t}\n\t\t}\n\n\t\t// Re-use non-auto-draft posts.\n\t\tif ( ! empty( $all_post_slugs ) ) {\n\t\t\t$existing_posts_query = new WP_Query( array(\n\t\t\t\t'post_name__in' => $all_post_slugs,\n\t\t\t\t'post_status' => array_diff( get_post_stati(), array( 'auto-draft' ) ),\n\t\t\t\t'post_type' => 'any',\n\t\t\t\t'posts_per_page' => -1,\n\t\t\t) );\n\t\t\tforeach ( $existing_posts_query->posts as $existing_post ) {\n\t\t\t\t$key = $existing_post->post_type . ':' . $existing_post->post_name;\n\t\t\t\tif ( isset( $needed_posts[ $key ] ) && ! isset( $existing_starter_content_posts[ $key ] ) ) {\n\t\t\t\t\t$existing_starter_content_posts[ $key ] = $existing_post;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Attachments are technically posts but handled differently.\n\t\tif ( ! empty( $attachments ) ) {\n\n\t\t\t$attachment_ids = array();\n\n\t\t\tforeach ( $attachments as $symbol => $attachment ) {\n\t\t\t\t$file_array = array(\n\t\t\t\t\t'name' => $attachment['file_name'],\n\t\t\t\t);\n\t\t\t\t$file_path = $attachment['file_path'];\n\t\t\t\t$attachment_id = null;\n\t\t\t\t$attached_file = null;\n\t\t\t\tif ( isset( $existing_starter_content_posts[ 'attachment:' . $attachment['post_name'] ] ) ) {\n\t\t\t\t\t$attachment_post = $existing_starter_content_posts[ 'attachment:' . $attachment['post_name'] ];\n\t\t\t\t\t$attachment_id = $attachment_post->ID;\n\t\t\t\t\t$attached_file = get_attached_file( $attachment_id );\n\t\t\t\t\tif ( empty( $attached_file ) || ! file_exists( $attached_file ) ) {\n\t\t\t\t\t\t$attachment_id = null;\n\t\t\t\t\t\t$attached_file = null;\n\t\t\t\t\t} elseif ( $this->get_stylesheet() !== get_post_meta( $attachment_post->ID, '_starter_content_theme', true ) ) {\n\n\t\t\t\t\t\t// Re-generate attachment metadata since it was previously generated for a different theme.\n\t\t\t\t\t\t$metadata = wp_generate_attachment_metadata( $attachment_post->ID, $attached_file );\n\t\t\t\t\t\twp_update_attachment_metadata( $attachment_id, $metadata );\n\t\t\t\t\t\tupdate_post_meta( $attachment_id, '_starter_content_theme', $this->get_stylesheet() );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Insert the attachment auto-draft because it doesn't yet exist or the attached file is gone.\n\t\t\t\tif ( ! $attachment_id ) {\n\n\t\t\t\t\t// Copy file to temp location so that original file won't get deleted from theme after sideloading.\n\t\t\t\t\t$temp_file_name = wp_tempnam( basename( $file_path ) );\n\t\t\t\t\tif ( $temp_file_name && copy( $file_path, $temp_file_name ) ) {\n\t\t\t\t\t\t$file_array['tmp_name'] = $temp_file_name;\n\t\t\t\t\t}\n\t\t\t\t\tif ( empty( $file_array['tmp_name'] ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$attachment_post_data = array_merge(\n\t\t\t\t\t\twp_array_slice_assoc( $attachment, array( 'post_title', 'post_content', 'post_excerpt' ) ),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'post_status' => 'auto-draft', // So attachment will be garbage collected in a week if changeset is never published.\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\t// In PHP < 5.6 filesize() returns 0 for the temp files unless we clear the file status cache.\n\t\t\t\t\t// Technically, PHP < 5.6.0 || < 5.5.13 || < 5.4.29 but no need to be so targeted.\n\t\t\t\t\t// See https://bugs.php.net/bug.php?id=65701\n\t\t\t\t\tif ( version_compare( PHP_VERSION, '5.6', '<' ) ) {\n\t\t\t\t\t\tclearstatcache();\n\t\t\t\t\t}\n\n\t\t\t\t\t$attachment_id = media_handle_sideload( $file_array, 0, null, $attachment_post_data );\n\t\t\t\t\tif ( is_wp_error( $attachment_id ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tupdate_post_meta( $attachment_id, '_starter_content_theme', $this->get_stylesheet() );\n\t\t\t\t\tupdate_post_meta( $attachment_id, '_customize_draft_post_name', $attachment['post_name'] );\n\t\t\t\t}\n\n\t\t\t\t$attachment_ids[ $symbol ] = $attachment_id;\n\t\t\t}\n\t\t\t$starter_content_auto_draft_post_ids = array_merge( $starter_content_auto_draft_post_ids, array_values( $attachment_ids ) );\n\t\t}\n\n\t\t// Posts & pages.\n\t\tif ( ! empty( $posts ) ) {\n\t\t\tforeach ( array_keys( $posts ) as $post_symbol ) {\n\t\t\t\tif ( empty( $posts[ $post_symbol ]['post_type'] ) || empty( $posts[ $post_symbol ]['post_name'] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$post_type = $posts[ $post_symbol ]['post_type'];\n\t\t\t\tif ( ! empty( $posts[ $post_symbol ]['post_name'] ) ) {\n\t\t\t\t\t$post_name = $posts[ $post_symbol ]['post_name'];\n\t\t\t\t} elseif ( ! empty( $posts[ $post_symbol ]['post_title'] ) ) {\n\t\t\t\t\t$post_name = sanitize_title( $posts[ $post_symbol ]['post_title'] );\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Use existing auto-draft post if one already exists with the same type and name.\n\t\t\t\tif ( isset( $existing_starter_content_posts[ $post_type . ':' . $post_name ] ) ) {\n\t\t\t\t\t$posts[ $post_symbol ]['ID'] = $existing_starter_content_posts[ $post_type . ':' . $post_name ]->ID;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Translate the featured image symbol.\n\t\t\t\tif ( ! empty( $posts[ $post_symbol ]['thumbnail'] )\n\t\t\t\t\t&& preg_match( '/^{{(?P<symbol>.+)}}$/', $posts[ $post_symbol ]['thumbnail'], $matches )\n\t\t\t\t\t&& isset( $attachment_ids[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t$posts[ $post_symbol ]['meta_input']['_thumbnail_id'] = $attachment_ids[ $matches['symbol'] ];\n\t\t\t\t}\n\n\t\t\t\tif ( ! empty( $posts[ $post_symbol ]['template'] ) ) {\n\t\t\t\t\t$posts[ $post_symbol ]['meta_input']['_wp_page_template'] = $posts[ $post_symbol ]['template'];\n\t\t\t\t}\n\n\t\t\t\t$r = $this->nav_menus->insert_auto_draft_post( $posts[ $post_symbol ] );\n\t\t\t\tif ( $r instanceof WP_Post ) {\n\t\t\t\t\t$posts[ $post_symbol ]['ID'] = $r->ID;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$starter_content_auto_draft_post_ids = array_merge( $starter_content_auto_draft_post_ids, wp_list_pluck( $posts, 'ID' ) );\n\t\t}\n\n\t\t// The nav_menus_created_posts setting is why nav_menus component is dependency for adding posts.\n\t\tif ( ! empty( $this->nav_menus ) && ! empty( $starter_content_auto_draft_post_ids ) ) {\n\t\t\t$setting_id = 'nav_menus_created_posts';\n\t\t\t$this->set_post_value( $setting_id, array_unique( array_values( $starter_content_auto_draft_post_ids ) ) );\n\t\t\t$this->pending_starter_content_settings_ids[] = $setting_id;\n\t\t}\n\n\t\t// Nav menus.\n\t\t$placeholder_id = -1;\n\t\t$reused_nav_menu_setting_ids = array();\n\t\tforeach ( $nav_menus as $nav_menu_location => $nav_menu ) {\n\n\t\t\t$nav_menu_term_id = null;\n\t\t\t$nav_menu_setting_id = null;\n\t\t\t$matches = array();\n\n\t\t\t// Look for an existing placeholder menu with starter content to re-use.\n\t\t\tforeach ( $changeset_data as $setting_id => $setting_params ) {\n\t\t\t\t$can_reuse = (\n\t\t\t\t\t! empty( $setting_params['starter_content'] )\n\t\t\t\t\t&&\n\t\t\t\t\t! in_array( $setting_id, $reused_nav_menu_setting_ids, true )\n\t\t\t\t\t&&\n\t\t\t\t\tpreg_match( '#^nav_menu\\[(?P<nav_menu_id>-?\\d+)\\]$#', $setting_id, $matches )\n\t\t\t\t);\n\t\t\t\tif ( $can_reuse ) {\n\t\t\t\t\t$nav_menu_term_id = intval( $matches['nav_menu_id'] );\n\t\t\t\t\t$nav_menu_setting_id = $setting_id;\n\t\t\t\t\t$reused_nav_menu_setting_ids[] = $setting_id;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! $nav_menu_term_id ) {\n\t\t\t\twhile ( isset( $changeset_data[ sprintf( 'nav_menu[%d]', $placeholder_id ) ] ) ) {\n\t\t\t\t\t$placeholder_id--;\n\t\t\t\t}\n\t\t\t\t$nav_menu_term_id = $placeholder_id;\n\t\t\t\t$nav_menu_setting_id = sprintf( 'nav_menu[%d]', $placeholder_id );\n\t\t\t}\n\n\t\t\t$this->set_post_value( $nav_menu_setting_id, array(\n\t\t\t\t'name' => isset( $nav_menu['name'] ) ? $nav_menu['name'] : $nav_menu_location,\n\t\t\t) );\n\t\t\t$this->pending_starter_content_settings_ids[] = $nav_menu_setting_id;\n\n\t\t\t// @todo Add support for menu_item_parent.\n\t\t\t$position = 0;\n\t\t\tforeach ( $nav_menu['items'] as $nav_menu_item ) {\n\t\t\t\t$nav_menu_item_setting_id = sprintf( 'nav_menu_item[%d]', $placeholder_id-- );\n\t\t\t\tif ( ! isset( $nav_menu_item['position'] ) ) {\n\t\t\t\t\t$nav_menu_item['position'] = $position++;\n\t\t\t\t}\n\t\t\t\t$nav_menu_item['nav_menu_term_id'] = $nav_menu_term_id;\n\n\t\t\t\tif ( isset( $nav_menu_item['object_id'] ) ) {\n\t\t\t\t\tif ( 'post_type' === $nav_menu_item['type'] && preg_match( '/^{{(?P<symbol>.+)}}$/', $nav_menu_item['object_id'], $matches ) && isset( $posts[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t\t$nav_menu_item['object_id'] = $posts[ $matches['symbol'] ]['ID'];\n\t\t\t\t\t\tif ( empty( $nav_menu_item['title'] ) ) {\n\t\t\t\t\t\t\t$original_object = get_post( $nav_menu_item['object_id'] );\n\t\t\t\t\t\t\t$nav_menu_item['title'] = $original_object->post_title;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$nav_menu_item['object_id'] = 0;\n\t\t\t\t}\n\n\t\t\t\tif ( empty( $changeset_data[ $nav_menu_item_setting_id ] ) || ! empty( $changeset_data[ $nav_menu_item_setting_id ]['starter_content'] ) ) {\n\t\t\t\t\t$this->set_post_value( $nav_menu_item_setting_id, $nav_menu_item );\n\t\t\t\t\t$this->pending_starter_content_settings_ids[] = $nav_menu_item_setting_id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$setting_id = sprintf( 'nav_menu_locations[%s]', $nav_menu_location );\n\t\t\tif ( empty( $changeset_data[ $setting_id ] ) || ! empty( $changeset_data[ $setting_id ]['starter_content'] ) ) {\n\t\t\t\t$this->set_post_value( $setting_id, $nav_menu_term_id );\n\t\t\t\t$this->pending_starter_content_settings_ids[] = $setting_id;\n\t\t\t}\n\t\t}\n\n\t\t// Options.\n\t\tforeach ( $options as $name => $value ) {\n\t\t\tif ( preg_match( '/^{{(?P<symbol>.+)}}$/', $value, $matches ) ) {\n\t\t\t\tif ( isset( $posts[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t$value = $posts[ $matches['symbol'] ]['ID'];\n\t\t\t\t} elseif ( isset( $attachment_ids[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t$value = $attachment_ids[ $matches['symbol'] ];\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( empty( $changeset_data[ $name ] ) || ! empty( $changeset_data[ $name ]['starter_content'] ) ) {\n\t\t\t\t$this->set_post_value( $name, $value );\n\t\t\t\t$this->pending_starter_content_settings_ids[] = $name;\n\t\t\t}\n\t\t}\n\n\t\t// Theme mods.\n\t\tforeach ( $theme_mods as $name => $value ) {\n\t\t\tif ( preg_match( '/^{{(?P<symbol>.+)}}$/', $value, $matches ) ) {\n\t\t\t\tif ( isset( $posts[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t$value = $posts[ $matches['symbol'] ]['ID'];\n\t\t\t\t} elseif ( isset( $attachment_ids[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t$value = $attachment_ids[ $matches['symbol'] ];\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Handle header image as special case since setting has a legacy format.\n\t\t\tif ( 'header_image' === $name ) {\n\t\t\t\t$name = 'header_image_data';\n\t\t\t\t$metadata = wp_get_attachment_metadata( $value );\n\t\t\t\tif ( empty( $metadata ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$value = array(\n\t\t\t\t\t'attachment_id' => $value,\n\t\t\t\t\t'url' => wp_get_attachment_url( $value ),\n\t\t\t\t\t'height' => $metadata['height'],\n\t\t\t\t\t'width' => $metadata['width'],\n\t\t\t\t);\n\t\t\t} elseif ( 'background_image' === $name ) {\n\t\t\t\t$value = wp_get_attachment_url( $value );\n\t\t\t}\n\n\t\t\tif ( empty( $changeset_data[ $name ] ) || ! empty( $changeset_data[ $name ]['starter_content'] ) ) {\n\t\t\t\t$this->set_post_value( $name, $value );\n\t\t\t\t$this->pending_starter_content_settings_ids[] = $name;\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $this->pending_starter_content_settings_ids ) ) {\n\t\t\tif ( did_action( 'customize_register' ) ) {\n\t\t\t\t$this->_save_starter_content_changeset();\n\t\t\t} else {\n\t\t\t\tadd_action( 'customize_register', array( $this, '_save_starter_content_changeset' ), 1000 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Prepare starter content attachments.\n\t *\n\t * Ensure that the attachments are valid and that they have slugs and file name/path.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t *\n\t * @param array $attachments Attachments.\n\t * @return array Prepared attachments.\n\t */\n\tprotected function prepare_starter_content_attachments( $attachments ) {\n\t\t$prepared_attachments = array();\n\t\tif ( empty( $attachments ) ) {\n\t\t\treturn $prepared_attachments;\n\t\t}\n\n\t\t// Such is The WordPress Way.\n\t\trequire_once( ABSPATH . 'wp-admin/includes/file.php' );\n\t\trequire_once( ABSPATH . 'wp-admin/includes/media.php' );\n\t\trequire_once( ABSPATH . 'wp-admin/includes/image.php' );\n\n\t\tforeach ( $attachments as $symbol => $attachment ) {\n\n\t\t\t// A file is required and URLs to files are not currently allowed.\n\t\t\tif ( empty( $attachment['file'] ) || preg_match( '#^https?://$#', $attachment['file'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$file_path = null;\n\t\t\tif ( file_exists( $attachment['file'] ) ) {\n\t\t\t\t$file_path = $attachment['file']; // Could be absolute path to file in plugin.\n\t\t\t} elseif ( is_child_theme() && file_exists( get_stylesheet_directory() . '/' . $attachment['file'] ) ) {\n\t\t\t\t$file_path = get_stylesheet_directory() . '/' . $attachment['file'];\n\t\t\t} elseif ( file_exists( get_template_directory() . '/' . $attachment['file'] ) ) {\n\t\t\t\t$file_path = get_template_directory() . '/' . $attachment['file'];\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$file_name = basename( $attachment['file'] );\n\n\t\t\t// Skip file types that are not recognized.\n\t\t\t$checked_filetype = wp_check_filetype( $file_name );\n\t\t\tif ( empty( $checked_filetype['type'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Ensure post_name is set since not automatically derived from post_title for new auto-draft posts.\n\t\t\tif ( empty( $attachment['post_name'] ) ) {\n\t\t\t\tif ( ! empty( $attachment['post_title'] ) ) {\n\t\t\t\t\t$attachment['post_name'] = sanitize_title( $attachment['post_title'] );\n\t\t\t\t} else {\n\t\t\t\t\t$attachment['post_name'] = sanitize_title( preg_replace( '/\\.\\w+$/', '', $file_name ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$attachment['file_name'] = $file_name;\n\t\t\t$attachment['file_path'] = $file_path;\n\t\t\t$prepared_attachments[ $symbol ] = $attachment;\n\t\t}\n\t\treturn $prepared_attachments;\n\t}\n\n\t/**\n\t * Save starter content changeset.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t */\n\tpublic function _save_starter_content_changeset() {\n\n\t\tif ( empty( $this->pending_starter_content_settings_ids ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->save_changeset_post( array(\n\t\t\t'data' => array_fill_keys( $this->pending_starter_content_settings_ids, array( 'starter_content' => true ) ),\n\t\t\t'starter_content' => true,\n\t\t) );\n\n\t\t$this->pending_starter_content_settings_ids = array();\n\t}\n\n\t/**\n\t * Get dirty pre-sanitized setting values in the current customized state.\n\t *\n\t * The returned array consists of a merge of three sources:\n\t * 1. If the theme is not currently active, then the base array is any stashed\n\t *    theme mods that were modified previously but never published.\n\t * 2. The values from the current changeset, if it exists.\n\t * 3. If the user can customize, the values parsed from the incoming\n\t *    `$_POST['customized']` JSON data.\n\t * 4. Any programmatically-set post values via `WP_Customize_Manager::set_post_value()`.\n\t *\n\t * The name \"unsanitized_post_values\" is a carry-over from when the customized\n\t * state was exclusively sourced from `$_POST['customized']`. Nevertheless,\n\t * the value returned will come from the current changeset post and from the\n\t * incoming post data.\n\t *\n\t * @since 4.1.1\n\t * @since 4.7.0 Added $args param and merging with changeset values and stashed theme mods.\n\t *\n\t * @param array $args {\n\t *     Args.\n\t *\n\t *     @type bool $exclude_changeset Whether the changeset values should also be excluded. Defaults to false.\n\t *     @type bool $exclude_post_data Whether the post input values should also be excluded. Defaults to false when lacking the customize capability.\n\t * }\n\t * @return array\n\t */\n\tpublic function unsanitized_post_values( $args = array() ) {\n\t\t$args = array_merge(\n\t\t\tarray(\n\t\t\t\t'exclude_changeset' => false,\n\t\t\t\t'exclude_post_data' => ! current_user_can( 'customize' ),\n\t\t\t),\n\t\t\t$args\n\t\t);\n\n\t\t$values = array();\n\n\t\t// Let default values be from the stashed theme mods if doing a theme switch and if no changeset is present.\n\t\tif ( ! $this->is_theme_active() ) {\n\t\t\t$stashed_theme_mods = get_option( 'customize_stashed_theme_mods' );\n\t\t\t$stylesheet = $this->get_stylesheet();\n\t\t\tif ( isset( $stashed_theme_mods[ $stylesheet ] ) ) {\n\t\t\t\t$values = array_merge( $values, wp_list_pluck( $stashed_theme_mods[ $stylesheet ], 'value' ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $args['exclude_changeset'] ) {\n\t\t\tforeach ( $this->changeset_data() as $setting_id => $setting_params ) {\n\t\t\t\tif ( ! array_key_exists( 'value', $setting_params ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif ( isset( $setting_params['type'] ) && 'theme_mod' === $setting_params['type'] ) {\n\n\t\t\t\t\t// Ensure that theme mods values are only used if they were saved under the current theme.\n\t\t\t\t\t$namespace_pattern = '/^(?P<stylesheet>.+?)::(?P<setting_id>.+)$/';\n\t\t\t\t\tif ( preg_match( $namespace_pattern, $setting_id, $matches ) && $this->get_stylesheet() === $matches['stylesheet'] ) {\n\t\t\t\t\t\t$values[ $matches['setting_id'] ] = $setting_params['value'];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$values[ $setting_id ] = $setting_params['value'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $args['exclude_post_data'] ) {\n\t\t\tif ( ! isset( $this->_post_values ) ) {\n\t\t\t\tif ( isset( $_POST['customized'] ) ) {\n\t\t\t\t\t$post_values = json_decode( wp_unslash( $_POST['customized'] ), true );\n\t\t\t\t} else {\n\t\t\t\t\t$post_values = array();\n\t\t\t\t}\n\t\t\t\tif ( is_array( $post_values ) ) {\n\t\t\t\t\t$this->_post_values = $post_values;\n\t\t\t\t} else {\n\t\t\t\t\t$this->_post_values = array();\n\t\t\t\t}\n\t\t\t}\n\t\t\t$values = array_merge( $values, $this->_post_values );\n\t\t}\n\t\treturn $values;\n\t}\n\n\t/**\n\t * Returns the sanitized value for a given setting from the current customized state.\n\t *\n\t * The name \"post_value\" is a carry-over from when the customized state was exclusively\n\t * sourced from `$_POST['customized']`. Nevertheless, the value returned will come\n\t * from the current changeset post and from the incoming post data.\n\t *\n\t * @since 3.4.0\n\t * @since 4.1.1 Introduced the `$default` parameter.\n\t * @since 4.6.0 `$default` is now returned early when the setting post value is invalid.\n\t * @access public\n\t *\n\t * @see WP_REST_Server::dispatch()\n\t * @see WP_Rest_Request::sanitize_params()\n\t * @see WP_Rest_Request::has_valid_params()\n\t *\n\t * @param WP_Customize_Setting $setting A WP_Customize_Setting derived object.\n\t * @param mixed                $default Value returned $setting has no post value (added in 4.2.0)\n\t *                                      or the post value is invalid (added in 4.6.0).\n\t * @return string|mixed $post_value Sanitized value or the $default provided.\n\t */\n\tpublic function post_value( $setting, $default = null ) {\n\t\t$post_values = $this->unsanitized_post_values();\n\t\tif ( ! array_key_exists( $setting->id, $post_values ) ) {\n\t\t\treturn $default;\n\t\t}\n\t\t$value = $post_values[ $setting->id ];\n\t\t$valid = $setting->validate( $value );\n\t\tif ( is_wp_error( $valid ) ) {\n\t\t\treturn $default;\n\t\t}\n\t\t$value = $setting->sanitize( $value );\n\t\tif ( is_null( $value ) || is_wp_error( $value ) ) {\n\t\t\treturn $default;\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Override a setting's value in the current customized state.\n\t *\n\t * The name \"post_value\" is a carry-over from when the customized state was\n\t * exclusively sourced from `$_POST['customized']`.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param string $setting_id ID for the WP_Customize_Setting instance.\n\t * @param mixed  $value      Post value.\n\t */\n\tpublic function set_post_value( $setting_id, $value ) {\n\t\t$this->unsanitized_post_values(); // Populate _post_values from $_POST['customized'].\n\t\t$this->_post_values[ $setting_id ] = $value;\n\n\t\t/**\n\t\t * Announce when a specific setting's unsanitized post value has been set.\n\t\t *\n\t\t * Fires when the WP_Customize_Manager::set_post_value() method is called.\n\t\t *\n\t\t * The dynamic portion of the hook name, `$setting_id`, refers to the setting ID.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param mixed                $value Unsanitized setting post value.\n\t\t * @param WP_Customize_Manager $this  WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( \"customize_post_value_set_{$setting_id}\", $value, $this );\n\n\t\t/**\n\t\t * Announce when any setting's unsanitized post value has been set.\n\t\t *\n\t\t * Fires when the WP_Customize_Manager::set_post_value() method is called.\n\t\t *\n\t\t * This is useful for `WP_Customize_Setting` instances to watch\n\t\t * in order to update a cached previewed value.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param string               $setting_id Setting ID.\n\t\t * @param mixed                $value      Unsanitized setting post value.\n\t\t * @param WP_Customize_Manager $this       WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_post_value_set', $setting_id, $value, $this );\n\t}\n\n\t/**\n\t * Print JavaScript settings.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function customize_preview_init() {\n\n\t\t/*\n\t\t * Now that Customizer previews are loaded into iframes via GET requests\n\t\t * and natural URLs with transaction UUIDs added, we need to ensure that\n\t\t * the responses are never cached by proxies. In practice, this will not\n\t\t * be needed if the user is logged-in anyway. But if anonymous access is\n\t\t * allowed then the auth cookies would not be sent and WordPress would\n\t\t * not send no-cache headers by default.\n\t\t */\n\t\tif ( ! headers_sent() ) {\n\t\t\tnocache_headers();\n\t\t\theader( 'X-Robots: noindex, nofollow, noarchive' );\n\t\t}\n\t\tadd_action( 'wp_head', 'wp_no_robots' );\n\t\tadd_filter( 'wp_headers', array( $this, 'filter_iframe_security_headers' ) );\n\n\t\t/*\n\t\t * If preview is being served inside the customizer preview iframe, and\n\t\t * if the user doesn't have customize capability, then it is assumed\n\t\t * that the user's session has expired and they need to re-authenticate.\n\t\t */\n\t\tif ( $this->messenger_channel && ! current_user_can( 'customize' ) ) {\n\t\t\t$this->wp_die( -1, __( 'Unauthorized. You may remove the customize_messenger_channel param to preview as frontend.' ) );\n\t\t\treturn;\n\t\t}\n\n\t\t$this->prepare_controls();\n\n\t\tadd_filter( 'wp_redirect', array( $this, 'add_state_query_params' ) );\n\n\t\twp_enqueue_script( 'customize-preview' );\n\t\twp_enqueue_style( 'customize-preview' );\n\t\tadd_action( 'wp_head', array( $this, 'customize_preview_loading_style' ) );\n\t\tadd_action( 'wp_head', array( $this, 'remove_frameless_preview_messenger_channel' ) );\n\t\tadd_action( 'wp_footer', array( $this, 'customize_preview_settings' ), 20 );\n\t\tadd_filter( 'get_edit_post_link', '__return_empty_string' );\n\n\t\t/**\n\t\t * Fires once the Customizer preview has initialized and JavaScript\n\t\t * settings have been printed.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param WP_Customize_Manager $this WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_preview_init', $this );\n\t}\n\n\t/**\n\t * Filter the X-Frame-Options and Content-Security-Policy headers to ensure frontend can load in customizer.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param array $headers Headers.\n\t * @return array Headers.\n\t */\n\tpublic function filter_iframe_security_headers( $headers ) {\n\t\t$customize_url = admin_url( 'customize.php' );\n\t\t$headers['X-Frame-Options'] = 'ALLOW-FROM ' . $customize_url;\n\t\t$headers['Content-Security-Policy'] = 'frame-ancestors ' . preg_replace( '#^(\\w+://[^/]+).+?$#', '$1', $customize_url );\n\t\treturn $headers;\n\t}\n\n\t/**\n\t * Add customize state query params to a given URL if preview is allowed.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t * @see wp_redirect()\n\t * @see WP_Customize_Manager::get_allowed_url()\n\t *\n\t * @param string $url URL.\n\t * @return string URL.\n\t */\n\tpublic function add_state_query_params( $url ) {\n\t\t$parsed_original_url = wp_parse_url( $url );\n\t\t$is_allowed = false;\n\t\tforeach ( $this->get_allowed_urls() as $allowed_url ) {\n\t\t\t$parsed_allowed_url = wp_parse_url( $allowed_url );\n\t\t\t$is_allowed = (\n\t\t\t\t$parsed_allowed_url['scheme'] === $parsed_original_url['scheme']\n\t\t\t\t&&\n\t\t\t\t$parsed_allowed_url['host'] === $parsed_original_url['host']\n\t\t\t\t&&\n\t\t\t\t0 === strpos( $parsed_original_url['path'], $parsed_allowed_url['path'] )\n\t\t\t);\n\t\t\tif ( $is_allowed ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ( $is_allowed ) {\n\t\t\t$query_params = array(\n\t\t\t\t'customize_changeset_uuid' => $this->changeset_uuid(),\n\t\t\t);\n\t\t\tif ( ! $this->is_theme_active() ) {\n\t\t\t\t$query_params['customize_theme'] = $this->get_stylesheet();\n\t\t\t}\n\t\t\tif ( $this->messenger_channel ) {\n\t\t\t\t$query_params['customize_messenger_channel'] = $this->messenger_channel;\n\t\t\t}\n\t\t\t$url = add_query_arg( $query_params, $url );\n\t\t}\n\n\t\treturn $url;\n\t}\n\n\t/**\n\t * Prevent sending a 404 status when returning the response for the customize\n\t * preview, since it causes the jQuery Ajax to fail. Send 200 instead.\n\t *\n\t * @since 4.0.0\n\t * @deprecated 4.7.0\n\t * @access public\n\t */\n\tpublic function customize_preview_override_404_status() {\n\t\t_deprecated_function( __METHOD__, '4.7.0' );\n\t}\n\n\t/**\n\t * Print base element for preview frame.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0\n\t */\n\tpublic function customize_preview_base() {\n\t\t_deprecated_function( __METHOD__, '4.7.0' );\n\t}\n\n\t/**\n\t * Print a workaround to handle HTML5 tags in IE < 9.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0 Customizer no longer supports IE8, so all supported browsers recognize HTML5.\n\t */\n\tpublic function customize_preview_html5() {\n\t\t_deprecated_function( __FUNCTION__, '4.7.0' );\n\t}\n\n\t/**\n\t * Print CSS for loading indicators for the Customizer preview.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t */\n\tpublic function customize_preview_loading_style() {\n\t\t?><style>\n\t\t\tbody.wp-customizer-unloading {\n\t\t\t\topacity: 0.25;\n\t\t\t\tcursor: progress !important;\n\t\t\t\t-webkit-transition: opacity 0.5s;\n\t\t\t\ttransition: opacity 0.5s;\n\t\t\t}\n\t\t\tbody.wp-customizer-unloading * {\n\t\t\t\tpointer-events: none !important;\n\t\t\t}\n\t\t\tform.customize-unpreviewable,\n\t\t\tform.customize-unpreviewable input,\n\t\t\tform.customize-unpreviewable select,\n\t\t\tform.customize-unpreviewable button,\n\t\t\ta.customize-unpreviewable,\n\t\t\tarea.customize-unpreviewable {\n\t\t\t\tcursor: not-allowed !important;\n\t\t\t}\n\t\t</style><?php\n\t}\n\n\t/**\n\t * Remove customize_messenger_channel query parameter from the preview window when it is not in an iframe.\n\t *\n\t * This ensures that the admin bar will be shown. It also ensures that link navigation will\n\t * work as expected since the parent frame is not being sent the URL to navigate to.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t */\n\tpublic function remove_frameless_preview_messenger_channel() {\n\t\tif ( ! $this->messenger_channel ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<script>\n\t\t( function() {\n\t\t\tvar urlParser, oldQueryParams, newQueryParams, i;\n\t\t\tif ( parent !== window ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\turlParser = document.createElement( 'a' );\n\t\t\turlParser.href = location.href;\n\t\t\toldQueryParams = urlParser.search.substr( 1 ).split( /&/ );\n\t\t\tnewQueryParams = [];\n\t\t\tfor ( i = 0; i < oldQueryParams.length; i += 1 ) {\n\t\t\t\tif ( ! /^customize_messenger_channel=/.test( oldQueryParams[ i ] ) ) {\n\t\t\t\t\tnewQueryParams.push( oldQueryParams[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\turlParser.search = newQueryParams.join( '&' );\n\t\t\tif ( urlParser.search !== location.search ) {\n\t\t\t\tlocation.replace( urlParser.href );\n\t\t\t}\n\t\t} )();\n\t\t</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Print JavaScript settings for preview frame.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function customize_preview_settings() {\n\t\t$post_values = $this->unsanitized_post_values( array( 'exclude_changeset' => true ) );\n\t\t$setting_validities = $this->validate_setting_values( $post_values );\n\t\t$exported_setting_validities = array_map( array( $this, 'prepare_setting_validity_for_js' ), $setting_validities );\n\n\t\t// Note that the REQUEST_URI is not passed into home_url() since this breaks subdirectory installs.\n\t\t$self_url = empty( $_SERVER['REQUEST_URI'] ) ? home_url( '/' ) : esc_url_raw( wp_unslash( $_SERVER['REQUEST_URI'] ) );\n\t\t$state_query_params = array(\n\t\t\t'customize_theme',\n\t\t\t'customize_changeset_uuid',\n\t\t\t'customize_messenger_channel',\n\t\t);\n\t\t$self_url = remove_query_arg( $state_query_params, $self_url );\n\n\t\t$allowed_urls = $this->get_allowed_urls();\n\t\t$allowed_hosts = array();\n\t\tforeach ( $allowed_urls as $allowed_url ) {\n\t\t\t$parsed = wp_parse_url( $allowed_url );\n\t\t\tif ( empty( $parsed['host'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$host = $parsed['host'];\n\t\t\tif ( ! empty( $parsed['port'] ) ) {\n\t\t\t\t$host .= ':' . $parsed['port'];\n\t\t\t}\n\t\t\t$allowed_hosts[] = $host;\n\t\t}\n\n\t\t$switched_locale = switch_to_locale( get_user_locale() );\n\t\t$l10n = array(\n\t\t\t'shiftClickToEdit' => __( 'Shift-click to edit this element.' ),\n\t\t\t'linkUnpreviewable' => __( 'This link is not live-previewable.' ),\n\t\t\t'formUnpreviewable' => __( 'This form is not live-previewable.' ),\n\t\t);\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\n\t\t$settings = array(\n\t\t\t'changeset' => array(\n\t\t\t\t'uuid' => $this->_changeset_uuid,\n\t\t\t),\n\t\t\t'timeouts' => array(\n\t\t\t\t'selectiveRefresh' => 250,\n\t\t\t\t'keepAliveSend' => 1000,\n\t\t\t),\n\t\t\t'theme' => array(\n\t\t\t\t'stylesheet' => $this->get_stylesheet(),\n\t\t\t\t'active'     => $this->is_theme_active(),\n\t\t\t),\n\t\t\t'url' => array(\n\t\t\t\t'self' => $self_url,\n\t\t\t\t'allowed' => array_map( 'esc_url_raw', $this->get_allowed_urls() ),\n\t\t\t\t'allowedHosts' => array_unique( $allowed_hosts ),\n\t\t\t\t'isCrossDomain' => $this->is_cross_domain(),\n\t\t\t),\n\t\t\t'channel' => $this->messenger_channel,\n\t\t\t'activePanels' => array(),\n\t\t\t'activeSections' => array(),\n\t\t\t'activeControls' => array(),\n\t\t\t'settingValidities' => $exported_setting_validities,\n\t\t\t'nonce' => current_user_can( 'customize' ) ? $this->get_nonces() : array(),\n\t\t\t'l10n' => $l10n,\n\t\t\t'_dirty' => array_keys( $post_values ),\n\t\t);\n\n\t\tforeach ( $this->panels as $panel_id => $panel ) {\n\t\t\tif ( $panel->check_capabilities() ) {\n\t\t\t\t$settings['activePanels'][ $panel_id ] = $panel->active();\n\t\t\t\tforeach ( $panel->sections as $section_id => $section ) {\n\t\t\t\t\tif ( $section->check_capabilities() ) {\n\t\t\t\t\t\t$settings['activeSections'][ $section_id ] = $section->active();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tforeach ( $this->sections as $id => $section ) {\n\t\t\tif ( $section->check_capabilities() ) {\n\t\t\t\t$settings['activeSections'][ $id ] = $section->active();\n\t\t\t}\n\t\t}\n\t\tforeach ( $this->controls as $id => $control ) {\n\t\t\tif ( $control->check_capabilities() ) {\n\t\t\t\t$settings['activeControls'][ $id ] = $control->active();\n\t\t\t}\n\t\t}\n\n\t\t?>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar _wpCustomizeSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\t_wpCustomizeSettings.values = {};\n\t\t\t(function( v ) {\n\t\t\t\t<?php\n\t\t\t\t/*\n\t\t\t\t * Serialize settings separately from the initial _wpCustomizeSettings\n\t\t\t\t * serialization in order to avoid a peak memory usage spike.\n\t\t\t\t * @todo We may not even need to export the values at all since the pane syncs them anyway.\n\t\t\t\t */\n\t\t\t\tforeach ( $this->settings as $id => $setting ) {\n\t\t\t\t\tif ( $setting->check_capabilities() ) {\n\t\t\t\t\t\tprintf(\n\t\t\t\t\t\t\t\"v[%s] = %s;\\n\",\n\t\t\t\t\t\t\twp_json_encode( $id ),\n\t\t\t\t\t\t\twp_json_encode( $setting->js_value() )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t})( _wpCustomizeSettings.values );\n\t\t</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Prints a signature so we can ensure the Customizer was properly executed.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0\n\t */\n\tpublic function customize_preview_signature() {\n\t\t_deprecated_function( __METHOD__, '4.7.0' );\n\t}\n\n\t/**\n\t * Removes the signature in case we experience a case where the Customizer was not properly executed.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0\n\t *\n\t * @param mixed $return Value passed through for {@see 'wp_die_handler'} filter.\n\t * @return mixed Value passed through for {@see 'wp_die_handler'} filter.\n\t */\n\tpublic function remove_preview_signature( $return = null ) {\n\t\t_deprecated_function( __METHOD__, '4.7.0' );\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Is it a theme preview?\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return bool True if it's a preview, false if not.\n\t */\n\tpublic function is_preview() {\n\t\treturn (bool) $this->previewing;\n\t}\n\n\t/**\n\t * Retrieve the template name of the previewed theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return string Template name.\n\t */\n\tpublic function get_template() {\n\t\treturn $this->theme()->get_template();\n\t}\n\n\t/**\n\t * Retrieve the stylesheet name of the previewed theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return string Stylesheet name.\n\t */\n\tpublic function get_stylesheet() {\n\t\treturn $this->theme()->get_stylesheet();\n\t}\n\n\t/**\n\t * Retrieve the template root of the previewed theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return string Theme root.\n\t */\n\tpublic function get_template_root() {\n\t\treturn get_raw_theme_root( $this->get_template(), true );\n\t}\n\n\t/**\n\t * Retrieve the stylesheet root of the previewed theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return string Theme root.\n\t */\n\tpublic function get_stylesheet_root() {\n\t\treturn get_raw_theme_root( $this->get_stylesheet(), true );\n\t}\n\n\t/**\n\t * Filters the current theme and return the name of the previewed theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param $current_theme {@internal Parameter is not used}\n\t * @return string Theme name.\n\t */\n\tpublic function current_theme( $current_theme ) {\n\t\treturn $this->theme()->display('Name');\n\t}\n\n\t/**\n\t * Validates setting values.\n\t *\n\t * Validation is skipped for unregistered settings or for values that are\n\t * already null since they will be skipped anyway. Sanitization is applied\n\t * to values that pass validation, and values that become null or `WP_Error`\n\t * after sanitizing are marked invalid.\n\t *\n\t * @since 4.6.0\n\t * @access public\n\t *\n\t * @see WP_REST_Request::has_valid_params()\n\t * @see WP_Customize_Setting::validate()\n\t *\n\t * @param array $setting_values Mapping of setting IDs to values to validate and sanitize.\n\t * @param array $options {\n\t *     Options.\n\t *\n\t *     @type bool $validate_existence  Whether a setting's existence will be checked.\n\t *     @type bool $validate_capability Whether the setting capability will be checked.\n\t * }\n\t * @return array Mapping of setting IDs to return value of validate method calls, either `true` or `WP_Error`.\n\t */\n\tpublic function validate_setting_values( $setting_values, $options = array() ) {\n\t\t$options = wp_parse_args( $options, array(\n\t\t\t'validate_capability' => false,\n\t\t\t'validate_existence' => false,\n\t\t) );\n\n\t\t$validities = array();\n\t\tforeach ( $setting_values as $setting_id => $unsanitized_value ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( ! $setting ) {\n\t\t\t\tif ( $options['validate_existence'] ) {\n\t\t\t\t\t$validities[ $setting_id ] = new WP_Error( 'unrecognized', __( 'Setting does not exist or is unrecognized.' ) );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ( $options['validate_capability'] && ! current_user_can( $setting->capability ) ) {\n\t\t\t\t$validity = new WP_Error( 'unauthorized', __( 'Unauthorized to modify setting due to capability.' ) );\n\t\t\t} else {\n\t\t\t\tif ( is_null( $unsanitized_value ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$validity = $setting->validate( $unsanitized_value );\n\t\t\t}\n\t\t\tif ( ! is_wp_error( $validity ) ) {\n\t\t\t\t/** This filter is documented in wp-includes/class-wp-customize-setting.php */\n\t\t\t\t$late_validity = apply_filters( \"customize_validate_{$setting->id}\", new WP_Error(), $unsanitized_value, $setting );\n\t\t\t\tif ( ! empty( $late_validity->errors ) ) {\n\t\t\t\t\t$validity = $late_validity;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( ! is_wp_error( $validity ) ) {\n\t\t\t\t$value = $setting->sanitize( $unsanitized_value );\n\t\t\t\tif ( is_null( $value ) ) {\n\t\t\t\t\t$validity = false;\n\t\t\t\t} elseif ( is_wp_error( $value ) ) {\n\t\t\t\t\t$validity = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( false === $validity ) {\n\t\t\t\t$validity = new WP_Error( 'invalid_value', __( 'Invalid value.' ) );\n\t\t\t}\n\t\t\t$validities[ $setting_id ] = $validity;\n\t\t}\n\t\treturn $validities;\n\t}\n\n\t/**\n\t * Prepares setting validity for exporting to the client (JS).\n\t *\n\t * Converts `WP_Error` instance into array suitable for passing into the\n\t * `wp.customize.Notification` JS model.\n\t *\n\t * @since 4.6.0\n\t * @access public\n\t *\n\t * @param true|WP_Error $validity Setting validity.\n\t * @return true|array If `$validity` was a WP_Error, the error codes will be array-mapped\n\t *                    to their respective `message` and `data` to pass into the\n\t *                    `wp.customize.Notification` JS model.\n\t */\n\tpublic function prepare_setting_validity_for_js( $validity ) {\n\t\tif ( is_wp_error( $validity ) ) {\n\t\t\t$notification = array();\n\t\t\tforeach ( $validity->errors as $error_code => $error_messages ) {\n\t\t\t\t$notification[ $error_code ] = array(\n\t\t\t\t\t'message' => join( ' ', $error_messages ),\n\t\t\t\t\t'data' => $validity->get_error_data( $error_code ),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn $notification;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Handle customize_save WP Ajax request to save/update a changeset.\n\t *\n\t * @since 3.4.0\n\t * @since 4.7.0 The semantics of this method have changed to update a changeset, optionally to also change the status and other attributes.\n\t */\n\tpublic function save() {\n\t\tif ( ! is_user_logged_in() ) {\n\t\t\twp_send_json_error( 'unauthenticated' );\n\t\t}\n\n\t\tif ( ! $this->is_preview() ) {\n\t\t\twp_send_json_error( 'not_preview' );\n\t\t}\n\n\t\t$action = 'save-customize_' . $this->get_stylesheet();\n\t\tif ( ! check_ajax_referer( $action, 'nonce', false ) ) {\n\t\t\twp_send_json_error( 'invalid_nonce' );\n\t\t}\n\n\t\t$changeset_post_id = $this->changeset_post_id();\n\t\tif ( empty( $changeset_post_id ) ) {\n\t\t\tif ( ! current_user_can( get_post_type_object( 'customize_changeset' )->cap->create_posts ) ) {\n\t\t\t\twp_send_json_error( 'cannot_create_changeset_post' );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! current_user_can( get_post_type_object( 'customize_changeset' )->cap->edit_post, $changeset_post_id ) ) {\n\t\t\t\twp_send_json_error( 'cannot_edit_changeset_post' );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $_POST['customize_changeset_data'] ) ) {\n\t\t\t$input_changeset_data = json_decode( wp_unslash( $_POST['customize_changeset_data'] ), true );\n\t\t\tif ( ! is_array( $input_changeset_data ) ) {\n\t\t\t\twp_send_json_error( 'invalid_customize_changeset_data' );\n\t\t\t}\n\t\t} else {\n\t\t\t$input_changeset_data = array();\n\t\t}\n\n\t\t// Validate title.\n\t\t$changeset_title = null;\n\t\tif ( isset( $_POST['customize_changeset_title'] ) ) {\n\t\t\t$changeset_title = sanitize_text_field( wp_unslash( $_POST['customize_changeset_title'] ) );\n\t\t}\n\n\t\t// Validate changeset status param.\n\t\t$is_publish = null;\n\t\t$changeset_status = null;\n\t\tif ( isset( $_POST['customize_changeset_status'] ) ) {\n\t\t\t$changeset_status = wp_unslash( $_POST['customize_changeset_status'] );\n\t\t\tif ( ! get_post_status_object( $changeset_status ) || ! in_array( $changeset_status, array( 'draft', 'pending', 'publish', 'future' ), true ) ) {\n\t\t\t\twp_send_json_error( 'bad_customize_changeset_status', 400 );\n\t\t\t}\n\t\t\t$is_publish = ( 'publish' === $changeset_status || 'future' === $changeset_status );\n\t\t\tif ( $is_publish && ! current_user_can( get_post_type_object( 'customize_changeset' )->cap->publish_posts ) ) {\n\t\t\t\twp_send_json_error( 'changeset_publish_unauthorized', 403 );\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Validate changeset date param. Date is assumed to be in local time for\n\t\t * the WP if in MySQL format (YYYY-MM-DD HH:MM:SS). Otherwise, the date\n\t\t * is parsed with strtotime() so that ISO date format may be supplied\n\t\t * or a string like \"+10 minutes\".\n\t\t */\n\t\t$changeset_date_gmt = null;\n\t\tif ( isset( $_POST['customize_changeset_date'] ) ) {\n\t\t\t$changeset_date = wp_unslash( $_POST['customize_changeset_date'] );\n\t\t\tif ( preg_match( '/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d$/', $changeset_date ) ) {\n\t\t\t\t$mm = substr( $changeset_date, 5, 2 );\n\t\t\t\t$jj = substr( $changeset_date, 8, 2 );\n\t\t\t\t$aa = substr( $changeset_date, 0, 4 );\n\t\t\t\t$valid_date = wp_checkdate( $mm, $jj, $aa, $changeset_date );\n\t\t\t\tif ( ! $valid_date ) {\n\t\t\t\t\twp_send_json_error( 'bad_customize_changeset_date', 400 );\n\t\t\t\t}\n\t\t\t\t$changeset_date_gmt = get_gmt_from_date( $changeset_date );\n\t\t\t} else {\n\t\t\t\t$timestamp = strtotime( $changeset_date );\n\t\t\t\tif ( ! $timestamp ) {\n\t\t\t\t\twp_send_json_error( 'bad_customize_changeset_date', 400 );\n\t\t\t\t}\n\t\t\t\t$changeset_date_gmt = gmdate( 'Y-m-d H:i:s', $timestamp );\n\t\t\t}\n\t\t}\n\n\t\t$r = $this->save_changeset_post( array(\n\t\t\t'status' => $changeset_status,\n\t\t\t'title' => $changeset_title,\n\t\t\t'date_gmt' => $changeset_date_gmt,\n\t\t\t'data' => $input_changeset_data,\n\t\t) );\n\t\tif ( is_wp_error( $r ) ) {\n\t\t\t$response = array(\n\t\t\t\t'message' => $r->get_error_message(),\n\t\t\t\t'code' => $r->get_error_code(),\n\t\t\t);\n\t\t\tif ( is_array( $r->get_error_data() ) ) {\n\t\t\t\t$response = array_merge( $response, $r->get_error_data() );\n\t\t\t} else {\n\t\t\t\t$response['data'] = $r->get_error_data();\n\t\t\t}\n\t\t} else {\n\t\t\t$response = $r;\n\n\t\t\t// Note that if the changeset status was publish, then it will get set to trash if revisions are not supported.\n\t\t\t$response['changeset_status'] = get_post_status( $this->changeset_post_id() );\n\t\t\tif ( $is_publish && 'trash' === $response['changeset_status'] ) {\n\t\t\t\t$response['changeset_status'] = 'publish';\n\t\t\t}\n\n\t\t\tif ( 'publish' === $response['changeset_status'] ) {\n\t\t\t\t$response['next_changeset_uuid'] = wp_generate_uuid4();\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $response['setting_validities'] ) ) {\n\t\t\t$response['setting_validities'] = array_map( array( $this, 'prepare_setting_validity_for_js' ), $response['setting_validities'] );\n\t\t}\n\n\t\t/**\n\t\t * Filters response data for a successful customize_save Ajax request.\n\t\t *\n\t\t * This filter does not apply if there was a nonce or authentication failure.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param array                $response Additional information passed back to the 'saved'\n\t\t *                                       event on `wp.customize`.\n\t\t * @param WP_Customize_Manager $this     WP_Customize_Manager instance.\n\t\t */\n\t\t$response = apply_filters( 'customize_save_response', $response, $this );\n\n\t\tif ( is_wp_error( $r ) ) {\n\t\t\twp_send_json_error( $response );\n\t\t} else {\n\t\t\twp_send_json_success( $response );\n\t\t}\n\t}\n\n\t/**\n\t * Save the post for the loaded changeset.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param array $args {\n\t *     Args for changeset post.\n\t *\n\t *     @type array  $data            Optional additional changeset data. Values will be merged on top of any existing post values.\n\t *     @type string $status          Post status. Optional. If supplied, the save will be transactional and a post revision will be allowed.\n\t *     @type string $title           Post title. Optional.\n\t *     @type string $date_gmt        Date in GMT. Optional.\n\t *     @type int    $user_id         ID for user who is saving the changeset. Optional, defaults to the current user ID.\n\t *     @type bool   $starter_content Whether the data is starter content. If false (default), then $starter_content will be cleared for any $data being saved.\n\t * }\n\t *\n\t * @return array|WP_Error Returns array on success and WP_Error with array data on error.\n\t */\n\tfunction save_changeset_post( $args = array() ) {\n\n\t\t$args = array_merge(\n\t\t\tarray(\n\t\t\t\t'status' => null,\n\t\t\t\t'title' => null,\n\t\t\t\t'data' => array(),\n\t\t\t\t'date_gmt' => null,\n\t\t\t\t'user_id' => get_current_user_id(),\n\t\t\t\t'starter_content' => false,\n\t\t\t),\n\t\t\t$args\n\t\t);\n\n\t\t$changeset_post_id = $this->changeset_post_id();\n\t\t$existing_changeset_data = array();\n\t\tif ( $changeset_post_id ) {\n\t\t\t$existing_status = get_post_status( $changeset_post_id );\n\t\t\tif ( 'publish' === $existing_status || 'trash' === $existing_status ) {\n\t\t\t\treturn new WP_Error( 'changeset_already_published' );\n\t\t\t}\n\n\t\t\t$existing_changeset_data = $this->get_changeset_post_data( $changeset_post_id );\n\t\t}\n\n\t\t// Fail if attempting to publish but publish hook is missing.\n\t\tif ( 'publish' === $args['status'] && false === has_action( 'transition_post_status', '_wp_customize_publish_changeset' ) ) {\n\t\t\treturn new WP_Error( 'missing_publish_callback' );\n\t\t}\n\n\t\t// Validate date.\n\t\t$now = gmdate( 'Y-m-d H:i:59' );\n\t\tif ( $args['date_gmt'] ) {\n\t\t\t$is_future_dated = ( mysql2date( 'U', $args['date_gmt'], false ) > mysql2date( 'U', $now, false ) );\n\t\t\tif ( ! $is_future_dated ) {\n\t\t\t\treturn new WP_Error( 'not_future_date' ); // Only future dates are allowed.\n\t\t\t}\n\n\t\t\tif ( ! $this->is_theme_active() && ( 'future' === $args['status'] || $is_future_dated ) ) {\n\t\t\t\treturn new WP_Error( 'cannot_schedule_theme_switches' ); // This should be allowed in the future, when theme is a regular setting.\n\t\t\t}\n\t\t\t$will_remain_auto_draft = ( ! $args['status'] && ( ! $changeset_post_id || 'auto-draft' === get_post_status( $changeset_post_id ) ) );\n\t\t\tif ( $will_remain_auto_draft ) {\n\t\t\t\treturn new WP_Error( 'cannot_supply_date_for_auto_draft_changeset' );\n\t\t\t}\n\t\t} elseif ( $changeset_post_id && 'future' === $args['status'] ) {\n\n\t\t\t// Fail if the new status is future but the existing post's date is not in the future.\n\t\t\t$changeset_post = get_post( $changeset_post_id );\n\t\t\tif ( mysql2date( 'U', $changeset_post->post_date_gmt, false ) <= mysql2date( 'U', $now, false ) ) {\n\t\t\t\treturn new WP_Error( 'not_future_date' );\n\t\t\t}\n\t\t}\n\n\t\t// The request was made via wp.customize.previewer.save().\n\t\t$update_transactionally = (bool) $args['status'];\n\t\t$allow_revision = (bool) $args['status'];\n\n\t\t// Amend post values with any supplied data.\n\t\tforeach ( $args['data'] as $setting_id => $setting_params ) {\n\t\t\tif ( array_key_exists( 'value', $setting_params ) ) {\n\t\t\t\t$this->set_post_value( $setting_id, $setting_params['value'] ); // Add to post values so that they can be validated and sanitized.\n\t\t\t}\n\t\t}\n\n\t\t// Note that in addition to post data, this will include any stashed theme mods.\n\t\t$post_values = $this->unsanitized_post_values( array(\n\t\t\t'exclude_changeset' => true,\n\t\t\t'exclude_post_data' => false,\n\t\t) );\n\t\t$this->add_dynamic_settings( array_keys( $post_values ) ); // Ensure settings get created even if they lack an input value.\n\n\t\t/*\n\t\t * Get list of IDs for settings that have values different from what is currently\n\t\t * saved in the changeset. By skipping any values that are already the same, the\n\t\t * subset of changed settings can be passed into validate_setting_values to prevent\n\t\t * an underprivileged modifying a single setting for which they have the capability\n\t\t * from being blocked from saving. This also prevents a user from touching of the\n\t\t * previous saved settings and overriding the associated user_id if they made no change.\n\t\t */\n\t\t$changed_setting_ids = array();\n\t\tforeach ( $post_values as $setting_id => $setting_value ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\n\t\t\tif ( $setting && 'theme_mod' === $setting->type ) {\n\t\t\t\t$prefixed_setting_id = $this->get_stylesheet() . '::' . $setting->id;\n\t\t\t} else {\n\t\t\t\t$prefixed_setting_id = $setting_id;\n\t\t\t}\n\n\t\t\t$is_value_changed = (\n\t\t\t\t! isset( $existing_changeset_data[ $prefixed_setting_id ] )\n\t\t\t\t||\n\t\t\t\t! array_key_exists( 'value', $existing_changeset_data[ $prefixed_setting_id ] )\n\t\t\t\t||\n\t\t\t\t$existing_changeset_data[ $prefixed_setting_id ]['value'] !== $setting_value\n\t\t\t);\n\t\t\tif ( $is_value_changed ) {\n\t\t\t\t$changed_setting_ids[] = $setting_id;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fires before save validation happens.\n\t\t *\n\t\t * Plugins can add just-in-time {@see 'customize_validate_{$this->ID}'} filters\n\t\t * at this point to catch any settings registered after `customize_register`.\n\t\t * The dynamic portion of the hook name, `$this->ID` refers to the setting ID.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param WP_Customize_Manager $this WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_save_validation_before', $this );\n\n\t\t// Validate settings.\n\t\t$validated_values = array_merge(\n\t\t\tarray_fill_keys( array_keys( $args['data'] ), null ), // Make sure existence/capability checks are done on value-less setting updates.\n\t\t\t$post_values\n\t\t);\n\t\t$setting_validities = $this->validate_setting_values( $validated_values, array(\n\t\t\t'validate_capability' => true,\n\t\t\t'validate_existence' => true,\n\t\t) );\n\t\t$invalid_setting_count = count( array_filter( $setting_validities, 'is_wp_error' ) );\n\n\t\t/*\n\t\t * Short-circuit if there are invalid settings the update is transactional.\n\t\t * A changeset update is transactional when a status is supplied in the request.\n\t\t */\n\t\tif ( $update_transactionally && $invalid_setting_count > 0 ) {\n\t\t\t$response = array(\n\t\t\t\t'setting_validities' => $setting_validities,\n\t\t\t\t'message' => sprintf( _n( 'There is %s invalid setting.', 'There are %s invalid settings.', $invalid_setting_count ), number_format_i18n( $invalid_setting_count ) ),\n\t\t\t);\n\t\t\treturn new WP_Error( 'transaction_fail', '', $response );\n\t\t}\n\n\t\t// Obtain/merge data for changeset.\n\t\t$original_changeset_data = $this->get_changeset_post_data( $changeset_post_id );\n\t\t$data = $original_changeset_data;\n\t\tif ( is_wp_error( $data ) ) {\n\t\t\t$data = array();\n\t\t}\n\n\t\t// Ensure that all post values are included in the changeset data.\n\t\tforeach ( $post_values as $setting_id => $post_value ) {\n\t\t\tif ( ! isset( $args['data'][ $setting_id ] ) ) {\n\t\t\t\t$args['data'][ $setting_id ] = array();\n\t\t\t}\n\t\t\tif ( ! isset( $args['data'][ $setting_id ]['value'] ) ) {\n\t\t\t\t$args['data'][ $setting_id ]['value'] = $post_value;\n\t\t\t}\n\t\t}\n\n\t\tforeach ( $args['data'] as $setting_id => $setting_params ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( ! $setting || ! $setting->check_capabilities() ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Skip updating changeset for invalid setting values.\n\t\t\tif ( isset( $setting_validities[ $setting_id ] ) && is_wp_error( $setting_validities[ $setting_id ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$changeset_setting_id = $setting_id;\n\t\t\tif ( 'theme_mod' === $setting->type ) {\n\t\t\t\t$changeset_setting_id = sprintf( '%s::%s', $this->get_stylesheet(), $setting_id );\n\t\t\t}\n\n\t\t\tif ( null === $setting_params ) {\n\t\t\t\t// Remove setting from changeset entirely.\n\t\t\t\tunset( $data[ $changeset_setting_id ] );\n\t\t\t} else {\n\n\t\t\t\tif ( ! isset( $data[ $changeset_setting_id ] ) ) {\n\t\t\t\t\t$data[ $changeset_setting_id ] = array();\n\t\t\t\t}\n\n\t\t\t\t// Merge any additional setting params that have been supplied with the existing params.\n\t\t\t\t$merged_setting_params = array_merge( $data[ $changeset_setting_id ], $setting_params );\n\n\t\t\t\t// Skip updating setting params if unchanged (ensuring the user_id is not overwritten).\n\t\t\t\tif ( $data[ $changeset_setting_id ] === $merged_setting_params ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$data[ $changeset_setting_id ] = array_merge(\n\t\t\t\t\t$merged_setting_params,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'type' => $setting->type,\n\t\t\t\t\t\t'user_id' => $args['user_id'],\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t// Clear starter_content flag in data if changeset is not explicitly being updated for starter content.\n\t\t\t\tif ( empty( $args['starter_content'] ) ) {\n\t\t\t\t\tunset( $data[ $changeset_setting_id ]['starter_content'] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$filter_context = array(\n\t\t\t'uuid' => $this->changeset_uuid(),\n\t\t\t'title' => $args['title'],\n\t\t\t'status' => $args['status'],\n\t\t\t'date_gmt' => $args['date_gmt'],\n\t\t\t'post_id' => $changeset_post_id,\n\t\t\t'previous_data' => is_wp_error( $original_changeset_data ) ? array() : $original_changeset_data,\n\t\t\t'manager' => $this,\n\t\t);\n\n\t\t/**\n\t\t * Filters the settings' data that will be persisted into the changeset.\n\t\t *\n\t\t * Plugins may amend additional data (such as additional meta for settings) into the changeset with this filter.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param array $data Updated changeset data, mapping setting IDs to arrays containing a $value item and optionally other metadata.\n\t\t * @param array $context {\n\t\t *     Filter context.\n\t\t *\n\t\t *     @type string               $uuid          Changeset UUID.\n\t\t *     @type string               $title         Requested title for the changeset post.\n\t\t *     @type string               $status        Requested status for the changeset post.\n\t\t *     @type string               $date_gmt      Requested date for the changeset post in MySQL format and GMT timezone.\n\t\t *     @type int|false            $post_id       Post ID for the changeset, or false if it doesn't exist yet.\n\t\t *     @type array                $previous_data Previous data contained in the changeset.\n\t\t *     @type WP_Customize_Manager $manager       Manager instance.\n\t\t * }\n\t\t */\n\t\t$data = apply_filters( 'customize_changeset_save_data', $data, $filter_context );\n\n\t\t// Switch theme if publishing changes now.\n\t\tif ( 'publish' === $args['status'] && ! $this->is_theme_active() ) {\n\t\t\t// Temporarily stop previewing the theme to allow switch_themes() to operate properly.\n\t\t\t$this->stop_previewing_theme();\n\t\t\tswitch_theme( $this->get_stylesheet() );\n\t\t\tupdate_option( 'theme_switched_via_customizer', true );\n\t\t\t$this->start_previewing_theme();\n\t\t}\n\n\t\t// Gather the data for wp_insert_post()/wp_update_post().\n\t\t$json_options = 0;\n\t\tif ( defined( 'JSON_UNESCAPED_SLASHES' ) ) {\n\t\t\t$json_options |= JSON_UNESCAPED_SLASHES; // Introduced in PHP 5.4. This is only to improve readability as slashes needn't be escaped in storage.\n\t\t}\n\t\t$json_options |= JSON_PRETTY_PRINT; // Also introduced in PHP 5.4, but WP defines constant for back compat. See WP Trac #30139.\n\t\t$post_array = array(\n\t\t\t'post_content' => wp_json_encode( $data, $json_options ),\n\t\t);\n\t\tif ( $args['title'] ) {\n\t\t\t$post_array['post_title'] = $args['title'];\n\t\t}\n\t\tif ( $changeset_post_id ) {\n\t\t\t$post_array['ID'] = $changeset_post_id;\n\t\t} else {\n\t\t\t$post_array['post_type'] = 'customize_changeset';\n\t\t\t$post_array['post_name'] = $this->changeset_uuid();\n\t\t\t$post_array['post_status'] = 'auto-draft';\n\t\t}\n\t\tif ( $args['status'] ) {\n\t\t\t$post_array['post_status'] = $args['status'];\n\t\t}\n\n\t\t// Reset post date to now if we are publishing, otherwise pass post_date_gmt and translate for post_date.\n\t\tif ( 'publish' === $args['status'] ) {\n\t\t\t$post_array['post_date_gmt'] = '0000-00-00 00:00:00';\n\t\t\t$post_array['post_date'] = '0000-00-00 00:00:00';\n\t\t} elseif ( $args['date_gmt'] ) {\n\t\t\t$post_array['post_date_gmt'] = $args['date_gmt'];\n\t\t\t$post_array['post_date'] = get_date_from_gmt( $args['date_gmt'] );\n\t\t} elseif ( $changeset_post_id && 'auto-draft' === get_post_status( $changeset_post_id ) ) {\n\t\t\t/*\n\t\t\t * Keep bumping the date for the auto-draft whenever it is modified;\n\t\t\t * this extends its life, preserving it from garbage-collection via\n\t\t\t * wp_delete_auto_drafts().\n\t\t\t */\n\t\t\t$post_array['post_date'] = current_time( 'mysql' );\n\t\t\t$post_array['post_date_gmt'] = '';\n\t\t}\n\n\t\t$this->store_changeset_revision = $allow_revision;\n\t\tadd_filter( 'wp_save_post_revision_post_has_changed', array( $this, '_filter_revision_post_has_changed' ), 5, 3 );\n\n\t\t// Update the changeset post. The publish_customize_changeset action will cause the settings in the changeset to be saved via WP_Customize_Setting::save().\n\t\t$has_kses = ( false !== has_filter( 'content_save_pre', 'wp_filter_post_kses' ) );\n\t\tif ( $has_kses ) {\n\t\t\tkses_remove_filters(); // Prevent KSES from corrupting JSON in post_content.\n\t\t}\n\n\t\t// Note that updating a post with publish status will trigger WP_Customize_Manager::publish_changeset_values().\n\t\tif ( $changeset_post_id ) {\n\t\t\t$post_array['edit_date'] = true; // Prevent date clearing.\n\t\t\t$r = wp_update_post( wp_slash( $post_array ), true );\n\t\t} else {\n\t\t\t$r = wp_insert_post( wp_slash( $post_array ), true );\n\t\t\tif ( ! is_wp_error( $r ) ) {\n\t\t\t\t$this->_changeset_post_id = $r; // Update cached post ID for the loaded changeset.\n\t\t\t}\n\t\t}\n\t\tif ( $has_kses ) {\n\t\t\tkses_init_filters();\n\t\t}\n\t\t$this->_changeset_data = null; // Reset so WP_Customize_Manager::changeset_data() will re-populate with updated contents.\n\n\t\tremove_filter( 'wp_save_post_revision_post_has_changed', array( $this, '_filter_revision_post_has_changed' ) );\n\n\t\t$response = array(\n\t\t\t'setting_validities' => $setting_validities,\n\t\t);\n\n\t\tif ( is_wp_error( $r ) ) {\n\t\t\t$response['changeset_post_save_failure'] = $r->get_error_code();\n\t\t\treturn new WP_Error( 'changeset_post_save_failure', '', $response );\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Whether a changeset revision should be made.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @var bool\n\t */\n\tprotected $store_changeset_revision;\n\n\t/**\n\t * Filters whether a changeset has changed to create a new revision.\n\t *\n\t * Note that this will not be called while a changeset post remains in auto-draft status.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t *\n\t * @param bool    $post_has_changed Whether the post has changed.\n\t * @param WP_Post $last_revision    The last revision post object.\n\t * @param WP_Post $post             The post object.\n\t *\n\t * @return bool Whether a revision should be made.\n\t */\n\tpublic function _filter_revision_post_has_changed( $post_has_changed, $last_revision, $post ) {\n\t\tunset( $last_revision );\n\t\tif ( 'customize_changeset' === $post->post_type ) {\n\t\t\t$post_has_changed = $this->store_changeset_revision;\n\t\t}\n\t\treturn $post_has_changed;\n\t}\n\n\t/**\n\t * Publish changeset values.\n\t *\n\t * This will the values contained in a changeset, even changesets that do not\n\t * correspond to current manager instance. This is called by\n\t * `_wp_customize_publish_changeset()` when a customize_changeset post is\n\t * transitioned to the `publish` status. As such, this method should not be\n\t * called directly and instead `wp_publish_post()` should be used.\n\t *\n\t * Please note that if the settings in the changeset are for a non-activated\n\t * theme, the theme must first be switched to (via `switch_theme()`) before\n\t * invoking this method.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @see _wp_customize_publish_changeset()\n\t *\n\t * @param int $changeset_post_id ID for customize_changeset post. Defaults to the changeset for the current manager instance.\n\t * @return true|WP_Error True or error info.\n\t */\n\tpublic function _publish_changeset_values( $changeset_post_id ) {\n\t\t$publishing_changeset_data = $this->get_changeset_post_data( $changeset_post_id );\n\t\tif ( is_wp_error( $publishing_changeset_data ) ) {\n\t\t\treturn $publishing_changeset_data;\n\t\t}\n\n\t\t$changeset_post = get_post( $changeset_post_id );\n\n\t\t/*\n\t\t * Temporarily override the changeset context so that it will be read\n\t\t * in calls to unsanitized_post_values() and so that it will be available\n\t\t * on the $wp_customize object passed to hooks during the save logic.\n\t\t */\n\t\t$previous_changeset_post_id = $this->_changeset_post_id;\n\t\t$this->_changeset_post_id   = $changeset_post_id;\n\t\t$previous_changeset_uuid    = $this->_changeset_uuid;\n\t\t$this->_changeset_uuid      = $changeset_post->post_name;\n\t\t$previous_changeset_data    = $this->_changeset_data;\n\t\t$this->_changeset_data      = $publishing_changeset_data;\n\n\t\t// Parse changeset data to identify theme mod settings and user IDs associated with settings to be saved.\n\t\t$setting_user_ids = array();\n\t\t$theme_mod_settings = array();\n\t\t$namespace_pattern = '/^(?P<stylesheet>.+?)::(?P<setting_id>.+)$/';\n\t\t$matches = array();\n\t\tforeach ( $this->_changeset_data as $raw_setting_id => $setting_params ) {\n\t\t\t$actual_setting_id = null;\n\t\t\t$is_theme_mod_setting = (\n\t\t\t\tisset( $setting_params['value'] )\n\t\t\t\t&&\n\t\t\t\tisset( $setting_params['type'] )\n\t\t\t\t&&\n\t\t\t\t'theme_mod' === $setting_params['type']\n\t\t\t\t&&\n\t\t\t\tpreg_match( $namespace_pattern, $raw_setting_id, $matches )\n\t\t\t);\n\t\t\tif ( $is_theme_mod_setting ) {\n\t\t\t\tif ( ! isset( $theme_mod_settings[ $matches['stylesheet'] ] ) ) {\n\t\t\t\t\t$theme_mod_settings[ $matches['stylesheet'] ] = array();\n\t\t\t\t}\n\t\t\t\t$theme_mod_settings[ $matches['stylesheet'] ][ $matches['setting_id'] ] = $setting_params;\n\n\t\t\t\tif ( $this->get_stylesheet() === $matches['stylesheet'] ) {\n\t\t\t\t\t$actual_setting_id = $matches['setting_id'];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$actual_setting_id = $raw_setting_id;\n\t\t\t}\n\n\t\t\t// Keep track of the user IDs for settings actually for this theme.\n\t\t\tif ( $actual_setting_id && isset( $setting_params['user_id'] ) ) {\n\t\t\t\t$setting_user_ids[ $actual_setting_id ] = $setting_params['user_id'];\n\t\t\t}\n\t\t}\n\n\t\t$changeset_setting_values = $this->unsanitized_post_values( array(\n\t\t\t'exclude_post_data' => true,\n\t\t\t'exclude_changeset' => false,\n\t\t) );\n\t\t$changeset_setting_ids = array_keys( $changeset_setting_values );\n\t\t$this->add_dynamic_settings( $changeset_setting_ids );\n\n\t\t/**\n\t\t * Fires once the theme has switched in the Customizer, but before settings\n\t\t * have been saved.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param WP_Customize_Manager $manager WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_save', $this );\n\n\t\t/*\n\t\t * Ensure that all settings will allow themselves to be saved. Note that\n\t\t * this is safe because the setting would have checked the capability\n\t\t * when the setting value was written into the changeset. So this is why\n\t\t * an additional capability check is not required here.\n\t\t */\n\t\t$original_setting_capabilities = array();\n\t\tforeach ( $changeset_setting_ids as $setting_id ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( $setting && ! isset( $setting_user_ids[ $setting_id ] ) ) {\n\t\t\t\t$original_setting_capabilities[ $setting->id ] = $setting->capability;\n\t\t\t\t$setting->capability = 'exist';\n\t\t\t}\n\t\t}\n\n\t\t$original_user_id = get_current_user_id();\n\t\tforeach ( $changeset_setting_ids as $setting_id ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( $setting ) {\n\t\t\t\t/*\n\t\t\t\t * Set the current user to match the user who saved the value into\n\t\t\t\t * the changeset so that any filters that apply during the save\n\t\t\t\t * process will respect the original user's capabilities. This\n\t\t\t\t * will ensure, for example, that KSES won't strip unsafe HTML\n\t\t\t\t * when a scheduled changeset publishes via WP Cron.\n\t\t\t\t */\n\t\t\t\tif ( isset( $setting_user_ids[ $setting_id ] ) ) {\n\t\t\t\t\twp_set_current_user( $setting_user_ids[ $setting_id ] );\n\t\t\t\t} else {\n\t\t\t\t\twp_set_current_user( $original_user_id );\n\t\t\t\t}\n\n\t\t\t\t$setting->save();\n\t\t\t}\n\t\t}\n\t\twp_set_current_user( $original_user_id );\n\n\t\t// Update the stashed theme mod settings, removing the active theme's stashed settings, if activated.\n\t\tif ( did_action( 'switch_theme' ) ) {\n\t\t\t$other_theme_mod_settings = $theme_mod_settings;\n\t\t\tunset( $other_theme_mod_settings[ $this->get_stylesheet() ] );\n\t\t\t$this->update_stashed_theme_mod_settings( $other_theme_mod_settings );\n\t\t}\n\n\t\t/**\n\t\t * Fires after Customize settings have been saved.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param WP_Customize_Manager $manager WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_save_after', $this );\n\n\t\t// Restore original capabilities.\n\t\tforeach ( $original_setting_capabilities as $setting_id => $capability ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( $setting ) {\n\t\t\t\t$setting->capability = $capability;\n\t\t\t}\n\t\t}\n\n\t\t// Restore original changeset data.\n\t\t$this->_changeset_data    = $previous_changeset_data;\n\t\t$this->_changeset_post_id = $previous_changeset_post_id;\n\t\t$this->_changeset_uuid    = $previous_changeset_uuid;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Update stashed theme mod settings.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t *\n\t * @param array $inactive_theme_mod_settings Mapping of stylesheet to arrays of theme mod settings.\n\t * @return array|false Returns array of updated stashed theme mods or false if the update failed or there were no changes.\n\t */\n\tprotected function update_stashed_theme_mod_settings( $inactive_theme_mod_settings ) {\n\t\t$stashed_theme_mod_settings = get_option( 'customize_stashed_theme_mods' );\n\t\tif ( empty( $stashed_theme_mod_settings ) ) {\n\t\t\t$stashed_theme_mod_settings = array();\n\t\t}\n\n\t\t// Delete any stashed theme mods for the active theme since since they would have been loaded and saved upon activation.\n\t\tunset( $stashed_theme_mod_settings[ $this->get_stylesheet() ] );\n\n\t\t// Merge inactive theme mods with the stashed theme mod settings.\n\t\tforeach ( $inactive_theme_mod_settings as $stylesheet => $theme_mod_settings ) {\n\t\t\tif ( ! isset( $stashed_theme_mod_settings[ $stylesheet ] ) ) {\n\t\t\t\t$stashed_theme_mod_settings[ $stylesheet ] = array();\n\t\t\t}\n\n\t\t\t$stashed_theme_mod_settings[ $stylesheet ] = array_merge(\n\t\t\t\t$stashed_theme_mod_settings[ $stylesheet ],\n\t\t\t\t$theme_mod_settings\n\t\t\t);\n\t\t}\n\n\t\t$autoload = false;\n\t\t$result = update_option( 'customize_stashed_theme_mods', $stashed_theme_mod_settings, $autoload );\n\t\tif ( ! $result ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn $stashed_theme_mod_settings;\n\t}\n\n\t/**\n\t * Refresh nonces for the current preview.\n\t *\n\t * @since 4.2.0\n\t */\n\tpublic function refresh_nonces() {\n\t\tif ( ! $this->is_preview() ) {\n\t\t\twp_send_json_error( 'not_preview' );\n\t\t}\n\n\t\twp_send_json_success( $this->get_nonces() );\n\t}\n\n\t/**\n\t * Add a customize setting.\n\t *\n\t * @since 3.4.0\n\t * @since 4.5.0 Return added WP_Customize_Setting instance.\n\t * @access public\n\t *\n\t * @param WP_Customize_Setting|string $id   Customize Setting object, or ID.\n\t * @param array                       $args Setting arguments; passed to WP_Customize_Setting\n\t *                                          constructor.\n\t * @return WP_Customize_Setting             The instance of the setting that was added.\n\t */\n\tpublic function add_setting( $id, $args = array() ) {\n\t\tif ( $id instanceof WP_Customize_Setting ) {\n\t\t\t$setting = $id;\n\t\t} else {\n\t\t\t$class = 'WP_Customize_Setting';\n\n\t\t\t/** This filter is documented in wp-includes/class-wp-customize-manager.php */\n\t\t\t$args = apply_filters( 'customize_dynamic_setting_args', $args, $id );\n\n\t\t\t/** This filter is documented in wp-includes/class-wp-customize-manager.php */\n\t\t\t$class = apply_filters( 'customize_dynamic_setting_class', $class, $id, $args );\n\n\t\t\t$setting = new $class( $this, $id, $args );\n\t\t}\n\n\t\t$this->settings[ $setting->id ] = $setting;\n\t\treturn $setting;\n\t}\n\n\t/**\n\t * Register any dynamically-created settings, such as those from $_POST['customized']\n\t * that have no corresponding setting created.\n\t *\n\t * This is a mechanism to \"wake up\" settings that have been dynamically created\n\t * on the front end and have been sent to WordPress in `$_POST['customized']`. When WP\n\t * loads, the dynamically-created settings then will get created and previewed\n\t * even though they are not directly created statically with code.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $setting_ids The setting IDs to add.\n\t * @return array The WP_Customize_Setting objects added.\n\t */\n\tpublic function add_dynamic_settings( $setting_ids ) {\n\t\t$new_settings = array();\n\t\tforeach ( $setting_ids as $setting_id ) {\n\t\t\t// Skip settings already created\n\t\t\tif ( $this->get_setting( $setting_id ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$setting_args = false;\n\t\t\t$setting_class = 'WP_Customize_Setting';\n\n\t\t\t/**\n\t\t\t * Filters a dynamic setting's constructor args.\n\t\t\t *\n\t\t\t * For a dynamic setting to be registered, this filter must be employed\n\t\t\t * to override the default false value with an array of args to pass to\n\t\t\t * the WP_Customize_Setting constructor.\n\t\t\t *\n\t\t\t * @since 4.2.0\n\t\t\t *\n\t\t\t * @param false|array $setting_args The arguments to the WP_Customize_Setting constructor.\n\t\t\t * @param string      $setting_id   ID for dynamic setting, usually coming from `$_POST['customized']`.\n\t\t\t */\n\t\t\t$setting_args = apply_filters( 'customize_dynamic_setting_args', $setting_args, $setting_id );\n\t\t\tif ( false === $setting_args ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Allow non-statically created settings to be constructed with custom WP_Customize_Setting subclass.\n\t\t\t *\n\t\t\t * @since 4.2.0\n\t\t\t *\n\t\t\t * @param string $setting_class WP_Customize_Setting or a subclass.\n\t\t\t * @param string $setting_id    ID for dynamic setting, usually coming from `$_POST['customized']`.\n\t\t\t * @param array  $setting_args  WP_Customize_Setting or a subclass.\n\t\t\t */\n\t\t\t$setting_class = apply_filters( 'customize_dynamic_setting_class', $setting_class, $setting_id, $setting_args );\n\n\t\t\t$setting = new $setting_class( $this, $setting_id, $setting_args );\n\n\t\t\t$this->add_setting( $setting );\n\t\t\t$new_settings[] = $setting;\n\t\t}\n\t\treturn $new_settings;\n\t}\n\n\t/**\n\t * Retrieve a customize setting.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id Customize Setting ID.\n\t * @return WP_Customize_Setting|void The setting, if set.\n\t */\n\tpublic function get_setting( $id ) {\n\t\tif ( isset( $this->settings[ $id ] ) ) {\n\t\t\treturn $this->settings[ $id ];\n\t\t}\n\t}\n\n\t/**\n\t * Remove a customize setting.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id Customize Setting ID.\n\t */\n\tpublic function remove_setting( $id ) {\n\t\tunset( $this->settings[ $id ] );\n\t}\n\n\t/**\n\t * Add a customize panel.\n\t *\n\t * @since 4.0.0\n\t * @since 4.5.0 Return added WP_Customize_Panel instance.\n\t * @access public\n\t *\n\t * @param WP_Customize_Panel|string $id   Customize Panel object, or Panel ID.\n\t * @param array                     $args Optional. Panel arguments. Default empty array.\n\t *\n\t * @return WP_Customize_Panel             The instance of the panel that was added.\n\t */\n\tpublic function add_panel( $id, $args = array() ) {\n\t\tif ( $id instanceof WP_Customize_Panel ) {\n\t\t\t$panel = $id;\n\t\t} else {\n\t\t\t$panel = new WP_Customize_Panel( $this, $id, $args );\n\t\t}\n\n\t\t$this->panels[ $panel->id ] = $panel;\n\t\treturn $panel;\n\t}\n\n\t/**\n\t * Retrieve a customize panel.\n\t *\n\t * @since 4.0.0\n\t * @access public\n\t *\n\t * @param string $id Panel ID to get.\n\t * @return WP_Customize_Panel|void Requested panel instance, if set.\n\t */\n\tpublic function get_panel( $id ) {\n\t\tif ( isset( $this->panels[ $id ] ) ) {\n\t\t\treturn $this->panels[ $id ];\n\t\t}\n\t}\n\n\t/**\n\t * Remove a customize panel.\n\t *\n\t * @since 4.0.0\n\t * @access public\n\t *\n\t * @param string $id Panel ID to remove.\n\t */\n\tpublic function remove_panel( $id ) {\n\t\t// Removing core components this way is _doing_it_wrong().\n\t\tif ( in_array( $id, $this->components, true ) ) {\n\t\t\t/* translators: 1: panel id, 2: link to 'customize_loaded_components' filter reference */\n\t\t\t$message = sprintf( __( 'Removing %1$s manually will cause PHP warnings. Use the %2$s filter instead.' ),\n\t\t\t\t$id,\n\t\t\t\t'<a href=\"' . esc_url( 'https://developer.wordpress.org/reference/hooks/customize_loaded_components/' ) . '\"><code>customize_loaded_components</code></a>'\n\t\t\t);\n\n\t\t\t_doing_it_wrong( __METHOD__, $message, '4.5.0' );\n\t\t}\n\t\tunset( $this->panels[ $id ] );\n\t}\n\n\t/**\n\t * Register a customize panel type.\n\t *\n\t * Registered types are eligible to be rendered via JS and created dynamically.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @see WP_Customize_Panel\n\t *\n\t * @param string $panel Name of a custom panel which is a subclass of WP_Customize_Panel.\n\t */\n\tpublic function register_panel_type( $panel ) {\n\t\t$this->registered_panel_types[] = $panel;\n\t}\n\n\t/**\n\t * Render JS templates for all registered panel types.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t */\n\tpublic function render_panel_templates() {\n\t\tforeach ( $this->registered_panel_types as $panel_type ) {\n\t\t\t$panel = new $panel_type( $this, 'temp', array() );\n\t\t\t$panel->print_template();\n\t\t}\n\t}\n\n\t/**\n\t * Add a customize section.\n\t *\n\t * @since 3.4.0\n\t * @since 4.5.0 Return added WP_Customize_Section instance.\n\t * @access public\n\t *\n\t * @param WP_Customize_Section|string $id   Customize Section object, or Section ID.\n\t * @param array                       $args Section arguments.\n\t *\n\t * @return WP_Customize_Section             The instance of the section that was added.\n\t */\n\tpublic function add_section( $id, $args = array() ) {\n\t\tif ( $id instanceof WP_Customize_Section ) {\n\t\t\t$section = $id;\n\t\t} else {\n\t\t\t$section = new WP_Customize_Section( $this, $id, $args );\n\t\t}\n\n\t\t$this->sections[ $section->id ] = $section;\n\t\treturn $section;\n\t}\n\n\t/**\n\t * Retrieve a customize section.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id Section ID.\n\t * @return WP_Customize_Section|void The section, if set.\n\t */\n\tpublic function get_section( $id ) {\n\t\tif ( isset( $this->sections[ $id ] ) )\n\t\t\treturn $this->sections[ $id ];\n\t}\n\n\t/**\n\t * Remove a customize section.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id Section ID.\n\t */\n\tpublic function remove_section( $id ) {\n\t\tunset( $this->sections[ $id ] );\n\t}\n\n\t/**\n\t * Register a customize section type.\n\t *\n\t * Registered types are eligible to be rendered via JS and created dynamically.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @see WP_Customize_Section\n\t *\n\t * @param string $section Name of a custom section which is a subclass of WP_Customize_Section.\n\t */\n\tpublic function register_section_type( $section ) {\n\t\t$this->registered_section_types[] = $section;\n\t}\n\n\t/**\n\t * Render JS templates for all registered section types.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t */\n\tpublic function render_section_templates() {\n\t\tforeach ( $this->registered_section_types as $section_type ) {\n\t\t\t$section = new $section_type( $this, 'temp', array() );\n\t\t\t$section->print_template();\n\t\t}\n\t}\n\n\t/**\n\t * Add a customize control.\n\t *\n\t * @since 3.4.0\n\t * @since 4.5.0 Return added WP_Customize_Control instance.\n\t * @access public\n\t *\n\t * @param WP_Customize_Control|string $id   Customize Control object, or ID.\n\t * @param array                       $args Control arguments; passed to WP_Customize_Control\n\t *                                          constructor.\n\t * @return WP_Customize_Control             The instance of the control that was added.\n\t */\n\tpublic function add_control( $id, $args = array() ) {\n\t\tif ( $id instanceof WP_Customize_Control ) {\n\t\t\t$control = $id;\n\t\t} else {\n\t\t\t$control = new WP_Customize_Control( $this, $id, $args );\n\t\t}\n\n\t\t$this->controls[ $control->id ] = $control;\n\t\treturn $control;\n\t}\n\n\t/**\n\t * Retrieve a customize control.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id ID of the control.\n\t * @return WP_Customize_Control|void The control object, if set.\n\t */\n\tpublic function get_control( $id ) {\n\t\tif ( isset( $this->controls[ $id ] ) )\n\t\t\treturn $this->controls[ $id ];\n\t}\n\n\t/**\n\t * Remove a customize control.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id ID of the control.\n\t */\n\tpublic function remove_control( $id ) {\n\t\tunset( $this->controls[ $id ] );\n\t}\n\n\t/**\n\t * Register a customize control type.\n\t *\n\t * Registered types are eligible to be rendered via JS and created dynamically.\n\t *\n\t * @since 4.1.0\n\t * @access public\n\t *\n\t * @param string $control Name of a custom control which is a subclass of\n\t *                        WP_Customize_Control.\n\t */\n\tpublic function register_control_type( $control ) {\n\t\t$this->registered_control_types[] = $control;\n\t}\n\n\t/**\n\t * Render JS templates for all registered control types.\n\t *\n\t * @since 4.1.0\n\t * @access public\n\t */\n\tpublic function render_control_templates() {\n\t\tforeach ( $this->registered_control_types as $control_type ) {\n\t\t\t$control = new $control_type( $this, 'temp', array(\n\t\t\t\t'settings' => array(),\n\t\t\t) );\n\t\t\t$control->print_template();\n\t\t}\n\t\t?>\n\t\t<script type=\"text/html\" id=\"tmpl-customize-control-notifications\">\n\t\t\t<ul>\n\t\t\t\t<# _.each( data.notifications, function( notification ) { #>\n\t\t\t\t\t<li class=\"notice notice-{{ notification.type || 'info' }} {{ data.altNotice ? 'notice-alt' : '' }}\" data-code=\"{{ notification.code }}\" data-type=\"{{ notification.type }}\">{{{ notification.message || notification.code }}}</li>\n\t\t\t\t<# } ); #>\n\t\t\t</ul>\n\t\t</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Helper function to compare two objects by priority, ensuring sort stability via instance_number.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0 Use wp_list_sort()\n\t *\n\t * @param WP_Customize_Panel|WP_Customize_Section|WP_Customize_Control $a Object A.\n\t * @param WP_Customize_Panel|WP_Customize_Section|WP_Customize_Control $b Object B.\n\t * @return int\n\t */\n\tprotected function _cmp_priority( $a, $b ) {\n\t\t_deprecated_function( __METHOD__, '4.7.0', 'wp_list_sort' );\n\n\t\tif ( $a->priority === $b->priority ) {\n\t\t\treturn $a->instance_number - $b->instance_number;\n\t\t} else {\n\t\t\treturn $a->priority - $b->priority;\n\t\t}\n\t}\n\n\t/**\n\t * Prepare panels, sections, and controls.\n\t *\n\t * For each, check if required related components exist,\n\t * whether the user has the necessary capabilities,\n\t * and sort by priority.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function prepare_controls() {\n\n\t\t$controls = array();\n\t\t$this->controls = wp_list_sort( $this->controls, array(\n\t\t\t'priority'        => 'ASC',\n\t\t\t'instance_number' => 'ASC',\n\t\t), 'ASC', true );\n\n\t\tforeach ( $this->controls as $id => $control ) {\n\t\t\tif ( ! isset( $this->sections[ $control->section ] ) || ! $control->check_capabilities() ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$this->sections[ $control->section ]->controls[] = $control;\n\t\t\t$controls[ $id ] = $control;\n\t\t}\n\t\t$this->controls = $controls;\n\n\t\t// Prepare sections.\n\t\t$this->sections = wp_list_sort( $this->sections, array(\n\t\t\t'priority'        => 'ASC',\n\t\t\t'instance_number' => 'ASC',\n\t\t), 'ASC', true );\n\t\t$sections = array();\n\n\t\tforeach ( $this->sections as $section ) {\n\t\t\tif ( ! $section->check_capabilities() ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\t\t\t$section->controls = wp_list_sort( $section->controls, array(\n\t\t\t\t'priority'        => 'ASC',\n\t\t\t\t'instance_number' => 'ASC',\n\t\t\t) );\n\n\t\t\tif ( ! $section->panel ) {\n\t\t\t\t// Top-level section.\n\t\t\t\t$sections[ $section->id ] = $section;\n\t\t\t} else {\n\t\t\t\t// This section belongs to a panel.\n\t\t\t\tif ( isset( $this->panels [ $section->panel ] ) ) {\n\t\t\t\t\t$this->panels[ $section->panel ]->sections[ $section->id ] = $section;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->sections = $sections;\n\n\t\t// Prepare panels.\n\t\t$this->panels = wp_list_sort( $this->panels, array(\n\t\t\t'priority'        => 'ASC',\n\t\t\t'instance_number' => 'ASC',\n\t\t), 'ASC', true );\n\t\t$panels = array();\n\n\t\tforeach ( $this->panels as $panel ) {\n\t\t\tif ( ! $panel->check_capabilities() ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$panel->sections = wp_list_sort( $panel->sections, array(\n\t\t\t\t'priority'        => 'ASC',\n\t\t\t\t'instance_number' => 'ASC',\n\t\t\t), 'ASC', true );\n\t\t\t$panels[ $panel->id ] = $panel;\n\t\t}\n\t\t$this->panels = $panels;\n\n\t\t// Sort panels and top-level sections together.\n\t\t$this->containers = array_merge( $this->panels, $this->sections );\n\t\t$this->containers = wp_list_sort( $this->containers, array(\n\t\t\t'priority'        => 'ASC',\n\t\t\t'instance_number' => 'ASC',\n\t\t), 'ASC', true );\n\t}\n\n\t/**\n\t * Enqueue scripts for customize controls.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function enqueue_control_scripts() {\n\t\tforeach ( $this->controls as $control ) {\n\t\t\t$control->enqueue();\n\t\t}\n\t}\n\n\t/**\n\t * Determine whether the user agent is iOS.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @return bool Whether the user agent is iOS.\n\t */\n\tpublic function is_ios() {\n\t\treturn wp_is_mobile() && preg_match( '/iPad|iPod|iPhone/', $_SERVER['HTTP_USER_AGENT'] );\n\t}\n\n\t/**\n\t * Get the template string for the Customizer pane document title.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @return string The template string for the document title.\n\t */\n\tpublic function get_document_title_template() {\n\t\tif ( $this->is_theme_active() ) {\n\t\t\t/* translators: %s: document title from the preview */\n\t\t\t$document_title_tmpl = __( 'Customize: %s' );\n\t\t} else {\n\t\t\t/* translators: %s: document title from the preview */\n\t\t\t$document_title_tmpl = __( 'Live Preview: %s' );\n\t\t}\n\t\t$document_title_tmpl = html_entity_decode( $document_title_tmpl, ENT_QUOTES, 'UTF-8' ); // Because exported to JS and assigned to document.title.\n\t\treturn $document_title_tmpl;\n\t}\n\n\t/**\n\t * Set the initial URL to be previewed.\n\t *\n\t * URL is validated.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @param string $preview_url URL to be previewed.\n\t */\n\tpublic function set_preview_url( $preview_url ) {\n\t\t$preview_url = esc_url_raw( $preview_url );\n\t\t$this->preview_url = wp_validate_redirect( $preview_url, home_url( '/' ) );\n\t}\n\n\t/**\n\t * Get the initial URL to be previewed.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @return string URL being previewed.\n\t */\n\tpublic function get_preview_url() {\n\t\tif ( empty( $this->preview_url ) ) {\n\t\t\t$preview_url = home_url( '/' );\n\t\t} else {\n\t\t\t$preview_url = $this->preview_url;\n\t\t}\n\t\treturn $preview_url;\n\t}\n\n\t/**\n\t * Determines whether the admin and the frontend are on different domains.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return bool Whether cross-domain.\n\t */\n\tpublic function is_cross_domain() {\n\t\t$admin_origin = wp_parse_url( admin_url() );\n\t\t$home_origin = wp_parse_url( home_url() );\n\t\t$cross_domain = ( strtolower( $admin_origin['host'] ) !== strtolower( $home_origin['host'] ) );\n\t\treturn $cross_domain;\n\t}\n\n\t/**\n\t * Get URLs allowed to be previewed.\n\t *\n\t * If the front end and the admin are served from the same domain, load the\n\t * preview over ssl if the Customizer is being loaded over ssl. This avoids\n\t * insecure content warnings. This is not attempted if the admin and front end\n\t * are on different domains to avoid the case where the front end doesn't have\n\t * ssl certs. Domain mapping plugins can allow other urls in these conditions\n\t * using the customize_allowed_urls filter.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @returns array Allowed URLs.\n\t */\n\tpublic function get_allowed_urls() {\n\t\t$allowed_urls = array( home_url( '/' ) );\n\n\t\tif ( is_ssl() && ! $this->is_cross_domain() ) {\n\t\t\t$allowed_urls[] = home_url( '/', 'https' );\n\t\t}\n\n\t\t/**\n\t\t * Filters the list of URLs allowed to be clicked and followed in the Customizer preview.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param array $allowed_urls An array of allowed URLs.\n\t\t */\n\t\t$allowed_urls = array_unique( apply_filters( 'customize_allowed_urls', $allowed_urls ) );\n\n\t\treturn $allowed_urls;\n\t}\n\n\t/**\n\t * Get messenger channel.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return string Messenger channel.\n\t */\n\tpublic function get_messenger_channel() {\n\t\treturn $this->messenger_channel;\n\t}\n\n\t/**\n\t * Set URL to link the user to when closing the Customizer.\n\t *\n\t * URL is validated.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @param string $return_url URL for return link.\n\t */\n\tpublic function set_return_url( $return_url ) {\n\t\t$return_url = esc_url_raw( $return_url );\n\t\t$return_url = remove_query_arg( wp_removable_query_args(), $return_url );\n\t\t$return_url = wp_validate_redirect( $return_url );\n\t\t$this->return_url = $return_url;\n\t}\n\n\t/**\n\t * Get URL to link the user to when closing the Customizer.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @return string URL for link to close Customizer.\n\t */\n\tpublic function get_return_url() {\n\t\t$referer = wp_get_referer();\n\t\t$excluded_referer_basenames = array( 'customize.php', 'wp-login.php' );\n\n\t\tif ( $this->return_url ) {\n\t\t\t$return_url = $this->return_url;\n\t\t} else if ( $referer && ! in_array( basename( parse_url( $referer, PHP_URL_PATH ) ), $excluded_referer_basenames, true ) ) {\n\t\t\t$return_url = $referer;\n\t\t} else if ( $this->preview_url ) {\n\t\t\t$return_url = $this->preview_url;\n\t\t} else {\n\t\t\t$return_url = home_url( '/' );\n\t\t}\n\t\treturn $return_url;\n\t}\n\n\t/**\n\t * Set the autofocused constructs.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @param array $autofocus {\n\t *     Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.\n\t *\n\t *     @type string [$control]  ID for control to be autofocused.\n\t *     @type string [$section]  ID for section to be autofocused.\n\t *     @type string [$panel]    ID for panel to be autofocused.\n\t * }\n\t */\n\tpublic function set_autofocus( $autofocus ) {\n\t\t$this->autofocus = array_filter( wp_array_slice_assoc( $autofocus, array( 'panel', 'section', 'control' ) ), 'is_string' );\n\t}\n\n\t/**\n\t * Get the autofocused constructs.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @return array {\n\t *     Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.\n\t *\n\t *     @type string [$control]  ID for control to be autofocused.\n\t *     @type string [$section]  ID for section to be autofocused.\n\t *     @type string [$panel]    ID for panel to be autofocused.\n\t * }\n\t */\n\tpublic function get_autofocus() {\n\t\treturn $this->autofocus;\n\t}\n\n\t/**\n\t * Get nonces for the Customizer.\n\t *\n\t * @since 4.5.0\n\t * @return array Nonces.\n\t */\n\tpublic function get_nonces() {\n\t\t$nonces = array(\n\t\t\t'save' => wp_create_nonce( 'save-customize_' . $this->get_stylesheet() ),\n\t\t\t'preview' => wp_create_nonce( 'preview-customize_' . $this->get_stylesheet() ),\n\t\t);\n\n\t\t/**\n\t\t * Filters nonces for Customizer.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param array                $nonces Array of refreshed nonces for save and\n\t\t *                                     preview actions.\n\t\t * @param WP_Customize_Manager $this   WP_Customize_Manager instance.\n\t\t */\n\t\t$nonces = apply_filters( 'customize_refresh_nonces', $nonces, $this );\n\n\t\treturn $nonces;\n\t}\n\n\t/**\n\t * Print JavaScript settings for parent window.\n\t *\n\t * @since 4.4.0\n\t */\n\tpublic function customize_pane_settings() {\n\n\t\t$login_url = add_query_arg( array(\n\t\t\t'interim-login' => 1,\n\t\t\t'customize-login' => 1,\n\t\t), wp_login_url() );\n\n\t\t// Ensure dirty flags are set for modified settings.\n\t\tforeach ( array_keys( $this->unsanitized_post_values() ) as $setting_id ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( $setting ) {\n\t\t\t\t$setting->dirty = true;\n\t\t\t}\n\t\t}\n\n\t\t// Prepare Customizer settings to pass to JavaScript.\n\t\t$settings = array(\n\t\t\t'changeset' => array(\n\t\t\t\t'uuid' => $this->changeset_uuid(),\n\t\t\t\t'status' => $this->changeset_post_id() ? get_post_status( $this->changeset_post_id() ) : '',\n\t\t\t),\n\t\t\t'timeouts' => array(\n\t\t\t\t'windowRefresh' => 250,\n\t\t\t\t'changesetAutoSave' => AUTOSAVE_INTERVAL * 1000,\n\t\t\t\t'keepAliveCheck' => 2500,\n\t\t\t\t'reflowPaneContents' => 100,\n\t\t\t\t'previewFrameSensitivity' => 2000,\n\t\t\t),\n\t\t\t'theme'    => array(\n\t\t\t\t'stylesheet' => $this->get_stylesheet(),\n\t\t\t\t'active'     => $this->is_theme_active(),\n\t\t\t),\n\t\t\t'url'      => array(\n\t\t\t\t'preview'       => esc_url_raw( $this->get_preview_url() ),\n\t\t\t\t'parent'        => esc_url_raw( admin_url() ),\n\t\t\t\t'activated'     => esc_url_raw( home_url( '/' ) ),\n\t\t\t\t'ajax'          => esc_url_raw( admin_url( 'admin-ajax.php', 'relative' ) ),\n\t\t\t\t'allowed'       => array_map( 'esc_url_raw', $this->get_allowed_urls() ),\n\t\t\t\t'isCrossDomain' => $this->is_cross_domain(),\n\t\t\t\t'home'          => esc_url_raw( home_url( '/' ) ),\n\t\t\t\t'login'         => esc_url_raw( $login_url ),\n\t\t\t),\n\t\t\t'browser'  => array(\n\t\t\t\t'mobile' => wp_is_mobile(),\n\t\t\t\t'ios'    => $this->is_ios(),\n\t\t\t),\n\t\t\t'panels'   => array(),\n\t\t\t'sections' => array(),\n\t\t\t'nonce'    => $this->get_nonces(),\n\t\t\t'autofocus' => $this->get_autofocus(),\n\t\t\t'documentTitleTmpl' => $this->get_document_title_template(),\n\t\t\t'previewableDevices' => $this->get_previewable_devices(),\n\t\t);\n\n\t\t// Prepare Customize Section objects to pass to JavaScript.\n\t\tforeach ( $this->sections() as $id => $section ) {\n\t\t\tif ( $section->check_capabilities() ) {\n\t\t\t\t$settings['sections'][ $id ] = $section->json();\n\t\t\t}\n\t\t}\n\n\t\t// Prepare Customize Panel objects to pass to JavaScript.\n\t\tforeach ( $this->panels() as $panel_id => $panel ) {\n\t\t\tif ( $panel->check_capabilities() ) {\n\t\t\t\t$settings['panels'][ $panel_id ] = $panel->json();\n\t\t\t\tforeach ( $panel->sections as $section_id => $section ) {\n\t\t\t\t\tif ( $section->check_capabilities() ) {\n\t\t\t\t\t\t$settings['sections'][ $section_id ] = $section->json();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t?>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar _wpCustomizeSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\t_wpCustomizeSettings.controls = {};\n\t\t\t_wpCustomizeSettings.settings = {};\n\t\t\t<?php\n\n\t\t\t// Serialize settings one by one to improve memory usage.\n\t\t\techo \"(function ( s ){\\n\";\n\t\t\tforeach ( $this->settings() as $setting ) {\n\t\t\t\tif ( $setting->check_capabilities() ) {\n\t\t\t\t\tprintf(\n\t\t\t\t\t\t\"s[%s] = %s;\\n\",\n\t\t\t\t\t\twp_json_encode( $setting->id ),\n\t\t\t\t\t\twp_json_encode( $setting->json() )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\techo \"})( _wpCustomizeSettings.settings );\\n\";\n\n\t\t\t// Serialize controls one by one to improve memory usage.\n\t\t\techo \"(function ( c ){\\n\";\n\t\t\tforeach ( $this->controls() as $control ) {\n\t\t\t\tif ( $control->check_capabilities() ) {\n\t\t\t\t\tprintf(\n\t\t\t\t\t\t\"c[%s] = %s;\\n\",\n\t\t\t\t\t\twp_json_encode( $control->id ),\n\t\t\t\t\t\twp_json_encode( $control->json() )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\techo \"})( _wpCustomizeSettings.controls );\\n\";\n\t\t?>\n\t\t</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Returns a list of devices to allow previewing.\n\t *\n\t * @access public\n\t * @since 4.5.0\n\t *\n\t * @return array List of devices with labels and default setting.\n\t */\n\tpublic function get_previewable_devices() {\n\t\t$devices = array(\n\t\t\t'desktop' => array(\n\t\t\t\t'label' => __( 'Enter desktop preview mode' ),\n\t\t\t\t'default' => true,\n\t\t\t),\n\t\t\t'tablet' => array(\n\t\t\t\t'label' => __( 'Enter tablet preview mode' ),\n\t\t\t),\n\t\t\t'mobile' => array(\n\t\t\t\t'label' => __( 'Enter mobile preview mode' ),\n\t\t\t),\n\t\t);\n\n\t\t/**\n\t\t * Filters the available devices to allow previewing in the Customizer.\n\t\t *\n\t\t * @since 4.5.0\n\t\t *\n\t\t * @see WP_Customize_Manager::get_previewable_devices()\n\t\t *\n\t\t * @param array $devices List of devices with labels and default setting.\n\t\t */\n\t\t$devices = apply_filters( 'customize_previewable_devices', $devices );\n\n\t\treturn $devices;\n\t}\n\n\t/**\n\t * Register some default controls.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function register_controls() {\n\n\t\t/* Panel, Section, and Control Types */\n\t\t$this->register_panel_type( 'WP_Customize_Panel' );\n\t\t$this->register_section_type( 'WP_Customize_Section' );\n\t\t$this->register_section_type( 'WP_Customize_Sidebar_Section' );\n\t\t$this->register_control_type( 'WP_Customize_Color_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Media_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Upload_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Image_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Background_Image_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Background_Position_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Cropped_Image_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Site_Icon_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Theme_Control' );\n\n\t\t/* Themes */\n\n\t\t$this->add_section( new WP_Customize_Themes_Section( $this, 'themes', array(\n\t\t\t'title'      => $this->theme()->display( 'Name' ),\n\t\t\t'capability' => 'switch_themes',\n\t\t\t'priority'   => 0,\n\t\t) ) );\n\n\t\t// Themes Setting (unused - the theme is considerably more fundamental to the Customizer experience).\n\t\t$this->add_setting( new WP_Customize_Filter_Setting( $this, 'active_theme', array(\n\t\t\t'capability' => 'switch_themes',\n\t\t) ) );\n\n\t\trequire_once( ABSPATH . 'wp-admin/includes/theme.php' );\n\n\t\t// Theme Controls.\n\n\t\t// Add a control for the active/original theme.\n\t\tif ( ! $this->is_theme_active() ) {\n\t\t\t$themes = wp_prepare_themes_for_js( array( wp_get_theme( $this->original_stylesheet ) ) );\n\t\t\t$active_theme = current( $themes );\n\t\t\t$active_theme['isActiveTheme'] = true;\n\t\t\t$this->add_control( new WP_Customize_Theme_Control( $this, $active_theme['id'], array(\n\t\t\t\t'theme'    => $active_theme,\n\t\t\t\t'section'  => 'themes',\n\t\t\t\t'settings' => 'active_theme',\n\t\t\t) ) );\n\t\t}\n\n\t\t$themes = wp_prepare_themes_for_js();\n\t\tforeach ( $themes as $theme ) {\n\t\t\tif ( $theme['active'] || $theme['id'] === $this->original_stylesheet ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$theme_id = 'theme_' . $theme['id'];\n\t\t\t$theme['isActiveTheme'] = false;\n\t\t\t$this->add_control( new WP_Customize_Theme_Control( $this, $theme_id, array(\n\t\t\t\t'theme'    => $theme,\n\t\t\t\t'section'  => 'themes',\n\t\t\t\t'settings' => 'active_theme',\n\t\t\t) ) );\n\t\t}\n\n\t\t/* Site Identity */\n\n\t\t$this->add_section( 'title_tagline', array(\n\t\t\t'title'    => __( 'Site Identity' ),\n\t\t\t'priority' => 20,\n\t\t) );\n\n\t\t$this->add_setting( 'blogname', array(\n\t\t\t'default'    => get_option( 'blogname' ),\n\t\t\t'type'       => 'option',\n\t\t\t'capability' => 'manage_options',\n\t\t) );\n\n\t\t$this->add_control( 'blogname', array(\n\t\t\t'label'      => __( 'Site Title' ),\n\t\t\t'section'    => 'title_tagline',\n\t\t) );\n\n\t\t$this->add_setting( 'blogdescription', array(\n\t\t\t'default'    => get_option( 'blogdescription' ),\n\t\t\t'type'       => 'option',\n\t\t\t'capability' => 'manage_options',\n\t\t) );\n\n\t\t$this->add_control( 'blogdescription', array(\n\t\t\t'label'      => __( 'Tagline' ),\n\t\t\t'section'    => 'title_tagline',\n\t\t) );\n\n\t\t// Add a setting to hide header text if the theme doesn't support custom headers.\n\t\tif ( ! current_theme_supports( 'custom-header', 'header-text' ) ) {\n\t\t\t$this->add_setting( 'header_text', array(\n\t\t\t\t'theme_supports'    => array( 'custom-logo', 'header-text' ),\n\t\t\t\t'default'           => 1,\n\t\t\t\t'sanitize_callback' => 'absint',\n\t\t\t) );\n\n\t\t\t$this->add_control( 'header_text', array(\n\t\t\t\t'label'    => __( 'Display Site Title and Tagline' ),\n\t\t\t\t'section'  => 'title_tagline',\n\t\t\t\t'settings' => 'header_text',\n\t\t\t\t'type'     => 'checkbox',\n\t\t\t) );\n\t\t}\n\n\t\t$this->add_setting( 'site_icon', array(\n\t\t\t'type'       => 'option',\n\t\t\t'capability' => 'manage_options',\n\t\t\t'transport'  => 'postMessage', // Previewed with JS in the Customizer controls window.\n\t\t) );\n\n\t\t$this->add_control( new WP_Customize_Site_Icon_Control( $this, 'site_icon', array(\n\t\t\t'label'       => __( 'Site Icon' ),\n\t\t\t'description' => sprintf(\n\t\t\t\t/* translators: %s: site icon size in pixels */\n\t\t\t\t__( 'The Site Icon is used as a browser and app icon for your site. Icons must be square, and at least %s pixels wide and tall.' ),\n\t\t\t\t'<strong>512</strong>'\n\t\t\t),\n\t\t\t'section'     => 'title_tagline',\n\t\t\t'priority'    => 60,\n\t\t\t'height'      => 512,\n\t\t\t'width'       => 512,\n\t\t) ) );\n\n\t\t$this->add_setting( 'custom_logo', array(\n\t\t\t'theme_supports' => array( 'custom-logo' ),\n\t\t\t'transport'      => 'postMessage',\n\t\t) );\n\n\t\t$custom_logo_args = get_theme_support( 'custom-logo' );\n\t\t$this->add_control( new WP_Customize_Cropped_Image_Control( $this, 'custom_logo', array(\n\t\t\t'label'         => __( 'Logo' ),\n\t\t\t'section'       => 'title_tagline',\n\t\t\t'priority'      => 8,\n\t\t\t'height'        => $custom_logo_args[0]['height'],\n\t\t\t'width'         => $custom_logo_args[0]['width'],\n\t\t\t'flex_height'   => $custom_logo_args[0]['flex-height'],\n\t\t\t'flex_width'    => $custom_logo_args[0]['flex-width'],\n\t\t\t'button_labels' => array(\n\t\t\t\t'select'       => __( 'Select logo' ),\n\t\t\t\t'change'       => __( 'Change logo' ),\n\t\t\t\t'remove'       => __( 'Remove' ),\n\t\t\t\t'default'      => __( 'Default' ),\n\t\t\t\t'placeholder'  => __( 'No logo selected' ),\n\t\t\t\t'frame_title'  => __( 'Select logo' ),\n\t\t\t\t'frame_button' => __( 'Choose logo' ),\n\t\t\t),\n\t\t) ) );\n\n\t\t$this->selective_refresh->add_partial( 'custom_logo', array(\n\t\t\t'settings'            => array( 'custom_logo' ),\n\t\t\t'selector'            => '.custom-logo-link',\n\t\t\t'render_callback'     => array( $this, '_render_custom_logo_partial' ),\n\t\t\t'container_inclusive' => true,\n\t\t) );\n\n\t\t/* Colors */\n\n\t\t$this->add_section( 'colors', array(\n\t\t\t'title'          => __( 'Colors' ),\n\t\t\t'priority'       => 40,\n\t\t) );\n\n\t\t$this->add_setting( 'header_textcolor', array(\n\t\t\t'theme_supports' => array( 'custom-header', 'header-text' ),\n\t\t\t'default'        => get_theme_support( 'custom-header', 'default-text-color' ),\n\n\t\t\t'sanitize_callback'    => array( $this, '_sanitize_header_textcolor' ),\n\t\t\t'sanitize_js_callback' => 'maybe_hash_hex_color',\n\t\t) );\n\n\t\t// Input type: checkbox\n\t\t// With custom value\n\t\t$this->add_control( 'display_header_text', array(\n\t\t\t'settings' => 'header_textcolor',\n\t\t\t'label'    => __( 'Display Site Title and Tagline' ),\n\t\t\t'section'  => 'title_tagline',\n\t\t\t'type'     => 'checkbox',\n\t\t\t'priority' => 40,\n\t\t) );\n\n\t\t$this->add_control( new WP_Customize_Color_Control( $this, 'header_textcolor', array(\n\t\t\t'label'   => __( 'Header Text Color' ),\n\t\t\t'section' => 'colors',\n\t\t) ) );\n\n\t\t// Input type: Color\n\t\t// With sanitize_callback\n\t\t$this->add_setting( 'background_color', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-color' ),\n\t\t\t'theme_supports' => 'custom-background',\n\n\t\t\t'sanitize_callback'    => 'sanitize_hex_color_no_hash',\n\t\t\t'sanitize_js_callback' => 'maybe_hash_hex_color',\n\t\t) );\n\n\t\t$this->add_control( new WP_Customize_Color_Control( $this, 'background_color', array(\n\t\t\t'label'   => __( 'Background Color' ),\n\t\t\t'section' => 'colors',\n\t\t) ) );\n\n\t\t/* Custom Header */\n\n\t\tif ( current_theme_supports( 'custom-header', 'video' ) ) {\n\t\t\t$title = __( 'Header Media' );\n\t\t\t$description = '<p>' . __( 'If you add a video, the image will be used as a fallback while the video loads.' ) . '</p>';\n\n\t\t\t// @todo Customizer sections should support having notifications just like controls do. See <https://core.trac.wordpress.org/ticket/38794>.\n\t\t\t$description .= '<div class=\"customize-control-notifications-container header-video-not-currently-previewable\" style=\"display: none\"><ul>';\n\t\t\t$description .= '<li class=\"notice notice-info\">' . __( 'This theme doesn\\'t support video headers on this page. Navigate to the front page or another page that supports video headers.' ) . '</li>';\n\t\t\t$description .= '</ul></div>';\n\t\t\t$width = absint( get_theme_support( 'custom-header', 'width' ) );\n\t\t\t$height = absint( get_theme_support( 'custom-header', 'height' ) );\n\t\t\tif ( $width && $height ) {\n\t\t\t\t$control_description = sprintf(\n\t\t\t\t\t/* translators: 1: .mp4, 2: header size in pixels */\n\t\t\t\t\t__( 'Upload your video in %1$s format and minimize its file size for best results. Your theme recommends dimensions of %2$s pixels.' ),\n\t\t\t\t\t'<code>.mp4</code>',\n\t\t\t\t\tsprintf( '<strong>%s &times; %s</strong>', $width, $height )\n\t\t\t\t);\n\t\t\t} elseif ( $width ) {\n\t\t\t\t$control_description = sprintf(\n\t\t\t\t\t/* translators: 1: .mp4, 2: header width in pixels */\n\t\t\t\t\t__( 'Upload your video in %1$s format and minimize its file size for best results. Your theme recommends a width of %2$s pixels.' ),\n\t\t\t\t\t'<code>.mp4</code>',\n\t\t\t\t\tsprintf( '<strong>%s</strong>', $width )\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$control_description = sprintf(\n\t\t\t\t\t/* translators: 1: .mp4, 2: header height in pixels */\n\t\t\t\t\t__( 'Upload your video in %1$s format and minimize its file size for best results. Your theme recommends a height of %2$s pixels.' ),\n\t\t\t\t\t'<code>.mp4</code>',\n\t\t\t\t\tsprintf( '<strong>%s</strong>', $height )\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t$title = __( 'Header Image' );\n\t\t\t$description = '';\n\t\t\t$control_description = '';\n\t\t}\n\n\t\t$this->add_section( 'header_image', array(\n\t\t\t'title'          => $title,\n\t\t\t'description'    => $description,\n\t\t\t'theme_supports' => 'custom-header',\n\t\t\t'priority'       => 60,\n\t\t) );\n\n\t\t$this->add_setting( 'header_video', array(\n\t\t\t'theme_supports'    => array( 'custom-header', 'video' ),\n\t\t\t'transport'         => 'postMessage',\n\t\t\t'sanitize_callback' => 'absint',\n\t\t\t'validate_callback' => array( $this, '_validate_header_video' ),\n\t\t) );\n\n\t\t$this->add_setting( 'external_header_video', array(\n\t\t\t'theme_supports'    => array( 'custom-header', 'video' ),\n\t\t\t'transport'         => 'postMessage',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_external_header_video' ),\n\t\t\t'validate_callback' => array( $this, '_validate_external_header_video' ),\n\t\t) );\n\n\t\t$this->add_setting( new WP_Customize_Filter_Setting( $this, 'header_image', array(\n\t\t\t'default'        => sprintf( get_theme_support( 'custom-header', 'default-image' ), get_template_directory_uri(), get_stylesheet_directory_uri() ),\n\t\t\t'theme_supports' => 'custom-header',\n\t\t) ) );\n\n\t\t$this->add_setting( new WP_Customize_Header_Image_Setting( $this, 'header_image_data', array(\n\t\t\t'theme_supports' => 'custom-header',\n\t\t) ) );\n\n\t\t/*\n\t\t * Switch image settings to postMessage when video support is enabled since\n\t\t * it entails that the_custom_header_markup() will be used, and thus selective\n\t\t * refresh can be utilized.\n\t\t */\n\t\tif ( current_theme_supports( 'custom-header', 'video' ) ) {\n\t\t\t$this->get_setting( 'header_image' )->transport = 'postMessage';\n\t\t\t$this->get_setting( 'header_image_data' )->transport = 'postMessage';\n\t\t}\n\n\t\t$this->add_control( new WP_Customize_Media_Control( $this, 'header_video', array(\n\t\t\t'theme_supports' => array( 'custom-header', 'video' ),\n\t\t\t'label'          => __( 'Header Video' ),\n\t\t\t'description'    => $control_description,\n\t\t\t'section'        => 'header_image',\n\t\t\t'mime_type'      => 'video',\n\t\t\t// @todo These button_labels can be removed once WP_Customize_Media_Control provides mime_type-specific labels automatically. See <https://core.trac.wordpress.org/ticket/38796>.\n\t\t\t'button_labels'  => array(\n\t\t\t\t'select'       => __( 'Select Video' ),\n\t\t\t\t'change'       => __( 'Change Video' ),\n\t\t\t\t'placeholder'  => __( 'No video selected' ),\n\t\t\t\t'frame_title'  => __( 'Select Video' ),\n\t\t\t\t'frame_button' => __( 'Choose Video' ),\n\t\t\t),\n\t\t\t'active_callback' => 'is_header_video_active',\n\t\t) ) );\n\n\t\t$this->add_control( 'external_header_video', array(\n\t\t\t'theme_supports' => array( 'custom-header', 'video' ),\n\t\t\t'type'           => 'url',\n\t\t\t'description'    => __( 'Or, enter a YouTube URL:' ),\n\t\t\t'section'        => 'header_image',\n\t\t\t'active_callback' => 'is_header_video_active',\n\t\t) );\n\n\t\t$this->add_control( new WP_Customize_Header_Image_Control( $this ) );\n\n\t\t$this->selective_refresh->add_partial( 'custom_header', array(\n\t\t\t'selector'            => '#wp-custom-header',\n\t\t\t'render_callback'     => 'the_custom_header_markup',\n\t\t\t'settings'            => array( 'header_video', 'external_header_video', 'header_image' ), // The image is used as a video fallback here.\n\t\t\t'container_inclusive' => true,\n\t\t) );\n\n\t\t/* Custom Background */\n\n\t\t$this->add_section( 'background_image', array(\n\t\t\t'title'          => __( 'Background Image' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'priority'       => 80,\n\t\t) );\n\n\t\t$this->add_setting( 'background_image', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-image' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) );\n\n\t\t$this->add_setting( new WP_Customize_Background_Image_Setting( $this, 'background_image_thumb', array(\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) ) );\n\n\t\t$this->add_control( new WP_Customize_Background_Image_Control( $this ) );\n\n\t\t$this->add_setting( 'background_preset', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-preset' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) );\n\n\t\t$this->add_control( 'background_preset', array(\n\t\t\t'label'      => _x( 'Preset', 'Background Preset' ),\n\t\t\t'section'    => 'background_image',\n\t\t\t'type'       => 'select',\n\t\t\t'choices'    => array(\n\t\t\t\t'default' => _x( 'Default', 'Default Preset' ),\n\t\t\t\t'fill'    => __( 'Fill Screen' ),\n\t\t\t\t'fit'     => __( 'Fit to Screen' ),\n\t\t\t\t'repeat'  => _x( 'Repeat', 'Repeat Image' ),\n\t\t\t\t'custom'  => _x( 'Custom', 'Custom Preset' ),\n\t\t\t),\n\t\t) );\n\n\t\t$this->add_setting( 'background_position_x', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-position-x' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) );\n\n\t\t$this->add_setting( 'background_position_y', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-position-y' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) );\n\n\t\t$this->add_control( new WP_Customize_Background_Position_Control( $this, 'background_position', array(\n\t\t\t'label'    => __( 'Image Position' ),\n\t\t\t'section'  => 'background_image',\n\t\t\t'settings' => array(\n\t\t\t\t'x' => 'background_position_x',\n\t\t\t\t'y' => 'background_position_y',\n\t\t\t),\n\t\t) ) );\n\n\t\t$this->add_setting( 'background_size', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-size' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) );\n\n\t\t$this->add_control( 'background_size', array(\n\t\t\t'label'      => __( 'Image Size' ),\n\t\t\t'section'    => 'background_image',\n\t\t\t'type'       => 'select',\n\t\t\t'choices'    => array(\n\t\t\t\t'auto'    => __( 'Original' ),\n\t\t\t\t'contain' => __( 'Fit to Screen' ),\n\t\t\t\t'cover'   => __( 'Fill Screen' ),\n\t\t\t),\n\t\t) );\n\n\t\t$this->add_setting( 'background_repeat', array(\n\t\t\t'default'           => get_theme_support( 'custom-background', 'default-repeat' ),\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t\t'theme_supports'    => 'custom-background',\n\t\t) );\n\n\t\t$this->add_control( 'background_repeat', array(\n\t\t\t'label'    => __( 'Repeat Background Image' ),\n\t\t\t'section'  => 'background_image',\n\t\t\t'type'     => 'checkbox',\n\t\t) );\n\n\t\t$this->add_setting( 'background_attachment', array(\n\t\t\t'default'           => get_theme_support( 'custom-background', 'default-attachment' ),\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t\t'theme_supports'    => 'custom-background',\n\t\t) );\n\n\t\t$this->add_control( 'background_attachment', array(\n\t\t\t'label'    => __( 'Scroll with Page' ),\n\t\t\t'section'  => 'background_image',\n\t\t\t'type'     => 'checkbox',\n\t\t) );\n\n\n\t\t// If the theme is using the default background callback, we can update\n\t\t// the background CSS using postMessage.\n\t\tif ( get_theme_support( 'custom-background', 'wp-head-callback' ) === '_custom_background_cb' ) {\n\t\t\tforeach ( array( 'color', 'image', 'preset', 'position_x', 'position_y', 'size', 'repeat', 'attachment' ) as $prop ) {\n\t\t\t\t$this->get_setting( 'background_' . $prop )->transport = 'postMessage';\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Static Front Page\n\t\t * See also https://core.trac.wordpress.org/ticket/19627 which introduces the the static-front-page theme_support.\n\t\t * The following replicates behavior from options-reading.php.\n\t\t */\n\n\t\t$this->add_section( 'static_front_page', array(\n\t\t\t'title' => __( 'Static Front Page' ),\n\t\t\t'priority' => 120,\n\t\t\t'description' => __( 'Your theme supports a static front page.' ),\n\t\t\t'active_callback' => array( $this, 'has_published_pages' ),\n\t\t) );\n\n\t\t$this->add_setting( 'show_on_front', array(\n\t\t\t'default' => get_option( 'show_on_front' ),\n\t\t\t'capability' => 'manage_options',\n\t\t\t'type' => 'option',\n\t\t) );\n\n\t\t$this->add_control( 'show_on_front', array(\n\t\t\t'label' => __( 'Front page displays' ),\n\t\t\t'section' => 'static_front_page',\n\t\t\t'type' => 'radio',\n\t\t\t'choices' => array(\n\t\t\t\t'posts' => __( 'Your latest posts' ),\n\t\t\t\t'page'  => __( 'A static page' ),\n\t\t\t),\n\t\t) );\n\n\t\t$this->add_setting( 'page_on_front', array(\n\t\t\t'type'       => 'option',\n\t\t\t'capability' => 'manage_options',\n\t\t) );\n\n\t\t$this->add_control( 'page_on_front', array(\n\t\t\t'label' => __( 'Front page' ),\n\t\t\t'section' => 'static_front_page',\n\t\t\t'type' => 'dropdown-pages',\n\t\t\t'allow_addition' => true,\n\t\t) );\n\n\t\t$this->add_setting( 'page_for_posts', array(\n\t\t\t'type' => 'option',\n\t\t\t'capability' => 'manage_options',\n\t\t) );\n\n\t\t$this->add_control( 'page_for_posts', array(\n\t\t\t'label' => __( 'Posts page' ),\n\t\t\t'section' => 'static_front_page',\n\t\t\t'type' => 'dropdown-pages',\n\t\t\t'allow_addition' => true,\n\t\t) );\n\n\t\t/* Custom CSS */\n\t\t$this->add_section( 'custom_css', array(\n\t\t\t'title'              => __( 'Additional CSS' ),\n\t\t\t'priority'           => 200,\n\t\t\t'description_hidden' => true,\n\t\t\t'description'        => sprintf( '%s<br /><a href=\"%s\" class=\"external-link\" target=\"_blank\">%s<span class=\"screen-reader-text\">%s</span></a>',\n\t\t\t\t__( 'CSS allows you to customize the appearance and layout of your site with code. Separate CSS is saved for each of your themes. In the editing area the Tab key enters a tab character. To move below this area by pressing Tab, press the Esc key followed by the Tab key.' ),\n\t\t\t\tesc_url( __( 'https://codex.wordpress.org/CSS' ) ),\n\t\t\t\t__( 'Learn more about CSS' ),\n\t\t\t\t/* translators: accessibility text */\n\t\t\t\t__( '(opens in a new window)' )\n\t\t\t),\n\t\t) );\n\n\t\t$custom_css_setting = new WP_Customize_Custom_CSS_Setting( $this, sprintf( 'custom_css[%s]', get_stylesheet() ), array(\n\t\t\t'capability' => 'edit_css',\n\t\t\t'default' => sprintf( \"/*\\n%s\\n*/\", __( \"You can add your own CSS here.\\n\\nClick the help icon above to learn more.\" ) ),\n\t\t) );\n\t\t$this->add_setting( $custom_css_setting );\n\n\t\t$this->add_control( 'custom_css', array(\n\t\t\t'type'     => 'textarea',\n\t\t\t'section'  => 'custom_css',\n\t\t\t'settings' => array( 'default' => $custom_css_setting->id ),\n\t\t\t'input_attrs' => array(\n\t\t\t\t'class' => 'code', // Ensures contents displayed as LTR instead of RTL.\n\t\t\t),\n\t\t) );\n\t}\n\n\t/**\n\t * Return whether there are published pages.\n\t *\n\t * Used as active callback for static front page section and controls.\n\t *\n\t * @access private\n\t * @since 4.7.0\n\t *\n\t * @returns bool Whether there are published (or to be published) pages.\n\t */\n\tpublic function has_published_pages() {\n\n\t\t$setting = $this->get_setting( 'nav_menus_created_posts' );\n\t\tif ( $setting ) {\n\t\t\tforeach ( $setting->value() as $post_id ) {\n\t\t\t\tif ( 'page' === get_post_type( $post_id ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0 !== count( get_pages() );\n\t}\n\n\t/**\n\t * Add settings from the POST data that were not added with code, e.g. dynamically-created settings for Widgets\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @see add_dynamic_settings()\n\t */\n\tpublic function register_dynamic_settings() {\n\t\t$setting_ids = array_keys( $this->unsanitized_post_values() );\n\t\t$this->add_dynamic_settings( $setting_ids );\n\t}\n\n\t/**\n\t * Callback for validating the header_textcolor value.\n\t *\n\t * Accepts 'blank', and otherwise uses sanitize_hex_color_no_hash().\n\t * Returns default text color if hex color is empty.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $color\n\t * @return mixed\n\t */\n\tpublic function _sanitize_header_textcolor( $color ) {\n\t\tif ( 'blank' === $color )\n\t\t\treturn 'blank';\n\n\t\t$color = sanitize_hex_color_no_hash( $color );\n\t\tif ( empty( $color ) )\n\t\t\t$color = get_theme_support( 'custom-header', 'default-text-color' );\n\n\t\treturn $color;\n\t}\n\n\t/**\n\t * Callback for validating a background setting value.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t *\n\t * @param string $value Repeat value.\n\t * @param WP_Customize_Setting $setting Setting.\n\t * @return string|WP_Error Background value or validation error.\n\t */\n\tpublic function _sanitize_background_setting( $value, $setting ) {\n\t\tif ( 'background_repeat' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'repeat-x', 'repeat-y', 'repeat', 'no-repeat' ) ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background repeat.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_attachment' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'fixed', 'scroll' ) ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background attachment.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_position_x' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'left', 'center', 'right' ), true ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background position X.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_position_y' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'top', 'center', 'bottom' ), true ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background position Y.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_size' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'auto', 'contain', 'cover' ), true ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background size.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_preset' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'default', 'fill', 'fit', 'repeat', 'custom' ), true ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background size.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_image' === $setting->id || 'background_image_thumb' === $setting->id ) {\n\t\t\t$value = empty( $value ) ? '' : esc_url_raw( $value );\n\t\t} else {\n\t\t\treturn new WP_Error( 'unrecognized_setting', __( 'Unrecognized background setting.' ) );\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Export header video settings to facilitate selective refresh.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param array $response Response.\n\t * @param WP_Customize_Selective_Refresh $selective_refresh Selective refresh component.\n\t * @param array $partials Array of partials.\n\t * @return array\n\t */\n\tpublic function export_header_video_settings( $response, $selective_refresh, $partials ) {\n\t\tif ( isset( $partials['custom_header'] ) ) {\n\t\t\t$response['custom_header_settings'] = get_header_video_settings();\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Callback for validating the header_video value.\n\t *\n\t * Ensures that the selected video is less than 8MB and provides an error message.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param WP_Error $validity\n\t * @param mixed $value\n\t * @return mixed\n\t */\n\tpublic function _validate_header_video( $validity, $value ) {\n\t\t$video = get_attached_file( absint( $value ) );\n\t\tif ( $video ) {\n\t\t\t$size = filesize( $video );\n\t\t\tif ( 8 < $size / pow( 1024, 2 ) ) { // Check whether the size is larger than 8MB.\n\t\t\t\t$validity->add( 'size_too_large',\n\t\t\t\t\t__( 'This video file is too large to use as a header video. Try a shorter video or optimize the compression settings and re-upload a file that is less than 8MB. Or, upload your video to YouTube and link it with the option below.' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ( '.mp4' !== substr( $video, -4 ) && '.mov' !== substr( $video, -4 ) ) { // Check for .mp4 or .mov format, which (assuming h.264 encoding) are the only cross-browser-supported formats.\n\t\t\t\t$validity->add( 'invalid_file_type', sprintf(\n\t\t\t\t\t/* translators: 1: .mp4, 2: .mov */\n\t\t\t\t\t__( 'Only %1$s or %2$s files may be used for header video. Please convert your video file and try again, or, upload your video to YouTube and link it with the option below.' ),\n\t\t\t\t\t'<code>.mp4</code>',\n\t\t\t\t\t'<code>.mov</code>'\n\t\t\t\t) );\n\t\t\t}\n\t\t}\n\t\treturn $validity;\n\t}\n\n\t/**\n\t * Callback for validating the external_header_video value.\n\t *\n\t * Ensures that the provided URL is supported.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param WP_Error $validity\n\t * @param mixed $value\n\t * @return mixed\n\t */\n\tpublic function _validate_external_header_video( $validity, $value ) {\n\t\t$video = esc_url_raw( $value );\n\t\tif ( $video ) {\n\t\t\tif ( ! preg_match( '#^https?://(?:www\\.)?(?:youtube\\.com/watch|youtu\\.be/)#', $video ) ) {\n\t\t\t\t$validity->add( 'invalid_url', __( 'Please enter a valid YouTube URL.' ) );\n\t\t\t}\n\t\t}\n\t\treturn $validity;\n\t}\n\n\t/**\n\t * Callback for sanitizing the external_header_video value.\n\t *\n\t * @since 4.7.1\n\t *\n\t * @param string $value URL.\n\t * @return string Sanitized URL.\n\t */\n\tpublic function _sanitize_external_header_video( $value ) {\n\t\treturn esc_url_raw( trim( $value ) );\n\t}\n\n\t/**\n\t * Callback for rendering the custom logo, used in the custom_logo partial.\n\t *\n\t * This method exists because the partial object and context data are passed\n\t * into a partial's render_callback so we cannot use get_custom_logo() as\n\t * the render_callback directly since it expects a blog ID as the first\n\t * argument. When WP no longer supports PHP 5.3, this method can be removed\n\t * in favor of an anonymous function.\n\t *\n\t * @see WP_Customize_Manager::register_controls()\n\t *\n\t * @since 4.5.0\n\t * @access private\n\t *\n\t * @return string Custom logo.\n\t */\n\tpublic function _render_custom_logo_partial() {\n\t\treturn get_custom_logo();\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-beta1-40692';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4601-20170510';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * Theme Customize Screen.\n *\n * @package WordPress\n * @subpackage Customize\n * @since 3.4.0\n */\n\ndefine( 'IFRAME_REQUEST', true );\n\n/** Load WordPress Administration Bootstrap */\nrequire_once( dirname( __FILE__ ) . '/admin.php' );\n\nif ( ! current_user_can( 'customize' ) ) {\n\twp_die(\n\t\t'<h1>' . __( 'Cheatin&#8217; uh?' ) . '</h1>' .\n\t\t'<p>' . __( 'Sorry, you are not allowed to customize this site.' ) . '</p>',\n\t\t403\n\t);\n}\n\n/**\n * @global WP_Scripts           $wp_scripts\n * @global WP_Customize_Manager $wp_customize\n */\nglobal $wp_scripts, $wp_customize;\n\nif ( $wp_customize->changeset_post_id() ) {\n\tif ( ! current_user_can( get_post_type_object( 'customize_changeset' )->cap->edit_post, $wp_customize->changeset_post_id() ) ) {\n\t\twp_die(\n\t\t\t'<h1>' . __( 'Cheatin&#8217; uh?' ) . '</h1>' .\n\t\t\t'<p>' . __( 'Sorry, you are not allowed to edit this changeset.' ) . '</p>',\n\t\t\t403\n\t\t);\n\t}\n\tif ( in_array( get_post_status( $wp_customize->changeset_post_id() ), array( 'publish', 'trash' ), true ) ) {\n\t\twp_die(\n\t\t\t'<h1>' . __( 'Cheatin&#8217; uh?' ) . '</h1>' .\n\t\t\t'<p>' . __( 'This changeset has already been published and cannot be further modified.' ) . '</p>' .\n\t\t\t'<p><a href=\"' . esc_url( remove_query_arg( 'changeset_uuid' ) ) . '\">' . __( 'Customize New Changes' ) . '</a></p>',\n\t\t\t403\n\t\t);\n\t}\n}\n\n\nwp_reset_vars( array( 'url', 'return', 'autofocus' ) );\nif ( ! empty( $url ) ) {\n\t$wp_customize->set_preview_url( wp_unslash( $url ) );\n}\nif ( ! empty( $return ) ) {\n\t$wp_customize->set_return_url( wp_unslash( $return ) );\n}\nif ( ! empty( $autofocus ) && is_array( $autofocus ) ) {\n\t$wp_customize->set_autofocus( wp_unslash( $autofocus ) );\n}\n\n$registered = $wp_scripts->registered;\n$wp_scripts = new WP_Scripts;\n$wp_scripts->registered = $registered;\n\nadd_action( 'customize_controls_print_scripts',        'print_head_scripts', 20 );\nadd_action( 'customize_controls_print_footer_scripts', '_wp_footer_scripts'     );\nadd_action( 'customize_controls_print_styles',         'print_admin_styles', 20 );\n\n/**\n * Fires when Customizer controls are initialized, before scripts are enqueued.\n *\n * @since 3.4.0\n */\ndo_action( 'customize_controls_init' );\n\nwp_enqueue_script( 'customize-controls' );\nwp_enqueue_style( 'customize-controls' );\n\n/**\n * Enqueue Customizer control scripts.\n *\n * @since 3.4.0\n */\ndo_action( 'customize_controls_enqueue_scripts' );\n\n// Let's roll.\n@header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));\n\nwp_user_settings();\n_wp_admin_html_begin();\n\n$body_class = 'wp-core-ui wp-customizer js';\n\nif ( wp_is_mobile() ) :\n\t$body_class .= ' mobile';\n\n\t?><meta name=\"viewport\" id=\"viewport-meta\" content=\"width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=1.2\" /><?php\nendif;\n\nif ( $wp_customize->is_ios() ) {\n\t$body_class .= ' ios';\n}\n\nif ( is_rtl() ) {\n\t$body_class .= ' rtl';\n}\n$body_class .= ' locale-' . sanitize_html_class( strtolower( str_replace( '_', '-', get_user_locale() ) ) );\n\n$admin_title = sprintf( $wp_customize->get_document_title_template(), __( 'Loading&hellip;' ) );\n\n?><title><?php echo $admin_title; ?></title>\n\n<script type=\"text/javascript\">\nvar ajaxurl = <?php echo wp_json_encode( admin_url( 'admin-ajax.php', 'relative' ) ); ?>;\n</script>\n\n<?php\n/**\n * Fires when Customizer control styles are printed.\n *\n * @since 3.4.0\n */\ndo_action( 'customize_controls_print_styles' );\n\n/**\n * Fires when Customizer control scripts are printed.\n *\n * @since 3.4.0\n */\ndo_action( 'customize_controls_print_scripts' );\n?>\n</head>\n<body class=\"<?php echo esc_attr( $body_class ); ?>\">\n<div class=\"wp-full-overlay expanded\">\n\t<form id=\"customize-controls\" class=\"wrap wp-full-overlay-sidebar\">\n\t\t<div id=\"customize-header-actions\" class=\"wp-full-overlay-header\">\n\t\t\t<?php\n\t\t\t$save_text = $wp_customize->is_theme_active() ? __( 'Save &amp; Publish' ) : __( 'Save &amp; Activate' );\n\t\t\t$save_attrs = array();\n\t\t\tif ( ! current_user_can( get_post_type_object( 'customize_changeset' )->cap->publish_posts ) ) {\n\t\t\t\t$save_attrs['style'] = 'display: none';\n\t\t\t}\n\t\t\tsubmit_button( $save_text, 'primary save', 'save', false, $save_attrs );\n\t\t\t?>\n\t\t\t<span class=\"spinner\"></span>\n\t\t\t<button type=\"button\" class=\"customize-controls-preview-toggle\">\n\t\t\t\t<span class=\"controls\"><?php _e( 'Customize' ); ?></span>\n\t\t\t\t<span class=\"preview\"><?php _e( 'Preview' ); ?></span>\n\t\t\t</button>\n\t\t\t<a class=\"customize-controls-close\" href=\"<?php echo esc_url( $wp_customize->get_return_url() ); ?>\">\n\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Close the Customizer and go back to the previous page' ); ?></span>\n\t\t\t</a>\n\t\t</div>\n\n\t\t<div id=\"widgets-right\" class=\"wp-clearfix\"><!-- For Widget Customizer, many widgets try to look for instances under div#widgets-right, so we have to add that ID to a container div in the Customizer for compat -->\n\t\t<div class=\"wp-full-overlay-sidebar-content\" tabindex=\"-1\">\n\t\t\t<div id=\"customize-info\" class=\"accordion-section customize-info\">\n\t\t\t\t<div class=\"accordion-section-title\">\n\t\t\t\t\t<span class=\"preview-notice\"><?php\n\t\t\t\t\t\techo sprintf( __( 'You are customizing %s' ), '<strong class=\"panel-title site-title\">' . get_bloginfo( 'name', 'display' ) . '</strong>' );\n\t\t\t\t\t?></span>\n\t\t\t\t\t<button type=\"button\" class=\"customize-help-toggle dashicons dashicons-editor-help\" aria-expanded=\"false\"><span class=\"screen-reader-text\"><?php _e( 'Help' ); ?></span></button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"customize-panel-description\"><?php\n\t\t\t\t\t_e( 'The Customizer allows you to preview changes to your site before publishing them. You can navigate to different pages on your site within the preview. Edit shortcuts are shown for some editable elements.' );\n\t\t\t\t?></div>\n\t\t\t</div>\n\n\t\t\t<div id=\"customize-theme-controls\">\n\t\t\t\t<ul class=\"customize-pane-parent\"><?php // Panels and sections are managed here via JavaScript ?></ul>\n\t\t\t</div>\n\t\t</div>\n\t\t</div>\n\n\t\t<div id=\"customize-footer-actions\" class=\"wp-full-overlay-footer\">\n\t\t\t<button type=\"button\" class=\"collapse-sidebar button\" aria-expanded=\"true\" aria-label=\"<?php echo esc_attr( _x( 'Hide Controls', 'label for hide controls button without length constraints' ) ); ?>\">\n\t\t\t\t<span class=\"collapse-sidebar-arrow\"></span>\n\t\t\t\t<span class=\"collapse-sidebar-label\"><?php _ex( 'Hide Controls', 'short (~12 characters) label for hide controls button' ); ?></span>\n\t\t\t</button>\n\t\t\t<?php $previewable_devices = $wp_customize->get_previewable_devices(); ?>\n\t\t\t<?php if ( ! empty( $previewable_devices ) ) : ?>\n\t\t\t<div class=\"devices-wrapper\">\n\t\t\t\t<div class=\"devices\">\n\t\t\t\t\t<?php foreach ( (array) $previewable_devices as $device => $settings ) : ?>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tif ( empty( $settings['label'] ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$active = ! empty( $settings['default'] );\n\t\t\t\t\t\t$class = 'preview-' . $device;\n\t\t\t\t\t\tif ( $active ) {\n\t\t\t\t\t\t\t$class .= ' active';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<button type=\"button\" class=\"<?php echo esc_attr( $class ); ?>\" aria-pressed=\"<?php echo esc_attr( $active ) ?>\" data-device=\"<?php echo esc_attr( $device ); ?>\">\n\t\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php echo esc_html( $settings['label'] ); ?></span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t<?php endforeach; ?>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<?php endif; ?>\n\t\t</div>\n\t</form>\n\t<div id=\"customize-preview\" class=\"wp-full-overlay-main\"></div>\n\t<?php\n\n\t/**\n\t * Prints templates, control scripts, and settings in the footer.\n\t *\n\t * @since 3.4.0\n\t */\n\tdo_action( 'customize_controls_print_footer_scripts' );\n\t?>\n</div>\n</body>\n</html>\n", "/* global _wpCustomizeHeader, _wpCustomizeBackground, _wpMediaViewsL10n, MediaElementPlayer */\n(function( exports, $ ){\n\tvar Container, focus, normalizedTransitionendEventName, api = wp.customize;\n\n\t/**\n\t * A Customizer Setting.\n\t *\n\t * A setting is WordPress data (theme mod, option, menu, etc.) that the user can\n\t * draft changes to in the Customizer.\n\t *\n\t * @see PHP class WP_Customize_Setting.\n\t *\n\t * @class\n\t * @augments wp.customize.Value\n\t * @augments wp.customize.Class\n\t *\n\t * @param {object} id                The Setting ID.\n\t * @param {object} value             The initial value of the setting.\n\t * @param {object} options.previewer The Previewer instance to sync with.\n\t * @param {object} options.transport The transport to use for previewing. Supports 'refresh' and 'postMessage'.\n\t * @param {object} options.dirty\n\t */\n\tapi.Setting = api.Value.extend({\n\t\tinitialize: function( id, value, options ) {\n\t\t\tvar setting = this;\n\t\t\tapi.Value.prototype.initialize.call( setting, value, options );\n\n\t\t\tsetting.id = id;\n\t\t\tsetting.transport = setting.transport || 'refresh';\n\t\t\tsetting._dirty = options.dirty || false;\n\t\t\tsetting.notifications = new api.Values({ defaultConstructor: api.Notification });\n\n\t\t\t// Whenever the setting's value changes, refresh the preview.\n\t\t\tsetting.bind( setting.preview );\n\t\t},\n\n\t\t/**\n\t\t * Refresh the preview, respective of the setting's refresh policy.\n\t\t *\n\t\t * If the preview hasn't sent a keep-alive message and is likely\n\t\t * disconnected by having navigated to a non-allowed URL, then the\n\t\t * refresh transport will be forced when postMessage is the transport.\n\t\t * Note that postMessage does not throw an error when the recipient window\n\t\t * fails to match the origin window, so using try/catch around the\n\t\t * previewer.send() call to then fallback to refresh will not work.\n\t\t *\n\t\t * @since 3.4.0\n\t\t * @access public\n\t\t *\n\t\t * @returns {void}\n\t\t */\n\t\tpreview: function() {\n\t\t\tvar setting = this, transport;\n\t\t\ttransport = setting.transport;\n\n\t\t\tif ( 'postMessage' === transport && ! api.state( 'previewerAlive' ).get() ) {\n\t\t\t\ttransport = 'refresh';\n\t\t\t}\n\n\t\t\tif ( 'postMessage' === transport ) {\n\t\t\t\tsetting.previewer.send( 'setting', [ setting.id, setting() ] );\n\t\t\t} else if ( 'refresh' === transport ) {\n\t\t\t\tsetting.previewer.refresh();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Find controls associated with this setting.\n\t\t *\n\t\t * @since 4.6.0\n\t\t * @returns {wp.customize.Control[]} Controls associated with setting.\n\t\t */\n\t\tfindControls: function() {\n\t\t\tvar setting = this, controls = [];\n\t\t\tapi.control.each( function( control ) {\n\t\t\t\t_.each( control.settings, function( controlSetting ) {\n\t\t\t\t\tif ( controlSetting.id === setting.id ) {\n\t\t\t\t\t\tcontrols.push( control );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\t\treturn controls;\n\t\t}\n\t});\n\n\t/**\n\t * Current change count.\n\t *\n\t * @since 4.7.0\n\t * @type {number}\n\t * @protected\n\t */\n\tapi._latestRevision = 0;\n\n\t/**\n\t * Last revision that was saved.\n\t *\n\t * @since 4.7.0\n\t * @type {number}\n\t * @protected\n\t */\n\tapi._lastSavedRevision = 0;\n\n\t/**\n\t * Latest revisions associated with the updated setting.\n\t *\n\t * @since 4.7.0\n\t * @type {object}\n\t * @protected\n\t */\n\tapi._latestSettingRevisions = {};\n\n\t/*\n\t * Keep track of the revision associated with each updated setting so that\n\t * requestChangesetUpdate knows which dirty settings to include. Also, once\n\t * ready is triggered and all initial settings have been added, increment\n\t * revision for each newly-created initially-dirty setting so that it will\n\t * also be included in changeset update requests.\n\t */\n\tapi.bind( 'change', function incrementChangedSettingRevision( setting ) {\n\t\tapi._latestRevision += 1;\n\t\tapi._latestSettingRevisions[ setting.id ] = api._latestRevision;\n\t} );\n\tapi.bind( 'ready', function() {\n\t\tapi.bind( 'add', function incrementCreatedSettingRevision( setting ) {\n\t\t\tif ( setting._dirty ) {\n\t\t\t\tapi._latestRevision += 1;\n\t\t\t\tapi._latestSettingRevisions[ setting.id ] = api._latestRevision;\n\t\t\t}\n\t\t} );\n\t} );\n\n\t/**\n\t * Get the dirty setting values.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param {object} [options] Options.\n\t * @param {boolean} [options.unsaved=false] Whether only values not saved yet into a changeset will be returned (differential changes).\n\t * @returns {object} Dirty setting values.\n\t */\n\tapi.dirtyValues = function dirtyValues( options ) {\n\t\tvar values = {};\n\t\tapi.each( function( setting ) {\n\t\t\tvar settingRevision;\n\n\t\t\tif ( ! setting._dirty ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsettingRevision = api._latestSettingRevisions[ setting.id ];\n\n\t\t\t// Skip including settings that have already been included in the changeset, if only requesting unsaved.\n\t\t\tif ( api.state( 'changesetStatus' ).get() && ( options && options.unsaved ) && ( _.isUndefined( settingRevision ) || settingRevision <= api._lastSavedRevision ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalues[ setting.id ] = setting.get();\n\t\t} );\n\t\treturn values;\n\t};\n\n\t/**\n\t * Request updates to the changeset.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param {object} [changes] Mapping of setting IDs to setting params each normally including a value property, or mapping to null.\n\t *                           If not provided, then the changes will still be obtained from unsaved dirty settings.\n\t * @returns {jQuery.Promise} Promise resolving with the response data.\n\t */\n\tapi.requestChangesetUpdate = function requestChangesetUpdate( changes ) {\n\t\tvar deferred, request, submittedChanges = {}, data;\n\t\tdeferred = new $.Deferred();\n\n\t\tif ( changes ) {\n\t\t\t_.extend( submittedChanges, changes );\n\t\t}\n\n\t\t// Ensure all revised settings (changes pending save) are also included, but not if marked for deletion in changes.\n\t\t_.each( api.dirtyValues( { unsaved: true } ), function( dirtyValue, settingId ) {\n\t\t\tif ( ! changes || null !== changes[ settingId ] ) {\n\t\t\t\tsubmittedChanges[ settingId ] = _.extend(\n\t\t\t\t\t{},\n\t\t\t\t\tsubmittedChanges[ settingId ] || {},\n\t\t\t\t\t{ value: dirtyValue }\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t\t// Short-circuit when there are no pending changes.\n\t\tif ( _.isEmpty( submittedChanges ) ) {\n\t\t\tdeferred.resolve( {} );\n\t\t\treturn deferred.promise();\n\t\t}\n\n\t\t// Make sure that publishing a changeset waits for all changeset update requests to complete.\n\t\tapi.state( 'processing' ).set( api.state( 'processing' ).get() + 1 );\n\t\tdeferred.always( function() {\n\t\t\tapi.state( 'processing' ).set( api.state( 'processing' ).get() - 1 );\n\t\t} );\n\n\t\t// Allow plugins to attach additional params to the settings.\n\t\tapi.trigger( 'changeset-save', submittedChanges );\n\n\t\t// Ensure that if any plugins add data to save requests by extending query() that they get included here.\n\t\tdata = api.previewer.query( { excludeCustomizedSaved: true } );\n\t\tdelete data.customized; // Being sent in customize_changeset_data instead.\n\t\t_.extend( data, {\n\t\t\tnonce: api.settings.nonce.save,\n\t\t\tcustomize_theme: api.settings.theme.stylesheet,\n\t\t\tcustomize_changeset_data: JSON.stringify( submittedChanges )\n\t\t} );\n\n\t\trequest = wp.ajax.post( 'customize_save', data );\n\n\t\trequest.done( function requestChangesetUpdateDone( data ) {\n\t\t\tvar savedChangesetValues = {};\n\n\t\t\t// Ensure that all settings updated subsequently will be included in the next changeset update request.\n\t\t\tapi._lastSavedRevision = Math.max( api._latestRevision, api._lastSavedRevision );\n\n\t\t\tapi.state( 'changesetStatus' ).set( data.changeset_status );\n\t\t\tdeferred.resolve( data );\n\t\t\tapi.trigger( 'changeset-saved', data );\n\n\t\t\tif ( data.setting_validities ) {\n\t\t\t\t_.each( data.setting_validities, function( validity, settingId ) {\n\t\t\t\t\tif ( true === validity && _.isObject( submittedChanges[ settingId ] ) && ! _.isUndefined( submittedChanges[ settingId ].value ) ) {\n\t\t\t\t\t\tsavedChangesetValues[ settingId ] = submittedChanges[ settingId ].value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tapi.previewer.send( 'changeset-saved', _.extend( {}, data, { saved_changeset_values: savedChangesetValues } ) );\n\t\t} );\n\t\trequest.fail( function requestChangesetUpdateFail( data ) {\n\t\t\tdeferred.reject( data );\n\t\t\tapi.trigger( 'changeset-error', data );\n\t\t} );\n\t\trequest.always( function( data ) {\n\t\t\tif ( data.setting_validities ) {\n\t\t\t\tapi._handleSettingValidities( {\n\t\t\t\t\tsettingValidities: data.setting_validities\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\treturn deferred.promise();\n\t};\n\n\t/**\n\t * Watch all changes to Value properties, and bubble changes to parent Values instance\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {wp.customize.Class} instance\n\t * @param {Array}              properties  The names of the Value instances to watch.\n\t */\n\tapi.utils.bubbleChildValueChanges = function ( instance, properties ) {\n\t\t$.each( properties, function ( i, key ) {\n\t\t\tinstance[ key ].bind( function ( to, from ) {\n\t\t\t\tif ( instance.parent && to !== from ) {\n\t\t\t\t\tinstance.parent.trigger( 'change', instance );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t};\n\n\t/**\n\t * Expand a panel, section, or control and focus on the first focusable element.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {Object}   [params]\n\t * @param {Function} [params.completeCallback]\n\t */\n\tfocus = function ( params ) {\n\t\tvar construct, completeCallback, focus, focusElement;\n\t\tconstruct = this;\n\t\tparams = params || {};\n\t\tfocus = function () {\n\t\t\tvar focusContainer;\n\t\t\tif ( ( construct.extended( api.Panel ) || construct.extended( api.Section ) ) && construct.expanded && construct.expanded() ) {\n\t\t\t\tfocusContainer = construct.contentContainer;\n\t\t\t} else {\n\t\t\t\tfocusContainer = construct.container;\n\t\t\t}\n\n\t\t\tfocusElement = focusContainer.find( '.control-focus:first' );\n\t\t\tif ( 0 === focusElement.length ) {\n\t\t\t\t// Note that we can't use :focusable due to a jQuery UI issue. See: https://github.com/jquery/jquery-ui/pull/1583\n\t\t\t\tfocusElement = focusContainer.find( 'input, select, textarea, button, object, a[href], [tabindex]' ).filter( ':visible' ).first();\n\t\t\t}\n\t\t\tfocusElement.focus();\n\t\t};\n\t\tif ( params.completeCallback ) {\n\t\t\tcompleteCallback = params.completeCallback;\n\t\t\tparams.completeCallback = function () {\n\t\t\t\tfocus();\n\t\t\t\tcompleteCallback();\n\t\t\t};\n\t\t} else {\n\t\t\tparams.completeCallback = focus;\n\t\t}\n\n\t\tapi.state( 'paneVisible' ).set( true );\n\t\tif ( construct.expand ) {\n\t\t\tconstruct.expand( params );\n\t\t} else {\n\t\t\tparams.completeCallback();\n\t\t}\n\t};\n\n\t/**\n\t * Stable sort for Panels, Sections, and Controls.\n\t *\n\t * If a.priority() === b.priority(), then sort by their respective params.instanceNumber.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {(wp.customize.Panel|wp.customize.Section|wp.customize.Control)} a\n\t * @param {(wp.customize.Panel|wp.customize.Section|wp.customize.Control)} b\n\t * @returns {Number}\n\t */\n\tapi.utils.prioritySort = function ( a, b ) {\n\t\tif ( a.priority() === b.priority() && typeof a.params.instanceNumber === 'number' && typeof b.params.instanceNumber === 'number' ) {\n\t\t\treturn a.params.instanceNumber - b.params.instanceNumber;\n\t\t} else {\n\t\t\treturn a.priority() - b.priority();\n\t\t}\n\t};\n\n\t/**\n\t * Return whether the supplied Event object is for a keydown event but not the Enter key.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {jQuery.Event} event\n\t * @returns {boolean}\n\t */\n\tapi.utils.isKeydownButNotEnterEvent = function ( event ) {\n\t\treturn ( 'keydown' === event.type && 13 !== event.which );\n\t};\n\n\t/**\n\t * Return whether the two lists of elements are the same and are in the same order.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {Array|jQuery} listA\n\t * @param {Array|jQuery} listB\n\t * @returns {boolean}\n\t */\n\tapi.utils.areElementListsEqual = function ( listA, listB ) {\n\t\tvar equal = (\n\t\t\tlistA.length === listB.length && // if lists are different lengths, then naturally they are not equal\n\t\t\t-1 === _.indexOf( _.map( // are there any false values in the list returned by map?\n\t\t\t\t_.zip( listA, listB ), // pair up each element between the two lists\n\t\t\t\tfunction ( pair ) {\n\t\t\t\t\treturn $( pair[0] ).is( pair[1] ); // compare to see if each pair are equal\n\t\t\t\t}\n\t\t\t), false ) // check for presence of false in map's return value\n\t\t);\n\t\treturn equal;\n\t};\n\n\t/**\n\t * Return browser supported `transitionend` event name.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @returns {string|null} Normalized `transitionend` event name or null if CSS transitions are not supported.\n\t */\n\tnormalizedTransitionendEventName = (function () {\n\t\tvar el, transitions, prop;\n\t\tel = document.createElement( 'div' );\n\t\ttransitions = {\n\t\t\t'transition'      : 'transitionend',\n\t\t\t'OTransition'     : 'oTransitionEnd',\n\t\t\t'MozTransition'   : 'transitionend',\n\t\t\t'WebkitTransition': 'webkitTransitionEnd'\n\t\t};\n\t\tprop = _.find( _.keys( transitions ), function( prop ) {\n\t\t\treturn ! _.isUndefined( el.style[ prop ] );\n\t\t} );\n\t\tif ( prop ) {\n\t\t\treturn transitions[ prop ];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t})();\n\n\t/**\n\t * Base class for Panel and Section.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @class\n\t * @augments wp.customize.Class\n\t */\n\tContainer = api.Class.extend({\n\t\tdefaultActiveArguments: { duration: 'fast', completeCallback: $.noop },\n\t\tdefaultExpandedArguments: { duration: 'fast', completeCallback: $.noop },\n\t\tcontainerType: 'container',\n\t\tdefaults: {\n\t\t\ttitle: '',\n\t\t\tdescription: '',\n\t\t\tpriority: 100,\n\t\t\ttype: 'default',\n\t\t\tcontent: null,\n\t\t\tactive: true,\n\t\t\tinstanceNumber: null\n\t\t},\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {string}         id - The ID for the container.\n\t\t * @param {object}         options - Object containing one property: params.\n\t\t * @param {object}         options.params - Object containing the following properties.\n\t\t * @param {string}         options.params.title - Title shown when panel is collapsed and expanded.\n\t\t * @param {string=}        [options.params.description] - Description shown at the top of the panel.\n\t\t * @param {number=100}     [options.params.priority] - The sort priority for the panel.\n\t\t * @param {string=default} [options.params.type] - The type of the panel. See wp.customize.panelConstructor.\n\t\t * @param {string=}        [options.params.content] - The markup to be used for the panel container. If empty, a JS template is used.\n\t\t * @param {boolean=true}   [options.params.active] - Whether the panel is active or not.\n\t\t */\n\t\tinitialize: function ( id, options ) {\n\t\t\tvar container = this;\n\t\t\tcontainer.id = id;\n\t\t\toptions = options || {};\n\n\t\t\toptions.params = _.defaults(\n\t\t\t\toptions.params || {},\n\t\t\t\tcontainer.defaults\n\t\t\t);\n\n\t\t\t$.extend( container, options );\n\t\t\tcontainer.templateSelector = 'customize-' + container.containerType + '-' + container.params.type;\n\t\t\tcontainer.container = $( container.params.content );\n\t\t\tif ( 0 === container.container.length ) {\n\t\t\t\tcontainer.container = $( container.getContainer() );\n\t\t\t}\n\t\t\tcontainer.headContainer = container.container;\n\t\t\tcontainer.contentContainer = container.getContent();\n\t\t\tcontainer.container = container.container.add( container.contentContainer );\n\n\t\t\tcontainer.deferred = {\n\t\t\t\tembedded: new $.Deferred()\n\t\t\t};\n\t\t\tcontainer.priority = new api.Value();\n\t\t\tcontainer.active = new api.Value();\n\t\t\tcontainer.activeArgumentsQueue = [];\n\t\t\tcontainer.expanded = new api.Value();\n\t\t\tcontainer.expandedArgumentsQueue = [];\n\n\t\t\tcontainer.active.bind( function ( active ) {\n\t\t\t\tvar args = container.activeArgumentsQueue.shift();\n\t\t\t\targs = $.extend( {}, container.defaultActiveArguments, args );\n\t\t\t\tactive = ( active && container.isContextuallyActive() );\n\t\t\t\tcontainer.onChangeActive( active, args );\n\t\t\t});\n\t\t\tcontainer.expanded.bind( function ( expanded ) {\n\t\t\t\tvar args = container.expandedArgumentsQueue.shift();\n\t\t\t\targs = $.extend( {}, container.defaultExpandedArguments, args );\n\t\t\t\tcontainer.onChangeExpanded( expanded, args );\n\t\t\t});\n\n\t\t\tcontainer.deferred.embedded.done( function () {\n\t\t\t\tcontainer.attachEvents();\n\t\t\t});\n\n\t\t\tapi.utils.bubbleChildValueChanges( container, [ 'priority', 'active' ] );\n\n\t\t\tcontainer.priority.set( container.params.priority );\n\t\t\tcontainer.active.set( container.params.active );\n\t\t\tcontainer.expanded.set( false );\n\t\t},\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @abstract\n\t\t */\n\t\tready: function() {},\n\n\t\t/**\n\t\t * Get the child models associated with this parent, sorting them by their priority Value.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {String} parentType\n\t\t * @param {String} childType\n\t\t * @returns {Array}\n\t\t */\n\t\t_children: function ( parentType, childType ) {\n\t\t\tvar parent = this,\n\t\t\t\tchildren = [];\n\t\t\tapi[ childType ].each( function ( child ) {\n\t\t\t\tif ( child[ parentType ].get() === parent.id ) {\n\t\t\t\t\tchildren.push( child );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tchildren.sort( api.utils.prioritySort );\n\t\t\treturn children;\n\t\t},\n\n\t\t/**\n\t\t * To override by subclass, to return whether the container has active children.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @abstract\n\t\t */\n\t\tisContextuallyActive: function () {\n\t\t\tthrow new Error( 'Container.isContextuallyActive() must be overridden in a subclass.' );\n\t\t},\n\n\t\t/**\n\t\t * Active state change handler.\n\t\t *\n\t\t * Shows the container if it is active, hides it if not.\n\t\t *\n\t\t * To override by subclass, update the container's UI to reflect the provided active state.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {boolean}  active - The active state to transiution to.\n\t\t * @param {Object}   [args] - Args.\n\t\t * @param {Object}   [args.duration] - The duration for the slideUp/slideDown animation.\n\t\t * @param {boolean}  [args.unchanged] - Whether the state is already known to not be changed, and so short-circuit with calling completeCallback early.\n\t\t * @param {Function} [args.completeCallback] - Function to call when the slideUp/slideDown has completed.\n\t\t */\n\t\tonChangeActive: function( active, args ) {\n\t\t\tvar construct = this,\n\t\t\t\theadContainer = construct.headContainer,\n\t\t\t\tduration, expandedOtherPanel;\n\n\t\t\tif ( args.unchanged ) {\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tduration = ( 'resolved' === api.previewer.deferred.active.state() ? args.duration : 0 );\n\n\t\t\tif ( construct.extended( api.Panel ) ) {\n\t\t\t\t// If this is a panel is not currently expanded but another panel is expanded, do not animate.\n\t\t\t\tapi.panel.each(function ( panel ) {\n\t\t\t\t\tif ( panel !== construct && panel.expanded() ) {\n\t\t\t\t\t\texpandedOtherPanel = panel;\n\t\t\t\t\t\tduration = 0;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Collapse any expanded sections inside of this panel first before deactivating.\n\t\t\t\tif ( ! active ) {\n\t\t\t\t\t_.each( construct.sections(), function( section ) {\n\t\t\t\t\t\tsection.collapse( { duration: 0 } );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! $.contains( document, headContainer.get( 0 ) ) ) {\n\t\t\t\t// If the element is not in the DOM, then jQuery.fn.slideUp() does nothing. In this case, a hard toggle is required instead.\n\t\t\t\theadContainer.toggle( active );\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t} else if ( active ) {\n\t\t\t\theadContainer.slideDown( duration, args.completeCallback );\n\t\t\t} else {\n\t\t\t\tif ( construct.expanded() ) {\n\t\t\t\t\tconstruct.collapse({\n\t\t\t\t\t\tduration: duration,\n\t\t\t\t\t\tcompleteCallback: function() {\n\t\t\t\t\t\t\theadContainer.slideUp( duration, args.completeCallback );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\theadContainer.slideUp( duration, args.completeCallback );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @params {Boolean} active\n\t\t * @param {Object}   [params]\n\t\t * @returns {Boolean} false if state already applied\n\t\t */\n\t\t_toggleActive: function ( active, params ) {\n\t\t\tvar self = this;\n\t\t\tparams = params || {};\n\t\t\tif ( ( active && this.active.get() ) || ( ! active && ! this.active.get() ) ) {\n\t\t\t\tparams.unchanged = true;\n\t\t\t\tself.onChangeActive( self.active.get(), params );\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tparams.unchanged = false;\n\t\t\t\tthis.activeArgumentsQueue.push( params );\n\t\t\t\tthis.active.set( active );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already active\n\t\t */\n\t\tactivate: function ( params ) {\n\t\t\treturn this._toggleActive( true, params );\n\t\t},\n\n\t\t/**\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already inactive\n\t\t */\n\t\tdeactivate: function ( params ) {\n\t\t\treturn this._toggleActive( false, params );\n\t\t},\n\n\t\t/**\n\t\t * To override by subclass, update the container's UI to reflect the provided active state.\n\t\t * @abstract\n\t\t */\n\t\tonChangeExpanded: function () {\n\t\t\tthrow new Error( 'Must override with subclass.' );\n\t\t},\n\n\t\t/**\n\t\t * Handle the toggle logic for expand/collapse.\n\t\t *\n\t\t * @param {Boolean}  expanded - The new state to apply.\n\t\t * @param {Object}   [params] - Object containing options for expand/collapse.\n\t\t * @param {Function} [params.completeCallback] - Function to call when expansion/collapse is complete.\n\t\t * @returns {Boolean} false if state already applied or active state is false\n\t\t */\n\t\t_toggleExpanded: function( expanded, params ) {\n\t\t\tvar instance = this, previousCompleteCallback;\n\t\t\tparams = params || {};\n\t\t\tpreviousCompleteCallback = params.completeCallback;\n\n\t\t\t// Short-circuit expand() if the instance is not active.\n\t\t\tif ( expanded && ! instance.active() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tapi.state( 'paneVisible' ).set( true );\n\t\t\tparams.completeCallback = function() {\n\t\t\t\tif ( previousCompleteCallback ) {\n\t\t\t\t\tpreviousCompleteCallback.apply( instance, arguments );\n\t\t\t\t}\n\t\t\t\tif ( expanded ) {\n\t\t\t\t\tinstance.container.trigger( 'expanded' );\n\t\t\t\t} else {\n\t\t\t\t\tinstance.container.trigger( 'collapsed' );\n\t\t\t\t}\n\t\t\t};\n\t\t\tif ( ( expanded && instance.expanded.get() ) || ( ! expanded && ! instance.expanded.get() ) ) {\n\t\t\t\tparams.unchanged = true;\n\t\t\t\tinstance.onChangeExpanded( instance.expanded.get(), params );\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tparams.unchanged = false;\n\t\t\t\tinstance.expandedArgumentsQueue.push( params );\n\t\t\t\tinstance.expanded.set( expanded );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already expanded or if inactive.\n\t\t */\n\t\texpand: function ( params ) {\n\t\t\treturn this._toggleExpanded( true, params );\n\t\t},\n\n\t\t/**\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already collapsed.\n\t\t */\n\t\tcollapse: function ( params ) {\n\t\t\treturn this._toggleExpanded( false, params );\n\t\t},\n\n\t\t/**\n\t\t * Animate container state change if transitions are supported by the browser.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @private\n\t\t *\n\t\t * @param {function} completeCallback Function to be called after transition is completed.\n\t\t * @returns {void}\n\t\t */\n\t\t_animateChangeExpanded: function( completeCallback ) {\n\t\t\t// Return if CSS transitions are not supported.\n\t\t\tif ( ! normalizedTransitionendEventName ) {\n\t\t\t\tif ( completeCallback ) {\n\t\t\t\t\tcompleteCallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar construct = this,\n\t\t\t\tcontent = construct.contentContainer,\n\t\t\t\toverlay = content.closest( '.wp-full-overlay' ),\n\t\t\t\telements, transitionEndCallback, transitionParentPane;\n\n\t\t\t// Determine set of elements that are affected by the animation.\n\t\t\telements = overlay.add( content );\n\n\t\t\tif ( ! construct.panel || '' === construct.panel() ) {\n\t\t\t\ttransitionParentPane = true;\n\t\t\t} else if ( api.panel( construct.panel() ).contentContainer.hasClass( 'skip-transition' ) ) {\n\t\t\t\ttransitionParentPane = true;\n\t\t\t} else {\n\t\t\t\ttransitionParentPane = false;\n\t\t\t}\n\t\t\tif ( transitionParentPane ) {\n\t\t\t\telements = elements.add( '#customize-info, .customize-pane-parent' );\n\t\t\t}\n\n\t\t\t// Handle `transitionEnd` event.\n\t\t\ttransitionEndCallback = function( e ) {\n\t\t\t\tif ( 2 !== e.eventPhase || ! $( e.target ).is( content ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcontent.off( normalizedTransitionendEventName, transitionEndCallback );\n\t\t\t\telements.removeClass( 'busy' );\n\t\t\t\tif ( completeCallback ) {\n\t\t\t\t\tcompleteCallback();\n\t\t\t\t}\n\t\t\t};\n\t\t\tcontent.on( normalizedTransitionendEventName, transitionEndCallback );\n\t\t\telements.addClass( 'busy' );\n\n\t\t\t// Prevent screen flicker when pane has been scrolled before expanding.\n\t\t\t_.defer( function() {\n\t\t\t\tvar container = content.closest( '.wp-full-overlay-sidebar-content' ),\n\t\t\t\t\tcurrentScrollTop = container.scrollTop(),\n\t\t\t\t\tpreviousScrollTop = content.data( 'previous-scrollTop' ) || 0,\n\t\t\t\t\texpanded = construct.expanded();\n\n\t\t\t\tif ( expanded && 0 < currentScrollTop ) {\n\t\t\t\t\tcontent.css( 'top', currentScrollTop + 'px' );\n\t\t\t\t\tcontent.data( 'previous-scrollTop', currentScrollTop );\n\t\t\t\t} else if ( ! expanded && 0 < currentScrollTop + previousScrollTop ) {\n\t\t\t\t\tcontent.css( 'top', previousScrollTop - currentScrollTop + 'px' );\n\t\t\t\t\tcontainer.scrollTop( previousScrollTop );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Bring the container into view and then expand this and bring it into view\n\t\t * @param {Object} [params]\n\t\t */\n\t\tfocus: focus,\n\n\t\t/**\n\t\t * Return the container html, generated from its JS template, if it exists.\n\t\t *\n\t\t * @since 4.3.0\n\t\t */\n\t\tgetContainer: function () {\n\t\t\tvar template,\n\t\t\t\tcontainer = this;\n\n\t\t\tif ( 0 !== $( '#tmpl-' + container.templateSelector ).length ) {\n\t\t\t\ttemplate = wp.template( container.templateSelector );\n\t\t\t} else {\n\t\t\t\ttemplate = wp.template( 'customize-' + container.containerType + '-default' );\n\t\t\t}\n\t\t\tif ( template && container.container ) {\n\t\t\t\treturn $.trim( template( container.params ) );\n\t\t\t}\n\n\t\t\treturn '<li></li>';\n\t\t},\n\n\t\t/**\n\t\t * Find content element which is displayed when the section is expanded.\n\t\t *\n\t\t * After a construct is initialized, the return value will be available via the `contentContainer` property.\n\t\t * By default the element will be related it to the parent container with `aria-owns` and detached.\n\t\t * Custom panels and sections (such as the `NewMenuSection`) that do not have a sliding pane should\n\t\t * just return the content element without needing to add the `aria-owns` element or detach it from\n\t\t * the container. Such non-sliding pane custom sections also need to override the `onChangeExpanded`\n\t\t * method to handle animating the panel/section into and out of view.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access public\n\t\t *\n\t\t * @returns {jQuery} Detached content element.\n\t\t */\n\t\tgetContent: function() {\n\t\t\tvar construct = this,\n\t\t\t\tcontainer = construct.container,\n\t\t\t\tcontent = container.find( '.accordion-section-content, .control-panel-content' ).first(),\n\t\t\t\tcontentId = 'sub-' + container.attr( 'id' ),\n\t\t\t\townedElements = contentId,\n\t\t\t\talreadyOwnedElements = container.attr( 'aria-owns' );\n\n\t\t\tif ( alreadyOwnedElements ) {\n\t\t\t\townedElements = ownedElements + ' ' + alreadyOwnedElements;\n\t\t\t}\n\t\t\tcontainer.attr( 'aria-owns', ownedElements );\n\n\t\t\treturn content.detach().attr( {\n\t\t\t\t'id': contentId,\n\t\t\t\t'class': 'customize-pane-child ' + content.attr( 'class' ) + ' ' + container.attr( 'class' )\n\t\t\t} );\n\t\t}\n\t});\n\n\t/**\n\t * @since 4.1.0\n\t *\n\t * @class\n\t * @augments wp.customize.Class\n\t */\n\tapi.Section = Container.extend({\n\t\tcontainerType: 'section',\n\t\tdefaults: {\n\t\t\ttitle: '',\n\t\t\tdescription: '',\n\t\t\tpriority: 100,\n\t\t\ttype: 'default',\n\t\t\tcontent: null,\n\t\t\tactive: true,\n\t\t\tinstanceNumber: null,\n\t\t\tpanel: null,\n\t\t\tcustomizeAction: ''\n\t\t},\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {string}         id - The ID for the section.\n\t\t * @param {object}         options - Object containing one property: params.\n\t\t * @param {object}         options.params - Object containing the following properties.\n\t\t * @param {string}         options.params.title - Title shown when section is collapsed and expanded.\n\t\t * @param {string=}        [options.params.description] - Description shown at the top of the section.\n\t\t * @param {number=100}     [options.params.priority] - The sort priority for the section.\n\t\t * @param {string=default} [options.params.type] - The type of the section. See wp.customize.sectionConstructor.\n\t\t * @param {string=}        [options.params.content] - The markup to be used for the section container. If empty, a JS template is used.\n\t\t * @param {boolean=true}   [options.params.active] - Whether the section is active or not.\n\t\t * @param {string}         options.params.panel - The ID for the panel this section is associated with.\n\t\t * @param {string=}        [options.params.customizeAction] - Additional context information shown before the section title when expanded.\n\t\t */\n\t\tinitialize: function ( id, options ) {\n\t\t\tvar section = this;\n\t\t\tContainer.prototype.initialize.call( section, id, options );\n\n\t\t\tsection.id = id;\n\t\t\tsection.panel = new api.Value();\n\t\t\tsection.panel.bind( function ( id ) {\n\t\t\t\t$( section.headContainer ).toggleClass( 'control-subsection', !! id );\n\t\t\t});\n\t\t\tsection.panel.set( section.params.panel || '' );\n\t\t\tapi.utils.bubbleChildValueChanges( section, [ 'panel' ] );\n\n\t\t\tsection.embed();\n\t\t\tsection.deferred.embedded.done( function () {\n\t\t\t\tsection.ready();\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Embed the container in the DOM when any parent panel is ready.\n\t\t *\n\t\t * @since 4.1.0\n\t\t */\n\t\tembed: function () {\n\t\t\tvar inject,\n\t\t\t\tsection = this,\n\t\t\t\tcontainer = $( '#customize-theme-controls' );\n\n\t\t\t// Watch for changes to the panel state\n\t\t\tinject = function ( panelId ) {\n\t\t\t\tvar parentContainer;\n\t\t\t\tif ( panelId ) {\n\t\t\t\t\t// The panel has been supplied, so wait until the panel object is registered\n\t\t\t\t\tapi.panel( panelId, function ( panel ) {\n\t\t\t\t\t\t// The panel has been registered, wait for it to become ready/initialized\n\t\t\t\t\t\tpanel.deferred.embedded.done( function () {\n\t\t\t\t\t\t\tparentContainer = panel.contentContainer;\n\t\t\t\t\t\t\tif ( ! section.headContainer.parent().is( parentContainer ) ) {\n\t\t\t\t\t\t\t\tparentContainer.append( section.headContainer );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( ! section.contentContainer.parent().is( section.headContainer ) ) {\n\t\t\t\t\t\t\t\tcontainer.append( section.contentContainer );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsection.deferred.embedded.resolve();\n\t\t\t\t\t\t});\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\t// There is no panel, so embed the section in the root of the customizer\n\t\t\t\t\tparentContainer = $( '.customize-pane-parent' ); // @todo This should be defined elsewhere, and to be configurable\n\t\t\t\t\tif ( ! section.headContainer.parent().is( parentContainer ) ) {\n\t\t\t\t\t\tparentContainer.append( section.headContainer );\n\t\t\t\t\t}\n\t\t\t\t\tif ( ! section.contentContainer.parent().is( section.headContainer ) ) {\n\t\t\t\t\t\tcontainer.append( section.contentContainer );\n\t\t\t\t\t}\n\t\t\t\t\tsection.deferred.embedded.resolve();\n\t\t\t\t}\n\t\t\t};\n\t\t\tsection.panel.bind( inject );\n\t\t\tinject( section.panel.get() ); // Since a section may never get a panel, assume that it won't ever get one\n\t\t},\n\n\t\t/**\n\t\t * Add behaviors for the accordion section.\n\t\t *\n\t\t * @since 4.1.0\n\t\t */\n\t\tattachEvents: function () {\n\t\t\tvar meta, content, section = this;\n\n\t\t\tif ( section.container.hasClass( 'cannot-expand' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Expand/Collapse accordion sections on click.\n\t\t\tsection.container.find( '.accordion-section-title, .customize-section-back' ).on( 'click keydown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tif ( section.expanded() ) {\n\t\t\t\t\tsection.collapse();\n\t\t\t\t} else {\n\t\t\t\t\tsection.expand();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// This is very similar to what is found for api.Panel.attachEvents().\n\t\t\tsection.container.find( '.customize-section-title .customize-help-toggle' ).on( 'click', function() {\n\n\t\t\t\tmeta = section.container.find( '.section-meta' );\n\t\t\t\tif ( meta.hasClass( 'cannot-expand' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcontent = meta.find( '.customize-section-description:first' );\n\t\t\t\tcontent.toggleClass( 'open' );\n\t\t\t\tcontent.slideToggle();\n\t\t\t\tcontent.attr( 'aria-expanded', function ( i, attr ) {\n\t\t\t\t\treturn 'true' === attr ? 'false' : 'true';\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Return whether this section has any active controls.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisContextuallyActive: function () {\n\t\t\tvar section = this,\n\t\t\t\tcontrols = section.controls(),\n\t\t\t\tactiveCount = 0;\n\t\t\t_( controls ).each( function ( control ) {\n\t\t\t\tif ( control.active() ) {\n\t\t\t\t\tactiveCount += 1;\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn ( activeCount !== 0 );\n\t\t},\n\n\t\t/**\n\t\t * Get the controls that are associated with this section, sorted by their priority Value.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @returns {Array}\n\t\t */\n\t\tcontrols: function () {\n\t\t\treturn this._children( 'section', 'control' );\n\t\t},\n\n\t\t/**\n\t\t * Update UI to reflect expanded state.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {Boolean} expanded\n\t\t * @param {Object}  args\n\t\t */\n\t\tonChangeExpanded: function ( expanded, args ) {\n\t\t\tvar section = this,\n\t\t\t\tcontainer = section.headContainer.closest( '.wp-full-overlay-sidebar-content' ),\n\t\t\t\tcontent = section.contentContainer,\n\t\t\t\toverlay = section.headContainer.closest( '.wp-full-overlay' ),\n\t\t\t\tbackBtn = content.find( '.customize-section-back' ),\n\t\t\t\tsectionTitle = section.headContainer.find( '.accordion-section-title' ).first(),\n\t\t\t\texpand, panel;\n\n\t\t\tif ( expanded && ! content.hasClass( 'open' ) ) {\n\n\t\t\t\tif ( args.unchanged ) {\n\t\t\t\t\texpand = args.completeCallback;\n\t\t\t\t} else {\n\t\t\t\t\texpand = $.proxy( function() {\n\t\t\t\t\t\tsection._animateChangeExpanded( function() {\n\t\t\t\t\t\t\tsectionTitle.attr( 'tabindex', '-1' );\n\t\t\t\t\t\t\tbackBtn.attr( 'tabindex', '0' );\n\n\t\t\t\t\t\t\tbackBtn.focus();\n\t\t\t\t\t\t\tcontent.css( 'top', '' );\n\t\t\t\t\t\t\tcontainer.scrollTop( 0 );\n\n\t\t\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tcontent.addClass( 'open' );\n\t\t\t\t\t\toverlay.addClass( 'section-open' );\n\t\t\t\t\t\tapi.state( 'expandedSection' ).set( section );\n\t\t\t\t\t}, this );\n\t\t\t\t}\n\n\t\t\t\tif ( ! args.allowMultiple ) {\n\t\t\t\t\tapi.section.each( function ( otherSection ) {\n\t\t\t\t\t\tif ( otherSection !== section ) {\n\t\t\t\t\t\t\totherSection.collapse( { duration: args.duration } );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif ( section.panel() ) {\n\t\t\t\t\tapi.panel( section.panel() ).expand({\n\t\t\t\t\t\tduration: args.duration,\n\t\t\t\t\t\tcompleteCallback: expand\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tapi.panel.each( function( panel ) {\n\t\t\t\t\t\tpanel.collapse();\n\t\t\t\t\t});\n\t\t\t\t\texpand();\n\t\t\t\t}\n\n\t\t\t} else if ( ! expanded && content.hasClass( 'open' ) ) {\n\t\t\t\tif ( section.panel() ) {\n\t\t\t\t\tpanel = api.panel( section.panel() );\n\t\t\t\t\tif ( panel.contentContainer.hasClass( 'skip-transition' ) ) {\n\t\t\t\t\t\tpanel.collapse();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsection._animateChangeExpanded( function() {\n\t\t\t\t\tbackBtn.attr( 'tabindex', '-1' );\n\t\t\t\t\tsectionTitle.attr( 'tabindex', '0' );\n\n\t\t\t\t\tsectionTitle.focus();\n\t\t\t\t\tcontent.css( 'top', '' );\n\n\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tcontent.removeClass( 'open' );\n\t\t\t\toverlay.removeClass( 'section-open' );\n\t\t\t\tif ( section === api.state( 'expandedSection' ).get() ) {\n\t\t\t\t\tapi.state( 'expandedSection' ).set( false );\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * wp.customize.ThemesSection\n\t *\n\t * Custom section for themes that functions similarly to a backwards panel,\n\t * and also handles the theme-details view rendering and navigation.\n\t *\n\t * @constructor\n\t * @augments wp.customize.Section\n\t * @augments wp.customize.Container\n\t */\n\tapi.ThemesSection = api.Section.extend({\n\t\tcurrentTheme: '',\n\t\toverlay: '',\n\t\ttemplate: '',\n\t\tscreenshotQueue: null,\n\t\t$window: $( window ),\n\n\t\t/**\n\t\t * @since 4.2.0\n\t\t */\n\t\tinitialize: function () {\n\t\t\tthis.$customizeSidebar = $( '.wp-full-overlay-sidebar-content:first' );\n\t\t\treturn api.Section.prototype.initialize.apply( this, arguments );\n\t\t},\n\n\t\t/**\n\t\t * @since 4.2.0\n\t\t */\n\t\tready: function () {\n\t\t\tvar section = this;\n\t\t\tsection.overlay = section.container.find( '.theme-overlay' );\n\t\t\tsection.template = wp.template( 'customize-themes-details-view' );\n\n\t\t\t// Bind global keyboard events.\n\t\t\tsection.container.on( 'keydown', function( event ) {\n\t\t\t\tif ( ! section.overlay.find( '.theme-wrap' ).is( ':visible' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Pressing the right arrow key fires a theme:next event\n\t\t\t\tif ( 39 === event.keyCode ) {\n\t\t\t\t\tsection.nextTheme();\n\t\t\t\t}\n\n\t\t\t\t// Pressing the left arrow key fires a theme:previous event\n\t\t\t\tif ( 37 === event.keyCode ) {\n\t\t\t\t\tsection.previousTheme();\n\t\t\t\t}\n\n\t\t\t\t// Pressing the escape key fires a theme:collapse event\n\t\t\t\tif ( 27 === event.keyCode ) {\n\t\t\t\t\tsection.closeDetails();\n\t\t\t\t\tevent.stopPropagation(); // Prevent section from being collapsed.\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t_.bindAll( this, 'renderScreenshots' );\n\t\t},\n\n\t\t/**\n\t\t * Override Section.isContextuallyActive method.\n\t\t *\n\t\t * Ignore the active states' of the contained theme controls, and just\n\t\t * use the section's own active state instead. This ensures empty search\n\t\t * results for themes to cause the section to become inactive.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisContextuallyActive: function () {\n\t\t\treturn this.active();\n\t\t},\n\n\t\t/**\n\t\t * @since 4.2.0\n\t\t */\n\t\tattachEvents: function () {\n\t\t\tvar section = this;\n\n\t\t\t// Expand/Collapse section/panel.\n\t\t\tsection.container.find( '.change-theme, .customize-theme' ).on( 'click keydown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tif ( section.expanded() ) {\n\t\t\t\t\tsection.collapse();\n\t\t\t\t} else {\n\t\t\t\t\tsection.expand();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Theme navigation in details view.\n\t\t\tsection.container.on( 'click keydown', '.left', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tsection.previousTheme();\n\t\t\t});\n\n\t\t\tsection.container.on( 'click keydown', '.right', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tsection.nextTheme();\n\t\t\t});\n\n\t\t\tsection.container.on( 'click keydown', '.theme-backdrop, .close', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tsection.closeDetails();\n\t\t\t});\n\n\t\t\tvar renderScreenshots = _.throttle( _.bind( section.renderScreenshots, this ), 100 );\n\t\t\tsection.container.on( 'input', '#themes-filter', function( event ) {\n\t\t\t\tvar count,\n\t\t\t\t\tterm = event.currentTarget.value.toLowerCase().trim().replace( '-', ' ' ),\n\t\t\t\t\tcontrols = section.controls();\n\n\t\t\t\t_.each( controls, function( control ) {\n\t\t\t\t\tcontrol.filter( term );\n\t\t\t\t});\n\n\t\t\t\trenderScreenshots();\n\n\t\t\t\t// Update theme count.\n\t\t\t\tcount = section.container.find( 'li.customize-control:visible' ).length;\n\t\t\t\tsection.container.find( '.theme-count' ).text( count );\n\t\t\t});\n\n\t\t\t// Pre-load the first 3 theme screenshots.\n\t\t\tapi.bind( 'ready', function () {\n\t\t\t\t_.each( section.controls().slice( 0, 3 ), function ( control ) {\n\t\t\t\t\tvar img, src = control.params.theme.screenshot[0];\n\t\t\t\t\tif ( src ) {\n\t\t\t\t\t\timg = new Image();\n\t\t\t\t\t\timg.src = src;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Update UI to reflect expanded state\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param {Boolean}  expanded\n\t\t * @param {Object}   args\n\t\t * @param {Boolean}  args.unchanged\n\t\t * @param {Callback} args.completeCallback\n\t\t */\n\t\tonChangeExpanded: function ( expanded, args ) {\n\n\t\t\t// Immediately call the complete callback if there were no changes\n\t\t\tif ( args.unchanged ) {\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Note: there is a second argument 'args' passed\n\t\t\tvar panel = this,\n\t\t\t\tsection = panel.contentContainer,\n\t\t\t\toverlay = section.closest( '.wp-full-overlay' ),\n\t\t\t\tcontainer = section.closest( '.wp-full-overlay-sidebar-content' ),\n\t\t\t\tcustomizeBtn = section.find( '.customize-theme' ),\n\t\t\t\tchangeBtn = panel.headContainer.find( '.change-theme' );\n\n\t\t\tif ( expanded && ! section.hasClass( 'current-panel' ) ) {\n\t\t\t\t// Collapse any sibling sections/panels\n\t\t\t\tapi.section.each( function ( otherSection ) {\n\t\t\t\t\tif ( otherSection !== panel ) {\n\t\t\t\t\t\totherSection.collapse( { duration: args.duration } );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tapi.panel.each( function ( otherPanel ) {\n\t\t\t\t\totherPanel.collapse( { duration: 0 } );\n\t\t\t\t});\n\n\t\t\t\tpanel._animateChangeExpanded( function() {\n\t\t\t\t\tchangeBtn.attr( 'tabindex', '-1' );\n\t\t\t\t\tcustomizeBtn.attr( 'tabindex', '0' );\n\n\t\t\t\t\tcustomizeBtn.focus();\n\t\t\t\t\tsection.css( 'top', '' );\n\t\t\t\t\tcontainer.scrollTop( 0 );\n\n\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\toverlay.addClass( 'in-themes-panel' );\n\t\t\t\tsection.addClass( 'current-panel' );\n\t\t\t\t_.delay( panel.renderScreenshots, 10 ); // Wait for the controls\n\t\t\t\tpanel.$customizeSidebar.on( 'scroll.customize-themes-section', _.throttle( panel.renderScreenshots, 300 ) );\n\n\t\t\t} else if ( ! expanded && section.hasClass( 'current-panel' ) ) {\n\t\t\t\tpanel._animateChangeExpanded( function() {\n\t\t\t\t\tchangeBtn.attr( 'tabindex', '0' );\n\t\t\t\t\tcustomizeBtn.attr( 'tabindex', '-1' );\n\n\t\t\t\t\tchangeBtn.focus();\n\t\t\t\t\tsection.css( 'top', '' );\n\n\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\toverlay.removeClass( 'in-themes-panel' );\n\t\t\t\tsection.removeClass( 'current-panel' );\n\t\t\t\tpanel.$customizeSidebar.off( 'scroll.customize-themes-section' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Render control's screenshot if the control comes into view.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\trenderScreenshots: function( ) {\n\t\t\tvar section = this;\n\n\t\t\t// Fill queue initially.\n\t\t\tif ( section.screenshotQueue === null ) {\n\t\t\t\tsection.screenshotQueue = section.controls();\n\t\t\t}\n\n\t\t\t// Are all screenshots rendered?\n\t\t\tif ( ! section.screenshotQueue.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsection.screenshotQueue = _.filter( section.screenshotQueue, function( control ) {\n\t\t\t\tvar $imageWrapper = control.container.find( '.theme-screenshot' ),\n\t\t\t\t\t$image = $imageWrapper.find( 'img' );\n\n\t\t\t\tif ( ! $image.length ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif ( $image.is( ':hidden' ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Based on unveil.js.\n\t\t\t\tvar wt = section.$window.scrollTop(),\n\t\t\t\t\twb = wt + section.$window.height(),\n\t\t\t\t\tet = $image.offset().top,\n\t\t\t\t\tih = $imageWrapper.height(),\n\t\t\t\t\teb = et + ih,\n\t\t\t\t\tthreshold = ih * 3,\n\t\t\t\t\tinView = eb >= wt - threshold && et <= wb + threshold;\n\n\t\t\t\tif ( inView ) {\n\t\t\t\t\tcontrol.container.trigger( 'render-screenshot' );\n\t\t\t\t}\n\n\t\t\t\t// If the image is in view return false so it's cleared from the queue.\n\t\t\t\treturn ! inView;\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Advance the modal to the next theme.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tnextTheme: function () {\n\t\t\tvar section = this;\n\t\t\tif ( section.getNextTheme() ) {\n\t\t\t\tsection.showDetails( section.getNextTheme(), function() {\n\t\t\t\t\tsection.overlay.find( '.right' ).focus();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Get the next theme model.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tgetNextTheme: function () {\n\t\t\tvar control, next;\n\t\t\tcontrol = api.control( 'theme_' + this.currentTheme );\n\t\t\tnext = control.container.next( 'li.customize-control-theme' );\n\t\t\tif ( ! next.length ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnext = next[0].id.replace( 'customize-control-', '' );\n\t\t\tcontrol = api.control( next );\n\n\t\t\treturn control.params.theme;\n\t\t},\n\n\t\t/**\n\t\t * Advance the modal to the previous theme.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tpreviousTheme: function () {\n\t\t\tvar section = this;\n\t\t\tif ( section.getPreviousTheme() ) {\n\t\t\t\tsection.showDetails( section.getPreviousTheme(), function() {\n\t\t\t\t\tsection.overlay.find( '.left' ).focus();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Get the previous theme model.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tgetPreviousTheme: function () {\n\t\t\tvar control, previous;\n\t\t\tcontrol = api.control( 'theme_' + this.currentTheme );\n\t\t\tprevious = control.container.prev( 'li.customize-control-theme' );\n\t\t\tif ( ! previous.length ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tprevious = previous[0].id.replace( 'customize-control-', '' );\n\t\t\tcontrol = api.control( previous );\n\n\t\t\treturn control.params.theme;\n\t\t},\n\n\t\t/**\n\t\t * Disable buttons when we're viewing the first or last theme.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tupdateLimits: function () {\n\t\t\tif ( ! this.getNextTheme() ) {\n\t\t\t\tthis.overlay.find( '.right' ).addClass( 'disabled' );\n\t\t\t}\n\t\t\tif ( ! this.getPreviousTheme() ) {\n\t\t\t\tthis.overlay.find( '.left' ).addClass( 'disabled' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Load theme preview.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access public\n\t\t *\n\t\t * @param {string} themeId Theme ID.\n\t\t * @returns {jQuery.promise} Promise.\n\t\t */\n\t\tloadThemePreview: function( themeId ) {\n\t\t\tvar deferred = $.Deferred(), onceProcessingComplete, overlay, urlParser;\n\n\t\t\turlParser = document.createElement( 'a' );\n\t\t\turlParser.href = location.href;\n\t\t\turlParser.search = $.param( _.extend(\n\t\t\t\tapi.utils.parseQueryString( urlParser.search.substr( 1 ) ),\n\t\t\t\t{\n\t\t\t\t\ttheme: themeId,\n\t\t\t\t\tchangeset_uuid: api.settings.changeset.uuid\n\t\t\t\t}\n\t\t\t) );\n\n\t\t\toverlay = $( '.wp-full-overlay' );\n\t\t\toverlay.addClass( 'customize-loading' );\n\n\t\t\tonceProcessingComplete = function() {\n\t\t\t\tvar request;\n\t\t\t\tif ( api.state( 'processing' ).get() > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapi.state( 'processing' ).unbind( onceProcessingComplete );\n\n\t\t\t\trequest = api.requestChangesetUpdate();\n\t\t\t\trequest.done( function() {\n\t\t\t\t\t$( window ).off( 'beforeunload.customize-confirm' );\n\t\t\t\t\ttop.location.href = urlParser.href;\n\t\t\t\t\tdeferred.resolve();\n\t\t\t\t} );\n\t\t\t\trequest.fail( function() {\n\t\t\t\t\toverlay.removeClass( 'customize-loading' );\n\t\t\t\t\tdeferred.reject();\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tif ( 0 === api.state( 'processing' ).get() ) {\n\t\t\t\tonceProcessingComplete();\n\t\t\t} else {\n\t\t\t\tapi.state( 'processing' ).bind( onceProcessingComplete );\n\t\t\t}\n\n\t\t\treturn deferred.promise();\n\t\t},\n\n\t\t/**\n\t\t * Render & show the theme details for a given theme model.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param {Object}   theme\n\t\t */\n\t\tshowDetails: function ( theme, callback ) {\n\t\t\tvar section = this, link;\n\t\t\tcallback = callback || function(){};\n\t\t\tsection.currentTheme = theme.id;\n\t\t\tsection.overlay.html( section.template( theme ) )\n\t\t\t\t.fadeIn( 'fast' )\n\t\t\t\t.focus();\n\t\t\t$( 'body' ).addClass( 'modal-open' );\n\t\t\tsection.containFocus( section.overlay );\n\t\t\tsection.updateLimits();\n\n\t\t\tlink = section.overlay.find( '.inactive-theme > a' );\n\n\t\t\tlink.on( 'click', function( event ) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t// Short-circuit if request is currently being made.\n\t\t\t\tif ( link.hasClass( 'disabled' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlink.addClass( 'disabled' );\n\n\t\t\t\tsection.loadThemePreview( theme.id ).fail( function() {\n\t\t\t\t\tlink.removeClass( 'disabled' );\n\t\t\t\t} );\n\t\t\t} );\n\t\t\tcallback();\n\t\t},\n\n\t\t/**\n\t\t * Close the theme details modal.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tcloseDetails: function () {\n\t\t\t$( 'body' ).removeClass( 'modal-open' );\n\t\t\tthis.overlay.fadeOut( 'fast' );\n\t\t\tapi.control( 'theme_' + this.currentTheme ).focus();\n\t\t},\n\n\t\t/**\n\t\t * Keep tab focus within the theme details modal.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tcontainFocus: function( el ) {\n\t\t\tvar tabbables;\n\n\t\t\tel.on( 'keydown', function( event ) {\n\n\t\t\t\t// Return if it's not the tab key\n\t\t\t\t// When navigating with prev/next focus is already handled\n\t\t\t\tif ( 9 !== event.keyCode ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// uses jQuery UI to get the tabbable elements\n\t\t\t\ttabbables = $( ':tabbable', el );\n\n\t\t\t\t// Keep focus within the overlay\n\t\t\t\tif ( tabbables.last()[0] === event.target && ! event.shiftKey ) {\n\t\t\t\t\ttabbables.first().focus();\n\t\t\t\t\treturn false;\n\t\t\t\t} else if ( tabbables.first()[0] === event.target && event.shiftKey ) {\n\t\t\t\t\ttabbables.last().focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * @since 4.1.0\n\t *\n\t * @class\n\t * @augments wp.customize.Class\n\t */\n\tapi.Panel = Container.extend({\n\t\tcontainerType: 'panel',\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {string}         id - The ID for the panel.\n\t\t * @param {object}         options - Object containing one property: params.\n\t\t * @param {object}         options.params - Object containing the following properties.\n\t\t * @param {string}         options.params.title - Title shown when panel is collapsed and expanded.\n\t\t * @param {string=}        [options.params.description] - Description shown at the top of the panel.\n\t\t * @param {number=100}     [options.params.priority] - The sort priority for the panel.\n\t\t * @param {string=default} [options.params.type] - The type of the panel. See wp.customize.panelConstructor.\n\t\t * @param {string=}        [options.params.content] - The markup to be used for the panel container. If empty, a JS template is used.\n\t\t * @param {boolean=true}   [options.params.active] - Whether the panel is active or not.\n\t\t */\n\t\tinitialize: function ( id, options ) {\n\t\t\tvar panel = this;\n\t\t\tContainer.prototype.initialize.call( panel, id, options );\n\t\t\tpanel.embed();\n\t\t\tpanel.deferred.embedded.done( function () {\n\t\t\t\tpanel.ready();\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Embed the container in the DOM when any parent panel is ready.\n\t\t *\n\t\t * @since 4.1.0\n\t\t */\n\t\tembed: function () {\n\t\t\tvar panel = this,\n\t\t\t\tcontainer = $( '#customize-theme-controls' ),\n\t\t\t\tparentContainer = $( '.customize-pane-parent' ); // @todo This should be defined elsewhere, and to be configurable\n\n\t\t\tif ( ! panel.headContainer.parent().is( parentContainer ) ) {\n\t\t\t\tparentContainer.append( panel.headContainer );\n\t\t\t}\n\t\t\tif ( ! panel.contentContainer.parent().is( panel.headContainer ) ) {\n\t\t\t\tcontainer.append( panel.contentContainer );\n\t\t\t\tpanel.renderContent();\n\t\t\t}\n\n\t\t\tpanel.deferred.embedded.resolve();\n\t\t},\n\n\t\t/**\n\t\t * @since 4.1.0\n\t\t */\n\t\tattachEvents: function () {\n\t\t\tvar meta, panel = this;\n\n\t\t\t// Expand/Collapse accordion sections on click.\n\t\t\tpanel.headContainer.find( '.accordion-section-title' ).on( 'click keydown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tif ( ! panel.expanded() ) {\n\t\t\t\t\tpanel.expand();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Close panel.\n\t\t\tpanel.container.find( '.customize-panel-back' ).on( 'click keydown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tif ( panel.expanded() ) {\n\t\t\t\t\tpanel.collapse();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmeta = panel.container.find( '.panel-meta:first' );\n\n\t\t\tmeta.find( '> .accordion-section-title .customize-help-toggle' ).on( 'click keydown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tif ( meta.hasClass( 'cannot-expand' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar content = meta.find( '.customize-panel-description:first' );\n\t\t\t\tif ( meta.hasClass( 'open' ) ) {\n\t\t\t\t\tmeta.toggleClass( 'open' );\n\t\t\t\t\tcontent.slideUp( panel.defaultExpandedArguments.duration );\n\t\t\t\t\t$( this ).attr( 'aria-expanded', false );\n\t\t\t\t} else {\n\t\t\t\t\tcontent.slideDown( panel.defaultExpandedArguments.duration );\n\t\t\t\t\tmeta.toggleClass( 'open' );\n\t\t\t\t\t$( this ).attr( 'aria-expanded', true );\n\t\t\t\t}\n\t\t\t});\n\n\t\t},\n\n\t\t/**\n\t\t * Get the sections that are associated with this panel, sorted by their priority Value.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @returns {Array}\n\t\t */\n\t\tsections: function () {\n\t\t\treturn this._children( 'panel', 'section' );\n\t\t},\n\n\t\t/**\n\t\t * Return whether this panel has any active sections.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @returns {boolean}\n\t\t */\n\t\tisContextuallyActive: function () {\n\t\t\tvar panel = this,\n\t\t\t\tsections = panel.sections(),\n\t\t\t\tactiveCount = 0;\n\t\t\t_( sections ).each( function ( section ) {\n\t\t\t\tif ( section.active() && section.isContextuallyActive() ) {\n\t\t\t\t\tactiveCount += 1;\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn ( activeCount !== 0 );\n\t\t},\n\n\t\t/**\n\t\t * Update UI to reflect expanded state\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {Boolean}  expanded\n\t\t * @param {Object}   args\n\t\t * @param {Boolean}  args.unchanged\n\t\t * @param {Function} args.completeCallback\n\t\t */\n\t\tonChangeExpanded: function ( expanded, args ) {\n\n\t\t\t// Immediately call the complete callback if there were no changes\n\t\t\tif ( args.unchanged ) {\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Note: there is a second argument 'args' passed\n\t\t\tvar panel = this,\n\t\t\t\taccordionSection = panel.contentContainer,\n\t\t\t\toverlay = accordionSection.closest( '.wp-full-overlay' ),\n\t\t\t\tcontainer = accordionSection.closest( '.wp-full-overlay-sidebar-content' ),\n\t\t\t\ttopPanel = panel.headContainer.find( '.accordion-section-title' ),\n\t\t\t\tbackBtn = accordionSection.find( '.customize-panel-back' ),\n\t\t\t\tchildSections = panel.sections(),\n\t\t\t\tskipTransition;\n\n\t\t\tif ( expanded && ! accordionSection.hasClass( 'current-panel' ) ) {\n\t\t\t\t// Collapse any sibling sections/panels\n\t\t\t\tapi.section.each( function ( section ) {\n\t\t\t\t\tif ( panel.id !== section.panel() ) {\n\t\t\t\t\t\tsection.collapse( { duration: 0 } );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tapi.panel.each( function ( otherPanel ) {\n\t\t\t\t\tif ( panel !== otherPanel ) {\n\t\t\t\t\t\totherPanel.collapse( { duration: 0 } );\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif ( panel.params.autoExpandSoleSection && 1 === childSections.length && childSections[0].active.get() ) {\n\t\t\t\t\taccordionSection.addClass( 'current-panel skip-transition' );\n\t\t\t\t\toverlay.addClass( 'in-sub-panel' );\n\n\t\t\t\t\tchildSections[0].expand( {\n\t\t\t\t\t\tcompleteCallback: args.completeCallback\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tpanel._animateChangeExpanded( function() {\n\t\t\t\t\t\ttopPanel.attr( 'tabindex', '-1' );\n\t\t\t\t\t\tbackBtn.attr( 'tabindex', '0' );\n\n\t\t\t\t\t\tbackBtn.focus();\n\t\t\t\t\t\taccordionSection.css( 'top', '' );\n\t\t\t\t\t\tcontainer.scrollTop( 0 );\n\n\t\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\taccordionSection.addClass( 'current-panel' );\n\t\t\t\t\toverlay.addClass( 'in-sub-panel' );\n\t\t\t\t}\n\n\t\t\t\tapi.state( 'expandedPanel' ).set( panel );\n\n\t\t\t} else if ( ! expanded && accordionSection.hasClass( 'current-panel' ) ) {\n\t\t\t\tskipTransition = accordionSection.hasClass( 'skip-transition' );\n\t\t\t\tif ( ! skipTransition ) {\n\t\t\t\t\tpanel._animateChangeExpanded( function() {\n\t\t\t\t\t\ttopPanel.attr( 'tabindex', '0' );\n\t\t\t\t\t\tbackBtn.attr( 'tabindex', '-1' );\n\n\t\t\t\t\t\ttopPanel.focus();\n\t\t\t\t\t\taccordionSection.css( 'top', '' );\n\n\t\t\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\t\t\targs.completeCallback();\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\taccordionSection.removeClass( 'skip-transition' );\n\t\t\t\t}\n\n\t\t\t\toverlay.removeClass( 'in-sub-panel' );\n\t\t\t\taccordionSection.removeClass( 'current-panel' );\n\t\t\t\tif ( panel === api.state( 'expandedPanel' ).get() ) {\n\t\t\t\t\tapi.state( 'expandedPanel' ).set( false );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Render the panel from its JS template, if it exists.\n\t\t *\n\t\t * The panel's container must already exist in the DOM.\n\t\t *\n\t\t * @since 4.3.0\n\t\t */\n\t\trenderContent: function () {\n\t\t\tvar template,\n\t\t\t\tpanel = this;\n\n\t\t\t// Add the content to the container.\n\t\t\tif ( 0 !== $( '#tmpl-' + panel.templateSelector + '-content' ).length ) {\n\t\t\t\ttemplate = wp.template( panel.templateSelector + '-content' );\n\t\t\t} else {\n\t\t\t\ttemplate = wp.template( 'customize-panel-default-content' );\n\t\t\t}\n\t\t\tif ( template && panel.headContainer ) {\n\t\t\t\tpanel.contentContainer.html( template( panel.params ) );\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * A Customizer Control.\n\t *\n\t * A control provides a UI element that allows a user to modify a Customizer Setting.\n\t *\n\t * @see PHP class WP_Customize_Control.\n\t *\n\t * @class\n\t * @augments wp.customize.Class\n\t *\n\t * @param {string} id                              Unique identifier for the control instance.\n\t * @param {object} options                         Options hash for the control instance.\n\t * @param {object} options.params\n\t * @param {object} options.params.type             Type of control (e.g. text, radio, dropdown-pages, etc.)\n\t * @param {string} options.params.content          The HTML content for the control.\n\t * @param {string} options.params.priority         Order of priority to show the control within the section.\n\t * @param {string} options.params.active\n\t * @param {string} options.params.section          The ID of the section the control belongs to.\n\t * @param {string} options.params.settings.default The ID of the setting the control relates to.\n\t * @param {string} options.params.settings.data\n\t * @param {string} options.params.label\n\t * @param {string} options.params.description\n\t * @param {string} options.params.instanceNumber Order in which this instance was created in relation to other instances.\n\t */\n\tapi.Control = api.Class.extend({\n\t\tdefaultActiveArguments: { duration: 'fast', completeCallback: $.noop },\n\n\t\tinitialize: function( id, options ) {\n\t\t\tvar control = this,\n\t\t\t\tnodes, radios, settings;\n\n\t\t\tcontrol.params = {};\n\t\t\t$.extend( control, options || {} );\n\t\t\tcontrol.id = id;\n\t\t\tcontrol.selector = '#customize-control-' + id.replace( /\\]/g, '' ).replace( /\\[/g, '-' );\n\t\t\tcontrol.templateSelector = 'customize-control-' + control.params.type + '-content';\n\t\t\tcontrol.container = control.params.content ? $( control.params.content ) : $( control.selector );\n\n\t\t\tcontrol.deferred = {\n\t\t\t\tembedded: new $.Deferred()\n\t\t\t};\n\t\t\tcontrol.section = new api.Value();\n\t\t\tcontrol.priority = new api.Value();\n\t\t\tcontrol.active = new api.Value();\n\t\t\tcontrol.activeArgumentsQueue = [];\n\t\t\tcontrol.notifications = new api.Values({ defaultConstructor: api.Notification });\n\n\t\t\tcontrol.elements = [];\n\n\t\t\tnodes  = control.container.find('[data-customize-setting-link]');\n\t\t\tradios = {};\n\n\t\t\tnodes.each( function() {\n\t\t\t\tvar node = $( this ),\n\t\t\t\t\tname;\n\n\t\t\t\tif ( node.is( ':radio' ) ) {\n\t\t\t\t\tname = node.prop( 'name' );\n\t\t\t\t\tif ( radios[ name ] ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tradios[ name ] = true;\n\t\t\t\t\tnode = nodes.filter( '[name=\"' + name + '\"]' );\n\t\t\t\t}\n\n\t\t\t\tapi( node.data( 'customizeSettingLink' ), function( setting ) {\n\t\t\t\t\tvar element = new api.Element( node );\n\t\t\t\t\tcontrol.elements.push( element );\n\t\t\t\t\telement.sync( setting );\n\t\t\t\t\telement.set( setting() );\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tcontrol.active.bind( function ( active ) {\n\t\t\t\tvar args = control.activeArgumentsQueue.shift();\n\t\t\t\targs = $.extend( {}, control.defaultActiveArguments, args );\n\t\t\t\tcontrol.onChangeActive( active, args );\n\t\t\t} );\n\n\t\t\tcontrol.section.set( control.params.section );\n\t\t\tcontrol.priority.set( isNaN( control.params.priority ) ? 10 : control.params.priority );\n\t\t\tcontrol.active.set( control.params.active );\n\n\t\t\tapi.utils.bubbleChildValueChanges( control, [ 'section', 'priority', 'active' ] );\n\n\t\t\t/*\n\t\t\t * After all settings related to the control are available,\n\t\t\t * make them available on the control and embed the control into the page.\n\t\t\t */\n\t\t\tsettings = $.map( control.params.settings, function( value ) {\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tif ( 0 === settings.length ) {\n\t\t\t\tcontrol.setting = null;\n\t\t\t\tcontrol.settings = {};\n\t\t\t\tcontrol.embed();\n\t\t\t} else {\n\t\t\t\tapi.apply( api, settings.concat( function() {\n\t\t\t\t\tvar key;\n\n\t\t\t\t\tcontrol.settings = {};\n\t\t\t\t\tfor ( key in control.params.settings ) {\n\t\t\t\t\t\tcontrol.settings[ key ] = api( control.params.settings[ key ] );\n\t\t\t\t\t}\n\n\t\t\t\t\tcontrol.setting = control.settings['default'] || null;\n\n\t\t\t\t\t// Add setting notifications to the control notification.\n\t\t\t\t\t_.each( control.settings, function( setting ) {\n\t\t\t\t\t\tsetting.notifications.bind( 'add', function( settingNotification ) {\n\t\t\t\t\t\t\tvar controlNotification, code, params;\n\t\t\t\t\t\t\tcode = setting.id + ':' + settingNotification.code;\n\t\t\t\t\t\t\tparams = _.extend(\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tsettingNotification,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsetting: setting.id\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrolNotification = new api.Notification( code, params );\n\t\t\t\t\t\t\tcontrol.notifications.add( controlNotification.code, controlNotification );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tsetting.notifications.bind( 'remove', function( settingNotification ) {\n\t\t\t\t\t\t\tcontrol.notifications.remove( setting.id + ':' + settingNotification.code );\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\n\t\t\t\t\tcontrol.embed();\n\t\t\t\t}) );\n\t\t\t}\n\n\t\t\t// After the control is embedded on the page, invoke the \"ready\" method.\n\t\t\tcontrol.deferred.embedded.done( function () {\n\t\t\t\t/*\n\t\t\t\t * Note that this debounced/deferred rendering is needed for two reasons:\n\t\t\t\t * 1) The 'remove' event is triggered just _before_ the notification is actually removed.\n\t\t\t\t * 2) Improve performance when adding/removing multiple notifications at a time.\n\t\t\t\t */\n\t\t\t\tvar debouncedRenderNotifications = _.debounce( function renderNotifications() {\n\t\t\t\t\tcontrol.renderNotifications();\n\t\t\t\t} );\n\t\t\t\tcontrol.notifications.bind( 'add', function( notification ) {\n\t\t\t\t\twp.a11y.speak( notification.message, 'assertive' );\n\t\t\t\t\tdebouncedRenderNotifications();\n\t\t\t\t} );\n\t\t\t\tcontrol.notifications.bind( 'remove', debouncedRenderNotifications );\n\t\t\t\tcontrol.renderNotifications();\n\n\t\t\t\tcontrol.ready();\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Embed the control into the page.\n\t\t */\n\t\tembed: function () {\n\t\t\tvar control = this,\n\t\t\t\tinject;\n\n\t\t\t// Watch for changes to the section state\n\t\t\tinject = function ( sectionId ) {\n\t\t\t\tvar parentContainer;\n\t\t\t\tif ( ! sectionId ) { // @todo allow a control to be embedded without a section, for instance a control embedded in the front end.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Wait for the section to be registered\n\t\t\t\tapi.section( sectionId, function ( section ) {\n\t\t\t\t\t// Wait for the section to be ready/initialized\n\t\t\t\t\tsection.deferred.embedded.done( function () {\n\t\t\t\t\t\tparentContainer = ( section.contentContainer.is( 'ul' ) ) ? section.contentContainer : section.contentContainer.find( 'ul:first' );\n\t\t\t\t\t\tif ( ! control.container.parent().is( parentContainer ) ) {\n\t\t\t\t\t\t\tparentContainer.append( control.container );\n\t\t\t\t\t\t\tcontrol.renderContent();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontrol.deferred.embedded.resolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t\tcontrol.section.bind( inject );\n\t\t\tinject( control.section.get() );\n\t\t},\n\n\t\t/**\n\t\t * Triggered when the control's markup has been injected into the DOM.\n\t\t *\n\t\t * @returns {void}\n\t\t */\n\t\tready: function() {\n\t\t\tvar control = this, newItem;\n\t\t\tif ( 'dropdown-pages' === control.params.type && control.params.allow_addition ) {\n\t\t\t\tnewItem = control.container.find( '.new-content-item' );\n\t\t\t\tnewItem.hide(); // Hide in JS to preserve flex display when showing.\n\t\t\t\tcontrol.container.on( 'click', '.add-new-toggle', function( e ) {\n\t\t\t\t\t$( e.currentTarget ).slideUp( 180 );\n\t\t\t\t\tnewItem.slideDown( 180 );\n\t\t\t\t\tnewItem.find( '.create-item-input' ).focus();\n\t\t\t\t});\n\t\t\t\tcontrol.container.on( 'click', '.add-content', function() {\n\t\t\t\t\tcontrol.addNewPage();\n\t\t\t\t});\n\t\t\t\tcontrol.container.on( 'keyup', '.create-item-input', function( e ) {\n\t\t\t\t\tif ( 13 === e.which ) { // Enter\n\t\t\t\t\t\tcontrol.addNewPage();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Get the element inside of a control's container that contains the validation error message.\n\t\t *\n\t\t * Control subclasses may override this to return the proper container to render notifications into.\n\t\t * Injects the notification container for existing controls that lack the necessary container,\n\t\t * including special handling for nav menu items and widgets.\n\t\t *\n\t\t * @since 4.6.0\n\t\t * @returns {jQuery} Setting validation message element.\n\t\t * @this {wp.customize.Control}\n\t\t */\n\t\tgetNotificationsContainerElement: function() {\n\t\t\tvar control = this, controlTitle, notificationsContainer;\n\n\t\t\tnotificationsContainer = control.container.find( '.customize-control-notifications-container:first' );\n\t\t\tif ( notificationsContainer.length ) {\n\t\t\t\treturn notificationsContainer;\n\t\t\t}\n\n\t\t\tnotificationsContainer = $( '<div class=\"customize-control-notifications-container\"></div>' );\n\n\t\t\tif ( control.container.hasClass( 'customize-control-nav_menu_item' ) ) {\n\t\t\t\tcontrol.container.find( '.menu-item-settings:first' ).prepend( notificationsContainer );\n\t\t\t} else if ( control.container.hasClass( 'customize-control-widget_form' ) ) {\n\t\t\t\tcontrol.container.find( '.widget-inside:first' ).prepend( notificationsContainer );\n\t\t\t} else {\n\t\t\t\tcontrolTitle = control.container.find( '.customize-control-title' );\n\t\t\t\tif ( controlTitle.length ) {\n\t\t\t\t\tcontrolTitle.after( notificationsContainer );\n\t\t\t\t} else {\n\t\t\t\t\tcontrol.container.prepend( notificationsContainer );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn notificationsContainer;\n\t\t},\n\n\t\t/**\n\t\t * Render notifications.\n\t\t *\n\t\t * Renders the `control.notifications` into the control's container.\n\t\t * Control subclasses may override this method to do their own handling\n\t\t * of rendering notifications.\n\t\t *\n\t\t * @since 4.6.0\n\t\t * @this {wp.customize.Control}\n\t\t */\n\t\trenderNotifications: function() {\n\t\t\tvar control = this, container, notifications, hasError = false;\n\t\t\tcontainer = control.getNotificationsContainerElement();\n\t\t\tif ( ! container || ! container.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tnotifications = [];\n\t\t\tcontrol.notifications.each( function( notification ) {\n\t\t\t\tnotifications.push( notification );\n\t\t\t\tif ( 'error' === notification.type ) {\n\t\t\t\t\thasError = true;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( 0 === notifications.length ) {\n\t\t\t\tcontainer.stop().slideUp( 'fast' );\n\t\t\t} else {\n\t\t\t\tcontainer.stop().slideDown( 'fast', null, function() {\n\t\t\t\t\t$( this ).css( 'height', 'auto' );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( ! control.notificationsTemplate ) {\n\t\t\t\tcontrol.notificationsTemplate = wp.template( 'customize-control-notifications' );\n\t\t\t}\n\n\t\t\tcontrol.container.toggleClass( 'has-notifications', 0 !== notifications.length );\n\t\t\tcontrol.container.toggleClass( 'has-error', hasError );\n\t\t\tcontainer.empty().append( $.trim(\n\t\t\t\tcontrol.notificationsTemplate( { notifications: notifications, altNotice: Boolean( control.altNotice ) } )\n\t\t\t) );\n\t\t},\n\n\t\t/**\n\t\t * Normal controls do not expand, so just expand its parent\n\t\t *\n\t\t * @param {Object} [params]\n\t\t */\n\t\texpand: function ( params ) {\n\t\t\tapi.section( this.section() ).expand( params );\n\t\t},\n\n\t\t/**\n\t\t * Bring the containing section and panel into view and then\n\t\t * this control into view, focusing on the first input.\n\t\t */\n\t\tfocus: focus,\n\n\t\t/**\n\t\t * Update UI in response to a change in the control's active state.\n\t\t * This does not change the active state, it merely handles the behavior\n\t\t * for when it does change.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {Boolean}  active\n\t\t * @param {Object}   args\n\t\t * @param {Number}   args.duration\n\t\t * @param {Callback} args.completeCallback\n\t\t */\n\t\tonChangeActive: function ( active, args ) {\n\t\t\tif ( args.unchanged ) {\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ! $.contains( document, this.container[0] ) ) {\n\t\t\t\t// jQuery.fn.slideUp is not hiding an element if it is not in the DOM\n\t\t\t\tthis.container.toggle( active );\n\t\t\t\tif ( args.completeCallback ) {\n\t\t\t\t\targs.completeCallback();\n\t\t\t\t}\n\t\t\t} else if ( active ) {\n\t\t\t\tthis.container.slideDown( args.duration, args.completeCallback );\n\t\t\t} else {\n\t\t\t\tthis.container.slideUp( args.duration, args.completeCallback );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @deprecated 4.1.0 Use this.onChangeActive() instead.\n\t\t */\n\t\ttoggle: function ( active ) {\n\t\t\treturn this.onChangeActive( active, this.defaultActiveArguments );\n\t\t},\n\n\t\t/**\n\t\t * Shorthand way to enable the active state.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already active\n\t\t */\n\t\tactivate: Container.prototype.activate,\n\n\t\t/**\n\t\t * Shorthand way to disable the active state.\n\t\t *\n\t\t * @since 4.1.0\n\t\t *\n\t\t * @param {Object} [params]\n\t\t * @returns {Boolean} false if already inactive\n\t\t */\n\t\tdeactivate: Container.prototype.deactivate,\n\n\t\t/**\n\t\t * Re-use _toggleActive from Container class.\n\t\t *\n\t\t * @access private\n\t\t */\n\t\t_toggleActive: Container.prototype._toggleActive,\n\n\t\tdropdownInit: function() {\n\t\t\tvar control      = this,\n\t\t\t\tstatuses     = this.container.find('.dropdown-status'),\n\t\t\t\tparams       = this.params,\n\t\t\t\ttoggleFreeze = false,\n\t\t\t\tupdate       = function( to ) {\n\t\t\t\t\tif ( typeof to === 'string' && params.statuses && params.statuses[ to ] )\n\t\t\t\t\t\tstatuses.html( params.statuses[ to ] ).show();\n\t\t\t\t\telse\n\t\t\t\t\t\tstatuses.hide();\n\t\t\t\t};\n\n\t\t\t// Support the .dropdown class to open/close complex elements\n\t\t\tthis.container.on( 'click keydown', '.dropdown', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tif (!toggleFreeze)\n\t\t\t\t\tcontrol.container.toggleClass('open');\n\n\t\t\t\tif ( control.container.hasClass('open') )\n\t\t\t\t\tcontrol.container.parent().parent().find('li.library-selected').focus();\n\n\t\t\t\t// Don't want to fire focus and click at same time\n\t\t\t\ttoggleFreeze = true;\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\ttoggleFreeze = false;\n\t\t\t\t}, 400);\n\t\t\t});\n\n\t\t\tthis.setting.bind( update );\n\t\t\tupdate( this.setting() );\n\t\t},\n\n\t\t/**\n\t\t * Render the control from its JS template, if it exists.\n\t\t *\n\t\t * The control's container must already exist in the DOM.\n\t\t *\n\t\t * @since 4.1.0\n\t\t */\n\t\trenderContent: function () {\n\t\t\tvar template,\n\t\t\t\tcontrol = this;\n\n\t\t\t// Replace the container element's content with the control.\n\t\t\tif ( 0 !== $( '#tmpl-' + control.templateSelector ).length ) {\n\t\t\t\ttemplate = wp.template( control.templateSelector );\n\t\t\t\tif ( template && control.container ) {\n\t\t\t\t\tcontrol.container.html( template( control.params ) );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add a new page to a dropdown-pages control reusing menus code for this.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access private\n\t\t * @returns {void}\n\t\t */\n\t\taddNewPage: function () {\n\t\t\tvar control = this, promise, toggle, container, input, title, select;\n\n\t\t\tif ( 'dropdown-pages' !== control.params.type || ! control.params.allow_addition || ! api.Menus ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttoggle = control.container.find( '.add-new-toggle' );\n\t\t\tcontainer = control.container.find( '.new-content-item' );\n\t\t\tinput = control.container.find( '.create-item-input' );\n\t\t\ttitle = input.val();\n\t\t\tselect = control.container.find( 'select' );\n\n\t\t\tif ( ! title ) {\n\t\t\t\tinput.addClass( 'invalid' );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tinput.removeClass( 'invalid' );\n\t\t\tinput.attr( 'disabled', 'disabled' );\n\n\t\t\t// The menus functions add the page, publish when appropriate, and also add the new page to the dropdown-pages controls.\n\t\t\tpromise = api.Menus.insertAutoDraftPost( {\n\t\t\t\tpost_title: title,\n\t\t\t\tpost_type: 'page'\n\t\t\t} );\n\t\t\tpromise.done( function( data ) {\n\t\t\t\tvar availableItem, $content, itemTemplate;\n\n\t\t\t\t// Prepare the new page as an available menu item.\n\t\t\t\t// See api.Menus.submitNew().\n\t\t\t\tavailableItem = new api.Menus.AvailableItemModel( {\n\t\t\t\t\t'id': 'post-' + data.post_id, // Used for available menu item Backbone models.\n\t\t\t\t\t'title': title,\n\t\t\t\t\t'type': 'post_type',\n\t\t\t\t\t'type_label': api.Menus.data.l10n.page_label,\n\t\t\t\t\t'object': 'page',\n\t\t\t\t\t'object_id': data.post_id,\n\t\t\t\t\t'url': data.url\n\t\t\t\t} );\n\n\t\t\t\t// Add the new item to the list of available menu items.\n\t\t\t\tapi.Menus.availableMenuItemsPanel.collection.add( availableItem );\n\t\t\t\t$content = $( '#available-menu-items-post_type-page' ).find( '.available-menu-items-list' );\n\t\t\t\titemTemplate = wp.template( 'available-menu-item' );\n\t\t\t\t$content.prepend( itemTemplate( availableItem.attributes ) );\n\n\t\t\t\t// Focus the select control.\n\t\t\t\tselect.focus();\n\t\t\t\tcontrol.setting.set( String( data.post_id ) ); // Triggers a preview refresh and updates the setting.\n\n\t\t\t\t// Reset the create page form.\n\t\t\t\tcontainer.slideUp( 180 );\n\t\t\t\ttoggle.slideDown( 180 );\n\t\t\t} );\n\t\t\tpromise.always( function() {\n\t\t\t\tinput.val( '' ).removeAttr( 'disabled' );\n\t\t\t} );\n\t\t}\n\t});\n\n\t/**\n\t * A colorpicker control.\n\t *\n\t * @class\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.ColorControl = api.Control.extend({\n\t\tready: function() {\n\t\t\tvar control = this,\n\t\t\t\tisHueSlider = this.params.mode === 'hue',\n\t\t\t\tupdating = false,\n\t\t\t\tpicker;\n\n\t\t\tif ( isHueSlider ) {\n\t\t\t\tpicker = this.container.find( '.color-picker-hue' );\n\t\t\t\tpicker.val( control.setting() ).wpColorPicker({\n\t\t\t\t\tchange: function( event, ui ) {\n\t\t\t\t\t\tupdating = true;\n\t\t\t\t\t\tcontrol.setting( ui.color.h() );\n\t\t\t\t\t\tupdating = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpicker = this.container.find( '.color-picker-hex' );\n\t\t\t\tpicker.val( control.setting() ).wpColorPicker({\n\t\t\t\t\tchange: function() {\n\t\t\t\t\t\tupdating = true;\n\t\t\t\t\t\tcontrol.setting.set( picker.wpColorPicker( 'color' ) );\n\t\t\t\t\t\tupdating = false;\n\t\t\t\t\t},\n\t\t\t\t\tclear: function() {\n\t\t\t\t\t\tupdating = true;\n\t\t\t\t\t\tcontrol.setting.set( '' );\n\t\t\t\t\t\tupdating = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tcontrol.setting.bind( function ( value ) {\n\t\t\t\t// Bail if the update came from the control itself.\n\t\t\t\tif ( updating ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tpicker.val( value );\n\t\t\t\tpicker.wpColorPicker( 'color', value );\n\t\t\t} );\n\n\t\t\t// Collapse color picker when hitting Esc instead of collapsing the current section.\n\t\t\tcontrol.container.on( 'keydown', function( event ) {\n\t\t\t\tvar pickerContainer;\n\t\t\t\tif ( 27 !== event.which ) { // Esc.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tpickerContainer = control.container.find( '.wp-picker-container' );\n\t\t\t\tif ( pickerContainer.hasClass( 'wp-picker-active' ) ) {\n\t\t\t\t\tpicker.wpColorPicker( 'close' );\n\t\t\t\t\tcontrol.container.find( '.wp-color-result' ).focus();\n\t\t\t\t\tevent.stopPropagation(); // Prevent section from being collapsed.\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t});\n\n\t/**\n\t * A control that implements the media modal.\n\t *\n\t * @class\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.MediaControl = api.Control.extend({\n\n\t\t/**\n\t\t * When the control's DOM structure is ready,\n\t\t * set up internal event bindings.\n\t\t */\n\t\tready: function() {\n\t\t\tvar control = this;\n\t\t\t// Shortcut so that we don't have to use _.bind every time we add a callback.\n\t\t\t_.bindAll( control, 'restoreDefault', 'removeFile', 'openFrame', 'select', 'pausePlayer' );\n\n\t\t\t// Bind events, with delegation to facilitate re-rendering.\n\t\t\tcontrol.container.on( 'click keydown', '.upload-button', control.openFrame );\n\t\t\tcontrol.container.on( 'click keydown', '.upload-button', control.pausePlayer );\n\t\t\tcontrol.container.on( 'click keydown', '.thumbnail-image img', control.openFrame );\n\t\t\tcontrol.container.on( 'click keydown', '.default-button', control.restoreDefault );\n\t\t\tcontrol.container.on( 'click keydown', '.remove-button', control.pausePlayer );\n\t\t\tcontrol.container.on( 'click keydown', '.remove-button', control.removeFile );\n\t\t\tcontrol.container.on( 'click keydown', '.remove-button', control.cleanupPlayer );\n\n\t\t\t// Resize the player controls when it becomes visible (ie when section is expanded)\n\t\t\tapi.section( control.section() ).container\n\t\t\t\t.on( 'expanded', function() {\n\t\t\t\t\tif ( control.player ) {\n\t\t\t\t\t\tcontrol.player.setControlsSize();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.on( 'collapsed', function() {\n\t\t\t\t\tcontrol.pausePlayer();\n\t\t\t\t});\n\n\t\t\t/**\n\t\t\t * Set attachment data and render content.\n\t\t\t *\n\t\t\t * Note that BackgroundImage.prototype.ready applies this ready method\n\t\t\t * to itself. Since BackgroundImage is an UploadControl, the value\n\t\t\t * is the attachment URL instead of the attachment ID. In this case\n\t\t\t * we skip fetching the attachment data because we have no ID available,\n\t\t\t * and it is the responsibility of the UploadControl to set the control's\n\t\t\t * attachmentData before calling the renderContent method.\n\t\t\t *\n\t\t\t * @param {number|string} value Attachment\n\t\t\t */\n\t\t\tfunction setAttachmentDataAndRenderContent( value ) {\n\t\t\t\tvar hasAttachmentData = $.Deferred();\n\n\t\t\t\tif ( control.extended( api.UploadControl ) ) {\n\t\t\t\t\thasAttachmentData.resolve();\n\t\t\t\t} else {\n\t\t\t\t\tvalue = parseInt( value, 10 );\n\t\t\t\t\tif ( _.isNaN( value ) || value <= 0 ) {\n\t\t\t\t\t\tdelete control.params.attachment;\n\t\t\t\t\t\thasAttachmentData.resolve();\n\t\t\t\t\t} else if ( control.params.attachment && control.params.attachment.id === value ) {\n\t\t\t\t\t\thasAttachmentData.resolve();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Fetch the attachment data.\n\t\t\t\tif ( 'pending' === hasAttachmentData.state() ) {\n\t\t\t\t\twp.media.attachment( value ).fetch().done( function() {\n\t\t\t\t\t\tcontrol.params.attachment = this.attributes;\n\t\t\t\t\t\thasAttachmentData.resolve();\n\n\t\t\t\t\t\t// Send attachment information to the preview for possible use in `postMessage` transport.\n\t\t\t\t\t\twp.customize.previewer.send( control.setting.id + '-attachment-data', this.attributes );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\thasAttachmentData.done( function() {\n\t\t\t\t\tcontrol.renderContent();\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Ensure attachment data is initially set (for dynamically-instantiated controls).\n\t\t\tsetAttachmentDataAndRenderContent( control.setting() );\n\n\t\t\t// Update the attachment data and re-render the control when the setting changes.\n\t\t\tcontrol.setting.bind( setAttachmentDataAndRenderContent );\n\t\t},\n\n\t\tpausePlayer: function () {\n\t\t\tthis.player && this.player.pause();\n\t\t},\n\n\t\tcleanupPlayer: function () {\n\t\t\tthis.player && wp.media.mixin.removePlayer( this.player );\n\t\t},\n\n\t\t/**\n\t\t * Open the media modal.\n\t\t */\n\t\topenFrame: function( event ) {\n\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( ! this.frame ) {\n\t\t\t\tthis.initFrame();\n\t\t\t}\n\n\t\t\tthis.frame.open();\n\t\t},\n\n\t\t/**\n\t\t * Create a media modal select frame, and store it so the instance can be reused when needed.\n\t\t */\n\t\tinitFrame: function() {\n\t\t\tthis.frame = wp.media({\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: this.params.button_labels.frame_button\n\t\t\t\t},\n\t\t\t\tstates: [\n\t\t\t\t\tnew wp.media.controller.Library({\n\t\t\t\t\t\ttitle:     this.params.button_labels.frame_title,\n\t\t\t\t\t\tlibrary:   wp.media.query({ type: this.params.mime_type }),\n\t\t\t\t\t\tmultiple:  false,\n\t\t\t\t\t\tdate:      false\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\n\t\t\t// When a file is selected, run a callback.\n\t\t\tthis.frame.on( 'select', this.select );\n\t\t},\n\n\t\t/**\n\t\t * Callback handler for when an attachment is selected in the media modal.\n\t\t * Gets the selected image information, and sets it within the control.\n\t\t */\n\t\tselect: function() {\n\t\t\t// Get the attachment from the modal frame.\n\t\t\tvar node,\n\t\t\t\tattachment = this.frame.state().get( 'selection' ).first().toJSON(),\n\t\t\t\tmejsSettings = window._wpmejsSettings || {};\n\n\t\t\tthis.params.attachment = attachment;\n\n\t\t\t// Set the Customizer setting; the callback takes care of rendering.\n\t\t\tthis.setting( attachment.id );\n\t\t\tnode = this.container.find( 'audio, video' ).get(0);\n\n\t\t\t// Initialize audio/video previews.\n\t\t\tif ( node ) {\n\t\t\t\tthis.player = new MediaElementPlayer( node, mejsSettings );\n\t\t\t} else {\n\t\t\t\tthis.cleanupPlayer();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Reset the setting to the default value.\n\t\t */\n\t\trestoreDefault: function( event ) {\n\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.params.attachment = this.params.defaultAttachment;\n\t\t\tthis.setting( this.params.defaultAttachment.url );\n\t\t},\n\n\t\t/**\n\t\t * Called when the \"Remove\" link is clicked. Empties the setting.\n\t\t *\n\t\t * @param {object} event jQuery Event object\n\t\t */\n\t\tremoveFile: function( event ) {\n\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.params.attachment = {};\n\t\t\tthis.setting( '' );\n\t\t\tthis.renderContent(); // Not bound to setting change when emptying.\n\t\t}\n\t});\n\n\t/**\n\t * An upload control, which utilizes the media modal.\n\t *\n\t * @class\n\t * @augments wp.customize.MediaControl\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.UploadControl = api.MediaControl.extend({\n\n\t\t/**\n\t\t * Callback handler for when an attachment is selected in the media modal.\n\t\t * Gets the selected image information, and sets it within the control.\n\t\t */\n\t\tselect: function() {\n\t\t\t// Get the attachment from the modal frame.\n\t\t\tvar node,\n\t\t\t\tattachment = this.frame.state().get( 'selection' ).first().toJSON(),\n\t\t\t\tmejsSettings = window._wpmejsSettings || {};\n\n\t\t\tthis.params.attachment = attachment;\n\n\t\t\t// Set the Customizer setting; the callback takes care of rendering.\n\t\t\tthis.setting( attachment.url );\n\t\t\tnode = this.container.find( 'audio, video' ).get(0);\n\n\t\t\t// Initialize audio/video previews.\n\t\t\tif ( node ) {\n\t\t\t\tthis.player = new MediaElementPlayer( node, mejsSettings );\n\t\t\t} else {\n\t\t\t\tthis.cleanupPlayer();\n\t\t\t}\n\t\t},\n\n\t\t// @deprecated\n\t\tsuccess: function() {},\n\n\t\t// @deprecated\n\t\tremoverVisibility: function() {}\n\t});\n\n\t/**\n\t * A control for uploading images.\n\t *\n\t * This control no longer needs to do anything more\n\t * than what the upload control does in JS.\n\t *\n\t * @class\n\t * @augments wp.customize.UploadControl\n\t * @augments wp.customize.MediaControl\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.ImageControl = api.UploadControl.extend({\n\t\t// @deprecated\n\t\tthumbnailSrc: function() {}\n\t});\n\n\t/**\n\t * A control for uploading background images.\n\t *\n\t * @class\n\t * @augments wp.customize.UploadControl\n\t * @augments wp.customize.MediaControl\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.BackgroundControl = api.UploadControl.extend({\n\n\t\t/**\n\t\t * When the control's DOM structure is ready,\n\t\t * set up internal event bindings.\n\t\t */\n\t\tready: function() {\n\t\t\tapi.UploadControl.prototype.ready.apply( this, arguments );\n\t\t},\n\n\t\t/**\n\t\t * Callback handler for when an attachment is selected in the media modal.\n\t\t * Does an additional AJAX request for setting the background context.\n\t\t */\n\t\tselect: function() {\n\t\t\tapi.UploadControl.prototype.select.apply( this, arguments );\n\n\t\t\twp.ajax.post( 'custom-background-add', {\n\t\t\t\tnonce: _wpCustomizeBackground.nonces.add,\n\t\t\t\twp_customize: 'on',\n\t\t\t\tcustomize_theme: api.settings.theme.stylesheet,\n\t\t\t\tattachment_id: this.params.attachment.id\n\t\t\t} );\n\t\t}\n\t});\n\n\t/**\n\t * A control for positioning a background image.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @class\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.BackgroundPositionControl = api.Control.extend( {\n\n\t\t/**\n\t\t * Set up control UI once embedded in DOM and settings are created.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access public\n\t\t */\n\t\tready: function() {\n\t\t\tvar control = this, updateRadios;\n\n\t\t\tcontrol.container.on( 'change', 'input[name=\"background-position\"]', function() {\n\t\t\t\tvar position = $( this ).val().split( ' ' );\n\t\t\t\tcontrol.settings.x( position[0] );\n\t\t\t\tcontrol.settings.y( position[1] );\n\t\t\t} );\n\n\t\t\tupdateRadios = _.debounce( function() {\n\t\t\t\tvar x, y, radioInput, inputValue;\n\t\t\t\tx = control.settings.x.get();\n\t\t\t\ty = control.settings.y.get();\n\t\t\t\tinputValue = String( x ) + ' ' + String( y );\n\t\t\t\tradioInput = control.container.find( 'input[name=\"background-position\"][value=\"' + inputValue + '\"]' );\n\t\t\t\tradioInput.click();\n\t\t\t} );\n\t\t\tcontrol.settings.x.bind( updateRadios );\n\t\t\tcontrol.settings.y.bind( updateRadios );\n\n\t\t\tupdateRadios(); // Set initial UI.\n\t\t}\n\t} );\n\n\t/**\n\t * A control for selecting and cropping an image.\n\t *\n\t * @class\n\t * @augments wp.customize.MediaControl\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.CroppedImageControl = api.MediaControl.extend({\n\n\t\t/**\n\t\t * Open the media modal to the library state.\n\t\t */\n\t\topenFrame: function( event ) {\n\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.initFrame();\n\t\t\tthis.frame.setState( 'library' ).open();\n\t\t},\n\n\t\t/**\n\t\t * Create a media modal select frame, and store it so the instance can be reused when needed.\n\t\t */\n\t\tinitFrame: function() {\n\t\t\tvar l10n = _wpMediaViewsL10n;\n\n\t\t\tthis.frame = wp.media({\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: l10n.select,\n\t\t\t\t\tclose: false\n\t\t\t\t},\n\t\t\t\tstates: [\n\t\t\t\t\tnew wp.media.controller.Library({\n\t\t\t\t\t\ttitle: this.params.button_labels.frame_title,\n\t\t\t\t\t\tlibrary: wp.media.query({ type: 'image' }),\n\t\t\t\t\t\tmultiple: false,\n\t\t\t\t\t\tdate: false,\n\t\t\t\t\t\tpriority: 20,\n\t\t\t\t\t\tsuggestedWidth: this.params.width,\n\t\t\t\t\t\tsuggestedHeight: this.params.height\n\t\t\t\t\t}),\n\t\t\t\t\tnew wp.media.controller.CustomizeImageCropper({\n\t\t\t\t\t\timgSelectOptions: this.calculateImageSelectOptions,\n\t\t\t\t\t\tcontrol: this\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tthis.frame.on( 'select', this.onSelect, this );\n\t\t\tthis.frame.on( 'cropped', this.onCropped, this );\n\t\t\tthis.frame.on( 'skippedcrop', this.onSkippedCrop, this );\n\t\t},\n\n\t\t/**\n\t\t * After an image is selected in the media modal, switch to the cropper\n\t\t * state if the image isn't the right size.\n\t\t */\n\t\tonSelect: function() {\n\t\t\tvar attachment = this.frame.state().get( 'selection' ).first().toJSON();\n\n\t\t\tif ( this.params.width === attachment.width && this.params.height === attachment.height && ! this.params.flex_width && ! this.params.flex_height ) {\n\t\t\t\tthis.setImageFromAttachment( attachment );\n\t\t\t\tthis.frame.close();\n\t\t\t} else {\n\t\t\t\tthis.frame.setState( 'cropper' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * After the image has been cropped, apply the cropped image data to the setting.\n\t\t *\n\t\t * @param {object} croppedImage Cropped attachment data.\n\t\t */\n\t\tonCropped: function( croppedImage ) {\n\t\t\tthis.setImageFromAttachment( croppedImage );\n\t\t},\n\n\t\t/**\n\t\t * Returns a set of options, computed from the attached image data and\n\t\t * control-specific data, to be fed to the imgAreaSelect plugin in\n\t\t * wp.media.view.Cropper.\n\t\t *\n\t\t * @param {wp.media.model.Attachment} attachment\n\t\t * @param {wp.media.controller.Cropper} controller\n\t\t * @returns {Object} Options\n\t\t */\n\t\tcalculateImageSelectOptions: function( attachment, controller ) {\n\t\t\tvar control    = controller.get( 'control' ),\n\t\t\t\tflexWidth  = !! parseInt( control.params.flex_width, 10 ),\n\t\t\t\tflexHeight = !! parseInt( control.params.flex_height, 10 ),\n\t\t\t\trealWidth  = attachment.get( 'width' ),\n\t\t\t\trealHeight = attachment.get( 'height' ),\n\t\t\t\txInit = parseInt( control.params.width, 10 ),\n\t\t\t\tyInit = parseInt( control.params.height, 10 ),\n\t\t\t\tratio = xInit / yInit,\n\t\t\t\txImg  = xInit,\n\t\t\t\tyImg  = yInit,\n\t\t\t\tx1, y1, imgSelectOptions;\n\n\t\t\tcontroller.set( 'canSkipCrop', ! control.mustBeCropped( flexWidth, flexHeight, xInit, yInit, realWidth, realHeight ) );\n\n\t\t\tif ( realWidth / realHeight > ratio ) {\n\t\t\t\tyInit = realHeight;\n\t\t\t\txInit = yInit * ratio;\n\t\t\t} else {\n\t\t\t\txInit = realWidth;\n\t\t\t\tyInit = xInit / ratio;\n\t\t\t}\n\n\t\t\tx1 = ( realWidth - xInit ) / 2;\n\t\t\ty1 = ( realHeight - yInit ) / 2;\n\n\t\t\timgSelectOptions = {\n\t\t\t\thandles: true,\n\t\t\t\tkeys: true,\n\t\t\t\tinstance: true,\n\t\t\t\tpersistent: true,\n\t\t\t\timageWidth: realWidth,\n\t\t\t\timageHeight: realHeight,\n\t\t\t\tminWidth: xImg > xInit ? xInit : xImg,\n\t\t\t\tminHeight: yImg > yInit ? yInit : yImg,\n\t\t\t\tx1: x1,\n\t\t\t\ty1: y1,\n\t\t\t\tx2: xInit + x1,\n\t\t\t\ty2: yInit + y1\n\t\t\t};\n\n\t\t\tif ( flexHeight === false && flexWidth === false ) {\n\t\t\t\timgSelectOptions.aspectRatio = xInit + ':' + yInit;\n\t\t\t}\n\n\t\t\tif ( true === flexHeight ) {\n\t\t\t\tdelete imgSelectOptions.minHeight;\n\t\t\t\timgSelectOptions.maxWidth = realWidth;\n\t\t\t}\n\n\t\t\tif ( true === flexWidth ) {\n\t\t\t\tdelete imgSelectOptions.minWidth;\n\t\t\t\timgSelectOptions.maxHeight = realHeight;\n\t\t\t}\n\n\t\t\treturn imgSelectOptions;\n\t\t},\n\n\t\t/**\n\t\t * Return whether the image must be cropped, based on required dimensions.\n\t\t *\n\t\t * @param {bool} flexW\n\t\t * @param {bool} flexH\n\t\t * @param {int}  dstW\n\t\t * @param {int}  dstH\n\t\t * @param {int}  imgW\n\t\t * @param {int}  imgH\n\t\t * @return {bool}\n\t\t */\n\t\tmustBeCropped: function( flexW, flexH, dstW, dstH, imgW, imgH ) {\n\t\t\tif ( true === flexW && true === flexH ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( true === flexW && dstH === imgH ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( true === flexH && dstW === imgW ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( dstW === imgW && dstH === imgH ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( imgW <= dstW ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\t * If cropping was skipped, apply the image data directly to the setting.\n\t\t */\n\t\tonSkippedCrop: function() {\n\t\t\tvar attachment = this.frame.state().get( 'selection' ).first().toJSON();\n\t\t\tthis.setImageFromAttachment( attachment );\n\t\t},\n\n\t\t/**\n\t\t * Updates the setting and re-renders the control UI.\n\t\t *\n\t\t * @param {object} attachment\n\t\t */\n\t\tsetImageFromAttachment: function( attachment ) {\n\t\t\tthis.params.attachment = attachment;\n\n\t\t\t// Set the Customizer setting; the callback takes care of rendering.\n\t\t\tthis.setting( attachment.id );\n\t\t}\n\t});\n\n\t/**\n\t * A control for selecting and cropping Site Icons.\n\t *\n\t * @class\n\t * @augments wp.customize.CroppedImageControl\n\t * @augments wp.customize.MediaControl\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.SiteIconControl = api.CroppedImageControl.extend({\n\n\t\t/**\n\t\t * Create a media modal select frame, and store it so the instance can be reused when needed.\n\t\t */\n\t\tinitFrame: function() {\n\t\t\tvar l10n = _wpMediaViewsL10n;\n\n\t\t\tthis.frame = wp.media({\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: l10n.select,\n\t\t\t\t\tclose: false\n\t\t\t\t},\n\t\t\t\tstates: [\n\t\t\t\t\tnew wp.media.controller.Library({\n\t\t\t\t\t\ttitle: this.params.button_labels.frame_title,\n\t\t\t\t\t\tlibrary: wp.media.query({ type: 'image' }),\n\t\t\t\t\t\tmultiple: false,\n\t\t\t\t\t\tdate: false,\n\t\t\t\t\t\tpriority: 20,\n\t\t\t\t\t\tsuggestedWidth: this.params.width,\n\t\t\t\t\t\tsuggestedHeight: this.params.height\n\t\t\t\t\t}),\n\t\t\t\t\tnew wp.media.controller.SiteIconCropper({\n\t\t\t\t\t\timgSelectOptions: this.calculateImageSelectOptions,\n\t\t\t\t\t\tcontrol: this\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tthis.frame.on( 'select', this.onSelect, this );\n\t\t\tthis.frame.on( 'cropped', this.onCropped, this );\n\t\t\tthis.frame.on( 'skippedcrop', this.onSkippedCrop, this );\n\t\t},\n\n\t\t/**\n\t\t * After an image is selected in the media modal, switch to the cropper\n\t\t * state if the image isn't the right size.\n\t\t */\n\t\tonSelect: function() {\n\t\t\tvar attachment = this.frame.state().get( 'selection' ).first().toJSON(),\n\t\t\t\tcontroller = this;\n\n\t\t\tif ( this.params.width === attachment.width && this.params.height === attachment.height && ! this.params.flex_width && ! this.params.flex_height ) {\n\t\t\t\twp.ajax.post( 'crop-image', {\n\t\t\t\t\tnonce: attachment.nonces.edit,\n\t\t\t\t\tid: attachment.id,\n\t\t\t\t\tcontext: 'site-icon',\n\t\t\t\t\tcropDetails: {\n\t\t\t\t\t\tx1: 0,\n\t\t\t\t\t\ty1: 0,\n\t\t\t\t\t\twidth: this.params.width,\n\t\t\t\t\t\theight: this.params.height,\n\t\t\t\t\t\tdst_width: this.params.width,\n\t\t\t\t\t\tdst_height: this.params.height\n\t\t\t\t\t}\n\t\t\t\t} ).done( function( croppedImage ) {\n\t\t\t\t\tcontroller.setImageFromAttachment( croppedImage );\n\t\t\t\t\tcontroller.frame.close();\n\t\t\t\t} ).fail( function() {\n\t\t\t\t\tcontroller.frame.trigger('content:error:crop');\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tthis.frame.setState( 'cropper' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Updates the setting and re-renders the control UI.\n\t\t *\n\t\t * @param {object} attachment\n\t\t */\n\t\tsetImageFromAttachment: function( attachment ) {\n\t\t\tvar sizes = [ 'site_icon-32', 'thumbnail', 'full' ], link,\n\t\t\t\ticon;\n\n\t\t\t_.each( sizes, function( size ) {\n\t\t\t\tif ( ! icon && ! _.isUndefined ( attachment.sizes[ size ] ) ) {\n\t\t\t\t\ticon = attachment.sizes[ size ];\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.params.attachment = attachment;\n\n\t\t\t// Set the Customizer setting; the callback takes care of rendering.\n\t\t\tthis.setting( attachment.id );\n\n\t\t\tif ( ! icon ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Update the icon in-browser.\n\t\t\tlink = $( 'link[rel=\"icon\"][sizes=\"32x32\"]' );\n\t\t\tlink.attr( 'href', icon.url );\n\t\t},\n\n\t\t/**\n\t\t * Called when the \"Remove\" link is clicked. Empties the setting.\n\t\t *\n\t\t * @param {object} event jQuery Event object\n\t\t */\n\t\tremoveFile: function( event ) {\n\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.params.attachment = {};\n\t\t\tthis.setting( '' );\n\t\t\tthis.renderContent(); // Not bound to setting change when emptying.\n\t\t\t$( 'link[rel=\"icon\"][sizes=\"32x32\"]' ).attr( 'href', '/favicon.ico' ); // Set to default.\n\t\t}\n\t});\n\n\t/**\n\t * @class\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.HeaderControl = api.Control.extend({\n\t\tready: function() {\n\t\t\tthis.btnRemove = $('#customize-control-header_image .actions .remove');\n\t\t\tthis.btnNew    = $('#customize-control-header_image .actions .new');\n\n\t\t\t_.bindAll(this, 'openMedia', 'removeImage');\n\n\t\t\tthis.btnNew.on( 'click', this.openMedia );\n\t\t\tthis.btnRemove.on( 'click', this.removeImage );\n\n\t\t\tapi.HeaderTool.currentHeader = this.getInitialHeaderImage();\n\n\t\t\tnew api.HeaderTool.CurrentView({\n\t\t\t\tmodel: api.HeaderTool.currentHeader,\n\t\t\t\tel: '#customize-control-header_image .current .container'\n\t\t\t});\n\n\t\t\tnew api.HeaderTool.ChoiceListView({\n\t\t\t\tcollection: api.HeaderTool.UploadsList = new api.HeaderTool.ChoiceList(),\n\t\t\t\tel: '#customize-control-header_image .choices .uploaded .list'\n\t\t\t});\n\n\t\t\tnew api.HeaderTool.ChoiceListView({\n\t\t\t\tcollection: api.HeaderTool.DefaultsList = new api.HeaderTool.DefaultsList(),\n\t\t\t\tel: '#customize-control-header_image .choices .default .list'\n\t\t\t});\n\n\t\t\tapi.HeaderTool.combinedList = api.HeaderTool.CombinedList = new api.HeaderTool.CombinedList([\n\t\t\t\tapi.HeaderTool.UploadsList,\n\t\t\t\tapi.HeaderTool.DefaultsList\n\t\t\t]);\n\n\t\t\t// Ensure custom-header-crop Ajax requests bootstrap the Customizer to activate the previewed theme.\n\t\t\twp.media.controller.Cropper.prototype.defaults.doCropArgs.wp_customize = 'on';\n\t\t\twp.media.controller.Cropper.prototype.defaults.doCropArgs.customize_theme = api.settings.theme.stylesheet;\n\t\t},\n\n\t\t/**\n\t\t * Returns a new instance of api.HeaderTool.ImageModel based on the currently\n\t\t * saved header image (if any).\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @returns {Object} Options\n\t\t */\n\t\tgetInitialHeaderImage: function() {\n\t\t\tif ( ! api.get().header_image || ! api.get().header_image_data || _.contains( [ 'remove-header', 'random-default-image', 'random-uploaded-image' ], api.get().header_image ) ) {\n\t\t\t\treturn new api.HeaderTool.ImageModel();\n\t\t\t}\n\n\t\t\t// Get the matching uploaded image object.\n\t\t\tvar currentHeaderObject = _.find( _wpCustomizeHeader.uploads, function( imageObj ) {\n\t\t\t\treturn ( imageObj.attachment_id === api.get().header_image_data.attachment_id );\n\t\t\t} );\n\t\t\t// Fall back to raw current header image.\n\t\t\tif ( ! currentHeaderObject ) {\n\t\t\t\tcurrentHeaderObject = {\n\t\t\t\t\turl: api.get().header_image,\n\t\t\t\t\tthumbnail_url: api.get().header_image,\n\t\t\t\t\tattachment_id: api.get().header_image_data.attachment_id\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn new api.HeaderTool.ImageModel({\n\t\t\t\theader: currentHeaderObject,\n\t\t\t\tchoice: currentHeaderObject.url.split( '/' ).pop()\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Returns a set of options, computed from the attached image data and\n\t\t * theme-specific data, to be fed to the imgAreaSelect plugin in\n\t\t * wp.media.view.Cropper.\n\t\t *\n\t\t * @param {wp.media.model.Attachment} attachment\n\t\t * @param {wp.media.controller.Cropper} controller\n\t\t * @returns {Object} Options\n\t\t */\n\t\tcalculateImageSelectOptions: function(attachment, controller) {\n\t\t\tvar xInit = parseInt(_wpCustomizeHeader.data.width, 10),\n\t\t\t\tyInit = parseInt(_wpCustomizeHeader.data.height, 10),\n\t\t\t\tflexWidth = !! parseInt(_wpCustomizeHeader.data['flex-width'], 10),\n\t\t\t\tflexHeight = !! parseInt(_wpCustomizeHeader.data['flex-height'], 10),\n\t\t\t\tratio, xImg, yImg, realHeight, realWidth,\n\t\t\t\timgSelectOptions;\n\n\t\t\trealWidth = attachment.get('width');\n\t\t\trealHeight = attachment.get('height');\n\n\t\t\tthis.headerImage = new api.HeaderTool.ImageModel();\n\t\t\tthis.headerImage.set({\n\t\t\t\tthemeWidth: xInit,\n\t\t\t\tthemeHeight: yInit,\n\t\t\t\tthemeFlexWidth: flexWidth,\n\t\t\t\tthemeFlexHeight: flexHeight,\n\t\t\t\timageWidth: realWidth,\n\t\t\t\timageHeight: realHeight\n\t\t\t});\n\n\t\t\tcontroller.set( 'canSkipCrop', ! this.headerImage.shouldBeCropped() );\n\n\t\t\tratio = xInit / yInit;\n\t\t\txImg = realWidth;\n\t\t\tyImg = realHeight;\n\n\t\t\tif ( xImg / yImg > ratio ) {\n\t\t\t\tyInit = yImg;\n\t\t\t\txInit = yInit * ratio;\n\t\t\t} else {\n\t\t\t\txInit = xImg;\n\t\t\t\tyInit = xInit / ratio;\n\t\t\t}\n\n\t\t\timgSelectOptions = {\n\t\t\t\thandles: true,\n\t\t\t\tkeys: true,\n\t\t\t\tinstance: true,\n\t\t\t\tpersistent: true,\n\t\t\t\timageWidth: realWidth,\n\t\t\t\timageHeight: realHeight,\n\t\t\t\tx1: 0,\n\t\t\t\ty1: 0,\n\t\t\t\tx2: xInit,\n\t\t\t\ty2: yInit\n\t\t\t};\n\n\t\t\tif (flexHeight === false && flexWidth === false) {\n\t\t\t\timgSelectOptions.aspectRatio = xInit + ':' + yInit;\n\t\t\t}\n\t\t\tif (flexHeight === false ) {\n\t\t\t\timgSelectOptions.maxHeight = yInit;\n\t\t\t}\n\t\t\tif (flexWidth === false ) {\n\t\t\t\timgSelectOptions.maxWidth = xInit;\n\t\t\t}\n\n\t\t\treturn imgSelectOptions;\n\t\t},\n\n\t\t/**\n\t\t * Sets up and opens the Media Manager in order to select an image.\n\t\t * Depending on both the size of the image and the properties of the\n\t\t * current theme, a cropping step after selection may be required or\n\t\t * skippable.\n\t\t *\n\t\t * @param {event} event\n\t\t */\n\t\topenMedia: function(event) {\n\t\t\tvar l10n = _wpMediaViewsL10n;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.frame = wp.media({\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: l10n.selectAndCrop,\n\t\t\t\t\tclose: false\n\t\t\t\t},\n\t\t\t\tstates: [\n\t\t\t\t\tnew wp.media.controller.Library({\n\t\t\t\t\t\ttitle:     l10n.chooseImage,\n\t\t\t\t\t\tlibrary:   wp.media.query({ type: 'image' }),\n\t\t\t\t\t\tmultiple:  false,\n\t\t\t\t\t\tdate:      false,\n\t\t\t\t\t\tpriority:  20,\n\t\t\t\t\t\tsuggestedWidth: _wpCustomizeHeader.data.width,\n\t\t\t\t\t\tsuggestedHeight: _wpCustomizeHeader.data.height\n\t\t\t\t\t}),\n\t\t\t\t\tnew wp.media.controller.Cropper({\n\t\t\t\t\t\timgSelectOptions: this.calculateImageSelectOptions\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tthis.frame.on('select', this.onSelect, this);\n\t\t\tthis.frame.on('cropped', this.onCropped, this);\n\t\t\tthis.frame.on('skippedcrop', this.onSkippedCrop, this);\n\n\t\t\tthis.frame.open();\n\t\t},\n\n\t\t/**\n\t\t * After an image is selected in the media modal,\n\t\t * switch to the cropper state.\n\t\t */\n\t\tonSelect: function() {\n\t\t\tthis.frame.setState('cropper');\n\t\t},\n\n\t\t/**\n\t\t * After the image has been cropped, apply the cropped image data to the setting.\n\t\t *\n\t\t * @param {object} croppedImage Cropped attachment data.\n\t\t */\n\t\tonCropped: function(croppedImage) {\n\t\t\tvar url = croppedImage.url,\n\t\t\t\tattachmentId = croppedImage.attachment_id,\n\t\t\t\tw = croppedImage.width,\n\t\t\t\th = croppedImage.height;\n\t\t\tthis.setImageFromURL(url, attachmentId, w, h);\n\t\t},\n\n\t\t/**\n\t\t * If cropping was skipped, apply the image data directly to the setting.\n\t\t *\n\t\t * @param {object} selection\n\t\t */\n\t\tonSkippedCrop: function(selection) {\n\t\t\tvar url = selection.get('url'),\n\t\t\t\tw = selection.get('width'),\n\t\t\t\th = selection.get('height');\n\t\t\tthis.setImageFromURL(url, selection.id, w, h);\n\t\t},\n\n\t\t/**\n\t\t * Creates a new wp.customize.HeaderTool.ImageModel from provided\n\t\t * header image data and inserts it into the user-uploaded headers\n\t\t * collection.\n\t\t *\n\t\t * @param {String} url\n\t\t * @param {Number} attachmentId\n\t\t * @param {Number} width\n\t\t * @param {Number} height\n\t\t */\n\t\tsetImageFromURL: function(url, attachmentId, width, height) {\n\t\t\tvar choice, data = {};\n\n\t\t\tdata.url = url;\n\t\t\tdata.thumbnail_url = url;\n\t\t\tdata.timestamp = _.now();\n\n\t\t\tif (attachmentId) {\n\t\t\t\tdata.attachment_id = attachmentId;\n\t\t\t}\n\n\t\t\tif (width) {\n\t\t\t\tdata.width = width;\n\t\t\t}\n\n\t\t\tif (height) {\n\t\t\t\tdata.height = height;\n\t\t\t}\n\n\t\t\tchoice = new api.HeaderTool.ImageModel({\n\t\t\t\theader: data,\n\t\t\t\tchoice: url.split('/').pop()\n\t\t\t});\n\t\t\tapi.HeaderTool.UploadsList.add(choice);\n\t\t\tapi.HeaderTool.currentHeader.set(choice.toJSON());\n\t\t\tchoice.save();\n\t\t\tchoice.importImage();\n\t\t},\n\n\t\t/**\n\t\t * Triggers the necessary events to deselect an image which was set as\n\t\t * the currently selected one.\n\t\t */\n\t\tremoveImage: function() {\n\t\t\tapi.HeaderTool.currentHeader.trigger('hide');\n\t\t\tapi.HeaderTool.CombinedList.trigger('control:removeImage');\n\t\t}\n\n\t});\n\n\t/**\n\t * wp.customize.ThemeControl\n\t *\n\t * @constructor\n\t * @augments wp.customize.Control\n\t * @augments wp.customize.Class\n\t */\n\tapi.ThemeControl = api.Control.extend({\n\n\t\ttouchDrag: false,\n\t\tisRendered: false,\n\n\t\t/**\n\t\t * Defer rendering the theme control until the section is displayed.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\trenderContent: function () {\n\t\t\tvar control = this,\n\t\t\t\trenderContentArgs = arguments;\n\n\t\t\tapi.section( control.section(), function( section ) {\n\t\t\t\tif ( section.expanded() ) {\n\t\t\t\t\tapi.Control.prototype.renderContent.apply( control, renderContentArgs );\n\t\t\t\t\tcontrol.isRendered = true;\n\t\t\t\t} else {\n\t\t\t\t\tsection.expanded.bind( function( expanded ) {\n\t\t\t\t\t\tif ( expanded && ! control.isRendered ) {\n\t\t\t\t\t\t\tapi.Control.prototype.renderContent.apply( control, renderContentArgs );\n\t\t\t\t\t\t\tcontrol.isRendered = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * @since 4.2.0\n\t\t */\n\t\tready: function() {\n\t\t\tvar control = this;\n\n\t\t\tcontrol.container.on( 'touchmove', '.theme', function() {\n\t\t\t\tcontrol.touchDrag = true;\n\t\t\t});\n\n\t\t\t// Bind details view trigger.\n\t\t\tcontrol.container.on( 'click keydown touchend', '.theme', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Bail if the user scrolled on a touch device.\n\t\t\t\tif ( control.touchDrag === true ) {\n\t\t\t\t\treturn control.touchDrag = false;\n\t\t\t\t}\n\n\t\t\t\t// Prevent the modal from showing when the user clicks the action button.\n\t\t\t\tif ( $( event.target ).is( '.theme-actions .button' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapi.section( control.section() ).loadThemePreview( control.params.theme.id );\n\t\t\t});\n\n\t\t\tcontrol.container.on( 'click keydown', '.theme-actions .theme-details', function( event ) {\n\t\t\t\tif ( api.utils.isKeydownButNotEnterEvent( event ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault(); // Keep this AFTER the key filter above\n\n\t\t\t\tapi.section( control.section() ).showDetails( control.params.theme );\n\t\t\t});\n\n\t\t\tcontrol.container.on( 'render-screenshot', function() {\n\t\t\t\tvar $screenshot = $( this ).find( 'img' ),\n\t\t\t\t\tsource = $screenshot.data( 'src' );\n\n\t\t\t\tif ( source ) {\n\t\t\t\t\t$screenshot.attr( 'src', source );\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Show or hide the theme based on the presence of the term in the title, description, and author.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\tfilter: function( term ) {\n\t\t\tvar control = this,\n\t\t\t\thaystack = control.params.theme.name + ' ' +\n\t\t\t\t\tcontrol.params.theme.description + ' ' +\n\t\t\t\t\tcontrol.params.theme.tags + ' ' +\n\t\t\t\t\tcontrol.params.theme.author;\n\t\t\thaystack = haystack.toLowerCase().replace( '-', ' ' );\n\t\t\tif ( -1 !== haystack.search( term ) ) {\n\t\t\t\tcontrol.activate();\n\t\t\t} else {\n\t\t\t\tcontrol.deactivate();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Change objects contained within the main customize object to Settings.\n\tapi.defaultConstructor = api.Setting;\n\n\t// Create the collections for Controls, Sections and Panels.\n\tapi.control = new api.Values({ defaultConstructor: api.Control });\n\tapi.section = new api.Values({ defaultConstructor: api.Section });\n\tapi.panel = new api.Values({ defaultConstructor: api.Panel });\n\n\t/**\n\t * An object that fetches a preview in the background of the document, which\n\t * allows for seamless replacement of an existing preview.\n\t *\n\t * @class\n\t * @augments wp.customize.Messenger\n\t * @augments wp.customize.Class\n\t * @mixes wp.customize.Events\n\t */\n\tapi.PreviewFrame = api.Messenger.extend({\n\t\tsensitivity: null, // Will get set to api.settings.timeouts.previewFrameSensitivity.\n\n\t\t/**\n\t\t * Initialize the PreviewFrame.\n\t\t *\n\t\t * @param {object} params.container\n\t\t * @param {object} params.previewUrl\n\t\t * @param {object} params.query\n\t\t * @param {object} options\n\t\t */\n\t\tinitialize: function( params, options ) {\n\t\t\tvar deferred = $.Deferred();\n\n\t\t\t/*\n\t\t\t * Make the instance of the PreviewFrame the promise object\n\t\t\t * so other objects can easily interact with it.\n\t\t\t */\n\t\t\tdeferred.promise( this );\n\n\t\t\tthis.container = params.container;\n\n\t\t\t$.extend( params, { channel: api.PreviewFrame.uuid() });\n\n\t\t\tapi.Messenger.prototype.initialize.call( this, params, options );\n\n\t\t\tthis.add( 'previewUrl', params.previewUrl );\n\n\t\t\tthis.query = $.extend( params.query || {}, { customize_messenger_channel: this.channel() });\n\n\t\t\tthis.run( deferred );\n\t\t},\n\n\t\t/**\n\t\t * Run the preview request.\n\t\t *\n\t\t * @param {object} deferred jQuery Deferred object to be resolved with\n\t\t *                          the request.\n\t\t */\n\t\trun: function( deferred ) {\n\t\t\tvar previewFrame = this,\n\t\t\t\tloaded = false,\n\t\t\t\tready = false,\n\t\t\t\treadyData = null,\n\t\t\t\thasPendingChangesetUpdate = '{}' !== previewFrame.query.customized,\n\t\t\t\turlParser,\n\t\t\t\tparams,\n\t\t\t\tform;\n\n\t\t\tif ( previewFrame._ready ) {\n\t\t\t\tpreviewFrame.unbind( 'ready', previewFrame._ready );\n\t\t\t}\n\n\t\t\tpreviewFrame._ready = function( data ) {\n\t\t\t\tready = true;\n\t\t\t\treadyData = data;\n\t\t\t\tpreviewFrame.container.addClass( 'iframe-ready' );\n\t\t\t\tif ( ! data ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( loaded ) {\n\t\t\t\t\tdeferred.resolveWith( previewFrame, [ data ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tpreviewFrame.bind( 'ready', previewFrame._ready );\n\n\t\t\turlParser = document.createElement( 'a' );\n\t\t\turlParser.href = previewFrame.previewUrl();\n\n\t\t\tparams = _.extend(\n\t\t\t\tapi.utils.parseQueryString( urlParser.search.substr( 1 ) ),\n\t\t\t\t{\n\t\t\t\t\tcustomize_changeset_uuid: previewFrame.query.customize_changeset_uuid,\n\t\t\t\t\tcustomize_theme: previewFrame.query.customize_theme,\n\t\t\t\t\tcustomize_messenger_channel: previewFrame.query.customize_messenger_channel\n\t\t\t\t}\n\t\t\t);\n\n\t\t\turlParser.search = $.param( params );\n\t\t\tpreviewFrame.iframe = $( '<iframe />', {\n\t\t\t\ttitle: api.l10n.previewIframeTitle,\n\t\t\t\tname: 'customize-' + previewFrame.channel()\n\t\t\t} );\n\t\t\tpreviewFrame.iframe.attr( 'onmousewheel', '' ); // Workaround for Safari bug. See WP Trac #38149.\n\n\t\t\tif ( ! hasPendingChangesetUpdate ) {\n\t\t\t\tpreviewFrame.iframe.attr( 'src', urlParser.href );\n\t\t\t} else {\n\t\t\t\tpreviewFrame.iframe.attr( 'data-src', urlParser.href ); // For debugging purposes.\n\t\t\t}\n\n\t\t\tpreviewFrame.iframe.appendTo( previewFrame.container );\n\t\t\tpreviewFrame.targetWindow( previewFrame.iframe[0].contentWindow );\n\n\t\t\t/*\n\t\t\t * Submit customized data in POST request to preview frame window since\n\t\t\t * there are setting value changes not yet written to changeset.\n\t\t\t */\n\t\t\tif ( hasPendingChangesetUpdate ) {\n\t\t\t\tform = $( '<form>', {\n\t\t\t\t\taction: urlParser.href,\n\t\t\t\t\ttarget: previewFrame.iframe.attr( 'name' ),\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\thidden: 'hidden'\n\t\t\t\t} );\n\t\t\t\tform.append( $( '<input>', {\n\t\t\t\t\ttype: 'hidden',\n\t\t\t\t\tname: '_method',\n\t\t\t\t\tvalue: 'GET'\n\t\t\t\t} ) );\n\t\t\t\t_.each( previewFrame.query, function( value, key ) {\n\t\t\t\t\tform.append( $( '<input>', {\n\t\t\t\t\t\ttype: 'hidden',\n\t\t\t\t\t\tname: key,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t} ) );\n\t\t\t\t} );\n\t\t\t\tpreviewFrame.container.append( form );\n\t\t\t\tform.submit();\n\t\t\t\tform.remove(); // No need to keep the form around after submitted.\n\t\t\t}\n\n\t\t\tpreviewFrame.bind( 'iframe-loading-error', function( error ) {\n\t\t\t\tpreviewFrame.iframe.remove();\n\n\t\t\t\t// Check if the user is not logged in.\n\t\t\t\tif ( 0 === error ) {\n\t\t\t\t\tpreviewFrame.login( deferred );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check for cheaters.\n\t\t\t\tif ( -1 === error ) {\n\t\t\t\t\tdeferred.rejectWith( previewFrame, [ 'cheatin' ] );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdeferred.rejectWith( previewFrame, [ 'request failure' ] );\n\t\t\t} );\n\n\t\t\tpreviewFrame.iframe.one( 'load', function() {\n\t\t\t\tloaded = true;\n\n\t\t\t\tif ( ready ) {\n\t\t\t\t\tdeferred.resolveWith( previewFrame, [ readyData ] );\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\tdeferred.rejectWith( previewFrame, [ 'ready timeout' ] );\n\t\t\t\t\t}, previewFrame.sensitivity );\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tlogin: function( deferred ) {\n\t\t\tvar self = this,\n\t\t\t\treject;\n\n\t\t\treject = function() {\n\t\t\t\tdeferred.rejectWith( self, [ 'logged out' ] );\n\t\t\t};\n\n\t\t\tif ( this.triedLogin ) {\n\t\t\t\treturn reject();\n\t\t\t}\n\n\t\t\t// Check if we have an admin cookie.\n\t\t\t$.get( api.settings.url.ajax, {\n\t\t\t\taction: 'logged-in'\n\t\t\t}).fail( reject ).done( function( response ) {\n\t\t\t\tvar iframe;\n\n\t\t\t\tif ( '1' !== response ) {\n\t\t\t\t\treject();\n\t\t\t\t}\n\n\t\t\t\tiframe = $( '<iframe />', { 'src': self.previewUrl(), 'title': api.l10n.previewIframeTitle } ).hide();\n\t\t\t\tiframe.appendTo( self.container );\n\t\t\t\tiframe.on( 'load', function() {\n\t\t\t\t\tself.triedLogin = true;\n\n\t\t\t\t\tiframe.remove();\n\t\t\t\t\tself.run( deferred );\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tdestroy: function() {\n\t\t\tapi.Messenger.prototype.destroy.call( this );\n\n\t\t\tif ( this.iframe ) {\n\t\t\t\tthis.iframe.remove();\n\t\t\t}\n\n\t\t\tdelete this.iframe;\n\t\t\tdelete this.targetWindow;\n\t\t}\n\t});\n\n\t(function(){\n\t\tvar id = 0;\n\t\t/**\n\t\t * Return an incremented ID for a preview messenger channel.\n\t\t *\n\t\t * This function is named \"uuid\" for historical reasons, but it is a\n\t\t * misnomer as it is not an actual UUID, and it is not universally unique.\n\t\t * This is not to be confused with `api.settings.changeset.uuid`.\n\t\t *\n\t\t * @return {string}\n\t\t */\n\t\tapi.PreviewFrame.uuid = function() {\n\t\t\treturn 'preview-' + String( id++ );\n\t\t};\n\t}());\n\n\t/**\n\t * Set the document title of the customizer.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param {string} documentTitle\n\t */\n\tapi.setDocumentTitle = function ( documentTitle ) {\n\t\tvar tmpl, title;\n\t\ttmpl = api.settings.documentTitleTmpl;\n\t\ttitle = tmpl.replace( '%s', documentTitle );\n\t\tdocument.title = title;\n\t\tapi.trigger( 'title', title );\n\t};\n\n\t/**\n\t * @class\n\t * @augments wp.customize.Messenger\n\t * @augments wp.customize.Class\n\t * @mixes wp.customize.Events\n\t */\n\tapi.Previewer = api.Messenger.extend({\n\t\trefreshBuffer: null, // Will get set to api.settings.timeouts.windowRefresh.\n\n\t\t/**\n\t\t * @param {array}  params.allowedUrls\n\t\t * @param {string} params.container   A selector or jQuery element for the preview\n\t\t *                                    frame to be placed.\n\t\t * @param {string} params.form\n\t\t * @param {string} params.previewUrl  The URL to preview.\n\t\t * @param {object} options\n\t\t */\n\t\tinitialize: function( params, options ) {\n\t\t\tvar previewer = this,\n\t\t\t\turlParser = document.createElement( 'a' );\n\n\t\t\t$.extend( previewer, options || {} );\n\t\t\tpreviewer.deferred = {\n\t\t\t\tactive: $.Deferred()\n\t\t\t};\n\n\t\t\t// Debounce to prevent hammering server and then wait for any pending update requests.\n\t\t\tpreviewer.refresh = _.debounce(\n\t\t\t\t( function( originalRefresh ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tvar isProcessingComplete, refreshOnceProcessingComplete;\n\t\t\t\t\t\tisProcessingComplete = function() {\n\t\t\t\t\t\t\treturn 0 === api.state( 'processing' ).get();\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif ( isProcessingComplete() ) {\n\t\t\t\t\t\t\toriginalRefresh.call( previewer );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trefreshOnceProcessingComplete = function() {\n\t\t\t\t\t\t\t\tif ( isProcessingComplete() ) {\n\t\t\t\t\t\t\t\t\toriginalRefresh.call( previewer );\n\t\t\t\t\t\t\t\t\tapi.state( 'processing' ).unbind( refreshOnceProcessingComplete );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tapi.state( 'processing' ).bind( refreshOnceProcessingComplete );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}( previewer.refresh ) ),\n\t\t\t\tpreviewer.refreshBuffer\n\t\t\t);\n\n\t\t\tpreviewer.container   = api.ensure( params.container );\n\t\t\tpreviewer.allowedUrls = params.allowedUrls;\n\n\t\t\tparams.url = window.location.href;\n\n\t\t\tapi.Messenger.prototype.initialize.call( previewer, params );\n\n\t\t\turlParser.href = previewer.origin();\n\t\t\tpreviewer.add( 'scheme', urlParser.protocol.replace( /:$/, '' ) );\n\n\t\t\t// Limit the URL to internal, front-end links.\n\t\t\t//\n\t\t\t// If the front end and the admin are served from the same domain, load the\n\t\t\t// preview over ssl if the Customizer is being loaded over ssl. This avoids\n\t\t\t// insecure content warnings. This is not attempted if the admin and front end\n\t\t\t// are on different domains to avoid the case where the front end doesn't have\n\t\t\t// ssl certs.\n\n\t\t\tpreviewer.add( 'previewUrl', params.previewUrl ).setter( function( to ) {\n\t\t\t\tvar result = null, urlParser, queryParams, parsedAllowedUrl, parsedCandidateUrls = [];\n\t\t\t\turlParser = document.createElement( 'a' );\n\t\t\t\turlParser.href = to;\n\n\t\t\t\t// Abort if URL is for admin or (static) files in wp-includes or wp-content.\n\t\t\t\tif ( /\\/wp-(admin|includes|content)(\\/|$)/.test( urlParser.pathname ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Remove state query params.\n\t\t\t\tif ( urlParser.search.length > 1 ) {\n\t\t\t\t\tqueryParams = api.utils.parseQueryString( urlParser.search.substr( 1 ) );\n\t\t\t\t\tdelete queryParams.customize_changeset_uuid;\n\t\t\t\t\tdelete queryParams.customize_theme;\n\t\t\t\t\tdelete queryParams.customize_messenger_channel;\n\t\t\t\t\tif ( _.isEmpty( queryParams ) ) {\n\t\t\t\t\t\turlParser.search = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\turlParser.search = $.param( queryParams );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tparsedCandidateUrls.push( urlParser );\n\n\t\t\t\t// Prepend list with URL that matches the scheme/protocol of the iframe.\n\t\t\t\tif ( previewer.scheme.get() + ':' !== urlParser.protocol ) {\n\t\t\t\t\turlParser = document.createElement( 'a' );\n\t\t\t\t\turlParser.href = parsedCandidateUrls[0].href;\n\t\t\t\t\turlParser.protocol = previewer.scheme.get() + ':';\n\t\t\t\t\tparsedCandidateUrls.unshift( urlParser );\n\t\t\t\t}\n\n\t\t\t\t// Attempt to match the URL to the control frame's scheme and check if it's allowed. If not, try the original URL.\n\t\t\t\tparsedAllowedUrl = document.createElement( 'a' );\n\t\t\t\t_.find( parsedCandidateUrls, function( parsedCandidateUrl ) {\n\t\t\t\t\treturn ! _.isUndefined( _.find( previewer.allowedUrls, function( allowedUrl ) {\n\t\t\t\t\t\tparsedAllowedUrl.href = allowedUrl;\n\t\t\t\t\t\tif ( urlParser.protocol === parsedAllowedUrl.protocol && urlParser.host === parsedAllowedUrl.host && 0 === urlParser.pathname.indexOf( parsedAllowedUrl.pathname.replace( /\\/$/, '' ) ) ) {\n\t\t\t\t\t\t\tresult = parsedCandidateUrl.href;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) );\n\t\t\t\t} );\n\n\t\t\t\treturn result;\n\t\t\t});\n\n\t\t\tpreviewer.bind( 'ready', previewer.ready );\n\n\t\t\t// Start listening for keep-alive messages when iframe first loads.\n\t\t\tpreviewer.deferred.active.done( _.bind( previewer.keepPreviewAlive, previewer ) );\n\n\t\t\tpreviewer.bind( 'synced', function() {\n\t\t\t\tpreviewer.send( 'active' );\n\t\t\t} );\n\n\t\t\t// Refresh the preview when the URL is changed (but not yet).\n\t\t\tpreviewer.previewUrl.bind( previewer.refresh );\n\n\t\t\tpreviewer.scroll = 0;\n\t\t\tpreviewer.bind( 'scroll', function( distance ) {\n\t\t\t\tpreviewer.scroll = distance;\n\t\t\t});\n\n\t\t\t// Update the URL when the iframe sends a URL message, resetting scroll position. If URL is unchanged, then refresh.\n\t\t\tpreviewer.bind( 'url', function( url ) {\n\t\t\t\tvar onUrlChange, urlChanged = false;\n\t\t\t\tpreviewer.scroll = 0;\n\t\t\t\tonUrlChange = function() {\n\t\t\t\t\turlChanged = true;\n\t\t\t\t};\n\t\t\t\tpreviewer.previewUrl.bind( onUrlChange );\n\t\t\t\tpreviewer.previewUrl.set( url );\n\t\t\t\tpreviewer.previewUrl.unbind( onUrlChange );\n\t\t\t\tif ( ! urlChanged ) {\n\t\t\t\t\tpreviewer.refresh();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Update the document title when the preview changes.\n\t\t\tpreviewer.bind( 'documentTitle', function ( title ) {\n\t\t\t\tapi.setDocumentTitle( title );\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Handle the preview receiving the ready message.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access public\n\t\t *\n\t\t * @param {object} data - Data from preview.\n\t\t * @param {string} data.currentUrl - Current URL.\n\t\t * @param {object} data.activePanels - Active panels.\n\t\t * @param {object} data.activeSections Active sections.\n\t\t * @param {object} data.activeControls Active controls.\n\t\t * @returns {void}\n\t\t */\n\t\tready: function( data ) {\n\t\t\tvar previewer = this, synced = {}, constructs;\n\n\t\t\tsynced.settings = api.get();\n\t\t\tsynced['settings-modified-while-loading'] = previewer.settingsModifiedWhileLoading;\n\t\t\tif ( 'resolved' !== previewer.deferred.active.state() || previewer.loading ) {\n\t\t\t\tsynced.scroll = previewer.scroll;\n\t\t\t}\n\t\t\tsynced['edit-shortcut-visibility'] = api.state( 'editShortcutVisibility' ).get();\n\t\t\tpreviewer.send( 'sync', synced );\n\n\t\t\t// Set the previewUrl without causing the url to set the iframe.\n\t\t\tif ( data.currentUrl ) {\n\t\t\t\tpreviewer.previewUrl.unbind( previewer.refresh );\n\t\t\t\tpreviewer.previewUrl.set( data.currentUrl );\n\t\t\t\tpreviewer.previewUrl.bind( previewer.refresh );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Walk over all panels, sections, and controls and set their\n\t\t\t * respective active states to true if the preview explicitly\n\t\t\t * indicates as such.\n\t\t\t */\n\t\t\tconstructs = {\n\t\t\t\tpanel: data.activePanels,\n\t\t\t\tsection: data.activeSections,\n\t\t\t\tcontrol: data.activeControls\n\t\t\t};\n\t\t\t_( constructs ).each( function ( activeConstructs, type ) {\n\t\t\t\tapi[ type ].each( function ( construct, id ) {\n\t\t\t\t\tvar isDynamicallyCreated = _.isUndefined( api.settings[ type + 's' ][ id ] );\n\n\t\t\t\t\t/*\n\t\t\t\t\t * If the construct was created statically in PHP (not dynamically in JS)\n\t\t\t\t\t * then consider a missing (undefined) value in the activeConstructs to\n\t\t\t\t\t * mean it should be deactivated (since it is gone). But if it is\n\t\t\t\t\t * dynamically created then only toggle activation if the value is defined,\n\t\t\t\t\t * as this means that the construct was also then correspondingly\n\t\t\t\t\t * created statically in PHP and the active callback is available.\n\t\t\t\t\t * Otherwise, dynamically-created constructs should normally have\n\t\t\t\t\t * their active states toggled in JS rather than from PHP.\n\t\t\t\t\t */\n\t\t\t\t\tif ( ! isDynamicallyCreated || ! _.isUndefined( activeConstructs[ id ] ) ) {\n\t\t\t\t\t\tif ( activeConstructs[ id ] ) {\n\t\t\t\t\t\t\tconstruct.activate();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconstruct.deactivate();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tif ( data.settingValidities ) {\n\t\t\t\tapi._handleSettingValidities( {\n\t\t\t\t\tsettingValidities: data.settingValidities,\n\t\t\t\t\tfocusInvalidControl: false\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Keep the preview alive by listening for ready and keep-alive messages.\n\t\t *\n\t\t * If a message is not received in the allotted time then the iframe will be set back to the last known valid URL.\n\t\t *\n\t\t * @since 4.7.0\n\t\t * @access public\n\t\t *\n\t\t * @returns {void}\n\t\t */\n\t\tkeepPreviewAlive: function keepPreviewAlive() {\n\t\t\tvar previewer = this, keepAliveTick, timeoutId, handleMissingKeepAlive, scheduleKeepAliveCheck;\n\n\t\t\t/**\n\t\t\t * Schedule a preview keep-alive check.\n\t\t\t *\n\t\t\t * Note that if a page load takes longer than keepAliveCheck milliseconds,\n\t\t\t * the keep-alive messages will still be getting sent from the previous\n\t\t\t * URL.\n\t\t\t */\n\t\t\tscheduleKeepAliveCheck = function() {\n\t\t\t\ttimeoutId = setTimeout( handleMissingKeepAlive, api.settings.timeouts.keepAliveCheck );\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Set the previewerAlive state to true when receiving a message from the preview.\n\t\t\t */\n\t\t\tkeepAliveTick = function() {\n\t\t\t\tapi.state( 'previewerAlive' ).set( true );\n\t\t\t\tclearTimeout( timeoutId );\n\t\t\t\tscheduleKeepAliveCheck();\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Set the previewerAlive state to false if keepAliveCheck milliseconds have transpired without a message.\n\t\t\t *\n\t\t\t * This is most likely to happen in the case of a connectivity error, or if the theme causes the browser\n\t\t\t * to navigate to a non-allowed URL. Setting this state to false will force settings with a postMessage\n\t\t\t * transport to use refresh instead, causing the preview frame also to be replaced with the current\n\t\t\t * allowed preview URL.\n\t\t\t */\n\t\t\thandleMissingKeepAlive = function() {\n\t\t\t\tapi.state( 'previewerAlive' ).set( false );\n\t\t\t};\n\t\t\tscheduleKeepAliveCheck();\n\n\t\t\tpreviewer.bind( 'ready', keepAliveTick );\n\t\t\tpreviewer.bind( 'keep-alive', keepAliveTick );\n\t\t},\n\n\t\t/**\n\t\t * Query string data sent with each preview request.\n\t\t *\n\t\t * @abstract\n\t\t */\n\t\tquery: function() {},\n\n\t\tabort: function() {\n\t\t\tif ( this.loading ) {\n\t\t\t\tthis.loading.destroy();\n\t\t\t\tdelete this.loading;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Refresh the preview seamlessly.\n\t\t *\n\t\t * @since 3.4.0\n\t\t * @access public\n\t\t * @returns {void}\n\t\t */\n\t\trefresh: function() {\n\t\t\tvar previewer = this, onSettingChange;\n\n\t\t\t// Display loading indicator\n\t\t\tpreviewer.send( 'loading-initiated' );\n\n\t\t\tpreviewer.abort();\n\n\t\t\tpreviewer.loading = new api.PreviewFrame({\n\t\t\t\turl:        previewer.url(),\n\t\t\t\tpreviewUrl: previewer.previewUrl(),\n\t\t\t\tquery:      previewer.query( { excludeCustomizedSaved: true } ) || {},\n\t\t\t\tcontainer:  previewer.container\n\t\t\t});\n\n\t\t\tpreviewer.settingsModifiedWhileLoading = {};\n\t\t\tonSettingChange = function( setting ) {\n\t\t\t\tpreviewer.settingsModifiedWhileLoading[ setting.id ] = true;\n\t\t\t};\n\t\t\tapi.bind( 'change', onSettingChange );\n\t\t\tpreviewer.loading.always( function() {\n\t\t\t\tapi.unbind( 'change', onSettingChange );\n\t\t\t} );\n\n\t\t\tpreviewer.loading.done( function( readyData ) {\n\t\t\t\tvar loadingFrame = this, onceSynced;\n\n\t\t\t\tpreviewer.preview = loadingFrame;\n\t\t\t\tpreviewer.targetWindow( loadingFrame.targetWindow() );\n\t\t\t\tpreviewer.channel( loadingFrame.channel() );\n\n\t\t\t\tonceSynced = function() {\n\t\t\t\t\tloadingFrame.unbind( 'synced', onceSynced );\n\t\t\t\t\tif ( previewer._previousPreview ) {\n\t\t\t\t\t\tpreviewer._previousPreview.destroy();\n\t\t\t\t\t}\n\t\t\t\t\tpreviewer._previousPreview = previewer.preview;\n\t\t\t\t\tpreviewer.deferred.active.resolve();\n\t\t\t\t\tdelete previewer.loading;\n\t\t\t\t};\n\t\t\t\tloadingFrame.bind( 'synced', onceSynced );\n\n\t\t\t\t// This event will be received directly by the previewer in normal navigation; this is only needed for seamless refresh.\n\t\t\t\tpreviewer.trigger( 'ready', readyData );\n\t\t\t});\n\n\t\t\tpreviewer.loading.fail( function( reason ) {\n\t\t\t\tpreviewer.send( 'loading-failed' );\n\n\t\t\t\tif ( 'logged out' === reason ) {\n\t\t\t\t\tif ( previewer.preview ) {\n\t\t\t\t\t\tpreviewer.preview.destroy();\n\t\t\t\t\t\tdelete previewer.preview;\n\t\t\t\t\t}\n\n\t\t\t\t\tpreviewer.login().done( previewer.refresh );\n\t\t\t\t}\n\n\t\t\t\tif ( 'cheatin' === reason ) {\n\t\t\t\t\tpreviewer.cheatin();\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tlogin: function() {\n\t\t\tvar previewer = this,\n\t\t\t\tdeferred, messenger, iframe;\n\n\t\t\tif ( this._login )\n\t\t\t\treturn this._login;\n\n\t\t\tdeferred = $.Deferred();\n\t\t\tthis._login = deferred.promise();\n\n\t\t\tmessenger = new api.Messenger({\n\t\t\t\tchannel: 'login',\n\t\t\t\turl:     api.settings.url.login\n\t\t\t});\n\n\t\t\tiframe = $( '<iframe />', { 'src': api.settings.url.login, 'title': api.l10n.loginIframeTitle } ).appendTo( this.container );\n\n\t\t\tmessenger.targetWindow( iframe[0].contentWindow );\n\n\t\t\tmessenger.bind( 'login', function () {\n\t\t\t\tvar refreshNonces = previewer.refreshNonces();\n\n\t\t\t\trefreshNonces.always( function() {\n\t\t\t\t\tiframe.remove();\n\t\t\t\t\tmessenger.destroy();\n\t\t\t\t\tdelete previewer._login;\n\t\t\t\t});\n\n\t\t\t\trefreshNonces.done( function() {\n\t\t\t\t\tdeferred.resolve();\n\t\t\t\t});\n\n\t\t\t\trefreshNonces.fail( function() {\n\t\t\t\t\tpreviewer.cheatin();\n\t\t\t\t\tdeferred.reject();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn this._login;\n\t\t},\n\n\t\tcheatin: function() {\n\t\t\t$( document.body ).empty().addClass( 'cheatin' ).append(\n\t\t\t\t'<h1>' + api.l10n.cheatin + '</h1>' +\n\t\t\t\t'<p>' + api.l10n.notAllowed + '</p>'\n\t\t\t);\n\t\t},\n\n\t\trefreshNonces: function() {\n\t\t\tvar request, deferred = $.Deferred();\n\n\t\t\tdeferred.promise();\n\n\t\t\trequest = wp.ajax.post( 'customize_refresh_nonces', {\n\t\t\t\twp_customize: 'on',\n\t\t\t\tcustomize_theme: api.settings.theme.stylesheet\n\t\t\t});\n\n\t\t\trequest.done( function( response ) {\n\t\t\t\tapi.trigger( 'nonce-refresh', response );\n\t\t\t\tdeferred.resolve();\n\t\t\t});\n\n\t\t\trequest.fail( function() {\n\t\t\t\tdeferred.reject();\n\t\t\t});\n\n\t\t\treturn deferred;\n\t\t}\n\t});\n\n\tapi.settingConstructor = {};\n\tapi.controlConstructor = {\n\t\tcolor:               api.ColorControl,\n\t\tmedia:               api.MediaControl,\n\t\tupload:              api.UploadControl,\n\t\timage:               api.ImageControl,\n\t\tcropped_image:       api.CroppedImageControl,\n\t\tsite_icon:           api.SiteIconControl,\n\t\theader:              api.HeaderControl,\n\t\tbackground:          api.BackgroundControl,\n\t\tbackground_position: api.BackgroundPositionControl,\n\t\ttheme:               api.ThemeControl\n\t};\n\tapi.panelConstructor = {};\n\tapi.sectionConstructor = {\n\t\tthemes: api.ThemesSection\n\t};\n\n\t/**\n\t * Handle setting_validities in an error response for the customize-save request.\n\t *\n\t * Add notifications to the settings and focus on the first control that has an invalid setting.\n\t *\n\t * @since 4.6.0\n\t * @private\n\t *\n\t * @param {object}  args\n\t * @param {object}  args.settingValidities\n\t * @param {boolean} [args.focusInvalidControl=false]\n\t * @returns {void}\n\t */\n\tapi._handleSettingValidities = function handleSettingValidities( args ) {\n\t\tvar invalidSettingControls, invalidSettings = [], wasFocused = false;\n\n\t\t// Find the controls that correspond to each invalid setting.\n\t\t_.each( args.settingValidities, function( validity, settingId ) {\n\t\t\tvar setting = api( settingId );\n\t\t\tif ( setting ) {\n\n\t\t\t\t// Add notifications for invalidities.\n\t\t\t\tif ( _.isObject( validity ) ) {\n\t\t\t\t\t_.each( validity, function( params, code ) {\n\t\t\t\t\t\tvar notification, existingNotification, needsReplacement = false;\n\t\t\t\t\t\tnotification = new api.Notification( code, _.extend( { fromServer: true }, params ) );\n\n\t\t\t\t\t\t// Remove existing notification if already exists for code but differs in parameters.\n\t\t\t\t\t\texistingNotification = setting.notifications( notification.code );\n\t\t\t\t\t\tif ( existingNotification ) {\n\t\t\t\t\t\t\tneedsReplacement = notification.type !== existingNotification.type || notification.message !== existingNotification.message || ! _.isEqual( notification.data, existingNotification.data );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( needsReplacement ) {\n\t\t\t\t\t\t\tsetting.notifications.remove( code );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! setting.notifications.has( notification.code ) ) {\n\t\t\t\t\t\t\tsetting.notifications.add( code, notification );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinvalidSettings.push( setting.id );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// Remove notification errors that are no longer valid.\n\t\t\t\tsetting.notifications.each( function( notification ) {\n\t\t\t\t\tif ( notification.fromServer && 'error' === notification.type && ( true === validity || ! validity[ notification.code ] ) ) {\n\t\t\t\t\t\tsetting.notifications.remove( notification.code );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\tif ( args.focusInvalidControl ) {\n\t\t\tinvalidSettingControls = api.findControlsForSettings( invalidSettings );\n\n\t\t\t// Focus on the first control that is inside of an expanded section (one that is visible).\n\t\t\t_( _.values( invalidSettingControls ) ).find( function( controls ) {\n\t\t\t\treturn _( controls ).find( function( control ) {\n\t\t\t\t\tvar isExpanded = control.section() && api.section.has( control.section() ) && api.section( control.section() ).expanded();\n\t\t\t\t\tif ( isExpanded && control.expanded ) {\n\t\t\t\t\t\tisExpanded = control.expanded();\n\t\t\t\t\t}\n\t\t\t\t\tif ( isExpanded ) {\n\t\t\t\t\t\tcontrol.focus();\n\t\t\t\t\t\twasFocused = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn wasFocused;\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\t// Focus on the first invalid control.\n\t\t\tif ( ! wasFocused && ! _.isEmpty( invalidSettingControls ) ) {\n\t\t\t\t_.values( invalidSettingControls )[0][0].focus();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Find all controls associated with the given settings.\n\t *\n\t * @since 4.6.0\n\t * @param {string[]} settingIds Setting IDs.\n\t * @returns {object<string, wp.customize.Control>} Mapping setting ids to arrays of controls.\n\t */\n\tapi.findControlsForSettings = function findControlsForSettings( settingIds ) {\n\t\tvar controls = {}, settingControls;\n\t\t_.each( _.unique( settingIds ), function( settingId ) {\n\t\t\tvar setting = api( settingId );\n\t\t\tif ( setting ) {\n\t\t\t\tsettingControls = setting.findControls();\n\t\t\t\tif ( settingControls && settingControls.length > 0 ) {\n\t\t\t\t\tcontrols[ settingId ] = settingControls;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\treturn controls;\n\t};\n\n\t/**\n\t * Sort panels, sections, controls by priorities. Hide empty sections and panels.\n\t *\n\t * @since 4.1.0\n\t */\n\tapi.reflowPaneContents = _.bind( function () {\n\n\t\tvar appendContainer, activeElement, rootHeadContainers, rootNodes = [], wasReflowed = false;\n\n\t\tif ( document.activeElement ) {\n\t\t\tactiveElement = $( document.activeElement );\n\t\t}\n\n\t\t// Sort the sections within each panel\n\t\tapi.panel.each( function ( panel ) {\n\t\t\tvar sections = panel.sections(),\n\t\t\t\tsectionHeadContainers = _.pluck( sections, 'headContainer' );\n\t\t\trootNodes.push( panel );\n\t\t\tappendContainer = ( panel.contentContainer.is( 'ul' ) ) ? panel.contentContainer : panel.contentContainer.find( 'ul:first' );\n\t\t\tif ( ! api.utils.areElementListsEqual( sectionHeadContainers, appendContainer.children( '[id]' ) ) ) {\n\t\t\t\t_( sections ).each( function ( section ) {\n\t\t\t\t\tappendContainer.append( section.headContainer );\n\t\t\t\t} );\n\t\t\t\twasReflowed = true;\n\t\t\t}\n\t\t} );\n\n\t\t// Sort the controls within each section\n\t\tapi.section.each( function ( section ) {\n\t\t\tvar controls = section.controls(),\n\t\t\t\tcontrolContainers = _.pluck( controls, 'container' );\n\t\t\tif ( ! section.panel() ) {\n\t\t\t\trootNodes.push( section );\n\t\t\t}\n\t\t\tappendContainer = ( section.contentContainer.is( 'ul' ) ) ? section.contentContainer : section.contentContainer.find( 'ul:first' );\n\t\t\tif ( ! api.utils.areElementListsEqual( controlContainers, appendContainer.children( '[id]' ) ) ) {\n\t\t\t\t_( controls ).each( function ( control ) {\n\t\t\t\t\tappendContainer.append( control.container );\n\t\t\t\t} );\n\t\t\t\twasReflowed = true;\n\t\t\t}\n\t\t} );\n\n\t\t// Sort the root panels and sections\n\t\trootNodes.sort( api.utils.prioritySort );\n\t\trootHeadContainers = _.pluck( rootNodes, 'headContainer' );\n\t\tappendContainer = $( '#customize-theme-controls .customize-pane-parent' ); // @todo This should be defined elsewhere, and to be configurable\n\t\tif ( ! api.utils.areElementListsEqual( rootHeadContainers, appendContainer.children() ) ) {\n\t\t\t_( rootNodes ).each( function ( rootNode ) {\n\t\t\t\tappendContainer.append( rootNode.headContainer );\n\t\t\t} );\n\t\t\twasReflowed = true;\n\t\t}\n\n\t\t// Now re-trigger the active Value callbacks to that the panels and sections can decide whether they can be rendered\n\t\tapi.panel.each( function ( panel ) {\n\t\t\tvar value = panel.active();\n\t\t\tpanel.active.callbacks.fireWith( panel.active, [ value, value ] );\n\t\t} );\n\t\tapi.section.each( function ( section ) {\n\t\t\tvar value = section.active();\n\t\t\tsection.active.callbacks.fireWith( section.active, [ value, value ] );\n\t\t} );\n\n\t\t// Restore focus if there was a reflow and there was an active (focused) element\n\t\tif ( wasReflowed && activeElement ) {\n\t\t\tactiveElement.focus();\n\t\t}\n\t\tapi.trigger( 'pane-contents-reflowed' );\n\t}, api );\n\n\t$( function() {\n\t\tapi.settings = window._wpCustomizeSettings;\n\t\tapi.l10n = window._wpCustomizeControlsL10n;\n\n\t\t// Check if we can run the Customizer.\n\t\tif ( ! api.settings ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Bail if any incompatibilities are found.\n\t\tif ( ! $.support.postMessage || ( ! $.support.cors && api.settings.isCrossDomain ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( null === api.PreviewFrame.prototype.sensitivity ) {\n\t\t\tapi.PreviewFrame.prototype.sensitivity = api.settings.timeouts.previewFrameSensitivity;\n\t\t}\n\t\tif ( null === api.Previewer.prototype.refreshBuffer ) {\n\t\t\tapi.Previewer.prototype.refreshBuffer = api.settings.timeouts.windowRefresh;\n\t\t}\n\n\t\tvar parent,\n\t\t\tbody = $( document.body ),\n\t\t\toverlay = body.children( '.wp-full-overlay' ),\n\t\t\ttitle = $( '#customize-info .panel-title.site-title' ),\n\t\t\tcloseBtn = $( '.customize-controls-close' ),\n\t\t\tsaveBtn = $( '#save' ),\n\t\t\tfooterActions = $( '#customize-footer-actions' );\n\n\t\t// Prevent the form from saving when enter is pressed on an input or select element.\n\t\t$('#customize-controls').on( 'keydown', function( e ) {\n\t\t\tvar isEnter = ( 13 === e.which ),\n\t\t\t\t$el = $( e.target );\n\n\t\t\tif ( isEnter && ( $el.is( 'input:not([type=button])' ) || $el.is( 'select' ) ) ) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t});\n\n\t\t// Expand/Collapse the main customizer customize info.\n\t\t$( '.customize-info' ).find( '> .accordion-section-title .customize-help-toggle' ).on( 'click', function() {\n\t\t\tvar section = $( this ).closest( '.accordion-section' ),\n\t\t\t\tcontent = section.find( '.customize-panel-description:first' );\n\n\t\t\tif ( section.hasClass( 'cannot-expand' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( section.hasClass( 'open' ) ) {\n\t\t\t\tsection.toggleClass( 'open' );\n\t\t\t\tcontent.slideUp( api.Panel.prototype.defaultExpandedArguments.duration );\n\t\t\t\t$( this ).attr( 'aria-expanded', false );\n\t\t\t} else {\n\t\t\t\tcontent.slideDown( api.Panel.prototype.defaultExpandedArguments.duration );\n\t\t\t\tsection.toggleClass( 'open' );\n\t\t\t\t$( this ).attr( 'aria-expanded', true );\n\t\t\t}\n\t\t});\n\n\t\t// Initialize Previewer\n\t\tapi.previewer = new api.Previewer({\n\t\t\tcontainer:   '#customize-preview',\n\t\t\tform:        '#customize-controls',\n\t\t\tpreviewUrl:  api.settings.url.preview,\n\t\t\tallowedUrls: api.settings.url.allowed\n\t\t}, {\n\n\t\t\tnonce: api.settings.nonce,\n\n\t\t\t/**\n\t\t\t * Build the query to send along with the Preview request.\n\t\t\t *\n\t\t\t * @since 3.4.0\n\t\t\t * @since 4.7.0 Added options param.\n\t\t\t * @access public\n\t\t\t *\n\t\t\t * @param {object}  [options] Options.\n\t\t\t * @param {boolean} [options.excludeCustomizedSaved=false] Exclude saved settings in customized response (values pending writing to changeset).\n\t\t\t * @return {object} Query vars.\n\t\t\t */\n\t\t\tquery: function( options ) {\n\t\t\t\tvar queryVars = {\n\t\t\t\t\twp_customize: 'on',\n\t\t\t\t\tcustomize_theme: api.settings.theme.stylesheet,\n\t\t\t\t\tnonce: this.nonce.preview,\n\t\t\t\t\tcustomize_changeset_uuid: api.settings.changeset.uuid\n\t\t\t\t};\n\n\t\t\t\t/*\n\t\t\t\t * Exclude customized data if requested especially for calls to requestChangesetUpdate.\n\t\t\t\t * Changeset updates are differential and so it is a performance waste to send all of\n\t\t\t\t * the dirty settings with each update.\n\t\t\t\t */\n\t\t\t\tqueryVars.customized = JSON.stringify( api.dirtyValues( {\n\t\t\t\t\tunsaved: options && options.excludeCustomizedSaved\n\t\t\t\t} ) );\n\n\t\t\t\treturn queryVars;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Save (and publish) the customizer changeset.\n\t\t\t *\n\t\t\t * Updates to the changeset are transactional. If any of the settings\n\t\t\t * are invalid then none of them will be written into the changeset.\n\t\t\t * A revision will be made for the changeset post if revisions support\n\t\t\t * has been added to the post type.\n\t\t\t *\n\t\t\t * @since 3.4.0\n\t\t\t * @since 4.7.0 Added args param and return value.\n\t\t\t *\n\t\t\t * @param {object} [args] Args.\n\t\t\t * @param {string} [args.status=publish] Status.\n\t\t\t * @param {string} [args.date] Date, in local time in MySQL format.\n\t\t\t * @param {string} [args.title] Title\n\t\t\t * @returns {jQuery.promise} Promise.\n\t\t\t */\n\t\t\tsave: function( args ) {\n\t\t\t\tvar previewer = this,\n\t\t\t\t\tdeferred = $.Deferred(),\n\t\t\t\t\tchangesetStatus = 'publish',\n\t\t\t\t\tprocessing = api.state( 'processing' ),\n\t\t\t\t\tsubmitWhenDoneProcessing,\n\t\t\t\t\tsubmit,\n\t\t\t\t\tmodifiedWhileSaving = {},\n\t\t\t\t\tinvalidSettings = [],\n\t\t\t\t\tinvalidControls;\n\n\t\t\t\tif ( args && args.status ) {\n\t\t\t\t\tchangesetStatus = args.status;\n\t\t\t\t}\n\n\t\t\t\tif ( api.state( 'saving' ).get() ) {\n\t\t\t\t\tdeferred.reject( 'already_saving' );\n\t\t\t\t\tdeferred.promise();\n\t\t\t\t}\n\n\t\t\t\tapi.state( 'saving' ).set( true );\n\n\t\t\t\tfunction captureSettingModifiedDuringSave( setting ) {\n\t\t\t\t\tmodifiedWhileSaving[ setting.id ] = true;\n\t\t\t\t}\n\n\t\t\t\tsubmit = function () {\n\t\t\t\t\tvar request, query, settingInvalidities = {}, latestRevision = api._latestRevision;\n\n\t\t\t\t\tapi.bind( 'change', captureSettingModifiedDuringSave );\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Block saving if there are any settings that are marked as\n\t\t\t\t\t * invalid from the client (not from the server). Focus on\n\t\t\t\t\t * the control.\n\t\t\t\t\t */\n\t\t\t\t\tapi.each( function( setting ) {\n\t\t\t\t\t\tsetting.notifications.each( function( notification ) {\n\t\t\t\t\t\t\tif ( 'error' === notification.type && ! notification.fromServer ) {\n\t\t\t\t\t\t\t\tinvalidSettings.push( setting.id );\n\t\t\t\t\t\t\t\tif ( ! settingInvalidities[ setting.id ] ) {\n\t\t\t\t\t\t\t\t\tsettingInvalidities[ setting.id ] = {};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsettingInvalidities[ setting.id ][ notification.code ] = notification;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t\tinvalidControls = api.findControlsForSettings( invalidSettings );\n\t\t\t\t\tif ( ! _.isEmpty( invalidControls ) ) {\n\t\t\t\t\t\t_.values( invalidControls )[0][0].focus();\n\t\t\t\t\t\tapi.unbind( 'change', captureSettingModifiedDuringSave );\n\t\t\t\t\t\tdeferred.rejectWith( previewer, [\n\t\t\t\t\t\t\t{ setting_invalidities: settingInvalidities }\n\t\t\t\t\t\t] );\n\t\t\t\t\t\tapi.state( 'saving' ).set( false );\n\t\t\t\t\t\treturn deferred.promise();\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Note that excludeCustomizedSaved is intentionally false so that the entire\n\t\t\t\t\t * set of customized data will be included if bypassed changeset update.\n\t\t\t\t\t */\n\t\t\t\t\tquery = $.extend( previewer.query( { excludeCustomizedSaved: false } ), {\n\t\t\t\t\t\tnonce: previewer.nonce.save,\n\t\t\t\t\t\tcustomize_changeset_status: changesetStatus\n\t\t\t\t\t} );\n\t\t\t\t\tif ( args && args.date ) {\n\t\t\t\t\t\tquery.customize_changeset_date = args.date;\n\t\t\t\t\t}\n\t\t\t\t\tif ( args && args.title ) {\n\t\t\t\t\t\tquery.customize_changeset_title = args.title;\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Note that the dirty customized values will have already been set in the\n\t\t\t\t\t * changeset and so technically query.customized could be deleted. However,\n\t\t\t\t\t * it is remaining here to make sure that any settings that got updated\n\t\t\t\t\t * quietly which may have not triggered an update request will also get\n\t\t\t\t\t * included in the values that get saved to the changeset. This will ensure\n\t\t\t\t\t * that values that get injected via the saved event will be included in\n\t\t\t\t\t * the changeset. This also ensures that setting values that were invalid\n\t\t\t\t\t * will get re-validated, perhaps in the case of settings that are invalid\n\t\t\t\t\t * due to dependencies on other settings.\n\t\t\t\t\t */\n\t\t\t\t\trequest = wp.ajax.post( 'customize_save', query );\n\n\t\t\t\t\t// Disable save button during the save request.\n\t\t\t\t\tsaveBtn.prop( 'disabled', true );\n\n\t\t\t\t\tapi.trigger( 'save', request );\n\n\t\t\t\t\trequest.always( function () {\n\t\t\t\t\t\tapi.state( 'saving' ).set( false );\n\t\t\t\t\t\tsaveBtn.prop( 'disabled', false );\n\t\t\t\t\t\tapi.unbind( 'change', captureSettingModifiedDuringSave );\n\t\t\t\t\t} );\n\n\t\t\t\t\trequest.fail( function ( response ) {\n\n\t\t\t\t\t\tif ( '0' === response ) {\n\t\t\t\t\t\t\tresponse = 'not_logged_in';\n\t\t\t\t\t\t} else if ( '-1' === response ) {\n\t\t\t\t\t\t\t// Back-compat in case any other check_ajax_referer() call is dying\n\t\t\t\t\t\t\tresponse = 'invalid_nonce';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( 'invalid_nonce' === response ) {\n\t\t\t\t\t\t\tpreviewer.cheatin();\n\t\t\t\t\t\t} else if ( 'not_logged_in' === response ) {\n\t\t\t\t\t\t\tpreviewer.preview.iframe.hide();\n\t\t\t\t\t\t\tpreviewer.login().done( function() {\n\t\t\t\t\t\t\t\tpreviewer.save();\n\t\t\t\t\t\t\t\tpreviewer.preview.iframe.show();\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( response.setting_validities ) {\n\t\t\t\t\t\t\tapi._handleSettingValidities( {\n\t\t\t\t\t\t\t\tsettingValidities: response.setting_validities,\n\t\t\t\t\t\t\t\tfocusInvalidControl: true\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdeferred.rejectWith( previewer, [ response ] );\n\t\t\t\t\t\tapi.trigger( 'error', response );\n\t\t\t\t\t} );\n\n\t\t\t\t\trequest.done( function( response ) {\n\n\t\t\t\t\t\tpreviewer.send( 'saved', response );\n\n\t\t\t\t\t\tapi.state( 'changesetStatus' ).set( response.changeset_status );\n\t\t\t\t\t\tif ( 'publish' === response.changeset_status ) {\n\n\t\t\t\t\t\t\t// Mark all published as clean if they haven't been modified during the request.\n\t\t\t\t\t\t\tapi.each( function( setting ) {\n\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t * Note that the setting revision will be undefined in the case of setting\n\t\t\t\t\t\t\t\t * values that are marked as dirty when the customizer is loaded, such as\n\t\t\t\t\t\t\t\t * when applying starter content. All other dirty settings will have an\n\t\t\t\t\t\t\t\t * associated revision due to their modification triggering a change event.\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tif ( setting._dirty && ( _.isUndefined( api._latestSettingRevisions[ setting.id ] ) || api._latestSettingRevisions[ setting.id ] <= latestRevision ) ) {\n\t\t\t\t\t\t\t\t\tsetting._dirty = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\tapi.state( 'changesetStatus' ).set( '' );\n\t\t\t\t\t\t\tapi.settings.changeset.uuid = response.next_changeset_uuid;\n\t\t\t\t\t\t\tparent.send( 'changeset-uuid', api.settings.changeset.uuid );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( response.setting_validities ) {\n\t\t\t\t\t\t\tapi._handleSettingValidities( {\n\t\t\t\t\t\t\t\tsettingValidities: response.setting_validities,\n\t\t\t\t\t\t\t\tfocusInvalidControl: true\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdeferred.resolveWith( previewer, [ response ] );\n\t\t\t\t\t\tapi.trigger( 'saved', response );\n\n\t\t\t\t\t\t// Restore the global dirty state if any settings were modified during save.\n\t\t\t\t\t\tif ( ! _.isEmpty( modifiedWhileSaving ) ) {\n\t\t\t\t\t\t\tapi.state( 'saved' ).set( false );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t};\n\n\t\t\t\tif ( 0 === processing() ) {\n\t\t\t\t\tsubmit();\n\t\t\t\t} else {\n\t\t\t\t\tsubmitWhenDoneProcessing = function () {\n\t\t\t\t\t\tif ( 0 === processing() ) {\n\t\t\t\t\t\t\tapi.state.unbind( 'change', submitWhenDoneProcessing );\n\t\t\t\t\t\t\tsubmit();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tapi.state.bind( 'change', submitWhenDoneProcessing );\n\t\t\t\t}\n\n\t\t\t\treturn deferred.promise();\n\t\t\t}\n\t\t});\n\n\t\t// Ensure preview nonce is included with every customized request, to allow post data to be read.\n\t\t$.ajaxPrefilter( function injectPreviewNonce( options ) {\n\t\t\tif ( ! /wp_customize=on/.test( options.data ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\toptions.data += '&' + $.param({\n\t\t\t\tcustomize_preview_nonce: api.settings.nonce.preview\n\t\t\t});\n\t\t});\n\n\t\t// Refresh the nonces if the preview sends updated nonces over.\n\t\tapi.previewer.bind( 'nonce', function( nonce ) {\n\t\t\t$.extend( this.nonce, nonce );\n\t\t});\n\n\t\t// Refresh the nonces if login sends updated nonces over.\n\t\tapi.bind( 'nonce-refresh', function( nonce ) {\n\t\t\t$.extend( api.settings.nonce, nonce );\n\t\t\t$.extend( api.previewer.nonce, nonce );\n\t\t\tapi.previewer.send( 'nonce-refresh', nonce );\n\t\t});\n\n\t\t// Create Settings\n\t\t$.each( api.settings.settings, function( id, data ) {\n\t\t\tvar constructor = api.settingConstructor[ data.type ] || api.Setting,\n\t\t\t\tsetting;\n\n\t\t\tsetting = new constructor( id, data.value, {\n\t\t\t\ttransport: data.transport,\n\t\t\t\tpreviewer: api.previewer,\n\t\t\t\tdirty: !! data.dirty\n\t\t\t} );\n\t\t\tapi.add( id, setting );\n\t\t});\n\n\t\t// Create Panels\n\t\t$.each( api.settings.panels, function ( id, data ) {\n\t\t\tvar constructor = api.panelConstructor[ data.type ] || api.Panel,\n\t\t\t\tpanel;\n\n\t\t\tpanel = new constructor( id, {\n\t\t\t\tparams: data\n\t\t\t} );\n\t\t\tapi.panel.add( id, panel );\n\t\t});\n\n\t\t// Create Sections\n\t\t$.each( api.settings.sections, function ( id, data ) {\n\t\t\tvar constructor = api.sectionConstructor[ data.type ] || api.Section,\n\t\t\t\tsection;\n\n\t\t\tsection = new constructor( id, {\n\t\t\t\tparams: data\n\t\t\t} );\n\t\t\tapi.section.add( id, section );\n\t\t});\n\n\t\t// Create Controls\n\t\t$.each( api.settings.controls, function( id, data ) {\n\t\t\tvar constructor = api.controlConstructor[ data.type ] || api.Control,\n\t\t\t\tcontrol;\n\n\t\t\tcontrol = new constructor( id, {\n\t\t\t\tparams: data,\n\t\t\t\tpreviewer: api.previewer\n\t\t\t} );\n\t\t\tapi.control.add( id, control );\n\t\t});\n\n\t\t// Focus the autofocused element\n\t\t_.each( [ 'panel', 'section', 'control' ], function( type ) {\n\t\t\tvar id = api.settings.autofocus[ type ];\n\t\t\tif ( ! id ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Defer focus until:\n\t\t\t * 1. The panel, section, or control exists (especially for dynamically-created ones).\n\t\t\t * 2. The instance is embedded in the document (and so is focusable).\n\t\t\t * 3. The preview has finished loading so that the active states have been set.\n\t\t\t */\n\t\t\tapi[ type ]( id, function( instance ) {\n\t\t\t\tinstance.deferred.embedded.done( function() {\n\t\t\t\t\tapi.previewer.deferred.active.done( function() {\n\t\t\t\t\t\tinstance.focus();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tapi.bind( 'ready', api.reflowPaneContents );\n\t\t$( [ api.panel, api.section, api.control ] ).each( function ( i, values ) {\n\t\t\tvar debouncedReflowPaneContents = _.debounce( api.reflowPaneContents, api.settings.timeouts.reflowPaneContents );\n\t\t\tvalues.bind( 'add', debouncedReflowPaneContents );\n\t\t\tvalues.bind( 'change', debouncedReflowPaneContents );\n\t\t\tvalues.bind( 'remove', debouncedReflowPaneContents );\n\t\t} );\n\n\t\t// Save and activated states\n\t\t(function() {\n\t\t\tvar state = new api.Values(),\n\t\t\t\tsaved = state.create( 'saved' ),\n\t\t\t\tsaving = state.create( 'saving' ),\n\t\t\t\tactivated = state.create( 'activated' ),\n\t\t\t\tprocessing = state.create( 'processing' ),\n\t\t\t\tpaneVisible = state.create( 'paneVisible' ),\n\t\t\t\texpandedPanel = state.create( 'expandedPanel' ),\n\t\t\t\texpandedSection = state.create( 'expandedSection' ),\n\t\t\t\tchangesetStatus = state.create( 'changesetStatus' ),\n\t\t\t\tpreviewerAlive = state.create( 'previewerAlive' ),\n\t\t\t\teditShortcutVisibility  = state.create( 'editShortcutVisibility' ),\n\t\t\t\tpopulateChangesetUuidParam;\n\n\t\t\tstate.bind( 'change', function() {\n\t\t\t\tvar canSave;\n\n\t\t\t\tif ( ! activated() ) {\n\t\t\t\t\tsaveBtn.val( api.l10n.activate );\n\t\t\t\t\tcloseBtn.find( '.screen-reader-text' ).text( api.l10n.cancel );\n\n\t\t\t\t} else if ( '' === changesetStatus.get() && saved() ) {\n\t\t\t\t\tsaveBtn.val( api.l10n.saved );\n\t\t\t\t\tcloseBtn.find( '.screen-reader-text' ).text( api.l10n.close );\n\n\t\t\t\t} else {\n\t\t\t\t\tsaveBtn.val( api.l10n.save );\n\t\t\t\t\tcloseBtn.find( '.screen-reader-text' ).text( api.l10n.cancel );\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Save (publish) button should be enabled if saving is not currently happening,\n\t\t\t\t * and if the theme is not active or the changeset exists but is not published.\n\t\t\t\t */\n\t\t\t\tcanSave = ! saving() && ( ! activated() || ! saved() || ( '' !== changesetStatus() && 'publish' !== changesetStatus() ) );\n\n\t\t\t\tsaveBtn.prop( 'disabled', ! canSave );\n\t\t\t});\n\n\t\t\t// Set default states.\n\t\t\tchangesetStatus( api.settings.changeset.status );\n\t\t\tsaved( true );\n\t\t\tif ( '' === changesetStatus() ) { // Handle case for loading starter content.\n\t\t\t\tapi.each( function( setting ) {\n\t\t\t\t\tif ( setting._dirty ) {\n\t\t\t\t\t\tsaved( false );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\tsaving( false );\n\t\t\tactivated( api.settings.theme.active );\n\t\t\tprocessing( 0 );\n\t\t\tpaneVisible( true );\n\t\t\texpandedPanel( false );\n\t\t\texpandedSection( false );\n\t\t\tpreviewerAlive( true );\n\t\t\teditShortcutVisibility( 'visible' );\n\n\t\t\tapi.bind( 'change', function() {\n\t\t\t\tif ( state( 'saved' ).get() ) {\n\t\t\t\t\tstate( 'saved' ).set( false );\n\t\t\t\t\tpopulateChangesetUuidParam( true );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tsaving.bind( function( isSaving ) {\n\t\t\t\tbody.toggleClass( 'saving', isSaving );\n\t\t\t} );\n\n\t\t\tapi.bind( 'saved', function( response ) {\n\t\t\t\tstate('saved').set( true );\n\t\t\t\tif ( 'publish' === response.changeset_status ) {\n\t\t\t\t\tstate( 'activated' ).set( true );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tactivated.bind( function( to ) {\n\t\t\t\tif ( to ) {\n\t\t\t\t\tapi.trigger( 'activated' );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * Populate URL with UUID via `history.replaceState()`.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @access private\n\t\t\t *\n\t\t\t * @param {boolean} isIncluded Is UUID included.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tpopulateChangesetUuidParam = function( isIncluded ) {\n\t\t\t\tvar urlParser, queryParams;\n\n\t\t\t\t// Abort on IE9 which doesn't support history management.\n\t\t\t\tif ( ! history.replaceState ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\turlParser = document.createElement( 'a' );\n\t\t\t\turlParser.href = location.href;\n\t\t\t\tqueryParams = api.utils.parseQueryString( urlParser.search.substr( 1 ) );\n\t\t\t\tif ( isIncluded ) {\n\t\t\t\t\tif ( queryParams.changeset_uuid === api.settings.changeset.uuid ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tqueryParams.changeset_uuid = api.settings.changeset.uuid;\n\t\t\t\t} else {\n\t\t\t\t\tif ( ! queryParams.changeset_uuid ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdelete queryParams.changeset_uuid;\n\t\t\t\t}\n\t\t\t\turlParser.search = $.param( queryParams );\n\t\t\t\thistory.replaceState( {}, document.title, urlParser.href );\n\t\t\t};\n\n\t\t\tchangesetStatus.bind( function( newStatus ) {\n\t\t\t\tpopulateChangesetUuidParam( '' !== newStatus && 'publish' !== newStatus );\n\t\t\t} );\n\n\t\t\t// Expose states to the API.\n\t\t\tapi.state = state;\n\t\t}());\n\n\t\t// Check if preview url is valid and load the preview frame.\n\t\tif ( api.previewer.previewUrl() ) {\n\t\t\tapi.previewer.refresh();\n\t\t} else {\n\t\t\tapi.previewer.previewUrl( api.settings.url.home );\n\t\t}\n\n\t\t// Button bindings.\n\t\tsaveBtn.click( function( event ) {\n\t\t\tapi.previewer.save();\n\t\t\tevent.preventDefault();\n\t\t}).keydown( function( event ) {\n\t\t\tif ( 9 === event.which ) // tab\n\t\t\t\treturn;\n\t\t\tif ( 13 === event.which ) // enter\n\t\t\t\tapi.previewer.save();\n\t\t\tevent.preventDefault();\n\t\t});\n\n\t\tcloseBtn.keydown( function( event ) {\n\t\t\tif ( 9 === event.which ) // tab\n\t\t\t\treturn;\n\t\t\tif ( 13 === event.which ) // enter\n\t\t\t\tthis.click();\n\t\t\tevent.preventDefault();\n\t\t});\n\n\t\t$( '.collapse-sidebar' ).on( 'click', function() {\n\t\t\tapi.state( 'paneVisible' ).set( ! api.state( 'paneVisible' ).get() );\n\t\t});\n\n\t\tapi.state( 'paneVisible' ).bind( function( paneVisible ) {\n\t\t\toverlay.toggleClass( 'preview-only', ! paneVisible );\n\t\t\toverlay.toggleClass( 'expanded', paneVisible );\n\t\t\toverlay.toggleClass( 'collapsed', ! paneVisible );\n\n\t\t\tif ( ! paneVisible ) {\n\t\t\t\t$( '.collapse-sidebar' ).attr({ 'aria-expanded': 'false', 'aria-label': api.l10n.expandSidebar });\n\t\t\t} else {\n\t\t\t\t$( '.collapse-sidebar' ).attr({ 'aria-expanded': 'true', 'aria-label': api.l10n.collapseSidebar });\n\t\t\t}\n\t\t});\n\n\t\t// Keyboard shortcuts - esc to exit section/panel.\n\t\t$( 'body' ).on( 'keydown', function( event ) {\n\t\t\tvar collapsedObject, expandedControls = [], expandedSections = [], expandedPanels = [];\n\n\t\t\tif ( 27 !== event.which ) { // Esc.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Abort if the event target is not the body (the default) and not inside of #customize-controls.\n\t\t\t * This ensures that ESC meant to collapse a modal dialog or a TinyMCE toolbar won't collapse something else.\n\t\t\t */\n\t\t\tif ( ! $( event.target ).is( 'body' ) && ! $.contains( $( '#customize-controls' )[0], event.target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check for expanded expandable controls (e.g. widgets and nav menus items), sections, and panels.\n\t\t\tapi.control.each( function( control ) {\n\t\t\t\tif ( control.expanded && control.expanded() && _.isFunction( control.collapse ) ) {\n\t\t\t\t\texpandedControls.push( control );\n\t\t\t\t}\n\t\t\t});\n\t\t\tapi.section.each( function( section ) {\n\t\t\t\tif ( section.expanded() ) {\n\t\t\t\t\texpandedSections.push( section );\n\t\t\t\t}\n\t\t\t});\n\t\t\tapi.panel.each( function( panel ) {\n\t\t\t\tif ( panel.expanded() ) {\n\t\t\t\t\texpandedPanels.push( panel );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Skip collapsing expanded controls if there are no expanded sections.\n\t\t\tif ( expandedControls.length > 0 && 0 === expandedSections.length ) {\n\t\t\t\texpandedControls.length = 0;\n\t\t\t}\n\n\t\t\t// Collapse the most granular expanded object.\n\t\t\tcollapsedObject = expandedControls[0] || expandedSections[0] || expandedPanels[0];\n\t\t\tif ( collapsedObject ) {\n\t\t\t\tcollapsedObject.collapse();\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t});\n\n\t\t$( '.customize-controls-preview-toggle' ).on( 'click', function() {\n\t\t\tapi.state( 'paneVisible' ).set( ! api.state( 'paneVisible' ).get() );\n\t\t});\n\n\t\t/*\n\t\t * Sticky header feature.\n\t\t */\n\t\t(function initStickyHeaders() {\n\t\t\tvar parentContainer = $( '.wp-full-overlay-sidebar-content' ),\n\t\t\t\tchangeContainer, getHeaderHeight, releaseStickyHeader, resetStickyHeader, positionStickyHeader,\n\t\t\t\tactiveHeader, lastScrollTop;\n\n\t\t\t/**\n\t\t\t * Determine which panel or section is currently expanded.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @access private\n\t\t\t *\n\t\t\t * @param {wp.customize.Panel|wp.customize.Section} container Construct.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tchangeContainer = function( container ) {\n\t\t\t\tvar newInstance = container,\n\t\t\t\t\texpandedSection = api.state( 'expandedSection' ).get(),\n\t\t\t\t\texpandedPanel = api.state( 'expandedPanel' ).get(),\n\t\t\t\t\theaderElement;\n\n\t\t\t\t// Release previously active header element.\n\t\t\t\tif ( activeHeader && activeHeader.element ) {\n\t\t\t\t\treleaseStickyHeader( activeHeader.element );\n\t\t\t\t}\n\n\t\t\t\tif ( ! newInstance ) {\n\t\t\t\t\tif ( ! expandedSection && expandedPanel && expandedPanel.contentContainer ) {\n\t\t\t\t\t\tnewInstance = expandedPanel;\n\t\t\t\t\t} else if ( ! expandedPanel && expandedSection && expandedSection.contentContainer ) {\n\t\t\t\t\t\tnewInstance = expandedSection;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tactiveHeader = false;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\theaderElement = newInstance.contentContainer.find( '.customize-section-title, .panel-meta' ).first();\n\t\t\t\tif ( headerElement.length ) {\n\t\t\t\t\tactiveHeader = {\n\t\t\t\t\t\tinstance: newInstance,\n\t\t\t\t\t\telement:  headerElement,\n\t\t\t\t\t\tparent:   headerElement.closest( '.customize-pane-child' ),\n\t\t\t\t\t\theight:   getHeaderHeight( headerElement )\n\t\t\t\t\t};\n\t\t\t\t\tif ( expandedSection ) {\n\t\t\t\t\t\tresetStickyHeader( activeHeader.element, activeHeader.parent );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tactiveHeader = false;\n\t\t\t\t}\n\t\t\t};\n\t\t\tapi.state( 'expandedSection' ).bind( changeContainer );\n\t\t\tapi.state( 'expandedPanel' ).bind( changeContainer );\n\n\t\t\t// Throttled scroll event handler.\n\t\t\tparentContainer.on( 'scroll', _.throttle( function() {\n\t\t\t\tif ( ! activeHeader ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar scrollTop = parentContainer.scrollTop(),\n\t\t\t\t\tisScrollingUp = ( lastScrollTop ) ? scrollTop <= lastScrollTop : true;\n\n\t\t\t\tlastScrollTop = scrollTop;\n\t\t\t\tpositionStickyHeader( activeHeader, scrollTop, isScrollingUp );\n\t\t\t}, 8 ) );\n\n\t\t\t// Release header element if it is sticky.\n\t\t\treleaseStickyHeader = function( headerElement ) {\n\t\t\t\tif ( ! headerElement.hasClass( 'is-sticky' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\theaderElement\n\t\t\t\t\t.removeClass( 'is-sticky' )\n\t\t\t\t\t.addClass( 'maybe-sticky is-in-view' )\n\t\t\t\t\t.css( 'top', parentContainer.scrollTop() + 'px' );\n\t\t\t};\n\n\t\t\t// Reset position of the sticky header.\n\t\t\tresetStickyHeader = function( headerElement, headerParent ) {\n\t\t\t\theaderElement\n\t\t\t\t\t.removeClass( 'maybe-sticky is-in-view' )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\twidth: '',\n\t\t\t\t\t\ttop: ''\n\t\t\t\t\t} );\n\t\t\t\theaderParent.css( 'padding-top', '' );\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Get header height.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @access private\n\t\t\t *\n\t\t\t * @param {jQuery} headerElement Header element.\n\t\t\t * @returns {number} Height.\n\t\t\t */\n\t\t\tgetHeaderHeight = function( headerElement ) {\n\t\t\t\tvar height = headerElement.data( 'height' );\n\t\t\t\tif ( ! height ) {\n\t\t\t\t\theight = headerElement.outerHeight();\n\t\t\t\t\theaderElement.data( 'height', height );\n\t\t\t\t}\n\t\t\t\treturn height;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Reposition header on throttled `scroll` event.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @access private\n\t\t\t *\n\t\t\t * @param {object}  header        Header.\n\t\t\t * @param {number}  scrollTop     Scroll top.\n\t\t\t * @param {boolean} isScrollingUp Is scrolling up?\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tpositionStickyHeader = function( header, scrollTop, isScrollingUp ) {\n\t\t\t\tvar headerElement = header.element,\n\t\t\t\t\theaderParent = header.parent,\n\t\t\t\t\theaderHeight = header.height,\n\t\t\t\t\theaderTop = parseInt( headerElement.css( 'top' ), 10 ),\n\t\t\t\t\tmaybeSticky = headerElement.hasClass( 'maybe-sticky' ),\n\t\t\t\t\tisSticky = headerElement.hasClass( 'is-sticky' ),\n\t\t\t\t\tisInView = headerElement.hasClass( 'is-in-view' );\n\n\t\t\t\t// When scrolling down, gradually hide sticky header.\n\t\t\t\tif ( ! isScrollingUp ) {\n\t\t\t\t\tif ( isSticky ) {\n\t\t\t\t\t\theaderTop = scrollTop;\n\t\t\t\t\t\theaderElement\n\t\t\t\t\t\t\t.removeClass( 'is-sticky' )\n\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\ttop:   headerTop + 'px',\n\t\t\t\t\t\t\t\twidth: ''\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t\tif ( isInView && scrollTop > headerTop + headerHeight ) {\n\t\t\t\t\t\theaderElement.removeClass( 'is-in-view' );\n\t\t\t\t\t\theaderParent.css( 'padding-top', '' );\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Scrolling up.\n\t\t\t\tif ( ! maybeSticky && scrollTop >= headerHeight ) {\n\t\t\t\t\tmaybeSticky = true;\n\t\t\t\t\theaderElement.addClass( 'maybe-sticky' );\n\t\t\t\t} else if ( 0 === scrollTop ) {\n\t\t\t\t\t// Reset header in base position.\n\t\t\t\t\theaderElement\n\t\t\t\t\t\t.removeClass( 'maybe-sticky is-in-view is-sticky' )\n\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\ttop:   '',\n\t\t\t\t\t\t\twidth: ''\n\t\t\t\t\t\t} );\n\t\t\t\t\theaderParent.css( 'padding-top', '' );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( isInView && ! isSticky ) {\n\t\t\t\t\t// Header is in the view but is not yet sticky.\n\t\t\t\t\tif ( headerTop >= scrollTop ) {\n\t\t\t\t\t\t// Header is fully visible.\n\t\t\t\t\t\theaderElement\n\t\t\t\t\t\t\t.addClass( 'is-sticky' )\n\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\ttop:   '',\n\t\t\t\t\t\t\t\twidth: headerParent.outerWidth() + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} else if ( maybeSticky && ! isInView ) {\n\t\t\t\t\t// Header is out of the view.\n\t\t\t\t\theaderElement\n\t\t\t\t\t\t.addClass( 'is-in-view' )\n\t\t\t\t\t\t.css( 'top', ( scrollTop - headerHeight ) + 'px' );\n\t\t\t\t\theaderParent.css( 'padding-top', headerHeight + 'px' );\n\t\t\t\t}\n\t\t\t};\n\t\t}());\n\n\t\t// Previewed device bindings.\n\t\tapi.previewedDevice = new api.Value();\n\n\t\t// Set the default device.\n\t\tapi.bind( 'ready', function() {\n\t\t\t_.find( api.settings.previewableDevices, function( value, key ) {\n\t\t\t\tif ( true === value['default'] ) {\n\t\t\t\t\tapi.previewedDevice.set( key );\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\t// Set the toggled device.\n\t\tfooterActions.find( '.devices button' ).on( 'click', function( event ) {\n\t\t\tapi.previewedDevice.set( $( event.currentTarget ).data( 'device' ) );\n\t\t});\n\n\t\t// Bind device changes.\n\t\tapi.previewedDevice.bind( function( newDevice ) {\n\t\t\tvar overlay = $( '.wp-full-overlay' ),\n\t\t\t\tdevices = '';\n\n\t\t\tfooterActions.find( '.devices button' )\n\t\t\t\t.removeClass( 'active' )\n\t\t\t\t.attr( 'aria-pressed', false );\n\n\t\t\tfooterActions.find( '.devices .preview-' + newDevice )\n\t\t\t\t.addClass( 'active' )\n\t\t\t\t.attr( 'aria-pressed', true );\n\n\t\t\t$.each( api.settings.previewableDevices, function( device ) {\n\t\t\t\tdevices += ' preview-' + device;\n\t\t\t} );\n\n\t\t\toverlay\n\t\t\t\t.removeClass( devices )\n\t\t\t\t.addClass( 'preview-' + newDevice );\n\t\t} );\n\n\t\t// Bind site title display to the corresponding field.\n\t\tif ( title.length ) {\n\t\t\tapi( 'blogname', function( setting ) {\n\t\t\t\tvar updateTitle = function() {\n\t\t\t\t\ttitle.text( $.trim( setting() ) || api.l10n.untitledBlogName );\n\t\t\t\t};\n\t\t\t\tsetting.bind( updateTitle );\n\t\t\t\tupdateTitle();\n\t\t\t} );\n\t\t}\n\n\t\t/*\n\t\t * Create a postMessage connection with a parent frame,\n\t\t * in case the Customizer frame was opened with the Customize loader.\n\t\t *\n\t\t * @see wp.customize.Loader\n\t\t */\n\t\tparent = new api.Messenger({\n\t\t\turl: api.settings.url.parent,\n\t\t\tchannel: 'loader'\n\t\t});\n\n\t\t/*\n\t\t * If we receive a 'back' event, we're inside an iframe.\n\t\t * Send any clicks to the 'Return' link to the parent page.\n\t\t */\n\t\tparent.bind( 'back', function() {\n\t\t\tcloseBtn.on( 'click.customize-controls-close', function( event ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tparent.send( 'close' );\n\t\t\t});\n\t\t});\n\n\t\t// Prompt user with AYS dialog if leaving the Customizer with unsaved changes\n\t\t$( window ).on( 'beforeunload.customize-confirm', function () {\n\t\t\tif ( ! api.state( 'saved' )() ) {\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\toverlay.removeClass( 'customize-loading' );\n\t\t\t\t}, 1 );\n\t\t\t\treturn api.l10n.saveAlert;\n\t\t\t}\n\t\t} );\n\n\t\t// Pass events through to the parent.\n\t\t$.each( [ 'saved', 'change' ], function ( i, event ) {\n\t\t\tapi.bind( event, function() {\n\t\t\t\tparent.send( event );\n\t\t\t});\n\t\t} );\n\n\t\t// Pass titles to the parent\n\t\tapi.bind( 'title', function( newTitle ) {\n\t\t\tparent.send( 'title', newTitle );\n\t\t});\n\n\t\tparent.send( 'changeset-uuid', api.settings.changeset.uuid );\n\n\t\t// Initialize the connection with the parent frame.\n\t\tparent.send( 'ready' );\n\n\t\t// Control visibility for default controls\n\t\t$.each({\n\t\t\t'background_image': {\n\t\t\t\tcontrols: [ 'background_preset', 'background_position', 'background_size', 'background_repeat', 'background_attachment' ],\n\t\t\t\tcallback: function( to ) { return !! to; }\n\t\t\t},\n\t\t\t'show_on_front': {\n\t\t\t\tcontrols: [ 'page_on_front', 'page_for_posts' ],\n\t\t\t\tcallback: function( to ) { return 'page' === to; }\n\t\t\t},\n\t\t\t'header_textcolor': {\n\t\t\t\tcontrols: [ 'header_textcolor' ],\n\t\t\t\tcallback: function( to ) { return 'blank' !== to; }\n\t\t\t}\n\t\t}, function( settingId, o ) {\n\t\t\tapi( settingId, function( setting ) {\n\t\t\t\t$.each( o.controls, function( i, controlId ) {\n\t\t\t\t\tapi.control( controlId, function( control ) {\n\t\t\t\t\t\tvar visibility = function( to ) {\n\t\t\t\t\t\t\tcontrol.container.toggle( o.callback( to ) );\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvisibility( setting.get() );\n\t\t\t\t\t\tsetting.bind( visibility );\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tapi.control( 'background_preset', function( control ) {\n\t\t\tvar visibility, defaultValues, values, toggleVisibility, updateSettings, preset;\n\n\t\t\tvisibility = { // position, size, repeat, attachment\n\t\t\t\t'default': [ false, false, false, false ],\n\t\t\t\t'fill': [ true, false, false, false ],\n\t\t\t\t'fit': [ true, false, true, false ],\n\t\t\t\t'repeat': [ true, false, false, true ],\n\t\t\t\t'custom': [ true, true, true, true ]\n\t\t\t};\n\n\t\t\tdefaultValues = [\n\t\t\t\t_wpCustomizeBackground.defaults['default-position-x'],\n\t\t\t\t_wpCustomizeBackground.defaults['default-position-y'],\n\t\t\t\t_wpCustomizeBackground.defaults['default-size'],\n\t\t\t\t_wpCustomizeBackground.defaults['default-repeat'],\n\t\t\t\t_wpCustomizeBackground.defaults['default-attachment']\n\t\t\t];\n\n\t\t\tvalues = { // position_x, position_y, size, repeat, attachment\n\t\t\t\t'default': defaultValues,\n\t\t\t\t'fill': [ 'left', 'top', 'cover', 'no-repeat', 'fixed' ],\n\t\t\t\t'fit': [ 'left', 'top', 'contain', 'no-repeat', 'fixed' ],\n\t\t\t\t'repeat': [ 'left', 'top', 'auto', 'repeat', 'scroll' ]\n\t\t\t};\n\n\t\t\t// @todo These should actually toggle the active state, but without the preview overriding the state in data.activeControls.\n\t\t\ttoggleVisibility = function( preset ) {\n\t\t\t\t_.each( [ 'background_position', 'background_size', 'background_repeat', 'background_attachment' ], function( controlId, i ) {\n\t\t\t\t\tvar control = api.control( controlId );\n\t\t\t\t\tif ( control ) {\n\t\t\t\t\t\tcontrol.container.toggle( visibility[ preset ][ i ] );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tupdateSettings = function( preset ) {\n\t\t\t\t_.each( [ 'background_position_x', 'background_position_y', 'background_size', 'background_repeat', 'background_attachment' ], function( settingId, i ) {\n\t\t\t\t\tvar setting = api( settingId );\n\t\t\t\t\tif ( setting ) {\n\t\t\t\t\t\tsetting.set( values[ preset ][ i ] );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tpreset = control.setting.get();\n\t\t\ttoggleVisibility( preset );\n\n\t\t\tcontrol.setting.bind( 'change', function( preset ) {\n\t\t\t\ttoggleVisibility( preset );\n\t\t\t\tif ( 'custom' !== preset ) {\n\t\t\t\t\tupdateSettings( preset );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\tapi.control( 'background_repeat', function( control ) {\n\t\t\tcontrol.elements[0].unsync( api( 'background_repeat' ) );\n\n\t\t\tcontrol.element = new api.Element( control.container.find( 'input' ) );\n\t\t\tcontrol.element.set( 'no-repeat' !== control.setting() );\n\n\t\t\tcontrol.element.bind( function( to ) {\n\t\t\t\tcontrol.setting.set( to ? 'repeat' : 'no-repeat' );\n\t\t\t} );\n\n\t\t\tcontrol.setting.bind( function( to ) {\n\t\t\t\tcontrol.element.set( 'no-repeat' !== to );\n\t\t\t} );\n\t\t} );\n\n\t\tapi.control( 'background_attachment', function( control ) {\n\t\t\tcontrol.elements[0].unsync( api( 'background_attachment' ) );\n\n\t\t\tcontrol.element = new api.Element( control.container.find( 'input' ) );\n\t\t\tcontrol.element.set( 'fixed' !== control.setting() );\n\n\t\t\tcontrol.element.bind( function( to ) {\n\t\t\t\tcontrol.setting.set( to ? 'scroll' : 'fixed' );\n\t\t\t} );\n\n\t\t\tcontrol.setting.bind( function( to ) {\n\t\t\t\tcontrol.element.set( 'fixed' !== to );\n\t\t\t} );\n\t\t} );\n\n\t\t// Juggle the two controls that use header_textcolor\n\t\tapi.control( 'display_header_text', function( control ) {\n\t\t\tvar last = '';\n\n\t\t\tcontrol.elements[0].unsync( api( 'header_textcolor' ) );\n\n\t\t\tcontrol.element = new api.Element( control.container.find('input') );\n\t\t\tcontrol.element.set( 'blank' !== control.setting() );\n\n\t\t\tcontrol.element.bind( function( to ) {\n\t\t\t\tif ( ! to )\n\t\t\t\t\tlast = api( 'header_textcolor' ).get();\n\n\t\t\t\tcontrol.setting.set( to ? last : 'blank' );\n\t\t\t});\n\n\t\t\tcontrol.setting.bind( function( to ) {\n\t\t\t\tcontrol.element.set( 'blank' !== to );\n\t\t\t});\n\t\t});\n\n\t\t// Change previewed URL to the homepage when changing the page_on_front.\n\t\tapi( 'show_on_front', 'page_on_front', function( showOnFront, pageOnFront ) {\n\t\t\tvar updatePreviewUrl = function() {\n\t\t\t\tif ( showOnFront() === 'page' && parseInt( pageOnFront(), 10 ) > 0 ) {\n\t\t\t\t\tapi.previewer.previewUrl.set( api.settings.url.home );\n\t\t\t\t}\n\t\t\t};\n\t\t\tshowOnFront.bind( updatePreviewUrl );\n\t\t\tpageOnFront.bind( updatePreviewUrl );\n\t\t});\n\n\t\t// Change the previewed URL to the selected page when changing the page_for_posts.\n\t\tapi( 'page_for_posts', function( setting ) {\n\t\t\tsetting.bind(function( pageId ) {\n\t\t\t\tpageId = parseInt( pageId, 10 );\n\t\t\t\tif ( pageId > 0 ) {\n\t\t\t\t\tapi.previewer.previewUrl.set( api.settings.url.home + '?page_id=' + pageId );\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Allow tabs to be entered in Custom CSS textarea.\n\t\tapi.control( 'custom_css', function setupCustomCssControl( control ) {\n\t\t\tcontrol.deferred.embedded.done( function allowTabs() {\n\t\t\t\tvar $textarea = control.container.find( 'textarea' ), textarea = $textarea[0];\n\n\t\t\t\t$textarea.on( 'blur', function onBlur() {\n\t\t\t\t\t$textarea.data( 'next-tab-blurs', false );\n\t\t\t\t} );\n\n\t\t\t\t$textarea.on( 'keydown', function onKeydown( event ) {\n\t\t\t\t\tvar selectionStart, selectionEnd, value, tabKeyCode = 9, escKeyCode = 27;\n\n\t\t\t\t\tif ( escKeyCode === event.keyCode ) {\n\t\t\t\t\t\tif ( ! $textarea.data( 'next-tab-blurs' ) ) {\n\t\t\t\t\t\t\t$textarea.data( 'next-tab-blurs', true );\n\t\t\t\t\t\t\tevent.stopPropagation(); // Prevent collapsing the section.\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Short-circuit if tab key is not being pressed or if a modifier key *is* being pressed.\n\t\t\t\t\tif ( tabKeyCode !== event.keyCode || event.ctrlKey || event.altKey || event.shiftKey ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent capturing Tab characters if Esc was pressed.\n\t\t\t\t\tif ( $textarea.data( 'next-tab-blurs' ) ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectionStart = textarea.selectionStart;\n\t\t\t\t\tselectionEnd = textarea.selectionEnd;\n\t\t\t\t\tvalue = textarea.value;\n\n\t\t\t\t\tif ( selectionStart >= 0 ) {\n\t\t\t\t\t\ttextarea.value = value.substring( 0, selectionStart ).concat( '\\t', value.substring( selectionEnd ) );\n\t\t\t\t\t\t$textarea.selectionStart = textarea.selectionEnd = selectionStart + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t} );\n\t\t\t} );\n\t\t} );\n\n\t\t// Toggle visibility of Header Video notice when active state change.\n\t\tapi.control( 'header_video', function( headerVideoControl ) {\n\t\t\theaderVideoControl.deferred.embedded.done( function() {\n\t\t\t\tvar toggleNotice = function() {\n\t\t\t\t\tvar section = api.section( headerVideoControl.section() ), notice;\n\t\t\t\t\tif ( ! section ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tnotice = section.container.find( '.header-video-not-currently-previewable:first' );\n\t\t\t\t\tif ( headerVideoControl.active.get() ) {\n\t\t\t\t\t\tnotice.stop().slideUp( 'fast' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnotice.stop().slideDown( 'fast' );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\ttoggleNotice();\n\t\t\t\theaderVideoControl.active.bind( toggleNotice );\n\t\t\t} );\n\t\t} );\n\n\t\t// Update the setting validities.\n\t\tapi.previewer.bind( 'selective-refresh-setting-validities', function handleSelectiveRefreshedSettingValidities( settingValidities ) {\n\t\t\tapi._handleSettingValidities( {\n\t\t\t\tsettingValidities: settingValidities,\n\t\t\t\tfocusInvalidControl: false\n\t\t\t} );\n\t\t} );\n\n\t\t// Focus on the control that is associated with the given setting.\n\t\tapi.previewer.bind( 'focus-control-for-setting', function( settingId ) {\n\t\t\tvar matchedControls = [];\n\t\t\tapi.control.each( function( control ) {\n\t\t\t\tvar settingIds = _.pluck( control.settings, 'id' );\n\t\t\t\tif ( -1 !== _.indexOf( settingIds, settingId ) ) {\n\t\t\t\t\tmatchedControls.push( control );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Focus on the matched control with the lowest priority (appearing higher).\n\t\t\tif ( matchedControls.length ) {\n\t\t\t\tmatchedControls.sort( function( a, b ) {\n\t\t\t\t\treturn a.priority() - b.priority();\n\t\t\t\t} );\n\t\t\t\tmatchedControls[0].focus();\n\t\t\t}\n\t\t} );\n\n\t\t// Refresh the preview when it requests.\n\t\tapi.previewer.bind( 'refresh', function() {\n\t\t\tapi.previewer.refresh();\n\t\t});\n\n\t\t// Update the edit shortcut visibility state.\n\t\tapi.state( 'paneVisible' ).bind( function( isPaneVisible ) {\n\t\t\tvar isMobileScreen;\n\t\t\tif ( window.matchMedia ) {\n\t\t\t\tisMobileScreen = window.matchMedia( 'screen and ( max-width: 640px )' ).matches;\n\t\t\t} else {\n\t\t\t\tisMobileScreen = $( window ).width() <= 640;\n\t\t\t}\n\t\t\tapi.state( 'editShortcutVisibility' ).set( isPaneVisible || isMobileScreen ? 'visible' : 'hidden' );\n\t\t} );\n\t\tif ( window.matchMedia ) {\n\t\t\twindow.matchMedia( 'screen and ( max-width: 640px )' ).addListener( function() {\n\t\t\t\tvar state = api.state( 'paneVisible' );\n\t\t\t\tstate.callbacks.fireWith( state, [ state.get(), state.get() ] );\n\t\t\t} );\n\t\t}\n\t\tapi.previewer.bind( 'edit-shortcut-visibility', function( visibility ) {\n\t\t\tapi.state( 'editShortcutVisibility' ).set( visibility );\n\t\t} );\n\t\tapi.state( 'editShortcutVisibility' ).bind( function( visibility ) {\n\t\t\tapi.previewer.send( 'edit-shortcut-visibility', visibility );\n\t\t} );\n\n\t\t// Autosave changeset.\n\t\t( function() {\n\t\t\tvar timeoutId, updateChangesetWithReschedule, scheduleChangesetUpdate, updatePending = false;\n\n\t\t\t/**\n\t\t\t * Request changeset update and then re-schedule the next changeset update time.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @private\n\t\t\t */\n\t\t\tupdateChangesetWithReschedule = function() {\n\t\t\t\tif ( ! updatePending ) {\n\t\t\t\t\tupdatePending = true;\n\t\t\t\t\tapi.requestChangesetUpdate().always( function() {\n\t\t\t\t\t\tupdatePending = false;\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tscheduleChangesetUpdate();\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Schedule changeset update.\n\t\t\t *\n\t\t\t * @since 4.7.0\n\t\t\t * @private\n\t\t\t */\n\t\t\tscheduleChangesetUpdate = function() {\n\t\t\t\tclearTimeout( timeoutId );\n\t\t\t\ttimeoutId = setTimeout( function() {\n\t\t\t\t\tupdateChangesetWithReschedule();\n\t\t\t\t}, api.settings.timeouts.changesetAutoSave );\n\t\t\t};\n\n\t\t\t// Start auto-save interval for updating changeset.\n\t\t\tscheduleChangesetUpdate();\n\n\t\t\t// Save changeset when focus removed from window.\n\t\t\t$( window ).on( 'blur.wp-customize-changeset-update', function() {\n\t\t\t\tupdateChangesetWithReschedule();\n\t\t\t} );\n\n\t\t\t// Save changeset before unloading window.\n\t\t\t$( window ).on( 'beforeunload.wp-customize-changeset-update', function() {\n\t\t\t\tupdateChangesetWithReschedule();\n\t\t\t} );\n\t\t} ());\n\n\t\tapi.trigger( 'ready' );\n\t});\n\n})( wp, jQuery );\n", "!function(a,b){var c,d,e,f=wp.customize;f.Setting=f.Value.extend({initialize:function(a,b,c){var d=this;f.Value.prototype.initialize.call(d,b,c),d.id=a,d.transport=d.transport||\"refresh\",d._dirty=c.dirty||!1,d.notifications=new f.Values({defaultConstructor:f.Notification}),d.bind(d.preview)},preview:function(){var a,b=this;a=b.transport,\"postMessage\"!==a||f.state(\"previewerAlive\").get()||(a=\"refresh\"),\"postMessage\"===a?b.previewer.send(\"setting\",[b.id,b()]):\"refresh\"===a&&b.previewer.refresh()},findControls:function(){var a=this,b=[];return f.control.each(function(c){_.each(c.settings,function(d){d.id===a.id&&b.push(c)})}),b}}),f._latestRevision=0,f._lastSavedRevision=0,f._latestSettingRevisions={},f.bind(\"change\",function(a){f._latestRevision+=1,f._latestSettingRevisions[a.id]=f._latestRevision}),f.bind(\"ready\",function(){f.bind(\"add\",function(a){a._dirty&&(f._latestRevision+=1,f._latestSettingRevisions[a.id]=f._latestRevision)})}),f.dirtyValues=function(a){var b={};return f.each(function(c){var d;c._dirty&&(d=f._latestSettingRevisions[c.id],f.state(\"changesetStatus\").get()&&a&&a.unsaved&&(_.isUndefined(d)||d<=f._lastSavedRevision)||(b[c.id]=c.get()))}),b},f.requestChangesetUpdate=function(a){var c,d,e,g={};return c=new b.Deferred,a&&_.extend(g,a),_.each(f.dirtyValues({unsaved:!0}),function(b,c){a&&null===a[c]||(g[c]=_.extend({},g[c]||{},{value:b}))}),_.isEmpty(g)?(c.resolve({}),c.promise()):(f.state(\"processing\").set(f.state(\"processing\").get()+1),c.always(function(){f.state(\"processing\").set(f.state(\"processing\").get()-1)}),f.trigger(\"changeset-save\",g),e=f.previewer.query({excludeCustomizedSaved:!0}),delete e.customized,_.extend(e,{nonce:f.settings.nonce.save,customize_theme:f.settings.theme.stylesheet,customize_changeset_data:JSON.stringify(g)}),d=wp.ajax.post(\"customize_save\",e),d.done(function(a){var b={};f._lastSavedRevision=Math.max(f._latestRevision,f._lastSavedRevision),f.state(\"changesetStatus\").set(a.changeset_status),c.resolve(a),f.trigger(\"changeset-saved\",a),a.setting_validities&&_.each(a.setting_validities,function(a,c){!0===a&&_.isObject(g[c])&&!_.isUndefined(g[c].value)&&(b[c]=g[c].value)}),f.previewer.send(\"changeset-saved\",_.extend({},a,{saved_changeset_values:b}))}),d.fail(function(a){c.reject(a),f.trigger(\"changeset-error\",a)}),d.always(function(a){a.setting_validities&&f._handleSettingValidities({settingValidities:a.setting_validities})}),c.promise())},f.utils.bubbleChildValueChanges=function(a,c){b.each(c,function(b,c){a[c].bind(function(b,c){a.parent&&b!==c&&a.parent.trigger(\"change\",a)})})},d=function(a){var b,c,d,e;b=this,a=a||{},d=function(){var a;a=(b.extended(f.Panel)||b.extended(f.Section))&&b.expanded&&b.expanded()?b.contentContainer:b.container,e=a.find(\".control-focus:first\"),0===e.length&&(e=a.find(\"input, select, textarea, button, object, a[href], [tabindex]\").filter(\":visible\").first()),e.focus()},a.completeCallback?(c=a.completeCallback,a.completeCallback=function(){d(),c()}):a.completeCallback=d,f.state(\"paneVisible\").set(!0),b.expand?b.expand(a):a.completeCallback()},f.utils.prioritySort=function(a,b){return a.priority()===b.priority()&&\"number\"==typeof a.params.instanceNumber&&\"number\"==typeof b.params.instanceNumber?a.params.instanceNumber-b.params.instanceNumber:a.priority()-b.priority()},f.utils.isKeydownButNotEnterEvent=function(a){return\"keydown\"===a.type&&13!==a.which},f.utils.areElementListsEqual=function(a,c){var d=a.length===c.length&&-1===_.indexOf(_.map(_.zip(a,c),function(a){return b(a[0]).is(a[1])}),!1);return d},e=function(){var a,b,c;return a=document.createElement(\"div\"),b={transition:\"transitionend\",OTransition:\"oTransitionEnd\",MozTransition:\"transitionend\",WebkitTransition:\"webkitTransitionEnd\"},c=_.find(_.keys(b),function(b){return!_.isUndefined(a.style[b])}),c?b[c]:null}(),c=f.Class.extend({defaultActiveArguments:{duration:\"fast\",completeCallback:b.noop},defaultExpandedArguments:{duration:\"fast\",completeCallback:b.noop},containerType:\"container\",defaults:{title:\"\",description:\"\",priority:100,type:\"default\",content:null,active:!0,instanceNumber:null},initialize:function(a,c){var d=this;d.id=a,c=c||{},c.params=_.defaults(c.params||{},d.defaults),b.extend(d,c),d.templateSelector=\"customize-\"+d.containerType+\"-\"+d.params.type,d.container=b(d.params.content),0===d.container.length&&(d.container=b(d.getContainer())),d.headContainer=d.container,d.contentContainer=d.getContent(),d.container=d.container.add(d.contentContainer),d.deferred={embedded:new b.Deferred},d.priority=new f.Value,d.active=new f.Value,d.activeArgumentsQueue=[],d.expanded=new f.Value,d.expandedArgumentsQueue=[],d.active.bind(function(a){var c=d.activeArgumentsQueue.shift();c=b.extend({},d.defaultActiveArguments,c),a=a&&d.isContextuallyActive(),d.onChangeActive(a,c)}),d.expanded.bind(function(a){var c=d.expandedArgumentsQueue.shift();c=b.extend({},d.defaultExpandedArguments,c),d.onChangeExpanded(a,c)}),d.deferred.embedded.done(function(){d.attachEvents()}),f.utils.bubbleChildValueChanges(d,[\"priority\",\"active\"]),d.priority.set(d.params.priority),d.active.set(d.params.active),d.expanded.set(!1)},ready:function(){},_children:function(a,b){var c=this,d=[];return f[b].each(function(b){b[a].get()===c.id&&d.push(b)}),d.sort(f.utils.prioritySort),d},isContextuallyActive:function(){throw new Error(\"Container.isContextuallyActive() must be overridden in a subclass.\")},onChangeActive:function(a,c){var d,e,g=this,h=g.headContainer;return c.unchanged?void(c.completeCallback&&c.completeCallback()):(d=\"resolved\"===f.previewer.deferred.active.state()?c.duration:0,g.extended(f.Panel)&&(f.panel.each(function(a){a!==g&&a.expanded()&&(e=a,d=0)}),a||_.each(g.sections(),function(a){a.collapse({duration:0})})),void(b.contains(document,h.get(0))?a?h.slideDown(d,c.completeCallback):g.expanded()?g.collapse({duration:d,completeCallback:function(){h.slideUp(d,c.completeCallback)}}):h.slideUp(d,c.completeCallback):(h.toggle(a),c.completeCallback&&c.completeCallback())))},_toggleActive:function(a,b){var c=this;return b=b||{},a&&this.active.get()||!a&&!this.active.get()?(b.unchanged=!0,c.onChangeActive(c.active.get(),b),!1):(b.unchanged=!1,this.activeArgumentsQueue.push(b),this.active.set(a),!0)},activate:function(a){return this._toggleActive(!0,a)},deactivate:function(a){return this._toggleActive(!1,a)},onChangeExpanded:function(){throw new Error(\"Must override with subclass.\")},_toggleExpanded:function(a,b){var c,d=this;return b=b||{},c=b.completeCallback,!(a&&!d.active())&&(f.state(\"paneVisible\").set(!0),b.completeCallback=function(){c&&c.apply(d,arguments),a?d.container.trigger(\"expanded\"):d.container.trigger(\"collapsed\")},a&&d.expanded.get()||!a&&!d.expanded.get()?(b.unchanged=!0,d.onChangeExpanded(d.expanded.get(),b),!1):(b.unchanged=!1,d.expandedArgumentsQueue.push(b),d.expanded.set(a),!0))},expand:function(a){return this._toggleExpanded(!0,a)},collapse:function(a){return this._toggleExpanded(!1,a)},_animateChangeExpanded:function(a){if(!e)return void(a&&a());var c,d,g,h=this,i=h.contentContainer,j=i.closest(\".wp-full-overlay\");c=j.add(i),g=!h.panel||\"\"===h.panel()||!!f.panel(h.panel()).contentContainer.hasClass(\"skip-transition\"),g&&(c=c.add(\"#customize-info, .customize-pane-parent\")),d=function(f){2===f.eventPhase&&b(f.target).is(i)&&(i.off(e,d),c.removeClass(\"busy\"),a&&a())},i.on(e,d),c.addClass(\"busy\"),_.defer(function(){var a=i.closest(\".wp-full-overlay-sidebar-content\"),b=a.scrollTop(),c=i.data(\"previous-scrollTop\")||0,d=h.expanded();d&&0<b?(i.css(\"top\",b+\"px\"),i.data(\"previous-scrollTop\",b)):!d&&0<b+c&&(i.css(\"top\",c-b+\"px\"),a.scrollTop(c))})},focus:d,getContainer:function(){var a,c=this;return a=0!==b(\"#tmpl-\"+c.templateSelector).length?wp.template(c.templateSelector):wp.template(\"customize-\"+c.containerType+\"-default\"),a&&c.container?b.trim(a(c.params)):\"<li></li>\"},getContent:function(){var a=this,b=a.container,c=b.find(\".accordion-section-content, .control-panel-content\").first(),d=\"sub-\"+b.attr(\"id\"),e=d,f=b.attr(\"aria-owns\");return f&&(e=e+\" \"+f),b.attr(\"aria-owns\",e),c.detach().attr({id:d,\"class\":\"customize-pane-child \"+c.attr(\"class\")+\" \"+b.attr(\"class\")})}}),f.Section=c.extend({containerType:\"section\",defaults:{title:\"\",description:\"\",priority:100,type:\"default\",content:null,active:!0,instanceNumber:null,panel:null,customizeAction:\"\"},initialize:function(a,d){var e=this;c.prototype.initialize.call(e,a,d),e.id=a,e.panel=new f.Value,e.panel.bind(function(a){b(e.headContainer).toggleClass(\"control-subsection\",!!a)}),e.panel.set(e.params.panel||\"\"),f.utils.bubbleChildValueChanges(e,[\"panel\"]),e.embed(),e.deferred.embedded.done(function(){e.ready()})},embed:function(){var a,c=this,d=b(\"#customize-theme-controls\");a=function(a){var e;a?f.panel(a,function(a){a.deferred.embedded.done(function(){e=a.contentContainer,c.headContainer.parent().is(e)||e.append(c.headContainer),c.contentContainer.parent().is(c.headContainer)||d.append(c.contentContainer),c.deferred.embedded.resolve()})}):(e=b(\".customize-pane-parent\"),c.headContainer.parent().is(e)||e.append(c.headContainer),c.contentContainer.parent().is(c.headContainer)||d.append(c.contentContainer),c.deferred.embedded.resolve())},c.panel.bind(a),a(c.panel.get())},attachEvents:function(){var a,b,c=this;c.container.hasClass(\"cannot-expand\")||(c.container.find(\".accordion-section-title, .customize-section-back\").on(\"click keydown\",function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),c.expanded()?c.collapse():c.expand())}),c.container.find(\".customize-section-title .customize-help-toggle\").on(\"click\",function(){a=c.container.find(\".section-meta\"),a.hasClass(\"cannot-expand\")||(b=a.find(\".customize-section-description:first\"),b.toggleClass(\"open\"),b.slideToggle(),b.attr(\"aria-expanded\",function(a,b){return\"true\"===b?\"false\":\"true\"}))}))},isContextuallyActive:function(){var a=this,b=a.controls(),c=0;return _(b).each(function(a){a.active()&&(c+=1)}),0!==c},controls:function(){return this._children(\"section\",\"control\")},onChangeExpanded:function(a,c){var d,e,g=this,h=g.headContainer.closest(\".wp-full-overlay-sidebar-content\"),i=g.contentContainer,j=g.headContainer.closest(\".wp-full-overlay\"),k=i.find(\".customize-section-back\"),l=g.headContainer.find(\".accordion-section-title\").first();a&&!i.hasClass(\"open\")?(d=c.unchanged?c.completeCallback:b.proxy(function(){g._animateChangeExpanded(function(){l.attr(\"tabindex\",\"-1\"),k.attr(\"tabindex\",\"0\"),k.focus(),i.css(\"top\",\"\"),h.scrollTop(0),c.completeCallback&&c.completeCallback()}),i.addClass(\"open\"),j.addClass(\"section-open\"),f.state(\"expandedSection\").set(g)},this),c.allowMultiple||f.section.each(function(a){a!==g&&a.collapse({duration:c.duration})}),g.panel()?f.panel(g.panel()).expand({duration:c.duration,completeCallback:d}):(f.panel.each(function(a){a.collapse()}),d())):!a&&i.hasClass(\"open\")?(g.panel()&&(e=f.panel(g.panel()),e.contentContainer.hasClass(\"skip-transition\")&&e.collapse()),g._animateChangeExpanded(function(){k.attr(\"tabindex\",\"-1\"),l.attr(\"tabindex\",\"0\"),l.focus(),i.css(\"top\",\"\"),c.completeCallback&&c.completeCallback()}),i.removeClass(\"open\"),j.removeClass(\"section-open\"),g===f.state(\"expandedSection\").get()&&f.state(\"expandedSection\").set(!1)):c.completeCallback&&c.completeCallback()}}),f.ThemesSection=f.Section.extend({currentTheme:\"\",overlay:\"\",template:\"\",screenshotQueue:null,$window:b(window),initialize:function(){return this.$customizeSidebar=b(\".wp-full-overlay-sidebar-content:first\"),f.Section.prototype.initialize.apply(this,arguments)},ready:function(){var a=this;a.overlay=a.container.find(\".theme-overlay\"),a.template=wp.template(\"customize-themes-details-view\"),a.container.on(\"keydown\",function(b){a.overlay.find(\".theme-wrap\").is(\":visible\")&&(39===b.keyCode&&a.nextTheme(),37===b.keyCode&&a.previousTheme(),27===b.keyCode&&(a.closeDetails(),b.stopPropagation()))}),_.bindAll(this,\"renderScreenshots\")},isContextuallyActive:function(){return this.active()},attachEvents:function(){var a=this;a.container.find(\".change-theme, .customize-theme\").on(\"click keydown\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),a.expanded()?a.collapse():a.expand())}),a.container.on(\"click keydown\",\".left\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),a.previousTheme())}),a.container.on(\"click keydown\",\".right\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),a.nextTheme())}),a.container.on(\"click keydown\",\".theme-backdrop, .close\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),a.closeDetails())});var b=_.throttle(_.bind(a.renderScreenshots,this),100);a.container.on(\"input\",\"#themes-filter\",function(c){var d,e=c.currentTarget.value.toLowerCase().trim().replace(\"-\",\" \"),f=a.controls();_.each(f,function(a){a.filter(e)}),b(),d=a.container.find(\"li.customize-control:visible\").length,a.container.find(\".theme-count\").text(d)}),f.bind(\"ready\",function(){_.each(a.controls().slice(0,3),function(a){var b,c=a.params.theme.screenshot[0];c&&(b=new Image,b.src=c)})})},onChangeExpanded:function(a,b){if(b.unchanged)return void(b.completeCallback&&b.completeCallback());var c=this,d=c.contentContainer,e=d.closest(\".wp-full-overlay\"),g=d.closest(\".wp-full-overlay-sidebar-content\"),h=d.find(\".customize-theme\"),i=c.headContainer.find(\".change-theme\");a&&!d.hasClass(\"current-panel\")?(f.section.each(function(a){a!==c&&a.collapse({duration:b.duration})}),f.panel.each(function(a){a.collapse({duration:0})}),c._animateChangeExpanded(function(){i.attr(\"tabindex\",\"-1\"),h.attr(\"tabindex\",\"0\"),h.focus(),d.css(\"top\",\"\"),g.scrollTop(0),b.completeCallback&&b.completeCallback()}),e.addClass(\"in-themes-panel\"),d.addClass(\"current-panel\"),_.delay(c.renderScreenshots,10),c.$customizeSidebar.on(\"scroll.customize-themes-section\",_.throttle(c.renderScreenshots,300))):!a&&d.hasClass(\"current-panel\")&&(c._animateChangeExpanded(function(){i.attr(\"tabindex\",\"0\"),h.attr(\"tabindex\",\"-1\"),i.focus(),d.css(\"top\",\"\"),b.completeCallback&&b.completeCallback()}),e.removeClass(\"in-themes-panel\"),d.removeClass(\"current-panel\"),c.$customizeSidebar.off(\"scroll.customize-themes-section\"))},renderScreenshots:function(){var a=this;null===a.screenshotQueue&&(a.screenshotQueue=a.controls()),a.screenshotQueue.length&&(a.screenshotQueue=_.filter(a.screenshotQueue,function(b){var c=b.container.find(\".theme-screenshot\"),d=c.find(\"img\");if(!d.length)return!1;if(d.is(\":hidden\"))return!0;var e=a.$window.scrollTop(),f=e+a.$window.height(),g=d.offset().top,h=c.height(),i=g+h,j=3*h,k=i>=e-j&&g<=f+j;return k&&b.container.trigger(\"render-screenshot\"),!k}))},nextTheme:function(){var a=this;a.getNextTheme()&&a.showDetails(a.getNextTheme(),function(){a.overlay.find(\".right\").focus()})},getNextTheme:function(){var a,b;return a=f.control(\"theme_\"+this.currentTheme),b=a.container.next(\"li.customize-control-theme\"),!!b.length&&(b=b[0].id.replace(\"customize-control-\",\"\"),a=f.control(b),a.params.theme)},previousTheme:function(){var a=this;a.getPreviousTheme()&&a.showDetails(a.getPreviousTheme(),function(){a.overlay.find(\".left\").focus()})},getPreviousTheme:function(){var a,b;return a=f.control(\"theme_\"+this.currentTheme),b=a.container.prev(\"li.customize-control-theme\"),!!b.length&&(b=b[0].id.replace(\"customize-control-\",\"\"),a=f.control(b),a.params.theme)},updateLimits:function(){this.getNextTheme()||this.overlay.find(\".right\").addClass(\"disabled\"),this.getPreviousTheme()||this.overlay.find(\".left\").addClass(\"disabled\")},loadThemePreview:function(a){var c,d,e,g=b.Deferred();return e=document.createElement(\"a\"),e.href=location.href,e.search=b.param(_.extend(f.utils.parseQueryString(e.search.substr(1)),{theme:a,changeset_uuid:f.settings.changeset.uuid})),d=b(\".wp-full-overlay\"),d.addClass(\"customize-loading\"),c=function(){var a;f.state(\"processing\").get()>0||(f.state(\"processing\").unbind(c),a=f.requestChangesetUpdate(),a.done(function(){b(window).off(\"beforeunload.customize-confirm\"),top.location.href=e.href,g.resolve()}),a.fail(function(){d.removeClass(\"customize-loading\"),g.reject()}))},0===f.state(\"processing\").get()?c():f.state(\"processing\").bind(c),g.promise()},showDetails:function(a,c){var d,e=this;c=c||function(){},e.currentTheme=a.id,e.overlay.html(e.template(a)).fadeIn(\"fast\").focus(),b(\"body\").addClass(\"modal-open\"),e.containFocus(e.overlay),e.updateLimits(),d=e.overlay.find(\".inactive-theme > a\"),d.on(\"click\",function(b){b.preventDefault(),d.hasClass(\"disabled\")||(d.addClass(\"disabled\"),e.loadThemePreview(a.id).fail(function(){d.removeClass(\"disabled\")}))}),c()},closeDetails:function(){b(\"body\").removeClass(\"modal-open\"),this.overlay.fadeOut(\"fast\"),f.control(\"theme_\"+this.currentTheme).focus()},containFocus:function(a){var c;a.on(\"keydown\",function(d){if(9===d.keyCode)return c=b(\":tabbable\",a),c.last()[0]!==d.target||d.shiftKey?c.first()[0]===d.target&&d.shiftKey?(c.last().focus(),!1):void 0:(c.first().focus(),!1)})}}),f.Panel=c.extend({containerType:\"panel\",initialize:function(a,b){var d=this;c.prototype.initialize.call(d,a,b),d.embed(),d.deferred.embedded.done(function(){d.ready()})},embed:function(){var a=this,c=b(\"#customize-theme-controls\"),d=b(\".customize-pane-parent\");a.headContainer.parent().is(d)||d.append(a.headContainer),a.contentContainer.parent().is(a.headContainer)||(c.append(a.contentContainer),a.renderContent()),a.deferred.embedded.resolve()},attachEvents:function(){var a,c=this;c.headContainer.find(\".accordion-section-title\").on(\"click keydown\",function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),c.expanded()||c.expand())}),c.container.find(\".customize-panel-back\").on(\"click keydown\",function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),c.expanded()&&c.collapse())}),a=c.container.find(\".panel-meta:first\"),a.find(\"> .accordion-section-title .customize-help-toggle\").on(\"click keydown\",function(d){if(!f.utils.isKeydownButNotEnterEvent(d)&&(d.preventDefault(),!a.hasClass(\"cannot-expand\"))){var e=a.find(\".customize-panel-description:first\");a.hasClass(\"open\")?(a.toggleClass(\"open\"),e.slideUp(c.defaultExpandedArguments.duration),b(this).attr(\"aria-expanded\",!1)):(e.slideDown(c.defaultExpandedArguments.duration),a.toggleClass(\"open\"),b(this).attr(\"aria-expanded\",!0))}})},sections:function(){return this._children(\"panel\",\"section\")},isContextuallyActive:function(){var a=this,b=a.sections(),c=0;return _(b).each(function(a){a.active()&&a.isContextuallyActive()&&(c+=1)}),0!==c},onChangeExpanded:function(a,b){if(b.unchanged)return void(b.completeCallback&&b.completeCallback());var c,d=this,e=d.contentContainer,g=e.closest(\".wp-full-overlay\"),h=e.closest(\".wp-full-overlay-sidebar-content\"),i=d.headContainer.find(\".accordion-section-title\"),j=e.find(\".customize-panel-back\"),k=d.sections();a&&!e.hasClass(\"current-panel\")?(f.section.each(function(a){d.id!==a.panel()&&a.collapse({duration:0})}),f.panel.each(function(a){d!==a&&a.collapse({duration:0})}),d.params.autoExpandSoleSection&&1===k.length&&k[0].active.get()?(e.addClass(\"current-panel skip-transition\"),g.addClass(\"in-sub-panel\"),k[0].expand({completeCallback:b.completeCallback})):(d._animateChangeExpanded(function(){i.attr(\"tabindex\",\"-1\"),j.attr(\"tabindex\",\"0\"),j.focus(),e.css(\"top\",\"\"),h.scrollTop(0),b.completeCallback&&b.completeCallback()}),e.addClass(\"current-panel\"),g.addClass(\"in-sub-panel\")),f.state(\"expandedPanel\").set(d)):!a&&e.hasClass(\"current-panel\")&&(c=e.hasClass(\"skip-transition\"),c?e.removeClass(\"skip-transition\"):d._animateChangeExpanded(function(){i.attr(\"tabindex\",\"0\"),j.attr(\"tabindex\",\"-1\"),i.focus(),e.css(\"top\",\"\"),b.completeCallback&&b.completeCallback()}),g.removeClass(\"in-sub-panel\"),e.removeClass(\"current-panel\"),d===f.state(\"expandedPanel\").get()&&f.state(\"expandedPanel\").set(!1))},renderContent:function(){var a,c=this;a=0!==b(\"#tmpl-\"+c.templateSelector+\"-content\").length?wp.template(c.templateSelector+\"-content\"):wp.template(\"customize-panel-default-content\"),a&&c.headContainer&&c.contentContainer.html(a(c.params))}}),f.Control=f.Class.extend({defaultActiveArguments:{duration:\"fast\",completeCallback:b.noop},initialize:function(a,c){var d,e,g,h=this;h.params={},b.extend(h,c||{}),h.id=a,h.selector=\"#customize-control-\"+a.replace(/\\]/g,\"\").replace(/\\[/g,\"-\"),h.templateSelector=\"customize-control-\"+h.params.type+\"-content\",h.container=b(h.params.content?h.params.content:h.selector),h.deferred={embedded:new b.Deferred},h.section=new f.Value,h.priority=new f.Value,h.active=new f.Value,h.activeArgumentsQueue=[],h.notifications=new f.Values({defaultConstructor:f.Notification}),h.elements=[],d=h.container.find(\"[data-customize-setting-link]\"),e={},d.each(function(){var a,c=b(this);if(c.is(\":radio\")){if(a=c.prop(\"name\"),e[a])return;e[a]=!0,c=d.filter('[name=\"'+a+'\"]')}f(c.data(\"customizeSettingLink\"),function(a){var b=new f.Element(c);h.elements.push(b),b.sync(a),b.set(a())})}),h.active.bind(function(a){var c=h.activeArgumentsQueue.shift();c=b.extend({},h.defaultActiveArguments,c),h.onChangeActive(a,c)}),h.section.set(h.params.section),h.priority.set(isNaN(h.params.priority)?10:h.params.priority),h.active.set(h.params.active),f.utils.bubbleChildValueChanges(h,[\"section\",\"priority\",\"active\"]),g=b.map(h.params.settings,function(a){return a}),0===g.length?(h.setting=null,h.settings={},h.embed()):f.apply(f,g.concat(function(){var a;h.settings={};for(a in h.params.settings)h.settings[a]=f(h.params.settings[a]);h.setting=h.settings[\"default\"]||null,_.each(h.settings,function(a){a.notifications.bind(\"add\",function(b){var c,d,e;d=a.id+\":\"+b.code,e=_.extend({},b,{setting:a.id}),c=new f.Notification(d,e),h.notifications.add(c.code,c)}),a.notifications.bind(\"remove\",function(b){h.notifications.remove(a.id+\":\"+b.code)})}),h.embed()})),h.deferred.embedded.done(function(){var a=_.debounce(function(){h.renderNotifications()});h.notifications.bind(\"add\",function(b){wp.a11y.speak(b.message,\"assertive\"),a()}),h.notifications.bind(\"remove\",a),h.renderNotifications(),h.ready()})},embed:function(){var a,b=this;a=function(a){var c;a&&f.section(a,function(a){a.deferred.embedded.done(function(){c=a.contentContainer.is(\"ul\")?a.contentContainer:a.contentContainer.find(\"ul:first\"),b.container.parent().is(c)||(c.append(b.container),b.renderContent()),b.deferred.embedded.resolve()})})},b.section.bind(a),a(b.section.get())},ready:function(){var a,c=this;\"dropdown-pages\"===c.params.type&&c.params.allow_addition&&(a=c.container.find(\".new-content-item\"),a.hide(),c.container.on(\"click\",\".add-new-toggle\",function(c){b(c.currentTarget).slideUp(180),a.slideDown(180),a.find(\".create-item-input\").focus()}),c.container.on(\"click\",\".add-content\",function(){c.addNewPage()}),c.container.on(\"keyup\",\".create-item-input\",function(a){13===a.which&&c.addNewPage()}))},getNotificationsContainerElement:function(){var a,c,d=this;return c=d.container.find(\".customize-control-notifications-container:first\"),c.length?c:(c=b('<div class=\"customize-control-notifications-container\"></div>'),d.container.hasClass(\"customize-control-nav_menu_item\")?d.container.find(\".menu-item-settings:first\").prepend(c):d.container.hasClass(\"customize-control-widget_form\")?d.container.find(\".widget-inside:first\").prepend(c):(a=d.container.find(\".customize-control-title\"),a.length?a.after(c):d.container.prepend(c)),c)},renderNotifications:function(){var a,c,d=this,e=!1;a=d.getNotificationsContainerElement(),a&&a.length&&(c=[],d.notifications.each(function(a){c.push(a),\"error\"===a.type&&(e=!0)}),0===c.length?a.stop().slideUp(\"fast\"):a.stop().slideDown(\"fast\",null,function(){b(this).css(\"height\",\"auto\")}),d.notificationsTemplate||(d.notificationsTemplate=wp.template(\"customize-control-notifications\")),d.container.toggleClass(\"has-notifications\",0!==c.length),d.container.toggleClass(\"has-error\",e),a.empty().append(b.trim(d.notificationsTemplate({notifications:c,altNotice:Boolean(d.altNotice)}))))},expand:function(a){f.section(this.section()).expand(a)},focus:d,onChangeActive:function(a,c){return c.unchanged?void(c.completeCallback&&c.completeCallback()):void(b.contains(document,this.container[0])?a?this.container.slideDown(c.duration,c.completeCallback):this.container.slideUp(c.duration,c.completeCallback):(this.container.toggle(a),c.completeCallback&&c.completeCallback()))},toggle:function(a){return this.onChangeActive(a,this.defaultActiveArguments)},activate:c.prototype.activate,deactivate:c.prototype.deactivate,_toggleActive:c.prototype._toggleActive,dropdownInit:function(){var a=this,b=this.container.find(\".dropdown-status\"),c=this.params,d=!1,e=function(a){\"string\"==typeof a&&c.statuses&&c.statuses[a]?b.html(c.statuses[a]).show():b.hide()};this.container.on(\"click keydown\",\".dropdown\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),d||a.container.toggleClass(\"open\"),a.container.hasClass(\"open\")&&a.container.parent().parent().find(\"li.library-selected\").focus(),d=!0,setTimeout(function(){d=!1},400))}),this.setting.bind(e),e(this.setting())},renderContent:function(){var a,c=this;0!==b(\"#tmpl-\"+c.templateSelector).length&&(a=wp.template(c.templateSelector),a&&c.container&&c.container.html(a(c.params)))},addNewPage:function(){var a,c,d,e,g,h,i=this;if(\"dropdown-pages\"===i.params.type&&i.params.allow_addition&&f.Menus){if(c=i.container.find(\".add-new-toggle\"),d=i.container.find(\".new-content-item\"),e=i.container.find(\".create-item-input\"),g=e.val(),h=i.container.find(\"select\"),!g)return void e.addClass(\"invalid\");e.removeClass(\"invalid\"),e.attr(\"disabled\",\"disabled\"),a=f.Menus.insertAutoDraftPost({post_title:g,post_type:\"page\"}),a.done(function(a){var e,j,k;e=new f.Menus.AvailableItemModel({id:\"post-\"+a.post_id,title:g,type:\"post_type\",type_label:f.Menus.data.l10n.page_label,object:\"page\",object_id:a.post_id,url:a.url}),f.Menus.availableMenuItemsPanel.collection.add(e),j=b(\"#available-menu-items-post_type-page\").find(\".available-menu-items-list\"),k=wp.template(\"available-menu-item\"),j.prepend(k(e.attributes)),h.focus(),i.setting.set(String(a.post_id)),d.slideUp(180),c.slideDown(180)}),a.always(function(){e.val(\"\").removeAttr(\"disabled\")})}}}),f.ColorControl=f.Control.extend({ready:function(){var a,b=this,c=\"hue\"===this.params.mode,d=!1;c?(a=this.container.find(\".color-picker-hue\"),a.val(b.setting()).wpColorPicker({change:function(a,c){d=!0,b.setting(c.color.h()),d=!1}})):(a=this.container.find(\".color-picker-hex\"),a.val(b.setting()).wpColorPicker({change:function(){d=!0,b.setting.set(a.wpColorPicker(\"color\")),d=!1},clear:function(){d=!0,b.setting.set(\"\"),d=!1}})),b.setting.bind(function(b){d||(a.val(b),a.wpColorPicker(\"color\",b))}),b.container.on(\"keydown\",function(c){var d;27===c.which&&(d=b.container.find(\".wp-picker-container\"),d.hasClass(\"wp-picker-active\")&&(a.wpColorPicker(\"close\"),b.container.find(\".wp-color-result\").focus(),c.stopPropagation()))})}}),f.MediaControl=f.Control.extend({ready:function(){function a(a){var d=b.Deferred();c.extended(f.UploadControl)?d.resolve():(a=parseInt(a,10),_.isNaN(a)||a<=0?(delete c.params.attachment,d.resolve()):c.params.attachment&&c.params.attachment.id===a&&d.resolve()),\"pending\"===d.state()&&wp.media.attachment(a).fetch().done(function(){c.params.attachment=this.attributes,d.resolve(),wp.customize.previewer.send(c.setting.id+\"-attachment-data\",this.attributes)}),d.done(function(){c.renderContent()})}var c=this;_.bindAll(c,\"restoreDefault\",\"removeFile\",\"openFrame\",\"select\",\"pausePlayer\"),c.container.on(\"click keydown\",\".upload-button\",c.openFrame),c.container.on(\"click keydown\",\".upload-button\",c.pausePlayer),c.container.on(\"click keydown\",\".thumbnail-image img\",c.openFrame),c.container.on(\"click keydown\",\".default-button\",c.restoreDefault),c.container.on(\"click keydown\",\".remove-button\",c.pausePlayer),c.container.on(\"click keydown\",\".remove-button\",c.removeFile),c.container.on(\"click keydown\",\".remove-button\",c.cleanupPlayer),f.section(c.section()).container.on(\"expanded\",function(){c.player&&c.player.setControlsSize()}).on(\"collapsed\",function(){c.pausePlayer()}),a(c.setting()),c.setting.bind(a)},pausePlayer:function(){this.player&&this.player.pause()},cleanupPlayer:function(){this.player&&wp.media.mixin.removePlayer(this.player)},openFrame:function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),this.frame||this.initFrame(),this.frame.open())},initFrame:function(){this.frame=wp.media({button:{text:this.params.button_labels.frame_button},states:[new wp.media.controller.Library({title:this.params.button_labels.frame_title,library:wp.media.query({type:this.params.mime_type}),multiple:!1,date:!1})]}),this.frame.on(\"select\",this.select)},select:function(){var a,b=this.frame.state().get(\"selection\").first().toJSON(),c=window._wpmejsSettings||{};this.params.attachment=b,this.setting(b.id),a=this.container.find(\"audio, video\").get(0),a?this.player=new MediaElementPlayer(a,c):this.cleanupPlayer()},restoreDefault:function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),this.params.attachment=this.params.defaultAttachment,this.setting(this.params.defaultAttachment.url))},removeFile:function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),this.params.attachment={},this.setting(\"\"),this.renderContent())}}),f.UploadControl=f.MediaControl.extend({select:function(){var a,b=this.frame.state().get(\"selection\").first().toJSON(),c=window._wpmejsSettings||{};this.params.attachment=b,this.setting(b.url),a=this.container.find(\"audio, video\").get(0),a?this.player=new MediaElementPlayer(a,c):this.cleanupPlayer()},success:function(){},removerVisibility:function(){}}),f.ImageControl=f.UploadControl.extend({thumbnailSrc:function(){}}),f.BackgroundControl=f.UploadControl.extend({ready:function(){f.UploadControl.prototype.ready.apply(this,arguments)},select:function(){f.UploadControl.prototype.select.apply(this,arguments),wp.ajax.post(\"custom-background-add\",{nonce:_wpCustomizeBackground.nonces.add,wp_customize:\"on\",customize_theme:f.settings.theme.stylesheet,attachment_id:this.params.attachment.id})}}),f.BackgroundPositionControl=f.Control.extend({ready:function(){var a,c=this;c.container.on(\"change\",'input[name=\"background-position\"]',function(){var a=b(this).val().split(\" \");c.settings.x(a[0]),c.settings.y(a[1])}),a=_.debounce(function(){var a,b,d,e;a=c.settings.x.get(),b=c.settings.y.get(),e=String(a)+\" \"+String(b),d=c.container.find('input[name=\"background-position\"][value=\"'+e+'\"]'),d.click()}),c.settings.x.bind(a),c.settings.y.bind(a),a()}}),f.CroppedImageControl=f.MediaControl.extend({openFrame:function(a){f.utils.isKeydownButNotEnterEvent(a)||(this.initFrame(),this.frame.setState(\"library\").open())},initFrame:function(){var a=_wpMediaViewsL10n;this.frame=wp.media({button:{text:a.select,close:!1},states:[new wp.media.controller.Library({title:this.params.button_labels.frame_title,library:wp.media.query({type:\"image\"}),multiple:!1,date:!1,priority:20,suggestedWidth:this.params.width,suggestedHeight:this.params.height}),new wp.media.controller.CustomizeImageCropper({imgSelectOptions:this.calculateImageSelectOptions,control:this})]}),this.frame.on(\"select\",this.onSelect,this),this.frame.on(\"cropped\",this.onCropped,this),this.frame.on(\"skippedcrop\",this.onSkippedCrop,this)},onSelect:function(){var a=this.frame.state().get(\"selection\").first().toJSON();this.params.width!==a.width||this.params.height!==a.height||this.params.flex_width||this.params.flex_height?this.frame.setState(\"cropper\"):(this.setImageFromAttachment(a),this.frame.close())},onCropped:function(a){this.setImageFromAttachment(a)},calculateImageSelectOptions:function(a,b){var c,d,e,f=b.get(\"control\"),g=!!parseInt(f.params.flex_width,10),h=!!parseInt(f.params.flex_height,10),i=a.get(\"width\"),j=a.get(\"height\"),k=parseInt(f.params.width,10),l=parseInt(f.params.height,10),m=k/l,n=k,o=l;return b.set(\"canSkipCrop\",!f.mustBeCropped(g,h,k,l,i,j)),i/j>m?(l=j,k=l*m):(k=i,l=k/m),c=(i-k)/2,d=(j-l)/2,e={handles:!0,keys:!0,instance:!0,persistent:!0,imageWidth:i,imageHeight:j,minWidth:n>k?k:n,minHeight:o>l?l:o,x1:c,y1:d,x2:k+c,y2:l+d},h===!1&&g===!1&&(e.aspectRatio=k+\":\"+l),!0===h&&(delete e.minHeight,\ne.maxWidth=i),!0===g&&(delete e.minWidth,e.maxHeight=j),e},mustBeCropped:function(a,b,c,d,e,f){return(!0!==a||!0!==b)&&((!0!==a||d!==f)&&((!0!==b||c!==e)&&((c!==e||d!==f)&&!(e<=c))))},onSkippedCrop:function(){var a=this.frame.state().get(\"selection\").first().toJSON();this.setImageFromAttachment(a)},setImageFromAttachment:function(a){this.params.attachment=a,this.setting(a.id)}}),f.SiteIconControl=f.CroppedImageControl.extend({initFrame:function(){var a=_wpMediaViewsL10n;this.frame=wp.media({button:{text:a.select,close:!1},states:[new wp.media.controller.Library({title:this.params.button_labels.frame_title,library:wp.media.query({type:\"image\"}),multiple:!1,date:!1,priority:20,suggestedWidth:this.params.width,suggestedHeight:this.params.height}),new wp.media.controller.SiteIconCropper({imgSelectOptions:this.calculateImageSelectOptions,control:this})]}),this.frame.on(\"select\",this.onSelect,this),this.frame.on(\"cropped\",this.onCropped,this),this.frame.on(\"skippedcrop\",this.onSkippedCrop,this)},onSelect:function(){var a=this.frame.state().get(\"selection\").first().toJSON(),b=this;this.params.width!==a.width||this.params.height!==a.height||this.params.flex_width||this.params.flex_height?this.frame.setState(\"cropper\"):wp.ajax.post(\"crop-image\",{nonce:a.nonces.edit,id:a.id,context:\"site-icon\",cropDetails:{x1:0,y1:0,width:this.params.width,height:this.params.height,dst_width:this.params.width,dst_height:this.params.height}}).done(function(a){b.setImageFromAttachment(a),b.frame.close()}).fail(function(){b.frame.trigger(\"content:error:crop\")})},setImageFromAttachment:function(a){var c,d,e=[\"site_icon-32\",\"thumbnail\",\"full\"];_.each(e,function(b){d||_.isUndefined(a.sizes[b])||(d=a.sizes[b])}),this.params.attachment=a,this.setting(a.id),d&&(c=b('link[rel=\"icon\"][sizes=\"32x32\"]'),c.attr(\"href\",d.url))},removeFile:function(a){f.utils.isKeydownButNotEnterEvent(a)||(a.preventDefault(),this.params.attachment={},this.setting(\"\"),this.renderContent(),b('link[rel=\"icon\"][sizes=\"32x32\"]').attr(\"href\",\"/favicon.ico\"))}}),f.HeaderControl=f.Control.extend({ready:function(){this.btnRemove=b(\"#customize-control-header_image .actions .remove\"),this.btnNew=b(\"#customize-control-header_image .actions .new\"),_.bindAll(this,\"openMedia\",\"removeImage\"),this.btnNew.on(\"click\",this.openMedia),this.btnRemove.on(\"click\",this.removeImage),f.HeaderTool.currentHeader=this.getInitialHeaderImage(),new f.HeaderTool.CurrentView({model:f.HeaderTool.currentHeader,el:\"#customize-control-header_image .current .container\"}),new f.HeaderTool.ChoiceListView({collection:f.HeaderTool.UploadsList=new f.HeaderTool.ChoiceList,el:\"#customize-control-header_image .choices .uploaded .list\"}),new f.HeaderTool.ChoiceListView({collection:f.HeaderTool.DefaultsList=new f.HeaderTool.DefaultsList,el:\"#customize-control-header_image .choices .default .list\"}),f.HeaderTool.combinedList=f.HeaderTool.CombinedList=new f.HeaderTool.CombinedList([f.HeaderTool.UploadsList,f.HeaderTool.DefaultsList]),wp.media.controller.Cropper.prototype.defaults.doCropArgs.wp_customize=\"on\",wp.media.controller.Cropper.prototype.defaults.doCropArgs.customize_theme=f.settings.theme.stylesheet},getInitialHeaderImage:function(){if(!f.get().header_image||!f.get().header_image_data||_.contains([\"remove-header\",\"random-default-image\",\"random-uploaded-image\"],f.get().header_image))return new f.HeaderTool.ImageModel;var a=_.find(_wpCustomizeHeader.uploads,function(a){return a.attachment_id===f.get().header_image_data.attachment_id});return a||(a={url:f.get().header_image,thumbnail_url:f.get().header_image,attachment_id:f.get().header_image_data.attachment_id}),new f.HeaderTool.ImageModel({header:a,choice:a.url.split(\"/\").pop()})},calculateImageSelectOptions:function(a,b){var c,d,e,g,h,i,j=parseInt(_wpCustomizeHeader.data.width,10),k=parseInt(_wpCustomizeHeader.data.height,10),l=!!parseInt(_wpCustomizeHeader.data[\"flex-width\"],10),m=!!parseInt(_wpCustomizeHeader.data[\"flex-height\"],10);return h=a.get(\"width\"),g=a.get(\"height\"),this.headerImage=new f.HeaderTool.ImageModel,this.headerImage.set({themeWidth:j,themeHeight:k,themeFlexWidth:l,themeFlexHeight:m,imageWidth:h,imageHeight:g}),b.set(\"canSkipCrop\",!this.headerImage.shouldBeCropped()),c=j/k,d=h,e=g,d/e>c?(k=e,j=k*c):(j=d,k=j/c),i={handles:!0,keys:!0,instance:!0,persistent:!0,imageWidth:h,imageHeight:g,x1:0,y1:0,x2:j,y2:k},m===!1&&l===!1&&(i.aspectRatio=j+\":\"+k),m===!1&&(i.maxHeight=k),l===!1&&(i.maxWidth=j),i},openMedia:function(a){var b=_wpMediaViewsL10n;a.preventDefault(),this.frame=wp.media({button:{text:b.selectAndCrop,close:!1},states:[new wp.media.controller.Library({title:b.chooseImage,library:wp.media.query({type:\"image\"}),multiple:!1,date:!1,priority:20,suggestedWidth:_wpCustomizeHeader.data.width,suggestedHeight:_wpCustomizeHeader.data.height}),new wp.media.controller.Cropper({imgSelectOptions:this.calculateImageSelectOptions})]}),this.frame.on(\"select\",this.onSelect,this),this.frame.on(\"cropped\",this.onCropped,this),this.frame.on(\"skippedcrop\",this.onSkippedCrop,this),this.frame.open()},onSelect:function(){this.frame.setState(\"cropper\")},onCropped:function(a){var b=a.url,c=a.attachment_id,d=a.width,e=a.height;this.setImageFromURL(b,c,d,e)},onSkippedCrop:function(a){var b=a.get(\"url\"),c=a.get(\"width\"),d=a.get(\"height\");this.setImageFromURL(b,a.id,c,d)},setImageFromURL:function(a,b,c,d){var e,g={};g.url=a,g.thumbnail_url=a,g.timestamp=_.now(),b&&(g.attachment_id=b),c&&(g.width=c),d&&(g.height=d),e=new f.HeaderTool.ImageModel({header:g,choice:a.split(\"/\").pop()}),f.HeaderTool.UploadsList.add(e),f.HeaderTool.currentHeader.set(e.toJSON()),e.save(),e.importImage()},removeImage:function(){f.HeaderTool.currentHeader.trigger(\"hide\"),f.HeaderTool.CombinedList.trigger(\"control:removeImage\")}}),f.ThemeControl=f.Control.extend({touchDrag:!1,isRendered:!1,renderContent:function(){var a=this,b=arguments;f.section(a.section(),function(c){c.expanded()?(f.Control.prototype.renderContent.apply(a,b),a.isRendered=!0):c.expanded.bind(function(c){c&&!a.isRendered&&(f.Control.prototype.renderContent.apply(a,b),a.isRendered=!0)})})},ready:function(){var a=this;a.container.on(\"touchmove\",\".theme\",function(){a.touchDrag=!0}),a.container.on(\"click keydown touchend\",\".theme\",function(c){if(!f.utils.isKeydownButNotEnterEvent(c))return a.touchDrag===!0?a.touchDrag=!1:void(b(c.target).is(\".theme-actions .button\")||f.section(a.section()).loadThemePreview(a.params.theme.id))}),a.container.on(\"click keydown\",\".theme-actions .theme-details\",function(b){f.utils.isKeydownButNotEnterEvent(b)||(b.preventDefault(),f.section(a.section()).showDetails(a.params.theme))}),a.container.on(\"render-screenshot\",function(){var a=b(this).find(\"img\"),c=a.data(\"src\");c&&a.attr(\"src\",c)})},filter:function(a){var b=this,c=b.params.theme.name+\" \"+b.params.theme.description+\" \"+b.params.theme.tags+\" \"+b.params.theme.author;c=c.toLowerCase().replace(\"-\",\" \"),-1!==c.search(a)?b.activate():b.deactivate()}}),f.defaultConstructor=f.Setting,f.control=new f.Values({defaultConstructor:f.Control}),f.section=new f.Values({defaultConstructor:f.Section}),f.panel=new f.Values({defaultConstructor:f.Panel}),f.PreviewFrame=f.Messenger.extend({sensitivity:null,initialize:function(a,c){var d=b.Deferred();d.promise(this),this.container=a.container,b.extend(a,{channel:f.PreviewFrame.uuid()}),f.Messenger.prototype.initialize.call(this,a,c),this.add(\"previewUrl\",a.previewUrl),this.query=b.extend(a.query||{},{customize_messenger_channel:this.channel()}),this.run(d)},run:function(a){var c,d,e,g=this,h=!1,i=!1,j=null,k=\"{}\"!==g.query.customized;g._ready&&g.unbind(\"ready\",g._ready),g._ready=function(b){i=!0,j=b,g.container.addClass(\"iframe-ready\"),b&&h&&a.resolveWith(g,[b])},g.bind(\"ready\",g._ready),c=document.createElement(\"a\"),c.href=g.previewUrl(),d=_.extend(f.utils.parseQueryString(c.search.substr(1)),{customize_changeset_uuid:g.query.customize_changeset_uuid,customize_theme:g.query.customize_theme,customize_messenger_channel:g.query.customize_messenger_channel}),c.search=b.param(d),g.iframe=b(\"<iframe />\",{title:f.l10n.previewIframeTitle,name:\"customize-\"+g.channel()}),g.iframe.attr(\"onmousewheel\",\"\"),k?g.iframe.attr(\"data-src\",c.href):g.iframe.attr(\"src\",c.href),g.iframe.appendTo(g.container),g.targetWindow(g.iframe[0].contentWindow),k&&(e=b(\"<form>\",{action:c.href,target:g.iframe.attr(\"name\"),method:\"post\",hidden:\"hidden\"}),e.append(b(\"<input>\",{type:\"hidden\",name:\"_method\",value:\"GET\"})),_.each(g.query,function(a,c){e.append(b(\"<input>\",{type:\"hidden\",name:c,value:a}))}),g.container.append(e),e.submit(),e.remove()),g.bind(\"iframe-loading-error\",function(b){return g.iframe.remove(),0===b?void g.login(a):-1===b?void a.rejectWith(g,[\"cheatin\"]):void a.rejectWith(g,[\"request failure\"])}),g.iframe.one(\"load\",function(){h=!0,i?a.resolveWith(g,[j]):setTimeout(function(){a.rejectWith(g,[\"ready timeout\"])},g.sensitivity)})},login:function(a){var c,d=this;return c=function(){a.rejectWith(d,[\"logged out\"])},this.triedLogin?c():void b.get(f.settings.url.ajax,{action:\"logged-in\"}).fail(c).done(function(e){var g;\"1\"!==e&&c(),g=b(\"<iframe />\",{src:d.previewUrl(),title:f.l10n.previewIframeTitle}).hide(),g.appendTo(d.container),g.on(\"load\",function(){d.triedLogin=!0,g.remove(),d.run(a)})})},destroy:function(){f.Messenger.prototype.destroy.call(this),this.iframe&&this.iframe.remove(),delete this.iframe,delete this.targetWindow}}),function(){var a=0;f.PreviewFrame.uuid=function(){return\"preview-\"+String(a++)}}(),f.setDocumentTitle=function(a){var b,c;b=f.settings.documentTitleTmpl,c=b.replace(\"%s\",a),document.title=c,f.trigger(\"title\",c)},f.Previewer=f.Messenger.extend({refreshBuffer:null,initialize:function(a,c){var d=this,e=document.createElement(\"a\");b.extend(d,c||{}),d.deferred={active:b.Deferred()},d.refresh=_.debounce(function(a){return function(){var b,c;b=function(){return 0===f.state(\"processing\").get()},b()?a.call(d):(c=function(){b()&&(a.call(d),f.state(\"processing\").unbind(c))},f.state(\"processing\").bind(c))}}(d.refresh),d.refreshBuffer),d.container=f.ensure(a.container),d.allowedUrls=a.allowedUrls,a.url=window.location.href,f.Messenger.prototype.initialize.call(d,a),e.href=d.origin(),d.add(\"scheme\",e.protocol.replace(/:$/,\"\")),d.add(\"previewUrl\",a.previewUrl).setter(function(a){var c,e,g,h=null,i=[];return c=document.createElement(\"a\"),c.href=a,/\\/wp-(admin|includes|content)(\\/|$)/.test(c.pathname)?null:(c.search.length>1&&(e=f.utils.parseQueryString(c.search.substr(1)),delete e.customize_changeset_uuid,delete e.customize_theme,delete e.customize_messenger_channel,_.isEmpty(e)?c.search=\"\":c.search=b.param(e)),i.push(c),d.scheme.get()+\":\"!==c.protocol&&(c=document.createElement(\"a\"),c.href=i[0].href,c.protocol=d.scheme.get()+\":\",i.unshift(c)),g=document.createElement(\"a\"),_.find(i,function(a){return!_.isUndefined(_.find(d.allowedUrls,function(b){if(g.href=b,c.protocol===g.protocol&&c.host===g.host&&0===c.pathname.indexOf(g.pathname.replace(/\\/$/,\"\")))return h=a.href,!0}))}),h)}),d.bind(\"ready\",d.ready),d.deferred.active.done(_.bind(d.keepPreviewAlive,d)),d.bind(\"synced\",function(){d.send(\"active\")}),d.previewUrl.bind(d.refresh),d.scroll=0,d.bind(\"scroll\",function(a){d.scroll=a}),d.bind(\"url\",function(a){var b,c=!1;d.scroll=0,b=function(){c=!0},d.previewUrl.bind(b),d.previewUrl.set(a),d.previewUrl.unbind(b),c||d.refresh()}),d.bind(\"documentTitle\",function(a){f.setDocumentTitle(a)})},ready:function(a){var b,c=this,d={};d.settings=f.get(),d[\"settings-modified-while-loading\"]=c.settingsModifiedWhileLoading,(\"resolved\"!==c.deferred.active.state()||c.loading)&&(d.scroll=c.scroll),d[\"edit-shortcut-visibility\"]=f.state(\"editShortcutVisibility\").get(),c.send(\"sync\",d),a.currentUrl&&(c.previewUrl.unbind(c.refresh),c.previewUrl.set(a.currentUrl),c.previewUrl.bind(c.refresh)),b={panel:a.activePanels,section:a.activeSections,control:a.activeControls},_(b).each(function(a,b){f[b].each(function(c,d){var e=_.isUndefined(f.settings[b+\"s\"][d]);e&&_.isUndefined(a[d])||(a[d]?c.activate():c.deactivate())})}),a.settingValidities&&f._handleSettingValidities({settingValidities:a.settingValidities,focusInvalidControl:!1})},keepPreviewAlive:function(){var a,b,c,d,e=this;d=function(){b=setTimeout(c,f.settings.timeouts.keepAliveCheck)},a=function(){f.state(\"previewerAlive\").set(!0),clearTimeout(b),d()},c=function(){f.state(\"previewerAlive\").set(!1)},d(),e.bind(\"ready\",a),e.bind(\"keep-alive\",a)},query:function(){},abort:function(){this.loading&&(this.loading.destroy(),delete this.loading)},refresh:function(){var a,b=this;b.send(\"loading-initiated\"),b.abort(),b.loading=new f.PreviewFrame({url:b.url(),previewUrl:b.previewUrl(),query:b.query({excludeCustomizedSaved:!0})||{},container:b.container}),b.settingsModifiedWhileLoading={},a=function(a){b.settingsModifiedWhileLoading[a.id]=!0},f.bind(\"change\",a),b.loading.always(function(){f.unbind(\"change\",a)}),b.loading.done(function(a){var c,d=this;b.preview=d,b.targetWindow(d.targetWindow()),b.channel(d.channel()),c=function(){d.unbind(\"synced\",c),b._previousPreview&&b._previousPreview.destroy(),b._previousPreview=b.preview,b.deferred.active.resolve(),delete b.loading},d.bind(\"synced\",c),b.trigger(\"ready\",a)}),b.loading.fail(function(a){b.send(\"loading-failed\"),\"logged out\"===a&&(b.preview&&(b.preview.destroy(),delete b.preview),b.login().done(b.refresh)),\"cheatin\"===a&&b.cheatin()})},login:function(){var a,c,d,e=this;return this._login?this._login:(a=b.Deferred(),this._login=a.promise(),c=new f.Messenger({channel:\"login\",url:f.settings.url.login}),d=b(\"<iframe />\",{src:f.settings.url.login,title:f.l10n.loginIframeTitle}).appendTo(this.container),c.targetWindow(d[0].contentWindow),c.bind(\"login\",function(){var b=e.refreshNonces();b.always(function(){d.remove(),c.destroy(),delete e._login}),b.done(function(){a.resolve()}),b.fail(function(){e.cheatin(),a.reject()})}),this._login)},cheatin:function(){b(document.body).empty().addClass(\"cheatin\").append(\"<h1>\"+f.l10n.cheatin+\"</h1><p>\"+f.l10n.notAllowed+\"</p>\")},refreshNonces:function(){var a,c=b.Deferred();return c.promise(),a=wp.ajax.post(\"customize_refresh_nonces\",{wp_customize:\"on\",customize_theme:f.settings.theme.stylesheet}),a.done(function(a){f.trigger(\"nonce-refresh\",a),c.resolve()}),a.fail(function(){c.reject()}),c}}),f.settingConstructor={},f.controlConstructor={color:f.ColorControl,media:f.MediaControl,upload:f.UploadControl,image:f.ImageControl,cropped_image:f.CroppedImageControl,site_icon:f.SiteIconControl,header:f.HeaderControl,background:f.BackgroundControl,background_position:f.BackgroundPositionControl,theme:f.ThemeControl},f.panelConstructor={},f.sectionConstructor={themes:f.ThemesSection},f._handleSettingValidities=function(a){var b,c=[],d=!1;_.each(a.settingValidities,function(a,b){var d=f(b);d&&(_.isObject(a)&&_.each(a,function(a,b){var e,g,h=!1;e=new f.Notification(b,_.extend({fromServer:!0},a)),g=d.notifications(e.code),g&&(h=e.type!==g.type||e.message!==g.message||!_.isEqual(e.data,g.data)),h&&d.notifications.remove(b),d.notifications.has(e.code)||d.notifications.add(b,e),c.push(d.id)}),d.notifications.each(function(b){!b.fromServer||\"error\"!==b.type||!0!==a&&a[b.code]||d.notifications.remove(b.code)}))}),a.focusInvalidControl&&(b=f.findControlsForSettings(c),_(_.values(b)).find(function(a){return _(a).find(function(a){var b=a.section()&&f.section.has(a.section())&&f.section(a.section()).expanded();return b&&a.expanded&&(b=a.expanded()),b&&(a.focus(),d=!0),d})}),d||_.isEmpty(b)||_.values(b)[0][0].focus())},f.findControlsForSettings=function(a){var b,c={};return _.each(_.unique(a),function(a){var d=f(a);d&&(b=d.findControls(),b&&b.length>0&&(c[a]=b))}),c},f.reflowPaneContents=_.bind(function(){var a,c,d,e=[],g=!1;document.activeElement&&(c=b(document.activeElement)),f.panel.each(function(b){var c=b.sections(),d=_.pluck(c,\"headContainer\");e.push(b),a=b.contentContainer.is(\"ul\")?b.contentContainer:b.contentContainer.find(\"ul:first\"),f.utils.areElementListsEqual(d,a.children(\"[id]\"))||(_(c).each(function(b){a.append(b.headContainer)}),g=!0)}),f.section.each(function(b){var c=b.controls(),d=_.pluck(c,\"container\");b.panel()||e.push(b),a=b.contentContainer.is(\"ul\")?b.contentContainer:b.contentContainer.find(\"ul:first\"),f.utils.areElementListsEqual(d,a.children(\"[id]\"))||(_(c).each(function(b){a.append(b.container)}),g=!0)}),e.sort(f.utils.prioritySort),d=_.pluck(e,\"headContainer\"),a=b(\"#customize-theme-controls .customize-pane-parent\"),f.utils.areElementListsEqual(d,a.children())||(_(e).each(function(b){a.append(b.headContainer)}),g=!0),f.panel.each(function(a){var b=a.active();a.active.callbacks.fireWith(a.active,[b,b])}),f.section.each(function(a){var b=a.active();a.active.callbacks.fireWith(a.active,[b,b])}),g&&c&&c.focus(),f.trigger(\"pane-contents-reflowed\")},f),b(function(){if(f.settings=window._wpCustomizeSettings,f.l10n=window._wpCustomizeControlsL10n,f.settings&&b.support.postMessage&&(b.support.cors||!f.settings.isCrossDomain)){null===f.PreviewFrame.prototype.sensitivity&&(f.PreviewFrame.prototype.sensitivity=f.settings.timeouts.previewFrameSensitivity),null===f.Previewer.prototype.refreshBuffer&&(f.Previewer.prototype.refreshBuffer=f.settings.timeouts.windowRefresh);var a,c=b(document.body),d=c.children(\".wp-full-overlay\"),e=b(\"#customize-info .panel-title.site-title\"),g=b(\".customize-controls-close\"),h=b(\"#save\"),i=b(\"#customize-footer-actions\");b(\"#customize-controls\").on(\"keydown\",function(a){var c=13===a.which,d=b(a.target);c&&(d.is(\"input:not([type=button])\")||d.is(\"select\"))&&a.preventDefault()}),b(\".customize-info\").find(\"> .accordion-section-title .customize-help-toggle\").on(\"click\",function(){var a=b(this).closest(\".accordion-section\"),c=a.find(\".customize-panel-description:first\");a.hasClass(\"cannot-expand\")||(a.hasClass(\"open\")?(a.toggleClass(\"open\"),c.slideUp(f.Panel.prototype.defaultExpandedArguments.duration),b(this).attr(\"aria-expanded\",!1)):(c.slideDown(f.Panel.prototype.defaultExpandedArguments.duration),a.toggleClass(\"open\"),b(this).attr(\"aria-expanded\",!0)))}),f.previewer=new f.Previewer({container:\"#customize-preview\",form:\"#customize-controls\",previewUrl:f.settings.url.preview,allowedUrls:f.settings.url.allowed},{nonce:f.settings.nonce,query:function(a){var b={wp_customize:\"on\",customize_theme:f.settings.theme.stylesheet,nonce:this.nonce.preview,customize_changeset_uuid:f.settings.changeset.uuid};return b.customized=JSON.stringify(f.dirtyValues({unsaved:a&&a.excludeCustomizedSaved})),b},save:function(c){function d(a){n[a.id]=!0}var e,g,i,j=this,k=b.Deferred(),l=\"publish\",m=f.state(\"processing\"),n={},o=[];return c&&c.status&&(l=c.status),f.state(\"saving\").get()&&(k.reject(\"already_saving\"),k.promise()),f.state(\"saving\").set(!0),g=function(){var e,g,m={},p=f._latestRevision;return f.bind(\"change\",d),f.each(function(a){a.notifications.each(function(b){\"error\"!==b.type||b.fromServer||(o.push(a.id),m[a.id]||(m[a.id]={}),m[a.id][b.code]=b)})}),i=f.findControlsForSettings(o),_.isEmpty(i)?(g=b.extend(j.query({excludeCustomizedSaved:!1}),{nonce:j.nonce.save,customize_changeset_status:l}),c&&c.date&&(g.customize_changeset_date=c.date),c&&c.title&&(g.customize_changeset_title=c.title),e=wp.ajax.post(\"customize_save\",g),h.prop(\"disabled\",!0),f.trigger(\"save\",e),e.always(function(){f.state(\"saving\").set(!1),h.prop(\"disabled\",!1),f.unbind(\"change\",d)}),e.fail(function(a){\"0\"===a?a=\"not_logged_in\":\"-1\"===a&&(a=\"invalid_nonce\"),\"invalid_nonce\"===a?j.cheatin():\"not_logged_in\"===a&&(j.preview.iframe.hide(),j.login().done(function(){j.save(),j.preview.iframe.show()})),a.setting_validities&&f._handleSettingValidities({settingValidities:a.setting_validities,focusInvalidControl:!0}),k.rejectWith(j,[a]),f.trigger(\"error\",a)}),void e.done(function(b){j.send(\"saved\",b),f.state(\"changesetStatus\").set(b.changeset_status),\"publish\"===b.changeset_status&&(f.each(function(a){a._dirty&&(_.isUndefined(f._latestSettingRevisions[a.id])||f._latestSettingRevisions[a.id]<=p)&&(a._dirty=!1)}),f.state(\"changesetStatus\").set(\"\"),f.settings.changeset.uuid=b.next_changeset_uuid,a.send(\"changeset-uuid\",f.settings.changeset.uuid)),b.setting_validities&&f._handleSettingValidities({settingValidities:b.setting_validities,focusInvalidControl:!0}),k.resolveWith(j,[b]),f.trigger(\"saved\",b),_.isEmpty(n)||f.state(\"saved\").set(!1)})):(_.values(i)[0][0].focus(),f.unbind(\"change\",d),k.rejectWith(j,[{setting_invalidities:m}]),f.state(\"saving\").set(!1),k.promise())},0===m()?g():(e=function(){0===m()&&(f.state.unbind(\"change\",e),g())},f.state.bind(\"change\",e)),k.promise()}}),b.ajaxPrefilter(function(a){/wp_customize=on/.test(a.data)&&(a.data+=\"&\"+b.param({customize_preview_nonce:f.settings.nonce.preview}))}),f.previewer.bind(\"nonce\",function(a){b.extend(this.nonce,a)}),f.bind(\"nonce-refresh\",function(a){b.extend(f.settings.nonce,a),b.extend(f.previewer.nonce,a),f.previewer.send(\"nonce-refresh\",a)}),b.each(f.settings.settings,function(a,b){var c,d=f.settingConstructor[b.type]||f.Setting;c=new d(a,b.value,{transport:b.transport,previewer:f.previewer,dirty:!!b.dirty}),f.add(a,c)}),b.each(f.settings.panels,function(a,b){var c,d=f.panelConstructor[b.type]||f.Panel;c=new d(a,{params:b}),f.panel.add(a,c)}),b.each(f.settings.sections,function(a,b){var c,d=f.sectionConstructor[b.type]||f.Section;c=new d(a,{params:b}),f.section.add(a,c)}),b.each(f.settings.controls,function(a,b){var c,d=f.controlConstructor[b.type]||f.Control;c=new d(a,{params:b,previewer:f.previewer}),f.control.add(a,c)}),_.each([\"panel\",\"section\",\"control\"],function(a){var b=f.settings.autofocus[a];b&&f[a](b,function(a){a.deferred.embedded.done(function(){f.previewer.deferred.active.done(function(){a.focus()})})})}),f.bind(\"ready\",f.reflowPaneContents),b([f.panel,f.section,f.control]).each(function(a,b){var c=_.debounce(f.reflowPaneContents,f.settings.timeouts.reflowPaneContents);b.bind(\"add\",c),b.bind(\"change\",c),b.bind(\"remove\",c)}),function(){var a,d=new f.Values,e=d.create(\"saved\"),i=d.create(\"saving\"),j=d.create(\"activated\"),k=d.create(\"processing\"),l=d.create(\"paneVisible\"),m=d.create(\"expandedPanel\"),n=d.create(\"expandedSection\"),o=d.create(\"changesetStatus\"),p=d.create(\"previewerAlive\"),q=d.create(\"editShortcutVisibility\");d.bind(\"change\",function(){var a;j()?\"\"===o.get()&&e()?(h.val(f.l10n.saved),g.find(\".screen-reader-text\").text(f.l10n.close)):(h.val(f.l10n.save),g.find(\".screen-reader-text\").text(f.l10n.cancel)):(h.val(f.l10n.activate),g.find(\".screen-reader-text\").text(f.l10n.cancel)),a=!i()&&(!j()||!e()||\"\"!==o()&&\"publish\"!==o()),h.prop(\"disabled\",!a)}),o(f.settings.changeset.status),e(!0),\"\"===o()&&f.each(function(a){a._dirty&&e(!1)}),i(!1),j(f.settings.theme.active),k(0),l(!0),m(!1),n(!1),p(!0),q(\"visible\"),f.bind(\"change\",function(){d(\"saved\").get()&&(d(\"saved\").set(!1),a(!0))}),i.bind(function(a){c.toggleClass(\"saving\",a)}),f.bind(\"saved\",function(a){d(\"saved\").set(!0),\"publish\"===a.changeset_status&&d(\"activated\").set(!0)}),j.bind(function(a){a&&f.trigger(\"activated\")}),a=function(a){var c,d;if(history.replaceState){if(c=document.createElement(\"a\"),c.href=location.href,d=f.utils.parseQueryString(c.search.substr(1)),a){if(d.changeset_uuid===f.settings.changeset.uuid)return;d.changeset_uuid=f.settings.changeset.uuid}else{if(!d.changeset_uuid)return;delete d.changeset_uuid}c.search=b.param(d),history.replaceState({},document.title,c.href)}},o.bind(function(b){a(\"\"!==b&&\"publish\"!==b)}),f.state=d}(),f.previewer.previewUrl()?f.previewer.refresh():f.previewer.previewUrl(f.settings.url.home),h.click(function(a){f.previewer.save(),a.preventDefault()}).keydown(function(a){9!==a.which&&(13===a.which&&f.previewer.save(),a.preventDefault())}),g.keydown(function(a){9!==a.which&&(13===a.which&&this.click(),a.preventDefault())}),b(\".collapse-sidebar\").on(\"click\",function(){f.state(\"paneVisible\").set(!f.state(\"paneVisible\").get())}),f.state(\"paneVisible\").bind(function(a){d.toggleClass(\"preview-only\",!a),d.toggleClass(\"expanded\",a),d.toggleClass(\"collapsed\",!a),a?b(\".collapse-sidebar\").attr({\"aria-expanded\":\"true\",\"aria-label\":f.l10n.collapseSidebar}):b(\".collapse-sidebar\").attr({\"aria-expanded\":\"false\",\"aria-label\":f.l10n.expandSidebar})}),b(\"body\").on(\"keydown\",function(a){var c,d=[],e=[],g=[];27===a.which&&(b(a.target).is(\"body\")||b.contains(b(\"#customize-controls\")[0],a.target))&&(f.control.each(function(a){a.expanded&&a.expanded()&&_.isFunction(a.collapse)&&d.push(a)}),f.section.each(function(a){a.expanded()&&e.push(a)}),f.panel.each(function(a){a.expanded()&&g.push(a)}),d.length>0&&0===e.length&&(d.length=0),c=d[0]||e[0]||g[0],c&&(c.collapse(),a.preventDefault()))}),b(\".customize-controls-preview-toggle\").on(\"click\",function(){f.state(\"paneVisible\").set(!f.state(\"paneVisible\").get())}),function(){var a,c,d,e,g,h,i,j=b(\".wp-full-overlay-sidebar-content\");a=function(a){var b,g=a,i=f.state(\"expandedSection\").get(),j=f.state(\"expandedPanel\").get();if(h&&h.element&&d(h.element),!g)if(!i&&j&&j.contentContainer)g=j;else{if(j||!i||!i.contentContainer)return void(h=!1);g=i}b=g.contentContainer.find(\".customize-section-title, .panel-meta\").first(),b.length?(h={instance:g,element:b,parent:b.closest(\".customize-pane-child\"),height:c(b)},i&&e(h.element,h.parent)):h=!1},f.state(\"expandedSection\").bind(a),f.state(\"expandedPanel\").bind(a),j.on(\"scroll\",_.throttle(function(){if(h){var a=j.scrollTop(),b=!i||a<=i;i=a,g(h,a,b)}},8)),d=function(a){a.hasClass(\"is-sticky\")&&a.removeClass(\"is-sticky\").addClass(\"maybe-sticky is-in-view\").css(\"top\",j.scrollTop()+\"px\")},e=function(a,b){a.removeClass(\"maybe-sticky is-in-view\").css({width:\"\",top:\"\"}),b.css(\"padding-top\",\"\")},c=function(a){var b=a.data(\"height\");return b||(b=a.outerHeight(),a.data(\"height\",b)),b},g=function(a,b,c){var d=a.element,e=a.parent,f=a.height,g=parseInt(d.css(\"top\"),10),h=d.hasClass(\"maybe-sticky\"),i=d.hasClass(\"is-sticky\"),j=d.hasClass(\"is-in-view\");if(!c)return i&&(g=b,d.removeClass(\"is-sticky\").css({top:g+\"px\",width:\"\"})),void(j&&b>g+f&&(d.removeClass(\"is-in-view\"),e.css(\"padding-top\",\"\")));if(!h&&b>=f)h=!0,d.addClass(\"maybe-sticky\");else if(0===b)return d.removeClass(\"maybe-sticky is-in-view is-sticky\").css({top:\"\",width:\"\"}),void e.css(\"padding-top\",\"\");j&&!i?g>=b&&d.addClass(\"is-sticky\").css({top:\"\",width:e.outerWidth()+\"px\"}):h&&!j&&(d.addClass(\"is-in-view\").css(\"top\",b-f+\"px\"),e.css(\"padding-top\",f+\"px\"))}}(),f.previewedDevice=new f.Value,f.bind(\"ready\",function(){_.find(f.settings.previewableDevices,function(a,b){if(!0===a[\"default\"])return f.previewedDevice.set(b),!0})}),i.find(\".devices button\").on(\"click\",function(a){f.previewedDevice.set(b(a.currentTarget).data(\"device\"))}),f.previewedDevice.bind(function(a){var c=b(\".wp-full-overlay\"),d=\"\";i.find(\".devices button\").removeClass(\"active\").attr(\"aria-pressed\",!1),i.find(\".devices .preview-\"+a).addClass(\"active\").attr(\"aria-pressed\",!0),b.each(f.settings.previewableDevices,function(a){d+=\" preview-\"+a}),c.removeClass(d).addClass(\"preview-\"+a)}),e.length&&f(\"blogname\",function(a){var c=function(){e.text(b.trim(a())||f.l10n.untitledBlogName)};a.bind(c),c()}),a=new f.Messenger({url:f.settings.url.parent,channel:\"loader\"}),a.bind(\"back\",function(){g.on(\"click.customize-controls-close\",function(b){b.preventDefault(),a.send(\"close\")})}),b(window).on(\"beforeunload.customize-confirm\",function(){if(!f.state(\"saved\")())return setTimeout(function(){d.removeClass(\"customize-loading\")},1),f.l10n.saveAlert}),b.each([\"saved\",\"change\"],function(b,c){f.bind(c,function(){a.send(c)})}),f.bind(\"title\",function(b){a.send(\"title\",b)}),a.send(\"changeset-uuid\",f.settings.changeset.uuid),a.send(\"ready\"),b.each({background_image:{controls:[\"background_preset\",\"background_position\",\"background_size\",\"background_repeat\",\"background_attachment\"],callback:function(a){return!!a}},show_on_front:{controls:[\"page_on_front\",\"page_for_posts\"],callback:function(a){return\"page\"===a}},header_textcolor:{controls:[\"header_textcolor\"],callback:function(a){return\"blank\"!==a}}},function(a,c){f(a,function(a){b.each(c.controls,function(b,d){f.control(d,function(b){var d=function(a){b.container.toggle(c.callback(a))};d(a.get()),a.bind(d)})})})}),f.control(\"background_preset\",function(a){var b,c,d,e,g,h;b={\"default\":[!1,!1,!1,!1],fill:[!0,!1,!1,!1],fit:[!0,!1,!0,!1],repeat:[!0,!1,!1,!0],custom:[!0,!0,!0,!0]},c=[_wpCustomizeBackground.defaults[\"default-position-x\"],_wpCustomizeBackground.defaults[\"default-position-y\"],_wpCustomizeBackground.defaults[\"default-size\"],_wpCustomizeBackground.defaults[\"default-repeat\"],_wpCustomizeBackground.defaults[\"default-attachment\"]],d={\"default\":c,fill:[\"left\",\"top\",\"cover\",\"no-repeat\",\"fixed\"],fit:[\"left\",\"top\",\"contain\",\"no-repeat\",\"fixed\"],repeat:[\"left\",\"top\",\"auto\",\"repeat\",\"scroll\"]},e=function(a){_.each([\"background_position\",\"background_size\",\"background_repeat\",\"background_attachment\"],function(c,d){var e=f.control(c);e&&e.container.toggle(b[a][d])})},g=function(a){_.each([\"background_position_x\",\"background_position_y\",\"background_size\",\"background_repeat\",\"background_attachment\"],function(b,c){var e=f(b);e&&e.set(d[a][c])})},h=a.setting.get(),e(h),a.setting.bind(\"change\",function(a){e(a),\"custom\"!==a&&g(a)})}),f.control(\"background_repeat\",function(a){a.elements[0].unsync(f(\"background_repeat\")),a.element=new f.Element(a.container.find(\"input\")),a.element.set(\"no-repeat\"!==a.setting()),a.element.bind(function(b){a.setting.set(b?\"repeat\":\"no-repeat\")}),a.setting.bind(function(b){a.element.set(\"no-repeat\"!==b)})}),f.control(\"background_attachment\",function(a){a.elements[0].unsync(f(\"background_attachment\")),a.element=new f.Element(a.container.find(\"input\")),a.element.set(\"fixed\"!==a.setting()),a.element.bind(function(b){a.setting.set(b?\"scroll\":\"fixed\")}),a.setting.bind(function(b){a.element.set(\"fixed\"!==b)})}),f.control(\"display_header_text\",function(a){var b=\"\";a.elements[0].unsync(f(\"header_textcolor\")),a.element=new f.Element(a.container.find(\"input\")),a.element.set(\"blank\"!==a.setting()),a.element.bind(function(c){c||(b=f(\"header_textcolor\").get()),a.setting.set(c?b:\"blank\")}),a.setting.bind(function(b){a.element.set(\"blank\"!==b)})}),f(\"show_on_front\",\"page_on_front\",function(a,b){var c=function(){\"page\"===a()&&parseInt(b(),10)>0&&f.previewer.previewUrl.set(f.settings.url.home)};a.bind(c),b.bind(c)}),f(\"page_for_posts\",function(a){a.bind(function(a){a=parseInt(a,10),a>0&&f.previewer.previewUrl.set(f.settings.url.home+\"?page_id=\"+a)})}),f.control(\"custom_css\",function(a){a.deferred.embedded.done(function(){var b=a.container.find(\"textarea\"),c=b[0];b.on(\"blur\",function(){b.data(\"next-tab-blurs\",!1)}),b.on(\"keydown\",function(a){var d,e,f,g=9,h=27;return h===a.keyCode?void(b.data(\"next-tab-blurs\")||(b.data(\"next-tab-blurs\",!0),a.stopPropagation())):void(g!==a.keyCode||a.ctrlKey||a.altKey||a.shiftKey||b.data(\"next-tab-blurs\")||(d=c.selectionStart,e=c.selectionEnd,f=c.value,d>=0&&(c.value=f.substring(0,d).concat(\"\\t\",f.substring(e)),b.selectionStart=c.selectionEnd=d+1),a.stopPropagation(),a.preventDefault()))})})}),f.control(\"header_video\",function(a){a.deferred.embedded.done(function(){var b=function(){var b,c=f.section(a.section());c&&(b=c.container.find(\".header-video-not-currently-previewable:first\"),a.active.get()?b.stop().slideUp(\"fast\"):b.stop().slideDown(\"fast\"))};b(),a.active.bind(b)})}),f.previewer.bind(\"selective-refresh-setting-validities\",function(a){f._handleSettingValidities({settingValidities:a,focusInvalidControl:!1})}),f.previewer.bind(\"focus-control-for-setting\",function(a){var b=[];f.control.each(function(c){var d=_.pluck(c.settings,\"id\");-1!==_.indexOf(d,a)&&b.push(c)}),b.length&&(b.sort(function(a,b){return a.priority()-b.priority()}),b[0].focus())}),f.previewer.bind(\"refresh\",function(){f.previewer.refresh()}),f.state(\"paneVisible\").bind(function(a){var c;c=window.matchMedia?window.matchMedia(\"screen and ( max-width: 640px )\").matches:b(window).width()<=640,f.state(\"editShortcutVisibility\").set(a||c?\"visible\":\"hidden\")}),window.matchMedia&&window.matchMedia(\"screen and ( max-width: 640px )\").addListener(function(){var a=f.state(\"paneVisible\");a.callbacks.fireWith(a,[a.get(),a.get()]);\n}),f.previewer.bind(\"edit-shortcut-visibility\",function(a){f.state(\"editShortcutVisibility\").set(a)}),f.state(\"editShortcutVisibility\").bind(function(a){f.previewer.send(\"edit-shortcut-visibility\",a)}),function(){var a,c,d,e=!1;c=function(){e||(e=!0,f.requestChangesetUpdate().always(function(){e=!1})),d()},d=function(){clearTimeout(a),a=setTimeout(function(){c()},f.settings.timeouts.changesetAutoSave)},d(),b(window).on(\"blur.wp-customize-changeset-update\",function(){c()}),b(window).on(\"beforeunload.wp-customize-changeset-update\",function(){c()})}(),f.trigger(\"ready\")}})}(wp,jQuery);", "<?php\n/**\n * WordPress Customize Manager classes\n *\n * @package WordPress\n * @subpackage Customize\n * @since 3.4.0\n */\n\n/**\n * Customize Manager class.\n *\n * Bootstraps the Customize experience on the server-side.\n *\n * Sets up the theme-switching process if a theme other than the active one is\n * being previewed and customized.\n *\n * Serves as a factory for Customize Controls and Settings, and\n * instantiates default Customize Controls and Settings.\n *\n * @since 3.4.0\n */\nfinal class WP_Customize_Manager {\n\t/**\n\t * An instance of the theme being previewed.\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var WP_Theme\n\t */\n\tprotected $theme;\n\n\t/**\n\t * The directory name of the previously active theme (within the theme_root).\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var string\n\t */\n\tprotected $original_stylesheet;\n\n\t/**\n\t * Whether this is a Customizer pageload.\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var bool\n\t */\n\tprotected $previewing = false;\n\n\t/**\n\t * Methods and properties dealing with managing widgets in the Customizer.\n\t *\n\t * @since 3.9.0\n\t * @access public\n\t * @var WP_Customize_Widgets\n\t */\n\tpublic $widgets;\n\n\t/**\n\t * Methods and properties dealing with managing nav menus in the Customizer.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t * @var WP_Customize_Nav_Menus\n\t */\n\tpublic $nav_menus;\n\n\t/**\n\t * Methods and properties dealing with selective refresh in the Customizer preview.\n\t *\n\t * @since 4.5.0\n\t * @access public\n\t * @var WP_Customize_Selective_Refresh\n\t */\n\tpublic $selective_refresh;\n\n\t/**\n\t * Registered instances of WP_Customize_Setting.\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $settings = array();\n\n\t/**\n\t * Sorted top-level instances of WP_Customize_Panel and WP_Customize_Section.\n\t *\n\t * @since 4.0.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $containers = array();\n\n\t/**\n\t * Registered instances of WP_Customize_Panel.\n\t *\n\t * @since 4.0.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $panels = array();\n\n\t/**\n\t * List of core components.\n\t *\n\t * @since 4.5.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $components = array( 'widgets', 'nav_menus' );\n\n\t/**\n\t * Registered instances of WP_Customize_Section.\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $sections = array();\n\n\t/**\n\t * Registered instances of WP_Customize_Control.\n\t *\n\t * @since 3.4.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $controls = array();\n\n\t/**\n\t * Panel types that may be rendered from JS templates.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $registered_panel_types = array();\n\n\t/**\n\t * Section types that may be rendered from JS templates.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $registered_section_types = array();\n\n\t/**\n\t * Control types that may be rendered from JS templates.\n\t *\n\t * @since 4.1.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $registered_control_types = array();\n\n\t/**\n\t * Initial URL being previewed.\n\t *\n\t * @since 4.4.0\n\t * @access protected\n\t * @var string\n\t */\n\tprotected $preview_url;\n\n\t/**\n\t * URL to link the user to when closing the Customizer.\n\t *\n\t * @since 4.4.0\n\t * @access protected\n\t * @var string\n\t */\n\tprotected $return_url;\n\n\t/**\n\t * Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.\n\t *\n\t * @since 4.4.0\n\t * @access protected\n\t * @var array\n\t */\n\tprotected $autofocus = array();\n\n\t/**\n\t * Messenger channel.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t * @var string\n\t */\n\tprotected $messenger_channel;\n\n\t/**\n\t * Unsanitized values for Customize Settings parsed from $_POST['customized'].\n\t *\n\t * @var array\n\t */\n\tprivate $_post_values;\n\n\t/**\n\t * Changeset UUID.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @var string\n\t */\n\tprivate $_changeset_uuid;\n\n\t/**\n\t * Changeset post ID.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @var int|false\n\t */\n\tprivate $_changeset_post_id;\n\n\t/**\n\t * Changeset data loaded from a customize_changeset post.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @var array\n\t */\n\tprivate $_changeset_data;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 3.4.0\n\t * @since 4.7.0 Added $args param.\n\t *\n\t * @param array $args {\n\t *     Args.\n\t *\n\t *     @type string $changeset_uuid    Changeset UUID, the post_name for the customize_changeset post containing the customized state. Defaults to new UUID.\n\t *     @type string $theme             Theme to be previewed (for theme switch). Defaults to customize_theme or theme query params.\n\t *     @type string $messenger_channel Messenger channel. Defaults to customize_messenger_channel query param.\n\t * }\n\t */\n\tpublic function __construct( $args = array() ) {\n\n\t\t$args = array_merge(\n\t\t\tarray_fill_keys( array( 'changeset_uuid', 'theme', 'messenger_channel' ), null ),\n\t\t\t$args\n\t\t);\n\n\t\t// Note that the UUID format will be validated in the setup_theme() method.\n\t\tif ( ! isset( $args['changeset_uuid'] ) ) {\n\t\t\t$args['changeset_uuid'] = wp_generate_uuid4();\n\t\t}\n\n\t\t// The theme and messenger_channel should be supplied via $args, but they are also looked at in the $_REQUEST global here for back-compat.\n\t\tif ( ! isset( $args['theme'] ) ) {\n\t\t\tif ( isset( $_REQUEST['customize_theme'] ) ) {\n\t\t\t\t$args['theme'] = wp_unslash( $_REQUEST['customize_theme'] );\n\t\t\t} elseif ( isset( $_REQUEST['theme'] ) ) { // Deprecated.\n\t\t\t\t$args['theme'] = wp_unslash( $_REQUEST['theme'] );\n\t\t\t}\n\t\t}\n\t\tif ( ! isset( $args['messenger_channel'] ) && isset( $_REQUEST['customize_messenger_channel'] ) ) {\n\t\t\t$args['messenger_channel'] = sanitize_key( wp_unslash( $_REQUEST['customize_messenger_channel'] ) );\n\t\t}\n\n\t\t$this->original_stylesheet = get_stylesheet();\n\t\t$this->theme = wp_get_theme( $args['theme'] );\n\t\t$this->messenger_channel = $args['messenger_channel'];\n\t\t$this->_changeset_uuid = $args['changeset_uuid'];\n\n\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-panel.php' );\n\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-section.php' );\n\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-control.php' );\n\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-color-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-media-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-upload-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-image-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-background-image-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-background-position-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-cropped-image-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-site-icon-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-header-image-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-theme-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-widget-area-customize-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-widget-form-customize-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-item-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-location-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-name-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-auto-add-control.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-new-menu-control.php' );\n\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menus-panel.php' );\n\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-themes-section.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-sidebar-section.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-section.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-new-menu-section.php' );\n\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-custom-css-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-filter-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-header-image-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-background-image-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-item-setting.php' );\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-nav-menu-setting.php' );\n\n\t\t/**\n\t\t * Filters the core Customizer components to load.\n\t\t *\n\t\t * This allows Core components to be excluded from being instantiated by\n\t\t * filtering them out of the array. Note that this filter generally runs\n\t\t * during the {@see 'plugins_loaded'} action, so it cannot be added\n\t\t * in a theme.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @see WP_Customize_Manager::__construct()\n\t\t *\n\t\t * @param array                $components List of core components to load.\n\t\t * @param WP_Customize_Manager $this       WP_Customize_Manager instance.\n\t\t */\n\t\t$components = apply_filters( 'customize_loaded_components', $this->components, $this );\n\n\t\trequire_once( ABSPATH . WPINC . '/customize/class-wp-customize-selective-refresh.php' );\n\t\t$this->selective_refresh = new WP_Customize_Selective_Refresh( $this );\n\n\t\tif ( in_array( 'widgets', $components, true ) ) {\n\t\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-widgets.php' );\n\t\t\t$this->widgets = new WP_Customize_Widgets( $this );\n\t\t}\n\n\t\tif ( in_array( 'nav_menus', $components, true ) ) {\n\t\t\trequire_once( ABSPATH . WPINC . '/class-wp-customize-nav-menus.php' );\n\t\t\t$this->nav_menus = new WP_Customize_Nav_Menus( $this );\n\t\t}\n\n\t\tadd_action( 'setup_theme', array( $this, 'setup_theme' ) );\n\t\tadd_action( 'wp_loaded',   array( $this, 'wp_loaded' ) );\n\n\t\t// Do not spawn cron (especially the alternate cron) while running the Customizer.\n\t\tremove_action( 'init', 'wp_cron' );\n\n\t\t// Do not run update checks when rendering the controls.\n\t\tremove_action( 'admin_init', '_maybe_update_core' );\n\t\tremove_action( 'admin_init', '_maybe_update_plugins' );\n\t\tremove_action( 'admin_init', '_maybe_update_themes' );\n\n\t\tadd_action( 'wp_ajax_customize_save',           array( $this, 'save' ) );\n\t\tadd_action( 'wp_ajax_customize_refresh_nonces', array( $this, 'refresh_nonces' ) );\n\n\t\tadd_action( 'customize_register',                 array( $this, 'register_controls' ) );\n\t\tadd_action( 'customize_register',                 array( $this, 'register_dynamic_settings' ), 11 ); // allow code to create settings first\n\t\tadd_action( 'customize_controls_init',            array( $this, 'prepare_controls' ) );\n\t\tadd_action( 'customize_controls_enqueue_scripts', array( $this, 'enqueue_control_scripts' ) );\n\n\t\t// Render Panel, Section, and Control templates.\n\t\tadd_action( 'customize_controls_print_footer_scripts', array( $this, 'render_panel_templates' ), 1 );\n\t\tadd_action( 'customize_controls_print_footer_scripts', array( $this, 'render_section_templates' ), 1 );\n\t\tadd_action( 'customize_controls_print_footer_scripts', array( $this, 'render_control_templates' ), 1 );\n\n\t\t// Export header video settings with the partial response.\n\t\tadd_filter( 'customize_render_partials_response', array( $this, 'export_header_video_settings' ), 10, 3 );\n\n\t\t// Export the settings to JS via the _wpCustomizeSettings variable.\n\t\tadd_action( 'customize_controls_print_footer_scripts', array( $this, 'customize_pane_settings' ), 1000 );\n\t}\n\n\t/**\n\t * Return true if it's an Ajax request.\n\t *\n\t * @since 3.4.0\n\t * @since 4.2.0 Added `$action` param.\n\t * @access public\n\t *\n\t * @param string|null $action Whether the supplied Ajax action is being run.\n\t * @return bool True if it's an Ajax request, false otherwise.\n\t */\n\tpublic function doing_ajax( $action = null ) {\n\t\tif ( ! wp_doing_ajax() ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( ! $action ) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\t/*\n\t\t\t * Note: we can't just use doing_action( \"wp_ajax_{$action}\" ) because we need\n\t\t\t * to check before admin-ajax.php gets to that point.\n\t\t\t */\n\t\t\treturn isset( $_REQUEST['action'] ) && wp_unslash( $_REQUEST['action'] ) === $action;\n\t\t}\n\t}\n\n\t/**\n\t * Custom wp_die wrapper. Returns either the standard message for UI\n\t * or the Ajax message.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param mixed $ajax_message Ajax return\n\t * @param mixed $message UI message\n\t */\n\tprotected function wp_die( $ajax_message, $message = null ) {\n\t\tif ( $this->doing_ajax() ) {\n\t\t\twp_die( $ajax_message );\n\t\t}\n\n\t\tif ( ! $message ) {\n\t\t\t$message = __( 'Cheatin&#8217; uh?' );\n\t\t}\n\n\t\tif ( $this->messenger_channel ) {\n\t\t\tob_start();\n\t\t\twp_enqueue_scripts();\n\t\t\twp_print_scripts( array( 'customize-base' ) );\n\n\t\t\t$settings = array(\n\t\t\t\t'messengerArgs' => array(\n\t\t\t\t\t'channel' => $this->messenger_channel,\n\t\t\t\t\t'url' => wp_customize_url(),\n\t\t\t\t),\n\t\t\t\t'error' => $ajax_message,\n\t\t\t);\n\t\t\t?>\n\t\t\t<script>\n\t\t\t( function( api, settings ) {\n\t\t\t\tvar preview = new api.Messenger( settings.messengerArgs );\n\t\t\t\tpreview.send( 'iframe-loading-error', settings.error );\n\t\t\t} )( wp.customize, <?php echo wp_json_encode( $settings ) ?> );\n\t\t\t</script>\n\t\t\t<?php\n\t\t\t$message .= ob_get_clean();\n\t\t}\n\n\t\twp_die( $message );\n\t}\n\n\t/**\n\t * Return the Ajax wp_die() handler if it's a customized request.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0\n\t *\n\t * @return callable Die handler.\n\t */\n\tpublic function wp_die_handler() {\n\t\t_deprecated_function( __METHOD__, '4.7.0' );\n\n\t\tif ( $this->doing_ajax() || isset( $_POST['customized'] ) ) {\n\t\t\treturn '_ajax_wp_die_handler';\n\t\t}\n\n\t\treturn '_default_wp_die_handler';\n\t}\n\n\t/**\n\t * Start preview and customize theme.\n\t *\n\t * Check if customize query variable exist. Init filters to filter the current theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @global string $pagenow\n\t */\n\tpublic function setup_theme() {\n\t\tglobal $pagenow;\n\n\t\t// Check permissions for customize.php access since this method is called before customize.php can run any code,\n\t\tif ( 'customize.php' === $pagenow && ! current_user_can( 'customize' ) ) {\n\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\tauth_redirect();\n\t\t\t} else {\n\t\t\t\twp_die(\n\t\t\t\t\t'<h1>' . __( 'Cheatin&#8217; uh?' ) . '</h1>' .\n\t\t\t\t\t'<p>' . __( 'Sorry, you are not allowed to customize this site.' ) . '</p>',\n\t\t\t\t\t403\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! preg_match( '/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/', $this->_changeset_uuid ) ) {\n\t\t\t$this->wp_die( -1, __( 'Invalid changeset UUID' ) );\n\t\t}\n\n\t\t/*\n\t\t * Clear incoming post data if the user lacks a CSRF token (nonce). Note that the customizer\n\t\t * application will inject the customize_preview_nonce query parameter into all Ajax requests.\n\t\t * For similar behavior elsewhere in WordPress, see rest_cookie_check_errors() which logs out\n\t\t * a user when a valid nonce isn't present.\n\t\t */\n\t\t$has_post_data_nonce = (\n\t\t\tcheck_ajax_referer( 'preview-customize_' . $this->get_stylesheet(), 'nonce', false )\n\t\t\t||\n\t\t\tcheck_ajax_referer( 'save-customize_' . $this->get_stylesheet(), 'nonce', false )\n\t\t\t||\n\t\t\tcheck_ajax_referer( 'preview-customize_' . $this->get_stylesheet(), 'customize_preview_nonce', false )\n\t\t);\n\t\tif ( ! current_user_can( 'customize' ) || ! $has_post_data_nonce ) {\n\t\t\tunset( $_POST['customized'] );\n\t\t\tunset( $_REQUEST['customized'] );\n\t\t}\n\n\t\t/*\n\t\t * If unauthenticated then require a valid changeset UUID to load the preview.\n\t\t * In this way, the UUID serves as a secret key. If the messenger channel is present,\n\t\t * then send unauthenticated code to prompt re-auth.\n\t\t */\n\t\tif ( ! current_user_can( 'customize' ) && ! $this->changeset_post_id() ) {\n\t\t\t$this->wp_die( $this->messenger_channel ? 0 : -1, __( 'Non-existent changeset UUID.' ) );\n\t\t}\n\n\t\tif ( ! headers_sent() ) {\n\t\t\tsend_origin_headers();\n\t\t}\n\n\t\t// Hide the admin bar if we're embedded in the customizer iframe.\n\t\tif ( $this->messenger_channel ) {\n\t\t\tshow_admin_bar( false );\n\t\t}\n\n\t\tif ( $this->is_theme_active() ) {\n\t\t\t// Once the theme is loaded, we'll validate it.\n\t\t\tadd_action( 'after_setup_theme', array( $this, 'after_setup_theme' ) );\n\t\t} else {\n\t\t\t// If the requested theme is not the active theme and the user doesn't have the\n\t\t\t// switch_themes cap, bail.\n\t\t\tif ( ! current_user_can( 'switch_themes' ) ) {\n\t\t\t\t$this->wp_die( -1, __( 'Sorry, you are not allowed to edit theme options on this site.' ) );\n\t\t\t}\n\n\t\t\t// If the theme has errors while loading, bail.\n\t\t\tif ( $this->theme()->errors() ) {\n\t\t\t\t$this->wp_die( -1, $this->theme()->errors()->get_error_message() );\n\t\t\t}\n\n\t\t\t// If the theme isn't allowed per multisite settings, bail.\n\t\t\tif ( ! $this->theme()->is_allowed() ) {\n\t\t\t\t$this->wp_die( -1, __( 'The requested theme does not exist.' ) );\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Import theme starter content for fresh installs when landing in the customizer.\n\t\t * Import starter content at after_setup_theme:100 so that any\n\t\t * add_theme_support( 'starter-content' ) calls will have been made.\n\t\t */\n\t\tif ( get_option( 'fresh_site' ) && 'customize.php' === $pagenow ) {\n\t\t\tadd_action( 'after_setup_theme', array( $this, 'import_theme_starter_content' ), 100 );\n\t\t}\n\n\t\t$this->start_previewing_theme();\n\t}\n\n\t/**\n\t * Callback to validate a theme once it is loaded\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function after_setup_theme() {\n\t\t$doing_ajax_or_is_customized = ( $this->doing_ajax() || isset( $_POST['customized'] ) );\n\t\tif ( ! $doing_ajax_or_is_customized && ! validate_current_theme() ) {\n\t\t\twp_redirect( 'themes.php?broken=true' );\n\t\t\texit;\n\t\t}\n\t}\n\n\t/**\n\t * If the theme to be previewed isn't the active theme, add filter callbacks\n\t * to swap it out at runtime.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function start_previewing_theme() {\n\t\t// Bail if we're already previewing.\n\t\tif ( $this->is_preview() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->previewing = true;\n\n\t\tif ( ! $this->is_theme_active() ) {\n\t\t\tadd_filter( 'template', array( $this, 'get_template' ) );\n\t\t\tadd_filter( 'stylesheet', array( $this, 'get_stylesheet' ) );\n\t\t\tadd_filter( 'pre_option_current_theme', array( $this, 'current_theme' ) );\n\n\t\t\t// @link: https://core.trac.wordpress.org/ticket/20027\n\t\t\tadd_filter( 'pre_option_stylesheet', array( $this, 'get_stylesheet' ) );\n\t\t\tadd_filter( 'pre_option_template', array( $this, 'get_template' ) );\n\n\t\t\t// Handle custom theme roots.\n\t\t\tadd_filter( 'pre_option_stylesheet_root', array( $this, 'get_stylesheet_root' ) );\n\t\t\tadd_filter( 'pre_option_template_root', array( $this, 'get_template_root' ) );\n\t\t}\n\n\t\t/**\n\t\t * Fires once the Customizer theme preview has started.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param WP_Customize_Manager $this WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'start_previewing_theme', $this );\n\t}\n\n\t/**\n\t * Stop previewing the selected theme.\n\t *\n\t * Removes filters to change the current theme.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function stop_previewing_theme() {\n\t\tif ( ! $this->is_preview() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->previewing = false;\n\n\t\tif ( ! $this->is_theme_active() ) {\n\t\t\tremove_filter( 'template', array( $this, 'get_template' ) );\n\t\t\tremove_filter( 'stylesheet', array( $this, 'get_stylesheet' ) );\n\t\t\tremove_filter( 'pre_option_current_theme', array( $this, 'current_theme' ) );\n\n\t\t\t// @link: https://core.trac.wordpress.org/ticket/20027\n\t\t\tremove_filter( 'pre_option_stylesheet', array( $this, 'get_stylesheet' ) );\n\t\t\tremove_filter( 'pre_option_template', array( $this, 'get_template' ) );\n\n\t\t\t// Handle custom theme roots.\n\t\t\tremove_filter( 'pre_option_stylesheet_root', array( $this, 'get_stylesheet_root' ) );\n\t\t\tremove_filter( 'pre_option_template_root', array( $this, 'get_template_root' ) );\n\t\t}\n\n\t\t/**\n\t\t * Fires once the Customizer theme preview has stopped.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param WP_Customize_Manager $this WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'stop_previewing_theme', $this );\n\t}\n\n\t/**\n\t * Get the changeset UUID.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return string UUID.\n\t */\n\tpublic function changeset_uuid() {\n\t\treturn $this->_changeset_uuid;\n\t}\n\n\t/**\n\t * Get the theme being customized.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return WP_Theme\n\t */\n\tpublic function theme() {\n\t\tif ( ! $this->theme ) {\n\t\t\t$this->theme = wp_get_theme();\n\t\t}\n\t\treturn $this->theme;\n\t}\n\n\t/**\n\t * Get the registered settings.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return array\n\t */\n\tpublic function settings() {\n\t\treturn $this->settings;\n\t}\n\n\t/**\n\t * Get the registered controls.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return array\n\t */\n\tpublic function controls() {\n\t\treturn $this->controls;\n\t}\n\n\t/**\n\t * Get the registered containers.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @return array\n\t */\n\tpublic function containers() {\n\t\treturn $this->containers;\n\t}\n\n\t/**\n\t * Get the registered sections.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return array\n\t */\n\tpublic function sections() {\n\t\treturn $this->sections;\n\t}\n\n\t/**\n\t * Get the registered panels.\n\t *\n\t * @since 4.0.0\n\t * @access public\n\t *\n\t * @return array Panels.\n\t */\n\tpublic function panels() {\n\t\treturn $this->panels;\n\t}\n\n\t/**\n\t * Checks if the current theme is active.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return bool\n\t */\n\tpublic function is_theme_active() {\n\t\treturn $this->get_stylesheet() == $this->original_stylesheet;\n\t}\n\n\t/**\n\t * Register styles/scripts and initialize the preview of each setting\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function wp_loaded() {\n\n\t\t/**\n\t\t * Fires once WordPress has loaded, allowing scripts and styles to be initialized.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param WP_Customize_Manager $this WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_register', $this );\n\n\t\t/*\n\t\t * Note that settings must be previewed here even outside the customizer preview\n\t\t * and also in the customizer pane itself. This is to enable loading an existing\n\t\t * changeset into the customizer. Previewing the settings only has to be prevented\n\t\t * in the case of a customize_save action because then update_option()\n\t\t * may short-circuit because it will detect that there are no changes to\n\t\t * make.\n\t\t */\n\t\tif ( ! $this->doing_ajax( 'customize_save' ) ) {\n\t\t\tforeach ( $this->settings as $setting ) {\n\t\t\t\t$setting->preview();\n\t\t\t}\n\t\t}\n\n\t\tif ( $this->is_preview() && ! is_admin() ) {\n\t\t\t$this->customize_preview_init();\n\t\t}\n\t}\n\n\t/**\n\t * Prevents Ajax requests from following redirects when previewing a theme\n\t * by issuing a 200 response instead of a 30x.\n\t *\n\t * Instead, the JS will sniff out the location header.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0\n\t *\n\t * @param int $status Status.\n\t * @return int\n\t */\n\tpublic function wp_redirect_status( $status ) {\n\t\t_deprecated_function( __FUNCTION__, '4.7.0' );\n\n\t\tif ( $this->is_preview() && ! is_admin() ) {\n\t\t\treturn 200;\n\t\t}\n\n\t\treturn $status;\n\t}\n\n\t/**\n\t * Find the changeset post ID for a given changeset UUID.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param string $uuid Changeset UUID.\n\t * @return int|null Returns post ID on success and null on failure.\n\t */\n\tpublic function find_changeset_post_id( $uuid ) {\n\t\t$cache_group = 'customize_changeset_post';\n\t\t$changeset_post_id = wp_cache_get( $uuid, $cache_group );\n\t\tif ( $changeset_post_id && 'customize_changeset' === get_post_type( $changeset_post_id ) ) {\n\t\t\treturn $changeset_post_id;\n\t\t}\n\n\t\t$changeset_post_query = new WP_Query( array(\n\t\t\t'post_type' => 'customize_changeset',\n\t\t\t'post_status' => get_post_stati(),\n\t\t\t'name' => $uuid,\n\t\t\t'posts_per_page' => 1,\n\t\t\t'no_found_rows' => true,\n\t\t\t'cache_results' => true,\n\t\t\t'update_post_meta_cache' => false,\n\t\t\t'update_post_term_cache' => false,\n\t\t\t'lazy_load_term_meta' => false,\n\t\t) );\n\t\tif ( ! empty( $changeset_post_query->posts ) ) {\n\t\t\t// Note: 'fields'=>'ids' is not being used in order to cache the post object as it will be needed.\n\t\t\t$changeset_post_id = $changeset_post_query->posts[0]->ID;\n\t\t\twp_cache_set( $this->_changeset_uuid, $changeset_post_id, $cache_group );\n\t\t\treturn $changeset_post_id;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Get the changeset post id for the loaded changeset.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return int|null Post ID on success or null if there is no post yet saved.\n\t */\n\tpublic function changeset_post_id() {\n\t\tif ( ! isset( $this->_changeset_post_id ) ) {\n\t\t\t$post_id = $this->find_changeset_post_id( $this->_changeset_uuid );\n\t\t\tif ( ! $post_id ) {\n\t\t\t\t$post_id = false;\n\t\t\t}\n\t\t\t$this->_changeset_post_id = $post_id;\n\t\t}\n\t\tif ( false === $this->_changeset_post_id ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn $this->_changeset_post_id;\n\t}\n\n\t/**\n\t * Get the data stored in a changeset post.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t *\n\t * @param int $post_id Changeset post ID.\n\t * @return array|WP_Error Changeset data or WP_Error on error.\n\t */\n\tprotected function get_changeset_post_data( $post_id ) {\n\t\tif ( ! $post_id ) {\n\t\t\treturn new WP_Error( 'empty_post_id' );\n\t\t}\n\t\t$changeset_post = get_post( $post_id );\n\t\tif ( ! $changeset_post ) {\n\t\t\treturn new WP_Error( 'missing_post' );\n\t\t}\n\t\tif ( 'customize_changeset' !== $changeset_post->post_type ) {\n\t\t\treturn new WP_Error( 'wrong_post_type' );\n\t\t}\n\t\t$changeset_data = json_decode( $changeset_post->post_content, true );\n\t\tif ( function_exists( 'json_last_error' ) && json_last_error() ) {\n\t\t\treturn new WP_Error( 'json_parse_error', '', json_last_error() );\n\t\t}\n\t\tif ( ! is_array( $changeset_data ) ) {\n\t\t\treturn new WP_Error( 'expected_array' );\n\t\t}\n\t\treturn $changeset_data;\n\t}\n\n\t/**\n\t * Get changeset data.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return array Changeset data.\n\t */\n\tpublic function changeset_data() {\n\t\tif ( isset( $this->_changeset_data ) ) {\n\t\t\treturn $this->_changeset_data;\n\t\t}\n\t\t$changeset_post_id = $this->changeset_post_id();\n\t\tif ( ! $changeset_post_id ) {\n\t\t\t$this->_changeset_data = array();\n\t\t} else {\n\t\t\t$data = $this->get_changeset_post_data( $changeset_post_id );\n\t\t\tif ( ! is_wp_error( $data ) ) {\n\t\t\t\t$this->_changeset_data = $data;\n\t\t\t} else {\n\t\t\t\t$this->_changeset_data = array();\n\t\t\t}\n\t\t}\n\t\treturn $this->_changeset_data;\n\t}\n\n\t/**\n\t * Starter content setting IDs.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @var array\n\t */\n\tprotected $pending_starter_content_settings_ids = array();\n\n\t/**\n\t * Import theme starter content into the customized state.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param array $starter_content Starter content. Defaults to `get_theme_starter_content()`.\n\t */\n\tfunction import_theme_starter_content( $starter_content = array() ) {\n\t\tif ( empty( $starter_content ) ) {\n\t\t\t$starter_content = get_theme_starter_content();\n\t\t}\n\n\t\t$changeset_data = array();\n\t\tif ( $this->changeset_post_id() ) {\n\t\t\t$changeset_data = $this->get_changeset_post_data( $this->changeset_post_id() );\n\t\t}\n\n\t\t$sidebars_widgets = isset( $starter_content['widgets'] ) && ! empty( $this->widgets ) ? $starter_content['widgets'] : array();\n\t\t$attachments = isset( $starter_content['attachments'] ) && ! empty( $this->nav_menus ) ? $starter_content['attachments'] : array();\n\t\t$posts = isset( $starter_content['posts'] ) && ! empty( $this->nav_menus ) ? $starter_content['posts'] : array();\n\t\t$options = isset( $starter_content['options'] ) ? $starter_content['options'] : array();\n\t\t$nav_menus = isset( $starter_content['nav_menus'] ) && ! empty( $this->nav_menus ) ? $starter_content['nav_menus'] : array();\n\t\t$theme_mods = isset( $starter_content['theme_mods'] ) ? $starter_content['theme_mods'] : array();\n\n\t\t// Widgets.\n\t\t$max_widget_numbers = array();\n\t\tforeach ( $sidebars_widgets as $sidebar_id => $widgets ) {\n\t\t\t$sidebar_widget_ids = array();\n\t\t\tforeach ( $widgets as $widget ) {\n\t\t\t\tlist( $id_base, $instance ) = $widget;\n\n\t\t\t\tif ( ! isset( $max_widget_numbers[ $id_base ] ) ) {\n\n\t\t\t\t\t// When $settings is an array-like object, get an intrinsic array for use with array_keys().\n\t\t\t\t\t$settings = get_option( \"widget_{$id_base}\", array() );\n\t\t\t\t\tif ( $settings instanceof ArrayObject || $settings instanceof ArrayIterator ) {\n\t\t\t\t\t\t$settings = $settings->getArrayCopy();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Find the max widget number for this type.\n\t\t\t\t\t$widget_numbers = array_keys( $settings );\n\t\t\t\t\tif ( count( $widget_numbers ) > 0 ) {\n\t\t\t\t\t\t$widget_numbers[] = 1;\n\t\t\t\t\t\t$max_widget_numbers[ $id_base ] = call_user_func_array( 'max', $widget_numbers );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$max_widget_numbers[ $id_base ] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$max_widget_numbers[ $id_base ] += 1;\n\n\t\t\t\t$widget_id = sprintf( '%s-%d', $id_base, $max_widget_numbers[ $id_base ] );\n\t\t\t\t$setting_id = sprintf( 'widget_%s[%d]', $id_base, $max_widget_numbers[ $id_base ] );\n\n\t\t\t\t$setting_value = $this->widgets->sanitize_widget_js_instance( $instance );\n\t\t\t\tif ( empty( $changeset_data[ $setting_id ] ) || ! empty( $changeset_data[ $setting_id ]['starter_content'] ) ) {\n\t\t\t\t\t$this->set_post_value( $setting_id, $setting_value );\n\t\t\t\t\t$this->pending_starter_content_settings_ids[] = $setting_id;\n\t\t\t\t}\n\t\t\t\t$sidebar_widget_ids[] = $widget_id;\n\t\t\t}\n\n\t\t\t$setting_id = sprintf( 'sidebars_widgets[%s]', $sidebar_id );\n\t\t\tif ( empty( $changeset_data[ $setting_id ] ) || ! empty( $changeset_data[ $setting_id ]['starter_content'] ) ) {\n\t\t\t\t$this->set_post_value( $setting_id, $sidebar_widget_ids );\n\t\t\t\t$this->pending_starter_content_settings_ids[] = $setting_id;\n\t\t\t}\n\t\t}\n\n\t\t$starter_content_auto_draft_post_ids = array();\n\t\tif ( ! empty( $changeset_data['nav_menus_created_posts']['value'] ) ) {\n\t\t\t$starter_content_auto_draft_post_ids = array_merge( $starter_content_auto_draft_post_ids, $changeset_data['nav_menus_created_posts']['value'] );\n\t\t}\n\n\t\t// Make an index of all the posts needed and what their slugs are.\n\t\t$needed_posts = array();\n\t\t$attachments = $this->prepare_starter_content_attachments( $attachments );\n\t\tforeach ( $attachments as $attachment ) {\n\t\t\t$key = 'attachment:' . $attachment['post_name'];\n\t\t\t$needed_posts[ $key ] = true;\n\t\t}\n\t\tforeach ( array_keys( $posts ) as $post_symbol ) {\n\t\t\tif ( empty( $posts[ $post_symbol ]['post_name'] ) && empty( $posts[ $post_symbol ]['post_title'] ) ) {\n\t\t\t\tunset( $posts[ $post_symbol ] );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ( empty( $posts[ $post_symbol ]['post_name'] ) ) {\n\t\t\t\t$posts[ $post_symbol ]['post_name'] = sanitize_title( $posts[ $post_symbol ]['post_title'] );\n\t\t\t}\n\t\t\tif ( empty( $posts[ $post_symbol ]['post_type'] ) ) {\n\t\t\t\t$posts[ $post_symbol ]['post_type'] = 'post';\n\t\t\t}\n\t\t\t$needed_posts[ $posts[ $post_symbol ]['post_type'] . ':' . $posts[ $post_symbol ]['post_name'] ] = true;\n\t\t}\n\t\t$all_post_slugs = array_merge(\n\t\t\twp_list_pluck( $attachments, 'post_name' ),\n\t\t\twp_list_pluck( $posts, 'post_name' )\n\t\t);\n\n\t\t/*\n\t\t * Obtain all post types referenced in starter content to use in query.\n\t\t * This is needed because 'any' will not account for post types not yet registered.\n\t\t */\n\t\t$post_types = array_filter( array_merge( array( 'attachment' ), wp_list_pluck( $posts, 'post_type' ) ) );\n\n\t\t// Re-use auto-draft starter content posts referenced in the current customized state.\n\t\t$existing_starter_content_posts = array();\n\t\tif ( ! empty( $starter_content_auto_draft_post_ids ) ) {\n\t\t\t$existing_posts_query = new WP_Query( array(\n\t\t\t\t'post__in' => $starter_content_auto_draft_post_ids,\n\t\t\t\t'post_status' => 'auto-draft',\n\t\t\t\t'post_type' => $post_types,\n\t\t\t\t'posts_per_page' => -1,\n\t\t\t) );\n\t\t\tforeach ( $existing_posts_query->posts as $existing_post ) {\n\t\t\t\t$post_name = $existing_post->post_name;\n\t\t\t\tif ( empty( $post_name ) ) {\n\t\t\t\t\t$post_name = get_post_meta( $existing_post->ID, '_customize_draft_post_name', true );\n\t\t\t\t}\n\t\t\t\t$existing_starter_content_posts[ $existing_post->post_type . ':' . $post_name ] = $existing_post;\n\t\t\t}\n\t\t}\n\n\t\t// Re-use non-auto-draft posts.\n\t\tif ( ! empty( $all_post_slugs ) ) {\n\t\t\t$existing_posts_query = new WP_Query( array(\n\t\t\t\t'post_name__in' => $all_post_slugs,\n\t\t\t\t'post_status' => array_diff( get_post_stati(), array( 'auto-draft' ) ),\n\t\t\t\t'post_type' => 'any',\n\t\t\t\t'posts_per_page' => -1,\n\t\t\t) );\n\t\t\tforeach ( $existing_posts_query->posts as $existing_post ) {\n\t\t\t\t$key = $existing_post->post_type . ':' . $existing_post->post_name;\n\t\t\t\tif ( isset( $needed_posts[ $key ] ) && ! isset( $existing_starter_content_posts[ $key ] ) ) {\n\t\t\t\t\t$existing_starter_content_posts[ $key ] = $existing_post;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Attachments are technically posts but handled differently.\n\t\tif ( ! empty( $attachments ) ) {\n\n\t\t\t$attachment_ids = array();\n\n\t\t\tforeach ( $attachments as $symbol => $attachment ) {\n\t\t\t\t$file_array = array(\n\t\t\t\t\t'name' => $attachment['file_name'],\n\t\t\t\t);\n\t\t\t\t$file_path = $attachment['file_path'];\n\t\t\t\t$attachment_id = null;\n\t\t\t\t$attached_file = null;\n\t\t\t\tif ( isset( $existing_starter_content_posts[ 'attachment:' . $attachment['post_name'] ] ) ) {\n\t\t\t\t\t$attachment_post = $existing_starter_content_posts[ 'attachment:' . $attachment['post_name'] ];\n\t\t\t\t\t$attachment_id = $attachment_post->ID;\n\t\t\t\t\t$attached_file = get_attached_file( $attachment_id );\n\t\t\t\t\tif ( empty( $attached_file ) || ! file_exists( $attached_file ) ) {\n\t\t\t\t\t\t$attachment_id = null;\n\t\t\t\t\t\t$attached_file = null;\n\t\t\t\t\t} elseif ( $this->get_stylesheet() !== get_post_meta( $attachment_post->ID, '_starter_content_theme', true ) ) {\n\n\t\t\t\t\t\t// Re-generate attachment metadata since it was previously generated for a different theme.\n\t\t\t\t\t\t$metadata = wp_generate_attachment_metadata( $attachment_post->ID, $attached_file );\n\t\t\t\t\t\twp_update_attachment_metadata( $attachment_id, $metadata );\n\t\t\t\t\t\tupdate_post_meta( $attachment_id, '_starter_content_theme', $this->get_stylesheet() );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Insert the attachment auto-draft because it doesn't yet exist or the attached file is gone.\n\t\t\t\tif ( ! $attachment_id ) {\n\n\t\t\t\t\t// Copy file to temp location so that original file won't get deleted from theme after sideloading.\n\t\t\t\t\t$temp_file_name = wp_tempnam( basename( $file_path ) );\n\t\t\t\t\tif ( $temp_file_name && copy( $file_path, $temp_file_name ) ) {\n\t\t\t\t\t\t$file_array['tmp_name'] = $temp_file_name;\n\t\t\t\t\t}\n\t\t\t\t\tif ( empty( $file_array['tmp_name'] ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$attachment_post_data = array_merge(\n\t\t\t\t\t\twp_array_slice_assoc( $attachment, array( 'post_title', 'post_content', 'post_excerpt' ) ),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'post_status' => 'auto-draft', // So attachment will be garbage collected in a week if changeset is never published.\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\t// In PHP < 5.6 filesize() returns 0 for the temp files unless we clear the file status cache.\n\t\t\t\t\t// Technically, PHP < 5.6.0 || < 5.5.13 || < 5.4.29 but no need to be so targeted.\n\t\t\t\t\t// See https://bugs.php.net/bug.php?id=65701\n\t\t\t\t\tif ( version_compare( PHP_VERSION, '5.6', '<' ) ) {\n\t\t\t\t\t\tclearstatcache();\n\t\t\t\t\t}\n\n\t\t\t\t\t$attachment_id = media_handle_sideload( $file_array, 0, null, $attachment_post_data );\n\t\t\t\t\tif ( is_wp_error( $attachment_id ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tupdate_post_meta( $attachment_id, '_starter_content_theme', $this->get_stylesheet() );\n\t\t\t\t\tupdate_post_meta( $attachment_id, '_customize_draft_post_name', $attachment['post_name'] );\n\t\t\t\t}\n\n\t\t\t\t$attachment_ids[ $symbol ] = $attachment_id;\n\t\t\t}\n\t\t\t$starter_content_auto_draft_post_ids = array_merge( $starter_content_auto_draft_post_ids, array_values( $attachment_ids ) );\n\t\t}\n\n\t\t// Posts & pages.\n\t\tif ( ! empty( $posts ) ) {\n\t\t\tforeach ( array_keys( $posts ) as $post_symbol ) {\n\t\t\t\tif ( empty( $posts[ $post_symbol ]['post_type'] ) || empty( $posts[ $post_symbol ]['post_name'] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$post_type = $posts[ $post_symbol ]['post_type'];\n\t\t\t\tif ( ! empty( $posts[ $post_symbol ]['post_name'] ) ) {\n\t\t\t\t\t$post_name = $posts[ $post_symbol ]['post_name'];\n\t\t\t\t} elseif ( ! empty( $posts[ $post_symbol ]['post_title'] ) ) {\n\t\t\t\t\t$post_name = sanitize_title( $posts[ $post_symbol ]['post_title'] );\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Use existing auto-draft post if one already exists with the same type and name.\n\t\t\t\tif ( isset( $existing_starter_content_posts[ $post_type . ':' . $post_name ] ) ) {\n\t\t\t\t\t$posts[ $post_symbol ]['ID'] = $existing_starter_content_posts[ $post_type . ':' . $post_name ]->ID;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Translate the featured image symbol.\n\t\t\t\tif ( ! empty( $posts[ $post_symbol ]['thumbnail'] )\n\t\t\t\t\t&& preg_match( '/^{{(?P<symbol>.+)}}$/', $posts[ $post_symbol ]['thumbnail'], $matches )\n\t\t\t\t\t&& isset( $attachment_ids[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t$posts[ $post_symbol ]['meta_input']['_thumbnail_id'] = $attachment_ids[ $matches['symbol'] ];\n\t\t\t\t}\n\n\t\t\t\tif ( ! empty( $posts[ $post_symbol ]['template'] ) ) {\n\t\t\t\t\t$posts[ $post_symbol ]['meta_input']['_wp_page_template'] = $posts[ $post_symbol ]['template'];\n\t\t\t\t}\n\n\t\t\t\t$r = $this->nav_menus->insert_auto_draft_post( $posts[ $post_symbol ] );\n\t\t\t\tif ( $r instanceof WP_Post ) {\n\t\t\t\t\t$posts[ $post_symbol ]['ID'] = $r->ID;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$starter_content_auto_draft_post_ids = array_merge( $starter_content_auto_draft_post_ids, wp_list_pluck( $posts, 'ID' ) );\n\t\t}\n\n\t\t// The nav_menus_created_posts setting is why nav_menus component is dependency for adding posts.\n\t\tif ( ! empty( $this->nav_menus ) && ! empty( $starter_content_auto_draft_post_ids ) ) {\n\t\t\t$setting_id = 'nav_menus_created_posts';\n\t\t\t$this->set_post_value( $setting_id, array_unique( array_values( $starter_content_auto_draft_post_ids ) ) );\n\t\t\t$this->pending_starter_content_settings_ids[] = $setting_id;\n\t\t}\n\n\t\t// Nav menus.\n\t\t$placeholder_id = -1;\n\t\t$reused_nav_menu_setting_ids = array();\n\t\tforeach ( $nav_menus as $nav_menu_location => $nav_menu ) {\n\n\t\t\t$nav_menu_term_id = null;\n\t\t\t$nav_menu_setting_id = null;\n\t\t\t$matches = array();\n\n\t\t\t// Look for an existing placeholder menu with starter content to re-use.\n\t\t\tforeach ( $changeset_data as $setting_id => $setting_params ) {\n\t\t\t\t$can_reuse = (\n\t\t\t\t\t! empty( $setting_params['starter_content'] )\n\t\t\t\t\t&&\n\t\t\t\t\t! in_array( $setting_id, $reused_nav_menu_setting_ids, true )\n\t\t\t\t\t&&\n\t\t\t\t\tpreg_match( '#^nav_menu\\[(?P<nav_menu_id>-?\\d+)\\]$#', $setting_id, $matches )\n\t\t\t\t);\n\t\t\t\tif ( $can_reuse ) {\n\t\t\t\t\t$nav_menu_term_id = intval( $matches['nav_menu_id'] );\n\t\t\t\t\t$nav_menu_setting_id = $setting_id;\n\t\t\t\t\t$reused_nav_menu_setting_ids[] = $setting_id;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! $nav_menu_term_id ) {\n\t\t\t\twhile ( isset( $changeset_data[ sprintf( 'nav_menu[%d]', $placeholder_id ) ] ) ) {\n\t\t\t\t\t$placeholder_id--;\n\t\t\t\t}\n\t\t\t\t$nav_menu_term_id = $placeholder_id;\n\t\t\t\t$nav_menu_setting_id = sprintf( 'nav_menu[%d]', $placeholder_id );\n\t\t\t}\n\n\t\t\t$this->set_post_value( $nav_menu_setting_id, array(\n\t\t\t\t'name' => isset( $nav_menu['name'] ) ? $nav_menu['name'] : $nav_menu_location,\n\t\t\t) );\n\t\t\t$this->pending_starter_content_settings_ids[] = $nav_menu_setting_id;\n\n\t\t\t// @todo Add support for menu_item_parent.\n\t\t\t$position = 0;\n\t\t\tforeach ( $nav_menu['items'] as $nav_menu_item ) {\n\t\t\t\t$nav_menu_item_setting_id = sprintf( 'nav_menu_item[%d]', $placeholder_id-- );\n\t\t\t\tif ( ! isset( $nav_menu_item['position'] ) ) {\n\t\t\t\t\t$nav_menu_item['position'] = $position++;\n\t\t\t\t}\n\t\t\t\t$nav_menu_item['nav_menu_term_id'] = $nav_menu_term_id;\n\n\t\t\t\tif ( isset( $nav_menu_item['object_id'] ) ) {\n\t\t\t\t\tif ( 'post_type' === $nav_menu_item['type'] && preg_match( '/^{{(?P<symbol>.+)}}$/', $nav_menu_item['object_id'], $matches ) && isset( $posts[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t\t$nav_menu_item['object_id'] = $posts[ $matches['symbol'] ]['ID'];\n\t\t\t\t\t\tif ( empty( $nav_menu_item['title'] ) ) {\n\t\t\t\t\t\t\t$original_object = get_post( $nav_menu_item['object_id'] );\n\t\t\t\t\t\t\t$nav_menu_item['title'] = $original_object->post_title;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$nav_menu_item['object_id'] = 0;\n\t\t\t\t}\n\n\t\t\t\tif ( empty( $changeset_data[ $nav_menu_item_setting_id ] ) || ! empty( $changeset_data[ $nav_menu_item_setting_id ]['starter_content'] ) ) {\n\t\t\t\t\t$this->set_post_value( $nav_menu_item_setting_id, $nav_menu_item );\n\t\t\t\t\t$this->pending_starter_content_settings_ids[] = $nav_menu_item_setting_id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$setting_id = sprintf( 'nav_menu_locations[%s]', $nav_menu_location );\n\t\t\tif ( empty( $changeset_data[ $setting_id ] ) || ! empty( $changeset_data[ $setting_id ]['starter_content'] ) ) {\n\t\t\t\t$this->set_post_value( $setting_id, $nav_menu_term_id );\n\t\t\t\t$this->pending_starter_content_settings_ids[] = $setting_id;\n\t\t\t}\n\t\t}\n\n\t\t// Options.\n\t\tforeach ( $options as $name => $value ) {\n\t\t\tif ( preg_match( '/^{{(?P<symbol>.+)}}$/', $value, $matches ) ) {\n\t\t\t\tif ( isset( $posts[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t$value = $posts[ $matches['symbol'] ]['ID'];\n\t\t\t\t} elseif ( isset( $attachment_ids[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t$value = $attachment_ids[ $matches['symbol'] ];\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( empty( $changeset_data[ $name ] ) || ! empty( $changeset_data[ $name ]['starter_content'] ) ) {\n\t\t\t\t$this->set_post_value( $name, $value );\n\t\t\t\t$this->pending_starter_content_settings_ids[] = $name;\n\t\t\t}\n\t\t}\n\n\t\t// Theme mods.\n\t\tforeach ( $theme_mods as $name => $value ) {\n\t\t\tif ( preg_match( '/^{{(?P<symbol>.+)}}$/', $value, $matches ) ) {\n\t\t\t\tif ( isset( $posts[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t$value = $posts[ $matches['symbol'] ]['ID'];\n\t\t\t\t} elseif ( isset( $attachment_ids[ $matches['symbol'] ] ) ) {\n\t\t\t\t\t$value = $attachment_ids[ $matches['symbol'] ];\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Handle header image as special case since setting has a legacy format.\n\t\t\tif ( 'header_image' === $name ) {\n\t\t\t\t$name = 'header_image_data';\n\t\t\t\t$metadata = wp_get_attachment_metadata( $value );\n\t\t\t\tif ( empty( $metadata ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$value = array(\n\t\t\t\t\t'attachment_id' => $value,\n\t\t\t\t\t'url' => wp_get_attachment_url( $value ),\n\t\t\t\t\t'height' => $metadata['height'],\n\t\t\t\t\t'width' => $metadata['width'],\n\t\t\t\t);\n\t\t\t} elseif ( 'background_image' === $name ) {\n\t\t\t\t$value = wp_get_attachment_url( $value );\n\t\t\t}\n\n\t\t\tif ( empty( $changeset_data[ $name ] ) || ! empty( $changeset_data[ $name ]['starter_content'] ) ) {\n\t\t\t\t$this->set_post_value( $name, $value );\n\t\t\t\t$this->pending_starter_content_settings_ids[] = $name;\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $this->pending_starter_content_settings_ids ) ) {\n\t\t\tif ( did_action( 'customize_register' ) ) {\n\t\t\t\t$this->_save_starter_content_changeset();\n\t\t\t} else {\n\t\t\t\tadd_action( 'customize_register', array( $this, '_save_starter_content_changeset' ), 1000 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Prepare starter content attachments.\n\t *\n\t * Ensure that the attachments are valid and that they have slugs and file name/path.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t *\n\t * @param array $attachments Attachments.\n\t * @return array Prepared attachments.\n\t */\n\tprotected function prepare_starter_content_attachments( $attachments ) {\n\t\t$prepared_attachments = array();\n\t\tif ( empty( $attachments ) ) {\n\t\t\treturn $prepared_attachments;\n\t\t}\n\n\t\t// Such is The WordPress Way.\n\t\trequire_once( ABSPATH . 'wp-admin/includes/file.php' );\n\t\trequire_once( ABSPATH . 'wp-admin/includes/media.php' );\n\t\trequire_once( ABSPATH . 'wp-admin/includes/image.php' );\n\n\t\tforeach ( $attachments as $symbol => $attachment ) {\n\n\t\t\t// A file is required and URLs to files are not currently allowed.\n\t\t\tif ( empty( $attachment['file'] ) || preg_match( '#^https?://$#', $attachment['file'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$file_path = null;\n\t\t\tif ( file_exists( $attachment['file'] ) ) {\n\t\t\t\t$file_path = $attachment['file']; // Could be absolute path to file in plugin.\n\t\t\t} elseif ( is_child_theme() && file_exists( get_stylesheet_directory() . '/' . $attachment['file'] ) ) {\n\t\t\t\t$file_path = get_stylesheet_directory() . '/' . $attachment['file'];\n\t\t\t} elseif ( file_exists( get_template_directory() . '/' . $attachment['file'] ) ) {\n\t\t\t\t$file_path = get_template_directory() . '/' . $attachment['file'];\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$file_name = basename( $attachment['file'] );\n\n\t\t\t// Skip file types that are not recognized.\n\t\t\t$checked_filetype = wp_check_filetype( $file_name );\n\t\t\tif ( empty( $checked_filetype['type'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Ensure post_name is set since not automatically derived from post_title for new auto-draft posts.\n\t\t\tif ( empty( $attachment['post_name'] ) ) {\n\t\t\t\tif ( ! empty( $attachment['post_title'] ) ) {\n\t\t\t\t\t$attachment['post_name'] = sanitize_title( $attachment['post_title'] );\n\t\t\t\t} else {\n\t\t\t\t\t$attachment['post_name'] = sanitize_title( preg_replace( '/\\.\\w+$/', '', $file_name ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$attachment['file_name'] = $file_name;\n\t\t\t$attachment['file_path'] = $file_path;\n\t\t\t$prepared_attachments[ $symbol ] = $attachment;\n\t\t}\n\t\treturn $prepared_attachments;\n\t}\n\n\t/**\n\t * Save starter content changeset.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t */\n\tpublic function _save_starter_content_changeset() {\n\n\t\tif ( empty( $this->pending_starter_content_settings_ids ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->save_changeset_post( array(\n\t\t\t'data' => array_fill_keys( $this->pending_starter_content_settings_ids, array( 'starter_content' => true ) ),\n\t\t\t'starter_content' => true,\n\t\t) );\n\n\t\t$this->pending_starter_content_settings_ids = array();\n\t}\n\n\t/**\n\t * Get dirty pre-sanitized setting values in the current customized state.\n\t *\n\t * The returned array consists of a merge of three sources:\n\t * 1. If the theme is not currently active, then the base array is any stashed\n\t *    theme mods that were modified previously but never published.\n\t * 2. The values from the current changeset, if it exists.\n\t * 3. If the user can customize, the values parsed from the incoming\n\t *    `$_POST['customized']` JSON data.\n\t * 4. Any programmatically-set post values via `WP_Customize_Manager::set_post_value()`.\n\t *\n\t * The name \"unsanitized_post_values\" is a carry-over from when the customized\n\t * state was exclusively sourced from `$_POST['customized']`. Nevertheless,\n\t * the value returned will come from the current changeset post and from the\n\t * incoming post data.\n\t *\n\t * @since 4.1.1\n\t * @since 4.7.0 Added $args param and merging with changeset values and stashed theme mods.\n\t *\n\t * @param array $args {\n\t *     Args.\n\t *\n\t *     @type bool $exclude_changeset Whether the changeset values should also be excluded. Defaults to false.\n\t *     @type bool $exclude_post_data Whether the post input values should also be excluded. Defaults to false when lacking the customize capability.\n\t * }\n\t * @return array\n\t */\n\tpublic function unsanitized_post_values( $args = array() ) {\n\t\t$args = array_merge(\n\t\t\tarray(\n\t\t\t\t'exclude_changeset' => false,\n\t\t\t\t'exclude_post_data' => ! current_user_can( 'customize' ),\n\t\t\t),\n\t\t\t$args\n\t\t);\n\n\t\t$values = array();\n\n\t\t// Let default values be from the stashed theme mods if doing a theme switch and if no changeset is present.\n\t\tif ( ! $this->is_theme_active() ) {\n\t\t\t$stashed_theme_mods = get_option( 'customize_stashed_theme_mods' );\n\t\t\t$stylesheet = $this->get_stylesheet();\n\t\t\tif ( isset( $stashed_theme_mods[ $stylesheet ] ) ) {\n\t\t\t\t$values = array_merge( $values, wp_list_pluck( $stashed_theme_mods[ $stylesheet ], 'value' ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $args['exclude_changeset'] ) {\n\t\t\tforeach ( $this->changeset_data() as $setting_id => $setting_params ) {\n\t\t\t\tif ( ! array_key_exists( 'value', $setting_params ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif ( isset( $setting_params['type'] ) && 'theme_mod' === $setting_params['type'] ) {\n\n\t\t\t\t\t// Ensure that theme mods values are only used if they were saved under the current theme.\n\t\t\t\t\t$namespace_pattern = '/^(?P<stylesheet>.+?)::(?P<setting_id>.+)$/';\n\t\t\t\t\tif ( preg_match( $namespace_pattern, $setting_id, $matches ) && $this->get_stylesheet() === $matches['stylesheet'] ) {\n\t\t\t\t\t\t$values[ $matches['setting_id'] ] = $setting_params['value'];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$values[ $setting_id ] = $setting_params['value'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $args['exclude_post_data'] ) {\n\t\t\tif ( ! isset( $this->_post_values ) ) {\n\t\t\t\tif ( isset( $_POST['customized'] ) ) {\n\t\t\t\t\t$post_values = json_decode( wp_unslash( $_POST['customized'] ), true );\n\t\t\t\t} else {\n\t\t\t\t\t$post_values = array();\n\t\t\t\t}\n\t\t\t\tif ( is_array( $post_values ) ) {\n\t\t\t\t\t$this->_post_values = $post_values;\n\t\t\t\t} else {\n\t\t\t\t\t$this->_post_values = array();\n\t\t\t\t}\n\t\t\t}\n\t\t\t$values = array_merge( $values, $this->_post_values );\n\t\t}\n\t\treturn $values;\n\t}\n\n\t/**\n\t * Returns the sanitized value for a given setting from the current customized state.\n\t *\n\t * The name \"post_value\" is a carry-over from when the customized state was exclusively\n\t * sourced from `$_POST['customized']`. Nevertheless, the value returned will come\n\t * from the current changeset post and from the incoming post data.\n\t *\n\t * @since 3.4.0\n\t * @since 4.1.1 Introduced the `$default` parameter.\n\t * @since 4.6.0 `$default` is now returned early when the setting post value is invalid.\n\t * @access public\n\t *\n\t * @see WP_REST_Server::dispatch()\n\t * @see WP_Rest_Request::sanitize_params()\n\t * @see WP_Rest_Request::has_valid_params()\n\t *\n\t * @param WP_Customize_Setting $setting A WP_Customize_Setting derived object.\n\t * @param mixed                $default Value returned $setting has no post value (added in 4.2.0)\n\t *                                      or the post value is invalid (added in 4.6.0).\n\t * @return string|mixed $post_value Sanitized value or the $default provided.\n\t */\n\tpublic function post_value( $setting, $default = null ) {\n\t\t$post_values = $this->unsanitized_post_values();\n\t\tif ( ! array_key_exists( $setting->id, $post_values ) ) {\n\t\t\treturn $default;\n\t\t}\n\t\t$value = $post_values[ $setting->id ];\n\t\t$valid = $setting->validate( $value );\n\t\tif ( is_wp_error( $valid ) ) {\n\t\t\treturn $default;\n\t\t}\n\t\t$value = $setting->sanitize( $value );\n\t\tif ( is_null( $value ) || is_wp_error( $value ) ) {\n\t\t\treturn $default;\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Override a setting's value in the current customized state.\n\t *\n\t * The name \"post_value\" is a carry-over from when the customized state was\n\t * exclusively sourced from `$_POST['customized']`.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param string $setting_id ID for the WP_Customize_Setting instance.\n\t * @param mixed  $value      Post value.\n\t */\n\tpublic function set_post_value( $setting_id, $value ) {\n\t\t$this->unsanitized_post_values(); // Populate _post_values from $_POST['customized'].\n\t\t$this->_post_values[ $setting_id ] = $value;\n\n\t\t/**\n\t\t * Announce when a specific setting's unsanitized post value has been set.\n\t\t *\n\t\t * Fires when the WP_Customize_Manager::set_post_value() method is called.\n\t\t *\n\t\t * The dynamic portion of the hook name, `$setting_id`, refers to the setting ID.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param mixed                $value Unsanitized setting post value.\n\t\t * @param WP_Customize_Manager $this  WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( \"customize_post_value_set_{$setting_id}\", $value, $this );\n\n\t\t/**\n\t\t * Announce when any setting's unsanitized post value has been set.\n\t\t *\n\t\t * Fires when the WP_Customize_Manager::set_post_value() method is called.\n\t\t *\n\t\t * This is useful for `WP_Customize_Setting` instances to watch\n\t\t * in order to update a cached previewed value.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param string               $setting_id Setting ID.\n\t\t * @param mixed                $value      Unsanitized setting post value.\n\t\t * @param WP_Customize_Manager $this       WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_post_value_set', $setting_id, $value, $this );\n\t}\n\n\t/**\n\t * Print JavaScript settings.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function customize_preview_init() {\n\n\t\t/*\n\t\t * Now that Customizer previews are loaded into iframes via GET requests\n\t\t * and natural URLs with transaction UUIDs added, we need to ensure that\n\t\t * the responses are never cached by proxies. In practice, this will not\n\t\t * be needed if the user is logged-in anyway. But if anonymous access is\n\t\t * allowed then the auth cookies would not be sent and WordPress would\n\t\t * not send no-cache headers by default.\n\t\t */\n\t\tif ( ! headers_sent() ) {\n\t\t\tnocache_headers();\n\t\t\theader( 'X-Robots: noindex, nofollow, noarchive' );\n\t\t}\n\t\tadd_action( 'wp_head', 'wp_no_robots' );\n\t\tadd_filter( 'wp_headers', array( $this, 'filter_iframe_security_headers' ) );\n\n\t\t/*\n\t\t * If preview is being served inside the customizer preview iframe, and\n\t\t * if the user doesn't have customize capability, then it is assumed\n\t\t * that the user's session has expired and they need to re-authenticate.\n\t\t */\n\t\tif ( $this->messenger_channel && ! current_user_can( 'customize' ) ) {\n\t\t\t$this->wp_die( -1, __( 'Unauthorized. You may remove the customize_messenger_channel param to preview as frontend.' ) );\n\t\t\treturn;\n\t\t}\n\n\t\t$this->prepare_controls();\n\n\t\tadd_filter( 'wp_redirect', array( $this, 'add_state_query_params' ) );\n\n\t\twp_enqueue_script( 'customize-preview' );\n\t\twp_enqueue_style( 'customize-preview' );\n\t\tadd_action( 'wp_head', array( $this, 'customize_preview_loading_style' ) );\n\t\tadd_action( 'wp_head', array( $this, 'remove_frameless_preview_messenger_channel' ) );\n\t\tadd_action( 'wp_footer', array( $this, 'customize_preview_settings' ), 20 );\n\t\tadd_filter( 'get_edit_post_link', '__return_empty_string' );\n\n\t\t/**\n\t\t * Fires once the Customizer preview has initialized and JavaScript\n\t\t * settings have been printed.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param WP_Customize_Manager $this WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_preview_init', $this );\n\t}\n\n\t/**\n\t * Filter the X-Frame-Options and Content-Security-Policy headers to ensure frontend can load in customizer.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param array $headers Headers.\n\t * @return array Headers.\n\t */\n\tpublic function filter_iframe_security_headers( $headers ) {\n\t\t$customize_url = admin_url( 'customize.php' );\n\t\t$headers['X-Frame-Options'] = 'ALLOW-FROM ' . $customize_url;\n\t\t$headers['Content-Security-Policy'] = 'frame-ancestors ' . preg_replace( '#^(\\w+://[^/]+).+?$#', '$1', $customize_url );\n\t\treturn $headers;\n\t}\n\n\t/**\n\t * Add customize state query params to a given URL if preview is allowed.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t * @see wp_redirect()\n\t * @see WP_Customize_Manager::get_allowed_url()\n\t *\n\t * @param string $url URL.\n\t * @return string URL.\n\t */\n\tpublic function add_state_query_params( $url ) {\n\t\t$parsed_original_url = wp_parse_url( $url );\n\t\t$is_allowed = false;\n\t\tforeach ( $this->get_allowed_urls() as $allowed_url ) {\n\t\t\t$parsed_allowed_url = wp_parse_url( $allowed_url );\n\t\t\t$is_allowed = (\n\t\t\t\t$parsed_allowed_url['scheme'] === $parsed_original_url['scheme']\n\t\t\t\t&&\n\t\t\t\t$parsed_allowed_url['host'] === $parsed_original_url['host']\n\t\t\t\t&&\n\t\t\t\t0 === strpos( $parsed_original_url['path'], $parsed_allowed_url['path'] )\n\t\t\t);\n\t\t\tif ( $is_allowed ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ( $is_allowed ) {\n\t\t\t$query_params = array(\n\t\t\t\t'customize_changeset_uuid' => $this->changeset_uuid(),\n\t\t\t);\n\t\t\tif ( ! $this->is_theme_active() ) {\n\t\t\t\t$query_params['customize_theme'] = $this->get_stylesheet();\n\t\t\t}\n\t\t\tif ( $this->messenger_channel ) {\n\t\t\t\t$query_params['customize_messenger_channel'] = $this->messenger_channel;\n\t\t\t}\n\t\t\t$url = add_query_arg( $query_params, $url );\n\t\t}\n\n\t\treturn $url;\n\t}\n\n\t/**\n\t * Prevent sending a 404 status when returning the response for the customize\n\t * preview, since it causes the jQuery Ajax to fail. Send 200 instead.\n\t *\n\t * @since 4.0.0\n\t * @deprecated 4.7.0\n\t * @access public\n\t */\n\tpublic function customize_preview_override_404_status() {\n\t\t_deprecated_function( __METHOD__, '4.7.0' );\n\t}\n\n\t/**\n\t * Print base element for preview frame.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0\n\t */\n\tpublic function customize_preview_base() {\n\t\t_deprecated_function( __METHOD__, '4.7.0' );\n\t}\n\n\t/**\n\t * Print a workaround to handle HTML5 tags in IE < 9.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0 Customizer no longer supports IE8, so all supported browsers recognize HTML5.\n\t */\n\tpublic function customize_preview_html5() {\n\t\t_deprecated_function( __FUNCTION__, '4.7.0' );\n\t}\n\n\t/**\n\t * Print CSS for loading indicators for the Customizer preview.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t */\n\tpublic function customize_preview_loading_style() {\n\t\t?><style>\n\t\t\tbody.wp-customizer-unloading {\n\t\t\t\topacity: 0.25;\n\t\t\t\tcursor: progress !important;\n\t\t\t\t-webkit-transition: opacity 0.5s;\n\t\t\t\ttransition: opacity 0.5s;\n\t\t\t}\n\t\t\tbody.wp-customizer-unloading * {\n\t\t\t\tpointer-events: none !important;\n\t\t\t}\n\t\t\tform.customize-unpreviewable,\n\t\t\tform.customize-unpreviewable input,\n\t\t\tform.customize-unpreviewable select,\n\t\t\tform.customize-unpreviewable button,\n\t\t\ta.customize-unpreviewable,\n\t\t\tarea.customize-unpreviewable {\n\t\t\t\tcursor: not-allowed !important;\n\t\t\t}\n\t\t</style><?php\n\t}\n\n\t/**\n\t * Remove customize_messenger_channel query parameter from the preview window when it is not in an iframe.\n\t *\n\t * This ensures that the admin bar will be shown. It also ensures that link navigation will\n\t * work as expected since the parent frame is not being sent the URL to navigate to.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t */\n\tpublic function remove_frameless_preview_messenger_channel() {\n\t\tif ( ! $this->messenger_channel ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<script>\n\t\t( function() {\n\t\t\tvar urlParser, oldQueryParams, newQueryParams, i;\n\t\t\tif ( parent !== window ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\turlParser = document.createElement( 'a' );\n\t\t\turlParser.href = location.href;\n\t\t\toldQueryParams = urlParser.search.substr( 1 ).split( /&/ );\n\t\t\tnewQueryParams = [];\n\t\t\tfor ( i = 0; i < oldQueryParams.length; i += 1 ) {\n\t\t\t\tif ( ! /^customize_messenger_channel=/.test( oldQueryParams[ i ] ) ) {\n\t\t\t\t\tnewQueryParams.push( oldQueryParams[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\turlParser.search = newQueryParams.join( '&' );\n\t\t\tif ( urlParser.search !== location.search ) {\n\t\t\t\tlocation.replace( urlParser.href );\n\t\t\t}\n\t\t} )();\n\t\t</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Print JavaScript settings for preview frame.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function customize_preview_settings() {\n\t\t$post_values = $this->unsanitized_post_values( array( 'exclude_changeset' => true ) );\n\t\t$setting_validities = $this->validate_setting_values( $post_values );\n\t\t$exported_setting_validities = array_map( array( $this, 'prepare_setting_validity_for_js' ), $setting_validities );\n\n\t\t// Note that the REQUEST_URI is not passed into home_url() since this breaks subdirectory installs.\n\t\t$self_url = empty( $_SERVER['REQUEST_URI'] ) ? home_url( '/' ) : esc_url_raw( wp_unslash( $_SERVER['REQUEST_URI'] ) );\n\t\t$state_query_params = array(\n\t\t\t'customize_theme',\n\t\t\t'customize_changeset_uuid',\n\t\t\t'customize_messenger_channel',\n\t\t);\n\t\t$self_url = remove_query_arg( $state_query_params, $self_url );\n\n\t\t$allowed_urls = $this->get_allowed_urls();\n\t\t$allowed_hosts = array();\n\t\tforeach ( $allowed_urls as $allowed_url ) {\n\t\t\t$parsed = wp_parse_url( $allowed_url );\n\t\t\tif ( empty( $parsed['host'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$host = $parsed['host'];\n\t\t\tif ( ! empty( $parsed['port'] ) ) {\n\t\t\t\t$host .= ':' . $parsed['port'];\n\t\t\t}\n\t\t\t$allowed_hosts[] = $host;\n\t\t}\n\n\t\t$switched_locale = switch_to_locale( get_user_locale() );\n\t\t$l10n = array(\n\t\t\t'shiftClickToEdit' => __( 'Shift-click to edit this element.' ),\n\t\t\t'linkUnpreviewable' => __( 'This link is not live-previewable.' ),\n\t\t\t'formUnpreviewable' => __( 'This form is not live-previewable.' ),\n\t\t);\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\n\t\t$settings = array(\n\t\t\t'changeset' => array(\n\t\t\t\t'uuid' => $this->_changeset_uuid,\n\t\t\t),\n\t\t\t'timeouts' => array(\n\t\t\t\t'selectiveRefresh' => 250,\n\t\t\t\t'keepAliveSend' => 1000,\n\t\t\t),\n\t\t\t'theme' => array(\n\t\t\t\t'stylesheet' => $this->get_stylesheet(),\n\t\t\t\t'active'     => $this->is_theme_active(),\n\t\t\t),\n\t\t\t'url' => array(\n\t\t\t\t'self' => $self_url,\n\t\t\t\t'allowed' => array_map( 'esc_url_raw', $this->get_allowed_urls() ),\n\t\t\t\t'allowedHosts' => array_unique( $allowed_hosts ),\n\t\t\t\t'isCrossDomain' => $this->is_cross_domain(),\n\t\t\t),\n\t\t\t'channel' => $this->messenger_channel,\n\t\t\t'activePanels' => array(),\n\t\t\t'activeSections' => array(),\n\t\t\t'activeControls' => array(),\n\t\t\t'settingValidities' => $exported_setting_validities,\n\t\t\t'nonce' => current_user_can( 'customize' ) ? $this->get_nonces() : array(),\n\t\t\t'l10n' => $l10n,\n\t\t\t'_dirty' => array_keys( $post_values ),\n\t\t);\n\n\t\tforeach ( $this->panels as $panel_id => $panel ) {\n\t\t\tif ( $panel->check_capabilities() ) {\n\t\t\t\t$settings['activePanels'][ $panel_id ] = $panel->active();\n\t\t\t\tforeach ( $panel->sections as $section_id => $section ) {\n\t\t\t\t\tif ( $section->check_capabilities() ) {\n\t\t\t\t\t\t$settings['activeSections'][ $section_id ] = $section->active();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tforeach ( $this->sections as $id => $section ) {\n\t\t\tif ( $section->check_capabilities() ) {\n\t\t\t\t$settings['activeSections'][ $id ] = $section->active();\n\t\t\t}\n\t\t}\n\t\tforeach ( $this->controls as $id => $control ) {\n\t\t\tif ( $control->check_capabilities() ) {\n\t\t\t\t$settings['activeControls'][ $id ] = $control->active();\n\t\t\t}\n\t\t}\n\n\t\t?>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar _wpCustomizeSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\t_wpCustomizeSettings.values = {};\n\t\t\t(function( v ) {\n\t\t\t\t<?php\n\t\t\t\t/*\n\t\t\t\t * Serialize settings separately from the initial _wpCustomizeSettings\n\t\t\t\t * serialization in order to avoid a peak memory usage spike.\n\t\t\t\t * @todo We may not even need to export the values at all since the pane syncs them anyway.\n\t\t\t\t */\n\t\t\t\tforeach ( $this->settings as $id => $setting ) {\n\t\t\t\t\tif ( $setting->check_capabilities() ) {\n\t\t\t\t\t\tprintf(\n\t\t\t\t\t\t\t\"v[%s] = %s;\\n\",\n\t\t\t\t\t\t\twp_json_encode( $id ),\n\t\t\t\t\t\t\twp_json_encode( $setting->js_value() )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t})( _wpCustomizeSettings.values );\n\t\t</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Prints a signature so we can ensure the Customizer was properly executed.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0\n\t */\n\tpublic function customize_preview_signature() {\n\t\t_deprecated_function( __METHOD__, '4.7.0' );\n\t}\n\n\t/**\n\t * Removes the signature in case we experience a case where the Customizer was not properly executed.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0\n\t *\n\t * @param mixed $return Value passed through for {@see 'wp_die_handler'} filter.\n\t * @return mixed Value passed through for {@see 'wp_die_handler'} filter.\n\t */\n\tpublic function remove_preview_signature( $return = null ) {\n\t\t_deprecated_function( __METHOD__, '4.7.0' );\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Is it a theme preview?\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return bool True if it's a preview, false if not.\n\t */\n\tpublic function is_preview() {\n\t\treturn (bool) $this->previewing;\n\t}\n\n\t/**\n\t * Retrieve the template name of the previewed theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return string Template name.\n\t */\n\tpublic function get_template() {\n\t\treturn $this->theme()->get_template();\n\t}\n\n\t/**\n\t * Retrieve the stylesheet name of the previewed theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return string Stylesheet name.\n\t */\n\tpublic function get_stylesheet() {\n\t\treturn $this->theme()->get_stylesheet();\n\t}\n\n\t/**\n\t * Retrieve the template root of the previewed theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return string Theme root.\n\t */\n\tpublic function get_template_root() {\n\t\treturn get_raw_theme_root( $this->get_template(), true );\n\t}\n\n\t/**\n\t * Retrieve the stylesheet root of the previewed theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return string Theme root.\n\t */\n\tpublic function get_stylesheet_root() {\n\t\treturn get_raw_theme_root( $this->get_stylesheet(), true );\n\t}\n\n\t/**\n\t * Filters the current theme and return the name of the previewed theme.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param $current_theme {@internal Parameter is not used}\n\t * @return string Theme name.\n\t */\n\tpublic function current_theme( $current_theme ) {\n\t\treturn $this->theme()->display('Name');\n\t}\n\n\t/**\n\t * Validates setting values.\n\t *\n\t * Validation is skipped for unregistered settings or for values that are\n\t * already null since they will be skipped anyway. Sanitization is applied\n\t * to values that pass validation, and values that become null or `WP_Error`\n\t * after sanitizing are marked invalid.\n\t *\n\t * @since 4.6.0\n\t * @access public\n\t *\n\t * @see WP_REST_Request::has_valid_params()\n\t * @see WP_Customize_Setting::validate()\n\t *\n\t * @param array $setting_values Mapping of setting IDs to values to validate and sanitize.\n\t * @param array $options {\n\t *     Options.\n\t *\n\t *     @type bool $validate_existence  Whether a setting's existence will be checked.\n\t *     @type bool $validate_capability Whether the setting capability will be checked.\n\t * }\n\t * @return array Mapping of setting IDs to return value of validate method calls, either `true` or `WP_Error`.\n\t */\n\tpublic function validate_setting_values( $setting_values, $options = array() ) {\n\t\t$options = wp_parse_args( $options, array(\n\t\t\t'validate_capability' => false,\n\t\t\t'validate_existence' => false,\n\t\t) );\n\n\t\t$validities = array();\n\t\tforeach ( $setting_values as $setting_id => $unsanitized_value ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( ! $setting ) {\n\t\t\t\tif ( $options['validate_existence'] ) {\n\t\t\t\t\t$validities[ $setting_id ] = new WP_Error( 'unrecognized', __( 'Setting does not exist or is unrecognized.' ) );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ( $options['validate_capability'] && ! current_user_can( $setting->capability ) ) {\n\t\t\t\t$validity = new WP_Error( 'unauthorized', __( 'Unauthorized to modify setting due to capability.' ) );\n\t\t\t} else {\n\t\t\t\tif ( is_null( $unsanitized_value ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$validity = $setting->validate( $unsanitized_value );\n\t\t\t}\n\t\t\tif ( ! is_wp_error( $validity ) ) {\n\t\t\t\t/** This filter is documented in wp-includes/class-wp-customize-setting.php */\n\t\t\t\t$late_validity = apply_filters( \"customize_validate_{$setting->id}\", new WP_Error(), $unsanitized_value, $setting );\n\t\t\t\tif ( ! empty( $late_validity->errors ) ) {\n\t\t\t\t\t$validity = $late_validity;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( ! is_wp_error( $validity ) ) {\n\t\t\t\t$value = $setting->sanitize( $unsanitized_value );\n\t\t\t\tif ( is_null( $value ) ) {\n\t\t\t\t\t$validity = false;\n\t\t\t\t} elseif ( is_wp_error( $value ) ) {\n\t\t\t\t\t$validity = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( false === $validity ) {\n\t\t\t\t$validity = new WP_Error( 'invalid_value', __( 'Invalid value.' ) );\n\t\t\t}\n\t\t\t$validities[ $setting_id ] = $validity;\n\t\t}\n\t\treturn $validities;\n\t}\n\n\t/**\n\t * Prepares setting validity for exporting to the client (JS).\n\t *\n\t * Converts `WP_Error` instance into array suitable for passing into the\n\t * `wp.customize.Notification` JS model.\n\t *\n\t * @since 4.6.0\n\t * @access public\n\t *\n\t * @param true|WP_Error $validity Setting validity.\n\t * @return true|array If `$validity` was a WP_Error, the error codes will be array-mapped\n\t *                    to their respective `message` and `data` to pass into the\n\t *                    `wp.customize.Notification` JS model.\n\t */\n\tpublic function prepare_setting_validity_for_js( $validity ) {\n\t\tif ( is_wp_error( $validity ) ) {\n\t\t\t$notification = array();\n\t\t\tforeach ( $validity->errors as $error_code => $error_messages ) {\n\t\t\t\t$notification[ $error_code ] = array(\n\t\t\t\t\t'message' => join( ' ', $error_messages ),\n\t\t\t\t\t'data' => $validity->get_error_data( $error_code ),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn $notification;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Handle customize_save WP Ajax request to save/update a changeset.\n\t *\n\t * @since 3.4.0\n\t * @since 4.7.0 The semantics of this method have changed to update a changeset, optionally to also change the status and other attributes.\n\t */\n\tpublic function save() {\n\t\tif ( ! is_user_logged_in() ) {\n\t\t\twp_send_json_error( 'unauthenticated' );\n\t\t}\n\n\t\tif ( ! $this->is_preview() ) {\n\t\t\twp_send_json_error( 'not_preview' );\n\t\t}\n\n\t\t$action = 'save-customize_' . $this->get_stylesheet();\n\t\tif ( ! check_ajax_referer( $action, 'nonce', false ) ) {\n\t\t\twp_send_json_error( 'invalid_nonce' );\n\t\t}\n\n\t\t$changeset_post_id = $this->changeset_post_id();\n\t\tif ( empty( $changeset_post_id ) ) {\n\t\t\tif ( ! current_user_can( get_post_type_object( 'customize_changeset' )->cap->create_posts ) ) {\n\t\t\t\twp_send_json_error( 'cannot_create_changeset_post' );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! current_user_can( get_post_type_object( 'customize_changeset' )->cap->edit_post, $changeset_post_id ) ) {\n\t\t\t\twp_send_json_error( 'cannot_edit_changeset_post' );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $_POST['customize_changeset_data'] ) ) {\n\t\t\t$input_changeset_data = json_decode( wp_unslash( $_POST['customize_changeset_data'] ), true );\n\t\t\tif ( ! is_array( $input_changeset_data ) ) {\n\t\t\t\twp_send_json_error( 'invalid_customize_changeset_data' );\n\t\t\t}\n\t\t} else {\n\t\t\t$input_changeset_data = array();\n\t\t}\n\n\t\t// Validate title.\n\t\t$changeset_title = null;\n\t\tif ( isset( $_POST['customize_changeset_title'] ) ) {\n\t\t\t$changeset_title = sanitize_text_field( wp_unslash( $_POST['customize_changeset_title'] ) );\n\t\t}\n\n\t\t// Validate changeset status param.\n\t\t$is_publish = null;\n\t\t$changeset_status = null;\n\t\tif ( isset( $_POST['customize_changeset_status'] ) ) {\n\t\t\t$changeset_status = wp_unslash( $_POST['customize_changeset_status'] );\n\t\t\tif ( ! get_post_status_object( $changeset_status ) || ! in_array( $changeset_status, array( 'draft', 'pending', 'publish', 'future' ), true ) ) {\n\t\t\t\twp_send_json_error( 'bad_customize_changeset_status', 400 );\n\t\t\t}\n\t\t\t$is_publish = ( 'publish' === $changeset_status || 'future' === $changeset_status );\n\t\t\tif ( $is_publish && ! current_user_can( get_post_type_object( 'customize_changeset' )->cap->publish_posts ) ) {\n\t\t\t\twp_send_json_error( 'changeset_publish_unauthorized', 403 );\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Validate changeset date param. Date is assumed to be in local time for\n\t\t * the WP if in MySQL format (YYYY-MM-DD HH:MM:SS). Otherwise, the date\n\t\t * is parsed with strtotime() so that ISO date format may be supplied\n\t\t * or a string like \"+10 minutes\".\n\t\t */\n\t\t$changeset_date_gmt = null;\n\t\tif ( isset( $_POST['customize_changeset_date'] ) ) {\n\t\t\t$changeset_date = wp_unslash( $_POST['customize_changeset_date'] );\n\t\t\tif ( preg_match( '/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d$/', $changeset_date ) ) {\n\t\t\t\t$mm = substr( $changeset_date, 5, 2 );\n\t\t\t\t$jj = substr( $changeset_date, 8, 2 );\n\t\t\t\t$aa = substr( $changeset_date, 0, 4 );\n\t\t\t\t$valid_date = wp_checkdate( $mm, $jj, $aa, $changeset_date );\n\t\t\t\tif ( ! $valid_date ) {\n\t\t\t\t\twp_send_json_error( 'bad_customize_changeset_date', 400 );\n\t\t\t\t}\n\t\t\t\t$changeset_date_gmt = get_gmt_from_date( $changeset_date );\n\t\t\t} else {\n\t\t\t\t$timestamp = strtotime( $changeset_date );\n\t\t\t\tif ( ! $timestamp ) {\n\t\t\t\t\twp_send_json_error( 'bad_customize_changeset_date', 400 );\n\t\t\t\t}\n\t\t\t\t$changeset_date_gmt = gmdate( 'Y-m-d H:i:s', $timestamp );\n\t\t\t}\n\t\t}\n\n\t\t$r = $this->save_changeset_post( array(\n\t\t\t'status' => $changeset_status,\n\t\t\t'title' => $changeset_title,\n\t\t\t'date_gmt' => $changeset_date_gmt,\n\t\t\t'data' => $input_changeset_data,\n\t\t) );\n\t\tif ( is_wp_error( $r ) ) {\n\t\t\t$response = array(\n\t\t\t\t'message' => $r->get_error_message(),\n\t\t\t\t'code' => $r->get_error_code(),\n\t\t\t);\n\t\t\tif ( is_array( $r->get_error_data() ) ) {\n\t\t\t\t$response = array_merge( $response, $r->get_error_data() );\n\t\t\t} else {\n\t\t\t\t$response['data'] = $r->get_error_data();\n\t\t\t}\n\t\t} else {\n\t\t\t$response = $r;\n\n\t\t\t// Note that if the changeset status was publish, then it will get set to trash if revisions are not supported.\n\t\t\t$response['changeset_status'] = get_post_status( $this->changeset_post_id() );\n\t\t\tif ( $is_publish && 'trash' === $response['changeset_status'] ) {\n\t\t\t\t$response['changeset_status'] = 'publish';\n\t\t\t}\n\n\t\t\tif ( 'publish' === $response['changeset_status'] ) {\n\t\t\t\t$response['next_changeset_uuid'] = wp_generate_uuid4();\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $response['setting_validities'] ) ) {\n\t\t\t$response['setting_validities'] = array_map( array( $this, 'prepare_setting_validity_for_js' ), $response['setting_validities'] );\n\t\t}\n\n\t\t/**\n\t\t * Filters response data for a successful customize_save Ajax request.\n\t\t *\n\t\t * This filter does not apply if there was a nonce or authentication failure.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param array                $response Additional information passed back to the 'saved'\n\t\t *                                       event on `wp.customize`.\n\t\t * @param WP_Customize_Manager $this     WP_Customize_Manager instance.\n\t\t */\n\t\t$response = apply_filters( 'customize_save_response', $response, $this );\n\n\t\tif ( is_wp_error( $r ) ) {\n\t\t\twp_send_json_error( $response );\n\t\t} else {\n\t\t\twp_send_json_success( $response );\n\t\t}\n\t}\n\n\t/**\n\t * Save the post for the loaded changeset.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param array $args {\n\t *     Args for changeset post.\n\t *\n\t *     @type array  $data            Optional additional changeset data. Values will be merged on top of any existing post values.\n\t *     @type string $status          Post status. Optional. If supplied, the save will be transactional and a post revision will be allowed.\n\t *     @type string $title           Post title. Optional.\n\t *     @type string $date_gmt        Date in GMT. Optional.\n\t *     @type int    $user_id         ID for user who is saving the changeset. Optional, defaults to the current user ID.\n\t *     @type bool   $starter_content Whether the data is starter content. If false (default), then $starter_content will be cleared for any $data being saved.\n\t * }\n\t *\n\t * @return array|WP_Error Returns array on success and WP_Error with array data on error.\n\t */\n\tfunction save_changeset_post( $args = array() ) {\n\n\t\t$args = array_merge(\n\t\t\tarray(\n\t\t\t\t'status' => null,\n\t\t\t\t'title' => null,\n\t\t\t\t'data' => array(),\n\t\t\t\t'date_gmt' => null,\n\t\t\t\t'user_id' => get_current_user_id(),\n\t\t\t\t'starter_content' => false,\n\t\t\t),\n\t\t\t$args\n\t\t);\n\n\t\t$changeset_post_id = $this->changeset_post_id();\n\t\t$existing_changeset_data = array();\n\t\tif ( $changeset_post_id ) {\n\t\t\t$existing_status = get_post_status( $changeset_post_id );\n\t\t\tif ( 'publish' === $existing_status || 'trash' === $existing_status ) {\n\t\t\t\treturn new WP_Error( 'changeset_already_published' );\n\t\t\t}\n\n\t\t\t$existing_changeset_data = $this->get_changeset_post_data( $changeset_post_id );\n\t\t}\n\n\t\t// Fail if attempting to publish but publish hook is missing.\n\t\tif ( 'publish' === $args['status'] && false === has_action( 'transition_post_status', '_wp_customize_publish_changeset' ) ) {\n\t\t\treturn new WP_Error( 'missing_publish_callback' );\n\t\t}\n\n\t\t// Validate date.\n\t\t$now = gmdate( 'Y-m-d H:i:59' );\n\t\tif ( $args['date_gmt'] ) {\n\t\t\t$is_future_dated = ( mysql2date( 'U', $args['date_gmt'], false ) > mysql2date( 'U', $now, false ) );\n\t\t\tif ( ! $is_future_dated ) {\n\t\t\t\treturn new WP_Error( 'not_future_date' ); // Only future dates are allowed.\n\t\t\t}\n\n\t\t\tif ( ! $this->is_theme_active() && ( 'future' === $args['status'] || $is_future_dated ) ) {\n\t\t\t\treturn new WP_Error( 'cannot_schedule_theme_switches' ); // This should be allowed in the future, when theme is a regular setting.\n\t\t\t}\n\t\t\t$will_remain_auto_draft = ( ! $args['status'] && ( ! $changeset_post_id || 'auto-draft' === get_post_status( $changeset_post_id ) ) );\n\t\t\tif ( $will_remain_auto_draft ) {\n\t\t\t\treturn new WP_Error( 'cannot_supply_date_for_auto_draft_changeset' );\n\t\t\t}\n\t\t} elseif ( $changeset_post_id && 'future' === $args['status'] ) {\n\n\t\t\t// Fail if the new status is future but the existing post's date is not in the future.\n\t\t\t$changeset_post = get_post( $changeset_post_id );\n\t\t\tif ( mysql2date( 'U', $changeset_post->post_date_gmt, false ) <= mysql2date( 'U', $now, false ) ) {\n\t\t\t\treturn new WP_Error( 'not_future_date' );\n\t\t\t}\n\t\t}\n\n\t\t// The request was made via wp.customize.previewer.save().\n\t\t$update_transactionally = (bool) $args['status'];\n\t\t$allow_revision = (bool) $args['status'];\n\n\t\t// Amend post values with any supplied data.\n\t\tforeach ( $args['data'] as $setting_id => $setting_params ) {\n\t\t\tif ( array_key_exists( 'value', $setting_params ) ) {\n\t\t\t\t$this->set_post_value( $setting_id, $setting_params['value'] ); // Add to post values so that they can be validated and sanitized.\n\t\t\t}\n\t\t}\n\n\t\t// Note that in addition to post data, this will include any stashed theme mods.\n\t\t$post_values = $this->unsanitized_post_values( array(\n\t\t\t'exclude_changeset' => true,\n\t\t\t'exclude_post_data' => false,\n\t\t) );\n\t\t$this->add_dynamic_settings( array_keys( $post_values ) ); // Ensure settings get created even if they lack an input value.\n\n\t\t/*\n\t\t * Get list of IDs for settings that have values different from what is currently\n\t\t * saved in the changeset. By skipping any values that are already the same, the\n\t\t * subset of changed settings can be passed into validate_setting_values to prevent\n\t\t * an underprivileged modifying a single setting for which they have the capability\n\t\t * from being blocked from saving. This also prevents a user from touching of the\n\t\t * previous saved settings and overriding the associated user_id if they made no change.\n\t\t */\n\t\t$changed_setting_ids = array();\n\t\tforeach ( $post_values as $setting_id => $setting_value ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\n\t\t\tif ( $setting && 'theme_mod' === $setting->type ) {\n\t\t\t\t$prefixed_setting_id = $this->get_stylesheet() . '::' . $setting->id;\n\t\t\t} else {\n\t\t\t\t$prefixed_setting_id = $setting_id;\n\t\t\t}\n\n\t\t\t$is_value_changed = (\n\t\t\t\t! isset( $existing_changeset_data[ $prefixed_setting_id ] )\n\t\t\t\t||\n\t\t\t\t! array_key_exists( 'value', $existing_changeset_data[ $prefixed_setting_id ] )\n\t\t\t\t||\n\t\t\t\t$existing_changeset_data[ $prefixed_setting_id ]['value'] !== $setting_value\n\t\t\t);\n\t\t\tif ( $is_value_changed ) {\n\t\t\t\t$changed_setting_ids[] = $setting_id;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fires before save validation happens.\n\t\t *\n\t\t * Plugins can add just-in-time {@see 'customize_validate_{$this->ID}'} filters\n\t\t * at this point to catch any settings registered after `customize_register`.\n\t\t * The dynamic portion of the hook name, `$this->ID` refers to the setting ID.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param WP_Customize_Manager $this WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_save_validation_before', $this );\n\n\t\t// Validate settings.\n\t\t$validated_values = array_merge(\n\t\t\tarray_fill_keys( array_keys( $args['data'] ), null ), // Make sure existence/capability checks are done on value-less setting updates.\n\t\t\t$post_values\n\t\t);\n\t\t$setting_validities = $this->validate_setting_values( $validated_values, array(\n\t\t\t'validate_capability' => true,\n\t\t\t'validate_existence' => true,\n\t\t) );\n\t\t$invalid_setting_count = count( array_filter( $setting_validities, 'is_wp_error' ) );\n\n\t\t/*\n\t\t * Short-circuit if there are invalid settings the update is transactional.\n\t\t * A changeset update is transactional when a status is supplied in the request.\n\t\t */\n\t\tif ( $update_transactionally && $invalid_setting_count > 0 ) {\n\t\t\t$response = array(\n\t\t\t\t'setting_validities' => $setting_validities,\n\t\t\t\t'message' => sprintf( _n( 'There is %s invalid setting.', 'There are %s invalid settings.', $invalid_setting_count ), number_format_i18n( $invalid_setting_count ) ),\n\t\t\t);\n\t\t\treturn new WP_Error( 'transaction_fail', '', $response );\n\t\t}\n\n\t\t// Obtain/merge data for changeset.\n\t\t$original_changeset_data = $this->get_changeset_post_data( $changeset_post_id );\n\t\t$data = $original_changeset_data;\n\t\tif ( is_wp_error( $data ) ) {\n\t\t\t$data = array();\n\t\t}\n\n\t\t// Ensure that all post values are included in the changeset data.\n\t\tforeach ( $post_values as $setting_id => $post_value ) {\n\t\t\tif ( ! isset( $args['data'][ $setting_id ] ) ) {\n\t\t\t\t$args['data'][ $setting_id ] = array();\n\t\t\t}\n\t\t\tif ( ! isset( $args['data'][ $setting_id ]['value'] ) ) {\n\t\t\t\t$args['data'][ $setting_id ]['value'] = $post_value;\n\t\t\t}\n\t\t}\n\n\t\tforeach ( $args['data'] as $setting_id => $setting_params ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( ! $setting || ! $setting->check_capabilities() ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Skip updating changeset for invalid setting values.\n\t\t\tif ( isset( $setting_validities[ $setting_id ] ) && is_wp_error( $setting_validities[ $setting_id ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$changeset_setting_id = $setting_id;\n\t\t\tif ( 'theme_mod' === $setting->type ) {\n\t\t\t\t$changeset_setting_id = sprintf( '%s::%s', $this->get_stylesheet(), $setting_id );\n\t\t\t}\n\n\t\t\tif ( null === $setting_params ) {\n\t\t\t\t// Remove setting from changeset entirely.\n\t\t\t\tunset( $data[ $changeset_setting_id ] );\n\t\t\t} else {\n\n\t\t\t\tif ( ! isset( $data[ $changeset_setting_id ] ) ) {\n\t\t\t\t\t$data[ $changeset_setting_id ] = array();\n\t\t\t\t}\n\n\t\t\t\t// Merge any additional setting params that have been supplied with the existing params.\n\t\t\t\t$merged_setting_params = array_merge( $data[ $changeset_setting_id ], $setting_params );\n\n\t\t\t\t// Skip updating setting params if unchanged (ensuring the user_id is not overwritten).\n\t\t\t\tif ( $data[ $changeset_setting_id ] === $merged_setting_params ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$data[ $changeset_setting_id ] = array_merge(\n\t\t\t\t\t$merged_setting_params,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'type' => $setting->type,\n\t\t\t\t\t\t'user_id' => $args['user_id'],\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t// Clear starter_content flag in data if changeset is not explicitly being updated for starter content.\n\t\t\t\tif ( empty( $args['starter_content'] ) ) {\n\t\t\t\t\tunset( $data[ $changeset_setting_id ]['starter_content'] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$filter_context = array(\n\t\t\t'uuid' => $this->changeset_uuid(),\n\t\t\t'title' => $args['title'],\n\t\t\t'status' => $args['status'],\n\t\t\t'date_gmt' => $args['date_gmt'],\n\t\t\t'post_id' => $changeset_post_id,\n\t\t\t'previous_data' => is_wp_error( $original_changeset_data ) ? array() : $original_changeset_data,\n\t\t\t'manager' => $this,\n\t\t);\n\n\t\t/**\n\t\t * Filters the settings' data that will be persisted into the changeset.\n\t\t *\n\t\t * Plugins may amend additional data (such as additional meta for settings) into the changeset with this filter.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param array $data Updated changeset data, mapping setting IDs to arrays containing a $value item and optionally other metadata.\n\t\t * @param array $context {\n\t\t *     Filter context.\n\t\t *\n\t\t *     @type string               $uuid          Changeset UUID.\n\t\t *     @type string               $title         Requested title for the changeset post.\n\t\t *     @type string               $status        Requested status for the changeset post.\n\t\t *     @type string               $date_gmt      Requested date for the changeset post in MySQL format and GMT timezone.\n\t\t *     @type int|false            $post_id       Post ID for the changeset, or false if it doesn't exist yet.\n\t\t *     @type array                $previous_data Previous data contained in the changeset.\n\t\t *     @type WP_Customize_Manager $manager       Manager instance.\n\t\t * }\n\t\t */\n\t\t$data = apply_filters( 'customize_changeset_save_data', $data, $filter_context );\n\n\t\t// Switch theme if publishing changes now.\n\t\tif ( 'publish' === $args['status'] && ! $this->is_theme_active() ) {\n\t\t\t// Temporarily stop previewing the theme to allow switch_themes() to operate properly.\n\t\t\t$this->stop_previewing_theme();\n\t\t\tswitch_theme( $this->get_stylesheet() );\n\t\t\tupdate_option( 'theme_switched_via_customizer', true );\n\t\t\t$this->start_previewing_theme();\n\t\t}\n\n\t\t// Gather the data for wp_insert_post()/wp_update_post().\n\t\t$json_options = 0;\n\t\tif ( defined( 'JSON_UNESCAPED_SLASHES' ) ) {\n\t\t\t$json_options |= JSON_UNESCAPED_SLASHES; // Introduced in PHP 5.4. This is only to improve readability as slashes needn't be escaped in storage.\n\t\t}\n\t\t$json_options |= JSON_PRETTY_PRINT; // Also introduced in PHP 5.4, but WP defines constant for back compat. See WP Trac #30139.\n\t\t$post_array = array(\n\t\t\t'post_content' => wp_json_encode( $data, $json_options ),\n\t\t);\n\t\tif ( $args['title'] ) {\n\t\t\t$post_array['post_title'] = $args['title'];\n\t\t}\n\t\tif ( $changeset_post_id ) {\n\t\t\t$post_array['ID'] = $changeset_post_id;\n\t\t} else {\n\t\t\t$post_array['post_type'] = 'customize_changeset';\n\t\t\t$post_array['post_name'] = $this->changeset_uuid();\n\t\t\t$post_array['post_status'] = 'auto-draft';\n\t\t}\n\t\tif ( $args['status'] ) {\n\t\t\t$post_array['post_status'] = $args['status'];\n\t\t}\n\n\t\t// Reset post date to now if we are publishing, otherwise pass post_date_gmt and translate for post_date.\n\t\tif ( 'publish' === $args['status'] ) {\n\t\t\t$post_array['post_date_gmt'] = '0000-00-00 00:00:00';\n\t\t\t$post_array['post_date'] = '0000-00-00 00:00:00';\n\t\t} elseif ( $args['date_gmt'] ) {\n\t\t\t$post_array['post_date_gmt'] = $args['date_gmt'];\n\t\t\t$post_array['post_date'] = get_date_from_gmt( $args['date_gmt'] );\n\t\t} elseif ( $changeset_post_id && 'auto-draft' === get_post_status( $changeset_post_id ) ) {\n\t\t\t/*\n\t\t\t * Keep bumping the date for the auto-draft whenever it is modified;\n\t\t\t * this extends its life, preserving it from garbage-collection via\n\t\t\t * wp_delete_auto_drafts().\n\t\t\t */\n\t\t\t$post_array['post_date'] = current_time( 'mysql' );\n\t\t\t$post_array['post_date_gmt'] = '';\n\t\t}\n\n\t\t$this->store_changeset_revision = $allow_revision;\n\t\tadd_filter( 'wp_save_post_revision_post_has_changed', array( $this, '_filter_revision_post_has_changed' ), 5, 3 );\n\n\t\t// Update the changeset post. The publish_customize_changeset action will cause the settings in the changeset to be saved via WP_Customize_Setting::save().\n\t\t$has_kses = ( false !== has_filter( 'content_save_pre', 'wp_filter_post_kses' ) );\n\t\tif ( $has_kses ) {\n\t\t\tkses_remove_filters(); // Prevent KSES from corrupting JSON in post_content.\n\t\t}\n\n\t\t// Note that updating a post with publish status will trigger WP_Customize_Manager::publish_changeset_values().\n\t\tif ( $changeset_post_id ) {\n\t\t\t$post_array['edit_date'] = true; // Prevent date clearing.\n\t\t\t$r = wp_update_post( wp_slash( $post_array ), true );\n\t\t} else {\n\t\t\t$r = wp_insert_post( wp_slash( $post_array ), true );\n\t\t\tif ( ! is_wp_error( $r ) ) {\n\t\t\t\t$this->_changeset_post_id = $r; // Update cached post ID for the loaded changeset.\n\t\t\t}\n\t\t}\n\t\tif ( $has_kses ) {\n\t\t\tkses_init_filters();\n\t\t}\n\t\t$this->_changeset_data = null; // Reset so WP_Customize_Manager::changeset_data() will re-populate with updated contents.\n\n\t\tremove_filter( 'wp_save_post_revision_post_has_changed', array( $this, '_filter_revision_post_has_changed' ) );\n\n\t\t$response = array(\n\t\t\t'setting_validities' => $setting_validities,\n\t\t);\n\n\t\tif ( is_wp_error( $r ) ) {\n\t\t\t$response['changeset_post_save_failure'] = $r->get_error_code();\n\t\t\treturn new WP_Error( 'changeset_post_save_failure', '', $response );\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Whether a changeset revision should be made.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @var bool\n\t */\n\tprotected $store_changeset_revision;\n\n\t/**\n\t * Filters whether a changeset has changed to create a new revision.\n\t *\n\t * Note that this will not be called while a changeset post remains in auto-draft status.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t *\n\t * @param bool    $post_has_changed Whether the post has changed.\n\t * @param WP_Post $last_revision    The last revision post object.\n\t * @param WP_Post $post             The post object.\n\t *\n\t * @return bool Whether a revision should be made.\n\t */\n\tpublic function _filter_revision_post_has_changed( $post_has_changed, $last_revision, $post ) {\n\t\tunset( $last_revision );\n\t\tif ( 'customize_changeset' === $post->post_type ) {\n\t\t\t$post_has_changed = $this->store_changeset_revision;\n\t\t}\n\t\treturn $post_has_changed;\n\t}\n\n\t/**\n\t * Publish changeset values.\n\t *\n\t * This will the values contained in a changeset, even changesets that do not\n\t * correspond to current manager instance. This is called by\n\t * `_wp_customize_publish_changeset()` when a customize_changeset post is\n\t * transitioned to the `publish` status. As such, this method should not be\n\t * called directly and instead `wp_publish_post()` should be used.\n\t *\n\t * Please note that if the settings in the changeset are for a non-activated\n\t * theme, the theme must first be switched to (via `switch_theme()`) before\n\t * invoking this method.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t * @see _wp_customize_publish_changeset()\n\t *\n\t * @param int $changeset_post_id ID for customize_changeset post. Defaults to the changeset for the current manager instance.\n\t * @return true|WP_Error True or error info.\n\t */\n\tpublic function _publish_changeset_values( $changeset_post_id ) {\n\t\t$publishing_changeset_data = $this->get_changeset_post_data( $changeset_post_id );\n\t\tif ( is_wp_error( $publishing_changeset_data ) ) {\n\t\t\treturn $publishing_changeset_data;\n\t\t}\n\n\t\t$changeset_post = get_post( $changeset_post_id );\n\n\t\t/*\n\t\t * Temporarily override the changeset context so that it will be read\n\t\t * in calls to unsanitized_post_values() and so that it will be available\n\t\t * on the $wp_customize object passed to hooks during the save logic.\n\t\t */\n\t\t$previous_changeset_post_id = $this->_changeset_post_id;\n\t\t$this->_changeset_post_id   = $changeset_post_id;\n\t\t$previous_changeset_uuid    = $this->_changeset_uuid;\n\t\t$this->_changeset_uuid      = $changeset_post->post_name;\n\t\t$previous_changeset_data    = $this->_changeset_data;\n\t\t$this->_changeset_data      = $publishing_changeset_data;\n\n\t\t// Parse changeset data to identify theme mod settings and user IDs associated with settings to be saved.\n\t\t$setting_user_ids = array();\n\t\t$theme_mod_settings = array();\n\t\t$namespace_pattern = '/^(?P<stylesheet>.+?)::(?P<setting_id>.+)$/';\n\t\t$matches = array();\n\t\tforeach ( $this->_changeset_data as $raw_setting_id => $setting_params ) {\n\t\t\t$actual_setting_id = null;\n\t\t\t$is_theme_mod_setting = (\n\t\t\t\tisset( $setting_params['value'] )\n\t\t\t\t&&\n\t\t\t\tisset( $setting_params['type'] )\n\t\t\t\t&&\n\t\t\t\t'theme_mod' === $setting_params['type']\n\t\t\t\t&&\n\t\t\t\tpreg_match( $namespace_pattern, $raw_setting_id, $matches )\n\t\t\t);\n\t\t\tif ( $is_theme_mod_setting ) {\n\t\t\t\tif ( ! isset( $theme_mod_settings[ $matches['stylesheet'] ] ) ) {\n\t\t\t\t\t$theme_mod_settings[ $matches['stylesheet'] ] = array();\n\t\t\t\t}\n\t\t\t\t$theme_mod_settings[ $matches['stylesheet'] ][ $matches['setting_id'] ] = $setting_params;\n\n\t\t\t\tif ( $this->get_stylesheet() === $matches['stylesheet'] ) {\n\t\t\t\t\t$actual_setting_id = $matches['setting_id'];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$actual_setting_id = $raw_setting_id;\n\t\t\t}\n\n\t\t\t// Keep track of the user IDs for settings actually for this theme.\n\t\t\tif ( $actual_setting_id && isset( $setting_params['user_id'] ) ) {\n\t\t\t\t$setting_user_ids[ $actual_setting_id ] = $setting_params['user_id'];\n\t\t\t}\n\t\t}\n\n\t\t$changeset_setting_values = $this->unsanitized_post_values( array(\n\t\t\t'exclude_post_data' => true,\n\t\t\t'exclude_changeset' => false,\n\t\t) );\n\t\t$changeset_setting_ids = array_keys( $changeset_setting_values );\n\t\t$this->add_dynamic_settings( $changeset_setting_ids );\n\n\t\t/**\n\t\t * Fires once the theme has switched in the Customizer, but before settings\n\t\t * have been saved.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param WP_Customize_Manager $manager WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_save', $this );\n\n\t\t/*\n\t\t * Ensure that all settings will allow themselves to be saved. Note that\n\t\t * this is safe because the setting would have checked the capability\n\t\t * when the setting value was written into the changeset. So this is why\n\t\t * an additional capability check is not required here.\n\t\t */\n\t\t$original_setting_capabilities = array();\n\t\tforeach ( $changeset_setting_ids as $setting_id ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( $setting && ! isset( $setting_user_ids[ $setting_id ] ) ) {\n\t\t\t\t$original_setting_capabilities[ $setting->id ] = $setting->capability;\n\t\t\t\t$setting->capability = 'exist';\n\t\t\t}\n\t\t}\n\n\t\t$original_user_id = get_current_user_id();\n\t\tforeach ( $changeset_setting_ids as $setting_id ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( $setting ) {\n\t\t\t\t/*\n\t\t\t\t * Set the current user to match the user who saved the value into\n\t\t\t\t * the changeset so that any filters that apply during the save\n\t\t\t\t * process will respect the original user's capabilities. This\n\t\t\t\t * will ensure, for example, that KSES won't strip unsafe HTML\n\t\t\t\t * when a scheduled changeset publishes via WP Cron.\n\t\t\t\t */\n\t\t\t\tif ( isset( $setting_user_ids[ $setting_id ] ) ) {\n\t\t\t\t\twp_set_current_user( $setting_user_ids[ $setting_id ] );\n\t\t\t\t} else {\n\t\t\t\t\twp_set_current_user( $original_user_id );\n\t\t\t\t}\n\n\t\t\t\t$setting->save();\n\t\t\t}\n\t\t}\n\t\twp_set_current_user( $original_user_id );\n\n\t\t// Update the stashed theme mod settings, removing the active theme's stashed settings, if activated.\n\t\tif ( did_action( 'switch_theme' ) ) {\n\t\t\t$other_theme_mod_settings = $theme_mod_settings;\n\t\t\tunset( $other_theme_mod_settings[ $this->get_stylesheet() ] );\n\t\t\t$this->update_stashed_theme_mod_settings( $other_theme_mod_settings );\n\t\t}\n\n\t\t/**\n\t\t * Fires after Customize settings have been saved.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param WP_Customize_Manager $manager WP_Customize_Manager instance.\n\t\t */\n\t\tdo_action( 'customize_save_after', $this );\n\n\t\t// Restore original capabilities.\n\t\tforeach ( $original_setting_capabilities as $setting_id => $capability ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( $setting ) {\n\t\t\t\t$setting->capability = $capability;\n\t\t\t}\n\t\t}\n\n\t\t// Restore original changeset data.\n\t\t$this->_changeset_data    = $previous_changeset_data;\n\t\t$this->_changeset_post_id = $previous_changeset_post_id;\n\t\t$this->_changeset_uuid    = $previous_changeset_uuid;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Update stashed theme mod settings.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t *\n\t * @param array $inactive_theme_mod_settings Mapping of stylesheet to arrays of theme mod settings.\n\t * @return array|false Returns array of updated stashed theme mods or false if the update failed or there were no changes.\n\t */\n\tprotected function update_stashed_theme_mod_settings( $inactive_theme_mod_settings ) {\n\t\t$stashed_theme_mod_settings = get_option( 'customize_stashed_theme_mods' );\n\t\tif ( empty( $stashed_theme_mod_settings ) ) {\n\t\t\t$stashed_theme_mod_settings = array();\n\t\t}\n\n\t\t// Delete any stashed theme mods for the active theme since since they would have been loaded and saved upon activation.\n\t\tunset( $stashed_theme_mod_settings[ $this->get_stylesheet() ] );\n\n\t\t// Merge inactive theme mods with the stashed theme mod settings.\n\t\tforeach ( $inactive_theme_mod_settings as $stylesheet => $theme_mod_settings ) {\n\t\t\tif ( ! isset( $stashed_theme_mod_settings[ $stylesheet ] ) ) {\n\t\t\t\t$stashed_theme_mod_settings[ $stylesheet ] = array();\n\t\t\t}\n\n\t\t\t$stashed_theme_mod_settings[ $stylesheet ] = array_merge(\n\t\t\t\t$stashed_theme_mod_settings[ $stylesheet ],\n\t\t\t\t$theme_mod_settings\n\t\t\t);\n\t\t}\n\n\t\t$autoload = false;\n\t\t$result = update_option( 'customize_stashed_theme_mods', $stashed_theme_mod_settings, $autoload );\n\t\tif ( ! $result ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn $stashed_theme_mod_settings;\n\t}\n\n\t/**\n\t * Refresh nonces for the current preview.\n\t *\n\t * @since 4.2.0\n\t */\n\tpublic function refresh_nonces() {\n\t\tif ( ! $this->is_preview() ) {\n\t\t\twp_send_json_error( 'not_preview' );\n\t\t}\n\n\t\twp_send_json_success( $this->get_nonces() );\n\t}\n\n\t/**\n\t * Add a customize setting.\n\t *\n\t * @since 3.4.0\n\t * @since 4.5.0 Return added WP_Customize_Setting instance.\n\t * @access public\n\t *\n\t * @param WP_Customize_Setting|string $id   Customize Setting object, or ID.\n\t * @param array                       $args Setting arguments; passed to WP_Customize_Setting\n\t *                                          constructor.\n\t * @return WP_Customize_Setting             The instance of the setting that was added.\n\t */\n\tpublic function add_setting( $id, $args = array() ) {\n\t\tif ( $id instanceof WP_Customize_Setting ) {\n\t\t\t$setting = $id;\n\t\t} else {\n\t\t\t$class = 'WP_Customize_Setting';\n\n\t\t\t/** This filter is documented in wp-includes/class-wp-customize-manager.php */\n\t\t\t$args = apply_filters( 'customize_dynamic_setting_args', $args, $id );\n\n\t\t\t/** This filter is documented in wp-includes/class-wp-customize-manager.php */\n\t\t\t$class = apply_filters( 'customize_dynamic_setting_class', $class, $id, $args );\n\n\t\t\t$setting = new $class( $this, $id, $args );\n\t\t}\n\n\t\t$this->settings[ $setting->id ] = $setting;\n\t\treturn $setting;\n\t}\n\n\t/**\n\t * Register any dynamically-created settings, such as those from $_POST['customized']\n\t * that have no corresponding setting created.\n\t *\n\t * This is a mechanism to \"wake up\" settings that have been dynamically created\n\t * on the front end and have been sent to WordPress in `$_POST['customized']`. When WP\n\t * loads, the dynamically-created settings then will get created and previewed\n\t * even though they are not directly created statically with code.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $setting_ids The setting IDs to add.\n\t * @return array The WP_Customize_Setting objects added.\n\t */\n\tpublic function add_dynamic_settings( $setting_ids ) {\n\t\t$new_settings = array();\n\t\tforeach ( $setting_ids as $setting_id ) {\n\t\t\t// Skip settings already created\n\t\t\tif ( $this->get_setting( $setting_id ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$setting_args = false;\n\t\t\t$setting_class = 'WP_Customize_Setting';\n\n\t\t\t/**\n\t\t\t * Filters a dynamic setting's constructor args.\n\t\t\t *\n\t\t\t * For a dynamic setting to be registered, this filter must be employed\n\t\t\t * to override the default false value with an array of args to pass to\n\t\t\t * the WP_Customize_Setting constructor.\n\t\t\t *\n\t\t\t * @since 4.2.0\n\t\t\t *\n\t\t\t * @param false|array $setting_args The arguments to the WP_Customize_Setting constructor.\n\t\t\t * @param string      $setting_id   ID for dynamic setting, usually coming from `$_POST['customized']`.\n\t\t\t */\n\t\t\t$setting_args = apply_filters( 'customize_dynamic_setting_args', $setting_args, $setting_id );\n\t\t\tif ( false === $setting_args ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Allow non-statically created settings to be constructed with custom WP_Customize_Setting subclass.\n\t\t\t *\n\t\t\t * @since 4.2.0\n\t\t\t *\n\t\t\t * @param string $setting_class WP_Customize_Setting or a subclass.\n\t\t\t * @param string $setting_id    ID for dynamic setting, usually coming from `$_POST['customized']`.\n\t\t\t * @param array  $setting_args  WP_Customize_Setting or a subclass.\n\t\t\t */\n\t\t\t$setting_class = apply_filters( 'customize_dynamic_setting_class', $setting_class, $setting_id, $setting_args );\n\n\t\t\t$setting = new $setting_class( $this, $setting_id, $setting_args );\n\n\t\t\t$this->add_setting( $setting );\n\t\t\t$new_settings[] = $setting;\n\t\t}\n\t\treturn $new_settings;\n\t}\n\n\t/**\n\t * Retrieve a customize setting.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id Customize Setting ID.\n\t * @return WP_Customize_Setting|void The setting, if set.\n\t */\n\tpublic function get_setting( $id ) {\n\t\tif ( isset( $this->settings[ $id ] ) ) {\n\t\t\treturn $this->settings[ $id ];\n\t\t}\n\t}\n\n\t/**\n\t * Remove a customize setting.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id Customize Setting ID.\n\t */\n\tpublic function remove_setting( $id ) {\n\t\tunset( $this->settings[ $id ] );\n\t}\n\n\t/**\n\t * Add a customize panel.\n\t *\n\t * @since 4.0.0\n\t * @since 4.5.0 Return added WP_Customize_Panel instance.\n\t * @access public\n\t *\n\t * @param WP_Customize_Panel|string $id   Customize Panel object, or Panel ID.\n\t * @param array                     $args Optional. Panel arguments. Default empty array.\n\t *\n\t * @return WP_Customize_Panel             The instance of the panel that was added.\n\t */\n\tpublic function add_panel( $id, $args = array() ) {\n\t\tif ( $id instanceof WP_Customize_Panel ) {\n\t\t\t$panel = $id;\n\t\t} else {\n\t\t\t$panel = new WP_Customize_Panel( $this, $id, $args );\n\t\t}\n\n\t\t$this->panels[ $panel->id ] = $panel;\n\t\treturn $panel;\n\t}\n\n\t/**\n\t * Retrieve a customize panel.\n\t *\n\t * @since 4.0.0\n\t * @access public\n\t *\n\t * @param string $id Panel ID to get.\n\t * @return WP_Customize_Panel|void Requested panel instance, if set.\n\t */\n\tpublic function get_panel( $id ) {\n\t\tif ( isset( $this->panels[ $id ] ) ) {\n\t\t\treturn $this->panels[ $id ];\n\t\t}\n\t}\n\n\t/**\n\t * Remove a customize panel.\n\t *\n\t * @since 4.0.0\n\t * @access public\n\t *\n\t * @param string $id Panel ID to remove.\n\t */\n\tpublic function remove_panel( $id ) {\n\t\t// Removing core components this way is _doing_it_wrong().\n\t\tif ( in_array( $id, $this->components, true ) ) {\n\t\t\t/* translators: 1: panel id, 2: link to 'customize_loaded_components' filter reference */\n\t\t\t$message = sprintf( __( 'Removing %1$s manually will cause PHP warnings. Use the %2$s filter instead.' ),\n\t\t\t\t$id,\n\t\t\t\t'<a href=\"' . esc_url( 'https://developer.wordpress.org/reference/hooks/customize_loaded_components/' ) . '\"><code>customize_loaded_components</code></a>'\n\t\t\t);\n\n\t\t\t_doing_it_wrong( __METHOD__, $message, '4.5.0' );\n\t\t}\n\t\tunset( $this->panels[ $id ] );\n\t}\n\n\t/**\n\t * Register a customize panel type.\n\t *\n\t * Registered types are eligible to be rendered via JS and created dynamically.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @see WP_Customize_Panel\n\t *\n\t * @param string $panel Name of a custom panel which is a subclass of WP_Customize_Panel.\n\t */\n\tpublic function register_panel_type( $panel ) {\n\t\t$this->registered_panel_types[] = $panel;\n\t}\n\n\t/**\n\t * Render JS templates for all registered panel types.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t */\n\tpublic function render_panel_templates() {\n\t\tforeach ( $this->registered_panel_types as $panel_type ) {\n\t\t\t$panel = new $panel_type( $this, 'temp', array() );\n\t\t\t$panel->print_template();\n\t\t}\n\t}\n\n\t/**\n\t * Add a customize section.\n\t *\n\t * @since 3.4.0\n\t * @since 4.5.0 Return added WP_Customize_Section instance.\n\t * @access public\n\t *\n\t * @param WP_Customize_Section|string $id   Customize Section object, or Section ID.\n\t * @param array                       $args Section arguments.\n\t *\n\t * @return WP_Customize_Section             The instance of the section that was added.\n\t */\n\tpublic function add_section( $id, $args = array() ) {\n\t\tif ( $id instanceof WP_Customize_Section ) {\n\t\t\t$section = $id;\n\t\t} else {\n\t\t\t$section = new WP_Customize_Section( $this, $id, $args );\n\t\t}\n\n\t\t$this->sections[ $section->id ] = $section;\n\t\treturn $section;\n\t}\n\n\t/**\n\t * Retrieve a customize section.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id Section ID.\n\t * @return WP_Customize_Section|void The section, if set.\n\t */\n\tpublic function get_section( $id ) {\n\t\tif ( isset( $this->sections[ $id ] ) )\n\t\t\treturn $this->sections[ $id ];\n\t}\n\n\t/**\n\t * Remove a customize section.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id Section ID.\n\t */\n\tpublic function remove_section( $id ) {\n\t\tunset( $this->sections[ $id ] );\n\t}\n\n\t/**\n\t * Register a customize section type.\n\t *\n\t * Registered types are eligible to be rendered via JS and created dynamically.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @see WP_Customize_Section\n\t *\n\t * @param string $section Name of a custom section which is a subclass of WP_Customize_Section.\n\t */\n\tpublic function register_section_type( $section ) {\n\t\t$this->registered_section_types[] = $section;\n\t}\n\n\t/**\n\t * Render JS templates for all registered section types.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t */\n\tpublic function render_section_templates() {\n\t\tforeach ( $this->registered_section_types as $section_type ) {\n\t\t\t$section = new $section_type( $this, 'temp', array() );\n\t\t\t$section->print_template();\n\t\t}\n\t}\n\n\t/**\n\t * Add a customize control.\n\t *\n\t * @since 3.4.0\n\t * @since 4.5.0 Return added WP_Customize_Control instance.\n\t * @access public\n\t *\n\t * @param WP_Customize_Control|string $id   Customize Control object, or ID.\n\t * @param array                       $args Control arguments; passed to WP_Customize_Control\n\t *                                          constructor.\n\t * @return WP_Customize_Control             The instance of the control that was added.\n\t */\n\tpublic function add_control( $id, $args = array() ) {\n\t\tif ( $id instanceof WP_Customize_Control ) {\n\t\t\t$control = $id;\n\t\t} else {\n\t\t\t$control = new WP_Customize_Control( $this, $id, $args );\n\t\t}\n\n\t\t$this->controls[ $control->id ] = $control;\n\t\treturn $control;\n\t}\n\n\t/**\n\t * Retrieve a customize control.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id ID of the control.\n\t * @return WP_Customize_Control|void The control object, if set.\n\t */\n\tpublic function get_control( $id ) {\n\t\tif ( isset( $this->controls[ $id ] ) )\n\t\t\treturn $this->controls[ $id ];\n\t}\n\n\t/**\n\t * Remove a customize control.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id ID of the control.\n\t */\n\tpublic function remove_control( $id ) {\n\t\tunset( $this->controls[ $id ] );\n\t}\n\n\t/**\n\t * Register a customize control type.\n\t *\n\t * Registered types are eligible to be rendered via JS and created dynamically.\n\t *\n\t * @since 4.1.0\n\t * @access public\n\t *\n\t * @param string $control Name of a custom control which is a subclass of\n\t *                        WP_Customize_Control.\n\t */\n\tpublic function register_control_type( $control ) {\n\t\t$this->registered_control_types[] = $control;\n\t}\n\n\t/**\n\t * Render JS templates for all registered control types.\n\t *\n\t * @since 4.1.0\n\t * @access public\n\t */\n\tpublic function render_control_templates() {\n\t\tforeach ( $this->registered_control_types as $control_type ) {\n\t\t\t$control = new $control_type( $this, 'temp', array(\n\t\t\t\t'settings' => array(),\n\t\t\t) );\n\t\t\t$control->print_template();\n\t\t}\n\t\t?>\n\t\t<script type=\"text/html\" id=\"tmpl-customize-control-notifications\">\n\t\t\t<ul>\n\t\t\t\t<# _.each( data.notifications, function( notification ) { #>\n\t\t\t\t\t<li class=\"notice notice-{{ notification.type || 'info' }} {{ data.altNotice ? 'notice-alt' : '' }}\" data-code=\"{{ notification.code }}\" data-type=\"{{ notification.type }}\">{{{ notification.message || notification.code }}}</li>\n\t\t\t\t<# } ); #>\n\t\t\t</ul>\n\t\t</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Helper function to compare two objects by priority, ensuring sort stability via instance_number.\n\t *\n\t * @since 3.4.0\n\t * @deprecated 4.7.0 Use wp_list_sort()\n\t *\n\t * @param WP_Customize_Panel|WP_Customize_Section|WP_Customize_Control $a Object A.\n\t * @param WP_Customize_Panel|WP_Customize_Section|WP_Customize_Control $b Object B.\n\t * @return int\n\t */\n\tprotected function _cmp_priority( $a, $b ) {\n\t\t_deprecated_function( __METHOD__, '4.7.0', 'wp_list_sort' );\n\n\t\tif ( $a->priority === $b->priority ) {\n\t\t\treturn $a->instance_number - $b->instance_number;\n\t\t} else {\n\t\t\treturn $a->priority - $b->priority;\n\t\t}\n\t}\n\n\t/**\n\t * Prepare panels, sections, and controls.\n\t *\n\t * For each, check if required related components exist,\n\t * whether the user has the necessary capabilities,\n\t * and sort by priority.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function prepare_controls() {\n\n\t\t$controls = array();\n\t\t$this->controls = wp_list_sort( $this->controls, array(\n\t\t\t'priority'        => 'ASC',\n\t\t\t'instance_number' => 'ASC',\n\t\t), 'ASC', true );\n\n\t\tforeach ( $this->controls as $id => $control ) {\n\t\t\tif ( ! isset( $this->sections[ $control->section ] ) || ! $control->check_capabilities() ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$this->sections[ $control->section ]->controls[] = $control;\n\t\t\t$controls[ $id ] = $control;\n\t\t}\n\t\t$this->controls = $controls;\n\n\t\t// Prepare sections.\n\t\t$this->sections = wp_list_sort( $this->sections, array(\n\t\t\t'priority'        => 'ASC',\n\t\t\t'instance_number' => 'ASC',\n\t\t), 'ASC', true );\n\t\t$sections = array();\n\n\t\tforeach ( $this->sections as $section ) {\n\t\t\tif ( ! $section->check_capabilities() ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\t\t\t$section->controls = wp_list_sort( $section->controls, array(\n\t\t\t\t'priority'        => 'ASC',\n\t\t\t\t'instance_number' => 'ASC',\n\t\t\t) );\n\n\t\t\tif ( ! $section->panel ) {\n\t\t\t\t// Top-level section.\n\t\t\t\t$sections[ $section->id ] = $section;\n\t\t\t} else {\n\t\t\t\t// This section belongs to a panel.\n\t\t\t\tif ( isset( $this->panels [ $section->panel ] ) ) {\n\t\t\t\t\t$this->panels[ $section->panel ]->sections[ $section->id ] = $section;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->sections = $sections;\n\n\t\t// Prepare panels.\n\t\t$this->panels = wp_list_sort( $this->panels, array(\n\t\t\t'priority'        => 'ASC',\n\t\t\t'instance_number' => 'ASC',\n\t\t), 'ASC', true );\n\t\t$panels = array();\n\n\t\tforeach ( $this->panels as $panel ) {\n\t\t\tif ( ! $panel->check_capabilities() ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$panel->sections = wp_list_sort( $panel->sections, array(\n\t\t\t\t'priority'        => 'ASC',\n\t\t\t\t'instance_number' => 'ASC',\n\t\t\t), 'ASC', true );\n\t\t\t$panels[ $panel->id ] = $panel;\n\t\t}\n\t\t$this->panels = $panels;\n\n\t\t// Sort panels and top-level sections together.\n\t\t$this->containers = array_merge( $this->panels, $this->sections );\n\t\t$this->containers = wp_list_sort( $this->containers, array(\n\t\t\t'priority'        => 'ASC',\n\t\t\t'instance_number' => 'ASC',\n\t\t), 'ASC', true );\n\t}\n\n\t/**\n\t * Enqueue scripts for customize controls.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function enqueue_control_scripts() {\n\t\tforeach ( $this->controls as $control ) {\n\t\t\t$control->enqueue();\n\t\t}\n\t}\n\n\t/**\n\t * Determine whether the user agent is iOS.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @return bool Whether the user agent is iOS.\n\t */\n\tpublic function is_ios() {\n\t\treturn wp_is_mobile() && preg_match( '/iPad|iPod|iPhone/', $_SERVER['HTTP_USER_AGENT'] );\n\t}\n\n\t/**\n\t * Get the template string for the Customizer pane document title.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @return string The template string for the document title.\n\t */\n\tpublic function get_document_title_template() {\n\t\tif ( $this->is_theme_active() ) {\n\t\t\t/* translators: %s: document title from the preview */\n\t\t\t$document_title_tmpl = __( 'Customize: %s' );\n\t\t} else {\n\t\t\t/* translators: %s: document title from the preview */\n\t\t\t$document_title_tmpl = __( 'Live Preview: %s' );\n\t\t}\n\t\t$document_title_tmpl = html_entity_decode( $document_title_tmpl, ENT_QUOTES, 'UTF-8' ); // Because exported to JS and assigned to document.title.\n\t\treturn $document_title_tmpl;\n\t}\n\n\t/**\n\t * Set the initial URL to be previewed.\n\t *\n\t * URL is validated.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @param string $preview_url URL to be previewed.\n\t */\n\tpublic function set_preview_url( $preview_url ) {\n\t\t$preview_url = esc_url_raw( $preview_url );\n\t\t$this->preview_url = wp_validate_redirect( $preview_url, home_url( '/' ) );\n\t}\n\n\t/**\n\t * Get the initial URL to be previewed.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @return string URL being previewed.\n\t */\n\tpublic function get_preview_url() {\n\t\tif ( empty( $this->preview_url ) ) {\n\t\t\t$preview_url = home_url( '/' );\n\t\t} else {\n\t\t\t$preview_url = $this->preview_url;\n\t\t}\n\t\treturn $preview_url;\n\t}\n\n\t/**\n\t * Determines whether the admin and the frontend are on different domains.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return bool Whether cross-domain.\n\t */\n\tpublic function is_cross_domain() {\n\t\t$admin_origin = wp_parse_url( admin_url() );\n\t\t$home_origin = wp_parse_url( home_url() );\n\t\t$cross_domain = ( strtolower( $admin_origin['host'] ) !== strtolower( $home_origin['host'] ) );\n\t\treturn $cross_domain;\n\t}\n\n\t/**\n\t * Get URLs allowed to be previewed.\n\t *\n\t * If the front end and the admin are served from the same domain, load the\n\t * preview over ssl if the Customizer is being loaded over ssl. This avoids\n\t * insecure content warnings. This is not attempted if the admin and front end\n\t * are on different domains to avoid the case where the front end doesn't have\n\t * ssl certs. Domain mapping plugins can allow other urls in these conditions\n\t * using the customize_allowed_urls filter.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @returns array Allowed URLs.\n\t */\n\tpublic function get_allowed_urls() {\n\t\t$allowed_urls = array( home_url( '/' ) );\n\n\t\tif ( is_ssl() && ! $this->is_cross_domain() ) {\n\t\t\t$allowed_urls[] = home_url( '/', 'https' );\n\t\t}\n\n\t\t/**\n\t\t * Filters the list of URLs allowed to be clicked and followed in the Customizer preview.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param array $allowed_urls An array of allowed URLs.\n\t\t */\n\t\t$allowed_urls = array_unique( apply_filters( 'customize_allowed_urls', $allowed_urls ) );\n\n\t\treturn $allowed_urls;\n\t}\n\n\t/**\n\t * Get messenger channel.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return string Messenger channel.\n\t */\n\tpublic function get_messenger_channel() {\n\t\treturn $this->messenger_channel;\n\t}\n\n\t/**\n\t * Set URL to link the user to when closing the Customizer.\n\t *\n\t * URL is validated.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @param string $return_url URL for return link.\n\t */\n\tpublic function set_return_url( $return_url ) {\n\t\t$return_url = esc_url_raw( $return_url );\n\t\t$return_url = remove_query_arg( wp_removable_query_args(), $return_url );\n\t\t$return_url = wp_validate_redirect( $return_url );\n\t\t$this->return_url = $return_url;\n\t}\n\n\t/**\n\t * Get URL to link the user to when closing the Customizer.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @return string URL for link to close Customizer.\n\t */\n\tpublic function get_return_url() {\n\t\t$referer = wp_get_referer();\n\t\t$excluded_referer_basenames = array( 'customize.php', 'wp-login.php' );\n\n\t\tif ( $this->return_url ) {\n\t\t\t$return_url = $this->return_url;\n\t\t} else if ( $referer && ! in_array( basename( parse_url( $referer, PHP_URL_PATH ) ), $excluded_referer_basenames, true ) ) {\n\t\t\t$return_url = $referer;\n\t\t} else if ( $this->preview_url ) {\n\t\t\t$return_url = $this->preview_url;\n\t\t} else {\n\t\t\t$return_url = home_url( '/' );\n\t\t}\n\t\treturn $return_url;\n\t}\n\n\t/**\n\t * Set the autofocused constructs.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @param array $autofocus {\n\t *     Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.\n\t *\n\t *     @type string [$control]  ID for control to be autofocused.\n\t *     @type string [$section]  ID for section to be autofocused.\n\t *     @type string [$panel]    ID for panel to be autofocused.\n\t * }\n\t */\n\tpublic function set_autofocus( $autofocus ) {\n\t\t$this->autofocus = array_filter( wp_array_slice_assoc( $autofocus, array( 'panel', 'section', 'control' ) ), 'is_string' );\n\t}\n\n\t/**\n\t * Get the autofocused constructs.\n\t *\n\t * @since 4.4.0\n\t * @access public\n\t *\n\t * @return array {\n\t *     Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.\n\t *\n\t *     @type string [$control]  ID for control to be autofocused.\n\t *     @type string [$section]  ID for section to be autofocused.\n\t *     @type string [$panel]    ID for panel to be autofocused.\n\t * }\n\t */\n\tpublic function get_autofocus() {\n\t\treturn $this->autofocus;\n\t}\n\n\t/**\n\t * Get nonces for the Customizer.\n\t *\n\t * @since 4.5.0\n\t * @return array Nonces.\n\t */\n\tpublic function get_nonces() {\n\t\t$nonces = array(\n\t\t\t'save' => wp_create_nonce( 'save-customize_' . $this->get_stylesheet() ),\n\t\t\t'preview' => wp_create_nonce( 'preview-customize_' . $this->get_stylesheet() ),\n\t\t);\n\n\t\t/**\n\t\t * Filters nonces for Customizer.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param array                $nonces Array of refreshed nonces for save and\n\t\t *                                     preview actions.\n\t\t * @param WP_Customize_Manager $this   WP_Customize_Manager instance.\n\t\t */\n\t\t$nonces = apply_filters( 'customize_refresh_nonces', $nonces, $this );\n\n\t\treturn $nonces;\n\t}\n\n\t/**\n\t * Print JavaScript settings for parent window.\n\t *\n\t * @since 4.4.0\n\t */\n\tpublic function customize_pane_settings() {\n\n\t\t$login_url = add_query_arg( array(\n\t\t\t'interim-login' => 1,\n\t\t\t'customize-login' => 1,\n\t\t), wp_login_url() );\n\n\t\t// Ensure dirty flags are set for modified settings.\n\t\tforeach ( array_keys( $this->unsanitized_post_values() ) as $setting_id ) {\n\t\t\t$setting = $this->get_setting( $setting_id );\n\t\t\tif ( $setting ) {\n\t\t\t\t$setting->dirty = true;\n\t\t\t}\n\t\t}\n\n\t\t// Prepare Customizer settings to pass to JavaScript.\n\t\t$settings = array(\n\t\t\t'changeset' => array(\n\t\t\t\t'uuid' => $this->changeset_uuid(),\n\t\t\t\t'status' => $this->changeset_post_id() ? get_post_status( $this->changeset_post_id() ) : '',\n\t\t\t),\n\t\t\t'timeouts' => array(\n\t\t\t\t'windowRefresh' => 250,\n\t\t\t\t'changesetAutoSave' => AUTOSAVE_INTERVAL * 1000,\n\t\t\t\t'keepAliveCheck' => 2500,\n\t\t\t\t'reflowPaneContents' => 100,\n\t\t\t\t'previewFrameSensitivity' => 2000,\n\t\t\t),\n\t\t\t'theme'    => array(\n\t\t\t\t'stylesheet' => $this->get_stylesheet(),\n\t\t\t\t'active'     => $this->is_theme_active(),\n\t\t\t),\n\t\t\t'url'      => array(\n\t\t\t\t'preview'       => esc_url_raw( $this->get_preview_url() ),\n\t\t\t\t'parent'        => esc_url_raw( admin_url() ),\n\t\t\t\t'activated'     => esc_url_raw( home_url( '/' ) ),\n\t\t\t\t'ajax'          => esc_url_raw( admin_url( 'admin-ajax.php', 'relative' ) ),\n\t\t\t\t'allowed'       => array_map( 'esc_url_raw', $this->get_allowed_urls() ),\n\t\t\t\t'isCrossDomain' => $this->is_cross_domain(),\n\t\t\t\t'home'          => esc_url_raw( home_url( '/' ) ),\n\t\t\t\t'login'         => esc_url_raw( $login_url ),\n\t\t\t),\n\t\t\t'browser'  => array(\n\t\t\t\t'mobile' => wp_is_mobile(),\n\t\t\t\t'ios'    => $this->is_ios(),\n\t\t\t),\n\t\t\t'panels'   => array(),\n\t\t\t'sections' => array(),\n\t\t\t'nonce'    => $this->get_nonces(),\n\t\t\t'autofocus' => $this->get_autofocus(),\n\t\t\t'documentTitleTmpl' => $this->get_document_title_template(),\n\t\t\t'previewableDevices' => $this->get_previewable_devices(),\n\t\t);\n\n\t\t// Prepare Customize Section objects to pass to JavaScript.\n\t\tforeach ( $this->sections() as $id => $section ) {\n\t\t\tif ( $section->check_capabilities() ) {\n\t\t\t\t$settings['sections'][ $id ] = $section->json();\n\t\t\t}\n\t\t}\n\n\t\t// Prepare Customize Panel objects to pass to JavaScript.\n\t\tforeach ( $this->panels() as $panel_id => $panel ) {\n\t\t\tif ( $panel->check_capabilities() ) {\n\t\t\t\t$settings['panels'][ $panel_id ] = $panel->json();\n\t\t\t\tforeach ( $panel->sections as $section_id => $section ) {\n\t\t\t\t\tif ( $section->check_capabilities() ) {\n\t\t\t\t\t\t$settings['sections'][ $section_id ] = $section->json();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t?>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar _wpCustomizeSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\t_wpCustomizeSettings.controls = {};\n\t\t\t_wpCustomizeSettings.settings = {};\n\t\t\t<?php\n\n\t\t\t// Serialize settings one by one to improve memory usage.\n\t\t\techo \"(function ( s ){\\n\";\n\t\t\tforeach ( $this->settings() as $setting ) {\n\t\t\t\tif ( $setting->check_capabilities() ) {\n\t\t\t\t\tprintf(\n\t\t\t\t\t\t\"s[%s] = %s;\\n\",\n\t\t\t\t\t\twp_json_encode( $setting->id ),\n\t\t\t\t\t\twp_json_encode( $setting->json() )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\techo \"})( _wpCustomizeSettings.settings );\\n\";\n\n\t\t\t// Serialize controls one by one to improve memory usage.\n\t\t\techo \"(function ( c ){\\n\";\n\t\t\tforeach ( $this->controls() as $control ) {\n\t\t\t\tif ( $control->check_capabilities() ) {\n\t\t\t\t\tprintf(\n\t\t\t\t\t\t\"c[%s] = %s;\\n\",\n\t\t\t\t\t\twp_json_encode( $control->id ),\n\t\t\t\t\t\twp_json_encode( $control->json() )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\techo \"})( _wpCustomizeSettings.controls );\\n\";\n\t\t?>\n\t\t</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Returns a list of devices to allow previewing.\n\t *\n\t * @access public\n\t * @since 4.5.0\n\t *\n\t * @return array List of devices with labels and default setting.\n\t */\n\tpublic function get_previewable_devices() {\n\t\t$devices = array(\n\t\t\t'desktop' => array(\n\t\t\t\t'label' => __( 'Enter desktop preview mode' ),\n\t\t\t\t'default' => true,\n\t\t\t),\n\t\t\t'tablet' => array(\n\t\t\t\t'label' => __( 'Enter tablet preview mode' ),\n\t\t\t),\n\t\t\t'mobile' => array(\n\t\t\t\t'label' => __( 'Enter mobile preview mode' ),\n\t\t\t),\n\t\t);\n\n\t\t/**\n\t\t * Filters the available devices to allow previewing in the Customizer.\n\t\t *\n\t\t * @since 4.5.0\n\t\t *\n\t\t * @see WP_Customize_Manager::get_previewable_devices()\n\t\t *\n\t\t * @param array $devices List of devices with labels and default setting.\n\t\t */\n\t\t$devices = apply_filters( 'customize_previewable_devices', $devices );\n\n\t\treturn $devices;\n\t}\n\n\t/**\n\t * Register some default controls.\n\t *\n\t * @since 3.4.0\n\t */\n\tpublic function register_controls() {\n\n\t\t/* Panel, Section, and Control Types */\n\t\t$this->register_panel_type( 'WP_Customize_Panel' );\n\t\t$this->register_section_type( 'WP_Customize_Section' );\n\t\t$this->register_section_type( 'WP_Customize_Sidebar_Section' );\n\t\t$this->register_control_type( 'WP_Customize_Color_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Media_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Upload_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Image_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Background_Image_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Background_Position_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Cropped_Image_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Site_Icon_Control' );\n\t\t$this->register_control_type( 'WP_Customize_Theme_Control' );\n\n\t\t/* Themes */\n\n\t\t$this->add_section( new WP_Customize_Themes_Section( $this, 'themes', array(\n\t\t\t'title'      => $this->theme()->display( 'Name' ),\n\t\t\t'capability' => 'switch_themes',\n\t\t\t'priority'   => 0,\n\t\t) ) );\n\n\t\t// Themes Setting (unused - the theme is considerably more fundamental to the Customizer experience).\n\t\t$this->add_setting( new WP_Customize_Filter_Setting( $this, 'active_theme', array(\n\t\t\t'capability' => 'switch_themes',\n\t\t) ) );\n\n\t\trequire_once( ABSPATH . 'wp-admin/includes/theme.php' );\n\n\t\t// Theme Controls.\n\n\t\t// Add a control for the active/original theme.\n\t\tif ( ! $this->is_theme_active() ) {\n\t\t\t$themes = wp_prepare_themes_for_js( array( wp_get_theme( $this->original_stylesheet ) ) );\n\t\t\t$active_theme = current( $themes );\n\t\t\t$active_theme['isActiveTheme'] = true;\n\t\t\t$this->add_control( new WP_Customize_Theme_Control( $this, $active_theme['id'], array(\n\t\t\t\t'theme'    => $active_theme,\n\t\t\t\t'section'  => 'themes',\n\t\t\t\t'settings' => 'active_theme',\n\t\t\t) ) );\n\t\t}\n\n\t\t$themes = wp_prepare_themes_for_js();\n\t\tforeach ( $themes as $theme ) {\n\t\t\tif ( $theme['active'] || $theme['id'] === $this->original_stylesheet ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$theme_id = 'theme_' . $theme['id'];\n\t\t\t$theme['isActiveTheme'] = false;\n\t\t\t$this->add_control( new WP_Customize_Theme_Control( $this, $theme_id, array(\n\t\t\t\t'theme'    => $theme,\n\t\t\t\t'section'  => 'themes',\n\t\t\t\t'settings' => 'active_theme',\n\t\t\t) ) );\n\t\t}\n\n\t\t/* Site Identity */\n\n\t\t$this->add_section( 'title_tagline', array(\n\t\t\t'title'    => __( 'Site Identity' ),\n\t\t\t'priority' => 20,\n\t\t) );\n\n\t\t$this->add_setting( 'blogname', array(\n\t\t\t'default'    => get_option( 'blogname' ),\n\t\t\t'type'       => 'option',\n\t\t\t'capability' => 'manage_options',\n\t\t) );\n\n\t\t$this->add_control( 'blogname', array(\n\t\t\t'label'      => __( 'Site Title' ),\n\t\t\t'section'    => 'title_tagline',\n\t\t) );\n\n\t\t$this->add_setting( 'blogdescription', array(\n\t\t\t'default'    => get_option( 'blogdescription' ),\n\t\t\t'type'       => 'option',\n\t\t\t'capability' => 'manage_options',\n\t\t) );\n\n\t\t$this->add_control( 'blogdescription', array(\n\t\t\t'label'      => __( 'Tagline' ),\n\t\t\t'section'    => 'title_tagline',\n\t\t) );\n\n\t\t// Add a setting to hide header text if the theme doesn't support custom headers.\n\t\tif ( ! current_theme_supports( 'custom-header', 'header-text' ) ) {\n\t\t\t$this->add_setting( 'header_text', array(\n\t\t\t\t'theme_supports'    => array( 'custom-logo', 'header-text' ),\n\t\t\t\t'default'           => 1,\n\t\t\t\t'sanitize_callback' => 'absint',\n\t\t\t) );\n\n\t\t\t$this->add_control( 'header_text', array(\n\t\t\t\t'label'    => __( 'Display Site Title and Tagline' ),\n\t\t\t\t'section'  => 'title_tagline',\n\t\t\t\t'settings' => 'header_text',\n\t\t\t\t'type'     => 'checkbox',\n\t\t\t) );\n\t\t}\n\n\t\t$this->add_setting( 'site_icon', array(\n\t\t\t'type'       => 'option',\n\t\t\t'capability' => 'manage_options',\n\t\t\t'transport'  => 'postMessage', // Previewed with JS in the Customizer controls window.\n\t\t) );\n\n\t\t$this->add_control( new WP_Customize_Site_Icon_Control( $this, 'site_icon', array(\n\t\t\t'label'       => __( 'Site Icon' ),\n\t\t\t'description' => sprintf(\n\t\t\t\t/* translators: %s: site icon size in pixels */\n\t\t\t\t__( 'The Site Icon is used as a browser and app icon for your site. Icons must be square, and at least %s pixels wide and tall.' ),\n\t\t\t\t'<strong>512</strong>'\n\t\t\t),\n\t\t\t'section'     => 'title_tagline',\n\t\t\t'priority'    => 60,\n\t\t\t'height'      => 512,\n\t\t\t'width'       => 512,\n\t\t) ) );\n\n\t\t$this->add_setting( 'custom_logo', array(\n\t\t\t'theme_supports' => array( 'custom-logo' ),\n\t\t\t'transport'      => 'postMessage',\n\t\t) );\n\n\t\t$custom_logo_args = get_theme_support( 'custom-logo' );\n\t\t$this->add_control( new WP_Customize_Cropped_Image_Control( $this, 'custom_logo', array(\n\t\t\t'label'         => __( 'Logo' ),\n\t\t\t'section'       => 'title_tagline',\n\t\t\t'priority'      => 8,\n\t\t\t'height'        => $custom_logo_args[0]['height'],\n\t\t\t'width'         => $custom_logo_args[0]['width'],\n\t\t\t'flex_height'   => $custom_logo_args[0]['flex-height'],\n\t\t\t'flex_width'    => $custom_logo_args[0]['flex-width'],\n\t\t\t'button_labels' => array(\n\t\t\t\t'select'       => __( 'Select logo' ),\n\t\t\t\t'change'       => __( 'Change logo' ),\n\t\t\t\t'remove'       => __( 'Remove' ),\n\t\t\t\t'default'      => __( 'Default' ),\n\t\t\t\t'placeholder'  => __( 'No logo selected' ),\n\t\t\t\t'frame_title'  => __( 'Select logo' ),\n\t\t\t\t'frame_button' => __( 'Choose logo' ),\n\t\t\t),\n\t\t) ) );\n\n\t\t$this->selective_refresh->add_partial( 'custom_logo', array(\n\t\t\t'settings'            => array( 'custom_logo' ),\n\t\t\t'selector'            => '.custom-logo-link',\n\t\t\t'render_callback'     => array( $this, '_render_custom_logo_partial' ),\n\t\t\t'container_inclusive' => true,\n\t\t) );\n\n\t\t/* Colors */\n\n\t\t$this->add_section( 'colors', array(\n\t\t\t'title'          => __( 'Colors' ),\n\t\t\t'priority'       => 40,\n\t\t) );\n\n\t\t$this->add_setting( 'header_textcolor', array(\n\t\t\t'theme_supports' => array( 'custom-header', 'header-text' ),\n\t\t\t'default'        => get_theme_support( 'custom-header', 'default-text-color' ),\n\n\t\t\t'sanitize_callback'    => array( $this, '_sanitize_header_textcolor' ),\n\t\t\t'sanitize_js_callback' => 'maybe_hash_hex_color',\n\t\t) );\n\n\t\t// Input type: checkbox\n\t\t// With custom value\n\t\t$this->add_control( 'display_header_text', array(\n\t\t\t'settings' => 'header_textcolor',\n\t\t\t'label'    => __( 'Display Site Title and Tagline' ),\n\t\t\t'section'  => 'title_tagline',\n\t\t\t'type'     => 'checkbox',\n\t\t\t'priority' => 40,\n\t\t) );\n\n\t\t$this->add_control( new WP_Customize_Color_Control( $this, 'header_textcolor', array(\n\t\t\t'label'   => __( 'Header Text Color' ),\n\t\t\t'section' => 'colors',\n\t\t) ) );\n\n\t\t// Input type: Color\n\t\t// With sanitize_callback\n\t\t$this->add_setting( 'background_color', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-color' ),\n\t\t\t'theme_supports' => 'custom-background',\n\n\t\t\t'sanitize_callback'    => 'sanitize_hex_color_no_hash',\n\t\t\t'sanitize_js_callback' => 'maybe_hash_hex_color',\n\t\t) );\n\n\t\t$this->add_control( new WP_Customize_Color_Control( $this, 'background_color', array(\n\t\t\t'label'   => __( 'Background Color' ),\n\t\t\t'section' => 'colors',\n\t\t) ) );\n\n\t\t/* Custom Header */\n\n\t\tif ( current_theme_supports( 'custom-header', 'video' ) ) {\n\t\t\t$title = __( 'Header Media' );\n\t\t\t$description = '<p>' . __( 'If you add a video, the image will be used as a fallback while the video loads.' ) . '</p>';\n\n\t\t\t// @todo Customizer sections should support having notifications just like controls do. See <https://core.trac.wordpress.org/ticket/38794>.\n\t\t\t$description .= '<div class=\"customize-control-notifications-container header-video-not-currently-previewable\" style=\"display: none\"><ul>';\n\t\t\t$description .= '<li class=\"notice notice-info\">' . __( 'This theme doesn\\'t support video headers on this page. Navigate to the front page or another page that supports video headers.' ) . '</li>';\n\t\t\t$description .= '</ul></div>';\n\t\t\t$width = absint( get_theme_support( 'custom-header', 'width' ) );\n\t\t\t$height = absint( get_theme_support( 'custom-header', 'height' ) );\n\t\t\tif ( $width && $height ) {\n\t\t\t\t$control_description = sprintf(\n\t\t\t\t\t/* translators: 1: .mp4, 2: header size in pixels */\n\t\t\t\t\t__( 'Upload your video in %1$s format and minimize its file size for best results. Your theme recommends dimensions of %2$s pixels.' ),\n\t\t\t\t\t'<code>.mp4</code>',\n\t\t\t\t\tsprintf( '<strong>%s &times; %s</strong>', $width, $height )\n\t\t\t\t);\n\t\t\t} elseif ( $width ) {\n\t\t\t\t$control_description = sprintf(\n\t\t\t\t\t/* translators: 1: .mp4, 2: header width in pixels */\n\t\t\t\t\t__( 'Upload your video in %1$s format and minimize its file size for best results. Your theme recommends a width of %2$s pixels.' ),\n\t\t\t\t\t'<code>.mp4</code>',\n\t\t\t\t\tsprintf( '<strong>%s</strong>', $width )\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$control_description = sprintf(\n\t\t\t\t\t/* translators: 1: .mp4, 2: header height in pixels */\n\t\t\t\t\t__( 'Upload your video in %1$s format and minimize its file size for best results. Your theme recommends a height of %2$s pixels.' ),\n\t\t\t\t\t'<code>.mp4</code>',\n\t\t\t\t\tsprintf( '<strong>%s</strong>', $height )\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t$title = __( 'Header Image' );\n\t\t\t$description = '';\n\t\t\t$control_description = '';\n\t\t}\n\n\t\t$this->add_section( 'header_image', array(\n\t\t\t'title'          => $title,\n\t\t\t'description'    => $description,\n\t\t\t'theme_supports' => 'custom-header',\n\t\t\t'priority'       => 60,\n\t\t) );\n\n\t\t$this->add_setting( 'header_video', array(\n\t\t\t'theme_supports'    => array( 'custom-header', 'video' ),\n\t\t\t'transport'         => 'postMessage',\n\t\t\t'sanitize_callback' => 'absint',\n\t\t\t'validate_callback' => array( $this, '_validate_header_video' ),\n\t\t) );\n\n\t\t$this->add_setting( 'external_header_video', array(\n\t\t\t'theme_supports'    => array( 'custom-header', 'video' ),\n\t\t\t'transport'         => 'postMessage',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_external_header_video' ),\n\t\t\t'validate_callback' => array( $this, '_validate_external_header_video' ),\n\t\t) );\n\n\t\t$this->add_setting( new WP_Customize_Filter_Setting( $this, 'header_image', array(\n\t\t\t'default'        => sprintf( get_theme_support( 'custom-header', 'default-image' ), get_template_directory_uri(), get_stylesheet_directory_uri() ),\n\t\t\t'theme_supports' => 'custom-header',\n\t\t) ) );\n\n\t\t$this->add_setting( new WP_Customize_Header_Image_Setting( $this, 'header_image_data', array(\n\t\t\t'theme_supports' => 'custom-header',\n\t\t) ) );\n\n\t\t/*\n\t\t * Switch image settings to postMessage when video support is enabled since\n\t\t * it entails that the_custom_header_markup() will be used, and thus selective\n\t\t * refresh can be utilized.\n\t\t */\n\t\tif ( current_theme_supports( 'custom-header', 'video' ) ) {\n\t\t\t$this->get_setting( 'header_image' )->transport = 'postMessage';\n\t\t\t$this->get_setting( 'header_image_data' )->transport = 'postMessage';\n\t\t}\n\n\t\t$this->add_control( new WP_Customize_Media_Control( $this, 'header_video', array(\n\t\t\t'theme_supports' => array( 'custom-header', 'video' ),\n\t\t\t'label'          => __( 'Header Video' ),\n\t\t\t'description'    => $control_description,\n\t\t\t'section'        => 'header_image',\n\t\t\t'mime_type'      => 'video',\n\t\t\t// @todo These button_labels can be removed once WP_Customize_Media_Control provides mime_type-specific labels automatically. See <https://core.trac.wordpress.org/ticket/38796>.\n\t\t\t'button_labels'  => array(\n\t\t\t\t'select'       => __( 'Select Video' ),\n\t\t\t\t'change'       => __( 'Change Video' ),\n\t\t\t\t'placeholder'  => __( 'No video selected' ),\n\t\t\t\t'frame_title'  => __( 'Select Video' ),\n\t\t\t\t'frame_button' => __( 'Choose Video' ),\n\t\t\t),\n\t\t\t'active_callback' => 'is_header_video_active',\n\t\t) ) );\n\n\t\t$this->add_control( 'external_header_video', array(\n\t\t\t'theme_supports' => array( 'custom-header', 'video' ),\n\t\t\t'type'           => 'url',\n\t\t\t'description'    => __( 'Or, enter a YouTube URL:' ),\n\t\t\t'section'        => 'header_image',\n\t\t\t'active_callback' => 'is_header_video_active',\n\t\t) );\n\n\t\t$this->add_control( new WP_Customize_Header_Image_Control( $this ) );\n\n\t\t$this->selective_refresh->add_partial( 'custom_header', array(\n\t\t\t'selector'            => '#wp-custom-header',\n\t\t\t'render_callback'     => 'the_custom_header_markup',\n\t\t\t'settings'            => array( 'header_video', 'external_header_video', 'header_image' ), // The image is used as a video fallback here.\n\t\t\t'container_inclusive' => true,\n\t\t) );\n\n\t\t/* Custom Background */\n\n\t\t$this->add_section( 'background_image', array(\n\t\t\t'title'          => __( 'Background Image' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'priority'       => 80,\n\t\t) );\n\n\t\t$this->add_setting( 'background_image', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-image' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) );\n\n\t\t$this->add_setting( new WP_Customize_Background_Image_Setting( $this, 'background_image_thumb', array(\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) ) );\n\n\t\t$this->add_control( new WP_Customize_Background_Image_Control( $this ) );\n\n\t\t$this->add_setting( 'background_preset', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-preset' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) );\n\n\t\t$this->add_control( 'background_preset', array(\n\t\t\t'label'      => _x( 'Preset', 'Background Preset' ),\n\t\t\t'section'    => 'background_image',\n\t\t\t'type'       => 'select',\n\t\t\t'choices'    => array(\n\t\t\t\t'default' => _x( 'Default', 'Default Preset' ),\n\t\t\t\t'fill'    => __( 'Fill Screen' ),\n\t\t\t\t'fit'     => __( 'Fit to Screen' ),\n\t\t\t\t'repeat'  => _x( 'Repeat', 'Repeat Image' ),\n\t\t\t\t'custom'  => _x( 'Custom', 'Custom Preset' ),\n\t\t\t),\n\t\t) );\n\n\t\t$this->add_setting( 'background_position_x', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-position-x' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) );\n\n\t\t$this->add_setting( 'background_position_y', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-position-y' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) );\n\n\t\t$this->add_control( new WP_Customize_Background_Position_Control( $this, 'background_position', array(\n\t\t\t'label'    => __( 'Image Position' ),\n\t\t\t'section'  => 'background_image',\n\t\t\t'settings' => array(\n\t\t\t\t'x' => 'background_position_x',\n\t\t\t\t'y' => 'background_position_y',\n\t\t\t),\n\t\t) ) );\n\n\t\t$this->add_setting( 'background_size', array(\n\t\t\t'default'        => get_theme_support( 'custom-background', 'default-size' ),\n\t\t\t'theme_supports' => 'custom-background',\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t) );\n\n\t\t$this->add_control( 'background_size', array(\n\t\t\t'label'      => __( 'Image Size' ),\n\t\t\t'section'    => 'background_image',\n\t\t\t'type'       => 'select',\n\t\t\t'choices'    => array(\n\t\t\t\t'auto'    => __( 'Original' ),\n\t\t\t\t'contain' => __( 'Fit to Screen' ),\n\t\t\t\t'cover'   => __( 'Fill Screen' ),\n\t\t\t),\n\t\t) );\n\n\t\t$this->add_setting( 'background_repeat', array(\n\t\t\t'default'           => get_theme_support( 'custom-background', 'default-repeat' ),\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t\t'theme_supports'    => 'custom-background',\n\t\t) );\n\n\t\t$this->add_control( 'background_repeat', array(\n\t\t\t'label'    => __( 'Repeat Background Image' ),\n\t\t\t'section'  => 'background_image',\n\t\t\t'type'     => 'checkbox',\n\t\t) );\n\n\t\t$this->add_setting( 'background_attachment', array(\n\t\t\t'default'           => get_theme_support( 'custom-background', 'default-attachment' ),\n\t\t\t'sanitize_callback' => array( $this, '_sanitize_background_setting' ),\n\t\t\t'theme_supports'    => 'custom-background',\n\t\t) );\n\n\t\t$this->add_control( 'background_attachment', array(\n\t\t\t'label'    => __( 'Scroll with Page' ),\n\t\t\t'section'  => 'background_image',\n\t\t\t'type'     => 'checkbox',\n\t\t) );\n\n\n\t\t// If the theme is using the default background callback, we can update\n\t\t// the background CSS using postMessage.\n\t\tif ( get_theme_support( 'custom-background', 'wp-head-callback' ) === '_custom_background_cb' ) {\n\t\t\tforeach ( array( 'color', 'image', 'preset', 'position_x', 'position_y', 'size', 'repeat', 'attachment' ) as $prop ) {\n\t\t\t\t$this->get_setting( 'background_' . $prop )->transport = 'postMessage';\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Static Front Page\n\t\t * See also https://core.trac.wordpress.org/ticket/19627 which introduces the the static-front-page theme_support.\n\t\t * The following replicates behavior from options-reading.php.\n\t\t */\n\n\t\t$this->add_section( 'static_front_page', array(\n\t\t\t'title' => __( 'Static Front Page' ),\n\t\t\t'priority' => 120,\n\t\t\t'description' => __( 'Your theme supports a static front page.' ),\n\t\t\t'active_callback' => array( $this, 'has_published_pages' ),\n\t\t) );\n\n\t\t$this->add_setting( 'show_on_front', array(\n\t\t\t'default' => get_option( 'show_on_front' ),\n\t\t\t'capability' => 'manage_options',\n\t\t\t'type' => 'option',\n\t\t) );\n\n\t\t$this->add_control( 'show_on_front', array(\n\t\t\t'label' => __( 'Front page displays' ),\n\t\t\t'section' => 'static_front_page',\n\t\t\t'type' => 'radio',\n\t\t\t'choices' => array(\n\t\t\t\t'posts' => __( 'Your latest posts' ),\n\t\t\t\t'page'  => __( 'A static page' ),\n\t\t\t),\n\t\t) );\n\n\t\t$this->add_setting( 'page_on_front', array(\n\t\t\t'type'       => 'option',\n\t\t\t'capability' => 'manage_options',\n\t\t) );\n\n\t\t$this->add_control( 'page_on_front', array(\n\t\t\t'label' => __( 'Front page' ),\n\t\t\t'section' => 'static_front_page',\n\t\t\t'type' => 'dropdown-pages',\n\t\t\t'allow_addition' => true,\n\t\t) );\n\n\t\t$this->add_setting( 'page_for_posts', array(\n\t\t\t'type' => 'option',\n\t\t\t'capability' => 'manage_options',\n\t\t) );\n\n\t\t$this->add_control( 'page_for_posts', array(\n\t\t\t'label' => __( 'Posts page' ),\n\t\t\t'section' => 'static_front_page',\n\t\t\t'type' => 'dropdown-pages',\n\t\t\t'allow_addition' => true,\n\t\t) );\n\n\t\t/* Custom CSS */\n\t\t$this->add_section( 'custom_css', array(\n\t\t\t'title'              => __( 'Additional CSS' ),\n\t\t\t'priority'           => 200,\n\t\t\t'description_hidden' => true,\n\t\t\t'description'        => sprintf( '%s<br /><a href=\"%s\" class=\"external-link\" target=\"_blank\">%s<span class=\"screen-reader-text\">%s</span></a>',\n\t\t\t\t__( 'CSS allows you to customize the appearance and layout of your site with code. Separate CSS is saved for each of your themes. In the editing area the Tab key enters a tab character. To move below this area by pressing Tab, press the Esc key followed by the Tab key.' ),\n\t\t\t\tesc_url( __( 'https://codex.wordpress.org/CSS' ) ),\n\t\t\t\t__( 'Learn more about CSS' ),\n\t\t\t\t/* translators: accessibility text */\n\t\t\t\t__( '(opens in a new window)' )\n\t\t\t),\n\t\t) );\n\n\t\t$custom_css_setting = new WP_Customize_Custom_CSS_Setting( $this, sprintf( 'custom_css[%s]', get_stylesheet() ), array(\n\t\t\t'capability' => 'edit_css',\n\t\t\t'default' => sprintf( \"/*\\n%s\\n*/\", __( \"You can add your own CSS here.\\n\\nClick the help icon above to learn more.\" ) ),\n\t\t) );\n\t\t$this->add_setting( $custom_css_setting );\n\n\t\t$this->add_control( 'custom_css', array(\n\t\t\t'type'     => 'textarea',\n\t\t\t'section'  => 'custom_css',\n\t\t\t'settings' => array( 'default' => $custom_css_setting->id ),\n\t\t\t'input_attrs' => array(\n\t\t\t\t'class' => 'code', // Ensures contents displayed as LTR instead of RTL.\n\t\t\t),\n\t\t) );\n\t}\n\n\t/**\n\t * Return whether there are published pages.\n\t *\n\t * Used as active callback for static front page section and controls.\n\t *\n\t * @access private\n\t * @since 4.7.0\n\t *\n\t * @returns bool Whether there are published (or to be published) pages.\n\t */\n\tpublic function has_published_pages() {\n\n\t\t$setting = $this->get_setting( 'nav_menus_created_posts' );\n\t\tif ( $setting ) {\n\t\t\tforeach ( $setting->value() as $post_id ) {\n\t\t\t\tif ( 'page' === get_post_type( $post_id ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0 !== count( get_pages() );\n\t}\n\n\t/**\n\t * Add settings from the POST data that were not added with code, e.g. dynamically-created settings for Widgets\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @see add_dynamic_settings()\n\t */\n\tpublic function register_dynamic_settings() {\n\t\t$setting_ids = array_keys( $this->unsanitized_post_values() );\n\t\t$this->add_dynamic_settings( $setting_ids );\n\t}\n\n\t/**\n\t * Callback for validating the header_textcolor value.\n\t *\n\t * Accepts 'blank', and otherwise uses sanitize_hex_color_no_hash().\n\t * Returns default text color if hex color is empty.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $color\n\t * @return mixed\n\t */\n\tpublic function _sanitize_header_textcolor( $color ) {\n\t\tif ( 'blank' === $color )\n\t\t\treturn 'blank';\n\n\t\t$color = sanitize_hex_color_no_hash( $color );\n\t\tif ( empty( $color ) )\n\t\t\t$color = get_theme_support( 'custom-header', 'default-text-color' );\n\n\t\treturn $color;\n\t}\n\n\t/**\n\t * Callback for validating a background setting value.\n\t *\n\t * @since 4.7.0\n\t * @access private\n\t *\n\t * @param string $value Repeat value.\n\t * @param WP_Customize_Setting $setting Setting.\n\t * @return string|WP_Error Background value or validation error.\n\t */\n\tpublic function _sanitize_background_setting( $value, $setting ) {\n\t\tif ( 'background_repeat' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'repeat-x', 'repeat-y', 'repeat', 'no-repeat' ) ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background repeat.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_attachment' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'fixed', 'scroll' ) ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background attachment.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_position_x' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'left', 'center', 'right' ), true ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background position X.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_position_y' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'top', 'center', 'bottom' ), true ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background position Y.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_size' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'auto', 'contain', 'cover' ), true ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background size.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_preset' === $setting->id ) {\n\t\t\tif ( ! in_array( $value, array( 'default', 'fill', 'fit', 'repeat', 'custom' ), true ) ) {\n\t\t\t\treturn new WP_Error( 'invalid_value', __( 'Invalid value for background size.' ) );\n\t\t\t}\n\t\t} elseif ( 'background_image' === $setting->id || 'background_image_thumb' === $setting->id ) {\n\t\t\t$value = empty( $value ) ? '' : esc_url_raw( $value );\n\t\t} else {\n\t\t\treturn new WP_Error( 'unrecognized_setting', __( 'Unrecognized background setting.' ) );\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Export header video settings to facilitate selective refresh.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param array $response Response.\n\t * @param WP_Customize_Selective_Refresh $selective_refresh Selective refresh component.\n\t * @param array $partials Array of partials.\n\t * @return array\n\t */\n\tpublic function export_header_video_settings( $response, $selective_refresh, $partials ) {\n\t\tif ( isset( $partials['custom_header'] ) ) {\n\t\t\t$response['custom_header_settings'] = get_header_video_settings();\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Callback for validating the header_video value.\n\t *\n\t * Ensures that the selected video is less than 8MB and provides an error message.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param WP_Error $validity\n\t * @param mixed $value\n\t * @return mixed\n\t */\n\tpublic function _validate_header_video( $validity, $value ) {\n\t\t$video = get_attached_file( absint( $value ) );\n\t\tif ( $video ) {\n\t\t\t$size = filesize( $video );\n\t\t\tif ( 8 < $size / pow( 1024, 2 ) ) { // Check whether the size is larger than 8MB.\n\t\t\t\t$validity->add( 'size_too_large',\n\t\t\t\t\t__( 'This video file is too large to use as a header video. Try a shorter video or optimize the compression settings and re-upload a file that is less than 8MB. Or, upload your video to YouTube and link it with the option below.' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ( '.mp4' !== substr( $video, -4 ) && '.mov' !== substr( $video, -4 ) ) { // Check for .mp4 or .mov format, which (assuming h.264 encoding) are the only cross-browser-supported formats.\n\t\t\t\t$validity->add( 'invalid_file_type', sprintf(\n\t\t\t\t\t/* translators: 1: .mp4, 2: .mov */\n\t\t\t\t\t__( 'Only %1$s or %2$s files may be used for header video. Please convert your video file and try again, or, upload your video to YouTube and link it with the option below.' ),\n\t\t\t\t\t'<code>.mp4</code>',\n\t\t\t\t\t'<code>.mov</code>'\n\t\t\t\t) );\n\t\t\t}\n\t\t}\n\t\treturn $validity;\n\t}\n\n\t/**\n\t * Callback for validating the external_header_video value.\n\t *\n\t * Ensures that the provided URL is supported.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param WP_Error $validity\n\t * @param mixed $value\n\t * @return mixed\n\t */\n\tpublic function _validate_external_header_video( $validity, $value ) {\n\t\t$video = esc_url_raw( $value );\n\t\tif ( $video ) {\n\t\t\tif ( ! preg_match( '#^https?://(?:www\\.)?(?:youtube\\.com/watch|youtu\\.be/)#', $video ) ) {\n\t\t\t\t$validity->add( 'invalid_url', __( 'Please enter a valid YouTube URL.' ) );\n\t\t\t}\n\t\t}\n\t\treturn $validity;\n\t}\n\n\t/**\n\t * Callback for sanitizing the external_header_video value.\n\t *\n\t * @since 4.7.1\n\t *\n\t * @param string $value URL.\n\t * @return string Sanitized URL.\n\t */\n\tpublic function _sanitize_external_header_video( $value ) {\n\t\treturn esc_url_raw( trim( $value ) );\n\t}\n\n\t/**\n\t * Callback for rendering the custom logo, used in the custom_logo partial.\n\t *\n\t * This method exists because the partial object and context data are passed\n\t * into a partial's render_callback so we cannot use get_custom_logo() as\n\t * the render_callback directly since it expects a blog ID as the first\n\t * argument. When WP no longer supports PHP 5.3, this method can be removed\n\t * in favor of an anonymous function.\n\t *\n\t * @see WP_Customize_Manager::register_controls()\n\t *\n\t * @since 4.5.0\n\t * @access private\n\t *\n\t * @return string Custom logo.\n\t */\n\tpublic function _render_custom_logo_partial() {\n\t\treturn get_custom_logo();\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-beta1-40704';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4601-20170510';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-admin/customize.php", "wp-admin/js/customize-controls.js", "wp-admin/js/customize-controls.min.js", "wp-includes/class-wp-customize-manager.php", "wp-includes/version.php"], "buggy_code_start_loc": [158, 4582, 2, 486, 7], "buggy_code_end_loc": [159, 4582, 4, 486, 8], "fixing_code_start_loc": [158, 4583, 2, 487, 7], "fixing_code_end_loc": [159, 4593, 4, 505, 8], "type": "CWE-79", "message": "In WordPress before 4.7.5, a cross-site scripting (XSS) vulnerability related to the Customizer exists, involving an invalid customization session.", "other": {"cve": {"id": "CVE-2017-9063", "sourceIdentifier": "cve@mitre.org", "published": "2017-05-18T14:29:00.277", "lastModified": "2019-03-15T13:05:56.990", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In WordPress before 4.7.5, a cross-site scripting (XSS) vulnerability related to the Customizer exists, involving an invalid customization session."}, {"lang": "es", "value": "En WordPress anteriores a 4.7.5, existe una vulnerabilidad de XSS (cross-site scripting) relacionada con la salida del personalizador, en una sesi\u00f3n de personalizaci\u00f3n no v\u00e1lida."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7.4", "matchCriteriaId": "0F07CF70-A29C-490E-8728-C51AED224D76"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.debian.org/security/2017/dsa-3870", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/98509", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1038520", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.7.5", "source": "cve@mitre.org", "tags": ["Release Notes", "Patch", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/3d10fef22d788f29aed745b0f5ff6f6baea69af3", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2017/05/wordpress-4-7-5/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8820", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/3d10fef22d788f29aed745b0f5ff6f6baea69af3"}}