{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Vector;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.suigeneris.jrcs.diff.DifferentiationFailedException;\nimport org.suigeneris.jrcs.diff.delta.Delta;\nimport org.suigeneris.jrcs.rcs.Version;\nimport org.xwiki.component.util.DefaultParameterizedType;\nimport org.xwiki.configuration.ConfigurationSource;\nimport org.xwiki.context.Execution;\nimport org.xwiki.context.ExecutionContext;\nimport org.xwiki.display.internal.DocumentDisplayerParameters;\nimport org.xwiki.model.document.DocumentAuthors;\nimport org.xwiki.model.internal.document.SafeDocumentAuthors;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.ObjectReference;\nimport org.xwiki.model.reference.PageReference;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.parser.ParseException;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.stability.Unstable;\nimport org.xwiki.user.CurrentUserReference;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiConstant;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.criteria.impl.Period;\nimport com.xpn.xwiki.criteria.impl.PeriodFactory;\nimport com.xpn.xwiki.criteria.impl.Range;\nimport com.xpn.xwiki.criteria.impl.RangeFactory;\nimport com.xpn.xwiki.criteria.impl.RevisionCriteria;\nimport com.xpn.xwiki.criteria.impl.Scope;\nimport com.xpn.xwiki.criteria.impl.ScopeFactory;\nimport com.xpn.xwiki.doc.DocumentRevisionProvider;\nimport com.xpn.xwiki.doc.MetaDataDiff;\nimport com.xpn.xwiki.doc.XWikiAttachment;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.doc.XWikiDocumentArchive;\nimport com.xpn.xwiki.doc.XWikiLink;\nimport com.xpn.xwiki.doc.XWikiLock;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.BaseProperty;\nimport com.xpn.xwiki.objects.ObjectDiff;\nimport com.xpn.xwiki.objects.classes.BaseClass;\nimport com.xpn.xwiki.plugin.fileupload.FileUploadPlugin;\nimport com.xpn.xwiki.stats.api.XWikiStatsService;\nimport com.xpn.xwiki.stats.impl.DocumentStats;\nimport com.xpn.xwiki.stats.impl.RefererStats;\nimport com.xpn.xwiki.util.TOCGenerator;\nimport com.xpn.xwiki.util.Util;\nimport com.xpn.xwiki.web.Utils;\n\n/**\n * This class represents a document or page in the wiki. This is a security and usability wrapper which wraps\n * {@link com.xpn.xwiki.doc.XWikiDocument} In scripting, an object representing the document in which the script resides\n * will be bound to a variable called doc.\n *\n * @version $Id$\n */\npublic class Document extends Api\n{\n    /** Logging helper object. */\n    private static final Logger LOGGER = LoggerFactory.getLogger(Document.class);\n\n    /**\n     * The XWikiDocument object wrapped by this API.\n     */\n    protected XWikiDocument initialDoc;\n\n    /**\n     * The XWikiDocument object wrapped by this API.\n     */\n    protected XWikiDocument doc;\n\n    /**\n     * Convenience object used by object related methods.\n     */\n    protected Object currentObj;\n\n    /**\n     * Used to resolve a string into a proper Document Reference using the current document's reference to fill the\n     * blanks, except for the page name for which the default page name is used instead and for the wiki name for which\n     * the current wiki is used instead of the current document reference's wiki.\n     */\n    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;\n\n    /**\n     * Used to convert a proper Document Reference to string (standard form).\n     */\n    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;\n\n    /**\n     * Used to convert a proper Document Reference to a string but without the wiki name.\n     */\n    private EntityReferenceSerializer<String> localEntityReferenceSerializer;\n\n    private DocumentRevisionProvider documentRevisionProvider;\n\n    private ConfigurationSource configuration;\n\n    private DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver()\n    {\n        if (this.currentMixedDocumentReferenceResolver == null) {\n            this.currentMixedDocumentReferenceResolver =\n                Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n        }\n\n        return this.currentMixedDocumentReferenceResolver;\n    }\n\n    private EntityReferenceSerializer<String> getDefaultEntityReferenceSerializer()\n    {\n        if (this.defaultEntityReferenceSerializer == null) {\n            this.defaultEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n        }\n\n        return this.defaultEntityReferenceSerializer;\n    }\n\n    private EntityReferenceSerializer<String> getLocalEntityReferenceSerializer()\n    {\n        if (this.localEntityReferenceSerializer == null) {\n            this.localEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, \"local\");\n        }\n\n        return this.localEntityReferenceSerializer;\n    }\n\n    private DocumentRevisionProvider getDocumentRevisionProvider()\n    {\n        if (this.documentRevisionProvider == null) {\n            this.documentRevisionProvider = Utils.getComponent(DocumentRevisionProvider.class);\n        }\n\n        return this.documentRevisionProvider;\n    }\n\n    private ConfigurationSource getConfiguration()\n    {\n        if (this.configuration == null) {\n            this.configuration = Utils.getComponent(ConfigurationSource.class);\n        }\n\n        return this.configuration;\n    }\n\n    /**\n     * Document constructor.\n     *\n     * @param doc The XWikiDocument object to wrap.\n     * @param context The current request context.\n     */\n    public Document(XWikiDocument doc, XWikiContext context)\n    {\n        super(context);\n\n        this.initialDoc = doc;\n        this.doc = this.initialDoc;\n    }\n\n    /**\n     * Get the XWikiDocument wrapped by this API. This function is accessible only if you have the programming rights\n     * give access to the priviledged API of the Document.\n     *\n     * @return The XWikiDocument wrapped by this API.\n     */\n    public XWikiDocument getDocument()\n    {\n        if (hasProgrammingRights()) {\n            return this.doc;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Get a clone of the XWikiDocument wrapped by this API.\n     *\n     * @return A clone of the XWikiDocument wrapped by this API.\n     */\n    protected XWikiDocument getDoc()\n    {\n        if (this.initialDoc == this.doc) {\n            this.doc = this.initialDoc.clone();\n        }\n\n        return this.doc;\n    }\n\n    /**\n     * return the ID of the document. this ID is unique across the wiki.\n     *\n     * @return the id of the document.\n     */\n    public long getId()\n    {\n        return this.doc.getId();\n    }\n\n    /**\n     * returns the DocumentReference for the current document\n     *\n     * @return the DocumentReference of the current document\n     * @since 2.3M1\n     */\n    public DocumentReference getDocumentReference()\n    {\n        return this.doc.getDocumentReference();\n    }\n\n    /**\n     * @return the {@link DocumentReference} of the document also containing the document {@link Locale}\n     * @since 9.3RC1\n     */\n    public DocumentReference getDocumentReferenceWithLocale()\n    {\n        return this.doc.getDocumentReferenceWithLocale();\n    }\n\n    /**\n     * @return the reference of the document as {@link PageReference} without the {@link Locale}\n     * @since 10.6RC1\n     */\n    public PageReference getPageReference()\n    {\n        return this.doc.getPageReference();\n    }\n\n    /**\n     * @return the reference of the document as {@link PageReference} including the {@link Locale}\n     * @since 10.6RC1\n     */\n    public PageReference getPageReferenceWithLocale()\n    {\n        return this.doc.getPageReferenceWithLocale();\n    }\n\n    /**\n     * @return the last part of the document's reference. For example if the reference of a document is\n     *         {@code MySpace.Mydoc}, the returned name is {@code MyDoc}. For a nested document, the last part of the\n     *         reference is always {@code WebHome} and thus the returned name is {@code Webhome}. It's better to use\n     *         {@link #getPageReference()} or {@link #getDocumentReference()}, e.g. with\n     *         {@code getPageReference().getName()} or {@code getDocumentReference().getName()}. To get the space name\n     *         of the nested document you can use {@code getPageReference().getName()} or\n     *         {@code getDocumentReference().getParent().getName()}.\n     * @see #getPageReference()\n     * @see #getDocumentReference()\n     * @deprecated since 11.0, use {@link #getDocumentReference()} instead\n     */\n    @Deprecated\n    public String getName()\n{\n    return this.doc.getDocumentReference().getName();\n}\n\n    /**\n     * Return the full local space reference of the Document. For example a document located in sub-space\n     * <code>space11</code> of space <code>space1</code> will return <code>space1.space11</code>.\n     *\n     * @return the name of the spaces of the document\n     */\n    public String getSpace()\n    {\n        return this.doc.getSpace();\n    }\n\n    /**\n     * Get the name wiki where the document is stored.\n     *\n     * @return The name of the wiki where this document is stored.\n     * @since 1.1.2\n     * @since 1.2M2\n     */\n    public String getWiki()\n    {\n        return this.doc.getDocumentReference().getWikiReference().getName();\n    }\n\n    /**\n     * Get the fullName of the document. If a document is named \"MyDoc\" in space \"MySpace\", the fullname is\n     * \"MySpace.MyDoc\". In a wiki, all the documents have a different fullName.\n     *\n     * @return fullName of the document.\n     */\n    public String getFullName()\n    {\n        return getLocalEntityReferenceSerializer().serialize(this.doc.getDocumentReference());\n    }\n\n    /**\n     * Get the complete fullName of the document. The real full name of the document containing the name of the wiki\n     * where the document is stored. For a document stored in the wiki \"xwiki\", in space \"MySpace\", named \"MyDoc\", its\n     * complete full name is \"xwiki:MySpace.MyDoc\".\n     *\n     * @return The complete fullName of the document.\n     * @since 1.1.2\n     * @since 1.2M2\n     */\n    public String getPrefixedFullName()\n    {\n        return getDefaultEntityReferenceSerializer().serialize(this.doc.getDocumentReference());\n    }\n\n    /**\n     * Get a Version object representing the current version of the document.\n     *\n     * @return A Version object representing the current version of the document\n     */\n    public Version getRCSVersion()\n    {\n        return this.doc.getRCSVersion();\n    }\n\n    /**\n     * Get a string representing the current version of the document.\n     *\n     * @return A string representing the current version of the document.\n     */\n    public String getVersion()\n    {\n        return this.doc.getVersion();\n    }\n\n    /**\n     * Get a string representing the previous version of the document.\n     *\n     * @return A string representing the previous version of the document. If this is the first version then it returns\n     *         null.\n     */\n    public String getPreviousVersion()\n    {\n        return this.doc.getPreviousVersion();\n    }\n\n    /**\n     * Get the value of the title field of the document.\n     *\n     * @return The value of the title field of the document.\n     */\n    public String getTitle()\n    {\n        return this.doc.getTitle();\n    }\n\n    /**\n     * Get document title. If a title has not been provided through the title field, it looks for a section title in the\n     * document's content and if not found return the page name. The returned title is also interpreted which means it's\n     * allowed to use Velocity, Groovy, etc syntax within a title.\n     *\n     * @return The document title as XHTML\n     */\n    public String getDisplayTitle()\n    {\n        return this.doc.getRenderedTitle(getXWikiContext());\n    }\n\n    /**\n     * Returns the document title as plain text\n     *\n     * @return the document title as plain text (all markup removed)\n     * @since 3.0M1\n     */\n    public String getPlainTitle()\n    {\n        return this.doc.getRenderedTitle(Syntax.PLAIN_1_0, getXWikiContext());\n    }\n\n    /**\n     * Returns the title of the document rendered through wiki syntax and velocity\n     *\n     * @return the title rendered through wiki syntax and velocity\n     * @see XWikiDocument#getRenderedTitle(Syntax, XWikiContext)\n     */\n    public String getRenderedTitle(String syntaxId) throws XWikiException\n    {\n        try {\n            return this.doc.getRenderedTitle(Syntax.valueOf(syntaxId), getXWikiContext());\n        } catch (ParseException e) {\n            LOGGER.error(\"Failed to parse provided syntax identifier [\" + syntaxId + \"]\", e);\n\n            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN,\n                \"Failed to parse syntax identifier [\" + syntaxId + \"]\", e);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to render document [\" + getPrefixedFullName() + \"] title content\", e);\n\n            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN,\n                \"Failed to render document [\" + getPrefixedFullName() + \"] content title\", e);\n        }\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getFormat()\n    {\n        return this.doc.getFormat();\n    }\n\n    /**\n     * Get fullName of the profile document of the author of the current version of the document. Example: XWiki.Admin.\n     *\n     * @return The fullName of the profile document of the effective metadata author of the current version of the\n     *         document.\n     */\n    public String getAuthor()\n    {\n        return this.doc.getAuthor();\n    }\n\n    /**\n     * @return the document author reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getAuthorReference()\n    {\n        return this.doc.getAuthorReference();\n    }\n\n    /**\n     * Get fullName of the profile document of the author of the content modification of this document version. Example:\n     * XWiki.Admin.\n     *\n     * @return The fullName of the profile document of the author of the content modification in this document version.\n     */\n    public String getContentAuthor()\n    {\n        return this.doc.getContentAuthor();\n    }\n\n    /**\n     * @return the document content author reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getContentAuthorReference()\n    {\n        return this.doc.getContentAuthorReference();\n    }\n\n    /**\n     * @return The date when this document version has been modified.\n     */\n    public Date getDate()\n    {\n        return this.doc.getDate();\n    }\n\n    /**\n     * Get the date when the content modification has been done on this document version. A content update excludes\n     * modifications to meta data fields or comments of the document.\n     *\n     * @return The date where the content modification has been done on this document version.\n     */\n    public Date getContentUpdateDate()\n    {\n        return this.doc.getContentUpdateDate();\n    }\n\n    /**\n     * @return the original creation date of the document.\n     */\n    public Date getCreationDate()\n    {\n        return this.doc.getCreationDate();\n    }\n\n    /**\n     * Get the name of the parent of this document.\n     *\n     * @return The name of the parent of this document.\n     */\n    public String getParent()\n    {\n        return this.doc.getParent();\n    }\n\n    /**\n     * @return the parent reference or null if the parent is not set\n     * @since 7.3M1\n     */\n    public DocumentReference getParentReference()\n    {\n        return this.doc.getParentReference();\n    }\n\n    /**\n     * Get fullName of the profile document of the document creator.\n     *\n     * @return The fullName of the profile document of the document creator.\n     */\n    public String getCreator()\n    {\n        return this.doc.getCreator();\n    }\n\n    /**\n     * @return the document creator reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getCreatorReference()\n    {\n        return this.doc.getCreatorReference();\n    }\n\n    /**\n     * Get raw content of the document, i.e. the content that is visible through the wiki editor.\n     *\n     * @return The raw content of the document.\n     */\n    public String getContent()\n    {\n        return this.doc.getContent();\n    }\n\n    /**\n     * NOTE: This method caches the XDOM and returns a clone that can be safely modified.\n     *\n     * @return the XDOM corresponding to the document's string content\n     * @since 7.0RC1\n     */\n    public XDOM getXDOM()\n    {\n        return this.doc.getXDOM();\n    }\n\n    /**\n     * @return The syntax representing the syntax used for the document's content\n     * @since 2.3M1\n     */\n    public Syntax getSyntax()\n    {\n        return this.doc.getSyntax();\n    }\n\n    /**\n     * Get the Syntax id representing the syntax used for the document. For example \"xwiki/1.0\" represents the first\n     * version XWiki syntax while \"xwiki/2.0\" represents version 2.0 of the XWiki Syntax.\n     *\n     * @return The syntax id representing the syntax used for the document.\n     * @deprecated since 2.3M1 use {@link #getSyntax()} instead\n     */\n    @Deprecated\n    public String getSyntaxId()\n    {\n        return this.doc.getSyntax().toIdString();\n    }\n\n    /**\n     * Same as {@link #getLocale()} but as String.\n     *\n     * @return the locale of the document.\n     * @deprecated since 5.4M1 use {@link #getLocale()} instead\n     */\n    @Deprecated\n    public String getLanguage()\n    {\n        return this.doc.getLanguage();\n    }\n\n    /**\n     * Get the locale of the document. If the document is a translation it returns the locale set for it, otherwise, it\n     * returns the root locale.\n     *\n     * @return the locale of the document\n     * @since 5.4M1\n     */\n    public Locale getLocale()\n    {\n        return this.doc.getLocale();\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getTemplate()\n    {\n        String templateReferenceAsString = \"\";\n        DocumentReference templateDocumentReference = this.doc.getTemplateDocumentReference();\n        if (templateDocumentReference != null) {\n            templateReferenceAsString = getLocalEntityReferenceSerializer().serialize(templateDocumentReference);\n        }\n        return templateReferenceAsString;\n    }\n\n    /**\n     * Same as {@link #getRealLocale()} but as String.\n     *\n     * @return the real locale\n     * @deprecated since 8.0M1, use {@link #getRealLocale()} instead\n     */\n    @Deprecated\n    public String getRealLanguage() throws XWikiException\n    {\n        return this.doc.getRealLanguage(getXWikiContext());\n    }\n\n    /**\n     * Gets the real locale of the document. The real locale is either the default locale field when the locale field is\n     * empty (when the document is the default document) or the locale field otherwise when the document is a\n     * translation document\n     * \n     * @return the actual locale of the document\n     * @since 8.0M1\n     */\n    public Locale getRealLocale()\n    {\n        return this.doc.getRealLocale();\n    }\n\n    /**\n     * Same as {@link #getDefaultLocale()} but as String.\n     * \n     * @return the locale of the default document\n     * @deprecated since 8.0M1, use {@link #getDefaultLocale()} instead\n     */\n    @Deprecated\n    public String getDefaultLanguage()\n    {\n        return this.doc.getDefaultLanguage();\n    }\n\n    /**\n     * @return the Locale of the default version of the document (usually {@link Locale#ROOT} or {@link Locale#ENGLISH})\n     * @since 8.0M1\n     */\n    public Locale getDefaultLocale()\n    {\n        return this.doc.getDefaultLocale();\n    }\n\n    /**\n     * @param defaultLocale the locale content in the default document version\n     * @since 11.9RC1\n     */\n    public void setDefaultLocale(Locale defaultLocale)\n    {\n        this.doc.setDefaultLocale(defaultLocale);\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getDefaultTemplate()\n    {\n        return this.doc.getDefaultTemplate();\n    }\n\n    /**\n     * @return the comment of of the document version\n     */\n    public String getComment()\n    {\n        return this.doc.getComment();\n    }\n\n    /**\n     * @return true if the this document version was a minor edit.\n     */\n    public boolean isMinorEdit()\n    {\n        return this.doc.isMinorEdit();\n    }\n\n    /**\n     * @return the list of locales for which this document has a translation; the original (default) locale is not\n     *         included\n     * @throws XWikiException if retrieving the document translations from the database fails\n     * @since 12.4RC1\n     */\n    public List<Locale> getTranslationLocales() throws XWikiException\n    {\n        return this.doc.getTranslationLocales(getXWikiContext());\n    }\n\n    /**\n     * @return the translated document's content if the wiki is multilingual, the locale is first checked in the URL,\n     *         the cookie, the user profile and finally the wiki configuration if not, the locale is the one on the wiki\n     *         configuration.\n     */\n    public String getTranslatedContent() throws XWikiException\n    {\n        return this.doc.getTranslatedContent(getXWikiContext());\n    }\n\n    /**\n     * @return the translated content in the given locale\n     */\n    public String getTranslatedContent(String locale) throws XWikiException\n    {\n        return this.doc.getTranslatedContent(locale, getXWikiContext());\n    }\n\n    /**\n     * @return the translated document in the given locale\n     */\n    public Document getTranslatedDocument(String locale) throws XWikiException\n    {\n        return this.doc.getTranslatedDocument(locale, getXWikiContext()).newDocument(getXWikiContext());\n    }\n\n    /**\n     * @return the tranlated Document if the wiki is multilingual, the locale is first checked in the URL, the cookie,\n     *         the user profile and finally the wiki configuration if not, the locale is the one on the wiki\n     *         configuration.\n     */\n    public Document getTranslatedDocument() throws XWikiException\n    {\n        return this.doc.getTranslatedDocument(getXWikiContext()).newDocument(getXWikiContext());\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @return the content of the current document rendered.\n     * @since 11.3RC1\n     */\n    public String displayDocument(Syntax targetSyntax) throws XWikiException\n    {\n        return this.doc.displayDocument(targetSyntax, getXWikiContext());\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @return the content of the current document rendered.\n     * @since 11.5RC1\n     */\n    public String displayDocument(Syntax targetSyntax, boolean restricted) throws XWikiException\n    {\n        return this.doc.displayDocument(targetSyntax, restricted, getXWikiContext());\n    }\n\n    /**\n     * @return the content of the current document rendered.\n     * @since 11.3RC1\n     */\n    public String displayDocument() throws XWikiException\n    {\n        return this.doc.displayDocument(getXWikiContext());\n    }\n\n    /**\n     * @return the content of the current document rendered.\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @since 11.5RC1\n     */\n    public String displayDocument(boolean restricted) throws XWikiException\n    {\n        return this.doc.displayDocument(restricted, getXWikiContext());\n    }\n\n    /**\n     * @return the content of the document or its translations rendered.\n     */\n    public String getRenderedContent() throws XWikiException\n    {\n        return this.doc.getRenderedContent(getXWikiContext());\n    }\n\n    /**\n     * Execute and render the document in the current context.\n     * <p>\n     * The code is executed with right of this document content author.\n     * \n     * @param transformationContextIsolated see {@link DocumentDisplayerParameters#isTransformationContextIsolated()}\n     * @return the result\n     * @throws XWikiException when failing to display the document\n     * @since 8.4RC1\n     */\n    public String getRenderedContent(boolean transformationContextIsolated) throws XWikiException\n    {\n        return this.doc.getRenderedContent(transformationContextIsolated, getXWikiContext());\n    }\n\n    /**\n     * @param text the text to render\n     * @return the given text rendered in the context of this document\n     * @deprecated since 1.6M1 use {@link #getRenderedContent(String, String)}\n     */\n    @Deprecated\n    public String getRenderedContent(String text) throws XWikiException\n    {\n        return getRenderedContent(text, Syntax.XWIKI_1_0.toIdString());\n    }\n\n    /**\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 1.6M1\n     */\n    public String getRenderedContent(String text, String syntaxId) throws XWikiException\n    {\n        return getRenderedContent(text, syntaxId, false);\n    }\n\n    /**\n     * Render a text in a restricted mode, where script macros are completely disabled.\n     *\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 4.2M1\n     */\n    public String getRenderedContentRestricted(String text, String syntaxId) throws XWikiException\n    {\n        return getRenderedContent(text, syntaxId, true);\n    }\n\n    /**\n     * Render a text in a restricted mode, where script macros are completely disabled.\n     *\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @return the given text rendered in the context of this document using the passed Syntax\n     */\n    private String getRenderedContent(String text, String syntaxId, boolean restricted) throws XWikiException\n    {\n        // Make sure we keep using current author as passed content author\n        return this.doc.getRenderedContent(text, syntaxId, restricted, getCallerDocument(getXWikiContext()),\n            getXWikiContext());\n    }\n\n    /**\n     * @param text the text to render\n     * @param sourceSyntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @param targetSyntaxId the id of the syntax in which to render the document content\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 2.0M3\n     */\n    public String getRenderedContent(String text, String sourceSyntaxId, String targetSyntaxId) throws XWikiException\n    {\n        // Make sure we keep using current author as passed content author\n        return this.doc.getRenderedContent(text, sourceSyntaxId, targetSyntaxId, false,\n            getCallerDocument(getXWikiContext()), getXWikiContext());\n    }\n\n    private XWikiDocument getCallerDocument(XWikiContext xcontext)\n    {\n        XWikiDocument sdoc = (XWikiDocument) xcontext.get(\"sdoc\");\n        if (sdoc == null) {\n            sdoc = xcontext.getDoc();\n        }\n\n        return sdoc;\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @return the rendered content\n     * @throws XWikiException error when rendering content\n     */\n    public String getRenderedContent(Syntax targetSyntax) throws XWikiException\n    {\n        return this.doc.getRenderedContent(targetSyntax, getXWikiContext());\n    }\n\n    /**\n     * Get the document's content XML-escaped.\n     *\n     * @return an XML-escaped version of the content of this document.\n     */\n    public String getEscapedContent() throws XWikiException\n    {\n        return this.doc.getEscapedContent(getXWikiContext());\n    }\n\n    /**\n     * @return the archive of this document's history in string format\n     */\n    public String getArchive() throws XWikiException\n    {\n        return this.doc.getDocumentArchive(getXWikiContext()).getArchive(getXWikiContext());\n    }\n\n    /**\n     * Get the archive of this document's history. This function is accessible only if you have the programming rights.\n     *\n     * @return the archive of this document's history as an {@link XWikiDocumentArchive}.\n     */\n    public XWikiDocumentArchive getDocumentArchive() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.getDocumentArchive(getXWikiContext());\n        }\n        return null;\n    }\n\n    /**\n     * @return true if the document is a new one (ie it has never been saved) or false otherwise\n     */\n    public boolean isNew()\n    {\n        return this.doc.isNew();\n    }\n\n    /**\n     * Return the relative URL of download for the the given attachment name.\n     *\n     * @param filename the name of the attachment\n     * @return A String with the URL or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename)\n    {\n        return this.doc.getAttachmentURL(filename, getXWikiContext());\n    }\n\n    /**\n     * Get the relative URL of the given action for the the given attachment name.\n     *\n     * @param filename the name of the attachment.\n     * @param action what to do to the file for example \"delattachment\", \"download\" or \"downloadrev\".\n     * @return a string representation of a URL to do the given operation or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename, String action)\n    {\n        return this.doc.getAttachmentURL(filename, action, getXWikiContext());\n    }\n\n    /**\n     * Get the relative URL of an action on an attachment. the given action for the the given attachment name with\n     * \"queryString\" parameters\n     *\n     * @param filename the name of the attachment.\n     * @param action what to do to the file for example \"delattachment\", \"download\" or \"downloadrev\"\n     * @param queryString parameters added to the URL, the \"rev\" parameter is used to specify a revision if using the\n     *            \"downloadrev\" action. The query string must not begin with an ? character.\n     * @return a string representation of a URL to do the given operation or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename, String action, String queryString)\n    {\n        return this.doc.getAttachmentURL(filename, action, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get an old revision of an attachment.\n     *\n     * @param filename the name of the attachment.\n     * @param version a revision number such as \"1.1\" or \"1.2\".\n     * @return the URL for accessing to the archive of the attachment \"filename\" at the version \"version\" or null if the\n     *         file name is empty\n     */\n    public String getAttachmentRevisionURL(String filename, String version)\n    {\n        return this.doc.getAttachmentRevisionURL(filename, version, getXWikiContext());\n    }\n\n    /**\n     * Get an old revision of an attachment.\n     *\n     * @param filename the name of the attachment.\n     * @param version a revision number such as \"1.1\" or \"1.2\".\n     * @param queryString additional query parameters to pass in the request.\n     * @return the URL for accessing to the archive of the attachment \"filename\" at the version \"version\" with the given\n     *         queryString parameters or null if the file name is empty\n     */\n    public String getAttachmentRevisionURL(String filename, String version, String queryString)\n    {\n        return this.doc.getAttachmentRevisionURL(filename, version, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get the URL of this document.\n     *\n     * @return the URL to view this document, this will be a relative URL for example: /xwiki/bin/view/Main/WebHome\n     * @see #getExternalURL() for an absolute URL which can used outside of the site.\n     */\n    public String getURL()\n    {\n        return this.doc.getURL(\"view\", getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @return the URL of this document with the given action.\n     * @see #getExternalURL(String) for an absolute URL which can used outside of the site.\n     */\n    public String getURL(String action)\n    {\n        return this.doc.getURL(action, getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @param queryString parameters to pass in the request eg: {@code paramA=value1&paramB=value2}\n     * @return the URL of this document with the given action and queryString as parameters.\n     * @see #getExternalURL(String, String) for an absolute URL which can used outside of the site.\n     */\n    public String getURL(String action, String queryString)\n    {\n        return this.doc.getURL(action, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get the external URL to do a given action on this document.\n     *\n     * @return the full URL of the document, sutable for use at external websites for example:\n     *         http://www.xwiki.org/xwiki/bin/view/Main/WebHome\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL()\n    {\n        return this.doc.getExternalURL(\"view\", getXWikiContext());\n    }\n\n    /**\n     * Get the external URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @return the URL of this document with the given action.\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL(String action)\n    {\n        return this.doc.getExternalURL(action, getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @param queryString parameters to pass in the request eg: {@code paramA=value1&paramB=value2}\n     * @return the URL of this document with the given action and queryString as parameters.\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL(String action, String queryString)\n    {\n        return this.doc.getExternalURL(action, queryString, getXWikiContext());\n    }\n\n    /**\n     * @return the relative URL of the parent document of this document\n     */\n    public String getParentURL() throws XWikiException\n    {\n        return this.doc.getParentURL(getXWikiContext());\n    }\n\n    /**\n     * @return the XClass associated to this document when the document represents an XWiki Class\n     */\n    public Class getxWikiClass()\n    {\n        BaseClass bclass = this.getDoc().getXClass();\n        if (bclass == null) {\n            return null;\n        } else {\n            return new Class(bclass, getXWikiContext());\n        }\n    }\n\n    /**\n     * @return the array of XClasses representing the objects of this document\n     */\n    public Class[] getxWikiClasses()\n    {\n        List<BaseClass> list = this.getDoc().getXClasses(getXWikiContext());\n        if (list == null) {\n            return null;\n        }\n        Class[] result = new Class[list.size()];\n        for (int i = 0; i < list.size(); i++) {\n            result[i] = new Class(list.get(i), getXWikiContext());\n        }\n        return result;\n    }\n\n    /**\n     * Creates a New XWiki Object of the given classname\n     *\n     * @param classname the classname used\n     * @return the number of the object created\n     */\n    public int createNewObject(String classname) throws XWikiException\n    {\n        int index = getDoc().createNewObject(classname, getXWikiContext());\n\n        updateAuthor();\n\n        return index;\n    }\n\n    /**\n     * Creates a New XWiki Object of the given classname\n     *\n     * @param classname the classname used\n     * @return the object created\n     */\n    public Object newObject(String classname) throws XWikiException\n    {\n        int nb = createNewObject(classname);\n        return getObject(classname, nb);\n    }\n\n    /**\n     * @return true of the document has been loaded from cache\n     */\n    public boolean isFromCache()\n    {\n        return this.doc.isFromCache();\n    }\n\n    /**\n     * @param classname the classname used\n     * @return the number of objects available for a given classname\n     */\n    public int getObjectNumbers(String classname)\n    {\n        return this.doc.getObjectNumbers(classname);\n    }\n\n    /**\n     * Get the list of all objects available in this document organized in a Map by classname\n     *\n     * @return the map of objects\n     */\n    public Map<String, Vector<Object>> getxWikiObjects()\n    {\n        Map<DocumentReference, List<BaseObject>> map = this.getDoc().getXObjects();\n        Map<String, Vector<Object>> resultmap = new HashMap<String, Vector<Object>>();\n        for (Map.Entry<DocumentReference, List<BaseObject>> entry : map.entrySet()) {\n            List<BaseObject> objects = entry.getValue();\n            if (objects != null) {\n                resultmap.put(getLocalEntityReferenceSerializer().serialize(entry.getKey()), getXObjects(objects));\n            }\n        }\n        return resultmap;\n    }\n\n    protected Vector<Object> getXObjects(List<BaseObject> objects)\n    {\n        if (objects == null) {\n            return new Vector<Object>(0);\n        }\n        Vector<Object> result = new Vector<Object>(objects.size());\n        for (BaseObject bobj : objects) {\n            if (bobj != null) {\n                result.add(newObjectApi(bobj, getXWikiContext()));\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Get the list of objects for a given classname classname\n     *\n     * @return the vector of objects\n     */\n    public Vector<Object> getObjects(String className)\n    {\n        List<BaseObject> objects = this.getDoc().getXObjects(this.doc.resolveClassReference(className));\n        return getXObjects(objects);\n    }\n\n    /**\n     * Get the first object that contains the given fieldname\n     *\n     * @param fieldname name of the field to find in the object\n     * @return the XWiki Object\n     */\n    public Object getFirstObject(String fieldname)\n    {\n        try {\n            BaseObject obj = this.getDoc().getFirstObject(fieldname, getXWikiContext());\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the first object of a given classname that has a field name matching the given value\n     *\n     * @param classname name of the class of the object to look for\n     * @param key name of the field to find in the object\n     * @param value value of the field to find in the object\n     * @param failover true if the first object will be given when none found\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, String key, String value, boolean failover)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, key, value, failover);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Select a subset of objects from a given class, filtered on a \"key = value\" criteria.\n     *\n     * @param classname The type of objects to return.\n     * @param key The name of the property used for filtering.\n     * @param value The required value.\n     * @return A Vector of {@link Object objects} matching the criteria. If no objects are found, or if the key is an\n     *         empty String, then an empty vector is returned.\n     */\n    public Vector<Object> getObjects(String classname, String key, String value)\n    {\n        Vector<Object> result = new Vector<Object>();\n        if (StringUtils.isBlank(key) || value == null) {\n            return getObjects(classname);\n        }\n        try {\n            Vector<BaseObject> allObjects = this.getDoc().getObjects(classname);\n            if (allObjects == null || allObjects.size() == 0) {\n                return result;\n            } else {\n                for (BaseObject obj : allObjects) {\n                    if (obj != null) {\n                        BaseProperty prop = (BaseProperty) obj.get(key);\n                        if (prop == null || prop.getValue() == null) {\n                            continue;\n                        }\n                        if (value.equals(prop.getValue().toString())) {\n                            result.add(newObjectApi(obj, getXWikiContext()));\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n        }\n        return result;\n    }\n\n    /**\n     * Get the first object of a given classname that has a field name matching the given value When none found this\n     * method will return null\n     *\n     * @param classname name of the class of the object to look for\n     * @param key name of the field to find in the object\n     * @param value value of the field to find in the object\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, String key, String value)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, key, value);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the first object matching the given classname\n     *\n     * @param classname name of the class of the object to look for\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname)\n    {\n        return getObject(classname, false);\n    }\n\n    /**\n     * get the object of the given className. If there is no object of this className and the create parameter at true,\n     * the object is created.\n     *\n     * @param classname name of the class of the object to look for\n     * @param create true of the object should be created when it does not exist\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, boolean create)\n    {\n        try {\n            BaseObject obj = getDoc().getObject(classname, create, getXWikiContext());\n\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the object matching the given classname and given object number\n     *\n     * @param classname name of the class of the object\n     * @param nb number of the object\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, int nb)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, nb);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param objectReference the object reference\n     * @return the XWiki object from this document that matches the specified object reference\n     * @since 12.3RC1\n     */\n    public Object getObject(ObjectReference objectReference)\n    {\n        try {\n            BaseObject obj = this.getDoc().getXObject(objectReference);\n            return obj == null ? null : newObjectApi(obj, getXWikiContext());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param objectReference the object reference\n     * @param create if true, the object will be created when missing\n     * @return the XWiki object from this document that matches the specified object reference\n     * @since 14.0RC1\n     */\n    @Unstable\n    public Object getObject(ObjectReference objectReference, boolean create)\n    {\n        try {\n            BaseObject obj = this.getDoc().getXObject(objectReference, create, getXWikiContext());\n            return obj == null ? null : newObjectApi(obj, getXWikiContext());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    private Object newObjectApi(BaseObject obj, XWikiContext context)\n    {\n        return obj.newObjectApi(obj, context);\n    }\n\n    public String getXMLContent() throws XWikiException\n    {\n        String xml = this.doc.getXMLContent(getXWikiContext());\n        return getXWikiContext().getUtil().substitute(\"s/<email>.*?<\\\\/email>/<email>********<\\\\/email>/goi\",\n            getXWikiContext().getUtil().substitute(\"s/<password>.*?<\\\\/password>/<password>********<\\\\/password>/goi\",\n                xml));\n    }\n\n    public String toXML() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.toXML(getXWikiContext());\n        } else {\n            return \"\";\n        }\n    }\n\n    public org.dom4j.Document toXMLDocument() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.toXMLDocument(getXWikiContext());\n        } else {\n            return null;\n        }\n    }\n\n    public Version[] getRevisions() throws XWikiException\n    {\n        return this.doc.getRevisions(getXWikiContext());\n    }\n\n    public String[] getRecentRevisions() throws XWikiException\n    {\n        return this.doc.getRecentRevisions(5, getXWikiContext());\n    }\n\n    public String[] getRecentRevisions(int nb) throws XWikiException\n    {\n        return this.doc.getRecentRevisions(nb, getXWikiContext());\n    }\n\n    /**\n     * Get document versions matching criterias like author, minimum creation date, etc.\n     *\n     * @param criteria criteria used to match versions\n     * @return a list of matching versions\n     */\n    public List<String> getRevisions(RevisionCriteria criteria) throws XWikiException\n    {\n        return this.doc.getRevisions(criteria, this.context);\n    }\n\n    /**\n     * Get information about a document version : author, date, etc.\n     *\n     * @param version the version you want to get information about\n     * @return a new RevisionInfo object\n     */\n    public RevisionInfo getRevisionInfo(String version) throws XWikiException\n    {\n        return new RevisionInfo(this.doc.getRevisionInfo(version, getXWikiContext()), getXWikiContext());\n    }\n\n    public List<Attachment> getAttachmentList()\n    {\n        List<Attachment> apis = new ArrayList<Attachment>();\n        for (XWikiAttachment attachment : this.getDoc().getAttachmentList()) {\n            apis.add(new Attachment(this, attachment, getXWikiContext()));\n        }\n        return apis;\n    }\n\n    public Vector<Object> getComments()\n    {\n        return getComments(true);\n    }\n\n    public Vector<Object> getComments(boolean asc)\n    {\n        return getXObjects(this.getDoc().getComments(asc));\n    }\n\n    /**\n     * Setting the current object to the given object. Following calls to display() will use this object as the\n     * reference for finding properties.\n     *\n     * @param object Object to use as a reference for further display calls\n     */\n    public void use(Object object)\n    {\n        this.currentObj = object;\n    }\n\n    /**\n     * Setting the current object to the first object of the given class name. Following calls to display() will use\n     * this object as the reference for finding properties.\n     *\n     * @param className class used to find the first object to use as the reference for display calls\n     */\n    public void use(String className)\n    {\n        this.currentObj = getObject(className);\n    }\n\n    /**\n     * Setting the current object to the object of the given class name and the given number. Following calls to\n     * display() will use this object as the reference for finding properties.\n     *\n     * @param className class used to find the object to use as the reference for display calls\n     * @param nb number of the object to use as the reference for display calls\n     */\n    public void use(String className, int nb)\n    {\n        this.currentObj = getObject(className, nb);\n    }\n\n    /**\n     * @return the className of the current active object use for display calls.\n     */\n    public String getActiveClass()\n    {\n        if (this.currentObj == null) {\n            return null;\n        } else {\n            return this.currentObj.getName();\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param obj Object to find the class to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field. with the optional addition of a mandatory field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, showMandatory, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, showMandatory, this.currentObj.getBaseObject(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object. with the optional addition of a mandatory field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param obj Object to find the class to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, showMandatory, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field. with the optional addition of a mandatory field before or after the field\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @param before true if the mandatory sign should be before the field\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, showMandatory, before, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, showMandatory, before, this.currentObj.getBaseObject(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object. with the optional addition of a mandatory field\n     * before or after the field\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @param before true if the mandatory sign should be before the field\n     * @param obj Object to find the class to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, showMandatory, before, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the tooltip of the given field. This function uses the active object or will find the first object that\n     * has the given field.\n     *\n     * @param fieldname fieldname to display the tooltip of\n     * @return the tooltip display of the field.\n     */\n    public String displayTooltip(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayTooltip(fieldname, getXWikiContext());\n        } else {\n            return this.doc.displayTooltip(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the tooltip of the given field of the given object.\n     *\n     * @param fieldname fieldname to display the tooltip of\n     * @param obj Object to find the class to display the tooltip of\n     * @return the tooltip display of the field.\n     */\n    public String displayTooltip(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayTooltip(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field. The display mode will be decided depending on page context (edit or inline context will\n     * display in edit, view context in view) This function uses the active object or will find the first object that\n     * has the given field. This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field in the given mode. This function uses the active object or will find the first object\n     * that has the given field. This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, mode, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, mode, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field in the given mode. This function uses the active object or will find the first object\n     * that has the given field. This function can return html inside and html macro A given prefix is added to the\n     * field names when these are forms.\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param prefix prefix to use for the form names\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, String prefix)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, mode, prefix, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, mode, prefix, this.currentObj.getBaseObject(), getSyntaxId(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field of the given object The display mode will be decided depending on page context (edit or\n     * inline context will display in edit, view context in view) This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @param obj object from which to take the field\n     * @return the display of the field.\n     */\n    public String display(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object using the given mode and syntax rendering The display mode will be\n     * decided depending on page context (edit or inline context will display in edit, view context in view) This\n     * function can return html inside and html macro\n     *\n     * @param fieldname the name of the field to display\n     * @param type the type of the field to display\n     * @param obj the object containing the field to display\n     * @param wrappingSyntaxId the syntax of the content in which the result will be included. This to take care of some\n     *            escaping depending of the syntax.\n     * @return the rendered field\n     */\n    public String display(String fieldname, String type, Object obj, String wrappingSyntaxId)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, type, obj.getBaseObject(), wrappingSyntaxId, getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object in the given mode. This function can return html inside and html\n     * macro\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param obj the object containing the field to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, mode, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object in the given mode. This function can return html inside and html\n     * macro A given prefix is added to the field names when these are forms.\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param prefix prefix to use for the form names\n     * @param obj the object containing the field to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, String prefix, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, mode, prefix, obj.getBaseObject(), getSyntaxId(), getXWikiContext());\n    }\n\n    public String displayForm(String className, String header, String format)\n    {\n        return this.doc.displayForm(className, header, format, getXWikiContext());\n    }\n\n    public String displayForm(String className, String header, String format, boolean linebreak)\n    {\n        return this.doc.displayForm(className, header, format, linebreak, getXWikiContext());\n    }\n\n    public String displayForm(String className)\n    {\n        return this.doc.displayForm(className, getXWikiContext());\n    }\n\n    public String displayRendered(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n        throws XWikiException\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayRendered(pclass.getBasePropertyClass(), prefix, object.getCollection(),\n            getXWikiContext());\n    }\n\n    public String displayView(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayView(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public String displayEdit(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayEdit(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public String displayHidden(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayHidden(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public List<String> getIncludedPages()\n    {\n        return this.doc.getIncludedPages(getXWikiContext());\n    }\n\n    public List<String> getIncludedMacros()\n    {\n        return this.doc.getIncludedMacros(getXWikiContext());\n    }\n\n    public List<String> getLinkedPages()\n    {\n        return new ArrayList<String>(this.doc.getUniqueLinkedPages(getXWikiContext()));\n    }\n\n    public Attachment getAttachment(String filename)\n    {\n        XWikiAttachment attach = this.getDoc().getAttachment(filename);\n        if (attach == null) {\n            return null;\n        } else {\n            return new Attachment(this, attach, getXWikiContext());\n        }\n    }\n\n    public List<Delta> getContentDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getContentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getContentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getContentDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CONTENT_ERROR,\n                    \"Error while making content diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<Delta> getXMLDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getXMLDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getXMLDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getXMLDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_XML_ERROR,\n                    \"Error while making xml diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<Delta> getRenderedContentDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getRenderedContentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getRenderedContentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getRenderedContentDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_RENDERED_ERROR,\n                    \"Error while making rendered diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<MetaDataDiff> getMetaDataDiff(Document origdoc, Document newdoc) throws XWikiException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getMetaDataDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getMetaDataDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getMetaDataDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_METADATA_ERROR,\n                    \"Error while making meta data diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<List<ObjectDiff>> getObjectDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getObjectDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getObjectDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getObjectDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_OBJECT_ERROR,\n                    \"Error while making meta object diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<List<ObjectDiff>> getClassDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getClassDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getClassDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getClassDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CLASS_ERROR,\n                    \"Error while making class diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<AttachmentDiff> getAttachmentDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return wrapAttachmentDiff(this.doc.getAttachmentDiff(new XWikiDocument(newdoc.getDocumentReference()),\n                    newdoc.doc, getXWikiContext()));\n            }\n            if (newdoc == null) {\n                return wrapAttachmentDiff(this.doc.getAttachmentDiff(origdoc.doc,\n                    new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext()));\n            }\n\n            return wrapAttachmentDiff(this.doc.getAttachmentDiff(origdoc.doc, newdoc.doc, getXWikiContext()));\n        } catch (Exception e) {\n            java.lang.Object[] args = { (origdoc != null) ? origdoc.getFullName() : null,\n            (origdoc != null) ? origdoc.getVersion() : null, (newdoc != null) ? newdoc.getVersion() : null };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_ATTACHMENT_ERROR,\n                    \"Error while making attachment diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    private List<AttachmentDiff> wrapAttachmentDiff(List<com.xpn.xwiki.doc.AttachmentDiff> diffs)\n    {\n        List<AttachmentDiff> safeAttachmentDiffs = new ArrayList<>();\n        for (com.xpn.xwiki.doc.AttachmentDiff diff : diffs) {\n            safeAttachmentDiffs.add(new AttachmentDiff(diff, getXWikiContext()));\n        }\n        return safeAttachmentDiffs;\n    }\n\n    public List<Delta> getLastChanges() throws XWikiException, DifferentiationFailedException\n    {\n        return this.doc.getLastChanges(getXWikiContext());\n    }\n\n    /**\n     * Get statistics about the number of request for the current page during the current month.\n     *\n     * @param action the type of request for which to retrieve statistics: view, edit...\n     * @return the statistics object holding information for this document and the current month\n     */\n    public DocumentStats getCurrentMonthPageStats(String action)\n    {\n        Scope scope = ScopeFactory.createPageScope(this.getFullName());\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<DocumentStats> stats = statisticsService.getDocumentStatistics(action, scope, period, range, this.context);\n        if (stats.size() > 0) {\n            return stats.get(0);\n        }\n        return new DocumentStats();\n    }\n\n    /**\n     * Get statistics about the number of request for the current space during the current month.\n     *\n     * @param action the type of request for which to retrieve statistics: view, edit...\n     * @return the statistics object holding information for the document's space and the current month\n     */\n    public DocumentStats getCurrentMonthSpaceStats(String action)\n    {\n        Scope scope = ScopeFactory.createSpaceScope(this.doc.getSpace(), false);\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<DocumentStats> stats = statisticsService.getDocumentStatistics(action, scope, period, range, this.context);\n        if (stats.size() > 0) {\n            return stats.get(0);\n        }\n        return new DocumentStats();\n    }\n\n    /**\n     * Get referer statistics for the current document during the current month.\n     *\n     * @return a list of referer statistics for the document's space\n     */\n    public List<RefererStats> getCurrentMonthRefStats()\n    {\n        Scope scope = ScopeFactory.createPageScope(this.getFullName());\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<RefererStats> stats = statisticsService.getRefererStatistics(\"\", scope, period, range, this.context);\n        return stats;\n    }\n\n    public boolean checkAccess(String right)\n    {\n        try {\n            return getXWikiContext().getWiki().checkAccess(right, this.doc, getXWikiContext());\n        } catch (XWikiException e) {\n            return false;\n        }\n    }\n\n    public boolean hasAccessLevel(String level)\n    {\n        try {\n            return getXWikiContext().getWiki().getRightService().hasAccessLevel(level, getXWikiContext().getUser(),\n                this.getPrefixedFullName(), getXWikiContext());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    @Override\n    public boolean hasAccessLevel(String level, String user)\n    {\n        try {\n            return getXWikiContext().getWiki().getRightService().hasAccessLevel(level, user, this.getPrefixedFullName(),\n                getXWikiContext());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    /**\n     * Verifies if the user identified by {@code userReference} has the access identified by {@code right} on this\n     * document.\n     * Note that this method does not override {@link Api#hasAccess(Right, DocumentReference)}: they share same\n     * signature but on the {@code Api} one the {@link DocumentReference} parameter is about the entity where to check\n     * the right, while here it's about the user to check right for.\n     * \n     * @param right the right to check\n     * @param userReference the user to check the right for\n     * @return {@code true} if the user has the specified right on this document, {@code false} otherwise\n     * @since 10.6RC1\n     */\n    public boolean hasAccess(Right right, DocumentReference userReference)\n    {\n        return getAuthorizationManager().hasAccess(right, userReference, getDocumentReference());\n    }\n\n    /**\n     * Verifies if the context user has the access identified by {@code right} on the current context document.\n     * @param right the right to check\n     * @return {@code true} if the user has the specified right on this document, {@code false} otherwise\n     * @since 14.10\n     * @since 14.4.7\n     */\n    @Unstable\n    public boolean hasAccess(Right right)\n    {\n        return hasAccess(right, getXWikiContext().getUserReference());\n    }\n\n    public boolean getLocked()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public String getLockingUser()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return lock.getUserName();\n            } else {\n                return \"\";\n            }\n        } catch (XWikiException e) {\n            return \"\";\n        }\n    }\n\n    public Date getLockingDate()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return lock.getDate();\n            } else {\n                return null;\n            }\n        } catch (XWikiException e) {\n            return null;\n        }\n    }\n\n    /**\n     * Renders the passed xproperty as HTML. Note that if you need the raw value, you should call \n     * {@link #getValue(String)} instead. \n     *\n     * @param classOrFieldName the xproperty (aka field) name to render or an xclass reference\n     * @return the rendered xproperty as HTML if an xobject exists with that xproperty. Otherwise considers that the\n     *         passed parameter is an xclass reference and return the xobject for it or null if none exist\n     * @see #getValue(String) \n     * @see #getValue(String, Object) \n     */\n    public java.lang.Object get(String classOrFieldName)\n    {\n        if (this.currentObj != null) {\n            return this.doc.display(classOrFieldName, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n        BaseObject object = this.doc.getFirstObject(classOrFieldName, getXWikiContext());\n        if (object != null) {\n            return this.doc.display(classOrFieldName, object, getXWikiContext());\n        }\n        return this.getDoc().getObject(classOrFieldName);\n    }\n\n    /**\n     * @param fieldName the xproperty (aka field) name for which to get the value\n     * @return the raw value of the passed xproperty found in the current xobject or in the first xobject containing\n     *         such a field\n     * @see #getValue(String, Object) \n     */\n    public java.lang.Object getValue(String fieldName)\n    {\n        Object object;\n        if (this.currentObj == null) {\n            object = new Object(this.getDoc().getFirstObject(fieldName, getXWikiContext()), getXWikiContext());\n        } else {\n            object = this.currentObj;\n        }\n        return getValue(fieldName, object);\n    }\n\n    /**\n     * @param fieldName the xproperty (aka field) name for which to get the value\n     * @param object the specific xobject from which to get the xproperty value\n     * @return the raw value of the passed xproperty\n     * @see #getValue(String)\n     */\n    public java.lang.Object getValue(String fieldName, Object object)\n    {\n        if (object != null) {\n            return object.getValue(fieldName);\n        }\n\n        return null;\n    }\n\n    public String getTextArea()\n    {\n        return com.xpn.xwiki.XWiki.getTextArea(this.doc.getContent(), getXWikiContext());\n    }\n\n    /**\n     * Returns data needed for a generation of Table of Content for this document.\n     *\n     * @param init an intial level where the TOC generation should start at\n     * @param max maximum level TOC is generated for\n     * @param numbered if should generate numbering for headings\n     * @return a map where an heading (title) ID is the key and value is another map with two keys: text, level and\n     *         numbering\n     */\n    public Map<String, Map<String, java.lang.Object>> getTOC(int init, int max, boolean numbered)\n    {\n        getXWikiContext().put(\"tocNumbered\", new Boolean(numbered));\n        return TOCGenerator.generateTOC(getContent(), init, max, numbered, getXWikiContext());\n    }\n\n    public String getTags()\n    {\n        return this.doc.getTags(getXWikiContext());\n    }\n\n    public List<String> getTagList()\n    {\n        return this.getDoc().getTagsList(getXWikiContext());\n    }\n\n    public List<String> getTagsPossibleValues()\n    {\n        return this.doc.getTagsPossibleValues(getXWikiContext());\n    }\n\n    public void insertText(String text, String marker) throws XWikiException\n    {\n        if (hasAccessLevel(\"edit\")) {\n            getDoc().insertText(text, marker, getXWikiContext());\n\n            updateAuthor();\n            updateContentAuthor();\n        }\n    }\n\n    @Override\n    public boolean equals(java.lang.Object arg0)\n    {\n        if (!(arg0 instanceof Document)) {\n            return false;\n        }\n        Document d = (Document) arg0;\n        return d.getXWikiContext().equals(getXWikiContext()) && this.doc.equals(d.doc);\n    }\n\n    /**\n     * Check if the passed one is the one wrapped by this {@link Document}.\n     * \n     * @param document the document to compare\n     * @return true if passed document is the wrapped one\n     * @since 8.3M1\n     */\n    public boolean same(XWikiDocument document)\n    {\n        return document == this.doc || document == this.initialDoc;\n    }\n\n    public List<String> getBacklinks() throws XWikiException\n    {\n        return this.doc.getBackLinkedPages(getXWikiContext());\n    }\n\n    /**\n     * Retrieve the references of the page containing a link to the current page.\n     *\n     * @return a list of references of the page containing a link to the current page.\n     * @throws XWikiException in case of problem to perform the query.\n     * @since 12.5RC1\n     */\n    public List<DocumentReference> getBackLinkedReferences() throws XWikiException\n    {\n        return this.doc.getBackLinkedReferences(getXWikiContext());\n    }\n\n    public List<XWikiLink> getLinks() throws XWikiException\n    {\n        return new ArrayList<XWikiLink>(this.doc.getUniqueWikiLinkedPages(getXWikiContext()));\n    }\n\n    /**\n     * Get the top sections contained in the document.\n     * <p>\n     * The section are filtered by xwiki.section.depth property on the maximum depth of the sections to return. This\n     * method is usually used to get \"editable\" sections.\n     *\n     * @return the sections in the current document\n     */\n    public List<DocumentSection> getSections() throws XWikiException\n    {\n        return this.doc.getSections();\n    }\n\n    /**\n     * Get document children. Children are documents with the current document as parent.\n     *\n     * @return The list of children for the current document.\n     * @since 1.8 Milestone 2\n     */\n    public List<String> getChildren() throws XWikiException\n    {\n        return this.doc.getChildren(getXWikiContext());\n    }\n\n    /**\n     * Get document children references. Children are documents with the current document as parent.\n     * @return The list of children for the current document.\n     * @throws XWikiException in case of problem to query the children.\n     * @since 12.5RC1\n     */\n    public List<DocumentReference> getChildrenReferences() throws XWikiException\n    {\n        return this.doc.getChildrenReferences(getXWikiContext());\n    }\n\n    /**\n     * Get document children. Children are documents with the current document as parent. Where a document has a large\n     * number of children, one may desire to return a certain number of children (nb) and skip some number (start) of\n     * the first results.\n     *\n     * @param nb The number of results to return.\n     * @param start The number of results to skip before we begin returning results.\n     * @return The list of children for the current document.\n     */\n    public List<String> getChildren(int nb, int start) throws XWikiException\n    {\n        return this.doc.getChildren(nb, start, getXWikiContext());\n    }\n\n    /**\n     * Gets the default edit mode for this document. An edit mode (other than the default \"edit\") can be enforced by\n     * creating an {@code XWiki.EditModeClass} object in the current document, with the appropriate value for the\n     * defaultEditMode property, or by adding this object in a sheet included by the document. This function also falls\n     * back on the old {@code SheetClass}, deprecated since 3.1M2, which can be attached to included documents to\n     * specify that the current document should be edited inline.\n     *\n     * @return the default edit mode for this document (\"edit\" or \"inline\" usually)\n     * @throws XWikiException since XWiki 6.3M1 it's not used anymore and \"edit\" is returned in case of error, with an\n     *             error log\n     */\n    public String getDefaultEditMode() throws XWikiException\n    {\n        return this.doc.getDefaultEditMode(getXWikiContext());\n    }\n\n    public String getDefaultEditURL() throws XWikiException\n    {\n        return this.doc.getDefaultEditURL(getXWikiContext());\n    }\n\n    public String getEditURL(String action, String mode) throws XWikiException\n    {\n        return this.doc.getEditURL(action, mode, getXWikiContext());\n    }\n\n    public String getEditURL(String action, String mode, String locale)\n    {\n        return this.doc.getEditURL(action, mode, locale, getXWikiContext());\n    }\n\n    public boolean isCurrentUserCreator()\n    {\n        return this.doc.isCurrentUserCreator(getXWikiContext());\n    }\n\n    public boolean isCurrentUserPage()\n    {\n        return this.doc.isCurrentUserPage(getXWikiContext());\n    }\n\n    public boolean isCurrentLocalUserPage()\n    {\n        return this.doc.isCurrentLocalUserPage(getXWikiContext());\n    }\n\n    public boolean isCreator(String username)\n    {\n        return this.doc.isCreator(username);\n    }\n\n    public void set(String fieldname, java.lang.Object value)\n    {\n        Object obj;\n        if (this.currentObj != null) {\n            obj = this.currentObj;\n        } else {\n            obj = getFirstObject(fieldname);\n        }\n        set(fieldname, value, obj);\n    }\n\n    public void set(String fieldname, java.lang.Object value, Object obj)\n    {\n        if (obj == null) {\n            return;\n        }\n        obj.set(fieldname, value);\n    }\n\n    public void setTitle(String title)\n    {\n        getDoc().setTitle(title);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    public void setCustomClass(String customClass)\n    {\n        getDoc().setCustomClass(customClass);\n\n        updateAuthor();\n    }\n\n    public void setParent(String parent)\n    {\n        getDoc().setParent(parent);\n\n        updateAuthor();\n    }\n\n    private void updateContentAuthor()\n    {\n        // Temporary set as content author of the document the current script author (until the document is saved)\n        XWikiContext xcontext = getXWikiContext();\n        getDoc().setContentAuthorReference(xcontext.getAuthorReference());\n    }\n\n    private void updateAuthor()\n    {\n        // Temporary set as author of the document the current script author (until the document is saved)\n        XWikiContext xcontext = getXWikiContext();\n        getDoc().setAuthorReference(xcontext.getAuthorReference());\n    }\n\n    public void setContent(String content)\n    {\n        getDoc().setContent(content);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param content the content as XDOM\n     * @throws XWikiException when failing to convert the XDOM to String content\n     * @since 7.0RC1\n     */\n    public void setContent(XDOM content) throws XWikiException\n    {\n        getDoc().setContent(content);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param syntax the Syntax representing the syntax used for the current document's content.\n     * @since 2.3M1\n     */\n    public void setSyntax(Syntax syntax)\n    {\n        getDoc().setSyntax(syntax);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param syntaxId the Syntax id representing the syntax used for the current document. For example \"xwiki/1.0\"\n     *            represents the first version XWiki syntax while \"xwiki/2.0\" represents version 2.0 of the XWiki\n     *            Syntax.\n     */\n    public void setSyntaxId(String syntaxId)\n    {\n        getDoc().setSyntaxId(syntaxId);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    public void setDefaultTemplate(String dtemplate)\n    {\n        getDoc().setDefaultTemplate(dtemplate);\n\n        updateAuthor();\n    }\n\n    public void setComment(String comment)\n    {\n        getDoc().setComment(comment);\n    }\n\n    public void setMinorEdit(boolean isMinor)\n    {\n        getDoc().setMinorEdit(isMinor);\n    }\n\n    public void save() throws XWikiException\n    {\n        save(\"\", false);\n    }\n\n    public void save(String comment) throws XWikiException\n    {\n        save(comment, false);\n    }\n\n    private UserReferenceResolver<CurrentUserReference> getCurrentUserReferenceResolver()\n    {\n        return Utils.getComponent(new DefaultParameterizedType(null, UserReferenceResolver.class,\n                CurrentUserReference.class));\n    }\n\n    public void save(String comment, boolean minorEdit) throws XWikiException\n    {\n        if (hasAccessLevel(\"edit\")) {\n\n            DocumentAuthors authors = getDoc().getAuthors();\n            authors.setOriginalMetadataAuthor(getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE));\n            // If the current author does not have PR don't let it set current user as author of the saved document\n            // since it can lead to right escalation\n            if (hasProgrammingRights() || !getConfiguration().getProperty(\"security.script.save.checkAuthor\", true)) {\n                saveDocument(comment, minorEdit);\n            } else {\n                saveAsAuthor(comment, minorEdit);\n            }\n        } else {\n            java.lang.Object[] args = {getDefaultEntityReferenceSerializer().serialize(getDocumentReference())};\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n    }\n\n    public void saveWithProgrammingRights() throws XWikiException\n    {\n        saveWithProgrammingRights(\"\", false);\n    }\n\n    public void saveWithProgrammingRights(String comment) throws XWikiException\n    {\n        saveWithProgrammingRights(comment, false);\n    }\n\n    public void saveWithProgrammingRights(String comment, boolean minorEdit) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            // The rights check above is generic, but the current method is a save operation, thus it should not be\n            // performed if the document's wiki is in read only mode.\n            XWikiContext context = getXWikiContext();\n            String currentWikiId = context.getWikiId();\n            try {\n                // Make sure we check the current document's wiki and not the current context's wiki.\n                context.setWikiId(getWiki());\n\n                if (!context.getWiki().isReadOnly()) {\n                    saveDocument(comment, minorEdit, false);\n                } else {\n                    java.lang.Object[] args =\n                        { getDefaultEntityReferenceSerializer().serialize(getDocumentReference()), getWiki() };\n                    throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS,\n                        XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                        \"Access denied in edit mode on document [{0}]. The wiki [{1}] is in read only mode.\", null,\n                        args);\n                }\n            } finally {\n                // Restore the context wiki.\n                context.setWikiId(currentWikiId);\n            }\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied with no programming rights document {0}\", null, args);\n        }\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor() throws XWikiException\n    {\n        saveAsAuthor(\"\", false);\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @param comment The comment to display in document history (what did you change in the document)\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor(String comment) throws XWikiException\n    {\n        saveAsAuthor(comment, false);\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @param comment The comment to display in document history (what did you change in the document)\n     * @param minorEdit Set true to advance the document version number by 0.1 or false to advance version to the next\n     *            integer + 0.1 eg: 25.1\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor(String comment, boolean minorEdit) throws XWikiException\n    {\n        XWikiContext xcontext = getXWikiContext();\n\n        getDoc().getAuthors()\n            .setOriginalMetadataAuthor(getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE));\n        DocumentReference author = getEffectiveAuthorReference();\n        if (hasAccess(Right.EDIT, author)) {\n            DocumentReference currentUser = xcontext.getUserReference();\n            try {\n                xcontext.setUserReference(author);\n\n                saveDocument(comment, minorEdit);\n            } finally {\n                xcontext.setUserReference(currentUser);\n            }\n        } else {\n            java.lang.Object[] args = { author, xcontext.getDoc(), getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied; user {0}, acting through script in document {1} cannot save document {2}\", null, args);\n        }\n    }\n\n    protected void saveDocument(String comment, boolean minorEdit) throws XWikiException\n    {\n        saveDocument(comment, minorEdit, true);\n    }\n\n    private void saveDocument(String comment, boolean minorEdit, boolean checkSaving) throws XWikiException\n    {\n        XWikiDocument doc = getDoc();\n\n        UserReference currentUserReference = getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE);\n        doc.getAuthors().setEffectiveMetadataAuthor(currentUserReference);\n\n        if (doc.isNew()) {\n            doc.getAuthors().setCreator(currentUserReference);\n        }\n\n        if (checkSaving) {\n            // Make sure the user is allowed to make this modification\n            getXWikiContext().getWiki().checkSavingDocument(doc.getAuthorReference(), doc, comment, minorEdit,\n                getXWikiContext());\n        }\n\n        getXWikiContext().getWiki().saveDocument(doc, comment, minorEdit, getXWikiContext());\n        this.initialDoc = this.doc;\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest() throws XWikiException\n    {\n        // Call to getDoc() ensures that we are working on a clone()\n        com.xpn.xwiki.api.Object obj =\n            new com.xpn.xwiki.api.Object(getDoc().addXObjectFromRequest(getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest(String className) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().addObjectFromRequest(className, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> addObjectsFromRequest(String className) throws XWikiException\n    {\n        return addObjectsFromRequest(className, \"\");\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest(String className, String prefix) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().addObjectFromRequest(className, prefix, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> addObjectsFromRequest(String className, String prefix) throws XWikiException\n    {\n        List<BaseObject> objs = getDoc().addObjectsFromRequest(className, prefix, getXWikiContext());\n        List<Object> wrapped = new ArrayList<Object>();\n        for (BaseObject object : objs) {\n            wrapped.add(new com.xpn.xwiki.api.Object(object, getXWikiContext()));\n        }\n\n        updateAuthor();\n\n        return wrapped;\n    }\n\n    public com.xpn.xwiki.api.Object updateObjectFromRequest(String className) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().updateObjectFromRequest(className, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> updateObjectsFromRequest(String className) throws XWikiException\n    {\n        return updateObjectsFromRequest(className, \"\");\n    }\n\n    public com.xpn.xwiki.api.Object updateObjectFromRequest(String className, String prefix) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().updateObjectFromRequest(className, prefix, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> updateObjectsFromRequest(String className, String prefix) throws XWikiException\n    {\n        List<BaseObject> objs = getDoc().updateObjectsFromRequest(className, prefix, getXWikiContext());\n        List<Object> wrapped = new ArrayList<Object>();\n        for (BaseObject object : objs) {\n            wrapped.add(new com.xpn.xwiki.api.Object(object, getXWikiContext()));\n        }\n\n        updateAuthor();\n\n        return wrapped;\n    }\n\n    public boolean isAdvancedContent()\n    {\n        return this.doc.isAdvancedContent();\n    }\n\n    public boolean isProgrammaticContent()\n    {\n        return this.doc.isProgrammaticContent();\n    }\n\n    /**\n     * Remove an XObject from the document. The changes are not persisted until the document is saved.\n     *\n     * @param object the object to remove\n     * @return {@code true} if the object was successfully removed, {@code false} if the object was not found in the\n     *         current document.\n     */\n    public boolean removeObject(Object object)\n    {\n        return getDoc().removeObject(object.getBaseObject());\n    }\n\n    /**\n     * Remove all the objects of a given type (XClass) from the document. The object counter is left unchanged, so that\n     * future objects will have new (different) numbers. However, on some storage engines the counter will be reset if\n     * the document is removed from the cache and reloaded from the persistent storage.\n     *\n     * @param className The class name of the objects to be removed.\n     * @return {@code true} if the objects were successfully removed, {@code false} if no object from the target class\n     *         was in the current document.\n     */\n    public boolean removeObjects(String className)\n    {\n        return getDoc().removeObjects(className);\n    }\n\n    /**\n     * Remove document from the wiki. Reinit <code>cloned</code>.\n     *\n     * @throws XWikiException\n     */\n    protected void deleteDocument() throws XWikiException\n    {\n        getXWikiContext().getWiki().deleteDocument(this.doc, getXWikiContext());\n        this.initialDoc = this.doc;\n    }\n\n    public void delete() throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\")) {\n            deleteDocument();\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n    }\n\n    /**\n     * Delete the document if the {@link #getContentAuthor content author} of the script calling this method has\n     * permission to do so. The deleter is also set to the said content author.\n     *\n     * @throws XWikiException if script author is not allowed to delete the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void deleteAsAuthor() throws XWikiException\n    {\n        XWikiContext xcontext = getXWikiContext();\n\n        DocumentReference author = getEffectiveAuthorReference();\n        if (hasAccess(Right.DELETE, author)) {\n            DocumentReference currentUser = xcontext.getUserReference();\n            try {\n                xcontext.setUserReference(author);\n\n                deleteDocument();\n            } finally {\n                xcontext.setUserReference(currentUser);\n            }\n        } else {\n            java.lang.Object[] args = { author, xcontext.getDoc(), this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied; user {0}, acting through script in document {1} cannot delete document {2}\", null,\n                args);\n        }\n    }\n\n    public void deleteWithProgrammingRights() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            deleteDocument();\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied with no programming rights document {0}\", null, args);\n        }\n    }\n\n    public String getVersionHashCode()\n    {\n        return this.doc.getVersionHashCode(getXWikiContext());\n    }\n\n    public int addAttachments() throws XWikiException\n    {\n        return addAttachments(null);\n    }\n\n    public int addAttachments(String fieldName) throws XWikiException\n    {\n        if (!hasAccessLevel(\"edit\")) {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n        XWiki xwiki = getXWikiContext().getWiki();\n        FileUploadPlugin fileupload = (FileUploadPlugin) xwiki.getPlugin(\"fileupload\", getXWikiContext());\n        List<FileItem> fileuploadlist = fileupload.getFileItems(getXWikiContext());\n        List<XWikiAttachment> attachments = new ArrayList<XWikiAttachment>();\n        // adding attachment list to context so we find the names\n        this.context.put(\"addedAttachments\", attachments);\n        int nb = 0;\n\n        if (fileuploadlist == null) {\n            return 0;\n        }\n\n        for (FileItem item : fileuploadlist) {\n            String name = item.getFieldName();\n            if (fieldName != null && !fieldName.equals(name)) {\n                continue;\n            }\n            if (item.isFormField()) {\n                continue;\n            }\n            byte[] data = fileupload.getFileItemData(name, getXWikiContext());\n            String filename;\n            String fname = fileupload.getFileName(name, getXWikiContext());\n            int i = fname.lastIndexOf(\"\\\\\");\n            if (i == -1) {\n                i = fname.lastIndexOf(\"/\");\n            }\n            filename = fname.substring(i + 1);\n            filename = filename.replaceAll(\"\\\\+\", \" \");\n\n            if ((data != null) && (data.length > 0)) {\n                XWikiAttachment attachment = this.getDoc().addAttachment(filename, data, getXWikiContext());\n                getDoc().saveAttachmentContent(attachment, getXWikiContext());\n                // commenting because this was already done by addAttachment\n                // getDoc().getAttachmentList().add(attachment);\n                attachments.add(attachment);\n                nb++;\n            }\n        }\n\n        if (nb > 0) {\n            getXWikiContext().getWiki().saveDocument(getDoc(), getXWikiContext());\n            this.initialDoc = this.doc;\n        }\n\n        return nb;\n    }\n\n    public Attachment addAttachment(String fileName, InputStream iStream)\n    {\n        try {\n            return new Attachment(this, this.getDoc().setAttachment(fileName, iStream, getXWikiContext()),\n                getXWikiContext());\n        } catch (IOException e) {\n            // TODO Log the error and let the user know about it\n        } finally {\n            updateAuthor();\n        }\n\n        return null;\n    }\n\n    public Attachment addAttachment(String fileName, byte[] data)\n    {\n        try {\n            return new Attachment(this, this.getDoc().addAttachment(fileName, data, getXWikiContext()),\n                getXWikiContext());\n        } catch (XWikiException e) {\n            // TODO Log the error and let the user know about it\n        } finally {\n            updateAuthor();\n        }\n\n        return null;\n    }\n\n    public boolean validate() throws XWikiException\n    {\n        return this.doc.validate(getXWikiContext());\n    }\n\n    public boolean validate(String[] classNames) throws XWikiException\n    {\n        return this.doc.validate(classNames, getXWikiContext());\n    }\n\n    /**\n     * Retrieves the validation script associated with this document, a Velocity script that is executed when validating\n     * the document data.\n     *\n     * @return A <code>String</code> representation of the validation script, or an empty string if there is no such\n     *         script.\n     */\n    public String getValidationScript()\n    {\n        return getDoc().getValidationScript();\n    }\n\n    /**\n     * Sets a new validation script for this document, a Velocity script that is executed when validating the document\n     * data.\n     *\n     * @param validationScript The new validation script, which can be an empty string or <code>null</code> if the\n     *            script should be removed.\n     */\n    public void setValidationScript(String validationScript)\n    {\n        getDoc().setValidationScript(validationScript);\n\n        updateAuthor();\n    }\n\n    /**\n     * Rename the current document and all the backlinks leading to it. Will also change parent field in all documents\n     * which list the document we are renaming as their parent. See\n     * {@link #rename(String, java.util.List, java.util.List)} for more details.\n     *\n     * @param newReference the reference to the new document\n     * @throws XWikiException in case of an error\n     * @since 2.3M2\n     */\n    public void rename(DocumentReference newReference) throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\") && this.context.getWiki().checkAccess(\"edit\",\n            this.context.getWiki().getDocument(newReference, this.context), this.context)) {\n            this.getDoc().rename(newReference, getXWikiContext());\n        }\n    }\n\n    /**\n     * Rename the current document and all the links pointing to it in the list of passed backlink documents. The\n     * renaming algorithm takes into account the fact that there are several ways to write a link to a given page and\n     * all those forms need to be renamed. For example the following links all point to the same page:\n     * <ul>\n     * <li>[Page]</li>\n     * <li>[Page?param=1]</li>\n     * <li>[currentwiki:Page]</li>\n     * <li>[currentwiki:CurrentSpace.Page]</li>\n     * </ul>\n     * <p>\n     * Note: links without a space are renamed with the space added and all documents which have the document being\n     * renamed as parent have their parent field set to \"currentwiki:CurrentSpace.Page\".\n     * </p>\n     *\n     * @param newDocumentName the new document name. If the space is not specified then defaults to the current space.\n     * @param backlinkDocumentNames the list of documents to parse and for which links will be modified to point to the\n     *            new renamed document.\n     * @throws XWikiException in case of an error\n     */\n    public void rename(String newDocumentName, List<String> backlinkDocumentNames) throws XWikiException\n    {\n        rename(newDocumentName, backlinkDocumentNames, Collections.emptyList());\n    }\n\n    /**\n     * Same as {@link #rename(String, List)} but the list of documents having the current document as their parent is\n     * passed in parameter.\n     *\n     * @param newDocumentName the new document name. If the space is not specified then defaults to the current space.\n     * @param backlinkDocumentNames the list of documents to parse and for which links will be modified to point to the\n     *            new renamed document.\n     * @param childDocumentNames the list of documents whose parent field will be set to the new document name.\n     * @throws XWikiException in case of an error\n     */\n    public void rename(String newDocumentName, List<String> backlinkDocumentNames, List<String> childDocumentNames)\n        throws XWikiException\n    {\n        List<DocumentReference> backlinkDocumentReferences = new ArrayList<DocumentReference>();\n        for (String backlinkDocumentName : backlinkDocumentNames) {\n            backlinkDocumentReferences.add(getCurrentMixedDocumentReferenceResolver().resolve(backlinkDocumentName));\n        }\n\n        List<DocumentReference> childDocumentReferences = new ArrayList<DocumentReference>();\n        for (String childDocumentName : childDocumentNames) {\n            childDocumentReferences.add(getCurrentMixedDocumentReferenceResolver().resolve(childDocumentName));\n        }\n\n        rename(getCurrentMixedDocumentReferenceResolver().resolve(newDocumentName), backlinkDocumentReferences,\n            childDocumentReferences);\n    }\n\n    /**\n     * Same as {@link #rename(String, List)} but the list of documents having the current document as their parent is\n     * passed in parameter.\n     *\n     * @param newReference the reference to the new document\n     * @param backlinkDocumentNames the list of reference to documents to parse and for which links will be modified to\n     *            point to the new renamed document\n     * @param childDocumentNames the list of references to documents whose parent field will be set to the new document\n     *            reference\n     * @throws XWikiException in case of an error\n     * @since 2.3M2\n     */\n    public void rename(DocumentReference newReference, List<DocumentReference> backlinkDocumentNames,\n        List<DocumentReference> childDocumentNames) throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\") && this.context.getWiki().checkAccess(\"edit\",\n            this.context.getWiki().getDocument(newReference, this.context), this.context)) {\n\n            // Every page given in childDocumentNames has it's parent changed whether it needs it or not.\n            // Let's make sure the user has edit permission on any page given which is not actually a child.\n            // Otherwise it would be embarrassing if a user called:\n            // $doc.rename(\"mynewpage\",$doc.getBacklinks(),$xwiki.searchDocuments(\"true\"))\n            int counter = childDocumentNames.size();\n            List<String> actuallyChildren = getChildren();\n            while (counter > 0) {\n                counter--;\n                if (!actuallyChildren.contains(childDocumentNames.get(counter))\n                    && !this.context.getWiki().checkAccess(\"edit\",\n                        this.context.getWiki().getDocument(childDocumentNames.get(counter), this.context),\n                        this.context)) {\n                    return;\n                }\n            }\n\n            this.getDoc().rename(newReference, backlinkDocumentNames, childDocumentNames, getXWikiContext());\n        }\n    }\n\n    /**\n     * Allow to easily access any revision of a document\n     *\n     * @param revision the version to access\n     * @return the document corresponding to the requested revision or {@code null} if the revision does not exist.\n     */\n    public Document getDocumentRevision(String revision)\n    {\n        try {\n            XWikiDocument documentRevision = getDocumentRevisionProvider().getRevision(this.doc, revision);\n\n            return documentRevision != null ? new Document(documentRevision, this.context) : null;\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to load revision [{}] of document [{}]\", revision, getDocumentReferenceWithLocale(),\n                e);\n\n            return null;\n        }\n    }\n\n    /**\n     * Allow to easily access the previous revision of a document\n     *\n     * @return Document\n     * @throws XWikiException\n     */\n    public Document getPreviousDocument() throws XWikiException\n    {\n        return getDocumentRevision(getPreviousVersion());\n    }\n\n    /**\n     * @return is document most recent. false if and only if there are older versions of this document.\n     */\n    public boolean isMostRecent()\n    {\n        return this.doc.isMostRecent();\n    }\n\n    /**\n     * @return if rendering transformations shall be executed in restricted mode and the title not be executed\n     * @since 14.10.7\n     * @since 15.2RC1\n     */\n    @Unstable\n    public boolean isRestricted()\n    {\n        return this.doc.isRestricted();\n    }\n\n    @Override\n    public String toString()\n    {\n        return this.doc.toString();\n    }\n\n    /**\n     * Convert the current document content from its current syntax to the new syntax passed as parameter.\n     *\n     * @param targetSyntaxId the syntax to convert to (eg \"xwiki/2.0\", \"xhtml/1.0\", etc)\n     * @throws XWikiException if an exception occurred during the conversion process\n     */\n    public boolean convertSyntax(String targetSyntaxId) throws XWikiException\n    {\n        try {\n            getDoc().convertSyntax(targetSyntaxId, this.context);\n        } catch (Exception ex) {\n            LOGGER.error(\n                \"Failed to convert document [\" + getPrefixedFullName() + \"] to syntax [\" + targetSyntaxId + \"]\", ex);\n\n            return false;\n        } finally {\n            updateAuthor();\n            updateContentAuthor();\n        }\n\n        return true;\n    }\n\n    /**\n     * Indicates whether the document is 'hidden' or not, meaning that it should not be returned in public search\n     * results or appear in the User Interface in general.\n     *\n     * @return <code>true</code> if the document is hidden, <code>false</code> otherwise.\n     */\n    public boolean isHidden()\n    {\n        return this.doc.isHidden();\n    }\n\n    /**\n     * Indicates whether the document should be 'hidden' or not, meaning that it should not be returned in public search\n     * results or appear in the User Interface in general.\n     *\n     * @param hidden <code>true</code> if the document should be 'hidden', <code>false</code> otherwise.\n     */\n    public void setHidden(boolean hidden)\n    {\n        this.doc.setHidden(hidden);\n    }\n\n    /**\n     * Drop permissions for the remainder of the rendering cycle. After this is called:\n     * <ul>\n     * <li>1. {@link com.xpn.xwiki.api.Api#hasProgrammingRights()} will always return false.</li>\n     * <li>2. {@link com.xpn.xwiki.api.XWiki#getDocumentAsAuthor(org.xwiki.model.reference.DocumentReference)},\n     * {@link com.xpn.xwiki.api.XWiki#getDocumentAsAuthor(String)}, {@link com.xpn.xwiki.api.Document#saveAsAuthor()},\n     * {@link com.xpn.xwiki.api.Document#saveAsAuthor(String)},\n     * {@link com.xpn.xwiki.api.Document#saveAsAuthor(String, boolean)}, and\n     * {@link com.xpn.xwiki.api.Document#deleteAsAuthor()} will perform all of their actions as if the document's\n     * content author was the guest user (XWiki.XWikiGuest).</li>\n     * </ul>\n     * <p>\n     * This sandboxing will expire at the end of the rendering cycle and can be suspended by beginning a new rendering\n     * cycle. A rendering cycle can be begin by calling {@link #getRenderedContent(String)}, {@link #display(String)}\n     * (or variations thereof) or by invoking the include macro or using\n     * {@link com.xpn.xwiki.api.XWiki#includeTopic(String)}\n     * <p>\n     * NOTE: Even if you include the same document, permissions will be regained. What this does is sandbox the\n     * remainder of the code on the page because although it can temporarily suspend the permissions drop, it cannot get\n     * itself to be executed with permissions because if it calls itself, it will hit the drop function first.\n     * <p>\n     * If you are interested in a more secure sandboxing method where code is guaranteed not to have permissions for the\n     * remainder of the request, you should consider {@link com.xpn.xwiki.api.Context#dropPermissions()}.\n     * <p>\n     *\n     * @since 3.2M2\n     */\n    public void dropPermissions()\n    {\n        // Set the droppedPermissions key to the context so if the context is cloned and\n        // pushed, it will return false until it is popped again.\n        final ExecutionContext context = Utils.getComponent(Execution.class).getContext();\n        context.setProperty(XWikiConstant.DROPPED_PERMISSIONS, System.identityHashCode(context));\n    }\n\n    /**\n     * @return true if this document is a translation of the main document (i.e. returned by\n     *         {@link #getTranslatedDocument(String)}); false if this is actually the main document (i.e. returned by\n     *         {@link com.xpn.xwiki.api.XWiki#getDocument(DocumentReference)}.\n     * @since 6.2M2\n     */\n    public boolean isTranslation()\n    {\n        return 1 == this.getDoc().getTranslation();\n    }\n\n    /**\n     * @return the maximum authorized length for a document full name (see {@link #getFullName()}).\n     * @since 11.4RC1\n     */\n    public int getLocalReferenceMaxLength()\n    {\n        return this.doc.getLocalReferenceMaxLength();\n    }\n\n    /**\n     * @return the authors of the document.\n     * @since 14.0RC1\n     */\n    @Unstable\n    public DocumentAuthors getAuthors()\n    {\n        if (this.hasAccess(Right.PROGRAM)) {\n            // We're using getDoc here to ensure to have a cloned doc\n            return getDoc().getAuthors();\n        } else {\n            // in this case we don't care if the doc is cloned or not since it's readonly\n            return new SafeDocumentAuthors(this.doc.getAuthors());\n        }\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Locale;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xwiki.component.manager.ComponentLookupException;\nimport org.xwiki.job.Job;\nimport org.xwiki.job.event.status.JobStatus;\nimport org.xwiki.job.event.status.JobStatus.State;\nimport org.xwiki.model.EntityType;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.PageReference;\nimport org.xwiki.model.reference.SpaceReference;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.rendering.renderer.PrintRendererFactory;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.security.authorization.ContextualAuthorizationManager;\nimport org.xwiki.security.authorization.Right;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.DocumentRevisionProvider;\nimport com.xpn.xwiki.doc.XWikiDeletedDocument;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.internal.XWikiInitializerJob;\nimport com.xpn.xwiki.internal.XWikiInitializerJobStatus;\nimport com.xpn.xwiki.objects.meta.MetaClass;\nimport com.xpn.xwiki.user.api.XWikiUser;\nimport com.xpn.xwiki.util.Programming;\nimport com.xpn.xwiki.web.Utils;\nimport com.xpn.xwiki.web.XWikiEngineContext;\nimport com.xpn.xwiki.web.XWikiURLFactory;\n\npublic class XWiki extends Api\n{\n    /** Logging helper object. */\n    protected static final Logger LOGGER = LoggerFactory.getLogger(XWiki.class);\n\n    /** The internal object wrapped by this API. */\n    private com.xpn.xwiki.XWiki xwiki;\n\n    /**\n     * @see #getStatsService()\n     */\n    private StatsService statsService;\n\n    /**\n     * @see #getCriteriaService()\n     */\n    private CriteriaService criteriaService;\n\n    /**\n     * @see com.xpn.xwiki.internal.model.reference.CurrentMixedStringDocumentReferenceResolver\n     */\n    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;\n\n    /**\n     * @see org.xwiki.model.internal.reference.DefaultStringDocumentReferenceResolver\n     */\n    private DocumentReferenceResolver<String> defaultDocumentReferenceResolver;\n\n    /**\n     * The object used to serialize entity references into strings. We need it because we have script APIs that work\n     * with entity references but have to call older, often internal, methods that still use string references.\n     */\n    private EntityReferenceSerializer<String> defaultStringEntityReferenceSerializer;\n\n    private DocumentReferenceResolver<EntityReference> currentgetdocumentResolver;\n\n    private DocumentRevisionProvider documentRevisionProvider;\n\n    private ContextualAuthorizationManager contextualAuthorizationManager;\n\n    /**\n     * XWiki API Constructor\n     *\n     * @param xwiki XWiki Main Object to wrap\n     * @param context XWikiContext to wrap\n     */\n    public XWiki(com.xpn.xwiki.XWiki xwiki, XWikiContext context)\n    {\n        super(context);\n\n        this.xwiki = xwiki;\n        this.statsService = new StatsService(context);\n        this.criteriaService = new CriteriaService(context);\n    }\n\n    private DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver()\n    {\n        if (this.currentMixedDocumentReferenceResolver == null) {\n            this.currentMixedDocumentReferenceResolver =\n                Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n        }\n\n        return this.currentMixedDocumentReferenceResolver;\n    }\n\n    private DocumentReferenceResolver<EntityReference> getCurrentgetdocumentResolver()\n    {\n        if (this.currentgetdocumentResolver == null) {\n            this.currentgetdocumentResolver =\n                Utils.getComponent(DocumentReferenceResolver.TYPE_REFERENCE, \"currentgetdocument\");\n        }\n\n        return this.currentgetdocumentResolver;\n    }\n\n    private DocumentReferenceResolver<String> getDefaultDocumentReferenceResolver()\n    {\n        if (this.defaultDocumentReferenceResolver == null) {\n            this.defaultDocumentReferenceResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_STRING);\n        }\n\n        return this.defaultDocumentReferenceResolver;\n    }\n\n    private EntityReferenceSerializer<String> getDefaultStringEntityReferenceSerializer()\n    {\n        if (this.defaultStringEntityReferenceSerializer == null) {\n            this.defaultStringEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n        }\n\n        return this.defaultStringEntityReferenceSerializer;\n    }\n\n    private DocumentRevisionProvider getDocumentRevisionProvider()\n    {\n        if (this.documentRevisionProvider == null) {\n            this.documentRevisionProvider = Utils.getComponent(DocumentRevisionProvider.class);\n        }\n\n        return this.documentRevisionProvider;\n    }\n\n    /**\n     * Privileged API allowing to access the underlying main XWiki Object\n     *\n     * @return Privileged Main XWiki Object\n     */\n    @Programming\n    public com.xpn.xwiki.XWiki getXWiki()\n    {\n        if (hasProgrammingRights()) {\n            return this.xwiki;\n        }\n\n        return null;\n    }\n\n    /**\n     * @return the status of the job initializing {@link com.xpn.xwiki.XWiki} instance\n     * @since 6.1M1\n     */\n    public XWikiInitializerJobStatus getJobStatus()\n    {\n        XWikiInitializerJob job = Utils.getComponent((Type) Job.class, XWikiInitializerJob.JOBTYPE);\n\n        return job != null ? job.getStatus() : null;\n    }\n\n    /**\n     * @return the status of the job initializing the instance or the current wiki\n     * @since 8.4RC1\n     */\n    public JobStatus getCurrentInitializerJobStatus()\n    {\n        // Get XWiki initializer job\n        JobStatus jobStatus = getJobStatus();\n\n        if (jobStatus == null) {\n            return null;\n        }\n\n        // The XWiki initialization is not done yet\n        if (jobStatus.getState() != State.FINISHED) {\n            return jobStatus;\n        }\n\n        // If XWiki initialization did not failed\n        if (this.xwiki != null) {\n            // Get current wiki initializer job\n            Job wikiJob = this.xwiki.getWikiInitializerJob(this.context.getWikiId());\n\n            jobStatus = wikiJob != null ? wikiJob.getStatus() : null;\n        }\n\n        return jobStatus;\n    }\n\n    /**\n     * @return XWiki's version in the format <code>(version).(SVN build number)</code>, or \"Unknown version\" if it\n     *         failed to be retrieved\n     */\n    public String getVersion()\n    {\n        return this.xwiki.getVersion();\n    }\n\n    /**\n     * API Allowing to access the current request URL being requested.\n     *\n     * @return the URL\n     * @throws XWikiException failed to create the URL\n     */\n    public String getRequestURL() throws XWikiException\n    {\n        return getXWikiContext().getURLFactory().getRequestURL(getXWikiContext()).toString();\n    }\n\n    /**\n     * API Allowing to access the current request URL being requested as a relative URL.\n     *\n     * @return the URL\n     * @throws XWikiException failed to create the URL\n     * @since 4.0M1\n     */\n    public String getRelativeRequestURL() throws XWikiException\n    {\n        XWikiURLFactory urlFactory = getXWikiContext().getURLFactory();\n\n        return urlFactory.getURL(urlFactory.getRequestURL(getXWikiContext()), getXWikiContext());\n    }\n\n    /**\n     * Loads an Document from the database. Rights are checked before sending back the document.\n     * <p>\n     * This is a helper for document reference but you can use {@link #getEntityDocument(String, EntityType)} for any\n     * other kind of reference.\n     *\n     * @param documentReference the reference of the document to be loaded\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @see #getEntityDocument(String, EntityType)\n     */\n    public Document getDocument(String documentReference) throws XWikiException\n    {\n        DocumentReference reference;\n\n        // We ignore the passed full name if it's null to be backward compatible with previous behaviors.\n        if (documentReference != null) {\n            // Note: We use the CurrentMixed Resolver since we want to use the default page name if the page isn't\n            // specified in the passed string, rather than use the current document's page name.\n            reference = getCurrentMixedDocumentReferenceResolver().resolve(documentReference);\n        } else {\n            reference = getDefaultDocumentReferenceResolver().resolve(\"\");\n        }\n\n        return getDocument(reference);\n    }\n\n    /**\n     * Loads an Document from the database. Rights are checked before sending back the document.\n     *\n     * @param reference the reference of the document to be loaded\n     * @param type the type of the reference\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @since 10.6RC1\n     */\n    public Document getEntityDocument(String reference, EntityType type) throws XWikiException\n    {\n        XWikiDocument doc = this.xwiki.getDocument(reference, type, getXWikiContext());\n        if (!getContextualAuthorizationManager().hasAccess(Right.VIEW, doc.getDocumentReference())) {\n            return null;\n        }\n\n        return doc.newDocument(getXWikiContext());\n    }\n\n    /**\n     * Loads a Document from the database. Rights are checked before sending back the document.\n     *\n     * @param reference the reference of the XWiki document to be loaded\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @since 2.3M1\n     */\n    public Document getDocument(DocumentReference reference) throws XWikiException\n    {\n        try {\n            XWikiDocument doc = this.xwiki.getDocument(reference, getXWikiContext());\n            if (this.xwiki.getRightService().hasAccessLevel(\"view\", getXWikiContext().getUser(),\n                doc.getPrefixedFullName(), getXWikiContext()) == false) {\n                return null;\n            }\n\n            return doc.newDocument(getXWikiContext());\n        } catch (Exception ex) {\n            LOGGER.warn(\"Failed to access document [{}]. Root reason: [{}]\", reference,\n                ExceptionUtils.getRootCauseMessage(ex));\n            return new Document(new XWikiDocument(reference), getXWikiContext());\n        }\n    }\n\n    /**\n     * Loads a Document from the store. Rights are checked before sending back the document.\n     * <p>\n     * The passed reference can be anything. If if a document child, the document reference will be extracted from it.\n     * If it's a document parent it will be completed with the necessary default references (for example if it's a space\n     * reference it will load the space home page).\n     *\n     * @param reference the reference close to the XWiki document to be loaded\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @since 7.1M2\n     */\n    public Document getDocument(EntityReference reference) throws XWikiException\n    {\n        return getDocument(this.xwiki.getDocumentReference(reference, getXWikiContext()));\n    }\n\n    /**\n     * Loads an Document from the database. Rights are checked on the author (contentAuthor) of the document containing\n     * the currently executing script before sending back the loaded document.\n     *\n     * @param fullName the full name of the XWiki document to be loaded\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @since 2.3M2\n     */\n    public Document getDocumentAsAuthor(String fullName) throws XWikiException\n    {\n        DocumentReference reference;\n\n        // We ignore the passed full name if it's null to match behavior of getDocument\n        if (fullName != null) {\n            // Note: We use the CurrentMixed Resolver since we want to use the default page name if the page isn't\n            // specified in the passed string, rather than use the current document's page name.\n            reference = getCurrentMixedDocumentReferenceResolver().resolve(fullName);\n        } else {\n            reference = getDefaultDocumentReferenceResolver().resolve(\"\");\n        }\n\n        return getDocumentAsAuthor(reference);\n    }\n\n    /**\n     * Loads an Document from the database. Rights are checked on the author (contentAuthor) of the document containing\n     * the currently executing script before sending back the loaded document.\n     *\n     * @param reference the reference of the XWiki document to be loaded\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @since 2.3M2\n     */\n    public Document getDocumentAsAuthor(DocumentReference reference) throws XWikiException\n    {\n        if (!getAuthorizationManager().hasAccess(Right.VIEW, getEffectiveAuthorReference(), reference)) {\n            return null;\n        }\n\n        return this.xwiki.getDocument(reference, getXWikiContext()).newDocument(getXWikiContext());\n    }\n\n    /**\n     * @param fullname the {@link XWikiDocument#getFullName() name} of the document to search for.\n     * @param locale an optional {@link XWikiDocument#getLocale() locale} to filter results.\n     * @return A list with all the deleted versions of a document in the recycle bin.\n     * @throws XWikiException if any error\n     */\n    public List<DeletedDocument> getDeletedDocuments(String fullname, String locale) throws XWikiException\n    {\n        XWikiDeletedDocument[] deletedDocuments = this.xwiki.getDeletedDocuments(fullname, locale, this.context);\n        List<DeletedDocument> result = wrapDeletedDocuments(deletedDocuments);\n        return result;\n    }\n\n    /**\n     * @param batchId id of the operation that deleted multiple documents at the same time; useful when trying to revert\n     *            the operation\n     * @return a list of all document versions that were deleted in the same batch, as part of the same operation\n     * @throws XWikiException if any error\n     * @since 9.4RC1\n     */\n    public List<DeletedDocument> getDeletedDocuments(String batchId) throws XWikiException\n    {\n        XWikiDeletedDocument[] deletedDocuments = this.xwiki.getDeletedDocuments(batchId, this.context);\n        List<DeletedDocument> result = wrapDeletedDocuments(deletedDocuments);\n        return result;\n    }\n\n    private List<DeletedDocument> wrapDeletedDocuments(XWikiDeletedDocument[] deletedDocuments)\n    {\n        if (deletedDocuments == null || deletedDocuments.length == 0) {\n            return Collections.emptyList();\n        }\n\n        List<DeletedDocument> result = new ArrayList<>(deletedDocuments.length);\n        for (XWikiDeletedDocument deletedDocument : deletedDocuments) {\n            result.add(new DeletedDocument(deletedDocument, this.context));\n        }\n\n        return result;\n    }\n\n    /**\n     * @param fullname - {@link XWikiDocument#getFullName()}\n     * @param locale - {@link XWikiDocument#getLocale()}\n     * @param index - {@link XWikiDocument#getId()}\n     * @return the specified document from the recycle bin\n     * @throws XWikiException if any error\n     * @deprecated since 9.4RC1. Use {@link #getDeletedDocument(String)} instead.\n     */\n    @Deprecated\n    public DeletedDocument getDeletedDocument(String fullname, String locale, String index) throws XWikiException\n    {\n        return getDeletedDocument(index);\n    }\n\n    /**\n     * @return the specified document from the recycle bin\n     * @throws XWikiException if any error\n     * @since 9.4RC1\n     */\n    public DeletedDocument getDeletedDocument(String index) throws XWikiException\n    {\n        if (!NumberUtils.isDigits(index)) {\n            return null;\n        }\n\n        XWikiDeletedDocument dd = this.xwiki.getDeletedDocument(Long.parseLong(index), this.context);\n        if (dd == null) {\n            return null;\n        }\n\n        return new DeletedDocument(dd, this.context);\n    }\n\n    /**\n     * Retrieve all the deleted attachments that belonged to a certain document. Note that this does not distinguish\n     * between different incarnations of a document name, and it does not require that the document still exists, it\n     * returns all the attachments that at the time of their deletion had a document with the specified name as their\n     * owner.\n     *\n     * @param docName the {@link XWikiDocument#getFullName() name} of the owner document\n     * @return A list with all the deleted attachments which belonged to the specified document. If no such attachments\n     *         are found in the trash, an empty list is returned.\n     */\n    public List<DeletedAttachment> getDeletedAttachments(String docName)\n    {\n        try {\n            List<com.xpn.xwiki.doc.DeletedAttachment> attachments =\n                this.xwiki.getDeletedAttachments(docName, this.context);\n            if (attachments == null || attachments.isEmpty()) {\n                attachments = Collections.emptyList();\n            }\n            List<DeletedAttachment> result = new ArrayList<DeletedAttachment>(attachments.size());\n            for (com.xpn.xwiki.doc.DeletedAttachment attachment : attachments) {\n                result.add(new DeletedAttachment(attachment, this.context));\n            }\n            return result;\n        } catch (Exception ex) {\n            LOGGER.warn(\"Failed to retrieve deleted attachments\", ex);\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * Retrieve all the deleted attachments that belonged to a certain document and had the specified name. Multiple\n     * versions can be returned since the same file can be uploaded and deleted several times, creating different\n     * instances in the trash. Note that this does not distinguish between different incarnations of a document name,\n     * and it does not require that the document still exists, it returns all the attachments that at the time of their\n     * deletion had a document with the specified name as their owner.\n     *\n     * @param docName the {@link DeletedAttachment#getDocName() name of the document} the attachment belonged to\n     * @param filename the {@link DeletedAttachment#getFilename() name} of the attachment to search for\n     * @return A list with all the deleted attachments which belonged to the specified document and had the specified\n     *         filename. If no such attachments are found in the trash, an empty list is returned.\n     */\n    public List<DeletedAttachment> getDeletedAttachments(String docName, String filename)\n    {\n        try {\n            List<com.xpn.xwiki.doc.DeletedAttachment> attachments =\n                this.xwiki.getDeletedAttachments(docName, filename, this.context);\n            if (attachments == null) {\n                attachments = Collections.emptyList();\n            }\n            List<DeletedAttachment> result = new ArrayList<DeletedAttachment>(attachments.size());\n            for (com.xpn.xwiki.doc.DeletedAttachment attachment : attachments) {\n                result.add(new DeletedAttachment(attachment, this.context));\n            }\n            return result;\n        } catch (Exception ex) {\n            LOGGER.warn(\"Failed to retrieve deleted attachments\", ex);\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * Retrieve a specific attachment from the trash.\n     *\n     * @param id the unique identifier of the entry in the trash\n     * @return specified attachment from the trash, {@code null} if not found\n     */\n    public DeletedAttachment getDeletedAttachment(String id)\n    {\n        try {\n            com.xpn.xwiki.doc.DeletedAttachment attachment = this.xwiki.getDeletedAttachment(id, this.context);\n            if (attachment != null) {\n                return new DeletedAttachment(attachment, this.context);\n            }\n        } catch (Exception ex) {\n            LOGGER.warn(\"Failed to retrieve deleted attachment\", ex);\n        }\n        return null;\n    }\n\n    /**\n     * Returns whether a document exists or not\n     *\n     * @param fullname Fullname of the XWiki document to be loaded\n     * @return true if the document exists, false if not\n     * @throws XWikiException\n     */\n    public boolean exists(String fullname) throws XWikiException\n    {\n        return this.xwiki.exists(fullname, getXWikiContext());\n    }\n\n    /**\n     * Returns whether a document exists or not\n     *\n     * @param reference the reference of the document to check for its existence\n     * @return true if the document exists, false if not\n     * @since 2.3M2\n     */\n    public boolean exists(DocumentReference reference) throws XWikiException\n    {\n        return this.xwiki.exists(reference, getXWikiContext());\n    }\n\n    /**\n     * Returns whether a page exists or not.\n     * <p>\n     * Since 14.9, if the check fail an exception is thrown.\n     *\n     * @param reference the reference of the page to check for its existence\n     * @return true if the page exists, false if not\n     * @throws XWikiException when failing to check page existence\n     * @since 13.3RC1\n     * @since 12.10.7\n     */\n    public boolean exists(PageReference reference) throws XWikiException\n    {\n        return this.xwiki.exists(reference, getXWikiContext());\n    }\n\n    /**\n     * Verify the rights the current user has on a document. If the document requires rights and the user is not\n     * authenticated he will be redirected to the login page.\n     *\n     * @param docname fullname of the document\n     * @param right right to check (\"view\", \"edit\", \"admin\", \"delete\")\n     * @return true if it exists\n     */\n    public boolean checkAccess(String docname, String right)\n    {\n        try {\n            DocumentReference docReference = getCurrentMixedDocumentReferenceResolver().resolve(docname);\n            XWikiDocument doc = getXWikiContext().getWiki().getDocument(docReference, this.context);\n            return getXWikiContext().getWiki().checkAccess(right, doc, getXWikiContext());\n        } catch (XWikiException e) {\n            return false;\n        }\n    }\n\n    /**\n     * Loads an Document from the database. Rights are checked before sending back the document.\n     *\n     * @param space Space to use in case no space is defined in the provided <code>fullname</code>\n     * @param fullname the full name or relative name of the document to load\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     */\n    public Document getDocument(String space, String fullname) throws XWikiException\n    {\n        XWikiDocument doc = this.xwiki.getDocument(space, fullname, getXWikiContext());\n        if (this.xwiki.getRightService().hasAccessLevel(\"view\", getXWikiContext().getUser(), doc.getFullName(),\n            getXWikiContext()) == false) {\n            return null;\n        }\n\n        return doc.newDocument(getXWikiContext());\n    }\n\n    /**\n     * Load a specific revision of a document\n     *\n     * @param doc Document for which to load a specific revision\n     * @param rev Revision number\n     * @return Specific revision of a document\n     * @throws XWikiException is never thrown\n     */\n    public Document getDocument(Document doc, String rev) throws XWikiException\n    {\n        if (doc == null || doc.getDoc() == null) {\n            return null;\n        }\n\n        if (!getContextualAuthorizationManager().hasAccess(Right.VIEW, doc.getDocumentReference())) {\n            // Finally we return null, otherwise showing search result is a real pain\n            return null;\n        }\n\n        return doc.getDocumentRevision(rev);\n    }\n\n    /**\n     * Load a specific revision of a document\n     *\n     * @param reference Document for which to load a specific revision\n     * @param revision Revision number\n     * @return Specific revision of a document\n     * @throws XWikiException is never thrown\n     * @since 9.4RC1\n     */\n    public Document getDocument(DocumentReference reference, String revision) throws XWikiException\n    {\n        try {\n            if (reference != null && getContextualAuthorizationManager().hasAccess(Right.VIEW, reference)) {\n                XWikiDocument documentRevision = getDocumentRevisionProvider().getRevision(reference, revision);\n\n                if (documentRevision != null) {\n                    return new Document(documentRevision, this.context);\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to access revision [{}] of document {}\", revision, reference, e);\n        }\n\n        return null;\n    }\n\n    /**\n     * Output content in the edit content textarea\n     *\n     * @param content content to output\n     * @return the textarea text content\n     */\n    public String getTextArea(String content)\n    {\n        return com.xpn.xwiki.XWiki.getTextArea(content, getXWikiContext());\n    }\n\n    /**\n     * Get the list of available classes in the wiki\n     *\n     * @return list of classes names\n     * @throws XWikiException\n     */\n    public List<String> getClassList() throws XWikiException\n    {\n        return this.xwiki.getClassList(getXWikiContext());\n    }\n\n    /**\n     * Get the global MetaClass object\n     *\n     * @return MetaClass object\n     */\n    public MetaClass getMetaclass()\n    {\n        return this.xwiki.getMetaclass();\n    }\n\n    /**\n     * API allowing to search for document names matching a query. Examples:\n     * <ul>\n     * <li>Query: <code>where doc.space='Main' order by doc.creationDate desc</code>. Result: All the documents in space\n     * 'Main' ordered by the creation date from the most recent</li>\n     * <li>Query: <code>where doc.name like '%sport%' order by doc.name asc</code>. Result: All the documents containing\n     * 'sport' in their name ordered by document name</li>\n     * <li>Query: <code>where doc.content like '%sport%' order by doc.author</code> Result: All the documents containing\n     * 'sport' in their content ordered by the author</li>\n     * <li>Query: <code>where doc.creator = 'XWiki.LudovicDubost' order by doc.creationDate\n     *       desc</code>. Result: All the documents with creator LudovicDubost ordered by the creation date from the\n     * most recent</li>\n     * <li>Query: <code>where doc.author = 'XWiki.LudovicDubost' order by doc.date desc</code>. Result: All the\n     * documents with last author LudovicDubost ordered by the last modification date from the most recent.</li>\n     * <li>Query: <code>,BaseObject as obj where doc.fullName=obj.name and\n     *       obj.className='XWiki.XWikiComments' order by doc.date desc</code>. Result: All the documents with at least\n     * one comment ordered by the last modification date from the most recent</li>\n     * <li>Query: <code>,BaseObject as obj, StringProperty as prop where\n     *       doc.fullName=obj.name and obj.className='XWiki.XWikiComments' and obj.id=prop.id.id\n     *       and prop.id.name='author' and prop.value='XWiki.LudovicDubost' order by doc.date\n     *       desc</code>. Result: All the documents with at least one comment from LudovicDubost ordered by the last\n     * modification date from the most recent</li>\n     * </ul>\n     *\n     * @param wheresql Query to be run (either starting with \", BaseObject as obj where..\" or by \"where ...\"\n     * @return List of document names matching (Main.Page1, Main.Page2)\n     * @throws XWikiException\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocuments(String wheresql) throws XWikiException\n    {\n        return this.xwiki.getStore().searchDocumentsNames(wheresql, getXWikiContext());\n    }\n\n    /**\n     * API allowing to search for document names matching a query return only a limited number of elements and skipping\n     * the first rows. The query part is the same as searchDocuments\n     *\n     * @param wheresql query to use similar to searchDocuments(wheresql)\n     * @param nb return only 'nb' rows\n     * @param start skip the first 'start' rows\n     * @return List of document names matching\n     * @throws XWikiException\n     * @see List searchDocuments(String where sql)\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocuments(String wheresql, int nb, int start) throws XWikiException\n    {\n        return this.xwiki.getStore().searchDocumentsNames(wheresql, nb, start, getXWikiContext());\n    }\n\n    /**\n     * Privileged API allowing to search for document names matching a query return only a limited number of elements\n     * and skipping the first rows. The return values contain the list of columns specified in addition to the document\n     * space and name The query part is the same as searchDocuments\n     *\n     * @param wheresql query to use similar to searchDocuments(wheresql)\n     * @param nb return only 'nb' rows\n     * @param start skip the first 'start' rows\n     * @param selectColumns List of columns to add to the result\n     * @return List of Object[] with the column values of the matching rows\n     * @throws XWikiException\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocuments(String wheresql, int nb, int start, String selectColumns) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.xwiki.getStore().searchDocumentsNames(wheresql, nb, start, selectColumns, getXWikiContext());\n        }\n\n        return Collections.emptyList();\n    }\n\n    /**\n     * API allowing to search for documents allowing to have mutliple entries per locale\n     *\n     * @param wheresql query to use similar to searchDocuments(wheresql)\n     * @param distinctbylocale true to return multiple rows per locale\n     * @return List of Document object matching\n     * @throws XWikiException\n     */\n    public List<Document> searchDocuments(String wheresql, boolean distinctbylocale) throws XWikiException\n    {\n        return convert(this.xwiki.getStore().searchDocuments(wheresql, distinctbylocale, getXWikiContext()));\n    }\n\n    /**\n     * API allowing to search for documents allowing to have multiple entries per locale\n     *\n     * @param wheresql query to use similar to searchDocuments(wheresql)\n     * @param distinctbylocale true to return multiple rows per locale\n     * @return List of Document object matching\n     * @param nb return only 'nb' rows\n     * @param start skip the first 'start' rows\n     * @throws XWikiException\n     */\n    public List<Document> searchDocuments(String wheresql, boolean distinctbylocale, int nb, int start)\n        throws XWikiException\n    {\n        return convert(this.xwiki.getStore().searchDocuments(wheresql, distinctbylocale, nb, start, getXWikiContext()));\n    }\n\n    /**\n     * Search documents by passing HQL where clause values as parameters. This allows generating a Named HQL query which\n     * will automatically encode the passed values (like escaping single quotes). This API is recommended to be used\n     * over the other similar methods where the values are passed inside the where clause and for which you'll need to\n     * do the encoding/escaping yourself before calling them.\n     * <p>\n     * Example\n     * </p>\n     *\n     * <pre>\n     * &lt;code&gt;\n     * #set($orphans = $xwiki.searchDocuments(&quot; where doc.fullName &lt;&gt; ?1 and (doc.parent = ?2 or &quot;\n     *     + &quot;(doc.parent = ?3 and doc.space = ?4))&quot;,\n     *     [&quot;${doc.fullName}as&quot;, ${doc.fullName}, ${doc.name}, ${doc.space}]))\n     * &lt;/code&gt;\n     * </pre>\n     *\n     * @param parameterizedWhereClause the HQL where clause. For example\n     *            {@code where doc.fullName <> ?1 and (doc.parent = ?2 or (doc.parent = ?3 and doc.space = ?4))}\n     * @param maxResults the number of rows to return. If 0 then all rows are returned\n     * @param startOffset the number of rows to skip. If 0 don't skip any row\n     * @param parameterValues the where clause values that replace the question marks (?1, ?2, etc.)\n     * @return a list of document names\n     * @throws XWikiException in case of error while performing the query\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocuments(String parameterizedWhereClause, int maxResults, int startOffset,\n        List<?> parameterValues) throws XWikiException\n    {\n        return this.xwiki.getStore().searchDocumentsNames(parameterizedWhereClause, maxResults, startOffset,\n            parameterValues, getXWikiContext());\n    }\n\n    /**\n     * Same as {@link #searchDocuments(String, int, int, java.util.List)} but returns all rows.\n     *\n     * @see #searchDocuments(String, int, int, java.util.List)\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocuments(String parameterizedWhereClause, List<?> parameterValues) throws XWikiException\n    {\n        return this.xwiki.getStore().searchDocumentsNames(parameterizedWhereClause, parameterValues, getXWikiContext());\n    }\n\n    /**\n     * Search documents in the provided wiki by passing HQL where clause values as parameters. See\n     * {@link #searchDocuments(String, int, int, java.util.List)} for more details.\n     *\n     * @param wikiName the name of the wiki where to search.\n     * @param parameterizedWhereClause the HQL where clause. For example\n     *            {@code where doc.fullName <> ?1 and (doc.parent = ?2 or (doc.parent = ?3 and doc.space = ?4))}\n     * @param maxResults the number of rows to return. If 0 then all rows are returned\n     * @param startOffset the number of rows to skip. If 0 don't skip any row\n     * @param parameterValues the where clause values that replace the question marks (?)\n     * @return a list of document full names (Space.Name).\n     * @see #searchDocuments(String, int, int, java.util.List)\n     * @throws XWikiException in case of error while performing the query\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocumentsNames(String wikiName, String parameterizedWhereClause, int maxResults,\n        int startOffset, List<?> parameterValues) throws XWikiException\n    {\n        String database = this.context.getWikiId();\n\n        try {\n            this.context.setWikiId(wikiName);\n\n            return searchDocuments(parameterizedWhereClause, maxResults, startOffset, parameterValues);\n        } finally {\n            this.context.setWikiId(database);\n        }\n    }\n\n    /**\n     * Search spaces by passing HQL where clause values as parameters. See\n     * {@link #searchDocuments(String, int, int, List)} for more about parameterized hql clauses.\n     *\n     * @param parametrizedSqlClause the HQL where clause. For example\n     *            {@code where doc.fullName <> ?1 and (doc.parent = ?2 or (doc.parent = ?3 and doc.space = ?4))}\n     * @param nb the number of rows to return. If 0 then all rows are returned\n     * @param start the number of rows to skip. If 0 don't skip any row\n     * @param parameterValues the where clause values that replace the question marks (?)\n     * @return a list of spaces names.\n     * @throws XWikiException in case of error while performing the query\n     */\n    public List<String> searchSpacesNames(String parametrizedSqlClause, int nb, int start, List<?> parameterValues)\n        throws XWikiException\n    {\n        return this.xwiki.getStore().search(\"select distinct doc.space from XWikiDocument doc \" + parametrizedSqlClause,\n            nb, start, parameterValues, this.context);\n    }\n\n    /**\n     * Search attachments by passing HQL where clause values as parameters. See\n     * {@link #searchDocuments(String, int, int, List)} for more about parameterized hql clauses. You can specify\n     * properties of attach (the attachment) or doc (the document it is attached to)\n     *\n     * @param parametrizedSqlClause The HQL where clause. For example\n     *            {@code where doc.fullName <> ?1 and (doc.parent = ?2 or (doc.parent = ?3 and doc.space = ?4))}\n     * @param nb The number of rows to return. If 0 then all rows are returned\n     * @param start The number of rows to skip at the beginning.\n     * @param parameterValues A {@link java.util.List} of the where clause values that replace the question marks (?)\n     * @return A List of {@link Attachment} objects.\n     * @throws XWikiException in case of error while performing the query\n     * @since 5.0M2\n     */\n    public List<Attachment> searchAttachments(String parametrizedSqlClause, int nb, int start, List<?> parameterValues)\n        throws XWikiException\n    {\n        return convertAttachments(\n            this.xwiki.searchAttachments(parametrizedSqlClause, true, nb, start, parameterValues, this.context));\n    }\n\n    /**\n     * Count attachments returned by a given parameterized query\n     *\n     * @param parametrizedSqlClause Everything which would follow the \"WHERE\" in HQL see:\n     *            {@link #searchDocuments(String, int, int, List)}\n     * @param parameterValues A {@link java.util.List} of the where clause values that replace the question marks (?)\n     * @return int number of attachments found.\n     * @throws XWikiException\n     * @see #searchAttachments(String, int, int, List)\n     * @since 5.0M2\n     */\n    public int countAttachments(String parametrizedSqlClause, List<?> parameterValues) throws XWikiException\n    {\n        return this.xwiki.countAttachments(parametrizedSqlClause, parameterValues, this.context);\n    }\n\n    /**\n     * Function to wrap a list of XWikiDocument into Document objects\n     *\n     * @param docs list of XWikiDocument\n     * @return list of Document objects\n     */\n    public List<Document> wrapDocs(List<?> docs)\n    {\n        List<Document> result = new ArrayList<Document>();\n        if (docs != null) {\n            for (java.lang.Object obj : docs) {\n                try {\n                    if (obj instanceof XWikiDocument) {\n                        XWikiDocument doc = (XWikiDocument) obj;\n                        Document wrappedDoc = doc.newDocument(getXWikiContext());\n                        result.add(wrappedDoc);\n                    } else if (obj instanceof Document) {\n                        result.add((Document) obj);\n                    } else if (obj instanceof String) {\n                        Document doc = getDocument(obj.toString());\n                        if (doc != null) {\n                            result.add(doc);\n                        }\n                    }\n                } catch (XWikiException ex) {\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * API allowing to parse a text content to evaluate velocity scripts\n     *\n     * @param content\n     * @return evaluated content if the content contains velocity scripts\n     * @deprecated Since 7.2M1. Use specific rendering/parsing options for the content type you want to parse/render.\n     */\n    @Deprecated\n    public String parseContent(String content)\n    {\n        return this.xwiki.parseContent(content, getXWikiContext());\n    }\n\n    /**\n     * API to parse a velocity template provided by the current Skin The template is first looked in the skin active for\n     * the user, the space or the wiki. If the template does not exist in that skin, the template is looked up in the\n     * \"parent skin\" of the skin\n     *\n     * @param template Template name (\"view\", \"edit\", \"comment\")\n     * @return Evaluated content from the template\n     */\n    public String parseTemplate(String template)\n    {\n        return this.xwiki.parseTemplate(template, getXWikiContext());\n    }\n\n    /**\n     * API to render a velocity template provided by the current Skin The template is first looked in the skin active\n     * for the user, the space or the wiki. If the template does not exist in that skin, the template is looked up in\n     * the \"parent skin\" of the skin\n     *\n     * @param template Template name (\"view\", \"edit\", \"comment\")\n     * @return Evaluated content from the template\n     */\n    public String renderTemplate(String template)\n    {\n        return this.xwiki.renderTemplate(template, getXWikiContext());\n    }\n\n    /**\n     * Return the URL of the static file provided by the current skin The file is first looked in the skin active for\n     * the user, the space or the wiki. If the file does not exist in that skin, the file is looked up in the \"parent\n     * skin\" of the skin. The file can be a CSS file, an image file, a javascript file, etc.\n     *\n     * @param filename Filename to be looked up in the skin (logo.gif, style.css)\n     * @return URL to access this file\n     */\n    public String getSkinFile(String filename)\n    {\n        return this.xwiki.getSkinFile(filename, getXWikiContext());\n    }\n\n    /**\n     * Return the URL of the static file provided by the current skin The file is first looked in the skin active for\n     * the user, the space or the wiki. If the file does not exist in that skin, the file is looked up in the \"parent\n     * skin\" of the skin. The file can be a CSS file, an image file, a javascript file, etc.\n     *\n     * @param filename Filename to be looked up in the skin (logo.gif, style.css)\n     * @param forceSkinAction true to make sure that static files are retrieved through the skin action, to allow\n     *            parsing of velocity on CSS files\n     * @return URL to access this file\n     */\n    public String getSkinFile(String filename, boolean forceSkinAction)\n    {\n        return this.xwiki.getSkinFile(filename, forceSkinAction, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the current skin for this request and user The skin is first derived from the request \"skin\"\n     * parameter If this parameter does not exist, the user preference \"skin\" is looked up If this parameter does not\n     * exist or is empty, the space preference \"skin\" is looked up If this parameter does not exist or is empty, the\n     * XWiki preference \"skin\" is looked up If this parameter does not exist or is empty, the xwiki.cfg parameter\n     * xwiki.defaultskin is looked up If this parameter does not exist or is empty, the xwiki.cfg parameter\n     * xwiki.defaultbaseskin is looked up If this parameter does not exist or is empty, the skin is \"colibri\"\n     *\n     * @return The current skin for this request and user\n     */\n    public String getSkin()\n    {\n        return this.xwiki.getSkin(getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the current skin for this request and user. Each skin has a skin it is based on. If not the base\n     * skin is the xwiki.cfg parameter \"xwiki.defaultbaseskin\". If this parameter does not exist or is empty, the base\n     * skin is \"colibri\".\n     *\n     * @return The current baseskin for this request and user\n     */\n    public String getBaseSkin()\n    {\n        return this.xwiki.getBaseSkin(getXWikiContext());\n    }\n\n    /**\n     * API to access the copyright for this space. The copyright is read in the space preferences. If it does not exist\n     * or is empty it is read from the XWiki preferences.\n     *\n     * @return the text for the copyright\n     */\n    public String getSpaceCopyright()\n    {\n        return this.xwiki.getSpaceCopyright(getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference There can be one preference object per locale This function will find the right\n     * preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale\n     */\n    public String getXWikiPreference(String preference)\n    {\n        return this.xwiki.getXWikiPreference(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference There can be one preference object per locale This function will find the right\n     * preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the preference does not exist or is empty\n     * @return The preference for this wiki and the current locale\n     */\n    public String getXWikiPreference(String preference, String defaultValue)\n    {\n        return this.xwiki.getXWikiPreference(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access an Space Preference There can be one preference object per locale This function will find the right\n     * preference object associated to the current active locale If no preference is found it will look in the XWiki\n     * Preferences\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale\n     */\n    public String getSpacePreference(String preference)\n    {\n        return this.xwiki.getSpacePreference(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access an Space Preference There can be one preference object per locale This function will find the right\n     * preference object associated to the current active locale If no preference is found it will look in the XWiki\n     * Preferences\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the preference does not exist or is empty\n     * @return The preference for this wiki and the current locale\n     */\n    public String getSpacePreference(String preference, String defaultValue)\n    {\n        return this.xwiki.getSpacePreference(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access a Skin Preference The skin object is the current user's skin\n     *\n     * @param preference Preference name\n     * @return The preference for the current skin\n     */\n    public String getSkinPreference(String preference)\n    {\n        return this.xwiki.getSkinPreference(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access a Skin Preference The skin object is the current user's skin\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the preference does not exist or is empty\n     * @return The preference for the current skin\n     */\n    public String getSkinPreference(String preference, String defaultValue)\n    {\n        return this.xwiki.getSkinPreference(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * Get the reference of the space and fallback on parent space or wiki in case nothing is found.\n     * <p>\n     * If the property is not set on any level then empty String is returned.\n     * \n     * @param preference the name of the preference key\n     * @param spaceReference the reference of the space\n     * @return the value of the preference or empty String if it could not be found\n     * @since 7.4M1\n     */\n    public String getSpacePreferenceFor(String preference, SpaceReference spaceReference)\n    {\n        return this.xwiki.getSpacePreference(preference, spaceReference, getXWikiContext());\n    }\n\n    /**\n     * Get the reference of the space and fallback on parent space or wiki in case nothing is found.\n     * <p>\n     * If the property is not set on any level then <code>defaultValue</code> is returned.\n     * \n     * @param preference the name of the preference key\n     * @param spaceReference the reference of the space\n     * @param defaultValue the value to return if the preference can't be found\n     * @return the value of the preference or <code>defaultValue</code> if it could not be found\n     * @since 7.4M1\n     */\n    public String getSpacePreferenceFor(String preference, SpaceReference spaceReference, String defaultValue)\n    {\n        return this.xwiki.getSpacePreference(preference, spaceReference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference as a long number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the preference does not exist or is empty\n     * @return The preference for this wiki and the current locale in long format\n     */\n    public long getXWikiPreferenceAsLong(String preference, long defaultValue)\n    {\n        return this.xwiki.getXWikiPreferenceAsLong(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference as a long number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale in long format\n     */\n    public long getXWikiPreferenceAsLong(String preference)\n    {\n        return this.xwiki.getXWikiPreferenceAsLong(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access a Space Preference as a long number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale If no preference is found it will\n     * look for the XWiki Preference\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the prefenrece does not exist or is empty\n     * @return The preference for this wiki and the current locale in long format\n     */\n    public long getSpacePreferenceAsLong(String preference, long defaultValue)\n    {\n        return this.xwiki.getSpacePreferenceAsLong(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access a Space Preference as a long number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale If no preference is found it will\n     * look for the XWiki Preference\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale in long format\n     */\n    public long getSpacePreferenceAsLong(String preference)\n    {\n        return this.xwiki.getSpacePreferenceAsLong(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference as an int number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the prefenrece does not exist or is empty\n     * @return The preference for this wiki and the current locale in int format\n     */\n    public int getXWikiPreferenceAsInt(String preference, int defaultValue)\n    {\n        return this.xwiki.getXWikiPreferenceAsInt(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference as a int number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale in int format\n     */\n    public int getXWikiPreferenceAsInt(String preference)\n    {\n        return this.xwiki.getXWikiPreferenceAsInt(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access a space Preference as a int number There can be one preference object per locale This function will\n     * find the right preference object associated to the current active locale If no preference is found it will look\n     * for the XWiki Preference\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the prefenrece does not exist or is empty\n     * @return The preference for this wiki and the current locale in int format\n     */\n    public int getSpacePreferenceAsInt(String preference, int defaultValue)\n    {\n        return this.xwiki.getSpacePreferenceAsInt(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access a Space Preference as a int number There can be one preference object per locale This function will\n     * find the right preference object associated to the current active locale If no preference is found it will look\n     * for the XWiki Preference\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale in int format\n     */\n    public int getSpacePreferenceAsInt(String preference)\n    {\n        return this.xwiki.getSpacePreferenceAsInt(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access a User Preference This function will look in the User profile for the preference If no preference\n     * is found it will look in the Space Preferences If no preference is found it will look in the XWiki Preferences\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale\n     */\n    public String getUserPreference(String preference)\n    {\n        return this.xwiki.getUserPreference(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access a User Preference from cookie This function will look in the session cookie for the preference\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale\n     */\n    public String getUserPreferenceFromCookie(String preference)\n    {\n        return this.xwiki.getUserPreferenceFromCookie(preference, getXWikiContext());\n    }\n\n    /**\n     * Same as {@link #getLocalePreference()} but as a String.\n     *\n     * @return the locale to use\n     * @deprecated since 8.0M1, use {@link #getLocalePreference()} instead\n     */\n    @Deprecated\n    public String getLanguagePreference()\n    {\n        return this.xwiki.getLanguagePreference(getXWikiContext());\n    }\n\n    /**\n     * First try to find the current locale in use from the XWiki context. If none is used and if the wiki is not\n     * multilingual use the default locale defined in the XWiki preferences. If the wiki is multilingual try to get the\n     * locale passed in the request. If none was passed try to get it from a cookie. If no locale cookie exists then use\n     * the user default locale and barring that use the browser's \"Accept-Language\" header sent in HTTP request. If none\n     * is defined use the default locale.\n     *\n     * @return the locale to use\n     * @since 8.0M1\n     */\n    public Locale getLocalePreference()\n    {\n        return this.xwiki.getLocalePreference(getXWikiContext());\n    }\n\n    /**\n     * Same as {@link #getInterfaceLocalePreference()} but as a String.\n     *\n     * @return the document locale preference for the request\n     * @deprecated since 8.0M1, use {@link #getInterfaceLocalePreference()} instead\n     */\n    @Deprecated\n    public String getInterfaceLanguagePreference()\n    {\n        return this.xwiki.getInterfaceLanguagePreference(getXWikiContext());\n    }\n\n    /**\n     * API to access the interface locale preference for the request Order of evaluation is: locale of the wiki in\n     * mono-lingual mode locale request parameter locale in context locale user preference locale in cookie locale\n     * accepted by the navigator\n     *\n     * @return the document locale preference for the request\n     */\n    public Locale getInterfaceLocalePreference()\n    {\n        return this.xwiki.getInterfaceLocalePreference(getXWikiContext());\n    }\n\n    /**\n     * Get the available locales according to the preferences.\n     *\n     * @return the list of available locales\n     * @since 12.4RC1\n     */\n    public List<Locale> getAvailableLocales()\n    {\n        return this.xwiki.getAvailableLocales(getXWikiContext());\n    }\n\n    /**\n     * @return the list of all wiki names, including the main wiki, corresponding to the available wiki descriptors.\n     *         Example: the descriptor for the wiki <i>wikiname</i> is a document in the main wiki, named\n     *         <i>XWiki.XWikiServerWikiname</i>, containing an XWiki.XWikiServerClass object.\n     * @see com.xpn.xwiki.XWiki#getVirtualWikisDatabaseNames(XWikiContext)\n     */\n    public List<String> getWikiNames()\n    {\n        List<String> result = new ArrayList<String>();\n\n        try {\n            result = this.xwiki.getVirtualWikisDatabaseNames(getXWikiContext());\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to get the list of all wiki names\", e);\n        }\n\n        return result;\n    }\n\n    /**\n     * Convenience method to ask if the current XWiki instance contains subwikis (in addition to the main wiki)\n     *\n     * @return true if at least 1 subwiki exists; false otherwise\n     * @see #getWikiNames()\n     */\n    public boolean hasSubWikis()\n    {\n        return getWikiNames().size() > 1;\n    }\n\n    /**\n     * API to check is wiki is multi-lingual\n     *\n     * @return true for multi-lingual/false for mono-lingual\n     */\n    public boolean isMultiLingual()\n    {\n        return this.xwiki.isMultiLingual(getXWikiContext());\n    }\n\n    /**\n     * Privileged API to flush the cache of the Wiki installation This flushed the cache of all wikis, all plugins, all\n     * renderers\n     */\n    public void flushCache()\n    {\n        if (hasProgrammingRights()) {\n            this.xwiki.flushCache(getXWikiContext());\n        }\n    }\n\n    /**\n     * Privileged API to create a new user from the request This API is used by RegisterNewUser wiki page\n     *\n     * @return the integer status code\n     *         <ul>\n     *         <li>1: ok</li>\n     *         <li>-2: passwords are different or password is empty</li>\n     *         <li>-3: user already exists</li>\n     *         <li>-4: invalid username provided</li>\n     *         <li>-8: user already exists</li>\n     *         </ul>\n     * @throws XWikiException\n     */\n    public int createUser() throws XWikiException\n    {\n        return createUser(false, \"edit\");\n    }\n\n    /**\n     * Privileged API to create a new user from the request This API is used by RegisterNewUser wiki page This version\n     * sends a validation email to the user Configuration of validation email is in the XWiki Preferences\n     *\n     * @param withValidation true to send the validationemail\n     * @return the integer status code\n     *         <ul>\n     *         <li>1: ok</li>\n     *         <li>-2: passwords are different or password is empty</li>\n     *         <li>-3: user already exists</li>\n     *         <li>-4: invalid username provided</li>\n     *         <li>-8: user already exists</li>\n     *         </ul>\n     * @throws XWikiException\n     */\n    public int createUser(boolean withValidation) throws XWikiException\n    {\n        return createUser(withValidation, \"edit\");\n    }\n\n    /**\n     * Privileged API to create a new user from the request.\n     * <p>\n     * This API is used by the RegisterNewUser wiki page.\n     * <p>\n     * This version sends a validation email to the user. Configuration of validation email is in the XWiki Preferences.\n     *\n     * @param withValidation true to send the validation email\n     * @param userRights Rights to set for the user for it's own page(defaults to \"edit\")\n     * @return the integer status code\n     *         <ul>\n     *         <li>1: ok</li>\n     *         <li>-2: passwords are different or password is empty</li>\n     *         <li>-3: user already exists</li>\n     *         <li>-4: invalid username provided</li>\n     *         <li>-8: user already exists</li>\n     *         </ul>\n     * @throws XWikiException\n     */\n    public int createUser(boolean withValidation, String userRights) throws XWikiException\n    {\n        boolean registerRight;\n        try {\n            // So, what's the register right for? This says that if the creator of the page\n            // (Admin) has programming rights, anybody can register. Is this OK?\n            if (hasProgrammingRights()) {\n                registerRight = true;\n            } else {\n                registerRight = this.xwiki.getRightService().hasAccessLevel(\"register\", getXWikiContext().getUser(),\n                    \"XWiki.XWikiPreferences\", getXWikiContext());\n            }\n\n            if (registerRight) {\n                return this.xwiki.createUser(withValidation, userRights, getXWikiContext());\n            }\n\n            return -1;\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to create user\", e);\n\n            return -10;\n        }\n\n    }\n\n    /**\n     * Privileged API to validate the return code given by a user in response to an email validation email The\n     * validation information are taken from the request object\n     *\n     * @param withConfirmEmail true to send a account confirmation email/false to not send it\n     * @return Success of Failure code (0 for success, -1 for missing programming rights, &gt; 0 for other errors\n     * @throws XWikiException\n     */\n    public int validateUser(boolean withConfirmEmail) throws XWikiException\n    {\n        return this.xwiki.validateUser(withConfirmEmail, getXWikiContext());\n    }\n\n    /**\n     * Privileged API to add a user to the XWiki.XWikiAllGroup\n     *\n     * @param fullwikiname user name to add\n     * @throws XWikiException\n     */\n    public void addToAllGroup(String fullwikiname) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            this.xwiki.setUserDefaultGroup(fullwikiname, getXWikiContext());\n        }\n    }\n\n    /**\n     * Privileged API to send a confirmation email to a user\n     *\n     * @param xwikiname user to send the email to\n     * @param password password to put in the mail\n     * @param email email to send to\n     * @param add_message Additional message to send to the user\n     * @param contentfield Preference field to use as a mail template\n     * @throws XWikiException if the mail was not send successfully\n     */\n    public void sendConfirmationMail(String xwikiname, String password, String email, String add_message,\n        String contentfield) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            this.xwiki.sendConfirmationEmail(xwikiname, password, email, add_message, contentfield, getXWikiContext());\n        }\n    }\n\n    /**\n     * Privileged API to send a confirmation email to a user\n     *\n     * @param xwikiname user to send the email to\n     * @param password password to put in the mail\n     * @param email email to send to\n     * @param contentfield Preference field to use as a mail template\n     * @throws XWikiException if the mail was not send successfully\n     */\n    public void sendConfirmationMail(String xwikiname, String password, String email, String contentfield)\n        throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            this.xwiki.sendConfirmationEmail(xwikiname, password, email, \"\", contentfield, getXWikiContext());\n        }\n    }\n\n    /**\n     * API to rename a document to another document.\n     * Note that the list of backlinks can be retrieved with {@link Document#getBackLinkedReferences()}\n     * and the list of children with {@link Document#getChildrenReferences()}.\n     *\n     * <strong>Warning:</strong> Be aware that this method never triggers any event related to the rename\n     * of the document. If you want the right events to be sent for the event, please use the dedicated Refactoring\n     * Module API (see\n     * {@link org.xwiki.refactoring.script.RequestFactory#createRenameRequest(EntityReference, EntityReference)}\n     * and {@link org.xwiki.refactoring.job.MoveRequest}).\n     *\n     * @param sourceDocumentReference the source document to rename.\n     * @param targetDocumentReference the target reference to rename the document to.\n     * @param overwrite if {@code true} the target document reference will be overwritten if it exists\n     *                  (deleted to the recycle bin before the rename). If {@code false} and the target document exist\n     *                  the rename won't be performed.\n     * @param backlinkDocumentReferences the list of references of documents to parse and for which links will be\n     *                                  modified to point to the new document reference\n     * @param childDocumentReferences the list of references of document whose parent field will be set to the new\n     *                                 document reference\n     * @return {@code true} if the rename succeeded. {@code false} if there was any issue.\n     * @throws XWikiException if the document cannot be renamed properly.\n     * @since 12.5RC1\n     */\n    public boolean renameDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference,\n        boolean overwrite, List<DocumentReference> backlinkDocumentReferences,\n        List<DocumentReference> childDocumentReferences) throws XWikiException\n    {\n        if (hasAccess(Right.DELETE, sourceDocumentReference)\n            && ((overwrite && hasAccess(Right.DELETE, targetDocumentReference))\n            || (!overwrite && hasAccess(Right.EDIT, targetDocumentReference)))) {\n            return this.xwiki.renameDocument(sourceDocumentReference, targetDocumentReference, overwrite,\n                backlinkDocumentReferences, childDocumentReferences, getXWikiContext());\n        }\n        return false;\n    }\n\n    /**\n     * API to copy a document to another document in the same wiki\n     *\n     * @param docname source document\n     * @param targetdocname target document\n     * @return true if the copy was sucessfull\n     * @throws XWikiException if the document was not copied properly\n     */\n    public boolean copyDocument(String docname, String targetdocname) throws XWikiException\n    {\n        return this.copyDocument(docname, targetdocname, null, null, null, false, false);\n    }\n\n    /**\n     * API to copy a translation of a document to another document in the same wiki\n     *\n     * @param docname source document\n     * @param targetdocname target document\n     * @param wikilocale locale to copy\n     * @return true if the copy was sucessfull\n     * @throws XWikiException if the document was not copied properly\n     */\n    public boolean copyDocument(String docname, String targetdocname, String wikilocale) throws XWikiException\n    {\n        return this.copyDocument(docname, targetdocname, null, null, wikilocale, false, false);\n    }\n\n    /**\n     * API to copy a translation of a document to another document of the same name in another wiki\n     *\n     * @param docname source document\n     * @param sourceWiki source wiki\n     * @param targetWiki target wiki\n     * @param wikilocale locale to copy\n     * @return true if the copy was sucessfull\n     * @throws XWikiException if the document was not copied properly\n     */\n    public boolean copyDocument(String docname, String sourceWiki, String targetWiki, String wikilocale)\n        throws XWikiException\n    {\n        return this.copyDocument(docname, docname, sourceWiki, targetWiki, wikilocale, true, false);\n    }\n\n    /**\n     * API to copy a translation of a document to another document of the same name in another wiki additionally\n     * resetting the version\n     *\n     * @param docname source document\n     * @param sourceWiki source wiki\n     * @param targetWiki target wiki\n     * @param wikilocale locale to copy\n     * @param reset true to reset versions\n     * @return true if the copy was sucessfull\n     * @throws XWikiException if the document was not copied properly\n     */\n    public boolean copyDocument(String docname, String targetdocname, String sourceWiki, String targetWiki,\n        String wikilocale, boolean reset) throws XWikiException\n    {\n        return this.copyDocument(docname, targetdocname, sourceWiki, targetWiki, wikilocale, reset, false);\n    }\n\n    /**\n     * API to copy a translation of a document to another document of the same name in another wiki additionally\n     * resetting the version and overwriting the previous document\n     *\n     * @param docname source document name\n     * @param targetdocname target document name\n     * @param sourceWiki source wiki\n     * @param targetWiki target wiki\n     * @param wikilocale locale to copy\n     * @param reset true to reset versions\n     * @param force true to overwrite the previous document\n     * @return true if the copy was sucessfull\n     * @throws XWikiException if the document was not copied properly\n     */\n    public boolean copyDocument(String docname, String targetdocname, String sourceWiki, String targetWiki,\n        String wikilocale, boolean reset, boolean force) throws XWikiException\n    {\n        DocumentReference sourceDocumentReference = getCurrentMixedDocumentReferenceResolver().resolve(docname);\n        if (!StringUtils.isEmpty(sourceWiki)) {\n            sourceDocumentReference = sourceDocumentReference.replaceParent(sourceDocumentReference.getWikiReference(),\n                new WikiReference(sourceWiki));\n        }\n\n        DocumentReference targetDocumentReference = getCurrentMixedDocumentReferenceResolver().resolve(targetdocname);\n        if (!StringUtils.isEmpty(targetWiki)) {\n            targetDocumentReference = targetDocumentReference.replaceParent(targetDocumentReference.getWikiReference(),\n                new WikiReference(targetWiki));\n        }\n\n        return this.copyDocument(sourceDocumentReference, targetDocumentReference, wikilocale, reset, force);\n    }\n\n    /**\n     * API to copy a translation of a document to another document of the same name in another wiki additionally\n     * resetting the version and overwriting the previous document\n     *\n     * @param sourceDocumentReference the reference to the document to copy\n     * @param targetDocumentReference the reference to the document to create\n     * @param wikilocale locale to copy\n     * @param resetHistory {@code true} to reset versions\n     * @param overwrite {@code true} to overwrite the previous document\n     * @return {@code true} if the copy was sucessful\n     * @throws XWikiException if the document was not copied properly\n     * @since 3.0M3\n     */\n    public boolean copyDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference,\n        String wikilocale, boolean resetHistory, boolean overwrite) throws XWikiException\n    {\n        // In order to copy the source document the user must have at least the right to view it.\n        if (hasAccessLevel(\"view\", getDefaultStringEntityReferenceSerializer().serialize(sourceDocumentReference))) {\n            String targetDocStringRef = getDefaultStringEntityReferenceSerializer().serialize(targetDocumentReference);\n            // To create the target document the user must have edit rights. If the target document exists and the user\n            // wants to overwrite it then he needs delete right.\n            // Note: We have to check if the target document exists before checking the delete right because delete\n            // right is denied if not explicitly specified.\n            if (hasAccessLevel(\"edit\", targetDocStringRef)\n                && (!overwrite || !exists(targetDocumentReference) || hasAccessLevel(\"delete\", targetDocStringRef))) {\n                // Reset creation data otherwise the required rights for page copy need to be reconsidered.\n                return this.xwiki.copyDocument(sourceDocumentReference, targetDocumentReference, wikilocale,\n                    resetHistory, overwrite, true, getXWikiContext());\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Privileged API to copy a space to another wiki, optionally deleting all document of the target space\n     *\n     * @param space source Space\n     * @param sourceWiki source Wiki\n     * @param targetWiki target Wiki\n     * @param locale locale to copy\n     * @param clean true to delete all document of the target space\n     * @return number of copied documents\n     * @throws XWikiException if the space was not copied properly\n     */\n    public int copySpaceBetweenWikis(String space, String sourceWiki, String targetWiki, String locale, boolean clean)\n        throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.xwiki.copySpaceBetweenWikis(space, sourceWiki, targetWiki, locale, clean, getXWikiContext());\n        }\n\n        return -1;\n    }\n\n    /**\n     * API to include a topic into another The topic is rendered fully in the context of itself\n     *\n     * @param topic page name of the topic to include\n     * @return the content of the included page\n     * @throws XWikiException if the include failed\n     */\n    public String includeTopic(String topic) throws XWikiException\n    {\n        return includeTopic(topic, true);\n    }\n\n    /**\n     * API to execute a form in the context of an including topic The rendering is evaluated in the context of the\n     * including topic All velocity variables are the one of the including topic This api is usually called using\n     * #includeForm in a page, which modifies the behavior of \"Edit this page\" button to direct for Form mode (inline)\n     *\n     * @param topic page name of the form to execute\n     * @return the content of the included page\n     * @throws XWikiException if the include failed\n     */\n    public String includeForm(String topic) throws XWikiException\n    {\n        return includeForm(topic, true);\n    }\n\n    /**\n     * API to include a topic into another, optionally surrounding the content with {pre}{/pre} to avoid future wiki\n     * rendering. The topic is rendered fully in the context of itself.\n     *\n     * @param topic page name of the topic to include\n     * @param pre true to add {pre} {/pre} (only if includer document is 1.0 syntax)\n     * @return the content of the included page\n     * @throws XWikiException if the include failed\n     */\n    public String includeTopic(String topic, boolean pre) throws XWikiException\n    {\n        String result = this.xwiki.include(topic, false, getXWikiContext());\n\n        if (pre) {\n            String includerSyntax = this.xwiki.getCurrentContentSyntaxId(null, this.context);\n\n            if (includerSyntax != null && Syntax.XWIKI_1_0.toIdString().equals(includerSyntax)) {\n                result = \"{pre}\" + result + \"{/pre}\";\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * API to execute a form in the context of an including topic, optionnaly surrounding the content with {pre}{/pre}\n     * to avoid future wiki rendering The rendering is evaluated in the context of the including topic All velocity\n     * variables are the one of the including topic This api is usually called using #includeForm in a page, which\n     * modifies the behavior of \"Edit this page\" button to direct for Form mode (inline).\n     *\n     * @param topic page name of the form to execute\n     * @param pre true to add {pre} {/pre} (only if includer document is 1.0 syntax)\n     * @return the content of the included page\n     * @throws XWikiException if the include failed\n     */\n    public String includeForm(String topic, boolean pre) throws XWikiException\n    {\n        String result = this.xwiki.include(topic, true, getXWikiContext());\n\n        if (pre) {\n            String includerSyntax = this.xwiki.getCurrentContentSyntaxId(null, this.context);\n\n            if (includerSyntax != null && Syntax.XWIKI_1_0.toIdString().equals(includerSyntax)) {\n                result = \"{pre}\" + result + \"{/pre}\";\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * API to check rights on the current document for the current user\n     *\n     * @param level right to check (view, edit, comment, delete)\n     * @return true if right is granted/false if not\n     */\n    public boolean hasAccessLevel(String level)\n    {\n        return hasAccessLevel(level, getXWikiContext().getUser(), getXWikiContext().getDoc().getFullName());\n    }\n\n    /**\n     * API to check rights on a document for a given user\n     *\n     * @param level right to check (view, edit, comment, delete)\n     * @param user user for which to check the right\n     * @param docname document on which to check the rights\n     * @return true if right is granted/false if not\n     */\n    public boolean hasAccessLevel(String level, String user, String docname)\n    {\n        try {\n            return this.xwiki.getRightService().hasAccessLevel(level, user, docname, getXWikiContext());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    /**\n     * API to list all spaces in the current wiki.\n     * <p>\n     * Hidden spaces are filtered unless current user enabled them.\n     *\n     * @return a list of string representing all non-hidden spaces (ie spaces that have non-hidden pages) for the\n     *         current wiki\n     * @throws XWikiException if something went wrong\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> getSpaces() throws XWikiException\n    {\n        return this.xwiki.getSpaces(getXWikiContext());\n    }\n\n    /**\n     * API to list all documents in a space.\n     * <p>\n     * Hidden spaces are filtered unless current user enabled them.\n     *\n     * @param spaceReference the local reference of the space for which to return all non-hidden documents\n     * @return the list of document names (in the format {@code Space.Page}) for non-hidden documents in the specified\n     *         space\n     * @throws XWikiException if the loading went wrong\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> getSpaceDocsName(String spaceReference) throws XWikiException\n    {\n        return this.xwiki.getSpaceDocsName(spaceReference, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the current encoding of the wiki engine The encoding is stored in xwiki.cfg Default encoding is\n     * ISO-8891-1\n     *\n     * @return encoding active in this wiki\n     */\n    public String getEncoding()\n    {\n        return this.xwiki.getEncoding();\n    }\n\n    /**\n     * API to retrieve the URL of an attached file in a Wiki Document The URL is generated differently depending on the\n     * environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by implementing a new\n     * XWikiURLFactory object For compatibility with any target environment (and especially the portlet environment) It\n     * is important to always use the URL functions to generate URL and never hardcode URLs\n     *\n     * @param fullname page name which includes the attached file\n     * @param filename attached filename to create a link for\n     * @return a URL as a string pointing to the filename\n     * @throws XWikiException if the URL could not be generated properly\n     */\n    public String getAttachmentURL(String fullname, String filename) throws XWikiException\n    {\n        if (StringUtils.isAnyEmpty(fullname, filename)) {\n            return \"\";\n        }\n\n        return this.xwiki.getAttachmentURL(fullname, filename, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of an a Wiki Document in view mode The URL is generated differently depending on the\n     * environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by implementing a new\n     * XWikiURLFactory object For compatibility with any target environment (and especially the portlet environment) It\n     * is important to always use the URL functions to generate URL and never hardcode URLs\n     *\n     * @param fullname the name of the document for which to return the URL for\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     */\n    public String getURL(String fullname) throws XWikiException\n    {\n        return this.xwiki.getURL(fullname, \"view\", getXWikiContext());\n    }\n\n    /**\n     * Retrieve the URL of an entity using the default mode/action for that entity type. The URL is generated\n     * differently depending on the environment (Servlet, Portlet, PDF, etc..). The URL generation can be modified by\n     * implementing a new XWikiURLFactory object. For compatibility with any target environment (and especially the\n     * portlet environment) it is important to always use the URL functions to generate URLs and never hardcode URLs.\n     *\n     * @param reference the reference to the entity for which to return the URL\n     * @return a URL as a string pointing to the specified entity, using the default mode/action for that entity type\n     * @throws XWikiException if the URL could not be generated properly\n     * @since 7.2M1\n     */\n    public String getURL(EntityReference reference) throws XWikiException\n    {\n        return this.xwiki.getURL(reference, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of an entity in any mode, optionally adding a query string The URL is generated\n     * differently depending on the environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by\n     * implementing a new XWikiURLFactory object. The query string will be modified to be added in the way the\n     * environment needs it. It is important to not add the query string parameter manually after a URL. Some\n     * environments will not accept this (like the Portlet environment).\n     *\n     * @param reference the reference to the entity for which to return the URL for\n     * @param action the mode in which to access the entity (view/edit/save/..). Any valid XWiki action is possible\n     * @param querystring the Query String to provide in the usual mode ({@code name1=value1&name2=value=2}) including\n     *            encoding\n     * @return a URL as a string pointing to the entity\n     * @throws XWikiException if the URL could not be generated properly\n     * @since 7.2M1\n     */\n    public String getURL(EntityReference reference, String action, String querystring) throws XWikiException\n    {\n        return this.xwiki.getURL(reference, action, querystring, null, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of an a Wiki Document in view mode The URL is generated differently depending on the\n     * environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by implementing a new\n     * XWikiURLFactory object For compatibility with any target environment (and especially the portlet environment) It\n     * is important to always use the URL functions to generate URL and never hardcode URLs\n     *\n     * @param reference the reference to the document for which to return the URL for\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     * @since 2.3M2\n     */\n    public String getURL(DocumentReference reference) throws XWikiException\n    {\n        return this.xwiki.getURL(reference, \"view\", getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of an a Wiki Document in any mode. The URL is generated differently depending on the\n     * environment (Servlet, Portlet, PDF, etc..). The URL generation can be modified by implementing a new\n     * XWikiURLFactory object For compatibility with any target environment (and especially the portlet environment). It\n     * is important to always use the URL functions to generate URL and never hardcode URLs.\n     *\n     * @param fullname the page name which includes the attached file\n     * @param action the mode in which to access the document (view/edit/save/..). Any valid XWiki action is possible.\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     */\n    public String getURL(String fullname, String action) throws XWikiException\n    {\n        return this.xwiki.getURL(fullname, action, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of a Wiki Document in any mode, optionally adding a query string The URL is generated\n     * differently depending on the environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by\n     * implementing a new XWikiURLFactory object. The query string will be modified to be added in the way the\n     * environment needs it. It is important to not add the query string parameter manually after a URL. Some\n     * environments will not accept this (like the Portlet environment).\n     *\n     * @param fullname the page name which includes the attached file\n     * @param action the mode in which to access the document (view/edit/save/..). Any valid XWiki action is possible\n     * @param querystring the Query String to provide in the usual mode ({@code name1=value1&name2=value=2}) including\n     *            encoding\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     */\n    public String getURL(String fullname, String action, String querystring) throws XWikiException\n    {\n        return this.xwiki.getURL(fullname, action, querystring, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of a Wiki Document in any mode, optionally adding a query string The URL is generated\n     * differently depending on the environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by\n     * implementing a new XWikiURLFactory object. The query string will be modified to be added in the way the\n     * environment needs it. It is important to not add the query string parameter manually after a URL. Some\n     * environments will not accept this (like the Portlet environment).\n     *\n     * @param reference the reference to the document for which to return the URL for\n     * @param action the mode in which to access the document (view/edit/save/..). Any valid XWiki action is possible\n     * @param querystring the Query String to provide in the usual mode ({@code name1=value1&name2=value=2}) including\n     *            encoding\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     * @since 3.0M3\n     */\n    public String getURL(DocumentReference reference, String action, String querystring) throws XWikiException\n    {\n        return this.xwiki.getURL(reference, action, querystring, null, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of an a Wiki Document in any mode, optionally adding an anchor. The URL is generated\n     * differently depending on the environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by\n     * implementing a new XWikiURLFactory object. The anchor will be modified to be added in the way the environment\n     * needs it. It is important to not add the anchor parameter manually after a URL. Some environments will not accept\n     * this (like the Portlet environment).\n     *\n     * @param fullname the page name which includes the attached file\n     * @param action the mode in which to access the document (view/edit/save/..). Any valid XWiki action is possible\n     * @param querystring the Query String to provide in the usual mode ({@code name1=value1&name2=value=2}) including\n     *            encoding\n     * @param anchor the anchor that points at a location within the passed document name\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     */\n    public String getURL(String fullname, String action, String querystring, String anchor) throws XWikiException\n    {\n        return this.xwiki.getURL(fullname, action, querystring, anchor, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a viewable referer text for a referer Referers are URL where users have clicked on a link to an\n     * XWiki page Search engine referer URLs are transformed to a nicer view (Google: search query string) For other URL\n     * the http:// part is stripped\n     *\n     * @param referer referer URL to transform\n     * @return A viewable string\n     */\n    public String getRefererText(String referer)\n    {\n        try {\n            return this.xwiki.getRefererText(referer, getXWikiContext());\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n\n    /**\n     * API to retrieve a viewable referer text for a referer with a maximum length Referers are URL where users have\n     * clicked on a link to an XWiki page Search engine referer URLs are transformed to a nicer view (Google: search\n     * query string) For other URL the http:// part is stripped\n     *\n     * @param referer referer URL to transform\n     * @param length Maximum length. \"...\" is added to the end of the text\n     * @return A viewable string\n     */\n    public String getShortRefererText(String referer, int length)\n    {\n        try {\n            return this.xwiki.getRefererText(referer, getXWikiContext()).substring(0, length);\n        } catch (Exception e) {\n            return this.xwiki.getRefererText(referer, getXWikiContext());\n        }\n    }\n\n    /**\n     * Generate and return an unescaped user display name.\n     *\n     * @param userReference the user reference\n     * @return the unescaped display user name\n     * @since 6.4RC1\n     */\n    public String getPlainUserName(DocumentReference userReference)\n    {\n        return this.xwiki.getPlainUserName(userReference, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a link to the User Name page displayed for the first name and last name of the user. The link\n     * will link to the page on the wiki where the user is registered\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getUserName(String user)\n    {\n        return this.xwiki.getUserName(user, null, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a link to the User Name page displayed with a custom view. The link will link to the page on the\n     * wiki where the user is registered. The formating is done using the format parameter which can contain velocity\n     * scripting and access all properties of the User profile using variables ($first_name $last_name $email $city)\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param format formatting to be used (\"$first_name $last_name\", \"$first_name\")\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getUserName(String user, String format)\n    {\n        return this.xwiki.getUserName(user, format, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a link to the User Name page displayed for the first name and last name of the user. The link\n     * will link to the page on the local wiki even if the user is registered on a different wiki.\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getLocalUserName(String user)\n    {\n        try {\n            return this.xwiki.getUserName(user.substring(user.indexOf(\":\") + 1), null, getXWikiContext());\n        } catch (Exception e) {\n            return this.xwiki.getUserName(user, null, getXWikiContext());\n        }\n    }\n\n    /**\n     * API to retrieve a link to the User Name page displayed with a custom view. The link will link to the page on the\n     * local wiki even if the user is registered on a different wiki. The formating is done using the format parameter\n     * which can contain velocity scripting and access all properties of the User profile using variables ($first_name\n     * $last_name $email $city)\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param format formatting to be used (\"$first_name $last_name\", \"$first_name\")\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getLocalUserName(String user, String format)\n    {\n        try {\n            return this.xwiki.getUserName(user.substring(user.indexOf(\":\") + 1), format, getXWikiContext());\n        } catch (Exception e) {\n            return this.xwiki.getUserName(user, format, getXWikiContext());\n        }\n    }\n\n    /**\n     * API to retrieve a text representing the user with the first name and last name of the user. With the link param\n     * set to false it will not link to the user page With the link param set to true, the link will link to the page on\n     * the wiki where the user was registered.\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param link false to not add an HTML link to the user profile\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getUserName(String user, boolean link)\n    {\n        return this.xwiki.getUserName(user, null, link, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a text representing the user with a custom view With the link param set to false it will not link\n     * to the user page. With the link param set to true, the link will link to the page on the wiki where the user was\n     * registered. The formating is done using the format parameter which can contain velocity scripting and access all\n     * properties of the User profile using variables ($first_name $last_name $email $city)\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param format formatting to be used (\"$first_name $last_name\", \"$first_name\")\n     * @param link false to not add an HTML link to the user profile\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getUserName(String user, String format, boolean link)\n    {\n        return this.xwiki.getUserName(user, format, link, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a text representing the user with the first name and last name of the user. With the link param\n     * set to false it will not link to the user page. With the link param set to true, the link will link to the page\n     * on the local wiki even if the user is registered on a different wiki.\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param link false to not add an HTML link to the user profile\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getLocalUserName(String user, boolean link)\n    {\n        try {\n            return this.xwiki.getUserName(user.substring(user.indexOf(\":\") + 1), null, link, getXWikiContext());\n        } catch (Exception e) {\n            return this.xwiki.getUserName(user, null, link, getXWikiContext());\n        }\n    }\n\n    /**\n     * API to retrieve a text representing the user with a custom view. The formating is done using the format parameter\n     * which can contain velocity scripting and access all properties of the User profile using variables ($first_name\n     * $last_name $email $city). With the link param set to false it will not link to the user page. With the link param\n     * set to true, the link will link to the page on the local wiki even if the user is registered on a different wiki.\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param format formatting to be used (\"$first_name $last_name\", \"$first_name\")\n     * @param link false to not add an HTML link to the user profile\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getLocalUserName(String user, String format, boolean link)\n    {\n        try {\n            return this.xwiki.getUserName(user.substring(user.indexOf(\":\") + 1), format, link, getXWikiContext());\n        } catch (Exception e) {\n            return this.xwiki.getUserName(user, format, link, getXWikiContext());\n        }\n    }\n\n    public User getUser()\n    {\n        return this.xwiki.getUser(getXWikiContext());\n    }\n\n    public User getUser(String username)\n    {\n        return this.xwiki.getUser(username, getXWikiContext());\n    }\n\n    /**\n     * Retrieve a user from its document reference.\n     *\n     * @param userReference the reference of the user.\n     * @return the user corresponding to the reference.\n     * @since 11.8RC1\n     */\n    public User getUser(DocumentReference userReference)\n    {\n        return this.xwiki.getUser(userReference, getXWikiContext());\n    }\n\n    /**\n     * API allowing to format a date according to the default Wiki setting The date format is provided in the\n     * 'dateformat' parameter of the XWiki Preferences\n     *\n     * @param date date object to format\n     * @return A string with the date formating from the default Wiki setting\n     */\n    public String formatDate(Date date)\n    {\n        return this.xwiki.formatDate(date, null, getXWikiContext());\n    }\n\n    /**\n     * API allowing to format a date according to a custom format The date format is from java.text.SimpleDateFormat\n     * Example: \"dd/MM/yyyy HH:mm:ss\" or \"d MMM yyyy\" If the format is invalid the default format will be used to show\n     * the date\n     *\n     * @param date date to format\n     * @param format format of the date to be used\n     * @return the formatted date\n     * @see java.text.SimpleDateFormat\n     */\n    public String formatDate(Date date, String format)\n    {\n        return this.xwiki.formatDate(date, format, getXWikiContext());\n    }\n\n    /*\n     * Allow to read user setting providing the user timezone All dates will be expressed with this timezone @return the\n     * timezone\n     */\n    public String getUserTimeZone()\n    {\n        return this.xwiki.getUserTimeZone(this.context);\n    }\n\n    /**\n     * Returns a plugin from the plugin API. Plugin Rights can be verified. Note that although this API is a duplicate\n     * of {@link #getPlugin(String)} it used to provide an easy access from Velocity to XWiki plugins. Indeed Velocity\n     * has a feature in that if a class has a get method, using the dot notation will automatically call the get method\n     * for the class. See http://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html#propertylookuprules.\n     * This this allows the following constructs: <code>$xwiki.pluginName.somePluginMethod()</code>\n     *\n     * @param name Name of the plugin to retrieve (either short of full class name)\n     * @return a plugin object\n     */\n    public Api get(String name)\n    {\n        return getPlugin(name);\n    }\n\n    /**\n     * Returns a plugin from the plugin API. Plugin Rights can be verified.\n     *\n     * @param name Name of the plugin to retrieve (either short of full class name)\n     * @return a plugin object\n     */\n    public Api getPlugin(String name)\n    {\n        return this.xwiki != null ? this.xwiki.getPluginApi(name, getXWikiContext()) : null;\n    }\n\n    /**\n     * Returns the Advertisement system from the preferences\n     *\n     * @return \"google\" or \"none\"\n     */\n    public String getAdType()\n    {\n        return this.xwiki.getAdType(getXWikiContext());\n    }\n\n    /**\n     * Returns the Advertisement client ID from the preferences\n     *\n     * @return an Ad affiliate ID\n     */\n    public String getAdClientId()\n    {\n        return this.xwiki.getAdClientId(getXWikiContext());\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL protected using Basic Authentication\n     *\n     * @param surl url to retrieve\n     * @param username username for the basic authentication\n     * @param password password for the basic authentication\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public String getURLContent(String surl, String username, String password) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return \"\";\n        }\n\n        try {\n            return this.xwiki.getURLContent(surl, username, password, this.context);\n        } catch (Exception e) {\n            LOGGER.warn(\"Failed to retrieve content from [\" + surl + \"]\", e);\n            return \"\";\n        }\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL\n     *\n     * @param surl url to retrieve\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public String getURLContent(String surl) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return \"\";\n        }\n\n        try {\n            return this.xwiki.getURLContent(surl, this.context);\n        } catch (Exception e) {\n            LOGGER.warn(\"Failed to retrieve content from [\" + surl + \"]\", e);\n            return \"\";\n        }\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL protected using Basic Authentication\n     *\n     * @param surl url to retrieve\n     * @param username username for the basic authentication\n     * @param password password for the basic authentication\n     * @param timeout manuel timeout in milliseconds\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public String getURLContent(String surl, String username, String password, int timeout) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return \"\";\n        }\n\n        try {\n            return this.xwiki.getURLContent(surl, username, password, timeout,\n                this.xwiki.getHttpUserAgent(this.context));\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL\n     *\n     * @param surl url to retrieve\n     * @param timeout manuel timeout in milliseconds\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public String getURLContent(String surl, int timeout) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return \"\";\n        }\n\n        try {\n            return this.xwiki.getURLContent(surl, timeout, this.xwiki.getHttpUserAgent(this.context));\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL protected using Basic Authentication as Bytes\n     *\n     * @param surl url to retrieve\n     * @param username username for the basic authentication\n     * @param password password for the basic authentication\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public byte[] getURLContentAsBytes(String surl, String username, String password) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return null;\n        }\n\n        try {\n            return this.xwiki.getURLContentAsBytes(surl, username, password, this.context);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL as Bytes\n     *\n     * @param surl url to retrieve\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public byte[] getURLContentAsBytes(String surl) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return null;\n        }\n\n        try {\n            return this.xwiki.getURLContentAsBytes(surl, this.context);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the list of Macros documents in the specified content\n     *\n     * @param defaultSpace Default space to use for relative path names\n     * @param content Content to parse\n     * @return ArrayList of document names\n     */\n    public List<String> getIncludedMacros(String defaultSpace, String content)\n    {\n        return this.xwiki.getIncludedMacros(defaultSpace, content, getXWikiContext());\n    }\n\n    /**\n     * returns true if xwiki.readonly is set in the configuration file\n     *\n     * @return the value of xwiki.isReadOnly()\n     * @see com.xpn.xwiki.XWiki\n     */\n    public boolean isReadOnly()\n    {\n        return this.xwiki.isReadOnly();\n    }\n\n    /**\n     * Privileged API to set/unset the readonly status of the Wiki After setting this to true no writing to the database\n     * will be performed All Edit buttons will be removed and save actions disabled This is used for maintenance\n     * purposes\n     *\n     * @param ro true to set read-only mode/false to unset\n     */\n    public void setReadOnly(boolean ro)\n    {\n        if (hasAdminRights()) {\n            this.xwiki.setReadOnly(ro);\n        }\n    }\n\n    /**\n     * Priviledge API to regenerate the links/backlinks table Normally links and backlinks are stored when a page is\n     * modified This function will regenerate all the backlinks This function can be long to run\n     *\n     * @throws XWikiException exception if the generation fails\n     */\n    public void refreshLinks() throws XWikiException\n    {\n        if (hasAdminRights()) {\n            this.xwiki.refreshLinks(getXWikiContext());\n        }\n    }\n\n    /**\n     * API to check if the backlinks feature is active Backlinks are activated in xwiki.cfg or in the XWiki Preferences\n     *\n     * @return true if the backlinks feature is active\n     * @throws XWikiException exception if the preference could not be retrieved\n     */\n    public boolean hasBacklinks() throws XWikiException\n    {\n        return this.xwiki.hasBacklinks(getXWikiContext());\n    }\n\n    /**\n     * API to check if the tags feature is active. Tags are activated in xwiki.cfg or in the XWiki Preferences\n     *\n     * @return true if the tags feature is active, false otherwise\n     * @throws XWikiException exception if the preference could not be retrieved\n     */\n    public boolean hasTags() throws XWikiException\n    {\n        return this.xwiki.hasTags(getXWikiContext());\n    }\n\n    /**\n     * API to check if the edit comment feature is active Edit comments are activated in xwiki.cfg or in the XWiki\n     * Preferences\n     *\n     * @return\n     */\n    public boolean hasEditComment()\n    {\n        return this.xwiki.hasEditComment(this.context);\n    }\n\n    /**\n     * API to check if the edit comment field is shown in the edit form Edit comments are activated in xwiki.cfg or in\n     * the XWiki Preferences\n     *\n     * @return\n     */\n    public boolean isEditCommentFieldHidden()\n    {\n        return this.xwiki.isEditCommentFieldHidden(this.context);\n    }\n\n    /**\n     * API to check if the edit comment is suggested (prompted once by Javascript if empty) Edit comments are activated\n     * in xwiki.cfg or in the XWiki Preferences\n     *\n     * @return\n     */\n    public boolean isEditCommentSuggested()\n    {\n        return this.xwiki.isEditCommentSuggested(this.context);\n    }\n\n    /**\n     * API to check if the edit comment is mandatory (prompted by Javascript if empty) Edit comments are activated in\n     * xwiki.cfg or in the XWiki Preferences\n     *\n     * @return\n     */\n    public boolean isEditCommentMandatory()\n    {\n        return this.xwiki.isEditCommentMandatory(this.context);\n    }\n\n    /**\n     * API to check if the minor edit feature is active minor edit is activated in xwiki.cfg or in the XWiki Preferences\n     */\n    public boolean hasMinorEdit()\n    {\n        return this.xwiki.hasMinorEdit(this.context);\n    }\n\n    /**\n     * API to check if the recycle bin feature is active recycle bin is activated in xwiki.cfg or in the XWiki\n     * Preferences\n     */\n    public boolean hasRecycleBin()\n    {\n        return this.xwiki.hasRecycleBin(this.context);\n    }\n\n    /**\n     * Retrieves the current editor preference for the request The preference is first looked up in the user preference\n     * and then in the space and wiki preference\n     *\n     * @return \"wysiwyg\" or \"text\"\n     */\n    public String getEditorPreference()\n    {\n        return this.xwiki.getEditorPreference(getXWikiContext());\n    }\n\n    /**\n     * Privileged API to retrieve an object instantiated from groovy code in a String. Note that Groovy scripts\n     * compilation is cached.\n     *\n     * @param script the Groovy class definition string (public class MyClass { ... })\n     * @return An object instantiating this class\n     * @throws XWikiException\n     */\n    public java.lang.Object parseGroovyFromString(String script) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.xwiki.parseGroovyFromString(script, getXWikiContext());\n        }\n        return \"groovy_missingrights\";\n    }\n\n    /**\n     * Privileged API to retrieve an object instantiated from groovy code in a String, using a classloader including all\n     * JAR files located in the passed page as attachments. Note that Groovy scripts compilation is cached\n     *\n     * @param script the Groovy class definition string (public class MyClass { ... })\n     * @return An object instantiating this class\n     * @throws XWikiException\n     */\n    public java.lang.Object parseGroovyFromPage(String script, String jarWikiPage) throws XWikiException\n    {\n        XWikiDocument doc = this.xwiki.getDocument(script, getXWikiContext());\n        if (this.xwiki.getRightService().hasProgrammingRights(doc, getXWikiContext())) {\n            return this.xwiki.parseGroovyFromString(doc.getContent(), jarWikiPage, getXWikiContext());\n        }\n        return \"groovy_missingrights\";\n    }\n\n    /**\n     * Privileged API to retrieve an object instanciated from groovy code in a String Groovy scripts compilation is\n     * cached\n     *\n     * @param fullname // script containing a Groovy class definition (public class MyClass { ... })\n     * @return An object instanciating this class\n     * @throws XWikiException\n     */\n    public java.lang.Object parseGroovyFromPage(String fullname) throws XWikiException\n    {\n        XWikiDocument doc = this.xwiki.getDocument(fullname, getXWikiContext());\n        if (this.xwiki.getRightService().hasProgrammingRights(doc, getXWikiContext())) {\n            return this.xwiki.parseGroovyFromString(doc.getContent(), getXWikiContext());\n        }\n        return \"groovy_missingrights\";\n    }\n\n    /**\n     * API to get the macro list from the XWiki Preferences The macro list are the macros available from the Macro\n     * Mapping System\n     *\n     * @return String with each macro on each line\n     */\n    public String getMacroList()\n    {\n        return this.xwiki.getMacroList(getXWikiContext());\n    }\n\n    /**\n     * API to check if using which toolbars in Wysiwyg editor\n     *\n     * @return a string value\n     */\n    public String getWysiwygToolbars()\n    {\n        return this.xwiki.getWysiwygToolbars(getXWikiContext());\n    }\n\n    /**\n     * API to create an object from the request The parameters are the ones that are created from\n     * doc.display(\"field\",\"edit\") calls\n     *\n     * @param className XWiki Class Name to create the object from\n     * @return a BaseObject wrapped in an Object\n     * @throws XWikiException exception if the object could not be read\n     */\n    public com.xpn.xwiki.api.Object getObjectFromRequest(String className) throws XWikiException\n    {\n        return new com.xpn.xwiki.api.Object(this.xwiki.getObjectFromRequest(className, getXWikiContext()),\n            getXWikiContext());\n    }\n\n    /**\n     * API to create an empty document\n     *\n     * @return an XWikiDocument wrapped in a Document\n     */\n    public Document createDocument()\n    {\n        return new XWikiDocument().newDocument(getXWikiContext());\n    }\n\n    /**\n     * API to convert the username depending on the configuration The username can be converted from email to a valid\n     * XWiki page name hidding the email address The username can be then used to login and link to the right user page\n     *\n     * @param username username to use for login\n     * @return converted wiki page name for this username\n     */\n    public String convertUsername(String username)\n    {\n        return this.xwiki.convertUsername(username, getXWikiContext());\n    }\n\n    /**\n     * API to get the Property object from a class based on a property path A property path looks like\n     * XWiki.ArticleClass_fieldname\n     *\n     * @param propPath Property path\n     * @return a PropertyClass object from a BaseClass object\n     */\n    public com.xpn.xwiki.api.PropertyClass getPropertyClassFromName(String propPath)\n    {\n        return new PropertyClass(this.xwiki.getPropertyClassFromName(propPath, getXWikiContext()), getXWikiContext());\n    }\n\n    /**\n     * Generates a unique document name based on initial page name and already existing pages.\n     * <p>\n     * Since 14.9, if the document exist check fail an exception is thrown.\n     *\n     * @param space the space where to add the document\n     * @return a unique document name\n     * @throws XWikiException when failing to check document existence\n     */\n    public String getUniquePageName(String space) throws XWikiException\n    {\n        return this.xwiki.getUniquePageName(space, getXWikiContext());\n    }\n\n    /**\n     * Generates a unique document name based on initial page name and already existing pages\n     * <p>\n     * Since 14.9, if the document exist check fail an exception is thrown.\n     *\n     * @param space the space where to add the document\n     * @param name the prefix of the document name\n     * @return a unique document name\n     * @throws XWikiException when failing to check document existence\n     */\n    public String getUniquePageName(String space, String name) throws XWikiException\n    {\n        return this.xwiki.getUniquePageName(space, name, getXWikiContext());\n    }\n\n    /**\n     * Inserts a tooltip using toolTip.js\n     *\n     * @param html HTML viewed\n     * @param message HTML Tooltip message\n     * @param params Parameters in Javascropt added to the tooltip config\n     * @return HTML with working tooltip\n     */\n    public String addTooltip(String html, String message, String params)\n    {\n        return this.xwiki.addTooltip(html, message, params, getXWikiContext());\n    }\n\n    /**\n     * Inserts a tooltip using toolTip.js\n     *\n     * @param html HTML viewed\n     * @param message HTML Tooltip message\n     * @return HTML with working tooltip\n     */\n    public String addTooltip(String html, String message)\n    {\n        return this.xwiki.addTooltip(html, message, getXWikiContext());\n    }\n\n    /**\n     * Inserts the tooltip Javascript\n     *\n     * @return\n     */\n    public String addTooltipJS()\n    {\n        return this.xwiki.addTooltipJS(getXWikiContext());\n    }\n\n    /*\n     * Inserts a Mandatory asterix\n     */\n    public String addMandatory()\n    {\n        return this.xwiki.addMandatory(getXWikiContext());\n    }\n\n    /**\n     * Get the XWiki Class object defined in the passed Document name.\n     * <p>\n     * Note: This method doesn't require any rights for accessing the passed Document (as opposed to the\n     * {@link com.xpn.xwiki.api.Document#getClass()} method which does require to get a Document object first. This is\n     * thus useful in cases where the calling code doesn't have the access right to the specified Document. It is safe\n     * because there are no sensitive data stored in a Class definition.\n     * </p>\n     *\n     * @param documentName the name of the document for which to get the Class object. For example\n     *            \"XWiki.XWikiPreferences\"\n     * @return the XWiki Class object defined in the passed Document name. If the passed Document name points to a\n     *         Document with no Class defined then an empty Class object is returned (i.e. a Class object with no\n     *         properties).\n     * @throws XWikiException if the passed document name doesn't point to a valid Document\n     */\n    public Class getClass(String documentName) throws XWikiException\n    {\n        // TODO: The implementation should be done in com.xpn.xwiki.XWiki as this class should\n        // delegate all implementations to that Class.\n        DocumentReference docReference = getCurrentMixedDocumentReferenceResolver().resolve(documentName);\n        return getClass(docReference);\n    }\n\n    /**\n     * Get the XWiki Class object defined in the passed Document name.\n     * <p>\n     * Note: This method doesn't require any rights for accessing the passed Document (as opposed to the\n     * {@link com.xpn.xwiki.api.Document#getClass()} method which does require to get a Document object first. This is\n     * thus useful in cases where the calling code doesn't have the access right to the specified Document. It is safe\n     * because there are no sensitive data stored in a Class definition.\n     * </p>\n     *\n     * @param docReference the reference of the document for which to get the Class object.\n     * @return the XWiki Class object defined in the passed Document reference. If the passed Document name points to a\n     *         Document with no Class defined then an empty Class object is returned (i.e. a Class object with no\n     *         properties).\n     * @throws XWikiException if the reference doesn't exist.\n     * @since 10.11.10\n     * @since 11.8RC1\n     * @since 11.3.4\n     */\n    public Class getClass(EntityReference docReference) throws XWikiException\n    {\n        return new Class(this.xwiki.getDocument(docReference, this.context).getXClass(), this.context);\n    }\n\n    /**\n     * Provides an absolute counter\n     *\n     * @param name Counter name\n     * @return String\n     */\n    public String getCounter(String name)\n    {\n        XWikiEngineContext econtext = this.context.getEngineContext();\n        Integer counter = (Integer) econtext.getAttribute(name);\n        if (counter == null) {\n            counter = 0;\n        }\n        counter = counter.intValue() + 1;\n        econtext.setAttribute(name, counter);\n\n        return counter.toString();\n    }\n\n    /**\n     * Check authentication from request and set according persitent login information If it fails user is unlogged\n     *\n     * @return null if failed, non null XWikiUser if sucess\n     * @throws XWikiException\n     */\n    public XWikiUser checkAuth() throws XWikiException\n    {\n        return this.context.getWiki().checkAuth(this.context);\n    }\n\n    /**\n     * Check authentication from username and password and set according persitent login information If it fails user is\n     * unlogged\n     *\n     * @param username username to check\n     * @param password password to check\n     * @param rememberme \"1\" if you want to remember the login accross navigator restart\n     * @return null if failed, non null XWikiUser if sucess\n     * @throws XWikiException\n     */\n    public XWikiUser checkAuth(String username, String password, String rememberme) throws XWikiException\n    {\n        XWikiUser user =\n            this.context.getWiki().getAuthService().checkAuth(username, password, rememberme, this.context);\n        if (user.isDisabled(this.context)) {\n            this.context.put(XWikiContext.INACTIVE_USER_REFERENCE, user.getUserReference());\n            user = null;\n        }\n        return user;\n    }\n\n    /**\n     * Access statistics api\n     *\n     * @return a StatsService instance that can be used to retrieve different xwiki statistics\n     */\n    public StatsService getStatsService()\n    {\n        return this.statsService;\n    }\n\n    /**\n     * API to get the xwiki criteria service which allow to create various criteria : integer ranges, date periods, date\n     * intervals, etc.\n     *\n     * @return the xwiki criteria service\n     */\n    public CriteriaService getCriteriaService()\n    {\n        return this.criteriaService;\n    }\n\n    /**\n     * API to get the Servlet path for a given wiki. In mono wiki this is \"bin/\" or \"xwiki/\". In virtual mode and if\n     * {@code xwiki.virtual.usepath} is enabled in xwiki.cfg, it is \"wiki/wikiname/\".\n     *\n     * @param wikiName wiki for which to get the path\n     * @return The servlet path\n     */\n    public String getServletPath(String wikiName)\n    {\n        return this.xwiki.getServletPath(wikiName, this.context);\n    }\n\n    /**\n     * API to get the Servlet path for the current wiki. In mono wiki this is \"bin/\" or \"xwiki/\". In virtual mode and if\n     * {@code xwiki.virtual.usepath} is enabled in xwiki.cfg, it is \"wiki/wikiname/\".\n     *\n     * @return The servlet path\n     */\n    public String getServletPath()\n    {\n        return this.xwiki.getServletPath(this.context.getWikiId(), this.context);\n    }\n\n    /**\n     * API to get the webapp path for the current wiki. This usually is \"xwiki/\". It can be configured in xwiki.cfg with\n     * the config {@code xwiki.webapppath}.\n     *\n     * @return The servlet path\n     */\n    public String getWebAppPath()\n    {\n        return this.xwiki.getWebAppPath(this.context);\n    }\n\n    /**\n     * @return the syntax id of the syntax to use when creating new documents.\n     */\n    public String getDefaultDocumentSyntax()\n    {\n        return this.xwiki.getDefaultDocumentSyntax();\n    }\n\n    /**\n     * Find the corresponding available renderer syntax.\n     * <p>\n     * If <code>syntaxVersion</code> is null the last version of the available provided syntax type is returned.\n     *\n     * @param syntaxType the syntax type\n     * @param syntaxVersion the syntax version\n     * @return the available corresponding {@link Syntax}. Null if no available renderer can be found.\n     */\n    public Syntax getAvailableRendererSyntax(String syntaxType, String syntaxVersion)\n    {\n        Syntax syntax = null;\n\n        try {\n            List<PrintRendererFactory> factories =\n                Utils.getContextComponentManager().getInstanceList((Type) PrintRendererFactory.class);\n            for (PrintRendererFactory factory : factories) {\n                Syntax factorySyntax = factory.getSyntax();\n                if (syntaxVersion != null) {\n                    if (factorySyntax.getType().getId().equalsIgnoreCase(syntaxType)\n                        && factorySyntax.getVersion().equals(syntaxVersion)) {\n                        syntax = factorySyntax;\n                        break;\n                    }\n                } else {\n                    // TODO: improve version comparaison since it does not work when comparing 2.0 and 10.0 for example.\n                    // We\n                    // should have a Version which implements Comparable like we have SyntaxId in Syntax\n                    if (factorySyntax.getType().getId().equalsIgnoreCase(syntaxType)\n                        && (syntax == null || factorySyntax.getVersion().compareTo(syntax.getVersion()) > 0)) {\n                        syntax = factorySyntax;\n                    }\n                }\n            }\n        } catch (ComponentLookupException e) {\n            LOGGER.error(\"Failed to lookup available renderer syntaxes\", e);\n        }\n\n        return syntax;\n    }\n\n    /**\n     * @return true if section editing is enabled (can be configured through the {@code xwiki.section.edit}\n     *         configuration property. Defaults to 1 (=enabled) when not defined\n     */\n    public boolean hasSectionEdit()\n    {\n        return this.xwiki.hasSectionEdit(getXWikiContext());\n    }\n\n    /**\n     * @return the section depth for which section editing is available (can be configured through\n     *         {@code xwiki.section.depth} configuration property. Defaults to 2 when not defined\n     */\n    public long getSectionEditingDepth()\n    {\n        return this.xwiki.getSectionEditingDepth();\n    }\n\n    /**\n     * @return true if title handling should be using the compatibility mode or not. When the compatibility mode is\n     *         active, if the document's content first header (level 1 or level 2) matches the document's title the\n     *         first header is stripped.\n     */\n    public boolean isTitleInCompatibilityMode()\n    {\n        return this.xwiki.isTitleInCompatibilityMode();\n    }\n\n    /**\n     * Get the syntax of the content currently being executed.\n     * <p>\n     * The document currently being executed is not the same than the actual content syntax since the executed code\n     * might come from an included page or some macro that change the context syntax. The same logic used inside\n     * rendering macros is used (see {@link org.xwiki.rendering.macro.MacroContentParser}).\n     * <p>\n     * If the current document can't be found, the method assume that the executed document is the context document\n     * (it's generally the case when a document is directly rendered with\n     * {@link XWikiDocument#getRenderedContent(XWikiContext)} for example).\n     *\n     * @return the syntax identifier\n     */\n    public String getCurrentContentSyntaxId()\n    {\n        return this.xwiki.getCurrentContentSyntaxId(getXWikiContext());\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.component.manager.ComponentLookupException;\nimport org.xwiki.component.util.DefaultParameterizedType;\nimport org.xwiki.model.document.DocumentAuthors;\nimport org.xwiki.model.internal.document.SafeDocumentAuthors;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.ObjectReference;\nimport org.xwiki.observation.ObservationManager;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.test.mockito.MockitoComponentManager;\nimport org.xwiki.user.CurrentUserReference;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.BaseProperty;\nimport com.xpn.xwiki.test.MockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\nimport com.xpn.xwiki.test.reference.ReferenceComponentList;\nimport com.xpn.xwiki.user.api.XWikiRightService;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.ArgumentMatchers.isNull;\nimport static org.mockito.ArgumentMatchers.same;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n@OldcoreTest\n@ReferenceComponentList\nclass DocumentTest\n{\n    @InjectMockitoOldcore\n    private MockitoOldcore oldcore;\n\n    @MockComponent\n    private UserReferenceResolver<CurrentUserReference> currentUserReferenceUserReferenceResolver;\n\n    @MockComponent\n    private ObservationManager observationManager;\n\n    @Test\n    void toStringReturnsFullName()\n    {\n        XWikiDocument doc = new XWikiDocument(new DocumentReference(\"Wiki\", \"Space\", \"Page\"));\n        assertEquals(\"Space.Page\", new Document(doc, new XWikiContext()).toString());\n        assertEquals(\"Main.WebHome\", new Document(new XWikiDocument(), new XWikiContext()).toString());\n    }\n\n    @Test\n    void getObjects() throws XWikiException\n    {\n        XWikiContext context = new XWikiContext();\n        XWikiDocument doc = new XWikiDocument(new DocumentReference(\"Wiki\", \"Space\", \"Page\"));\n\n        doc.getXClass().addNumberField(\"prop\", \"prop\", 5, \"long\");\n        BaseObject obj = (BaseObject) doc.getXClass().newObject(context);\n        obj.setLongValue(\"prop\", 1);\n        doc.addObject(doc.getFullName(), obj);\n\n        assertEquals(obj, doc.getObject(doc.getFullName(), \"prop\", \"1\"));\n        assertNull(doc.getObject(doc.getFullName(), \"prop\", \"2\"));\n\n        Document adoc = new Document(doc, context);\n        List<Object> lst = adoc.getObjects(adoc.getFullName(), \"prop\", \"1\");\n        assertEquals(1, lst.size());\n        assertEquals(obj, lst.get(0).getBaseObject());\n\n        lst = adoc.getObjects(adoc.getFullName(), \"prop\", \"0\");\n        assertEquals(0, lst.size());\n\n        lst = adoc.getObjects(adoc.getFullName());\n        assertEquals(1, lst.size());\n    }\n\n    @Test\n    void getObject()\n    {\n        XWikiContext context = new XWikiContext();\n        XWikiDocument doc = new XWikiDocument(new DocumentReference(\"Wiki\", \"Space\", \"Page\"));\n\n        doc.getXClass().addNumberField(\"prop\", \"prop\", 5, \"long\");\n\n        Document apiDocument = new Document(doc, context);\n        ObjectReference objectReference = new ObjectReference(\"Wiki.Space.Page[2]\", doc.getDocumentReference());\n        Object apiObject = apiDocument.getObject(objectReference, true);\n        apiObject.set(\"prop\", 20);\n\n        assertEquals(apiObject, apiDocument.getObject(\"Wiki.Space.Page\", 2));\n        assertEquals(2, apiObject.getNumber());\n    }\n\n    @Test\n    void removeObjectDoesntCauseDataLoss() throws XWikiException\n    {\n        // Setup comment class\n        XWikiDocument commentDocument = new XWikiDocument(new DocumentReference(\"wiki\", \"XWiki\", \"XWikiComments\"));\n        commentDocument.getXClass().addTextAreaField(\"comment\", \"comment\", 60, 20);\n        this.oldcore.getSpyXWiki().saveDocument(commentDocument, this.oldcore.getXWikiContext());\n\n        // Setup document\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"wiki\", \"Space\", \"Page\"));\n\n        for (int i = 0; i < 10; ++i) {\n            xdoc.newXObject(commentDocument.getDocumentReference(), this.oldcore.getXWikiContext());\n        }\n\n        Document adoc = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        for (Object obj : adoc.getObjects(\"XWiki.XWikiComments\")) {\n            obj.set(\"comment\", \"Comment\");\n            if (obj.getNumber() == 4) {\n                adoc.removeObject(obj);\n            }\n        }\n\n        // Let's make sure the original document wasn't changed\n        for (BaseObject obj : xdoc.getXObjects(commentDocument.getDocumentReference())) {\n            assertNull(obj.get(\"comment\"));\n        }\n\n        // Let's make sure the cloned document was changed everywhere\n        for (BaseObject obj : adoc.getDoc().getXObjects(commentDocument.getDocumentReference())) {\n            if (obj != null) {\n                assertEquals(\"Comment\", ((BaseProperty) obj.get(\"comment\")).getValue());\n            }\n        }\n    }\n\n    @Test\n    void saveAsAuthorUsesGuestIfDroppedPermissions() throws XWikiException\n    {\n        DocumentReference aliceReference = new DocumentReference(\"wiki\", \"XWiki\", \"Alice\");\n        DocumentReference bobReference = new DocumentReference(\"wiki\", \"XWiki\", \"Bob\");\n\n        XWikiDocument cdoc = new XWikiDocument(new DocumentReference(\"wiki\", \"Space\", \"Page\"));\n        XWikiDocument sdoc = new XWikiDocument(new DocumentReference(\"wiki\", \"Space\", \"AuthorPage\"));\n\n        when(this.oldcore.getMockAuthorizationManager().hasAccess(same(Right.EDIT), eq(aliceReference),\n            eq(cdoc.getDocumentReference()))).thenReturn(true);\n        when(this.oldcore.getMockAuthorizationManager().hasAccess(same(Right.EDIT), isNull(),\n            eq(cdoc.getDocumentReference()))).thenReturn(false);\n\n        this.oldcore.getXWikiContext().setDoc(cdoc);\n        this.oldcore.getXWikiContext().put(\"sdoc\", sdoc);\n\n        // Alice is the author.\n        sdoc.setAuthorReference(aliceReference);\n        sdoc.setContentAuthorReference(sdoc.getAuthorReference());\n\n        // Bob is the viewer\n        this.oldcore.getXWikiContext().setUserReference(bobReference);\n\n        Document doc = cdoc.newDocument(this.oldcore.getXWikiContext());\n\n        doc.saveAsAuthor();\n\n        this.oldcore.getXWikiContext().dropPermissions();\n\n        Throwable exception = assertThrows(XWikiException.class, () -> doc.saveAsAuthor());\n        assertTrue(\n            exception.getMessage()\n                .contains(\"Access denied; user null, acting through script in \"\n                    + \"document Space.Page cannot save document Space.Page\"),\n            \"Wrong error message when trying to save a document after calling dropPermissions()\");\n\n        assertEquals(bobReference, this.oldcore.getXWikiContext().getUserReference(),\n            \"After dropping permissions and attempting to save a document, \"\n                + \"the user was permanently switched to guest.\");\n    }\n\n    @Test\n    void user()\n    {\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"Wiki\", \"Space\", \"Page\"));\n        Document document = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        assertEquals(XWikiRightService.GUEST_USER_FULLNAME, document.getCreator());\n        assertEquals(XWikiRightService.GUEST_USER_FULLNAME, document.getAuthor());\n        assertEquals(XWikiRightService.GUEST_USER_FULLNAME, document.getContentAuthor());\n    }\n\n    @Test\n    void changeAuthorWhenModifyingDocumentContent()\n    {\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"wiki0\", \"Space\", \"Page\"));\n        xdoc.setAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"));\n        xdoc.setContentAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"));\n        xdoc.setCreatorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"));\n\n        this.oldcore.getXWikiContext().setUserReference(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"));\n\n        Document document = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"),\n            document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n\n        document.setContent(\"new content\");\n\n        assertEquals(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"), document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n    }\n\n    @Test\n    void changeAuthorWhenModifyingObjectProperty() throws XWikiException\n    {\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"wiki0\", \"Space\", \"Page\"));\n        xdoc.setAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"));\n        xdoc.setContentAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"));\n        xdoc.setCreatorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"));\n\n        xdoc.getXClass().addTextField(\"key\", \"Key\", 30);\n        xdoc.newXObject(xdoc.getDocumentReference(), this.oldcore.getXWikiContext());\n\n        xdoc.setContentDirty(false);\n        this.oldcore.getSpyXWiki().saveDocument(xdoc, this.oldcore.getXWikiContext());\n\n        this.oldcore.getXWikiContext().setUserReference(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"));\n\n        Document document = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"),\n            document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n\n        Object obj = document.getObject(xdoc.getPrefixedFullName());\n        obj.set(\"key\", \"value\");\n\n        assertEquals(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"),\n            document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n    }\n\n    @Test\n    void changeAuthorWhenModifyingDocumentProperty() throws XWikiException\n    {\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"wiki0\", \"Space\", \"Page\"));\n        xdoc.setAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"));\n        xdoc.setContentAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"));\n        xdoc.setCreatorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"));\n\n        xdoc.getXClass().addTextField(\"key\", \"Key\", 30);\n        xdoc.newXObject(xdoc.getDocumentReference(), this.oldcore.getXWikiContext());\n\n        xdoc.setContentDirty(false);\n        this.oldcore.getSpyXWiki().saveDocument(xdoc, this.oldcore.getXWikiContext());\n\n        this.oldcore.getXWikiContext().setUserReference(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"));\n\n        Document document = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"),\n            document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n\n        document.set(\"key\", \"value\");\n\n        assertEquals(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"),\n            document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n    }\n\n    @Test\n    void saveAsAuthorWhenNoPR(MockitoComponentManager componentManager) throws XWikiException, ComponentLookupException\n    {\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"wiki0\", \"Space\", \"Page\"));\n        xdoc.setAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"));\n        xdoc.setContentAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"));\n        xdoc.setCreatorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"));\n\n        xdoc.setContentDirty(false);\n        this.oldcore.getSpyXWiki().saveDocument(xdoc, this.oldcore.getXWikiContext());\n\n        UserReferenceResolver<DocumentReference> userReferenceResolver = componentManager.getInstance(\n            new DefaultParameterizedType(null, UserReferenceResolver.class, DocumentReference.class), \"document\");\n\n        // Set context user\n        DocumentReference contextUser = new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\");\n        this.oldcore.getXWikiContext().setUserReference(contextUser);\n        UserReference userContextReference = userReferenceResolver.resolve(contextUser);\n        // Set context author\n        XWikiDocument contextDocument = new XWikiDocument(\"wiki1\", \"XWiki\", \"authordocument\");\n        DocumentReference authorReference = new DocumentReference(\"wiki3\", \"XWiki\", \"contextauthor\");\n        UserReference userAuthorReference = userReferenceResolver.resolve(authorReference);\n        contextDocument.setContentAuthorReference(authorReference);\n        this.oldcore.getSpyXWiki().saveDocument(xdoc, this.oldcore.getXWikiContext());\n        this.oldcore.getXWikiContext().setDoc(contextDocument);\n\n        when(this.oldcore.getMockAuthorizationManager().hasAccess(Right.EDIT, authorReference,\n            xdoc.getDocumentReference())).thenReturn(true);\n        when(this.oldcore.getMockRightService().hasProgrammingRights(this.oldcore.getXWikiContext())).thenReturn(false);\n\n        Document document = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"), document.getAuthorReference());\n\n        when(this.oldcore.getMockRightService().hasAccessLevel(\"edit\", this.oldcore.getXWikiContext().getUser(),\n            document.getPrefixedFullName(), this.oldcore.getXWikiContext())).thenReturn(false);\n\n        assertThrows(XWikiException.class, () -> document.save());\n\n        when(this.oldcore.getMockRightService().hasAccessLevel(\"edit\", this.oldcore.getXWikiContext().getUser(),\n            document.getPrefixedFullName(), this.oldcore.getXWikiContext())).thenReturn(true);\n\n        when(this.currentUserReferenceUserReferenceResolver.resolve(CurrentUserReference.INSTANCE))\n            .thenReturn(userContextReference)\n            .thenReturn(userContextReference)\n            .thenReturn(userAuthorReference)\n            .thenReturn(userContextReference);\n        document.save();\n\n        assertEquals(userContextReference, document.getAuthors().getOriginalMetadataAuthor());\n        assertEquals(userAuthorReference, document.getAuthors().getEffectiveMetadataAuthor());\n\n        when(this.oldcore.getMockRightService().hasProgrammingRights(this.oldcore.getXWikiContext())).thenReturn(true);\n\n        document.save();\n\n        assertEquals(userContextReference, document.getAuthors().getEffectiveMetadataAuthor());\n    }\n\n    @Test\n    void getAuthors()\n    {\n        DocumentAuthors documentAuthors = mock(DocumentAuthors.class);\n        AuthorizationManager mockAuthorizationManager = this.oldcore.getMockAuthorizationManager();\n        XWikiContext context = this.oldcore.getXWikiContext();\n        DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"Foo\");\n        context.setUserReference(userReference);\n        DocumentReference currentDocReference = mock(DocumentReference.class, \"currentDocRef\");\n        XWikiDocument currentDoc = mock(XWikiDocument.class);\n        when(currentDoc.getAuthors()).thenReturn(documentAuthors);\n        Document document = new Document(currentDoc, context);\n\n        when(currentDoc.getDocumentReference()).thenReturn(currentDocReference);\n\n        when(mockAuthorizationManager.hasAccess(Right.PROGRAM, userReference, currentDocReference)).thenReturn(false);\n        DocumentAuthors obtainedAuthors = document.getAuthors();\n        assertTrue(obtainedAuthors instanceof SafeDocumentAuthors);\n        assertEquals(new SafeDocumentAuthors(documentAuthors), obtainedAuthors);\n\n        verify(mockAuthorizationManager).hasAccess(Right.PROGRAM, userReference, currentDocReference);\n\n        when(mockAuthorizationManager.hasAccess(Right.PROGRAM, userReference, currentDocReference)).thenReturn(true);\n        when(currentDoc.clone()).thenReturn(currentDoc);\n        obtainedAuthors = document.getAuthors();\n        assertSame(documentAuthors, obtainedAuthors);\n        verify(mockAuthorizationManager, times(2)).hasAccess(Right.PROGRAM, userReference, currentDocReference);\n        verify(currentDoc).clone();\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.util.Calendar;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.observation.ObservationManager;\nimport org.xwiki.rendering.renderer.PrintRendererFactory;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.test.mockito.MockitoComponentManager;\nimport org.xwiki.user.CurrentUserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.doc.XWikiDocumentArchive;\nimport com.xpn.xwiki.test.MockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\nimport com.xpn.xwiki.test.reference.ReferenceComponentList;\nimport com.xpn.xwiki.user.api.XWikiRightService;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\n/**\n * Unit tests for {@link com.xpn.xwiki.api.XWiki}.\n * \n * @version $Id$\n */\n@OldcoreTest\n@ReferenceComponentList\npublic class XWikiTest\n{\n    @MockComponent\n    private UserReferenceResolver<CurrentUserReference> currentUserReferenceUserReferenceResolver;\n\n    @MockComponent\n    private ObservationManager observationManager;\n\n    private Document apiDocument;\n    private XWiki apiXWiki;\n\n    @BeforeEach\n    public void setup(MockitoOldcore mockitoOldcore) throws XWikiException\n    {\n        XWikiContext xWikiContext = mockitoOldcore.getXWikiContext();\n        this.apiXWiki = new XWiki(mockitoOldcore.getSpyXWiki(), xWikiContext);\n        XWikiRightService mockRightService = mockitoOldcore.getMockRightService();\n        when(mockRightService.hasProgrammingRights(any(), any())).thenReturn(true);\n        when(mockRightService.hasProgrammingRights(any())).thenReturn(true);\n        when(mockRightService.hasAccessLevel(any(), any(), any(), any())).thenReturn(true);\n        when(mockitoOldcore.getMockVersioningStore().getXWikiDocumentArchive(any(), any()))\n            .thenReturn(new XWikiDocumentArchive());\n\n        xWikiContext.setUser(\"Redtail\");\n        this.apiDocument =\n            new Document(new XWikiDocument(new DocumentReference(\"xwiki\", \"MilkyWay\", \"Fidis\")), xWikiContext);\n        this.apiDocument.getDocument().setCreator(\"c\" + xWikiContext.getUser());\n        this.apiDocument.getDocument().setAuthor(\"a\" + xWikiContext.getUser());\n        this.apiDocument.save();\n        xWikiContext.setUser(\"Earth\");\n    }\n\n    @Test\n    public void authorIsntChangedAfterDocumentCopy() throws XWikiException\n    {\n        String copyName = \"Lyre\";\n        this.apiXWiki.copyDocument(\"MilkyWay.Fidis\", copyName);\n        Document copy = this.apiXWiki.getDocument(copyName);\n\n        assertEquals(\"XWiki.Earth\", copy.getAuthor());\n    }\n\n    @Test\n    public void creatorIsntChangedAfterDocumentCopy() throws XWikiException\n    {\n        String copyName = \"Sirius\";\n        this.apiXWiki.copyDocument(\"MilkyWay.Fidis\", copyName);\n        Document copy = this.apiXWiki.getDocument(copyName);\n\n        assertEquals(\"XWiki.Earth\", copy.getCreator());\n    }\n\n    @Test\n    public void creationDateAfterDocumentCopy() throws XWikiException\n    {\n        String copyName = this.apiDocument.getDocumentReference().getName() + \"Copy\";\n        long startTime = (Calendar.getInstance().getTimeInMillis() / 1000) * 1000;\n        this.apiXWiki.copyDocument(\"MilkyWay.Fidis\", copyName);\n        long endTime = (Calendar.getInstance().getTimeInMillis() / 1000) * 1000;\n        long copyCreationTime = this.apiXWiki.getDocument(copyName).getCreationDate().getTime();\n\n        assertTrue(startTime <= copyCreationTime && copyCreationTime <= endTime);\n    }\n\n    @Test\n    public void getAvailableRendererSyntax(MockitoComponentManager componentManager) throws Exception\n    {\n        PrintRendererFactory factory1 = componentManager.registerMockComponent(PrintRendererFactory.class,\n            Syntax.PLAIN_1_0.toIdString());\n        PrintRendererFactory factory2 = componentManager.registerMockComponent(PrintRendererFactory.class,\n            Syntax.ANNOTATED_XHTML_1_0.toIdString());\n        when(factory1.getSyntax()).thenReturn(Syntax.PLAIN_1_0);\n        when(factory2.getSyntax()).thenReturn(Syntax.ANNOTATED_XHTML_1_0);\n\n        assertEquals(Syntax.PLAIN_1_0, this.apiXWiki.getAvailableRendererSyntax(\"plain\", \"1.0\"));\n        assertEquals(Syntax.PLAIN_1_0, this.apiXWiki.getAvailableRendererSyntax(\"Plain\", \"1.0\"));\n        assertEquals(Syntax.PLAIN_1_0, this.apiXWiki.getAvailableRendererSyntax(\"plain\", null));\n        assertNull(this.apiXWiki.getAvailableRendererSyntax(\"plai\", \"1.0\"));\n        assertNull(this.apiXWiki.getAvailableRendererSyntax(\"plai\", null));\n    }\n}\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Vector;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.lang.exception.ExceptionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.suigeneris.jrcs.diff.DifferentiationFailedException;\nimport org.suigeneris.jrcs.diff.delta.Delta;\nimport org.suigeneris.jrcs.rcs.Version;\nimport org.xwiki.component.util.DefaultParameterizedType;\nimport org.xwiki.configuration.ConfigurationSource;\nimport org.xwiki.context.Execution;\nimport org.xwiki.context.ExecutionContext;\nimport org.xwiki.display.internal.DocumentDisplayerParameters;\nimport org.xwiki.model.document.DocumentAuthors;\nimport org.xwiki.model.internal.document.SafeDocumentAuthors;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.ObjectReference;\nimport org.xwiki.model.reference.PageReference;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.parser.ParseException;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.security.authorization.AuthorizationException;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.stability.Unstable;\nimport org.xwiki.user.CurrentUserReference;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiConstant;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.criteria.impl.Period;\nimport com.xpn.xwiki.criteria.impl.PeriodFactory;\nimport com.xpn.xwiki.criteria.impl.Range;\nimport com.xpn.xwiki.criteria.impl.RangeFactory;\nimport com.xpn.xwiki.criteria.impl.RevisionCriteria;\nimport com.xpn.xwiki.criteria.impl.Scope;\nimport com.xpn.xwiki.criteria.impl.ScopeFactory;\nimport com.xpn.xwiki.doc.DocumentRevisionProvider;\nimport com.xpn.xwiki.doc.MetaDataDiff;\nimport com.xpn.xwiki.doc.XWikiAttachment;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.doc.XWikiDocumentArchive;\nimport com.xpn.xwiki.doc.XWikiLink;\nimport com.xpn.xwiki.doc.XWikiLock;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.BaseProperty;\nimport com.xpn.xwiki.objects.ObjectDiff;\nimport com.xpn.xwiki.objects.classes.BaseClass;\nimport com.xpn.xwiki.plugin.fileupload.FileUploadPlugin;\nimport com.xpn.xwiki.stats.api.XWikiStatsService;\nimport com.xpn.xwiki.stats.impl.DocumentStats;\nimport com.xpn.xwiki.stats.impl.RefererStats;\nimport com.xpn.xwiki.util.TOCGenerator;\nimport com.xpn.xwiki.util.Util;\nimport com.xpn.xwiki.web.Utils;\n\n/**\n * This class represents a document or page in the wiki. This is a security and usability wrapper which wraps\n * {@link com.xpn.xwiki.doc.XWikiDocument} In scripting, an object representing the document in which the script resides\n * will be bound to a variable called doc.\n *\n * @version $Id$\n */\npublic class Document extends Api\n{\n    /** Logging helper object. */\n    private static final Logger LOGGER = LoggerFactory.getLogger(Document.class);\n\n    /**\n     * The XWikiDocument object wrapped by this API.\n     */\n    protected XWikiDocument initialDoc;\n\n    /**\n     * The XWikiDocument object wrapped by this API.\n     */\n    protected XWikiDocument doc;\n\n    /**\n     * Convenience object used by object related methods.\n     */\n    protected Object currentObj;\n\n    /**\n     * Used to resolve a string into a proper Document Reference using the current document's reference to fill the\n     * blanks, except for the page name for which the default page name is used instead and for the wiki name for which\n     * the current wiki is used instead of the current document reference's wiki.\n     */\n    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;\n\n    /**\n     * Used to convert a proper Document Reference to string (standard form).\n     */\n    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;\n\n    /**\n     * Used to convert a proper Document Reference to a string but without the wiki name.\n     */\n    private EntityReferenceSerializer<String> localEntityReferenceSerializer;\n\n    private DocumentRevisionProvider documentRevisionProvider;\n\n    private ConfigurationSource configuration;\n\n    private DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver()\n    {\n        if (this.currentMixedDocumentReferenceResolver == null) {\n            this.currentMixedDocumentReferenceResolver =\n                Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n        }\n\n        return this.currentMixedDocumentReferenceResolver;\n    }\n\n    private EntityReferenceSerializer<String> getDefaultEntityReferenceSerializer()\n    {\n        if (this.defaultEntityReferenceSerializer == null) {\n            this.defaultEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n        }\n\n        return this.defaultEntityReferenceSerializer;\n    }\n\n    private EntityReferenceSerializer<String> getLocalEntityReferenceSerializer()\n    {\n        if (this.localEntityReferenceSerializer == null) {\n            this.localEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, \"local\");\n        }\n\n        return this.localEntityReferenceSerializer;\n    }\n\n    private DocumentRevisionProvider getDocumentRevisionProvider()\n    {\n        if (this.documentRevisionProvider == null) {\n            this.documentRevisionProvider = Utils.getComponent(DocumentRevisionProvider.class);\n        }\n\n        return this.documentRevisionProvider;\n    }\n\n    private ConfigurationSource getConfiguration()\n    {\n        if (this.configuration == null) {\n            this.configuration = Utils.getComponent(ConfigurationSource.class);\n        }\n\n        return this.configuration;\n    }\n\n    /**\n     * Document constructor.\n     *\n     * @param doc The XWikiDocument object to wrap.\n     * @param context The current request context.\n     */\n    public Document(XWikiDocument doc, XWikiContext context)\n    {\n        super(context);\n\n        this.initialDoc = doc;\n        this.doc = this.initialDoc;\n    }\n\n    /**\n     * Get the XWikiDocument wrapped by this API. This function is accessible only if you have the programming rights\n     * give access to the priviledged API of the Document.\n     *\n     * @return The XWikiDocument wrapped by this API.\n     */\n    public XWikiDocument getDocument()\n    {\n        if (hasProgrammingRights()) {\n            return this.doc;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Get a clone of the XWikiDocument wrapped by this API.\n     *\n     * @return A clone of the XWikiDocument wrapped by this API.\n     */\n    protected XWikiDocument getDoc()\n    {\n        if (this.initialDoc == this.doc) {\n            this.doc = this.initialDoc.clone();\n        }\n\n        return this.doc;\n    }\n\n    /**\n     * return the ID of the document. this ID is unique across the wiki.\n     *\n     * @return the id of the document.\n     */\n    public long getId()\n    {\n        return this.doc.getId();\n    }\n\n    /**\n     * returns the DocumentReference for the current document\n     *\n     * @return the DocumentReference of the current document\n     * @since 2.3M1\n     */\n    public DocumentReference getDocumentReference()\n    {\n        return this.doc.getDocumentReference();\n    }\n\n    /**\n     * @return the {@link DocumentReference} of the document also containing the document {@link Locale}\n     * @since 9.3RC1\n     */\n    public DocumentReference getDocumentReferenceWithLocale()\n    {\n        return this.doc.getDocumentReferenceWithLocale();\n    }\n\n    /**\n     * @return the reference of the document as {@link PageReference} without the {@link Locale}\n     * @since 10.6RC1\n     */\n    public PageReference getPageReference()\n    {\n        return this.doc.getPageReference();\n    }\n\n    /**\n     * @return the reference of the document as {@link PageReference} including the {@link Locale}\n     * @since 10.6RC1\n     */\n    public PageReference getPageReferenceWithLocale()\n    {\n        return this.doc.getPageReferenceWithLocale();\n    }\n\n    /**\n     * @return the last part of the document's reference. For example if the reference of a document is\n     *         {@code MySpace.Mydoc}, the returned name is {@code MyDoc}. For a nested document, the last part of the\n     *         reference is always {@code WebHome} and thus the returned name is {@code Webhome}. It's better to use\n     *         {@link #getPageReference()} or {@link #getDocumentReference()}, e.g. with\n     *         {@code getPageReference().getName()} or {@code getDocumentReference().getName()}. To get the space name\n     *         of the nested document you can use {@code getPageReference().getName()} or\n     *         {@code getDocumentReference().getParent().getName()}.\n     * @see #getPageReference()\n     * @see #getDocumentReference()\n     * @deprecated since 11.0, use {@link #getDocumentReference()} instead\n     */\n    @Deprecated\n    public String getName()\n{\n    return this.doc.getDocumentReference().getName();\n}\n\n    /**\n     * Return the full local space reference of the Document. For example a document located in sub-space\n     * <code>space11</code> of space <code>space1</code> will return <code>space1.space11</code>.\n     *\n     * @return the name of the spaces of the document\n     */\n    public String getSpace()\n    {\n        return this.doc.getSpace();\n    }\n\n    /**\n     * Get the name wiki where the document is stored.\n     *\n     * @return The name of the wiki where this document is stored.\n     * @since 1.1.2\n     * @since 1.2M2\n     */\n    public String getWiki()\n    {\n        return this.doc.getDocumentReference().getWikiReference().getName();\n    }\n\n    /**\n     * Get the fullName of the document. If a document is named \"MyDoc\" in space \"MySpace\", the fullname is\n     * \"MySpace.MyDoc\". In a wiki, all the documents have a different fullName.\n     *\n     * @return fullName of the document.\n     */\n    public String getFullName()\n    {\n        return getLocalEntityReferenceSerializer().serialize(this.doc.getDocumentReference());\n    }\n\n    /**\n     * Get the complete fullName of the document. The real full name of the document containing the name of the wiki\n     * where the document is stored. For a document stored in the wiki \"xwiki\", in space \"MySpace\", named \"MyDoc\", its\n     * complete full name is \"xwiki:MySpace.MyDoc\".\n     *\n     * @return The complete fullName of the document.\n     * @since 1.1.2\n     * @since 1.2M2\n     */\n    public String getPrefixedFullName()\n    {\n        return getDefaultEntityReferenceSerializer().serialize(this.doc.getDocumentReference());\n    }\n\n    /**\n     * Get a Version object representing the current version of the document.\n     *\n     * @return A Version object representing the current version of the document\n     */\n    public Version getRCSVersion()\n    {\n        return this.doc.getRCSVersion();\n    }\n\n    /**\n     * Get a string representing the current version of the document.\n     *\n     * @return A string representing the current version of the document.\n     */\n    public String getVersion()\n    {\n        return this.doc.getVersion();\n    }\n\n    /**\n     * Get a string representing the previous version of the document.\n     *\n     * @return A string representing the previous version of the document. If this is the first version then it returns\n     *         null.\n     */\n    public String getPreviousVersion()\n    {\n        return this.doc.getPreviousVersion();\n    }\n\n    /**\n     * Get the value of the title field of the document.\n     *\n     * @return The value of the title field of the document.\n     */\n    public String getTitle()\n    {\n        return this.doc.getTitle();\n    }\n\n    /**\n     * Get document title. If a title has not been provided through the title field, it looks for a section title in the\n     * document's content and if not found return the page name. The returned title is also interpreted which means it's\n     * allowed to use Velocity, Groovy, etc syntax within a title.\n     *\n     * @return The document title as XHTML\n     */\n    public String getDisplayTitle()\n    {\n        return this.doc.getRenderedTitle(getXWikiContext());\n    }\n\n    /**\n     * Returns the document title as plain text\n     *\n     * @return the document title as plain text (all markup removed)\n     * @since 3.0M1\n     */\n    public String getPlainTitle()\n    {\n        return this.doc.getRenderedTitle(Syntax.PLAIN_1_0, getXWikiContext());\n    }\n\n    /**\n     * Returns the title of the document rendered through wiki syntax and velocity\n     *\n     * @return the title rendered through wiki syntax and velocity\n     * @see XWikiDocument#getRenderedTitle(Syntax, XWikiContext)\n     */\n    public String getRenderedTitle(String syntaxId) throws XWikiException\n    {\n        try {\n            return this.doc.getRenderedTitle(Syntax.valueOf(syntaxId), getXWikiContext());\n        } catch (ParseException e) {\n            LOGGER.error(\"Failed to parse provided syntax identifier [\" + syntaxId + \"]\", e);\n\n            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN,\n                \"Failed to parse syntax identifier [\" + syntaxId + \"]\", e);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to render document [\" + getPrefixedFullName() + \"] title content\", e);\n\n            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN,\n                \"Failed to render document [\" + getPrefixedFullName() + \"] content title\", e);\n        }\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getFormat()\n    {\n        return this.doc.getFormat();\n    }\n\n    /**\n     * Get fullName of the profile document of the author of the current version of the document. Example: XWiki.Admin.\n     *\n     * @return The fullName of the profile document of the effective metadata author of the current version of the\n     *         document.\n     */\n    public String getAuthor()\n    {\n        return this.doc.getAuthor();\n    }\n\n    /**\n     * @return the document author reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getAuthorReference()\n    {\n        return this.doc.getAuthorReference();\n    }\n\n    /**\n     * Get fullName of the profile document of the author of the content modification of this document version. Example:\n     * XWiki.Admin.\n     *\n     * @return The fullName of the profile document of the author of the content modification in this document version.\n     */\n    public String getContentAuthor()\n    {\n        return this.doc.getContentAuthor();\n    }\n\n    /**\n     * @return the document content author reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getContentAuthorReference()\n    {\n        return this.doc.getContentAuthorReference();\n    }\n\n    /**\n     * @return The date when this document version has been modified.\n     */\n    public Date getDate()\n    {\n        return this.doc.getDate();\n    }\n\n    /**\n     * Get the date when the content modification has been done on this document version. A content update excludes\n     * modifications to meta data fields or comments of the document.\n     *\n     * @return The date where the content modification has been done on this document version.\n     */\n    public Date getContentUpdateDate()\n    {\n        return this.doc.getContentUpdateDate();\n    }\n\n    /**\n     * @return the original creation date of the document.\n     */\n    public Date getCreationDate()\n    {\n        return this.doc.getCreationDate();\n    }\n\n    /**\n     * Get the name of the parent of this document.\n     *\n     * @return The name of the parent of this document.\n     */\n    public String getParent()\n    {\n        return this.doc.getParent();\n    }\n\n    /**\n     * @return the parent reference or null if the parent is not set\n     * @since 7.3M1\n     */\n    public DocumentReference getParentReference()\n    {\n        return this.doc.getParentReference();\n    }\n\n    /**\n     * Get fullName of the profile document of the document creator.\n     *\n     * @return The fullName of the profile document of the document creator.\n     */\n    public String getCreator()\n    {\n        return this.doc.getCreator();\n    }\n\n    /**\n     * @return the document creator reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getCreatorReference()\n    {\n        return this.doc.getCreatorReference();\n    }\n\n    /**\n     * Get raw content of the document, i.e. the content that is visible through the wiki editor.\n     *\n     * @return The raw content of the document.\n     */\n    public String getContent()\n    {\n        return this.doc.getContent();\n    }\n\n    /**\n     * NOTE: This method caches the XDOM and returns a clone that can be safely modified.\n     *\n     * @return the XDOM corresponding to the document's string content\n     * @since 7.0RC1\n     */\n    public XDOM getXDOM()\n    {\n        return this.doc.getXDOM();\n    }\n\n    /**\n     * @return The syntax representing the syntax used for the document's content\n     * @since 2.3M1\n     */\n    public Syntax getSyntax()\n    {\n        return this.doc.getSyntax();\n    }\n\n    /**\n     * Get the Syntax id representing the syntax used for the document. For example \"xwiki/1.0\" represents the first\n     * version XWiki syntax while \"xwiki/2.0\" represents version 2.0 of the XWiki Syntax.\n     *\n     * @return The syntax id representing the syntax used for the document.\n     * @deprecated since 2.3M1 use {@link #getSyntax()} instead\n     */\n    @Deprecated\n    public String getSyntaxId()\n    {\n        return this.doc.getSyntax().toIdString();\n    }\n\n    /**\n     * Same as {@link #getLocale()} but as String.\n     *\n     * @return the locale of the document.\n     * @deprecated since 5.4M1 use {@link #getLocale()} instead\n     */\n    @Deprecated\n    public String getLanguage()\n    {\n        return this.doc.getLanguage();\n    }\n\n    /**\n     * Get the locale of the document. If the document is a translation it returns the locale set for it, otherwise, it\n     * returns the root locale.\n     *\n     * @return the locale of the document\n     * @since 5.4M1\n     */\n    public Locale getLocale()\n    {\n        return this.doc.getLocale();\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getTemplate()\n    {\n        String templateReferenceAsString = \"\";\n        DocumentReference templateDocumentReference = this.doc.getTemplateDocumentReference();\n        if (templateDocumentReference != null) {\n            templateReferenceAsString = getLocalEntityReferenceSerializer().serialize(templateDocumentReference);\n        }\n        return templateReferenceAsString;\n    }\n\n    /**\n     * Same as {@link #getRealLocale()} but as String.\n     *\n     * @return the real locale\n     * @deprecated since 8.0M1, use {@link #getRealLocale()} instead\n     */\n    @Deprecated\n    public String getRealLanguage() throws XWikiException\n    {\n        return this.doc.getRealLanguage(getXWikiContext());\n    }\n\n    /**\n     * Gets the real locale of the document. The real locale is either the default locale field when the locale field is\n     * empty (when the document is the default document) or the locale field otherwise when the document is a\n     * translation document\n     * \n     * @return the actual locale of the document\n     * @since 8.0M1\n     */\n    public Locale getRealLocale()\n    {\n        return this.doc.getRealLocale();\n    }\n\n    /**\n     * Same as {@link #getDefaultLocale()} but as String.\n     * \n     * @return the locale of the default document\n     * @deprecated since 8.0M1, use {@link #getDefaultLocale()} instead\n     */\n    @Deprecated\n    public String getDefaultLanguage()\n    {\n        return this.doc.getDefaultLanguage();\n    }\n\n    /**\n     * @return the Locale of the default version of the document (usually {@link Locale#ROOT} or {@link Locale#ENGLISH})\n     * @since 8.0M1\n     */\n    public Locale getDefaultLocale()\n    {\n        return this.doc.getDefaultLocale();\n    }\n\n    /**\n     * @param defaultLocale the locale content in the default document version\n     * @since 11.9RC1\n     */\n    public void setDefaultLocale(Locale defaultLocale)\n    {\n        this.doc.setDefaultLocale(defaultLocale);\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getDefaultTemplate()\n    {\n        return this.doc.getDefaultTemplate();\n    }\n\n    /**\n     * @return the comment of of the document version\n     */\n    public String getComment()\n    {\n        return this.doc.getComment();\n    }\n\n    /**\n     * @return true if the this document version was a minor edit.\n     */\n    public boolean isMinorEdit()\n    {\n        return this.doc.isMinorEdit();\n    }\n\n    /**\n     * @return the list of locales for which this document has a translation; the original (default) locale is not\n     *         included\n     * @throws XWikiException if retrieving the document translations from the database fails\n     * @since 12.4RC1\n     */\n    public List<Locale> getTranslationLocales() throws XWikiException\n    {\n        return this.doc.getTranslationLocales(getXWikiContext());\n    }\n\n    /**\n     * @return the translated document's content if the wiki is multilingual, the locale is first checked in the URL,\n     *         the cookie, the user profile and finally the wiki configuration if not, the locale is the one on the wiki\n     *         configuration.\n     */\n    public String getTranslatedContent() throws XWikiException\n    {\n        return this.doc.getTranslatedContent(getXWikiContext());\n    }\n\n    /**\n     * @return the translated content in the given locale\n     */\n    public String getTranslatedContent(String locale) throws XWikiException\n    {\n        return this.doc.getTranslatedContent(locale, getXWikiContext());\n    }\n\n    /**\n     * @return the translated document in the given locale\n     */\n    public Document getTranslatedDocument(String locale) throws XWikiException\n    {\n        return this.doc.getTranslatedDocument(locale, getXWikiContext()).newDocument(getXWikiContext());\n    }\n\n    /**\n     * @return the tranlated Document if the wiki is multilingual, the locale is first checked in the URL, the cookie,\n     *         the user profile and finally the wiki configuration if not, the locale is the one on the wiki\n     *         configuration.\n     */\n    public Document getTranslatedDocument() throws XWikiException\n    {\n        return this.doc.getTranslatedDocument(getXWikiContext()).newDocument(getXWikiContext());\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @return the content of the current document rendered.\n     * @since 11.3RC1\n     */\n    public String displayDocument(Syntax targetSyntax) throws XWikiException\n    {\n        return this.doc.displayDocument(targetSyntax, getXWikiContext());\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @return the content of the current document rendered.\n     * @since 11.5RC1\n     */\n    public String displayDocument(Syntax targetSyntax, boolean restricted) throws XWikiException\n    {\n        return this.doc.displayDocument(targetSyntax, restricted, getXWikiContext());\n    }\n\n    /**\n     * @return the content of the current document rendered.\n     * @since 11.3RC1\n     */\n    public String displayDocument() throws XWikiException\n    {\n        return this.doc.displayDocument(getXWikiContext());\n    }\n\n    /**\n     * @return the content of the current document rendered.\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @since 11.5RC1\n     */\n    public String displayDocument(boolean restricted) throws XWikiException\n    {\n        return this.doc.displayDocument(restricted, getXWikiContext());\n    }\n\n    /**\n     * @return the content of the document or its translations rendered.\n     */\n    public String getRenderedContent() throws XWikiException\n    {\n        return this.doc.getRenderedContent(getXWikiContext());\n    }\n\n    /**\n     * Execute and render the document in the current context.\n     * <p>\n     * The code is executed with right of this document content author.\n     * \n     * @param transformationContextIsolated see {@link DocumentDisplayerParameters#isTransformationContextIsolated()}\n     * @return the result\n     * @throws XWikiException when failing to display the document\n     * @since 8.4RC1\n     */\n    public String getRenderedContent(boolean transformationContextIsolated) throws XWikiException\n    {\n        return this.doc.getRenderedContent(transformationContextIsolated, getXWikiContext());\n    }\n\n    /**\n     * @param text the text to render\n     * @return the given text rendered in the context of this document\n     * @deprecated since 1.6M1 use {@link #getRenderedContent(String, String)}\n     */\n    @Deprecated\n    public String getRenderedContent(String text) throws XWikiException\n    {\n        return getRenderedContent(text, Syntax.XWIKI_1_0.toIdString());\n    }\n\n    /**\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 1.6M1\n     */\n    public String getRenderedContent(String text, String syntaxId) throws XWikiException\n    {\n        return getRenderedContent(text, syntaxId, false);\n    }\n\n    /**\n     * Render a text in a restricted mode, where script macros are completely disabled.\n     *\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 4.2M1\n     */\n    public String getRenderedContentRestricted(String text, String syntaxId) throws XWikiException\n    {\n        return getRenderedContent(text, syntaxId, true);\n    }\n\n    /**\n     * Render a text in a restricted mode, where script macros are completely disabled.\n     *\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @return the given text rendered in the context of this document using the passed Syntax\n     */\n    private String getRenderedContent(String text, String syntaxId, boolean restricted) throws XWikiException\n    {\n        // Make sure we keep using current author as passed content author\n        return this.doc.getRenderedContent(text, syntaxId, restricted, getCallerDocument(getXWikiContext()),\n            getXWikiContext());\n    }\n\n    /**\n     * @param text the text to render\n     * @param sourceSyntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @param targetSyntaxId the id of the syntax in which to render the document content\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 2.0M3\n     */\n    public String getRenderedContent(String text, String sourceSyntaxId, String targetSyntaxId) throws XWikiException\n    {\n        // Make sure we keep using current author as passed content author\n        return this.doc.getRenderedContent(text, sourceSyntaxId, targetSyntaxId, false,\n            getCallerDocument(getXWikiContext()), getXWikiContext());\n    }\n\n    private XWikiDocument getCallerDocument(XWikiContext xcontext)\n    {\n        XWikiDocument sdoc = (XWikiDocument) xcontext.get(\"sdoc\");\n        if (sdoc == null) {\n            sdoc = xcontext.getDoc();\n        }\n\n        return sdoc;\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @return the rendered content\n     * @throws XWikiException error when rendering content\n     */\n    public String getRenderedContent(Syntax targetSyntax) throws XWikiException\n    {\n        return this.doc.getRenderedContent(targetSyntax, getXWikiContext());\n    }\n\n    /**\n     * Get the document's content XML-escaped.\n     *\n     * @return an XML-escaped version of the content of this document.\n     */\n    public String getEscapedContent() throws XWikiException\n    {\n        return this.doc.getEscapedContent(getXWikiContext());\n    }\n\n    /**\n     * @return the archive of this document's history in string format\n     */\n    public String getArchive() throws XWikiException\n    {\n        return this.doc.getDocumentArchive(getXWikiContext()).getArchive(getXWikiContext());\n    }\n\n    /**\n     * Get the archive of this document's history. This function is accessible only if you have the programming rights.\n     *\n     * @return the archive of this document's history as an {@link XWikiDocumentArchive}.\n     */\n    public XWikiDocumentArchive getDocumentArchive() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.getDocumentArchive(getXWikiContext());\n        }\n        return null;\n    }\n\n    /**\n     * @return true if the document is a new one (ie it has never been saved) or false otherwise\n     */\n    public boolean isNew()\n    {\n        return this.doc.isNew();\n    }\n\n    /**\n     * Return the relative URL of download for the the given attachment name.\n     *\n     * @param filename the name of the attachment\n     * @return A String with the URL or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename)\n    {\n        return this.doc.getAttachmentURL(filename, getXWikiContext());\n    }\n\n    /**\n     * Get the relative URL of the given action for the the given attachment name.\n     *\n     * @param filename the name of the attachment.\n     * @param action what to do to the file for example \"delattachment\", \"download\" or \"downloadrev\".\n     * @return a string representation of a URL to do the given operation or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename, String action)\n    {\n        return this.doc.getAttachmentURL(filename, action, getXWikiContext());\n    }\n\n    /**\n     * Get the relative URL of an action on an attachment. the given action for the the given attachment name with\n     * \"queryString\" parameters\n     *\n     * @param filename the name of the attachment.\n     * @param action what to do to the file for example \"delattachment\", \"download\" or \"downloadrev\"\n     * @param queryString parameters added to the URL, the \"rev\" parameter is used to specify a revision if using the\n     *            \"downloadrev\" action. The query string must not begin with an ? character.\n     * @return a string representation of a URL to do the given operation or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename, String action, String queryString)\n    {\n        return this.doc.getAttachmentURL(filename, action, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get an old revision of an attachment.\n     *\n     * @param filename the name of the attachment.\n     * @param version a revision number such as \"1.1\" or \"1.2\".\n     * @return the URL for accessing to the archive of the attachment \"filename\" at the version \"version\" or null if the\n     *         file name is empty\n     */\n    public String getAttachmentRevisionURL(String filename, String version)\n    {\n        return this.doc.getAttachmentRevisionURL(filename, version, getXWikiContext());\n    }\n\n    /**\n     * Get an old revision of an attachment.\n     *\n     * @param filename the name of the attachment.\n     * @param version a revision number such as \"1.1\" or \"1.2\".\n     * @param queryString additional query parameters to pass in the request.\n     * @return the URL for accessing to the archive of the attachment \"filename\" at the version \"version\" with the given\n     *         queryString parameters or null if the file name is empty\n     */\n    public String getAttachmentRevisionURL(String filename, String version, String queryString)\n    {\n        return this.doc.getAttachmentRevisionURL(filename, version, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get the URL of this document.\n     *\n     * @return the URL to view this document, this will be a relative URL for example: /xwiki/bin/view/Main/WebHome\n     * @see #getExternalURL() for an absolute URL which can used outside of the site.\n     */\n    public String getURL()\n    {\n        return this.doc.getURL(\"view\", getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @return the URL of this document with the given action.\n     * @see #getExternalURL(String) for an absolute URL which can used outside of the site.\n     */\n    public String getURL(String action)\n    {\n        return this.doc.getURL(action, getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @param queryString parameters to pass in the request eg: {@code paramA=value1&paramB=value2}\n     * @return the URL of this document with the given action and queryString as parameters.\n     * @see #getExternalURL(String, String) for an absolute URL which can used outside of the site.\n     */\n    public String getURL(String action, String queryString)\n    {\n        return this.doc.getURL(action, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get the external URL to do a given action on this document.\n     *\n     * @return the full URL of the document, sutable for use at external websites for example:\n     *         http://www.xwiki.org/xwiki/bin/view/Main/WebHome\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL()\n    {\n        return this.doc.getExternalURL(\"view\", getXWikiContext());\n    }\n\n    /**\n     * Get the external URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @return the URL of this document with the given action.\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL(String action)\n    {\n        return this.doc.getExternalURL(action, getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @param queryString parameters to pass in the request eg: {@code paramA=value1&paramB=value2}\n     * @return the URL of this document with the given action and queryString as parameters.\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL(String action, String queryString)\n    {\n        return this.doc.getExternalURL(action, queryString, getXWikiContext());\n    }\n\n    /**\n     * @return the relative URL of the parent document of this document\n     */\n    public String getParentURL() throws XWikiException\n    {\n        return this.doc.getParentURL(getXWikiContext());\n    }\n\n    /**\n     * @return the XClass associated to this document when the document represents an XWiki Class\n     */\n    public Class getxWikiClass()\n    {\n        BaseClass bclass = this.getDoc().getXClass();\n        if (bclass == null) {\n            return null;\n        } else {\n            return new Class(bclass, getXWikiContext());\n        }\n    }\n\n    /**\n     * @return the array of XClasses representing the objects of this document\n     */\n    public Class[] getxWikiClasses()\n    {\n        List<BaseClass> list = this.getDoc().getXClasses(getXWikiContext());\n        if (list == null) {\n            return null;\n        }\n        Class[] result = new Class[list.size()];\n        for (int i = 0; i < list.size(); i++) {\n            result[i] = new Class(list.get(i), getXWikiContext());\n        }\n        return result;\n    }\n\n    /**\n     * Creates a New XWiki Object of the given classname\n     *\n     * @param classname the classname used\n     * @return the number of the object created\n     */\n    public int createNewObject(String classname) throws XWikiException\n    {\n        int index = getDoc().createNewObject(classname, getXWikiContext());\n\n        updateAuthor();\n\n        return index;\n    }\n\n    /**\n     * Creates a New XWiki Object of the given classname\n     *\n     * @param classname the classname used\n     * @return the object created\n     */\n    public Object newObject(String classname) throws XWikiException\n    {\n        int nb = createNewObject(classname);\n        return getObject(classname, nb);\n    }\n\n    /**\n     * @return true of the document has been loaded from cache\n     */\n    public boolean isFromCache()\n    {\n        return this.doc.isFromCache();\n    }\n\n    /**\n     * @param classname the classname used\n     * @return the number of objects available for a given classname\n     */\n    public int getObjectNumbers(String classname)\n    {\n        return this.doc.getObjectNumbers(classname);\n    }\n\n    /**\n     * Get the list of all objects available in this document organized in a Map by classname\n     *\n     * @return the map of objects\n     */\n    public Map<String, Vector<Object>> getxWikiObjects()\n    {\n        Map<DocumentReference, List<BaseObject>> map = this.getDoc().getXObjects();\n        Map<String, Vector<Object>> resultmap = new HashMap<String, Vector<Object>>();\n        for (Map.Entry<DocumentReference, List<BaseObject>> entry : map.entrySet()) {\n            List<BaseObject> objects = entry.getValue();\n            if (objects != null) {\n                resultmap.put(getLocalEntityReferenceSerializer().serialize(entry.getKey()), getXObjects(objects));\n            }\n        }\n        return resultmap;\n    }\n\n    protected Vector<Object> getXObjects(List<BaseObject> objects)\n    {\n        if (objects == null) {\n            return new Vector<Object>(0);\n        }\n        Vector<Object> result = new Vector<Object>(objects.size());\n        for (BaseObject bobj : objects) {\n            if (bobj != null) {\n                result.add(newObjectApi(bobj, getXWikiContext()));\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Get the list of objects for a given classname classname\n     *\n     * @return the vector of objects\n     */\n    public Vector<Object> getObjects(String className)\n    {\n        List<BaseObject> objects = this.getDoc().getXObjects(this.doc.resolveClassReference(className));\n        return getXObjects(objects);\n    }\n\n    /**\n     * Get the first object that contains the given fieldname\n     *\n     * @param fieldname name of the field to find in the object\n     * @return the XWiki Object\n     */\n    public Object getFirstObject(String fieldname)\n    {\n        try {\n            BaseObject obj = this.getDoc().getFirstObject(fieldname, getXWikiContext());\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the first object of a given classname that has a field name matching the given value\n     *\n     * @param classname name of the class of the object to look for\n     * @param key name of the field to find in the object\n     * @param value value of the field to find in the object\n     * @param failover true if the first object will be given when none found\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, String key, String value, boolean failover)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, key, value, failover);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Select a subset of objects from a given class, filtered on a \"key = value\" criteria.\n     *\n     * @param classname The type of objects to return.\n     * @param key The name of the property used for filtering.\n     * @param value The required value.\n     * @return A Vector of {@link Object objects} matching the criteria. If no objects are found, or if the key is an\n     *         empty String, then an empty vector is returned.\n     */\n    public Vector<Object> getObjects(String classname, String key, String value)\n    {\n        Vector<Object> result = new Vector<Object>();\n        if (StringUtils.isBlank(key) || value == null) {\n            return getObjects(classname);\n        }\n        try {\n            Vector<BaseObject> allObjects = this.getDoc().getObjects(classname);\n            if (allObjects == null || allObjects.size() == 0) {\n                return result;\n            } else {\n                for (BaseObject obj : allObjects) {\n                    if (obj != null) {\n                        BaseProperty prop = (BaseProperty) obj.get(key);\n                        if (prop == null || prop.getValue() == null) {\n                            continue;\n                        }\n                        if (value.equals(prop.getValue().toString())) {\n                            result.add(newObjectApi(obj, getXWikiContext()));\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n        }\n        return result;\n    }\n\n    /**\n     * Get the first object of a given classname that has a field name matching the given value When none found this\n     * method will return null\n     *\n     * @param classname name of the class of the object to look for\n     * @param key name of the field to find in the object\n     * @param value value of the field to find in the object\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, String key, String value)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, key, value);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the first object matching the given classname\n     *\n     * @param classname name of the class of the object to look for\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname)\n    {\n        return getObject(classname, false);\n    }\n\n    /**\n     * get the object of the given className. If there is no object of this className and the create parameter at true,\n     * the object is created.\n     *\n     * @param classname name of the class of the object to look for\n     * @param create true of the object should be created when it does not exist\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, boolean create)\n    {\n        try {\n            BaseObject obj = getDoc().getObject(classname, create, getXWikiContext());\n\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the object matching the given classname and given object number\n     *\n     * @param classname name of the class of the object\n     * @param nb number of the object\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, int nb)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, nb);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param objectReference the object reference\n     * @return the XWiki object from this document that matches the specified object reference\n     * @since 12.3RC1\n     */\n    public Object getObject(ObjectReference objectReference)\n    {\n        try {\n            BaseObject obj = this.getDoc().getXObject(objectReference);\n            return obj == null ? null : newObjectApi(obj, getXWikiContext());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param objectReference the object reference\n     * @param create if true, the object will be created when missing\n     * @return the XWiki object from this document that matches the specified object reference\n     * @since 14.0RC1\n     */\n    @Unstable\n    public Object getObject(ObjectReference objectReference, boolean create)\n    {\n        try {\n            BaseObject obj = this.getDoc().getXObject(objectReference, create, getXWikiContext());\n            return obj == null ? null : newObjectApi(obj, getXWikiContext());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    private Object newObjectApi(BaseObject obj, XWikiContext context)\n    {\n        return obj.newObjectApi(obj, context);\n    }\n\n    public String getXMLContent() throws XWikiException\n    {\n        String xml = this.doc.getXMLContent(getXWikiContext());\n        return getXWikiContext().getUtil().substitute(\"s/<email>.*?<\\\\/email>/<email>********<\\\\/email>/goi\",\n            getXWikiContext().getUtil().substitute(\"s/<password>.*?<\\\\/password>/<password>********<\\\\/password>/goi\",\n                xml));\n    }\n\n    public String toXML() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.toXML(getXWikiContext());\n        } else {\n            return \"\";\n        }\n    }\n\n    public org.dom4j.Document toXMLDocument() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.toXMLDocument(getXWikiContext());\n        } else {\n            return null;\n        }\n    }\n\n    public Version[] getRevisions() throws XWikiException\n    {\n        return this.doc.getRevisions(getXWikiContext());\n    }\n\n    public String[] getRecentRevisions() throws XWikiException\n    {\n        return this.doc.getRecentRevisions(5, getXWikiContext());\n    }\n\n    public String[] getRecentRevisions(int nb) throws XWikiException\n    {\n        return this.doc.getRecentRevisions(nb, getXWikiContext());\n    }\n\n    /**\n     * Get document versions matching criterias like author, minimum creation date, etc.\n     *\n     * @param criteria criteria used to match versions\n     * @return a list of matching versions\n     */\n    public List<String> getRevisions(RevisionCriteria criteria) throws XWikiException\n    {\n        return this.doc.getRevisions(criteria, this.context);\n    }\n\n    /**\n     * Get information about a document version : author, date, etc.\n     *\n     * @param version the version you want to get information about\n     * @return a new RevisionInfo object\n     */\n    public RevisionInfo getRevisionInfo(String version) throws XWikiException\n    {\n        return new RevisionInfo(this.doc.getRevisionInfo(version, getXWikiContext()), getXWikiContext());\n    }\n\n    public List<Attachment> getAttachmentList()\n    {\n        List<Attachment> apis = new ArrayList<Attachment>();\n        for (XWikiAttachment attachment : this.getDoc().getAttachmentList()) {\n            apis.add(new Attachment(this, attachment, getXWikiContext()));\n        }\n        return apis;\n    }\n\n    public Vector<Object> getComments()\n    {\n        return getComments(true);\n    }\n\n    public Vector<Object> getComments(boolean asc)\n    {\n        return getXObjects(this.getDoc().getComments(asc));\n    }\n\n    /**\n     * Setting the current object to the given object. Following calls to display() will use this object as the\n     * reference for finding properties.\n     *\n     * @param object Object to use as a reference for further display calls\n     */\n    public void use(Object object)\n    {\n        this.currentObj = object;\n    }\n\n    /**\n     * Setting the current object to the first object of the given class name. Following calls to display() will use\n     * this object as the reference for finding properties.\n     *\n     * @param className class used to find the first object to use as the reference for display calls\n     */\n    public void use(String className)\n    {\n        this.currentObj = getObject(className);\n    }\n\n    /**\n     * Setting the current object to the object of the given class name and the given number. Following calls to\n     * display() will use this object as the reference for finding properties.\n     *\n     * @param className class used to find the object to use as the reference for display calls\n     * @param nb number of the object to use as the reference for display calls\n     */\n    public void use(String className, int nb)\n    {\n        this.currentObj = getObject(className, nb);\n    }\n\n    /**\n     * @return the className of the current active object use for display calls.\n     */\n    public String getActiveClass()\n    {\n        if (this.currentObj == null) {\n            return null;\n        } else {\n            return this.currentObj.getName();\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param obj Object to find the class to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field. with the optional addition of a mandatory field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, showMandatory, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, showMandatory, this.currentObj.getBaseObject(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object. with the optional addition of a mandatory field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param obj Object to find the class to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, showMandatory, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field. with the optional addition of a mandatory field before or after the field\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @param before true if the mandatory sign should be before the field\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, showMandatory, before, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, showMandatory, before, this.currentObj.getBaseObject(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object. with the optional addition of a mandatory field\n     * before or after the field\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @param before true if the mandatory sign should be before the field\n     * @param obj Object to find the class to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, showMandatory, before, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the tooltip of the given field. This function uses the active object or will find the first object that\n     * has the given field.\n     *\n     * @param fieldname fieldname to display the tooltip of\n     * @return the tooltip display of the field.\n     */\n    public String displayTooltip(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayTooltip(fieldname, getXWikiContext());\n        } else {\n            return this.doc.displayTooltip(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the tooltip of the given field of the given object.\n     *\n     * @param fieldname fieldname to display the tooltip of\n     * @param obj Object to find the class to display the tooltip of\n     * @return the tooltip display of the field.\n     */\n    public String displayTooltip(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayTooltip(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field. The display mode will be decided depending on page context (edit or inline context will\n     * display in edit, view context in view) This function uses the active object or will find the first object that\n     * has the given field. This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field in the given mode. This function uses the active object or will find the first object\n     * that has the given field. This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, mode, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, mode, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field in the given mode. This function uses the active object or will find the first object\n     * that has the given field. This function can return html inside and html macro A given prefix is added to the\n     * field names when these are forms.\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param prefix prefix to use for the form names\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, String prefix)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, mode, prefix, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, mode, prefix, this.currentObj.getBaseObject(), getSyntaxId(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field of the given object The display mode will be decided depending on page context (edit or\n     * inline context will display in edit, view context in view) This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @param obj object from which to take the field\n     * @return the display of the field.\n     */\n    public String display(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object using the given mode and syntax rendering The display mode will be\n     * decided depending on page context (edit or inline context will display in edit, view context in view) This\n     * function can return html inside and html macro\n     *\n     * @param fieldname the name of the field to display\n     * @param type the type of the field to display\n     * @param obj the object containing the field to display\n     * @param wrappingSyntaxId the syntax of the content in which the result will be included. This to take care of some\n     *            escaping depending of the syntax.\n     * @return the rendered field\n     */\n    public String display(String fieldname, String type, Object obj, String wrappingSyntaxId)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, type, obj.getBaseObject(), wrappingSyntaxId, getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object in the given mode. This function can return html inside and html\n     * macro\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param obj the object containing the field to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, mode, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object in the given mode. This function can return html inside and html\n     * macro A given prefix is added to the field names when these are forms.\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param prefix prefix to use for the form names\n     * @param obj the object containing the field to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, String prefix, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, mode, prefix, obj.getBaseObject(), getSyntaxId(), getXWikiContext());\n    }\n\n    public String displayForm(String className, String header, String format)\n    {\n        return this.doc.displayForm(className, header, format, getXWikiContext());\n    }\n\n    public String displayForm(String className, String header, String format, boolean linebreak)\n    {\n        return this.doc.displayForm(className, header, format, linebreak, getXWikiContext());\n    }\n\n    public String displayForm(String className)\n    {\n        return this.doc.displayForm(className, getXWikiContext());\n    }\n\n    public String displayRendered(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n        throws XWikiException\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayRendered(pclass.getBasePropertyClass(), prefix, object.getCollection(),\n            getXWikiContext());\n    }\n\n    public String displayView(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayView(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public String displayEdit(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayEdit(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public String displayHidden(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayHidden(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public List<String> getIncludedPages()\n    {\n        return this.doc.getIncludedPages(getXWikiContext());\n    }\n\n    public List<String> getIncludedMacros()\n    {\n        return this.doc.getIncludedMacros(getXWikiContext());\n    }\n\n    public List<String> getLinkedPages()\n    {\n        return new ArrayList<String>(this.doc.getUniqueLinkedPages(getXWikiContext()));\n    }\n\n    public Attachment getAttachment(String filename)\n    {\n        XWikiAttachment attach = this.getDoc().getAttachment(filename);\n        if (attach == null) {\n            return null;\n        } else {\n            return new Attachment(this, attach, getXWikiContext());\n        }\n    }\n\n    public List<Delta> getContentDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getContentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getContentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getContentDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CONTENT_ERROR,\n                    \"Error while making content diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<Delta> getXMLDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getXMLDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getXMLDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getXMLDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_XML_ERROR,\n                    \"Error while making xml diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<Delta> getRenderedContentDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getRenderedContentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getRenderedContentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getRenderedContentDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_RENDERED_ERROR,\n                    \"Error while making rendered diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<MetaDataDiff> getMetaDataDiff(Document origdoc, Document newdoc) throws XWikiException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getMetaDataDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getMetaDataDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getMetaDataDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_METADATA_ERROR,\n                    \"Error while making meta data diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<List<ObjectDiff>> getObjectDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getObjectDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getObjectDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getObjectDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_OBJECT_ERROR,\n                    \"Error while making meta object diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<List<ObjectDiff>> getClassDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getClassDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getClassDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getClassDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CLASS_ERROR,\n                    \"Error while making class diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<AttachmentDiff> getAttachmentDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return wrapAttachmentDiff(this.doc.getAttachmentDiff(new XWikiDocument(newdoc.getDocumentReference()),\n                    newdoc.doc, getXWikiContext()));\n            }\n            if (newdoc == null) {\n                return wrapAttachmentDiff(this.doc.getAttachmentDiff(origdoc.doc,\n                    new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext()));\n            }\n\n            return wrapAttachmentDiff(this.doc.getAttachmentDiff(origdoc.doc, newdoc.doc, getXWikiContext()));\n        } catch (Exception e) {\n            java.lang.Object[] args = { (origdoc != null) ? origdoc.getFullName() : null,\n            (origdoc != null) ? origdoc.getVersion() : null, (newdoc != null) ? newdoc.getVersion() : null };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_ATTACHMENT_ERROR,\n                    \"Error while making attachment diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    private List<AttachmentDiff> wrapAttachmentDiff(List<com.xpn.xwiki.doc.AttachmentDiff> diffs)\n    {\n        List<AttachmentDiff> safeAttachmentDiffs = new ArrayList<>();\n        for (com.xpn.xwiki.doc.AttachmentDiff diff : diffs) {\n            safeAttachmentDiffs.add(new AttachmentDiff(diff, getXWikiContext()));\n        }\n        return safeAttachmentDiffs;\n    }\n\n    public List<Delta> getLastChanges() throws XWikiException, DifferentiationFailedException\n    {\n        return this.doc.getLastChanges(getXWikiContext());\n    }\n\n    /**\n     * Get statistics about the number of request for the current page during the current month.\n     *\n     * @param action the type of request for which to retrieve statistics: view, edit...\n     * @return the statistics object holding information for this document and the current month\n     */\n    public DocumentStats getCurrentMonthPageStats(String action)\n    {\n        Scope scope = ScopeFactory.createPageScope(this.getFullName());\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<DocumentStats> stats = statisticsService.getDocumentStatistics(action, scope, period, range, this.context);\n        if (stats.size() > 0) {\n            return stats.get(0);\n        }\n        return new DocumentStats();\n    }\n\n    /**\n     * Get statistics about the number of request for the current space during the current month.\n     *\n     * @param action the type of request for which to retrieve statistics: view, edit...\n     * @return the statistics object holding information for the document's space and the current month\n     */\n    public DocumentStats getCurrentMonthSpaceStats(String action)\n    {\n        Scope scope = ScopeFactory.createSpaceScope(this.doc.getSpace(), false);\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<DocumentStats> stats = statisticsService.getDocumentStatistics(action, scope, period, range, this.context);\n        if (stats.size() > 0) {\n            return stats.get(0);\n        }\n        return new DocumentStats();\n    }\n\n    /**\n     * Get referer statistics for the current document during the current month.\n     *\n     * @return a list of referer statistics for the document's space\n     */\n    public List<RefererStats> getCurrentMonthRefStats()\n    {\n        Scope scope = ScopeFactory.createPageScope(this.getFullName());\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<RefererStats> stats = statisticsService.getRefererStatistics(\"\", scope, period, range, this.context);\n        return stats;\n    }\n\n    public boolean checkAccess(String right)\n    {\n        try {\n            return getXWikiContext().getWiki().checkAccess(right, this.doc, getXWikiContext());\n        } catch (XWikiException e) {\n            return false;\n        }\n    }\n\n    public boolean hasAccessLevel(String level)\n    {\n        try {\n            return getXWikiContext().getWiki().getRightService().hasAccessLevel(level, getXWikiContext().getUser(),\n                this.getPrefixedFullName(), getXWikiContext());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    @Override\n    public boolean hasAccessLevel(String level, String user)\n    {\n        try {\n            return getXWikiContext().getWiki().getRightService().hasAccessLevel(level, user, this.getPrefixedFullName(),\n                getXWikiContext());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    /**\n     * Verifies if the user identified by {@code userReference} has the access identified by {@code right} on this\n     * document.\n     * Note that this method does not override {@link Api#hasAccess(Right, DocumentReference)}: they share same\n     * signature but on the {@code Api} one the {@link DocumentReference} parameter is about the entity where to check\n     * the right, while here it's about the user to check right for.\n     * \n     * @param right the right to check\n     * @param userReference the user to check the right for\n     * @return {@code true} if the user has the specified right on this document, {@code false} otherwise\n     * @since 10.6RC1\n     */\n    public boolean hasAccess(Right right, DocumentReference userReference)\n    {\n        return getAuthorizationManager().hasAccess(right, userReference, getDocumentReference());\n    }\n\n    /**\n     * Verifies if the context user has the access identified by {@code right} on the current context document.\n     * @param right the right to check\n     * @return {@code true} if the user has the specified right on this document, {@code false} otherwise\n     * @since 14.10\n     * @since 14.4.7\n     */\n    @Unstable\n    public boolean hasAccess(Right right)\n    {\n        return hasAccess(right, getXWikiContext().getUserReference());\n    }\n\n    public boolean getLocked()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public String getLockingUser()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return lock.getUserName();\n            } else {\n                return \"\";\n            }\n        } catch (XWikiException e) {\n            return \"\";\n        }\n    }\n\n    public Date getLockingDate()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return lock.getDate();\n            } else {\n                return null;\n            }\n        } catch (XWikiException e) {\n            return null;\n        }\n    }\n\n    /**\n     * Renders the passed xproperty as HTML. Note that if you need the raw value, you should call \n     * {@link #getValue(String)} instead. \n     *\n     * @param classOrFieldName the xproperty (aka field) name to render or an xclass reference\n     * @return the rendered xproperty as HTML if an xobject exists with that xproperty. Otherwise considers that the\n     *         passed parameter is an xclass reference and return the xobject for it or null if none exist\n     * @see #getValue(String) \n     * @see #getValue(String, Object) \n     */\n    public java.lang.Object get(String classOrFieldName)\n    {\n        if (this.currentObj != null) {\n            return this.doc.display(classOrFieldName, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n        BaseObject object = this.doc.getFirstObject(classOrFieldName, getXWikiContext());\n        if (object != null) {\n            return this.doc.display(classOrFieldName, object, getXWikiContext());\n        }\n        return this.getDoc().getObject(classOrFieldName);\n    }\n\n    /**\n     * @param fieldName the xproperty (aka field) name for which to get the value\n     * @return the raw value of the passed xproperty found in the current xobject or in the first xobject containing\n     *         such a field\n     * @see #getValue(String, Object) \n     */\n    public java.lang.Object getValue(String fieldName)\n    {\n        Object object;\n        if (this.currentObj == null) {\n            object = new Object(this.getDoc().getFirstObject(fieldName, getXWikiContext()), getXWikiContext());\n        } else {\n            object = this.currentObj;\n        }\n        return getValue(fieldName, object);\n    }\n\n    /**\n     * @param fieldName the xproperty (aka field) name for which to get the value\n     * @param object the specific xobject from which to get the xproperty value\n     * @return the raw value of the passed xproperty\n     * @see #getValue(String)\n     */\n    public java.lang.Object getValue(String fieldName, Object object)\n    {\n        if (object != null) {\n            return object.getValue(fieldName);\n        }\n\n        return null;\n    }\n\n    public String getTextArea()\n    {\n        return com.xpn.xwiki.XWiki.getTextArea(this.doc.getContent(), getXWikiContext());\n    }\n\n    /**\n     * Returns data needed for a generation of Table of Content for this document.\n     *\n     * @param init an intial level where the TOC generation should start at\n     * @param max maximum level TOC is generated for\n     * @param numbered if should generate numbering for headings\n     * @return a map where an heading (title) ID is the key and value is another map with two keys: text, level and\n     *         numbering\n     */\n    public Map<String, Map<String, java.lang.Object>> getTOC(int init, int max, boolean numbered)\n    {\n        getXWikiContext().put(\"tocNumbered\", new Boolean(numbered));\n        return TOCGenerator.generateTOC(getContent(), init, max, numbered, getXWikiContext());\n    }\n\n    public String getTags()\n    {\n        return this.doc.getTags(getXWikiContext());\n    }\n\n    public List<String> getTagList()\n    {\n        return this.getDoc().getTagsList(getXWikiContext());\n    }\n\n    public List<String> getTagsPossibleValues()\n    {\n        return this.doc.getTagsPossibleValues(getXWikiContext());\n    }\n\n    public void insertText(String text, String marker) throws XWikiException\n    {\n        if (hasAccessLevel(\"edit\")) {\n            getDoc().insertText(text, marker, getXWikiContext());\n\n            updateAuthor();\n            updateContentAuthor();\n        }\n    }\n\n    @Override\n    public boolean equals(java.lang.Object arg0)\n    {\n        if (!(arg0 instanceof Document)) {\n            return false;\n        }\n        Document d = (Document) arg0;\n        return d.getXWikiContext().equals(getXWikiContext()) && this.doc.equals(d.doc);\n    }\n\n    /**\n     * Check if the passed one is the one wrapped by this {@link Document}.\n     * \n     * @param document the document to compare\n     * @return true if passed document is the wrapped one\n     * @since 8.3M1\n     */\n    public boolean same(XWikiDocument document)\n    {\n        return document == this.doc || document == this.initialDoc;\n    }\n\n    public List<String> getBacklinks() throws XWikiException\n    {\n        return this.doc.getBackLinkedPages(getXWikiContext());\n    }\n\n    /**\n     * Retrieve the references of the page containing a link to the current page.\n     *\n     * @return a list of references of the page containing a link to the current page.\n     * @throws XWikiException in case of problem to perform the query.\n     * @since 12.5RC1\n     */\n    public List<DocumentReference> getBackLinkedReferences() throws XWikiException\n    {\n        return this.doc.getBackLinkedReferences(getXWikiContext());\n    }\n\n    public List<XWikiLink> getLinks() throws XWikiException\n    {\n        return new ArrayList<XWikiLink>(this.doc.getUniqueWikiLinkedPages(getXWikiContext()));\n    }\n\n    /**\n     * Get the top sections contained in the document.\n     * <p>\n     * The section are filtered by xwiki.section.depth property on the maximum depth of the sections to return. This\n     * method is usually used to get \"editable\" sections.\n     *\n     * @return the sections in the current document\n     */\n    public List<DocumentSection> getSections() throws XWikiException\n    {\n        return this.doc.getSections();\n    }\n\n    /**\n     * Get document children. Children are documents with the current document as parent.\n     *\n     * @return The list of children for the current document.\n     * @since 1.8 Milestone 2\n     */\n    public List<String> getChildren() throws XWikiException\n    {\n        return this.doc.getChildren(getXWikiContext());\n    }\n\n    /**\n     * Get document children references. Children are documents with the current document as parent.\n     * @return The list of children for the current document.\n     * @throws XWikiException in case of problem to query the children.\n     * @since 12.5RC1\n     */\n    public List<DocumentReference> getChildrenReferences() throws XWikiException\n    {\n        return this.doc.getChildrenReferences(getXWikiContext());\n    }\n\n    /**\n     * Get document children. Children are documents with the current document as parent. Where a document has a large\n     * number of children, one may desire to return a certain number of children (nb) and skip some number (start) of\n     * the first results.\n     *\n     * @param nb The number of results to return.\n     * @param start The number of results to skip before we begin returning results.\n     * @return The list of children for the current document.\n     */\n    public List<String> getChildren(int nb, int start) throws XWikiException\n    {\n        return this.doc.getChildren(nb, start, getXWikiContext());\n    }\n\n    /**\n     * Gets the default edit mode for this document. An edit mode (other than the default \"edit\") can be enforced by\n     * creating an {@code XWiki.EditModeClass} object in the current document, with the appropriate value for the\n     * defaultEditMode property, or by adding this object in a sheet included by the document. This function also falls\n     * back on the old {@code SheetClass}, deprecated since 3.1M2, which can be attached to included documents to\n     * specify that the current document should be edited inline.\n     *\n     * @return the default edit mode for this document (\"edit\" or \"inline\" usually)\n     * @throws XWikiException since XWiki 6.3M1 it's not used anymore and \"edit\" is returned in case of error, with an\n     *             error log\n     */\n    public String getDefaultEditMode() throws XWikiException\n    {\n        return this.doc.getDefaultEditMode(getXWikiContext());\n    }\n\n    public String getDefaultEditURL() throws XWikiException\n    {\n        return this.doc.getDefaultEditURL(getXWikiContext());\n    }\n\n    public String getEditURL(String action, String mode) throws XWikiException\n    {\n        return this.doc.getEditURL(action, mode, getXWikiContext());\n    }\n\n    public String getEditURL(String action, String mode, String locale)\n    {\n        return this.doc.getEditURL(action, mode, locale, getXWikiContext());\n    }\n\n    public boolean isCurrentUserCreator()\n    {\n        return this.doc.isCurrentUserCreator(getXWikiContext());\n    }\n\n    public boolean isCurrentUserPage()\n    {\n        return this.doc.isCurrentUserPage(getXWikiContext());\n    }\n\n    public boolean isCurrentLocalUserPage()\n    {\n        return this.doc.isCurrentLocalUserPage(getXWikiContext());\n    }\n\n    public boolean isCreator(String username)\n    {\n        return this.doc.isCreator(username);\n    }\n\n    public void set(String fieldname, java.lang.Object value)\n    {\n        Object obj;\n        if (this.currentObj != null) {\n            obj = this.currentObj;\n        } else {\n            obj = getFirstObject(fieldname);\n        }\n        set(fieldname, value, obj);\n    }\n\n    public void set(String fieldname, java.lang.Object value, Object obj)\n    {\n        if (obj == null) {\n            return;\n        }\n        obj.set(fieldname, value);\n    }\n\n    public void setTitle(String title)\n    {\n        getDoc().setTitle(title);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    public void setCustomClass(String customClass)\n    {\n        getDoc().setCustomClass(customClass);\n\n        updateAuthor();\n    }\n\n    public void setParent(String parent)\n    {\n        getDoc().setParent(parent);\n\n        updateAuthor();\n    }\n\n    private void updateContentAuthor()\n    {\n        // Temporary set as content author of the document the current script author (until the document is saved)\n        XWikiContext xcontext = getXWikiContext();\n        getDoc().setContentAuthorReference(xcontext.getAuthorReference());\n    }\n\n    private void updateAuthor()\n    {\n        // Temporary set as author of the document the current script author (until the document is saved)\n        XWikiContext xcontext = getXWikiContext();\n        getDoc().setAuthorReference(xcontext.getAuthorReference());\n    }\n\n    public void setContent(String content)\n    {\n        getDoc().setContent(content);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param content the content as XDOM\n     * @throws XWikiException when failing to convert the XDOM to String content\n     * @since 7.0RC1\n     */\n    public void setContent(XDOM content) throws XWikiException\n    {\n        getDoc().setContent(content);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param syntax the Syntax representing the syntax used for the current document's content.\n     * @since 2.3M1\n     */\n    public void setSyntax(Syntax syntax)\n    {\n        getDoc().setSyntax(syntax);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param syntaxId the Syntax id representing the syntax used for the current document. For example \"xwiki/1.0\"\n     *            represents the first version XWiki syntax while \"xwiki/2.0\" represents version 2.0 of the XWiki\n     *            Syntax.\n     */\n    public void setSyntaxId(String syntaxId)\n    {\n        getDoc().setSyntaxId(syntaxId);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    public void setDefaultTemplate(String dtemplate)\n    {\n        getDoc().setDefaultTemplate(dtemplate);\n\n        updateAuthor();\n    }\n\n    public void setComment(String comment)\n    {\n        getDoc().setComment(comment);\n    }\n\n    public void setMinorEdit(boolean isMinor)\n    {\n        getDoc().setMinorEdit(isMinor);\n    }\n\n    public void save() throws XWikiException\n    {\n        save(\"\", false);\n    }\n\n    public void save(String comment) throws XWikiException\n    {\n        save(comment, false);\n    }\n\n    private UserReferenceResolver<CurrentUserReference> getCurrentUserReferenceResolver()\n    {\n        return Utils.getComponent(new DefaultParameterizedType(null, UserReferenceResolver.class,\n                CurrentUserReference.class));\n    }\n\n    public void save(String comment, boolean minorEdit) throws XWikiException\n    {\n        if (hasAccessLevel(\"edit\")) {\n\n            DocumentAuthors authors = getDoc().getAuthors();\n            authors.setOriginalMetadataAuthor(getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE));\n            // If the current author does not have PR don't let it set current user as author of the saved document\n            // since it can lead to right escalation\n            if (hasProgrammingRights() || !getConfiguration().getProperty(\"security.script.save.checkAuthor\", true)) {\n                saveDocument(comment, minorEdit);\n            } else {\n                saveAsAuthor(comment, minorEdit);\n            }\n        } else {\n            java.lang.Object[] args = {getDefaultEntityReferenceSerializer().serialize(getDocumentReference())};\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n    }\n\n    public void saveWithProgrammingRights() throws XWikiException\n    {\n        saveWithProgrammingRights(\"\", false);\n    }\n\n    public void saveWithProgrammingRights(String comment) throws XWikiException\n    {\n        saveWithProgrammingRights(comment, false);\n    }\n\n    public void saveWithProgrammingRights(String comment, boolean minorEdit) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            // The rights check above is generic, but the current method is a save operation, thus it should not be\n            // performed if the document's wiki is in read only mode.\n            XWikiContext context = getXWikiContext();\n            String currentWikiId = context.getWikiId();\n            try {\n                // Make sure we check the current document's wiki and not the current context's wiki.\n                context.setWikiId(getWiki());\n\n                if (!context.getWiki().isReadOnly()) {\n                    saveDocument(comment, minorEdit, false);\n                } else {\n                    java.lang.Object[] args =\n                        { getDefaultEntityReferenceSerializer().serialize(getDocumentReference()), getWiki() };\n                    throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS,\n                        XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                        \"Access denied in edit mode on document [{0}]. The wiki [{1}] is in read only mode.\", null,\n                        args);\n                }\n            } finally {\n                // Restore the context wiki.\n                context.setWikiId(currentWikiId);\n            }\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied with no programming rights document {0}\", null, args);\n        }\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor() throws XWikiException\n    {\n        saveAsAuthor(\"\", false);\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @param comment The comment to display in document history (what did you change in the document)\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor(String comment) throws XWikiException\n    {\n        saveAsAuthor(comment, false);\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @param comment The comment to display in document history (what did you change in the document)\n     * @param minorEdit Set true to advance the document version number by 0.1 or false to advance version to the next\n     *            integer + 0.1 eg: 25.1\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor(String comment, boolean minorEdit) throws XWikiException\n    {\n        XWikiContext xcontext = getXWikiContext();\n\n        getDoc().getAuthors()\n            .setOriginalMetadataAuthor(getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE));\n        DocumentReference author = getEffectiveAuthorReference();\n        if (hasAccess(Right.EDIT, author)) {\n            DocumentReference currentUser = xcontext.getUserReference();\n            try {\n                xcontext.setUserReference(author);\n\n                saveDocument(comment, minorEdit);\n            } finally {\n                xcontext.setUserReference(currentUser);\n            }\n        } else {\n            java.lang.Object[] args = { author, xcontext.getDoc(), getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied; user {0}, acting through script in document {1} cannot save document {2}\", null, args);\n        }\n    }\n\n    protected void saveDocument(String comment, boolean minorEdit) throws XWikiException\n    {\n        saveDocument(comment, minorEdit, true);\n    }\n\n    private void saveDocument(String comment, boolean minorEdit, boolean checkSaving) throws XWikiException\n    {\n        XWikiDocument doc = getDoc();\n\n        UserReference currentUserReference = getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE);\n        doc.getAuthors().setEffectiveMetadataAuthor(currentUserReference);\n\n        if (doc.isNew()) {\n            doc.getAuthors().setCreator(currentUserReference);\n        }\n\n        if (checkSaving) {\n            // Make sure the user is allowed to make this modification\n            getXWikiContext().getWiki().checkSavingDocument(doc.getAuthorReference(), doc, comment, minorEdit,\n                getXWikiContext());\n        }\n\n        getXWikiContext().getWiki().saveDocument(doc, comment, minorEdit, getXWikiContext());\n        this.initialDoc = this.doc;\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest() throws XWikiException\n    {\n        // Call to getDoc() ensures that we are working on a clone()\n        com.xpn.xwiki.api.Object obj =\n            new com.xpn.xwiki.api.Object(getDoc().addXObjectFromRequest(getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest(String className) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().addObjectFromRequest(className, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> addObjectsFromRequest(String className) throws XWikiException\n    {\n        return addObjectsFromRequest(className, \"\");\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest(String className, String prefix) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().addObjectFromRequest(className, prefix, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> addObjectsFromRequest(String className, String prefix) throws XWikiException\n    {\n        List<BaseObject> objs = getDoc().addObjectsFromRequest(className, prefix, getXWikiContext());\n        List<Object> wrapped = new ArrayList<Object>();\n        for (BaseObject object : objs) {\n            wrapped.add(new com.xpn.xwiki.api.Object(object, getXWikiContext()));\n        }\n\n        updateAuthor();\n\n        return wrapped;\n    }\n\n    public com.xpn.xwiki.api.Object updateObjectFromRequest(String className) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().updateObjectFromRequest(className, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> updateObjectsFromRequest(String className) throws XWikiException\n    {\n        return updateObjectsFromRequest(className, \"\");\n    }\n\n    public com.xpn.xwiki.api.Object updateObjectFromRequest(String className, String prefix) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().updateObjectFromRequest(className, prefix, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> updateObjectsFromRequest(String className, String prefix) throws XWikiException\n    {\n        List<BaseObject> objs = getDoc().updateObjectsFromRequest(className, prefix, getXWikiContext());\n        List<Object> wrapped = new ArrayList<Object>();\n        for (BaseObject object : objs) {\n            wrapped.add(new com.xpn.xwiki.api.Object(object, getXWikiContext()));\n        }\n\n        updateAuthor();\n\n        return wrapped;\n    }\n\n    public boolean isAdvancedContent()\n    {\n        return this.doc.isAdvancedContent();\n    }\n\n    public boolean isProgrammaticContent()\n    {\n        return this.doc.isProgrammaticContent();\n    }\n\n    /**\n     * Remove an XObject from the document. The changes are not persisted until the document is saved.\n     *\n     * @param object the object to remove\n     * @return {@code true} if the object was successfully removed, {@code false} if the object was not found in the\n     *         current document.\n     */\n    public boolean removeObject(Object object)\n    {\n        return getDoc().removeObject(object.getBaseObject());\n    }\n\n    /**\n     * Remove all the objects of a given type (XClass) from the document. The object counter is left unchanged, so that\n     * future objects will have new (different) numbers. However, on some storage engines the counter will be reset if\n     * the document is removed from the cache and reloaded from the persistent storage.\n     *\n     * @param className The class name of the objects to be removed.\n     * @return {@code true} if the objects were successfully removed, {@code false} if no object from the target class\n     *         was in the current document.\n     */\n    public boolean removeObjects(String className)\n    {\n        return getDoc().removeObjects(className);\n    }\n\n    /**\n     * Remove document from the wiki. Reinit <code>cloned</code>.\n     *\n     * @throws XWikiException\n     */\n    protected void deleteDocument() throws XWikiException\n    {\n        getXWikiContext().getWiki().deleteDocument(this.doc, getXWikiContext());\n        this.initialDoc = this.doc;\n    }\n\n    public void delete() throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\")) {\n            deleteDocument();\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n    }\n\n    /**\n     * Delete the document if the {@link #getContentAuthor content author} of the script calling this method has\n     * permission to do so. The deleter is also set to the said content author.\n     *\n     * @throws XWikiException if script author is not allowed to delete the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void deleteAsAuthor() throws XWikiException\n    {\n        XWikiContext xcontext = getXWikiContext();\n\n        DocumentReference author = getEffectiveAuthorReference();\n        if (hasAccess(Right.DELETE, author)) {\n            DocumentReference currentUser = xcontext.getUserReference();\n            try {\n                xcontext.setUserReference(author);\n\n                deleteDocument();\n            } finally {\n                xcontext.setUserReference(currentUser);\n            }\n        } else {\n            java.lang.Object[] args = { author, xcontext.getDoc(), this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied; user {0}, acting through script in document {1} cannot delete document {2}\", null,\n                args);\n        }\n    }\n\n    public void deleteWithProgrammingRights() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            deleteDocument();\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied with no programming rights document {0}\", null, args);\n        }\n    }\n\n    public String getVersionHashCode()\n    {\n        return this.doc.getVersionHashCode(getXWikiContext());\n    }\n\n    public int addAttachments() throws XWikiException\n    {\n        return addAttachments(null);\n    }\n\n    public int addAttachments(String fieldName) throws XWikiException\n    {\n        if (!hasAccessLevel(\"edit\")) {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n        XWiki xwiki = getXWikiContext().getWiki();\n        FileUploadPlugin fileupload = (FileUploadPlugin) xwiki.getPlugin(\"fileupload\", getXWikiContext());\n        List<FileItem> fileuploadlist = fileupload.getFileItems(getXWikiContext());\n        List<XWikiAttachment> attachments = new ArrayList<XWikiAttachment>();\n        // adding attachment list to context so we find the names\n        this.context.put(\"addedAttachments\", attachments);\n        int nb = 0;\n\n        if (fileuploadlist == null) {\n            return 0;\n        }\n\n        for (FileItem item : fileuploadlist) {\n            String name = item.getFieldName();\n            if (fieldName != null && !fieldName.equals(name)) {\n                continue;\n            }\n            if (item.isFormField()) {\n                continue;\n            }\n            byte[] data = fileupload.getFileItemData(name, getXWikiContext());\n            String filename;\n            String fname = fileupload.getFileName(name, getXWikiContext());\n            int i = fname.lastIndexOf(\"\\\\\");\n            if (i == -1) {\n                i = fname.lastIndexOf(\"/\");\n            }\n            filename = fname.substring(i + 1);\n            filename = filename.replaceAll(\"\\\\+\", \" \");\n\n            if ((data != null) && (data.length > 0)) {\n                XWikiAttachment attachment = this.getDoc().addAttachment(filename, data, getXWikiContext());\n                getDoc().saveAttachmentContent(attachment, getXWikiContext());\n                // commenting because this was already done by addAttachment\n                // getDoc().getAttachmentList().add(attachment);\n                attachments.add(attachment);\n                nb++;\n            }\n        }\n\n        if (nb > 0) {\n            getXWikiContext().getWiki().saveDocument(getDoc(), getXWikiContext());\n            this.initialDoc = this.doc;\n        }\n\n        return nb;\n    }\n\n    public Attachment addAttachment(String fileName, InputStream iStream)\n    {\n        try {\n            return new Attachment(this, this.getDoc().setAttachment(fileName, iStream, getXWikiContext()),\n                getXWikiContext());\n        } catch (IOException e) {\n            // TODO Log the error and let the user know about it\n        } finally {\n            updateAuthor();\n        }\n\n        return null;\n    }\n\n    public Attachment addAttachment(String fileName, byte[] data)\n    {\n        try {\n            return new Attachment(this, this.getDoc().addAttachment(fileName, data, getXWikiContext()),\n                getXWikiContext());\n        } catch (XWikiException e) {\n            // TODO Log the error and let the user know about it\n        } finally {\n            updateAuthor();\n        }\n\n        return null;\n    }\n\n    public boolean validate() throws XWikiException\n    {\n        return this.doc.validate(getXWikiContext());\n    }\n\n    public boolean validate(String[] classNames) throws XWikiException\n    {\n        return this.doc.validate(classNames, getXWikiContext());\n    }\n\n    /**\n     * Retrieves the validation script associated with this document, a Velocity script that is executed when validating\n     * the document data.\n     *\n     * @return A <code>String</code> representation of the validation script, or an empty string if there is no such\n     *         script.\n     */\n    public String getValidationScript()\n    {\n        return getDoc().getValidationScript();\n    }\n\n    /**\n     * Sets a new validation script for this document, a Velocity script that is executed when validating the document\n     * data.\n     *\n     * @param validationScript The new validation script, which can be an empty string or <code>null</code> if the\n     *            script should be removed.\n     */\n    public void setValidationScript(String validationScript)\n    {\n        getDoc().setValidationScript(validationScript);\n\n        updateAuthor();\n    }\n\n    /**\n     * Rename the current document and all the backlinks leading to it. Will also change parent field in all documents\n     * which list the document we are renaming as their parent. See\n     * {@link #rename(String, java.util.List, java.util.List)} for more details.\n     *\n     * @param newReference the reference to the new document\n     * @throws XWikiException in case of an error\n     * @since 2.3M2\n     */\n    public void rename(DocumentReference newReference) throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\") && this.context.getWiki().checkAccess(\"edit\",\n            this.context.getWiki().getDocument(newReference, this.context), this.context)) {\n            this.getDoc().rename(newReference, getXWikiContext());\n        }\n    }\n\n    /**\n     * Rename the current document and all the links pointing to it in the list of passed backlink documents. The\n     * renaming algorithm takes into account the fact that there are several ways to write a link to a given page and\n     * all those forms need to be renamed. For example the following links all point to the same page:\n     * <ul>\n     * <li>[Page]</li>\n     * <li>[Page?param=1]</li>\n     * <li>[currentwiki:Page]</li>\n     * <li>[currentwiki:CurrentSpace.Page]</li>\n     * </ul>\n     * <p>\n     * Note: links without a space are renamed with the space added and all documents which have the document being\n     * renamed as parent have their parent field set to \"currentwiki:CurrentSpace.Page\".\n     * </p>\n     *\n     * @param newDocumentName the new document name. If the space is not specified then defaults to the current space.\n     * @param backlinkDocumentNames the list of documents to parse and for which links will be modified to point to the\n     *            new renamed document.\n     * @throws XWikiException in case of an error\n     */\n    public void rename(String newDocumentName, List<String> backlinkDocumentNames) throws XWikiException\n    {\n        rename(newDocumentName, backlinkDocumentNames, Collections.emptyList());\n    }\n\n    /**\n     * Same as {@link #rename(String, List)} but the list of documents having the current document as their parent is\n     * passed in parameter.\n     *\n     * @param newDocumentName the new document name. If the space is not specified then defaults to the current space.\n     * @param backlinkDocumentNames the list of documents to parse and for which links will be modified to point to the\n     *            new renamed document.\n     * @param childDocumentNames the list of documents whose parent field will be set to the new document name.\n     * @throws XWikiException in case of an error\n     */\n    public void rename(String newDocumentName, List<String> backlinkDocumentNames, List<String> childDocumentNames)\n        throws XWikiException\n    {\n        List<DocumentReference> backlinkDocumentReferences = new ArrayList<DocumentReference>();\n        for (String backlinkDocumentName : backlinkDocumentNames) {\n            backlinkDocumentReferences.add(getCurrentMixedDocumentReferenceResolver().resolve(backlinkDocumentName));\n        }\n\n        List<DocumentReference> childDocumentReferences = new ArrayList<DocumentReference>();\n        for (String childDocumentName : childDocumentNames) {\n            childDocumentReferences.add(getCurrentMixedDocumentReferenceResolver().resolve(childDocumentName));\n        }\n\n        rename(getCurrentMixedDocumentReferenceResolver().resolve(newDocumentName), backlinkDocumentReferences,\n            childDocumentReferences);\n    }\n\n    /**\n     * Same as {@link #rename(String, List)} but the list of documents having the current document as their parent is\n     * passed in parameter.\n     *\n     * @param newReference the reference to the new document\n     * @param backlinkDocumentNames the list of reference to documents to parse and for which links will be modified to\n     *            point to the new renamed document\n     * @param childDocumentNames the list of references to documents whose parent field will be set to the new document\n     *            reference\n     * @throws XWikiException in case of an error\n     * @since 2.3M2\n     */\n    public void rename(DocumentReference newReference, List<DocumentReference> backlinkDocumentNames,\n        List<DocumentReference> childDocumentNames) throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\") && this.context.getWiki().checkAccess(\"edit\",\n            this.context.getWiki().getDocument(newReference, this.context), this.context)) {\n\n            // Every page given in childDocumentNames has it's parent changed whether it needs it or not.\n            // Let's make sure the user has edit permission on any page given which is not actually a child.\n            // Otherwise it would be embarrassing if a user called:\n            // $doc.rename(\"mynewpage\",$doc.getBacklinks(),$xwiki.searchDocuments(\"true\"))\n            int counter = childDocumentNames.size();\n            List<String> actuallyChildren = getChildren();\n            while (counter > 0) {\n                counter--;\n                if (!actuallyChildren.contains(childDocumentNames.get(counter))\n                    && !this.context.getWiki().checkAccess(\"edit\",\n                        this.context.getWiki().getDocument(childDocumentNames.get(counter), this.context),\n                        this.context)) {\n                    return;\n                }\n            }\n\n            this.getDoc().rename(newReference, backlinkDocumentNames, childDocumentNames, getXWikiContext());\n        }\n    }\n\n    /**\n     * Allow to easily access any revision of a document\n     *\n     * @param revision the version to access\n     * @return the document corresponding to the requested revision or {@code null} if the revision does not exist or\n     * access is denied.\n     */\n    public Document getDocumentRevision(String revision)\n    {\n        try {\n            DocumentRevisionProvider revisionProvider = getDocumentRevisionProvider();\n            revisionProvider.checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, getDocumentReference(), revision);\n            XWikiDocument documentRevision = revisionProvider.getRevision(this.doc, revision);\n\n            return documentRevision != null ? new Document(documentRevision, this.context) : null;\n        } catch (AuthorizationException e) {\n            LOGGER.info(\"Access denied for loading revision [{}] of document [{}]: [{}]\", revision,\n                getDocumentReferenceWithLocale(), ExceptionUtils.getRootCauseMessage(e));\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to load revision [{}] of document [{}]\", revision, getDocumentReferenceWithLocale(),\n                e);\n        }\n\n        return null;\n    }\n\n    /**\n     * Allow to easily access the previous revision of a document\n     *\n     * @return Document\n     * @throws XWikiException\n     */\n    public Document getPreviousDocument() throws XWikiException\n    {\n        return getDocumentRevision(getPreviousVersion());\n    }\n\n    /**\n     * @return is document most recent. false if and only if there are older versions of this document.\n     */\n    public boolean isMostRecent()\n    {\n        return this.doc.isMostRecent();\n    }\n\n    /**\n     * @return if rendering transformations shall be executed in restricted mode and the title not be executed\n     * @since 14.10.7\n     * @since 15.2RC1\n     */\n    @Unstable\n    public boolean isRestricted()\n    {\n        return this.doc.isRestricted();\n    }\n\n    @Override\n    public String toString()\n    {\n        return this.doc.toString();\n    }\n\n    /**\n     * Convert the current document content from its current syntax to the new syntax passed as parameter.\n     *\n     * @param targetSyntaxId the syntax to convert to (eg \"xwiki/2.0\", \"xhtml/1.0\", etc)\n     * @throws XWikiException if an exception occurred during the conversion process\n     */\n    public boolean convertSyntax(String targetSyntaxId) throws XWikiException\n    {\n        try {\n            getDoc().convertSyntax(targetSyntaxId, this.context);\n        } catch (Exception ex) {\n            LOGGER.error(\n                \"Failed to convert document [\" + getPrefixedFullName() + \"] to syntax [\" + targetSyntaxId + \"]\", ex);\n\n            return false;\n        } finally {\n            updateAuthor();\n            updateContentAuthor();\n        }\n\n        return true;\n    }\n\n    /**\n     * Indicates whether the document is 'hidden' or not, meaning that it should not be returned in public search\n     * results or appear in the User Interface in general.\n     *\n     * @return <code>true</code> if the document is hidden, <code>false</code> otherwise.\n     */\n    public boolean isHidden()\n    {\n        return this.doc.isHidden();\n    }\n\n    /**\n     * Indicates whether the document should be 'hidden' or not, meaning that it should not be returned in public search\n     * results or appear in the User Interface in general.\n     *\n     * @param hidden <code>true</code> if the document should be 'hidden', <code>false</code> otherwise.\n     */\n    public void setHidden(boolean hidden)\n    {\n        this.doc.setHidden(hidden);\n    }\n\n    /**\n     * Drop permissions for the remainder of the rendering cycle. After this is called:\n     * <ul>\n     * <li>1. {@link com.xpn.xwiki.api.Api#hasProgrammingRights()} will always return false.</li>\n     * <li>2. {@link com.xpn.xwiki.api.XWiki#getDocumentAsAuthor(org.xwiki.model.reference.DocumentReference)},\n     * {@link com.xpn.xwiki.api.XWiki#getDocumentAsAuthor(String)}, {@link com.xpn.xwiki.api.Document#saveAsAuthor()},\n     * {@link com.xpn.xwiki.api.Document#saveAsAuthor(String)},\n     * {@link com.xpn.xwiki.api.Document#saveAsAuthor(String, boolean)}, and\n     * {@link com.xpn.xwiki.api.Document#deleteAsAuthor()} will perform all of their actions as if the document's\n     * content author was the guest user (XWiki.XWikiGuest).</li>\n     * </ul>\n     * <p>\n     * This sandboxing will expire at the end of the rendering cycle and can be suspended by beginning a new rendering\n     * cycle. A rendering cycle can be begin by calling {@link #getRenderedContent(String)}, {@link #display(String)}\n     * (or variations thereof) or by invoking the include macro or using\n     * {@link com.xpn.xwiki.api.XWiki#includeTopic(String)}\n     * <p>\n     * NOTE: Even if you include the same document, permissions will be regained. What this does is sandbox the\n     * remainder of the code on the page because although it can temporarily suspend the permissions drop, it cannot get\n     * itself to be executed with permissions because if it calls itself, it will hit the drop function first.\n     * <p>\n     * If you are interested in a more secure sandboxing method where code is guaranteed not to have permissions for the\n     * remainder of the request, you should consider {@link com.xpn.xwiki.api.Context#dropPermissions()}.\n     * <p>\n     *\n     * @since 3.2M2\n     */\n    public void dropPermissions()\n    {\n        // Set the droppedPermissions key to the context so if the context is cloned and\n        // pushed, it will return false until it is popped again.\n        final ExecutionContext context = Utils.getComponent(Execution.class).getContext();\n        context.setProperty(XWikiConstant.DROPPED_PERMISSIONS, System.identityHashCode(context));\n    }\n\n    /**\n     * @return true if this document is a translation of the main document (i.e. returned by\n     *         {@link #getTranslatedDocument(String)}); false if this is actually the main document (i.e. returned by\n     *         {@link com.xpn.xwiki.api.XWiki#getDocument(DocumentReference)}.\n     * @since 6.2M2\n     */\n    public boolean isTranslation()\n    {\n        return 1 == this.getDoc().getTranslation();\n    }\n\n    /**\n     * @return the maximum authorized length for a document full name (see {@link #getFullName()}).\n     * @since 11.4RC1\n     */\n    public int getLocalReferenceMaxLength()\n    {\n        return this.doc.getLocalReferenceMaxLength();\n    }\n\n    /**\n     * @return the authors of the document.\n     * @since 14.0RC1\n     */\n    @Unstable\n    public DocumentAuthors getAuthors()\n    {\n        if (this.hasAccess(Right.PROGRAM)) {\n            // We're using getDoc here to ensure to have a cloned doc\n            return getDoc().getAuthors();\n        } else {\n            // in this case we don't care if the doc is cloned or not since it's readonly\n            return new SafeDocumentAuthors(this.doc.getAuthors());\n        }\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Locale;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xwiki.component.manager.ComponentLookupException;\nimport org.xwiki.job.Job;\nimport org.xwiki.job.event.status.JobStatus;\nimport org.xwiki.job.event.status.JobStatus.State;\nimport org.xwiki.model.EntityType;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.PageReference;\nimport org.xwiki.model.reference.SpaceReference;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.rendering.renderer.PrintRendererFactory;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.security.authorization.AuthorizationException;\nimport org.xwiki.security.authorization.ContextualAuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.user.CurrentUserReference;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.DocumentRevisionProvider;\nimport com.xpn.xwiki.doc.XWikiDeletedDocument;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.internal.XWikiInitializerJob;\nimport com.xpn.xwiki.internal.XWikiInitializerJobStatus;\nimport com.xpn.xwiki.objects.meta.MetaClass;\nimport com.xpn.xwiki.user.api.XWikiUser;\nimport com.xpn.xwiki.util.Programming;\nimport com.xpn.xwiki.web.Utils;\nimport com.xpn.xwiki.web.XWikiEngineContext;\nimport com.xpn.xwiki.web.XWikiURLFactory;\n\npublic class XWiki extends Api\n{\n    /** Logging helper object. */\n    protected static final Logger LOGGER = LoggerFactory.getLogger(XWiki.class);\n\n    /** The internal object wrapped by this API. */\n    private com.xpn.xwiki.XWiki xwiki;\n\n    /**\n     * @see #getStatsService()\n     */\n    private StatsService statsService;\n\n    /**\n     * @see #getCriteriaService()\n     */\n    private CriteriaService criteriaService;\n\n    /**\n     * @see com.xpn.xwiki.internal.model.reference.CurrentMixedStringDocumentReferenceResolver\n     */\n    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;\n\n    /**\n     * @see org.xwiki.model.internal.reference.DefaultStringDocumentReferenceResolver\n     */\n    private DocumentReferenceResolver<String> defaultDocumentReferenceResolver;\n\n    /**\n     * The object used to serialize entity references into strings. We need it because we have script APIs that work\n     * with entity references but have to call older, often internal, methods that still use string references.\n     */\n    private EntityReferenceSerializer<String> defaultStringEntityReferenceSerializer;\n\n    private DocumentReferenceResolver<EntityReference> currentgetdocumentResolver;\n\n    private DocumentRevisionProvider documentRevisionProvider;\n\n    private ContextualAuthorizationManager contextualAuthorizationManager;\n\n    /**\n     * XWiki API Constructor\n     *\n     * @param xwiki XWiki Main Object to wrap\n     * @param context XWikiContext to wrap\n     */\n    public XWiki(com.xpn.xwiki.XWiki xwiki, XWikiContext context)\n    {\n        super(context);\n\n        this.xwiki = xwiki;\n        this.statsService = new StatsService(context);\n        this.criteriaService = new CriteriaService(context);\n    }\n\n    private DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver()\n    {\n        if (this.currentMixedDocumentReferenceResolver == null) {\n            this.currentMixedDocumentReferenceResolver =\n                Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n        }\n\n        return this.currentMixedDocumentReferenceResolver;\n    }\n\n    private DocumentReferenceResolver<EntityReference> getCurrentgetdocumentResolver()\n    {\n        if (this.currentgetdocumentResolver == null) {\n            this.currentgetdocumentResolver =\n                Utils.getComponent(DocumentReferenceResolver.TYPE_REFERENCE, \"currentgetdocument\");\n        }\n\n        return this.currentgetdocumentResolver;\n    }\n\n    private DocumentReferenceResolver<String> getDefaultDocumentReferenceResolver()\n    {\n        if (this.defaultDocumentReferenceResolver == null) {\n            this.defaultDocumentReferenceResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_STRING);\n        }\n\n        return this.defaultDocumentReferenceResolver;\n    }\n\n    private EntityReferenceSerializer<String> getDefaultStringEntityReferenceSerializer()\n    {\n        if (this.defaultStringEntityReferenceSerializer == null) {\n            this.defaultStringEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n        }\n\n        return this.defaultStringEntityReferenceSerializer;\n    }\n\n    private DocumentRevisionProvider getDocumentRevisionProvider()\n    {\n        if (this.documentRevisionProvider == null) {\n            this.documentRevisionProvider = Utils.getComponent(DocumentRevisionProvider.class);\n        }\n\n        return this.documentRevisionProvider;\n    }\n\n    /**\n     * Privileged API allowing to access the underlying main XWiki Object\n     *\n     * @return Privileged Main XWiki Object\n     */\n    @Programming\n    public com.xpn.xwiki.XWiki getXWiki()\n    {\n        if (hasProgrammingRights()) {\n            return this.xwiki;\n        }\n\n        return null;\n    }\n\n    /**\n     * @return the status of the job initializing {@link com.xpn.xwiki.XWiki} instance\n     * @since 6.1M1\n     */\n    public XWikiInitializerJobStatus getJobStatus()\n    {\n        XWikiInitializerJob job = Utils.getComponent((Type) Job.class, XWikiInitializerJob.JOBTYPE);\n\n        return job != null ? job.getStatus() : null;\n    }\n\n    /**\n     * @return the status of the job initializing the instance or the current wiki\n     * @since 8.4RC1\n     */\n    public JobStatus getCurrentInitializerJobStatus()\n    {\n        // Get XWiki initializer job\n        JobStatus jobStatus = getJobStatus();\n\n        if (jobStatus == null) {\n            return null;\n        }\n\n        // The XWiki initialization is not done yet\n        if (jobStatus.getState() != State.FINISHED) {\n            return jobStatus;\n        }\n\n        // If XWiki initialization did not failed\n        if (this.xwiki != null) {\n            // Get current wiki initializer job\n            Job wikiJob = this.xwiki.getWikiInitializerJob(this.context.getWikiId());\n\n            jobStatus = wikiJob != null ? wikiJob.getStatus() : null;\n        }\n\n        return jobStatus;\n    }\n\n    /**\n     * @return XWiki's version in the format <code>(version).(SVN build number)</code>, or \"Unknown version\" if it\n     *         failed to be retrieved\n     */\n    public String getVersion()\n    {\n        return this.xwiki.getVersion();\n    }\n\n    /**\n     * API Allowing to access the current request URL being requested.\n     *\n     * @return the URL\n     * @throws XWikiException failed to create the URL\n     */\n    public String getRequestURL() throws XWikiException\n    {\n        return getXWikiContext().getURLFactory().getRequestURL(getXWikiContext()).toString();\n    }\n\n    /**\n     * API Allowing to access the current request URL being requested as a relative URL.\n     *\n     * @return the URL\n     * @throws XWikiException failed to create the URL\n     * @since 4.0M1\n     */\n    public String getRelativeRequestURL() throws XWikiException\n    {\n        XWikiURLFactory urlFactory = getXWikiContext().getURLFactory();\n\n        return urlFactory.getURL(urlFactory.getRequestURL(getXWikiContext()), getXWikiContext());\n    }\n\n    /**\n     * Loads an Document from the database. Rights are checked before sending back the document.\n     * <p>\n     * This is a helper for document reference but you can use {@link #getEntityDocument(String, EntityType)} for any\n     * other kind of reference.\n     *\n     * @param documentReference the reference of the document to be loaded\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @see #getEntityDocument(String, EntityType)\n     */\n    public Document getDocument(String documentReference) throws XWikiException\n    {\n        DocumentReference reference;\n\n        // We ignore the passed full name if it's null to be backward compatible with previous behaviors.\n        if (documentReference != null) {\n            // Note: We use the CurrentMixed Resolver since we want to use the default page name if the page isn't\n            // specified in the passed string, rather than use the current document's page name.\n            reference = getCurrentMixedDocumentReferenceResolver().resolve(documentReference);\n        } else {\n            reference = getDefaultDocumentReferenceResolver().resolve(\"\");\n        }\n\n        return getDocument(reference);\n    }\n\n    /**\n     * Loads an Document from the database. Rights are checked before sending back the document.\n     *\n     * @param reference the reference of the document to be loaded\n     * @param type the type of the reference\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @since 10.6RC1\n     */\n    public Document getEntityDocument(String reference, EntityType type) throws XWikiException\n    {\n        XWikiDocument doc = this.xwiki.getDocument(reference, type, getXWikiContext());\n        if (!getContextualAuthorizationManager().hasAccess(Right.VIEW, doc.getDocumentReference())) {\n            return null;\n        }\n\n        return doc.newDocument(getXWikiContext());\n    }\n\n    /**\n     * Loads a Document from the database. Rights are checked before sending back the document.\n     *\n     * @param reference the reference of the XWiki document to be loaded\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @since 2.3M1\n     */\n    public Document getDocument(DocumentReference reference) throws XWikiException\n    {\n        try {\n            XWikiDocument doc = this.xwiki.getDocument(reference, getXWikiContext());\n            if (this.xwiki.getRightService().hasAccessLevel(\"view\", getXWikiContext().getUser(),\n                doc.getPrefixedFullName(), getXWikiContext()) == false) {\n                return null;\n            }\n\n            return doc.newDocument(getXWikiContext());\n        } catch (Exception ex) {\n            LOGGER.warn(\"Failed to access document [{}]. Root reason: [{}]\", reference,\n                ExceptionUtils.getRootCauseMessage(ex));\n            return new Document(new XWikiDocument(reference), getXWikiContext());\n        }\n    }\n\n    /**\n     * Loads a Document from the store. Rights are checked before sending back the document.\n     * <p>\n     * The passed reference can be anything. If if a document child, the document reference will be extracted from it.\n     * If it's a document parent it will be completed with the necessary default references (for example if it's a space\n     * reference it will load the space home page).\n     *\n     * @param reference the reference close to the XWiki document to be loaded\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @since 7.1M2\n     */\n    public Document getDocument(EntityReference reference) throws XWikiException\n    {\n        return getDocument(this.xwiki.getDocumentReference(reference, getXWikiContext()));\n    }\n\n    /**\n     * Loads an Document from the database. Rights are checked on the author (contentAuthor) of the document containing\n     * the currently executing script before sending back the loaded document.\n     *\n     * @param fullName the full name of the XWiki document to be loaded\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @since 2.3M2\n     */\n    public Document getDocumentAsAuthor(String fullName) throws XWikiException\n    {\n        DocumentReference reference;\n\n        // We ignore the passed full name if it's null to match behavior of getDocument\n        if (fullName != null) {\n            // Note: We use the CurrentMixed Resolver since we want to use the default page name if the page isn't\n            // specified in the passed string, rather than use the current document's page name.\n            reference = getCurrentMixedDocumentReferenceResolver().resolve(fullName);\n        } else {\n            reference = getDefaultDocumentReferenceResolver().resolve(\"\");\n        }\n\n        return getDocumentAsAuthor(reference);\n    }\n\n    /**\n     * Loads an Document from the database. Rights are checked on the author (contentAuthor) of the document containing\n     * the currently executing script before sending back the loaded document.\n     *\n     * @param reference the reference of the XWiki document to be loaded\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     * @since 2.3M2\n     */\n    public Document getDocumentAsAuthor(DocumentReference reference) throws XWikiException\n    {\n        if (!getAuthorizationManager().hasAccess(Right.VIEW, getEffectiveAuthorReference(), reference)) {\n            return null;\n        }\n\n        return this.xwiki.getDocument(reference, getXWikiContext()).newDocument(getXWikiContext());\n    }\n\n    /**\n     * @param fullname the {@link XWikiDocument#getFullName() name} of the document to search for.\n     * @param locale an optional {@link XWikiDocument#getLocale() locale} to filter results.\n     * @return A list with all the deleted versions of a document in the recycle bin.\n     * @throws XWikiException if any error\n     */\n    public List<DeletedDocument> getDeletedDocuments(String fullname, String locale) throws XWikiException\n    {\n        XWikiDeletedDocument[] deletedDocuments = this.xwiki.getDeletedDocuments(fullname, locale, this.context);\n        List<DeletedDocument> result = wrapDeletedDocuments(deletedDocuments);\n        return result;\n    }\n\n    /**\n     * @param batchId id of the operation that deleted multiple documents at the same time; useful when trying to revert\n     *            the operation\n     * @return a list of all document versions that were deleted in the same batch, as part of the same operation\n     * @throws XWikiException if any error\n     * @since 9.4RC1\n     */\n    public List<DeletedDocument> getDeletedDocuments(String batchId) throws XWikiException\n    {\n        XWikiDeletedDocument[] deletedDocuments = this.xwiki.getDeletedDocuments(batchId, this.context);\n        List<DeletedDocument> result = wrapDeletedDocuments(deletedDocuments);\n        return result;\n    }\n\n    private List<DeletedDocument> wrapDeletedDocuments(XWikiDeletedDocument[] deletedDocuments)\n    {\n        if (deletedDocuments == null || deletedDocuments.length == 0) {\n            return Collections.emptyList();\n        }\n\n        List<DeletedDocument> result = new ArrayList<>(deletedDocuments.length);\n        for (XWikiDeletedDocument deletedDocument : deletedDocuments) {\n            result.add(new DeletedDocument(deletedDocument, this.context));\n        }\n\n        return result;\n    }\n\n    /**\n     * @param fullname - {@link XWikiDocument#getFullName()}\n     * @param locale - {@link XWikiDocument#getLocale()}\n     * @param index - {@link XWikiDocument#getId()}\n     * @return the specified document from the recycle bin\n     * @throws XWikiException if any error\n     * @deprecated since 9.4RC1. Use {@link #getDeletedDocument(String)} instead.\n     */\n    @Deprecated\n    public DeletedDocument getDeletedDocument(String fullname, String locale, String index) throws XWikiException\n    {\n        return getDeletedDocument(index);\n    }\n\n    /**\n     * @return the specified document from the recycle bin\n     * @throws XWikiException if any error\n     * @since 9.4RC1\n     */\n    public DeletedDocument getDeletedDocument(String index) throws XWikiException\n    {\n        if (!NumberUtils.isDigits(index)) {\n            return null;\n        }\n\n        XWikiDeletedDocument dd = this.xwiki.getDeletedDocument(Long.parseLong(index), this.context);\n        if (dd == null) {\n            return null;\n        }\n\n        return new DeletedDocument(dd, this.context);\n    }\n\n    /**\n     * Retrieve all the deleted attachments that belonged to a certain document. Note that this does not distinguish\n     * between different incarnations of a document name, and it does not require that the document still exists, it\n     * returns all the attachments that at the time of their deletion had a document with the specified name as their\n     * owner.\n     *\n     * @param docName the {@link XWikiDocument#getFullName() name} of the owner document\n     * @return A list with all the deleted attachments which belonged to the specified document. If no such attachments\n     *         are found in the trash, an empty list is returned.\n     */\n    public List<DeletedAttachment> getDeletedAttachments(String docName)\n    {\n        try {\n            List<com.xpn.xwiki.doc.DeletedAttachment> attachments =\n                this.xwiki.getDeletedAttachments(docName, this.context);\n            if (attachments == null || attachments.isEmpty()) {\n                attachments = Collections.emptyList();\n            }\n            List<DeletedAttachment> result = new ArrayList<DeletedAttachment>(attachments.size());\n            for (com.xpn.xwiki.doc.DeletedAttachment attachment : attachments) {\n                result.add(new DeletedAttachment(attachment, this.context));\n            }\n            return result;\n        } catch (Exception ex) {\n            LOGGER.warn(\"Failed to retrieve deleted attachments\", ex);\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * Retrieve all the deleted attachments that belonged to a certain document and had the specified name. Multiple\n     * versions can be returned since the same file can be uploaded and deleted several times, creating different\n     * instances in the trash. Note that this does not distinguish between different incarnations of a document name,\n     * and it does not require that the document still exists, it returns all the attachments that at the time of their\n     * deletion had a document with the specified name as their owner.\n     *\n     * @param docName the {@link DeletedAttachment#getDocName() name of the document} the attachment belonged to\n     * @param filename the {@link DeletedAttachment#getFilename() name} of the attachment to search for\n     * @return A list with all the deleted attachments which belonged to the specified document and had the specified\n     *         filename. If no such attachments are found in the trash, an empty list is returned.\n     */\n    public List<DeletedAttachment> getDeletedAttachments(String docName, String filename)\n    {\n        try {\n            List<com.xpn.xwiki.doc.DeletedAttachment> attachments =\n                this.xwiki.getDeletedAttachments(docName, filename, this.context);\n            if (attachments == null) {\n                attachments = Collections.emptyList();\n            }\n            List<DeletedAttachment> result = new ArrayList<DeletedAttachment>(attachments.size());\n            for (com.xpn.xwiki.doc.DeletedAttachment attachment : attachments) {\n                result.add(new DeletedAttachment(attachment, this.context));\n            }\n            return result;\n        } catch (Exception ex) {\n            LOGGER.warn(\"Failed to retrieve deleted attachments\", ex);\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * Retrieve a specific attachment from the trash.\n     *\n     * @param id the unique identifier of the entry in the trash\n     * @return specified attachment from the trash, {@code null} if not found\n     */\n    public DeletedAttachment getDeletedAttachment(String id)\n    {\n        try {\n            com.xpn.xwiki.doc.DeletedAttachment attachment = this.xwiki.getDeletedAttachment(id, this.context);\n            if (attachment != null) {\n                return new DeletedAttachment(attachment, this.context);\n            }\n        } catch (Exception ex) {\n            LOGGER.warn(\"Failed to retrieve deleted attachment\", ex);\n        }\n        return null;\n    }\n\n    /**\n     * Returns whether a document exists or not\n     *\n     * @param fullname Fullname of the XWiki document to be loaded\n     * @return true if the document exists, false if not\n     * @throws XWikiException\n     */\n    public boolean exists(String fullname) throws XWikiException\n    {\n        return this.xwiki.exists(fullname, getXWikiContext());\n    }\n\n    /**\n     * Returns whether a document exists or not\n     *\n     * @param reference the reference of the document to check for its existence\n     * @return true if the document exists, false if not\n     * @since 2.3M2\n     */\n    public boolean exists(DocumentReference reference) throws XWikiException\n    {\n        return this.xwiki.exists(reference, getXWikiContext());\n    }\n\n    /**\n     * Returns whether a page exists or not.\n     * <p>\n     * Since 14.9, if the check fail an exception is thrown.\n     *\n     * @param reference the reference of the page to check for its existence\n     * @return true if the page exists, false if not\n     * @throws XWikiException when failing to check page existence\n     * @since 13.3RC1\n     * @since 12.10.7\n     */\n    public boolean exists(PageReference reference) throws XWikiException\n    {\n        return this.xwiki.exists(reference, getXWikiContext());\n    }\n\n    /**\n     * Verify the rights the current user has on a document. If the document requires rights and the user is not\n     * authenticated he will be redirected to the login page.\n     *\n     * @param docname fullname of the document\n     * @param right right to check (\"view\", \"edit\", \"admin\", \"delete\")\n     * @return true if it exists\n     */\n    public boolean checkAccess(String docname, String right)\n    {\n        try {\n            DocumentReference docReference = getCurrentMixedDocumentReferenceResolver().resolve(docname);\n            XWikiDocument doc = getXWikiContext().getWiki().getDocument(docReference, this.context);\n            return getXWikiContext().getWiki().checkAccess(right, doc, getXWikiContext());\n        } catch (XWikiException e) {\n            return false;\n        }\n    }\n\n    /**\n     * Loads an Document from the database. Rights are checked before sending back the document.\n     *\n     * @param space Space to use in case no space is defined in the provided <code>fullname</code>\n     * @param fullname the full name or relative name of the document to load\n     * @return a Document object (if the document couldn't be found a new one is created in memory - but not saved, you\n     *         can check whether it's a new document or not by using {@link com.xpn.xwiki.api.Document#isNew()}\n     * @throws XWikiException\n     */\n    public Document getDocument(String space, String fullname) throws XWikiException\n    {\n        XWikiDocument doc = this.xwiki.getDocument(space, fullname, getXWikiContext());\n        if (this.xwiki.getRightService().hasAccessLevel(\"view\", getXWikiContext().getUser(), doc.getFullName(),\n            getXWikiContext()) == false) {\n            return null;\n        }\n\n        return doc.newDocument(getXWikiContext());\n    }\n\n    /**\n     * Load a specific revision of a document\n     *\n     * @param doc Document for which to load a specific revision\n     * @param rev Revision number\n     * @return Specific revision of a document\n     * @throws XWikiException is never thrown\n     */\n    public Document getDocument(Document doc, String rev) throws XWikiException\n    {\n        if (doc == null || doc.getDoc() == null) {\n            return null;\n        }\n\n        if (!getContextualAuthorizationManager().hasAccess(Right.VIEW, doc.getDocumentReference())) {\n            // Finally we return null, otherwise showing search result is a real pain\n            return null;\n        }\n\n        return doc.getDocumentRevision(rev);\n    }\n\n    /**\n     * Load a specific revision of a document\n     *\n     * @param reference Document for which to load a specific revision\n     * @param revision Revision number\n     * @return Specific revision of a document\n     * @throws XWikiException is never thrown\n     * @since 9.4RC1\n     */\n    public Document getDocument(DocumentReference reference, String revision) throws XWikiException\n    {\n        try {\n            if (reference != null && getContextualAuthorizationManager().hasAccess(Right.VIEW, reference)) {\n                DocumentRevisionProvider revisionProvider = getDocumentRevisionProvider();\n                revisionProvider.checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, reference, revision);\n                XWikiDocument documentRevision = revisionProvider.getRevision(reference, revision);\n\n                if (documentRevision != null) {\n                    return new Document(documentRevision, this.context);\n                }\n            }\n        } catch (AuthorizationException e) {\n            LOGGER.info(\"Access denied for loading revision [{}] of document [{}]: [{}]\", revision, reference,\n                ExceptionUtils.getRootCauseMessage(e));\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to access revision [{}] of document {}\", revision, reference, e);\n        }\n\n        return null;\n    }\n\n    /**\n     * Output content in the edit content textarea\n     *\n     * @param content content to output\n     * @return the textarea text content\n     */\n    public String getTextArea(String content)\n    {\n        return com.xpn.xwiki.XWiki.getTextArea(content, getXWikiContext());\n    }\n\n    /**\n     * Get the list of available classes in the wiki\n     *\n     * @return list of classes names\n     * @throws XWikiException\n     */\n    public List<String> getClassList() throws XWikiException\n    {\n        return this.xwiki.getClassList(getXWikiContext());\n    }\n\n    /**\n     * Get the global MetaClass object\n     *\n     * @return MetaClass object\n     */\n    public MetaClass getMetaclass()\n    {\n        return this.xwiki.getMetaclass();\n    }\n\n    /**\n     * API allowing to search for document names matching a query. Examples:\n     * <ul>\n     * <li>Query: <code>where doc.space='Main' order by doc.creationDate desc</code>. Result: All the documents in space\n     * 'Main' ordered by the creation date from the most recent</li>\n     * <li>Query: <code>where doc.name like '%sport%' order by doc.name asc</code>. Result: All the documents containing\n     * 'sport' in their name ordered by document name</li>\n     * <li>Query: <code>where doc.content like '%sport%' order by doc.author</code> Result: All the documents containing\n     * 'sport' in their content ordered by the author</li>\n     * <li>Query: <code>where doc.creator = 'XWiki.LudovicDubost' order by doc.creationDate\n     *       desc</code>. Result: All the documents with creator LudovicDubost ordered by the creation date from the\n     * most recent</li>\n     * <li>Query: <code>where doc.author = 'XWiki.LudovicDubost' order by doc.date desc</code>. Result: All the\n     * documents with last author LudovicDubost ordered by the last modification date from the most recent.</li>\n     * <li>Query: <code>,BaseObject as obj where doc.fullName=obj.name and\n     *       obj.className='XWiki.XWikiComments' order by doc.date desc</code>. Result: All the documents with at least\n     * one comment ordered by the last modification date from the most recent</li>\n     * <li>Query: <code>,BaseObject as obj, StringProperty as prop where\n     *       doc.fullName=obj.name and obj.className='XWiki.XWikiComments' and obj.id=prop.id.id\n     *       and prop.id.name='author' and prop.value='XWiki.LudovicDubost' order by doc.date\n     *       desc</code>. Result: All the documents with at least one comment from LudovicDubost ordered by the last\n     * modification date from the most recent</li>\n     * </ul>\n     *\n     * @param wheresql Query to be run (either starting with \", BaseObject as obj where..\" or by \"where ...\"\n     * @return List of document names matching (Main.Page1, Main.Page2)\n     * @throws XWikiException\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocuments(String wheresql) throws XWikiException\n    {\n        return this.xwiki.getStore().searchDocumentsNames(wheresql, getXWikiContext());\n    }\n\n    /**\n     * API allowing to search for document names matching a query return only a limited number of elements and skipping\n     * the first rows. The query part is the same as searchDocuments\n     *\n     * @param wheresql query to use similar to searchDocuments(wheresql)\n     * @param nb return only 'nb' rows\n     * @param start skip the first 'start' rows\n     * @return List of document names matching\n     * @throws XWikiException\n     * @see List searchDocuments(String where sql)\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocuments(String wheresql, int nb, int start) throws XWikiException\n    {\n        return this.xwiki.getStore().searchDocumentsNames(wheresql, nb, start, getXWikiContext());\n    }\n\n    /**\n     * Privileged API allowing to search for document names matching a query return only a limited number of elements\n     * and skipping the first rows. The return values contain the list of columns specified in addition to the document\n     * space and name The query part is the same as searchDocuments\n     *\n     * @param wheresql query to use similar to searchDocuments(wheresql)\n     * @param nb return only 'nb' rows\n     * @param start skip the first 'start' rows\n     * @param selectColumns List of columns to add to the result\n     * @return List of Object[] with the column values of the matching rows\n     * @throws XWikiException\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocuments(String wheresql, int nb, int start, String selectColumns) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.xwiki.getStore().searchDocumentsNames(wheresql, nb, start, selectColumns, getXWikiContext());\n        }\n\n        return Collections.emptyList();\n    }\n\n    /**\n     * API allowing to search for documents allowing to have mutliple entries per locale\n     *\n     * @param wheresql query to use similar to searchDocuments(wheresql)\n     * @param distinctbylocale true to return multiple rows per locale\n     * @return List of Document object matching\n     * @throws XWikiException\n     */\n    public List<Document> searchDocuments(String wheresql, boolean distinctbylocale) throws XWikiException\n    {\n        return convert(this.xwiki.getStore().searchDocuments(wheresql, distinctbylocale, getXWikiContext()));\n    }\n\n    /**\n     * API allowing to search for documents allowing to have multiple entries per locale\n     *\n     * @param wheresql query to use similar to searchDocuments(wheresql)\n     * @param distinctbylocale true to return multiple rows per locale\n     * @return List of Document object matching\n     * @param nb return only 'nb' rows\n     * @param start skip the first 'start' rows\n     * @throws XWikiException\n     */\n    public List<Document> searchDocuments(String wheresql, boolean distinctbylocale, int nb, int start)\n        throws XWikiException\n    {\n        return convert(this.xwiki.getStore().searchDocuments(wheresql, distinctbylocale, nb, start, getXWikiContext()));\n    }\n\n    /**\n     * Search documents by passing HQL where clause values as parameters. This allows generating a Named HQL query which\n     * will automatically encode the passed values (like escaping single quotes). This API is recommended to be used\n     * over the other similar methods where the values are passed inside the where clause and for which you'll need to\n     * do the encoding/escaping yourself before calling them.\n     * <p>\n     * Example\n     * </p>\n     *\n     * <pre>\n     * &lt;code&gt;\n     * #set($orphans = $xwiki.searchDocuments(&quot; where doc.fullName &lt;&gt; ?1 and (doc.parent = ?2 or &quot;\n     *     + &quot;(doc.parent = ?3 and doc.space = ?4))&quot;,\n     *     [&quot;${doc.fullName}as&quot;, ${doc.fullName}, ${doc.name}, ${doc.space}]))\n     * &lt;/code&gt;\n     * </pre>\n     *\n     * @param parameterizedWhereClause the HQL where clause. For example\n     *            {@code where doc.fullName <> ?1 and (doc.parent = ?2 or (doc.parent = ?3 and doc.space = ?4))}\n     * @param maxResults the number of rows to return. If 0 then all rows are returned\n     * @param startOffset the number of rows to skip. If 0 don't skip any row\n     * @param parameterValues the where clause values that replace the question marks (?1, ?2, etc.)\n     * @return a list of document names\n     * @throws XWikiException in case of error while performing the query\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocuments(String parameterizedWhereClause, int maxResults, int startOffset,\n        List<?> parameterValues) throws XWikiException\n    {\n        return this.xwiki.getStore().searchDocumentsNames(parameterizedWhereClause, maxResults, startOffset,\n            parameterValues, getXWikiContext());\n    }\n\n    /**\n     * Same as {@link #searchDocuments(String, int, int, java.util.List)} but returns all rows.\n     *\n     * @see #searchDocuments(String, int, int, java.util.List)\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocuments(String parameterizedWhereClause, List<?> parameterValues) throws XWikiException\n    {\n        return this.xwiki.getStore().searchDocumentsNames(parameterizedWhereClause, parameterValues, getXWikiContext());\n    }\n\n    /**\n     * Search documents in the provided wiki by passing HQL where clause values as parameters. See\n     * {@link #searchDocuments(String, int, int, java.util.List)} for more details.\n     *\n     * @param wikiName the name of the wiki where to search.\n     * @param parameterizedWhereClause the HQL where clause. For example\n     *            {@code where doc.fullName <> ?1 and (doc.parent = ?2 or (doc.parent = ?3 and doc.space = ?4))}\n     * @param maxResults the number of rows to return. If 0 then all rows are returned\n     * @param startOffset the number of rows to skip. If 0 don't skip any row\n     * @param parameterValues the where clause values that replace the question marks (?)\n     * @return a list of document full names (Space.Name).\n     * @see #searchDocuments(String, int, int, java.util.List)\n     * @throws XWikiException in case of error while performing the query\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> searchDocumentsNames(String wikiName, String parameterizedWhereClause, int maxResults,\n        int startOffset, List<?> parameterValues) throws XWikiException\n    {\n        String database = this.context.getWikiId();\n\n        try {\n            this.context.setWikiId(wikiName);\n\n            return searchDocuments(parameterizedWhereClause, maxResults, startOffset, parameterValues);\n        } finally {\n            this.context.setWikiId(database);\n        }\n    }\n\n    /**\n     * Search spaces by passing HQL where clause values as parameters. See\n     * {@link #searchDocuments(String, int, int, List)} for more about parameterized hql clauses.\n     *\n     * @param parametrizedSqlClause the HQL where clause. For example\n     *            {@code where doc.fullName <> ?1 and (doc.parent = ?2 or (doc.parent = ?3 and doc.space = ?4))}\n     * @param nb the number of rows to return. If 0 then all rows are returned\n     * @param start the number of rows to skip. If 0 don't skip any row\n     * @param parameterValues the where clause values that replace the question marks (?)\n     * @return a list of spaces names.\n     * @throws XWikiException in case of error while performing the query\n     */\n    public List<String> searchSpacesNames(String parametrizedSqlClause, int nb, int start, List<?> parameterValues)\n        throws XWikiException\n    {\n        return this.xwiki.getStore().search(\"select distinct doc.space from XWikiDocument doc \" + parametrizedSqlClause,\n            nb, start, parameterValues, this.context);\n    }\n\n    /**\n     * Search attachments by passing HQL where clause values as parameters. See\n     * {@link #searchDocuments(String, int, int, List)} for more about parameterized hql clauses. You can specify\n     * properties of attach (the attachment) or doc (the document it is attached to)\n     *\n     * @param parametrizedSqlClause The HQL where clause. For example\n     *            {@code where doc.fullName <> ?1 and (doc.parent = ?2 or (doc.parent = ?3 and doc.space = ?4))}\n     * @param nb The number of rows to return. If 0 then all rows are returned\n     * @param start The number of rows to skip at the beginning.\n     * @param parameterValues A {@link java.util.List} of the where clause values that replace the question marks (?)\n     * @return A List of {@link Attachment} objects.\n     * @throws XWikiException in case of error while performing the query\n     * @since 5.0M2\n     */\n    public List<Attachment> searchAttachments(String parametrizedSqlClause, int nb, int start, List<?> parameterValues)\n        throws XWikiException\n    {\n        return convertAttachments(\n            this.xwiki.searchAttachments(parametrizedSqlClause, true, nb, start, parameterValues, this.context));\n    }\n\n    /**\n     * Count attachments returned by a given parameterized query\n     *\n     * @param parametrizedSqlClause Everything which would follow the \"WHERE\" in HQL see:\n     *            {@link #searchDocuments(String, int, int, List)}\n     * @param parameterValues A {@link java.util.List} of the where clause values that replace the question marks (?)\n     * @return int number of attachments found.\n     * @throws XWikiException\n     * @see #searchAttachments(String, int, int, List)\n     * @since 5.0M2\n     */\n    public int countAttachments(String parametrizedSqlClause, List<?> parameterValues) throws XWikiException\n    {\n        return this.xwiki.countAttachments(parametrizedSqlClause, parameterValues, this.context);\n    }\n\n    /**\n     * Function to wrap a list of XWikiDocument into Document objects\n     *\n     * @param docs list of XWikiDocument\n     * @return list of Document objects\n     */\n    public List<Document> wrapDocs(List<?> docs)\n    {\n        List<Document> result = new ArrayList<Document>();\n        if (docs != null) {\n            for (java.lang.Object obj : docs) {\n                try {\n                    if (obj instanceof XWikiDocument) {\n                        XWikiDocument doc = (XWikiDocument) obj;\n                        Document wrappedDoc = doc.newDocument(getXWikiContext());\n                        result.add(wrappedDoc);\n                    } else if (obj instanceof Document) {\n                        result.add((Document) obj);\n                    } else if (obj instanceof String) {\n                        Document doc = getDocument(obj.toString());\n                        if (doc != null) {\n                            result.add(doc);\n                        }\n                    }\n                } catch (XWikiException ex) {\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * API allowing to parse a text content to evaluate velocity scripts\n     *\n     * @param content\n     * @return evaluated content if the content contains velocity scripts\n     * @deprecated Since 7.2M1. Use specific rendering/parsing options for the content type you want to parse/render.\n     */\n    @Deprecated\n    public String parseContent(String content)\n    {\n        return this.xwiki.parseContent(content, getXWikiContext());\n    }\n\n    /**\n     * API to parse a velocity template provided by the current Skin The template is first looked in the skin active for\n     * the user, the space or the wiki. If the template does not exist in that skin, the template is looked up in the\n     * \"parent skin\" of the skin\n     *\n     * @param template Template name (\"view\", \"edit\", \"comment\")\n     * @return Evaluated content from the template\n     */\n    public String parseTemplate(String template)\n    {\n        return this.xwiki.parseTemplate(template, getXWikiContext());\n    }\n\n    /**\n     * API to render a velocity template provided by the current Skin The template is first looked in the skin active\n     * for the user, the space or the wiki. If the template does not exist in that skin, the template is looked up in\n     * the \"parent skin\" of the skin\n     *\n     * @param template Template name (\"view\", \"edit\", \"comment\")\n     * @return Evaluated content from the template\n     */\n    public String renderTemplate(String template)\n    {\n        return this.xwiki.renderTemplate(template, getXWikiContext());\n    }\n\n    /**\n     * Return the URL of the static file provided by the current skin The file is first looked in the skin active for\n     * the user, the space or the wiki. If the file does not exist in that skin, the file is looked up in the \"parent\n     * skin\" of the skin. The file can be a CSS file, an image file, a javascript file, etc.\n     *\n     * @param filename Filename to be looked up in the skin (logo.gif, style.css)\n     * @return URL to access this file\n     */\n    public String getSkinFile(String filename)\n    {\n        return this.xwiki.getSkinFile(filename, getXWikiContext());\n    }\n\n    /**\n     * Return the URL of the static file provided by the current skin The file is first looked in the skin active for\n     * the user, the space or the wiki. If the file does not exist in that skin, the file is looked up in the \"parent\n     * skin\" of the skin. The file can be a CSS file, an image file, a javascript file, etc.\n     *\n     * @param filename Filename to be looked up in the skin (logo.gif, style.css)\n     * @param forceSkinAction true to make sure that static files are retrieved through the skin action, to allow\n     *            parsing of velocity on CSS files\n     * @return URL to access this file\n     */\n    public String getSkinFile(String filename, boolean forceSkinAction)\n    {\n        return this.xwiki.getSkinFile(filename, forceSkinAction, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the current skin for this request and user The skin is first derived from the request \"skin\"\n     * parameter If this parameter does not exist, the user preference \"skin\" is looked up If this parameter does not\n     * exist or is empty, the space preference \"skin\" is looked up If this parameter does not exist or is empty, the\n     * XWiki preference \"skin\" is looked up If this parameter does not exist or is empty, the xwiki.cfg parameter\n     * xwiki.defaultskin is looked up If this parameter does not exist or is empty, the xwiki.cfg parameter\n     * xwiki.defaultbaseskin is looked up If this parameter does not exist or is empty, the skin is \"colibri\"\n     *\n     * @return The current skin for this request and user\n     */\n    public String getSkin()\n    {\n        return this.xwiki.getSkin(getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the current skin for this request and user. Each skin has a skin it is based on. If not the base\n     * skin is the xwiki.cfg parameter \"xwiki.defaultbaseskin\". If this parameter does not exist or is empty, the base\n     * skin is \"colibri\".\n     *\n     * @return The current baseskin for this request and user\n     */\n    public String getBaseSkin()\n    {\n        return this.xwiki.getBaseSkin(getXWikiContext());\n    }\n\n    /**\n     * API to access the copyright for this space. The copyright is read in the space preferences. If it does not exist\n     * or is empty it is read from the XWiki preferences.\n     *\n     * @return the text for the copyright\n     */\n    public String getSpaceCopyright()\n    {\n        return this.xwiki.getSpaceCopyright(getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference There can be one preference object per locale This function will find the right\n     * preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale\n     */\n    public String getXWikiPreference(String preference)\n    {\n        return this.xwiki.getXWikiPreference(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference There can be one preference object per locale This function will find the right\n     * preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the preference does not exist or is empty\n     * @return The preference for this wiki and the current locale\n     */\n    public String getXWikiPreference(String preference, String defaultValue)\n    {\n        return this.xwiki.getXWikiPreference(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access an Space Preference There can be one preference object per locale This function will find the right\n     * preference object associated to the current active locale If no preference is found it will look in the XWiki\n     * Preferences\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale\n     */\n    public String getSpacePreference(String preference)\n    {\n        return this.xwiki.getSpacePreference(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access an Space Preference There can be one preference object per locale This function will find the right\n     * preference object associated to the current active locale If no preference is found it will look in the XWiki\n     * Preferences\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the preference does not exist or is empty\n     * @return The preference for this wiki and the current locale\n     */\n    public String getSpacePreference(String preference, String defaultValue)\n    {\n        return this.xwiki.getSpacePreference(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access a Skin Preference The skin object is the current user's skin\n     *\n     * @param preference Preference name\n     * @return The preference for the current skin\n     */\n    public String getSkinPreference(String preference)\n    {\n        return this.xwiki.getSkinPreference(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access a Skin Preference The skin object is the current user's skin\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the preference does not exist or is empty\n     * @return The preference for the current skin\n     */\n    public String getSkinPreference(String preference, String defaultValue)\n    {\n        return this.xwiki.getSkinPreference(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * Get the reference of the space and fallback on parent space or wiki in case nothing is found.\n     * <p>\n     * If the property is not set on any level then empty String is returned.\n     * \n     * @param preference the name of the preference key\n     * @param spaceReference the reference of the space\n     * @return the value of the preference or empty String if it could not be found\n     * @since 7.4M1\n     */\n    public String getSpacePreferenceFor(String preference, SpaceReference spaceReference)\n    {\n        return this.xwiki.getSpacePreference(preference, spaceReference, getXWikiContext());\n    }\n\n    /**\n     * Get the reference of the space and fallback on parent space or wiki in case nothing is found.\n     * <p>\n     * If the property is not set on any level then <code>defaultValue</code> is returned.\n     * \n     * @param preference the name of the preference key\n     * @param spaceReference the reference of the space\n     * @param defaultValue the value to return if the preference can't be found\n     * @return the value of the preference or <code>defaultValue</code> if it could not be found\n     * @since 7.4M1\n     */\n    public String getSpacePreferenceFor(String preference, SpaceReference spaceReference, String defaultValue)\n    {\n        return this.xwiki.getSpacePreference(preference, spaceReference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference as a long number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the preference does not exist or is empty\n     * @return The preference for this wiki and the current locale in long format\n     */\n    public long getXWikiPreferenceAsLong(String preference, long defaultValue)\n    {\n        return this.xwiki.getXWikiPreferenceAsLong(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference as a long number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale in long format\n     */\n    public long getXWikiPreferenceAsLong(String preference)\n    {\n        return this.xwiki.getXWikiPreferenceAsLong(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access a Space Preference as a long number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale If no preference is found it will\n     * look for the XWiki Preference\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the prefenrece does not exist or is empty\n     * @return The preference for this wiki and the current locale in long format\n     */\n    public long getSpacePreferenceAsLong(String preference, long defaultValue)\n    {\n        return this.xwiki.getSpacePreferenceAsLong(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access a Space Preference as a long number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale If no preference is found it will\n     * look for the XWiki Preference\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale in long format\n     */\n    public long getSpacePreferenceAsLong(String preference)\n    {\n        return this.xwiki.getSpacePreferenceAsLong(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference as an int number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the prefenrece does not exist or is empty\n     * @return The preference for this wiki and the current locale in int format\n     */\n    public int getXWikiPreferenceAsInt(String preference, int defaultValue)\n    {\n        return this.xwiki.getXWikiPreferenceAsInt(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access an XWiki Preference as a int number There can be one preference object per locale This function\n     * will find the right preference object associated to the current active locale\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale in int format\n     */\n    public int getXWikiPreferenceAsInt(String preference)\n    {\n        return this.xwiki.getXWikiPreferenceAsInt(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access a space Preference as a int number There can be one preference object per locale This function will\n     * find the right preference object associated to the current active locale If no preference is found it will look\n     * for the XWiki Preference\n     *\n     * @param preference Preference name\n     * @param defaultValue default value to return if the prefenrece does not exist or is empty\n     * @return The preference for this wiki and the current locale in int format\n     */\n    public int getSpacePreferenceAsInt(String preference, int defaultValue)\n    {\n        return this.xwiki.getSpacePreferenceAsInt(preference, defaultValue, getXWikiContext());\n    }\n\n    /**\n     * API to access a Space Preference as a int number There can be one preference object per locale This function will\n     * find the right preference object associated to the current active locale If no preference is found it will look\n     * for the XWiki Preference\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale in int format\n     */\n    public int getSpacePreferenceAsInt(String preference)\n    {\n        return this.xwiki.getSpacePreferenceAsInt(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access a User Preference This function will look in the User profile for the preference If no preference\n     * is found it will look in the Space Preferences If no preference is found it will look in the XWiki Preferences\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale\n     */\n    public String getUserPreference(String preference)\n    {\n        return this.xwiki.getUserPreference(preference, getXWikiContext());\n    }\n\n    /**\n     * API to access a User Preference from cookie This function will look in the session cookie for the preference\n     *\n     * @param preference Preference name\n     * @return The preference for this wiki and the current locale\n     */\n    public String getUserPreferenceFromCookie(String preference)\n    {\n        return this.xwiki.getUserPreferenceFromCookie(preference, getXWikiContext());\n    }\n\n    /**\n     * Same as {@link #getLocalePreference()} but as a String.\n     *\n     * @return the locale to use\n     * @deprecated since 8.0M1, use {@link #getLocalePreference()} instead\n     */\n    @Deprecated\n    public String getLanguagePreference()\n    {\n        return this.xwiki.getLanguagePreference(getXWikiContext());\n    }\n\n    /**\n     * First try to find the current locale in use from the XWiki context. If none is used and if the wiki is not\n     * multilingual use the default locale defined in the XWiki preferences. If the wiki is multilingual try to get the\n     * locale passed in the request. If none was passed try to get it from a cookie. If no locale cookie exists then use\n     * the user default locale and barring that use the browser's \"Accept-Language\" header sent in HTTP request. If none\n     * is defined use the default locale.\n     *\n     * @return the locale to use\n     * @since 8.0M1\n     */\n    public Locale getLocalePreference()\n    {\n        return this.xwiki.getLocalePreference(getXWikiContext());\n    }\n\n    /**\n     * Same as {@link #getInterfaceLocalePreference()} but as a String.\n     *\n     * @return the document locale preference for the request\n     * @deprecated since 8.0M1, use {@link #getInterfaceLocalePreference()} instead\n     */\n    @Deprecated\n    public String getInterfaceLanguagePreference()\n    {\n        return this.xwiki.getInterfaceLanguagePreference(getXWikiContext());\n    }\n\n    /**\n     * API to access the interface locale preference for the request Order of evaluation is: locale of the wiki in\n     * mono-lingual mode locale request parameter locale in context locale user preference locale in cookie locale\n     * accepted by the navigator\n     *\n     * @return the document locale preference for the request\n     */\n    public Locale getInterfaceLocalePreference()\n    {\n        return this.xwiki.getInterfaceLocalePreference(getXWikiContext());\n    }\n\n    /**\n     * Get the available locales according to the preferences.\n     *\n     * @return the list of available locales\n     * @since 12.4RC1\n     */\n    public List<Locale> getAvailableLocales()\n    {\n        return this.xwiki.getAvailableLocales(getXWikiContext());\n    }\n\n    /**\n     * @return the list of all wiki names, including the main wiki, corresponding to the available wiki descriptors.\n     *         Example: the descriptor for the wiki <i>wikiname</i> is a document in the main wiki, named\n     *         <i>XWiki.XWikiServerWikiname</i>, containing an XWiki.XWikiServerClass object.\n     * @see com.xpn.xwiki.XWiki#getVirtualWikisDatabaseNames(XWikiContext)\n     */\n    public List<String> getWikiNames()\n    {\n        List<String> result = new ArrayList<String>();\n\n        try {\n            result = this.xwiki.getVirtualWikisDatabaseNames(getXWikiContext());\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to get the list of all wiki names\", e);\n        }\n\n        return result;\n    }\n\n    /**\n     * Convenience method to ask if the current XWiki instance contains subwikis (in addition to the main wiki)\n     *\n     * @return true if at least 1 subwiki exists; false otherwise\n     * @see #getWikiNames()\n     */\n    public boolean hasSubWikis()\n    {\n        return getWikiNames().size() > 1;\n    }\n\n    /**\n     * API to check is wiki is multi-lingual\n     *\n     * @return true for multi-lingual/false for mono-lingual\n     */\n    public boolean isMultiLingual()\n    {\n        return this.xwiki.isMultiLingual(getXWikiContext());\n    }\n\n    /**\n     * Privileged API to flush the cache of the Wiki installation This flushed the cache of all wikis, all plugins, all\n     * renderers\n     */\n    public void flushCache()\n    {\n        if (hasProgrammingRights()) {\n            this.xwiki.flushCache(getXWikiContext());\n        }\n    }\n\n    /**\n     * Privileged API to create a new user from the request This API is used by RegisterNewUser wiki page\n     *\n     * @return the integer status code\n     *         <ul>\n     *         <li>1: ok</li>\n     *         <li>-2: passwords are different or password is empty</li>\n     *         <li>-3: user already exists</li>\n     *         <li>-4: invalid username provided</li>\n     *         <li>-8: user already exists</li>\n     *         </ul>\n     * @throws XWikiException\n     */\n    public int createUser() throws XWikiException\n    {\n        return createUser(false, \"edit\");\n    }\n\n    /**\n     * Privileged API to create a new user from the request This API is used by RegisterNewUser wiki page This version\n     * sends a validation email to the user Configuration of validation email is in the XWiki Preferences\n     *\n     * @param withValidation true to send the validationemail\n     * @return the integer status code\n     *         <ul>\n     *         <li>1: ok</li>\n     *         <li>-2: passwords are different or password is empty</li>\n     *         <li>-3: user already exists</li>\n     *         <li>-4: invalid username provided</li>\n     *         <li>-8: user already exists</li>\n     *         </ul>\n     * @throws XWikiException\n     */\n    public int createUser(boolean withValidation) throws XWikiException\n    {\n        return createUser(withValidation, \"edit\");\n    }\n\n    /**\n     * Privileged API to create a new user from the request.\n     * <p>\n     * This API is used by the RegisterNewUser wiki page.\n     * <p>\n     * This version sends a validation email to the user. Configuration of validation email is in the XWiki Preferences.\n     *\n     * @param withValidation true to send the validation email\n     * @param userRights Rights to set for the user for it's own page(defaults to \"edit\")\n     * @return the integer status code\n     *         <ul>\n     *         <li>1: ok</li>\n     *         <li>-2: passwords are different or password is empty</li>\n     *         <li>-3: user already exists</li>\n     *         <li>-4: invalid username provided</li>\n     *         <li>-8: user already exists</li>\n     *         </ul>\n     * @throws XWikiException\n     */\n    public int createUser(boolean withValidation, String userRights) throws XWikiException\n    {\n        boolean registerRight;\n        try {\n            // So, what's the register right for? This says that if the creator of the page\n            // (Admin) has programming rights, anybody can register. Is this OK?\n            if (hasProgrammingRights()) {\n                registerRight = true;\n            } else {\n                registerRight = this.xwiki.getRightService().hasAccessLevel(\"register\", getXWikiContext().getUser(),\n                    \"XWiki.XWikiPreferences\", getXWikiContext());\n            }\n\n            if (registerRight) {\n                return this.xwiki.createUser(withValidation, userRights, getXWikiContext());\n            }\n\n            return -1;\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to create user\", e);\n\n            return -10;\n        }\n\n    }\n\n    /**\n     * Privileged API to validate the return code given by a user in response to an email validation email The\n     * validation information are taken from the request object\n     *\n     * @param withConfirmEmail true to send a account confirmation email/false to not send it\n     * @return Success of Failure code (0 for success, -1 for missing programming rights, &gt; 0 for other errors\n     * @throws XWikiException\n     */\n    public int validateUser(boolean withConfirmEmail) throws XWikiException\n    {\n        return this.xwiki.validateUser(withConfirmEmail, getXWikiContext());\n    }\n\n    /**\n     * Privileged API to add a user to the XWiki.XWikiAllGroup\n     *\n     * @param fullwikiname user name to add\n     * @throws XWikiException\n     */\n    public void addToAllGroup(String fullwikiname) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            this.xwiki.setUserDefaultGroup(fullwikiname, getXWikiContext());\n        }\n    }\n\n    /**\n     * Privileged API to send a confirmation email to a user\n     *\n     * @param xwikiname user to send the email to\n     * @param password password to put in the mail\n     * @param email email to send to\n     * @param add_message Additional message to send to the user\n     * @param contentfield Preference field to use as a mail template\n     * @throws XWikiException if the mail was not send successfully\n     */\n    public void sendConfirmationMail(String xwikiname, String password, String email, String add_message,\n        String contentfield) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            this.xwiki.sendConfirmationEmail(xwikiname, password, email, add_message, contentfield, getXWikiContext());\n        }\n    }\n\n    /**\n     * Privileged API to send a confirmation email to a user\n     *\n     * @param xwikiname user to send the email to\n     * @param password password to put in the mail\n     * @param email email to send to\n     * @param contentfield Preference field to use as a mail template\n     * @throws XWikiException if the mail was not send successfully\n     */\n    public void sendConfirmationMail(String xwikiname, String password, String email, String contentfield)\n        throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            this.xwiki.sendConfirmationEmail(xwikiname, password, email, \"\", contentfield, getXWikiContext());\n        }\n    }\n\n    /**\n     * API to rename a document to another document.\n     * Note that the list of backlinks can be retrieved with {@link Document#getBackLinkedReferences()}\n     * and the list of children with {@link Document#getChildrenReferences()}.\n     *\n     * <strong>Warning:</strong> Be aware that this method never triggers any event related to the rename\n     * of the document. If you want the right events to be sent for the event, please use the dedicated Refactoring\n     * Module API (see\n     * {@link org.xwiki.refactoring.script.RequestFactory#createRenameRequest(EntityReference, EntityReference)}\n     * and {@link org.xwiki.refactoring.job.MoveRequest}).\n     *\n     * @param sourceDocumentReference the source document to rename.\n     * @param targetDocumentReference the target reference to rename the document to.\n     * @param overwrite if {@code true} the target document reference will be overwritten if it exists\n     *                  (deleted to the recycle bin before the rename). If {@code false} and the target document exist\n     *                  the rename won't be performed.\n     * @param backlinkDocumentReferences the list of references of documents to parse and for which links will be\n     *                                  modified to point to the new document reference\n     * @param childDocumentReferences the list of references of document whose parent field will be set to the new\n     *                                 document reference\n     * @return {@code true} if the rename succeeded. {@code false} if there was any issue.\n     * @throws XWikiException if the document cannot be renamed properly.\n     * @since 12.5RC1\n     */\n    public boolean renameDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference,\n        boolean overwrite, List<DocumentReference> backlinkDocumentReferences,\n        List<DocumentReference> childDocumentReferences) throws XWikiException\n    {\n        if (hasAccess(Right.DELETE, sourceDocumentReference)\n            && ((overwrite && hasAccess(Right.DELETE, targetDocumentReference))\n            || (!overwrite && hasAccess(Right.EDIT, targetDocumentReference)))) {\n            return this.xwiki.renameDocument(sourceDocumentReference, targetDocumentReference, overwrite,\n                backlinkDocumentReferences, childDocumentReferences, getXWikiContext());\n        }\n        return false;\n    }\n\n    /**\n     * API to copy a document to another document in the same wiki\n     *\n     * @param docname source document\n     * @param targetdocname target document\n     * @return true if the copy was sucessfull\n     * @throws XWikiException if the document was not copied properly\n     */\n    public boolean copyDocument(String docname, String targetdocname) throws XWikiException\n    {\n        return this.copyDocument(docname, targetdocname, null, null, null, false, false);\n    }\n\n    /**\n     * API to copy a translation of a document to another document in the same wiki\n     *\n     * @param docname source document\n     * @param targetdocname target document\n     * @param wikilocale locale to copy\n     * @return true if the copy was sucessfull\n     * @throws XWikiException if the document was not copied properly\n     */\n    public boolean copyDocument(String docname, String targetdocname, String wikilocale) throws XWikiException\n    {\n        return this.copyDocument(docname, targetdocname, null, null, wikilocale, false, false);\n    }\n\n    /**\n     * API to copy a translation of a document to another document of the same name in another wiki\n     *\n     * @param docname source document\n     * @param sourceWiki source wiki\n     * @param targetWiki target wiki\n     * @param wikilocale locale to copy\n     * @return true if the copy was sucessfull\n     * @throws XWikiException if the document was not copied properly\n     */\n    public boolean copyDocument(String docname, String sourceWiki, String targetWiki, String wikilocale)\n        throws XWikiException\n    {\n        return this.copyDocument(docname, docname, sourceWiki, targetWiki, wikilocale, true, false);\n    }\n\n    /**\n     * API to copy a translation of a document to another document of the same name in another wiki additionally\n     * resetting the version\n     *\n     * @param docname source document\n     * @param sourceWiki source wiki\n     * @param targetWiki target wiki\n     * @param wikilocale locale to copy\n     * @param reset true to reset versions\n     * @return true if the copy was sucessfull\n     * @throws XWikiException if the document was not copied properly\n     */\n    public boolean copyDocument(String docname, String targetdocname, String sourceWiki, String targetWiki,\n        String wikilocale, boolean reset) throws XWikiException\n    {\n        return this.copyDocument(docname, targetdocname, sourceWiki, targetWiki, wikilocale, reset, false);\n    }\n\n    /**\n     * API to copy a translation of a document to another document of the same name in another wiki additionally\n     * resetting the version and overwriting the previous document\n     *\n     * @param docname source document name\n     * @param targetdocname target document name\n     * @param sourceWiki source wiki\n     * @param targetWiki target wiki\n     * @param wikilocale locale to copy\n     * @param reset true to reset versions\n     * @param force true to overwrite the previous document\n     * @return true if the copy was sucessfull\n     * @throws XWikiException if the document was not copied properly\n     */\n    public boolean copyDocument(String docname, String targetdocname, String sourceWiki, String targetWiki,\n        String wikilocale, boolean reset, boolean force) throws XWikiException\n    {\n        DocumentReference sourceDocumentReference = getCurrentMixedDocumentReferenceResolver().resolve(docname);\n        if (!StringUtils.isEmpty(sourceWiki)) {\n            sourceDocumentReference = sourceDocumentReference.replaceParent(sourceDocumentReference.getWikiReference(),\n                new WikiReference(sourceWiki));\n        }\n\n        DocumentReference targetDocumentReference = getCurrentMixedDocumentReferenceResolver().resolve(targetdocname);\n        if (!StringUtils.isEmpty(targetWiki)) {\n            targetDocumentReference = targetDocumentReference.replaceParent(targetDocumentReference.getWikiReference(),\n                new WikiReference(targetWiki));\n        }\n\n        return this.copyDocument(sourceDocumentReference, targetDocumentReference, wikilocale, reset, force);\n    }\n\n    /**\n     * API to copy a translation of a document to another document of the same name in another wiki additionally\n     * resetting the version and overwriting the previous document\n     *\n     * @param sourceDocumentReference the reference to the document to copy\n     * @param targetDocumentReference the reference to the document to create\n     * @param wikilocale locale to copy\n     * @param resetHistory {@code true} to reset versions\n     * @param overwrite {@code true} to overwrite the previous document\n     * @return {@code true} if the copy was sucessful\n     * @throws XWikiException if the document was not copied properly\n     * @since 3.0M3\n     */\n    public boolean copyDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference,\n        String wikilocale, boolean resetHistory, boolean overwrite) throws XWikiException\n    {\n        // In order to copy the source document the user must have at least the right to view it.\n        if (hasAccessLevel(\"view\", getDefaultStringEntityReferenceSerializer().serialize(sourceDocumentReference))) {\n            String targetDocStringRef = getDefaultStringEntityReferenceSerializer().serialize(targetDocumentReference);\n            // To create the target document the user must have edit rights. If the target document exists and the user\n            // wants to overwrite it then he needs delete right.\n            // Note: We have to check if the target document exists before checking the delete right because delete\n            // right is denied if not explicitly specified.\n            if (hasAccessLevel(\"edit\", targetDocStringRef)\n                && (!overwrite || !exists(targetDocumentReference) || hasAccessLevel(\"delete\", targetDocStringRef))) {\n                // Reset creation data otherwise the required rights for page copy need to be reconsidered.\n                return this.xwiki.copyDocument(sourceDocumentReference, targetDocumentReference, wikilocale,\n                    resetHistory, overwrite, true, getXWikiContext());\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Privileged API to copy a space to another wiki, optionally deleting all document of the target space\n     *\n     * @param space source Space\n     * @param sourceWiki source Wiki\n     * @param targetWiki target Wiki\n     * @param locale locale to copy\n     * @param clean true to delete all document of the target space\n     * @return number of copied documents\n     * @throws XWikiException if the space was not copied properly\n     */\n    public int copySpaceBetweenWikis(String space, String sourceWiki, String targetWiki, String locale, boolean clean)\n        throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.xwiki.copySpaceBetweenWikis(space, sourceWiki, targetWiki, locale, clean, getXWikiContext());\n        }\n\n        return -1;\n    }\n\n    /**\n     * API to include a topic into another The topic is rendered fully in the context of itself\n     *\n     * @param topic page name of the topic to include\n     * @return the content of the included page\n     * @throws XWikiException if the include failed\n     */\n    public String includeTopic(String topic) throws XWikiException\n    {\n        return includeTopic(topic, true);\n    }\n\n    /**\n     * API to execute a form in the context of an including topic The rendering is evaluated in the context of the\n     * including topic All velocity variables are the one of the including topic This api is usually called using\n     * #includeForm in a page, which modifies the behavior of \"Edit this page\" button to direct for Form mode (inline)\n     *\n     * @param topic page name of the form to execute\n     * @return the content of the included page\n     * @throws XWikiException if the include failed\n     */\n    public String includeForm(String topic) throws XWikiException\n    {\n        return includeForm(topic, true);\n    }\n\n    /**\n     * API to include a topic into another, optionally surrounding the content with {pre}{/pre} to avoid future wiki\n     * rendering. The topic is rendered fully in the context of itself.\n     *\n     * @param topic page name of the topic to include\n     * @param pre true to add {pre} {/pre} (only if includer document is 1.0 syntax)\n     * @return the content of the included page\n     * @throws XWikiException if the include failed\n     */\n    public String includeTopic(String topic, boolean pre) throws XWikiException\n    {\n        String result = this.xwiki.include(topic, false, getXWikiContext());\n\n        if (pre) {\n            String includerSyntax = this.xwiki.getCurrentContentSyntaxId(null, this.context);\n\n            if (includerSyntax != null && Syntax.XWIKI_1_0.toIdString().equals(includerSyntax)) {\n                result = \"{pre}\" + result + \"{/pre}\";\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * API to execute a form in the context of an including topic, optionnaly surrounding the content with {pre}{/pre}\n     * to avoid future wiki rendering The rendering is evaluated in the context of the including topic All velocity\n     * variables are the one of the including topic This api is usually called using #includeForm in a page, which\n     * modifies the behavior of \"Edit this page\" button to direct for Form mode (inline).\n     *\n     * @param topic page name of the form to execute\n     * @param pre true to add {pre} {/pre} (only if includer document is 1.0 syntax)\n     * @return the content of the included page\n     * @throws XWikiException if the include failed\n     */\n    public String includeForm(String topic, boolean pre) throws XWikiException\n    {\n        String result = this.xwiki.include(topic, true, getXWikiContext());\n\n        if (pre) {\n            String includerSyntax = this.xwiki.getCurrentContentSyntaxId(null, this.context);\n\n            if (includerSyntax != null && Syntax.XWIKI_1_0.toIdString().equals(includerSyntax)) {\n                result = \"{pre}\" + result + \"{/pre}\";\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * API to check rights on the current document for the current user\n     *\n     * @param level right to check (view, edit, comment, delete)\n     * @return true if right is granted/false if not\n     */\n    public boolean hasAccessLevel(String level)\n    {\n        return hasAccessLevel(level, getXWikiContext().getUser(), getXWikiContext().getDoc().getFullName());\n    }\n\n    /**\n     * API to check rights on a document for a given user\n     *\n     * @param level right to check (view, edit, comment, delete)\n     * @param user user for which to check the right\n     * @param docname document on which to check the rights\n     * @return true if right is granted/false if not\n     */\n    public boolean hasAccessLevel(String level, String user, String docname)\n    {\n        try {\n            return this.xwiki.getRightService().hasAccessLevel(level, user, docname, getXWikiContext());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    /**\n     * API to list all spaces in the current wiki.\n     * <p>\n     * Hidden spaces are filtered unless current user enabled them.\n     *\n     * @return a list of string representing all non-hidden spaces (ie spaces that have non-hidden pages) for the\n     *         current wiki\n     * @throws XWikiException if something went wrong\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> getSpaces() throws XWikiException\n    {\n        return this.xwiki.getSpaces(getXWikiContext());\n    }\n\n    /**\n     * API to list all documents in a space.\n     * <p>\n     * Hidden spaces are filtered unless current user enabled them.\n     *\n     * @param spaceReference the local reference of the space for which to return all non-hidden documents\n     * @return the list of document names (in the format {@code Space.Page}) for non-hidden documents in the specified\n     *         space\n     * @throws XWikiException if the loading went wrong\n     * @deprecated use query service instead\n     */\n    @Deprecated\n    public List<String> getSpaceDocsName(String spaceReference) throws XWikiException\n    {\n        return this.xwiki.getSpaceDocsName(spaceReference, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the current encoding of the wiki engine The encoding is stored in xwiki.cfg Default encoding is\n     * ISO-8891-1\n     *\n     * @return encoding active in this wiki\n     */\n    public String getEncoding()\n    {\n        return this.xwiki.getEncoding();\n    }\n\n    /**\n     * API to retrieve the URL of an attached file in a Wiki Document The URL is generated differently depending on the\n     * environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by implementing a new\n     * XWikiURLFactory object For compatibility with any target environment (and especially the portlet environment) It\n     * is important to always use the URL functions to generate URL and never hardcode URLs\n     *\n     * @param fullname page name which includes the attached file\n     * @param filename attached filename to create a link for\n     * @return a URL as a string pointing to the filename\n     * @throws XWikiException if the URL could not be generated properly\n     */\n    public String getAttachmentURL(String fullname, String filename) throws XWikiException\n    {\n        if (StringUtils.isAnyEmpty(fullname, filename)) {\n            return \"\";\n        }\n\n        return this.xwiki.getAttachmentURL(fullname, filename, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of an a Wiki Document in view mode The URL is generated differently depending on the\n     * environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by implementing a new\n     * XWikiURLFactory object For compatibility with any target environment (and especially the portlet environment) It\n     * is important to always use the URL functions to generate URL and never hardcode URLs\n     *\n     * @param fullname the name of the document for which to return the URL for\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     */\n    public String getURL(String fullname) throws XWikiException\n    {\n        return this.xwiki.getURL(fullname, \"view\", getXWikiContext());\n    }\n\n    /**\n     * Retrieve the URL of an entity using the default mode/action for that entity type. The URL is generated\n     * differently depending on the environment (Servlet, Portlet, PDF, etc..). The URL generation can be modified by\n     * implementing a new XWikiURLFactory object. For compatibility with any target environment (and especially the\n     * portlet environment) it is important to always use the URL functions to generate URLs and never hardcode URLs.\n     *\n     * @param reference the reference to the entity for which to return the URL\n     * @return a URL as a string pointing to the specified entity, using the default mode/action for that entity type\n     * @throws XWikiException if the URL could not be generated properly\n     * @since 7.2M1\n     */\n    public String getURL(EntityReference reference) throws XWikiException\n    {\n        return this.xwiki.getURL(reference, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of an entity in any mode, optionally adding a query string The URL is generated\n     * differently depending on the environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by\n     * implementing a new XWikiURLFactory object. The query string will be modified to be added in the way the\n     * environment needs it. It is important to not add the query string parameter manually after a URL. Some\n     * environments will not accept this (like the Portlet environment).\n     *\n     * @param reference the reference to the entity for which to return the URL for\n     * @param action the mode in which to access the entity (view/edit/save/..). Any valid XWiki action is possible\n     * @param querystring the Query String to provide in the usual mode ({@code name1=value1&name2=value=2}) including\n     *            encoding\n     * @return a URL as a string pointing to the entity\n     * @throws XWikiException if the URL could not be generated properly\n     * @since 7.2M1\n     */\n    public String getURL(EntityReference reference, String action, String querystring) throws XWikiException\n    {\n        return this.xwiki.getURL(reference, action, querystring, null, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of an a Wiki Document in view mode The URL is generated differently depending on the\n     * environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by implementing a new\n     * XWikiURLFactory object For compatibility with any target environment (and especially the portlet environment) It\n     * is important to always use the URL functions to generate URL and never hardcode URLs\n     *\n     * @param reference the reference to the document for which to return the URL for\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     * @since 2.3M2\n     */\n    public String getURL(DocumentReference reference) throws XWikiException\n    {\n        return this.xwiki.getURL(reference, \"view\", getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of an a Wiki Document in any mode. The URL is generated differently depending on the\n     * environment (Servlet, Portlet, PDF, etc..). The URL generation can be modified by implementing a new\n     * XWikiURLFactory object For compatibility with any target environment (and especially the portlet environment). It\n     * is important to always use the URL functions to generate URL and never hardcode URLs.\n     *\n     * @param fullname the page name which includes the attached file\n     * @param action the mode in which to access the document (view/edit/save/..). Any valid XWiki action is possible.\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     */\n    public String getURL(String fullname, String action) throws XWikiException\n    {\n        return this.xwiki.getURL(fullname, action, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of a Wiki Document in any mode, optionally adding a query string The URL is generated\n     * differently depending on the environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by\n     * implementing a new XWikiURLFactory object. The query string will be modified to be added in the way the\n     * environment needs it. It is important to not add the query string parameter manually after a URL. Some\n     * environments will not accept this (like the Portlet environment).\n     *\n     * @param fullname the page name which includes the attached file\n     * @param action the mode in which to access the document (view/edit/save/..). Any valid XWiki action is possible\n     * @param querystring the Query String to provide in the usual mode ({@code name1=value1&name2=value=2}) including\n     *            encoding\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     */\n    public String getURL(String fullname, String action, String querystring) throws XWikiException\n    {\n        return this.xwiki.getURL(fullname, action, querystring, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of a Wiki Document in any mode, optionally adding a query string The URL is generated\n     * differently depending on the environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by\n     * implementing a new XWikiURLFactory object. The query string will be modified to be added in the way the\n     * environment needs it. It is important to not add the query string parameter manually after a URL. Some\n     * environments will not accept this (like the Portlet environment).\n     *\n     * @param reference the reference to the document for which to return the URL for\n     * @param action the mode in which to access the document (view/edit/save/..). Any valid XWiki action is possible\n     * @param querystring the Query String to provide in the usual mode ({@code name1=value1&name2=value=2}) including\n     *            encoding\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     * @since 3.0M3\n     */\n    public String getURL(DocumentReference reference, String action, String querystring) throws XWikiException\n    {\n        return this.xwiki.getURL(reference, action, querystring, null, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve the URL of an a Wiki Document in any mode, optionally adding an anchor. The URL is generated\n     * differently depending on the environment (Servlet, Portlet, PDF, etc..) The URL generation can be modified by\n     * implementing a new XWikiURLFactory object. The anchor will be modified to be added in the way the environment\n     * needs it. It is important to not add the anchor parameter manually after a URL. Some environments will not accept\n     * this (like the Portlet environment).\n     *\n     * @param fullname the page name which includes the attached file\n     * @param action the mode in which to access the document (view/edit/save/..). Any valid XWiki action is possible\n     * @param querystring the Query String to provide in the usual mode ({@code name1=value1&name2=value=2}) including\n     *            encoding\n     * @param anchor the anchor that points at a location within the passed document name\n     * @return a URL as a string pointing to the wiki document in view mode\n     * @throws XWikiException if the URL could not be generated properly\n     */\n    public String getURL(String fullname, String action, String querystring, String anchor) throws XWikiException\n    {\n        return this.xwiki.getURL(fullname, action, querystring, anchor, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a viewable referer text for a referer Referers are URL where users have clicked on a link to an\n     * XWiki page Search engine referer URLs are transformed to a nicer view (Google: search query string) For other URL\n     * the http:// part is stripped\n     *\n     * @param referer referer URL to transform\n     * @return A viewable string\n     */\n    public String getRefererText(String referer)\n    {\n        try {\n            return this.xwiki.getRefererText(referer, getXWikiContext());\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n\n    /**\n     * API to retrieve a viewable referer text for a referer with a maximum length Referers are URL where users have\n     * clicked on a link to an XWiki page Search engine referer URLs are transformed to a nicer view (Google: search\n     * query string) For other URL the http:// part is stripped\n     *\n     * @param referer referer URL to transform\n     * @param length Maximum length. \"...\" is added to the end of the text\n     * @return A viewable string\n     */\n    public String getShortRefererText(String referer, int length)\n    {\n        try {\n            return this.xwiki.getRefererText(referer, getXWikiContext()).substring(0, length);\n        } catch (Exception e) {\n            return this.xwiki.getRefererText(referer, getXWikiContext());\n        }\n    }\n\n    /**\n     * Generate and return an unescaped user display name.\n     *\n     * @param userReference the user reference\n     * @return the unescaped display user name\n     * @since 6.4RC1\n     */\n    public String getPlainUserName(DocumentReference userReference)\n    {\n        return this.xwiki.getPlainUserName(userReference, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a link to the User Name page displayed for the first name and last name of the user. The link\n     * will link to the page on the wiki where the user is registered\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getUserName(String user)\n    {\n        return this.xwiki.getUserName(user, null, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a link to the User Name page displayed with a custom view. The link will link to the page on the\n     * wiki where the user is registered. The formating is done using the format parameter which can contain velocity\n     * scripting and access all properties of the User profile using variables ($first_name $last_name $email $city)\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param format formatting to be used (\"$first_name $last_name\", \"$first_name\")\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getUserName(String user, String format)\n    {\n        return this.xwiki.getUserName(user, format, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a link to the User Name page displayed for the first name and last name of the user. The link\n     * will link to the page on the local wiki even if the user is registered on a different wiki.\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getLocalUserName(String user)\n    {\n        try {\n            return this.xwiki.getUserName(user.substring(user.indexOf(\":\") + 1), null, getXWikiContext());\n        } catch (Exception e) {\n            return this.xwiki.getUserName(user, null, getXWikiContext());\n        }\n    }\n\n    /**\n     * API to retrieve a link to the User Name page displayed with a custom view. The link will link to the page on the\n     * local wiki even if the user is registered on a different wiki. The formating is done using the format parameter\n     * which can contain velocity scripting and access all properties of the User profile using variables ($first_name\n     * $last_name $email $city)\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param format formatting to be used (\"$first_name $last_name\", \"$first_name\")\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getLocalUserName(String user, String format)\n    {\n        try {\n            return this.xwiki.getUserName(user.substring(user.indexOf(\":\") + 1), format, getXWikiContext());\n        } catch (Exception e) {\n            return this.xwiki.getUserName(user, format, getXWikiContext());\n        }\n    }\n\n    /**\n     * API to retrieve a text representing the user with the first name and last name of the user. With the link param\n     * set to false it will not link to the user page With the link param set to true, the link will link to the page on\n     * the wiki where the user was registered.\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param link false to not add an HTML link to the user profile\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getUserName(String user, boolean link)\n    {\n        return this.xwiki.getUserName(user, null, link, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a text representing the user with a custom view With the link param set to false it will not link\n     * to the user page. With the link param set to true, the link will link to the page on the wiki where the user was\n     * registered. The formating is done using the format parameter which can contain velocity scripting and access all\n     * properties of the User profile using variables ($first_name $last_name $email $city)\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param format formatting to be used (\"$first_name $last_name\", \"$first_name\")\n     * @param link false to not add an HTML link to the user profile\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getUserName(String user, String format, boolean link)\n    {\n        return this.xwiki.getUserName(user, format, link, getXWikiContext());\n    }\n\n    /**\n     * API to retrieve a text representing the user with the first name and last name of the user. With the link param\n     * set to false it will not link to the user page. With the link param set to true, the link will link to the page\n     * on the local wiki even if the user is registered on a different wiki.\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param link false to not add an HTML link to the user profile\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getLocalUserName(String user, boolean link)\n    {\n        try {\n            return this.xwiki.getUserName(user.substring(user.indexOf(\":\") + 1), null, link, getXWikiContext());\n        } catch (Exception e) {\n            return this.xwiki.getUserName(user, null, link, getXWikiContext());\n        }\n    }\n\n    /**\n     * API to retrieve a text representing the user with a custom view. The formating is done using the format parameter\n     * which can contain velocity scripting and access all properties of the User profile using variables ($first_name\n     * $last_name $email $city). With the link param set to false it will not link to the user page. With the link param\n     * set to true, the link will link to the page on the local wiki even if the user is registered on a different wiki.\n     *\n     * @param user Fully qualified username as retrieved from $xcontext.user (XWiki.LudovicDubost)\n     * @param format formatting to be used (\"$first_name $last_name\", \"$first_name\")\n     * @param link false to not add an HTML link to the user profile\n     * @return The first name and last name fields surrounded with a link to the user page\n     */\n    public String getLocalUserName(String user, String format, boolean link)\n    {\n        try {\n            return this.xwiki.getUserName(user.substring(user.indexOf(\":\") + 1), format, link, getXWikiContext());\n        } catch (Exception e) {\n            return this.xwiki.getUserName(user, format, link, getXWikiContext());\n        }\n    }\n\n    public User getUser()\n    {\n        return this.xwiki.getUser(getXWikiContext());\n    }\n\n    public User getUser(String username)\n    {\n        return this.xwiki.getUser(username, getXWikiContext());\n    }\n\n    /**\n     * Retrieve a user from its document reference.\n     *\n     * @param userReference the reference of the user.\n     * @return the user corresponding to the reference.\n     * @since 11.8RC1\n     */\n    public User getUser(DocumentReference userReference)\n    {\n        return this.xwiki.getUser(userReference, getXWikiContext());\n    }\n\n    /**\n     * API allowing to format a date according to the default Wiki setting The date format is provided in the\n     * 'dateformat' parameter of the XWiki Preferences\n     *\n     * @param date date object to format\n     * @return A string with the date formating from the default Wiki setting\n     */\n    public String formatDate(Date date)\n    {\n        return this.xwiki.formatDate(date, null, getXWikiContext());\n    }\n\n    /**\n     * API allowing to format a date according to a custom format The date format is from java.text.SimpleDateFormat\n     * Example: \"dd/MM/yyyy HH:mm:ss\" or \"d MMM yyyy\" If the format is invalid the default format will be used to show\n     * the date\n     *\n     * @param date date to format\n     * @param format format of the date to be used\n     * @return the formatted date\n     * @see java.text.SimpleDateFormat\n     */\n    public String formatDate(Date date, String format)\n    {\n        return this.xwiki.formatDate(date, format, getXWikiContext());\n    }\n\n    /*\n     * Allow to read user setting providing the user timezone All dates will be expressed with this timezone @return the\n     * timezone\n     */\n    public String getUserTimeZone()\n    {\n        return this.xwiki.getUserTimeZone(this.context);\n    }\n\n    /**\n     * Returns a plugin from the plugin API. Plugin Rights can be verified. Note that although this API is a duplicate\n     * of {@link #getPlugin(String)} it used to provide an easy access from Velocity to XWiki plugins. Indeed Velocity\n     * has a feature in that if a class has a get method, using the dot notation will automatically call the get method\n     * for the class. See http://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html#propertylookuprules.\n     * This this allows the following constructs: <code>$xwiki.pluginName.somePluginMethod()</code>\n     *\n     * @param name Name of the plugin to retrieve (either short of full class name)\n     * @return a plugin object\n     */\n    public Api get(String name)\n    {\n        return getPlugin(name);\n    }\n\n    /**\n     * Returns a plugin from the plugin API. Plugin Rights can be verified.\n     *\n     * @param name Name of the plugin to retrieve (either short of full class name)\n     * @return a plugin object\n     */\n    public Api getPlugin(String name)\n    {\n        return this.xwiki != null ? this.xwiki.getPluginApi(name, getXWikiContext()) : null;\n    }\n\n    /**\n     * Returns the Advertisement system from the preferences\n     *\n     * @return \"google\" or \"none\"\n     */\n    public String getAdType()\n    {\n        return this.xwiki.getAdType(getXWikiContext());\n    }\n\n    /**\n     * Returns the Advertisement client ID from the preferences\n     *\n     * @return an Ad affiliate ID\n     */\n    public String getAdClientId()\n    {\n        return this.xwiki.getAdClientId(getXWikiContext());\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL protected using Basic Authentication\n     *\n     * @param surl url to retrieve\n     * @param username username for the basic authentication\n     * @param password password for the basic authentication\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public String getURLContent(String surl, String username, String password) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return \"\";\n        }\n\n        try {\n            return this.xwiki.getURLContent(surl, username, password, this.context);\n        } catch (Exception e) {\n            LOGGER.warn(\"Failed to retrieve content from [\" + surl + \"]\", e);\n            return \"\";\n        }\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL\n     *\n     * @param surl url to retrieve\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public String getURLContent(String surl) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return \"\";\n        }\n\n        try {\n            return this.xwiki.getURLContent(surl, this.context);\n        } catch (Exception e) {\n            LOGGER.warn(\"Failed to retrieve content from [\" + surl + \"]\", e);\n            return \"\";\n        }\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL protected using Basic Authentication\n     *\n     * @param surl url to retrieve\n     * @param username username for the basic authentication\n     * @param password password for the basic authentication\n     * @param timeout manuel timeout in milliseconds\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public String getURLContent(String surl, String username, String password, int timeout) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return \"\";\n        }\n\n        try {\n            return this.xwiki.getURLContent(surl, username, password, timeout,\n                this.xwiki.getHttpUserAgent(this.context));\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL\n     *\n     * @param surl url to retrieve\n     * @param timeout manuel timeout in milliseconds\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public String getURLContent(String surl, int timeout) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return \"\";\n        }\n\n        try {\n            return this.xwiki.getURLContent(surl, timeout, this.xwiki.getHttpUserAgent(this.context));\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL protected using Basic Authentication as Bytes\n     *\n     * @param surl url to retrieve\n     * @param username username for the basic authentication\n     * @param password password for the basic authentication\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public byte[] getURLContentAsBytes(String surl, String username, String password) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return null;\n        }\n\n        try {\n            return this.xwiki.getURLContentAsBytes(surl, username, password, this.context);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the content of an HTTP/HTTPS URL as Bytes\n     *\n     * @param surl url to retrieve\n     * @return Content of the specified URL\n     * @throws IOException\n     */\n    @Programming\n    public byte[] getURLContentAsBytes(String surl) throws IOException\n    {\n        if (!hasProgrammingRights()) {\n            return null;\n        }\n\n        try {\n            return this.xwiki.getURLContentAsBytes(surl, this.context);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the list of Macros documents in the specified content\n     *\n     * @param defaultSpace Default space to use for relative path names\n     * @param content Content to parse\n     * @return ArrayList of document names\n     */\n    public List<String> getIncludedMacros(String defaultSpace, String content)\n    {\n        return this.xwiki.getIncludedMacros(defaultSpace, content, getXWikiContext());\n    }\n\n    /**\n     * returns true if xwiki.readonly is set in the configuration file\n     *\n     * @return the value of xwiki.isReadOnly()\n     * @see com.xpn.xwiki.XWiki\n     */\n    public boolean isReadOnly()\n    {\n        return this.xwiki.isReadOnly();\n    }\n\n    /**\n     * Privileged API to set/unset the readonly status of the Wiki After setting this to true no writing to the database\n     * will be performed All Edit buttons will be removed and save actions disabled This is used for maintenance\n     * purposes\n     *\n     * @param ro true to set read-only mode/false to unset\n     */\n    public void setReadOnly(boolean ro)\n    {\n        if (hasAdminRights()) {\n            this.xwiki.setReadOnly(ro);\n        }\n    }\n\n    /**\n     * Priviledge API to regenerate the links/backlinks table Normally links and backlinks are stored when a page is\n     * modified This function will regenerate all the backlinks This function can be long to run\n     *\n     * @throws XWikiException exception if the generation fails\n     */\n    public void refreshLinks() throws XWikiException\n    {\n        if (hasAdminRights()) {\n            this.xwiki.refreshLinks(getXWikiContext());\n        }\n    }\n\n    /**\n     * API to check if the backlinks feature is active Backlinks are activated in xwiki.cfg or in the XWiki Preferences\n     *\n     * @return true if the backlinks feature is active\n     * @throws XWikiException exception if the preference could not be retrieved\n     */\n    public boolean hasBacklinks() throws XWikiException\n    {\n        return this.xwiki.hasBacklinks(getXWikiContext());\n    }\n\n    /**\n     * API to check if the tags feature is active. Tags are activated in xwiki.cfg or in the XWiki Preferences\n     *\n     * @return true if the tags feature is active, false otherwise\n     * @throws XWikiException exception if the preference could not be retrieved\n     */\n    public boolean hasTags() throws XWikiException\n    {\n        return this.xwiki.hasTags(getXWikiContext());\n    }\n\n    /**\n     * API to check if the edit comment feature is active Edit comments are activated in xwiki.cfg or in the XWiki\n     * Preferences\n     *\n     * @return\n     */\n    public boolean hasEditComment()\n    {\n        return this.xwiki.hasEditComment(this.context);\n    }\n\n    /**\n     * API to check if the edit comment field is shown in the edit form Edit comments are activated in xwiki.cfg or in\n     * the XWiki Preferences\n     *\n     * @return\n     */\n    public boolean isEditCommentFieldHidden()\n    {\n        return this.xwiki.isEditCommentFieldHidden(this.context);\n    }\n\n    /**\n     * API to check if the edit comment is suggested (prompted once by Javascript if empty) Edit comments are activated\n     * in xwiki.cfg or in the XWiki Preferences\n     *\n     * @return\n     */\n    public boolean isEditCommentSuggested()\n    {\n        return this.xwiki.isEditCommentSuggested(this.context);\n    }\n\n    /**\n     * API to check if the edit comment is mandatory (prompted by Javascript if empty) Edit comments are activated in\n     * xwiki.cfg or in the XWiki Preferences\n     *\n     * @return\n     */\n    public boolean isEditCommentMandatory()\n    {\n        return this.xwiki.isEditCommentMandatory(this.context);\n    }\n\n    /**\n     * API to check if the minor edit feature is active minor edit is activated in xwiki.cfg or in the XWiki Preferences\n     */\n    public boolean hasMinorEdit()\n    {\n        return this.xwiki.hasMinorEdit(this.context);\n    }\n\n    /**\n     * API to check if the recycle bin feature is active recycle bin is activated in xwiki.cfg or in the XWiki\n     * Preferences\n     */\n    public boolean hasRecycleBin()\n    {\n        return this.xwiki.hasRecycleBin(this.context);\n    }\n\n    /**\n     * Retrieves the current editor preference for the request The preference is first looked up in the user preference\n     * and then in the space and wiki preference\n     *\n     * @return \"wysiwyg\" or \"text\"\n     */\n    public String getEditorPreference()\n    {\n        return this.xwiki.getEditorPreference(getXWikiContext());\n    }\n\n    /**\n     * Privileged API to retrieve an object instantiated from groovy code in a String. Note that Groovy scripts\n     * compilation is cached.\n     *\n     * @param script the Groovy class definition string (public class MyClass { ... })\n     * @return An object instantiating this class\n     * @throws XWikiException\n     */\n    public java.lang.Object parseGroovyFromString(String script) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.xwiki.parseGroovyFromString(script, getXWikiContext());\n        }\n        return \"groovy_missingrights\";\n    }\n\n    /**\n     * Privileged API to retrieve an object instantiated from groovy code in a String, using a classloader including all\n     * JAR files located in the passed page as attachments. Note that Groovy scripts compilation is cached\n     *\n     * @param script the Groovy class definition string (public class MyClass { ... })\n     * @return An object instantiating this class\n     * @throws XWikiException\n     */\n    public java.lang.Object parseGroovyFromPage(String script, String jarWikiPage) throws XWikiException\n    {\n        XWikiDocument doc = this.xwiki.getDocument(script, getXWikiContext());\n        if (this.xwiki.getRightService().hasProgrammingRights(doc, getXWikiContext())) {\n            return this.xwiki.parseGroovyFromString(doc.getContent(), jarWikiPage, getXWikiContext());\n        }\n        return \"groovy_missingrights\";\n    }\n\n    /**\n     * Privileged API to retrieve an object instanciated from groovy code in a String Groovy scripts compilation is\n     * cached\n     *\n     * @param fullname // script containing a Groovy class definition (public class MyClass { ... })\n     * @return An object instanciating this class\n     * @throws XWikiException\n     */\n    public java.lang.Object parseGroovyFromPage(String fullname) throws XWikiException\n    {\n        XWikiDocument doc = this.xwiki.getDocument(fullname, getXWikiContext());\n        if (this.xwiki.getRightService().hasProgrammingRights(doc, getXWikiContext())) {\n            return this.xwiki.parseGroovyFromString(doc.getContent(), getXWikiContext());\n        }\n        return \"groovy_missingrights\";\n    }\n\n    /**\n     * API to get the macro list from the XWiki Preferences The macro list are the macros available from the Macro\n     * Mapping System\n     *\n     * @return String with each macro on each line\n     */\n    public String getMacroList()\n    {\n        return this.xwiki.getMacroList(getXWikiContext());\n    }\n\n    /**\n     * API to check if using which toolbars in Wysiwyg editor\n     *\n     * @return a string value\n     */\n    public String getWysiwygToolbars()\n    {\n        return this.xwiki.getWysiwygToolbars(getXWikiContext());\n    }\n\n    /**\n     * API to create an object from the request The parameters are the ones that are created from\n     * doc.display(\"field\",\"edit\") calls\n     *\n     * @param className XWiki Class Name to create the object from\n     * @return a BaseObject wrapped in an Object\n     * @throws XWikiException exception if the object could not be read\n     */\n    public com.xpn.xwiki.api.Object getObjectFromRequest(String className) throws XWikiException\n    {\n        return new com.xpn.xwiki.api.Object(this.xwiki.getObjectFromRequest(className, getXWikiContext()),\n            getXWikiContext());\n    }\n\n    /**\n     * API to create an empty document\n     *\n     * @return an XWikiDocument wrapped in a Document\n     */\n    public Document createDocument()\n    {\n        return new XWikiDocument().newDocument(getXWikiContext());\n    }\n\n    /**\n     * API to convert the username depending on the configuration The username can be converted from email to a valid\n     * XWiki page name hidding the email address The username can be then used to login and link to the right user page\n     *\n     * @param username username to use for login\n     * @return converted wiki page name for this username\n     */\n    public String convertUsername(String username)\n    {\n        return this.xwiki.convertUsername(username, getXWikiContext());\n    }\n\n    /**\n     * API to get the Property object from a class based on a property path A property path looks like\n     * XWiki.ArticleClass_fieldname\n     *\n     * @param propPath Property path\n     * @return a PropertyClass object from a BaseClass object\n     */\n    public com.xpn.xwiki.api.PropertyClass getPropertyClassFromName(String propPath)\n    {\n        return new PropertyClass(this.xwiki.getPropertyClassFromName(propPath, getXWikiContext()), getXWikiContext());\n    }\n\n    /**\n     * Generates a unique document name based on initial page name and already existing pages.\n     * <p>\n     * Since 14.9, if the document exist check fail an exception is thrown.\n     *\n     * @param space the space where to add the document\n     * @return a unique document name\n     * @throws XWikiException when failing to check document existence\n     */\n    public String getUniquePageName(String space) throws XWikiException\n    {\n        return this.xwiki.getUniquePageName(space, getXWikiContext());\n    }\n\n    /**\n     * Generates a unique document name based on initial page name and already existing pages\n     * <p>\n     * Since 14.9, if the document exist check fail an exception is thrown.\n     *\n     * @param space the space where to add the document\n     * @param name the prefix of the document name\n     * @return a unique document name\n     * @throws XWikiException when failing to check document existence\n     */\n    public String getUniquePageName(String space, String name) throws XWikiException\n    {\n        return this.xwiki.getUniquePageName(space, name, getXWikiContext());\n    }\n\n    /**\n     * Inserts a tooltip using toolTip.js\n     *\n     * @param html HTML viewed\n     * @param message HTML Tooltip message\n     * @param params Parameters in Javascropt added to the tooltip config\n     * @return HTML with working tooltip\n     */\n    public String addTooltip(String html, String message, String params)\n    {\n        return this.xwiki.addTooltip(html, message, params, getXWikiContext());\n    }\n\n    /**\n     * Inserts a tooltip using toolTip.js\n     *\n     * @param html HTML viewed\n     * @param message HTML Tooltip message\n     * @return HTML with working tooltip\n     */\n    public String addTooltip(String html, String message)\n    {\n        return this.xwiki.addTooltip(html, message, getXWikiContext());\n    }\n\n    /**\n     * Inserts the tooltip Javascript\n     *\n     * @return\n     */\n    public String addTooltipJS()\n    {\n        return this.xwiki.addTooltipJS(getXWikiContext());\n    }\n\n    /*\n     * Inserts a Mandatory asterix\n     */\n    public String addMandatory()\n    {\n        return this.xwiki.addMandatory(getXWikiContext());\n    }\n\n    /**\n     * Get the XWiki Class object defined in the passed Document name.\n     * <p>\n     * Note: This method doesn't require any rights for accessing the passed Document (as opposed to the\n     * {@link com.xpn.xwiki.api.Document#getClass()} method which does require to get a Document object first. This is\n     * thus useful in cases where the calling code doesn't have the access right to the specified Document. It is safe\n     * because there are no sensitive data stored in a Class definition.\n     * </p>\n     *\n     * @param documentName the name of the document for which to get the Class object. For example\n     *            \"XWiki.XWikiPreferences\"\n     * @return the XWiki Class object defined in the passed Document name. If the passed Document name points to a\n     *         Document with no Class defined then an empty Class object is returned (i.e. a Class object with no\n     *         properties).\n     * @throws XWikiException if the passed document name doesn't point to a valid Document\n     */\n    public Class getClass(String documentName) throws XWikiException\n    {\n        // TODO: The implementation should be done in com.xpn.xwiki.XWiki as this class should\n        // delegate all implementations to that Class.\n        DocumentReference docReference = getCurrentMixedDocumentReferenceResolver().resolve(documentName);\n        return getClass(docReference);\n    }\n\n    /**\n     * Get the XWiki Class object defined in the passed Document name.\n     * <p>\n     * Note: This method doesn't require any rights for accessing the passed Document (as opposed to the\n     * {@link com.xpn.xwiki.api.Document#getClass()} method which does require to get a Document object first. This is\n     * thus useful in cases where the calling code doesn't have the access right to the specified Document. It is safe\n     * because there are no sensitive data stored in a Class definition.\n     * </p>\n     *\n     * @param docReference the reference of the document for which to get the Class object.\n     * @return the XWiki Class object defined in the passed Document reference. If the passed Document name points to a\n     *         Document with no Class defined then an empty Class object is returned (i.e. a Class object with no\n     *         properties).\n     * @throws XWikiException if the reference doesn't exist.\n     * @since 10.11.10\n     * @since 11.8RC1\n     * @since 11.3.4\n     */\n    public Class getClass(EntityReference docReference) throws XWikiException\n    {\n        return new Class(this.xwiki.getDocument(docReference, this.context).getXClass(), this.context);\n    }\n\n    /**\n     * Provides an absolute counter\n     *\n     * @param name Counter name\n     * @return String\n     */\n    public String getCounter(String name)\n    {\n        XWikiEngineContext econtext = this.context.getEngineContext();\n        Integer counter = (Integer) econtext.getAttribute(name);\n        if (counter == null) {\n            counter = 0;\n        }\n        counter = counter.intValue() + 1;\n        econtext.setAttribute(name, counter);\n\n        return counter.toString();\n    }\n\n    /**\n     * Check authentication from request and set according persitent login information If it fails user is unlogged\n     *\n     * @return null if failed, non null XWikiUser if sucess\n     * @throws XWikiException\n     */\n    public XWikiUser checkAuth() throws XWikiException\n    {\n        return this.context.getWiki().checkAuth(this.context);\n    }\n\n    /**\n     * Check authentication from username and password and set according persitent login information If it fails user is\n     * unlogged\n     *\n     * @param username username to check\n     * @param password password to check\n     * @param rememberme \"1\" if you want to remember the login accross navigator restart\n     * @return null if failed, non null XWikiUser if sucess\n     * @throws XWikiException\n     */\n    public XWikiUser checkAuth(String username, String password, String rememberme) throws XWikiException\n    {\n        XWikiUser user =\n            this.context.getWiki().getAuthService().checkAuth(username, password, rememberme, this.context);\n        if (user.isDisabled(this.context)) {\n            this.context.put(XWikiContext.INACTIVE_USER_REFERENCE, user.getUserReference());\n            user = null;\n        }\n        return user;\n    }\n\n    /**\n     * Access statistics api\n     *\n     * @return a StatsService instance that can be used to retrieve different xwiki statistics\n     */\n    public StatsService getStatsService()\n    {\n        return this.statsService;\n    }\n\n    /**\n     * API to get the xwiki criteria service which allow to create various criteria : integer ranges, date periods, date\n     * intervals, etc.\n     *\n     * @return the xwiki criteria service\n     */\n    public CriteriaService getCriteriaService()\n    {\n        return this.criteriaService;\n    }\n\n    /**\n     * API to get the Servlet path for a given wiki. In mono wiki this is \"bin/\" or \"xwiki/\". In virtual mode and if\n     * {@code xwiki.virtual.usepath} is enabled in xwiki.cfg, it is \"wiki/wikiname/\".\n     *\n     * @param wikiName wiki for which to get the path\n     * @return The servlet path\n     */\n    public String getServletPath(String wikiName)\n    {\n        return this.xwiki.getServletPath(wikiName, this.context);\n    }\n\n    /**\n     * API to get the Servlet path for the current wiki. In mono wiki this is \"bin/\" or \"xwiki/\". In virtual mode and if\n     * {@code xwiki.virtual.usepath} is enabled in xwiki.cfg, it is \"wiki/wikiname/\".\n     *\n     * @return The servlet path\n     */\n    public String getServletPath()\n    {\n        return this.xwiki.getServletPath(this.context.getWikiId(), this.context);\n    }\n\n    /**\n     * API to get the webapp path for the current wiki. This usually is \"xwiki/\". It can be configured in xwiki.cfg with\n     * the config {@code xwiki.webapppath}.\n     *\n     * @return The servlet path\n     */\n    public String getWebAppPath()\n    {\n        return this.xwiki.getWebAppPath(this.context);\n    }\n\n    /**\n     * @return the syntax id of the syntax to use when creating new documents.\n     */\n    public String getDefaultDocumentSyntax()\n    {\n        return this.xwiki.getDefaultDocumentSyntax();\n    }\n\n    /**\n     * Find the corresponding available renderer syntax.\n     * <p>\n     * If <code>syntaxVersion</code> is null the last version of the available provided syntax type is returned.\n     *\n     * @param syntaxType the syntax type\n     * @param syntaxVersion the syntax version\n     * @return the available corresponding {@link Syntax}. Null if no available renderer can be found.\n     */\n    public Syntax getAvailableRendererSyntax(String syntaxType, String syntaxVersion)\n    {\n        Syntax syntax = null;\n\n        try {\n            List<PrintRendererFactory> factories =\n                Utils.getContextComponentManager().getInstanceList((Type) PrintRendererFactory.class);\n            for (PrintRendererFactory factory : factories) {\n                Syntax factorySyntax = factory.getSyntax();\n                if (syntaxVersion != null) {\n                    if (factorySyntax.getType().getId().equalsIgnoreCase(syntaxType)\n                        && factorySyntax.getVersion().equals(syntaxVersion)) {\n                        syntax = factorySyntax;\n                        break;\n                    }\n                } else {\n                    // TODO: improve version comparaison since it does not work when comparing 2.0 and 10.0 for example.\n                    // We\n                    // should have a Version which implements Comparable like we have SyntaxId in Syntax\n                    if (factorySyntax.getType().getId().equalsIgnoreCase(syntaxType)\n                        && (syntax == null || factorySyntax.getVersion().compareTo(syntax.getVersion()) > 0)) {\n                        syntax = factorySyntax;\n                    }\n                }\n            }\n        } catch (ComponentLookupException e) {\n            LOGGER.error(\"Failed to lookup available renderer syntaxes\", e);\n        }\n\n        return syntax;\n    }\n\n    /**\n     * @return true if section editing is enabled (can be configured through the {@code xwiki.section.edit}\n     *         configuration property. Defaults to 1 (=enabled) when not defined\n     */\n    public boolean hasSectionEdit()\n    {\n        return this.xwiki.hasSectionEdit(getXWikiContext());\n    }\n\n    /**\n     * @return the section depth for which section editing is available (can be configured through\n     *         {@code xwiki.section.depth} configuration property. Defaults to 2 when not defined\n     */\n    public long getSectionEditingDepth()\n    {\n        return this.xwiki.getSectionEditingDepth();\n    }\n\n    /**\n     * @return true if title handling should be using the compatibility mode or not. When the compatibility mode is\n     *         active, if the document's content first header (level 1 or level 2) matches the document's title the\n     *         first header is stripped.\n     */\n    public boolean isTitleInCompatibilityMode()\n    {\n        return this.xwiki.isTitleInCompatibilityMode();\n    }\n\n    /**\n     * Get the syntax of the content currently being executed.\n     * <p>\n     * The document currently being executed is not the same than the actual content syntax since the executed code\n     * might come from an included page or some macro that change the context syntax. The same logic used inside\n     * rendering macros is used (see {@link org.xwiki.rendering.macro.MacroContentParser}).\n     * <p>\n     * If the current document can't be found, the method assume that the executed document is the context document\n     * (it's generally the case when a document is directly rendered with\n     * {@link XWikiDocument#getRenderedContent(XWikiContext)} for example).\n     *\n     * @return the syntax identifier\n     */\n    public String getCurrentContentSyntaxId()\n    {\n        return this.xwiki.getCurrentContentSyntaxId(getXWikiContext());\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.RegisterExtension;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.xwiki.component.manager.ComponentLookupException;\nimport org.xwiki.component.util.DefaultParameterizedType;\nimport org.xwiki.model.document.DocumentAuthors;\nimport org.xwiki.model.internal.document.SafeDocumentAuthors;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.ObjectReference;\nimport org.xwiki.observation.ObservationManager;\nimport org.xwiki.security.authorization.AuthorizationException;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.LogLevel;\nimport org.xwiki.test.junit5.LogCaptureExtension;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.test.mockito.MockitoComponentManager;\nimport org.xwiki.user.CurrentUserReference;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.DocumentRevisionProvider;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.BaseProperty;\nimport com.xpn.xwiki.test.MockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\nimport com.xpn.xwiki.test.reference.ReferenceComponentList;\nimport com.xpn.xwiki.user.api.XWikiRightService;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.ArgumentMatchers.isNull;\nimport static org.mockito.ArgumentMatchers.same;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n@OldcoreTest\n@ReferenceComponentList\nclass DocumentTest\n{\n    @InjectMockitoOldcore\n    private MockitoOldcore oldcore;\n\n    @MockComponent\n    private UserReferenceResolver<CurrentUserReference> currentUserReferenceUserReferenceResolver;\n\n    @MockComponent\n    private ObservationManager observationManager;\n\n    @RegisterExtension\n    private LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.INFO);\n\n    @Test\n    void toStringReturnsFullName()\n    {\n        XWikiDocument doc = new XWikiDocument(new DocumentReference(\"Wiki\", \"Space\", \"Page\"));\n        assertEquals(\"Space.Page\", new Document(doc, new XWikiContext()).toString());\n        assertEquals(\"Main.WebHome\", new Document(new XWikiDocument(), new XWikiContext()).toString());\n    }\n\n    @Test\n    void getObjects() throws XWikiException\n    {\n        XWikiContext context = new XWikiContext();\n        XWikiDocument doc = new XWikiDocument(new DocumentReference(\"Wiki\", \"Space\", \"Page\"));\n\n        doc.getXClass().addNumberField(\"prop\", \"prop\", 5, \"long\");\n        BaseObject obj = (BaseObject) doc.getXClass().newObject(context);\n        obj.setLongValue(\"prop\", 1);\n        doc.addObject(doc.getFullName(), obj);\n\n        assertEquals(obj, doc.getObject(doc.getFullName(), \"prop\", \"1\"));\n        assertNull(doc.getObject(doc.getFullName(), \"prop\", \"2\"));\n\n        Document adoc = new Document(doc, context);\n        List<Object> lst = adoc.getObjects(adoc.getFullName(), \"prop\", \"1\");\n        assertEquals(1, lst.size());\n        assertEquals(obj, lst.get(0).getBaseObject());\n\n        lst = adoc.getObjects(adoc.getFullName(), \"prop\", \"0\");\n        assertEquals(0, lst.size());\n\n        lst = adoc.getObjects(adoc.getFullName());\n        assertEquals(1, lst.size());\n    }\n\n    @Test\n    void getObject()\n    {\n        XWikiContext context = new XWikiContext();\n        XWikiDocument doc = new XWikiDocument(new DocumentReference(\"Wiki\", \"Space\", \"Page\"));\n\n        doc.getXClass().addNumberField(\"prop\", \"prop\", 5, \"long\");\n\n        Document apiDocument = new Document(doc, context);\n        ObjectReference objectReference = new ObjectReference(\"Wiki.Space.Page[2]\", doc.getDocumentReference());\n        Object apiObject = apiDocument.getObject(objectReference, true);\n        apiObject.set(\"prop\", 20);\n\n        assertEquals(apiObject, apiDocument.getObject(\"Wiki.Space.Page\", 2));\n        assertEquals(2, apiObject.getNumber());\n    }\n\n    @Test\n    void removeObjectDoesntCauseDataLoss() throws XWikiException\n    {\n        // Setup comment class\n        XWikiDocument commentDocument = new XWikiDocument(new DocumentReference(\"wiki\", \"XWiki\", \"XWikiComments\"));\n        commentDocument.getXClass().addTextAreaField(\"comment\", \"comment\", 60, 20);\n        this.oldcore.getSpyXWiki().saveDocument(commentDocument, this.oldcore.getXWikiContext());\n\n        // Setup document\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"wiki\", \"Space\", \"Page\"));\n\n        for (int i = 0; i < 10; ++i) {\n            xdoc.newXObject(commentDocument.getDocumentReference(), this.oldcore.getXWikiContext());\n        }\n\n        Document adoc = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        for (Object obj : adoc.getObjects(\"XWiki.XWikiComments\")) {\n            obj.set(\"comment\", \"Comment\");\n            if (obj.getNumber() == 4) {\n                adoc.removeObject(obj);\n            }\n        }\n\n        // Let's make sure the original document wasn't changed\n        for (BaseObject obj : xdoc.getXObjects(commentDocument.getDocumentReference())) {\n            assertNull(obj.get(\"comment\"));\n        }\n\n        // Let's make sure the cloned document was changed everywhere\n        for (BaseObject obj : adoc.getDoc().getXObjects(commentDocument.getDocumentReference())) {\n            if (obj != null) {\n                assertEquals(\"Comment\", ((BaseProperty) obj.get(\"comment\")).getValue());\n            }\n        }\n    }\n\n    @Test\n    void saveAsAuthorUsesGuestIfDroppedPermissions() throws XWikiException\n    {\n        DocumentReference aliceReference = new DocumentReference(\"wiki\", \"XWiki\", \"Alice\");\n        DocumentReference bobReference = new DocumentReference(\"wiki\", \"XWiki\", \"Bob\");\n\n        XWikiDocument cdoc = new XWikiDocument(new DocumentReference(\"wiki\", \"Space\", \"Page\"));\n        XWikiDocument sdoc = new XWikiDocument(new DocumentReference(\"wiki\", \"Space\", \"AuthorPage\"));\n\n        when(this.oldcore.getMockAuthorizationManager().hasAccess(same(Right.EDIT), eq(aliceReference),\n            eq(cdoc.getDocumentReference()))).thenReturn(true);\n        when(this.oldcore.getMockAuthorizationManager().hasAccess(same(Right.EDIT), isNull(),\n            eq(cdoc.getDocumentReference()))).thenReturn(false);\n\n        this.oldcore.getXWikiContext().setDoc(cdoc);\n        this.oldcore.getXWikiContext().put(\"sdoc\", sdoc);\n\n        // Alice is the author.\n        sdoc.setAuthorReference(aliceReference);\n        sdoc.setContentAuthorReference(sdoc.getAuthorReference());\n\n        // Bob is the viewer\n        this.oldcore.getXWikiContext().setUserReference(bobReference);\n\n        Document doc = cdoc.newDocument(this.oldcore.getXWikiContext());\n\n        doc.saveAsAuthor();\n\n        this.oldcore.getXWikiContext().dropPermissions();\n\n        Throwable exception = assertThrows(XWikiException.class, () -> doc.saveAsAuthor());\n        assertTrue(\n            exception.getMessage()\n                .contains(\"Access denied; user null, acting through script in \"\n                    + \"document Space.Page cannot save document Space.Page\"),\n            \"Wrong error message when trying to save a document after calling dropPermissions()\");\n\n        assertEquals(bobReference, this.oldcore.getXWikiContext().getUserReference(),\n            \"After dropping permissions and attempting to save a document, \"\n                + \"the user was permanently switched to guest.\");\n    }\n\n    @Test\n    void user()\n    {\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"Wiki\", \"Space\", \"Page\"));\n        Document document = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        assertEquals(XWikiRightService.GUEST_USER_FULLNAME, document.getCreator());\n        assertEquals(XWikiRightService.GUEST_USER_FULLNAME, document.getAuthor());\n        assertEquals(XWikiRightService.GUEST_USER_FULLNAME, document.getContentAuthor());\n    }\n\n    @Test\n    void changeAuthorWhenModifyingDocumentContent()\n    {\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"wiki0\", \"Space\", \"Page\"));\n        xdoc.setAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"));\n        xdoc.setContentAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"));\n        xdoc.setCreatorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"));\n\n        this.oldcore.getXWikiContext().setUserReference(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"));\n\n        Document document = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"),\n            document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n\n        document.setContent(\"new content\");\n\n        assertEquals(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"), document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n    }\n\n    @Test\n    void changeAuthorWhenModifyingObjectProperty() throws XWikiException\n    {\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"wiki0\", \"Space\", \"Page\"));\n        xdoc.setAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"));\n        xdoc.setContentAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"));\n        xdoc.setCreatorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"));\n\n        xdoc.getXClass().addTextField(\"key\", \"Key\", 30);\n        xdoc.newXObject(xdoc.getDocumentReference(), this.oldcore.getXWikiContext());\n\n        xdoc.setContentDirty(false);\n        this.oldcore.getSpyXWiki().saveDocument(xdoc, this.oldcore.getXWikiContext());\n\n        this.oldcore.getXWikiContext().setUserReference(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"));\n\n        Document document = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"),\n            document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n\n        Object obj = document.getObject(xdoc.getPrefixedFullName());\n        obj.set(\"key\", \"value\");\n\n        assertEquals(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"),\n            document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n    }\n\n    @Test\n    void changeAuthorWhenModifyingDocumentProperty() throws XWikiException\n    {\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"wiki0\", \"Space\", \"Page\"));\n        xdoc.setAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"));\n        xdoc.setContentAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"));\n        xdoc.setCreatorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"));\n\n        xdoc.getXClass().addTextField(\"key\", \"Key\", 30);\n        xdoc.newXObject(xdoc.getDocumentReference(), this.oldcore.getXWikiContext());\n\n        xdoc.setContentDirty(false);\n        this.oldcore.getSpyXWiki().saveDocument(xdoc, this.oldcore.getXWikiContext());\n\n        this.oldcore.getXWikiContext().setUserReference(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"));\n\n        Document document = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"),\n            document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n\n        document.set(\"key\", \"value\");\n\n        assertEquals(new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\"), document.getAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"),\n            document.getContentAuthorReference());\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"), document.getCreatorReference());\n    }\n\n    @Test\n    void saveAsAuthorWhenNoPR(MockitoComponentManager componentManager) throws XWikiException, ComponentLookupException\n    {\n        XWikiDocument xdoc = new XWikiDocument(new DocumentReference(\"wiki0\", \"Space\", \"Page\"));\n        xdoc.setAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"));\n        xdoc.setContentAuthorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcontentauthor\"));\n        xdoc.setCreatorReference(new DocumentReference(\"wiki1\", \"XWiki\", \"initialcreator\"));\n\n        xdoc.setContentDirty(false);\n        this.oldcore.getSpyXWiki().saveDocument(xdoc, this.oldcore.getXWikiContext());\n\n        UserReferenceResolver<DocumentReference> userReferenceResolver = componentManager.getInstance(\n            new DefaultParameterizedType(null, UserReferenceResolver.class, DocumentReference.class), \"document\");\n\n        // Set context user\n        DocumentReference contextUser = new DocumentReference(\"wiki2\", \"XWiki\", \"contextuser\");\n        this.oldcore.getXWikiContext().setUserReference(contextUser);\n        UserReference userContextReference = userReferenceResolver.resolve(contextUser);\n        // Set context author\n        XWikiDocument contextDocument = new XWikiDocument(\"wiki1\", \"XWiki\", \"authordocument\");\n        DocumentReference authorReference = new DocumentReference(\"wiki3\", \"XWiki\", \"contextauthor\");\n        UserReference userAuthorReference = userReferenceResolver.resolve(authorReference);\n        contextDocument.setContentAuthorReference(authorReference);\n        this.oldcore.getSpyXWiki().saveDocument(xdoc, this.oldcore.getXWikiContext());\n        this.oldcore.getXWikiContext().setDoc(contextDocument);\n\n        when(this.oldcore.getMockAuthorizationManager().hasAccess(Right.EDIT, authorReference,\n            xdoc.getDocumentReference())).thenReturn(true);\n        when(this.oldcore.getMockRightService().hasProgrammingRights(this.oldcore.getXWikiContext())).thenReturn(false);\n\n        Document document = xdoc.newDocument(this.oldcore.getXWikiContext());\n\n        assertEquals(new DocumentReference(\"wiki1\", \"XWiki\", \"initialauthor\"), document.getAuthorReference());\n\n        when(this.oldcore.getMockRightService().hasAccessLevel(\"edit\", this.oldcore.getXWikiContext().getUser(),\n            document.getPrefixedFullName(), this.oldcore.getXWikiContext())).thenReturn(false);\n\n        assertThrows(XWikiException.class, () -> document.save());\n\n        when(this.oldcore.getMockRightService().hasAccessLevel(\"edit\", this.oldcore.getXWikiContext().getUser(),\n            document.getPrefixedFullName(), this.oldcore.getXWikiContext())).thenReturn(true);\n\n        when(this.currentUserReferenceUserReferenceResolver.resolve(CurrentUserReference.INSTANCE))\n            .thenReturn(userContextReference)\n            .thenReturn(userContextReference)\n            .thenReturn(userAuthorReference)\n            .thenReturn(userContextReference);\n        document.save();\n\n        assertEquals(userContextReference, document.getAuthors().getOriginalMetadataAuthor());\n        assertEquals(userAuthorReference, document.getAuthors().getEffectiveMetadataAuthor());\n\n        when(this.oldcore.getMockRightService().hasProgrammingRights(this.oldcore.getXWikiContext())).thenReturn(true);\n\n        document.save();\n\n        assertEquals(userContextReference, document.getAuthors().getEffectiveMetadataAuthor());\n    }\n\n    @Test\n    void getAuthors()\n    {\n        DocumentAuthors documentAuthors = mock(DocumentAuthors.class);\n        AuthorizationManager mockAuthorizationManager = this.oldcore.getMockAuthorizationManager();\n        XWikiContext context = this.oldcore.getXWikiContext();\n        DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"Foo\");\n        context.setUserReference(userReference);\n        DocumentReference currentDocReference = mock(DocumentReference.class, \"currentDocRef\");\n        XWikiDocument currentDoc = mock(XWikiDocument.class);\n        when(currentDoc.getAuthors()).thenReturn(documentAuthors);\n        Document document = new Document(currentDoc, context);\n\n        when(currentDoc.getDocumentReference()).thenReturn(currentDocReference);\n\n        when(mockAuthorizationManager.hasAccess(Right.PROGRAM, userReference, currentDocReference)).thenReturn(false);\n        DocumentAuthors obtainedAuthors = document.getAuthors();\n        assertTrue(obtainedAuthors instanceof SafeDocumentAuthors);\n        assertEquals(new SafeDocumentAuthors(documentAuthors), obtainedAuthors);\n\n        verify(mockAuthorizationManager).hasAccess(Right.PROGRAM, userReference, currentDocReference);\n\n        when(mockAuthorizationManager.hasAccess(Right.PROGRAM, userReference, currentDocReference)).thenReturn(true);\n        when(currentDoc.clone()).thenReturn(currentDoc);\n        obtainedAuthors = document.getAuthors();\n        assertSame(documentAuthors, obtainedAuthors);\n        verify(mockAuthorizationManager, times(2)).hasAccess(Right.PROGRAM, userReference, currentDocReference);\n        verify(currentDoc).clone();\n    }\n\n    @ParameterizedTest\n    @ValueSource(booleans = { false, true })\n    void getDocumentRevision(boolean allowAccess, MockitoComponentManager componentManager) throws Exception\n    {\n        DocumentReference documentReference = new DocumentReference(\"Wiki\", \"Space\", \"Page\");\n        XWikiDocument xWikiDocument = new XWikiDocument(documentReference);\n        Document document = new Document(xWikiDocument, this.oldcore.getXWikiContext());\n        DocumentRevisionProvider revisionProvider =\n            componentManager.registerMockComponent(DocumentRevisionProvider.class);\n        String revision = \"42.1\";\n        XWikiDocument revisionDocument = mock(XWikiDocument.class);\n        when(revisionProvider.getRevision(xWikiDocument, revision)).thenReturn(revisionDocument);\n        String deniedMessage = \"Denied\";\n        if (!allowAccess) {\n            doThrow(new AuthorizationException(deniedMessage)).when(revisionProvider)\n                .checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, documentReference, revision);\n            assertNull(document.getDocumentRevision(revision));\n            assertEquals(1, this.logCapture.size());\n            assertEquals(String.format(\"Access denied for loading revision [%s] of document [%s()]: \"\n                    + \"[AuthorizationException: %s]\", revision,\n                documentReference, deniedMessage), this.logCapture.getMessage(0));\n        } else {\n            assertEquals(new Document(revisionDocument, this.oldcore.getXWikiContext()),\n                document.getDocumentRevision(revision));\n        }\n        verify(revisionProvider).checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, documentReference, revision);\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.util.Calendar;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.observation.ObservationManager;\nimport org.xwiki.rendering.renderer.PrintRendererFactory;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.security.authorization.AuthorizationException;\nimport org.xwiki.security.authorization.ContextualAuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.test.mockito.MockitoComponentManager;\nimport org.xwiki.user.CurrentUserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.DocumentRevisionProvider;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.doc.XWikiDocumentArchive;\nimport com.xpn.xwiki.test.MockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\nimport com.xpn.xwiki.test.reference.ReferenceComponentList;\nimport com.xpn.xwiki.user.api.XWikiRightService;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n/**\n * Unit tests for {@link com.xpn.xwiki.api.XWiki}.\n * \n * @version $Id$\n */\n@OldcoreTest\n@ReferenceComponentList\npublic class XWikiTest\n{\n    private static final DocumentReference DOCUMENT_REFERENCE = new DocumentReference(\"xwiki\", \"MilkyWay\", \"Fidis\");\n\n    @MockComponent\n    private UserReferenceResolver<CurrentUserReference> currentUserReferenceUserReferenceResolver;\n\n    @MockComponent\n    private ObservationManager observationManager;\n\n    private Document apiDocument;\n    private XWiki apiXWiki;\n\n    @BeforeEach\n    public void setup(MockitoOldcore mockitoOldcore) throws XWikiException\n    {\n        XWikiContext xWikiContext = mockitoOldcore.getXWikiContext();\n        this.apiXWiki = new XWiki(mockitoOldcore.getSpyXWiki(), xWikiContext);\n        XWikiRightService mockRightService = mockitoOldcore.getMockRightService();\n        when(mockRightService.hasProgrammingRights(any(), any())).thenReturn(true);\n        when(mockRightService.hasProgrammingRights(any())).thenReturn(true);\n        when(mockRightService.hasAccessLevel(any(), any(), any(), any())).thenReturn(true);\n        when(mockitoOldcore.getMockVersioningStore().getXWikiDocumentArchive(any(), any()))\n            .thenReturn(new XWikiDocumentArchive());\n\n        xWikiContext.setUser(\"Redtail\");\n        this.apiDocument = new Document(new XWikiDocument(DOCUMENT_REFERENCE), xWikiContext);\n        this.apiDocument.getDocument().setCreator(\"c\" + xWikiContext.getUser());\n        this.apiDocument.getDocument().setAuthor(\"a\" + xWikiContext.getUser());\n        this.apiDocument.save();\n        xWikiContext.setUser(\"Earth\");\n    }\n\n    @Test\n    public void authorIsntChangedAfterDocumentCopy() throws XWikiException\n    {\n        String copyName = \"Lyre\";\n        this.apiXWiki.copyDocument(\"MilkyWay.Fidis\", copyName);\n        Document copy = this.apiXWiki.getDocument(copyName);\n\n        assertEquals(\"XWiki.Earth\", copy.getAuthor());\n    }\n\n    @Test\n    public void creatorIsntChangedAfterDocumentCopy() throws XWikiException\n    {\n        String copyName = \"Sirius\";\n        this.apiXWiki.copyDocument(\"MilkyWay.Fidis\", copyName);\n        Document copy = this.apiXWiki.getDocument(copyName);\n\n        assertEquals(\"XWiki.Earth\", copy.getCreator());\n    }\n\n    @Test\n    public void creationDateAfterDocumentCopy() throws XWikiException\n    {\n        String copyName = this.apiDocument.getDocumentReference().getName() + \"Copy\";\n        long startTime = (Calendar.getInstance().getTimeInMillis() / 1000) * 1000;\n        this.apiXWiki.copyDocument(\"MilkyWay.Fidis\", copyName);\n        long endTime = (Calendar.getInstance().getTimeInMillis() / 1000) * 1000;\n        long copyCreationTime = this.apiXWiki.getDocument(copyName).getCreationDate().getTime();\n\n        assertTrue(startTime <= copyCreationTime && copyCreationTime <= endTime);\n    }\n\n    @Test\n    public void getAvailableRendererSyntax(MockitoComponentManager componentManager) throws Exception\n    {\n        PrintRendererFactory factory1 = componentManager.registerMockComponent(PrintRendererFactory.class,\n            Syntax.PLAIN_1_0.toIdString());\n        PrintRendererFactory factory2 = componentManager.registerMockComponent(PrintRendererFactory.class,\n            Syntax.ANNOTATED_XHTML_1_0.toIdString());\n        when(factory1.getSyntax()).thenReturn(Syntax.PLAIN_1_0);\n        when(factory2.getSyntax()).thenReturn(Syntax.ANNOTATED_XHTML_1_0);\n\n        assertEquals(Syntax.PLAIN_1_0, this.apiXWiki.getAvailableRendererSyntax(\"plain\", \"1.0\"));\n        assertEquals(Syntax.PLAIN_1_0, this.apiXWiki.getAvailableRendererSyntax(\"Plain\", \"1.0\"));\n        assertEquals(Syntax.PLAIN_1_0, this.apiXWiki.getAvailableRendererSyntax(\"plain\", null));\n        assertNull(this.apiXWiki.getAvailableRendererSyntax(\"plai\", \"1.0\"));\n        assertNull(this.apiXWiki.getAvailableRendererSyntax(\"plai\", null));\n    }\n\n    @ParameterizedTest\n    @ValueSource(booleans = { false, true })\n    void getDocumentRevision(boolean allowAccess, MockitoOldcore mockitoOldcore) throws Exception\n    {\n        DocumentRevisionProvider revisionProvider =\n            mockitoOldcore.getMocker().registerMockComponent(DocumentRevisionProvider.class);\n        ContextualAuthorizationManager contextualAuthorizationManager =\n            mockitoOldcore.getMockContextualAuthorizationManager();\n\n        XWikiDocument deletedDocument = new XWikiDocument(DOCUMENT_REFERENCE);\n        deletedDocument.setContent(\"Deleted\");\n        String revision = \"deleted:1\";\n        when(revisionProvider.getRevision(DOCUMENT_REFERENCE, revision)).thenReturn(deletedDocument);\n\n        when(contextualAuthorizationManager.hasAccess(Right.VIEW, DOCUMENT_REFERENCE)).thenReturn(true);\n\n        if (!allowAccess) {\n            doThrow(new AuthorizationException(\"Denied\")).when(revisionProvider)\n                .checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, DOCUMENT_REFERENCE, revision);\n            assertNull(this.apiXWiki.getDocument(DOCUMENT_REFERENCE, revision));\n        } else {\n            assertEquals(new Document(deletedDocument, mockitoOldcore.getXWikiContext()),\n                this.apiXWiki.getDocument(DOCUMENT_REFERENCE, revision));\n        }\n\n        verify(revisionProvider, times(allowAccess ? 1 : 0)).getRevision(DOCUMENT_REFERENCE, revision);\n        verify(revisionProvider).checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, DOCUMENT_REFERENCE, revision);\n        verify(contextualAuthorizationManager).hasAccess(Right.VIEW, DOCUMENT_REFERENCE);\n    }\n}\n"], "filenames": ["xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/api/Document.java", "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/api/XWiki.java", "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/api/DocumentTest.java", "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/api/XWikiTest.java"], "buggy_code_start_loc": [33, 48, 24, 25], "buggy_code_end_loc": [3182, 666, 392, 136], "fixing_code_start_loc": [34, 49, 25, 26], "fixing_code_end_loc": [3190, 674, 432, 177], "type": "CWE-668", "message": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Starting in version 9.4-rc-1 and prior to versions 14.10.8 and 15.3-rc-1, when a document has been deleted and re-created, it is possible for users with view right on the re-created document but not on the deleted document to view the contents of the deleted document. Such a situation might arise when rights were added to the deleted document. This can be exploited through the diff feature and, partially, through the REST API by using versions such as `deleted:1` (where the number counts the deletions in the wiki and is thus guessable). Given sufficient rights, the attacker can also re-create the deleted document, thus extending the scope to any deleted document as long as the attacker has edit right in the location of the deleted document. This vulnerability has been patched in XWiki 14.10.8 and 15.3 RC1 by properly checking rights when deleted revisions of a document are accessed. The only workaround is to regularly clean deleted documents to minimize the potential exposure. Extra care should be taken when deleting sensitive documents that are protected individually (and not, e.g., by being placed in a protected space) or deleting a protected space as a whole.", "other": {"cve": {"id": "CVE-2023-37911", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-25T18:17:28.543", "lastModified": "2023-10-31T19:27:21.837", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Starting in version 9.4-rc-1 and prior to versions 14.10.8 and 15.3-rc-1, when a document has been deleted and re-created, it is possible for users with view right on the re-created document but not on the deleted document to view the contents of the deleted document. Such a situation might arise when rights were added to the deleted document. This can be exploited through the diff feature and, partially, through the REST API by using versions such as `deleted:1` (where the number counts the deletions in the wiki and is thus guessable). Given sufficient rights, the attacker can also re-create the deleted document, thus extending the scope to any deleted document as long as the attacker has edit right in the location of the deleted document. This vulnerability has been patched in XWiki 14.10.8 and 15.3 RC1 by properly checking rights when deleted revisions of a document are accessed. The only workaround is to regularly clean deleted documents to minimize the potential exposure. Extra care should be taken when deleting sensitive documents that are protected individually (and not, e.g., by being placed in a protected space) or deleting a protected space as a whole."}, {"lang": "es", "value": "XWiki Platform es una plataforma wiki gen\u00e9rica que ofrece servicios de ejecuci\u00f3n para aplicaciones creadas sobre ella. A partir de la versi\u00f3n 9.4-rc-1 y anteriores a las versiones 14.10.8 y 15.3-rc-1, cuando un documento se elimina y se vuelve a crear, es posible que los usuarios con derecho de visualizaci\u00f3n en el documento recreado pero no en el documento eliminado para ver el contenido del documento eliminado. Esta situaci\u00f3n podr\u00eda surgir cuando se agregaron derechos al documento eliminado. Esto se puede explotar a trav\u00e9s de la funci\u00f3n de diferenciaci\u00f3n y, parcialmente, a trav\u00e9s de la API REST mediante el uso de versiones como `deleted:1` (donde el n\u00famero cuenta las eliminaciones en la wiki y, por lo tanto, se puede adivinar). Con derechos suficientes, el atacante tambi\u00e9n puede volver a crear el documento eliminado, ampliando as\u00ed el alcance a cualquier documento eliminado siempre que el atacante tenga derecho de edici\u00f3n en la ubicaci\u00f3n del documento eliminado. Esta vulnerabilidad se ha solucionado en XWiki 14.10.8 y 15.3 RC1 comprobando correctamente los derechos cuando se accede a revisiones eliminadas de un documento. El \u00fanico workaround es limpiar peri\u00f3dicamente los documentos eliminados para minimizar la posible exposici\u00f3n. Se debe tener especial cuidado al eliminar documentos confidenciales que est\u00e1n protegidos individualmente (y no, por ejemplo, al colocarlos en un espacio protegido) o al eliminar un espacio protegido en su totalidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-668"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-668"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartExcluding": "9.4", "versionEndIncluding": "14.10.8", "matchCriteriaId": "844721AD-EC25-43A4-A9DB-8F49C1E5A26E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:9.4:rc1:*:*:*:*:*:*", "matchCriteriaId": "97C0D882-3716-4E76-9E45-35AAD3F36C28"}]}]}], "references": [{"url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/Index%20Application#HPermanentlydeleteallpages", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/xwiki/xwiki-platform/commit/f471f2a392aeeb9e51d59fdfe1d76fccf532523f", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-gh64-qxh5-4m33", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20684", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20685", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20817", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/f471f2a392aeeb9e51d59fdfe1d76fccf532523f"}}