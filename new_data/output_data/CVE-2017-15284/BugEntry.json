{"buggy_code": ["<?php namespace October\\Rain\\Filesystem;\n\nuse Config;\nuse Exception;\n\n/**\n * File definitions helper.\n * Contains file extensions for common use cases.\n *\n * @package october\\filesystem\n * @author Alexey Bobkov, Samuel Georges\n */\nclass Definitions\n{\n\n    /**\n     * Entry point to request a definition set.\n     * @param $type string\n     * @return array\n     */\n    public static function get($type)\n    {\n        return (new self)->getDefinitions($type);\n    }\n\n    /**\n     * Returns a definition set from config or from the default sets.\n     * @param $type string\n     * @return array\n     */\n    public function getDefinitions($type)\n    {\n        if (!method_exists($this, $type)) {\n            throw new Exception(sprintf('No such definition set exists for \"%s\"', $type));\n        }\n\n        return (array) Config::get('cms.fileDefinitions.'.$type, $this->$type());\n    }\n\n    /**\n     * Determines if a path should be ignored, sourced from the ignoreFiles \n     * and ignorePatterns definitions.\n     * @todo Efficiency of this method can be improved.\n     * @param string $path Specifies a path to check.\n     * @return boolean Returns TRUE if the path is visible.\n     */\n    public static function isPathIgnored($path)\n    {\n        $ignoreNames = self::get('ignoreFiles');\n        $ignorePatterns = self::get('ignorePatterns');\n\n        if (in_array($path, $ignoreNames)) {\n            return true;\n        }\n\n        foreach ($ignorePatterns as $pattern) {\n            if (preg_match('/'.$pattern.'/', $path)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Files that can be safely ignored.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.ignoreFiles\n     */\n    protected function ignoreFiles()\n    {\n        return [\n            '.svn',\n            '.git',\n            '.DS_Store',\n            '.AppleDouble'\n        ];\n    }\n\n    /**\n     * File patterns that can be safely ignored.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.ignorePatterns\n     */\n    protected function ignorePatterns()\n    {\n        return [\n            '^\\..*'\n        ];\n    }\n\n    /**\n     * Extensions that are particularly benign.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.defaultExtensions\n     */\n    protected function defaultExtensions()\n    {\n        return [\n            'jpg',\n            'jpeg',\n            'bmp',\n            'png',\n            'webp',\n            'gif',\n            'svg',\n            'js',\n            'map',\n            'ico',\n            'css',\n            'less',\n            'scss',\n            'ics',\n            'doc',\n            'docx',\n            'pdf',\n            'swf',\n            'txt',\n            'xml',\n            'xls',\n            'xlsx',\n            'eot',\n            'woff',\n            'woff2',\n            'ttf',\n            'flv',\n            'wmv',\n            'mp3',\n            'ogg',\n            'wav',\n            'avi',\n            'mov',\n            'mp4',\n            'mpeg',\n            'webm',\n            'mkv',\n            'rar',\n            'zip'\n        ];\n    }\n\n    /**\n     * Extensions seen as public assets.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.assetExtensions\n     */\n    protected function assetExtensions()\n    {\n        return [\n            'jpg',\n            'jpeg',\n            'bmp',\n            'png',\n            'webp',\n            'gif',\n            'ico',\n            'css',\n            'js',\n            'woff',\n            'woff2',\n            'svg',\n            'ttf',\n            'eot',\n            'json',\n            'md',\n            'less',\n            'sass',\n            'scss'\n        ];\n    }\n\n    /**\n     * Extensions typically used as images.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.imageExtensions\n     */\n    protected function imageExtensions()\n    {\n        return [\n            'jpg',\n            'jpeg',\n            'bmp',\n            'png',\n            'webp',\n            'gif',\n            'svg'\n        ];\n    }\n\n    /**\n     * Extensions typically used as video files.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.videoExtensions\n     */\n    protected function videoExtensions()\n    {\n        return [\n            'mp4',\n            'avi',\n            'mov',\n            'mpg',\n            'mpeg',\n            'mkv',\n            'webm'\n        ];\n    }\n\n    /**\n     * Extensions typically used as audio files.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.audioExtensions\n     */\n    protected function audioExtensions()\n    {\n        return [\n            'mp3',\n            'wav',\n            'wma',\n            'm4a',\n            'ogg'\n        ];\n    }\n}\n"], "fixing_code": ["<?php namespace October\\Rain\\Filesystem;\n\nuse Config;\nuse Exception;\n\n/**\n * File definitions helper.\n * Contains file extensions for common use cases.\n *\n * @package october\\filesystem\n * @author Alexey Bobkov, Samuel Georges\n */\nclass Definitions\n{\n\n    /**\n     * Entry point to request a definition set.\n     * @param $type string\n     * @return array\n     */\n    public static function get($type)\n    {\n        return (new self)->getDefinitions($type);\n    }\n\n    /**\n     * Returns a definition set from config or from the default sets.\n     * @param $type string\n     * @return array\n     */\n    public function getDefinitions($type)\n    {\n        if (!method_exists($this, $type)) {\n            throw new Exception(sprintf('No such definition set exists for \"%s\"', $type));\n        }\n\n        return (array) Config::get('cms.fileDefinitions.'.$type, $this->$type());\n    }\n\n    /**\n     * Determines if a path should be ignored, sourced from the ignoreFiles \n     * and ignorePatterns definitions.\n     * @todo Efficiency of this method can be improved.\n     * @param string $path Specifies a path to check.\n     * @return boolean Returns TRUE if the path is visible.\n     */\n    public static function isPathIgnored($path)\n    {\n        $ignoreNames = self::get('ignoreFiles');\n        $ignorePatterns = self::get('ignorePatterns');\n\n        if (in_array($path, $ignoreNames)) {\n            return true;\n        }\n\n        foreach ($ignorePatterns as $pattern) {\n            if (preg_match('/'.$pattern.'/', $path)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Files that can be safely ignored.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.ignoreFiles\n     */\n    protected function ignoreFiles()\n    {\n        return [\n            '.svn',\n            '.git',\n            '.DS_Store',\n            '.AppleDouble'\n        ];\n    }\n\n    /**\n     * File patterns that can be safely ignored.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.ignorePatterns\n     */\n    protected function ignorePatterns()\n    {\n        return [\n            '^\\..*'\n        ];\n    }\n\n    /**\n     * Extensions that are particularly benign.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.defaultExtensions\n     */\n    protected function defaultExtensions()\n    {\n        return [\n            'jpg',\n            'jpeg',\n            'bmp',\n            'png',\n            'webp',\n            'gif',\n            'svg',\n            'js',\n            'map',\n            'ico',\n            'css',\n            'less',\n            'scss',\n            'ics',\n            'doc',\n            'docx',\n            'pdf',\n            'swf',\n            'txt',\n            'xml',\n            'xls',\n            'xlsx',\n            'eot',\n            'woff',\n            'woff2',\n            'ttf',\n            'flv',\n            'wmv',\n            'mp3',\n            'ogg',\n            'wav',\n            'avi',\n            'mov',\n            'mp4',\n            'mpeg',\n            'webm',\n            'mkv',\n            'rar',\n            'zip'\n        ];\n    }\n\n    /**\n     * Extensions seen as public assets.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.assetExtensions\n     */\n    protected function assetExtensions()\n    {\n        return [\n            'jpg',\n            'jpeg',\n            'bmp',\n            'png',\n            'webp',\n            'gif',\n            'ico',\n            'css',\n            'js',\n            'woff',\n            'woff2',\n            'svg',\n            'ttf',\n            'eot',\n            'json',\n            'md',\n            'less',\n            'sass',\n            'scss'\n        ];\n    }\n\n    /**\n     * Extensions typically used as images.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.imageExtensions\n     */\n    protected function imageExtensions()\n    {\n        return [\n            'jpg',\n            'jpeg',\n            'bmp',\n            'png',\n            'webp',\n            'gif'\n        ];\n    }\n\n    /**\n     * Extensions typically used as video files.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.videoExtensions\n     */\n    protected function videoExtensions()\n    {\n        return [\n            'mp4',\n            'avi',\n            'mov',\n            'mpg',\n            'mpeg',\n            'mkv',\n            'webm'\n        ];\n    }\n\n    /**\n     * Extensions typically used as audio files.\n     * This list can be customized with config:\n     * - cms.fileDefinitions.audioExtensions\n     */\n    protected function audioExtensions()\n    {\n        return [\n            'mp3',\n            'wav',\n            'wma',\n            'm4a',\n            'ogg'\n        ];\n    }\n}\n"], "filenames": ["src/Filesystem/Definitions.php"], "buggy_code_start_loc": [185], "buggy_code_end_loc": [187], "fixing_code_start_loc": [185], "fixing_code_end_loc": [186], "type": "CWE-79", "message": "Cross-Site Scripting exists in OctoberCMS 1.0.425 (aka Build 425), allowing a least privileged user to upload an SVG file containing malicious code as the Avatar for the profile. When this is opened by the Admin, it causes JavaScript execution in the context of the Admin account.", "other": {"cve": {"id": "CVE-2017-15284", "sourceIdentifier": "cve@mitre.org", "published": "2017-10-12T08:29:00.570", "lastModified": "2020-08-03T12:15:45.563", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Scripting exists in OctoberCMS 1.0.425 (aka Build 425), allowing a least privileged user to upload an SVG file containing malicious code as the Avatar for the profile. When this is opened by the Admin, it causes JavaScript execution in the context of the Admin account."}, {"lang": "es", "value": "Existe Cross-Site Scripting (XSS) en OctoberCMS 1.0.425 (tambi\u00e9n conocido como Build 425), permitiendo que un usuario con los privilegios m\u00e1s bajos suba un archivo SVG que contenga c\u00f3digo malicioso como el Avatar para el perfil. Cuando el Admin lo abre, provoca que se ejecute c\u00f3digo JavaScript en el contexto de la cuenta Admin."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:octobercms:october:1.0.425:*:*:*:*:*:*:*", "matchCriteriaId": "826F823D-1B29-490D-9C02-3D26A45C1BEE"}]}]}], "references": [{"url": "https://github.com/octobercms/library/commit/3bbbbf3da469f457881b5af902eb0b89b95189a2", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://packetstormsecurity.com/files/144587/OctoberCMS-1.0.425-Cross-Site-Scripting.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://www.exploit-db.com/exploits/42978/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/octobercms/library/commit/3bbbbf3da469f457881b5af902eb0b89b95189a2"}}