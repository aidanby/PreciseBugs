{"buggy_code": ["<?php\n\n/**\n * @file controllers/grid/settings/category/CategoryCategoryGridHandler.inc.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class CategoryCategoryGridHandler\n * @ingroup controllers_grid_settings_category\n *\n * @brief Handle operations for category management operations.\n */\n\n// Import the base GridHandler.\nimport('lib.pkp.classes.controllers.grid.CategoryGridHandler');\nimport('lib.pkp.classes.controllers.grid.DataObjectGridCellProvider');\n\n// Import user group grid specific classes\nimport('lib.pkp.controllers.grid.settings.category.CategoryGridCategoryRow');\n\n// Link action & modal classes\nimport('lib.pkp.classes.linkAction.request.AjaxModal');\n\nclass CategoryCategoryGridHandler extends CategoryGridHandler {\n\tvar $_contextId;\n\n\t/**\n\t * Constructor\n\t */\n\tfunction __construct() {\n\t\tparent::__construct();\n\t\t$this->addRoleAssignment(\n\t\t\tarray(ROLE_ID_MANAGER, ROLE_ID_SITE_ADMIN),\n\t\t\tarray(\n\t\t\t\t'fetchGrid',\n\t\t\t\t'fetchCategory',\n\t\t\t\t'fetchRow',\n\t\t\t\t'addCategory',\n\t\t\t\t'editCategory',\n\t\t\t\t'updateCategory',\n\t\t\t\t'deleteCategory',\n\t\t\t\t'uploadImage',\n\t\t\t\t'saveSequence',\n\t\t\t)\n\t\t);\n\t}\n\n\t//\n\t// Overridden methods from PKPHandler.\n\t//\n\t/**\n\t * @copydoc PKPHandler::authorize()\n\t */\n\tfunction authorize($request, &$args, $roleAssignments) {\n\t\timport('lib.pkp.classes.security.authorization.ContextAccessPolicy');\n\t\t$this->addPolicy(new ContextAccessPolicy($request, $roleAssignments));\n\t\treturn parent::authorize($request, $args, $roleAssignments);\n\t}\n\n\n\t/**\n\t * @copydoc CategoryGridHandler::initialize()\n\t */\n\tfunction initialize($request, $args = null) {\n\n\t\tparent::initialize($request, $args);\n\n\t\t$context = $request->getContext();\n\t\t$this->_contextId = $context->getId();\n\n\t\tAppLocale::requireComponents(LOCALE_COMPONENT_PKP_MANAGER, LOCALE_COMPONENT_PKP_SUBMISSION);\n\n\t\t// Set the grid title.\n\t\t$this->setTitle('grid.category.categories');\n\n\t\t// Add grid-level actions.\n\t\t$router = $request->getRouter();\n\t\t$this->addAction(\n\t\t\tnew LinkAction(\n\t\t\t\t'addCategory',\n\t\t\t\tnew AjaxModal(\n\t\t\t\t\t$router->url($request, null, null, 'addCategory'),\n\t\t\t\t\t__('grid.category.add'),\n\t\t\t\t\t'modal_manage'\n\t\t\t\t),\n\t\t\t\t__('grid.category.add'),\n\t\t\t\t'add_category'\n\t\t\t)\n\t\t);\n\n\t\t// Add grid columns.\n\t\t$cellProvider = new DataObjectGridCellProvider();\n\t\t$cellProvider->setLocale(AppLocale::getLocale());\n\n\t\t$this->addColumn(\n\t\t\tnew GridColumn(\n\t\t\t\t'title',\n\t\t\t\t'grid.category.name',\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\t$cellProvider\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @copydoc GridHandler::loadData\n\t */\n\tfunction loadData($request, $filter) {\n\t\t// For top-level rows, only list categories without parents.\n\t\t$categoryDao = DAORegistry::getDAO('CategoryDAO'); /* @var $categoryDao CategoryDAO */\n\t\t$categoriesIterator = $categoryDao->getByParentId(null, $this->_getContextId());\n\t\treturn $categoriesIterator->toAssociativeArray();\n\t}\n\n\t/**\n\t * @copydoc GridHandler::initFeatures()\n\t */\n\tfunction initFeatures($request, $args) {\n\t\timport('lib.pkp.classes.controllers.grid.feature.OrderCategoryGridItemsFeature');\n\t\treturn array_merge(\n\t\t\tparent::initFeatures($request, $args),\n\t\t\tarray(new OrderCategoryGridItemsFeature(ORDER_CATEGORY_GRID_CATEGORIES_AND_ROWS, true, $this))\n\t\t);\n\t}\n\n\t/**\n\t * @copydoc CategoryGridHandler::getDataElementInCategorySequence()\n\t */\n\tfunction getDataElementInCategorySequence($categoryId, &$category) {\n\t\treturn $category->getSequence();\n\t}\n\n\t/**\n\t * @copydoc CategoryGridHandler::setDataElementInCategorySequence()\n\t */\n\tfunction setDataElementInCategorySequence($parentCategoryId, &$category, $newSequence) {\n\t\t$category->setSequence($newSequence);\n\t\t$categoryDao = DAORegistry::getDAO('CategoryDAO'); /* @var $categoryDao CategoryDAO */\n\t\t$categoryDao->updateObject($category);\n\t}\n\n\t/**\n\t * @copydoc GridHandler::getDataElementSequence()\n\t */\n\tfunction getDataElementSequence($gridDataElement) {\n\t\treturn $gridDataElement->getSequence();\n\t}\n\n\t/**\n\t * @copydoc GridHandler::setDataElementSequence()\n\t */\n\tfunction setDataElementSequence($request, $categoryId, $category, $newSequence) {\n\t\t$category->setSequence($newSequence);\n\t\t$categoryDao = DAORegistry::getDAO('CategoryDAO'); /* @var $categoryDao CategoryDAO */\n\t\t$categoryDao->updateObject($category);\n\t}\n\n\t/**\n\t * @copydoc CategoryGridHandler::getCategoryRowIdParameterName()\n\t */\n\tfunction getCategoryRowIdParameterName() {\n\t\treturn 'parentCategoryId';\n\t}\n\n\t/**\n\t * @copydoc GridHandler::getRowInstance()\n\t */\n\tfunction getRowInstance() {\n\t\timport('lib.pkp.controllers.grid.settings.category.CategoryGridRow');\n\t\treturn new CategoryGridRow();\n\t}\n\n\t/**\n\t * @copydoc CategoryGridHandler::getCategoryRowInstance()\n\t */\n\tfunction getCategoryRowInstance() {\n\t\treturn new CategoryGridCategoryRow();\n\t}\n\n\t/**\n\t * @copydoc CategoryGridHandler::loadCategoryData()\n\t */\n\tfunction loadCategoryData($request, &$category, $filter = null) {\n\t\t$categoryId = $category->getId();\n\t\t$categoryDao = DAORegistry::getDAO('CategoryDAO'); /* @var $categoryDao CategoryDAO */\n\t\t$categoriesIterator = $categoryDao->getByParentId($categoryId, $this->_getContextId());\n\t\treturn $categoriesIterator->toAssociativeArray();\n\t}\n\n\t/**\n\t * Handle the add category operation.\n\t * @param $args array\n\t * @param $request PKPRequest\n\t */\n\tfunction addCategory($args, $request) {\n\t\treturn $this->editCategory($args, $request);\n\t}\n\n\t/**\n\t * Handle the edit category operation.\n\t * @param $args array\n\t * @param $request PKPRequest\n\t * @return JSONMessage JSON object\n\t */\n\tfunction editCategory($args, $request) {\n\t\t$categoryForm = $this->_getCategoryForm($request);\n\n\t\t$categoryForm->initData();\n\n\t\treturn new JSONMessage(true, $categoryForm->fetch($request));\n\t}\n\n\t/**\n\t * Update category data in database and grid.\n\t * @param $args array\n\t * @param $request PKPRequest\n\t * @return JSONMessage JSON object\n\t */\n\tfunction updateCategory($args, $request) {\n\t\t$categoryForm = $this->_getCategoryForm($request);\n\n\t\t$categoryForm->readInputData();\n\t\tif($categoryForm->validate()) {\n\t\t\t$categoryForm->execute();\n\t\t\treturn DAO::getDataChangedEvent();\n\t\t} else {\n\t\t\treturn new JSONMessage(true, $categoryForm->fetch($request));\n\t\t}\n\t}\n\n\t/**\n\t * Delete a category\n\t * @param $args array\n\t * @param $request PKPRequest\n\t * @return JSONMessage JSON object\n\t */\n\tfunction deleteCategory($args, $request) {\n\t\t// Identify the category to be deleted\n\t\t$categoryDao = DAORegistry::getDAO('CategoryDAO'); /* @var $categoryDao CategoryDAO */\n\t\t$context = $request->getContext();\n\t\t$category = $categoryDao->getById(\n\t\t\t$request->getUserVar('categoryId'),\n\t\t\t$context->getId()\n\t\t);\n\n\t\t// FIXME delete dependent objects?\n\n\t\t// Delete the category\n\t\t$categoryDao->deleteObject($category);\n\t\treturn DAO::getDataChangedEvent();\n\t}\n\n\t/**\n\t * Handle file uploads for cover/image art for things like Series and Categories.\n\t * @param $request PKPRequest\n\t * @param $args array\n\t * @return JSONMessage JSON object\n\t */\n\tfunction uploadImage($args, $request) {\n\t\t$user = $request->getUser();\n\n\t\timport('lib.pkp.classes.file.TemporaryFileManager');\n\t\t$temporaryFileManager = new TemporaryFileManager();\n\t\t$temporaryFile = $temporaryFileManager->handleUpload('uploadedFile', $user->getId());\n\t\tif ($temporaryFile) {\n\t\t\t$json = new JSONMessage(true);\n\t\t\t$json->setAdditionalAttributes(array(\n\t\t\t\t\t'temporaryFileId' => $temporaryFile->getId()\n\t\t\t));\n\t\t\treturn $json;\n\t\t} else {\n\t\t\treturn new JSONMessage(false, __('common.uploadFailed'));\n\t\t}\n\t}\n\n\t//\n\t// Private helper methods.\n\t//\n\t/**\n\t * Get a CategoryForm instance.\n\t * @param $request Request\n\t * @return UserGroupForm\n\t */\n\tfunction _getCategoryForm($request) {\n\t\t// Get the category ID.\n\t\t$categoryId = (int) $request->getUserVar('categoryId');\n\n\t\t// Instantiate the files form.\n\t\timport('lib.pkp.controllers.grid.settings.category.form.CategoryForm');\n\t\t$contextId = $this->_getContextId();\n\t\treturn new CategoryForm($contextId, $categoryId);\n\t}\n\n\t/**\n\t * Get context id.\n\t * @return int\n\t */\n\tfunction _getContextId() {\n\t\treturn $this->_contextId;\n\t}\n}\n\n\n"], "fixing_code": ["<?php\n\n/**\n * @file controllers/grid/settings/category/CategoryCategoryGridHandler.inc.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class CategoryCategoryGridHandler\n * @ingroup controllers_grid_settings_category\n *\n * @brief Handle operations for category management operations.\n */\n\n// Import the base GridHandler.\nimport('lib.pkp.classes.controllers.grid.CategoryGridHandler');\nimport('lib.pkp.classes.controllers.grid.DataObjectGridCellProvider');\n\n// Import user group grid specific classes\nimport('lib.pkp.controllers.grid.settings.category.CategoryGridCategoryRow');\n\n// Link action & modal classes\nimport('lib.pkp.classes.linkAction.request.AjaxModal');\n\nclass CategoryCategoryGridHandler extends CategoryGridHandler {\n\tvar $_contextId;\n\n\t/**\n\t * Constructor\n\t */\n\tfunction __construct() {\n\t\tparent::__construct();\n\t\t$this->addRoleAssignment(\n\t\t\tarray(ROLE_ID_MANAGER, ROLE_ID_SITE_ADMIN),\n\t\t\tarray(\n\t\t\t\t'fetchGrid',\n\t\t\t\t'fetchCategory',\n\t\t\t\t'fetchRow',\n\t\t\t\t'addCategory',\n\t\t\t\t'editCategory',\n\t\t\t\t'updateCategory',\n\t\t\t\t'deleteCategory',\n\t\t\t\t'uploadImage',\n\t\t\t\t'saveSequence',\n\t\t\t)\n\t\t);\n\t}\n\n\t//\n\t// Overridden methods from PKPHandler.\n\t//\n\t/**\n\t * @copydoc PKPHandler::authorize()\n\t */\n\tfunction authorize($request, &$args, $roleAssignments) {\n\t\timport('lib.pkp.classes.security.authorization.ContextAccessPolicy');\n\t\t$this->addPolicy(new ContextAccessPolicy($request, $roleAssignments));\n\t\treturn parent::authorize($request, $args, $roleAssignments);\n\t}\n\n\n\t/**\n\t * @copydoc CategoryGridHandler::initialize()\n\t */\n\tfunction initialize($request, $args = null) {\n\n\t\tparent::initialize($request, $args);\n\n\t\t$context = $request->getContext();\n\t\t$this->_contextId = $context->getId();\n\n\t\tAppLocale::requireComponents(LOCALE_COMPONENT_PKP_MANAGER, LOCALE_COMPONENT_PKP_SUBMISSION);\n\n\t\t// Set the grid title.\n\t\t$this->setTitle('grid.category.categories');\n\n\t\t// Add grid-level actions.\n\t\t$router = $request->getRouter();\n\t\t$this->addAction(\n\t\t\tnew LinkAction(\n\t\t\t\t'addCategory',\n\t\t\t\tnew AjaxModal(\n\t\t\t\t\t$router->url($request, null, null, 'addCategory'),\n\t\t\t\t\t__('grid.category.add'),\n\t\t\t\t\t'modal_manage'\n\t\t\t\t),\n\t\t\t\t__('grid.category.add'),\n\t\t\t\t'add_category'\n\t\t\t)\n\t\t);\n\n\t\t// Add grid columns.\n\t\t$cellProvider = new DataObjectGridCellProvider();\n\t\t$cellProvider->setLocale(AppLocale::getLocale());\n\n\t\t$this->addColumn(\n\t\t\tnew GridColumn(\n\t\t\t\t'title',\n\t\t\t\t'grid.category.name',\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\t$cellProvider\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @copydoc GridHandler::loadData\n\t */\n\tfunction loadData($request, $filter) {\n\t\t// For top-level rows, only list categories without parents.\n\t\t$categoryDao = DAORegistry::getDAO('CategoryDAO'); /* @var $categoryDao CategoryDAO */\n\t\t$categoriesIterator = $categoryDao->getByParentId(null, $this->_getContextId());\n\t\treturn $categoriesIterator->toAssociativeArray();\n\t}\n\n\t/**\n\t * @copydoc GridHandler::initFeatures()\n\t */\n\tfunction initFeatures($request, $args) {\n\t\timport('lib.pkp.classes.controllers.grid.feature.OrderCategoryGridItemsFeature');\n\t\treturn array_merge(\n\t\t\tparent::initFeatures($request, $args),\n\t\t\tarray(new OrderCategoryGridItemsFeature(ORDER_CATEGORY_GRID_CATEGORIES_AND_ROWS, true, $this))\n\t\t);\n\t}\n\n\t/**\n\t * @copydoc CategoryGridHandler::getDataElementInCategorySequence()\n\t */\n\tfunction getDataElementInCategorySequence($categoryId, &$category) {\n\t\treturn $category->getSequence();\n\t}\n\n\t/**\n\t * @copydoc CategoryGridHandler::setDataElementInCategorySequence()\n\t */\n\tfunction setDataElementInCategorySequence($parentCategoryId, &$category, $newSequence) {\n\t\t$category->setSequence($newSequence);\n\t\t$categoryDao = DAORegistry::getDAO('CategoryDAO'); /* @var $categoryDao CategoryDAO */\n\t\t$categoryDao->updateObject($category);\n\t}\n\n\t/**\n\t * @copydoc GridHandler::getDataElementSequence()\n\t */\n\tfunction getDataElementSequence($gridDataElement) {\n\t\treturn $gridDataElement->getSequence();\n\t}\n\n\t/**\n\t * @copydoc GridHandler::setDataElementSequence()\n\t */\n\tfunction setDataElementSequence($request, $categoryId, $category, $newSequence) {\n\t\t$category->setSequence($newSequence);\n\t\t$categoryDao = DAORegistry::getDAO('CategoryDAO'); /* @var $categoryDao CategoryDAO */\n\t\t$categoryDao->updateObject($category);\n\t}\n\n\t/**\n\t * @copydoc CategoryGridHandler::getCategoryRowIdParameterName()\n\t */\n\tfunction getCategoryRowIdParameterName() {\n\t\treturn 'parentCategoryId';\n\t}\n\n\t/**\n\t * @copydoc GridHandler::getRowInstance()\n\t */\n\tfunction getRowInstance() {\n\t\timport('lib.pkp.controllers.grid.settings.category.CategoryGridRow');\n\t\treturn new CategoryGridRow();\n\t}\n\n\t/**\n\t * @copydoc CategoryGridHandler::getCategoryRowInstance()\n\t */\n\tfunction getCategoryRowInstance() {\n\t\treturn new CategoryGridCategoryRow();\n\t}\n\n\t/**\n\t * @copydoc CategoryGridHandler::loadCategoryData()\n\t */\n\tfunction loadCategoryData($request, &$category, $filter = null) {\n\t\t$categoryId = $category->getId();\n\t\t$categoryDao = DAORegistry::getDAO('CategoryDAO'); /* @var $categoryDao CategoryDAO */\n\t\t$categoriesIterator = $categoryDao->getByParentId($categoryId, $this->_getContextId());\n\t\treturn $categoriesIterator->toAssociativeArray();\n\t}\n\n\t/**\n\t * Handle the add category operation.\n\t * @param $args array\n\t * @param $request PKPRequest\n\t */\n\tfunction addCategory($args, $request) {\n\t\treturn $this->editCategory($args, $request);\n\t}\n\n\t/**\n\t * Handle the edit category operation.\n\t * @param $args array\n\t * @param $request PKPRequest\n\t * @return JSONMessage JSON object\n\t */\n\tfunction editCategory($args, $request) {\n\t\t$categoryForm = $this->_getCategoryForm($request);\n\n\t\t$categoryForm->initData();\n\n\t\treturn new JSONMessage(true, $categoryForm->fetch($request));\n\t}\n\n\t/**\n\t * Update category data in database and grid.\n\t * @param $args array\n\t * @param $request PKPRequest\n\t * @return JSONMessage JSON object\n\t */\n\tfunction updateCategory($args, $request) {\n\t\t$categoryForm = $this->_getCategoryForm($request);\n\n\t\t$categoryForm->readInputData();\n\t\tif($categoryForm->validate()) {\n\t\t\t$categoryForm->execute();\n\t\t\treturn DAO::getDataChangedEvent();\n\t\t} else {\n\t\t\treturn new JSONMessage(true, $categoryForm->fetch($request));\n\t\t}\n\t}\n\n\t/**\n\t * Delete a category\n\t * @param $args array\n\t * @param $request PKPRequest\n\t * @return JSONMessage JSON object\n\t */\n\tfunction deleteCategory($args, $request) {\n\t\tif (!$request->checkCSRF()) return new JSONMessage(false);\n\n\t\t// Identify the category to be deleted\n\t\t$categoryDao = DAORegistry::getDAO('CategoryDAO'); /* @var $categoryDao CategoryDAO */\n\t\t$context = $request->getContext();\n\t\t$category = $categoryDao->getById(\n\t\t\t$request->getUserVar('categoryId'),\n\t\t\t$context->getId()\n\t\t);\n\n\t\t// FIXME delete dependent objects?\n\n\t\t// Delete the category\n\t\t$categoryDao->deleteObject($category);\n\t\treturn DAO::getDataChangedEvent();\n\t}\n\n\t/**\n\t * Handle file uploads for cover/image art for things like Series and Categories.\n\t * @param $request PKPRequest\n\t * @param $args array\n\t * @return JSONMessage JSON object\n\t */\n\tfunction uploadImage($args, $request) {\n\t\t$user = $request->getUser();\n\n\t\timport('lib.pkp.classes.file.TemporaryFileManager');\n\t\t$temporaryFileManager = new TemporaryFileManager();\n\t\t$temporaryFile = $temporaryFileManager->handleUpload('uploadedFile', $user->getId());\n\t\tif ($temporaryFile) {\n\t\t\t$json = new JSONMessage(true);\n\t\t\t$json->setAdditionalAttributes(array(\n\t\t\t\t\t'temporaryFileId' => $temporaryFile->getId()\n\t\t\t));\n\t\t\treturn $json;\n\t\t} else {\n\t\t\treturn new JSONMessage(false, __('common.uploadFailed'));\n\t\t}\n\t}\n\n\t//\n\t// Private helper methods.\n\t//\n\t/**\n\t * Get a CategoryForm instance.\n\t * @param $request Request\n\t * @return UserGroupForm\n\t */\n\tfunction _getCategoryForm($request) {\n\t\t// Get the category ID.\n\t\t$categoryId = (int) $request->getUserVar('categoryId');\n\n\t\t// Instantiate the files form.\n\t\timport('lib.pkp.controllers.grid.settings.category.form.CategoryForm');\n\t\t$contextId = $this->_getContextId();\n\t\treturn new CategoryForm($contextId, $categoryId);\n\t}\n\n\t/**\n\t * Get context id.\n\t * @return int\n\t */\n\tfunction _getContextId() {\n\t\treturn $this->_contextId;\n\t}\n}\n\n\n"], "filenames": ["controllers/grid/settings/category/CategoryCategoryGridHandler.inc.php"], "buggy_code_start_loc": [240], "buggy_code_end_loc": [240], "fixing_code_start_loc": [241], "fixing_code_end_loc": [243], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository pkp/pkp-lib prior to 3.3.0-16.", "other": {"cve": {"id": "CVE-2023-5893", "sourceIdentifier": "security@huntr.dev", "published": "2023-11-01T01:15:07.687", "lastModified": "2023-11-08T23:48:59.917", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository pkp/pkp-lib prior to 3.3.0-16."}, {"lang": "es", "value": "Cross-Site Request Forgery (CSRF) en el repositorio de GitHub pkp/pkp-lib anterior a 3.3.0-16."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sfu:pkp_web_application_library:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.3.0-16", "matchCriteriaId": "60CE0E67-FCF5-4A26-A91E-514946B97D99"}]}]}], "references": [{"url": "https://github.com/pkp/pkp-lib/commit/992ca674e9fb705751b1cbf929a1856ebe29b30a", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/a965aa16-79ce-4185-8f58-3d3b0d74a71e", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pkp/pkp-lib/commit/992ca674e9fb705751b1cbf929a1856ebe29b30a"}}