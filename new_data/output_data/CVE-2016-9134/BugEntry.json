{"buggy_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expPaginator\n * Exponent Pagination Subsystem\n *\n * The expPaginator class is used to retrieve objects from the database\n * and paginate them and optionally group the by category.\n * It automagically handles the calls to other pages\n * and has built-in sorting using the defined column headers.\n *\n * Usage Example:\n *\n * <code>\n *\n * $page = new expPaginator(array(\n *      'model'=>'faq',\n *      'where'=>1,\n *      'limit'=>25,\n *      'order'=>'rank',\n *      'controller'=>$this->baseclassname,\n *      'action'=>$this->params['action'],\n *      'columns'=>array('In FAQ'=>'include_in_faq', 'Submitted'=>'created_at', 'Submitted By'=>'submitter_name'),\n *  ));\n * </code>\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\n\nclass expPaginator {\n    /**#@+\n     * @access public\n     * @var string\n     */\n\tpublic $model = null;\n    public $search_string = '';\n\tpublic $sql = '';\n    public $count_sql = '';\n\tpublic $where = '';\n\tpublic $controller = '';\n\tpublic $action = '';\n\tpublic $order = '';\n\tpublic $order_direction = '';\n\tpublic $firstpage = '';\n\tpublic $lastpage = '';\n\tpublic $previous_page = '';\n\tpublic $next_page = '';\n\tpublic $previous_shift = '';\n\tpublic $next_shift = '';\n\tpublic $pagelink = '';\n\tpublic $header_columns = '';\n\tpublic $default = '';\n\tpublic $view = null;\n    public $uncat ='';\n//    public $content_type = '';\n//    public $author = '';\n//    public $tag = '';\n//    public $tags = '';\n\t/**#@+\n     * @access public\n     * @var integer\n     */\n\tpublic $page  = 1;\n//\tpublic $limit = 10;\n    public $limit = 0;\n\tpublic $start = 0;\n\tpublic $last = 0;\n\tpublic $pages_to_show = 10;\n\tpublic $total_records = 0;\n\tpublic $total_pages = 0;\n\tpublic $page_offset = 0;\n    public $categorize = false;\n//    public $version = 0;\n//    public $content_id = 0;\n\t/**#@+\n     * @access public\n     * @var array\n     */\n\tpublic $pages = array();\n\tpublic $records = array();\n    public $cats = array();\n    public $sort_dropdown = array();\n\n\t/**\n\t * expPaginator Constructor\n\t *\n\t * This is the main entry point for using the expPaginator.  See example above.\n\t *\n\t * @param array $params Use this to set any of the class variables. Ones not passed will be set to a default.\n\t * @return \\expPaginator\n\t */\n\tpublic function __construct($params=array()) {\n\t\tglobal $router, $db;\n\n        $this->pages_to_show = expTheme::is_mobile() ? 6 : 10; // fewer paging links for small devices\n\t\t$this->where = empty($params['where']) ? null : $params['where'];\n\t\t$this->records = empty($params['records']) ? array() : $params['records'];\n//\t\t$this->limit = empty($params['limit']) ? 10 : $params['limit'];\n        $this->limit = empty($params['limit']) ? 0 : intval($params['limit']);\n        $this->page = empty($params['page']) ? 1 : intval($params['page']);\n\t\t$this->action = empty($params['action']) ? '' : $params['action'];\n\t\t$this->controller = empty($params['controller']) ? '' : $params['controller'];\n\t\t$this->sql = empty($params['sql']) ? '' : $params['sql'];\n        $this->count_sql = empty($params['count_sql']) ? '' : $params['count_sql'];\n        $this->order = empty($params['order']) ? 'id' : preg_replace('/[^a-z\\_]/i','',$params['order']);\n\t\t$this->dir = empty($params['dir']) || !in_array($params['dir'], array('ASC', 'DESC')) ? 'ASC' : $params['dir'];\n\t\t$this->src = empty($params['src']) ? null : expString::escape($params['src']);\n        $this->categorize = empty($params['categorize']) ? false : $params['categorize'];\n        $this->uncat = !empty($params['uncat']) ? $params['uncat'] : gt('Not Categorized');\n        $this->groups = !empty($params['groups']) ? $params['groups'] : array();\n        $this->grouplimit = !empty($params['grouplimit']) ? $params['grouplimit'] : null;\n        $this->dontsortwithincat = !empty($params['dontsortwithincat']) ? $params['dontsortwithincat'] : null;\n        $this->dontsort = !empty($params['dontsort']) ? $params['dontsort'] : null;\n\n\t\t// if a view was passed we'll use it.\n\t\tif (isset($params['view']))\n            $this->view = $params['view'];\n\n        // setup the model if one was passed.\n        if (isset($params['model'])) {\n            $this->model = $params['model'];\n            $class = new $this->model(null, false, false);\n        }\n\n\t    // auto-include the CSS for pagination links\n\t    expCSS::pushToHead(array(\n//\t\t    \"unique\"=>\"pagination\",\n//\t\t    \"link\"=>PATH_RELATIVE.\"framework/core/assets/css/pagination.css\",\n            'corecss'=>'pagination'\n\t\t    )\n\t\t);\n\n\t\tif ($this->limit)\n            $this->start = (($this->page * $this->limit) - $this->limit);\n        if ($this->start < 0)\n            $this->start = 0;\n\n\t\t//setup the columns\n        $this->columns = array();\n\t\tif (isset($params['columns'])) {\n\t\t    foreach($params['columns'] as $key=>$col){\n\t\t        $colparse[$key] = explode('|',$col);\n\t\t        $column = array($key=>$colparse[$key][0]);\n\t\t        $this->columns = array_merge($this->columns,$column);\n\t\t        if (!empty($colparse[$key][1])) {\n\t\t            $params = explode(',',$colparse[$key][1]);\n\t\t            foreach ($params as $paramval) {\n\t\t                $prm = explode('=',$paramval);\n\t\t                $this->linkables[$key][$prm[0]] = $prm[1];\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t}\n\n\t\t//setup the default ordering of records\n\t\t// if we are in an action, see if the action is for this controller/action..if so pull the order\n\t\t// and order direction from the request params...this is how the params are passed via the column\n\t\t// headers.\n\t\t$this->order_direction = $this->dir;\n\n        // allow passing of a single order/dir as stored in config\n        if (strstr($this->order,\" \")) {\n            $orderby = explode(\" \",$this->order);\n            $this->order = $orderby[0];\n            $this->order_direction = $orderby[1];\n        }\n        if(!preg_match('/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/', $this->order))\n            $this->order = 'id';\n        if (!in_array($this->order_direction, array('ASC', 'DESC')))\n            $this->order_direction = 'ASC';\n        if ($this->dontsort)\n            $sort = null;\n        else\n            $sort = $this->order.' '.$this->order_direction;\n\n\t\t// figure out how many records we're dealing with & grab the records\n\t\t//if (!empty($this->records)) { //from Merge <~~ this doesn't work. Could be empty, but still need to hit.\n        if (!empty($this->categorize))\n            $limit = null;\n        else\n            $limit = $this->limit;\n\n\t\tif (isset($params['records'])) { // if we pass $params['records'], we WANT to hit this\n\t\t    // sort the records that were passed in to us\n            if (!empty($sort))\n                usort($this->records,array('expPaginator', strtolower($this->order_direction)));\n//\t\t    $this->total_records = count($this->records);\n\t\t} elseif (!empty($class)) { //where clause     //FJD: was $this->class, but wasn't working...\n\t\t\t$this->total_records = $class->find('count', $this->where);\n            $this->records = $class->find('all', $this->where, $sort, $limit, $this->start);\n\t\t} elseif (!empty($this->where)) { //from Merge....where clause\n\t\t\t$this->total_records = $class->find('count', $this->where);\n            $this->records = $class->find('all', $this->where, $sort, $limit, $this->start);\n\t\t} else { //sql clause  //FIXME we don't get attachments in this approach\n\t\t\t//$records = $db->selectObjectsBySql($this->sql);\n\t\t\t//$this->total_records = count($records);\n            //this is MUCH faster if you supply a proper count_sql param using a COUNT() function; if not,\n            //we'll run the standard sql and do a queryRows with it\n\t\t\t//$this->total_records = $this->count_sql == '' ? $db->queryRows($this->sql) : $db->selectValueBySql($this->count_sql); //From Merge\n\n//\t\t\t$this->total_records =  $db->countObjectsBySql($this->count_sql); //$db->queryRows($this->sql); //From most current Trunk\n\n            if (!empty($sort)) $this->sql .= ' ORDER BY '.$sort;\n            if (!empty($this->count_sql)) $this->total_records = $db->countObjectsBySql($this->count_sql);\n\t\t\tif (!empty($this->limit)) $this->sql .= ' LIMIT '.$this->start.','.$this->limit;\n\n\t\t\t$this->records = array();\n\t\t\tif (isset($this->model) || isset($params['model_field'])) {\n\t\t\t    foreach($db->selectObjectsBySql($this->sql) as $record) {\n                    $type = $params['model_field'];\n\t\t\t        $classname = isset($params['model_field']) ? $record->$type : $this->model;\n\t\t\t        //$this->records[] = new $classname($record->id, true, true); //From current trunk // added false, true, as we shouldn't need associated items here, but do need attached. FJD.\n\t\t\t\t\t$this->records[] = new $classname($record->id, false, true); //From Merge //added false, true, as we shouldn't need associated items here, but do need attached. FJD.\n\t\t\t    }\n\t\t\t} else {\n\t\t\t    $this->records = $db->selectObjectsBySql($this->sql);\n\t\t\t}\n\t\t}\n\n        // next we'll sort them based on categories if needed\n        if (!empty($this->categorize) && $this->categorize && empty($this->dontsort))\n            expCatController::addCats($this->records,$sort,$this->uncat,$this->groups,$this->dontsortwithincat);\n\n        // let's see how many total records there are\n        if (empty($this->total_records))\n            $this->total_records = count($this->records);\n        if ($this->limit && $this->start >= $this->total_records)\n            $this->start = $this->total_records - $this->limit;\n\n        // at this point we generally have all our records, now we'll trim the records to the number requested\n        //FIXME we may want some more intelligent selection here based on cats/groups, e.g., don't break groups across pages, number of picture rows, etc...\n        if (empty($this->grouplimit) && ($this->limit) && count($this->records) > $this->limit)\n            $this->records = array_slice($this->records, $this->start, $this->limit);\n        // finally, we'll create another multi-dimensional array of categories populated with assoc items\n        if (empty($this->dontsort)) {\n            if (!empty($this->categorize) && $this->categorize) {\n                expCatController::sortedByCats($this->records,$this->cats,$this->groups,$this->grouplimit);\n            } elseif (empty($this->dontsortwithincat)) {  // categorized is off, so let's categorize by alpha instead for 'rolodex' type use\n                $order = $this->order;\n                if (in_array($order,array('created_at','edited_at','publish'))) {\n                    if ($this->total_records && (abs($this->records[0]->$order - $this->records[count($this->records)-1]->$order)  >= (60 * 60 * 24 *365 *2))) {\n                        $datetype = 'Y';  // more than 2 years of records, so break down by year\n                    } else {\n                        $datetype = 'M Y';  // less than 2 years of records, so break down by month/year\n                    }\n                    foreach ($this->records as $record) {\n                        if (is_numeric($record->$order)) {\n                            $title = date($datetype,$record->$order);\n                            $title = empty($title)?gt('Undated'):$title;\n                        } else {\n                            $title = gt('Undated');\n                        }\n                        if (empty($this->cats[$title])) {\n                            $this->cats[$title] = new stdClass();\n                            $this->cats[$title]->count = 1;\n                            $this->cats[$title]->name = $title;\n                        } else {\n                            $this->cats[$title]->count++;\n                        }\n                        $this->cats[$title]->records[] = $record;\n                    }\n                } else {\n                    foreach ($this->records as $record) {\n                        if (!empty($record->$order) && is_string($record->$order) && !is_numeric($record->$order)) {\n                            $title = ucfirst($record->$order);\n                            $title = empty($title[0])?'':$title[0];\n                        } else {\n                            $title = '';\n                        }\n                        if (empty($this->cats[$title])) {\n                            $this->cats[$title] = new stdClass();\n                            $this->cats[$title]->count = 1;\n                            $this->cats[$title]->name = $title;\n                        } else {\n                            $this->cats[$title]->count++;\n                        }\n                        $this->cats[$title]->records[] = $record;\n                    }\n                }\n            }\n            if (!empty($this->grouplimit)) {\n                if ($this->limit)\n                    $this->records = array_slice($this->records, $this->start, $this->limit);\n            } else {\n                if ($this->limit)\n                    $this->cats = array_slice($this->cats, $this->start, $this->limit);\n            }\n        }\n\n        if (isset($params['records']))\n            $this->runCallback(); // isset($params['records']) added to correct search for products.\n\n        //eDebug($this->records);\n\t\t// get the number of the last record we are showing...this is used in the page links.\n\t\t// i.e.  \"showing 10-19 of 57\"...$this->last would be the 19 in that string\n\t\tif ($this->total_records > 0) {\n\t\t\t$this->firstrecord = $this->start + 1;\n\t\t\t$this->lastrecord = ($this->total_records < $this->limit) ? ($this->start + $this->total_records) : ($this->start + $this->limit);\n\t\t\tif ($this->lastrecord > $this->total_records || $this->lastrecord == 0)\n                $this->lastrecord = $this->total_records;\n\t\t} else {\n\t\t\t$this->firstrecord = 0;\n\t\t\t$this->lastrecord = 0;\n\t\t}\n\n\t\t// get the page parameters from the router to build the links\n        $page_params = $router->params;\n//\t\t$page_params = $this->cleanParams($router->params);\n        foreach (array(\"__utma\", \"__utmz\", \"route_sanitized\") as $key) {\n            if (isset($page_params[$key]))\n                unset($page_params[$key]);\n        }\n        if (!empty($page_params['search_string']))\n            $page_params['search_string'] = urlencode($page_params['search_string']);\n\n\t\t//if (empty($page_params['module'])) $page_params['module'] = $this->controller;\n\t\t//if (empty($page_params['action'])) $page_params['action'] = $this->action;\n\t\t//if (empty($page_params['src']) && isset($params['src'])) $page_params['src'] = $params['src'];\n\t\tif (!empty($this->controller)) {\n\t\t    unset($page_params['module']);\n\t\t    $page_params['controller'] = expModules::getModuleName($this->controller);\n\t\t} else {\n            if (expTheme::inAction() && empty($params)) {\n                //FIXME: module/controller glue code\n    //\t\t    $mod = !empty($_REQUEST['controller']) ? expString::sanitize($_REQUEST['controller']) : expString::sanitize($_REQUEST['module']);\n    //\t\t    if ($this->controller == $mod && $this->action == $_REQUEST['action']) {\n    //\t\t\t    $this->order = isset($_REQUEST['order']) ? $_REQUEST['order'] : $this->order;\n    //\t\t\t    $this->order_direction = isset($_REQUEST['dir']) ? $_REQUEST['dir'] : $this->dir;\n    //\t\t\t}\n                $mod = !empty($router->params['controller']) ? $router->params['controller'] : $router->params['module'];\n                if ($this->controller == $mod && $this->action == $router->params['action']) {\n                    $this->order = isset($router->params['order']) ? $router->params['order'] : $this->order;\n                    $this->order_direction = isset($router->params['dir']) ? $router->params['dir'] : $this->dir;\n                    if(!preg_match('/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/', $this->order))\n                        $this->order = 'id';\n                    if (!in_array($this->order_direction, array('ASC', 'DESC')))\n                        $this->order_direction = 'ASC';\n                }\n            } else {\n                if (isset($params->controller)) {\n                    $mod = $params->controller;\n                } else {\n                    $mod = '';\n                }\n            }\n            $page_params['controller'] = $mod;  // we can't be passing an empty controller or module to the router\n        }\n\n\t\tif (!empty($this->action))\n            $page_params['action'] =  $this->action;\n\t\tif (!empty($this->src))\n            $page_params['src'] =  $this->src;\n\n\t\tif (isset($page_params['section']))\n            unset($page_params['section']);\n\n\t\t//build a 'more' link we can use in the headlines views.\n\t\t$this->morelink = $router->makeLink($page_params, false, false, true);\n\n\t\tif (!empty($this->view))\n            $page_params['view'] = $this->view;\n\n\t\t//build a couple more links we can use in the views.\n\t\t$this->pagelink = $router->makeLink($page_params, false, false, true);\n\n\t\t// if don't have enough records for more than one page then we're done.\n\t\t//if ($this->total_records <= $this->limit) return true;\n\n\t\t$this->total_pages = ($this->limit > 0) ? ceil($this->total_records/$this->limit) : 0;\n\n        // correct current page # to be within limits of number of pages\n\t\tif ($this->page > $this->total_pages) {\n\t\t\t$this->page = $this->total_pages;\n            //FIXME return 404 error for infinite page scroll plugin\n            if (!empty($this->total_pages)) header(':', true, 404);\n\t\t}\n\n        // setup the previous link\n        if ($this->page > 1) {\n            $page_params['page'] = $this->page - 1;\n            $this->previous_pagenum = $this->page - 1;\n            $this->previous_page = $router->makeLink($page_params, false, false, true);\n            if (expTheme::is_mobile())\n                $this->pages_to_show--;\n        }\n\n        // setup the next link\n        if ($this->page < $this->total_pages) {\n            $page_params['page'] = $this->page + 1;\n            $this->next_pagenum = $this->page + 1;\n            $this->next_page = $router->makeLink($page_params, false, false, true);\n            if (expTheme::is_mobile())\n                $this->pages_to_show--;\n        }\n\n\t\t//setup the pages for the links\n\t\tif ($this->total_pages > $this->pages_to_show) {\n\t\t\t$this->first_pagelink = max(1, floor(($this->page) - ($this->pages_to_show) / 2));\n\t\t    $this->last_pagelink = $this->first_pagelink + $this->pages_to_show - 1;\n\t\t    if ($this->last_pagelink > $this->total_pages) {\n\t\t        $this->first_pagelink = max(1, $this->total_pages - $this->pages_to_show) + 1;\n\t\t        $this->last_pagelink = $this->total_pages;\n\t\t    }\n\t\t} else {\n\t\t\t$this->first_pagelink = 1;\n\t\t\t$this->last_pagelink = $this->total_pages;\n\t\t}\n\n\t\t// setup the previous 10 'group jump' link\n\t\tif ($this->page > $this->pages_to_show) {\n\t\t\t$page_params['page'] = $this->first_pagelink - 1;\n            $this->previous_shiftnum = $this->first_pagelink - 1;\n        \t$this->previous_shift = $router->makeLink($page_params, false, false, true);\n\t\t\t$page_params['page'] = 1;\n\t\t\t$this->firstpage = $router->makeLink($page_params, false, false, true);\n\t\t}\n\n\t\t// setup the next 10 'group jump' link\n\t\tif ($this->page < ($this->total_pages - $this->pages_to_show)) {\n            $page_params['page'] = $this->last_pagelink + 1;\n            $this->next_shiftnum = $this->last_pagelink + 1;\n            $this->next_shift = $router->makeLink($page_params, false, false, true);\n\t\t\t$page_params['page'] = $this->total_pages;\n\t\t\t$this->lastpage = $router->makeLink($page_params, false, false, true);\n        }\n\n\t\t// setup the links to the remaining pages being displayed.\n\t\tfor($i=$this->first_pagelink; $i<=$this->last_pagelink; $i++) {\n\t\t\t$page_params['page'] = $i;\n\t\t\t$this->pages[$i] = $router->makeLink($page_params, false, false, true);\n\t\t}\n\n\t\t$links_template = expTemplate::get_common_template('pagination_links', null, 'common');\n\t\t$links_template->assign('page', $this);\n\t\t$this->links = $links_template->render();\n\n\t\t$this->makeHeaderCols($page_params);  // headers for table view\n\n        $sortparams = array_merge($page_params, $router->params);\n\n\t\t//From Merge ****\n        if (isset($router->params['page']))\n            $sortparams['page'] = $router->params['page'];\n        else\n            unset($sortparams['page']);\n        //End From Merge ****\n\n\t\t$this->makeSortDropdown($sortparams);  // used on non-table views\n\n        $table_template = expTemplate::get_common_template('pagination_table', null, 'common');\n        $table_template->assign('page', $this);\n        $this->table = $table_template->render();  // table view\n\n\t}\n\n\t//From Merge\n    private function cleanParams($params) {\n        $defaultParams = array('title'=>'','module'=>'','controller'=>'','src'=>'','id'=>'','dir'=>'','_common'=>'');\n        $newParams = array();\n        $func = new ReflectionClass($this);\n        foreach ($params as $pKey=>$pVal) {\n            $propname = $pKey;\n            if (array_key_exists($propname,$defaultParams)) {\n                $newParams[$propname] = $params[$propname];\n            }\n        }\n        foreach ($func->getProperties() as $p) {\n            $propname = $p->name;\n            if (array_key_exists($propname,$params)) {\n                $newParams[$propname] = $params[$propname];\n            }\n        }\n\n        return $newParams;\n    }\n\n    public function makeHeaderCols($params) {\n        global $router;\n\n        if (!empty($this->columns) && is_array($this->columns)) {\n            $this->header_columns = '';\n\n            // get the parameters used to make this page.\n            if (!expTheme::inAction()) {\n                unset($params['section']);\n                if (empty($params['controller'])) $params['controller'] = $this->controller;\n                if (empty($params['action'])) $params['action'] = $this->action;\n            }\n\n//            $current = '';\n            if (isset($params['order'])) {\n                $current = $params['order'];\n                unset($params['order']);\n            } else {\n                $current = $this->order;\n            }\n\n            //loop over the columns and build out a list of <th>'s to be used in the page table\n            foreach ($this->columns as $colname=>$col) {\n                // if this is the column we are sorting on right now we need to setup some class info\n                $class = isset($this->class) ? $this->class : 'page';\n                $params['dir'] = 'ASC';\n\n                if ($col == $current) {\n                    $class  = 'current '.strtolower($this->order_direction);\n                    $params['dir'] = $this->order_direction == 'ASC' ? 'DESC' : 'ASC';\n                }\n\n                $params['order'] = $col;\n\n                $this->header_columns .= '<th class=\"'.$class.'\">';\n                // if this column is empty then it's not supposed to be a sortable column\n\n                if (empty($col)) {\n                    $this->header_columns .= '<span>'.$colname.'</span>';\n                    $this->columns[$colname] = ' ';\n                } else if($colname==\"actupon\") {\n                    $this->header_columns .= '<input type=checkbox name=selall id=selall value=1 class=\"select-all\"/>';\n\n//                    $js = \"\n//                    YUI(EXPONENT.YUI3_CONFIG).use('node', function(Y) {\n//                        Y.all('input[type=checkbox]').on('click',function(e){\n//                            if (e.target.test('.select-all')) {\n//                                if (!e.target.get('checked')) {\n//                                    this.each(function(n){\n//                                        n.set('checked',false);\n//                                    });\n//                                } else {\n//                                    this.each(function(n){\n//                                        n.set('checked',true);\n//                                    });\n//                                };\n//                            };\n//                        });\n//                    });\n//                    \";\n\n                    $js = \"\n                    $('#selall').change(function () {\n                        $('input[name=\\\"act-upon[]\\\"]').prop('checked', this.checked);\n                    });\n                    \";\n\n                    expJavascript::pushToFoot(array(\n                        \"unique\"=>'select-all',\n//                        \"yui3mods\"=>1,\n                        \"jquery\"=>1,\n                        \"content\"=>$js,\n//                        \"src\"=>\"\"\n                     ));\n\n                } else {\n\t\t\t\t\tunset($params['page']);  // we want to go back to the first page on a re-sort\n                    if ($col == 'no-sort') {\n                        $this->header_columns .= $colname;\n                    } else {\n                        $this->header_columns .= '<a href=\"'.$router->makeLink($params, false, false, true).'\" alt=\"sort by '.$colname.'\" rel=\"nofollow\">'.$colname.'</a>';\n                    }\n                }\n\n                $this->header_columns .= '</th>';\n            }\n        }\n    }\n\n    //here if we want to modify the record for some reason. e.g. Using in search results w/ products\n    private function runCallback() {\n        foreach ($this->records as &$record) {\n            if (isset($record->ref_type)) {\n                $refType = $record->ref_type;\n                if (class_exists($record->ref_type)) {\n                    $type = new $refType();\n                    $classinfo = new ReflectionClass($type);\n                    if ($classinfo->hasMethod('paginationCallback')) {\n                        $item = new $type($record->original_id);\n                        $item->paginationCallback($record);\n                    }\n                }\n            }\n        }\n    }\n\n\tpublic function makeSortDropdown($params) {\n\t\tglobal $router;\n\n\t\tif (!empty($this->columns) && is_array($this->columns)) {\n\t\t\t$this->sort_dropdown = array();\n\n\t\t\t// get the parameters used to make this page.\n\t\t\tif (!expTheme::inAction()) {\n\t\t\t\tunset($params['section']);\n\t\t\t\tif (empty($params['controller'])) $params['controller'] = $this->controller;\n\t\t\t\tif (empty($params['action'])) $params['action'] = $this->action;\n\t\t\t}\n\n\t\t\t/*$current = '';\n\t\t\tif (isset($params['order'])) {\n\t\t\t\t$current = $params['order'];\n\t\t\t\tunset($params['order']);\n\t\t\t} else {\n\t\t\t\t$current = $this->order;\n\t\t\t}  */\n\n\t\t\t//loop over the columns and build out a list of <th>'s to be used in the page table\n           // eDebug($router);\n            $defaultParams['controller'] = $params['controller'];\n            $defaultParams['action'] = $params['action'];\n            if (isset($params['title']))\n                $defaultParams['title'] = $params['title'];\n            if (isset($params['page']))\n                $defaultParams['page'] = $params['page'];\n\n            $this->sort_dropdown[$router->makeLink($defaultParams, false, false, true)] = \"Default\";\n\t\t\tforeach ($this->columns as $colname=>$col) {\n\t\t\t\t// if this is the column we are sorting on right now we need to setup some class info\n\t\t\t\t/*$class = isset($this->class) ? $this->class : 'page';\n\t\t\t\t$params['dir'] = 'ASC';*/\n\n\t\t\t\t/*if ($col == $current) {\n\t\t\t\t\t$class  = 'current';\n\t\t\t\t\t$class .= ' '.$this->order_direction;\n\t\t\t\t\tif (isset($params['dir'])) {\n\t\t\t\t\t\t$params['dir'] = $params['dir'] == 'ASC' ? 'DESC' : 'ASC';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$params['dir'] = $this->order_direction == 'ASC' ? 'DESC' : 'ASC';\n\t\t\t\t\t}\n\t\t\t\t}\n                */\n\t\t\t\t$params['order'] = $col;\n\n\t\t\t\tif (!empty($col)) {\n                    if ($colname == 'Price') {\n                        $params['dir'] = 'ASC';\n                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - Lowest to Highest\";\n                        $params['dir'] = 'DESC';\n                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - Highest to Lowest\";\n                    } else {\n                        $params['dir'] = 'ASC';\n                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - A-Z\";\n                        $params['dir'] = 'DESC';\n                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - Z-A\";\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    /** exdoc\n     * Object/Array sorting comparison function -- sorts by a specified column in ascending order.\n     * @node Subsystems:expPaginator\n     */\n    public function asc($a,$b) {\n        $col = $this->order;\n        if (is_object($a)) {\n            return ($a->$col < $b->$col ? -1 : 1);\n        } elseif (is_array($a)) {\n            return ($a[$col] < $b[$col] ? -1 : 1);\n        } else {\n            return ($a < $b ? -1 : 1);\n        }\n    }\n\n    /** exdoc\n     * Object/Array sorting comparison function -- sorts by a specified column in descending order.\n     * @node Subsystems:expPaginator\n     */\n    public function desc($a,$b) {\n        $col = $this->order;\n        if (is_object($a)) {\n            return ($a->$col > $b->$col ? -1 : 1);\n        } elseif (is_array($a)) {\n            return ($a[$col] > $b[$col] ? -1 : 1);\n        } else {\n            return ($a > $b ? -1 : 1);\n        }\n    }\n}\n\n?>"], "fixing_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expPaginator\n * Exponent Pagination Subsystem\n *\n * The expPaginator class is used to retrieve objects from the database\n * and paginate them and optionally group the by category.\n * It automagically handles the calls to other pages\n * and has built-in sorting using the defined column headers.\n *\n * Usage Example:\n *\n * <code>\n *\n * $page = new expPaginator(array(\n *      'model'=>'faq',\n *      'where'=>1,\n *      'limit'=>25,\n *      'order'=>'rank',\n *      'controller'=>$this->baseclassname,\n *      'action'=>$this->params['action'],\n *      'columns'=>array('In FAQ'=>'include_in_faq', 'Submitted'=>'created_at', 'Submitted By'=>'submitter_name'),\n *  ));\n * </code>\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\n\nclass expPaginator {\n    /**#@+\n     * @access public\n     * @var string\n     */\n\tpublic $model = null;\n    public $search_string = '';\n\tpublic $sql = '';\n    public $count_sql = '';\n\tpublic $where = '';\n\tpublic $controller = '';\n\tpublic $action = '';\n\tpublic $order = '';\n\tpublic $order_direction = '';\n\tpublic $firstpage = '';\n\tpublic $lastpage = '';\n\tpublic $previous_page = '';\n\tpublic $next_page = '';\n\tpublic $previous_shift = '';\n\tpublic $next_shift = '';\n\tpublic $pagelink = '';\n\tpublic $header_columns = '';\n\tpublic $default = '';\n\tpublic $view = null;\n    public $uncat ='';\n//    public $content_type = '';\n//    public $author = '';\n//    public $tag = '';\n//    public $tags = '';\n\t/**#@+\n     * @access public\n     * @var integer\n     */\n\tpublic $page  = 1;\n//\tpublic $limit = 10;\n    public $limit = 0;\n\tpublic $start = 0;\n\tpublic $last = 0;\n\tpublic $pages_to_show = 10;\n\tpublic $total_records = 0;\n\tpublic $total_pages = 0;\n\tpublic $page_offset = 0;\n    public $categorize = false;\n//    public $version = 0;\n//    public $content_id = 0;\n\t/**#@+\n     * @access public\n     * @var array\n     */\n\tpublic $pages = array();\n\tpublic $records = array();\n    public $cats = array();\n    public $sort_dropdown = array();\n\n\t/**\n\t * expPaginator Constructor\n\t *\n\t * This is the main entry point for using the expPaginator.  See example above.\n\t *\n\t * @param array $params Use this to set any of the class variables. Ones not passed will be set to a default.\n\t * @return \\expPaginator\n\t */\n\tpublic function __construct($params=array()) {\n\t\tglobal $router, $db;\n\n        $this->pages_to_show = expTheme::is_mobile() ? 6 : 10; // fewer paging links for small devices\n\t\t$this->where = empty($params['where']) ? null : $params['where'];\n\t\t$this->records = empty($params['records']) ? array() : $params['records'];\n//\t\t$this->limit = empty($params['limit']) ? 10 : $params['limit'];\n        $this->limit = empty($params['limit']) ? 0 : intval($params['limit']);\n        $this->page = empty($params['page']) ? 1 : intval($params['page']);\n\t\t$this->action = empty($params['action']) ? '' : $params['action'];\n\t\t$this->controller = empty($params['controller']) ? '' : $params['controller'];\n\t\t$this->sql = empty($params['sql']) ? '' : $params['sql'];\n        $this->count_sql = empty($params['count_sql']) ? '' : $params['count_sql'];\n//        $this->order = empty($params['order']) ? 'id' : preg_replace('/[^a-zAZ_]/','',$params['order']);\n        $this->order = empty($params['order']) ? 'id' : expString::escape($params['order']);\n\t\t$this->dir = empty($params['dir']) || !in_array($params['dir'], array('ASC', 'DESC')) ? 'ASC' : $params['dir'];\n\t\t$this->src = empty($params['src']) ? null : expString::escape($params['src']);\n        $this->categorize = empty($params['categorize']) ? false : $params['categorize'];\n        $this->uncat = !empty($params['uncat']) ? $params['uncat'] : gt('Not Categorized');\n        $this->groups = !empty($params['groups']) ? $params['groups'] : array();\n        $this->grouplimit = !empty($params['grouplimit']) ? $params['grouplimit'] : null;\n        $this->dontsortwithincat = !empty($params['dontsortwithincat']) ? $params['dontsortwithincat'] : null;\n        $this->dontsort = !empty($params['dontsort']) ? $params['dontsort'] : null;\n\n\t\t// if a view was passed we'll use it.\n\t\tif (isset($params['view']))\n            $this->view = $params['view'];\n\n        // setup the model if one was passed.\n        if (isset($params['model'])) {\n            $this->model = $params['model'];\n            $class = new $this->model(null, false, false);\n        }\n\n\t    // auto-include the CSS for pagination links\n\t    expCSS::pushToHead(array(\n//\t\t    \"unique\"=>\"pagination\",\n//\t\t    \"link\"=>PATH_RELATIVE.\"framework/core/assets/css/pagination.css\",\n            'corecss'=>'pagination'\n\t\t    )\n\t\t);\n\n\t\tif ($this->limit)\n            $this->start = (($this->page * $this->limit) - $this->limit);\n        if ($this->start < 0)\n            $this->start = 0;\n\n\t\t//setup the columns\n        $this->columns = array();\n\t\tif (isset($params['columns'])) {\n\t\t    foreach($params['columns'] as $key=>$col){\n\t\t        $colparse[$key] = explode('|',$col);\n\t\t        $column = array($key=>$colparse[$key][0]);\n\t\t        $this->columns = array_merge($this->columns,$column);\n\t\t        if (!empty($colparse[$key][1])) {\n\t\t            $params = explode(',',$colparse[$key][1]);\n\t\t            foreach ($params as $paramval) {\n\t\t                $prm = explode('=',$paramval);\n\t\t                $this->linkables[$key][$prm[0]] = $prm[1];\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t}\n\n\t\t//setup the default ordering of records\n\t\t// if we are in an action, see if the action is for this controller/action..if so pull the order\n\t\t// and order direction from the request params...this is how the params are passed via the column\n\t\t// headers.\n\t\t$this->order_direction = $this->dir;\n\n        // allow passing of a single order/dir as stored in config\n        if (strstr($this->order,\" \")) {\n            $orderby = explode(\" \",$this->order);\n            $this->order = $orderby[0];\n            $this->order_direction = $orderby[1];\n        }\n        // filter out invalid order & direction\n        if(preg_match('/[^a-zA-Z_][^a-zA-Z0-9_]*/', $this->order))\n            $this->order = 'id';\n        if (!in_array($this->order_direction, array('ASC', 'DESC')))\n            $this->order_direction = 'ASC';\n        if ($this->dontsort)\n            $sort = null;\n        else\n            $sort = $this->order.' '.$this->order_direction;\n\n\t\t// figure out how many records we're dealing with & grab the records\n\t\t//if (!empty($this->records)) { //from Merge <~~ this doesn't work. Could be empty, but still need to hit.\n        if (!empty($this->categorize))\n            $limit = null;\n        else\n            $limit = $this->limit;\n\n\t\tif (isset($params['records'])) { // if we pass $params['records'], we WANT to hit this\n\t\t    // sort the records that were passed in to us\n            if (!empty($sort))\n                usort($this->records,array('expPaginator', strtolower($this->order_direction)));\n//\t\t    $this->total_records = count($this->records);\n\t\t} elseif (!empty($class)) { //where clause     //FJD: was $this->class, but wasn't working...\n\t\t\t$this->total_records = $class->find('count', $this->where);\n            $this->records = $class->find('all', $this->where, $sort, $limit, $this->start);\n\t\t} elseif (!empty($this->where)) { //from Merge....where clause\n\t\t\t$this->total_records = $class->find('count', $this->where);\n            $this->records = $class->find('all', $this->where, $sort, $limit, $this->start);\n\t\t} else { //sql clause  //FIXME we don't get attachments in this approach\n\t\t\t//$records = $db->selectObjectsBySql($this->sql);\n\t\t\t//$this->total_records = count($records);\n            //this is MUCH faster if you supply a proper count_sql param using a COUNT() function; if not,\n            //we'll run the standard sql and do a queryRows with it\n\t\t\t//$this->total_records = $this->count_sql == '' ? $db->queryRows($this->sql) : $db->selectValueBySql($this->count_sql); //From Merge\n\n//\t\t\t$this->total_records =  $db->countObjectsBySql($this->count_sql); //$db->queryRows($this->sql); //From most current Trunk\n\n            if (!empty($sort)) $this->sql .= ' ORDER BY '.$sort;\n            if (!empty($this->count_sql)) $this->total_records = $db->countObjectsBySql($this->count_sql);\n\t\t\tif (!empty($this->limit)) $this->sql .= ' LIMIT '.$this->start.','.$this->limit;\n\n\t\t\t$this->records = array();\n\t\t\tif (isset($this->model) || isset($params['model_field'])) {\n\t\t\t    foreach($db->selectObjectsBySql($this->sql) as $record) {\n                    $type = $params['model_field'];\n\t\t\t        $classname = isset($params['model_field']) ? $record->$type : $this->model;\n\t\t\t        //$this->records[] = new $classname($record->id, true, true); //From current trunk // added false, true, as we shouldn't need associated items here, but do need attached. FJD.\n\t\t\t\t\t$this->records[] = new $classname($record->id, false, true); //From Merge //added false, true, as we shouldn't need associated items here, but do need attached. FJD.\n\t\t\t    }\n\t\t\t} else {\n\t\t\t    $this->records = $db->selectObjectsBySql($this->sql);\n\t\t\t}\n\t\t}\n\n        // next we'll sort them based on categories if needed\n        if (!empty($this->categorize) && $this->categorize && empty($this->dontsort))\n            expCatController::addCats($this->records,$sort,$this->uncat,$this->groups,$this->dontsortwithincat);\n\n        // let's see how many total records there are\n        if (empty($this->total_records))\n            $this->total_records = count($this->records);\n        if ($this->limit && $this->start >= $this->total_records)\n            $this->start = $this->total_records - $this->limit;\n\n        // at this point we generally have all our records, now we'll trim the records to the number requested\n        //FIXME we may want some more intelligent selection here based on cats/groups, e.g., don't break groups across pages, number of picture rows, etc...\n        if (empty($this->grouplimit) && ($this->limit) && count($this->records) > $this->limit)\n            $this->records = array_slice($this->records, $this->start, $this->limit);\n        // finally, we'll create another multi-dimensional array of categories populated with assoc items\n        if (empty($this->dontsort)) {\n            if (!empty($this->categorize) && $this->categorize) {\n                expCatController::sortedByCats($this->records,$this->cats,$this->groups,$this->grouplimit);\n            } elseif (empty($this->dontsortwithincat)) {  // categorized is off, so let's categorize by alpha instead for 'rolodex' type use\n                $order = $this->order;\n                if (in_array($order,array('created_at','edited_at','publish'))) {\n                    if ($this->total_records && (abs($this->records[0]->$order - $this->records[count($this->records)-1]->$order)  >= (60 * 60 * 24 *365 *2))) {\n                        $datetype = 'Y';  // more than 2 years of records, so break down by year\n                    } else {\n                        $datetype = 'M Y';  // less than 2 years of records, so break down by month/year\n                    }\n                    foreach ($this->records as $record) {\n                        if (is_numeric($record->$order)) {\n                            $title = date($datetype,$record->$order);\n                            $title = empty($title)?gt('Undated'):$title;\n                        } else {\n                            $title = gt('Undated');\n                        }\n                        if (empty($this->cats[$title])) {\n                            $this->cats[$title] = new stdClass();\n                            $this->cats[$title]->count = 1;\n                            $this->cats[$title]->name = $title;\n                        } else {\n                            $this->cats[$title]->count++;\n                        }\n                        $this->cats[$title]->records[] = $record;\n                    }\n                } else {\n                    foreach ($this->records as $record) {\n                        if (!empty($record->$order) && is_string($record->$order) && !is_numeric($record->$order)) {\n                            $title = ucfirst($record->$order);\n                            $title = empty($title[0])?'':$title[0];\n                        } else {\n                            $title = '';\n                        }\n                        if (empty($this->cats[$title])) {\n                            $this->cats[$title] = new stdClass();\n                            $this->cats[$title]->count = 1;\n                            $this->cats[$title]->name = $title;\n                        } else {\n                            $this->cats[$title]->count++;\n                        }\n                        $this->cats[$title]->records[] = $record;\n                    }\n                }\n            }\n            if (!empty($this->grouplimit)) {\n                if ($this->limit)\n                    $this->records = array_slice($this->records, $this->start, $this->limit);\n            } else {\n                if ($this->limit)\n                    $this->cats = array_slice($this->cats, $this->start, $this->limit);\n            }\n        }\n\n        if (isset($params['records']))\n            $this->runCallback(); // isset($params['records']) added to correct search for products.\n\n        //eDebug($this->records);\n\t\t// get the number of the last record we are showing...this is used in the page links.\n\t\t// i.e.  \"showing 10-19 of 57\"...$this->last would be the 19 in that string\n\t\tif ($this->total_records > 0) {\n\t\t\t$this->firstrecord = $this->start + 1;\n\t\t\t$this->lastrecord = ($this->total_records < $this->limit) ? ($this->start + $this->total_records) : ($this->start + $this->limit);\n\t\t\tif ($this->lastrecord > $this->total_records || $this->lastrecord == 0)\n                $this->lastrecord = $this->total_records;\n\t\t} else {\n\t\t\t$this->firstrecord = 0;\n\t\t\t$this->lastrecord = 0;\n\t\t}\n\n\t\t// get the page parameters from the router to build the links\n        $page_params = $router->params;\n//\t\t$page_params = $this->cleanParams($router->params);\n        foreach (array(\"__utma\", \"__utmz\", \"route_sanitized\") as $key) {\n            if (isset($page_params[$key]))\n                unset($page_params[$key]);\n        }\n        if (!empty($page_params['search_string']))\n            $page_params['search_string'] = urlencode($page_params['search_string']);\n\n\t\t//if (empty($page_params['module'])) $page_params['module'] = $this->controller;\n\t\t//if (empty($page_params['action'])) $page_params['action'] = $this->action;\n\t\t//if (empty($page_params['src']) && isset($params['src'])) $page_params['src'] = $params['src'];\n\t\tif (!empty($this->controller)) {\n\t\t    unset($page_params['module']);\n\t\t    $page_params['controller'] = expModules::getModuleName($this->controller);\n\t\t} else {\n            if (expTheme::inAction() && empty($params)) {\n                //FIXME: module/controller glue code\n    //\t\t    $mod = !empty($_REQUEST['controller']) ? expString::sanitize($_REQUEST['controller']) : expString::sanitize($_REQUEST['module']);\n    //\t\t    if ($this->controller == $mod && $this->action == $_REQUEST['action']) {\n    //\t\t\t    $this->order = isset($_REQUEST['order']) ? $_REQUEST['order'] : $this->order;\n    //\t\t\t    $this->order_direction = isset($_REQUEST['dir']) ? $_REQUEST['dir'] : $this->dir;\n    //\t\t\t}\n                $mod = !empty($router->params['controller']) ? $router->params['controller'] : $router->params['module'];\n                if ($this->controller == $mod && $this->action == $router->params['action']) {\n                    $this->order = isset($router->params['order']) ? $router->params['order'] : $this->order;\n                    $this->order_direction = isset($router->params['dir']) ? $router->params['dir'] : $this->dir;\n                    if(!preg_match('/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/', $this->order))\n                        $this->order = 'id';\n                    if (!in_array($this->order_direction, array('ASC', 'DESC')))\n                        $this->order_direction = 'ASC';\n                }\n            } else {\n                if (isset($params->controller)) {\n                    $mod = $params->controller;\n                } else {\n                    $mod = '';\n                }\n            }\n            $page_params['controller'] = $mod;  // we can't be passing an empty controller or module to the router\n        }\n\n\t\tif (!empty($this->action))\n            $page_params['action'] =  $this->action;\n\t\tif (!empty($this->src))\n            $page_params['src'] =  $this->src;\n\n\t\tif (isset($page_params['section']))\n            unset($page_params['section']);\n\n\t\t//build a 'more' link we can use in the headlines views.\n\t\t$this->morelink = $router->makeLink($page_params, false, false, true);\n\n\t\tif (!empty($this->view))\n            $page_params['view'] = $this->view;\n\n\t\t//build a couple more links we can use in the views.\n\t\t$this->pagelink = $router->makeLink($page_params, false, false, true);\n\n\t\t// if don't have enough records for more than one page then we're done.\n\t\t//if ($this->total_records <= $this->limit) return true;\n\n\t\t$this->total_pages = ($this->limit > 0) ? ceil($this->total_records/$this->limit) : 0;\n\n        // correct current page # to be within limits of number of pages\n\t\tif ($this->page > $this->total_pages) {\n\t\t\t$this->page = $this->total_pages;\n            //FIXME return 404 error for infinite page scroll plugin\n            if (!empty($this->total_pages)) header(':', true, 404);\n\t\t}\n\n        // setup the previous link\n        if ($this->page > 1) {\n            $page_params['page'] = $this->page - 1;\n            $this->previous_pagenum = $this->page - 1;\n            $this->previous_page = $router->makeLink($page_params, false, false, true);\n            if (expTheme::is_mobile())\n                $this->pages_to_show--;\n        }\n\n        // setup the next link\n        if ($this->page < $this->total_pages) {\n            $page_params['page'] = $this->page + 1;\n            $this->next_pagenum = $this->page + 1;\n            $this->next_page = $router->makeLink($page_params, false, false, true);\n            if (expTheme::is_mobile())\n                $this->pages_to_show--;\n        }\n\n\t\t//setup the pages for the links\n\t\tif ($this->total_pages > $this->pages_to_show) {\n\t\t\t$this->first_pagelink = max(1, floor(($this->page) - ($this->pages_to_show) / 2));\n\t\t    $this->last_pagelink = $this->first_pagelink + $this->pages_to_show - 1;\n\t\t    if ($this->last_pagelink > $this->total_pages) {\n\t\t        $this->first_pagelink = max(1, $this->total_pages - $this->pages_to_show) + 1;\n\t\t        $this->last_pagelink = $this->total_pages;\n\t\t    }\n\t\t} else {\n\t\t\t$this->first_pagelink = 1;\n\t\t\t$this->last_pagelink = $this->total_pages;\n\t\t}\n\n\t\t// setup the previous 10 'group jump' link\n\t\tif ($this->page > $this->pages_to_show) {\n\t\t\t$page_params['page'] = $this->first_pagelink - 1;\n            $this->previous_shiftnum = $this->first_pagelink - 1;\n        \t$this->previous_shift = $router->makeLink($page_params, false, false, true);\n\t\t\t$page_params['page'] = 1;\n\t\t\t$this->firstpage = $router->makeLink($page_params, false, false, true);\n\t\t}\n\n\t\t// setup the next 10 'group jump' link\n\t\tif ($this->page < ($this->total_pages - $this->pages_to_show)) {\n            $page_params['page'] = $this->last_pagelink + 1;\n            $this->next_shiftnum = $this->last_pagelink + 1;\n            $this->next_shift = $router->makeLink($page_params, false, false, true);\n\t\t\t$page_params['page'] = $this->total_pages;\n\t\t\t$this->lastpage = $router->makeLink($page_params, false, false, true);\n        }\n\n\t\t// setup the links to the remaining pages being displayed.\n\t\tfor($i=$this->first_pagelink; $i<=$this->last_pagelink; $i++) {\n\t\t\t$page_params['page'] = $i;\n\t\t\t$this->pages[$i] = $router->makeLink($page_params, false, false, true);\n\t\t}\n\n\t\t$links_template = expTemplate::get_common_template('pagination_links', null, 'common');\n\t\t$links_template->assign('page', $this);\n\t\t$this->links = $links_template->render();\n\n\t\t$this->makeHeaderCols($page_params);  // headers for table view\n\n        $sortparams = array_merge($page_params, $router->params);\n\n\t\t//From Merge ****\n        if (isset($router->params['page']))\n            $sortparams['page'] = $router->params['page'];\n        else\n            unset($sortparams['page']);\n        //End From Merge ****\n\n\t\t$this->makeSortDropdown($sortparams);  // used on non-table views\n\n        $table_template = expTemplate::get_common_template('pagination_table', null, 'common');\n        $table_template->assign('page', $this);\n        $this->table = $table_template->render();  // table view\n\n\t}\n\n\t//From Merge\n    private function cleanParams($params) {\n        $defaultParams = array('title'=>'','module'=>'','controller'=>'','src'=>'','id'=>'','dir'=>'','_common'=>'');\n        $newParams = array();\n        $func = new ReflectionClass($this);\n        foreach ($params as $pKey=>$pVal) {\n            $propname = $pKey;\n            if (array_key_exists($propname,$defaultParams)) {\n                $newParams[$propname] = $params[$propname];\n            }\n        }\n        foreach ($func->getProperties() as $p) {\n            $propname = $p->name;\n            if (array_key_exists($propname,$params)) {\n                $newParams[$propname] = $params[$propname];\n            }\n        }\n\n        return $newParams;\n    }\n\n    public function makeHeaderCols($params) {\n        global $router;\n\n        if (!empty($this->columns) && is_array($this->columns)) {\n            $this->header_columns = '';\n\n            // get the parameters used to make this page.\n            if (!expTheme::inAction()) {\n                unset($params['section']);\n                if (empty($params['controller'])) $params['controller'] = $this->controller;\n                if (empty($params['action'])) $params['action'] = $this->action;\n            }\n\n//            $current = '';\n            if (isset($params['order'])) {\n                $current = $params['order'];\n                unset($params['order']);\n            } else {\n                $current = $this->order;\n            }\n\n            //loop over the columns and build out a list of <th>'s to be used in the page table\n            foreach ($this->columns as $colname=>$col) {\n                // if this is the column we are sorting on right now we need to setup some class info\n                $class = isset($this->class) ? $this->class : 'page';\n                $params['dir'] = 'ASC';\n\n                if ($col == $current) {\n                    $class  = 'current '.strtolower($this->order_direction);\n                    $params['dir'] = $this->order_direction == 'ASC' ? 'DESC' : 'ASC';\n                }\n\n                $params['order'] = $col;\n\n                $this->header_columns .= '<th class=\"'.$class.'\">';\n                // if this column is empty then it's not supposed to be a sortable column\n\n                if (empty($col)) {\n                    $this->header_columns .= '<span>'.$colname.'</span>';\n                    $this->columns[$colname] = ' ';\n                } else if($colname==\"actupon\") {\n                    $this->header_columns .= '<input type=checkbox name=selall id=selall value=1 class=\"select-all\"/>';\n\n//                    $js = \"\n//                    YUI(EXPONENT.YUI3_CONFIG).use('node', function(Y) {\n//                        Y.all('input[type=checkbox]').on('click',function(e){\n//                            if (e.target.test('.select-all')) {\n//                                if (!e.target.get('checked')) {\n//                                    this.each(function(n){\n//                                        n.set('checked',false);\n//                                    });\n//                                } else {\n//                                    this.each(function(n){\n//                                        n.set('checked',true);\n//                                    });\n//                                };\n//                            };\n//                        });\n//                    });\n//                    \";\n\n                    $js = \"\n                    $('#selall').change(function () {\n                        $('input[name=\\\"act-upon[]\\\"]').prop('checked', this.checked);\n                    });\n                    \";\n\n                    expJavascript::pushToFoot(array(\n                        \"unique\"=>'select-all',\n//                        \"yui3mods\"=>1,\n                        \"jquery\"=>1,\n                        \"content\"=>$js,\n//                        \"src\"=>\"\"\n                     ));\n\n                } else {\n\t\t\t\t\tunset($params['page']);  // we want to go back to the first page on a re-sort\n                    if ($col == 'no-sort') {\n                        $this->header_columns .= $colname;\n                    } else {\n                        $this->header_columns .= '<a href=\"'.$router->makeLink($params, false, false, true).'\" alt=\"sort by '.$colname.'\" rel=\"nofollow\">'.$colname.'</a>';\n                    }\n                }\n\n                $this->header_columns .= '</th>';\n            }\n        }\n    }\n\n    //here if we want to modify the record for some reason. e.g. Using in search results w/ products\n    private function runCallback() {\n        foreach ($this->records as &$record) {\n            if (isset($record->ref_type)) {\n                $refType = $record->ref_type;\n                if (class_exists($record->ref_type)) {\n                    $type = new $refType();\n                    $classinfo = new ReflectionClass($type);\n                    if ($classinfo->hasMethod('paginationCallback')) {\n                        $item = new $type($record->original_id);\n                        $item->paginationCallback($record);\n                    }\n                }\n            }\n        }\n    }\n\n\tpublic function makeSortDropdown($params) {\n\t\tglobal $router;\n\n\t\tif (!empty($this->columns) && is_array($this->columns)) {\n\t\t\t$this->sort_dropdown = array();\n\n\t\t\t// get the parameters used to make this page.\n\t\t\tif (!expTheme::inAction()) {\n\t\t\t\tunset($params['section']);\n\t\t\t\tif (empty($params['controller'])) $params['controller'] = $this->controller;\n\t\t\t\tif (empty($params['action'])) $params['action'] = $this->action;\n\t\t\t}\n\n\t\t\t/*$current = '';\n\t\t\tif (isset($params['order'])) {\n\t\t\t\t$current = $params['order'];\n\t\t\t\tunset($params['order']);\n\t\t\t} else {\n\t\t\t\t$current = $this->order;\n\t\t\t}  */\n\n\t\t\t//loop over the columns and build out a list of <th>'s to be used in the page table\n           // eDebug($router);\n            $defaultParams['controller'] = $params['controller'];\n            $defaultParams['action'] = $params['action'];\n            if (isset($params['title']))\n                $defaultParams['title'] = $params['title'];\n            if (isset($params['page']))\n                $defaultParams['page'] = $params['page'];\n\n            $this->sort_dropdown[$router->makeLink($defaultParams, false, false, true)] = \"Default\";\n\t\t\tforeach ($this->columns as $colname=>$col) {\n\t\t\t\t// if this is the column we are sorting on right now we need to setup some class info\n\t\t\t\t/*$class = isset($this->class) ? $this->class : 'page';\n\t\t\t\t$params['dir'] = 'ASC';*/\n\n\t\t\t\t/*if ($col == $current) {\n\t\t\t\t\t$class  = 'current';\n\t\t\t\t\t$class .= ' '.$this->order_direction;\n\t\t\t\t\tif (isset($params['dir'])) {\n\t\t\t\t\t\t$params['dir'] = $params['dir'] == 'ASC' ? 'DESC' : 'ASC';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$params['dir'] = $this->order_direction == 'ASC' ? 'DESC' : 'ASC';\n\t\t\t\t\t}\n\t\t\t\t}\n                */\n\t\t\t\t$params['order'] = $col;\n\n\t\t\t\tif (!empty($col)) {\n                    if ($colname == 'Price') {\n                        $params['dir'] = 'ASC';\n                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - Lowest to Highest\";\n                        $params['dir'] = 'DESC';\n                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - Highest to Lowest\";\n                    } else {\n                        $params['dir'] = 'ASC';\n                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - A-Z\";\n                        $params['dir'] = 'DESC';\n                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - Z-A\";\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    /** exdoc\n     * Object/Array sorting comparison function -- sorts by a specified column in ascending order.\n     * @node Subsystems:expPaginator\n     */\n    public function asc($a,$b) {\n        $col = $this->order;\n        if (is_object($a)) {\n            return ($a->$col < $b->$col ? -1 : 1);\n        } elseif (is_array($a)) {\n            return ($a[$col] < $b[$col] ? -1 : 1);\n        } else {\n            return ($a < $b ? -1 : 1);\n        }\n    }\n\n    /** exdoc\n     * Object/Array sorting comparison function -- sorts by a specified column in descending order.\n     * @node Subsystems:expPaginator\n     */\n    public function desc($a,$b) {\n        $col = $this->order;\n        if (is_object($a)) {\n            return ($a->$col > $b->$col ? -1 : 1);\n        } elseif (is_array($a)) {\n            return ($a[$col] > $b[$col] ? -1 : 1);\n        } else {\n            return ($a > $b ? -1 : 1);\n        }\n    }\n}\n\n?>"], "filenames": ["framework/core/subsystems/expPaginator.php"], "buggy_code_start_loc": [121], "buggy_code_end_loc": [184], "fixing_code_start_loc": [121], "fixing_code_end_loc": [186], "type": "CWE-200", "message": "Exponent CMS 2.3.9 suffers from a SQL injection vulnerability in \"/expPaginator.php\" affecting the order parameter. Impact is Information Disclosure.", "other": {"cve": {"id": "CVE-2016-9134", "sourceIdentifier": "cve@mitre.org", "published": "2016-11-03T10:59:10.857", "lastModified": "2016-11-29T19:15:48.227", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Exponent CMS 2.3.9 suffers from a SQL injection vulnerability in \"/expPaginator.php\" affecting the order parameter. Impact is Information Disclosure."}, {"lang": "es", "value": "Exponent CMS 2.3.9 sufre de una vulnerabilidad de inyecci\u00f3n SQL en \"/expPaginator.php\" afectando el par\u00e1metro de orden. El impacto es Information Disclosure."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}, {"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:2.3.9:*:*:*:*:*:*:*", "matchCriteriaId": "12FDDF33-2B21-4F8A-AB9A-01857197E810"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/94127", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/exponentcms/exponent-cms/commit/45a7a62797e64e8abbae35d4859097c26f1874b1", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/exponentcms/exponent-cms/commit/d5c3c175b60bd26b2b74ec85b8f0d2544db2c8db", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/45a7a62797e64e8abbae35d4859097c26f1874b1"}}