{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/**\n * @copyright Copyright (c) 2021 Roeland Jago Douma <roeland@famdouma.nl>\n *\n * @author Roeland Jago Douma <roeland@famdouma.nl>\n *\n * @license GNU AGPL version 3 or any later version\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nnamespace OCA\\FilesZip\\Service;\n\nuse Exception;\nuse Icewind\\Streams\\CountWrapper;\nuse OC\\User\\NoUserException;\nuse OCA\\FilesZip\\AppInfo\\Application;\nuse OCA\\FilesZip\\BackgroundJob\\ZipJob;\nuse OCA\\FilesZip\\Exceptions\\MaximumSizeReachedException;\nuse OCA\\FilesZip\\Exceptions\\TargetAlreadyExists;\nuse OCP\\AppFramework\\Utility\\ITimeFactory;\nuse OCP\\BackgroundJob\\IJobList;\nuse OCP\\Files\\File;\nuse OCP\\Files\\Folder;\nuse OCP\\Files\\IRootFolder;\nuse OCP\\Files\\Node;\nuse OCP\\Files\\NotFoundException;\nuse OCP\\Files\\NotPermittedException;\nuse OCP\\IConfig;\nuse OCP\\IUserSession;\nuse OCP\\Lock\\LockedException;\nuse ZipStreamer\\ZipStreamer;\n\nclass ZipService {\n\t/** @var IRootFolder */\n\tprivate $rootFolder;\n\t/** @var NotificationService */\n\tprivate $notificationService;\n\t/** @var IUserSession */\n\tprivate $userSession;\n\t/** @var IJobList */\n\tprivate $jobList;\n\t/** @var ITimeFactory */\n\tprivate $timeFactory;\n\t/** @var IConfig */\n\tprivate $config;\n\n\tpublic function __construct(\n\t\tIRootFolder $rootFolder,\n\t\tNotificationService $notificationService,\n\t\tIUserSession $userSession,\n\t\tIJobList $jobList,\n\t\tITimeFactory $timeFactory,\n\t\tIConfig $config\n\t) {\n\t\t$this->rootFolder = $rootFolder;\n\t\t$this->notificationService = $notificationService;\n\t\t$this->userSession = $userSession;\n\t\t$this->jobList = $jobList;\n\t\t$this->timeFactory = $timeFactory;\n\t\t$this->config = $config;\n\t}\n\n\t/**\n\t * @throws MaximumSizeReachedException\n\t * @throws TargetAlreadyExists\n\t */\n\tpublic function createZipJob(array $fileIds, string $target): void {\n\t\t$user = $this->userSession->getUser();\n\t\tif ($user === null) {\n\t\t\tthrow new Exception('No user session available');\n\t\t}\n\t\tif (strlen($target) === 0) {\n\t\t\tthrow new Exception('The target is invalid');\n\t\t}\n\n\t\t$this->verifyAndGetFiles($user->getUID(), $fileIds, $target);\n\n\t\t$this->jobList->add(ZipJob::class, [\n\t\t\t'uid' => $user->getUID(),\n\t\t\t'fileIds' => $fileIds,\n\t\t\t'target' => $target,\n\t\t]);\n\t\t$this->notificationService->sendNotificationOnPending($user->getUID(), $target);\n\t}\n\n\t/**\n\t * @throws NotPermittedException\n\t * @throws NoUserException\n\t * @throws TargetAlreadyExists\n\t * @throws LockedException\n\t * @throws MaximumSizeReachedException\n\t */\n\tpublic function zip(string $uid, array $fileIds, string $target): File {\n\t\t$userFolder = $this->rootFolder->getUserFolder($uid);\n\n\t\t$files = $this->verifyAndGetFiles($uid, $fileIds, $target);\n\n\t\t$targetNode = $userFolder->newFile($target);\n\t\t$outStream = $targetNode->fopen('w');\n\n\t\t$countStream = CountWrapper::wrap($outStream, function ($readSize, $writtenSize) use ($targetNode) {\n\t\t\t$targetNode->getStorage()->getCache()->update($targetNode->getId(), ['size' => $writtenSize]);\n\t\t\t$targetNode->getStorage()->getPropagator()->propagateChange($targetNode->getInternalPath(), $this->timeFactory->getTime(), $writtenSize);\n\t\t});\n\n\t\t$zip = new ZipStreamer([\n\t\t\t'outstream' => $countStream,\n\t\t\t'zip64' => true,\n\t\t]);\n\n\t\tforeach ($files as $node) {\n\t\t\t$this->addNode($zip, $node, '');\n\t\t}\n\n\t\t$zip->finalize();\n\n\t\tfclose($outStream);\n\n\t\treturn $targetNode;\n\t}\n\n\tprivate function verifyAndGetFiles($uid, $fileIds, $target): array {\n\t\t$userFolder = $this->rootFolder->getUserFolder($uid);\n\n\t\ttry {\n\t\t\t$userFolder->get($target);\n\t\t\tthrow new TargetAlreadyExists();\n\t\t} catch (NotFoundException $e) {\n\t\t\t// Expected behavior that the file does not exist yet\n\t\t}\n\n\t\t$files = [];\n\t\t$size = 0;\n\t\tforeach ($fileIds as $fileId) {\n\t\t\t$nodes = $userFolder->getById($fileId);\n\n\t\t\tif (count($nodes) === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$node = array_pop($nodes);\n\t\t\t$files[] = $node;\n\t\t\t$size += $node->getSize();\n\t\t}\n\n\t\t$maxSize = (int)$this->config->getAppValue(Application::APP_NAME, 'max_compress_size', -1);\n\t\tif ($maxSize !== -1 && $size > $maxSize) {\n\t\t\tthrow new MaximumSizeReachedException();\n\t\t}\n\n\t\treturn $files;\n\t}\n\n\tprivate function addNode(ZipStreamer $streamer, Node $node, string $path): void {\n\t\tif ($node instanceof Folder) {\n\t\t\t$this->addFolder($streamer, $node, $path);\n\t\t}\n\n\t\tif ($node instanceof File) {\n\t\t\t$this->addFile($streamer, $node, $path);\n\t\t}\n\t}\n\n\tprivate function addFolder(ZipStreamer $streamer, Folder $folder, string $path): void {\n\t\t$nodes = $folder->getDirectoryListing();\n\n\t\tif (count($nodes) === 0) {\n\t\t\t$streamer->addEmptyDir($path . $folder->getName(), [\n\t\t\t\t'timestamp' => $folder->getMTime(),\n\t\t\t]);\n\t\t}\n\n\t\tforeach ($nodes as $node) {\n\t\t\t$this->addNode($streamer, $node, $path . $folder->getName() . '/');\n\t\t}\n\t}\n\n\tprivate function addFile(ZipStreamer $streamer, File $file, string $path): void {\n\t\t$stream = $file->fopen('r');\n\t\t$streamer->addFileFromStream($stream, $path . $file->getName(), [\n\t\t\t'timestamp' => $file->getMTime(),\n\t\t]);\n\t}\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/**\n * @copyright Copyright (c) 2021 Roeland Jago Douma <roeland@famdouma.nl>\n *\n * @author Roeland Jago Douma <roeland@famdouma.nl>\n *\n * @license GNU AGPL version 3 or any later version\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nnamespace OCA\\FilesZip\\Service;\n\nuse Exception;\nuse Icewind\\Streams\\CountWrapper;\nuse OC\\User\\NoUserException;\nuse OCA\\Files_Sharing\\SharedStorage;\nuse OCA\\FilesZip\\AppInfo\\Application;\nuse OCA\\FilesZip\\BackgroundJob\\ZipJob;\nuse OCA\\FilesZip\\Exceptions\\MaximumSizeReachedException;\nuse OCA\\FilesZip\\Exceptions\\TargetAlreadyExists;\nuse OCP\\AppFramework\\Utility\\ITimeFactory;\nuse OCP\\BackgroundJob\\IJobList;\nuse OCP\\Files\\File;\nuse OCP\\Files\\Folder;\nuse OCP\\Files\\IRootFolder;\nuse OCP\\Files\\Node;\nuse OCP\\Files\\NotFoundException;\nuse OCP\\Files\\NotPermittedException;\nuse OCP\\IConfig;\nuse OCP\\IUserSession;\nuse OCP\\Lock\\LockedException;\nuse OCP\\Share\\IAttributes;\nuse OCP\\Share\\IShare;\nuse ZipStreamer\\ZipStreamer;\n\nclass ZipService {\n\t/** @var IRootFolder */\n\tprivate $rootFolder;\n\t/** @var NotificationService */\n\tprivate $notificationService;\n\t/** @var IUserSession */\n\tprivate $userSession;\n\t/** @var IJobList */\n\tprivate $jobList;\n\t/** @var ITimeFactory */\n\tprivate $timeFactory;\n\t/** @var IConfig */\n\tprivate $config;\n\n\tpublic function __construct(\n\t\tIRootFolder $rootFolder,\n\t\tNotificationService $notificationService,\n\t\tIUserSession $userSession,\n\t\tIJobList $jobList,\n\t\tITimeFactory $timeFactory,\n\t\tIConfig $config\n\t) {\n\t\t$this->rootFolder = $rootFolder;\n\t\t$this->notificationService = $notificationService;\n\t\t$this->userSession = $userSession;\n\t\t$this->jobList = $jobList;\n\t\t$this->timeFactory = $timeFactory;\n\t\t$this->config = $config;\n\t}\n\n\t/**\n\t * @throws MaximumSizeReachedException\n\t * @throws TargetAlreadyExists\n\t */\n\tpublic function createZipJob(array $fileIds, string $target): void {\n\t\t$user = $this->userSession->getUser();\n\t\tif ($user === null) {\n\t\t\tthrow new Exception('No user session available');\n\t\t}\n\t\tif (strlen($target) === 0) {\n\t\t\tthrow new Exception('The target is invalid');\n\t\t}\n\n\t\t$this->verifyAndGetFiles($user->getUID(), $fileIds, $target);\n\n\t\t$this->jobList->add(ZipJob::class, [\n\t\t\t'uid' => $user->getUID(),\n\t\t\t'fileIds' => $fileIds,\n\t\t\t'target' => $target,\n\t\t]);\n\t\t$this->notificationService->sendNotificationOnPending($user->getUID(), $target);\n\t}\n\n\t/**\n\t * @throws NotPermittedException\n\t * @throws NoUserException\n\t * @throws TargetAlreadyExists\n\t * @throws LockedException\n\t * @throws MaximumSizeReachedException\n\t */\n\tpublic function zip(string $uid, array $fileIds, string $target): File {\n\t\t$userFolder = $this->rootFolder->getUserFolder($uid);\n\n\t\t$files = $this->verifyAndGetFiles($uid, $fileIds, $target);\n\n\t\t$targetNode = $userFolder->newFile($target);\n\t\t$outStream = $targetNode->fopen('w');\n\n\t\t$countStream = CountWrapper::wrap($outStream, function ($readSize, $writtenSize) use ($targetNode) {\n\t\t\t$targetNode->getStorage()->getCache()->update($targetNode->getId(), ['size' => $writtenSize]);\n\t\t\t$targetNode->getStorage()->getPropagator()->propagateChange($targetNode->getInternalPath(), $this->timeFactory->getTime(), $writtenSize);\n\t\t});\n\n\t\t$zip = new ZipStreamer([\n\t\t\t'outstream' => $countStream,\n\t\t\t'zip64' => true,\n\t\t]);\n\n\t\tforeach ($files as $node) {\n\t\t\t$this->addNode($zip, $node, '');\n\t\t}\n\n\t\t$zip->finalize();\n\n\t\tfclose($outStream);\n\n\t\treturn $targetNode;\n\t}\n\n\tprivate function verifyAndGetFiles($uid, $fileIds, $target): array {\n\t\t$userFolder = $this->rootFolder->getUserFolder($uid);\n\n\t\ttry {\n\t\t\t$userFolder->get($target);\n\t\t\tthrow new TargetAlreadyExists();\n\t\t} catch (NotFoundException $e) {\n\t\t\t// Expected behavior that the file does not exist yet\n\t\t}\n\n\t\t$files = [];\n\t\t$size = 0;\n\t\tforeach ($fileIds as $fileId) {\n\t\t\t$nodes = $userFolder->getById($fileId);\n\n\t\t\tif (count($nodes) === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/** @var Node $node */\n\t\t\t$node = array_pop($nodes);\n\n\t\t\t// Skip incoming shares without download permission\n\t\t\t$storage = $node->getStorage();\n\t\t\tif ($node->isShared() && $storage->instanceOfStorage(SharedStorage::class) && method_exists(IShare::class, 'getAttributes')) {\n\t\t\t\t/** @var SharedStorage $storage */\n\t\t\t\t$share = $storage->getShare();\n\t\t\t\t$hasShareAttributes = $share && $share->getAttributes() instanceof IAttributes;\n\t\t\t\tif ($hasShareAttributes && $share->getAttributes()->getAttribute('permissions', 'download') === false) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$files[] = $node;\n\t\t\t$size += $node->getSize();\n\t\t}\n\n\t\t$maxSize = (int)$this->config->getAppValue(Application::APP_NAME, 'max_compress_size', -1);\n\t\tif ($maxSize !== -1 && $size > $maxSize) {\n\t\t\tthrow new MaximumSizeReachedException();\n\t\t}\n\n\t\treturn $files;\n\t}\n\n\tprivate function addNode(ZipStreamer $streamer, Node $node, string $path): void {\n\t\tif ($node instanceof Folder) {\n\t\t\t$this->addFolder($streamer, $node, $path);\n\t\t}\n\n\t\tif ($node instanceof File) {\n\t\t\t$this->addFile($streamer, $node, $path);\n\t\t}\n\t}\n\n\tprivate function addFolder(ZipStreamer $streamer, Folder $folder, string $path): void {\n\t\t$nodes = $folder->getDirectoryListing();\n\n\t\tif (count($nodes) === 0) {\n\t\t\t$streamer->addEmptyDir($path . $folder->getName(), [\n\t\t\t\t'timestamp' => $folder->getMTime(),\n\t\t\t]);\n\t\t}\n\n\t\tforeach ($nodes as $node) {\n\t\t\t$this->addNode($streamer, $node, $path . $folder->getName() . '/');\n\t\t}\n\t}\n\n\tprivate function addFile(ZipStreamer $streamer, File $file, string $path): void {\n\t\t$stream = $file->fopen('r');\n\t\t$streamer->addFileFromStream($stream, $path . $file->getName(), [\n\t\t\t'timestamp' => $file->getMTime(),\n\t\t]);\n\t}\n}\n"], "filenames": ["lib/Service/ZipService.php"], "buggy_code_start_loc": [31], "buggy_code_end_loc": [157], "fixing_code_start_loc": [32], "fixing_code_end_loc": [174], "type": "CWE-281", "message": "Nextcloud files Zip app is a tool to create zip archives from one or multiple files from within Nextcloud. In affected versions users can download \"view-only\" files by zipping the complete folder. It is recommended that the Files ZIP app is upgraded to 1.2.1, 1.4.1, or 1.5.0. Users unable to upgrade should disable the file zip app.", "other": {"cve": {"id": "CVE-2024-22404", "sourceIdentifier": "security-advisories@github.com", "published": "2024-01-18T21:15:08.830", "lastModified": "2024-01-26T14:37:23.880", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Nextcloud files Zip app is a tool to create zip archives from one or multiple files from within Nextcloud. In affected versions users can download \"view-only\" files by zipping the complete folder. It is recommended that the Files ZIP app is upgraded to 1.2.1, 1.4.1, or 1.5.0. Users unable to upgrade should disable the file zip app."}, {"lang": "es", "value": "La aplicaci\u00f3n Nextcloud files Zip es una herramienta para crear archivos zip a partir de uno o varios archivos desde Nextcloud. En las versiones afectadas, los usuarios pueden descargar archivos de \"s\u00f3lo lectura\" comprimiendo la carpeta completa. Se recomienda actualizar la aplicaci\u00f3n Archivos ZIP a 1.2.1, 1.4.1 o 1.5.0. Los usuarios que no puedan actualizar deben desactivar la aplicaci\u00f3n de archivos zip."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-281"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:zipper:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.1", "matchCriteriaId": "2CACAF88-8B0B-4909-B633-02EE818C3F8C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:zipper:1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "AEFDD9DF-54EB-47B4-A70D-D3910C77F2B0"}]}]}], "references": [{"url": "https://github.com/nextcloud/files_zip/commit/43204539d517a13e945b90652718e2a213f46820", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/nextcloud/security-advisories/security/advisories/GHSA-vhj3-mch4-67fq", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://hackerone.com/reports/2247457", "source": "security-advisories@github.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nextcloud/files_zip/commit/43204539d517a13e945b90652718e2a213f46820"}}