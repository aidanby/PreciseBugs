{"buggy_code": ["package org.joget.apps.app.controller;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.joget.apm.APMUtil;\nimport org.joget.apps.app.dao.UserviewDefinitionDao;\nimport org.joget.apps.app.model.AppDefinition;\nimport org.joget.apps.app.model.UserviewDefinition;\nimport org.joget.apps.app.service.AppService;\nimport org.joget.apps.userview.model.Userview;\nimport org.joget.apps.userview.service.UserviewService;\nimport org.joget.apps.userview.service.UserviewThemeProcesser;\nimport org.joget.apps.userview.service.UserviewUtil;\nimport org.joget.commons.util.SecurityUtil;\nimport org.joget.commons.util.StringUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@Controller\npublic class UserviewWebController {\n\n    @Autowired\n    private UserviewService userviewService;\n    @Autowired\n    AppService appService;\n    @Autowired\n    UserviewDefinitionDao userviewDefinitionDao;\n\n    @RequestMapping({\"/userview/(*:appId)/(*:userviewId)/(~:key)\",\"/userview/(*:appId)/(*:userviewId)\",\"/userview/(*:appId)/(*:userviewId)/(*:key)/(*:menuId)\"})\n    public String view(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(value = \"menuId\", required = false) String menuId, @RequestParam(value = \"key\", required = false) String key, @RequestParam(value = \"embed\", required = false) Boolean embed) throws Exception {\n        if (embed == null) {\n            embed = false;\n        }\n        return embedView(map, request, response, appId, userviewId, menuId, key, embed, null);\n    }\n    \n    @RequestMapping({\"/embed/userview/(*:appId)/(*:userviewId)/(~:key)\",\"/embed/userview/(*:appId)/(*:userviewId)\",\"/embed/userview/(*:appId)/(*:userviewId)/(*:key)/(*:menuId)\"})\n    public String embedView(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(value = \"menuId\", required = false) String menuId, @RequestParam(value = \"key\", required = false) String key, Boolean embed, @RequestParam(value = \"embed\", required = false) Boolean embedParam) throws Exception {\n        if (APMUtil.isGlowrootAvailable()) {\n            //remove key & embed keyword from the url for better tracking\n            String url = request.getRequestURL().toString();\n            url = url.substring(0, url.indexOf(\"/userview\")) + \"/userview/\" + appId + \"/\" + userviewId;\n            if (menuId != null && !menuId.isEmpty()) {\n                url += \"/\" + menuId;\n            }\n            APMUtil.setTransactionName(url, 1001);\n        }\n        \n        // validate input\n        appId = SecurityUtil.validateStringInput(appId); \n        userviewId = SecurityUtil.validateStringInput(userviewId); \n        menuId = SecurityUtil.validateStringInput(menuId);        \n        key = SecurityUtil.validateStringInput(key);\n        SecurityUtil.validateBooleanInput(embed);\n        SecurityUtil.validateBooleanInput(embedParam);\n\n        if (embedParam != null && !embedParam) {\n            //exit embed mode by param\n            return \"redirect:/web/userview/\" + appId + \"/\" + userviewId + \"/\" + ((key != null )?key:\"\") + \"/\" + menuId + '?' +StringUtil.decodeURL(request.getQueryString());\n        } else if (embed == null) {\n            embed = true;\n        }\n        \n        //check for empty key\n        if (key != null && key.equals(Userview.USERVIEW_KEY_EMPTY_VALUE)) {\n            key = \"\";\n        }\n        \n        // retrieve app and userview\n        AppDefinition appDef = appService.getPublishedAppDefinition(appId);\n        if (appDef == null) {\n            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n            return null;\n        }\n        map.addAttribute(\"appId\", appDef.getId());\n        map.addAttribute(\"appDefinition\", appDef);\n        map.addAttribute(\"appVersion\", appDef.getVersion());\n        map.addAttribute(\"key\", key);\n        map.addAttribute(\"menuId\", menuId);\n        map.addAttribute(\"embed\", embed);\n        map.addAttribute(\"queryString\", request.getQueryString());\n        if (userviewService.isDefaultUserview(appDef.getId(), userviewId)) {\n            request.setAttribute(\"isDefaultUserview\", Boolean.TRUE);\n        }\n        UserviewDefinition userview = userviewDefinitionDao.loadById(userviewId, appDef);\n        if (userview != null) {\n            String json = userview.getJson();\n            Userview userviewObject = userviewService.createUserview(json, menuId, false, request.getContextPath(), request.getParameterMap(), key, embed);\n            UserviewThemeProcesser processer = new UserviewThemeProcesser(userviewObject, request);\n            map.addAttribute(\"userview\", userviewObject);\n            map.addAttribute(\"processer\", processer);\n            String view = processer.getView();\n            if (view != null) {\n                if (view.startsWith(\"redirect:\")) {\n                    map.clear();\n                }\n                return view;\n            }\n        }\n        return \"ubuilder/view\";\n    }\n    \n    @RequestMapping({\"/ulogin/(*:appId)/(*:userviewId)/(~:key)\",\"/ulogin/(*:appId)/(*:userviewId)\",\"/ulogin/(*:appId)/(*:userviewId)/(*:key)/(*:menuId)\"})\n    public String login(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(value = \"menuId\", required = false) String menuId, @RequestParam(value = \"key\", required = false) String key, @RequestParam(value = \"embed\", required = false) Boolean embed) throws Exception {\n        if (embed == null) {\n            embed = false;\n        }\n        return embedLogin(map, request, response, appId, userviewId, menuId, key, embed);\n    }\n\n    @RequestMapping({\"/embed/ulogin/(*:appId)/(*:userviewId)/(~:key)\",\"/embed/ulogin/(*:appId)/(*:userviewId)\",\"/embed/ulogin/(*:appId)/(*:userviewId)/(*:key)/(*:menuId)\"})\n    public String embedLogin(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(value = \"menuId\", required = false) String menuId, @RequestParam(value = \"key\", required = false) String key, Boolean embed) throws Exception {\n        if (embed == null) {\n            embed = true;\n        }\n        \n        //check for empty key\n        if (key != null && key.equals(Userview.USERVIEW_KEY_EMPTY_VALUE)) {\n            key = null;\n        }\n        \n        // validate input\n        SecurityUtil.validateStringInput(appId);        \n        SecurityUtil.validateStringInput(menuId);        \n        SecurityUtil.validateStringInput(key);\n        SecurityUtil.validateBooleanInput(embed);\n\n        // retrieve app and userview\n        AppDefinition appDef = appService.getPublishedAppDefinition(appId);\n        if (appDef == null) {\n            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n            return null;\n        }\n        map.addAttribute(\"appId\", appDef.getId());\n        map.addAttribute(\"appDefinition\", appDef);\n        map.addAttribute(\"appVersion\", appDef.getVersion());\n        map.addAttribute(\"key\", key);\n        map.addAttribute(\"menuId\", menuId);\n        map.addAttribute(\"embed\", embed);\n        map.addAttribute(\"queryString\", request.getQueryString());\n        UserviewDefinition userview = userviewDefinitionDao.loadById(userviewId, appDef);\n        if (userview != null) {\n            String json = userview.getJson();\n            Userview userviewObject = userviewService.createUserview(json, menuId, false, request.getContextPath(), request.getParameterMap(), key, embed);\n            UserviewThemeProcesser processer = new UserviewThemeProcesser(userviewObject, request);\n            map.addAttribute(\"userview\", userviewObject);\n            map.addAttribute(\"processer\", processer);\n            String view = processer.getLoginView();\n            if (view != null) {\n                if (view.startsWith(\"redirect:\")) {\n                    map.clear();\n                }\n                return view;\n            }\n        }\n\n        return \"ubuilder/login\";\n    }\n    \n    @RequestMapping({\"/userview/(*:appId)/(*:userviewId)/manifest\"})\n    public void manifest(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId) throws IOException {\n        String manifest = UserviewUtil.getManifest(SecurityUtil.validateStringInput(appId), SecurityUtil.validateStringInput(userviewId));\n        response.setContentType(\"application/manifest+json;charset=UTF-8\");\n        PrintWriter writer = response.getWriter();\n        writer.println(manifest);\n    }\n    \n    @RequestMapping({\"/userview/(*:appId)/(*:userviewId)/(*:key)/serviceworker\"})\n    public void serviceWorker(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(\"key\") String userviewKey) throws IOException {\n        String serviceWorker = UserviewUtil.getServiceWorker(SecurityUtil.validateStringInput(appId), SecurityUtil.validateStringInput(userviewId), SecurityUtil.validateStringInput(userviewKey));\n        response.setContentType(\"application/javascript;charset=UTF-8\");\n        response.setHeader(\"Service-Worker-Allowed\", (request.getContextPath().isEmpty())?\"/\":request.getContextPath());\n        PrintWriter writer = response.getWriter();\n        writer.println(serviceWorker);\n    }\n    \n    @RequestMapping({\"/userview/(*:appId)/(*:userviewId)/(*:key)/cacheUrls\"})\n    public void cacheUrls(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(\"key\") String userviewKey) throws IOException {\n        String cacheUrlsJSON = UserviewUtil.getCacheUrls(SecurityUtil.validateStringInput(appId), SecurityUtil.validateStringInput(userviewId), SecurityUtil.validateStringInput(userviewKey), request.getContextPath());\n        response.setContentType(\"application/json;charset=UTF-8\");\n        PrintWriter writer = response.getWriter();\n        writer.println(cacheUrlsJSON);\n    }\n}\n", "package org.joget.apps.userview.service;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.joget.apps.app.dao.UserviewDefinitionDao;\nimport org.joget.apps.app.model.AppDefinition;\nimport org.joget.apps.app.model.MobileElement;\nimport org.joget.apps.app.model.UserviewDefinition;\nimport org.joget.apps.app.service.AppService;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.app.service.MobileUtil;\nimport org.joget.apps.userview.model.CachedUserviewMenu;\nimport org.joget.apps.userview.model.Userview;\nimport org.joget.apps.userview.model.UserviewCategory;\nimport org.joget.apps.userview.model.UserviewMenu;\nimport org.joget.apps.userview.model.Permission;\nimport org.joget.apps.userview.model.UserviewSetting;\nimport org.joget.apps.userview.model.UserviewTheme;\nimport org.joget.commons.spring.model.Setting;\nimport org.joget.commons.util.LogUtil;\nimport org.joget.commons.util.ResourceBundleUtil;\nimport org.joget.commons.util.SetupManager;\nimport org.joget.commons.util.StringUtil;\nimport org.joget.directory.model.User;\nimport org.joget.directory.model.service.ExtDirectoryManager;\nimport org.joget.plugin.base.PluginManager;\nimport org.joget.plugin.property.service.PropertyUtil;\nimport org.joget.workflow.model.service.WorkflowUserManager;\nimport org.joget.workflow.util.WorkflowUtil;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.TransactionStatus;\nimport org.springframework.transaction.support.TransactionCallback;\nimport org.springframework.transaction.support.TransactionTemplate;\n\n/**\n * Service methods used to parse userview json definition to create Userview\n * \n */\n@Service(\"userviewService\")\npublic class UserviewService {\n\n    @Autowired\n    private PluginManager pluginManager;\n    @Autowired\n    private WorkflowUserManager workflowUserManager;\n    @Autowired\n    private AppService appService;\n    @Autowired\n    UserviewDefinitionDao userviewDefinitionDao;\n    @Autowired\n    private SetupManager setupManager;\n    @Autowired\n    @Qualifier(\"main\")\n    ExtDirectoryManager directoryManager;\n\n    /**\n     * Get userview setting object\n     * @param appDef\n     * @param json\n     * @return setting\n     */\n    public UserviewSetting getUserviewSetting(AppDefinition appDef, String json) {\n        UserviewSetting setting = null;\n        \n        //process json with hash variable\n        json = AppUtil.processHashVariable(json, null, StringUtil.TYPE_JSON, null, appDef);\n        \n        User currentUser = workflowUserManager.getCurrentUser();\n        \n        Map<String, Object> requestParameters = new HashMap<String, Object>();\n        requestParameters.put(\"appId\", appDef.getAppId());\n        requestParameters.put(\"appVersion\", appDef.getVersion().toString());\n        \n        Userview userview = new Userview();\n        \n        try {\n            //set userview properties\n            JSONObject userviewObj = new JSONObject(json);\n            userview.setProperties(PropertyUtil.getPropertiesValueFromJson(userviewObj.getJSONObject(\"properties\").toString()));\n\n            //set Setting\n            JSONObject settingObj = userviewObj.getJSONObject(\"setting\");\n            setting = new UserviewSetting();\n            setting.setProperties(PropertyUtil.getPropertiesValueFromJson(settingObj.getJSONObject(\"properties\").toString()));\n\n            //set theme & permission\n            try {\n                JSONObject themeObj = settingObj.getJSONObject(\"properties\").getJSONObject(\"theme\");\n                UserviewTheme theme = (UserviewTheme) pluginManager.getPlugin(themeObj.getString(\"className\"));\n                theme.setProperties(PropertyUtil.getPropertiesValueFromJson(themeObj.getJSONObject(\"properties\").toString()));\n                theme.setRequestParameters(requestParameters);\n                theme.setUserview(userview);\n                setting.setTheme(theme);\n            } catch (Exception e) {\n                LogUtil.debug(getClass().getName(), \"set theme error.\");\n            }\n            try {\n                if (!\"true\".equals(setting.getPropertyString(\"tempDisablePermissionChecking\"))) {\n                    JSONObject permissionObj = settingObj.getJSONObject(\"properties\").getJSONObject(\"permission\");\n                    Permission permission = null;\n                    String permissionClassName = permissionObj.getString(\"className\");\n                    if (permissionClassName != null && !permissionClassName.isEmpty()) {\n                        permission = (Permission) pluginManager.getPlugin(permissionClassName);\n                    }\n                    if (permission != null) {\n                        permission.setProperties(PropertyUtil.getPropertiesValueFromJson(permissionObj.getJSONObject(\"properties\").toString()));\n                        permission.setRequestParameters(requestParameters);\n                        permission.setCurrentUser(currentUser);\n                        setting.setPermission(permission);\n                    }\n                }\n            } catch (Exception e) {\n                LogUtil.debug(getClass().getName(), \"set permission error.\");\n            }\n            userview.setSetting(setting);\n        } catch (Exception ex) {\n            LogUtil.debug(getClass().getName(), \"set userview setting error.\");\n        }\n\n        return setting;\n    }\n    \n    /**\n     * Create userview fron json\n     * @return\n     */\n    public Userview createUserview(String json, String menuId, boolean preview, String contextPath, Map requestParameters, String key, Boolean embed) {\n        AppDefinition appDef = AppUtil.getCurrentAppDefinition();\n        return createUserview(appDef, json, menuId, preview, contextPath, requestParameters, key, embed);\n    }\n\n    /**\n     * Create userview fron json\n     * @return\n     */\n    public Userview createUserview(AppDefinition appDef, String json, String menuId, boolean preview, String contextPath, Map requestParameters, String key, Boolean embed) {\n        String permissionKey = Permission.DEFAULT;\n                \n        if (key != null && key.trim().length() == 0) {\n            key = null;\n        }\n        if (key != null) {\n            key = StringEscapeUtils.escapeHtml(key);\n        }\n\n        //process json with hash variable\n        json = AppUtil.processHashVariable(json, null, StringUtil.TYPE_JSON, null, appDef);\n        json = AppUtil.replaceAppMessages(json, StringUtil.TYPE_JSON);\n\n        User currentUser = workflowUserManager.getCurrentUser();\n\n        if (requestParameters == null) {\n            requestParameters = new HashMap<String, Object>();\n        }\n        requestParameters = convertRequestParamMap(requestParameters);\n        requestParameters.put(\"contextPath\", contextPath);\n        requestParameters.put(\"isPreview\", Boolean.toString(preview));\n        requestParameters.put(\"embed\", Boolean.toString(embed));\n        requestParameters.put(\"appId\", appDef.getAppId());\n        requestParameters.put(\"appVersion\", appDef.getVersion().toString());\n\n        String appId = appDef.getId();\n        String appVersion = appDef.getVersion().toString();\n        Userview userview = new Userview();\n        userview.setParams(requestParameters);\n        \n        boolean userviewPermission = false;\n        \n        //if screenshot, set user to null (anonymous)\n        User currentThreadUser = currentUser;\n        boolean isScreenCapture = workflowUserManager.isCurrentUserInRole(WorkflowUserManager.ROLE_ADMIN) && \"true\".equalsIgnoreCase((String) requestParameters.get(\"_isScreenCapture\"));\n        if (isScreenCapture) {\n            currentUser = null;\n            workflowUserManager.setCurrentThreadUser(WorkflowUserManager.ROLE_ANONYMOUS);\n        }\n\n        try {\n            //set userview properties\n            JSONObject userviewObj = new JSONObject(json);\n            userview.setProperties(PropertyUtil.getProperties(userviewObj.getJSONObject(\"properties\")));\n\n            //set Setting\n            JSONObject settingObj = userviewObj.getJSONObject(\"setting\");\n            UserviewSetting setting = new UserviewSetting();\n            setting.setProperties(PropertyUtil.getProperties(settingObj.getJSONObject(\"properties\")));\n\n            //set theme & permission\n            try {\n                JSONObject themeObj = settingObj.getJSONObject(\"properties\").getJSONObject(\"theme\");\n                JSONObject themeProperties = themeObj.getJSONObject(\"properties\");\n                UserviewTheme theme = (UserviewTheme) pluginManager.getPlugin(themeObj.getString(\"className\"));\n                if (theme == null) {\n                    String defaultTheme = ResourceBundleUtil.getMessage(\"generator.userview.theme\");\n                    theme = (UserviewTheme) pluginManager.getPlugin(defaultTheme);\n                    String defaultThemePropertiesKey = \"generator.userview.theme.\" + defaultTheme + \".properties\";\n                    String defaultThemeProperties = \"{\" + ResourceBundleUtil.getMessage(defaultThemePropertiesKey) + \"}\";\n                    themeProperties = new JSONObject(defaultThemeProperties);\n                }\n                theme.setProperties(PropertyUtil.getProperties(themeProperties));\n                theme.setRequestParameters(requestParameters);\n                theme.setUserview(userview);\n                setting.setTheme(theme);\n            } catch (Exception e) {\n                LogUtil.debug(getClass().getName(), \"set theme error.\");\n            }\n            try {\n                if (!\"true\".equals(setting.getPropertyString(\"tempDisablePermissionChecking\"))) {\n                    if (settingObj.getJSONObject(\"properties\").has(\"permission_rules\")) {\n                        JSONArray permissionRules = settingObj.getJSONObject(\"properties\").getJSONArray(\"permission_rules\");\n                        if (permissionRules != null && permissionRules.length() > 0) {\n                            for (int i = 0; i < permissionRules.length(); i++) {\n                                JSONObject rule = permissionRules.getJSONObject(i);\n                                if (rule.has(\"permission\")) {\n                                    JSONObject permissionObj = rule.optJSONObject(\"permission\");\n                                    userviewPermission = UserviewUtil.getPermisionResult(permissionObj, requestParameters, currentUser);\n                                    if (userviewPermission) {\n                                        permissionKey = rule.getString(\"permission_key\");\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    if (!userviewPermission) {\n                        if (settingObj.getJSONObject(\"properties\").has(\"permission\")) {\n                            JSONObject permissionObj = settingObj.getJSONObject(\"properties\").getJSONObject(\"permission\");\n                            userviewPermission = UserviewUtil.getPermisionResult(permissionObj, requestParameters, currentUser);\n                        } else {\n                            userviewPermission = true;\n                        }\n                    }\n                } else {\n                    userviewPermission = true;\n                }\n            } catch (Exception e) {\n                LogUtil.debug(getClass().getName(), \"set permission error.\");\n            }\n            userview.setSetting(setting);\n\n            //set categories\n            Collection<UserviewCategory> categories = new ArrayList<UserviewCategory>();\n            \n            if (userviewPermission) {\n                JSONArray categoriesArray = userviewObj.getJSONArray(\"categories\");\n                for (int i = 0; i < categoriesArray.length(); i++) {\n                    JSONObject categoryObj = (JSONObject) categoriesArray.get(i);\n\n                    UserviewCategory category = new UserviewCategory();\n                    category.setProperties(PropertyUtil.getProperties(categoryObj.getJSONObject(\"properties\")));\n                    \n                    //check for permission\n                    JSONObject ruleObj = null;\n                    if (Permission.DEFAULT.equals(permissionKey)) {\n                        ruleObj = categoryObj.getJSONObject(\"properties\");\n                    } else if (categoryObj.getJSONObject(\"properties\").has(\"permission_rules\")) {\n                        JSONObject permissionRules = categoryObj.getJSONObject(\"properties\").getJSONObject(\"permission_rules\");\n                        if (permissionRules != null && permissionRules.has(permissionKey)) {\n                            ruleObj = permissionRules.getJSONObject(permissionKey);\n                        }\n                    }\n                        \n                    boolean hasPermis = false;\n                    if (preview || \"true\".equals(setting.getPropertyString(\"tempDisablePermissionChecking\"))) {\n                        hasPermis = true;\n                    } else {\n                        if (ruleObj != null) {\n                            if (ruleObj.has(\"permissionDeny\") && \"true\".equals(ruleObj.getString(\"permissionDeny\"))) {\n                                hasPermis = false;\n                            } else if (ruleObj.has(\"permission\")){\n                                try {\n                                    JSONObject permissionObj = ruleObj.getJSONObject(\"permission\");\n                                    hasPermis = UserviewUtil.getPermisionResult(permissionObj, requestParameters, currentUser);\n                                } catch (Exception e) {\n                                    LogUtil.debug(getClass().getName(), \"set category permission error.\");\n                                }\n                            } else {\n                                hasPermis = true;\n                            }\n                            \n                            //handle for permission rule to override the default setting\n                            if (ruleObj.has(\"hide\") && \"yes\".equals(ruleObj.getString(\"hide\"))) {\n                                category.setProperty(\"hide\", \"yes\");\n                            } else { \n                                category.setProperty(\"hide\", \"\");\n                            }\n                        } else { //when no properties found for the category object\n                            hasPermis = true;\n                            category.setProperty(\"hide\", \"\");\n                        }\n                    }\n\n                    if (hasPermis) {\n                        //set menus\n                        JSONArray menusArray = categoryObj.getJSONArray(\"menus\");\n                        Collection<UserviewMenu> menus = new ArrayList<UserviewMenu>();\n                        for (int j = 0; j < menusArray.length(); j++) {\n                            try {\n                                //set menu\n                                JSONObject menuObj = (JSONObject) menusArray.get(j);\n                                UserviewMenu menu = (UserviewMenu) pluginManager.getPlugin(menuObj.getString(\"className\"));\n\n                                // check for mobile support\n                                boolean isMobileView = MobileUtil.isMobileView();\n                                if (isMobileView && (menu instanceof MobileElement) && !((MobileElement)menu).isMobileSupported()) {\n                                    // mobile not supported, skip this menu\n                                    continue;\n                                }\n                                \n                                //check for deny\n                                JSONObject menuRuleObj = null;\n                                if (Permission.DEFAULT.equals(permissionKey)) {\n                                    menuRuleObj = menuObj.getJSONObject(\"properties\");\n                                } else if (menuObj.getJSONObject(\"properties\").has(\"permission_rules\")) {\n                                    JSONObject permissionRules = menuObj.getJSONObject(\"properties\").getJSONObject(\"permission_rules\");\n                                    if (permissionRules != null && permissionRules.has(permissionKey)) {\n                                        menuRuleObj = permissionRules.getJSONObject(permissionKey);\n                                    }\n                                }\n                                if (menuRuleObj != null && menuRuleObj.has(\"permissionDeny\") && \"true\".equals(menuRuleObj.getString(\"permissionDeny\"))) {\n                                    continue;\n                                }\n\n                                menu.setProperties(PropertyUtil.getProperties(menuObj.getJSONObject(\"properties\")));\n                                menu.setRequestParameters(requestParameters);\n                                menu.setUserview(userview);\n                                String mId = getMenuId(menu);\n                                menu.setProperty(\"menuId\", mId);\n\n                                if (preview) {\n                                    menu.setUrl(contextPath + \"/web/console/app/\" + appId + \"/\" + appVersion + \"/userview/builderPreview/\" + userview.getPropertyString(\"id\") + \"/\" + mId);\n                                } else {\n                                    menu.setKey(key);\n                                    String prefix = \"/web/userview/\";\n\n                                    if (embed) {\n                                        prefix = \"/web/embed/userview/\";\n                                    }\n\n                                    menu.setUrl(contextPath + prefix + appId + \"/\" + userview.getPropertyString(\"id\") + \"/\" + ((key != null) ? StringEscapeUtils.escapeHtml(key) : Userview.USERVIEW_KEY_EMPTY_VALUE) + \"/\" + mId);\n                                }\n\n                                //set Current, if current menu id is empty, search the 1st valid menu\n                                if (((\"\".equals(menuId) || \"index\".equals(menuId) || menuId == null) && userview.getCurrent() == null && menu.isHomePageSupported())\n                                        || (menuId != null && menuId.equals(mId))) {\n                                    userview.setCurrent(menu);\n                                    userview.setCurrentCategory(category);\n                                }\n\n                                //set home menu Id\n                                if (userview.getPropertyString(\"homeMenuId\") == null || userview.getPropertyString(\"homeMenuId\").isEmpty() && menu.isHomePageSupported()) {\n                                    userview.setProperty(\"homeMenuId\", mId);\n                                }\n                                \n                                if (menuRuleObj == null || !menuRuleObj.has(\"permissionHidden\") || !\"true\".equals(menuRuleObj.getString(\"permissionHidden\"))) {\n                                    menu = new CachedUserviewMenu(menu);\n                                    menus.add(menu);\n                                }\n                            } catch (Exception e) {\n                                LogUtil.debug(getClass().getName(), \"Userview Menu class file not found\");\n                            }\n                        }\n\n                        category.setMenus(menus);\n                        if (!\"yes\".equals(category.getPropertyString(\"hide\")) && menus.size() > 0) {\n                            categories.add(category);\n                        }\n                    }\n                }\n            }\n            userview.setCategories(categories);\n        } catch (Exception ex) {\n            LogUtil.error(getClass().getName(), ex, \"Create Userview Error!!\");\n        } finally {\n            if (isScreenCapture) {\n                workflowUserManager.setCurrentThreadUser(currentThreadUser);\n            }\n        }\n        return userview;\n    }\n\n    /**\n     * Gets the id of an userview menu\n     * @param menu\n     * @return \n     */\n    public String getMenuId(UserviewMenu menu) {\n        String menuId = menu.getPropertyString(\"id\");\n        if (menu.getPropertyString(\"customId\") != null && menu.getPropertyString(\"customId\").trim().length() > 0) {\n            menuId = menu.getPropertyString(\"customId\");\n        }\n        return menuId;\n    }\n\n    /**\n     * Gets the name of a userview from json definition\n     * @param json\n     * @return \n     */\n    public String getUserviewName(String json) {\n        try {\n            JSONObject userviewObj = new JSONObject(json);\n            return PropertyUtil.getProperties(userviewObj.getJSONObject(\"properties\")).get(\"name\").toString();\n        } catch (Exception ex) {\n            LogUtil.error(getClass().getName(), ex, \"Get Userview Name Error!!\");\n        }\n        return \"\";\n    }\n    \n    /**\n     * Gets the userview theme used by an userview\n     * @param appId\n     * @param userviewId\n     * @return \n     */\n    public UserviewTheme getUserviewTheme(String appId, String userviewId) {\n        UserviewTheme theme = null;\n        \n        AppDefinition appDef = appService.getPublishedAppDefinition(appId);\n        HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n        if (appDef != null && request != null) {\n            UserviewDefinition userviewDef = userviewDefinitionDao.loadById(userviewId, appDef);\n            if (userviewDef != null) {\n                String json = userviewDef.getJson();\n                //process json with hash variable\n                json = AppUtil.processHashVariable(json, null, StringUtil.TYPE_JSON, null, appDef);\n                \n                Map requestParameters = convertRequestParamMap(request.getParameterMap());\n                requestParameters.put(\"contextPath\", request.getContextPath());\n                requestParameters.put(\"appId\", appDef.getAppId());\n                requestParameters.put(\"appVersion\", appDef.getVersion().toString());\n\n                try {\n                    Userview userview = new Userview();\n\n                    //set userview properties\n                    JSONObject userviewObj = new JSONObject(json);\n                    userview.setProperties(PropertyUtil.getProperties(userviewObj.getJSONObject(\"properties\")));\n\n                    JSONObject settingObj = userviewObj.getJSONObject(\"setting\");\n                    JSONObject themeObj = settingObj.getJSONObject(\"properties\").getJSONObject(\"theme\");\n\n                    theme = (UserviewTheme) pluginManager.getPlugin(themeObj.getString(\"className\"));\n                    if (theme != null) {\n                        theme.setProperties(PropertyUtil.getProperties(themeObj.getJSONObject(\"properties\")));\n                        theme.setRequestParameters(requestParameters);\n                        theme.setUserview(userview);\n                    }\n\n                } catch (Exception e) {\n                    LogUtil.debug(getClass().getName(), \"get userview theme error.\");\n                }\n            }\n        }\n        return theme;\n    }\n\n    /**\n     * Gets userview description from json definition\n     * @param json\n     * @return \n     */\n    public String getUserviewDescription(String json) {\n        try {\n            JSONObject userviewObj = new JSONObject(json);\n            JSONObject settingObj = userviewObj.getJSONObject(\"setting\");\n            Object description = PropertyUtil.getProperties(settingObj.getJSONObject(\"properties\")).get(\"userviewDescription\");\n            return (description != null) ? description.toString() : \"\";\n        } catch (Exception ex) {\n            LogUtil.error(getClass().getName(), ex, \"Get Userview Description Error!!\");\n        }\n        return \"\";\n    }\n\n    /**\n     * Gets the userview theme used by an userview\n     * @param appId\n     * @param version\n     * @param userviewId\n     * @return \n     */\n    public Set<String> getAllMenuIds(String appId, String version, String userviewId) {\n        Set<String> ids = new HashSet<String>();\n        \n        AppDefinition appDef = appService.getAppDefinition(appId, version);\n        UserviewDefinition userviewDef = userviewDefinitionDao.loadById(userviewId, appDef);\n        if (userviewDef != null) {\n            String json = userviewDef.getJson();\n\n            try {\n                //set userview properties\n                JSONObject userviewObj = new JSONObject(json);\n                JSONArray categoriesArray = userviewObj.getJSONArray(\"categories\");\n                for (int i = 0; i < categoriesArray.length(); i++) {\n                    JSONObject categoryObj = (JSONObject) categoriesArray.get(i);\n                    JSONArray menusArray = categoryObj.getJSONArray(\"menus\");\n                    for (int j = 0; j < menusArray.length(); j++) {\n                        JSONObject menuObj = (JSONObject) menusArray.get(j);\n                        JSONObject props = menuObj.getJSONObject(\"properties\");\n                        String id = props.getString(\"id\");\n                        String customId = (props.has(\"customId\"))?props.getString(\"customId\"):null;\n                        if (customId != null && !customId.isEmpty()) {\n                            ids.add(customId);\n                        } else {\n                            ids.add(id);\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                LogUtil.debug(getClass().getName(), \"get userview menu ids error.\");\n            }\n        }\n        \n        return ids;\n    }\n    \n    private Map convertRequestParamMap(Map params) {\n        Map result = new HashMap();\n        for (String key : (Set<String>) params.keySet()) {\n            key = StringEscapeUtils.escapeHtml(key);\n            String[] paramValue = (String[]) params.get(key);\n            if (paramValue.length == 1) {\n                result.put(key, paramValue[0]);\n            } else {\n                result.put(key, paramValue);\n            }\n        }\n        return result;\n    }\n    \n    public UserviewDefinition getDefaultUserview() {\n        // check for app center userview setting\n        String defaultUserviewProperty = \"defaultUserview\";\n        UserviewDefinition defaultUserview = null;\n        Setting defaultUserviewSetting = setupManager.getSettingByProperty(defaultUserviewProperty);\n        if (defaultUserviewSetting != null) {\n            // check app center userview is published\n            String defaultUserviewValue = defaultUserviewSetting.getValue();\n            StringTokenizer st = new StringTokenizer(defaultUserviewValue, \"/\");\n            String appId = (st.hasMoreTokens()) ? st.nextToken() : null;\n            String userviewId = (st.hasMoreTokens()) ? st.nextToken() : null;\n            if (appId != null && userviewId != null) {\n                AppDefinition appDef = appService.getPublishedAppDefinition(appId);\n                if (appDef != null) {\n                    defaultUserview = userviewDefinitionDao.loadById(userviewId, appDef);\n                }\n            }            \n        } else {\n            // import default app center app\n            String path = \"/setup/apps/APP_appcenter7-1.zip\";\n            LogUtil.info(getClass().getName(), \"Import default app center \" + path);\n            InputStream in = null;\n            try {\n                in = getClass().getResourceAsStream(path);\n                byte[] fileContent = IOUtils.toByteArray(in);\n                final AppDefinition appDef = appService.importApp(fileContent);\n                if (appDef != null) {\n                    TransactionTemplate transactionTemplate = (TransactionTemplate) AppUtil.getApplicationContext().getBean(\"transactionTemplate\");\n                    transactionTemplate.execute(new TransactionCallback<Object>() {\n                        public Object doInTransaction(TransactionStatus ts) {\n                            appService.publishApp(appDef.getId(), null);\n                            return null;\n                        }\n                    });\n                    // get app center userview\n                    Collection<UserviewDefinition> userviewList = appDef.getUserviewDefinitionList();\n                    if (!userviewList.isEmpty()) {\n                        String userviewId = userviewList.iterator().next().getId();\n                        defaultUserview = userviewDefinitionDao.loadById(userviewId, appDef);\n                        \n                        // save setting\n                        String value = defaultUserview.getAppId() + \"/\" + defaultUserview.getId();\n                        Setting newSetting = new Setting();\n                        newSetting.setProperty(defaultUserviewProperty);\n                        newSetting.setValue(value);\n                        setupManager.saveSetting(newSetting);                        \n                    }\n                }\n            } catch (Exception ex) {\n                LogUtil.error(getClass().getName(), ex, \"Failed to import default app center \" + path);\n            } finally {\n                try {\n                    if (in != null) {\n                        in.close();\n                    }\n                } catch (IOException e) {\n                }\n            }\n        }\n        return defaultUserview;\n    }\n\n    public boolean isDefaultUserview(String appId, String userviewId) {\n        boolean result = false;\n        String userviewPath = appId + \"/\" + userviewId;\n        Setting defaultUserviewSetting = setupManager.getSettingByProperty(\"defaultUserview\");\n        if (defaultUserviewSetting != null) {\n            // check app center userview is published\n            String defaultUserviewValue = defaultUserviewSetting.getValue();\n            result = userviewPath.equals(defaultUserviewValue);\n        }\n        return result;\n    }\n    \n}\n", "package org.joget.plugin.enterprise;\n\nimport com.asual.lesscss.LessEngine;\nimport de.bripkens.gravatar.DefaultImage;\nimport de.bripkens.gravatar.Gravatar;\nimport de.bripkens.gravatar.Rating;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport net.sf.ehcache.Cache;\nimport net.sf.ehcache.Element;\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.app.service.MobileUtil;\nimport org.joget.apps.userview.lib.InboxMenu;\nimport org.joget.apps.userview.model.Userview;\nimport org.joget.apps.userview.model.UserviewCategory;\nimport org.joget.apps.userview.model.UserviewMenu;\nimport org.joget.apps.userview.model.UserviewPwaTheme;\nimport org.joget.apps.userview.model.UserviewSetting;\nimport org.joget.apps.userview.model.UserviewV5Theme;\nimport org.joget.apps.userview.service.UserviewUtil;\nimport org.joget.commons.util.LogUtil;\nimport org.joget.commons.util.ResourceBundleUtil;\nimport org.joget.commons.util.StringUtil;\nimport org.joget.commons.util.TimeZoneUtil;\nimport org.joget.directory.model.User;\nimport org.joget.directory.model.service.DirectoryUtil;\nimport org.joget.plugin.base.PluginWebSupport;\nimport org.joget.workflow.model.WorkflowAssignment;\nimport org.joget.workflow.model.service.WorkflowManager;\nimport org.joget.workflow.model.service.WorkflowUserManager;\nimport org.joget.workflow.util.WorkflowUtil;\nimport org.json.JSONObject;\n\npublic class UniversalTheme extends UserviewV5Theme implements UserviewPwaTheme, PluginWebSupport {\n    protected final static String PROFILE = \"_ja_profile\"; \n    protected final static String INBOX = \"_ja_inbox\"; \n    protected static LessEngine lessEngine = new LessEngine();\n\n    public enum Color {\n        RED(\"#F44336\", \"#D32F2F\", \"\"),\n        PINK(\"#E91E63\", \"#C2185B\", \"\"),\n        PURPLE(\"#9C27B0\", \"#7B1FA2\", \"\"),\n        DEEP_PURPLE(\"#673AB7\", \"#512DA8\", \"\"),\n        INDIGO(\"#3F51B5\", \"#303F9F\", \"\"),\n        BLUE(\"#0D6EFD\", \"#1976D2\", \"\"),\n        LIGHT_BLUE(\"#03A9F4\", \"#0288D1\", \"\"),\n        CYAN(\"#00BCD4\", \"#0097A7\", \"\"),\n        TEAL(\"#009688\", \"#00796B\", \"\"),\n        GREEN(\"#4CAF50\", \"#388E3C\", \"\"),\n        LIGHT_GREEN(\"#8BC34A\", \"#689F38\", \"\"),\n        LIME(\"#CDDC39\", \"#AFB42B\", \"\"),\n        YELLOW(\"#FFEB3B\", \"#FBC02D\", \"\"),\n        AMBER(\"#FFC107\", \"#FFA000\", \"\"),\n        ORANGE(\"#FF9800\", \"#F57C00\", \"\"),\n        DEEP_ORANGE(\"#FF5722\", \"#E64A19\", \"\"),\n        BROWN(\"#795548\", \"#795548\", \"\"),\n        GREY(\"#6c757D\", \"#616161\", \"\"),\n        BLUE_GREY(\"#607D8B\", \"#455A64\", \"\"),\n        DEEP_GREY(\"#2B343A\", \"#1E262B\", \"#222c32\"),\n        LAVENDERBLUSH(\"#FFF0F5\", \"\", \"\"),\n        THISTLE(\"#D8BFD8\", \"\", \"\"),\n        PLUM(\"#DDA0DD\", \"\", \"\"),\n        LAVENDER(\"#E6E6FA\", \"\", \"\"),\n        GHOSTWHITE(\"#F8F8FF\", \"\", \"\"),\n        DARKROYALBLUE(\"#3b5998\", \"\", \"\"),\n        ROYALBLUE(\"#4169E1\", \"\", \"\"),\n        CORNFLOWERBLUE(\"#6495ED\", \"\", \"\"),\n        ALICEBLUE(\"#F0F8FF\", \"\", \"\"),\n        LIGHTSTEELBLUE(\"#B0C4DE\", \"\", \"\"),\n        STEELBLUE(\"#4682B4\", \"\", \"\"),\n        LIGHTSKYBLUE(\"#87CEFA\", \"\", \"\"),\n        SKYBLUE(\"#87CEEB\", \"\", \"\"),\n        DEEPSKYBLUE(\"#00BFFF\", \"\", \"\"),\n        AZURE(\"#F0FFFF\", \"\", \"\"),\n        LIGHTCYAN(\"#E1FFFF\", \"\", \"\"),\n        IVORY(\"#FFFFF0\", \"\", \"\"),\n        LEMONCHIFFON(\"#FFFACD\", \"\", \"\"),\n        WHEAT(\"#F5DEB3\", \"\", \"\"),\n        LIGHTGREY(\"#D3D3D3\", \"\", \"\"),\n        SILVER(\"#C0C0C0\", \"\", \"\"),\n        BLACK(\"#000000\", \"#222222\", \"\"),\n        WHITE(\"#FFFFFF\", \"\", \"#DDDDDD\");\n        \n        protected final String color;  \n        protected final String dark; \n        protected final String light;\n        Color(String color, String dark, String light) {\n            this.color = color;\n            this.dark = dark;\n            this.light = light;\n        }\n    }\n    \n    @Override\n    public String getName() {\n        return \"V6 Universal Theme\";\n    }\n\n    @Override\n    public String getVersion() {\n        return \"6.0.0\";\n    }\n\n    @Override\n    public String getDescription() {\n        return \"A universal responsive Userview Theme based on Material Design\";\n    }\n\n    @Override\n    public String getLabel() {\n        return getName();\n    }\n\n    @Override\n    public String getClassName() {\n        return getClass().getName();\n    }\n\n    public String getPathName() {\n        return \"universal\";\n    }\n    \n    @Override\n    public String getPropertyOptions() {\n        return AppUtil.readPluginResource(getClass().getName(), \"/properties/userview/\" + getPathName() + \"Theme.json\", null, true, null);\n    }\n    \n    @Override\n    public String getMetas(Map<String, Object> data) {\n        String maxScale = \"\";\n        if (MobileUtil.isIOS()) { //used to prevent text field zoom on focus in ios\n            maxScale = \", maximum-scale=1\";\n        }\n\n        String meta = super.getMetas(data) + \"\\n\";\n        if ((Boolean) data.get(\"is_login_page\")) {\n            meta += \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\"+maxScale+\", user-scalable=no\\\">\\n\";\n        } else {\n            meta += \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\"+maxScale+\"\\\">\\n\";\n        }\n        meta += \"<meta name=\\\"msapplication-tap-highlight\\\" content=\\\"no\\\"/>\\n\";\n        meta += getInternalMetas(data);\n        return meta;\n    }\n    \n    protected String getInternalMetas(Map<String, Object> data) {\n        String meta = \"\";\n        // set description\n        String description = userview.getPropertyString(\"description\");\n        if (description != null && !description.trim().isEmpty()) {\n            meta += \"<meta name=\\\"Description\\\" content=\\\"\" + StringEscapeUtils.escapeHtml(description) + \"\\\"/>\\n\";\n        }\n        \n        // PWA: set address bar theme color\n        Userview uv = (Userview)data.get(\"userview\");\n        String primary = getPrimaryColor();\n        meta += \"<meta name=\\\"theme-color\\\" content=\\\"\" + primary + \"\\\"/>\\n\";\n\n        // PWA: set apple-touch-icon\n        HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n        String icon = request.getContextPath() + \"/images/logo_512x512.png\";\n        UserviewSetting userviewSetting = getUserview().getSetting();\n        if (!userviewSetting.getPropertyString(\"userview_thumbnail\").isEmpty()) {\n            icon = userviewSetting.getPropertyString(\"userview_thumbnail\");\n        }\n        meta += \"<link rel=\\\"apple-touch-icon\\\" href=\\\"\" + icon + \"\\\">\\n\";\n        \n        // PWA: set manifest URL\n        String appId = uv.getParamString(\"appId\");\n        String userviewId = uv.getPropertyString(\"id\");\n        String manifestUrl = request.getContextPath() + \"/web/userview/\" + appId + \"/\" + userviewId + \"/manifest\";\n        meta += \"<link rel=\\\"manifest\\\" href=\\\"\" + manifestUrl + \"\\\"  crossorigin=\\\"use-credentials\\\">\";\n        return meta;\n    }\n    \n    protected String getPrimaryColor() {\n        Color p = Color.valueOf(getDefaultColor(\"primary\"));\n        String primary = p.color;\n        if (\"custom\".equals(getPropertyString(\"primaryColor\"))) {\n            primary = getPropertyString(\"customPrimary\");\n        } else if (!getPropertyString(\"primaryColor\").isEmpty()) {\n            p = Color.valueOf(getPropertyString(\"primaryColor\"));\n            if (p != null) {\n                primary = p.color;\n            }\n        }\n        return primary;\n    }\n        \n    @Override\n    public String getManifest(String appId, String userviewId) {\n        String userviewName = getUserview().getPropertyString(\"name\");\n        HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n        String icon = request.getContextPath() + \"/images/logo_512x512.png\";\n        UserviewSetting userviewSetting = getUserview().getSetting();\n        if (!userviewSetting.getPropertyString(\"userview_thumbnail\").isEmpty()) {\n            icon = userviewSetting.getPropertyString(\"userview_thumbnail\");\n        }\n        String startUrl = request.getContextPath() + \"/web/userview/\" + appId + \"/\" + userviewId + \"/_/index\";\n        String primaryColor = getPrimaryColor();\n        String backgroundColor = \"#FFFFFF\";\n        String scope = request.getContextPath() + \"/web/userview/\" + appId + \"/\" + userviewId + \"/\";\n        userviewName = StringUtil.stripAllHtmlTag(userviewName);\n        userviewName = userviewName.replaceAll(StringUtil.escapeRegex(\"&#xa0;\"), \" \");\n        userviewName = userviewName.trim();\n        String shortName = (userviewName.length() > 12) ? userviewName.substring(0, 10) + \"..\" : userviewName;\n        String manifest = \"{\\n\" +\n            \"  \\\"short_name\\\": \\\"\" + StringUtil.escapeString(shortName, StringUtil.TYPE_JSON, null) + \"\\\",\\n\" +\n            \"  \\\"name\\\": \\\"\" + StringUtil.escapeString(userviewName, StringUtil.TYPE_JSON, null) + \"\\\",\\n\" +\n            \"  \\\"icons\\\": [\\n\" +\n            \"    {\\n\" +\n            \"      \\\"src\\\": \\\"\" + icon + \"\\\",\\n\" +\n            \"      \\\"type\\\": \\\"image/png\\\",\\n\" +\n            \"      \\\"sizes\\\": \\\"512x512\\\",\\n\" +\n            \"      \\\"purpose\\\": \\\"any maskable\\\"\\n\" +    \n            \"    }\\n\" +\n            \"  ],\\n\" +\n            \"  \\\"start_url\\\": \\\"\" + startUrl + \"\\\",\\n\" +\n            \"  \\\"background_color\\\": \\\"\" + backgroundColor + \"\\\",\\n\" +\n            \"  \\\"display\\\": \\\"standalone\\\",\\n\" +\n            \"  \\\"scope\\\": \\\"\" + scope + \"\\\",\\n\" +\n            \"  \\\"theme_color\\\": \\\"\" + primaryColor + \"\\\"\\n\" +\n            \"}\";\n        return manifest;\n    }\n    \n    @Override\n    public Set<String> getOfflineStaticResources() {\n        Set<String> urls = new HashSet<String>();\n        String contextPath = AppUtil.getRequestContextPath();\n        String pathName = getPathName();\n        String bn = ResourceBundleUtil.getMessage(\"build.number\");\n        urls.add(contextPath + \"/wro/common.css\");\n        urls.add(contextPath + \"/wro/\" + pathName + \".preload.min.css\");\n        urls.add(contextPath + \"/wro/\" + pathName + \".min.css\");\n        urls.add(contextPath + \"/wro/common.preload.js?build=\" + bn);\n        urls.add(contextPath + \"/wro/common.js?build=\" + bn);\n        urls.add(contextPath + \"/wro/form_common.js?build=\" + bn);\n        urls.add(contextPath + \"/wro/\" + pathName + \".preload.min.js\");\n        urls.add(contextPath + \"/wro/\" + pathName + \".min.js\");\n        urls.add(contextPath + \"/\" + pathName +\"/lib/responsive-switch.min.js\");\n        \n        return urls;\n    }\n    \n    public Set<String> getCacheUrls(String appId, String userviewId, String userviewKey) {\n        HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n        String contextPath = request.getContextPath();\n        \n        Set<String> urls = new HashSet<String>();\n        urls.add(contextPath + \"/web/userview/\" + appId + \"/\" + userviewId + \"/\"+userviewKey+\"/index\");\n        \n        if (!getPropertyString(\"urlsToCache\").isEmpty()) {\n            String urlsToCache = getPropertyString(\"urlsToCache\");\n            if (urlsToCache != null) {\n                StringTokenizer st = new StringTokenizer(urlsToCache, \"\\n\");\n                while (st.hasMoreTokens()) {\n                    String url = st.nextToken().trim();\n                    if (url.startsWith(\"/\") && !url.startsWith(contextPath)) {\n                        url = contextPath + url;\n                    }\n                    urls.add(url);\n                }\n            }\n        }\n        \n        return urls;\n    }\n    \n    @Override\n    public String getServiceWorker(String appId, String userviewId, String userviewKey) {\n        Set<String> urls = getCacheUrls(appId, userviewId, userviewKey);\n        urls.addAll(UserviewUtil.getAppStaticResources(AppUtil.getCurrentAppDefinition()));\n        String urlsToCache = \"\";\n        for (String url : urls) {\n            if (!urlsToCache.isEmpty()) {\n                urlsToCache += \", \";\n            }\n            urlsToCache += \"'\" + url + \"'\";\n        }\n        \n        HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n        \n        String appUserviewId = appId + \"-\" + userviewId;\n        Object[] arguments = new Object[]{\n            request.getContextPath(),\n            appUserviewId,\n            urlsToCache\n        };\n        \n        String js = AppUtil.readPluginResource(getClass().getName(), \"/resources/themes/universal/sw.js\", arguments, false, \"\");\n        return js;\n    }    \n    \n    @Override\n    public String getCss(Map<String, Object> data) {\n        String css = getPropertyString(\"css\");\n        if (\"true\".equals(getPropertyString(\"removeAssignmentTitle\"))) {\n            css += \"\\nbody .viewForm-body-header, body .runProcess-body-header {display:none;}\";\n        }\n        return css;\n    }\n    \n    @Override\n    public String getJs(Map<String, Object> data) {\n        return getPropertyString(\"js\");\n    }\n    \n    @Override\n    public String getJsCssLib(Map<String, Object> data) {\n        String path = data.get(\"context_path\") + \"/\" + getPathName();\n\n        String jsCssLink = \"\";\n        jsCssLink += \"<link href=\\\"\" + data.get(\"context_path\") + \"/wro/\" + getPathName() + \".preload.min.css\" + \"\\\" rel=\\\"stylesheet\\\" />\\n\";\n        jsCssLink += \"<link rel=\\\"preload\\\" href=\\\"\" + data.get(\"context_path\") + \"/js/fontawesome5/fonts/fontawesome-webfont.woff2?v=4.6.1\\\" as=\\\"font\\\" crossorigin />\\n\";\n        jsCssLink += \"<link rel=\\\"preload\\\" href=\\\"\" + data.get(\"context_path\") + \"/js/fontawesome5/webfonts/fa-brands-400.woff2\\\" as=\\\"font\\\" crossorigin />\\n\";\n        jsCssLink += \"<link rel=\\\"preload\\\" href=\\\"\" + data.get(\"context_path\") + \"/js/fontawesome5/webfonts/fa-solid-900.woff2\\\" as=\\\"font\\\" crossorigin />\\n\";\n        jsCssLink += \"<link rel=\\\"preload\\\" href=\\\"\" + data.get(\"context_path\") + \"/universal/lib/material-design-iconic-font/fonts/Material-Design-Iconic-Font.woff2?v=2.2.0\\\" as=\\\"font\\\" crossorigin />\\n\";\n        jsCssLink += \"<script>loadCSS(\\\"\" + data.get(\"context_path\") + \"/wro/\" + getPathName() + \".min.css\" + \"\\\")</script>\\n\";\n        \n        jsCssLink += \"<style>\" + generateLessCss() + \"</style>\";\n\n        jsCssLink += \"<script src=\\\"\" + data.get(\"context_path\") + \"/wro/\" + getPathName() + \".min.js\\\" async></script>\\n\";\n        \n        if (enableResponsiveSwitch()) {\n            jsCssLink += \"<script src=\\\"\" + data.get(\"context_path\") + \"/\" + getPathName() +\"/lib/responsive-switch.min.js\\\" defer></script>\\n\";\n        } \n        jsCssLink += \"<script>var _enableResponsiveTable = true;</script>\\n\";\n        jsCssLink += getInternalJsCssLib(data);\n            \n        return jsCssLink;\n    }\n    \n    protected String getInternalJsCssLib(Map<String, Object> data) {\n        String jsCssLink = \"\";\n               \n        // PWA: register service worker\n        if (!\"true\".equals(getPropertyString(\"disablePwa\"))) {\n            WorkflowUserManager workflowUserManager = (WorkflowUserManager)AppUtil.getApplicationContext().getBean(\"workflowUserManager\");\n            boolean pushEnabled = !\"true\".equals(getPropertyString(\"disablePush\")) && !workflowUserManager.isCurrentUserAnonymous();\n            String appId = userview.getParamString(\"appId\");\n            if (appId != null && !appId.isEmpty()) {\n                String userviewId = userview.getPropertyString(\"id\");\n                String key = userview.getParamString(\"key\");\n                if (key.isEmpty()) {\n                    key = Userview.USERVIEW_KEY_EMPTY_VALUE;\n                }\n                \n                boolean isEmbedded = false;\n                if(data.get(\"embed\") != null){\n                    isEmbedded = (Boolean) data.get(\"embed\");\n                };\n                \n                String pwaOnlineNotificationMessage = ResourceBundleUtil.getMessage(\"pwa.onlineNow\");\n                String pwaOfflineNotificationMessage = ResourceBundleUtil.getMessage(\"pwa.offlineNow\");\n                String pwaLoginPromptMessage = ResourceBundleUtil.getMessage(\"pwa.loginPrompt\");\n                String pwaSyncingMessage = ResourceBundleUtil.getMessage(\"pwa.syncing\");\n                String pwaSyncFailedMessage = ResourceBundleUtil.getMessage(\"pwa.syncFailed\");\n                String pwaSyncSuccessMessage = ResourceBundleUtil.getMessage(\"pwa.syncSuccess\");\n                String buildNumber = ResourceBundleUtil.getMessage(\"build.number\");\n                \n                String serviceWorkerUrl = data.get(\"context_path\") + \"/web/userview/\" + appId + \"/\" + userviewId + \"/\"+key+\"/serviceworker\";\n                jsCssLink += \"<script>$(function() {\"\n                        + \"var initPwaUtil = function(){\"\n                        + \"PwaUtil.contextPath = '\" + data.get(\"context_path\") + \"';\"\n                        + \"PwaUtil.userviewKey = '\" + key + \"';\"\n                        + \"PwaUtil.homePageLink = '\" + data.get(\"home_page_link\") + \"';\"\n                        + \"PwaUtil.serviceWorkerPath = '\" + serviceWorkerUrl + \"';\"\n                        + \"PwaUtil.subscriptionApiPath = '\" + data.get(\"context_path\") + \"/web/console/profile/subscription';\"\n                        + \"PwaUtil.pushEnabled = \" + pushEnabled + \";\"\n                        + \"PwaUtil.currentUsername = '\" + workflowUserManager.getCurrentUsername() + \"';\"\n                        + \"PwaUtil.onlineNotificationMessage = '\" + pwaOnlineNotificationMessage + \"';\"\n                        + \"PwaUtil.offlineNotificationMessage = '\" + pwaOfflineNotificationMessage + \"';\"\n                        + \"PwaUtil.loginPromptMessage = '\" + pwaLoginPromptMessage + \"';\"\n                        + \"PwaUtil.syncingMessage = '\" + pwaSyncingMessage + \"';\"\n                        + \"PwaUtil.syncFailedMessage = '\" + pwaSyncFailedMessage + \"';\"\n                        + \"PwaUtil.syncSuccessMessage = '\" + pwaSyncSuccessMessage + \"';\"\n                        + \"PwaUtil.isEmbedded = \" + isEmbedded + \";\"\n                        + \"PwaUtil.register();\"\n                        + \"PwaUtil.init();\"\n                        + \"};\"\n                        + \"if (typeof PwaUtil !== \\\"undefined\\\") {initPwaUtil();} else { $(document).on(\\\"PwaUtil.ready\\\", function(){ initPwaUtil(); });}\"\n                        + \"});</script>\";\n            }\n        }\n        return jsCssLink;\n    }\n    \n    protected String getDefaultColor(String defaultColor) {\n        if (defaultColor.equals(\"primary\")) {\n            defaultColor = \"DARKROYALBLUE\";\n        }\n        else if (defaultColor.equals(\"accent\")) {\n            defaultColor = \"#0D6EFD\";\n        }\n        else if (defaultColor.equals(\"button\")) {\n            defaultColor = \"#6c757D\";\n        }\n        else if (defaultColor.equals(\"buttonText\")) {\n            defaultColor = \"#FFFFFF\";\n        }\n        else if (defaultColor.equals(\"menuFont\")) {\n            defaultColor = \"#000000\";\n        }\n        else if (defaultColor.equals(\"font\")) {\n            defaultColor = \"#FFFFFF\";\n        }\n        return defaultColor;\n    }\n    \n    protected String generateLessCss() {\n        String css = \"\";\n        String lessVariables = \"\";\n        String primary = \"\";\n        String dark = \"darken(@primary , 10%)\";\n        String light = \"lighten(@primary , 5%)\";\n        String accent = getDefaultColor(\"accent\");\n        String lightAccent = \"lighten(@accent , 10%)\";\n        String button = getDefaultColor(\"button\");\n        String buttonText = getDefaultColor(\"buttonText\");\n        String font = getDefaultColor(\"font\");\n        \n        if (\"custom\".equals(getPropertyString(\"primaryColor\"))) {\n            primary = getPropertyString(\"customPrimary\");\n            if (!getPropertyString(\"customPrimaryDark\").isEmpty()) {\n                dark = getPropertyString(\"customPrimaryDark\");\n            }\n            if (!getPropertyString(\"customPrimaryLight\").isEmpty()) {\n                light = getPropertyString(\"customPrimaryLight\");\n            }\n        } else {\n            Color p = Color.valueOf(getDefaultColor(\"primary\"));\n            if (!getPropertyString(\"primaryColor\").isEmpty()){\n                p = Color.valueOf(getPropertyString(\"primaryColor\")); \n            }\n            if (p != null) {\n                primary = p.color;\n                dark = (p.dark.isEmpty())?dark:p.dark;\n                if (\"light\".equals(getPropertyString(\"themeScheme\"))) {\n                    light = \"screen(@primary, #eeeeee)\";\n                } else {\n                    light = (p.light.isEmpty())?light:p.light;\n                }\n            }\n        }\n        \n        if (\"custom\".equals(getPropertyString(\"accentColor\"))) {\n            accent = getPropertyString(\"customAccent\");\n            if (!getPropertyString(\"customAccentLight\").isEmpty()) {\n                lightAccent = getPropertyString(\"customAccentLight\");\n            }\n        }  else if (!getPropertyString(\"accentColor\").isEmpty()) {\n            Color a = Color.valueOf(getPropertyString(\"accentColor\"));\n            if (a != null) {\n                accent = a.color;\n                lightAccent = (a.light.isEmpty())?lightAccent:a.light;\n            }\n        }\n        \n        if (\"custom\".equals(getPropertyString(\"buttonColor\"))) {\n            button = getPropertyString(\"customButton\");\n        } else if (!getPropertyString(\"buttonColor\").isEmpty()) {\n            Color a = Color.valueOf(getPropertyString(\"buttonColor\"));\n            if (a != null) {\n                button = a.color;\n            }\n        }\n        \n        if (\"custom\".equals(getPropertyString(\"buttonTextColor\"))) {\n            buttonText = getPropertyString(\"customButtonText\");\n        } else if (!getPropertyString(\"buttonTextColor\").isEmpty()) {\n            Color a = Color.valueOf(getPropertyString(\"buttonTextColor\"));\n            if (a != null) {\n                buttonText = a.color;\n            }\n        }\n        \n        if (\"custom\".equals(getPropertyString(\"fontColor\"))) {\n            font = getPropertyString(\"customFontColor\");\n        } else if (!getPropertyString(\"fontColor\").isEmpty()) {\n            Color a = Color.valueOf(getPropertyString(\"fontColor\"));\n            if (a != null) {\n                font = a.color;\n            }\n        }\n        \n        if (\"light\".equals(getPropertyString(\"themeScheme\"))) {\n            String menuFont = getDefaultColor(\"menuFont\");\n            if (\"custom\".equals(getPropertyString(\"menuFontColor\"))) {\n                menuFont = getPropertyString(\"customMenuFontColor\");\n            } else if (!getPropertyString(\"menuFontColor\").isEmpty()) {\n                Color a = Color.valueOf(getPropertyString(\"menuFontColor\"));\n                if (a != null) {\n                    menuFont = a.color;\n                }\n            }\n            \n            lessVariables += \"@primary: \" + primary + \"; @darkPrimary: \" + dark + \"; @lightPrimary: \" + light + \"; @accent: \" + accent + \"; @lightAccent: \" + lightAccent + \"; @menuFont: \" + menuFont + \"; @button: \" + button + \"; @buttonText: \" + buttonText + \"; @defaultFontColor : \" + font + \";\";\n        } else {\n            lessVariables += \"@primary: \" + primary + \"; @darkPrimary: \" + dark + \"; @lightPrimary: \" + light + \"; @accent: \" + accent + \"; @lightAccent: \" + lightAccent + \"; @button: \" + button + \"; @buttonText: \" + buttonText + \"; @defaultFontColor : \" + font + \";\";\n        }\n        \n        // process LESS\n        String less = AppUtil.readPluginResource(getClass().getName(), \"resources/themes/\" + getPathName() + \"/\" + getPropertyString(\"themeScheme\") + \".less\");\n        less = lessVariables + \"\\n\" + less;\n        // read CSS from cache\n        Cache cache = (Cache) AppUtil.getApplicationContext().getBean(\"cssCache\");\n        if (cache != null) {\n            Element element = cache.get(less);\n            if (element != null) {\n                css = (String) element.getObjectValue();\n            }\n        }\n        if (css == null || css.isEmpty()) {\n            // not available in cache, compile LESS\n            css = compileLess(less);\n            // store CSS in cache\n            if (cache != null) {\n                Element element = new Element(less, css);\n                cache.put(element);\n            }\n        }\n        return css;\n    }\n\n    protected String compileLess(String less) {\n        String css = \"\";\n        try {\n            css = lessEngine.compile(less);\n        } catch(Exception e) {\n            LogUtil.error(this.getClass().getName(), e, \"Error compiling LESS\");\n            LogUtil.debug(this.getClass().getName(), \"LESS: \" + less);\n        }\n        return css;\n    }\n    \n    @Override\n    public String getHeader(Map<String, Object> data) {\n        if (\"true\".equals(getPropertyString(\"horizontal_menu\"))) {\n            data.put(\"header_after\", UserviewUtil.getTemplate(this, data, \"/templates/\" + getPathName() + \"Theme_horizontalMenu.ftl\"));\n        } else if (\"horizontal_inline\".equals(getPropertyString(\"horizontal_menu\"))) {\n            data.put(\"header_name_inner_after\", UserviewUtil.getTemplate(this, data, \"/templates/\" + getPathName() + \"Theme_horizontalMenu.ftl\"));\n        }\n        \n        data.put(\"header_classes\", \"navbar\");\n        data.put(\"header_inner_before\", \"<div class=\\\"navbar-inner\\\"><div class=\\\"container-fluid\\\"><div class=\\\"hi-trigger ma-trigger\\\" id=\\\"sidebar-trigger\\\"><div class=\\\"line-wrap\\\"><div class=\\\"line top\\\"></div><div class=\\\"line center\\\"></div><div class=\\\"line bottom\\\"></div></div></div>\");\n        data.put(\"header_inner_after\", \"</div></div>\" + getPropertyString(\"subheader\"));\n        data.put(\"header_link_classes\", \"brand\");\n        data.put(\"header_info_classes\", \"inline-block\");\n        data.put(\"header_name_classes\", \"inline-block\");\n        \n        if (!getPropertyString(\"logo\").isEmpty()) {\n            data.put(\"header_name_inner_before\", \"<img class=\\\"logo\\\" alt=\\\"logo\\\" src=\\\"\"+getPropertyString(\"logo\")+\"\\\" />\");\n        }\n        \n        data.put(\"header_description_classes\", \"inline-block visible-desktop\");\n        data.put(\"header_description_span_classes\", \"brand\");\n        data.put(\"header_message_after\", getNavbar(data));\n        return UserviewUtil.getTemplate(this, data, \"/templates/userview/header.ftl\");\n    }\n    \n    protected boolean showHomeBanner() {\n        String menuId = (String)getRequestParameter(\"menuId\");\n        String homeMenuId = getUserview().getPropertyString(\"homeMenuId\");\n        String pwaStartUrl = \"index\";\n        boolean showHomeBanner = (menuId == null || homeMenuId.equals(menuId) || pwaStartUrl.equals(menuId)) && !getPropertyString(\"homeAttractBanner\").isEmpty();\n        return showHomeBanner;\n    }\n    \n    @Override\n    public String getContentContainer(Map<String, Object> data) {\n        if (!getPropertyString(\"horizontal_menu\").isEmpty()) {\n            data.put(\"hide_nav\", true);\n        }\n        \n        if (showHomeBanner()) {\n            data.put(\"main_container_before\", \"<div class=\\\"home_banner\\\"><div class=\\\"home_banner_inner\\\">\"+getPropertyString(\"homeAttractBanner\")+\"</div></div>\");\n        }\n        \n        data.put(\"main_container_classes\", \"container-fluid-full\");\n        data.put(\"main_container_inner_classes\", \"row-fluid\");\n        data.put(\"sidebar_classes\", \"span2\");\n        if (((Boolean) data.get(\"embed\")) || ((Boolean) data.get(\"hide_nav\"))) {\n            data.put(\"content_classes\", \"span12\");\n        } else {\n            data.put(\"content_classes\", \"span10\");\n        }\n        \n        String ContentInnerBefore = getBreadcrumb(data);\n        if (getPropertyString(\"fontControl\").equalsIgnoreCase(\"true\")) {\n            ContentInnerBefore += getFontSizeController(data);\n        }\n        data.put(\"content_inner_before\", ContentInnerBefore);\n        return super.getContentContainer(data);\n    }\n    \n    @Override\n    public String getLayout(Map<String, Object> data) {\n        if (\"true\".equals(getPropertyString(\"horizontal_menu\"))) {\n            data.put(\"body_classes\", data.get(\"body_classes\").toString() + \" horizontal_menu\");\n        } else if (\"horizontal_inline\".equals(getPropertyString(\"horizontal_menu\"))){\n            data.put(\"body_classes\", data.get(\"body_classes\").toString() + \" horizontal_menu inline_menu\");\n        } else if (\"no\".equals(getPropertyString(\"horizontal_menu\"))) {\n            data.put(\"body_classes\", data.get(\"body_classes\").toString() + \" horizontal_menu no_menu\");\n        }\n        \n        if (showHomeBanner()) {\n            data.put(\"body_classes\", data.get(\"body_classes\").toString() + \" has_home_banner\");\n        }\n        \n        data.put(\"body_inner_before\", \"<div class=\\\"page-loader\\\"><div class=\\\"preloader pl-xl\\\" style=\\\"width:80px\\\"><svg class=\\\"pl-circular\\\" viewBox=\\\"25 25 50 50\\\"><circle class=\\\"plc-path\\\" cx=\\\"50\\\" cy=\\\"50\\\" r=\\\"20\\\" /></svg></div></div>\");\n        return UserviewUtil.getTemplate(this, data, \"/templates/userview/layout.ftl\");\n    }\n    \n    public String getLoginForm(Map<String, Object> data) {\n        data.put(\"hide_nav\", true);\n        return super.getLoginForm(data);\n    }\n    \n    @Override\n    public String handlePageNotFound(Map<String, Object> data) {\n        if (PROFILE.equals(userview.getParamString(\"menuId\"))) {\n            return pageProfile(data);\n        } else if (INBOX.equals(userview.getParamString(\"menuId\"))) {\n            return pageInbox(data);\n        } else {\n            return super.handlePageNotFound(data);\n        }\n    }\n    \n    protected String getUserMenu(Map<String, Object> data) {\n        if (!getPropertyString(\"horizontal_menu\").isEmpty()) {\n            String html = \"\";\n            if ((Boolean) data.get(\"is_logged_in\")) {\n                User user = (User) data.get(\"user\");\n                String email = user.getEmail();\n                if (email == null) {\n                    email = \"\";\n                }\n                if (email.contains(\";\")) {\n                    email = email.split(\";\")[0];\n                }\n                if (email.contains(\",\")) {\n                    email = email.split(\",\")[0];\n                }\n\n                String profileImageTag = \"\";\n                if (getPropertyString(\"userImage\").isEmpty()) {\n                    String url = (email != null && !email.isEmpty()) ? \n                        new Gravatar()\n                            .setSize(20)\n                            .setHttps(true)\n                            .setRating(Rating.PARENTAL_GUIDANCE_SUGGESTED)\n                            .setStandardDefaultImage(DefaultImage.IDENTICON)\n                            .getUrl(email)\n                        : \"//www.gravatar.com/avatar/default?d=identicon\";\n                    profileImageTag = \"<img class=\\\"gravatar\\\" alt=\\\"gravatar\\\" width=\\\"30\\\" height=\\\"30\\\" data-lazysrc=\\\"\"+url+\"\\\" onError=\\\"this.onerror = '';this.style.display='none';\\\"/> \";\n                } else if (\"hashVariable\".equals(getPropertyString(\"userImage\"))) {\n                    String url = AppUtil.processHashVariable(getPropertyString(\"userImageUrlHash\"), null, StringUtil.TYPE_HTML, null, AppUtil.getCurrentAppDefinition());\n                    if (AppUtil.containsHashVariable(url) || url == null || url.isEmpty()) {\n                        url = data.get(\"context_path\") + \"/\" + getPathName() + \"/user.png\";\n                    }\n                    profileImageTag = \"<img alt=\\\"profile\\\" width=\\\"30\\\" height=\\\"30\\\" src=\\\"\"+url+\"\\\" /> \";\n                }\n                \n                html += \"<li class=\\\"user-link dropdown\\\">\\n\"\n                      + \"    <a data-toggle=\\\"dropdown\\\" class=\\\"btn dropdown-toggle\\\">\\n\"\n                      + \"\t     \" + profileImageTag + StringUtil.stripHtmlTag(DirectoryUtil.getUserFullName(user), new String[]{}) + \"\\n\"\n                      + \"\t     <span class=\\\"caret\\\"></span>\\n\"\n                      + \"    </a>\\n\";\n\n                html += \"<ul class=\\\"dropdown-menu\\\">\\n\";\n                if (!\"true\".equals(getPropertyString(\"profile\")) && !user.getReadonly()) {\n                    html += \"    <li><a href=\\\"\" + data.get(\"base_link\") + PROFILE +\"\\\"><i class=\\\"fa fa-user\\\"></i> \" + ResourceBundleUtil.getMessage(\"theme.universal.profile\") + \"</a></li>\\n\";\n                }\n                \n                Object[] shortcut = (Object[]) getProperty(\"userMenu\");\n                if (shortcut != null && shortcut.length > 0) {\n                    for (Object o : shortcut) {\n                        Map link = (HashMap) o;\n                        String href = link.get(\"href\").toString();\n                        String label = link.get(\"label\").toString();\n                        String target = (link.get(\"target\") == null)?\"\":link.get(\"target\").toString();\n\n                        if (\"divider\".equalsIgnoreCase(label)) {\n                            html += \"<li class=\\\"divider\\\"></li>\\n\";\n                        } else if (href.isEmpty()) {\n                             html += \"<li class=\\\"dropdown-menu-title\\\"><span>\" + label + \"</span></li>\\n\";\n                        } else {\n                            if (!href.contains(\"/\")) {\n                                href = data.get(\"base_link\") + href;\n                            }\n                            html += \"<li><a href=\\\"\" + href + \"\\\" target=\\\"\"+target+\"\\\">\" + label + \"</a></li>\\n\";\n                        }\n                    }\n                }\n                \n                html += \"    <li><a href=\\\"\" + data.get(\"logout_link\") + \"\\\"><i class=\\\"fa fa-power-off\\\"></i> \" + ResourceBundleUtil.getMessage(\"theme.universal.logout\") + \"</a></li>\\n\"\n                      + \"</ul>\";\n\n            } else {\n                html += \"<li class=\\\"user-link\\\">\\n\"\n                      + \"    <a href=\\\"\" + data.get(\"login_link\") + \"\\\" class=\\\"btn\\\">\\n\"\n                      + \"\t     <i class=\\\"fa fa-user white\\\"></i> \" + ResourceBundleUtil.getMessage(\"ubuilder.login\") + \"\\n\"\n                      + \"    </a>\\n\";\n            }\n            html += \"</li>\";\n            return html;\n        } else {\n            return \"\";\n        }\n    }\n    \n    protected String getSidebarUserMenu(Map<String, Object> data) {\n        String html = \"<ul class=\\\"user-menu nav nav-tabs nav-stacked main-menu\\\">\";\n        if ((Boolean) data.get(\"is_logged_in\")) {\n            User user = (User) data.get(\"user\");\n            String email = user.getEmail();\n            if (email == null) {\n                email = \"\";\n            }\n            if (email.contains(\";\")) {\n                email = email.split(\";\")[0];\n            }\n            if (email.contains(\",\")) {\n                email = email.split(\",\")[0];\n            }\n            \n            String profileImageTag = \"\";\n            if (getPropertyString(\"userImage\").isEmpty()) {\n                String url = (email != null && !email.isEmpty()) ? \n                    new Gravatar()\n                        .setSize(20)\n                        .setHttps(true)\n                        .setRating(Rating.PARENTAL_GUIDANCE_SUGGESTED)\n                        .setStandardDefaultImage(DefaultImage.IDENTICON)\n                        .getUrl(email)\n                    : \"//www.gravatar.com/avatar/default?d=identicon\";\n                profileImageTag = \"<img class=\\\"gravatar\\\" alt=\\\"gravatar\\\" width=\\\"30\\\" height=\\\"30\\\" data-lazysrc=\\\"\"+url+\"\\\" onError=\\\"this.onerror = '';this.style.display='none';\\\"/> \";\n            } else if (\"hashVariable\".equals(getPropertyString(\"userImage\"))) {\n                String url = AppUtil.processHashVariable(getPropertyString(\"userImageUrlHash\"), null, StringUtil.TYPE_HTML, null, AppUtil.getCurrentAppDefinition());\n                if (AppUtil.containsHashVariable(url) || url == null || url.isEmpty()) {\n                    url = data.get(\"context_path\") + \"/\" + getPathName() + \"/user.png\";\n                }\n                profileImageTag = \"<img alt=\\\"profile\\\" width=\\\"30\\\" height=\\\"30\\\" src=\\\"\"+url+\"\\\" /> \";\n            }\n            \n            html += \"<li class=\\\"mm-profile user-link\\\">\\n\"\n                  + \"    <a class=\\\"dropdown\\\">\\n\"\n                  + \"        \"+profileImageTag+\"\\n\"  \n                  + \"\t     <span>\" + StringUtil.stripHtmlTag(DirectoryUtil.getUserFullName(user), new String[]{}) + \"</span>\\n\"\n                  + \"\t     <small>\" + email + \"</small>\\n\"\n                  + \"    </a>\\n\";\n            \n            html += \"<ul>\\n\";\n            if (!\"true\".equals(getPropertyString(\"profile\")) && !user.getReadonly()) {\n                String activeCss = \"\";\n                if (PROFILE.equals(userview.getParamString(\"menuId\"))) {\n                    activeCss = \" class=\\\"active\\\"\";\n                }\n                html += \"    <li \"+activeCss+\"><a href=\\\"\" + data.get(\"base_link\") + PROFILE +\"\\\"><span><i class=\\\"fa fa-user\\\"></i> \" + ResourceBundleUtil.getMessage(\"theme.universal.profile\") + \"</span></a></li>\\n\";\n            }\n            \n            Object[] shortcut = (Object[]) getProperty(\"userMenu\");\n            if (shortcut != null && shortcut.length > 0) {\n                for (Object o : shortcut) {\n                    Map link = (HashMap) o;\n                    String href = link.get(\"href\").toString();\n                    String label = link.get(\"label\").toString();\n                    String target = (link.get(\"target\") == null)?\"\":link.get(\"target\").toString();\n\n                    if (\"divider\".equalsIgnoreCase(label)) {\n                        html += \"<li class=\\\"divider\\\"></li>\\n\";\n                    } else if (href.isEmpty()) {\n                         html += \"<li class=\\\"dropdown-menu-title\\\"><span>\" + label + \"</span></li>\\n\";\n                    } else {\n                        if (!href.contains(\"/\")) {\n                            href = data.get(\"base_link\") + href;\n                        }\n                        html += \"<li><a href=\\\"\" + href + \"\\\" target=\\\"\"+target+\"\\\">\" + label + \"</a></li>\\n\";\n                    }\n                }\n            }\n            \n            html += \"    <li><a href=\\\"\" + data.get(\"logout_link\") + \"\\\"><span><i class=\\\"fa fa-power-off\\\"></i> \" + ResourceBundleUtil.getMessage(\"theme.universal.logout\") + \"</span></a></li>\\n\";\n            html += \"</ul>\";\n\n        } else {\n            String profileImageTag = \"\";\n            if (getPropertyString(\"userImage\").isEmpty() || \"hashVariable\".equals(getPropertyString(\"userImage\"))) {\n                String url = data.get(\"context_path\") + \"/\" + getPathName() + \"/user.png\";\n                profileImageTag = \"<img alt=\\\"profile\\\" width=\\\"30\\\" height=\\\"30\\\" src=\\\"\"+url+\"\\\" /> \";\n            }\n            \n            html += \"<li class=\\\"mm-profile user-link\\\">\\n\"\n                  + \"    <a href=\\\"\" + data.get(\"login_link\") + \"\\\" >\\n\"\n                  + \"        \"+profileImageTag+\"\\n\" \n                  + \"\t     <span>Visitor</span>\\n\"  \n                  + \"\t     <small class=\\\"login_link\\\">\" + ResourceBundleUtil.getMessage(\"ubuilder.login\") + \"</small>\\n\"\n                  + \"    </a>\\n\";\n        }\n        html += \"</li></ul>\";\n        return html;\n    }\n    \n    @Override\n    public String getMenus(Map<String, Object> data) {\n        if (\"true\".equals(getPropertyString(\"displayCategoryLabel\"))) {\n            data.put(\"combine_single_menu_category\", false);\n        } else {\n            data.put(\"combine_single_menu_category\", true);\n        }\n        data.put(\"categories_container_before\", getSidebarUserMenu(data));\n        \n        return super.getMenus(data);\n    }\n    \n    @Override\n    public String getFooter(Map<String, Object> data) {\n        if (enableResponsiveSwitch()) {\n            data.put(\"footer_inner_after\", \"<div id=\\\"responsiveSwitch\\\"><p><a href=\\\"#\\\" class=\\\"rs-link\\\" data-link-desktop=\\\"\"+ ResourceBundleUtil.getMessage(\"theme.universal.switchDesktop\") +\"\\\" data-link-responsive=\\\"\"+ ResourceBundleUtil.getMessage(\"theme.universal.switchMobile\") +\"\\\"></a></p></div>\" + getPropertyString(\"subfooter\"));\n        } else {\n            data.put(\"footer_inner_after\", getPropertyString(\"subfooter\"));\n        }\n        return super.getFooter(data);\n    }\n    \n    protected String getHomeLink(Map<String, Object> data) {\n        String home_page_link = data.get(\"context_path\").toString() + \"/home\";\n        if (!getPropertyString(\"homeUrl\").isEmpty()) {\n            home_page_link = getPropertyString(\"homeUrl\");\n        }\n        return \"<li class=\\\"\\\"><a class=\\\"btn\\\" href=\\\"\" + home_page_link + \"\\\" title=\\\"\" + ResourceBundleUtil.getMessage(\"theme.universal.home\") + \"\\\"><i class=\\\"fa fa-home\\\"></i></a></li>\\n\";\n    }\n    \n    protected String getNavbar(Map<String, Object> data) {\n        String html = \"<div class=\\\"nav-no-collapse header-nav\\\"><ul class=\\\"nav pull-right\\\">\\n\";\n        html += getHomeLink(data);\n        if ((Boolean) data.get(\"is_logged_in\")) {\n            html += getInbox(data);\n        }\n        html += getShortcut(data);\n        html += getUserMenu(data);\n        html += \"</ul></div>\\n\";\n        return html;\n    }\n    \n    protected String getInbox(Map<String, Object> data) {\n        String html = \"\";\n        \n        if (!getPropertyString(\"inbox\").isEmpty()) {\n            String url = data.get(\"context_path\") + \"/web/json/plugin/\" + getClassName() + \"/service?_a=getAssignment\";\n            if (\"current\".equals(getPropertyString(\"inbox\"))) {\n                try {\n                    url += \"&appId=\" + URLEncoder.encode(userview.getParamString(\"appId\"), \"UTF-8\");\n                } catch (UnsupportedEncodingException e){}\n            }\n            html += \"<li class=\\\"inbox-notification dropdown\\\" data-url=\\\"\" + url + \"\\\">\\n\"\n                  + \"    <a data-toggle=\\\"dropdown\\\" class=\\\"btn dropdown-toggle\\\">\\n\"\n                  + \"\t <i class=\\\"fa fa-tasks white\\\"></i><span class=\\\"badge red\\\">0</span>\\n\"\n                  + \"    </a>\\n\"\n                  + \"    <ul class=\\\"dropdown-menu notifications\\\">\\n\"\n                  + \"        <li class=\\\"dropdown-menu-title\\\"><span>\" + ResourceBundleUtil.getMessage(\"theme.universal.inboxTaskMessage\") + \"</span><a href=\\\"#\\\" class=\\\"refresh\\\"><i class=\\\"fa fa-refresh\\\"></i></a></li>\"\n                  + \"        <li class=\\\"loading\\\"><a><span><i class=\\\"fa fa-spinner fa-spin fa-3x\\\"></i></span></a></li>\\n\"\n                  + \"        <li><a href=\\\"\" + data.get(\"base_link\") + INBOX + \"\\\" class=\\\"dropdown-menu-sub-footer\\\">\" + ResourceBundleUtil.getMessage(\"theme.universal.viewAllTask\") + \"</a></li>\\n\"  \n                  + \"    </ul>\\n\"\n                  + \"<li>\";\n        }\n        \n        return html;\n    }\n    \n    protected String getShortcut(Map<String, Object> data) {\n        String shortcutHtml = \"\";\n        \n        Object[] shortcut = (Object[]) getProperty(\"shortcut\");\n        if (shortcut != null && shortcut.length > 0) {\n            for (Object o : shortcut) {\n                Map link = (HashMap) o;\n                String href = link.get(\"href\").toString();\n                String label = link.get(\"label\").toString();\n                String target = (link.get(\"target\") == null)?\"\":link.get(\"target\").toString();\n                boolean isPublic = \"true\".equalsIgnoreCase((String) link.get(\"isPublic\"));\n                \n                if ((Boolean) data.get(\"is_logged_in\") || (!((Boolean) data.get(\"is_logged_in\")) && isPublic)) {\n                    if (\"divider\".equalsIgnoreCase(label)) {\n                        shortcutHtml += \"<li class=\\\"divider\\\"></li>\\n\";\n                    } else if (href.isEmpty()) {\n                         shortcutHtml += \"<li class=\\\"dropdown-menu-title\\\"><span>\" + label + \"</span></li>\\n\";\n                    } else {\n                        if (!href.contains(\"/\")) {\n                            href = data.get(\"base_link\") + href;\n                        }\n                        shortcutHtml += \"<li><a href=\\\"\" + href + \"\\\" target=\\\"\"+target+\"\\\">\" + label + \"</a></li>\\n\";\n                    }\n                }\n            }\n        }\n        \n        String html = \"\";\n        if (!shortcutHtml.isEmpty()) {\n            html = \"<li class=\\\"shortcut-link dropdown\\\">\\n\"\n                  + \"    <a data-toggle=\\\"dropdown\\\" class=\\\"btn dropdown-toggle\\\">\\n\"\n                  + \"\t     <i class=\\\"fa fa-th-list white\\\"></i> \" + getPropertyString(\"shortcutLinkLabel\") + \"\\n\"\n                  + \"\t     <span class=\\\"caret\\\"></span>\\n\"\n                  + \"    </a>\\n\";\n            \n            html += \"<ul class=\\\"dropdown-menu\\\">\\n\";\n            html += shortcutHtml;\n            html += \"</ul></li>\";\n        }\n        \n        return html;\n    }\n    \n    protected String getBreadcrumb(Map<String, Object> data) {\n        String breadcrumb = \"<ul class=\\\"breadcrumb\\\"><li><i class=\\\"fa fa-home\\\"></i> <a href=\\\"\" + data.get(\"home_page_link\") + \"\\\">\" + ResourceBundleUtil.getMessage(\"theme.universal.home\") + \"</a> <i class=\\\"fa fa-angle-right\\\"></i></li>\";\n        if ((Boolean) data.get(\"is_login_page\") || (Boolean) data.get(\"embed\")) {\n            return \"\";\n        } else if (userview.getCurrent() != null) {\n            UserviewCategory category = userview.getCurrentCategory();\n            if (!(category.getMenus().size() <= 1 && ((Boolean) data.get(\"combine_single_menu_category\"))) && !\"yes\".equals(category.getPropertyString(\"hide\"))) {\n                breadcrumb += \"<li><a href=\\\"\" + getCategoryLink(category, data) + \"\\\">\" + StringUtil.stripAllHtmlTag(category.getPropertyString(\"label\")) + \"</a> <i class=\\\"fa fa-angle-right\\\"></i></li>\";\n            }\n            breadcrumb += \"<li><a>\" + StringUtil.stripAllHtmlTag(userview.getCurrent().getPropertyString(\"label\")) + \"</a></li>\";\n        } else if (PROFILE.equals(userview.getParamString(\"menuId\"))) {\n            breadcrumb += \"<li><a>\" + ResourceBundleUtil.getMessage(\"theme.universal.profile\") + \"</a></li>\";\n        } else if (INBOX.equals(userview.getParamString(\"menuId\"))) {\n            breadcrumb += \"<li><a>\" + ResourceBundleUtil.getMessage(\"theme.universal.inbox\") + \"</a></li>\";\n        } else if (UserviewPwaTheme.PWA_OFFLINE_MENU_ID.equals(userview.getParamString(\"menuId\")) || UserviewPwaTheme.PAGE_UNAVAILABLE_MENU_ID.equals(userview.getParamString(\"menuId\"))) {\n            breadcrumb += \"<li><a>\" + ResourceBundleUtil.getMessage(\"pwa.offline.breadcrumbTitle\") + \"</a></li>\";\n        } else {\n            breadcrumb += \"<li><a>\" + ResourceBundleUtil.getMessage(\"ubuilder.pageNotFound\") + \"</a></li>\";\n        }\n        breadcrumb += \"</ul>\";\n\n        return breadcrumb;\n    }\n\n    protected String getFontSizeController(Map<String, Object> data) {\n        String fontController = \"<div class=\\\"adjustfontSize\\\">\\n\"\n                + \"      <div style=\\\"float:right\\\">\\n\"\n                + \"            <span> \"+ ResourceBundleUtil.getMessage(\"theme.universal.fontSize\") +\":</span>\\n\"\n                + \"            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Basic example\\\">\\n\"\n                + \"                  <button id=\\\"smallFont\\\" type=\\\"button\\\" class=\\\"buttonFontSize\\\"><i class=\\\"fas fa-font\\\" style=\\\"font-size:13px\\\"></i></button>\\n\"\n                + \"                  <button id=\\\"mediumFont\\\" type=\\\"button\\\" class=\\\"buttonFontSize\\\"><i class=\\\"fas fa-font\\\" style=\\\"font-size:17px\\\"></i></button>\\n\"\n                + \"                  <button id=\\\"bigFont\\\" type=\\\"button\\\" class=\\\"buttonFontSize\\\"><i class=\\\"fas fa-font\\\" style=\\\"font-size:20px\\\"></i></button>\\n\"\n                + \"            </div>\\n\"\n                + \"      </div>\\n\"\n                + \"      <div style=\\\"clear:both\\\"></div>\\n\"\n                + \"</div>\";\n        if ((Boolean) data.get(\"is_login_page\") || (Boolean) data.get(\"embed\")) {\n            return \"\";\n        } else {\n            return fontController;\n        }\n    }\n    \n    protected String getCategoryLink(UserviewCategory category, Map<String, Object> data) {\n        UserviewMenu menu = category.getMenus().iterator().next();\n        if (menu.isHomePageSupported()) {\n            return menu.getUrl();\n        }\n        return \"\";\n    }\n    \n    protected boolean enableResponsiveSwitch() {\n        return MobileUtil.isMobileUserAgent() && \"true\".equals(getPropertyString(\"enableResponsiveSwitch\"));\n    }\n    \n    protected String pageProfile(Map<String, Object> data) {\n        String html = \"\";\n        try {\n            UserProfileMenu profile = new UserProfileMenu();\n            userview.setProperty(\"pageNotFoundMenu\", profile);\n            Map<String, Object> props = new HashMap<String, Object>();\n            props.put(\"id\", PROFILE);\n            props.put(\"customId\", PROFILE);\n            props.put(\"menuId\", PROFILE);\n            props.put(\"label\", ResourceBundleUtil.getMessage(\"theme.universal.profile\"));\n            profile.setRequestParameters(userview.getParams());\n            profile.setProperties(props);\n            profile.setUserview(userview);\n            profile.setUrl(data.get(\"base_link\") + PROFILE);\n            profile.setKey(userview.getParamString(\"key\"));\n            html += UserviewUtil.getUserviewMenuHtml(profile);\n        } catch (Exception e) {\n            html += handleContentError(e, data);\n        }\n        return html;\n    }\n    \n    protected String pageInbox(Map<String, Object> data) {\n        String html = \"\";\n        try {\n            UserviewMenu menu = null;\n            if (\"current\".equals(getPropertyString(\"inbox\"))) {\n                menu = new InboxMenu();\n            } else if (\"all\".equals(getPropertyString(\"inbox\"))) {\n                menu = new UniversalInboxMenu();\n            }\n            if (menu != null) {\n                userview.setProperty(\"pageNotFoundMenu\", menu);\n                Map<String, Object> props = new HashMap<String, Object>();\n                props.put(\"id\", INBOX);\n                props.put(\"customId\", INBOX);\n                props.put(\"menuId\", INBOX);\n                props.put(\"label\", \"\");\n                \n                if (\"current\".equals(getPropertyString(\"inbox\"))) {\n                    props.put(InboxMenu.PROPERTY_FILTER, InboxMenu.PROPERTY_FILTER_ALL);\n                }\n                \n                menu.setRequestParameters(userview.getParams());\n                menu.setProperties(props);\n                menu.setUserview(userview);\n                menu.setUrl(data.get(\"base_link\") + INBOX);\n                menu.setKey(userview.getParamString(\"key\"));\n                html += UserviewUtil.getUserviewMenuHtml(menu);\n            }\n        } catch (Exception e) {\n            html += handleContentError(e, data);\n        }\n        return html;\n    }\n\n    public void webService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String action = request.getParameter(\"_a\");\n\n        if (\"getAssignment\".equals(action)) {\n            try {\n                String appId = request.getParameter(\"appId\");\n                WorkflowManager wm = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\n                if (appId != null && appId.isEmpty()) {\n                    appId = null;\n                }\n                int count = wm.getAssignmentSize(appId, null, null);\n                Collection<WorkflowAssignment> assignments = wm.getAssignmentListLite(appId, null, null, null, \"a.activated\", true, 0, 5);\n        \n                JSONObject jsonObj = new JSONObject();\n                jsonObj.accumulate(\"count\", count);\n                \n                String format = AppUtil.getAppDateFormat();\n                Collection<Map<String, String>> datas = new ArrayList<Map<String, String>>();\n                for (WorkflowAssignment a : assignments) {\n                    Map<String, String> data = new HashMap<String, String>();\n                    data.put(\"processId\", a.getProcessId());\n                    data.put(\"processDefId\", a.getProcessDefId());\n                    data.put(\"processRequesterId\", a.getProcessRequesterId());\n                    data.put(\"processName\", a.getProcessName());\n                    data.put(\"processVersion\", a.getProcessVersion());\n                    data.put(\"activityId\", a.getActivityId());\n                    data.put(\"activityDefId\", a.getActivityDefId());\n                    data.put(\"activityName\", a.getActivityName());\n                    data.put(\"assigneeName\", a.getAssigneeName());\n                    data.put(\"dateCreated\", TimeZoneUtil.convertToTimeZone(a.getDateCreated(), null, format));\n                    datas.add(data);\n                }\n                \n                jsonObj.put(\"data\", datas);\n\n                jsonObj.write(response.getWriter());\n            } catch (Exception ex) {\n                LogUtil.error(this.getClass().getName(), ex, \"Get assignment error!\");\n                response.setStatus(HttpServletResponse.SC_NO_CONTENT);\n            }\n        } else {\n            response.setStatus(HttpServletResponse.SC_NO_CONTENT);\n        }\n    }\n    \n    @Override\n    public String getFavIconLink(Map<String, Object> data) {\n        String fav = getPropertyString(\"fav_icon\");\n        if (!fav.isEmpty()) {\n            return fav;\n        } else {\n            return super.getFavIconLink(data);\n        }\n    }\n    \n    @Override\n    public boolean isMobileViewDisabled() {\n        return true;\n    }\n    \n    @Override\n    public String[] themeDefinedMenusId() {\n        return new String[] {PROFILE, INBOX};\n    }\n\n    @Override\n    public String handlePwaOfflinePage(Map<String, Object> data) {\n        return UserviewUtil.getTemplate(this, data, \"/templates/userview/pwaOffline.ftl\");\n    }\n\n    @Override\n    public String handlePwaUnavailablePage(Map<String, Object> data) {\n        return UserviewUtil.getTemplate(this, data, \"/templates/userview/pwaUnavailable.ftl\");\n    }\n}\n"], "fixing_code": ["package org.joget.apps.app.controller;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.joget.apm.APMUtil;\nimport org.joget.apps.app.dao.UserviewDefinitionDao;\nimport org.joget.apps.app.model.AppDefinition;\nimport org.joget.apps.app.model.UserviewDefinition;\nimport org.joget.apps.app.service.AppService;\nimport org.joget.apps.userview.model.Userview;\nimport org.joget.apps.userview.service.UserviewService;\nimport org.joget.apps.userview.service.UserviewThemeProcesser;\nimport org.joget.apps.userview.service.UserviewUtil;\nimport org.joget.commons.util.SecurityUtil;\nimport org.joget.commons.util.StringUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@Controller\npublic class UserviewWebController {\n\n    @Autowired\n    private UserviewService userviewService;\n    @Autowired\n    AppService appService;\n    @Autowired\n    UserviewDefinitionDao userviewDefinitionDao;\n\n    @RequestMapping({\"/userview/(*:appId)/(*:userviewId)/(~:key)\",\"/userview/(*:appId)/(*:userviewId)\",\"/userview/(*:appId)/(*:userviewId)/(*:key)/(*:menuId)\"})\n    public String view(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(value = \"menuId\", required = false) String menuId, @RequestParam(value = \"key\", required = false) String key, @RequestParam(value = \"embed\", required = false) Boolean embed) throws Exception {\n        if (embed == null) {\n            embed = false;\n        }\n        return embedView(map, request, response, appId, userviewId, menuId, key, embed, null);\n    }\n    \n    @RequestMapping({\"/embed/userview/(*:appId)/(*:userviewId)/(~:key)\",\"/embed/userview/(*:appId)/(*:userviewId)\",\"/embed/userview/(*:appId)/(*:userviewId)/(*:key)/(*:menuId)\"})\n    public String embedView(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(value = \"menuId\", required = false) String menuId, @RequestParam(value = \"key\", required = false) String key, Boolean embed, @RequestParam(value = \"embed\", required = false) Boolean embedParam) throws Exception {\n        if (APMUtil.isGlowrootAvailable()) {\n            //remove key & embed keyword from the url for better tracking\n            String url = request.getRequestURL().toString();\n            url = url.substring(0, url.indexOf(\"/userview\")) + \"/userview/\" + appId + \"/\" + userviewId;\n            if (menuId != null && !menuId.isEmpty()) {\n                url += \"/\" + menuId;\n            }\n            APMUtil.setTransactionName(url, 1001);\n        }\n        \n        // validate input\n        appId = SecurityUtil.validateStringInput(appId); \n        userviewId = SecurityUtil.validateStringInput(userviewId); \n        menuId = SecurityUtil.validateStringInput(menuId);        \n        key = SecurityUtil.validateStringInput(key);\n        SecurityUtil.validateBooleanInput(embed);\n        SecurityUtil.validateBooleanInput(embedParam);\n\n        if (embedParam != null && !embedParam) {\n            //exit embed mode by param\n            return \"redirect:/web/userview/\" + appId + \"/\" + userviewId + \"/\" + ((key != null )?key:\"\") + \"/\" + menuId + '?' +StringUtil.decodeURL(request.getQueryString());\n        } else if (embed == null) {\n            embed = true;\n        }\n        \n        //check for empty key\n        if (key == null || (key != null && key.equals(Userview.USERVIEW_KEY_EMPTY_VALUE))) {\n            key = \"\";\n        }\n        \n        // retrieve app and userview\n        AppDefinition appDef = appService.getPublishedAppDefinition(appId);\n        if (appDef == null) {\n            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n            return null;\n        }\n        map.addAttribute(\"appId\", appDef.getId());\n        map.addAttribute(\"appDefinition\", appDef);\n        map.addAttribute(\"appVersion\", appDef.getVersion());\n        map.addAttribute(\"key\", key);\n        map.addAttribute(\"menuId\", menuId);\n        map.addAttribute(\"embed\", embed);\n        map.addAttribute(\"queryString\", request.getQueryString());\n        if (userviewService.isDefaultUserview(appDef.getId(), userviewId)) {\n            request.setAttribute(\"isDefaultUserview\", Boolean.TRUE);\n        }\n        UserviewDefinition userview = userviewDefinitionDao.loadById(userviewId, appDef);\n        if (userview != null) {\n            String json = userview.getJson();\n            Userview userviewObject = userviewService.createUserview(json, menuId, false, request.getContextPath(), request.getParameterMap(), key, embed);\n            UserviewThemeProcesser processer = new UserviewThemeProcesser(userviewObject, request);\n            map.addAttribute(\"userview\", userviewObject);\n            map.addAttribute(\"processer\", processer);\n            String view = processer.getView();\n            if (view != null) {\n                if (view.startsWith(\"redirect:\")) {\n                    map.clear();\n                }\n                return view;\n            }\n        }\n        return \"ubuilder/view\";\n    }\n    \n    @RequestMapping({\"/ulogin/(*:appId)/(*:userviewId)/(~:key)\",\"/ulogin/(*:appId)/(*:userviewId)\",\"/ulogin/(*:appId)/(*:userviewId)/(*:key)/(*:menuId)\"})\n    public String login(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(value = \"menuId\", required = false) String menuId, @RequestParam(value = \"key\", required = false) String key, @RequestParam(value = \"embed\", required = false) Boolean embed) throws Exception {\n        if (embed == null) {\n            embed = false;\n        }\n        return embedLogin(map, request, response, appId, userviewId, menuId, key, embed);\n    }\n\n    @RequestMapping({\"/embed/ulogin/(*:appId)/(*:userviewId)/(~:key)\",\"/embed/ulogin/(*:appId)/(*:userviewId)\",\"/embed/ulogin/(*:appId)/(*:userviewId)/(*:key)/(*:menuId)\"})\n    public String embedLogin(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(value = \"menuId\", required = false) String menuId, @RequestParam(value = \"key\", required = false) String key, Boolean embed) throws Exception {\n        if (embed == null) {\n            embed = true;\n        }\n        \n        //check for empty key\n        if (key != null && key.equals(Userview.USERVIEW_KEY_EMPTY_VALUE)) {\n            key = null;\n        }\n        \n        // validate input\n        SecurityUtil.validateStringInput(appId);        \n        SecurityUtil.validateStringInput(menuId);        \n        SecurityUtil.validateStringInput(key);\n        SecurityUtil.validateBooleanInput(embed);\n\n        // retrieve app and userview\n        AppDefinition appDef = appService.getPublishedAppDefinition(appId);\n        if (appDef == null) {\n            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n            return null;\n        }\n        map.addAttribute(\"appId\", appDef.getId());\n        map.addAttribute(\"appDefinition\", appDef);\n        map.addAttribute(\"appVersion\", appDef.getVersion());\n        map.addAttribute(\"key\", key);\n        map.addAttribute(\"menuId\", menuId);\n        map.addAttribute(\"embed\", embed);\n        map.addAttribute(\"queryString\", request.getQueryString());\n        UserviewDefinition userview = userviewDefinitionDao.loadById(userviewId, appDef);\n        if (userview != null) {\n            String json = userview.getJson();\n            Userview userviewObject = userviewService.createUserview(json, menuId, false, request.getContextPath(), request.getParameterMap(), key, embed);\n            UserviewThemeProcesser processer = new UserviewThemeProcesser(userviewObject, request);\n            map.addAttribute(\"userview\", userviewObject);\n            map.addAttribute(\"processer\", processer);\n            String view = processer.getLoginView();\n            if (view != null) {\n                if (view.startsWith(\"redirect:\")) {\n                    map.clear();\n                }\n                return view;\n            }\n        }\n\n        return \"ubuilder/login\";\n    }\n    \n    @RequestMapping({\"/userview/(*:appId)/(*:userviewId)/manifest\"})\n    public void manifest(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId) throws IOException {\n        String manifest = UserviewUtil.getManifest(SecurityUtil.validateStringInput(appId), SecurityUtil.validateStringInput(userviewId));\n        response.setContentType(\"application/manifest+json;charset=UTF-8\");\n        PrintWriter writer = response.getWriter();\n        writer.println(manifest);\n    }\n    \n    @RequestMapping({\"/userview/(*:appId)/(*:userviewId)/(*:key)/serviceworker\"})\n    public void serviceWorker(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(\"key\") String userviewKey) throws IOException {\n        String serviceWorker = UserviewUtil.getServiceWorker(SecurityUtil.validateStringInput(appId), SecurityUtil.validateStringInput(userviewId), SecurityUtil.validateStringInput(userviewKey));\n        response.setContentType(\"application/javascript;charset=UTF-8\");\n        response.setHeader(\"Service-Worker-Allowed\", (request.getContextPath().isEmpty())?\"/\":request.getContextPath());\n        PrintWriter writer = response.getWriter();\n        writer.println(serviceWorker);\n    }\n    \n    @RequestMapping({\"/userview/(*:appId)/(*:userviewId)/(*:key)/cacheUrls\"})\n    public void cacheUrls(ModelMap map, HttpServletRequest request, HttpServletResponse response, @RequestParam(\"appId\") String appId, @RequestParam(\"userviewId\") String userviewId, @RequestParam(\"key\") String userviewKey) throws IOException {\n        String cacheUrlsJSON = UserviewUtil.getCacheUrls(SecurityUtil.validateStringInput(appId), SecurityUtil.validateStringInput(userviewId), SecurityUtil.validateStringInput(userviewKey), request.getContextPath());\n        response.setContentType(\"application/json;charset=UTF-8\");\n        PrintWriter writer = response.getWriter();\n        writer.println(cacheUrlsJSON);\n    }\n}\n", "package org.joget.apps.userview.service;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.joget.apps.app.dao.UserviewDefinitionDao;\nimport org.joget.apps.app.model.AppDefinition;\nimport org.joget.apps.app.model.MobileElement;\nimport org.joget.apps.app.model.UserviewDefinition;\nimport org.joget.apps.app.service.AppService;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.app.service.MobileUtil;\nimport org.joget.apps.userview.model.CachedUserviewMenu;\nimport org.joget.apps.userview.model.Userview;\nimport org.joget.apps.userview.model.UserviewCategory;\nimport org.joget.apps.userview.model.UserviewMenu;\nimport org.joget.apps.userview.model.Permission;\nimport org.joget.apps.userview.model.UserviewSetting;\nimport org.joget.apps.userview.model.UserviewTheme;\nimport org.joget.commons.spring.model.Setting;\nimport org.joget.commons.util.LogUtil;\nimport org.joget.commons.util.ResourceBundleUtil;\nimport org.joget.commons.util.SetupManager;\nimport org.joget.commons.util.StringUtil;\nimport org.joget.directory.model.User;\nimport org.joget.directory.model.service.ExtDirectoryManager;\nimport org.joget.plugin.base.PluginManager;\nimport org.joget.plugin.property.service.PropertyUtil;\nimport org.joget.workflow.model.service.WorkflowUserManager;\nimport org.joget.workflow.util.WorkflowUtil;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.TransactionStatus;\nimport org.springframework.transaction.support.TransactionCallback;\nimport org.springframework.transaction.support.TransactionTemplate;\n\n/**\n * Service methods used to parse userview json definition to create Userview\n * \n */\n@Service(\"userviewService\")\npublic class UserviewService {\n\n    @Autowired\n    private PluginManager pluginManager;\n    @Autowired\n    private WorkflowUserManager workflowUserManager;\n    @Autowired\n    private AppService appService;\n    @Autowired\n    UserviewDefinitionDao userviewDefinitionDao;\n    @Autowired\n    private SetupManager setupManager;\n    @Autowired\n    @Qualifier(\"main\")\n    ExtDirectoryManager directoryManager;\n\n    /**\n     * Get userview setting object\n     * @param appDef\n     * @param json\n     * @return setting\n     */\n    public UserviewSetting getUserviewSetting(AppDefinition appDef, String json) {\n        UserviewSetting setting = null;\n        \n        //process json with hash variable\n        json = AppUtil.processHashVariable(json, null, StringUtil.TYPE_JSON, null, appDef);\n        \n        User currentUser = workflowUserManager.getCurrentUser();\n        \n        Map<String, Object> requestParameters = new HashMap<String, Object>();\n        requestParameters.put(\"appId\", appDef.getAppId());\n        requestParameters.put(\"appVersion\", appDef.getVersion().toString());\n        \n        Userview userview = new Userview();\n        \n        try {\n            //set userview properties\n            JSONObject userviewObj = new JSONObject(json);\n            userview.setProperties(PropertyUtil.getPropertiesValueFromJson(userviewObj.getJSONObject(\"properties\").toString()));\n\n            //set Setting\n            JSONObject settingObj = userviewObj.getJSONObject(\"setting\");\n            setting = new UserviewSetting();\n            setting.setProperties(PropertyUtil.getPropertiesValueFromJson(settingObj.getJSONObject(\"properties\").toString()));\n\n            //set theme & permission\n            try {\n                JSONObject themeObj = settingObj.getJSONObject(\"properties\").getJSONObject(\"theme\");\n                UserviewTheme theme = (UserviewTheme) pluginManager.getPlugin(themeObj.getString(\"className\"));\n                theme.setProperties(PropertyUtil.getPropertiesValueFromJson(themeObj.getJSONObject(\"properties\").toString()));\n                theme.setRequestParameters(requestParameters);\n                theme.setUserview(userview);\n                setting.setTheme(theme);\n            } catch (Exception e) {\n                LogUtil.debug(getClass().getName(), \"set theme error.\");\n            }\n            try {\n                if (!\"true\".equals(setting.getPropertyString(\"tempDisablePermissionChecking\"))) {\n                    JSONObject permissionObj = settingObj.getJSONObject(\"properties\").getJSONObject(\"permission\");\n                    Permission permission = null;\n                    String permissionClassName = permissionObj.getString(\"className\");\n                    if (permissionClassName != null && !permissionClassName.isEmpty()) {\n                        permission = (Permission) pluginManager.getPlugin(permissionClassName);\n                    }\n                    if (permission != null) {\n                        permission.setProperties(PropertyUtil.getPropertiesValueFromJson(permissionObj.getJSONObject(\"properties\").toString()));\n                        permission.setRequestParameters(requestParameters);\n                        permission.setCurrentUser(currentUser);\n                        setting.setPermission(permission);\n                    }\n                }\n            } catch (Exception e) {\n                LogUtil.debug(getClass().getName(), \"set permission error.\");\n            }\n            userview.setSetting(setting);\n        } catch (Exception ex) {\n            LogUtil.debug(getClass().getName(), \"set userview setting error.\");\n        }\n\n        return setting;\n    }\n    \n    /**\n     * Create userview fron json\n     * @return\n     */\n    public Userview createUserview(String json, String menuId, boolean preview, String contextPath, Map requestParameters, String key, Boolean embed) {\n        AppDefinition appDef = AppUtil.getCurrentAppDefinition();\n        return createUserview(appDef, json, menuId, preview, contextPath, requestParameters, key, embed);\n    }\n\n    /**\n     * Create userview fron json\n     * @return\n     */\n    public Userview createUserview(AppDefinition appDef, String json, String menuId, boolean preview, String contextPath, Map requestParameters, String key, Boolean embed) {\n        String permissionKey = Permission.DEFAULT;\n                \n        if (key != null && key.trim().length() == 0) {\n            key = null;\n        }\n        if (key != null) {\n            key = StringEscapeUtils.escapeHtml(key);\n        }\n\n        //process json with hash variable\n        json = AppUtil.processHashVariable(json, null, StringUtil.TYPE_JSON, null, appDef);\n        json = AppUtil.replaceAppMessages(json, StringUtil.TYPE_JSON);\n\n        User currentUser = workflowUserManager.getCurrentUser();\n\n        if (requestParameters == null) {\n            requestParameters = new HashMap<String, Object>();\n        }\n        requestParameters = convertRequestParamMap(requestParameters);\n        requestParameters.put(\"contextPath\", contextPath);\n        requestParameters.put(\"isPreview\", Boolean.toString(preview));\n        requestParameters.put(\"embed\", Boolean.toString(embed));\n        requestParameters.put(\"appId\", appDef.getAppId());\n        requestParameters.put(\"appVersion\", appDef.getVersion().toString());\n        requestParameters.put(\"key\", (key != null)?key:\"\");\n\n        String appId = appDef.getId();\n        String appVersion = appDef.getVersion().toString();\n        Userview userview = new Userview();\n        userview.setParams(requestParameters);\n        \n        boolean userviewPermission = false;\n        \n        //if screenshot, set user to null (anonymous)\n        User currentThreadUser = currentUser;\n        boolean isScreenCapture = workflowUserManager.isCurrentUserInRole(WorkflowUserManager.ROLE_ADMIN) && \"true\".equalsIgnoreCase((String) requestParameters.get(\"_isScreenCapture\"));\n        if (isScreenCapture) {\n            currentUser = null;\n            workflowUserManager.setCurrentThreadUser(WorkflowUserManager.ROLE_ANONYMOUS);\n        }\n\n        try {\n            //set userview properties\n            JSONObject userviewObj = new JSONObject(json);\n            userview.setProperties(PropertyUtil.getProperties(userviewObj.getJSONObject(\"properties\")));\n\n            //set Setting\n            JSONObject settingObj = userviewObj.getJSONObject(\"setting\");\n            UserviewSetting setting = new UserviewSetting();\n            setting.setProperties(PropertyUtil.getProperties(settingObj.getJSONObject(\"properties\")));\n\n            //set theme & permission\n            try {\n                JSONObject themeObj = settingObj.getJSONObject(\"properties\").getJSONObject(\"theme\");\n                JSONObject themeProperties = themeObj.getJSONObject(\"properties\");\n                UserviewTheme theme = (UserviewTheme) pluginManager.getPlugin(themeObj.getString(\"className\"));\n                if (theme == null) {\n                    String defaultTheme = ResourceBundleUtil.getMessage(\"generator.userview.theme\");\n                    theme = (UserviewTheme) pluginManager.getPlugin(defaultTheme);\n                    String defaultThemePropertiesKey = \"generator.userview.theme.\" + defaultTheme + \".properties\";\n                    String defaultThemeProperties = \"{\" + ResourceBundleUtil.getMessage(defaultThemePropertiesKey) + \"}\";\n                    themeProperties = new JSONObject(defaultThemeProperties);\n                }\n                theme.setProperties(PropertyUtil.getProperties(themeProperties));\n                theme.setRequestParameters(requestParameters);\n                theme.setUserview(userview);\n                setting.setTheme(theme);\n            } catch (Exception e) {\n                LogUtil.debug(getClass().getName(), \"set theme error.\");\n            }\n            try {\n                if (!\"true\".equals(setting.getPropertyString(\"tempDisablePermissionChecking\"))) {\n                    if (settingObj.getJSONObject(\"properties\").has(\"permission_rules\")) {\n                        JSONArray permissionRules = settingObj.getJSONObject(\"properties\").getJSONArray(\"permission_rules\");\n                        if (permissionRules != null && permissionRules.length() > 0) {\n                            for (int i = 0; i < permissionRules.length(); i++) {\n                                JSONObject rule = permissionRules.getJSONObject(i);\n                                if (rule.has(\"permission\")) {\n                                    JSONObject permissionObj = rule.optJSONObject(\"permission\");\n                                    userviewPermission = UserviewUtil.getPermisionResult(permissionObj, requestParameters, currentUser);\n                                    if (userviewPermission) {\n                                        permissionKey = rule.getString(\"permission_key\");\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    if (!userviewPermission) {\n                        if (settingObj.getJSONObject(\"properties\").has(\"permission\")) {\n                            JSONObject permissionObj = settingObj.getJSONObject(\"properties\").getJSONObject(\"permission\");\n                            userviewPermission = UserviewUtil.getPermisionResult(permissionObj, requestParameters, currentUser);\n                        } else {\n                            userviewPermission = true;\n                        }\n                    }\n                } else {\n                    userviewPermission = true;\n                }\n            } catch (Exception e) {\n                LogUtil.debug(getClass().getName(), \"set permission error.\");\n            }\n            userview.setSetting(setting);\n\n            //set categories\n            Collection<UserviewCategory> categories = new ArrayList<UserviewCategory>();\n            \n            if (userviewPermission) {\n                JSONArray categoriesArray = userviewObj.getJSONArray(\"categories\");\n                for (int i = 0; i < categoriesArray.length(); i++) {\n                    JSONObject categoryObj = (JSONObject) categoriesArray.get(i);\n\n                    UserviewCategory category = new UserviewCategory();\n                    category.setProperties(PropertyUtil.getProperties(categoryObj.getJSONObject(\"properties\")));\n                    \n                    //check for permission\n                    JSONObject ruleObj = null;\n                    if (Permission.DEFAULT.equals(permissionKey)) {\n                        ruleObj = categoryObj.getJSONObject(\"properties\");\n                    } else if (categoryObj.getJSONObject(\"properties\").has(\"permission_rules\")) {\n                        JSONObject permissionRules = categoryObj.getJSONObject(\"properties\").getJSONObject(\"permission_rules\");\n                        if (permissionRules != null && permissionRules.has(permissionKey)) {\n                            ruleObj = permissionRules.getJSONObject(permissionKey);\n                        }\n                    }\n                        \n                    boolean hasPermis = false;\n                    if (preview || \"true\".equals(setting.getPropertyString(\"tempDisablePermissionChecking\"))) {\n                        hasPermis = true;\n                    } else {\n                        if (ruleObj != null) {\n                            if (ruleObj.has(\"permissionDeny\") && \"true\".equals(ruleObj.getString(\"permissionDeny\"))) {\n                                hasPermis = false;\n                            } else if (ruleObj.has(\"permission\")){\n                                try {\n                                    JSONObject permissionObj = ruleObj.getJSONObject(\"permission\");\n                                    hasPermis = UserviewUtil.getPermisionResult(permissionObj, requestParameters, currentUser);\n                                } catch (Exception e) {\n                                    LogUtil.debug(getClass().getName(), \"set category permission error.\");\n                                }\n                            } else {\n                                hasPermis = true;\n                            }\n                            \n                            //handle for permission rule to override the default setting\n                            if (ruleObj.has(\"hide\") && \"yes\".equals(ruleObj.getString(\"hide\"))) {\n                                category.setProperty(\"hide\", \"yes\");\n                            } else { \n                                category.setProperty(\"hide\", \"\");\n                            }\n                        } else { //when no properties found for the category object\n                            hasPermis = true;\n                            category.setProperty(\"hide\", \"\");\n                        }\n                    }\n\n                    if (hasPermis) {\n                        //set menus\n                        JSONArray menusArray = categoryObj.getJSONArray(\"menus\");\n                        Collection<UserviewMenu> menus = new ArrayList<UserviewMenu>();\n                        for (int j = 0; j < menusArray.length(); j++) {\n                            try {\n                                //set menu\n                                JSONObject menuObj = (JSONObject) menusArray.get(j);\n                                UserviewMenu menu = (UserviewMenu) pluginManager.getPlugin(menuObj.getString(\"className\"));\n\n                                // check for mobile support\n                                boolean isMobileView = MobileUtil.isMobileView();\n                                if (isMobileView && (menu instanceof MobileElement) && !((MobileElement)menu).isMobileSupported()) {\n                                    // mobile not supported, skip this menu\n                                    continue;\n                                }\n                                \n                                //check for deny\n                                JSONObject menuRuleObj = null;\n                                if (Permission.DEFAULT.equals(permissionKey)) {\n                                    menuRuleObj = menuObj.getJSONObject(\"properties\");\n                                } else if (menuObj.getJSONObject(\"properties\").has(\"permission_rules\")) {\n                                    JSONObject permissionRules = menuObj.getJSONObject(\"properties\").getJSONObject(\"permission_rules\");\n                                    if (permissionRules != null && permissionRules.has(permissionKey)) {\n                                        menuRuleObj = permissionRules.getJSONObject(permissionKey);\n                                    }\n                                }\n                                if (menuRuleObj != null && menuRuleObj.has(\"permissionDeny\") && \"true\".equals(menuRuleObj.getString(\"permissionDeny\"))) {\n                                    continue;\n                                }\n\n                                menu.setProperties(PropertyUtil.getProperties(menuObj.getJSONObject(\"properties\")));\n                                menu.setRequestParameters(requestParameters);\n                                menu.setUserview(userview);\n                                String mId = getMenuId(menu);\n                                menu.setProperty(\"menuId\", mId);\n\n                                if (preview) {\n                                    menu.setUrl(contextPath + \"/web/console/app/\" + appId + \"/\" + appVersion + \"/userview/builderPreview/\" + userview.getPropertyString(\"id\") + \"/\" + mId);\n                                } else {\n                                    menu.setKey(key);\n                                    String prefix = \"/web/userview/\";\n\n                                    if (embed) {\n                                        prefix = \"/web/embed/userview/\";\n                                    }\n\n                                    menu.setUrl(contextPath + prefix + appId + \"/\" + userview.getPropertyString(\"id\") + \"/\" + ((key != null) ? StringEscapeUtils.escapeHtml(key) : Userview.USERVIEW_KEY_EMPTY_VALUE) + \"/\" + mId);\n                                }\n\n                                //set Current, if current menu id is empty, search the 1st valid menu\n                                if (((\"\".equals(menuId) || \"index\".equals(menuId) || menuId == null) && userview.getCurrent() == null && menu.isHomePageSupported())\n                                        || (menuId != null && menuId.equals(mId))) {\n                                    userview.setCurrent(menu);\n                                    userview.setCurrentCategory(category);\n                                }\n\n                                //set home menu Id\n                                if (userview.getPropertyString(\"homeMenuId\") == null || userview.getPropertyString(\"homeMenuId\").isEmpty() && menu.isHomePageSupported()) {\n                                    userview.setProperty(\"homeMenuId\", mId);\n                                }\n                                \n                                if (menuRuleObj == null || !menuRuleObj.has(\"permissionHidden\") || !\"true\".equals(menuRuleObj.getString(\"permissionHidden\"))) {\n                                    menu = new CachedUserviewMenu(menu);\n                                    menus.add(menu);\n                                }\n                            } catch (Exception e) {\n                                LogUtil.debug(getClass().getName(), \"Userview Menu class file not found\");\n                            }\n                        }\n\n                        category.setMenus(menus);\n                        if (!\"yes\".equals(category.getPropertyString(\"hide\")) && menus.size() > 0) {\n                            categories.add(category);\n                        }\n                    }\n                }\n            }\n            userview.setCategories(categories);\n        } catch (Exception ex) {\n            LogUtil.error(getClass().getName(), ex, \"Create Userview Error!!\");\n        } finally {\n            if (isScreenCapture) {\n                workflowUserManager.setCurrentThreadUser(currentThreadUser);\n            }\n        }\n        return userview;\n    }\n\n    /**\n     * Gets the id of an userview menu\n     * @param menu\n     * @return \n     */\n    public String getMenuId(UserviewMenu menu) {\n        String menuId = menu.getPropertyString(\"id\");\n        if (menu.getPropertyString(\"customId\") != null && menu.getPropertyString(\"customId\").trim().length() > 0) {\n            menuId = menu.getPropertyString(\"customId\");\n        }\n        return menuId;\n    }\n\n    /**\n     * Gets the name of a userview from json definition\n     * @param json\n     * @return \n     */\n    public String getUserviewName(String json) {\n        try {\n            JSONObject userviewObj = new JSONObject(json);\n            return PropertyUtil.getProperties(userviewObj.getJSONObject(\"properties\")).get(\"name\").toString();\n        } catch (Exception ex) {\n            LogUtil.error(getClass().getName(), ex, \"Get Userview Name Error!!\");\n        }\n        return \"\";\n    }\n    \n    /**\n     * Gets the userview theme used by an userview\n     * @param appId\n     * @param userviewId\n     * @return \n     */\n    public UserviewTheme getUserviewTheme(String appId, String userviewId) {\n        UserviewTheme theme = null;\n        \n        AppDefinition appDef = appService.getPublishedAppDefinition(appId);\n        HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n        if (appDef != null && request != null) {\n            UserviewDefinition userviewDef = userviewDefinitionDao.loadById(userviewId, appDef);\n            if (userviewDef != null) {\n                String json = userviewDef.getJson();\n                //process json with hash variable\n                json = AppUtil.processHashVariable(json, null, StringUtil.TYPE_JSON, null, appDef);\n                \n                Map requestParameters = convertRequestParamMap(request.getParameterMap());\n                requestParameters.put(\"contextPath\", request.getContextPath());\n                requestParameters.put(\"appId\", appDef.getAppId());\n                requestParameters.put(\"appVersion\", appDef.getVersion().toString());\n\n                try {\n                    Userview userview = new Userview();\n\n                    //set userview properties\n                    JSONObject userviewObj = new JSONObject(json);\n                    userview.setProperties(PropertyUtil.getProperties(userviewObj.getJSONObject(\"properties\")));\n\n                    JSONObject settingObj = userviewObj.getJSONObject(\"setting\");\n                    JSONObject themeObj = settingObj.getJSONObject(\"properties\").getJSONObject(\"theme\");\n\n                    theme = (UserviewTheme) pluginManager.getPlugin(themeObj.getString(\"className\"));\n                    if (theme != null) {\n                        theme.setProperties(PropertyUtil.getProperties(themeObj.getJSONObject(\"properties\")));\n                        theme.setRequestParameters(requestParameters);\n                        theme.setUserview(userview);\n                    }\n\n                } catch (Exception e) {\n                    LogUtil.debug(getClass().getName(), \"get userview theme error.\");\n                }\n            }\n        }\n        return theme;\n    }\n\n    /**\n     * Gets userview description from json definition\n     * @param json\n     * @return \n     */\n    public String getUserviewDescription(String json) {\n        try {\n            JSONObject userviewObj = new JSONObject(json);\n            JSONObject settingObj = userviewObj.getJSONObject(\"setting\");\n            Object description = PropertyUtil.getProperties(settingObj.getJSONObject(\"properties\")).get(\"userviewDescription\");\n            return (description != null) ? description.toString() : \"\";\n        } catch (Exception ex) {\n            LogUtil.error(getClass().getName(), ex, \"Get Userview Description Error!!\");\n        }\n        return \"\";\n    }\n\n    /**\n     * Gets the userview theme used by an userview\n     * @param appId\n     * @param version\n     * @param userviewId\n     * @return \n     */\n    public Set<String> getAllMenuIds(String appId, String version, String userviewId) {\n        Set<String> ids = new HashSet<String>();\n        \n        AppDefinition appDef = appService.getAppDefinition(appId, version);\n        UserviewDefinition userviewDef = userviewDefinitionDao.loadById(userviewId, appDef);\n        if (userviewDef != null) {\n            String json = userviewDef.getJson();\n\n            try {\n                //set userview properties\n                JSONObject userviewObj = new JSONObject(json);\n                JSONArray categoriesArray = userviewObj.getJSONArray(\"categories\");\n                for (int i = 0; i < categoriesArray.length(); i++) {\n                    JSONObject categoryObj = (JSONObject) categoriesArray.get(i);\n                    JSONArray menusArray = categoryObj.getJSONArray(\"menus\");\n                    for (int j = 0; j < menusArray.length(); j++) {\n                        JSONObject menuObj = (JSONObject) menusArray.get(j);\n                        JSONObject props = menuObj.getJSONObject(\"properties\");\n                        String id = props.getString(\"id\");\n                        String customId = (props.has(\"customId\"))?props.getString(\"customId\"):null;\n                        if (customId != null && !customId.isEmpty()) {\n                            ids.add(customId);\n                        } else {\n                            ids.add(id);\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                LogUtil.debug(getClass().getName(), \"get userview menu ids error.\");\n            }\n        }\n        \n        return ids;\n    }\n    \n    private Map convertRequestParamMap(Map params) {\n        Map result = new HashMap();\n        for (String key : (Set<String>) params.keySet()) {\n            key = StringEscapeUtils.escapeHtml(key);\n            String[] paramValue = (String[]) params.get(key);\n            if (paramValue.length == 1) {\n                result.put(key, paramValue[0]);\n            } else {\n                result.put(key, paramValue);\n            }\n        }\n        return result;\n    }\n    \n    public UserviewDefinition getDefaultUserview() {\n        // check for app center userview setting\n        String defaultUserviewProperty = \"defaultUserview\";\n        UserviewDefinition defaultUserview = null;\n        Setting defaultUserviewSetting = setupManager.getSettingByProperty(defaultUserviewProperty);\n        if (defaultUserviewSetting != null) {\n            // check app center userview is published\n            String defaultUserviewValue = defaultUserviewSetting.getValue();\n            StringTokenizer st = new StringTokenizer(defaultUserviewValue, \"/\");\n            String appId = (st.hasMoreTokens()) ? st.nextToken() : null;\n            String userviewId = (st.hasMoreTokens()) ? st.nextToken() : null;\n            if (appId != null && userviewId != null) {\n                AppDefinition appDef = appService.getPublishedAppDefinition(appId);\n                if (appDef != null) {\n                    defaultUserview = userviewDefinitionDao.loadById(userviewId, appDef);\n                }\n            }            \n        } else {\n            // import default app center app\n            String path = \"/setup/apps/APP_appcenter7-1.zip\";\n            LogUtil.info(getClass().getName(), \"Import default app center \" + path);\n            InputStream in = null;\n            try {\n                in = getClass().getResourceAsStream(path);\n                byte[] fileContent = IOUtils.toByteArray(in);\n                final AppDefinition appDef = appService.importApp(fileContent);\n                if (appDef != null) {\n                    TransactionTemplate transactionTemplate = (TransactionTemplate) AppUtil.getApplicationContext().getBean(\"transactionTemplate\");\n                    transactionTemplate.execute(new TransactionCallback<Object>() {\n                        public Object doInTransaction(TransactionStatus ts) {\n                            appService.publishApp(appDef.getId(), null);\n                            return null;\n                        }\n                    });\n                    // get app center userview\n                    Collection<UserviewDefinition> userviewList = appDef.getUserviewDefinitionList();\n                    if (!userviewList.isEmpty()) {\n                        String userviewId = userviewList.iterator().next().getId();\n                        defaultUserview = userviewDefinitionDao.loadById(userviewId, appDef);\n                        \n                        // save setting\n                        String value = defaultUserview.getAppId() + \"/\" + defaultUserview.getId();\n                        Setting newSetting = new Setting();\n                        newSetting.setProperty(defaultUserviewProperty);\n                        newSetting.setValue(value);\n                        setupManager.saveSetting(newSetting);                        \n                    }\n                }\n            } catch (Exception ex) {\n                LogUtil.error(getClass().getName(), ex, \"Failed to import default app center \" + path);\n            } finally {\n                try {\n                    if (in != null) {\n                        in.close();\n                    }\n                } catch (IOException e) {\n                }\n            }\n        }\n        return defaultUserview;\n    }\n\n    public boolean isDefaultUserview(String appId, String userviewId) {\n        boolean result = false;\n        String userviewPath = appId + \"/\" + userviewId;\n        Setting defaultUserviewSetting = setupManager.getSettingByProperty(\"defaultUserview\");\n        if (defaultUserviewSetting != null) {\n            // check app center userview is published\n            String defaultUserviewValue = defaultUserviewSetting.getValue();\n            result = userviewPath.equals(defaultUserviewValue);\n        }\n        return result;\n    }\n    \n}\n", "package org.joget.plugin.enterprise;\n\nimport com.asual.lesscss.LessEngine;\nimport de.bripkens.gravatar.DefaultImage;\nimport de.bripkens.gravatar.Gravatar;\nimport de.bripkens.gravatar.Rating;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport net.sf.ehcache.Cache;\nimport net.sf.ehcache.Element;\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.app.service.MobileUtil;\nimport org.joget.apps.userview.lib.InboxMenu;\nimport org.joget.apps.userview.model.Userview;\nimport org.joget.apps.userview.model.UserviewCategory;\nimport org.joget.apps.userview.model.UserviewMenu;\nimport org.joget.apps.userview.model.UserviewPwaTheme;\nimport org.joget.apps.userview.model.UserviewSetting;\nimport org.joget.apps.userview.model.UserviewV5Theme;\nimport org.joget.apps.userview.service.UserviewUtil;\nimport org.joget.commons.util.LogUtil;\nimport org.joget.commons.util.ResourceBundleUtil;\nimport org.joget.commons.util.StringUtil;\nimport org.joget.commons.util.TimeZoneUtil;\nimport org.joget.directory.model.User;\nimport org.joget.directory.model.service.DirectoryUtil;\nimport org.joget.plugin.base.PluginWebSupport;\nimport org.joget.workflow.model.WorkflowAssignment;\nimport org.joget.workflow.model.service.WorkflowManager;\nimport org.joget.workflow.model.service.WorkflowUserManager;\nimport org.joget.workflow.util.WorkflowUtil;\nimport org.json.JSONObject;\n\npublic class UniversalTheme extends UserviewV5Theme implements UserviewPwaTheme, PluginWebSupport {\n    protected final static String PROFILE = \"_ja_profile\"; \n    protected final static String INBOX = \"_ja_inbox\"; \n    protected static LessEngine lessEngine = new LessEngine();\n\n    public enum Color {\n        RED(\"#F44336\", \"#D32F2F\", \"\"),\n        PINK(\"#E91E63\", \"#C2185B\", \"\"),\n        PURPLE(\"#9C27B0\", \"#7B1FA2\", \"\"),\n        DEEP_PURPLE(\"#673AB7\", \"#512DA8\", \"\"),\n        INDIGO(\"#3F51B5\", \"#303F9F\", \"\"),\n        BLUE(\"#0D6EFD\", \"#1976D2\", \"\"),\n        LIGHT_BLUE(\"#03A9F4\", \"#0288D1\", \"\"),\n        CYAN(\"#00BCD4\", \"#0097A7\", \"\"),\n        TEAL(\"#009688\", \"#00796B\", \"\"),\n        GREEN(\"#4CAF50\", \"#388E3C\", \"\"),\n        LIGHT_GREEN(\"#8BC34A\", \"#689F38\", \"\"),\n        LIME(\"#CDDC39\", \"#AFB42B\", \"\"),\n        YELLOW(\"#FFEB3B\", \"#FBC02D\", \"\"),\n        AMBER(\"#FFC107\", \"#FFA000\", \"\"),\n        ORANGE(\"#FF9800\", \"#F57C00\", \"\"),\n        DEEP_ORANGE(\"#FF5722\", \"#E64A19\", \"\"),\n        BROWN(\"#795548\", \"#795548\", \"\"),\n        GREY(\"#6c757D\", \"#616161\", \"\"),\n        BLUE_GREY(\"#607D8B\", \"#455A64\", \"\"),\n        DEEP_GREY(\"#2B343A\", \"#1E262B\", \"#222c32\"),\n        LAVENDERBLUSH(\"#FFF0F5\", \"\", \"\"),\n        THISTLE(\"#D8BFD8\", \"\", \"\"),\n        PLUM(\"#DDA0DD\", \"\", \"\"),\n        LAVENDER(\"#E6E6FA\", \"\", \"\"),\n        GHOSTWHITE(\"#F8F8FF\", \"\", \"\"),\n        DARKROYALBLUE(\"#3b5998\", \"\", \"\"),\n        ROYALBLUE(\"#4169E1\", \"\", \"\"),\n        CORNFLOWERBLUE(\"#6495ED\", \"\", \"\"),\n        ALICEBLUE(\"#F0F8FF\", \"\", \"\"),\n        LIGHTSTEELBLUE(\"#B0C4DE\", \"\", \"\"),\n        STEELBLUE(\"#4682B4\", \"\", \"\"),\n        LIGHTSKYBLUE(\"#87CEFA\", \"\", \"\"),\n        SKYBLUE(\"#87CEEB\", \"\", \"\"),\n        DEEPSKYBLUE(\"#00BFFF\", \"\", \"\"),\n        AZURE(\"#F0FFFF\", \"\", \"\"),\n        LIGHTCYAN(\"#E1FFFF\", \"\", \"\"),\n        IVORY(\"#FFFFF0\", \"\", \"\"),\n        LEMONCHIFFON(\"#FFFACD\", \"\", \"\"),\n        WHEAT(\"#F5DEB3\", \"\", \"\"),\n        LIGHTGREY(\"#D3D3D3\", \"\", \"\"),\n        SILVER(\"#C0C0C0\", \"\", \"\"),\n        BLACK(\"#000000\", \"#222222\", \"\"),\n        WHITE(\"#FFFFFF\", \"\", \"#DDDDDD\");\n        \n        protected final String color;  \n        protected final String dark; \n        protected final String light;\n        Color(String color, String dark, String light) {\n            this.color = color;\n            this.dark = dark;\n            this.light = light;\n        }\n    }\n    \n    @Override\n    public String getName() {\n        return \"V6 Universal Theme\";\n    }\n\n    @Override\n    public String getVersion() {\n        return \"6.0.0\";\n    }\n\n    @Override\n    public String getDescription() {\n        return \"A universal responsive Userview Theme based on Material Design\";\n    }\n\n    @Override\n    public String getLabel() {\n        return getName();\n    }\n\n    @Override\n    public String getClassName() {\n        return getClass().getName();\n    }\n\n    public String getPathName() {\n        return \"universal\";\n    }\n    \n    @Override\n    public String getPropertyOptions() {\n        return AppUtil.readPluginResource(getClass().getName(), \"/properties/userview/\" + getPathName() + \"Theme.json\", null, true, null);\n    }\n    \n    @Override\n    public String getMetas(Map<String, Object> data) {\n        String maxScale = \"\";\n        if (MobileUtil.isIOS()) { //used to prevent text field zoom on focus in ios\n            maxScale = \", maximum-scale=1\";\n        }\n\n        String meta = super.getMetas(data) + \"\\n\";\n        if ((Boolean) data.get(\"is_login_page\")) {\n            meta += \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\"+maxScale+\", user-scalable=no\\\">\\n\";\n        } else {\n            meta += \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\"+maxScale+\"\\\">\\n\";\n        }\n        meta += \"<meta name=\\\"msapplication-tap-highlight\\\" content=\\\"no\\\"/>\\n\";\n        meta += getInternalMetas(data);\n        return meta;\n    }\n    \n    protected String getInternalMetas(Map<String, Object> data) {\n        String meta = \"\";\n        // set description\n        String description = userview.getPropertyString(\"description\");\n        if (description != null && !description.trim().isEmpty()) {\n            meta += \"<meta name=\\\"Description\\\" content=\\\"\" + StringEscapeUtils.escapeHtml(description) + \"\\\"/>\\n\";\n        }\n        \n        // PWA: set address bar theme color\n        Userview uv = (Userview)data.get(\"userview\");\n        String primary = getPrimaryColor();\n        meta += \"<meta name=\\\"theme-color\\\" content=\\\"\" + primary + \"\\\"/>\\n\";\n\n        // PWA: set apple-touch-icon\n        HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n        String icon = request.getContextPath() + \"/images/logo_512x512.png\";\n        UserviewSetting userviewSetting = getUserview().getSetting();\n        if (!userviewSetting.getPropertyString(\"userview_thumbnail\").isEmpty()) {\n            icon = userviewSetting.getPropertyString(\"userview_thumbnail\");\n        }\n        meta += \"<link rel=\\\"apple-touch-icon\\\" href=\\\"\" + icon + \"\\\">\\n\";\n        \n        // PWA: set manifest URL\n        String appId = uv.getParamString(\"appId\");\n        String userviewId = uv.getPropertyString(\"id\");\n        String manifestUrl = request.getContextPath() + \"/web/userview/\" + appId + \"/\" + userviewId + \"/manifest\";\n        meta += \"<link rel=\\\"manifest\\\" href=\\\"\" + manifestUrl + \"\\\"  crossorigin=\\\"use-credentials\\\">\";\n        return meta;\n    }\n    \n    protected String getPrimaryColor() {\n        Color p = Color.valueOf(getDefaultColor(\"primary\"));\n        String primary = p.color;\n        if (\"custom\".equals(getPropertyString(\"primaryColor\"))) {\n            primary = getPropertyString(\"customPrimary\");\n        } else if (!getPropertyString(\"primaryColor\").isEmpty()) {\n            p = Color.valueOf(getPropertyString(\"primaryColor\"));\n            if (p != null) {\n                primary = p.color;\n            }\n        }\n        return primary;\n    }\n        \n    @Override\n    public String getManifest(String appId, String userviewId) {\n        String userviewName = getUserview().getPropertyString(\"name\");\n        HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n        String icon = request.getContextPath() + \"/images/logo_512x512.png\";\n        UserviewSetting userviewSetting = getUserview().getSetting();\n        if (!userviewSetting.getPropertyString(\"userview_thumbnail\").isEmpty()) {\n            icon = userviewSetting.getPropertyString(\"userview_thumbnail\");\n        }\n        String startUrl = request.getContextPath() + \"/web/userview/\" + appId + \"/\" + userviewId + \"/_/index\";\n        String primaryColor = getPrimaryColor();\n        String backgroundColor = \"#FFFFFF\";\n        String scope = request.getContextPath() + \"/web/userview/\" + appId + \"/\" + userviewId + \"/\";\n        userviewName = StringUtil.stripAllHtmlTag(userviewName);\n        userviewName = userviewName.replaceAll(StringUtil.escapeRegex(\"&#xa0;\"), \" \");\n        userviewName = userviewName.trim();\n        String shortName = (userviewName.length() > 12) ? userviewName.substring(0, 10) + \"..\" : userviewName;\n        String manifest = \"{\\n\" +\n            \"  \\\"short_name\\\": \\\"\" + StringUtil.escapeString(shortName, StringUtil.TYPE_JSON, null) + \"\\\",\\n\" +\n            \"  \\\"name\\\": \\\"\" + StringUtil.escapeString(userviewName, StringUtil.TYPE_JSON, null) + \"\\\",\\n\" +\n            \"  \\\"icons\\\": [\\n\" +\n            \"    {\\n\" +\n            \"      \\\"src\\\": \\\"\" + icon + \"\\\",\\n\" +\n            \"      \\\"type\\\": \\\"image/png\\\",\\n\" +\n            \"      \\\"sizes\\\": \\\"512x512\\\",\\n\" +\n            \"      \\\"purpose\\\": \\\"any maskable\\\"\\n\" +    \n            \"    }\\n\" +\n            \"  ],\\n\" +\n            \"  \\\"start_url\\\": \\\"\" + startUrl + \"\\\",\\n\" +\n            \"  \\\"background_color\\\": \\\"\" + backgroundColor + \"\\\",\\n\" +\n            \"  \\\"display\\\": \\\"standalone\\\",\\n\" +\n            \"  \\\"scope\\\": \\\"\" + scope + \"\\\",\\n\" +\n            \"  \\\"theme_color\\\": \\\"\" + primaryColor + \"\\\"\\n\" +\n            \"}\";\n        return manifest;\n    }\n    \n    @Override\n    public Set<String> getOfflineStaticResources() {\n        Set<String> urls = new HashSet<String>();\n        String contextPath = AppUtil.getRequestContextPath();\n        String pathName = getPathName();\n        String bn = ResourceBundleUtil.getMessage(\"build.number\");\n        urls.add(contextPath + \"/wro/common.css\");\n        urls.add(contextPath + \"/wro/\" + pathName + \".preload.min.css\");\n        urls.add(contextPath + \"/wro/\" + pathName + \".min.css\");\n        urls.add(contextPath + \"/wro/common.preload.js?build=\" + bn);\n        urls.add(contextPath + \"/wro/common.js?build=\" + bn);\n        urls.add(contextPath + \"/wro/form_common.js?build=\" + bn);\n        urls.add(contextPath + \"/wro/\" + pathName + \".preload.min.js\");\n        urls.add(contextPath + \"/wro/\" + pathName + \".min.js\");\n        urls.add(contextPath + \"/\" + pathName +\"/lib/responsive-switch.min.js\");\n        \n        return urls;\n    }\n    \n    public Set<String> getCacheUrls(String appId, String userviewId, String userviewKey) {\n        HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n        String contextPath = request.getContextPath();\n        \n        Set<String> urls = new HashSet<String>();\n        urls.add(contextPath + \"/web/userview/\" + appId + \"/\" + userviewId + \"/\"+userviewKey+\"/index\");\n        \n        if (!getPropertyString(\"urlsToCache\").isEmpty()) {\n            String urlsToCache = getPropertyString(\"urlsToCache\");\n            if (urlsToCache != null) {\n                StringTokenizer st = new StringTokenizer(urlsToCache, \"\\n\");\n                while (st.hasMoreTokens()) {\n                    String url = st.nextToken().trim();\n                    if (url.startsWith(\"/\") && !url.startsWith(contextPath)) {\n                        url = contextPath + url;\n                    }\n                    urls.add(url);\n                }\n            }\n        }\n        \n        return urls;\n    }\n    \n    @Override\n    public String getServiceWorker(String appId, String userviewId, String userviewKey) {\n        Set<String> urls = getCacheUrls(appId, userviewId, userviewKey);\n        urls.addAll(UserviewUtil.getAppStaticResources(AppUtil.getCurrentAppDefinition()));\n        String urlsToCache = \"\";\n        for (String url : urls) {\n            if (!urlsToCache.isEmpty()) {\n                urlsToCache += \", \";\n            }\n            urlsToCache += \"'\" + url + \"'\";\n        }\n        \n        HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n        \n        String appUserviewId = appId + \"-\" + userviewId;\n        Object[] arguments = new Object[]{\n            request.getContextPath(),\n            appUserviewId,\n            urlsToCache\n        };\n        \n        String js = AppUtil.readPluginResource(getClass().getName(), \"/resources/themes/universal/sw.js\", arguments, false, \"\");\n        return js;\n    }    \n    \n    @Override\n    public String getCss(Map<String, Object> data) {\n        String css = getPropertyString(\"css\");\n        if (\"true\".equals(getPropertyString(\"removeAssignmentTitle\"))) {\n            css += \"\\nbody .viewForm-body-header, body .runProcess-body-header {display:none;}\";\n        }\n        return css;\n    }\n    \n    @Override\n    public String getJs(Map<String, Object> data) {\n        return getPropertyString(\"js\");\n    }\n    \n    @Override\n    public String getJsCssLib(Map<String, Object> data) {\n        String path = data.get(\"context_path\") + \"/\" + getPathName();\n\n        String jsCssLink = \"\";\n        jsCssLink += \"<link href=\\\"\" + data.get(\"context_path\") + \"/wro/\" + getPathName() + \".preload.min.css\" + \"\\\" rel=\\\"stylesheet\\\" />\\n\";\n        jsCssLink += \"<link rel=\\\"preload\\\" href=\\\"\" + data.get(\"context_path\") + \"/js/fontawesome5/fonts/fontawesome-webfont.woff2?v=4.6.1\\\" as=\\\"font\\\" crossorigin />\\n\";\n        jsCssLink += \"<link rel=\\\"preload\\\" href=\\\"\" + data.get(\"context_path\") + \"/js/fontawesome5/webfonts/fa-brands-400.woff2\\\" as=\\\"font\\\" crossorigin />\\n\";\n        jsCssLink += \"<link rel=\\\"preload\\\" href=\\\"\" + data.get(\"context_path\") + \"/js/fontawesome5/webfonts/fa-solid-900.woff2\\\" as=\\\"font\\\" crossorigin />\\n\";\n        jsCssLink += \"<link rel=\\\"preload\\\" href=\\\"\" + data.get(\"context_path\") + \"/universal/lib/material-design-iconic-font/fonts/Material-Design-Iconic-Font.woff2?v=2.2.0\\\" as=\\\"font\\\" crossorigin />\\n\";\n        jsCssLink += \"<script>loadCSS(\\\"\" + data.get(\"context_path\") + \"/wro/\" + getPathName() + \".min.css\" + \"\\\")</script>\\n\";\n        \n        jsCssLink += \"<style>\" + generateLessCss() + \"</style>\";\n\n        jsCssLink += \"<script src=\\\"\" + data.get(\"context_path\") + \"/wro/\" + getPathName() + \".min.js\\\" async></script>\\n\";\n        \n        if (enableResponsiveSwitch()) {\n            jsCssLink += \"<script src=\\\"\" + data.get(\"context_path\") + \"/\" + getPathName() +\"/lib/responsive-switch.min.js\\\" defer></script>\\n\";\n        } \n        jsCssLink += \"<script>var _enableResponsiveTable = true;</script>\\n\";\n        jsCssLink += getInternalJsCssLib(data);\n            \n        return jsCssLink;\n    }\n    \n    protected String getInternalJsCssLib(Map<String, Object> data) {\n        String jsCssLink = \"\";\n               \n        // PWA: register service worker\n        if (!\"true\".equals(getPropertyString(\"disablePwa\"))) {\n            WorkflowUserManager workflowUserManager = (WorkflowUserManager)AppUtil.getApplicationContext().getBean(\"workflowUserManager\");\n            boolean pushEnabled = !\"true\".equals(getPropertyString(\"disablePush\")) && !workflowUserManager.isCurrentUserAnonymous();\n            String appId = userview.getParamString(\"appId\");\n            if (appId != null && !appId.isEmpty()) {\n                String userviewId = userview.getPropertyString(\"id\");\n                String key = userview.getParamString(\"key\");\n                if (key.isEmpty()) {\n                    key = Userview.USERVIEW_KEY_EMPTY_VALUE;\n                }\n                \n                boolean isEmbedded = false;\n                if(data.get(\"embed\") != null){\n                    isEmbedded = (Boolean) data.get(\"embed\");\n                };\n                \n                String pwaOnlineNotificationMessage = ResourceBundleUtil.getMessage(\"pwa.onlineNow\");\n                String pwaOfflineNotificationMessage = ResourceBundleUtil.getMessage(\"pwa.offlineNow\");\n                String pwaLoginPromptMessage = ResourceBundleUtil.getMessage(\"pwa.loginPrompt\");\n                String pwaSyncingMessage = ResourceBundleUtil.getMessage(\"pwa.syncing\");\n                String pwaSyncFailedMessage = ResourceBundleUtil.getMessage(\"pwa.syncFailed\");\n                String pwaSyncSuccessMessage = ResourceBundleUtil.getMessage(\"pwa.syncSuccess\");\n                String buildNumber = ResourceBundleUtil.getMessage(\"build.number\");\n                \n                String serviceWorkerUrl = data.get(\"context_path\") + \"/web/userview/\" + appId + \"/\" + userviewId + \"/\"+key+\"/serviceworker\";\n                jsCssLink += \"<script>$(function() {\"\n                        + \"var initPwaUtil = function(){\"\n                        + \"PwaUtil.contextPath = '\" + StringUtil.escapeString(data.get(\"context_path\").toString(), StringUtil.TYPE_JAVASCIPT, null) + \"';\"\n                        + \"PwaUtil.userviewKey = '\" + StringUtil.escapeString(key, StringUtil.TYPE_JAVASCIPT, null) + \"';\"\n                        + \"PwaUtil.homePageLink = '\" + StringUtil.escapeString(data.get(\"home_page_link\").toString(), StringUtil.TYPE_JAVASCIPT, null) + \"';\"\n                        + \"PwaUtil.serviceWorkerPath = '\" + StringUtil.escapeString(serviceWorkerUrl, StringUtil.TYPE_JAVASCIPT, null) + \"';\"\n                        + \"PwaUtil.subscriptionApiPath = '\" + StringUtil.escapeString(data.get(\"context_path\").toString(), StringUtil.TYPE_JAVASCIPT, null) + \"/web/console/profile/subscription';\"\n                        + \"PwaUtil.pushEnabled = \" + pushEnabled + \";\"\n                        + \"PwaUtil.currentUsername = '\" + StringUtil.escapeString(workflowUserManager.getCurrentUsername(), StringUtil.TYPE_JAVASCIPT, null) + \"';\"\n                        + \"PwaUtil.onlineNotificationMessage = '\" + StringUtil.escapeString(pwaOnlineNotificationMessage, StringUtil.TYPE_JAVASCIPT, null) + \"';\"\n                        + \"PwaUtil.offlineNotificationMessage = '\" + StringUtil.escapeString(pwaOfflineNotificationMessage, StringUtil.TYPE_JAVASCIPT, null) + \"';\"\n                        + \"PwaUtil.loginPromptMessage = '\" + StringUtil.escapeString(pwaLoginPromptMessage, StringUtil.TYPE_JAVASCIPT, null) + \"';\"\n                        + \"PwaUtil.syncingMessage = '\" + StringUtil.escapeString(pwaSyncingMessage, StringUtil.TYPE_JAVASCIPT, null) + \"';\"\n                        + \"PwaUtil.syncFailedMessage = '\" + StringUtil.escapeString(pwaSyncFailedMessage, StringUtil.TYPE_JAVA, null) + \"';\"\n                        + \"PwaUtil.syncSuccessMessage = '\" + StringUtil.escapeString(pwaSyncSuccessMessage, StringUtil.TYPE_JAVASCIPT, null) + \"';\"\n                        + \"PwaUtil.isEmbedded = \" + isEmbedded + \";\"\n                        + \"PwaUtil.register();\"\n                        + \"PwaUtil.init();\"\n                        + \"};\"\n                        + \"if (typeof PwaUtil !== \\\"undefined\\\") {initPwaUtil();} else { $(document).on(\\\"PwaUtil.ready\\\", function(){ initPwaUtil(); });}\"\n                        + \"});</script>\";\n            }\n        }\n        return jsCssLink;\n    }\n    \n    protected String getDefaultColor(String defaultColor) {\n        if (defaultColor.equals(\"primary\")) {\n            defaultColor = \"DARKROYALBLUE\";\n        }\n        else if (defaultColor.equals(\"accent\")) {\n            defaultColor = \"#0D6EFD\";\n        }\n        else if (defaultColor.equals(\"button\")) {\n            defaultColor = \"#6c757D\";\n        }\n        else if (defaultColor.equals(\"buttonText\")) {\n            defaultColor = \"#FFFFFF\";\n        }\n        else if (defaultColor.equals(\"menuFont\")) {\n            defaultColor = \"#000000\";\n        }\n        else if (defaultColor.equals(\"font\")) {\n            defaultColor = \"#FFFFFF\";\n        }\n        return defaultColor;\n    }\n    \n    protected String generateLessCss() {\n        String css = \"\";\n        String lessVariables = \"\";\n        String primary = \"\";\n        String dark = \"darken(@primary , 10%)\";\n        String light = \"lighten(@primary , 5%)\";\n        String accent = getDefaultColor(\"accent\");\n        String lightAccent = \"lighten(@accent , 10%)\";\n        String button = getDefaultColor(\"button\");\n        String buttonText = getDefaultColor(\"buttonText\");\n        String font = getDefaultColor(\"font\");\n        \n        if (\"custom\".equals(getPropertyString(\"primaryColor\"))) {\n            primary = getPropertyString(\"customPrimary\");\n            if (!getPropertyString(\"customPrimaryDark\").isEmpty()) {\n                dark = getPropertyString(\"customPrimaryDark\");\n            }\n            if (!getPropertyString(\"customPrimaryLight\").isEmpty()) {\n                light = getPropertyString(\"customPrimaryLight\");\n            }\n        } else {\n            Color p = Color.valueOf(getDefaultColor(\"primary\"));\n            if (!getPropertyString(\"primaryColor\").isEmpty()){\n                p = Color.valueOf(getPropertyString(\"primaryColor\")); \n            }\n            if (p != null) {\n                primary = p.color;\n                dark = (p.dark.isEmpty())?dark:p.dark;\n                if (\"light\".equals(getPropertyString(\"themeScheme\"))) {\n                    light = \"screen(@primary, #eeeeee)\";\n                } else {\n                    light = (p.light.isEmpty())?light:p.light;\n                }\n            }\n        }\n        \n        if (\"custom\".equals(getPropertyString(\"accentColor\"))) {\n            accent = getPropertyString(\"customAccent\");\n            if (!getPropertyString(\"customAccentLight\").isEmpty()) {\n                lightAccent = getPropertyString(\"customAccentLight\");\n            }\n        }  else if (!getPropertyString(\"accentColor\").isEmpty()) {\n            Color a = Color.valueOf(getPropertyString(\"accentColor\"));\n            if (a != null) {\n                accent = a.color;\n                lightAccent = (a.light.isEmpty())?lightAccent:a.light;\n            }\n        }\n        \n        if (\"custom\".equals(getPropertyString(\"buttonColor\"))) {\n            button = getPropertyString(\"customButton\");\n        } else if (!getPropertyString(\"buttonColor\").isEmpty()) {\n            Color a = Color.valueOf(getPropertyString(\"buttonColor\"));\n            if (a != null) {\n                button = a.color;\n            }\n        }\n        \n        if (\"custom\".equals(getPropertyString(\"buttonTextColor\"))) {\n            buttonText = getPropertyString(\"customButtonText\");\n        } else if (!getPropertyString(\"buttonTextColor\").isEmpty()) {\n            Color a = Color.valueOf(getPropertyString(\"buttonTextColor\"));\n            if (a != null) {\n                buttonText = a.color;\n            }\n        }\n        \n        if (\"custom\".equals(getPropertyString(\"fontColor\"))) {\n            font = getPropertyString(\"customFontColor\");\n        } else if (!getPropertyString(\"fontColor\").isEmpty()) {\n            Color a = Color.valueOf(getPropertyString(\"fontColor\"));\n            if (a != null) {\n                font = a.color;\n            }\n        }\n        \n        if (\"light\".equals(getPropertyString(\"themeScheme\"))) {\n            String menuFont = getDefaultColor(\"menuFont\");\n            if (\"custom\".equals(getPropertyString(\"menuFontColor\"))) {\n                menuFont = getPropertyString(\"customMenuFontColor\");\n            } else if (!getPropertyString(\"menuFontColor\").isEmpty()) {\n                Color a = Color.valueOf(getPropertyString(\"menuFontColor\"));\n                if (a != null) {\n                    menuFont = a.color;\n                }\n            }\n            \n            lessVariables += \"@primary: \" + primary + \"; @darkPrimary: \" + dark + \"; @lightPrimary: \" + light + \"; @accent: \" + accent + \"; @lightAccent: \" + lightAccent + \"; @menuFont: \" + menuFont + \"; @button: \" + button + \"; @buttonText: \" + buttonText + \"; @defaultFontColor : \" + font + \";\";\n        } else {\n            lessVariables += \"@primary: \" + primary + \"; @darkPrimary: \" + dark + \"; @lightPrimary: \" + light + \"; @accent: \" + accent + \"; @lightAccent: \" + lightAccent + \"; @button: \" + button + \"; @buttonText: \" + buttonText + \"; @defaultFontColor : \" + font + \";\";\n        }\n        \n        // process LESS\n        String less = AppUtil.readPluginResource(getClass().getName(), \"resources/themes/\" + getPathName() + \"/\" + getPropertyString(\"themeScheme\") + \".less\");\n        less = lessVariables + \"\\n\" + less;\n        // read CSS from cache\n        Cache cache = (Cache) AppUtil.getApplicationContext().getBean(\"cssCache\");\n        if (cache != null) {\n            Element element = cache.get(less);\n            if (element != null) {\n                css = (String) element.getObjectValue();\n            }\n        }\n        if (css == null || css.isEmpty()) {\n            // not available in cache, compile LESS\n            css = compileLess(less);\n            // store CSS in cache\n            if (cache != null) {\n                Element element = new Element(less, css);\n                cache.put(element);\n            }\n        }\n        return css;\n    }\n\n    protected String compileLess(String less) {\n        String css = \"\";\n        try {\n            css = lessEngine.compile(less);\n        } catch(Exception e) {\n            LogUtil.error(this.getClass().getName(), e, \"Error compiling LESS\");\n            LogUtil.debug(this.getClass().getName(), \"LESS: \" + less);\n        }\n        return css;\n    }\n    \n    @Override\n    public String getHeader(Map<String, Object> data) {\n        if (\"true\".equals(getPropertyString(\"horizontal_menu\"))) {\n            data.put(\"header_after\", UserviewUtil.getTemplate(this, data, \"/templates/\" + getPathName() + \"Theme_horizontalMenu.ftl\"));\n        } else if (\"horizontal_inline\".equals(getPropertyString(\"horizontal_menu\"))) {\n            data.put(\"header_name_inner_after\", UserviewUtil.getTemplate(this, data, \"/templates/\" + getPathName() + \"Theme_horizontalMenu.ftl\"));\n        }\n        \n        data.put(\"header_classes\", \"navbar\");\n        data.put(\"header_inner_before\", \"<div class=\\\"navbar-inner\\\"><div class=\\\"container-fluid\\\"><div class=\\\"hi-trigger ma-trigger\\\" id=\\\"sidebar-trigger\\\"><div class=\\\"line-wrap\\\"><div class=\\\"line top\\\"></div><div class=\\\"line center\\\"></div><div class=\\\"line bottom\\\"></div></div></div>\");\n        data.put(\"header_inner_after\", \"</div></div>\" + getPropertyString(\"subheader\"));\n        data.put(\"header_link_classes\", \"brand\");\n        data.put(\"header_info_classes\", \"inline-block\");\n        data.put(\"header_name_classes\", \"inline-block\");\n        \n        if (!getPropertyString(\"logo\").isEmpty()) {\n            data.put(\"header_name_inner_before\", \"<img class=\\\"logo\\\" alt=\\\"logo\\\" src=\\\"\"+getPropertyString(\"logo\")+\"\\\" />\");\n        }\n        \n        data.put(\"header_description_classes\", \"inline-block visible-desktop\");\n        data.put(\"header_description_span_classes\", \"brand\");\n        data.put(\"header_message_after\", getNavbar(data));\n        return UserviewUtil.getTemplate(this, data, \"/templates/userview/header.ftl\");\n    }\n    \n    protected boolean showHomeBanner() {\n        String menuId = (String)getRequestParameter(\"menuId\");\n        String homeMenuId = getUserview().getPropertyString(\"homeMenuId\");\n        String pwaStartUrl = \"index\";\n        boolean showHomeBanner = (menuId == null || homeMenuId.equals(menuId) || pwaStartUrl.equals(menuId)) && !getPropertyString(\"homeAttractBanner\").isEmpty();\n        return showHomeBanner;\n    }\n    \n    @Override\n    public String getContentContainer(Map<String, Object> data) {\n        if (!getPropertyString(\"horizontal_menu\").isEmpty()) {\n            data.put(\"hide_nav\", true);\n        }\n        \n        if (showHomeBanner()) {\n            data.put(\"main_container_before\", \"<div class=\\\"home_banner\\\"><div class=\\\"home_banner_inner\\\">\"+getPropertyString(\"homeAttractBanner\")+\"</div></div>\");\n        }\n        \n        data.put(\"main_container_classes\", \"container-fluid-full\");\n        data.put(\"main_container_inner_classes\", \"row-fluid\");\n        data.put(\"sidebar_classes\", \"span2\");\n        if (((Boolean) data.get(\"embed\")) || ((Boolean) data.get(\"hide_nav\"))) {\n            data.put(\"content_classes\", \"span12\");\n        } else {\n            data.put(\"content_classes\", \"span10\");\n        }\n        \n        String ContentInnerBefore = getBreadcrumb(data);\n        if (getPropertyString(\"fontControl\").equalsIgnoreCase(\"true\")) {\n            ContentInnerBefore += getFontSizeController(data);\n        }\n        data.put(\"content_inner_before\", ContentInnerBefore);\n        return super.getContentContainer(data);\n    }\n    \n    @Override\n    public String getLayout(Map<String, Object> data) {\n        if (\"true\".equals(getPropertyString(\"horizontal_menu\"))) {\n            data.put(\"body_classes\", data.get(\"body_classes\").toString() + \" horizontal_menu\");\n        } else if (\"horizontal_inline\".equals(getPropertyString(\"horizontal_menu\"))){\n            data.put(\"body_classes\", data.get(\"body_classes\").toString() + \" horizontal_menu inline_menu\");\n        } else if (\"no\".equals(getPropertyString(\"horizontal_menu\"))) {\n            data.put(\"body_classes\", data.get(\"body_classes\").toString() + \" horizontal_menu no_menu\");\n        }\n        \n        if (showHomeBanner()) {\n            data.put(\"body_classes\", data.get(\"body_classes\").toString() + \" has_home_banner\");\n        }\n        \n        data.put(\"body_inner_before\", \"<div class=\\\"page-loader\\\"><div class=\\\"preloader pl-xl\\\" style=\\\"width:80px\\\"><svg class=\\\"pl-circular\\\" viewBox=\\\"25 25 50 50\\\"><circle class=\\\"plc-path\\\" cx=\\\"50\\\" cy=\\\"50\\\" r=\\\"20\\\" /></svg></div></div>\");\n        return UserviewUtil.getTemplate(this, data, \"/templates/userview/layout.ftl\");\n    }\n    \n    public String getLoginForm(Map<String, Object> data) {\n        data.put(\"hide_nav\", true);\n        return super.getLoginForm(data);\n    }\n    \n    @Override\n    public String handlePageNotFound(Map<String, Object> data) {\n        if (PROFILE.equals(userview.getParamString(\"menuId\"))) {\n            return pageProfile(data);\n        } else if (INBOX.equals(userview.getParamString(\"menuId\"))) {\n            return pageInbox(data);\n        } else {\n            return super.handlePageNotFound(data);\n        }\n    }\n    \n    protected String getUserMenu(Map<String, Object> data) {\n        if (!getPropertyString(\"horizontal_menu\").isEmpty()) {\n            String html = \"\";\n            if ((Boolean) data.get(\"is_logged_in\")) {\n                User user = (User) data.get(\"user\");\n                String email = user.getEmail();\n                if (email == null) {\n                    email = \"\";\n                }\n                if (email.contains(\";\")) {\n                    email = email.split(\";\")[0];\n                }\n                if (email.contains(\",\")) {\n                    email = email.split(\",\")[0];\n                }\n\n                String profileImageTag = \"\";\n                if (getPropertyString(\"userImage\").isEmpty()) {\n                    String url = (email != null && !email.isEmpty()) ? \n                        new Gravatar()\n                            .setSize(20)\n                            .setHttps(true)\n                            .setRating(Rating.PARENTAL_GUIDANCE_SUGGESTED)\n                            .setStandardDefaultImage(DefaultImage.IDENTICON)\n                            .getUrl(email)\n                        : \"//www.gravatar.com/avatar/default?d=identicon\";\n                    profileImageTag = \"<img class=\\\"gravatar\\\" alt=\\\"gravatar\\\" width=\\\"30\\\" height=\\\"30\\\" data-lazysrc=\\\"\"+url+\"\\\" onError=\\\"this.onerror = '';this.style.display='none';\\\"/> \";\n                } else if (\"hashVariable\".equals(getPropertyString(\"userImage\"))) {\n                    String url = AppUtil.processHashVariable(getPropertyString(\"userImageUrlHash\"), null, StringUtil.TYPE_HTML, null, AppUtil.getCurrentAppDefinition());\n                    if (AppUtil.containsHashVariable(url) || url == null || url.isEmpty()) {\n                        url = data.get(\"context_path\") + \"/\" + getPathName() + \"/user.png\";\n                    }\n                    profileImageTag = \"<img alt=\\\"profile\\\" width=\\\"30\\\" height=\\\"30\\\" src=\\\"\"+url+\"\\\" /> \";\n                }\n                \n                html += \"<li class=\\\"user-link dropdown\\\">\\n\"\n                      + \"    <a data-toggle=\\\"dropdown\\\" class=\\\"btn dropdown-toggle\\\">\\n\"\n                      + \"\t     \" + profileImageTag + StringUtil.stripHtmlTag(DirectoryUtil.getUserFullName(user), new String[]{}) + \"\\n\"\n                      + \"\t     <span class=\\\"caret\\\"></span>\\n\"\n                      + \"    </a>\\n\";\n\n                html += \"<ul class=\\\"dropdown-menu\\\">\\n\";\n                if (!\"true\".equals(getPropertyString(\"profile\")) && !user.getReadonly()) {\n                    html += \"    <li><a href=\\\"\" + data.get(\"base_link\") + PROFILE +\"\\\"><i class=\\\"fa fa-user\\\"></i> \" + ResourceBundleUtil.getMessage(\"theme.universal.profile\") + \"</a></li>\\n\";\n                }\n                \n                Object[] shortcut = (Object[]) getProperty(\"userMenu\");\n                if (shortcut != null && shortcut.length > 0) {\n                    for (Object o : shortcut) {\n                        Map link = (HashMap) o;\n                        String href = link.get(\"href\").toString();\n                        String label = link.get(\"label\").toString();\n                        String target = (link.get(\"target\") == null)?\"\":link.get(\"target\").toString();\n\n                        if (\"divider\".equalsIgnoreCase(label)) {\n                            html += \"<li class=\\\"divider\\\"></li>\\n\";\n                        } else if (href.isEmpty()) {\n                             html += \"<li class=\\\"dropdown-menu-title\\\"><span>\" + label + \"</span></li>\\n\";\n                        } else {\n                            if (!href.contains(\"/\")) {\n                                href = data.get(\"base_link\") + href;\n                            }\n                            html += \"<li><a href=\\\"\" + href + \"\\\" target=\\\"\"+target+\"\\\">\" + label + \"</a></li>\\n\";\n                        }\n                    }\n                }\n                \n                html += \"    <li><a href=\\\"\" + data.get(\"logout_link\") + \"\\\"><i class=\\\"fa fa-power-off\\\"></i> \" + ResourceBundleUtil.getMessage(\"theme.universal.logout\") + \"</a></li>\\n\"\n                      + \"</ul>\";\n\n            } else {\n                html += \"<li class=\\\"user-link\\\">\\n\"\n                      + \"    <a href=\\\"\" + data.get(\"login_link\") + \"\\\" class=\\\"btn\\\">\\n\"\n                      + \"\t     <i class=\\\"fa fa-user white\\\"></i> \" + ResourceBundleUtil.getMessage(\"ubuilder.login\") + \"\\n\"\n                      + \"    </a>\\n\";\n            }\n            html += \"</li>\";\n            return html;\n        } else {\n            return \"\";\n        }\n    }\n    \n    protected String getSidebarUserMenu(Map<String, Object> data) {\n        String html = \"<ul class=\\\"user-menu nav nav-tabs nav-stacked main-menu\\\">\";\n        if ((Boolean) data.get(\"is_logged_in\")) {\n            User user = (User) data.get(\"user\");\n            String email = user.getEmail();\n            if (email == null) {\n                email = \"\";\n            }\n            if (email.contains(\";\")) {\n                email = email.split(\";\")[0];\n            }\n            if (email.contains(\",\")) {\n                email = email.split(\",\")[0];\n            }\n            \n            String profileImageTag = \"\";\n            if (getPropertyString(\"userImage\").isEmpty()) {\n                String url = (email != null && !email.isEmpty()) ? \n                    new Gravatar()\n                        .setSize(20)\n                        .setHttps(true)\n                        .setRating(Rating.PARENTAL_GUIDANCE_SUGGESTED)\n                        .setStandardDefaultImage(DefaultImage.IDENTICON)\n                        .getUrl(email)\n                    : \"//www.gravatar.com/avatar/default?d=identicon\";\n                profileImageTag = \"<img class=\\\"gravatar\\\" alt=\\\"gravatar\\\" width=\\\"30\\\" height=\\\"30\\\" data-lazysrc=\\\"\"+url+\"\\\" onError=\\\"this.onerror = '';this.style.display='none';\\\"/> \";\n            } else if (\"hashVariable\".equals(getPropertyString(\"userImage\"))) {\n                String url = AppUtil.processHashVariable(getPropertyString(\"userImageUrlHash\"), null, StringUtil.TYPE_HTML, null, AppUtil.getCurrentAppDefinition());\n                if (AppUtil.containsHashVariable(url) || url == null || url.isEmpty()) {\n                    url = data.get(\"context_path\") + \"/\" + getPathName() + \"/user.png\";\n                }\n                profileImageTag = \"<img alt=\\\"profile\\\" width=\\\"30\\\" height=\\\"30\\\" src=\\\"\"+url+\"\\\" /> \";\n            }\n            \n            html += \"<li class=\\\"mm-profile user-link\\\">\\n\"\n                  + \"    <a class=\\\"dropdown\\\">\\n\"\n                  + \"        \"+profileImageTag+\"\\n\"  \n                  + \"\t     <span>\" + StringUtil.stripHtmlTag(DirectoryUtil.getUserFullName(user), new String[]{}) + \"</span>\\n\"\n                  + \"\t     <small>\" + email + \"</small>\\n\"\n                  + \"    </a>\\n\";\n            \n            html += \"<ul>\\n\";\n            if (!\"true\".equals(getPropertyString(\"profile\")) && !user.getReadonly()) {\n                String activeCss = \"\";\n                if (PROFILE.equals(userview.getParamString(\"menuId\"))) {\n                    activeCss = \" class=\\\"active\\\"\";\n                }\n                html += \"    <li \"+activeCss+\"><a href=\\\"\" + data.get(\"base_link\") + PROFILE +\"\\\"><span><i class=\\\"fa fa-user\\\"></i> \" + ResourceBundleUtil.getMessage(\"theme.universal.profile\") + \"</span></a></li>\\n\";\n            }\n            \n            Object[] shortcut = (Object[]) getProperty(\"userMenu\");\n            if (shortcut != null && shortcut.length > 0) {\n                for (Object o : shortcut) {\n                    Map link = (HashMap) o;\n                    String href = link.get(\"href\").toString();\n                    String label = link.get(\"label\").toString();\n                    String target = (link.get(\"target\") == null)?\"\":link.get(\"target\").toString();\n\n                    if (\"divider\".equalsIgnoreCase(label)) {\n                        html += \"<li class=\\\"divider\\\"></li>\\n\";\n                    } else if (href.isEmpty()) {\n                         html += \"<li class=\\\"dropdown-menu-title\\\"><span>\" + label + \"</span></li>\\n\";\n                    } else {\n                        if (!href.contains(\"/\")) {\n                            href = data.get(\"base_link\") + href;\n                        }\n                        html += \"<li><a href=\\\"\" + href + \"\\\" target=\\\"\"+target+\"\\\">\" + label + \"</a></li>\\n\";\n                    }\n                }\n            }\n            \n            html += \"    <li><a href=\\\"\" + data.get(\"logout_link\") + \"\\\"><span><i class=\\\"fa fa-power-off\\\"></i> \" + ResourceBundleUtil.getMessage(\"theme.universal.logout\") + \"</span></a></li>\\n\";\n            html += \"</ul>\";\n\n        } else {\n            String profileImageTag = \"\";\n            if (getPropertyString(\"userImage\").isEmpty() || \"hashVariable\".equals(getPropertyString(\"userImage\"))) {\n                String url = data.get(\"context_path\") + \"/\" + getPathName() + \"/user.png\";\n                profileImageTag = \"<img alt=\\\"profile\\\" width=\\\"30\\\" height=\\\"30\\\" src=\\\"\"+url+\"\\\" /> \";\n            }\n            \n            html += \"<li class=\\\"mm-profile user-link\\\">\\n\"\n                  + \"    <a href=\\\"\" + data.get(\"login_link\") + \"\\\" >\\n\"\n                  + \"        \"+profileImageTag+\"\\n\" \n                  + \"\t     <span>Visitor</span>\\n\"  \n                  + \"\t     <small class=\\\"login_link\\\">\" + ResourceBundleUtil.getMessage(\"ubuilder.login\") + \"</small>\\n\"\n                  + \"    </a>\\n\";\n        }\n        html += \"</li></ul>\";\n        return html;\n    }\n    \n    @Override\n    public String getMenus(Map<String, Object> data) {\n        if (\"true\".equals(getPropertyString(\"displayCategoryLabel\"))) {\n            data.put(\"combine_single_menu_category\", false);\n        } else {\n            data.put(\"combine_single_menu_category\", true);\n        }\n        data.put(\"categories_container_before\", getSidebarUserMenu(data));\n        \n        return super.getMenus(data);\n    }\n    \n    @Override\n    public String getFooter(Map<String, Object> data) {\n        if (enableResponsiveSwitch()) {\n            data.put(\"footer_inner_after\", \"<div id=\\\"responsiveSwitch\\\"><p><a href=\\\"#\\\" class=\\\"rs-link\\\" data-link-desktop=\\\"\"+ ResourceBundleUtil.getMessage(\"theme.universal.switchDesktop\") +\"\\\" data-link-responsive=\\\"\"+ ResourceBundleUtil.getMessage(\"theme.universal.switchMobile\") +\"\\\"></a></p></div>\" + getPropertyString(\"subfooter\"));\n        } else {\n            data.put(\"footer_inner_after\", getPropertyString(\"subfooter\"));\n        }\n        return super.getFooter(data);\n    }\n    \n    protected String getHomeLink(Map<String, Object> data) {\n        String home_page_link = data.get(\"context_path\").toString() + \"/home\";\n        if (!getPropertyString(\"homeUrl\").isEmpty()) {\n            home_page_link = getPropertyString(\"homeUrl\");\n        }\n        return \"<li class=\\\"\\\"><a class=\\\"btn\\\" href=\\\"\" + home_page_link + \"\\\" title=\\\"\" + ResourceBundleUtil.getMessage(\"theme.universal.home\") + \"\\\"><i class=\\\"fa fa-home\\\"></i></a></li>\\n\";\n    }\n    \n    protected String getNavbar(Map<String, Object> data) {\n        String html = \"<div class=\\\"nav-no-collapse header-nav\\\"><ul class=\\\"nav pull-right\\\">\\n\";\n        html += getHomeLink(data);\n        if ((Boolean) data.get(\"is_logged_in\")) {\n            html += getInbox(data);\n        }\n        html += getShortcut(data);\n        html += getUserMenu(data);\n        html += \"</ul></div>\\n\";\n        return html;\n    }\n    \n    protected String getInbox(Map<String, Object> data) {\n        String html = \"\";\n        \n        if (!getPropertyString(\"inbox\").isEmpty()) {\n            String url = data.get(\"context_path\") + \"/web/json/plugin/\" + getClassName() + \"/service?_a=getAssignment\";\n            if (\"current\".equals(getPropertyString(\"inbox\"))) {\n                try {\n                    url += \"&appId=\" + URLEncoder.encode(userview.getParamString(\"appId\"), \"UTF-8\");\n                } catch (UnsupportedEncodingException e){}\n            }\n            html += \"<li class=\\\"inbox-notification dropdown\\\" data-url=\\\"\" + url + \"\\\">\\n\"\n                  + \"    <a data-toggle=\\\"dropdown\\\" class=\\\"btn dropdown-toggle\\\">\\n\"\n                  + \"\t <i class=\\\"fa fa-tasks white\\\"></i><span class=\\\"badge red\\\">0</span>\\n\"\n                  + \"    </a>\\n\"\n                  + \"    <ul class=\\\"dropdown-menu notifications\\\">\\n\"\n                  + \"        <li class=\\\"dropdown-menu-title\\\"><span>\" + ResourceBundleUtil.getMessage(\"theme.universal.inboxTaskMessage\") + \"</span><a href=\\\"#\\\" class=\\\"refresh\\\"><i class=\\\"fa fa-refresh\\\"></i></a></li>\"\n                  + \"        <li class=\\\"loading\\\"><a><span><i class=\\\"fa fa-spinner fa-spin fa-3x\\\"></i></span></a></li>\\n\"\n                  + \"        <li><a href=\\\"\" + data.get(\"base_link\") + INBOX + \"\\\" class=\\\"dropdown-menu-sub-footer\\\">\" + ResourceBundleUtil.getMessage(\"theme.universal.viewAllTask\") + \"</a></li>\\n\"  \n                  + \"    </ul>\\n\"\n                  + \"<li>\";\n        }\n        \n        return html;\n    }\n    \n    protected String getShortcut(Map<String, Object> data) {\n        String shortcutHtml = \"\";\n        \n        Object[] shortcut = (Object[]) getProperty(\"shortcut\");\n        if (shortcut != null && shortcut.length > 0) {\n            for (Object o : shortcut) {\n                Map link = (HashMap) o;\n                String href = link.get(\"href\").toString();\n                String label = link.get(\"label\").toString();\n                String target = (link.get(\"target\") == null)?\"\":link.get(\"target\").toString();\n                boolean isPublic = \"true\".equalsIgnoreCase((String) link.get(\"isPublic\"));\n                \n                if ((Boolean) data.get(\"is_logged_in\") || (!((Boolean) data.get(\"is_logged_in\")) && isPublic)) {\n                    if (\"divider\".equalsIgnoreCase(label)) {\n                        shortcutHtml += \"<li class=\\\"divider\\\"></li>\\n\";\n                    } else if (href.isEmpty()) {\n                         shortcutHtml += \"<li class=\\\"dropdown-menu-title\\\"><span>\" + label + \"</span></li>\\n\";\n                    } else {\n                        if (!href.contains(\"/\")) {\n                            href = data.get(\"base_link\") + href;\n                        }\n                        shortcutHtml += \"<li><a href=\\\"\" + href + \"\\\" target=\\\"\"+target+\"\\\">\" + label + \"</a></li>\\n\";\n                    }\n                }\n            }\n        }\n        \n        String html = \"\";\n        if (!shortcutHtml.isEmpty()) {\n            html = \"<li class=\\\"shortcut-link dropdown\\\">\\n\"\n                  + \"    <a data-toggle=\\\"dropdown\\\" class=\\\"btn dropdown-toggle\\\">\\n\"\n                  + \"\t     <i class=\\\"fa fa-th-list white\\\"></i> \" + getPropertyString(\"shortcutLinkLabel\") + \"\\n\"\n                  + \"\t     <span class=\\\"caret\\\"></span>\\n\"\n                  + \"    </a>\\n\";\n            \n            html += \"<ul class=\\\"dropdown-menu\\\">\\n\";\n            html += shortcutHtml;\n            html += \"</ul></li>\";\n        }\n        \n        return html;\n    }\n    \n    protected String getBreadcrumb(Map<String, Object> data) {\n        String breadcrumb = \"<ul class=\\\"breadcrumb\\\"><li><i class=\\\"fa fa-home\\\"></i> <a href=\\\"\" + data.get(\"home_page_link\") + \"\\\">\" + ResourceBundleUtil.getMessage(\"theme.universal.home\") + \"</a> <i class=\\\"fa fa-angle-right\\\"></i></li>\";\n        if ((Boolean) data.get(\"is_login_page\") || (Boolean) data.get(\"embed\")) {\n            return \"\";\n        } else if (userview.getCurrent() != null) {\n            UserviewCategory category = userview.getCurrentCategory();\n            if (!(category.getMenus().size() <= 1 && ((Boolean) data.get(\"combine_single_menu_category\"))) && !\"yes\".equals(category.getPropertyString(\"hide\"))) {\n                breadcrumb += \"<li><a href=\\\"\" + getCategoryLink(category, data) + \"\\\">\" + StringUtil.stripAllHtmlTag(category.getPropertyString(\"label\")) + \"</a> <i class=\\\"fa fa-angle-right\\\"></i></li>\";\n            }\n            breadcrumb += \"<li><a>\" + StringUtil.stripAllHtmlTag(userview.getCurrent().getPropertyString(\"label\")) + \"</a></li>\";\n        } else if (PROFILE.equals(userview.getParamString(\"menuId\"))) {\n            breadcrumb += \"<li><a>\" + ResourceBundleUtil.getMessage(\"theme.universal.profile\") + \"</a></li>\";\n        } else if (INBOX.equals(userview.getParamString(\"menuId\"))) {\n            breadcrumb += \"<li><a>\" + ResourceBundleUtil.getMessage(\"theme.universal.inbox\") + \"</a></li>\";\n        } else if (UserviewPwaTheme.PWA_OFFLINE_MENU_ID.equals(userview.getParamString(\"menuId\")) || UserviewPwaTheme.PAGE_UNAVAILABLE_MENU_ID.equals(userview.getParamString(\"menuId\"))) {\n            breadcrumb += \"<li><a>\" + ResourceBundleUtil.getMessage(\"pwa.offline.breadcrumbTitle\") + \"</a></li>\";\n        } else {\n            breadcrumb += \"<li><a>\" + ResourceBundleUtil.getMessage(\"ubuilder.pageNotFound\") + \"</a></li>\";\n        }\n        breadcrumb += \"</ul>\";\n\n        return breadcrumb;\n    }\n\n    protected String getFontSizeController(Map<String, Object> data) {\n        String fontController = \"<div class=\\\"adjustfontSize\\\">\\n\"\n                + \"      <div style=\\\"float:right\\\">\\n\"\n                + \"            <span> \"+ ResourceBundleUtil.getMessage(\"theme.universal.fontSize\") +\":</span>\\n\"\n                + \"            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Basic example\\\">\\n\"\n                + \"                  <button id=\\\"smallFont\\\" type=\\\"button\\\" class=\\\"buttonFontSize\\\"><i class=\\\"fas fa-font\\\" style=\\\"font-size:13px\\\"></i></button>\\n\"\n                + \"                  <button id=\\\"mediumFont\\\" type=\\\"button\\\" class=\\\"buttonFontSize\\\"><i class=\\\"fas fa-font\\\" style=\\\"font-size:17px\\\"></i></button>\\n\"\n                + \"                  <button id=\\\"bigFont\\\" type=\\\"button\\\" class=\\\"buttonFontSize\\\"><i class=\\\"fas fa-font\\\" style=\\\"font-size:20px\\\"></i></button>\\n\"\n                + \"            </div>\\n\"\n                + \"      </div>\\n\"\n                + \"      <div style=\\\"clear:both\\\"></div>\\n\"\n                + \"</div>\";\n        if ((Boolean) data.get(\"is_login_page\") || (Boolean) data.get(\"embed\")) {\n            return \"\";\n        } else {\n            return fontController;\n        }\n    }\n    \n    protected String getCategoryLink(UserviewCategory category, Map<String, Object> data) {\n        UserviewMenu menu = category.getMenus().iterator().next();\n        if (menu.isHomePageSupported()) {\n            return menu.getUrl();\n        }\n        return \"\";\n    }\n    \n    protected boolean enableResponsiveSwitch() {\n        return MobileUtil.isMobileUserAgent() && \"true\".equals(getPropertyString(\"enableResponsiveSwitch\"));\n    }\n    \n    protected String pageProfile(Map<String, Object> data) {\n        String html = \"\";\n        try {\n            UserProfileMenu profile = new UserProfileMenu();\n            userview.setProperty(\"pageNotFoundMenu\", profile);\n            Map<String, Object> props = new HashMap<String, Object>();\n            props.put(\"id\", PROFILE);\n            props.put(\"customId\", PROFILE);\n            props.put(\"menuId\", PROFILE);\n            props.put(\"label\", ResourceBundleUtil.getMessage(\"theme.universal.profile\"));\n            profile.setRequestParameters(userview.getParams());\n            profile.setProperties(props);\n            profile.setUserview(userview);\n            profile.setUrl(data.get(\"base_link\") + PROFILE);\n            profile.setKey(userview.getParamString(\"key\"));\n            html += UserviewUtil.getUserviewMenuHtml(profile);\n        } catch (Exception e) {\n            html += handleContentError(e, data);\n        }\n        return html;\n    }\n    \n    protected String pageInbox(Map<String, Object> data) {\n        String html = \"\";\n        try {\n            UserviewMenu menu = null;\n            if (\"current\".equals(getPropertyString(\"inbox\"))) {\n                menu = new InboxMenu();\n            } else if (\"all\".equals(getPropertyString(\"inbox\"))) {\n                menu = new UniversalInboxMenu();\n            }\n            if (menu != null) {\n                userview.setProperty(\"pageNotFoundMenu\", menu);\n                Map<String, Object> props = new HashMap<String, Object>();\n                props.put(\"id\", INBOX);\n                props.put(\"customId\", INBOX);\n                props.put(\"menuId\", INBOX);\n                props.put(\"label\", \"\");\n                \n                if (\"current\".equals(getPropertyString(\"inbox\"))) {\n                    props.put(InboxMenu.PROPERTY_FILTER, InboxMenu.PROPERTY_FILTER_ALL);\n                }\n                \n                menu.setRequestParameters(userview.getParams());\n                menu.setProperties(props);\n                menu.setUserview(userview);\n                menu.setUrl(data.get(\"base_link\") + INBOX);\n                menu.setKey(userview.getParamString(\"key\"));\n                html += UserviewUtil.getUserviewMenuHtml(menu);\n            }\n        } catch (Exception e) {\n            html += handleContentError(e, data);\n        }\n        return html;\n    }\n\n    public void webService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String action = request.getParameter(\"_a\");\n\n        if (\"getAssignment\".equals(action)) {\n            try {\n                String appId = request.getParameter(\"appId\");\n                WorkflowManager wm = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\n                if (appId != null && appId.isEmpty()) {\n                    appId = null;\n                }\n                int count = wm.getAssignmentSize(appId, null, null);\n                Collection<WorkflowAssignment> assignments = wm.getAssignmentListLite(appId, null, null, null, \"a.activated\", true, 0, 5);\n        \n                JSONObject jsonObj = new JSONObject();\n                jsonObj.accumulate(\"count\", count);\n                \n                String format = AppUtil.getAppDateFormat();\n                Collection<Map<String, String>> datas = new ArrayList<Map<String, String>>();\n                for (WorkflowAssignment a : assignments) {\n                    Map<String, String> data = new HashMap<String, String>();\n                    data.put(\"processId\", a.getProcessId());\n                    data.put(\"processDefId\", a.getProcessDefId());\n                    data.put(\"processRequesterId\", a.getProcessRequesterId());\n                    data.put(\"processName\", a.getProcessName());\n                    data.put(\"processVersion\", a.getProcessVersion());\n                    data.put(\"activityId\", a.getActivityId());\n                    data.put(\"activityDefId\", a.getActivityDefId());\n                    data.put(\"activityName\", a.getActivityName());\n                    data.put(\"assigneeName\", a.getAssigneeName());\n                    data.put(\"dateCreated\", TimeZoneUtil.convertToTimeZone(a.getDateCreated(), null, format));\n                    datas.add(data);\n                }\n                \n                jsonObj.put(\"data\", datas);\n\n                jsonObj.write(response.getWriter());\n            } catch (Exception ex) {\n                LogUtil.error(this.getClass().getName(), ex, \"Get assignment error!\");\n                response.setStatus(HttpServletResponse.SC_NO_CONTENT);\n            }\n        } else {\n            response.setStatus(HttpServletResponse.SC_NO_CONTENT);\n        }\n    }\n    \n    @Override\n    public String getFavIconLink(Map<String, Object> data) {\n        String fav = getPropertyString(\"fav_icon\");\n        if (!fav.isEmpty()) {\n            return fav;\n        } else {\n            return super.getFavIconLink(data);\n        }\n    }\n    \n    @Override\n    public boolean isMobileViewDisabled() {\n        return true;\n    }\n    \n    @Override\n    public String[] themeDefinedMenusId() {\n        return new String[] {PROFILE, INBOX};\n    }\n\n    @Override\n    public String handlePwaOfflinePage(Map<String, Object> data) {\n        return UserviewUtil.getTemplate(this, data, \"/templates/userview/pwaOffline.ftl\");\n    }\n\n    @Override\n    public String handlePwaUnavailablePage(Map<String, Object> data) {\n        return UserviewUtil.getTemplate(this, data, \"/templates/userview/pwaUnavailable.ftl\");\n    }\n}\n"], "filenames": ["wflow-consoleweb/src/main/java/org/joget/apps/app/controller/UserviewWebController.java", "wflow-core/src/main/java/org/joget/apps/userview/service/UserviewService.java", "wflow-core/src/main/java/org/joget/plugin/enterprise/UniversalTheme.java"], "buggy_code_start_loc": [70, 174, 377], "buggy_code_end_loc": [71, 174, 390], "fixing_code_start_loc": [70, 175, 377], "fixing_code_end_loc": [71, 176, 390], "type": "CWE-79", "message": "A vulnerability was found in Joget up to 7.0.31. It has been rated as problematic. This issue affects the function getInternalJsCssLib of the file wflow-core/src/main/java/org/joget/plugin/enterprise/UniversalTheme.java of the component wflow-core. The manipulation of the argument key leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 7.0.32 is able to address this issue. The name of the patch is ecf8be8f6f0cb725c18536ddc726d42a11bdaa1b. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-215963.", "other": {"cve": {"id": "CVE-2022-4560", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-16T17:15:09.030", "lastModified": "2023-03-01T02:41:25.683", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Joget up to 7.0.31. It has been rated as problematic. This issue affects the function getInternalJsCssLib of the file wflow-core/src/main/java/org/joget/plugin/enterprise/UniversalTheme.java of the component wflow-core. The manipulation of the argument key leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 7.0.32 is able to address this issue. The name of the patch is ecf8be8f6f0cb725c18536ddc726d42a11bdaa1b. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-215963."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:joget:joget_dx:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.32", "matchCriteriaId": "839B55D6-2559-474D-A62F-A2DBA0E32E35"}]}]}], "references": [{"url": "https://github.com/jogetworkflow/jw-community/commit/ecf8be8f6f0cb725c18536ddc726d42a11bdaa1b", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/jogetworkflow/jw-community/releases/tag/7.0.32", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?id.215963", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jogetworkflow/jw-community/commit/ecf8be8f6f0cb725c18536ddc726d42a11bdaa1b"}}