{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h\"\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include <cstdlib>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h\"\n#include \"tensorflow/lite/kernels/internal/reference/pooling.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/padding.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace pooling {\n\n// This file has two implementation of each pooling op.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nenum PoolType {\n  kAverage,\n  kMax,\n  kL2,\n};\n\nstruct OpData {\n  TfLitePaddingValues padding;\n};\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  // This is a builtin op, so we don't use the contents in 'buffer', if any.\n  // Instead, we allocate a new object to carry information from Prepare() to\n  // Eval().\n  return new OpData;\n}\n\nvoid Free(TfLiteContext* context, void* buffer) {\n  delete reinterpret_cast<OpData*>(buffer);\n}\n\ntemplate <PoolType pool_type>\nTfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  int batches = input->dims->data[0];\n  int height = input->dims->data[1];\n  int width = input->dims->data[2];\n  int channels_out = input->dims->data[3];\n\n  // Matching GetWindowedOutputSize in TensorFlow.\n  auto padding = params->padding;\n  int out_width, out_height;\n\n  data->padding = ComputePaddingHeightWidth(\n      params->stride_height, params->stride_width, 1, 1, height, width,\n      params->filter_height, params->filter_width, padding, &out_height,\n      &out_width);\n\n  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {\n    if (pool_type == kAverage || pool_type == kMax) {\n      TFLITE_DCHECK_LE(std::abs(input->params.scale - output->params.scale),\n                       1.0e-6);\n      TFLITE_DCHECK_EQ(input->params.zero_point, output->params.zero_point);\n    }\n    if (pool_type == kL2) {\n      // We currently don't have a quantized implementation of L2Pool\n      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);\n    }\n  }\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);\n  output_size->data[0] = batches;\n  output_size->data[1] = out_height;\n  output_size->data[2] = out_width;\n  output_size->data[3] = channels_out;\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nvoid AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,\n                      TfLitePoolParams* params, OpData* data,\n                      const TfLiteTensor* input, TfLiteTensor* output) {\n  float activation_min, activation_max;\n  CalculateActivationRange(params->activation, &activation_min,\n                           &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                       \\\n  tflite::PoolParams op_params;                                          \\\n  op_params.stride_height = params->stride_height;                       \\\n  op_params.stride_width = params->stride_width;                         \\\n  op_params.filter_height = params->filter_height;                       \\\n  op_params.filter_width = params->filter_width;                         \\\n  op_params.padding_values.height = data->padding.height;                \\\n  op_params.padding_values.width = data->padding.width;                  \\\n  op_params.float_activation_min = activation_min;                       \\\n  op_params.float_activation_max = activation_max;                       \\\n  type::AveragePool(op_params, GetTensorShape(input),                    \\\n                    GetTensorData<float>(input), GetTensorShape(output), \\\n                    GetTensorData<float>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_AVERAGE_POOL(reference_ops);\n  } else {\n    TF_LITE_AVERAGE_POOL(optimized_ops);\n  }\n#undef TF_LITE_AVERAGE_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,\n                               TfLitePoolParams* params, OpData* data,\n                               const TfLiteTensor* input,\n                               TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                         \\\n  tflite::PoolParams op_params;                                            \\\n  op_params.stride_height = params->stride_height;                         \\\n  op_params.stride_width = params->stride_width;                           \\\n  op_params.filter_height = params->filter_height;                         \\\n  op_params.filter_width = params->filter_width;                           \\\n  op_params.padding_values.height = data->padding.height;                  \\\n  op_params.padding_values.width = data->padding.width;                    \\\n  op_params.quantized_activation_min = activation_min;                     \\\n  op_params.quantized_activation_max = activation_max;                     \\\n  type::AveragePool(op_params, GetTensorShape(input),                      \\\n                    GetTensorData<uint8_t>(input), GetTensorShape(output), \\\n                    GetTensorData<uint8_t>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_AVERAGE_POOL(reference_ops);\n  } else {\n    TF_LITE_AVERAGE_POOL(optimized_ops);\n  }\n#undef TF_LITE_AVERAGE_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,\n                              TfLitePoolParams* params, OpData* data,\n                              const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                        \\\n  tflite::PoolParams op_params;                                           \\\n  op_params.stride_height = params->stride_height;                        \\\n  op_params.stride_width = params->stride_width;                          \\\n  op_params.filter_height = params->filter_height;                        \\\n  op_params.filter_width = params->filter_width;                          \\\n  op_params.padding_values.height = data->padding.height;                 \\\n  op_params.padding_values.width = data->padding.width;                   \\\n  op_params.quantized_activation_min = activation_min;                    \\\n  op_params.quantized_activation_max = activation_max;                    \\\n  type::AveragePool(op_params, GetTensorShape(input),                     \\\n                    GetTensorData<int8_t>(input), GetTensorShape(output), \\\n                    GetTensorData<int8_t>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_AVERAGE_POOL(reference_integer_ops);\n  } else {\n    TF_LITE_AVERAGE_POOL(optimized_integer_ops);\n  }\n#undef TF_LITE_AVERAGE_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,\n                               TfLitePoolParams* params, OpData* data,\n                               const TfLiteTensor* input,\n                               TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  CalculateActivationRangeQuantized(context, params->activation, output,\n                                    &activation_min, &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                         \\\n  tflite::PoolParams op_params;                                            \\\n  op_params.stride_height = params->stride_height;                         \\\n  op_params.stride_width = params->stride_width;                           \\\n  op_params.filter_height = params->filter_height;                         \\\n  op_params.filter_width = params->filter_width;                           \\\n  op_params.padding_values.height = data->padding.height;                  \\\n  op_params.padding_values.width = data->padding.width;                    \\\n  op_params.quantized_activation_min = activation_min;                     \\\n  op_params.quantized_activation_max = activation_max;                     \\\n  type::AveragePool(op_params, GetTensorShape(input),                      \\\n                    GetTensorData<int16_t>(input), GetTensorShape(output), \\\n                    GetTensorData<int16_t>(output))\n  TF_LITE_AVERAGE_POOL(reference_integer_ops);\n#undef TF_LITE_AVERAGE_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,\n                  TfLitePoolParams* params, OpData* data,\n                  const TfLiteTensor* input, TfLiteTensor* output) {\n  float activation_min, activation_max;\n  CalculateActivationRange(params->activation, &activation_min,\n                           &activation_max);\n#define TF_LITE_MAX_POOL(type)                                                 \\\n  tflite::PoolParams op_params;                                                \\\n  op_params.stride_height = params->stride_height;                             \\\n  op_params.stride_width = params->stride_width;                               \\\n  op_params.filter_height = params->filter_height;                             \\\n  op_params.filter_width = params->filter_width;                               \\\n  op_params.padding_values.height = data->padding.height;                      \\\n  op_params.padding_values.width = data->padding.width;                        \\\n  op_params.float_activation_min = activation_min;                             \\\n  op_params.float_activation_max = activation_max;                             \\\n  type::MaxPool(op_params, GetTensorShape(input), GetTensorData<float>(input), \\\n                GetTensorShape(output), GetTensorData<float>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_MAX_POOL(reference_ops);\n  } else {\n    TF_LITE_MAX_POOL(optimized_ops);\n  }\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node,\n                           TfLitePoolParams* params, OpData* data,\n                           const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_MAX_POOL(type)                                         \\\n  tflite::PoolParams op_params;                                        \\\n  op_params.stride_height = params->stride_height;                     \\\n  op_params.stride_width = params->stride_width;                       \\\n  op_params.filter_height = params->filter_height;                     \\\n  op_params.filter_width = params->filter_width;                       \\\n  op_params.padding_values.height = data->padding.height;              \\\n  op_params.padding_values.width = data->padding.width;                \\\n  op_params.quantized_activation_min = activation_min;                 \\\n  op_params.quantized_activation_max = activation_max;                 \\\n  type::MaxPool(op_params, GetTensorShape(input),                      \\\n                GetTensorData<uint8_t>(input), GetTensorShape(output), \\\n                GetTensorData<uint8_t>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_MAX_POOL(reference_ops);\n  } else {\n    TF_LITE_MAX_POOL(optimized_ops);\n  }\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,\n                          TfLitePoolParams* params, OpData* data,\n                          const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_MAX_POOL(type)                                        \\\n  tflite::PoolParams op_params;                                       \\\n  op_params.stride_height = params->stride_height;                    \\\n  op_params.stride_width = params->stride_width;                      \\\n  op_params.filter_height = params->filter_height;                    \\\n  op_params.filter_width = params->filter_width;                      \\\n  op_params.padding_values.height = data->padding.height;             \\\n  op_params.padding_values.width = data->padding.width;               \\\n  op_params.quantized_activation_min = activation_min;                \\\n  op_params.quantized_activation_max = activation_max;                \\\n  type::MaxPool(op_params, GetTensorShape(input),                     \\\n                GetTensorData<int8_t>(input), GetTensorShape(output), \\\n                GetTensorData<int8_t>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_MAX_POOL(reference_integer_ops);\n  } else {\n    TF_LITE_MAX_POOL(optimized_integer_ops);\n  }\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,\n                           TfLitePoolParams* params, OpData* data,\n                           const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  CalculateActivationRangeQuantized(context, params->activation, output,\n                                    &activation_min, &activation_max);\n#define TF_LITE_MAX_POOL(type)                                         \\\n  tflite::PoolParams op_params;                                        \\\n  op_params.stride_height = params->stride_height;                     \\\n  op_params.stride_width = params->stride_width;                       \\\n  op_params.filter_height = params->filter_height;                     \\\n  op_params.filter_width = params->filter_width;                       \\\n  op_params.padding_values.height = data->padding.height;              \\\n  op_params.padding_values.width = data->padding.width;                \\\n  op_params.quantized_activation_min = activation_min;                 \\\n  op_params.quantized_activation_max = activation_max;                 \\\n  type::MaxPool(op_params, GetTensorShape(input),                      \\\n                GetTensorData<int16_t>(input), GetTensorShape(output), \\\n                GetTensorData<int16_t>(output))\n  TF_LITE_MAX_POOL(reference_integer_ops);\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid L2EvalFloat(TfLiteContext* context, TfLiteNode* node,\n                 TfLitePoolParams* params, OpData* data,\n                 const TfLiteTensor* input, TfLiteTensor* output) {\n  float activation_min, activation_max;\n  CalculateActivationRange(params->activation, &activation_min,\n                           &activation_max);\n#define TF_LITE_L2_POOL(type)                                                 \\\n  tflite::PoolParams op_params;                                               \\\n  op_params.stride_height = params->stride_height;                            \\\n  op_params.stride_width = params->stride_width;                              \\\n  op_params.filter_height = params->filter_height;                            \\\n  op_params.filter_width = params->filter_width;                              \\\n  op_params.padding_values.height = data->padding.height;                     \\\n  op_params.padding_values.width = data->padding.width;                       \\\n  op_params.float_activation_min = activation_min;                            \\\n  op_params.float_activation_max = activation_max;                            \\\n  type::L2Pool(op_params, GetTensorShape(input), GetTensorData<float>(input), \\\n               GetTensorShape(output), GetTensorData<float>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_L2_POOL(reference_ops);\n  } else {\n    TF_LITE_L2_POOL(optimized_ops);\n  }\n#undef TF_LITE_L2_POOL\n}\n\n#undef TF_LITE_KERNEL_TYPE_DISPATCH\n\ntemplate <KernelType kernel_type>\nTfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      AverageEvalFloat<kernel_type>(context, node, params, data, input, output);\n      break;\n    case kTfLiteUInt8:\n      AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,\n                                             output);\n      break;\n    case kTfLiteInt8:\n      AverageEvalQuantizedInt8<kernel_type>(context, node, params, data, input,\n                                            output);\n      break;\n    case kTfLiteInt16:\n      AverageEvalQuantizedInt16<kernel_type>(context, node, params, data, input,\n                                             output);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      MaxEvalFloat<kernel_type>(context, node, params, data, input, output);\n      break;\n    case kTfLiteUInt8:\n      MaxEvalQuantizedUInt8<kernel_type>(context, node, params, data, input,\n                                         output);\n      break;\n    case kTfLiteInt8:\n      MaxEvalQuantizedInt8<kernel_type>(context, node, params, data, input,\n                                        output);\n      break;\n    case kTfLiteInt16:\n      MaxEvalQuantizedInt16<kernel_type>(context, node, params, data, input,\n                                         output);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus L2Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      L2EvalFloat<kernel_type>(context, node, params, data, input, output);\n      break;\n    case kTfLiteUInt8:\n    // We don't have a quantized implementation, so just fall through to the\n    // 'default' case.\n    default:\n      context->ReportError(context, \"Type %d not currently supported.\",\n                           input->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace pooling\n\nTfLiteRegistration* Register_AVERAGE_POOL_REF() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kAverage>,\n                                 pooling::AverageEval<pooling::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MAX_POOL_REF() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kMax>,\n                                 pooling::MaxEval<pooling::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_L2_POOL_REF() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kL2>,\n                                 pooling::L2Eval<pooling::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_AVERAGE_POOL_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      pooling::Init, pooling::Free, pooling::GenericPrepare<pooling::kAverage>,\n      pooling::AverageEval<pooling::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MAX_POOL_GENERIC_OPT() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kMax>,\n                                 pooling::MaxEval<pooling::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_L2_POOL_GENERIC_OPT() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kL2>,\n                                 pooling::L2Eval<pooling::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_AVERAGE_POOL_2D() {\n  return Register_AVERAGE_POOL_GENERIC_OPT();\n}\n\nTfLiteRegistration* Register_MAX_POOL_2D() {\n  return Register_MAX_POOL_GENERIC_OPT();\n}\n\nTfLiteRegistration* Register_L2_POOL_2D() {\n  return Register_L2_POOL_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include <initializer_list>\n#include <vector>\n\n#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n#include \"flatbuffers/flatbuffers.h\"  // from @flatbuffers\n#include \"tensorflow/lite/kernels/test_util.h\"\n#include \"tensorflow/lite/schema/schema_generated.h\"\n\nnamespace tflite {\nnamespace {\n\nusing ::testing::ElementsAreArray;\n\nclass BasePoolingOpModel : public SingleOpModel {\n public:\n  BasePoolingOpModel(\n      BuiltinOperator type, const TensorData& input, int filter_width,\n      int filter_height, const TensorData& output,\n      Padding padding = Padding_VALID, int stride_w = 2, int stride_h = 2,\n      ActivationFunctionType activation = ActivationFunctionType_NONE) {\n    input_ = AddInput(input);\n    output_ = AddOutput(output);\n\n    SetBuiltinOp(type, BuiltinOptions_Pool2DOptions,\n                 CreatePool2DOptions(builder_, padding, stride_w, stride_h,\n                                     filter_width, filter_height, activation)\n                     .Union());\n\n    BuildInterpreter({GetShape(input_)});\n  }\n\n protected:\n  int input_;\n  int output_;\n};\n\nclass FloatPoolingOpModel : public BasePoolingOpModel {\n public:\n  using BasePoolingOpModel::BasePoolingOpModel;\n\n  void SetInput(std::initializer_list<float> data) {\n    PopulateTensor(input_, data);\n  }\n\n  std::vector<float> GetOutput() { return ExtractVector<float>(output_); }\n};\n\nclass QuantizedPoolingOpModel : public BasePoolingOpModel {\n public:\n  using BasePoolingOpModel::BasePoolingOpModel;\n\n  void SetInput(std::initializer_list<float> data) {\n    QuantizeAndPopulate<uint8_t>(input_, data);\n  }\n\n  void SetInput(const std::vector<float>& data) {\n    QuantizeAndPopulate<uint8_t>(input_, data);\n  }\n\n  std::vector<uint8_t> GetOutput() { return ExtractVector<uint8_t>(output_); }\n  std::vector<float> GetDequantizedOutput() {\n    return Dequantize<uint8_t>(ExtractVector<uint8_t>(output_),\n                               GetScale(output_), GetZeroPoint(output_));\n  }\n};\n\nclass SymmetricQuantizedPoolingOpModel : public BasePoolingOpModel {\n public:\n  using BasePoolingOpModel::BasePoolingOpModel;\n\n  void SetInput(std::initializer_list<float> data) {\n    QuantizeAndPopulate<int8_t>(input_, data);\n  }\n\n  void SetInput(const std::vector<float>& data) {\n    QuantizeAndPopulate<int8_t>(input_, data);\n  }\n\n  std::vector<int8_t> GetOutput() { return ExtractVector<int8_t>(output_); }\n  std::vector<float> GetDequantizedOutput() {\n    return Dequantize<int8_t>(ExtractVector<int8_t>(output_), GetScale(output_),\n                              GetZeroPoint(output_));\n  }\n};\n\nclass SymmetricQuantizedPoolingOpModel16 : public BasePoolingOpModel {\n public:\n  using BasePoolingOpModel::BasePoolingOpModel;\n\n  void SetInput(std::initializer_list<float> data) {\n    QuantizeAndPopulate<int16_t>(input_, data);\n  }\n\n  void SetInput(const std::vector<float>& data) {\n    QuantizeAndPopulate<int16_t>(input_, data);\n  }\n\n  std::vector<int16_t> GetOutput() { return ExtractVector<int16_t>(output_); }\n  std::vector<float> GetDequantizedOutput() {\n    return Dequantize<int16_t>(ExtractVector<int16_t>(output_),\n                               GetScale(output_), GetZeroPoint(output_));\n  }\n};\n\n// Replicate each entry in a vector n times along depth (innermost dimension).\n// The values are incremented by delta, creating ramps offset by each input\n// value. This is used to create simple and predicatable variation.\nstd::vector<float> ReplicateDepthRamp(const std::vector<float>& image_plane,\n                                      int n, float delta) {\n  const int size = image_plane.size();\n  std::vector<float> ramped_data(n * size);\n  // The input is treated as a 1-D even if logically it is multi-dimensional.\n  for (int input_index = 0; input_index < size; ++input_index) {\n    for (int depth = 0; depth < n; ++depth) {\n      ramped_data[n * input_index + depth] =\n          image_plane[input_index] + depth * delta;\n    }\n  }\n\n  return ramped_data;\n}\n\nTEST(FloatPoolingOpTest, AveragePool) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({2.75, 5.75}));\n}\n\nTEST(FloatPoolingOpTest, AveragePoolActivationRelu) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU);\n  m.SetInput({\n      0, -6, 2, 4,   //\n      3, 2, -10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({0.0, 0.75}));\n}\n\nTEST(FloatPoolingOpTest, AveragePoolActivationRelu1) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      0, -6, 2, 4,     //\n      -3, -2, -10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({-1.0, 0.75}));\n\n  m.SetInput({\n      0, -6, -2, -4,   //\n      -3, -2, 10, -7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({-1.0, -0.75}));\n}\n\nTEST(FloatPoolingOpTest, AveragePoolActivationRelu6) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU6);\n  m.SetInput({\n      0, -6, 12, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({0.0, 6.0}));\n\n  m.SetInput({\n      0, 6, 12, 4,  //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({2.75, 6.0}));\n}\n\nTEST(FloatPoolingOpTest, AveragePoolPaddingSameStride1) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_SAME, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({2.75, 5.0, 5.75, 5.5, 2.5, 6.0, 8.5, 7.0}));\n}\n\nTEST(FloatPoolingOpTest, AveragePoolPaddingValidStride1) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({2.75, 5.0, 5.75}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePool) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 5.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({44, 92}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolActivationRelu) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU);\n  m.SetInput({\n      0, -6, 2, 4,   //\n      3, 2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 0.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128, 134}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolActivationRelu1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      0, -6, 2, 4,     //\n      -3, -2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, 0.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120, 134}));\n\n  m.SetInput({\n      0, -6, -2, -4,   //\n      -3, -2, 10, -7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, -0.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120, 122}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolActivationRelu6) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU6);\n  m.SetInput({\n      0, -6, 12, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 6.0})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128, 176}));\n\n  m.SetInput({\n      0, 6, 12, 4,  //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 6.0})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({150, 176}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolPaddingSameStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375}, Padding_SAME, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(\n                  ArrayFloatNear({2.75, 5.0, 5.75, 5.5, 2.5, 6.0, 8.5, 7.0})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({44, 80, 92, 88, 40, 96, 136, 112}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolPaddingValidStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375}, Padding_VALID, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 5.0, 5.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({44, 80, 92}));\n}\n// Send in a white image, expect a white pixel.\nTEST(QuantizedPoolingOpTest, AveragePoolImageSize16) {\n  int image_size = 16;\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, image_size, image_size, 1}, 0, 16},\n      /*filter_width=*/image_size,\n      /*filter_height=*/image_size,\n      /*output=*/{TensorType_UINT8, {}, 0, 16});\n\n  std::vector<float> input(image_size * image_size, 16.f);\n  m.SetInput(input);\n  m.Invoke();\n\n  EXPECT_THAT(m.GetOutput(), ::testing::ElementsAre(255));\n  EXPECT_THAT(m.GetDequantizedOutput(), ElementsAreArray(ArrayFloatNear({16})));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolLargeDepth) {\n  // Test with a larger depth that is not a multiple of the tranche size, or of\n  // any register-oriented multiples such as 8 and 16.\n  constexpr int depth = 1999;  // Prime number.\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, depth}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375});\n\n  std::vector<float> input_image_plane({\n      0.f, 6.f, 2.f, 4.f,   //\n      3.f, 2.f, 10.f, 7.f,  //\n  });\n  std::vector<float> output_image_plane({2.75f, 5.75f});\n\n  m.SetInput(ReplicateDepthRamp(input_image_plane, depth, 1.f / 512.f));\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear(\n                  ReplicateDepthRamp(output_image_plane, depth, 1.f / 512.f),\n                  1. / 32.f)));\n}\n\n// Test quantized AveragePool with int16 input and output. The input is the same\n// as the uint8 test QuantizedPoolingOpTest.AveragePool but with a scale of\n// 1/4096 rather than 1/16.\nTEST(QuantizedPoolingOpTest, SymmetricAveragePool16) {\n  const float ulp = 1.f / 4096.f;\n  SymmetricQuantizedPoolingOpModel16 m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT16, {1, 2, 4, 1}, 0, 16 - ulp},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT16, {}, 0, 16 - ulp});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 5.75})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({(44 - 128) * 256, (92 - 128) * 256}));\n}\n\n// Test quantized AveragePool with int8 input and output. The input is the same\n// as the uint8 test QuantizedPoolingOpTest.AveragePool. The float output is\n// identical to uint8 test and quantized output is identical to uint8 test with\n// a 128 shift.\nTEST(QuantizedPoolingOpTest, SymmetricAveragePool) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 5.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({44 - 128, 92 - 128}));\n}\n// Test quantized AveragePool with int8 input and output. The input is the same\n// as the uint8 test QuantizedPoolingOpTest.AveragePool. The float output is\n// identical to uint8 test and quantized output is identical to uint8 test with\n// a 128 shift.\nTEST(QuantizedPoolingOpTest, SymmetricAveragePoolActivationRelu) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU);\n  m.SetInput({\n      0, -6, 2, 4,   //\n      3, 2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 0.75}, 0.0030)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128 - 128, 134 - 128}));\n}\n\nTEST(QuantizedPoolingOpTest, SymmetricAveragePoolActivationRelu1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      0, -6, 2, 4,     //\n      -3, -2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, 0.75}, 0.0040)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120 - 128, 134 - 128}));\n\n  m.SetInput({\n      0, -6, -2, -4,   //\n      -3, -2, 10, -7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, -0.75}, 0.0040)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120 - 128, 122 - 128}));\n}\n// Test quantized AveragePool with int8 input and output. The input is the same\n// as the uint8 test QuantizedPoolingOpTest.AveragePool. The float output is\n// identical to uint8 test and quantized output is identical to uint8 test with\n// a 128 shift.\nTEST(QuantizedPoolingOpTest, SymmetricAveragePoolActivationRelu6) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU6);\n  m.SetInput({\n      0, -6, 12, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 6.0}, 0.025)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128 - 128, 176 - 128}));\n\n  m.SetInput({\n      0, 6, 12, 4,  //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 6.0}, 0.025)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({150 - 128, 176 - 128}));\n}\n\nTEST(QuantizedPoolingOpTest, SymmetricAveragePoolPaddingSameStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375}, Padding_SAME, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(\n                  ArrayFloatNear({2.75, 5.0, 5.75, 5.5, 2.5, 6.0, 8.5, 7.0})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({44 - 128, 80 - 128, 92 - 128, 88 - 128,\n                                40 - 128, 96 - 128, 136 - 128, 112 - 128}));\n}\n\nTEST(QuantizedPoolingOpTest, SymmetricAveragePoolPaddingValidStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375}, Padding_VALID, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 5.0, 5.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({44 - 128, 80 - 128, 92 - 128}));\n}\n\n// This is not accelerated because the filter window is too large\n// Send in a white image and expect a white pixel.\nTEST(QuantizedPoolingOpTest, AveragePoolImageSize17) {\n  int image_size = 17;\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, image_size, image_size, 1}, 0, 16},\n      /*filter_width=*/image_size,\n      /*filter_height=*/image_size,\n      /*output=*/{TensorType_UINT8, {}, 0, 16});\n\n  std::vector<float> input(image_size * image_size, 16.f);\n  m.SetInput(input);\n  m.Invoke();\n\n  EXPECT_THAT(m.GetOutput(), ::testing::ElementsAre(255));\n}\n\nTEST(FloatPoolingOpTest, MaxPool) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({6, 10}));\n}\n\nTEST(FloatPoolingOpTest, MaxPoolActivationRelu) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU);\n  m.SetInput({\n      -1, -6, 2, 4,     //\n      -3, -2, 10.5, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({0.0, 10.5}));\n}\n\nTEST(FloatPoolingOpTest, MaxPoolActivationRelu1) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      -2.75, -6, 0.2, 0.4,  //\n      -3, -2, -0.3, 0.7,    //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({-1.0, 0.7}));\n\n  m.SetInput({\n      -2.75, -6, -2, -4,  //\n      -3, -2, 10, -7,     //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({-1.0, 1.0}));\n}\n\nTEST(FloatPoolingOpTest, MaxPoolActivationRelu6) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU6);\n  m.SetInput({\n      -1.5, -6, 12, 4,  //\n      -3, -2, 10, 7,    //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({0.0, 6.0}));\n\n  m.SetInput({\n      0, 4.5, 12, 4,  //\n      3, 2, 10, 7,    //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({4.5, 6.0}));\n}\n\nTEST(FloatPoolingOpTest, MaxPoolPaddingSameStride1) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_SAME, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({6, 10, 10, 7, 3, 10, 10, 7}));\n}\n\nTEST(FloatPoolingOpTest, MaxPoolPaddingValidStride1) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({6, 10, 10}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPool) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({96, 160}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPoolActivationRelu) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU);\n  m.SetInput({\n      -1.5, -6, 2, 4,  //\n      -3, -2, 10, 7,   //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0, 10})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128, 208}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPoolActivationRelu1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      -1.7, -6, 2, 4,  //\n      -3, -2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, 1.0})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120, 136}));\n\n  m.SetInput({\n      0, -6, -0.2, -0.4,    //\n      -3, -2, 0.75, -0.99,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 0.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128, 134}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPoolActivationRelu6) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU6);\n  m.SetInput({\n      0, -6, 12, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 6.0})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128, 176}));\n\n  m.SetInput({\n      0, 4.5, 12, 4,  //\n      3, 2, 10, 7,    //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({4.5, 6.0})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({164, 176}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPoolPaddingSameStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375}, Padding_SAME, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10, 10, 7, 3, 10, 10, 7})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({96, 160, 160, 112, 48, 160, 160, 112}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPoolPaddingValidStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375}, Padding_VALID, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10, 10})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({96, 160, 160}));\n}\n\nTEST(QuantizedPoolingOpTest, MaxPoolLargeDepth) {\n  // Test with a larger depth that is not a multiple of the tranche size, or of\n  // any register-oriented multiples such as 8 and 16.\n  constexpr int depth = 1999;  // Prime number.\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, depth}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375});\n\n  std::vector<float> input_image_plane({\n      0.f, 6.f, 2.f, 4.f,   //\n      3.f, 2.f, 10.f, 7.f,  //\n  });\n  std::vector<float> output_image_plane({6.f, 10.f});\n\n  m.SetInput(ReplicateDepthRamp(input_image_plane, depth, 1.f / 512.f));\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear(\n                  ReplicateDepthRamp(output_image_plane, depth, 1.f / 512.f),\n                  1. / 32.f)));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPool) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({96 - 128, 160 - 128}));\n}\n\nTEST(QuantizedInt8PoolingOpTest16, MaxPool) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 16-(1/4096)] --> [Scale{(1/4096)}, zero_point{-32768}]\n  const float ulp = 1.f / 4096.f;\n  SymmetricQuantizedPoolingOpModel16 m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT16, {1, 2, 4, 1}, 0, 16 - ulp},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT16, {}, 0, 16 - ulp});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({(96 - 128) * 256, (160 - 128) * 256}));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPoolActivationRelu) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU);\n  m.SetInput({\n      -1.5, -6, 2, 4,  //\n      -3, -2, 10, 7,   //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0, 10}, 0.04)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128 - 128, 208 - 128}));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPoolActivationRelu1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      -1.7, -6, 2, 4,  //\n      -3, -2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, 1.0}, 0.004)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120 - 128, 136 - 128}));\n\n  m.SetInput({\n      0, -6, -0.2, -0.4,    //\n      -3, -2, 0.75, -0.99,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 0.75}, 0.004)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128 - 128, 134 - 128}));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPoolActivationRelu6) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU6);\n  m.SetInput({\n      0, -6, 12, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 6.0}, 0.025)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128 - 128, 176 - 128}));\n\n  m.SetInput({\n      0, 4.5, 12, 4,  //\n      3, 2, 10, 7,    //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({4.5, 6.0}, 0.025)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({164 - 128, 176 - 128}));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPoolPaddingSameStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375}, Padding_SAME, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10, 10, 7, 3, 10, 10, 7})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({96 - 128, 160 - 128, 160 - 128, 112 - 128,\n                                48 - 128, 160 - 128, 160 - 128, 112 - 128}));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPoolPaddingValidStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375}, Padding_VALID, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10, 10})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({96 - 128, 160 - 128, 160 - 128}));\n}\n\nTEST(FloatPoolingOpTest, L2Pool) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({3.5, 6.5}));\n}\n\nTEST(FloatPoolingOpTest, L2PoolActivationRelu) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU);\n  m.SetInput({\n      -1, -6, 2, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray(ArrayFloatNear({3.53553, 6.5})));\n}\n\nTEST(FloatPoolingOpTest, L2PoolActivationRelu1) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      -0.1, -0.6, 2, 4,   //\n      -0.3, -0.2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray(ArrayFloatNear({0.353553, 1.0})));\n}\n\nTEST(FloatPoolingOpTest, L2PoolActivationRelu6) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU6);\n  m.SetInput({\n      -0.1, -0.6, 2, 4,   //\n      -0.3, -0.2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray(ArrayFloatNear({0.353553, 6.0})));\n}\n\nTEST(FloatPoolingOpTest, L2PoolPaddingSame) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_SAME);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({3.5, 6.5}));\n}\n\nTEST(FloatPoolingOpTest, L2PoolPaddingSameSlide1) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_SAME, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray(ArrayFloatNear(\n                  {3.5, 6.0, 6.5, 5.70088, 2.54951, 7.2111, 8.63134, 7.0},\n                  /*max_abs_error=*/1e-4)));\n}\n\nTEST(FloatPoolingOpTest, L2PoolPaddingValidSlide1) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({3.5, 6.0, 6.5}));\n}\n\n}  // namespace\n}  // namespace tflite\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h\"\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include <cstdlib>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h\"\n#include \"tensorflow/lite/kernels/internal/reference/pooling.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/padding.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace pooling {\n\n// This file has two implementation of each pooling op.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nenum PoolType {\n  kAverage,\n  kMax,\n  kL2,\n};\n\nstruct OpData {\n  TfLitePaddingValues padding;\n};\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  // This is a builtin op, so we don't use the contents in 'buffer', if any.\n  // Instead, we allocate a new object to carry information from Prepare() to\n  // Eval().\n  return new OpData;\n}\n\nvoid Free(TfLiteContext* context, void* buffer) {\n  delete reinterpret_cast<OpData*>(buffer);\n}\n\ntemplate <PoolType pool_type>\nTfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  int batches = input->dims->data[0];\n  int height = input->dims->data[1];\n  int width = input->dims->data[2];\n  int channels_out = input->dims->data[3];\n\n  // Matching GetWindowedOutputSize in TensorFlow.\n  auto padding = params->padding;\n  int out_width, out_height;\n\n  // Prevent division by 0 in optimized pooling implementations\n  TF_LITE_ENSURE(context, params->stride_height > 0);\n  TF_LITE_ENSURE(context, params->stride_width > 0);\n\n  data->padding = ComputePaddingHeightWidth(\n      params->stride_height, params->stride_width, 1, 1, height, width,\n      params->filter_height, params->filter_width, padding, &out_height,\n      &out_width);\n\n  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {\n    if (pool_type == kAverage || pool_type == kMax) {\n      TFLITE_DCHECK_LE(std::abs(input->params.scale - output->params.scale),\n                       1.0e-6);\n      TFLITE_DCHECK_EQ(input->params.zero_point, output->params.zero_point);\n    }\n    if (pool_type == kL2) {\n      // We currently don't have a quantized implementation of L2Pool\n      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);\n    }\n  }\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);\n  output_size->data[0] = batches;\n  output_size->data[1] = out_height;\n  output_size->data[2] = out_width;\n  output_size->data[3] = channels_out;\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nvoid AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,\n                      TfLitePoolParams* params, OpData* data,\n                      const TfLiteTensor* input, TfLiteTensor* output) {\n  float activation_min, activation_max;\n  CalculateActivationRange(params->activation, &activation_min,\n                           &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                       \\\n  tflite::PoolParams op_params;                                          \\\n  op_params.stride_height = params->stride_height;                       \\\n  op_params.stride_width = params->stride_width;                         \\\n  op_params.filter_height = params->filter_height;                       \\\n  op_params.filter_width = params->filter_width;                         \\\n  op_params.padding_values.height = data->padding.height;                \\\n  op_params.padding_values.width = data->padding.width;                  \\\n  op_params.float_activation_min = activation_min;                       \\\n  op_params.float_activation_max = activation_max;                       \\\n  type::AveragePool(op_params, GetTensorShape(input),                    \\\n                    GetTensorData<float>(input), GetTensorShape(output), \\\n                    GetTensorData<float>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_AVERAGE_POOL(reference_ops);\n  } else {\n    TF_LITE_AVERAGE_POOL(optimized_ops);\n  }\n#undef TF_LITE_AVERAGE_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,\n                               TfLitePoolParams* params, OpData* data,\n                               const TfLiteTensor* input,\n                               TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                         \\\n  tflite::PoolParams op_params;                                            \\\n  op_params.stride_height = params->stride_height;                         \\\n  op_params.stride_width = params->stride_width;                           \\\n  op_params.filter_height = params->filter_height;                         \\\n  op_params.filter_width = params->filter_width;                           \\\n  op_params.padding_values.height = data->padding.height;                  \\\n  op_params.padding_values.width = data->padding.width;                    \\\n  op_params.quantized_activation_min = activation_min;                     \\\n  op_params.quantized_activation_max = activation_max;                     \\\n  type::AveragePool(op_params, GetTensorShape(input),                      \\\n                    GetTensorData<uint8_t>(input), GetTensorShape(output), \\\n                    GetTensorData<uint8_t>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_AVERAGE_POOL(reference_ops);\n  } else {\n    TF_LITE_AVERAGE_POOL(optimized_ops);\n  }\n#undef TF_LITE_AVERAGE_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,\n                              TfLitePoolParams* params, OpData* data,\n                              const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                        \\\n  tflite::PoolParams op_params;                                           \\\n  op_params.stride_height = params->stride_height;                        \\\n  op_params.stride_width = params->stride_width;                          \\\n  op_params.filter_height = params->filter_height;                        \\\n  op_params.filter_width = params->filter_width;                          \\\n  op_params.padding_values.height = data->padding.height;                 \\\n  op_params.padding_values.width = data->padding.width;                   \\\n  op_params.quantized_activation_min = activation_min;                    \\\n  op_params.quantized_activation_max = activation_max;                    \\\n  type::AveragePool(op_params, GetTensorShape(input),                     \\\n                    GetTensorData<int8_t>(input), GetTensorShape(output), \\\n                    GetTensorData<int8_t>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_AVERAGE_POOL(reference_integer_ops);\n  } else {\n    TF_LITE_AVERAGE_POOL(optimized_integer_ops);\n  }\n#undef TF_LITE_AVERAGE_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,\n                               TfLitePoolParams* params, OpData* data,\n                               const TfLiteTensor* input,\n                               TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  CalculateActivationRangeQuantized(context, params->activation, output,\n                                    &activation_min, &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                         \\\n  tflite::PoolParams op_params;                                            \\\n  op_params.stride_height = params->stride_height;                         \\\n  op_params.stride_width = params->stride_width;                           \\\n  op_params.filter_height = params->filter_height;                         \\\n  op_params.filter_width = params->filter_width;                           \\\n  op_params.padding_values.height = data->padding.height;                  \\\n  op_params.padding_values.width = data->padding.width;                    \\\n  op_params.quantized_activation_min = activation_min;                     \\\n  op_params.quantized_activation_max = activation_max;                     \\\n  type::AveragePool(op_params, GetTensorShape(input),                      \\\n                    GetTensorData<int16_t>(input), GetTensorShape(output), \\\n                    GetTensorData<int16_t>(output))\n  TF_LITE_AVERAGE_POOL(reference_integer_ops);\n#undef TF_LITE_AVERAGE_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,\n                  TfLitePoolParams* params, OpData* data,\n                  const TfLiteTensor* input, TfLiteTensor* output) {\n  float activation_min, activation_max;\n  CalculateActivationRange(params->activation, &activation_min,\n                           &activation_max);\n#define TF_LITE_MAX_POOL(type)                                                 \\\n  tflite::PoolParams op_params;                                                \\\n  op_params.stride_height = params->stride_height;                             \\\n  op_params.stride_width = params->stride_width;                               \\\n  op_params.filter_height = params->filter_height;                             \\\n  op_params.filter_width = params->filter_width;                               \\\n  op_params.padding_values.height = data->padding.height;                      \\\n  op_params.padding_values.width = data->padding.width;                        \\\n  op_params.float_activation_min = activation_min;                             \\\n  op_params.float_activation_max = activation_max;                             \\\n  type::MaxPool(op_params, GetTensorShape(input), GetTensorData<float>(input), \\\n                GetTensorShape(output), GetTensorData<float>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_MAX_POOL(reference_ops);\n  } else {\n    TF_LITE_MAX_POOL(optimized_ops);\n  }\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node,\n                           TfLitePoolParams* params, OpData* data,\n                           const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_MAX_POOL(type)                                         \\\n  tflite::PoolParams op_params;                                        \\\n  op_params.stride_height = params->stride_height;                     \\\n  op_params.stride_width = params->stride_width;                       \\\n  op_params.filter_height = params->filter_height;                     \\\n  op_params.filter_width = params->filter_width;                       \\\n  op_params.padding_values.height = data->padding.height;              \\\n  op_params.padding_values.width = data->padding.width;                \\\n  op_params.quantized_activation_min = activation_min;                 \\\n  op_params.quantized_activation_max = activation_max;                 \\\n  type::MaxPool(op_params, GetTensorShape(input),                      \\\n                GetTensorData<uint8_t>(input), GetTensorShape(output), \\\n                GetTensorData<uint8_t>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_MAX_POOL(reference_ops);\n  } else {\n    TF_LITE_MAX_POOL(optimized_ops);\n  }\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,\n                          TfLitePoolParams* params, OpData* data,\n                          const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_MAX_POOL(type)                                        \\\n  tflite::PoolParams op_params;                                       \\\n  op_params.stride_height = params->stride_height;                    \\\n  op_params.stride_width = params->stride_width;                      \\\n  op_params.filter_height = params->filter_height;                    \\\n  op_params.filter_width = params->filter_width;                      \\\n  op_params.padding_values.height = data->padding.height;             \\\n  op_params.padding_values.width = data->padding.width;               \\\n  op_params.quantized_activation_min = activation_min;                \\\n  op_params.quantized_activation_max = activation_max;                \\\n  type::MaxPool(op_params, GetTensorShape(input),                     \\\n                GetTensorData<int8_t>(input), GetTensorShape(output), \\\n                GetTensorData<int8_t>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_MAX_POOL(reference_integer_ops);\n  } else {\n    TF_LITE_MAX_POOL(optimized_integer_ops);\n  }\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,\n                           TfLitePoolParams* params, OpData* data,\n                           const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  CalculateActivationRangeQuantized(context, params->activation, output,\n                                    &activation_min, &activation_max);\n#define TF_LITE_MAX_POOL(type)                                         \\\n  tflite::PoolParams op_params;                                        \\\n  op_params.stride_height = params->stride_height;                     \\\n  op_params.stride_width = params->stride_width;                       \\\n  op_params.filter_height = params->filter_height;                     \\\n  op_params.filter_width = params->filter_width;                       \\\n  op_params.padding_values.height = data->padding.height;              \\\n  op_params.padding_values.width = data->padding.width;                \\\n  op_params.quantized_activation_min = activation_min;                 \\\n  op_params.quantized_activation_max = activation_max;                 \\\n  type::MaxPool(op_params, GetTensorShape(input),                      \\\n                GetTensorData<int16_t>(input), GetTensorShape(output), \\\n                GetTensorData<int16_t>(output))\n  TF_LITE_MAX_POOL(reference_integer_ops);\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid L2EvalFloat(TfLiteContext* context, TfLiteNode* node,\n                 TfLitePoolParams* params, OpData* data,\n                 const TfLiteTensor* input, TfLiteTensor* output) {\n  float activation_min, activation_max;\n  CalculateActivationRange(params->activation, &activation_min,\n                           &activation_max);\n#define TF_LITE_L2_POOL(type)                                                 \\\n  tflite::PoolParams op_params;                                               \\\n  op_params.stride_height = params->stride_height;                            \\\n  op_params.stride_width = params->stride_width;                              \\\n  op_params.filter_height = params->filter_height;                            \\\n  op_params.filter_width = params->filter_width;                              \\\n  op_params.padding_values.height = data->padding.height;                     \\\n  op_params.padding_values.width = data->padding.width;                       \\\n  op_params.float_activation_min = activation_min;                            \\\n  op_params.float_activation_max = activation_max;                            \\\n  type::L2Pool(op_params, GetTensorShape(input), GetTensorData<float>(input), \\\n               GetTensorShape(output), GetTensorData<float>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_L2_POOL(reference_ops);\n  } else {\n    TF_LITE_L2_POOL(optimized_ops);\n  }\n#undef TF_LITE_L2_POOL\n}\n\n#undef TF_LITE_KERNEL_TYPE_DISPATCH\n\ntemplate <KernelType kernel_type>\nTfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      AverageEvalFloat<kernel_type>(context, node, params, data, input, output);\n      break;\n    case kTfLiteUInt8:\n      AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,\n                                             output);\n      break;\n    case kTfLiteInt8:\n      AverageEvalQuantizedInt8<kernel_type>(context, node, params, data, input,\n                                            output);\n      break;\n    case kTfLiteInt16:\n      AverageEvalQuantizedInt16<kernel_type>(context, node, params, data, input,\n                                             output);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      MaxEvalFloat<kernel_type>(context, node, params, data, input, output);\n      break;\n    case kTfLiteUInt8:\n      MaxEvalQuantizedUInt8<kernel_type>(context, node, params, data, input,\n                                         output);\n      break;\n    case kTfLiteInt8:\n      MaxEvalQuantizedInt8<kernel_type>(context, node, params, data, input,\n                                        output);\n      break;\n    case kTfLiteInt16:\n      MaxEvalQuantizedInt16<kernel_type>(context, node, params, data, input,\n                                         output);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus L2Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      L2EvalFloat<kernel_type>(context, node, params, data, input, output);\n      break;\n    case kTfLiteUInt8:\n    // We don't have a quantized implementation, so just fall through to the\n    // 'default' case.\n    default:\n      context->ReportError(context, \"Type %d not currently supported.\",\n                           input->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace pooling\n\nTfLiteRegistration* Register_AVERAGE_POOL_REF() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kAverage>,\n                                 pooling::AverageEval<pooling::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MAX_POOL_REF() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kMax>,\n                                 pooling::MaxEval<pooling::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_L2_POOL_REF() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kL2>,\n                                 pooling::L2Eval<pooling::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_AVERAGE_POOL_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      pooling::Init, pooling::Free, pooling::GenericPrepare<pooling::kAverage>,\n      pooling::AverageEval<pooling::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MAX_POOL_GENERIC_OPT() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kMax>,\n                                 pooling::MaxEval<pooling::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_L2_POOL_GENERIC_OPT() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kL2>,\n                                 pooling::L2Eval<pooling::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_AVERAGE_POOL_2D() {\n  return Register_AVERAGE_POOL_GENERIC_OPT();\n}\n\nTfLiteRegistration* Register_MAX_POOL_2D() {\n  return Register_MAX_POOL_GENERIC_OPT();\n}\n\nTfLiteRegistration* Register_L2_POOL_2D() {\n  return Register_L2_POOL_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include <initializer_list>\n#include <vector>\n\n#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n#include \"flatbuffers/flatbuffers.h\"  // from @flatbuffers\n#include \"tensorflow/lite/kernels/test_util.h\"\n#include \"tensorflow/lite/schema/schema_generated.h\"\n\nnamespace tflite {\nnamespace {\n\nusing ::testing::ElementsAreArray;\n\nclass BasePoolingOpModel : public SingleOpModel {\n public:\n  BasePoolingOpModel(\n      BuiltinOperator type, const TensorData& input, int filter_width,\n      int filter_height, const TensorData& output,\n      Padding padding = Padding_VALID, int stride_w = 2, int stride_h = 2,\n      ActivationFunctionType activation = ActivationFunctionType_NONE) {\n    input_ = AddInput(input);\n    output_ = AddOutput(output);\n\n    SetBuiltinOp(type, BuiltinOptions_Pool2DOptions,\n                 CreatePool2DOptions(builder_, padding, stride_w, stride_h,\n                                     filter_width, filter_height, activation)\n                     .Union());\n\n    BuildInterpreter({GetShape(input_)});\n  }\n\n protected:\n  int input_;\n  int output_;\n};\n\nclass FloatPoolingOpModel : public BasePoolingOpModel {\n public:\n  using BasePoolingOpModel::BasePoolingOpModel;\n\n  void SetInput(std::initializer_list<float> data) {\n    PopulateTensor(input_, data);\n  }\n\n  std::vector<float> GetOutput() { return ExtractVector<float>(output_); }\n};\n\nclass QuantizedPoolingOpModel : public BasePoolingOpModel {\n public:\n  using BasePoolingOpModel::BasePoolingOpModel;\n\n  void SetInput(std::initializer_list<float> data) {\n    QuantizeAndPopulate<uint8_t>(input_, data);\n  }\n\n  void SetInput(const std::vector<float>& data) {\n    QuantizeAndPopulate<uint8_t>(input_, data);\n  }\n\n  std::vector<uint8_t> GetOutput() { return ExtractVector<uint8_t>(output_); }\n  std::vector<float> GetDequantizedOutput() {\n    return Dequantize<uint8_t>(ExtractVector<uint8_t>(output_),\n                               GetScale(output_), GetZeroPoint(output_));\n  }\n};\n\nclass SymmetricQuantizedPoolingOpModel : public BasePoolingOpModel {\n public:\n  using BasePoolingOpModel::BasePoolingOpModel;\n\n  void SetInput(std::initializer_list<float> data) {\n    QuantizeAndPopulate<int8_t>(input_, data);\n  }\n\n  void SetInput(const std::vector<float>& data) {\n    QuantizeAndPopulate<int8_t>(input_, data);\n  }\n\n  std::vector<int8_t> GetOutput() { return ExtractVector<int8_t>(output_); }\n  std::vector<float> GetDequantizedOutput() {\n    return Dequantize<int8_t>(ExtractVector<int8_t>(output_), GetScale(output_),\n                              GetZeroPoint(output_));\n  }\n};\n\nclass SymmetricQuantizedPoolingOpModel16 : public BasePoolingOpModel {\n public:\n  using BasePoolingOpModel::BasePoolingOpModel;\n\n  void SetInput(std::initializer_list<float> data) {\n    QuantizeAndPopulate<int16_t>(input_, data);\n  }\n\n  void SetInput(const std::vector<float>& data) {\n    QuantizeAndPopulate<int16_t>(input_, data);\n  }\n\n  std::vector<int16_t> GetOutput() { return ExtractVector<int16_t>(output_); }\n  std::vector<float> GetDequantizedOutput() {\n    return Dequantize<int16_t>(ExtractVector<int16_t>(output_),\n                               GetScale(output_), GetZeroPoint(output_));\n  }\n};\n\n// Replicate each entry in a vector n times along depth (innermost dimension).\n// The values are incremented by delta, creating ramps offset by each input\n// value. This is used to create simple and predicatable variation.\nstd::vector<float> ReplicateDepthRamp(const std::vector<float>& image_plane,\n                                      int n, float delta) {\n  const int size = image_plane.size();\n  std::vector<float> ramped_data(n * size);\n  // The input is treated as a 1-D even if logically it is multi-dimensional.\n  for (int input_index = 0; input_index < size; ++input_index) {\n    for (int depth = 0; depth < n; ++depth) {\n      ramped_data[n * input_index + depth] =\n          image_plane[input_index] + depth * delta;\n    }\n  }\n\n  return ramped_data;\n}\n\nTEST(FloatPoolingOpTest, AveragePool) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({2.75, 5.75}));\n}\n\nTEST(FloatPoolingOpTest, AveragePoolActivationRelu) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU);\n  m.SetInput({\n      0, -6, 2, 4,   //\n      3, 2, -10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({0.0, 0.75}));\n}\n\nTEST(FloatPoolingOpTest, AveragePoolActivationRelu1) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      0, -6, 2, 4,     //\n      -3, -2, -10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({-1.0, 0.75}));\n\n  m.SetInput({\n      0, -6, -2, -4,   //\n      -3, -2, 10, -7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({-1.0, -0.75}));\n}\n\nTEST(FloatPoolingOpTest, AveragePoolActivationRelu6) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU6);\n  m.SetInput({\n      0, -6, 12, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({0.0, 6.0}));\n\n  m.SetInput({\n      0, 6, 12, 4,  //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({2.75, 6.0}));\n}\n\nTEST(FloatPoolingOpTest, AveragePoolPaddingSameStride1) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_SAME, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({2.75, 5.0, 5.75, 5.5, 2.5, 6.0, 8.5, 7.0}));\n}\n\nTEST(FloatPoolingOpTest, AveragePoolPaddingValidStride1) {\n  FloatPoolingOpModel m(BuiltinOperator_AVERAGE_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({2.75, 5.0, 5.75}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePool) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 5.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({44, 92}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolActivationRelu) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU);\n  m.SetInput({\n      0, -6, 2, 4,   //\n      3, 2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 0.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128, 134}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolActivationRelu1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      0, -6, 2, 4,     //\n      -3, -2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, 0.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120, 134}));\n\n  m.SetInput({\n      0, -6, -2, -4,   //\n      -3, -2, 10, -7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, -0.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120, 122}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolActivationRelu6) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU6);\n  m.SetInput({\n      0, -6, 12, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 6.0})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128, 176}));\n\n  m.SetInput({\n      0, 6, 12, 4,  //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 6.0})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({150, 176}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolPaddingSameStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375}, Padding_SAME, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(\n                  ArrayFloatNear({2.75, 5.0, 5.75, 5.5, 2.5, 6.0, 8.5, 7.0})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({44, 80, 92, 88, 40, 96, 136, 112}));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolPaddingValidStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375}, Padding_VALID, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 5.0, 5.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({44, 80, 92}));\n}\n// Send in a white image, expect a white pixel.\nTEST(QuantizedPoolingOpTest, AveragePoolImageSize16) {\n  int image_size = 16;\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, image_size, image_size, 1}, 0, 16},\n      /*filter_width=*/image_size,\n      /*filter_height=*/image_size,\n      /*output=*/{TensorType_UINT8, {}, 0, 16});\n\n  std::vector<float> input(image_size * image_size, 16.f);\n  m.SetInput(input);\n  m.Invoke();\n\n  EXPECT_THAT(m.GetOutput(), ::testing::ElementsAre(255));\n  EXPECT_THAT(m.GetDequantizedOutput(), ElementsAreArray(ArrayFloatNear({16})));\n}\n\nTEST(QuantizedPoolingOpTest, AveragePoolLargeDepth) {\n  // Test with a larger depth that is not a multiple of the tranche size, or of\n  // any register-oriented multiples such as 8 and 16.\n  constexpr int depth = 1999;  // Prime number.\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, depth}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375});\n\n  std::vector<float> input_image_plane({\n      0.f, 6.f, 2.f, 4.f,   //\n      3.f, 2.f, 10.f, 7.f,  //\n  });\n  std::vector<float> output_image_plane({2.75f, 5.75f});\n\n  m.SetInput(ReplicateDepthRamp(input_image_plane, depth, 1.f / 512.f));\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear(\n                  ReplicateDepthRamp(output_image_plane, depth, 1.f / 512.f),\n                  1. / 32.f)));\n}\n\n// Test quantized AveragePool with int16 input and output. The input is the same\n// as the uint8 test QuantizedPoolingOpTest.AveragePool but with a scale of\n// 1/4096 rather than 1/16.\nTEST(QuantizedPoolingOpTest, SymmetricAveragePool16) {\n  const float ulp = 1.f / 4096.f;\n  SymmetricQuantizedPoolingOpModel16 m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT16, {1, 2, 4, 1}, 0, 16 - ulp},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT16, {}, 0, 16 - ulp});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 5.75})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({(44 - 128) * 256, (92 - 128) * 256}));\n}\n\n// Test quantized AveragePool with int8 input and output. The input is the same\n// as the uint8 test QuantizedPoolingOpTest.AveragePool. The float output is\n// identical to uint8 test and quantized output is identical to uint8 test with\n// a 128 shift.\nTEST(QuantizedPoolingOpTest, SymmetricAveragePool) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 5.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({44 - 128, 92 - 128}));\n}\n// Test quantized AveragePool with int8 input and output. The input is the same\n// as the uint8 test QuantizedPoolingOpTest.AveragePool. The float output is\n// identical to uint8 test and quantized output is identical to uint8 test with\n// a 128 shift.\nTEST(QuantizedPoolingOpTest, SymmetricAveragePoolActivationRelu) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU);\n  m.SetInput({\n      0, -6, 2, 4,   //\n      3, 2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 0.75}, 0.0030)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128 - 128, 134 - 128}));\n}\n\nTEST(QuantizedPoolingOpTest, SymmetricAveragePoolActivationRelu1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      0, -6, 2, 4,     //\n      -3, -2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, 0.75}, 0.0040)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120 - 128, 134 - 128}));\n\n  m.SetInput({\n      0, -6, -2, -4,   //\n      -3, -2, 10, -7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, -0.75}, 0.0040)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120 - 128, 122 - 128}));\n}\n// Test quantized AveragePool with int8 input and output. The input is the same\n// as the uint8 test QuantizedPoolingOpTest.AveragePool. The float output is\n// identical to uint8 test and quantized output is identical to uint8 test with\n// a 128 shift.\nTEST(QuantizedPoolingOpTest, SymmetricAveragePoolActivationRelu6) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU6);\n  m.SetInput({\n      0, -6, 12, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 6.0}, 0.025)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128 - 128, 176 - 128}));\n\n  m.SetInput({\n      0, 6, 12, 4,  //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 6.0}, 0.025)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({150 - 128, 176 - 128}));\n}\n\nTEST(QuantizedPoolingOpTest, SymmetricAveragePoolPaddingSameStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375}, Padding_SAME, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(\n                  ArrayFloatNear({2.75, 5.0, 5.75, 5.5, 2.5, 6.0, 8.5, 7.0})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({44 - 128, 80 - 128, 92 - 128, 88 - 128,\n                                40 - 128, 96 - 128, 136 - 128, 112 - 128}));\n}\n\nTEST(QuantizedPoolingOpTest, SymmetricAveragePoolPaddingValidStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375}, Padding_VALID, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({2.75, 5.0, 5.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({44 - 128, 80 - 128, 92 - 128}));\n}\n\n// This is not accelerated because the filter window is too large\n// Send in a white image and expect a white pixel.\nTEST(QuantizedPoolingOpTest, AveragePoolImageSize17) {\n  int image_size = 17;\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_AVERAGE_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, image_size, image_size, 1}, 0, 16},\n      /*filter_width=*/image_size,\n      /*filter_height=*/image_size,\n      /*output=*/{TensorType_UINT8, {}, 0, 16});\n\n  std::vector<float> input(image_size * image_size, 16.f);\n  m.SetInput(input);\n  m.Invoke();\n\n  EXPECT_THAT(m.GetOutput(), ::testing::ElementsAre(255));\n}\n\nTEST(FloatPoolingOpTest, MaxPool) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({6, 10}));\n}\n\nTEST(FloatPoolingOpTest, MaxPoolActivationRelu) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU);\n  m.SetInput({\n      -1, -6, 2, 4,     //\n      -3, -2, 10.5, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({0.0, 10.5}));\n}\n\nTEST(FloatPoolingOpTest, MaxPoolActivationRelu1) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      -2.75, -6, 0.2, 0.4,  //\n      -3, -2, -0.3, 0.7,    //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({-1.0, 0.7}));\n\n  m.SetInput({\n      -2.75, -6, -2, -4,  //\n      -3, -2, 10, -7,     //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({-1.0, 1.0}));\n}\n\nTEST(FloatPoolingOpTest, MaxPoolActivationRelu6) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU6);\n  m.SetInput({\n      -1.5, -6, 12, 4,  //\n      -3, -2, 10, 7,    //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({0.0, 6.0}));\n\n  m.SetInput({\n      0, 4.5, 12, 4,  //\n      3, 2, 10, 7,    //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({4.5, 6.0}));\n}\n\nTEST(FloatPoolingOpTest, MaxPoolPaddingSameStride1) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_SAME, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({6, 10, 10, 7, 3, 10, 10, 7}));\n}\n\nTEST(FloatPoolingOpTest, MaxPoolPaddingValidStride1) {\n  FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({6, 10, 10}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPool) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({96, 160}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPoolActivationRelu) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU);\n  m.SetInput({\n      -1.5, -6, 2, 4,  //\n      -3, -2, 10, 7,   //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0, 10})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128, 208}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPoolActivationRelu1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      -1.7, -6, 2, 4,  //\n      -3, -2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, 1.0})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120, 136}));\n\n  m.SetInput({\n      0, -6, -0.2, -0.4,    //\n      -3, -2, 0.75, -0.99,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 0.75})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128, 134}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPoolActivationRelu6) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.9375] --> [Scale{0.125}, zero_point{128}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, -15.9375, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, -15.9375, 15.9375}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU6);\n  m.SetInput({\n      0, -6, 12, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 6.0})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128, 176}));\n\n  m.SetInput({\n      0, 4.5, 12, 4,  //\n      3, 2, 10, 7,    //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({4.5, 6.0})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({164, 176}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPoolPaddingSameStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375}, Padding_SAME, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10, 10, 7, 3, 10, 10, 7})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({96, 160, 160, 112, 48, 160, 160, 112}));\n}\n\nTEST(QuantizedUInt8PoolingOpTest, MaxPoolPaddingValidStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{0}]\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375}, Padding_VALID, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10, 10})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({96, 160, 160}));\n}\n\nTEST(QuantizedPoolingOpTest, MaxPoolLargeDepth) {\n  // Test with a larger depth that is not a multiple of the tranche size, or of\n  // any register-oriented multiples such as 8 and 16.\n  constexpr int depth = 1999;  // Prime number.\n  QuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_UINT8, {1, 2, 4, depth}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_UINT8, {}, 0, 15.9375});\n\n  std::vector<float> input_image_plane({\n      0.f, 6.f, 2.f, 4.f,   //\n      3.f, 2.f, 10.f, 7.f,  //\n  });\n  std::vector<float> output_image_plane({6.f, 10.f});\n\n  m.SetInput(ReplicateDepthRamp(input_image_plane, depth, 1.f / 512.f));\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear(\n                  ReplicateDepthRamp(output_image_plane, depth, 1.f / 512.f),\n                  1. / 32.f)));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPool) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10})));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({96 - 128, 160 - 128}));\n}\n\nTEST(QuantizedInt8PoolingOpTest16, MaxPool) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 16-(1/4096)] --> [Scale{(1/4096)}, zero_point{-32768}]\n  const float ulp = 1.f / 4096.f;\n  SymmetricQuantizedPoolingOpModel16 m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT16, {1, 2, 4, 1}, 0, 16 - ulp},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT16, {}, 0, 16 - ulp});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({(96 - 128) * 256, (160 - 128) * 256}));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPoolActivationRelu) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU);\n  m.SetInput({\n      -1.5, -6, 2, 4,  //\n      -3, -2, 10, 7,   //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0, 10}, 0.04)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128 - 128, 208 - 128}));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPoolActivationRelu1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      -1.7, -6, 2, 4,  //\n      -3, -2, -10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({-1.0, 1.0}, 0.004)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({120 - 128, 136 - 128}));\n\n  m.SetInput({\n      0, -6, -0.2, -0.4,    //\n      -3, -2, 0.75, -0.99,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 0.75}, 0.004)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128 - 128, 134 - 128}));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPoolActivationRelu6) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[-15.9375, 15.8130] --> [Scale{0.124512}, zero_point{0}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, -15.9375, 15.8130},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, -15.9375, 15.8130}, Padding_VALID, 2, 2,\n      ActivationFunctionType_RELU6);\n  m.SetInput({\n      0, -6, 12, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({0.0, 6.0}, 0.025)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({128 - 128, 176 - 128}));\n\n  m.SetInput({\n      0, 4.5, 12, 4,  //\n      3, 2, 10, 7,    //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({4.5, 6.0}, 0.025)));\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({164 - 128, 176 - 128}));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPoolPaddingSameStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375}, Padding_SAME, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10, 10, 7, 3, 10, 10, 7})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({96 - 128, 160 - 128, 160 - 128, 112 - 128,\n                                48 - 128, 160 - 128, 160 - 128, 112 - 128}));\n}\n\nTEST(QuantizedInt8PoolingOpTest, MaxPoolPaddingValidStride1) {\n  // Choose the input ranges carefully so that the dequantized output matches\n  // the results of the float model above.\n  // Input Range[0, 15.9375] --> [Scale{0.0625}, zero_point{-128}]\n  SymmetricQuantizedPoolingOpModel m(\n      BuiltinOperator_MAX_POOL_2D,\n      /*input=*/{TensorType_INT8, {1, 2, 4, 1}, 0, 15.9375},\n      /*filter_width=*/2, /*filter_height=*/2,\n      /*output=*/{TensorType_INT8, {}, 0, 15.9375}, Padding_VALID, 1, 1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n\n  EXPECT_THAT(m.GetDequantizedOutput(),\n              ElementsAreArray(ArrayFloatNear({6, 10, 10})));\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray({96 - 128, 160 - 128, 160 - 128}));\n}\n\nTEST(FloatPoolingOpTest, L2Pool) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}});\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({3.5, 6.5}));\n}\n\nTEST(FloatPoolingOpTest, L2PoolActivationRelu) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU);\n  m.SetInput({\n      -1, -6, 2, 4,   //\n      -3, -2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray(ArrayFloatNear({3.53553, 6.5})));\n}\n\nTEST(FloatPoolingOpTest, L2PoolActivationRelu1) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU_N1_TO_1);\n  m.SetInput({\n      -0.1, -0.6, 2, 4,   //\n      -0.3, -0.2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray(ArrayFloatNear({0.353553, 1.0})));\n}\n\nTEST(FloatPoolingOpTest, L2PoolActivationRelu6) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 2,\n                        2, ActivationFunctionType_RELU6);\n  m.SetInput({\n      -0.1, -0.6, 2, 4,   //\n      -0.3, -0.2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray(ArrayFloatNear({0.353553, 6.0})));\n}\n\nTEST(FloatPoolingOpTest, L2PoolPaddingSame) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_SAME);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({3.5, 6.5}));\n}\n\nTEST(FloatPoolingOpTest, L2PoolPaddingSameSlide1) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_SAME, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(),\n              ElementsAreArray(ArrayFloatNear(\n                  {3.5, 6.0, 6.5, 5.70088, 2.54951, 7.2111, 8.63134, 7.0},\n                  /*max_abs_error=*/1e-4)));\n}\n\nTEST(FloatPoolingOpTest, L2PoolPaddingValidSlide1) {\n  FloatPoolingOpModel m(BuiltinOperator_L2_POOL_2D,\n                        /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                        /*filter_width=*/2, /*filter_height=*/2,\n                        /*output=*/{TensorType_FLOAT32, {}}, Padding_VALID, 1,\n                        1);\n  m.SetInput({\n      0, 6, 2, 4,   //\n      3, 2, 10, 7,  //\n  });\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput(), ElementsAreArray({3.5, 6.0, 6.5}));\n}\n\n#ifdef GTEST_HAS_DEATH_TEST\nTEST(FloatPoolingOpTest, MaxPoolWithZeroStride) {\n  EXPECT_DEATH(\n      FloatPoolingOpModel m(BuiltinOperator_MAX_POOL_2D,\n                            /*input=*/{TensorType_FLOAT32, {1, 2, 4, 1}},\n                            /*filter_width=*/2, /*filter_height=*/2,\n                            /*output=*/{TensorType_FLOAT32, {}},\n                            /*padding=*/Padding_VALID,\n                            /*stride_w=*/0, /*stride_h=*/0),\n      \"Cannot allocate tensors\");\n}\n#endif\n\n}  // namespace\n}  // namespace tflite\n"], "filenames": ["tensorflow/lite/kernels/pooling.cc", "tensorflow/lite/kernels/pooling_test.cc"], "buggy_code_start_loc": [88, 1153], "buggy_code_end_loc": [88, 1153], "fixing_code_start_loc": [89, 1154], "fixing_code_end_loc": [93, 1167], "type": "CWE-369", "message": "TensorFlow is an end-to-end open source platform for machine learning. Optimized pooling implementations in TFLite fail to check that the stride arguments are not 0 before calling `ComputePaddingHeightWidth`(https://github.com/tensorflow/tensorflow/blob/3f24ccd932546416ec906a02ddd183b48a1d2c83/tensorflow/lite/kernels/pooling.cc#L90). Since users can craft special models which will have `params->stride_{height,width}` be zero, this will result in a division by zero. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29586", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:14.627", "lastModified": "2021-05-19T17:20:39.950", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. Optimized pooling implementations in TFLite fail to check that the stride arguments are not 0 before calling `ComputePaddingHeightWidth`(https://github.com/tensorflow/tensorflow/blob/3f24ccd932546416ec906a02ddd183b48a1d2c83/tensorflow/lite/kernels/pooling.cc#L90). Since users can craft special models which will have `params->stride_{height,width}` be zero, this will result in a division by zero. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;Las implementaciones de agrupaci\u00f3n optimizadas en TFLite no pueden comprobar que los argumentos de stride no sean 0 versiones anteriores a llamar a la funci\u00f3n \"ComputePaddingHeightWidth\" (https://github.com/tensorflow/tensorflow/blob/3f24ccd932546416ec906a02ddd183b48a1d2c83/tensorflow/lite/kernel#s/pooling).&#xa0;Dado que los usuarios pueden dise\u00f1ar modelos especiales que tendr\u00e1n \"params-&gt; stride_ {height, width}\" ser cero, esto resultar\u00e1 en una divisi\u00f3n por cero.&#xa0;La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este compromiso en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-369"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/5f7975d09eac0f10ed8a17dbb6f5964977725adc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-26j7-6w8w-7922", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/5f7975d09eac0f10ed8a17dbb6f5964977725adc"}}