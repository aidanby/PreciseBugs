{"buggy_code": ["<?\n\tif (empty($_FILES)) {\n?>\n<html>\n\t<body>\n\t\t<script>\n\t\t\tparent.BigTreeFileManager.uploadError(\"The file(s) uploaded exceeded the maximum allowed size of <?=BigTree::formatBytes(BigTree::postMaxSize())?>\", \"\");\n\t\t</script>\n\t</body>\n</html>\n<?\n\t\tdie();\n\t}\n\n\t$admin->verifyCSRFToken();\n\n\t$storage = new BigTreeStorage;\n\t\n\t// If we're replacing an existing file, find out its name\n\tif (isset($_POST[\"replace\"])) {\n\t\t$admin->requireLevel(1);\n\t\t$replacing = $admin->getResource($_POST[\"replace\"]);\n\t\t$force_local_replace = ($replacing[\"location\"] == \"local\");\n\t\t$pinfo = BigTree::pathInfo($replacing[\"file\"]);\n\t\t$replacing = $pinfo[\"basename\"];\n\t\t// Set a recently replaced cookie so we don't use cached images\n\t\tsetcookie('bigtree_admin[recently_replaced_file]',true,time()+300,str_replace(DOMAIN,\"\",WWW_ROOT));\n\t} else {\n\t\t$replacing = false;\n\t}\n\n\t$folder = isset($_POST[\"folder\"]) ? sqlescape($_POST[\"folder\"]) : false;\n\t$errors = array();\n\t$successes = 0;\n\n\t// This is an iFrame, so we're going to call the parent from it.\n\techo '<html><body><script>';\n\n\t// If the user doesn't have permission to upload to this folder, throw an error.\n\t$perm = $admin->getResourceFolderPermission($folder);\n\tif ($perm != \"p\") {\n\t\techo 'parent.BigTreeFileManager.uploadError(\"You do not have permission to upload to this folder.\");';\n\t} else {\n\t\tforeach ($_FILES[\"files\"][\"tmp_name\"] as $number => $temp_name) {\n\t\t\t$error = $_FILES[\"files\"][\"error\"][$number];\n\t\t\t$file_name = $replacing ? $replacing : $_FILES[\"files\"][\"name\"][$number];\n\n\t\t\t// Throw a growl error\n\t\t\tif ($error) {\n\t\t\t\t$file_name = htmlspecialchars($file_name);\n\t\t\t\tif ($error == 2 || $error == 1) {\n\t\t\t\t\t$errors[] = $file_name.\" was too large \".BigTree::formatBytes(BigTree::uploadMaxFileSize()).\" max)\";\n\t\t\t\t} else {\n\t\t\t\t\t$errors[] = \"Uploading $file_name failed (unknown error)\";\n\t\t\t\t}\n\t\t\t// File successfully uploaded\n\t\t\t} elseif ($temp_name) {\n\t\t\t\t// See if this file already exists\n\t\t\t\tif ($replacing || !$admin->matchResourceMD5($temp_name,$_POST[\"folder\"])) {\n\t\t\t\t\t$md5 = md5_file($temp_name);\n\t\t\n\t\t\t\t\t// Get the name and file extension\n\t\t\t\t\t$n = strrev($file_name);\n\t\t\t\t\t$extension = strtolower(strrev(substr($n,0,strpos($n,\".\"))));\n\t\t\n\t\t\t\t\t// See if it's an image\n\t\t\t\t\tlist($iwidth,$iheight,$itype,$iattr) = getimagesize($temp_name);\n\t\t\n\t\t\t\t\t// It's a regular file\n\t\t\t\t\tif ($itype != IMAGETYPE_GIF && $itype != IMAGETYPE_JPEG && $itype != IMAGETYPE_PNG) {\n\t\t\t\t\t\t$type = \"file\";\n\n\t\t\t\t\t\tif ($replacing) {\n\t\t\t\t\t\t\t$file = $storage->replace($temp_name, $file_name, \"files/resources/\", true, $force_local_replace);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$file = $storage->store($temp_name, $file_name, \"files/resources/\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// If we failed, either cloud storage upload failed, directory permissions are bad, or the file type isn't permitted\n\t\t\t\t\t\tif (!$file) {\n\t\t\t\t\t\t\tif ($storage->DisabledFileError) {\n\t\t\t\t\t\t\t\t$errors[] = \"$file_name has a disallowed extension: $extension.\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$errors[] = \"Uploading $file_name failed (unknown error).\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t// Otherwise make the database entry for the file we uplaoded.\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!$replacing) {\n\t\t\t\t\t\t\t\t$admin->createResource($folder,$file,$md5,$file_name,$extension);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$admin->updateResource($_POST[\"replace\"], array(\"date\" => date(\"Y-m-d H:i:s\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t// It's an image\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$type = \"image\";\n\t\t\t\t\t\t$field = array(\n\t\t\t\t\t\t\t\"file_input\" => array(\n\t\t\t\t\t\t\t\t\"tmp_name\" => $_FILES[\"files\"][\"tmp_name\"][$number],\n\t\t\t\t\t\t\t\t\"name\" => $replacing ?: $_FILES[\"files\"][\"name\"][$number],\n\t\t\t\t\t\t\t\t\"error\" => $_FILES[\"files\"][\"error\"][$number]\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\"options\" => array(\n\t\t\t\t\t\t\t\t\"directory\" => \"files/resources/\",\n\t\t\t\t\t\t\t\t\"thumbs\" => array(\n\t\t\t\t\t\t\t\t\tarray(\"width\" => 100, \"height\" => 100, \"prefix\" => \"bigtree_list_thumb_\", \"title\" => \"bigtree_internal_list\"),\n\t\t\t\t\t\t\t\t\tarray(\"width\" => 190, \"height\" => 145, \"prefix\" => \"bigtree_detail_thumb_\", \"title\" => \"bigtree_internal_detail\")\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$more_thumb_types = $cms->getSetting(\"bigtree-file-manager-thumbnail-sizes\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (is_array($more_thumb_types)) {\n\t\t\t\t\t\t\tforeach ($more_thumb_types as $thumb) {\n\t\t\t\t\t\t\t\t$field[\"options\"][\"thumbs\"][] = $thumb;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t$file = $admin->processImageUpload($field, $replacing, $force_local_replace);\n\t\t\n\t\t\t\t\t\tif ($file) {\n\t\t\t\t\t\t\t$thumbs = array();\n\n\t\t\t\t\t\t\tforeach ($field[\"options\"][\"thumbs\"] as $thumb) {\n\t\t\t\t\t\t\t\t$thumbs[$thumb[\"title\"]] = BigTree::prefixFile($file, $thumb[\"prefix\"]);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!$replacing) {\n\t\t\t\t\t\t\t\t$admin->createResource($folder,$file,$md5,$file_name,$extension,\"on\",$iheight,$iwidth,$thumbs);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$admin->updateResource($_POST[\"replace\"],array(\n\t\t\t\t\t\t\t\t\t\"date\" => date(\"Y-m-d H:i:s\"),\n\t\t\t\t\t\t\t\t\t\"md5\" => $md5,\n\t\t\t\t\t\t\t\t\t\"height\" => $iheight,\n\t\t\t\t\t\t\t\t\t\"width\" => $iwidth,\n\t\t\t\t\t\t\t\t\t\"thumbs\" => BigTree::json($thumbs)\n\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$last_error = array_pop($bigtree[\"errors\"]);\n\t\t\t\t\t\t\t$errors[] = $last_error[\"error\"];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}\n\n\tif (count($errors)) {\n\t\t$uploaded = count($_FILES[\"files\"][\"tmp_name\"]) - count($errors);\n\t\t$success_message = \"$uploaded file\".($uploaded != 1 ? \"s\" : \"\").\" uploaded successfully.\";\n\t\techo 'parent.BigTreeFileManager.uploadError(\"'.implode(\"<br />\",$errors).'\",\"'.$success_message.'\");</script></body></html>';\n\t} else {\n\t\techo 'parent.BigTreeFileManager.finishedUpload('.json_encode($errors).');</script></body></html>';\n\t}\n?>"], "fixing_code": ["<?\n\tif (empty($_FILES)) {\n?>\n<html>\n\t<body>\n\t\t<script>\n\t\t\tparent.BigTreeFileManager.uploadError(\"The file(s) uploaded exceeded the maximum allowed size of <?=BigTree::formatBytes(BigTree::postMaxSize())?>\", \"\");\n\t\t</script>\n\t</body>\n</html>\n<?\n\t\tdie();\n\t}\n\n\t$admin->verifyCSRFToken();\n\n\t$storage = new BigTreeStorage;\n\t\n\t// If we're replacing an existing file, find out its name\n\tif (isset($_POST[\"replace\"])) {\n\t\t$admin->requireLevel(1);\n\t\t$replacing = $admin->getResource($_POST[\"replace\"]);\n\t\t$force_local_replace = ($replacing[\"location\"] == \"local\");\n\t\t$pinfo = BigTree::pathInfo($replacing[\"file\"]);\n\t\t$replacing = $pinfo[\"basename\"];\n\t\t// Set a recently replaced cookie so we don't use cached images\n\t\tsetcookie('bigtree_admin[recently_replaced_file]',true,time()+300,str_replace(DOMAIN,\"\",WWW_ROOT));\n\t} else {\n\t\t$replacing = false;\n\t}\n\n\t$folder = isset($_POST[\"folder\"]) ? sqlescape($_POST[\"folder\"]) : false;\n\t$errors = array();\n\t$successes = 0;\n\n\t// This is an iFrame, so we're going to call the parent from it.\n\techo '<html><body><script>';\n\n\t// If the user doesn't have permission to upload to this folder, throw an error.\n\t$perm = $admin->getResourceFolderPermission($folder);\n\tif ($perm != \"p\") {\n\t\techo 'parent.BigTreeFileManager.uploadError(\"You do not have permission to upload to this folder.\");';\n\t} else {\n\t\tforeach ($_FILES[\"files\"][\"tmp_name\"] as $number => $temp_name) {\n\t\t\t$error = $_FILES[\"files\"][\"error\"][$number];\n\t\t\t$file_name = $replacing ? $replacing : $_FILES[\"files\"][\"name\"][$number];\n\n\t\t\t// Throw a growl error\n\t\t\tif ($error) {\n\t\t\t\t$file_name = htmlspecialchars($file_name);\n\t\t\t\t\n\t\t\t\tif ($error == 2 || $error == 1) {\n\t\t\t\t\t$errors[] = $file_name.\" was too large \".BigTree::formatBytes(BigTree::uploadMaxFileSize()).\" max)\";\n\t\t\t\t} else {\n\t\t\t\t\t$errors[] = \"Uploading $file_name failed (unknown error)\";\n\t\t\t\t}\n\t\t\t// File successfully uploaded\n\t\t\t} elseif ($temp_name) {\n\t\t\t\t// See if this file already exists\n\t\t\t\tif ($replacing || !$admin->matchResourceMD5($temp_name,$_POST[\"folder\"])) {\n\t\t\t\t\t$md5 = md5_file($temp_name);\n\t\t\n\t\t\t\t\t// Get the name and file extension\n\t\t\t\t\t$n = strrev($file_name);\n\t\t\t\t\t$extension = strtolower(strrev(substr($n,0,strpos($n,\".\"))));\n\t\t\n\t\t\t\t\t// See if it's an image\n\t\t\t\t\tlist($iwidth,$iheight,$itype,$iattr) = getimagesize($temp_name);\n\t\t\n\t\t\t\t\t// It's a regular file\n\t\t\t\t\tif ($itype != IMAGETYPE_GIF && $itype != IMAGETYPE_JPEG && $itype != IMAGETYPE_PNG) {\n\t\t\t\t\t\t$type = \"file\";\n\n\t\t\t\t\t\tif ($replacing) {\n\t\t\t\t\t\t\t$file = $storage->replace($temp_name, $file_name, \"files/resources/\", true, $force_local_replace);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$file = $storage->store($temp_name, $file_name, \"files/resources/\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// If we failed, either cloud storage upload failed, directory permissions are bad, or the file type isn't permitted\n\t\t\t\t\t\tif (!$file) {\n\t\t\t\t\t\t\tif ($storage->DisabledFileError) {\n\t\t\t\t\t\t\t\t$errors[] = htmlspecialchars($file_name).\" has a disallowed extension: $extension.\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$errors[] = \"Uploading \".htmlspecialchars($file_name).\" failed (unknown error).\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t// Otherwise make the database entry for the file we uplaoded.\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!$replacing) {\n\t\t\t\t\t\t\t\t$admin->createResource($folder,$file,$md5,$file_name,$extension);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$admin->updateResource($_POST[\"replace\"], array(\"date\" => date(\"Y-m-d H:i:s\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t// It's an image\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$type = \"image\";\n\t\t\t\t\t\t$field = array(\n\t\t\t\t\t\t\t\"file_input\" => array(\n\t\t\t\t\t\t\t\t\"tmp_name\" => $_FILES[\"files\"][\"tmp_name\"][$number],\n\t\t\t\t\t\t\t\t\"name\" => $replacing ?: $_FILES[\"files\"][\"name\"][$number],\n\t\t\t\t\t\t\t\t\"error\" => $_FILES[\"files\"][\"error\"][$number]\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\"options\" => array(\n\t\t\t\t\t\t\t\t\"directory\" => \"files/resources/\",\n\t\t\t\t\t\t\t\t\"thumbs\" => array(\n\t\t\t\t\t\t\t\t\tarray(\"width\" => 100, \"height\" => 100, \"prefix\" => \"bigtree_list_thumb_\", \"title\" => \"bigtree_internal_list\"),\n\t\t\t\t\t\t\t\t\tarray(\"width\" => 190, \"height\" => 145, \"prefix\" => \"bigtree_detail_thumb_\", \"title\" => \"bigtree_internal_detail\")\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$more_thumb_types = $cms->getSetting(\"bigtree-file-manager-thumbnail-sizes\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (is_array($more_thumb_types)) {\n\t\t\t\t\t\t\tforeach ($more_thumb_types as $thumb) {\n\t\t\t\t\t\t\t\t$field[\"options\"][\"thumbs\"][] = $thumb;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t$file = $admin->processImageUpload($field, $replacing, $force_local_replace);\n\t\t\n\t\t\t\t\t\tif ($file) {\n\t\t\t\t\t\t\t$thumbs = array();\n\n\t\t\t\t\t\t\tforeach ($field[\"options\"][\"thumbs\"] as $thumb) {\n\t\t\t\t\t\t\t\t$thumbs[$thumb[\"title\"]] = BigTree::prefixFile($file, $thumb[\"prefix\"]);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!$replacing) {\n\t\t\t\t\t\t\t\t$admin->createResource($folder,$file,$md5,$file_name,$extension,\"on\",$iheight,$iwidth,$thumbs);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$admin->updateResource($_POST[\"replace\"],array(\n\t\t\t\t\t\t\t\t\t\"date\" => date(\"Y-m-d H:i:s\"),\n\t\t\t\t\t\t\t\t\t\"md5\" => $md5,\n\t\t\t\t\t\t\t\t\t\"height\" => $iheight,\n\t\t\t\t\t\t\t\t\t\"width\" => $iwidth,\n\t\t\t\t\t\t\t\t\t\"thumbs\" => BigTree::json($thumbs)\n\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$last_error = array_pop($bigtree[\"errors\"]);\n\t\t\t\t\t\t\t$errors[] = BigTree::safeEncode($last_error[\"error\"]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}\n\n\tif (count($errors)) {\n\t\t$uploaded = count($_FILES[\"files\"][\"tmp_name\"]) - count($errors);\n\t\t$success_message = \"$uploaded file\".($uploaded != 1 ? \"s\" : \"\").\" uploaded successfully.\";\n\t\techo 'parent.BigTreeFileManager.uploadError(\"'.implode(\"<br />\",$errors).'\",\"'.$success_message.'\");</script></body></html>';\n\t} else {\n\t\techo 'parent.BigTreeFileManager.finishedUpload('.json_encode($errors).');</script></body></html>';\n\t}\n?>"], "filenames": ["core/admin/ajax/file-browser/upload.php"], "buggy_code_start_loc": [50], "buggy_code_end_loc": [142], "fixing_code_start_loc": [51], "fixing_code_end_loc": [143], "type": "CWE-79", "message": "In the 4.2.23 version of BigTree, a Stored XSS vulnerability has been discovered in /admin/ajax/file-browser/upload/ (aka the image upload area).", "other": {"cve": {"id": "CVE-2018-18308", "sourceIdentifier": "cve@mitre.org", "published": "2018-10-16T22:29:01.807", "lastModified": "2019-04-12T19:56:27.710", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In the 4.2.23 version of BigTree, a Stored XSS vulnerability has been discovered in /admin/ajax/file-browser/upload/ (aka the image upload area)."}, {"lang": "es", "value": "En la versi\u00f3n 4.2.23 de BigTree, se ha descubierto una vulnerabilidad Cross-Site Scripting (XSS) persistente en /admin/ajax/file-browser/upload/ (tambi\u00e9n conocida como \u00e1rea de subida de im\u00e1genes)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bigtreecms:bigtree_cms:4.2.23:*:*:*:*:*:*:*", "matchCriteriaId": "02EFDC1C-51B6-4C28-8ECE-5C4445E43CF8"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/149788/BigTree-CMS-4.2.23-Cross-Site-Scripting.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/bigtreecms/BigTree-CMS/commit/ffd668a3aa7d2f540dbcdf5751f207302519df72", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/bigtreecms/BigTree-CMS/issues/356", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/45628/", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/bigtreecms/BigTree-CMS/commit/ffd668a3aa7d2f540dbcdf5751f207302519df72"}}