{"buggy_code": ["<?php\n\nnamespace Wizkunde\\SAMLBase\\Security;\n\nuse Wizkunde\\SAMLBase\\Certificate;\nuse \\RobRichards\\XMLSecLibs\\XMLSecurityDSig;\n\nclass Signature extends XMLSecurityDSig implements SignatureInterface\n{\n    protected $certificate = null;\n    protected $signingAlgorithm = '';\n\n    public function __construct()\n    {\n\treturn parent::__construct('ds');\n    }\n\n    public function setCertificate(Certificate $certificate)\n    {\n        $this->certificate = $certificate;\n    }\n\n    public function verifyDOMDocument($document)\n    {\n        $signatureNode = $this->locateSignature($document);\n\n        /**\n         * No signature was added, it should not fail as this is not a requirement on redirect bindings\n         */\n        if (!$signatureNode) {\n            return true;\n        }\n\n        $this->add509Cert($this->getCertificate()->getPublicKey()->getX509Certificate());\n        $this->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);\n        $this->addReference($document->documentElement, XMLSecurityDSig::SHA1, array('http://www.w3.org/2000/09/xmldsig#enveloped-signature', XMLSecurityDSig::EXC_C14N), array('id_name' => 'ID'));\n\n        return $this->verify($this->getCertificate()->getPublicKey());\n    }\n\n\n    public function getCertificate()\n    {\n        return $this->certificate;\n    }\n\n    public function setSigningAlgorithm($algorithm)\n    {\n        $this->signingAlgorithm = $algorithm;\n    }\n\n    public function getSigningAlgorithm()\n    {\n        return $this->signingAlgorithm;\n    }\n\n    public function setPassphrase($passphrase = '')\n    {\n        $this->passphrase = $passphrase;\n    }\n\n    public function getPassphrase()\n    {\n        return $this->passphrase;\n    }\n\n    /**\n     * Add the signature to the template\n     *\n     * @param \\DOMElement $element\n     * @return bool\n     * @throws \\Exception\n     */\n    public function addSignature(\\DOMDocument $document)\n    {\n        $this->signDocument($document, $document->firstChild->childNodes->item(2));\n    }\n\n    /**\n     * Add the signature to the template\n     *\n     * @param \\DOMElement $element\n     * @return bool\n     * @throws \\Exception\n     */\n    public function signMetadata(\\DOMDocument $document)\n    {\n        $this->signDocument($document, $document->firstChild->childNodes->item(1));\n    }\n\n    /**\n     * Sign a SAML2 Document\n     */\n    protected function signDocument(\\DOMDocument $document, $node)\n    {\n        $this->add509Cert($this->getCertificate()->getPublicKey()->getX509Certificate());\n        $this->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);\n        $this->addReference($document->documentElement, XMLSecurityDSig::SHA1, array('http://www.w3.org/2000/09/xmldsig#enveloped-signature', XMLSecurityDSig::EXC_C14N), array('id_name' => 'ID'));\n\n        $this->sign($this->getCertificate()->getPrivateKey());\n        $this->insertSignature($document->firstChild, $node);\n        $this->canonicalizeSignedInfo();\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Wizkunde\\SAMLBase\\Security;\n\nuse Wizkunde\\SAMLBase\\Certificate;\nuse \\RobRichards\\XMLSecLibs\\XMLSecurityDSig;\n\nclass Signature extends XMLSecurityDSig implements SignatureInterface\n{\n    protected $certificate = null;\n    protected $signingAlgorithm = '';\n\n    public function __construct()\n    {\n\treturn parent::__construct('ds');\n    }\n\n    public function setCertificate(Certificate $certificate)\n    {\n        $this->certificate = $certificate;\n    }\n\n    public function verifyDOMDocument($document)\n    {\n        $signatureNode = $this->locateSignature($document);\n\n        /**\n         * No signature was added, it should not fail as this is not a requirement on redirect bindings\n         */\n        if (!$signatureNode) {\n            return true;\n        }\n\n        $this->add509Cert($this->getCertificate()->getPublicKey()->getX509Certificate());\n        $this->setCanonicalMethod(XMLSecurityDSig::EXC_C14N_COMMENTS);\n        $this->addReference($document->documentElement, XMLSecurityDSig::SHA1, array('http://www.w3.org/2000/09/xmldsig#enveloped-signature', XMLSecurityDSig::EXC_C14N), array('id_name' => 'ID'));\n\n        return $this->verify($this->getCertificate()->getPublicKey());\n    }\n\n\n    public function getCertificate()\n    {\n        return $this->certificate;\n    }\n\n    public function setSigningAlgorithm($algorithm)\n    {\n        $this->signingAlgorithm = $algorithm;\n    }\n\n    public function getSigningAlgorithm()\n    {\n        return $this->signingAlgorithm;\n    }\n\n    public function setPassphrase($passphrase = '')\n    {\n        $this->passphrase = $passphrase;\n    }\n\n    public function getPassphrase()\n    {\n        return $this->passphrase;\n    }\n\n    /**\n     * Add the signature to the template\n     *\n     * @param \\DOMElement $element\n     * @return bool\n     * @throws \\Exception\n     */\n    public function addSignature(\\DOMDocument $document)\n    {\n        $this->signDocument($document, $document->firstChild->childNodes->item(2));\n    }\n\n    /**\n     * Add the signature to the template\n     *\n     * @param \\DOMElement $element\n     * @return bool\n     * @throws \\Exception\n     */\n    public function signMetadata(\\DOMDocument $document)\n    {\n        $this->signDocument($document, $document->firstChild->childNodes->item(1));\n    }\n\n    /**\n     * Sign a SAML2 Document\n     */\n    protected function signDocument(\\DOMDocument $document, $node)\n    {\n        $this->add509Cert($this->getCertificate()->getPublicKey()->getX509Certificate());\n        $this->setCanonicalMethod(XMLSecurityDSig::EXC_C14N_COMMENTS);\n        $this->addReference($document->documentElement, XMLSecurityDSig::SHA1, array('http://www.w3.org/2000/09/xmldsig#enveloped-signature', XMLSecurityDSig::EXC_C14N), array('id_name' => 'ID'));\n\n        $this->sign($this->getCertificate()->getPrivateKey());\n        $this->insertSignature($document->firstChild, $node);\n        $this->canonicalizeSignedInfo();\n    }\n}\n"], "filenames": ["src/Wizkunde/SAMLBase/Security/Signature.php"], "buggy_code_start_loc": [35], "buggy_code_end_loc": [98], "fixing_code_start_loc": [35], "fixing_code_end_loc": [98], "type": "CWE-347", "message": "Wizkunde SAMLBase may incorrectly utilize the results of XML DOM traversal and canonicalization APIs in such a way that an attacker may be able to manipulate the SAML data without invalidating the cryptographic signature, allowing the attack to potentially bypass authentication to SAML service providers.", "other": {"cve": {"id": "CVE-2018-5387", "sourceIdentifier": "cret@cert.org", "published": "2018-07-24T15:29:01.187", "lastModified": "2022-06-01T20:24:12.053", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Wizkunde SAMLBase may incorrectly utilize the results of XML DOM traversal and canonicalization APIs in such a way that an attacker may be able to manipulate the SAML data without invalidating the cryptographic signature, allowing the attack to potentially bypass authentication to SAML service providers."}, {"lang": "es", "value": "Wizkunde SAMLBase podr\u00eda utilizar err\u00f3neamente los resultados de las API de salto y canonicalizaci\u00f3n XML DOM de tal forma que un atacante pueda manipular los datos SAML sin invalidar la firma criptogr\u00e1fica, lo que permite que el ataque omita la autenticaci\u00f3n de los proveedores de servicio SAML."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-347"}]}, {"source": "cret@cert.org", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wizkunde:samlbase:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4.2", "matchCriteriaId": "2ADEA56E-AD76-4B50-B81D-1ED60750A44D"}]}]}], "references": [{"url": "https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations", "source": "cret@cert.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/GoGentoOSS/SAMLBase/commit/482cdf8c090e0f1179073034ebcb609ac7c3f5b3", "source": "cret@cert.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/GoGentoOSS/SAMLBase/issues/3", "source": "cret@cert.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://www.kb.cert.org/vuls/id/475445", "source": "cret@cert.org", "tags": ["Third Party Advisory", "US Government Resource"]}]}, "github_commit_url": "https://github.com/GoGentoOSS/SAMLBase/commit/482cdf8c090e0f1179073034ebcb609ac7c3f5b3"}}