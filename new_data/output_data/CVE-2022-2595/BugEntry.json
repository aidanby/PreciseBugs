{"buggy_code": ["import CustomFields from '../customfields.js'\nimport { checkAuthentication } from '../../../utils/server_method_helpers'\n\nMeteor.methods({\n  addCustomField: function addCustomField({\n    classname, name, desc, type, possibleValues,\n  }) {\n    check(classname, String)\n    check(name, String)\n    check(type, String)\n    check(desc, String)\n    check(possibleValues, Match.Maybe([String]))\n    checkAuthentication(this)\n    if (CustomFields.findOne({ name })) {\n      throw new Meteor.Error('error-custom-field-exists', 'Custom field already exists', { method: 'addCustomField' })\n    }\n    const customField = {\n      classname,\n      name,\n      desc,\n      type,\n      possibleValues,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n    CustomFields.insert(customField)\n    return customField\n  },\n  removeCustomField: function removeCustomField({ _id }) {\n    check(_id, String)\n    checkAuthentication(this)\n    if (!CustomFields.findOne({ _id })) {\n      throw new Meteor.Error('error-custom-field-not-found', 'Custom field not found', { method: 'removeCustomField' })\n    }\n    CustomFields.remove({ _id })\n  },\n  updateCustomField: function updateCustomField({\n    _id, desc, type, possibleValues,\n  }) {\n    checkAuthentication(this)\n    check(_id, String)\n    check(type, String)\n    check(desc, String)\n    check(possibleValues, Match.Maybe([String]))\n    if (!CustomFields.findOne({ _id })) {\n      throw new Meteor.Error('error-custom-field-not-found', 'Custom field not found', { method: 'removeCustomField' })\n    }\n    CustomFields.update(\n      { _id },\n      {\n        $set: {\n          desc, type, possibleValues, updatedAt: new Date(),\n        },\n      },\n    )\n  },\n})\n", "import AdmZip from 'adm-zip'\nimport Extensions from './extensions'\nimport { checkAuthentication } from '../../utils/server_method_helpers'\n\nMeteor.methods({\n  addExtension({ zipFile }) {\n    checkAuthentication(this)\n    const regex = /^data:.+\\/(.+);base64,(.*)$/\n    const matches = zipFile.match(regex)\n    const data = matches[2]\n    let zip\n    if (data) {\n      zip = new AdmZip(Buffer.from(data, 'base64'))\n    } else {\n      return new Meteor.Error('Invalid extension upload.')\n    }\n    const newExtension = {}\n    for (const zipEntry of zip.getEntries()) {\n      if (zipEntry.entryName === 'extension.json') {\n        const extensionDetails = JSON.parse(zipEntry.getData().toString('utf-8'))\n        extensionDetails.userId = this.userId\n        extensionDetails.isActive = true\n        Object.assign(newExtension, extensionDetails)\n      }\n      if (zipEntry.entryName === 'client.js') {\n        newExtension.client = zipEntry.getData().toString('utf-8')\n      }\n      if (zipEntry.entryName === 'server.js') {\n        newExtension.server = zipEntry.getData().toString('utf-8')\n      }\n    }\n    if (!Extensions.findOne({ name: newExtension.name })) {\n      Extensions.insert(newExtension)\n      return 'notifications.success'\n    }\n    return new Meteor.Error('Extension has been added before.')\n  },\n  removeExtension({ extensionId }) {\n    checkAuthentication(this)\n    const extension = Extensions.findOne({ _id: extensionId })\n    if (extension) {\n      Extensions.remove({ _id: extension._id })\n      return 'notifications.success'\n    }\n    return new Meteor.Error('Extension does not exist.')\n  },\n  launchExtension({ extensionId }) {\n    checkAuthentication(this)\n    const extension = Extensions.findOne({ _id: extensionId })\n    if (extension) {\n      eval(extension.server)\n      return 'notifications.success'\n    }\n    return new Meteor.Error('Extension does not exist')\n  },\n  toggleExtensionState({ extensionId, state }) {\n    checkAuthentication(this)\n    const extension = Extensions.findOne({ _id: extensionId })\n    if (extension) {\n      Extensions.update({ _id: extension._id }, { $set: { isActive: state } })\n      return 'notifications.success'\n    }\n    return new Meteor.Error('Extension does not exist.')\n  },\n})\n", "import { defaultSettings, Globalsettings } from './globalsettings.js'\nimport { checkAdminAuthentication } from '../../utils/server_method_helpers.js'\n\nMeteor.methods({\n  updateGlobalSettings(settingsArray) {\n    checkAdminAuthentication(this)\n    check(settingsArray, Array)\n    for (const setting of settingsArray) {\n      check(setting, Object)\n      check(setting.name, String)\n      check(setting.value, Match.OneOf(String, Number, Boolean))\n      Globalsettings.update({ name: setting.name }, { $set: { value: setting.value } })\n    }\n  },\n  resetSettings() {\n    checkAdminAuthentication(this)\n    for (const setting of defaultSettings) {\n      Globalsettings.remove({ name: setting.name })\n      Globalsettings.insert(setting)\n    }\n  },\n  resetGlobalsetting({ name }) {\n    checkAdminAuthentication(this)\n    Globalsettings.remove({ name })\n    for (const setting of defaultSettings) {\n      if (setting.name === name) {\n        Globalsettings.insert(setting)\n        break\n      }\n    }\n  },\n  updateOidcSettings(configuration) {\n    checkAdminAuthentication(this)\n    ServiceConfiguration.configurations.remove({\n      service: 'oidc',\n    })\n    ServiceConfiguration.configurations.insert(configuration)\n  }\n})\n", "import { FlowRouter } from 'meteor/ostrio:flow-router-extra'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\nimport Bootstrap from 'bootstrap'\nimport { i18nReady, t } from '../../utils/i18n.js'\nimport './projectTasks.html'\nimport Tasks from '../../api/tasks/tasks'\nimport './taskModal.js'\nimport {\n  addToolTipToTableCell, getGlobalSetting, showToast,\n} from '../../utils/frontend_helpers'\n\ndayjs.extend(utc)\n\nTemplate.projectTasks.onCreated(function projectTasksCreated() {\n  this.subscribe('projectTasks', { projectId: FlowRouter.getParam('id') })\n  this.editTaskID = new ReactiveVar(false)\n})\n\nTemplate.projectTasks.onRendered(() => {\n  const templateInstance = Template.instance()\n  const tasks = Tasks.find({ projectId: FlowRouter.getParam('id') })\n  templateInstance.autorun(() => {\n    if (templateInstance.subscriptionsReady() && i18nReady.get() && tasks.count() > 0) {\n      const columns = [\n        {\n          name: t('project.default_task'),\n          editable: false,\n          width: 1,\n          format: (value) => `<div class=\"form-check\"><input type=\"checkbox\" data-id=\"${value}\" class=\"form-check-input mx-auto\" ${Tasks.findOne({ _id: value }).isDefaultTask ? 'checked' : ''}/></div>`,\n        },\n        {\n          name: t('globals.task'),\n          editable: true,\n          format: addToolTipToTableCell,\n          width: 2,\n        },\n        {\n          name: t('task.startDate'),\n          editable: true,\n          compareValue: (cell, keyword) => [dayjs.utc(cell, getGlobalSetting('dateformat')).toDate(), dayjs(keyword, getGlobalSetting('dateformat')).toDate()],\n          format: addToolTipToTableCell,\n        },\n        {\n          name: t('task.endDate'),\n          editable: true,\n          compareValue: (cell, keyword) => [dayjs.utc(cell, getGlobalSetting('dateformat')).toDate(), dayjs(keyword, getGlobalSetting('dateformat')).toDate()],\n          format: addToolTipToTableCell,\n        },\n        {\n          name: t('task.dependencies'),\n          editable: true,\n          format: addToolTipToTableCell,\n          width: 2,\n        },\n      ]\n      const data = tasks.fetch()?.map((task) => [task._id, task.name, dayjs(task.start).format(getGlobalSetting('dateformat')), dayjs(task.end).format(getGlobalSetting('dateformat')),\n        task.dependencies?.map((dep) => Tasks.findOne({ _id: dep })?.name).join(','),\n      ])\n      if (!templateInstance.datatable) {\n        import('frappe-datatable/dist/frappe-datatable.css').then(() => {\n          import('frappe-datatable').then((datatable) => {\n            const DataTable = datatable.default\n            const datatableConfig = {\n              columns,\n              data,\n              serialNoColumn: false,\n              clusterize: false,\n              layout: 'ratio',\n              noDataMessage: t('tabular.sZeroRecords'),\n              getEditor(colIndex, rowIndex, value, parent, column, row, data) {\n                templateInstance.editTaskID.set(row[0].content)\n                new Bootstrap.Modal(templateInstance.$('#task-modal')).show()\n                return false\n              },\n            }\n            window.requestAnimationFrame(() => {\n              templateInstance.datatable = new DataTable('#projectTasks', datatableConfig)\n            })\n          })\n        })\n      } else {\n        window.requestAnimationFrame(() => {\n          templateInstance.datatable.refresh(data, columns)\n        })\n      }\n      const ganttTasks = tasks.fetch()?.map((task) => (\n        {\n          id: task._id,\n          name: task.name,\n          start: dayjs(task.start).format('YYYY-MM-DD'),\n          end: dayjs(task.end).format('YYYY-MM-DD'),\n          dependencies: task.dependencies,\n        }))\n      const ganttOptions = {\n        on_date_change: (task, start, end) => {\n          const taskId = task.id\n          Meteor.call('updateTask', {\n            taskId,\n            name: task.name,\n            start,\n            end,\n            dependencies: task.dependencies,\n          })\n        },\n        on_click: (task) => {\n          templateInstance.editTaskID.set(task.id)\n          new Bootstrap.Modal(templateInstance.$('#task-modal')).show()\n        },\n      }\n      if (!templateInstance.ganttchart) {\n        import('frappe-gantt').then((gantt) => {\n          const Gantt = gantt.default\n          templateInstance.ganttchart = new Gantt('#projectGantt', ganttTasks, ganttOptions)\n        })\n      } else {\n        templateInstance.ganttchart.refresh(ganttTasks)\n      }\n    }\n  })\n})\nTemplate.projectTasks.helpers({\n  tasks: () => Tasks.find({ projectId: FlowRouter.getParam('id') }),\n  editTaskID: () => Template.instance().editTaskID,\n})\n\nTemplate.projectTasks.events({\n  'change .form-check-input': (event, templateInstance) => {\n    Meteor.call('setDefaultTaskForProject', { projectId: FlowRouter.getParam('id'), taskId: templateInstance.$(event.target).data('id') }, (error, result) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.settings_saved_success'))\n      }\n    })\n  },\n  'click .js-open-task-modal': (event, templateInstance) => {\n    event.preventDefault()\n    templateInstance.editTaskID.set(false)\n    Bootstrap.Modal.getOrCreateInstance(templateInstance.$('#task-modal')).dispose()\n    Bootstrap.Modal.getOrCreateInstance(templateInstance.$('#task-modal')).show()\n  },\n})\n\nTemplate.projectTasks.onDestroyed(() => {\n  try {\n    Template.instance().datatable?.destroy()\n  } catch (error) {\n    console.error(error)\n  }\n  Template.instance().datatable = undefined\n})\n", "import dayjs from 'dayjs'\nimport { Random } from 'meteor/random'\nimport { FlowRouter } from 'meteor/ostrio:flow-router-extra'\nimport { t } from '../../utils/i18n.js'\nimport './administration.html'\nimport { Globalsettings } from '../../api/globalsettings/globalsettings'\nimport { displayUserAvatar, validateEmail, showToast } from '../../utils/frontend_helpers'\nimport '../components/limitpicker.js'\nimport Extensions from '../../api/extensions/extensions'\nimport CustomFields from '../../api/customfields/customfields.js'\nimport { oidcFields, getOidcConfiguration } from '../../utils/oidc_helper'\n\nTemplate.administration.onCreated(function administrationCreated() {\n  this.limit = new ReactiveVar(25)\n  this.editCustomFieldId = new ReactiveVar()\n  this.subscribe('extensions')\n  this.subscribe('customfields')\n  this.autorun(() => {\n    if (FlowRouter.getQueryParam('limit')) {\n      this.limit.set(Number(FlowRouter.getQueryParam('limit')))\n      this.$('#limitpicker').val(FlowRouter.getQueryParam('limit'))\n    }\n    this.subscribe('adminUserList', { limit: this.limit.get() })\n  })\n})\n\nTemplate.administration.helpers({\n  users: () => Meteor.users.find({}, { sort: { createdAt: -1 } }),\n  avatar: (meteorUser) => displayUserAvatar(meteorUser),\n  dayjs: (date) => dayjs(date).format('DD.MM.YYYY (HH:mm)'),\n  globalsettings: () => Globalsettings.find(),\n  stringify: (string) => string.toString(),\n  isTextArea: (setting) => setting.type === 'textarea',\n  extensions: () => (Extensions.find({}).fetch().length > 0 ? Extensions.find({}) : false),\n  customfields: () => (CustomFields.find({}).fetch().length > 0 ? CustomFields.find({}) : false),\n  getClassName: (name) => t(`globals.${name}`),\n  oidcSettings: () => oidcFields,\n  oidcValue: (name) => getOidcConfiguration(name),\n  siteUrl: () => Meteor.absoluteUrl({ replaceLocalhost: true }),\n})\n\nTemplate.administration.events({\n  'click .js-delete': (event, templateInstance) => {\n    event.preventDefault()\n    if (confirm(t('administration.user_deletion_confirmation'))) {\n      Meteor.call('adminDeleteUser', { userId: templateInstance.$(event.currentTarget).data('id') }, (error) => {\n        if (error) {\n          console.error(error)\n        } else {\n          showToast(t('administration.user_deleted'))\n        }\n      })\n    }\n  },\n  'click #js-create-user': (event, templateInstance) => {\n    event.preventDefault()\n    const name = templateInstance.$('#name').val()\n    const email = templateInstance.$('#email').val()\n    const password = templateInstance.$('#password').val()\n    const isAdmin = templateInstance.$('#isAdmin').is(':checked')\n    const currentLanguageProject = t('globals.project')\n    const currentLanguageProjectDesc = t('project.first_project_desc')\n    if (!validateEmail(email)) {\n      templateInstance.$('#email').addClass('is-invalid')\n      return\n    }\n    if (name && email && password) {\n      Meteor.call('adminCreateUser', {\n        name, email, password, isAdmin, currentLanguageProject, currentLanguageProjectDesc,\n      }, (error) => {\n        if (error) {\n          console.error(error)\n          showToast(error.message)\n        } else {\n          templateInstance.$('#name').val('')\n          templateInstance.$('#email').val('')\n          templateInstance.$('#password').val('')\n          templateInstance.$('#isAdmin').prop('checked', false)\n          showToast(t('administration.user_created'))\n        }\n        templateInstance.$('#email').removeClass('is-invalid')\n      })\n    }\n  },\n  'click .js-make-admin': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('adminToggleUserAdmin', { userId: templateInstance.$(event.currentTarget).data('id'), isAdmin: true }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('administration.user_updated'))\n      }\n    })\n  },\n  'click .js-remove-admin': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('adminToggleUserAdmin', { userId: templateInstance.$(event.currentTarget).data('id'), isAdmin: false }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('administration.user_updated'))\n      }\n    })\n  },\n  'click .js-generate-password': (event, templateInstance) => {\n    event.preventDefault()\n    templateInstance.$('#password').val(Random.id())\n  },\n  'click #reset': (event) => {\n    event.preventDefault()\n    Meteor.call('resetSettings', (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.settings_saved_success'))\n      }\n    })\n  },\n  'click .js-save': (event, templateInstance) => {\n    event.preventDefault()\n    const settingsArray = []\n    // eslint-disable-next-line i18next/no-literal-string\n    for (const element of templateInstance.$('.js-setting-input')) {\n      const { name } = element\n      let value = templateInstance.$(element).val()\n      if (element.type === 'number') {\n        value = Number(value)\n      } else if (value === 'true') {\n        value = true\n      } else if (value === 'false') {\n        value = false\n      }\n      settingsArray.push({ name, value })\n    }\n    Meteor.call('updateGlobalSettings', settingsArray, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.settings_saved_success'))\n      }\n    })\n  },\n  'click .js-reset': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('resetGlobalsetting', { name: templateInstance.$(event.currentTarget).data('setting-name') }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.settings_saved_success'))\n      }\n    })\n  },\n  'change #extensionFile': (event) => {\n    event.preventDefault()\n    const file = event.currentTarget.files[0]\n    const reader = new FileReader()\n    if (file && reader) {\n      reader.readAsDataURL(file)\n      reader.onload = () => {\n        const zipFile = reader.result\n        Meteor.call('addExtension', { zipFile }, (error, result) => {\n          if (error) {\n            console.error(error)\n          } else {\n            showToast(t(result))\n          }\n        })\n      }\n    }\n  },\n  'click .js-remove-extension': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('removeExtension', { extensionId: templateInstance.$(event.currentTarget).data('extension-id') }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('administration.extension_removed'))\n      }\n    })\n  },\n  'click .js-launch-extension': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('launchExtension', { extensionId: templateInstance.$(event.currentTarget).data('extension-id') }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('administration.extension_launched'))\n      }\n    })\n  },\n  'change .js-extension-state': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('toggleExtensionState', { extensionId: templateInstance.$(event.currentTarget).data('extension-id'), state: templateInstance.$(event.currentTarget).is(':checked') }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.success'))\n      }\n    })\n  },\n  'click .js-create-customfield': (event, templateInstance) => {\n    event.preventDefault()\n    const name = templateInstance.$('#customfieldName').val()\n    const desc = templateInstance.$('#customfieldDesc').val()\n    const type = templateInstance.$('#customfieldType').val()\n    const classname = templateInstance.$('#customfieldClassname').val()\n    const possibleValues = templateInstance.$('#customfieldPossibleValues').val() !== '' ? templateInstance.$('#customfieldPossibleValues').val().split(',') : undefined\n    if (!name) {\n      templateInstance.$('#customfieldName').addClass('is-invalid')\n      return\n    }\n    if (!desc) {\n      templateInstance.$('#customfieldDesc').addClass('is-invalid')\n      return\n    }\n    if (!type) {\n      templateInstance.$('#customfieldType').addClass('is-invalid')\n      return\n    }\n    if (!classname) {\n      templateInstance.$('#customfieldClassname').addClass('is-invalid')\n      return\n    }\n    templateInstance.$('.form-control').removeClass('is-invalid')\n    Meteor.call('addCustomField', {\n      name,\n      desc,\n      type,\n      classname,\n      possibleValues,\n    }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        templateInstance.$('#customfieldName').val('')\n        templateInstance.$('#customfieldDesc').val('')\n        templateInstance.$('#customfieldClassname').val('')\n        showToast(t('notifications.success'))\n      }\n    })\n  },\n  'click .js-remove-customfield': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('removeCustomField', {\n      _id: templateInstance.$(event.currentTarget).data('customfield-id'),\n    }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.success'))\n      }\n    })\n  },\n  'click .js-edit-customfield': (event, templateInstance) => {\n    event.preventDefault()\n    templateInstance.editCustomFieldId.set(templateInstance.$(event.currentTarget).data('customfield-id'))\n    const customField = CustomFields.findOne({ _id: templateInstance.$(event.currentTarget).data('customfield-id') })\n    if (customField) {\n      templateInstance.$('#editCustomfieldClassname').val(customField.classname)\n      templateInstance.$('#editCustomfieldName').val(customField.name)\n      templateInstance.$('#editCustomfieldDesc').val(customField.desc)\n      templateInstance.$('#editCustomfieldType').val(customField.type)\n      templateInstance.$('#editCustomfieldPossibleValues').val(customField.possibleValues)\n    }\n  },\n  'click .js-update-customfield': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('updateCustomField', {\n      _id: templateInstance.editCustomFieldId.get(),\n      desc: templateInstance.$('#editCustomfieldDesc').val(),\n      type: templateInstance.$('#editCustomfieldType').val(),\n      possibleValues: templateInstance.$('#editCustomfieldPossibleValues').val() !== '' ? templateInstance.$('#editCustomfieldPossibleValues').val().split(',') : undefined,\n    }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        templateInstance.editCustomFieldId.set('')\n        templateInstance.$('.js-edit-customfield-modal').modal('hide')\n        showToast(t('notifications.success'))\n      }\n    })\n  },\n  'click .js-update-oidc': (event) => {\n    event.preventDefault()\n\n    const configuration = {\n      service: 'oidc',\n      loginStyle: 'popup',\n    }\n\n    // Fetch the value of each input field\n    Oidc.fields.forEach((field) => {\n      configuration[field.property] = document.getElementById(\n        `configure-oidc-${field.property}`\n      ).value.replace(/^\\s*|\\s*$/g, '') // trim() doesnt work on IE8\n    })\n\n    configuration.idTokenWhitelistFields = configuration.idTokenWhitelistFields.split(' ')\n\n    // Configure this login service\n    Meteor.call('updateOidcSettings', configuration, (error) => {\n      if (error) {\n        // eslint-disable-next-line no-underscore-dangle\n        Meteor._debug('Error configuring login service oidc', error)\n      } else {\n        showToast(t('notifications.success'))\n      }\n    })\n  },\n})\n", "{\n  \"name\": \"titra\",\n  \"version\": \"0.79.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"meteor run\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.18.3\",\n    \"@fortawesome/fontawesome-free\": \"^6.1.1\",\n    \"@fullcalendar/core\": \"^5.11.0\",\n    \"@fullcalendar/daygrid\": \"^5.11.0\",\n    \"@fullcalendar/interaction\": \"^5.11.0\",\n    \"@neovici/nullxlsx\": \"^3.0.4\",\n    \"@popperjs/core\": \"^2.11.5\",\n    \"@simonwep/pickr\": \"^1.8.2\",\n    \"adm-zip\": \"^0.5.9\",\n    \"bcrypt\": \"^5.0.1\",\n    \"bootstrap\": \"^5.1.3\",\n    \"content-type\": \"^1.0.4\",\n    \"date-holidays\": \"^3.16.1\",\n    \"dayjs\": \"^1.11.3\",\n    \"dayjs-precise-range\": \"^1.0.1\",\n    \"docker-names\": \"^1.2.1\",\n    \"file-saver\": \"^2.0.5\",\n    \"frappe-charts\": \"1.6.2\",\n    \"frappe-datatable\": \"^1.16.5\",\n    \"frappe-gantt\": \"^0.6.1\",\n    \"hotkeys-js\": \"^3.9.4\",\n    \"is-dark\": \"^1.0.4\",\n    \"jquery\": \"3.6.0\",\n    \"jquery-serializejson\": \"^3.2.1\",\n    \"ldapjs\": \"^2.3.3\",\n    \"math-expression-evaluator\": \"^1.3.14\",\n    \"meteor-node-stubs\": \"^1.2.3\",\n    \"namedavatar\": \"^1.2.0\",\n    \"node-emoji\": \"^1.11.0\",\n    \"quill\": \"^1.3.7\",\n    \"quill-delta-to-html\": \"^0.12.1\",\n    \"randomcolor\": \"^0.6.2\",\n    \"raw-body\": \"^2.5.1\",\n    \"sortablejs\": \"^1.15.0\",\n    \"tiny-date-picker\": \"^3.2.8\",\n    \"vm2\": \"^3.9.9\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.18.5\",\n    \"@babel/eslint-parser\": \"^7.18.2\",\n    \"eslint\": \"^8.18.0\",\n    \"eslint-config-airbnb-base\": \"^15.0.0\",\n    \"eslint-import-resolver-meteor\": \"^0.4.0\",\n    \"eslint-plugin-i18next\": \"^5.2.1\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-meteor\": \"^7.3.0\"\n  },\n  \"apidoc\": {\n    \"name\": \"titra API\",\n    \"version\": \"0.52.0\",\n    \"description\": \"<div class='h5'>This is the official titra API documentation. For more information about the open source timetracking application developed with lots of \u2764\ufe0f and \u2615\ufe0f by <a href='https://kromit.at'>kromit</a> checkout <a href='https://titra.io'>titra.io</a>.</div>\",\n    \"sampleUrl\": \"https://app.titra.io\"\n  },\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"client/main.js\",\n      \"server\": \"server/main.js\"\n    }\n  }\n}\n"], "fixing_code": ["import CustomFields from '../customfields.js'\nimport { checkAdminAuthentication } from '../../../utils/server_method_helpers'\n\nMeteor.methods({\n  addCustomField: function addCustomField({\n    classname, name, desc, type, possibleValues,\n  }) {\n    check(classname, String)\n    check(name, String)\n    check(type, String)\n    check(desc, String)\n    check(possibleValues, Match.Maybe([String]))\n    checkAdminAuthentication(this)\n    if (CustomFields.findOne({ name })) {\n      throw new Meteor.Error('error-custom-field-exists', 'Custom field already exists', { method: 'addCustomField' })\n    }\n    const customField = {\n      classname,\n      name,\n      desc,\n      type,\n      possibleValues,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n    CustomFields.insert(customField)\n    return customField\n  },\n  removeCustomField: function removeCustomField({ _id }) {\n    check(_id, String)\n    checkAdminAuthentication(this)\n    if (!CustomFields.findOne({ _id })) {\n      throw new Meteor.Error('error-custom-field-not-found', 'Custom field not found', { method: 'removeCustomField' })\n    }\n    CustomFields.remove({ _id })\n  },\n  updateCustomField: function updateCustomField({\n    _id, desc, type, possibleValues,\n  }) {\n    checkAdminAuthentication(this)\n    check(_id, String)\n    check(type, String)\n    check(desc, String)\n    check(possibleValues, Match.Maybe([String]))\n    if (!CustomFields.findOne({ _id })) {\n      throw new Meteor.Error('error-custom-field-not-found', 'Custom field not found', { method: 'removeCustomField' })\n    }\n    CustomFields.update(\n      { _id },\n      {\n        $set: {\n          desc, type, possibleValues, updatedAt: new Date(),\n        },\n      },\n    )\n  },\n})\n", "import AdmZip from 'adm-zip'\nimport Extensions from './extensions'\nimport { checkAdminAuthentication } from '../../utils/server_method_helpers'\n\nMeteor.methods({\n  addExtension({ zipFile }) {\n    checkAdminAuthentication(this)\n    const regex = /^data:.+\\/(.+);base64,(.*)$/\n    const matches = zipFile.match(regex)\n    const data = matches[2]\n    let zip\n    if (data) {\n      zip = new AdmZip(Buffer.from(data, 'base64'))\n    } else {\n      return new Meteor.Error('Invalid extension upload.')\n    }\n    const newExtension = {}\n    for (const zipEntry of zip.getEntries()) {\n      if (zipEntry.entryName === 'extension.json') {\n        const extensionDetails = JSON.parse(zipEntry.getData().toString('utf-8'))\n        extensionDetails.userId = this.userId\n        extensionDetails.isActive = true\n        Object.assign(newExtension, extensionDetails)\n      }\n      if (zipEntry.entryName === 'client.js') {\n        newExtension.client = zipEntry.getData().toString('utf-8')\n      }\n      if (zipEntry.entryName === 'server.js') {\n        newExtension.server = zipEntry.getData().toString('utf-8')\n      }\n    }\n    if (!Extensions.findOne({ name: newExtension.name })) {\n      Extensions.insert(newExtension)\n      return 'notifications.success'\n    }\n    return new Meteor.Error('Extension has been added before.')\n  },\n  removeExtension({ extensionId }) {\n    checkAdminAuthentication(this)\n    const extension = Extensions.findOne({ _id: extensionId })\n    if (extension) {\n      Extensions.remove({ _id: extension._id })\n      return 'notifications.success'\n    }\n    return new Meteor.Error('Extension does not exist.')\n  },\n  launchExtension({ extensionId }) {\n    checkAdminAuthentication(this)\n    const extension = Extensions.findOne({ _id: extensionId })\n    if (extension) {\n      eval(extension.server)\n      return 'notifications.success'\n    }\n    return new Meteor.Error('Extension does not exist')\n  },\n  toggleExtensionState({ extensionId, state }) {\n    checkAdminAuthentication(this)\n    const extension = Extensions.findOne({ _id: extensionId })\n    if (extension) {\n      Extensions.update({ _id: extension._id }, { $set: { isActive: state } })\n      return 'notifications.success'\n    }\n    return new Meteor.Error('Extension does not exist.')\n  },\n})\n", "import { defaultSettings, Globalsettings } from './globalsettings.js'\nimport { checkAdminAuthentication } from '../../utils/server_method_helpers.js'\n\nMeteor.methods({\n  updateGlobalSettings(settingsArray) {\n    checkAdminAuthentication(this)\n    check(settingsArray, Array)\n    for (const setting of settingsArray) {\n      check(setting, Object)\n      check(setting.name, String)\n      check(setting.value, Match.OneOf(String, Number, Boolean))\n      Globalsettings.update({ name: setting.name }, { $set: { value: setting.value } })\n    }\n  },\n  resetSettings() {\n    checkAdminAuthentication(this)\n    for (const setting of defaultSettings) {\n      Globalsettings.remove({ name: setting.name })\n      Globalsettings.insert(setting)\n    }\n  },\n  resetGlobalsetting({ name }) {\n    checkAdminAuthentication(this)\n    Globalsettings.remove({ name })\n    for (const setting of defaultSettings) {\n      if (setting.name === name) {\n        Globalsettings.insert(setting)\n        break\n      }\n    }\n  },\n  updateOidcSettings(configuration) {\n    check(configuration, Object)\n    checkAdminAuthentication(this)\n    ServiceConfiguration.configurations.remove({\n      service: 'oidc',\n    })\n    ServiceConfiguration.configurations.insert(configuration)\n  },\n})\n", "import { FlowRouter } from 'meteor/ostrio:flow-router-extra'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\nimport Bootstrap from 'bootstrap'\nimport { i18nReady, t } from '../../utils/i18n.js'\nimport './projectTasks.html'\nimport Tasks from '../../api/tasks/tasks'\nimport './taskModal.js'\nimport {\n  addToolTipToTableCell, getGlobalSetting, showToast,\n} from '../../utils/frontend_helpers'\n\ndayjs.extend(utc)\n\nTemplate.projectTasks.onCreated(function projectTasksCreated() {\n  this.subscribe('projectTasks', { projectId: FlowRouter.getParam('id') })\n  this.editTaskID = new ReactiveVar(false)\n})\n\nTemplate.projectTasks.onRendered(() => {\n  const templateInstance = Template.instance()\n  const tasks = Tasks.find({ projectId: FlowRouter.getParam('id') })\n  templateInstance.autorun(() => {\n    if (templateInstance.subscriptionsReady() && i18nReady.get() && tasks.count() > 0) {\n      const columns = [\n        {\n          name: t('project.default_task'),\n          editable: false,\n          width: 1,\n          format: (value) => `<div class=\"form-check\"><input type=\"checkbox\" data-id=\"${value}\" class=\"form-check-input mx-auto\" ${Tasks.findOne({ _id: value }).isDefaultTask ? 'checked' : ''}/></div>`,\n        },\n        {\n          name: t('globals.task'),\n          editable: true,\n          format: addToolTipToTableCell,\n          width: 2,\n        },\n        {\n          name: t('task.startDate'),\n          editable: true,\n          compareValue: (cell, keyword) => [dayjs.utc(cell, getGlobalSetting('dateformat')).toDate(), dayjs(keyword, getGlobalSetting('dateformat')).toDate()],\n          format: addToolTipToTableCell,\n        },\n        {\n          name: t('task.endDate'),\n          editable: true,\n          compareValue: (cell, keyword) => [dayjs.utc(cell, getGlobalSetting('dateformat')).toDate(), dayjs(keyword, getGlobalSetting('dateformat')).toDate()],\n          format: addToolTipToTableCell,\n        },\n        {\n          name: t('task.dependencies'),\n          editable: true,\n          format: addToolTipToTableCell,\n          width: 2,\n        },\n      ]\n      const data = tasks.fetch()?.map((task) => [task._id, task.name, dayjs(task.start).format(getGlobalSetting('dateformat')), dayjs(task.end).format(getGlobalSetting('dateformat')),\n        task.dependencies?.map((dep) => Tasks.findOne({ _id: dep })?.name).join(','),\n      ])\n      if (!templateInstance.datatable) {\n        import('frappe-datatable/dist/frappe-datatable.css').then(() => {\n          import('frappe-datatable').then((datatable) => {\n            const DataTable = datatable.default\n            const datatableConfig = {\n              columns,\n              data,\n              serialNoColumn: false,\n              clusterize: false,\n              layout: 'ratio',\n              noDataMessage: t('tabular.sZeroRecords'),\n              getEditor(colIndex, rowIndex, value, parent, column, row, data) {\n                templateInstance.editTaskID.set(row[0].content)\n                new Bootstrap.Modal(templateInstance.$('#task-modal')).show()\n                return false\n              },\n            }\n            window.requestAnimationFrame(() => {\n              templateInstance.datatable = new DataTable('#projectTasks', datatableConfig)\n            })\n          })\n        })\n      } else {\n        window.requestAnimationFrame(() => {\n          templateInstance.datatable.refresh(data, columns)\n        })\n      }\n      const ganttTasks = tasks.fetch()?.map((task) => (\n        {\n          id: task._id,\n          name: $('span').text(task.name).get(0).innerHTML,\n          start: dayjs(task.start).format('YYYY-MM-DD'),\n          end: dayjs(task.end).format('YYYY-MM-DD'),\n          dependencies: task.dependencies,\n        }))\n      const ganttOptions = {\n        on_date_change: (task, start, end) => {\n          const taskId = task.id\n          Meteor.call('updateTask', {\n            taskId,\n            name: task.name,\n            start,\n            end,\n            dependencies: task.dependencies,\n          })\n        },\n        on_click: (task) => {\n          templateInstance.editTaskID.set(task.id)\n          new Bootstrap.Modal(templateInstance.$('#task-modal')).show()\n        },\n      }\n      if (!templateInstance.ganttchart) {\n        import('frappe-gantt').then((gantt) => {\n          const Gantt = gantt.default\n          templateInstance.ganttchart = new Gantt('#projectGantt', ganttTasks, ganttOptions)\n        })\n      } else {\n        templateInstance.ganttchart.refresh(ganttTasks)\n      }\n    }\n  })\n})\nTemplate.projectTasks.helpers({\n  tasks: () => Tasks.find({ projectId: FlowRouter.getParam('id') }),\n  editTaskID: () => Template.instance().editTaskID,\n})\n\nTemplate.projectTasks.events({\n  'change .form-check-input': (event, templateInstance) => {\n    Meteor.call('setDefaultTaskForProject', { projectId: FlowRouter.getParam('id'), taskId: templateInstance.$(event.target).data('id') }, (error, result) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.settings_saved_success'))\n      }\n    })\n  },\n  'click .js-open-task-modal': (event, templateInstance) => {\n    event.preventDefault()\n    templateInstance.editTaskID.set(false)\n    Bootstrap.Modal.getOrCreateInstance(templateInstance.$('#task-modal')).dispose()\n    Bootstrap.Modal.getOrCreateInstance(templateInstance.$('#task-modal')).show()\n  },\n})\n\nTemplate.projectTasks.onDestroyed(() => {\n  try {\n    Template.instance().datatable?.destroy()\n  } catch (error) {\n    console.error(error)\n  }\n  Template.instance().datatable = undefined\n})\n", "import dayjs from 'dayjs'\nimport { Random } from 'meteor/random'\nimport { FlowRouter } from 'meteor/ostrio:flow-router-extra'\nimport { t } from '../../utils/i18n.js'\nimport './administration.html'\nimport { Globalsettings } from '../../api/globalsettings/globalsettings'\nimport { displayUserAvatar, validateEmail, showToast } from '../../utils/frontend_helpers'\nimport '../components/limitpicker.js'\nimport Extensions from '../../api/extensions/extensions'\nimport CustomFields from '../../api/customfields/customfields.js'\nimport { oidcFields, getOidcConfiguration } from '../../utils/oidc_helper'\n\nTemplate.administration.onCreated(function administrationCreated() {\n  this.limit = new ReactiveVar(25)\n  this.editCustomFieldId = new ReactiveVar()\n  this.subscribe('extensions')\n  this.subscribe('customfields')\n  this.autorun(() => {\n    if (FlowRouter.getQueryParam('limit')) {\n      this.limit.set(Number(FlowRouter.getQueryParam('limit')))\n      this.$('#limitpicker').val(FlowRouter.getQueryParam('limit'))\n    }\n    this.subscribe('adminUserList', { limit: this.limit.get() })\n  })\n})\n\nTemplate.administration.helpers({\n  users: () => Meteor.users.find({}, { sort: { createdAt: -1 } }),\n  avatar: (meteorUser) => displayUserAvatar(meteorUser),\n  dayjs: (date) => dayjs(date).format('DD.MM.YYYY (HH:mm)'),\n  globalsettings: () => Globalsettings.find(),\n  stringify: (string) => string.toString(),\n  isTextArea: (setting) => setting.type === 'textarea',\n  extensions: () => (Extensions.find({}).fetch().length > 0 ? Extensions.find({}) : false),\n  customfields: () => (CustomFields.find({}).fetch().length > 0 ? CustomFields.find({}) : false),\n  getClassName: (name) => t(`globals.${name}`),\n  oidcSettings: () => oidcFields,\n  oidcValue: (name) => getOidcConfiguration(name),\n  siteUrl: () => Meteor.absoluteUrl({ replaceLocalhost: true }),\n})\n\nTemplate.administration.events({\n  'click .js-delete': (event, templateInstance) => {\n    event.preventDefault()\n    if (confirm(t('administration.user_deletion_confirmation'))) {\n      Meteor.call('adminDeleteUser', { userId: templateInstance.$(event.currentTarget).data('id') }, (error) => {\n        if (error) {\n          console.error(error)\n        } else {\n          showToast(t('administration.user_deleted'))\n        }\n      })\n    }\n  },\n  'click #js-create-user': (event, templateInstance) => {\n    event.preventDefault()\n    const name = templateInstance.$('#name').val()\n    const email = templateInstance.$('#email').val()\n    const password = templateInstance.$('#password').val()\n    const isAdmin = templateInstance.$('#isAdmin').is(':checked')\n    const currentLanguageProject = t('globals.project')\n    const currentLanguageProjectDesc = t('project.first_project_desc')\n    if (!validateEmail(email)) {\n      templateInstance.$('#email').addClass('is-invalid')\n      return\n    }\n    if (name && email && password) {\n      Meteor.call('adminCreateUser', {\n        name, email, password, isAdmin, currentLanguageProject, currentLanguageProjectDesc,\n      }, (error) => {\n        if (error) {\n          console.error(error)\n          showToast(error.message)\n        } else {\n          templateInstance.$('#name').val('')\n          templateInstance.$('#email').val('')\n          templateInstance.$('#password').val('')\n          templateInstance.$('#isAdmin').prop('checked', false)\n          showToast(t('administration.user_created'))\n        }\n        templateInstance.$('#email').removeClass('is-invalid')\n      })\n    }\n  },\n  'click .js-make-admin': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('adminToggleUserAdmin', { userId: templateInstance.$(event.currentTarget).data('id'), isAdmin: true }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('administration.user_updated'))\n      }\n    })\n  },\n  'click .js-remove-admin': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('adminToggleUserAdmin', { userId: templateInstance.$(event.currentTarget).data('id'), isAdmin: false }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('administration.user_updated'))\n      }\n    })\n  },\n  'click .js-generate-password': (event, templateInstance) => {\n    event.preventDefault()\n    templateInstance.$('#password').val(Random.id())\n  },\n  'click #reset': (event) => {\n    event.preventDefault()\n    Meteor.call('resetSettings', (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.settings_saved_success'))\n      }\n    })\n  },\n  'click .js-save': (event, templateInstance) => {\n    event.preventDefault()\n    const settingsArray = []\n    // eslint-disable-next-line i18next/no-literal-string\n    for (const element of templateInstance.$('.js-setting-input')) {\n      const { name } = element\n      let value = templateInstance.$(element).val()\n      if (element.type === 'number') {\n        value = Number(value)\n      } else if (value === 'true') {\n        value = true\n      } else if (value === 'false') {\n        value = false\n      }\n      settingsArray.push({ name, value })\n    }\n    Meteor.call('updateGlobalSettings', settingsArray, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.settings_saved_success'))\n      }\n    })\n  },\n  'click .js-reset': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('resetGlobalsetting', { name: templateInstance.$(event.currentTarget).data('setting-name') }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.settings_saved_success'))\n      }\n    })\n  },\n  'change #extensionFile': (event) => {\n    event.preventDefault()\n    const file = event.currentTarget.files[0]\n    const reader = new FileReader()\n    if (file && reader) {\n      reader.readAsDataURL(file)\n      reader.onload = () => {\n        const zipFile = reader.result\n        Meteor.call('addExtension', { zipFile }, (error, result) => {\n          if (error) {\n            console.error(error)\n          } else {\n            showToast(t(result))\n          }\n        })\n      }\n    }\n  },\n  'click .js-remove-extension': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('removeExtension', { extensionId: templateInstance.$(event.currentTarget).data('extension-id') }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('administration.extension_removed'))\n      }\n    })\n  },\n  'click .js-launch-extension': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('launchExtension', { extensionId: templateInstance.$(event.currentTarget).data('extension-id') }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('administration.extension_launched'))\n      }\n    })\n  },\n  'change .js-extension-state': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('toggleExtensionState', { extensionId: templateInstance.$(event.currentTarget).data('extension-id'), state: templateInstance.$(event.currentTarget).is(':checked') }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.success'))\n      }\n    })\n  },\n  'click .js-create-customfield': (event, templateInstance) => {\n    event.preventDefault()\n    const name = templateInstance.$('#customfieldName').val()\n    const desc = templateInstance.$('#customfieldDesc').val()\n    const type = templateInstance.$('#customfieldType').val()\n    const classname = templateInstance.$('#customfieldClassname').val()\n    const possibleValues = templateInstance.$('#customfieldPossibleValues').val() !== '' ? templateInstance.$('#customfieldPossibleValues').val().split(',') : undefined\n    if (!name) {\n      templateInstance.$('#customfieldName').addClass('is-invalid')\n      return\n    }\n    if (!desc) {\n      templateInstance.$('#customfieldDesc').addClass('is-invalid')\n      return\n    }\n    if (!type) {\n      templateInstance.$('#customfieldType').addClass('is-invalid')\n      return\n    }\n    if (!classname) {\n      templateInstance.$('#customfieldClassname').addClass('is-invalid')\n      return\n    }\n    templateInstance.$('.form-control').removeClass('is-invalid')\n    Meteor.call('addCustomField', {\n      name,\n      desc,\n      type,\n      classname,\n      possibleValues,\n    }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        templateInstance.$('#customfieldName').val('')\n        templateInstance.$('#customfieldDesc').val('')\n        templateInstance.$('#customfieldClassname').val('')\n        showToast(t('notifications.success'))\n      }\n    })\n  },\n  'click .js-remove-customfield': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('removeCustomField', {\n      _id: templateInstance.$(event.currentTarget).data('customfield-id'),\n    }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        showToast(t('notifications.success'))\n      }\n    })\n  },\n  'click .js-edit-customfield': (event, templateInstance) => {\n    event.preventDefault()\n    templateInstance.editCustomFieldId.set(templateInstance.$(event.currentTarget).data('customfield-id'))\n    const customField = CustomFields.findOne({ _id: templateInstance.$(event.currentTarget).data('customfield-id') })\n    if (customField) {\n      templateInstance.$('#editCustomfieldClassname').val(customField.classname)\n      templateInstance.$('#editCustomfieldName').val(customField.name)\n      templateInstance.$('#editCustomfieldDesc').val(customField.desc)\n      templateInstance.$('#editCustomfieldType').val(customField.type)\n      templateInstance.$('#editCustomfieldPossibleValues').val(customField.possibleValues)\n    }\n  },\n  'click .js-update-customfield': (event, templateInstance) => {\n    event.preventDefault()\n    Meteor.call('updateCustomField', {\n      _id: templateInstance.editCustomFieldId.get(),\n      desc: templateInstance.$('#editCustomfieldDesc').val(),\n      type: templateInstance.$('#editCustomfieldType').val(),\n      possibleValues: templateInstance.$('#editCustomfieldPossibleValues').val() !== '' ? templateInstance.$('#editCustomfieldPossibleValues').val().split(',') : undefined,\n    }, (error) => {\n      if (error) {\n        console.error(error)\n      } else {\n        templateInstance.editCustomFieldId.set('')\n        templateInstance.$('.js-edit-customfield-modal').modal('hide')\n        showToast(t('notifications.success'))\n      }\n    })\n  },\n  'click .js-update-oidc': (event) => {\n    event.preventDefault()\n\n    const configuration = {\n      service: 'oidc',\n      loginStyle: 'popup',\n    }\n\n    // Fetch the value of each input field\n    oidcFields.forEach((field) => {\n      configuration[field.property] = document.getElementById(\n        `configure-oidc-${field.property}`\n      ).value.replace(/^\\s*|\\s*$/g, '') // trim() doesnt work on IE8\n    })\n\n    configuration.idTokenWhitelistFields = configuration.idTokenWhitelistFields.split(' ')\n\n    // Configure this login service\n    Meteor.call('updateOidcSettings', configuration, (error) => {\n      if (error) {\n        // eslint-disable-next-line no-underscore-dangle\n        Meteor._debug('Error configuring login service oidc', error)\n      } else {\n        showToast(t('notifications.success'))\n      }\n    })\n  },\n})\n", "{\n  \"name\": \"titra\",\n  \"version\": \"0.79.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"meteor run\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.18.3\",\n    \"@fortawesome/fontawesome-free\": \"^6.1.1\",\n    \"@fullcalendar/core\": \"^5.11.0\",\n    \"@fullcalendar/daygrid\": \"^5.11.0\",\n    \"@fullcalendar/interaction\": \"^5.11.0\",\n    \"@neovici/nullxlsx\": \"^3.0.4\",\n    \"@popperjs/core\": \"^2.11.5\",\n    \"@simonwep/pickr\": \"^1.8.2\",\n    \"adm-zip\": \"^0.5.9\",\n    \"bcrypt\": \"^5.0.1\",\n    \"bootstrap\": \"^5.1.3\",\n    \"content-type\": \"^1.0.4\",\n    \"date-holidays\": \"^3.16.1\",\n    \"dayjs\": \"^1.11.3\",\n    \"dayjs-precise-range\": \"^1.0.1\",\n    \"docker-names\": \"^1.2.1\",\n    \"file-saver\": \"^2.0.5\",\n    \"frappe-charts\": \"1.6.2\",\n    \"frappe-datatable\": \"^1.16.5\",\n    \"frappe-gantt\": \"^0.6.1\",\n    \"hotkeys-js\": \"^3.9.4\",\n    \"is-dark\": \"^1.0.4\",\n    \"jquery\": \"3.6.0\",\n    \"jquery-serializejson\": \"^3.2.1\",\n    \"ldapjs\": \"^2.3.3\",\n    \"math-expression-evaluator\": \"^1.3.14\",\n    \"meteor-node-stubs\": \"^1.2.3\",\n    \"namedavatar\": \"^1.2.0\",\n    \"node-emoji\": \"^1.11.0\",\n    \"quill\": \"^1.3.7\",\n    \"quill-delta-to-html\": \"^0.12.1\",\n    \"randomcolor\": \"^0.6.2\",\n    \"raw-body\": \"^2.5.1\",\n    \"sortablejs\": \"^1.15.0\",\n    \"tiny-date-picker\": \"^3.2.8\",\n    \"vm2\": \"^3.9.9\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.18.5\",\n    \"@babel/eslint-parser\": \"^7.18.2\",\n    \"eslint\": \"^8.18.0\",\n    \"eslint-config-airbnb-base\": \"^15.0.0\",\n    \"eslint-import-resolver-meteor\": \"^0.4.0\",\n    \"eslint-plugin-i18next\": \"^5.2.1\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-meteor\": \"^7.3.0\"\n  },\n  \"apidoc\": {\n    \"name\": \"titra API\",\n    \"version\": \"0.52.0\",\n    \"description\": \"<div class='h5'>This is the official titra API documentation. For more information about the open source timetracking application developed with lots of \u2764\ufe0f and \u2615\ufe0f by <a href='https://kromit.at'>kromit</a> checkout <a href='https://titra.io'>titra.io</a>.</div>\",\n    \"sampleUrl\": \"https://app.titra.io\"\n  },\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"client/main.js\",\n      \"server\": \"server/main.js\"\n    }\n  }\n}\n"], "filenames": ["imports/api/customfields/server/methods.js", "imports/api/extensions/methods.js", "imports/api/globalsettings/methods.js", "imports/ui/components/projectTasks.js", "imports/ui/pages/administration.js", "package.json"], "buggy_code_start_loc": [2, 3, 32, 90, 292, 3], "buggy_code_end_loc": [41, 58, 39, 91, 293, 4], "fixing_code_start_loc": [2, 3, 33, 90, 292, 3], "fixing_code_end_loc": [41, 58, 40, 91, 293, 4], "type": "CWE-285", "message": "Improper Authorization in GitHub repository kromitgmbh/titra prior to 0.79.1.", "other": {"cve": {"id": "CVE-2022-2595", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-01T15:15:09.650", "lastModified": "2022-08-05T03:42:07.843", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Authorization in GitHub repository kromitgmbh/titra prior to 0.79.1."}, {"lang": "es", "value": "Una Autorizaci\u00f3n Inapropiada en el repositorio de GitHub kromitgmbh/titra versiones anteriores a 0.79.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-285"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kromit:titra:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.79.1", "matchCriteriaId": "29AD8905-8954-44FC-AF18-BC314BE56FC1"}]}]}], "references": [{"url": "https://github.com/kromitgmbh/titra/commit/fe8c3cdeb70e53b9f38f1022186ab16324d332c5", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/1c6afb84-2025-46d8-9e9f-cbfc20e5d04d", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kromitgmbh/titra/commit/fe8c3cdeb70e53b9f38f1022186ab16324d332c5"}}