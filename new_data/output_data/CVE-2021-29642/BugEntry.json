{"buggy_code": ["## v0.2.6 (03/21/21)\n\n- Removed all bundled extensions, to keep GistPad as small as possible\n\n## v0.2.5 (03/21/21)\n\n- Remove the reference to Live Share Spaces in the `README`\n\n## v0.2.4 (03/21/21)\n\n- Added support for `#tags` in wiki repos\n\n## v0.2.3 (03/19/21)\n\n- When you open/create a new repo, it is automatically focused in the `Repositories` tree\n- Added the commands for creating a new public/secret gist to the `Your Gists` node in the `Gists` tree\n- Updated some of the tree icons to use VS Code Codicons instead of custom icons\n\n## v0.2.2 (02/02/2020)\n\n- Fixed renaming of repo files\n- Fixed viewing binary files in a repo (e.g. images)\n- Introduced support for renaming and deleting repo directories\n\n## v0.2.1 (12/28/2020)\n\n- Fixed the `Export to CodePen` command for swing gists\n- Removed the CodeSwing dependency, in order to keep GistPad more focused\n\n## v0.2.0 (12/26/2020)\n\n- Removed the playgrounds feature from GistPad, in favor of an integration with the new [CodeSwing](https://aka.ms/codeswing) extension. Note that all existing functionality should remain the same, but the playgrounds feature is now more broadly useful, than just with gists (e.g. you can create playgrounds in GitHub repos and local directories)\n- Renamed the following gist types: `doc` -> `note`, `playground` -> `code-swing`, `playground-template` -> `swing-template`, `tour` -> `code-tour`, `tutorial` -> `code-swing-tutorial`, `flash-card` -> `flash-code`.\n- The `Showcase` view now only appears after you've signed in, in order to prevent issues with API throttling for anoymous users\n\n## v0.1.13 (12/02/2020)\n\n- Introduced support for embedding wiki pages, using the `![[link]]` syntax\n- Wiki repos are now auto-detected when the repo name includes `notes`, `journal` or `obsidian` (in addition to the exiting `wiki` support)\n- Wiki page titles can now be defined using any markdown heading level\n- Repo files can now be copied to gists, by right-clicking their editor tab and selecting `Copy File to Gist`\n\n## v0.1.12 (11/26/2020)\n\n- The `GistPad: Open Today Page` and `GistPad: Add Wiki Page` commands are now exposed in the command palette, as long as you have a wiki repo open.\n- Added status bar items for opening the \"today page\" and adding a new wiki page.\n- Your list of opened repos, followed users and playground tutorials are now synchronized between machines, if you're using VS Code's settings sync.\n- The `Repos` tree now displays the file count (for directories) and backlink count (for wiki files) as inline node descriptions.\n- The `delete_repo` authentication scope is no longer requested by default.\n- The `gistpad.playgrounds.autoSave` setting is now defaulted to `false`.\n- Removed the `gistpad.gitSSO` setting, since it's no longer used.\n\n## v0.1.11 (11/26/2020)\n\n- Updated the `Repositories` tree to always show\n- Renamed the `Active Gist` tree to `Playground`\n\n## v0.1.10 (11/25/2020)\n\n- Replaced the token-based auth with support for VS Code's native GitHub authentication\n- The `Repositories` view is now always visible whenever you're signed in.\n- Removed the `GistPad: Sign Out` command in favor of just signing out of your GitHub account with VS Code\n- Renamed the `Manage Repository` command to `Open Repository`, and the `Stop Managing Repository` command to `Close Repository`\n- Removed the `Reply...` textbox from the comment UI for wiki backlinks and playground tutorial readme's\n\n## v0.1.9 (11/14/2020)\n\n- The `Showcase` view is now collapsed by default\n- The `Copy GitHub URL` command is now available on the editor tab for gist files\n- Added a new group type called `flash-card` that groups FlashCode decks\n- Removed the dependency on `CodeTour`\n\n## v0.1.8 (07/13/2020)\n\n- Added support for creating repos from repo templates\n- Wiki pages are now automatically created when clicking on a document link\n- Added support for the `Paste Image` command for public repos\n- Added support for uploading local files to repos\n- Updated the default file name for gist scratch notes\n- Fixed the `Gists` tree, to display themed icons for directory nodes (e.g. the `images` folder)\n- Added the new `GistPad > Wikis > Daily > Title Format` setting, to control how new daily pages are titled\n\n## v0.1.7 (07/12/2020)\n\n- Updated the tree icons for repositories and wikis\n- Repository nodes are now auto-expanded by default\n- Added support for Foam workspaces\n\n## v0.1.6 (07/11/2020)\n\n- Fixed a performance issue when trying to edit large markdown files\n\n## v0.1.5 (07/11/2020)\n\n- Added support for wiki repositories w/support for completion, hovers, links and backlinks\n- Added a new \"diagram\" gist group type, that includes gists with Drawio diagrams in it\n- Added the Markdown Checkbox and Emojisense extensions as optional dependencies\n\n## v0.1.4 (07/04/2020)\n\n- Added the ability to switch repo branches\n- Added the ability to create new repos\n- A progress indicator is now displayed when renaming a gist file\n\n## v0.1.3 (06/30/2020)\n\n- Added support for managing repo branches\n- Added support for deleting repositories _(Note: This requires you to sign-in with a token that includes the `delete_repo` scope)_\n- Added support for playing/recording [CodeTours](https://aka.ms/codetour) for a managed repo\n- When you manage a repo, it's `README` is automatically opened to make onboarding easier\n- Renaming and deleting repo files now correctly updates any opened editors\n- The new file is automatically opened when duplicating a file\n- Editor windows are automatically closed when unmanaging the repo they're associated with\n- Updated the `gistpad.gitSSO` setting to be `false` by default, due to some issues that some users were running into\n\n## v0.1.2 (06/17/2020)\n\n- Added support for automatically syncing and merging changes with repo files\n\n## v0.1.1 (06/15/2020)\n\n- Fixed a bug with exporting some gists to repos\n\n## v0.1.0 (06/15/2020)\n\n- Added the ability to manage repositories in addition to gists\n\n## v0.0.68 (05/11/2020)\n\n- Fixed the `Duplicate Gist` command to work for gists that include binary files (e.g. images)\n- Removed the `Gists` view from the `Explorer` tab, so that the entire GistPad experience is driven from the `GistPad` tab\n- The `Starred Gists` node is now expanded by default (thought it's only shown if you actually have any starred gists)\n- The `Paste Gist File` command is now available in the command palette.\n- Update the extension to always activate, as opposed to waiting until a command is run.\n\n## v0.0.67 (05/01/2020)\n\n- Added support for extensions to contribute custom markup languages for playgrounds, which supports the new [`GistPad Contrib` extension](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistpad-contrib).\n- Introduced a new \"welcome view\" to the `GistPad` tree, which should improve new user onboarding.\n\n## v0.0.66 (04/10/2020)\n\n- Contributed the `Export Tour to Gist...` command to the `CodeTour` tree, which is available when you have the `CodeTour` extension installed.\n- Added a new `tour` gist type, that represent gists`created by exporting a`CodeTour` as a gist. When you open tour gists, it will start playing the embedded tour.\n- User gists are now properly grouped after you follow a new user\n\n## v0.0.65 (04/06/2020)\n\n- When duplicating a file, you're now asked to specify the name of the new file before it's created. This prevents you from needing to duplicate and then rename the file, and therefore, enables the same thing in a single gesture.\n- Updated the \"input tour\" experience to use a custom-GistPad comment experience, as opposed to CodeTour (which isn't neccessary for a single comment affordance).\n- Added support for recording CodeTours for individual tutorial steps, in addition to arbitrary playgrounds.\n\n## v0.0.64 (03/28/2020)\n\n- Introduced support for \"playground config\", which allows you to define a `config.json` file within a playground/tutorial that will be automatically loaded and exposed via a global `window.config` variable.\n- Introduced support for \"playground input\", which allows you to accept user input and run a custom rubric against it, in order to allow user's to \"complete\" a playground/tutorial.\n- Introduced support for a \"playgroud canvas\", which allows you to specify a custom playground experience, using an HTML file that isn't automatically displayed to the end-user.\n- When duplicating a directory, you're now asked to specify the name of the new directory before it's created. This prevents you from needing to duplicate and then rename the directory, and therefore, enables the same thing in a single gesture.\n\n## v0.0.63 (03/15/2020)\n\n- Added integration with the [CodeTour](https://aka.ms/codetour) extension, so that you can record/playback tours for playgrounds.\n- Fixed an issue where GistPad couldn't be installed within the VS Online web editor\n\n## v0.0.62 (03/06/2020)\n\n- Updated scratch notes to be written to directories by default, and introduced the new `GistPad > Scratch Notes: Directory Name Format` setting.\n\n## v0.0.61 (03/01/2020)\n\n- Introduced the concept of \"scratch notes\", which allow you to easily track fleeting/ephemeral notes, along with your \"permanent\" gists.\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75699016-908f0b00-5c64-11ea-95d9-e8c8faf93738.png\" />\n\n## v0.0.60 (02/29/2020)\n\n- Added the `Duplicate File` and `Duplicate Directory` commands to the `Gists` tree.\n\n## v0.0.59 (02/28/2020)\n\n- Introduced the `Export to Repository` command to the `Gists` tree, which allows you export any of your gists to new GitHub repositories\n- Added support for adding `import` statements to playgrounds, without needing to use the `.mjs` extension and/or setting the `scriptType` property in the `playground.json` file.\n\n## v0.0.58 (02/26/2020)\n\n- Fixed a bug where gists without descriptions weren't loading properly\n\n## v0.0.57 (02/25/2020)\n\n- Introduced the ability to add \"tags\" to a gist, and then group gists by those tags\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75264671-9c7e5700-57a4-11ea-9bee-eb61cfb9d2f0.png\" />\n\n## v0.0.56 (02/20/2020)\n\n- Added the ability to group gists by type (e.g. docs, code snippets, playgrounds)\n\n  <img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75098775-3fe62680-556f-11ea-8253-3198b00837e1.png\" />\n\n- Added the ability for extensions to contribute custom viewers\n\n## v0.0.55 (02/20/2020)\n\n- Added a command to submit showcase entries from the `Showcase` view\n\n## v0.0.54 (02/18/2020)\n\n- Introduced the new `Showcase` view in the GistPad tab.\n\n## v0.0.53 (02/17/2020)\n\n- Added support for markdown-based markup files in playgrounds. Simply rename your `index.html` file to `index.md` and you can write playgrounds with Markdown\n- Gist directories can now include spaces in their names, and playground tutorials now allow each step to include a title in their name (e.g. `1 - Intro`)\n- Playgrounds can now consist of only a readme file, which among other thing, is useful for tutorials to include an \"intro\" step that doesn't actually require any code\n\n## v0.0.52 (02/15/2020)\n\n- Introduced support for creating directories within a gist, as well as a new setting called `GistPad > Images: Directory name`, which defines the name of the directory that pasted images are uploaded to.\n\n  <img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/74593846-7b6b7880-4fe4-11ea-9bf8-722bf7887ef1.png\" />\n\n- Introduced the concept of playground \"tutorials\", which allow you to create multi-step playgrounds, based on the new support for gist directories.\n\n  ![MobX](https://user-images.githubusercontent.com/116461/74594741-8d521900-4fee-11ea-97ac-1fdfac132724.gif)\n\n- Added the `View Forks` command to the tree view, which allows you to view a gist's forks\n\n## v0.0.51 (02/08/2020)\n\n- Added support for creating \"temporary playgrounds\", that don't have a backing gist\n- Added support for adding, renaming and deleting files within a temp playground\n- Added the `Delete File` command to the editor context menu\n\n## v0.0.50 (02/07/2020)\n\n- Added a confirmation prompt when attempting to delete gist files\n- Improved the peformance of the `Copy File to Gist`, `Delete Gist`, and `Open Gist` commands\n- Updated playgrounds to treat any `.mjs` file as being a JavaScript module, regardless if the `playground.json` file sets the `scriptType` property to `module` or not.\n- Enabled CodePens to be opened as playgrounds, even if they only include a JavaScript file (e.g. [Lines](https://codepen.io/Dillo/pen/ExjxvxY)).\n- Introduced the ability to add `gist:` links to a playground, which will open/navigate to a file\n\n## v0.0.49 (02/03/2020)\n\n- Introduced the concept of a playground readme, which allows you to define a readme for the playground in markdown, which is then rendered above/below the preview.\n- Added the `Split Left Tabbed` and `Split Right Tabbed` playground layout options.\n\n## v0.0.48 (01/25/2020)\n\n- Enabled playground's to load non-JSON files from their gist. Among other things, this supports playgrounds that need to use CSV/TSV files to load data for their visualuzations (e.g. [Basic US State Map](http://bl.ocks.org/michellechandra/0b2ce4923dc9b5809922))\n- Added the gist count to all top-level tree nodes\n- Added the ``View Gist in Bl.ocks` command to gist nodes that represent block playgrounds.\n- Added a new optional playground gallery called `Blocks` to enable [Bl.ocks](https://bl.ocks.org) development.\n- Added a JSON schema to make it easier to author `gallery.json` files.\n\n## v0.0.47 (01/24/2020)\n\n- Fixed a bug where the `Gists` view on the `Explorer` tab wasn't properly activating the extension\n- Don't ask for a description when an anonymous user creates a playground.\n\n## v0.0.46 (01/18/2020)\n\n- Allow creating temporary playgrounds without having to sign in.\n- Added UI for configuring playground template galleries when creating new playgrounds\n- Introduced the `Basic` and `Languages` template galleries, which allows you to get started quickly with commonly-used web language configurations (e.g. Pug + Less + JS, HTML + SCSS + TS).\n- Added the `Split Bottom` playground layout mode.\n\n## v0.0.45 (01/17/2020)\n\n- Added support for JavaScript modules, which allows you to `import` other modules, using either an [absolute URL](https://www.pika.dev/cdn), or a relative path to another JavaScript module in the gist. See an example [here](https://gist.github.com/lostintangent/21727eab0d79c7b9fd0dde92df7b1f50)\n- Removed the default keybindings, since they were conflicting with other VS Code keybindings\n\n## v0.0.44 (01/06/2020)\n\n- Added the `New Secret Playground` command, which allows you to create playgrounds that are backed by secret gists\n- Introduced the concept of \"playground templates\", which allow you to create new playgrounds from a \"standard\" template (e.g. React.js, Vue), or define your own templates and then create new playgrounds from that over time\n- Added the `Active Gist` view that displays all of the files/actions of the currently open gist. To begin this, this only supports playgrounds, and the view shows/hides itself when you actually have a playground open.\n- Added the new `GistPad > Playgrounds: Include Script` setting, to allow indicating that you don't want a `script.js` file for new playgrounds\n- Updated the `Gists` tree to include icons that indicate the \"type\" of gist (code, playground, jupyter notebook or document), and whether it's public or secret\n- Added an inline action to gist tree nodes that allow you to open them with a single-click\n- Updated the playground auto-save feature, so that it doesn't attempt to run when you're 1) signed out, or 2) have a playground open you don't own\n\n## v0.0.43 (01/05/2020)\n\n- Added support for Sass, in addition to the existing support for SCSS. This was primarily added for improved interop with CodePen (e.g. [3D Texbox](https://codepen.io/jouanmarcel/pen/Powbrgq).\n- Gists can now be opened (via the `Open Gist` command) using either the `username/id` format or any URL whose path ends with that (e.g. `http://bl.ocks.org/simzou/6459889`)\n- Added keyboard shortcuts for opening a gist and creating new public gists\n- Added the `Open Gist` command to the `Your Gists` node in the `Gists` view\n- Added the `GistPad: Refresh Gists` command to the command palette (in addition to the title bar of the `Gists` view)\n- Added the `Copy GistPad URL` command to gist nodes in the `Gists` view\n- Updated the `Copy File to Gist` command to support multi-select in both the `Gists` view and the file explorer\n- Added support for `XMLHttpRequests` calls in playgrounds, inlcuding the ability to request relative paths in your Gist (e.g. [US Map of Nielsen Media Markets](http://bl.ocks.org/simzou/6459889))\n- Added support for referencing JavaScript and CSS files in your playgrounds via `<script />` and `<link />` tags (e.g. [Fantasy Map Generator](http://bl.ocks.org/Azgaar/b845ce22ea68090d43a4ecfb914f51bd))\n- Fixed the `Save All` command when you've edited multiple files in the same gist\n\n## v0.0.42 (01/02/2020)\n\n- Added support for fully round-tripping external scripts/stylesheets from CodePen, and fixed a caching issue when exporting the same playground multiple times in a short timespan\n- Fixed a bug with viewing starred gists, when you had a starred gist from an anonymous user\n\n## v0.0.41 (01/01/2020)\n\n- Added the `Upload File(s)...` command to gist nodes in the `Gists` view, which allows easily uploading one or more local files to a gist\n- Added the ability to star your own gists\n- Updated the `Starred Gists` list to use the same display name formatting and sorting as the `Your Gists` and followed user lists\n- Added the ability to paste images into HTML and Pug files\n- Removed the `Add Active File` command from gist nodes in the `Gists` view, in favor of the `Copy File to Gist` command that's available in the `Explorer` view and on the editor tab's context menu\n\n## v0.0.40 (12/31/2019)\n\n- Replaced the `Add Playground Script` and `Add Playground Stylesheet` commands with the `Add Playground Library` command. Additionally, this new command has been added to the \"playground\" toolbar to simplify the process of adding new libraries.\n\n## v0.0.39 (12/31/2019)\n\n- Added the `View Profile in GitHub` command to followed user's in the `Gists` tree view.\n- The tree node for followed users now displays the user's GitHub avatar, instead of the generic user icon.\n- Added the `Rename File` command to the editor title bar, which allows easily renaming opened files, without having to find them in the `Gists` tree and/or using workspace-mode.\n- Added support to the protocol handler for programatically following users (e.g. `vscode://vsls-contrib.gistfs/follow?user=lostintangent`).\n\n## v0.0.38 (12/30/2019)\n\n- Added the ability to star the gist's for user's you're following.\n\n## v0.0.37 (12/30/2019)\n\n- Introduced the `preview` playground layout type, which allows viewing a playground's preview in full-screen mode.\n- Added support for opening playgrounds as workspaces, without needing to be authenticated with GitHub.\n\n## v0.0.36 (12/30/2019)\n\n- Introduced support for defining your playground stylesheets in [Less](http://lesscss.org/), by either renaming your `style.css` file to `style.less` and/or setting the `GistPad > Playground: Stylsheet Language` setting to `less`.\n\n## v0.0.35 (12/29/2019)\n\n- Added the `Change Playground Layout` command, as well as the `GistPad > Playground: Layout` setting, to allow developers to control the layout of the playground editors.\n\n  ![Layout](https://user-images.githubusercontent.com/116461/71560396-5152fc80-2a1e-11ea-9cff-a9590e1ea779.gif)\n\n- Added the `showConsole` and `layout` options to the `playground.json` file, to allow playgrounds to define whether they require specific layout/console behavior.\n\n## v0.0.34 (12/28/2019)\n\n- Introduced the `Duplicate Gist` command to the `Gists` tree view, which allows you to create new gists, based on the contents of an existing one.\n- Added multi-select support to the `Gists` tree view, and added support for the following commands: deleting gists, unstarring gists, deleting gist files, and unfollowing users.\n- The `Starred Gists` node is now hidden in the tree view unless you actually have any starred gists. Additionally, when displayed, this node is collapsed by default.\n\n## v0.0.33 (12/28/2019)\n\n- Introduced auto-save behavior for playgrounds, that will automatically save your playground files every 30s, to ensure you don't lose any work. Additionally, introduced the `GistPad > Playground: Auto Save` setting, to disable auto-save behavior if desired.\n\n## v0.0.32 (12/27/2019)\n\n- Added the `Export Playground to CodePen` menu item to the `Gists` tree, which allows you to develop a playground locally, and then export it to CodePen in order to share with the community.\n\n  ![Export](https://user-images.githubusercontent.com/116461/71533903-39f60100-28b0-11ea-9e16-891a110c7074.gif)\n\n## v0.0.31 (12/27/2019)\n\n- Added support for referencing external stylsheets in a playground's `playground.json` file. Simply add a URL for a CSS file to the `styles` property, and it will be injected into the preview before your playground's custom styles.\n\n- Added the `Add Playground Script` and `Add Playground Stylesheet` commands to the tree view, to make it easy to add new libraries to a playground without needing to actually open the `playground.json` file. Additionally, these commands now allow you to directly paste a URL, in addition to selecting a library from CDNJS\n\n## v0.0.30 (12/26/2019)\n\n- Added the `Copy File to Gist` context menu to gist file node's in the tree view, which allows easily moving files between gists\n\n## v0.0.29 (12/26/2019)\n\n- Added support for SCSS and Pug to playgrounds, so that you can use them as alternatives to CSS and HTML (respectively). Additionally, introduced a new `GistPad > Playground: Stylesheet Language` and `GistPad > Playground: Markup Language` settings, which allows you to configure `pug` and/or `scss` as the default stylesheet/markup languages can for all new playgrounds.\n\n- Improved the CodePen interop with playgrounds by adding support for pens that...\n\n  - Omit an HTML file (e.g. [ZIM Tree Puzzle](https://gist.github.com/lostintangent/5916cb2b62bbfcdcda0ac108a479bfd2))\n  - Reference external stylesheets (e.g. [Hotel Reservation Design](https://codepen.io/FlorinPop17/pen/eYmWRdm))\n  - Use Babel as their scripting language. _Note: Babel support is provided by simply transpiling the Babel code with TypeScript, so there may be some subtle interop problems._\n\n## v0.0.28 (12/24/2019)\n\n- Added support for playgrounds to include relative URLs in their `index.html` file\n- Improved the CodePen interop with playgrounds by adding support for pens that omit a script file, which is neccessary for CodePen interop (e.g. [Loading Liquid Animation](https://codepen.io/prathameshkoshti/pen/MWYmzeM)\n\n## v0.0.27 (12/23/2019)\n\n- Added initial support for opening CodePens that have been exported to Gists\n\n  ![CodePen](https://user-images.githubusercontent.com/116461/71393589-171ed080-25c2-11ea-8138-ba075daf7d37.gif)\n\n## v0.0.26 (12/22/2019)\n\n- Introduced the concept of \"playground libraries\", which allow you to include JavaScript libraries into a playground, by simply adding their URL to the `scripts` property in the playground's `playground.json` file.\n\n- Added support for `.jsx` and `.tsx` files within a playground. If you rename your `script.js` file to one of these extensions, then you can include JSX in the file and it will be automatically compiled. Additionally, the `GistPad > Playground: Script Language` setting now supports two new values: `javascriptreact` and `typescriptreact`. Finally, in order to simplify React-based playgrounds, the `react` and `react-dom` libraries will be automatically injected into React-based playgrounds.\n\n- Added support for `console.log` in web playgrounds. When you open a playground, it will create a new `GistPad Playground` output pane and any calls to `console.log` within your playground will be written to it. By default, the console isn't automatically displayed, but you can either manually open it, or run the `GistPad: Open Playground Console` command.\n\n  ![console](https://user-images.githubusercontent.com/116461/71329302-49540380-24d8-11ea-900c-afbf84b50da9.gif)\n\n* Introduced the `GistPad > Playground: Auto Run` setting, which allows you to control when playground code is run. Additionally, we added the `GistPad: Run Playground` command, which allows you to manually run a playground.\n\n* Added the `Add Document to Gist` command to the editor's context menu (e.g. when you right-click the editor tab).\n\n## v0.0.25 (12/21/2019)\n\n- Added the ability to sort Gists alphabetically, in addition to the default sort behavior of updated time.\n\n## v0.0.24 (12/21/2019)\n\n- Added support for web playgrounds without HTML and/or CSS files. If you don't need them (e.g. because you're primarily using playgrounds for JS dev), then you can delete the files from the playground and everything will still work. Additionally, you can set the `GistPad > Playground: Include Stylesheet` or `GistPad > PlayGround: Include Markup` settings to `false` in order to suppress these files from future playgrounds.\n- Fixed markdown files to open in edit mode by default as opposed to preview mode.\n\n## v0.0.23 (12/18/2019)\n\n- Added support for TypeScript to web playgrounds. Simply rename the `script.js` file to `script.ts` and the code will be transparently compiled for you as you code. Additionally, you can set the `GistPad: Playground Script Language` setting to `typescript` in order to create an `script.ts` file for all new playgrounds.\n\n  ![TS](https://user-images.githubusercontent.com/116461/71221927-414f5600-2283-11ea-81a7-2331fc85185b.gif)\n\n## v0.0.22 (12/18/2019)\n\n- Introduced the concept of a Gist \"Web Playground\", which allows you to do rapid prototyping of web front-end code, that's backed by a Gist\n\n  ![Playground](https://user-images.githubusercontent.com/116461/71195678-47254700-2243-11ea-9b09-aa28ec526185.gif)\n\n- Updated the `Delete Gist` command, to automatically close all opened editors that were associated with the deleted gist\n- Fixed a bug where the `Gists` tree view sometimes not rendering properly\n- Fixed a bug in the `Open Gist as Workspace` command that would open the Gist files multiple times\n\n## v0.0.21 (12/15/2019)\n\n- Improving auth reliability, by detecting whether or not a specified token includes the `gist` scope or not.\n\n## v0.0.20 (12/15/2019)\n\n- Introduced support for SSO with the `git` CLI, when you've authenticated with github.com. To disable this, you can set the new `GistPad: Git SSO` setting to `false`.\n\n## v0.0.19 (12/15/2019)\n\n- Added the `Open Profile in GitHub` context menu to the `Your Gists` tree node, which allows opening your Gist profile page\n- Added the `Open GistLog Feed` context menu to the `Your Gists` tree node, which allows opening your GistLog feed page\n\n## v0.0.18 (12/14/2019)\n\n- Introduced support for creating [GistLog](https://gistlog.co) posts via a new `GistPad: New GistLog` command\n\n  ![GistLog](https://user-images.githubusercontent.com/116461/70856110-fdc3a900-1e8a-11ea-8e26-2c3917e11db0.gif)\n\n- Added a new `Open Gist in GistLog` context menu to gists, that allows you to view an existing Gist on [GistLog](https://gistlog.co)\n- Exposed the `New Public Gist`, `New Secret Gist` and `New GistLog` commands via the context menu on the `Your Gists` tree node\n- Introduced a new `Gistpad: Show Comment Thread` configuration option, that allows you to configure when the Gist comment thread UI is displayed.\n\n## v0.0.17 (12/12/2019)\n\n- Added a new `Open Gist in NbViewer` context menu to gists, that allows you to open Gists with Jupyter Notebooks in the [Jupyter Nbviewer](https://nbviewer.jupyter.org/)\n- Fixed a bug, that impacted Gist files with special characters in their name (e.g. `*`, `?`)\n- Fixed a bug with comment threads, that ensure they're always displayed at the bottom of the file, even after making edits\n\n## v0.0.16 (12/11/2019)\n\n- Added a new `Clone Repository` context menu to gists, that allows you to clone a gist's repository locally\n- Introduced a new `gistpad.apiUrl` setting, which allows users to use GitHub Enterprise servers\n\n## v0.0.15 (12/08/2019)\n\n- Added support for opening image files in a Gist, and viewing their preview\n- Added a new `Copy URL` context menu item to Gist files, in order to quickly get their \"raw URL\"\n- Add the ability to open gists with a custom protocol handler:\n\n  - `Using gist URL`: vscode://vsls-contrib.gistfs/open-gist?url=https://gist.github.com/legomushroom/b01737ed99192dab436adea1d6d92975\n  - `Using gist Id`: vscode://vsls-contrib.gistfs/open-gist?id=b01737ed99192dab436adea1d6d92975\n\n## v0.0.14 (12/07/2019)\n\n- \ud83d\uddbc\ufe0f Implement the `Paste Screenshot` command that allows to paste a screenshot from your clipboard into the gist.\n\n  ![paste-screenshot](https://user-images.githubusercontent.com/1478800/70382701-9a7ac980-1914-11ea-9fb0-6e55424e2e54.gif)\n\n- Removed the extension dependencies, and simply document them as being recommended in the readme\n\n## v0.0.13 (12/07/2019)\n\n- Gists are now sorted by their last update time, not alphabetically (in both the tree view and command palette)\n\n## v0.0.12 (12/02/2019)\n\n- Added the ability to view, add, edit and delete comments within the editor \ud83c\udf89\n\n  <img width=\"783\" src=\"https://user-images.githubusercontent.com/116461/70117955-a9633280-161b-11ea-88a5-ac8a15a3b7a0.png\" />\n\n- Added an extension dependency on the [Markdown All in One](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one) extension\n- Allow specifying a Gist URL in addition to an ID when opening a Gist\n\n## v0.0.11 (11/30/2019)\n\n- Added an extension dependency on the [GitHub Markdown Preview](https://marketplace.visualstudio.com/items?itemName=bierner.github-markdown-preview) extension, so that the VS Code markdown preview behaves similarly to GitHub's.\n\n## v0.0.10 (11/30/2019)\n\n- Added a new `Paste Gist File` command to the editor's context menu, which allows you to paste a Gist file into the active editor\n\n## v0.0.9 (11/29/2019)\n\n- Introduced the ability to follow users, so you can browser/access/fork their Gists directly from the `Gists` view\n\n     <img width=\"252\" src=\"https://user-images.githubusercontent.com/116461/69890797-c03e1800-12ef-11ea-85be-7d6fe2c8c7ef.png\" />\n\n* Added a new `Open Gist in Browser` command to the `Gists` view, which opens a Gist in your default browser\n* Added a new `Copy Gist URL` command to the `Gists` view, which allows you to copy a Gist's URL to your clipboard\n\n## v0.0.8 (11/29/2019)\n\n- Added a new `Add Selection to Gist` command to the editor context menu. This allows you to add a snippet of code to a Gist, instead to an entire document (via the `Add Document to Gist`).\n- Updated the `Gists` view to use the description as the Gist label (or it's file name if there isn't a description)\n\n## v0.0.7 (11/28/2019)\n\n- Added a new `Add Document to Gist` command to the context menu of both the `Explorer` tree and the document editor. This way you can easily add files to a gist\n\n  <img width=\"260px\" src=\"https://user-images.githubusercontent.com/116461/69831695-58001100-11df-11ea-997e-fc8020556348.png\" /> <img width=\"400px\" src=\"https://user-images.githubusercontent.com/116461/69831691-53d3f380-11df-11ea-8578-266e27ec4d43.png\" />\n\n- Added the `Copy Contents` command to the `Gists` view, which allows you to copy file contents and paste them into other files\n- Updated the `Add Active File` command within the `Gists` view to support \"untitled\" files\n\n## v0.0.6 (11/28/2016)\n\n- Renamed the existing from `GistFS` to `GistPad`, to best reflect it's purpose\n- Introduced a `GistPad` tab, to allow you choose between managing Gists in it's own side-bar, or via the `Gists` view on the `Explorer` tab\n- Added the `Change Description` command to the `Gists` view, which allows changing an existing Gist's description\n- Added the `Rename File` command to the `Gists` view, which allows renaming an existing file in a Gist\n- Added the `Add Active File` command to the `Gists` view, which allows \"uploading\" the active editor to the specified Gist\n- Remove the username prefix from the display name of your own Gists\n- Added a lock icon (\ud83d\udd12) suffix to the display name of secret Gists\n\n## v0.0.5 (11/27/2019)\n\n- Introduced the `Gists` view to the `Explorer` tab, which allows you to manage/access your Gists from a single place\n\n     <img width=\"300px\" src=\"https://user-images.githubusercontent.com/116461/69827991-d56f5580-11ce-11ea-9081-17f27b470fd1.png\" />\n\n## v0.0.4 (11/27/2019)\n\n- Improved the `GistPad: Delete Gist` command, by allowing you to select a Gist from your list of Gists, instead of just providing a Gist ID\n- Improved the `GistPad: Open Gist` command, by allowing you to select one of your Gists from a list, instead of just providing a Gist ID\n- Updated the default behavior of opening gists, to open them as \"loose files\" instead of as a workspace\n- Introduced a new `GistPad: Open Gist as Workspace` command, which behaves the same as `GistPad: Open Gist`, but opens the Gist as a workspace instead of \"loose files\"\n- Added support for being able to seed multiple files when creating a Gist, by specifying a comma-separated list of files names\n- Added a progress indicator when creating a new Gist\n- Introduced a new `GistPad: Sign In` command, to explicitly sign in to your GitHub account\n- When opening the files for a Gist, Markdown files are now displayed in preview mode by default\n\n## v0.0.3 (11/26/2019)\n\n- Introduced the `GistPad: List Gists` command, which lets you view your list of gists and then open one\n- Introduced the `GistPad: Starred Gists` command, which lets you view your starred of gists and then open one\n\n## v0.0.2 (11/25/2019)\n\n- Replaced the `GistPad: New Gist` command with the following commands, in order to simplify Gist creation: `GistPad: New Gist (Public)`, `GistPad: New Gist (Secret)`\n\n## v0.0.1 (11/24/2019)\n\nInitial release! \ud83c\udf89\n", "# GistPad \ud83d\udcd8\n\nGistPad is a Visual Studio Code extension that allows you to edit GitHub [Gists](https://gist.github.com/) and repositories from the comfort of your favorite editor. You can open, create, delete, fork and star gists and repositories, and then seamlessly begin editing files **as if they were local**, without ever cloning, pushing or pulling anything. It's like your very own developer library for building and referencing code snippets, commonly-used config/scripts, programming-related notes, [knowledge bases](#wikis) and [interactive samples](#codeswing).\n\n<img src=\"https://user-images.githubusercontent.com/116461/69910156-96274b80-13fe-11ea-9be4-d801f4e9c377.gif\" width=\"750px\" />\n\n## Table of Contents\n\n- **[Getting Started](#getting-started)**\n- **[Gist Management](#gist-management)**\n  - [Sorting and grouping](#sorting-and-grouping)\n  - [Files and Directories](#files-and-directories)\n  - [Commenting](#gist-commenting)\n  - [Pasting Images](#pasting-images)\n  - [Following Users](#following-users)\n  - [Exporting to Repositories](#exporting-to-repositories)\n  - [Scratch Notes](#scratch-notes)\n  - [Showcase](#showcase)\n  - [GistLog](#gistlog)\n- **[Repository Management](#repositories)**\n  - [Branches](#branches)\n  - [Wikis](#wikis)\n- **[CodeSwing](#codeswing)**\n- **[Contributed Commands](#contributed-commands-file-explorer)**\n- **[Configuration Settings](#configuration-settings)**\n\n## Getting Started\n\n1. Install this extension from the marketplace and then reload VS Code\n\n1. Open the `GistPad` tab _(look for the notebook icon in the activity bar)_. From there, you can open a Gist or GitHub repo by ID/URL, or sign in with a GitHub account in order to manage your [gists](#gist-management) and [repositories](#repositories).\n\n   To sign-in, simply click the `Sign In` button and follow the provided flow in order to authenticate with your GitHub account.\n\nFrom here, you can create and edit [gists](#gist-management), [repositories](#repositories), [wikis](#wikis) and [runnable code samples](#codeswing). Have fun and let us know how we can make your knowledge management experience even more awesome \ud83d\ude4c\n\n## Gist Management\n\nIn order to create a new gist, simply open up the `Gists` tree in the `GistPad` tab, and click the `+` icon in the toolbar and specify the description and files to seed it with (including support for [directories](#files-and-directories)!). Additionally, you can create gists from local files or snippets, by right-clicking them in the `Explorer` tree, or right-clicking an editor window/tab, and selecting `Copy File to Gist`, `Add Selection to Gist` or `Paste Gist File Contents` ([details](#contributed-commands-editor))\n\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/69903980-98819b00-1355-11ea-913b-c51981891bcd.png\" />\n\n> Alternative, you can run the `GistPad: New Gist` and `GistPad: New Secret Gist` commands to create gists.\n\nFrom here, you can edit gist files by expanding the gist and clicking the desired file. Furthermore, you can open, rename, delete, etc. gists by right-clicking them in the tree and using one of the provided commands.\n\n### Sorting and Grouping\n\nBy default, the `Gists` tree sorts gist by their update-time, which allows you to focus on the most recently used gists. However, if you'd like to sort your gists alphabetically, you can click the sort toggle button on the `Gists` tree's toolbar.\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75098896-65276480-5570-11ea-9880-a76347a15f73.png\" />\n\nAdditionally, by default, your gists are displayed as a flat list. However, if you'd like to group them by type, you can click the group toggle button on the `Gists` tree's toolbar.\n\n <img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75098775-3fe62680-556f-11ea-8253-3198b00837e1.png\" />\n\n#### Gist Types\n\nWhen grouping is enabled, gists are grouped into the following built-in types:\n\n- **note** - Gists that are composed of nothing but `.txt`, `.md`/`.markdown` or `.adoc` files\n- **notebook** - Gists that are compose of nothing by Jupyter Notebook files (`.ipynb`)\n- **code-swing** - Gists that include either a `codeswing.json` file and/or an `index.html` file. Read more about swings [here](#codeswing).\n- **code-swing-template** - Swings whose `codeswing.json` file sets the `template` property to `true`. Read more about swing templates [here](#user-templates).\n- **code-swing-tutorial** - Swings whose `codeswing.json` file specifies a `tutorial` property. Read more about tutorials [here](#tutorials).\n- **code-tour** - Gists that include a `main.tour` file, and were created by exporting a [CodeTour](#codetour).\n- **diagram** - Gists that include a `.drawio` file.\n- **flash-code** - Gists that include a `.deck` file.\n- **code-snippet** - Gists that don't match any of the above more-specific types.\n\nAdditionally, if you want to group gists by your own custom types, then simply add a tag to the end of the gist's description, using the following format: `#tag` (or `#tag-name`). Then, when you enable grouping of gists, your gists will be grouped by both the aforementioned types, as well as your custom tag types. You can identify tag groups by the use of the `#` icon next to them.\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75264671-9c7e5700-57a4-11ea-9bee-eb61cfb9d2f0.png\" />\n\n### Files and Directories\n\nWhen you create a gist via the `New Gist` (or `New Secret Gist`) command, you can specify a comma-separated list of file names to seed the gist with. Furthermore, you could add `/` to your filenames, in order to add them to a sub-directory within the gist. For example, if you create a new gist, and specify `todos/personal.txt,todos/work.txt,reminders.txt`, the gist will include a `reminders.txt` file at the root of the gist, and `personal.txt` and `reminders.txt` files within a new directory called `todos`.\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/74593846-7b6b7880-4fe4-11ea-9bf8-722bf7887ef1.png\" />\n\nAt any time, you can add new files to a gist or directory by right-clicking them and selecting `Add New File(s)` or `Upload File(s)`. You can also rename/delete directories as well, by right-clicking them in the tree and selecting the appropriate command. If you'd like to move a file from one directory to another, simply right-click the file, select `Rename File` and edit the directory name that it's in. It's that simple!\n\n### Gist Commenting\n\nGist comments are exposed within the editor at the bottom of any opened Gist files. If a Gist includes multiple files, then the comment thread will be displayed at the bottom of them all (duplicated and synchronized).\n\n<img src=\"https://user-images.githubusercontent.com/116461/70118599-42467d80-161d-11ea-85eb-7f4cc6e4006b.gif\" width=\"700px\" />\n\nIf you're not authenticated, you can view existing comments, but you can't reply to them. If you are authenticated, you can add/reply, as well as edit/delete your own comments. In order to control the behavior of how Gist comment threads are displayed, refer to the `GistPad > Comments: Show Thread` config setting.\n\n### Pasting Images\n\nIn order to make it easy to author markdown and HTML/Pug files that include image assets, you can copy images into your clipboard (e.g. taking a screenshot, clicking `Copy Image` in your browser, etc.) and then paste them directly into a gist file by right-clicking the editor and selecting `Paste Image`, or using one of the following keyboard shortcuts: `ctrl + shift + v` _(Windows/Linux)_,`cmd + shift + v` _(macOS)_.\n\n![paste-image](https://user-images.githubusercontent.com/1478800/70382701-9a7ac980-1914-11ea-9fb0-6e55424e2e54.gif)\n\nBy default, when you paste an image into a Gist file, it's uploaded as a `.png` to the gist, and the appropriate reference is added to it from the document (e.g. inserting an `<img />`). However, this behavior can be changed by using the `GistPad > Images: Paste Format` and/or `GistPad > Images: Paste Type` settings. Refer to the [config settings](#configuration-settings) section below for more details.\n\nBy default, when you paste an image, it is uploaded to a directory called `images` within the gist. However, if you'd like to change this (e.g. to `assets` instead), you can set the `GistPad > Images: Directory Name` setting.\n\n### Following Users\n\nGitHub Gists already allows you to star other user's gists, and when you do that, those will appear in the `Gists` tree, underneath a `Starred Gists` node. However, if you want to follow a GitHub user, and easily browse all of their current and future gists (without having to star each one!), you can run the `GistPad: Follow User` command and specify their GitHub user name. Once you've done that, you'll see a new node in the `Gists` tree which displays all of their public gists, and allows you to open/fork/clone/star them just like any other gist.\n\n<img width=\"252\" src=\"https://user-images.githubusercontent.com/116461/69890797-c03e1800-12ef-11ea-85be-7d6fe2c8c7ef.png\" />\n\n### Exporting to Repositories\n\nAt some point, your code/notes might outgrow the feature set offered by Gists (e.g. when you want to start collaborating on the content with other developers). In that event, you can simply right-click the gist, and select the `Export to Repository` command in order to create a new GitHub repository, that contains the content of your gist. The created repo will be public or private, depending on the public/private state of the exported gist.\n\n### Scratch Notes\n\nTo make it easy to capture ephemeral/fleeting notes as you learn new things throughout the day, GistPad allows you to create \"scratch notes\" by clicking the `New scratch note...` command under the `Scratch Notes` node in the `Gists` tree (or running the `GistPad: New Scratch Note` command). A scratch note is simply a text document, whose name is formatted based on the day/time it was created.\n\nBy default, scratch notes create Markdown documents, but you can customize that behavior (e.g. to create text/AsciiDoc/etc. files) by customizing the `GistPad > Scratch Notes: File Extension` setting. Furthermore, scratch notes are created per day, but you can customize this by setting the `GistPad > Scratch Notes: Directory Format` and `GistPad > Scratch Notes: File Format` settings.\n\nIn order to help differentiate scratch notes from your \"permanent notes\", scratch notes appear as children of a top-level `Scratch Notes` node in the `Gists` tree. This makes it easy to view your outstanding scratch notes, so you can periodically audit them, in order to migrate any meaningful content to a more appropriate location (e.g. a new or existing gist).\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75699016-908f0b00-5c64-11ea-95d9-e8c8faf93738.png\" />\n\nYou can create as many scratch notes as you need, and when you're done with them, you can delete individual notes and/or clear all of your notes by right-clicking the `Scratch Notes` node in the tree and selecting `Clear Scratch Notes`.\n\n> Behind the scenes, scratch notes are simply files that are managed within a \"special\" secret gist on your behalf. This way, you can focus entirely on the ephemeral nature of the notes, and not worry about creating/deleting gists.\n\n### Showcase\n\nIn order to illustrate what you can do with gists and [code swings](#codeswing), as well as keep up-to-date with the cool stuff that folks in the community are building, you can check out the `Showcase` view in the `GistPad` tab. This shows a list of categories, which are meant to highlight different use cases for gists, along with some examples. Simply click the `Open` button for any gist in order to explore it, or expand the gist to see its file contents. If you have a gist that you think is worth showcasing, please open an issue and let us know about it. Otherwise, we'll keep the showcase updated periodically, to highlight new and interesting things. So stay tuned!\n\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/74891549-2c9f4500-533c-11ea-9bbb-c5907d41a589.png\" />\n\n### GistLog\n\nIn addition to being able to use Gists to share code snippets/files, you can also use it as a mini-blog, thanks to integration with [GistLog](https://gistlog.co). In order to start blogging, simply run the `GistPad: New GistLog` command, which will create a new Gist that includes two files: `blog.md` and `gistlog.yml`.\n\n![GistLog](https://user-images.githubusercontent.com/116461/70856110-fdc3a900-1e8a-11ea-8e26-2c3917e11db0.gif)\n\nThe `blog.md` file will be automatically opened for editing, and as soon as you're ready to publish your post, open `gistlog.yml` and set the `published` property to `true`. Then, right-click your Gist and select the `Open Gist in GistLog` menu. This will open your browser to the URL that you can share with others, in order to read your new post.\n\nIn addition to being able to view individual posts on GistLog, you can also open your entire feed by right-clicking the `Your Gists` tree node and selecting the `Open Feed in GistLog` menu item. This will launch your GistLog landing page that displays are published GistLog posts.\n\n## Repositories\n\nIn addition to managing gists, GistPad also allows you to create and edit GitHub repos without needing to clone anything locally. To get started, run the `GistPad: Open Repository` command, and specify/select the name of the repo you'd like to start managing. If you want to create a new repo, then select the `Create new repo` or `Create new private repo` options, then specify the name of the repo.\n\nAfter running this command, you'll see a new `Repositories` tree in the `GistPad` tab, which displays the selected repo(s). From here, you can add/upload/edit/delete/rename files, and behind the scenes, your edits will be translated into commits on the respective repo. GistPad will automatically keep your data in sync with GitHub, so you never have to think about pushing or pulling. You can just focus on editing \ud83d\ude80\n\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/87234682-46dbcd00-c388-11ea-9c57-6ce0e8c3105a.png\" />\n\n> Note: Once you're managing at least one repository, you can create/manage new repositories by clicking the `+` icon in the toolbar of the `Repositories` tree.\n\n### Directories\n\nIn order to create new directories, simply add a new file and include the directory names in the specified file's path (e.g. `foo/bar/baz.md`). GistPad will then create any necessary directories as part of the file creation process. Furthermore, if you want to move a file from one directory to another, simply right-click the file in the `Repositories` tree, select `Rename File`, and then specify the new directory name in the file's path.\n\n### Repo Templates\n\nIn addition to creating a new repo \"from scratch\", you can also create a repository from a [repo template](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template). To do this, simply run the `GistPad: Open Repository` command and select the `Create new repo from template` or `Create new private repo from template` options. You'll be presented with some \"well-known\" repo templates to select from, but you can also specify the name of an arbitrary repo template as well.\n\n### Branches\n\nBy default, when you create/manage a repository, GistPad will assume you're interested in editing the `master` branch. However, when managing a repo, you can specify a different branch by appending `#<branch>` to the specified repo name (e.g. `vsls-contrib/gistpad#featureA`). When you're managing a non-master branch, the repo node in the `Repositories` tree will display the branch name.\n\nIf at any time, you want to switch branches, simply right-click the repo node in the `Repositories` tree and select `Switch Branch`. This will let you pick one of the repo's remote branches, as well as create a new branch. When you're done with a branch, simply right-click the repo and select either `Delete Branch` or `Merge Branch`. The later will perform a \"squash merge\" against `master`. Using branches allows you to \"batch\" change sets together, and then apply them in a single/semantic commit.\n\n### Pasting Images\n\nJust like gists, you can copy images into your clipboard (e.g. taking a screenshot, clicking `Copy Image` in your browser, etc.) and then paste them directly into a markdown file by right-clicking the editor and selecting `Paste Image`, or using one of the following keyboard shortcuts: `ctrl+shift+v` _(Windows/Linux)_,`cmd+shift+v` _(macOS)_.\n\nBy default, when you paste an image into a repo file, it's uploaded as a `.png` to the repo, and the appropriate reference is added to it from the document (e.g. an `[title](url)` link). However, this behavior can be changed by using the `GistPad > Images: Paste Format` and/or `GistPad > Images: Paste Type` settings. Refer to the [config settings](#configuration-settings) section below for more details. Furthermore, when you paste an image, it is uploaded to a directory called `images` within the gist. However, if you'd like to change this (e.g. to `assets` instead), you can set the `GistPad > Images: Directory Name` setting.\n\n### Wikis\n\nBy default, when you create/manage a GitHub repository, GistPad will let you edit it like a remotely-accessible \"file system\". However, if you'd like to use the repo as a Roam/Obsidian-like wiki, that's composed of bi-directionally linked markdown pages, then you can indicate that the repo is a wiki in one of the following ways:\n\n1. Including `wiki` in the repo's name (e.g. `lostintangent/gistpad-wiki`)\n1. Adding a `gistpad.json` or `.vscode/gistpad.json` file to the repo itself\n\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/87234704-83a7c400-c388-11ea-90a8-2a660bef4dc5.png\" />\n\n> Note: For interoperability with Foam, GistPad will also identify a repo as a wiki if it includes a `.vscode/foam.json` file.\n\n#### Pages\n\nWikis are composed of \"pages\", which are markdown files that are identified using their `# Heading`, not their underlying file name. As a result, when you add a new page to a wiki, you simply give it a title/heading (e.g. `Todo List`), as opposed to a file path. Behind the scenes, GistPad will create a new markdown file and pre-populate file name and `# Heading` using the specified title.\n\nAdditionally, to make it really simple to add a new wiki page, you can either run the `GistPad: Add Wiki Page` command, or click the notebook icon in your status bar.\n\n<img width=\"75px\" src=\"https://user-images.githubusercontent.com/116461/100490918-7c354d00-30d4-11eb-97d1-28035258656b.png\" />\n\n> Note: While wikis add a \"pages\" abstraction layer on top of repos, they are still repos behind the scenes. As a result, if you like to add an arbitrary [file or directory](#files-and-directories) to your wiki, you can right-click it's node in the tree and select `Add New File`.\n\n#### Daily Pages\n\nIn addition to being able to create topic-oriented pages, GistPad allows you to open your \"today page\" at any time, which makes it easy to keep track of your daily progress and/or journal. To open your current daily page (that represents today), simply click on the calendar icon to the right of the repo node in the `Repositories` tree. This will open a new page, that is titled based on the current date (e.g. `June 24, 2020`), and placed in a directory named `Daily`. If this page doesn't exist, GistPad will create it, otherwise, it will open the existing one.\n\n<img width=\"800px\" src=\"https://user-images.githubusercontent.com/116461/87234721-b356cc00-c388-11ea-946a-e7f9c92258a6.png\" />\n\nAdditionally, to make it really simple to open your \"today page\", you can either run the `GistPad: Open Today Page` command, or click the calendar icon in your status bar.\n\n<img width=\"75px\" src=\"https://user-images.githubusercontent.com/116461/100490937-a981fb00-30d4-11eb-9e69-e7ab9b9bab61.png\" />\n\n> If you'd like to change the name of the directory that daily pages are stored in, you can set the `GistPad > Wikis > Daily: Directory Name` setting. Furthermore, if you want to change the format that is used to title daily pages, you can set the `GistPad > Wikis > Daily: Title Format` setting.\n\n#### Links\n\nIn order to create connections between pages, you can add `[[links]]` to a page. When you type `[[`, GistPad will display a completion list of the name of all existing pages. Furthermore, you can type a new topic/page title, and GistPad will automatically create that page for you.\n\nWhen a page includes `[[links]]`, they will be syntax highlighted, and you can hover over them to quickly see the context of the referenced page. Furthermore, you can `cmd+click` the link in order to directly jump to that page. If the page doesn't already exit, then `cmd+clicking` it will automatically create the page before opening it. This workflow makes it easy to author and navigate the set of pages within your wiki.\n\n<img width=\"800px\" src=\"https://user-images.githubusercontent.com/116461/87234714-96ba9400-c388-11ea-92c3-544d9a3bb633.png\" />\n\n#### Backlinks\n\nWhen you add `[[links]]` to a page, the referenced page automatically detects the \"back link\", and displays it as a child node of the page in the `Repositories` tree. This allows you to navigate `[[links]]` bi-directionallly, and allows your wiki to form a \"network\" of information. Each back link displays a line preview of the reference, and when clicked will automatically navigate you to the page location that references the selected page.\n\nFurthermore, when you open a page that contains backlinks, the set of backlinks will be displayed at the bottom of the page, including a line preview of the backlink. This makes it possible to have pages that don't actually include content themselves, but rather, are simply \"topic aggregators\" to view the connections between pages in the same wiki.\n\n#### Embedding Files\n\nIn addition to adding links to pages, it's sometimes valuable to embed the contents of another page directly into a note, so that you can easily read them together. To do this, you can use the `![[link]]` syntax, where you'll recieve auto-completion support just like regular links. When you use an embed link, the target page's contents will be displayed within the note whenever you view it's markdown preview.\n\n## CodeSwing\n\nIf you're building web applications, and want to create a quick playground environment in order to experiment with HTML, CSS or JavaScript (or [Sass/SCSS, Less, Pug and TypeScript](#additional-language-support)), you can install the [CodeSwing extension](https://aka.ms/codeswing), in order to have a CodePen-like web experience, integrated into VS Code. GistPad provides an integration with CodeSwing, and so once it's installed, you can right-click the `Your Gists` node in the `GistPad` tree and select `New CodeSwing` or `New Secret CodeSwing`. This will create a new gist, seeded with the selected template fiels, and then provide you with a live preview Webview, so that you can iterate on the code and visually see how it behaves.\n\nWhen you create a new swing, you'll be asked to select a template, which is simply a way to get started quickly, using the libraries and languages you intend to use (e.g. React.js, Vue.js). Since the swing is backed by a Gist, your changes are saved and shareable with your friends. Additionally, as you find other swings that you'd like to use, simply fork them and create your own swings. That way, you can use Gists as \"templates\" for swing environments, and collaborate on them with others just like you would any other gist. When you're done with a swing, simply close the preview window and all other documents will be automatically closed. If you no longer need the swing, then delete it just like any other gist \ud83d\udc4d\n\n## Contributed Commands (File Explorer)\n\nIn addition to the `Gists` view, GistPad also contributes an `Copy File to Gist` command to the context menu of the `Explorer` file tree, which allows you to easily add local files to a new or existing Gist.\n\n<img width=\"260px\" src=\"https://user-images.githubusercontent.com/116461/69831695-58001100-11df-11ea-997e-fc8020556348.png\" />\n\n## Contributed Commands (Editor)\n\nIn addition to the `Explorer` file tree commands, GistPad also contributes the following commands to the editor's context menu:\n\n- `Add Selection to Gist` - Allows you to add a snippet/selection of code to a Gist, instead of the entire document\n\n- `Paste Gist File` - Allows you to paste the contents of a Gist file into the active editor\n\n- `Paste Image` - Allows you to paste an image from your clipboard into a markdown, HTML or Pug file. The command will automatically upload the image and then add a reference to it.\n\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/69903980-98819b00-1355-11ea-913b-c51981891bcd.png\" />\n\nThe `Copy File to Gist` command is also available on the editor tab's context menu.\n\n## Contributed Commands (Editor Title Bar)\n\nIn addition to the commands added to the editor context menu, GistPad also contributes the following commands to the editor's title bar menu (click the `...` in the upper right section of an editor window):\n\n- `Rename File` - Allows you to rename the current file.\n\n## Contributed Commands (Command Palette)\n\nIn addition to the `Gists` view, this extension also provides the following commands:\n\n- `GistPad: Delete Gist` - Allows you to delete one of your Gists. If you have a Gist workspace open, it will delete that and then close the folder\n\n- `GistPad: Follow User` - Follow another GitHub user, which allows you to browser/access/fork their Gists from within the `Gists` view.\n\n- `GistPad: Fork Gist` - Forks the currently opened Gist, and then opens it as a virtual workspace.\n\n- `GistPad: Open Gist` - Displays your list of Gists (if you're signed in), and then opens the files for the selected one. You can also specify a gist by URL, `username/id`, or ID, which doesn't require being signed in.\n\n- `GistPad: Open Gist as Workspace` - Same behavior as the `GistPad: Open Gist` command, but will open the selected Gist as a workspace, instead of \"loose files\".\n\n- `GistPad: New Gist` - Creates a new [public Gist](https://help.github.com/en/enterprise/2.13/user/articles/about-gists#public-gists), and then opens its associated files. If you'd like to seed the gist with multiple files, you can specify a comma-separated list of names (e.g. `foo.txt,bar.js`).\n\n- `GistPad: New Scratch Note` - Creates a new \"scratch note\", which is a file whose name is derived from the `GistPad > Scratch Notes: Extension` and `Gist > Scratch Notes: Format` settings.\n\n- `GistPad: New Secret Gist` - Same behavior as the `GistPad: New Gist (Public)` command, except that it creates a [secret Gist](https://help.github.com/en/enterprise/2.13/user/articles/about-gists#secret-gists).\n\n- `GistPad: New CodeSwing` - Creates a new [CodeSwing](#CodeSwing).\n\n- `GistPad: New GistLog` - Creates a [GistLog](#gistlog).\n\n- `GistPad: Refresh Gists` - Refreshes the gist data and reloads the `Gists` tree.\n\n- `GistPad: Sign In` - Sign-in with a GitHub account, in order to view/edit/delete your Gists.\n\n- `GistPad: Starred Gists` - Lists your starred Gists, and then opens the files for the selected one.\n\n- `GistPad: Paste Gist File - Allows you to paste the contents of a Gist file into the active editor\n\n## Configuration Settings\n\n- `Gistpad: Api Url` - Specifies the GitHub API server to use. By default, this points at GitHub.com (`https://api.github.com`), but if you're using GitHub Enterprise, then you need to set this to the v3 API URL of your GitHub server. This should be something like `https://[YOUR_HOST]/api/v3`.\n\n* `Gistpad: Tree Icons` - Specifies whether to show the gist type icons in the gists tree.\n\n* `GistPad > Comments: Show Thread` - Specifies when to show the comment thread UI whenever you open a Gist file. Can be set to one of the following values:\n\n  - `always`: Always display the comment thread whenever you open a Gist file. You can manually collapse it as needed.\n  - `never`: Never automatically open the comment thread when you open a Gist file. You can manually expand it as needed.\n  - `whenNotEmpty` _(default)_: Automatically display the comment thread whenever there are actually comments in a Gist file. Otherwise, leave it collapsed.\n\n* `Gistpad > Images: Paste Format`: Specifies the markup format to use when pasting an image into a gist file. Can be set to one of the following values:\n\n  - `markdown` _(default)_: Pastes the image reference using `Markdown` format (e.g. `![image](link)`).\n  - `html`: Pastes the image reference using `HTML` format (e.g. `<img src=\"link\" />`). Note, when you paste an image into an HTML file, it will always use this format type, regardless what the setting is.\n\n* `Gistpad > Images: Paste Type`: Specifies the method to use when pasting an image into a gist file. Can be set to one of the following values:\n\n  - `file` _(default)_: The pasted image is uploaded as a `.png` to the gist, and a reference is added to file it's pasted into.\n  - `base64`: The pasted image is base64-encoded and then embedded into the gist file.\n\n* `Gistpad > Images: Upload Directory Name`: Specifies the name of the directory to upload images to. Defaults to `images`.\n\n* `GistPad > Scratch Notes: Directory Format` - Specifies the [moment.js](https://momentjs.com/) format string to use when generating directories for new scratch notes. Defaults to `LL` (e.g. `March 6, 2020`).\n\n* `GistPad > Scratch Notes: File Extension` - Specifies the file extension to use when generating new scratch notes. Defaults to `.md`.\n\n* `GistPad > Scratch Notes: File Format` - Specifies the [moment.js](https://momentjs.com/) format string to use when generating new scratch notes. Defaults to `LT` (e.g. `2:52 PM`).\n\n* `GistPad > Scratch Notes: Show` - Specifies whether or not to display the scratch notes node in the gists tree view. Defaults to `true`.\n\n* `GistPad > Showcase URL` - Specifies the URL to use when displaying the showcase entry. This allows teams/classrooms/etc. to create their own showcase and share it amongst themselves.\n", "{\n  \"name\": \"gistfs\",\n  \"displayName\": \"GistPad\",\n  \"description\": \"Manage your code snippets and developer notes using GitHub Gists and repositories.\",\n  \"publisher\": \"vsls-contrib\",\n  \"version\": \"0.2.6\",\n  \"extensionKind\": [\n    \"ui\",\n    \"workspace\"\n  ],\n  \"icon\": \"images/icon.png\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/lostintangent/gistpad\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/lostintangent/gistpad/issues\"\n  },\n  \"homepage\": \"https://github.com/lostintangent/gistpad#readme\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"vscode\": \"^1.48.0\"\n  },\n  \"categories\": [\n    \"Other\"\n  ],\n  \"keywords\": [\n    \"github\",\n    \"gist\",\n    \"snippets\",\n    \"wiki\",\n    \"notes\"\n  ],\n  \"activationEvents\": [\n    \"*\",\n    \"onFileSystem:repo\",\n    \"onFileSystem:gist\"\n  ],\n  \"main\": \"./out/prod/extension.js\",\n  \"contributes\": {\n    \"configuration\": {\n      \"type\": \"object\",\n      \"title\": \"GistPad\",\n      \"properties\": {\n        \"gistpad.apiUrl\": {\n          \"default\": \"https://api.github.com\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the GitHub server's API URL. By default, this points to GitHub.com, but it can be used to point at a GitHub Enterprise instance.\"\n        },\n        \"gistpad.treeIcons\": {\n          \"default\": \"true\",\n          \"type\": \"boolean\",\n          \"description\": \"Specifies whether to show the gist type icons in the gists tree.\"\n        },\n        \"gistpad.comments.showThread\": {\n          \"default\": \"whenNotEmpty\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"always\",\n            \"never\",\n            \"whenNotEmpty\"\n          ],\n          \"description\": \"Specifies when to display the comment thread when you open a Gist file.\"\n        },\n        \"gistpad.images.directoryName\": {\n          \"default\": \"images\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the name of the directory that pasted images are uploaded to.\"\n        },\n        \"gistpad.images.markdownPasteFormat\": {\n          \"default\": \"markdown\",\n          \"enum\": [\n            \"html\",\n            \"markdown\"\n          ],\n          \"description\": \"Specifies the markup format to use when pasting an image into a markdown gist file.\"\n        },\n        \"gistpad.images.pasteType\": {\n          \"default\": \"file\",\n          \"enum\": [\n            \"base64\",\n            \"file\"\n          ],\n          \"description\": \"Specifies the upload method to use when pasting an image into a gist file.\"\n        },\n        \"gistpad.scratchNotes.directoryFormat\": {\n          \"default\": \"\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the moment.js format string to use when generating new scratch notes.\"\n        },\n        \"gistpad.scratchNotes.fileFormat\": {\n          \"default\": \"LL\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the moment.js format string to use when generating new scratch notes.\"\n        },\n        \"gistpad.scratchNotes.fileExtension\": {\n          \"default\": \".md\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the file extension to use when generating new scratch notes.\"\n        },\n        \"gistpad.scratchNotes.show\": {\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"description\": \"Specifies whether or not to display the scratch notes node in the gists tree view.\"\n        },\n        \"gistpad.showcaseUrl\": {\n          \"default\": \"https://aka.ms/gistpad-showcase\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the URL of the showcase to display gists from.\"\n        },\n        \"gistpad.wikis.daily.directoryName\": {\n          \"default\": \"Daily\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the name of the directory that daily pages are organized within.\"\n        },\n        \"gistpad.wikis.daily.titleFormat\": {\n          \"default\": \"LL\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the date format (using Moment.js syntax) that is used to for the title of daily pages.\"\n        }\n      }\n    },\n    \"commands\": [\n      {\n        \"command\": \"gistpad.addDirectoryFile\",\n        \"title\": \"Add New File(s)\"\n      },\n      {\n        \"command\": \"gistpad.addFile\",\n        \"title\": \"Add New File(s)\"\n      },\n      {\n        \"command\": \"gistpad.addFileToGist\",\n        \"title\": \"Copy File to Gist\"\n      },\n      {\n        \"command\": \"gistpad.addGistComment\",\n        \"title\": \"Add Comment\",\n        \"enablement\": \"!commentIsEmpty\"\n      },\n      {\n        \"command\": \"gistpad.addRepositoryComment\",\n        \"title\": \"Add Comment\",\n        \"enablement\": \"!commentIsEmpty\"\n      },\n      {\n        \"command\": \"gistpad.addRepositoryFile\",\n        \"title\": \"Add New File\",\n        \"icon\": \"$(add)\"\n      },\n      {\n        \"command\": \"gistpad.addSelectionToGist\",\n        \"title\": \"Add Selection to Gist\",\n        \"enablement\": \"editorHasSelection\"\n      },\n      {\n        \"command\": \"gistpad.addWikiPage\",\n        \"title\": \"Add Wiki Page\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(add)\"\n      },\n      {\n        \"command\": \"gistpad.changeGistDescription\",\n        \"title\": \"Change Description\"\n      },\n      {\n        \"command\": \"gistpad.clearScratchNotes\",\n        \"title\": \"Clear Scratch Notes\"\n      },\n      {\n        \"command\": \"gistpad.cloneManagedRepository\",\n        \"title\": \"Clone Repository\"\n      },\n      {\n        \"command\": \"gistpad.cloneRepository\",\n        \"title\": \"Clone Repository\"\n      },\n      {\n        \"command\": \"gistpad.copyFileContents\",\n        \"title\": \"Copy File Contents\"\n      },\n      {\n        \"command\": \"gistpad.copyFileUrl\",\n        \"title\": \"Copy GitHub URL\"\n      },\n      {\n        \"command\": \"gistpad.copyGistPadUrl\",\n        \"title\": \"Copy GistPad URL\"\n      },\n      {\n        \"command\": \"gistpad.copyGistUrl\",\n        \"title\": \"Copy GitHub URL\"\n      },\n      {\n        \"command\": \"gistpad.copyRepositoryFileUrl\",\n        \"title\": \"Copy GitHub URL\"\n      },\n      {\n        \"command\": \"gistpad.copyRepositoryUrl\",\n        \"title\": \"Copy Repository URL\"\n      },\n      {\n        \"command\": \"gistpad.deleteDirectory\",\n        \"title\": \"Delete Directory\"\n      },\n      {\n        \"command\": \"gistpad.deleteFile\",\n        \"title\": \"Delete File\"\n      },\n      {\n        \"command\": \"gistpad.deleteGist\",\n        \"title\": \"Delete Gist\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.deleteGistComment\",\n        \"title\": \"Delete Comment\"\n      },\n      {\n        \"command\": \"gistpad.deleteRepositoryBranch\",\n        \"title\": \"Delete Branch\"\n      },\n      {\n        \"command\": \"gistpad.deleteRepositoryComment\",\n        \"title\": \"Delete Comment\"\n      },\n      {\n        \"command\": \"gistpad.deleteRepositoryDirectory\",\n        \"title\": \"Delete Directory\"\n      },\n      {\n        \"command\": \"gistpad.deleteRepositoryFile\",\n        \"title\": \"Delete File\"\n      },\n      {\n        \"command\": \"gistpad.deleteRepository\",\n        \"title\": \"Delete Repository\"\n      },\n      {\n        \"command\": \"gistpad.duplicateRepositoryFile\",\n        \"title\": \"Duplicate File\"\n      },\n      {\n        \"command\": \"gistpad.duplicateDirectory\",\n        \"title\": \"Duplicate Directory\"\n      },\n      {\n        \"command\": \"gistpad.duplicateFile\",\n        \"title\": \"Duplicate File\"\n      },\n      {\n        \"command\": \"gistpad.duplicateGist\",\n        \"title\": \"Duplicate Gist\"\n      },\n      {\n        \"command\": \"gistpad.editGistComment\",\n        \"title\": \"Edit Comment\"\n      },\n      {\n        \"command\": \"gistpad.editRepositoryComment\",\n        \"title\": \"Edit Comment\"\n      },\n      {\n        \"command\": \"gistpad.openRepository\",\n        \"title\": \"Open Repository\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(add)\"\n      },\n      {\n        \"command\": \"gistpad.exportGistToCodePen\",\n        \"title\": \"Export to CodePen\"\n      },\n      {\n        \"command\": \"gistpad.exportToRepo\",\n        \"title\": \"Export to Repository\"\n      },\n      {\n        \"command\": \"gistpad.exportTour\",\n        \"title\": \"Export Tour to Gist...\"\n      },\n      {\n        \"command\": \"gistpad.followUser\",\n        \"title\": \"Follow User\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.forkGist\",\n        \"title\": \"Fork Gist\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.hideScratchNotes\",\n        \"title\": \"Hide Scratch Notes\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.mergeRepositoryBranch\",\n        \"title\": \"Merge Branch\"\n      },\n      {\n        \"command\": \"gistpad.newGistLog\",\n        \"title\": \"New GistLog\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.newSwing\",\n        \"title\": \"New CodeSwing\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.newScratchNote\",\n        \"title\": \"New Scratch Note\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(add)\"\n      },\n      {\n        \"command\": \"gistpad.newSecretSwing\",\n        \"title\": \"New Secret CodeSwing\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.newPublicGist\",\n        \"title\": \"New Gist\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(add)\"\n      },\n      {\n        \"command\": \"gistpad.newSecretGist\",\n        \"title\": \"New Secret Gist\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(gist-secret)\"\n      },\n      {\n        \"command\": \"gistpad.openGist\",\n        \"title\": \"Open Gist\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(go-to-file)\"\n      },\n      {\n        \"command\": \"gistpad.openGistFile\",\n        \"title\": \"Open Gist File\"\n      },\n      {\n        \"command\": \"gistpad.openGistLogFeed\",\n        \"title\": \"View Feed in GistLog\"\n      },\n      {\n        \"command\": \"gistpad.openGistInBrowser\",\n        \"title\": \"View Gist in GitHub\"\n      },\n      {\n        \"command\": \"gistpad.openGistInBlocks\",\n        \"title\": \"View Gist in Bl.ocks\"\n      },\n      {\n        \"command\": \"gistpad.openGistInGistLog\",\n        \"title\": \"View Gist in GistLog\"\n      },\n      {\n        \"command\": \"gistpad.openGistInNbViewer\",\n        \"title\": \"View Gist in NbViewer\"\n      },\n      {\n        \"command\": \"gistpad.openGistWorkspace\",\n        \"title\": \"Open Gist as Workspace\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.openProfile\",\n        \"title\": \"View Profile in GitHub\"\n      },\n      {\n        \"command\": \"gistpad.openRepositorySwing\",\n        \"title\": \"Open CodeSwing\",\n        \"icon\": \"$(folder-opened)\"\n      },\n      {\n        \"command\": \"gistpad.openRepositoryFileInBrowser\",\n        \"title\": \"View File in GitHub\"\n      },\n      {\n        \"command\": \"gistpad.openRepositoryInBrowser\",\n        \"title\": \"View Repository in GitHub\"\n      },\n      {\n        \"command\": \"gistpad.openTodayPage\",\n        \"title\": \"Open Today Page\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(calendar)\"\n      },\n      {\n        \"command\": \"gistpad.pasteGistFile\",\n        \"title\": \"Paste Gist File\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.pasteImage\",\n        \"title\": \"Paste Image\"\n      },\n      {\n        \"command\": \"gistpad.recordRepoCodeTour\",\n        \"title\": \"Record CodeTour\"\n      },\n      {\n        \"command\": \"gistpad.refreshGists\",\n        \"title\": \"Refresh Gists\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(refresh)\"\n      },\n      {\n        \"command\": \"gistpad.refreshRepositories\",\n        \"title\": \"Refresh Repositories\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(refresh)\"\n      },\n      {\n        \"command\": \"gistpad.refreshShowcase\",\n        \"title\": \"Refresh Showcase\",\n        \"icon\": {\n          \"dark\": \"images/dark/refresh.svg\",\n          \"light\": \"images/light/refresh.svg\"\n        }\n      },\n      {\n        \"command\": \"gistpad.renameDirectory\",\n        \"title\": \"Rename Directory\"\n      },\n      {\n        \"command\": \"gistpad.renameFile\",\n        \"title\": \"Rename File\"\n      },\n      {\n        \"command\": \"gistpad.renameRepositoryDirectory\",\n        \"title\": \"Rename Directory\"\n      },\n      {\n        \"command\": \"gistpad.renameRepositoryFile\",\n        \"title\": \"Rename File\"\n      },\n      {\n        \"command\": \"gistpad.replyGistComment\",\n        \"title\": \"Reply\",\n        \"enablement\": \"!commentIsEmpty\"\n      },\n      {\n        \"command\": \"gistpad.saveGistComment\",\n        \"title\": \"Save\"\n      },\n      {\n        \"command\": \"gistpad.saveRepositoryComment\",\n        \"title\": \"Save\"\n      },\n      {\n        \"command\": \"gistpad.signIn\",\n        \"title\": \"Sign In\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.groupGists\",\n        \"title\": \"Group Gists\",\n        \"icon\": \"$(group-by-ref-type)\"\n      },\n      {\n        \"command\": \"gistpad.ungroupGists\",\n        \"title\": \"Ungroup Gists\",\n        \"icon\": \"$(ungroup-by-ref-type)\"\n      },\n      {\n        \"command\": \"gistpad.sortGistsAlphabetically\",\n        \"title\": \"Sort Gists Alphabetically\",\n        \"icon\": {\n          \"dark\": \"images/dark/sort-alphabetical.svg\",\n          \"light\": \"images/light/sort-alphabetical.svg\"\n        }\n      },\n      {\n        \"command\": \"gistpad.sortGistsByUpdatedTime\",\n        \"title\": \"Sort Gists by Updated Time\",\n        \"icon\": {\n          \"dark\": \"images/dark/sort-time.svg\",\n          \"light\": \"images/light/sort-time.svg\"\n        }\n      },\n      {\n        \"command\": \"gistpad.starGist\",\n        \"title\": \"Star Gist\"\n      },\n      {\n        \"command\": \"gistpad.starredGists\",\n        \"title\": \"Starred Gists\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.startRepoCodeTour\",\n        \"title\": \"Start CodeTour\"\n      },\n      {\n        \"command\": \"gistpad.submitShowcaseEntry\",\n        \"title\": \"Submit Entry\",\n        \"icon\": \"$(megaphone)\"\n      },\n      {\n        \"command\": \"gistpad.switchRepositoryBranch\",\n        \"title\": \"Switch Branch\"\n      },\n      {\n        \"command\": \"gistpad.closeRepository\",\n        \"title\": \"Close Repository\"\n      },\n      {\n        \"command\": \"gistpad.unfollowUser\",\n        \"title\": \"Unfollow User\"\n      },\n      {\n        \"command\": \"gistpad.unstarGist\",\n        \"title\": \"Unstar Gist\"\n      },\n      {\n        \"command\": \"gistpad.uploadFileToDirectory\",\n        \"title\": \"Upload File(s)\"\n      },\n      {\n        \"command\": \"gistpad.uploadFileToGist\",\n        \"title\": \"Upload File(s)\"\n      },\n      {\n        \"command\": \"gistpad.uploadRepositoryFile\",\n        \"title\": \"Upload File(s)\"\n      },\n      {\n        \"command\": \"gistpad.viewForks\",\n        \"title\": \"View Forks\"\n      }\n    ],\n    \"menus\": {\n      \"commandPalette\": [\n        {\n          \"command\": \"gistpad.deleteGist\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.openRepository\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.followUser\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.forkGist\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.signIn\",\n          \"when\": \"gistpad:state != SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.newGistLog\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.newSwing\",\n          \"when\": \"gistpad:state == SignedIn && gistpad:codeSwingEnabled\"\n        },\n        {\n          \"command\": \"gistpad.newPublicGist\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.newSecretGist\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.newScratchNote\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.newSecretSwing\",\n          \"when\": \"gistpad:state == SignedIn && gistpad:codeSwingEnabled\"\n        },\n        {\n          \"command\": \"gistpad.refreshGists\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.refreshRepositories\",\n          \"when\": \"gistpad:hasRepos\"\n        },\n        {\n          \"command\": \"gistpad.starredGists\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.pasteGistFile\",\n          \"when\": \"editorTextFocus\"\n        },\n        {\n          \"command\": \"gistpad.addDirectoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addFileToGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addGistComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addRepositoryComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addRepositoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addSelectionToGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addWikiPage\",\n          \"when\": \"gistpad:state == SignIn && gistpad:hasWiki\"\n        },\n        {\n          \"command\": \"gistpad.changeGistDescription\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.clearScratchNotes\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.cloneManagedRepository\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.cloneRepository\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyGistPadUrl\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyGistUrl\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyRepositoryFileUrl\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyRepositoryUrl\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyFileContents\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyFileUrl\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteGistComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepository\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryBranch\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.duplicateRepositoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.duplicateFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.duplicateDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.duplicateGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.editGistComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.editRepositoryComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.exportGistToCodePen\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.exportToRepo\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.exportTour\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.groupGists\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.hideScratchNotes\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.mergeRepositoryBranch\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.recordRepoCodeTour\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.refreshShowcase\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.starGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.startRepoCodeTour\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistInBlocks\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistInBrowser\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistLogFeed\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistInNbViewer\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistInGistLog\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openProfile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openRepositoryFileInBrowser\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openRepositorySwing\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openRepositoryInBrowser\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openTodayPage\",\n          \"when\": \"gistpad:state == SignIn && gistpad:hasWiki\"\n        },\n        {\n          \"command\": \"gistpad.pasteImage\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.renameDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.renameFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.renameRepositoryDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.renameRepositoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.saveGistComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.saveRepositoryComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.sortGistsAlphabetically\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.sortGistsByUpdatedTime\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.submitShowcaseEntry\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.switchRepositoryBranch\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.unfollowUser\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.ungroupGists\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.closeRepository\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.unstarGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.uploadFileToDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.uploadFileToGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.uploadRepositoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.viewForks\",\n          \"when\": \"false\"\n        }\n      ],\n      \"view/title\": [\n        {\n          \"command\": \"gistpad.newPublicGist\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn\",\n          \"group\": \"navigation@1\"\n        },\n        {\n          \"command\": \"gistpad.newSecretGist\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn\",\n          \"group\": \"navigation@2\"\n        },\n        {\n          \"command\": \"gistpad.sortGistsAlphabetically\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn && gistpad:sortOrder == updatedTime\",\n          \"group\": \"navigation@3\"\n        },\n        {\n          \"command\": \"gistpad.sortGistsByUpdatedTime\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn && gistpad:sortOrder == alphabetical\",\n          \"group\": \"navigation@3\"\n        },\n        {\n          \"command\": \"gistpad.groupGists\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn && gistpad:groupType == none\",\n          \"group\": \"navigation@4\"\n        },\n        {\n          \"command\": \"gistpad.ungroupGists\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn && gistpad:groupType != none\",\n          \"group\": \"navigation@4\"\n        },\n        {\n          \"command\": \"gistpad.refreshGists\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn\",\n          \"group\": \"navigation@5\"\n        },\n        {\n          \"command\": \"gistpad.openRepository\",\n          \"when\": \"view == gistpad.repos\",\n          \"group\": \"navigation@1\"\n        },\n        {\n          \"command\": \"gistpad.refreshRepositories\",\n          \"when\": \"view == gistpad.repos && gistpad:state == SignedIn\",\n          \"group\": \"navigation@2\"\n        },\n        {\n          \"command\": \"gistpad.submitShowcaseEntry\",\n          \"when\": \"view == gistpad.showcase\",\n          \"group\": \"navigation@1\"\n        },\n        {\n          \"command\": \"gistpad.refreshShowcase\",\n          \"when\": \"view == gistpad.showcase\",\n          \"group\": \"navigation@2\"\n        }\n      ],\n      \"view/item/context\": [\n        {\n          \"command\": \"gistpad.newPublicGist\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.newSecretGist\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"inline@2\"\n        },\n        {\n          \"command\": \"gistpad.newPublicGist\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"new@1\"\n        },\n        {\n          \"command\": \"gistpad.newSecretGist\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"new@2\"\n        },\n        {\n          \"command\": \"gistpad.newSwing\",\n          \"when\": \"viewItem == gists && gistpad:codeSwingEnabled\",\n          \"group\": \"newAdvanced@1\"\n        },\n        {\n          \"command\": \"gistpad.newSecretSwing\",\n          \"when\": \"viewItem == gists && gistpad:codeSwingEnabled\",\n          \"group\": \"newAdvanced@2\"\n        },\n        {\n          \"command\": \"gistpad.openGist\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"open@1\"\n        },\n        {\n          \"command\": \"gistpad.openProfile\",\n          \"when\": \"viewItem == gists || viewItem == followedUserGists\",\n          \"group\": \"open@2\"\n        },\n        {\n          \"command\": \"gistpad.openGistLogFeed\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"open@3\"\n        },\n        {\n          \"command\": \"gistpad.openGist\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.openGist\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"base@1\"\n        },\n        {\n          \"command\": \"gistpad.openGistWorkspace\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"base@2\"\n        },\n        {\n          \"command\": \"gistpad.copyGistUrl\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"browse@1\"\n        },\n        {\n          \"command\": \"gistpad.copyGistPadUrl\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"browse@2\"\n        },\n        {\n          \"command\": \"gistpad.openGistInBrowser\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"browse@3\"\n        },\n        {\n          \"command\": \"gistpad.exportGistToCodePen\",\n          \"when\": \"viewItem =~ /^gists.gist.swing$/\",\n          \"group\": \"browse@4\"\n        },\n        {\n          \"command\": \"gistpad.openGistInBlocks\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist.swing.block$/\",\n          \"group\": \"browse@4\"\n        },\n        {\n          \"command\": \"gistpad.openGistInGistLog\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist$/\",\n          \"group\": \"browse@4\"\n        },\n        {\n          \"command\": \"gistpad.openGistInNbViewer\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist.notebook$/\",\n          \"group\": \"browse@4\"\n        },\n        {\n          \"command\": \"gistpad.duplicateGist\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"copy@1\"\n        },\n        {\n          \"command\": \"gistpad.forkGist\",\n          \"when\": \"viewItem =~ /^(starredGists|followedUser).gist/\",\n          \"group\": \"copy@1\"\n        },\n        {\n          \"command\": \"gistpad.cloneRepository\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"copy@2\"\n        },\n        {\n          \"command\": \"gistpad.exportToRepo\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"copy@3\"\n        },\n        {\n          \"command\": \"gistpad.addFile\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.uploadFileToGist\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.changeGistDescription\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"manage@3\"\n        },\n        {\n          \"command\": \"gistpad.deleteGist\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"manage@4\"\n        },\n        {\n          \"command\": \"gistpad.viewForks\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"star@1\"\n        },\n        {\n          \"command\": \"gistpad.starGist\",\n          \"when\": \"viewItem =~ /^(gists|followedUser).gist/\",\n          \"group\": \"star@2\"\n        },\n        {\n          \"command\": \"gistpad.unstarGist\",\n          \"when\": \"viewItem =~ /^starredGists.gist/\",\n          \"group\": \"star@2\"\n        },\n        {\n          \"command\": \"gistpad.unfollowUser\",\n          \"when\": \"viewItem == followedUserGists\",\n          \"group\": \"base@1\"\n        },\n        {\n          \"command\": \"gistpad.copyFileUrl\",\n          \"when\": \"viewItem =~ /^gistFile/\",\n          \"group\": \"base@1\"\n        },\n        {\n          \"command\": \"gistpad.copyFileContents\",\n          \"when\": \"viewItem =~ /^gistFile/\",\n          \"group\": \"base@2\"\n        },\n        {\n          \"command\": \"gistpad.addFileToGist\",\n          \"when\": \"viewItem =~ /^gistFile/\",\n          \"group\": \"base@3\"\n        },\n        {\n          \"command\": \"gistpad.renameFile\",\n          \"when\": \"viewItem == gistFile.editable\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.duplicateFile\",\n          \"when\": \"viewItem == gistFile.editable\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.deleteFile\",\n          \"when\": \"viewItem == gistFile.editable\",\n          \"group\": \"manage@3\"\n        },\n        {\n          \"command\": \"gistpad.addDirectoryFile\",\n          \"when\": \"viewItem == gistDirectory.editable\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.uploadFileToDirectory\",\n          \"when\": \"viewItem == gistDirectory.editable\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.renameDirectory\",\n          \"when\": \"viewItem == gistDirectory.editable\",\n          \"group\": \"mutate@1\"\n        },\n        {\n          \"command\": \"gistpad.duplicateDirectory\",\n          \"when\": \"viewItem == gistDirectory.editable\",\n          \"group\": \"mutate@2\"\n        },\n        {\n          \"command\": \"gistpad.deleteDirectory\",\n          \"when\": \"viewItem == gistDirectory.editable\",\n          \"group\": \"mutate@3\"\n        },\n        {\n          \"command\": \"gistpad.newScratchNote\",\n          \"when\": \"viewItem == scratchGist\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.newScratchNote\",\n          \"when\": \"viewItem == scratchGist\",\n          \"group\": \"base@1\"\n        },\n        {\n          \"command\": \"gistpad.clearScratchNotes\",\n          \"when\": \"viewItem == scratchGist\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.hideScratchNotes\",\n          \"when\": \"viewItem == scratchGist\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.copyRepositoryUrl\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch)?(.hasTours)?$/\",\n          \"group\": \"browse@1\"\n        },\n        {\n          \"command\": \"gistpad.openRepositoryInBrowser\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch)?(.hasTours)?$/\",\n          \"group\": \"browse@2\"\n        },\n        {\n          \"command\": \"gistpad.openRepositorySwing\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.swing$/\",\n          \"group\": \"browse@3\"\n        },\n        {\n          \"command\": \"gistpad.addRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|swing)(.branch|Directory)?(.hasTours)?$/\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.openTodayPage\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.wiki$/\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.openRepositorySwing\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.swing$/\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.addWikiPage\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.wiki(Directory)?$/\",\n          \"group\": \"inline@2\"\n        },\n        {\n          \"command\": \"gistpad.openTodayPage\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.wiki$/\",\n          \"group\": \"basic@1\"\n        },\n        {\n          \"command\": \"gistpad.addWikiPage\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.wiki(Directory)?$/\",\n          \"group\": \"basic@2\"\n        },\n        {\n          \"command\": \"gistpad.addRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch|Directory)?(.hasTours)?$/\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.uploadRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch|Directory)?(.hasTours)?$/\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.cloneManagedRepository\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch)?(.hasTours)?$/\",\n          \"group\": \"manage@3\"\n        },\n        {\n          \"command\": \"gistpad.switchRepositoryBranch\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.repo(.branch)?(.hasTours)?$/\",\n          \"group\": \"manageBranch@1\"\n        },\n        {\n          \"command\": \"gistpad.mergeRepositoryBranch\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.repo.branch(.hasTours)?$/\",\n          \"group\": \"manageBranch@2\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryBranch\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.repo.branch(.hasTours)?$/\",\n          \"group\": \"manageBranch@3\"\n        },\n        {\n          \"command\": \"gistpad.startRepoCodeTour\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.repo(.branch)?.hasTours$/\",\n          \"group\": \"tour@1\"\n        },\n        {\n          \"command\": \"gistpad.recordRepoCodeTour\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.repo(.branch)?(.hasTours)?$/\",\n          \"group\": \"tour@2\"\n        },\n        {\n          \"command\": \"gistpad.closeRepository\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch)?(.hasTours)?$/\",\n          \"group\": \"unmanage@1\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepository\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch)?(.hasTours)?$/\",\n          \"group\": \"unmanage@2\"\n        },\n        {\n          \"command\": \"gistpad.copyRepositoryFileUrl\",\n          \"when\": \"view == gistpad.repos && viewItem == gistpad.repoFile\",\n          \"group\": \"browse@1\"\n        },\n        {\n          \"command\": \"gistpad.openRepositoryFileInBrowser\",\n          \"when\": \"view == gistpad.repos && viewItem == gistpad.repoFile\",\n          \"group\": \"browse@2\"\n        },\n        {\n          \"command\": \"gistpad.renameRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)File$/\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.duplicateRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem == gistpad.repoFile\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)File$/\",\n          \"group\": \"manage@3\"\n        },\n        {\n          \"command\": \"gistpad.renameRepositoryDirectory\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)Directory$/\",\n          \"group\": \"mutate@1\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryDirectory\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)Directory$/\",\n          \"group\": \"mutate@2\"\n        },\n        {\n          \"command\": \"gistpad.exportTour\",\n          \"when\": \"viewItem =~ /^codetour.tour(.active)?$/\",\n          \"group\": \"export@2\"\n        }\n      ],\n      \"explorer/context\": [\n        {\n          \"command\": \"gistpad.addFileToGist\",\n          \"when\": \"!explorerResourceIsFolder\"\n        }\n      ],\n      \"editor/context\": [\n        {\n          \"command\": \"gistpad.addSelectionToGist\"\n        },\n        {\n          \"command\": \"gistpad.pasteGistFile\"\n        },\n        {\n          \"command\": \"gistpad.pasteImage\",\n          \"when\": \"resourceScheme == repo && resourceLangId == markdown\"\n        },\n        {\n          \"command\": \"gistpad.pasteImage\",\n          \"when\": \"resourceScheme == gist && resourceLangId == markdown\"\n        },\n        {\n          \"command\": \"gistpad.pasteImage\",\n          \"when\": \"resourceScheme == gist && resourceLangId == html\"\n        },\n        {\n          \"command\": \"gistpad.pasteImage\",\n          \"when\": \"resourceScheme == gist && resourceLangId == jade\"\n        }\n      ],\n      \"editor/title\": [\n        {\n          \"command\": \"gistpad.renameFile\",\n          \"when\": \"resourceScheme == gist\"\n        },\n        {\n          \"command\": \"gistpad.deleteFile\",\n          \"when\": \"resourceScheme == gist\"\n        },\n        {\n          \"command\": \"gistpad.renameRepositoryFile\",\n          \"when\": \"resourceScheme == repo\"\n        }\n      ],\n      \"editor/title/context\": [\n        {\n          \"command\": \"gistpad.addFileToGist\"\n        },\n        {\n          \"command\": \"gistpad.copyFileUrl\",\n          \"when\": \"resourceScheme == gist\"\n        },\n        {\n          \"command\": \"gistpad.copyRepositoryFileUrl\",\n          \"when\": \"resourceScheme == repo\"\n        }\n      ],\n      \"comments/comment/title\": [\n        {\n          \"command\": \"gistpad.editGistComment\",\n          \"group\": \"group@1\",\n          \"when\": \"commentController == gistpad && comment == canEdit\"\n        },\n        {\n          \"command\": \"gistpad.deleteGistComment\",\n          \"group\": \"group@2\",\n          \"when\": \"commentController == gistpad && comment == canEdit\"\n        },\n        {\n          \"command\": \"gistpad.editRepositoryComment\",\n          \"group\": \"group@1\",\n          \"when\": \"commentController == gistpad:repo && comment == canEdit\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryComment\",\n          \"group\": \"group@2\",\n          \"when\": \"commentController == gistpad:repo && comment == canEdit\"\n        }\n      ],\n      \"comments/comment/context\": [\n        {\n          \"command\": \"gistpad.saveGistComment\",\n          \"group\": \"inline@2\",\n          \"when\": \"commentController == gistpad\"\n        },\n        {\n          \"command\": \"gistpad.saveRepositoryComment\",\n          \"group\": \"inline@2\",\n          \"when\": \"commentController == gistpad:repo\"\n        }\n      ],\n      \"comments/commentThread/context\": [\n        {\n          \"command\": \"gistpad.addGistComment\",\n          \"group\": \"inline\",\n          \"when\": \"commentController == gistpad && commentThreadIsEmpty && gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.replyGistComment\",\n          \"group\": \"inline\",\n          \"when\": \"commentController == gistpad && !commentThreadIsEmpty && gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.addRepositoryComment\",\n          \"group\": \"inline\",\n          \"when\": \"commentController == gistpad:repo && commentThreadIsEmpty && gistpad:state == SignedIn\"\n        }\n      ]\n    },\n    \"viewsContainers\": {\n      \"activitybar\": [\n        {\n          \"id\": \"gistpad\",\n          \"title\": \"GistPad\",\n          \"icon\": \"images/icon-activity.svg\"\n        }\n      ]\n    },\n    \"views\": {\n      \"gistpad\": [\n        {\n          \"id\": \"gistpad.gists\",\n          \"name\": \"Gists\"\n        },\n        {\n          \"id\": \"gistpad.repos\",\n          \"name\": \"Repositories\"\n        },\n        {\n          \"id\": \"gistpad.showcase\",\n          \"name\": \"Showcase\",\n          \"visibility\": \"collapsed\",\n          \"when\": \"gistpad:state == SignedIn\"\n        }\n      ]\n    },\n    \"viewsWelcome\": [\n      {\n        \"view\": \"gistpad.gists\",\n        \"contents\": \"Open any GitHub Gist, by either its URL or ID.\\n\\n[$(folder-opened) Open Gist](command:gistpad.openGist)\\n\\nManage your gists, by signing in with a GitHub account.\\n\\n[$(github-inverted) Sign In](command:gistpad.signIn)\"\n      },\n      {\n        \"view\": \"gistpad.repos\",\n        \"contents\": \"Browse GitHub repos, without needing to locally clone files ([Learn More](https://github.com/vsls-contrib/gistpad#repositories)).\\n\\n[$(folder-opened) Open Repository](command:gistpad.openRepository)\\n\\nYou can also edit your repos and wikis, by signing in with a GitHub account ([Learn More](https://github.com/vsls-contrib/gistpad#wikis)).\\n\\n[$(github-inverted) Sign In](command:gistpad.signIn)\",\n        \"when\": \"gistpad:state != SignedIn\"\n      },\n      {\n        \"view\": \"gistpad.repos\",\n        \"contents\": \"Open one of your GitHub repos in order to start remotely browsing and editing files ([Learn More](https://github.com/vsls-contrib/gistpad#repositories)).\\n\\n[$(folder-opened) Open Repository](command:gistpad.openRepository)\",\n        \"when\": \"gistpad:state == SignedIn\"\n      }\n    ],\n    \"jsonValidation\": [\n      {\n        \"fileMatch\": \"showcase.json\",\n        \"url\": \"https://gist.githubusercontent.com/lostintangent/5290f684afc38cfe713246226c1d0f72/raw/schema.json\"\n      }\n    ],\n    \"markdown.markdownItPlugins\": true\n  },\n  \"scripts\": {\n    \"build:browser\": \"webpack --config ./webpack/webpack.browser.config.js\",\n    \"build:node\": \"webpack --config ./webpack/webpack.node.config.js\",\n    \"compile\": \"tsc -p ./\",\n    \"package\": \"vsce package\",\n    \"vscode:prepublish\": \"npm run build:node\",\n    \"watch\": \"webpack --mode=development --watch --progress --config ./webpack/webpack.node.config.js\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.19.2\",\n    \"base64-to-uint8array\": \"^1.0.0\",\n    \"diff-match-patch\": \"^1.0.5\",\n    \"gists\": \"github:lostintangent/gists\",\n    \"github-base\": \"^1.0.0\",\n    \"is-binary-path\": \"^2.1.0\",\n    \"markdown-it\": \"^10.0.0\",\n    \"markdown-it-regex\": \"^0.2.0\",\n    \"mobx\": \"^5.14.2\",\n    \"moment\": \"^2.24.0\",\n    \"rxjs\": \"^6.5.4\",\n    \"simple-git\": \"^1.126.0\",\n    \"title-case\": \"^3.0.2\"\n  },\n  \"devDependencies\": {\n    \"@types/moment\": \"^2.13.0\",\n    \"@types/node\": \"^8.10.25\",\n    \"@types/vscode\": \"^1.48.0\",\n    \"copy-webpack-plugin\": \"^5.0.5\",\n    \"ts-loader\": \"^6.2.1\",\n    \"tslint\": \"^5.8.0\",\n    \"typescript\": \"^3.7.3\",\n    \"vsce\": \"^1.81.1\",\n    \"vscode-nls-dev\": \"^3.3.1\",\n    \"webpack\": \"^4.41.2\",\n    \"webpack-cli\": \"^3.3.10\",\n    \"webpack-merge\": \"^4.2.2\"\n  }\n}", "import * as vscode from \"vscode\";\n\nconst CONFIG_SECTION = \"gistpad\";\n\nexport function get(key: \"treeIcons\"): boolean;\nexport function get(key: \"apiUrl\"): string;\nexport function get(key: \"images.markdownPasteFormat\"): \"markdown\" | \"html\";\nexport function get(key: \"images.pasteType\"): \"file\" | \"base64\";\nexport function get(key: \"images.directoryName\"): string;\nexport function get(key: \"scratchNotes.directoryFormat\"): string;\nexport function get(key: \"scratchNotes.fileExtension\"): string;\nexport function get(key: \"scratchNotes.fileFormat\"): string;\nexport function get(key: \"scratchNotes.show\"): boolean;\nexport function get(key: \"showcaseUrl\"): string;\nexport function get(key: \"comments.showThread\"): string;\nexport function get(key: any) {\n  const extensionConfig = vscode.workspace.getConfiguration(CONFIG_SECTION);\n  return extensionConfig.get(key);\n}\n\nexport async function set(key: string, value: any) {\n  const extensionConfig = vscode.workspace.getConfiguration(CONFIG_SECTION);\n  return extensionConfig.update(key, value, true);\n}\n", "import { commands, ExtensionContext, window, workspace } from \"vscode\";\nimport { EXTENSION_NAME } from \"../../constants\";\nimport { stringToByteArray, withProgress } from \"../../utils\";\nimport { RepoFileSystemProvider } from \"../fileSystem\";\nimport { store } from \"../store\";\nimport { RepositoryFileNode, RepositoryNode } from \"../tree/nodes\";\nimport { openRepoDocument } from \"../utils\";\nimport { getPageFilePath } from \"./utils\";\n\nimport moment = require(\"moment\");\nconst { titleCase } = require(\"title-case\");\n\nfunction createWikiPage(name: string, repo: string, filePath: string) {\n  const fileHeading = `# ${titleCase(name)}\n\n`;\n\n  const uri = RepoFileSystemProvider.getFileUri(repo, filePath);\n  return workspace.fs.writeFile(uri, stringToByteArray(fileHeading));\n}\n\nexport function registerCommands(context: ExtensionContext) {\n  // This is a private command that handles dynamically\n  // creating wiki documents, when the user auto-completes\n  // a new document link that doesn't exist.\n  context.subscriptions.push(\n    commands.registerCommand(\n      `${EXTENSION_NAME}._createWikiPage`,\n      async (repo: string, name: string) => {\n        const fileName = getPageFilePath(name);\n        await createWikiPage(name, repo, fileName);\n\n        // Automatically save the current, in order to ensure\n        // the newly created backlink is discovered.\n        await window.activeTextEditor?.document.save();\n      }\n    )\n  );\n\n  context.subscriptions.push(\n    commands.registerCommand(\n      `${EXTENSION_NAME}.addWikiPage`,\n      async (node?: RepositoryNode | RepositoryFileNode) => {\n        const repoName = node?.repo.name || store.wiki!.name;\n\n        const input = await window.createInputBox();\n        input.title = `Add wiki page (${repoName})`;\n        input.prompt =  \"Enter the name of the new page you'd like to create\";\n\n        input.onDidAccept(async () => {\n          input.hide();\n          \n          if (input.value) {\n            const path = getPageFilePath(input.value);\n            const filePath =\n              node instanceof RepositoryFileNode\n                ? `${node.file.path}/${path}`\n                : path;\n  \n            \n            await withProgress(\"Adding new page...\", async () => createWikiPage(input.value, repoName, filePath));\n            openRepoDocument(repoName, filePath);\n          }\n        })\n        \n        input.show();\n      }\n    )\n  );\n\n  context.subscriptions.push(\n    commands.registerCommand(\n      `${EXTENSION_NAME}.openTodayPage`,\n      async (node?: RepositoryNode) => {\n        const sharedMoment = moment();\n        const fileName = sharedMoment.format(\"YYYY-MM-DD\");\n        const filePath = getPageFilePath(fileName);\n\n        const titleFormat = workspace\n          .getConfiguration(EXTENSION_NAME)\n          .get(\"wikis.daily.titleFormat\", \"LL\");\n\n        const repoName = node?.repo.name || store.wiki!.name;\n        const pageTitle = sharedMoment.format(titleFormat);\n\n        const uri = RepoFileSystemProvider.getFileUri(repoName, filePath);\n        const [, file] = RepoFileSystemProvider.getRepoInfo(uri)!;\n\n        if (!file) {\n          await withProgress(\"Adding new page...\", async () => {\n            return createWikiPage(pageTitle, repoName, filePath);\n          });\n        }\n\n        openRepoDocument(repoName, filePath);\n      }\n    )\n  );\n}\n", "import { observable, runInAction, set } from \"mobx\";\nimport { window, workspace } from \"vscode\";\nimport { FollowedUser, Gist, GistComment, GistFile, store } from \".\";\nimport * as config from \"../config\";\nimport {\n  DIRECTORY_SEPARATOR,\n  SCRATCH_GIST_NAME,\n  ZERO_WIDTH_SPACE\n} from \"../constants\";\nimport {\n  byteArrayToString,\n  closeGistFiles,\n  encodeDirectoryName,\n  fileNameToUri,\n  openGistFiles,\n  sortGists,\n  stringToByteArray,\n  updateGistTags,\n  withProgress\n} from \"../utils\";\nimport { getToken } from \"./auth\";\nimport { storage } from \"./storage\";\nimport moment = require(\"moment\");\n\nconst Gists = require(\"gists\");\n\nexport async function getApi(constructor = Gists) {\n  const token = await getToken();\n  const apiurl = config.get(\"apiUrl\");\n\n  if (!apiurl) {\n    const message = \"No API URL is set.\";\n    throw new Error(message);\n  }\n\n  return new constructor({ apiurl, token });\n}\n\nexport async function duplicateGist(\n  id: string,\n  isPublic: boolean = true,\n  description?: string,\n  saveGist: boolean = true\n) {\n  const gist = await getGist(id);\n  const files = [];\n  for (const filename of Object.keys(gist.files)) {\n    const content = byteArrayToString(\n      await workspace.fs.readFile(fileNameToUri(gist.id, filename))\n    );\n    files.push({\n      filename,\n      content\n    });\n  }\n\n  return newGist(files, isPublic, description || gist.description, true);\n}\n\nexport async function getUser(username: string) {\n  const GitHub = require(\"github-base\");\n  const api = await getApi(GitHub);\n\n  try {\n    const response = await api.get(`/users/${username}`);\n    return response.body;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getUserAvatar(username: string) {\n  const user = await getUser(username);\n  return user ? user.avatar_url : null;\n}\n\nexport async function changeDescription(id: string, description: string) {\n  const api = await getApi();\n  const { body } = await api.edit(id, {\n    description\n  });\n\n  const gist = store.gists.find((gist) => gist.id === id)!;\n\n  runInAction(() => {\n    gist.description = body.description;\n    gist.updated_at = body.updated_at;\n  });\n\n  updateGistTags(gist);\n}\n\nexport async function createGistComment(\n  id: string,\n  body: string\n): Promise<GistComment> {\n  const api = await getApi();\n  const gist = await api.createComment(id, { body });\n  return gist.body;\n}\n\nexport async function deleteGist(id: string) {\n  const api = await getApi();\n  await api.delete(id);\n  store.gists = store.gists.filter((gist) => gist.id !== id);\n}\n\nexport async function deleteGistComment(\n  gistId: string,\n  commentId: string\n): Promise<void> {\n  const api = await getApi();\n  await api.deleteComment(gistId, commentId);\n}\n\nexport async function editGistComment(\n  gistId: string,\n  commentId: string,\n  body: string\n): Promise<void> {\n  const api = await getApi();\n  await api.editComment(gistId, commentId, { body });\n}\n\nexport async function followUser(username: string) {\n  const avatarUrl = await getUserAvatar(username);\n  if (!avatarUrl) {\n    window.showErrorMessage(\n      `\"${username}\" doesn't appear to be a valid GitHub user. Please try again.`\n    );\n    return;\n  }\n\n  const followedUsers = storage.followedUsers;\n  if (followedUsers.find((user) => user === username)) {\n    window.showInformationMessage(\"You're already following this user\");\n    return;\n  } else {\n    followedUsers.push(username);\n    storage.followedUsers = followedUsers;\n  }\n\n  const user: FollowedUser = observable({\n    username,\n    avatarUrl,\n    gists: [],\n    isLoading: true\n  });\n\n  store.followedUsers.push(user);\n\n  user.gists = await updateGistTags(await listUserGists(username));\n  user.isLoading = false;\n}\n\nexport async function forkGist(id: string) {\n  const api = await getApi();\n\n  const gist = await api.fork(id);\n  updateGistTags(gist.body);\n\n  store.gists.unshift(gist.body);\n\n  openGistFiles(gist.body.id);\n}\n\nexport async function getForks(id: string) {\n  const api = await getApi();\n  const response = await api.forks(id);\n\n  return response.body.sort(\n    (a: Gist, b: Gist) => Date.parse(b.updated_at) - Date.parse(a.updated_at)\n  );\n}\n\nexport async function getGist(id: string): Promise<Gist> {\n  const api = await getApi();\n  const gist = await api.get(id);\n  return observable(gist.body);\n}\n\nexport async function getGists(ids: string[]): Promise<Gist[]> {\n  return Promise.all(ids.map(getGist));\n}\n\nexport async function getGistComments(id: string): Promise<GistComment[]> {\n  const api = await getApi();\n  const response = await api.listComments(id);\n  return response.body;\n}\n\nexport async function listGists(): Promise<Gist[]> {\n  const api = await getApi();\n  const { pages } = await api.all();\n  const gists: Gist[] = await pages.reduce(\n    (result: Gist[], page: any) => [...result, ...page.body],\n    []\n  );\n\n  return sortGists(gists);\n}\n\nexport async function listUserGists(username: string): Promise<Gist[]> {\n  const api = await getApi();\n  const response = await api.list(username);\n\n  return response.body.sort(\n    (a: Gist, b: Gist) => Date.parse(b.updated_at) - Date.parse(a.updated_at)\n  );\n}\n\nexport async function newGist(\n  gistFiles: GistFile[],\n  isPublic: boolean,\n  description?: string,\n  openAfterCreation: boolean = true\n): Promise<Gist> {\n  const api = await getApi();\n\n  const files = gistFiles.reduce((accumulator, gistFile) => {\n    return {\n      ...accumulator,\n      [gistFile.filename!.trim()]: {\n        content: gistFile.content || ZERO_WIDTH_SPACE\n      }\n    };\n  }, {});\n\n  const rawGist = await api.create({\n    description,\n    public: isPublic,\n    files\n  });\n  const gist = rawGist.body;\n\n  updateGistTags(gist);\n\n  store.gists.unshift(gist);\n\n  if (openAfterCreation) {\n    openGistFiles(gist.id);\n  }\n\n  return gist;\n}\n\nexport async function newScratchNote() {\n  const directoryFormat = config.get(\"scratchNotes.directoryFormat\");\n  const fileFormat = config.get(\"scratchNotes.fileFormat\");\n  const extension = config.get(\"scratchNotes.fileExtension\");\n\n  const sharedMoment = moment();\n  const directory = directoryFormat\n    ? `${sharedMoment.format(directoryFormat)}${DIRECTORY_SEPARATOR}`\n    : \"\";\n\n  const file = sharedMoment.format(fileFormat);\n\n  const filename = `${directory}${file}${extension}`;\n\n  if (!store.scratchNotes.gist) {\n    const api = await getApi();\n\n    const response = await api.create({\n      description: SCRATCH_GIST_NAME,\n      public: false,\n      files: {\n        [encodeDirectoryName(filename)]: {\n          content: ZERO_WIDTH_SPACE\n        }\n      }\n    });\n\n    store.scratchNotes.gist = response.body;\n  } else if (!store.scratchNotes.gist.files.hasOwnProperty(filename)) {\n    await withProgress(\"Creating scratch note...\", async () => {\n      await workspace.fs.writeFile(\n        fileNameToUri(store.scratchNotes.gist!.id, filename),\n        stringToByteArray(\"\")\n      );\n    });\n  }\n\n  const uri = fileNameToUri(store.scratchNotes.gist!.id, filename);\n  window.showTextDocument(uri);\n}\n\nexport async function clearScratchNotes() {\n  const api = await getApi();\n  await api.delete(store.scratchNotes.gist!.id);\n\n  closeGistFiles(store.scratchNotes.gist!);\n  store.scratchNotes.gist = null;\n}\n\nexport async function refreshGists() {\n  store.isLoading = true;\n\n  const gists = updateGistTags(await listGists());\n  store.scratchNotes.gist =\n    gists.find((gist) => gist.description === SCRATCH_GIST_NAME) || null;\n\n  store.gists = store.scratchNotes.gist\n    ? gists.filter((gist) => gist.description !== SCRATCH_GIST_NAME)\n    : gists;\n\n  store.isLoading = false;\n\n  store.starredGists = updateGistTags(await starredGists());\n\n  if (storage.followedUsers.length > 0) {\n    store.followedUsers = storage.followedUsers.map((username) => ({\n      username,\n      gists: [],\n      isLoading: true\n    }));\n\n    for (const followedUser of store.followedUsers) {\n      followedUser.avatarUrl = await getUserAvatar(followedUser.username);\n      followedUser.gists = updateGistTags(\n        await listUserGists(followedUser.username)\n      );\n      followedUser.isLoading = false;\n    }\n  }\n}\n\nexport async function starredGists(): Promise<Gist[]> {\n  const api = await getApi();\n  const { body } = await api.starred();\n  return body;\n}\n\nexport async function unfollowUser(username: string) {\n  storage.followedUsers = storage.followedUsers.filter(\n    (user) => user !== username\n  );\n\n  store.followedUsers = store.followedUsers.filter(\n    (user) => user.username !== username\n  );\n}\n\nexport async function refreshGist(id: string) {\n  const gist = await getGist(id);\n  const oldGist = store.gists.find((gist) => gist.id === id);\n  set(oldGist!, gist);\n}\n\nexport async function starGist(gist: Gist) {\n  const api = await getApi();\n  await api.star(gist.id);\n\n  store.starredGists.push(gist);\n}\n\nexport async function unstarGist(id: string) {\n  const api = await getApi();\n  await api.unstar(id);\n\n  store.starredGists = store.starredGists.filter((gist) => gist.id !== id);\n}\n", "import {\n  authentication,\n  AuthenticationSession,\n  commands,\n  window\n} from \"vscode\";\nimport { store } from \".\";\nimport * as config from \"../config\";\nimport { EXTENSION_NAME } from \"../constants\";\nimport { refreshGists } from \"./actions\";\nconst GitHub = require(\"github-base\");\n\nlet loginSession: string | undefined;\n\nexport function getCurrentUser() {\n  return store.login;\n}\n\nconst STATE_CONTEXT_KEY = `${EXTENSION_NAME}:state`;\nconst STATE_SIGNED_IN = \"SignedIn\";\nconst STATE_SIGNED_OUT = \"SignedOut\";\n\nconst GIST_SCOPE = \"gist\";\nconst REPO_SCOPE = \"repo\";\nconst DELETE_REPO_SCOPE = \"delete_repo\";\n\n// TODO: Replace github-base with octokit\nexport async function getApi(newToken?: string) {\n  const token = newToken || (await getToken());\n  const apiurl = config.get(\"apiUrl\");\n\n  return new GitHub({ apiurl, token });\n}\n\nconst TOKEN_RESPONSE = \"Sign in\";\nexport async function ensureAuthenticated() {\n  if (store.isSignedIn) {\n    return;\n  }\n\n  const response = await window.showErrorMessage(\n    \"You need to sign-in with GitHub to perform this operation.\",\n    TOKEN_RESPONSE\n  );\n  if (response === TOKEN_RESPONSE) {\n    await signIn();\n  }\n}\n\nasync function getSession(\n  isInteractiveSignIn: boolean = false,\n  includeDeleteRepoScope: boolean = false\n) {\n  const scopes = [GIST_SCOPE, REPO_SCOPE];\n  if (includeDeleteRepoScope) {\n    scopes.push(DELETE_REPO_SCOPE);\n  }\n\n  try {\n    if (isInteractiveSignIn) {\n      isSigningIn = true;\n    }\n\n    const session = await authentication.getSession(\"github\", scopes, {\n      createIfNone: isInteractiveSignIn\n    });\n\n    if (session) {\n      loginSession = session?.id;\n    }\n\n    isSigningIn = false;\n\n    return session;\n  } catch {}\n}\n\nexport async function getToken() {\n  return store.token;\n}\n\nasync function markUserAsSignedIn(\n  session: AuthenticationSession,\n  refreshUI: boolean = true\n) {\n  loginSession = session.id;\n\n  store.isSignedIn = true;\n  store.token = session.accessToken;\n  store.login = session.account.label;\n  store.canCreateRepos = session.scopes.includes(REPO_SCOPE);\n  store.canDeleteRepos = session.scopes.includes(DELETE_REPO_SCOPE);\n\n  if (refreshUI) {\n    commands.executeCommand(\"setContext\", STATE_CONTEXT_KEY, STATE_SIGNED_IN);\n    await refreshGists();\n  }\n}\n\nfunction markUserAsSignedOut() {\n  loginSession = undefined;\n\n  store.login = \"\";\n  store.isSignedIn = false;\n\n  commands.executeCommand(\"setContext\", STATE_CONTEXT_KEY, STATE_SIGNED_OUT);\n}\n\nlet isSigningIn = false;\nexport async function signIn() {\n  const session = await getSession(true);\n\n  if (session) {\n    window.showInformationMessage(\n      \"You're successfully signed in and can now manage your GitHub gists and repositories!\"\n    );\n    await markUserAsSignedIn(session);\n    return true;\n  }\n}\n\nexport async function elevateSignin() {\n  const session = await getSession(true, true);\n\n  if (session) {\n    await markUserAsSignedIn(session, false);\n    return true;\n  }\n}\n\nasync function attemptSilentSignin(refreshUI: boolean = true) {\n  const session = await getSession();\n\n  if (session) {\n    await markUserAsSignedIn(session, refreshUI);\n  } else {\n    await markUserAsSignedOut();\n  }\n}\n\nexport async function initializeAuth() {\n  authentication.onDidChangeSessions(async (e) => {\n    if (e.provider.id === \"github\") {\n      // @ts-ignore\n      if (e.added.length > 0) {\n        // This session was added based on a GistPad-triggered\n        // sign-in, and so we don't need to do anything further to process it.\n        if (isSigningIn) {\n          isSigningIn = false;\n          return;\n        }\n\n        // The end-user just signed in to Gist via the\n        // VS Code account UI, and therefore, we need\n        // to grab the session token/etc.\n        await attemptSilentSignin();\n        // @ts-ignore\n      } else if (e.changed.length > 0 && e.changed.includes(loginSession)) {\n        // TODO: Validate when this actually fires\n        await attemptSilentSignin(false);\n      }\n      // @ts-ignore\n      else if (e.removed.length > 0 && e.removed.includes(loginSession)) {\n        // TODO: Implement sign out support\n      }\n    }\n  });\n\n  await attemptSilentSignin();\n}\n"], "fixing_code": ["## v0.2.7 (03/29/21)\n\n- Removed the `GistPad > Api Url` setting, since it was no longer supported after GistPad moved over to using VS Code's native authentication.\n\n## v0.2.6 (03/21/21)\n\n- Removed all bundled extensions, to keep GistPad as small as possible\n\n## v0.2.5 (03/21/21)\n\n- Remove the reference to Live Share Spaces in the `README`\n\n## v0.2.4 (03/21/21)\n\n- Added support for `#tags` in wiki repos\n\n## v0.2.3 (03/19/21)\n\n- When you open/create a new repo, it is automatically focused in the `Repositories` tree\n- Added the commands for creating a new public/secret gist to the `Your Gists` node in the `Gists` tree\n- Updated some of the tree icons to use VS Code Codicons instead of custom icons\n\n## v0.2.2 (02/02/2020)\n\n- Fixed renaming of repo files\n- Fixed viewing binary files in a repo (e.g. images)\n- Introduced support for renaming and deleting repo directories\n\n## v0.2.1 (12/28/2020)\n\n- Fixed the `Export to CodePen` command for swing gists\n- Removed the CodeSwing dependency, in order to keep GistPad more focused\n\n## v0.2.0 (12/26/2020)\n\n- Removed the playgrounds feature from GistPad, in favor of an integration with the new [CodeSwing](https://aka.ms/codeswing) extension. Note that all existing functionality should remain the same, but the playgrounds feature is now more broadly useful, than just with gists (e.g. you can create playgrounds in GitHub repos and local directories)\n- Renamed the following gist types: `doc` -> `note`, `playground` -> `code-swing`, `playground-template` -> `swing-template`, `tour` -> `code-tour`, `tutorial` -> `code-swing-tutorial`, `flash-card` -> `flash-code`.\n- The `Showcase` view now only appears after you've signed in, in order to prevent issues with API throttling for anoymous users\n\n## v0.1.13 (12/02/2020)\n\n- Introduced support for embedding wiki pages, using the `![[link]]` syntax\n- Wiki repos are now auto-detected when the repo name includes `notes`, `journal` or `obsidian` (in addition to the exiting `wiki` support)\n- Wiki page titles can now be defined using any markdown heading level\n- Repo files can now be copied to gists, by right-clicking their editor tab and selecting `Copy File to Gist`\n\n## v0.1.12 (11/26/2020)\n\n- The `GistPad: Open Today Page` and `GistPad: Add Wiki Page` commands are now exposed in the command palette, as long as you have a wiki repo open.\n- Added status bar items for opening the \"today page\" and adding a new wiki page.\n- Your list of opened repos, followed users and playground tutorials are now synchronized between machines, if you're using VS Code's settings sync.\n- The `Repos` tree now displays the file count (for directories) and backlink count (for wiki files) as inline node descriptions.\n- The `delete_repo` authentication scope is no longer requested by default.\n- The `gistpad.playgrounds.autoSave` setting is now defaulted to `false`.\n- Removed the `gistpad.gitSSO` setting, since it's no longer used.\n\n## v0.1.11 (11/26/2020)\n\n- Updated the `Repositories` tree to always show\n- Renamed the `Active Gist` tree to `Playground`\n\n## v0.1.10 (11/25/2020)\n\n- Replaced the token-based auth with support for VS Code's native GitHub authentication\n- The `Repositories` view is now always visible whenever you're signed in.\n- Removed the `GistPad: Sign Out` command in favor of just signing out of your GitHub account with VS Code\n- Renamed the `Manage Repository` command to `Open Repository`, and the `Stop Managing Repository` command to `Close Repository`\n- Removed the `Reply...` textbox from the comment UI for wiki backlinks and playground tutorial readme's\n\n## v0.1.9 (11/14/2020)\n\n- The `Showcase` view is now collapsed by default\n- The `Copy GitHub URL` command is now available on the editor tab for gist files\n- Added a new group type called `flash-card` that groups FlashCode decks\n- Removed the dependency on `CodeTour`\n\n## v0.1.8 (07/13/2020)\n\n- Added support for creating repos from repo templates\n- Wiki pages are now automatically created when clicking on a document link\n- Added support for the `Paste Image` command for public repos\n- Added support for uploading local files to repos\n- Updated the default file name for gist scratch notes\n- Fixed the `Gists` tree, to display themed icons for directory nodes (e.g. the `images` folder)\n- Added the new `GistPad > Wikis > Daily > Title Format` setting, to control how new daily pages are titled\n\n## v0.1.7 (07/12/2020)\n\n- Updated the tree icons for repositories and wikis\n- Repository nodes are now auto-expanded by default\n- Added support for Foam workspaces\n\n## v0.1.6 (07/11/2020)\n\n- Fixed a performance issue when trying to edit large markdown files\n\n## v0.1.5 (07/11/2020)\n\n- Added support for wiki repositories w/support for completion, hovers, links and backlinks\n- Added a new \"diagram\" gist group type, that includes gists with Drawio diagrams in it\n- Added the Markdown Checkbox and Emojisense extensions as optional dependencies\n\n## v0.1.4 (07/04/2020)\n\n- Added the ability to switch repo branches\n- Added the ability to create new repos\n- A progress indicator is now displayed when renaming a gist file\n\n## v0.1.3 (06/30/2020)\n\n- Added support for managing repo branches\n- Added support for deleting repositories _(Note: This requires you to sign-in with a token that includes the `delete_repo` scope)_\n- Added support for playing/recording [CodeTours](https://aka.ms/codetour) for a managed repo\n- When you manage a repo, it's `README` is automatically opened to make onboarding easier\n- Renaming and deleting repo files now correctly updates any opened editors\n- The new file is automatically opened when duplicating a file\n- Editor windows are automatically closed when unmanaging the repo they're associated with\n- Updated the `gistpad.gitSSO` setting to be `false` by default, due to some issues that some users were running into\n\n## v0.1.2 (06/17/2020)\n\n- Added support for automatically syncing and merging changes with repo files\n\n## v0.1.1 (06/15/2020)\n\n- Fixed a bug with exporting some gists to repos\n\n## v0.1.0 (06/15/2020)\n\n- Added the ability to manage repositories in addition to gists\n\n## v0.0.68 (05/11/2020)\n\n- Fixed the `Duplicate Gist` command to work for gists that include binary files (e.g. images)\n- Removed the `Gists` view from the `Explorer` tab, so that the entire GistPad experience is driven from the `GistPad` tab\n- The `Starred Gists` node is now expanded by default (thought it's only shown if you actually have any starred gists)\n- The `Paste Gist File` command is now available in the command palette.\n- Update the extension to always activate, as opposed to waiting until a command is run.\n\n## v0.0.67 (05/01/2020)\n\n- Added support for extensions to contribute custom markup languages for playgrounds, which supports the new [`GistPad Contrib` extension](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistpad-contrib).\n- Introduced a new \"welcome view\" to the `GistPad` tree, which should improve new user onboarding.\n\n## v0.0.66 (04/10/2020)\n\n- Contributed the `Export Tour to Gist...` command to the `CodeTour` tree, which is available when you have the `CodeTour` extension installed.\n- Added a new `tour` gist type, that represent gists`created by exporting a`CodeTour` as a gist. When you open tour gists, it will start playing the embedded tour.\n- User gists are now properly grouped after you follow a new user\n\n## v0.0.65 (04/06/2020)\n\n- When duplicating a file, you're now asked to specify the name of the new file before it's created. This prevents you from needing to duplicate and then rename the file, and therefore, enables the same thing in a single gesture.\n- Updated the \"input tour\" experience to use a custom-GistPad comment experience, as opposed to CodeTour (which isn't neccessary for a single comment affordance).\n- Added support for recording CodeTours for individual tutorial steps, in addition to arbitrary playgrounds.\n\n## v0.0.64 (03/28/2020)\n\n- Introduced support for \"playground config\", which allows you to define a `config.json` file within a playground/tutorial that will be automatically loaded and exposed via a global `window.config` variable.\n- Introduced support for \"playground input\", which allows you to accept user input and run a custom rubric against it, in order to allow user's to \"complete\" a playground/tutorial.\n- Introduced support for a \"playgroud canvas\", which allows you to specify a custom playground experience, using an HTML file that isn't automatically displayed to the end-user.\n- When duplicating a directory, you're now asked to specify the name of the new directory before it's created. This prevents you from needing to duplicate and then rename the directory, and therefore, enables the same thing in a single gesture.\n\n## v0.0.63 (03/15/2020)\n\n- Added integration with the [CodeTour](https://aka.ms/codetour) extension, so that you can record/playback tours for playgrounds.\n- Fixed an issue where GistPad couldn't be installed within the VS Online web editor\n\n## v0.0.62 (03/06/2020)\n\n- Updated scratch notes to be written to directories by default, and introduced the new `GistPad > Scratch Notes: Directory Name Format` setting.\n\n## v0.0.61 (03/01/2020)\n\n- Introduced the concept of \"scratch notes\", which allow you to easily track fleeting/ephemeral notes, along with your \"permanent\" gists.\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75699016-908f0b00-5c64-11ea-95d9-e8c8faf93738.png\" />\n\n## v0.0.60 (02/29/2020)\n\n- Added the `Duplicate File` and `Duplicate Directory` commands to the `Gists` tree.\n\n## v0.0.59 (02/28/2020)\n\n- Introduced the `Export to Repository` command to the `Gists` tree, which allows you export any of your gists to new GitHub repositories\n- Added support for adding `import` statements to playgrounds, without needing to use the `.mjs` extension and/or setting the `scriptType` property in the `playground.json` file.\n\n## v0.0.58 (02/26/2020)\n\n- Fixed a bug where gists without descriptions weren't loading properly\n\n## v0.0.57 (02/25/2020)\n\n- Introduced the ability to add \"tags\" to a gist, and then group gists by those tags\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75264671-9c7e5700-57a4-11ea-9bee-eb61cfb9d2f0.png\" />\n\n## v0.0.56 (02/20/2020)\n\n- Added the ability to group gists by type (e.g. docs, code snippets, playgrounds)\n\n  <img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75098775-3fe62680-556f-11ea-8253-3198b00837e1.png\" />\n\n- Added the ability for extensions to contribute custom viewers\n\n## v0.0.55 (02/20/2020)\n\n- Added a command to submit showcase entries from the `Showcase` view\n\n## v0.0.54 (02/18/2020)\n\n- Introduced the new `Showcase` view in the GistPad tab.\n\n## v0.0.53 (02/17/2020)\n\n- Added support for markdown-based markup files in playgrounds. Simply rename your `index.html` file to `index.md` and you can write playgrounds with Markdown\n- Gist directories can now include spaces in their names, and playground tutorials now allow each step to include a title in their name (e.g. `1 - Intro`)\n- Playgrounds can now consist of only a readme file, which among other thing, is useful for tutorials to include an \"intro\" step that doesn't actually require any code\n\n## v0.0.52 (02/15/2020)\n\n- Introduced support for creating directories within a gist, as well as a new setting called `GistPad > Images: Directory name`, which defines the name of the directory that pasted images are uploaded to.\n\n  <img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/74593846-7b6b7880-4fe4-11ea-9bf8-722bf7887ef1.png\" />\n\n- Introduced the concept of playground \"tutorials\", which allow you to create multi-step playgrounds, based on the new support for gist directories.\n\n  ![MobX](https://user-images.githubusercontent.com/116461/74594741-8d521900-4fee-11ea-97ac-1fdfac132724.gif)\n\n- Added the `View Forks` command to the tree view, which allows you to view a gist's forks\n\n## v0.0.51 (02/08/2020)\n\n- Added support for creating \"temporary playgrounds\", that don't have a backing gist\n- Added support for adding, renaming and deleting files within a temp playground\n- Added the `Delete File` command to the editor context menu\n\n## v0.0.50 (02/07/2020)\n\n- Added a confirmation prompt when attempting to delete gist files\n- Improved the peformance of the `Copy File to Gist`, `Delete Gist`, and `Open Gist` commands\n- Updated playgrounds to treat any `.mjs` file as being a JavaScript module, regardless if the `playground.json` file sets the `scriptType` property to `module` or not.\n- Enabled CodePens to be opened as playgrounds, even if they only include a JavaScript file (e.g. [Lines](https://codepen.io/Dillo/pen/ExjxvxY)).\n- Introduced the ability to add `gist:` links to a playground, which will open/navigate to a file\n\n## v0.0.49 (02/03/2020)\n\n- Introduced the concept of a playground readme, which allows you to define a readme for the playground in markdown, which is then rendered above/below the preview.\n- Added the `Split Left Tabbed` and `Split Right Tabbed` playground layout options.\n\n## v0.0.48 (01/25/2020)\n\n- Enabled playground's to load non-JSON files from their gist. Among other things, this supports playgrounds that need to use CSV/TSV files to load data for their visualuzations (e.g. [Basic US State Map](http://bl.ocks.org/michellechandra/0b2ce4923dc9b5809922))\n- Added the gist count to all top-level tree nodes\n- Added the ``View Gist in Bl.ocks` command to gist nodes that represent block playgrounds.\n- Added a new optional playground gallery called `Blocks` to enable [Bl.ocks](https://bl.ocks.org) development.\n- Added a JSON schema to make it easier to author `gallery.json` files.\n\n## v0.0.47 (01/24/2020)\n\n- Fixed a bug where the `Gists` view on the `Explorer` tab wasn't properly activating the extension\n- Don't ask for a description when an anonymous user creates a playground.\n\n## v0.0.46 (01/18/2020)\n\n- Allow creating temporary playgrounds without having to sign in.\n- Added UI for configuring playground template galleries when creating new playgrounds\n- Introduced the `Basic` and `Languages` template galleries, which allows you to get started quickly with commonly-used web language configurations (e.g. Pug + Less + JS, HTML + SCSS + TS).\n- Added the `Split Bottom` playground layout mode.\n\n## v0.0.45 (01/17/2020)\n\n- Added support for JavaScript modules, which allows you to `import` other modules, using either an [absolute URL](https://www.pika.dev/cdn), or a relative path to another JavaScript module in the gist. See an example [here](https://gist.github.com/lostintangent/21727eab0d79c7b9fd0dde92df7b1f50)\n- Removed the default keybindings, since they were conflicting with other VS Code keybindings\n\n## v0.0.44 (01/06/2020)\n\n- Added the `New Secret Playground` command, which allows you to create playgrounds that are backed by secret gists\n- Introduced the concept of \"playground templates\", which allow you to create new playgrounds from a \"standard\" template (e.g. React.js, Vue), or define your own templates and then create new playgrounds from that over time\n- Added the `Active Gist` view that displays all of the files/actions of the currently open gist. To begin this, this only supports playgrounds, and the view shows/hides itself when you actually have a playground open.\n- Added the new `GistPad > Playgrounds: Include Script` setting, to allow indicating that you don't want a `script.js` file for new playgrounds\n- Updated the `Gists` tree to include icons that indicate the \"type\" of gist (code, playground, jupyter notebook or document), and whether it's public or secret\n- Added an inline action to gist tree nodes that allow you to open them with a single-click\n- Updated the playground auto-save feature, so that it doesn't attempt to run when you're 1) signed out, or 2) have a playground open you don't own\n\n## v0.0.43 (01/05/2020)\n\n- Added support for Sass, in addition to the existing support for SCSS. This was primarily added for improved interop with CodePen (e.g. [3D Texbox](https://codepen.io/jouanmarcel/pen/Powbrgq).\n- Gists can now be opened (via the `Open Gist` command) using either the `username/id` format or any URL whose path ends with that (e.g. `http://bl.ocks.org/simzou/6459889`)\n- Added keyboard shortcuts for opening a gist and creating new public gists\n- Added the `Open Gist` command to the `Your Gists` node in the `Gists` view\n- Added the `GistPad: Refresh Gists` command to the command palette (in addition to the title bar of the `Gists` view)\n- Added the `Copy GistPad URL` command to gist nodes in the `Gists` view\n- Updated the `Copy File to Gist` command to support multi-select in both the `Gists` view and the file explorer\n- Added support for `XMLHttpRequests` calls in playgrounds, inlcuding the ability to request relative paths in your Gist (e.g. [US Map of Nielsen Media Markets](http://bl.ocks.org/simzou/6459889))\n- Added support for referencing JavaScript and CSS files in your playgrounds via `<script />` and `<link />` tags (e.g. [Fantasy Map Generator](http://bl.ocks.org/Azgaar/b845ce22ea68090d43a4ecfb914f51bd))\n- Fixed the `Save All` command when you've edited multiple files in the same gist\n\n## v0.0.42 (01/02/2020)\n\n- Added support for fully round-tripping external scripts/stylesheets from CodePen, and fixed a caching issue when exporting the same playground multiple times in a short timespan\n- Fixed a bug with viewing starred gists, when you had a starred gist from an anonymous user\n\n## v0.0.41 (01/01/2020)\n\n- Added the `Upload File(s)...` command to gist nodes in the `Gists` view, which allows easily uploading one or more local files to a gist\n- Added the ability to star your own gists\n- Updated the `Starred Gists` list to use the same display name formatting and sorting as the `Your Gists` and followed user lists\n- Added the ability to paste images into HTML and Pug files\n- Removed the `Add Active File` command from gist nodes in the `Gists` view, in favor of the `Copy File to Gist` command that's available in the `Explorer` view and on the editor tab's context menu\n\n## v0.0.40 (12/31/2019)\n\n- Replaced the `Add Playground Script` and `Add Playground Stylesheet` commands with the `Add Playground Library` command. Additionally, this new command has been added to the \"playground\" toolbar to simplify the process of adding new libraries.\n\n## v0.0.39 (12/31/2019)\n\n- Added the `View Profile in GitHub` command to followed user's in the `Gists` tree view.\n- The tree node for followed users now displays the user's GitHub avatar, instead of the generic user icon.\n- Added the `Rename File` command to the editor title bar, which allows easily renaming opened files, without having to find them in the `Gists` tree and/or using workspace-mode.\n- Added support to the protocol handler for programatically following users (e.g. `vscode://vsls-contrib.gistfs/follow?user=lostintangent`).\n\n## v0.0.38 (12/30/2019)\n\n- Added the ability to star the gist's for user's you're following.\n\n## v0.0.37 (12/30/2019)\n\n- Introduced the `preview` playground layout type, which allows viewing a playground's preview in full-screen mode.\n- Added support for opening playgrounds as workspaces, without needing to be authenticated with GitHub.\n\n## v0.0.36 (12/30/2019)\n\n- Introduced support for defining your playground stylesheets in [Less](http://lesscss.org/), by either renaming your `style.css` file to `style.less` and/or setting the `GistPad > Playground: Stylsheet Language` setting to `less`.\n\n## v0.0.35 (12/29/2019)\n\n- Added the `Change Playground Layout` command, as well as the `GistPad > Playground: Layout` setting, to allow developers to control the layout of the playground editors.\n\n  ![Layout](https://user-images.githubusercontent.com/116461/71560396-5152fc80-2a1e-11ea-9cff-a9590e1ea779.gif)\n\n- Added the `showConsole` and `layout` options to the `playground.json` file, to allow playgrounds to define whether they require specific layout/console behavior.\n\n## v0.0.34 (12/28/2019)\n\n- Introduced the `Duplicate Gist` command to the `Gists` tree view, which allows you to create new gists, based on the contents of an existing one.\n- Added multi-select support to the `Gists` tree view, and added support for the following commands: deleting gists, unstarring gists, deleting gist files, and unfollowing users.\n- The `Starred Gists` node is now hidden in the tree view unless you actually have any starred gists. Additionally, when displayed, this node is collapsed by default.\n\n## v0.0.33 (12/28/2019)\n\n- Introduced auto-save behavior for playgrounds, that will automatically save your playground files every 30s, to ensure you don't lose any work. Additionally, introduced the `GistPad > Playground: Auto Save` setting, to disable auto-save behavior if desired.\n\n## v0.0.32 (12/27/2019)\n\n- Added the `Export Playground to CodePen` menu item to the `Gists` tree, which allows you to develop a playground locally, and then export it to CodePen in order to share with the community.\n\n  ![Export](https://user-images.githubusercontent.com/116461/71533903-39f60100-28b0-11ea-9e16-891a110c7074.gif)\n\n## v0.0.31 (12/27/2019)\n\n- Added support for referencing external stylsheets in a playground's `playground.json` file. Simply add a URL for a CSS file to the `styles` property, and it will be injected into the preview before your playground's custom styles.\n\n- Added the `Add Playground Script` and `Add Playground Stylesheet` commands to the tree view, to make it easy to add new libraries to a playground without needing to actually open the `playground.json` file. Additionally, these commands now allow you to directly paste a URL, in addition to selecting a library from CDNJS\n\n## v0.0.30 (12/26/2019)\n\n- Added the `Copy File to Gist` context menu to gist file node's in the tree view, which allows easily moving files between gists\n\n## v0.0.29 (12/26/2019)\n\n- Added support for SCSS and Pug to playgrounds, so that you can use them as alternatives to CSS and HTML (respectively). Additionally, introduced a new `GistPad > Playground: Stylesheet Language` and `GistPad > Playground: Markup Language` settings, which allows you to configure `pug` and/or `scss` as the default stylesheet/markup languages can for all new playgrounds.\n\n- Improved the CodePen interop with playgrounds by adding support for pens that...\n\n  - Omit an HTML file (e.g. [ZIM Tree Puzzle](https://gist.github.com/lostintangent/5916cb2b62bbfcdcda0ac108a479bfd2))\n  - Reference external stylesheets (e.g. [Hotel Reservation Design](https://codepen.io/FlorinPop17/pen/eYmWRdm))\n  - Use Babel as their scripting language. _Note: Babel support is provided by simply transpiling the Babel code with TypeScript, so there may be some subtle interop problems._\n\n## v0.0.28 (12/24/2019)\n\n- Added support for playgrounds to include relative URLs in their `index.html` file\n- Improved the CodePen interop with playgrounds by adding support for pens that omit a script file, which is neccessary for CodePen interop (e.g. [Loading Liquid Animation](https://codepen.io/prathameshkoshti/pen/MWYmzeM)\n\n## v0.0.27 (12/23/2019)\n\n- Added initial support for opening CodePens that have been exported to Gists\n\n  ![CodePen](https://user-images.githubusercontent.com/116461/71393589-171ed080-25c2-11ea-8138-ba075daf7d37.gif)\n\n## v0.0.26 (12/22/2019)\n\n- Introduced the concept of \"playground libraries\", which allow you to include JavaScript libraries into a playground, by simply adding their URL to the `scripts` property in the playground's `playground.json` file.\n\n- Added support for `.jsx` and `.tsx` files within a playground. If you rename your `script.js` file to one of these extensions, then you can include JSX in the file and it will be automatically compiled. Additionally, the `GistPad > Playground: Script Language` setting now supports two new values: `javascriptreact` and `typescriptreact`. Finally, in order to simplify React-based playgrounds, the `react` and `react-dom` libraries will be automatically injected into React-based playgrounds.\n\n- Added support for `console.log` in web playgrounds. When you open a playground, it will create a new `GistPad Playground` output pane and any calls to `console.log` within your playground will be written to it. By default, the console isn't automatically displayed, but you can either manually open it, or run the `GistPad: Open Playground Console` command.\n\n  ![console](https://user-images.githubusercontent.com/116461/71329302-49540380-24d8-11ea-900c-afbf84b50da9.gif)\n\n* Introduced the `GistPad > Playground: Auto Run` setting, which allows you to control when playground code is run. Additionally, we added the `GistPad: Run Playground` command, which allows you to manually run a playground.\n\n* Added the `Add Document to Gist` command to the editor's context menu (e.g. when you right-click the editor tab).\n\n## v0.0.25 (12/21/2019)\n\n- Added the ability to sort Gists alphabetically, in addition to the default sort behavior of updated time.\n\n## v0.0.24 (12/21/2019)\n\n- Added support for web playgrounds without HTML and/or CSS files. If you don't need them (e.g. because you're primarily using playgrounds for JS dev), then you can delete the files from the playground and everything will still work. Additionally, you can set the `GistPad > Playground: Include Stylesheet` or `GistPad > PlayGround: Include Markup` settings to `false` in order to suppress these files from future playgrounds.\n- Fixed markdown files to open in edit mode by default as opposed to preview mode.\n\n## v0.0.23 (12/18/2019)\n\n- Added support for TypeScript to web playgrounds. Simply rename the `script.js` file to `script.ts` and the code will be transparently compiled for you as you code. Additionally, you can set the `GistPad: Playground Script Language` setting to `typescript` in order to create an `script.ts` file for all new playgrounds.\n\n  ![TS](https://user-images.githubusercontent.com/116461/71221927-414f5600-2283-11ea-81a7-2331fc85185b.gif)\n\n## v0.0.22 (12/18/2019)\n\n- Introduced the concept of a Gist \"Web Playground\", which allows you to do rapid prototyping of web front-end code, that's backed by a Gist\n\n  ![Playground](https://user-images.githubusercontent.com/116461/71195678-47254700-2243-11ea-9b09-aa28ec526185.gif)\n\n- Updated the `Delete Gist` command, to automatically close all opened editors that were associated with the deleted gist\n- Fixed a bug where the `Gists` tree view sometimes not rendering properly\n- Fixed a bug in the `Open Gist as Workspace` command that would open the Gist files multiple times\n\n## v0.0.21 (12/15/2019)\n\n- Improving auth reliability, by detecting whether or not a specified token includes the `gist` scope or not.\n\n## v0.0.20 (12/15/2019)\n\n- Introduced support for SSO with the `git` CLI, when you've authenticated with github.com. To disable this, you can set the new `GistPad: Git SSO` setting to `false`.\n\n## v0.0.19 (12/15/2019)\n\n- Added the `Open Profile in GitHub` context menu to the `Your Gists` tree node, which allows opening your Gist profile page\n- Added the `Open GistLog Feed` context menu to the `Your Gists` tree node, which allows opening your GistLog feed page\n\n## v0.0.18 (12/14/2019)\n\n- Introduced support for creating [GistLog](https://gistlog.co) posts via a new `GistPad: New GistLog` command\n\n  ![GistLog](https://user-images.githubusercontent.com/116461/70856110-fdc3a900-1e8a-11ea-8e26-2c3917e11db0.gif)\n\n- Added a new `Open Gist in GistLog` context menu to gists, that allows you to view an existing Gist on [GistLog](https://gistlog.co)\n- Exposed the `New Public Gist`, `New Secret Gist` and `New GistLog` commands via the context menu on the `Your Gists` tree node\n- Introduced a new `Gistpad: Show Comment Thread` configuration option, that allows you to configure when the Gist comment thread UI is displayed.\n\n## v0.0.17 (12/12/2019)\n\n- Added a new `Open Gist in NbViewer` context menu to gists, that allows you to open Gists with Jupyter Notebooks in the [Jupyter Nbviewer](https://nbviewer.jupyter.org/)\n- Fixed a bug, that impacted Gist files with special characters in their name (e.g. `*`, `?`)\n- Fixed a bug with comment threads, that ensure they're always displayed at the bottom of the file, even after making edits\n\n## v0.0.16 (12/11/2019)\n\n- Added a new `Clone Repository` context menu to gists, that allows you to clone a gist's repository locally\n- Introduced a new `gistpad.apiUrl` setting, which allows users to use GitHub Enterprise servers\n\n## v0.0.15 (12/08/2019)\n\n- Added support for opening image files in a Gist, and viewing their preview\n- Added a new `Copy URL` context menu item to Gist files, in order to quickly get their \"raw URL\"\n- Add the ability to open gists with a custom protocol handler:\n\n  - `Using gist URL`: vscode://vsls-contrib.gistfs/open-gist?url=https://gist.github.com/legomushroom/b01737ed99192dab436adea1d6d92975\n  - `Using gist Id`: vscode://vsls-contrib.gistfs/open-gist?id=b01737ed99192dab436adea1d6d92975\n\n## v0.0.14 (12/07/2019)\n\n- \ud83d\uddbc\ufe0f Implement the `Paste Screenshot` command that allows to paste a screenshot from your clipboard into the gist.\n\n  ![paste-screenshot](https://user-images.githubusercontent.com/1478800/70382701-9a7ac980-1914-11ea-9fb0-6e55424e2e54.gif)\n\n- Removed the extension dependencies, and simply document them as being recommended in the readme\n\n## v0.0.13 (12/07/2019)\n\n- Gists are now sorted by their last update time, not alphabetically (in both the tree view and command palette)\n\n## v0.0.12 (12/02/2019)\n\n- Added the ability to view, add, edit and delete comments within the editor \ud83c\udf89\n\n  <img width=\"783\" src=\"https://user-images.githubusercontent.com/116461/70117955-a9633280-161b-11ea-88a5-ac8a15a3b7a0.png\" />\n\n- Added an extension dependency on the [Markdown All in One](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one) extension\n- Allow specifying a Gist URL in addition to an ID when opening a Gist\n\n## v0.0.11 (11/30/2019)\n\n- Added an extension dependency on the [GitHub Markdown Preview](https://marketplace.visualstudio.com/items?itemName=bierner.github-markdown-preview) extension, so that the VS Code markdown preview behaves similarly to GitHub's.\n\n## v0.0.10 (11/30/2019)\n\n- Added a new `Paste Gist File` command to the editor's context menu, which allows you to paste a Gist file into the active editor\n\n## v0.0.9 (11/29/2019)\n\n- Introduced the ability to follow users, so you can browser/access/fork their Gists directly from the `Gists` view\n\n     <img width=\"252\" src=\"https://user-images.githubusercontent.com/116461/69890797-c03e1800-12ef-11ea-85be-7d6fe2c8c7ef.png\" />\n\n* Added a new `Open Gist in Browser` command to the `Gists` view, which opens a Gist in your default browser\n* Added a new `Copy Gist URL` command to the `Gists` view, which allows you to copy a Gist's URL to your clipboard\n\n## v0.0.8 (11/29/2019)\n\n- Added a new `Add Selection to Gist` command to the editor context menu. This allows you to add a snippet of code to a Gist, instead to an entire document (via the `Add Document to Gist`).\n- Updated the `Gists` view to use the description as the Gist label (or it's file name if there isn't a description)\n\n## v0.0.7 (11/28/2019)\n\n- Added a new `Add Document to Gist` command to the context menu of both the `Explorer` tree and the document editor. This way you can easily add files to a gist\n\n  <img width=\"260px\" src=\"https://user-images.githubusercontent.com/116461/69831695-58001100-11df-11ea-997e-fc8020556348.png\" /> <img width=\"400px\" src=\"https://user-images.githubusercontent.com/116461/69831691-53d3f380-11df-11ea-8578-266e27ec4d43.png\" />\n\n- Added the `Copy Contents` command to the `Gists` view, which allows you to copy file contents and paste them into other files\n- Updated the `Add Active File` command within the `Gists` view to support \"untitled\" files\n\n## v0.0.6 (11/28/2016)\n\n- Renamed the existing from `GistFS` to `GistPad`, to best reflect it's purpose\n- Introduced a `GistPad` tab, to allow you choose between managing Gists in it's own side-bar, or via the `Gists` view on the `Explorer` tab\n- Added the `Change Description` command to the `Gists` view, which allows changing an existing Gist's description\n- Added the `Rename File` command to the `Gists` view, which allows renaming an existing file in a Gist\n- Added the `Add Active File` command to the `Gists` view, which allows \"uploading\" the active editor to the specified Gist\n- Remove the username prefix from the display name of your own Gists\n- Added a lock icon (\ud83d\udd12) suffix to the display name of secret Gists\n\n## v0.0.5 (11/27/2019)\n\n- Introduced the `Gists` view to the `Explorer` tab, which allows you to manage/access your Gists from a single place\n\n     <img width=\"300px\" src=\"https://user-images.githubusercontent.com/116461/69827991-d56f5580-11ce-11ea-9081-17f27b470fd1.png\" />\n\n## v0.0.4 (11/27/2019)\n\n- Improved the `GistPad: Delete Gist` command, by allowing you to select a Gist from your list of Gists, instead of just providing a Gist ID\n- Improved the `GistPad: Open Gist` command, by allowing you to select one of your Gists from a list, instead of just providing a Gist ID\n- Updated the default behavior of opening gists, to open them as \"loose files\" instead of as a workspace\n- Introduced a new `GistPad: Open Gist as Workspace` command, which behaves the same as `GistPad: Open Gist`, but opens the Gist as a workspace instead of \"loose files\"\n- Added support for being able to seed multiple files when creating a Gist, by specifying a comma-separated list of files names\n- Added a progress indicator when creating a new Gist\n- Introduced a new `GistPad: Sign In` command, to explicitly sign in to your GitHub account\n- When opening the files for a Gist, Markdown files are now displayed in preview mode by default\n\n## v0.0.3 (11/26/2019)\n\n- Introduced the `GistPad: List Gists` command, which lets you view your list of gists and then open one\n- Introduced the `GistPad: Starred Gists` command, which lets you view your starred of gists and then open one\n\n## v0.0.2 (11/25/2019)\n\n- Replaced the `GistPad: New Gist` command with the following commands, in order to simplify Gist creation: `GistPad: New Gist (Public)`, `GistPad: New Gist (Secret)`\n\n## v0.0.1 (11/24/2019)\n\nInitial release! \ud83c\udf89\n", "# GistPad \ud83d\udcd8\n\nGistPad is a Visual Studio Code extension that allows you to edit GitHub [Gists](https://gist.github.com/) and repositories from the comfort of your favorite editor. You can open, create, delete, fork and star gists and repositories, and then seamlessly begin editing files **as if they were local**, without ever cloning, pushing or pulling anything. It's like your very own developer library for building and referencing code snippets, commonly-used config/scripts, programming-related notes, [knowledge bases](#wikis) and [interactive samples](#codeswing).\n\n<img src=\"https://user-images.githubusercontent.com/116461/69910156-96274b80-13fe-11ea-9be4-d801f4e9c377.gif\" width=\"750px\" />\n\n## Table of Contents\n\n- **[Getting Started](#getting-started)**\n- **[Gist Management](#gist-management)**\n  - [Sorting and grouping](#sorting-and-grouping)\n  - [Files and Directories](#files-and-directories)\n  - [Commenting](#gist-commenting)\n  - [Pasting Images](#pasting-images)\n  - [Following Users](#following-users)\n  - [Exporting to Repositories](#exporting-to-repositories)\n  - [Scratch Notes](#scratch-notes)\n  - [Showcase](#showcase)\n  - [GistLog](#gistlog)\n- **[Repository Management](#repositories)**\n  - [Branches](#branches)\n  - [Wikis](#wikis)\n- **[CodeSwing](#codeswing)**\n- **[Contributed Commands](#contributed-commands-file-explorer)**\n- **[Configuration Settings](#configuration-settings)**\n\n## Getting Started\n\n1. Install this extension from the marketplace and then reload VS Code\n\n1. Open the `GistPad` tab _(look for the notebook icon in the activity bar)_. From there, you can open a Gist or GitHub repo by ID/URL, or sign in with a GitHub account in order to manage your [gists](#gist-management) and [repositories](#repositories).\n\n   To sign-in, simply click the `Sign In` button and follow the provided flow in order to authenticate with your GitHub account.\n\nFrom here, you can create and edit [gists](#gist-management), [repositories](#repositories), [wikis](#wikis) and [runnable code samples](#codeswing). Have fun and let us know how we can make your knowledge management experience even more awesome \ud83d\ude4c\n\n## Gist Management\n\nIn order to create a new gist, simply open up the `Gists` tree in the `GistPad` tab, and click the `+` icon in the toolbar and specify the description and files to seed it with (including support for [directories](#files-and-directories)!). Additionally, you can create gists from local files or snippets, by right-clicking them in the `Explorer` tree, or right-clicking an editor window/tab, and selecting `Copy File to Gist`, `Add Selection to Gist` or `Paste Gist File Contents` ([details](#contributed-commands-editor))\n\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/69903980-98819b00-1355-11ea-913b-c51981891bcd.png\" />\n\n> Alternative, you can run the `GistPad: New Gist` and `GistPad: New Secret Gist` commands to create gists.\n\nFrom here, you can edit gist files by expanding the gist and clicking the desired file. Furthermore, you can open, rename, delete, etc. gists by right-clicking them in the tree and using one of the provided commands.\n\n### Sorting and Grouping\n\nBy default, the `Gists` tree sorts gist by their update-time, which allows you to focus on the most recently used gists. However, if you'd like to sort your gists alphabetically, you can click the sort toggle button on the `Gists` tree's toolbar.\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75098896-65276480-5570-11ea-9880-a76347a15f73.png\" />\n\nAdditionally, by default, your gists are displayed as a flat list. However, if you'd like to group them by type, you can click the group toggle button on the `Gists` tree's toolbar.\n\n <img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75098775-3fe62680-556f-11ea-8253-3198b00837e1.png\" />\n\n#### Gist Types\n\nWhen grouping is enabled, gists are grouped into the following built-in types:\n\n- **note** - Gists that are composed of nothing but `.txt`, `.md`/`.markdown` or `.adoc` files\n- **notebook** - Gists that are compose of nothing by Jupyter Notebook files (`.ipynb`)\n- **code-swing** - Gists that include either a `codeswing.json` file and/or an `index.html` file. Read more about swings [here](#codeswing).\n- **code-swing-template** - Swings whose `codeswing.json` file sets the `template` property to `true`. Read more about swing templates [here](#user-templates).\n- **code-swing-tutorial** - Swings whose `codeswing.json` file specifies a `tutorial` property. Read more about tutorials [here](#tutorials).\n- **code-tour** - Gists that include a `main.tour` file, and were created by exporting a [CodeTour](#codetour).\n- **diagram** - Gists that include a `.drawio` file.\n- **flash-code** - Gists that include a `.deck` file.\n- **code-snippet** - Gists that don't match any of the above more-specific types.\n\nAdditionally, if you want to group gists by your own custom types, then simply add a tag to the end of the gist's description, using the following format: `#tag` (or `#tag-name`). Then, when you enable grouping of gists, your gists will be grouped by both the aforementioned types, as well as your custom tag types. You can identify tag groups by the use of the `#` icon next to them.\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75264671-9c7e5700-57a4-11ea-9bee-eb61cfb9d2f0.png\" />\n\n### Files and Directories\n\nWhen you create a gist via the `New Gist` (or `New Secret Gist`) command, you can specify a comma-separated list of file names to seed the gist with. Furthermore, you could add `/` to your filenames, in order to add them to a sub-directory within the gist. For example, if you create a new gist, and specify `todos/personal.txt,todos/work.txt,reminders.txt`, the gist will include a `reminders.txt` file at the root of the gist, and `personal.txt` and `reminders.txt` files within a new directory called `todos`.\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/74593846-7b6b7880-4fe4-11ea-9bf8-722bf7887ef1.png\" />\n\nAt any time, you can add new files to a gist or directory by right-clicking them and selecting `Add New File(s)` or `Upload File(s)`. You can also rename/delete directories as well, by right-clicking them in the tree and selecting the appropriate command. If you'd like to move a file from one directory to another, simply right-click the file, select `Rename File` and edit the directory name that it's in. It's that simple!\n\n### Gist Commenting\n\nGist comments are exposed within the editor at the bottom of any opened Gist files. If a Gist includes multiple files, then the comment thread will be displayed at the bottom of them all (duplicated and synchronized).\n\n<img src=\"https://user-images.githubusercontent.com/116461/70118599-42467d80-161d-11ea-85eb-7f4cc6e4006b.gif\" width=\"700px\" />\n\nIf you're not authenticated, you can view existing comments, but you can't reply to them. If you are authenticated, you can add/reply, as well as edit/delete your own comments. In order to control the behavior of how Gist comment threads are displayed, refer to the `GistPad > Comments: Show Thread` config setting.\n\n### Pasting Images\n\nIn order to make it easy to author markdown and HTML/Pug files that include image assets, you can copy images into your clipboard (e.g. taking a screenshot, clicking `Copy Image` in your browser, etc.) and then paste them directly into a gist file by right-clicking the editor and selecting `Paste Image`, or using one of the following keyboard shortcuts: `ctrl + shift + v` _(Windows/Linux)_,`cmd + shift + v` _(macOS)_.\n\n![paste-image](https://user-images.githubusercontent.com/1478800/70382701-9a7ac980-1914-11ea-9fb0-6e55424e2e54.gif)\n\nBy default, when you paste an image into a Gist file, it's uploaded as a `.png` to the gist, and the appropriate reference is added to it from the document (e.g. inserting an `<img />`). However, this behavior can be changed by using the `GistPad > Images: Paste Format` and/or `GistPad > Images: Paste Type` settings. Refer to the [config settings](#configuration-settings) section below for more details.\n\nBy default, when you paste an image, it is uploaded to a directory called `images` within the gist. However, if you'd like to change this (e.g. to `assets` instead), you can set the `GistPad > Images: Directory Name` setting.\n\n### Following Users\n\nGitHub Gists already allows you to star other user's gists, and when you do that, those will appear in the `Gists` tree, underneath a `Starred Gists` node. However, if you want to follow a GitHub user, and easily browse all of their current and future gists (without having to star each one!), you can run the `GistPad: Follow User` command and specify their GitHub user name. Once you've done that, you'll see a new node in the `Gists` tree which displays all of their public gists, and allows you to open/fork/clone/star them just like any other gist.\n\n<img width=\"252\" src=\"https://user-images.githubusercontent.com/116461/69890797-c03e1800-12ef-11ea-85be-7d6fe2c8c7ef.png\" />\n\n### Exporting to Repositories\n\nAt some point, your code/notes might outgrow the feature set offered by Gists (e.g. when you want to start collaborating on the content with other developers). In that event, you can simply right-click the gist, and select the `Export to Repository` command in order to create a new GitHub repository, that contains the content of your gist. The created repo will be public or private, depending on the public/private state of the exported gist.\n\n### Scratch Notes\n\nTo make it easy to capture ephemeral/fleeting notes as you learn new things throughout the day, GistPad allows you to create \"scratch notes\" by clicking the `New scratch note...` command under the `Scratch Notes` node in the `Gists` tree (or running the `GistPad: New Scratch Note` command). A scratch note is simply a text document, whose name is formatted based on the day/time it was created.\n\nBy default, scratch notes create Markdown documents, but you can customize that behavior (e.g. to create text/AsciiDoc/etc. files) by customizing the `GistPad > Scratch Notes: File Extension` setting. Furthermore, scratch notes are created per day, but you can customize this by setting the `GistPad > Scratch Notes: Directory Format` and `GistPad > Scratch Notes: File Format` settings.\n\nIn order to help differentiate scratch notes from your \"permanent notes\", scratch notes appear as children of a top-level `Scratch Notes` node in the `Gists` tree. This makes it easy to view your outstanding scratch notes, so you can periodically audit them, in order to migrate any meaningful content to a more appropriate location (e.g. a new or existing gist).\n\n<img width=\"200px\" src=\"https://user-images.githubusercontent.com/116461/75699016-908f0b00-5c64-11ea-95d9-e8c8faf93738.png\" />\n\nYou can create as many scratch notes as you need, and when you're done with them, you can delete individual notes and/or clear all of your notes by right-clicking the `Scratch Notes` node in the tree and selecting `Clear Scratch Notes`.\n\n> Behind the scenes, scratch notes are simply files that are managed within a \"special\" secret gist on your behalf. This way, you can focus entirely on the ephemeral nature of the notes, and not worry about creating/deleting gists.\n\n### Showcase\n\nIn order to illustrate what you can do with gists and [code swings](#codeswing), as well as keep up-to-date with the cool stuff that folks in the community are building, you can check out the `Showcase` view in the `GistPad` tab. This shows a list of categories, which are meant to highlight different use cases for gists, along with some examples. Simply click the `Open` button for any gist in order to explore it, or expand the gist to see its file contents. If you have a gist that you think is worth showcasing, please open an issue and let us know about it. Otherwise, we'll keep the showcase updated periodically, to highlight new and interesting things. So stay tuned!\n\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/74891549-2c9f4500-533c-11ea-9bbb-c5907d41a589.png\" />\n\n### GistLog\n\nIn addition to being able to use Gists to share code snippets/files, you can also use it as a mini-blog, thanks to integration with [GistLog](https://gistlog.co). In order to start blogging, simply run the `GistPad: New GistLog` command, which will create a new Gist that includes two files: `blog.md` and `gistlog.yml`.\n\n![GistLog](https://user-images.githubusercontent.com/116461/70856110-fdc3a900-1e8a-11ea-8e26-2c3917e11db0.gif)\n\nThe `blog.md` file will be automatically opened for editing, and as soon as you're ready to publish your post, open `gistlog.yml` and set the `published` property to `true`. Then, right-click your Gist and select the `Open Gist in GistLog` menu. This will open your browser to the URL that you can share with others, in order to read your new post.\n\nIn addition to being able to view individual posts on GistLog, you can also open your entire feed by right-clicking the `Your Gists` tree node and selecting the `Open Feed in GistLog` menu item. This will launch your GistLog landing page that displays are published GistLog posts.\n\n## Repositories\n\nIn addition to managing gists, GistPad also allows you to create and edit GitHub repos without needing to clone anything locally. To get started, run the `GistPad: Open Repository` command, and specify/select the name of the repo you'd like to start managing. If you want to create a new repo, then select the `Create new repo` or `Create new private repo` options, then specify the name of the repo.\n\nAfter running this command, you'll see a new `Repositories` tree in the `GistPad` tab, which displays the selected repo(s). From here, you can add/upload/edit/delete/rename files, and behind the scenes, your edits will be translated into commits on the respective repo. GistPad will automatically keep your data in sync with GitHub, so you never have to think about pushing or pulling. You can just focus on editing \ud83d\ude80\n\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/87234682-46dbcd00-c388-11ea-9c57-6ce0e8c3105a.png\" />\n\n> Note: Once you're managing at least one repository, you can create/manage new repositories by clicking the `+` icon in the toolbar of the `Repositories` tree.\n\n### Directories\n\nIn order to create new directories, simply add a new file and include the directory names in the specified file's path (e.g. `foo/bar/baz.md`). GistPad will then create any necessary directories as part of the file creation process. Furthermore, if you want to move a file from one directory to another, simply right-click the file in the `Repositories` tree, select `Rename File`, and then specify the new directory name in the file's path.\n\n### Repo Templates\n\nIn addition to creating a new repo \"from scratch\", you can also create a repository from a [repo template](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template). To do this, simply run the `GistPad: Open Repository` command and select the `Create new repo from template` or `Create new private repo from template` options. You'll be presented with some \"well-known\" repo templates to select from, but you can also specify the name of an arbitrary repo template as well.\n\n### Branches\n\nBy default, when you create/manage a repository, GistPad will assume you're interested in editing the `master` branch. However, when managing a repo, you can specify a different branch by appending `#<branch>` to the specified repo name (e.g. `vsls-contrib/gistpad#featureA`). When you're managing a non-master branch, the repo node in the `Repositories` tree will display the branch name.\n\nIf at any time, you want to switch branches, simply right-click the repo node in the `Repositories` tree and select `Switch Branch`. This will let you pick one of the repo's remote branches, as well as create a new branch. When you're done with a branch, simply right-click the repo and select either `Delete Branch` or `Merge Branch`. The later will perform a \"squash merge\" against `master`. Using branches allows you to \"batch\" change sets together, and then apply them in a single/semantic commit.\n\n### Pasting Images\n\nJust like gists, you can copy images into your clipboard (e.g. taking a screenshot, clicking `Copy Image` in your browser, etc.) and then paste them directly into a markdown file by right-clicking the editor and selecting `Paste Image`, or using one of the following keyboard shortcuts: `ctrl+shift+v` _(Windows/Linux)_,`cmd+shift+v` _(macOS)_.\n\nBy default, when you paste an image into a repo file, it's uploaded as a `.png` to the repo, and the appropriate reference is added to it from the document (e.g. an `[title](url)` link). However, this behavior can be changed by using the `GistPad > Images: Paste Format` and/or `GistPad > Images: Paste Type` settings. Refer to the [config settings](#configuration-settings) section below for more details. Furthermore, when you paste an image, it is uploaded to a directory called `images` within the gist. However, if you'd like to change this (e.g. to `assets` instead), you can set the `GistPad > Images: Directory Name` setting.\n\n### Wikis\n\nBy default, when you create/manage a GitHub repository, GistPad will let you edit it like a remotely-accessible \"file system\". However, if you'd like to use the repo as a Roam/Obsidian-like wiki, that's composed of bi-directionally linked markdown pages, then you can indicate that the repo is a wiki in one of the following ways:\n\n1. Including `wiki` in the repo's name (e.g. `lostintangent/gistpad-wiki`)\n1. Adding a `gistpad.json` or `.vscode/gistpad.json` file to the repo itself\n\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/87234704-83a7c400-c388-11ea-90a8-2a660bef4dc5.png\" />\n\n> Note: For interoperability with Foam, GistPad will also identify a repo as a wiki if it includes a `.vscode/foam.json` file.\n\n#### Pages\n\nWikis are composed of \"pages\", which are markdown files that are identified using their `# Heading`, not their underlying file name. As a result, when you add a new page to a wiki, you simply give it a title/heading (e.g. `Todo List`), as opposed to a file path. Behind the scenes, GistPad will create a new markdown file and pre-populate file name and `# Heading` using the specified title.\n\nAdditionally, to make it really simple to add a new wiki page, you can either run the `GistPad: Add Wiki Page` command, or click the notebook icon in your status bar.\n\n<img width=\"75px\" src=\"https://user-images.githubusercontent.com/116461/100490918-7c354d00-30d4-11eb-97d1-28035258656b.png\" />\n\n> Note: While wikis add a \"pages\" abstraction layer on top of repos, they are still repos behind the scenes. As a result, if you like to add an arbitrary [file or directory](#files-and-directories) to your wiki, you can right-click it's node in the tree and select `Add New File`.\n\n#### Daily Pages\n\nIn addition to being able to create topic-oriented pages, GistPad allows you to open your \"today page\" at any time, which makes it easy to keep track of your daily progress and/or journal. To open your current daily page (that represents today), simply click on the calendar icon to the right of the repo node in the `Repositories` tree. This will open a new page, that is titled based on the current date (e.g. `June 24, 2020`), and placed in a directory named `Daily`. If this page doesn't exist, GistPad will create it, otherwise, it will open the existing one.\n\n<img width=\"800px\" src=\"https://user-images.githubusercontent.com/116461/87234721-b356cc00-c388-11ea-946a-e7f9c92258a6.png\" />\n\nAdditionally, to make it really simple to open your \"today page\", you can either run the `GistPad: Open Today Page` command, or click the calendar icon in your status bar.\n\n<img width=\"75px\" src=\"https://user-images.githubusercontent.com/116461/100490937-a981fb00-30d4-11eb-9e69-e7ab9b9bab61.png\" />\n\n> If you'd like to change the name of the directory that daily pages are stored in, you can set the `GistPad > Wikis > Daily: Directory Name` setting. Furthermore, if you want to change the format that is used to title daily pages, you can set the `GistPad > Wikis > Daily: Title Format` setting.\n\n#### Links\n\nIn order to create connections between pages, you can add `[[links]]` to a page. When you type `[[`, GistPad will display a completion list of the name of all existing pages. Furthermore, you can type a new topic/page title, and GistPad will automatically create that page for you.\n\nWhen a page includes `[[links]]`, they will be syntax highlighted, and you can hover over them to quickly see the context of the referenced page. Furthermore, you can `cmd+click` the link in order to directly jump to that page. If the page doesn't already exit, then `cmd+clicking` it will automatically create the page before opening it. This workflow makes it easy to author and navigate the set of pages within your wiki.\n\n<img width=\"800px\" src=\"https://user-images.githubusercontent.com/116461/87234714-96ba9400-c388-11ea-92c3-544d9a3bb633.png\" />\n\n#### Backlinks\n\nWhen you add `[[links]]` to a page, the referenced page automatically detects the \"back link\", and displays it as a child node of the page in the `Repositories` tree. This allows you to navigate `[[links]]` bi-directionallly, and allows your wiki to form a \"network\" of information. Each back link displays a line preview of the reference, and when clicked will automatically navigate you to the page location that references the selected page.\n\nFurthermore, when you open a page that contains backlinks, the set of backlinks will be displayed at the bottom of the page, including a line preview of the backlink. This makes it possible to have pages that don't actually include content themselves, but rather, are simply \"topic aggregators\" to view the connections between pages in the same wiki.\n\n#### Embedding Files\n\nIn addition to adding links to pages, it's sometimes valuable to embed the contents of another page directly into a note, so that you can easily read them together. To do this, you can use the `![[link]]` syntax, where you'll recieve auto-completion support just like regular links. When you use an embed link, the target page's contents will be displayed within the note whenever you view it's markdown preview.\n\n## CodeSwing\n\nIf you're building web applications, and want to create a quick playground environment in order to experiment with HTML, CSS or JavaScript (or [Sass/SCSS, Less, Pug and TypeScript](#additional-language-support)), you can install the [CodeSwing extension](https://aka.ms/codeswing), in order to have a CodePen-like web experience, integrated into VS Code. GistPad provides an integration with CodeSwing, and so once it's installed, you can right-click the `Your Gists` node in the `GistPad` tree and select `New CodeSwing` or `New Secret CodeSwing`. This will create a new gist, seeded with the selected template fiels, and then provide you with a live preview Webview, so that you can iterate on the code and visually see how it behaves.\n\nWhen you create a new swing, you'll be asked to select a template, which is simply a way to get started quickly, using the libraries and languages you intend to use (e.g. React.js, Vue.js). Since the swing is backed by a Gist, your changes are saved and shareable with your friends. Additionally, as you find other swings that you'd like to use, simply fork them and create your own swings. That way, you can use Gists as \"templates\" for swing environments, and collaborate on them with others just like you would any other gist. When you're done with a swing, simply close the preview window and all other documents will be automatically closed. If you no longer need the swing, then delete it just like any other gist \ud83d\udc4d\n\n## Contributed Commands (File Explorer)\n\nIn addition to the `Gists` view, GistPad also contributes an `Copy File to Gist` command to the context menu of the `Explorer` file tree, which allows you to easily add local files to a new or existing Gist.\n\n<img width=\"260px\" src=\"https://user-images.githubusercontent.com/116461/69831695-58001100-11df-11ea-997e-fc8020556348.png\" />\n\n## Contributed Commands (Editor)\n\nIn addition to the `Explorer` file tree commands, GistPad also contributes the following commands to the editor's context menu:\n\n- `Add Selection to Gist` - Allows you to add a snippet/selection of code to a Gist, instead of the entire document\n\n- `Paste Gist File` - Allows you to paste the contents of a Gist file into the active editor\n\n- `Paste Image` - Allows you to paste an image from your clipboard into a markdown, HTML or Pug file. The command will automatically upload the image and then add a reference to it.\n\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/69903980-98819b00-1355-11ea-913b-c51981891bcd.png\" />\n\nThe `Copy File to Gist` command is also available on the editor tab's context menu.\n\n## Contributed Commands (Editor Title Bar)\n\nIn addition to the commands added to the editor context menu, GistPad also contributes the following commands to the editor's title bar menu (click the `...` in the upper right section of an editor window):\n\n- `Rename File` - Allows you to rename the current file.\n\n## Contributed Commands (Command Palette)\n\nIn addition to the `Gists` view, this extension also provides the following commands:\n\n- `GistPad: Delete Gist` - Allows you to delete one of your Gists. If you have a Gist workspace open, it will delete that and then close the folder\n\n- `GistPad: Follow User` - Follow another GitHub user, which allows you to browser/access/fork their Gists from within the `Gists` view.\n\n- `GistPad: Fork Gist` - Forks the currently opened Gist, and then opens it as a virtual workspace.\n\n- `GistPad: Open Gist` - Displays your list of Gists (if you're signed in), and then opens the files for the selected one. You can also specify a gist by URL, `username/id`, or ID, which doesn't require being signed in.\n\n- `GistPad: Open Gist as Workspace` - Same behavior as the `GistPad: Open Gist` command, but will open the selected Gist as a workspace, instead of \"loose files\".\n\n- `GistPad: New Gist` - Creates a new [public Gist](https://help.github.com/en/enterprise/2.13/user/articles/about-gists#public-gists), and then opens its associated files. If you'd like to seed the gist with multiple files, you can specify a comma-separated list of names (e.g. `foo.txt,bar.js`).\n\n- `GistPad: New Scratch Note` - Creates a new \"scratch note\", which is a file whose name is derived from the `GistPad > Scratch Notes: Extension` and `Gist > Scratch Notes: Format` settings.\n\n- `GistPad: New Secret Gist` - Same behavior as the `GistPad: New Gist (Public)` command, except that it creates a [secret Gist](https://help.github.com/en/enterprise/2.13/user/articles/about-gists#secret-gists).\n\n- `GistPad: New CodeSwing` - Creates a new [CodeSwing](#CodeSwing).\n\n- `GistPad: New GistLog` - Creates a [GistLog](#gistlog).\n\n- `GistPad: Refresh Gists` - Refreshes the gist data and reloads the `Gists` tree.\n\n- `GistPad: Sign In` - Sign-in with a GitHub account, in order to view/edit/delete your Gists.\n\n- `GistPad: Starred Gists` - Lists your starred Gists, and then opens the files for the selected one.\n\n- `GistPad: Paste Gist File - Allows you to paste the contents of a Gist file into the active editor\n\n## Configuration Settings\n\n- `Gistpad: Tree Icons` - Specifies whether to show the gist type icons in the gists tree.\n\n- `GistPad > Comments: Show Thread` - Specifies when to show the comment thread UI whenever you open a Gist file. Can be set to one of the following values:\n\n  - `always`: Always display the comment thread whenever you open a Gist file. You can manually collapse it as needed.\n  - `never`: Never automatically open the comment thread when you open a Gist file. You can manually expand it as needed.\n  - `whenNotEmpty` _(default)_: Automatically display the comment thread whenever there are actually comments in a Gist file. Otherwise, leave it collapsed.\n\n- `Gistpad > Images: Paste Format`: Specifies the markup format to use when pasting an image into a gist file. Can be set to one of the following values:\n\n  - `markdown` _(default)_: Pastes the image reference using `Markdown` format (e.g. `![image](link)`).\n  - `html`: Pastes the image reference using `HTML` format (e.g. `<img src=\"link\" />`). Note, when you paste an image into an HTML file, it will always use this format type, regardless what the setting is.\n\n- `Gistpad > Images: Paste Type`: Specifies the method to use when pasting an image into a gist file. Can be set to one of the following values:\n\n  - `file` _(default)_: The pasted image is uploaded as a `.png` to the gist, and a reference is added to file it's pasted into.\n  - `base64`: The pasted image is base64-encoded and then embedded into the gist file.\n\n- `Gistpad > Images: Upload Directory Name`: Specifies the name of the directory to upload images to. Defaults to `images`.\n\n- `GistPad > Scratch Notes: Directory Format` - Specifies the [moment.js](https://momentjs.com/) format string to use when generating directories for new scratch notes. Defaults to `LL` (e.g. `March 6, 2020`).\n\n- `GistPad > Scratch Notes: File Extension` - Specifies the file extension to use when generating new scratch notes. Defaults to `.md`.\n\n- `GistPad > Scratch Notes: File Format` - Specifies the [moment.js](https://momentjs.com/) format string to use when generating new scratch notes. Defaults to `LT` (e.g. `2:52 PM`).\n\n- `GistPad > Scratch Notes: Show` - Specifies whether or not to display the scratch notes node in the gists tree view. Defaults to `true`.\n\n- `GistPad > Showcase URL` - Specifies the URL to use when displaying the showcase entry. This allows teams/classrooms/etc. to create their own showcase and share it amongst themselves.\n", "{\n  \"name\": \"gistfs\",\n  \"displayName\": \"GistPad\",\n  \"description\": \"Manage your code snippets and developer notes using GitHub Gists and repositories.\",\n  \"publisher\": \"vsls-contrib\",\n  \"version\": \"0.2.7\",\n  \"extensionKind\": [\n    \"ui\",\n    \"workspace\"\n  ],\n  \"icon\": \"images/icon.png\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/lostintangent/gistpad\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/lostintangent/gistpad/issues\"\n  },\n  \"homepage\": \"https://github.com/lostintangent/gistpad#readme\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"vscode\": \"^1.48.0\"\n  },\n  \"categories\": [\n    \"Other\"\n  ],\n  \"keywords\": [\n    \"github\",\n    \"gist\",\n    \"snippets\",\n    \"wiki\",\n    \"notes\"\n  ],\n  \"activationEvents\": [\n    \"*\",\n    \"onFileSystem:repo\",\n    \"onFileSystem:gist\"\n  ],\n  \"main\": \"./out/prod/extension.js\",\n  \"contributes\": {\n    \"configuration\": {\n      \"type\": \"object\",\n      \"title\": \"GistPad\",\n      \"properties\": {\n        \"gistpad.treeIcons\": {\n          \"default\": \"true\",\n          \"type\": \"boolean\",\n          \"description\": \"Specifies whether to show the gist type icons in the gists tree.\"\n        },\n        \"gistpad.comments.showThread\": {\n          \"default\": \"whenNotEmpty\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"always\",\n            \"never\",\n            \"whenNotEmpty\"\n          ],\n          \"description\": \"Specifies when to display the comment thread when you open a Gist file.\"\n        },\n        \"gistpad.images.directoryName\": {\n          \"default\": \"images\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the name of the directory that pasted images are uploaded to.\"\n        },\n        \"gistpad.images.markdownPasteFormat\": {\n          \"default\": \"markdown\",\n          \"enum\": [\n            \"html\",\n            \"markdown\"\n          ],\n          \"description\": \"Specifies the markup format to use when pasting an image into a markdown gist file.\"\n        },\n        \"gistpad.images.pasteType\": {\n          \"default\": \"file\",\n          \"enum\": [\n            \"base64\",\n            \"file\"\n          ],\n          \"description\": \"Specifies the upload method to use when pasting an image into a gist file.\"\n        },\n        \"gistpad.scratchNotes.directoryFormat\": {\n          \"default\": \"\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the moment.js format string to use when generating new scratch notes.\"\n        },\n        \"gistpad.scratchNotes.fileFormat\": {\n          \"default\": \"LL\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the moment.js format string to use when generating new scratch notes.\"\n        },\n        \"gistpad.scratchNotes.fileExtension\": {\n          \"default\": \".md\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the file extension to use when generating new scratch notes.\"\n        },\n        \"gistpad.scratchNotes.show\": {\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"description\": \"Specifies whether or not to display the scratch notes node in the gists tree view.\"\n        },\n        \"gistpad.showcaseUrl\": {\n          \"default\": \"https://aka.ms/gistpad-showcase\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the URL of the showcase to display gists from.\"\n        },\n        \"gistpad.wikis.daily.directoryName\": {\n          \"default\": \"Daily\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the name of the directory that daily pages are organized within.\"\n        },\n        \"gistpad.wikis.daily.titleFormat\": {\n          \"default\": \"LL\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the date format (using Moment.js syntax) that is used to for the title of daily pages.\"\n        }\n      }\n    },\n    \"commands\": [\n      {\n        \"command\": \"gistpad.addDirectoryFile\",\n        \"title\": \"Add New File(s)\"\n      },\n      {\n        \"command\": \"gistpad.addFile\",\n        \"title\": \"Add New File(s)\"\n      },\n      {\n        \"command\": \"gistpad.addFileToGist\",\n        \"title\": \"Copy File to Gist\"\n      },\n      {\n        \"command\": \"gistpad.addGistComment\",\n        \"title\": \"Add Comment\",\n        \"enablement\": \"!commentIsEmpty\"\n      },\n      {\n        \"command\": \"gistpad.addRepositoryComment\",\n        \"title\": \"Add Comment\",\n        \"enablement\": \"!commentIsEmpty\"\n      },\n      {\n        \"command\": \"gistpad.addRepositoryFile\",\n        \"title\": \"Add New File\",\n        \"icon\": \"$(add)\"\n      },\n      {\n        \"command\": \"gistpad.addSelectionToGist\",\n        \"title\": \"Add Selection to Gist\",\n        \"enablement\": \"editorHasSelection\"\n      },\n      {\n        \"command\": \"gistpad.addWikiPage\",\n        \"title\": \"Add Wiki Page\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(add)\"\n      },\n      {\n        \"command\": \"gistpad.changeGistDescription\",\n        \"title\": \"Change Description\"\n      },\n      {\n        \"command\": \"gistpad.clearScratchNotes\",\n        \"title\": \"Clear Scratch Notes\"\n      },\n      {\n        \"command\": \"gistpad.cloneManagedRepository\",\n        \"title\": \"Clone Repository\"\n      },\n      {\n        \"command\": \"gistpad.cloneRepository\",\n        \"title\": \"Clone Repository\"\n      },\n      {\n        \"command\": \"gistpad.copyFileContents\",\n        \"title\": \"Copy File Contents\"\n      },\n      {\n        \"command\": \"gistpad.copyFileUrl\",\n        \"title\": \"Copy GitHub URL\"\n      },\n      {\n        \"command\": \"gistpad.copyGistPadUrl\",\n        \"title\": \"Copy GistPad URL\"\n      },\n      {\n        \"command\": \"gistpad.copyGistUrl\",\n        \"title\": \"Copy GitHub URL\"\n      },\n      {\n        \"command\": \"gistpad.copyRepositoryFileUrl\",\n        \"title\": \"Copy GitHub URL\"\n      },\n      {\n        \"command\": \"gistpad.copyRepositoryUrl\",\n        \"title\": \"Copy Repository URL\"\n      },\n      {\n        \"command\": \"gistpad.deleteDirectory\",\n        \"title\": \"Delete Directory\"\n      },\n      {\n        \"command\": \"gistpad.deleteFile\",\n        \"title\": \"Delete File\"\n      },\n      {\n        \"command\": \"gistpad.deleteGist\",\n        \"title\": \"Delete Gist\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.deleteGistComment\",\n        \"title\": \"Delete Comment\"\n      },\n      {\n        \"command\": \"gistpad.deleteRepositoryBranch\",\n        \"title\": \"Delete Branch\"\n      },\n      {\n        \"command\": \"gistpad.deleteRepositoryComment\",\n        \"title\": \"Delete Comment\"\n      },\n      {\n        \"command\": \"gistpad.deleteRepositoryDirectory\",\n        \"title\": \"Delete Directory\"\n      },\n      {\n        \"command\": \"gistpad.deleteRepositoryFile\",\n        \"title\": \"Delete File\"\n      },\n      {\n        \"command\": \"gistpad.deleteRepository\",\n        \"title\": \"Delete Repository\"\n      },\n      {\n        \"command\": \"gistpad.duplicateRepositoryFile\",\n        \"title\": \"Duplicate File\"\n      },\n      {\n        \"command\": \"gistpad.duplicateDirectory\",\n        \"title\": \"Duplicate Directory\"\n      },\n      {\n        \"command\": \"gistpad.duplicateFile\",\n        \"title\": \"Duplicate File\"\n      },\n      {\n        \"command\": \"gistpad.duplicateGist\",\n        \"title\": \"Duplicate Gist\"\n      },\n      {\n        \"command\": \"gistpad.editGistComment\",\n        \"title\": \"Edit Comment\"\n      },\n      {\n        \"command\": \"gistpad.editRepositoryComment\",\n        \"title\": \"Edit Comment\"\n      },\n      {\n        \"command\": \"gistpad.openRepository\",\n        \"title\": \"Open Repository\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(add)\"\n      },\n      {\n        \"command\": \"gistpad.exportGistToCodePen\",\n        \"title\": \"Export to CodePen\"\n      },\n      {\n        \"command\": \"gistpad.exportToRepo\",\n        \"title\": \"Export to Repository\"\n      },\n      {\n        \"command\": \"gistpad.exportTour\",\n        \"title\": \"Export Tour to Gist...\"\n      },\n      {\n        \"command\": \"gistpad.followUser\",\n        \"title\": \"Follow User\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.forkGist\",\n        \"title\": \"Fork Gist\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.hideScratchNotes\",\n        \"title\": \"Hide Scratch Notes\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.mergeRepositoryBranch\",\n        \"title\": \"Merge Branch\"\n      },\n      {\n        \"command\": \"gistpad.newGistLog\",\n        \"title\": \"New GistLog\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.newSwing\",\n        \"title\": \"New CodeSwing\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.newScratchNote\",\n        \"title\": \"New Scratch Note\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(add)\"\n      },\n      {\n        \"command\": \"gistpad.newSecretSwing\",\n        \"title\": \"New Secret CodeSwing\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.newPublicGist\",\n        \"title\": \"New Gist\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(add)\"\n      },\n      {\n        \"command\": \"gistpad.newSecretGist\",\n        \"title\": \"New Secret Gist\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(gist-secret)\"\n      },\n      {\n        \"command\": \"gistpad.openGist\",\n        \"title\": \"Open Gist\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(go-to-file)\"\n      },\n      {\n        \"command\": \"gistpad.openGistFile\",\n        \"title\": \"Open Gist File\"\n      },\n      {\n        \"command\": \"gistpad.openGistLogFeed\",\n        \"title\": \"View Feed in GistLog\"\n      },\n      {\n        \"command\": \"gistpad.openGistInBrowser\",\n        \"title\": \"View Gist in GitHub\"\n      },\n      {\n        \"command\": \"gistpad.openGistInBlocks\",\n        \"title\": \"View Gist in Bl.ocks\"\n      },\n      {\n        \"command\": \"gistpad.openGistInGistLog\",\n        \"title\": \"View Gist in GistLog\"\n      },\n      {\n        \"command\": \"gistpad.openGistInNbViewer\",\n        \"title\": \"View Gist in NbViewer\"\n      },\n      {\n        \"command\": \"gistpad.openGistWorkspace\",\n        \"title\": \"Open Gist as Workspace\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.openProfile\",\n        \"title\": \"View Profile in GitHub\"\n      },\n      {\n        \"command\": \"gistpad.openRepositorySwing\",\n        \"title\": \"Open CodeSwing\",\n        \"icon\": \"$(folder-opened)\"\n      },\n      {\n        \"command\": \"gistpad.openRepositoryFileInBrowser\",\n        \"title\": \"View File in GitHub\"\n      },\n      {\n        \"command\": \"gistpad.openRepositoryInBrowser\",\n        \"title\": \"View Repository in GitHub\"\n      },\n      {\n        \"command\": \"gistpad.openTodayPage\",\n        \"title\": \"Open Today Page\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(calendar)\"\n      },\n      {\n        \"command\": \"gistpad.pasteGistFile\",\n        \"title\": \"Paste Gist File\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.pasteImage\",\n        \"title\": \"Paste Image\"\n      },\n      {\n        \"command\": \"gistpad.recordRepoCodeTour\",\n        \"title\": \"Record CodeTour\"\n      },\n      {\n        \"command\": \"gistpad.refreshGists\",\n        \"title\": \"Refresh Gists\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(refresh)\"\n      },\n      {\n        \"command\": \"gistpad.refreshRepositories\",\n        \"title\": \"Refresh Repositories\",\n        \"category\": \"GistPad\",\n        \"icon\": \"$(refresh)\"\n      },\n      {\n        \"command\": \"gistpad.refreshShowcase\",\n        \"title\": \"Refresh Showcase\",\n        \"icon\": {\n          \"dark\": \"images/dark/refresh.svg\",\n          \"light\": \"images/light/refresh.svg\"\n        }\n      },\n      {\n        \"command\": \"gistpad.renameDirectory\",\n        \"title\": \"Rename Directory\"\n      },\n      {\n        \"command\": \"gistpad.renameFile\",\n        \"title\": \"Rename File\"\n      },\n      {\n        \"command\": \"gistpad.renameRepositoryDirectory\",\n        \"title\": \"Rename Directory\"\n      },\n      {\n        \"command\": \"gistpad.renameRepositoryFile\",\n        \"title\": \"Rename File\"\n      },\n      {\n        \"command\": \"gistpad.replyGistComment\",\n        \"title\": \"Reply\",\n        \"enablement\": \"!commentIsEmpty\"\n      },\n      {\n        \"command\": \"gistpad.saveGistComment\",\n        \"title\": \"Save\"\n      },\n      {\n        \"command\": \"gistpad.saveRepositoryComment\",\n        \"title\": \"Save\"\n      },\n      {\n        \"command\": \"gistpad.signIn\",\n        \"title\": \"Sign In\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.groupGists\",\n        \"title\": \"Group Gists\",\n        \"icon\": \"$(group-by-ref-type)\"\n      },\n      {\n        \"command\": \"gistpad.ungroupGists\",\n        \"title\": \"Ungroup Gists\",\n        \"icon\": \"$(ungroup-by-ref-type)\"\n      },\n      {\n        \"command\": \"gistpad.sortGistsAlphabetically\",\n        \"title\": \"Sort Gists Alphabetically\",\n        \"icon\": {\n          \"dark\": \"images/dark/sort-alphabetical.svg\",\n          \"light\": \"images/light/sort-alphabetical.svg\"\n        }\n      },\n      {\n        \"command\": \"gistpad.sortGistsByUpdatedTime\",\n        \"title\": \"Sort Gists by Updated Time\",\n        \"icon\": {\n          \"dark\": \"images/dark/sort-time.svg\",\n          \"light\": \"images/light/sort-time.svg\"\n        }\n      },\n      {\n        \"command\": \"gistpad.starGist\",\n        \"title\": \"Star Gist\"\n      },\n      {\n        \"command\": \"gistpad.starredGists\",\n        \"title\": \"Starred Gists\",\n        \"category\": \"GistPad\"\n      },\n      {\n        \"command\": \"gistpad.startRepoCodeTour\",\n        \"title\": \"Start CodeTour\"\n      },\n      {\n        \"command\": \"gistpad.submitShowcaseEntry\",\n        \"title\": \"Submit Entry\",\n        \"icon\": \"$(megaphone)\"\n      },\n      {\n        \"command\": \"gistpad.switchRepositoryBranch\",\n        \"title\": \"Switch Branch\"\n      },\n      {\n        \"command\": \"gistpad.closeRepository\",\n        \"title\": \"Close Repository\"\n      },\n      {\n        \"command\": \"gistpad.unfollowUser\",\n        \"title\": \"Unfollow User\"\n      },\n      {\n        \"command\": \"gistpad.unstarGist\",\n        \"title\": \"Unstar Gist\"\n      },\n      {\n        \"command\": \"gistpad.uploadFileToDirectory\",\n        \"title\": \"Upload File(s)\"\n      },\n      {\n        \"command\": \"gistpad.uploadFileToGist\",\n        \"title\": \"Upload File(s)\"\n      },\n      {\n        \"command\": \"gistpad.uploadRepositoryFile\",\n        \"title\": \"Upload File(s)\"\n      },\n      {\n        \"command\": \"gistpad.viewForks\",\n        \"title\": \"View Forks\"\n      }\n    ],\n    \"menus\": {\n      \"commandPalette\": [\n        {\n          \"command\": \"gistpad.deleteGist\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.openRepository\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.followUser\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.forkGist\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.signIn\",\n          \"when\": \"gistpad:state != SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.newGistLog\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.newSwing\",\n          \"when\": \"gistpad:state == SignedIn && gistpad:codeSwingEnabled\"\n        },\n        {\n          \"command\": \"gistpad.newPublicGist\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.newSecretGist\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.newScratchNote\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.newSecretSwing\",\n          \"when\": \"gistpad:state == SignedIn && gistpad:codeSwingEnabled\"\n        },\n        {\n          \"command\": \"gistpad.refreshGists\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.refreshRepositories\",\n          \"when\": \"gistpad:hasRepos\"\n        },\n        {\n          \"command\": \"gistpad.starredGists\",\n          \"when\": \"gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.pasteGistFile\",\n          \"when\": \"editorTextFocus\"\n        },\n        {\n          \"command\": \"gistpad.addDirectoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addFileToGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addGistComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addRepositoryComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addRepositoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addSelectionToGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.addWikiPage\",\n          \"when\": \"gistpad:state == SignIn && gistpad:hasWiki\"\n        },\n        {\n          \"command\": \"gistpad.changeGistDescription\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.clearScratchNotes\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.cloneManagedRepository\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.cloneRepository\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyGistPadUrl\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyGistUrl\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyRepositoryFileUrl\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyRepositoryUrl\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyFileContents\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.copyFileUrl\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteGistComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepository\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryBranch\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.duplicateRepositoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.duplicateFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.duplicateDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.duplicateGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.editGistComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.editRepositoryComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.exportGistToCodePen\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.exportToRepo\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.exportTour\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.groupGists\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.hideScratchNotes\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.mergeRepositoryBranch\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.recordRepoCodeTour\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.refreshShowcase\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.starGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.startRepoCodeTour\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistInBlocks\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistInBrowser\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistLogFeed\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistInNbViewer\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openGistInGistLog\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openProfile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openRepositoryFileInBrowser\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openRepositorySwing\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openRepositoryInBrowser\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.openTodayPage\",\n          \"when\": \"gistpad:state == SignIn && gistpad:hasWiki\"\n        },\n        {\n          \"command\": \"gistpad.pasteImage\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.renameDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.renameFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.renameRepositoryDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.renameRepositoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.saveGistComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.saveRepositoryComment\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.sortGistsAlphabetically\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.sortGistsByUpdatedTime\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.submitShowcaseEntry\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.switchRepositoryBranch\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.unfollowUser\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.ungroupGists\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.closeRepository\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.unstarGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.uploadFileToDirectory\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.uploadFileToGist\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.uploadRepositoryFile\",\n          \"when\": \"false\"\n        },\n        {\n          \"command\": \"gistpad.viewForks\",\n          \"when\": \"false\"\n        }\n      ],\n      \"view/title\": [\n        {\n          \"command\": \"gistpad.newPublicGist\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn\",\n          \"group\": \"navigation@1\"\n        },\n        {\n          \"command\": \"gistpad.newSecretGist\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn\",\n          \"group\": \"navigation@2\"\n        },\n        {\n          \"command\": \"gistpad.sortGistsAlphabetically\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn && gistpad:sortOrder == updatedTime\",\n          \"group\": \"navigation@3\"\n        },\n        {\n          \"command\": \"gistpad.sortGistsByUpdatedTime\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn && gistpad:sortOrder == alphabetical\",\n          \"group\": \"navigation@3\"\n        },\n        {\n          \"command\": \"gistpad.groupGists\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn && gistpad:groupType == none\",\n          \"group\": \"navigation@4\"\n        },\n        {\n          \"command\": \"gistpad.ungroupGists\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn && gistpad:groupType != none\",\n          \"group\": \"navigation@4\"\n        },\n        {\n          \"command\": \"gistpad.refreshGists\",\n          \"when\": \"view =~ /^gistpad.gists(.explorer)?$/ && gistpad:state == SignedIn\",\n          \"group\": \"navigation@5\"\n        },\n        {\n          \"command\": \"gistpad.openRepository\",\n          \"when\": \"view == gistpad.repos\",\n          \"group\": \"navigation@1\"\n        },\n        {\n          \"command\": \"gistpad.refreshRepositories\",\n          \"when\": \"view == gistpad.repos && gistpad:state == SignedIn\",\n          \"group\": \"navigation@2\"\n        },\n        {\n          \"command\": \"gistpad.submitShowcaseEntry\",\n          \"when\": \"view == gistpad.showcase\",\n          \"group\": \"navigation@1\"\n        },\n        {\n          \"command\": \"gistpad.refreshShowcase\",\n          \"when\": \"view == gistpad.showcase\",\n          \"group\": \"navigation@2\"\n        }\n      ],\n      \"view/item/context\": [\n        {\n          \"command\": \"gistpad.newPublicGist\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.newSecretGist\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"inline@2\"\n        },\n        {\n          \"command\": \"gistpad.newPublicGist\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"new@1\"\n        },\n        {\n          \"command\": \"gistpad.newSecretGist\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"new@2\"\n        },\n        {\n          \"command\": \"gistpad.newSwing\",\n          \"when\": \"viewItem == gists && gistpad:codeSwingEnabled\",\n          \"group\": \"newAdvanced@1\"\n        },\n        {\n          \"command\": \"gistpad.newSecretSwing\",\n          \"when\": \"viewItem == gists && gistpad:codeSwingEnabled\",\n          \"group\": \"newAdvanced@2\"\n        },\n        {\n          \"command\": \"gistpad.openGist\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"open@1\"\n        },\n        {\n          \"command\": \"gistpad.openProfile\",\n          \"when\": \"viewItem == gists || viewItem == followedUserGists\",\n          \"group\": \"open@2\"\n        },\n        {\n          \"command\": \"gistpad.openGistLogFeed\",\n          \"when\": \"viewItem == gists\",\n          \"group\": \"open@3\"\n        },\n        {\n          \"command\": \"gistpad.openGist\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.openGist\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"base@1\"\n        },\n        {\n          \"command\": \"gistpad.openGistWorkspace\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"base@2\"\n        },\n        {\n          \"command\": \"gistpad.copyGistUrl\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"browse@1\"\n        },\n        {\n          \"command\": \"gistpad.copyGistPadUrl\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"browse@2\"\n        },\n        {\n          \"command\": \"gistpad.openGistInBrowser\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"browse@3\"\n        },\n        {\n          \"command\": \"gistpad.exportGistToCodePen\",\n          \"when\": \"viewItem =~ /^gists.gist.swing$/\",\n          \"group\": \"browse@4\"\n        },\n        {\n          \"command\": \"gistpad.openGistInBlocks\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist.swing.block$/\",\n          \"group\": \"browse@4\"\n        },\n        {\n          \"command\": \"gistpad.openGistInGistLog\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist$/\",\n          \"group\": \"browse@4\"\n        },\n        {\n          \"command\": \"gistpad.openGistInNbViewer\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist.notebook$/\",\n          \"group\": \"browse@4\"\n        },\n        {\n          \"command\": \"gistpad.duplicateGist\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"copy@1\"\n        },\n        {\n          \"command\": \"gistpad.forkGist\",\n          \"when\": \"viewItem =~ /^(starredGists|followedUser).gist/\",\n          \"group\": \"copy@1\"\n        },\n        {\n          \"command\": \"gistpad.cloneRepository\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"copy@2\"\n        },\n        {\n          \"command\": \"gistpad.exportToRepo\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"copy@3\"\n        },\n        {\n          \"command\": \"gistpad.addFile\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.uploadFileToGist\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.changeGistDescription\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"manage@3\"\n        },\n        {\n          \"command\": \"gistpad.deleteGist\",\n          \"when\": \"viewItem =~ /^gists.gist/\",\n          \"group\": \"manage@4\"\n        },\n        {\n          \"command\": \"gistpad.viewForks\",\n          \"when\": \"viewItem =~ /^(gists|starredGists|followedUser).gist/\",\n          \"group\": \"star@1\"\n        },\n        {\n          \"command\": \"gistpad.starGist\",\n          \"when\": \"viewItem =~ /^(gists|followedUser).gist/\",\n          \"group\": \"star@2\"\n        },\n        {\n          \"command\": \"gistpad.unstarGist\",\n          \"when\": \"viewItem =~ /^starredGists.gist/\",\n          \"group\": \"star@2\"\n        },\n        {\n          \"command\": \"gistpad.unfollowUser\",\n          \"when\": \"viewItem == followedUserGists\",\n          \"group\": \"base@1\"\n        },\n        {\n          \"command\": \"gistpad.copyFileUrl\",\n          \"when\": \"viewItem =~ /^gistFile/\",\n          \"group\": \"base@1\"\n        },\n        {\n          \"command\": \"gistpad.copyFileContents\",\n          \"when\": \"viewItem =~ /^gistFile/\",\n          \"group\": \"base@2\"\n        },\n        {\n          \"command\": \"gistpad.addFileToGist\",\n          \"when\": \"viewItem =~ /^gistFile/\",\n          \"group\": \"base@3\"\n        },\n        {\n          \"command\": \"gistpad.renameFile\",\n          \"when\": \"viewItem == gistFile.editable\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.duplicateFile\",\n          \"when\": \"viewItem == gistFile.editable\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.deleteFile\",\n          \"when\": \"viewItem == gistFile.editable\",\n          \"group\": \"manage@3\"\n        },\n        {\n          \"command\": \"gistpad.addDirectoryFile\",\n          \"when\": \"viewItem == gistDirectory.editable\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.uploadFileToDirectory\",\n          \"when\": \"viewItem == gistDirectory.editable\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.renameDirectory\",\n          \"when\": \"viewItem == gistDirectory.editable\",\n          \"group\": \"mutate@1\"\n        },\n        {\n          \"command\": \"gistpad.duplicateDirectory\",\n          \"when\": \"viewItem == gistDirectory.editable\",\n          \"group\": \"mutate@2\"\n        },\n        {\n          \"command\": \"gistpad.deleteDirectory\",\n          \"when\": \"viewItem == gistDirectory.editable\",\n          \"group\": \"mutate@3\"\n        },\n        {\n          \"command\": \"gistpad.newScratchNote\",\n          \"when\": \"viewItem == scratchGist\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.newScratchNote\",\n          \"when\": \"viewItem == scratchGist\",\n          \"group\": \"base@1\"\n        },\n        {\n          \"command\": \"gistpad.clearScratchNotes\",\n          \"when\": \"viewItem == scratchGist\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.hideScratchNotes\",\n          \"when\": \"viewItem == scratchGist\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.copyRepositoryUrl\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch)?(.hasTours)?$/\",\n          \"group\": \"browse@1\"\n        },\n        {\n          \"command\": \"gistpad.openRepositoryInBrowser\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch)?(.hasTours)?$/\",\n          \"group\": \"browse@2\"\n        },\n        {\n          \"command\": \"gistpad.openRepositorySwing\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.swing$/\",\n          \"group\": \"browse@3\"\n        },\n        {\n          \"command\": \"gistpad.addRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|swing)(.branch|Directory)?(.hasTours)?$/\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.openTodayPage\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.wiki$/\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.openRepositorySwing\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.swing$/\",\n          \"group\": \"inline@1\"\n        },\n        {\n          \"command\": \"gistpad.addWikiPage\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.wiki(Directory)?$/\",\n          \"group\": \"inline@2\"\n        },\n        {\n          \"command\": \"gistpad.openTodayPage\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.wiki$/\",\n          \"group\": \"basic@1\"\n        },\n        {\n          \"command\": \"gistpad.addWikiPage\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.wiki(Directory)?$/\",\n          \"group\": \"basic@2\"\n        },\n        {\n          \"command\": \"gistpad.addRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch|Directory)?(.hasTours)?$/\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.uploadRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch|Directory)?(.hasTours)?$/\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.cloneManagedRepository\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch)?(.hasTours)?$/\",\n          \"group\": \"manage@3\"\n        },\n        {\n          \"command\": \"gistpad.switchRepositoryBranch\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.repo(.branch)?(.hasTours)?$/\",\n          \"group\": \"manageBranch@1\"\n        },\n        {\n          \"command\": \"gistpad.mergeRepositoryBranch\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.repo.branch(.hasTours)?$/\",\n          \"group\": \"manageBranch@2\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryBranch\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.repo.branch(.hasTours)?$/\",\n          \"group\": \"manageBranch@3\"\n        },\n        {\n          \"command\": \"gistpad.startRepoCodeTour\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.repo(.branch)?.hasTours$/\",\n          \"group\": \"tour@1\"\n        },\n        {\n          \"command\": \"gistpad.recordRepoCodeTour\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.repo(.branch)?(.hasTours)?$/\",\n          \"group\": \"tour@2\"\n        },\n        {\n          \"command\": \"gistpad.closeRepository\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch)?(.hasTours)?$/\",\n          \"group\": \"unmanage@1\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepository\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)(.branch)?(.hasTours)?$/\",\n          \"group\": \"unmanage@2\"\n        },\n        {\n          \"command\": \"gistpad.copyRepositoryFileUrl\",\n          \"when\": \"view == gistpad.repos && viewItem == gistpad.repoFile\",\n          \"group\": \"browse@1\"\n        },\n        {\n          \"command\": \"gistpad.openRepositoryFileInBrowser\",\n          \"when\": \"view == gistpad.repos && viewItem == gistpad.repoFile\",\n          \"group\": \"browse@2\"\n        },\n        {\n          \"command\": \"gistpad.renameRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)File$/\",\n          \"group\": \"manage@1\"\n        },\n        {\n          \"command\": \"gistpad.duplicateRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem == gistpad.repoFile\",\n          \"group\": \"manage@2\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryFile\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)File$/\",\n          \"group\": \"manage@3\"\n        },\n        {\n          \"command\": \"gistpad.renameRepositoryDirectory\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)Directory$/\",\n          \"group\": \"mutate@1\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryDirectory\",\n          \"when\": \"view == gistpad.repos && viewItem =~ /^gistpad.(repo|wiki|swing)Directory$/\",\n          \"group\": \"mutate@2\"\n        },\n        {\n          \"command\": \"gistpad.exportTour\",\n          \"when\": \"viewItem =~ /^codetour.tour(.active)?$/\",\n          \"group\": \"export@2\"\n        }\n      ],\n      \"explorer/context\": [\n        {\n          \"command\": \"gistpad.addFileToGist\",\n          \"when\": \"!explorerResourceIsFolder\"\n        }\n      ],\n      \"editor/context\": [\n        {\n          \"command\": \"gistpad.addSelectionToGist\"\n        },\n        {\n          \"command\": \"gistpad.pasteGistFile\"\n        },\n        {\n          \"command\": \"gistpad.pasteImage\",\n          \"when\": \"resourceScheme == repo && resourceLangId == markdown\"\n        },\n        {\n          \"command\": \"gistpad.pasteImage\",\n          \"when\": \"resourceScheme == gist && resourceLangId == markdown\"\n        },\n        {\n          \"command\": \"gistpad.pasteImage\",\n          \"when\": \"resourceScheme == gist && resourceLangId == html\"\n        },\n        {\n          \"command\": \"gistpad.pasteImage\",\n          \"when\": \"resourceScheme == gist && resourceLangId == jade\"\n        }\n      ],\n      \"editor/title\": [\n        {\n          \"command\": \"gistpad.renameFile\",\n          \"when\": \"resourceScheme == gist\"\n        },\n        {\n          \"command\": \"gistpad.deleteFile\",\n          \"when\": \"resourceScheme == gist\"\n        },\n        {\n          \"command\": \"gistpad.renameRepositoryFile\",\n          \"when\": \"resourceScheme == repo\"\n        }\n      ],\n      \"editor/title/context\": [\n        {\n          \"command\": \"gistpad.addFileToGist\"\n        },\n        {\n          \"command\": \"gistpad.copyFileUrl\",\n          \"when\": \"resourceScheme == gist\"\n        },\n        {\n          \"command\": \"gistpad.copyRepositoryFileUrl\",\n          \"when\": \"resourceScheme == repo\"\n        }\n      ],\n      \"comments/comment/title\": [\n        {\n          \"command\": \"gistpad.editGistComment\",\n          \"group\": \"group@1\",\n          \"when\": \"commentController == gistpad && comment == canEdit\"\n        },\n        {\n          \"command\": \"gistpad.deleteGistComment\",\n          \"group\": \"group@2\",\n          \"when\": \"commentController == gistpad && comment == canEdit\"\n        },\n        {\n          \"command\": \"gistpad.editRepositoryComment\",\n          \"group\": \"group@1\",\n          \"when\": \"commentController == gistpad:repo && comment == canEdit\"\n        },\n        {\n          \"command\": \"gistpad.deleteRepositoryComment\",\n          \"group\": \"group@2\",\n          \"when\": \"commentController == gistpad:repo && comment == canEdit\"\n        }\n      ],\n      \"comments/comment/context\": [\n        {\n          \"command\": \"gistpad.saveGistComment\",\n          \"group\": \"inline@2\",\n          \"when\": \"commentController == gistpad\"\n        },\n        {\n          \"command\": \"gistpad.saveRepositoryComment\",\n          \"group\": \"inline@2\",\n          \"when\": \"commentController == gistpad:repo\"\n        }\n      ],\n      \"comments/commentThread/context\": [\n        {\n          \"command\": \"gistpad.addGistComment\",\n          \"group\": \"inline\",\n          \"when\": \"commentController == gistpad && commentThreadIsEmpty && gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.replyGistComment\",\n          \"group\": \"inline\",\n          \"when\": \"commentController == gistpad && !commentThreadIsEmpty && gistpad:state == SignedIn\"\n        },\n        {\n          \"command\": \"gistpad.addRepositoryComment\",\n          \"group\": \"inline\",\n          \"when\": \"commentController == gistpad:repo && commentThreadIsEmpty && gistpad:state == SignedIn\"\n        }\n      ]\n    },\n    \"viewsContainers\": {\n      \"activitybar\": [\n        {\n          \"id\": \"gistpad\",\n          \"title\": \"GistPad\",\n          \"icon\": \"images/icon-activity.svg\"\n        }\n      ]\n    },\n    \"views\": {\n      \"gistpad\": [\n        {\n          \"id\": \"gistpad.gists\",\n          \"name\": \"Gists\"\n        },\n        {\n          \"id\": \"gistpad.repos\",\n          \"name\": \"Repositories\"\n        },\n        {\n          \"id\": \"gistpad.showcase\",\n          \"name\": \"Showcase\",\n          \"visibility\": \"collapsed\",\n          \"when\": \"gistpad:state == SignedIn\"\n        }\n      ]\n    },\n    \"viewsWelcome\": [\n      {\n        \"view\": \"gistpad.gists\",\n        \"contents\": \"Open any GitHub Gist, by either its URL or ID.\\n\\n[$(folder-opened) Open Gist](command:gistpad.openGist)\\n\\nManage your gists, by signing in with a GitHub account.\\n\\n[$(github-inverted) Sign In](command:gistpad.signIn)\"\n      },\n      {\n        \"view\": \"gistpad.repos\",\n        \"contents\": \"Browse GitHub repos, without needing to locally clone files ([Learn More](https://github.com/vsls-contrib/gistpad#repositories)).\\n\\n[$(folder-opened) Open Repository](command:gistpad.openRepository)\\n\\nYou can also edit your repos and wikis, by signing in with a GitHub account ([Learn More](https://github.com/vsls-contrib/gistpad#wikis)).\\n\\n[$(github-inverted) Sign In](command:gistpad.signIn)\",\n        \"when\": \"gistpad:state != SignedIn\"\n      },\n      {\n        \"view\": \"gistpad.repos\",\n        \"contents\": \"Open one of your GitHub repos in order to start remotely browsing and editing files ([Learn More](https://github.com/vsls-contrib/gistpad#repositories)).\\n\\n[$(folder-opened) Open Repository](command:gistpad.openRepository)\",\n        \"when\": \"gistpad:state == SignedIn\"\n      }\n    ],\n    \"jsonValidation\": [\n      {\n        \"fileMatch\": \"showcase.json\",\n        \"url\": \"https://gist.githubusercontent.com/lostintangent/5290f684afc38cfe713246226c1d0f72/raw/schema.json\"\n      }\n    ],\n    \"markdown.markdownItPlugins\": true\n  },\n  \"scripts\": {\n    \"build:browser\": \"webpack --config ./webpack/webpack.browser.config.js\",\n    \"build:node\": \"webpack --config ./webpack/webpack.node.config.js\",\n    \"compile\": \"tsc -p ./\",\n    \"package\": \"vsce package\",\n    \"vscode:prepublish\": \"npm run build:node\",\n    \"watch\": \"webpack --mode=development --watch --progress --config ./webpack/webpack.node.config.js\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.19.2\",\n    \"base64-to-uint8array\": \"^1.0.0\",\n    \"diff-match-patch\": \"^1.0.5\",\n    \"gists\": \"github:lostintangent/gists\",\n    \"github-base\": \"^1.0.0\",\n    \"is-binary-path\": \"^2.1.0\",\n    \"markdown-it\": \"^10.0.0\",\n    \"markdown-it-regex\": \"^0.2.0\",\n    \"mobx\": \"^5.14.2\",\n    \"moment\": \"^2.24.0\",\n    \"rxjs\": \"^6.5.4\",\n    \"simple-git\": \"^1.126.0\",\n    \"title-case\": \"^3.0.2\"\n  },\n  \"devDependencies\": {\n    \"@types/moment\": \"^2.13.0\",\n    \"@types/node\": \"^8.10.25\",\n    \"@types/vscode\": \"^1.48.0\",\n    \"copy-webpack-plugin\": \"^5.0.5\",\n    \"ts-loader\": \"^6.2.1\",\n    \"tslint\": \"^5.8.0\",\n    \"typescript\": \"^3.7.3\",\n    \"vsce\": \"^1.81.1\",\n    \"vscode-nls-dev\": \"^3.3.1\",\n    \"webpack\": \"^4.41.2\",\n    \"webpack-cli\": \"^3.3.10\",\n    \"webpack-merge\": \"^4.2.2\"\n  }\n}", "import * as vscode from \"vscode\";\n\nconst CONFIG_SECTION = \"gistpad\";\n\nexport function get(key: \"treeIcons\"): boolean;\nexport function get(key: \"images.markdownPasteFormat\"): \"markdown\" | \"html\";\nexport function get(key: \"images.pasteType\"): \"file\" | \"base64\";\nexport function get(key: \"images.directoryName\"): string;\nexport function get(key: \"scratchNotes.directoryFormat\"): string;\nexport function get(key: \"scratchNotes.fileExtension\"): string;\nexport function get(key: \"scratchNotes.fileFormat\"): string;\nexport function get(key: \"scratchNotes.show\"): boolean;\nexport function get(key: \"showcaseUrl\"): string;\nexport function get(key: \"comments.showThread\"): string;\nexport function get(key: any) {\n  const extensionConfig = vscode.workspace.getConfiguration(CONFIG_SECTION);\n  return extensionConfig.get(key);\n}\n\nexport async function set(key: string, value: any) {\n  const extensionConfig = vscode.workspace.getConfiguration(CONFIG_SECTION);\n  return extensionConfig.update(key, value, true);\n}\n", "import { commands, ExtensionContext, window, workspace } from \"vscode\";\nimport { EXTENSION_NAME } from \"../../constants\";\nimport { stringToByteArray, withProgress } from \"../../utils\";\nimport { RepoFileSystemProvider } from \"../fileSystem\";\nimport { store } from \"../store\";\nimport { RepositoryFileNode, RepositoryNode } from \"../tree/nodes\";\nimport { openRepoDocument } from \"../utils\";\nimport { getPageFilePath } from \"./utils\";\n\nimport moment = require(\"moment\");\nconst { titleCase } = require(\"title-case\");\n\nfunction createWikiPage(name: string, repo: string, filePath: string) {\n  const fileHeading = `# ${titleCase(name)}\n\n`;\n\n  const uri = RepoFileSystemProvider.getFileUri(repo, filePath);\n  return workspace.fs.writeFile(uri, stringToByteArray(fileHeading));\n}\n\nexport function registerCommands(context: ExtensionContext) {\n  // This is a private command that handles dynamically\n  // creating wiki documents, when the user auto-completes\n  // a new document link that doesn't exist.\n  context.subscriptions.push(\n    commands.registerCommand(\n      `${EXTENSION_NAME}._createWikiPage`,\n      async (repo: string, name: string) => {\n        const fileName = getPageFilePath(name);\n        await createWikiPage(name, repo, fileName);\n\n        // Automatically save the current, in order to ensure\n        // the newly created backlink is discovered.\n        await window.activeTextEditor?.document.save();\n      }\n    )\n  );\n\n  context.subscriptions.push(\n    commands.registerCommand(\n      `${EXTENSION_NAME}.addWikiPage`,\n      async (node?: RepositoryNode | RepositoryFileNode) => {\n        const repoName = node?.repo.name || store.wiki!.name;\n\n        const input = window.createInputBox();\n        input.title = `Add wiki page (${repoName})`;\n        input.prompt = \"Enter the name of the new page you'd like to create\";\n\n        input.onDidAccept(async () => {\n          input.hide();\n\n          if (input.value) {\n            const path = getPageFilePath(input.value);\n            const filePath =\n              node instanceof RepositoryFileNode\n                ? `${node.file.path}/${path}`\n                : path;\n\n            await withProgress(\"Adding new page...\", async () =>\n              createWikiPage(input.value, repoName, filePath)\n            );\n            openRepoDocument(repoName, filePath);\n          }\n        });\n\n        input.show();\n      }\n    )\n  );\n\n  context.subscriptions.push(\n    commands.registerCommand(\n      `${EXTENSION_NAME}.openTodayPage`,\n      async (node?: RepositoryNode) => {\n        const sharedMoment = moment();\n        const fileName = sharedMoment.format(\"YYYY-MM-DD\");\n        const filePath = getPageFilePath(fileName);\n\n        const titleFormat = workspace\n          .getConfiguration(EXTENSION_NAME)\n          .get(\"wikis.daily.titleFormat\", \"LL\");\n\n        const repoName = node?.repo.name || store.wiki!.name;\n        const pageTitle = sharedMoment.format(titleFormat);\n\n        const uri = RepoFileSystemProvider.getFileUri(repoName, filePath);\n        const [, file] = RepoFileSystemProvider.getRepoInfo(uri)!;\n\n        if (!file) {\n          await withProgress(\"Adding new page...\", async () =>\n            createWikiPage(pageTitle, repoName, filePath)\n          );\n        }\n\n        openRepoDocument(repoName, filePath);\n      }\n    )\n  );\n}\n", "import { observable, runInAction, set } from \"mobx\";\nimport { window, workspace } from \"vscode\";\nimport { FollowedUser, Gist, GistComment, GistFile, store } from \".\";\nimport * as config from \"../config\";\nimport {\n  DIRECTORY_SEPARATOR,\n  SCRATCH_GIST_NAME,\n  ZERO_WIDTH_SPACE\n} from \"../constants\";\nimport {\n  byteArrayToString,\n  closeGistFiles,\n  encodeDirectoryName,\n  fileNameToUri,\n  openGistFiles,\n  sortGists,\n  stringToByteArray,\n  updateGistTags,\n  withProgress\n} from \"../utils\";\nimport { getToken } from \"./auth\";\nimport { storage } from \"./storage\";\nimport moment = require(\"moment\");\n\nconst Gists = require(\"gists\");\n\nexport async function getApi(constructor = Gists) {\n  const token = await getToken();\n  return new constructor({ token });\n}\n\nexport async function duplicateGist(\n  id: string,\n  isPublic: boolean = true,\n  description?: string,\n  saveGist: boolean = true\n) {\n  const gist = await getGist(id);\n  const files = [];\n  for (const filename of Object.keys(gist.files)) {\n    const content = byteArrayToString(\n      await workspace.fs.readFile(fileNameToUri(gist.id, filename))\n    );\n    files.push({\n      filename,\n      content\n    });\n  }\n\n  return newGist(files, isPublic, description || gist.description, true);\n}\n\nexport async function getUser(username: string) {\n  const GitHub = require(\"github-base\");\n  const api = await getApi(GitHub);\n\n  try {\n    const response = await api.get(`/users/${username}`);\n    return response.body;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getUserAvatar(username: string) {\n  const user = await getUser(username);\n  return user ? user.avatar_url : null;\n}\n\nexport async function changeDescription(id: string, description: string) {\n  const api = await getApi();\n  const { body } = await api.edit(id, {\n    description\n  });\n\n  const gist = store.gists.find((gist) => gist.id === id)!;\n\n  runInAction(() => {\n    gist.description = body.description;\n    gist.updated_at = body.updated_at;\n  });\n\n  updateGistTags(gist);\n}\n\nexport async function createGistComment(\n  id: string,\n  body: string\n): Promise<GistComment> {\n  const api = await getApi();\n  const gist = await api.createComment(id, { body });\n  return gist.body;\n}\n\nexport async function deleteGist(id: string) {\n  const api = await getApi();\n  await api.delete(id);\n  store.gists = store.gists.filter((gist) => gist.id !== id);\n}\n\nexport async function deleteGistComment(\n  gistId: string,\n  commentId: string\n): Promise<void> {\n  const api = await getApi();\n  await api.deleteComment(gistId, commentId);\n}\n\nexport async function editGistComment(\n  gistId: string,\n  commentId: string,\n  body: string\n): Promise<void> {\n  const api = await getApi();\n  await api.editComment(gistId, commentId, { body });\n}\n\nexport async function followUser(username: string) {\n  const avatarUrl = await getUserAvatar(username);\n  if (!avatarUrl) {\n    window.showErrorMessage(\n      `\"${username}\" doesn't appear to be a valid GitHub user. Please try again.`\n    );\n    return;\n  }\n\n  const followedUsers = storage.followedUsers;\n  if (followedUsers.find((user) => user === username)) {\n    window.showInformationMessage(\"You're already following this user\");\n    return;\n  } else {\n    followedUsers.push(username);\n    storage.followedUsers = followedUsers;\n  }\n\n  const user: FollowedUser = observable({\n    username,\n    avatarUrl,\n    gists: [],\n    isLoading: true\n  });\n\n  store.followedUsers.push(user);\n\n  user.gists = await updateGistTags(await listUserGists(username));\n  user.isLoading = false;\n}\n\nexport async function forkGist(id: string) {\n  const api = await getApi();\n\n  const gist = await api.fork(id);\n  updateGistTags(gist.body);\n\n  store.gists.unshift(gist.body);\n\n  openGistFiles(gist.body.id);\n}\n\nexport async function getForks(id: string) {\n  const api = await getApi();\n  const response = await api.forks(id);\n\n  return response.body.sort(\n    (a: Gist, b: Gist) => Date.parse(b.updated_at) - Date.parse(a.updated_at)\n  );\n}\n\nexport async function getGist(id: string): Promise<Gist> {\n  const api = await getApi();\n  const gist = await api.get(id);\n  return observable(gist.body);\n}\n\nexport async function getGists(ids: string[]): Promise<Gist[]> {\n  return Promise.all(ids.map(getGist));\n}\n\nexport async function getGistComments(id: string): Promise<GistComment[]> {\n  const api = await getApi();\n  const response = await api.listComments(id);\n  return response.body;\n}\n\nexport async function listGists(): Promise<Gist[]> {\n  const api = await getApi();\n  const { pages } = await api.all();\n  const gists: Gist[] = await pages.reduce(\n    (result: Gist[], page: any) => [...result, ...page.body],\n    []\n  );\n\n  return sortGists(gists);\n}\n\nexport async function listUserGists(username: string): Promise<Gist[]> {\n  const api = await getApi();\n  const response = await api.list(username);\n\n  return response.body.sort(\n    (a: Gist, b: Gist) => Date.parse(b.updated_at) - Date.parse(a.updated_at)\n  );\n}\n\nexport async function newGist(\n  gistFiles: GistFile[],\n  isPublic: boolean,\n  description?: string,\n  openAfterCreation: boolean = true\n): Promise<Gist> {\n  const api = await getApi();\n\n  const files = gistFiles.reduce((accumulator, gistFile) => {\n    return {\n      ...accumulator,\n      [gistFile.filename!.trim()]: {\n        content: gistFile.content || ZERO_WIDTH_SPACE\n      }\n    };\n  }, {});\n\n  const rawGist = await api.create({\n    description,\n    public: isPublic,\n    files\n  });\n  const gist = rawGist.body;\n\n  updateGistTags(gist);\n\n  store.gists.unshift(gist);\n\n  if (openAfterCreation) {\n    openGistFiles(gist.id);\n  }\n\n  return gist;\n}\n\nexport async function newScratchNote() {\n  const directoryFormat = config.get(\"scratchNotes.directoryFormat\");\n  const fileFormat = config.get(\"scratchNotes.fileFormat\");\n  const extension = config.get(\"scratchNotes.fileExtension\");\n\n  const sharedMoment = moment();\n  const directory = directoryFormat\n    ? `${sharedMoment.format(directoryFormat)}${DIRECTORY_SEPARATOR}`\n    : \"\";\n\n  const file = sharedMoment.format(fileFormat);\n\n  const filename = `${directory}${file}${extension}`;\n\n  if (!store.scratchNotes.gist) {\n    const api = await getApi();\n\n    const response = await api.create({\n      description: SCRATCH_GIST_NAME,\n      public: false,\n      files: {\n        [encodeDirectoryName(filename)]: {\n          content: ZERO_WIDTH_SPACE\n        }\n      }\n    });\n\n    store.scratchNotes.gist = response.body;\n  } else if (!store.scratchNotes.gist.files.hasOwnProperty(filename)) {\n    await withProgress(\"Creating scratch note...\", async () => {\n      await workspace.fs.writeFile(\n        fileNameToUri(store.scratchNotes.gist!.id, filename),\n        stringToByteArray(\"\")\n      );\n    });\n  }\n\n  const uri = fileNameToUri(store.scratchNotes.gist!.id, filename);\n  window.showTextDocument(uri);\n}\n\nexport async function clearScratchNotes() {\n  const api = await getApi();\n  await api.delete(store.scratchNotes.gist!.id);\n\n  closeGistFiles(store.scratchNotes.gist!);\n  store.scratchNotes.gist = null;\n}\n\nexport async function refreshGists() {\n  store.isLoading = true;\n\n  const gists = updateGistTags(await listGists());\n  store.scratchNotes.gist =\n    gists.find((gist) => gist.description === SCRATCH_GIST_NAME) || null;\n\n  store.gists = store.scratchNotes.gist\n    ? gists.filter((gist) => gist.description !== SCRATCH_GIST_NAME)\n    : gists;\n\n  store.isLoading = false;\n\n  store.starredGists = updateGistTags(await starredGists());\n\n  if (storage.followedUsers.length > 0) {\n    store.followedUsers = storage.followedUsers.map((username) => ({\n      username,\n      gists: [],\n      isLoading: true\n    }));\n\n    for (const followedUser of store.followedUsers) {\n      followedUser.avatarUrl = await getUserAvatar(followedUser.username);\n      followedUser.gists = updateGistTags(\n        await listUserGists(followedUser.username)\n      );\n      followedUser.isLoading = false;\n    }\n  }\n}\n\nexport async function starredGists(): Promise<Gist[]> {\n  const api = await getApi();\n  const { body } = await api.starred();\n  return body;\n}\n\nexport async function unfollowUser(username: string) {\n  storage.followedUsers = storage.followedUsers.filter(\n    (user) => user !== username\n  );\n\n  store.followedUsers = store.followedUsers.filter(\n    (user) => user.username !== username\n  );\n}\n\nexport async function refreshGist(id: string) {\n  const gist = await getGist(id);\n  const oldGist = store.gists.find((gist) => gist.id === id);\n  set(oldGist!, gist);\n}\n\nexport async function starGist(gist: Gist) {\n  const api = await getApi();\n  await api.star(gist.id);\n\n  store.starredGists.push(gist);\n}\n\nexport async function unstarGist(id: string) {\n  const api = await getApi();\n  await api.unstar(id);\n\n  store.starredGists = store.starredGists.filter((gist) => gist.id !== id);\n}\n", "import {\n  authentication,\n  AuthenticationSession,\n  commands,\n  window\n} from \"vscode\";\nimport { store } from \".\";\nimport { EXTENSION_NAME } from \"../constants\";\nimport { refreshGists } from \"./actions\";\nconst GitHub = require(\"github-base\");\n\nlet loginSession: string | undefined;\n\nexport function getCurrentUser() {\n  return store.login;\n}\n\nconst STATE_CONTEXT_KEY = `${EXTENSION_NAME}:state`;\nconst STATE_SIGNED_IN = \"SignedIn\";\nconst STATE_SIGNED_OUT = \"SignedOut\";\n\nconst GIST_SCOPE = \"gist\";\nconst REPO_SCOPE = \"repo\";\nconst DELETE_REPO_SCOPE = \"delete_repo\";\n\n// TODO: Replace github-base with octokit\nexport async function getApi(newToken?: string) {\n  const token = newToken || (await getToken());\n  return new GitHub({ token });\n}\n\nconst TOKEN_RESPONSE = \"Sign in\";\nexport async function ensureAuthenticated() {\n  if (store.isSignedIn) {\n    return;\n  }\n\n  const response = await window.showErrorMessage(\n    \"You need to sign-in with GitHub to perform this operation.\",\n    TOKEN_RESPONSE\n  );\n  if (response === TOKEN_RESPONSE) {\n    await signIn();\n  }\n}\n\nasync function getSession(\n  isInteractiveSignIn: boolean = false,\n  includeDeleteRepoScope: boolean = false\n) {\n  const scopes = [GIST_SCOPE, REPO_SCOPE];\n  if (includeDeleteRepoScope) {\n    scopes.push(DELETE_REPO_SCOPE);\n  }\n\n  try {\n    if (isInteractiveSignIn) {\n      isSigningIn = true;\n    }\n\n    const session = await authentication.getSession(\"github\", scopes, {\n      createIfNone: isInteractiveSignIn\n    });\n\n    if (session) {\n      loginSession = session?.id;\n    }\n\n    isSigningIn = false;\n\n    return session;\n  } catch {}\n}\n\nexport async function getToken() {\n  return store.token;\n}\n\nasync function markUserAsSignedIn(\n  session: AuthenticationSession,\n  refreshUI: boolean = true\n) {\n  loginSession = session.id;\n\n  store.isSignedIn = true;\n  store.token = session.accessToken;\n  store.login = session.account.label;\n  store.canCreateRepos = session.scopes.includes(REPO_SCOPE);\n  store.canDeleteRepos = session.scopes.includes(DELETE_REPO_SCOPE);\n\n  if (refreshUI) {\n    commands.executeCommand(\"setContext\", STATE_CONTEXT_KEY, STATE_SIGNED_IN);\n    await refreshGists();\n  }\n}\n\nfunction markUserAsSignedOut() {\n  loginSession = undefined;\n\n  store.login = \"\";\n  store.isSignedIn = false;\n\n  commands.executeCommand(\"setContext\", STATE_CONTEXT_KEY, STATE_SIGNED_OUT);\n}\n\nlet isSigningIn = false;\nexport async function signIn() {\n  const session = await getSession(true);\n\n  if (session) {\n    window.showInformationMessage(\n      \"You're successfully signed in and can now manage your GitHub gists and repositories!\"\n    );\n    await markUserAsSignedIn(session);\n    return true;\n  }\n}\n\nexport async function elevateSignin() {\n  const session = await getSession(true, true);\n\n  if (session) {\n    await markUserAsSignedIn(session, false);\n    return true;\n  }\n}\n\nasync function attemptSilentSignin(refreshUI: boolean = true) {\n  const session = await getSession();\n\n  if (session) {\n    await markUserAsSignedIn(session, refreshUI);\n  } else {\n    await markUserAsSignedOut();\n  }\n}\n\nexport async function initializeAuth() {\n  authentication.onDidChangeSessions(async (e) => {\n    if (e.provider.id === \"github\") {\n      // @ts-ignore\n      if (e.added.length > 0) {\n        // This session was added based on a GistPad-triggered\n        // sign-in, and so we don't need to do anything further to process it.\n        if (isSigningIn) {\n          isSigningIn = false;\n          return;\n        }\n\n        // The end-user just signed in to Gist via the\n        // VS Code account UI, and therefore, we need\n        // to grab the session token/etc.\n        await attemptSilentSignin();\n        // @ts-ignore\n      } else if (e.changed.length > 0 && e.changed.includes(loginSession)) {\n        // TODO: Validate when this actually fires\n        await attemptSilentSignin(false);\n      }\n      // @ts-ignore\n      else if (e.removed.length > 0 && e.removed.includes(loginSession)) {\n        // TODO: Implement sign out support\n      }\n    }\n  });\n\n  await attemptSilentSignin();\n}\n"], "filenames": ["CHANGELOG.md", "README.md", "package.json", "src/config.ts", "src/repos/wiki/commands.ts", "src/store/actions.ts", "src/store/auth.ts"], "buggy_code_start_loc": [0, 288, 6, 6, 46, 29, 8], "buggy_code_end_loc": [0, 319, 50, 7, 93, 37, 33], "fixing_code_start_loc": [1, 288, 6, 5, 46, 29, 7], "fixing_code_end_loc": [5, 317, 44, 5, 94, 30, 30], "type": "CWE-863", "message": "GistPad before 0.2.7 allows a crafted workspace folder to change the URL for the Gist API, which leads to leakage of GitHub access tokens.", "other": {"cve": {"id": "CVE-2021-29642", "sourceIdentifier": "cve@mitre.org", "published": "2021-03-30T19:15:15.863", "lastModified": "2021-06-04T19:07:58.987", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GistPad before 0.2.7 allows a crafted workspace folder to change the URL for the Gist API, which leads to leakage of GitHub access tokens."}, {"lang": "es", "value": "GistPad versiones anteriores a 0.2.7, permite a una carpeta de workspace dise\u00f1ada cambiar la URL de la API de Gist, lo que conlleva a un filtrado de tokens de acceso de GitHub."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gistpad_project:gistpad:*:*:*:*:*:visual_studio:*:*", "versionEndExcluding": "0.2.7", "matchCriteriaId": "9F0B8CF3-767C-4E8D-868F-5C3C316045D6"}]}]}], "references": [{"url": "https://github.com/lostintangent/gistpad/commit/230b05e8dea8d7ac5aae998bbe0a591d7f081b70", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuln.ryotak.me/advisories/7", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/lostintangent/gistpad/commit/230b05e8dea8d7ac5aae998bbe0a591d7f081b70"}}