{"buggy_code": ["/*   __    __         _\n *   \\ \\  / /__ _ __ (_) ___ ___\n *    \\ \\/ / _ \\ '_ \\| |/ __/ _ \\\n *     \\  /  __/ | | | | (_|  __/\n *      \\/ \\___|_| |_|_|\\___\\___|\n *\n *\n * Copyright 2017-2022 Venice\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.github.jlangch.venice.impl.util.io;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport com.github.jlangch.venice.VncException;\nimport com.github.jlangch.venice.impl.util.io.zip.ZipFileSystemUtil;\nimport com.github.jlangch.venice.javainterop.ILoadPaths;\n\n\npublic class LoadPaths implements ILoadPaths {\n\n    private LoadPaths(\n            final List<File> paths,\n            final boolean unlimitedAccess\n    ) {\n        if (paths != null) {\n            this.paths.addAll(paths);\n        }\n        this.unlimitedAccess = unlimitedAccess;\n    }\n\n    public static LoadPaths of(\n            final List<File> paths,\n            final boolean unlimitedAccess\n    ) {\n        if (paths == null || paths.isEmpty()) {\n            return new LoadPaths(null, unlimitedAccess);\n        }\n        else {\n            final List<File> savePaths = new ArrayList<>();\n\n            for(File p : paths) {\n                if (p != null) {\n                    if (p.isFile() || p.isDirectory()) {\n                        savePaths.add(canonical(p.getAbsoluteFile()));\n                    }\n                    else {\n                        // skip silently\n                    }\n                }\n            }\n\n            return new LoadPaths(savePaths, unlimitedAccess);\n        }\n    }\n\n    @Override\n    public String loadVeniceFile(final File file) {\n        if (file == null) {\n            return null;\n        }\n        else {\n            final String path = file.getPath();\n\n            final String vncFile = path.endsWith(\".venice\") ? path : path + \".venice\";\n\n            final ByteBuffer data = load(new File(vncFile));\n\n            return data == null\n                    ? null\n                    : new String(data.array(), getCharset(\"UTF-8\"));\n        }\n    }\n\n    @Override\n    public ByteBuffer loadBinaryResource(final File file) {\n        return load(file);\n    }\n\n    @Override\n    public String loadTextResource(final File file, final String encoding) {\n        final ByteBuffer data = load(file);\n\n        return data == null\n                ? null\n                : new String(data.array(), getCharset(encoding));\n    }\n\n    @Override\n    public List<File> getPaths() {\n        return Collections.unmodifiableList(paths);\n    }\n\n    @Override\n    public boolean isOnLoadPath(final File file) {\n        if (file == null) {\n            throw new IllegalArgumentException(\"A file must not be null\");\n        }\n        else if (unlimitedAccess) {\n            return true;\n        }\n        else {\n            final File f = canonical(file);\n            final File dir = f.getParentFile();\n\n            // check load paths\n            for(File p : paths) {\n                if (p.isDirectory()) {\n                    if (dir.equals(p)) return true;\n                }\n                else if (p.isFile()) {\n                    if (f.equals(p)) return true;\n                }\n            }\n\n            return false;\n        }\n    }\n\n    @Override\n    public boolean isUnlimitedAccess() {\n        return unlimitedAccess;\n    }\n\n\n    private ByteBuffer load(final File file) {\n        final ByteBuffer dataFromLoadPath = paths.stream()\n                                                 .map(p -> loadFromLoadPath(p, file))\n                                                 .filter(d -> d != null)\n                                                 .findFirst()\n                                                 .orElse(null);\n\n        if (dataFromLoadPath != null) {\n            return dataFromLoadPath;\n        }\n        else if (unlimitedAccess && file.isFile()) {\n            return loadFile(file);\n        }\n        else {\n            return null;\n        }\n    }\n\n    private ByteBuffer loadFromLoadPath(\n            final File loadPath,\n            final File file\n    ) {\n        if (loadPath.getName().endsWith(\".zip\")) {\n            return loadFileFromZip(loadPath, file);\n        }\n        else if (loadPath.isDirectory()) {\n            return loadFileFromDir(loadPath, file);\n        }\n        else if (loadPath.isFile()) {\n            final File f = canonical(file);\n            if (loadPath.equals(f)) {\n                try {\n                    return ByteBuffer.wrap(Files.readAllBytes(f.toPath()));\n                }\n                catch(IOException ex) {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    private ByteBuffer loadFileFromZip(\n            final File zip,\n            final File file\n    ) {\n        if (zip.exists()) {\n            try {\n                return ZipFileSystemUtil\n                            .loadBinaryFileFromZip(zip, file)\n                            .getValue();\n            }\n            catch(Exception ex) {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    private ByteBuffer loadFileFromDir(final File loadPath, final File file) {\n        try {\n            if (file.isAbsolute()) {\n                return isFileWithinDirectory(loadPath, file)\n                        ? loadFile(file)\n                        : null;\n            }\n            else {\n                final File f = new File(loadPath, file.getPath());\n                return f.isFile()\n                        ? loadFile(new File(loadPath, file.getPath()))\n                        : null;\n            }\n        }\n        catch (Exception ex) {\n            throw new VncException(\n                        String.format(\"Failed to load file '%s'\", file.getPath()),\n                        ex);\n        }\n    }\n\n    private static File canonical(final File file) {\n        try {\n            return file.getCanonicalFile();\n        }\n        catch(IOException ex) {\n            throw new VncException(\n                    String.format(\n                            \"The file '%s' can not be converted to a canonical path!\",\n                            file.getPath()),\n                    ex);\n        }\n    }\n\n    private ByteBuffer loadFile(final File file) {\n        try {\n            return ByteBuffer.wrap(Files.readAllBytes(file.toPath()));\n        }\n        catch(IOException ex) {\n            return null;\n        }\n    }\n\n    private boolean isFileWithinDirectory(\n            final File dir,\n            final File file\n    ) throws IOException {\n        final File dir_ = dir.getAbsoluteFile();\n        if (dir_.isDirectory()) {\n            final File fl = new File(dir_, file.getPath());\n            if (fl.isFile()) {\n                if (fl.getCanonicalPath().startsWith(dir_.getCanonicalPath())) {\n                    // Prevent accessing files outside the load-path.\n                    // E.g.: ../../coffee\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private Charset getCharset(final String encoding) {\n        return encoding == null || encoding.isEmpty()\n                ? Charset.defaultCharset()\n                : Charset.forName(encoding);\n    }\n\n\n    // a list of existing canonical paths\n    private final List<File> paths = new ArrayList<>();\n    private final boolean unlimitedAccess;\n}\n"], "fixing_code": ["/*   __    __         _\n *   \\ \\  / /__ _ __ (_) ___ ___\n *    \\ \\/ / _ \\ '_ \\| |/ __/ _ \\\n *     \\  /  __/ | | | | (_|  __/\n *      \\/ \\___|_| |_|_|\\___\\___|\n *\n *\n * Copyright 2017-2022 Venice\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.github.jlangch.venice.impl.util.io;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport com.github.jlangch.venice.VncException;\nimport com.github.jlangch.venice.impl.util.io.zip.ZipFileSystemUtil;\nimport com.github.jlangch.venice.javainterop.ILoadPaths;\n\n\npublic class LoadPaths implements ILoadPaths {\n\n    private LoadPaths(\n            final List<File> paths,\n            final boolean unlimitedAccess\n    ) {\n        if (paths != null) {\n            this.paths.addAll(paths);\n        }\n        this.unlimitedAccess = unlimitedAccess;\n    }\n\n    public static LoadPaths of(\n            final List<File> paths,\n            final boolean unlimitedAccess\n    ) {\n        if (paths == null || paths.isEmpty()) {\n            return new LoadPaths(null, unlimitedAccess);\n        }\n        else {\n            final List<File> savePaths = new ArrayList<>();\n\n            for(File p : paths) {\n                if (p != null) {\n                    if (p.isFile() || p.isDirectory()) {\n                        savePaths.add(canonical(p.getAbsoluteFile()));\n                    }\n                    else {\n                        // skip silently\n                    }\n                }\n            }\n\n            return new LoadPaths(savePaths, unlimitedAccess);\n        }\n    }\n\n    @Override\n    public String loadVeniceFile(final File file) {\n        if (file == null) {\n            return null;\n        }\n        else {\n            final String path = file.getPath();\n\n            final String vncFile = path.endsWith(\".venice\") ? path : path + \".venice\";\n\n            final ByteBuffer data = load(new File(vncFile));\n\n            return data == null\n                    ? null\n                    : new String(data.array(), getCharset(\"UTF-8\"));\n        }\n    }\n\n    @Override\n    public ByteBuffer loadBinaryResource(final File file) {\n        return load(file);\n    }\n\n    @Override\n    public String loadTextResource(final File file, final String encoding) {\n        final ByteBuffer data = load(file);\n\n        return data == null\n                ? null\n                : new String(data.array(), getCharset(encoding));\n    }\n\n    @Override\n    public List<File> getPaths() {\n        return Collections.unmodifiableList(paths);\n    }\n\n    @Override\n    public boolean isOnLoadPath(final File file) {\n        if (file == null) {\n            throw new IllegalArgumentException(\"A file must not be null\");\n        }\n        else if (unlimitedAccess) {\n            return true;\n        }\n        else {\n            final File f = canonical(file);\n            final File dir = f.getParentFile();\n\n            // check load paths\n            for(File p : paths) {\n                if (p.isDirectory()) {\n                    if (dir.equals(p)) return true;\n                }\n                else if (p.isFile()) {\n                    if (f.equals(p)) return true;\n                }\n            }\n\n            return false;\n        }\n    }\n\n    @Override\n    public boolean isUnlimitedAccess() {\n        return unlimitedAccess;\n    }\n\n\n    private ByteBuffer load(final File file) {\n        final ByteBuffer dataFromLoadPath = paths.stream()\n                                                 .map(p -> loadFromLoadPath(p, file))\n                                                 .filter(d -> d != null)\n                                                 .findFirst()\n                                                 .orElse(null);\n\n        if (dataFromLoadPath != null) {\n            return dataFromLoadPath;\n        }\n        else if (unlimitedAccess && file.isFile()) {\n            return loadFile(file);\n        }\n        else {\n            return null;\n        }\n    }\n\n    private ByteBuffer loadFromLoadPath(\n            final File loadPath,\n            final File file\n    ) {\n        if (loadPath.getName().endsWith(\".zip\")) {\n            return loadFileFromZip(loadPath, file);\n        }\n        else if (loadPath.isDirectory()) {\n            return loadFileFromDir(loadPath, file);\n        }\n        else if (loadPath.isFile()) {\n            final File f = canonical(file);\n            if (loadPath.equals(f)) {\n                try {\n                    return ByteBuffer.wrap(Files.readAllBytes(f.toPath()));\n                }\n                catch(IOException ex) {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    private ByteBuffer loadFileFromZip(\n            final File zip,\n            final File file\n    ) {\n        if (zip.exists()) {\n            try {\n                return ZipFileSystemUtil\n                            .loadBinaryFileFromZip(zip, file)\n                            .getValue();\n            }\n            catch(Exception ex) {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    private ByteBuffer loadFileFromDir(final File loadPath, final File file) {\n        try {\n            if (file.isAbsolute()) {\n                return isFileWithinDirectory(loadPath, file)\n                        ? loadFile(file)\n                        : null;\n            }\n            else {\n                final File f = new File(loadPath, file.getPath());\n                return f.isFile()\n                        ? loadFile(new File(loadPath, file.getPath()))\n                        : null;\n            }\n        }\n        catch (Exception ex) {\n            throw new VncException(\n                        String.format(\"Failed to load file '%s'\", file.getPath()),\n                        ex);\n        }\n    }\n\n    private static File canonical(final File file) {\n        try {\n            return file.getCanonicalFile();\n        }\n        catch(IOException ex) {\n            throw new VncException(\n                    String.format(\n                            \"The file '%s' can not be converted to a canonical path!\",\n                            file.getPath()),\n                    ex);\n        }\n    }\n\n    private ByteBuffer loadFile(final File file) {\n        try {\n            return ByteBuffer.wrap(Files.readAllBytes(file.toPath()));\n        }\n        catch(IOException ex) {\n            return null;\n        }\n    }\n\n    private boolean isFileWithinDirectory(\n            final File dir,\n            final File file\n    ) throws IOException {\n        final File dir_ = dir.getAbsoluteFile();\n        if (dir_.isDirectory()) {\n            final File fl = new File(dir_, file.getPath());\n            if (fl.isFile()) {\n                if (fl.getCanonicalFile().toPath().startsWith(dir_.getCanonicalFile().toPath())) {\n                    // Prevent accessing files outside the load-path.\n                    // E.g.: ../../coffee\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private Charset getCharset(final String encoding) {\n        return encoding == null || encoding.isEmpty()\n                ? Charset.defaultCharset()\n                : Charset.forName(encoding);\n    }\n\n\n    // a list of existing canonical paths\n    private final List<File> paths = new ArrayList<>();\n    private final boolean unlimitedAccess;\n}\n"], "filenames": ["src/main/java/com/github/jlangch/venice/impl/util/io/LoadPaths.java"], "buggy_code_start_loc": [261], "buggy_code_end_loc": [262], "fixing_code_start_loc": [261], "fixing_code_end_loc": [262], "type": "CWE-22", "message": "Venice is a Clojure inspired sandboxed Lisp dialect with excellent Java interoperability. A partial path traversal issue exists within the functions `load-file` and `load-resource`. These functions can be limited to load files from a list of load paths. Assuming Venice has been configured with the load paths: `[ \"/Users/foo/resources\" ]` When passing **relative** paths to these two vulnerable functions everything is fine: `(load-resource \"test.png\")` => loads the file \"/Users/foo/resources/test.png\" `(load-resource \"../resources-alt/test.png\")` => rejected, outside the load path When passing **absolute** paths to these two vulnerable functions Venice may return files outside the configured load paths: `(load-resource \"/Users/foo/resources/test.png\")` => loads the file \"/Users/foo/resources/test.png\" `(load-resource \"/Users/foo/resources-alt/test.png\")` => loads the file \"/Users/foo/resources-alt/test.png\" !!! The latter call suffers from the _Partial Path Traversal_ vulnerability. This issue\u2019s scope is limited to absolute paths whose name prefix matches a load path. E.g. for a load-path `\"/Users/foo/resources\"`, the actor can cause loading a resource also from `\"/Users/foo/resources-alt\"`, but not from `\"/Users/foo/images\"`. Versions of Venice before and including v1.10.17 are affected by this issue. Upgrade to Venice >= 1.10.18, if you are on a version < 1.10.18. There are currently no known workarounds.", "other": {"cve": {"id": "CVE-2022-36007", "sourceIdentifier": "security-advisories@github.com", "published": "2022-08-15T11:21:40.967", "lastModified": "2022-08-16T17:02:56.530", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Venice is a Clojure inspired sandboxed Lisp dialect with excellent Java interoperability. A partial path traversal issue exists within the functions `load-file` and `load-resource`. These functions can be limited to load files from a list of load paths. Assuming Venice has been configured with the load paths: `[ \"/Users/foo/resources\" ]` When passing **relative** paths to these two vulnerable functions everything is fine: `(load-resource \"test.png\")` => loads the file \"/Users/foo/resources/test.png\" `(load-resource \"../resources-alt/test.png\")` => rejected, outside the load path When passing **absolute** paths to these two vulnerable functions Venice may return files outside the configured load paths: `(load-resource \"/Users/foo/resources/test.png\")` => loads the file \"/Users/foo/resources/test.png\" `(load-resource \"/Users/foo/resources-alt/test.png\")` => loads the file \"/Users/foo/resources-alt/test.png\" !!! The latter call suffers from the _Partial Path Traversal_ vulnerability. This issue\u2019s scope is limited to absolute paths whose name prefix matches a load path. E.g. for a load-path `\"/Users/foo/resources\"`, the actor can cause loading a resource also from `\"/Users/foo/resources-alt\"`, but not from `\"/Users/foo/images\"`. Versions of Venice before and including v1.10.17 are affected by this issue. Upgrade to Venice >= 1.10.18, if you are on a version < 1.10.18. There are currently no known workarounds."}, {"lang": "es", "value": "Venice es un dialecto Lisp inspirado en Clojure con una excelente interoperabilidad con Java. Se presenta un problema de recorrido parcial en las funciones \"load-file\" y \"load-resource\". Estas funciones pueden limitarse a cargar archivos de una lista de rutas de carga. Asumiendo que Venice ha sido configurado con las rutas de carga: \"[\"/Users/foo/resources\" ]\" Cuando son pasadas rutas **relativas** a estas dos funciones vulnerables todo est\u00e1 bien: \"(load-resource \"test.png\")\" =) carga el archivo \"/Users/foo/resources/test.png\" \"(load-resource \"../resources-alt/test. png\")\" =) rechazado, fuera de la ruta de carga Cuando son pasadas rutas **absolutas** a estas dos funciones vulnerables Venecia puede devolver archivos fuera de las rutas de carga configuradas: \"(load-resource \"/Users/foo/resources/test. \u00a1\u00a1\u00a1png\")\" =) carga el archivo \"/Users/foo/recursos/test.png\" \"(load-resource \"/Users/foo/recursos-alt/test.png\")\" =) carga el archivo \"/Users/foo/recursos-alt/test.png\" !!! Esta \u00faltima llamada sufre una vulnerabilidad se Salto de Ruta Parcial. El alcance de este problema es limitado a las rutas absolutas cuyo prefijo de nombre coincide con una ruta de carga. Por ejemplo, para una ruta de carga \"\"/Users/foo/resources\"\", el actor puede causar la carga de un recurso tambi\u00e9n desde \"\"/Users/foo/resources-alt\"\", pero no desde \"\"/Users/foo/images\"\". Las versiones de Venice anteriores a v1.10.17, incluy\u00e9ndola, est\u00e1n afectadas por este problema. Actualice a Venice versiones posteriores a 1.10.18 incluy\u00e9ndola, si est\u00e1 en una versi\u00f3n anterior a 1.10.18. Actualmente no se presentan mitigaciones conocidas."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.3, "baseSeverity": "LOW"}, "exploitabilityScore": 1.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:H/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 4.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:venice_project:venice:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.10.17", "matchCriteriaId": "58D431B7-5D4A-446F-8CF0-2BC46F902C2F"}]}]}], "references": [{"url": "https://github.com/jlangch/venice/commit/215ae91bb964013b0a2d70718a692832d561ae0a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jlangch/venice/commit/c942c73136333bc493050910f171a48e6f575b23", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jlangch/venice/releases/tag/v1.10.17", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/jlangch/venice/security/advisories/GHSA-4mmh-5vw7-rgvj", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jlangch/venice/commit/215ae91bb964013b0a2d70718a692832d561ae0a"}}