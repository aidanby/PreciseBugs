{"buggy_code": ["{\n    \"env\": {\n        \"commonjs\": true,\n        \"es2021\": true,\n        \"node\": true\n    },\n    \"extends\": [\n        \"prettier\",\n        \"airbnb-base\"\n    ],\n    \"plugins\": [\n        \"prettier\"\n    ],\n    \"parserOptions\": {\n        \"ecmaVersion\": 12\n    },\n    \"rules\": {\n        \"no-console\": \"error\",\n        \"no-param-reassign\": \"off\",\n        \"comma-dangle\": \"error\",\n        \"prettier/prettier\": [\"error\"],\n        \"quotes\": \"off\",\n        \"strict\": \"off\",\n        \"prefer-arrow-callback\":\"off\"\n    }\n}\n", "\"use strict\";\n\nconst sanitizeHtml = require(\"sanitize-html\");\n\nconst initializeOptions = (options) => {\n  const sanitizerOptions = {};\n  if (Array.isArray(options.allowedTags) && options.allowedTags.length > 0) {\n    sanitizerOptions.allowedTags = options.allowedTags;\n  }\n  return {\n    allowedKeys:\n      (Array.isArray(options.allowedKeys) && options.allowedKeys) || [],\n    sanitizerOptions,\n  };\n};\n\nconst sanitize = (options, data) => {\n  if (typeof data === \"string\") {\n    return sanitizeHtml(data, options.sanitizerOptions);\n  }\n  if (Array.isArray(data)) {\n    return data.map((item) => {\n      if (typeof item === \"string\") {\n        return sanitizeHtml(item, options.sanitizerOptions);\n      }\n      if (Array.isArray(item) || typeof item === \"object\") {\n        return sanitize(options, item);\n      }\n      return item;\n    });\n  }\n  if (typeof data === \"object\" && data !== null) {\n    Object.keys(data).forEach((key) => {\n      if (options.allowedKeys.includes(key)) {\n        return;\n      }\n      const item = data[key];\n      if (typeof item === \"string\") {\n        data[key] = sanitizeHtml(item, options.sanitizerOptions);\n      } else if (Array.isArray(item) || typeof item === \"object\") {\n        data[key] = sanitize(options, item);\n      }\n    });\n  }\n  return data;\n};\n\nconst prepareSanitize = (data, options = {}) => {\n  options = initializeOptions(options);\n  return sanitize(options, data);\n};\n\nmodule.exports = prepareSanitize;\n", "/* eslint-disable prettier/prettier */\n/* eslint-disable func-names */\n/* eslint-disable no-undef */\n\n\"use strict\";\n\nconst request = require(\"supertest\");\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst { expect } = require(\"chai\");\nconst { xss, sanitize } = require(\"../index\");\n\ndescribe(\"Express xss Sanitize\", function () {\n  describe(\"Sanitize with default settings as middleware before all routes\", function () {\n    const app = express();\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use(bodyParser.json());\n    app.use(xss());\n\n    app.post(\"/body\", function (req, res) {\n      res.status(200).json({\n        body: req.body,\n      });\n    });\n\n    app.post(\"/headers\", function (req, res) {\n      res.status(200).json({\n        headers: req.headers,\n      });\n    });\n\n    app.get(\"/query\", function (req, res) {\n      res.status(200).json({\n        query: req.query,\n      });\n    });\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize clean headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            y: \"4\",\n            z: \"false\",\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              y: \"4\",\n              z: \"false\",\n              w: \"bla bla\",\n              a: \"<p>Test</p>\",\n            });\n          })\n          .end(done);\n      });\n\n      it(\"should sanitize clean query.\", function (done) {\n        request(app)\n          .get(\"/query?y=4&z=false&w=bla bla&a=<p>Test</p>\")\n          .expect(\n            200,\n            {\n              query: {\n                y: \"4\",\n                z: \"false\",\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: \"\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty query.\", function (done) {\n        request(app)\n          .get(\n            '/query?a=<script>Test</script>&b=<p onclick=\"return;\">Test</p>&c=<img src=\"/\"/>',\n          )\n          .expect(\n            200,\n            {\n              query: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: \"\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              a: \"\",\n              b: \"<p>Test</p>\",\n              c: \"\",\n            });\n          })\n          .end(done);\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n            arr: [\n              \"<h1>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                j: '<a href=\"/\">Link</a>',\n              },\n            ],\n            obj: {\n              e: \"Test1\",\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"Test1\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n            arr: [\n              \"<h1 onclick='return false;'>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\n                  \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                  \"bla bla\",\n                  false,\n                  5,\n                ],\n                j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n              },\n            ],\n            obj: {\n              e: '<script>while (true){alert(\"Test To OO\")}</script>',\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: \"\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n    });\n  });\n\n  describe(\"Sanitize with custom options as middleware before all routes\", function () {\n    const app = express();\n    const options = {\n      allowedKeys: [\"c\"],\n    };\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use(bodyParser.json());\n    app.use(xss(options));\n\n    app.post(\"/body\", function (req, res) {\n      res.status(200).json({\n        body: req.body,\n      });\n    });\n\n    app.post(\"/headers\", function (req, res) {\n      res.status(200).json({\n        headers: req.headers,\n      });\n    });\n\n    app.get(\"/query\", function (req, res) {\n      res.status(200).json({\n        query: req.query,\n      });\n    });\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize clean headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            y: \"4\",\n            z: \"false\",\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              y: \"4\",\n              z: \"false\",\n              w: \"bla bla\",\n              a: \"<p>Test</p>\",\n            });\n          })\n          .end(done);\n      });\n\n      it(\"should sanitize clean query.\", function (done) {\n        request(app)\n          .get(\"/query?y=4&z=false&w=bla bla&a=<p>Test</p>\")\n          .expect(\n            200,\n            {\n              query: {\n                y: \"4\",\n                z: \"false\",\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: '<img src=\"/\"/>',\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty query.\", function (done) {\n        request(app)\n          .get(\n            '/query?a=<script>Test</script>&b=<p onclick=\"return;\">Test</p>&c=<img src=\"/\"/>',\n          )\n          .expect(\n            200,\n            {\n              query: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: '<img src=\"/\"/>',\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              a: \"\",\n              b: \"<p>Test</p>\",\n              c: '<img src=\"/\"/>',\n            });\n          })\n          .end(done);\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n            arr: [\n              \"<h1>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                j: '<a href=\"/\">Link</a>',\n              },\n            ],\n            obj: {\n              e: \"Test1\",\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"Test1\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n            arr: [\n              \"<h1 onclick='return false;'>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\n                  \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                  \"bla bla\",\n                  false,\n                  5,\n                ],\n                j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n              },\n            ],\n            obj: {\n              e: '<script>while (true){alert(\"Test To OO\")}</script>',\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: '<img src=\"/\"/>',\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n    });\n  });\n\n  describe(\"Sanitize with default settings as middleware before each route\", function () {\n    const app = express();\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use(bodyParser.json());\n\n    app.post(\"/body\", xss(), function (req, res) {\n      res.status(200).json({\n        body: req.body,\n      });\n    });\n\n    app.post(\"/headers\", xss(), function (req, res) {\n      res.status(200).json({\n        headers: req.headers,\n      });\n    });\n\n    app.get(\"/query\", function (req, res) {\n      res.status(200).json({\n        query: req.query,\n      });\n    });\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize clean headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            y: \"4\",\n            z: \"false\",\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              y: \"4\",\n              z: \"false\",\n              w: \"bla bla\",\n              a: \"<p>Test</p>\",\n            });\n          })\n          .end(done);\n      });\n\n      it(\"should sanitize clean query.\", function (done) {\n        request(app)\n          .get(\"/query?y=4&z=false&w=bla bla&a=<p>Test</p>\")\n          .expect(\n            200,\n            {\n              query: {\n                y: \"4\",\n                z: \"false\",\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: \"\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should not sanitize dirty query.\", function (done) {\n        request(app)\n          .get(\n            '/query?a=<script>Test</script>&b=<p onclick=\"return;\">Test</p>&c=<img src=\"/\"/>',\n          )\n          .expect(\n            200,\n            {\n              query: {\n                a: \"<script>Test</script>\",\n                b: '<p onclick=\"return;\">Test</p>',\n                c: '<img src=\"/\"/>',\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              a: \"\",\n              b: \"<p>Test</p>\",\n              c: \"\",\n            });\n          })\n          .end(done);\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n            arr: [\n              \"<h1>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                j: '<a href=\"/\">Link</a>',\n              },\n            ],\n            obj: {\n              e: \"Test1\",\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"Test1\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n            arr: [\n              \"<h1 onclick='return false;'>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\n                  \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                  \"bla bla\",\n                  false,\n                  5,\n                ],\n                j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n              },\n            ],\n            obj: {\n              e: '<script>while (true){alert(\"Test To OO\")}</script>',\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: \"\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n    });\n  });\n\n  describe(\"Sanitize with custom options as middleware before each route\", function () {\n    const app = express();\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use(bodyParser.json());\n\n    app.post(\"/body\", xss({ allowedKeys: [\"c\"] }), function (req, res) {\n      res.status(200).json({\n        body: req.body,\n      });\n    });\n\n    app.post(\"/headers\", xss(), function (req, res) {\n      res.status(200).json({\n        headers: req.headers,\n      });\n    });\n\n    app.get(\"/query\", function (req, res) {\n      res.status(200).json({\n        query: req.query,\n      });\n    });\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize clean headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            y: \"4\",\n            z: \"false\",\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              y: \"4\",\n              z: \"false\",\n              w: \"bla bla\",\n              a: \"<p>Test</p>\",\n            });\n          })\n          .end(done);\n      });\n\n      it(\"should sanitize clean query.\", function (done) {\n        request(app)\n          .get(\"/query?y=4&z=false&w=bla bla&a=<p>Test</p>\")\n          .expect(\n            200,\n            {\n              query: {\n                y: \"4\",\n                z: \"false\",\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: '<img src=\"/\"/>',\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should not sanitize dirty query.\", function (done) {\n        request(app)\n          .get(\n            '/query?a=<script>Test</script>&b=<p onclick=\"return;\">Test</p>&c=<img src=\"/\"/>',\n          )\n          .expect(\n            200,\n            {\n              query: {\n                a: \"<script>Test</script>\",\n                b: '<p onclick=\"return;\">Test</p>',\n                c: '<img src=\"/\"/>',\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              a: \"\",\n              b: \"<p>Test</p>\",\n              c: \"\",\n            });\n          })\n          .end(done);\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n            arr: [\n              \"<h1>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                j: '<a href=\"/\">Link</a>',\n                c: '<img src=\"/\"/>',\n              },\n            ],\n            obj: {\n              e: \"Test1\",\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                    c: '<img src=\"/\"/>',\n                  },\n                ],\n                obj: {\n                  e: \"Test1\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n            arr: [\n              \"<h1 onclick='return false;'>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\n                  \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                  \"bla bla\",\n                  false,\n                  5,\n                ],\n                j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n              },\n            ],\n            obj: {\n              e: '<script>while (true){alert(\"Test To OO\")}</script>',\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: '<img src=\"/\"/>',\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n    });\n  });\n\n  describe(\"Sanitize data with default settings as function\", function () {\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        expect(sanitize({\n          y: 4,\n          z: false,\n          w: \"bla bla\",\n          a: \"<p>Test</p>\",\n        })).to.eql({\n          y: 4,\n          z: false,\n          w: \"bla bla\",\n          a: \"<p>Test</p>\",\n        });\n        done();\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        expect(sanitize({\n          a: \"<script>Test</script>\",\n          b: '<p onclick=\"return;\">Test</p>',\n          c: '<img src=\"/\"/>',\n        })).to.eql({\n          a: \"\",\n          b: \"<p>Test</p>\",\n          c: \"\",\n        });\n        done();\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        expect(\n          sanitize({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n            arr: [\n              \"<h1>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                j: '<a href=\"/\">Link</a>',\n              },\n            ],\n            obj: {\n              e: \"Test1\",\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          }),\n        ).to.eql({\n          y: 4,\n          z: false,\n          w: \"bla bla\",\n          a: \"<p>Test</p>\",\n          arr: [\n            \"<h1>H1 Test</h1>\",\n            \"bla bla\",\n            {\n              i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n              j: '<a href=\"/\">Link</a>',\n            },\n          ],\n          obj: {\n            e: \"Test1\",\n            r: {\n              a: \"<h6>H6 Test</h6>\",\n            },\n          },\n        });\n        done();\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        expect(\n          sanitize({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n            arr: [\n              \"<h1 onclick='return false;'>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\n                  \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                  \"bla bla\",\n                  false,\n                  5,\n                ],\n                j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n              },\n            ],\n            obj: {\n              e: '<script>while (true){alert(\"Test To OO\")}</script>',\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          }),\n        ).to.eql({\n          a: \"\",\n          b: \"<p>Test</p>\",\n          c: \"\",\n          arr: [\n            \"<h1>H1 Test</h1>\",\n            \"bla bla\",\n            {\n              i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n              j: '<a href=\"/\">Link</a>',\n            },\n          ],\n          obj: {\n            e: \"\",\n            r: {\n              a: \"<h6>H6 Test</h6>\",\n            },\n          },\n        });\n        done();\n      });\n    });\n\n    describe(\"Sanitize null value\", function () {\n      it(\"should return null.\", function (done) {\n        expect(\n          sanitize(null),\n        ).to.eql(null);\n        done();\n      });\n    });\n  });\n\n  describe(\"Sanitize data with custom options as function\", function () {\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize dirty body.\", function (done) {\n        expect(sanitize({\n          a: \"<script>Test</script>\",\n          b: '<p onclick=\"return;\">Test</p>',\n          c: '<img src=\"/\"/>',\n        }, { allowedKeys: [\"c\"] })).to.eql({\n          a: \"\",\n          b: \"<p>Test</p>\",\n          c: '<img src=\"/\"/>',\n        });\n        done();\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize dirty body.\", function (done) {\n        expect(sanitize({\n          a: \"<script>Test</script>\",\n          b: '<p onclick=\"return;\">Test</p>',\n          c: '<img src=\"/\"/>',\n          arr: [\n            \"<h1 onclick='return false;'>H1 Test</h1>\",\n            \"bla bla\",\n            {\n              i: [\n                \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                \"bla bla\",\n                false,\n                5,\n              ],\n              j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n            },\n          ],\n          obj: {\n            e: '<script>while (true){alert(\"Test To OO\")}</script>',\n            r: {\n              a: \"<h6>H6 Test</h6>\",\n            },\n          },\n        }, { allowedKeys: [\"e\"] })).to.eql({\n          a: \"\",\n          b: \"<p>Test</p>\",\n          c: \"\",\n          arr: [\n            \"<h1>H1 Test</h1>\",\n            \"bla bla\",\n            {\n              i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n              j: '<a href=\"/\">Link</a>',\n            },\n          ],\n          obj: {\n            e: '<script>while (true){alert(\"Test To OO\")}</script>',\n            r: {\n              a: \"<h6>H6 Test</h6>\",\n            },\n          },\n        });\n        done();\n      });\n    });\n  });\n});\n"], "fixing_code": ["{\n    \"env\": {\n        \"commonjs\": true,\n        \"es2021\": true,\n        \"node\": true\n    },\n    \"extends\": [\n        \"prettier\",\n        \"airbnb-base\"\n    ],\n    \"plugins\": [\n        \"prettier\"\n    ],\n    \"parserOptions\": {\n        \"ecmaVersion\": 12\n    },\n    \"rules\": {\n        \"no-console\": \"error\",\n        \"no-param-reassign\": \"off\",\n        \"comma-dangle\": \"error\",\n        \"prettier/prettier\": [\"error\"],\n        \"quotes\": \"off\",\n        \"strict\": \"off\",\n        \"prefer-arrow-callback\":\"off\",\n        \"operator-linebreak\": \"off\"\n    }\n}\n", "\"use strict\";\n\nconst sanitizeHtml = require(\"sanitize-html\");\n\nconst initializeOptions = (options) => {\n  const sanitizerOptions = {};\n  if (\n    Object.hasOwn(options, \"allowedTags\") &&\n    Array.isArray(options.allowedTags) &&\n    options.allowedTags.length > 0\n  ) {\n    sanitizerOptions.allowedTags = options.allowedTags;\n  }\n  return {\n    allowedKeys:\n      (Object.hasOwn(options, \"allowedKeys\") &&\n        Array.isArray(options.allowedKeys) &&\n        options.allowedKeys) ||\n      [],\n    sanitizerOptions,\n  };\n};\n\nconst sanitize = (options, data) => {\n  if (typeof data === \"string\") {\n    return sanitizeHtml(data, options.sanitizerOptions);\n  }\n  if (Array.isArray(data)) {\n    return data.map((item) => {\n      if (typeof item === \"string\") {\n        return sanitizeHtml(item, options.sanitizerOptions);\n      }\n      if (Array.isArray(item) || typeof item === \"object\") {\n        return sanitize(options, item);\n      }\n      return item;\n    });\n  }\n  if (typeof data === \"object\" && data !== null) {\n    Object.keys(data).forEach((key) => {\n      if (options.allowedKeys.includes(key)) {\n        return;\n      }\n      const item = data[key];\n      if (typeof item === \"string\") {\n        data[key] = sanitizeHtml(item, options.sanitizerOptions);\n      } else if (Array.isArray(item) || typeof item === \"object\") {\n        data[key] = sanitize(options, item);\n      }\n    });\n  }\n  return data;\n};\n\nconst prepareSanitize = (data, options = {}) => {\n  options = initializeOptions(options);\n  return sanitize(options, data);\n};\n\nmodule.exports = prepareSanitize;\n", "/* eslint-disable prettier/prettier */\n/* eslint-disable func-names */\n/* eslint-disable no-undef */\n\n\"use strict\";\n\nconst request = require(\"supertest\");\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst { expect } = require(\"chai\");\nconst { xss, sanitize } = require(\"../index\");\n\ndescribe(\"Express xss Sanitize\", function () {\n  describe(\"Sanitize with default settings as middleware before all routes\", function () {\n    const app = express();\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use(bodyParser.json());\n    app.use(xss());\n\n    app.post(\"/body\", function (req, res) {\n      res.status(200).json({\n        body: req.body,\n      });\n    });\n\n    app.post(\"/headers\", function (req, res) {\n      res.status(200).json({\n        headers: req.headers,\n      });\n    });\n\n    app.get(\"/query\", function (req, res) {\n      res.status(200).json({\n        query: req.query,\n      });\n    });\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize clean headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            y: \"4\",\n            z: \"false\",\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              y: \"4\",\n              z: \"false\",\n              w: \"bla bla\",\n              a: \"<p>Test</p>\",\n            });\n          })\n          .end(done);\n      });\n\n      it(\"should sanitize clean query.\", function (done) {\n        request(app)\n          .get(\"/query?y=4&z=false&w=bla bla&a=<p>Test</p>\")\n          .expect(\n            200,\n            {\n              query: {\n                y: \"4\",\n                z: \"false\",\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: \"\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty query.\", function (done) {\n        request(app)\n          .get(\n            '/query?a=<script>Test</script>&b=<p onclick=\"return;\">Test</p>&c=<img src=\"/\"/>',\n          )\n          .expect(\n            200,\n            {\n              query: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: \"\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              a: \"\",\n              b: \"<p>Test</p>\",\n              c: \"\",\n            });\n          })\n          .end(done);\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n            arr: [\n              \"<h1>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                j: '<a href=\"/\">Link</a>',\n              },\n            ],\n            obj: {\n              e: \"Test1\",\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"Test1\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n            arr: [\n              \"<h1 onclick='return false;'>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\n                  \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                  \"bla bla\",\n                  false,\n                  5,\n                ],\n                j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n              },\n            ],\n            obj: {\n              e: '<script>while (true){alert(\"Test To OO\")}</script>',\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: \"\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n    });\n  });\n\n  describe(\"Sanitize with custom options as middleware before all routes\", function () {\n    const app = express();\n    const options = {\n      allowedKeys: [\"c\"],\n    };\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use(bodyParser.json());\n    app.use(xss(options));\n\n    app.post(\"/body\", function (req, res) {\n      res.status(200).json({\n        body: req.body,\n      });\n    });\n\n    app.post(\"/headers\", function (req, res) {\n      res.status(200).json({\n        headers: req.headers,\n      });\n    });\n\n    app.get(\"/query\", function (req, res) {\n      res.status(200).json({\n        query: req.query,\n      });\n    });\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize clean headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            y: \"4\",\n            z: \"false\",\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              y: \"4\",\n              z: \"false\",\n              w: \"bla bla\",\n              a: \"<p>Test</p>\",\n            });\n          })\n          .end(done);\n      });\n\n      it(\"should sanitize clean query.\", function (done) {\n        request(app)\n          .get(\"/query?y=4&z=false&w=bla bla&a=<p>Test</p>\")\n          .expect(\n            200,\n            {\n              query: {\n                y: \"4\",\n                z: \"false\",\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: '<img src=\"/\"/>',\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty query.\", function (done) {\n        request(app)\n          .get(\n            '/query?a=<script>Test</script>&b=<p onclick=\"return;\">Test</p>&c=<img src=\"/\"/>',\n          )\n          .expect(\n            200,\n            {\n              query: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: '<img src=\"/\"/>',\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              a: \"\",\n              b: \"<p>Test</p>\",\n              c: '<img src=\"/\"/>',\n            });\n          })\n          .end(done);\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n            arr: [\n              \"<h1>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                j: '<a href=\"/\">Link</a>',\n              },\n            ],\n            obj: {\n              e: \"Test1\",\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"Test1\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n            arr: [\n              \"<h1 onclick='return false;'>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\n                  \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                  \"bla bla\",\n                  false,\n                  5,\n                ],\n                j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n              },\n            ],\n            obj: {\n              e: '<script>while (true){alert(\"Test To OO\")}</script>',\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: '<img src=\"/\"/>',\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n    });\n  });\n\n  describe(\"Sanitize with default settings as middleware before each route\", function () {\n    const app = express();\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use(bodyParser.json());\n\n    app.post(\"/body\", xss(), function (req, res) {\n      res.status(200).json({\n        body: req.body,\n      });\n    });\n\n    app.post(\"/headers\", xss(), function (req, res) {\n      res.status(200).json({\n        headers: req.headers,\n      });\n    });\n\n    app.get(\"/query\", function (req, res) {\n      res.status(200).json({\n        query: req.query,\n      });\n    });\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize clean headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            y: \"4\",\n            z: \"false\",\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              y: \"4\",\n              z: \"false\",\n              w: \"bla bla\",\n              a: \"<p>Test</p>\",\n            });\n          })\n          .end(done);\n      });\n\n      it(\"should sanitize clean query.\", function (done) {\n        request(app)\n          .get(\"/query?y=4&z=false&w=bla bla&a=<p>Test</p>\")\n          .expect(\n            200,\n            {\n              query: {\n                y: \"4\",\n                z: \"false\",\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: \"\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should not sanitize dirty query.\", function (done) {\n        request(app)\n          .get(\n            '/query?a=<script>Test</script>&b=<p onclick=\"return;\">Test</p>&c=<img src=\"/\"/>',\n          )\n          .expect(\n            200,\n            {\n              query: {\n                a: \"<script>Test</script>\",\n                b: '<p onclick=\"return;\">Test</p>',\n                c: '<img src=\"/\"/>',\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              a: \"\",\n              b: \"<p>Test</p>\",\n              c: \"\",\n            });\n          })\n          .end(done);\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n            arr: [\n              \"<h1>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                j: '<a href=\"/\">Link</a>',\n              },\n            ],\n            obj: {\n              e: \"Test1\",\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"Test1\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n            arr: [\n              \"<h1 onclick='return false;'>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\n                  \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                  \"bla bla\",\n                  false,\n                  5,\n                ],\n                j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n              },\n            ],\n            obj: {\n              e: '<script>while (true){alert(\"Test To OO\")}</script>',\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: \"\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n    });\n  });\n\n  describe(\"Sanitize with custom options as middleware before each route\", function () {\n    const app = express();\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use(bodyParser.json());\n\n    app.post(\"/body\", xss({ allowedKeys: [\"c\"] }), function (req, res) {\n      res.status(200).json({\n        body: req.body,\n      });\n    });\n\n    app.post(\"/headers\", xss(), function (req, res) {\n      res.status(200).json({\n        headers: req.headers,\n      });\n    });\n\n    app.get(\"/query\", function (req, res) {\n      res.status(200).json({\n        query: req.query,\n      });\n    });\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize clean headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            y: \"4\",\n            z: \"false\",\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              y: \"4\",\n              z: \"false\",\n              w: \"bla bla\",\n              a: \"<p>Test</p>\",\n            });\n          })\n          .end(done);\n      });\n\n      it(\"should sanitize clean query.\", function (done) {\n        request(app)\n          .get(\"/query?y=4&z=false&w=bla bla&a=<p>Test</p>\")\n          .expect(\n            200,\n            {\n              query: {\n                y: \"4\",\n                z: \"false\",\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: '<img src=\"/\"/>',\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should not sanitize dirty query.\", function (done) {\n        request(app)\n          .get(\n            '/query?a=<script>Test</script>&b=<p onclick=\"return;\">Test</p>&c=<img src=\"/\"/>',\n          )\n          .expect(\n            200,\n            {\n              query: {\n                a: \"<script>Test</script>\",\n                b: '<p onclick=\"return;\">Test</p>',\n                c: '<img src=\"/\"/>',\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty headers.\", function (done) {\n        request(app)\n          .post(\"/headers\")\n          .set({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n          })\n          .expect(200)\n          .expect(function (res) {\n            expect(res.body.headers).to.include({\n              a: \"\",\n              b: \"<p>Test</p>\",\n              c: \"\",\n            });\n          })\n          .end(done);\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n            arr: [\n              \"<h1>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                j: '<a href=\"/\">Link</a>',\n                c: '<img src=\"/\"/>',\n              },\n            ],\n            obj: {\n              e: \"Test1\",\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                y: 4,\n                z: false,\n                w: \"bla bla\",\n                a: \"<p>Test</p>\",\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                    c: '<img src=\"/\"/>',\n                  },\n                ],\n                obj: {\n                  e: \"Test1\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        request(app)\n          .post(\"/body\")\n          .send({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n            arr: [\n              \"<h1 onclick='return false;'>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\n                  \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                  \"bla bla\",\n                  false,\n                  5,\n                ],\n                j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n              },\n            ],\n            obj: {\n              e: '<script>while (true){alert(\"Test To OO\")}</script>',\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          })\n          .expect(\n            200,\n            {\n              body: {\n                a: \"\",\n                b: \"<p>Test</p>\",\n                c: '<img src=\"/\"/>',\n                arr: [\n                  \"<h1>H1 Test</h1>\",\n                  \"bla bla\",\n                  {\n                    i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                    j: '<a href=\"/\">Link</a>',\n                  },\n                ],\n                obj: {\n                  e: \"\",\n                  r: {\n                    a: \"<h6>H6 Test</h6>\",\n                  },\n                },\n              },\n            },\n            done,\n          );\n      });\n    });\n  });\n\n  describe(\"Sanitize data with default settings as function\", function () {\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        expect(sanitize({\n          y: 4,\n          z: false,\n          w: \"bla bla\",\n          a: \"<p>Test</p>\",\n        })).to.eql({\n          y: 4,\n          z: false,\n          w: \"bla bla\",\n          a: \"<p>Test</p>\",\n        });\n        done();\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        expect(sanitize({\n          a: \"<script>Test</script>\",\n          b: '<p onclick=\"return;\">Test</p>',\n          c: '<img src=\"/\"/>',\n        })).to.eql({\n          a: \"\",\n          b: \"<p>Test</p>\",\n          c: \"\",\n        });\n        done();\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize clean body.\", function (done) {\n        expect(\n          sanitize({\n            y: 4,\n            z: false,\n            w: \"bla bla\",\n            a: \"<p>Test</p>\",\n            arr: [\n              \"<h1>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n                j: '<a href=\"/\">Link</a>',\n              },\n            ],\n            obj: {\n              e: \"Test1\",\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          }),\n        ).to.eql({\n          y: 4,\n          z: false,\n          w: \"bla bla\",\n          a: \"<p>Test</p>\",\n          arr: [\n            \"<h1>H1 Test</h1>\",\n            \"bla bla\",\n            {\n              i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n              j: '<a href=\"/\">Link</a>',\n            },\n          ],\n          obj: {\n            e: \"Test1\",\n            r: {\n              a: \"<h6>H6 Test</h6>\",\n            },\n          },\n        });\n        done();\n      });\n\n      it(\"should sanitize dirty body.\", function (done) {\n        expect(\n          sanitize({\n            a: \"<script>Test</script>\",\n            b: '<p onclick=\"return;\">Test</p>',\n            c: '<img src=\"/\"/>',\n            arr: [\n              \"<h1 onclick='return false;'>H1 Test</h1>\",\n              \"bla bla\",\n              {\n                i: [\n                  \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                  \"bla bla\",\n                  false,\n                  5,\n                ],\n                j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n              },\n            ],\n            obj: {\n              e: '<script>while (true){alert(\"Test To OO\")}</script>',\n              r: {\n                a: \"<h6>H6 Test</h6>\",\n              },\n            },\n          }),\n        ).to.eql({\n          a: \"\",\n          b: \"<p>Test</p>\",\n          c: \"\",\n          arr: [\n            \"<h1>H1 Test</h1>\",\n            \"bla bla\",\n            {\n              i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n              j: '<a href=\"/\">Link</a>',\n            },\n          ],\n          obj: {\n            e: \"\",\n            r: {\n              a: \"<h6>H6 Test</h6>\",\n            },\n          },\n        });\n        done();\n      });\n    });\n\n    describe(\"Sanitize null value\", function () {\n      it(\"should return null.\", function (done) {\n        expect(\n          sanitize(null),\n        ).to.eql(null);\n        done();\n      });\n    });\n  });\n\n  describe(\"Sanitize data with custom options as function\", function () {\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize dirty body.\", function (done) {\n        expect(sanitize({\n          a: \"<script>Test</script>\",\n          b: '<p onclick=\"return;\">Test</p>',\n          c: '<img src=\"/\"/>',\n        }, { allowedKeys: [\"c\"] })).to.eql({\n          a: \"\",\n          b: \"<p>Test</p>\",\n          c: '<img src=\"/\"/>',\n        });\n        done();\n      });\n    });\n\n    describe(\"Sanitize complex object\", function () {\n      it(\"should sanitize dirty body.\", function (done) {\n        expect(sanitize({\n          a: \"<script>Test</script>\",\n          b: '<p onclick=\"return;\">Test</p>',\n          c: '<img src=\"/\"/>',\n          arr: [\n            \"<h1 onclick='return false;'>H1 Test</h1>\",\n            \"bla bla\",\n            {\n              i: [\n                \"<h3 onclick='function x(e) {console.log(e); return;}'>H3 Test</h3>\",\n                \"bla bla\",\n                false,\n                5,\n              ],\n              j: '<a href=\"/\" onclick=\"return 0;\">Link</a>',\n            },\n          ],\n          obj: {\n            e: '<script>while (true){alert(\"Test To OO\")}</script>',\n            r: {\n              a: \"<h6>H6 Test</h6>\",\n            },\n          },\n        }, { allowedKeys: [\"e\"] })).to.eql({\n          a: \"\",\n          b: \"<p>Test</p>\",\n          c: \"\",\n          arr: [\n            \"<h1>H1 Test</h1>\",\n            \"bla bla\",\n            {\n              i: [\"<h3>H3 Test</h3>\", \"bla bla\", false, 5],\n              j: '<a href=\"/\">Link</a>',\n            },\n          ],\n          obj: {\n            e: '<script>while (true){alert(\"Test To OO\")}</script>',\n            r: {\n              a: \"<h6>H6 Test</h6>\",\n            },\n          },\n        });\n        done();\n      });\n    });\n  });\n\n  describe(\"Sanitize data with custom options as function\", function () {\n    describe(\"Sanitize simple object\", function () {\n      it(\"should sanitize dirty body.\", function (done) {\n        expect(sanitize({\n          a: \"<script>Test</script>\",\n          b: '<p onclick=\"return;\">Test</p>',\n          c: '<img src=\"/\"/>',\n        }, { allowedKeys: [\"c\"] })).to.eql({\n          a: \"\",\n          b: \"<p>Test</p>\",\n          c: '<img src=\"/\"/>',\n        });\n        done();\n      });\n    });\n\n    describe(\"XSS bypass by using prototype pollution issue\", function () {\n      it(\"should sanitize dirty data after prototype pollution.\", function (done) {\n        // eslint-disable-next-line no-extend-native\n        Object.prototype.allowedTags = ['script'];\n        expect(sanitize({\n          a: \"<script>Test</script>\",\n        }, {})).to.eql({\n          a: \"\",\n        });\n        done();\n      });\n    });\n  });\n});\n"], "filenames": [".eslintrc.json", "lib/sanitize.js", "test/test.js"], "buggy_code_start_loc": [24, 7, 1224], "buggy_code_end_loc": [25, 13, 1224], "fixing_code_start_loc": [24, 7, 1225], "fixing_code_end_loc": [26, 20, 1255], "type": "CWE-1321", "message": "The package express-xss-sanitizer before 1.1.3 are vulnerable to Prototype Pollution via the allowedTags attribute, allowing the attacker to bypass xss sanitization.", "other": {"cve": {"id": "CVE-2022-21169", "sourceIdentifier": "report@snyk.io", "published": "2022-09-26T05:15:10.133", "lastModified": "2022-09-28T17:21:57.197", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package express-xss-sanitizer before 1.1.3 are vulnerable to Prototype Pollution via the allowedTags attribute, allowing the attacker to bypass xss sanitization."}, {"lang": "es", "value": "El paquete express-xss-sanitizer versiones anteriores a 1.1.3, es vulnerable a una Contaminaci\u00f3n de Prototipos por medio del atributo allowedTags, permitiendo al atacante omitir el saneo de tipo xss."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:express_xss_sanitizer_project:express_xss_sanitizer:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.1.3", "matchCriteriaId": "5A82E346-B772-4081-BD07-2911862E9945"}]}]}], "references": [{"url": "https://github.com/AhmedAdelFahim/express-xss-sanitizer/commit/3bf8aaaf4dbb1c209dcb8d87a82711a54c1ab39a", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/AhmedAdelFahim/express-xss-sanitizer/issues/4", "source": "report@snyk.io", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://runkit.com/embed/w306l6zfm7tu", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.snyk.io/vuln/SNYK-JS-EXPRESSXSSSANITIZER-3027443", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/AhmedAdelFahim/express-xss-sanitizer/commit/3bf8aaaf4dbb1c209dcb8d87a82711a54c1ab39a"}}