{"buggy_code": ["<?php\ndeclare(strict_types=1);\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\DataObject\\ClassDefinition\\Data;\n\nuse Pimcore\\Db\\Helper;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Service;\nuse Pimcore\\Model\\DataObject\\Concrete;\nuse Pimcore\\Normalizer\\NormalizerInterface;\n\nclass Multiselect extends Data implements\n    ResourcePersistenceAwareInterface,\n    QueryResourcePersistenceAwareInterface,\n    TypeDeclarationSupportInterface,\n    EqualComparisonInterface,\n    VarExporterInterface,\n    \\JsonSerializable,\n    NormalizerInterface,\n    LayoutDefinitionEnrichmentInterface,\n    FieldDefinitionEnrichmentInterface,\n    DataContainerAwareInterface,\n    OptionsProviderInterface\n{\n    use DataObject\\Traits\\SimpleComparisonTrait;\n    use DataObject\\Traits\\SimpleNormalizerTrait;\n    use DataObject\\ClassDefinition\\DynamicOptionsProvider\\SelectionProviderTrait;\n    use DataObject\\Traits\\DataHeightTrait;\n    use DataObject\\Traits\\DataWidthTrait;\n    use OptionsProviderTrait;\n\n    /**\n     * Available options to select\n     *\n     * @internal\n     *\n     */\n    public ?array $options = null;\n\n    /**\n     * @internal\n     *\n     */\n    public ?int $maxItems = null;\n\n    /**\n     * @internal\n     *\n     */\n    public ?string $renderType = null;\n\n    /**\n     * @internal\n     */\n    public bool $dynamicOptions = false;\n\n    public function getOptions(): ?array\n    {\n        return $this->options;\n    }\n\n    public function setOptions(array $options): static\n    {\n        $this->options = $options;\n\n        return $this;\n    }\n\n    public function setMaxItems(?int $maxItems): static\n    {\n        $this->maxItems = $this->getAsIntegerCast($maxItems);\n\n        return $this;\n    }\n\n    public function getMaxItems(): ?int\n    {\n        return $this->maxItems;\n    }\n\n    public function setRenderType(?string $renderType): static\n    {\n        $this->renderType = $renderType;\n\n        return $this;\n    }\n\n    public function getRenderType(): ?string\n    {\n        return $this->renderType;\n    }\n\n    /**\n     * @see ResourcePersistenceAwareInterface::getDataForResource\n     *\n     *\n     */\n    public function getDataForResource(mixed $data, DataObject\\Concrete $object = null, array $params = []): ?string\n    {\n        if (is_array($data)) {\n            return implode(',', $data);\n        }\n\n        return null;\n    }\n\n    /**\n     * @see ResourcePersistenceAwareInterface::getDataFromResource\n     *\n     *\n     */\n    public function getDataFromResource(mixed $data, DataObject\\Concrete $object = null, array $params = []): ?array\n    {\n        if (strlen((string) $data)) {\n            return explode(',', $data);\n        }\n\n        return null;\n    }\n\n    /**\n     * @see QueryResourcePersistenceAwareInterface::getDataForQueryResource\n     *\n     *\n     */\n    public function getDataForQueryResource(mixed $data, DataObject\\Concrete $object = null, array $params = []): ?string\n    {\n        if (!empty($data) && is_array($data)) {\n            return ','.implode(',', $data).',';\n        }\n\n        return null;\n    }\n\n    /**\n     * @see Data::getDataForEditmode\n     *\n     *\n     */\n    public function getDataForEditmode(mixed $data, DataObject\\Concrete $object = null, array $params = []): ?string\n    {\n        if (is_array($data)) {\n            return implode(',', $data);\n        }\n\n        return null;\n    }\n\n    public function getDataForGrid(?array $data, Concrete $object = null, array $params = []): array|string|null\n    {\n        $optionsProvider = DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::resolveProvider(\n            $this->getOptionsProviderClass(),\n            DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::MODE_MULTISELECT\n        );\n\n        if ($this->useConfiguredOptions() || $optionsProvider === null) {\n            return $this->getDataForEditmode($data, $object, $params);\n        }\n\n        $context = $params['context'] ?? [];\n        $context['object'] = $object;\n        if ($object) {\n            $context['class'] = $object->getClass();\n        }\n\n        $context['fieldname'] = $this->getName();\n        $options = $optionsProvider->{'getOptions'}($context, $this);\n        $this->setOptions($options);\n\n        if (isset($params['purpose']) && $params['purpose'] === 'editmode') {\n            $result = $data;\n        } else {\n            $result = ['value' => $data, 'options' => $this->getOptions()];\n        }\n\n        return $result;\n    }\n\n    /**\n     *\n     *\n     * @see Data::getDataFromEditmode\n     *\n     */\n    public function getDataFromEditmode(mixed $data, DataObject\\Concrete $object = null, array $params = []): mixed\n    {\n        return $data;\n    }\n\n    public function getDiffDataFromEditmode(array $data, DataObject\\Concrete $object = null, array $params = []): ?array\n    {\n        $data = $data[0]['data'];\n        if (is_string($data) && $data !== '') {\n            return explode(',', $data);\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     *\n     * @see Data::getVersionPreview\n     *\n     */\n    public function getVersionPreview(mixed $data, DataObject\\Concrete $object = null, array $params = []): string\n    {\n        if (is_array($data)) {\n            return implode(',', array_map(function ($v) {\n                return htmlspecialchars($v, ENT_QUOTES, 'UTF-8');\n            }, $data));\n        }\n\n        return '';\n    }\n\n    public function checkValidity(mixed $data, bool $omitMandatoryCheck = false, array $params = []): void\n    {\n        if (!$omitMandatoryCheck && $this->getMandatory() && empty($data)) {\n            throw new Model\\Element\\ValidationException('Empty mandatory field [ '.$this->getName().' ]');\n        }\n\n        if (!is_array($data) && !empty($data)) {\n            throw new Model\\Element\\ValidationException(\"Invalid multiselect data on field [ {$this->getName()} ]\");\n        }\n    }\n\n    public function getForCsvExport(DataObject\\Localizedfield|DataObject\\Fieldcollection\\Data\\AbstractData|DataObject\\Objectbrick\\Data\\AbstractData|DataObject\\Concrete $object, array $params = []): string\n    {\n        $data = $this->getDataFromObjectParam($object, $params);\n        if (is_array($data)) {\n            return implode(',', $data);\n        }\n\n        return '';\n    }\n\n    public function getDataForSearchIndex(DataObject\\Localizedfield|DataObject\\Fieldcollection\\Data\\AbstractData|DataObject\\Objectbrick\\Data\\AbstractData|DataObject\\Concrete $object, array $params = []): string\n    {\n        $data = $this->getDataFromObjectParam($object, $params);\n        if (is_array($data)) {\n            return implode(' ', $data);\n        }\n\n        return '';\n    }\n\n    /**\n     * returns sql query statement to filter according to this data types value(s)\n     *\n     *\n     */\n    public function getFilterCondition(mixed $value, string $operator, array $params = []): string\n    {\n        $params['name'] = $this->name;\n\n        return $this->getFilterConditionExt(\n            $value,\n            $operator,\n            $params\n        );\n    }\n\n    /**\n     * returns sql query statement to filter according to this data types value(s)\n     *\n     * @param array $params optional params used to change the behavior\n     *\n     */\n    public function getFilterConditionExt(mixed $value, string $operator, array $params = []): string\n    {\n        if ($operator === '=' || $operator === 'LIKE') {\n            $name = $params['name'] ? $params['name'] : $this->name;\n\n            $db = \\Pimcore\\Db::get();\n            $key = $db->quoteIdentifier($name);\n            if (!empty($params['brickPrefix'])) {\n                $key = $params['brickPrefix'].$key;\n            }\n\n            if (str_contains($name, 'cskey') && is_array($value) && !empty($value)) {\n                $values = array_map(function ($val) use ($db) {\n                    return $db->quote('%' .Helper::escapeLike($val). '%');\n                }, $value);\n\n                return $key . ' LIKE ' . implode(' OR ' . $key . ' LIKE ', $values);\n            }\n\n            $value = $operator === '='\n                ? \"'%,\".$value.\",%'\"\n                : \"'%,%\".$value.\"%,%'\";\n\n            return $key.' LIKE '.$value.' ';\n        }\n\n        return '';\n    }\n\n    public function isDiffChangeAllowed(Concrete $object, array $params = []): bool\n    {\n        return true;\n    }\n\n    /** Generates a pretty version preview (similar to getVersionPreview) can be either html or\n     * a image URL. See the https://github.com/pimcore/object-merger bundle documentation for details\n     *\n     * @param DataObject\\Concrete|null $object\n     *\n     */\n    public function getDiffVersionPreview(?array $data, Concrete $object = null, array $params = []): array|string\n    {\n        if ($data) {\n            $map = [];\n            foreach ($data as $value) {\n                $map[$value] = $value;\n            }\n\n            $html = '<ul>';\n\n            foreach ((array)$this->options as $option) {\n                if ($map[$option['value']] ?? false) {\n                    $value = $option['key'];\n                    $html .= '<li>' . $value . '</li>';\n                }\n            }\n\n            $html .= '</ul>';\n\n            $value = [];\n            $value['html'] = $html;\n            $value['type'] = 'html';\n\n            return $value;\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * @param DataObject\\ClassDefinition\\Data\\Multiselect $mainDefinition\n     */\n    public function synchronizeWithMainDefinition(DataObject\\ClassDefinition\\Data $mainDefinition): void\n    {\n        $this->maxItems = $mainDefinition->maxItems;\n        $this->options = $mainDefinition->options;\n    }\n\n    public function appendData(?array $existingData, array $additionalData): array\n    {\n        if (!is_array($existingData)) {\n            $existingData = [];\n        }\n\n        $existingData = array_unique(array_merge($existingData, $additionalData));\n\n        return $existingData;\n    }\n\n    public function removeData(mixed $existingData, mixed $removeData): array\n    {\n        if (!is_array($existingData)) {\n            $existingData = [];\n        }\n\n        $existingData = array_unique(array_diff($existingData, $removeData));\n\n        return $existingData;\n    }\n\n    public function isFilterable(): bool\n    {\n        return true;\n    }\n\n    public function isEqual(mixed $oldValue, mixed $newValue): bool\n    {\n        return $this->isEqualArray($oldValue, $newValue);\n    }\n\n    public function jsonSerialize(): mixed\n    {\n        if (!$this->useConfiguredOptions() && $this->getOptionsProviderClass() && Service::doRemoveDynamicOptions()) {\n            $this->options = null;\n        }\n\n        return parent::jsonSerialize();\n    }\n\n    public function resolveBlockedVars(): array\n    {\n        $blockedVars = parent::resolveBlockedVars();\n\n        if (!$this->useConfiguredOptions() && $this->getOptionsProviderClass()) {\n            $blockedVars[] = 'options';\n        }\n\n        return $blockedVars;\n    }\n\n    public function getParameterTypeDeclaration(): ?string\n    {\n        return '?array';\n    }\n\n    public function getReturnTypeDeclaration(): ?string\n    {\n        return '?array';\n    }\n\n    public function getPhpdocInputType(): ?string\n    {\n        return 'string[]|null';\n    }\n\n    public function getPhpdocReturnType(): ?string\n    {\n        return 'string[]|null';\n    }\n\n    /**\n     * Perform sanity checks, see #5010.\n     *\n     */\n    public function preSave(mixed $containerDefinition, array $params = []): void\n    {\n        /** @var DataObject\\ClassDefinition\\DynamicOptionsProvider\\MultiSelectOptionsProviderInterface|null $optionsProvider */\n        $optionsProvider = DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::resolveProvider(\n            $this->getOptionsProviderClass(),\n            DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::MODE_MULTISELECT\n        );\n        if (!$this->useConfiguredOptions() && $optionsProvider !== null) {\n            $context = [];\n            $context['fieldname'] = $this->getName();\n\n            try {\n                $options = $optionsProvider->getOptions($context, $this);\n            } catch (\\Throwable $e) {\n                // error from getOptions => no values => no comma => no problems\n                $options = null;\n            }\n        } else {\n            $options = $this->getOptions();\n        }\n        if (is_array($options) && array_reduce($options, static function ($containsComma, $option) {\n            return $containsComma || str_contains((string)$option['value'], ',');\n        }, false)) {\n            throw new \\Exception(\"Field {$this->getName()}: Multiselect option values may not contain commas (,) for now, see <a href='https://github.com/pimcore/pimcore/issues/5010' target='_blank'>issue #5010</a>.\");\n        }\n    }\n\n    public function postSave(mixed $containerDefinition, array $params = []): void\n    {\n        // nothing to do\n    }\n\n    public function enrichFieldDefinition(array $context = []): static\n    {\n        $this->doEnrichDefinitionDefinition(null, $this->getName(),\n            'fielddefinition', DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::MODE_MULTISELECT, $context);\n\n        return $this;\n    }\n\n    public function enrichLayoutDefinition(?Concrete $object, array $context = []): static\n    {\n        $this->doEnrichDefinitionDefinition($object, $this->getName(),\n            'layout', DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::MODE_MULTISELECT, $context);\n\n        return $this;\n    }\n\n    public function getColumnType(): string\n    {\n        return 'text';\n    }\n\n    public function getQueryColumnType(): string\n    {\n        return $this->getColumnType();\n    }\n\n    public function getFieldType(): string\n    {\n        return 'multiselect';\n    }\n}\n"], "fixing_code": ["<?php\ndeclare(strict_types=1);\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\DataObject\\ClassDefinition\\Data;\n\nuse Pimcore\\Db\\Helper;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Service;\nuse Pimcore\\Model\\DataObject\\Concrete;\nuse Pimcore\\Normalizer\\NormalizerInterface;\n\nclass Multiselect extends Data implements\n    ResourcePersistenceAwareInterface,\n    QueryResourcePersistenceAwareInterface,\n    TypeDeclarationSupportInterface,\n    EqualComparisonInterface,\n    VarExporterInterface,\n    \\JsonSerializable,\n    NormalizerInterface,\n    LayoutDefinitionEnrichmentInterface,\n    FieldDefinitionEnrichmentInterface,\n    DataContainerAwareInterface,\n    OptionsProviderInterface\n{\n    use DataObject\\Traits\\SimpleComparisonTrait;\n    use DataObject\\Traits\\SimpleNormalizerTrait;\n    use DataObject\\ClassDefinition\\DynamicOptionsProvider\\SelectionProviderTrait;\n    use DataObject\\Traits\\DataHeightTrait;\n    use DataObject\\Traits\\DataWidthTrait;\n    use OptionsProviderTrait;\n\n    /**\n     * Available options to select\n     *\n     * @internal\n     *\n     */\n    public ?array $options = null;\n\n    /**\n     * @internal\n     *\n     */\n    public ?int $maxItems = null;\n\n    /**\n     * @internal\n     *\n     */\n    public ?string $renderType = null;\n\n    /**\n     * @internal\n     */\n    public bool $dynamicOptions = false;\n\n    public function getOptions(): ?array\n    {\n        return $this->options;\n    }\n\n    public function setOptions(array $options): static\n    {\n        $this->options = $options;\n\n        return $this;\n    }\n\n    public function setMaxItems(?int $maxItems): static\n    {\n        $this->maxItems = $this->getAsIntegerCast($maxItems);\n\n        return $this;\n    }\n\n    public function getMaxItems(): ?int\n    {\n        return $this->maxItems;\n    }\n\n    public function setRenderType(?string $renderType): static\n    {\n        $this->renderType = $renderType;\n\n        return $this;\n    }\n\n    public function getRenderType(): ?string\n    {\n        return $this->renderType;\n    }\n\n    /**\n     * @see ResourcePersistenceAwareInterface::getDataForResource\n     *\n     *\n     */\n    public function getDataForResource(mixed $data, DataObject\\Concrete $object = null, array $params = []): ?string\n    {\n        if (is_array($data)) {\n            return implode(',', $data);\n        }\n\n        return null;\n    }\n\n    /**\n     * @see ResourcePersistenceAwareInterface::getDataFromResource\n     *\n     *\n     */\n    public function getDataFromResource(mixed $data, DataObject\\Concrete $object = null, array $params = []): ?array\n    {\n        if (strlen((string) $data)) {\n            return explode(',', $data);\n        }\n\n        return null;\n    }\n\n    /**\n     * @see QueryResourcePersistenceAwareInterface::getDataForQueryResource\n     *\n     *\n     */\n    public function getDataForQueryResource(mixed $data, DataObject\\Concrete $object = null, array $params = []): ?string\n    {\n        if (!empty($data) && is_array($data)) {\n            return ','.implode(',', $data).',';\n        }\n\n        return null;\n    }\n\n    /**\n     * @see Data::getDataForEditmode\n     *\n     *\n     */\n    public function getDataForEditmode(mixed $data, DataObject\\Concrete $object = null, array $params = []): ?string\n    {\n        if (is_array($data)) {\n            return implode(',', $data);\n        }\n\n        return null;\n    }\n\n    public function getDataForGrid(?array $data, Concrete $object = null, array $params = []): array|string|null\n    {\n        $optionsProvider = DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::resolveProvider(\n            $this->getOptionsProviderClass(),\n            DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::MODE_MULTISELECT\n        );\n\n        if ($this->useConfiguredOptions() || $optionsProvider === null) {\n            return $this->getDataForEditmode($data, $object, $params);\n        }\n\n        $context = $params['context'] ?? [];\n        $context['object'] = $object;\n        if ($object) {\n            $context['class'] = $object->getClass();\n        }\n\n        $context['fieldname'] = $this->getName();\n        $options = $optionsProvider->{'getOptions'}($context, $this);\n        $this->setOptions($options);\n\n        if (isset($params['purpose']) && $params['purpose'] === 'editmode') {\n            $result = $data;\n        } else {\n            $result = ['value' => $data, 'options' => $this->getOptions()];\n        }\n\n        return $result;\n    }\n\n    /**\n     *\n     *\n     * @see Data::getDataFromEditmode\n     *\n     */\n    public function getDataFromEditmode(mixed $data, DataObject\\Concrete $object = null, array $params = []): mixed\n    {\n        return $data;\n    }\n\n    public function getDiffDataFromEditmode(array $data, DataObject\\Concrete $object = null, array $params = []): ?array\n    {\n        $data = $data[0]['data'];\n        if (is_string($data) && $data !== '') {\n            return explode(',', $data);\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     *\n     * @see Data::getVersionPreview\n     *\n     */\n    public function getVersionPreview(mixed $data, DataObject\\Concrete $object = null, array $params = []): string\n    {\n        if (is_array($data)) {\n            return implode(',', array_map(function ($v) {\n                return htmlspecialchars($v, ENT_QUOTES, 'UTF-8');\n            }, $data));\n        }\n\n        return '';\n    }\n\n    public function checkValidity(mixed $data, bool $omitMandatoryCheck = false, array $params = []): void\n    {\n        if (!$omitMandatoryCheck && $this->getMandatory() && empty($data)) {\n            throw new Model\\Element\\ValidationException('Empty mandatory field [ '.$this->getName().' ]');\n        }\n\n        if (!is_array($data) && !empty($data)) {\n            throw new Model\\Element\\ValidationException(\"Invalid multiselect data on field [ {$this->getName()} ]\");\n        }\n    }\n\n    public function getForCsvExport(DataObject\\Localizedfield|DataObject\\Fieldcollection\\Data\\AbstractData|DataObject\\Objectbrick\\Data\\AbstractData|DataObject\\Concrete $object, array $params = []): string\n    {\n        $data = $this->getDataFromObjectParam($object, $params);\n        if (is_array($data)) {\n            return implode(',', $data);\n        }\n\n        return '';\n    }\n\n    public function getDataForSearchIndex(DataObject\\Localizedfield|DataObject\\Fieldcollection\\Data\\AbstractData|DataObject\\Objectbrick\\Data\\AbstractData|DataObject\\Concrete $object, array $params = []): string\n    {\n        $data = $this->getDataFromObjectParam($object, $params);\n        if (is_array($data)) {\n            return implode(' ', $data);\n        }\n\n        return '';\n    }\n\n    /**\n     * returns sql query statement to filter according to this data types value(s)\n     *\n     *\n     */\n    public function getFilterCondition(mixed $value, string $operator, array $params = []): string\n    {\n        $params['name'] = $this->name;\n\n        return $this->getFilterConditionExt(\n            $value,\n            $operator,\n            $params\n        );\n    }\n\n    /**\n     * returns sql query statement to filter according to this data types value(s)\n     *\n     * @param array $params optional params used to change the behavior\n     *\n     */\n    public function getFilterConditionExt(mixed $value, string $operator, array $params = []): string\n    {\n        if ($operator === '=' || $operator === 'LIKE') {\n            $name = $params['name'] ? $params['name'] : $this->name;\n\n            $db = \\Pimcore\\Db::get();\n            $key = $db->quoteIdentifier($name);\n            if (!empty($params['brickPrefix'])) {\n                $key = $params['brickPrefix'].$key;\n            }\n\n            if (str_contains($name, 'cskey') && is_array($value) && !empty($value)) {\n                $values = array_map(function ($val) use ($db) {\n                    return $db->quote('%' .Helper::escapeLike($val). '%');\n                }, $value);\n\n                return $key . ' LIKE ' . implode(' OR ' . $key . ' LIKE ', $values);\n            }\n\n            $value = $operator === '='\n                ? $db->quote(\"%,\". $value . \",%\")\n                : $db->quote(\"%,%\" .Helper::escapeLike($value). \"%,%\");\n\n            return $key.' LIKE '.$value.' ';\n        }\n\n        return '';\n    }\n\n    public function isDiffChangeAllowed(Concrete $object, array $params = []): bool\n    {\n        return true;\n    }\n\n    /** Generates a pretty version preview (similar to getVersionPreview) can be either html or\n     * a image URL. See the https://github.com/pimcore/object-merger bundle documentation for details\n     *\n     * @param DataObject\\Concrete|null $object\n     *\n     */\n    public function getDiffVersionPreview(?array $data, Concrete $object = null, array $params = []): array|string\n    {\n        if ($data) {\n            $map = [];\n            foreach ($data as $value) {\n                $map[$value] = $value;\n            }\n\n            $html = '<ul>';\n\n            foreach ((array)$this->options as $option) {\n                if ($map[$option['value']] ?? false) {\n                    $value = $option['key'];\n                    $html .= '<li>' . $value . '</li>';\n                }\n            }\n\n            $html .= '</ul>';\n\n            $value = [];\n            $value['html'] = $html;\n            $value['type'] = 'html';\n\n            return $value;\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * @param DataObject\\ClassDefinition\\Data\\Multiselect $mainDefinition\n     */\n    public function synchronizeWithMainDefinition(DataObject\\ClassDefinition\\Data $mainDefinition): void\n    {\n        $this->maxItems = $mainDefinition->maxItems;\n        $this->options = $mainDefinition->options;\n    }\n\n    public function appendData(?array $existingData, array $additionalData): array\n    {\n        if (!is_array($existingData)) {\n            $existingData = [];\n        }\n\n        $existingData = array_unique(array_merge($existingData, $additionalData));\n\n        return $existingData;\n    }\n\n    public function removeData(mixed $existingData, mixed $removeData): array\n    {\n        if (!is_array($existingData)) {\n            $existingData = [];\n        }\n\n        $existingData = array_unique(array_diff($existingData, $removeData));\n\n        return $existingData;\n    }\n\n    public function isFilterable(): bool\n    {\n        return true;\n    }\n\n    public function isEqual(mixed $oldValue, mixed $newValue): bool\n    {\n        return $this->isEqualArray($oldValue, $newValue);\n    }\n\n    public function jsonSerialize(): mixed\n    {\n        if (!$this->useConfiguredOptions() && $this->getOptionsProviderClass() && Service::doRemoveDynamicOptions()) {\n            $this->options = null;\n        }\n\n        return parent::jsonSerialize();\n    }\n\n    public function resolveBlockedVars(): array\n    {\n        $blockedVars = parent::resolveBlockedVars();\n\n        if (!$this->useConfiguredOptions() && $this->getOptionsProviderClass()) {\n            $blockedVars[] = 'options';\n        }\n\n        return $blockedVars;\n    }\n\n    public function getParameterTypeDeclaration(): ?string\n    {\n        return '?array';\n    }\n\n    public function getReturnTypeDeclaration(): ?string\n    {\n        return '?array';\n    }\n\n    public function getPhpdocInputType(): ?string\n    {\n        return 'string[]|null';\n    }\n\n    public function getPhpdocReturnType(): ?string\n    {\n        return 'string[]|null';\n    }\n\n    /**\n     * Perform sanity checks, see #5010.\n     *\n     */\n    public function preSave(mixed $containerDefinition, array $params = []): void\n    {\n        /** @var DataObject\\ClassDefinition\\DynamicOptionsProvider\\MultiSelectOptionsProviderInterface|null $optionsProvider */\n        $optionsProvider = DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::resolveProvider(\n            $this->getOptionsProviderClass(),\n            DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::MODE_MULTISELECT\n        );\n        if (!$this->useConfiguredOptions() && $optionsProvider !== null) {\n            $context = [];\n            $context['fieldname'] = $this->getName();\n\n            try {\n                $options = $optionsProvider->getOptions($context, $this);\n            } catch (\\Throwable $e) {\n                // error from getOptions => no values => no comma => no problems\n                $options = null;\n            }\n        } else {\n            $options = $this->getOptions();\n        }\n        if (is_array($options) && array_reduce($options, static function ($containsComma, $option) {\n            return $containsComma || str_contains((string)$option['value'], ',');\n        }, false)) {\n            throw new \\Exception(\"Field {$this->getName()}: Multiselect option values may not contain commas (,) for now, see <a href='https://github.com/pimcore/pimcore/issues/5010' target='_blank'>issue #5010</a>.\");\n        }\n    }\n\n    public function postSave(mixed $containerDefinition, array $params = []): void\n    {\n        // nothing to do\n    }\n\n    public function enrichFieldDefinition(array $context = []): static\n    {\n        $this->doEnrichDefinitionDefinition(null, $this->getName(),\n            'fielddefinition', DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::MODE_MULTISELECT, $context);\n\n        return $this;\n    }\n\n    public function enrichLayoutDefinition(?Concrete $object, array $context = []): static\n    {\n        $this->doEnrichDefinitionDefinition($object, $this->getName(),\n            'layout', DataObject\\ClassDefinition\\Helper\\OptionsProviderResolver::MODE_MULTISELECT, $context);\n\n        return $this;\n    }\n\n    public function getColumnType(): string\n    {\n        return 'text';\n    }\n\n    public function getQueryColumnType(): string\n    {\n        return $this->getColumnType();\n    }\n\n    public function getFieldType(): string\n    {\n        return 'multiselect';\n    }\n}\n"], "filenames": ["models/DataObject/ClassDefinition/Data/Multiselect.php"], "buggy_code_start_loc": [305], "buggy_code_end_loc": [307], "fixing_code_start_loc": [305], "fixing_code_end_loc": [307], "type": "CWE-89", "message": "Pimcore is an Open Source Data & Experience Management Platform. In affected versions the `/admin/object/grid-proxy` endpoint calls `getFilterCondition()` on fields of classes to be filtered for, passing input from the request, and later executes the returned SQL.  One implementation of `getFilterCondition()` is in `Multiselect`, which does not normalize/escape/validate the passed value. Any backend user with very basic permissions can execute arbitrary SQL statements and thus alter any data or escalate their privileges to at least admin level. This vulnerability has been addressed in version 11.1.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n", "other": {"cve": {"id": "CVE-2023-47637", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-15T20:15:08.013", "lastModified": "2023-11-22T22:37:36.737", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pimcore is an Open Source Data & Experience Management Platform. In affected versions the `/admin/object/grid-proxy` endpoint calls `getFilterCondition()` on fields of classes to be filtered for, passing input from the request, and later executes the returned SQL.  One implementation of `getFilterCondition()` is in `Multiselect`, which does not normalize/escape/validate the passed value. Any backend user with very basic permissions can execute arbitrary SQL statements and thus alter any data or escalate their privileges to at least admin level. This vulnerability has been addressed in version 11.1.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n"}, {"lang": "es", "value": "Pimcore es una Plataforma de Gesti\u00f3n de Experiencias y Datos de C\u00f3digo Abierto. En las versiones afectadas, el endpoint `/admin/object/grid-proxy` llama a `getFilterCondition()` en los campos de las clases que se van a filtrar, pasa informaci\u00f3n de la solicitud y luego ejecuta el SQL devuelto. Una implementaci\u00f3n de `getFilterCondition()` est\u00e1 en `Multiselect`, que no normaliza/escapa/valida el valor pasado. Cualquier usuario de backend con permisos muy b\u00e1sicos puede ejecutar declaraciones SQL arbitrarias y as\u00ed alterar cualquier dato o escalar sus privilegios al menos al nivel de administrador. Esta vulnerabilidad se ha solucionado en la versi\u00f3n 11.1.1. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "11.1.1", "matchCriteriaId": "CB0AB594-DA12-4DB0-9CEF-B597702362EE"}]}]}], "references": [{"url": "https://github.com/pimcore/admin-ui-classic-bundle/blob/bba7c7419cb1f06d5fd98781eab4d6995e4e5dca/src/Helper/GridHelperService.php#L311", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/pimcore/pimcore/commit/d164d99c90f098d0ccd6b72929c48b727e2953a0", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/pimcore/pimcore/security/advisories/GHSA-72hh-xf79-429p", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/d164d99c90f098d0ccd6b72929c48b727e2953a0"}}