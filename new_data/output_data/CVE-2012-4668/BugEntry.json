{"buggy_code": ["CHANGELOG Roundcube Webmail\n===========================\n\n- Fix XSS issue with href=\"javascript:\" not being removed (#1488613)\n- Fix impossible to create message with empty plain text part (#1488610)\n- Fix stripped apostrophes when replying in plain text to HTML message (#1488606)\n- Fix inactive Save search option after advanced search (#1488607)\n- Fix Remove from group option is active for contact search result (#1488608)\n- Disable autocapitalization in login form on iPad/iPhone (#1488609)\n- Fix focus on the list when list row is clicked (#1488600)\n- Added separate From and To columns apart from smart From/To column (#1486891)\n- Fix fallback to Larry skin when configured skin isn't available (#1488591)\n- Fix (workaround) delete operations with some versions of memcache (#1488592)\n- Fix (disable) request validation for spell and spell_html actions\n- Add new DB abstraction layer based on PHP PDO, supporting SQLite3 (#1488332)\n- Removed PEAR::MDB2 package\n- Removed users.alias column, added option ('user_aliases')\n  to use email address from identities as username (#1488581)\n- Removed redundant cache.cache_id column (#1488528)\n- Fix order of attachments in sent mail (#1488423)\n- Fix Shift + delete button does not permanently delete messages (#1488243)\n- Add Content-Length for attachments where possible (#1485478)\n- Fix attachment sizes in message print page and attachment preview page (#1488515)\n- Add mail attachments using drag & drop on HTML5 enabled browsers\n- Add workaround for invalid BODYSTRUCTURE response - parse message with Mail_mimeDecode package (#1485585)\n- Display Tiff as Jpeg in browsers without Tiff support (#1488452)\n- Don't display Pdf/Tiff/Flash attachments inline without browser support (#1488452, #1487929)\n- Add is_escaped attribute for html_select and html_textarea (#1488485)\n- Fix issue where draft auto-save wasn't executed after some inactivity time\n- Add vCard import from multiple files at once (#1488015)\n- Roundcube Framework:\n    Add possibility to replace IMAP driver with custom class\n    Add IMAP auto-connection feature, improving performance with caching enabled\n    Replace imap_init hook with storage_init (with additional 'driver' argument)\n    Improved performance by caching IMAP server's capabilities in session\n    Unified global functions naming (rcube_ prefix)\n    Move global functions from main.inc and rcube_shared.inc into classes\n    Better classes separation\n\nRELEASE 0.8.0\n-------------\n- Don't show product version on login screen (can be enabled by config)\n- Renamed old default skin to 'classic'. Larry is the new default skin.\n- Support connections to memcached socket file (#1488577)\n- Enable TinyMCE inlinepopups plugin\n- Update to TinyMCE 3.5.6\n- Correctly escape localized labels in javascript variable (#1488567)\n- Update Net_SMTP/Auth_SASL packages to fix Digest-MD5/Cram-MD5 authentication (#1488571)\n- Don't add attachments content into reply/forward/draft message body (#1488557)\n- Fix 'no connection' errors on page unloads (#1488547)\n- Plugin API: Add 'unauthenticated' hook (#1488138)\n- Show explicit error message when provided hostname is invalid (#1488550)\n- Fix wrong compose screen elements focus in IE9 (#1488541)\n- Fix fatal error when date.timezone isn't set (#1488546)\n- Update to TinyMCE 3.5.4.1\n- Better icons with distinct shapes for priority columns (#1488377)\n- Show dedicated icon for multipart/report messages (#1488524)\n- Properly hide text of icon links/buttons (#1488534)\n- Fix handling of unitless CSS size values in HTML message (#1488535)\n- Fix removing contact photo using LDAP addressbook (#1488420)\n- Fix storing X-ANNIVERSARY date in vCard format (#1488527)\n- Update to Mail_Mime-1.8.5 (#1488521)\n- Fix XSS vulnerability in message subject handling using Larry skin (#1488519)\n- Fix handling of links with various URI schemes e.g. \"skype:\" (#1488106)\n- Fix handling of links inside PRE elements on html to text conversion\n- Fix indexing of links on html to text conversion\n- Decode header value in rcube_mime::get() by default (#1488511)\n- Fix errors with enabled PHP magic_quotes_sybase option (#1488506)\n- Fix SQL query for contacts listing on MS SQL Server (#1488505)\n- Fix window.resize handler on IE8 and Opera (#1488453)\n- Don't let error message popups cover the login form (#1488500)\n- Update to TinyMCE 3.5.2\n- Don't show errors when moving contacts into groups they are already in (#1488493)\n- Make folders with unread messages in subfolders bold again (#1486793)\n- Abbreviate long attachment file names with ellipsis (#1488499)\n- Fix html2text conversion of strong|b|a|th|h tags when used in upper case\n- Add listcontrols template container in Larry skin (#1488498)\n- Fix host autoselection when default_host is an array (#1488495)\n- Move messages forwarding mode setting into Preferences\n- Fix HTML entities handling in HTML editor (#1488483)\n- Fix listing shared folders on Courier IMAP (#1488466)\n\nRELEASE 0.8-rc\n--------------\n- Added new translations in Belarusian, Interlingua and Malayalam\n- Flipped compose options arrow (#1488474)\n- Fix handling of large uuencode attachments (#1488473)\n- Fix handling of \"usemap\" attribute (#1488472)\n- Fix handling of some HTML tags e.g. IMG (#1488471)\n- Use similar language as a fallback for plugin localization (#1488401)\n- Fix issue where signature wasn't re-added on draft compose (#1488322)\n- Update to TinyMCE 3.5 (#1488459)\n- Fixed multi-threaded autocompletion when number of threads > number of sources\n- Allow to configure the number of values allowed for each LDAP attribute\n- Support for serialized LDAP address values (usually delimited with a $)\n- Less restrictive session auth checks, repeat keep-alive requests on failure (#1488449)\n- Fix redirect to mail/compose on re-login (#1488226)\n- Add IE8 hack for messages list issue (#1487821)\n- Fix handling errors on draft auto-save\n- Fix importing vCard photo with ENCODING param specified (#1488432)\n- Support mutliple name/email pairs for Bcc and Reply-To identity settings (#1488445)\n- Set flexible width to login form fields (#1488418)\n- Fix re-draw bug on list columns change in IE8 (#1487822)\n- Allow mass-removal of addresses from a group (#1487748)\n- Fix removing all contacts on import to LDAP addressbook\n- Fix so \"Back\" from compose/show doesn't reset search request (#1488238)\n- Add option to delete messages instead of moving to Trash when in Junk folder (#1486686)\n- Fix invisible cursor when replying to a html message (#1487073)\n- Reset IP stored in session when destroying session data (#1488056)\n- Fix bug where memory_limit = -1 wasn't handled properly\n- Support LDAP RFC2256's country object class read/write (#1488123)\n- Upgraded to jQuery 1.7.2\n- Image resize with GD extension (#1488383)\n- Fix lack of warning when switching task in compose window (#1488399)\n- Fix bug where it wasn't possible to enter ( or & characters in autocomplete fields\n- Request all needed fields from address book backends (#1488394)\n- Unified (single) spellchecker button\n- Scroll long lists on drag&drop (#1485946)\n- Copy all skins in installto script (#1488376)\n\nRELEASE 0.8-beta\n----------------\n- Upgraded to jQuery 1.7.1 (#1488337) and jQuery UI 1.8.18\n- Add Russian to the spellchecker languages list (#1488135)\n- Remember custom skin selection after logout (#1488355)\n- Make sure About tab is always the last tab (#1488257)\n- Fix issue with folder creation under INBOX. namespace (#1488349)\n- Added mailto: protocol handler registration link in User Preferences (#1486580)\n- Handle identity details box with an iframe (#1487020)\n- Fix issue where some text from original message was missing on reply (#1488340)\n- Fix autoselect_host() for login (#1488297)\n- Changed license to GNU GPLv3+ with exceptions for skins & plugins\n- Added address book widget on compose screen\n- Use proper timezones from PHP's internal timezonedb (#1485592)\n- Add separate pagesize setting for mail messages and contacts (#1488269)\n- Deprecate $DB, $USER, $IMAP global variables, Use $RCMAIL instead\n- Add option to set default font for HTML message (#1484137)\n- Fix issues with big memory allocation of IMAP results\n- Prevent from memory_limit exceeding when trying to parse big messages bodies (#1487424)\n- Add possibility to add SASL mechanisms for SMTP in smtp_connect hook (#1487937)\n- Mark (with different color) folders with recent messages (#1486234)\n- Added About tab in Settings\n- TinyMCE updated to 3.4.6\n\nRELEASE 0.7.2\n-------------\n- Fix encoding of attachment with comma in name (#1488389)\n- Fix handling of % character in IMAP protocol (#1488382)\n- Fix duplicate names handling in addressbook searches (#1488375)\n- Fix displaying of HTML messages from Disqus (#1488372)\n- Disable E_STRICT warnings on PHP 5.4\n- Prevent from folder selection on virtual folder collapsing (#1488346)\n- Fix automatic unsubscribe of non-existent folders\n- Fix double-quotes handling in recipient names\n- User configurable setting how to display contact names in list\n- Make contacts list sorting configurable for the admin/user\n- Fix parse errors in DDL files for MS SQL Server\n- Revert SORT=DISPLAY support, removed by mistake (#1488327)\n- Add lost translation label in de_DE (#1488315)\n- Fix drafts update issues when edited from preview pane (#1488314)\n- Fix wrong variable name in rcube_ldap.php (#1488302)\n- Make mime type detection based on filename extension to be case-insensitive\n- Fix failure on MySQL database upgrade from 0.7 - text column can't have default value (#1488300)\n\n\nRELEASE 0.7.1\n-------------\n- Fix bug in handling of base href and inline content (#1488290)\n- Fix SQL Error when saving a contact with many email addresses (#1488286)\n- Fix strict email address searching if contact has more than one address\n- Remove duplicated 'organization' label (#1488287)\n- Fix so editor selector is hidden when 'htmleditor' is listed in 'dont_override'\n- Fix wrong (long) label usage (#1488283)\n- Fix handling of INBOX's subfolders in special folders config (#1488279)\n- Add ifModule statement for setting Options -Indexes in .htaccess file (#1488274)\n- Fix crashes with eAccelerator (#1488256)\n- Fix searching on IMAP servers without CHARSET specifier support (#1488271)\n- Fix expanding folders during drag&drop (#1488260)\n- Fix wrong postgres sequence name in upgrade from 0.6\n- Fix broken CREATE INDEX queries in SQLite DDL files (#1488255)\n\nRELEASE 0.7\n-----------\n- Make Roundcube render the Email Standards Project Acid Test correctly\n- Replace prompt() with jQuery UI dialog (#1485135)\n- Fix navigation in messages search results\n- Improved handling of some malformed values encoded with quoted-printable (#1488232)\n- Add possibility to do LDAP bind before searching for bind DN\n- Fix handling of empty <U> tags in HTML messages (#1488225)\n- Add content filter for embedded attachments to protect from XSS on IE (#1487895)\n- Use strpos() instead of strstr() when possible (#1488211)\n- Fix handling HTML entities when converting HTML to text (#1488212)\n- Fix fit_string_to_size() renders browser and ui unresponsive (#1488207)\n- Fix handling of invalid characters in request (#1488124)\n- Fix merging some configuration options in update.sh script (#1485864)\n- Fix so TEXT key will remove all HEADER keys in IMAP SEARCH (#1488208)\n- Fix handling contact photo url with https:// prefix (#1488202)\n- Fix possible infinite redirect on attachment preview (#1488199)\n- Improved clickjacking protection for browsers which don't support X-Frame-Options headers\n- Fixed bug where similar folder names were highlighted wrong (#1487860)\n- Fixed bug in handling link with '!' character in it (#1488195)\n- Fixed bug where session ID's length was limited to 40 characters (#1488196)\n- TinyMCE security issue: removed moxieplayer (embedding flv and mp4 is not supported anymore)\n\nRELEASE 0.7-beta\n----------------\n- Fix handling of HTML form elements in messages (#1485137)\n- Fix regression in setting recipient to self when replying to a Sent message (#1487074)\n- Fix listing of folders in hidden namespaces (#1486796)\n- Don't consider \\Noselect flag when building folders tree (#1488004)\n- Fix sorting autocomplete results (#1488084)\n- Add option to set session name (#1486433)\n- Add option to skip alternative email addresses in autocompletion\n- Fix inconsistent behaviour of Compose button in Drafts folder, add Edit button for drafts\n- Fix problem with parsing HTML message body with non-unicode characters (#1487813)\n- Add option to define matching method for addressbook search (#1486564, #1487907)\n- Make email recipients separator configurable\n- Fix so folders with \\Noinferiors attribute aren't listed in parent selector\n- Fix handling of curly brackets in URLs (#1488168)\n- Fix handling of dates (birthday/anniversary) in contact data (#1488147)\n- Fix error on opening searched LDAP contact (#1488144)\n- Fix redundant line break in flowed format (#1488146)\n- Fix IDN address validation issue (#1488137)\n- Fix JS error when dst_active checkbox doesn't exist (#1488133)\n- Autocomplete LDAP records when adding contacts from mail (#1488073)\n- Plugin API: added 'ready' hook (#1488063)\n- Ignore DSN request when it isn't supported by SMTP server (#1487800)\n- Make sure LDAP name fields aren't arrays (#1488108)\n- Fixed imap test to non-default port when using ssl (#1488118)\n- Force all files to be overwritten when updating (#1488117)\n- Fix issue where it wasn't possible to change list view mode in folder manager for INBOX (#1488107)\n- Fix namespace handling in special folders settings (#1488112)\n- Disable time limit for CLI scripts (#1488109)\n- Fix misleading display when chaning editor type (#1488104)\n- Add loading indicator on contact delete\n- Fix bug where after delete message rows can be added to the list of another folder (#1487752)\n- Add notice on autocompletion that not all records were displayed\n- Add option 'searchonly' for LDAP address books\n- Add Priority filter to the messages list\n- Cache synchronization using QRESYNC/CONDSTORE\n- Trigger 'new_messages' hook for all checked folders (#1488083)\n- Make date/time format user configurable; drop 'date_today' config option\n- Fix setting title for truncated subject in IE (#1487128)\n- Fix displaying multipart/alternative messages with only one part (#1487938)\n- Rewritten messages caching:\n  Indexes are stored in a separate table, so there's no need to store all messages in a folder\n  Added threads data caching\n  Flags are stored separately, so flag change doesn't cause DELETE+INSERT, just UPDATE\n- Improved FETCH response handling\n- Improvements in response tokenization method\n- Use 'From' and 'To' labels instead of 'Sender' and 'Recipient'\n- Fix username case-insensitivity issue in MySQL (#1488021)\n- Addressbook Saved Searches\n- Added spellchecker exceptions dictionary (shared or per-user)\n- Added possibility to ignore words containing caps, numbers, symbols (spellcheck_ignore_* options)\n- Added 'priority' column on messages list (#1486782)\n- Localize forwarded message header (#1488058)\n\nRELEASE 0.6\n-----------\n- Fix bug where the last identity is used on reply (#1488101)\n- Fix locked folder rename option on servers supporting RFC2086 only (#1488089)\n- Fix session race conditions when composing new messages\n- Fix encoding of LDAP contacts identifiers (#1488079)\n- jQuery 1.6.4\n- Fix handling of binary attachments encoded with quoted-printable (#1488065)\n- Fix text-overflow:ellipsis issues on messages list in FF7 and Webkit (#1488061)\n- Fix handling of links with IP address\n- Fix compacting folder resets message list filter (#1488076)\n\nRELEASE 0.6-rc\n----------------\n- Send X-Frame-Options headers to protect from clickjacking (#1487037)\n- Fallback to mail_domain in LDAP variable replacements; added 'host' to 'user_create' hook arguments (#1488024)\n- Fixed wrong vCard type parameter mobile (#1488067)\n- Fixed vCard WORKFAX issue (#1488046)\n- Add vCard's Profile URL support (#1488062)\n- jQuery 1.6.3\n- Fix imap_cache setting to values other than 'db' (#1488060)\n- Fix handling of attachments inside message/rfc822 parts (#1488026)\n- Make list of mimetypes that open in preview window configurable (#1487625)\n- Added plugin hook 'message_part_get' for attachment downloads\n- Added unique connection identifier to IMAP debug messages\n- Fix image type check for contact photo uploads\n\nRELEASE 0.6-beta\n----------------\n- Fixed selecting identity on reply/forward (#1487981)\n- Add option to hide selected LDAP addressbook on the list\n- Add client-side checking of uploaded files size\n- Add newlines between organization, department, jobtitle (#1488028)\n- Recalculate date when replying to a message and localize the cite header (#1487675)\n- Fix handling of email addresses with quoted local part (#1487939)\n- Fix EOL character in vCard exports (#1487873)\n- Added optional \"multithreading\" autocomplete feature\n- Plugin API: Added 'config_get' hook\n- Fixed new_user_identity plugin to work with updated rcube_ldap class (#1487994)\n- Plugin API: added folder_delete and folder_rename hooks\n- Added possibility to undo last contact delete operation\n- Fix sorting of contact groups after group create (#1487747)\n- Add optional textual upload progress indicator (#1486039)\n- Fix parsing URLs containing commas (#1487970)\n- Added vertical splitter for books/groups list in addressbook (#1487923)\n- Improved namespace roots handling in folder manager\n- Added searching in all addressbook sources\n- Added addressbook source selection in contacts import\n- Implement LDAPv3 Virtual List View (VLV) for paged results listing\n- Use 'address_template' config option when adding a new address block (#1487944)\n- Added addressbook advanced search\n- Add popup with basic fields selection for addressbook search\n- Case-insensitive matching in autocompletion (#1487933)\n- Added option to force spellchecking before sending a message (#1485458)\n- Fix handling of \"<\" character in contact data, search fields and folder names (#1487864)\n- Fix saving \"<\" character in identity name and organization fields (#1487864)\n- Added option to specify to which address book add new contacts\n- Added plugin hook for keep-alive requests\n- Store user preferences in session when write-master is not available and session is stored in memcache, write them later\n- Improve performence of folder manager operations\n- Fix default_port option handling in Installer when config.inc.php file exists (#1487925)\n- Removed option focus_on_new_message, added newmail_notifier plugin\n- Added general rcube_cache class with Memcache and APC support\n- Improved caching performance by skipping writes of unchanged data\n- Option enable_caching replaced by imap_cache and messages_cache options\n- Fix WORKFAX saving in address book (#1487910)\n- Add forward-as-attachment feature\n- jQuery-1.6.2 (#1487913, #1487144)\n- Improve display name composition when saving contacts (#1487143)\n- Fix problems with subfolders of INBOX folder on some IMAP servers (#1487725)\n- Fix handling of folders that doesn't belong to any namespace (#1487637)\n- Enable multiselection for attachments uploading in capable browsers (#1485969)\n- Add possibility to change HTML editor configuration by skin\n- Fix a bug where selecting too many contacts would produce too large URI request (#1487892)\n- Improve performance by including files with absolute path (#1487849)\n- Move folder name truncation to client/skin (#1485412)\n- Added plugin hook for request token creation\n- Replace LDAP vars in group queries (#1487837)\n- Fix vcard folding with uncode characters (#1487868)\n- Keep all submitted data if contact form validation fails (#1487865)\n- Handle uncode strings in rcube_addressbook::normalize_string() (#1487866)\n- Fix handling of debug_level=4 in ajax requests (#1487831)\n- Enable TinyMCE's contextmenu (#1487014)\n- Allow multiple concurrent compose sessions\n- New config option for custom logo\n- Allow skins to define/override texts with <roundcube:label />\n- Add simple ACL rights/namespace handling in folder manager\n- Force IE to send referers (#1487806)\n- Better display of vcard import results (#1485457)\n- Improved vcard import\n- Interactive update script with improved DB schema check\n- Fix problem with contactgroupmembers table creation on MySQL 4.x, add index on contact_id column\n- Add LDAP SASL bind and proxy authentication (#1486692)\n- Replying to a sent message puts the old recipient as the new recipient (#1487074)\n- Fulltext search over (almost) all data for contacts\n- Extend address book with rich contact information\n\nRELEASE 0.5.4\n-------------\n- Fix XSS vulnerability in UI messages (#1488030)\n\nRELEASE 0.5.3\n-------------\n- Fix identities \"reply-to\" and \"bcc\" fields have a bogus value when left empty (#1487943)\n- Fix issue which cases IMAP disconnection when encrypt() method was used (#1487900)\n- Fix some CSS issues in Settings for Internet Explorer \n- Fixed handling of folder with name \"0\" in folder selector\n- Fix bug where messages were deleted instead moved to trash folder after Shift key was used (#1487902)\n- Fix relative URLs handling according to a <base> in HTML (#1487889)\n- Fix handling of top-level domains with more than 5 chars or unicode chars (#1487883)\n- Fix usage of non-standard HTTP error codes (#1487797)\n- Fix PHP warning on mistaken in_array() usage (#1487901)\n\nRELEASE 0.5.2\n-------------\n- TinyMCE 3.4.2 now compatible with IE9\n- PEAR::Net_SMTP 1.5.2, fixed timeout issue (#1487843)\n- Fix bug where template name without plugin prefix was used in render_page hook\n- Support 'abort' and 'result' response in 'preferences_save' hook, add error handling\n- Fix bug where some content would cause hang on html2text conversion (#1487863)\n- Improve space-stuffing handling in format=flowed messages (#1487861)\n- Fix bug where some dates would produce SQL error in MySQL (#1487856)\n- Added workaround for some IMAP server with broken STATUS response (#1487859)\n- Fix bug where default_charset was not used for text messages (#1487836)\n- Stateless request tokens. No keep-alive necessary on login page (#1487829)\n- Force names of unique constraints in PostgreSQL DDL\n- Add code for prevention from IMAP connection hangs when server closes socket unexpectedly\n- Remove redundant DELETE query (for old session deletion) on login\n- Get around unreliable rand() and mt_rand() in session ID generation (#1486281)\n- Fix some emails are not shown using Cyrus IMAP (#1487820)\n- Fix handling of mime-encoded words with non-integral number of octets in a word (#1487801)\n- Fix parsing links with non-printable characters inside (#1487805)\n- Fixed de_CH Localization bugs (#1487773)\n- Add variable for 'Today' label in date_today option (#1486120)\n- Fix dont_override setting does not override existing user preferences (#1487664)\n- Use only one from IMAP authentication methods to prevent login delays (1487784)\n- Support strftime format in date_today option\n- Fix SQL query in rcube_user::query() so it uses index on MySQL again\n- Removed redundant </form> tags from contact add/edit pages\n- Fix CSS error in contact details screen on IE7 (#1487775)\n\nRELEASE 0.5.1\n-------------\n- Fix handling of attachments with invalid content type (#1487767)\n- Add workaround for DBMail's bug http://www.dbmail.org/mantis/view.php?id=881 (#1487766)\n- Use IMAP's ID extension (RFC2971) to print more info into debug log\n- Security: add optional referer check to prevent CSRF in GET requests\n- Fix email_dns_check setting not used for identities/contacts (#1487740)\n- Fix ICANN example addresses doesn't validate (#1487742)\n- Security: protect login form submission from CSRF\n- Security: prevent from relaying malicious requests through modcss.inc\n- Fix handling of non-image attachments in multipart/related messages (#1487750)\n- Fix IDNA support when IDN/INTL modules are in use (#1487742)\n- Fix handling of invalid HTML comments in messages (#1487759)\n- Fix parsing FETCH response for very long headers (#1487753)\n- Fix add/remove columns in message list when message_sort_order isn't set (#1487751)\n- Check mime headers before attempt to parse them (#1487745)\n- Quote header values in show_additional_headers plugin (#1487744)\n- Fix settings UI on IE 6 (#1487724)\n- Remove double borders in folder listing (#1487713)\n- Separate full message headers UI element from headers table (#1487715)\n- Add part MIME ID to message_part_* hooks (#1487718) \n- Improve parsing of MS Outlook vCards (#1487716)\n- Updated PEAR::Net_Socket to 1.0.10\n- Updated PEAR::Net_IDNA2 to 0.1.1\n- Fix handling of comments inside an email address spec. (#1487673)\n- Show full mail subject as title when hovering a cut subject link (#1487128)\n- Fix randomly disappearing folders list in IE (#1487704)\n- Fix list column add/removal in IE (#1487703)\n- Fix login redirect issues (#1487686)\n- Require PHP 5.2.1 or greater\n- Fix %h/%z variables in username_domain option (#1487701)\n- Workaround for setting charset in case of malformed bodystructure response (#1487700)\n- Fix impossible to subscribe to protected folders (#1487656)\n- Fix setting timezone in Preferences (#1487705)\n\nRELEASE 0.5\n-----------\n- Fix double-login/session issue (#1487104)\n- Wrap HTML parts with <html><body> and add Doctype declaration (#1487098)\n- Make rcube_autoload silently skip unknown classes (#1487109)\n- Fix charset detection in vcards with encoded values (#1485542)\n- Better CSS cursors for splitters (#1486874)\n- Show the same message only once (#1487641)\n- Fix namespaces handling (#1487649)\n- Add handling of multifolder METADATA/ANNOTATION responses\n- Fix handling of INBOX when personal namespace prefix is non-empty (#1487657)\n- Fix handling square brackets in links (#1487672)\n- Add description of 'use_https' option in main.inc.php.dist file\n\nRELEASE 0.5-RC\n--------------\n- Plugin API: Add 'pass' argument in 'authenticate' hook (#1487134)\n- Fix attachments of type message/rfc822 are not listed on attachments list\n- Add 'login_lc' config option for case-insensitive authentication (#1487113)\n- Fix window is blur'ed in IE when selecting a message (#1487316)\n- Fix cursor position on compose form in Webkit browsers (#1486674)\n- Fix setting charset of attachment filenames (#1487122)\n- Allow setting autocomplete attribute for all inputs separately (#1487313)\n- New Folder Manager UI\n- Fix invalid Request when creating a folder (#1487443)\n- Add folder size and quota indicator in folder manager (#1485780)\n- Add possibility to move a subfolder into root folder (#1486791)\n- Fix copying all messages in a folder copies only messages from current page\n- Improve performance of moving or copying of all messages in a folder\n- Fix plaintext versions of HTML messages don't contain placeholders for emotions (#1485206)\n- Improve performance of folder rename and delete actions\n- Better support for READ-ONLY and NOPERM responses handling (#1487083)\n- Add confirmation message on purge/expunge command response\n- Fix handling of untagged responses for AUTHENTICATE command (#1487450)\n- Add username and IP address to log message on unsuccessful login (#1487626)\n- Improved Mail-Followup-To and Mail-Reply-To headers handling\n- Fix charset conversion for text attachments without charset specification (#1487634)\n\nRELEASE 0.5-BETA\n----------------\n- Make session data storage more robust against garbage session data (#1487136)\n- Config option for autocomplete on login screen\n- Allow plugin templates to include local files (#1487133)\n- List groups in address detail view and allow to subscribe/unsubscribe from there (#1486753)\n- Messages caching: performance improvements, fixed syncing, fixes related with #1486748\n- Add link to identities in compose window (#1486729)\n- Add Internationalized Domain Name (IDNA) support (#1483894)\n- Add option to automatically send read notifications for known senders (#1485883)\n- Add option to \"Return receipt\" will be always checked (#1486352)\n- Fix HTML to plain text conversion doesn't handle citation blocks (#1486921)\n- Use custom sorting when SORT is disabled by IMAP admin (#1486959)\n- Allow setting some washtml options from plugin (#1486578)\n- Add option do bind for an individual LDAP address book (#1486997)\n- Change reply prefix to display email address only if sender name doesn't exist (#1486550)\n- Plugin API: improved 'abort' flag handling, added 'result' item in some hooks (#1486914)\n- Fix mailto optional params in plain text messages aren't handled (#1487026)\n- Add Reply-to-List feature (#1484252)\n- Add Mail-Followup-To/Mail-Reply-To support (#1485547)\n- Fix confirmation message isn't displayed after sending mail on Chrome (#1486177)\n- Fix keyboard doesn't work with autocomplete list with Chrome (#1487029)\n- Improve tabs to fixed width and add tabs in identities info (#1486974)\n- Add unique index on users.username+users.mail_host\n- Make htmleditor option more consistent and add option to use HTML on reply to HTML message (#1485840)\n- Use empty envelope sender address for message disposition notifications (RFC 2298.3)\n- Support SMTP Delivery Status Notifications - RFC 3461 (#1486142)\n- Use css sprite image for messages list\n- Add (different) attachment icon for messages of type multipart/report (#1486165)\n- Prevent from inserting empty link when composing HTML message (#1486944)\n- Add caching support in id2uid and uid2id functions (#1487019)\n- Add SASL proxy authentication for SMTP (#1486693)\n- Improve displaying of UI messages (#1486977)\n- Fix double e-mail filed in identity form (#1487054)\n- Display IMAP errors for LIST/THREAD/SEARCH commands (#1486905)\n- Add LITERAL+ (IMAP4 non-synchronizing literals) support (RFC 2088)\n- Add separate column for message status icon (#1486665)\n- Add ACL extension support into IMAP classes (RFC 4314)\n- Add ANNOTATEMORE extension support into IMAP classes (draft-daboo-imap-annotatemore)\n- Add METADATA extension support into IMAP classes (RFC 5464)\n- Fix decoding of e-mail address strings in message headers (#1487068)\n- Fix handling of attachments when Content-Disposition is not inline nor attachment (#1487051)\n- Improve performance of unseen messages counting (#1487058)\n- Improve performance of messages counting using ESEARCH extension (RFC4731)\n- Add LIST-STATUS support in rcube_imap_generic class (RFC 5819)\n- Add SASL-IR support in IMAP (RFC 4959)\n- Add LOGINDISABLED support (RFC 2595)\n- Add support for AUTH=PLAIN in IMAP authentication\n- Re-implemented SMTP proxy authentication support\n- Add support for IMAP proxy authentication (#1486690)\n- Add support for AUTH=DIGEST-MD5 in IMAP (RFC 2831)\n- Fix parent folder with unread subfolder not bold when message is open (#1487078)\n- Add basic IMAP LIST's \\Noselect option support\n- Add support for selection options from LIST-EXTENDED extension (RFC 5258)\n- Don't list subscribed but non-existent folders (#1486225)\n- Fix handling of URLs with tilde (~) or semicolon (;) character (#1487087, #1487088)\n- Plugin API: added 'contact_form' hook\n- Add SORT=DISPLAY support (RFC 5957)\n- Plugin API: add possibility to disable plugin in AJAX mode, 'noajax' property\n- Plugin API: add possibility to disable plugin in framed mode, 'noframe' property\n- Improve performance of setting IMAP flags using .SILENT suffix\n- Improve performance of message cache status checking with skip_disabled=true\n- Support contact's email addresses up to 255 characters long (#1487095)\n- Add option to place replies in the folder of the message being replied to (#1485945)\n- Add missing confirmation/error messages on contact/group/message actions (#1486845)\n- Add 'loading' message on message move/copy/delete/mark actions\n- Improve responsiveness of messages displaying (#1486986)\n- Add option for minimum length of autocomplete's string (#1486428)\n- Fix operations on messages in unsubscribed folder (#1487107)\n- Add support for shared folders (#1403507)\n- Fix handling of folders with name \"0\" (#1487119)\n- Fix handling of folders with \"<>\" characters in name\n- jQuery 1.4.4\n- Fix handling of HTML entity strings in plain text messages\n- Fix focused elements aren't unfocused when clicking on the list (#1487123)\n- Fix error in MSSQL DDL scripts (#1487112)\n- Lock submit button in onsubmit event on login page (#1487036)\n- Don't set attachment's charset in Content-type header (#1487122)\n- Fix handling of message bodies (quoted-printable encoded) with NULL characters (#1486189)\n- Add workaround for MSOE's multipart/related messages with non-related attachments\n\nRELEASE 0.4.2\n-------------\n- Fix handling of backslash as IMAP delimiter\n- Fix charset replacement in HTML message bodies (#1487021)\n- Fix: contact group input is empty when using rename action more than once on the same group record\n- Fix \"Server Error! (Not Found)\" when using utils/save-pref action (#1487023)\n- Fix handling of Thunderbird's vCards (#1487024)\n\nRELEASE 0.4.1\n-------------\n- Fix space-stuffing in format=flowed messages (#1487018)\n- Fix msgexport.sh now using the new imap wrapper\n- Avoid displaying password on shell (#1486947)\n- Only lower-case user name if first login attempt failed (#1486393)\n- Make alias setting in squirrelmail_usercopy plugin configurable (patch by pommi, #1487007)\n- Prevent from saving a non-existing skin path in user prefs (#1486936)\n- Improve handling of single-part messages with bogus BODYSTRUCTURE (#1486898)\n- Fix path to SQL files when using pgsql/mysqli/sqlsrv drivers (#1486902)\n- Fix upgrade script for SQLite (#1486903)\n- Fixes in SQL init script + added update script for MSSQL database\n- Remove redundant date in syslog messages (#1486945)\n- Fix contacts list page controls when a group is selected (#1486946)\n- Fix SMTP test in Installer (#1486952)\n- Fix \"Select all\" causes message to be opened in folder with exactly one message (#1486913)\n- Fix Tab key doesn't work in HTML editor in Google Chrome (#1486925)\n- Fix TinyMCE uses zh_CN when zh_TW locale is set (#1486929)\n- Fix TinyMCE buttons are hidden in Opera (#1486922)\n- Fix JS error on IE when trying to send HTML message with enabled spellchecker (#1486940)\n- Display inline images with known extensions and non-image content-type (#1486934)\n- Fix \"Threaded\" checkbox after subfolder creation (#1486928)\n- Fix timezone string in sent mail (#1486961)\n- Show disabled checkboxes for protected folders instead of dots (#1485498)\n- Added fieldsets in Identity form, added 'identity_form' hook\n- Re-added 'Close' button in upload form (#1486930, #1486823)\n- Fix handling of charsets with LATIN-* label\n- Fix messages background image handling in some cases (#1486990)\n- Fix format=flowed handling (#1486989)\n- Fix when IMAP connection fails in 'get' action session shouldn't be destroyed (#1486995)\n- Fix list_cols is not updated after column dragging (#1486999)\n- Support %z variable in host configuration options (#1487003)\n\nRELEASE 0.4\n-----------\n- Fix disapearing upload form disapears when user selects a file on Safari (#1486823)\n- Don't replace error messages with loading info (#1486300)\n- Fix JS errors on compose mode switch (#1486870)\n- Fix message structure parsing when it lacks optional fields (#1486881)\n- Include all recipients in sendmail log\n- Support HTTP_X_FORWARDED_PROTO header for HTTPS detecting (#1486866)\n- Fix default IMAP port configuration (#1486864)\n- Create Sent folder when starting to compose a new message (#1486802)\n- Fix handling of messages with Content-Type: application/* and no filename (#1484050)\n- Improved compose screen: resizable body and attachments list, vertical splitter, options menu\n- Fix RC forgets search results (#1483883)\n- TinyMCE 3.3.7\n- Improve parsing of styled empty tags in HTML messages (#1486812)\n- Add %dc variable support in base_dn/bind_dn config (#1486779)\n- Add button to hide/unhide the preview pane (#1484215)\n- Fix no-cache headers on https to prevent content caching by proxies (#1486798)\n- Fix attachment filenames broken with TNEF decoder using long filenames (#1486795)\n- Use user's timezone in Date header, not server's timezone (#1486119)\n- Add option to set separate footer for HTML messages (#1486660)\n- Add real SMTP error description to displayed error messages (#1485927)\n- Fix some IMAP errors handling when opening the message (#1485443)\n- Fix related parts aren't displayed when got mimetype other than image/* (#1486432)\n- Multiple identity and database support for squirrelmail_usercopy plugin (#1486517)\n- Support dynamic hostname (%d/%n) variables in configuration options (#1485438)\n- Add 'messages_list' hook (#1486266)\n- Add request* event triggers in http_post/http_request (#1486054)\n- Fix use RFC-compliant line-delimiter when saving messages on IMAP (#1486712)\n- Add 'imap_timeout' option (#1486760)\n- Fix forwarding of messages with winmail attachments\n- Fix handling of uuencoded attachments in message body (#1485839)\n- Added list_mailboxes hook in rcube_imap::list_unsubscribed() (#1486668)\n- Fix wrong message on file upload error (#1486725)\n- Add support for data URI scheme [RFC2397] (#1486740)\n- Added 'actionbefore', 'actionafter', 'responsebefore', 'responseafter' events\n- Fix double-addition of e-mail domain to content ID in HTML images\n- Read and send messages with format=flowed (#1484370), fixes word wrapping issues (#1486543)\n- Fix duplicated attachments when forwarding a message (#1486487)\n- Fix message/rfc822 attachments containing only attachments are not parsed properly (#1486743)\n- Fix %00 character in winmail.dat attachments names (#1486738)\n- Fix handling errors of folder deletion (#1486705)\n- Parse untagged CAPABILITY response for LOGIN command (#1486742)\n- Renamed all php-cli scripts to use .sh extension\n- Some files from /bin + spellchecking actions moved to the new 'utils' task\n- Added thread tree icons\n- Extend contact groups support (#1486682)\n- Fix check-recent action issues and performance (#1486526)\n- Fix messages order after checking for recent (#1484664)\n- Fix autocomplete shows entries without email (#1486452)\n- Fix listupdate event doesn't trigger on search response (#1486708)\n- Fix select_all_mode value after selecting a message (#1486720)\n- Set focus to editor on reply in HTML mode (#1486632)\n- Fix composing in HTML jumps cursor to body instead of recipients (#1486674)\n- Allow columns order change per user - drag&drop (#1485795)\n- Add References header in read receipt (#1486681)\n- Fix database constraint violation when opening a message (#1486696)\n- Add 'loading' message while login is in progress (#1486667)\n- Fix quota_zero_as_unlimited (#1486662)\n- Fix folder subscription checking (#1486684)\n- Fix INBOX appears (sometimes) twice in mailbox list (#1486672)\n- Fix listing of attachments of some types e.g. \"x-epoc/x-sisx-app\" (#1486653)\n- Fix DB Schema checking when some db_table_* options are not set (#1486654)\n\nRELEASE 0.4-beta\n----------------\n- Add sizelimit and timelimit variables in LDAP config (#1486544)\n- Hide IMAP host dropdown when single host is defined (#1486326)\n- Add images pre-loading on login page (#1451160)\n- Add HTTP_X_REAL_IP and HTTP_X_FORWARDED_FOR to successful logins log (#1486441)\n- Fix setting spellcheck languages with extended codes (#1486605)\n- Fix messages list scrolling in FF3.6 (#1486472)\n- Fix quicksearch input focus (#1486637)\n- Always set changed date when flagging a DB record as deleted + provide a cleanup script\n- Fix address book/group selection (#1486619)\n- Assign newly created contacts to the active group (#1486626)\n- Added option not to mark messages as read when viewed in preview pane (#1485012)\n- Allow plugins modify the Sent folder when composing (#1486548)\n- Added optional (max_recipients) support to restrict total number of recipients per message (#1484542)\n- Re-organize editor buttons, add blockquote and search buttons\n- Make possible to write inside or after a quoted html message (#1485476)\n- Fix bugs on unexpected IMAP connection close (#1486190, #1486270)\n- Iloha's imap.inc rewritten into rcube_imap_generic class\n- Added contact groups in address book (not finished yet)\n- Added PageUp/PageDown/Home/End keys support on lists (#1486430)\n- Added possibility to select all messages in a folder (#1484756)\n- Added 'imap_force_caps' option for after-login CAPABILITY checking (#1485750)\n- Password: Support dovecotpw encryption\n- TinyMCE 3.3.1\n- Implemented messages copying using drag&drop + SHIFT (#1484086)\n- Improved performance of folders operations (#1486525)\n- Fix blocked.gif attachment is not attached to the message (#1486516)\n- Managesieve: import from Horde-INGO\n- Managesieve: support for more than one match (#1486078)\n- Managesieve: support for selectively disabling rules within a single sieve script (#1485882)\n- Threaded message listing now available\n- Added sorting by ARRIVAL and CC\n- Message list columns configurable by the user\n- Removed 'index_sort' option, now we're using empty 'message_sort_col' for this\n- virtuser_query: support other identity data (#1486148)\n- Options virtuser_* replaced with virtuser_* plugins\n- Plugin API: Implemented 'email2user' and 'user2email' hooks\n- Fix forwarding message omits CC header (#1486305)\n- Add 'default_charset' option to user preferences (#1485451)\n- Add 'delete_always' option to user preferences\n- Support/Require tls:// prefix in 'smtp_server' option for TLS connections\n- Fix inconsistent behaviour of 'delete_always' option (#1486299)\n- Fix deleting all messages from last list page (#1486293)\n- Flag original messages when sending a draft (#1486203)\n- Changed signature separator when top-posting (#1486330)\n- Let the admin define defaults for search modifiers (#1485897)\n- Fix long e-mail addresses validation (#1486453)\n- Remember search modifiers in user prefs (#1486146)\n- Added force_7bit option to force MIME encoding of plain/text messages (#1486510)\n- Use case sensitive check when checking for default folders (#1486346)\n- Fix checking for new mail: now checks unseen count of inbox (#1485794)\n- Improve performance by avoiding unnecessary updates to the session table (#1486325)\n- Fix invalid <font> tags which cause HTML message rendering problems (#1486521)\n- Fix CVE-2010-0464: Disable DNS prefetching (#1486449)\n- Fix Received headers to behave better with SpamAssassin (#1486513)\n- Password: Make passwords encoding consistent with core, add 'password_charset' global option (#1486473)\n- Fix adding contacts SQL error on mysql (#1486459)\n- Squirrelmail_usercopy: support reply-to field (#1486506)\n- Fix IE spellcheck suggestion popup issue (#1486471)\n- Fix email address auto-completion shows regexp pattern (#1486258)\n- Fix merging of configuration parameters: user prefs always survive (#1486368) \n- Fix quota indicator value after folder purge/expunge (#1486488)\n- Fix external mailto links support for use as protocol handler (#1486037)\n- Fix attachment excessive memory use, support messages of any size (#1484660)\n- Fix setting task name according to auth state\n- Password: fix vpopmaild driver (#1486478)\n- Add workaround for MySQL bug [http://bugs.mysql.com/bug.php?id=46293] (#1486474)\n- Fix quoted text wrapping when replying to an HTML email in plain text (#1484141)\n- Fix handling of extended mailto links (with params) (#1486354)\n- Fix sorting by date of messages without date header on servers without SORT (#1486286)\n- Fix inconsistency when not using default table names (#1486467)\n- Fix folder rename/delete buttons do not appear on creation of first folder (#1486468)\n- Fix character set conversion fails on systems where iconv doesn't accept //IGNORE (#1486375)\n- Log in performance: Create default folders on first login only\n- Import contacts into the selected address book (by Phil Weir)\n- Add support for MDB2's 'sqlsrv' driver (#1486395)\n- Use jQuery-1.4\n- Removed problematic browser-caching of messages\n- Fix incompatybility with suhosin.executor.disable_emodifier (#1486321)\n- Use PLAIN auth when CRAM fails and imap_auth_type='check' (#1486371)\n- Fix removal of <title> tag from HTML messages (#1486432)\n- Fix 'force_https' to specified port when URL contains a port number (#1486411)\n- Fix to-text converting of HTML entities inside b/strong/th/hX tags (#1486422)\n- Bug in spellchecker suggestions when server charset != UTF8 (#1486406)\n- Managesieve: Fix requires generation for multiple actions (#1486397)\n- Fix LDAP problem with special characters in RDN (#1486320)\n- Improved handling of message parts of type message/rfc822\n- Plugin API: added 'quota' hook\n- Fix parsing conditional comments in HTML messages (#1486350)\n- Use built-in json_encode() for proper JSON format in AJAX replies\n- Allow setting only selected params in 'message_compose' hook (#1486312)\n- Plugin API: added 'message_compose_body' hook (#1486285)\n- Fix counters of all folders are checked in 'getunread' action  with check_all_folders disabled (#1486128)\n- Fix displaying alternative parts in messages of type message/rfc822 (#1486246)\n- Fix possible messages exposure when using Roundcube behind a proxy (#1486281)\n- Fix unicode para and line separators in javascript response (#1486310)\n- Additional_message_headers: allow unsetting headers, support plugin's config file (#1486268)\n- Fix displaying of hidden directories in skins list (#1486301)\n- Fix open_basedir restriction error when reading skins list (#1486304)\n- Fix pasting from Office apps into html editor (#1486271)\n- Fix empty <a> tags parsing (#1486272)\n- Don't cut off attachment names when using non-RFC2231 encoding (#1485515)\n- Allow inserting signatures above replied message body (#1484272)\n- Managesieve 2.0: multi-script support\n- Fix imap_auth_type regression (#1486263)\n\nRELEASE 0.3.1\n------------------\n- Specify toolbar container in compose template (#1486247)\n- Fix $_SERVER['HTTPS'] check for SSL forcing on IIS (#1486243)\n- Avoid unnecessary page loads for selected tab (#1486032)\n- Fix quota indicator issues by content generation on client-size (#1486197, #1486220)\n- Don't display disabled sections in Settings (#1486099)\n- Added server-side e-mail address validation with 'email_dns_check' option (#1485857)\n- Fix login page loading into an iframe when session expires (#1485952)\n- Allow setting port number in 'force_https' option (#1486091)\n- Option 'force_https' replaced by 'force_https' plugin\n- Fix IE issue with non-UTF-8 characters in AJAX response (#1486159)\n- Partially fixed \"empty body\" issue by showing raw body of malformed message (#1486166)\n- Fix importing/sending to email address with whitespace (#1486214)\n- Added XIMSS (CommuniGate) driver for Password plugin\n- Fix newly attached files are not saved in drafts w/o editing any text (#1486202)\n- Added attachment upload indicator with parallel upload (#1486058)\n- Use default_charset for bodies of messages without charset definition (#1486187)\n- Password: added cPanel driver\n- Fix return to first page from e-mail screen (#1486105)\n- Fix handling HTML comments in HTML messages (#1486189)\n- Fix folder/messagelist controls alignment - icons used (#1486072)\n- Fix LDAP addressbook shows 'Contact not found' error sometimes (#1486178)\n- Fix cache status checking + improve cache operations performance (#1486104)\n- Prevent from setting INBOX as any of special folders (#1486114)\n- Fix regular expression for e-mail address (#1486152)\n- Fix Received header format\n- Implemented sorting by message index - added 'index_sort' option (#1485936)\n- Fix dl() use in installer (#1486150)\n- Added 'ldap_debug' option\n- Fix \"Empty startup greeting\" bug (#1486085)\n- Fix setting user name in 'new_user_identity' plugin (#1486137)\n- Fix incorrect count of new messages in folder list when using multiple IMAP clients (#1485995)\n- Fix all folders checking for new messages with disabled caching (#1486128)\n- Support skins in 'archive' and 'markasjunk' plugins\n- Added 'html_editor' hook (#1486068)\n- Fix DB constraint violation when populating messages cache (#1486052)\n- Password: added password strength options (#1486062)\n- Fix LDAP partial result warning (#1485536)\n- Fix delete in message view deletes permanently with flag_for_deletion=true (#1486101)\n- Use faster/secure mt_rand() (#1486094)\n- Fix roundcube hangs on empty inbox with bincimapd (#1486093)\n- Fix wrong headers for IE on servers without $_SERVER['HTTPS'] (#1485926)\n- Force IE style headers for attachments in non-HTTPS session, 'use_https' option (#1485655)\n- Check 'post_max_size' for upload max filesize (#1486089) \n- Password Plugin: Fix %d inserts username instead of domain (#1486088)\n- Fix rcube_mdb2::affected_rows() (#1486082)\n\nRELEASE 0.3-stable\n------------------\n- Fix gn and givenName should be synonymous in LDAP addressbook (#1485892)\n- Add mail_domain to LDAP email entries without @ sign (#1485201)\n- Fix saving empty values in LDAP contact data (#1485781)\n- Fix LDAP contact update when RDN field is changed (#1485788)\n- Fix LDAP attributes case senitivity problems (#1485830)\n- Fix LDAP addressbook browsing when only one directory is used (#1486022)\n- Fix endless loop on error response for APPEND command (#1486060)\n- Don't require date.timezone setting in installer (#1485989)\n- Fix date sorting problem with Courier IMAP server (#1486065)\n- Unselect pressed buttons on mouse up (#1485987)\n- Don't set php_value error_log in .htaccess but mention in INSTALL (#1485924)\n- Fix too small status/flag/attachment columns in Safari 4 (#1486063)\n- Fix selection disabling while dragging splitter in webkit browsers (#1486056)\n- Added 'new_messages' plugin hook (#1486005)\n- Added 'logout_after' plugin hook (#1486042)\n- Added 'message_compose' hook\n- Added 'imap_connect' hook (#1485956)\n- Fix vcard_attachments plugin (#1486035)\n- Updated PEAR::Auth_SASL to 1.0.3 version\n- Use sequence names only with PostgreSQL (#1486018)\n- Re-designed User Preferences interface \n- Fix MS SQL DDL (#1486020)\n- Fix rcube_mdb2.php: call to setCharset not implemented in mssql driver (#1486019)\n- Added 'display_next' option\n- Fix rcube_mdb2::unixtimestamp for MS SQL (#1486015)\n- Fix HTML washing to respect character encoding\n- Fix endless loop in iil_C_Login() with Courier IMAP (#1486010)\n- Fix #messagemenu display on IE (#1486006)\n- Speedup UI by using sprites for (toolbar) buttons\n- Fix charset names with X- prefix handling\n- Fix displaying of HTML messages with unknown/malformed tags (#1486003)\n\nRELEASE 0.3-RC1\n---------------\n- Fix import of vCard entries with params (#1485453)\n- Fix HTML messages output with empty block elements (#1485974)\n- Use request tokens to protect POST requests from CSRF\n- Added hook when killing a session\n- Added hook to write_log function (#1485971)\n- Performance improvements by use UID commands (#1485690)\n- Fix HTML editor tabIndex setting (#1485972)\n- Added 'imap_debug' and 'smtp_debug' options\n- Support strftime's format modifiers in date_* options (#1484806)\n- Support %h variable in 'smtp_server' option (#1485766)\n- Show SMTP errors in browser (#1485927)\n- Allow WBR tag in HTML message (#1485960)\n- Use spl_autoload_register() instead of __autoload (#1485947)\n- Add hook for identities listing (#1485958)\n- Trigger hook 'smtp_connect' when opening an SMTP connection (#1485954)\n- Added config option to enforce HTTPS connections\n- Fix non-unicode characters caching in unicode database (#1484608)\n- Performance improvements of messages caching\n- Fix empty Date header issue (#1485923)\n- Open collapsed folders during drag & drop (#1485914)\n- Fixed link text replacements (#1485789)\n- Also trigger 'insertrow' events on page load (#1485826)\n- No link on subject in IE browsers (#1484913)\n- Fixed filename encoding according to RFC2231 (#1485875)\n- Added message Edit feature (#1483891, #1484440)\n- Fix message Etag generation for counter issues (#1485623)\n- Fix messages searching on MailEnable IMAP (#1485762)\n- Fixed many 'skip_deleted' issues (#1485634)\n- Fixed messages list sorting on servers without SORT capability\n- Colorized signatures in plain text messages\n- Reviewed/fixed skip_deleted/read_when_deleted/flag_for_deletion options handling in UI\n- Fix displaying of big maximum upload filesize (#1485889)\n- Added possibility to invert messages selection\n- After move/delete from 'show' action display next message instead of messages list (#1485887)\n- Fixed problem with double quote at the end of folder name (#1485884)\n- Speedup UI by using CSS sprites and etags/expires/deflate in Apache config (#1484858,#1485800)\n- Support UID EXPUNGE: remove only moved/deleted messages\n- Add drag cancelling with ESC key (#1484344)\n- Support initial identity name from virtuser_query (#1484003)\n- Added message menu, removed Print and Source buttons\n- Added possibility to save message as .eml file (#1485861)\n- Added 1 minute interval in autosave options (#1485854)\n- Support UTF-7 encoding in messages (#1485832)\n- Better support for malformed character names (#1485758)\n\nRELEASE 0.3-BETA\n----------------\n- Plugin API + jQuery engine\n- Added possibility to encrypt received header, option 'http_received_header_encrypt',\n  added some more logic in encrypt/decrypt functions for security\n- Fix Answered/Forwarded flag setting for messages in subfolders\n- Fix autocomplete problem with capital letters (#1485792)\n- Support UUencode content encoding (#1485839)\n- Minimize chance of race condition in session handling (#1485659, #1484678)\n- Fix session handling on non-session SQL query error (#1485734)\n- Fix html editor mode setting when reopening draft message (#1485834)\n- Added quick search box menu (#1484304)\n- Fix wrong column sort order icons (#1485823)\n- Updated TinyMCE to 3.2.3 version\n- Fix attachment names encoding when charset isn't specified in attachment part (#1484969)\n- Fix message normal priority problem (#1485820)\n- Fix autocomplete spinning wheel does not disappear (#1485804)\n- Added log_date_format option (#1485709)\n- Fix text wrapping in HTML editor after switching from plain text to HTML (#1485521)\n- Fix auto-complete function hangs with plus sign (#1485815)\n- Fix AJAX requests errors handler (#1485000)\n- Speed up message list displaying on IE\n- Fix read/write database recognition (#1485811)\n\nRELEASE 0.2.2\n-------------\n- Fix quicksearchbox look in Chrome and Konqueror (#1484841)\n- Fix UTF-8 byte-order mark removing (#1485514)\n- Fix folders subscribtions on Konqueror (#1484841) \n- Fix debug console on Konqueror and Safari\n- Fix messagelist focus issue when modifying status of selected messages (#1485807)\n- Support STARTTLS in IMAP connection (#1485284)\n- Fix DEL key problem in search boxes (#1485528)\n- Support several e-mail addresses per user from virtuser_file (#1485678)\n- Fix drag&drop with scrolling on IE (#1485786)\n- Fix adding signature separator in html mode (#1485350)\n- Fix opening attachment marks message as read (#1485803)\n- Fix 'temp_dir' does not support relative path under Windows (#1484529)\n- Fix \"Initialize Database\" button missing from installer (#1485802)\n- Fix compose window doesn't fit 1024x768 window (#1485396)\n- Fix service not available error when pressing back from compose dialog (#1485552)\n- Fix using mail() on Windows (#1485779)\n- Fix word wrapping in message-part's <PRE>s for printing (#1485787)\n- Fix incorrect word wrapping in outgoing plaintext multibyte messages (#1485714)\n- Fix double footer in HTML message with embedded images\n- Fix TNEF implementation bug (#1485773)\n- Fix incorrect row id parsing for LDAP contacts list (#1485784) \n- Fix 'mode' parameter in sqlite DSN (#1485772)\n\nRELEASE 0.2.1\n------------------\n- Use US-ASCII as failover when Unicode searching fails (#1485762)\n- Fix errors handling in IMAP command continuations (#1485762)\n- Fix FETCH result parsing for servers returning flags at the end of result (#1485763)\n- Fix datetime columns defaults in mysql's DDL (#1485641)\n- Fix attaching more than nine inline images (#1485759)\n- Support 'UNICODE-1-1-UTF-7' alias for UTF-7 encoding (#1485758)\n- Fix mime-type detection using a hard-coded map (#1485311)\n- Don't return empty string if charset conversion failed (#1485757)\n- Disable concurrent autocomplete query results display (#1485743)\n- Fix new lines stripped from message footer (#1485751)\n- Fix IE problem with mouse click autocomplete (#1485739)\n- Fix html body washing on reply/forward + fix attachments handling (#1485676)\n- Fix multiple recipients input parsing (#1485733)\n- Fix replying to message with html attachment (#1485676)\n- Use default_charset for messages without specified charset (#1485661, #1484961)\n- Support non-standard \"GMT-XXXX\" literal in date header (#1485729)\n- Added TNEF support to decode MS Outlook attachments (winmail.dat)\n- Fix \"value continuation\" MIME headers by adding required semicolon (#1485727)\n- Fix pressing select all/unread multiple times (#1485723)\n- Fix selecting all unread does not honor new messages (#1485724)\n- Fix some base64 encoded attachments handling (#1485725)\n- Support NGINX as IMAP backend: better BAD response handling (#1485720)\n- Performance fix: don't fetch attachment parts headers twice to parse filename\n- Fix checking for recent messages on various IMAP servers (#1485702)\n- Performance fix: Don't fetch quota and recent messages in \"message view\" mode\n- Fix displaying of alternative-inside-alternative messages (#1485713)\n- Fix MDNSent flag checking, use arbitrary keywords (asterisk) flag (#1485706)\n- Fix creation of folders with '&' sign in name\n- Fix parsing of email addresses without angle brackets (#1485693)\n- Save spellcheck corrections when switching from plain to html editor (and spellchecking is on)\n- Fix large search results on server without SORT capability (#1485668)\n- Get rid of preg_replace() with eval modifier and create_function usage (#1485686)\n- Bring back <base> and <link> tags in HTML messages\n- Fix XSS vulnerability through background attributes as reported by Julien Cayssol\n- Fix problems with backslash as IMAP hierarchy delimiter (#1484467)\n- Secure vcard export by getting rid of preg's 'e' modifier use (#1485689)\n- Fix authentication when submitting form with existing session (#1485679)\n- Allow absolute URLs to images in HTML messages/sigs (#1485666)\n- Fix message body which contains both inline attachments and emotions\n- Fix SQL query execution errors handling in rcube_mdb2 class (#1485509)\n- Fix address names with '@' sign handling (#1485654)\n- Improve messages display performance\n- Fix messages searching with 'to:' modifier\n\nRELEASE 0.2-STABLE\n------------------\n- Fix mark popup in IE 7 (#1485369)\n- Fix line-break issue when copy & paste in Firefox (#1485425)\n- Fix autocomplete \"unknown server error\" (#1485637)\n- Fix STARTTLS before AUTH in SMTP connection (#1484883)\n- Support multiple quota values in QUOTAROOT resonse (#1485626)\n- Only abbreviate file name for IE < 7 browsers (#1485063)\n- Performance: allow setting imap rootdir and delimiter before connect (#1485172)\n- Fix sorting of folders with more than 2 levels (#1485569)\n- Fix search results page jumps in LDAP addressbook (#1485253)\n- Fix empty line before the signature in IE (#1485351)\n- Fix horizontal scrollbar in preview pane on IE (#1484633)\n- Add Robots meta tag in login page and installer (#1484846)\n- Added 'show_images' option, removed 'addrbook_show_images' (#1485597)\n- Option to check for new mails in all folders (#1484374)\n- Don't set client busy when checking for new messages (#1485276)\n- Allow UTF-8 folder names in config (#1485579)\n- Add junk_mbox option configuration in installer (#1485579)\n- Do serverside addressbook queries for autocompletion (#1485531)\n- Allow setting attachment col position in 'list_cols' option\n- Allow override 'list_cols' via skin (#1485577)\n- Fix 'cache' table cleanup on session destroy (#1485516)\n- Increase speed of session destroy and garbage clean up\n- Fix session timeout when DB server got clock skew (#1485490)\n- Fix handling of some malformed messages (#1484438)\n- Speed up raw message body handling\n- Better HTML entities conversion in html2text (#1485519)\n- Fix big memory consumption and speed up searching on servers without SORT capability\n- Fix setting locale to tr_TR, ku and az_AZ (#1485470) \n- Use SORT for searching on servers with SORT capability\n- Added message status filter\n- Fix empty file sending (#1485389)\n- Improved searching with many criterias (calling one SEARCH command)\n- Fix HTML editor initialization on IE (#1485304)\n- Add warning when switching editor mode from html to plain (#1485488)\n- Make identities list scrollable (#1485538)\n- Fix problem with numeric folder names (#1485527)\n- Added BYE response simple support to prevent from endless loops in imap.inc (#1483956)\n- Fix unread message unintentionally marked as read if read_when_deleted=true (#1485409)\n- Remove port number from SERVER_NAME in smtp_helo_host (#1485518)\n- Don't send disposition notification receipts for messages marked as 'read' (#1485523)\n- Added 'keep_alive' and 'min_keep_alive' options (#1485360)\n- Added option 'identities_level', removed 'multiple_identities'\n- Allow deleting identities when multiple_identities=false (#1485435)\n- Added option focus_on_new_message (#1485374)\n- Fix html2text class autoloading on Windows (#1485505)\n- Fix html signature formatting when identity save error occured (#1485426)\n- Add feedback and set busy when moving folder (#1485497)\n- Fix 'Empty' link visibility for some languages e.g. Slovak (#1485489)\n- Fix messages count bar overlapping (#1485270)\n- Fix adding signature in drafts compose mode (#1485484)\n- Fix iil_C_Sort() to support very long and/or divided responses (#1485283)\n- Fix matching case sensitivity when setting identity on reply (#1485480)\n- Prefer default identity on reply\n- Fix imap searching on ISMail server (#1485466)\n- Add css class for flagged messages (#1485464)\n- Write username instead of id in sendmail log (#1485477)\n- Fix htmlspecialchars() use for PHP version < 5.2.3 (#1485475)\n- Fix js keywords escaping in json_serialize() for IE/Opera (#1485472)\n- Added bin/killcache.php script (#1485434)\n- Add support for SJIS, GB2312, BIG5 in rc_detect_encoding()\n- Fix vCard file encoding detection for non-UTF-8 strings (#1485410)\n- Add 'skip_deleted' option in User Preferences (#1485445)\n- Minimize \"inline\" javascript scripts use (#1485433)\n- Fix css class setting for folders with names matching defined classes names (#1485355)\n- Fix race conditions when changing mailbox\n- Fix spellchecking when switching to html editor (#1485362)\n- Fix compose window width/height (#1485396)\n- Allow calling msgimport.sh/msgexport.sh from any directory (#1485431)\n- Localized filesize units (#1485340)\n- Better handling of \"no identity\" and \"no email in identity\" situations (#1485117)\n- Added 'mime_param_folding' option with possibility to choose long/non-ascii attachment names encoding eg. to be readable in MS Outlook/OE (#1485320)\n- Added \"advanced options\" feature in User Preferences\n- Fix unread counter when displaying cached massage in preview panel (#1485290)\n- Fix htmleditor spellchecking on MS Windows (#1485397)\n- Fix problem with non-ascii attachment names in Mail_mime (#1485267, #1485096)\n- Fix language autodetection (#1485401)\n- Fix button label in folders management (#1485405)\n- Fix collapsed folder not indicating unread msgs count of all subfolders (#1485403)\n- Fix handling of apostrophes in filenames decoded according to rfc2231\n\nRELEASE 0.2-BETA\n----------------\n- Made config files location configurable (#1485215)\n- Reduced memory footprint when forwarding attachments (#1485345)\n- Allow and use spellcheck attribute for input/textarea fields (#1485060)\n- Added icons for forwarded/forwarded+replied messages (#1485257)\n- Added Reply-To to forwarded emails (#1485315)\n- Display progress message for folders create/delete/rename (#1485357)\n- Smart Tags and NOBR tag support in html messages (#1485363, #1485327)\n- Redesign of the identities settings (#1484042)\n- Add config option to disable creation/deletion of identities (#1484498)\n- Added 'sendmail_delay' option to restrict messages sending interval (#1484491)\n- Added vertical splitter for folders list resizing\n- Added possibility to view all headers in message view\n- Fixed splitter drag/resize on Opera (#1485170)\n- Fixed quota img height/width setting from template (#1484857)\n- Refactor drag & drop functionality. Don't rely on browser events anymore (#1484453)\n- Insert \"virtual\" folders in subscription list (#1484779)\n- Added link to open message in new window\n- Enable export of address book contacts as vCard\n- Add feature to import contacts from vcard files (#1326103)\n- Respect Content-Location headers in multipart/related messages according to RFC2110 (#1484946)\n- Allowed max. attachment size now indicated in compose screen (#1485030)\n- Also capture backspace key in list mode (#1484566)\n- Allow application/pgp parts to be displayed (#1484753)\n- Correctly handle options in mailto-links (#1485228)\n- Immediately save sort_col/sort_order in user prefs (#1485265)\n- Truncate very long (above 50 characters) attachment filenames when displaying\n- Allow to auto-detect client language if none set (#1484434)\n- Auto-detect the client timezone (user configurable)\n- Add RFC2231 header value continuations support for attachment filenames + hack for servers that not support that feature\n- Fix Reply-To header displaying (#1485314)\n- Mark form buttons that provide the most obvious operation (mainaction)\n- Added option 'quota_zero_as_unlimited' (#1484604)\n- Added PRE handling in html2text class (#1484740)\n- Added folder hierarchy collapsing\n- Added options to use syslog instead of log file (#1484850)\n- Added Logging & Debugging section in Installer\n- Fix In-Reply-To and References headers when composing saved draft message (#1485288)\n- Fix html message charset conversion for charsets with underline (#1485287) \n- Fix buttons status after contacts deletion (#1485233)\n- Fix escaping of To: and From: fields when building message body for reply or forward in the HTML editor (#1484904)\n- Use current mailbox name in template (#1485256)\n- Better fix for skipping untagged responses (#1485261)\n- Added pspell support patch by Kris Steinhoff (#1483960)\n- Enable spellchecker for HTML editor (#1485114)\n- Respect spellcheck_uri in tinyMCE spellchecker (#1484196)\n- Case insensitive contacts searching using PostgreSQL (#1485259)\n- Make default imap folders configurable for each user (#1485075)\n- Save outgoing mail to selectable folder (#1324581)\n- Fix hiding of mark menu when clicking th button again (#1484944)\n- Use long date format in print mode (#1485191)\n- Updated TinyMCE to version 3.1.0.1\n- Re-enable autocomplete attribute for login form (#1485211)\n- Check PERMANENTFLAGS before saving $MDNSent flag (#1484963, #1485163)\n- Added flag column on messages list (#1484623)\n- Patched Mail/MimePart.php (http://pear.php.net/bugs/bug.php?id=14232)\n- Allow trash/junk subfolders to be purged (#1485085)\n- Store compose parameters in session and redirect to a unique URL\n- Fixed CRAM-MD5 authentication (#1484819)\n- Fixed forwarding messages with one HTML attachment (#1484442)\n- Fixed encoding of message/rfc822 attachments and image/pjpeg handling (#1484914)\n- Added option to select skin in user preferences\n- Added option to configure displaying of attached images below the message body\n- Added option to display images in messages from known senders (#1484601)\n- User preferences grouped in more fieldsets\n- Fix corrupted MIME headers of messages in Sent folder (#1485111)\n- Fixed bug in MDB2 package: http://pear.php.net/bugs/bug.php?id=14124\n- Use keypress instead of keydown to select list's row (#1484816)\n- Don't call expunge and don't remove message row after message move if flag_for_deletion is set to true (#1485002)\n\nRELEASE 0.2-ALPHA\n-----------------\n- Added option to disable autocompletion from selected LDAP address books (#1484922)\n- TLS support in LDAP connections: 'use_tls' property (#1485104)\n- Fixed removing messages from search set after deleting them (#1485106)\n- imap.inc: Fixed iil_C_FetchStructureString() to handle many \n  literal strings in response (#1484969)\n- Support for subfolders in default/protected folders (#1484665)\n- Disallowed delimiter in folder name (#1484803)\n- Support \" and \\ in folder names\n- Escape \\ in login (#1484614)\n- Better HTML sanitization with the DOM-based washtml script (#1484701)\n- Fixed sorting of folders with non-ascii characters\n- Fixed Mysql DDL for default identities creation (#1485070)\n- In Preferences added possibility to configure 'read_when_deleted',\n  'mdn_requests', 'flag_for_deletion' options\n- Made IMAP auth type configurable (#1483825)\n- Fixed empty values with FROM_UNIXTIME() in rcube_mdb2 (#1485055)\n- Fixed attachment list on IE 6/7 (#1484807)\n- Fixed JavaScript in compose.html that shows cc/bcc fields if populated\n- Make password input fields of type password in installer (#1484886)\n- Don't attempt to delete cache entries if enable_caching is FALSE (#1485051)\n- Optimized messages sorting on servers without sort capability (#1485049)\n- Corrected message headers decoding when charset isn't specified and improved\n  support for native languages (#1485050, #1485048)\n- Expanded LDAP configuration options to support LDAP server writes.\n- Installer: encode special characters in DB username/password (#1485042)\n- Fixed management of folders with national characters in names (#1485036, #1485001)\n- Fixed identities saving when using MDB2 pgsql driver (#1485032)\n- Fixed BCC header reset (#1484997)\n- Improved messages list performance - patch from Justin Heesemann\n- Append skin_path to images location only when it starts with '/' sign (#1484859)\n- Fix IMAP response in message body when message has no body (#1484964)\n- Fixed non-RFC dates formatting (#1484901)\n- Fixed typo in set_charset() (#1484991)\n- Decode entities when inserting HTML signature to plain text message (#1484990)\n- HTML editing is now working with PHP5 updates and TinyMCE v3.0.6\n- Fixed signature loading on Windows (#1484545)\n- Added language support to HTML editing (#1484862)\n- Fixed remove signature when replying (#1333167)\n- Fixed problem with line with a space at the end (#1484916)\n- Fixed <!DOCTYPE> tag filtering (#1484391)\n- Fixed <?xml> tag filtering (#1484403)\n- Added sections (fieldset+label) in Settings interface\n- Mark as read in one action with message preview (#1484972)\n- Deleted redundant quota reads (#1484972)\n- Added options for empty trash and expunge inbox on logout (#1483863)\n- Removed lines wrapping when displaying message\n- Fixed month localization\n- Changed codebase to PHP5 with autoloader\n\nRELEASE 0.1.1\n-------------\n- Clear selection when selecting single item (#1484942)\n- Remove hard-coded image size in skin templates (#1484893)\n- Database schema improvements (dropped unnecessary indexes)\n- Fixed creating a new folder with a comma in its name (#1484681)\n- Fixed sorting of messages when default mailbox is empty (#1484317)\n- Improve message previewpane - less loading (#1484316)\n- Fixed login form autoompletion (#1484839)\n- Fixed virtuser_query option for mdb2 backend (#1484874)\n- Fixed attachment resoting from Drafts when message body was empty (#1484506)\n- Fixed usage of ob_gzhandler (#1484851)\n- Fixed message part window in IE6 (#1484610)\n- Fixed decoding of mime-encoded strings (#1484191)\n- Fixed some iconv/mb_string problems (#1484598)\n- Correctly quote mailbox name when using in URL (#1484313)\n- Fixed \"headers already sent\" errors (#1484860)\n\nRELEASE 0.1-STABLE\n------------------\n- Added interactive installer script\n- Fix folder adding/renaming inspired by #1484800\n- Localize folder name in page title (#1484785)\n- Fix code using wrong variable name (#1484018)\n- Allow to send mail with BCC recipients only\n- condense TinyMCE toolbar down to one line, removing table buttons (#1484747)\n- Add function to mark the selected messages as read/unread (#1457360)\n- Also do charset decoding as suggested in RFC 2231 (fix #1484321)\n- Show message count in folder list and hint when creating a subfolder\n- Distinguish ssl and tls for imap connections (#1484667)\n- Added some charset aliases to fix typical mis-labelling (#1484565)\n- Remember decision to display images for a certain message during session (#1484754)\n- Truncate attachment filenames to 55 characters due to an IE bug (#1484757)\n- Make sending of read receipts configurable\n- Respect config when localize folder names (#1484707)\n- Also respect receipt and priority settings when re-opening a draft message\n- Remember search results (closes #1483883), patch by the_glu\n- Add Received header on outgoing mail\n- Upgrade to TinyMCE 2.1.3\n- Allow inserting image attachments into HTML messages while composing (#1484557)\n- Implement Message-Disposition-Notification (Receipts)\n- Fix overriding of session vars when register_globals is on (#1484670)\n- Fix bug with case-sensitive folder names (#1484245)\n- Don't create default folders by default\n- Fixed some potential security risks (audited by Andris)\n- Only show new messages if they match the current search (#1484176)\n- Switch to/from when searcing in Sent folder (#1484555)\n- Correctly read the References header (#1484646)\n- Unset old cookie before sending a new value (#1484639)\n- Correctly decode attachments when downloading them (#1484645 and #1484642)\n- Suppress IE errors when clearing attachments form (#1484356)\n- Log error when login fails due to auto_create_user turned off\n- Filter linked/imported CSS files (closes #1484056)\n- Improve message compose screen (closes #1484383)\n- Select next row after removing one from list (#1484387)\n\nRELEASE 0.1-RC2\n---------------\n- Enable drag-&-dropping of folders to a new parent and allow to create subfolders (#1457344)\n- Suppress IE errors when clearing attachments form (#1484356)\n- Set preferences field in user table to NULL (#1484386)\n- Log error when login fails due to auto_create_user turned off\n- Filter linked/imported CSS files (closes #1484056)\n- Improve message compose screen (closes #1484383)\n- Select next row after removing one from list (#1484387)\n- Make smtp HELO/EHLO hostname configurable (#1484067)\n- IPv6 Compatability (#1484322), Patch #1484373\n- Unlock interface when message sending fails (#1484570)\n- Eval PHP code in template includes (if configured)\n- Show message when folder is empty. Mo more static text in table (#1484395)\n- Only display unread count in page title when new messages arrived\n- Fixed wrong delete button tooltip (#1483965)\n- Fixed charset encoding bug (#1484429)\n- Applied patch for LDAP version (#1484552)\n- Improved XHTML validation\n- Fix message list selection (#1484550)\n- Better fix lowercased usernames (#1484473)\n- Update pngbehavior Script as suggested in #1484490\n- Fixed moving/deleting messages when more than 1 is selected\n- Applied patch for LDAP contacts listing by Glen Ogilvie\n- Applied patch for more address fields in LDAP contacts (#1484402)\n- Add alternative for getallheaders() (fix #1484508)\n- Identify mailboxes case-sensitive\n- Sort mailbox list case-insensitive (closes #1484338)\n- Fix display of multipart messages from Apple Mail (closes #1484027)\n- Protect AJAX request from being fetched by a foreign site (XSS)\n- Make autocomplete for loginform configurable by the skin template\n- Fix compose function from address book (closes #1484426)\n- Added //IGNORE to iconv call (patch #1484420, closes #1484023)\n- Check if mbstring supports charset (#1484290 and #1484292)\n- Prefer iconv over mbstring (as suggested in #1484292)\n- Check filesize of template includes (#1484409)\n- Fixed bug with buttons not dimming/enabling properly after switching folders\n- Fixed compose window becoming unresponsive after saving a draft (#1484487)\n- Re-enabled \"Back\" button in compose window now that bug #1484487 is fixed\n- Fixed unresponsive interface issue when downloading attachments (#1484496)\n- Lowered status message time from 5 to 3 seconds to improve responsiveness\n- Raised .htaccess upload_max_filesize from 2M to 5M to differ from default php.ini\n- Increased \"mailboxcontrols\" mail.css width from 160 to 170px to fix non-english languages (#1484499)\n- Fix status message bug #1484464 with regard to #1484353\n- Fix address adding bug reported by David Koblas\n- Applied socket error patch by Thomas Mangin\n- Pass-by-reference workarround for PHP5 in sendmail.inc\n- Fixed buggy imap_root settings (closes #1484379)\n- Prevent default events on subject links (#1484399)\n- Use HTTP-POST requests for actions that change state\n\nRELEASE 0.1-RC1\n---------------\n- Use global filters and bind username/ for Ldap searches (#1484159)\n- Hide quota display if imap server does not support it\n- Hide address groups if no LDAP servers configured\n- Add link to message subjects (closes #1484257)\n- Better SQL query for contact listing/search (closes #1484369)\n- Fixed marking as read in preview pane (closes #1484364)\n- CSS hack to display attachments correctly in IE6\n- Wrap message body text (closes #1484148)\n- LDAP access is back in address book (closes #1484087)\n- Added search function for contacts\n- New Template parsing and output encoding\n- Fixed bugs #1484119 and #1483978\n- Fixed message moving procedure (closes #1484308)\n- Fixed display of multiple attachments (closes #1466563)\n- Fixed check for new messages (closes #1484310)\n- List attachments without filename\n- New session authentication: Change sessid cookie when login, authentication with sessauth cookie is now configurable.\n  Should close bugs #1483951 and #1484299\n- Correctly translate mailbox names (closes #1484276)\n- Quote e-mail address links (closes #1484300)\n- Updated PEAR::Mail_mime package\n- Accept single quotes for HTML attributes when modifying message body (thanks Jason)\n- Sanitize input for new users/identities (thanks Colin Alston)\n- Don't download HTML message parts\n- Convert HTML parts to plaintext if 'prefer_html' is off\n- Correctly parse message/rfc822 parts (closes #1484045)\n- Also use user_id for unique key in messages table (closes #1484074)\n- Hide contacts drop down on blur (closes #1484203)\n- Make entries in contacts drop down clickable\n- Turn off browser autocompletion on login page\n- Quote <? in text/html message parts\n- Hide border around radio buttons\n- Applied patch for attachment download by crichardson (closes #1484198)\n- Fixed bug in Postgres DB handling (closes #1484068)\n- Fixed bug of invalid calls to fetchRow() in rcube_db.inc (closes #1484280)\n- Fixed array_merge bug (closes #1484281)\n- Fixed flag for deletion in list view (closes #1484264)\n- Finally support semicolons as recipient separator (closes ##1484251)\n- Fixed message headers (subject) encoding\n- check if safe mode is on or not (closes #1484269)\n- Show \"no subject\" in message list if subject is missing (closes #1484243)\n- Solved page caching of message preview (closes #1484153)\n- Only use gzip compression if configured (closes #1484236)\n- Fixed priority selector issue (#1484150)\n- Fixed some CSS issues in default skin (closes #1484210 and #1484161)\n- Prevent from double quoting of numeric HTML character references (closes #1484253)\n- Fixed display of HTML message attachments (closes #1484178)\n- Applied patch for preview caching (closes #1484186)\n- Added error handling for attachment uploads\n- Use multibyte safe string functions where necessary (closes #1483988)\n- Applied security patch to validate the submitted host value (by Kees Cook)\n- Applied security patch to validate input values when deleting contacts (by Kees Cook)\n- Applied security patch that sanitizes emoticon paths when attaching them (by Kees Cook)\n- Applied a patch to more aggressively sanitize a HTML message\n- Visualize blocked images in HTML messages\n- Fixed wrong message listing when showing search results (closes #1484131)\n- Show remote images when opening HTML message part as attachment\n- Improve memory usage when sending mail (closes #1484098)\n- Mark messages as read once the preview is loaded (closes #1484132)\n- Include smtp final response in log (closes #1484081)\n- Corrected date string in sent message header (closes #1484125)\n- Correclty choose \"To\" column in sent and draft mailboxes (closes #1483943)\n- Changed srong tooltips for message browse buttons (closes #1483930)\n- Fixed signature delimeter character to be standard (Bug #1484035)\n- Fixed XSS vulnerability (Bug #1484109)\n- Remove newlines from mail headers (Bug #1484031)\n- Selection issues when moving/deleting (Bug #1484044)\n- Applied patch of Clement Moulin for imap host auto-selection\n- ISO-encode IMAP password for plaintext login (Bugs #1483977 & #1483886)\n- Fixed folder name encoding in subscription list (Bug #1484113)\n- Fixed JS errors in identity list (Bug #1484120)\n- Translate foldernames in folder form (closes #1484113)\n- Added first and last buttons to message list, address book\n  and message detail\n- Pressing Shift-Del bypasses Trash folder\n- Enable purge command for Junk folder\n- Fetch all aliases if virtuser_query is used instead\n- Re-enabled multi select of contacts (Bug #1484017)\n- Enable contact editing right after creation (Bug #1459641)\n- Correct UTF-7 to UTF-8 conversion if mbstring is not available\n- Fixed IMAP fetch of message body (Bug #1484019)\n- Fixed safe_mode problems (Bug #1418381)\n- Fixed wrong header encoding (Bug #1483976)\n- Made automatic draft saving configurable\n- Fixed JS bug when renaming folders (Bug #1483989)\n- Added quota display as image (by Brett Patterson)\n- Corrected creation of a message-id\n- New indentation for quoted message text\n- Improved HTML validity\n- Fixed URL character set (Ticket #1445501)\n- Fixed saving of contact into MySQL from LDAP query results (Ticket #1483820)\n- Fixed folder renaming: unsubscribe before rename (Bug #1483920)\n- Finalized new message parsing (+ chaching)\n- Fixed wrong usage of mbstring (Bug #1462439)\n- Set default spelling language (Ticket #1483938)\n- Added support for Nox Spell Server\n- Re-built message parsing (Bug #1327068)\n  Now based on the message structure delivered by the IMAP server.\n- Fixed some XSS and SQL injection issues\n- Fixed charset problems with folder renaming\n", "/*\n +-----------------------------------------------------------------------+\n | Roundcube Webmail Client Script                                       |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2012, The Roundcube Dev Team                       |\n | Copyright (C) 2011, Kolab Systems AG                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Authors: Thomas Bruederli <roundcube@gmail.com>                       |\n |          Aleksander 'A.L.E.C' Machniak <alec@alec.pl>                 |\n |          Charles McNulty <charles@charlesmcnulty.com>                 |\n +-----------------------------------------------------------------------+\n | Requires: jquery.js, common.js, list.js                               |\n +-----------------------------------------------------------------------+\n*/\n\nfunction rcube_webmail()\n{\n  this.env = { recipients_separator:',', recipients_delimiter:', ' };\n  this.labels = {};\n  this.buttons = {};\n  this.buttons_sel = {};\n  this.gui_objects = {};\n  this.gui_containers = {};\n  this.commands = {};\n  this.command_handlers = {};\n  this.onloads = [];\n  this.messages = {};\n  this.group2expand = {};\n\n  // create protected reference to myself\n  this.ref = 'rcmail';\n  var ref = this;\n\n  // webmail client settings\n  this.dblclick_time = 500;\n  this.message_time = 4000;\n\n  this.identifier_expr = new RegExp('[^0-9a-z\\-_]', 'gi');\n\n  // default environment vars\n  this.env.keep_alive = 60;        // seconds\n  this.env.request_timeout = 180;  // seconds\n  this.env.draft_autosave = 0;     // seconds\n  this.env.comm_path = './';\n  this.env.blankpage = 'program/resources/blank.gif';\n\n  // set jQuery ajax options\n  $.ajaxSetup({\n    cache: false,\n    timeout: this.env.request_timeout * 1000,\n    error: function(request, status, err){ ref.http_error(request, status, err); },\n    beforeSend: function(xmlhttp){ xmlhttp.setRequestHeader('X-Roundcube-Request', ref.env.request_token); }\n  });\n\n  $(window).bind('beforeunload', function() { rcmail.unload = true; });\n\n  // set environment variable(s)\n  this.set_env = function(p, value)\n  {\n    if (p != null && typeof p === 'object' && !value)\n      for (var n in p)\n        this.env[n] = p[n];\n    else\n      this.env[p] = value;\n  };\n\n  // add a localized label to the client environment\n  this.add_label = function(p, value)\n  {\n    if (typeof p == 'string')\n      this.labels[p] = value;\n    else if (typeof p == 'object')\n      $.extend(this.labels, p);\n  };\n\n  // add a button to the button list\n  this.register_button = function(command, id, type, act, sel, over)\n  {\n    if (!this.buttons[command])\n      this.buttons[command] = [];\n\n    var button_prop = {id:id, type:type};\n    if (act) button_prop.act = act;\n    if (sel) button_prop.sel = sel;\n    if (over) button_prop.over = over;\n\n    this.buttons[command].push(button_prop);\n\n    if (this.loaded)\n      init_button(command, button_prop);\n  };\n\n  // register a specific gui object\n  this.gui_object = function(name, id)\n  {\n    this.gui_objects[name] = this.loaded ? rcube_find_object(id) : id;\n  };\n\n  // register a container object\n  this.gui_container = function(name, id)\n  {\n    this.gui_containers[name] = id;\n  };\n\n  // add a GUI element (html node) to a specified container\n  this.add_element = function(elm, container)\n  {\n    if (this.gui_containers[container] && this.gui_containers[container].jquery)\n      this.gui_containers[container].append(elm);\n  };\n\n  // register an external handler for a certain command\n  this.register_command = function(command, callback, enable)\n  {\n    this.command_handlers[command] = callback;\n\n    if (enable)\n      this.enable_command(command, true);\n  };\n\n  // execute the given script on load\n  this.add_onload = function(f)\n  {\n    this.onloads.push(f);\n  };\n\n  // initialize webmail client\n  this.init = function()\n  {\n    var n, p = this;\n    this.task = this.env.task;\n\n    // check browser\n    if (!bw.dom || !bw.xmlhttp_test() || (bw.mz && bw.vendver < 1.9)) {\n      this.goto_url('error', '_code=0x199');\n      return;\n    }\n\n    // find all registered gui containers\n    for (n in this.gui_containers)\n      this.gui_containers[n] = $('#'+this.gui_containers[n]);\n\n    // find all registered gui objects\n    for (n in this.gui_objects)\n      this.gui_objects[n] = rcube_find_object(this.gui_objects[n]);\n\n    // clickjacking protection\n    if (this.env.x_frame_options) {\n      try {\n        // bust frame if not allowed\n        if (this.env.x_frame_options == 'deny' && top.location.href != self.location.href)\n          top.location.href = self.location.href;\n        else if (top.location.hostname != self.location.hostname)\n          throw 1;\n      } catch (e) {\n        // possible clickjacking attack: disable all form elements\n        $('form').each(function(){ ref.lock_form(this, true); });\n        this.display_message(\"Blocked: possible clickjacking attack!\", 'error');\n        return;\n      }\n    }\n\n    // init registered buttons\n    this.init_buttons();\n\n    // tell parent window that this frame is loaded\n    if (this.is_framed()) {\n      parent.rcmail.set_busy(false, null, parent.rcmail.env.frame_lock);\n      parent.rcmail.env.frame_lock = null;\n    }\n\n    // enable general commands\n    this.enable_command('logout', 'mail', 'addressbook', 'settings', 'save-pref', 'compose', 'undo', 'about', 'switch-task', true);\n\n    if (this.env.permaurl)\n      this.enable_command('permaurl', true);\n\n    switch (this.task) {\n\n      case 'mail':\n        // enable mail commands\n        this.enable_command('list', 'checkmail', 'add-contact', 'search', 'reset-search', 'collapse-folder', true);\n\n        if (this.gui_objects.messagelist) {\n\n          this.message_list = new rcube_list_widget(this.gui_objects.messagelist, {\n            multiselect:true, multiexpand:true, draggable:true, keyboard:true,\n            column_movable:this.env.col_movable, dblclick_time:this.dblclick_time\n            });\n          this.message_list.row_init = function(o){ p.init_message_row(o); };\n          this.message_list.addEventListener('dblclick', function(o){ p.msglist_dbl_click(o); });\n          this.message_list.addEventListener('click', function(o){ p.msglist_click(o); });\n          this.message_list.addEventListener('keypress', function(o){ p.msglist_keypress(o); });\n          this.message_list.addEventListener('select', function(o){ p.msglist_select(o); });\n          this.message_list.addEventListener('dragstart', function(o){ p.drag_start(o); });\n          this.message_list.addEventListener('dragmove', function(e){ p.drag_move(e); });\n          this.message_list.addEventListener('dragend', function(e){ p.drag_end(e); });\n          this.message_list.addEventListener('expandcollapse', function(e){ p.msglist_expand(e); });\n          this.message_list.addEventListener('column_replace', function(e){ p.msglist_set_coltypes(e); });\n\n          document.onmouseup = function(e){ return p.doc_mouse_up(e); };\n          this.gui_objects.messagelist.parentNode.onmousedown = function(e){ return p.click_on_list(e); };\n\n          this.message_list.init();\n          this.enable_command('toggle_status', 'toggle_flag', 'menu-open', 'menu-save', true);\n\n          // load messages\n          this.command('list');\n        }\n\n        if (this.gui_objects.qsearchbox) {\n          if (this.env.search_text != null) {\n            this.gui_objects.qsearchbox.value = this.env.search_text;\n          }\n          $(this.gui_objects.qsearchbox).focusin(function() { rcmail.message_list.blur(); });\n        }\n\n        this.set_button_titles();\n\n        this.env.message_commands = ['show', 'reply', 'reply-all', 'reply-list', 'forward',\n          'moveto', 'copy', 'delete', 'open', 'mark', 'edit', 'viewsource', 'download',\n          'print', 'load-attachment', 'show-headers', 'hide-headers', 'forward-attachment'];\n\n        if (this.env.action == 'show' || this.env.action == 'preview') {\n          this.enable_command(this.env.message_commands, this.env.uid);\n          this.enable_command('reply-list', this.env.list_post);\n\n          if (this.env.action == 'show') {\n            this.http_request('pagenav', {_uid: this.env.uid, _mbox: this.env.mailbox, _search: this.env.search_request},\n              this.display_message('', 'loading'));\n          }\n\n          if (this.env.blockedobjects) {\n            if (this.gui_objects.remoteobjectsmsg)\n              this.gui_objects.remoteobjectsmsg.style.display = 'block';\n            this.enable_command('load-images', 'always-load', true);\n          }\n\n          // make preview/message frame visible\n          if (this.env.action == 'preview' && this.is_framed()) {\n            this.enable_command('compose', 'add-contact', false);\n            parent.rcmail.show_contentframe(true);\n          }\n        }\n        else if (this.env.action == 'compose') {\n          this.env.compose_commands = ['send-attachment', 'remove-attachment', 'send', 'cancel', 'toggle-editor', 'list-adresses'];\n\n          if (this.env.drafts_mailbox)\n            this.env.compose_commands.push('savedraft')\n\n          this.enable_command(this.env.compose_commands, 'identities', true);\n\n          // add more commands (not enabled)\n          $.merge(this.env.compose_commands, ['add-recipient', 'firstpage', 'previouspage', 'nextpage', 'lastpage']);\n\n          if (this.env.spellcheck) {\n            this.env.spellcheck.spelling_state_observer = function(s) { ref.spellcheck_state(); };\n            this.env.compose_commands.push('spellcheck')\n            this.enable_command('spellcheck', true);\n          }\n\n          document.onmouseup = function(e){ return p.doc_mouse_up(e); };\n\n          // init message compose form\n          this.init_messageform();\n        }\n        // show printing dialog\n        else if (this.env.action == 'print' && this.env.uid)\n          if (bw.safari)\n            setTimeout('window.print()', 10);\n          else\n            window.print();\n\n        // get unread count for each mailbox\n        if (this.gui_objects.mailboxlist) {\n          this.env.unread_counts = {};\n          this.gui_objects.folderlist = this.gui_objects.mailboxlist;\n          this.http_request('getunread');\n        }\n\n        // init address book widget\n        if (this.gui_objects.contactslist) {\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            { multiselect:true, draggable:false, keyboard:false });\n          this.contact_list.addEventListener('select', function(o){ ref.compose_recipient_select(o); });\n          this.contact_list.addEventListener('dblclick', function(o){ ref.compose_add_recipient('to'); });\n          this.contact_list.init();\n        }\n\n        if (this.gui_objects.addressbookslist) {\n          this.gui_objects.folderlist = this.gui_objects.addressbookslist;\n          this.enable_command('list-adresses', true);\n        }\n\n        // ask user to send MDN\n        if (this.env.mdn_request && this.env.uid) {\n          var postact = 'sendmdn',\n            postdata = {_uid: this.env.uid, _mbox: this.env.mailbox};\n          if (!confirm(this.get_label('mdnrequest'))) {\n            postdata._flag = 'mdnsent';\n            postact = 'mark';\n          }\n          this.http_post(postact, postdata);\n        }\n\n        // detect browser capabilities\n        if (!this.is_framed())\n          this.browser_capabilities_check();\n\n        break;\n\n      case 'addressbook':\n        if (this.gui_objects.folderlist)\n          this.env.contactfolders = $.extend($.extend({}, this.env.address_sources), this.env.contactgroups);\n\n        this.enable_command('add', 'import', this.env.writable_source);\n        this.enable_command('list', 'listgroup', 'listsearch', 'advanced-search', true);\n\n        if (this.gui_objects.contactslist) {\n\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            {multiselect:true, draggable:this.gui_objects.folderlist?true:false, keyboard:true});\n          this.contact_list.row_init = function(row){ p.triggerEvent('insertrow', { cid:row.uid, row:row }); };\n          this.contact_list.addEventListener('keypress', function(o){ p.contactlist_keypress(o); });\n          this.contact_list.addEventListener('select', function(o){ p.contactlist_select(o); });\n          this.contact_list.addEventListener('dragstart', function(o){ p.drag_start(o); });\n          this.contact_list.addEventListener('dragmove', function(e){ p.drag_move(e); });\n          this.contact_list.addEventListener('dragend', function(e){ p.drag_end(e); });\n          this.contact_list.init();\n\n          if (this.env.cid)\n            this.contact_list.highlight_row(this.env.cid);\n\n          this.gui_objects.contactslist.parentNode.onmousedown = function(e){ return p.click_on_list(e); };\n          document.onmouseup = function(e){ return p.doc_mouse_up(e); };\n          if (this.gui_objects.qsearchbox) {\n            $(this.gui_objects.qsearchbox).focusin(function() { rcmail.contact_list.blur(); });\n          }\n\n          this.update_group_commands();\n          this.command('list');\n        }\n\n        this.set_page_buttons();\n\n        if (this.env.cid) {\n          this.enable_command('show', 'edit', true);\n          // register handlers for group assignment via checkboxes\n          if (this.gui_objects.editform) {\n            $('input.groupmember').change(function() {\n              ref.group_member_change(this.checked ? 'add' : 'del', ref.env.cid, ref.env.source, this.value);\n            });\n          }\n        }\n\n        if (this.gui_objects.editform) {\n          this.enable_command('save', true);\n          if (this.env.action == 'add' || this.env.action == 'edit')\n              this.init_contact_form();\n        }\n\n        if (this.gui_objects.qsearchbox) {\n          this.enable_command('search', 'reset-search', 'moveto', true);\n        }\n\n        break;\n\n      case 'settings':\n        this.enable_command('preferences', 'identities', 'save', 'folders', true);\n\n        if (this.env.action == 'identities') {\n          this.enable_command('add', this.env.identities_level < 2);\n        }\n        else if (this.env.action == 'edit-identity' || this.env.action == 'add-identity') {\n          this.enable_command('save', 'edit', 'toggle-editor', true);\n          this.enable_command('delete', this.env.identities_level < 2);\n\n          if (this.env.action == 'add-identity')\n            $(\"input[type='text']\").first().select();\n        }\n        else if (this.env.action == 'folders') {\n          this.enable_command('subscribe', 'unsubscribe', 'create-folder', 'rename-folder', true);\n        }\n        else if (this.env.action == 'edit-folder' && this.gui_objects.editform) {\n          this.enable_command('save', 'folder-size', true);\n          parent.rcmail.env.messagecount = this.env.messagecount;\n          parent.rcmail.enable_command('purge', this.env.messagecount);\n          $(\"input[type='text']\").first().select();\n        }\n\n        if (this.gui_objects.identitieslist) {\n          this.identity_list = new rcube_list_widget(this.gui_objects.identitieslist, {multiselect:false, draggable:false, keyboard:false});\n          this.identity_list.addEventListener('select', function(o){ p.identity_select(o); });\n          this.identity_list.init();\n          this.identity_list.focus();\n\n          if (this.env.iid)\n            this.identity_list.highlight_row(this.env.iid);\n        }\n        else if (this.gui_objects.sectionslist) {\n          this.sections_list = new rcube_list_widget(this.gui_objects.sectionslist, {multiselect:false, draggable:false, keyboard:false});\n          this.sections_list.addEventListener('select', function(o){ p.section_select(o); });\n          this.sections_list.init();\n          this.sections_list.focus();\n        }\n        else if (this.gui_objects.subscriptionlist)\n          this.init_subscription_list();\n\n        break;\n\n      case 'login':\n        var input_user = $('#rcmloginuser');\n        input_user.bind('keyup', function(e){ return rcmail.login_user_keyup(e); });\n\n        if (input_user.val() == '')\n          input_user.focus();\n        else\n          $('#rcmloginpwd').focus();\n\n        // detect client timezone\n        var dt = new Date(),\n          tz = dt.getTimezoneOffset() / -60,\n          stdtz = dt.getStdTimezoneOffset() / -60;\n\n        $('#rcmlogintz').val(stdtz);\n        $('#rcmlogindst').val(tz > stdtz ? 1 : 0);\n\n        // display 'loading' message on form submit, lock submit button\n        $('form').submit(function () {\n          $('input[type=submit]', this).prop('disabled', true);\n          rcmail.clear_messages();\n          rcmail.display_message('', 'loading');\n        });\n\n        this.enable_command('login', true);\n        break;\n\n      default:\n        break;\n      }\n\n    // prevent from form submit with Enter key in file input fields\n    if (bw.ie)\n      $('input[type=file]').keydown(function(e) { if (e.keyCode == '13') e.preventDefault(); });\n\n    // flag object as complete\n    this.loaded = true;\n\n    // show message\n    if (this.pending_message)\n      this.display_message(this.pending_message[0], this.pending_message[1], this.pending_message[2]);\n\n    // map implicit containers\n    if (this.gui_objects.folderlist)\n      this.gui_containers.foldertray = $(this.gui_objects.folderlist);\n\n    // activate html5 file drop feature (if browser supports it and if configured)\n    if (this.gui_objects.filedrop && this.env.filedrop && ((window.XMLHttpRequest && XMLHttpRequest.prototype && XMLHttpRequest.prototype.sendAsBinary) || window.FormData)) {\n      $(document.body).bind('dragover dragleave drop', function(e){ return ref.document_drag_hover(e, e.type == 'dragover'); });\n      $(this.gui_objects.filedrop).addClass('droptarget')\n        .bind('dragover dragleave', function(e){ return ref.file_drag_hover(e, e.type == 'dragover'); })\n        .get(0).addEventListener('drop', function(e){ return ref.file_dropped(e); }, false);\n    }\n\n    // trigger init event hook\n    this.triggerEvent('init', { task:this.task, action:this.env.action });\n\n    // execute all foreign onload scripts\n    // @deprecated\n    for (var i in this.onloads) {\n      if (typeof this.onloads[i] === 'string')\n        eval(this.onloads[i]);\n      else if (typeof this.onloads[i] === 'function')\n        this.onloads[i]();\n      }\n\n    // start keep-alive interval\n    this.start_keepalive();\n  };\n\n  this.log = function(msg)\n  {\n    if (window.console && console.log)\n      console.log(msg);\n  };\n\n  /*********************************************************/\n  /*********       client command interface        *********/\n  /*********************************************************/\n\n  // execute a specific command on the web client\n  this.command = function(command, props, obj, event)\n  {\n    var ret, uid, cid, url, flag;\n\n    if (obj && obj.blur)\n      obj.blur();\n\n    if (this.busy)\n      return false;\n\n    // command not supported or allowed\n    if (!this.commands[command]) {\n      // pass command to parent window\n      if (this.is_framed())\n        parent.rcmail.command(command, props);\n\n      return false;\n    }\n\n    // check input before leaving compose step\n    if (this.task == 'mail' && this.env.action == 'compose' && $.inArray(command, this.env.compose_commands)<0) {\n      if (this.cmp_hash != this.compose_field_hash() && !confirm(this.get_label('notsentwarning')))\n        return false;\n    }\n\n    // process external commands\n    if (typeof this.command_handlers[command] === 'function') {\n      ret = this.command_handlers[command](props, obj);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n    else if (typeof this.command_handlers[command] === 'string') {\n      ret = window[this.command_handlers[command]](props, obj);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n\n    // trigger plugin hooks\n    this.triggerEvent('actionbefore', {props:props, action:command});\n    ret = this.triggerEvent('before'+command, props);\n    if (ret !== undefined) {\n      // abort if one of the handlers returned false\n      if (ret === false)\n        return false;\n      else\n        props = ret;\n    }\n\n    ret = undefined;\n\n    // process internal command\n    switch (command) {\n\n      case 'login':\n        if (this.gui_objects.loginform)\n          this.gui_objects.loginform.submit();\n        break;\n\n      // commands to switch task\n      case 'mail':\n      case 'addressbook':\n      case 'settings':\n      case 'logout':\n        this.switch_task(command);\n        break;\n\n      case 'about':\n        location.href = '?_task=settings&_action=about';\n        break;\n\n      case 'permaurl':\n        if (obj && obj.href && obj.target)\n          return true;\n        else if (this.env.permaurl)\n          parent.location.href = this.env.permaurl;\n        break;\n\n      case 'menu-open':\n      case 'menu-save':\n        this.triggerEvent(command, {props:props});\n        return false;\n\n      case 'open':\n        if (uid = this.get_single_uid()) {\n          obj.href = '?_task='+this.env.task+'&_action=show&_mbox='+urlencode(this.env.mailbox)+'&_uid='+uid;\n          return true;\n        }\n        break;\n\n      case 'list':\n        if (props && props != '')\n          this.reset_qsearch();\n        if (this.task == 'mail') {\n          this.list_mailbox(props);\n          this.set_button_titles();\n        }\n        else if (this.task == 'addressbook')\n          this.list_contacts(props);\n        break;\n\n      case 'sort':\n        var sort_order, sort_col = props;\n\n        if (this.env.sort_col==sort_col)\n          sort_order = this.env.sort_order=='ASC' ? 'DESC' : 'ASC';\n        else\n          sort_order = 'ASC';\n\n        // set table header and update env\n        this.set_list_sorting(sort_col, sort_order);\n\n        // reload message list\n        this.list_mailbox('', '', sort_col+'_'+sort_order);\n        break;\n\n      case 'nextpage':\n        this.list_page('next');\n        break;\n\n      case 'lastpage':\n        this.list_page('last');\n        break;\n\n      case 'previouspage':\n        this.list_page('prev');\n        break;\n\n      case 'firstpage':\n        this.list_page('first');\n        break;\n\n      case 'expunge':\n        if (this.env.messagecount)\n          this.expunge_mailbox(this.env.mailbox);\n        break;\n\n      case 'purge':\n      case 'empty-mailbox':\n        if (this.env.messagecount)\n          this.purge_mailbox(this.env.mailbox);\n        break;\n\n      // common commands used in multiple tasks\n      case 'show':\n        if (this.task == 'mail') {\n          uid = this.get_single_uid();\n          if (uid && (!this.env.uid || uid != this.env.uid)) {\n            if (this.env.mailbox == this.env.drafts_mailbox)\n              this.goto_url('compose', { _draft_uid: uid, _mbox: this.env.mailbox }, true);\n            else\n              this.show_message(uid);\n          }\n        }\n        else if (this.task == 'addressbook') {\n          cid = props ? props : this.get_single_cid();\n          if (cid && !(this.env.action == 'show' && cid == this.env.cid))\n            this.load_contact(cid, 'show');\n        }\n        break;\n\n      case 'add':\n        if (this.task == 'addressbook')\n          this.load_contact(0, 'add');\n        else if (this.task == 'settings') {\n          this.identity_list.clear_selection();\n          this.load_identity(0, 'add-identity');\n        }\n        break;\n\n      case 'edit':\n        if (this.task == 'addressbook' && (cid = this.get_single_cid()))\n          this.load_contact(cid, 'edit');\n        else if (this.task == 'settings' && props)\n          this.load_identity(props, 'edit-identity');\n        else if (this.task == 'mail' && (cid = this.get_single_uid())) {\n          url = { _mbox: this.env.mailbox };\n          url[this.env.mailbox == this.env.drafts_mailbox ? '_draft_uid' : '_uid'] = cid;\n          this.goto_url('compose', url, true);\n        }\n        break;\n\n      case 'save':\n        var input, form = this.gui_objects.editform;\n        if (form) {\n          // adv. search\n          if (this.env.action == 'search') {\n          }\n          // user prefs\n          else if ((input = $(\"input[name='_pagesize']\", form)) && input.length && isNaN(parseInt(input.val()))) {\n            alert(this.get_label('nopagesizewarning'));\n            input.focus();\n            break;\n          }\n          // contacts/identities\n          else {\n            // reload form\n            if (props == 'reload') {\n              form.action += '?_reload=1';\n            }\n            else if (this.task == 'settings' && (this.env.identities_level % 2) == 0  &&\n              (input = $(\"input[name='_email']\", form)) && input.length && !rcube_check_email(input.val())\n            ) {\n              alert(this.get_label('noemailwarning'));\n              input.focus();\n              break;\n            }\n\n            // clear empty input fields\n            $('input.placeholder').each(function(){ if (this.value == this._placeholder) this.value = ''; });\n          }\n\n          // add selected source (on the list)\n          if (parent.rcmail && parent.rcmail.env.source)\n            form.action = this.add_url(form.action, '_orig_source', parent.rcmail.env.source);\n\n          form.submit();\n        }\n        break;\n\n      case 'delete':\n        // mail task\n        if (this.task == 'mail')\n          this.delete_messages(event);\n        // addressbook task\n        else if (this.task == 'addressbook')\n          this.delete_contacts();\n        // user settings task\n        else if (this.task == 'settings')\n          this.delete_identity();\n        break;\n\n      // mail task commands\n      case 'move':\n      case 'moveto':\n        if (this.task == 'mail')\n          this.move_messages(props);\n        else if (this.task == 'addressbook' && this.drag_active)\n          this.copy_contact(null, props);\n        break;\n\n      case 'copy':\n        if (this.task == 'mail')\n          this.copy_messages(props);\n        break;\n\n      case 'mark':\n        if (props)\n          this.mark_message(props);\n        break;\n\n      case 'toggle_status':\n        if (props && !props._row)\n          break;\n\n        flag = 'read';\n\n        if (props._row.uid) {\n          uid = props._row.uid;\n\n          // toggle read/unread\n          if (this.message_list.rows[uid].deleted) {\n            flag = 'undelete';\n          }\n          else if (!this.message_list.rows[uid].unread)\n            flag = 'unread';\n        }\n\n        this.mark_message(flag, uid);\n        break;\n\n      case 'toggle_flag':\n        if (props && !props._row)\n          break;\n\n        flag = 'flagged';\n\n        if (props._row.uid) {\n          uid = props._row.uid;\n          // toggle flagged/unflagged\n          if (this.message_list.rows[uid].flagged)\n            flag = 'unflagged';\n          }\n        this.mark_message(flag, uid);\n        break;\n\n      case 'always-load':\n        if (this.env.uid && this.env.sender) {\n          this.add_contact(this.env.sender);\n          setTimeout(function(){ ref.command('load-images'); }, 300);\n          break;\n        }\n\n      case 'load-images':\n        if (this.env.uid)\n          this.show_message(this.env.uid, true, this.env.action=='preview');\n        break;\n\n      case 'load-attachment':\n        var qstring = '_mbox='+urlencode(this.env.mailbox)+'&_uid='+this.env.uid+'&_part='+props.part;\n\n        // open attachment in frame if it's of a supported mimetype\n        if (this.env.uid && props.mimetype && this.env.mimetypes && $.inArray(props.mimetype, this.env.mimetypes)>=0) {\n          if (props.mimetype == 'text/html')\n            qstring += '&_safe=1';\n          this.attachment_win = window.open(this.env.comm_path+'&_action=get&'+qstring+'&_frame=1', 'rcubemailattachment');\n          if (this.attachment_win) {\n            setTimeout(function(){ ref.attachment_win.focus(); }, 10);\n            break;\n          }\n        }\n\n        this.goto_url('get', qstring+'&_download=1', false);\n        break;\n\n      case 'select-all':\n        this.select_all_mode = props ? false : true;\n        this.dummy_select = true; // prevent msg opening if there's only one msg on the list\n        if (props == 'invert')\n          this.message_list.invert_selection();\n        else\n          this.message_list.select_all(props == 'page' ? '' : props);\n        this.dummy_select = null;\n        break;\n\n      case 'select-none':\n        this.select_all_mode = false;\n        this.message_list.clear_selection();\n        break;\n\n      case 'expand-all':\n        this.env.autoexpand_threads = 1;\n        this.message_list.expand_all();\n        break;\n\n      case 'expand-unread':\n        this.env.autoexpand_threads = 2;\n        this.message_list.collapse_all();\n        this.expand_unread();\n        break;\n\n      case 'collapse-all':\n        this.env.autoexpand_threads = 0;\n        this.message_list.collapse_all();\n        break;\n\n      case 'nextmessage':\n        if (this.env.next_uid)\n          this.show_message(this.env.next_uid, false, this.env.action=='preview');\n        break;\n\n      case 'lastmessage':\n        if (this.env.last_uid)\n          this.show_message(this.env.last_uid);\n        break;\n\n      case 'previousmessage':\n        if (this.env.prev_uid)\n          this.show_message(this.env.prev_uid, false, this.env.action=='preview');\n        break;\n\n      case 'firstmessage':\n        if (this.env.first_uid)\n          this.show_message(this.env.first_uid);\n        break;\n\n      case 'checkmail':\n        this.check_for_recent(true);\n        break;\n\n      case 'compose':\n        url = this.url('mail/compose');\n\n        if (this.task == 'mail') {\n          url += '&_mbox='+urlencode(this.env.mailbox);\n          if (props)\n             url += '&_to='+urlencode(props);\n          // also send search request so we can go back to search result after message is sent\n          if (this.env.search_request)\n            url += '&_search='+this.env.search_request;\n        }\n        // modify url if we're in addressbook\n        else if (this.task == 'addressbook') {\n          // switch to mail compose step directly\n          if (props && props.indexOf('@') > 0) {\n            url = this.get_task_url('mail', url);\n            this.redirect(url + '&_to='+urlencode(props));\n            break;\n          }\n\n          // use contact_id passed as command parameter\n          var n, len, a_cids = [];\n          if (props)\n            a_cids.push(props);\n          // get selected contacts\n          else if (this.contact_list) {\n            var selection = this.contact_list.get_selection();\n            for (n=0, len=selection.length; n<len; n++)\n              a_cids.push(selection[n]);\n          }\n\n          if (a_cids.length)\n            this.http_post('mailto', { _cid: a_cids.join(','), _source: this.env.source}, true);\n          else if (this.env.group)\n            this.http_post('mailto', { _gid: this.env.group, _source: this.env.source}, true);\n\n          break;\n        }\n        else if (props)\n          url += '&_to='+urlencode(props);\n\n        this.redirect(url);\n        break;\n\n      case 'spellcheck':\n        if (this.spellcheck_state()) {\n          this.stop_spellchecking();\n        }\n        else {\n          if (window.tinyMCE && tinyMCE.get(this.env.composebody)) {\n            tinyMCE.execCommand('mceSpellCheck', true);\n          }\n          else if (this.env.spellcheck && this.env.spellcheck.spellCheck) {\n            this.env.spellcheck.spellCheck();\n          }\n        }\n        this.spellcheck_state();\n        break;\n\n      case 'savedraft':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        // compose form did not change\n        if (this.cmp_hash == this.compose_field_hash()) {\n          this.auto_save_start();\n          break;\n        }\n\n        // re-set keep-alive timeout\n        this.start_keepalive();\n\n        this.submit_messageform(true);\n        break;\n\n      case 'send':\n        if (!props.nocheck && !this.check_compose_input(command))\n          break;\n\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        this.submit_messageform();\n        break;\n\n      case 'send-attachment':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        this.upload_file(props || this.gui_objects.uploadform);\n        break;\n\n      case 'insert-sig':\n        this.change_identity($(\"[name='_from']\")[0], true);\n        break;\n\n      case 'list-adresses':\n        this.list_contacts(props);\n        this.enable_command('add-recipient', false);\n        break;\n\n      case 'add-recipient':\n        this.compose_add_recipient(props);\n        break;\n\n      case 'reply-all':\n      case 'reply-list':\n      case 'reply':\n        if (uid = this.get_single_uid()) {\n          url = {_reply_uid: uid, _mbox: this.env.mailbox};\n          if (command == 'reply-all')\n            // do reply-list, when list is detected and popup menu wasn't used \n            url._all = (!props && this.commands['reply-list'] ? 'list' : 'all');\n          else if (command == 'reply-list')\n            url._all = list;\n\n          this.goto_url('compose', url, true);\n        }\n        break;\n\n      case 'forward-attachment':\n      case 'forward':\n        if (uid = this.get_single_uid()) {\n          url = { _forward_uid: uid, _mbox: this.env.mailbox };\n          if (command == 'forward-attachment' || (!props && this.env.forward_attachment))\n            url._attachment = 1;\n          this.goto_url('compose', url, true);\n        }\n        break;\n\n      case 'print':\n        if (uid = this.get_single_uid()) {\n          ref.printwin = window.open(this.env.comm_path+'&_action=print&_uid='+uid+'&_mbox='+urlencode(this.env.mailbox)+(this.env.safemode ? '&_safe=1' : ''));\n          if (this.printwin) {\n            setTimeout(function(){ ref.printwin.focus(); }, 20);\n            if (this.env.action != 'show')\n              this.mark_message('read', uid);\n          }\n        }\n        break;\n\n      case 'viewsource':\n        if (uid = this.get_single_uid()) {\n          ref.sourcewin = window.open(this.env.comm_path+'&_action=viewsource&_uid='+uid+'&_mbox='+urlencode(this.env.mailbox));\n          if (this.sourcewin)\n            setTimeout(function(){ ref.sourcewin.focus(); }, 20);\n          }\n        break;\n\n      case 'download':\n        if (uid = this.get_single_uid())\n          this.goto_url('viewsource', { _uid: uid, _mbox: this.env.mailbox, _save: 1 });\n        break;\n\n      // quicksearch\n      case 'search':\n        if (!props && this.gui_objects.qsearchbox)\n          props = this.gui_objects.qsearchbox.value;\n        if (props) {\n          this.qsearch(props);\n          break;\n        }\n\n      // reset quicksearch\n      case 'reset-search':\n        var n, s = this.env.search_request || this.env.qsearch;\n\n        this.reset_qsearch();\n        this.select_all_mode = false;\n\n        if (s && this.env.mailbox)\n          this.list_mailbox(this.env.mailbox, 1);\n        else if (s && this.task == 'addressbook') {\n          if (this.env.source == '') {\n            for (n in this.env.address_sources) break;\n            this.env.source = n;\n            this.env.group = '';\n          }\n          this.list_contacts(this.env.source, this.env.group, 1);\n        }\n        break;\n\n      case 'listgroup':\n        this.reset_qsearch();\n        this.list_contacts(props.source, props.id);\n        break;\n\n      case 'import':\n        if (this.env.action == 'import' && this.gui_objects.importform) {\n          var file = document.getElementById('rcmimportfile');\n          if (file && !file.value) {\n            alert(this.get_label('selectimportfile'));\n            break;\n          }\n          this.gui_objects.importform.submit();\n          this.set_busy(true, 'importwait');\n          this.lock_form(this.gui_objects.importform, true);\n        }\n        else\n          this.goto_url('import', (this.env.source ? '_target='+urlencode(this.env.source)+'&' : ''));\n        break;\n\n      case 'export':\n        if (this.contact_list.rowcount > 0) {\n          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request });\n        }\n        break;\n\n      case 'upload-photo':\n        this.upload_contact_photo(props || this.gui_objects.uploadform);\n        break;\n\n      case 'delete-photo':\n        this.replace_contact_photo('-del-');\n        break;\n\n      // user settings commands\n      case 'preferences':\n      case 'identities':\n      case 'folders':\n        this.goto_url('settings/' + command);\n        break;\n\n      case 'undo':\n        this.http_request('undo', '', this.display_message('', 'loading'));\n        break;\n\n      // unified command call (command name == function name)\n      default:\n        var func = command.replace(/-/g, '_');\n        if (this[func] && typeof this[func] === 'function') {\n          ret = this[func](props, obj);\n        }\n        break;\n    }\n\n    if (this.triggerEvent('after'+command, props) === false)\n      ret = false;\n    this.triggerEvent('actionafter', {props:props, action:command});\n\n    return ret === false ? false : obj ? false : true;\n  };\n\n  // set command(s) enabled or disabled\n  this.enable_command = function()\n  {\n    var i, n, args = Array.prototype.slice.call(arguments),\n      enable = args.pop(), cmd;\n\n    for (n=0; n<args.length; n++) {\n      cmd = args[n];\n      // argument of type array\n      if (typeof cmd === 'string') {\n        this.commands[cmd] = enable;\n        this.set_button(cmd, (enable ? 'act' : 'pas'));\n      }\n      // push array elements into commands array\n      else {\n        for (i in cmd)\n          args.push(cmd[i]);\n      }\n    }\n  };\n\n  // lock/unlock interface\n  this.set_busy = function(a, message, id)\n  {\n    if (a && message) {\n      var msg = this.get_label(message);\n      if (msg == message)\n        msg = 'Loading...';\n\n      id = this.display_message(msg, 'loading');\n    }\n    else if (!a && id) {\n      this.hide_message(id);\n    }\n\n    this.busy = a;\n    //document.body.style.cursor = a ? 'wait' : 'default';\n\n    if (this.gui_objects.editform)\n      this.lock_form(this.gui_objects.editform, a);\n\n    return id;\n  };\n\n  // return a localized string\n  this.get_label = function(name, domain)\n  {\n    if (domain && this.labels[domain+'.'+name])\n      return this.labels[domain+'.'+name];\n    else if (this.labels[name])\n      return this.labels[name];\n    else\n      return name;\n  };\n\n  // alias for convenience reasons\n  this.gettext = this.get_label;\n\n  // switch to another application task\n  this.switch_task = function(task)\n  {\n    if (this.task===task && task!='mail')\n      return;\n\n    var url = this.get_task_url(task);\n    if (task=='mail')\n      url += '&_mbox=INBOX';\n\n    this.redirect(url);\n  };\n\n  this.get_task_url = function(task, url)\n  {\n    if (!url)\n      url = this.env.comm_path;\n\n    return url.replace(/_task=[a-z]+/, '_task='+task);\n  };\n\n  this.reload = function(delay)\n  {\n    if (this.is_framed())\n      parent.rcmail.reload(delay);\n    else if (delay)\n      setTimeout(function(){ rcmail.reload(); }, delay);\n    else if (window.location)\n      location.href = this.env.comm_path + (this.env.action ? '&_action='+this.env.action : '');\n  };\n\n  // Add variable to GET string, replace old value if exists\n  this.add_url = function(url, name, value)\n  {\n    value = urlencode(value);\n\n    if (/(\\?.*)$/.test(url)) {\n      var urldata = RegExp.$1,\n        datax = RegExp('((\\\\?|&)'+RegExp.escape(name)+'=[^&]*)');\n\n      if (datax.test(urldata)) {\n        urldata = urldata.replace(datax, RegExp.$2 + name + '=' + value);\n      }\n      else\n        urldata += '&' + name + '=' + value\n\n      return url.replace(/(\\?.*)$/, urldata);\n    }\n\n    return url + '?' + name + '=' + value;\n  };\n\n  this.is_framed = function()\n  {\n    return (this.env.framed && parent.rcmail && parent.rcmail != this && parent.rcmail.command);\n  };\n\n  this.save_pref = function(prop)\n  {\n    var request = {'_name': prop.name, '_value': prop.value};\n\n    if (prop.session)\n      request['_session'] = prop.session;\n    if (prop.env)\n      this.env[prop.env] = prop.value;\n\n    this.http_post('save-pref', request);\n  };\n\n  this.html_identifier = function(str, encode)\n  {\n    str = String(str);\n    if (encode)\n      return Base64.encode(str).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n    else\n      return str.replace(this.identifier_expr, '_');\n  };\n\n  this.html_identifier_decode = function(str)\n  {\n    str = String(str).replace(/-/g, '+').replace(/_/g, '/');\n\n    while (str.length % 4) str += '=';\n\n    return Base64.decode(str);\n  };\n\n\n  /*********************************************************/\n  /*********        event handling methods         *********/\n  /*********************************************************/\n\n  this.drag_menu = function(e, target)\n  {\n    var modkey = rcube_event.get_modifier(e),\n      menu = this.gui_objects.message_dragmenu;\n\n    if (menu && modkey == SHIFT_KEY && this.commands['copy']) {\n      var pos = rcube_event.get_mouse_pos(e);\n      this.env.drag_target = target;\n      $(menu).css({top: (pos.y-10)+'px', left: (pos.x-10)+'px'}).show();\n      return true;\n    }\n\n    return false;\n  };\n\n  this.drag_menu_action = function(action)\n  {\n    var menu = this.gui_objects.message_dragmenu;\n    if (menu) {\n      $(menu).hide();\n    }\n    this.command(action, this.env.drag_target);\n    this.env.drag_target = null;\n  };\n\n  this.drag_start = function(list)\n  {\n    var model = this.task == 'mail' ? this.env.mailboxes : this.env.contactfolders;\n\n    this.drag_active = true;\n\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    // save folderlist and folders location/sizes for droptarget calculation in drag_move()\n    if (this.gui_objects.folderlist && model) {\n      this.initialBodyScrollTop = bw.ie ? 0 : window.pageYOffset;\n      this.initialListScrollTop = this.gui_objects.folderlist.parentNode.scrollTop;\n\n      var k, li, height,\n        list = $(this.gui_objects.folderlist);\n        pos = list.offset();\n\n      this.env.folderlist_coords = { x1:pos.left, y1:pos.top, x2:pos.left + list.width(), y2:pos.top + list.height() };\n\n      this.env.folder_coords = [];\n      for (k in model) {\n        if (li = this.get_folder_li(k)) {\n          // only visible folders\n          if (height = li.firstChild.offsetHeight) {\n            pos = $(li.firstChild).offset();\n            this.env.folder_coords[k] = { x1:pos.left, y1:pos.top,\n              x2:pos.left + li.firstChild.offsetWidth, y2:pos.top + height, on:0 };\n          }\n        }\n      }\n    }\n  };\n\n  this.drag_end = function(e)\n  {\n    this.drag_active = false;\n    this.env.last_folder_target = null;\n\n    if (this.folder_auto_timer) {\n      clearTimeout(this.folder_auto_timer);\n      this.folder_auto_timer = null;\n      this.folder_auto_expand = null;\n    }\n\n    // over the folders\n    if (this.gui_objects.folderlist && this.env.folder_coords) {\n      for (var k in this.env.folder_coords) {\n        if (this.env.folder_coords[k].on)\n          $(this.get_folder_li(k)).removeClass('droptarget');\n      }\n    }\n  };\n\n  this.drag_move = function(e)\n  {\n    if (this.gui_objects.folderlist && this.env.folder_coords) {\n      var k, li, div, check, oldclass,\n        layerclass = 'draglayernormal',\n        mouse = rcube_event.get_mouse_pos(e),\n        pos = this.env.folderlist_coords,\n        // offsets to compensate for scrolling while dragging a message\n        boffset = bw.ie ? -document.documentElement.scrollTop : this.initialBodyScrollTop,\n        moffset = this.initialListScrollTop-this.gui_objects.folderlist.parentNode.scrollTop;\n\n      if (this.contact_list && this.contact_list.draglayer)\n        oldclass = this.contact_list.draglayer.attr('class');\n\n      mouse.y += -moffset-boffset;\n\n      // if mouse pointer is outside of folderlist\n      if (mouse.x < pos.x1 || mouse.x >= pos.x2 || mouse.y < pos.y1 || mouse.y >= pos.y2) {\n        if (this.env.last_folder_target) {\n          $(this.get_folder_li(this.env.last_folder_target)).removeClass('droptarget');\n          this.env.folder_coords[this.env.last_folder_target].on = 0;\n          this.env.last_folder_target = null;\n        }\n        if (layerclass != oldclass && this.contact_list && this.contact_list.draglayer)\n          this.contact_list.draglayer.attr('class', layerclass);\n        return;\n      }\n\n      // over the folders\n      for (k in this.env.folder_coords) {\n        pos = this.env.folder_coords[k];\n        if (mouse.x >= pos.x1 && mouse.x < pos.x2 && mouse.y >= pos.y1 && mouse.y < pos.y2){\n          if ((check = this.check_droptarget(k))) {\n            li = this.get_folder_li(k);\n            div = $(li.getElementsByTagName('div')[0]);\n\n            // if the folder is collapsed, expand it after 1sec and restart the drag & drop process.\n            if (div.hasClass('collapsed')) {\n              if (this.folder_auto_timer)\n                clearTimeout(this.folder_auto_timer);\n\n              this.folder_auto_expand = this.env.mailboxes[k].id;\n              this.folder_auto_timer = setTimeout(function() {\n                rcmail.command('collapse-folder', rcmail.folder_auto_expand);\n                rcmail.drag_start(null);\n              }, 1000);\n            } else if (this.folder_auto_timer) {\n              clearTimeout(this.folder_auto_timer);\n              this.folder_auto_timer = null;\n              this.folder_auto_expand = null;\n            }\n\n            $(li).addClass('droptarget');\n            this.env.folder_coords[k].on = 1;\n            this.env.last_folder_target = k;\n            layerclass = 'draglayer' + (check > 1 ? 'copy' : 'normal');\n          } else { // Clear target, otherwise drag end will trigger move into last valid droptarget\n            this.env.last_folder_target = null;\n          }\n        }\n        else if (pos.on) {\n          $(this.get_folder_li(k)).removeClass('droptarget');\n          this.env.folder_coords[k].on = 0;\n        }\n      }\n\n      if (layerclass != oldclass && this.contact_list && this.contact_list.draglayer)\n        this.contact_list.draglayer.attr('class', layerclass);\n    }\n  };\n\n  this.collapse_folder = function(name)\n  {\n    var li = this.get_folder_li(name, '', true),\n      div = $('div:first', li),\n      ul = $('ul:first', li);\n\n    if (div.hasClass('collapsed')) {\n      ul.show();\n      div.removeClass('collapsed').addClass('expanded');\n      var reg = new RegExp('&'+urlencode(name)+'&');\n      this.env.collapsed_folders = this.env.collapsed_folders.replace(reg, '');\n    }\n    else if (div.hasClass('expanded')) {\n      ul.hide();\n      div.removeClass('expanded').addClass('collapsed');\n      this.env.collapsed_folders = this.env.collapsed_folders+'&'+urlencode(name)+'&';\n\n      // select the folder if one of its childs is currently selected\n      // don't select if it's virtual (#1488346)\n      if (this.env.mailbox.indexOf(name + this.env.delimiter) == 0 && !$(li).hasClass('virtual'))\n        this.command('list', name);\n    }\n    else\n      return;\n\n    // Work around a bug in IE6 and IE7, see #1485309\n    if (bw.ie6 || bw.ie7) {\n      var siblings = li.nextSibling ? li.nextSibling.getElementsByTagName('ul') : null;\n      if (siblings && siblings.length && (li = siblings[0]) && li.style && li.style.display != 'none') {\n        li.style.display = 'none';\n        li.style.display = '';\n      }\n    }\n\n    this.command('save-pref', { name: 'collapsed_folders', value: this.env.collapsed_folders });\n    this.set_unread_count_display(name, false);\n  };\n\n  this.doc_mouse_up = function(e)\n  {\n    var model, list, li, id;\n\n    // ignore event if jquery UI dialog is open\n    if ($(rcube_event.get_target(e)).closest('.ui-dialog, .ui-widget-overlay').length)\n      return;\n\n    if (list = this.message_list) {\n      if (!rcube_mouse_is_over(e, list.list.parentNode))\n        list.blur();\n      else\n        list.focus();\n      model = this.env.mailboxes;\n    }\n    else if (list = this.contact_list) {\n      if (!rcube_mouse_is_over(e, list.list.parentNode))\n        list.blur();\n      else\n        list.focus();\n      model = this.env.contactfolders;\n    }\n    else if (this.ksearch_value) {\n      this.ksearch_blur();\n    }\n\n    // handle mouse release when dragging\n    if (this.drag_active && model && this.env.last_folder_target) {\n      var target = model[this.env.last_folder_target];\n\n      $(this.get_folder_li(this.env.last_folder_target)).removeClass('droptarget');\n      this.env.last_folder_target = null;\n      list.draglayer.hide();\n\n      if (!this.drag_menu(e, target))\n        this.command('moveto', target);\n    }\n\n    // reset 'pressed' buttons\n    if (this.buttons_sel) {\n      for (id in this.buttons_sel)\n        if (typeof id !== 'function')\n          this.button_out(this.buttons_sel[id], id);\n      this.buttons_sel = {};\n    }\n  };\n\n  this.click_on_list = function(e)\n  {\n    if (this.gui_objects.qsearchbox)\n      this.gui_objects.qsearchbox.blur();\n\n    if (this.message_list)\n      this.message_list.focus();\n    else if (this.contact_list)\n      this.contact_list.focus();\n\n    return true;\n  };\n\n  this.msglist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var selected = list.get_single_selection() != null;\n\n    this.enable_command(this.env.message_commands, selected);\n    if (selected) {\n      // Hide certain command buttons when Drafts folder is selected\n      if (this.env.mailbox == this.env.drafts_mailbox)\n        this.enable_command('reply', 'reply-all', 'reply-list', 'forward', 'forward-attachment', false);\n      // Disable reply-list when List-Post header is not set\n      else {\n        var msg = this.env.messages[list.get_single_selection()];\n        if (!msg.ml)\n          this.enable_command('reply-list', false);\n      }\n    }\n    // Multi-message commands\n    this.enable_command('delete', 'moveto', 'copy', 'mark', (list.selection.length > 0 ? true : false));\n\n    // reset all-pages-selection\n    if (selected || (list.selection.length && list.selection.length != list.rowcount))\n      this.select_all_mode = false;\n\n    // start timer for message preview (wait for double click)\n    if (selected && this.env.contentframe && !list.multi_selecting && !this.dummy_select)\n      this.preview_timer = setTimeout(function(){ ref.msglist_get_preview(); }, 200);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  // This allow as to re-select selected message and display it in preview frame\n  this.msglist_click = function(list)\n  {\n    if (list.multi_selecting || !this.env.contentframe)\n      return;\n\n    if (list.get_single_selection() && window.frames && window.frames[this.env.contentframe]) {\n      if (window.frames[this.env.contentframe].location.href.indexOf(this.env.blankpage)>=0) {\n        if (this.preview_timer)\n          clearTimeout(this.preview_timer);\n        if (this.preview_read_timer)\n          clearTimeout(this.preview_read_timer);\n        this.preview_timer = setTimeout(function(){ ref.msglist_get_preview(); }, 200);\n      }\n    }\n  };\n\n  this.msglist_dbl_click = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var uid = list.get_single_selection();\n    if (uid && this.env.mailbox == this.env.drafts_mailbox)\n      this.goto_url('compose', { _draft_uid: uid, _mbox: this.env.mailbox }, true);\n    else if (uid)\n      this.show_message(uid, false, false);\n  };\n\n  this.msglist_keypress = function(list)\n  {\n    if (list.modkey == CONTROL_KEY)\n      return;\n\n    if (list.key_pressed == list.ENTER_KEY)\n      this.command('show');\n    else if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY)\n      this.command('delete');\n    else if (list.key_pressed == 33)\n      this.command('previouspage');\n    else if (list.key_pressed == 34)\n      this.command('nextpage');\n  };\n\n  this.msglist_get_preview = function()\n  {\n    var uid = this.get_single_uid();\n    if (uid && this.env.contentframe && !this.drag_active)\n      this.show_message(uid, false, true);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  this.msglist_expand = function(row)\n  {\n    if (this.env.messages[row.uid])\n      this.env.messages[row.uid].expanded = row.expanded;\n    $(row.obj)[row.expanded?'addClass':'removeClass']('expanded');\n  };\n\n  this.msglist_set_coltypes = function(list)\n  {\n    var i, found, name, cols = list.list.tHead.rows[0].cells;\n\n    this.env.coltypes = [];\n\n    for (i=0; i<cols.length; i++)\n      if (cols[i].id && cols[i].id.match(/^rcm/)) {\n        name = cols[i].id.replace(/^rcm/, '');\n        this.env.coltypes.push(name);\n      }\n\n    if ((found = $.inArray('flag', this.env.coltypes)) >= 0)\n      this.env.flagged_col = found;\n\n    if ((found = $.inArray('subject', this.env.coltypes)) >= 0)\n      this.env.subject_col = found;\n\n    this.command('save-pref', { name: 'list_cols', value: this.env.coltypes, session: 'list_attrib/columns' });\n  };\n\n  this.check_droptarget = function(id)\n  {\n    var allow = false, copy = false;\n\n    if (this.task == 'mail')\n      allow = (this.env.mailboxes[id] && this.env.mailboxes[id].id != this.env.mailbox && !this.env.mailboxes[id].virtual);\n    else if (this.task == 'settings')\n      allow = (id != this.env.mailbox);\n    else if (this.task == 'addressbook') {\n      if (id != this.env.source && this.env.contactfolders[id]) {\n        if (this.env.contactfolders[id].type == 'group') {\n          var target_abook = this.env.contactfolders[id].source;\n          allow = this.env.contactfolders[id].id != this.env.group && !this.env.contactfolders[target_abook].readonly;\n          copy = target_abook != this.env.source;\n        }\n        else {\n          allow = !this.env.contactfolders[id].readonly;\n          copy = true;\n        }\n      }\n    }\n\n    return allow ? (copy ? 2 : 1) : 0;\n  };\n\n\n  /*********************************************************/\n  /*********     (message) list functionality      *********/\n  /*********************************************************/\n\n  this.init_message_row = function(row)\n  {\n    var expando, self = this, uid = row.uid,\n      status_icon = (this.env.status_col != null ? 'status' : 'msg') + 'icn' + row.uid;\n\n    if (uid && this.env.messages[uid])\n      $.extend(row, this.env.messages[uid]);\n\n    // set eventhandler to status icon\n    if (row.icon = document.getElementById(status_icon)) {\n      row.icon._row = row.obj;\n      row.icon.onmousedown = function(e) { self.command('toggle_status', this); rcube_event.cancel(e); };\n    }\n\n    // save message icon position too\n    if (this.env.status_col != null)\n      row.msgicon = document.getElementById('msgicn'+row.uid);\n    else\n      row.msgicon = row.icon;\n\n    // set eventhandler to flag icon, if icon found\n    if (this.env.flagged_col != null && (row.flagicon = document.getElementById('flagicn'+row.uid))) {\n      row.flagicon._row = row.obj;\n      row.flagicon.onmousedown = function(e) { self.command('toggle_flag', this); rcube_event.cancel(e); };\n    }\n\n    if (!row.depth && row.has_children && (expando = document.getElementById('rcmexpando'+row.uid))) {\n      row.expando = expando;\n      expando.onmousedown = function(e) { return self.expand_message_row(e, uid); };\n    }\n\n    this.triggerEvent('insertrow', { uid:uid, row:row });\n  };\n\n  // create a table row in the message list\n  this.add_message_row = function(uid, cols, flags, attop)\n  {\n    if (!this.gui_objects.messagelist || !this.message_list)\n      return false;\n\n    // Prevent from adding messages from different folder (#1487752)\n    if (flags.mbox != this.env.mailbox && !flags.skip_mbox_check)\n      return false;\n\n    if (!this.env.messages[uid])\n      this.env.messages[uid] = {};\n\n    // merge flags over local message object\n    $.extend(this.env.messages[uid], {\n      deleted: flags.deleted?1:0,\n      replied: flags.answered?1:0,\n      unread: !flags.seen?1:0,\n      forwarded: flags.forwarded?1:0,\n      flagged: flags.flagged?1:0,\n      has_children: flags.has_children?1:0,\n      depth: flags.depth?flags.depth:0,\n      unread_children: flags.unread_children?flags.unread_children:0,\n      parent_uid: flags.parent_uid?flags.parent_uid:0,\n      selected: this.select_all_mode || this.message_list.in_selection(uid),\n      ml: flags.ml?1:0,\n      ctype: flags.ctype,\n      // flags from plugins\n      flags: flags.extra_flags\n    });\n\n    var c, n, col, html, css_class,\n      tree = '', expando = '',\n      list = this.message_list,\n      rows = list.rows,\n      message = this.env.messages[uid],\n      row_class = 'message'\n        + (!flags.seen ? ' unread' : '')\n        + (flags.deleted ? ' deleted' : '')\n        + (flags.flagged ? ' flagged' : '')\n        + (flags.unread_children && flags.seen && !this.env.autoexpand_threads ? ' unroot' : '')\n        + (message.selected ? ' selected' : ''),\n      // for performance use DOM instead of jQuery here\n      row = document.createElement('tr');\n\n    row.id = 'rcmrow'+uid;\n\n    // message status icons\n    css_class = 'msgicon';\n    if (this.env.status_col === null) {\n      css_class += ' status';\n      if (flags.deleted)\n        css_class += ' deleted';\n      else if (!flags.seen)\n        css_class += ' unread';\n      else if (flags.unread_children > 0)\n        css_class += ' unreadchildren';\n    }\n    if (flags.answered)\n      css_class += ' replied';\n    if (flags.forwarded)\n      css_class += ' forwarded';\n\n    // update selection\n    if (message.selected && !list.in_selection(uid))\n      list.selection.push(uid);\n\n    // threads\n    if (this.env.threading) {\n      if (message.depth) {\n        // This assumes that div width is hardcoded to 15px,\n        tree += '<span id=\"rcmtab' + uid + '\" class=\"branch\" style=\"width:' + (message.depth * 15) + 'px;\">&nbsp;&nbsp;</span>';\n\n        if ((rows[message.parent_uid] && rows[message.parent_uid].expanded === false)\n          || ((this.env.autoexpand_threads == 0 || this.env.autoexpand_threads == 2) &&\n            (!rows[message.parent_uid] || !rows[message.parent_uid].expanded))\n        ) {\n          row.style.display = 'none';\n          message.expanded = false;\n        }\n        else\n          message.expanded = true;\n\n        row_class += ' thread expanded';\n      }\n      else if (message.has_children) {\n        if (message.expanded === undefined && (this.env.autoexpand_threads == 1 || (this.env.autoexpand_threads == 2 && message.unread_children))) {\n          message.expanded = true;\n        }\n\n        expando = '<div id=\"rcmexpando' + uid + '\" class=\"' + (message.expanded ? 'expanded' : 'collapsed') + '\">&nbsp;&nbsp;</div>';\n        row_class += ' thread' + (message.expanded? ' expanded' : '');\n      }\n    }\n\n    tree += '<span id=\"msgicn'+uid+'\" class=\"'+css_class+'\">&nbsp;</span>';\n    row.className = row_class;\n\n    // build subject link \n    if (!bw.ie && cols.subject) {\n      var action = flags.mbox == this.env.drafts_mailbox ? 'compose' : 'show';\n      var uid_param = flags.mbox == this.env.drafts_mailbox ? '_draft_uid' : '_uid';\n      cols.subject = '<a href=\"./?_task=mail&_action='+action+'&_mbox='+urlencode(flags.mbox)+'&'+uid_param+'='+uid+'\"'+\n        ' onclick=\"return rcube_event.cancel(event)\" onmouseover=\"rcube_webmail.long_subject_title(this,'+(message.depth+1)+')\">'+cols.subject+'</a>';\n    }\n\n    // add each submitted col\n    for (n in this.env.coltypes) {\n      c = this.env.coltypes[n];\n      col = document.createElement('td');\n      col.className = String(c).toLowerCase();\n\n      if (c == 'flag') {\n        css_class = (flags.flagged ? 'flagged' : 'unflagged');\n        html = '<span id=\"flagicn'+uid+'\" class=\"'+css_class+'\">&nbsp;</span>';\n      }\n      else if (c == 'attachment') {\n        if (/application\\/|multipart\\/(m|signed)/.test(flags.ctype))\n          html = '<span class=\"attachment\">&nbsp;</span>';\n        else if (/multipart\\/report/.test(flags.ctype))\n          html = '<span class=\"report\">&nbsp;</span>';\n        else\n          html = '&nbsp;';\n      }\n      else if (c == 'status') {\n        if (flags.deleted)\n          css_class = 'deleted';\n        else if (!flags.seen)\n          css_class = 'unread';\n        else if (flags.unread_children > 0)\n          css_class = 'unreadchildren';\n        else\n          css_class = 'msgicon';\n        html = '<span id=\"statusicn'+uid+'\" class=\"'+css_class+'\">&nbsp;</span>';\n      }\n      else if (c == 'threads')\n        html = expando;\n      else if (c == 'subject') {\n        if (bw.ie) {\n          col.onmouseover = function() { rcube_webmail.long_subject_title_ie(this, message.depth+1); };\n          if (bw.ie8)\n            tree = '<span></span>' + tree; // #1487821\n        }\n        html = tree + cols[c];\n      }\n      else if (c == 'priority') {\n        if (flags.prio > 0 && flags.prio < 6)\n          html = '<span class=\"prio'+flags.prio+'\">&nbsp;</span>';\n        else\n          html = '&nbsp;';\n      }\n      else\n        html = cols[c];\n\n      col.innerHTML = html;\n\n      row.appendChild(col);\n    }\n\n    list.insert_row(row, attop);\n\n    // remove 'old' row\n    if (attop && this.env.pagesize && list.rowcount > this.env.pagesize) {\n      var uid = list.get_last_row();\n      list.remove_row(uid);\n      list.clear_selection(uid);\n    }\n  };\n\n  this.set_list_sorting = function(sort_col, sort_order)\n  {\n    // set table header class\n    $('#rcm'+this.env.sort_col).removeClass('sorted'+(this.env.sort_order.toUpperCase()));\n    if (sort_col)\n      $('#rcm'+sort_col).addClass('sorted'+sort_order);\n\n    this.env.sort_col = sort_col;\n    this.env.sort_order = sort_order;\n  };\n\n  this.set_list_options = function(cols, sort_col, sort_order, threads)\n  {\n    var update, post_data = {};\n\n    if (sort_col === undefined)\n      sort_col = this.env.sort_col;\n    if (!sort_order)\n      sort_order = this.env.sort_order;\n\n    if (this.env.sort_col != sort_col || this.env.sort_order != sort_order) {\n      update = 1;\n      this.set_list_sorting(sort_col, sort_order);\n    }\n\n    if (this.env.threading != threads) {\n      update = 1;\n      post_data._threads = threads;\n    }\n\n    if (cols && cols.length) {\n      // make sure new columns are added at the end of the list\n      var i, idx, name, newcols = [], oldcols = this.env.coltypes;\n      for (i=0; i<oldcols.length; i++) {\n        name = oldcols[i];\n        idx = $.inArray(name, cols);\n        if (idx != -1) {\n          newcols.push(name);\n          delete cols[idx];\n        }\n      }\n      for (i=0; i<cols.length; i++)\n        if (cols[i])\n          newcols.push(cols[i]);\n\n      if (newcols.join() != oldcols.join()) {\n        update = 1;\n        post_data._cols = newcols.join(',');\n      }\n    }\n\n    if (update)\n      this.list_mailbox('', '', sort_col+'_'+sort_order, post_data);\n  };\n\n  // when user doble-clicks on a row\n  this.show_message = function(id, safe, preview)\n  {\n    if (!id)\n      return;\n\n    var target = window,\n      action = preview ? 'preview': 'show',\n      url = '&_action='+action+'&_uid='+id+'&_mbox='+urlencode(this.env.mailbox);\n\n    if (preview && this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      target = window.frames[this.env.contentframe];\n      url += '&_framed=1';\n    }\n\n    if (safe)\n      url += '&_safe=1';\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      url += '&_search='+this.env.search_request;\n\n    // add browser capabilities, so we can properly handle attachments\n    url += '&_caps='+urlencode(this.browser_capabilities());\n\n    if (preview && String(target.location.href).indexOf(url) >= 0)\n      this.show_contentframe(true);\n    else {\n      this.location_href(this.env.comm_path+url, target, true);\n\n      // mark as read and change mbox unread counter\n      if (preview && this.message_list && this.message_list.rows[id] && this.message_list.rows[id].unread && this.env.preview_pane_mark_read >= 0) {\n        this.preview_read_timer = setTimeout(function() {\n          ref.set_message(id, 'unread', false);\n          ref.update_thread_root(id, 'read');\n          if (ref.env.unread_counts[ref.env.mailbox]) {\n            ref.env.unread_counts[ref.env.mailbox] -= 1;\n            ref.set_unread_count(ref.env.mailbox, ref.env.unread_counts[ref.env.mailbox], ref.env.mailbox == 'INBOX');\n          }\n          if (ref.env.preview_pane_mark_read > 0)\n            ref.http_post('mark', {_uid: id, _flag: 'read', _quiet: 1});\n        }, this.env.preview_pane_mark_read * 1000);\n      }\n    }\n  };\n\n  this.show_contentframe = function(show)\n  {\n    var frm, win;\n    if (this.env.contentframe && (frm = $('#'+this.env.contentframe)) && frm.length) {\n      if (!show && (win = window.frames[this.env.contentframe])) {\n        if (win.location && win.location.href.indexOf(this.env.blankpage)<0)\n          win.location.href = this.env.blankpage;\n      }\n      else if (!bw.safari && !bw.konq)\n        frm[show ? 'show' : 'hide']();\n      }\n\n    if (!show && this.busy)\n      this.set_busy(false, null, this.env.frame_lock);\n  };\n\n  this.lock_frame = function()\n  {\n    if (!this.env.frame_lock)\n      (this.is_framed() ? parent.rcmail : this).env.frame_lock = this.set_busy(true, 'loading');\n  };\n\n  // list a specific page\n  this.list_page = function(page)\n  {\n    if (page == 'next')\n      page = this.env.current_page+1;\n    else if (page == 'last')\n      page = this.env.pagecount;\n    else if (page == 'prev' && this.env.current_page > 1)\n      page = this.env.current_page-1;\n    else if (page == 'first' && this.env.current_page > 1)\n      page = 1;\n\n    if (page > 0 && page <= this.env.pagecount) {\n      this.env.current_page = page;\n\n      if (this.task == 'addressbook' || this.contact_list)\n        this.list_contacts(this.env.source, this.env.group, page);\n      else if (this.task == 'mail')\n        this.list_mailbox(this.env.mailbox, page);\n    }\n  };\n\n  // list messages of a specific mailbox using filter\n  this.filter_mailbox = function(filter)\n  {\n    var lock = this.set_busy(true, 'searching');\n\n    this.clear_message_list();\n\n    // reset vars\n    this.env.current_page = 1;\n    this.http_request('search', this.search_params(false, filter), lock);\n  };\n\n  // list messages of a specific mailbox\n  this.list_mailbox = function(mbox, page, sort, url)\n  {\n    var target = window;\n\n    if (typeof url != 'object')\n      url = {};\n\n    if (!mbox)\n      mbox = this.env.mailbox ? this.env.mailbox : 'INBOX';\n\n    // add sort to url if set\n    if (sort)\n      url._sort = sort;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    // set page=1 if changeing to another mailbox\n    if (this.env.mailbox != mbox) {\n      page = 1;\n      this.env.current_page = page;\n      this.select_all_mode = false;\n    }\n\n    // unselect selected messages and clear the list and message data\n    this.clear_message_list();\n\n    if (mbox != this.env.mailbox || (mbox == this.env.mailbox && !page && !sort))\n      url._refresh = 1;\n\n    this.select_folder(mbox, '', true);\n    this.unmark_folder(mbox, 'recent', '', true);\n    this.env.mailbox = mbox;\n\n    // load message list remotely\n    if (this.gui_objects.messagelist) {\n      this.list_mailbox_remote(mbox, page, url);\n      return;\n    }\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      target = window.frames[this.env.contentframe];\n      url._framed = 1;\n    }\n\n    // load message list to target frame/window\n    if (mbox) {\n      this.set_busy(true, 'loading');\n      url._mbox = mbox;\n      if (page)\n        url._page = page;\n      this.location_href(url, target);\n    }\n  };\n\n  this.clear_message_list = function()\n  {\n      this.env.messages = {};\n      this.last_selected = 0;\n\n      this.show_contentframe(false);\n      if (this.message_list)\n        this.message_list.clear(true);\n  };\n\n  // send remote request to load message list\n  this.list_mailbox_remote = function(mbox, page, post_data)\n  {\n    // clear message list first\n    this.message_list.clear();\n\n    var lock = this.set_busy(true, 'loading');\n\n    if (typeof post_data != 'object')\n      post_data = {};\n    post_data._mbox = mbox;\n    if (page)\n      post_data._page = page;\n\n    this.http_request('list', post_data, lock);\n  };\n\n  // removes messages that doesn't exists from list selection array\n  this.update_selection = function()\n  {\n    var selected = this.message_list.selection,\n      rows = this.message_list.rows,\n      i, selection = [];\n\n    for (i in selected)\n      if (rows[selected[i]])\n        selection.push(selected[i]);\n\n    this.message_list.selection = selection;\n  }\n\n  // expand all threads with unread children\n  this.expand_unread = function()\n  {\n    var r, tbody = this.gui_objects.messagelist.tBodies[0],\n      new_row = tbody.firstChild;\n\n    while (new_row) {\n      if (new_row.nodeType == 1 && (r = this.message_list.rows[new_row.uid]) && r.unread_children) {\n        this.message_list.expand_all(r);\n        this.set_unread_children(r.uid);\n      }\n      new_row = new_row.nextSibling;\n    }\n    return false;\n  };\n\n  // thread expanding/collapsing handler\n  this.expand_message_row = function(e, uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    // handle unread_children mark\n    row.expanded = !row.expanded;\n    this.set_unread_children(uid);\n    row.expanded = !row.expanded;\n\n    this.message_list.expand_row(e, uid);\n  };\n\n  // message list expanding\n  this.expand_threads = function()\n  {\n    if (!this.env.threading || !this.env.autoexpand_threads || !this.message_list)\n      return;\n\n    switch (this.env.autoexpand_threads) {\n      case 2: this.expand_unread(); break;\n      case 1: this.message_list.expand_all(); break;\n    }\n  };\n\n  // Initializes threads indicators/expanders after list update\n  this.init_threads = function(roots, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    for (var n=0, len=roots.length; n<len; n++)\n      this.add_tree_icons(roots[n]);\n    this.expand_threads();\n  };\n\n  // adds threads tree icons to the list (or specified thread)\n  this.add_tree_icons = function(root)\n  {\n    var i, l, r, n, len, pos, tmp = [], uid = [],\n      row, rows = this.message_list.rows;\n\n    if (root)\n      row = rows[root] ? rows[root].obj : null;\n    else\n      row = this.message_list.list.tBodies[0].firstChild;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (r.depth) {\n          for (i=tmp.length-1; i>=0; i--) {\n            len = tmp[i].length;\n            if (len > r.depth) {\n              pos = len - r.depth;\n              if (!(tmp[i][pos] & 2))\n                tmp[i][pos] = tmp[i][pos] ? tmp[i][pos]+2 : 2;\n            }\n            else if (len == r.depth) {\n              if (!(tmp[i][0] & 2))\n                tmp[i][0] += 2;\n            }\n            if (r.depth > len)\n              break;\n          }\n\n          tmp.push(new Array(r.depth));\n          tmp[tmp.length-1][0] = 1;\n          uid.push(r.uid);\n        }\n        else {\n          if (tmp.length) {\n            for (i in tmp) {\n              this.set_tree_icons(uid[i], tmp[i]);\n            }\n            tmp = [];\n            uid = [];\n          }\n          if (root && row != rows[root].obj)\n            break;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    if (tmp.length) {\n      for (i in tmp) {\n        this.set_tree_icons(uid[i], tmp[i]);\n      }\n    }\n  };\n\n  // adds tree icons to specified message row\n  this.set_tree_icons = function(uid, tree)\n  {\n    var i, divs = [], html = '', len = tree.length;\n\n    for (i=0; i<len; i++) {\n      if (tree[i] > 2)\n        divs.push({'class': 'l3', width: 15});\n      else if (tree[i] > 1)\n        divs.push({'class': 'l2', width: 15});\n      else if (tree[i] > 0)\n        divs.push({'class': 'l1', width: 15});\n      // separator div\n      else if (divs.length && !divs[divs.length-1]['class'])\n        divs[divs.length-1].width += 15;\n      else\n        divs.push({'class': null, width: 15});\n    }\n\n    for (i=divs.length-1; i>=0; i--) {\n      if (divs[i]['class'])\n        html += '<div class=\"tree '+divs[i]['class']+'\" />';\n      else\n        html += '<div style=\"width:'+divs[i].width+'px\" />';\n    }\n\n    if (html)\n      $('#rcmtab'+uid).html(html);\n  };\n\n  // update parent in a thread\n  this.update_thread_root = function(uid, flag)\n  {\n    if (!this.env.threading)\n      return;\n\n    var root = this.message_list.find_root(uid);\n\n    if (uid == root)\n      return;\n\n    var p = this.message_list.rows[root];\n\n    if (flag == 'read' && p.unread_children) {\n      p.unread_children--;\n    }\n    else if (flag == 'unread' && p.has_children) {\n      // unread_children may be undefined\n      p.unread_children = p.unread_children ? p.unread_children + 1 : 1;\n    }\n    else {\n      return;\n    }\n\n    this.set_message_icon(root);\n    this.set_unread_children(root);\n  };\n\n  // update thread indicators for all messages in a thread below the specified message\n  // return number of removed/added root level messages\n  this.update_thread = function (uid)\n  {\n    if (!this.env.threading)\n      return 0;\n\n    var r, parent, count = 0,\n      rows = this.message_list.rows,\n      row = rows[uid],\n      depth = rows[uid].depth,\n      roots = [];\n\n    if (!row.depth) // root message: decrease roots count\n      count--;\n    else if (row.unread) {\n      // update unread_children for thread root\n      parent = this.message_list.find_root(uid);\n      rows[parent].unread_children--;\n      this.set_unread_children(parent);\n    }\n\n    parent = row.parent_uid;\n\n    // childrens\n    row = row.obj.nextSibling;\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth || r.depth <= depth)\n          break;\n\n        r.depth--; // move left\n        // reset width and clear the content of a tab, icons will be added later\n        $('#rcmtab'+r.uid).width(r.depth * 15).html('');\n        if (!r.depth) { // a new root\n          count++; // increase roots count\n          r.parent_uid = 0;\n          if (r.has_children) {\n            // replace 'leaf' with 'collapsed'\n            $('#rcmrow'+r.uid+' '+'.leaf:first')\n              .attr('id', 'rcmexpando' + r.uid)\n              .attr('class', (r.obj.style.display != 'none' ? 'expanded' : 'collapsed'))\n              .bind('mousedown', {uid:r.uid, p:this},\n                function(e) { return e.data.p.expand_message_row(e, e.data.uid); });\n\n            r.unread_children = 0;\n            roots.push(r);\n          }\n          // show if it was hidden\n          if (r.obj.style.display == 'none')\n            $(r.obj).show();\n        }\n        else {\n          if (r.depth == depth)\n            r.parent_uid = parent;\n          if (r.unread && roots.length)\n            roots[roots.length-1].unread_children++;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    // update unread_children for roots\n    for (var i=0; i<roots.length; i++)\n      this.set_unread_children(roots[i].uid);\n\n    return count;\n  };\n\n  this.delete_excessive_thread_rows = function()\n  {\n    var rows = this.message_list.rows,\n      tbody = this.message_list.list.tBodies[0],\n      row = tbody.firstChild,\n      cnt = this.env.pagesize + 1;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth && cnt)\n          cnt--;\n\n        if (!cnt)\n          this.message_list.remove_row(row.uid);\n      }\n      row = row.nextSibling;\n    }\n  };\n\n  // set message icon\n  this.set_message_icon = function(uid)\n  {\n    var css_class,\n      row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (row.icon) {\n      css_class = 'msgicon';\n      if (row.deleted)\n        css_class += ' deleted';\n      else if (row.unread)\n        css_class += ' unread';\n      else if (row.unread_children)\n        css_class += ' unreadchildren';\n      if (row.msgicon == row.icon) {\n        if (row.replied)\n          css_class += ' replied';\n        if (row.forwarded)\n          css_class += ' forwarded';\n        css_class += ' status';\n      }\n\n      row.icon.className = css_class;\n    }\n\n    if (row.msgicon && row.msgicon != row.icon) {\n      css_class = 'msgicon';\n      if (!row.unread && row.unread_children)\n        css_class += ' unreadchildren';\n      if (row.replied)\n        css_class += ' replied';\n      if (row.forwarded)\n        css_class += ' forwarded';\n\n      row.msgicon.className = css_class;\n    }\n\n    if (row.flagicon) {\n      css_class = (row.flagged ? 'flagged' : 'unflagged');\n      row.flagicon.className = css_class;\n    }\n  };\n\n  // set message status\n  this.set_message_status = function(uid, flag, status)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag == 'unread')\n      row.unread = status;\n    else if(flag == 'deleted')\n      row.deleted = status;\n    else if (flag == 'replied')\n      row.replied = status;\n    else if (flag == 'forwarded')\n      row.forwarded = status;\n    else if (flag == 'flagged')\n      row.flagged = status;\n  };\n\n  // set message row status, class and icon\n  this.set_message = function(uid, flag, status)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag)\n      this.set_message_status(uid, flag, status);\n\n    var rowobj = $(row.obj);\n\n    if (row.unread && !rowobj.hasClass('unread'))\n      rowobj.addClass('unread');\n    else if (!row.unread && rowobj.hasClass('unread'))\n      rowobj.removeClass('unread');\n\n    if (row.deleted && !rowobj.hasClass('deleted'))\n      rowobj.addClass('deleted');\n    else if (!row.deleted && rowobj.hasClass('deleted'))\n      rowobj.removeClass('deleted');\n\n    if (row.flagged && !rowobj.hasClass('flagged'))\n      rowobj.addClass('flagged');\n    else if (!row.flagged && rowobj.hasClass('flagged'))\n      rowobj.removeClass('flagged');\n\n    this.set_unread_children(uid);\n    this.set_message_icon(uid);\n  };\n\n  // sets unroot (unread_children) class of parent row\n  this.set_unread_children = function(uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (row.parent_uid)\n      return;\n\n    if (!row.unread && row.unread_children && !row.expanded)\n      $(row.obj).addClass('unroot');\n    else\n      $(row.obj).removeClass('unroot');\n  };\n\n  // copy selected messages to the specified mailbox\n  this.copy_messages = function(mbox)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n\n    // exit if current or no mailbox specified or if selection is empty\n    if (!mbox || mbox == this.env.mailbox || (!this.env.uid && (!this.message_list || !this.message_list.get_selection().length)))\n      return;\n\n    var a_uids = [], n, selection,\n      lock = this.display_message(this.get_label('copyingmessage'), 'loading'),\n      post_data = {_mbox: this.env.mailbox, _target_mbox: mbox, _from: (this.env.action ? this.env.action : '')};\n\n    if (this.env.uid)\n      a_uids[0] = this.env.uid;\n    else {\n      selection = this.message_list.get_selection();\n      for (n in selection) {\n        a_uids.push(selection[n]);\n      }\n    }\n\n    post_data._uid = this.uids_to_list(a_uids);\n\n    // send request to server\n    this.http_post('copy', post_data, lock);\n  };\n\n  // move selected messages to the specified mailbox\n  this.move_messages = function(mbox)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n\n    // exit if current or no mailbox specified or if selection is empty\n    if (!mbox || mbox == this.env.mailbox || (!this.env.uid && (!this.message_list || !this.message_list.get_selection().length)))\n      return;\n\n    var lock = false,\n      add_post = {_target_mbox: mbox, _from: (this.env.action ? this.env.action : '')};\n\n    // show wait message\n    if (this.env.action == 'show')\n      lock = this.set_busy(true, 'movingmessage');\n    else\n      this.show_contentframe(false);\n\n    // Hide message command buttons until a message is selected\n    this.enable_command(this.env.message_commands, false);\n\n    this._with_selected_messages('moveto', lock, add_post);\n  };\n\n  // delete selected messages from the current mailbox\n  this.delete_messages = function(event)\n  {\n    var uid, i, len, trash = this.env.trash_mailbox,\n      list = this.message_list,\n      selection = list ? $.merge([], list.get_selection()) : [];\n\n    // exit if no mailbox specified or if selection is empty\n    if (!this.env.uid && !selection.length)\n      return;\n\n    // also select childs of collapsed rows\n    for (i=0, len=selection.length; i<len; i++) {\n      uid = selection[i];\n      if (list.rows[uid].has_children && !list.rows[uid].expanded)\n        list.select_childs(uid);\n    }\n\n    // if config is set to flag for deletion\n    if (this.env.flag_for_deletion) {\n      this.mark_message('delete');\n      return false;\n    }\n    // if there isn't a defined trash mailbox or we are in it\n    // @TODO: we should check if defined trash mailbox exists\n    else if (!trash || this.env.mailbox == trash)\n      this.permanently_remove_messages();\n    // we're in Junk folder and delete_junk is enabled\n    else if (this.env.delete_junk && this.env.junk_mailbox && this.env.mailbox == this.env.junk_mailbox)\n      this.permanently_remove_messages();\n    // if there is a trash mailbox defined and we're not currently in it\n    else {\n      // if shift was pressed delete it immediately\n      if ((list && list.modkey == SHIFT_KEY) || (event && rcube_event.get_modifier(event) == SHIFT_KEY)) {\n        if (confirm(this.get_label('deletemessagesconfirm')))\n          this.permanently_remove_messages();\n      }\n      else\n        this.move_messages(trash);\n    }\n\n    return true;\n  };\n\n  // delete the selected messages permanently\n  this.permanently_remove_messages = function()\n  {\n    // exit if no mailbox specified or if selection is empty\n    if (!this.env.uid && (!this.message_list || !this.message_list.get_selection().length))\n      return;\n\n    this.show_contentframe(false);\n    this._with_selected_messages('delete', false, {_from: this.env.action ? this.env.action : ''});\n  };\n\n  // Send a specifc moveto/delete request with UIDs of all selected messages\n  // @private\n  this._with_selected_messages = function(action, lock, post_data)\n  {\n    var a_uids = [], count = 0, msg, lock;\n\n    if (typeof(post_data) != 'object')\n      post_data = {};\n\n    if (this.env.uid)\n      a_uids[0] = this.env.uid;\n    else {\n      var n, id, root, roots = [],\n        selection = this.message_list.get_selection();\n\n      for (n=0, len=selection.length; n<len; n++) {\n        id = selection[n];\n        a_uids.push(id);\n\n        if (this.env.threading) {\n          count += this.update_thread(id);\n          root = this.message_list.find_root(id);\n          if (root != id && $.inArray(root, roots) < 0) {\n            roots.push(root);\n          }\n        }\n        this.message_list.remove_row(id, (this.env.display_next && n == selection.length-1));\n      }\n      // make sure there are no selected rows\n      if (!this.env.display_next)\n        this.message_list.clear_selection();\n      // update thread tree icons\n      for (n=0, len=roots.length; n<len; n++) {\n        this.add_tree_icons(roots[n]);\n      }\n    }\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    if (this.env.display_next && this.env.next_uid)\n      post_data._next_uid = this.env.next_uid;\n\n    if (count < 0)\n      post_data._count = (count*-1);\n    // remove threads from the end of the list\n    else if (count > 0)\n      this.delete_excessive_thread_rows();\n\n    post_data._uid = this.uids_to_list(a_uids);\n    post_data._mbox = this.env.mailbox;\n\n    if (!lock) {\n      msg = action == 'moveto' ? 'movingmessage' : 'deletingmessage';\n      lock = this.display_message(this.get_label(msg), 'loading');\n    }\n\n    // send request to server\n    this.http_post(action, post_data, lock);\n  };\n\n  // set a specific flag to one or more messages\n  this.mark_message = function(flag, uid)\n  {\n    var a_uids = [], r_uids = [], len, n, id,\n      selection = this.message_list ? this.message_list.get_selection() : [];\n\n    if (uid)\n      a_uids[0] = uid;\n    else if (this.env.uid)\n      a_uids[0] = this.env.uid;\n    else if (this.message_list) {\n      for (n=0, len=selection.length; n<len; n++) {\n          a_uids.push(selection[n]);\n      }\n    }\n\n    if (!this.message_list)\n      r_uids = a_uids;\n    else\n      for (n=0, len=a_uids.length; n<len; n++) {\n        id = a_uids[n];\n        if ((flag=='read' && this.message_list.rows[id].unread) \n            || (flag=='unread' && !this.message_list.rows[id].unread)\n            || (flag=='delete' && !this.message_list.rows[id].deleted)\n            || (flag=='undelete' && this.message_list.rows[id].deleted)\n            || (flag=='flagged' && !this.message_list.rows[id].flagged)\n            || (flag=='unflagged' && this.message_list.rows[id].flagged))\n        {\n          r_uids.push(id);\n        }\n      }\n\n    // nothing to do\n    if (!r_uids.length && !this.select_all_mode)\n      return;\n\n    switch (flag) {\n        case 'read':\n        case 'unread':\n          this.toggle_read_status(flag, r_uids);\n          break;\n        case 'delete':\n        case 'undelete':\n          this.toggle_delete_status(r_uids);\n          break;\n        case 'flagged':\n        case 'unflagged':\n          this.toggle_flagged_status(flag, a_uids);\n          break;\n    }\n  };\n\n  // set class to read/unread\n  this.toggle_read_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = {_uid: this.uids_to_list(a_uids), _flag: flag},\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as read/unread\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'unread', (flag=='unread' ? true : false));\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    this.http_post('mark', post_data, lock);\n\n    for (i=0; i<len; i++)\n      this.update_thread_root(a_uids[i], flag);\n  };\n\n  // set image to flagged or unflagged\n  this.toggle_flagged_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = {_uid: this.uids_to_list(a_uids), _flag: flag},\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as flagged/unflagged\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'flagged', (flag=='flagged' ? true : false));\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // mark all message rows as deleted/undeleted\n  this.toggle_delete_status = function(a_uids)\n  {\n    var len = a_uids.length,\n      i, uid, all_deleted = true,\n      rows = this.message_list ? this.message_list.rows : [];\n\n    if (len == 1) {\n      if (!rows.length || (rows[a_uids[0]] && !rows[a_uids[0]].deleted))\n        this.flag_as_deleted(a_uids);\n      else\n        this.flag_as_undeleted(a_uids);\n\n      return true;\n    }\n\n    for (i=0; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid] && !rows[uid].deleted) {\n        all_deleted = false;\n        break;\n      }\n    }\n\n    if (all_deleted)\n      this.flag_as_undeleted(a_uids);\n    else\n      this.flag_as_deleted(a_uids);\n\n    return true;\n  };\n\n  this.flag_as_undeleted = function(a_uids)\n  {\n    var i, len=a_uids.length,\n      post_data = {_uid: this.uids_to_list(a_uids), _flag: 'undelete'},\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'deleted', false);\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    this.http_post('mark', post_data, lock);\n    return true;\n  };\n\n  this.flag_as_deleted = function(a_uids)\n  {\n    var r_uids = [],\n      post_data = {_uid: this.uids_to_list(a_uids), _flag: 'delete'},\n      lock = this.display_message(this.get_label('markingmessage'), 'loading'),\n      rows = this.message_list ? this.message_list.rows : [],\n      count = 0;\n\n    for (var i=0, len=a_uids.length; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid]) {\n        if (rows[uid].unread)\n          r_uids[r_uids.length] = uid;\n\n        if (this.env.skip_deleted) {\n          count += this.update_thread(uid);\n          this.message_list.remove_row(uid, (this.env.display_next && i == this.message_list.selection.length-1));\n        }\n        else\n          this.set_message(uid, 'deleted', true);\n      }\n    }\n\n    // make sure there are no selected rows\n    if (this.env.skip_deleted && this.message_list) {\n      if(!this.env.display_next)\n        this.message_list.clear_selection();\n      if (count < 0)\n        post_data._count = (count*-1);\n      else if (count > 0) \n        // remove threads from the end of the list\n        this.delete_excessive_thread_rows();\n    }\n\n    if (this.env.action)\n      post_data._from = this.env.action;\n\n    // ??\n    if (r_uids.length)\n      post_data._ruid = this.uids_to_list(r_uids);\n\n    if (this.env.skip_deleted && this.env.display_next && this.env.next_uid)\n      post_data._next_uid = this.env.next_uid;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    this.http_post('mark', post_data, lock);\n    return true;\n  };\n\n  // flag as read without mark request (called from backend)\n  // argument should be a coma-separated list of uids\n  this.flag_deleted_as_read = function(uids)\n  {\n    var icn_src, uid, i, len,\n      rows = this.message_list ? this.message_list.rows : [];\n\n    uids = String(uids).split(',');\n\n    for (i=0, len=uids.length; i<len; i++) {\n      uid = uids[i];\n      if (rows[uid])\n        this.set_message(uid, 'unread', false);\n    }\n  };\n\n  // Converts array of message UIDs to comma-separated list for use in URL\n  // with select_all mode checking\n  this.uids_to_list = function(uids)\n  {\n    return this.select_all_mode ? '*' : uids.join(',');\n  };\n\n  // Sets title of the delete button\n  this.set_button_titles = function()\n  {\n    var label = 'deletemessage';\n\n    if (!this.env.flag_for_deletion\n      && this.env.trash_mailbox && this.env.mailbox != this.env.trash_mailbox\n      && (!this.env.delete_junk || !this.env.junk_mailbox || this.env.mailbox != this.env.junk_mailbox)\n    )\n      label = 'movemessagetotrash';\n\n    this.set_alttext('delete', label);\n  };\n\n  /*********************************************************/\n  /*********       mailbox folders methods         *********/\n  /*********************************************************/\n\n  this.expunge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n      lock = this.set_busy(true, 'loading');\n      post_data._reload = 1;\n      if (this.env.search_request)\n        post_data._search = this.env.search_request;\n    }\n\n    // send request to server\n    this.http_post('expunge', post_data, lock);\n  };\n\n  this.purge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    if (!confirm(this.get_label('purgefolderconfirm')))\n      return false;\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n       lock = this.set_busy(true, 'loading');\n       post_data._reload = 1;\n     }\n\n    // send request to server\n    this.http_post('purge', post_data, lock);\n  };\n\n  // test if purge command is allowed\n  this.purge_mailbox_test = function()\n  {\n    return (this.env.messagecount && (this.env.mailbox == this.env.trash_mailbox || this.env.mailbox == this.env.junk_mailbox\n      || this.env.mailbox.match('^' + RegExp.escape(this.env.trash_mailbox) + RegExp.escape(this.env.delimiter))\n      || this.env.mailbox.match('^' + RegExp.escape(this.env.junk_mailbox) + RegExp.escape(this.env.delimiter))));\n  };\n\n\n  /*********************************************************/\n  /*********           login form methods          *********/\n  /*********************************************************/\n\n  // handler for keyboard events on the _user field\n  this.login_user_keyup = function(e)\n  {\n    var key = rcube_event.get_keycode(e);\n    var passwd = $('#rcmloginpwd');\n\n    // enter\n    if (key == 13 && passwd.length && !passwd.val()) {\n      passwd.focus();\n      return rcube_event.cancel(e);\n    }\n\n    return true;\n  };\n\n\n  /*********************************************************/\n  /*********        message compose methods        *********/\n  /*********************************************************/\n\n  // init message compose form: set focus and eventhandlers\n  this.init_messageform = function()\n  {\n    if (!this.gui_objects.messageform)\n      return false;\n\n    var input_from = $(\"[name='_from']\"),\n      input_to = $(\"[name='_to']\"),\n      input_subject = $(\"input[name='_subject']\"),\n      input_message = $(\"[name='_message']\").get(0),\n      html_mode = $(\"input[name='_is_html']\").val() == '1',\n      ac_fields = ['cc', 'bcc', 'replyto', 'followupto'],\n      ac_props;\n\n    // configure parallel autocompletion\n    if (this.env.autocomplete_threads > 0) {\n      ac_props = {\n        threads: this.env.autocomplete_threads,\n        sources: this.env.autocomplete_sources\n      };\n    }\n\n    // init live search events\n    this.init_address_input_events(input_to, ac_props);\n    for (var i in ac_fields) {\n      this.init_address_input_events($(\"[name='_\"+ac_fields[i]+\"']\"), ac_props);\n    }\n\n    if (!html_mode) {\n      this.set_caret_pos(input_message, this.env.top_posting ? 0 : $(input_message).val().length);\n      // add signature according to selected identity\n      // if we have HTML editor, signature is added in callback\n      if (input_from.prop('type') == 'select-one') {\n        this.change_identity(input_from[0]);\n      }\n    }\n\n    if (input_to.val() == '')\n      input_to.focus();\n    else if (input_subject.val() == '')\n      input_subject.focus();\n    else if (input_message)\n      input_message.focus();\n\n    this.env.compose_focus_elem = document.activeElement;\n\n    // get summary of all field values\n    this.compose_field_hash(true);\n\n    // start the auto-save timer\n    this.auto_save_start();\n  };\n\n  this.init_address_input_events = function(obj, props)\n  {\n    this.env.recipients_delimiter = this.env.recipients_separator + ' ';\n\n    obj[bw.ie || bw.safari || bw.chrome ? 'keydown' : 'keypress'](function(e) { return ref.ksearch_keydown(e, this, props); })\n      .attr('autocomplete', 'off');\n  };\n\n  this.submit_messageform = function(draft)\n  {\n    var form = this.gui_objects.messageform;\n\n    if (!form)\n      return;\n\n    // all checks passed, send message\n    var msgid = this.set_busy(true, draft ? 'savingmessage' : 'sendingmessage'),\n      lang = this.spellcheck_lang(),\n      files = [];\n\n    // send files list\n    $('li', this.gui_objects.attachmentlist).each(function() { files.push(this.id.replace(/^rcmfile/, '')); });\n    $('input[name=\"_attachments\"]', form).val(files.join());\n\n    form.target = 'savetarget';\n    form._draft.value = draft ? '1' : '';\n    form.action = this.add_url(form.action, '_unlock', msgid);\n    form.action = this.add_url(form.action, '_lang', lang);\n    form.submit();\n  };\n\n  this.compose_recipient_select = function(list)\n  {\n    this.enable_command('add-recipient', list.selection.length > 0);\n  };\n\n  this.compose_add_recipient = function(field)\n  {\n    var recipients = [], input = $('#_'+field);\n\n    if (this.contact_list && this.contact_list.selection.length) {\n      for (var id, n=0; n < this.contact_list.selection.length; n++) {\n        id = this.contact_list.selection[n];\n        if (id && this.env.contactdata[id]) {\n          recipients.push(this.env.contactdata[id]);\n\n          // group is added, expand it\n          if (id.charAt(0) == 'E' && this.env.contactdata[id].indexOf('@') < 0 && input.length) {\n            var gid = id.substr(1);\n            this.group2expand[gid] = { name:this.env.contactdata[id], input:input.get(0) };\n            this.http_request('group-expand', {_source: this.env.source, _gid: gid}, false);\n          }\n        }\n      }\n    }\n\n    if (recipients.length && input.length) {\n      var oldval = input.val();\n      input.val((oldval ? oldval + this.env.recipients_delimiter : '') + recipients.join(this.env.recipients_delimiter));\n      this.triggerEvent('add-recipient', { field:field, recipients:recipients });\n    }\n  };\n\n  // checks the input fields before sending a message\n  this.check_compose_input = function(cmd)\n  {\n    // check input fields\n    var ed, input_to = $(\"[name='_to']\"),\n      input_cc = $(\"[name='_cc']\"),\n      input_bcc = $(\"[name='_bcc']\"),\n      input_from = $(\"[name='_from']\"),\n      input_subject = $(\"[name='_subject']\"),\n      input_message = $(\"[name='_message']\");\n\n    // check sender (if have no identities)\n    if (input_from.prop('type') == 'text' && !rcube_check_email(input_from.val(), true)) {\n      alert(this.get_label('nosenderwarning'));\n      input_from.focus();\n      return false;\n    }\n\n    // check for empty recipient\n    var recipients = input_to.val() ? input_to.val() : (input_cc.val() ? input_cc.val() : input_bcc.val());\n    if (!rcube_check_email(recipients.replace(/^\\s+/, '').replace(/[\\s,;]+$/, ''), true)) {\n      alert(this.get_label('norecipientwarning'));\n      input_to.focus();\n      return false;\n    }\n\n    // check if all files has been uploaded\n    for (var key in this.env.attachments) {\n      if (typeof this.env.attachments[key] === 'object' && !this.env.attachments[key].complete) {\n        alert(this.get_label('notuploadedwarning'));\n        return false;\n      }\n    }\n\n    // display localized warning for missing subject\n    if (input_subject.val() == '') {\n      var myprompt = $('<div class=\"prompt\">').html('<div class=\"message\">' + this.get_label('nosubjectwarning') + '</div>').appendTo(document.body);\n      var prompt_value = $('<input>').attr('type', 'text').attr('size', 30).appendTo(myprompt).val(this.get_label('nosubject'));\n\n      var buttons = {};\n      buttons[this.get_label('cancel')] = function(){\n        input_subject.focus();\n        $(this).dialog('close');\n      };\n      buttons[this.get_label('sendmessage')] = function(){\n        input_subject.val(prompt_value.val());\n        $(this).dialog('close');\n        ref.command(cmd, { nocheck:true });  // repeat command which triggered this\n      };\n\n      myprompt.dialog({\n        modal: true,\n        resizable: false,\n        buttons: buttons,\n        close: function(event, ui) { $(this).remove() }\n      });\n      prompt_value.select();\n      return false;\n    }\n\n    // Apply spellcheck changes if spell checker is active\n    this.stop_spellchecking();\n\n    if (window.tinyMCE)\n      ed = tinyMCE.get(this.env.composebody);\n\n    // check for empty body\n    if (!ed && input_message.val() == '' && !confirm(this.get_label('nobodywarning'))) {\n      input_message.focus();\n      return false;\n    }\n    else if (ed) {\n      if (!ed.getContent() && !confirm(this.get_label('nobodywarning'))) {\n        ed.focus();\n        return false;\n      }\n      // move body from html editor to textarea (just to be sure, #1485860)\n      tinyMCE.triggerSave();\n    }\n\n    return true;\n  };\n\n  this.toggle_editor = function(props)\n  {\n    this.stop_spellchecking();\n\n    if (props.mode == 'html') {\n      this.plain2html($('#'+props.id).val(), props.id);\n      tinyMCE.execCommand('mceAddControl', false, props.id);\n\n      if (this.env.default_font)\n        setTimeout(function() {\n          $(tinyMCE.get(props.id).getBody()).css('font-family', rcmail.env.default_font);\n        }, 500);\n    }\n    else {\n      var thisMCE = tinyMCE.get(props.id), existingHtml;\n\n      if (existingHtml = thisMCE.getContent()) {\n        if (!confirm(this.get_label('editorwarning'))) {\n          return false;\n        }\n        this.html2plain(existingHtml, props.id);\n      }\n      tinyMCE.execCommand('mceRemoveControl', false, props.id);\n    }\n\n    return true;\n  };\n\n  this.stop_spellchecking = function()\n  {\n    var ed;\n\n    if (window.tinyMCE && (ed = tinyMCE.get(this.env.composebody))) {\n      if (ed.plugins && ed.plugins.spellchecker && ed.plugins.spellchecker.active)\n        ed.execCommand('mceSpellCheck');\n    }\n    else if (ed = this.env.spellcheck) {\n      if (ed.state && ed.state != 'ready' && ed.state != 'no_error_found')\n        $(ed.spell_span).trigger('click');\n    }\n\n    this.spellcheck_state();\n  };\n\n  this.spellcheck_state = function()\n  {\n    var ed, active;\n\n    if (window.tinyMCE && (ed = tinyMCE.get(this.env.composebody)) && ed.plugins && ed.plugins.spellchecker)\n      active = ed.plugins.spellchecker.active;\n    else if ((ed = this.env.spellcheck) && ed.state)\n      active = ed.state != 'ready' && ed.state != 'no_error_found';\n\n    if (rcmail.buttons.spellcheck)\n      $('#'+rcmail.buttons.spellcheck[0].id)[active ? 'addClass' : 'removeClass']('selected');\n\n    return active;\n  };\n\n  // get selected language\n  this.spellcheck_lang = function()\n  {\n    var ed;\n\n    if (window.tinyMCE && (ed = tinyMCE.get(this.env.composebody)) && ed.plugins && ed.plugins.spellchecker)\n      return ed.plugins.spellchecker.selectedLang;\n    else if (this.env.spellcheck)\n      return GOOGIE_CUR_LANG;\n  };\n\n  this.spellcheck_lang_set = function(lang)\n  {\n    var ed;\n\n    if (window.tinyMCE && (ed = tinyMCE.get(this.env.composebody)) && ed.plugins)\n      ed.plugins.spellchecker.selectedLang = lang;\n    else if (this.env.spellcheck)\n      this.env.spellcheck.setCurrentLanguage(lang);\n  };\n\n  // resume spellchecking, highlight provided mispellings without new ajax request\n  this.spellcheck_resume = function(ishtml, data)\n  {\n    if (ishtml) {\n      var ed = tinyMCE.get(this.env.composebody);\n        sp = ed.plugins.spellchecker;\n\n      sp.active = 1;\n      sp._markWords(data);\n      ed.nodeChanged();\n    }\n    else {\n      var sp = this.env.spellcheck;\n      sp.prepare(false, true);\n      sp.processData(data);\n    }\n\n    this.spellcheck_state();\n  }\n\n  this.set_draft_id = function(id)\n  {\n    $(\"input[name='_draft_saveid']\").val(id);\n  };\n\n  this.auto_save_start = function()\n  {\n    if (this.env.draft_autosave)\n      this.save_timer = setTimeout(function(){ ref.command(\"savedraft\"); }, this.env.draft_autosave * 1000);\n\n    // Unlock interface now that saving is complete\n    this.busy = false;\n  };\n\n  this.compose_field_hash = function(save)\n  {\n    // check input fields\n    var ed, i, val, str = '', hash_fields = ['to', 'cc', 'bcc', 'subject'];\n\n    for (i=0; i<hash_fields.length; i++)\n      if (val = $('[name=\"_' + hash_fields[i] + '\"]').val())\n        str += val + ':';\n\n    if (window.tinyMCE && (ed = tinyMCE.get(this.env.composebody)))\n      str += ed.getContent();\n    else\n      str += $(\"[name='_message']\").val();\n\n    if (this.env.attachments)\n      for (var upload_id in this.env.attachments)\n        str += upload_id;\n\n    if (save)\n      this.cmp_hash = str;\n\n    return str;\n  };\n\n  this.change_identity = function(obj, show_sig)\n  {\n    if (!obj || !obj.options)\n      return false;\n\n    if (!show_sig)\n      show_sig = this.env.show_sig;\n\n    var cursor_pos, p = -1,\n      id = obj.options[obj.selectedIndex].value,\n      input_message = $(\"[name='_message']\"),\n      message = input_message.val(),\n      is_html = ($(\"input[name='_is_html']\").val() == '1'),\n      sig = this.env.identity,\n      sig_separator = this.env.sig_above && (this.env.compose_mode == 'reply' || this.env.compose_mode == 'forward') ? '---' : '-- ';\n\n    // enable manual signature insert\n    if (this.env.signatures && this.env.signatures[id]) {\n      this.enable_command('insert-sig', true);\n      this.env.compose_commands.push('insert-sig');\n    }\n    else\n      this.enable_command('insert-sig', false);\n\n    if (!is_html) {\n      // remove the 'old' signature\n      if (show_sig && sig && this.env.signatures && this.env.signatures[sig]) {\n\n        sig = this.env.signatures[sig].is_html ? this.env.signatures[sig].plain_text : this.env.signatures[sig].text;\n        sig = sig.replace(/\\r\\n/g, '\\n');\n\n        if (!sig.match(/^--[ -]\\n/m))\n          sig = sig_separator + '\\n' + sig;\n\n        p = this.env.sig_above ? message.indexOf(sig) : message.lastIndexOf(sig);\n        if (p >= 0)\n          message = message.substring(0, p) + message.substring(p+sig.length, message.length);\n      }\n      // add the new signature string\n      if (show_sig && this.env.signatures && this.env.signatures[id]) {\n        sig = this.env.signatures[id]['is_html'] ? this.env.signatures[id]['plain_text'] : this.env.signatures[id]['text'];\n        sig = sig.replace(/\\r\\n/g, '\\n');\n\n        if (!sig.match(/^--[ -]\\n/m))\n          sig = sig_separator + '\\n' + sig;\n\n        if (this.env.sig_above) {\n          if (p >= 0) { // in place of removed signature\n            message = message.substring(0, p) + sig + message.substring(p, message.length);\n            cursor_pos = p - 1;\n          }\n          else if (pos = this.get_caret_pos(input_message.get(0))) { // at cursor position\n            message = message.substring(0, pos) + '\\n' + sig + '\\n\\n' + message.substring(pos, message.length);\n            cursor_pos = pos;\n          }\n          else { // on top\n            cursor_pos = 0;\n            message = '\\n\\n' + sig + '\\n\\n' + message.replace(/^[\\r\\n]+/, '');\n          }\n        }\n        else {\n          message = message.replace(/[\\r\\n]+$/, '');\n          cursor_pos = !this.env.top_posting && message.length ? message.length+1 : 0;\n          message += '\\n\\n' + sig;\n        }\n      }\n      else\n        cursor_pos = this.env.top_posting ? 0 : message.length;\n\n      input_message.val(message);\n\n      // move cursor before the signature\n      this.set_caret_pos(input_message.get(0), cursor_pos);\n    }\n    else if (show_sig && this.env.signatures) {  // html\n      var editor = tinyMCE.get(this.env.composebody),\n        sigElem = editor.dom.get('_rc_sig');\n\n      // Append the signature as a div within the body\n      if (!sigElem) {\n        var body = editor.getBody(),\n          doc = editor.getDoc();\n\n        sigElem = doc.createElement('div');\n        sigElem.setAttribute('id', '_rc_sig');\n\n        if (this.env.sig_above) {\n          // if no existing sig and top posting then insert at caret pos\n          editor.getWin().focus(); // correct focus in IE & Chrome\n\n          var node = editor.selection.getNode();\n          if (node.nodeName == 'BODY') {\n            // no real focus, insert at start\n            body.insertBefore(sigElem, body.firstChild);\n            body.insertBefore(doc.createElement('br'), body.firstChild);\n          }\n          else {\n            body.insertBefore(sigElem, node.nextSibling);\n            body.insertBefore(doc.createElement('br'), node.nextSibling);\n          }\n        }\n        else {\n          if (bw.ie)  // add empty line before signature on IE\n            body.appendChild(doc.createElement('br'));\n\n          body.appendChild(sigElem);\n        }\n      }\n\n      if (this.env.signatures[id]) {\n        if (this.env.signatures[id].is_html) {\n          sig = this.env.signatures[id].text;\n          if (!this.env.signatures[id].plain_text.match(/^--[ -]\\r?\\n/m))\n            sig = sig_separator + '<br />' + sig;\n        }\n        else {\n          sig = this.env.signatures[id].text;\n          if (!sig.match(/^--[ -]\\r?\\n/m))\n            sig = sig_separator + '\\n' + sig;\n          sig = '<pre>' + sig + '</pre>';\n        }\n\n        sigElem.innerHTML = sig;\n      }\n    }\n\n    this.env.identity = id;\n    return true;\n  };\n\n  // upload attachment file\n  this.upload_file = function(form)\n  {\n    if (!form)\n      return false;\n\n    // get file input field, count files on capable browser\n    var i, size = 0, field = $('input[type=file]', form).get(0),\n      files = field.files ? field.files.length : field.value ? 1 : 0;\n\n    // create hidden iframe and post upload form\n    if (files) {\n      // check file size\n      if (field.files && this.env.max_filesize && this.env.filesizeerror) {\n        for (i=0; i<files; i++)\n          size += field.files[i].size;\n        if (size && size > this.env.max_filesize) {\n          this.display_message(this.env.filesizeerror, 'error');\n          return;\n        }\n      }\n\n      var frame_name = this.async_upload_form(form, 'upload', function(e) {\n        var d, content = '';\n        try {\n          if (this.contentDocument) {\n            d = this.contentDocument;\n          } else if (this.contentWindow) {\n            d = this.contentWindow.document;\n          }\n          content = d.childNodes[0].innerHTML;\n        } catch (err) {}\n\n        if (!content.match(/add2attachment/) && (!bw.opera || (rcmail.env.uploadframe && rcmail.env.uploadframe == e.data.ts))) {\n          if (!content.match(/display_message/))\n            rcmail.display_message(rcmail.get_label('fileuploaderror'), 'error');\n          rcmail.remove_from_attachment_list(e.data.ts);\n        }\n        // Opera hack: handle double onload\n        if (bw.opera)\n          rcmail.env.uploadframe = e.data.ts;\n      });\n\n      // display upload indicator and cancel button\n      var content = '<span>' + this.get_label('uploading' + (files > 1 ? 'many' : '')) + '</span>',\n        ts = frame_name.replace(/^rcmupload/, '');\n\n      this.add2attachment_list(ts, { name:'', html:content, classname:'uploading', frame:frame_name, complete:false });\n\n      // upload progress support\n      if (this.env.upload_progress_time) {\n        this.upload_progress_start('upload', ts);\n      }\n    }\n\n    // set reference to the form object\n    this.gui_objects.attachmentform = form;\n    return true;\n  };\n\n  // add file name to attachment list\n  // called from upload page\n  this.add2attachment_list = function(name, att, upload_id)\n  {\n    if (!this.gui_objects.attachmentlist)\n      return false;\n\n    if (!att.complete && ref.env.loadingicon)\n      att.html = '<img src=\"'+ref.env.loadingicon+'\" alt=\"\" class=\"uploading\" />' + att.html;\n\n    if (!att.complete && att.frame)\n      att.html = '<a title=\"'+this.get_label('cancel')+'\" onclick=\"return rcmail.cancel_attachment_upload(\\''+name+'\\', \\''+att.frame+'\\');\" href=\"#cancelupload\" class=\"cancelupload\">'\n        + (this.env.cancelicon ? '<img src=\"'+this.env.cancelicon+'\" alt=\"\" />' : this.get_label('cancel')) + '</a>' + att.html;\n\n    var indicator, li = $('<li>').attr('id', name).addClass(att.classname).html(att.html);\n\n    // replace indicator's li\n    if (upload_id && (indicator = document.getElementById(upload_id))) {\n      li.replaceAll(indicator);\n    }\n    else { // add new li\n      li.appendTo(this.gui_objects.attachmentlist);\n    }\n\n    if (upload_id && this.env.attachments[upload_id])\n      delete this.env.attachments[upload_id];\n\n    this.env.attachments[name] = att;\n\n    return true;\n  };\n\n  this.remove_from_attachment_list = function(name)\n  {\n    delete this.env.attachments[name];\n    $('#'+name).remove();\n  };\n\n  this.remove_attachment = function(name)\n  {\n    if (name && this.env.attachments[name])\n      this.http_post('remove-attachment', { _id:this.env.compose_id, _file:name });\n\n    return true;\n  };\n\n  this.cancel_attachment_upload = function(name, frame_name)\n  {\n    if (!name || !frame_name)\n      return false;\n\n    this.remove_from_attachment_list(name);\n    $(\"iframe[name='\"+frame_name+\"']\").remove();\n    return false;\n  };\n\n  this.upload_progress_start = function(action, name)\n  {\n    setTimeout(function() { rcmail.http_request(action, {_progress: name}); },\n      this.env.upload_progress_time * 1000);\n  };\n\n  this.upload_progress_update = function(param)\n  {\n    var elem = $('#'+param.name + '> span');\n\n    if (!elem.length || !param.text)\n      return;\n\n    elem.text(param.text);\n\n    if (!param.done)\n      this.upload_progress_start(param.action, param.name);\n  };\n\n  // send remote request to add a new contact\n  this.add_contact = function(value)\n  {\n    if (value)\n      this.http_post('addcontact', {_address: value});\n\n    return true;\n  };\n\n  // send remote request to search mail or contacts\n  this.qsearch = function(value)\n  {\n    if (value != '') {\n      var r, lock = this.set_busy(true, 'searching'),\n        url = this.search_params(value);\n\n      if (this.message_list)\n        this.clear_message_list();\n      else if (this.contact_list)\n        this.list_contacts_clear();\n\n      if (this.env.source)\n        url._source = this.env.source;\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      // reset vars\n      this.env.current_page = 1;\n\n      r = this.http_request('search', url, lock);\n\n      this.env.qsearch = {lock: lock, request: r};\n    }\n  };\n\n  // build URL params for search\n  this.search_params = function(search, filter)\n  {\n    var n, url = {}, mods_arr = [],\n      mods = this.env.search_mods,\n      mbox = this.env.mailbox;\n\n    if (!filter && this.gui_objects.search_filter)\n      filter = this.gui_objects.search_filter.value;\n\n    if (!search && this.gui_objects.qsearchbox)\n      search = this.gui_objects.qsearchbox.value;\n\n    if (filter)\n      url._filter = filter;\n\n    if (search) {\n      url._q = search;\n\n      if (mods && this.message_list)\n        mods = mods[mbox] ? mods[mbox] : mods['*'];\n\n      if (mods) {\n        for (n in mods)\n          mods_arr.push(n);\n        url._headers = mods_arr.join(',');\n      }\n    }\n\n    if (mbox)\n      url._mbox = mbox;\n\n    return url;\n  };\n\n  // reset quick-search form\n  this.reset_qsearch = function()\n  {\n    if (this.gui_objects.qsearchbox)\n      this.gui_objects.qsearchbox.value = '';\n\n    if (this.env.qsearch)\n      this.abort_request(this.env.qsearch);\n\n    this.env.qsearch = null;\n    this.env.search_request = null;\n    this.env.search_id = null;\n  };\n\n  this.sent_successfully = function(type, msg)\n  {\n    this.display_message(msg, type);\n    // before redirect we need to wait some time for Chrome (#1486177)\n    setTimeout(function(){ ref.list_mailbox(); }, 500);\n  };\n\n\n  /*********************************************************/\n  /*********     keyboard live-search methods      *********/\n  /*********************************************************/\n\n  // handler for keyboard events on address-fields\n  this.ksearch_keydown = function(e, obj, props)\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    var highlight,\n      key = rcube_event.get_keycode(e),\n      mod = rcube_event.get_modifier(e);\n\n    switch (key) {\n      case 38:  // arrow up\n      case 40:  // arrow down\n        if (!this.ksearch_visible())\n          break;\n\n        var dir = key==38 ? 1 : 0;\n\n        highlight = document.getElementById('rcmksearchSelected');\n        if (!highlight)\n          highlight = this.ksearch_pane.__ul.firstChild;\n\n        if (highlight)\n          this.ksearch_select(dir ? highlight.previousSibling : highlight.nextSibling);\n\n        return rcube_event.cancel(e);\n\n      case 9:   // tab\n        if (mod == SHIFT_KEY || !this.ksearch_visible()) {\n          this.ksearch_hide();\n          return;\n        }\n\n      case 13:  // enter\n        if (!this.ksearch_visible())\n          return false;\n\n        // insert selected address and hide ksearch pane\n        this.insert_recipient(this.ksearch_selected);\n        this.ksearch_hide();\n\n        return rcube_event.cancel(e);\n\n      case 27:  // escape\n        this.ksearch_hide();\n        return;\n\n      case 37:  // left\n      case 39:  // right\n        if (mod != SHIFT_KEY)\n          return;\n    }\n\n    // start timer\n    this.ksearch_timer = setTimeout(function(){ ref.ksearch_get_results(props); }, 200);\n    this.ksearch_input = obj;\n\n    return true;\n  };\n\n  this.ksearch_visible = function()\n  {\n    return (this.ksearch_selected !== null && this.ksearch_selected !== undefined && this.ksearch_value);\n  };\n\n  this.ksearch_select = function(node)\n  {\n    var current = $('#rcmksearchSelected');\n    if (current[0] && node) {\n      current.removeAttr('id').removeClass('selected');\n    }\n\n    if (node) {\n      $(node).attr('id', 'rcmksearchSelected').addClass('selected');\n      this.ksearch_selected = node._rcm_id;\n    }\n  };\n\n  this.insert_recipient = function(id)\n  {\n    if (id === null || !this.env.contacts[id] || !this.ksearch_input)\n      return;\n\n    // get cursor pos\n    var inp_value = this.ksearch_input.value,\n      cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.ksearch_value, cpos),\n      trigger = false,\n      insert = '',\n      // replace search string with full address\n      pre = inp_value.substring(0, p),\n      end = inp_value.substring(p+this.ksearch_value.length, inp_value.length);\n\n    this.ksearch_destroy();\n\n    // insert all members of a group\n    if (typeof this.env.contacts[id] === 'object' && this.env.contacts[id].id) {\n      insert += this.env.contacts[id].name + this.env.recipients_delimiter;\n      this.group2expand[this.env.contacts[id].id] = $.extend({ input: this.ksearch_input }, this.env.contacts[id]);\n      this.http_request('mail/group-expand', {_source: this.env.contacts[id].source, _gid: this.env.contacts[id].id}, false);\n    }\n    else if (typeof this.env.contacts[id] === 'string') {\n      insert = this.env.contacts[id] + this.env.recipients_delimiter;\n      trigger = true;\n    }\n\n    this.ksearch_input.value = pre + insert + end;\n\n    // set caret to insert pos\n    cpos = p+insert.length;\n    if (this.ksearch_input.setSelectionRange)\n      this.ksearch_input.setSelectionRange(cpos, cpos);\n\n    if (trigger)\n      this.triggerEvent('autocomplete_insert', { field:this.ksearch_input, insert:insert });\n  };\n\n  this.replace_group_recipients = function(id, recipients)\n  {\n    if (this.group2expand[id]) {\n      this.group2expand[id].input.value = this.group2expand[id].input.value.replace(this.group2expand[id].name, recipients);\n      this.triggerEvent('autocomplete_insert', { field:this.group2expand[id].input, insert:recipients });\n      this.group2expand[id] = null;\n    }\n  };\n\n  // address search processor\n  this.ksearch_get_results = function(props)\n  {\n    var inp_value = this.ksearch_input ? this.ksearch_input.value : null;\n\n    if (inp_value === null)\n      return;\n\n    if (this.ksearch_pane && this.ksearch_pane.is(\":visible\"))\n      this.ksearch_pane.hide();\n\n    // get string from current cursor pos to last comma\n    var cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.env.recipients_separator, cpos-1),\n      q = inp_value.substring(p+1, cpos),\n      min = this.env.autocomplete_min_length,\n      ac = this.ksearch_data;\n\n    // trim query string\n    q = $.trim(q);\n\n    // Don't (re-)search if the last results are still active\n    if (q == this.ksearch_value)\n      return;\n\n    this.ksearch_destroy();\n\n    if (q.length && q.length < min) {\n      if (!this.ksearch_info) {\n        this.ksearch_info = this.display_message(\n          this.get_label('autocompletechars').replace('$min', min));\n      }\n      return;\n    }\n\n    var old_value = this.ksearch_value;\n    this.ksearch_value = q;\n\n    // ...string is empty\n    if (!q.length)\n      return;\n\n    // ...new search value contains old one and previous search was not finished or its result was empty\n    if (old_value && old_value.length && q.indexOf(old_value) == 0 && (!ac || ac.num <= 0) && this.env.contacts && !this.env.contacts.length)\n      return;\n\n    var i, lock, source, xhr, reqid = new Date().getTime(),\n      post_data = {_search: q, _id: reqid},\n      threads = props && props.threads ? props.threads : 1,\n      sources = props && props.sources ? props.sources : [],\n      action = props && props.action ? props.action : 'mail/autocomplete';\n\n    this.ksearch_data = {id: reqid, sources: sources.slice(), action: action,\n      locks: [], requests: [], num: sources.length};\n\n    for (i=0; i<threads; i++) {\n      source = this.ksearch_data.sources.shift();\n      if (threads > 1 && source === undefined)\n        break;\n\n      post_data._source = source ? source : '';\n      lock = this.display_message(this.get_label('searching'), 'loading');\n      xhr = this.http_post(action, post_data, lock);\n\n      this.ksearch_data.locks.push(lock);\n      this.ksearch_data.requests.push(xhr);\n    }\n  };\n\n  this.ksearch_query_results = function(results, search, reqid)\n  {\n    // search stopped in meantime?\n    if (!this.ksearch_value)\n      return;\n\n    // ignore this outdated search response\n    if (this.ksearch_input && search != this.ksearch_value)\n      return;\n\n    // display search results\n    var i, len, ul, li, text, init,\n      value = this.ksearch_value,\n      data = this.ksearch_data,\n      maxlen = this.env.autocomplete_max ? this.env.autocomplete_max : 15;\n\n    // create results pane if not present\n    if (!this.ksearch_pane) {\n      ul = $('<ul>');\n      this.ksearch_pane = $('<div>').attr('id', 'rcmKSearchpane')\n        .css({ position:'absolute', 'z-index':30000 }).append(ul).appendTo(document.body);\n      this.ksearch_pane.__ul = ul[0];\n    }\n\n    ul = this.ksearch_pane.__ul;\n\n    // remove all search results or add to existing list if parallel search\n    if (reqid && this.ksearch_pane.data('reqid') == reqid) {\n      maxlen -= ul.childNodes.length;\n    }\n    else {\n      this.ksearch_pane.data('reqid', reqid);\n      init = 1;\n      // reset content\n      ul.innerHTML = '';\n      this.env.contacts = [];\n      // move the results pane right under the input box\n      var pos = $(this.ksearch_input).offset();\n      this.ksearch_pane.css({ left:pos.left+'px', top:(pos.top + this.ksearch_input.offsetHeight)+'px', display: 'none'});\n    }\n\n    // add each result line to list\n    if (results && (len = results.length)) {\n      for (i=0; i < len && maxlen > 0; i++) {\n        text = typeof results[i] === 'object' ? results[i].name : results[i];\n        li = document.createElement('LI');\n        li.innerHTML = text.replace(new RegExp('('+RegExp.escape(value)+')', 'ig'), '##$1%%').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/##([^%]+)%%/g, '<b>$1</b>');\n        li.onmouseover = function(){ ref.ksearch_select(this); };\n        li.onmouseup = function(){ ref.ksearch_click(this) };\n        li._rcm_id = this.env.contacts.length + i;\n        ul.appendChild(li);\n        maxlen -= 1;\n      }\n    }\n\n    if (ul.childNodes.length) {\n      this.ksearch_pane.show();\n      // select the first\n      if (!this.env.contacts.length) {\n        $('li:first', ul).attr('id', 'rcmksearchSelected').addClass('selected');\n        this.ksearch_selected = 0;\n      }\n    }\n\n    if (len)\n      this.env.contacts = this.env.contacts.concat(results);\n\n    // run next parallel search\n    if (data.id == reqid) {\n      data.num--;\n      if (maxlen > 0 && data.sources.length) {\n        var lock, xhr, source = data.sources.shift(), post_data;\n        if (source) {\n          post_data = {_search: value, _id: reqid, _source: source};\n          lock = this.display_message(this.get_label('searching'), 'loading');\n          xhr = this.http_post(data.action, post_data, lock);\n\n          this.ksearch_data.locks.push(lock);\n          this.ksearch_data.requests.push(xhr);\n        }\n      }\n      else if (!maxlen) {\n        if (!this.ksearch_msg)\n          this.ksearch_msg = this.display_message(this.get_label('autocompletemore'));\n        // abort pending searches\n        this.ksearch_abort();\n      }\n    }\n  };\n\n  this.ksearch_click = function(node)\n  {\n    if (this.ksearch_input)\n      this.ksearch_input.focus();\n\n    this.insert_recipient(node._rcm_id);\n    this.ksearch_hide();\n  };\n\n  this.ksearch_blur = function()\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    this.ksearch_input = null;\n    this.ksearch_hide();\n  };\n\n  this.ksearch_hide = function()\n  {\n    this.ksearch_selected = null;\n    this.ksearch_value = '';\n\n    if (this.ksearch_pane)\n      this.ksearch_pane.hide();\n\n    this.ksearch_destroy();\n  };\n\n  // Clears autocomplete data/requests\n  this.ksearch_destroy = function()\n  {\n    this.ksearch_abort();\n\n    if (this.ksearch_info)\n      this.hide_message(this.ksearch_info);\n\n    if (this.ksearch_msg)\n      this.hide_message(this.ksearch_msg);\n\n    this.ksearch_data = null;\n    this.ksearch_info = null;\n    this.ksearch_msg = null;\n  }\n\n  // Aborts pending autocomplete requests\n  this.ksearch_abort = function()\n  {\n    var i, len, ac = this.ksearch_data;\n\n    if (!ac)\n      return;\n\n    for (i=0, len=ac.locks.length; i<len; i++)\n      this.abort_request({request: ac.requests[i], lock: ac.locks[i]});\n  };\n\n\n  /*********************************************************/\n  /*********         address book methods          *********/\n  /*********************************************************/\n\n  this.contactlist_keypress = function(list)\n  {\n    if (list.key_pressed == list.DELETE_KEY)\n      this.command('delete');\n  };\n\n  this.contactlist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n\n    var n, id, sid, ref = this, writable = false,\n      source = this.env.source ? this.env.address_sources[this.env.source] : null;\n\n    if (id = list.get_single_selection())\n      this.preview_timer = setTimeout(function(){ ref.load_contact(id, 'show'); }, 200);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n\n    // no source = search result, we'll need to detect if any of\n    // selected contacts are in writable addressbook to enable edit/delete\n    if (list.selection.length) {\n      if (!source) {\n        for (n in list.selection) {\n          sid = String(list.selection[n]).replace(/^[^-]+-/, '');\n          if (sid && this.env.address_sources[sid] && !this.env.address_sources[sid].readonly) {\n            writable = true;\n            break;\n          }\n        }\n      }\n      else {\n        writable = !source.readonly;\n      }\n    }\n\n    // if a group is currently selected, and there is at least one contact selected\n    // thend we can enable the group-remove-selected command\n    this.enable_command('group-remove-selected', this.env.group && list.selection.length > 0);\n    this.enable_command('compose', this.env.group || list.selection.length > 0);\n    this.enable_command('edit', id && writable);\n    this.enable_command('delete', list.selection.length && writable);\n\n    return false;\n  };\n\n  this.list_contacts = function(src, group, page)\n  {\n    var folder, url = {},\n      target = window;\n\n    if (!src)\n      src = this.env.source;\n\n    if (page && this.current_page == page && src == this.env.source && group == this.env.group)\n      return false;\n\n    if (src != this.env.source) {\n      page = this.env.current_page = 1;\n      this.reset_qsearch();\n    }\n    else if (group != this.env.group)\n      page = this.env.current_page = 1;\n\n    if (this.env.search_id)\n      folder = 'S'+this.env.search_id;\n    else\n      folder = group ? 'G'+src+group : src;\n\n    this.select_folder(folder);\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // load contacts remotely\n    if (this.gui_objects.contactslist) {\n      this.list_contacts_remote(src, group, page);\n      return;\n    }\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      target = window.frames[this.env.contentframe];\n      url._framed = 1;\n    }\n\n    if (group)\n      url._gid = group;\n    if (page)\n      url._page = page;\n    if (src)\n      url._source = src;\n\n    // also send search request to get the correct listing\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.set_busy(true, 'loading');\n    this.location_href(url, target);\n  };\n\n  // send remote request to load contacts list\n  this.list_contacts_remote = function(src, group, page)\n  {\n    // clear message list first\n    this.list_contacts_clear();\n\n    // send request to server\n    var url = {}, lock = this.set_busy(true, 'loading');\n\n    if (src)\n      url._source = src;\n    if (page)\n      url._page = page;\n    if (group)\n      url._gid = group;\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.http_request(this.env.task == 'mail' ? 'list-contacts' : 'list', url, lock);\n  };\n\n  this.list_contacts_clear = function()\n  {\n    this.contact_list.clear(true);\n    this.show_contentframe(false);\n    this.enable_command('delete', false);\n    this.enable_command('compose', this.env.group ? true : false);\n  };\n\n  // load contact record\n  this.load_contact = function(cid, action, framed)\n  {\n    var url = {}, target = window;\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      url._framed = 1;\n      target = window.frames[this.env.contentframe];\n      this.show_contentframe(true);\n\n      // load dummy content\n      if (!cid) {\n        // unselect selected row(s)\n        this.contact_list.clear_selection();\n        this.enable_command('delete', 'compose', false);\n      }\n    }\n    else if (framed)\n      return false;\n\n    if (action && (cid || action=='add') && !this.drag_active) {\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      url._action = action;\n      url._source = this.env.source;\n      url._cid = cid;\n\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  // add/delete member to/from the group\n  this.group_member_change = function(what, cid, source, gid)\n  {\n    what = what == 'add' ? 'add' : 'del';\n    var label = this.get_label(what == 'add' ? 'addingmember' : 'removingmember'),\n      lock = this.display_message(label, 'loading'),\n      post_data = {_cid: cid, _source: source, _gid: gid};\n\n    this.http_post('group-'+what+'members', post_data, lock);\n  };\n\n  // copy a contact to the specified target (group or directory)\n  this.copy_contact = function(cid, to)\n  {\n    if (!cid)\n      cid = this.contact_list.get_selection().join(',');\n\n    if (to.type == 'group' && to.source == this.env.source)\n      this.group_member_change('add', cid, to.source, to.id);\n    else if (to.type == 'group' && !this.env.address_sources[to.source].readonly) {\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: to.source, _togid: to.id,\n          _gid: (this.env.group ? this.env.group : '')};\n\n      this.http_post('copy', post_data, lock);\n    }\n    else if (to.id != this.env.source && cid && this.env.address_sources[to.id] && !this.env.address_sources[to.id].readonly) {\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: to.id,\n          _gid: (this.env.group ? this.env.group : '')};\n\n      this.http_post('copy', post_data, lock);\n    }\n  };\n\n  this.delete_contacts = function()\n  {\n    var selection = this.contact_list.get_selection(),\n      undelete = this.env.source && this.env.address_sources[this.env.source].undelete;\n\n    // exit if no mailbox specified or if selection is empty\n    if (!(selection.length || this.env.cid) || (!undelete && !confirm(this.get_label('deletecontactconfirm'))))\n      return;\n\n    var id, n, a_cids = [],\n      post_data = {_source: this.env.source, _from: (this.env.action ? this.env.action : '')},\n      lock = this.display_message(this.get_label('contactdeleting'), 'loading');\n\n    if (this.env.cid)\n      a_cids.push(this.env.cid);\n    else {\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        a_cids.push(id);\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n\n      // hide content frame if we delete the currently displayed contact\n      if (selection.length == 1)\n        this.show_contentframe(false);\n    }\n\n    post_data._cid = a_cids.join(',');\n\n    if (this.env.group)\n      post_data._gid = this.env.group;\n\n    // also send search request to get the right records from the next page\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    // send request to server\n    this.http_post('delete', post_data, lock)\n\n    return true;\n  };\n\n  // update a contact record in the list\n  this.update_contact_row = function(cid, cols_arr, newcid, source)\n  {\n    var c, row, list = this.contact_list;\n\n    cid = this.html_identifier(cid);\n\n    // when in searching mode, concat cid with the source name\n    if (!list.rows[cid]) {\n      cid = cid+'-'+source;\n      if (newcid)\n        newcid = newcid+'-'+source;\n    }\n\n    if (list.rows[cid] && (row = list.rows[cid].obj)) {\n      for (c=0; c<cols_arr.length; c++)\n        if (row.cells[c])\n          $(row.cells[c]).html(cols_arr[c]);\n\n      // cid change\n      if (newcid) {\n        newcid = this.html_identifier(newcid);\n        row.id = 'rcmrow' + newcid;\n        list.remove_row(cid);\n        list.init_row(row);\n        list.selection[0] = newcid;\n        row.style.display = '';\n      }\n    }\n  };\n\n  // add row to contacts list\n  this.add_contact_row = function(cid, cols, classes)\n  {\n    if (!this.gui_objects.contactslist)\n      return false;\n\n    var c, col, list = this.contact_list,\n      row = document.createElement('tr');\n\n    row.id = 'rcmrow'+this.html_identifier(cid);\n    row.className = 'contact ' + (classes || '');\n\n    if (list.in_selection(cid))\n      row.className += ' selected';\n\n    // add each submitted col\n    for (c in cols) {\n      col = document.createElement('td');\n      col.className = String(c).toLowerCase();\n      col.innerHTML = cols[c];\n      row.appendChild(col);\n    }\n\n    list.insert_row(row);\n\n    this.enable_command('export', list.rowcount > 0);\n  };\n\n  this.init_contact_form = function()\n  {\n    var ref = this, col;\n\n    this.set_photo_actions($('#ff_photo').val());\n\n    for (col in this.env.coltypes)\n      this.init_edit_field(col, null);\n\n    $('.contactfieldgroup .row a.deletebutton').click(function() {\n      ref.delete_edit_field(this);\n      return false;\n    });\n\n    $('select.addfieldmenu').change(function(e) {\n      ref.insert_edit_field($(this).val(), $(this).attr('rel'), this);\n      this.selectedIndex = 0;\n    });\n\n    // enable date pickers on date fields\n    if ($.datepicker && this.env.date_format) {\n      $.datepicker.setDefaults({\n        dateFormat: this.env.date_format,\n        changeMonth: true,\n        changeYear: true,\n        yearRange: '-100:+10',\n        showOtherMonths: true,\n        selectOtherMonths: true,\n        onSelect: function(dateText) { $(this).focus().val(dateText) }\n      });\n      $('input.datepicker').datepicker();\n    }\n\n    $(\"input[type='text']:visible\").first().focus();\n  };\n\n  this.group_create = function()\n  {\n    this.add_input_row('contactgroup');\n  };\n\n  this.group_rename = function()\n  {\n    if (!this.env.group || !this.gui_objects.folderlist)\n      return;\n\n    if (!this.name_input) {\n      this.enable_command('list', 'listgroup', false);\n      this.name_input = $('<input>').attr('type', 'text').val(this.env.contactgroups['G'+this.env.source+this.env.group].name);\n      this.name_input.bind('keydown', function(e){ return rcmail.add_input_keydown(e); });\n      this.env.group_renaming = true;\n\n      var link, li = this.get_folder_li(this.env.source+this.env.group, 'rcmliG');\n      if (li && (link = li.firstChild)) {\n        $(link).hide().before(this.name_input);\n      }\n    }\n\n    this.name_input.select().focus();\n  };\n\n  this.group_delete = function()\n  {\n    if (this.env.group && confirm(this.get_label('deletegroupconfirm'))) {\n      var lock = this.set_busy(true, 'groupdeleting');\n      this.http_post('group-delete', {_source: this.env.source, _gid: this.env.group}, lock);\n    }\n  };\n\n  // callback from server upon group-delete command\n  this.remove_group_item = function(prop)\n  {\n    var li, key = 'G'+prop.source+prop.id;\n    if ((li = this.get_folder_li(key))) {\n      this.triggerEvent('group_delete', { source:prop.source, id:prop.id, li:li });\n\n      li.parentNode.removeChild(li);\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n    }\n\n    this.list_contacts(prop.source, 0);\n  };\n\n  // @TODO: maybe it would be better to use popup instead of inserting input to the list?\n  this.add_input_row = function(type)\n  {\n    if (!this.gui_objects.folderlist)\n      return;\n\n    if (!this.name_input) {\n      this.name_input = $('<input>').attr('type', 'text').data('tt', type);\n      this.name_input.bind('keydown', function(e){ return rcmail.add_input_keydown(e); });\n      this.name_input_li = $('<li>').addClass(type).append(this.name_input);\n\n      var li = type == 'contactsearch' ? $('li:last', this.gui_objects.folderlist) : this.get_folder_li(this.env.source);\n      this.name_input_li.insertAfter(li);\n    }\n\n    this.name_input.select().focus();\n  };\n\n  //remove selected contacts from current active group\n  this.group_remove_selected = function()\n  {\n    ref.http_post('group-delmembers', {_cid: this.contact_list.selection,\n      _source: this.env.source, _gid: this.env.group});\n  };\n\n  //callback after deleting contact(s) from current group\n  this.remove_group_contacts = function(props)\n  {\n    if('undefined' != typeof this.env.group && (this.env.group === props.gid)){\n      var n, selection = this.contact_list.get_selection();\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n    }\n  }\n\n  // handler for keyboard events on the input field\n  this.add_input_keydown = function(e)\n  {\n    var key = rcube_event.get_keycode(e),\n      input = $(e.target), itype = input.data('tt');\n\n    // enter\n    if (key == 13) {\n      var newname = input.val();\n\n      if (newname) {\n        var lock = this.set_busy(true, 'loading');\n\n        if (itype == 'contactsearch')\n          this.http_post('search-create', {_search: this.env.search_request, _name: newname}, lock);\n        else if (this.env.group_renaming)\n          this.http_post('group-rename', {_source: this.env.source, _gid: this.env.group, _name: newname}, lock);\n        else\n          this.http_post('group-create', {_source: this.env.source, _name: newname}, lock);\n      }\n      return false;\n    }\n    // escape\n    else if (key == 27)\n      this.reset_add_input();\n\n    return true;\n  };\n\n  this.reset_add_input = function()\n  {\n    if (this.name_input) {\n      if (this.env.group_renaming) {\n        var li = this.name_input.parent();\n        li.children().last().show();\n        this.env.group_renaming = false;\n      }\n\n      this.name_input.remove();\n\n      if (this.name_input_li)\n        this.name_input_li.remove();\n\n      this.name_input = this.name_input_li = null;\n    }\n\n    this.enable_command('list', 'listgroup', true);\n  };\n\n  // callback for creating a new contact group\n  this.insert_contact_group = function(prop)\n  {\n    this.reset_add_input();\n\n    prop.type = 'group';\n    var key = 'G'+prop.source+prop.id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.id)\n        .click(function() { return rcmail.command('listgroup', prop, this); })\n        .html(prop.name),\n      li = $('<li>').attr({id: 'rcmli'+this.html_identifier(key), 'class': 'contactgroup'})\n        .append(link);\n\n    this.env.contactfolders[key] = this.env.contactgroups[key] = prop;\n    this.add_contact_group_row(prop, li);\n\n    this.triggerEvent('group_insert', { id:prop.id, source:prop.source, name:prop.name, li:li[0] });\n  };\n\n  // callback for renaming a contact group\n  this.update_contact_group = function(prop)\n  {\n    this.reset_add_input();\n\n    var key = 'G'+prop.source+prop.id,\n      li = this.get_folder_li(key),\n      link;\n\n    // group ID has changed, replace link node and identifiers\n    if (li && prop.newid) {\n      var newkey = 'G'+prop.source+prop.newid,\n        newprop = $.extend({}, prop);;\n\n      li.id = 'rcmli' + this.html_identifier(newkey);\n      this.env.contactfolders[newkey] = this.env.contactfolders[key];\n      this.env.contactfolders[newkey].id = prop.newid;\n      this.env.group = prop.newid;\n\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n\n      newprop.id = prop.newid;\n      newprop.type = 'group';\n\n      link = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.newid)\n        .click(function() { return rcmail.command('listgroup', newprop, this); })\n        .html(prop.name);\n      $(li).children().replaceWith(link);\n    }\n    // update displayed group name\n    else if (li && (link = li.firstChild) && link.tagName.toLowerCase() == 'a')\n      link.innerHTML = prop.name;\n\n    this.env.contactfolders[key].name = this.env.contactgroups[key].name = prop.name;\n    this.add_contact_group_row(prop, $(li), true);\n\n    this.triggerEvent('group_update', { id:prop.id, source:prop.source, name:prop.name, li:li[0], newid:prop.newid });\n  };\n\n  // add contact group row to the list, with sorting\n  this.add_contact_group_row = function(prop, li, reloc)\n  {\n    var row, name = prop.name.toUpperCase(),\n      sibling = this.get_folder_li(prop.source),\n      prefix = 'rcmliG' + this.html_identifier(prop.source);\n\n    // When renaming groups, we need to remove it from DOM and insert it in the proper place\n    if (reloc) {\n      row = li.clone(true);\n      li.remove();\n    }\n    else\n      row = li;\n\n    $('li[id^=\"'+prefix+'\"]', this.gui_objects.folderlist).each(function(i, elem) {\n      if (name >= $(this).text().toUpperCase())\n        sibling = elem;\n      else\n        return false;\n    });\n\n    row.insertAfter(sibling);\n  };\n\n  this.update_group_commands = function()\n  {\n    var source = this.env.source != '' ? this.env.address_sources[this.env.source] : null;\n    this.enable_command('group-create', (source && source.groups && !source.readonly));\n    this.enable_command('group-rename', 'group-delete', (source && source.groups && this.env.group && !source.readonly));\n  };\n\n  this.init_edit_field = function(col, elem)\n  {\n    var label = this.env.coltypes[col].label;\n\n    if (!elem)\n      elem = $('.ff_' + col);\n\n    if (label)\n      elem.placeholder(label);\n  };\n\n  this.insert_edit_field = function(col, section, menu)\n  {\n    // just make pre-defined input field visible\n    var elem = $('#ff_'+col);\n    if (elem.length) {\n      elem.show().focus();\n      $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n    }\n    else {\n      var lastelem = $('.ff_'+col),\n        appendcontainer = $('#contactsection'+section+' .contactcontroller'+col);\n\n      if (!appendcontainer.length) {\n        var sect = $('#contactsection'+section),\n          lastgroup = $('.contactfieldgroup', sect).last();\n        appendcontainer = $('<fieldset>').addClass('contactfieldgroup contactcontroller'+col);\n        if (lastgroup.length)\n          appendcontainer.insertAfter(lastgroup);\n        else\n          sect.prepend(appendcontainer);\n      }\n\n      if (appendcontainer.length && appendcontainer.get(0).nodeName == 'FIELDSET') {\n        var input, colprop = this.env.coltypes[col],\n          row = $('<div>').addClass('row'),\n          cell = $('<div>').addClass('contactfieldcontent data'),\n          label = $('<div>').addClass('contactfieldlabel label');\n\n        if (colprop.subtypes_select)\n          label.html(colprop.subtypes_select);\n        else\n          label.html(colprop.label);\n\n        var name_suffix = colprop.limit != 1 ? '[]' : '';\n        if (colprop.type == 'text' || colprop.type == 'date') {\n          input = $('<input>')\n            .addClass('ff_'+col)\n            .attr({type: 'text', name: '_'+col+name_suffix, size: colprop.size})\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n\n          if (colprop.type == 'date' && $.datepicker)\n            input.datepicker();\n        }\n        else if (colprop.type == 'textarea') {\n          input = $('<textarea>')\n            .addClass('ff_'+col)\n            .attr({ name: '_'+col+name_suffix, cols:colprop.size, rows:colprop.rows })\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n        }\n        else if (colprop.type == 'composite') {\n          var childcol, cp, first, templ, cols = [], suffices = [];\n          // read template for composite field order\n          if ((templ = this.env[col+'_template'])) {\n            for (var j=0; j < templ.length; j++) {\n              cols.push(templ[j][1]);\n              suffices.push(templ[j][2]);\n            }\n          }\n          else {  // list fields according to appearance in colprop\n            for (childcol in colprop.childs)\n              cols.push(childcol);\n          }\n\n          for (var i=0; i < cols.length; i++) {\n            childcol = cols[i];\n            cp = colprop.childs[childcol];\n            input = $('<input>')\n              .addClass('ff_'+childcol)\n              .attr({ type: 'text', name: '_'+childcol+name_suffix, size: cp.size })\n              .appendTo(cell);\n            cell.append(suffices[i] || \" \");\n            this.init_edit_field(childcol, input);\n            if (!first) first = input;\n          }\n          input = first;  // set focus to the first of this composite fields\n        }\n        else if (colprop.type == 'select') {\n          input = $('<select>')\n            .addClass('ff_'+col)\n            .attr('name', '_'+col+name_suffix)\n            .appendTo(cell);\n\n          var options = input.attr('options');\n          options[options.length] = new Option('---', '');\n          if (colprop.options)\n            $.each(colprop.options, function(i, val){ options[options.length] = new Option(val, i); });\n        }\n\n        if (input) {\n          var delbutton = $('<a href=\"#del\"></a>')\n            .addClass('contactfieldbutton deletebutton')\n            .attr({title: this.get_label('delete'), rel: col})\n            .html(this.env.delbutton)\n            .click(function(){ ref.delete_edit_field(this); return false })\n            .appendTo(cell);\n\n          row.append(label).append(cell).appendTo(appendcontainer.show());\n          input.first().focus();\n\n          // disable option if limit reached\n          if (!colprop.count) colprop.count = 0;\n          if (++colprop.count == colprop.limit && colprop.limit)\n            $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n        }\n      }\n    }\n  };\n\n  this.delete_edit_field = function(elem)\n  {\n    var col = $(elem).attr('rel'),\n      colprop = this.env.coltypes[col],\n      fieldset = $(elem).parents('fieldset.contactfieldgroup'),\n      addmenu = fieldset.parent().find('select.addfieldmenu');\n\n    // just clear input but don't hide the last field\n    if (--colprop.count <= 0 && colprop.visible)\n      $(elem).parent().children('input').val('').blur();\n    else {\n      $(elem).parents('div.row').remove();\n      // hide entire fieldset if no more rows\n      if (!fieldset.children('div.row').length)\n        fieldset.hide();\n    }\n\n    // enable option in add-field selector or insert it if necessary\n    if (addmenu.length) {\n      var option = addmenu.children('option[value=\"'+col+'\"]');\n      if (option.length)\n        option.prop('disabled', false);\n      else\n        option = $('<option>').attr('value', col).html(colprop.label).appendTo(addmenu);\n      addmenu.show();\n    }\n  };\n\n  this.upload_contact_photo = function(form)\n  {\n    if (form && form.elements._photo.value) {\n      this.async_upload_form(form, 'upload-photo', function(e) {\n        rcmail.set_busy(false, null, rcmail.file_upload_id);\n      });\n\n      // display upload indicator\n      this.file_upload_id = this.set_busy(true, 'uploading');\n    }\n  };\n\n  this.replace_contact_photo = function(id)\n  {\n    var img_src = id == '-del-' ? this.env.photo_placeholder :\n      this.env.comm_path + '&_action=photo&_source=' + this.env.source + '&_cid=' + this.env.cid + '&_photo=' + id;\n\n    this.set_photo_actions(id);\n    $(this.gui_objects.contactphoto).children('img').attr('src', img_src);\n  };\n\n  this.photo_upload_end = function()\n  {\n    this.set_busy(false, null, this.file_upload_id);\n    delete this.file_upload_id;\n  };\n\n  this.set_photo_actions = function(id)\n  {\n    var n, buttons = this.buttons['upload-photo'];\n    for (n=0; buttons && n < buttons.length; n++)\n      $('a#'+buttons[n].id).html(this.get_label(id == '-del-' ? 'addphoto' : 'replacephoto'));\n\n    $('#ff_photo').val(id);\n    this.enable_command('upload-photo', this.env.coltypes.photo ? true : false);\n    this.enable_command('delete-photo', this.env.coltypes.photo && id != '-del-');\n  };\n\n  // load advanced search page\n  this.advanced_search = function()\n  {\n    var url = {_form: 1, _action: 'search'}, target = window;\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      url._framed = 1;\n      target = window.frames[this.env.contentframe];\n      this.contact_list.clear_selection();\n    }\n\n    this.location_href(url, target, true);\n\n    return true;\n  };\n\n  // unselect directory/group\n  this.unselect_directory = function()\n  {\n    this.select_folder('');\n    this.enable_command('search-delete', false);\n  };\n\n  // callback for creating a new saved search record\n  this.insert_saved_search = function(name, id)\n  {\n    this.reset_add_input();\n\n    var key = 'S'+id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', id)\n        .click(function() { return rcmail.command('listsearch', id, this); })\n        .html(name),\n      li = $('<li>').attr({id: 'rcmli' + this.html_identifier(key), 'class': 'contactsearch'})\n        .append(link),\n      prop = {name:name, id:id, li:li[0]};\n\n    this.add_saved_search_row(prop, li);\n    this.select_folder('S'+id);\n    this.enable_command('search-delete', true);\n    this.env.search_id = id;\n\n    this.triggerEvent('abook_search_insert', prop);\n  };\n\n  // add saved search row to the list, with sorting\n  this.add_saved_search_row = function(prop, li, reloc)\n  {\n    var row, sibling, name = prop.name.toUpperCase();\n\n    // When renaming groups, we need to remove it from DOM and insert it in the proper place\n    if (reloc) {\n      row = li.clone(true);\n      li.remove();\n    }\n    else\n      row = li;\n\n    $('li[class~=\"contactsearch\"]', this.gui_objects.folderlist).each(function(i, elem) {\n      if (!sibling)\n        sibling = this.previousSibling;\n\n      if (name >= $(this).text().toUpperCase())\n        sibling = elem;\n      else\n        return false;\n    });\n\n    if (sibling)\n      row.insertAfter(sibling);\n    else\n      row.appendTo(this.gui_objects.folderlist);\n  };\n\n  // creates an input for saved search name\n  this.search_create = function()\n  {\n    this.add_input_row('contactsearch');\n  };\n\n  this.search_delete = function()\n  {\n    if (this.env.search_request) {\n      var lock = this.set_busy(true, 'savedsearchdeleting');\n      this.http_post('search-delete', {_sid: this.env.search_id}, lock);\n    }\n  };\n\n  // callback from server upon search-delete command\n  this.remove_search_item = function(id)\n  {\n    var li, key = 'S'+id;\n    if ((li = this.get_folder_li(key))) {\n      this.triggerEvent('search_delete', { id:id, li:li });\n\n      li.parentNode.removeChild(li);\n    }\n\n    this.env.search_id = null;\n    this.env.search_request = null;\n    this.list_contacts_clear();\n    this.reset_qsearch();\n    this.enable_command('search-delete', 'search-create', false);\n  };\n\n  this.listsearch = function(id)\n  {\n    var folder, lock = this.set_busy(true, 'searching');\n\n    if (this.contact_list) {\n      this.list_contacts_clear();\n    }\n\n    this.reset_qsearch();\n    this.select_folder('S'+id);\n\n    // reset vars\n    this.env.current_page = 1;\n    this.http_request('search', {_sid: id}, lock);\n  };\n\n\n  /*********************************************************/\n  /*********        user settings methods          *********/\n  /*********************************************************/\n\n  // preferences section select and load options frame\n  this.section_select = function(list)\n  {\n    var id = list.get_single_selection(), target = window,\n      url = {_action: 'edit-prefs', _section: id};\n\n    if (id) {\n      if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n        url._framed = 1;\n        target = window.frames[this.env.contentframe];\n      }\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  this.identity_select = function(list)\n  {\n    var id;\n    if (id = list.get_single_selection()) {\n      this.enable_command('delete', list.rowcount > 1 && this.env.identities_level < 2);\n      this.load_identity(id, 'edit-identity');\n    }\n  };\n\n  // load identity record\n  this.load_identity = function(id, action)\n  {\n    if (action == 'edit-identity' && (!id || id == this.env.iid))\n      return false;\n\n    var target = window,\n      url = {_action: action, _iid: id};\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      url._framed = 1;\n      target = window.frames[this.env.contentframe];\n      document.getElementById(this.env.contentframe).style.visibility = 'inherit';\n    }\n\n    if (action && (id || action == 'add-identity')) {\n      this.set_busy(true);\n      this.location_href(url, target);\n    }\n\n    return true;\n  };\n\n  this.delete_identity = function(id)\n  {\n    // exit if no identity is specified or if selection is empty\n    var selection = this.identity_list.get_selection();\n    if (!(selection.length || this.env.iid))\n      return;\n\n    if (!id)\n      id = this.env.iid ? this.env.iid : selection[0];\n\n    // submit request with appended token\n    if (confirm(this.get_label('deleteidentityconfirm')))\n      this.goto_url('delete-identity', { _iid: id, _token: this.env.request_token }, true);\n\n    return true;\n  };\n\n  this.update_identity_row = function(id, name, add)\n  {\n    var row, col, list = this.identity_list,\n      rid = this.html_identifier(id);\n\n    if (list.rows[rid] && (row = list.rows[rid].obj)) {\n      $(row.cells[0]).html(name);\n    }\n    else if (add) {\n      row = $('<tr>').attr('id', 'rcmrow'+rid).get(0);\n      col = $('<td>').addClass('mail').html(name).appendTo(row);\n      list.insert_row(row);\n      list.select(rid);\n    }\n  };\n\n\n  /*********************************************************/\n  /*********        folder manager methods         *********/\n  /*********************************************************/\n\n  this.init_subscription_list = function()\n  {\n    var p = this;\n    this.subscription_list = new rcube_list_widget(this.gui_objects.subscriptionlist,\n      {multiselect:false, draggable:true, keyboard:false, toggleselect:true});\n    this.subscription_list.addEventListener('select', function(o){ p.subscription_select(o); });\n    this.subscription_list.addEventListener('dragstart', function(o){ p.drag_active = true; });\n    this.subscription_list.addEventListener('dragend', function(o){ p.subscription_move_folder(o); });\n    this.subscription_list.row_init = function (row) {\n      row.obj.onmouseover = function() { p.focus_subscription(row.id); };\n      row.obj.onmouseout = function() { p.unfocus_subscription(row.id); };\n    };\n    this.subscription_list.init();\n    $('#mailboxroot')\n      .mouseover(function(){ p.focus_subscription(this.id); })\n      .mouseout(function(){ p.unfocus_subscription(this.id); })\n  };\n\n  this.focus_subscription = function(id)\n  {\n    var row, folder,\n      delim = RegExp.escape(this.env.delimiter),\n      reg = RegExp('['+delim+']?[^'+delim+']+$');\n\n    if (this.drag_active && this.env.mailbox && (row = document.getElementById(id)))\n      if (this.env.subscriptionrows[id] &&\n          (folder = this.env.subscriptionrows[id][0]) !== null\n      ) {\n        if (this.check_droptarget(folder) &&\n            !this.env.subscriptionrows[this.get_folder_row_id(this.env.mailbox)][2] &&\n            (folder != this.env.mailbox.replace(reg, '')) &&\n            (!folder.match(new RegExp('^'+RegExp.escape(this.env.mailbox+this.env.delimiter))))\n        ) {\n          this.env.dstfolder = folder;\n          $(row).addClass('droptarget');\n        }\n      }\n  };\n\n  this.unfocus_subscription = function(id)\n  {\n    var row = $('#'+id);\n\n    this.env.dstfolder = null;\n    if (this.env.subscriptionrows[id] && row[0])\n      row.removeClass('droptarget');\n    else\n      $(this.subscription_list.frame).removeClass('droptarget');\n  };\n\n  this.subscription_select = function(list)\n  {\n    var id, folder;\n\n    if (list && (id = list.get_single_selection()) &&\n        (folder = this.env.subscriptionrows['rcmrow'+id])\n    ) {\n      this.env.mailbox = folder[0];\n      this.show_folder(folder[0]);\n      this.enable_command('delete-folder', !folder[2]);\n    }\n    else {\n      this.env.mailbox = null;\n      this.show_contentframe(false);\n      this.enable_command('delete-folder', 'purge', false);\n    }\n  };\n\n  this.subscription_move_folder = function(list)\n  {\n    var delim = RegExp.escape(this.env.delimiter),\n      reg = RegExp('['+delim+']?[^'+delim+']+$');\n\n    if (this.env.mailbox && this.env.dstfolder !== null && (this.env.dstfolder != this.env.mailbox) &&\n        (this.env.dstfolder != this.env.mailbox.replace(reg, ''))\n    ) {\n      reg = new RegExp('[^'+delim+']*['+delim+']', 'g');\n      var basename = this.env.mailbox.replace(reg, ''),\n        newname = this.env.dstfolder === '' ? basename : this.env.dstfolder+this.env.delimiter+basename;\n\n      if (newname != this.env.mailbox) {\n        this.http_post('rename-folder', {_folder_oldname: this.env.mailbox, _folder_newname: newname}, this.set_busy(true, 'foldermoving'));\n        this.subscription_list.draglayer.hide();\n      }\n    }\n    this.drag_active = false;\n    this.unfocus_subscription(this.get_folder_row_id(this.env.dstfolder));\n  };\n\n  // tell server to create and subscribe a new mailbox\n  this.create_folder = function()\n  {\n    this.show_folder('', this.env.mailbox);\n  };\n\n  // delete a specific mailbox with all its messages\n  this.delete_folder = function(name)\n  {\n    var id = this.get_folder_row_id(name ? name : this.env.mailbox),\n      folder = this.env.subscriptionrows[id][0];\n\n    if (folder && confirm(this.get_label('deletefolderconfirm'))) {\n      var lock = this.set_busy(true, 'folderdeleting');\n      this.http_post('delete-folder', {_mbox: folder}, lock);\n    }\n  };\n\n  // Add folder row to the table and initialize it\n  this.add_folder_row = function (name, display_name, is_protected, subscribed, skip_init, class_name)\n  {\n    if (!this.gui_objects.subscriptionlist)\n      return false;\n\n    var row, n, i, tmp, tmp_name, folders, rowid, list = [], slist = [],\n      tbody = this.gui_objects.subscriptionlist.tBodies[0],\n      refrow = $('tr', tbody).get(1),\n      id = 'rcmrow'+((new Date).getTime());\n\n    if (!refrow) {\n      // Refresh page if we don't have a table row to clone\n      this.goto_url('folders');\n      return false;\n    }\n\n    // clone a table row if there are existing rows\n    row = $(refrow).clone(true);\n\n    // set ID, reset css class\n    row.attr('id', id);\n    row.attr('class', class_name);\n\n    // set folder name\n    row.find('td:first').html(display_name);\n\n    // update subscription checkbox\n    $('input[name=\"_subscribed[]\"]', row).val(name)\n      .prop({checked: subscribed ? true : false, disabled: is_protected ? true : false});\n\n    // add to folder/row-ID map\n    this.env.subscriptionrows[id] = [name, display_name, 0];\n\n    // sort folders, to find a place where to insert the row\n    folders = [];\n    $.each(this.env.subscriptionrows, function(k,v){ folders.push(v) });\n    folders.sort(function(a,b){ return a[0] < b[0] ? -1 : (a[0] > b[0] ? 1 : 0) });\n\n    for (n in folders) {\n      // protected folder\n      if (folders[n][2]) {\n        tmp_name = folders[n][0] + this.env.delimiter;\n        // prefix namespace cannot have subfolders (#1488349)\n        if (tmp_name == this.env.prefix_ns)\n          continue;\n        slist.push(folders[n][0]);\n        tmp = tmp_name;\n      }\n      // protected folder's child\n      else if (tmp && folders[n][0].indexOf(tmp) == 0)\n        slist.push(folders[n][0]);\n      // other\n      else {\n        list.push(folders[n][0]);\n        tmp = null;\n      }\n    }\n\n    // check if subfolder of a protected folder\n    for (n=0; n<slist.length; n++) {\n      if (name.indexOf(slist[n]+this.env.delimiter) == 0)\n        rowid = this.get_folder_row_id(slist[n]);\n    }\n\n    // find folder position after sorting\n    for (n=0; !rowid && n<list.length; n++) {\n      if (n && list[n] == name)\n        rowid = this.get_folder_row_id(list[n-1]);\n    }\n\n    // add row to the table\n    if (rowid)\n      $('#'+rowid).after(row);\n    else\n      row.appendTo(tbody);\n\n    // update list widget\n    this.subscription_list.clear_selection();\n    if (!skip_init)\n      this.init_subscription_list();\n\n    row = row.get(0);\n    if (row.scrollIntoView)\n      row.scrollIntoView();\n\n    return row;\n  };\n\n  // replace an existing table row with a new folder line (with subfolders)\n  this.replace_folder_row = function(oldfolder, newfolder, display_name, is_protected, class_name)\n  {\n    if (!this.gui_objects.subscriptionlist)\n      return false;\n\n    var i, n, len, name, dispname, oldrow, tmprow, row, level,\n      tbody = this.gui_objects.subscriptionlist.tBodies[0],\n      folders = this.env.subscriptionrows,\n      id = this.get_folder_row_id(oldfolder),\n      regex = new RegExp('^'+RegExp.escape(oldfolder)),\n      subscribed = $('input[name=\"_subscribed[]\"]', $('#'+id)).prop('checked'),\n      // find subfolders of renamed folder\n      list = this.get_subfolders(oldfolder);\n\n    // replace an existing table row\n    this._remove_folder_row(id);\n    row = $(this.add_folder_row(newfolder, display_name, is_protected, subscribed, true, class_name));\n\n    // detect tree depth change\n    if (len = list.length) {\n      level = (oldfolder.split(this.env.delimiter)).length - (newfolder.split(this.env.delimiter)).length;\n    }\n\n    // move subfolders to the new branch\n    for (n=0; n<len; n++) {\n      id = list[n];\n      name = this.env.subscriptionrows[id][0];\n      dispname = this.env.subscriptionrows[id][1];\n      oldrow = $('#'+id);\n      tmprow = oldrow.clone(true);\n      oldrow.remove();\n      row.after(tmprow);\n      row = tmprow;\n      // update folder index\n      name = name.replace(regex, newfolder);\n      $('input[name=\"_subscribed[]\"]', row).val(name);\n      this.env.subscriptionrows[id][0] = name;\n      // update the name if level is changed\n      if (level != 0) {\n        if (level > 0) {\n          for (i=level; i>0; i--)\n            dispname = dispname.replace(/^&nbsp;&nbsp;&nbsp;&nbsp;/, '');\n        }\n        else {\n          for (i=level; i<0; i++)\n            dispname = '&nbsp;&nbsp;&nbsp;&nbsp;' + dispname;\n        }\n        row.find('td:first').html(dispname);\n        this.env.subscriptionrows[id][1] = dispname;\n      }\n    }\n\n    // update list widget\n    this.init_subscription_list();\n  };\n\n  // remove the table row of a specific mailbox from the table\n  this.remove_folder_row = function(folder, subs)\n  {\n    var n, len, list = [], id = this.get_folder_row_id(folder);\n\n    // get subfolders if any\n    if (subs)\n      list = this.get_subfolders(folder);\n\n    // remove old row\n    this._remove_folder_row(id);\n\n    // remove subfolders\n    for (n=0, len=list.length; n<len; n++)\n      this._remove_folder_row(list[n]);\n  };\n\n  this._remove_folder_row = function(id)\n  {\n    this.subscription_list.remove_row(id.replace(/^rcmrow/, ''));\n    $('#'+id).remove();\n    delete this.env.subscriptionrows[id];\n  }\n\n  this.get_subfolders = function(folder)\n  {\n    var name, list = [],\n      regex = new RegExp('^'+RegExp.escape(folder)+RegExp.escape(this.env.delimiter)),\n      row = $('#'+this.get_folder_row_id(folder)).get(0);\n\n    while (row = row.nextSibling) {\n      if (row.id) {\n        name = this.env.subscriptionrows[row.id][0];\n        if (regex.test(name)) {\n          list.push(row.id);\n        }\n        else\n          break;\n      }\n    }\n\n    return list;\n  }\n\n  this.subscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('foldersubscribing'), 'loading');\n      this.http_post('subscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  this.unsubscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('folderunsubscribing'), 'loading');\n      this.http_post('unsubscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  // helper method to find a specific mailbox row ID\n  this.get_folder_row_id = function(folder)\n  {\n    var id, folders = this.env.subscriptionrows;\n    for (id in folders)\n      if (folders[id] && folders[id][0] == folder)\n        break;\n\n    return id;\n  };\n\n  // when user select a folder in manager\n  this.show_folder = function(folder, path, force)\n  {\n    var target = window,\n      url = '&_action=edit-folder&_mbox='+urlencode(folder);\n\n    if (path)\n      url += '&_path='+urlencode(path);\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      target = window.frames[this.env.contentframe];\n      url += '&_framed=1';\n    }\n\n    if (String(target.location.href).indexOf(url) >= 0 && !force)\n      this.show_contentframe(true);\n    else\n      this.location_href(this.env.comm_path+url, target, true);\n  };\n\n  // disables subscription checkbox (for protected folder)\n  this.disable_subscription = function(folder)\n  {\n    var id = this.get_folder_row_id(folder);\n    if (id)\n      $('input[name=\"_subscribed[]\"]', $('#'+id)).prop('disabled', true);\n  };\n\n  this.folder_size = function(folder)\n  {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('folder-size', {_mbox: folder}, lock);\n  };\n\n  this.folder_size_update = function(size)\n  {\n    $('#folder-size').replaceWith(size);\n  };\n\n\n  /*********************************************************/\n  /*********           GUI functionality           *********/\n  /*********************************************************/\n\n  var init_button = function(cmd, prop)\n  {\n    var elm = document.getElementById(prop.id);\n    if (!elm)\n      return;\n\n    var preload = false;\n    if (prop.type == 'image') {\n      elm = elm.parentNode;\n      preload = true;\n    }\n\n    elm._command = cmd;\n    elm._id = prop.id;\n    if (prop.sel) {\n      elm.onmousedown = function(e){ return rcmail.button_sel(this._command, this._id); };\n      elm.onmouseup = function(e){ return rcmail.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.sel;\n    }\n    if (prop.over) {\n      elm.onmouseover = function(e){ return rcmail.button_over(this._command, this._id); };\n      elm.onmouseout = function(e){ return rcmail.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.over;\n    }\n  };\n\n  // set event handlers on registered buttons\n  this.init_buttons = function()\n  {\n    for (var cmd in this.buttons) {\n      if (typeof cmd !== 'string')\n        continue;\n\n      for (var i=0; i<this.buttons[cmd].length; i++) {\n        init_button(cmd, this.buttons[cmd][i]);\n      }\n    }\n\n    // set active task button\n    this.set_button(this.task, 'sel');\n  };\n\n  // set button to a specific state\n  this.set_button = function(command, state)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (!obj)\n        continue;\n\n      // get default/passive setting of the button\n      if (button.type == 'image' && !button.status) {\n        button.pas = obj._original_src ? obj._original_src : obj.src;\n        // respect PNG fix on IE browsers\n        if (obj.runtimeStyle && obj.runtimeStyle.filter && obj.runtimeStyle.filter.match(/src=['\"]([^'\"]+)['\"]/))\n          button.pas = RegExp.$1;\n      }\n      else if (!button.status)\n        button.pas = String(obj.className);\n\n      // set image according to button state\n      if (button.type == 'image' && button[state]) {\n        button.status = state;\n        obj.src = button[state];\n      }\n      // set class name according to button state\n      else if (button[state] !== undefined) {\n        button.status = state;\n        obj.className = button[state];\n      }\n      // disable/enable input buttons\n      if (button.type == 'input') {\n        button.status = state;\n        obj.disabled = !state;\n      }\n    }\n  };\n\n  // display a specific alttext\n  this.set_alttext = function(command, label)\n  {\n    var n, button, obj, link, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (button.type == 'image' && obj) {\n        obj.setAttribute('alt', this.get_label(label));\n        if ((link = obj.parentNode) && link.tagName.toLowerCase() == 'a')\n          link.setAttribute('title', this.get_label(label));\n      }\n      else if (obj)\n        obj.setAttribute('title', this.get_label(label));\n    }\n  };\n\n  // mouse over button\n  this.button_over = function(command, id)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      if (button.id == id && button.status == 'act') {\n        obj = document.getElementById(button.id);\n        if (obj && button.over) {\n          if (button.type == 'image')\n            obj.src = button.over;\n          else\n            obj.className = button.over;\n        }\n      }\n    }\n  };\n\n  // mouse down on button\n  this.button_sel = function(command, id)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      if (button.id == id && button.status == 'act') {\n        obj = document.getElementById(button.id);\n        if (obj && button.sel) {\n          if (button.type == 'image')\n            obj.src = button.sel;\n          else\n            obj.className = button.sel;\n        }\n        this.buttons_sel[id] = command;\n      }\n    }\n  };\n\n  // mouse out of button\n  this.button_out = function(command, id)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      if (button.id == id && button.status == 'act') {\n        obj = document.getElementById(button.id);\n        if (obj && button.act) {\n          if (button.type == 'image')\n            obj.src = button.act;\n          else\n            obj.className = button.act;\n        }\n      }\n    }\n  };\n\n  // write to the document/window title\n  this.set_pagetitle = function(title)\n  {\n    if (title && document.title)\n      document.title = title;\n  };\n\n  // display a system message, list of types in common.css (below #message definition)\n  this.display_message = function(msg, type, timeout)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.display_message(msg, type, timeout);\n\n    if (!this.gui_objects.message) {\n      // save message in order to display after page loaded\n      if (type != 'loading')\n        this.pending_message = [msg, type, timeout];\n      return false;\n    }\n\n    type = type ? type : 'notice';\n\n    var ref = this,\n      key = this.html_identifier(msg),\n      date = new Date(),\n      id = type + date.getTime();\n\n    if (!timeout)\n      timeout = this.message_time * (type == 'error' || type == 'warning' ? 2 : 1);\n\n    if (type == 'loading') {\n      key = 'loading';\n      timeout = this.env.request_timeout * 1000;\n      if (!msg)\n        msg = this.get_label('loading');\n    }\n\n    // The same message is already displayed\n    if (this.messages[key]) {\n      // replace label\n      if (this.messages[key].obj)\n        this.messages[key].obj.html(msg);\n      // store label in stack\n      if (type == 'loading') {\n        this.messages[key].labels.push({'id': id, 'msg': msg});\n      }\n      // add element and set timeout\n      this.messages[key].elements.push(id);\n      setTimeout(function() { ref.hide_message(id, type == 'loading'); }, timeout);\n      return id;\n    }\n\n    // create DOM object and display it\n    var obj = $('<div>').addClass(type).html(msg).data('key', key),\n      cont = $(this.gui_objects.message).append(obj).show();\n\n    this.messages[key] = {'obj': obj, 'elements': [id]};\n\n    if (type == 'loading') {\n      this.messages[key].labels = [{'id': id, 'msg': msg}];\n    }\n    else {\n      obj.click(function() { return ref.hide_message(obj); });\n    }\n\n    this.triggerEvent('message', { message:msg, type:type, timeout:timeout, object:obj });\n\n    if (timeout > 0)\n      setTimeout(function() { ref.hide_message(id, type == 'loading'); }, timeout);\n    return id;\n  };\n\n  // make a message to disapear\n  this.hide_message = function(obj, fade)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.hide_message(obj, fade);\n\n    var k, n, i, msg, m = this.messages;\n\n    // Hide message by object, don't use for 'loading'!\n    if (typeof obj === 'object') {\n      $(obj)[fade?'fadeOut':'hide']();\n      msg = $(obj).data('key');\n      if (this.messages[msg])\n        delete this.messages[msg];\n    }\n    // Hide message by id\n    else {\n      for (k in m) {\n        for (n in m[k].elements) {\n          if (m[k] && m[k].elements[n] == obj) {\n            m[k].elements.splice(n, 1);\n            // hide DOM element if last instance is removed\n            if (!m[k].elements.length) {\n              m[k].obj[fade?'fadeOut':'hide']();\n              delete m[k];\n            }\n            // set pending action label for 'loading' message\n            else if (k == 'loading') {\n              for (i in m[k].labels) {\n                if (m[k].labels[i].id == obj) {\n                  delete m[k].labels[i];\n                }\n                else {\n                  msg = m[k].labels[i].msg;\n                }\n                m[k].obj.html(msg);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  // remove all messages immediately\n  this.clear_messages = function()\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.clear_messages();\n\n    var k, n, m = this.messages;\n\n    for (k in m)\n      for (n in m[k].elements)\n        if (m[k].obj)\n          m[k].obj.hide();\n\n    this.messages = {};\n  };\n\n  // enable/disable buttons for page shifting\n  this.set_page_buttons = function()\n  {\n    this.enable_command('nextpage', 'lastpage', (this.env.pagecount > this.env.current_page));\n    this.enable_command('previouspage', 'firstpage', (this.env.current_page > 1));\n  };\n\n  // mark a mailbox as selected and set environment variable\n  this.select_folder = function(name, prefix, encode)\n  {\n    if (this.gui_objects.folderlist) {\n      var current_li, target_li;\n\n      if ((current_li = $('li.selected', this.gui_objects.folderlist))) {\n        current_li.removeClass('selected').addClass('unfocused');\n      }\n      if ((target_li = this.get_folder_li(name, prefix, encode))) {\n        $(target_li).removeClass('unfocused').addClass('selected');\n      }\n\n      // trigger event hook\n      this.triggerEvent('selectfolder', { folder:name, prefix:prefix });\n    }\n  };\n\n  // adds a class to selected folder\n  this.mark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).addClass(class_name);\n  };\n\n  // adds a class to selected folder\n  this.unmark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).removeClass(class_name);\n  };\n\n  // helper method to find a folder list item\n  this.get_folder_li = function(name, prefix, encode)\n  {\n    if (!prefix)\n      prefix = 'rcmli';\n\n    if (this.gui_objects.folderlist) {\n      name = this.html_identifier(name, encode);\n      return document.getElementById(prefix+name);\n    }\n\n    return null;\n  };\n\n  // for reordering column array (Konqueror workaround)\n  // and for setting some message list global variables\n  this.set_message_coltypes = function(coltypes, repl, smart_col)\n  {\n    var list = this.message_list,\n      thead = list ? list.list.tHead : null,\n      cell, col, n, len, th, tr;\n\n    this.env.coltypes = coltypes;\n\n    // replace old column headers\n    if (thead) {\n      if (repl) {\n        th = document.createElement('thead');\n        tr = document.createElement('tr');\n\n        for (c=0, len=repl.length; c < len; c++) {\n          cell = document.createElement('td');\n          cell.innerHTML = repl[c].html;\n          if (repl[c].id) cell.id = repl[c].id;\n          if (repl[c].className) cell.className = repl[c].className;\n          tr.appendChild(cell);\n        }\n        th.appendChild(tr);\n        thead.parentNode.replaceChild(th, thead);\n        thead = th;\n      }\n\n      for (n=0, len=this.env.coltypes.length; n<len; n++) {\n        col = this.env.coltypes[n];\n        if ((cell = thead.rows[0].cells[n]) && (col == 'from' || col == 'to' || col == 'fromto')) {\n          cell.id = 'rcm'+col;\n          // if we have links for sorting, it's a bit more complicated...\n          if (cell.firstChild && cell.firstChild.tagName.toLowerCase()=='a') {\n            cell = cell.firstChild;\n            cell.onclick = function(){ return rcmail.command('sort', this.__col, this); };\n            cell.__col = col;\n          }\n          cell.innerHTML = this.get_label(col == 'fromto' ? smart_col : col);\n        }\n      }\n    }\n\n    this.env.subject_col = null;\n    this.env.flagged_col = null;\n    this.env.status_col = null;\n\n    if ((n = $.inArray('subject', this.env.coltypes)) >= 0) {\n      this.env.subject_col = n;\n      if (list)\n        list.subject_col = n;\n    }\n    if ((n = $.inArray('flag', this.env.coltypes)) >= 0)\n      this.env.flagged_col = n;\n    if ((n = $.inArray('status', this.env.coltypes)) >= 0)\n      this.env.status_col = n;\n\n    if (list)\n      list.init_header();\n  };\n\n  // replace content of row count display\n  this.set_rowcount = function(text, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    $(this.gui_objects.countdisplay).html(text);\n\n    // update page navigation buttons\n    this.set_page_buttons();\n  };\n\n  // replace content of mailboxname display\n  this.set_mailboxname = function(content)\n  {\n    if (this.gui_objects.mailboxname && content)\n      this.gui_objects.mailboxname.innerHTML = content;\n  };\n\n  // replace content of quota display\n  this.set_quota = function(content)\n  {\n    if (this.gui_objects.quotadisplay && content && content.type == 'text')\n      $(this.gui_objects.quotadisplay).html(content.percent+'%').attr('title', content.title);\n\n    this.triggerEvent('setquota', content);\n    this.env.quota_content = content;\n  };\n\n  // update the mailboxlist\n  this.set_unread_count = function(mbox, count, set_title, mark)\n  {\n    if (!this.gui_objects.mailboxlist)\n      return false;\n\n    this.env.unread_counts[mbox] = count;\n    this.set_unread_count_display(mbox, set_title);\n\n    if (mark)\n      this.mark_folder(mbox, mark, '', true);\n    else if (!count)\n      this.unmark_folder(mbox, 'recent', '', true);\n  };\n\n  // update the mailbox count display\n  this.set_unread_count_display = function(mbox, set_title)\n  {\n    var reg, link, text_obj, item, mycount, childcount, div;\n\n    if (item = this.get_folder_li(mbox, '', true)) {\n      mycount = this.env.unread_counts[mbox] ? this.env.unread_counts[mbox] : 0;\n      link = $(item).children('a').eq(0);\n      text_obj = link.children('span.unreadcount');\n      if (!text_obj.length && mycount)\n        text_obj = $('<span>').addClass('unreadcount').appendTo(link);\n      reg = /\\s+\\([0-9]+\\)$/i;\n\n      childcount = 0;\n      if ((div = item.getElementsByTagName('div')[0]) &&\n          div.className.match(/collapsed/)) {\n        // add children's counters\n        for (var k in this.env.unread_counts)\n          if (k.indexOf(mbox + this.env.delimiter) == 0)\n            childcount += this.env.unread_counts[k];\n      }\n\n      if (mycount && text_obj.length)\n        text_obj.html(this.env.unreadwrap.replace(/%[sd]/, mycount));\n      else if (text_obj.length)\n        text_obj.remove();\n\n      // set parent's display\n      reg = new RegExp(RegExp.escape(this.env.delimiter) + '[^' + RegExp.escape(this.env.delimiter) + ']+$');\n      if (mbox.match(reg))\n        this.set_unread_count_display(mbox.replace(reg, ''), false);\n\n      // set the right classes\n      if ((mycount+childcount)>0)\n        $(item).addClass('unread');\n      else\n        $(item).removeClass('unread');\n    }\n\n    // set unread count to window title\n    reg = /^\\([0-9]+\\)\\s+/i;\n    if (set_title && document.title) {\n      var new_title = '',\n        doc_title = String(document.title);\n\n      if (mycount && doc_title.match(reg))\n        new_title = doc_title.replace(reg, '('+mycount+') ');\n      else if (mycount)\n        new_title = '('+mycount+') '+doc_title;\n      else\n        new_title = doc_title.replace(reg, '');\n\n      this.set_pagetitle(new_title);\n    }\n  };\n\n  // display fetched raw headers\n  this.set_headers = function(content)\n  {\n    if (this.gui_objects.all_headers_row && this.gui_objects.all_headers_box && content)\n      $(this.gui_objects.all_headers_box).html(content).show();\n  };\n\n  // display all-headers row and fetch raw message headers\n  this.show_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box || !this.env.uid)\n      return;\n\n    $(elem).removeClass('show-headers').addClass('hide-headers');\n    $(this.gui_objects.all_headers_row).show();\n    elem.onclick = function() { rcmail.command('hide-headers', '', elem); };\n\n    // fetch headers only once\n    if (!this.gui_objects.all_headers_box.innerHTML) {\n      var lock = this.display_message(this.get_label('loading'), 'loading');\n      this.http_post('headers', {_uid: this.env.uid}, lock);\n    }\n  };\n\n  // hide all-headers row\n  this.hide_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box)\n      return;\n\n    $(elem).removeClass('hide-headers').addClass('show-headers');\n    $(this.gui_objects.all_headers_row).hide();\n    elem.onclick = function() { rcmail.command('show-headers', '', elem); };\n  };\n\n\n  /********************************************************/\n  /*********  html to text conversion functions   *********/\n  /********************************************************/\n\n  this.html2plain = function(htmlText, id)\n  {\n    var rcmail = this,\n      url = '?_task=utils&_action=html2text',\n      lock = this.set_busy(true, 'converting');\n\n    this.log('HTTP POST: ' + url);\n\n    $.ajax({ type: 'POST', url: url, data: htmlText, contentType: 'application/octet-stream',\n      error: function(o, status, err) { rcmail.http_error(o, status, err, lock); },\n      success: function(data) { rcmail.set_busy(false, null, lock); $('#'+id).val(data); rcmail.log(data); }\n    });\n  };\n\n  this.plain2html = function(plain, id)\n  {\n    var lock = this.set_busy(true, 'converting');\n\n    plain = plain.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    $('#'+id).val(plain ? '<pre>'+plain+'</pre>' : '');\n\n    this.set_busy(false, null, lock);\n  };\n\n\n  /********************************************************/\n  /*********        remote request methods        *********/\n  /********************************************************/\n\n  // compose a valid url with the given parameters\n  this.url = function(action, query)\n  {\n    var querystring = typeof query === 'string' ? '&' + query : '';\n\n    if (typeof action !== 'string')\n      query = action;\n    else if (!query || typeof query !== 'object')\n      query = {};\n\n    if (action)\n      query._action = action;\n    else\n      query._action = this.env.action;\n\n    var base = this.env.comm_path, k, param = {};\n\n    // overwrite task name\n    if (query._action.match(/([a-z]+)\\/([a-z0-9-_.]+)/)) {\n      query._action = RegExp.$2;\n      base = base.replace(/\\_task=[a-z]+/, '_task='+RegExp.$1);\n    }\n\n    // remove undefined values\n    for (k in query) {\n      if (query[k] !== undefined && query[k] !== null)\n        param[k] = query[k];\n    }\n\n    return base + '&' + $.param(param) + querystring;\n  };\n\n  this.redirect = function(url, lock)\n  {\n    if (lock || lock === null)\n      this.set_busy(true);\n\n    if (this.is_framed())\n      parent.rcmail.redirect(url, lock);\n    else\n      this.location_href(url, window);\n  };\n\n  this.goto_url = function(action, query, lock)\n  {\n    this.redirect(this.url(action, query));\n  };\n\n  this.location_href = function(url, target, frame)\n  {\n    if (frame)\n      this.lock_frame();\n\n    if (typeof url == 'object')\n      url = this.env.comm_path + '&' + $.param(url);\n\n    // simulate real link click to force IE to send referer header\n    if (bw.ie && target == window)\n      $('<a>').attr('href', url).appendTo(document.body).get(0).click();\n    else\n      target.location.href = url;\n  };\n\n  // send a http request to the server\n  this.http_request = function(action, query, lock)\n  {\n    var url = this.url(action, query);\n\n    // trigger plugin hook\n    var result = this.triggerEvent('request'+action, query);\n\n    if (result !== undefined) {\n      // abort if one the handlers returned false\n      if (result === false)\n        return false;\n      else\n        query = result;\n    }\n\n    url += '&_remote=1';\n\n    // send request\n    this.log('HTTP GET: ' + url);\n\n    return $.ajax({\n      type: 'GET', url: url, data: { _unlock:(lock?lock:0) }, dataType: 'json',\n      success: function(data){ ref.http_response(data); },\n      error: function(o, status, err) { ref.http_error(o, status, err, lock, action); }\n    });\n  };\n\n  // send a http POST request to the server\n  this.http_post = function(action, postdata, lock)\n  {\n    var url = this.url(action);\n\n    if (postdata && typeof postdata === 'object') {\n      postdata._remote = 1;\n      postdata._unlock = (lock ? lock : 0);\n    }\n    else\n      postdata += (postdata ? '&' : '') + '_remote=1' + (lock ? '&_unlock='+lock : '');\n\n    // trigger plugin hook\n    var result = this.triggerEvent('request'+action, postdata);\n    if (result !== undefined) {\n      // abort if one the handlers returned false\n      if (result === false)\n        return false;\n      else\n        postdata = result;\n    }\n\n    // send request\n    this.log('HTTP POST: ' + url);\n\n    return $.ajax({\n      type: 'POST', url: url, data: postdata, dataType: 'json',\n      success: function(data){ ref.http_response(data); },\n      error: function(o, status, err) { ref.http_error(o, status, err, lock, action); }\n    });\n  };\n\n  // aborts ajax request\n  this.abort_request = function(r)\n  {\n    if (r.request)\n      r.request.abort();\n    if (r.lock)\n      this.set_busy(false, null, r.lock);\n  };\n\n  // handle HTTP response\n  this.http_response = function(response)\n  {\n    if (!response)\n      return;\n\n    if (response.unlock)\n      this.set_busy(false);\n\n    this.triggerEvent('responsebefore', {response: response});\n    this.triggerEvent('responsebefore'+response.action, {response: response});\n\n    // set env vars\n    if (response.env)\n      this.set_env(response.env);\n\n    // we have labels to add\n    if (typeof response.texts === 'object') {\n      for (var name in response.texts)\n        if (typeof response.texts[name] === 'string')\n          this.add_label(name, response.texts[name]);\n    }\n\n    // if we get javascript code from server -> execute it\n    if (response.exec) {\n      this.log(response.exec);\n      eval(response.exec);\n    }\n\n    // execute callback functions of plugins\n    if (response.callbacks && response.callbacks.length) {\n      for (var i=0; i < response.callbacks.length; i++)\n        this.triggerEvent(response.callbacks[i][0], response.callbacks[i][1]);\n    }\n\n    // process the response data according to the sent action\n    switch (response.action) {\n      case 'delete':\n        if (this.task == 'addressbook') {\n          var sid, uid = this.contact_list.get_selection(), writable = false;\n\n          if (uid && this.contact_list.rows[uid]) {\n            // search results, get source ID from record ID\n            if (this.env.source == '') {\n              sid = String(uid).replace(/^[^-]+-/, '');\n              writable = sid && this.env.address_sources[sid] && !this.env.address_sources[sid].readonly;\n            }\n            else {\n              writable = !this.env.address_sources[this.env.source].readonly;\n            }\n          }\n          this.enable_command('compose', (uid && this.contact_list.rows[uid]));\n          this.enable_command('delete', 'edit', writable);\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n        }\n\n      case 'moveto':\n        if (this.env.action == 'show') {\n          // re-enable commands on move/delete error\n          this.enable_command(this.env.message_commands, true);\n          if (!this.env.list_post)\n            this.enable_command('reply-list', false);\n        }\n        else if (this.task == 'addressbook') {\n          this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n        }\n\n      case 'purge':\n      case 'expunge':\n        if (this.task == 'mail') {\n          if (!this.env.messagecount) {\n            // clear preview pane content\n            if (this.env.contentframe)\n              this.show_contentframe(false);\n            // disable commands useless when mailbox is empty\n            this.enable_command(this.env.message_commands, 'purge', 'expunge',\n              'select-all', 'select-none', 'sort', 'expand-all', 'expand-unread', 'collapse-all', false);\n          }\n          if (this.message_list)\n            this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:this.message_list.rowcount });\n        }\n        break;\n\n      case 'check-recent':\n      case 'getunread':\n      case 'search':\n        this.env.qsearch = null;\n      case 'list':\n        if (this.task == 'mail') {\n          this.enable_command('show', 'expunge', 'select-all', 'select-none', 'sort', (this.env.messagecount > 0));\n          this.enable_command('purge', this.purge_mailbox_test());\n          this.enable_command('expand-all', 'expand-unread', 'collapse-all', this.env.threading && this.env.messagecount);\n\n          if ((response.action == 'list' || response.action == 'search') && this.message_list) {\n            this.msglist_select(this.message_list);\n            this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:this.message_list.rowcount });\n          }\n        }\n        else if (this.task == 'addressbook') {\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n\n          if (response.action == 'list' || response.action == 'search') {\n            this.enable_command('search-create', this.env.source == '');\n            this.enable_command('search-delete', this.env.search_id);\n            this.update_group_commands();\n            this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n          }\n        }\n        break;\n    }\n\n    if (response.unlock)\n      this.hide_message(response.unlock);\n\n    this.triggerEvent('responseafter', {response: response});\n    this.triggerEvent('responseafter'+response.action, {response: response});\n  };\n\n  // handle HTTP request errors\n  this.http_error = function(request, status, err, lock, action)\n  {\n    var errmsg = request.statusText;\n\n    this.set_busy(false, null, lock);\n    request.abort();\n\n    // don't display error message on page unload (#1488547)\n    if (this.unload)\n      return;\n\n    if (request.status && errmsg)\n      this.display_message(this.get_label('servererror') + ' (' + errmsg + ')', 'error');\n    else if (status == 'timeout')\n      this.display_message(this.get_label('requesttimedout'), 'error');\n    else if (request.status == 0 && status != 'abort')\n      this.display_message(this.get_label('servererror') + ' (No connection)', 'error');\n\n    // re-send keep-alive requests after 30 seconds\n    if (action == 'keep-alive')\n      setTimeout(function(){ ref.keep_alive(); }, 30000);\n    else if (action == 'check-recent')\n      setTimeout(function(){ ref.check_for_recent(false); }, 30000);\n  };\n\n  // post the given form to a hidden iframe\n  this.async_upload_form = function(form, action, onload)\n  {\n    var ts = new Date().getTime(),\n      frame_name = 'rcmupload'+ts;\n\n    // upload progress support\n    if (this.env.upload_progress_name) {\n      var fname = this.env.upload_progress_name,\n        field = $('input[name='+fname+']', form);\n\n      if (!field.length) {\n        field = $('<input>').attr({type: 'hidden', name: fname});\n        field.prependTo(form);\n      }\n\n      field.val(ts);\n    }\n\n    // have to do it this way for IE\n    // otherwise the form will be posted to a new window\n    if (document.all) {\n      var html = '<iframe name=\"'+frame_name+'\" src=\"program/resources/blank.gif\" style=\"width:0;height:0;visibility:hidden;\"></iframe>';\n      document.body.insertAdjacentHTML('BeforeEnd', html);\n    }\n    else { // for standards-compilant browsers\n      var frame = document.createElement('iframe');\n      frame.name = frame_name;\n      frame.style.border = 'none';\n      frame.style.width = 0;\n      frame.style.height = 0;\n      frame.style.visibility = 'hidden';\n      document.body.appendChild(frame);\n    }\n\n    // handle upload errors, parsing iframe content in onload\n    $(frame_name).bind('load', {ts:ts}, onload);\n\n    $(form).attr({\n        target: frame_name,\n        action: this.url(action, { _id:this.env.compose_id||'', _uploadid:ts }),\n        method: 'POST'})\n      .attr(form.encoding ? 'encoding' : 'enctype', 'multipart/form-data')\n      .submit();\n\n    return frame_name;\n  };\n\n  // html5 file-drop API\n  this.document_drag_hover = function(e, over)\n  {\n    e.preventDefault();\n    $(ref.gui_objects.filedrop)[(over?'addClass':'removeClass')]('active');\n  };\n\n  this.file_drag_hover = function(e, over)\n  {\n    e.preventDefault();\n    e.stopPropagation();\n    $(ref.gui_objects.filedrop)[(over?'addClass':'removeClass')]('hover');\n  };\n\n  // handler when files are dropped to a designated area.\n  // compose a multipart form data and submit it to the server\n  this.file_dropped = function(e)\n  {\n    // abort event and reset UI\n    this.file_drag_hover(e, false);\n\n    // prepare multipart form data composition\n    var files = e.target.files || e.dataTransfer.files,\n      formdata = window.FormData ? new FormData() : null,\n      fieldname = (this.env.filedrop.fieldname || '_file') + (this.env.filedrop.single ? '' : '[]'),\n      boundary = '------multipartformboundary' + (new Date).getTime(),\n      dashdash = '--', crlf = '\\r\\n',\n      multipart = dashdash + boundary + crlf;\n\n    if (!files || !files.length)\n      return;\n\n    // inline function to submit the files to the server\n    var submit_data = function() {\n      var multiple = files.length > 1,\n        ts = new Date().getTime(),\n        content = '<span>' + (multiple ? ref.get_label('uploadingmany') : files[0].name) + '</span>';\n\n      // add to attachments list\n      if (!ref.add2attachment_list(ts, { name:'', html:content, classname:'uploading', complete:false }))\n        ref.file_upload_id = ref.set_busy(true, 'uploading');\n\n      // complete multipart content and post request\n      multipart += dashdash + boundary + dashdash + crlf;\n\n      $.ajax({\n        type: 'POST',\n        dataType: 'json',\n        url: ref.url(ref.env.filedrop.action||'upload', { _id:ref.env.compose_id||ref.env.cid||'', _uploadid:ts, _remote:1 }),\n        contentType: formdata ? false : 'multipart/form-data; boundary=' + boundary,\n        processData: false,\n        data: formdata || multipart,\n        headers: {'X-Roundcube-Request': ref.env.request_token},\n        beforeSend: function(xhr, s) { if (!formdata && xhr.sendAsBinary) xhr.send = xhr.sendAsBinary; },\n        success: function(data){ ref.http_response(data); },\n        error: function(o, status, err) { ref.http_error(o, status, err, null, 'attachment'); }\n      });\n    };\n\n    // get contents of all dropped files\n    var last = this.env.filedrop.single ? 0 : files.length - 1;\n    for (var j=0, i=0, f; j <= last && (f = files[i]); i++) {\n      if (!f.name) f.name = f.fileName;\n      if (!f.size) f.size = f.fileSize;\n      if (!f.type) f.type = 'application/octet-stream';\n\n      // file name contains non-ASCII characters, do UTF8-binary string conversion.\n      if (!formdata && /[^\\x20-\\x7E]/.test(f.name))\n        f.name_bin = unescape(encodeURIComponent(f.name));\n\n      // filter by file type if requested\n      if (this.env.filedrop.filter && !f.type.match(new RegExp(this.env.filedrop.filter))) {\n        // TODO: show message to user\n        continue;\n      }\n\n      // do it the easy way with FormData (FF 4+, Chrome 5+, Safari 5+)\n      if (formdata) {\n        formdata.append(fieldname, f);\n        if (j == last)\n          return submit_data();\n      }\n      // use FileReader supporetd by Firefox 3.6\n      else if (window.FileReader) {\n        var reader = new FileReader();\n\n        // closure to pass file properties to async callback function\n        reader.onload = (function(file, j) {\n          return function(e) {\n            multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n            multipart += '; filename=\"' + (f.name_bin || file.name) + '\"' + crlf;\n            multipart += 'Content-Length: ' + file.size + crlf;\n            multipart += 'Content-Type: ' + file.type + crlf + crlf;\n            multipart += e.target.result + crlf;\n            multipart += dashdash + boundary + crlf;\n\n            if (j == last)  // we're done, submit the data\n              return submit_data();\n          }\n        })(f,j);\n        reader.readAsBinaryString(f);\n      }\n      // Firefox 3\n      else if (f.getAsBinary) {\n        multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n        multipart += '; filename=\"' + (f.name_bin || f.name) + '\"' + crlf;\n        multipart += 'Content-Length: ' + f.size + crlf;\n        multipart += 'Content-Type: ' + f.type + crlf + crlf;\n        multipart += f.getAsBinary() + crlf;\n        multipart += dashdash + boundary +crlf;\n\n        if (j == last)\n          return submit_data();\n      }\n\n      j++;\n    }\n  };\n\n\n  // starts interval for keep-alive/check-recent signal\n  this.start_keepalive = function()\n  {\n    if (!this.env.keep_alive || this.env.framed)\n      return;\n\n    if (this._int)\n      clearInterval(this._int);\n\n    if (this.task == 'mail' && this.gui_objects.mailboxlist)\n      this._int = setInterval(function(){ ref.check_for_recent(false); }, this.env.keep_alive * 1000);\n    else if (this.task != 'login' && this.env.action != 'print')\n      this._int = setInterval(function(){ ref.keep_alive(); }, this.env.keep_alive * 1000);\n  };\n\n  // sends keep-alive signal\n  this.keep_alive = function()\n  {\n    if (!this.busy)\n      this.http_request('keep-alive');\n  };\n\n  // sends request to check for recent messages\n  this.check_for_recent = function(refresh)\n  {\n    if (this.busy)\n      return;\n\n    var lock, url = {_mbox: this.env.mailbox};\n\n    if (refresh) {\n      lock = this.set_busy(true, 'checkingmail');\n      url._refresh = 1;\n      // reset check-recent interval\n      this.start_keepalive();\n    }\n\n    if (this.gui_objects.messagelist)\n      url._list = 1;\n    if (this.gui_objects.quotadisplay)\n      url._quota = 1;\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.http_request('check-recent', url, lock);\n  };\n\n\n  /********************************************************/\n  /*********            helper methods            *********/\n  /********************************************************/\n\n  // check if we're in show mode or if we have a unique selection\n  // and return the message uid\n  this.get_single_uid = function()\n  {\n    return this.env.uid ? this.env.uid : (this.message_list ? this.message_list.get_single_selection() : null);\n  };\n\n  // same as above but for contacts\n  this.get_single_cid = function()\n  {\n    return this.env.cid ? this.env.cid : (this.contact_list ? this.contact_list.get_single_selection() : null);\n  };\n\n  // gets cursor position\n  this.get_caret_pos = function(obj)\n  {\n    if (obj.selectionEnd !== undefined)\n      return obj.selectionEnd;\n    else if (document.selection && document.selection.createRange) {\n      var range = document.selection.createRange();\n      if (range.parentElement() != obj)\n        return 0;\n\n      var gm = range.duplicate();\n      if (obj.tagName == 'TEXTAREA')\n        gm.moveToElementText(obj);\n      else\n        gm.expand('textedit');\n\n      gm.setEndPoint('EndToStart', range);\n      var p = gm.text.length;\n\n      return p<=obj.value.length ? p : -1;\n    }\n    else\n      return obj.value.length;\n  };\n\n  // moves cursor to specified position\n  this.set_caret_pos = function(obj, pos)\n  {\n    if (obj.setSelectionRange)\n      obj.setSelectionRange(pos, pos);\n    else if (obj.createTextRange) {\n      var range = obj.createTextRange();\n      range.collapse(true);\n      range.moveEnd('character', pos);\n      range.moveStart('character', pos);\n      range.select();\n    }\n  };\n\n  // disable/enable all fields of a form\n  this.lock_form = function(form, lock)\n  {\n    if (!form || !form.elements)\n      return;\n\n    var n, len, elm;\n\n    if (lock)\n      this.disabled_form_elements = [];\n\n    for (n=0, len=form.elements.length; n<len; n++) {\n      elm = form.elements[n];\n\n      if (elm.type == 'hidden')\n        continue;\n      // remember which elem was disabled before lock\n      if (lock && elm.disabled)\n        this.disabled_form_elements.push(elm);\n      // check this.disabled_form_elements before inArray() as a workaround for FF5 bug\n      // http://bugs.jquery.com/ticket/9873\n      else if (lock || (this.disabled_form_elements && $.inArray(elm, this.disabled_form_elements)<0))\n        elm.disabled = lock;\n    }\n  };\n\n  this.mailto_handler_uri = function()\n  {\n    return location.href.split('?')[0] + '?_task=mail&_action=compose&_to=%s';\n  };\n\n  this.register_protocol_handler = function(name)\n  {\n    try {\n      window.navigator.registerProtocolHandler('mailto', this.mailto_handler_uri(), name);\n    }\n    catch(e) {};\n  };\n\n  this.check_protocol_handler = function(name, elem)\n  {\n    var nav = window.navigator;\n    if (!nav\n      || (typeof nav.registerProtocolHandler != 'function')\n      || ((typeof nav.isProtocolHandlerRegistered == 'function')\n        && nav.isProtocolHandlerRegistered('mailto', this.mailto_handler_uri()) == 'registered')\n    )\n      $(elem).addClass('disabled');\n    else\n      $(elem).click(function() { rcmail.register_protocol_handler(name); return false; });\n  };\n\n  // Checks browser capabilities eg. PDF support, TIF support\n  this.browser_capabilities_check = function()\n  {\n    if (!this.env.browser_capabilities)\n      this.env.browser_capabilities = {};\n\n    if (this.env.browser_capabilities.pdf === undefined)\n      this.env.browser_capabilities.pdf = this.pdf_support_check();\n\n    if (this.env.browser_capabilities.flash === undefined)\n      this.env.browser_capabilities.flash = this.flash_support_check();\n\n    if (this.env.browser_capabilities.tif === undefined)\n      this.tif_support_check();\n  };\n\n  // Returns browser capabilities string\n  this.browser_capabilities = function()\n  {\n    if (!this.env.browser_capabilities)\n      return '';\n\n    var n, ret = [];\n\n    for (n in this.env.browser_capabilities)\n      ret.push(n + '=' + this.env.browser_capabilities[n]);\n\n    return ret.join();\n  };\n\n  this.tif_support_check = function()\n  {\n    var img = new Image();\n\n    img.onload = function() { rcmail.env.browser_capabilities.tif = 1; };\n    img.onerror = function() { rcmail.env.browser_capabilities.tif = 0; };\n    img.src = 'program/resources/blank.tif';\n  };\n\n  this.pdf_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/pdf\"] : {},\n      plugins = navigator.plugins,\n      len = plugins.length,\n      regex = /Adobe Reader|PDF|Acrobat/i;\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if (window.ActiveXObject) {\n      try {\n        if (axObj = new ActiveXObject(\"AcroPDF.PDF\"))\n          return 1;\n      }\n      catch (e) {}\n      try {\n        if (axObj = new ActiveXObject(\"PDF.PdfCtrl\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    for (i=0; i<len; i++) {\n      plugin = plugins[i];\n      if (typeof plugin === 'String') {\n        if (regex.test(plugin))\n          return 1;\n      }\n      else if (plugin.name && regex.test(plugin.name))\n        return 1;\n    }\n\n    return 0;\n  };\n\n  this.flash_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/x-shockwave-flash\"] : {};\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if (window.ActiveXObject) {\n      try {\n        if (axObj = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    return 0;\n  };\n\n}  // end object rcube_webmail\n\n\n// some static methods\nrcube_webmail.long_subject_title = function(elem, indent)\n{\n  if (!elem.title) {\n    var $elem = $(elem);\n    if ($elem.width() + indent * 15 > $elem.parent().width())\n      elem.title = $elem.html();\n  }\n};\n\nrcube_webmail.long_subject_title_ie = function(elem, indent)\n{\n  if (!elem.title) {\n    var $elem = $(elem),\n      txt = $.trim($elem.text()),\n      tmp = $('<span>').text(txt)\n        .css({'position': 'absolute', 'float': 'left', 'visibility': 'hidden',\n          'font-size': $elem.css('font-size'), 'font-weight': $elem.css('font-weight')})\n        .appendTo($('body')),\n      w = tmp.width();\n\n    tmp.remove();\n    if (w + indent * 15 > $elem.width())\n      elem.title = txt;\n  }\n};\n\n// copy event engine prototype\nrcube_webmail.prototype.addEventListener = rcube_event_engine.prototype.addEventListener;\nrcube_webmail.prototype.removeEventListener = rcube_event_engine.prototype.removeEventListener;\nrcube_webmail.prototype.triggerEvent = rcube_event_engine.prototype.triggerEvent;\n", "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | program/steps/mail/compose.inc                                        |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2012, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Compose a new mail message with all headers and attachments         |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n// define constants for message compose mode\ndefine('RCUBE_COMPOSE_REPLY', 0x0106);\ndefine('RCUBE_COMPOSE_FORWARD', 0x0107);\ndefine('RCUBE_COMPOSE_DRAFT', 0x0108);\ndefine('RCUBE_COMPOSE_EDIT', 0x0109);\n\n$MESSAGE_FORM = null;\n$COMPOSE_ID   = get_input_value('_id', RCUBE_INPUT_GET);\n$COMPOSE      = null;\n\nif ($COMPOSE_ID && $_SESSION['compose_data_'.$COMPOSE_ID])\n  $COMPOSE =& $_SESSION['compose_data_'.$COMPOSE_ID];\n\n// give replicated session storage some time to synchronize\n$retries = 0;\nwhile ($COMPOSE_ID && !is_array($COMPOSE) && $RCMAIL->db->is_replicated() && $retries++ < 5) {\n  usleep(500000);\n  $RCMAIL->session->reload();\n  if ($_SESSION['compose_data_'.$COMPOSE_ID])\n    $COMPOSE =& $_SESSION['compose_data_'.$COMPOSE_ID];\n}\n\n// Nothing below is called during message composition, only at \"new/forward/reply/draft\" initialization or\n// if a compose-ID is given (i.e. when the compose step is opened in a new window/tab).\nif (!is_array($COMPOSE))\n{\n  // Infinite redirect prevention in case of broken session (#1487028)\n  if ($COMPOSE_ID)\n    raise_error(array('code' => 500, 'type' => 'php',\n      'file' => __FILE__, 'line' => __LINE__,\n      'message' => \"Invalid compose ID\"), true, true);\n\n  $COMPOSE_ID = uniqid(mt_rand());\n  $_SESSION['compose_data_'.$COMPOSE_ID] = array(\n    'id'      => $COMPOSE_ID,\n    'param'   => request2param(RCUBE_INPUT_GET),\n    'mailbox' => $RCMAIL->storage->get_folder(),\n  );\n  $COMPOSE =& $_SESSION['compose_data_'.$COMPOSE_ID];\n\n  // process values like \"mailto:foo@bar.com?subject=new+message&cc=another\"\n  if ($COMPOSE['param']['to']) {\n    // #1486037: remove \"mailto:\" prefix\n    $COMPOSE['param']['to'] = preg_replace('/^mailto:/i', '', $COMPOSE['param']['to']);\n    $mailto = explode('?', $COMPOSE['param']['to']);\n    if (count($mailto) > 1) {\n      $COMPOSE['param']['to'] = $mailto[0];\n      parse_str($mailto[1], $query);\n      foreach ($query as $f => $val)\n        $COMPOSE['param'][$f] = $val;\n    }\n  }\n\n  // select folder where to save the sent message\n  $COMPOSE['param']['sent_mbox'] = $RCMAIL->config->get('sent_mbox');\n\n  // pipe compose parameters thru plugins\n  $plugin = $RCMAIL->plugins->exec_hook('message_compose', $COMPOSE);\n  $COMPOSE['param'] = array_merge($COMPOSE['param'], $plugin['param']);\n\n  // add attachments listed by message_compose hook\n  if (is_array($plugin['attachments'])) {\n    foreach ($plugin['attachments'] as $attach) {\n      // we have structured data\n      if (is_array($attach)) {\n        $attachment = $attach;\n      }\n      // only a file path is given\n      else {\n        $filename = basename($attach);\n        $attachment = array(\n          'group' => $COMPOSE_ID,\n          'name' => $filename,\n          'mimetype' => rc_mime_content_type($attach, $filename),\n          'path' => $attach,\n        );\n      }\n\n      // save attachment if valid\n      if (($attachment['data'] && $attachment['name']) || ($attachment['path'] && file_exists($attachment['path']))) {\n        $attachment = rcmail::get_instance()->plugins->exec_hook('attachment_save', $attachment);\n      }\n\n      if ($attachment['status'] && !$attachment['abort']) {\n        unset($attachment['data'], $attachment['status'], $attachment['abort']);\n        $COMPOSE['attachments'][$attachment['id']] = $attachment;\n      }\n    }\n  }\n\n  // check if folder for saving sent messages exists and is subscribed (#1486802)\n  if ($sent_folder = $COMPOSE['param']['sent_mbox']) {\n    rcmail_check_sent_folder($sent_folder, true);\n  }\n\n  // redirect to a unique URL with all parameters stored in session\n  $OUTPUT->redirect(array(\n    '_action' => 'compose',\n    '_id'     => $COMPOSE['id'],\n    '_search' => $_REQUEST['_search'],\n  ));\n}\n\n\n// add some labels to client\n$OUTPUT->add_label('nosubject', 'nosenderwarning', 'norecipientwarning', 'nosubjectwarning', 'cancel',\n    'nobodywarning', 'notsentwarning', 'notuploadedwarning', 'savingmessage', 'sendingmessage', \n    'messagesaved', 'converting', 'editorwarning', 'searching', 'uploading', 'uploadingmany',\n    'fileuploaderror', 'sendmessage');\n\n$OUTPUT->set_env('compose_id', $COMPOSE['id']);\n\n// add config parameters to client script\nif (!empty($CONFIG['drafts_mbox'])) {\n  $OUTPUT->set_env('drafts_mailbox', $CONFIG['drafts_mbox']);\n  $OUTPUT->set_env('draft_autosave', $CONFIG['draft_autosave']);\n}\n// set current mailbox in client environment\n$OUTPUT->set_env('mailbox', $RCMAIL->storage->get_folder());\n$OUTPUT->set_env('sig_above', $RCMAIL->config->get('sig_above', false));\n$OUTPUT->set_env('top_posting', $RCMAIL->config->get('top_posting', false));\n$OUTPUT->set_env('recipients_separator', trim($RCMAIL->config->get('recipients_separator', ',')));\n\n// default font for HTML editor\n$font = rcube_fontdefs($RCMAIL->config->get('default_font', 'Verdana'));\nif ($font && !is_array($font)) {\n  $OUTPUT->set_env('default_font', $font);\n}\n\n// get reference message and set compose mode\nif ($msg_uid = $COMPOSE['param']['draft_uid']) {\n  $RCMAIL->storage->set_folder($CONFIG['drafts_mbox']);\n  $compose_mode = RCUBE_COMPOSE_DRAFT;\n}\nelse if ($msg_uid = $COMPOSE['param']['reply_uid'])\n  $compose_mode = RCUBE_COMPOSE_REPLY;\nelse if ($msg_uid = $COMPOSE['param']['forward_uid'])\n  $compose_mode = RCUBE_COMPOSE_FORWARD;\nelse if ($msg_uid = $COMPOSE['param']['uid'])\n  $compose_mode = RCUBE_COMPOSE_EDIT;\n\n$config_show_sig = $RCMAIL->config->get('show_sig', 1);\nif ($config_show_sig == 1)\n  $OUTPUT->set_env('show_sig', true);\nelse if ($config_show_sig == 2 && (empty($compose_mode) || $compose_mode == RCUBE_COMPOSE_EDIT || $compose_mode == RCUBE_COMPOSE_DRAFT))\n  $OUTPUT->set_env('show_sig', true);\nelse if ($config_show_sig == 3 && ($compose_mode == RCUBE_COMPOSE_REPLY || $compose_mode == RCUBE_COMPOSE_FORWARD))\n  $OUTPUT->set_env('show_sig', true);\nelse\n  $OUTPUT->set_env('show_sig', false);\n\n// set line length for body wrapping\n$LINE_LENGTH = $RCMAIL->config->get('line_length', 72);\n\nif (!empty($msg_uid))\n{\n  // similar as in program/steps/mail/show.inc\n  // re-set 'prefer_html' to have possibility to use html part for compose\n  $CONFIG['prefer_html'] = $CONFIG['prefer_html'] || $CONFIG['htmleditor'] || $compose_mode == RCUBE_COMPOSE_DRAFT || $compose_mode == RCUBE_COMPOSE_EDIT;\n  $MESSAGE = new rcube_message($msg_uid);\n\n  // make sure message is marked as read\n  if ($MESSAGE->headers && empty($MESSAGE->headers->flags['SEEN']))\n    $RCMAIL->storage->set_flag($msg_uid, 'SEEN');\n\n  if (!empty($MESSAGE->headers->charset))\n    $RCMAIL->storage->set_charset($MESSAGE->headers->charset);\n\n  if ($compose_mode == RCUBE_COMPOSE_REPLY)\n  {\n    $COMPOSE['reply_uid'] = $msg_uid;\n    $COMPOSE['reply_msgid'] = $MESSAGE->headers->messageID;\n    $COMPOSE['references']  = trim($MESSAGE->headers->references . \" \" . $MESSAGE->headers->messageID);\n\n    if (!empty($COMPOSE['param']['all']))\n      $MESSAGE->reply_all = $COMPOSE['param']['all'];\n\n    $OUTPUT->set_env('compose_mode', 'reply');\n\n    // Save the sent message in the same folder of the message being replied to\n    if ($RCMAIL->config->get('reply_same_folder') && ($sent_folder = $COMPOSE['mailbox'])\n      && rcmail_check_sent_folder($sent_folder, false)\n    ) {\n      $COMPOSE['param']['sent_mbox'] = $sent_folder;\n    }\n  }\n  else if ($compose_mode == RCUBE_COMPOSE_DRAFT)\n  {\n    if ($MESSAGE->headers->others['x-draft-info'])\n    {\n      // get reply_uid/forward_uid to flag the original message when sending\n      $info = rcmail_draftinfo_decode($MESSAGE->headers->others['x-draft-info']);\n\n      if ($info['type'] == 'reply')\n        $COMPOSE['reply_uid'] = $info['uid'];\n      else if ($info['type'] == 'forward')\n        $COMPOSE['forward_uid'] = $info['uid'];\n\n      $COMPOSE['mailbox'] = $info['folder'];\n\n      // Save the sent message in the same folder of the message being replied to\n      if ($RCMAIL->config->get('reply_same_folder') && ($sent_folder = $info['folder'])\n        && rcmail_check_sent_folder($sent_folder, false)\n      ) {\n        $COMPOSE['param']['sent_mbox'] = $sent_folder;\n      }\n    }\n\n    if ($MESSAGE->headers->in_reply_to)\n      $COMPOSE['reply_msgid'] = '<'.$MESSAGE->headers->in_reply_to.'>';\n\n    $COMPOSE['references']  = $MESSAGE->headers->references;\n  }\n  else if ($compose_mode == RCUBE_COMPOSE_FORWARD)\n  {\n    $COMPOSE['forward_uid'] = $msg_uid;\n    $OUTPUT->set_env('compose_mode', 'forward');\n\n    if (!empty($COMPOSE['param']['attachment']))\n      $MESSAGE->forward_attachment = true;\n  }\n}\nelse {\n  $MESSAGE = new stdClass();\n}\n\n$MESSAGE->compose = array();\n\n// get user's identities\n$MESSAGE->identities = $RCMAIL->user->list_identities();\nif (count($MESSAGE->identities))\n{\n  foreach ($MESSAGE->identities as $idx => $ident) {\n    $email = mb_strtolower(rcube_idn_to_utf8($ident['email']));\n\n    $MESSAGE->identities[$idx]['email_ascii'] = $ident['email'];\n    $MESSAGE->identities[$idx]['ident']       = format_email_recipient($ident['email'], $ident['name']);\n    $MESSAGE->identities[$idx]['email']       = $email;\n  }\n}\n\n// Set From field value\nif (!empty($_POST['_from'])) {\n  $MESSAGE->compose['from'] = get_input_value('_from', RCUBE_INPUT_POST);\n}\nelse if (!empty($COMPOSE['param']['from'])) {\n  $MESSAGE->compose['from'] = $COMPOSE['param']['from'];\n}\nelse if (count($MESSAGE->identities)) {\n  $a_recipients = array();\n  $a_names      = array();\n\n  // extract all recipients of the reply-message\n  if (is_object($MESSAGE->headers) && in_array($compose_mode, array(RCUBE_COMPOSE_REPLY, RCUBE_COMPOSE_FORWARD)))\n  {\n    $a_to = rcube_mime::decode_address_list($MESSAGE->headers->to, null, true, $MESSAGE->headers->charset);\n    foreach ($a_to as $addr) {\n      if (!empty($addr['mailto'])) {\n        $a_recipients[] = strtolower($addr['mailto']);\n        $a_names[]      = $addr['name'];\n      }\n    }\n\n    if (!empty($MESSAGE->headers->cc)) {\n      $a_cc = rcube_mime::decode_address_list($MESSAGE->headers->cc, null, true, $MESSAGE->headers->charset);\n      foreach ($a_cc as $addr) {\n        if (!empty($addr['mailto'])) {\n          $a_recipients[] = strtolower($addr['mailto']);\n          $a_names[]      = $addr['name'];\n        }\n      }\n    }\n  }\n\n  $from_idx         = null;\n  $default_identity = null;\n  $return_path      = $MESSAGE->headers->others['return-path'];\n\n  // Select identity\n  foreach ($MESSAGE->identities as $idx => $ident) {\n    // save default identity ID\n    if ($ident['standard']) {\n      $default_identity = $idx;\n    }\n\n    // use From header\n    if (in_array($compose_mode, array(RCUBE_COMPOSE_DRAFT, RCUBE_COMPOSE_EDIT))) {\n      if ($MESSAGE->headers->from == $ident['ident']) {\n        $from_idx = $idx;\n        break;\n      }\n    }\n    // reply to yourself\n    else if ($compose_mode == RCUBE_COMPOSE_REPLY && $MESSAGE->headers->from == $ident['ident']) {\n      $from_idx = $idx;\n      break;\n    }\n    // use replied message recipients\n    else if (($found = array_search($ident['email_ascii'], $a_recipients)) !== false) {\n      // match identity name, prefer default identity\n      if ($from_idx === null || ($a_names[$found] && $ident['name'] && $a_names[$found] == $ident['name'])) {\n        $from_idx = $idx;\n      }\n    }\n  }\n\n  // Fallback using Return-Path\n  if ($from_idx === null && $return_path) {\n    foreach ($MESSAGE->identities as $idx => $ident) {\n      if (strpos($return_path, str_replace('@', '=', $ident['email_ascii']).'@') !== false) {\n        $from_idx = $idx;\n        break;\n      }\n    }\n  }\n\n  // Still no ID, use default/first identity\n  if ($from_idx === null) {\n    $from_idx = $default_identity !== null ? $default_identity : key(reset($MESSAGE->identities));\n  }\n\n  $ident   = $MESSAGE->identities[$from_idx];\n  $from_id = $ident['identity_id'];\n\n  $MESSAGE->compose['from_email'] = $ident['email'];\n  $MESSAGE->compose['from']       = $from_id;\n}\n\n// Set other headers\n$a_recipients = array();\n$parts        = array('to', 'cc', 'bcc', 'replyto', 'followupto');\n$separator    = trim($RCMAIL->config->get('recipients_separator', ',')) . ' ';\n\nforeach ($parts as $header) {\n  $fvalue = '';\n  $decode_header = true;\n\n  // we have a set of recipients stored is session\n  if ($header == 'to' && ($mailto_id = $COMPOSE['param']['mailto'])\n      && $_SESSION['mailto'][$mailto_id]\n  ) {\n    $fvalue = urldecode($_SESSION['mailto'][$mailto_id]);\n    $decode_header = false;\n\n    // make session to not grow up too much\n    unset($_SESSION['mailto'][$mailto_id]);\n    $COMPOSE['param']['to'] = $fvalue;\n  }\n  else if (!empty($_POST['_'.$header])) {\n    $fvalue = get_input_value('_'.$header, RCUBE_INPUT_POST, TRUE);\n  }\n  else if (!empty($COMPOSE['param'][$header])) {\n    $fvalue = $COMPOSE['param'][$header];\n  }\n  else if ($compose_mode == RCUBE_COMPOSE_REPLY) {\n    // get recipent address(es) out of the message headers\n    if ($header == 'to') {\n      $mailfollowup = $MESSAGE->headers->others['mail-followup-to'];\n      $mailreplyto  = $MESSAGE->headers->others['mail-reply-to'];\n\n      // Reply to mailing list...\n      if ($MESSAGE->reply_all == 'list' && $mailfollowup)\n        $fvalue = $mailfollowup;\n      else if ($MESSAGE->reply_all == 'list'\n        && preg_match('/<mailto:([^>]+)>/i', $MESSAGE->headers->others['list-post'], $m))\n        $fvalue = $m[1];\n      // Reply to...\n      else if ($MESSAGE->reply_all && $mailfollowup)\n        $fvalue = $mailfollowup;\n      else if ($mailreplyto)\n        $fvalue = $mailreplyto;\n      else if (!empty($MESSAGE->headers->replyto))\n        $fvalue = $MESSAGE->headers->replyto;\n      else if (!empty($MESSAGE->headers->from))\n        $fvalue = $MESSAGE->headers->from;\n\n      // Reply to message sent by yourself (#1487074)\n      if (!empty($ident) && $fvalue == $ident['ident']) {\n        $fvalue = $MESSAGE->headers->to;\n      }\n    }\n    // add recipient of original message if reply to all\n    else if ($header == 'cc' && !empty($MESSAGE->reply_all) && $MESSAGE->reply_all != 'list') {\n      if ($v = $MESSAGE->headers->to)\n        $fvalue .= $v;\n      if ($v = $MESSAGE->headers->cc)\n        $fvalue .= (!empty($fvalue) ? $separator : '') . $v;\n    }\n  }\n  else if (in_array($compose_mode, array(RCUBE_COMPOSE_DRAFT, RCUBE_COMPOSE_EDIT))) {\n    // get drafted headers\n    if ($header=='to' && !empty($MESSAGE->headers->to))\n      $fvalue = $MESSAGE->get_header('to');\n    else if ($header=='cc' && !empty($MESSAGE->headers->cc))\n      $fvalue = $MESSAGE->get_header('cc');\n    else if ($header=='bcc' && !empty($MESSAGE->headers->bcc))\n      $fvalue = $MESSAGE->get_header('bcc');\n    else if ($header=='replyto' && !empty($MESSAGE->headers->others['mail-reply-to']))\n      $fvalue = $MESSAGE->get_header('mail-reply-to');\n    else if ($header=='replyto' && !empty($MESSAGE->headers->replyto))\n      $fvalue = $MESSAGE->get_header('reply-to');\n    else if ($header=='followupto' && !empty($MESSAGE->headers->others['mail-followup-to']))\n      $fvalue = $MESSAGE->get_header('mail-followup-to');\n  }\n\n  // split recipients and put them back together in a unique way\n  if (!empty($fvalue) && in_array($header, array('to', 'cc', 'bcc'))) {\n    $to_addresses = rcube_mime::decode_address_list($fvalue, null, $decode_header, $MESSAGE->headers->charset);\n    $fvalue = array();\n\n    foreach ($to_addresses as $addr_part) {\n      if (empty($addr_part['mailto']))\n        continue;\n\n      $mailto = mb_strtolower(rcube_idn_to_utf8($addr_part['mailto']));\n\n      if (!in_array($mailto, $a_recipients)\n        && ($header == 'to' || empty($MESSAGE->compose['from_email']) || $mailto != $MESSAGE->compose['from_email'])\n      ) {\n        if ($addr_part['name'] && $addr_part['mailto'] != $addr_part['name'])\n          $string = format_email_recipient($mailto, $addr_part['name']);\n        else\n          $string = $mailto;\n\n        $fvalue[] = $string;\n        $a_recipients[] = $addr_part['mailto'];\n      }\n    }\n\n    $fvalue = implode($separator, $fvalue);\n  }\n\n  $MESSAGE->compose[$header] = $fvalue;\n}\nunset($a_recipients);\n\n// process $MESSAGE body/attachments, set $MESSAGE_BODY/$HTML_MODE vars and some session data\n$MESSAGE_BODY = rcmail_prepare_message_body();\n\n\n/****** compose mode functions ********/\n\nfunction rcmail_compose_headers($attrib)\n{\n  global $MESSAGE;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n\n  $out  = '';\n  $part = strtolower($attrib['part']);\n\n  switch ($part)\n  {\n    case 'from':\n      return $form_start . rcmail_compose_header_from($attrib);\n\n    case 'to':\n    case 'cc':\n    case 'bcc':\n      $fname = '_' . $part;\n      $header = $param = $part;\n\n      $allow_attrib = array('id', 'class', 'style', 'cols', 'rows', 'tabindex');\n      $field_type = 'html_textarea';\n      break;\n\n    case 'replyto':\n    case 'reply-to':\n      $fname = '_replyto';\n      $param = 'replyto';\n      $header = 'reply-to';\n\n    case 'followupto':\n    case 'followup-to':\n      if (!$fname) {\n        $fname = '_followupto';\n        $param = 'followupto';\n        $header = 'mail-followup-to';\n      }\n\n      $allow_attrib = array('id', 'class', 'style', 'size', 'tabindex');\n      $field_type = 'html_inputfield';\n      break;\n  }\n\n  if ($fname && $field_type)\n  {\n    // pass the following attributes to the form class\n    $field_attrib = array('name' => $fname, 'spellcheck' => 'false');\n    foreach ($attrib as $attr => $value)\n      if (in_array($attr, $allow_attrib))\n        $field_attrib[$attr] = $value;\n\n    // create teaxtarea object\n    $input = new $field_type($field_attrib);\n    $out = $input->show($MESSAGE->compose[$param]);\n  }\n\n  if ($form_start)\n    $out = $form_start.$out;\n\n  // configure autocompletion\n  rcube_autocomplete_init();\n\n  return $out;\n}\n\n\nfunction rcmail_compose_header_from($attrib)\n{\n  global $MESSAGE, $OUTPUT;\n\n  // pass the following attributes to the form class\n  $field_attrib = array('name' => '_from');\n  foreach ($attrib as $attr => $value)\n    if (in_array($attr, array('id', 'class', 'style', 'size', 'tabindex')))\n      $field_attrib[$attr] = $value;\n\n  if (count($MESSAGE->identities))\n  {\n    $a_signatures = array();\n\n    $field_attrib['onchange'] = JS_OBJECT_NAME.\".change_identity(this)\";\n    $select_from = new html_select($field_attrib);\n\n    // create SELECT element\n    foreach ($MESSAGE->identities as $sql_arr)\n    {\n      $identity_id = $sql_arr['identity_id'];\n      $select_from->add(format_email_recipient($sql_arr['email'], $sql_arr['name']), $identity_id);\n\n      // add signature to array\n      if (!empty($sql_arr['signature']) && empty($COMPOSE['param']['nosig']))\n      {\n        $a_signatures[$identity_id]['text'] = $sql_arr['signature'];\n        $a_signatures[$identity_id]['is_html'] = ($sql_arr['html_signature'] == 1) ? true : false;\n        if ($a_signatures[$identity_id]['is_html'])\n        {\n            $h2t = new html2text($a_signatures[$identity_id]['text'], false, false);\n            $a_signatures[$identity_id]['plain_text'] = trim($h2t->get_text());\n        }\n      }\n    }\n\n    $out = $select_from->show($MESSAGE->compose['from']);\n\n    // add signatures to client\n    $OUTPUT->set_env('signatures', $a_signatures);\n  }\n  // no identities, display text input field\n  else {\n    $field_attrib['class'] = 'from_address';\n    $input_from = new html_inputfield($field_attrib);\n    $out = $input_from->show($MESSAGE->compose['from']);\n  }\n\n  return $out;\n}\n\n\nfunction rcmail_compose_editor_mode()\n{\n  global $RCMAIL, $MESSAGE, $compose_mode;\n  static $useHtml;\n\n  if ($useHtml !== null)\n    return $useHtml;\n\n  $html_editor = intval($RCMAIL->config->get('htmleditor'));\n\n  if ($compose_mode == RCUBE_COMPOSE_DRAFT || $compose_mode == RCUBE_COMPOSE_EDIT) {\n    $useHtml = $MESSAGE->has_html_part(false);\n  }\n  else if ($compose_mode == RCUBE_COMPOSE_REPLY) {\n    $useHtml = ($html_editor == 1 || ($html_editor == 2 && $MESSAGE->has_html_part(false)));\n  }\n  else { // RCUBE_COMPOSE_FORWARD or NEW\n    $useHtml = ($html_editor == 1);\n  }\n\n  return $useHtml;\n}\n\n\nfunction rcmail_prepare_message_body()\n{\n  global $RCMAIL, $MESSAGE, $COMPOSE, $compose_mode, $LINE_LENGTH, $HTML_MODE;\n\n  // use posted message body\n  if (!empty($_POST['_message'])) {\n    $body = get_input_value('_message', RCUBE_INPUT_POST, true);\n    $isHtml = (bool) get_input_value('_is_html', RCUBE_INPUT_POST);\n  }\n  else if ($COMPOSE['param']['body']) {\n    $body = $COMPOSE['param']['body'];\n    $isHtml = false;\n  }\n  // forward as attachment\n  else if ($compose_mode == RCUBE_COMPOSE_FORWARD && $MESSAGE->forward_attachment) {\n    $isHtml = rcmail_compose_editor_mode();\n    $body = '';\n    if (empty($COMPOSE['attachments']))\n      rcmail_write_forward_attachment($MESSAGE);\n  }\n  // reply/edit/draft/forward\n  else if ($compose_mode) {\n    $isHtml = rcmail_compose_editor_mode();\n\n    if (!empty($MESSAGE->parts)) {\n      foreach ($MESSAGE->parts as $part) {\n        // skip no-content and attachment parts (#1488557)\n        if ($part->type != 'content' || !$part->size || $MESSAGE->is_attachment($part)) {\n          continue;\n        }\n\n        if ($part_body = rcmail_compose_part_body($part, $isHtml)) {\n          $body .= ($body ? ($isHtml ? '<br/>' : \"\\n\") : '') . $part_body;\n        }\n      }\n    }\n    else {\n      $body = rcmail_compose_part_body($MESSAGE, $isHtml);\n    }\n\n    // compose reply-body\n    if ($compose_mode == RCUBE_COMPOSE_REPLY)\n      $body = rcmail_create_reply_body($body, $isHtml);\n    // forward message body inline\n    else if ($compose_mode == RCUBE_COMPOSE_FORWARD)\n      $body = rcmail_create_forward_body($body, $isHtml);\n    // load draft message body\n    else if ($compose_mode == RCUBE_COMPOSE_DRAFT || $compose_mode == RCUBE_COMPOSE_EDIT)\n      $body = rcmail_create_draft_body($body, $isHtml);\n  }\n  else { // new message\n    $isHtml = rcmail_compose_editor_mode();\n  }\n\n  $plugin = $RCMAIL->plugins->exec_hook('message_compose_body',\n    array('body' => $body, 'html' => $isHtml, 'mode' => $compose_mode));\n  $body = $plugin['body'];\n  unset($plugin);\n\n  // add blocked.gif attachment (#1486516)\n  if ($isHtml && preg_match('#<img src=\"\\./program/resources/blocked\\.gif\"#', $body)) {\n    if ($attachment = rcmail_save_image('program/resources/blocked.gif', 'image/gif')) {\n      $COMPOSE['attachments'][$attachment['id']] = $attachment;\n      $url = sprintf('%s&_id=%s&_action=display-attachment&_file=rcmfile%s',\n        $RCMAIL->comm_path, $COMPOSE['id'], $attachment['id']);\n      $body = preg_replace('#\\./program/resources/blocked\\.gif#', $url, $body);\n    }\n  }\n\n  $HTML_MODE = $isHtml;\n\n  return $body;\n}\n\nfunction rcmail_compose_part_body($part, $isHtml = false)\n{\n    global $RCMAIL, $MESSAGE, $compose_mode;\n\n    // Check if we have enough memory to handle the message in it\n    // #1487424: we need up to 10x more memory than the body\n    if (!rcmail_mem_check($part->size * 10)) {\n        return '';\n    }\n\n    if (empty($part->ctype_parameters) || empty($part->ctype_parameters['charset'])) {\n        $part->ctype_parameters['charset'] = $MESSAGE->headers->charset;\n    }\n\n    // fetch part if not available\n    if (!isset($part->body)) {\n        $part->body = $MESSAGE->get_part_content($part->mime_id);\n    }\n\n    // message is cached but not exists (#1485443), or other error\n    if ($part->body === false) {\n        return '';\n    }\n\n    $body = $part->body;\n\n    if ($isHtml) {\n        if ($part->ctype_secondary == 'html') {\n        }\n        else {\n            // try to remove the signature\n            if ($RCMAIL->config->get('strip_existing_sig', true)) {\n                $body = rcmail_remove_signature($body);\n            }\n            // add HTML formatting\n            $body = rcmail_plain_body($body);\n            if ($body) {\n                $body = '<pre>' . $body . '</pre>';\n            }\n        }\n    }\n    else {\n        if ($part->ctype_secondary == 'html') {\n            // use html part if it has been used for message (pre)viewing\n            // decrease line length for quoting\n            $len = $compose_mode == RCUBE_COMPOSE_REPLY ? $LINE_LENGTH-2 : $LINE_LENGTH;\n            $txt = new html2text($body, false, true, $len);\n            $body = $txt->get_text();\n        }\n        else {\n            if ($part->ctype_secondary == 'plain' && $part->ctype_parameters['format'] == 'flowed') {\n                $body = rcube_mime::unfold_flowed($body);\n            }\n\n            // try to remove the signature\n            if ($RCMAIL->config->get('strip_existing_sig', true)) {\n                $body = rcmail_remove_signature($body);\n            }\n        }\n    }\n\n    return $body;\n}\n\nfunction rcmail_compose_body($attrib)\n{\n  global $RCMAIL, $CONFIG, $OUTPUT, $MESSAGE, $compose_mode, $LINE_LENGTH, $HTML_MODE, $MESSAGE_BODY;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n  unset($attrib['form']);\n\n  if (empty($attrib['id']))\n    $attrib['id'] = 'rcmComposeBody';\n\n  $attrib['name'] = '_message';\n\n  $isHtml = $HTML_MODE;\n\n  $out = $form_start ? \"$form_start\\n\" : '';\n\n  $saveid = new html_hiddenfield(array('name' => '_draft_saveid', 'value' => $compose_mode==RCUBE_COMPOSE_DRAFT ? str_replace(array('<','>'), \"\", $MESSAGE->headers->messageID) : ''));\n  $out .= $saveid->show();\n\n  $drafttoggle = new html_hiddenfield(array('name' => '_draft', 'value' => 'yes'));\n  $out .= $drafttoggle->show();\n\n  $msgtype = new html_hiddenfield(array('name' => '_is_html', 'value' => ($isHtml?\"1\":\"0\")));\n  $out .= $msgtype->show();\n\n  // If desired, set this textarea to be editable by TinyMCE\n  if ($isHtml) {\n    $MESSAGE_BODY = htmlentities($MESSAGE_BODY, ENT_NOQUOTES, RCMAIL_CHARSET);\n    $attrib['class'] = 'mce_editor';\n    $attrib['is_escaped'] = true;\n    $textarea = new html_textarea($attrib);\n    $out .= $textarea->show($MESSAGE_BODY);\n  }\n  else {\n    $textarea = new html_textarea($attrib);\n    $out .= $textarea->show('');\n    // quote plain text, inject into textarea\n    $table = get_html_translation_table(HTML_SPECIALCHARS);\n    $MESSAGE_BODY = strtr($MESSAGE_BODY, $table);\n    $out = substr($out, 0, -11) . $MESSAGE_BODY . '</textarea>';\n  }\n\n  $out .= $form_end ? \"\\n$form_end\" : '';\n\n  $OUTPUT->set_env('composebody', $attrib['id']);\n\n  // include HTML editor\n  rcube_html_editor();\n\n  // Set language list\n  if (!empty($CONFIG['enable_spellcheck'])) {\n    $engine           = $RCMAIL->config->get('spellcheck_engine','googie');\n    $dictionary       = (bool) $RCMAIL->config->get('spellcheck_dictionary');\n    $spellcheck_langs = (array) $RCMAIL->config->get('spellcheck_languages',\n      array('da'=>'Dansk', 'de'=>'Deutsch', 'en' => 'English', 'es'=>'Espa\u00f1ol',\n            'fr'=>'Fran\u00e7ais', 'it'=>'Italiano', 'nl'=>'Nederlands', 'pl'=>'Polski',\n            'pt'=>'Portugu\u00eas', 'ru'=>'\u0420\u0443\u0441\u0441\u043a\u0438\u0439', 'fi'=>'Suomi', 'sv'=>'Svenska'));\n\n    // googie works only with two-letter codes\n    if ($engine == 'googie') {\n      $lang = strtolower(substr($_SESSION['language'], 0, 2));\n\n      $spellcheck_langs_googie = array();\n      foreach ($spellcheck_langs as $key => $name)\n        $spellcheck_langs_googie[strtolower(substr($key,0,2))] = $name;\n        $spellcheck_langs = $spellcheck_langs_googie;\n    }\n    else {\n      $lang = $_SESSION['language'];\n\n      // if not found in the list, try with two-letter code\n      if (!$spellcheck_langs[$lang])\n        $lang = strtolower(substr($lang, 0, 2));\n    }\n\n    if (!$spellcheck_langs[$lang])\n      $lang = 'en';\n\n    $OUTPUT->set_env('spell_langs', $spellcheck_langs);\n    $OUTPUT->set_env('spell_lang', $lang);\n\n    $editor_lang_set = array();\n    foreach ($spellcheck_langs as $key => $name) {\n      $editor_lang_set[] = ($key == $lang ? '+' : '') . JQ($name).'='.JQ($key);\n    }\n\n    // include GoogieSpell\n    $OUTPUT->include_script('googiespell.js');\n    $OUTPUT->add_script(sprintf(\n      \"var googie = new GoogieSpell('%s/images/googiespell/','%s&lang=', %s);\\n\".\n      \"googie.lang_chck_spell = \\\"%s\\\";\\n\".\n      \"googie.lang_rsm_edt = \\\"%s\\\";\\n\".\n      \"googie.lang_close = \\\"%s\\\";\\n\".\n      \"googie.lang_revert = \\\"%s\\\";\\n\".\n      \"googie.lang_no_error_found = \\\"%s\\\";\\n\".\n      \"googie.lang_learn_word = \\\"%s\\\";\\n\".\n      \"googie.setLanguages(%s);\\n\".\n      \"googie.setCurrentLanguage('%s');\\n\".\n      \"googie.setDecoration(false);\\n\".\n      \"googie.decorateTextarea('%s');\\n\".\n      \"%s.set_env('spellcheck', googie);\",\n      $RCMAIL->output->get_skin_path(),\n      $RCMAIL->url(array('_task' => 'utils', '_action' => 'spell', '_remote' => 1)),\n      !empty($dictionary) ? 'true' : 'false',\n      JQ(Q(rcube_label('checkspelling'))),\n      JQ(Q(rcube_label('resumeediting'))),\n      JQ(Q(rcube_label('close'))),\n      JQ(Q(rcube_label('revertto'))),\n      JQ(Q(rcube_label('nospellerrors'))),\n      JQ(Q(rcube_label('addtodict'))),\n      json_serialize($spellcheck_langs),\n      $lang,\n      $attrib['id'],\n      JS_OBJECT_NAME), 'foot');\n\n    $OUTPUT->add_label('checking');\n    $OUTPUT->set_env('spellcheck_langs', join(',', $editor_lang_set));\n  }\n\n  $out .= \"\\n\".'<iframe name=\"savetarget\" src=\"program/resources/blank.gif\" style=\"width:0;height:0;border:none;visibility:hidden;\"></iframe>';\n\n  return $out;\n}\n\n\nfunction rcmail_create_reply_body($body, $bodyIsHtml)\n{\n  global $RCMAIL, $MESSAGE, $LINE_LENGTH;\n\n  // build reply prefix\n  $from = array_pop(rcube_mime::decode_address_list($MESSAGE->get_header('from'), 1, false, $MESSAGE->headers->charset));\n  $prefix = rcube_label(array(\n    'name' => 'mailreplyintro',\n    'vars' => array(\n      'date' => format_date($MESSAGE->headers->date, $RCMAIL->config->get('date_long')),\n      'sender' => $from['name'] ? $from['name'] : rcube_idn_to_utf8($from['mailto']),\n    )\n  ));\n\n  if (!$bodyIsHtml) {\n    $body = preg_replace('/\\r?\\n/', \"\\n\", $body);\n\n    // soft-wrap and quote message text\n    $body = rcmail_wrap_and_quote(rtrim($body, \"\\n\"), $LINE_LENGTH);\n\n    $prefix .= \"\\n\";\n    $suffix = '';\n\n    if ($RCMAIL->config->get('top_posting'))\n      $prefix = \"\\n\\n\\n\" . $prefix;\n  }\n  else {\n    // save inline images to files\n    $cid_map = rcmail_write_inline_attachments($MESSAGE);\n    // set is_safe flag (we need this for html body washing)\n    rcmail_check_safe($MESSAGE);\n    // clean up html tags\n    $body = rcmail_wash_html($body, array('safe' => $MESSAGE->is_safe), $cid_map);\n\n    // build reply (quote content)\n    $prefix = '<p>' . Q($prefix) . \"</p>\\n\";\n    $prefix .= '<blockquote>';\n\n    if ($RCMAIL->config->get('top_posting')) {\n      $prefix = '<br>' . $prefix;\n      $suffix = '</blockquote>';\n    }\n    else {\n      $suffix = '</blockquote><p></p>';\n    }\n  }\n\n  return $prefix.$body.$suffix;\n}\n\n\nfunction rcmail_create_forward_body($body, $bodyIsHtml)\n{\n  global $RCMAIL, $MESSAGE, $COMPOSE;\n\n  // add attachments\n  if (!isset($COMPOSE['forward_attachments']) && is_array($MESSAGE->mime_parts))\n    $cid_map = rcmail_write_compose_attachments($MESSAGE, $bodyIsHtml);\n\n  $date    = format_date($MESSAGE->headers->date, $RCMAIL->config->get('date_long'));\n  $charset = $RCMAIL->output->get_charset();\n\n  if (!$bodyIsHtml)\n  {\n    $prefix = \"\\n\\n\\n-------- \" . rcube_label('originalmessage') . \" --------\\n\";\n    $prefix .= rcube_label('subject') . ': ' . $MESSAGE->subject . \"\\n\";\n    $prefix .= rcube_label('date')    . ': ' . $date . \"\\n\";\n    $prefix .= rcube_label('from')    . ': ' . $MESSAGE->get_header('from') . \"\\n\";\n    $prefix .= rcube_label('to')      . ': ' . $MESSAGE->get_header('to') . \"\\n\";\n\n    if ($MESSAGE->headers->cc)\n      $prefix .= rcube_label('cc') . ': ' . $MESSAGE->get_header('cc') . \"\\n\";\n    if ($MESSAGE->headers->replyto && $MESSAGE->headers->replyto != $MESSAGE->headers->from)\n      $prefix .= rcube_label('replyto') . ': ' . $MESSAGE->get_header('replyto') . \"\\n\";\n\n    $prefix .= \"\\n\";\n  }\n  else\n  {\n    // set is_safe flag (we need this for html body washing)\n    rcmail_check_safe($MESSAGE);\n    // clean up html tags\n    $body = rcmail_wash_html($body, array('safe' => $MESSAGE->is_safe), $cid_map);\n\n    $prefix = sprintf(\n      \"<br /><p>-------- \" . rcube_label('originalmessage') . \" --------</p>\" .\n        \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody>\" .\n        \"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\" .\n        \"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\" .\n        \"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\" .\n        \"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\",\n      rcube_label('subject'), Q($MESSAGE->subject),\n      rcube_label('date'), Q($date),\n      rcube_label('from'), Q($MESSAGE->get_header('from'), 'replace'),\n      rcube_label('to'), Q($MESSAGE->get_header('to'), 'replace'));\n\n    if ($MESSAGE->headers->cc)\n      $prefix .= sprintf(\"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\",\n        rcube_label('cc'),\n        Q($MESSAGE->get_header('cc'), 'replace'));\n\n    if ($MESSAGE->headers->replyto && $MESSAGE->headers->replyto != $MESSAGE->headers->from)\n      $prefix .= sprintf(\"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\",\n        rcube_label('replyto'),\n        Q($MESSAGE->get_header('replyto'), 'replace'));\n\n    $prefix .= \"</tbody></table><br>\";\n  }\n\n  return $prefix.$body;\n}\n\n\nfunction rcmail_create_draft_body($body, $bodyIsHtml)\n{\n  global $MESSAGE, $OUTPUT, $COMPOSE;\n\n  /**\n   * add attachments\n   * sizeof($MESSAGE->mime_parts can be 1 - e.g. attachment, but no text!\n   */\n  if (empty($COMPOSE['forward_attachments'])\n      && is_array($MESSAGE->mime_parts)\n      && count($MESSAGE->mime_parts) > 0)\n  {\n    $cid_map = rcmail_write_compose_attachments($MESSAGE, $bodyIsHtml);\n\n    // replace cid with href in inline images links\n    if ($cid_map)\n      $body = str_replace(array_keys($cid_map), array_values($cid_map), $body);\n  }\n\n  return $body;\n}\n\n\nfunction rcmail_remove_signature($body)\n{\n  global $RCMAIL;\n\n  $body = str_replace(\"\\r\\n\", \"\\n\", $body);\n  $len  = strlen($body);\n  $sig_max_lines = $RCMAIL->config->get('sig_max_lines', 15);\n\n  while (($sp = strrpos($body, \"-- \\n\", $sp ? -$len+$sp-1 : 0)) !== false) {\n    if ($sp == 0 || $body[$sp-1] == \"\\n\") {\n      // do not touch blocks with more that X lines\n      if (substr_count($body, \"\\n\", $sp) < $sig_max_lines) {\n        $body = substr($body, 0, max(0, $sp-1));\n      }\n      break;\n    }\n  }\n\n  return $body;\n}\n\n\nfunction rcmail_write_compose_attachments(&$message, $bodyIsHtml)\n{\n  global $RCMAIL, $COMPOSE;\n\n  $cid_map = $messages = array();\n  foreach ((array)$message->mime_parts as $pid => $part)\n  {\n    if (($part->ctype_primary != 'message' || !$bodyIsHtml) && $part->ctype_primary != 'multipart' && \n        ($part->disposition == 'attachment' || ($part->disposition == 'inline' && $bodyIsHtml) || $part->filename)\n        && $part->mimetype != 'application/ms-tnef'\n    ) {\n      $skip = false;\n      if ($part->mimetype == 'message/rfc822') {\n        $messages[] = $part->mime_id;\n      } else if ($messages) {\n        // skip attachments included in message/rfc822 attachment (#1486487)\n        foreach ($messages as $mimeid)\n          if (strpos($part->mime_id, $mimeid.'.') === 0) {\n            $skip = true;\n            break;\n          }\n      }\n\n      if (!$skip && ($attachment = rcmail_save_attachment($message, $pid))) {\n        $COMPOSE['attachments'][$attachment['id']] = $attachment;\n        if ($bodyIsHtml && ($part->content_id || $part->content_location)) {\n          $url = sprintf('%s&_id=%s&_action=display-attachment&_file=rcmfile%s',\n            $RCMAIL->comm_path, $COMPOSE['id'], $attachment['id']);\n          if ($part->content_id)\n            $cid_map['cid:'.$part->content_id] = $url;\n          else\n            $cid_map[$part->content_location] = $url;\n        }\n      }\n    }\n  }\n\n  $COMPOSE['forward_attachments'] = true;\n\n  return $cid_map;\n}\n\n\nfunction rcmail_write_inline_attachments(&$message)\n{\n  global $RCMAIL, $COMPOSE;\n\n  $cid_map = array();\n  foreach ((array)$message->mime_parts as $pid => $part) {\n    if (($part->content_id || $part->content_location) && $part->filename) {\n      if ($attachment = rcmail_save_attachment($message, $pid)) {\n        $COMPOSE['attachments'][$attachment['id']] = $attachment;\n          $url = sprintf('%s&_id=%s&_action=display-attachment&_file=rcmfile%s',\n            $RCMAIL->comm_path, $COMPOSE['id'], $attachment['id']);\n        if ($part->content_id)\n          $cid_map['cid:'.$part->content_id] = $url;\n        else\n          $cid_map[$part->content_location] = $url;\n      }\n    }\n  }\n\n  return $cid_map;\n}\n\n// Creates an attachment from the forwarded message\nfunction rcmail_write_forward_attachment(&$message)\n{\n  global $RCMAIL, $COMPOSE;\n\n  if (strlen($message->subject)) {\n    $name = mb_substr($message->subject, 0, 64) . '.eml';\n  }\n  else {\n    $name = 'message_rfc822.eml';\n  }\n\n  $mem_limit = parse_bytes(ini_get('memory_limit'));\n  $curr_mem = function_exists('memory_get_usage') ? memory_get_usage() : 16*1024*1024; // safe value: 16MB\n  $data = $path = null;\n\n  // don't load too big attachments into memory\n  if ($mem_limit > 0 && $message->size > $mem_limit - $curr_mem) {\n    $temp_dir = unslashify($RCMAIL->config->get('temp_dir'));\n    $path = tempnam($temp_dir, 'rcmAttmnt');\n    if ($fp = fopen($path, 'w')) {\n      $RCMAIL->storage->get_raw_body($message->uid, $fp);\n      fclose($fp);\n    } else\n      return false;\n  } else {\n    $data = $RCMAIL->storage->get_raw_body($message->uid);\n  }\n\n  $attachment = array(\n    'group' => $COMPOSE['id'],\n    'name' => $name,\n    'mimetype' => 'message/rfc822',\n    'data' => $data,\n    'path' => $path,\n    'size' => $path ? filesize($path) : strlen($data),\n  );\n\n  $attachment = $RCMAIL->plugins->exec_hook('attachment_save', $attachment);\n\n  if ($attachment['status']) {\n    unset($attachment['data'], $attachment['status'], $attachment['content_id'], $attachment['abort']);\n    $COMPOSE['attachments'][$attachment['id']] = $attachment;\n    return true;\n  } else if ($path) {\n    @unlink($path);\n  }\n\n  return false;\n}\n\n\nfunction rcmail_save_attachment(&$message, $pid)\n{\n  global $COMPOSE;\n\n  $rcmail = rcmail::get_instance();\n  $part = $message->mime_parts[$pid];\n  $mem_limit = parse_bytes(ini_get('memory_limit'));\n  $curr_mem = function_exists('memory_get_usage') ? memory_get_usage() : 16*1024*1024; // safe value: 16MB\n  $data = $path = null;\n\n  // don't load too big attachments into memory\n  if ($mem_limit > 0 && $part->size > $mem_limit - $curr_mem) {\n    $temp_dir = unslashify($rcmail->config->get('temp_dir'));\n    $path = tempnam($temp_dir, 'rcmAttmnt');\n    if ($fp = fopen($path, 'w')) {\n      $message->get_part_content($pid, $fp);\n      fclose($fp);\n    } else\n      return false;\n  } else {\n    $data = $message->get_part_content($pid);\n  }\n\n  $mimetype = $part->ctype_primary . '/' . $part->ctype_secondary;\n  $filename = $part->filename;\n  if (!strlen($filename)) {\n    if ($mimetype == 'text/html') {\n      $filename = rcube_label('htmlmessage');\n    }\n    else {\n      $filename = 'Part_'.$pid;\n    }\n    $filename .= '.' . $part->ctype_secondary;\n  }\n\n  $attachment = array(\n    'group' => $COMPOSE['id'],\n    'name' => $filename,\n    'mimetype' => $mimetype,\n    'content_id' => $part->content_id,\n    'data' => $data,\n    'path' => $path,\n    'size' => $path ? filesize($path) : strlen($data),\n  );\n\n  $attachment = $rcmail->plugins->exec_hook('attachment_save', $attachment);\n\n  if ($attachment['status']) {\n    unset($attachment['data'], $attachment['status'], $attachment['content_id'], $attachment['abort']);\n    return $attachment;\n  } else if ($path) {\n    @unlink($path);\n  }\n\n  return false;\n}\n\nfunction rcmail_save_image($path, $mimetype='')\n{\n  global $COMPOSE;\n\n  // handle attachments in memory\n  $data = file_get_contents($path);\n\n  $attachment = array(\n    'group' => $COMPOSE['id'],\n    'name' => rcmail_basename($path),\n    'mimetype' => $mimetype ? $mimetype : rc_mime_content_type($path, $name),\n    'data' => $data,\n    'size' => strlen($data),\n  );\n\n  $attachment = rcmail::get_instance()->plugins->exec_hook('attachment_save', $attachment);\n\n  if ($attachment['status']) {\n    unset($attachment['data'], $attachment['status'], $attachment['content_id'], $attachment['abort']);\n    return $attachment;\n  }\n\n  return false;\n}\n\nfunction rcmail_basename($filename)\n{\n  // basename() is not unicode safe and locale dependent\n  if (stristr(PHP_OS, 'win') || stristr(PHP_OS, 'netware')) {\n    return preg_replace('/^.*[\\\\\\\\\\\\/]/', '', $filename);\n  } else {\n    return preg_replace('/^.*[\\/]/', '', $filename);\n  }\n}\n\nfunction rcmail_compose_subject($attrib)\n{\n  global $MESSAGE, $COMPOSE, $compose_mode;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n  unset($attrib['form']);\n\n  $attrib['name'] = '_subject';\n  $attrib['spellcheck'] = 'true';\n  $textfield = new html_inputfield($attrib);\n\n  $subject = '';\n\n  // use subject from post\n  if (isset($_POST['_subject'])) {\n    $subject = get_input_value('_subject', RCUBE_INPUT_POST, TRUE);\n  }\n  // create a reply-subject\n  else if ($compose_mode == RCUBE_COMPOSE_REPLY) {\n    if (preg_match('/^re:/i', $MESSAGE->subject))\n      $subject = $MESSAGE->subject;\n    else\n      $subject = 'Re: '.$MESSAGE->subject;\n  }\n  // create a forward-subject\n  else if ($compose_mode == RCUBE_COMPOSE_FORWARD) {\n    if (preg_match('/^fwd:/i', $MESSAGE->subject))\n      $subject = $MESSAGE->subject;\n    else\n      $subject = 'Fwd: '.$MESSAGE->subject;\n  }\n  // creeate a draft-subject\n  else if ($compose_mode == RCUBE_COMPOSE_DRAFT || $compose_mode == RCUBE_COMPOSE_EDIT) {\n    $subject = $MESSAGE->subject;\n  }\n  else if (!empty($COMPOSE['param']['subject'])) {\n    $subject = $COMPOSE['param']['subject'];\n  }\n\n  $out = $form_start ? \"$form_start\\n\" : '';\n  $out .= $textfield->show($subject);\n  $out .= $form_end ? \"\\n$form_end\" : '';\n\n  return $out;\n}\n\n\nfunction rcmail_compose_attachment_list($attrib)\n{\n  global $OUTPUT, $CONFIG, $COMPOSE;\n\n  // add ID if not given\n  if (!$attrib['id'])\n    $attrib['id'] = 'rcmAttachmentList';\n\n  $out = \"\\n\";\n  $jslist = array();\n\n  if (is_array($COMPOSE['attachments'])) {\n    if ($attrib['deleteicon']) {\n      $button = html::img(array(\n        'src' => $CONFIG['skin_path'] . $attrib['deleteicon'],\n        'alt' => rcube_label('delete')\n      ));\n    }\n    else\n      $button = Q(rcube_label('delete'));\n\n    foreach ($COMPOSE['attachments'] as $id => $a_prop) {\n      if (empty($a_prop))\n        continue;\n\n      $out .= html::tag('li', array('id' => 'rcmfile'.$id, 'class' => rcmail_filetype2classname($a_prop['mimetype'], $a_prop['name'])),\n        html::a(array(\n            'href' => \"#delete\",\n            'title' => rcube_label('delete'),\n            'onclick' => sprintf(\"return %s.command('remove-attachment','rcmfile%s', this)\", JS_OBJECT_NAME, $id),\n            'class' => 'delete'),\n          $button) . Q($a_prop['name']));\n\n        $jslist['rcmfile'.$id] = array('name' => $a_prop['name'], 'complete' => true, 'mimetype' => $a_prop['mimetype']);\n    }\n  }\n\n  if ($attrib['deleteicon'])\n    $COMPOSE['deleteicon'] = $CONFIG['skin_path'] . $attrib['deleteicon'];\n  if ($attrib['cancelicon'])\n    $OUTPUT->set_env('cancelicon', $CONFIG['skin_path'] . $attrib['cancelicon']);\n  if ($attrib['loadingicon'])\n    $OUTPUT->set_env('loadingicon', $CONFIG['skin_path'] . $attrib['loadingicon']);\n\n  $OUTPUT->set_env('attachments', $jslist);\n  $OUTPUT->add_gui_object('attachmentlist', $attrib['id']);\n\n  return html::tag('ul', $attrib, $out, html::$common_attrib);\n}\n\n\nfunction rcmail_compose_attachment_form($attrib)\n{\n  global $OUTPUT;\n\n  // set defaults\n  $attrib += array('id' => 'rcmUploadbox', 'buttons' => 'yes');\n\n  // Get filesize, enable upload progress bar\n  $max_filesize = rcube_upload_init();\n\n  $button = new html_inputfield(array('type' => 'button'));\n\n  $out = html::div($attrib,\n    $OUTPUT->form_tag(array('id' => $attrib['id'].'Frm', 'name' => 'uploadform', 'method' => 'post', 'enctype' => 'multipart/form-data'),\n      html::div(null, rcmail_compose_attachment_field(array('size' => $attrib['attachmentfieldsize']))) .\n      html::div('hint', rcube_label(array('name' => 'maxuploadsize', 'vars' => array('size' => $max_filesize)))) .\n      (get_boolean($attrib['buttons']) ? html::div('buttons',\n        $button->show(rcube_label('close'), array('class' => 'button', 'onclick' => \"$('#$attrib[id]').hide()\")) . ' ' .\n        $button->show(rcube_label('upload'), array('class' => 'button mainaction', 'onclick' => JS_OBJECT_NAME . \".command('send-attachment', this.form)\"))\n      ) : '')\n    )\n  );\n\n  $OUTPUT->add_gui_object('uploadform', $attrib['id'].'Frm');\n  return $out;\n}\n\n\nfunction rcmail_compose_attachment_field($attrib)\n{\n  $attrib['type'] = 'file';\n  $attrib['name'] = '_attachments[]';\n  $attrib['multiple'] = 'multiple';\n\n  $field = new html_inputfield($attrib);\n  return $field->show();\n}\n\n\nfunction rcmail_priority_selector($attrib)\n{\n  global $MESSAGE;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n  unset($attrib['form']);\n\n  $attrib['name'] = '_priority';\n  $selector = new html_select($attrib);\n\n  $selector->add(array(rcube_label('lowest'),\n                       rcube_label('low'),\n                       rcube_label('normal'),\n                       rcube_label('high'),\n                       rcube_label('highest')),\n                 array(5, 4, 0, 2, 1));\n\n  if (isset($_POST['_priority']))\n    $sel = $_POST['_priority'];\n  else if (intval($MESSAGE->headers->priority) != 3)\n    $sel = intval($MESSAGE->headers->priority);\n  else\n    $sel = 0;\n\n  $out = $form_start ? \"$form_start\\n\" : '';\n  $out .= $selector->show($sel);\n  $out .= $form_end ? \"\\n$form_end\" : '';\n\n  return $out;\n}\n\n\nfunction rcmail_receipt_checkbox($attrib)\n{\n  global $RCMAIL, $MESSAGE, $compose_mode;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n  unset($attrib['form']);\n\n  if (!isset($attrib['id']))\n    $attrib['id'] = 'receipt';\n\n  $attrib['name'] = '_receipt';\n  $attrib['value'] = '1';\n  $checkbox = new html_checkbox($attrib);\n\n  if (in_array($compose_mode, array(RCUBE_COMPOSE_DRAFT, RCUBE_COMPOSE_EDIT)))\n    $mdn_default = (bool) $MESSAGE->headers->mdn_to;\n  else\n    $mdn_default = $RCMAIL->config->get('mdn_default');\n\n  $out = $form_start ? \"$form_start\\n\" : '';\n  $out .= $checkbox->show($mdn_default);\n  $out .= $form_end ? \"\\n$form_end\" : '';\n\n  return $out;\n}\n\n\nfunction rcmail_dsn_checkbox($attrib)\n{\n  global $RCMAIL;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n  unset($attrib['form']);\n\n  if (!isset($attrib['id']))\n    $attrib['id'] = 'dsn';\n\n  $attrib['name'] = '_dsn';\n  $attrib['value'] = '1';\n  $checkbox = new html_checkbox($attrib);\n\n  $out = $form_start ? \"$form_start\\n\" : '';\n  $out .= $checkbox->show($RCMAIL->config->get('dsn_default'));\n  $out .= $form_end ? \"\\n$form_end\" : '';\n\n  return $out;\n}\n\n\nfunction rcmail_editor_selector($attrib)\n{\n  // determine whether HTML or plain text should be checked\n  $useHtml = rcmail_compose_editor_mode();\n\n  if (empty($attrib['editorid']))\n    $attrib['editorid'] = 'rcmComposeBody';\n\n  if (empty($attrib['name']))\n    $attrib['name'] = 'editorSelect';\n\n  $attrib['onchange'] = \"return rcmail_toggle_editor(this, '\".$attrib['editorid'].\"', '_is_html')\";\n\n  $select = new html_select($attrib);\n\n  $select->add(Q(rcube_label('htmltoggle')), 'html');\n  $select->add(Q(rcube_label('plaintoggle')), 'plain');\n\n  return $select->show($useHtml ? 'html' : 'plain');\n\n  foreach ($choices as $value => $text) {\n    $attrib['id'] = '_' . $value;\n    $attrib['value'] = $value;\n    $selector .= $radio->show($chosenvalue, $attrib) . html::label($attrib['id'], Q(rcube_label($text)));\n  }\n\n  return $selector;\n}\n\n\nfunction rcmail_store_target_selection($attrib)\n{\n  global $COMPOSE;\n\n  $attrib['name'] = '_store_target';\n  $select = rcmail_mailbox_select(array_merge($attrib, array(\n    'noselection' => '- '.rcube_label('dontsave').' -',\n    'folder_filter' => 'mail',\n    'folder_rights' => 'w',\n  )));\n  return $select->show($COMPOSE['param']['sent_mbox'], $attrib);\n}\n\n\nfunction rcmail_check_sent_folder($folder, $create=false)\n{\n  global $RCMAIL;\n\n  if ($RCMAIL->storage->folder_exists($folder, true)) {\n    return true;\n  }\n\n  // folder may exist but isn't subscribed (#1485241)\n  if ($create) {\n    if (!$RCMAIL->storage->folder_exists($folder))\n      return $RCMAIL->storage->create_folder($folder, true);\n    else\n      return $RCMAIL->storage->subscribe($folder);\n  }\n\n  return false;\n}\n\n\nfunction get_form_tags($attrib)\n{\n  global $RCMAIL, $MESSAGE_FORM, $COMPOSE;\n\n  $form_start = '';\n  if (!$MESSAGE_FORM)\n  {\n    $hiddenfields = new html_hiddenfield(array('name' => '_task', 'value' => $RCMAIL->task));\n    $hiddenfields->add(array('name' => '_action', 'value' => 'send'));\n    $hiddenfields->add(array('name' => '_id', 'value' => $COMPOSE['id']));\n    $hiddenfields->add(array('name' => '_attachments'));\n\n    $form_start = empty($attrib['form']) ? $RCMAIL->output->form_tag(array('name' => \"form\", 'method' => \"post\")) : '';\n    $form_start .= $hiddenfields->show();\n  }\n\n  $form_end = ($MESSAGE_FORM && !strlen($attrib['form'])) ? '</form>' : '';\n  $form_name = !empty($attrib['form']) ? $attrib['form'] : 'form';\n\n  if (!$MESSAGE_FORM)\n    $RCMAIL->output->add_gui_object('messageform', $form_name);\n\n  $MESSAGE_FORM = $form_name;\n\n  return array($form_start, $form_end);\n}\n\n\nfunction rcmail_addressbook_list($attrib = array())\n{\n    global $RCMAIL, $OUTPUT;\n\n    $attrib += array('id' => 'rcmdirectorylist');\n\n    $out = '';\n    $line_templ = html::tag('li', array(\n        'id' => 'rcmli%s', 'class' => '%s'),\n        html::a(array('href' => '#list',\n            'rel' => '%s',\n            'onclick' => \"return \".JS_OBJECT_NAME.\".command('list-adresses','%s',this)\"), '%s'));\n\n    foreach ($RCMAIL->get_address_sources() as $j => $source) {\n        $id = strval(strlen($source['id']) ? $source['id'] : $j);\n        $js_id = JQ($id);\n\n        // set class name(s)\n        $class_name = 'addressbook';\n        if ($source['class_name'])\n            $class_name .= ' ' . $source['class_name'];\n\n        $out .= sprintf($line_templ,\n            html_identifier($id),\n            $class_name,\n            $source['id'],\n            $js_id, (!empty($source['name']) ? Q($source['name']) : Q($id)));\n    }\n\n    $OUTPUT->add_gui_object('addressbookslist', $attrib['id']);\n\n    return html::tag('ul', $attrib, $out, html::$common_attrib);\n}\n\n// return the contacts list as HTML table\nfunction rcmail_contacts_list($attrib = array())\n{\n    global $OUTPUT;\n\n    $attrib += array('id' => 'rcmAddressList');\n\n    // set client env\n    $OUTPUT->add_gui_object('contactslist', $attrib['id']);\n    $OUTPUT->set_env('pagecount', 0);\n    $OUTPUT->set_env('current_page', 0);\n    $OUTPUT->include_script('list.js');\n\n    return rcube_table_output($attrib, array(), array('name'), 'ID');\n}\n\n\n/**\n * Register a certain container as active area to drop files onto\n */\nfunction compose_file_drop_area($attrib)\n{\n    global $OUTPUT;\n\n    if ($attrib['id']) {\n        $OUTPUT->add_gui_object('filedrop', $attrib['id']);\n        $OUTPUT->set_env('filedrop', array('action' => 'upload', 'fieldname' => '_attachments'));\n    }\n}\n\n\n// register UI objects\n$OUTPUT->add_handlers(array(\n  'composeheaders' => 'rcmail_compose_headers',\n  'composesubject' => 'rcmail_compose_subject',\n  'composebody' => 'rcmail_compose_body',\n  'composeattachmentlist' => 'rcmail_compose_attachment_list',\n  'composeattachmentform' => 'rcmail_compose_attachment_form',\n  'composeattachment' => 'rcmail_compose_attachment_field',\n  'filedroparea'    => 'compose_file_drop_area',\n  'priorityselector' => 'rcmail_priority_selector',\n  'editorselector' => 'rcmail_editor_selector',\n  'receiptcheckbox' => 'rcmail_receipt_checkbox',\n  'dsncheckbox' => 'rcmail_dsn_checkbox',\n  'storetarget' => 'rcmail_store_target_selection',\n  'addressbooks' => 'rcmail_addressbook_list',\n  'addresslist' => 'rcmail_contacts_list',\n));\n\n$OUTPUT->send('compose');\n"], "fixing_code": ["CHANGELOG Roundcube Webmail\n===========================\n\n- Fix XSS issue where plain signatures wasn't secured in HTML mode (#1488613)\n- Fix XSS issue where href=\"javascript:\" wasn't secured (#1488613)\n- Fix impossible to create message with empty plain text part (#1488610)\n- Fix stripped apostrophes when replying in plain text to HTML message (#1488606)\n- Fix inactive Save search option after advanced search (#1488607)\n- Fix Remove from group option is active for contact search result (#1488608)\n- Disable autocapitalization in login form on iPad/iPhone (#1488609)\n- Fix focus on the list when list row is clicked (#1488600)\n- Added separate From and To columns apart from smart From/To column (#1486891)\n- Fix fallback to Larry skin when configured skin isn't available (#1488591)\n- Fix (workaround) delete operations with some versions of memcache (#1488592)\n- Fix (disable) request validation for spell and spell_html actions\n- Add new DB abstraction layer based on PHP PDO, supporting SQLite3 (#1488332)\n- Removed PEAR::MDB2 package\n- Removed users.alias column, added option ('user_aliases')\n  to use email address from identities as username (#1488581)\n- Removed redundant cache.cache_id column (#1488528)\n- Fix order of attachments in sent mail (#1488423)\n- Fix Shift + delete button does not permanently delete messages (#1488243)\n- Add Content-Length for attachments where possible (#1485478)\n- Fix attachment sizes in message print page and attachment preview page (#1488515)\n- Add mail attachments using drag & drop on HTML5 enabled browsers\n- Add workaround for invalid BODYSTRUCTURE response - parse message with Mail_mimeDecode package (#1485585)\n- Display Tiff as Jpeg in browsers without Tiff support (#1488452)\n- Don't display Pdf/Tiff/Flash attachments inline without browser support (#1488452, #1487929)\n- Add is_escaped attribute for html_select and html_textarea (#1488485)\n- Fix issue where draft auto-save wasn't executed after some inactivity time\n- Add vCard import from multiple files at once (#1488015)\n- Roundcube Framework:\n    Add possibility to replace IMAP driver with custom class\n    Add IMAP auto-connection feature, improving performance with caching enabled\n    Replace imap_init hook with storage_init (with additional 'driver' argument)\n    Improved performance by caching IMAP server's capabilities in session\n    Unified global functions naming (rcube_ prefix)\n    Move global functions from main.inc and rcube_shared.inc into classes\n    Better classes separation\n\nRELEASE 0.8.0\n-------------\n- Don't show product version on login screen (can be enabled by config)\n- Renamed old default skin to 'classic'. Larry is the new default skin.\n- Support connections to memcached socket file (#1488577)\n- Enable TinyMCE inlinepopups plugin\n- Update to TinyMCE 3.5.6\n- Correctly escape localized labels in javascript variable (#1488567)\n- Update Net_SMTP/Auth_SASL packages to fix Digest-MD5/Cram-MD5 authentication (#1488571)\n- Don't add attachments content into reply/forward/draft message body (#1488557)\n- Fix 'no connection' errors on page unloads (#1488547)\n- Plugin API: Add 'unauthenticated' hook (#1488138)\n- Show explicit error message when provided hostname is invalid (#1488550)\n- Fix wrong compose screen elements focus in IE9 (#1488541)\n- Fix fatal error when date.timezone isn't set (#1488546)\n- Update to TinyMCE 3.5.4.1\n- Better icons with distinct shapes for priority columns (#1488377)\n- Show dedicated icon for multipart/report messages (#1488524)\n- Properly hide text of icon links/buttons (#1488534)\n- Fix handling of unitless CSS size values in HTML message (#1488535)\n- Fix removing contact photo using LDAP addressbook (#1488420)\n- Fix storing X-ANNIVERSARY date in vCard format (#1488527)\n- Update to Mail_Mime-1.8.5 (#1488521)\n- Fix XSS vulnerability in message subject handling using Larry skin (#1488519)\n- Fix handling of links with various URI schemes e.g. \"skype:\" (#1488106)\n- Fix handling of links inside PRE elements on html to text conversion\n- Fix indexing of links on html to text conversion\n- Decode header value in rcube_mime::get() by default (#1488511)\n- Fix errors with enabled PHP magic_quotes_sybase option (#1488506)\n- Fix SQL query for contacts listing on MS SQL Server (#1488505)\n- Fix window.resize handler on IE8 and Opera (#1488453)\n- Don't let error message popups cover the login form (#1488500)\n- Update to TinyMCE 3.5.2\n- Don't show errors when moving contacts into groups they are already in (#1488493)\n- Make folders with unread messages in subfolders bold again (#1486793)\n- Abbreviate long attachment file names with ellipsis (#1488499)\n- Fix html2text conversion of strong|b|a|th|h tags when used in upper case\n- Add listcontrols template container in Larry skin (#1488498)\n- Fix host autoselection when default_host is an array (#1488495)\n- Move messages forwarding mode setting into Preferences\n- Fix HTML entities handling in HTML editor (#1488483)\n- Fix listing shared folders on Courier IMAP (#1488466)\n\nRELEASE 0.8-rc\n--------------\n- Added new translations in Belarusian, Interlingua and Malayalam\n- Flipped compose options arrow (#1488474)\n- Fix handling of large uuencode attachments (#1488473)\n- Fix handling of \"usemap\" attribute (#1488472)\n- Fix handling of some HTML tags e.g. IMG (#1488471)\n- Use similar language as a fallback for plugin localization (#1488401)\n- Fix issue where signature wasn't re-added on draft compose (#1488322)\n- Update to TinyMCE 3.5 (#1488459)\n- Fixed multi-threaded autocompletion when number of threads > number of sources\n- Allow to configure the number of values allowed for each LDAP attribute\n- Support for serialized LDAP address values (usually delimited with a $)\n- Less restrictive session auth checks, repeat keep-alive requests on failure (#1488449)\n- Fix redirect to mail/compose on re-login (#1488226)\n- Add IE8 hack for messages list issue (#1487821)\n- Fix handling errors on draft auto-save\n- Fix importing vCard photo with ENCODING param specified (#1488432)\n- Support mutliple name/email pairs for Bcc and Reply-To identity settings (#1488445)\n- Set flexible width to login form fields (#1488418)\n- Fix re-draw bug on list columns change in IE8 (#1487822)\n- Allow mass-removal of addresses from a group (#1487748)\n- Fix removing all contacts on import to LDAP addressbook\n- Fix so \"Back\" from compose/show doesn't reset search request (#1488238)\n- Add option to delete messages instead of moving to Trash when in Junk folder (#1486686)\n- Fix invisible cursor when replying to a html message (#1487073)\n- Reset IP stored in session when destroying session data (#1488056)\n- Fix bug where memory_limit = -1 wasn't handled properly\n- Support LDAP RFC2256's country object class read/write (#1488123)\n- Upgraded to jQuery 1.7.2\n- Image resize with GD extension (#1488383)\n- Fix lack of warning when switching task in compose window (#1488399)\n- Fix bug where it wasn't possible to enter ( or & characters in autocomplete fields\n- Request all needed fields from address book backends (#1488394)\n- Unified (single) spellchecker button\n- Scroll long lists on drag&drop (#1485946)\n- Copy all skins in installto script (#1488376)\n\nRELEASE 0.8-beta\n----------------\n- Upgraded to jQuery 1.7.1 (#1488337) and jQuery UI 1.8.18\n- Add Russian to the spellchecker languages list (#1488135)\n- Remember custom skin selection after logout (#1488355)\n- Make sure About tab is always the last tab (#1488257)\n- Fix issue with folder creation under INBOX. namespace (#1488349)\n- Added mailto: protocol handler registration link in User Preferences (#1486580)\n- Handle identity details box with an iframe (#1487020)\n- Fix issue where some text from original message was missing on reply (#1488340)\n- Fix autoselect_host() for login (#1488297)\n- Changed license to GNU GPLv3+ with exceptions for skins & plugins\n- Added address book widget on compose screen\n- Use proper timezones from PHP's internal timezonedb (#1485592)\n- Add separate pagesize setting for mail messages and contacts (#1488269)\n- Deprecate $DB, $USER, $IMAP global variables, Use $RCMAIL instead\n- Add option to set default font for HTML message (#1484137)\n- Fix issues with big memory allocation of IMAP results\n- Prevent from memory_limit exceeding when trying to parse big messages bodies (#1487424)\n- Add possibility to add SASL mechanisms for SMTP in smtp_connect hook (#1487937)\n- Mark (with different color) folders with recent messages (#1486234)\n- Added About tab in Settings\n- TinyMCE updated to 3.4.6\n\nRELEASE 0.7.2\n-------------\n- Fix encoding of attachment with comma in name (#1488389)\n- Fix handling of % character in IMAP protocol (#1488382)\n- Fix duplicate names handling in addressbook searches (#1488375)\n- Fix displaying of HTML messages from Disqus (#1488372)\n- Disable E_STRICT warnings on PHP 5.4\n- Prevent from folder selection on virtual folder collapsing (#1488346)\n- Fix automatic unsubscribe of non-existent folders\n- Fix double-quotes handling in recipient names\n- User configurable setting how to display contact names in list\n- Make contacts list sorting configurable for the admin/user\n- Fix parse errors in DDL files for MS SQL Server\n- Revert SORT=DISPLAY support, removed by mistake (#1488327)\n- Add lost translation label in de_DE (#1488315)\n- Fix drafts update issues when edited from preview pane (#1488314)\n- Fix wrong variable name in rcube_ldap.php (#1488302)\n- Make mime type detection based on filename extension to be case-insensitive\n- Fix failure on MySQL database upgrade from 0.7 - text column can't have default value (#1488300)\n\n\nRELEASE 0.7.1\n-------------\n- Fix bug in handling of base href and inline content (#1488290)\n- Fix SQL Error when saving a contact with many email addresses (#1488286)\n- Fix strict email address searching if contact has more than one address\n- Remove duplicated 'organization' label (#1488287)\n- Fix so editor selector is hidden when 'htmleditor' is listed in 'dont_override'\n- Fix wrong (long) label usage (#1488283)\n- Fix handling of INBOX's subfolders in special folders config (#1488279)\n- Add ifModule statement for setting Options -Indexes in .htaccess file (#1488274)\n- Fix crashes with eAccelerator (#1488256)\n- Fix searching on IMAP servers without CHARSET specifier support (#1488271)\n- Fix expanding folders during drag&drop (#1488260)\n- Fix wrong postgres sequence name in upgrade from 0.6\n- Fix broken CREATE INDEX queries in SQLite DDL files (#1488255)\n\nRELEASE 0.7\n-----------\n- Make Roundcube render the Email Standards Project Acid Test correctly\n- Replace prompt() with jQuery UI dialog (#1485135)\n- Fix navigation in messages search results\n- Improved handling of some malformed values encoded with quoted-printable (#1488232)\n- Add possibility to do LDAP bind before searching for bind DN\n- Fix handling of empty <U> tags in HTML messages (#1488225)\n- Add content filter for embedded attachments to protect from XSS on IE (#1487895)\n- Use strpos() instead of strstr() when possible (#1488211)\n- Fix handling HTML entities when converting HTML to text (#1488212)\n- Fix fit_string_to_size() renders browser and ui unresponsive (#1488207)\n- Fix handling of invalid characters in request (#1488124)\n- Fix merging some configuration options in update.sh script (#1485864)\n- Fix so TEXT key will remove all HEADER keys in IMAP SEARCH (#1488208)\n- Fix handling contact photo url with https:// prefix (#1488202)\n- Fix possible infinite redirect on attachment preview (#1488199)\n- Improved clickjacking protection for browsers which don't support X-Frame-Options headers\n- Fixed bug where similar folder names were highlighted wrong (#1487860)\n- Fixed bug in handling link with '!' character in it (#1488195)\n- Fixed bug where session ID's length was limited to 40 characters (#1488196)\n- TinyMCE security issue: removed moxieplayer (embedding flv and mp4 is not supported anymore)\n\nRELEASE 0.7-beta\n----------------\n- Fix handling of HTML form elements in messages (#1485137)\n- Fix regression in setting recipient to self when replying to a Sent message (#1487074)\n- Fix listing of folders in hidden namespaces (#1486796)\n- Don't consider \\Noselect flag when building folders tree (#1488004)\n- Fix sorting autocomplete results (#1488084)\n- Add option to set session name (#1486433)\n- Add option to skip alternative email addresses in autocompletion\n- Fix inconsistent behaviour of Compose button in Drafts folder, add Edit button for drafts\n- Fix problem with parsing HTML message body with non-unicode characters (#1487813)\n- Add option to define matching method for addressbook search (#1486564, #1487907)\n- Make email recipients separator configurable\n- Fix so folders with \\Noinferiors attribute aren't listed in parent selector\n- Fix handling of curly brackets in URLs (#1488168)\n- Fix handling of dates (birthday/anniversary) in contact data (#1488147)\n- Fix error on opening searched LDAP contact (#1488144)\n- Fix redundant line break in flowed format (#1488146)\n- Fix IDN address validation issue (#1488137)\n- Fix JS error when dst_active checkbox doesn't exist (#1488133)\n- Autocomplete LDAP records when adding contacts from mail (#1488073)\n- Plugin API: added 'ready' hook (#1488063)\n- Ignore DSN request when it isn't supported by SMTP server (#1487800)\n- Make sure LDAP name fields aren't arrays (#1488108)\n- Fixed imap test to non-default port when using ssl (#1488118)\n- Force all files to be overwritten when updating (#1488117)\n- Fix issue where it wasn't possible to change list view mode in folder manager for INBOX (#1488107)\n- Fix namespace handling in special folders settings (#1488112)\n- Disable time limit for CLI scripts (#1488109)\n- Fix misleading display when chaning editor type (#1488104)\n- Add loading indicator on contact delete\n- Fix bug where after delete message rows can be added to the list of another folder (#1487752)\n- Add notice on autocompletion that not all records were displayed\n- Add option 'searchonly' for LDAP address books\n- Add Priority filter to the messages list\n- Cache synchronization using QRESYNC/CONDSTORE\n- Trigger 'new_messages' hook for all checked folders (#1488083)\n- Make date/time format user configurable; drop 'date_today' config option\n- Fix setting title for truncated subject in IE (#1487128)\n- Fix displaying multipart/alternative messages with only one part (#1487938)\n- Rewritten messages caching:\n  Indexes are stored in a separate table, so there's no need to store all messages in a folder\n  Added threads data caching\n  Flags are stored separately, so flag change doesn't cause DELETE+INSERT, just UPDATE\n- Improved FETCH response handling\n- Improvements in response tokenization method\n- Use 'From' and 'To' labels instead of 'Sender' and 'Recipient'\n- Fix username case-insensitivity issue in MySQL (#1488021)\n- Addressbook Saved Searches\n- Added spellchecker exceptions dictionary (shared or per-user)\n- Added possibility to ignore words containing caps, numbers, symbols (spellcheck_ignore_* options)\n- Added 'priority' column on messages list (#1486782)\n- Localize forwarded message header (#1488058)\n\nRELEASE 0.6\n-----------\n- Fix bug where the last identity is used on reply (#1488101)\n- Fix locked folder rename option on servers supporting RFC2086 only (#1488089)\n- Fix session race conditions when composing new messages\n- Fix encoding of LDAP contacts identifiers (#1488079)\n- jQuery 1.6.4\n- Fix handling of binary attachments encoded with quoted-printable (#1488065)\n- Fix text-overflow:ellipsis issues on messages list in FF7 and Webkit (#1488061)\n- Fix handling of links with IP address\n- Fix compacting folder resets message list filter (#1488076)\n\nRELEASE 0.6-rc\n----------------\n- Send X-Frame-Options headers to protect from clickjacking (#1487037)\n- Fallback to mail_domain in LDAP variable replacements; added 'host' to 'user_create' hook arguments (#1488024)\n- Fixed wrong vCard type parameter mobile (#1488067)\n- Fixed vCard WORKFAX issue (#1488046)\n- Add vCard's Profile URL support (#1488062)\n- jQuery 1.6.3\n- Fix imap_cache setting to values other than 'db' (#1488060)\n- Fix handling of attachments inside message/rfc822 parts (#1488026)\n- Make list of mimetypes that open in preview window configurable (#1487625)\n- Added plugin hook 'message_part_get' for attachment downloads\n- Added unique connection identifier to IMAP debug messages\n- Fix image type check for contact photo uploads\n\nRELEASE 0.6-beta\n----------------\n- Fixed selecting identity on reply/forward (#1487981)\n- Add option to hide selected LDAP addressbook on the list\n- Add client-side checking of uploaded files size\n- Add newlines between organization, department, jobtitle (#1488028)\n- Recalculate date when replying to a message and localize the cite header (#1487675)\n- Fix handling of email addresses with quoted local part (#1487939)\n- Fix EOL character in vCard exports (#1487873)\n- Added optional \"multithreading\" autocomplete feature\n- Plugin API: Added 'config_get' hook\n- Fixed new_user_identity plugin to work with updated rcube_ldap class (#1487994)\n- Plugin API: added folder_delete and folder_rename hooks\n- Added possibility to undo last contact delete operation\n- Fix sorting of contact groups after group create (#1487747)\n- Add optional textual upload progress indicator (#1486039)\n- Fix parsing URLs containing commas (#1487970)\n- Added vertical splitter for books/groups list in addressbook (#1487923)\n- Improved namespace roots handling in folder manager\n- Added searching in all addressbook sources\n- Added addressbook source selection in contacts import\n- Implement LDAPv3 Virtual List View (VLV) for paged results listing\n- Use 'address_template' config option when adding a new address block (#1487944)\n- Added addressbook advanced search\n- Add popup with basic fields selection for addressbook search\n- Case-insensitive matching in autocompletion (#1487933)\n- Added option to force spellchecking before sending a message (#1485458)\n- Fix handling of \"<\" character in contact data, search fields and folder names (#1487864)\n- Fix saving \"<\" character in identity name and organization fields (#1487864)\n- Added option to specify to which address book add new contacts\n- Added plugin hook for keep-alive requests\n- Store user preferences in session when write-master is not available and session is stored in memcache, write them later\n- Improve performence of folder manager operations\n- Fix default_port option handling in Installer when config.inc.php file exists (#1487925)\n- Removed option focus_on_new_message, added newmail_notifier plugin\n- Added general rcube_cache class with Memcache and APC support\n- Improved caching performance by skipping writes of unchanged data\n- Option enable_caching replaced by imap_cache and messages_cache options\n- Fix WORKFAX saving in address book (#1487910)\n- Add forward-as-attachment feature\n- jQuery-1.6.2 (#1487913, #1487144)\n- Improve display name composition when saving contacts (#1487143)\n- Fix problems with subfolders of INBOX folder on some IMAP servers (#1487725)\n- Fix handling of folders that doesn't belong to any namespace (#1487637)\n- Enable multiselection for attachments uploading in capable browsers (#1485969)\n- Add possibility to change HTML editor configuration by skin\n- Fix a bug where selecting too many contacts would produce too large URI request (#1487892)\n- Improve performance by including files with absolute path (#1487849)\n- Move folder name truncation to client/skin (#1485412)\n- Added plugin hook for request token creation\n- Replace LDAP vars in group queries (#1487837)\n- Fix vcard folding with uncode characters (#1487868)\n- Keep all submitted data if contact form validation fails (#1487865)\n- Handle uncode strings in rcube_addressbook::normalize_string() (#1487866)\n- Fix handling of debug_level=4 in ajax requests (#1487831)\n- Enable TinyMCE's contextmenu (#1487014)\n- Allow multiple concurrent compose sessions\n- New config option for custom logo\n- Allow skins to define/override texts with <roundcube:label />\n- Add simple ACL rights/namespace handling in folder manager\n- Force IE to send referers (#1487806)\n- Better display of vcard import results (#1485457)\n- Improved vcard import\n- Interactive update script with improved DB schema check\n- Fix problem with contactgroupmembers table creation on MySQL 4.x, add index on contact_id column\n- Add LDAP SASL bind and proxy authentication (#1486692)\n- Replying to a sent message puts the old recipient as the new recipient (#1487074)\n- Fulltext search over (almost) all data for contacts\n- Extend address book with rich contact information\n\nRELEASE 0.5.4\n-------------\n- Fix XSS vulnerability in UI messages (#1488030)\n\nRELEASE 0.5.3\n-------------\n- Fix identities \"reply-to\" and \"bcc\" fields have a bogus value when left empty (#1487943)\n- Fix issue which cases IMAP disconnection when encrypt() method was used (#1487900)\n- Fix some CSS issues in Settings for Internet Explorer \n- Fixed handling of folder with name \"0\" in folder selector\n- Fix bug where messages were deleted instead moved to trash folder after Shift key was used (#1487902)\n- Fix relative URLs handling according to a <base> in HTML (#1487889)\n- Fix handling of top-level domains with more than 5 chars or unicode chars (#1487883)\n- Fix usage of non-standard HTTP error codes (#1487797)\n- Fix PHP warning on mistaken in_array() usage (#1487901)\n\nRELEASE 0.5.2\n-------------\n- TinyMCE 3.4.2 now compatible with IE9\n- PEAR::Net_SMTP 1.5.2, fixed timeout issue (#1487843)\n- Fix bug where template name without plugin prefix was used in render_page hook\n- Support 'abort' and 'result' response in 'preferences_save' hook, add error handling\n- Fix bug where some content would cause hang on html2text conversion (#1487863)\n- Improve space-stuffing handling in format=flowed messages (#1487861)\n- Fix bug where some dates would produce SQL error in MySQL (#1487856)\n- Added workaround for some IMAP server with broken STATUS response (#1487859)\n- Fix bug where default_charset was not used for text messages (#1487836)\n- Stateless request tokens. No keep-alive necessary on login page (#1487829)\n- Force names of unique constraints in PostgreSQL DDL\n- Add code for prevention from IMAP connection hangs when server closes socket unexpectedly\n- Remove redundant DELETE query (for old session deletion) on login\n- Get around unreliable rand() and mt_rand() in session ID generation (#1486281)\n- Fix some emails are not shown using Cyrus IMAP (#1487820)\n- Fix handling of mime-encoded words with non-integral number of octets in a word (#1487801)\n- Fix parsing links with non-printable characters inside (#1487805)\n- Fixed de_CH Localization bugs (#1487773)\n- Add variable for 'Today' label in date_today option (#1486120)\n- Fix dont_override setting does not override existing user preferences (#1487664)\n- Use only one from IMAP authentication methods to prevent login delays (1487784)\n- Support strftime format in date_today option\n- Fix SQL query in rcube_user::query() so it uses index on MySQL again\n- Removed redundant </form> tags from contact add/edit pages\n- Fix CSS error in contact details screen on IE7 (#1487775)\n\nRELEASE 0.5.1\n-------------\n- Fix handling of attachments with invalid content type (#1487767)\n- Add workaround for DBMail's bug http://www.dbmail.org/mantis/view.php?id=881 (#1487766)\n- Use IMAP's ID extension (RFC2971) to print more info into debug log\n- Security: add optional referer check to prevent CSRF in GET requests\n- Fix email_dns_check setting not used for identities/contacts (#1487740)\n- Fix ICANN example addresses doesn't validate (#1487742)\n- Security: protect login form submission from CSRF\n- Security: prevent from relaying malicious requests through modcss.inc\n- Fix handling of non-image attachments in multipart/related messages (#1487750)\n- Fix IDNA support when IDN/INTL modules are in use (#1487742)\n- Fix handling of invalid HTML comments in messages (#1487759)\n- Fix parsing FETCH response for very long headers (#1487753)\n- Fix add/remove columns in message list when message_sort_order isn't set (#1487751)\n- Check mime headers before attempt to parse them (#1487745)\n- Quote header values in show_additional_headers plugin (#1487744)\n- Fix settings UI on IE 6 (#1487724)\n- Remove double borders in folder listing (#1487713)\n- Separate full message headers UI element from headers table (#1487715)\n- Add part MIME ID to message_part_* hooks (#1487718) \n- Improve parsing of MS Outlook vCards (#1487716)\n- Updated PEAR::Net_Socket to 1.0.10\n- Updated PEAR::Net_IDNA2 to 0.1.1\n- Fix handling of comments inside an email address spec. (#1487673)\n- Show full mail subject as title when hovering a cut subject link (#1487128)\n- Fix randomly disappearing folders list in IE (#1487704)\n- Fix list column add/removal in IE (#1487703)\n- Fix login redirect issues (#1487686)\n- Require PHP 5.2.1 or greater\n- Fix %h/%z variables in username_domain option (#1487701)\n- Workaround for setting charset in case of malformed bodystructure response (#1487700)\n- Fix impossible to subscribe to protected folders (#1487656)\n- Fix setting timezone in Preferences (#1487705)\n\nRELEASE 0.5\n-----------\n- Fix double-login/session issue (#1487104)\n- Wrap HTML parts with <html><body> and add Doctype declaration (#1487098)\n- Make rcube_autoload silently skip unknown classes (#1487109)\n- Fix charset detection in vcards with encoded values (#1485542)\n- Better CSS cursors for splitters (#1486874)\n- Show the same message only once (#1487641)\n- Fix namespaces handling (#1487649)\n- Add handling of multifolder METADATA/ANNOTATION responses\n- Fix handling of INBOX when personal namespace prefix is non-empty (#1487657)\n- Fix handling square brackets in links (#1487672)\n- Add description of 'use_https' option in main.inc.php.dist file\n\nRELEASE 0.5-RC\n--------------\n- Plugin API: Add 'pass' argument in 'authenticate' hook (#1487134)\n- Fix attachments of type message/rfc822 are not listed on attachments list\n- Add 'login_lc' config option for case-insensitive authentication (#1487113)\n- Fix window is blur'ed in IE when selecting a message (#1487316)\n- Fix cursor position on compose form in Webkit browsers (#1486674)\n- Fix setting charset of attachment filenames (#1487122)\n- Allow setting autocomplete attribute for all inputs separately (#1487313)\n- New Folder Manager UI\n- Fix invalid Request when creating a folder (#1487443)\n- Add folder size and quota indicator in folder manager (#1485780)\n- Add possibility to move a subfolder into root folder (#1486791)\n- Fix copying all messages in a folder copies only messages from current page\n- Improve performance of moving or copying of all messages in a folder\n- Fix plaintext versions of HTML messages don't contain placeholders for emotions (#1485206)\n- Improve performance of folder rename and delete actions\n- Better support for READ-ONLY and NOPERM responses handling (#1487083)\n- Add confirmation message on purge/expunge command response\n- Fix handling of untagged responses for AUTHENTICATE command (#1487450)\n- Add username and IP address to log message on unsuccessful login (#1487626)\n- Improved Mail-Followup-To and Mail-Reply-To headers handling\n- Fix charset conversion for text attachments without charset specification (#1487634)\n\nRELEASE 0.5-BETA\n----------------\n- Make session data storage more robust against garbage session data (#1487136)\n- Config option for autocomplete on login screen\n- Allow plugin templates to include local files (#1487133)\n- List groups in address detail view and allow to subscribe/unsubscribe from there (#1486753)\n- Messages caching: performance improvements, fixed syncing, fixes related with #1486748\n- Add link to identities in compose window (#1486729)\n- Add Internationalized Domain Name (IDNA) support (#1483894)\n- Add option to automatically send read notifications for known senders (#1485883)\n- Add option to \"Return receipt\" will be always checked (#1486352)\n- Fix HTML to plain text conversion doesn't handle citation blocks (#1486921)\n- Use custom sorting when SORT is disabled by IMAP admin (#1486959)\n- Allow setting some washtml options from plugin (#1486578)\n- Add option do bind for an individual LDAP address book (#1486997)\n- Change reply prefix to display email address only if sender name doesn't exist (#1486550)\n- Plugin API: improved 'abort' flag handling, added 'result' item in some hooks (#1486914)\n- Fix mailto optional params in plain text messages aren't handled (#1487026)\n- Add Reply-to-List feature (#1484252)\n- Add Mail-Followup-To/Mail-Reply-To support (#1485547)\n- Fix confirmation message isn't displayed after sending mail on Chrome (#1486177)\n- Fix keyboard doesn't work with autocomplete list with Chrome (#1487029)\n- Improve tabs to fixed width and add tabs in identities info (#1486974)\n- Add unique index on users.username+users.mail_host\n- Make htmleditor option more consistent and add option to use HTML on reply to HTML message (#1485840)\n- Use empty envelope sender address for message disposition notifications (RFC 2298.3)\n- Support SMTP Delivery Status Notifications - RFC 3461 (#1486142)\n- Use css sprite image for messages list\n- Add (different) attachment icon for messages of type multipart/report (#1486165)\n- Prevent from inserting empty link when composing HTML message (#1486944)\n- Add caching support in id2uid and uid2id functions (#1487019)\n- Add SASL proxy authentication for SMTP (#1486693)\n- Improve displaying of UI messages (#1486977)\n- Fix double e-mail filed in identity form (#1487054)\n- Display IMAP errors for LIST/THREAD/SEARCH commands (#1486905)\n- Add LITERAL+ (IMAP4 non-synchronizing literals) support (RFC 2088)\n- Add separate column for message status icon (#1486665)\n- Add ACL extension support into IMAP classes (RFC 4314)\n- Add ANNOTATEMORE extension support into IMAP classes (draft-daboo-imap-annotatemore)\n- Add METADATA extension support into IMAP classes (RFC 5464)\n- Fix decoding of e-mail address strings in message headers (#1487068)\n- Fix handling of attachments when Content-Disposition is not inline nor attachment (#1487051)\n- Improve performance of unseen messages counting (#1487058)\n- Improve performance of messages counting using ESEARCH extension (RFC4731)\n- Add LIST-STATUS support in rcube_imap_generic class (RFC 5819)\n- Add SASL-IR support in IMAP (RFC 4959)\n- Add LOGINDISABLED support (RFC 2595)\n- Add support for AUTH=PLAIN in IMAP authentication\n- Re-implemented SMTP proxy authentication support\n- Add support for IMAP proxy authentication (#1486690)\n- Add support for AUTH=DIGEST-MD5 in IMAP (RFC 2831)\n- Fix parent folder with unread subfolder not bold when message is open (#1487078)\n- Add basic IMAP LIST's \\Noselect option support\n- Add support for selection options from LIST-EXTENDED extension (RFC 5258)\n- Don't list subscribed but non-existent folders (#1486225)\n- Fix handling of URLs with tilde (~) or semicolon (;) character (#1487087, #1487088)\n- Plugin API: added 'contact_form' hook\n- Add SORT=DISPLAY support (RFC 5957)\n- Plugin API: add possibility to disable plugin in AJAX mode, 'noajax' property\n- Plugin API: add possibility to disable plugin in framed mode, 'noframe' property\n- Improve performance of setting IMAP flags using .SILENT suffix\n- Improve performance of message cache status checking with skip_disabled=true\n- Support contact's email addresses up to 255 characters long (#1487095)\n- Add option to place replies in the folder of the message being replied to (#1485945)\n- Add missing confirmation/error messages on contact/group/message actions (#1486845)\n- Add 'loading' message on message move/copy/delete/mark actions\n- Improve responsiveness of messages displaying (#1486986)\n- Add option for minimum length of autocomplete's string (#1486428)\n- Fix operations on messages in unsubscribed folder (#1487107)\n- Add support for shared folders (#1403507)\n- Fix handling of folders with name \"0\" (#1487119)\n- Fix handling of folders with \"<>\" characters in name\n- jQuery 1.4.4\n- Fix handling of HTML entity strings in plain text messages\n- Fix focused elements aren't unfocused when clicking on the list (#1487123)\n- Fix error in MSSQL DDL scripts (#1487112)\n- Lock submit button in onsubmit event on login page (#1487036)\n- Don't set attachment's charset in Content-type header (#1487122)\n- Fix handling of message bodies (quoted-printable encoded) with NULL characters (#1486189)\n- Add workaround for MSOE's multipart/related messages with non-related attachments\n\nRELEASE 0.4.2\n-------------\n- Fix handling of backslash as IMAP delimiter\n- Fix charset replacement in HTML message bodies (#1487021)\n- Fix: contact group input is empty when using rename action more than once on the same group record\n- Fix \"Server Error! (Not Found)\" when using utils/save-pref action (#1487023)\n- Fix handling of Thunderbird's vCards (#1487024)\n\nRELEASE 0.4.1\n-------------\n- Fix space-stuffing in format=flowed messages (#1487018)\n- Fix msgexport.sh now using the new imap wrapper\n- Avoid displaying password on shell (#1486947)\n- Only lower-case user name if first login attempt failed (#1486393)\n- Make alias setting in squirrelmail_usercopy plugin configurable (patch by pommi, #1487007)\n- Prevent from saving a non-existing skin path in user prefs (#1486936)\n- Improve handling of single-part messages with bogus BODYSTRUCTURE (#1486898)\n- Fix path to SQL files when using pgsql/mysqli/sqlsrv drivers (#1486902)\n- Fix upgrade script for SQLite (#1486903)\n- Fixes in SQL init script + added update script for MSSQL database\n- Remove redundant date in syslog messages (#1486945)\n- Fix contacts list page controls when a group is selected (#1486946)\n- Fix SMTP test in Installer (#1486952)\n- Fix \"Select all\" causes message to be opened in folder with exactly one message (#1486913)\n- Fix Tab key doesn't work in HTML editor in Google Chrome (#1486925)\n- Fix TinyMCE uses zh_CN when zh_TW locale is set (#1486929)\n- Fix TinyMCE buttons are hidden in Opera (#1486922)\n- Fix JS error on IE when trying to send HTML message with enabled spellchecker (#1486940)\n- Display inline images with known extensions and non-image content-type (#1486934)\n- Fix \"Threaded\" checkbox after subfolder creation (#1486928)\n- Fix timezone string in sent mail (#1486961)\n- Show disabled checkboxes for protected folders instead of dots (#1485498)\n- Added fieldsets in Identity form, added 'identity_form' hook\n- Re-added 'Close' button in upload form (#1486930, #1486823)\n- Fix handling of charsets with LATIN-* label\n- Fix messages background image handling in some cases (#1486990)\n- Fix format=flowed handling (#1486989)\n- Fix when IMAP connection fails in 'get' action session shouldn't be destroyed (#1486995)\n- Fix list_cols is not updated after column dragging (#1486999)\n- Support %z variable in host configuration options (#1487003)\n\nRELEASE 0.4\n-----------\n- Fix disapearing upload form disapears when user selects a file on Safari (#1486823)\n- Don't replace error messages with loading info (#1486300)\n- Fix JS errors on compose mode switch (#1486870)\n- Fix message structure parsing when it lacks optional fields (#1486881)\n- Include all recipients in sendmail log\n- Support HTTP_X_FORWARDED_PROTO header for HTTPS detecting (#1486866)\n- Fix default IMAP port configuration (#1486864)\n- Create Sent folder when starting to compose a new message (#1486802)\n- Fix handling of messages with Content-Type: application/* and no filename (#1484050)\n- Improved compose screen: resizable body and attachments list, vertical splitter, options menu\n- Fix RC forgets search results (#1483883)\n- TinyMCE 3.3.7\n- Improve parsing of styled empty tags in HTML messages (#1486812)\n- Add %dc variable support in base_dn/bind_dn config (#1486779)\n- Add button to hide/unhide the preview pane (#1484215)\n- Fix no-cache headers on https to prevent content caching by proxies (#1486798)\n- Fix attachment filenames broken with TNEF decoder using long filenames (#1486795)\n- Use user's timezone in Date header, not server's timezone (#1486119)\n- Add option to set separate footer for HTML messages (#1486660)\n- Add real SMTP error description to displayed error messages (#1485927)\n- Fix some IMAP errors handling when opening the message (#1485443)\n- Fix related parts aren't displayed when got mimetype other than image/* (#1486432)\n- Multiple identity and database support for squirrelmail_usercopy plugin (#1486517)\n- Support dynamic hostname (%d/%n) variables in configuration options (#1485438)\n- Add 'messages_list' hook (#1486266)\n- Add request* event triggers in http_post/http_request (#1486054)\n- Fix use RFC-compliant line-delimiter when saving messages on IMAP (#1486712)\n- Add 'imap_timeout' option (#1486760)\n- Fix forwarding of messages with winmail attachments\n- Fix handling of uuencoded attachments in message body (#1485839)\n- Added list_mailboxes hook in rcube_imap::list_unsubscribed() (#1486668)\n- Fix wrong message on file upload error (#1486725)\n- Add support for data URI scheme [RFC2397] (#1486740)\n- Added 'actionbefore', 'actionafter', 'responsebefore', 'responseafter' events\n- Fix double-addition of e-mail domain to content ID in HTML images\n- Read and send messages with format=flowed (#1484370), fixes word wrapping issues (#1486543)\n- Fix duplicated attachments when forwarding a message (#1486487)\n- Fix message/rfc822 attachments containing only attachments are not parsed properly (#1486743)\n- Fix %00 character in winmail.dat attachments names (#1486738)\n- Fix handling errors of folder deletion (#1486705)\n- Parse untagged CAPABILITY response for LOGIN command (#1486742)\n- Renamed all php-cli scripts to use .sh extension\n- Some files from /bin + spellchecking actions moved to the new 'utils' task\n- Added thread tree icons\n- Extend contact groups support (#1486682)\n- Fix check-recent action issues and performance (#1486526)\n- Fix messages order after checking for recent (#1484664)\n- Fix autocomplete shows entries without email (#1486452)\n- Fix listupdate event doesn't trigger on search response (#1486708)\n- Fix select_all_mode value after selecting a message (#1486720)\n- Set focus to editor on reply in HTML mode (#1486632)\n- Fix composing in HTML jumps cursor to body instead of recipients (#1486674)\n- Allow columns order change per user - drag&drop (#1485795)\n- Add References header in read receipt (#1486681)\n- Fix database constraint violation when opening a message (#1486696)\n- Add 'loading' message while login is in progress (#1486667)\n- Fix quota_zero_as_unlimited (#1486662)\n- Fix folder subscription checking (#1486684)\n- Fix INBOX appears (sometimes) twice in mailbox list (#1486672)\n- Fix listing of attachments of some types e.g. \"x-epoc/x-sisx-app\" (#1486653)\n- Fix DB Schema checking when some db_table_* options are not set (#1486654)\n\nRELEASE 0.4-beta\n----------------\n- Add sizelimit and timelimit variables in LDAP config (#1486544)\n- Hide IMAP host dropdown when single host is defined (#1486326)\n- Add images pre-loading on login page (#1451160)\n- Add HTTP_X_REAL_IP and HTTP_X_FORWARDED_FOR to successful logins log (#1486441)\n- Fix setting spellcheck languages with extended codes (#1486605)\n- Fix messages list scrolling in FF3.6 (#1486472)\n- Fix quicksearch input focus (#1486637)\n- Always set changed date when flagging a DB record as deleted + provide a cleanup script\n- Fix address book/group selection (#1486619)\n- Assign newly created contacts to the active group (#1486626)\n- Added option not to mark messages as read when viewed in preview pane (#1485012)\n- Allow plugins modify the Sent folder when composing (#1486548)\n- Added optional (max_recipients) support to restrict total number of recipients per message (#1484542)\n- Re-organize editor buttons, add blockquote and search buttons\n- Make possible to write inside or after a quoted html message (#1485476)\n- Fix bugs on unexpected IMAP connection close (#1486190, #1486270)\n- Iloha's imap.inc rewritten into rcube_imap_generic class\n- Added contact groups in address book (not finished yet)\n- Added PageUp/PageDown/Home/End keys support on lists (#1486430)\n- Added possibility to select all messages in a folder (#1484756)\n- Added 'imap_force_caps' option for after-login CAPABILITY checking (#1485750)\n- Password: Support dovecotpw encryption\n- TinyMCE 3.3.1\n- Implemented messages copying using drag&drop + SHIFT (#1484086)\n- Improved performance of folders operations (#1486525)\n- Fix blocked.gif attachment is not attached to the message (#1486516)\n- Managesieve: import from Horde-INGO\n- Managesieve: support for more than one match (#1486078)\n- Managesieve: support for selectively disabling rules within a single sieve script (#1485882)\n- Threaded message listing now available\n- Added sorting by ARRIVAL and CC\n- Message list columns configurable by the user\n- Removed 'index_sort' option, now we're using empty 'message_sort_col' for this\n- virtuser_query: support other identity data (#1486148)\n- Options virtuser_* replaced with virtuser_* plugins\n- Plugin API: Implemented 'email2user' and 'user2email' hooks\n- Fix forwarding message omits CC header (#1486305)\n- Add 'default_charset' option to user preferences (#1485451)\n- Add 'delete_always' option to user preferences\n- Support/Require tls:// prefix in 'smtp_server' option for TLS connections\n- Fix inconsistent behaviour of 'delete_always' option (#1486299)\n- Fix deleting all messages from last list page (#1486293)\n- Flag original messages when sending a draft (#1486203)\n- Changed signature separator when top-posting (#1486330)\n- Let the admin define defaults for search modifiers (#1485897)\n- Fix long e-mail addresses validation (#1486453)\n- Remember search modifiers in user prefs (#1486146)\n- Added force_7bit option to force MIME encoding of plain/text messages (#1486510)\n- Use case sensitive check when checking for default folders (#1486346)\n- Fix checking for new mail: now checks unseen count of inbox (#1485794)\n- Improve performance by avoiding unnecessary updates to the session table (#1486325)\n- Fix invalid <font> tags which cause HTML message rendering problems (#1486521)\n- Fix CVE-2010-0464: Disable DNS prefetching (#1486449)\n- Fix Received headers to behave better with SpamAssassin (#1486513)\n- Password: Make passwords encoding consistent with core, add 'password_charset' global option (#1486473)\n- Fix adding contacts SQL error on mysql (#1486459)\n- Squirrelmail_usercopy: support reply-to field (#1486506)\n- Fix IE spellcheck suggestion popup issue (#1486471)\n- Fix email address auto-completion shows regexp pattern (#1486258)\n- Fix merging of configuration parameters: user prefs always survive (#1486368) \n- Fix quota indicator value after folder purge/expunge (#1486488)\n- Fix external mailto links support for use as protocol handler (#1486037)\n- Fix attachment excessive memory use, support messages of any size (#1484660)\n- Fix setting task name according to auth state\n- Password: fix vpopmaild driver (#1486478)\n- Add workaround for MySQL bug [http://bugs.mysql.com/bug.php?id=46293] (#1486474)\n- Fix quoted text wrapping when replying to an HTML email in plain text (#1484141)\n- Fix handling of extended mailto links (with params) (#1486354)\n- Fix sorting by date of messages without date header on servers without SORT (#1486286)\n- Fix inconsistency when not using default table names (#1486467)\n- Fix folder rename/delete buttons do not appear on creation of first folder (#1486468)\n- Fix character set conversion fails on systems where iconv doesn't accept //IGNORE (#1486375)\n- Log in performance: Create default folders on first login only\n- Import contacts into the selected address book (by Phil Weir)\n- Add support for MDB2's 'sqlsrv' driver (#1486395)\n- Use jQuery-1.4\n- Removed problematic browser-caching of messages\n- Fix incompatybility with suhosin.executor.disable_emodifier (#1486321)\n- Use PLAIN auth when CRAM fails and imap_auth_type='check' (#1486371)\n- Fix removal of <title> tag from HTML messages (#1486432)\n- Fix 'force_https' to specified port when URL contains a port number (#1486411)\n- Fix to-text converting of HTML entities inside b/strong/th/hX tags (#1486422)\n- Bug in spellchecker suggestions when server charset != UTF8 (#1486406)\n- Managesieve: Fix requires generation for multiple actions (#1486397)\n- Fix LDAP problem with special characters in RDN (#1486320)\n- Improved handling of message parts of type message/rfc822\n- Plugin API: added 'quota' hook\n- Fix parsing conditional comments in HTML messages (#1486350)\n- Use built-in json_encode() for proper JSON format in AJAX replies\n- Allow setting only selected params in 'message_compose' hook (#1486312)\n- Plugin API: added 'message_compose_body' hook (#1486285)\n- Fix counters of all folders are checked in 'getunread' action  with check_all_folders disabled (#1486128)\n- Fix displaying alternative parts in messages of type message/rfc822 (#1486246)\n- Fix possible messages exposure when using Roundcube behind a proxy (#1486281)\n- Fix unicode para and line separators in javascript response (#1486310)\n- Additional_message_headers: allow unsetting headers, support plugin's config file (#1486268)\n- Fix displaying of hidden directories in skins list (#1486301)\n- Fix open_basedir restriction error when reading skins list (#1486304)\n- Fix pasting from Office apps into html editor (#1486271)\n- Fix empty <a> tags parsing (#1486272)\n- Don't cut off attachment names when using non-RFC2231 encoding (#1485515)\n- Allow inserting signatures above replied message body (#1484272)\n- Managesieve 2.0: multi-script support\n- Fix imap_auth_type regression (#1486263)\n\nRELEASE 0.3.1\n------------------\n- Specify toolbar container in compose template (#1486247)\n- Fix $_SERVER['HTTPS'] check for SSL forcing on IIS (#1486243)\n- Avoid unnecessary page loads for selected tab (#1486032)\n- Fix quota indicator issues by content generation on client-size (#1486197, #1486220)\n- Don't display disabled sections in Settings (#1486099)\n- Added server-side e-mail address validation with 'email_dns_check' option (#1485857)\n- Fix login page loading into an iframe when session expires (#1485952)\n- Allow setting port number in 'force_https' option (#1486091)\n- Option 'force_https' replaced by 'force_https' plugin\n- Fix IE issue with non-UTF-8 characters in AJAX response (#1486159)\n- Partially fixed \"empty body\" issue by showing raw body of malformed message (#1486166)\n- Fix importing/sending to email address with whitespace (#1486214)\n- Added XIMSS (CommuniGate) driver for Password plugin\n- Fix newly attached files are not saved in drafts w/o editing any text (#1486202)\n- Added attachment upload indicator with parallel upload (#1486058)\n- Use default_charset for bodies of messages without charset definition (#1486187)\n- Password: added cPanel driver\n- Fix return to first page from e-mail screen (#1486105)\n- Fix handling HTML comments in HTML messages (#1486189)\n- Fix folder/messagelist controls alignment - icons used (#1486072)\n- Fix LDAP addressbook shows 'Contact not found' error sometimes (#1486178)\n- Fix cache status checking + improve cache operations performance (#1486104)\n- Prevent from setting INBOX as any of special folders (#1486114)\n- Fix regular expression for e-mail address (#1486152)\n- Fix Received header format\n- Implemented sorting by message index - added 'index_sort' option (#1485936)\n- Fix dl() use in installer (#1486150)\n- Added 'ldap_debug' option\n- Fix \"Empty startup greeting\" bug (#1486085)\n- Fix setting user name in 'new_user_identity' plugin (#1486137)\n- Fix incorrect count of new messages in folder list when using multiple IMAP clients (#1485995)\n- Fix all folders checking for new messages with disabled caching (#1486128)\n- Support skins in 'archive' and 'markasjunk' plugins\n- Added 'html_editor' hook (#1486068)\n- Fix DB constraint violation when populating messages cache (#1486052)\n- Password: added password strength options (#1486062)\n- Fix LDAP partial result warning (#1485536)\n- Fix delete in message view deletes permanently with flag_for_deletion=true (#1486101)\n- Use faster/secure mt_rand() (#1486094)\n- Fix roundcube hangs on empty inbox with bincimapd (#1486093)\n- Fix wrong headers for IE on servers without $_SERVER['HTTPS'] (#1485926)\n- Force IE style headers for attachments in non-HTTPS session, 'use_https' option (#1485655)\n- Check 'post_max_size' for upload max filesize (#1486089) \n- Password Plugin: Fix %d inserts username instead of domain (#1486088)\n- Fix rcube_mdb2::affected_rows() (#1486082)\n\nRELEASE 0.3-stable\n------------------\n- Fix gn and givenName should be synonymous in LDAP addressbook (#1485892)\n- Add mail_domain to LDAP email entries without @ sign (#1485201)\n- Fix saving empty values in LDAP contact data (#1485781)\n- Fix LDAP contact update when RDN field is changed (#1485788)\n- Fix LDAP attributes case senitivity problems (#1485830)\n- Fix LDAP addressbook browsing when only one directory is used (#1486022)\n- Fix endless loop on error response for APPEND command (#1486060)\n- Don't require date.timezone setting in installer (#1485989)\n- Fix date sorting problem with Courier IMAP server (#1486065)\n- Unselect pressed buttons on mouse up (#1485987)\n- Don't set php_value error_log in .htaccess but mention in INSTALL (#1485924)\n- Fix too small status/flag/attachment columns in Safari 4 (#1486063)\n- Fix selection disabling while dragging splitter in webkit browsers (#1486056)\n- Added 'new_messages' plugin hook (#1486005)\n- Added 'logout_after' plugin hook (#1486042)\n- Added 'message_compose' hook\n- Added 'imap_connect' hook (#1485956)\n- Fix vcard_attachments plugin (#1486035)\n- Updated PEAR::Auth_SASL to 1.0.3 version\n- Use sequence names only with PostgreSQL (#1486018)\n- Re-designed User Preferences interface \n- Fix MS SQL DDL (#1486020)\n- Fix rcube_mdb2.php: call to setCharset not implemented in mssql driver (#1486019)\n- Added 'display_next' option\n- Fix rcube_mdb2::unixtimestamp for MS SQL (#1486015)\n- Fix HTML washing to respect character encoding\n- Fix endless loop in iil_C_Login() with Courier IMAP (#1486010)\n- Fix #messagemenu display on IE (#1486006)\n- Speedup UI by using sprites for (toolbar) buttons\n- Fix charset names with X- prefix handling\n- Fix displaying of HTML messages with unknown/malformed tags (#1486003)\n\nRELEASE 0.3-RC1\n---------------\n- Fix import of vCard entries with params (#1485453)\n- Fix HTML messages output with empty block elements (#1485974)\n- Use request tokens to protect POST requests from CSRF\n- Added hook when killing a session\n- Added hook to write_log function (#1485971)\n- Performance improvements by use UID commands (#1485690)\n- Fix HTML editor tabIndex setting (#1485972)\n- Added 'imap_debug' and 'smtp_debug' options\n- Support strftime's format modifiers in date_* options (#1484806)\n- Support %h variable in 'smtp_server' option (#1485766)\n- Show SMTP errors in browser (#1485927)\n- Allow WBR tag in HTML message (#1485960)\n- Use spl_autoload_register() instead of __autoload (#1485947)\n- Add hook for identities listing (#1485958)\n- Trigger hook 'smtp_connect' when opening an SMTP connection (#1485954)\n- Added config option to enforce HTTPS connections\n- Fix non-unicode characters caching in unicode database (#1484608)\n- Performance improvements of messages caching\n- Fix empty Date header issue (#1485923)\n- Open collapsed folders during drag & drop (#1485914)\n- Fixed link text replacements (#1485789)\n- Also trigger 'insertrow' events on page load (#1485826)\n- No link on subject in IE browsers (#1484913)\n- Fixed filename encoding according to RFC2231 (#1485875)\n- Added message Edit feature (#1483891, #1484440)\n- Fix message Etag generation for counter issues (#1485623)\n- Fix messages searching on MailEnable IMAP (#1485762)\n- Fixed many 'skip_deleted' issues (#1485634)\n- Fixed messages list sorting on servers without SORT capability\n- Colorized signatures in plain text messages\n- Reviewed/fixed skip_deleted/read_when_deleted/flag_for_deletion options handling in UI\n- Fix displaying of big maximum upload filesize (#1485889)\n- Added possibility to invert messages selection\n- After move/delete from 'show' action display next message instead of messages list (#1485887)\n- Fixed problem with double quote at the end of folder name (#1485884)\n- Speedup UI by using CSS sprites and etags/expires/deflate in Apache config (#1484858,#1485800)\n- Support UID EXPUNGE: remove only moved/deleted messages\n- Add drag cancelling with ESC key (#1484344)\n- Support initial identity name from virtuser_query (#1484003)\n- Added message menu, removed Print and Source buttons\n- Added possibility to save message as .eml file (#1485861)\n- Added 1 minute interval in autosave options (#1485854)\n- Support UTF-7 encoding in messages (#1485832)\n- Better support for malformed character names (#1485758)\n\nRELEASE 0.3-BETA\n----------------\n- Plugin API + jQuery engine\n- Added possibility to encrypt received header, option 'http_received_header_encrypt',\n  added some more logic in encrypt/decrypt functions for security\n- Fix Answered/Forwarded flag setting for messages in subfolders\n- Fix autocomplete problem with capital letters (#1485792)\n- Support UUencode content encoding (#1485839)\n- Minimize chance of race condition in session handling (#1485659, #1484678)\n- Fix session handling on non-session SQL query error (#1485734)\n- Fix html editor mode setting when reopening draft message (#1485834)\n- Added quick search box menu (#1484304)\n- Fix wrong column sort order icons (#1485823)\n- Updated TinyMCE to 3.2.3 version\n- Fix attachment names encoding when charset isn't specified in attachment part (#1484969)\n- Fix message normal priority problem (#1485820)\n- Fix autocomplete spinning wheel does not disappear (#1485804)\n- Added log_date_format option (#1485709)\n- Fix text wrapping in HTML editor after switching from plain text to HTML (#1485521)\n- Fix auto-complete function hangs with plus sign (#1485815)\n- Fix AJAX requests errors handler (#1485000)\n- Speed up message list displaying on IE\n- Fix read/write database recognition (#1485811)\n\nRELEASE 0.2.2\n-------------\n- Fix quicksearchbox look in Chrome and Konqueror (#1484841)\n- Fix UTF-8 byte-order mark removing (#1485514)\n- Fix folders subscribtions on Konqueror (#1484841) \n- Fix debug console on Konqueror and Safari\n- Fix messagelist focus issue when modifying status of selected messages (#1485807)\n- Support STARTTLS in IMAP connection (#1485284)\n- Fix DEL key problem in search boxes (#1485528)\n- Support several e-mail addresses per user from virtuser_file (#1485678)\n- Fix drag&drop with scrolling on IE (#1485786)\n- Fix adding signature separator in html mode (#1485350)\n- Fix opening attachment marks message as read (#1485803)\n- Fix 'temp_dir' does not support relative path under Windows (#1484529)\n- Fix \"Initialize Database\" button missing from installer (#1485802)\n- Fix compose window doesn't fit 1024x768 window (#1485396)\n- Fix service not available error when pressing back from compose dialog (#1485552)\n- Fix using mail() on Windows (#1485779)\n- Fix word wrapping in message-part's <PRE>s for printing (#1485787)\n- Fix incorrect word wrapping in outgoing plaintext multibyte messages (#1485714)\n- Fix double footer in HTML message with embedded images\n- Fix TNEF implementation bug (#1485773)\n- Fix incorrect row id parsing for LDAP contacts list (#1485784) \n- Fix 'mode' parameter in sqlite DSN (#1485772)\n\nRELEASE 0.2.1\n------------------\n- Use US-ASCII as failover when Unicode searching fails (#1485762)\n- Fix errors handling in IMAP command continuations (#1485762)\n- Fix FETCH result parsing for servers returning flags at the end of result (#1485763)\n- Fix datetime columns defaults in mysql's DDL (#1485641)\n- Fix attaching more than nine inline images (#1485759)\n- Support 'UNICODE-1-1-UTF-7' alias for UTF-7 encoding (#1485758)\n- Fix mime-type detection using a hard-coded map (#1485311)\n- Don't return empty string if charset conversion failed (#1485757)\n- Disable concurrent autocomplete query results display (#1485743)\n- Fix new lines stripped from message footer (#1485751)\n- Fix IE problem with mouse click autocomplete (#1485739)\n- Fix html body washing on reply/forward + fix attachments handling (#1485676)\n- Fix multiple recipients input parsing (#1485733)\n- Fix replying to message with html attachment (#1485676)\n- Use default_charset for messages without specified charset (#1485661, #1484961)\n- Support non-standard \"GMT-XXXX\" literal in date header (#1485729)\n- Added TNEF support to decode MS Outlook attachments (winmail.dat)\n- Fix \"value continuation\" MIME headers by adding required semicolon (#1485727)\n- Fix pressing select all/unread multiple times (#1485723)\n- Fix selecting all unread does not honor new messages (#1485724)\n- Fix some base64 encoded attachments handling (#1485725)\n- Support NGINX as IMAP backend: better BAD response handling (#1485720)\n- Performance fix: don't fetch attachment parts headers twice to parse filename\n- Fix checking for recent messages on various IMAP servers (#1485702)\n- Performance fix: Don't fetch quota and recent messages in \"message view\" mode\n- Fix displaying of alternative-inside-alternative messages (#1485713)\n- Fix MDNSent flag checking, use arbitrary keywords (asterisk) flag (#1485706)\n- Fix creation of folders with '&' sign in name\n- Fix parsing of email addresses without angle brackets (#1485693)\n- Save spellcheck corrections when switching from plain to html editor (and spellchecking is on)\n- Fix large search results on server without SORT capability (#1485668)\n- Get rid of preg_replace() with eval modifier and create_function usage (#1485686)\n- Bring back <base> and <link> tags in HTML messages\n- Fix XSS vulnerability through background attributes as reported by Julien Cayssol\n- Fix problems with backslash as IMAP hierarchy delimiter (#1484467)\n- Secure vcard export by getting rid of preg's 'e' modifier use (#1485689)\n- Fix authentication when submitting form with existing session (#1485679)\n- Allow absolute URLs to images in HTML messages/sigs (#1485666)\n- Fix message body which contains both inline attachments and emotions\n- Fix SQL query execution errors handling in rcube_mdb2 class (#1485509)\n- Fix address names with '@' sign handling (#1485654)\n- Improve messages display performance\n- Fix messages searching with 'to:' modifier\n\nRELEASE 0.2-STABLE\n------------------\n- Fix mark popup in IE 7 (#1485369)\n- Fix line-break issue when copy & paste in Firefox (#1485425)\n- Fix autocomplete \"unknown server error\" (#1485637)\n- Fix STARTTLS before AUTH in SMTP connection (#1484883)\n- Support multiple quota values in QUOTAROOT resonse (#1485626)\n- Only abbreviate file name for IE < 7 browsers (#1485063)\n- Performance: allow setting imap rootdir and delimiter before connect (#1485172)\n- Fix sorting of folders with more than 2 levels (#1485569)\n- Fix search results page jumps in LDAP addressbook (#1485253)\n- Fix empty line before the signature in IE (#1485351)\n- Fix horizontal scrollbar in preview pane on IE (#1484633)\n- Add Robots meta tag in login page and installer (#1484846)\n- Added 'show_images' option, removed 'addrbook_show_images' (#1485597)\n- Option to check for new mails in all folders (#1484374)\n- Don't set client busy when checking for new messages (#1485276)\n- Allow UTF-8 folder names in config (#1485579)\n- Add junk_mbox option configuration in installer (#1485579)\n- Do serverside addressbook queries for autocompletion (#1485531)\n- Allow setting attachment col position in 'list_cols' option\n- Allow override 'list_cols' via skin (#1485577)\n- Fix 'cache' table cleanup on session destroy (#1485516)\n- Increase speed of session destroy and garbage clean up\n- Fix session timeout when DB server got clock skew (#1485490)\n- Fix handling of some malformed messages (#1484438)\n- Speed up raw message body handling\n- Better HTML entities conversion in html2text (#1485519)\n- Fix big memory consumption and speed up searching on servers without SORT capability\n- Fix setting locale to tr_TR, ku and az_AZ (#1485470) \n- Use SORT for searching on servers with SORT capability\n- Added message status filter\n- Fix empty file sending (#1485389)\n- Improved searching with many criterias (calling one SEARCH command)\n- Fix HTML editor initialization on IE (#1485304)\n- Add warning when switching editor mode from html to plain (#1485488)\n- Make identities list scrollable (#1485538)\n- Fix problem with numeric folder names (#1485527)\n- Added BYE response simple support to prevent from endless loops in imap.inc (#1483956)\n- Fix unread message unintentionally marked as read if read_when_deleted=true (#1485409)\n- Remove port number from SERVER_NAME in smtp_helo_host (#1485518)\n- Don't send disposition notification receipts for messages marked as 'read' (#1485523)\n- Added 'keep_alive' and 'min_keep_alive' options (#1485360)\n- Added option 'identities_level', removed 'multiple_identities'\n- Allow deleting identities when multiple_identities=false (#1485435)\n- Added option focus_on_new_message (#1485374)\n- Fix html2text class autoloading on Windows (#1485505)\n- Fix html signature formatting when identity save error occured (#1485426)\n- Add feedback and set busy when moving folder (#1485497)\n- Fix 'Empty' link visibility for some languages e.g. Slovak (#1485489)\n- Fix messages count bar overlapping (#1485270)\n- Fix adding signature in drafts compose mode (#1485484)\n- Fix iil_C_Sort() to support very long and/or divided responses (#1485283)\n- Fix matching case sensitivity when setting identity on reply (#1485480)\n- Prefer default identity on reply\n- Fix imap searching on ISMail server (#1485466)\n- Add css class for flagged messages (#1485464)\n- Write username instead of id in sendmail log (#1485477)\n- Fix htmlspecialchars() use for PHP version < 5.2.3 (#1485475)\n- Fix js keywords escaping in json_serialize() for IE/Opera (#1485472)\n- Added bin/killcache.php script (#1485434)\n- Add support for SJIS, GB2312, BIG5 in rc_detect_encoding()\n- Fix vCard file encoding detection for non-UTF-8 strings (#1485410)\n- Add 'skip_deleted' option in User Preferences (#1485445)\n- Minimize \"inline\" javascript scripts use (#1485433)\n- Fix css class setting for folders with names matching defined classes names (#1485355)\n- Fix race conditions when changing mailbox\n- Fix spellchecking when switching to html editor (#1485362)\n- Fix compose window width/height (#1485396)\n- Allow calling msgimport.sh/msgexport.sh from any directory (#1485431)\n- Localized filesize units (#1485340)\n- Better handling of \"no identity\" and \"no email in identity\" situations (#1485117)\n- Added 'mime_param_folding' option with possibility to choose long/non-ascii attachment names encoding eg. to be readable in MS Outlook/OE (#1485320)\n- Added \"advanced options\" feature in User Preferences\n- Fix unread counter when displaying cached massage in preview panel (#1485290)\n- Fix htmleditor spellchecking on MS Windows (#1485397)\n- Fix problem with non-ascii attachment names in Mail_mime (#1485267, #1485096)\n- Fix language autodetection (#1485401)\n- Fix button label in folders management (#1485405)\n- Fix collapsed folder not indicating unread msgs count of all subfolders (#1485403)\n- Fix handling of apostrophes in filenames decoded according to rfc2231\n\nRELEASE 0.2-BETA\n----------------\n- Made config files location configurable (#1485215)\n- Reduced memory footprint when forwarding attachments (#1485345)\n- Allow and use spellcheck attribute for input/textarea fields (#1485060)\n- Added icons for forwarded/forwarded+replied messages (#1485257)\n- Added Reply-To to forwarded emails (#1485315)\n- Display progress message for folders create/delete/rename (#1485357)\n- Smart Tags and NOBR tag support in html messages (#1485363, #1485327)\n- Redesign of the identities settings (#1484042)\n- Add config option to disable creation/deletion of identities (#1484498)\n- Added 'sendmail_delay' option to restrict messages sending interval (#1484491)\n- Added vertical splitter for folders list resizing\n- Added possibility to view all headers in message view\n- Fixed splitter drag/resize on Opera (#1485170)\n- Fixed quota img height/width setting from template (#1484857)\n- Refactor drag & drop functionality. Don't rely on browser events anymore (#1484453)\n- Insert \"virtual\" folders in subscription list (#1484779)\n- Added link to open message in new window\n- Enable export of address book contacts as vCard\n- Add feature to import contacts from vcard files (#1326103)\n- Respect Content-Location headers in multipart/related messages according to RFC2110 (#1484946)\n- Allowed max. attachment size now indicated in compose screen (#1485030)\n- Also capture backspace key in list mode (#1484566)\n- Allow application/pgp parts to be displayed (#1484753)\n- Correctly handle options in mailto-links (#1485228)\n- Immediately save sort_col/sort_order in user prefs (#1485265)\n- Truncate very long (above 50 characters) attachment filenames when displaying\n- Allow to auto-detect client language if none set (#1484434)\n- Auto-detect the client timezone (user configurable)\n- Add RFC2231 header value continuations support for attachment filenames + hack for servers that not support that feature\n- Fix Reply-To header displaying (#1485314)\n- Mark form buttons that provide the most obvious operation (mainaction)\n- Added option 'quota_zero_as_unlimited' (#1484604)\n- Added PRE handling in html2text class (#1484740)\n- Added folder hierarchy collapsing\n- Added options to use syslog instead of log file (#1484850)\n- Added Logging & Debugging section in Installer\n- Fix In-Reply-To and References headers when composing saved draft message (#1485288)\n- Fix html message charset conversion for charsets with underline (#1485287) \n- Fix buttons status after contacts deletion (#1485233)\n- Fix escaping of To: and From: fields when building message body for reply or forward in the HTML editor (#1484904)\n- Use current mailbox name in template (#1485256)\n- Better fix for skipping untagged responses (#1485261)\n- Added pspell support patch by Kris Steinhoff (#1483960)\n- Enable spellchecker for HTML editor (#1485114)\n- Respect spellcheck_uri in tinyMCE spellchecker (#1484196)\n- Case insensitive contacts searching using PostgreSQL (#1485259)\n- Make default imap folders configurable for each user (#1485075)\n- Save outgoing mail to selectable folder (#1324581)\n- Fix hiding of mark menu when clicking th button again (#1484944)\n- Use long date format in print mode (#1485191)\n- Updated TinyMCE to version 3.1.0.1\n- Re-enable autocomplete attribute for login form (#1485211)\n- Check PERMANENTFLAGS before saving $MDNSent flag (#1484963, #1485163)\n- Added flag column on messages list (#1484623)\n- Patched Mail/MimePart.php (http://pear.php.net/bugs/bug.php?id=14232)\n- Allow trash/junk subfolders to be purged (#1485085)\n- Store compose parameters in session and redirect to a unique URL\n- Fixed CRAM-MD5 authentication (#1484819)\n- Fixed forwarding messages with one HTML attachment (#1484442)\n- Fixed encoding of message/rfc822 attachments and image/pjpeg handling (#1484914)\n- Added option to select skin in user preferences\n- Added option to configure displaying of attached images below the message body\n- Added option to display images in messages from known senders (#1484601)\n- User preferences grouped in more fieldsets\n- Fix corrupted MIME headers of messages in Sent folder (#1485111)\n- Fixed bug in MDB2 package: http://pear.php.net/bugs/bug.php?id=14124\n- Use keypress instead of keydown to select list's row (#1484816)\n- Don't call expunge and don't remove message row after message move if flag_for_deletion is set to true (#1485002)\n\nRELEASE 0.2-ALPHA\n-----------------\n- Added option to disable autocompletion from selected LDAP address books (#1484922)\n- TLS support in LDAP connections: 'use_tls' property (#1485104)\n- Fixed removing messages from search set after deleting them (#1485106)\n- imap.inc: Fixed iil_C_FetchStructureString() to handle many \n  literal strings in response (#1484969)\n- Support for subfolders in default/protected folders (#1484665)\n- Disallowed delimiter in folder name (#1484803)\n- Support \" and \\ in folder names\n- Escape \\ in login (#1484614)\n- Better HTML sanitization with the DOM-based washtml script (#1484701)\n- Fixed sorting of folders with non-ascii characters\n- Fixed Mysql DDL for default identities creation (#1485070)\n- In Preferences added possibility to configure 'read_when_deleted',\n  'mdn_requests', 'flag_for_deletion' options\n- Made IMAP auth type configurable (#1483825)\n- Fixed empty values with FROM_UNIXTIME() in rcube_mdb2 (#1485055)\n- Fixed attachment list on IE 6/7 (#1484807)\n- Fixed JavaScript in compose.html that shows cc/bcc fields if populated\n- Make password input fields of type password in installer (#1484886)\n- Don't attempt to delete cache entries if enable_caching is FALSE (#1485051)\n- Optimized messages sorting on servers without sort capability (#1485049)\n- Corrected message headers decoding when charset isn't specified and improved\n  support for native languages (#1485050, #1485048)\n- Expanded LDAP configuration options to support LDAP server writes.\n- Installer: encode special characters in DB username/password (#1485042)\n- Fixed management of folders with national characters in names (#1485036, #1485001)\n- Fixed identities saving when using MDB2 pgsql driver (#1485032)\n- Fixed BCC header reset (#1484997)\n- Improved messages list performance - patch from Justin Heesemann\n- Append skin_path to images location only when it starts with '/' sign (#1484859)\n- Fix IMAP response in message body when message has no body (#1484964)\n- Fixed non-RFC dates formatting (#1484901)\n- Fixed typo in set_charset() (#1484991)\n- Decode entities when inserting HTML signature to plain text message (#1484990)\n- HTML editing is now working with PHP5 updates and TinyMCE v3.0.6\n- Fixed signature loading on Windows (#1484545)\n- Added language support to HTML editing (#1484862)\n- Fixed remove signature when replying (#1333167)\n- Fixed problem with line with a space at the end (#1484916)\n- Fixed <!DOCTYPE> tag filtering (#1484391)\n- Fixed <?xml> tag filtering (#1484403)\n- Added sections (fieldset+label) in Settings interface\n- Mark as read in one action with message preview (#1484972)\n- Deleted redundant quota reads (#1484972)\n- Added options for empty trash and expunge inbox on logout (#1483863)\n- Removed lines wrapping when displaying message\n- Fixed month localization\n- Changed codebase to PHP5 with autoloader\n\nRELEASE 0.1.1\n-------------\n- Clear selection when selecting single item (#1484942)\n- Remove hard-coded image size in skin templates (#1484893)\n- Database schema improvements (dropped unnecessary indexes)\n- Fixed creating a new folder with a comma in its name (#1484681)\n- Fixed sorting of messages when default mailbox is empty (#1484317)\n- Improve message previewpane - less loading (#1484316)\n- Fixed login form autoompletion (#1484839)\n- Fixed virtuser_query option for mdb2 backend (#1484874)\n- Fixed attachment resoting from Drafts when message body was empty (#1484506)\n- Fixed usage of ob_gzhandler (#1484851)\n- Fixed message part window in IE6 (#1484610)\n- Fixed decoding of mime-encoded strings (#1484191)\n- Fixed some iconv/mb_string problems (#1484598)\n- Correctly quote mailbox name when using in URL (#1484313)\n- Fixed \"headers already sent\" errors (#1484860)\n\nRELEASE 0.1-STABLE\n------------------\n- Added interactive installer script\n- Fix folder adding/renaming inspired by #1484800\n- Localize folder name in page title (#1484785)\n- Fix code using wrong variable name (#1484018)\n- Allow to send mail with BCC recipients only\n- condense TinyMCE toolbar down to one line, removing table buttons (#1484747)\n- Add function to mark the selected messages as read/unread (#1457360)\n- Also do charset decoding as suggested in RFC 2231 (fix #1484321)\n- Show message count in folder list and hint when creating a subfolder\n- Distinguish ssl and tls for imap connections (#1484667)\n- Added some charset aliases to fix typical mis-labelling (#1484565)\n- Remember decision to display images for a certain message during session (#1484754)\n- Truncate attachment filenames to 55 characters due to an IE bug (#1484757)\n- Make sending of read receipts configurable\n- Respect config when localize folder names (#1484707)\n- Also respect receipt and priority settings when re-opening a draft message\n- Remember search results (closes #1483883), patch by the_glu\n- Add Received header on outgoing mail\n- Upgrade to TinyMCE 2.1.3\n- Allow inserting image attachments into HTML messages while composing (#1484557)\n- Implement Message-Disposition-Notification (Receipts)\n- Fix overriding of session vars when register_globals is on (#1484670)\n- Fix bug with case-sensitive folder names (#1484245)\n- Don't create default folders by default\n- Fixed some potential security risks (audited by Andris)\n- Only show new messages if they match the current search (#1484176)\n- Switch to/from when searcing in Sent folder (#1484555)\n- Correctly read the References header (#1484646)\n- Unset old cookie before sending a new value (#1484639)\n- Correctly decode attachments when downloading them (#1484645 and #1484642)\n- Suppress IE errors when clearing attachments form (#1484356)\n- Log error when login fails due to auto_create_user turned off\n- Filter linked/imported CSS files (closes #1484056)\n- Improve message compose screen (closes #1484383)\n- Select next row after removing one from list (#1484387)\n\nRELEASE 0.1-RC2\n---------------\n- Enable drag-&-dropping of folders to a new parent and allow to create subfolders (#1457344)\n- Suppress IE errors when clearing attachments form (#1484356)\n- Set preferences field in user table to NULL (#1484386)\n- Log error when login fails due to auto_create_user turned off\n- Filter linked/imported CSS files (closes #1484056)\n- Improve message compose screen (closes #1484383)\n- Select next row after removing one from list (#1484387)\n- Make smtp HELO/EHLO hostname configurable (#1484067)\n- IPv6 Compatability (#1484322), Patch #1484373\n- Unlock interface when message sending fails (#1484570)\n- Eval PHP code in template includes (if configured)\n- Show message when folder is empty. Mo more static text in table (#1484395)\n- Only display unread count in page title when new messages arrived\n- Fixed wrong delete button tooltip (#1483965)\n- Fixed charset encoding bug (#1484429)\n- Applied patch for LDAP version (#1484552)\n- Improved XHTML validation\n- Fix message list selection (#1484550)\n- Better fix lowercased usernames (#1484473)\n- Update pngbehavior Script as suggested in #1484490\n- Fixed moving/deleting messages when more than 1 is selected\n- Applied patch for LDAP contacts listing by Glen Ogilvie\n- Applied patch for more address fields in LDAP contacts (#1484402)\n- Add alternative for getallheaders() (fix #1484508)\n- Identify mailboxes case-sensitive\n- Sort mailbox list case-insensitive (closes #1484338)\n- Fix display of multipart messages from Apple Mail (closes #1484027)\n- Protect AJAX request from being fetched by a foreign site (XSS)\n- Make autocomplete for loginform configurable by the skin template\n- Fix compose function from address book (closes #1484426)\n- Added //IGNORE to iconv call (patch #1484420, closes #1484023)\n- Check if mbstring supports charset (#1484290 and #1484292)\n- Prefer iconv over mbstring (as suggested in #1484292)\n- Check filesize of template includes (#1484409)\n- Fixed bug with buttons not dimming/enabling properly after switching folders\n- Fixed compose window becoming unresponsive after saving a draft (#1484487)\n- Re-enabled \"Back\" button in compose window now that bug #1484487 is fixed\n- Fixed unresponsive interface issue when downloading attachments (#1484496)\n- Lowered status message time from 5 to 3 seconds to improve responsiveness\n- Raised .htaccess upload_max_filesize from 2M to 5M to differ from default php.ini\n- Increased \"mailboxcontrols\" mail.css width from 160 to 170px to fix non-english languages (#1484499)\n- Fix status message bug #1484464 with regard to #1484353\n- Fix address adding bug reported by David Koblas\n- Applied socket error patch by Thomas Mangin\n- Pass-by-reference workarround for PHP5 in sendmail.inc\n- Fixed buggy imap_root settings (closes #1484379)\n- Prevent default events on subject links (#1484399)\n- Use HTTP-POST requests for actions that change state\n\nRELEASE 0.1-RC1\n---------------\n- Use global filters and bind username/ for Ldap searches (#1484159)\n- Hide quota display if imap server does not support it\n- Hide address groups if no LDAP servers configured\n- Add link to message subjects (closes #1484257)\n- Better SQL query for contact listing/search (closes #1484369)\n- Fixed marking as read in preview pane (closes #1484364)\n- CSS hack to display attachments correctly in IE6\n- Wrap message body text (closes #1484148)\n- LDAP access is back in address book (closes #1484087)\n- Added search function for contacts\n- New Template parsing and output encoding\n- Fixed bugs #1484119 and #1483978\n- Fixed message moving procedure (closes #1484308)\n- Fixed display of multiple attachments (closes #1466563)\n- Fixed check for new messages (closes #1484310)\n- List attachments without filename\n- New session authentication: Change sessid cookie when login, authentication with sessauth cookie is now configurable.\n  Should close bugs #1483951 and #1484299\n- Correctly translate mailbox names (closes #1484276)\n- Quote e-mail address links (closes #1484300)\n- Updated PEAR::Mail_mime package\n- Accept single quotes for HTML attributes when modifying message body (thanks Jason)\n- Sanitize input for new users/identities (thanks Colin Alston)\n- Don't download HTML message parts\n- Convert HTML parts to plaintext if 'prefer_html' is off\n- Correctly parse message/rfc822 parts (closes #1484045)\n- Also use user_id for unique key in messages table (closes #1484074)\n- Hide contacts drop down on blur (closes #1484203)\n- Make entries in contacts drop down clickable\n- Turn off browser autocompletion on login page\n- Quote <? in text/html message parts\n- Hide border around radio buttons\n- Applied patch for attachment download by crichardson (closes #1484198)\n- Fixed bug in Postgres DB handling (closes #1484068)\n- Fixed bug of invalid calls to fetchRow() in rcube_db.inc (closes #1484280)\n- Fixed array_merge bug (closes #1484281)\n- Fixed flag for deletion in list view (closes #1484264)\n- Finally support semicolons as recipient separator (closes ##1484251)\n- Fixed message headers (subject) encoding\n- check if safe mode is on or not (closes #1484269)\n- Show \"no subject\" in message list if subject is missing (closes #1484243)\n- Solved page caching of message preview (closes #1484153)\n- Only use gzip compression if configured (closes #1484236)\n- Fixed priority selector issue (#1484150)\n- Fixed some CSS issues in default skin (closes #1484210 and #1484161)\n- Prevent from double quoting of numeric HTML character references (closes #1484253)\n- Fixed display of HTML message attachments (closes #1484178)\n- Applied patch for preview caching (closes #1484186)\n- Added error handling for attachment uploads\n- Use multibyte safe string functions where necessary (closes #1483988)\n- Applied security patch to validate the submitted host value (by Kees Cook)\n- Applied security patch to validate input values when deleting contacts (by Kees Cook)\n- Applied security patch that sanitizes emoticon paths when attaching them (by Kees Cook)\n- Applied a patch to more aggressively sanitize a HTML message\n- Visualize blocked images in HTML messages\n- Fixed wrong message listing when showing search results (closes #1484131)\n- Show remote images when opening HTML message part as attachment\n- Improve memory usage when sending mail (closes #1484098)\n- Mark messages as read once the preview is loaded (closes #1484132)\n- Include smtp final response in log (closes #1484081)\n- Corrected date string in sent message header (closes #1484125)\n- Correclty choose \"To\" column in sent and draft mailboxes (closes #1483943)\n- Changed srong tooltips for message browse buttons (closes #1483930)\n- Fixed signature delimeter character to be standard (Bug #1484035)\n- Fixed XSS vulnerability (Bug #1484109)\n- Remove newlines from mail headers (Bug #1484031)\n- Selection issues when moving/deleting (Bug #1484044)\n- Applied patch of Clement Moulin for imap host auto-selection\n- ISO-encode IMAP password for plaintext login (Bugs #1483977 & #1483886)\n- Fixed folder name encoding in subscription list (Bug #1484113)\n- Fixed JS errors in identity list (Bug #1484120)\n- Translate foldernames in folder form (closes #1484113)\n- Added first and last buttons to message list, address book\n  and message detail\n- Pressing Shift-Del bypasses Trash folder\n- Enable purge command for Junk folder\n- Fetch all aliases if virtuser_query is used instead\n- Re-enabled multi select of contacts (Bug #1484017)\n- Enable contact editing right after creation (Bug #1459641)\n- Correct UTF-7 to UTF-8 conversion if mbstring is not available\n- Fixed IMAP fetch of message body (Bug #1484019)\n- Fixed safe_mode problems (Bug #1418381)\n- Fixed wrong header encoding (Bug #1483976)\n- Made automatic draft saving configurable\n- Fixed JS bug when renaming folders (Bug #1483989)\n- Added quota display as image (by Brett Patterson)\n- Corrected creation of a message-id\n- New indentation for quoted message text\n- Improved HTML validity\n- Fixed URL character set (Ticket #1445501)\n- Fixed saving of contact into MySQL from LDAP query results (Ticket #1483820)\n- Fixed folder renaming: unsubscribe before rename (Bug #1483920)\n- Finalized new message parsing (+ chaching)\n- Fixed wrong usage of mbstring (Bug #1462439)\n- Set default spelling language (Ticket #1483938)\n- Added support for Nox Spell Server\n- Re-built message parsing (Bug #1327068)\n  Now based on the message structure delivered by the IMAP server.\n- Fixed some XSS and SQL injection issues\n- Fixed charset problems with folder renaming\n", "/*\n +-----------------------------------------------------------------------+\n | Roundcube Webmail Client Script                                       |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2012, The Roundcube Dev Team                       |\n | Copyright (C) 2011, Kolab Systems AG                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Authors: Thomas Bruederli <roundcube@gmail.com>                       |\n |          Aleksander 'A.L.E.C' Machniak <alec@alec.pl>                 |\n |          Charles McNulty <charles@charlesmcnulty.com>                 |\n +-----------------------------------------------------------------------+\n | Requires: jquery.js, common.js, list.js                               |\n +-----------------------------------------------------------------------+\n*/\n\nfunction rcube_webmail()\n{\n  this.env = { recipients_separator:',', recipients_delimiter:', ' };\n  this.labels = {};\n  this.buttons = {};\n  this.buttons_sel = {};\n  this.gui_objects = {};\n  this.gui_containers = {};\n  this.commands = {};\n  this.command_handlers = {};\n  this.onloads = [];\n  this.messages = {};\n  this.group2expand = {};\n\n  // create protected reference to myself\n  this.ref = 'rcmail';\n  var ref = this;\n\n  // webmail client settings\n  this.dblclick_time = 500;\n  this.message_time = 4000;\n\n  this.identifier_expr = new RegExp('[^0-9a-z\\-_]', 'gi');\n\n  // default environment vars\n  this.env.keep_alive = 60;        // seconds\n  this.env.request_timeout = 180;  // seconds\n  this.env.draft_autosave = 0;     // seconds\n  this.env.comm_path = './';\n  this.env.blankpage = 'program/resources/blank.gif';\n\n  // set jQuery ajax options\n  $.ajaxSetup({\n    cache: false,\n    timeout: this.env.request_timeout * 1000,\n    error: function(request, status, err){ ref.http_error(request, status, err); },\n    beforeSend: function(xmlhttp){ xmlhttp.setRequestHeader('X-Roundcube-Request', ref.env.request_token); }\n  });\n\n  $(window).bind('beforeunload', function() { rcmail.unload = true; });\n\n  // set environment variable(s)\n  this.set_env = function(p, value)\n  {\n    if (p != null && typeof p === 'object' && !value)\n      for (var n in p)\n        this.env[n] = p[n];\n    else\n      this.env[p] = value;\n  };\n\n  // add a localized label to the client environment\n  this.add_label = function(p, value)\n  {\n    if (typeof p == 'string')\n      this.labels[p] = value;\n    else if (typeof p == 'object')\n      $.extend(this.labels, p);\n  };\n\n  // add a button to the button list\n  this.register_button = function(command, id, type, act, sel, over)\n  {\n    if (!this.buttons[command])\n      this.buttons[command] = [];\n\n    var button_prop = {id:id, type:type};\n    if (act) button_prop.act = act;\n    if (sel) button_prop.sel = sel;\n    if (over) button_prop.over = over;\n\n    this.buttons[command].push(button_prop);\n\n    if (this.loaded)\n      init_button(command, button_prop);\n  };\n\n  // register a specific gui object\n  this.gui_object = function(name, id)\n  {\n    this.gui_objects[name] = this.loaded ? rcube_find_object(id) : id;\n  };\n\n  // register a container object\n  this.gui_container = function(name, id)\n  {\n    this.gui_containers[name] = id;\n  };\n\n  // add a GUI element (html node) to a specified container\n  this.add_element = function(elm, container)\n  {\n    if (this.gui_containers[container] && this.gui_containers[container].jquery)\n      this.gui_containers[container].append(elm);\n  };\n\n  // register an external handler for a certain command\n  this.register_command = function(command, callback, enable)\n  {\n    this.command_handlers[command] = callback;\n\n    if (enable)\n      this.enable_command(command, true);\n  };\n\n  // execute the given script on load\n  this.add_onload = function(f)\n  {\n    this.onloads.push(f);\n  };\n\n  // initialize webmail client\n  this.init = function()\n  {\n    var n, p = this;\n    this.task = this.env.task;\n\n    // check browser\n    if (!bw.dom || !bw.xmlhttp_test() || (bw.mz && bw.vendver < 1.9)) {\n      this.goto_url('error', '_code=0x199');\n      return;\n    }\n\n    // find all registered gui containers\n    for (n in this.gui_containers)\n      this.gui_containers[n] = $('#'+this.gui_containers[n]);\n\n    // find all registered gui objects\n    for (n in this.gui_objects)\n      this.gui_objects[n] = rcube_find_object(this.gui_objects[n]);\n\n    // clickjacking protection\n    if (this.env.x_frame_options) {\n      try {\n        // bust frame if not allowed\n        if (this.env.x_frame_options == 'deny' && top.location.href != self.location.href)\n          top.location.href = self.location.href;\n        else if (top.location.hostname != self.location.hostname)\n          throw 1;\n      } catch (e) {\n        // possible clickjacking attack: disable all form elements\n        $('form').each(function(){ ref.lock_form(this, true); });\n        this.display_message(\"Blocked: possible clickjacking attack!\", 'error');\n        return;\n      }\n    }\n\n    // init registered buttons\n    this.init_buttons();\n\n    // tell parent window that this frame is loaded\n    if (this.is_framed()) {\n      parent.rcmail.set_busy(false, null, parent.rcmail.env.frame_lock);\n      parent.rcmail.env.frame_lock = null;\n    }\n\n    // enable general commands\n    this.enable_command('logout', 'mail', 'addressbook', 'settings', 'save-pref', 'compose', 'undo', 'about', 'switch-task', true);\n\n    if (this.env.permaurl)\n      this.enable_command('permaurl', true);\n\n    switch (this.task) {\n\n      case 'mail':\n        // enable mail commands\n        this.enable_command('list', 'checkmail', 'add-contact', 'search', 'reset-search', 'collapse-folder', true);\n\n        if (this.gui_objects.messagelist) {\n\n          this.message_list = new rcube_list_widget(this.gui_objects.messagelist, {\n            multiselect:true, multiexpand:true, draggable:true, keyboard:true,\n            column_movable:this.env.col_movable, dblclick_time:this.dblclick_time\n            });\n          this.message_list.row_init = function(o){ p.init_message_row(o); };\n          this.message_list.addEventListener('dblclick', function(o){ p.msglist_dbl_click(o); });\n          this.message_list.addEventListener('click', function(o){ p.msglist_click(o); });\n          this.message_list.addEventListener('keypress', function(o){ p.msglist_keypress(o); });\n          this.message_list.addEventListener('select', function(o){ p.msglist_select(o); });\n          this.message_list.addEventListener('dragstart', function(o){ p.drag_start(o); });\n          this.message_list.addEventListener('dragmove', function(e){ p.drag_move(e); });\n          this.message_list.addEventListener('dragend', function(e){ p.drag_end(e); });\n          this.message_list.addEventListener('expandcollapse', function(e){ p.msglist_expand(e); });\n          this.message_list.addEventListener('column_replace', function(e){ p.msglist_set_coltypes(e); });\n\n          document.onmouseup = function(e){ return p.doc_mouse_up(e); };\n          this.gui_objects.messagelist.parentNode.onmousedown = function(e){ return p.click_on_list(e); };\n\n          this.message_list.init();\n          this.enable_command('toggle_status', 'toggle_flag', 'menu-open', 'menu-save', true);\n\n          // load messages\n          this.command('list');\n        }\n\n        if (this.gui_objects.qsearchbox) {\n          if (this.env.search_text != null) {\n            this.gui_objects.qsearchbox.value = this.env.search_text;\n          }\n          $(this.gui_objects.qsearchbox).focusin(function() { rcmail.message_list.blur(); });\n        }\n\n        this.set_button_titles();\n\n        this.env.message_commands = ['show', 'reply', 'reply-all', 'reply-list', 'forward',\n          'moveto', 'copy', 'delete', 'open', 'mark', 'edit', 'viewsource', 'download',\n          'print', 'load-attachment', 'show-headers', 'hide-headers', 'forward-attachment'];\n\n        if (this.env.action == 'show' || this.env.action == 'preview') {\n          this.enable_command(this.env.message_commands, this.env.uid);\n          this.enable_command('reply-list', this.env.list_post);\n\n          if (this.env.action == 'show') {\n            this.http_request('pagenav', {_uid: this.env.uid, _mbox: this.env.mailbox, _search: this.env.search_request},\n              this.display_message('', 'loading'));\n          }\n\n          if (this.env.blockedobjects) {\n            if (this.gui_objects.remoteobjectsmsg)\n              this.gui_objects.remoteobjectsmsg.style.display = 'block';\n            this.enable_command('load-images', 'always-load', true);\n          }\n\n          // make preview/message frame visible\n          if (this.env.action == 'preview' && this.is_framed()) {\n            this.enable_command('compose', 'add-contact', false);\n            parent.rcmail.show_contentframe(true);\n          }\n        }\n        else if (this.env.action == 'compose') {\n          this.env.compose_commands = ['send-attachment', 'remove-attachment', 'send', 'cancel', 'toggle-editor', 'list-adresses'];\n\n          if (this.env.drafts_mailbox)\n            this.env.compose_commands.push('savedraft')\n\n          this.enable_command(this.env.compose_commands, 'identities', true);\n\n          // add more commands (not enabled)\n          $.merge(this.env.compose_commands, ['add-recipient', 'firstpage', 'previouspage', 'nextpage', 'lastpage']);\n\n          if (this.env.spellcheck) {\n            this.env.spellcheck.spelling_state_observer = function(s) { ref.spellcheck_state(); };\n            this.env.compose_commands.push('spellcheck')\n            this.enable_command('spellcheck', true);\n          }\n\n          document.onmouseup = function(e){ return p.doc_mouse_up(e); };\n\n          // init message compose form\n          this.init_messageform();\n        }\n        // show printing dialog\n        else if (this.env.action == 'print' && this.env.uid)\n          if (bw.safari)\n            setTimeout('window.print()', 10);\n          else\n            window.print();\n\n        // get unread count for each mailbox\n        if (this.gui_objects.mailboxlist) {\n          this.env.unread_counts = {};\n          this.gui_objects.folderlist = this.gui_objects.mailboxlist;\n          this.http_request('getunread');\n        }\n\n        // init address book widget\n        if (this.gui_objects.contactslist) {\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            { multiselect:true, draggable:false, keyboard:false });\n          this.contact_list.addEventListener('select', function(o){ ref.compose_recipient_select(o); });\n          this.contact_list.addEventListener('dblclick', function(o){ ref.compose_add_recipient('to'); });\n          this.contact_list.init();\n        }\n\n        if (this.gui_objects.addressbookslist) {\n          this.gui_objects.folderlist = this.gui_objects.addressbookslist;\n          this.enable_command('list-adresses', true);\n        }\n\n        // ask user to send MDN\n        if (this.env.mdn_request && this.env.uid) {\n          var postact = 'sendmdn',\n            postdata = {_uid: this.env.uid, _mbox: this.env.mailbox};\n          if (!confirm(this.get_label('mdnrequest'))) {\n            postdata._flag = 'mdnsent';\n            postact = 'mark';\n          }\n          this.http_post(postact, postdata);\n        }\n\n        // detect browser capabilities\n        if (!this.is_framed())\n          this.browser_capabilities_check();\n\n        break;\n\n      case 'addressbook':\n        if (this.gui_objects.folderlist)\n          this.env.contactfolders = $.extend($.extend({}, this.env.address_sources), this.env.contactgroups);\n\n        this.enable_command('add', 'import', this.env.writable_source);\n        this.enable_command('list', 'listgroup', 'listsearch', 'advanced-search', true);\n\n        if (this.gui_objects.contactslist) {\n\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            {multiselect:true, draggable:this.gui_objects.folderlist?true:false, keyboard:true});\n          this.contact_list.row_init = function(row){ p.triggerEvent('insertrow', { cid:row.uid, row:row }); };\n          this.contact_list.addEventListener('keypress', function(o){ p.contactlist_keypress(o); });\n          this.contact_list.addEventListener('select', function(o){ p.contactlist_select(o); });\n          this.contact_list.addEventListener('dragstart', function(o){ p.drag_start(o); });\n          this.contact_list.addEventListener('dragmove', function(e){ p.drag_move(e); });\n          this.contact_list.addEventListener('dragend', function(e){ p.drag_end(e); });\n          this.contact_list.init();\n\n          if (this.env.cid)\n            this.contact_list.highlight_row(this.env.cid);\n\n          this.gui_objects.contactslist.parentNode.onmousedown = function(e){ return p.click_on_list(e); };\n          document.onmouseup = function(e){ return p.doc_mouse_up(e); };\n          if (this.gui_objects.qsearchbox) {\n            $(this.gui_objects.qsearchbox).focusin(function() { rcmail.contact_list.blur(); });\n          }\n\n          this.update_group_commands();\n          this.command('list');\n        }\n\n        this.set_page_buttons();\n\n        if (this.env.cid) {\n          this.enable_command('show', 'edit', true);\n          // register handlers for group assignment via checkboxes\n          if (this.gui_objects.editform) {\n            $('input.groupmember').change(function() {\n              ref.group_member_change(this.checked ? 'add' : 'del', ref.env.cid, ref.env.source, this.value);\n            });\n          }\n        }\n\n        if (this.gui_objects.editform) {\n          this.enable_command('save', true);\n          if (this.env.action == 'add' || this.env.action == 'edit')\n              this.init_contact_form();\n        }\n\n        if (this.gui_objects.qsearchbox) {\n          this.enable_command('search', 'reset-search', 'moveto', true);\n        }\n\n        break;\n\n      case 'settings':\n        this.enable_command('preferences', 'identities', 'save', 'folders', true);\n\n        if (this.env.action == 'identities') {\n          this.enable_command('add', this.env.identities_level < 2);\n        }\n        else if (this.env.action == 'edit-identity' || this.env.action == 'add-identity') {\n          this.enable_command('save', 'edit', 'toggle-editor', true);\n          this.enable_command('delete', this.env.identities_level < 2);\n\n          if (this.env.action == 'add-identity')\n            $(\"input[type='text']\").first().select();\n        }\n        else if (this.env.action == 'folders') {\n          this.enable_command('subscribe', 'unsubscribe', 'create-folder', 'rename-folder', true);\n        }\n        else if (this.env.action == 'edit-folder' && this.gui_objects.editform) {\n          this.enable_command('save', 'folder-size', true);\n          parent.rcmail.env.messagecount = this.env.messagecount;\n          parent.rcmail.enable_command('purge', this.env.messagecount);\n          $(\"input[type='text']\").first().select();\n        }\n\n        if (this.gui_objects.identitieslist) {\n          this.identity_list = new rcube_list_widget(this.gui_objects.identitieslist, {multiselect:false, draggable:false, keyboard:false});\n          this.identity_list.addEventListener('select', function(o){ p.identity_select(o); });\n          this.identity_list.init();\n          this.identity_list.focus();\n\n          if (this.env.iid)\n            this.identity_list.highlight_row(this.env.iid);\n        }\n        else if (this.gui_objects.sectionslist) {\n          this.sections_list = new rcube_list_widget(this.gui_objects.sectionslist, {multiselect:false, draggable:false, keyboard:false});\n          this.sections_list.addEventListener('select', function(o){ p.section_select(o); });\n          this.sections_list.init();\n          this.sections_list.focus();\n        }\n        else if (this.gui_objects.subscriptionlist)\n          this.init_subscription_list();\n\n        break;\n\n      case 'login':\n        var input_user = $('#rcmloginuser');\n        input_user.bind('keyup', function(e){ return rcmail.login_user_keyup(e); });\n\n        if (input_user.val() == '')\n          input_user.focus();\n        else\n          $('#rcmloginpwd').focus();\n\n        // detect client timezone\n        var dt = new Date(),\n          tz = dt.getTimezoneOffset() / -60,\n          stdtz = dt.getStdTimezoneOffset() / -60;\n\n        $('#rcmlogintz').val(stdtz);\n        $('#rcmlogindst').val(tz > stdtz ? 1 : 0);\n\n        // display 'loading' message on form submit, lock submit button\n        $('form').submit(function () {\n          $('input[type=submit]', this).prop('disabled', true);\n          rcmail.clear_messages();\n          rcmail.display_message('', 'loading');\n        });\n\n        this.enable_command('login', true);\n        break;\n\n      default:\n        break;\n      }\n\n    // prevent from form submit with Enter key in file input fields\n    if (bw.ie)\n      $('input[type=file]').keydown(function(e) { if (e.keyCode == '13') e.preventDefault(); });\n\n    // flag object as complete\n    this.loaded = true;\n\n    // show message\n    if (this.pending_message)\n      this.display_message(this.pending_message[0], this.pending_message[1], this.pending_message[2]);\n\n    // map implicit containers\n    if (this.gui_objects.folderlist)\n      this.gui_containers.foldertray = $(this.gui_objects.folderlist);\n\n    // activate html5 file drop feature (if browser supports it and if configured)\n    if (this.gui_objects.filedrop && this.env.filedrop && ((window.XMLHttpRequest && XMLHttpRequest.prototype && XMLHttpRequest.prototype.sendAsBinary) || window.FormData)) {\n      $(document.body).bind('dragover dragleave drop', function(e){ return ref.document_drag_hover(e, e.type == 'dragover'); });\n      $(this.gui_objects.filedrop).addClass('droptarget')\n        .bind('dragover dragleave', function(e){ return ref.file_drag_hover(e, e.type == 'dragover'); })\n        .get(0).addEventListener('drop', function(e){ return ref.file_dropped(e); }, false);\n    }\n\n    // trigger init event hook\n    this.triggerEvent('init', { task:this.task, action:this.env.action });\n\n    // execute all foreign onload scripts\n    // @deprecated\n    for (var i in this.onloads) {\n      if (typeof this.onloads[i] === 'string')\n        eval(this.onloads[i]);\n      else if (typeof this.onloads[i] === 'function')\n        this.onloads[i]();\n      }\n\n    // start keep-alive interval\n    this.start_keepalive();\n  };\n\n  this.log = function(msg)\n  {\n    if (window.console && console.log)\n      console.log(msg);\n  };\n\n  /*********************************************************/\n  /*********       client command interface        *********/\n  /*********************************************************/\n\n  // execute a specific command on the web client\n  this.command = function(command, props, obj, event)\n  {\n    var ret, uid, cid, url, flag;\n\n    if (obj && obj.blur)\n      obj.blur();\n\n    if (this.busy)\n      return false;\n\n    // command not supported or allowed\n    if (!this.commands[command]) {\n      // pass command to parent window\n      if (this.is_framed())\n        parent.rcmail.command(command, props);\n\n      return false;\n    }\n\n    // check input before leaving compose step\n    if (this.task == 'mail' && this.env.action == 'compose' && $.inArray(command, this.env.compose_commands)<0) {\n      if (this.cmp_hash != this.compose_field_hash() && !confirm(this.get_label('notsentwarning')))\n        return false;\n    }\n\n    // process external commands\n    if (typeof this.command_handlers[command] === 'function') {\n      ret = this.command_handlers[command](props, obj);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n    else if (typeof this.command_handlers[command] === 'string') {\n      ret = window[this.command_handlers[command]](props, obj);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n\n    // trigger plugin hooks\n    this.triggerEvent('actionbefore', {props:props, action:command});\n    ret = this.triggerEvent('before'+command, props);\n    if (ret !== undefined) {\n      // abort if one of the handlers returned false\n      if (ret === false)\n        return false;\n      else\n        props = ret;\n    }\n\n    ret = undefined;\n\n    // process internal command\n    switch (command) {\n\n      case 'login':\n        if (this.gui_objects.loginform)\n          this.gui_objects.loginform.submit();\n        break;\n\n      // commands to switch task\n      case 'mail':\n      case 'addressbook':\n      case 'settings':\n      case 'logout':\n        this.switch_task(command);\n        break;\n\n      case 'about':\n        location.href = '?_task=settings&_action=about';\n        break;\n\n      case 'permaurl':\n        if (obj && obj.href && obj.target)\n          return true;\n        else if (this.env.permaurl)\n          parent.location.href = this.env.permaurl;\n        break;\n\n      case 'menu-open':\n      case 'menu-save':\n        this.triggerEvent(command, {props:props});\n        return false;\n\n      case 'open':\n        if (uid = this.get_single_uid()) {\n          obj.href = '?_task='+this.env.task+'&_action=show&_mbox='+urlencode(this.env.mailbox)+'&_uid='+uid;\n          return true;\n        }\n        break;\n\n      case 'list':\n        if (props && props != '')\n          this.reset_qsearch();\n        if (this.task == 'mail') {\n          this.list_mailbox(props);\n          this.set_button_titles();\n        }\n        else if (this.task == 'addressbook')\n          this.list_contacts(props);\n        break;\n\n      case 'sort':\n        var sort_order, sort_col = props;\n\n        if (this.env.sort_col==sort_col)\n          sort_order = this.env.sort_order=='ASC' ? 'DESC' : 'ASC';\n        else\n          sort_order = 'ASC';\n\n        // set table header and update env\n        this.set_list_sorting(sort_col, sort_order);\n\n        // reload message list\n        this.list_mailbox('', '', sort_col+'_'+sort_order);\n        break;\n\n      case 'nextpage':\n        this.list_page('next');\n        break;\n\n      case 'lastpage':\n        this.list_page('last');\n        break;\n\n      case 'previouspage':\n        this.list_page('prev');\n        break;\n\n      case 'firstpage':\n        this.list_page('first');\n        break;\n\n      case 'expunge':\n        if (this.env.messagecount)\n          this.expunge_mailbox(this.env.mailbox);\n        break;\n\n      case 'purge':\n      case 'empty-mailbox':\n        if (this.env.messagecount)\n          this.purge_mailbox(this.env.mailbox);\n        break;\n\n      // common commands used in multiple tasks\n      case 'show':\n        if (this.task == 'mail') {\n          uid = this.get_single_uid();\n          if (uid && (!this.env.uid || uid != this.env.uid)) {\n            if (this.env.mailbox == this.env.drafts_mailbox)\n              this.goto_url('compose', { _draft_uid: uid, _mbox: this.env.mailbox }, true);\n            else\n              this.show_message(uid);\n          }\n        }\n        else if (this.task == 'addressbook') {\n          cid = props ? props : this.get_single_cid();\n          if (cid && !(this.env.action == 'show' && cid == this.env.cid))\n            this.load_contact(cid, 'show');\n        }\n        break;\n\n      case 'add':\n        if (this.task == 'addressbook')\n          this.load_contact(0, 'add');\n        else if (this.task == 'settings') {\n          this.identity_list.clear_selection();\n          this.load_identity(0, 'add-identity');\n        }\n        break;\n\n      case 'edit':\n        if (this.task == 'addressbook' && (cid = this.get_single_cid()))\n          this.load_contact(cid, 'edit');\n        else if (this.task == 'settings' && props)\n          this.load_identity(props, 'edit-identity');\n        else if (this.task == 'mail' && (cid = this.get_single_uid())) {\n          url = { _mbox: this.env.mailbox };\n          url[this.env.mailbox == this.env.drafts_mailbox ? '_draft_uid' : '_uid'] = cid;\n          this.goto_url('compose', url, true);\n        }\n        break;\n\n      case 'save':\n        var input, form = this.gui_objects.editform;\n        if (form) {\n          // adv. search\n          if (this.env.action == 'search') {\n          }\n          // user prefs\n          else if ((input = $(\"input[name='_pagesize']\", form)) && input.length && isNaN(parseInt(input.val()))) {\n            alert(this.get_label('nopagesizewarning'));\n            input.focus();\n            break;\n          }\n          // contacts/identities\n          else {\n            // reload form\n            if (props == 'reload') {\n              form.action += '?_reload=1';\n            }\n            else if (this.task == 'settings' && (this.env.identities_level % 2) == 0  &&\n              (input = $(\"input[name='_email']\", form)) && input.length && !rcube_check_email(input.val())\n            ) {\n              alert(this.get_label('noemailwarning'));\n              input.focus();\n              break;\n            }\n\n            // clear empty input fields\n            $('input.placeholder').each(function(){ if (this.value == this._placeholder) this.value = ''; });\n          }\n\n          // add selected source (on the list)\n          if (parent.rcmail && parent.rcmail.env.source)\n            form.action = this.add_url(form.action, '_orig_source', parent.rcmail.env.source);\n\n          form.submit();\n        }\n        break;\n\n      case 'delete':\n        // mail task\n        if (this.task == 'mail')\n          this.delete_messages(event);\n        // addressbook task\n        else if (this.task == 'addressbook')\n          this.delete_contacts();\n        // user settings task\n        else if (this.task == 'settings')\n          this.delete_identity();\n        break;\n\n      // mail task commands\n      case 'move':\n      case 'moveto':\n        if (this.task == 'mail')\n          this.move_messages(props);\n        else if (this.task == 'addressbook' && this.drag_active)\n          this.copy_contact(null, props);\n        break;\n\n      case 'copy':\n        if (this.task == 'mail')\n          this.copy_messages(props);\n        break;\n\n      case 'mark':\n        if (props)\n          this.mark_message(props);\n        break;\n\n      case 'toggle_status':\n        if (props && !props._row)\n          break;\n\n        flag = 'read';\n\n        if (props._row.uid) {\n          uid = props._row.uid;\n\n          // toggle read/unread\n          if (this.message_list.rows[uid].deleted) {\n            flag = 'undelete';\n          }\n          else if (!this.message_list.rows[uid].unread)\n            flag = 'unread';\n        }\n\n        this.mark_message(flag, uid);\n        break;\n\n      case 'toggle_flag':\n        if (props && !props._row)\n          break;\n\n        flag = 'flagged';\n\n        if (props._row.uid) {\n          uid = props._row.uid;\n          // toggle flagged/unflagged\n          if (this.message_list.rows[uid].flagged)\n            flag = 'unflagged';\n          }\n        this.mark_message(flag, uid);\n        break;\n\n      case 'always-load':\n        if (this.env.uid && this.env.sender) {\n          this.add_contact(this.env.sender);\n          setTimeout(function(){ ref.command('load-images'); }, 300);\n          break;\n        }\n\n      case 'load-images':\n        if (this.env.uid)\n          this.show_message(this.env.uid, true, this.env.action=='preview');\n        break;\n\n      case 'load-attachment':\n        var qstring = '_mbox='+urlencode(this.env.mailbox)+'&_uid='+this.env.uid+'&_part='+props.part;\n\n        // open attachment in frame if it's of a supported mimetype\n        if (this.env.uid && props.mimetype && this.env.mimetypes && $.inArray(props.mimetype, this.env.mimetypes)>=0) {\n          if (props.mimetype == 'text/html')\n            qstring += '&_safe=1';\n          this.attachment_win = window.open(this.env.comm_path+'&_action=get&'+qstring+'&_frame=1', 'rcubemailattachment');\n          if (this.attachment_win) {\n            setTimeout(function(){ ref.attachment_win.focus(); }, 10);\n            break;\n          }\n        }\n\n        this.goto_url('get', qstring+'&_download=1', false);\n        break;\n\n      case 'select-all':\n        this.select_all_mode = props ? false : true;\n        this.dummy_select = true; // prevent msg opening if there's only one msg on the list\n        if (props == 'invert')\n          this.message_list.invert_selection();\n        else\n          this.message_list.select_all(props == 'page' ? '' : props);\n        this.dummy_select = null;\n        break;\n\n      case 'select-none':\n        this.select_all_mode = false;\n        this.message_list.clear_selection();\n        break;\n\n      case 'expand-all':\n        this.env.autoexpand_threads = 1;\n        this.message_list.expand_all();\n        break;\n\n      case 'expand-unread':\n        this.env.autoexpand_threads = 2;\n        this.message_list.collapse_all();\n        this.expand_unread();\n        break;\n\n      case 'collapse-all':\n        this.env.autoexpand_threads = 0;\n        this.message_list.collapse_all();\n        break;\n\n      case 'nextmessage':\n        if (this.env.next_uid)\n          this.show_message(this.env.next_uid, false, this.env.action=='preview');\n        break;\n\n      case 'lastmessage':\n        if (this.env.last_uid)\n          this.show_message(this.env.last_uid);\n        break;\n\n      case 'previousmessage':\n        if (this.env.prev_uid)\n          this.show_message(this.env.prev_uid, false, this.env.action=='preview');\n        break;\n\n      case 'firstmessage':\n        if (this.env.first_uid)\n          this.show_message(this.env.first_uid);\n        break;\n\n      case 'checkmail':\n        this.check_for_recent(true);\n        break;\n\n      case 'compose':\n        url = this.url('mail/compose');\n\n        if (this.task == 'mail') {\n          url += '&_mbox='+urlencode(this.env.mailbox);\n          if (props)\n             url += '&_to='+urlencode(props);\n          // also send search request so we can go back to search result after message is sent\n          if (this.env.search_request)\n            url += '&_search='+this.env.search_request;\n        }\n        // modify url if we're in addressbook\n        else if (this.task == 'addressbook') {\n          // switch to mail compose step directly\n          if (props && props.indexOf('@') > 0) {\n            url = this.get_task_url('mail', url);\n            this.redirect(url + '&_to='+urlencode(props));\n            break;\n          }\n\n          // use contact_id passed as command parameter\n          var n, len, a_cids = [];\n          if (props)\n            a_cids.push(props);\n          // get selected contacts\n          else if (this.contact_list) {\n            var selection = this.contact_list.get_selection();\n            for (n=0, len=selection.length; n<len; n++)\n              a_cids.push(selection[n]);\n          }\n\n          if (a_cids.length)\n            this.http_post('mailto', { _cid: a_cids.join(','), _source: this.env.source}, true);\n          else if (this.env.group)\n            this.http_post('mailto', { _gid: this.env.group, _source: this.env.source}, true);\n\n          break;\n        }\n        else if (props)\n          url += '&_to='+urlencode(props);\n\n        this.redirect(url);\n        break;\n\n      case 'spellcheck':\n        if (this.spellcheck_state()) {\n          this.stop_spellchecking();\n        }\n        else {\n          if (window.tinyMCE && tinyMCE.get(this.env.composebody)) {\n            tinyMCE.execCommand('mceSpellCheck', true);\n          }\n          else if (this.env.spellcheck && this.env.spellcheck.spellCheck) {\n            this.env.spellcheck.spellCheck();\n          }\n        }\n        this.spellcheck_state();\n        break;\n\n      case 'savedraft':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        // compose form did not change\n        if (this.cmp_hash == this.compose_field_hash()) {\n          this.auto_save_start();\n          break;\n        }\n\n        // re-set keep-alive timeout\n        this.start_keepalive();\n\n        this.submit_messageform(true);\n        break;\n\n      case 'send':\n        if (!props.nocheck && !this.check_compose_input(command))\n          break;\n\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        this.submit_messageform();\n        break;\n\n      case 'send-attachment':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        this.upload_file(props || this.gui_objects.uploadform);\n        break;\n\n      case 'insert-sig':\n        this.change_identity($(\"[name='_from']\")[0], true);\n        break;\n\n      case 'list-adresses':\n        this.list_contacts(props);\n        this.enable_command('add-recipient', false);\n        break;\n\n      case 'add-recipient':\n        this.compose_add_recipient(props);\n        break;\n\n      case 'reply-all':\n      case 'reply-list':\n      case 'reply':\n        if (uid = this.get_single_uid()) {\n          url = {_reply_uid: uid, _mbox: this.env.mailbox};\n          if (command == 'reply-all')\n            // do reply-list, when list is detected and popup menu wasn't used \n            url._all = (!props && this.commands['reply-list'] ? 'list' : 'all');\n          else if (command == 'reply-list')\n            url._all = list;\n\n          this.goto_url('compose', url, true);\n        }\n        break;\n\n      case 'forward-attachment':\n      case 'forward':\n        if (uid = this.get_single_uid()) {\n          url = { _forward_uid: uid, _mbox: this.env.mailbox };\n          if (command == 'forward-attachment' || (!props && this.env.forward_attachment))\n            url._attachment = 1;\n          this.goto_url('compose', url, true);\n        }\n        break;\n\n      case 'print':\n        if (uid = this.get_single_uid()) {\n          ref.printwin = window.open(this.env.comm_path+'&_action=print&_uid='+uid+'&_mbox='+urlencode(this.env.mailbox)+(this.env.safemode ? '&_safe=1' : ''));\n          if (this.printwin) {\n            setTimeout(function(){ ref.printwin.focus(); }, 20);\n            if (this.env.action != 'show')\n              this.mark_message('read', uid);\n          }\n        }\n        break;\n\n      case 'viewsource':\n        if (uid = this.get_single_uid()) {\n          ref.sourcewin = window.open(this.env.comm_path+'&_action=viewsource&_uid='+uid+'&_mbox='+urlencode(this.env.mailbox));\n          if (this.sourcewin)\n            setTimeout(function(){ ref.sourcewin.focus(); }, 20);\n          }\n        break;\n\n      case 'download':\n        if (uid = this.get_single_uid())\n          this.goto_url('viewsource', { _uid: uid, _mbox: this.env.mailbox, _save: 1 });\n        break;\n\n      // quicksearch\n      case 'search':\n        if (!props && this.gui_objects.qsearchbox)\n          props = this.gui_objects.qsearchbox.value;\n        if (props) {\n          this.qsearch(props);\n          break;\n        }\n\n      // reset quicksearch\n      case 'reset-search':\n        var n, s = this.env.search_request || this.env.qsearch;\n\n        this.reset_qsearch();\n        this.select_all_mode = false;\n\n        if (s && this.env.mailbox)\n          this.list_mailbox(this.env.mailbox, 1);\n        else if (s && this.task == 'addressbook') {\n          if (this.env.source == '') {\n            for (n in this.env.address_sources) break;\n            this.env.source = n;\n            this.env.group = '';\n          }\n          this.list_contacts(this.env.source, this.env.group, 1);\n        }\n        break;\n\n      case 'listgroup':\n        this.reset_qsearch();\n        this.list_contacts(props.source, props.id);\n        break;\n\n      case 'import':\n        if (this.env.action == 'import' && this.gui_objects.importform) {\n          var file = document.getElementById('rcmimportfile');\n          if (file && !file.value) {\n            alert(this.get_label('selectimportfile'));\n            break;\n          }\n          this.gui_objects.importform.submit();\n          this.set_busy(true, 'importwait');\n          this.lock_form(this.gui_objects.importform, true);\n        }\n        else\n          this.goto_url('import', (this.env.source ? '_target='+urlencode(this.env.source)+'&' : ''));\n        break;\n\n      case 'export':\n        if (this.contact_list.rowcount > 0) {\n          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request });\n        }\n        break;\n\n      case 'upload-photo':\n        this.upload_contact_photo(props || this.gui_objects.uploadform);\n        break;\n\n      case 'delete-photo':\n        this.replace_contact_photo('-del-');\n        break;\n\n      // user settings commands\n      case 'preferences':\n      case 'identities':\n      case 'folders':\n        this.goto_url('settings/' + command);\n        break;\n\n      case 'undo':\n        this.http_request('undo', '', this.display_message('', 'loading'));\n        break;\n\n      // unified command call (command name == function name)\n      default:\n        var func = command.replace(/-/g, '_');\n        if (this[func] && typeof this[func] === 'function') {\n          ret = this[func](props, obj);\n        }\n        break;\n    }\n\n    if (this.triggerEvent('after'+command, props) === false)\n      ret = false;\n    this.triggerEvent('actionafter', {props:props, action:command});\n\n    return ret === false ? false : obj ? false : true;\n  };\n\n  // set command(s) enabled or disabled\n  this.enable_command = function()\n  {\n    var i, n, args = Array.prototype.slice.call(arguments),\n      enable = args.pop(), cmd;\n\n    for (n=0; n<args.length; n++) {\n      cmd = args[n];\n      // argument of type array\n      if (typeof cmd === 'string') {\n        this.commands[cmd] = enable;\n        this.set_button(cmd, (enable ? 'act' : 'pas'));\n      }\n      // push array elements into commands array\n      else {\n        for (i in cmd)\n          args.push(cmd[i]);\n      }\n    }\n  };\n\n  // lock/unlock interface\n  this.set_busy = function(a, message, id)\n  {\n    if (a && message) {\n      var msg = this.get_label(message);\n      if (msg == message)\n        msg = 'Loading...';\n\n      id = this.display_message(msg, 'loading');\n    }\n    else if (!a && id) {\n      this.hide_message(id);\n    }\n\n    this.busy = a;\n    //document.body.style.cursor = a ? 'wait' : 'default';\n\n    if (this.gui_objects.editform)\n      this.lock_form(this.gui_objects.editform, a);\n\n    return id;\n  };\n\n  // return a localized string\n  this.get_label = function(name, domain)\n  {\n    if (domain && this.labels[domain+'.'+name])\n      return this.labels[domain+'.'+name];\n    else if (this.labels[name])\n      return this.labels[name];\n    else\n      return name;\n  };\n\n  // alias for convenience reasons\n  this.gettext = this.get_label;\n\n  // switch to another application task\n  this.switch_task = function(task)\n  {\n    if (this.task===task && task!='mail')\n      return;\n\n    var url = this.get_task_url(task);\n    if (task=='mail')\n      url += '&_mbox=INBOX';\n\n    this.redirect(url);\n  };\n\n  this.get_task_url = function(task, url)\n  {\n    if (!url)\n      url = this.env.comm_path;\n\n    return url.replace(/_task=[a-z]+/, '_task='+task);\n  };\n\n  this.reload = function(delay)\n  {\n    if (this.is_framed())\n      parent.rcmail.reload(delay);\n    else if (delay)\n      setTimeout(function(){ rcmail.reload(); }, delay);\n    else if (window.location)\n      location.href = this.env.comm_path + (this.env.action ? '&_action='+this.env.action : '');\n  };\n\n  // Add variable to GET string, replace old value if exists\n  this.add_url = function(url, name, value)\n  {\n    value = urlencode(value);\n\n    if (/(\\?.*)$/.test(url)) {\n      var urldata = RegExp.$1,\n        datax = RegExp('((\\\\?|&)'+RegExp.escape(name)+'=[^&]*)');\n\n      if (datax.test(urldata)) {\n        urldata = urldata.replace(datax, RegExp.$2 + name + '=' + value);\n      }\n      else\n        urldata += '&' + name + '=' + value\n\n      return url.replace(/(\\?.*)$/, urldata);\n    }\n\n    return url + '?' + name + '=' + value;\n  };\n\n  this.is_framed = function()\n  {\n    return (this.env.framed && parent.rcmail && parent.rcmail != this && parent.rcmail.command);\n  };\n\n  this.save_pref = function(prop)\n  {\n    var request = {'_name': prop.name, '_value': prop.value};\n\n    if (prop.session)\n      request['_session'] = prop.session;\n    if (prop.env)\n      this.env[prop.env] = prop.value;\n\n    this.http_post('save-pref', request);\n  };\n\n  this.html_identifier = function(str, encode)\n  {\n    str = String(str);\n    if (encode)\n      return Base64.encode(str).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n    else\n      return str.replace(this.identifier_expr, '_');\n  };\n\n  this.html_identifier_decode = function(str)\n  {\n    str = String(str).replace(/-/g, '+').replace(/_/g, '/');\n\n    while (str.length % 4) str += '=';\n\n    return Base64.decode(str);\n  };\n\n\n  /*********************************************************/\n  /*********        event handling methods         *********/\n  /*********************************************************/\n\n  this.drag_menu = function(e, target)\n  {\n    var modkey = rcube_event.get_modifier(e),\n      menu = this.gui_objects.message_dragmenu;\n\n    if (menu && modkey == SHIFT_KEY && this.commands['copy']) {\n      var pos = rcube_event.get_mouse_pos(e);\n      this.env.drag_target = target;\n      $(menu).css({top: (pos.y-10)+'px', left: (pos.x-10)+'px'}).show();\n      return true;\n    }\n\n    return false;\n  };\n\n  this.drag_menu_action = function(action)\n  {\n    var menu = this.gui_objects.message_dragmenu;\n    if (menu) {\n      $(menu).hide();\n    }\n    this.command(action, this.env.drag_target);\n    this.env.drag_target = null;\n  };\n\n  this.drag_start = function(list)\n  {\n    var model = this.task == 'mail' ? this.env.mailboxes : this.env.contactfolders;\n\n    this.drag_active = true;\n\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    // save folderlist and folders location/sizes for droptarget calculation in drag_move()\n    if (this.gui_objects.folderlist && model) {\n      this.initialBodyScrollTop = bw.ie ? 0 : window.pageYOffset;\n      this.initialListScrollTop = this.gui_objects.folderlist.parentNode.scrollTop;\n\n      var k, li, height,\n        list = $(this.gui_objects.folderlist);\n        pos = list.offset();\n\n      this.env.folderlist_coords = { x1:pos.left, y1:pos.top, x2:pos.left + list.width(), y2:pos.top + list.height() };\n\n      this.env.folder_coords = [];\n      for (k in model) {\n        if (li = this.get_folder_li(k)) {\n          // only visible folders\n          if (height = li.firstChild.offsetHeight) {\n            pos = $(li.firstChild).offset();\n            this.env.folder_coords[k] = { x1:pos.left, y1:pos.top,\n              x2:pos.left + li.firstChild.offsetWidth, y2:pos.top + height, on:0 };\n          }\n        }\n      }\n    }\n  };\n\n  this.drag_end = function(e)\n  {\n    this.drag_active = false;\n    this.env.last_folder_target = null;\n\n    if (this.folder_auto_timer) {\n      clearTimeout(this.folder_auto_timer);\n      this.folder_auto_timer = null;\n      this.folder_auto_expand = null;\n    }\n\n    // over the folders\n    if (this.gui_objects.folderlist && this.env.folder_coords) {\n      for (var k in this.env.folder_coords) {\n        if (this.env.folder_coords[k].on)\n          $(this.get_folder_li(k)).removeClass('droptarget');\n      }\n    }\n  };\n\n  this.drag_move = function(e)\n  {\n    if (this.gui_objects.folderlist && this.env.folder_coords) {\n      var k, li, div, check, oldclass,\n        layerclass = 'draglayernormal',\n        mouse = rcube_event.get_mouse_pos(e),\n        pos = this.env.folderlist_coords,\n        // offsets to compensate for scrolling while dragging a message\n        boffset = bw.ie ? -document.documentElement.scrollTop : this.initialBodyScrollTop,\n        moffset = this.initialListScrollTop-this.gui_objects.folderlist.parentNode.scrollTop;\n\n      if (this.contact_list && this.contact_list.draglayer)\n        oldclass = this.contact_list.draglayer.attr('class');\n\n      mouse.y += -moffset-boffset;\n\n      // if mouse pointer is outside of folderlist\n      if (mouse.x < pos.x1 || mouse.x >= pos.x2 || mouse.y < pos.y1 || mouse.y >= pos.y2) {\n        if (this.env.last_folder_target) {\n          $(this.get_folder_li(this.env.last_folder_target)).removeClass('droptarget');\n          this.env.folder_coords[this.env.last_folder_target].on = 0;\n          this.env.last_folder_target = null;\n        }\n        if (layerclass != oldclass && this.contact_list && this.contact_list.draglayer)\n          this.contact_list.draglayer.attr('class', layerclass);\n        return;\n      }\n\n      // over the folders\n      for (k in this.env.folder_coords) {\n        pos = this.env.folder_coords[k];\n        if (mouse.x >= pos.x1 && mouse.x < pos.x2 && mouse.y >= pos.y1 && mouse.y < pos.y2){\n          if ((check = this.check_droptarget(k))) {\n            li = this.get_folder_li(k);\n            div = $(li.getElementsByTagName('div')[0]);\n\n            // if the folder is collapsed, expand it after 1sec and restart the drag & drop process.\n            if (div.hasClass('collapsed')) {\n              if (this.folder_auto_timer)\n                clearTimeout(this.folder_auto_timer);\n\n              this.folder_auto_expand = this.env.mailboxes[k].id;\n              this.folder_auto_timer = setTimeout(function() {\n                rcmail.command('collapse-folder', rcmail.folder_auto_expand);\n                rcmail.drag_start(null);\n              }, 1000);\n            } else if (this.folder_auto_timer) {\n              clearTimeout(this.folder_auto_timer);\n              this.folder_auto_timer = null;\n              this.folder_auto_expand = null;\n            }\n\n            $(li).addClass('droptarget');\n            this.env.folder_coords[k].on = 1;\n            this.env.last_folder_target = k;\n            layerclass = 'draglayer' + (check > 1 ? 'copy' : 'normal');\n          } else { // Clear target, otherwise drag end will trigger move into last valid droptarget\n            this.env.last_folder_target = null;\n          }\n        }\n        else if (pos.on) {\n          $(this.get_folder_li(k)).removeClass('droptarget');\n          this.env.folder_coords[k].on = 0;\n        }\n      }\n\n      if (layerclass != oldclass && this.contact_list && this.contact_list.draglayer)\n        this.contact_list.draglayer.attr('class', layerclass);\n    }\n  };\n\n  this.collapse_folder = function(name)\n  {\n    var li = this.get_folder_li(name, '', true),\n      div = $('div:first', li),\n      ul = $('ul:first', li);\n\n    if (div.hasClass('collapsed')) {\n      ul.show();\n      div.removeClass('collapsed').addClass('expanded');\n      var reg = new RegExp('&'+urlencode(name)+'&');\n      this.env.collapsed_folders = this.env.collapsed_folders.replace(reg, '');\n    }\n    else if (div.hasClass('expanded')) {\n      ul.hide();\n      div.removeClass('expanded').addClass('collapsed');\n      this.env.collapsed_folders = this.env.collapsed_folders+'&'+urlencode(name)+'&';\n\n      // select the folder if one of its childs is currently selected\n      // don't select if it's virtual (#1488346)\n      if (this.env.mailbox.indexOf(name + this.env.delimiter) == 0 && !$(li).hasClass('virtual'))\n        this.command('list', name);\n    }\n    else\n      return;\n\n    // Work around a bug in IE6 and IE7, see #1485309\n    if (bw.ie6 || bw.ie7) {\n      var siblings = li.nextSibling ? li.nextSibling.getElementsByTagName('ul') : null;\n      if (siblings && siblings.length && (li = siblings[0]) && li.style && li.style.display != 'none') {\n        li.style.display = 'none';\n        li.style.display = '';\n      }\n    }\n\n    this.command('save-pref', { name: 'collapsed_folders', value: this.env.collapsed_folders });\n    this.set_unread_count_display(name, false);\n  };\n\n  this.doc_mouse_up = function(e)\n  {\n    var model, list, li, id;\n\n    // ignore event if jquery UI dialog is open\n    if ($(rcube_event.get_target(e)).closest('.ui-dialog, .ui-widget-overlay').length)\n      return;\n\n    if (list = this.message_list) {\n      if (!rcube_mouse_is_over(e, list.list.parentNode))\n        list.blur();\n      else\n        list.focus();\n      model = this.env.mailboxes;\n    }\n    else if (list = this.contact_list) {\n      if (!rcube_mouse_is_over(e, list.list.parentNode))\n        list.blur();\n      else\n        list.focus();\n      model = this.env.contactfolders;\n    }\n    else if (this.ksearch_value) {\n      this.ksearch_blur();\n    }\n\n    // handle mouse release when dragging\n    if (this.drag_active && model && this.env.last_folder_target) {\n      var target = model[this.env.last_folder_target];\n\n      $(this.get_folder_li(this.env.last_folder_target)).removeClass('droptarget');\n      this.env.last_folder_target = null;\n      list.draglayer.hide();\n\n      if (!this.drag_menu(e, target))\n        this.command('moveto', target);\n    }\n\n    // reset 'pressed' buttons\n    if (this.buttons_sel) {\n      for (id in this.buttons_sel)\n        if (typeof id !== 'function')\n          this.button_out(this.buttons_sel[id], id);\n      this.buttons_sel = {};\n    }\n  };\n\n  this.click_on_list = function(e)\n  {\n    if (this.gui_objects.qsearchbox)\n      this.gui_objects.qsearchbox.blur();\n\n    if (this.message_list)\n      this.message_list.focus();\n    else if (this.contact_list)\n      this.contact_list.focus();\n\n    return true;\n  };\n\n  this.msglist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var selected = list.get_single_selection() != null;\n\n    this.enable_command(this.env.message_commands, selected);\n    if (selected) {\n      // Hide certain command buttons when Drafts folder is selected\n      if (this.env.mailbox == this.env.drafts_mailbox)\n        this.enable_command('reply', 'reply-all', 'reply-list', 'forward', 'forward-attachment', false);\n      // Disable reply-list when List-Post header is not set\n      else {\n        var msg = this.env.messages[list.get_single_selection()];\n        if (!msg.ml)\n          this.enable_command('reply-list', false);\n      }\n    }\n    // Multi-message commands\n    this.enable_command('delete', 'moveto', 'copy', 'mark', (list.selection.length > 0 ? true : false));\n\n    // reset all-pages-selection\n    if (selected || (list.selection.length && list.selection.length != list.rowcount))\n      this.select_all_mode = false;\n\n    // start timer for message preview (wait for double click)\n    if (selected && this.env.contentframe && !list.multi_selecting && !this.dummy_select)\n      this.preview_timer = setTimeout(function(){ ref.msglist_get_preview(); }, 200);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  // This allow as to re-select selected message and display it in preview frame\n  this.msglist_click = function(list)\n  {\n    if (list.multi_selecting || !this.env.contentframe)\n      return;\n\n    if (list.get_single_selection() && window.frames && window.frames[this.env.contentframe]) {\n      if (window.frames[this.env.contentframe].location.href.indexOf(this.env.blankpage)>=0) {\n        if (this.preview_timer)\n          clearTimeout(this.preview_timer);\n        if (this.preview_read_timer)\n          clearTimeout(this.preview_read_timer);\n        this.preview_timer = setTimeout(function(){ ref.msglist_get_preview(); }, 200);\n      }\n    }\n  };\n\n  this.msglist_dbl_click = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var uid = list.get_single_selection();\n    if (uid && this.env.mailbox == this.env.drafts_mailbox)\n      this.goto_url('compose', { _draft_uid: uid, _mbox: this.env.mailbox }, true);\n    else if (uid)\n      this.show_message(uid, false, false);\n  };\n\n  this.msglist_keypress = function(list)\n  {\n    if (list.modkey == CONTROL_KEY)\n      return;\n\n    if (list.key_pressed == list.ENTER_KEY)\n      this.command('show');\n    else if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY)\n      this.command('delete');\n    else if (list.key_pressed == 33)\n      this.command('previouspage');\n    else if (list.key_pressed == 34)\n      this.command('nextpage');\n  };\n\n  this.msglist_get_preview = function()\n  {\n    var uid = this.get_single_uid();\n    if (uid && this.env.contentframe && !this.drag_active)\n      this.show_message(uid, false, true);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  this.msglist_expand = function(row)\n  {\n    if (this.env.messages[row.uid])\n      this.env.messages[row.uid].expanded = row.expanded;\n    $(row.obj)[row.expanded?'addClass':'removeClass']('expanded');\n  };\n\n  this.msglist_set_coltypes = function(list)\n  {\n    var i, found, name, cols = list.list.tHead.rows[0].cells;\n\n    this.env.coltypes = [];\n\n    for (i=0; i<cols.length; i++)\n      if (cols[i].id && cols[i].id.match(/^rcm/)) {\n        name = cols[i].id.replace(/^rcm/, '');\n        this.env.coltypes.push(name);\n      }\n\n    if ((found = $.inArray('flag', this.env.coltypes)) >= 0)\n      this.env.flagged_col = found;\n\n    if ((found = $.inArray('subject', this.env.coltypes)) >= 0)\n      this.env.subject_col = found;\n\n    this.command('save-pref', { name: 'list_cols', value: this.env.coltypes, session: 'list_attrib/columns' });\n  };\n\n  this.check_droptarget = function(id)\n  {\n    var allow = false, copy = false;\n\n    if (this.task == 'mail')\n      allow = (this.env.mailboxes[id] && this.env.mailboxes[id].id != this.env.mailbox && !this.env.mailboxes[id].virtual);\n    else if (this.task == 'settings')\n      allow = (id != this.env.mailbox);\n    else if (this.task == 'addressbook') {\n      if (id != this.env.source && this.env.contactfolders[id]) {\n        if (this.env.contactfolders[id].type == 'group') {\n          var target_abook = this.env.contactfolders[id].source;\n          allow = this.env.contactfolders[id].id != this.env.group && !this.env.contactfolders[target_abook].readonly;\n          copy = target_abook != this.env.source;\n        }\n        else {\n          allow = !this.env.contactfolders[id].readonly;\n          copy = true;\n        }\n      }\n    }\n\n    return allow ? (copy ? 2 : 1) : 0;\n  };\n\n\n  /*********************************************************/\n  /*********     (message) list functionality      *********/\n  /*********************************************************/\n\n  this.init_message_row = function(row)\n  {\n    var expando, self = this, uid = row.uid,\n      status_icon = (this.env.status_col != null ? 'status' : 'msg') + 'icn' + row.uid;\n\n    if (uid && this.env.messages[uid])\n      $.extend(row, this.env.messages[uid]);\n\n    // set eventhandler to status icon\n    if (row.icon = document.getElementById(status_icon)) {\n      row.icon._row = row.obj;\n      row.icon.onmousedown = function(e) { self.command('toggle_status', this); rcube_event.cancel(e); };\n    }\n\n    // save message icon position too\n    if (this.env.status_col != null)\n      row.msgicon = document.getElementById('msgicn'+row.uid);\n    else\n      row.msgicon = row.icon;\n\n    // set eventhandler to flag icon, if icon found\n    if (this.env.flagged_col != null && (row.flagicon = document.getElementById('flagicn'+row.uid))) {\n      row.flagicon._row = row.obj;\n      row.flagicon.onmousedown = function(e) { self.command('toggle_flag', this); rcube_event.cancel(e); };\n    }\n\n    if (!row.depth && row.has_children && (expando = document.getElementById('rcmexpando'+row.uid))) {\n      row.expando = expando;\n      expando.onmousedown = function(e) { return self.expand_message_row(e, uid); };\n    }\n\n    this.triggerEvent('insertrow', { uid:uid, row:row });\n  };\n\n  // create a table row in the message list\n  this.add_message_row = function(uid, cols, flags, attop)\n  {\n    if (!this.gui_objects.messagelist || !this.message_list)\n      return false;\n\n    // Prevent from adding messages from different folder (#1487752)\n    if (flags.mbox != this.env.mailbox && !flags.skip_mbox_check)\n      return false;\n\n    if (!this.env.messages[uid])\n      this.env.messages[uid] = {};\n\n    // merge flags over local message object\n    $.extend(this.env.messages[uid], {\n      deleted: flags.deleted?1:0,\n      replied: flags.answered?1:0,\n      unread: !flags.seen?1:0,\n      forwarded: flags.forwarded?1:0,\n      flagged: flags.flagged?1:0,\n      has_children: flags.has_children?1:0,\n      depth: flags.depth?flags.depth:0,\n      unread_children: flags.unread_children?flags.unread_children:0,\n      parent_uid: flags.parent_uid?flags.parent_uid:0,\n      selected: this.select_all_mode || this.message_list.in_selection(uid),\n      ml: flags.ml?1:0,\n      ctype: flags.ctype,\n      // flags from plugins\n      flags: flags.extra_flags\n    });\n\n    var c, n, col, html, css_class,\n      tree = '', expando = '',\n      list = this.message_list,\n      rows = list.rows,\n      message = this.env.messages[uid],\n      row_class = 'message'\n        + (!flags.seen ? ' unread' : '')\n        + (flags.deleted ? ' deleted' : '')\n        + (flags.flagged ? ' flagged' : '')\n        + (flags.unread_children && flags.seen && !this.env.autoexpand_threads ? ' unroot' : '')\n        + (message.selected ? ' selected' : ''),\n      // for performance use DOM instead of jQuery here\n      row = document.createElement('tr');\n\n    row.id = 'rcmrow'+uid;\n\n    // message status icons\n    css_class = 'msgicon';\n    if (this.env.status_col === null) {\n      css_class += ' status';\n      if (flags.deleted)\n        css_class += ' deleted';\n      else if (!flags.seen)\n        css_class += ' unread';\n      else if (flags.unread_children > 0)\n        css_class += ' unreadchildren';\n    }\n    if (flags.answered)\n      css_class += ' replied';\n    if (flags.forwarded)\n      css_class += ' forwarded';\n\n    // update selection\n    if (message.selected && !list.in_selection(uid))\n      list.selection.push(uid);\n\n    // threads\n    if (this.env.threading) {\n      if (message.depth) {\n        // This assumes that div width is hardcoded to 15px,\n        tree += '<span id=\"rcmtab' + uid + '\" class=\"branch\" style=\"width:' + (message.depth * 15) + 'px;\">&nbsp;&nbsp;</span>';\n\n        if ((rows[message.parent_uid] && rows[message.parent_uid].expanded === false)\n          || ((this.env.autoexpand_threads == 0 || this.env.autoexpand_threads == 2) &&\n            (!rows[message.parent_uid] || !rows[message.parent_uid].expanded))\n        ) {\n          row.style.display = 'none';\n          message.expanded = false;\n        }\n        else\n          message.expanded = true;\n\n        row_class += ' thread expanded';\n      }\n      else if (message.has_children) {\n        if (message.expanded === undefined && (this.env.autoexpand_threads == 1 || (this.env.autoexpand_threads == 2 && message.unread_children))) {\n          message.expanded = true;\n        }\n\n        expando = '<div id=\"rcmexpando' + uid + '\" class=\"' + (message.expanded ? 'expanded' : 'collapsed') + '\">&nbsp;&nbsp;</div>';\n        row_class += ' thread' + (message.expanded? ' expanded' : '');\n      }\n    }\n\n    tree += '<span id=\"msgicn'+uid+'\" class=\"'+css_class+'\">&nbsp;</span>';\n    row.className = row_class;\n\n    // build subject link \n    if (!bw.ie && cols.subject) {\n      var action = flags.mbox == this.env.drafts_mailbox ? 'compose' : 'show';\n      var uid_param = flags.mbox == this.env.drafts_mailbox ? '_draft_uid' : '_uid';\n      cols.subject = '<a href=\"./?_task=mail&_action='+action+'&_mbox='+urlencode(flags.mbox)+'&'+uid_param+'='+uid+'\"'+\n        ' onclick=\"return rcube_event.cancel(event)\" onmouseover=\"rcube_webmail.long_subject_title(this,'+(message.depth+1)+')\">'+cols.subject+'</a>';\n    }\n\n    // add each submitted col\n    for (n in this.env.coltypes) {\n      c = this.env.coltypes[n];\n      col = document.createElement('td');\n      col.className = String(c).toLowerCase();\n\n      if (c == 'flag') {\n        css_class = (flags.flagged ? 'flagged' : 'unflagged');\n        html = '<span id=\"flagicn'+uid+'\" class=\"'+css_class+'\">&nbsp;</span>';\n      }\n      else if (c == 'attachment') {\n        if (/application\\/|multipart\\/(m|signed)/.test(flags.ctype))\n          html = '<span class=\"attachment\">&nbsp;</span>';\n        else if (/multipart\\/report/.test(flags.ctype))\n          html = '<span class=\"report\">&nbsp;</span>';\n        else\n          html = '&nbsp;';\n      }\n      else if (c == 'status') {\n        if (flags.deleted)\n          css_class = 'deleted';\n        else if (!flags.seen)\n          css_class = 'unread';\n        else if (flags.unread_children > 0)\n          css_class = 'unreadchildren';\n        else\n          css_class = 'msgicon';\n        html = '<span id=\"statusicn'+uid+'\" class=\"'+css_class+'\">&nbsp;</span>';\n      }\n      else if (c == 'threads')\n        html = expando;\n      else if (c == 'subject') {\n        if (bw.ie) {\n          col.onmouseover = function() { rcube_webmail.long_subject_title_ie(this, message.depth+1); };\n          if (bw.ie8)\n            tree = '<span></span>' + tree; // #1487821\n        }\n        html = tree + cols[c];\n      }\n      else if (c == 'priority') {\n        if (flags.prio > 0 && flags.prio < 6)\n          html = '<span class=\"prio'+flags.prio+'\">&nbsp;</span>';\n        else\n          html = '&nbsp;';\n      }\n      else\n        html = cols[c];\n\n      col.innerHTML = html;\n\n      row.appendChild(col);\n    }\n\n    list.insert_row(row, attop);\n\n    // remove 'old' row\n    if (attop && this.env.pagesize && list.rowcount > this.env.pagesize) {\n      var uid = list.get_last_row();\n      list.remove_row(uid);\n      list.clear_selection(uid);\n    }\n  };\n\n  this.set_list_sorting = function(sort_col, sort_order)\n  {\n    // set table header class\n    $('#rcm'+this.env.sort_col).removeClass('sorted'+(this.env.sort_order.toUpperCase()));\n    if (sort_col)\n      $('#rcm'+sort_col).addClass('sorted'+sort_order);\n\n    this.env.sort_col = sort_col;\n    this.env.sort_order = sort_order;\n  };\n\n  this.set_list_options = function(cols, sort_col, sort_order, threads)\n  {\n    var update, post_data = {};\n\n    if (sort_col === undefined)\n      sort_col = this.env.sort_col;\n    if (!sort_order)\n      sort_order = this.env.sort_order;\n\n    if (this.env.sort_col != sort_col || this.env.sort_order != sort_order) {\n      update = 1;\n      this.set_list_sorting(sort_col, sort_order);\n    }\n\n    if (this.env.threading != threads) {\n      update = 1;\n      post_data._threads = threads;\n    }\n\n    if (cols && cols.length) {\n      // make sure new columns are added at the end of the list\n      var i, idx, name, newcols = [], oldcols = this.env.coltypes;\n      for (i=0; i<oldcols.length; i++) {\n        name = oldcols[i];\n        idx = $.inArray(name, cols);\n        if (idx != -1) {\n          newcols.push(name);\n          delete cols[idx];\n        }\n      }\n      for (i=0; i<cols.length; i++)\n        if (cols[i])\n          newcols.push(cols[i]);\n\n      if (newcols.join() != oldcols.join()) {\n        update = 1;\n        post_data._cols = newcols.join(',');\n      }\n    }\n\n    if (update)\n      this.list_mailbox('', '', sort_col+'_'+sort_order, post_data);\n  };\n\n  // when user doble-clicks on a row\n  this.show_message = function(id, safe, preview)\n  {\n    if (!id)\n      return;\n\n    var target = window,\n      action = preview ? 'preview': 'show',\n      url = '&_action='+action+'&_uid='+id+'&_mbox='+urlencode(this.env.mailbox);\n\n    if (preview && this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      target = window.frames[this.env.contentframe];\n      url += '&_framed=1';\n    }\n\n    if (safe)\n      url += '&_safe=1';\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      url += '&_search='+this.env.search_request;\n\n    // add browser capabilities, so we can properly handle attachments\n    url += '&_caps='+urlencode(this.browser_capabilities());\n\n    if (preview && String(target.location.href).indexOf(url) >= 0)\n      this.show_contentframe(true);\n    else {\n      this.location_href(this.env.comm_path+url, target, true);\n\n      // mark as read and change mbox unread counter\n      if (preview && this.message_list && this.message_list.rows[id] && this.message_list.rows[id].unread && this.env.preview_pane_mark_read >= 0) {\n        this.preview_read_timer = setTimeout(function() {\n          ref.set_message(id, 'unread', false);\n          ref.update_thread_root(id, 'read');\n          if (ref.env.unread_counts[ref.env.mailbox]) {\n            ref.env.unread_counts[ref.env.mailbox] -= 1;\n            ref.set_unread_count(ref.env.mailbox, ref.env.unread_counts[ref.env.mailbox], ref.env.mailbox == 'INBOX');\n          }\n          if (ref.env.preview_pane_mark_read > 0)\n            ref.http_post('mark', {_uid: id, _flag: 'read', _quiet: 1});\n        }, this.env.preview_pane_mark_read * 1000);\n      }\n    }\n  };\n\n  this.show_contentframe = function(show)\n  {\n    var frm, win;\n    if (this.env.contentframe && (frm = $('#'+this.env.contentframe)) && frm.length) {\n      if (!show && (win = window.frames[this.env.contentframe])) {\n        if (win.location && win.location.href.indexOf(this.env.blankpage)<0)\n          win.location.href = this.env.blankpage;\n      }\n      else if (!bw.safari && !bw.konq)\n        frm[show ? 'show' : 'hide']();\n      }\n\n    if (!show && this.busy)\n      this.set_busy(false, null, this.env.frame_lock);\n  };\n\n  this.lock_frame = function()\n  {\n    if (!this.env.frame_lock)\n      (this.is_framed() ? parent.rcmail : this).env.frame_lock = this.set_busy(true, 'loading');\n  };\n\n  // list a specific page\n  this.list_page = function(page)\n  {\n    if (page == 'next')\n      page = this.env.current_page+1;\n    else if (page == 'last')\n      page = this.env.pagecount;\n    else if (page == 'prev' && this.env.current_page > 1)\n      page = this.env.current_page-1;\n    else if (page == 'first' && this.env.current_page > 1)\n      page = 1;\n\n    if (page > 0 && page <= this.env.pagecount) {\n      this.env.current_page = page;\n\n      if (this.task == 'addressbook' || this.contact_list)\n        this.list_contacts(this.env.source, this.env.group, page);\n      else if (this.task == 'mail')\n        this.list_mailbox(this.env.mailbox, page);\n    }\n  };\n\n  // list messages of a specific mailbox using filter\n  this.filter_mailbox = function(filter)\n  {\n    var lock = this.set_busy(true, 'searching');\n\n    this.clear_message_list();\n\n    // reset vars\n    this.env.current_page = 1;\n    this.http_request('search', this.search_params(false, filter), lock);\n  };\n\n  // list messages of a specific mailbox\n  this.list_mailbox = function(mbox, page, sort, url)\n  {\n    var target = window;\n\n    if (typeof url != 'object')\n      url = {};\n\n    if (!mbox)\n      mbox = this.env.mailbox ? this.env.mailbox : 'INBOX';\n\n    // add sort to url if set\n    if (sort)\n      url._sort = sort;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    // set page=1 if changeing to another mailbox\n    if (this.env.mailbox != mbox) {\n      page = 1;\n      this.env.current_page = page;\n      this.select_all_mode = false;\n    }\n\n    // unselect selected messages and clear the list and message data\n    this.clear_message_list();\n\n    if (mbox != this.env.mailbox || (mbox == this.env.mailbox && !page && !sort))\n      url._refresh = 1;\n\n    this.select_folder(mbox, '', true);\n    this.unmark_folder(mbox, 'recent', '', true);\n    this.env.mailbox = mbox;\n\n    // load message list remotely\n    if (this.gui_objects.messagelist) {\n      this.list_mailbox_remote(mbox, page, url);\n      return;\n    }\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      target = window.frames[this.env.contentframe];\n      url._framed = 1;\n    }\n\n    // load message list to target frame/window\n    if (mbox) {\n      this.set_busy(true, 'loading');\n      url._mbox = mbox;\n      if (page)\n        url._page = page;\n      this.location_href(url, target);\n    }\n  };\n\n  this.clear_message_list = function()\n  {\n      this.env.messages = {};\n      this.last_selected = 0;\n\n      this.show_contentframe(false);\n      if (this.message_list)\n        this.message_list.clear(true);\n  };\n\n  // send remote request to load message list\n  this.list_mailbox_remote = function(mbox, page, post_data)\n  {\n    // clear message list first\n    this.message_list.clear();\n\n    var lock = this.set_busy(true, 'loading');\n\n    if (typeof post_data != 'object')\n      post_data = {};\n    post_data._mbox = mbox;\n    if (page)\n      post_data._page = page;\n\n    this.http_request('list', post_data, lock);\n  };\n\n  // removes messages that doesn't exists from list selection array\n  this.update_selection = function()\n  {\n    var selected = this.message_list.selection,\n      rows = this.message_list.rows,\n      i, selection = [];\n\n    for (i in selected)\n      if (rows[selected[i]])\n        selection.push(selected[i]);\n\n    this.message_list.selection = selection;\n  }\n\n  // expand all threads with unread children\n  this.expand_unread = function()\n  {\n    var r, tbody = this.gui_objects.messagelist.tBodies[0],\n      new_row = tbody.firstChild;\n\n    while (new_row) {\n      if (new_row.nodeType == 1 && (r = this.message_list.rows[new_row.uid]) && r.unread_children) {\n        this.message_list.expand_all(r);\n        this.set_unread_children(r.uid);\n      }\n      new_row = new_row.nextSibling;\n    }\n    return false;\n  };\n\n  // thread expanding/collapsing handler\n  this.expand_message_row = function(e, uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    // handle unread_children mark\n    row.expanded = !row.expanded;\n    this.set_unread_children(uid);\n    row.expanded = !row.expanded;\n\n    this.message_list.expand_row(e, uid);\n  };\n\n  // message list expanding\n  this.expand_threads = function()\n  {\n    if (!this.env.threading || !this.env.autoexpand_threads || !this.message_list)\n      return;\n\n    switch (this.env.autoexpand_threads) {\n      case 2: this.expand_unread(); break;\n      case 1: this.message_list.expand_all(); break;\n    }\n  };\n\n  // Initializes threads indicators/expanders after list update\n  this.init_threads = function(roots, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    for (var n=0, len=roots.length; n<len; n++)\n      this.add_tree_icons(roots[n]);\n    this.expand_threads();\n  };\n\n  // adds threads tree icons to the list (or specified thread)\n  this.add_tree_icons = function(root)\n  {\n    var i, l, r, n, len, pos, tmp = [], uid = [],\n      row, rows = this.message_list.rows;\n\n    if (root)\n      row = rows[root] ? rows[root].obj : null;\n    else\n      row = this.message_list.list.tBodies[0].firstChild;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (r.depth) {\n          for (i=tmp.length-1; i>=0; i--) {\n            len = tmp[i].length;\n            if (len > r.depth) {\n              pos = len - r.depth;\n              if (!(tmp[i][pos] & 2))\n                tmp[i][pos] = tmp[i][pos] ? tmp[i][pos]+2 : 2;\n            }\n            else if (len == r.depth) {\n              if (!(tmp[i][0] & 2))\n                tmp[i][0] += 2;\n            }\n            if (r.depth > len)\n              break;\n          }\n\n          tmp.push(new Array(r.depth));\n          tmp[tmp.length-1][0] = 1;\n          uid.push(r.uid);\n        }\n        else {\n          if (tmp.length) {\n            for (i in tmp) {\n              this.set_tree_icons(uid[i], tmp[i]);\n            }\n            tmp = [];\n            uid = [];\n          }\n          if (root && row != rows[root].obj)\n            break;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    if (tmp.length) {\n      for (i in tmp) {\n        this.set_tree_icons(uid[i], tmp[i]);\n      }\n    }\n  };\n\n  // adds tree icons to specified message row\n  this.set_tree_icons = function(uid, tree)\n  {\n    var i, divs = [], html = '', len = tree.length;\n\n    for (i=0; i<len; i++) {\n      if (tree[i] > 2)\n        divs.push({'class': 'l3', width: 15});\n      else if (tree[i] > 1)\n        divs.push({'class': 'l2', width: 15});\n      else if (tree[i] > 0)\n        divs.push({'class': 'l1', width: 15});\n      // separator div\n      else if (divs.length && !divs[divs.length-1]['class'])\n        divs[divs.length-1].width += 15;\n      else\n        divs.push({'class': null, width: 15});\n    }\n\n    for (i=divs.length-1; i>=0; i--) {\n      if (divs[i]['class'])\n        html += '<div class=\"tree '+divs[i]['class']+'\" />';\n      else\n        html += '<div style=\"width:'+divs[i].width+'px\" />';\n    }\n\n    if (html)\n      $('#rcmtab'+uid).html(html);\n  };\n\n  // update parent in a thread\n  this.update_thread_root = function(uid, flag)\n  {\n    if (!this.env.threading)\n      return;\n\n    var root = this.message_list.find_root(uid);\n\n    if (uid == root)\n      return;\n\n    var p = this.message_list.rows[root];\n\n    if (flag == 'read' && p.unread_children) {\n      p.unread_children--;\n    }\n    else if (flag == 'unread' && p.has_children) {\n      // unread_children may be undefined\n      p.unread_children = p.unread_children ? p.unread_children + 1 : 1;\n    }\n    else {\n      return;\n    }\n\n    this.set_message_icon(root);\n    this.set_unread_children(root);\n  };\n\n  // update thread indicators for all messages in a thread below the specified message\n  // return number of removed/added root level messages\n  this.update_thread = function (uid)\n  {\n    if (!this.env.threading)\n      return 0;\n\n    var r, parent, count = 0,\n      rows = this.message_list.rows,\n      row = rows[uid],\n      depth = rows[uid].depth,\n      roots = [];\n\n    if (!row.depth) // root message: decrease roots count\n      count--;\n    else if (row.unread) {\n      // update unread_children for thread root\n      parent = this.message_list.find_root(uid);\n      rows[parent].unread_children--;\n      this.set_unread_children(parent);\n    }\n\n    parent = row.parent_uid;\n\n    // childrens\n    row = row.obj.nextSibling;\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth || r.depth <= depth)\n          break;\n\n        r.depth--; // move left\n        // reset width and clear the content of a tab, icons will be added later\n        $('#rcmtab'+r.uid).width(r.depth * 15).html('');\n        if (!r.depth) { // a new root\n          count++; // increase roots count\n          r.parent_uid = 0;\n          if (r.has_children) {\n            // replace 'leaf' with 'collapsed'\n            $('#rcmrow'+r.uid+' '+'.leaf:first')\n              .attr('id', 'rcmexpando' + r.uid)\n              .attr('class', (r.obj.style.display != 'none' ? 'expanded' : 'collapsed'))\n              .bind('mousedown', {uid:r.uid, p:this},\n                function(e) { return e.data.p.expand_message_row(e, e.data.uid); });\n\n            r.unread_children = 0;\n            roots.push(r);\n          }\n          // show if it was hidden\n          if (r.obj.style.display == 'none')\n            $(r.obj).show();\n        }\n        else {\n          if (r.depth == depth)\n            r.parent_uid = parent;\n          if (r.unread && roots.length)\n            roots[roots.length-1].unread_children++;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    // update unread_children for roots\n    for (var i=0; i<roots.length; i++)\n      this.set_unread_children(roots[i].uid);\n\n    return count;\n  };\n\n  this.delete_excessive_thread_rows = function()\n  {\n    var rows = this.message_list.rows,\n      tbody = this.message_list.list.tBodies[0],\n      row = tbody.firstChild,\n      cnt = this.env.pagesize + 1;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth && cnt)\n          cnt--;\n\n        if (!cnt)\n          this.message_list.remove_row(row.uid);\n      }\n      row = row.nextSibling;\n    }\n  };\n\n  // set message icon\n  this.set_message_icon = function(uid)\n  {\n    var css_class,\n      row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (row.icon) {\n      css_class = 'msgicon';\n      if (row.deleted)\n        css_class += ' deleted';\n      else if (row.unread)\n        css_class += ' unread';\n      else if (row.unread_children)\n        css_class += ' unreadchildren';\n      if (row.msgicon == row.icon) {\n        if (row.replied)\n          css_class += ' replied';\n        if (row.forwarded)\n          css_class += ' forwarded';\n        css_class += ' status';\n      }\n\n      row.icon.className = css_class;\n    }\n\n    if (row.msgicon && row.msgicon != row.icon) {\n      css_class = 'msgicon';\n      if (!row.unread && row.unread_children)\n        css_class += ' unreadchildren';\n      if (row.replied)\n        css_class += ' replied';\n      if (row.forwarded)\n        css_class += ' forwarded';\n\n      row.msgicon.className = css_class;\n    }\n\n    if (row.flagicon) {\n      css_class = (row.flagged ? 'flagged' : 'unflagged');\n      row.flagicon.className = css_class;\n    }\n  };\n\n  // set message status\n  this.set_message_status = function(uid, flag, status)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag == 'unread')\n      row.unread = status;\n    else if(flag == 'deleted')\n      row.deleted = status;\n    else if (flag == 'replied')\n      row.replied = status;\n    else if (flag == 'forwarded')\n      row.forwarded = status;\n    else if (flag == 'flagged')\n      row.flagged = status;\n  };\n\n  // set message row status, class and icon\n  this.set_message = function(uid, flag, status)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag)\n      this.set_message_status(uid, flag, status);\n\n    var rowobj = $(row.obj);\n\n    if (row.unread && !rowobj.hasClass('unread'))\n      rowobj.addClass('unread');\n    else if (!row.unread && rowobj.hasClass('unread'))\n      rowobj.removeClass('unread');\n\n    if (row.deleted && !rowobj.hasClass('deleted'))\n      rowobj.addClass('deleted');\n    else if (!row.deleted && rowobj.hasClass('deleted'))\n      rowobj.removeClass('deleted');\n\n    if (row.flagged && !rowobj.hasClass('flagged'))\n      rowobj.addClass('flagged');\n    else if (!row.flagged && rowobj.hasClass('flagged'))\n      rowobj.removeClass('flagged');\n\n    this.set_unread_children(uid);\n    this.set_message_icon(uid);\n  };\n\n  // sets unroot (unread_children) class of parent row\n  this.set_unread_children = function(uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (row.parent_uid)\n      return;\n\n    if (!row.unread && row.unread_children && !row.expanded)\n      $(row.obj).addClass('unroot');\n    else\n      $(row.obj).removeClass('unroot');\n  };\n\n  // copy selected messages to the specified mailbox\n  this.copy_messages = function(mbox)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n\n    // exit if current or no mailbox specified or if selection is empty\n    if (!mbox || mbox == this.env.mailbox || (!this.env.uid && (!this.message_list || !this.message_list.get_selection().length)))\n      return;\n\n    var a_uids = [], n, selection,\n      lock = this.display_message(this.get_label('copyingmessage'), 'loading'),\n      post_data = {_mbox: this.env.mailbox, _target_mbox: mbox, _from: (this.env.action ? this.env.action : '')};\n\n    if (this.env.uid)\n      a_uids[0] = this.env.uid;\n    else {\n      selection = this.message_list.get_selection();\n      for (n in selection) {\n        a_uids.push(selection[n]);\n      }\n    }\n\n    post_data._uid = this.uids_to_list(a_uids);\n\n    // send request to server\n    this.http_post('copy', post_data, lock);\n  };\n\n  // move selected messages to the specified mailbox\n  this.move_messages = function(mbox)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n\n    // exit if current or no mailbox specified or if selection is empty\n    if (!mbox || mbox == this.env.mailbox || (!this.env.uid && (!this.message_list || !this.message_list.get_selection().length)))\n      return;\n\n    var lock = false,\n      add_post = {_target_mbox: mbox, _from: (this.env.action ? this.env.action : '')};\n\n    // show wait message\n    if (this.env.action == 'show')\n      lock = this.set_busy(true, 'movingmessage');\n    else\n      this.show_contentframe(false);\n\n    // Hide message command buttons until a message is selected\n    this.enable_command(this.env.message_commands, false);\n\n    this._with_selected_messages('moveto', lock, add_post);\n  };\n\n  // delete selected messages from the current mailbox\n  this.delete_messages = function(event)\n  {\n    var uid, i, len, trash = this.env.trash_mailbox,\n      list = this.message_list,\n      selection = list ? $.merge([], list.get_selection()) : [];\n\n    // exit if no mailbox specified or if selection is empty\n    if (!this.env.uid && !selection.length)\n      return;\n\n    // also select childs of collapsed rows\n    for (i=0, len=selection.length; i<len; i++) {\n      uid = selection[i];\n      if (list.rows[uid].has_children && !list.rows[uid].expanded)\n        list.select_childs(uid);\n    }\n\n    // if config is set to flag for deletion\n    if (this.env.flag_for_deletion) {\n      this.mark_message('delete');\n      return false;\n    }\n    // if there isn't a defined trash mailbox or we are in it\n    // @TODO: we should check if defined trash mailbox exists\n    else if (!trash || this.env.mailbox == trash)\n      this.permanently_remove_messages();\n    // we're in Junk folder and delete_junk is enabled\n    else if (this.env.delete_junk && this.env.junk_mailbox && this.env.mailbox == this.env.junk_mailbox)\n      this.permanently_remove_messages();\n    // if there is a trash mailbox defined and we're not currently in it\n    else {\n      // if shift was pressed delete it immediately\n      if ((list && list.modkey == SHIFT_KEY) || (event && rcube_event.get_modifier(event) == SHIFT_KEY)) {\n        if (confirm(this.get_label('deletemessagesconfirm')))\n          this.permanently_remove_messages();\n      }\n      else\n        this.move_messages(trash);\n    }\n\n    return true;\n  };\n\n  // delete the selected messages permanently\n  this.permanently_remove_messages = function()\n  {\n    // exit if no mailbox specified or if selection is empty\n    if (!this.env.uid && (!this.message_list || !this.message_list.get_selection().length))\n      return;\n\n    this.show_contentframe(false);\n    this._with_selected_messages('delete', false, {_from: this.env.action ? this.env.action : ''});\n  };\n\n  // Send a specifc moveto/delete request with UIDs of all selected messages\n  // @private\n  this._with_selected_messages = function(action, lock, post_data)\n  {\n    var a_uids = [], count = 0, msg, lock;\n\n    if (typeof(post_data) != 'object')\n      post_data = {};\n\n    if (this.env.uid)\n      a_uids[0] = this.env.uid;\n    else {\n      var n, id, root, roots = [],\n        selection = this.message_list.get_selection();\n\n      for (n=0, len=selection.length; n<len; n++) {\n        id = selection[n];\n        a_uids.push(id);\n\n        if (this.env.threading) {\n          count += this.update_thread(id);\n          root = this.message_list.find_root(id);\n          if (root != id && $.inArray(root, roots) < 0) {\n            roots.push(root);\n          }\n        }\n        this.message_list.remove_row(id, (this.env.display_next && n == selection.length-1));\n      }\n      // make sure there are no selected rows\n      if (!this.env.display_next)\n        this.message_list.clear_selection();\n      // update thread tree icons\n      for (n=0, len=roots.length; n<len; n++) {\n        this.add_tree_icons(roots[n]);\n      }\n    }\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    if (this.env.display_next && this.env.next_uid)\n      post_data._next_uid = this.env.next_uid;\n\n    if (count < 0)\n      post_data._count = (count*-1);\n    // remove threads from the end of the list\n    else if (count > 0)\n      this.delete_excessive_thread_rows();\n\n    post_data._uid = this.uids_to_list(a_uids);\n    post_data._mbox = this.env.mailbox;\n\n    if (!lock) {\n      msg = action == 'moveto' ? 'movingmessage' : 'deletingmessage';\n      lock = this.display_message(this.get_label(msg), 'loading');\n    }\n\n    // send request to server\n    this.http_post(action, post_data, lock);\n  };\n\n  // set a specific flag to one or more messages\n  this.mark_message = function(flag, uid)\n  {\n    var a_uids = [], r_uids = [], len, n, id,\n      selection = this.message_list ? this.message_list.get_selection() : [];\n\n    if (uid)\n      a_uids[0] = uid;\n    else if (this.env.uid)\n      a_uids[0] = this.env.uid;\n    else if (this.message_list) {\n      for (n=0, len=selection.length; n<len; n++) {\n          a_uids.push(selection[n]);\n      }\n    }\n\n    if (!this.message_list)\n      r_uids = a_uids;\n    else\n      for (n=0, len=a_uids.length; n<len; n++) {\n        id = a_uids[n];\n        if ((flag=='read' && this.message_list.rows[id].unread) \n            || (flag=='unread' && !this.message_list.rows[id].unread)\n            || (flag=='delete' && !this.message_list.rows[id].deleted)\n            || (flag=='undelete' && this.message_list.rows[id].deleted)\n            || (flag=='flagged' && !this.message_list.rows[id].flagged)\n            || (flag=='unflagged' && this.message_list.rows[id].flagged))\n        {\n          r_uids.push(id);\n        }\n      }\n\n    // nothing to do\n    if (!r_uids.length && !this.select_all_mode)\n      return;\n\n    switch (flag) {\n        case 'read':\n        case 'unread':\n          this.toggle_read_status(flag, r_uids);\n          break;\n        case 'delete':\n        case 'undelete':\n          this.toggle_delete_status(r_uids);\n          break;\n        case 'flagged':\n        case 'unflagged':\n          this.toggle_flagged_status(flag, a_uids);\n          break;\n    }\n  };\n\n  // set class to read/unread\n  this.toggle_read_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = {_uid: this.uids_to_list(a_uids), _flag: flag},\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as read/unread\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'unread', (flag=='unread' ? true : false));\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    this.http_post('mark', post_data, lock);\n\n    for (i=0; i<len; i++)\n      this.update_thread_root(a_uids[i], flag);\n  };\n\n  // set image to flagged or unflagged\n  this.toggle_flagged_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = {_uid: this.uids_to_list(a_uids), _flag: flag},\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as flagged/unflagged\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'flagged', (flag=='flagged' ? true : false));\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // mark all message rows as deleted/undeleted\n  this.toggle_delete_status = function(a_uids)\n  {\n    var len = a_uids.length,\n      i, uid, all_deleted = true,\n      rows = this.message_list ? this.message_list.rows : [];\n\n    if (len == 1) {\n      if (!rows.length || (rows[a_uids[0]] && !rows[a_uids[0]].deleted))\n        this.flag_as_deleted(a_uids);\n      else\n        this.flag_as_undeleted(a_uids);\n\n      return true;\n    }\n\n    for (i=0; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid] && !rows[uid].deleted) {\n        all_deleted = false;\n        break;\n      }\n    }\n\n    if (all_deleted)\n      this.flag_as_undeleted(a_uids);\n    else\n      this.flag_as_deleted(a_uids);\n\n    return true;\n  };\n\n  this.flag_as_undeleted = function(a_uids)\n  {\n    var i, len=a_uids.length,\n      post_data = {_uid: this.uids_to_list(a_uids), _flag: 'undelete'},\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'deleted', false);\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    this.http_post('mark', post_data, lock);\n    return true;\n  };\n\n  this.flag_as_deleted = function(a_uids)\n  {\n    var r_uids = [],\n      post_data = {_uid: this.uids_to_list(a_uids), _flag: 'delete'},\n      lock = this.display_message(this.get_label('markingmessage'), 'loading'),\n      rows = this.message_list ? this.message_list.rows : [],\n      count = 0;\n\n    for (var i=0, len=a_uids.length; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid]) {\n        if (rows[uid].unread)\n          r_uids[r_uids.length] = uid;\n\n        if (this.env.skip_deleted) {\n          count += this.update_thread(uid);\n          this.message_list.remove_row(uid, (this.env.display_next && i == this.message_list.selection.length-1));\n        }\n        else\n          this.set_message(uid, 'deleted', true);\n      }\n    }\n\n    // make sure there are no selected rows\n    if (this.env.skip_deleted && this.message_list) {\n      if(!this.env.display_next)\n        this.message_list.clear_selection();\n      if (count < 0)\n        post_data._count = (count*-1);\n      else if (count > 0) \n        // remove threads from the end of the list\n        this.delete_excessive_thread_rows();\n    }\n\n    if (this.env.action)\n      post_data._from = this.env.action;\n\n    // ??\n    if (r_uids.length)\n      post_data._ruid = this.uids_to_list(r_uids);\n\n    if (this.env.skip_deleted && this.env.display_next && this.env.next_uid)\n      post_data._next_uid = this.env.next_uid;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    this.http_post('mark', post_data, lock);\n    return true;\n  };\n\n  // flag as read without mark request (called from backend)\n  // argument should be a coma-separated list of uids\n  this.flag_deleted_as_read = function(uids)\n  {\n    var icn_src, uid, i, len,\n      rows = this.message_list ? this.message_list.rows : [];\n\n    uids = String(uids).split(',');\n\n    for (i=0, len=uids.length; i<len; i++) {\n      uid = uids[i];\n      if (rows[uid])\n        this.set_message(uid, 'unread', false);\n    }\n  };\n\n  // Converts array of message UIDs to comma-separated list for use in URL\n  // with select_all mode checking\n  this.uids_to_list = function(uids)\n  {\n    return this.select_all_mode ? '*' : uids.join(',');\n  };\n\n  // Sets title of the delete button\n  this.set_button_titles = function()\n  {\n    var label = 'deletemessage';\n\n    if (!this.env.flag_for_deletion\n      && this.env.trash_mailbox && this.env.mailbox != this.env.trash_mailbox\n      && (!this.env.delete_junk || !this.env.junk_mailbox || this.env.mailbox != this.env.junk_mailbox)\n    )\n      label = 'movemessagetotrash';\n\n    this.set_alttext('delete', label);\n  };\n\n  /*********************************************************/\n  /*********       mailbox folders methods         *********/\n  /*********************************************************/\n\n  this.expunge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n      lock = this.set_busy(true, 'loading');\n      post_data._reload = 1;\n      if (this.env.search_request)\n        post_data._search = this.env.search_request;\n    }\n\n    // send request to server\n    this.http_post('expunge', post_data, lock);\n  };\n\n  this.purge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    if (!confirm(this.get_label('purgefolderconfirm')))\n      return false;\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n       lock = this.set_busy(true, 'loading');\n       post_data._reload = 1;\n     }\n\n    // send request to server\n    this.http_post('purge', post_data, lock);\n  };\n\n  // test if purge command is allowed\n  this.purge_mailbox_test = function()\n  {\n    return (this.env.messagecount && (this.env.mailbox == this.env.trash_mailbox || this.env.mailbox == this.env.junk_mailbox\n      || this.env.mailbox.match('^' + RegExp.escape(this.env.trash_mailbox) + RegExp.escape(this.env.delimiter))\n      || this.env.mailbox.match('^' + RegExp.escape(this.env.junk_mailbox) + RegExp.escape(this.env.delimiter))));\n  };\n\n\n  /*********************************************************/\n  /*********           login form methods          *********/\n  /*********************************************************/\n\n  // handler for keyboard events on the _user field\n  this.login_user_keyup = function(e)\n  {\n    var key = rcube_event.get_keycode(e);\n    var passwd = $('#rcmloginpwd');\n\n    // enter\n    if (key == 13 && passwd.length && !passwd.val()) {\n      passwd.focus();\n      return rcube_event.cancel(e);\n    }\n\n    return true;\n  };\n\n\n  /*********************************************************/\n  /*********        message compose methods        *********/\n  /*********************************************************/\n\n  // init message compose form: set focus and eventhandlers\n  this.init_messageform = function()\n  {\n    if (!this.gui_objects.messageform)\n      return false;\n\n    var input_from = $(\"[name='_from']\"),\n      input_to = $(\"[name='_to']\"),\n      input_subject = $(\"input[name='_subject']\"),\n      input_message = $(\"[name='_message']\").get(0),\n      html_mode = $(\"input[name='_is_html']\").val() == '1',\n      ac_fields = ['cc', 'bcc', 'replyto', 'followupto'],\n      ac_props;\n\n    // configure parallel autocompletion\n    if (this.env.autocomplete_threads > 0) {\n      ac_props = {\n        threads: this.env.autocomplete_threads,\n        sources: this.env.autocomplete_sources\n      };\n    }\n\n    // init live search events\n    this.init_address_input_events(input_to, ac_props);\n    for (var i in ac_fields) {\n      this.init_address_input_events($(\"[name='_\"+ac_fields[i]+\"']\"), ac_props);\n    }\n\n    if (!html_mode) {\n      this.set_caret_pos(input_message, this.env.top_posting ? 0 : $(input_message).val().length);\n      // add signature according to selected identity\n      // if we have HTML editor, signature is added in callback\n      if (input_from.prop('type') == 'select-one') {\n        this.change_identity(input_from[0]);\n      }\n    }\n\n    if (input_to.val() == '')\n      input_to.focus();\n    else if (input_subject.val() == '')\n      input_subject.focus();\n    else if (input_message)\n      input_message.focus();\n\n    this.env.compose_focus_elem = document.activeElement;\n\n    // get summary of all field values\n    this.compose_field_hash(true);\n\n    // start the auto-save timer\n    this.auto_save_start();\n  };\n\n  this.init_address_input_events = function(obj, props)\n  {\n    this.env.recipients_delimiter = this.env.recipients_separator + ' ';\n\n    obj[bw.ie || bw.safari || bw.chrome ? 'keydown' : 'keypress'](function(e) { return ref.ksearch_keydown(e, this, props); })\n      .attr('autocomplete', 'off');\n  };\n\n  this.submit_messageform = function(draft)\n  {\n    var form = this.gui_objects.messageform;\n\n    if (!form)\n      return;\n\n    // all checks passed, send message\n    var msgid = this.set_busy(true, draft ? 'savingmessage' : 'sendingmessage'),\n      lang = this.spellcheck_lang(),\n      files = [];\n\n    // send files list\n    $('li', this.gui_objects.attachmentlist).each(function() { files.push(this.id.replace(/^rcmfile/, '')); });\n    $('input[name=\"_attachments\"]', form).val(files.join());\n\n    form.target = 'savetarget';\n    form._draft.value = draft ? '1' : '';\n    form.action = this.add_url(form.action, '_unlock', msgid);\n    form.action = this.add_url(form.action, '_lang', lang);\n    form.submit();\n  };\n\n  this.compose_recipient_select = function(list)\n  {\n    this.enable_command('add-recipient', list.selection.length > 0);\n  };\n\n  this.compose_add_recipient = function(field)\n  {\n    var recipients = [], input = $('#_'+field);\n\n    if (this.contact_list && this.contact_list.selection.length) {\n      for (var id, n=0; n < this.contact_list.selection.length; n++) {\n        id = this.contact_list.selection[n];\n        if (id && this.env.contactdata[id]) {\n          recipients.push(this.env.contactdata[id]);\n\n          // group is added, expand it\n          if (id.charAt(0) == 'E' && this.env.contactdata[id].indexOf('@') < 0 && input.length) {\n            var gid = id.substr(1);\n            this.group2expand[gid] = { name:this.env.contactdata[id], input:input.get(0) };\n            this.http_request('group-expand', {_source: this.env.source, _gid: gid}, false);\n          }\n        }\n      }\n    }\n\n    if (recipients.length && input.length) {\n      var oldval = input.val();\n      input.val((oldval ? oldval + this.env.recipients_delimiter : '') + recipients.join(this.env.recipients_delimiter));\n      this.triggerEvent('add-recipient', { field:field, recipients:recipients });\n    }\n  };\n\n  // checks the input fields before sending a message\n  this.check_compose_input = function(cmd)\n  {\n    // check input fields\n    var ed, input_to = $(\"[name='_to']\"),\n      input_cc = $(\"[name='_cc']\"),\n      input_bcc = $(\"[name='_bcc']\"),\n      input_from = $(\"[name='_from']\"),\n      input_subject = $(\"[name='_subject']\"),\n      input_message = $(\"[name='_message']\");\n\n    // check sender (if have no identities)\n    if (input_from.prop('type') == 'text' && !rcube_check_email(input_from.val(), true)) {\n      alert(this.get_label('nosenderwarning'));\n      input_from.focus();\n      return false;\n    }\n\n    // check for empty recipient\n    var recipients = input_to.val() ? input_to.val() : (input_cc.val() ? input_cc.val() : input_bcc.val());\n    if (!rcube_check_email(recipients.replace(/^\\s+/, '').replace(/[\\s,;]+$/, ''), true)) {\n      alert(this.get_label('norecipientwarning'));\n      input_to.focus();\n      return false;\n    }\n\n    // check if all files has been uploaded\n    for (var key in this.env.attachments) {\n      if (typeof this.env.attachments[key] === 'object' && !this.env.attachments[key].complete) {\n        alert(this.get_label('notuploadedwarning'));\n        return false;\n      }\n    }\n\n    // display localized warning for missing subject\n    if (input_subject.val() == '') {\n      var myprompt = $('<div class=\"prompt\">').html('<div class=\"message\">' + this.get_label('nosubjectwarning') + '</div>').appendTo(document.body);\n      var prompt_value = $('<input>').attr('type', 'text').attr('size', 30).appendTo(myprompt).val(this.get_label('nosubject'));\n\n      var buttons = {};\n      buttons[this.get_label('cancel')] = function(){\n        input_subject.focus();\n        $(this).dialog('close');\n      };\n      buttons[this.get_label('sendmessage')] = function(){\n        input_subject.val(prompt_value.val());\n        $(this).dialog('close');\n        ref.command(cmd, { nocheck:true });  // repeat command which triggered this\n      };\n\n      myprompt.dialog({\n        modal: true,\n        resizable: false,\n        buttons: buttons,\n        close: function(event, ui) { $(this).remove() }\n      });\n      prompt_value.select();\n      return false;\n    }\n\n    // Apply spellcheck changes if spell checker is active\n    this.stop_spellchecking();\n\n    if (window.tinyMCE)\n      ed = tinyMCE.get(this.env.composebody);\n\n    // check for empty body\n    if (!ed && input_message.val() == '' && !confirm(this.get_label('nobodywarning'))) {\n      input_message.focus();\n      return false;\n    }\n    else if (ed) {\n      if (!ed.getContent() && !confirm(this.get_label('nobodywarning'))) {\n        ed.focus();\n        return false;\n      }\n      // move body from html editor to textarea (just to be sure, #1485860)\n      tinyMCE.triggerSave();\n    }\n\n    return true;\n  };\n\n  this.toggle_editor = function(props)\n  {\n    this.stop_spellchecking();\n\n    if (props.mode == 'html') {\n      this.plain2html($('#'+props.id).val(), props.id);\n      tinyMCE.execCommand('mceAddControl', false, props.id);\n\n      if (this.env.default_font)\n        setTimeout(function() {\n          $(tinyMCE.get(props.id).getBody()).css('font-family', rcmail.env.default_font);\n        }, 500);\n    }\n    else {\n      var thisMCE = tinyMCE.get(props.id), existingHtml;\n\n      if (existingHtml = thisMCE.getContent()) {\n        if (!confirm(this.get_label('editorwarning'))) {\n          return false;\n        }\n        this.html2plain(existingHtml, props.id);\n      }\n      tinyMCE.execCommand('mceRemoveControl', false, props.id);\n    }\n\n    return true;\n  };\n\n  this.stop_spellchecking = function()\n  {\n    var ed;\n\n    if (window.tinyMCE && (ed = tinyMCE.get(this.env.composebody))) {\n      if (ed.plugins && ed.plugins.spellchecker && ed.plugins.spellchecker.active)\n        ed.execCommand('mceSpellCheck');\n    }\n    else if (ed = this.env.spellcheck) {\n      if (ed.state && ed.state != 'ready' && ed.state != 'no_error_found')\n        $(ed.spell_span).trigger('click');\n    }\n\n    this.spellcheck_state();\n  };\n\n  this.spellcheck_state = function()\n  {\n    var ed, active;\n\n    if (window.tinyMCE && (ed = tinyMCE.get(this.env.composebody)) && ed.plugins && ed.plugins.spellchecker)\n      active = ed.plugins.spellchecker.active;\n    else if ((ed = this.env.spellcheck) && ed.state)\n      active = ed.state != 'ready' && ed.state != 'no_error_found';\n\n    if (rcmail.buttons.spellcheck)\n      $('#'+rcmail.buttons.spellcheck[0].id)[active ? 'addClass' : 'removeClass']('selected');\n\n    return active;\n  };\n\n  // get selected language\n  this.spellcheck_lang = function()\n  {\n    var ed;\n\n    if (window.tinyMCE && (ed = tinyMCE.get(this.env.composebody)) && ed.plugins && ed.plugins.spellchecker)\n      return ed.plugins.spellchecker.selectedLang;\n    else if (this.env.spellcheck)\n      return GOOGIE_CUR_LANG;\n  };\n\n  this.spellcheck_lang_set = function(lang)\n  {\n    var ed;\n\n    if (window.tinyMCE && (ed = tinyMCE.get(this.env.composebody)) && ed.plugins)\n      ed.plugins.spellchecker.selectedLang = lang;\n    else if (this.env.spellcheck)\n      this.env.spellcheck.setCurrentLanguage(lang);\n  };\n\n  // resume spellchecking, highlight provided mispellings without new ajax request\n  this.spellcheck_resume = function(ishtml, data)\n  {\n    if (ishtml) {\n      var ed = tinyMCE.get(this.env.composebody);\n        sp = ed.plugins.spellchecker;\n\n      sp.active = 1;\n      sp._markWords(data);\n      ed.nodeChanged();\n    }\n    else {\n      var sp = this.env.spellcheck;\n      sp.prepare(false, true);\n      sp.processData(data);\n    }\n\n    this.spellcheck_state();\n  }\n\n  this.set_draft_id = function(id)\n  {\n    $(\"input[name='_draft_saveid']\").val(id);\n  };\n\n  this.auto_save_start = function()\n  {\n    if (this.env.draft_autosave)\n      this.save_timer = setTimeout(function(){ ref.command(\"savedraft\"); }, this.env.draft_autosave * 1000);\n\n    // Unlock interface now that saving is complete\n    this.busy = false;\n  };\n\n  this.compose_field_hash = function(save)\n  {\n    // check input fields\n    var ed, i, val, str = '', hash_fields = ['to', 'cc', 'bcc', 'subject'];\n\n    for (i=0; i<hash_fields.length; i++)\n      if (val = $('[name=\"_' + hash_fields[i] + '\"]').val())\n        str += val + ':';\n\n    if (window.tinyMCE && (ed = tinyMCE.get(this.env.composebody)))\n      str += ed.getContent();\n    else\n      str += $(\"[name='_message']\").val();\n\n    if (this.env.attachments)\n      for (var upload_id in this.env.attachments)\n        str += upload_id;\n\n    if (save)\n      this.cmp_hash = str;\n\n    return str;\n  };\n\n  this.change_identity = function(obj, show_sig)\n  {\n    if (!obj || !obj.options)\n      return false;\n\n    if (!show_sig)\n      show_sig = this.env.show_sig;\n\n    var cursor_pos, p = -1,\n      id = obj.options[obj.selectedIndex].value,\n      input_message = $(\"[name='_message']\"),\n      message = input_message.val(),\n      is_html = ($(\"input[name='_is_html']\").val() == '1'),\n      sig = this.env.identity;\n\n    // enable manual signature insert\n    if (this.env.signatures && this.env.signatures[id]) {\n      this.enable_command('insert-sig', true);\n      this.env.compose_commands.push('insert-sig');\n    }\n    else\n      this.enable_command('insert-sig', false);\n\n    if (!is_html) {\n      // remove the 'old' signature\n      if (show_sig && sig && this.env.signatures && this.env.signatures[sig]) {\n        sig = this.env.signatures[sig].text;\n        sig = sig.replace(/\\r\\n/g, '\\n');\n\n        p = this.env.sig_above ? message.indexOf(sig) : message.lastIndexOf(sig);\n        if (p >= 0)\n          message = message.substring(0, p) + message.substring(p+sig.length, message.length);\n      }\n      // add the new signature string\n      if (show_sig && this.env.signatures && this.env.signatures[id]) {\n        sig = this.env.signatures[id].text;\n        sig = sig.replace(/\\r\\n/g, '\\n');\n\n        if (this.env.sig_above) {\n          if (p >= 0) { // in place of removed signature\n            message = message.substring(0, p) + sig + message.substring(p, message.length);\n            cursor_pos = p - 1;\n          }\n          else if (pos = this.get_caret_pos(input_message.get(0))) { // at cursor position\n            message = message.substring(0, pos) + '\\n' + sig + '\\n\\n' + message.substring(pos, message.length);\n            cursor_pos = pos;\n          }\n          else { // on top\n            cursor_pos = 0;\n            message = '\\n\\n' + sig + '\\n\\n' + message.replace(/^[\\r\\n]+/, '');\n          }\n        }\n        else {\n          message = message.replace(/[\\r\\n]+$/, '');\n          cursor_pos = !this.env.top_posting && message.length ? message.length+1 : 0;\n          message += '\\n\\n' + sig;\n        }\n      }\n      else\n        cursor_pos = this.env.top_posting ? 0 : message.length;\n\n      input_message.val(message);\n\n      // move cursor before the signature\n      this.set_caret_pos(input_message.get(0), cursor_pos);\n    }\n    else if (show_sig && this.env.signatures) {  // html\n      var editor = tinyMCE.get(this.env.composebody),\n        sigElem = editor.dom.get('_rc_sig');\n\n      // Append the signature as a div within the body\n      if (!sigElem) {\n        var body = editor.getBody(),\n          doc = editor.getDoc();\n\n        sigElem = doc.createElement('div');\n        sigElem.setAttribute('id', '_rc_sig');\n\n        if (this.env.sig_above) {\n          // if no existing sig and top posting then insert at caret pos\n          editor.getWin().focus(); // correct focus in IE & Chrome\n\n          var node = editor.selection.getNode();\n          if (node.nodeName == 'BODY') {\n            // no real focus, insert at start\n            body.insertBefore(sigElem, body.firstChild);\n            body.insertBefore(doc.createElement('br'), body.firstChild);\n          }\n          else {\n            body.insertBefore(sigElem, node.nextSibling);\n            body.insertBefore(doc.createElement('br'), node.nextSibling);\n          }\n        }\n        else {\n          if (bw.ie)  // add empty line before signature on IE\n            body.appendChild(doc.createElement('br'));\n\n          body.appendChild(sigElem);\n        }\n      }\n\n      if (this.env.signatures[id])\n        sigElem.innerHTML = this.env.signatures[id].html;\n    }\n\n    this.env.identity = id;\n    return true;\n  };\n\n  // upload attachment file\n  this.upload_file = function(form)\n  {\n    if (!form)\n      return false;\n\n    // get file input field, count files on capable browser\n    var i, size = 0, field = $('input[type=file]', form).get(0),\n      files = field.files ? field.files.length : field.value ? 1 : 0;\n\n    // create hidden iframe and post upload form\n    if (files) {\n      // check file size\n      if (field.files && this.env.max_filesize && this.env.filesizeerror) {\n        for (i=0; i<files; i++)\n          size += field.files[i].size;\n        if (size && size > this.env.max_filesize) {\n          this.display_message(this.env.filesizeerror, 'error');\n          return;\n        }\n      }\n\n      var frame_name = this.async_upload_form(form, 'upload', function(e) {\n        var d, content = '';\n        try {\n          if (this.contentDocument) {\n            d = this.contentDocument;\n          } else if (this.contentWindow) {\n            d = this.contentWindow.document;\n          }\n          content = d.childNodes[0].innerHTML;\n        } catch (err) {}\n\n        if (!content.match(/add2attachment/) && (!bw.opera || (rcmail.env.uploadframe && rcmail.env.uploadframe == e.data.ts))) {\n          if (!content.match(/display_message/))\n            rcmail.display_message(rcmail.get_label('fileuploaderror'), 'error');\n          rcmail.remove_from_attachment_list(e.data.ts);\n        }\n        // Opera hack: handle double onload\n        if (bw.opera)\n          rcmail.env.uploadframe = e.data.ts;\n      });\n\n      // display upload indicator and cancel button\n      var content = '<span>' + this.get_label('uploading' + (files > 1 ? 'many' : '')) + '</span>',\n        ts = frame_name.replace(/^rcmupload/, '');\n\n      this.add2attachment_list(ts, { name:'', html:content, classname:'uploading', frame:frame_name, complete:false });\n\n      // upload progress support\n      if (this.env.upload_progress_time) {\n        this.upload_progress_start('upload', ts);\n      }\n    }\n\n    // set reference to the form object\n    this.gui_objects.attachmentform = form;\n    return true;\n  };\n\n  // add file name to attachment list\n  // called from upload page\n  this.add2attachment_list = function(name, att, upload_id)\n  {\n    if (!this.gui_objects.attachmentlist)\n      return false;\n\n    if (!att.complete && ref.env.loadingicon)\n      att.html = '<img src=\"'+ref.env.loadingicon+'\" alt=\"\" class=\"uploading\" />' + att.html;\n\n    if (!att.complete && att.frame)\n      att.html = '<a title=\"'+this.get_label('cancel')+'\" onclick=\"return rcmail.cancel_attachment_upload(\\''+name+'\\', \\''+att.frame+'\\');\" href=\"#cancelupload\" class=\"cancelupload\">'\n        + (this.env.cancelicon ? '<img src=\"'+this.env.cancelicon+'\" alt=\"\" />' : this.get_label('cancel')) + '</a>' + att.html;\n\n    var indicator, li = $('<li>').attr('id', name).addClass(att.classname).html(att.html);\n\n    // replace indicator's li\n    if (upload_id && (indicator = document.getElementById(upload_id))) {\n      li.replaceAll(indicator);\n    }\n    else { // add new li\n      li.appendTo(this.gui_objects.attachmentlist);\n    }\n\n    if (upload_id && this.env.attachments[upload_id])\n      delete this.env.attachments[upload_id];\n\n    this.env.attachments[name] = att;\n\n    return true;\n  };\n\n  this.remove_from_attachment_list = function(name)\n  {\n    delete this.env.attachments[name];\n    $('#'+name).remove();\n  };\n\n  this.remove_attachment = function(name)\n  {\n    if (name && this.env.attachments[name])\n      this.http_post('remove-attachment', { _id:this.env.compose_id, _file:name });\n\n    return true;\n  };\n\n  this.cancel_attachment_upload = function(name, frame_name)\n  {\n    if (!name || !frame_name)\n      return false;\n\n    this.remove_from_attachment_list(name);\n    $(\"iframe[name='\"+frame_name+\"']\").remove();\n    return false;\n  };\n\n  this.upload_progress_start = function(action, name)\n  {\n    setTimeout(function() { rcmail.http_request(action, {_progress: name}); },\n      this.env.upload_progress_time * 1000);\n  };\n\n  this.upload_progress_update = function(param)\n  {\n    var elem = $('#'+param.name + '> span');\n\n    if (!elem.length || !param.text)\n      return;\n\n    elem.text(param.text);\n\n    if (!param.done)\n      this.upload_progress_start(param.action, param.name);\n  };\n\n  // send remote request to add a new contact\n  this.add_contact = function(value)\n  {\n    if (value)\n      this.http_post('addcontact', {_address: value});\n\n    return true;\n  };\n\n  // send remote request to search mail or contacts\n  this.qsearch = function(value)\n  {\n    if (value != '') {\n      var r, lock = this.set_busy(true, 'searching'),\n        url = this.search_params(value);\n\n      if (this.message_list)\n        this.clear_message_list();\n      else if (this.contact_list)\n        this.list_contacts_clear();\n\n      if (this.env.source)\n        url._source = this.env.source;\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      // reset vars\n      this.env.current_page = 1;\n\n      r = this.http_request('search', url, lock);\n\n      this.env.qsearch = {lock: lock, request: r};\n    }\n  };\n\n  // build URL params for search\n  this.search_params = function(search, filter)\n  {\n    var n, url = {}, mods_arr = [],\n      mods = this.env.search_mods,\n      mbox = this.env.mailbox;\n\n    if (!filter && this.gui_objects.search_filter)\n      filter = this.gui_objects.search_filter.value;\n\n    if (!search && this.gui_objects.qsearchbox)\n      search = this.gui_objects.qsearchbox.value;\n\n    if (filter)\n      url._filter = filter;\n\n    if (search) {\n      url._q = search;\n\n      if (mods && this.message_list)\n        mods = mods[mbox] ? mods[mbox] : mods['*'];\n\n      if (mods) {\n        for (n in mods)\n          mods_arr.push(n);\n        url._headers = mods_arr.join(',');\n      }\n    }\n\n    if (mbox)\n      url._mbox = mbox;\n\n    return url;\n  };\n\n  // reset quick-search form\n  this.reset_qsearch = function()\n  {\n    if (this.gui_objects.qsearchbox)\n      this.gui_objects.qsearchbox.value = '';\n\n    if (this.env.qsearch)\n      this.abort_request(this.env.qsearch);\n\n    this.env.qsearch = null;\n    this.env.search_request = null;\n    this.env.search_id = null;\n  };\n\n  this.sent_successfully = function(type, msg)\n  {\n    this.display_message(msg, type);\n    // before redirect we need to wait some time for Chrome (#1486177)\n    setTimeout(function(){ ref.list_mailbox(); }, 500);\n  };\n\n\n  /*********************************************************/\n  /*********     keyboard live-search methods      *********/\n  /*********************************************************/\n\n  // handler for keyboard events on address-fields\n  this.ksearch_keydown = function(e, obj, props)\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    var highlight,\n      key = rcube_event.get_keycode(e),\n      mod = rcube_event.get_modifier(e);\n\n    switch (key) {\n      case 38:  // arrow up\n      case 40:  // arrow down\n        if (!this.ksearch_visible())\n          break;\n\n        var dir = key==38 ? 1 : 0;\n\n        highlight = document.getElementById('rcmksearchSelected');\n        if (!highlight)\n          highlight = this.ksearch_pane.__ul.firstChild;\n\n        if (highlight)\n          this.ksearch_select(dir ? highlight.previousSibling : highlight.nextSibling);\n\n        return rcube_event.cancel(e);\n\n      case 9:   // tab\n        if (mod == SHIFT_KEY || !this.ksearch_visible()) {\n          this.ksearch_hide();\n          return;\n        }\n\n      case 13:  // enter\n        if (!this.ksearch_visible())\n          return false;\n\n        // insert selected address and hide ksearch pane\n        this.insert_recipient(this.ksearch_selected);\n        this.ksearch_hide();\n\n        return rcube_event.cancel(e);\n\n      case 27:  // escape\n        this.ksearch_hide();\n        return;\n\n      case 37:  // left\n      case 39:  // right\n        if (mod != SHIFT_KEY)\n          return;\n    }\n\n    // start timer\n    this.ksearch_timer = setTimeout(function(){ ref.ksearch_get_results(props); }, 200);\n    this.ksearch_input = obj;\n\n    return true;\n  };\n\n  this.ksearch_visible = function()\n  {\n    return (this.ksearch_selected !== null && this.ksearch_selected !== undefined && this.ksearch_value);\n  };\n\n  this.ksearch_select = function(node)\n  {\n    var current = $('#rcmksearchSelected');\n    if (current[0] && node) {\n      current.removeAttr('id').removeClass('selected');\n    }\n\n    if (node) {\n      $(node).attr('id', 'rcmksearchSelected').addClass('selected');\n      this.ksearch_selected = node._rcm_id;\n    }\n  };\n\n  this.insert_recipient = function(id)\n  {\n    if (id === null || !this.env.contacts[id] || !this.ksearch_input)\n      return;\n\n    // get cursor pos\n    var inp_value = this.ksearch_input.value,\n      cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.ksearch_value, cpos),\n      trigger = false,\n      insert = '',\n      // replace search string with full address\n      pre = inp_value.substring(0, p),\n      end = inp_value.substring(p+this.ksearch_value.length, inp_value.length);\n\n    this.ksearch_destroy();\n\n    // insert all members of a group\n    if (typeof this.env.contacts[id] === 'object' && this.env.contacts[id].id) {\n      insert += this.env.contacts[id].name + this.env.recipients_delimiter;\n      this.group2expand[this.env.contacts[id].id] = $.extend({ input: this.ksearch_input }, this.env.contacts[id]);\n      this.http_request('mail/group-expand', {_source: this.env.contacts[id].source, _gid: this.env.contacts[id].id}, false);\n    }\n    else if (typeof this.env.contacts[id] === 'string') {\n      insert = this.env.contacts[id] + this.env.recipients_delimiter;\n      trigger = true;\n    }\n\n    this.ksearch_input.value = pre + insert + end;\n\n    // set caret to insert pos\n    cpos = p+insert.length;\n    if (this.ksearch_input.setSelectionRange)\n      this.ksearch_input.setSelectionRange(cpos, cpos);\n\n    if (trigger)\n      this.triggerEvent('autocomplete_insert', { field:this.ksearch_input, insert:insert });\n  };\n\n  this.replace_group_recipients = function(id, recipients)\n  {\n    if (this.group2expand[id]) {\n      this.group2expand[id].input.value = this.group2expand[id].input.value.replace(this.group2expand[id].name, recipients);\n      this.triggerEvent('autocomplete_insert', { field:this.group2expand[id].input, insert:recipients });\n      this.group2expand[id] = null;\n    }\n  };\n\n  // address search processor\n  this.ksearch_get_results = function(props)\n  {\n    var inp_value = this.ksearch_input ? this.ksearch_input.value : null;\n\n    if (inp_value === null)\n      return;\n\n    if (this.ksearch_pane && this.ksearch_pane.is(\":visible\"))\n      this.ksearch_pane.hide();\n\n    // get string from current cursor pos to last comma\n    var cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.env.recipients_separator, cpos-1),\n      q = inp_value.substring(p+1, cpos),\n      min = this.env.autocomplete_min_length,\n      ac = this.ksearch_data;\n\n    // trim query string\n    q = $.trim(q);\n\n    // Don't (re-)search if the last results are still active\n    if (q == this.ksearch_value)\n      return;\n\n    this.ksearch_destroy();\n\n    if (q.length && q.length < min) {\n      if (!this.ksearch_info) {\n        this.ksearch_info = this.display_message(\n          this.get_label('autocompletechars').replace('$min', min));\n      }\n      return;\n    }\n\n    var old_value = this.ksearch_value;\n    this.ksearch_value = q;\n\n    // ...string is empty\n    if (!q.length)\n      return;\n\n    // ...new search value contains old one and previous search was not finished or its result was empty\n    if (old_value && old_value.length && q.indexOf(old_value) == 0 && (!ac || ac.num <= 0) && this.env.contacts && !this.env.contacts.length)\n      return;\n\n    var i, lock, source, xhr, reqid = new Date().getTime(),\n      post_data = {_search: q, _id: reqid},\n      threads = props && props.threads ? props.threads : 1,\n      sources = props && props.sources ? props.sources : [],\n      action = props && props.action ? props.action : 'mail/autocomplete';\n\n    this.ksearch_data = {id: reqid, sources: sources.slice(), action: action,\n      locks: [], requests: [], num: sources.length};\n\n    for (i=0; i<threads; i++) {\n      source = this.ksearch_data.sources.shift();\n      if (threads > 1 && source === undefined)\n        break;\n\n      post_data._source = source ? source : '';\n      lock = this.display_message(this.get_label('searching'), 'loading');\n      xhr = this.http_post(action, post_data, lock);\n\n      this.ksearch_data.locks.push(lock);\n      this.ksearch_data.requests.push(xhr);\n    }\n  };\n\n  this.ksearch_query_results = function(results, search, reqid)\n  {\n    // search stopped in meantime?\n    if (!this.ksearch_value)\n      return;\n\n    // ignore this outdated search response\n    if (this.ksearch_input && search != this.ksearch_value)\n      return;\n\n    // display search results\n    var i, len, ul, li, text, init,\n      value = this.ksearch_value,\n      data = this.ksearch_data,\n      maxlen = this.env.autocomplete_max ? this.env.autocomplete_max : 15;\n\n    // create results pane if not present\n    if (!this.ksearch_pane) {\n      ul = $('<ul>');\n      this.ksearch_pane = $('<div>').attr('id', 'rcmKSearchpane')\n        .css({ position:'absolute', 'z-index':30000 }).append(ul).appendTo(document.body);\n      this.ksearch_pane.__ul = ul[0];\n    }\n\n    ul = this.ksearch_pane.__ul;\n\n    // remove all search results or add to existing list if parallel search\n    if (reqid && this.ksearch_pane.data('reqid') == reqid) {\n      maxlen -= ul.childNodes.length;\n    }\n    else {\n      this.ksearch_pane.data('reqid', reqid);\n      init = 1;\n      // reset content\n      ul.innerHTML = '';\n      this.env.contacts = [];\n      // move the results pane right under the input box\n      var pos = $(this.ksearch_input).offset();\n      this.ksearch_pane.css({ left:pos.left+'px', top:(pos.top + this.ksearch_input.offsetHeight)+'px', display: 'none'});\n    }\n\n    // add each result line to list\n    if (results && (len = results.length)) {\n      for (i=0; i < len && maxlen > 0; i++) {\n        text = typeof results[i] === 'object' ? results[i].name : results[i];\n        li = document.createElement('LI');\n        li.innerHTML = text.replace(new RegExp('('+RegExp.escape(value)+')', 'ig'), '##$1%%').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/##([^%]+)%%/g, '<b>$1</b>');\n        li.onmouseover = function(){ ref.ksearch_select(this); };\n        li.onmouseup = function(){ ref.ksearch_click(this) };\n        li._rcm_id = this.env.contacts.length + i;\n        ul.appendChild(li);\n        maxlen -= 1;\n      }\n    }\n\n    if (ul.childNodes.length) {\n      this.ksearch_pane.show();\n      // select the first\n      if (!this.env.contacts.length) {\n        $('li:first', ul).attr('id', 'rcmksearchSelected').addClass('selected');\n        this.ksearch_selected = 0;\n      }\n    }\n\n    if (len)\n      this.env.contacts = this.env.contacts.concat(results);\n\n    // run next parallel search\n    if (data.id == reqid) {\n      data.num--;\n      if (maxlen > 0 && data.sources.length) {\n        var lock, xhr, source = data.sources.shift(), post_data;\n        if (source) {\n          post_data = {_search: value, _id: reqid, _source: source};\n          lock = this.display_message(this.get_label('searching'), 'loading');\n          xhr = this.http_post(data.action, post_data, lock);\n\n          this.ksearch_data.locks.push(lock);\n          this.ksearch_data.requests.push(xhr);\n        }\n      }\n      else if (!maxlen) {\n        if (!this.ksearch_msg)\n          this.ksearch_msg = this.display_message(this.get_label('autocompletemore'));\n        // abort pending searches\n        this.ksearch_abort();\n      }\n    }\n  };\n\n  this.ksearch_click = function(node)\n  {\n    if (this.ksearch_input)\n      this.ksearch_input.focus();\n\n    this.insert_recipient(node._rcm_id);\n    this.ksearch_hide();\n  };\n\n  this.ksearch_blur = function()\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    this.ksearch_input = null;\n    this.ksearch_hide();\n  };\n\n  this.ksearch_hide = function()\n  {\n    this.ksearch_selected = null;\n    this.ksearch_value = '';\n\n    if (this.ksearch_pane)\n      this.ksearch_pane.hide();\n\n    this.ksearch_destroy();\n  };\n\n  // Clears autocomplete data/requests\n  this.ksearch_destroy = function()\n  {\n    this.ksearch_abort();\n\n    if (this.ksearch_info)\n      this.hide_message(this.ksearch_info);\n\n    if (this.ksearch_msg)\n      this.hide_message(this.ksearch_msg);\n\n    this.ksearch_data = null;\n    this.ksearch_info = null;\n    this.ksearch_msg = null;\n  }\n\n  // Aborts pending autocomplete requests\n  this.ksearch_abort = function()\n  {\n    var i, len, ac = this.ksearch_data;\n\n    if (!ac)\n      return;\n\n    for (i=0, len=ac.locks.length; i<len; i++)\n      this.abort_request({request: ac.requests[i], lock: ac.locks[i]});\n  };\n\n\n  /*********************************************************/\n  /*********         address book methods          *********/\n  /*********************************************************/\n\n  this.contactlist_keypress = function(list)\n  {\n    if (list.key_pressed == list.DELETE_KEY)\n      this.command('delete');\n  };\n\n  this.contactlist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n\n    var n, id, sid, ref = this, writable = false,\n      source = this.env.source ? this.env.address_sources[this.env.source] : null;\n\n    if (id = list.get_single_selection())\n      this.preview_timer = setTimeout(function(){ ref.load_contact(id, 'show'); }, 200);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n\n    // no source = search result, we'll need to detect if any of\n    // selected contacts are in writable addressbook to enable edit/delete\n    if (list.selection.length) {\n      if (!source) {\n        for (n in list.selection) {\n          sid = String(list.selection[n]).replace(/^[^-]+-/, '');\n          if (sid && this.env.address_sources[sid] && !this.env.address_sources[sid].readonly) {\n            writable = true;\n            break;\n          }\n        }\n      }\n      else {\n        writable = !source.readonly;\n      }\n    }\n\n    // if a group is currently selected, and there is at least one contact selected\n    // thend we can enable the group-remove-selected command\n    this.enable_command('group-remove-selected', this.env.group && list.selection.length > 0);\n    this.enable_command('compose', this.env.group || list.selection.length > 0);\n    this.enable_command('edit', id && writable);\n    this.enable_command('delete', list.selection.length && writable);\n\n    return false;\n  };\n\n  this.list_contacts = function(src, group, page)\n  {\n    var folder, url = {},\n      target = window;\n\n    if (!src)\n      src = this.env.source;\n\n    if (page && this.current_page == page && src == this.env.source && group == this.env.group)\n      return false;\n\n    if (src != this.env.source) {\n      page = this.env.current_page = 1;\n      this.reset_qsearch();\n    }\n    else if (group != this.env.group)\n      page = this.env.current_page = 1;\n\n    if (this.env.search_id)\n      folder = 'S'+this.env.search_id;\n    else\n      folder = group ? 'G'+src+group : src;\n\n    this.select_folder(folder);\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // load contacts remotely\n    if (this.gui_objects.contactslist) {\n      this.list_contacts_remote(src, group, page);\n      return;\n    }\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      target = window.frames[this.env.contentframe];\n      url._framed = 1;\n    }\n\n    if (group)\n      url._gid = group;\n    if (page)\n      url._page = page;\n    if (src)\n      url._source = src;\n\n    // also send search request to get the correct listing\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.set_busy(true, 'loading');\n    this.location_href(url, target);\n  };\n\n  // send remote request to load contacts list\n  this.list_contacts_remote = function(src, group, page)\n  {\n    // clear message list first\n    this.list_contacts_clear();\n\n    // send request to server\n    var url = {}, lock = this.set_busy(true, 'loading');\n\n    if (src)\n      url._source = src;\n    if (page)\n      url._page = page;\n    if (group)\n      url._gid = group;\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.http_request(this.env.task == 'mail' ? 'list-contacts' : 'list', url, lock);\n  };\n\n  this.list_contacts_clear = function()\n  {\n    this.contact_list.clear(true);\n    this.show_contentframe(false);\n    this.enable_command('delete', false);\n    this.enable_command('compose', this.env.group ? true : false);\n  };\n\n  // load contact record\n  this.load_contact = function(cid, action, framed)\n  {\n    var url = {}, target = window;\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      url._framed = 1;\n      target = window.frames[this.env.contentframe];\n      this.show_contentframe(true);\n\n      // load dummy content\n      if (!cid) {\n        // unselect selected row(s)\n        this.contact_list.clear_selection();\n        this.enable_command('delete', 'compose', false);\n      }\n    }\n    else if (framed)\n      return false;\n\n    if (action && (cid || action=='add') && !this.drag_active) {\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      url._action = action;\n      url._source = this.env.source;\n      url._cid = cid;\n\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  // add/delete member to/from the group\n  this.group_member_change = function(what, cid, source, gid)\n  {\n    what = what == 'add' ? 'add' : 'del';\n    var label = this.get_label(what == 'add' ? 'addingmember' : 'removingmember'),\n      lock = this.display_message(label, 'loading'),\n      post_data = {_cid: cid, _source: source, _gid: gid};\n\n    this.http_post('group-'+what+'members', post_data, lock);\n  };\n\n  // copy a contact to the specified target (group or directory)\n  this.copy_contact = function(cid, to)\n  {\n    if (!cid)\n      cid = this.contact_list.get_selection().join(',');\n\n    if (to.type == 'group' && to.source == this.env.source)\n      this.group_member_change('add', cid, to.source, to.id);\n    else if (to.type == 'group' && !this.env.address_sources[to.source].readonly) {\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: to.source, _togid: to.id,\n          _gid: (this.env.group ? this.env.group : '')};\n\n      this.http_post('copy', post_data, lock);\n    }\n    else if (to.id != this.env.source && cid && this.env.address_sources[to.id] && !this.env.address_sources[to.id].readonly) {\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: to.id,\n          _gid: (this.env.group ? this.env.group : '')};\n\n      this.http_post('copy', post_data, lock);\n    }\n  };\n\n  this.delete_contacts = function()\n  {\n    var selection = this.contact_list.get_selection(),\n      undelete = this.env.source && this.env.address_sources[this.env.source].undelete;\n\n    // exit if no mailbox specified or if selection is empty\n    if (!(selection.length || this.env.cid) || (!undelete && !confirm(this.get_label('deletecontactconfirm'))))\n      return;\n\n    var id, n, a_cids = [],\n      post_data = {_source: this.env.source, _from: (this.env.action ? this.env.action : '')},\n      lock = this.display_message(this.get_label('contactdeleting'), 'loading');\n\n    if (this.env.cid)\n      a_cids.push(this.env.cid);\n    else {\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        a_cids.push(id);\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n\n      // hide content frame if we delete the currently displayed contact\n      if (selection.length == 1)\n        this.show_contentframe(false);\n    }\n\n    post_data._cid = a_cids.join(',');\n\n    if (this.env.group)\n      post_data._gid = this.env.group;\n\n    // also send search request to get the right records from the next page\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    // send request to server\n    this.http_post('delete', post_data, lock)\n\n    return true;\n  };\n\n  // update a contact record in the list\n  this.update_contact_row = function(cid, cols_arr, newcid, source)\n  {\n    var c, row, list = this.contact_list;\n\n    cid = this.html_identifier(cid);\n\n    // when in searching mode, concat cid with the source name\n    if (!list.rows[cid]) {\n      cid = cid+'-'+source;\n      if (newcid)\n        newcid = newcid+'-'+source;\n    }\n\n    if (list.rows[cid] && (row = list.rows[cid].obj)) {\n      for (c=0; c<cols_arr.length; c++)\n        if (row.cells[c])\n          $(row.cells[c]).html(cols_arr[c]);\n\n      // cid change\n      if (newcid) {\n        newcid = this.html_identifier(newcid);\n        row.id = 'rcmrow' + newcid;\n        list.remove_row(cid);\n        list.init_row(row);\n        list.selection[0] = newcid;\n        row.style.display = '';\n      }\n    }\n  };\n\n  // add row to contacts list\n  this.add_contact_row = function(cid, cols, classes)\n  {\n    if (!this.gui_objects.contactslist)\n      return false;\n\n    var c, col, list = this.contact_list,\n      row = document.createElement('tr');\n\n    row.id = 'rcmrow'+this.html_identifier(cid);\n    row.className = 'contact ' + (classes || '');\n\n    if (list.in_selection(cid))\n      row.className += ' selected';\n\n    // add each submitted col\n    for (c in cols) {\n      col = document.createElement('td');\n      col.className = String(c).toLowerCase();\n      col.innerHTML = cols[c];\n      row.appendChild(col);\n    }\n\n    list.insert_row(row);\n\n    this.enable_command('export', list.rowcount > 0);\n  };\n\n  this.init_contact_form = function()\n  {\n    var ref = this, col;\n\n    this.set_photo_actions($('#ff_photo').val());\n\n    for (col in this.env.coltypes)\n      this.init_edit_field(col, null);\n\n    $('.contactfieldgroup .row a.deletebutton').click(function() {\n      ref.delete_edit_field(this);\n      return false;\n    });\n\n    $('select.addfieldmenu').change(function(e) {\n      ref.insert_edit_field($(this).val(), $(this).attr('rel'), this);\n      this.selectedIndex = 0;\n    });\n\n    // enable date pickers on date fields\n    if ($.datepicker && this.env.date_format) {\n      $.datepicker.setDefaults({\n        dateFormat: this.env.date_format,\n        changeMonth: true,\n        changeYear: true,\n        yearRange: '-100:+10',\n        showOtherMonths: true,\n        selectOtherMonths: true,\n        onSelect: function(dateText) { $(this).focus().val(dateText) }\n      });\n      $('input.datepicker').datepicker();\n    }\n\n    $(\"input[type='text']:visible\").first().focus();\n  };\n\n  this.group_create = function()\n  {\n    this.add_input_row('contactgroup');\n  };\n\n  this.group_rename = function()\n  {\n    if (!this.env.group || !this.gui_objects.folderlist)\n      return;\n\n    if (!this.name_input) {\n      this.enable_command('list', 'listgroup', false);\n      this.name_input = $('<input>').attr('type', 'text').val(this.env.contactgroups['G'+this.env.source+this.env.group].name);\n      this.name_input.bind('keydown', function(e){ return rcmail.add_input_keydown(e); });\n      this.env.group_renaming = true;\n\n      var link, li = this.get_folder_li(this.env.source+this.env.group, 'rcmliG');\n      if (li && (link = li.firstChild)) {\n        $(link).hide().before(this.name_input);\n      }\n    }\n\n    this.name_input.select().focus();\n  };\n\n  this.group_delete = function()\n  {\n    if (this.env.group && confirm(this.get_label('deletegroupconfirm'))) {\n      var lock = this.set_busy(true, 'groupdeleting');\n      this.http_post('group-delete', {_source: this.env.source, _gid: this.env.group}, lock);\n    }\n  };\n\n  // callback from server upon group-delete command\n  this.remove_group_item = function(prop)\n  {\n    var li, key = 'G'+prop.source+prop.id;\n    if ((li = this.get_folder_li(key))) {\n      this.triggerEvent('group_delete', { source:prop.source, id:prop.id, li:li });\n\n      li.parentNode.removeChild(li);\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n    }\n\n    this.list_contacts(prop.source, 0);\n  };\n\n  // @TODO: maybe it would be better to use popup instead of inserting input to the list?\n  this.add_input_row = function(type)\n  {\n    if (!this.gui_objects.folderlist)\n      return;\n\n    if (!this.name_input) {\n      this.name_input = $('<input>').attr('type', 'text').data('tt', type);\n      this.name_input.bind('keydown', function(e){ return rcmail.add_input_keydown(e); });\n      this.name_input_li = $('<li>').addClass(type).append(this.name_input);\n\n      var li = type == 'contactsearch' ? $('li:last', this.gui_objects.folderlist) : this.get_folder_li(this.env.source);\n      this.name_input_li.insertAfter(li);\n    }\n\n    this.name_input.select().focus();\n  };\n\n  //remove selected contacts from current active group\n  this.group_remove_selected = function()\n  {\n    ref.http_post('group-delmembers', {_cid: this.contact_list.selection,\n      _source: this.env.source, _gid: this.env.group});\n  };\n\n  //callback after deleting contact(s) from current group\n  this.remove_group_contacts = function(props)\n  {\n    if('undefined' != typeof this.env.group && (this.env.group === props.gid)){\n      var n, selection = this.contact_list.get_selection();\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n    }\n  }\n\n  // handler for keyboard events on the input field\n  this.add_input_keydown = function(e)\n  {\n    var key = rcube_event.get_keycode(e),\n      input = $(e.target), itype = input.data('tt');\n\n    // enter\n    if (key == 13) {\n      var newname = input.val();\n\n      if (newname) {\n        var lock = this.set_busy(true, 'loading');\n\n        if (itype == 'contactsearch')\n          this.http_post('search-create', {_search: this.env.search_request, _name: newname}, lock);\n        else if (this.env.group_renaming)\n          this.http_post('group-rename', {_source: this.env.source, _gid: this.env.group, _name: newname}, lock);\n        else\n          this.http_post('group-create', {_source: this.env.source, _name: newname}, lock);\n      }\n      return false;\n    }\n    // escape\n    else if (key == 27)\n      this.reset_add_input();\n\n    return true;\n  };\n\n  this.reset_add_input = function()\n  {\n    if (this.name_input) {\n      if (this.env.group_renaming) {\n        var li = this.name_input.parent();\n        li.children().last().show();\n        this.env.group_renaming = false;\n      }\n\n      this.name_input.remove();\n\n      if (this.name_input_li)\n        this.name_input_li.remove();\n\n      this.name_input = this.name_input_li = null;\n    }\n\n    this.enable_command('list', 'listgroup', true);\n  };\n\n  // callback for creating a new contact group\n  this.insert_contact_group = function(prop)\n  {\n    this.reset_add_input();\n\n    prop.type = 'group';\n    var key = 'G'+prop.source+prop.id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.id)\n        .click(function() { return rcmail.command('listgroup', prop, this); })\n        .html(prop.name),\n      li = $('<li>').attr({id: 'rcmli'+this.html_identifier(key), 'class': 'contactgroup'})\n        .append(link);\n\n    this.env.contactfolders[key] = this.env.contactgroups[key] = prop;\n    this.add_contact_group_row(prop, li);\n\n    this.triggerEvent('group_insert', { id:prop.id, source:prop.source, name:prop.name, li:li[0] });\n  };\n\n  // callback for renaming a contact group\n  this.update_contact_group = function(prop)\n  {\n    this.reset_add_input();\n\n    var key = 'G'+prop.source+prop.id,\n      li = this.get_folder_li(key),\n      link;\n\n    // group ID has changed, replace link node and identifiers\n    if (li && prop.newid) {\n      var newkey = 'G'+prop.source+prop.newid,\n        newprop = $.extend({}, prop);;\n\n      li.id = 'rcmli' + this.html_identifier(newkey);\n      this.env.contactfolders[newkey] = this.env.contactfolders[key];\n      this.env.contactfolders[newkey].id = prop.newid;\n      this.env.group = prop.newid;\n\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n\n      newprop.id = prop.newid;\n      newprop.type = 'group';\n\n      link = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.newid)\n        .click(function() { return rcmail.command('listgroup', newprop, this); })\n        .html(prop.name);\n      $(li).children().replaceWith(link);\n    }\n    // update displayed group name\n    else if (li && (link = li.firstChild) && link.tagName.toLowerCase() == 'a')\n      link.innerHTML = prop.name;\n\n    this.env.contactfolders[key].name = this.env.contactgroups[key].name = prop.name;\n    this.add_contact_group_row(prop, $(li), true);\n\n    this.triggerEvent('group_update', { id:prop.id, source:prop.source, name:prop.name, li:li[0], newid:prop.newid });\n  };\n\n  // add contact group row to the list, with sorting\n  this.add_contact_group_row = function(prop, li, reloc)\n  {\n    var row, name = prop.name.toUpperCase(),\n      sibling = this.get_folder_li(prop.source),\n      prefix = 'rcmliG' + this.html_identifier(prop.source);\n\n    // When renaming groups, we need to remove it from DOM and insert it in the proper place\n    if (reloc) {\n      row = li.clone(true);\n      li.remove();\n    }\n    else\n      row = li;\n\n    $('li[id^=\"'+prefix+'\"]', this.gui_objects.folderlist).each(function(i, elem) {\n      if (name >= $(this).text().toUpperCase())\n        sibling = elem;\n      else\n        return false;\n    });\n\n    row.insertAfter(sibling);\n  };\n\n  this.update_group_commands = function()\n  {\n    var source = this.env.source != '' ? this.env.address_sources[this.env.source] : null;\n    this.enable_command('group-create', (source && source.groups && !source.readonly));\n    this.enable_command('group-rename', 'group-delete', (source && source.groups && this.env.group && !source.readonly));\n  };\n\n  this.init_edit_field = function(col, elem)\n  {\n    var label = this.env.coltypes[col].label;\n\n    if (!elem)\n      elem = $('.ff_' + col);\n\n    if (label)\n      elem.placeholder(label);\n  };\n\n  this.insert_edit_field = function(col, section, menu)\n  {\n    // just make pre-defined input field visible\n    var elem = $('#ff_'+col);\n    if (elem.length) {\n      elem.show().focus();\n      $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n    }\n    else {\n      var lastelem = $('.ff_'+col),\n        appendcontainer = $('#contactsection'+section+' .contactcontroller'+col);\n\n      if (!appendcontainer.length) {\n        var sect = $('#contactsection'+section),\n          lastgroup = $('.contactfieldgroup', sect).last();\n        appendcontainer = $('<fieldset>').addClass('contactfieldgroup contactcontroller'+col);\n        if (lastgroup.length)\n          appendcontainer.insertAfter(lastgroup);\n        else\n          sect.prepend(appendcontainer);\n      }\n\n      if (appendcontainer.length && appendcontainer.get(0).nodeName == 'FIELDSET') {\n        var input, colprop = this.env.coltypes[col],\n          row = $('<div>').addClass('row'),\n          cell = $('<div>').addClass('contactfieldcontent data'),\n          label = $('<div>').addClass('contactfieldlabel label');\n\n        if (colprop.subtypes_select)\n          label.html(colprop.subtypes_select);\n        else\n          label.html(colprop.label);\n\n        var name_suffix = colprop.limit != 1 ? '[]' : '';\n        if (colprop.type == 'text' || colprop.type == 'date') {\n          input = $('<input>')\n            .addClass('ff_'+col)\n            .attr({type: 'text', name: '_'+col+name_suffix, size: colprop.size})\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n\n          if (colprop.type == 'date' && $.datepicker)\n            input.datepicker();\n        }\n        else if (colprop.type == 'textarea') {\n          input = $('<textarea>')\n            .addClass('ff_'+col)\n            .attr({ name: '_'+col+name_suffix, cols:colprop.size, rows:colprop.rows })\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n        }\n        else if (colprop.type == 'composite') {\n          var childcol, cp, first, templ, cols = [], suffices = [];\n          // read template for composite field order\n          if ((templ = this.env[col+'_template'])) {\n            for (var j=0; j < templ.length; j++) {\n              cols.push(templ[j][1]);\n              suffices.push(templ[j][2]);\n            }\n          }\n          else {  // list fields according to appearance in colprop\n            for (childcol in colprop.childs)\n              cols.push(childcol);\n          }\n\n          for (var i=0; i < cols.length; i++) {\n            childcol = cols[i];\n            cp = colprop.childs[childcol];\n            input = $('<input>')\n              .addClass('ff_'+childcol)\n              .attr({ type: 'text', name: '_'+childcol+name_suffix, size: cp.size })\n              .appendTo(cell);\n            cell.append(suffices[i] || \" \");\n            this.init_edit_field(childcol, input);\n            if (!first) first = input;\n          }\n          input = first;  // set focus to the first of this composite fields\n        }\n        else if (colprop.type == 'select') {\n          input = $('<select>')\n            .addClass('ff_'+col)\n            .attr('name', '_'+col+name_suffix)\n            .appendTo(cell);\n\n          var options = input.attr('options');\n          options[options.length] = new Option('---', '');\n          if (colprop.options)\n            $.each(colprop.options, function(i, val){ options[options.length] = new Option(val, i); });\n        }\n\n        if (input) {\n          var delbutton = $('<a href=\"#del\"></a>')\n            .addClass('contactfieldbutton deletebutton')\n            .attr({title: this.get_label('delete'), rel: col})\n            .html(this.env.delbutton)\n            .click(function(){ ref.delete_edit_field(this); return false })\n            .appendTo(cell);\n\n          row.append(label).append(cell).appendTo(appendcontainer.show());\n          input.first().focus();\n\n          // disable option if limit reached\n          if (!colprop.count) colprop.count = 0;\n          if (++colprop.count == colprop.limit && colprop.limit)\n            $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n        }\n      }\n    }\n  };\n\n  this.delete_edit_field = function(elem)\n  {\n    var col = $(elem).attr('rel'),\n      colprop = this.env.coltypes[col],\n      fieldset = $(elem).parents('fieldset.contactfieldgroup'),\n      addmenu = fieldset.parent().find('select.addfieldmenu');\n\n    // just clear input but don't hide the last field\n    if (--colprop.count <= 0 && colprop.visible)\n      $(elem).parent().children('input').val('').blur();\n    else {\n      $(elem).parents('div.row').remove();\n      // hide entire fieldset if no more rows\n      if (!fieldset.children('div.row').length)\n        fieldset.hide();\n    }\n\n    // enable option in add-field selector or insert it if necessary\n    if (addmenu.length) {\n      var option = addmenu.children('option[value=\"'+col+'\"]');\n      if (option.length)\n        option.prop('disabled', false);\n      else\n        option = $('<option>').attr('value', col).html(colprop.label).appendTo(addmenu);\n      addmenu.show();\n    }\n  };\n\n  this.upload_contact_photo = function(form)\n  {\n    if (form && form.elements._photo.value) {\n      this.async_upload_form(form, 'upload-photo', function(e) {\n        rcmail.set_busy(false, null, rcmail.file_upload_id);\n      });\n\n      // display upload indicator\n      this.file_upload_id = this.set_busy(true, 'uploading');\n    }\n  };\n\n  this.replace_contact_photo = function(id)\n  {\n    var img_src = id == '-del-' ? this.env.photo_placeholder :\n      this.env.comm_path + '&_action=photo&_source=' + this.env.source + '&_cid=' + this.env.cid + '&_photo=' + id;\n\n    this.set_photo_actions(id);\n    $(this.gui_objects.contactphoto).children('img').attr('src', img_src);\n  };\n\n  this.photo_upload_end = function()\n  {\n    this.set_busy(false, null, this.file_upload_id);\n    delete this.file_upload_id;\n  };\n\n  this.set_photo_actions = function(id)\n  {\n    var n, buttons = this.buttons['upload-photo'];\n    for (n=0; buttons && n < buttons.length; n++)\n      $('a#'+buttons[n].id).html(this.get_label(id == '-del-' ? 'addphoto' : 'replacephoto'));\n\n    $('#ff_photo').val(id);\n    this.enable_command('upload-photo', this.env.coltypes.photo ? true : false);\n    this.enable_command('delete-photo', this.env.coltypes.photo && id != '-del-');\n  };\n\n  // load advanced search page\n  this.advanced_search = function()\n  {\n    var url = {_form: 1, _action: 'search'}, target = window;\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      url._framed = 1;\n      target = window.frames[this.env.contentframe];\n      this.contact_list.clear_selection();\n    }\n\n    this.location_href(url, target, true);\n\n    return true;\n  };\n\n  // unselect directory/group\n  this.unselect_directory = function()\n  {\n    this.select_folder('');\n    this.enable_command('search-delete', false);\n  };\n\n  // callback for creating a new saved search record\n  this.insert_saved_search = function(name, id)\n  {\n    this.reset_add_input();\n\n    var key = 'S'+id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', id)\n        .click(function() { return rcmail.command('listsearch', id, this); })\n        .html(name),\n      li = $('<li>').attr({id: 'rcmli' + this.html_identifier(key), 'class': 'contactsearch'})\n        .append(link),\n      prop = {name:name, id:id, li:li[0]};\n\n    this.add_saved_search_row(prop, li);\n    this.select_folder('S'+id);\n    this.enable_command('search-delete', true);\n    this.env.search_id = id;\n\n    this.triggerEvent('abook_search_insert', prop);\n  };\n\n  // add saved search row to the list, with sorting\n  this.add_saved_search_row = function(prop, li, reloc)\n  {\n    var row, sibling, name = prop.name.toUpperCase();\n\n    // When renaming groups, we need to remove it from DOM and insert it in the proper place\n    if (reloc) {\n      row = li.clone(true);\n      li.remove();\n    }\n    else\n      row = li;\n\n    $('li[class~=\"contactsearch\"]', this.gui_objects.folderlist).each(function(i, elem) {\n      if (!sibling)\n        sibling = this.previousSibling;\n\n      if (name >= $(this).text().toUpperCase())\n        sibling = elem;\n      else\n        return false;\n    });\n\n    if (sibling)\n      row.insertAfter(sibling);\n    else\n      row.appendTo(this.gui_objects.folderlist);\n  };\n\n  // creates an input for saved search name\n  this.search_create = function()\n  {\n    this.add_input_row('contactsearch');\n  };\n\n  this.search_delete = function()\n  {\n    if (this.env.search_request) {\n      var lock = this.set_busy(true, 'savedsearchdeleting');\n      this.http_post('search-delete', {_sid: this.env.search_id}, lock);\n    }\n  };\n\n  // callback from server upon search-delete command\n  this.remove_search_item = function(id)\n  {\n    var li, key = 'S'+id;\n    if ((li = this.get_folder_li(key))) {\n      this.triggerEvent('search_delete', { id:id, li:li });\n\n      li.parentNode.removeChild(li);\n    }\n\n    this.env.search_id = null;\n    this.env.search_request = null;\n    this.list_contacts_clear();\n    this.reset_qsearch();\n    this.enable_command('search-delete', 'search-create', false);\n  };\n\n  this.listsearch = function(id)\n  {\n    var folder, lock = this.set_busy(true, 'searching');\n\n    if (this.contact_list) {\n      this.list_contacts_clear();\n    }\n\n    this.reset_qsearch();\n    this.select_folder('S'+id);\n\n    // reset vars\n    this.env.current_page = 1;\n    this.http_request('search', {_sid: id}, lock);\n  };\n\n\n  /*********************************************************/\n  /*********        user settings methods          *********/\n  /*********************************************************/\n\n  // preferences section select and load options frame\n  this.section_select = function(list)\n  {\n    var id = list.get_single_selection(), target = window,\n      url = {_action: 'edit-prefs', _section: id};\n\n    if (id) {\n      if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n        url._framed = 1;\n        target = window.frames[this.env.contentframe];\n      }\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  this.identity_select = function(list)\n  {\n    var id;\n    if (id = list.get_single_selection()) {\n      this.enable_command('delete', list.rowcount > 1 && this.env.identities_level < 2);\n      this.load_identity(id, 'edit-identity');\n    }\n  };\n\n  // load identity record\n  this.load_identity = function(id, action)\n  {\n    if (action == 'edit-identity' && (!id || id == this.env.iid))\n      return false;\n\n    var target = window,\n      url = {_action: action, _iid: id};\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      url._framed = 1;\n      target = window.frames[this.env.contentframe];\n      document.getElementById(this.env.contentframe).style.visibility = 'inherit';\n    }\n\n    if (action && (id || action == 'add-identity')) {\n      this.set_busy(true);\n      this.location_href(url, target);\n    }\n\n    return true;\n  };\n\n  this.delete_identity = function(id)\n  {\n    // exit if no identity is specified or if selection is empty\n    var selection = this.identity_list.get_selection();\n    if (!(selection.length || this.env.iid))\n      return;\n\n    if (!id)\n      id = this.env.iid ? this.env.iid : selection[0];\n\n    // submit request with appended token\n    if (confirm(this.get_label('deleteidentityconfirm')))\n      this.goto_url('delete-identity', { _iid: id, _token: this.env.request_token }, true);\n\n    return true;\n  };\n\n  this.update_identity_row = function(id, name, add)\n  {\n    var row, col, list = this.identity_list,\n      rid = this.html_identifier(id);\n\n    if (list.rows[rid] && (row = list.rows[rid].obj)) {\n      $(row.cells[0]).html(name);\n    }\n    else if (add) {\n      row = $('<tr>').attr('id', 'rcmrow'+rid).get(0);\n      col = $('<td>').addClass('mail').html(name).appendTo(row);\n      list.insert_row(row);\n      list.select(rid);\n    }\n  };\n\n\n  /*********************************************************/\n  /*********        folder manager methods         *********/\n  /*********************************************************/\n\n  this.init_subscription_list = function()\n  {\n    var p = this;\n    this.subscription_list = new rcube_list_widget(this.gui_objects.subscriptionlist,\n      {multiselect:false, draggable:true, keyboard:false, toggleselect:true});\n    this.subscription_list.addEventListener('select', function(o){ p.subscription_select(o); });\n    this.subscription_list.addEventListener('dragstart', function(o){ p.drag_active = true; });\n    this.subscription_list.addEventListener('dragend', function(o){ p.subscription_move_folder(o); });\n    this.subscription_list.row_init = function (row) {\n      row.obj.onmouseover = function() { p.focus_subscription(row.id); };\n      row.obj.onmouseout = function() { p.unfocus_subscription(row.id); };\n    };\n    this.subscription_list.init();\n    $('#mailboxroot')\n      .mouseover(function(){ p.focus_subscription(this.id); })\n      .mouseout(function(){ p.unfocus_subscription(this.id); })\n  };\n\n  this.focus_subscription = function(id)\n  {\n    var row, folder,\n      delim = RegExp.escape(this.env.delimiter),\n      reg = RegExp('['+delim+']?[^'+delim+']+$');\n\n    if (this.drag_active && this.env.mailbox && (row = document.getElementById(id)))\n      if (this.env.subscriptionrows[id] &&\n          (folder = this.env.subscriptionrows[id][0]) !== null\n      ) {\n        if (this.check_droptarget(folder) &&\n            !this.env.subscriptionrows[this.get_folder_row_id(this.env.mailbox)][2] &&\n            (folder != this.env.mailbox.replace(reg, '')) &&\n            (!folder.match(new RegExp('^'+RegExp.escape(this.env.mailbox+this.env.delimiter))))\n        ) {\n          this.env.dstfolder = folder;\n          $(row).addClass('droptarget');\n        }\n      }\n  };\n\n  this.unfocus_subscription = function(id)\n  {\n    var row = $('#'+id);\n\n    this.env.dstfolder = null;\n    if (this.env.subscriptionrows[id] && row[0])\n      row.removeClass('droptarget');\n    else\n      $(this.subscription_list.frame).removeClass('droptarget');\n  };\n\n  this.subscription_select = function(list)\n  {\n    var id, folder;\n\n    if (list && (id = list.get_single_selection()) &&\n        (folder = this.env.subscriptionrows['rcmrow'+id])\n    ) {\n      this.env.mailbox = folder[0];\n      this.show_folder(folder[0]);\n      this.enable_command('delete-folder', !folder[2]);\n    }\n    else {\n      this.env.mailbox = null;\n      this.show_contentframe(false);\n      this.enable_command('delete-folder', 'purge', false);\n    }\n  };\n\n  this.subscription_move_folder = function(list)\n  {\n    var delim = RegExp.escape(this.env.delimiter),\n      reg = RegExp('['+delim+']?[^'+delim+']+$');\n\n    if (this.env.mailbox && this.env.dstfolder !== null && (this.env.dstfolder != this.env.mailbox) &&\n        (this.env.dstfolder != this.env.mailbox.replace(reg, ''))\n    ) {\n      reg = new RegExp('[^'+delim+']*['+delim+']', 'g');\n      var basename = this.env.mailbox.replace(reg, ''),\n        newname = this.env.dstfolder === '' ? basename : this.env.dstfolder+this.env.delimiter+basename;\n\n      if (newname != this.env.mailbox) {\n        this.http_post('rename-folder', {_folder_oldname: this.env.mailbox, _folder_newname: newname}, this.set_busy(true, 'foldermoving'));\n        this.subscription_list.draglayer.hide();\n      }\n    }\n    this.drag_active = false;\n    this.unfocus_subscription(this.get_folder_row_id(this.env.dstfolder));\n  };\n\n  // tell server to create and subscribe a new mailbox\n  this.create_folder = function()\n  {\n    this.show_folder('', this.env.mailbox);\n  };\n\n  // delete a specific mailbox with all its messages\n  this.delete_folder = function(name)\n  {\n    var id = this.get_folder_row_id(name ? name : this.env.mailbox),\n      folder = this.env.subscriptionrows[id][0];\n\n    if (folder && confirm(this.get_label('deletefolderconfirm'))) {\n      var lock = this.set_busy(true, 'folderdeleting');\n      this.http_post('delete-folder', {_mbox: folder}, lock);\n    }\n  };\n\n  // Add folder row to the table and initialize it\n  this.add_folder_row = function (name, display_name, is_protected, subscribed, skip_init, class_name)\n  {\n    if (!this.gui_objects.subscriptionlist)\n      return false;\n\n    var row, n, i, tmp, tmp_name, folders, rowid, list = [], slist = [],\n      tbody = this.gui_objects.subscriptionlist.tBodies[0],\n      refrow = $('tr', tbody).get(1),\n      id = 'rcmrow'+((new Date).getTime());\n\n    if (!refrow) {\n      // Refresh page if we don't have a table row to clone\n      this.goto_url('folders');\n      return false;\n    }\n\n    // clone a table row if there are existing rows\n    row = $(refrow).clone(true);\n\n    // set ID, reset css class\n    row.attr('id', id);\n    row.attr('class', class_name);\n\n    // set folder name\n    row.find('td:first').html(display_name);\n\n    // update subscription checkbox\n    $('input[name=\"_subscribed[]\"]', row).val(name)\n      .prop({checked: subscribed ? true : false, disabled: is_protected ? true : false});\n\n    // add to folder/row-ID map\n    this.env.subscriptionrows[id] = [name, display_name, 0];\n\n    // sort folders, to find a place where to insert the row\n    folders = [];\n    $.each(this.env.subscriptionrows, function(k,v){ folders.push(v) });\n    folders.sort(function(a,b){ return a[0] < b[0] ? -1 : (a[0] > b[0] ? 1 : 0) });\n\n    for (n in folders) {\n      // protected folder\n      if (folders[n][2]) {\n        tmp_name = folders[n][0] + this.env.delimiter;\n        // prefix namespace cannot have subfolders (#1488349)\n        if (tmp_name == this.env.prefix_ns)\n          continue;\n        slist.push(folders[n][0]);\n        tmp = tmp_name;\n      }\n      // protected folder's child\n      else if (tmp && folders[n][0].indexOf(tmp) == 0)\n        slist.push(folders[n][0]);\n      // other\n      else {\n        list.push(folders[n][0]);\n        tmp = null;\n      }\n    }\n\n    // check if subfolder of a protected folder\n    for (n=0; n<slist.length; n++) {\n      if (name.indexOf(slist[n]+this.env.delimiter) == 0)\n        rowid = this.get_folder_row_id(slist[n]);\n    }\n\n    // find folder position after sorting\n    for (n=0; !rowid && n<list.length; n++) {\n      if (n && list[n] == name)\n        rowid = this.get_folder_row_id(list[n-1]);\n    }\n\n    // add row to the table\n    if (rowid)\n      $('#'+rowid).after(row);\n    else\n      row.appendTo(tbody);\n\n    // update list widget\n    this.subscription_list.clear_selection();\n    if (!skip_init)\n      this.init_subscription_list();\n\n    row = row.get(0);\n    if (row.scrollIntoView)\n      row.scrollIntoView();\n\n    return row;\n  };\n\n  // replace an existing table row with a new folder line (with subfolders)\n  this.replace_folder_row = function(oldfolder, newfolder, display_name, is_protected, class_name)\n  {\n    if (!this.gui_objects.subscriptionlist)\n      return false;\n\n    var i, n, len, name, dispname, oldrow, tmprow, row, level,\n      tbody = this.gui_objects.subscriptionlist.tBodies[0],\n      folders = this.env.subscriptionrows,\n      id = this.get_folder_row_id(oldfolder),\n      regex = new RegExp('^'+RegExp.escape(oldfolder)),\n      subscribed = $('input[name=\"_subscribed[]\"]', $('#'+id)).prop('checked'),\n      // find subfolders of renamed folder\n      list = this.get_subfolders(oldfolder);\n\n    // replace an existing table row\n    this._remove_folder_row(id);\n    row = $(this.add_folder_row(newfolder, display_name, is_protected, subscribed, true, class_name));\n\n    // detect tree depth change\n    if (len = list.length) {\n      level = (oldfolder.split(this.env.delimiter)).length - (newfolder.split(this.env.delimiter)).length;\n    }\n\n    // move subfolders to the new branch\n    for (n=0; n<len; n++) {\n      id = list[n];\n      name = this.env.subscriptionrows[id][0];\n      dispname = this.env.subscriptionrows[id][1];\n      oldrow = $('#'+id);\n      tmprow = oldrow.clone(true);\n      oldrow.remove();\n      row.after(tmprow);\n      row = tmprow;\n      // update folder index\n      name = name.replace(regex, newfolder);\n      $('input[name=\"_subscribed[]\"]', row).val(name);\n      this.env.subscriptionrows[id][0] = name;\n      // update the name if level is changed\n      if (level != 0) {\n        if (level > 0) {\n          for (i=level; i>0; i--)\n            dispname = dispname.replace(/^&nbsp;&nbsp;&nbsp;&nbsp;/, '');\n        }\n        else {\n          for (i=level; i<0; i++)\n            dispname = '&nbsp;&nbsp;&nbsp;&nbsp;' + dispname;\n        }\n        row.find('td:first').html(dispname);\n        this.env.subscriptionrows[id][1] = dispname;\n      }\n    }\n\n    // update list widget\n    this.init_subscription_list();\n  };\n\n  // remove the table row of a specific mailbox from the table\n  this.remove_folder_row = function(folder, subs)\n  {\n    var n, len, list = [], id = this.get_folder_row_id(folder);\n\n    // get subfolders if any\n    if (subs)\n      list = this.get_subfolders(folder);\n\n    // remove old row\n    this._remove_folder_row(id);\n\n    // remove subfolders\n    for (n=0, len=list.length; n<len; n++)\n      this._remove_folder_row(list[n]);\n  };\n\n  this._remove_folder_row = function(id)\n  {\n    this.subscription_list.remove_row(id.replace(/^rcmrow/, ''));\n    $('#'+id).remove();\n    delete this.env.subscriptionrows[id];\n  }\n\n  this.get_subfolders = function(folder)\n  {\n    var name, list = [],\n      regex = new RegExp('^'+RegExp.escape(folder)+RegExp.escape(this.env.delimiter)),\n      row = $('#'+this.get_folder_row_id(folder)).get(0);\n\n    while (row = row.nextSibling) {\n      if (row.id) {\n        name = this.env.subscriptionrows[row.id][0];\n        if (regex.test(name)) {\n          list.push(row.id);\n        }\n        else\n          break;\n      }\n    }\n\n    return list;\n  }\n\n  this.subscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('foldersubscribing'), 'loading');\n      this.http_post('subscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  this.unsubscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('folderunsubscribing'), 'loading');\n      this.http_post('unsubscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  // helper method to find a specific mailbox row ID\n  this.get_folder_row_id = function(folder)\n  {\n    var id, folders = this.env.subscriptionrows;\n    for (id in folders)\n      if (folders[id] && folders[id][0] == folder)\n        break;\n\n    return id;\n  };\n\n  // when user select a folder in manager\n  this.show_folder = function(folder, path, force)\n  {\n    var target = window,\n      url = '&_action=edit-folder&_mbox='+urlencode(folder);\n\n    if (path)\n      url += '&_path='+urlencode(path);\n\n    if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n      target = window.frames[this.env.contentframe];\n      url += '&_framed=1';\n    }\n\n    if (String(target.location.href).indexOf(url) >= 0 && !force)\n      this.show_contentframe(true);\n    else\n      this.location_href(this.env.comm_path+url, target, true);\n  };\n\n  // disables subscription checkbox (for protected folder)\n  this.disable_subscription = function(folder)\n  {\n    var id = this.get_folder_row_id(folder);\n    if (id)\n      $('input[name=\"_subscribed[]\"]', $('#'+id)).prop('disabled', true);\n  };\n\n  this.folder_size = function(folder)\n  {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('folder-size', {_mbox: folder}, lock);\n  };\n\n  this.folder_size_update = function(size)\n  {\n    $('#folder-size').replaceWith(size);\n  };\n\n\n  /*********************************************************/\n  /*********           GUI functionality           *********/\n  /*********************************************************/\n\n  var init_button = function(cmd, prop)\n  {\n    var elm = document.getElementById(prop.id);\n    if (!elm)\n      return;\n\n    var preload = false;\n    if (prop.type == 'image') {\n      elm = elm.parentNode;\n      preload = true;\n    }\n\n    elm._command = cmd;\n    elm._id = prop.id;\n    if (prop.sel) {\n      elm.onmousedown = function(e){ return rcmail.button_sel(this._command, this._id); };\n      elm.onmouseup = function(e){ return rcmail.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.sel;\n    }\n    if (prop.over) {\n      elm.onmouseover = function(e){ return rcmail.button_over(this._command, this._id); };\n      elm.onmouseout = function(e){ return rcmail.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.over;\n    }\n  };\n\n  // set event handlers on registered buttons\n  this.init_buttons = function()\n  {\n    for (var cmd in this.buttons) {\n      if (typeof cmd !== 'string')\n        continue;\n\n      for (var i=0; i<this.buttons[cmd].length; i++) {\n        init_button(cmd, this.buttons[cmd][i]);\n      }\n    }\n\n    // set active task button\n    this.set_button(this.task, 'sel');\n  };\n\n  // set button to a specific state\n  this.set_button = function(command, state)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (!obj)\n        continue;\n\n      // get default/passive setting of the button\n      if (button.type == 'image' && !button.status) {\n        button.pas = obj._original_src ? obj._original_src : obj.src;\n        // respect PNG fix on IE browsers\n        if (obj.runtimeStyle && obj.runtimeStyle.filter && obj.runtimeStyle.filter.match(/src=['\"]([^'\"]+)['\"]/))\n          button.pas = RegExp.$1;\n      }\n      else if (!button.status)\n        button.pas = String(obj.className);\n\n      // set image according to button state\n      if (button.type == 'image' && button[state]) {\n        button.status = state;\n        obj.src = button[state];\n      }\n      // set class name according to button state\n      else if (button[state] !== undefined) {\n        button.status = state;\n        obj.className = button[state];\n      }\n      // disable/enable input buttons\n      if (button.type == 'input') {\n        button.status = state;\n        obj.disabled = !state;\n      }\n    }\n  };\n\n  // display a specific alttext\n  this.set_alttext = function(command, label)\n  {\n    var n, button, obj, link, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (button.type == 'image' && obj) {\n        obj.setAttribute('alt', this.get_label(label));\n        if ((link = obj.parentNode) && link.tagName.toLowerCase() == 'a')\n          link.setAttribute('title', this.get_label(label));\n      }\n      else if (obj)\n        obj.setAttribute('title', this.get_label(label));\n    }\n  };\n\n  // mouse over button\n  this.button_over = function(command, id)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      if (button.id == id && button.status == 'act') {\n        obj = document.getElementById(button.id);\n        if (obj && button.over) {\n          if (button.type == 'image')\n            obj.src = button.over;\n          else\n            obj.className = button.over;\n        }\n      }\n    }\n  };\n\n  // mouse down on button\n  this.button_sel = function(command, id)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      if (button.id == id && button.status == 'act') {\n        obj = document.getElementById(button.id);\n        if (obj && button.sel) {\n          if (button.type == 'image')\n            obj.src = button.sel;\n          else\n            obj.className = button.sel;\n        }\n        this.buttons_sel[id] = command;\n      }\n    }\n  };\n\n  // mouse out of button\n  this.button_out = function(command, id)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      if (button.id == id && button.status == 'act') {\n        obj = document.getElementById(button.id);\n        if (obj && button.act) {\n          if (button.type == 'image')\n            obj.src = button.act;\n          else\n            obj.className = button.act;\n        }\n      }\n    }\n  };\n\n  // write to the document/window title\n  this.set_pagetitle = function(title)\n  {\n    if (title && document.title)\n      document.title = title;\n  };\n\n  // display a system message, list of types in common.css (below #message definition)\n  this.display_message = function(msg, type, timeout)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.display_message(msg, type, timeout);\n\n    if (!this.gui_objects.message) {\n      // save message in order to display after page loaded\n      if (type != 'loading')\n        this.pending_message = [msg, type, timeout];\n      return false;\n    }\n\n    type = type ? type : 'notice';\n\n    var ref = this,\n      key = this.html_identifier(msg),\n      date = new Date(),\n      id = type + date.getTime();\n\n    if (!timeout)\n      timeout = this.message_time * (type == 'error' || type == 'warning' ? 2 : 1);\n\n    if (type == 'loading') {\n      key = 'loading';\n      timeout = this.env.request_timeout * 1000;\n      if (!msg)\n        msg = this.get_label('loading');\n    }\n\n    // The same message is already displayed\n    if (this.messages[key]) {\n      // replace label\n      if (this.messages[key].obj)\n        this.messages[key].obj.html(msg);\n      // store label in stack\n      if (type == 'loading') {\n        this.messages[key].labels.push({'id': id, 'msg': msg});\n      }\n      // add element and set timeout\n      this.messages[key].elements.push(id);\n      setTimeout(function() { ref.hide_message(id, type == 'loading'); }, timeout);\n      return id;\n    }\n\n    // create DOM object and display it\n    var obj = $('<div>').addClass(type).html(msg).data('key', key),\n      cont = $(this.gui_objects.message).append(obj).show();\n\n    this.messages[key] = {'obj': obj, 'elements': [id]};\n\n    if (type == 'loading') {\n      this.messages[key].labels = [{'id': id, 'msg': msg}];\n    }\n    else {\n      obj.click(function() { return ref.hide_message(obj); });\n    }\n\n    this.triggerEvent('message', { message:msg, type:type, timeout:timeout, object:obj });\n\n    if (timeout > 0)\n      setTimeout(function() { ref.hide_message(id, type == 'loading'); }, timeout);\n    return id;\n  };\n\n  // make a message to disapear\n  this.hide_message = function(obj, fade)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.hide_message(obj, fade);\n\n    var k, n, i, msg, m = this.messages;\n\n    // Hide message by object, don't use for 'loading'!\n    if (typeof obj === 'object') {\n      $(obj)[fade?'fadeOut':'hide']();\n      msg = $(obj).data('key');\n      if (this.messages[msg])\n        delete this.messages[msg];\n    }\n    // Hide message by id\n    else {\n      for (k in m) {\n        for (n in m[k].elements) {\n          if (m[k] && m[k].elements[n] == obj) {\n            m[k].elements.splice(n, 1);\n            // hide DOM element if last instance is removed\n            if (!m[k].elements.length) {\n              m[k].obj[fade?'fadeOut':'hide']();\n              delete m[k];\n            }\n            // set pending action label for 'loading' message\n            else if (k == 'loading') {\n              for (i in m[k].labels) {\n                if (m[k].labels[i].id == obj) {\n                  delete m[k].labels[i];\n                }\n                else {\n                  msg = m[k].labels[i].msg;\n                }\n                m[k].obj.html(msg);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  // remove all messages immediately\n  this.clear_messages = function()\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.clear_messages();\n\n    var k, n, m = this.messages;\n\n    for (k in m)\n      for (n in m[k].elements)\n        if (m[k].obj)\n          m[k].obj.hide();\n\n    this.messages = {};\n  };\n\n  // enable/disable buttons for page shifting\n  this.set_page_buttons = function()\n  {\n    this.enable_command('nextpage', 'lastpage', (this.env.pagecount > this.env.current_page));\n    this.enable_command('previouspage', 'firstpage', (this.env.current_page > 1));\n  };\n\n  // mark a mailbox as selected and set environment variable\n  this.select_folder = function(name, prefix, encode)\n  {\n    if (this.gui_objects.folderlist) {\n      var current_li, target_li;\n\n      if ((current_li = $('li.selected', this.gui_objects.folderlist))) {\n        current_li.removeClass('selected').addClass('unfocused');\n      }\n      if ((target_li = this.get_folder_li(name, prefix, encode))) {\n        $(target_li).removeClass('unfocused').addClass('selected');\n      }\n\n      // trigger event hook\n      this.triggerEvent('selectfolder', { folder:name, prefix:prefix });\n    }\n  };\n\n  // adds a class to selected folder\n  this.mark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).addClass(class_name);\n  };\n\n  // adds a class to selected folder\n  this.unmark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).removeClass(class_name);\n  };\n\n  // helper method to find a folder list item\n  this.get_folder_li = function(name, prefix, encode)\n  {\n    if (!prefix)\n      prefix = 'rcmli';\n\n    if (this.gui_objects.folderlist) {\n      name = this.html_identifier(name, encode);\n      return document.getElementById(prefix+name);\n    }\n\n    return null;\n  };\n\n  // for reordering column array (Konqueror workaround)\n  // and for setting some message list global variables\n  this.set_message_coltypes = function(coltypes, repl, smart_col)\n  {\n    var list = this.message_list,\n      thead = list ? list.list.tHead : null,\n      cell, col, n, len, th, tr;\n\n    this.env.coltypes = coltypes;\n\n    // replace old column headers\n    if (thead) {\n      if (repl) {\n        th = document.createElement('thead');\n        tr = document.createElement('tr');\n\n        for (c=0, len=repl.length; c < len; c++) {\n          cell = document.createElement('td');\n          cell.innerHTML = repl[c].html;\n          if (repl[c].id) cell.id = repl[c].id;\n          if (repl[c].className) cell.className = repl[c].className;\n          tr.appendChild(cell);\n        }\n        th.appendChild(tr);\n        thead.parentNode.replaceChild(th, thead);\n        thead = th;\n      }\n\n      for (n=0, len=this.env.coltypes.length; n<len; n++) {\n        col = this.env.coltypes[n];\n        if ((cell = thead.rows[0].cells[n]) && (col == 'from' || col == 'to' || col == 'fromto')) {\n          cell.id = 'rcm'+col;\n          // if we have links for sorting, it's a bit more complicated...\n          if (cell.firstChild && cell.firstChild.tagName.toLowerCase()=='a') {\n            cell = cell.firstChild;\n            cell.onclick = function(){ return rcmail.command('sort', this.__col, this); };\n            cell.__col = col;\n          }\n          cell.innerHTML = this.get_label(col == 'fromto' ? smart_col : col);\n        }\n      }\n    }\n\n    this.env.subject_col = null;\n    this.env.flagged_col = null;\n    this.env.status_col = null;\n\n    if ((n = $.inArray('subject', this.env.coltypes)) >= 0) {\n      this.env.subject_col = n;\n      if (list)\n        list.subject_col = n;\n    }\n    if ((n = $.inArray('flag', this.env.coltypes)) >= 0)\n      this.env.flagged_col = n;\n    if ((n = $.inArray('status', this.env.coltypes)) >= 0)\n      this.env.status_col = n;\n\n    if (list)\n      list.init_header();\n  };\n\n  // replace content of row count display\n  this.set_rowcount = function(text, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    $(this.gui_objects.countdisplay).html(text);\n\n    // update page navigation buttons\n    this.set_page_buttons();\n  };\n\n  // replace content of mailboxname display\n  this.set_mailboxname = function(content)\n  {\n    if (this.gui_objects.mailboxname && content)\n      this.gui_objects.mailboxname.innerHTML = content;\n  };\n\n  // replace content of quota display\n  this.set_quota = function(content)\n  {\n    if (this.gui_objects.quotadisplay && content && content.type == 'text')\n      $(this.gui_objects.quotadisplay).html(content.percent+'%').attr('title', content.title);\n\n    this.triggerEvent('setquota', content);\n    this.env.quota_content = content;\n  };\n\n  // update the mailboxlist\n  this.set_unread_count = function(mbox, count, set_title, mark)\n  {\n    if (!this.gui_objects.mailboxlist)\n      return false;\n\n    this.env.unread_counts[mbox] = count;\n    this.set_unread_count_display(mbox, set_title);\n\n    if (mark)\n      this.mark_folder(mbox, mark, '', true);\n    else if (!count)\n      this.unmark_folder(mbox, 'recent', '', true);\n  };\n\n  // update the mailbox count display\n  this.set_unread_count_display = function(mbox, set_title)\n  {\n    var reg, link, text_obj, item, mycount, childcount, div;\n\n    if (item = this.get_folder_li(mbox, '', true)) {\n      mycount = this.env.unread_counts[mbox] ? this.env.unread_counts[mbox] : 0;\n      link = $(item).children('a').eq(0);\n      text_obj = link.children('span.unreadcount');\n      if (!text_obj.length && mycount)\n        text_obj = $('<span>').addClass('unreadcount').appendTo(link);\n      reg = /\\s+\\([0-9]+\\)$/i;\n\n      childcount = 0;\n      if ((div = item.getElementsByTagName('div')[0]) &&\n          div.className.match(/collapsed/)) {\n        // add children's counters\n        for (var k in this.env.unread_counts)\n          if (k.indexOf(mbox + this.env.delimiter) == 0)\n            childcount += this.env.unread_counts[k];\n      }\n\n      if (mycount && text_obj.length)\n        text_obj.html(this.env.unreadwrap.replace(/%[sd]/, mycount));\n      else if (text_obj.length)\n        text_obj.remove();\n\n      // set parent's display\n      reg = new RegExp(RegExp.escape(this.env.delimiter) + '[^' + RegExp.escape(this.env.delimiter) + ']+$');\n      if (mbox.match(reg))\n        this.set_unread_count_display(mbox.replace(reg, ''), false);\n\n      // set the right classes\n      if ((mycount+childcount)>0)\n        $(item).addClass('unread');\n      else\n        $(item).removeClass('unread');\n    }\n\n    // set unread count to window title\n    reg = /^\\([0-9]+\\)\\s+/i;\n    if (set_title && document.title) {\n      var new_title = '',\n        doc_title = String(document.title);\n\n      if (mycount && doc_title.match(reg))\n        new_title = doc_title.replace(reg, '('+mycount+') ');\n      else if (mycount)\n        new_title = '('+mycount+') '+doc_title;\n      else\n        new_title = doc_title.replace(reg, '');\n\n      this.set_pagetitle(new_title);\n    }\n  };\n\n  // display fetched raw headers\n  this.set_headers = function(content)\n  {\n    if (this.gui_objects.all_headers_row && this.gui_objects.all_headers_box && content)\n      $(this.gui_objects.all_headers_box).html(content).show();\n  };\n\n  // display all-headers row and fetch raw message headers\n  this.show_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box || !this.env.uid)\n      return;\n\n    $(elem).removeClass('show-headers').addClass('hide-headers');\n    $(this.gui_objects.all_headers_row).show();\n    elem.onclick = function() { rcmail.command('hide-headers', '', elem); };\n\n    // fetch headers only once\n    if (!this.gui_objects.all_headers_box.innerHTML) {\n      var lock = this.display_message(this.get_label('loading'), 'loading');\n      this.http_post('headers', {_uid: this.env.uid}, lock);\n    }\n  };\n\n  // hide all-headers row\n  this.hide_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box)\n      return;\n\n    $(elem).removeClass('hide-headers').addClass('show-headers');\n    $(this.gui_objects.all_headers_row).hide();\n    elem.onclick = function() { rcmail.command('show-headers', '', elem); };\n  };\n\n\n  /********************************************************/\n  /*********  html to text conversion functions   *********/\n  /********************************************************/\n\n  this.html2plain = function(htmlText, id)\n  {\n    var rcmail = this,\n      url = '?_task=utils&_action=html2text',\n      lock = this.set_busy(true, 'converting');\n\n    this.log('HTTP POST: ' + url);\n\n    $.ajax({ type: 'POST', url: url, data: htmlText, contentType: 'application/octet-stream',\n      error: function(o, status, err) { rcmail.http_error(o, status, err, lock); },\n      success: function(data) { rcmail.set_busy(false, null, lock); $('#'+id).val(data); rcmail.log(data); }\n    });\n  };\n\n  this.plain2html = function(plain, id)\n  {\n    var lock = this.set_busy(true, 'converting');\n\n    plain = plain.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    $('#'+id).val(plain ? '<pre>'+plain+'</pre>' : '');\n\n    this.set_busy(false, null, lock);\n  };\n\n\n  /********************************************************/\n  /*********        remote request methods        *********/\n  /********************************************************/\n\n  // compose a valid url with the given parameters\n  this.url = function(action, query)\n  {\n    var querystring = typeof query === 'string' ? '&' + query : '';\n\n    if (typeof action !== 'string')\n      query = action;\n    else if (!query || typeof query !== 'object')\n      query = {};\n\n    if (action)\n      query._action = action;\n    else\n      query._action = this.env.action;\n\n    var base = this.env.comm_path, k, param = {};\n\n    // overwrite task name\n    if (query._action.match(/([a-z]+)\\/([a-z0-9-_.]+)/)) {\n      query._action = RegExp.$2;\n      base = base.replace(/\\_task=[a-z]+/, '_task='+RegExp.$1);\n    }\n\n    // remove undefined values\n    for (k in query) {\n      if (query[k] !== undefined && query[k] !== null)\n        param[k] = query[k];\n    }\n\n    return base + '&' + $.param(param) + querystring;\n  };\n\n  this.redirect = function(url, lock)\n  {\n    if (lock || lock === null)\n      this.set_busy(true);\n\n    if (this.is_framed())\n      parent.rcmail.redirect(url, lock);\n    else\n      this.location_href(url, window);\n  };\n\n  this.goto_url = function(action, query, lock)\n  {\n    this.redirect(this.url(action, query));\n  };\n\n  this.location_href = function(url, target, frame)\n  {\n    if (frame)\n      this.lock_frame();\n\n    if (typeof url == 'object')\n      url = this.env.comm_path + '&' + $.param(url);\n\n    // simulate real link click to force IE to send referer header\n    if (bw.ie && target == window)\n      $('<a>').attr('href', url).appendTo(document.body).get(0).click();\n    else\n      target.location.href = url;\n  };\n\n  // send a http request to the server\n  this.http_request = function(action, query, lock)\n  {\n    var url = this.url(action, query);\n\n    // trigger plugin hook\n    var result = this.triggerEvent('request'+action, query);\n\n    if (result !== undefined) {\n      // abort if one the handlers returned false\n      if (result === false)\n        return false;\n      else\n        query = result;\n    }\n\n    url += '&_remote=1';\n\n    // send request\n    this.log('HTTP GET: ' + url);\n\n    return $.ajax({\n      type: 'GET', url: url, data: { _unlock:(lock?lock:0) }, dataType: 'json',\n      success: function(data){ ref.http_response(data); },\n      error: function(o, status, err) { ref.http_error(o, status, err, lock, action); }\n    });\n  };\n\n  // send a http POST request to the server\n  this.http_post = function(action, postdata, lock)\n  {\n    var url = this.url(action);\n\n    if (postdata && typeof postdata === 'object') {\n      postdata._remote = 1;\n      postdata._unlock = (lock ? lock : 0);\n    }\n    else\n      postdata += (postdata ? '&' : '') + '_remote=1' + (lock ? '&_unlock='+lock : '');\n\n    // trigger plugin hook\n    var result = this.triggerEvent('request'+action, postdata);\n    if (result !== undefined) {\n      // abort if one the handlers returned false\n      if (result === false)\n        return false;\n      else\n        postdata = result;\n    }\n\n    // send request\n    this.log('HTTP POST: ' + url);\n\n    return $.ajax({\n      type: 'POST', url: url, data: postdata, dataType: 'json',\n      success: function(data){ ref.http_response(data); },\n      error: function(o, status, err) { ref.http_error(o, status, err, lock, action); }\n    });\n  };\n\n  // aborts ajax request\n  this.abort_request = function(r)\n  {\n    if (r.request)\n      r.request.abort();\n    if (r.lock)\n      this.set_busy(false, null, r.lock);\n  };\n\n  // handle HTTP response\n  this.http_response = function(response)\n  {\n    if (!response)\n      return;\n\n    if (response.unlock)\n      this.set_busy(false);\n\n    this.triggerEvent('responsebefore', {response: response});\n    this.triggerEvent('responsebefore'+response.action, {response: response});\n\n    // set env vars\n    if (response.env)\n      this.set_env(response.env);\n\n    // we have labels to add\n    if (typeof response.texts === 'object') {\n      for (var name in response.texts)\n        if (typeof response.texts[name] === 'string')\n          this.add_label(name, response.texts[name]);\n    }\n\n    // if we get javascript code from server -> execute it\n    if (response.exec) {\n      this.log(response.exec);\n      eval(response.exec);\n    }\n\n    // execute callback functions of plugins\n    if (response.callbacks && response.callbacks.length) {\n      for (var i=0; i < response.callbacks.length; i++)\n        this.triggerEvent(response.callbacks[i][0], response.callbacks[i][1]);\n    }\n\n    // process the response data according to the sent action\n    switch (response.action) {\n      case 'delete':\n        if (this.task == 'addressbook') {\n          var sid, uid = this.contact_list.get_selection(), writable = false;\n\n          if (uid && this.contact_list.rows[uid]) {\n            // search results, get source ID from record ID\n            if (this.env.source == '') {\n              sid = String(uid).replace(/^[^-]+-/, '');\n              writable = sid && this.env.address_sources[sid] && !this.env.address_sources[sid].readonly;\n            }\n            else {\n              writable = !this.env.address_sources[this.env.source].readonly;\n            }\n          }\n          this.enable_command('compose', (uid && this.contact_list.rows[uid]));\n          this.enable_command('delete', 'edit', writable);\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n        }\n\n      case 'moveto':\n        if (this.env.action == 'show') {\n          // re-enable commands on move/delete error\n          this.enable_command(this.env.message_commands, true);\n          if (!this.env.list_post)\n            this.enable_command('reply-list', false);\n        }\n        else if (this.task == 'addressbook') {\n          this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n        }\n\n      case 'purge':\n      case 'expunge':\n        if (this.task == 'mail') {\n          if (!this.env.messagecount) {\n            // clear preview pane content\n            if (this.env.contentframe)\n              this.show_contentframe(false);\n            // disable commands useless when mailbox is empty\n            this.enable_command(this.env.message_commands, 'purge', 'expunge',\n              'select-all', 'select-none', 'sort', 'expand-all', 'expand-unread', 'collapse-all', false);\n          }\n          if (this.message_list)\n            this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:this.message_list.rowcount });\n        }\n        break;\n\n      case 'check-recent':\n      case 'getunread':\n      case 'search':\n        this.env.qsearch = null;\n      case 'list':\n        if (this.task == 'mail') {\n          this.enable_command('show', 'expunge', 'select-all', 'select-none', 'sort', (this.env.messagecount > 0));\n          this.enable_command('purge', this.purge_mailbox_test());\n          this.enable_command('expand-all', 'expand-unread', 'collapse-all', this.env.threading && this.env.messagecount);\n\n          if ((response.action == 'list' || response.action == 'search') && this.message_list) {\n            this.msglist_select(this.message_list);\n            this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:this.message_list.rowcount });\n          }\n        }\n        else if (this.task == 'addressbook') {\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n\n          if (response.action == 'list' || response.action == 'search') {\n            this.enable_command('search-create', this.env.source == '');\n            this.enable_command('search-delete', this.env.search_id);\n            this.update_group_commands();\n            this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n          }\n        }\n        break;\n    }\n\n    if (response.unlock)\n      this.hide_message(response.unlock);\n\n    this.triggerEvent('responseafter', {response: response});\n    this.triggerEvent('responseafter'+response.action, {response: response});\n  };\n\n  // handle HTTP request errors\n  this.http_error = function(request, status, err, lock, action)\n  {\n    var errmsg = request.statusText;\n\n    this.set_busy(false, null, lock);\n    request.abort();\n\n    // don't display error message on page unload (#1488547)\n    if (this.unload)\n      return;\n\n    if (request.status && errmsg)\n      this.display_message(this.get_label('servererror') + ' (' + errmsg + ')', 'error');\n    else if (status == 'timeout')\n      this.display_message(this.get_label('requesttimedout'), 'error');\n    else if (request.status == 0 && status != 'abort')\n      this.display_message(this.get_label('servererror') + ' (No connection)', 'error');\n\n    // re-send keep-alive requests after 30 seconds\n    if (action == 'keep-alive')\n      setTimeout(function(){ ref.keep_alive(); }, 30000);\n    else if (action == 'check-recent')\n      setTimeout(function(){ ref.check_for_recent(false); }, 30000);\n  };\n\n  // post the given form to a hidden iframe\n  this.async_upload_form = function(form, action, onload)\n  {\n    var ts = new Date().getTime(),\n      frame_name = 'rcmupload'+ts;\n\n    // upload progress support\n    if (this.env.upload_progress_name) {\n      var fname = this.env.upload_progress_name,\n        field = $('input[name='+fname+']', form);\n\n      if (!field.length) {\n        field = $('<input>').attr({type: 'hidden', name: fname});\n        field.prependTo(form);\n      }\n\n      field.val(ts);\n    }\n\n    // have to do it this way for IE\n    // otherwise the form will be posted to a new window\n    if (document.all) {\n      var html = '<iframe name=\"'+frame_name+'\" src=\"program/resources/blank.gif\" style=\"width:0;height:0;visibility:hidden;\"></iframe>';\n      document.body.insertAdjacentHTML('BeforeEnd', html);\n    }\n    else { // for standards-compilant browsers\n      var frame = document.createElement('iframe');\n      frame.name = frame_name;\n      frame.style.border = 'none';\n      frame.style.width = 0;\n      frame.style.height = 0;\n      frame.style.visibility = 'hidden';\n      document.body.appendChild(frame);\n    }\n\n    // handle upload errors, parsing iframe content in onload\n    $(frame_name).bind('load', {ts:ts}, onload);\n\n    $(form).attr({\n        target: frame_name,\n        action: this.url(action, { _id:this.env.compose_id||'', _uploadid:ts }),\n        method: 'POST'})\n      .attr(form.encoding ? 'encoding' : 'enctype', 'multipart/form-data')\n      .submit();\n\n    return frame_name;\n  };\n\n  // html5 file-drop API\n  this.document_drag_hover = function(e, over)\n  {\n    e.preventDefault();\n    $(ref.gui_objects.filedrop)[(over?'addClass':'removeClass')]('active');\n  };\n\n  this.file_drag_hover = function(e, over)\n  {\n    e.preventDefault();\n    e.stopPropagation();\n    $(ref.gui_objects.filedrop)[(over?'addClass':'removeClass')]('hover');\n  };\n\n  // handler when files are dropped to a designated area.\n  // compose a multipart form data and submit it to the server\n  this.file_dropped = function(e)\n  {\n    // abort event and reset UI\n    this.file_drag_hover(e, false);\n\n    // prepare multipart form data composition\n    var files = e.target.files || e.dataTransfer.files,\n      formdata = window.FormData ? new FormData() : null,\n      fieldname = (this.env.filedrop.fieldname || '_file') + (this.env.filedrop.single ? '' : '[]'),\n      boundary = '------multipartformboundary' + (new Date).getTime(),\n      dashdash = '--', crlf = '\\r\\n',\n      multipart = dashdash + boundary + crlf;\n\n    if (!files || !files.length)\n      return;\n\n    // inline function to submit the files to the server\n    var submit_data = function() {\n      var multiple = files.length > 1,\n        ts = new Date().getTime(),\n        content = '<span>' + (multiple ? ref.get_label('uploadingmany') : files[0].name) + '</span>';\n\n      // add to attachments list\n      if (!ref.add2attachment_list(ts, { name:'', html:content, classname:'uploading', complete:false }))\n        ref.file_upload_id = ref.set_busy(true, 'uploading');\n\n      // complete multipart content and post request\n      multipart += dashdash + boundary + dashdash + crlf;\n\n      $.ajax({\n        type: 'POST',\n        dataType: 'json',\n        url: ref.url(ref.env.filedrop.action||'upload', { _id:ref.env.compose_id||ref.env.cid||'', _uploadid:ts, _remote:1 }),\n        contentType: formdata ? false : 'multipart/form-data; boundary=' + boundary,\n        processData: false,\n        data: formdata || multipart,\n        headers: {'X-Roundcube-Request': ref.env.request_token},\n        beforeSend: function(xhr, s) { if (!formdata && xhr.sendAsBinary) xhr.send = xhr.sendAsBinary; },\n        success: function(data){ ref.http_response(data); },\n        error: function(o, status, err) { ref.http_error(o, status, err, null, 'attachment'); }\n      });\n    };\n\n    // get contents of all dropped files\n    var last = this.env.filedrop.single ? 0 : files.length - 1;\n    for (var j=0, i=0, f; j <= last && (f = files[i]); i++) {\n      if (!f.name) f.name = f.fileName;\n      if (!f.size) f.size = f.fileSize;\n      if (!f.type) f.type = 'application/octet-stream';\n\n      // file name contains non-ASCII characters, do UTF8-binary string conversion.\n      if (!formdata && /[^\\x20-\\x7E]/.test(f.name))\n        f.name_bin = unescape(encodeURIComponent(f.name));\n\n      // filter by file type if requested\n      if (this.env.filedrop.filter && !f.type.match(new RegExp(this.env.filedrop.filter))) {\n        // TODO: show message to user\n        continue;\n      }\n\n      // do it the easy way with FormData (FF 4+, Chrome 5+, Safari 5+)\n      if (formdata) {\n        formdata.append(fieldname, f);\n        if (j == last)\n          return submit_data();\n      }\n      // use FileReader supporetd by Firefox 3.6\n      else if (window.FileReader) {\n        var reader = new FileReader();\n\n        // closure to pass file properties to async callback function\n        reader.onload = (function(file, j) {\n          return function(e) {\n            multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n            multipart += '; filename=\"' + (f.name_bin || file.name) + '\"' + crlf;\n            multipart += 'Content-Length: ' + file.size + crlf;\n            multipart += 'Content-Type: ' + file.type + crlf + crlf;\n            multipart += e.target.result + crlf;\n            multipart += dashdash + boundary + crlf;\n\n            if (j == last)  // we're done, submit the data\n              return submit_data();\n          }\n        })(f,j);\n        reader.readAsBinaryString(f);\n      }\n      // Firefox 3\n      else if (f.getAsBinary) {\n        multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n        multipart += '; filename=\"' + (f.name_bin || f.name) + '\"' + crlf;\n        multipart += 'Content-Length: ' + f.size + crlf;\n        multipart += 'Content-Type: ' + f.type + crlf + crlf;\n        multipart += f.getAsBinary() + crlf;\n        multipart += dashdash + boundary +crlf;\n\n        if (j == last)\n          return submit_data();\n      }\n\n      j++;\n    }\n  };\n\n\n  // starts interval for keep-alive/check-recent signal\n  this.start_keepalive = function()\n  {\n    if (!this.env.keep_alive || this.env.framed)\n      return;\n\n    if (this._int)\n      clearInterval(this._int);\n\n    if (this.task == 'mail' && this.gui_objects.mailboxlist)\n      this._int = setInterval(function(){ ref.check_for_recent(false); }, this.env.keep_alive * 1000);\n    else if (this.task != 'login' && this.env.action != 'print')\n      this._int = setInterval(function(){ ref.keep_alive(); }, this.env.keep_alive * 1000);\n  };\n\n  // sends keep-alive signal\n  this.keep_alive = function()\n  {\n    if (!this.busy)\n      this.http_request('keep-alive');\n  };\n\n  // sends request to check for recent messages\n  this.check_for_recent = function(refresh)\n  {\n    if (this.busy)\n      return;\n\n    var lock, url = {_mbox: this.env.mailbox};\n\n    if (refresh) {\n      lock = this.set_busy(true, 'checkingmail');\n      url._refresh = 1;\n      // reset check-recent interval\n      this.start_keepalive();\n    }\n\n    if (this.gui_objects.messagelist)\n      url._list = 1;\n    if (this.gui_objects.quotadisplay)\n      url._quota = 1;\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.http_request('check-recent', url, lock);\n  };\n\n\n  /********************************************************/\n  /*********            helper methods            *********/\n  /********************************************************/\n\n  // check if we're in show mode or if we have a unique selection\n  // and return the message uid\n  this.get_single_uid = function()\n  {\n    return this.env.uid ? this.env.uid : (this.message_list ? this.message_list.get_single_selection() : null);\n  };\n\n  // same as above but for contacts\n  this.get_single_cid = function()\n  {\n    return this.env.cid ? this.env.cid : (this.contact_list ? this.contact_list.get_single_selection() : null);\n  };\n\n  // gets cursor position\n  this.get_caret_pos = function(obj)\n  {\n    if (obj.selectionEnd !== undefined)\n      return obj.selectionEnd;\n    else if (document.selection && document.selection.createRange) {\n      var range = document.selection.createRange();\n      if (range.parentElement() != obj)\n        return 0;\n\n      var gm = range.duplicate();\n      if (obj.tagName == 'TEXTAREA')\n        gm.moveToElementText(obj);\n      else\n        gm.expand('textedit');\n\n      gm.setEndPoint('EndToStart', range);\n      var p = gm.text.length;\n\n      return p<=obj.value.length ? p : -1;\n    }\n    else\n      return obj.value.length;\n  };\n\n  // moves cursor to specified position\n  this.set_caret_pos = function(obj, pos)\n  {\n    if (obj.setSelectionRange)\n      obj.setSelectionRange(pos, pos);\n    else if (obj.createTextRange) {\n      var range = obj.createTextRange();\n      range.collapse(true);\n      range.moveEnd('character', pos);\n      range.moveStart('character', pos);\n      range.select();\n    }\n  };\n\n  // disable/enable all fields of a form\n  this.lock_form = function(form, lock)\n  {\n    if (!form || !form.elements)\n      return;\n\n    var n, len, elm;\n\n    if (lock)\n      this.disabled_form_elements = [];\n\n    for (n=0, len=form.elements.length; n<len; n++) {\n      elm = form.elements[n];\n\n      if (elm.type == 'hidden')\n        continue;\n      // remember which elem was disabled before lock\n      if (lock && elm.disabled)\n        this.disabled_form_elements.push(elm);\n      // check this.disabled_form_elements before inArray() as a workaround for FF5 bug\n      // http://bugs.jquery.com/ticket/9873\n      else if (lock || (this.disabled_form_elements && $.inArray(elm, this.disabled_form_elements)<0))\n        elm.disabled = lock;\n    }\n  };\n\n  this.mailto_handler_uri = function()\n  {\n    return location.href.split('?')[0] + '?_task=mail&_action=compose&_to=%s';\n  };\n\n  this.register_protocol_handler = function(name)\n  {\n    try {\n      window.navigator.registerProtocolHandler('mailto', this.mailto_handler_uri(), name);\n    }\n    catch(e) {};\n  };\n\n  this.check_protocol_handler = function(name, elem)\n  {\n    var nav = window.navigator;\n    if (!nav\n      || (typeof nav.registerProtocolHandler != 'function')\n      || ((typeof nav.isProtocolHandlerRegistered == 'function')\n        && nav.isProtocolHandlerRegistered('mailto', this.mailto_handler_uri()) == 'registered')\n    )\n      $(elem).addClass('disabled');\n    else\n      $(elem).click(function() { rcmail.register_protocol_handler(name); return false; });\n  };\n\n  // Checks browser capabilities eg. PDF support, TIF support\n  this.browser_capabilities_check = function()\n  {\n    if (!this.env.browser_capabilities)\n      this.env.browser_capabilities = {};\n\n    if (this.env.browser_capabilities.pdf === undefined)\n      this.env.browser_capabilities.pdf = this.pdf_support_check();\n\n    if (this.env.browser_capabilities.flash === undefined)\n      this.env.browser_capabilities.flash = this.flash_support_check();\n\n    if (this.env.browser_capabilities.tif === undefined)\n      this.tif_support_check();\n  };\n\n  // Returns browser capabilities string\n  this.browser_capabilities = function()\n  {\n    if (!this.env.browser_capabilities)\n      return '';\n\n    var n, ret = [];\n\n    for (n in this.env.browser_capabilities)\n      ret.push(n + '=' + this.env.browser_capabilities[n]);\n\n    return ret.join();\n  };\n\n  this.tif_support_check = function()\n  {\n    var img = new Image();\n\n    img.onload = function() { rcmail.env.browser_capabilities.tif = 1; };\n    img.onerror = function() { rcmail.env.browser_capabilities.tif = 0; };\n    img.src = 'program/resources/blank.tif';\n  };\n\n  this.pdf_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/pdf\"] : {},\n      plugins = navigator.plugins,\n      len = plugins.length,\n      regex = /Adobe Reader|PDF|Acrobat/i;\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if (window.ActiveXObject) {\n      try {\n        if (axObj = new ActiveXObject(\"AcroPDF.PDF\"))\n          return 1;\n      }\n      catch (e) {}\n      try {\n        if (axObj = new ActiveXObject(\"PDF.PdfCtrl\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    for (i=0; i<len; i++) {\n      plugin = plugins[i];\n      if (typeof plugin === 'String') {\n        if (regex.test(plugin))\n          return 1;\n      }\n      else if (plugin.name && regex.test(plugin.name))\n        return 1;\n    }\n\n    return 0;\n  };\n\n  this.flash_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/x-shockwave-flash\"] : {};\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if (window.ActiveXObject) {\n      try {\n        if (axObj = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    return 0;\n  };\n\n}  // end object rcube_webmail\n\n\n// some static methods\nrcube_webmail.long_subject_title = function(elem, indent)\n{\n  if (!elem.title) {\n    var $elem = $(elem);\n    if ($elem.width() + indent * 15 > $elem.parent().width())\n      elem.title = $elem.html();\n  }\n};\n\nrcube_webmail.long_subject_title_ie = function(elem, indent)\n{\n  if (!elem.title) {\n    var $elem = $(elem),\n      txt = $.trim($elem.text()),\n      tmp = $('<span>').text(txt)\n        .css({'position': 'absolute', 'float': 'left', 'visibility': 'hidden',\n          'font-size': $elem.css('font-size'), 'font-weight': $elem.css('font-weight')})\n        .appendTo($('body')),\n      w = tmp.width();\n\n    tmp.remove();\n    if (w + indent * 15 > $elem.width())\n      elem.title = txt;\n  }\n};\n\n// copy event engine prototype\nrcube_webmail.prototype.addEventListener = rcube_event_engine.prototype.addEventListener;\nrcube_webmail.prototype.removeEventListener = rcube_event_engine.prototype.removeEventListener;\nrcube_webmail.prototype.triggerEvent = rcube_event_engine.prototype.triggerEvent;\n", "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | program/steps/mail/compose.inc                                        |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2012, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Compose a new mail message with all headers and attachments         |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n// define constants for message compose mode\ndefine('RCUBE_COMPOSE_REPLY', 0x0106);\ndefine('RCUBE_COMPOSE_FORWARD', 0x0107);\ndefine('RCUBE_COMPOSE_DRAFT', 0x0108);\ndefine('RCUBE_COMPOSE_EDIT', 0x0109);\n\n$MESSAGE_FORM = null;\n$COMPOSE_ID   = get_input_value('_id', RCUBE_INPUT_GET);\n$COMPOSE      = null;\n\nif ($COMPOSE_ID && $_SESSION['compose_data_'.$COMPOSE_ID])\n  $COMPOSE =& $_SESSION['compose_data_'.$COMPOSE_ID];\n\n// give replicated session storage some time to synchronize\n$retries = 0;\nwhile ($COMPOSE_ID && !is_array($COMPOSE) && $RCMAIL->db->is_replicated() && $retries++ < 5) {\n  usleep(500000);\n  $RCMAIL->session->reload();\n  if ($_SESSION['compose_data_'.$COMPOSE_ID])\n    $COMPOSE =& $_SESSION['compose_data_'.$COMPOSE_ID];\n}\n\n// Nothing below is called during message composition, only at \"new/forward/reply/draft\" initialization or\n// if a compose-ID is given (i.e. when the compose step is opened in a new window/tab).\nif (!is_array($COMPOSE))\n{\n  // Infinite redirect prevention in case of broken session (#1487028)\n  if ($COMPOSE_ID)\n    raise_error(array('code' => 500, 'type' => 'php',\n      'file' => __FILE__, 'line' => __LINE__,\n      'message' => \"Invalid compose ID\"), true, true);\n\n  $COMPOSE_ID = uniqid(mt_rand());\n  $_SESSION['compose_data_'.$COMPOSE_ID] = array(\n    'id'      => $COMPOSE_ID,\n    'param'   => request2param(RCUBE_INPUT_GET),\n    'mailbox' => $RCMAIL->storage->get_folder(),\n  );\n  $COMPOSE =& $_SESSION['compose_data_'.$COMPOSE_ID];\n\n  // process values like \"mailto:foo@bar.com?subject=new+message&cc=another\"\n  if ($COMPOSE['param']['to']) {\n    // #1486037: remove \"mailto:\" prefix\n    $COMPOSE['param']['to'] = preg_replace('/^mailto:/i', '', $COMPOSE['param']['to']);\n    $mailto = explode('?', $COMPOSE['param']['to']);\n    if (count($mailto) > 1) {\n      $COMPOSE['param']['to'] = $mailto[0];\n      parse_str($mailto[1], $query);\n      foreach ($query as $f => $val)\n        $COMPOSE['param'][$f] = $val;\n    }\n  }\n\n  // select folder where to save the sent message\n  $COMPOSE['param']['sent_mbox'] = $RCMAIL->config->get('sent_mbox');\n\n  // pipe compose parameters thru plugins\n  $plugin = $RCMAIL->plugins->exec_hook('message_compose', $COMPOSE);\n  $COMPOSE['param'] = array_merge($COMPOSE['param'], $plugin['param']);\n\n  // add attachments listed by message_compose hook\n  if (is_array($plugin['attachments'])) {\n    foreach ($plugin['attachments'] as $attach) {\n      // we have structured data\n      if (is_array($attach)) {\n        $attachment = $attach;\n      }\n      // only a file path is given\n      else {\n        $filename = basename($attach);\n        $attachment = array(\n          'group' => $COMPOSE_ID,\n          'name' => $filename,\n          'mimetype' => rc_mime_content_type($attach, $filename),\n          'path' => $attach,\n        );\n      }\n\n      // save attachment if valid\n      if (($attachment['data'] && $attachment['name']) || ($attachment['path'] && file_exists($attachment['path']))) {\n        $attachment = rcmail::get_instance()->plugins->exec_hook('attachment_save', $attachment);\n      }\n\n      if ($attachment['status'] && !$attachment['abort']) {\n        unset($attachment['data'], $attachment['status'], $attachment['abort']);\n        $COMPOSE['attachments'][$attachment['id']] = $attachment;\n      }\n    }\n  }\n\n  // check if folder for saving sent messages exists and is subscribed (#1486802)\n  if ($sent_folder = $COMPOSE['param']['sent_mbox']) {\n    rcmail_check_sent_folder($sent_folder, true);\n  }\n\n  // redirect to a unique URL with all parameters stored in session\n  $OUTPUT->redirect(array(\n    '_action' => 'compose',\n    '_id'     => $COMPOSE['id'],\n    '_search' => $_REQUEST['_search'],\n  ));\n}\n\n\n// add some labels to client\n$OUTPUT->add_label('nosubject', 'nosenderwarning', 'norecipientwarning', 'nosubjectwarning', 'cancel',\n    'nobodywarning', 'notsentwarning', 'notuploadedwarning', 'savingmessage', 'sendingmessage', \n    'messagesaved', 'converting', 'editorwarning', 'searching', 'uploading', 'uploadingmany',\n    'fileuploaderror', 'sendmessage');\n\n$OUTPUT->set_env('compose_id', $COMPOSE['id']);\n\n// add config parameters to client script\nif (!empty($CONFIG['drafts_mbox'])) {\n  $OUTPUT->set_env('drafts_mailbox', $CONFIG['drafts_mbox']);\n  $OUTPUT->set_env('draft_autosave', $CONFIG['draft_autosave']);\n}\n// set current mailbox in client environment\n$OUTPUT->set_env('mailbox', $RCMAIL->storage->get_folder());\n$OUTPUT->set_env('sig_above', $RCMAIL->config->get('sig_above', false));\n$OUTPUT->set_env('top_posting', $RCMAIL->config->get('top_posting', false));\n$OUTPUT->set_env('recipients_separator', trim($RCMAIL->config->get('recipients_separator', ',')));\n\n// default font for HTML editor\n$font = rcube_fontdefs($RCMAIL->config->get('default_font', 'Verdana'));\nif ($font && !is_array($font)) {\n  $OUTPUT->set_env('default_font', $font);\n}\n\n// get reference message and set compose mode\nif ($msg_uid = $COMPOSE['param']['draft_uid']) {\n  $RCMAIL->storage->set_folder($CONFIG['drafts_mbox']);\n  $compose_mode = RCUBE_COMPOSE_DRAFT;\n}\nelse if ($msg_uid = $COMPOSE['param']['reply_uid'])\n  $compose_mode = RCUBE_COMPOSE_REPLY;\nelse if ($msg_uid = $COMPOSE['param']['forward_uid'])\n  $compose_mode = RCUBE_COMPOSE_FORWARD;\nelse if ($msg_uid = $COMPOSE['param']['uid'])\n  $compose_mode = RCUBE_COMPOSE_EDIT;\n\n$config_show_sig = $RCMAIL->config->get('show_sig', 1);\nif ($config_show_sig == 1)\n  $OUTPUT->set_env('show_sig', true);\nelse if ($config_show_sig == 2 && (empty($compose_mode) || $compose_mode == RCUBE_COMPOSE_EDIT || $compose_mode == RCUBE_COMPOSE_DRAFT))\n  $OUTPUT->set_env('show_sig', true);\nelse if ($config_show_sig == 3 && ($compose_mode == RCUBE_COMPOSE_REPLY || $compose_mode == RCUBE_COMPOSE_FORWARD))\n  $OUTPUT->set_env('show_sig', true);\nelse\n  $OUTPUT->set_env('show_sig', false);\n\n// set line length for body wrapping\n$LINE_LENGTH = $RCMAIL->config->get('line_length', 72);\n\nif (!empty($msg_uid))\n{\n  // similar as in program/steps/mail/show.inc\n  // re-set 'prefer_html' to have possibility to use html part for compose\n  $CONFIG['prefer_html'] = $CONFIG['prefer_html'] || $CONFIG['htmleditor'] || $compose_mode == RCUBE_COMPOSE_DRAFT || $compose_mode == RCUBE_COMPOSE_EDIT;\n  $MESSAGE = new rcube_message($msg_uid);\n\n  // make sure message is marked as read\n  if ($MESSAGE->headers && empty($MESSAGE->headers->flags['SEEN']))\n    $RCMAIL->storage->set_flag($msg_uid, 'SEEN');\n\n  if (!empty($MESSAGE->headers->charset))\n    $RCMAIL->storage->set_charset($MESSAGE->headers->charset);\n\n  if ($compose_mode == RCUBE_COMPOSE_REPLY)\n  {\n    $COMPOSE['reply_uid'] = $msg_uid;\n    $COMPOSE['reply_msgid'] = $MESSAGE->headers->messageID;\n    $COMPOSE['references']  = trim($MESSAGE->headers->references . \" \" . $MESSAGE->headers->messageID);\n\n    if (!empty($COMPOSE['param']['all']))\n      $MESSAGE->reply_all = $COMPOSE['param']['all'];\n\n    $OUTPUT->set_env('compose_mode', 'reply');\n\n    // Save the sent message in the same folder of the message being replied to\n    if ($RCMAIL->config->get('reply_same_folder') && ($sent_folder = $COMPOSE['mailbox'])\n      && rcmail_check_sent_folder($sent_folder, false)\n    ) {\n      $COMPOSE['param']['sent_mbox'] = $sent_folder;\n    }\n  }\n  else if ($compose_mode == RCUBE_COMPOSE_DRAFT)\n  {\n    if ($MESSAGE->headers->others['x-draft-info'])\n    {\n      // get reply_uid/forward_uid to flag the original message when sending\n      $info = rcmail_draftinfo_decode($MESSAGE->headers->others['x-draft-info']);\n\n      if ($info['type'] == 'reply')\n        $COMPOSE['reply_uid'] = $info['uid'];\n      else if ($info['type'] == 'forward')\n        $COMPOSE['forward_uid'] = $info['uid'];\n\n      $COMPOSE['mailbox'] = $info['folder'];\n\n      // Save the sent message in the same folder of the message being replied to\n      if ($RCMAIL->config->get('reply_same_folder') && ($sent_folder = $info['folder'])\n        && rcmail_check_sent_folder($sent_folder, false)\n      ) {\n        $COMPOSE['param']['sent_mbox'] = $sent_folder;\n      }\n    }\n\n    if ($MESSAGE->headers->in_reply_to)\n      $COMPOSE['reply_msgid'] = '<'.$MESSAGE->headers->in_reply_to.'>';\n\n    $COMPOSE['references']  = $MESSAGE->headers->references;\n  }\n  else if ($compose_mode == RCUBE_COMPOSE_FORWARD)\n  {\n    $COMPOSE['forward_uid'] = $msg_uid;\n    $OUTPUT->set_env('compose_mode', 'forward');\n\n    if (!empty($COMPOSE['param']['attachment']))\n      $MESSAGE->forward_attachment = true;\n  }\n}\nelse {\n  $MESSAGE = new stdClass();\n}\n\n$MESSAGE->compose = array();\n\n// get user's identities\n$MESSAGE->identities = $RCMAIL->user->list_identities();\nif (count($MESSAGE->identities))\n{\n  foreach ($MESSAGE->identities as $idx => $ident) {\n    $email = mb_strtolower(rcube_idn_to_utf8($ident['email']));\n\n    $MESSAGE->identities[$idx]['email_ascii'] = $ident['email'];\n    $MESSAGE->identities[$idx]['ident']       = format_email_recipient($ident['email'], $ident['name']);\n    $MESSAGE->identities[$idx]['email']       = $email;\n  }\n}\n\n// Set From field value\nif (!empty($_POST['_from'])) {\n  $MESSAGE->compose['from'] = get_input_value('_from', RCUBE_INPUT_POST);\n}\nelse if (!empty($COMPOSE['param']['from'])) {\n  $MESSAGE->compose['from'] = $COMPOSE['param']['from'];\n}\nelse if (count($MESSAGE->identities)) {\n  $a_recipients = array();\n  $a_names      = array();\n\n  // extract all recipients of the reply-message\n  if (is_object($MESSAGE->headers) && in_array($compose_mode, array(RCUBE_COMPOSE_REPLY, RCUBE_COMPOSE_FORWARD)))\n  {\n    $a_to = rcube_mime::decode_address_list($MESSAGE->headers->to, null, true, $MESSAGE->headers->charset);\n    foreach ($a_to as $addr) {\n      if (!empty($addr['mailto'])) {\n        $a_recipients[] = strtolower($addr['mailto']);\n        $a_names[]      = $addr['name'];\n      }\n    }\n\n    if (!empty($MESSAGE->headers->cc)) {\n      $a_cc = rcube_mime::decode_address_list($MESSAGE->headers->cc, null, true, $MESSAGE->headers->charset);\n      foreach ($a_cc as $addr) {\n        if (!empty($addr['mailto'])) {\n          $a_recipients[] = strtolower($addr['mailto']);\n          $a_names[]      = $addr['name'];\n        }\n      }\n    }\n  }\n\n  $from_idx         = null;\n  $default_identity = null;\n  $return_path      = $MESSAGE->headers->others['return-path'];\n\n  // Select identity\n  foreach ($MESSAGE->identities as $idx => $ident) {\n    // save default identity ID\n    if ($ident['standard']) {\n      $default_identity = $idx;\n    }\n\n    // use From header\n    if (in_array($compose_mode, array(RCUBE_COMPOSE_DRAFT, RCUBE_COMPOSE_EDIT))) {\n      if ($MESSAGE->headers->from == $ident['ident']) {\n        $from_idx = $idx;\n        break;\n      }\n    }\n    // reply to yourself\n    else if ($compose_mode == RCUBE_COMPOSE_REPLY && $MESSAGE->headers->from == $ident['ident']) {\n      $from_idx = $idx;\n      break;\n    }\n    // use replied message recipients\n    else if (($found = array_search($ident['email_ascii'], $a_recipients)) !== false) {\n      // match identity name, prefer default identity\n      if ($from_idx === null || ($a_names[$found] && $ident['name'] && $a_names[$found] == $ident['name'])) {\n        $from_idx = $idx;\n      }\n    }\n  }\n\n  // Fallback using Return-Path\n  if ($from_idx === null && $return_path) {\n    foreach ($MESSAGE->identities as $idx => $ident) {\n      if (strpos($return_path, str_replace('@', '=', $ident['email_ascii']).'@') !== false) {\n        $from_idx = $idx;\n        break;\n      }\n    }\n  }\n\n  // Still no ID, use default/first identity\n  if ($from_idx === null) {\n    $from_idx = $default_identity !== null ? $default_identity : key(reset($MESSAGE->identities));\n  }\n\n  $ident   = $MESSAGE->identities[$from_idx];\n  $from_id = $ident['identity_id'];\n\n  $MESSAGE->compose['from_email'] = $ident['email'];\n  $MESSAGE->compose['from']       = $from_id;\n}\n\n// Set other headers\n$a_recipients = array();\n$parts        = array('to', 'cc', 'bcc', 'replyto', 'followupto');\n$separator    = trim($RCMAIL->config->get('recipients_separator', ',')) . ' ';\n\nforeach ($parts as $header) {\n  $fvalue = '';\n  $decode_header = true;\n\n  // we have a set of recipients stored is session\n  if ($header == 'to' && ($mailto_id = $COMPOSE['param']['mailto'])\n      && $_SESSION['mailto'][$mailto_id]\n  ) {\n    $fvalue = urldecode($_SESSION['mailto'][$mailto_id]);\n    $decode_header = false;\n\n    // make session to not grow up too much\n    unset($_SESSION['mailto'][$mailto_id]);\n    $COMPOSE['param']['to'] = $fvalue;\n  }\n  else if (!empty($_POST['_'.$header])) {\n    $fvalue = get_input_value('_'.$header, RCUBE_INPUT_POST, TRUE);\n  }\n  else if (!empty($COMPOSE['param'][$header])) {\n    $fvalue = $COMPOSE['param'][$header];\n  }\n  else if ($compose_mode == RCUBE_COMPOSE_REPLY) {\n    // get recipent address(es) out of the message headers\n    if ($header == 'to') {\n      $mailfollowup = $MESSAGE->headers->others['mail-followup-to'];\n      $mailreplyto  = $MESSAGE->headers->others['mail-reply-to'];\n\n      // Reply to mailing list...\n      if ($MESSAGE->reply_all == 'list' && $mailfollowup)\n        $fvalue = $mailfollowup;\n      else if ($MESSAGE->reply_all == 'list'\n        && preg_match('/<mailto:([^>]+)>/i', $MESSAGE->headers->others['list-post'], $m))\n        $fvalue = $m[1];\n      // Reply to...\n      else if ($MESSAGE->reply_all && $mailfollowup)\n        $fvalue = $mailfollowup;\n      else if ($mailreplyto)\n        $fvalue = $mailreplyto;\n      else if (!empty($MESSAGE->headers->replyto))\n        $fvalue = $MESSAGE->headers->replyto;\n      else if (!empty($MESSAGE->headers->from))\n        $fvalue = $MESSAGE->headers->from;\n\n      // Reply to message sent by yourself (#1487074)\n      if (!empty($ident) && $fvalue == $ident['ident']) {\n        $fvalue = $MESSAGE->headers->to;\n      }\n    }\n    // add recipient of original message if reply to all\n    else if ($header == 'cc' && !empty($MESSAGE->reply_all) && $MESSAGE->reply_all != 'list') {\n      if ($v = $MESSAGE->headers->to)\n        $fvalue .= $v;\n      if ($v = $MESSAGE->headers->cc)\n        $fvalue .= (!empty($fvalue) ? $separator : '') . $v;\n    }\n  }\n  else if (in_array($compose_mode, array(RCUBE_COMPOSE_DRAFT, RCUBE_COMPOSE_EDIT))) {\n    // get drafted headers\n    if ($header=='to' && !empty($MESSAGE->headers->to))\n      $fvalue = $MESSAGE->get_header('to');\n    else if ($header=='cc' && !empty($MESSAGE->headers->cc))\n      $fvalue = $MESSAGE->get_header('cc');\n    else if ($header=='bcc' && !empty($MESSAGE->headers->bcc))\n      $fvalue = $MESSAGE->get_header('bcc');\n    else if ($header=='replyto' && !empty($MESSAGE->headers->others['mail-reply-to']))\n      $fvalue = $MESSAGE->get_header('mail-reply-to');\n    else if ($header=='replyto' && !empty($MESSAGE->headers->replyto))\n      $fvalue = $MESSAGE->get_header('reply-to');\n    else if ($header=='followupto' && !empty($MESSAGE->headers->others['mail-followup-to']))\n      $fvalue = $MESSAGE->get_header('mail-followup-to');\n  }\n\n  // split recipients and put them back together in a unique way\n  if (!empty($fvalue) && in_array($header, array('to', 'cc', 'bcc'))) {\n    $to_addresses = rcube_mime::decode_address_list($fvalue, null, $decode_header, $MESSAGE->headers->charset);\n    $fvalue = array();\n\n    foreach ($to_addresses as $addr_part) {\n      if (empty($addr_part['mailto']))\n        continue;\n\n      $mailto = mb_strtolower(rcube_idn_to_utf8($addr_part['mailto']));\n\n      if (!in_array($mailto, $a_recipients)\n        && ($header == 'to' || empty($MESSAGE->compose['from_email']) || $mailto != $MESSAGE->compose['from_email'])\n      ) {\n        if ($addr_part['name'] && $addr_part['mailto'] != $addr_part['name'])\n          $string = format_email_recipient($mailto, $addr_part['name']);\n        else\n          $string = $mailto;\n\n        $fvalue[] = $string;\n        $a_recipients[] = $addr_part['mailto'];\n      }\n    }\n\n    $fvalue = implode($separator, $fvalue);\n  }\n\n  $MESSAGE->compose[$header] = $fvalue;\n}\nunset($a_recipients);\n\n// process $MESSAGE body/attachments, set $MESSAGE_BODY/$HTML_MODE vars and some session data\n$MESSAGE_BODY = rcmail_prepare_message_body();\n\n\n/****** compose mode functions ********/\n\nfunction rcmail_compose_headers($attrib)\n{\n  global $MESSAGE;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n\n  $out  = '';\n  $part = strtolower($attrib['part']);\n\n  switch ($part)\n  {\n    case 'from':\n      return $form_start . rcmail_compose_header_from($attrib);\n\n    case 'to':\n    case 'cc':\n    case 'bcc':\n      $fname = '_' . $part;\n      $header = $param = $part;\n\n      $allow_attrib = array('id', 'class', 'style', 'cols', 'rows', 'tabindex');\n      $field_type = 'html_textarea';\n      break;\n\n    case 'replyto':\n    case 'reply-to':\n      $fname = '_replyto';\n      $param = 'replyto';\n      $header = 'reply-to';\n\n    case 'followupto':\n    case 'followup-to':\n      if (!$fname) {\n        $fname = '_followupto';\n        $param = 'followupto';\n        $header = 'mail-followup-to';\n      }\n\n      $allow_attrib = array('id', 'class', 'style', 'size', 'tabindex');\n      $field_type = 'html_inputfield';\n      break;\n  }\n\n  if ($fname && $field_type)\n  {\n    // pass the following attributes to the form class\n    $field_attrib = array('name' => $fname, 'spellcheck' => 'false');\n    foreach ($attrib as $attr => $value)\n      if (in_array($attr, $allow_attrib))\n        $field_attrib[$attr] = $value;\n\n    // create teaxtarea object\n    $input = new $field_type($field_attrib);\n    $out = $input->show($MESSAGE->compose[$param]);\n  }\n\n  if ($form_start)\n    $out = $form_start.$out;\n\n  // configure autocompletion\n  rcube_autocomplete_init();\n\n  return $out;\n}\n\n\nfunction rcmail_compose_header_from($attrib)\n{\n  global $MESSAGE, $OUTPUT, $RCMAIL, $compose_mode;\n\n  // pass the following attributes to the form class\n  $field_attrib = array('name' => '_from');\n  foreach ($attrib as $attr => $value)\n    if (in_array($attr, array('id', 'class', 'style', 'size', 'tabindex')))\n      $field_attrib[$attr] = $value;\n\n  if (count($MESSAGE->identities))\n  {\n    $a_signatures = array();\n    $separator    = $RCMAIL->config->get('sig_above')\n      && ($compose_mode == RCUBE_COMPOSE_REPLY || $compose_mode == RCUBE_COMPOSE_FORWARD) ? '---' : '-- ';\n\n    $field_attrib['onchange'] = JS_OBJECT_NAME.\".change_identity(this)\";\n    $select_from = new html_select($field_attrib);\n\n    // create SELECT element\n    foreach ($MESSAGE->identities as $sql_arr)\n    {\n      $identity_id = $sql_arr['identity_id'];\n      $select_from->add(format_email_recipient($sql_arr['email'], $sql_arr['name']), $identity_id);\n\n      // add signature to array\n      if (!empty($sql_arr['signature']) && empty($COMPOSE['param']['nosig']))\n      {\n        $text = $html = $sql_arr['signature'];\n\n        if ($sql_arr['html_signature']) {\n            $h2t  = new html2text($sql_arr['signature'], false, false);\n            $text = trim($h2t->get_text());\n        }\n        else {\n            $html = htmlentities($html, ENT_NOQUOTES, RCMAIL_CHARSET);\n        }\n\n        if (!preg_match('/^--[ -]\\r?\\n/m', $text)) {\n            $text = $separator . \"\\n\" . $text;\n            $html = $separator . \"<br>\" . $html;\n        }\n\n        if (!$sql_arr['html_signature']) {\n            $html = \"<pre>\" . $html . \"</pre>\";\n        }\n\n        $a_signatures[$identity_id]['text'] = $text;\n        $a_signatures[$identity_id]['html'] = $html;\n      }\n    }\n\n    $out = $select_from->show($MESSAGE->compose['from']);\n\n    // add signatures to client\n    $OUTPUT->set_env('signatures', $a_signatures);\n  }\n  // no identities, display text input field\n  else {\n    $field_attrib['class'] = 'from_address';\n    $input_from = new html_inputfield($field_attrib);\n    $out = $input_from->show($MESSAGE->compose['from']);\n  }\n\n  return $out;\n}\n\n\nfunction rcmail_compose_editor_mode()\n{\n  global $RCMAIL, $MESSAGE, $compose_mode;\n  static $useHtml;\n\n  if ($useHtml !== null)\n    return $useHtml;\n\n  $html_editor = intval($RCMAIL->config->get('htmleditor'));\n\n  if ($compose_mode == RCUBE_COMPOSE_DRAFT || $compose_mode == RCUBE_COMPOSE_EDIT) {\n    $useHtml = $MESSAGE->has_html_part(false);\n  }\n  else if ($compose_mode == RCUBE_COMPOSE_REPLY) {\n    $useHtml = ($html_editor == 1 || ($html_editor == 2 && $MESSAGE->has_html_part(false)));\n  }\n  else { // RCUBE_COMPOSE_FORWARD or NEW\n    $useHtml = ($html_editor == 1);\n  }\n\n  return $useHtml;\n}\n\n\nfunction rcmail_prepare_message_body()\n{\n  global $RCMAIL, $MESSAGE, $COMPOSE, $compose_mode, $LINE_LENGTH, $HTML_MODE;\n\n  // use posted message body\n  if (!empty($_POST['_message'])) {\n    $body = get_input_value('_message', RCUBE_INPUT_POST, true);\n    $isHtml = (bool) get_input_value('_is_html', RCUBE_INPUT_POST);\n  }\n  else if ($COMPOSE['param']['body']) {\n    $body = $COMPOSE['param']['body'];\n    $isHtml = false;\n  }\n  // forward as attachment\n  else if ($compose_mode == RCUBE_COMPOSE_FORWARD && $MESSAGE->forward_attachment) {\n    $isHtml = rcmail_compose_editor_mode();\n    $body = '';\n    if (empty($COMPOSE['attachments']))\n      rcmail_write_forward_attachment($MESSAGE);\n  }\n  // reply/edit/draft/forward\n  else if ($compose_mode) {\n    $isHtml = rcmail_compose_editor_mode();\n\n    if (!empty($MESSAGE->parts)) {\n      foreach ($MESSAGE->parts as $part) {\n        // skip no-content and attachment parts (#1488557)\n        if ($part->type != 'content' || !$part->size || $MESSAGE->is_attachment($part)) {\n          continue;\n        }\n\n        if ($part_body = rcmail_compose_part_body($part, $isHtml)) {\n          $body .= ($body ? ($isHtml ? '<br/>' : \"\\n\") : '') . $part_body;\n        }\n      }\n    }\n    else {\n      $body = rcmail_compose_part_body($MESSAGE, $isHtml);\n    }\n\n    // compose reply-body\n    if ($compose_mode == RCUBE_COMPOSE_REPLY)\n      $body = rcmail_create_reply_body($body, $isHtml);\n    // forward message body inline\n    else if ($compose_mode == RCUBE_COMPOSE_FORWARD)\n      $body = rcmail_create_forward_body($body, $isHtml);\n    // load draft message body\n    else if ($compose_mode == RCUBE_COMPOSE_DRAFT || $compose_mode == RCUBE_COMPOSE_EDIT)\n      $body = rcmail_create_draft_body($body, $isHtml);\n  }\n  else { // new message\n    $isHtml = rcmail_compose_editor_mode();\n  }\n\n  $plugin = $RCMAIL->plugins->exec_hook('message_compose_body',\n    array('body' => $body, 'html' => $isHtml, 'mode' => $compose_mode));\n  $body = $plugin['body'];\n  unset($plugin);\n\n  // add blocked.gif attachment (#1486516)\n  if ($isHtml && preg_match('#<img src=\"\\./program/resources/blocked\\.gif\"#', $body)) {\n    if ($attachment = rcmail_save_image('program/resources/blocked.gif', 'image/gif')) {\n      $COMPOSE['attachments'][$attachment['id']] = $attachment;\n      $url = sprintf('%s&_id=%s&_action=display-attachment&_file=rcmfile%s',\n        $RCMAIL->comm_path, $COMPOSE['id'], $attachment['id']);\n      $body = preg_replace('#\\./program/resources/blocked\\.gif#', $url, $body);\n    }\n  }\n\n  $HTML_MODE = $isHtml;\n\n  return $body;\n}\n\nfunction rcmail_compose_part_body($part, $isHtml = false)\n{\n    global $RCMAIL, $MESSAGE, $compose_mode;\n\n    // Check if we have enough memory to handle the message in it\n    // #1487424: we need up to 10x more memory than the body\n    if (!rcmail_mem_check($part->size * 10)) {\n        return '';\n    }\n\n    if (empty($part->ctype_parameters) || empty($part->ctype_parameters['charset'])) {\n        $part->ctype_parameters['charset'] = $MESSAGE->headers->charset;\n    }\n\n    // fetch part if not available\n    if (!isset($part->body)) {\n        $part->body = $MESSAGE->get_part_content($part->mime_id);\n    }\n\n    // message is cached but not exists (#1485443), or other error\n    if ($part->body === false) {\n        return '';\n    }\n\n    $body = $part->body;\n\n    if ($isHtml) {\n        if ($part->ctype_secondary == 'html') {\n        }\n        else {\n            // try to remove the signature\n            if ($RCMAIL->config->get('strip_existing_sig', true)) {\n                $body = rcmail_remove_signature($body);\n            }\n            // add HTML formatting\n            $body = rcmail_plain_body($body);\n            if ($body) {\n                $body = '<pre>' . $body . '</pre>';\n            }\n        }\n    }\n    else {\n        if ($part->ctype_secondary == 'html') {\n            // use html part if it has been used for message (pre)viewing\n            // decrease line length for quoting\n            $len = $compose_mode == RCUBE_COMPOSE_REPLY ? $LINE_LENGTH-2 : $LINE_LENGTH;\n            $txt = new html2text($body, false, true, $len);\n            $body = $txt->get_text();\n        }\n        else {\n            if ($part->ctype_secondary == 'plain' && $part->ctype_parameters['format'] == 'flowed') {\n                $body = rcube_mime::unfold_flowed($body);\n            }\n\n            // try to remove the signature\n            if ($RCMAIL->config->get('strip_existing_sig', true)) {\n                $body = rcmail_remove_signature($body);\n            }\n        }\n    }\n\n    return $body;\n}\n\nfunction rcmail_compose_body($attrib)\n{\n  global $RCMAIL, $CONFIG, $OUTPUT, $MESSAGE, $compose_mode, $LINE_LENGTH, $HTML_MODE, $MESSAGE_BODY;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n  unset($attrib['form']);\n\n  if (empty($attrib['id']))\n    $attrib['id'] = 'rcmComposeBody';\n\n  $attrib['name'] = '_message';\n\n  $isHtml = $HTML_MODE;\n\n  $out = $form_start ? \"$form_start\\n\" : '';\n\n  $saveid = new html_hiddenfield(array('name' => '_draft_saveid', 'value' => $compose_mode==RCUBE_COMPOSE_DRAFT ? str_replace(array('<','>'), \"\", $MESSAGE->headers->messageID) : ''));\n  $out .= $saveid->show();\n\n  $drafttoggle = new html_hiddenfield(array('name' => '_draft', 'value' => 'yes'));\n  $out .= $drafttoggle->show();\n\n  $msgtype = new html_hiddenfield(array('name' => '_is_html', 'value' => ($isHtml?\"1\":\"0\")));\n  $out .= $msgtype->show();\n\n  // If desired, set this textarea to be editable by TinyMCE\n  if ($isHtml) {\n    $MESSAGE_BODY = htmlentities($MESSAGE_BODY, ENT_NOQUOTES, RCMAIL_CHARSET);\n    $attrib['class'] = 'mce_editor';\n    $attrib['is_escaped'] = true;\n    $textarea = new html_textarea($attrib);\n    $out .= $textarea->show($MESSAGE_BODY);\n  }\n  else {\n    $textarea = new html_textarea($attrib);\n    $out .= $textarea->show('');\n    // quote plain text, inject into textarea\n    $table = get_html_translation_table(HTML_SPECIALCHARS);\n    $MESSAGE_BODY = strtr($MESSAGE_BODY, $table);\n    $out = substr($out, 0, -11) . $MESSAGE_BODY . '</textarea>';\n  }\n\n  $out .= $form_end ? \"\\n$form_end\" : '';\n\n  $OUTPUT->set_env('composebody', $attrib['id']);\n\n  // include HTML editor\n  rcube_html_editor();\n\n  // Set language list\n  if (!empty($CONFIG['enable_spellcheck'])) {\n    $engine           = $RCMAIL->config->get('spellcheck_engine','googie');\n    $dictionary       = (bool) $RCMAIL->config->get('spellcheck_dictionary');\n    $spellcheck_langs = (array) $RCMAIL->config->get('spellcheck_languages',\n      array('da'=>'Dansk', 'de'=>'Deutsch', 'en' => 'English', 'es'=>'Espa\u00f1ol',\n            'fr'=>'Fran\u00e7ais', 'it'=>'Italiano', 'nl'=>'Nederlands', 'pl'=>'Polski',\n            'pt'=>'Portugu\u00eas', 'ru'=>'\u0420\u0443\u0441\u0441\u043a\u0438\u0439', 'fi'=>'Suomi', 'sv'=>'Svenska'));\n\n    // googie works only with two-letter codes\n    if ($engine == 'googie') {\n      $lang = strtolower(substr($_SESSION['language'], 0, 2));\n\n      $spellcheck_langs_googie = array();\n      foreach ($spellcheck_langs as $key => $name)\n        $spellcheck_langs_googie[strtolower(substr($key,0,2))] = $name;\n        $spellcheck_langs = $spellcheck_langs_googie;\n    }\n    else {\n      $lang = $_SESSION['language'];\n\n      // if not found in the list, try with two-letter code\n      if (!$spellcheck_langs[$lang])\n        $lang = strtolower(substr($lang, 0, 2));\n    }\n\n    if (!$spellcheck_langs[$lang])\n      $lang = 'en';\n\n    $OUTPUT->set_env('spell_langs', $spellcheck_langs);\n    $OUTPUT->set_env('spell_lang', $lang);\n\n    $editor_lang_set = array();\n    foreach ($spellcheck_langs as $key => $name) {\n      $editor_lang_set[] = ($key == $lang ? '+' : '') . JQ($name).'='.JQ($key);\n    }\n\n    // include GoogieSpell\n    $OUTPUT->include_script('googiespell.js');\n    $OUTPUT->add_script(sprintf(\n      \"var googie = new GoogieSpell('%s/images/googiespell/','%s&lang=', %s);\\n\".\n      \"googie.lang_chck_spell = \\\"%s\\\";\\n\".\n      \"googie.lang_rsm_edt = \\\"%s\\\";\\n\".\n      \"googie.lang_close = \\\"%s\\\";\\n\".\n      \"googie.lang_revert = \\\"%s\\\";\\n\".\n      \"googie.lang_no_error_found = \\\"%s\\\";\\n\".\n      \"googie.lang_learn_word = \\\"%s\\\";\\n\".\n      \"googie.setLanguages(%s);\\n\".\n      \"googie.setCurrentLanguage('%s');\\n\".\n      \"googie.setDecoration(false);\\n\".\n      \"googie.decorateTextarea('%s');\\n\".\n      \"%s.set_env('spellcheck', googie);\",\n      $RCMAIL->output->get_skin_path(),\n      $RCMAIL->url(array('_task' => 'utils', '_action' => 'spell', '_remote' => 1)),\n      !empty($dictionary) ? 'true' : 'false',\n      JQ(Q(rcube_label('checkspelling'))),\n      JQ(Q(rcube_label('resumeediting'))),\n      JQ(Q(rcube_label('close'))),\n      JQ(Q(rcube_label('revertto'))),\n      JQ(Q(rcube_label('nospellerrors'))),\n      JQ(Q(rcube_label('addtodict'))),\n      json_serialize($spellcheck_langs),\n      $lang,\n      $attrib['id'],\n      JS_OBJECT_NAME), 'foot');\n\n    $OUTPUT->add_label('checking');\n    $OUTPUT->set_env('spellcheck_langs', join(',', $editor_lang_set));\n  }\n\n  $out .= \"\\n\".'<iframe name=\"savetarget\" src=\"program/resources/blank.gif\" style=\"width:0;height:0;border:none;visibility:hidden;\"></iframe>';\n\n  return $out;\n}\n\n\nfunction rcmail_create_reply_body($body, $bodyIsHtml)\n{\n  global $RCMAIL, $MESSAGE, $LINE_LENGTH;\n\n  // build reply prefix\n  $from = array_pop(rcube_mime::decode_address_list($MESSAGE->get_header('from'), 1, false, $MESSAGE->headers->charset));\n  $prefix = rcube_label(array(\n    'name' => 'mailreplyintro',\n    'vars' => array(\n      'date' => format_date($MESSAGE->headers->date, $RCMAIL->config->get('date_long')),\n      'sender' => $from['name'] ? $from['name'] : rcube_idn_to_utf8($from['mailto']),\n    )\n  ));\n\n  if (!$bodyIsHtml) {\n    $body = preg_replace('/\\r?\\n/', \"\\n\", $body);\n\n    // soft-wrap and quote message text\n    $body = rcmail_wrap_and_quote(rtrim($body, \"\\n\"), $LINE_LENGTH);\n\n    $prefix .= \"\\n\";\n    $suffix = '';\n\n    if ($RCMAIL->config->get('top_posting'))\n      $prefix = \"\\n\\n\\n\" . $prefix;\n  }\n  else {\n    // save inline images to files\n    $cid_map = rcmail_write_inline_attachments($MESSAGE);\n    // set is_safe flag (we need this for html body washing)\n    rcmail_check_safe($MESSAGE);\n    // clean up html tags\n    $body = rcmail_wash_html($body, array('safe' => $MESSAGE->is_safe), $cid_map);\n\n    // build reply (quote content)\n    $prefix = '<p>' . Q($prefix) . \"</p>\\n\";\n    $prefix .= '<blockquote>';\n\n    if ($RCMAIL->config->get('top_posting')) {\n      $prefix = '<br>' . $prefix;\n      $suffix = '</blockquote>';\n    }\n    else {\n      $suffix = '</blockquote><p></p>';\n    }\n  }\n\n  return $prefix.$body.$suffix;\n}\n\n\nfunction rcmail_create_forward_body($body, $bodyIsHtml)\n{\n  global $RCMAIL, $MESSAGE, $COMPOSE;\n\n  // add attachments\n  if (!isset($COMPOSE['forward_attachments']) && is_array($MESSAGE->mime_parts))\n    $cid_map = rcmail_write_compose_attachments($MESSAGE, $bodyIsHtml);\n\n  $date    = format_date($MESSAGE->headers->date, $RCMAIL->config->get('date_long'));\n  $charset = $RCMAIL->output->get_charset();\n\n  if (!$bodyIsHtml)\n  {\n    $prefix = \"\\n\\n\\n-------- \" . rcube_label('originalmessage') . \" --------\\n\";\n    $prefix .= rcube_label('subject') . ': ' . $MESSAGE->subject . \"\\n\";\n    $prefix .= rcube_label('date')    . ': ' . $date . \"\\n\";\n    $prefix .= rcube_label('from')    . ': ' . $MESSAGE->get_header('from') . \"\\n\";\n    $prefix .= rcube_label('to')      . ': ' . $MESSAGE->get_header('to') . \"\\n\";\n\n    if ($MESSAGE->headers->cc)\n      $prefix .= rcube_label('cc') . ': ' . $MESSAGE->get_header('cc') . \"\\n\";\n    if ($MESSAGE->headers->replyto && $MESSAGE->headers->replyto != $MESSAGE->headers->from)\n      $prefix .= rcube_label('replyto') . ': ' . $MESSAGE->get_header('replyto') . \"\\n\";\n\n    $prefix .= \"\\n\";\n  }\n  else\n  {\n    // set is_safe flag (we need this for html body washing)\n    rcmail_check_safe($MESSAGE);\n    // clean up html tags\n    $body = rcmail_wash_html($body, array('safe' => $MESSAGE->is_safe), $cid_map);\n\n    $prefix = sprintf(\n      \"<br /><p>-------- \" . rcube_label('originalmessage') . \" --------</p>\" .\n        \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody>\" .\n        \"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\" .\n        \"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\" .\n        \"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\" .\n        \"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\",\n      rcube_label('subject'), Q($MESSAGE->subject),\n      rcube_label('date'), Q($date),\n      rcube_label('from'), Q($MESSAGE->get_header('from'), 'replace'),\n      rcube_label('to'), Q($MESSAGE->get_header('to'), 'replace'));\n\n    if ($MESSAGE->headers->cc)\n      $prefix .= sprintf(\"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\",\n        rcube_label('cc'),\n        Q($MESSAGE->get_header('cc'), 'replace'));\n\n    if ($MESSAGE->headers->replyto && $MESSAGE->headers->replyto != $MESSAGE->headers->from)\n      $prefix .= sprintf(\"<tr><th align=\\\"right\\\" nowrap=\\\"nowrap\\\" valign=\\\"baseline\\\">%s: </th><td>%s</td></tr>\",\n        rcube_label('replyto'),\n        Q($MESSAGE->get_header('replyto'), 'replace'));\n\n    $prefix .= \"</tbody></table><br>\";\n  }\n\n  return $prefix.$body;\n}\n\n\nfunction rcmail_create_draft_body($body, $bodyIsHtml)\n{\n  global $MESSAGE, $OUTPUT, $COMPOSE;\n\n  /**\n   * add attachments\n   * sizeof($MESSAGE->mime_parts can be 1 - e.g. attachment, but no text!\n   */\n  if (empty($COMPOSE['forward_attachments'])\n      && is_array($MESSAGE->mime_parts)\n      && count($MESSAGE->mime_parts) > 0)\n  {\n    $cid_map = rcmail_write_compose_attachments($MESSAGE, $bodyIsHtml);\n\n    // replace cid with href in inline images links\n    if ($cid_map)\n      $body = str_replace(array_keys($cid_map), array_values($cid_map), $body);\n  }\n\n  return $body;\n}\n\n\nfunction rcmail_remove_signature($body)\n{\n  global $RCMAIL;\n\n  $body = str_replace(\"\\r\\n\", \"\\n\", $body);\n  $len  = strlen($body);\n  $sig_max_lines = $RCMAIL->config->get('sig_max_lines', 15);\n\n  while (($sp = strrpos($body, \"-- \\n\", $sp ? -$len+$sp-1 : 0)) !== false) {\n    if ($sp == 0 || $body[$sp-1] == \"\\n\") {\n      // do not touch blocks with more that X lines\n      if (substr_count($body, \"\\n\", $sp) < $sig_max_lines) {\n        $body = substr($body, 0, max(0, $sp-1));\n      }\n      break;\n    }\n  }\n\n  return $body;\n}\n\n\nfunction rcmail_write_compose_attachments(&$message, $bodyIsHtml)\n{\n  global $RCMAIL, $COMPOSE;\n\n  $cid_map = $messages = array();\n  foreach ((array)$message->mime_parts as $pid => $part)\n  {\n    if (($part->ctype_primary != 'message' || !$bodyIsHtml) && $part->ctype_primary != 'multipart' && \n        ($part->disposition == 'attachment' || ($part->disposition == 'inline' && $bodyIsHtml) || $part->filename)\n        && $part->mimetype != 'application/ms-tnef'\n    ) {\n      $skip = false;\n      if ($part->mimetype == 'message/rfc822') {\n        $messages[] = $part->mime_id;\n      } else if ($messages) {\n        // skip attachments included in message/rfc822 attachment (#1486487)\n        foreach ($messages as $mimeid)\n          if (strpos($part->mime_id, $mimeid.'.') === 0) {\n            $skip = true;\n            break;\n          }\n      }\n\n      if (!$skip && ($attachment = rcmail_save_attachment($message, $pid))) {\n        $COMPOSE['attachments'][$attachment['id']] = $attachment;\n        if ($bodyIsHtml && ($part->content_id || $part->content_location)) {\n          $url = sprintf('%s&_id=%s&_action=display-attachment&_file=rcmfile%s',\n            $RCMAIL->comm_path, $COMPOSE['id'], $attachment['id']);\n          if ($part->content_id)\n            $cid_map['cid:'.$part->content_id] = $url;\n          else\n            $cid_map[$part->content_location] = $url;\n        }\n      }\n    }\n  }\n\n  $COMPOSE['forward_attachments'] = true;\n\n  return $cid_map;\n}\n\n\nfunction rcmail_write_inline_attachments(&$message)\n{\n  global $RCMAIL, $COMPOSE;\n\n  $cid_map = array();\n  foreach ((array)$message->mime_parts as $pid => $part) {\n    if (($part->content_id || $part->content_location) && $part->filename) {\n      if ($attachment = rcmail_save_attachment($message, $pid)) {\n        $COMPOSE['attachments'][$attachment['id']] = $attachment;\n          $url = sprintf('%s&_id=%s&_action=display-attachment&_file=rcmfile%s',\n            $RCMAIL->comm_path, $COMPOSE['id'], $attachment['id']);\n        if ($part->content_id)\n          $cid_map['cid:'.$part->content_id] = $url;\n        else\n          $cid_map[$part->content_location] = $url;\n      }\n    }\n  }\n\n  return $cid_map;\n}\n\n// Creates an attachment from the forwarded message\nfunction rcmail_write_forward_attachment(&$message)\n{\n  global $RCMAIL, $COMPOSE;\n\n  if (strlen($message->subject)) {\n    $name = mb_substr($message->subject, 0, 64) . '.eml';\n  }\n  else {\n    $name = 'message_rfc822.eml';\n  }\n\n  $mem_limit = parse_bytes(ini_get('memory_limit'));\n  $curr_mem = function_exists('memory_get_usage') ? memory_get_usage() : 16*1024*1024; // safe value: 16MB\n  $data = $path = null;\n\n  // don't load too big attachments into memory\n  if ($mem_limit > 0 && $message->size > $mem_limit - $curr_mem) {\n    $temp_dir = unslashify($RCMAIL->config->get('temp_dir'));\n    $path = tempnam($temp_dir, 'rcmAttmnt');\n    if ($fp = fopen($path, 'w')) {\n      $RCMAIL->storage->get_raw_body($message->uid, $fp);\n      fclose($fp);\n    } else\n      return false;\n  } else {\n    $data = $RCMAIL->storage->get_raw_body($message->uid);\n  }\n\n  $attachment = array(\n    'group' => $COMPOSE['id'],\n    'name' => $name,\n    'mimetype' => 'message/rfc822',\n    'data' => $data,\n    'path' => $path,\n    'size' => $path ? filesize($path) : strlen($data),\n  );\n\n  $attachment = $RCMAIL->plugins->exec_hook('attachment_save', $attachment);\n\n  if ($attachment['status']) {\n    unset($attachment['data'], $attachment['status'], $attachment['content_id'], $attachment['abort']);\n    $COMPOSE['attachments'][$attachment['id']] = $attachment;\n    return true;\n  } else if ($path) {\n    @unlink($path);\n  }\n\n  return false;\n}\n\n\nfunction rcmail_save_attachment(&$message, $pid)\n{\n  global $COMPOSE;\n\n  $rcmail = rcmail::get_instance();\n  $part = $message->mime_parts[$pid];\n  $mem_limit = parse_bytes(ini_get('memory_limit'));\n  $curr_mem = function_exists('memory_get_usage') ? memory_get_usage() : 16*1024*1024; // safe value: 16MB\n  $data = $path = null;\n\n  // don't load too big attachments into memory\n  if ($mem_limit > 0 && $part->size > $mem_limit - $curr_mem) {\n    $temp_dir = unslashify($rcmail->config->get('temp_dir'));\n    $path = tempnam($temp_dir, 'rcmAttmnt');\n    if ($fp = fopen($path, 'w')) {\n      $message->get_part_content($pid, $fp);\n      fclose($fp);\n    } else\n      return false;\n  } else {\n    $data = $message->get_part_content($pid);\n  }\n\n  $mimetype = $part->ctype_primary . '/' . $part->ctype_secondary;\n  $filename = $part->filename;\n  if (!strlen($filename)) {\n    if ($mimetype == 'text/html') {\n      $filename = rcube_label('htmlmessage');\n    }\n    else {\n      $filename = 'Part_'.$pid;\n    }\n    $filename .= '.' . $part->ctype_secondary;\n  }\n\n  $attachment = array(\n    'group' => $COMPOSE['id'],\n    'name' => $filename,\n    'mimetype' => $mimetype,\n    'content_id' => $part->content_id,\n    'data' => $data,\n    'path' => $path,\n    'size' => $path ? filesize($path) : strlen($data),\n  );\n\n  $attachment = $rcmail->plugins->exec_hook('attachment_save', $attachment);\n\n  if ($attachment['status']) {\n    unset($attachment['data'], $attachment['status'], $attachment['content_id'], $attachment['abort']);\n    return $attachment;\n  } else if ($path) {\n    @unlink($path);\n  }\n\n  return false;\n}\n\nfunction rcmail_save_image($path, $mimetype='')\n{\n  global $COMPOSE;\n\n  // handle attachments in memory\n  $data = file_get_contents($path);\n\n  $attachment = array(\n    'group' => $COMPOSE['id'],\n    'name' => rcmail_basename($path),\n    'mimetype' => $mimetype ? $mimetype : rc_mime_content_type($path, $name),\n    'data' => $data,\n    'size' => strlen($data),\n  );\n\n  $attachment = rcmail::get_instance()->plugins->exec_hook('attachment_save', $attachment);\n\n  if ($attachment['status']) {\n    unset($attachment['data'], $attachment['status'], $attachment['content_id'], $attachment['abort']);\n    return $attachment;\n  }\n\n  return false;\n}\n\nfunction rcmail_basename($filename)\n{\n  // basename() is not unicode safe and locale dependent\n  if (stristr(PHP_OS, 'win') || stristr(PHP_OS, 'netware')) {\n    return preg_replace('/^.*[\\\\\\\\\\\\/]/', '', $filename);\n  } else {\n    return preg_replace('/^.*[\\/]/', '', $filename);\n  }\n}\n\nfunction rcmail_compose_subject($attrib)\n{\n  global $MESSAGE, $COMPOSE, $compose_mode;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n  unset($attrib['form']);\n\n  $attrib['name'] = '_subject';\n  $attrib['spellcheck'] = 'true';\n  $textfield = new html_inputfield($attrib);\n\n  $subject = '';\n\n  // use subject from post\n  if (isset($_POST['_subject'])) {\n    $subject = get_input_value('_subject', RCUBE_INPUT_POST, TRUE);\n  }\n  // create a reply-subject\n  else if ($compose_mode == RCUBE_COMPOSE_REPLY) {\n    if (preg_match('/^re:/i', $MESSAGE->subject))\n      $subject = $MESSAGE->subject;\n    else\n      $subject = 'Re: '.$MESSAGE->subject;\n  }\n  // create a forward-subject\n  else if ($compose_mode == RCUBE_COMPOSE_FORWARD) {\n    if (preg_match('/^fwd:/i', $MESSAGE->subject))\n      $subject = $MESSAGE->subject;\n    else\n      $subject = 'Fwd: '.$MESSAGE->subject;\n  }\n  // creeate a draft-subject\n  else if ($compose_mode == RCUBE_COMPOSE_DRAFT || $compose_mode == RCUBE_COMPOSE_EDIT) {\n    $subject = $MESSAGE->subject;\n  }\n  else if (!empty($COMPOSE['param']['subject'])) {\n    $subject = $COMPOSE['param']['subject'];\n  }\n\n  $out = $form_start ? \"$form_start\\n\" : '';\n  $out .= $textfield->show($subject);\n  $out .= $form_end ? \"\\n$form_end\" : '';\n\n  return $out;\n}\n\n\nfunction rcmail_compose_attachment_list($attrib)\n{\n  global $OUTPUT, $CONFIG, $COMPOSE;\n\n  // add ID if not given\n  if (!$attrib['id'])\n    $attrib['id'] = 'rcmAttachmentList';\n\n  $out = \"\\n\";\n  $jslist = array();\n\n  if (is_array($COMPOSE['attachments'])) {\n    if ($attrib['deleteicon']) {\n      $button = html::img(array(\n        'src' => $CONFIG['skin_path'] . $attrib['deleteicon'],\n        'alt' => rcube_label('delete')\n      ));\n    }\n    else\n      $button = Q(rcube_label('delete'));\n\n    foreach ($COMPOSE['attachments'] as $id => $a_prop) {\n      if (empty($a_prop))\n        continue;\n\n      $out .= html::tag('li', array('id' => 'rcmfile'.$id, 'class' => rcmail_filetype2classname($a_prop['mimetype'], $a_prop['name'])),\n        html::a(array(\n            'href' => \"#delete\",\n            'title' => rcube_label('delete'),\n            'onclick' => sprintf(\"return %s.command('remove-attachment','rcmfile%s', this)\", JS_OBJECT_NAME, $id),\n            'class' => 'delete'),\n          $button) . Q($a_prop['name']));\n\n        $jslist['rcmfile'.$id] = array('name' => $a_prop['name'], 'complete' => true, 'mimetype' => $a_prop['mimetype']);\n    }\n  }\n\n  if ($attrib['deleteicon'])\n    $COMPOSE['deleteicon'] = $CONFIG['skin_path'] . $attrib['deleteicon'];\n  if ($attrib['cancelicon'])\n    $OUTPUT->set_env('cancelicon', $CONFIG['skin_path'] . $attrib['cancelicon']);\n  if ($attrib['loadingicon'])\n    $OUTPUT->set_env('loadingicon', $CONFIG['skin_path'] . $attrib['loadingicon']);\n\n  $OUTPUT->set_env('attachments', $jslist);\n  $OUTPUT->add_gui_object('attachmentlist', $attrib['id']);\n\n  return html::tag('ul', $attrib, $out, html::$common_attrib);\n}\n\n\nfunction rcmail_compose_attachment_form($attrib)\n{\n  global $OUTPUT;\n\n  // set defaults\n  $attrib += array('id' => 'rcmUploadbox', 'buttons' => 'yes');\n\n  // Get filesize, enable upload progress bar\n  $max_filesize = rcube_upload_init();\n\n  $button = new html_inputfield(array('type' => 'button'));\n\n  $out = html::div($attrib,\n    $OUTPUT->form_tag(array('id' => $attrib['id'].'Frm', 'name' => 'uploadform', 'method' => 'post', 'enctype' => 'multipart/form-data'),\n      html::div(null, rcmail_compose_attachment_field(array('size' => $attrib['attachmentfieldsize']))) .\n      html::div('hint', rcube_label(array('name' => 'maxuploadsize', 'vars' => array('size' => $max_filesize)))) .\n      (get_boolean($attrib['buttons']) ? html::div('buttons',\n        $button->show(rcube_label('close'), array('class' => 'button', 'onclick' => \"$('#$attrib[id]').hide()\")) . ' ' .\n        $button->show(rcube_label('upload'), array('class' => 'button mainaction', 'onclick' => JS_OBJECT_NAME . \".command('send-attachment', this.form)\"))\n      ) : '')\n    )\n  );\n\n  $OUTPUT->add_gui_object('uploadform', $attrib['id'].'Frm');\n  return $out;\n}\n\n\nfunction rcmail_compose_attachment_field($attrib)\n{\n  $attrib['type'] = 'file';\n  $attrib['name'] = '_attachments[]';\n  $attrib['multiple'] = 'multiple';\n\n  $field = new html_inputfield($attrib);\n  return $field->show();\n}\n\n\nfunction rcmail_priority_selector($attrib)\n{\n  global $MESSAGE;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n  unset($attrib['form']);\n\n  $attrib['name'] = '_priority';\n  $selector = new html_select($attrib);\n\n  $selector->add(array(rcube_label('lowest'),\n                       rcube_label('low'),\n                       rcube_label('normal'),\n                       rcube_label('high'),\n                       rcube_label('highest')),\n                 array(5, 4, 0, 2, 1));\n\n  if (isset($_POST['_priority']))\n    $sel = $_POST['_priority'];\n  else if (intval($MESSAGE->headers->priority) != 3)\n    $sel = intval($MESSAGE->headers->priority);\n  else\n    $sel = 0;\n\n  $out = $form_start ? \"$form_start\\n\" : '';\n  $out .= $selector->show($sel);\n  $out .= $form_end ? \"\\n$form_end\" : '';\n\n  return $out;\n}\n\n\nfunction rcmail_receipt_checkbox($attrib)\n{\n  global $RCMAIL, $MESSAGE, $compose_mode;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n  unset($attrib['form']);\n\n  if (!isset($attrib['id']))\n    $attrib['id'] = 'receipt';\n\n  $attrib['name'] = '_receipt';\n  $attrib['value'] = '1';\n  $checkbox = new html_checkbox($attrib);\n\n  if (in_array($compose_mode, array(RCUBE_COMPOSE_DRAFT, RCUBE_COMPOSE_EDIT)))\n    $mdn_default = (bool) $MESSAGE->headers->mdn_to;\n  else\n    $mdn_default = $RCMAIL->config->get('mdn_default');\n\n  $out = $form_start ? \"$form_start\\n\" : '';\n  $out .= $checkbox->show($mdn_default);\n  $out .= $form_end ? \"\\n$form_end\" : '';\n\n  return $out;\n}\n\n\nfunction rcmail_dsn_checkbox($attrib)\n{\n  global $RCMAIL;\n\n  list($form_start, $form_end) = get_form_tags($attrib);\n  unset($attrib['form']);\n\n  if (!isset($attrib['id']))\n    $attrib['id'] = 'dsn';\n\n  $attrib['name'] = '_dsn';\n  $attrib['value'] = '1';\n  $checkbox = new html_checkbox($attrib);\n\n  $out = $form_start ? \"$form_start\\n\" : '';\n  $out .= $checkbox->show($RCMAIL->config->get('dsn_default'));\n  $out .= $form_end ? \"\\n$form_end\" : '';\n\n  return $out;\n}\n\n\nfunction rcmail_editor_selector($attrib)\n{\n  // determine whether HTML or plain text should be checked\n  $useHtml = rcmail_compose_editor_mode();\n\n  if (empty($attrib['editorid']))\n    $attrib['editorid'] = 'rcmComposeBody';\n\n  if (empty($attrib['name']))\n    $attrib['name'] = 'editorSelect';\n\n  $attrib['onchange'] = \"return rcmail_toggle_editor(this, '\".$attrib['editorid'].\"', '_is_html')\";\n\n  $select = new html_select($attrib);\n\n  $select->add(Q(rcube_label('htmltoggle')), 'html');\n  $select->add(Q(rcube_label('plaintoggle')), 'plain');\n\n  return $select->show($useHtml ? 'html' : 'plain');\n\n  foreach ($choices as $value => $text) {\n    $attrib['id'] = '_' . $value;\n    $attrib['value'] = $value;\n    $selector .= $radio->show($chosenvalue, $attrib) . html::label($attrib['id'], Q(rcube_label($text)));\n  }\n\n  return $selector;\n}\n\n\nfunction rcmail_store_target_selection($attrib)\n{\n  global $COMPOSE;\n\n  $attrib['name'] = '_store_target';\n  $select = rcmail_mailbox_select(array_merge($attrib, array(\n    'noselection' => '- '.rcube_label('dontsave').' -',\n    'folder_filter' => 'mail',\n    'folder_rights' => 'w',\n  )));\n  return $select->show($COMPOSE['param']['sent_mbox'], $attrib);\n}\n\n\nfunction rcmail_check_sent_folder($folder, $create=false)\n{\n  global $RCMAIL;\n\n  if ($RCMAIL->storage->folder_exists($folder, true)) {\n    return true;\n  }\n\n  // folder may exist but isn't subscribed (#1485241)\n  if ($create) {\n    if (!$RCMAIL->storage->folder_exists($folder))\n      return $RCMAIL->storage->create_folder($folder, true);\n    else\n      return $RCMAIL->storage->subscribe($folder);\n  }\n\n  return false;\n}\n\n\nfunction get_form_tags($attrib)\n{\n  global $RCMAIL, $MESSAGE_FORM, $COMPOSE;\n\n  $form_start = '';\n  if (!$MESSAGE_FORM)\n  {\n    $hiddenfields = new html_hiddenfield(array('name' => '_task', 'value' => $RCMAIL->task));\n    $hiddenfields->add(array('name' => '_action', 'value' => 'send'));\n    $hiddenfields->add(array('name' => '_id', 'value' => $COMPOSE['id']));\n    $hiddenfields->add(array('name' => '_attachments'));\n\n    $form_start = empty($attrib['form']) ? $RCMAIL->output->form_tag(array('name' => \"form\", 'method' => \"post\")) : '';\n    $form_start .= $hiddenfields->show();\n  }\n\n  $form_end = ($MESSAGE_FORM && !strlen($attrib['form'])) ? '</form>' : '';\n  $form_name = !empty($attrib['form']) ? $attrib['form'] : 'form';\n\n  if (!$MESSAGE_FORM)\n    $RCMAIL->output->add_gui_object('messageform', $form_name);\n\n  $MESSAGE_FORM = $form_name;\n\n  return array($form_start, $form_end);\n}\n\n\nfunction rcmail_addressbook_list($attrib = array())\n{\n    global $RCMAIL, $OUTPUT;\n\n    $attrib += array('id' => 'rcmdirectorylist');\n\n    $out = '';\n    $line_templ = html::tag('li', array(\n        'id' => 'rcmli%s', 'class' => '%s'),\n        html::a(array('href' => '#list',\n            'rel' => '%s',\n            'onclick' => \"return \".JS_OBJECT_NAME.\".command('list-adresses','%s',this)\"), '%s'));\n\n    foreach ($RCMAIL->get_address_sources() as $j => $source) {\n        $id = strval(strlen($source['id']) ? $source['id'] : $j);\n        $js_id = JQ($id);\n\n        // set class name(s)\n        $class_name = 'addressbook';\n        if ($source['class_name'])\n            $class_name .= ' ' . $source['class_name'];\n\n        $out .= sprintf($line_templ,\n            html_identifier($id),\n            $class_name,\n            $source['id'],\n            $js_id, (!empty($source['name']) ? Q($source['name']) : Q($id)));\n    }\n\n    $OUTPUT->add_gui_object('addressbookslist', $attrib['id']);\n\n    return html::tag('ul', $attrib, $out, html::$common_attrib);\n}\n\n// return the contacts list as HTML table\nfunction rcmail_contacts_list($attrib = array())\n{\n    global $OUTPUT;\n\n    $attrib += array('id' => 'rcmAddressList');\n\n    // set client env\n    $OUTPUT->add_gui_object('contactslist', $attrib['id']);\n    $OUTPUT->set_env('pagecount', 0);\n    $OUTPUT->set_env('current_page', 0);\n    $OUTPUT->include_script('list.js');\n\n    return rcube_table_output($attrib, array(), array('name'), 'ID');\n}\n\n\n/**\n * Register a certain container as active area to drop files onto\n */\nfunction compose_file_drop_area($attrib)\n{\n    global $OUTPUT;\n\n    if ($attrib['id']) {\n        $OUTPUT->add_gui_object('filedrop', $attrib['id']);\n        $OUTPUT->set_env('filedrop', array('action' => 'upload', 'fieldname' => '_attachments'));\n    }\n}\n\n\n// register UI objects\n$OUTPUT->add_handlers(array(\n  'composeheaders' => 'rcmail_compose_headers',\n  'composesubject' => 'rcmail_compose_subject',\n  'composebody' => 'rcmail_compose_body',\n  'composeattachmentlist' => 'rcmail_compose_attachment_list',\n  'composeattachmentform' => 'rcmail_compose_attachment_form',\n  'composeattachment' => 'rcmail_compose_attachment_field',\n  'filedroparea'    => 'compose_file_drop_area',\n  'priorityselector' => 'rcmail_priority_selector',\n  'editorselector' => 'rcmail_editor_selector',\n  'receiptcheckbox' => 'rcmail_receipt_checkbox',\n  'dsncheckbox' => 'rcmail_dsn_checkbox',\n  'storetarget' => 'rcmail_store_target_selection',\n  'addressbooks' => 'rcmail_addressbook_list',\n  'addresslist' => 'rcmail_contacts_list',\n));\n\n$OUTPUT->send('compose');\n"], "filenames": ["CHANGELOG", "program/js/app.js", "program/steps/mail/compose.inc"], "buggy_code_start_loc": [4, 3301, 532], "buggy_code_end_loc": [5, 3412, 562], "fixing_code_start_loc": [4, 3301, 532], "fixing_code_end_loc": [6, 3391, 579], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in Roundcube Webmail 0.8.1 and earlier allows remote attackers to inject arbitrary web script or HTML via the signature in an email.", "other": {"cve": {"id": "CVE-2012-4668", "sourceIdentifier": "cve@mitre.org", "published": "2012-08-25T10:29:53.100", "lastModified": "2012-08-27T04:00:00.000", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in Roundcube Webmail 0.8.1 and earlier allows remote attackers to inject arbitrary web script or HTML via the signature in an email."}, {"lang": "es", "value": "Vulnerabilidad de ejecuci\u00f3n de secuencias de comandos en sitios cruzados en Roundcube Webmail v0.8.1 y anteriores, permite a atacantes remotos inyectar secuencias de comandos web o HTML a trav\u00e9s de la firma en un correo electr\u00f3nico."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.8.1", "matchCriteriaId": "4A70E3E3-F447-4DE8-B5F5-2FCD8E1A2408"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.1:*:*:*:*:*:*:*", "matchCriteriaId": "4C785B00-7F4D-4EBD-A9FA-726D4D35E5D1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.1:alpha:*:*:*:*:*:*", "matchCriteriaId": "8F433741-5F73-43B5-A522-C484C64C66A7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.1:beta:*:*:*:*:*:*", "matchCriteriaId": "09DF755B-041E-4A61-BEF6-A613F6F0CE13"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.1:beta2:*:*:*:*:*:*", "matchCriteriaId": "34D20437-7DE7-4DB8-8C11-37B09A87E3A4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.1:rc1:*:*:*:*:*:*", "matchCriteriaId": "55FB4AA3-3528-46B7-BBB9-9185DAA5425C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.1:rc2:*:*:*:*:*:*", "matchCriteriaId": "066AA2BC-95A8-43E8-A1FE-9F15860691E1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "82FB886B-35A4-4A8C-AE18-62C845886018"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.2:*:*:*:*:*:*:*", "matchCriteriaId": "83FF6973-9BAC-4DF2-BACE-42F0D9340A27"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.2:alpha:*:*:*:*:*:*", "matchCriteriaId": "EB6449FD-C6EE-497C-BE34-88900883AD09"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.2:beta:*:*:*:*:*:*", "matchCriteriaId": "0CEF8BF6-E09F-4376-B089-9B722A84F591"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "946B0B6A-46D3-46B9-BD1E-B03D3339EEB3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "0D572A44-701A-4D6F-919F-AB8AE4BF4417"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.3:*:*:*:*:*:*:*", "matchCriteriaId": "D4D6EA96-EE58-47C3-B545-7238B3F64941"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.3:beta:*:*:*:*:*:*", "matchCriteriaId": "3584BB62-818D-4A5B-BC7D-EAB0B85614EA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.3:rc1:*:*:*:*:*:*", "matchCriteriaId": "332FF744-3682-4818-9602-8F868BF0781E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "2B502047-4DDD-4586-978C-6CEE1C41F923"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.4:*:*:*:*:*:*:*", "matchCriteriaId": "43581564-48CF-410C-9CE1-CBAE71153DA5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.4:beta:*:*:*:*:*:*", "matchCriteriaId": "6A5CC548-05E4-4059-8252-FA78ECBB95A0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "C3FA495A-D7FE-4461-AF57-EB649A1C49B6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "2D773E61-113A-4EE8-804E-0584B73AB58D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.5:*:*:*:*:*:*:*", "matchCriteriaId": "B276CD07-EB81-4C59-B0E8-83E43EAAB005"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.5:beta:*:*:*:*:*:*", "matchCriteriaId": "FC0D4825-F78E-40F5-A9CB-45B73DE8FBD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.5:rc:*:*:*:*:*:*", "matchCriteriaId": "9C8376B9-4DF2-4E23-9C43-EEDE3D800519"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "08BC43EB-D26F-48D7-A614-76FAEC07DB82"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "1E653FFD-AA00-4F30-B844-85AFA5A5A31B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "BBA46B2E-0FEA-4B17-8E72-381656E07349"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.5.4:*:*:*:*:*:*:*", "matchCriteriaId": "C1DC5945-5C18-40F2-AC79-32FF740A7F61"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.6:*:*:*:*:*:*:*", "matchCriteriaId": "B6230C0E-D3A2-4A2E-B6F1-E0695F6E8802"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.7:*:*:*:*:*:*:*", "matchCriteriaId": "589AFC14-DC69-4B0B-B22B-74A8B40D63E8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.7.1:*:*:*:*:*:*:*", "matchCriteriaId": "13A61889-D3B2-46A4-A9A8-60136F8A490B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.7.2:*:*:*:*:*:*:*", "matchCriteriaId": "A1BDB491-F3CF-4C83-ABED-0C615B83D0E5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.7.3:*:*:*:*:*:*:*", "matchCriteriaId": "DCD7759D-4C21-4EC5-A150-C717B71D5F12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:0.8.0:*:*:*:*:*:*:*", "matchCriteriaId": "04DC85A0-F2AB-4A89-A3B9-853BAB1E0CD4"}]}]}], "references": [{"url": "http://sourceforge.net/news/?group_id=139281&id=309011", "source": "cve@mitre.org"}, {"url": "http://trac.roundcube.net/ticket/1488613", "source": "cve@mitre.org"}, {"url": "http://www.openwall.com/lists/oss-security/2012/08/20/2", "source": "cve@mitre.org"}, {"url": "http://www.openwall.com/lists/oss-security/2012/08/20/9", "source": "cve@mitre.org"}, {"url": "https://github.com/roundcube/roundcubemail/commit/c086978f6a91eacb339fd2976202fca9dad2ef32", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/roundcube/roundcubemail/commit/c086978f6a91eacb339fd2976202fca9dad2ef32"}}