{"buggy_code": ["const untracker = [ undefined, null ]\n\nconst Assigner = function( delegate: ( a: any, b: any ) => any, useuntrack: boolean = true ): ( ...args: any[] ) => any {\n  const assigner = ( ...args: any[] ) => {\n    console.log( { args } )\n    return args.reduce( ( a, b ) => {\n      if ( untracker.includes( a ) ) throw new TypeError( `can't convert ${a} to object` )\n      if ( useuntrack && untracker.includes( b ) ) return a\n      Object.keys( b ).forEach( key => {\n        if ( untracker.includes( a[key] ) ) a[key] = b[key]\n        else a[key] = delegate.call( this, a[key], b[key] )\n      } )\n      return a\n    } )\n  }\n  return assigner\n}\n\nAssigner.count = ( qty: number, delegate: ( arg: any, ...args: any[] ) => any ) => {\n  const assigner = ( ...receives: any[] ) => {\n    let group = receives.shift()\n    if ( untracker.includes( group ) ) throw new TypeError( `can't convert ${group} to object` )\n    \n    let args = receives.splice( 0, qty - 1 )\n\n    while ( args.length ) {\n      const keys = []\n      for ( const arg of args )\n        for ( const key of Object.keys( arg ) )\n          if ( !keys.includes( key ) ) keys.push( key )\n\n      for ( const key of keys )\n        group[key] = delegate.call( this, group[key], ...args.map( arg => arg[key] ) )\n\n      args = receives.splice( 0, qty - 1 )\n    }\n\n    return group\n  }\n  return assigner\n}\n\ndeclare namespace Assigner {\n  export type BasicTypes = string | number | symbol | bigint | object | boolean | Function\n  export type Types = BasicTypes | Types[]\n  export type TypesWithExclude = BasicTypes | undefined | null | TypesWithExclude[]\n}\n\nexport { Assigner }\n"], "fixing_code": ["const untracker = [ undefined, null ]\nconst invalids = [ '__proto__', 'constructor', 'prototype' ]\nconst Assigner = function( delegate: ( a: any, b: any ) => any, useuntrack: boolean = true ): ( ...args: any[] ) => any {\n  const assigner = ( ...args: any[] ) => {\n    return args.reduce( ( a, b ) => {\n      if ( untracker.includes( a ) ) throw new TypeError( `can't convert ${a} to object` )\n      if ( useuntrack && untracker.includes( b ) ) return a\n      Object.keys( b ).forEach( key => {\n        if ( invalids.includes( key ) ) return void 0\n        if ( untracker.includes( a[key] ) ) a[key] = b[key]\n        else a[key] = delegate.call( this, a[key], b[key] )\n      } )\n      return a\n    } )\n  }\n  return assigner\n}\n\nAssigner.count = ( qty: number, delegate: ( arg: any, ...args: any[] ) => any ) => {\n  const assigner = ( ...receives: any[] ) => {\n    let group = receives.shift()\n    if ( untracker.includes( group ) ) throw new TypeError( `can't convert ${group} to object` )\n    \n    let args = receives.splice( 0, qty - 1 )\n\n    while ( args.length ) {\n      const keys = []\n      for ( const arg of args )\n        for ( const key of Object.keys( arg ) )\n          if ( !keys.includes( key ) ) keys.push( key )\n\n      for ( const key of keys )\n        group[key] = delegate.call( this, group[key], ...args.map( arg => arg[key] ) )\n\n      args = receives.splice( 0, qty - 1 )\n    }\n\n    return group\n  }\n  return assigner\n}\n\ndeclare namespace Assigner {\n  export type BasicTypes = string | number | symbol | bigint | object | boolean | Function\n  export type Types = BasicTypes | Types[]\n  export type TypesWithExclude = BasicTypes | undefined | null | TypesWithExclude[]\n}\n\nexport { Assigner }\n"], "filenames": ["src/assigner.ts"], "buggy_code_start_loc": [2], "buggy_code_end_loc": [9], "fixing_code_start_loc": [2], "fixing_code_end_loc": [10], "type": "CWE-1321", "message": "This affects all versions of package @cookiex/deep. The global proto object can be polluted using the __proto__ object.", "other": {"cve": {"id": "CVE-2021-23442", "sourceIdentifier": "report@snyk.io", "published": "2021-09-17T10:15:07.437", "lastModified": "2022-12-02T19:34:42.520", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects all versions of package @cookiex/deep. The global proto object can be polluted using the __proto__ object."}, {"lang": "es", "value": "Esto afecta a todas las versiones del paquete @cookiex/deep. El objeto global proto puede ser contaminado usando el objeto __proto__"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cookiex-deep_project:cookiex-deep:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.0.6", "matchCriteriaId": "F007AA1F-4D44-4CAE-8BF5-CA7707EDB1B1"}]}]}], "references": [{"url": "https://github.com/tony-tsx/cookiex-deep/commit/b5bea2b7f34a5fa9abb4446cbd038ecdbcd09c88", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tony-tsx/cookiex-deep/issues/1", "source": "report@snyk.io", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-COOKIEXDEEP-1582793", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tony-tsx/cookiex-deep/commit/b5bea2b7f34a5fa9abb4446cbd038ecdbcd09c88"}}