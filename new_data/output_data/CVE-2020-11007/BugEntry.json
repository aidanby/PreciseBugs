{"buggy_code": ["/**\n *\n */\npackage com.salesmanager.shop.store.controller.shoppingCart.facade;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.UUID;\n\nimport javax.inject.Inject;\nimport javax.persistence.NoResultException;\n\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport com.salesmanager.core.business.exception.ServiceException;\nimport com.salesmanager.core.business.services.catalog.product.PricingService;\nimport com.salesmanager.core.business.services.catalog.product.ProductService;\nimport com.salesmanager.core.business.services.catalog.product.attribute.ProductAttributeService;\nimport com.salesmanager.core.business.services.shoppingcart.ShoppingCartCalculationService;\nimport com.salesmanager.core.business.services.shoppingcart.ShoppingCartService;\nimport com.salesmanager.core.business.utils.ProductPriceUtils;\nimport com.salesmanager.core.model.catalog.product.Product;\nimport com.salesmanager.core.model.catalog.product.attribute.ProductAttribute;\nimport com.salesmanager.core.model.catalog.product.availability.ProductAvailability;\nimport com.salesmanager.core.model.catalog.product.price.FinalPrice;\nimport com.salesmanager.core.model.customer.Customer;\nimport com.salesmanager.core.model.merchant.MerchantStore;\nimport com.salesmanager.core.model.reference.language.Language;\nimport com.salesmanager.core.model.shoppingcart.ShoppingCart;\nimport com.salesmanager.shop.constants.Constants;\nimport com.salesmanager.shop.model.shoppingcart.CartModificationException;\nimport com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem;\nimport com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart;\nimport com.salesmanager.shop.model.shoppingcart.ShoppingCartAttribute;\nimport com.salesmanager.shop.model.shoppingcart.ShoppingCartData;\nimport com.salesmanager.shop.model.shoppingcart.ShoppingCartItem;\nimport com.salesmanager.shop.populator.shoppingCart.ReadableShoppingCartPopulator;\nimport com.salesmanager.shop.populator.shoppingCart.ShoppingCartDataPopulator;\nimport com.salesmanager.shop.store.api.exception.ResourceNotFoundException;\nimport com.salesmanager.shop.utils.DateUtil;\nimport com.salesmanager.shop.utils.ImageFilePath;\n\n/**\n * @author Umesh Awasthi\n * @version 1.0\n * @since 1.0\n */\n@Service( value = \"shoppingCartFacade\" )\npublic class ShoppingCartFacadeImpl\n    implements ShoppingCartFacade\n{\n\n    \n    private static final Logger LOG = LoggerFactory.getLogger(ShoppingCartFacadeImpl.class);\n\n    @Inject\n    private ShoppingCartService shoppingCartService;\n\n    @Inject\n    ShoppingCartCalculationService shoppingCartCalculationService;\n\n    @Inject\n    private ProductPriceUtils productPriceUtils;\n\n    @Inject\n    private ProductService productService;\n\n    @Inject\n    private PricingService pricingService;\n\n    @Inject\n    private ProductAttributeService productAttributeService;\n\n\t@Inject\n\t@Qualifier(\"img\")\n\tprivate ImageFilePath imageUtils;\n\n    public void deleteShoppingCart(final Long id, final MerchantStore store) throws Exception {\n    \tShoppingCart cart = shoppingCartService.getById(id, store);\n    \tif(cart!=null) {\n    \t\tshoppingCartService.deleteCart(cart);\n    \t}\n    }\n    \n    @Override\n    public void deleteShoppingCart(final String code, final MerchantStore store) throws Exception {\n    \tShoppingCart cart = shoppingCartService.getByCode(code, store);\n    \tif(cart!=null) {\n    \t\tshoppingCartService.deleteCart(cart);\n    \t}\n    }\n\n    @Override\n    public ShoppingCartData addItemsToShoppingCart( final ShoppingCartData shoppingCartData,\n                                                    final ShoppingCartItem item, final MerchantStore store, final Language language,final Customer customer )\n        throws Exception\n    {\n\n        ShoppingCart cartModel = null;\n        \n        /**\n         * Sometimes a user logs in and a shopping cart is present in db (shoppingCartData\n         * but ui has no cookie with shopping cart code so the cart code will have\n         * to be added to the item in order to process add to cart normally\n         */\n        if(shoppingCartData != null && StringUtils.isBlank(item.getCode())) {\n        \titem.setCode(shoppingCartData.getCode());\n        }\n        \n        \n        if ( !StringUtils.isBlank( item.getCode() ) )\n        {\n            // get it from the db\n            cartModel = getShoppingCartModel( item.getCode(), store );\n            if ( cartModel == null )\n            {\n                cartModel = createCartModel( shoppingCartData.getCode(), store,customer );\n            }\n\n        }\n\n        if ( cartModel == null )\n        {\n\n            final String shoppingCartCode =\n                StringUtils.isNotBlank( shoppingCartData.getCode() ) ? shoppingCartData.getCode() : null;\n            cartModel = createCartModel( shoppingCartCode, store,customer );\n\n        }\n        com.salesmanager.core.model.shoppingcart.ShoppingCartItem shoppingCartItem =\n            createCartItem( cartModel, item, store );\n        \n        \n        boolean duplicateFound = false;\n        if(CollectionUtils.isEmpty(item.getShoppingCartAttributes())) {//increment quantity\n        \t//get duplicate item from the cart\n        \tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> cartModelItems = cartModel.getLineItems();\n        \tfor(com.salesmanager.core.model.shoppingcart.ShoppingCartItem cartItem : cartModelItems) {\n        \t\tif(cartItem.getProduct().getId().longValue()==shoppingCartItem.getProduct().getId().longValue()) {\n        \t\t\tif(CollectionUtils.isEmpty(cartItem.getAttributes())) {\n        \t\t\t\tif(!duplicateFound) {\n        \t\t\t\t\tif(!shoppingCartItem.isProductVirtual()) {\n\t        \t\t\t\t\tcartItem.setQuantity(cartItem.getQuantity() + shoppingCartItem.getQuantity());\n        \t\t\t\t\t}\n        \t\t\t\t\tduplicateFound = true;\n        \t\t\t\t\tbreak;\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        \n        if(!duplicateFound) {\n        \t//shoppingCartItem.getAttributes().stream().forEach(a -> {a.setProductAttributeId(productAttributeId);});\n        \tcartModel.getLineItems().add( shoppingCartItem );\n        }\n        \n        /** Update cart in database with line items **/\n        shoppingCartService.saveOrUpdate( cartModel );\n\n        //refresh cart\n        cartModel = shoppingCartService.getById(cartModel.getId(), store);\n\n        shoppingCartCalculationService.calculate( cartModel, store, language );\n\n        ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n        shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n        shoppingCartDataPopulator.setPricingService( pricingService );\n        shoppingCartDataPopulator.setimageUtils(imageUtils);\n\n\n        return shoppingCartDataPopulator.populate( cartModel, store, language );\n    }\n\n    private com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem( final ShoppingCart cartModel,\n                                                                                               final ShoppingCartItem shoppingCartItem,\n                                                                                               final MerchantStore store )\n        throws Exception\n    {\n\n        Product product = productService.getById( shoppingCartItem.getProductId() );\n\n        if ( product == null )\n        {\n            throw new Exception( \"Item with id \" + shoppingCartItem.getProductId() + \" does not exist\" );\n        }\n\n        if ( product.getMerchantStore().getId().intValue() != store.getId().intValue() )\n        {\n            throw new Exception( \"Item with id \" + shoppingCartItem.getProductId() + \" does not belong to merchant \"\n                + store.getId() );\n        }\n        \n\t\t/**\n\t\t * Check if product quantity is 0\n\t\t * Check if product is available\n\t\t * Check if date available <= now\n\t\t */\n        \n        Set<ProductAvailability> availabilities = product.getAvailabilities();\n        if(availabilities == null) {\n        \t\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not properly configured\" );\n        \t\n        }\n        \t\n        for(ProductAvailability availability : availabilities) {\n        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() ==0) {\n                throw new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        \t}\n        }\n        \n        if(!product.isAvailable()) {\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        }\n        \n        if(!DateUtil.dateBeforeEqualsDate(product.getDateAvailable(), new Date())) {\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        }\n\n\n        com.salesmanager.core.model.shoppingcart.ShoppingCartItem item =\n            shoppingCartService.populateShoppingCartItem( product );\n\n        item.setQuantity( shoppingCartItem.getQuantity() );\n        item.setShoppingCart( cartModel );\n\n        // attributes\n        List<ShoppingCartAttribute> cartAttributes = shoppingCartItem.getShoppingCartAttributes();\n        if ( !CollectionUtils.isEmpty( cartAttributes ) )\n        {\n            for ( ShoppingCartAttribute attribute : cartAttributes )\n            {\n                ProductAttribute productAttribute = productAttributeService.getById( attribute.getAttributeId() );\n                if ( productAttribute != null\n                    && productAttribute.getProduct().getId().longValue() == product.getId().longValue() )\n                {\n                    com.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem attributeItem =\n                        new com.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem( item,\n                                                                                                         productAttribute );\n\n                    item.addAttributes( attributeItem );\n                }\n            }\n        }\n        return item;\n\n    }\n\n    \n    //used for api\n\tprivate com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem(ShoppingCart cartModel,\n\t\t\t PersistableShoppingCartItem shoppingCartItem, MerchantStore store) throws Exception {\n\n\t\tProduct product = productService.getById(shoppingCartItem.getProduct());\n\n\t\tif (product == null) {\n\t\t\tthrow new ResourceNotFoundException(\"Item with id \" + shoppingCartItem.getProduct() + \" does not exist\");\n\t\t}\n\n\t\tif (product.getMerchantStore().getId().intValue() != store.getId().intValue()) {\n\t\t\tthrow new ResourceNotFoundException(\"Item with id \" + shoppingCartItem.getProduct() + \" does not belong to merchant \"\n\t\t\t\t\t+ store.getId());\n\t\t}\n\t\t\n\t\t/**\n\t\t * Check if product quantity is 0\n\t\t * Check if product is available\n\t\t * Check if date available <= now\n\t\t */\n        \n        Set<ProductAvailability> availabilities = product.getAvailabilities();\n        if(availabilities == null) {\n        \t\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not properly configured\" );\n        \t\n        }\n        \t\n        for(ProductAvailability availability : availabilities) {\n        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() ==0) {\n                throw new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        \t}\n        }\n        \n        if(!product.isAvailable()) {\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        }\n        \n        if(!DateUtil.dateBeforeEqualsDate(product.getDateAvailable(), new Date())) {\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        }\n\t\t\n\n\t\tcom.salesmanager.core.model.shoppingcart.ShoppingCartItem item = shoppingCartService\n\t\t\t\t.populateShoppingCartItem(product);\n\n\t\titem.setQuantity(shoppingCartItem.getQuantity());\n\t\titem.setShoppingCart(cartModel);\n\t\t\n\t\t//set attributes\n\t\tList<com.salesmanager.shop.model.catalog.product.attribute.ProductAttribute> attributes = shoppingCartItem.getAttributes();\n\t\tif (!CollectionUtils.isEmpty(attributes)) {\n\t\t\tfor(com.salesmanager.shop.model.catalog.product.attribute.ProductAttribute attribute : attributes) {\n\t\t\t\t\n\t\t\t\tProductAttribute productAttribute = productAttributeService.getById(attribute.getId());\n\t\t\t\t\n\t\t\t\tif (productAttribute != null\n\t\t\t\t\t\t&& productAttribute.getProduct().getId().longValue() == product.getId().longValue()) {\n\t\t\t\t\t\n\t\t\t\t\tcom.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem attributeItem = new com.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem(\n\t\t\t\t\t\t\titem, productAttribute);\n\n\t\t\t\t\titem.addAttributes(attributeItem);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn item;\n\n\t}   \n    \n\n    @Override\n    public ShoppingCart createCartModel( final String shoppingCartCode, final MerchantStore store,final Customer customer )\n        throws Exception\n    {\n        final Long CustomerId = customer != null ? customer.getId() : null;\n        ShoppingCart cartModel = new ShoppingCart();\n        if ( StringUtils.isNotBlank( shoppingCartCode ) )\n        {\n            cartModel.setShoppingCartCode( shoppingCartCode );\n        }\n        else\n        {\n            cartModel.setShoppingCartCode( uniqueShoppingCartCode() );\n        }\n\n        cartModel.setMerchantStore( store );\n        if ( CustomerId != null )\n        {\n            cartModel.setCustomerId( CustomerId );\n        }\n        shoppingCartService.create( cartModel );\n        return cartModel;\n    }\n\n\n\n\n\n    private com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate( final long entryId,\n                                                                                                 final ShoppingCart cartModel )\n    {\n        if ( CollectionUtils.isNotEmpty( cartModel.getLineItems() ) )\n        {\n            for ( com.salesmanager.core.model.shoppingcart.ShoppingCartItem shoppingCartItem : cartModel.getLineItems() )\n            {\n                if ( shoppingCartItem.getId().longValue() == entryId )\n                {\n                    LOG.info( \"Found line item  for given entry id: \" + entryId );\n                    return shoppingCartItem;\n\n                }\n            }\n        }\n        LOG.info( \"Unable to find any entry for given Id: \" + entryId );\n        return null;\n    }\n\n    private Object getKeyValue( final String key )\n    {\n        ServletRequestAttributes reqAttr = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n        return reqAttr.getRequest().getAttribute( key );\n    }\n\n    @Override\n    public ShoppingCartData getShoppingCartData( final Customer customer, final MerchantStore store,\n                                                 final String shoppingCartId, Language language)\n        throws Exception\n    {\n\n        ShoppingCart cart = null;\n        try\n        {\n            if ( customer != null )\n            {\n                LOG.info( \"Reteriving customer shopping cart...\" );\n\n                cart = shoppingCartService.getShoppingCart( customer );\n\n            }\n\n            else\n            {\n                if ( StringUtils.isNotBlank( shoppingCartId ) && cart == null )\n                {\n                    cart = shoppingCartService.getByCode( shoppingCartId, store );\n                }\n\n            }\n        }\n        catch ( ServiceException ex )\n        {\n            LOG.error( \"Error while retriving cart from customer\", ex );\n        }\n        catch( NoResultException nre) {\n        \t//nothing\n        }\n\n        if ( cart == null )\n        {\n            return null;\n        }\n\n        LOG.info( \"Cart model found.\" );\n\n        ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n        shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n        shoppingCartDataPopulator.setPricingService( pricingService );\n        shoppingCartDataPopulator.setimageUtils(imageUtils);\n\n        //Language language = (Language) getKeyValue( Constants.LANGUAGE );\n        MerchantStore merchantStore = (MerchantStore) getKeyValue( Constants.MERCHANT_STORE );\n        \n        ShoppingCartData shoppingCartData = shoppingCartDataPopulator.populate( cart, merchantStore, language );\n        \n/*        List<ShoppingCartItem> unavailables = new ArrayList<ShoppingCartItem>();\n        List<ShoppingCartItem> availables = new ArrayList<ShoppingCartItem>();\n        //Take out items no more available\n        List<ShoppingCartItem> items = shoppingCartData.getShoppingCartItems();\n        for(ShoppingCartItem item : items) {\n        \tString code = item.getProductCode();\n        \tProduct p =productService.getByCode(code, language);\n        \tif(!p.isAvailable()) {\n        \t\tunavailables.add(item);\n        \t} else {\n        \t\tavailables.add(item);\n        \t}\n        \t\n        }\n        shoppingCartData.setShoppingCartItems(availables);\n        shoppingCartData.setUnavailables(unavailables);*/\n        \n        return shoppingCartData;\n\n    }\n\n    //@Override\n    public ShoppingCartData getShoppingCartData( final ShoppingCart shoppingCartModel, Language language)\n        throws Exception\n    {\n\n        ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n        shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n        shoppingCartDataPopulator.setPricingService( pricingService );\n        shoppingCartDataPopulator.setimageUtils(imageUtils);\n        //Language language = (Language) getKeyValue( Constants.LANGUAGE );\n        MerchantStore merchantStore = (MerchantStore) getKeyValue( Constants.MERCHANT_STORE );\n        return shoppingCartDataPopulator.populate( shoppingCartModel, merchantStore, language );\n    }\n\n\t@Override\n    public ShoppingCartData removeCartItem( final Long itemID, final String cartId ,final MerchantStore store,final Language language )\n        throws Exception\n    {\n        if ( StringUtils.isNotBlank( cartId ) )\n        {\n\n            ShoppingCart cartModel = getCartModel( cartId,store );\n            if ( cartModel != null )\n            {\n                if ( CollectionUtils.isNotEmpty( cartModel.getLineItems() ) )\n                {\n                    Set<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> shoppingCartItemSet =\n                        new HashSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem>();\n                    for ( com.salesmanager.core.model.shoppingcart.ShoppingCartItem shoppingCartItem : cartModel.getLineItems() )\n                    {\n                        if(shoppingCartItem.getId().longValue() == itemID.longValue() )\n                        {\n                    \t\tshoppingCartService.deleteShoppingCartItem(itemID);\n                        } else {\n                            shoppingCartItemSet.add(shoppingCartItem);\n                        }\n                    }\n                    \n                    cartModel.setLineItems(shoppingCartItemSet);\n\n\n                    ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n                    shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n                    shoppingCartDataPopulator.setPricingService( pricingService );\n                    shoppingCartDataPopulator.setimageUtils(imageUtils);\n                    return shoppingCartDataPopulator.populate( cartModel, store, language );\n                    \n\n                }\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public ShoppingCartData updateCartItem( final Long itemID, final String cartId, final long newQuantity,final MerchantStore store, final Language language )\n        throws Exception\n    {\n        if ( newQuantity < 1 )\n        {\n            throw new CartModificationException( \"Quantity must not be less than one\" );\n        }\n        if ( StringUtils.isNotBlank( cartId ) )\n        {\n            ShoppingCart cartModel = getCartModel( cartId,store );\n            if ( cartModel != null )\n            {\n                com.salesmanager.core.model.shoppingcart.ShoppingCartItem entryToUpdate =\n                    getEntryToUpdate( itemID.longValue(), cartModel );\n\n                if ( entryToUpdate == null )\n                {\n                    throw new CartModificationException( \"Unknown entry number.\" );\n                }\n\n                entryToUpdate.getProduct();\n\n                LOG.info( \"Updating cart entry quantity to\" + newQuantity );\n                entryToUpdate.setQuantity( (int) newQuantity );\n                List<ProductAttribute> productAttributes = new ArrayList<ProductAttribute>();\n                productAttributes.addAll( entryToUpdate.getProduct().getAttributes() );\n                final FinalPrice finalPrice =\n                    productPriceUtils.getFinalProductPrice( entryToUpdate.getProduct(), productAttributes );\n                entryToUpdate.setItemPrice( finalPrice.getFinalPrice() );\n                shoppingCartService.saveOrUpdate( cartModel );\n\n                LOG.info( \"Cart entry updated with desired quantity\" );\n                ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n                shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n                shoppingCartDataPopulator.setPricingService( pricingService );\n                shoppingCartDataPopulator.setimageUtils(imageUtils);\n                return shoppingCartDataPopulator.populate( cartModel, store, language );\n\n            }\n        }\n        return null;\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n\t@Override\n    public ShoppingCartData updateCartItems( final List<ShoppingCartItem> shoppingCartItems, final MerchantStore store, final Language language )\n            throws Exception\n        {\n    \t\n    \t\tValidate.notEmpty(shoppingCartItems,\"shoppingCartItems null or empty\");\n    \t\tShoppingCart cartModel = null;\n    \t\tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> cartItems = new HashSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem>();\n    \t\tfor(ShoppingCartItem item : shoppingCartItems) {\n    \t\t\t\n    \t\t\tif(item.getQuantity()<1) {\n    \t\t\t\tthrow new CartModificationException( \"Quantity must not be less than one\" );\n    \t\t\t}\n    \t\t\t\n    \t\t\tif(cartModel==null) {\n    \t\t\t\tcartModel = getCartModel( item.getCode(), store );\n    \t\t\t}\n    \t\t\t\n                com.salesmanager.core.model.shoppingcart.ShoppingCartItem entryToUpdate =\n                        getEntryToUpdate( item.getId(), cartModel );\n\n                if ( entryToUpdate == null ) {\n                        throw new CartModificationException( \"Unknown entry number.\" );\n                }\n\n                entryToUpdate.getProduct();\n\n                LOG.info( \"Updating cart entry quantity to\" + item.getQuantity() );\n                entryToUpdate.setQuantity( (int) item.getQuantity() );\n                \n                List<ProductAttribute> productAttributes = new ArrayList<ProductAttribute>();\n                productAttributes.addAll( entryToUpdate.getProduct().getAttributes() );\n                \n                final FinalPrice finalPrice =\n                        productPriceUtils.getFinalProductPrice( entryToUpdate.getProduct(), productAttributes );\n                entryToUpdate.setItemPrice( finalPrice.getFinalPrice() );\n                    \n\n                cartItems.add(entryToUpdate);\n    \t\t\t\n    \t\t\t\n    \t\t\t\n    \t\t\t\n    \t\t}\n    \t\t\n    \t\tcartModel.setLineItems(cartItems);\n    \t\tshoppingCartService.saveOrUpdate( cartModel );\n\n    \t\t\n            LOG.info( \"Cart entry updated with desired quantity\" );\n            ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n            shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n            shoppingCartDataPopulator.setPricingService( pricingService );\n            shoppingCartDataPopulator.setimageUtils(imageUtils);\n            return shoppingCartDataPopulator.populate( cartModel, store, language );\n\n        }\n\n\n    private ShoppingCart getCartModel( final String cartId,final MerchantStore store )\n    {\n        if ( StringUtils.isNotBlank( cartId ) )\n        {\n           try\n            {\n                return shoppingCartService.getByCode( cartId, store );\n            }\n            catch ( ServiceException e )\n            {\n                LOG.error( \"unable to find any cart asscoiated with this Id: \" + cartId );\n                LOG.error( \"error while fetching cart model...\", e );\n                return null;\n            }\n            catch( NoResultException nre) {\n           \t//nothing\n            }\n\n        }\n        return null;\n    }\n\n\t@Override\n\tpublic ShoppingCartData getShoppingCartData(String code, MerchantStore store, Language language) {\n\t\ttry {\n\t\t\tShoppingCart cartModel = shoppingCartService.getByCode( code, store );\n\t\t\tif(cartModel!=null) {\n\t\t\t\tShoppingCartData cart = getShoppingCartData(cartModel, language);\n\t\t\t\treturn cart;\n\t\t\t}\n\t\t} catch( NoResultException nre) {\n\t        \t//nothing\n\n\t\t} catch(Exception e) {\n\t\t\tLOG.error(\"Cannot retrieve cart code \" + code,e);\n\t\t}\n\n\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic ShoppingCart getShoppingCartModel(String shoppingCartCode,\n\t\t\tMerchantStore store) throws Exception {\n\t\treturn shoppingCartService.getByCode( shoppingCartCode, store );\n\t}\n\n\t@Override\n\tpublic ShoppingCart getShoppingCartModel(Customer customer,\n\t\t\tMerchantStore store) throws Exception {\n\t\treturn shoppingCartService.getByCustomer(customer);\n\t}\n\n\t@Override\n\tpublic void saveOrUpdateShoppingCart(ShoppingCart cart) throws Exception {\n\t\tshoppingCartService.saveOrUpdate(cart);\n\t\t\n\t}\n\n\t@Override\n\tpublic ReadableShoppingCart getCart(Customer customer, MerchantStore store, Language language) throws Exception {\n\t\t\n\t\tValidate.notNull(customer,\"Customer cannot be null\");\n\t\tValidate.notNull(customer.getId(),\"Customer.id cannot be null or empty\");\n\t\t\n\t\t//Check if customer has an existing shopping cart\n\t\tShoppingCart cartModel = shoppingCartService.getByCustomer(customer);\n\t\t\n\t\tif(cartModel == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n        shoppingCartCalculationService.calculate( cartModel, store, language );\n        \n        ReadableShoppingCartPopulator readableShoppingCart = new ReadableShoppingCartPopulator();\n        \n        readableShoppingCart.setImageUtils(imageUtils);\n        readableShoppingCart.setPricingService(pricingService);\n        readableShoppingCart.setProductAttributeService(productAttributeService);\n        readableShoppingCart.setShoppingCartCalculationService(shoppingCartCalculationService);\n  \n        ReadableShoppingCart readableCart = new  ReadableShoppingCart();\n        \n        readableShoppingCart.populate(cartModel, readableCart,  store, language);\n\n\t\t\n\t\treturn readableCart;\n\t}\n\t\n\t@Override\n\tpublic ReadableShoppingCart addToCart(PersistableShoppingCartItem item, MerchantStore store,\n\t\t\tLanguage language) throws Exception {\n\t\t\n\t\tValidate.notNull(item,\"PersistableShoppingCartItem cannot be null\");\n\t\t\n\t\t//if cart does not exist create a new one\n\n\t\tShoppingCart cartModel = new ShoppingCart();\n\t\tcartModel.setMerchantStore(store);\n\t\tcartModel.setShoppingCartCode(uniqueShoppingCartCode());\n\n\n\t\treturn readableShoppingCart(cartModel,item,store,language);\n\t}\n\t\n\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic void removeShoppingCartItem(String cartCode, Long productId,\n\t      MerchantStore merchant, Language language) throws Exception {\n\t    Validate.notNull(cartCode, \"Shopping cart code must not be null\");\n\t    Validate.notNull(productId, \"product id must not be null\");\n\t    Validate.notNull(merchant, \"MerchantStore must not be null\");\n\t    \n\t  \n\t    //get cart\n\t    ShoppingCart cart = getCartModel(cartCode, merchant);\n\t    \n\t    if(cart == null) {\n\t      throw new ResourceNotFoundException(\"Cart code [ \" + cartCode + \" ] not found\");\n\t    }\n\t    \n\t    Set<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> items = new HashSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem>();\n\t    com.salesmanager.core.model.shoppingcart.ShoppingCartItem itemToDelete = null;\n\t    for ( com.salesmanager.core.model.shoppingcart.ShoppingCartItem shoppingCartItem : cart.getLineItems() )\n        {\n            if ( shoppingCartItem.getProduct().getId().longValue() == productId.longValue() )\n            {\n                //get cart item\n                itemToDelete =\n                    getEntryToUpdate( shoppingCartItem.getId(), cart );\n                \n                \n                //break;\n\n            } else {\n              items.add(shoppingCartItem);\n            }\n        }\n\t    //delete item\n\t    if(itemToDelete!=null) {\n\t      shoppingCartService.deleteShoppingCartItem(itemToDelete.getId());\n\t    }\n        \n        //remaining items\n\t    if(items.size()>0) {\n\t    \tcart.setLineItems(items);\n\t    } else {\n\t    \tcart.getLineItems().clear();\n\t    }\n\n        //if(items.size()>0) {\n          shoppingCartService.saveOrUpdate(cart);//update cart with remaining items\n          //ReadableShoppingCart readableShoppingCart = this.getByCode(cartCode, merchant, language);\n        //}\n\n\t}\n\t\n\tprivate ReadableShoppingCart readableShoppingCart(ShoppingCart cartModel, PersistableShoppingCartItem item, MerchantStore store,\n\t\t\tLanguage language) throws Exception {\n\t\t\n\t\t\n\t\tcom.salesmanager.core.model.shoppingcart.ShoppingCartItem itemModel = createCartItem(cartModel, item, store);\n\t\t\n\t\t//need to check if the item is already in the cart\n        boolean duplicateFound = false;\n        //only if item has no attributes\n        if(CollectionUtils.isEmpty(item.getAttributes())) {//increment quantity\n        \t//get duplicate item from the cart\n        \tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> cartModelItems = cartModel.getLineItems();\n        \tfor(com.salesmanager.core.model.shoppingcart.ShoppingCartItem cartItem : cartModelItems) {\n        \t\tif(cartItem.getProduct().getId().longValue()==item.getProduct().longValue()) {\n        \t\t\tif(CollectionUtils.isEmpty(cartItem.getAttributes())) {\n        \t\t\t\tif(!duplicateFound) {\n        \t\t\t\t\tif(!itemModel.isProductVirtual()) {\n\t        \t\t\t\t\tcartItem.setQuantity(cartItem.getQuantity() + item.getQuantity());\n        \t\t\t\t\t}\n        \t\t\t\t\tduplicateFound = true;\n        \t\t\t\t\tbreak;\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n        } \n        \n        if(!duplicateFound) {\n        \tcartModel.getLineItems().add( itemModel );\n        }\n        \n        saveShoppingCart( cartModel );\n\n        //refresh cart\n        cartModel = shoppingCartService.getById(cartModel.getId(), store);\n\n        shoppingCartCalculationService.calculate( cartModel, store, language );\n        \n        ReadableShoppingCartPopulator readableShoppingCart = new ReadableShoppingCartPopulator();\n        \n        readableShoppingCart.setImageUtils(imageUtils);\n        readableShoppingCart.setPricingService(pricingService);\n        readableShoppingCart.setProductAttributeService(productAttributeService);\n        readableShoppingCart.setShoppingCartCalculationService(shoppingCartCalculationService);\n  \n        ReadableShoppingCart readableCart = new  ReadableShoppingCart();\n        \n        readableShoppingCart.populate(cartModel, readableCart,  store, language);\n\n\t\t\n\t\treturn readableCart;\n\t\t\n\t}\n\n\n\tprivate ReadableShoppingCart modifyCart(ShoppingCart cartModel, PersistableShoppingCartItem item, MerchantStore store,\n\t\t\tLanguage language) throws Exception {\n\t\t\n\t\t\n\t\tcom.salesmanager.core.model.shoppingcart.ShoppingCartItem itemModel = createCartItem(cartModel, item, store);\n\n        boolean itemModified = false;\n        //check if existing product\n       \tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> items = cartModel.getLineItems();\n       \t//com.salesmanager.core.model.shoppingcart.ShoppingCartItem affectedItem = null;\n       \tif(!CollectionUtils.isEmpty(items)) {\n       \t\tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> newItems = new HashSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem>();\n       \t\tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> removeItems = new HashSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem>();\n\t    \tfor(com.salesmanager.core.model.shoppingcart.ShoppingCartItem anItem : items) {//take care of existing product\n\t    \t\tif(itemModel.getProduct().getId().longValue() == anItem.getProduct().getId()) {\n\t    \t\t\tif(item.getQuantity()==0) {//left aside item to be removed\n\t    \t\t\t\t//don't add it to new list of item\n\t    \t\t\t\tremoveItems.add(anItem);\n\t    \t\t\t} else {\n\t    \t\t\t\t//new quantity\n\t    \t\t\t\tanItem.setQuantity(item.getQuantity());\n\t    \t\t\t\tnewItems.add(anItem);\n\t    \t\t\t}\n\t    \t\t\titemModified = true;\n\t    \t\t} else {\n\t    \t\t\tnewItems.add(anItem);\n\t    \t\t}\n\t    \t}\n\t    \t\n\t    \tif(!removeItems.isEmpty()) {\n\t    \t\tfor(com.salesmanager.core.model.shoppingcart.ShoppingCartItem emptyItem : removeItems) {\n\t    \t\t\tshoppingCartService.deleteShoppingCartItem(emptyItem.getId());\n\t    \t\t}\n\t    \t\t\n\t    \t}\n\t    \t\n\t    \tif(!itemModified) {\n\t    \t  newItems.add(itemModel);\n\t    \t}\n\t    \t\n\t    \tif(newItems.isEmpty()) {\n\t    \t\tnewItems = null;\n\t    \t}\n\t    \t\n\t    \tcartModel.setLineItems(newItems);\n       \t} else {\n           \t//new item\n             if(item.getQuantity() > 0) {\n                cartModel.getLineItems().add( itemModel );\n             }\n       \t}\n\n       \t//if cart items are null just return cart with no items\n\n        saveShoppingCart( cartModel );\n\n        //refresh cart\n        cartModel = shoppingCartService.getById(cartModel.getId(), store);\n        \n        if(cartModel==null) {\n        \treturn null;\n        }\n\n        shoppingCartCalculationService.calculate( cartModel, store, language );\n        \n        ReadableShoppingCartPopulator readableShoppingCart = new ReadableShoppingCartPopulator();\n        \n        readableShoppingCart.setImageUtils(imageUtils);\n        readableShoppingCart.setPricingService(pricingService);\n        readableShoppingCart.setProductAttributeService(productAttributeService);\n        readableShoppingCart.setShoppingCartCalculationService(shoppingCartCalculationService);\n  \n        ReadableShoppingCart readableCart = new  ReadableShoppingCart();\n        \n        readableShoppingCart.populate(cartModel, readableCart,  store, language);\n\n\t\t\n\t\treturn readableCart;\n\t\t\n\t}\n\n\t@Override\n\tpublic ReadableShoppingCart addToCart(Customer customer, PersistableShoppingCartItem item, MerchantStore store,\n\t\t\tLanguage language) throws Exception {\n\t\t\n\t\tValidate.notNull(customer,\"Customer cannot be null\");\n\t\tValidate.notNull(customer.getId(),\"Customer.id cannot be null or empty\");\n\t\t\n\t\t//Check if customer has an existing shopping cart\n\t\tShoppingCart cartModel = shoppingCartService.getByCustomer(customer);\n\t\t\n\t\t//if cart does not exist create a new one\n\t\tif(cartModel==null) {\n\t\t\tcartModel = new ShoppingCart();\n\t\t\tcartModel.setCustomerId(customer.getId());\n\t\t\tcartModel.setMerchantStore(store);\n\t\t\tcartModel.setShoppingCartCode(uniqueShoppingCartCode());\n\t\t}\n\t\t\n\t\treturn readableShoppingCart(cartModel,item,store,language);\n\t}\n\t\n\t@Override\n\tpublic ReadableShoppingCart modifyCart(String cartCode, PersistableShoppingCartItem item, MerchantStore store,\n\t\t\tLanguage language) throws Exception {\n\n\t\tValidate.notNull(cartCode,\"PString cart code cannot be null\");\n\t\tValidate.notNull(item,\"PersistableShoppingCartItem cannot be null\");\n\t\t\n\t\tShoppingCart cartModel = this.getCartModel(cartCode, store);\n\n\n\t\treturn modifyCart(cartModel,item, store, language);\n\t\t\n\t\t\n\t}\n\t\n\tprivate void saveShoppingCart(ShoppingCart shoppingCart) throws Exception {\n\t\tshoppingCartService.save(shoppingCart);\n\t}\n\t\n\tprivate String uniqueShoppingCartCode() {\n\t\treturn UUID.randomUUID().toString().replaceAll( \"-\", \"\" );\n\t}\n\n\t@Override\n\tpublic ReadableShoppingCart getById(Long shoppingCartId, MerchantStore store, Language language) throws Exception {\n\n\t\tShoppingCart cart = shoppingCartService.getById(shoppingCartId);\n\t\t\n\t\tReadableShoppingCart readableCart = null;\n\t\t\n\t\tif(cart != null) {\n\t\t\t\n\t        ReadableShoppingCartPopulator readableShoppingCart = new ReadableShoppingCartPopulator();\n\t        \n\t        readableShoppingCart.setImageUtils(imageUtils);\n\t        readableShoppingCart.setPricingService(pricingService);\n\t        readableShoppingCart.setProductAttributeService(productAttributeService);\n\t        readableShoppingCart.setShoppingCartCalculationService(shoppingCartCalculationService);\n\n\t        readableShoppingCart.populate(cart, readableCart,  store, language);\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\treturn readableCart;\n\t}\n\n\t@Override\n\tpublic ShoppingCart getShoppingCartModel(Long id, MerchantStore store) throws Exception {\n\t\treturn shoppingCartService.getById(id);\n\t}\n\n\t@Override\n\tpublic ReadableShoppingCart getByCode(String code, MerchantStore store, Language language) throws Exception {\n\t\t\n\t\tShoppingCart cart = shoppingCartService.getByCode(code, store);\n\t\t\n\t\tReadableShoppingCart readableCart = null;\n\t\t\n\t\tif(cart != null) {\n\t\t\t\n\t        ReadableShoppingCartPopulator readableShoppingCart = new ReadableShoppingCartPopulator();\n\t        \n\t        readableShoppingCart.setImageUtils(imageUtils);\n\t        readableShoppingCart.setPricingService(pricingService);\n\t        readableShoppingCart.setProductAttributeService(productAttributeService);\n\t        readableShoppingCart.setShoppingCartCalculationService(shoppingCartCalculationService);\n\n\t        readableCart = readableShoppingCart.populate(cart, null,  store, language);\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\treturn readableCart;\n\t\t\n\t}\n\n\n\n}\n"], "fixing_code": ["/**\n *\n */\npackage com.salesmanager.shop.store.controller.shoppingCart.facade;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.UUID;\n\nimport javax.inject.Inject;\nimport javax.persistence.NoResultException;\n\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport com.salesmanager.core.business.exception.ServiceException;\nimport com.salesmanager.core.business.services.catalog.product.PricingService;\nimport com.salesmanager.core.business.services.catalog.product.ProductService;\nimport com.salesmanager.core.business.services.catalog.product.attribute.ProductAttributeService;\nimport com.salesmanager.core.business.services.shoppingcart.ShoppingCartCalculationService;\nimport com.salesmanager.core.business.services.shoppingcart.ShoppingCartService;\nimport com.salesmanager.core.business.utils.ProductPriceUtils;\nimport com.salesmanager.core.model.catalog.product.Product;\nimport com.salesmanager.core.model.catalog.product.attribute.ProductAttribute;\nimport com.salesmanager.core.model.catalog.product.availability.ProductAvailability;\nimport com.salesmanager.core.model.catalog.product.price.FinalPrice;\nimport com.salesmanager.core.model.customer.Customer;\nimport com.salesmanager.core.model.merchant.MerchantStore;\nimport com.salesmanager.core.model.reference.language.Language;\nimport com.salesmanager.core.model.shoppingcart.ShoppingCart;\nimport com.salesmanager.shop.constants.Constants;\nimport com.salesmanager.shop.model.shoppingcart.CartModificationException;\nimport com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem;\nimport com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart;\nimport com.salesmanager.shop.model.shoppingcart.ShoppingCartAttribute;\nimport com.salesmanager.shop.model.shoppingcart.ShoppingCartData;\nimport com.salesmanager.shop.model.shoppingcart.ShoppingCartItem;\nimport com.salesmanager.shop.populator.shoppingCart.ReadableShoppingCartPopulator;\nimport com.salesmanager.shop.populator.shoppingCart.ShoppingCartDataPopulator;\nimport com.salesmanager.shop.store.api.exception.ResourceNotFoundException;\nimport com.salesmanager.shop.utils.DateUtil;\nimport com.salesmanager.shop.utils.ImageFilePath;\n\n/**\n * @author Umesh Awasthi\n * @version 1.0\n * @since 1.0\n */\n@Service( value = \"shoppingCartFacade\" )\npublic class ShoppingCartFacadeImpl\n    implements ShoppingCartFacade\n{\n\n    \n    private static final Logger LOG = LoggerFactory.getLogger(ShoppingCartFacadeImpl.class);\n\n    @Inject\n    private ShoppingCartService shoppingCartService;\n\n    @Inject\n    ShoppingCartCalculationService shoppingCartCalculationService;\n\n    @Inject\n    private ProductPriceUtils productPriceUtils;\n\n    @Inject\n    private ProductService productService;\n\n    @Inject\n    private PricingService pricingService;\n\n    @Inject\n    private ProductAttributeService productAttributeService;\n\n\t@Inject\n\t@Qualifier(\"img\")\n\tprivate ImageFilePath imageUtils;\n\n    public void deleteShoppingCart(final Long id, final MerchantStore store) throws Exception {\n    \tShoppingCart cart = shoppingCartService.getById(id, store);\n    \tif(cart!=null) {\n    \t\tshoppingCartService.deleteCart(cart);\n    \t}\n    }\n    \n    @Override\n    public void deleteShoppingCart(final String code, final MerchantStore store) throws Exception {\n    \tShoppingCart cart = shoppingCartService.getByCode(code, store);\n    \tif(cart!=null) {\n    \t\tshoppingCartService.deleteCart(cart);\n    \t}\n    }\n\n    @Override\n    public ShoppingCartData addItemsToShoppingCart( final ShoppingCartData shoppingCartData,\n                                                    final ShoppingCartItem item, final MerchantStore store, final Language language,final Customer customer )\n        throws Exception\n    {\n\n        ShoppingCart cartModel = null;\n        if(item.getQuantity() < 1) item.setQuantity(1);\n        /**\n         * Sometimes a user logs in and a shopping cart is present in db (shoppingCartData\n         * but ui has no cookie with shopping cart code so the cart code will have\n         * to be added to the item in order to process add to cart normally\n         */\n        if(shoppingCartData != null && StringUtils.isBlank(item.getCode())) {\n        \titem.setCode(shoppingCartData.getCode());\n        }\n        \n        \n        if ( !StringUtils.isBlank( item.getCode() ) )\n        {\n            // get it from the db\n            cartModel = getShoppingCartModel( item.getCode(), store );\n            if ( cartModel == null )\n            {\n                cartModel = createCartModel( shoppingCartData.getCode(), store,customer );\n            }\n\n        }\n\n        if ( cartModel == null )\n        {\n\n            final String shoppingCartCode =\n                StringUtils.isNotBlank( shoppingCartData.getCode() ) ? shoppingCartData.getCode() : null;\n            cartModel = createCartModel( shoppingCartCode, store,customer );\n\n        }\n        com.salesmanager.core.model.shoppingcart.ShoppingCartItem shoppingCartItem =\n            createCartItem( cartModel, item, store );\n        \n        \n        boolean duplicateFound = false;\n        if(CollectionUtils.isEmpty(item.getShoppingCartAttributes())) {//increment quantity\n        \t//get duplicate item from the cart\n        \tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> cartModelItems = cartModel.getLineItems();\n        \tfor(com.salesmanager.core.model.shoppingcart.ShoppingCartItem cartItem : cartModelItems) {\n        \t\tif(cartItem.getProduct().getId().longValue()==shoppingCartItem.getProduct().getId().longValue()) {\n        \t\t\tif(CollectionUtils.isEmpty(cartItem.getAttributes())) {\n        \t\t\t\tif(!duplicateFound) {\n        \t\t\t\t\tif(!shoppingCartItem.isProductVirtual()) {\n\t        \t\t\t\t\tcartItem.setQuantity(cartItem.getQuantity() + shoppingCartItem.getQuantity());\n        \t\t\t\t\t}\n        \t\t\t\t\tduplicateFound = true;\n        \t\t\t\t\tbreak;\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        \n        if(!duplicateFound) {\n        \t//shoppingCartItem.getAttributes().stream().forEach(a -> {a.setProductAttributeId(productAttributeId);});\n        \tcartModel.getLineItems().add( shoppingCartItem );\n        }\n        \n        /** Update cart in database with line items **/\n        shoppingCartService.saveOrUpdate( cartModel );\n\n        //refresh cart\n        cartModel = shoppingCartService.getById(cartModel.getId(), store);\n\n        shoppingCartCalculationService.calculate( cartModel, store, language );\n\n        ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n        shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n        shoppingCartDataPopulator.setPricingService( pricingService );\n        shoppingCartDataPopulator.setimageUtils(imageUtils);\n\n\n        return shoppingCartDataPopulator.populate( cartModel, store, language );\n    }\n\n    private com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem( final ShoppingCart cartModel,\n                                                                                               final ShoppingCartItem shoppingCartItem,\n                                                                                               final MerchantStore store )\n        throws Exception\n    {\n\n        Product product = productService.getById( shoppingCartItem.getProductId() );\n\n        if ( product == null )\n        {\n            throw new Exception( \"Item with id \" + shoppingCartItem.getProductId() + \" does not exist\" );\n        }\n\n        if ( product.getMerchantStore().getId().intValue() != store.getId().intValue() )\n        {\n            throw new Exception( \"Item with id \" + shoppingCartItem.getProductId() + \" does not belong to merchant \"\n                + store.getId() );\n        }\n        \n\t\t/**\n\t\t * Check if product quantity is 0\n\t\t * Check if product is available\n\t\t * Check if date available <= now\n\t\t */\n        \n        Set<ProductAvailability> availabilities = product.getAvailabilities();\n        if(availabilities == null) {\n        \t\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not properly configured\" );\n        \t\n        }\n        \t\n        for(ProductAvailability availability : availabilities) {\n        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() <= 0) {\n                throw new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        \t}\n        }\n        \n        if(!product.isAvailable()) {\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        }\n        \n        if(!DateUtil.dateBeforeEqualsDate(product.getDateAvailable(), new Date())) {\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        }\n\n\n        com.salesmanager.core.model.shoppingcart.ShoppingCartItem item =\n            shoppingCartService.populateShoppingCartItem( product );\n\n        item.setQuantity( shoppingCartItem.getQuantity() );\n        item.setShoppingCart( cartModel );\n\n        // attributes\n        List<ShoppingCartAttribute> cartAttributes = shoppingCartItem.getShoppingCartAttributes();\n        if ( !CollectionUtils.isEmpty( cartAttributes ) )\n        {\n            for ( ShoppingCartAttribute attribute : cartAttributes )\n            {\n                ProductAttribute productAttribute = productAttributeService.getById( attribute.getAttributeId() );\n                if ( productAttribute != null\n                    && productAttribute.getProduct().getId().longValue() == product.getId().longValue() )\n                {\n                    com.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem attributeItem =\n                        new com.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem( item,\n                                                                                                         productAttribute );\n\n                    item.addAttributes( attributeItem );\n                }\n            }\n        }\n        return item;\n\n    }\n\n    \n    //used for api\n\tprivate com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem(ShoppingCart cartModel,\n\t\t\t PersistableShoppingCartItem shoppingCartItem, MerchantStore store) throws Exception {\n\n\t\tProduct product = productService.getById(shoppingCartItem.getProduct());\n\n\t\tif (product == null) {\n\t\t\tthrow new ResourceNotFoundException(\"Item with id \" + shoppingCartItem.getProduct() + \" does not exist\");\n\t\t}\n\n\t\tif (product.getMerchantStore().getId().intValue() != store.getId().intValue()) {\n\t\t\tthrow new ResourceNotFoundException(\"Item with id \" + shoppingCartItem.getProduct() + \" does not belong to merchant \"\n\t\t\t\t\t+ store.getId());\n\t\t}\n\t\t\n\t\t/**\n\t\t * Check if product quantity is 0\n\t\t * Check if product is available\n\t\t * Check if date available <= now\n\t\t */\n        \n        Set<ProductAvailability> availabilities = product.getAvailabilities();\n        if(availabilities == null) {\n        \t\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not properly configured\" );\n        \t\n        }\n        \t\n        for(ProductAvailability availability : availabilities) {\n        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() <= 0) {\n                throw new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        \t}\n        }\n        \n        if(!product.isAvailable()) {\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        }\n        \n        if(!DateUtil.dateBeforeEqualsDate(product.getDateAvailable(), new Date())) {\n        \tthrow new Exception( \"Item with id \" + product.getId() + \" is not available\");\n        }\n\t\t\n\n\t\tcom.salesmanager.core.model.shoppingcart.ShoppingCartItem item = shoppingCartService\n\t\t\t\t.populateShoppingCartItem(product);\n\n\t\titem.setQuantity(shoppingCartItem.getQuantity());\n\t\titem.setShoppingCart(cartModel);\n\t\t\n\t\t//set attributes\n\t\tList<com.salesmanager.shop.model.catalog.product.attribute.ProductAttribute> attributes = shoppingCartItem.getAttributes();\n\t\tif (!CollectionUtils.isEmpty(attributes)) {\n\t\t\tfor(com.salesmanager.shop.model.catalog.product.attribute.ProductAttribute attribute : attributes) {\n\t\t\t\t\n\t\t\t\tProductAttribute productAttribute = productAttributeService.getById(attribute.getId());\n\t\t\t\t\n\t\t\t\tif (productAttribute != null\n\t\t\t\t\t\t&& productAttribute.getProduct().getId().longValue() == product.getId().longValue()) {\n\t\t\t\t\t\n\t\t\t\t\tcom.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem attributeItem = new com.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem(\n\t\t\t\t\t\t\titem, productAttribute);\n\n\t\t\t\t\titem.addAttributes(attributeItem);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn item;\n\n\t}   \n    \n\n    @Override\n    public ShoppingCart createCartModel( final String shoppingCartCode, final MerchantStore store,final Customer customer )\n        throws Exception\n    {\n        final Long CustomerId = customer != null ? customer.getId() : null;\n        ShoppingCart cartModel = new ShoppingCart();\n        if ( StringUtils.isNotBlank( shoppingCartCode ) )\n        {\n            cartModel.setShoppingCartCode( shoppingCartCode );\n        }\n        else\n        {\n            cartModel.setShoppingCartCode( uniqueShoppingCartCode() );\n        }\n\n        cartModel.setMerchantStore( store );\n        if ( CustomerId != null )\n        {\n            cartModel.setCustomerId( CustomerId );\n        }\n        shoppingCartService.create( cartModel );\n        return cartModel;\n    }\n\n\n\n\n\n    private com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate( final long entryId,\n                                                                                                 final ShoppingCart cartModel )\n    {\n        if ( CollectionUtils.isNotEmpty( cartModel.getLineItems() ) )\n        {\n            for ( com.salesmanager.core.model.shoppingcart.ShoppingCartItem shoppingCartItem : cartModel.getLineItems() )\n            {\n                if ( shoppingCartItem.getId().longValue() == entryId )\n                {\n                    LOG.info( \"Found line item  for given entry id: \" + entryId );\n                    return shoppingCartItem;\n\n                }\n            }\n        }\n        LOG.info( \"Unable to find any entry for given Id: \" + entryId );\n        return null;\n    }\n\n    private Object getKeyValue( final String key )\n    {\n        ServletRequestAttributes reqAttr = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n        return reqAttr.getRequest().getAttribute( key );\n    }\n\n    @Override\n    public ShoppingCartData getShoppingCartData( final Customer customer, final MerchantStore store,\n                                                 final String shoppingCartId, Language language)\n        throws Exception\n    {\n\n        ShoppingCart cart = null;\n        try\n        {\n            if ( customer != null )\n            {\n                LOG.info( \"Reteriving customer shopping cart...\" );\n\n                cart = shoppingCartService.getShoppingCart( customer );\n\n            }\n\n            else\n            {\n                if ( StringUtils.isNotBlank( shoppingCartId ) && cart == null )\n                {\n                    cart = shoppingCartService.getByCode( shoppingCartId, store );\n                }\n\n            }\n        }\n        catch ( ServiceException ex )\n        {\n            LOG.error( \"Error while retriving cart from customer\", ex );\n        }\n        catch( NoResultException nre) {\n        \t//nothing\n        }\n\n        if ( cart == null )\n        {\n            return null;\n        }\n\n        LOG.info( \"Cart model found.\" );\n\n        ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n        shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n        shoppingCartDataPopulator.setPricingService( pricingService );\n        shoppingCartDataPopulator.setimageUtils(imageUtils);\n\n        //Language language = (Language) getKeyValue( Constants.LANGUAGE );\n        MerchantStore merchantStore = (MerchantStore) getKeyValue( Constants.MERCHANT_STORE );\n        \n        ShoppingCartData shoppingCartData = shoppingCartDataPopulator.populate( cart, merchantStore, language );\n        \n/*        List<ShoppingCartItem> unavailables = new ArrayList<ShoppingCartItem>();\n        List<ShoppingCartItem> availables = new ArrayList<ShoppingCartItem>();\n        //Take out items no more available\n        List<ShoppingCartItem> items = shoppingCartData.getShoppingCartItems();\n        for(ShoppingCartItem item : items) {\n        \tString code = item.getProductCode();\n        \tProduct p =productService.getByCode(code, language);\n        \tif(!p.isAvailable()) {\n        \t\tunavailables.add(item);\n        \t} else {\n        \t\tavailables.add(item);\n        \t}\n        \t\n        }\n        shoppingCartData.setShoppingCartItems(availables);\n        shoppingCartData.setUnavailables(unavailables);*/\n        \n        return shoppingCartData;\n\n    }\n\n    //@Override\n    public ShoppingCartData getShoppingCartData( final ShoppingCart shoppingCartModel, Language language)\n        throws Exception\n    {\n\n        ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n        shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n        shoppingCartDataPopulator.setPricingService( pricingService );\n        shoppingCartDataPopulator.setimageUtils(imageUtils);\n        //Language language = (Language) getKeyValue( Constants.LANGUAGE );\n        MerchantStore merchantStore = (MerchantStore) getKeyValue( Constants.MERCHANT_STORE );\n        return shoppingCartDataPopulator.populate( shoppingCartModel, merchantStore, language );\n    }\n\n\t@Override\n    public ShoppingCartData removeCartItem( final Long itemID, final String cartId ,final MerchantStore store,final Language language )\n        throws Exception\n    {\n        if ( StringUtils.isNotBlank( cartId ) )\n        {\n\n            ShoppingCart cartModel = getCartModel( cartId,store );\n            if ( cartModel != null )\n            {\n                if ( CollectionUtils.isNotEmpty( cartModel.getLineItems() ) )\n                {\n                    Set<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> shoppingCartItemSet =\n                        new HashSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem>();\n                    for ( com.salesmanager.core.model.shoppingcart.ShoppingCartItem shoppingCartItem : cartModel.getLineItems() )\n                    {\n                        if(shoppingCartItem.getId().longValue() == itemID.longValue() )\n                        {\n                    \t\tshoppingCartService.deleteShoppingCartItem(itemID);\n                        } else {\n                            shoppingCartItemSet.add(shoppingCartItem);\n                        }\n                    }\n                    \n                    cartModel.setLineItems(shoppingCartItemSet);\n\n\n                    ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n                    shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n                    shoppingCartDataPopulator.setPricingService( pricingService );\n                    shoppingCartDataPopulator.setimageUtils(imageUtils);\n                    return shoppingCartDataPopulator.populate( cartModel, store, language );\n                    \n\n                }\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public ShoppingCartData updateCartItem( final Long itemID, final String cartId, final long newQuantity,final MerchantStore store, final Language language )\n        throws Exception\n    {\n        if ( newQuantity < 1 )\n        {\n            throw new CartModificationException( \"Quantity must not be less than one\" );\n        }\n        if ( StringUtils.isNotBlank( cartId ) )\n        {\n            ShoppingCart cartModel = getCartModel( cartId,store );\n            if ( cartModel != null )\n            {\n                com.salesmanager.core.model.shoppingcart.ShoppingCartItem entryToUpdate =\n                    getEntryToUpdate( itemID.longValue(), cartModel );\n\n                if ( entryToUpdate == null )\n                {\n                    throw new CartModificationException( \"Unknown entry number.\" );\n                }\n\n                entryToUpdate.getProduct();\n\n                LOG.info( \"Updating cart entry quantity to\" + newQuantity );\n                entryToUpdate.setQuantity( (int) newQuantity );\n                List<ProductAttribute> productAttributes = new ArrayList<ProductAttribute>();\n                productAttributes.addAll( entryToUpdate.getProduct().getAttributes() );\n                final FinalPrice finalPrice =\n                    productPriceUtils.getFinalProductPrice( entryToUpdate.getProduct(), productAttributes );\n                entryToUpdate.setItemPrice( finalPrice.getFinalPrice() );\n                shoppingCartService.saveOrUpdate( cartModel );\n\n                LOG.info( \"Cart entry updated with desired quantity\" );\n                ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n                shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n                shoppingCartDataPopulator.setPricingService( pricingService );\n                shoppingCartDataPopulator.setimageUtils(imageUtils);\n                return shoppingCartDataPopulator.populate( cartModel, store, language );\n\n            }\n        }\n        return null;\n    }\n    \n    @Override\n    public ShoppingCartData updateCartItems( final List<ShoppingCartItem> shoppingCartItems, final MerchantStore store, final Language language )\n            throws Exception\n        {\n    \t\n    \t\tValidate.notEmpty(shoppingCartItems,\"shoppingCartItems null or empty\");\n    \t\tShoppingCart cartModel = null;\n    \t\tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> cartItems = new HashSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem>();\n    \t\tfor(ShoppingCartItem item : shoppingCartItems) {\n    \t\t\t\n    \t\t\tif(item.getQuantity()<1) {\n    \t\t\t\tthrow new CartModificationException( \"Quantity must not be less than one\" );\n    \t\t\t}\n    \t\t\t\n    \t\t\tif(cartModel==null) {\n    \t\t\t\tcartModel = getCartModel( item.getCode(), store );\n    \t\t\t}\n    \t\t\t\n                com.salesmanager.core.model.shoppingcart.ShoppingCartItem entryToUpdate =\n                        getEntryToUpdate( item.getId(), cartModel );\n\n                if ( entryToUpdate == null ) {\n                        throw new CartModificationException( \"Unknown entry number.\" );\n                }\n\n                entryToUpdate.getProduct();\n\n                LOG.info( \"Updating cart entry quantity to\" + item.getQuantity() );\n                entryToUpdate.setQuantity( (int) item.getQuantity() );\n                \n                List<ProductAttribute> productAttributes = new ArrayList<ProductAttribute>();\n                productAttributes.addAll( entryToUpdate.getProduct().getAttributes() );\n                \n                final FinalPrice finalPrice =\n                        productPriceUtils.getFinalProductPrice( entryToUpdate.getProduct(), productAttributes );\n                entryToUpdate.setItemPrice( finalPrice.getFinalPrice() );\n                    \n\n                cartItems.add(entryToUpdate);\n    \t\t\t\n    \t\t\t\n    \t\t\t\n    \t\t\t\n    \t\t}\n    \t\t\n    \t\tcartModel.setLineItems(cartItems);\n    \t\tshoppingCartService.saveOrUpdate( cartModel );\n\n    \t\t\n            LOG.info( \"Cart entry updated with desired quantity\" );\n            ShoppingCartDataPopulator shoppingCartDataPopulator = new ShoppingCartDataPopulator();\n            shoppingCartDataPopulator.setShoppingCartCalculationService( shoppingCartCalculationService );\n            shoppingCartDataPopulator.setPricingService( pricingService );\n            shoppingCartDataPopulator.setimageUtils(imageUtils);\n            return shoppingCartDataPopulator.populate( cartModel, store, language );\n\n        }\n\n\n    private ShoppingCart getCartModel( final String cartId,final MerchantStore store )\n    {\n        if ( StringUtils.isNotBlank( cartId ) )\n        {\n           try\n            {\n                return shoppingCartService.getByCode( cartId, store );\n            }\n            catch ( ServiceException e )\n            {\n                LOG.error( \"unable to find any cart asscoiated with this Id: \" + cartId );\n                LOG.error( \"error while fetching cart model...\", e );\n                return null;\n            }\n            catch( NoResultException nre) {\n           \t//nothing\n            }\n\n        }\n        return null;\n    }\n\n\t@Override\n\tpublic ShoppingCartData getShoppingCartData(String code, MerchantStore store, Language language) {\n\t\ttry {\n\t\t\tShoppingCart cartModel = shoppingCartService.getByCode( code, store );\n\t\t\tif(cartModel!=null) {\n\t\t\t\tShoppingCartData cart = getShoppingCartData(cartModel, language);\n\t\t\t\treturn cart;\n\t\t\t}\n\t\t} catch( NoResultException nre) {\n\t        \t//nothing\n\n\t\t} catch(Exception e) {\n\t\t\tLOG.error(\"Cannot retrieve cart code \" + code,e);\n\t\t}\n\n\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic ShoppingCart getShoppingCartModel(String shoppingCartCode,\n\t\t\tMerchantStore store) throws Exception {\n\t\treturn shoppingCartService.getByCode( shoppingCartCode, store );\n\t}\n\n\t@Override\n\tpublic ShoppingCart getShoppingCartModel(Customer customer,\n\t\t\tMerchantStore store) throws Exception {\n\t\treturn shoppingCartService.getByCustomer(customer);\n\t}\n\n\t@Override\n\tpublic void saveOrUpdateShoppingCart(ShoppingCart cart) throws Exception {\n\t\tshoppingCartService.saveOrUpdate(cart);\n\t\t\n\t}\n\n\t@Override\n\tpublic ReadableShoppingCart getCart(Customer customer, MerchantStore store, Language language) throws Exception {\n\t\t\n\t\tValidate.notNull(customer,\"Customer cannot be null\");\n\t\tValidate.notNull(customer.getId(),\"Customer.id cannot be null or empty\");\n\t\t\n\t\t//Check if customer has an existing shopping cart\n\t\tShoppingCart cartModel = shoppingCartService.getByCustomer(customer);\n\t\t\n\t\tif(cartModel == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n        shoppingCartCalculationService.calculate( cartModel, store, language );\n        \n        ReadableShoppingCartPopulator readableShoppingCart = new ReadableShoppingCartPopulator();\n        \n        readableShoppingCart.setImageUtils(imageUtils);\n        readableShoppingCart.setPricingService(pricingService);\n        readableShoppingCart.setProductAttributeService(productAttributeService);\n        readableShoppingCart.setShoppingCartCalculationService(shoppingCartCalculationService);\n  \n        ReadableShoppingCart readableCart = new  ReadableShoppingCart();\n        \n        readableShoppingCart.populate(cartModel, readableCart,  store, language);\n\n\t\t\n\t\treturn readableCart;\n\t}\n\t\n\t@Override\n\tpublic ReadableShoppingCart addToCart(PersistableShoppingCartItem item, MerchantStore store,\n\t\t\tLanguage language) throws Exception {\n\t\t\n\t\tValidate.notNull(item,\"PersistableShoppingCartItem cannot be null\");\n\t\t\n\t\t//if cart does not exist create a new one\n\n\t\tShoppingCart cartModel = new ShoppingCart();\n\t\tcartModel.setMerchantStore(store);\n\t\tcartModel.setShoppingCartCode(uniqueShoppingCartCode());\n\n\n\t\treturn readableShoppingCart(cartModel,item,store,language);\n\t}\n\t\n\n\t@Override\n\tpublic void removeShoppingCartItem(String cartCode, Long productId,\n\t      MerchantStore merchant, Language language) throws Exception {\n\t    Validate.notNull(cartCode, \"Shopping cart code must not be null\");\n\t    Validate.notNull(productId, \"product id must not be null\");\n\t    Validate.notNull(merchant, \"MerchantStore must not be null\");\n\t    \n\t  \n\t    //get cart\n\t    ShoppingCart cart = getCartModel(cartCode, merchant);\n\t    \n\t    if(cart == null) {\n\t      throw new ResourceNotFoundException(\"Cart code [ \" + cartCode + \" ] not found\");\n\t    }\n\t    \n\t    Set<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> items = new HashSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem>();\n\t    com.salesmanager.core.model.shoppingcart.ShoppingCartItem itemToDelete = null;\n\t    for ( com.salesmanager.core.model.shoppingcart.ShoppingCartItem shoppingCartItem : cart.getLineItems() )\n        {\n            if ( shoppingCartItem.getProduct().getId().longValue() == productId.longValue() )\n            {\n                //get cart item\n                itemToDelete =\n                    getEntryToUpdate( shoppingCartItem.getId(), cart );\n                \n                \n                //break;\n\n            } else {\n              items.add(shoppingCartItem);\n            }\n        }\n\t    //delete item\n\t    if(itemToDelete!=null) {\n\t      shoppingCartService.deleteShoppingCartItem(itemToDelete.getId());\n\t    }\n        \n        //remaining items\n\t    if(items.size()>0) {\n\t    \tcart.setLineItems(items);\n\t    } else {\n\t    \tcart.getLineItems().clear();\n\t    }\n\n        //if(items.size()>0) {\n          shoppingCartService.saveOrUpdate(cart);//update cart with remaining items\n          //ReadableShoppingCart readableShoppingCart = this.getByCode(cartCode, merchant, language);\n        //}\n\n\t}\n\t\n\tprivate ReadableShoppingCart readableShoppingCart(ShoppingCart cartModel, PersistableShoppingCartItem item, MerchantStore store,\n\t\t\tLanguage language) throws Exception {\n\t\t\n\t\t\n\t\tcom.salesmanager.core.model.shoppingcart.ShoppingCartItem itemModel = createCartItem(cartModel, item, store);\n\t\t\n\t\t//need to check if the item is already in the cart\n        boolean duplicateFound = false;\n        //only if item has no attributes\n        if(CollectionUtils.isEmpty(item.getAttributes())) {//increment quantity\n        \t//get duplicate item from the cart\n        \tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> cartModelItems = cartModel.getLineItems();\n        \tfor(com.salesmanager.core.model.shoppingcart.ShoppingCartItem cartItem : cartModelItems) {\n        \t\tif(cartItem.getProduct().getId().longValue()==item.getProduct().longValue()) {\n        \t\t\tif(CollectionUtils.isEmpty(cartItem.getAttributes())) {\n        \t\t\t\tif(!duplicateFound) {\n        \t\t\t\t\tif(!itemModel.isProductVirtual()) {\n\t        \t\t\t\t\tcartItem.setQuantity(cartItem.getQuantity() + item.getQuantity());\n        \t\t\t\t\t}\n        \t\t\t\t\tduplicateFound = true;\n        \t\t\t\t\tbreak;\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n        } \n        \n        if(!duplicateFound) {\n        \tcartModel.getLineItems().add( itemModel );\n        }\n        \n        saveShoppingCart( cartModel );\n\n        //refresh cart\n        cartModel = shoppingCartService.getById(cartModel.getId(), store);\n\n        shoppingCartCalculationService.calculate( cartModel, store, language );\n        \n        ReadableShoppingCartPopulator readableShoppingCart = new ReadableShoppingCartPopulator();\n        \n        readableShoppingCart.setImageUtils(imageUtils);\n        readableShoppingCart.setPricingService(pricingService);\n        readableShoppingCart.setProductAttributeService(productAttributeService);\n        readableShoppingCart.setShoppingCartCalculationService(shoppingCartCalculationService);\n  \n        ReadableShoppingCart readableCart = new  ReadableShoppingCart();\n        \n        readableShoppingCart.populate(cartModel, readableCart,  store, language);\n\n\t\t\n\t\treturn readableCart;\n\t\t\n\t}\n\n\n\tprivate ReadableShoppingCart modifyCart(ShoppingCart cartModel, PersistableShoppingCartItem item, MerchantStore store,\n\t\t\tLanguage language) throws Exception {\n\t\t\n\t\t\n\t\tcom.salesmanager.core.model.shoppingcart.ShoppingCartItem itemModel = createCartItem(cartModel, item, store);\n\n        boolean itemModified = false;\n        //check if existing product\n       \tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> items = cartModel.getLineItems();\n       \t//com.salesmanager.core.model.shoppingcart.ShoppingCartItem affectedItem = null;\n       \tif(!CollectionUtils.isEmpty(items)) {\n       \t\tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> newItems = new HashSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem>();\n       \t\tSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem> removeItems = new HashSet<com.salesmanager.core.model.shoppingcart.ShoppingCartItem>();\n\t    \tfor(com.salesmanager.core.model.shoppingcart.ShoppingCartItem anItem : items) {//take care of existing product\n\t    \t\tif(itemModel.getProduct().getId().longValue() == anItem.getProduct().getId()) {\n\t    \t\t\tif(item.getQuantity()==0) {//left aside item to be removed\n\t    \t\t\t\t//don't add it to new list of item\n\t    \t\t\t\tremoveItems.add(anItem);\n\t    \t\t\t} else {\n\t    \t\t\t\t//new quantity\n\t    \t\t\t\tanItem.setQuantity(item.getQuantity());\n\t    \t\t\t\tnewItems.add(anItem);\n\t    \t\t\t}\n\t    \t\t\titemModified = true;\n\t    \t\t} else {\n\t    \t\t\tnewItems.add(anItem);\n\t    \t\t}\n\t    \t}\n\t    \t\n\t    \tif(!removeItems.isEmpty()) {\n\t    \t\tfor(com.salesmanager.core.model.shoppingcart.ShoppingCartItem emptyItem : removeItems) {\n\t    \t\t\tshoppingCartService.deleteShoppingCartItem(emptyItem.getId());\n\t    \t\t}\n\t    \t\t\n\t    \t}\n\t    \t\n\t    \tif(!itemModified) {\n\t    \t  newItems.add(itemModel);\n\t    \t}\n\t    \t\n\t    \tif(newItems.isEmpty()) {\n\t    \t\tnewItems = null;\n\t    \t}\n\t    \t\n\t    \tcartModel.setLineItems(newItems);\n       \t} else {\n           \t//new item\n             if(item.getQuantity() > 0) {\n                cartModel.getLineItems().add( itemModel );\n             }\n       \t}\n\n       \t//if cart items are null just return cart with no items\n\n        saveShoppingCart( cartModel );\n\n        //refresh cart\n        cartModel = shoppingCartService.getById(cartModel.getId(), store);\n        \n        if(cartModel==null) {\n        \treturn null;\n        }\n\n        shoppingCartCalculationService.calculate( cartModel, store, language );\n        \n        ReadableShoppingCartPopulator readableShoppingCart = new ReadableShoppingCartPopulator();\n        \n        readableShoppingCart.setImageUtils(imageUtils);\n        readableShoppingCart.setPricingService(pricingService);\n        readableShoppingCart.setProductAttributeService(productAttributeService);\n        readableShoppingCart.setShoppingCartCalculationService(shoppingCartCalculationService);\n  \n        ReadableShoppingCart readableCart = new  ReadableShoppingCart();\n        \n        readableShoppingCart.populate(cartModel, readableCart,  store, language);\n\n\t\t\n\t\treturn readableCart;\n\t\t\n\t}\n\n\t@Override\n\tpublic ReadableShoppingCart addToCart(Customer customer, PersistableShoppingCartItem item, MerchantStore store,\n\t\t\tLanguage language) throws Exception {\n\t\t\n\t\tValidate.notNull(customer,\"Customer cannot be null\");\n\t\tValidate.notNull(customer.getId(),\"Customer.id cannot be null or empty\");\n\t\tif(item.getQuantity() < 1) item.setQuantity(1);\n\t\t//Check if customer has an existing shopping cart\n\t\tShoppingCart cartModel = shoppingCartService.getByCustomer(customer);\n\t\t\n\t\t//if cart does not exist create a new one\n\t\tif(cartModel==null) {\n\t\t\tcartModel = new ShoppingCart();\n\t\t\tcartModel.setCustomerId(customer.getId());\n\t\t\tcartModel.setMerchantStore(store);\n\t\t\tcartModel.setShoppingCartCode(uniqueShoppingCartCode());\n\t\t}\n\t\t\n\t\treturn readableShoppingCart(cartModel,item,store,language);\n\t}\n\t\n\t@Override\n\tpublic ReadableShoppingCart modifyCart(String cartCode, PersistableShoppingCartItem item, MerchantStore store,\n\t\t\tLanguage language) throws Exception {\n\n\t\tValidate.notNull(cartCode,\"PString cart code cannot be null\");\n\t\tValidate.notNull(item,\"PersistableShoppingCartItem cannot be null\");\n\t\t\n\t\tShoppingCart cartModel = this.getCartModel(cartCode, store);\n\n\n\t\treturn modifyCart(cartModel,item, store, language);\n\t\t\n\t\t\n\t}\n\t\n\tprivate void saveShoppingCart(ShoppingCart shoppingCart) throws Exception {\n\t\tshoppingCartService.save(shoppingCart);\n\t}\n\t\n\tprivate String uniqueShoppingCartCode() {\n\t\treturn UUID.randomUUID().toString().replaceAll( \"-\", \"\" );\n\t}\n\n\t@Override\n\tpublic ReadableShoppingCart getById(Long shoppingCartId, MerchantStore store, Language language) throws Exception {\n\n\t\tShoppingCart cart = shoppingCartService.getById(shoppingCartId);\n\t\t\n\t\tReadableShoppingCart readableCart = null;\n\t\t\n\t\tif(cart != null) {\n\t\t\t\n\t        ReadableShoppingCartPopulator readableShoppingCart = new ReadableShoppingCartPopulator();\n\t        \n\t        readableShoppingCart.setImageUtils(imageUtils);\n\t        readableShoppingCart.setPricingService(pricingService);\n\t        readableShoppingCart.setProductAttributeService(productAttributeService);\n\t        readableShoppingCart.setShoppingCartCalculationService(shoppingCartCalculationService);\n\n\t        readableShoppingCart.populate(cart, readableCart,  store, language);\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\treturn readableCart;\n\t}\n\n\t@Override\n\tpublic ShoppingCart getShoppingCartModel(Long id, MerchantStore store) throws Exception {\n\t\treturn shoppingCartService.getById(id);\n\t}\n\n\t@Override\n\tpublic ReadableShoppingCart getByCode(String code, MerchantStore store, Language language) throws Exception {\n\t\t\n\t\tShoppingCart cart = shoppingCartService.getByCode(code, store);\n\t\t\n\t\tReadableShoppingCart readableCart = null;\n\t\t\n\t\tif(cart != null) {\n\t\t\t\n\t        ReadableShoppingCartPopulator readableShoppingCart = new ReadableShoppingCartPopulator();\n\t        \n\t        readableShoppingCart.setImageUtils(imageUtils);\n\t        readableShoppingCart.setPricingService(pricingService);\n\t        readableShoppingCart.setProductAttributeService(productAttributeService);\n\t        readableShoppingCart.setShoppingCartCalculationService(shoppingCartCalculationService);\n\n\t        readableCart = readableShoppingCart.populate(cart, null,  store, language);\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\treturn readableCart;\n\t\t\n\t}\n\n\n\n}\n"], "filenames": ["sm-shop/src/main/java/com/salesmanager/shop/store/controller/shoppingCart/facade/ShoppingCartFacadeImpl.java"], "buggy_code_start_loc": [111], "buggy_code_end_loc": [918], "fixing_code_start_loc": [111], "fixing_code_end_loc": [916], "type": "CWE-20", "message": "In Shopizer before version 2.11.0, using API or Controller based versions negative quantity is not adequately validated hence creating incorrect shopping cart and order total. This vulnerability makes it possible to create a negative total in the shopping cart. This has been patched in version 2.11.0.", "other": {"cve": {"id": "CVE-2020-11007", "sourceIdentifier": "security-advisories@github.com", "published": "2020-04-16T19:15:26.400", "lastModified": "2020-04-29T14:13:03.413", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Shopizer before version 2.11.0, using API or Controller based versions negative quantity is not adequately validated hence creating incorrect shopping cart and order total. This vulnerability makes it possible to create a negative total in the shopping cart. This has been patched in version 2.11.0."}, {"lang": "es", "value": "En Shopizer versiones anteriores a 2.11.0, al usar versiones basadas en API o Controlador una cantidad negativa no es comprobada adecuadamente, por lo tanto, crea un carrito de compras y el total del pedido incorrecto. Esta vulnerabilidad hace posible crear un total negativo en el carrito de compras. Esto ha sido parcheado en la versi\u00f3n 2.11.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shopizer:shopizer:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.11.0", "matchCriteriaId": "F23E9754-4D83-4155-9F98-61D2B848FE55"}]}]}], "references": [{"url": "https://github.com/shopizer-ecommerce/shopizer/commit/929ca0839a80c6f4dad087e0259089908787ad2a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/shopizer-ecommerce/shopizer/security/advisories/GHSA-w8rc-pgxq-x2cj", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shopizer-ecommerce/shopizer/commit/929ca0839a80c6f4dad087e0259089908787ad2a"}}