{"buggy_code": ["# frozen_string_literal: true\n\nif GlobalSetting.skip_redis?\n  MessageBus.configure(backend: :memory)\n  return\nend\n\nMessageBus.site_id_lookup do |env = nil|\n  if env\n    setup_message_bus_env(env)\n    env[\"__mb\"][:site_id]\n  else\n    RailsMultisite::ConnectionManagement.current_db\n  end\nend\n\ndef setup_message_bus_env(env)\n  return if env[\"__mb\"]\n\n  ::Middleware::RequestTracker.populate_request_queue_seconds!(env)\n\n  if queue_time = env[\"REQUEST_QUEUE_SECONDS\"]\n    if queue_time > (GlobalSetting.reject_message_bus_queue_seconds).to_f\n      raise RateLimiter::LimitExceeded, 30 + (rand * 120).to_i\n    end\n  end\n\n  host = RailsMultisite::ConnectionManagement.host(env)\n  RailsMultisite::ConnectionManagement.with_hostname(host) do\n    extra_headers = {\n      \"Access-Control-Allow-Origin\" => Discourse.base_url_no_prefix,\n      \"Access-Control-Allow-Methods\" => \"GET, POST\",\n      \"Access-Control-Allow-Headers\" => \"X-SILENCE-LOGGER, X-Shared-Session-Key, Dont-Chunk, Discourse-Present\"\n    }\n\n    user = nil\n    begin\n      user = CurrentUser.lookup_from_env(env)\n    rescue Discourse::InvalidAccess => e\n      # this is bad we need to remove the cookie\n      if e.opts[:delete_cookie].present?\n        extra_headers['Set-Cookie'] = '_t=del; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'\n      end\n    rescue => e\n      Discourse.warn_exception(e, message: \"Unexpected error in Message Bus\")\n    end\n    user_id = user && user.id\n\n    raise Discourse::InvalidAccess if !user_id && SiteSetting.login_required\n\n    is_admin = !!(user && user.admin?)\n    group_ids = if is_admin\n      # special rule, admin is allowed access to all groups\n      Group.pluck(:id)\n    elsif user\n      user.groups.pluck('groups.id')\n    end\n\n    if env[Auth::DefaultCurrentUserProvider::BAD_TOKEN]\n      extra_headers['Discourse-Logged-Out'] = '1'\n    end\n\n    hash = {\n      extra_headers: extra_headers,\n      user_id: user_id,\n      group_ids: group_ids,\n      is_admin: is_admin,\n      site_id: RailsMultisite::ConnectionManagement.current_db\n\n    }\n    env[\"__mb\"] = hash\n  end\n\n  nil\nend\n\nMessageBus.extra_response_headers_lookup do |env|\n  setup_message_bus_env(env)\n  env[\"__mb\"][:extra_headers]\nend\n\nMessageBus.user_id_lookup do |env|\n  setup_message_bus_env(env)\n  env[\"__mb\"][:user_id]\nend\n\nMessageBus.group_ids_lookup do |env|\n  setup_message_bus_env(env)\n  env[\"__mb\"][:group_ids]\nend\n\nMessageBus.is_admin_lookup do |env|\n  setup_message_bus_env(env)\n  env[\"__mb\"][:is_admin]\nend\n\nMessageBus.on_middleware_error do |env, e|\n  if Discourse::InvalidAccess === e\n    [403, {}, [\"Invalid Access\"]]\n  elsif RateLimiter::LimitExceeded === e\n    [429, { 'Retry-After' => e.available_in.to_s }, [e.description]]\n  end\nend\n\nMessageBus.on_connect do |site_id|\n  RailsMultisite::ConnectionManagement.establish_connection(db: site_id)\nend\n\nMessageBus.on_disconnect do |site_id|\n  ActiveRecord::Base.connection_handler.clear_active_connections!\nend\n\nif Rails.env == \"test\"\n  MessageBus.configure(backend: :memory)\nelse\n  MessageBus.redis_config = GlobalSetting.message_bus_redis_config\nend\nMessageBus.reliable_pub_sub.max_backlog_size = GlobalSetting.message_bus_max_backlog_size\n\nMessageBus.long_polling_enabled = SiteSetting.enable_long_polling\nMessageBus.long_polling_interval = SiteSetting.long_polling_interval\nMessageBus.cache_assets = !Rails.env.development?\nMessageBus.enable_diagnostics\n\nif Rails.env == \"test\" || $0 =~ /rake$/\n  # disable keepalive in testing\n  MessageBus.keepalive_interval = -1\nend\n"], "fixing_code": ["# frozen_string_literal: true\n\nif GlobalSetting.skip_redis?\n  MessageBus.configure(backend: :memory)\n  return\nend\n\nMessageBus.site_id_lookup do |env = nil|\n  if env\n    setup_message_bus_env(env)\n    env[\"__mb\"][:site_id]\n  else\n    RailsMultisite::ConnectionManagement.current_db\n  end\nend\n\ndef setup_message_bus_env(env)\n  return if env[\"__mb\"]\n\n  ::Middleware::RequestTracker.populate_request_queue_seconds!(env)\n\n  if queue_time = env[\"REQUEST_QUEUE_SECONDS\"]\n    if queue_time > (GlobalSetting.reject_message_bus_queue_seconds).to_f\n      raise RateLimiter::LimitExceeded, 30 + (rand * 120).to_i\n    end\n  end\n\n  host = RailsMultisite::ConnectionManagement.host(env)\n  RailsMultisite::ConnectionManagement.with_hostname(host) do\n    extra_headers = {\n      \"Access-Control-Allow-Origin\" => Discourse.base_url_no_prefix,\n      \"Access-Control-Allow-Methods\" => \"GET, POST\",\n      \"Access-Control-Allow-Headers\" => \"X-SILENCE-LOGGER, X-Shared-Session-Key, Dont-Chunk, Discourse-Present\"\n    }\n\n    user = nil\n    begin\n      user = CurrentUser.lookup_from_env(env)\n    rescue Discourse::InvalidAccess => e\n      # this is bad we need to remove the cookie\n      if e.opts[:delete_cookie].present?\n        extra_headers['Set-Cookie'] = '_t=del; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'\n      end\n    rescue => e\n      Discourse.warn_exception(e, message: \"Unexpected error in Message Bus\")\n    end\n    user_id = user && user.id\n\n    raise Discourse::InvalidAccess if !user_id && SiteSetting.login_required\n\n    is_admin = !!(user && user.admin?)\n    group_ids = if is_admin\n      # special rule, admin is allowed access to all groups\n      Group.pluck(:id)\n    elsif user\n      user.groups.pluck('groups.id')\n    end\n\n    if env[Auth::DefaultCurrentUserProvider::BAD_TOKEN]\n      extra_headers['Discourse-Logged-Out'] = '1'\n    end\n\n    hash = {\n      extra_headers: extra_headers,\n      user_id: user_id,\n      group_ids: group_ids,\n      is_admin: is_admin,\n      site_id: RailsMultisite::ConnectionManagement.current_db\n\n    }\n    env[\"__mb\"] = hash\n  end\n\n  nil\nend\n\nMessageBus.extra_response_headers_lookup do |env|\n  setup_message_bus_env(env)\n  env[\"__mb\"][:extra_headers]\nend\n\nMessageBus.user_id_lookup do |env|\n  setup_message_bus_env(env)\n  env[\"__mb\"][:user_id]\nend\n\nMessageBus.group_ids_lookup do |env|\n  setup_message_bus_env(env)\n  env[\"__mb\"][:group_ids]\nend\n\nMessageBus.is_admin_lookup do |env|\n  setup_message_bus_env(env)\n  env[\"__mb\"][:is_admin]\nend\n\nMessageBus.on_middleware_error do |env, e|\n  if Discourse::InvalidAccess === e\n    [403, {}, [\"Invalid Access\"]]\n  elsif RateLimiter::LimitExceeded === e\n    [429, { 'Retry-After' => e.available_in.to_s }, [e.description]]\n  end\nend\n\nMessageBus.on_connect do |site_id|\n  RailsMultisite::ConnectionManagement.establish_connection(db: site_id)\nend\n\nMessageBus.on_disconnect do |site_id|\n  ActiveRecord::Base.connection_handler.clear_active_connections!\nend\n\nif Rails.env == \"test\"\n  MessageBus.configure(backend: :memory)\nelse\n  MessageBus.redis_config = GlobalSetting.message_bus_redis_config\nend\nMessageBus.reliable_pub_sub.max_backlog_size = GlobalSetting.message_bus_max_backlog_size\n\nMessageBus.long_polling_enabled = SiteSetting.enable_long_polling\nMessageBus.long_polling_interval = SiteSetting.long_polling_interval\nMessageBus.cache_assets = !Rails.env.development?\n\nif Rails.env == \"test\" || $0 =~ /rake$/\n  # disable keepalive in testing\n  MessageBus.keepalive_interval = -1\nend\n"], "filenames": ["config/initializers/004-message_bus.rb"], "buggy_code_start_loc": [123], "buggy_code_end_loc": [124], "fixing_code_start_loc": [122], "fixing_code_end_loc": [122], "type": "NVD-CWE-noinfo", "message": "Discourse is an open source platform for community discussion. In affected versions admins users can trigger a Denial of Service attack via the `/message-bus/_diagnostics` path. The impact of this vulnerability is greater on multisite Discourse instances (where multiple forums are served from a single application server) where any admin user on any of the forums are able to visit the `/message-bus/_diagnostics` path. The problem has been patched. Please upgrade to 2.8.0.beta10 or 2.7.12. No workarounds for this issue exist.", "other": {"cve": {"id": "CVE-2021-43850", "sourceIdentifier": "security-advisories@github.com", "published": "2022-01-04T20:15:07.667", "lastModified": "2022-01-14T02:50:53.677", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Discourse is an open source platform for community discussion. In affected versions admins users can trigger a Denial of Service attack via the `/message-bus/_diagnostics` path. The impact of this vulnerability is greater on multisite Discourse instances (where multiple forums are served from a single application server) where any admin user on any of the forums are able to visit the `/message-bus/_diagnostics` path. The problem has been patched. Please upgrade to 2.8.0.beta10 or 2.7.12. No workarounds for this issue exist."}, {"lang": "es", "value": "Discourse es una plataforma de c\u00f3digo abierto para el debate comunitario. En las versiones afectadas los usuarios administradores pueden desencadenar un ataque de denegaci\u00f3n de servicio por medio de la ruta \"/message-bus/_diagnostics\". El impacto de esta vulnerabilidad es mayor en las instancias multisitio de Discourse (donde son servidos m\u00faltiples foros desde un \u00fanico servidor de aplicaciones) donde cualquier usuario administrador en cualquiera de los foros puede visitar la ruta \"/message-bus/_diagnostics\". El problema ha sido corregido. Por favor, actualice a la versi\u00f3n 2.8.0.beta10 o 2.7.12. No se presentan medidas de mitigaci\u00f3n para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.7.12", "matchCriteriaId": "BC1CE0F5-5636-46AF-A6AB-3C64FAC49D84"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "9E7F8AC4-35D1-45E5-8A3A-B0205000A5D3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "B9AE12FE-0396-4843-8D30-D8C44FAE01DA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "F101AEAB-4FB7-4BE3-931B-595702D616C7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta4:*:*:*:*:*:*", "matchCriteriaId": "F6878B7F-2691-4D3F-8116-CB282FDAAAC7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta5:*:*:*:*:*:*", "matchCriteriaId": "76EABAB9-BEA4-48D4-ADBA-D00746B29C52"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta6:*:*:*:*:*:*", "matchCriteriaId": "82A255A2-4658-41AD-A4DE-A7F8D018028D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta7:*:*:*:*:*:*", "matchCriteriaId": "E5804585-2EA4-4677-8EC1-5F561D5C7D7A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta8:*:*:*:*:*:*", "matchCriteriaId": "082A6871-080A-4AA7-AF4A-D664EA46488A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta9:*:*:*:*:*:*", "matchCriteriaId": "8A280205-A2DC-4E30-937B-5564C779FD5A"}]}]}], "references": [{"url": "https://github.com/discourse/discourse/commit/7a8ec129fb54f188b2da6588c9d24d3a36eb0d39", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/discourse/discourse/security/advisories/GHSA-59jr-pj65-qmvr", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/discourse/discourse/commit/7a8ec129fb54f188b2da6588c9d24d3a36eb0d39"}}