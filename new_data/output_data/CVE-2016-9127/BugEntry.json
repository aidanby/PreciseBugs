{"buggy_code": ["<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n/**\n * Password recovery for Openads\n *\n */\n\nrequire_once MAX_PATH . '/lib/OA.php';\nrequire_once MAX_PATH . '/lib/OA/Dal/PasswordRecovery.php';\nrequire_once MAX_PATH . '/lib/OA/Auth.php';\nrequire_once MAX_PATH . '/lib/OA/Email.php';\nrequire_once MAX_PATH . '/lib/OA/ServiceLocator.php';\n\nrequire_once LIB_PATH . '/Admin/Redirect.php';\n\n\nclass OA_Admin_PasswordRecovery\n{\n    /**\n     *  @var OA_Dal_PasswordRecovery\n     */\n    var $_dal;\n\n    /**\n     * PHP4-style constructor\n     */\n    function __construct()\n    {\n        $this->_useDefaultDal();\n    }\n\n    function _useDefaultDal()\n    {\n        $oServiceLocator =& OA_ServiceLocator::instance();\n        $dal =& $oServiceLocator->get('OA_Dal_PasswordRecovery');\n        if (!$dal) {\n            $dal = new OA_Dal_PasswordRecovery();\n        }\n        $this->_dal =& $dal;\n    }\n\n    /**\n     * Display page header\n     *\n     */\n    function pageHeader()\n    {\n        phpAds_PageHeader(phpAds_PasswordRecovery);\n\n        echo \"<br><br>\";\n    }\n\n    /**\n     * Display page footer and make sure that the session gets destroyed\n     *\n     */\n    function pageFooter()\n    {\n        // Remove session\n        unset($GLOBALS['session']);\n\n        phpAds_PageFooter();\n    }\n\n    /**\n     * Display an entire page with the password recovery form.\n     *\n     * This method, combined with handlePost allows semantic, REST-style\n     * actions.\n     */\n    function handleGet($vars)\n    {\n        $this->pageHeader();\n        if (empty($vars['id'])) {\n            $this->displayRecoveryRequestForm();\n        } elseif ($this->_dal->checkRecoveryId($vars['id'])) {\n            $this->displayRecoveryResetForm($vars['id']);\n        } else {\n            OX_Admin_Redirect::redirect();\n        }\n        $this->pageFooter();\n    }\n\n    /**\n     * Display an entire page with the password recovery form.\n     *\n     * This method, combined with handleGet allows semantic, REST-style\n     * actions.\n     */\n    function handlePost($vars)\n    {\n        $this->pageHeader();\n        if (empty($vars['id'])) {\n            if (empty($vars['email'])) {\n                $this->displayRecoveryRequestForm($GLOBALS['strEmailRequired']);\n            } else {\n                $sent = $this->sendRecoveryEmail(stripslashes($vars['email']));\n                if ($sent) {\n                    $this->displayMessage($GLOBALS['strNotifyPageMessage']);\n                } else {\n                $this->displayRecoveryRequestForm($GLOBALS['strPwdRecEmailNotFound']);\n                }\n            }\n        } else {\n            if (empty($vars['newpassword']) || empty($vars['newpassword2']) || $vars['newpassword'] != $vars['newpassword2']) {\n                $this->displayRecoveryResetForm($vars['id'], $GLOBALS['strNotSamePasswords']);\n            } elseif ($this->_dal->checkRecoveryId($vars['id'])) {\n                $userId = $this->_dal->saveNewPasswordAndLogin($vars['id'], stripslashes($vars['newpassword']));\n                OX_Admin_Redirect::redirect();\n            } else {\n                $this->displayRecoveryRequestForm($GLOBALS['strPwdRecWrongId']);\n            }\n        }\n        $this->pageFooter();\n    }\n\n    /**\n     * Display a message\n     *\n     * @param string message to be displayed\n     */\n    function displayMessage($message)\n    {\n        phpAds_showBreak();\n\n        echo \"<br /><span class='install'>{$message}</span><br /><br />\";\n\n        phpAds_showBreak();\n    }\n\n    /**\n     * Display recovery request form\n     *\n     * @param string error message text\n     */\n    function displayRecoveryRequestForm($errormessage = '')\n    {\n        if (!empty($errormessage)) {\n            echo \"<div class='errormessage' style='width: 400px;'><img class='errormessage' src='\" . OX::assetPath() . \"/images/errormessage.gif' align='absmiddle'>\";\n            echo \"<span class='tab-r'>{$errormessage}</span></div>\";\n        }\n\n        echo \"<form method='post' action='password-recovery.php'>\\n\";\n\n        echo \"<div class='install'>\".$GLOBALS['strPwdRecEnterEmail'].\"</div>\";\n        echo \"<table cellpadding='0' cellspacing='0' border='0'>\";\n        echo \"<tr><td colspan='2'><img src='\" . OX::assetPath() . \"/images/break-el.gif' width='400' height='1' vspace='8'></td></tr>\";\n        echo \"<tr height='24'><td>\".$GLOBALS['strEMail'].\":&nbsp;</td><td><input type='text' name='email' /></td></tr>\";\n        echo \"<tr height='24'><td>&nbsp;</td><td><input type='submit' value='\".$GLOBALS['strProceed'].\"' /></td></tr>\";\n        echo \"<tr><td colspan='2'><img src='\" . OX::assetPath() . \"/images/break-el.gif' width='400' height='1' vspace='8'></td></tr>\";\n        echo \"</table>\";\n\n        echo \"</form>\\n\";\n    }\n\n    /**\n     * Display new password form\n     *\n     * @param string error message text\n     */\n    function displayRecoveryResetForm($id, $errormessage = '')\n    {\n        if (!empty($errormessage)) {\n            echo \"<div class='errormessage' style='width: 400px;'><img class='errormessage' src='\" . OX::assetPath() . \"/images/errormessage.gif' align='absmiddle'>\";\n            echo \"<span class='tab-r'>{$errormessage}</span></div>\";\n        }\n\n        echo \"<form method='post' action='password-recovery.php'>\\n\";\n        echo \"<input type='hidden' name='id' value=\\\"\".htmlspecialchars($id).\"\\\" />\";\n\n        echo \"<div class='install'>\".$GLOBALS['strPwdRecEnterPassword'].\"</div>\";\n        echo \"<table cellpadding='0' cellspacing='0' border='0'>\";\n        echo \"<tr><td colspan='2'><img src='\" . OX::assetPath() . \"/images/break-el.gif' width='400' height='1' vspace='8'></td></tr>\";\n        echo \"<tr height='24'><td>\".$GLOBALS['strPassword'].\":&nbsp;</td><td><input type='password' name='newpassword' /></td></tr>\";\n        echo \"<tr height='24'><td>\".$GLOBALS['strRepeatPassword'].\":&nbsp;</td><td><input type='password' name='newpassword2' /></td></tr>\";\n        echo \"<tr height='24'><td>&nbsp;</td><td><input type='submit' value='\".$GLOBALS['strProceed'].\"' /></td></tr>\";\n        echo \"<tr><td colspan='2'><img src='\" . OX::assetPath() . \"/images/break-el.gif' width='400' height='1' vspace='8'></td></tr>\";\n        echo \"</table>\";\n\n        echo \"</form>\\n\";\n    }\n\n    /**\n     * Check if the user is allowed to see the password recovery tools\n     *\n     */\n    function checkAccess()\n    {\n        return !OA_Auth::isLoggedIn() && !OA_Auth::suppliedCredentials();\n    }\n\n    /**\n     * Send the password recovery email\n     *\n     * @todo Set email language according to the account preferences\n     *\n     * @param string email address\n     * @return int Number of emails sent\n     */\n    function sendRecoveryEmail($email)\n    {\n        $aConf = &$GLOBALS['_MAX']['CONF'];\n        $aPref = $GLOBALS['_MAX']['PREF'];\n\n        $aUsers = $this->_dal->searchMatchingUsers($email);\n\n        $aEmails = array();\n        foreach ($aUsers as $u) {\n            $aEmails[$u['email_address']][] = $u;\n        }\n\n        $sent = 0;\n        foreach ($aEmails as $email => $aUsers) {\n            $text = '';\n            foreach ($aUsers as $u) {\n                $recoveryId = $this->_dal->generateRecoveryId($u['user_id']);\n\n                $header = $GLOBALS['strUser'].\" {$u['contact_name']}\";\n                $text .= $header.\"\\n\".str_repeat('-', strlen($header)).\"\\n\";\n                $text .= $GLOBALS['strUsername'].\": {$u['username']}\\n\";\n                $text .= $GLOBALS['strPwdRecResetLink'].\": \";\n                $text .= Max::constructURL(MAX_URL_ADMIN, \"password-recovery.php?id={$recoveryId}\").\"\\n\\n\";\n            }\n\n            // Hack\n            $aConf['email']['admin_name'] = $aPref['admin_fullname'];\n            $aConf['email']['admin']      = $aPref['admin_email'];\n\n            $oEmail = new OA_Email();\n            $oEmail->sendMail(sprintf($GLOBALS['strPwdRecEmailPwdRecovery'], $aPref['name']), $text, $email, $u['username']);\n            $sent++;\n        }\n\n        return $sent;\n    }\n}\n\n?>\n"], "fixing_code": ["<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n/**\n * Password recovery for Openads\n *\n */\n\nrequire_once MAX_PATH . '/lib/OA.php';\nrequire_once MAX_PATH . '/lib/OA/Dal/PasswordRecovery.php';\nrequire_once MAX_PATH . '/lib/OA/Auth.php';\nrequire_once MAX_PATH . '/lib/OA/Email.php';\nrequire_once MAX_PATH . '/lib/OA/ServiceLocator.php';\n\nrequire_once LIB_PATH . '/Admin/Redirect.php';\n\n\nclass OA_Admin_PasswordRecovery\n{\n    /**\n     *  @var OA_Dal_PasswordRecovery\n     */\n    var $_dal;\n\n    /**\n     * PHP4-style constructor\n     */\n    function __construct()\n    {\n        $this->_useDefaultDal();\n    }\n\n    function _useDefaultDal()\n    {\n        $oServiceLocator =& OA_ServiceLocator::instance();\n        $dal =& $oServiceLocator->get('OA_Dal_PasswordRecovery');\n        if (!$dal) {\n            $dal = new OA_Dal_PasswordRecovery();\n        }\n        $this->_dal =& $dal;\n    }\n\n    /**\n     * Display page header\n     *\n     */\n    function pageHeader()\n    {\n        phpAds_PageHeader(phpAds_PasswordRecovery);\n\n        echo \"<br><br>\";\n    }\n\n    /**\n     * Display page footer and make sure that the session gets destroyed\n     *\n     */\n    function pageFooter()\n    {\n        // Remove session\n        unset($GLOBALS['session']);\n\n        phpAds_PageFooter();\n    }\n\n    /**\n     * Display an entire page with the password recovery form.\n     *\n     * This method, combined with handlePost allows semantic, REST-style\n     * actions.\n     */\n    function handleGet($vars)\n    {\n        $this->pageHeader();\n        if (empty($vars['id'])) {\n            $this->displayRecoveryRequestForm();\n        } elseif ($this->_dal->checkRecoveryId($vars['id'])) {\n            $this->displayRecoveryResetForm($vars['id']);\n        } else {\n            OX_Admin_Redirect::redirect();\n        }\n        $this->pageFooter();\n    }\n\n    /**\n     * Display an entire page with the password recovery form.\n     *\n     * This method, combined with handleGet allows semantic, REST-style\n     * actions.\n     */\n    function handlePost($vars)\n    {\n        OA_Permission::checkSessionToken();\n\n        $this->pageHeader();\n        if (empty($vars['id'])) {\n            if (empty($vars['email'])) {\n                $this->displayRecoveryRequestForm($GLOBALS['strEmailRequired']);\n            } else {\n                $sent = $this->sendRecoveryEmail(stripslashes($vars['email']));\n                if ($sent) {\n                    $this->displayMessage($GLOBALS['strNotifyPageMessage']);\n                } else {\n                $this->displayRecoveryRequestForm($GLOBALS['strPwdRecEmailNotFound']);\n                }\n            }\n        } else {\n            if (empty($vars['newpassword']) || empty($vars['newpassword2']) || $vars['newpassword'] != $vars['newpassword2']) {\n                $this->displayRecoveryResetForm($vars['id'], $GLOBALS['strNotSamePasswords']);\n            } elseif ($this->_dal->checkRecoveryId($vars['id'])) {\n                $userId = $this->_dal->saveNewPasswordAndLogin($vars['id'], stripslashes($vars['newpassword']));\n                OX_Admin_Redirect::redirect();\n            } else {\n                $this->displayRecoveryRequestForm($GLOBALS['strPwdRecWrongId']);\n            }\n        }\n        $this->pageFooter();\n    }\n\n    /**\n     * Display a message\n     *\n     * @param string message to be displayed\n     */\n    function displayMessage($message)\n    {\n        phpAds_showBreak();\n\n        echo \"<br /><span class='install'>{$message}</span><br /><br />\";\n\n        phpAds_showBreak();\n    }\n\n    /**\n     * Display recovery request form\n     *\n     * @param string error message text\n     */\n    function displayRecoveryRequestForm($errormessage = '')\n    {\n        if (!empty($errormessage)) {\n            echo \"<div class='errormessage' style='width: 400px;'><img class='errormessage' src='\" . OX::assetPath() . \"/images/errormessage.gif' align='absmiddle'>\";\n            echo \"<span class='tab-r'>{$errormessage}</span></div>\";\n        }\n\n        echo \"<form method='post' action='password-recovery.php'>\\n\";\n\n        echo \"<input type='hidden' name='token' value='\".phpAds_SessionGetToken().\"'/>\\n\";\n\n        echo \"<div class='install'>\".$GLOBALS['strPwdRecEnterEmail'].\"</div>\";\n        echo \"<table cellpadding='0' cellspacing='0' border='0'>\";\n        echo \"<tr><td colspan='2'><img src='\" . OX::assetPath() . \"/images/break-el.gif' width='400' height='1' vspace='8'></td></tr>\";\n        echo \"<tr height='24'><td>\".$GLOBALS['strEMail'].\":&nbsp;</td><td><input type='text' name='email' /></td></tr>\";\n        echo \"<tr height='24'><td>&nbsp;</td><td><input type='submit' value='\".$GLOBALS['strProceed'].\"' /></td></tr>\";\n        echo \"<tr><td colspan='2'><img src='\" . OX::assetPath() . \"/images/break-el.gif' width='400' height='1' vspace='8'></td></tr>\";\n        echo \"</table>\";\n\n        echo \"</form>\\n\";\n    }\n\n    /**\n     * Display new password form\n     *\n     * @param string error message text\n     */\n    function displayRecoveryResetForm($id, $errormessage = '')\n    {\n        if (!empty($errormessage)) {\n            echo \"<div class='errormessage' style='width: 400px;'><img class='errormessage' src='\" . OX::assetPath() . \"/images/errormessage.gif' align='absmiddle'>\";\n            echo \"<span class='tab-r'>{$errormessage}</span></div>\";\n        }\n\n        echo \"<form method='post' action='password-recovery.php'>\\n\";\n        echo \"<input type='hidden' name='id' value=\\\"\".htmlspecialchars($id).\"\\\" />\";\n        echo \"<input type='hidden' name='token' value='\".phpAds_SessionGetToken().\"'/>\\n\";\n\n        echo \"<div class='install'>\".$GLOBALS['strPwdRecEnterPassword'].\"</div>\";\n        echo \"<table cellpadding='0' cellspacing='0' border='0'>\";\n        echo \"<tr><td colspan='2'><img src='\" . OX::assetPath() . \"/images/break-el.gif' width='400' height='1' vspace='8'></td></tr>\";\n        echo \"<tr height='24'><td>\".$GLOBALS['strPassword'].\":&nbsp;</td><td><input type='password' name='newpassword' /></td></tr>\";\n        echo \"<tr height='24'><td>\".$GLOBALS['strRepeatPassword'].\":&nbsp;</td><td><input type='password' name='newpassword2' /></td></tr>\";\n        echo \"<tr height='24'><td>&nbsp;</td><td><input type='submit' value='\".$GLOBALS['strProceed'].\"' /></td></tr>\";\n        echo \"<tr><td colspan='2'><img src='\" . OX::assetPath() . \"/images/break-el.gif' width='400' height='1' vspace='8'></td></tr>\";\n        echo \"</table>\";\n\n        echo \"</form>\\n\";\n    }\n\n    /**\n     * Check if the user is allowed to see the password recovery tools\n     *\n     */\n    function checkAccess()\n    {\n        return !OA_Auth::isLoggedIn() && !OA_Auth::suppliedCredentials();\n    }\n\n    /**\n     * Send the password recovery email\n     *\n     * @todo Set email language according to the account preferences\n     *\n     * @param string email address\n     * @return int Number of emails sent\n     */\n    function sendRecoveryEmail($email)\n    {\n        $aConf = &$GLOBALS['_MAX']['CONF'];\n        $aPref = $GLOBALS['_MAX']['PREF'];\n\n        $aUsers = $this->_dal->searchMatchingUsers($email);\n\n        $aEmails = array();\n        foreach ($aUsers as $u) {\n            $aEmails[$u['email_address']][] = $u;\n        }\n\n        $sent = 0;\n        foreach ($aEmails as $email => $aUsers) {\n            $text = '';\n            foreach ($aUsers as $u) {\n                $recoveryId = $this->_dal->generateRecoveryId($u['user_id']);\n\n                $header = $GLOBALS['strUser'].\" {$u['contact_name']}\";\n                $text .= $header.\"\\n\".str_repeat('-', strlen($header)).\"\\n\";\n                $text .= $GLOBALS['strUsername'].\": {$u['username']}\\n\";\n                $text .= $GLOBALS['strPwdRecResetLink'].\": \";\n                $text .= Max::constructURL(MAX_URL_ADMIN, \"password-recovery.php?id={$recoveryId}\").\"\\n\\n\";\n            }\n\n            // Hack\n            $aConf['email']['admin_name'] = $aPref['admin_fullname'];\n            $aConf['email']['admin']      = $aPref['admin_email'];\n\n            $oEmail = new OA_Email();\n            $oEmail->sendMail(sprintf($GLOBALS['strPwdRecEmailPwdRecovery'], $aPref['name']), $text, $email, $u['username']);\n            $sent++;\n        }\n\n        return $sent;\n    }\n}\n\n?>\n"], "filenames": ["lib/OA/Admin/PasswordRecovery.php"], "buggy_code_start_loc": [101], "buggy_code_end_loc": [179], "fixing_code_start_loc": [102], "fixing_code_end_loc": [185], "type": "CWE-352", "message": "Revive Adserver before 3.2.3 suffers from Cross-Site Request Forgery (CSRF). The password recovery form in Revive Adserver is vulnerable to CSRF attacks. This vulnerability could be exploited to send a large number of password recovery emails to the registered users, especially in conjunction with a bug that caused recovery emails to be sent to all the users at once. Both issues have been fixed.", "other": {"cve": {"id": "CVE-2016-9127", "sourceIdentifier": "support@hackerone.com", "published": "2017-03-28T02:59:00.450", "lastModified": "2019-10-09T23:20:19.117", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Revive Adserver before 3.2.3 suffers from Cross-Site Request Forgery (CSRF). The password recovery form in Revive Adserver is vulnerable to CSRF attacks. This vulnerability could be exploited to send a large number of password recovery emails to the registered users, especially in conjunction with a bug that caused recovery emails to be sent to all the users at once. Both issues have been fixed."}, {"lang": "es", "value": "Revive Adserver en versiones anteriores a 3.2.3 sufre de solicitud de falsificaci\u00f3n en sitios cruzados (CSRF). El formulario de recuperaci\u00f3n de contrase\u00f1a en Revive Adserver es vulnerable a ataques CSRF. Esta vulnerabilidad podr\u00eda explotarse para enviar un gran n\u00famero de correos electr\u00f3nicos de recuperaci\u00f3n de contrase\u00f1as a los usuarios registrados, especialmente en conjunci\u00f3n con un error que provoc\u00f3 que los mensajes de recuperaci\u00f3n se enviaran a todos los usuarios a la vez. Ambos problemas han sido solucionados."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:revive-adserver:revive_adserver:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.2.2", "matchCriteriaId": "94F64F5A-ACD3-4AED-82BE-832D7B4801DA"}]}]}], "references": [{"url": "https://github.com/revive-adserver/revive-adserver/commit/3aaebcc765797d2c684e031f2836e0a69d6b7bc2", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/99452", "source": "support@hackerone.com", "tags": ["Permissions Required"]}, {"url": "https://www.revive-adserver.com/security/revive-sa-2016-001/", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/revive-adserver/revive-adserver/commit/3aaebcc765797d2c684e031f2836e0a69d6b7bc2"}}