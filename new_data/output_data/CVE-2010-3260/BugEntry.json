{"buggy_code": ["package org.orbeon.oxf.xml.xerces;\n\nimport org.orbeon.oxf.common.OXFException;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXNotRecognizedException;\n\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Hashtable;\nimport java.util.Map;\n\n/**\n * Boasts a couple of improvements over the 'stock' xerces parser factory.\n *\n * o Doesn't create a new parser every time one calls setFeature or getFeature.  Stock one\n *   has to do this because valid feature set is encapsulated in the parser code.\n *\n * o Creates a XercesJAXPSAXParser instead of SaxParserImpl. See XercesJAXPSAXParser for\n *   why this is an improvement.\n *\n * o The improvements cut the time it takes to a SAX parser via JAXP in\n *   half and reduce the amount of garbage created when accessing '/' in\n *   the examples app from 9019216 bytes to 8402880 bytes.\n */\npublic class XercesSAXParserFactoryImpl extends SAXParserFactory {\n\n    private static final Collection recognizedFeaturesNonValidatingXInclude;\n    private static final Map defaultFeaturesNonValidatingXInclude;\n\n    private static final Collection recognizedFeaturesNonValidatingNoXInclude;\n    private static final Map defaultFeaturesNonValidatingNoXInclude;\n\n    private static final Collection recognizedFeaturesValidatingXInclude;\n    private static final Map defaultFeaturesValidatingXInclude;\n\n    private static final Collection recognizedFeaturesValidatingNoXInclude;\n    private static final Map defaultFeaturesValidatingNoXInclude;\n\n    static {\n        {\n            final OrbeonParserConfiguration configuration = XercesSAXParser.makeConfig(false, true);\n            final Collection features = configuration.getRecognizedFeatures();\n            recognizedFeaturesNonValidatingXInclude = Collections.unmodifiableCollection(features);\n            defaultFeaturesNonValidatingXInclude = configuration.getFeatures();\n            // This was being done in XMLUtils.createSaxParserFactory before.  Maybe want to\n            // move it back if we decide to make this class more general purpose.\n            defaultFeaturesNonValidatingXInclude.put(\"http://xml.org/sax/features/namespaces\", Boolean.TRUE);\n            defaultFeaturesNonValidatingXInclude.put(\"http://xml.org/sax/features/namespace-prefixes\", Boolean.FALSE);\n        }\n        {\n            final OrbeonParserConfiguration configuration = XercesSAXParser.makeConfig(false, false);\n            final Collection features = configuration.getRecognizedFeatures();\n            recognizedFeaturesNonValidatingNoXInclude = Collections.unmodifiableCollection(features);\n            defaultFeaturesNonValidatingNoXInclude = configuration.getFeatures();\n            // This was being done in XMLUtils.createSaxParserFactory before.  Maybe want to\n            // move it back if we decide to make this class more general purpose.\n            defaultFeaturesNonValidatingNoXInclude.put(\"http://xml.org/sax/features/namespaces\", Boolean.TRUE);\n            defaultFeaturesNonValidatingNoXInclude.put(\"http://xml.org/sax/features/namespace-prefixes\", Boolean.FALSE);\n        }\n\n        {\n            final OrbeonParserConfiguration configuration = XercesSAXParser.makeConfig(true, true);\n            final Collection features = configuration.getRecognizedFeatures();\n            recognizedFeaturesValidatingXInclude = Collections.unmodifiableCollection(features);\n            defaultFeaturesValidatingXInclude = configuration.getFeatures();\n            // This was being done in XMLUtils.createSaxParserFactory before.  Maybe want to\n            // move it back if we decide to make this class more general purpose.\n            defaultFeaturesValidatingXInclude.put(\"http://xml.org/sax/features/namespaces\", Boolean.TRUE);\n            defaultFeaturesValidatingXInclude.put(\"http://xml.org/sax/features/namespace-prefixes\", Boolean.FALSE);\n        }\n        {\n            final OrbeonParserConfiguration configuration = XercesSAXParser.makeConfig(true, false);\n            final Collection features = configuration.getRecognizedFeatures();\n            recognizedFeaturesValidatingNoXInclude = Collections.unmodifiableCollection(features);\n            defaultFeaturesValidatingNoXInclude = configuration.getFeatures();\n            // This was being done in XMLUtils.createSaxParserFactory before.  Maybe want to\n            // move it back if we decide to make this class more general purpose.\n            defaultFeaturesValidatingNoXInclude.put(\"http://xml.org/sax/features/namespaces\", Boolean.TRUE);\n            defaultFeaturesValidatingNoXInclude.put(\"http://xml.org/sax/features/namespace-prefixes\", Boolean.FALSE);\n        }\n    }\n\n    private final Hashtable features;\n    private final boolean validating;\n    private final boolean handleXInclude;\n\n    public XercesSAXParserFactoryImpl() {\n        this(false, false);\n    }\n\n    public XercesSAXParserFactoryImpl(boolean validating, boolean handleXInclude) {\n        this.validating = validating;\n        this.handleXInclude = handleXInclude;\n        if (!validating) {\n            features = new Hashtable(handleXInclude ? defaultFeaturesNonValidatingXInclude : defaultFeaturesNonValidatingNoXInclude);\n        } else {\n            features = new Hashtable(handleXInclude ? defaultFeaturesValidatingXInclude : defaultFeaturesValidatingNoXInclude);\n        }\n        setNamespaceAware(true); // this is needed by some tools in addition to the feature\n    }\n\n    public boolean getFeature(final String key) throws SAXNotRecognizedException {\n        if (!getRecognizedFeatures().contains(key)) throw new SAXNotRecognizedException(key);\n        return features.get(key) == Boolean.TRUE;\n    }\n\n    public void setFeature(final String key, final boolean val) throws SAXNotRecognizedException {\n        if (!getRecognizedFeatures().contains(key)) throw new SAXNotRecognizedException(key);\n        features.put(key, val ? Boolean.TRUE : Boolean.FALSE);\n    }\n\n    public SAXParser newSAXParser() throws ParserConfigurationException {\n        final SAXParser ret;\n        try {\n            ret = new XercesJAXPSAXParser(this, features, validating, handleXInclude);\n        } catch (final SAXException se) {\n            // Translate to ParserConfigurationException\n            throw new OXFException(se); // so we see a decent stack trace!\n//            throw new ParserConfigurationException(se.getMessage());\n        }\n        return ret;\n    }\n\n    private Collection getRecognizedFeatures() {\n        if (!validating) {\n            return handleXInclude ? recognizedFeaturesNonValidatingXInclude : recognizedFeaturesNonValidatingNoXInclude;\n        } else {\n            return handleXInclude ? recognizedFeaturesValidatingXInclude : recognizedFeaturesValidatingNoXInclude;\n        }\n    }\n}"], "fixing_code": ["package org.orbeon.oxf.xml.xerces;\n\nimport org.orbeon.oxf.common.OXFException;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXNotRecognizedException;\n\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport java.util.*;\n\n/**\n * Boasts a couple of improvements over the 'stock' xerces parser factory.\n *\n * o Doesn't create a new parser every time one calls setFeature or getFeature.  Stock one\n *   has to do this because valid feature set is encapsulated in the parser code.\n *\n * o Creates a XercesJAXPSAXParser instead of SaxParserImpl. See XercesJAXPSAXParser for\n *   why this is an improvement.\n *\n * o The improvements cut the time it takes to a SAX parser via JAXP in\n *   half and reduce the amount of garbage created when accessing '/' in\n *   the examples app from 9019216 bytes to 8402880 bytes.\n */\npublic class XercesSAXParserFactoryImpl extends SAXParserFactory {\n\n    private static final Collection recognizedFeaturesNonValidatingXInclude;\n    private static final Map defaultFeaturesNonValidatingXInclude;\n\n    private static final Collection recognizedFeaturesNonValidatingNoXInclude;\n    private static final Map defaultFeaturesNonValidatingNoXInclude;\n\n    private static final Collection recognizedFeaturesValidatingXInclude;\n    private static final Map defaultFeaturesValidatingXInclude;\n\n    private static final Collection recognizedFeaturesValidatingNoXInclude;\n    private static final Map defaultFeaturesValidatingNoXInclude;\n\n    static {\n        {\n            final OrbeonParserConfiguration configuration = XercesSAXParser.makeConfig(false, true);\n            final Collection recognizedFeatures = configuration.getRecognizedFeatures();\n            recognizedFeaturesNonValidatingXInclude = Collections.unmodifiableCollection(recognizedFeatures);\n            defaultFeaturesNonValidatingXInclude = configuration.getFeatures();\n            addDefaultFeatures(defaultFeaturesNonValidatingXInclude);\n        }\n        {\n            final OrbeonParserConfiguration configuration = XercesSAXParser.makeConfig(false, false);\n            final Collection features = configuration.getRecognizedFeatures();\n            recognizedFeaturesNonValidatingNoXInclude = Collections.unmodifiableCollection(features);\n            defaultFeaturesNonValidatingNoXInclude = configuration.getFeatures();\n            addDefaultFeatures(defaultFeaturesNonValidatingNoXInclude);\n        }\n\n        {\n            final OrbeonParserConfiguration configuration = XercesSAXParser.makeConfig(true, true);\n            final Collection features = configuration.getRecognizedFeatures();\n            recognizedFeaturesValidatingXInclude = Collections.unmodifiableCollection(features);\n            defaultFeaturesValidatingXInclude = configuration.getFeatures();\n            addDefaultFeatures(defaultFeaturesValidatingXInclude);\n        }\n        {\n            final OrbeonParserConfiguration configuration = XercesSAXParser.makeConfig(true, false);\n            final Collection features = configuration.getRecognizedFeatures();\n            recognizedFeaturesValidatingNoXInclude = Collections.unmodifiableCollection(features);\n            defaultFeaturesValidatingNoXInclude = configuration.getFeatures();\n            addDefaultFeatures(defaultFeaturesValidatingNoXInclude);\n        }\n    }\n\n    private static void addDefaultFeatures(Map features) {\n        features.put(\"http://xml.org/sax/features/namespaces\", Boolean.TRUE);\n        features.put(\"http://xml.org/sax/features/namespace-prefixes\", Boolean.FALSE);\n        // For security purposes, disable external entities\n        features.put(\"http://xml.org/sax/features/external-general-entities\", Boolean.FALSE);\n        features.put(\"http://xml.org/sax/features/external-parameter-entities\", Boolean.FALSE);\n    }\n\n    private final Hashtable features;\n    private final boolean validating;\n    private final boolean handleXInclude;\n\n    public XercesSAXParserFactoryImpl() {\n        this(false, false);\n    }\n\n    public XercesSAXParserFactoryImpl(boolean validating, boolean handleXInclude) {\n        this.validating = validating;\n        this.handleXInclude = handleXInclude;\n        if (!validating) {\n            features = new Hashtable(handleXInclude ? defaultFeaturesNonValidatingXInclude : defaultFeaturesNonValidatingNoXInclude);\n        } else {\n            features = new Hashtable(handleXInclude ? defaultFeaturesValidatingXInclude : defaultFeaturesValidatingNoXInclude);\n        }\n        setNamespaceAware(true); // this is needed by some tools in addition to the feature\n    }\n\n    public boolean getFeature(final String key) throws SAXNotRecognizedException {\n        if (!getRecognizedFeatures().contains(key)) throw new SAXNotRecognizedException(key);\n        return features.get(key) == Boolean.TRUE;\n    }\n\n    public void setFeature(final String key, final boolean val) throws SAXNotRecognizedException {\n        if (!getRecognizedFeatures().contains(key)) throw new SAXNotRecognizedException(key);\n        features.put(key, val ? Boolean.TRUE : Boolean.FALSE);\n    }\n\n    public SAXParser newSAXParser() {\n        final SAXParser ret;\n        try {\n            ret = new XercesJAXPSAXParser(this, features, validating, handleXInclude);\n        } catch (final SAXException se) {\n            // Translate to ParserConfigurationException\n            throw new OXFException(se); // so we see a decent stack trace!\n        }\n        return ret;\n    }\n\n    private Collection getRecognizedFeatures() {\n        if (!validating) {\n            return handleXInclude ? recognizedFeaturesNonValidatingXInclude : recognizedFeaturesNonValidatingNoXInclude;\n        } else {\n            return handleXInclude ? recognizedFeaturesValidatingXInclude : recognizedFeaturesValidatingNoXInclude;\n        }\n    }\n}"], "filenames": ["src/java/org/orbeon/oxf/xml/xerces/XercesSAXParserFactoryImpl.java"], "buggy_code_start_loc": [7], "buggy_code_end_loc": [123], "fixing_code_start_loc": [6], "fixing_code_end_loc": [113], "type": "CWE-264", "message": "oxf/xml/xerces/XercesSAXParserFactoryImpl.java in the xforms-server component in the XForms service in Orbeon Forms before 3.9 does not properly restrict DTDs in Ajax requests, which allows remote attackers to read arbitrary files or send HTTP requests to intranet servers via an entity declaration in conjunction with an entity reference, related to an \"XML injection\" issue.", "other": {"cve": {"id": "CVE-2010-3260", "sourceIdentifier": "cve@mitre.org", "published": "2011-04-27T00:55:02.397", "lastModified": "2011-07-19T04:00:00.000", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "oxf/xml/xerces/XercesSAXParserFactoryImpl.java in the xforms-server component in the XForms service in Orbeon Forms before 3.9 does not properly restrict DTDs in Ajax requests, which allows remote attackers to read arbitrary files or send HTTP requests to intranet servers via an entity declaration in conjunction with an entity reference, related to an \"XML injection\" issue."}, {"lang": "es", "value": "oxf/xml/xerces/XercesSAXParserFactoryImpl.java en el componente  xforms-server en el servicio XForms en Orbeon Forms before v3.9 no restringe adecuadamente las peticiones Ajax a DTDs, lo que permite a atacantes remotos la lectura de archivos de su elecci\u00f3n o el env\u00edo de peticiones HTTP a servidores de la intranet a trav\u00e9s de una declaraci\u00f3n de entidad junto con una referencia a entidad. Relacionado con la cuesti\u00f3n \"inyecci\u00f3n XML)."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-264"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.8.1", "matchCriteriaId": "798EC351-2AAD-4A0B-BE2D-3C19619E5C01"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:1.5:*:*:*:*:*:*:*", "matchCriteriaId": "DEAF5333-3642-4AAE-B45A-EE55E9AE44F0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:2.0:*:*:*:*:*:*:*", "matchCriteriaId": "D3B51BD7-5979-424D-AD9F-43C9FD924820"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:2.1:*:*:*:*:*:*:*", "matchCriteriaId": "91A7C1BB-A6A7-44FA-A4FC-52E10EE7E07D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:2.2:*:*:*:*:*:*:*", "matchCriteriaId": "C0E4787B-0E65-412B-999D-1F0BB4ACDE68"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:2.5:*:*:*:*:*:*:*", "matchCriteriaId": "DE75ED9C-AA98-4822-9E6F-556D4CCC6FFF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:2.6:*:*:*:*:*:*:*", "matchCriteriaId": "DAB9C35A-8BB9-4026-A32E-6B68CBA6B81B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:2.7:*:*:*:*:*:*:*", "matchCriteriaId": "77E21DF5-A905-4ABC-B0C5-F42A24C8F66B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:2.8:*:*:*:*:*:*:*", "matchCriteriaId": "836C4838-7C56-4D48-AF09-46243FA0A0AF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:3.0:*:*:*:*:*:*:*", "matchCriteriaId": "48981C56-EE58-4C9E-A5DE-1B8A89955940"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:3.5:*:*:*:*:*:*:*", "matchCriteriaId": "0437EF7F-7FB3-493A-AEAF-1595EA7A9EE5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:3.6:*:*:*:*:*:*:*", "matchCriteriaId": "247C2513-62C5-4DEE-8FA4-960E2C2304E1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:3.7.1:*:*:*:*:*:*:*", "matchCriteriaId": "6E425309-EAED-4EDE-AE65-0FBB9EC6B0C4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:orbeon:forms:3.8:*:*:*:*:*:*:*", "matchCriteriaId": "D26DAB37-6BAA-49E2-938D-DF718D804D04"}]}]}], "references": [{"url": "http://wiki.orbeon.com/forms/doc/developer-guide/release-notes/39", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "http://www.securityfocus.com/bid/47362", "source": "cve@mitre.org"}, {"url": "http://www.stratsec.net/Research/Advisories/Orbeon-Forms-XML-Entity-Dereferencing-%28SS-2011-004", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "https://github.com/orbeon/orbeon-forms/commit/aba6681660f65af7f1676434da68c10298c30200", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/orbeon/orbeon-forms/commit/aba6681660f65af7f1676434da68c10298c30200"}}