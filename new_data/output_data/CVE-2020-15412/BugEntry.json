{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\nApp::uses('Xml', 'Utility');\n\nclass EventsController extends AppController\n{\n    public $components = array(\n            'Security',\n            'Email',\n            'RequestHandler',\n            'IOCImport',\n            'Cidr'\n    );\n\n    public $paginate = array(\n            'limit' => 60,\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events <- no we won't, this is the max a user van view/page.\n            'order' => array(\n                    'Event.timestamp' => 'DESC'\n            ),\n            'contain' => array(\n                    'Org' => array('fields' => array('id', 'name', 'uuid')),\n                    'Orgc' => array('fields' => array('id', 'name', 'uuid')),\n                    'SharingGroup' => array('fields' => array('id', 'name', 'uuid'))\n            )\n    );\n\n    private $acceptedFilteringNamedParams = array(\n        'sort', 'direction', 'focus', 'extended', 'overrideLimit', 'filterColumnsOverwrite', 'attributeFilter', 'extended', 'page',\n        'searchFor', 'proposal', 'correlation', 'warning', 'deleted', 'includeRelatedTags', 'includeDecayScore', 'distribution',\n        'taggedAttributes', 'galaxyAttachedAttributes', 'objectType', 'attributeType', 'focus', 'extended', 'overrideLimit',\n        'filterColumnsOverwrite', 'feed', 'server', 'toIDS', 'sighting', 'includeSightingdb'\n    );\n\n    public $defaultFilteringRules =  array(\n        'searchFor' => '',\n        'attributeFilter' => 'all',\n        'proposal' => 0,\n        'correlation' => 0,\n        'warning' => 0,\n        'deleted' => 2,\n        'includeRelatedTags' => 0,\n        'includeDecayScore' => 0,\n        'toIDS' => 0,\n        'feed' => 0,\n        'server' => 0,\n        'distribution' => array(0, 1, 2, 3, 4, 5),\n        'sighting' => 0,\n        'taggedAttributes' => '',\n        'galaxyAttachedAttributes' => ''\n    );\n\n    public $helpers = array('Js' => array('Jquery'));\n\n    public $paginationFunctions = array('index', 'proposalEventIndex');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n\n        // what pages are allowed for non-logged-in users\n        $this->Auth->allow('xml');\n        $this->Auth->allow('csv');\n        $this->Auth->allow('nids');\n        $this->Auth->allow('hids_md5');\n        $this->Auth->allow('hids_sha1');\n        $this->Auth->allow('text');\n        $this->Auth->allow('restSearch');\n        $this->Auth->allow('stix');\n        $this->Auth->allow('stix2');\n\n        $this->Security->unlockedActions[] = 'viewEventAttributes';\n\n        // TODO Audit, activate logable in a Controller\n        if (count($this->uses) && $this->{$this->modelClass}->Behaviors->attached('SysLogLogable')) {\n            $this->{$this->modelClass}->setUserData($this->activeUser);\n        }\n\n        // convert uuid to id if present in the url, and overwrite id field\n        if (isset($this->params->query['uuid'])) {\n            $params = array(\n                    'conditions' => array('Event.uuid' => $this->params->query['uuid']),\n                    'recursive' => 0,\n                    'fields' => 'Event.id'\n            );\n            $result = $this->Event->find('first', $params);\n            if (isset($result['Event']) && isset($result['Event']['id'])) {\n                $id = $result['Event']['id'];\n                $this->params->addParams(array('pass' => array($id))); // FIXME find better way to change id variable if uuid is found. params->url and params->here is not modified accordingly now\n            }\n        }\n\n        // if not admin or own org, check private as well..\n        if (!$this->_isSiteAdmin() && in_array($this->action, $this->paginationFunctions)) {\n            $sgids = $this->Event->cacheSgids($this->Auth->user(), true);\n            $conditions = array(\n                'AND' => array(\n                    array(\n                        \"OR\" => array(\n                            array(\n                                'Event.org_id' => $this->Auth->user('org_id')\n                            ),\n                            array(\n                                'AND' => array(\n                                        'Event.distribution >' => 0,\n                                        'Event.distribution <' => 4,\n                                        Configure::read('MISP.unpublishedprivate') ? array('Event.published =' => 1) : array(),\n                                ),\n                            ),\n                            array(\n                                'AND' => array(\n                                        'Event.distribution' => 4,\n                                        'Event.sharing_group_id' => $sgids,\n                                        Configure::read('MISP.unpublishedprivate') ? array('Event.published =' => 1) : array(),\n                                ),\n                            )\n                        )\n                    )\n                )\n            );\n            if ($this->userRole['perm_sync'] && $this->Auth->user('Server')['push_rules']) {\n                $conditions['AND'][] = $this->Event->filterRulesToConditions($this->Auth->user('Server')['push_rules']);\n            }\n            $this->paginate = Set::merge($this->paginate, array('conditions' => $conditions));\n        }\n    }\n\n    private function __filterOnAttributeValue($value)\n    {\n        // dissect the value\n        $pieces = explode('|', $value);\n        $include = array();\n        $exclude = array();\n        $includeIDs = array();\n        $excludeIDs = array();\n        foreach ($pieces as $piece) {\n            if ($piece[0] == '!') {\n                $exclude[] =  '%' . strtolower(substr($piece, 1)) . '%';\n            } else {\n                $include[] = '%' . strtolower($piece) . '%';\n            }\n        }\n        if (!empty($include)) {\n            // get all of the attributes that should be included\n            $includeQuery = array(\n                    'recursive' => -1,\n                    'fields' => array('id', 'event_id', 'distribution', 'value1', 'value2'),\n                    'conditions' => array(),\n            );\n            foreach ($include as $i) {\n                $includeQuery['conditions']['OR'][] = array('lower(Attribute.value1) LIKE' => $i);\n                $includeQuery['conditions']['OR'][] = array('lower(Attribute.value2) LIKE' => $i);\n            }\n            $includeQuery['conditions']['AND'][] = array('Attribute.deleted' => 0);\n            $includeHits = $this->Event->Attribute->find('all', $includeQuery);\n\n            // convert it into an array that uses the event ID as a key\n            foreach ($includeHits as $iH) {\n                $includeIDs[$iH['Attribute']['event_id']][] = array('attribute_id' => $iH['Attribute']['id'], 'distribution' => $iH['Attribute']['distribution']);\n            }\n        }\n\n        if (!empty($exclude)) {\n            // get all of the attributes that should be excluded\n            $excludeQuery = array(\n                'recursive' => -1,\n                'fields' => array('id', 'event_id', 'distribution', 'value1', 'value2'),\n                'conditions' => array(),\n            );\n            foreach ($exclude as $e) {\n                $excludeQuery['conditions']['OR'][] = array('lower(Attribute.value1) LIKE' => $e);\n                $excludeQuery['conditions']['OR'][] = array('lower(Attribute.value2) LIKE' => $e);\n            }\n            $excludeQuery['conditions']['AND'][] = array('Attribute.deleted' => 0);\n            $excludeHits = $this->Event->Attribute->find('all', $excludeQuery);\n\n            // convert it into an array that uses the event ID as a key\n            foreach ($excludeHits as $eH) {\n                $excludeIDs[$eH['Attribute']['event_id']][] = array('attribute_id' => $eH['Attribute']['id'], 'distribution' => $eH['Attribute']['distribution']);\n            }\n        }\n        $includeIDs = array_keys($includeIDs);\n        $excludeIDs = array_keys($excludeIDs);\n        // return -1 as the only value in includedIDs if both arrays are empty. This will mean that no events will be shown if there was no hit\n        if (empty($includeIDs) && empty($excludeIDs)) {\n            $includeIDs[] = -1;\n        }\n        return array($includeIDs, $excludeIDs);\n    }\n\n    private function __quickFilter($value)\n    {\n        if (!is_array($value)) {\n            $value = array($value);\n        }\n        $values = array();\n        foreach ($value as $v) {\n            $values[] = '%' . strtolower($v) . '%';\n        }\n\n        $result = array();\n        // get all of the attributes that have a hit on the search term, in either the value or the comment field\n        // This is not perfect, the search will be case insensitive, but value1 and value2 are searched separately. lower() doesn't seem to work on virtualfields\n        $subconditions = array();\n        foreach ($values as $v) {\n            $subconditions[] = array('lower(value1) LIKE' => $v);\n            $subconditions[] = array('lower(value2) LIKE' => $v);\n            $subconditions[] = array('lower(Attribute.comment) LIKE' => $v);\n        }\n        $conditions = array(\n            'AND' => array(\n                'OR' => $subconditions,\n                'Attribute.deleted' => 0\n            )\n        );\n        $attributeHits = $this->Event->Attribute->fetchAttributes($this->Auth->user(), array(\n                'conditions' => $conditions,\n                'fields' => array('event_id', 'comment', 'distribution', 'value1', 'value2'),\n                'flatten' => 1\n        ));\n        // rearrange the data into an array where the keys are the event IDs\n        $eventsWithAttributeHits = array();\n        foreach ($attributeHits as $aH) {\n            $eventsWithAttributeHits[$aH['Attribute']['event_id']][] = $aH['Attribute'];\n        }\n\n        // Using the keys from the previously obtained ordered array, let's fetch all of the events involved\n        $events = $this->Event->find('all', array(\n                'recursive' => -1,\n                'fields' => array('id', 'distribution', 'org_id'),\n                'conditions' => array('id' => array_keys($eventsWithAttributeHits)),\n        ));\n\n        foreach ($events as $event) {\n            $result[] = $event['Event']['id'];\n        }\n\n        // we now have a list of event IDs that match on an attribute level, and the user can see it. Let's also find all of the events that match on other criteria!\n        // What is interesting here is that we no longer have to worry about the event's releasability. With attributes this was a different case,\n        // because we might run into a situation where a user can see an event but not a specific attribute\n        // returning a hit on such an attribute would allow users to enumerate hidden attributes\n        // For anything beyond this point the default pagination restrictions will apply!\n\n        // First of all, there are tags that might be interesting for us\n        $subconditions = array();\n        foreach ($values as $v) {\n            $subconditions[] = array('lower(name) LIKE' => $v);\n        }\n        $tags = $this->Event->EventTag->Tag->find('all', array(\n                'conditions' => $subconditions,\n                'fields' => array('name', 'id'),\n                'contain' => array('EventTag', 'AttributeTag'),\n        ));\n        foreach ($tags as $tag) {\n            foreach ($tag['EventTag'] as $eventTag) {\n                if (!in_array($eventTag['event_id'], $result)) {\n                    $result[] = $eventTag['event_id'];\n                }\n            }\n            foreach ($tag['AttributeTag'] as $attributeTag) {\n                if (!in_array($attributeTag['event_id'], $result)) {\n                    $result[] = $attributeTag['event_id'];\n                }\n            }\n        }\n\n        // Finally, let's search on the event metadata!\n        $subconditions = array();\n        foreach ($values as $v) {\n            $subconditions[] = array('lower(name) LIKE' => $v);\n        }\n        $conditions = array();\n        $orgs = $this->Event->Org->find('list', array(\n                'conditions' => $subconditions,\n                'recursive' => -1,\n                'fields' => array('id')\n        ));\n        foreach ($values as $v) {\n            $conditions['OR'][] = array('lower(info) LIKE' => $v);\n            $conditions['OR'][] = array('lower(uuid) LIKE' => $v);\n        }\n        if (!empty($orgs)) {\n            $conditions['OR']['orgc_id'] = array_values($orgs);\n        }\n        $otherEvents = $this->Event->find('all', array(\n                'recursive' => -1,\n                'fields' => array('id', 'orgc_id', 'info', 'uuid'),\n                'conditions' => $conditions,\n        ));\n        foreach ($otherEvents as $oE) {\n            if (!in_array($oE['Event']['id'], $result)) {\n                $result[] = $oE['Event']['id'];\n            }\n        }\n        return $result;\n    }\n\n    private function __setIndexFilterConditions($passedArgs, $urlparams)\n    {\n        $passedArgsArray = array();\n        foreach ($passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                if (!is_array($v)) {\n                    if ($urlparams != \"\") {\n                        $urlparams .= \"/\";\n                    }\n                    $urlparams .= $k . \":\" . $v;\n                }\n                $searchTerm = strtolower(substr($k, 6));\n                switch ($searchTerm) {\n                    case 'all':\n                        if (!empty($passedArgs['searchall'])) {\n                            $this->paginate['conditions']['AND'][] = array('Event.id' => $this->__quickFilter($passedArgs['searchall']));\n                        }\n                        break;\n                    case 'attribute':\n                        $event_id_arrays = $this->__filterOnAttributeValue($v);\n                        if (!empty($event_id_arrays[0])) {\n                            $this->paginate['conditions']['AND'][] = array('Event.id' => $event_id_arrays[0]);\n                        }\n                        if (!empty($event_id_arrays[1])) {\n                            $this->paginate['conditions']['AND'][] = array('Event.id !=' => $event_id_arrays[1]);\n                        }\n                        break;\n                    case 'published':\n                        if ($v == 2) {\n                            continue 2;\n                        }\n                        $this->paginate['conditions']['AND'][] = array('Event.' . substr($k, 6) . ' =' => $v);\n                        break;\n                    case 'hasproposal':\n                        if ($v == 2) {\n                            continue 2;\n                        }\n                        $proposalQuery = \"exists (select id, deleted from shadow_attributes where shadow_attributes.event_id = Event.id and shadow_attributes.deleted = 0)\";\n                        if ($v == 0) {\n                            $proposalQuery = 'not ' . $proposalQuery;\n                        }\n                        $this->paginate['conditions']['AND'][] = $proposalQuery;\n                        break;\n                    case 'eventid':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        if (is_array($v)) {\n                            $pieces = $v;\n                        } else {\n                            $pieces = explode('|', $v);\n                        }\n                        $temp = array();\n                        $eventidConditions = array();\n                        foreach ($pieces as $piece) {\n                            $piece = trim($piece);\n                            if ($piece[0] == '!') {\n                                if (strlen($piece) == 37) {\n                                    $eventidConditions['NOT']['uuid'][] = substr($piece, 1);\n                                } else {\n                                    $eventidConditions['NOT']['id'][] = substr($piece, 1);\n                                }\n                            } else {\n                                if (strlen($piece) == 36) {\n                                    $eventidConditions['OR']['uuid'][] = $piece;\n                                } else {\n                                    $eventidConditions['OR']['id'][] = $piece;\n                                }\n                            }\n                        }\n                        foreach ($eventidConditions as $operator => $conditionForOperator) {\n                            foreach ($conditionForOperator as $conditionKey => $conditionValue) {\n                                $lookupKey = 'Event.' . $conditionKey;\n                                if ($operator === 'NOT') {\n                                    $lookupKey = $lookupKey . ' !=';\n                                }\n                                $this->paginate['conditions']['AND'][] = array($lookupKey => $conditionValue);\n                            }\n                        }\n                        break;\n                    case 'datefrom':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        $this->paginate['conditions']['AND'][] = array('Event.date >=' => $v);\n                        break;\n                    case 'dateuntil':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        $this->paginate['conditions']['AND'][] = array('Event.date <=' => $v);\n                        break;\n                    case 'timestamp':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        if (preg_match('/^[0-9]+[mhdw]$/i', $v)) {\n                            $v = $this->Event->resolveTimeDelta($v);\n                        }\n                        $this->paginate['conditions']['AND'][] = array('Event.timestamp >=' => $v);\n                        break;\n                    case 'publish_timestamp':\n                    case 'publishtimestamp':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        if (is_array($v) && isset($v[0]) && isset($v[1])) {\n                            if (preg_match('/^[0-9]+[mhdw]$/i', $v[0])) {\n                                $v[0] = $this->Event->resolveTimeDelta($v[0]);\n                            }\n                            if (preg_match('/^[0-9]+[mhdw]$/i', $v[1])) {\n                                $v[1] = $this->Event->resolveTimeDelta($v[1]);\n                            }\n                            $this->paginate['conditions']['AND'][] = array('Event.publish_timestamp >=' => $v[0]);\n                            $this->paginate['conditions']['AND'][] = array('Event.publish_timestamp <=' => $v[1]);\n                        } else {\n                            if (preg_match('/^[0-9]+[mhdw]$/i', $v)) {\n                                $v = $this->Event->resolveTimeDelta($v);\n                            }\n                            $this->paginate['conditions']['AND'][] = array('Event.publish_timestamp >=' => $v);\n                        }\n                        break;\n                    case 'org':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        if (!Configure::read('MISP.showorg')) {\n                            continue 2;\n                        }\n                        $orgArray = $this->Event->Org->find('list', array('fields' => array('Org.name')));\n                        $orgUuidArray = $this->Event->Org->find('list', array('fields' => array('Org.uuid')));\n                        $orgArray = array_map('strtoupper', $orgArray);\n                        // if the first character is '!', search for NOT LIKE the rest of the string (excluding the '!' itself of course)\n                        if (!is_array($v)) {\n                            $pieces = explode('|', $v);\n                        } else {\n                            $pieces = $v;\n                        }\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                if (is_numeric(substr($piece, 1))) {\n                                    $this->paginate['conditions']['AND'][] = array('Event.orgc_id !=' => substr($piece, 1));\n                                } else {\n                                    if (Validation::uuid(substr($piece, 1))) {\n                                        $org_id = array_search(substr($piece, 1), $orgUuidArray);\n                                    } else {\n                                        $org_id = array_search(strtoupper(substr($piece, 1)), $orgArray);\n                                    }\n                                    if ($org_id) {\n                                        $this->paginate['conditions']['AND'][] = array('Event.orgc_id !=' => $org_id);\n                                    }\n                                }\n                            } else {\n                                if (is_numeric($piece)) {\n                                    $test['OR'][] = array('Event.orgc_id' => array('Event.orgc_id' => $piece));\n                                } else {\n                                    if (Validation::uuid($piece)) {\n                                        $org_id = array_search($piece, $orgUuidArray);\n                                    } else {\n                                        $org_id = array_search(strtoupper($piece), $orgArray);\n                                    }\n                                    if ($org_id) {\n                                        $test['OR'][] = array('Event.orgc_id' => $org_id);\n                                    } else {\n                                        $test['OR'][] = array('Event.orgc_id' => -1);\n                                    }\n                                }\n                            }\n                        }\n                        $this->paginate['conditions']['AND'][] = $test;\n                        break;\n                    case 'sharinggroup':\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                $this->paginate['conditions']['AND'][] = array('Event.sharing_group_id !=' => substr($piece, 1));\n                            } else {\n                                $test['OR'][] = array('Event.sharing_group_id' => $piece);\n                            }\n                        }\n                        if (!empty($test)) {\n                            $this->paginate['conditions']['AND'][] = $test;\n                        }\n                        break;\n                    case 'eventinfo':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        // if the first character is '!', search for NOT LIKE the rest of the string (excluding the '!' itself of course)\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                $this->paginate['conditions']['AND'][] = array('lower(Event.info)' . ' NOT LIKE' => '%' . strtolower(substr($piece, 1)) . '%');\n                            } else {\n                                $test['OR'][] = array('lower(Event.info)' . ' LIKE' => '%' . strtolower($piece) . '%');\n                            }\n                        }\n                        $this->paginate['conditions']['AND'][] = $test;\n                        break;\n                    case 'tag':\n                    case 'tags':\n                        if (!$v || !Configure::read('MISP.tagging') || $v === 0) {\n                            continue 2;\n                        }\n                        if (!is_array($v)) {\n                            $pieces = explode('|', $v);\n                        } else {\n                            $pieces = $v;\n                        }\n                        $filterString = \"\";\n                        $expectOR = false;\n                        $setOR = false;\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                if (is_numeric(substr($piece, 1))) {\n                                    $conditions = array('OR' => array('Tag.id' => substr($piece, 1)));\n                                } else {\n                                    $conditions = array('OR' => array('Tag.name' => substr($piece, 1)));\n                                }\n                                $tagName = $this->Event->EventTag->Tag->find('first', array(\n                                    'conditions' => $conditions,\n                                    'fields' => array('id', 'name'),\n                                    'recursive' => -1,\n                                ));\n\n                                if (empty($tagName)) {\n                                    if ($filterString != \"\") {\n                                        $filterString .= \"|\";\n                                    }\n                                    $filterString .= '!' . $piece;\n                                    continue;\n                                }\n                                $block = $this->Event->EventTag->find('all', array(\n                                        'conditions' => array('EventTag.tag_id' => $tagName['Tag']['id']),\n                                        'fields' => 'event_id',\n                                        'recursive' => -1,\n                                ));\n                                if (!empty($block)) {\n                                    $sqlSubQuery = 'Event.id NOT IN (';\n                                    foreach ($block as $b) {\n                                        $sqlSubQuery .= $b['EventTag']['event_id'] . ',';\n                                    }\n                                    $this->paginate['conditions']['AND'][] = substr($sqlSubQuery, 0, -1) . ')';\n                                }\n                                if ($filterString != \"\") {\n                                    $filterString .= \"|\";\n                                }\n                                $filterString .= '!' . (isset($tagName['Tag']['name']) ? $tagName['Tag']['name'] : $piece);\n                            } else {\n                                $expectOR = true;\n                                if (is_numeric($piece)) {\n                                    $conditions = array('OR' => array('Tag.id' => $piece));\n                                } else {\n                                    $conditions = array('OR' => array('Tag.name' => $piece));\n                                }\n\n                                $tagName = $this->Event->EventTag->Tag->find('first', array(\n                                        'conditions' => $conditions,\n                                        'fields' => array('id', 'name'),\n                                        'recursive' => -1,\n                                ));\n\n                                if (empty($tagName)) {\n                                    if ($filterString != \"\") {\n                                        $filterString .= \"|\";\n                                    }\n                                    $filterString .= $piece;\n                                    continue;\n                                }\n\n                                $allow = $this->Event->EventTag->find('all', array(\n                                        'conditions' => array('EventTag.tag_id' => $tagName['Tag']['id']),\n                                        'fields' => 'event_id',\n                                        'recursive' => -1,\n                                ));\n                                if (!empty($allow)) {\n                                    $sqlSubQuery = 'Event.id IN (';\n                                    foreach ($allow as $a) {\n                                        $setOR = true;\n                                        $sqlSubQuery .= $a['EventTag']['event_id'] . ',';\n                                    }\n                                    $this->paginate['conditions']['AND']['OR'][] = substr($sqlSubQuery, 0, -1) . ')';\n                                }\n                                if ($filterString != \"\") {\n                                    $filterString .= \"|\";\n                                }\n                                $filterString .= isset($tagName['Tag']['name']) ? $tagName['Tag']['name'] : $piece;\n                            }\n                        }\n                        // If we have a list of OR-d arguments, we expect to end up with a list of allowed event IDs\n                        // If we don't however, it means that none of the tags was found. To prevent displaying the entire event index in this case:\n                        if ($expectOR && !$setOR) {\n                            $this->paginate['conditions']['AND'][] = array('Event.id' => -1);\n                        }\n                        $v = $filterString;\n                        break;\n                    case 'email':\n                        if ($v == \"\" || (strtolower($this->Auth->user('email')) !== strtolower(trim($v)) && !$this->_isSiteAdmin())) {\n                            continue 2;\n                        }\n                        // if the first character is '!', search for NOT LIKE the rest of the string (excluding the '!' itself of course)\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                $users = $this->Event->User->find('list', array(\n                                        'recursive' => -1,\n                                        'fields' => array('User.email'),\n                                        'conditions' => array('lower(User.email) LIKE' => '%' . strtolower(substr($piece, 1)) . '%')\n                                ));\n                                if (!empty($users)) {\n                                    $this->paginate['conditions']['AND'][] = array('Event.user_id !=' => array_keys($users));\n                                }\n                            } else {\n                                $users = $this->Event->User->find('list', array(\n                                        'recursive' => -1,\n                                        'fields' => array('User.email'),\n                                        'conditions' => array('lower(User.email) LIKE' => '%' . strtolower($piece) . '%')\n                                ));\n                                if (!empty($users)) {\n                                    $test['OR'][] = array('Event.user_id' => array_keys($users));\n                                }\n                            }\n                        }\n\n                        if (!empty($test)) {\n                            $this->paginate['conditions']['AND'][] = $test;\n                        }\n                        break;\n                    case 'distribution':\n                    case 'analysis':\n                    case 'threatlevel':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        $terms = array();\n                        $filterString = \"\";\n                        $searchTermInternal = $searchTerm;\n                        if ($searchTerm == 'threatlevel') {\n                            $searchTermInternal = 'threat_level_id';\n                            $threatLevels = $this->Event->ThreatLevel->find('all', array(\n                                'recursive' => -1,\n                                'fields' => array('id', 'name'),\n                            ));\n                            foreach ($threatLevels as $tl) {\n                                $terms[$tl['ThreatLevel']['id']] = $tl['ThreatLevel']['name'];\n                            }\n                        } elseif ($searchTerm == 'analysis') {\n                            $terms = $this->Event->analysisLevels;\n                        } else {\n                            $terms = $this->Event->distributionLevels;\n                        }\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($filterString != \"\") {\n                                $filterString .= '|';\n                            }\n                            if ($piece[0] == '!') {\n                                $filterString .= $terms[substr($piece, 1)];\n                                $this->paginate['conditions']['AND'][] = array('Event.' . $searchTermInternal . ' !=' => substr($piece, 1));\n                            } else {\n                                $filterString .= $terms[$piece];\n                                $test['OR'][] = array('Event.' . $searchTermInternal => $piece);\n                            }\n                        }\n                        $this->paginate['conditions']['AND'][] = $test;\n                        $v = $filterString;\n                        break;\n                    case 'minimal':\n                        $this->paginate['conditions']['AND'][] = array('NOT' => array('Event.attribute_count' => 0));\n                        break;\n                    default:\n                        continue 2;\n                        break;\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        return $passedArgsArray;\n    }\n\n    public function index()\n    {\n        // list the events\n        $urlparams = \"\";\n        $overrideAbleParams = array('all', 'attribute', 'published', 'eventid', 'datefrom', 'dateuntil', 'org', 'eventinfo', 'tag', 'tags', 'distribution', 'sharinggroup', 'analysis', 'threatlevel', 'email', 'hasproposal', 'timestamp', 'publishtimestamp', 'publish_timestamp', 'minimal');\n        $paginationParams = array('limit', 'page', 'sort', 'direction', 'order');\n        $passedArgs = $this->passedArgs;\n        if (isset($this->request->data)) {\n            if (isset($this->request->data['request'])) {\n                $this->request->data = $this->request->data['request'];\n            }\n            foreach ($this->request->data as $k => $v) {\n                if (substr($k, 0, 6) === 'search' && in_array(strtolower(substr($k, 6)), $overrideAbleParams)) {\n                    unset($this->request->data[$k]);\n                    $this->request->data[strtolower(substr($k, 6))] = $v;\n                } else if (in_array(strtolower($k), $overrideAbleParams)) {\n                    unset($this->request->data[$k]);\n                    $this->request->data[strtolower($k)] = $v;\n                }\n            }\n            foreach ($overrideAbleParams as $oap) {\n                if (isset($this->request->data[$oap])) {\n                    $passedArgs['search' . $oap] = $this->request->data[$oap];\n                }\n            }\n            foreach ($paginationParams as $paginationParam) {\n                if (isset($this->request->data[$paginationParam])) {\n                    $passedArgs[$paginationParam] = $this->request->data[$paginationParam];\n                }\n            }\n        }\n        $this->set('passedArgs', json_encode($passedArgs));\n        // check each of the passed arguments whether they're a filter (could also be a sort for example) and if yes, add it to the pagination conditions\n        $passedArgsArray = $this->__setIndexFilterConditions($passedArgs, $urlparams);\n        if (!$this->_isRest()) {\n            $this->paginate['contain'] = array_merge($this->paginate['contain'], array('User.email', 'EventTag'));\n        } else {\n            $this->paginate['contain'] = array_merge($this->paginate['contain'], array('User.email'));\n        }\n        $this->set('urlparams', $urlparams);\n        $this->set('passedArgsArray', $passedArgsArray);\n        $this->paginate = Set::merge($this->paginate, array('contain' => array(\n            'ThreatLevel' => array(\n                'fields' => array(\n                    'ThreatLevel.name'))\n            ),\n        ));\n        $this->loadModel('GalaxyCluster');\n\n        // for REST, don't use the pagination. With this, we'll escape the limit of events shown on the index.\n        if ($this->_isRest()) {\n            $rules = array();\n            $fieldNames = array_keys($this->Event->getColumnTypes());\n            $directions = array('ASC', 'DESC');\n            if (isset($passedArgs['sort']) && in_array($passedArgs['sort'], $fieldNames)) {\n                if (isset($passedArgs['direction']) && in_array(strtoupper($passedArgs['direction']), $directions)) {\n                    $rules['order'] = array('Event.' . $passedArgs['sort'] => $passedArgs['direction']);\n                } else {\n                    $rules['order'] = array('Event.' . $passedArgs['sort'] => 'ASC');\n                }\n            }\n            $rules['contain'] = $this->paginate['contain'];\n            if (isset($this->paginate['conditions'])) {\n                $rules['conditions'] = $this->paginate['conditions'];\n            }\n            if (!empty($passedArgs['searchminimal']) || !empty($passedArgs['minimal'])) {\n                unset($rules['contain']);\n                $rules['recursive'] = -1;\n                $rules['fields'] = array('id', 'timestamp', 'sighting_timestamp', 'published', 'uuid');\n                $rules['contain'] = array('Orgc.uuid');\n            }\n            $paginationRules = array('page', 'limit', 'sort', 'direction', 'order');\n            foreach ($paginationRules as $paginationRule) {\n                if (isset($passedArgs[$paginationRule])) {\n                    $rules[$paginationRule] = $passedArgs[$paginationRule];\n                }\n            }\n            $counting_rules = $rules;\n            if (!empty($counting_rules['limit'])) {\n                unset($counting_rules['limit']);\n            }\n            if (!empty($counting_rules['page'])) {\n                unset($counting_rules['page']);\n            }\n            $absolute_total = $this->Event->find('count', $counting_rules);\n            if (empty($rules['limit'])) {\n                $events = array();\n                $i = 1;\n                $continue = true;\n                $rules['limit'] = 20000;\n                while ($continue) {\n                    $rules['page'] = $i;\n                    $temp = $this->Event->find('all', $rules);\n                    if (!empty($temp)) {\n                        $events = array_merge($events, $temp);\n                    } else {\n                        $continue = false;\n                    }\n                    $i += 1;\n                }\n            } else {\n                $events = $this->Event->find('all', $rules);\n            }\n            $total_events = count($events);\n            foreach ($events as $k => $event) {\n                if (empty($event['SharingGroup']['name'])) {\n                    unset($events[$k]['SharingGroup']);\n                }\n            }\n            if (empty($passedArgs['searchminimal']) && empty($passedArgs['minimal'])) {\n                $passes = ceil($total_events / 1000);\n                for ($i = 0; $i < $passes; $i++) {\n                    $event_tag_objects = array();\n                    $event_tag_ids = array();\n                    $elements = 1000;\n                    if ($i == ($passes-1)) {\n                        $elements = ($total_events % 1000);\n                    }\n                    for ($j = 0; $j < $elements; $j++) {\n                        $event_tag_ids[$events[($i*1000) + $j]['Event']['id']] = array();\n                    }\n                    $eventTags = $this->Event->EventTag->find('all', array(\n                        'recursive' => -1,\n                        'conditions' => array(\n                            'EventTag.event_id' => array_keys($event_tag_ids)\n                        ),\n                        'contain' => array(\n                            'Tag' => array(\n                                'conditions' => array('Tag.exportable' => 1),\n                                'fields' => array('Tag.id', 'Tag.name', 'Tag.colour')\n                            )\n                        )\n                    ));\n                    foreach ($eventTags as $ket => $et) {\n                        if (empty($et['Tag']['id'])) {\n                            unset($eventTags[$ket]);\n                        } else {\n                            $et['EventTag']['Tag'] = $et['Tag'];\n                            unset($et['Tag']);\n                            if (empty($event_tag_objects[$et['EventTag']['event_id']])) {\n                                $event_tag_objects[$et['EventTag']['event_id']] = array($et['EventTag']);\n                            } else {\n                                $event_tag_objects[$et['EventTag']['event_id']][] = $et['EventTag'];\n                            }\n                        }\n                    }\n                    $eventTags = array_values($eventTags);\n                    for ($j = 0; $j < $elements; $j++) {\n                        if (!empty($event_tag_objects[$events[($i*1000) + $j]['Event']['id']])) {\n                            $events[($i*1000) + $j]['EventTag'] = $event_tag_objects[$events[($i*1000) + $j]['Event']['id']];\n                        } else {\n                            $events[($i*1000) + $j]['EventTag'] = array();\n                        }\n                    }\n                }\n                $events = $this->GalaxyCluster->attachClustersToEventIndex($events);\n                foreach ($events as $key => $event) {\n                    $temp = $events[$key]['Event'];\n                    $temp['Org'] = $event['Org'];\n                    $temp['Orgc'] = $event['Orgc'];\n                    unset($temp['user_id']);\n                    $rearrangeObjects = array('GalaxyCluster', 'EventTag', 'SharingGroup');\n                    foreach ($rearrangeObjects as $ro) {\n                        if (isset($event[$ro])) {\n                            $temp[$ro] = $event[$ro];\n                        }\n                    }\n                    $events[$key] = $temp;\n                }\n                if ($this->response->type() === 'application/xml') {\n                    $events = array('Event' => $events);\n                }\n                return $this->RestResponse->viewData($events, $this->response->type(), false, false, false, array('X-Result-Count' => $absolute_total));\n            } else {\n                foreach ($events as $key => $event) {\n                    $event['Event']['orgc_uuid'] = $event['Orgc']['uuid'];\n                    $events[$key] = $event['Event'];\n                }\n                return $this->RestResponse->viewData($events, $this->response->type(), false, false, false, array('X-Result-Count' => $absolute_total));\n            }\n        } else {\n            $events = $this->paginate();\n            foreach ($events as $k => $event) {\n                if (empty($event['SharingGroup']['name'])) {\n                    unset($events[$k]['SharingGroup']);\n                }\n            }\n            if (count($events) == 1 && isset($this->passedArgs['searchall'])) {\n                $this->redirect(array('controller' => 'events', 'action' => 'view', $events[0]['Event']['id']));\n            }\n            $events = $this->Event->attachTagsToEvents($events);\n            if (Configure::read('MISP.showCorrelationsOnIndex')) {\n                $events = $this->Event->attachCorrelationCountToEvents($this->Auth->user(), $events);\n            }\n            if (Configure::read('MISP.showSightingsCountOnIndex')) {\n                $events = $this->Event->attachSightingsCountToEvents($this->Auth->user(), $events);\n            }\n            if (Configure::read('MISP.showProposalsCountOnIndex')) {\n                $events = $this->Event->attachProposalsCountToEvents($this->Auth->user(), $events);\n            }\n            if (Configure::read('MISP.showDiscussionsCountOnIndex')) {\n                $events = $this->Event->attachDiscussionsCountToEvents($this->Auth->user(), $events);\n            }\n            $events = $this->GalaxyCluster->attachClustersToEventIndex($events, true);\n            $this->set('events', $events);\n        }\n\n        if (!$this->Event->User->getPGP($this->Auth->user('id')) && Configure::read('GnuPG.onlyencrypted')) {\n            // No GnuPG\n            if (Configure::read('SMIME.enabled') && !$this->Event->User->getCertificate($this->Auth->user('id'))) {\n                // No GnuPG and No SMIME\n                $this->Flash->info(__('No x509 certificate or GnuPG key set in your profile. To receive emails, submit your public certificate or GnuPG key in your profile.'));\n            } elseif (!Configure::read('SMIME.enabled')) {\n                $this->Flash->info(__('No GnuPG key set in your profile. To receive emails, submit your public key in your profile.'));\n            }\n        } elseif ($this->Auth->user('autoalert') && !$this->Event->User->getPGP($this->Auth->user('id')) && Configure::read('GnuPG.bodyonlyencrypted')) {\n            // No GnuPG & autoalert\n            if ($this->Auth->user('autoalert') && Configure::read('SMIME.enabled') && !$this->Event->User->getCertificate($this->Auth->user('id'))) {\n                // No GnuPG and No SMIME & autoalert\n                $this->Flash->info(__('No x509 certificate or GnuPG key set in your profile. To receive attributes in emails, submit your public certificate or GnuPG key in your profile.'));\n            } elseif (!Configure::read('SMIME.enabled')) {\n                $this->Flash->info(__('No GnuPG key set in your profile. To receive attributes in emails, submit your public key in your profile.'));\n            }\n        }\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('analysisLevels', $this->Event->analysisLevels);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n        $this->set('shortDist', $this->Event->shortDist);\n        $this->set('distributionData', $this->genDistributionGraph(-1));\n        if ($this->params['ext'] === 'csv') {\n            App::uses('CsvExport', 'Export');\n            $export = new CsvExport();\n            return $this->RestResponse->viewData($export->eventIndex($events), 'csv');\n        }\n        if ($this->request->is('ajax')) {\n            $this->autoRender = false;\n            $this->layout = false;\n            $this->render('ajax/index');\n        }\n    }\n\n    public function filterEventIndex()\n    {\n        $passedArgsArray = array();\n        $filtering = array(\n            'published' => 2,\n            'org' => array('OR' => array(), 'NOT' => array()),\n            'tag' => array('OR' => array(), 'NOT' => array()),\n            'eventid' => array('OR' => array(), 'NOT' => array()),\n            'date' => array('from' => \"\", 'until' => \"\"),\n            'eventinfo' => array('OR' => array(), 'NOT' => array()),\n            'threatlevel' => array('OR' => array(), 'NOT' => array()),\n            'distribution' => array('OR' => array(), 'NOT' => array()),\n            'sharinggroup' => array('OR' => array(), 'NOT' => array()),\n            'analysis' => array('OR' => array(), 'NOT' => array()),\n            'attribute' => array('OR' => array(), 'NOT' => array()),\n            'hasproposal' => 2,\n        );\n\n        if ($this->_isSiteAdmin()) {\n            $filtering['email'] = array('OR' => array(), 'NOT' => array());\n        }\n\n        foreach ($this->passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                $searchTerm = substr($k, 6);\n                switch ($searchTerm) {\n                    case 'published':\n                    case 'hasproposal':\n                        $filtering[$searchTerm] = $v;\n                        break;\n                    case 'Datefrom':\n                        $filtering['date']['from'] = $v;\n                        break;\n                    case 'Dateuntil':\n                        $filtering['date']['until'] = $v;\n                        break;\n                    case 'email':\n                    case 'org':\n                    case 'eventid':\n                    case 'tag':\n                    case 'eventinfo':\n                    case 'attribute':\n                    case 'threatlevel':\n                    case 'distribution':\n                    case 'sharinggroup':\n                    case 'analysis':\n                        if ($v == \"\" || ($searchTerm == 'email' && !$this->_isSiteAdmin())) {\n                            continue 2;\n                        }\n                        $pieces = explode('|', $v);\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                $filtering[$searchTerm]['NOT'][] = substr($piece, 1);\n                            } else {\n                                $filtering[$searchTerm]['OR'][] = $piece;\n                            }\n                        }\n                        break;\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        $this->set('filtering', json_encode($filtering));\n        $tags = $this->Event->EventTag->Tag->find('all', array('recursive' => -1));\n        $tagNames = array();\n        $tagJSON = array();\n        foreach ($tags as $k => $v) {\n            $tagNames[$v['Tag']['id']] = $v['Tag']['name'];\n            $tagJSON[] = array('id' => $v['Tag']['id'], 'value' => h($v['Tag']['name']));\n        }\n        $conditions = array();\n        if (!$this->_isSiteAdmin()) {\n            $eIds = $this->Event->fetchEventIds($this->Auth->user(), false, false, false, true);\n            $conditions['AND'][] = array('Event.id' => $eIds);\n        }\n        $rules = array('published', 'eventid', 'tag', 'date', 'eventinfo', 'threatlevel', 'distribution', 'sharinggroup', 'analysis', 'attribute', 'hasproposal');\n        if ($this->_isSiteAdmin()) {\n            $rules[] = 'email';\n        }\n        if (Configure::read('MISP.showorg')) {\n            $orgs = $this->Event->Orgc->find('list', array(\n                'conditions' => array(),\n                'recursive' => -1,\n                'fields' => array('Orgc.id', 'Orgc.name'),\n                'sort' => array('lower(Orgc.name) asc')\n            ));\n            $this->set('showorg', true);\n            $this->set('orgs', $orgs);\n            $rules[] = 'org';\n        } else {\n            $this->set('showorg', false);\n        }\n        $sharingGroups = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', true);\n        $this->set('sharingGroups', $sharingGroups);\n        $rules = $this->_arrayToValuesIndexArray($rules);\n        $this->set('tags', $tagNames);\n        $this->set('tagJSON', json_encode($tagJSON));\n        $this->set('rules', $rules);\n        $this->set('baseurl', Configure::read('MISP.baseurl'));\n        $this->layout = 'ajax';\n    }\n\n    /*\n     * Search for a value on an attribute level for a specific field.\n     * $attribute : (array) an attribute\n     * $fields : (array) list of keys in attribute to search in\n     * $searchValue : Values to search ( '|' is the separator)\n     * returns true on match\n     */\n    private function __valueInFieldAttribute($attribute, $fields, $searchValue)\n    {\n        foreach ($attribute as $k => $v) { // look in attributes line\n            if (is_string($v)) {\n                foreach ($fields as $field) {\n                    if (strpos(\".\", $field) === false) { // check sub array after\n                        // check for key in attribut\n                        if (isset($attribute[$field])) {\n                            $temp_value = strtolower($attribute[$field]);\n                            $temp_search = strtolower($searchValue);\n                            $temp_searches = explode('|', $temp_search);\n                            foreach ($temp_searches as $s) {\n                                if (strpos($temp_value, $s) !==false) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                // check for tag in attribut maybe for other thing later\n                if ($k === 'AttributeTag') {\n                    foreach ($v as $tag) {\n                        foreach ($fields as $field) {\n                            if (strpos(strtolower($field), \"tag.\") !== false) { // check sub array\n                                $tagKey = explode('tag.', strtolower($field))[1];\n                                if (isset($tag['Tag'][$tagKey])) {\n                                    $temp_value = strtolower($tag['Tag'][$tagKey]);\n                                    $temp_search = strtolower($searchValue);\n                                    if (strpos($temp_value, $temp_search) !==false) {\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public function viewEventAttributes($id, $all = false)\n    {\n        $filterData = array(\n            'request' => $this->request,\n            'paramArray' => $this->acceptedFilteringNamedParams,\n            'named_params' => $this->params['named']\n        );\n        $exception = false;\n        $filters = $this->_harvestParameters($filterData, $exception);\n\n        if (isset($filters['focus'])) {\n            $this->set('focus', $filters['focus']);\n        }\n        $conditions = array('eventid' => $id);\n        if (isset($filters['extended'])) {\n            $conditions['extended'] = 1;\n            $this->set('extended', 1);\n        } else {\n            $this->set('extended', 0);\n        }\n        if (!empty($filters['overrideLimit'])) {\n            $conditions['overrideLimit'] = 1;\n        }\n        if (isset($filters['deleted'])) {\n            $conditions['deleted'] = $filters['deleted'] == 2 ? 0 : [0, 1];\n            if ($filters['deleted'] == 2) { // not-deleted only\n                $conditions['deleted'] = 0;\n            } elseif ($filters['deleted'] == 1) { // deleted only\n                $conditions['deleted'] = 1;\n            } else { // both\n                $conditions['deleted'] = [0, 1];\n            }\n        }\n        if (isset($filters['toIDS']) && $filters['toIDS'] != 0) {\n            $conditions['to_ids'] = $filters['toIDS'] == 2 ? 0 : 1;\n        }\n        $conditions['includeFeedCorrelations'] = true;\n        if (!isset($filters['includeServerCorrelations'])) {\n            $conditions['includeServerCorrelations'] = 1;\n            if ($this->_isRest()) {\n                $conditions['includeServerCorrelations'] = 0;\n            }\n        } else {\n            $conditions['includeServerCorrelations'] = $filters['includeServerCorrelations'];\n        }\n        $conditions['includeAllTags'] = true;\n        $conditions['includeGranularCorrelations'] = 1;\n        if (!empty($filters['includeRelatedTags'])) {\n            $this->set('includeRelatedTags', 1);\n            $conditions['includeRelatedTags'] = 1;\n        } else {\n            $this->set('includeRelatedTags', 0);\n        }\n        if (!empty($filters['includeDecayScore'])) {\n            $this->set('includeDecayScore', 1);\n            $conditions['includeDecayScore'] = 1;\n        } else {\n            $this->set('includeDecayScore', 0);\n        }\n\n        $results = $this->Event->fetchEvent($this->Auth->user(), $conditions);\n        if (empty($results)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $event = $results[0];\n\n        $attributeTagsName = $this->Event->Attribute->AttributeTag->extractAttributeTagsNameFromEvent($event, 'both');\n        $this->set('attributeTags', array_values($attributeTagsName['tags']));\n        $this->set('attributeClusters', array_values($attributeTagsName['clusters']));\n\n        if (isset($filters['distribution'])) {\n            if (!is_array($filters['distribution'])) {\n                $filters['distribution'] = array($filters['distribution']);\n            }\n            $temp = implode('|', $filters['distribution']);\n            $this->__applyQueryString($event, $temp, 'distribution');\n        }\n        if (isset($filters['searchFor']) && $filters['searchFor'] !== '') {\n            if (isset($filters['filterColumnsOverwrite'])) {\n                $this->__applyQueryString($event, $filters['searchFor'], $filters['filterColumnsOverwrite']);\n            } else {\n                $this->__applyQueryString($event, $filters['searchFor']);\n            }\n            $this->set('passedArgsArray', array('all' => $filters['searchFor']));\n        }\n        if (isset($filters['taggedAttributes']) && $filters['taggedAttributes'] !== '') {\n            $this->__applyQueryString($event, $filters['taggedAttributes'], 'Tag.name');\n        }\n        if (isset($filters['galaxyAttachedAttributes']) && $filters['galaxyAttachedAttributes'] !== '') {\n            $this->__applyQueryString($event, $filters['galaxyAttachedAttributes'], 'Tag.name');\n        }\n        $emptyEvent = (empty($event['Object']) && empty($event['Attribute']));\n        $this->set('emptyEvent', $emptyEvent);\n\n        // remove galaxies tags\n        $this->loadModel('Taxonomy');\n        foreach ($event['Object'] as $k => $object) {\n            if (isset($object['Attribute'])) {\n                foreach ($object['Attribute'] as $k2 => $attribute) {\n                    $this->Event->Attribute->removeGalaxyClusterTags($event['Object'][$k]['Attribute'][$k2]);\n\n                    $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($attribute['AttributeTag']);\n                    foreach ($tagConflicts['global'] as $tagConflict) {\n                        $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n                    }\n                    foreach ($tagConflicts['local'] as $tagConflict) {\n                        $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n                    }\n                    $event['Object'][$k]['Attribute'][$k2]['tagConflicts'] = $tagConflicts;\n                }\n            }\n        }\n        foreach ($event['Attribute'] as $k => $attribute) {\n            $this->Event->Attribute->removeGalaxyClusterTags($event['Attribute'][$k]);\n\n            $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($attribute['AttributeTag']);\n            foreach ($tagConflicts['global'] as $tagConflict) {\n                $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n            }\n            foreach ($tagConflicts['local'] as $tagConflict) {\n                $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n            }\n            $event['Attribute'][$k]['tagConflicts'] = $tagConflicts;\n        }\n        if (empty($this->passedArgs['sort'])) {\n            $filters['sort'] = 'timestamp';\n            $filters['direction'] = 'desc';\n        }\n        $sightingsData = $this->Event->getSightingData($event);\n        $this->set('sightingsData', $sightingsData);\n        $params = $this->Event->rearrangeEventForView($event, $filters, $all, $sightingsData);\n        if (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')) {\n            $this->loadModel('Sightingdb');\n            $event = $this->Sightingdb->attachToEvent($event, $this->Auth->user());\n        }\n        $this->params->params['paging'] = array($this->modelClass => $params);\n        // workaround to get the event dates in to the attribute relations\n        $relatedDates = array();\n        if (isset($event['RelatedEvent'])) {\n            foreach ($event['RelatedEvent'] as $relation) {\n                $relatedDates[$relation['Event']['id']] = $relation['Event']['date'];\n            }\n            if (isset($event['RelatedAttribute'])) {\n                foreach ($event['RelatedAttribute'] as $key => $relatedAttribute) {\n                    foreach ($relatedAttribute as $key2 => $relation) {\n                        $event['RelatedAttribute'][$key][$key2]['date'] = $relatedDates[$relation['id']];\n                    }\n                }\n            }\n        }\n        $this->set('event', $event);\n        $dataForView = array(\n            'Attribute' => array('attrDescriptions' => 'fieldDescriptions', 'distributionDescriptions' => 'distributionDescriptions', 'distributionLevels' => 'distributionLevels', 'shortDist' => 'shortDist'),\n            'Event' => array('eventDescriptions' => 'fieldDescriptions', 'analysisDescriptions' => 'analysisDescriptions', 'analysisLevels' => 'analysisLevels')\n        );\n        foreach ($dataForView as $m => $variables) {\n            if ($m === 'Event') {\n                $currentModel = $this->Event;\n            } elseif ($m === 'Attribute') {\n                $currentModel = $this->Event->Attribute;\n            }\n            foreach ($variables as $alias => $variable) {\n                $this->set($alias, $currentModel->{$variable});\n            }\n        }\n        if (Configure::read('Plugin.Enrichment_services_enable')) {\n            $this->loadModel('Module');\n            $modules = $this->Module->getEnabledModules($this->Auth->user());\n            if (!empty($modules) && is_array($modules)) {\n                foreach ($modules as $k => $v) {\n                    if (isset($v['restrict'])) {\n                        if (!$this->_isSiteAdmin() && $v['restrict'] != $this->Auth->user('org_id')) {\n                            unset($modules[$k]);\n                        }\n                    }\n                }\n            }\n            $this->set('modules', $modules);\n        }\n        if (Configure::read('Plugin.Cortex_services_enable')) {\n            $this->loadModel('Module');\n            $cortex_modules = $this->Module->getEnabledModules($this->Auth->user(), false, 'Cortex');\n            $this->set('cortex_modules', $cortex_modules);\n        }\n        $deleted = 0;\n        if (isset($filters['deleted'])) {\n            $deleted = $filters['deleted'] == 2 ? 0 : 1;\n        }\n        $this->set('includeSightingdb', (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')));\n        $this->set('deleted', $deleted);\n        $this->set('typeGroups', array_keys($this->Event->Attribute->typeGroupings));\n        $this->set('attributeFilter', isset($filters['attributeFilter']) ? $filters['attributeFilter'] : 'all');\n        $this->set('filters', $filters);\n        $advancedFiltering = $this->__checkIfAdvancedFiltering($filters);\n        $this->set('advancedFilteringActive', $advancedFiltering['active'] ? 1 : 0);\n        $this->set('advancedFilteringActiveRules', $advancedFiltering['activeRules']);\n        $this->set('defaultFilteringRules', $this->defaultFilteringRules);\n        $this->disableCache();\n        $this->layout = 'ajax';\n        $this->loadModel('Sighting');\n        $uriArray = explode('/', $this->params->here);\n        foreach ($uriArray as $k => $v) {\n            if (strpos($v, ':')) {\n                $temp = explode(':', $v);\n                if ($temp[0] == 'focus') {\n                    unset($uriArray[$k]);\n                }\n            }\n            $this->params->here = implode('/', $uriArray);\n        }\n        if (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')) {\n            $this->set('sightingdbs', $this->Sightingdb->getSightingdbList($this->Auth->user()));\n        }\n        $this->set('sightingTypes', $this->Sighting->type);\n        $this->set('currentUri', $this->params->here);\n        $this->layout = false;\n        $this->render('/Elements/eventattribute');\n    }\n\n    private function __viewUI($event, $continue, $fromEvent)\n    {\n        $this->loadModel('Taxonomy');\n        $filterData = array(\n            'request' => $this->request,\n            'paramArray' => $this->acceptedFilteringNamedParams,\n            'named_params' => $this->params['named']\n        );\n        $exception = false;\n        $warningTagConflicts = array();\n        $filters = $this->_harvestParameters($filterData, $exception);\n\n        $this->loadModel('GalaxyCluster');\n        if (!$this->_isRest()) {\n            //$attack = $this->GalaxyCluster->Galaxy->constructAttackReport($event);\n        }\n        $emptyEvent = (empty($event['Object']) && empty($event['Attribute']));\n        $this->set('emptyEvent', $emptyEvent);\n        $attributeCount = isset($event['Attribute']) ? count($event['Attribute']) : 0;\n        $objectCount = isset($event['Object']) ? count($event['Object']) : 0;\n        $oldest_timestamp = false;\n        if (!empty($event['Object'])) {\n            foreach ($event['Object'] as $k => $object) {\n                if (!empty($object['Attribute'])) {\n                    foreach ($object['Attribute'] as $attribute) {\n                        if ($oldest_timestamp == false || $oldest_timestamp > $attribute['timestamp']) {\n                            $oldest_timestamp = $attribute['timestamp'];\n                        }\n                    }\n                    $attributeCount += count($object['Attribute']);\n                }\n            }\n        }\n        $this->set('attribute_count', $attributeCount);\n        $this->set('object_count', $objectCount);\n        // set the data for the contributors / history field\n        $contributors = $this->Event->ShadowAttribute->getEventContributors($event['Event']['id']);\n        if ($this->userRole['perm_publish'] && $event['Event']['orgc_id'] == $this->Auth->user('org_id')) {\n            $proposalStatus = false;\n            if (isset($event['ShadowAttribute']) && !empty($event['ShadowAttribute'])) {\n                $proposalStatus = true;\n            }\n            if (!$proposalStatus && !empty($event['Attribute'])) {\n                foreach ($event['Attribute'] as $temp) {\n                    if (isset($temp['ShadowAttribute']) && !empty($temp['ShadowAttribute'])) {\n                        $proposalStatus = true;\n                    }\n                }\n            }\n            $mess = $this->Session->read('Message');\n            if ($proposalStatus && empty($mess)) {\n                $this->Flash->info('This event has active proposals for you to accept or discard.');\n            }\n        }\n        // set the pivot data\n        $this->helpers[] = 'Pivot';\n        if ($continue) {\n            $data = $this->__continuePivoting($event['Event']['id'], $event['Event']['info'], $event['Event']['date'], $fromEvent);\n        } else {\n            $data = $this->__startPivoting($event['Event']['id'], $event['Event']['info'], $event['Event']['date']);\n        }\n        $pivot = $this->Session->read('pivot_thread');\n        $this->__arrangePivotVertical($pivot);\n        $this->__setDeletable($pivot, $event['Event']['id'], true);\n        $this->set('allPivots', $this->Session->read('pivot_thread'));\n        $this->set('pivot', $pivot);\n        // set data for the view, the event is already set in view()\n        $dataForView = array(\n                'Attribute' => array('attrDescriptions' => 'fieldDescriptions', 'distributionDescriptions' => 'distributionDescriptions', 'distributionLevels' => 'distributionLevels', 'shortDist' => 'shortDist'),\n                'Event' => array('eventDescriptions' => 'fieldDescriptions', 'analysisDescriptions' => 'analysisDescriptions', 'analysisLevels' => 'analysisLevels')\n        );\n\n        // workaround to get the event dates in to the attribute relations and number of correlation per related event\n        $relatedDates = array();\n        $relatedEventCorrelationCount = array();\n        if (!empty($event['RelatedEvent'])) {\n            foreach ($event['RelatedEvent'] as $relation) {\n                $relatedDates[$relation['Event']['id']] = $relation['Event']['date'];\n            }\n            if (!empty($event['RelatedAttribute'])) {\n                foreach ($event['RelatedAttribute'] as $key => $relatedAttribute) {\n                    foreach ($relatedAttribute as $key2 => $relation) {\n                        if (!empty($relatedDates[$relation['id']])) {\n                            $event['RelatedAttribute'][$key][$key2]['date'] = $relatedDates[$relation['id']];\n                        }\n                        $relatedEventCorrelationCount[$relation['id']][$relation['value']] = 1;\n                    }\n                }\n            }\n        }\n        foreach ($relatedEventCorrelationCount as $key => $relation) {\n            $relatedEventCorrelationCount[$key] = count($relatedEventCorrelationCount[$key]);\n        }\n\n        foreach ($dataForView as $m => $variables) {\n            if ($m === 'Event') {\n                $currentModel = $this->Event;\n            } elseif ($m === 'Attribute') {\n                $currentModel = $this->Event->Attribute;\n            }\n            foreach ($variables as $alias => $variable) {\n                $this->set($alias, $currentModel->{$variable});\n            }\n        }\n\n        $this->Event->removeGalaxyClusterTags($event);\n\n        $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($event['EventTag']);\n        foreach ($tagConflicts['global'] as $tagConflict) {\n            $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n        }\n        foreach ($tagConflicts['local'] as $tagConflict) {\n            $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n        }\n        $this->set('tagConflicts', $tagConflicts);\n\n        $startDate = null;\n        $modificationMap = array();\n        foreach ($event['Attribute'] as $k => $attribute) {\n            if ($oldest_timestamp == false || $oldest_timestamp > $attribute['timestamp']) {\n                $oldest_timestamp = $attribute['timestamp'];\n            }\n            if ($startDate === null || $attribute['timestamp'] < $startDate) {\n                $startDate = $attribute['timestamp'];\n            }\n            $modDate = date(\"Y-m-d\", $attribute['timestamp']);\n            $modificationMap[$modDate] = empty($modificationMap[$modDate])? 1 : $modificationMap[date(\"Y-m-d\", $attribute['timestamp'])] + 1;\n\n            $this->Event->Attribute->removeGalaxyClusterTags($event['Attribute'][$k]);\n\n            $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($attribute['AttributeTag']);\n            foreach ($tagConflicts['global'] as $tagConflict) {\n                $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n            }\n            foreach ($tagConflicts['local'] as $tagConflict) {\n                $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n            }\n            $event['Attribute'][$k]['tagConflicts'] = $tagConflicts;\n        }\n        $attributeTagsName = $this->Event->Attribute->AttributeTag->extractAttributeTagsNameFromEvent($event, 'both');\n        $this->set('attributeTags', array_values($attributeTagsName['tags']));\n        $this->set('attributeClusters', array_values($attributeTagsName['clusters']));\n        $startDate = $event['Event']['timestamp'];\n        $modDate = date(\"Y-m-d\", $event['Event']['timestamp']);\n        $modificationMap[$modDate] = 1;\n        foreach ($event['Object'] as $k => $object) {\n            if ($startDate === null || $object['timestamp'] < $startDate) {\n                $startDate = $object['timestamp'];\n            }\n            $modDate = date(\"Y-m-d\", $object['timestamp']);\n            $modificationMap[$modDate] = empty($modificationMap[$modDate])? 1 : $modificationMap[date(\"Y-m-d\", $object['timestamp'])] + 1;\n            if (!empty($object['Attribute'])) {\n                foreach ($object['Attribute'] as $k2 => $attribute) {\n                    if ($startDate === null || $attribute['timestamp'] < $startDate) {\n                        $startDate = $attribute['timestamp'];\n                    }\n                    $modDate = date(\"Y-m-d\", $attribute['timestamp']);\n                    $modificationMap[$modDate] = empty($modificationMap[$modDate])? 1 : $modificationMap[date(\"Y-m-d\", $attribute['timestamp'])] + 1;\n\n                    $this->Event->Attribute->removeGalaxyClusterTags($event['Object'][$k]['Attribute'][$k2]);\n\n                    $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($attribute['AttributeTag']);\n                    foreach ($tagConflicts['global'] as $tagConflict) {\n                        $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n                    }\n                    foreach ($tagConflicts['local'] as $tagConflict) {\n                        $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n                    }\n                    $event['Object'][$k]['Attribute'][$k2]['tagConflicts'] = $tagConflicts;\n                }\n            }\n        }\n        $this->set('warningTagConflicts', $warningTagConflicts);\n        $filters['sort'] = 'timestamp';\n        $filters['direction'] = 'desc';\n        if (isset($filters['distribution'])) {\n            if (!is_array($filters['distribution'])) {\n                $filters['distribution'] = array($filters['distribution']);\n            }\n            $temp = implode('|', $filters['distribution']);\n            $this->__applyQueryString($event, $temp, 'distribution');\n        }\n        $modificationMapCSV = 'Date,Close\\n';\n        $startDate = array_keys($modificationMap);\n        sort($startDate);\n        $startDate = $startDate[0];\n        $this->set('startDate', $startDate);\n        $to = date('Y-m-d', time());\n        if ((strtotime($to) - 172800) > $startDate) {\n            $startDate = date('Y-m-d', strtotime($to) - 172800);\n        }\n        for ($date = $startDate; strtotime($date) <= strtotime($to); $date = date('Y-m-d', strtotime(\"+1 day\", strtotime($date)))) {\n            if (isset($modificationMap[$date])) {\n                $modificationMapCSV .= $date . ',' . $modificationMap[$date] . '\\n';\n            } else {\n                $modificationMapCSV .= $date . ',0\\n';\n            }\n        }\n        unset($modificationMap);\n        $sightingsData = $this->Event->getSightingData($event);\n        $this->set('sightingsData', $sightingsData);\n        $params = $this->Event->rearrangeEventForView($event, $filters, false, $sightingsData);\n        if (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')) {\n            $this->loadModel('Sightingdb');\n            $event = $this->Sightingdb->attachToEvent($event, $this->Auth->user());\n        }\n        $this->params->params['paging'] = array($this->modelClass => $params);\n        $this->set('event', $event);\n        $extensionParams = array(\n            'conditions' => array(\n                'Event.extends_uuid' => $event['Event']['uuid']\n            )\n        );\n        $extensions = $this->Event->fetchSimpleEvents($this->Auth->user(), $extensionParams);\n        $this->set('extensions', $extensions);\n        if (!empty($event['Event']['extends_uuid'])) {\n            $extendedEvent = $this->Event->fetchSimpleEvents($this->Auth->user(), array('conditions' => array('Event.uuid' => $event['Event']['extends_uuid'])));\n            if (empty($extendedEvent)) {\n                $extendedEvent = $event['Event']['extends_uuid'];\n            }\n            $this->set('extendedEvent', $extendedEvent);\n        }\n        if (Configure::read('MISP.delegation')) {\n            $this->loadModel('EventDelegation');\n            $delegationConditions = array('EventDelegation.event_id' => $event['Event']['id']);\n            if (!$this->_isSiteAdmin() && $this->userRole['perm_publish']) {\n                $delegationConditions['OR'] = array('EventDelegation.org_id' => $this->Auth->user('org_id'),\n                                                    'EventDelegation.requester_org_id' => $this->Auth->user('org_id'));\n            }\n            $this->set('delegationRequest', $this->EventDelegation->find('first', array(\n                'conditions' => $delegationConditions,\n                'recursive' => -1,\n                'contain' => array('Org', 'RequesterOrg')\n            )));\n        }\n        if (Configure::read('Plugin.Enrichment_services_enable')) {\n            $this->loadModel('Module');\n            $modules = $this->Module->getEnabledModules($this->Auth->user());\n            if (is_array($modules)) {\n                foreach ($modules as $k => $v) {\n                    if (isset($v['restrict'])) {\n                        if ($this->_isSiteAdmin() && $v['restrict'] != $this->Auth->user('org_id')) {\n                            unset($modules[$k]);\n                        }\n                    }\n                }\n            }\n            $this->set('modules', $modules);\n        }\n        if (Configure::read('Plugin.Cortex_services_enable')) {\n            $this->loadModel('Module');\n            $cortex_modules = $this->Module->getEnabledModules($this->Auth->user(), false, 'Cortex');\n            $this->set('cortex_modules', $cortex_modules);\n        }\n        $this->set('contributors', $contributors);\n        $this->set('typeGroups', array_keys($this->Event->Attribute->typeGroupings));\n        $this->loadModel('Sighting');\n        $this->set('sightingTypes', $this->Sighting->type);\n        $attributeUri = '/events/viewEventAttributes/' . $event['Event']['id'];\n        foreach ($this->params->named as $k => $v) {\n            if (!is_numeric($k)) {\n                if (is_array($v)) {\n                    foreach ($v as $value) {\n                        $attributeUri .= sprintf('/%s[]:%s', $k, $value);\n                    }\n                } else {\n                    $attributeUri .= sprintf('/%s:%s', $k, $v);\n                }\n            }\n        }\n        $orgTable = $this->Event->Orgc->find('list', array(\n            'fields' => array('Orgc.id', 'Orgc.name')\n        ));\n        if (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')) {\n            $this->set('sightingdbs', $this->Sightingdb->getSightingdbList($this->Auth->user()));\n        }\n        $this->set('includeSightingdb', (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')));\n        $this->set('relatedEventCorrelationCount', $relatedEventCorrelationCount);\n        $this->set('oldest_timestamp', $oldest_timestamp);\n        $this->set('required_taxonomies', $this->Event->getRequiredTaxonomies());\n        $this->set('orgTable', $orgTable);\n        $this->set('currentUri', $attributeUri);\n        $this->set('filters', $filters);\n        $advancedFiltering = $this->__checkIfAdvancedFiltering($filters);\n        $this->set('advancedFilteringActive', $advancedFiltering['active'] ? 1 : 0);\n        $this->set('advancedFilteringActiveRules', $advancedFiltering['activeRules']);\n        $this->set('defaultFilteringRules', $this->defaultFilteringRules);\n        $this->set('mitreAttackGalaxyId', $this->Event->GalaxyCluster->Galaxy->getMitreAttackGalaxyId());\n        $this->set('modificationMapCSV', $modificationMapCSV);\n        $this->set('title_for_layout', __('Event #%s', $event['Event']['id']));\n    }\n\n    public function view($id = null, $continue=false, $fromEvent=null)\n    {\n        // find the id of the event, change $id to it and proceed to read the event as if the ID was entered.\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $conditions = array('eventid' => $id);\n        if (!$this->_isRest()) {\n            $conditions['includeAllTags'] = true;\n        } else {\n            $conditions['includeAttachments'] = true;\n        }\n        $deleted = 0;\n        if (isset($this->params['named']['deleted'])) {\n            $deleted = $this->params['named']['deleted'];\n        }\n        if (isset($this->request->data['deleted'])) {\n            $deleted = $this->request->data['deleted'];\n        }\n        if (isset($deleted)) {\n            // workaround for old instances trying to pull events with both deleted / non deleted data\n            if (($this->userRole['perm_sync'] && $this->_isRest() && !$this->userRole['perm_site_admin']) && $deleted == 1) {\n                $conditions['deleted'] = array(0,1);\n            } else {\n                $conditions['deleted'] = $deleted == 2 ? array(0,1) : $deleted;\n            }\n        }\n        if (isset($this->params['named']['toIDS']) && $this->params['named']['toIDS'] != 0) {\n            $conditions['to_ids'] = $this->params['named']['toIDS'] == 2 ? 0 : 1;\n        }\n        if (isset($this->params['named']['includeRelatedTags']) && $this->params['named']['includeRelatedTags']) {\n            $conditions['includeRelatedTags'] = 1;\n        }\n        if (!empty($this->params['named']['includeDecayScore'])) {\n            $conditions['includeDecayScore'] = 1;\n        }\n        if (isset($this->params['named']['public']) && $this->params['named']['public']) {\n            $conditions['distribution'] = array(3, 5);\n        }\n        if (!empty($this->params['named']['overrideLimit']) && !$this->_isRest()) {\n            $conditions['overrideLimit'] = 1;\n        }\n        if (!empty($this->params['named']['excludeGalaxy'])) {\n            $conditions['excludeGalaxy'] = 1;\n        }\n        if (!empty($this->params['named']['extended']) || !empty($this->request->data['extended'])) {\n            $conditions['extended'] = 1;\n            $this->set('extended', 1);\n        } else {\n            $this->set('extended', 0);\n        }\n        $conditions['includeFeedCorrelations'] = 1;\n        if (!$this->_isRest()) {\n            $conditions['includeGranularCorrelations'] = 1;\n        } else if (!empty($this->params['named']['includeGranularCorrelations'])) {\n            $conditions['includeGranularCorrelations'] = 1;\n        }\n        if (!isset($this->params['named']['includeServerCorrelations'])) {\n            $conditions['includeServerCorrelations'] = 1;\n            if ($this->_isRest()) {\n                $conditions['includeServerCorrelations'] = 0;\n            }\n        } else {\n            $conditions['includeServerCorrelations'] = $this->params['named']['includeServerCorrelations'];\n        }\n        $results = $this->Event->fetchEvent($this->Auth->user(), $conditions);\n        if (!empty($this->params['named']['includeGranularCorrelations'])) {\n            foreach ($results as $k => $event) {\n                if (!empty($event['RelatedAttribute'])) {\n                    foreach ($event['RelatedAttribute'] as $attribute_id => $relation) {\n                        foreach ($event['Attribute'] as $k2 => $attribute) {\n                            if ((int)$attribute['id'] == $attribute_id) {\n                                $results[$k]['Attribute'][$k2]['RelatedAttribute'][] = $relation;\n                                break 2;\n                            }\n                        }\n                        foreach ($event['Object'] as $k2 => $object) {\n                            foreach ($object['Attribute'] as $k3 => $attribute) {\n                                if ((int)$attribute['id'] == $attribute_id) {\n                                    $results[$k]['Object'][$k2]['Attribute'][$k3]['RelatedAttribute'][] = $relation;\n                                    break 3;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (empty($results)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        //if the current user is an org admin AND event belongs to his/her org, fetch also the event creator info\n        if ($this->userRole['perm_admin'] && !$this->_isSiteAdmin() && ($results[0]['Org']['id'] == $this->Auth->user('org_id'))) {\n            $results[0]['User']['email'] = $this->User->field('email', array('id' => $results[0]['Event']['user_id']));\n        }\n        $event = $results[0];\n        if (isset($this->params['named']['searchFor']) && $this->params['named']['searchFor'] !== '') {\n            $this->__applyQueryString($event, $this->params['named']['searchFor']);\n        }\n        if (isset($this->params['named']['taggedAttributes']) && $this->params['named']['taggedAttributes'] !== '') {\n            $this->__applyQueryString($event, $this->params['named']['taggedAttributes'], 'Tag.name');\n        }\n        if (isset($this->params['named']['galaxyAttachedAttributes']) && $this->params['named']['galaxyAttachedAttributes'] !== '') {\n            $this->__applyQueryString($event, $this->params['named']['galaxyAttachedAttributes'], 'Tag.name');\n        }\n\n        if ($this->_isRest()) {\n            $this->set('event', $event);\n        }\n        $this->set('deleted', isset($deleted) ? ($deleted == 2 ? 0 : 1) : 0);\n        $this->set('includeRelatedTags', (!empty($this->params['named']['includeRelatedTags'])) ? 1 : 0);\n        $this->set('includeDecayScore', (!empty($this->params['named']['includeDecayScore'])) ? 1 : 0);\n        if (!$this->_isRest()) {\n            if ($this->_isSiteAdmin() && $results[0]['Event']['orgc_id'] !== $this->Auth->user('org_id')) {\n                $this->Flash->info(__('You are currently logged in as a site administrator and about to edit an event not belonging to your organisation. This goes against the sharing model of MISP. Use a normal user account for day to day work.'));\n            }\n            $this->__viewUI($event, $continue, $fromEvent);\n        }\n    }\n\n    private function __startPivoting($id, $info, $date)\n    {\n        $this->Session->write('pivot_thread', null);\n        $initial_pivot = array('id' => $id, 'info' => $info, 'date' => $date, 'depth' => 0, 'height' => 0, 'children' => array(), 'deletable' => true);\n        $this->Session->write('pivot_thread', $initial_pivot);\n    }\n\n    private function __continuePivoting($id, $info, $date, $fromEvent)\n    {\n        $pivot = $this->Session->read('pivot_thread');\n        $newPivot = array('id' => $id, 'info' => $info, 'date' => $date, 'depth' => null, 'children' => array(), 'deletable' => true);\n        if (!$this->__checkForPivot($pivot, $id)) {\n            $pivot = $this->__insertPivot($pivot, $fromEvent, $newPivot, 0);\n        }\n        $this->Session->write('pivot_thread', $pivot);\n    }\n\n    private function __insertPivot($pivot, $oldId, $newPivot, $depth)\n    {\n        $depth++;\n        if ($pivot['id'] == $oldId) {\n            $newPivot['depth'] = $depth;\n            $pivot['children'][] = $newPivot;\n            return $pivot;\n        }\n        if (!empty($pivot['children'])) {\n            foreach ($pivot['children'] as $k => $v) {\n                $pivot['children'][$k] = $this->__insertPivot($v, $oldId, $newPivot, $depth);\n            }\n        }\n        return $pivot;\n    }\n\n    private function __checkForPivot($pivot, $id)\n    {\n        if ($id == $pivot['id']) {\n            return true;\n        }\n        foreach ($pivot['children'] as $k => $v) {\n            if ($this->__checkForPivot($v, $id)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private function __arrangePivotVertical(&$pivot)\n    {\n        if (empty($pivot)) {\n            return null;\n        }\n        $max = count($pivot['children']) - 1;\n        if ($max < 0) {\n            $max = 0;\n        }\n        $temp = 0;\n        $pivot['children'] = array_values($pivot['children']);\n        foreach ($pivot['children'] as $k => $v) {\n            $pivot['children'][$k]['height'] = ($temp+$k)*50;\n            $temp += $this->__arrangePivotVertical($pivot['children'][$k]);\n            if ($k == $max) {\n                $temp = $pivot['children'][$k]['height'] / 50;\n            }\n        }\n        return $temp;\n    }\n\n    public function removePivot($id, $eventId, $self = false)\n    {\n        $pivot = $this->Session->read('pivot_thread');\n        if ($pivot['id'] == $id) {\n            $pivot = null;\n            $this->Session->write('pivot_thread', null);\n            $this->redirect(array('controller' => 'events', 'action' => 'view', $eventId));\n        } else {\n            $pivot = $this->__doRemove($pivot, $id);\n        }\n        $this->Session->write('pivot_thread', $pivot);\n        $pivot = $this->__arrangePivotVertical($pivot);\n        $this->redirect(array('controller' => 'events', 'action' => 'view', $eventId, true, $eventId));\n    }\n\n    private function __applyQueryString(&$event, $searchFor, $filterColumnsOverwrite=false) {\n        // filtering on specific columns is specified\n        if ($filterColumnsOverwrite !== false) {\n            $filterValue = array_map('trim', explode(\",\", $filterColumnsOverwrite));\n        } else {\n            $filterColumnsOverwrite = empty(Configure::read('MISP.event_view_filter_fields')) ? 'id, uuid, value, comment, type, category, Tag.name' : Configure::read('MISP.event_view_filter_fields');\n            $filterValue = array_map('trim', explode(\",\", $filterColumnsOverwrite));\n            $validFilters = array('id', 'uuid', 'value', 'comment', 'type', 'category', 'Tag.name');\n            foreach ($filterValue as $k => $v) {\n                if (!in_array($v, $validFilters)) {\n                    unset($filterValue[$k]);\n                }\n            }\n        }\n\n        // search in all attributes\n        foreach ($event['Attribute'] as $k => $attribute) {\n            if (!$this->__valueInFieldAttribute($attribute, $filterValue, $searchFor)) {\n                unset($event['Attribute'][$k]);\n            }\n        }\n        $event['Attribute'] = array_values($event['Attribute']);\n\n        // search in all attributes\n        foreach ($event['ShadowAttribute'] as $k => $proposals) {\n            if (!$this->__valueInFieldAttribute($proposals, $filterValue, $searchFor)) {\n                unset($event['ShadowAttribute'][$k]);\n            }\n        }\n        $event['ShadowAttribute'] = array_values($event['ShadowAttribute']);\n\n        // search for all attributes in object\n        foreach ($event['Object'] as $k => $object) {\n            foreach ($object['Attribute'] as $k2 => $attribute) {\n                if (!$this->__valueInFieldAttribute($attribute, $filterValue, $searchFor)) {\n                    unset($event['Object'][$k]['Attribute'][$k2]);\n                }\n            }\n            if (count($event['Object'][$k]['Attribute']) == 0) {\n                // remove object if empty\n                unset($event['Object'][$k]);\n            } else {\n                $event['Object'][$k]['Attribute'] = array_values($event['Object'][$k]['Attribute']);\n            }\n        }\n        $event['Object'] = array_values($event['Object']);\n    }\n\n    // look in the parameters if we are doing advanced filtering or not\n    private function __checkIfAdvancedFiltering($filters) {\n        $advancedFilteringActive = array_diff_key($filters, array('sort'=>0, 'direction'=>0, 'focus'=>0, 'extended'=>0, 'overrideLimit'=>0, 'filterColumnsOverwrite'=>0, 'attributeFilter'=>0, 'extended' => 0, 'page' => 0));\n\n        if (count($advancedFilteringActive) > 0) {\n            if (count(array_diff_key($advancedFilteringActive, array('deleted', 'includeRelatedTags', 'includeDecayScore'))) > 0) {\n                $res =  true;\n            } else if (\n                (isset($advancedFilteringActive['deleted']) && $advancedFilteringActive['deleted'] == 2) ||\n                (isset($advancedFilteringActive['includeRelatedTags']) && $advancedFilteringActive['includeRelatedTags'] == 1) ||\n                (isset($advancedFilteringActive['includeDecayScore']) && $advancedFilteringActive['includeDecayScore'] == 1)\n            ) {\n                $res =  true;\n            } else {\n                $res =  false;\n            }\n        } else {\n            $res = false;\n        }\n\n        unset($filters['sort']);\n        unset($filters['direction']);\n        $activeRules = array();\n        foreach ($filters as $k => $v) {\n            if (isset($this->defaultFilteringRules[$k]) && $this->defaultFilteringRules[$k] != $v) {\n                $activeRules[$k] = 1;\n            }\n        }\n        return array('active' => $activeRules > 0 ? $res : false, 'activeRules' => $activeRules);\n    }\n\n    private function __removeChildren(&$pivot, $id)\n    {\n        if ($pivot['id'] == $id) {\n            $pivot['children'] = array();\n        } else {\n            foreach ($pivot['children'] as $k => $v) {\n                $this->__removeChildren($v, $id);\n            }\n        }\n    }\n\n    private function __doRemove(&$pivot, $id)\n    {\n        foreach ($pivot['children'] as $k => $v) {\n            if ($v['id'] == $id) {\n                unset($pivot['children'][$k]);\n                return $pivot;\n            } else {\n                $pivot['children'][$k] = $this->__doRemove($pivot['children'][$k], $id);\n            }\n        }\n        return $pivot;\n    }\n\n    private function __setDeletable(&$pivot, $id, $root=false)\n    {\n        if ($pivot['id'] == $id && !$root) {\n            $pivot['deletable'] = false;\n            return true;\n        }\n        if (!empty($pivot['children'])) {\n            foreach ($pivot['children'] as $k => $v) {\n                $containsCurrent = $this->__setDeletable($pivot['children'][$k], $id);\n                if ($containsCurrent && !$root) {\n                    $pivot['deletable'] = false;\n                }\n            }\n        }\n        return !$pivot['deletable'];\n    }\n\n    public function add()\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('You don\\'t have permissions to create events'));\n        }\n        $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        if ($this->request->is('post')) {\n            if ($this->_isRest()) {\n                if (empty($this->data)) {\n                    throw new MethodNotAllowedException(__('No valid event data received.'));\n                }\n                // rearrange the response if the event came from an export\n                if (isset($this->request->data['response'])) {\n                    $this->request->data = $this->request->data['response'];\n                }\n                if (isset($this->request->data['request'])) {\n                    $this->request->data = $this->request->data['request'];\n                }\n                if (!isset($this->request->data['Event'])) {\n                    $this->request->data = array('Event' => $this->request->data);\n                }\n\n                // Distribution, reporter for the events pushed will be the owner of the authentication key\n                $this->request->data['Event']['user_id'] = $this->Auth->user('id');\n            }\n            if (!empty($this->data)) {\n                if (!isset($this->request->data['Event']['distribution'])) {\n                    $this->request->data['Event']['distribution'] = Configure::read('MISP.default_event_distribution') ? Configure::read('MISP.default_event_distribution') : 0;\n                }\n                if (!isset($this->request->data['Event']['analysis'])) {\n                    $this->request->data['Event']['analysis'] = 0;\n                }\n                if (!isset($this->request->data['Event']['threat_level_id'])) {\n                    $this->request->data['Event']['threat_level_id'] = Configure::read('MISP.default_event_threat_level') ? Configure::read('MISP.default_event_threat_level') : 4;\n                }\n                if (!isset($this->request->data['Event']['date'])) {\n                    $this->request->data['Event']['date'] = date('Y-m-d');\n                }\n                // If the distribution is set to sharing group, check if the id provided is really visible to the user, if not throw an error.\n                if ($this->request->data['Event']['distribution'] == 4) {\n                    if ($this->userRole['perm_sync'] && $this->_isRest()) {\n                        if (isset($this->request->data['Event']['SharingGroup'])) {\n                            if (!isset($this->request->data['Event']['SharingGroup']['uuid'])) {\n                                if ($this->Event->SharingGroup->checkIfExists($this->request->data['Event']['SharingGroup']['uuid']) &&\n                                    $this->Event->SharingGroup->checkIfAuthorised($this->Auth->user(), $this->request->data['Event']['SharingGroup']['uuid'])) {\n                                    throw new MethodNotAllowedException(__('Invalid Sharing Group or not authorised (Sync user is not contained in the Sharing group).'));\n                                }\n                            }\n                        } elseif (!isset($sgs[$this->request->data['Event']['sharing_group_id']])) {\n                            throw new MethodNotAllowedException(__('Invalid Sharing Group or not authorised.'));\n                        }\n                    } else {\n                        if (!isset($sgs[$this->request->data['Event']['sharing_group_id']])) {\n                            throw new MethodNotAllowedException(__('Invalid Sharing Group or not authorised.'));\n                        }\n                    }\n                } else {\n                    // If the distribution is set to something \"traditional\", set the SG id to 0.\n                    $this->request->data['Event']['sharing_group_id'] = 0;\n                }\n                // If we are not sync users / site admins, we only allow events to be created for our own org\n                // Set the orgc ID as our own orgc ID and unset both the 2.4 and 2.3 style creator orgs\n                if ($this->_isRest() && !$this->userRole['perm_sync']) {\n                    $this->request->data['Event']['orgc_id'] = $this->Auth->user('org_id');\n                    if (isset($this->request->data['Event']['Orgc'])) {\n                        unset($this->request->data['Event']['Orgc']);\n                    }\n                    if (isset($this->request->data['Event']['orgc'])) {\n                        unset($this->request->data['Event']['orgc']);\n                    }\n                }\n                $validationErrors = array();\n                $created_id = 0;\n                $add = $this->Event->_add($this->request->data, $this->_isRest(), $this->Auth->user(), '', null, false, null, $created_id, $validationErrors);\n                if ($add === true && !is_numeric($add)) {\n                    if ($this->_isRest()) {\n                        if ($add === 'blocked') {\n                            throw new ForbiddenException(__('Event blocked by local blacklist.'));\n                        }\n                        // REST users want to see the newly created event\n                        $results = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $created_id));\n                        $event = $results[0];\n                        if (!empty($validationErrors)) {\n                            $event['errors'] = $validationErrors;\n                        }\n                        $this->set('event', $event);\n                        $this->render('view');\n                        return true;\n                    } else {\n                        // redirect to the view of the newly created event\n                        $this->Flash->success(__('The event has been saved'));\n                        $this->redirect(array('action' => 'view', $this->Event->getID()));\n                    }\n                } else {\n                    if ($this->_isRest()) { // TODO return error if REST\n                        if (is_numeric($add)) {\n                            $this->response->header('Location', Configure::read('MISP.baseurl') . '/events/' . $add);\n                            $this->response->send();\n                            throw new NotFoundException(__('Event already exists, if you would like to edit it, use the url in the location header.'));\n                        }\n                        // # TODO i18n?\n                        return $this->RestResponse->saveFailResponse('Events', 'add', false, $validationErrors, $this->response->type());\n                    } else {\n                        if ($add === 'blocked') {\n                            $this->Flash->error(__('A blacklist entry is blocking you from creating any events. Please contact the administration team of this instance') . (Configure::read('MISP.contact') ? ' at ' . Configure::read('MISP.contact') : '') . '.');\n                        } else {\n                            $this->Flash->error(__('The event could not be saved. Please, try again.'), 'default', array(), 'error');\n                        }\n                    }\n                }\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Events', 'add', false, $this->response->type());\n        }\n\n        $this->request->data['Event']['date'] = date('Y-m-d');\n        if (isset($this->request->data['Event']['distribution'])) {\n            $initialDistribution = $this->request->data['Event']['distribution'];\n        } else {\n            $initialDistribution = 3;\n            if (Configure::read('MISP.default_event_distribution') != null) {\n                $initialDistribution = Configure::read('MISP.default_event_distribution');\n            }\n        }\n        $this->set('initialDistribution', $initialDistribution);\n\n        // combobox for distribution\n        $distributions = array_keys($this->Event->distributionDescriptions);\n        $distributions = $this->_arrayToValuesIndexArray($distributions);\n        $this->set('distributions', $distributions);\n        // tooltip for distribution\n        $fieldDesc = array();\n        $distributionLevels = $this->Event->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n        foreach ($distributionLevels as $key => $value) {\n            $fieldDesc['distribution'][$key] = $this->Event->distributionDescriptions[$key]['formdesc'];\n        }\n\n        // combobox for risks\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        $fieldDesc['threat_level_id'] = Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.description');\n\n        // combobox for analysis\n        $this->set('sharingGroups', $sgs);\n        // tooltip for analysis\n        $analysisLevels = $this->Event->analysisLevels;\n        $this->set('analysisLevels', $analysisLevels);\n        foreach ($analysisLevels as $key => $value) {\n            $fieldDesc['analysis'][$key] = $this->Event->analysisDescriptions[$key]['formdesc'];\n        }\n        if (!$this->_isRest()) {\n            $this->Flash->info(__('The event created will be visible to the organisations having an account on this platform, but not synchronised to other MISP instances until it is published.'));\n        }\n        $this->set('fieldDesc', $fieldDesc);\n        if (isset($this->params['named']['extends'])) {\n            $this->set('extends_uuid', $this->params['named']['extends']);\n        }\n    }\n\n    public function addIOC($id)\n    {\n        $this->Event->recursive = -1;\n        $this->Event->read(null, $id);\n        if (!$this->_isSiteAdmin() && ($this->Event->data['Event']['orgc_id'] != $this->_checkOrg() || !$this->userRole['perm_modify'])) {\n            throw new UnauthorizedException(__('You do not have permission to do that.'));\n        }\n        if ($this->request->is('post')) {\n            if (!empty($this->data)) {\n                if (isset($this->data['Event']['submittedioc'])) {\n                    $this->_addIOCFile($id);\n                }\n\n                // redirect to the view of the newly created event\n                $this->Flash->success(__('The event has been saved'));\n            }\n        }\n        // set the id\n        $this->set('id', $id);\n        // set whether it is published or not\n        $this->set('published', $this->Event->data['Event']['published']);\n    }\n\n    public function add_misp_export()\n    {\n        if (!$this->userRole['perm_modify']) {\n            throw new UnauthorizedException(__('You do not have permission to do that.'));\n        }\n        if ($this->request->is('post')) {\n            $results = array();\n            if (!empty($this->data)) {\n                $ext = '';\n                if (isset($this->data['Event']['submittedfile'])) {\n                    $ext = pathinfo($this->data['Event']['submittedfile']['name'], PATHINFO_EXTENSION);\n                }\n                if (isset($this->data['Event']['submittedfile']) && (strtolower($ext) != 'xml' && strtolower($ext) != 'json') && $this->data['Event']['submittedfile']['size'] > 0 &&\n                is_uploaded_file($this->data['Event']['submittedfile']['tmp_name'])) {\n                    $log = ClassRegistry::init('Log');\n                    // #TODO Think about whether we want to Localize Log entries.\n                    $log->createLogEntry($this->Auth->user(), 'file_upload', 'Event', 0, 'MISP export file upload failed', 'File details: ' . json_encode($this->data['Event']['submittedfile']));\n                    $this->Flash->error(__('You may only upload MISP XML or MISP JSON files.'));\n                    throw new MethodNotAllowedException(__('File upload failed or file does not have the expected extension (.xml / .json).'));\n                }\n                if (isset($this->data['Event']['submittedfile'])) {\n                    if (Configure::read('MISP.take_ownership_xml_import')\n                        && (isset($this->data['Event']['takeownership']) && $this->data['Event']['takeownership'] == 1)) {\n                        $results = $this->_addMISPExportFile($ext, true, $this->data['Event']['publish']);\n                    } else {\n                        $results = $this->_addMISPExportFile($ext, false, $this->data['Event']['publish']);\n                    }\n                }\n            }\n            $this->set('results', $results);\n            $this->render('add_misp_export_result');\n        }\n    }\n\n    public function upload_stix($stix_version = '1')\n    {\n        if (!$this->userRole['perm_modify']) {\n            throw new UnauthorizedException(__('You do not have permission to do that.'));\n        }\n        $scriptDir = APP . 'files' . DS . 'scripts';\n        if ($this->request->is('post')) {\n            if ($this->_isRest()) {\n                $randomFileName = $this->Event->generateRandomFileName();\n                $tempFile = new File($scriptDir . DS . 'tmp' . DS . $randomFileName, true, 0644);\n                $tempFile->write($this->request->input());\n                $tempFile->close();\n                $result = $this->Event->upload_stix(\n                    $this->Auth->user(),\n                    $scriptDir,\n                    $randomFileName,\n                    $stix_version,\n                    'uploaded_stix_file.' . ($stix_version == '1' ? 'xml' : 'json'),\n                    false\n                );\n                if (is_array($result)) {\n                    return $this->RestResponse->saveSuccessResponse('Events', 'upload_stix', false, $this->response->type(), 'STIX document imported, event\\'s created: ' . implode(', ', $result) . '.');\n                } elseif (is_numeric($result)) {\n                    $event = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $result));\n                    if (!empty($event)) {\n                        return $this->RestResponse->viewData($event[0], 'json');\n                    } else {\n                        return $this->RestResponse->saveFailResponse('Events', 'upload_stix', false, 'Could not read saved event.', $this->response->type());\n                    }\n                } else {\n                    return $this->RestResponse->saveFailResponse('Events', 'upload_stix', false, $result, $this->response->type());\n                }\n            } else {\n                $original_file = !empty($this->data['Event']['original_file']) ? $this->data['Event']['stix']['name'] : '';\n                if (isset($this->data['Event']['stix']) && $this->data['Event']['stix']['size'] > 0 && is_uploaded_file($this->data['Event']['stix']['tmp_name'])) {\n                    $randomFileName = $this->Event->generateRandomFileName();\n                    move_uploaded_file($this->data['Event']['stix']['tmp_name'], $scriptDir . DS . 'tmp' . DS . $randomFileName);\n                    $result = $this->Event->upload_stix(\n                        $this->Auth->user(),\n                        $scriptDir,\n                        $randomFileName,\n                        $stix_version,\n                        $original_file,\n                        $this->data['Event']['publish']\n                    );\n                    if (is_array($result)) {\n                        $this->Flash->success(__('STIX document imported, event\\'s created: ' . implode(', ', $result) . '.'));\n                        $this->redirect(array('action' => 'index'));\n                    } elseif (is_numeric($result)) {\n                        $this->Flash->success(__('STIX document imported.'));\n                        $this->redirect(array('action' => 'view', $result));\n                    } else {\n                        $this->Flash->error(__('Could not import STIX document: ' . $result));\n                    }\n                } else {\n                    $max_size = intval(ini_get('post_max_size'));\n                    if (intval(ini_get('upload_max_filesize')) < $max_size) {\n                        $max_size = intval(ini_get('upload_max_filesize'));\n                    }\n                    $this->Flash->error(__('File upload failed. Make sure that you select a stix file to be uploaded and that the file doesn\\'t exceed the maximum file size of ' . $max_size . '.'));\n                }\n            }\n        }\n\n        if ($stix_version == 2) {\n            $stix_version = '2.x JSON';\n        } else {\n            $stix_version = '1.x XML';\n        }\n        $this->set('stix_version', $stix_version);\n    }\n\n    public function merge($target_id = null)\n    {\n        $this->Event->id = $target_id;\n        $eIds = $this->Event->fetchEventIds($this->Auth->user(), false, false, false, true);\n        // check if event exists and is readable for the current user\n        if (!$this->Event->exists() || !in_array($target_id, $eIds)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->read(null, $target_id);\n        // check if private and user not authorised to edit\n        if (!$this->_isSiteAdmin() && ($this->Event->data['Event']['orgc_id'] != $this->_checkOrg() || !($this->userRole['perm_modify']))) {\n            $this->Flash->error(__('You are not authorised to do that. Please consider using the \\'propose attribute\\' feature.'));\n            $this->redirect(array('action' => 'view', $target_id));\n        }\n        $this->Event->insertLock($this->Auth->user(), $target_id);\n        if ($this->request->is('post')) {\n            $source_id = trim($this->request->data['Event']['source_id']);\n            $to_ids = $this->request->data['Event']['to_ids'];\n            if (!is_numeric($source_id)) {\n                $this->Flash->error(__('Invalid event ID entered.'));\n                return;\n            }\n            $this->Event->read(null, $source_id);\n            if (!$this->_isSiteAdmin() && !in_array($source_id, $eIds)) {\n                $this->Flash->error(__('You are not authorised to read the selected event.'));\n                return;\n            }\n            $r = array('results' => []);\n            foreach ($this->Event->data['Attribute'] as $a) {\n                if ($to_ids && !$a['to_ids']) {\n                    continue;\n                }\n                $tmp = array();\n                $tmp['values']     = $a['value'];\n                $tmp['categories'] = $a['category'];\n                $tmp['types']      = $a['type'];\n                $tmp['to_ids']     = $a['to_ids'];\n                $tmp['comment']    = $a['comment'];\n                if ($this->Event->Attribute->typeIsAttachment($a['type'])) {\n                    $encodedFile = $this->Event->Attribute->base64EncodeAttachment($a);\n                    $tmp['data'] = $encodedFile;\n                    $tmp['data_is_handled'] = true;\n                }\n                $r['results'][] = $tmp;\n            }\n            $resultArray = $this->Event->handleModuleResult($r, $target_id);\n            $typeCategoryMapping = array();\n            foreach ($this->Event->Attribute->categoryDefinitions as $k => $cat) {\n                foreach ($cat['types'] as $type) {\n                    $typeCategoryMapping[$type][$k] = $k;\n                }\n            }\n            foreach ($resultArray as $key => $result) {\n                if ($has_pipe = strpos($result['default_type'], '|') !== false || $result['default_type'] === 'malware-sample') {\n                    $pieces = explode('|', $result['value']);\n                    $or = array('Attribute.value1' => $pieces,\n                                'Attribute.value2' => $pieces);\n                } else {\n                    $or = array('Attribute.value1' => $result['value'], 'Attribute.value2' => $result['value']);\n                }\n                $options = array(\n                    'conditions' => array('OR' => $or),\n                    'fields' => array('Attribute.type', 'Attribute.category', 'Attribute.value', 'Attribute.comment'),\n                    'order' => false\n                );\n                $resultArray[$key]['related'] = $this->Event->Attribute->fetchAttributes($this->Auth->user(), $options);\n            }\n\n            // combobox for distribution\n            $distributions = $this->Event->Attribute->distributionLevels;\n            $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n            if (empty($sgs)) {\n                unset($distributions[4]);\n            }\n            $this->set('event', array('Event' => array('id' => $target_id)));\n            $this->set('resultArray', $resultArray);\n            $this->set('typeList', array_keys($this->Event->Attribute->typeDefinitions));\n            $this->set('defaultCategories', $this->Event->Attribute->defaultCategories);\n            $this->set('typeCategoryMapping', $typeCategoryMapping);\n            $this->set('distributions', $distributions);\n            $this->set('sgs', $sgs);\n            $this->set('title', 'Merge Results');\n            $this->set('importComment', 'Merged from event ' . $source_id);\n            $this->render('resolved_attributes');\n        } else {\n            // set the target event id in the form\n            $this->request->data['Event']['target_id'] = $target_id;\n        }\n    }\n\n    public function edit($id = null)\n    {\n        if ($this->request->is('get') && $this->_isRest()) {\n            return $this->RestResponse->describe('Events', 'edit', false, $this->response->type());\n        }\n        if (Validation::uuid($id)) {\n            $temp = $this->Event->find('first', array('recursive' => -1, 'fields' => array('Event.id'), 'conditions' => array('Event.uuid' => $id)));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid event'));\n            }\n            $id = $temp['Event']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->read(null, $id);\n        // check if private and user not authorised to edit\n        if (!$this->_isSiteAdmin() && !($this->userRole['perm_sync'] && $this->_isRest())) {\n            if (($this->Event->data['Event']['orgc_id'] != $this->_checkOrg()) || !($this->userRole['perm_modify'])) {\n                $message = __('You are not authorised to do that. Please consider using the \\'propose attribute\\' feature.');\n                if ($this->_isRest()) {\n                    throw new MethodNotAllowedException($message);\n                } else {\n                    $this->Flash->error($message);\n                    $this->redirect(array('controller' => 'events', 'action' => 'index'));\n                }\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->Event->insertLock($this->Auth->user(), $id);\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if ($this->_isRest()) {\n                if (isset($this->request->data['response'])) {\n                    $this->request->data = $this->Event->updateXMLArray($this->request->data, true);\n                } else {\n                    $this->request->data = $this->Event->updateXMLArray($this->request->data, false);\n                }\n                // Workaround for different structure in XML/array than what CakePHP expects\n                if (isset($this->request->data['response'])) {\n                    $this->request->data = $this->request->data['response'];\n                }\n                if (!isset($this->request->data['Event'])) {\n                    $this->request->data = array('Event' => $this->request->data);\n                }\n                $result = $this->Event->_edit($this->request->data, $this->Auth->user(), $id);\n                if ($result === true) {\n                    // REST users want to see the newly created event\n                    $results = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n                    $event = $results[0];\n                    $this->set('event', $event);\n                    $this->render('view');\n                    return true;\n                } else {\n                    $message = 'Error';\n                    if ($this->_isRest()) {\n                        App::uses('JSONConverterTool', 'Tools');\n                        $converter = new JSONConverterTool();\n                        if (isset($result['error'])) {\n                            $errors = $result['error'];\n                        } else {\n                            $errors = $result;\n                        }\n                        return $this->RestResponse->saveFailResponse('Events', 'edit', $id, $errors, $this->response->type());\n                    } else {\n                        $this->set(array('message' => $message,'_serialize' => array('message')));  // $this->Event->validationErrors\n                        $this->render('edit');\n                    }\n                    return false;\n                }\n            }\n            // say what fields are to be updated\n            $fieldList = array('date', 'threat_level_id', 'analysis', 'info', 'published', 'distribution', 'timestamp', 'sharing_group_id', 'extends_uuid');\n\n            $this->Event->read();\n            // always force the org, but do not force it for admins\n            if (!$this->_isSiteAdmin()) {\n                // set the same org as existed before\n                $this->request->data['Event']['org_id'] = $this->Event->data['Event']['org_id'];\n            }\n            // we probably also want to remove the published flag\n            $this->request->data['Event']['published'] = 0;\n            $date = new DateTime();\n            $this->request->data['Event']['timestamp'] = $date->getTimestamp();\n            if ($this->Event->save($this->request->data, true, $fieldList)) {\n                $this->Flash->success(__('The event has been saved'));\n                $this->redirect(array('action' => 'view', $id));\n            } else {\n                $this->Flash->error(__('The event could not be saved. Please, try again.'));\n            }\n        } else {\n            if (!$this->userRole['perm_modify']) {\n                $this->redirect(array('controller' => 'events', 'action' => 'index', 'admin' => false));\n            }\n            $this->request->data = $this->Event->read(null, $id);\n        }\n\n        // combobox for distribution\n        $distributions = array_keys($this->Event->distributionDescriptions);\n        $distributions = $this->_arrayToValuesIndexArray($distributions);\n        $this->set('distributions', $distributions);\n\n        // even if the SG is not local, we still want the option to select the currently assigned SG\n        $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $this->set('sharingGroups', $sgs);\n\n        // tooltip for distribution\n        $fieldDesc = array();\n        $distributionLevels = $this->Event->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n        foreach ($distributionLevels as $key => $value) {\n            $fieldDesc['distribution'][$key] = $this->Event->distributionDescriptions[$key]['formdesc'];\n        }\n\n        // combobox for risks\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        $fieldDesc['threat_level_id'] = Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.description');\n\n        // combobox for analysis\n        $this->set('sharingGroups', $sgs);\n        // tooltip for analysis\n        $analysisLevels = $this->Event->analysisLevels;\n        foreach ($analysisLevels as $key => $value) {\n            $fieldDesc['analysis'][$key] = $this->Event->analysisDescriptions[$key]['formdesc'];\n        }\n        $this->set('analysisLevels', $analysisLevels);\n        $this->set('fieldDesc', $fieldDesc);\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('event', $this->Event->data);\n        $this->render('add');\n    }\n\n    public function delete($id = null)\n    {\n        if (Validation::uuid($id)) {\n            $temp = $this->Event->find('first', array('recursive' => -1, 'fields' => array('Event.id'), 'conditions' => array('Event.uuid' => $id)));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid event'));\n            }\n            $id = $temp['Event']['id'];\n        }\n        if ($this->request->is('post') || $this->request->is('put') || $this->request->is('delete')) {\n            if (isset($this->request->data['id'])) {\n                $this->request->data['Event'] = $this->request->data;\n            }\n            if (!isset($id) && isset($this->request->data['Event']['id'])) {\n                $idList = $this->request->data['Event']['id'];\n                if (!is_array($idList)) {\n                    if (is_numeric($idList)) {\n                        $idList = array($idList);\n                    } else {\n                        $idList = json_decode($idList, true);\n                    }\n                }\n                if (!is_array($idList) || empty($idList)) {\n                    throw new NotFoundException(__('Invalid input.'));\n                }\n            } else {\n                $idList = array($id);\n            }\n            $fails = array();\n            $successes = array();\n            foreach ($idList as $eid) {\n                if (!is_numeric($eid)) {\n                    continue;\n                }\n                $event = $this->Event->find('first', array(\n                    'conditions' => array('Event.id' => $eid),\n                    'fields' => array('Event.orgc_id', 'Event.id'),\n                    'recursive' => -1\n                ));\n                if (empty($event)) {\n                    $fails[] = $eid;\n                } else {\n                    if (!$this->_isSiteAdmin()) {\n                        if ($event['Event']['orgc_id'] != $this->_checkOrg() || !$this->userRole['perm_modify']) {\n                            $fails[] = $eid;\n                            continue;\n                        }\n                    }\n                    $this->Event->insertLock($this->Auth->user(), $event['Event']['id']);\n                    if ($this->Event->quickDelete($event)) {\n                        $successes[] = $eid;\n                    } else {\n                        $fails[] = $eid;\n                    }\n                }\n            }\n            $message = '';\n            if (count($idList) == 1) {\n                if (!empty($successes)) {\n                    $message = 'Event deleted.';\n                } else {\n                    $message = 'Event was not deleted.';\n                }\n            } else {\n                if (!empty($successes)) {\n                    $message .= count($successes) . ' event(s) deleted.';\n                }\n                if (!empty($fails)) {\n                    $message .= count($fails) . ' event(s) could not be deleted due to insufficient privileges or the event not being found.';\n                }\n            }\n            if ($this->_isRest()) {\n                if (!empty($successes)) {\n                    return $this->RestResponse->saveSuccessResponse('Events', 'delete', $id, $this->response->type(), $message);\n                } else {\n                    return $this->RestResponse->saveFailResponse('Events', 'delete', false, $message, $this->response->type());\n                }\n            } else {\n                if (!empty($successes)) {\n                    $this->Flash->success($message);\n                } else {\n                    $this->Flash->error($message);\n                }\n                $this->redirect(array('action' => 'index'));\n            }\n        } else {\n            if (is_numeric($id)) {\n                $eventList = array($id);\n            } else {\n                $eventList = json_decode($id, true);\n            }\n            $this->request->data['Event']['id'] = json_encode($eventList);\n            $this->set('idArray', $eventList);\n            $this->render('ajax/eventDeleteConfirmationForm');\n        }\n    }\n\n    public function unpublish($id = null)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->recursive = -1;\n        $event = $this->Event->read(null, $id);\n        if (!$this->_isSiteAdmin()) {\n            if (!$this->userRole['perm_modify'] || $this->Auth->user('org_id') !== $this->Event->data['Event']['orgc_id']) {\n                throw new MethodNotAllowedException(__('You don\\'t have the permission to do that.'));\n            }\n        }\n        $this->Event->insertLock($this->Auth->user(), $id);\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $fieldList = array('published', 'id', 'info');\n            $event['Event']['published'] = 0;\n            $result = $this->Event->save($event, array('fieldList' => $fieldList));\n            if ($result) {\n                $message = __('Event unpublished.');\n                $kafkaTopic = Configure::read('Plugin.Kafka_event_publish_notifications_topic');\n                if (Configure::read('Plugin.Kafka_enable') && Configure::read('Plugin.Kafka_event_publish_notifications_enable') && !empty($kafkaTopic)) {\n                    $kafkaPubTool = $this->Event->getKafkaPubTool();\n                    $params = array('eventid' => $id);\n                    if (Configure::read('Plugin.Kafka_include_attachments')) {\n                        $params['includeAttachments'] = 1;\n                    }\n                    $pubEvent = $this->Event->fetchEvent($this->Auth->user(), $params);\n                    if (!empty($pubEvent)) {\n                        $kafkaPubTool->publishJson($kafkaTopic, $pubEvent[0], 'unpublish');\n                    }\n                }\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveSuccessResponse('events', 'unpublish', $id, false, $message);\n                } else {\n                    $this->Flash->success($message);\n                    $this->redirect(array('action' => 'view', $id));\n                }\n            } else {\n                throw new MethodNotAllowedException('Could not unpublish event.');\n            }\n        } else {\n            $this->set('id', $id);\n            $this->set('type', 'unpublish');\n            $this->render('ajax/eventPublishConfirmationForm');\n        }\n    }\n\n    public function publishSightings($id = null)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $event = $this->Event->fetchEvent(\n            $this->Auth->user(),\n            array(\n                'eventid' => $id,\n                'metadata' => 1\n            )\n        );\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $result = $this->Event->publishRouter($id, null, $this->Auth->user(), 'sightings');\n            if (!Configure::read('MISP.background_jobs')) {\n                if (!is_array($result)) {\n                    // redirect to the view event page\n                    $message = 'Sightings published';\n                } else {\n                    $lastResult = array_pop($result);\n                    $resultString = (count($result) > 0) ? implode(', ', $result) . ' and ' . $lastResult : $lastResult;\n                    $errors['failed_servers'] = $result;\n                    $message = sprintf('Sightings published but not pushed to %s, re-try later. If the issue persists, make sure that the correct sync user credentials are used for the server link and that the sync user on the remote server has authentication privileges.', $resultString);\n                }\n            } else {\n                // update the DB to set the published flag\n                // for background jobs, this should be done already\n                $fieldList = array('id', 'info', 'sighting_timestamp');\n                $event['Event']['sighting_timestamp'] = time();\n                $this->Event->save($event, array('fieldList' => $fieldList));\n                $message = 'Job queued';\n            }\n            if ($this->_isRest()) {\n                $this->set('name', 'Publish Sightings');\n                $this->set('message', $message);\n                if (!empty($errors)) {\n                    $this->set('errors', $errors);\n                }\n                $this->set('url', '/events/publishSightings/' . $id);\n                $this->set('id', $id);\n                $this->set('_serialize', array('name', 'message', 'url', 'id', 'errors'));\n            } else {\n                $this->Flash->success($message);\n                $this->redirect(array('action' => 'view', $id));\n            }\n        } else {\n            $this->set('id', $id);\n            $this->set('type', 'publishSightings');\n            $this->render('ajax/eventPublishConfirmationForm');\n        }\n    }\n\n    // Publishes the event without sending an alert email\n    public function publish($id = null)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        // update the event and set the from field to the current instance's organisation from the bootstrap. We also need to save id and info for the logs.\n        $this->Event->recursive = -1;\n        $event = $this->Event->read(null, $id);\n        if (!$this->_isSiteAdmin()) {\n            if (!$this->userRole['perm_publish'] || $this->Auth->user('org_id') !== $this->Event->data['Event']['orgc_id']) {\n                throw new MethodNotAllowedException(__('You don\\'t have the permission to do that.'));\n            }\n        }\n        $this->Event->insertLock($this->Auth->user(), $id);\n        $success = true;\n        $message = '';\n        $errors = array();\n        // only allow form submit CSRF protection.\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!$this->_isRest()) {\n                $publishable = $this->Event->checkIfPublishable($id);\n                if ($publishable !== true) {\n                    $this->Flash->error(__('Could not publish event - no tag for required taxonomies missing: %s', implode(', ', $publishable)));\n                    $this->redirect(array('action' => 'view', $id));\n                }\n            }\n            // Performs all the actions required to publish an event\n            $result = $this->Event->publishRouter($id, null, $this->Auth->user());\n            if (!Configure::read('MISP.background_jobs')) {\n                if (!is_array($result)) {\n                    // redirect to the view event page\n                    $message = 'Event published without alerts';\n                } else {\n                    $lastResult = array_pop($result);\n                    $resultString = (count($result) > 0) ? implode(', ', $result) . ' and ' . $lastResult : $lastResult;\n                    $errors['failed_servers'] = $result;\n                    $message = sprintf('Event published but not pushed to %s, re-try later. If the issue persists, make sure that the correct sync user credentials are used for the server link and that the sync user on the remote server has authentication privileges.', $resultString);\n                }\n            } else {\n                // update the DB to set the published flag\n                // for background jobs, this should be done already\n                $fieldList = array('published', 'id', 'info', 'publish_timestamp');\n                $event['Event']['published'] = 1;\n                $event['Event']['publish_timestamp'] = time();\n                $this->Event->save($event, array('fieldList' => $fieldList));\n                $message = 'Job queued';\n            }\n            if ($this->_isRest()) {\n                $this->set('name', 'Publish');\n                $this->set('message', $message);\n                if (!empty($errors)) {\n                    $this->set('errors', $errors);\n                }\n                $this->set('url', '/events/alert/' . $id);\n                $this->set('id', $id);\n                $this->set('_serialize', array('name', 'message', 'url', 'id', 'errors'));\n            } else {\n                $this->Flash->success($message);\n                $this->redirect(array('action' => 'view', $id));\n            }\n        } else {\n            $this->set('id', $id);\n            $this->set('type', 'publish');\n            $this->render('ajax/eventPublishConfirmationForm');\n        }\n    }\n\n    // Send out an alert email to all the users that wanted to be notified.\n    // Users with a GnuPG key will get the mail encrypted, other users will get the mail unencrypted\n    public function alert($id = null)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $this->Event->id = $id;\n        $this->Event->recursive = 0;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->recursive = -1;\n        $this->Event->read(null, $id);\n        if (!$this->_isSiteAdmin()) {\n            if (!$this->userRole['perm_publish'] || $this->Auth->user('org_id') !== $this->Event->data['Event']['orgc_id']) {\n                throw new MethodNotAllowedException(__('You don\\'t have the permission to do that.'));\n            }\n        }\n        $success = true;\n        $message = '';\n        $errors = array();\n        // only allow form submit CSRF protection\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!$this->_isRest()) {\n                $publishable = $this->Event->checkIfPublishable($id);\n                if ($publishable !== true) {\n                    $this->Flash->error(__('Could not publish event - no tag for required taxonomies missing: %s', implode(', ', $publishable)));\n                    $this->redirect(array('action' => 'view', $id));\n                }\n            }\n            // send out the email\n            $emailResult = $this->Event->sendAlertEmailRouter($id, $this->Auth->user(), $this->Event->data['Event']['publish_timestamp']);\n            if (is_bool($emailResult) && $emailResult == true) {\n                // Performs all the actions required to publish an event\n                $result = $this->Event->publishRouter($id, null, $this->Auth->user());\n                if (!is_array($result)) {\n                    // redirect to the view event page\n                    if (Configure::read('MISP.background_jobs')) {\n                        $message = 'Job queued.';\n                    } else {\n                        $message = 'Email sent to all participants.';\n                    }\n                } else {\n                    $lastResult = array_pop($result);\n                    $resultString = (count($result) > 0) ? implode(', ', $result) . ' and ' . $lastResult : $lastResult;\n                    $errors['failed_servers'] = $result;\n                    $failed = 1;\n                    $message = sprintf('Not published given no connection to %s but email sent to all participants.', $resultString);\n                }\n            } elseif (!is_bool($emailResult)) {\n                // Performs all the actions required to publish an event\n                $result = $this->Event->publishRouter($id, null, $this->Auth->user());\n                if (!is_array($result)) {\n                    // redirect to the view event page\n                    $message = 'Published but no email sent given GnuPG is not configured.';\n                    $errors['GnuPG'] = 'GnuPG not set up.';\n                } else {\n                    $lastResult = array_pop($result);\n                    $resultString = (count($result) > 0) ? implode(', ', $result) . ' and ' . $lastResult : $lastResult;\n                    $errors['failed_servers'] = $result;\n                    $errors['GnuPG'] = 'GnuPG not set up.';\n                    $failed = 1;\n                    $message = sprintf('Not published given no connection to %s but no email sent given GnuPG is not configured.', $resultString);\n                }\n            } else {\n                $message = 'Sending of email failed';\n                $errors['email'] = 'The sending of emails failed.';\n            }\n            if ($this->_isRest()) {\n                $this->set('name', 'Alert');\n                $this->set('message', $message);\n                if (!empty($errors)) {\n                    $this->set('errors', $errors);\n                }\n                $this->set('url', '/events/alert/' . $id);\n                $this->set('id', $id);\n                $this->set('_serialize', array('name', 'message', 'url', 'id', 'errors'));\n            } else {\n                if (!empty($failed)) {\n                    $this->Flash->error($message);\n                } else {\n                    $this->Flash->success($message);\n                }\n                $this->redirect(array('action' => 'view', $id));\n            }\n        } else {\n            $this->set('id', $id);\n            $this->set('type', 'alert');\n            $this->render('ajax/eventPublishConfirmationForm');\n        }\n    }\n\n    // Send out an contact email to the person who posted the event.\n    // Users with a GnuPG key will get the mail encrypted, other users will get the mail unencrypted\n    public function contact($id = null)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        // User has filled in his contact form, send out the email.\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['Event'])) {\n                $this->request->data = array('Event' => $this->request->data);\n            }\n            $message = $this->request->data['Event']['message'];\n            if (empty($message)) {\n                $error = __('You must specify a message.');\n                if ($this->_isRest()) {\n                    throw new MethodNotAllowedException($error);\n                } else {\n                    $this->Flash->error($error);\n                    $this->redirect(array('action' => 'contact', $id));\n                }\n            }\n\n            $creator_only = false;\n            if (isset($this->request->data['Event']['person'])) {\n                $creator_only = $this->request->data['Event']['person'];\n            }\n            $user = $this->Auth->user();\n            $user['gpgkey'] = $this->Event->User->getPGP($user['id']);\n            $user['certif_public'] = $this->Event->User->getCertificate($user['id']);\n\n            $success = $this->Event->sendContactEmailRouter($id, $message, $creator_only, $user, $this->_isSiteAdmin());\n            if ($success) {\n                $return_message = __('Email sent to the reporter.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveSuccessResponse('Events', 'contact', $id, $this->response->type(), $return_message);\n                } else {\n                    $this->Flash->success($return_message);\n                    // redirect to the view event page\n                    $this->redirect(array('action' => 'view', $id));\n                }\n            } else {\n                $return_message = __('Sending of email failed.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Events', 'contact', $id, $return_message, $this->response->type());\n                } else {\n                    $this->Flash->error($return_message, 'default', array(), 'error');\n                    // redirect to the view event page\n                    $this->redirect(array('action' => 'view', $id));\n                }\n            }\n        }\n        // User didn't see the contact form yet. Present it to him.\n        if (empty($this->data)) {\n            $this->data = $this->Event->read(null, $id);\n        }\n    }\n\n    public function automation($legacy = false)\n    {\n        // Simply display a static view\n        if (!$this->userRole['perm_auth']) {\n            $this->redirect(array('controller' => 'events', 'action' => 'index'));\n        }\n        App::uses('BroExport', 'Export');\n        $export = new BroExport();\n        $temp = $export->mispTypes;\n        $broTypes = array('all' => 'All types listed below.');\n        foreach ($temp as $broType => $mispTypes) {\n            foreach ($mispTypes as $mT) {\n                $broTypes[$broType][] = $mT[0];\n            }\n            $broTypes[$broType] = implode(', ', $broTypes[$broType]);\n        }\n        $this->loadModel('Server');\n        $this->set('command_line_functions', $this->Server->command_line_functions);\n        $this->set('broTypes', $broTypes);\n        // generate the list of Attribute types\n        $this->loadModel('Attribute');\n        $this->set('sigTypes', array_keys($this->Attribute->typeDefinitions));\n        $this->loadModel('Server');\n        $rpzSettings = $this->Server->retrieveCurrentSettings('Plugin', 'RPZ_');\n        $this->set('rpzSettings', $rpzSettings);\n        $this->set('hashTypes', array_keys($this->Event->Attribute->hashTypes));\n        if ($legacy) {\n            $this->render('legacy_automation');\n        }\n    }\n\n    public function export()\n    {\n        $filesize_units = array('B', 'KB', 'MB', 'GB', 'TB');\n        if ($this->_isSiteAdmin()) {\n            $this->Flash->info(__('Warning, you are logged in as a site admin, any export that you generate will contain the FULL UNRESTRICTED data-set. If you would like to generate an export for your own organisation, please log in with a different user.'));\n        }\n        // Check if the background jobs are enabled - if not, fall back to old export page.\n        if (Configure::read('MISP.background_jobs') && !Configure::read('MISP.disable_cached_exports')) {\n            $now = time();\n\n            // as a site admin we'll use the ADMIN identifier, not to overwrite the cached files of our own org with a file that includes too much data.\n            $org_name = $this->_isSiteAdmin() ? 'ADMIN' : $this->Auth->user('Organisation')['name'];\n            $conditions = $this->Event->createEventConditions($this->Auth->user());\n            $this->Event->recursive = -1;\n            $newestEvent = $this->Event->find('first', array(\n                'conditions' => $conditions,\n                'fields' => 'timestamp',\n                'order' => 'Event.timestamp DESC',\n            ));\n            $newestEventPublished = $this->Event->find('first', array(\n                'conditions' => array('AND' => array($conditions, array('published' => 1))),\n                'fields' => 'timestamp',\n                'order' => 'Event.timestamp DESC',\n            ));\n            $this->loadModel('Job');\n            foreach ($this->Event->export_types as $k => $type) {\n                if ($type['requiresPublished']) {\n                    $tempNewestEvent = $newestEventPublished;\n                } else {\n                    $tempNewestEvent = $newestEvent;\n                }\n                $job = $this->Job->find('first', array(\n                        'fields' => array('id', 'progress'),\n                        'conditions' => array(\n                                'job_type' => 'cache_' . $k,\n                                'org_id' => $this->_isSiteAdmin() ? 0 : $this->Auth->user('org_id')\n                            ),\n                        'order' => array('Job.id' => 'desc')\n                ));\n                $dir = new Folder(APP . 'tmp/cached_exports/' . $k, true);\n                if ($k === 'text') {\n                    // Since all of the text export files are generated together, we might as well just check for a single one md5.\n                    $file = new File($dir->pwd() . DS . 'misp.text_md5.' . $org_name . $type['extension']);\n                } else {\n                    $file = new File($dir->pwd() . DS . 'misp.' . $k . '.' . $org_name . $type['extension']);\n                }\n                if (!$file->readable()) {\n                    if (empty($tempNewestEvent)) {\n                        $lastModified = 'No valid events';\n                        $this->Event->export_types[$k]['recommendation'] = 0;\n                    } else {\n                        $lastModified = 'N/A';\n                        $this->Event->export_types[$k]['recommendation'] = 1;\n                    }\n                } else {\n                    $filesize = $file->size();\n                    $filesize_unit_index = 0;\n                    while ($filesize > 1024) {\n                        $filesize_unit_index++;\n                        $filesize = $filesize / 1024;\n                    }\n                    $this->Event->export_types[$k]['filesize'] = round($filesize, 1) . $filesize_units[$filesize_unit_index];\n                    $fileChange = $file->lastChange();\n                    $lastModified = $this->__timeDifference($now, $fileChange);\n                    if (empty($tempNewestEvent) || $fileChange > $tempNewestEvent['Event']['timestamp']) {\n                        if (empty($tempNewestEvent)) {\n                            $lastModified = 'No valid events';\n                        }\n                        $this->Event->export_types[$k]['recommendation'] = 0;\n                    } else {\n                        $this->Event->export_types[$k]['recommendation'] = 1;\n                    }\n                }\n\n                $this->Event->export_types[$k]['lastModified'] = $lastModified;\n                if (!empty($job)) {\n                    $this->Event->export_types[$k]['job_id'] = $job['Job']['id'];\n                    $this->Event->export_types[$k]['progress'] = $job['Job']['progress'];\n                } else {\n                    $this->Event->export_types[$k]['job_id'] = -1;\n                    $this->Event->export_types[$k]['progress'] = 0;\n                }\n            }\n        }\n        $this->loadModel('Attribute');\n        $this->set('sigTypes', array_keys($this->Attribute->typeDefinitions));\n        $this->set('export_types', $this->Event->export_types);\n    }\n\n    public function downloadExport($type, $extra = null)\n    {\n        if (Configure::read('MISP.disable_cached_exports')) {\n            throw new MethodNotAllowedException(__('This feature is currently disabled'));\n        }\n        if ($this->_isSiteAdmin()) {\n            $org = 'ADMIN';\n        } else {\n            $org = $this->Auth->user('Organisation')['name'];\n        }\n        $this->autoRender = false;\n        if ($extra != null) {\n            $extra = '_' . $extra;\n        }\n        $this->response->type($this->Event->export_types[$type]['extension']);\n        $path = 'tmp/cached_exports/' . $type . DS . 'misp.' . strtolower($this->Event->export_types[$type]['type']) . $extra . '.' . $org . $this->Event->export_types[$type]['extension'];\n        $this->response->file($path, array('download' => true));\n    }\n\n    private function __timeDifference($now, $then)\n    {\n        $periods = array(\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\");\n        $lengths = array(\"60\",\"60\",\"24\",\"7\",\"4.35\",\"12\");\n        $difference = $now - $then;\n        for ($j = 0; $difference >= $lengths[$j] && $j < count($lengths)-1; $j++) {\n            $difference /= $lengths[$j];\n        }\n        $difference = round($difference);\n        if ($difference != 1) {\n            $periods[$j].= \"s\";\n        }\n        return $difference . \" \" . $periods[$j] . \" ago\";\n    }\n\n    public function xml($key, $eventid = false, $withAttachment = false, $tags = false, $from = false, $to = false, $last = false)\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'eventid', 'withAttachment', 'tags', 'from', 'to', 'last'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'xml'\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    // Grab an event or a list of events for the event view or any of the XML exports. The returned object includes an array of events (or an array that only includes a single event if an ID was given)\n    // Included with the event are the attached attributes, shadow attributes, related events, related attribute information for the event view and the creating user's email address where appropriate\n    private function __fetchEvent($eventid = false, $idList = false, $user = false, $tags = false, $from = false, $to = false)\n    {\n        // if we come from automation, we may not be logged in - instead we used an auth key in the URL.\n        if (empty($user)) {\n            $user = $this->Auth->user();\n        }\n        $results = $this->Event->fetchEvent($user, array('eventid' => $eventid, 'idList' => $idList, 'tags' => $tags, 'from' => $from, 'to' => $to));\n        return $results;\n    }\n\n    public function nids()\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'format', 'key', 'id', 'continue', 'tags', 'from', 'to', 'last',\n                'type', 'enforceWarninglist', 'includeAllTags', 'eventid'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args()\n        ));\n        if (empty($this->_legacyParams['returnFormat'])) {\n            $this->_legacyParams['returnFormat'] = 'suricata';\n        }\n        return $this->restSearch();\n    }\n\n    public function hids($type)\n    {\n        $typeMappings = array(\n            'md5' => array('malware-sample', 'md5', 'filename|md5'),\n            'sha1' => array('sha1', 'filename|sha1'),\n            'sha256' => array('sha256', 'filename|sha256')\n        );\n        $ordered_url_params = func_get_args();\n        unset($ordered_url_params[0]);\n        $ordered_url_params = array_values($ordered_url_params);\n        $this->scopeOverride = 'Attribute';\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'id', 'withAttachment', 'tags', 'from', 'to', 'last'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => $ordered_url_params,\n            'injectedParams' => array(\n                'returnFormat' => 'hashes',\n                'type' => (isset($typeMappings[$type])) ? $typeMappings[$type] : $type\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    // DEPRECATED - use restSearch with \"returnFormat\":\"csv\"\n    public function csv($key)\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'eventid', 'ignore', 'tags', 'category', 'type', 'includeContext',\n                'from', 'to', 'last', 'headerless', 'enforceWarninglist', 'value', 'timestamp'\n            ),\n            'key' => $key,\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'csv',\n                'to_ids' => '1',\n                'published' => '1'\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    public function _addIOCFile($id)\n    {\n        if (!empty($this->data) && $this->data['Event']['submittedioc']['size'] > 0 &&\n                is_uploaded_file($this->data['Event']['submittedioc']['tmp_name'])) {\n            if (!$this->Event->checkFilename($this->data['Event']['submittedioc']['name'])) {\n                throw new Exception(__('Filename not allowed.'));\n            }\n\n            App::uses('FileAccessTool', 'Tools');\n            $fileAccessTool = new FileAccessTool();\n            $iocData = $fileAccessTool->readFromFile($this->data['Event']['submittedioc']['tmp_name'], $this->data['Event']['submittedioc']['size']);\n\n        // write\n        $attachments_dir = Configure::read('MISP.attachments_dir');\n            if (empty($attachments_dir)) {\n            $attachments_dir = $this->Event->getDefaultAttachments_dir();\n        }\n        $rootDir = $attachments_dir . DS . $id . DS;\n            App::uses('Folder', 'Utility');\n            $dir = new Folder($rootDir . 'ioc', true);\n            $destPath = $rootDir . 'ioc';\n            App::uses('File', 'Utility');\n            $iocFile = new File($destPath . DS . $this->data['Event']['submittedioc']['name']);\n            $result = $iocFile->write($iocData);\n            if (!$result) {\n                $this->Flash->error(__('Problem with writing the IoC file. Please report to site admin.'));\n            }\n\n            // open the xml\n            $xmlFilePath = $destPath . DS . $this->data['Event']['submittedioc']['name'];\n            $xmlFileData = $fileAccessTool->readFromFile($xmlFilePath, $this->data['Event']['submittedioc']['size']);\n\n            // Load event and populate the event data\n            $this->Event->id = $id;\n            $this->Event->recursive = -1;\n            if (!$this->Event->exists()) {\n                throw new NotFoundException(__('Invalid event'));\n            }\n            $this->Event->read(null, $id);\n            $saveEvent['Event'] = $this->Event->data['Event'];\n            $saveEvent['Event']['published'] = false;\n            $dist = '5';\n            if (Configure::read('MISP.default_attribute_distribution') != null) {\n                if (Configure::read('MISP.default_attribute_distribution') === 'event') {\n                    $dist = '5';\n                } else {\n                    $dist = '';\n                    $dist .= Configure::read('MISP.default_attribute_distribution');\n                }\n            }\n            // read XML\n            $event = $this->IOCImport->readXML($xmlFileData, $id, $dist, $this->data['Event']['submittedioc']['name']);\n\n            // make some changes to have $saveEvent in the format that is needed to save the event together with its attributes\n            $fails = $event['Fails'];\n            $saveEvent['Attribute'] = $event['Attribute'];\n            // we've already stored these elsewhere, unset them so we can extract the event related data\n            unset($event['Attribute']);\n            unset($event['Fails']);\n\n            // add the original openIOC file as an attachment\n            $saveEvent['Attribute'][] = array(\n                'category' => 'External analysis',\n                'uuid' =>  CakeText::uuid(),\n                'type' => 'attachment',\n                'value' => $this->data['Event']['submittedioc']['name'],\n                'to_ids' => false,\n                'distribution' => $dist,\n                'data' => base64_encode($xmlFileData),\n                'comment' => 'OpenIOC import source file'\n            );\n\n            // LATER we might want to let an ioc create the event data automatically in a later version\n            // save the event related data into $saveEvent['Event']\n            //$saveEvent['Event'] = $event;\n            //$saveEvent['Event']['id'] = $id;\n\n            $fieldList = array(\n                    'Event' => array('published', 'timestamp'),\n                    'Attribute' => array('event_id', 'category', 'type', 'value', 'value1', 'value2', 'to_ids', 'uuid', 'distribution', 'timestamp', 'comment')\n            );\n            // Save it all\n            $saveResult = $this->Event->saveAssociated($saveEvent, array('validate' => true, 'fieldList' => $fieldList));\n            // set stuff for the view and render the showIOCResults view.\n            $this->set('attributes', $saveEvent['Attribute']);\n            if (isset($fails)) {\n                $this->set('fails', $fails);\n            }\n            $this->set('eventId', $id);\n            $this->set('graph', $event['Graph']);\n            $this->set('saveEvent', $saveEvent);\n            $this->render('showIOCResults');\n        }\n    }\n\n    public function _addMISPExportFile($ext, $take_ownership = false, $publish = false)\n    {\n        App::uses('FileAccessTool', 'Tools');\n        $data = (new FileAccessTool())->readFromFile($this->data['Event']['submittedfile']['tmp_name'], $this->data['Event']['submittedfile']['size']);\n\n        if ($ext == 'xml') {\n            App::uses('Xml', 'Utility');\n            $dataArray = Xml::toArray(Xml::build($data));\n        } else {\n            $dataArray = json_decode($data, true);\n            if (isset($dataArray['response'][0])) {\n                foreach ($dataArray['response'] as $k => $temp) {\n                    $dataArray['Event'][] = $temp['Event'];\n                    unset($dataArray['response'][$k]);\n                }\n            }\n        }\n        // In case we receive an event that is not encapsulated in a response. This should never happen (unless it's a copy+paste fail),\n        // but just in case, let's clean it up anyway.\n        if (isset($dataArray['Event'])) {\n            $dataArray['response']['Event'] = $dataArray['Event'];\n            unset($dataArray['Event']);\n        }\n        if (!isset($dataArray['response']) || !isset($dataArray['response']['Event'])) {\n            throw new Exception(__('This is not a valid MISP XML file.'));\n        }\n        $dataArray = $this->Event->updateXMLArray($dataArray);\n        $results = array();\n        $validationIssues = array();\n        if (isset($dataArray['response']['Event'][0])) {\n            foreach ($dataArray['response']['Event'] as $k => $event) {\n                $result = array('info' => $event['info']);\n                if ($take_ownership) {\n                    $event['orgc_id'] = $this->Auth->user('org_id');\n                    unset($event['Orgc']);\n                }\n                $event = array('Event' => $event);\n                $created_id = 0;\n                $event['Event']['locked'] = 1;\n                $event['Event']['published'] = $publish;\n                $result['result'] = $this->Event->_add($event, true, $this->Auth->user(), '', null, false, null, $created_id, $validationIssues);\n                $result['id'] = $created_id;\n                $result['validationIssues'] = $validationIssues;\n                $results[] = $result;\n            }\n        } else {\n            $temp['Event'] = $dataArray['response']['Event'];\n            if ($take_ownership) {\n                $temp['Event']['orgc_id'] = $this->Auth->user('org_id');\n                unset($temp['Event']['Orgc']);\n            }\n            $created_id = 0;\n            $temp['Event']['locked'] = 1;\n            $temp['Event']['published'] = $publish;\n            $result = $this->Event->_add($temp, true, $this->Auth->user(), '', null, false, null, $created_id, $validationIssues);\n            $results = array(0 => array('info' => $temp['Event']['info'], 'result' => $result, 'id' => $created_id, 'validationIssues' => $validationIssues));\n        }\n        return $results;\n    }\n\n    public function downloadOpenIOCEvent($key, $eventid, $enforceWarninglist = false)\n    {\n        // return a downloadable text file called misp.openIOC.<eventId>.ioc for individual events\n        // TODO implement mass download of all events - maybe in a zip file?\n        $this->response->type('text');  // set the content type\n        if ($eventid == null) {\n            throw new Exception(__('Not yet implemented'));\n        }\n        $this->layout = 'text/default';\n\n        if ($key != 'download') {\n            $user = $this->checkAuthUser($key);\n            if (!$user) {\n                throw new UnauthorizedException(__('This authentication key is not authorized to be used for exports. Contact your administrator.'));\n            }\n        } else {\n            if (!$this->Auth->user('id')) {\n                throw new UnauthorizedException(__('You have to be logged in to do that.'));\n            }\n        }\n\n        // get the event if it exists and load it together with its attributes\n        $this->Event->id = $eventid;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event or not authorised.'));\n        }\n        $event = $this->Event->fetchEvent($this->Auth->user(), $options = array('eventid' => $eventid, 'to_ids' => 1, 'enforceWarninglist' => $enforceWarninglist));\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid event or not authorised.'));\n        }\n        $this->loadModel('Whitelist');\n        $temp = $this->Whitelist->removeWhitelistedFromArray(array($event[0]), false);\n        $event = $temp[0];\n\n        // send the event and the vars needed to check authorisation to the Component\n        App::uses('IOCExportTool', 'Tools');\n        $this->IOCExport = new IOCExportTool();\n        $final = $this->IOCExport->buildAll($this->Auth->user(), $event);\n        $this->response->type('xml');\n        $this->autoRender = false;\n        $this->response->body($final);\n        $this->response->download('misp.openIOC' . $eventid . '.ioc');\n        return $this->response;\n    }\n\n    public function proposalEventIndex()\n    {\n        $this->loadModel('ShadowAttribute');\n        $this->ShadowAttribute->recursive = -1;\n        $conditions = array('ShadowAttribute.deleted' => 0);\n        if (!$this->_isSiteAdmin()) {\n            $conditions[] = array('ShadowAttribute.event_org_id' => $this->Auth->user('org_id'));\n        }\n        $result = $this->ShadowAttribute->find('all', array(\n                'fields' => array('event_id'),\n                'group' => array('event_id', 'id'),\n                'conditions' => $conditions\n        ));\n        $this->Event->recursive = -1;\n        $conditions = array();\n        foreach ($result as $eventId) {\n            $conditions['OR'][] = array('Event.id =' => $eventId['ShadowAttribute']['event_id']);\n        }\n        if (empty($result)) {\n            $conditions['OR'][] = array('Event.id =' => -1);\n        }\n        $this->paginate = array(\n                'fields' => array('Event.id', 'Event.org_id', 'Event.orgc_id', 'Event.publish_timestamp', 'Event.distribution', 'Event.info', 'Event.date', 'Event.published'),\n                'conditions' => $conditions,\n                'contain' => array(\n                    'User' => array(\n                            'fields' => array(\n                                'User.email'\n                    )),\n                    'ShadowAttribute'=> array(\n                        'fields' => array(\n                            'ShadowAttribute.id', 'ShadowAttribute.org_id', 'ShadowAttribute.event_id'\n                        ),\n                        'conditions' => array(\n                            'ShadowAttribute.deleted' => 0\n                        ),\n                    ),\n        ));\n        $events = $this->paginate();\n        $orgIds = array();\n        foreach ($events as $k => $event) {\n            $orgs = array();\n            foreach ($event['ShadowAttribute'] as $sa) {\n                if (!in_array($sa['org_id'], $orgs)) {\n                    $orgs[] = $sa['org_id'];\n                }\n                if (!in_array($sa['org_id'], $orgIds)) {\n                    $orgIds[] = $sa['org_id'];\n                }\n            }\n            $events[$k]['orgArray'] = $orgs;\n            $events[$k]['Event']['proposal_count'] = count($event['ShadowAttribute']);\n        }\n        $orgs = $this->Event->Orgc->find('list', array(\n            'conditions' => array('Orgc.id' => $orgIds),\n            'fields' => array('Orgc.id', 'Orgc.name')\n        ));\n        $this->set('orgs', $orgs);\n        $this->set('events', $events);\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('analysisLevels', $this->Event->analysisLevels);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n    }\n\n    public function reportValidationIssuesEvents()\n    {\n        // search for validation problems in the events\n        if (!self::_isSiteAdmin()) {\n            throw new NotFoundException();\n        }\n        $results = $this->Event->reportValidationIssuesEvents();\n        $result = $results[0];\n        $count = $results[1];\n        $this->set('result', $result);\n        $this->set('count', $count);\n    }\n\n    public function addTag($id = false, $tag_id = false)\n    {\n        $this->loadModel('Taxonomy');\n        $rearrangeRules = array(\n                'request' => false,\n                'Event' => false,\n                'tag_id' => 'tag',\n                'event_id' => 'event',\n                'id' => 'event'\n        );\n        $RearrangeTool = new RequestRearrangeTool();\n        $this->request->data = $RearrangeTool->rearrangeArray($this->request->data, $rearrangeRules);\n        if ($id === false) {\n            $id = $this->request->data['event'];\n        }\n        $this->Event->recursive = -1;\n        $event = $this->Event->read(array(), $id);\n        if (empty($event)) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid event.')), 'status'=>200, 'type' => 'json'));\n        }\n        $local = !empty($this->params['named']['local']);\n        if (!$this->request->is('post')) {\n            $this->set('local', $local);\n            $this->set('object_id', $id);\n            $this->set('scope', 'Event');\n            $this->layout = false;\n            $this->autoRender = false;\n            $this->render('/Events/add_tag');\n        } else {\n            if ($tag_id === false) {\n                $tag_id = $this->request->data['tag'];\n            }\n            if (!$this->_isSiteAdmin() && !$this->userRole['perm_sync']) {\n                if (\n                    !$this->userRole['perm_tagger'] ||\n                    (\n                        $this->Auth->user('org_id') !== $event['Event']['orgc_id']\n                    )\n                ) {\n                    if (Configure::read('MISP.host_org_id') != $this->Auth->user('org_id') || !$local) {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You don\\'t have permission to do that.')), 'status'=>200, 'type' => 'json'));\n                    }\n                }\n            }\n            $conditions = array('LOWER(Tag.name) LIKE' => strtolower(trim($tag_id)));\n            if (!$this->_isSiteAdmin()) {\n                $conditions['Tag.org_id'] = array('0', $this->Auth->user('org_id'));\n                $conditions['Tag.user_id'] = array('0', $this->Auth->user('id'));\n            }\n            if (!is_numeric($tag_id)) {\n                if (preg_match('/^collection_[0-9]+$/i', $tag_id)) {\n                    $tagChoice = explode('_', $tag_id)[1];\n                    $this->loadModel('TagCollection');\n                    $tagCollection = $this->TagCollection->fetchTagCollection($this->Auth->user(), array('conditions' => array('TagCollection.id' => $tagChoice)));\n                    if (empty($tagCollection)) {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag Collection.')), 'status'=>200, 'type' => 'json'));\n                    }\n                    $tag_id_list = array();\n                    foreach ($tagCollection[0]['TagCollectionTag'] as $tagCollectionTag) {\n                        $tag_id_list[] = $tagCollectionTag['tag_id'];\n                    }\n                } else {\n                    $tag_ids = json_decode($tag_id);\n                    if ($tag_ids !== null) { // can decode json\n                        $tag_id_list = array();\n                        foreach ($tag_ids as $tag_id) {\n                            if (preg_match('/^collection_[0-9]+$/i', $tag_id)) {\n                                $tagChoice = explode('_', $tag_id)[1];\n                                $this->loadModel('TagCollection');\n                                $tagCollection = $this->TagCollection->fetchTagCollection($this->Auth->user(), array('conditions' => array('TagCollection.id' => $tagChoice)));\n                                if (empty($tagCollection)) {\n                                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag Collection.')), 'status'=>200, 'type' => 'json'));\n                                }\n                                foreach ($tagCollection[0]['TagCollectionTag'] as $tagCollectionTag) {\n                                    $tag_id_list[] = $tagCollectionTag['tag_id'];\n                                }\n                            } else {\n                                $tag_id_list[] = $tag_id;\n                            }\n                        }\n                    } else {\n                        $tag = $this->Event->EventTag->Tag->find('first', array('recursive' => -1, 'conditions' => $conditions));\n                        if (empty($tag)) {\n                            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag.')), 'status'=>200, 'type' => 'json'));\n                        }\n                        $tag_id = $tag['Tag']['id'];\n                    }\n                }\n            }\n            $this->autoRender = false;\n            $error = false;\n            $success = false;\n            if (empty($tag_id_list)) {\n                $tag_id_list = array($tag_id);\n            }\n            foreach ($tag_id_list as $tag_id) {\n                $this->Event->EventTag->Tag->id = $tag_id;\n                if (!$this->Event->EventTag->Tag->exists()) {\n                    $error = __('Invalid Tag.');\n                    continue;\n                }\n                $tag = $this->Event->EventTag->Tag->find('first', array(\n                    'conditions' => array('Tag.id' => $tag_id),\n                    'recursive' => -1,\n                    'fields' => array('Tag.name')\n                ));\n                $found = $this->Event->EventTag->find('first', array(\n                    'conditions' => array(\n                        'event_id' => $id,\n                        'tag_id' => $tag_id\n                    ),\n                    'recursive' => -1,\n                ));\n                if (!empty($found)) {\n                    $error = __('Tag is already attached to this event.');\n                    continue;\n                }\n                $tagsOnEvent = $this->Event->EventTag->find('all', array(\n                    'conditions' => array(\n                        'EventTag.event_id' => $id,\n                        'EventTag.local' => $local\n                    ),\n                    'contain' => 'Tag',\n                    'fields' => array('Tag.name'),\n                    'recursive' => -1\n                ));\n                $exclusiveTestPassed = $this->Taxonomy->checkIfNewTagIsAllowedByTaxonomy($tag['Tag']['name'], Hash::extract($tagsOnEvent, '{n}.Tag.name'));\n                if (!$exclusiveTestPassed) {\n                    $fail = __('Tag is not allowed due to taxonomy exclusivity settings');\n                    continue;\n                }\n                $this->Event->EventTag->create();\n                if ($this->Event->EventTag->save(array('event_id' => $id, 'tag_id' => $tag_id, 'local' => $local))) {\n                    if (!$local) {\n                        $event['Event']['published'] = 0;\n                        $date = new DateTime();\n                        $event['Event']['timestamp'] = $date->getTimestamp();\n                        $this->Event->save($event);\n                    }\n                    $log = ClassRegistry::init('Log');\n                    $log->createLogEntry(\n                        $this->Auth->user(),\n                        'tag',\n                        'Event',\n                        $id,\n                        sprintf(\n                            'Attached%s tag (%s) \"%s\" to event (%s)',\n                            $local ? ' local' : '',\n                            $tag_id,\n                            $tag['Tag']['name'],\n                            $id\n                        ),\n                        sprintf(\n                            'Event (%s) tagged as Tag (%s)%s',\n                            $id,\n                            $tag_id,\n                            $local ? ' locally' : ''\n                        )\n                    );\n                    $success = __('Tag(s) added.');\n                } else {\n                    $fail = __('Tag could not be added.');\n                }\n            }\n            if ($success) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => __('Tag(s) added.'), 'check_publish' => true)), 'status'=>200, 'type' => 'json'));\n            } elseif (empty($fail)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => __('All tags are already present, nothing to add.'), 'check_publish' => true)), 'status'=>200, 'type' => 'json'));\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $fail)), 'status'=>200, 'type' => 'json'));\n            }\n        }\n    }\n\n    public function removeTag($id = false, $tag_id = false, $galaxy = false)\n    {\n        if (!$this->request->is('post')) {\n            $this->set('id', $id);\n            $this->set('tag_id', $tag_id);\n            $this->set('model', 'Event');\n            $this->render('/Attributes/ajax/tagRemoveConfirmation');\n        } else {\n            $rearrangeRules = array(\n                    'request' => false,\n                    'Event' => false,\n                    'tag_id' => 'tag',\n                    'event_id' => 'event',\n                    'id' => 'event'\n            );\n            $RearrangeTool = new RequestRearrangeTool();\n            $this->request->data = $RearrangeTool->rearrangeArray($this->request->data, $rearrangeRules);\n            if ($id === false) {\n                $id = $this->request->data['event'];\n            }\n            if ($tag_id === false) {\n                $tag_id = $this->request->data['tag'];\n            }\n            if (empty($tag_id)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid ' . ($galaxy ? 'Galaxy' : 'Tag') . '.')), 'status'=>200, 'type' => 'json'));\n            }\n            if (!is_numeric($tag_id)) {\n                $tag = $this->Event->EventTag->Tag->find('first', array('recursive' => -1, 'conditions' => array('LOWER(Tag.name) LIKE' => strtolower(trim($tag_id)))));\n                if (empty($tag)) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid ' . ($galaxy ? 'Galaxy' : 'Tag') . '.')), 'status'=>200, 'type' => 'json'));\n                }\n                $tag_id = $tag['Tag']['id'];\n            }\n            if (!is_numeric($id)) {\n                $id = $this->request->data['Event']['id'];\n            }\n            $this->Event->recursive = -1;\n            $event = $this->Event->read(array(), $id);\n            $eventTag = $this->Event->EventTag->find('first', array(\n                'conditions' => array(\n                    'event_id' => $id,\n                    'tag_id' => $tag_id\n                ),\n                'recursive' => -1,\n            ));\n\n            // org should allow to (un)tag too, so that an event that gets pushed can be (un)tagged locally by the owning org\n            if (\n                (\n                    (\n                        $this->Auth->user('org_id') !== $event['Event']['orgc_id'] ||\n                        (\n                            $this->Auth->user('org_id') != Configure::read('MISP.host_org_id') &&\n                            !empty($eventTag['EventTag']['local'])\n                        )\n                    ) ||\n                    !$this->userRole['perm_tagger']\n                ) &&\n                !$this->_isSiteAdmin()\n            ) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You don\\'t have permission to do that.')), 'status'=>200, 'type' => 'json'));\n            }\n            $this->Event->insertLock($this->Auth->user(), $id);\n            $this->autoRender = false;\n            if (empty($eventTag)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid event - ' . ($galaxy ? 'galaxy' : 'tag') . ' combination.')), 'status'=>200, 'type' => 'json'));\n            }\n            $tag = $this->Event->EventTag->Tag->find('first', array(\n                'conditions' => array('Tag.id' => $tag_id),\n                'recursive' => -1,\n                'fields' => array('Tag.name')\n            ));\n            if ($this->Event->EventTag->delete($eventTag['EventTag']['id'])) {\n                if (empty($eventTag['EventTag']['local'])) {\n                    $event['Event']['published'] = 0;\n                    $date = new DateTime();\n                    $event['Event']['timestamp'] = $date->getTimestamp();\n                    $this->Event->save($event);\n                }\n                $log = ClassRegistry::init('Log');\n                $log->createLogEntry($this->Auth->user(), 'tag', 'Event', $id, 'Removed tag (' . $tag_id . ') \"' . $tag['Tag']['name'] . '\" from event (' . $id . ')', 'Event (' . $id . ') untagged of Tag (' . $tag_id . ')');\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => ($galaxy ? 'Galaxy' : 'Tag') . ' removed.', 'check_publish' => empty($eventTag['EventTag']['local']))), 'status'=>200, 'type' => 'json'));\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => ($galaxy ? 'Galaxy' : 'Tag') . ' could not be removed.')), 'status'=>200, 'type' => 'json'));\n            }\n        }\n    }\n\n    /*\n     * adhereToWarninglists is used when querying this function via the API\n     * possible options:\n     *  - false: (default) ignore warninglists\n     *  - 'soft': Unset the IDS flag of all attributes hitting on a warninglist item\n     *  - true / 'hard': Block attributes from being added that have a hit in the warninglists\n     * returnMetaAttributes is a flag that will force the API to return the results of the\n     * parsing directly for external further processing. The flag is a simple boolean flag (0||1)\n     */\n    public function freeTextImport($id, $adhereToWarninglists = false, $returnMetaAttributes = false)\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('Event not found or you don\\'t have permissions to create attributes'));\n        }\n        $event = $this->Event->find('first', array(\n                'conditions' => array('Event.id' => $id),\n                'fields' => array('id', 'orgc_id'),\n                'recursive' => -1\n        ));\n        $this->set('event_id', $id);\n        if ($this->request->is('get')) {\n            $this->layout = 'ajax';\n            $this->request->data['Attribute']['event_id'] = $id;\n        }\n\n        if ($this->request->is('post')) {\n            App::uses('ComplexTypeTool', 'Tools');\n            $complexTypeTool = new ComplexTypeTool();\n            $this->loadModel('Warninglist');\n            $complexTypeTool->setTLDs($this->Warninglist->fetchTLDLists());\n            if (!isset($this->request->data['Attribute'])) {\n                $this->request->data = array('Attribute' => $this->request->data);\n            }\n            if (!isset($this->request->data['Attribute']['value'])) {\n                $this->request->data['Attribute'] = array('value' => $this->request->data['Attribute']);\n            }\n            if (isset($this->request->data['Attribute']['adhereToWarninglists'])) {\n                $adhereToWarninglists = $this->request->data['Attribute']['adhereToWarninglists'];\n            }\n            $resultArray = $complexTypeTool->checkComplexRouter($this->request->data['Attribute']['value'], 'freetext');\n            foreach ($resultArray as $key => $r) {\n                $temp = array();\n                foreach ($r['types'] as $type) {\n                    $temp[$type] = $type;\n                }\n                $resultArray[$key]['types'] = $temp;\n            }\n\n            // remove all duplicates\n            foreach ($resultArray as $k => $v) {\n                for ($i = 0; $i < $k; $i++) {\n                    if (isset($resultArray[$i]) && $v == $resultArray[$i]) {\n                        unset($resultArray[$k]);\n                    }\n                }\n            }\n            if ($this->_isRest()) {\n                if ($returnMetaAttributes || !empty($this->request->data['Attribute']['returnMetaAttributes'])) {\n                    return $this->RestResponse->viewData($resultArray, $this->response->type());\n                } else {\n                    return $this->__pushFreetext(\n                        $resultArray,\n                        $id,\n                        isset($this->request->data['Attribute']['distribution']) ? $this->request->data['Attribute']['distribution'] : false,\n                        isset($this->request->data['Attribute']['sharing_group_id']) ? $this->request->data['Attribute']['sharing_group_id'] : false,\n                        $adhereToWarninglists\n                    );\n                }\n            }\n            foreach ($resultArray as $key => $result) {\n                if ($has_pipe = strpos($result['default_type'], '|') !== false || $result['default_type'] === 'malware-sample') {\n                    $pieces = explode('|', $result['value']);\n                    $or = array('Attribute.value1' => $pieces,\n                                'Attribute.value2' => $pieces);\n                } else {\n                    $or = array('Attribute.value1' => $result['value'], 'Attribute.value2' => $result['value']);\n                }\n                $options = array(\n                    'conditions' => array('OR' => $or),\n                    'fields' => array('Attribute.type', 'Attribute.category', 'Attribute.value', 'Attribute.comment'),\n                    'order' => false,\n                    'flatten' => 1\n                );\n                $resultArray[$key]['related'] = $this->Event->Attribute->fetchAttributes($this->Auth->user(), $options);\n            }\n            $resultArray = array_values($resultArray);\n            $typeCategoryMapping = array();\n            foreach ($this->Event->Attribute->categoryDefinitions as $k => $cat) {\n                foreach ($cat['types'] as $type) {\n                    $typeCategoryMapping[$type][$k] = $k;\n                }\n            }\n            $distributions = $this->Event->Attribute->distributionLevels;\n            $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n            if (empty($sgs)) {\n                unset($distributions[4]);\n            }\n\n            $this->set('proposals', $event['Event']['orgc_id'] != $this->Auth->user('org_id') && !$this->_isSiteAdmin());\n            $this->set('distributions', $distributions);\n            $this->set('sgs', $sgs);\n            $this->set('event', $event);\n            $this->set('typeList', array_keys($this->Event->Attribute->typeDefinitions));\n            $this->set('defaultCategories', $this->Event->Attribute->defaultCategories);\n            $this->set('typeCategoryMapping', $typeCategoryMapping);\n            foreach ($typeCategoryMapping as $k => $v) {\n                $typeCategoryMapping[$k] = array_values($v);\n            }\n            $this->set('mapping', $typeCategoryMapping);\n            $this->set('resultArray', $resultArray);\n            $this->set('importComment', '');\n            $this->set('title', 'Freetext Import Results');\n            $this->loadModel('Warninglist');\n            $tldLists = $this->Warninglist->getTldLists();\n            $missingTldLists = array();\n            foreach ($tldLists as $tldList) {\n                $temp = $this->Warninglist->find('first', array(\n                    'recursive' => -1,\n                    'conditions' => array('Warninglist.name' => $tldList),\n                    'fields' => array('Warninglist.id')\n                ));\n                if (empty($temp)) {\n                    $missingTldLists[] = $tldList;\n                }\n            }\n            $this->set('missingTldLists', $missingTldLists);\n            $this->render('resolved_attributes');\n        }\n    }\n\n    public function __pushFreetext($attributes, $id, $distribution = false, $sg = false, $adhereToWarninglists = false)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        if ($distribution === false) {\n            if (Configure::read('MISP.default_attribute_distribution') != null) {\n                if (Configure::read('MISP.default_attribute_distribution') == 'event') {\n                    $distribution = 5;\n                } else {\n                    $distribution = Configure::read('MISP.default_attribute_distribution');\n                }\n            } else {\n                $distribution = 0;\n            }\n        }\n        // prepare the default choices\n        foreach ($attributes as $k => $attribute) {\n            $attribute['type'] = $attribute['default_type'];\n            unset($attribute['default_type']);\n            unset($attribute['types']);\n            if (isset($attribute['default_category'])) {\n                $attribute['category'] = $attribute['default_category'];\n                unset($attribute['default_category']);\n            } else {\n                $attribute['category'] = $this->Event->Attribute->defaultCategories[$attribute['type']];\n            }\n            $attribute['distribution'] = $distribution;\n            $attribute['event_id'] = $id;\n            $attributes[$k] = $attribute;\n        }\n        // actually save the attribute now\n        $temp = $this->Event->processFreeTextDataRouter($this->Auth->user(), $attributes, $id, '', false, $adhereToWarninglists, empty(Configure::read('MISP.background_jobs')));\n        if (empty(Configure::read('MISP.background_jobs'))) {\n            $attributes = $temp;\n        }\n        // FIXME $attributes does not contain the onteflyattributes\n        $attributes = array_values($attributes);\n        return $this->RestResponse->viewData($attributes, $this->response->type());\n    }\n\n    public function saveFreeText($id)\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('Event not found or you don\\'t have permissions to create attributes'));\n        }\n        if ($this->request->is('post')) {\n            if (!$this->Event->checkIfAuthorised($this->Auth->user(), $id)) {\n                throw new MethodNotAllowedException(__('Invalid event.'));\n            }\n            $this->Event->insertLock($this->Auth->user(), $id);\n            $attributes = json_decode($this->request->data['Attribute']['JsonObject'], true);\n            $default_comment = $this->request->data['Attribute']['default_comment'];\n            $force = $this->_isSiteAdmin() && $this->request->data['Attribute']['force'];\n            $flashMessage = $this->Event->processFreeTextDataRouter($this->Auth->user(), $attributes, $id, $default_comment, $force);\n            $this->Flash->info($flashMessage);\n            $this->redirect(array('controller' => 'events', 'action' => 'view', $id));\n        } else {\n            throw new MethodNotAllowedException('This endpoint requires a POST request.');\n        }\n    }\n\n    public function stix2()\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'id', 'withAttachment', 'tags', 'from', 'to', 'last'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'stix2'\n            ),\n            'alias' => array(\n                'id' => 'eventid'\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    public function stix()\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'id', 'withAttachment', 'tags', 'from', 'to', 'last'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'stix'\n            ),\n            'alias' => array(\n                'id' => 'eventid'\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    public function filterEventIdsForPush()\n    {\n        if (!$this->userRole['perm_sync']) {\n            throw new MethodNotAllowedException(__('You do not have the permission to do that.'));\n        }\n        if ($this->request->is('post')) {\n            $incomingIDs = array();\n            $incomingEvents = array();\n            foreach ($this->request->data as $event) {\n                $incomingIDs[] = $event['Event']['uuid'];\n                $incomingEvents[$event['Event']['uuid']] = $event['Event']['timestamp'];\n            }\n            $events = $this->Event->find('all', array(\n                'conditions' => array('Event.uuid' => $incomingIDs),\n                'recursive' => -1,\n                'fields' => array('Event.uuid', 'Event.timestamp', 'Event.locked'),\n            ));\n            foreach ($events as $k => $v) {\n                if ($v['Event']['timestamp'] >= $incomingEvents[$v['Event']['uuid']]) {\n                    unset($incomingEvents[$v['Event']['uuid']]);\n                    continue;\n                }\n                if ($v['Event']['locked'] == 0) {\n                    unset($incomingEvents[$v['Event']['uuid']]);\n                }\n            }\n            $this->set('result', array_keys($incomingEvents));\n        }\n    }\n\n    public function checkuuid($uuid)\n    {\n        if (!$this->userRole['perm_sync']) {\n            throw new MethodNotAllowedException(__('You do not have the permission to do that.'));\n        }\n        $events = $this->Event->find('first', array(\n                'conditions' => array('Event.uuid' => $uuid),\n                'recursive' => -1,\n                'fields' => array('Event.uuid'),\n        ));\n        $this->set('result', array('result' => empty($events)));\n    }\n\n    public function pushProposals($uuid)\n    {\n        $message= \"\";\n        $success = true;\n        $counter = 0;\n        if (!$this->userRole['perm_sync'] || !$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('You do not have the permission to do that.'));\n        }\n        if ($this->request->is('post')) {\n            $event = $this->Event->find('first', array(\n                    'conditions' => array('Event.uuid' => $uuid),\n                    'contains' => array('ShadowAttribute', 'Attribute' => array(\n                        'fields' => array('id', 'uuid', 'event_id'),\n                    )),\n                    'fields' => array('Event.uuid', 'Event.id'),\n            ));\n            if (empty($event)) {\n                $message = \"Event not found.\";\n                $success = false;\n            } else {\n                foreach ($this->request->data as $k => $sa) {\n                    if (isset($event['ShadowAttribute'])) {\n                        foreach ($event['ShadowAttribute'] as $oldk => $oldsa) {\n                            $temp = json_encode($oldsa);\n                            if ($sa['event_uuid'] == $oldsa['event_uuid'] && $sa['value'] == $oldsa['value'] && $sa['type'] == $oldsa['type'] && $sa['category'] == $oldsa['category'] && $sa['to_ids'] == $oldsa['to_ids']) {\n                                if ($oldsa['timestamp'] < $sa['timestamp']) {\n                                    $this->Event->ShadowAttribute->delete($oldsa['id']);\n                                } else {\n                                    continue 2;\n                                }\n                            }\n                        }\n                    }\n                    $sa['event_id'] = $event['Event']['id'];\n                    if ($sa['old_id'] != 0) {\n                        foreach ($event['Attribute'] as $attribute) {\n                            if ($sa['uuid'] == $attribute['uuid']) {\n                                $sa['old_id'] = $attribute['id'];\n                            }\n                        }\n                    }\n                    if (isset($sa['id'])) {\n                        unset($sa['id']);\n                    }\n                    $this->Event->ShadowAttribute->create();\n                    if (!$this->Event->ShadowAttribute->save(array('ShadowAttribute' => $sa))) {\n                        $message = \"Some of the proposals could not be saved.\";\n                        $success = false;\n                    } else {\n                        $counter++;\n                    }\n                    if (!$sa['deleted']) {\n                        $this->Event->ShadowAttribute->__sendProposalAlertEmail($event['Event']['id']);\n                    }\n                }\n            }\n            if ($success) {\n                if ($counter) {\n                    $message = $counter . \" Proposal(s) added.\";\n                } else {\n                    $message = \"Nothing to update.\";\n                }\n            }\n            $this->set('data', array('success' => $success, 'message' => $message, 'counter' => $counter));\n            $this->set('_serialize', 'data');\n        }\n    }\n\n    public function exportChoice($id)\n    {\n        if (!is_numeric($id)) {\n            throw new MethodNotAllowedException(__('Invalid ID'));\n        }\n        $event = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n        if (empty($event)) {\n            throw new NotFoundException(__('Event not found or you are not authorised to view it.'));\n        }\n        $event = $event[0];\n        // #TODO i18n\n        $exports = array(\n            'xml' => array(\n                    'url' => '/events/restSearch/xml/eventid:' . $id . '.xml',\n                    'text' => 'MISP XML (metadata + all attributes)',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Encode Attachments',\n                    'checkbox_set' => '/events/restSearch/xml/eventid:' . $id . '/withAttachments:1.xml',\n                    'checkbox_default' => true\n            ),\n            'json' => array(\n                    'url' => '/events/restSearch/json/eventid:' . $id . '.json',\n                    'text' => 'MISP JSON (metadata + all attributes)',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Encode Attachments',\n                    'checkbox_set' => '/events/restSearch/json/withAttachments:1/eventid:' . $id . '.json',\n                    'checkbox_default' => true\n            ),\n            'openIOC' => array(\n                    'url' => '/events/restSearch/openioc/to_ids:1/published:1/eventid:' . $id . '.json',\n                    'text' => 'OpenIOC (all indicators marked to IDS)',\n                    'requiresPublished' => false,\n                    'checkbox' => false,\n            ),\n            'csv' => array(\n                    'url' => '/events/restSearch/returnFormat:csv/to_ids:1/published:1/includeContext:0/eventid:' . $id,\n                    'text' => 'CSV',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Include non-IDS marked attributes',\n                    'checkbox_set' => '/events/restSearch/returnFormat:csv/to_ids:1||0/published:1||0/includeContext:0/eventid:' . $id\n            ),\n            'csv_with_context' => array(\n                    'url' => '/events/restSearch/returnFormat:csv/to_ids:1/published:1/includeContext:1/eventid:' . $id,\n                    'text' => 'CSV with additional context',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Include non-IDS marked attributes',\n                    'checkbox_set' => '/events/restSearch/returnFormat:csv/to_ids:1||0/published:1||0/includeContext:1/eventid:' . $id\n            ),\n            'stix_xml' => array(\n                    'url' => '/events/restSearch/stix/eventid:' . $id,\n                    'text' => 'STIX XML (metadata + all attributes)',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Encode Attachments',\n                    'checkbox_set' => '/events/restSearch/stix/eventid:' . $id . '/withAttachments:1'\n            ),\n            'stix_json' => array(\n                    'url' => '/events/restSearch/stix-json/eventid:' . $id,\n                    'text' => 'STIX JSON (metadata + all attributes)',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Encode Attachments',\n                    'checkbox_set' => '/events/restSearch/stix-json/withAttachments:1/eventid:' . $id\n            ),\n            'stix2_json' => array(\n                    'url' => '/events/restSearch/stix2/eventid:' . $id,\n                    'text' => 'STIX2 (requires the STIX 2 library)',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Encode Attachments',\n                    'checkbox_set' => '/events/restSearch/stix2/eventid:' . $id . '/withAttachments:1'\n            ),\n            'rpz' => array(\n                    'url' => '/attributes/restSearch/returnFormat:rpz/published:1||0/eventid:' . $id,\n                    'text' => 'RPZ Zone file',\n                    'requiresPublished' => false,\n                    'checkbox' => false,\n            ),\n            'suricata' => array(\n                    'url' => '/events/restSearch/returnFormat:suricata/published:1||0/eventid:' . $id,\n                    'text' => 'Download Suricata rules',\n                    'requiresPublished' => false,\n                    'checkbox' => false,\n            ),\n            'snort' => array(\n                    'url' => '/events/restSearch/returnFormat:snort/published:1||0/eventid:' . $id,\n                    'text' => 'Download Snort rules',\n                    'requiresPublished' => false,\n                    'checkbox' => false,\n            ),\n            'bro' => array(\n                    'url' => '/attributes/bro/download/all/false/' . $id,\n                    // 'url' => '/attributes/restSearch/returnFormat:bro/published:1||0/eventid:' . $id,\n                    'text' => 'Download Bro rules',\n                    'requiresPublished' => false,\n                    'checkbox' => false\n            ),\n            'text' => array(\n                    'text' => 'Export all attribute values as a text file',\n                    'url' => '/attributes/restSearch/returnFormat:text/published:1||0/eventid:' . $id,\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Include non-IDS marked attributes',\n                    'checkbox_set' => '/attributes/restSearch/returnFormat:text/published:1||0/to_ids:1||0/eventid:' . $id\n            ),\n        );\n        if ($event['Event']['published'] == 0) {\n            foreach ($exports as $k => $export) {\n                if ($export['requiresPublished']) {\n                    unset($exports[$k]);\n                }\n            }\n            $exports['csv'] = array(\n                'url' => '/events/restSearch/returnFormat:csv/includeContext:0/eventid:' . $id,\n                'text' => 'CSV (event not published, IDS flag ignored)',\n                'requiresPublished' => false,\n                'checkbox' => false\n            );\n        }\n        $this->loadModel('Module');\n        $modules = $this->Module->getEnabledModules($this->Auth->user(), false, 'Export');\n        if (is_array($modules) && !empty($modules)) {\n            foreach ($modules['modules'] as $module) {\n                $exports[$module['name']] = array(\n                        'url' => '/events/exportModule/' . $module['name'] . '/' . $id,\n                        'text' => Inflector::humanize($module['name']),\n                        'requiresPublished' => true,\n                        'checkbox' => false,\n                );\n            }\n        }\n        $this->set('exports', $exports);\n        $this->set('id', $id);\n        $this->render('ajax/exportChoice');\n    }\n\n    public function importChoice($id = false, $scope = 'event')\n    {\n        if ($scope == 'event') {\n            if (!is_numeric($id)) {\n                throw new MethodNotAllowedException(__('Invalid ID'));\n            }\n            $event = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n            if (empty($event)) {\n                throw new NotFoundException(__('Event not found or you are not authorised to view it.'));\n            }\n            $event = $event[0];\n            $imports = array(\n                    'freetext' => array(\n                            'url' => '/events/freeTextImport/' . $id,\n                            'text' => __('Freetext Import'),\n                            'ajax' => true,\n                            'target' => 'popover_form'\n                    ),\n                    'template' => array(\n                            'url' => '/templates/templateChoices/' . $id,\n                            'text' => __('Populate using a Template'),\n                            'ajax' => true,\n                            'target' => 'popover_form'\n                    ),\n                    'OpenIOC' => array(\n                            'url' => '/events/addIOC/' . $id,\n                            'text' => __('OpenIOC Import'),\n                            'ajax' => false,\n                    ),\n                    'ThreatConnect' => array(\n                            'url' => '/attributes/add_threatconnect/' . $id,\n                            'text' => __('ThreatConnect Import'),\n                            'ajax' => false\n                    ),\n                    'Forensic analysis' => array(\n                        'url' => '/events/upload_analysis_file/'.$id,\n                        'text' => __('(Experimental) Forensic analysis - Mactime'),\n                        'ajax' => false,\n                )\n            );\n            $this->loadModel('Module');\n            $modules = $this->Module->getEnabledModules($this->Auth->user(), false, 'Import');\n            if (is_array($modules) && !empty($modules)) {\n                foreach ($modules['modules'] as $k => $module) {\n                    $imports[$module['name']] = array(\n                            'url' => '/events/importModule/' . $module['name'] . '/' . $id,\n                            'text' => Inflector::humanize($module['name']),\n                            'ajax' => false\n                    );\n                }\n            }\n        } else {\n            $imports = array(\n                'MISP' => array(\n                        'url' => '/events/add_misp_export',\n                        'text' => __('MISP standard (recommended exchange format - lossless)'),\n                        'ajax' => false,\n                        'bold' => true\n                ),\n                'STIX' => array(\n                        'url' => '/events/upload_stix',\n                        'text' => __('STIX 1.1.1 format (lossy)'),\n                        'ajax' => false,\n                ),\n                'STIX2' => array(\n                        'url' => '/events/upload_stix/2',\n                        'text' => __('STIX 2.0 format (lossy)'),\n                        'ajax' => false,\n                )\n            );\n        }\n        $this->set('imports', $imports);\n        $this->set('id', $id);\n        $this->render('ajax/importChoice');\n    }\n\n    // API for pushing samples to MISP\n    // Either send it to an existing event, or let MISP create a new one automatically\n    public function upload_sample($event_id = null, $advanced = false)\n    {\n        $this->loadModel('Log');\n        $hashes = array('md5' => 'malware-sample', 'sha1' => 'filename|sha1', 'sha256' => 'filename|sha256');\n        $categoryDefinitions = $this->Event->Attribute->categoryDefinitions;\n        $categories = array();\n        foreach ($categoryDefinitions as $k => $v) {\n            if (in_array('malware-sample', $v['types']) && !in_array($k, $categories)) {\n                $categories[] = $k;\n            }\n        }\n        $default_distribution = !empty(Configure::read('MISP.default_attribute_distribution')) ? Configure::read('MISP.default_attribute_distribution') : 5;\n        if ($default_distribution == 'event') {\n            $default_distribution = 5;\n        }\n        // #TODO i18n\n        $parameter_options = array(\n                'distribution' => array('valid_options' => array(0, 1, 2, 3, 5), 'default' => $default_distribution),\n                'threat_level_id' => array('valid_options' => array(1, 2, 3, 4), 'default' => 4),\n                'analysis' => array('valid_options' => array(0, 1, 2), 'default' => 0),\n                'info' => array('default' =>  'Malware samples uploaded on ' . date('Y-m-d')),\n                'to_ids' => array('valid_options' => array(0, 1), 'default' => 1),\n                'category' => array('valid_options' => $categories, 'default' => 'Payload installation'),\n                'comment' => array('default' => '')\n        );\n\n        if (!$this->userRole['perm_auth']) {\n            throw new MethodNotAllowedException(__('This functionality requires API key access.'));\n        }\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('Please POST the samples as described on the automation page.'));\n        }\n        if ($this->response->type() === 'application/json') {\n            $data = $this->request->input('json_decode', true);\n        } elseif ($this->response->type() === 'application/xml') {\n            $data = $this->request->data;\n        } else {\n            throw new BadRequestException(__('Please POST the samples as described on the automation page.'));\n        }\n\n        if (isset($data['request'])) {\n            $data = $data['request'];\n        }\n        foreach ($parameter_options as $k => $v) {\n            if (isset($data[$k])) {\n                if (isset($v['valid_options']) && !in_array($data[$k], $v['valid_options'])) {\n                    $data['settings'][$k] = $v['default'];\n                } else {\n                    $data['settings'][$k] = $data[$k];\n                }\n                unset($data[$k]);\n            } else {\n                $data['settings'][$k] = $v['default'];\n            }\n        }\n        if (isset($data['files'])) {\n            foreach ($data['files'] as $k => $file) {\n                if (!isset($file['filename']) || !isset($file['data'])) {\n                    unset($data['files'][$k]);\n                } else {\n                    $data['files'][$k]['md5'] = md5(base64_decode($file['data']));\n                }\n            }\n        }\n\n        if (empty($data['files'])) {\n            throw new BadRequestException(__('No samples received, or samples not in the correct format. Please refer to the API documentation on the automation page.'));\n        }\n        if (isset($event_id)) {\n            $data['settings']['event_id'] = $event_id;\n        }\n        if (isset($data['settings']['event_id'])) {\n            $this->Event->id = $data['settings']['event_id'];\n            if (!$this->Event->exists()) {\n                throw new NotFoundException(__('Event not found'));\n            }\n        }\n        if (isset($data['advanced'])) {\n            $advanced = $data['advanced'];\n        }\n\n        // check if the user has permission to create attributes for an event, if the event ID has been passed\n        // If not, create an event\n        if (isset($data['settings']['event_id']) && !empty($data['settings']['event_id']) && is_numeric($data['settings']['event_id'])) {\n            $conditions = array('Event.id' => $data['settings']['event_id']);\n            if (!$this->_isSiteAdmin()) {\n                $conditions[] = array('Event.orgc_id' => $this->Auth->user('org_id'));\n                if (!$this->userRole['perm_modify_org']) {\n                    $conditions[] = array('Event.user_id' => $this->Auth->user('id'));\n                }\n            }\n            $event = $this->Event->find('first', array(\n                'recursive' => -1,\n                'conditions' => $conditions,\n                'fields' => array('id'),\n            ));\n            if (empty($event)) {\n                throw new NotFoundException(__('Event not found.'));\n            }\n            $this->Event->insertLock($this->Auth->user(), $event['Event']['id']);\n            $this->Event->id = $data['settings']['event_id'];\n            $date = new DateTime();\n            $this->Event->saveField('timestamp', $date->getTimestamp());\n            $this->Event->saveField('published', 0);\n        } else {\n            $this->Event->create();\n            if ($data['settings']['distribution'] == 5) {\n                throw new BadRequestException(__('Distribution level 5 is not supported when uploading a sample without passing an event ID. Distribution level 5 is meant to take on the distribution level of an existing event.'));\n            }\n            $result = $this->Event->save(\n                array(\n                    'info' => $data['settings']['info'],\n                    'analysis' => $data['settings']['analysis'],\n                    'threat_level_id' => $data['settings']['threat_level_id'],\n                    'distribution' => $data['settings']['distribution'],\n                    'date' => date('Y-m-d'),\n                    'orgc_id' => $this->Auth->user('org_id'),\n                    'org_id' => $this->Auth->user('org_id'),\n                    'user_id' => $this->Auth->user('id'),\n                )\n            );\n            if (!$result) {\n                $this->Log->save(array(\n                        'org' => $this->Auth->user('Organisation')['name'],\n                        'model' => 'Event',\n                        'model_id' => 0,\n                        'email' => $this->Auth->user('email'),\n                        'action' => 'upload_sample',\n                        'user_id' => $this->Auth->user('id'),\n                        'title' => 'Error: Failed to create event using the upload sample functionality',\n                        'change' => 'There was an issue creating an event (' . $data['settings']['info'] . '). The validation errors were: ' . json_encode($this->Event->validationErrors),\n                ));\n                throw new BadRequestException(__('The creation of a new event with the supplied information has failed.'));\n            }\n            $data['settings']['event_id'] = $this->Event->id;\n            $event_id = $this->Event->id;\n        }\n\n        if (!isset($data['settings']['to_ids']) || !in_array($data['settings']['to_ids'], array('0', '1', 0, 1))) {\n            $data['settings']['to_ids'] = 1;\n        }\n        $successCount = 0;\n        $errors = array();\n        App::uses('FileAccessTool', 'Tools');\n        $fileAccessTool = new FileAccessTool();\n        foreach ($data['files'] as $file) {\n            $tmpdir = Configure::read('MISP.tmpdir') ? Configure::read('MISP.tmpdir') : APP . 'tmp';\n            $tmpfile = $fileAccessTool->createTempFile($tmpdir, $prefix = 'MISP_upload');\n            $fileAccessTool->writeToFile($tmpfile, base64_decode($file['data']));\n            $tmpfile = new File($tmpfile);\n            if ($advanced) {\n                $result = $this->Event->Attribute->advancedAddMalwareSample(\n                    $event_id,\n                    $data['settings'],\n                    $file['filename'],\n                    $tmpfile\n                );\n                if ($result) {\n                    $successCount++;\n                } else {\n                    $errors[] = $file['filename'];\n                }\n            } else {\n                $result = $this->Event->Attribute->simpleAddMalwareSample(\n                    $event_id,\n                    $data['settings'],\n                    $file['filename'],\n                    $tmpfile\n                );\n                if ($result) {\n                    $successCount++;\n                } else {\n                    $errors[] = $file['filename'];\n                }\n            }\n            if (!empty($result)) {\n                foreach ($result['Object'] as $object) {\n                    if (isset($data['settings']['distribution'])) {\n                        $object['distribution'] = $data['settings']['distribution'];\n                    }\n                    $object['sharing_group_id'] = isset($data['settings']['sharing_group_id']) ? $data['settings']['sharing_group_id'] : 0;\n                    if (!empty($object['Attribute'])) {\n                        foreach ($object['Attribute'] as $k => $attribute) {\n                            if ($attribute['value'] == $tmpfile->name) {\n                                $object['Attribute'][$k]['value'] = $file['filename'];\n                            }\n                            if (isset($data['settings']['distribution'])) {\n                                $object['Attribute'][$k]['distribution'] = $data['settings']['distribution'];\n                            }\n                            $object['Attribute'][$k]['sharing_group_id'] = isset($data['settings']['sharing_group_id']) ? $data['settings']['sharing_group_id'] : 0;\n                        }\n                    }\n                    $this->loadModel('MispObject');\n                    $this->MispObject->captureObject(array('Object' => $object), $event_id, $this->Auth->user());\n                }\n                if (!empty($result['ObjectReference'])) {\n                    foreach ($result['ObjectReference'] as $reference) {\n                        $this->MispObject->ObjectReference->smartSave($reference, $event_id);\n                    }\n                }\n            }\n            $fileAccessTool->deleteFile($tmpfile->path);\n        }\n        if (!empty($errors)) {\n            $this->set('errors', $errors);\n            if ($successCount > 0) {\n                $this->set('name', 'Partial success');\n                $this->set('message', 'Successfuly saved ' . $successCount . ' sample(s), but some samples could not be saved.');\n                $this->set('url', '/events/view/' . $data['settings']['event_id']);\n                $this->set('id', $data['settings']['event_id']);\n                $this->set('_serialize', array('name', 'message', 'url', 'id', 'errors'));\n            } else {\n                $this->set('name', 'Failed');\n                $this->set('message', 'Failed to save any of the supplied samples.');\n                $this->set('_serialize', array('name', 'message', 'errors'));\n            }\n        } else {\n            $this->set('name', 'Success');\n            $this->set('message', 'Success, saved all attributes.');\n            $this->set('url', '/events/view/' . $data['settings']['event_id']);\n            $this->set('id', $data['settings']['event_id']);\n            $this->set('_serialize', array('name', 'message', 'url', 'id'));\n        }\n        $this->view($data['settings']['event_id']);\n        $this->render('view');\n    }\n\n    public function viewGraph($id)\n    {\n        $event = $this->Event->fetchEvent($this->Auth->user(), array(\n            'eventid' => $id,\n            'includeGranularCorrelations' => 1\n        ));\n        if (empty($event)) {\n            throw new MethodNotAllowedException(__('Invalid Event.'));\n        }\n\n        $this->set('event', $event[0]);\n        $this->set('scope', 'event');\n        $this->set('id', $id);\n    }\n\n    public function viewEventGraph()\n    {\n        $event = $this->Event->fetchEvent($this->Auth->user(), array(\n            'eventid' => $id\n        ));\n        if (empty($event)) {\n            throw new MethodNotAllowedException(__('Invalid Event.'));\n        }\n        $this->set('event', $event[0]);\n        $this->set('scope', 'event');\n        $this->set('id', $id);\n    }\n\n\n\n    /*\n        public function deleteNode($id) {\n            if (!$this->request->is('post')) throw new MethodNotAllowedException(__('Only POST requests are allowed.'));\n            App::uses('CorrelationGraphTool', 'Tools');\n            $grapher = new CorrelationGraphTool();\n            $grapher->construct($this->Event, $this->Taxonomy, $this->GalaxyCluster, $this->Auth->user(), $this->request->data);\n            $json = $grapher->deleteNode($id);\n        }\n    */\n\n    public function updateGraph($id, $type = 'event')\n    {\n        $validTools = array('event', 'galaxy', 'tag');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        $this->loadModel('Taxonomy');\n        $this->loadModel('GalaxyCluster');\n        App::uses('CorrelationGraphTool', 'Tools');\n        $grapher = new CorrelationGraphTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n        $grapher->construct($this->Event, $this->Taxonomy, $this->GalaxyCluster, $this->Auth->user(), $data);\n        $json = $grapher->buildGraphJson($id, $type);\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    private function genDistributionGraph($id, $type = 'event', $extended = 0) {\n        $validTools = array('event');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        $this->loadModel('Server');\n        $this->loadModel('Organisation');\n        App::uses('DistributionGraphTool', 'Tools');\n        $grapher = new DistributionGraphTool();\n\n        $servers = $this->Server->find('list', array(\n            'fields' => array('name'),\n        ));\n        $grapher->construct($this->Event, $servers, $this->Auth->user(), $extended);\n        $json = $grapher->get_distributions_graph($id);\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        return $json;\n    }\n\n    public function getEventTimeline($id, $type = 'event')\n    {\n        $validTools = array('event');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException('Invalid type.');\n        }\n        App::uses('EventTimelineTool', 'Tools');\n        $grapher = new EventTimelineTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n        $dataFiltering = array_key_exists('filtering', $data) ? $data['filtering'] : array();\n        $scope = isset($data['scope']) ? $data['scope'] : 'seen';\n\n        $extended = isset($this->params['named']['extended']) ? 1 : 0;\n\n        $grapher->construct($this->Event, $this->Auth->user(), $dataFiltering, $extended);\n        if ($scope == 'seen') {\n            $json = $grapher->get_timeline($id);\n        } elseif ($scope == 'sightings') {\n            $json = $grapher->get_sighting_timeline($id);\n        }\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getDistributionGraph($id, $type = 'event')\n    {\n        $extended = isset($this->params['named']['extended']) ? 1 : 0;\n        $json = $this->genDistributionGraph($id, $type, $extended);\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getEventGraphReferences($id, $type = 'event')\n    {\n        $validTools = array('event');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        $this->loadModel('Tag');\n        App::uses('EventGraphTool', 'Tools');\n        $grapher = new EventGraphTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n\n        $extended = isset($this->params['named']['extended']) ? 1 : 0;\n\n        $grapher->construct($this->Event, $this->Tag, $this->Auth->user(), $data['filtering'], $extended);\n        $json = $grapher->get_references($id);\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getEventGraphTags($id, $type = 'event')\n    {\n        $validTools = array('event');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        $this->loadModel('Tag');\n        App::uses('EventGraphTool', 'Tools');\n        $grapher = new EventGraphTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n\n        $extended = isset($this->params['named']['extended']) ? 1 : 0;\n\n        $grapher->construct($this->Event, $this->Tag, $this->Auth->user(), $data['filtering'], $extended);\n        $json = $grapher->get_tags($id);\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getEventGraphGeneric($id, $type = 'event')\n    {\n        $validTools = array('event');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        $this->loadModel('Tag');\n        App::uses('EventGraphTool', 'Tools');\n        $grapher = new EventGraphTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n\n        $extended = isset($this->params['named']['extended']) ? 1 : 0;\n\n        $grapher->construct($this->Event, $this->Tag, $this->Auth->user(), $data['filtering'], $extended);\n        if (!array_key_exists('keyType', $data)) {\n            $keyType = ''; // empty key\n        } else {\n            $keyType = $data['keyType'];\n        }\n        $json = $grapher->get_generic_from_key($id, $keyType);\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getReferenceData($uuid, $type = 'reference')\n    {\n        $validTools = array('reference');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        App::uses('EventGraphTool', 'Tools');\n        $grapher = new EventGraphTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n        $grapher->construct_for_ref($this->Event->Object, $this->Auth->user());\n        $json = $grapher->get_reference_data($uuid);\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getObjectTemplate($type = 'templates')\n    {\n        $validTools = array('templates');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        App::uses('EventGraphTool', 'Tools');\n        $eventGraphTool = new EventGraphTool();\n\n        $data = $this->request->is('post') ? $this->request->data : array();\n        $eventGraphTool->construct_for_ref($this->Event->Object, $this->Auth->user());\n        $json = $eventGraphTool->get_object_templates();\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function viewGalaxyMatrix($scope_id, $galaxy_id, $scope='event', $disable_picking=false)\n    {\n        $local = !empty($this->params['named']['local']);\n        $this->set('local', $local);\n        $this->loadModel('Galaxy');\n        $mitreAttackGalaxyId = $this->Galaxy->getMitreAttackGalaxyId();\n        $matrixData = $this->Galaxy->getMatrix($galaxy_id);\n\n        $tabs = $matrixData['tabs'];\n        $matrixTags = $matrixData['matrixTags'];\n        $killChainOrders = $matrixData['killChain'];\n        $instanceUUID = $matrixData['instance-uuid'];\n\n        if ($scope == 'event') {\n            $eventId = $scope_id;\n        } elseif ($scope == 'attribute') {\n            $attribute = $this->Event->Attribute->fetchAttributes($this->Auth->user(), array(\n                'conditions' => array('Attribute.id' => $scope_id),\n                'fields' => array('event_id'),\n                'flatten' => 1,\n            ));\n            if (empty($attribute)) {\n                throw new Exception(\"Invalid Attribute.\");\n            }\n            $attribute = $attribute[0];\n            $eventId = $attribute['Attribute']['event_id'];\n        } elseif ($scope == 'tag_collection') {\n            $eventId = 0; // no event_id for tag_collection, consider all events\n        } else {\n            throw new Exception(\"Invalid options.\");\n        }\n\n        if ($scope !== 'tag_collection') {\n            $event = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $eventId, 'metadata' => true));\n            if (empty($event)) {\n                throw new NotFoundException(__('Event not found or you are not authorised to view it.'));\n            }\n            $scoresDataAttr = $this->Event->Attribute->AttributeTag->getTagScores($this->Auth->user(), $eventId, $matrixTags);\n            $scoresDataEvent = $this->Event->EventTag->getTagScores($eventId, $matrixTags);\n            $maxScore = 0;\n            $scoresData = array();\n            foreach (array_keys($scoresDataAttr['scores'] + $scoresDataEvent['scores']) as $key) {\n                $sum = (isset($scoresDataAttr['scores'][$key]) ? $scoresDataAttr['scores'][$key] : 0) + (isset($scoresDataEvent['scores'][$key]) ? $scoresDataEvent['scores'][$key] : 0);\n                $scoresData[$key] = $sum;\n                $maxScore = max($maxScore, $sum);\n            }\n            $scores = $scoresData;\n        } else {\n            $scores = $scoresData = array();\n        }\n        // FIXME: temporary fix: add the score of deprecated mitre galaxies to the new one (for the stats)\n        if ($matrixData['galaxy']['id'] == $mitreAttackGalaxyId) {\n            $mergedScore = array();\n            foreach ($scoresData as $tag => $v) {\n                $predicateValue = explode(':', $tag, 2)[1];\n                $predicateValue = explode('=', $predicateValue, 2);\n                $predicate = $predicateValue[0];\n                $clusterValue = $predicateValue[1];\n                $mappedTag = '';\n                $mappingWithoutExternalId = array();\n                if ($predicate == 'mitre-attack-pattern') {\n                    $mappedTag = $tag;\n                    $name = explode(\" \", $tag);\n                    $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                    $mappingWithoutExternalId[$name] = $tag;\n                } else {\n                    $name = explode(\" \", $clusterValue);\n                    $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                    if (isset($mappingWithoutExternalId[$name])) {\n                        $mappedTag = $mappingWithoutExternalId[$name];\n                    } else {\n                        $adjustedTagName = $this->Galaxy->GalaxyCluster->find('list', array(\n                            'group' => array('GalaxyCluster.id', 'GalaxyCluster.tag_name'),\n                            'conditions' => array('GalaxyCluster.tag_name LIKE' => 'misp-galaxy:mitre-attack-pattern=' . $name . '% T%'),\n                            'fields' => array('GalaxyCluster.tag_name')\n                        ));\n                        $adjustedTagName = array_values($adjustedTagName)[0];\n                        $mappingWithoutExternalId[$name] = $adjustedTagName;\n                        $mappedTag = $mappingWithoutExternalId[$name];\n                    }\n                }\n\n                if (isset($mergedScore[$mappedTag])) {\n                    $mergedScore[$mappedTag] += $v;\n                } else {\n                    $mergedScore[$mappedTag] = $v;\n                }\n            }\n            $scores = $mergedScore;\n            $maxScore = !empty($mergedScore) ? max(array_values($mergedScore)) : 0;\n        }\n        // end FIXME\n\n        $this->Galaxy->sortMatrixByScore($tabs, $scores);\n        if ($this->_isRest()) {\n            $json = array('matrix' => $tabs, 'scores' => $scores, 'instance-uuid' => $instanceUUID);\n            $this->response->type('json');\n            return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n        } else {\n            if (!$this->request->is('ajax')) {\n                throw new MethodNotAllowedException(__('Invalid method.'));\n            }\n\n            App::uses('ColourGradientTool', 'Tools');\n            $gradientTool = new ColourGradientTool();\n            $colours = $gradientTool->createGradientFromValues($scores);\n            $this->set('eventId', $eventId);\n            $this->set('target_type', $scope);\n            $this->set('columnOrders', $killChainOrders);\n            $this->set('tabs', $tabs);\n            $this->set('scores', $scores);\n            $this->set('maxScore', $maxScore);\n            if (!empty($colours)) {\n                $this->set('colours', $colours['mapping']);\n                $this->set('interpolation', $colours['interpolation']);\n            }\n            $this->set('pickingMode', !$disable_picking);\n            $this->set('target_id', $scope_id);\n            if ($matrixData['galaxy']['id'] == $mitreAttackGalaxyId) {\n                $this->set('defaultTabName', 'mitre-attack');\n                $this->set('removeTrailling', 2);\n            }\n\n            $this->render('/Elements/view_galaxy_matrix');\n        }\n    }\n\n    public function delegation_index()\n    {\n        $this->loadModel('EventDelegation');\n        $delegatedEvents = $this->EventDelegation->find('list', array(\n                'conditions' => array('EventDelegation.org_id' => $this->Auth->user('org_id')),\n                'fields' => array('event_id')\n        ));\n        $this->Event->contain(array('User.email', 'EventTag' => array('Tag')));\n        $tags = $this->Event->EventTag->Tag->find('all', array('recursive' => -1));\n        $tagNames = array('None');\n        foreach ($tags as $k => $v) {\n            $tagNames[$v['Tag']['id']] = $v['Tag']['name'];\n        }\n        $this->set('tags', $tagNames);\n        $this->paginate = array(\n            'limit' => 60,\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events <- no we won't, this is the max a user van view/page.\n            'order' => array(\n                    'Event.timestamp' => 'DESC'\n            ),\n            'contain' => array(\n                    'Org' => array('fields' => array('id', 'name')),\n                    'Orgc' => array('fields' => array('id', 'name')),\n                    'SharingGroup' => array('fields' => array('id', 'name')),\n                    'ThreatLevel' => array('fields' => array('ThreatLevel.name'))\n\n            ),\n            'conditions' => array('Event.id' => $delegatedEvents),\n        );\n\n        $this->set('events', $this->paginate());\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('analysisLevels', $this->Event->analysisLevels);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n\n        $shortDist = array(0 => 'Organisation', 1 => 'Community', 2 => 'Connected', 3 => 'All', 4 => ' sharing Group');\n        $this->set('shortDist', $shortDist);\n        $this->set('ajax', false);\n        $this->set('simple', true);\n        $this->Event->contain(array('User.email', 'EventTag' => array('Tag')));\n        $tags = $this->Event->EventTag->Tag->find('all', array('recursive' => -1));\n        $tagNames = array('None');\n        foreach ($tags as $k => $v) {\n            $tagNames[$v['Tag']['id']] = $v['Tag']['name'];\n        }\n        $this->set('tags', $tagNames);\n        $this->render('index');\n    }\n\n    // expects an attribute ID and the module to be used\n    public function queryEnrichment($attribute_id, $module = false, $type = 'Enrichment')\n    {\n        if (!Configure::read('Plugin.' . $type . '_services_enable')) {\n            throw new MethodNotAllowedException(__('%s services are not enabled.', $type));\n        }\n        $attribute = $this->Event->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $attribute_id), 'flatten' => 1));\n        if (empty($attribute)) {\n            throw new MethodNotAllowedException(__('Attribute not found or you are not authorised to see it.'));\n        }\n        $this->loadModel('Module');\n        $enabledModules = $this->Module->getEnabledModules($this->Auth->user(), false, $type);\n        if (!is_array($enabledModules) || empty($enabledModules)) {\n            throw new MethodNotAllowedException(__('No valid %s options found for this attribute.', $type));\n        }\n        if ($this->request->is('ajax')) {\n            $modules = array();\n            foreach ($enabledModules['modules'] as $module) {\n                if (in_array($attribute[0]['Attribute']['type'], $module['mispattributes']['input'])) {\n                    $modules[] = array('name' => $module['name'], 'description' => $module['meta']['description']);\n                }\n            }\n            foreach (array('attribute_id', 'modules') as $viewVar) {\n                $this->set($viewVar, $$viewVar);\n            }\n            $this->set('type', $type);\n            $this->render('ajax/enrichmentChoice');\n        } else {\n            $options = array();\n            foreach ($enabledModules['modules'] as $temp) {\n                if ($temp['name'] == $module) {\n                    $format = (!empty($temp['mispattributes']['format']) ? $temp['mispattributes']['format'] : 'simplified');\n                    if (isset($temp['meta']['config'])) {\n                        foreach ($temp['meta']['config'] as $conf) {\n                            $options[$conf] = Configure::read('Plugin.' . $type . '_' . $module . '_' . $conf);\n                        }\n                    }\n                    break;\n                }\n            }\n            $distributions = $this->Event->Attribute->distributionLevels;\n            $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n            if (empty($sgs)) {\n                unset($distributions[4]);\n            }\n            $this->set('distributions', $distributions);\n            $this->set('sgs', $sgs);\n            if ($format == 'misp_standard') {\n                $this->__queryEnrichment($attribute, $module, $options, $type);\n            } else {\n                $this->__queryOldEnrichment($attribute, $module, $options, $type);\n            }\n        }\n    }\n\n    private function __queryEnrichment($attribute, $module, $options, $type)\n    {\n        if ($this->Event->Attribute->typeIsAttachment($attribute[0]['Attribute']['type'])) {\n            $attribute[0]['Attribute']['data'] = $this->Event->Attribute->base64EncodeAttachment($attribute[0]['Attribute']);\n        }\n        $event_id = $attribute[0]['Event']['id'];\n        $data = array('module' => $module, 'attribute' => $attribute[0]['Attribute'], 'event_id' => $event_id);\n        if (!empty($options)) {\n            $data['config'] = $options;\n        }\n        $data = json_encode($data);\n        $result = $this->Module->queryModuleServer('/query', $data, false, $type);\n        if (!$result) {\n            throw new MethodNotAllowedException(__('%s service not reachable.', $type));\n        }\n        if (isset($result['error'])) {\n            $this->Flash->error($result['error']);\n        }\n        if (!is_array($result)) {\n            throw new Exception($result);\n        }\n        $event = $this->Event->handleMispFormatFromModuleResult($result);\n        if (empty($event['Attribute']) && empty($event['Object'])) {\n            $this->__handleSimplifiedFormat($attribute, $module, $options, $result, $type);\n        } else {\n            $importComment = !empty($result['comment']) ? $result['comment'] : $attribute[0]['Attribute']['value'] . __(': Enriched via the ') . $module . ($type != 'Enrichment' ? ' ' . $type : '')  . ' module';\n            $this->set('importComment', $importComment);\n            $event['Event'] = $attribute[0]['Event'];\n            $org_name = $this->Event->Orgc->find('first', array(\n                'conditions' => array('Orgc.id' => $event['Event']['orgc_id']),\n                'fields' => array('Orgc.name')\n            ));\n            $event['Event']['orgc_name'] = $org_name['Orgc']['name'];\n            if ($attribute[0]['Object']['id']) {\n                $object_id = $attribute[0]['Object']['id'];\n                $initial_object = $this->Event->fetchInitialObject($event_id, $object_id);\n                if (!empty($initial_object)) {\n                    $event['initialObject'] = $initial_object;\n                }\n            }\n            $this->set('event', $event);\n            $this->set('menuItem', 'enrichmentResults');\n            $this->set('title', 'Enrichment Results');\n            $this->render('resolved_misp_format');\n        }\n    }\n\n    private function __queryOldEnrichment($attribute, $module, $options, $type)\n    {\n        $data = array('module' => $module, $attribute[0]['Attribute']['type'] => $attribute[0]['Attribute']['value'], 'event_id' => $attribute[0]['Attribute']['event_id'], 'attribute_uuid' => $attribute[0]['Attribute']['uuid']);\n        if ($this->Event->Attribute->typeIsAttachment($attribute[0]['Attribute']['type'])) {\n            $data['data'] = $this->Event->Attribute->base64EncodeAttachment($attribute[0]['Attribute']);\n        }\n        if (!empty($options)) {\n            $data['config'] = $options;\n        }\n        $data = json_encode($data);\n        $result = $this->Module->queryModuleServer('/query', $data, false, $type);\n        if (!$result) {\n            throw new MethodNotAllowedException(__('%s service not reachable.', $type));\n        }\n        if (isset($result['error'])) {\n            $this->Flash->error($result['error']);\n        }\n        if (!is_array($result)) {\n            throw new Exception($result);\n        }\n        $this->__handleSimplifiedFormat($attribute, $module, $options, $result, $type);\n    }\n\n    private function __handleSimplifiedFormat($attribute, $module, $options, $result, $type, $event = false)\n    {\n        $resultArray = $this->Event->handleModuleResult($result, $attribute[0]['Attribute']['event_id']);\n        if (!empty($result['comment'])) {\n            $importComment = $result['comment'];\n        } else {\n            $importComment = $attribute[0]['Attribute']['value'] . __(': Enriched via the %s', $module) . ($type != 'Enrichment' ? ' ' . $type : '')  . ' module';\n        }\n        $typeCategoryMapping = array();\n        foreach ($this->Event->Attribute->categoryDefinitions as $k => $cat) {\n            foreach ($cat['types'] as $type) {\n                $typeCategoryMapping[$type][$k] = $k;\n            }\n        }\n        foreach ($resultArray as $key => $result) {\n            if ($has_pipe = strpos($result['default_type'], '|') !== false || $result['default_type'] === 'malware-sample') {\n                $pieces = explode('|', $result['value']);\n                $or = array('Attribute.value1' => $pieces,\n                            'Attribute.value2' => $pieces);\n            } else {\n                $or = array('Attribute.value1' => $result['value'], 'Attribute.value2' => $result['value']);\n            }\n            $options = array(\n                'conditions' => array('OR' => $or),\n                'fields' => array('Attribute.type', 'Attribute.category', 'Attribute.value', 'Attribute.comment'),\n                'order' => false\n            );\n            $resultArray[$key]['related'] = $this->Event->Attribute->fetchAttributes($this->Auth->user(), $options);\n            if (isset($result['data'])) {\n                App::uses('FileAccessTool', 'Tools');\n                $fileAccessTool = new FileAccessTool();\n                $tmpdir = Configure::read('MISP.tmpdir') ? Configure::read('MISP.tmpdir') : '/tmp';\n                $tempFile = $fileAccessTool->createTempFile($tmpdir, $prefix = 'MISP');\n                $fileAccessTool->writeToFile($tempFile, $result['data']);\n                $resultArray[$key]['data'] = basename($tempFile) . '|' . filesize($tempFile);\n            }\n        }\n        $this->set('type', $type);\n        if (!$event){\n            $this->set('event', array('Event' => $attribute[0]['Event']));\n        }\n        $this->set('resultArray', $resultArray);\n        $this->set('typeList', array_keys($this->Event->Attribute->typeDefinitions));\n        $this->set('defaultCategories', $this->Event->Attribute->defaultCategories);\n        $this->set('typeCategoryMapping', $typeCategoryMapping);\n        $this->set('title', 'Enrichment Results');\n        $this->set('importComment', $importComment);\n        $this->render('resolved_attributes');\n    }\n\n    public function handleModuleResults($id)\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('Event not found or you don\\'t have permissions to create attributes'));\n        }\n        if ($this->request->is('post')) {\n            if (!$this->Event->checkIfAuthorised($this->Auth->user(), $id)) {\n                throw new MethodNotAllowedException(__('Invalid event.'));\n            }\n            $resolved_data = json_decode($this->request->data['Event']['JsonObject'], true);\n            $data = json_decode($this->request->data['Event']['data'], true);\n            if (!empty($data['initialObject'])) {\n                $resolved_data['initialObject'] = $data['initialObject'];\n            }\n            unset($data);\n            $default_comment = $this->request->data['Event']['default_comment'];\n            $flashMessage = $this->Event->processModuleResultsDataRouter($this->Auth->user(), $resolved_data, $id, $default_comment);\n            $this->Flash->info($flashMessage);\n            $this->redirect(array('controller' => 'events', 'action' => 'view', $id));\n        } else {\n            throw new MethodNotAllowedException('This endpoint requires a POST request.');\n        }\n    }\n\n    public function importModule($module, $eventId)\n    {\n        $this->loadModel('Module');\n        $moduleName = $module;\n        if (!$this->Event->checkIfAuthorised($this->Auth->user(), $eventId)) {\n            throw new MethodNotAllowedException(__('Invalid event.'));\n        }\n        $module = $this->Module->getEnabledModule($module, 'Import');\n        if (!is_array($module)) {\n            throw new MethodNotAllowedException($module);\n        }\n        if (!isset($module['mispattributes']['inputSource'])) {\n            $module['mispattributes']['inputSource'] = array('paste');\n        }\n        if ($this->request->is('post')) {\n            $fail = false;\n            $modulePayload = array(\n                    'module' => $module['name'],\n                    'event_id' => $eventId\n            );\n            if (isset($module['meta']['config'])) {\n                foreach ($module['meta']['config'] as $conf) {\n                    $modulePayload['config'][$conf] = Configure::read('Plugin.Import_' . $moduleName . '_' . $conf);\n                }\n            }\n            if ($moduleName === 'csvimport') {\n                if (empty($this->request->data['Event']['config']['header']) && $this->request->data['Event']['config']['has_header'] === '1') {\n                    $this->request->data['Event']['config']['header'] = ' ';\n                }\n                if (empty($this->request->data['Event']['config']['special_delimiter'])) {\n                    $this->request->data['Event']['config']['special_delimiter'] = ' ';\n                }\n            }\n            foreach ($module['mispattributes']['userConfig'] as $configName => $config) {\n                if (!$fail) {\n                    if (isset($config['validation'])) {\n                        if ($config['validation'] === '0' && $config['type'] == 'String') {\n                            $validation = true;\n                        }\n                    } else {\n                        $validation = call_user_func_array(array($this->Module, $this->Module->configTypes[$config['type']]['validation']), array($this->request->data['Event']['config'][$configName]));\n                    }\n                    if ($validation !== true) {\n                        $fail = ucfirst($configName) . ': ' . $validation;\n                    } else {\n                        if (isset($config['regex']) && !empty($config['regex'])) {\n                            $fail = preg_match($config['regex'], $this->request->data['Event']['config'][$configName]) ? false : ucfirst($configName) . ': ' . 'Invalid setting' . ($config['errorMessage'] ? ' - ' . $config['errorMessage'] : '');\n                            if (!empty($fail)) {\n                                $modulePayload['config'][$configName] = $this->request->data['Event']['config'][$configName];\n                            }\n                        } else {\n                            $modulePayload['config'][$configName] = $this->request->data['Event']['config'][$configName];\n                        }\n                    }\n                }\n            }\n            if (!$fail) {\n                if (!empty($module['mispattributes']['inputSource'])) {\n                    if (!isset($this->request->data['Event']['source'])) {\n                        if (in_array('paste', $module['mispattributes']['inputSource'])) {\n                            $this->request->data['Event']['source'] = '0';\n                        } else {\n                            $this->request->data['Event']['source'] = '1';\n                        }\n                    }\n                    if ($this->request->data['Event']['source'] == '1') {\n                        if (isset($this->request->data['Event']['data'])) {\n                            $modulePayload['data'] = base64_decode($this->request->data['Event']['data']);\n                        } elseif (!isset($this->request->data['Event']['fileupload']) || empty($this->request->data['Event']['fileupload'])) {\n                            $fail = 'Invalid file upload.';\n                        } else {\n                            $fileupload = $this->request->data['Event']['fileupload'];\n                            $tmpfile = new File($fileupload['tmp_name']);\n                            if ((isset($fileupload['error']) && $fileupload['error'] == 0) || (!empty($fileupload['tmp_name']) && $fileupload['tmp_name'] != 'none') && is_uploaded_file($tmpfile->path)) {\n                                $filename = basename($fileupload['name']);\n                                App::uses('FileAccessTool', 'Tools');\n                                $modulePayload['data'] = (new FileAccessTool())->readFromFile($fileupload['tmp_name'], $fileupload['size']);\n                            } else {\n                                $fail = 'Invalid file upload.';\n                            }\n                        }\n                    } else {\n                        $modulePayload['data'] = $this->request->data['Event']['paste'];\n                    }\n                } else {\n                    $modulePayload['data'] = '';\n                }\n                if (!$fail) {\n                    $modulePayload['data'] = base64_encode($modulePayload['data']);\n                    if (!empty($filename)) {\n                        $modulePayload['filename'] = $filename;\n                    }\n                    $result = $this->Module->queryModuleServer('/query', json_encode($modulePayload, true), false, $moduleFamily = 'Import');\n                    if (!$result) {\n                        throw new Exception(__('Import service not reachable.'));\n                    }\n                    if (isset($result['error'])) {\n                        $this->Flash->error($result['error']);\n                    }\n                    if (!is_array($result)) {\n                        throw new Exception($result);\n                    }\n                    $importComment = !empty($result['comment']) ? $result['comment'] : 'Enriched via the ' . $module['name'] . ' module';\n                    if (!empty($module['mispattributes']['format']) && $module['mispattributes']['format'] === 'misp_standard') {\n                        $event = $this->Event->handleMispFormatFromModuleResult($result);\n                        $event['Event'] = array('id' => $eventId);\n                        if ($this->_isRest()) {\n                            $this->Event->processModuleResultsDataRouter($this->Auth->user(), $event, $eventId, $importComment);\n                            return $this->RestResponse->viewData($event, $this->response->type());\n                        }\n                        $this->set('event', $event);\n                        $this->set('menuItem', 'importResults');\n                        $render_name = 'resolved_misp_format';\n                    } else {\n                        $resultArray = $this->Event->handleModuleResult($result, $eventId);\n                        if ($this->_isRest()) {\n                            return $this->__pushFreetext(\n                                $resultArray,\n                                $eventId,\n                                false,\n                                false,\n                                'soft'\n                            );\n                        }\n                        $typeCategoryMapping = array();\n                        foreach ($this->Event->Attribute->categoryDefinitions as $k => $cat) {\n                            foreach ($cat['types'] as $type) {\n                                $typeCategoryMapping[$type][$k] = $k;\n                            }\n                        }\n                        foreach ($resultArray as $key => $result) {\n                            if ($has_pipe = strpos($result['default_type'], '|') !== false || $result['default_type'] === 'malware-sample') {\n                                $pieces = explode('|', $result['value']);\n                                $or = array('Attribute.value1' => $pieces,\n                                            'Attribute.value2' => $pieces);\n                            } else {\n                                $or = array('Attribute.value1' => $result['value'], 'Attribute.value2' => $result['value']);\n                            }\n                            $options = array(\n                                'conditions' => array('OR' => $or),\n                                'fields' => array('Attribute.type', 'Attribute.category', 'Attribute.value', 'Attribute.comment'),\n                                'order' => false\n                            );\n                            $resultArray[$key]['related'] = $this->Event->Attribute->fetchAttributes($this->Auth->user(), $options);\n                        }\n                        $this->set('event', array('Event' => array('id' => $eventId)));\n                        $this->set('resultArray', $resultArray);\n                        $this->set('typeList', array_keys($this->Event->Attribute->typeDefinitions));\n                        $this->set('defaultCategories', $this->Event->Attribute->defaultCategories);\n                        $this->set('typeCategoryMapping', $typeCategoryMapping);\n                        $render_name = 'resolved_attributes';\n                    }\n                    $distributions = $this->Event->Attribute->distributionLevels;\n                    $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n                    if (empty($sgs)) {\n                        unset($distributions[4]);\n                    }\n                    $this->set('distributions', $distributions);\n                    $this->set('sgs', $sgs);\n                    $this->set('title', 'Import Results');\n                    $this->set('importComment', $importComment);\n                    $this->render($render_name);\n                }\n            } else {\n                $this->Flash->error($fail);\n            }\n        }\n        $this->set('configTypes', $this->Module->configTypes);\n        $this->set('module', $module);\n        $this->set('eventId', $eventId);\n    }\n\n    public function exportModule($module, $id, $standard = false)\n    {\n        $result = $this->Event->export($this->Auth->user(), $module, array('eventid' => $id, 'standard' => $standard));\n        $this->response->body(base64_decode($result['data']));\n        $this->response->type($result['response']);\n        $this->response->download('misp.event.' . $id . '.' . $module . '.export.' . $result['extension']);\n        return $this->response;\n    }\n\n    public function toggleCorrelation($id)\n    {\n        if (!$this->_isSiteAdmin() && !Configure::read('MISP.allow_disabling_correlation')) {\n            throw new MethodNotAllowedException(__('Disabling the correlation is not permitted on this instance.'));\n        }\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid Event.'));\n        }\n        if (!$this->Auth->user('Role')['perm_modify']) {\n            throw new MethodNotAllowedException(__('You don\\'t have permission to do that.'));\n        }\n        $conditions = array('Event.id' => $id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['Event.orgc_id'] = $this->Auth->user('org_id');\n        }\n        $event = $this->Event->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid Event.'));\n        }\n        if (!$this->Auth->user('Role')['perm_modify_org'] && $this->Auth->user('id') != $event['Event']['user_id']) {\n            throw new MethodNotAllowedException(__('You don\\'t have permission to do that.'));\n        }\n        if ($this->request->is('post')) {\n            if ($event['Event']['disable_correlation']) {\n                $event['Event']['disable_correlation'] = 0;\n                $this->Event->save($event);\n                $attributes = $this->Event->Attribute->find('all', array(\n                    'conditions' => array('Attribute.event_id' => $id),\n                    'recursive' => -1\n                ));\n                foreach ($attributes as $attribute) {\n                    $this->Event->Attribute->__afterSaveCorrelation($attribute['Attribute'], false, $event);\n                }\n            } else {\n                $event['Event']['disable_correlation'] = 1;\n                $this->Event->save($event);\n                $this->Event->Attribute->purgeCorrelations($id);\n            }\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('events', 'toggleCorrelation', $id, false, 'Correlation ' . ($event['Event']['disable_correlation'] ? 'disabled' : 'enabled') . '.');\n            } else {\n                $this->Flash->success('Correlation ' . ($event['Event']['disable_correlation'] ? 'disabled' : 'enabled') . '.');\n                $this->redirect(array('controller' => 'events', 'action' => 'view', $id));\n            }\n        } else {\n            $this->set('event', $event);\n            $this->render('ajax/toggle_correlation');\n        }\n    }\n\n    public function checkPublishedStatus($id)\n    {\n        $event = $this->Event->fetchEvent($this->Auth->user(), array('metadata' => 1, 'eventid' => $id));\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        return new CakeResponse(array('body'=> h($event[0]['Event']['published']), 'status'=>200, 'type' => 'txt'));\n    }\n    // #TODO i18n\n    public function pushEventToZMQ($id)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        if ($this->request->is('Post')) {\n            if (Configure::read('Plugin.ZeroMQ_enable')) {\n                $pubSubTool = $this->Event->getPubSubTool();\n                $event = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n                if (!empty($event)) {\n                    $pubSubTool->publishEvent($event[0]);\n                    $success = 1;\n                    $message = 'Event published to ZMQ';\n                } else {\n                    $message = 'Invalid event.';\n                }\n            } else {\n                $message = 'ZMQ event publishing not enabled.';\n            }\n        } else {\n            $message = 'This functionality is only available via POST requests';\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Events', 'pushEventToZMQ', $id, $this->response->type(), $message);\n        } else {\n            if (!empty($success)) {\n                $this->Flash->success($message);\n            } else {\n                $this->Flash->error($message);\n            }\n            $this->redirect($this->referer());\n        }\n    }\n\n    public function pushEventToKafka($id)\n    {\n        if ($this->request->is('Post')) {\n            $message = 'Kafka event publishing not enabled.';\n            if (Configure::read('Plugin.Kafka_enable')) {\n                $kafkaEventTopic = Configure::read('Plugin.Kafka_event_notifications_topic');\n                $event = $this->Event->quickFetchEvent(array('eventid' => $id));\n                if (Configure::read('Plugin.Kafka_event_notifications_enable') && !empty($kafkaEventTopic)) {\n                    $kafkaPubTool = $this->Event->getKafkaPubTool();\n                    if (!empty($event)) {\n                        $kafkaPubTool->publishJson($kafkaEventTopic, $event, 'manual_publish');\n                        $success = 1;\n                        $message = 'Event published to Kafka';\n                    } else {\n                        $success = 0;\n                        $message = 'Invalid event.';\n                    }\n                }\n                $kafkaPubTopic = Configure::read('Plugin.Kafka_event_publish_notifications_topic');\n                if (!empty($event['Event']['published']) && Configure::read('Plugin.Kafka_event_publish_notifications_enable') && !empty($kafkaPubTopic)) {\n                    $kafkaPubTool = $this->Event->getKafkaPubTool();\n                    $params = array('eventid' => $id);\n                    if (Configure::read('Plugin.Kafka_include_attachments')) {\n                        $params['includeAttachments'] = 1;\n                    }\n                    $event = $this->Event->fetchEvent($this->Auth->user(), $params);\n                    if (!empty($event)) {\n                        $kafkaPubTool->publishJson($kafkaPubTopic, $event[0], 'manual_publish');\n                        if (!isset($success)) {\n                            $success = 1;\n                            $message = 'Event published to Kafka';\n                        }\n                    } else {\n                        $success = 0;\n                        $message = 'Invalid event.';\n                    }\n                }\n            }\n        } else {\n            $message = 'This functionality is only available via POST requests';\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Events', 'pushEventToKafka', $id, $this->response->type(), $message);\n        } else {\n            if (!empty($success)) {\n                $this->Flash->success($message);\n            } else {\n                $this->Flash->error($message);\n            }\n            $this->redirect($this->referer());\n        }\n    }\n\n    public function getEventInfoById($id)\n    {\n        if (empty($id)) {\n            throw new MethodNotAllowedException(__('Invalid ID.'));\n        }\n        $conditions = array('Event.id' => $id);\n        if (Validation::uuid($id)) {\n            $conditions = array('Event.uuid' => $id);\n        } elseif (!is_numeric($id)) {\n            $conditions = array('Event.uuid' => -1);\n        }\n        $event = $this->Event->find('first', array(\n            'conditions' => $conditions,\n            'fields' => array('Event.id', 'Event.distribution', 'Event.sharing_group_id', 'Event.info', 'Event.org_id', 'Event.date', 'Event.threat_level_id', 'Event.analysis'),\n            'contain' => array('Orgc.id', 'Orgc.name', 'EventTag' => array('Tag.id', 'Tag.name', 'Tag.colour'), 'ThreatLevel.name'),\n            'recursive' => -1\n        ));\n        if (!empty($event) && !$this->_isSiteAdmin() && $event['Event']['org_id'] != $this->Auth->user('org_id')) {\n            if (!in_array($event['Event']['distribution'], array(1, 2, 3))) {\n                if ($event['Event']['distribution'] == 4) {\n                    $sharingGroups = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user());\n                    if (!in_array($event['Event']['sharing_group_id'], $sharingGroups)) {\n                        $event = array();\n                    }\n                } else {\n                    $event = array();\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($event, $this->response->type());\n        } else {\n            if ($this->request->is('ajax')) {\n                $this->layout = 'ajax';\n            }\n            $this->set('analysisLevels', $this->Event->analysisLevels);\n            $this->set('validUuid', Validation::uuid($id));\n            $this->set('id', $id);\n            $this->set('event', $event);\n        }\n    }\n\n    public function enrichEvent($id)\n    {\n        if (Validation::uuid($id)) {\n            $conditions = array('Event.uuid' => $id);\n        } else {\n            $conditions = array('Event.id' => $id);\n        }\n        $event = $this->Event->find('first', array('conditions' => $conditions, 'recursive' => -1));\n        if (empty($event) || (!$this->_isSiteAdmin() && ($this->Auth->user('org_id') != $event['Event']['orgc_id'] || !$this->userRole['perm_modify']))) {\n            throw new MethodNotAllowedException(__('Invalid Event'));\n        }\n        $this->Event->insertLock($this->Auth->user(), $event['Event']['id']);\n        if ($this->request->is('post')) {\n            $modules = array();\n            if (!isset($this->request->data['Event'])) {\n                $this->request->data = array('Event' => $this->request->data);\n            }\n            foreach ($this->request->data['Event'] as $module => $enabled) {\n                if ($enabled) {\n                    $modules[] = $module;\n                }\n            }\n            $result = $this->Event->enrichmentRouter(array(\n                'user' => $this->Auth->user(),\n                'event_id' => $event['Event']['id'],\n                'modules' => $modules\n            ));\n            if ($this->_isRest()) {\n            } else {\n                if ($result === true) {\n                    $result = __('Enrichment task queued for background processing. Check back later to see the results.');\n                }\n                $this->Flash->success($result);\n                $this->redirect('/events/view/' . $id);\n            }\n        } else {\n            $this->loadModel('Module');\n            $modules = $this->Module->getEnabledModules($this->Auth->user(), 'expansion');\n            $this->layout = 'ajax';\n            $this->set('modules', $modules);\n            $this->render('ajax/enrich_event');\n        }\n    }\n\n    public function checkLocks($id)\n    {\n        $this->loadModel('EventLock');\n        $event = $this->Event->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('Event.id' => $id),\n            'fields' => array('Event.orgc_id')\n        ));\n        $locks = array();\n        if (!empty($event) && ($event['Event']['orgc_id'] == $this->Auth->user('org_id') || $this->_isSiteAdmin())) {\n            $locks = $this->EventLock->checkLock($this->Auth->user(), $id);\n        }\n        if (!empty($locks)) {\n            $temp = $locks;\n            $locks = array();\n            foreach ($temp as $t) {\n                if ($t['User']['id'] !== $this->Auth->user('id')) {\n                    if (!$this->_isSiteAdmin() && $t['User']['org_id'] != $this->Auth->user('org_id')) {\n                        continue;\n                    }\n                    $locks[] = $t['User']['email'];\n                }\n            }\n        }\n        // TODO: i18n\n        if (!empty($locks)) {\n            $message = sprintf('Warning: Your view on this event might not be up to date as it is currently being edited by: %s', implode(', ', $locks));\n            $this->set('message', $message);\n            $this->layout = false;\n            $this->render('/Events/ajax/event_lock');\n        } else {\n            return $this->RestResponse->viewData('', $this->response->type(), false, true);\n        }\n    }\n\n    public function getEditStrategy($id)\n    {\n        // find the id of the event, change $id to it and proceed to read the event as if the ID was entered.\n        if (Validation::uuid($id)) {\n            $this->Event->recursive = -1;\n            $event = $this->Event->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Event.uuid' => $id),\n                'fields' => array('Event.id', 'Event.uuid', 'Event.orgc_id')\n            ));\n            if ($event == null) {\n                throw new NotFoundException(__('Invalid event'));\n            }\n            $id = $event['Event']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException(__('Invalid event'));\n        } else {\n            $event = $this->Event->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Event.id' => $id),\n                'fields' => array('Event.id', 'Event.uuid', 'Event.orgc_id')\n            ));\n        }\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $response = array('extensions' => array());\n        if ($event['Event']['orgc_id'] === $this->Auth->user('org_id')) {\n            $response['strategy'] = 'edit';\n        } else {\n            $response['strategy'] = 'extend';\n        }\n        $extendedEvents = $this->Event->find('all', array(\n            'recursive' => -1,\n            'fields' => array('Event.id', 'Event.info', 'Event.uuid'),\n            'conditions' => array(\n                'Event.extends_uuid' => $event['Event']['uuid'],\n                'Event.orgc_id' => $this->Auth->user('org_id')\n            )\n        ));\n        foreach ($extendedEvents as $extendedEvent) {\n            $response['extensions'][] = $extendedEvent['Event'];\n        }\n        return $this->RestResponse->viewData($response, $this->response->type());\n    }\n    public function upload_analysis_file($eventId)\n    {\n        $data = array();\n        $this->set('eventId', $eventId);\n        $this->set('file_uploaded', \"0\");\n        $this->set('file_name', \"\");\n\n        if (!$this->userRole['perm_modify']) {\n            throw new UnauthorizedException('You do not have permission to do that.');\n        }\n\n        if ($this->request->is('post') && !empty($this->request['data']['Event']['analysis_file']['name'])) {\n            $this->set('file_uploaded', \"1\");\n            $this->set('file_name', $this->request['data']['Event']['analysis_file']['name']);\n            $this->set('file_content', file_get_contents($this->request['data']['Event']['analysis_file']['tmp_name']));\n\n        //$result = $this->Event->upload_mactime($this->Auth->user(), );\n        } elseif ($this->request->is('post') && $this->request['data']['SelectedData']['mactime_data']) {\n            // Find the event that is to be updated\n            if (Validation::uuid($eventId)) {\n                $eventFindParams['conditions']['Event.uuid'] = $eventId;\n            } elseif (is_numeric($eventId)) {\n                $eventFindParams['conditions']['Event.id'] = $eventId;\n            } else {\n                throw new NotFoundException(__('Invalid event.'));\n            }\n            $event = $this->Event->find('first', $eventFindParams);\n            if (empty($event) || (!$this->_isSiteAdmin() && $event['Event']['orgc_id'] != $this->Auth->user('org_id'))) {\n                throw new NotFoundException(__('Invalid event.'));\n            }\n            $eventId = $event['Event']['id'];\n\n            $fileName = $this->request['data']['SelectedData']['mactime_file_name'];\n            $fileData = $this->request['data']['SelectedData']['mactime_file_content'];\n            $object = array();\n        $data = json_decode($this->request['data']['SelectedData']['mactime_data'], true);\n        $firstObject = 1;\n            foreach ($data as $objectData) {\n                $object['Object'] = array(\n                    'name' => 'mactime-timeline-analysis',\n                    'meta-category' => 'file',\n                    'description' => 'Mactime template, used in forensic investigations to describe the timeline of a file activity',\n                    'template_version' => 1,\n                    'template_uuid' => '9297982e-be62-4772-a665-c91f5a8d639'\n                );\n\n                $object['Attribute'] = array(\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\"=> \"Other\",\n                        \"type\" => \"text\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"filepath\",\n                        \"value\" => $objectData['filepath']\n                    ],\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\" => \"Other\",\n                        \"type\" => \"datetime\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"datetime\",\n                        \"value\" => $objectData['time_accessed']\n                    ],\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\" => \"Other\",\n                        \"type\" => \"text\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"fileSize\",\n                        \"value\" => $objectData['file_size']\n                    ],\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\" => \"Other\",\n                        \"type\" => \"text\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"activityType\",\n                        \"value\" => $objectData['activity_type']\n                    ],\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\" => \"Other\",\n                        \"type\" => \"text\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"filePermissions\",\n                        \"value\" => $objectData['permissions']\n                    ],\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\" => \"External analysis\",\n                        \"type\" => \"attachment\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"file\",\n                        \"value\" => $fileName,\n                        \"data\" => base64_encode($fileData),\n                        \"comment\" => \"Mactime source file\"\n                    ]\n\n                    );\n                $this->loadModel('MispObject');\n                $ObjectResult = $this->MispObject->saveObject($object, $eventId, \"\", \"\");\n                $temp = $this->MispObject->ObjectReference->Object->find('first', array(\n                    'recursive' => -1,\n                    'fields' => array('Object.uuid','Object.id'),\n                    'conditions' => array('Object.id' =>$ObjectResult)\n                ));\n\n                if ($firstObject === 0) {\n                    $objectRef['referenced_id'] = $PreviousObjRef['Object']['id'];\n                    $objectRef['referenced_uuid'] = $PreviousObjRef['Object']['uuid'];\n                    $objectRef['object_id'] = $ObjectResult;\n                    $objectRef['relationship_type'] = \"preceded-by\";\n                    $this->loadModel('MispObject');\n                    $result = $this->MispObject->ObjectReference->captureReference($objectRef, $eventId, $this->Auth->user(), false);\n                    $objectRef['referenced_id'] = $temp['Object']['id'];\n                    $objectRef['referenced_uuid'] = $temp['Object']['uuid'];\n                    $objectRef['object_id'] = $PreviousObjRef['Object']['id'];\n                    $objectRef['relationship_type'] = \"followed-by\";\n                    $this->loadModel('MispObject');\n                    $result = $this->MispObject->ObjectReference->captureReference($objectRef, $eventId, $this->Auth->user(), false);\n                    $PreviousObjRef = $temp;\n                } else {\n                    $PreviousObjRef = $temp;\n                    $firstObject = 0;\n                }\n            }\n            $this->redirect('/events/view/' . $eventId);\n        }\n    }\n\n    public function cullEmptyEvents()\n    {\n        $eventIds = $this->Event->find('list', array(\n            'conditions' => array('Event.published' => 1),\n            'fields' => array('Event.id', 'Event.uuid'),\n            'recursive' => -1\n        ));\n        $count = 0;\n        $this->Event->skipBlacklist = true;\n        foreach ($eventIds as $eventId => $eventUuid) {\n            $result = $this->Event->Attribute->find('first', array(\n                'conditions' => array('Attribute.event_id' => $eventId),\n                'recursive' => -1,\n                'fields' => array('Attribute.id', 'Attribute.event_id')\n            ));\n            if (empty($result)) {\n                $this->Event->delete($eventId);\n                $count++;\n            }\n        }\n        $this->Event->skipBlacklist = null;\n        $message = __('%s event(s) deleted.', $count);\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($message, $this->response->type());\n        } else {\n            $this->Flash->success($message);\n            $this->redirect($this->referer());\n        }\n    }\n}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\nApp::uses('Xml', 'Utility');\n\n/**\n * @property Event $Event\n */\nclass EventsController extends AppController\n{\n    public $components = array(\n            'Security',\n            'Email',\n            'RequestHandler',\n            'IOCImport',\n            'Cidr'\n    );\n\n    public $paginate = array(\n            'limit' => 60,\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events <- no we won't, this is the max a user van view/page.\n            'order' => array(\n                    'Event.timestamp' => 'DESC'\n            ),\n            'contain' => array(\n                    'Org' => array('fields' => array('id', 'name', 'uuid')),\n                    'Orgc' => array('fields' => array('id', 'name', 'uuid')),\n                    'SharingGroup' => array('fields' => array('id', 'name', 'uuid'))\n            )\n    );\n\n    private $acceptedFilteringNamedParams = array(\n        'sort', 'direction', 'focus', 'extended', 'overrideLimit', 'filterColumnsOverwrite', 'attributeFilter', 'extended', 'page',\n        'searchFor', 'proposal', 'correlation', 'warning', 'deleted', 'includeRelatedTags', 'includeDecayScore', 'distribution',\n        'taggedAttributes', 'galaxyAttachedAttributes', 'objectType', 'attributeType', 'focus', 'extended', 'overrideLimit',\n        'filterColumnsOverwrite', 'feed', 'server', 'toIDS', 'sighting', 'includeSightingdb'\n    );\n\n    public $defaultFilteringRules =  array(\n        'searchFor' => '',\n        'attributeFilter' => 'all',\n        'proposal' => 0,\n        'correlation' => 0,\n        'warning' => 0,\n        'deleted' => 2,\n        'includeRelatedTags' => 0,\n        'includeDecayScore' => 0,\n        'toIDS' => 0,\n        'feed' => 0,\n        'server' => 0,\n        'distribution' => array(0, 1, 2, 3, 4, 5),\n        'sighting' => 0,\n        'taggedAttributes' => '',\n        'galaxyAttachedAttributes' => ''\n    );\n\n    public $helpers = array('Js' => array('Jquery'));\n\n    public $paginationFunctions = array('index', 'proposalEventIndex');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n\n        // what pages are allowed for non-logged-in users\n        $this->Auth->allow('xml');\n        $this->Auth->allow('csv');\n        $this->Auth->allow('nids');\n        $this->Auth->allow('hids_md5');\n        $this->Auth->allow('hids_sha1');\n        $this->Auth->allow('text');\n        $this->Auth->allow('restSearch');\n        $this->Auth->allow('stix');\n        $this->Auth->allow('stix2');\n\n        $this->Security->unlockedActions[] = 'viewEventAttributes';\n\n        // TODO Audit, activate logable in a Controller\n        if (count($this->uses) && $this->{$this->modelClass}->Behaviors->attached('SysLogLogable')) {\n            $this->{$this->modelClass}->setUserData($this->activeUser);\n        }\n\n        // convert uuid to id if present in the url, and overwrite id field\n        if (isset($this->params->query['uuid'])) {\n            $params = array(\n                    'conditions' => array('Event.uuid' => $this->params->query['uuid']),\n                    'recursive' => 0,\n                    'fields' => 'Event.id'\n            );\n            $result = $this->Event->find('first', $params);\n            if (isset($result['Event']) && isset($result['Event']['id'])) {\n                $id = $result['Event']['id'];\n                $this->params->addParams(array('pass' => array($id))); // FIXME find better way to change id variable if uuid is found. params->url and params->here is not modified accordingly now\n            }\n        }\n\n        // if not admin or own org, check private as well..\n        if (!$this->_isSiteAdmin() && in_array($this->action, $this->paginationFunctions)) {\n            $sgids = $this->Event->cacheSgids($this->Auth->user(), true);\n            $conditions = array(\n                'AND' => array(\n                    array(\n                        \"OR\" => array(\n                            array(\n                                'Event.org_id' => $this->Auth->user('org_id')\n                            ),\n                            array(\n                                'AND' => array(\n                                        'Event.distribution >' => 0,\n                                        'Event.distribution <' => 4,\n                                        Configure::read('MISP.unpublishedprivate') ? array('Event.published =' => 1) : array(),\n                                ),\n                            ),\n                            array(\n                                'AND' => array(\n                                        'Event.distribution' => 4,\n                                        'Event.sharing_group_id' => $sgids,\n                                        Configure::read('MISP.unpublishedprivate') ? array('Event.published =' => 1) : array(),\n                                ),\n                            )\n                        )\n                    )\n                )\n            );\n            if ($this->userRole['perm_sync'] && $this->Auth->user('Server')['push_rules']) {\n                $conditions['AND'][] = $this->Event->filterRulesToConditions($this->Auth->user('Server')['push_rules']);\n            }\n            $this->paginate = Set::merge($this->paginate, array('conditions' => $conditions));\n        }\n    }\n\n    private function __filterOnAttributeValue($value)\n    {\n        // dissect the value\n        $pieces = explode('|', $value);\n        $include = array();\n        $exclude = array();\n        $includeIDs = array();\n        $excludeIDs = array();\n        foreach ($pieces as $piece) {\n            if ($piece[0] == '!') {\n                $exclude[] =  '%' . strtolower(substr($piece, 1)) . '%';\n            } else {\n                $include[] = '%' . strtolower($piece) . '%';\n            }\n        }\n        if (!empty($include)) {\n            // get all of the attributes that should be included\n            $includeQuery = array(\n                    'recursive' => -1,\n                    'fields' => array('id', 'event_id', 'distribution', 'value1', 'value2'),\n                    'conditions' => array(),\n            );\n            foreach ($include as $i) {\n                $includeQuery['conditions']['OR'][] = array('lower(Attribute.value1) LIKE' => $i);\n                $includeQuery['conditions']['OR'][] = array('lower(Attribute.value2) LIKE' => $i);\n            }\n            $includeQuery['conditions']['AND'][] = array('Attribute.deleted' => 0);\n            $includeHits = $this->Event->Attribute->find('all', $includeQuery);\n\n            // convert it into an array that uses the event ID as a key\n            foreach ($includeHits as $iH) {\n                $includeIDs[$iH['Attribute']['event_id']][] = array('attribute_id' => $iH['Attribute']['id'], 'distribution' => $iH['Attribute']['distribution']);\n            }\n        }\n\n        if (!empty($exclude)) {\n            // get all of the attributes that should be excluded\n            $excludeQuery = array(\n                'recursive' => -1,\n                'fields' => array('id', 'event_id', 'distribution', 'value1', 'value2'),\n                'conditions' => array(),\n            );\n            foreach ($exclude as $e) {\n                $excludeQuery['conditions']['OR'][] = array('lower(Attribute.value1) LIKE' => $e);\n                $excludeQuery['conditions']['OR'][] = array('lower(Attribute.value2) LIKE' => $e);\n            }\n            $excludeQuery['conditions']['AND'][] = array('Attribute.deleted' => 0);\n            $excludeHits = $this->Event->Attribute->find('all', $excludeQuery);\n\n            // convert it into an array that uses the event ID as a key\n            foreach ($excludeHits as $eH) {\n                $excludeIDs[$eH['Attribute']['event_id']][] = array('attribute_id' => $eH['Attribute']['id'], 'distribution' => $eH['Attribute']['distribution']);\n            }\n        }\n        $includeIDs = array_keys($includeIDs);\n        $excludeIDs = array_keys($excludeIDs);\n        // return -1 as the only value in includedIDs if both arrays are empty. This will mean that no events will be shown if there was no hit\n        if (empty($includeIDs) && empty($excludeIDs)) {\n            $includeIDs[] = -1;\n        }\n        return array($includeIDs, $excludeIDs);\n    }\n\n    private function __quickFilter($value)\n    {\n        if (!is_array($value)) {\n            $value = array($value);\n        }\n        $values = array();\n        foreach ($value as $v) {\n            $values[] = '%' . strtolower($v) . '%';\n        }\n\n        $result = array();\n        // get all of the attributes that have a hit on the search term, in either the value or the comment field\n        // This is not perfect, the search will be case insensitive, but value1 and value2 are searched separately. lower() doesn't seem to work on virtualfields\n        $subconditions = array();\n        foreach ($values as $v) {\n            $subconditions[] = array('lower(value1) LIKE' => $v);\n            $subconditions[] = array('lower(value2) LIKE' => $v);\n            $subconditions[] = array('lower(Attribute.comment) LIKE' => $v);\n        }\n        $conditions = array(\n            'AND' => array(\n                'OR' => $subconditions,\n                'Attribute.deleted' => 0\n            )\n        );\n        $attributeHits = $this->Event->Attribute->fetchAttributes($this->Auth->user(), array(\n                'conditions' => $conditions,\n                'fields' => array('event_id', 'comment', 'distribution', 'value1', 'value2'),\n                'flatten' => 1\n        ));\n        // rearrange the data into an array where the keys are the event IDs\n        $eventsWithAttributeHits = array();\n        foreach ($attributeHits as $aH) {\n            $eventsWithAttributeHits[$aH['Attribute']['event_id']][] = $aH['Attribute'];\n        }\n\n        // Using the keys from the previously obtained ordered array, let's fetch all of the events involved\n        $events = $this->Event->find('all', array(\n                'recursive' => -1,\n                'fields' => array('id', 'distribution', 'org_id'),\n                'conditions' => array('id' => array_keys($eventsWithAttributeHits)),\n        ));\n\n        foreach ($events as $event) {\n            $result[] = $event['Event']['id'];\n        }\n\n        // we now have a list of event IDs that match on an attribute level, and the user can see it. Let's also find all of the events that match on other criteria!\n        // What is interesting here is that we no longer have to worry about the event's releasability. With attributes this was a different case,\n        // because we might run into a situation where a user can see an event but not a specific attribute\n        // returning a hit on such an attribute would allow users to enumerate hidden attributes\n        // For anything beyond this point the default pagination restrictions will apply!\n\n        // First of all, there are tags that might be interesting for us\n        $subconditions = array();\n        foreach ($values as $v) {\n            $subconditions[] = array('lower(name) LIKE' => $v);\n        }\n        $tags = $this->Event->EventTag->Tag->find('all', array(\n                'conditions' => $subconditions,\n                'fields' => array('name', 'id'),\n                'contain' => array('EventTag', 'AttributeTag'),\n        ));\n        foreach ($tags as $tag) {\n            foreach ($tag['EventTag'] as $eventTag) {\n                if (!in_array($eventTag['event_id'], $result)) {\n                    $result[] = $eventTag['event_id'];\n                }\n            }\n            foreach ($tag['AttributeTag'] as $attributeTag) {\n                if (!in_array($attributeTag['event_id'], $result)) {\n                    $result[] = $attributeTag['event_id'];\n                }\n            }\n        }\n\n        // Finally, let's search on the event metadata!\n        $subconditions = array();\n        foreach ($values as $v) {\n            $subconditions[] = array('lower(name) LIKE' => $v);\n        }\n        $conditions = array();\n        $orgs = $this->Event->Org->find('list', array(\n                'conditions' => $subconditions,\n                'recursive' => -1,\n                'fields' => array('id')\n        ));\n        foreach ($values as $v) {\n            $conditions['OR'][] = array('lower(info) LIKE' => $v);\n            $conditions['OR'][] = array('lower(uuid) LIKE' => $v);\n        }\n        if (!empty($orgs)) {\n            $conditions['OR']['orgc_id'] = array_values($orgs);\n        }\n        $otherEvents = $this->Event->find('all', array(\n                'recursive' => -1,\n                'fields' => array('id', 'orgc_id', 'info', 'uuid'),\n                'conditions' => $conditions,\n        ));\n        foreach ($otherEvents as $oE) {\n            if (!in_array($oE['Event']['id'], $result)) {\n                $result[] = $oE['Event']['id'];\n            }\n        }\n        return $result;\n    }\n\n    private function __setIndexFilterConditions($passedArgs, $urlparams)\n    {\n        $passedArgsArray = array();\n        foreach ($passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                if (!is_array($v)) {\n                    if ($urlparams != \"\") {\n                        $urlparams .= \"/\";\n                    }\n                    $urlparams .= $k . \":\" . $v;\n                }\n                $searchTerm = strtolower(substr($k, 6));\n                switch ($searchTerm) {\n                    case 'all':\n                        if (!empty($passedArgs['searchall'])) {\n                            $this->paginate['conditions']['AND'][] = array('Event.id' => $this->__quickFilter($passedArgs['searchall']));\n                        }\n                        break;\n                    case 'attribute':\n                        $event_id_arrays = $this->__filterOnAttributeValue($v);\n                        if (!empty($event_id_arrays[0])) {\n                            $this->paginate['conditions']['AND'][] = array('Event.id' => $event_id_arrays[0]);\n                        }\n                        if (!empty($event_id_arrays[1])) {\n                            $this->paginate['conditions']['AND'][] = array('Event.id !=' => $event_id_arrays[1]);\n                        }\n                        break;\n                    case 'published':\n                        if ($v == 2) {\n                            continue 2;\n                        }\n                        $this->paginate['conditions']['AND'][] = array('Event.' . substr($k, 6) . ' =' => $v);\n                        break;\n                    case 'hasproposal':\n                        if ($v == 2) {\n                            continue 2;\n                        }\n                        $proposalQuery = \"exists (select id, deleted from shadow_attributes where shadow_attributes.event_id = Event.id and shadow_attributes.deleted = 0)\";\n                        if ($v == 0) {\n                            $proposalQuery = 'not ' . $proposalQuery;\n                        }\n                        $this->paginate['conditions']['AND'][] = $proposalQuery;\n                        break;\n                    case 'eventid':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        if (is_array($v)) {\n                            $pieces = $v;\n                        } else {\n                            $pieces = explode('|', $v);\n                        }\n                        $temp = array();\n                        $eventidConditions = array();\n                        foreach ($pieces as $piece) {\n                            $piece = trim($piece);\n                            if ($piece[0] == '!') {\n                                if (strlen($piece) == 37) {\n                                    $eventidConditions['NOT']['uuid'][] = substr($piece, 1);\n                                } else {\n                                    $eventidConditions['NOT']['id'][] = substr($piece, 1);\n                                }\n                            } else {\n                                if (strlen($piece) == 36) {\n                                    $eventidConditions['OR']['uuid'][] = $piece;\n                                } else {\n                                    $eventidConditions['OR']['id'][] = $piece;\n                                }\n                            }\n                        }\n                        foreach ($eventidConditions as $operator => $conditionForOperator) {\n                            foreach ($conditionForOperator as $conditionKey => $conditionValue) {\n                                $lookupKey = 'Event.' . $conditionKey;\n                                if ($operator === 'NOT') {\n                                    $lookupKey = $lookupKey . ' !=';\n                                }\n                                $this->paginate['conditions']['AND'][] = array($lookupKey => $conditionValue);\n                            }\n                        }\n                        break;\n                    case 'datefrom':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        $this->paginate['conditions']['AND'][] = array('Event.date >=' => $v);\n                        break;\n                    case 'dateuntil':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        $this->paginate['conditions']['AND'][] = array('Event.date <=' => $v);\n                        break;\n                    case 'timestamp':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        if (preg_match('/^[0-9]+[mhdw]$/i', $v)) {\n                            $v = $this->Event->resolveTimeDelta($v);\n                        }\n                        $this->paginate['conditions']['AND'][] = array('Event.timestamp >=' => $v);\n                        break;\n                    case 'publish_timestamp':\n                    case 'publishtimestamp':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        if (is_array($v) && isset($v[0]) && isset($v[1])) {\n                            if (preg_match('/^[0-9]+[mhdw]$/i', $v[0])) {\n                                $v[0] = $this->Event->resolveTimeDelta($v[0]);\n                            }\n                            if (preg_match('/^[0-9]+[mhdw]$/i', $v[1])) {\n                                $v[1] = $this->Event->resolveTimeDelta($v[1]);\n                            }\n                            $this->paginate['conditions']['AND'][] = array('Event.publish_timestamp >=' => $v[0]);\n                            $this->paginate['conditions']['AND'][] = array('Event.publish_timestamp <=' => $v[1]);\n                        } else {\n                            if (preg_match('/^[0-9]+[mhdw]$/i', $v)) {\n                                $v = $this->Event->resolveTimeDelta($v);\n                            }\n                            $this->paginate['conditions']['AND'][] = array('Event.publish_timestamp >=' => $v);\n                        }\n                        break;\n                    case 'org':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        if (!Configure::read('MISP.showorg')) {\n                            continue 2;\n                        }\n                        $orgArray = $this->Event->Org->find('list', array('fields' => array('Org.name')));\n                        $orgUuidArray = $this->Event->Org->find('list', array('fields' => array('Org.uuid')));\n                        $orgArray = array_map('strtoupper', $orgArray);\n                        // if the first character is '!', search for NOT LIKE the rest of the string (excluding the '!' itself of course)\n                        if (!is_array($v)) {\n                            $pieces = explode('|', $v);\n                        } else {\n                            $pieces = $v;\n                        }\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                if (is_numeric(substr($piece, 1))) {\n                                    $this->paginate['conditions']['AND'][] = array('Event.orgc_id !=' => substr($piece, 1));\n                                } else {\n                                    if (Validation::uuid(substr($piece, 1))) {\n                                        $org_id = array_search(substr($piece, 1), $orgUuidArray);\n                                    } else {\n                                        $org_id = array_search(strtoupper(substr($piece, 1)), $orgArray);\n                                    }\n                                    if ($org_id) {\n                                        $this->paginate['conditions']['AND'][] = array('Event.orgc_id !=' => $org_id);\n                                    }\n                                }\n                            } else {\n                                if (is_numeric($piece)) {\n                                    $test['OR'][] = array('Event.orgc_id' => array('Event.orgc_id' => $piece));\n                                } else {\n                                    if (Validation::uuid($piece)) {\n                                        $org_id = array_search($piece, $orgUuidArray);\n                                    } else {\n                                        $org_id = array_search(strtoupper($piece), $orgArray);\n                                    }\n                                    if ($org_id) {\n                                        $test['OR'][] = array('Event.orgc_id' => $org_id);\n                                    } else {\n                                        $test['OR'][] = array('Event.orgc_id' => -1);\n                                    }\n                                }\n                            }\n                        }\n                        $this->paginate['conditions']['AND'][] = $test;\n                        break;\n                    case 'sharinggroup':\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                $this->paginate['conditions']['AND'][] = array('Event.sharing_group_id !=' => substr($piece, 1));\n                            } else {\n                                $test['OR'][] = array('Event.sharing_group_id' => $piece);\n                            }\n                        }\n                        if (!empty($test)) {\n                            $this->paginate['conditions']['AND'][] = $test;\n                        }\n                        break;\n                    case 'eventinfo':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        // if the first character is '!', search for NOT LIKE the rest of the string (excluding the '!' itself of course)\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                $this->paginate['conditions']['AND'][] = array('lower(Event.info)' . ' NOT LIKE' => '%' . strtolower(substr($piece, 1)) . '%');\n                            } else {\n                                $test['OR'][] = array('lower(Event.info)' . ' LIKE' => '%' . strtolower($piece) . '%');\n                            }\n                        }\n                        $this->paginate['conditions']['AND'][] = $test;\n                        break;\n                    case 'tag':\n                    case 'tags':\n                        if (!$v || !Configure::read('MISP.tagging') || $v === 0) {\n                            continue 2;\n                        }\n                        if (!is_array($v)) {\n                            $pieces = explode('|', $v);\n                        } else {\n                            $pieces = $v;\n                        }\n                        $filterString = \"\";\n                        $expectOR = false;\n                        $setOR = false;\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                if (is_numeric(substr($piece, 1))) {\n                                    $conditions = array('OR' => array('Tag.id' => substr($piece, 1)));\n                                } else {\n                                    $conditions = array('OR' => array('Tag.name' => substr($piece, 1)));\n                                }\n                                $tagName = $this->Event->EventTag->Tag->find('first', array(\n                                    'conditions' => $conditions,\n                                    'fields' => array('id', 'name'),\n                                    'recursive' => -1,\n                                ));\n\n                                if (empty($tagName)) {\n                                    if ($filterString != \"\") {\n                                        $filterString .= \"|\";\n                                    }\n                                    $filterString .= '!' . $piece;\n                                    continue;\n                                }\n                                $block = $this->Event->EventTag->find('all', array(\n                                        'conditions' => array('EventTag.tag_id' => $tagName['Tag']['id']),\n                                        'fields' => 'event_id',\n                                        'recursive' => -1,\n                                ));\n                                if (!empty($block)) {\n                                    $sqlSubQuery = 'Event.id NOT IN (';\n                                    foreach ($block as $b) {\n                                        $sqlSubQuery .= $b['EventTag']['event_id'] . ',';\n                                    }\n                                    $this->paginate['conditions']['AND'][] = substr($sqlSubQuery, 0, -1) . ')';\n                                }\n                                if ($filterString != \"\") {\n                                    $filterString .= \"|\";\n                                }\n                                $filterString .= '!' . (isset($tagName['Tag']['name']) ? $tagName['Tag']['name'] : $piece);\n                            } else {\n                                $expectOR = true;\n                                if (is_numeric($piece)) {\n                                    $conditions = array('OR' => array('Tag.id' => $piece));\n                                } else {\n                                    $conditions = array('OR' => array('Tag.name' => $piece));\n                                }\n\n                                $tagName = $this->Event->EventTag->Tag->find('first', array(\n                                        'conditions' => $conditions,\n                                        'fields' => array('id', 'name'),\n                                        'recursive' => -1,\n                                ));\n\n                                if (empty($tagName)) {\n                                    if ($filterString != \"\") {\n                                        $filterString .= \"|\";\n                                    }\n                                    $filterString .= $piece;\n                                    continue;\n                                }\n\n                                $allow = $this->Event->EventTag->find('all', array(\n                                        'conditions' => array('EventTag.tag_id' => $tagName['Tag']['id']),\n                                        'fields' => 'event_id',\n                                        'recursive' => -1,\n                                ));\n                                if (!empty($allow)) {\n                                    $sqlSubQuery = 'Event.id IN (';\n                                    foreach ($allow as $a) {\n                                        $setOR = true;\n                                        $sqlSubQuery .= $a['EventTag']['event_id'] . ',';\n                                    }\n                                    $this->paginate['conditions']['AND']['OR'][] = substr($sqlSubQuery, 0, -1) . ')';\n                                }\n                                if ($filterString != \"\") {\n                                    $filterString .= \"|\";\n                                }\n                                $filterString .= isset($tagName['Tag']['name']) ? $tagName['Tag']['name'] : $piece;\n                            }\n                        }\n                        // If we have a list of OR-d arguments, we expect to end up with a list of allowed event IDs\n                        // If we don't however, it means that none of the tags was found. To prevent displaying the entire event index in this case:\n                        if ($expectOR && !$setOR) {\n                            $this->paginate['conditions']['AND'][] = array('Event.id' => -1);\n                        }\n                        $v = $filterString;\n                        break;\n                    case 'email':\n                        if ($v == \"\" || (strtolower($this->Auth->user('email')) !== strtolower(trim($v)) && !$this->_isSiteAdmin())) {\n                            continue 2;\n                        }\n                        // if the first character is '!', search for NOT LIKE the rest of the string (excluding the '!' itself of course)\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                $users = $this->Event->User->find('list', array(\n                                        'recursive' => -1,\n                                        'fields' => array('User.email'),\n                                        'conditions' => array('lower(User.email) LIKE' => '%' . strtolower(substr($piece, 1)) . '%')\n                                ));\n                                if (!empty($users)) {\n                                    $this->paginate['conditions']['AND'][] = array('Event.user_id !=' => array_keys($users));\n                                }\n                            } else {\n                                $users = $this->Event->User->find('list', array(\n                                        'recursive' => -1,\n                                        'fields' => array('User.email'),\n                                        'conditions' => array('lower(User.email) LIKE' => '%' . strtolower($piece) . '%')\n                                ));\n                                if (!empty($users)) {\n                                    $test['OR'][] = array('Event.user_id' => array_keys($users));\n                                }\n                            }\n                        }\n\n                        if (!empty($test)) {\n                            $this->paginate['conditions']['AND'][] = $test;\n                        }\n                        break;\n                    case 'distribution':\n                    case 'analysis':\n                    case 'threatlevel':\n                        if ($v == \"\") {\n                            continue 2;\n                        }\n                        $terms = array();\n                        $filterString = \"\";\n                        $searchTermInternal = $searchTerm;\n                        if ($searchTerm == 'threatlevel') {\n                            $searchTermInternal = 'threat_level_id';\n                            $threatLevels = $this->Event->ThreatLevel->find('all', array(\n                                'recursive' => -1,\n                                'fields' => array('id', 'name'),\n                            ));\n                            foreach ($threatLevels as $tl) {\n                                $terms[$tl['ThreatLevel']['id']] = $tl['ThreatLevel']['name'];\n                            }\n                        } elseif ($searchTerm == 'analysis') {\n                            $terms = $this->Event->analysisLevels;\n                        } else {\n                            $terms = $this->Event->distributionLevels;\n                        }\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($filterString != \"\") {\n                                $filterString .= '|';\n                            }\n                            if ($piece[0] == '!') {\n                                $filterString .= $terms[substr($piece, 1)];\n                                $this->paginate['conditions']['AND'][] = array('Event.' . $searchTermInternal . ' !=' => substr($piece, 1));\n                            } else {\n                                $filterString .= $terms[$piece];\n                                $test['OR'][] = array('Event.' . $searchTermInternal => $piece);\n                            }\n                        }\n                        $this->paginate['conditions']['AND'][] = $test;\n                        $v = $filterString;\n                        break;\n                    case 'minimal':\n                        $this->paginate['conditions']['AND'][] = array('NOT' => array('Event.attribute_count' => 0));\n                        break;\n                    default:\n                        continue 2;\n                        break;\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        return $passedArgsArray;\n    }\n\n    public function index()\n    {\n        // list the events\n        $urlparams = \"\";\n        $overrideAbleParams = array('all', 'attribute', 'published', 'eventid', 'datefrom', 'dateuntil', 'org', 'eventinfo', 'tag', 'tags', 'distribution', 'sharinggroup', 'analysis', 'threatlevel', 'email', 'hasproposal', 'timestamp', 'publishtimestamp', 'publish_timestamp', 'minimal');\n        $paginationParams = array('limit', 'page', 'sort', 'direction', 'order');\n        $passedArgs = $this->passedArgs;\n        if (isset($this->request->data)) {\n            if (isset($this->request->data['request'])) {\n                $this->request->data = $this->request->data['request'];\n            }\n            foreach ($this->request->data as $k => $v) {\n                if (substr($k, 0, 6) === 'search' && in_array(strtolower(substr($k, 6)), $overrideAbleParams)) {\n                    unset($this->request->data[$k]);\n                    $this->request->data[strtolower(substr($k, 6))] = $v;\n                } else if (in_array(strtolower($k), $overrideAbleParams)) {\n                    unset($this->request->data[$k]);\n                    $this->request->data[strtolower($k)] = $v;\n                }\n            }\n            foreach ($overrideAbleParams as $oap) {\n                if (isset($this->request->data[$oap])) {\n                    $passedArgs['search' . $oap] = $this->request->data[$oap];\n                }\n            }\n            foreach ($paginationParams as $paginationParam) {\n                if (isset($this->request->data[$paginationParam])) {\n                    $passedArgs[$paginationParam] = $this->request->data[$paginationParam];\n                }\n            }\n        }\n        $this->set('passedArgs', json_encode($passedArgs));\n        // check each of the passed arguments whether they're a filter (could also be a sort for example) and if yes, add it to the pagination conditions\n        $passedArgsArray = $this->__setIndexFilterConditions($passedArgs, $urlparams);\n        if (!$this->_isRest()) {\n            $this->paginate['contain'] = array_merge($this->paginate['contain'], array('User.email', 'EventTag'));\n        } else {\n            $this->paginate['contain'] = array_merge($this->paginate['contain'], array('User.email'));\n        }\n        $this->set('urlparams', $urlparams);\n        $this->set('passedArgsArray', $passedArgsArray);\n        $this->paginate = Set::merge($this->paginate, array('contain' => array(\n            'ThreatLevel' => array(\n                'fields' => array(\n                    'ThreatLevel.name'))\n            ),\n        ));\n        $this->loadModel('GalaxyCluster');\n\n        // for REST, don't use the pagination. With this, we'll escape the limit of events shown on the index.\n        if ($this->_isRest()) {\n            $rules = array();\n            $fieldNames = array_keys($this->Event->getColumnTypes());\n            $directions = array('ASC', 'DESC');\n            if (isset($passedArgs['sort']) && in_array($passedArgs['sort'], $fieldNames)) {\n                if (isset($passedArgs['direction']) && in_array(strtoupper($passedArgs['direction']), $directions)) {\n                    $rules['order'] = array('Event.' . $passedArgs['sort'] => $passedArgs['direction']);\n                } else {\n                    $rules['order'] = array('Event.' . $passedArgs['sort'] => 'ASC');\n                }\n            }\n            $rules['contain'] = $this->paginate['contain'];\n            if (isset($this->paginate['conditions'])) {\n                $rules['conditions'] = $this->paginate['conditions'];\n            }\n            if (!empty($passedArgs['searchminimal']) || !empty($passedArgs['minimal'])) {\n                unset($rules['contain']);\n                $rules['recursive'] = -1;\n                $rules['fields'] = array('id', 'timestamp', 'sighting_timestamp', 'published', 'uuid');\n                $rules['contain'] = array('Orgc.uuid');\n            }\n            $paginationRules = array('page', 'limit', 'sort', 'direction', 'order');\n            foreach ($paginationRules as $paginationRule) {\n                if (isset($passedArgs[$paginationRule])) {\n                    $rules[$paginationRule] = $passedArgs[$paginationRule];\n                }\n            }\n            $counting_rules = $rules;\n            if (!empty($counting_rules['limit'])) {\n                unset($counting_rules['limit']);\n            }\n            if (!empty($counting_rules['page'])) {\n                unset($counting_rules['page']);\n            }\n            $absolute_total = $this->Event->find('count', $counting_rules);\n            if (empty($rules['limit'])) {\n                $events = array();\n                $i = 1;\n                $continue = true;\n                $rules['limit'] = 20000;\n                while ($continue) {\n                    $rules['page'] = $i;\n                    $temp = $this->Event->find('all', $rules);\n                    if (!empty($temp)) {\n                        $events = array_merge($events, $temp);\n                    } else {\n                        $continue = false;\n                    }\n                    $i += 1;\n                }\n            } else {\n                $events = $this->Event->find('all', $rules);\n            }\n            $total_events = count($events);\n            foreach ($events as $k => $event) {\n                if (empty($event['SharingGroup']['name'])) {\n                    unset($events[$k]['SharingGroup']);\n                }\n            }\n            if (empty($passedArgs['searchminimal']) && empty($passedArgs['minimal'])) {\n                $passes = ceil($total_events / 1000);\n                for ($i = 0; $i < $passes; $i++) {\n                    $event_tag_objects = array();\n                    $event_tag_ids = array();\n                    $elements = 1000;\n                    if ($i == ($passes-1)) {\n                        $elements = ($total_events % 1000);\n                    }\n                    for ($j = 0; $j < $elements; $j++) {\n                        $event_tag_ids[$events[($i*1000) + $j]['Event']['id']] = array();\n                    }\n                    $eventTags = $this->Event->EventTag->find('all', array(\n                        'recursive' => -1,\n                        'conditions' => array(\n                            'EventTag.event_id' => array_keys($event_tag_ids)\n                        ),\n                        'contain' => array(\n                            'Tag' => array(\n                                'conditions' => array('Tag.exportable' => 1),\n                                'fields' => array('Tag.id', 'Tag.name', 'Tag.colour')\n                            )\n                        )\n                    ));\n                    foreach ($eventTags as $ket => $et) {\n                        if (empty($et['Tag']['id'])) {\n                            unset($eventTags[$ket]);\n                        } else {\n                            $et['EventTag']['Tag'] = $et['Tag'];\n                            unset($et['Tag']);\n                            if (empty($event_tag_objects[$et['EventTag']['event_id']])) {\n                                $event_tag_objects[$et['EventTag']['event_id']] = array($et['EventTag']);\n                            } else {\n                                $event_tag_objects[$et['EventTag']['event_id']][] = $et['EventTag'];\n                            }\n                        }\n                    }\n                    $eventTags = array_values($eventTags);\n                    for ($j = 0; $j < $elements; $j++) {\n                        if (!empty($event_tag_objects[$events[($i*1000) + $j]['Event']['id']])) {\n                            $events[($i*1000) + $j]['EventTag'] = $event_tag_objects[$events[($i*1000) + $j]['Event']['id']];\n                        } else {\n                            $events[($i*1000) + $j]['EventTag'] = array();\n                        }\n                    }\n                }\n                $events = $this->GalaxyCluster->attachClustersToEventIndex($events);\n                foreach ($events as $key => $event) {\n                    $temp = $events[$key]['Event'];\n                    $temp['Org'] = $event['Org'];\n                    $temp['Orgc'] = $event['Orgc'];\n                    unset($temp['user_id']);\n                    $rearrangeObjects = array('GalaxyCluster', 'EventTag', 'SharingGroup');\n                    foreach ($rearrangeObjects as $ro) {\n                        if (isset($event[$ro])) {\n                            $temp[$ro] = $event[$ro];\n                        }\n                    }\n                    $events[$key] = $temp;\n                }\n                if ($this->response->type() === 'application/xml') {\n                    $events = array('Event' => $events);\n                }\n                return $this->RestResponse->viewData($events, $this->response->type(), false, false, false, array('X-Result-Count' => $absolute_total));\n            } else {\n                foreach ($events as $key => $event) {\n                    $event['Event']['orgc_uuid'] = $event['Orgc']['uuid'];\n                    $events[$key] = $event['Event'];\n                }\n                return $this->RestResponse->viewData($events, $this->response->type(), false, false, false, array('X-Result-Count' => $absolute_total));\n            }\n        } else {\n            $events = $this->paginate();\n            foreach ($events as $k => $event) {\n                if (empty($event['SharingGroup']['name'])) {\n                    unset($events[$k]['SharingGroup']);\n                }\n            }\n            if (count($events) == 1 && isset($this->passedArgs['searchall'])) {\n                $this->redirect(array('controller' => 'events', 'action' => 'view', $events[0]['Event']['id']));\n            }\n            $events = $this->Event->attachTagsToEvents($events);\n            if (Configure::read('MISP.showCorrelationsOnIndex')) {\n                $events = $this->Event->attachCorrelationCountToEvents($this->Auth->user(), $events);\n            }\n            if (Configure::read('MISP.showSightingsCountOnIndex')) {\n                $events = $this->Event->attachSightingsCountToEvents($this->Auth->user(), $events);\n            }\n            if (Configure::read('MISP.showProposalsCountOnIndex')) {\n                $events = $this->Event->attachProposalsCountToEvents($this->Auth->user(), $events);\n            }\n            if (Configure::read('MISP.showDiscussionsCountOnIndex')) {\n                $events = $this->Event->attachDiscussionsCountToEvents($this->Auth->user(), $events);\n            }\n            $events = $this->GalaxyCluster->attachClustersToEventIndex($events, true);\n            $this->set('events', $events);\n        }\n\n        if (!$this->Event->User->getPGP($this->Auth->user('id')) && Configure::read('GnuPG.onlyencrypted')) {\n            // No GnuPG\n            if (Configure::read('SMIME.enabled') && !$this->Event->User->getCertificate($this->Auth->user('id'))) {\n                // No GnuPG and No SMIME\n                $this->Flash->info(__('No x509 certificate or GnuPG key set in your profile. To receive emails, submit your public certificate or GnuPG key in your profile.'));\n            } elseif (!Configure::read('SMIME.enabled')) {\n                $this->Flash->info(__('No GnuPG key set in your profile. To receive emails, submit your public key in your profile.'));\n            }\n        } elseif ($this->Auth->user('autoalert') && !$this->Event->User->getPGP($this->Auth->user('id')) && Configure::read('GnuPG.bodyonlyencrypted')) {\n            // No GnuPG & autoalert\n            if ($this->Auth->user('autoalert') && Configure::read('SMIME.enabled') && !$this->Event->User->getCertificate($this->Auth->user('id'))) {\n                // No GnuPG and No SMIME & autoalert\n                $this->Flash->info(__('No x509 certificate or GnuPG key set in your profile. To receive attributes in emails, submit your public certificate or GnuPG key in your profile.'));\n            } elseif (!Configure::read('SMIME.enabled')) {\n                $this->Flash->info(__('No GnuPG key set in your profile. To receive attributes in emails, submit your public key in your profile.'));\n            }\n        }\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('analysisLevels', $this->Event->analysisLevels);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n        $this->set('shortDist', $this->Event->shortDist);\n        $this->set('distributionData', $this->genDistributionGraph(-1));\n        if ($this->params['ext'] === 'csv') {\n            App::uses('CsvExport', 'Export');\n            $export = new CsvExport();\n            return $this->RestResponse->viewData($export->eventIndex($events), 'csv');\n        }\n        if ($this->request->is('ajax')) {\n            $this->autoRender = false;\n            $this->layout = false;\n            $this->render('ajax/index');\n        }\n    }\n\n    public function filterEventIndex()\n    {\n        $passedArgsArray = array();\n        $filtering = array(\n            'published' => 2,\n            'org' => array('OR' => array(), 'NOT' => array()),\n            'tag' => array('OR' => array(), 'NOT' => array()),\n            'eventid' => array('OR' => array(), 'NOT' => array()),\n            'date' => array('from' => \"\", 'until' => \"\"),\n            'eventinfo' => array('OR' => array(), 'NOT' => array()),\n            'threatlevel' => array('OR' => array(), 'NOT' => array()),\n            'distribution' => array('OR' => array(), 'NOT' => array()),\n            'sharinggroup' => array('OR' => array(), 'NOT' => array()),\n            'analysis' => array('OR' => array(), 'NOT' => array()),\n            'attribute' => array('OR' => array(), 'NOT' => array()),\n            'hasproposal' => 2,\n        );\n\n        if ($this->_isSiteAdmin()) {\n            $filtering['email'] = array('OR' => array(), 'NOT' => array());\n        }\n\n        foreach ($this->passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                $searchTerm = substr($k, 6);\n                switch ($searchTerm) {\n                    case 'published':\n                    case 'hasproposal':\n                        $filtering[$searchTerm] = $v;\n                        break;\n                    case 'Datefrom':\n                        $filtering['date']['from'] = $v;\n                        break;\n                    case 'Dateuntil':\n                        $filtering['date']['until'] = $v;\n                        break;\n                    case 'email':\n                    case 'org':\n                    case 'eventid':\n                    case 'tag':\n                    case 'eventinfo':\n                    case 'attribute':\n                    case 'threatlevel':\n                    case 'distribution':\n                    case 'sharinggroup':\n                    case 'analysis':\n                        if ($v == \"\" || ($searchTerm == 'email' && !$this->_isSiteAdmin())) {\n                            continue 2;\n                        }\n                        $pieces = explode('|', $v);\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                $filtering[$searchTerm]['NOT'][] = substr($piece, 1);\n                            } else {\n                                $filtering[$searchTerm]['OR'][] = $piece;\n                            }\n                        }\n                        break;\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        $this->set('filtering', json_encode($filtering));\n        $tags = $this->Event->EventTag->Tag->find('all', array('recursive' => -1));\n        $tagNames = array();\n        $tagJSON = array();\n        foreach ($tags as $k => $v) {\n            $tagNames[$v['Tag']['id']] = $v['Tag']['name'];\n            $tagJSON[] = array('id' => $v['Tag']['id'], 'value' => h($v['Tag']['name']));\n        }\n        $conditions = array();\n        if (!$this->_isSiteAdmin()) {\n            $eIds = $this->Event->fetchEventIds($this->Auth->user(), false, false, false, true);\n            $conditions['AND'][] = array('Event.id' => $eIds);\n        }\n        $rules = array('published', 'eventid', 'tag', 'date', 'eventinfo', 'threatlevel', 'distribution', 'sharinggroup', 'analysis', 'attribute', 'hasproposal');\n        if ($this->_isSiteAdmin()) {\n            $rules[] = 'email';\n        }\n        if (Configure::read('MISP.showorg')) {\n            $orgs = $this->Event->Orgc->find('list', array(\n                'conditions' => array(),\n                'recursive' => -1,\n                'fields' => array('Orgc.id', 'Orgc.name'),\n                'sort' => array('lower(Orgc.name) asc')\n            ));\n            $this->set('showorg', true);\n            $this->set('orgs', $orgs);\n            $rules[] = 'org';\n        } else {\n            $this->set('showorg', false);\n        }\n        $sharingGroups = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', true);\n        $this->set('sharingGroups', $sharingGroups);\n        $rules = $this->_arrayToValuesIndexArray($rules);\n        $this->set('tags', $tagNames);\n        $this->set('tagJSON', json_encode($tagJSON));\n        $this->set('rules', $rules);\n        $this->set('baseurl', Configure::read('MISP.baseurl'));\n        $this->layout = 'ajax';\n    }\n\n    /*\n     * Search for a value on an attribute level for a specific field.\n     * $attribute : (array) an attribute\n     * $fields : (array) list of keys in attribute to search in\n     * $searchValue : Values to search ( '|' is the separator)\n     * returns true on match\n     */\n    private function __valueInFieldAttribute($attribute, $fields, $searchValue)\n    {\n        foreach ($attribute as $k => $v) { // look in attributes line\n            if (is_string($v)) {\n                foreach ($fields as $field) {\n                    if (strpos(\".\", $field) === false) { // check sub array after\n                        // check for key in attribut\n                        if (isset($attribute[$field])) {\n                            $temp_value = strtolower($attribute[$field]);\n                            $temp_search = strtolower($searchValue);\n                            $temp_searches = explode('|', $temp_search);\n                            foreach ($temp_searches as $s) {\n                                if (strpos($temp_value, $s) !==false) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                // check for tag in attribut maybe for other thing later\n                if ($k === 'AttributeTag') {\n                    foreach ($v as $tag) {\n                        foreach ($fields as $field) {\n                            if (strpos(strtolower($field), \"tag.\") !== false) { // check sub array\n                                $tagKey = explode('tag.', strtolower($field))[1];\n                                if (isset($tag['Tag'][$tagKey])) {\n                                    $temp_value = strtolower($tag['Tag'][$tagKey]);\n                                    $temp_search = strtolower($searchValue);\n                                    if (strpos($temp_value, $temp_search) !==false) {\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public function viewEventAttributes($id, $all = false)\n    {\n        $filterData = array(\n            'request' => $this->request,\n            'paramArray' => $this->acceptedFilteringNamedParams,\n            'named_params' => $this->params['named']\n        );\n        $exception = false;\n        $filters = $this->_harvestParameters($filterData, $exception);\n\n        if (isset($filters['focus'])) {\n            $this->set('focus', $filters['focus']);\n        }\n        $conditions = array('eventid' => $id);\n        if (isset($filters['extended'])) {\n            $conditions['extended'] = 1;\n            $this->set('extended', 1);\n        } else {\n            $this->set('extended', 0);\n        }\n        if (!empty($filters['overrideLimit'])) {\n            $conditions['overrideLimit'] = 1;\n        }\n        if (isset($filters['deleted'])) {\n            $conditions['deleted'] = $filters['deleted'] == 2 ? 0 : [0, 1];\n            if ($filters['deleted'] == 2) { // not-deleted only\n                $conditions['deleted'] = 0;\n            } elseif ($filters['deleted'] == 1) { // deleted only\n                $conditions['deleted'] = 1;\n            } else { // both\n                $conditions['deleted'] = [0, 1];\n            }\n        }\n        if (isset($filters['toIDS']) && $filters['toIDS'] != 0) {\n            $conditions['to_ids'] = $filters['toIDS'] == 2 ? 0 : 1;\n        }\n        $conditions['includeFeedCorrelations'] = true;\n        if (!isset($filters['includeServerCorrelations'])) {\n            $conditions['includeServerCorrelations'] = 1;\n            if ($this->_isRest()) {\n                $conditions['includeServerCorrelations'] = 0;\n            }\n        } else {\n            $conditions['includeServerCorrelations'] = $filters['includeServerCorrelations'];\n        }\n        $conditions['includeAllTags'] = true;\n        $conditions['includeGranularCorrelations'] = 1;\n        if (!empty($filters['includeRelatedTags'])) {\n            $this->set('includeRelatedTags', 1);\n            $conditions['includeRelatedTags'] = 1;\n        } else {\n            $this->set('includeRelatedTags', 0);\n        }\n        if (!empty($filters['includeDecayScore'])) {\n            $this->set('includeDecayScore', 1);\n            $conditions['includeDecayScore'] = 1;\n        } else {\n            $this->set('includeDecayScore', 0);\n        }\n\n        $results = $this->Event->fetchEvent($this->Auth->user(), $conditions);\n        if (empty($results)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $event = $results[0];\n\n        $attributeTagsName = $this->Event->Attribute->AttributeTag->extractAttributeTagsNameFromEvent($event, 'both');\n        $this->set('attributeTags', array_values($attributeTagsName['tags']));\n        $this->set('attributeClusters', array_values($attributeTagsName['clusters']));\n\n        if (isset($filters['distribution'])) {\n            if (!is_array($filters['distribution'])) {\n                $filters['distribution'] = array($filters['distribution']);\n            }\n            $temp = implode('|', $filters['distribution']);\n            $this->__applyQueryString($event, $temp, 'distribution');\n        }\n        if (isset($filters['searchFor']) && $filters['searchFor'] !== '') {\n            if (isset($filters['filterColumnsOverwrite'])) {\n                $this->__applyQueryString($event, $filters['searchFor'], $filters['filterColumnsOverwrite']);\n            } else {\n                $this->__applyQueryString($event, $filters['searchFor']);\n            }\n            $this->set('passedArgsArray', array('all' => $filters['searchFor']));\n        }\n        if (isset($filters['taggedAttributes']) && $filters['taggedAttributes'] !== '') {\n            $this->__applyQueryString($event, $filters['taggedAttributes'], 'Tag.name');\n        }\n        if (isset($filters['galaxyAttachedAttributes']) && $filters['galaxyAttachedAttributes'] !== '') {\n            $this->__applyQueryString($event, $filters['galaxyAttachedAttributes'], 'Tag.name');\n        }\n        $emptyEvent = (empty($event['Object']) && empty($event['Attribute']));\n        $this->set('emptyEvent', $emptyEvent);\n\n        // remove galaxies tags\n        $this->loadModel('Taxonomy');\n        foreach ($event['Object'] as $k => $object) {\n            if (isset($object['Attribute'])) {\n                foreach ($object['Attribute'] as $k2 => $attribute) {\n                    $this->Event->Attribute->removeGalaxyClusterTags($event['Object'][$k]['Attribute'][$k2]);\n\n                    $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($attribute['AttributeTag']);\n                    foreach ($tagConflicts['global'] as $tagConflict) {\n                        $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n                    }\n                    foreach ($tagConflicts['local'] as $tagConflict) {\n                        $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n                    }\n                    $event['Object'][$k]['Attribute'][$k2]['tagConflicts'] = $tagConflicts;\n                }\n            }\n        }\n        foreach ($event['Attribute'] as $k => $attribute) {\n            $this->Event->Attribute->removeGalaxyClusterTags($event['Attribute'][$k]);\n\n            $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($attribute['AttributeTag']);\n            foreach ($tagConflicts['global'] as $tagConflict) {\n                $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n            }\n            foreach ($tagConflicts['local'] as $tagConflict) {\n                $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n            }\n            $event['Attribute'][$k]['tagConflicts'] = $tagConflicts;\n        }\n        if (empty($this->passedArgs['sort'])) {\n            $filters['sort'] = 'timestamp';\n            $filters['direction'] = 'desc';\n        }\n        $sightingsData = $this->Event->getSightingData($event);\n        $this->set('sightingsData', $sightingsData);\n        $params = $this->Event->rearrangeEventForView($event, $filters, $all, $sightingsData);\n        if (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')) {\n            $this->loadModel('Sightingdb');\n            $event = $this->Sightingdb->attachToEvent($event, $this->Auth->user());\n        }\n        $this->params->params['paging'] = array($this->modelClass => $params);\n        // workaround to get the event dates in to the attribute relations\n        $relatedDates = array();\n        if (isset($event['RelatedEvent'])) {\n            foreach ($event['RelatedEvent'] as $relation) {\n                $relatedDates[$relation['Event']['id']] = $relation['Event']['date'];\n            }\n            if (isset($event['RelatedAttribute'])) {\n                foreach ($event['RelatedAttribute'] as $key => $relatedAttribute) {\n                    foreach ($relatedAttribute as $key2 => $relation) {\n                        $event['RelatedAttribute'][$key][$key2]['date'] = $relatedDates[$relation['id']];\n                    }\n                }\n            }\n        }\n        $this->set('event', $event);\n        $dataForView = array(\n            'Attribute' => array('attrDescriptions' => 'fieldDescriptions', 'distributionDescriptions' => 'distributionDescriptions', 'distributionLevels' => 'distributionLevels', 'shortDist' => 'shortDist'),\n            'Event' => array('eventDescriptions' => 'fieldDescriptions', 'analysisDescriptions' => 'analysisDescriptions', 'analysisLevels' => 'analysisLevels')\n        );\n        foreach ($dataForView as $m => $variables) {\n            if ($m === 'Event') {\n                $currentModel = $this->Event;\n            } elseif ($m === 'Attribute') {\n                $currentModel = $this->Event->Attribute;\n            }\n            foreach ($variables as $alias => $variable) {\n                $this->set($alias, $currentModel->{$variable});\n            }\n        }\n        if (Configure::read('Plugin.Enrichment_services_enable')) {\n            $this->loadModel('Module');\n            $modules = $this->Module->getEnabledModules($this->Auth->user());\n            if (!empty($modules) && is_array($modules)) {\n                foreach ($modules as $k => $v) {\n                    if (isset($v['restrict'])) {\n                        if (!$this->_isSiteAdmin() && $v['restrict'] != $this->Auth->user('org_id')) {\n                            unset($modules[$k]);\n                        }\n                    }\n                }\n            }\n            $this->set('modules', $modules);\n        }\n        if (Configure::read('Plugin.Cortex_services_enable')) {\n            $this->loadModel('Module');\n            $cortex_modules = $this->Module->getEnabledModules($this->Auth->user(), false, 'Cortex');\n            $this->set('cortex_modules', $cortex_modules);\n        }\n        $deleted = 0;\n        if (isset($filters['deleted'])) {\n            $deleted = $filters['deleted'] == 2 ? 0 : 1;\n        }\n        $this->set('includeSightingdb', (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')));\n        $this->set('deleted', $deleted);\n        $this->set('typeGroups', array_keys($this->Event->Attribute->typeGroupings));\n        $this->set('attributeFilter', isset($filters['attributeFilter']) ? $filters['attributeFilter'] : 'all');\n        $this->set('filters', $filters);\n        $advancedFiltering = $this->__checkIfAdvancedFiltering($filters);\n        $this->set('advancedFilteringActive', $advancedFiltering['active'] ? 1 : 0);\n        $this->set('advancedFilteringActiveRules', $advancedFiltering['activeRules']);\n        $this->set('defaultFilteringRules', $this->defaultFilteringRules);\n        $this->disableCache();\n        $this->layout = 'ajax';\n        $this->loadModel('Sighting');\n        $uriArray = explode('/', $this->params->here);\n        foreach ($uriArray as $k => $v) {\n            if (strpos($v, ':')) {\n                $temp = explode(':', $v);\n                if ($temp[0] == 'focus') {\n                    unset($uriArray[$k]);\n                }\n            }\n            $this->params->here = implode('/', $uriArray);\n        }\n        if (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')) {\n            $this->set('sightingdbs', $this->Sightingdb->getSightingdbList($this->Auth->user()));\n        }\n        $this->set('sightingTypes', $this->Sighting->type);\n        $this->set('currentUri', $this->params->here);\n        $this->layout = false;\n        $this->render('/Elements/eventattribute');\n    }\n\n    private function __viewUI($event, $continue, $fromEvent)\n    {\n        $this->loadModel('Taxonomy');\n        $filterData = array(\n            'request' => $this->request,\n            'paramArray' => $this->acceptedFilteringNamedParams,\n            'named_params' => $this->params['named']\n        );\n        $exception = false;\n        $warningTagConflicts = array();\n        $filters = $this->_harvestParameters($filterData, $exception);\n\n        $this->loadModel('GalaxyCluster');\n        if (!$this->_isRest()) {\n            //$attack = $this->GalaxyCluster->Galaxy->constructAttackReport($event);\n        }\n        $emptyEvent = (empty($event['Object']) && empty($event['Attribute']));\n        $this->set('emptyEvent', $emptyEvent);\n        $attributeCount = isset($event['Attribute']) ? count($event['Attribute']) : 0;\n        $objectCount = isset($event['Object']) ? count($event['Object']) : 0;\n        $oldest_timestamp = false;\n        if (!empty($event['Object'])) {\n            foreach ($event['Object'] as $k => $object) {\n                if (!empty($object['Attribute'])) {\n                    foreach ($object['Attribute'] as $attribute) {\n                        if ($oldest_timestamp == false || $oldest_timestamp > $attribute['timestamp']) {\n                            $oldest_timestamp = $attribute['timestamp'];\n                        }\n                    }\n                    $attributeCount += count($object['Attribute']);\n                }\n            }\n        }\n        $this->set('attribute_count', $attributeCount);\n        $this->set('object_count', $objectCount);\n        // set the data for the contributors / history field\n        $contributors = $this->Event->ShadowAttribute->getEventContributors($event['Event']['id']);\n        if ($this->userRole['perm_publish'] && $event['Event']['orgc_id'] == $this->Auth->user('org_id')) {\n            $proposalStatus = false;\n            if (isset($event['ShadowAttribute']) && !empty($event['ShadowAttribute'])) {\n                $proposalStatus = true;\n            }\n            if (!$proposalStatus && !empty($event['Attribute'])) {\n                foreach ($event['Attribute'] as $temp) {\n                    if (isset($temp['ShadowAttribute']) && !empty($temp['ShadowAttribute'])) {\n                        $proposalStatus = true;\n                    }\n                }\n            }\n            $mess = $this->Session->read('Message');\n            if ($proposalStatus && empty($mess)) {\n                $this->Flash->info('This event has active proposals for you to accept or discard.');\n            }\n        }\n        // set the pivot data\n        $this->helpers[] = 'Pivot';\n        if ($continue) {\n            $data = $this->__continuePivoting($event['Event']['id'], $event['Event']['info'], $event['Event']['date'], $fromEvent);\n        } else {\n            $data = $this->__startPivoting($event['Event']['id'], $event['Event']['info'], $event['Event']['date']);\n        }\n        $pivot = $this->Session->read('pivot_thread');\n        $this->__arrangePivotVertical($pivot);\n        $this->__setDeletable($pivot, $event['Event']['id'], true);\n        $this->set('allPivots', $this->Session->read('pivot_thread'));\n        $this->set('pivot', $pivot);\n        // set data for the view, the event is already set in view()\n        $dataForView = array(\n                'Attribute' => array('attrDescriptions' => 'fieldDescriptions', 'distributionDescriptions' => 'distributionDescriptions', 'distributionLevels' => 'distributionLevels', 'shortDist' => 'shortDist'),\n                'Event' => array('eventDescriptions' => 'fieldDescriptions', 'analysisDescriptions' => 'analysisDescriptions', 'analysisLevels' => 'analysisLevels')\n        );\n\n        // workaround to get the event dates in to the attribute relations and number of correlation per related event\n        $relatedDates = array();\n        $relatedEventCorrelationCount = array();\n        if (!empty($event['RelatedEvent'])) {\n            foreach ($event['RelatedEvent'] as $relation) {\n                $relatedDates[$relation['Event']['id']] = $relation['Event']['date'];\n            }\n            if (!empty($event['RelatedAttribute'])) {\n                foreach ($event['RelatedAttribute'] as $key => $relatedAttribute) {\n                    foreach ($relatedAttribute as $key2 => $relation) {\n                        if (!empty($relatedDates[$relation['id']])) {\n                            $event['RelatedAttribute'][$key][$key2]['date'] = $relatedDates[$relation['id']];\n                        }\n                        $relatedEventCorrelationCount[$relation['id']][$relation['value']] = 1;\n                    }\n                }\n            }\n        }\n        foreach ($relatedEventCorrelationCount as $key => $relation) {\n            $relatedEventCorrelationCount[$key] = count($relatedEventCorrelationCount[$key]);\n        }\n\n        foreach ($dataForView as $m => $variables) {\n            if ($m === 'Event') {\n                $currentModel = $this->Event;\n            } elseif ($m === 'Attribute') {\n                $currentModel = $this->Event->Attribute;\n            }\n            foreach ($variables as $alias => $variable) {\n                $this->set($alias, $currentModel->{$variable});\n            }\n        }\n\n        $this->Event->removeGalaxyClusterTags($event);\n\n        $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($event['EventTag']);\n        foreach ($tagConflicts['global'] as $tagConflict) {\n            $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n        }\n        foreach ($tagConflicts['local'] as $tagConflict) {\n            $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n        }\n        $this->set('tagConflicts', $tagConflicts);\n\n        $startDate = null;\n        $modificationMap = array();\n        foreach ($event['Attribute'] as $k => $attribute) {\n            if ($oldest_timestamp == false || $oldest_timestamp > $attribute['timestamp']) {\n                $oldest_timestamp = $attribute['timestamp'];\n            }\n            if ($startDate === null || $attribute['timestamp'] < $startDate) {\n                $startDate = $attribute['timestamp'];\n            }\n            $modDate = date(\"Y-m-d\", $attribute['timestamp']);\n            $modificationMap[$modDate] = empty($modificationMap[$modDate])? 1 : $modificationMap[date(\"Y-m-d\", $attribute['timestamp'])] + 1;\n\n            $this->Event->Attribute->removeGalaxyClusterTags($event['Attribute'][$k]);\n\n            $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($attribute['AttributeTag']);\n            foreach ($tagConflicts['global'] as $tagConflict) {\n                $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n            }\n            foreach ($tagConflicts['local'] as $tagConflict) {\n                $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n            }\n            $event['Attribute'][$k]['tagConflicts'] = $tagConflicts;\n        }\n        $attributeTagsName = $this->Event->Attribute->AttributeTag->extractAttributeTagsNameFromEvent($event, 'both');\n        $this->set('attributeTags', array_values($attributeTagsName['tags']));\n        $this->set('attributeClusters', array_values($attributeTagsName['clusters']));\n        $startDate = $event['Event']['timestamp'];\n        $modDate = date(\"Y-m-d\", $event['Event']['timestamp']);\n        $modificationMap[$modDate] = 1;\n        foreach ($event['Object'] as $k => $object) {\n            if ($startDate === null || $object['timestamp'] < $startDate) {\n                $startDate = $object['timestamp'];\n            }\n            $modDate = date(\"Y-m-d\", $object['timestamp']);\n            $modificationMap[$modDate] = empty($modificationMap[$modDate])? 1 : $modificationMap[date(\"Y-m-d\", $object['timestamp'])] + 1;\n            if (!empty($object['Attribute'])) {\n                foreach ($object['Attribute'] as $k2 => $attribute) {\n                    if ($startDate === null || $attribute['timestamp'] < $startDate) {\n                        $startDate = $attribute['timestamp'];\n                    }\n                    $modDate = date(\"Y-m-d\", $attribute['timestamp']);\n                    $modificationMap[$modDate] = empty($modificationMap[$modDate])? 1 : $modificationMap[date(\"Y-m-d\", $attribute['timestamp'])] + 1;\n\n                    $this->Event->Attribute->removeGalaxyClusterTags($event['Object'][$k]['Attribute'][$k2]);\n\n                    $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($attribute['AttributeTag']);\n                    foreach ($tagConflicts['global'] as $tagConflict) {\n                        $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n                    }\n                    foreach ($tagConflicts['local'] as $tagConflict) {\n                        $warningTagConflicts[$tagConflict['taxonomy']['Taxonomy']['namespace']] = $tagConflict['taxonomy'];\n                    }\n                    $event['Object'][$k]['Attribute'][$k2]['tagConflicts'] = $tagConflicts;\n                }\n            }\n        }\n        $this->set('warningTagConflicts', $warningTagConflicts);\n        $filters['sort'] = 'timestamp';\n        $filters['direction'] = 'desc';\n        if (isset($filters['distribution'])) {\n            if (!is_array($filters['distribution'])) {\n                $filters['distribution'] = array($filters['distribution']);\n            }\n            $temp = implode('|', $filters['distribution']);\n            $this->__applyQueryString($event, $temp, 'distribution');\n        }\n        $modificationMapCSV = 'Date,Close\\n';\n        $startDate = array_keys($modificationMap);\n        sort($startDate);\n        $startDate = $startDate[0];\n        $this->set('startDate', $startDate);\n        $to = date('Y-m-d', time());\n        if ((strtotime($to) - 172800) > $startDate) {\n            $startDate = date('Y-m-d', strtotime($to) - 172800);\n        }\n        for ($date = $startDate; strtotime($date) <= strtotime($to); $date = date('Y-m-d', strtotime(\"+1 day\", strtotime($date)))) {\n            if (isset($modificationMap[$date])) {\n                $modificationMapCSV .= $date . ',' . $modificationMap[$date] . '\\n';\n            } else {\n                $modificationMapCSV .= $date . ',0\\n';\n            }\n        }\n        unset($modificationMap);\n        $sightingsData = $this->Event->getSightingData($event);\n        $this->set('sightingsData', $sightingsData);\n        $params = $this->Event->rearrangeEventForView($event, $filters, false, $sightingsData);\n        if (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')) {\n            $this->loadModel('Sightingdb');\n            $event = $this->Sightingdb->attachToEvent($event, $this->Auth->user());\n        }\n        $this->params->params['paging'] = array($this->modelClass => $params);\n        $this->set('event', $event);\n        $extensionParams = array(\n            'conditions' => array(\n                'Event.extends_uuid' => $event['Event']['uuid']\n            )\n        );\n        $extensions = $this->Event->fetchSimpleEvents($this->Auth->user(), $extensionParams);\n        $this->set('extensions', $extensions);\n        if (!empty($event['Event']['extends_uuid'])) {\n            $extendedEvent = $this->Event->fetchSimpleEvents($this->Auth->user(), array('conditions' => array('Event.uuid' => $event['Event']['extends_uuid'])));\n            if (empty($extendedEvent)) {\n                $extendedEvent = $event['Event']['extends_uuid'];\n            }\n            $this->set('extendedEvent', $extendedEvent);\n        }\n        if (Configure::read('MISP.delegation')) {\n            $this->loadModel('EventDelegation');\n            $delegationConditions = array('EventDelegation.event_id' => $event['Event']['id']);\n            if (!$this->_isSiteAdmin() && $this->userRole['perm_publish']) {\n                $delegationConditions['OR'] = array('EventDelegation.org_id' => $this->Auth->user('org_id'),\n                                                    'EventDelegation.requester_org_id' => $this->Auth->user('org_id'));\n            }\n            $this->set('delegationRequest', $this->EventDelegation->find('first', array(\n                'conditions' => $delegationConditions,\n                'recursive' => -1,\n                'contain' => array('Org', 'RequesterOrg')\n            )));\n        }\n        if (Configure::read('Plugin.Enrichment_services_enable')) {\n            $this->loadModel('Module');\n            $modules = $this->Module->getEnabledModules($this->Auth->user());\n            if (is_array($modules)) {\n                foreach ($modules as $k => $v) {\n                    if (isset($v['restrict'])) {\n                        if ($this->_isSiteAdmin() && $v['restrict'] != $this->Auth->user('org_id')) {\n                            unset($modules[$k]);\n                        }\n                    }\n                }\n            }\n            $this->set('modules', $modules);\n        }\n        if (Configure::read('Plugin.Cortex_services_enable')) {\n            $this->loadModel('Module');\n            $cortex_modules = $this->Module->getEnabledModules($this->Auth->user(), false, 'Cortex');\n            $this->set('cortex_modules', $cortex_modules);\n        }\n        $this->set('contributors', $contributors);\n        $this->set('typeGroups', array_keys($this->Event->Attribute->typeGroupings));\n        $this->loadModel('Sighting');\n        $this->set('sightingTypes', $this->Sighting->type);\n        $attributeUri = '/events/viewEventAttributes/' . $event['Event']['id'];\n        foreach ($this->params->named as $k => $v) {\n            if (!is_numeric($k)) {\n                if (is_array($v)) {\n                    foreach ($v as $value) {\n                        $attributeUri .= sprintf('/%s[]:%s', $k, $value);\n                    }\n                } else {\n                    $attributeUri .= sprintf('/%s:%s', $k, $v);\n                }\n            }\n        }\n        $orgTable = $this->Event->Orgc->find('list', array(\n            'fields' => array('Orgc.id', 'Orgc.name')\n        ));\n        if (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')) {\n            $this->set('sightingdbs', $this->Sightingdb->getSightingdbList($this->Auth->user()));\n        }\n        $this->set('includeSightingdb', (!empty($filters['includeSightingdb']) && Configure::read('Plugin.Sightings_sighting_db_enable')));\n        $this->set('relatedEventCorrelationCount', $relatedEventCorrelationCount);\n        $this->set('oldest_timestamp', $oldest_timestamp);\n        $this->set('required_taxonomies', $this->Event->getRequiredTaxonomies());\n        $this->set('orgTable', $orgTable);\n        $this->set('currentUri', $attributeUri);\n        $this->set('filters', $filters);\n        $advancedFiltering = $this->__checkIfAdvancedFiltering($filters);\n        $this->set('advancedFilteringActive', $advancedFiltering['active'] ? 1 : 0);\n        $this->set('advancedFilteringActiveRules', $advancedFiltering['activeRules']);\n        $this->set('defaultFilteringRules', $this->defaultFilteringRules);\n        $this->set('mitreAttackGalaxyId', $this->Event->GalaxyCluster->Galaxy->getMitreAttackGalaxyId());\n        $this->set('modificationMapCSV', $modificationMapCSV);\n        $this->set('title_for_layout', __('Event #%s', $event['Event']['id']));\n    }\n\n    public function view($id = null, $continue=false, $fromEvent=null)\n    {\n        // find the id of the event, change $id to it and proceed to read the event as if the ID was entered.\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $conditions = array('eventid' => $id);\n        if (!$this->_isRest()) {\n            $conditions['includeAllTags'] = true;\n        } else {\n            $conditions['includeAttachments'] = true;\n        }\n        $deleted = 0;\n        if (isset($this->params['named']['deleted'])) {\n            $deleted = $this->params['named']['deleted'];\n        }\n        if (isset($this->request->data['deleted'])) {\n            $deleted = $this->request->data['deleted'];\n        }\n        if (isset($deleted)) {\n            // workaround for old instances trying to pull events with both deleted / non deleted data\n            if (($this->userRole['perm_sync'] && $this->_isRest() && !$this->userRole['perm_site_admin']) && $deleted == 1) {\n                $conditions['deleted'] = array(0,1);\n            } else {\n                $conditions['deleted'] = $deleted == 2 ? array(0,1) : $deleted;\n            }\n        }\n        if (isset($this->params['named']['toIDS']) && $this->params['named']['toIDS'] != 0) {\n            $conditions['to_ids'] = $this->params['named']['toIDS'] == 2 ? 0 : 1;\n        }\n        if (isset($this->params['named']['includeRelatedTags']) && $this->params['named']['includeRelatedTags']) {\n            $conditions['includeRelatedTags'] = 1;\n        }\n        if (!empty($this->params['named']['includeDecayScore'])) {\n            $conditions['includeDecayScore'] = 1;\n        }\n        if (isset($this->params['named']['public']) && $this->params['named']['public']) {\n            $conditions['distribution'] = array(3, 5);\n        }\n        if (!empty($this->params['named']['overrideLimit']) && !$this->_isRest()) {\n            $conditions['overrideLimit'] = 1;\n        }\n        if (!empty($this->params['named']['excludeGalaxy'])) {\n            $conditions['excludeGalaxy'] = 1;\n        }\n        if (!empty($this->params['named']['extended']) || !empty($this->request->data['extended'])) {\n            $conditions['extended'] = 1;\n            $this->set('extended', 1);\n        } else {\n            $this->set('extended', 0);\n        }\n        $conditions['includeFeedCorrelations'] = 1;\n        if (!$this->_isRest()) {\n            $conditions['includeGranularCorrelations'] = 1;\n        } else if (!empty($this->params['named']['includeGranularCorrelations'])) {\n            $conditions['includeGranularCorrelations'] = 1;\n        }\n        if (!isset($this->params['named']['includeServerCorrelations'])) {\n            $conditions['includeServerCorrelations'] = 1;\n            if ($this->_isRest()) {\n                $conditions['includeServerCorrelations'] = 0;\n            }\n        } else {\n            $conditions['includeServerCorrelations'] = $this->params['named']['includeServerCorrelations'];\n        }\n        $results = $this->Event->fetchEvent($this->Auth->user(), $conditions);\n        if (!empty($this->params['named']['includeGranularCorrelations'])) {\n            foreach ($results as $k => $event) {\n                if (!empty($event['RelatedAttribute'])) {\n                    foreach ($event['RelatedAttribute'] as $attribute_id => $relation) {\n                        foreach ($event['Attribute'] as $k2 => $attribute) {\n                            if ((int)$attribute['id'] == $attribute_id) {\n                                $results[$k]['Attribute'][$k2]['RelatedAttribute'][] = $relation;\n                                break 2;\n                            }\n                        }\n                        foreach ($event['Object'] as $k2 => $object) {\n                            foreach ($object['Attribute'] as $k3 => $attribute) {\n                                if ((int)$attribute['id'] == $attribute_id) {\n                                    $results[$k]['Object'][$k2]['Attribute'][$k3]['RelatedAttribute'][] = $relation;\n                                    break 3;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (empty($results)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        //if the current user is an org admin AND event belongs to his/her org, fetch also the event creator info\n        if ($this->userRole['perm_admin'] && !$this->_isSiteAdmin() && ($results[0]['Org']['id'] == $this->Auth->user('org_id'))) {\n            $results[0]['User']['email'] = $this->User->field('email', array('id' => $results[0]['Event']['user_id']));\n        }\n        $event = $results[0];\n        if (isset($this->params['named']['searchFor']) && $this->params['named']['searchFor'] !== '') {\n            $this->__applyQueryString($event, $this->params['named']['searchFor']);\n        }\n        if (isset($this->params['named']['taggedAttributes']) && $this->params['named']['taggedAttributes'] !== '') {\n            $this->__applyQueryString($event, $this->params['named']['taggedAttributes'], 'Tag.name');\n        }\n        if (isset($this->params['named']['galaxyAttachedAttributes']) && $this->params['named']['galaxyAttachedAttributes'] !== '') {\n            $this->__applyQueryString($event, $this->params['named']['galaxyAttachedAttributes'], 'Tag.name');\n        }\n\n        if ($this->_isRest()) {\n            $this->set('event', $event);\n        }\n        $this->set('deleted', isset($deleted) ? ($deleted == 2 ? 0 : 1) : 0);\n        $this->set('includeRelatedTags', (!empty($this->params['named']['includeRelatedTags'])) ? 1 : 0);\n        $this->set('includeDecayScore', (!empty($this->params['named']['includeDecayScore'])) ? 1 : 0);\n        if (!$this->_isRest()) {\n            if ($this->_isSiteAdmin() && $results[0]['Event']['orgc_id'] !== $this->Auth->user('org_id')) {\n                $this->Flash->info(__('You are currently logged in as a site administrator and about to edit an event not belonging to your organisation. This goes against the sharing model of MISP. Use a normal user account for day to day work.'));\n            }\n            $this->__viewUI($event, $continue, $fromEvent);\n        }\n    }\n\n    private function __startPivoting($id, $info, $date)\n    {\n        $this->Session->write('pivot_thread', null);\n        $initial_pivot = array('id' => $id, 'info' => $info, 'date' => $date, 'depth' => 0, 'height' => 0, 'children' => array(), 'deletable' => true);\n        $this->Session->write('pivot_thread', $initial_pivot);\n    }\n\n    private function __continuePivoting($id, $info, $date, $fromEvent)\n    {\n        $pivot = $this->Session->read('pivot_thread');\n        $newPivot = array('id' => $id, 'info' => $info, 'date' => $date, 'depth' => null, 'children' => array(), 'deletable' => true);\n        if (!$this->__checkForPivot($pivot, $id)) {\n            $pivot = $this->__insertPivot($pivot, $fromEvent, $newPivot, 0);\n        }\n        $this->Session->write('pivot_thread', $pivot);\n    }\n\n    private function __insertPivot($pivot, $oldId, $newPivot, $depth)\n    {\n        $depth++;\n        if ($pivot['id'] == $oldId) {\n            $newPivot['depth'] = $depth;\n            $pivot['children'][] = $newPivot;\n            return $pivot;\n        }\n        if (!empty($pivot['children'])) {\n            foreach ($pivot['children'] as $k => $v) {\n                $pivot['children'][$k] = $this->__insertPivot($v, $oldId, $newPivot, $depth);\n            }\n        }\n        return $pivot;\n    }\n\n    private function __checkForPivot($pivot, $id)\n    {\n        if ($id == $pivot['id']) {\n            return true;\n        }\n        foreach ($pivot['children'] as $k => $v) {\n            if ($this->__checkForPivot($v, $id)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private function __arrangePivotVertical(&$pivot)\n    {\n        if (empty($pivot)) {\n            return null;\n        }\n        $max = count($pivot['children']) - 1;\n        if ($max < 0) {\n            $max = 0;\n        }\n        $temp = 0;\n        $pivot['children'] = array_values($pivot['children']);\n        foreach ($pivot['children'] as $k => $v) {\n            $pivot['children'][$k]['height'] = ($temp+$k)*50;\n            $temp += $this->__arrangePivotVertical($pivot['children'][$k]);\n            if ($k == $max) {\n                $temp = $pivot['children'][$k]['height'] / 50;\n            }\n        }\n        return $temp;\n    }\n\n    public function removePivot($id, $eventId, $self = false)\n    {\n        $pivot = $this->Session->read('pivot_thread');\n        if ($pivot['id'] == $id) {\n            $pivot = null;\n            $this->Session->write('pivot_thread', null);\n            $this->redirect(array('controller' => 'events', 'action' => 'view', $eventId));\n        } else {\n            $pivot = $this->__doRemove($pivot, $id);\n        }\n        $this->Session->write('pivot_thread', $pivot);\n        $pivot = $this->__arrangePivotVertical($pivot);\n        $this->redirect(array('controller' => 'events', 'action' => 'view', $eventId, true, $eventId));\n    }\n\n    private function __applyQueryString(&$event, $searchFor, $filterColumnsOverwrite=false) {\n        // filtering on specific columns is specified\n        if ($filterColumnsOverwrite !== false) {\n            $filterValue = array_map('trim', explode(\",\", $filterColumnsOverwrite));\n        } else {\n            $filterColumnsOverwrite = empty(Configure::read('MISP.event_view_filter_fields')) ? 'id, uuid, value, comment, type, category, Tag.name' : Configure::read('MISP.event_view_filter_fields');\n            $filterValue = array_map('trim', explode(\",\", $filterColumnsOverwrite));\n            $validFilters = array('id', 'uuid', 'value', 'comment', 'type', 'category', 'Tag.name');\n            foreach ($filterValue as $k => $v) {\n                if (!in_array($v, $validFilters)) {\n                    unset($filterValue[$k]);\n                }\n            }\n        }\n\n        // search in all attributes\n        foreach ($event['Attribute'] as $k => $attribute) {\n            if (!$this->__valueInFieldAttribute($attribute, $filterValue, $searchFor)) {\n                unset($event['Attribute'][$k]);\n            }\n        }\n        $event['Attribute'] = array_values($event['Attribute']);\n\n        // search in all attributes\n        foreach ($event['ShadowAttribute'] as $k => $proposals) {\n            if (!$this->__valueInFieldAttribute($proposals, $filterValue, $searchFor)) {\n                unset($event['ShadowAttribute'][$k]);\n            }\n        }\n        $event['ShadowAttribute'] = array_values($event['ShadowAttribute']);\n\n        // search for all attributes in object\n        foreach ($event['Object'] as $k => $object) {\n            foreach ($object['Attribute'] as $k2 => $attribute) {\n                if (!$this->__valueInFieldAttribute($attribute, $filterValue, $searchFor)) {\n                    unset($event['Object'][$k]['Attribute'][$k2]);\n                }\n            }\n            if (count($event['Object'][$k]['Attribute']) == 0) {\n                // remove object if empty\n                unset($event['Object'][$k]);\n            } else {\n                $event['Object'][$k]['Attribute'] = array_values($event['Object'][$k]['Attribute']);\n            }\n        }\n        $event['Object'] = array_values($event['Object']);\n    }\n\n    // look in the parameters if we are doing advanced filtering or not\n    private function __checkIfAdvancedFiltering($filters) {\n        $advancedFilteringActive = array_diff_key($filters, array('sort'=>0, 'direction'=>0, 'focus'=>0, 'extended'=>0, 'overrideLimit'=>0, 'filterColumnsOverwrite'=>0, 'attributeFilter'=>0, 'extended' => 0, 'page' => 0));\n\n        if (count($advancedFilteringActive) > 0) {\n            if (count(array_diff_key($advancedFilteringActive, array('deleted', 'includeRelatedTags', 'includeDecayScore'))) > 0) {\n                $res =  true;\n            } else if (\n                (isset($advancedFilteringActive['deleted']) && $advancedFilteringActive['deleted'] == 2) ||\n                (isset($advancedFilteringActive['includeRelatedTags']) && $advancedFilteringActive['includeRelatedTags'] == 1) ||\n                (isset($advancedFilteringActive['includeDecayScore']) && $advancedFilteringActive['includeDecayScore'] == 1)\n            ) {\n                $res =  true;\n            } else {\n                $res =  false;\n            }\n        } else {\n            $res = false;\n        }\n\n        unset($filters['sort']);\n        unset($filters['direction']);\n        $activeRules = array();\n        foreach ($filters as $k => $v) {\n            if (isset($this->defaultFilteringRules[$k]) && $this->defaultFilteringRules[$k] != $v) {\n                $activeRules[$k] = 1;\n            }\n        }\n        return array('active' => $activeRules > 0 ? $res : false, 'activeRules' => $activeRules);\n    }\n\n    private function __removeChildren(&$pivot, $id)\n    {\n        if ($pivot['id'] == $id) {\n            $pivot['children'] = array();\n        } else {\n            foreach ($pivot['children'] as $k => $v) {\n                $this->__removeChildren($v, $id);\n            }\n        }\n    }\n\n    private function __doRemove(&$pivot, $id)\n    {\n        foreach ($pivot['children'] as $k => $v) {\n            if ($v['id'] == $id) {\n                unset($pivot['children'][$k]);\n                return $pivot;\n            } else {\n                $pivot['children'][$k] = $this->__doRemove($pivot['children'][$k], $id);\n            }\n        }\n        return $pivot;\n    }\n\n    private function __setDeletable(&$pivot, $id, $root=false)\n    {\n        if ($pivot['id'] == $id && !$root) {\n            $pivot['deletable'] = false;\n            return true;\n        }\n        if (!empty($pivot['children'])) {\n            foreach ($pivot['children'] as $k => $v) {\n                $containsCurrent = $this->__setDeletable($pivot['children'][$k], $id);\n                if ($containsCurrent && !$root) {\n                    $pivot['deletable'] = false;\n                }\n            }\n        }\n        return !$pivot['deletable'];\n    }\n\n    public function add()\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('You don\\'t have permissions to create events'));\n        }\n        $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        if ($this->request->is('post')) {\n            if ($this->_isRest()) {\n                if (empty($this->data)) {\n                    throw new MethodNotAllowedException(__('No valid event data received.'));\n                }\n                // rearrange the response if the event came from an export\n                if (isset($this->request->data['response'])) {\n                    $this->request->data = $this->request->data['response'];\n                }\n                if (isset($this->request->data['request'])) {\n                    $this->request->data = $this->request->data['request'];\n                }\n                if (!isset($this->request->data['Event'])) {\n                    $this->request->data = array('Event' => $this->request->data);\n                }\n\n                // Distribution, reporter for the events pushed will be the owner of the authentication key\n                $this->request->data['Event']['user_id'] = $this->Auth->user('id');\n            }\n            if (!empty($this->data)) {\n                if (!isset($this->request->data['Event']['distribution'])) {\n                    $this->request->data['Event']['distribution'] = Configure::read('MISP.default_event_distribution') ? Configure::read('MISP.default_event_distribution') : 0;\n                }\n                if (!isset($this->request->data['Event']['analysis'])) {\n                    $this->request->data['Event']['analysis'] = 0;\n                }\n                if (!isset($this->request->data['Event']['threat_level_id'])) {\n                    $this->request->data['Event']['threat_level_id'] = Configure::read('MISP.default_event_threat_level') ? Configure::read('MISP.default_event_threat_level') : 4;\n                }\n                if (!isset($this->request->data['Event']['date'])) {\n                    $this->request->data['Event']['date'] = date('Y-m-d');\n                }\n                // If the distribution is set to sharing group, check if the id provided is really visible to the user, if not throw an error.\n                if ($this->request->data['Event']['distribution'] == 4) {\n                    if ($this->userRole['perm_sync'] && $this->_isRest()) {\n                        if (isset($this->request->data['Event']['SharingGroup'])) {\n                            if (!isset($this->request->data['Event']['SharingGroup']['uuid'])) {\n                                if ($this->Event->SharingGroup->checkIfExists($this->request->data['Event']['SharingGroup']['uuid']) &&\n                                    $this->Event->SharingGroup->checkIfAuthorised($this->Auth->user(), $this->request->data['Event']['SharingGroup']['uuid'])) {\n                                    throw new MethodNotAllowedException(__('Invalid Sharing Group or not authorised (Sync user is not contained in the Sharing group).'));\n                                }\n                            }\n                        } elseif (!isset($sgs[$this->request->data['Event']['sharing_group_id']])) {\n                            throw new MethodNotAllowedException(__('Invalid Sharing Group or not authorised.'));\n                        }\n                    } else {\n                        if (!isset($sgs[$this->request->data['Event']['sharing_group_id']])) {\n                            throw new MethodNotAllowedException(__('Invalid Sharing Group or not authorised.'));\n                        }\n                    }\n                } else {\n                    // If the distribution is set to something \"traditional\", set the SG id to 0.\n                    $this->request->data['Event']['sharing_group_id'] = 0;\n                }\n                // If we are not sync users / site admins, we only allow events to be created for our own org\n                // Set the orgc ID as our own orgc ID and unset both the 2.4 and 2.3 style creator orgs\n                if ($this->_isRest() && !$this->userRole['perm_sync']) {\n                    $this->request->data['Event']['orgc_id'] = $this->Auth->user('org_id');\n                    if (isset($this->request->data['Event']['Orgc'])) {\n                        unset($this->request->data['Event']['Orgc']);\n                    }\n                    if (isset($this->request->data['Event']['orgc'])) {\n                        unset($this->request->data['Event']['orgc']);\n                    }\n                }\n                $validationErrors = array();\n                $created_id = 0;\n                $add = $this->Event->_add($this->request->data, $this->_isRest(), $this->Auth->user(), '', null, false, null, $created_id, $validationErrors);\n                if ($add === true && !is_numeric($add)) {\n                    if ($this->_isRest()) {\n                        if ($add === 'blocked') {\n                            throw new ForbiddenException(__('Event blocked by local blacklist.'));\n                        }\n                        // REST users want to see the newly created event\n                        $results = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $created_id));\n                        $event = $results[0];\n                        if (!empty($validationErrors)) {\n                            $event['errors'] = $validationErrors;\n                        }\n                        $this->set('event', $event);\n                        $this->render('view');\n                        return true;\n                    } else {\n                        // redirect to the view of the newly created event\n                        $this->Flash->success(__('The event has been saved'));\n                        $this->redirect(array('action' => 'view', $this->Event->getID()));\n                    }\n                } else {\n                    if ($this->_isRest()) { // TODO return error if REST\n                        if (is_numeric($add)) {\n                            $this->response->header('Location', Configure::read('MISP.baseurl') . '/events/' . $add);\n                            $this->response->send();\n                            throw new NotFoundException(__('Event already exists, if you would like to edit it, use the url in the location header.'));\n                        }\n                        // # TODO i18n?\n                        return $this->RestResponse->saveFailResponse('Events', 'add', false, $validationErrors, $this->response->type());\n                    } else {\n                        if ($add === 'blocked') {\n                            $this->Flash->error(__('A blacklist entry is blocking you from creating any events. Please contact the administration team of this instance') . (Configure::read('MISP.contact') ? ' at ' . Configure::read('MISP.contact') : '') . '.');\n                        } else {\n                            $this->Flash->error(__('The event could not be saved. Please, try again.'), 'default', array(), 'error');\n                        }\n                    }\n                }\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Events', 'add', false, $this->response->type());\n        }\n\n        $this->request->data['Event']['date'] = date('Y-m-d');\n        if (isset($this->request->data['Event']['distribution'])) {\n            $initialDistribution = $this->request->data['Event']['distribution'];\n        } else {\n            $initialDistribution = 3;\n            if (Configure::read('MISP.default_event_distribution') != null) {\n                $initialDistribution = Configure::read('MISP.default_event_distribution');\n            }\n        }\n        $this->set('initialDistribution', $initialDistribution);\n\n        // combobox for distribution\n        $distributions = array_keys($this->Event->distributionDescriptions);\n        $distributions = $this->_arrayToValuesIndexArray($distributions);\n        $this->set('distributions', $distributions);\n        // tooltip for distribution\n        $fieldDesc = array();\n        $distributionLevels = $this->Event->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n        foreach ($distributionLevels as $key => $value) {\n            $fieldDesc['distribution'][$key] = $this->Event->distributionDescriptions[$key]['formdesc'];\n        }\n\n        // combobox for risks\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        $fieldDesc['threat_level_id'] = Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.description');\n\n        // combobox for analysis\n        $this->set('sharingGroups', $sgs);\n        // tooltip for analysis\n        $analysisLevels = $this->Event->analysisLevels;\n        $this->set('analysisLevels', $analysisLevels);\n        foreach ($analysisLevels as $key => $value) {\n            $fieldDesc['analysis'][$key] = $this->Event->analysisDescriptions[$key]['formdesc'];\n        }\n        if (!$this->_isRest()) {\n            $this->Flash->info(__('The event created will be visible to the organisations having an account on this platform, but not synchronised to other MISP instances until it is published.'));\n        }\n        $this->set('fieldDesc', $fieldDesc);\n        if (isset($this->params['named']['extends'])) {\n            $this->set('extends_uuid', $this->params['named']['extends']);\n        }\n    }\n\n    public function addIOC($id)\n    {\n        $this->Event->recursive = -1;\n        $this->Event->read(null, $id);\n        if (!$this->_isSiteAdmin() && ($this->Event->data['Event']['orgc_id'] != $this->_checkOrg() || !$this->userRole['perm_modify'])) {\n            throw new UnauthorizedException(__('You do not have permission to do that.'));\n        }\n        if ($this->request->is('post')) {\n            if (!empty($this->data)) {\n                if (isset($this->data['Event']['submittedioc'])) {\n                    $this->_addIOCFile($id);\n                }\n\n                // redirect to the view of the newly created event\n                $this->Flash->success(__('The event has been saved'));\n            }\n        }\n        // set the id\n        $this->set('id', $id);\n        // set whether it is published or not\n        $this->set('published', $this->Event->data['Event']['published']);\n    }\n\n    public function add_misp_export()\n    {\n        if (!$this->userRole['perm_modify']) {\n            throw new UnauthorizedException(__('You do not have permission to do that.'));\n        }\n        if ($this->request->is('post')) {\n            $results = array();\n            if (!empty($this->data)) {\n                $ext = '';\n                if (isset($this->data['Event']['submittedfile'])) {\n                    $ext = pathinfo($this->data['Event']['submittedfile']['name'], PATHINFO_EXTENSION);\n                }\n                if (isset($this->data['Event']['submittedfile']) && (strtolower($ext) != 'xml' && strtolower($ext) != 'json') && $this->data['Event']['submittedfile']['size'] > 0 &&\n                is_uploaded_file($this->data['Event']['submittedfile']['tmp_name'])) {\n                    $log = ClassRegistry::init('Log');\n                    // #TODO Think about whether we want to Localize Log entries.\n                    $log->createLogEntry($this->Auth->user(), 'file_upload', 'Event', 0, 'MISP export file upload failed', 'File details: ' . json_encode($this->data['Event']['submittedfile']));\n                    $this->Flash->error(__('You may only upload MISP XML or MISP JSON files.'));\n                    throw new MethodNotAllowedException(__('File upload failed or file does not have the expected extension (.xml / .json).'));\n                }\n                if (isset($this->data['Event']['submittedfile'])) {\n                    if (Configure::read('MISP.take_ownership_xml_import')\n                        && (isset($this->data['Event']['takeownership']) && $this->data['Event']['takeownership'] == 1)) {\n                        $results = $this->_addMISPExportFile($ext, true, $this->data['Event']['publish']);\n                    } else {\n                        $results = $this->_addMISPExportFile($ext, false, $this->data['Event']['publish']);\n                    }\n                }\n            }\n            $this->set('results', $results);\n            $this->render('add_misp_export_result');\n        }\n    }\n\n    public function upload_stix($stix_version = '1')\n    {\n        if (!$this->userRole['perm_modify']) {\n            throw new UnauthorizedException(__('You do not have permission to do that.'));\n        }\n        $scriptDir = APP . 'files' . DS . 'scripts';\n        if ($this->request->is('post')) {\n            if ($this->_isRest()) {\n                $randomFileName = $this->Event->generateRandomFileName();\n                $tempFile = new File($scriptDir . DS . 'tmp' . DS . $randomFileName, true, 0644);\n                $tempFile->write($this->request->input());\n                $tempFile->close();\n                $result = $this->Event->upload_stix(\n                    $this->Auth->user(),\n                    $scriptDir,\n                    $randomFileName,\n                    $stix_version,\n                    'uploaded_stix_file.' . ($stix_version == '1' ? 'xml' : 'json'),\n                    false\n                );\n                if (is_array($result)) {\n                    return $this->RestResponse->saveSuccessResponse('Events', 'upload_stix', false, $this->response->type(), 'STIX document imported, event\\'s created: ' . implode(', ', $result) . '.');\n                } elseif (is_numeric($result)) {\n                    $event = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $result));\n                    if (!empty($event)) {\n                        return $this->RestResponse->viewData($event[0], 'json');\n                    } else {\n                        return $this->RestResponse->saveFailResponse('Events', 'upload_stix', false, 'Could not read saved event.', $this->response->type());\n                    }\n                } else {\n                    return $this->RestResponse->saveFailResponse('Events', 'upload_stix', false, $result, $this->response->type());\n                }\n            } else {\n                $original_file = !empty($this->data['Event']['original_file']) ? $this->data['Event']['stix']['name'] : '';\n                if (isset($this->data['Event']['stix']) && $this->data['Event']['stix']['size'] > 0 && is_uploaded_file($this->data['Event']['stix']['tmp_name'])) {\n                    $randomFileName = $this->Event->generateRandomFileName();\n                    move_uploaded_file($this->data['Event']['stix']['tmp_name'], $scriptDir . DS . 'tmp' . DS . $randomFileName);\n                    $result = $this->Event->upload_stix(\n                        $this->Auth->user(),\n                        $scriptDir,\n                        $randomFileName,\n                        $stix_version,\n                        $original_file,\n                        $this->data['Event']['publish']\n                    );\n                    if (is_array($result)) {\n                        $this->Flash->success(__('STIX document imported, event\\'s created: ' . implode(', ', $result) . '.'));\n                        $this->redirect(array('action' => 'index'));\n                    } elseif (is_numeric($result)) {\n                        $this->Flash->success(__('STIX document imported.'));\n                        $this->redirect(array('action' => 'view', $result));\n                    } else {\n                        $this->Flash->error(__('Could not import STIX document: ' . $result));\n                    }\n                } else {\n                    $max_size = intval(ini_get('post_max_size'));\n                    if (intval(ini_get('upload_max_filesize')) < $max_size) {\n                        $max_size = intval(ini_get('upload_max_filesize'));\n                    }\n                    $this->Flash->error(__('File upload failed. Make sure that you select a stix file to be uploaded and that the file doesn\\'t exceed the maximum file size of ' . $max_size . '.'));\n                }\n            }\n        }\n\n        if ($stix_version == 2) {\n            $stix_version = '2.x JSON';\n        } else {\n            $stix_version = '1.x XML';\n        }\n        $this->set('stix_version', $stix_version);\n    }\n\n    public function merge($target_id = null)\n    {\n        $this->Event->id = $target_id;\n        $eIds = $this->Event->fetchEventIds($this->Auth->user(), false, false, false, true);\n        // check if event exists and is readable for the current user\n        if (!$this->Event->exists() || !in_array($target_id, $eIds)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->read(null, $target_id);\n        // check if private and user not authorised to edit\n        if (!$this->_isSiteAdmin() && ($this->Event->data['Event']['orgc_id'] != $this->_checkOrg() || !($this->userRole['perm_modify']))) {\n            $this->Flash->error(__('You are not authorised to do that. Please consider using the \\'propose attribute\\' feature.'));\n            $this->redirect(array('action' => 'view', $target_id));\n        }\n        $this->Event->insertLock($this->Auth->user(), $target_id);\n        if ($this->request->is('post')) {\n            $source_id = trim($this->request->data['Event']['source_id']);\n            $to_ids = $this->request->data['Event']['to_ids'];\n            if (!is_numeric($source_id)) {\n                $this->Flash->error(__('Invalid event ID entered.'));\n                return;\n            }\n            $this->Event->read(null, $source_id);\n            if (!$this->_isSiteAdmin() && !in_array($source_id, $eIds)) {\n                $this->Flash->error(__('You are not authorised to read the selected event.'));\n                return;\n            }\n            $r = array('results' => []);\n            foreach ($this->Event->data['Attribute'] as $a) {\n                if ($to_ids && !$a['to_ids']) {\n                    continue;\n                }\n                $tmp = array();\n                $tmp['values']     = $a['value'];\n                $tmp['categories'] = $a['category'];\n                $tmp['types']      = $a['type'];\n                $tmp['to_ids']     = $a['to_ids'];\n                $tmp['comment']    = $a['comment'];\n                if ($this->Event->Attribute->typeIsAttachment($a['type'])) {\n                    $encodedFile = $this->Event->Attribute->base64EncodeAttachment($a);\n                    $tmp['data'] = $encodedFile;\n                    $tmp['data_is_handled'] = true;\n                }\n                $r['results'][] = $tmp;\n            }\n            $resultArray = $this->Event->handleModuleResult($r, $target_id);\n            $typeCategoryMapping = array();\n            foreach ($this->Event->Attribute->categoryDefinitions as $k => $cat) {\n                foreach ($cat['types'] as $type) {\n                    $typeCategoryMapping[$type][$k] = $k;\n                }\n            }\n            foreach ($resultArray as $key => $result) {\n                if ($has_pipe = strpos($result['default_type'], '|') !== false || $result['default_type'] === 'malware-sample') {\n                    $pieces = explode('|', $result['value']);\n                    $or = array('Attribute.value1' => $pieces,\n                                'Attribute.value2' => $pieces);\n                } else {\n                    $or = array('Attribute.value1' => $result['value'], 'Attribute.value2' => $result['value']);\n                }\n                $options = array(\n                    'conditions' => array('OR' => $or),\n                    'fields' => array('Attribute.type', 'Attribute.category', 'Attribute.value', 'Attribute.comment'),\n                    'order' => false\n                );\n                $resultArray[$key]['related'] = $this->Event->Attribute->fetchAttributes($this->Auth->user(), $options);\n            }\n\n            // combobox for distribution\n            $distributions = $this->Event->Attribute->distributionLevels;\n            $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n            if (empty($sgs)) {\n                unset($distributions[4]);\n            }\n            $this->set('event', array('Event' => array('id' => $target_id)));\n            $this->set('resultArray', $resultArray);\n            $this->set('typeList', array_keys($this->Event->Attribute->typeDefinitions));\n            $this->set('defaultCategories', $this->Event->Attribute->defaultCategories);\n            $this->set('typeCategoryMapping', $typeCategoryMapping);\n            $this->set('distributions', $distributions);\n            $this->set('sgs', $sgs);\n            $this->set('title', 'Merge Results');\n            $this->set('importComment', 'Merged from event ' . $source_id);\n            $this->render('resolved_attributes');\n        } else {\n            // set the target event id in the form\n            $this->request->data['Event']['target_id'] = $target_id;\n        }\n    }\n\n    public function edit($id = null)\n    {\n        if ($this->request->is('get') && $this->_isRest()) {\n            return $this->RestResponse->describe('Events', 'edit', false, $this->response->type());\n        }\n        if (Validation::uuid($id)) {\n            $temp = $this->Event->find('first', array('recursive' => -1, 'fields' => array('Event.id'), 'conditions' => array('Event.uuid' => $id)));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid event'));\n            }\n            $id = $temp['Event']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->read(null, $id);\n        // check if private and user not authorised to edit\n        if (!$this->_isSiteAdmin() && !($this->userRole['perm_sync'] && $this->_isRest())) {\n            if (($this->Event->data['Event']['orgc_id'] != $this->_checkOrg()) || !($this->userRole['perm_modify'])) {\n                $message = __('You are not authorised to do that. Please consider using the \\'propose attribute\\' feature.');\n                if ($this->_isRest()) {\n                    throw new MethodNotAllowedException($message);\n                } else {\n                    $this->Flash->error($message);\n                    $this->redirect(array('controller' => 'events', 'action' => 'index'));\n                }\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->Event->insertLock($this->Auth->user(), $id);\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if ($this->_isRest()) {\n                if (isset($this->request->data['response'])) {\n                    $this->request->data = $this->Event->updateXMLArray($this->request->data, true);\n                } else {\n                    $this->request->data = $this->Event->updateXMLArray($this->request->data, false);\n                }\n                // Workaround for different structure in XML/array than what CakePHP expects\n                if (isset($this->request->data['response'])) {\n                    $this->request->data = $this->request->data['response'];\n                }\n                if (!isset($this->request->data['Event'])) {\n                    $this->request->data = array('Event' => $this->request->data);\n                }\n                $result = $this->Event->_edit($this->request->data, $this->Auth->user(), $id);\n                if ($result === true) {\n                    // REST users want to see the newly created event\n                    $results = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n                    $event = $results[0];\n                    $this->set('event', $event);\n                    $this->render('view');\n                    return true;\n                } else {\n                    $message = 'Error';\n                    if ($this->_isRest()) {\n                        App::uses('JSONConverterTool', 'Tools');\n                        $converter = new JSONConverterTool();\n                        if (isset($result['error'])) {\n                            $errors = $result['error'];\n                        } else {\n                            $errors = $result;\n                        }\n                        return $this->RestResponse->saveFailResponse('Events', 'edit', $id, $errors, $this->response->type());\n                    } else {\n                        $this->set(array('message' => $message,'_serialize' => array('message')));  // $this->Event->validationErrors\n                        $this->render('edit');\n                    }\n                    return false;\n                }\n            }\n            // say what fields are to be updated\n            $fieldList = array('date', 'threat_level_id', 'analysis', 'info', 'published', 'distribution', 'timestamp', 'sharing_group_id', 'extends_uuid');\n\n            $this->Event->read();\n            // always force the org, but do not force it for admins\n            if (!$this->_isSiteAdmin()) {\n                // set the same org as existed before\n                $this->request->data['Event']['org_id'] = $this->Event->data['Event']['org_id'];\n            }\n            // we probably also want to remove the published flag\n            $this->request->data['Event']['published'] = 0;\n            $date = new DateTime();\n            $this->request->data['Event']['timestamp'] = $date->getTimestamp();\n            if ($this->Event->save($this->request->data, true, $fieldList)) {\n                $this->Flash->success(__('The event has been saved'));\n                $this->redirect(array('action' => 'view', $id));\n            } else {\n                $this->Flash->error(__('The event could not be saved. Please, try again.'));\n            }\n        } else {\n            if (!$this->userRole['perm_modify']) {\n                $this->redirect(array('controller' => 'events', 'action' => 'index', 'admin' => false));\n            }\n            $this->request->data = $this->Event->read(null, $id);\n        }\n\n        // combobox for distribution\n        $distributions = array_keys($this->Event->distributionDescriptions);\n        $distributions = $this->_arrayToValuesIndexArray($distributions);\n        $this->set('distributions', $distributions);\n\n        // even if the SG is not local, we still want the option to select the currently assigned SG\n        $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $this->set('sharingGroups', $sgs);\n\n        // tooltip for distribution\n        $fieldDesc = array();\n        $distributionLevels = $this->Event->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n        foreach ($distributionLevels as $key => $value) {\n            $fieldDesc['distribution'][$key] = $this->Event->distributionDescriptions[$key]['formdesc'];\n        }\n\n        // combobox for risks\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        $fieldDesc['threat_level_id'] = Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.description');\n\n        // combobox for analysis\n        $this->set('sharingGroups', $sgs);\n        // tooltip for analysis\n        $analysisLevels = $this->Event->analysisLevels;\n        foreach ($analysisLevels as $key => $value) {\n            $fieldDesc['analysis'][$key] = $this->Event->analysisDescriptions[$key]['formdesc'];\n        }\n        $this->set('analysisLevels', $analysisLevels);\n        $this->set('fieldDesc', $fieldDesc);\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('event', $this->Event->data);\n        $this->render('add');\n    }\n\n    public function delete($id = null)\n    {\n        if (Validation::uuid($id)) {\n            $temp = $this->Event->find('first', array('recursive' => -1, 'fields' => array('Event.id'), 'conditions' => array('Event.uuid' => $id)));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid event'));\n            }\n            $id = $temp['Event']['id'];\n        }\n        if ($this->request->is('post') || $this->request->is('put') || $this->request->is('delete')) {\n            if (isset($this->request->data['id'])) {\n                $this->request->data['Event'] = $this->request->data;\n            }\n            if (!isset($id) && isset($this->request->data['Event']['id'])) {\n                $idList = $this->request->data['Event']['id'];\n                if (!is_array($idList)) {\n                    if (is_numeric($idList)) {\n                        $idList = array($idList);\n                    } else {\n                        $idList = json_decode($idList, true);\n                    }\n                }\n                if (!is_array($idList) || empty($idList)) {\n                    throw new NotFoundException(__('Invalid input.'));\n                }\n            } else {\n                $idList = array($id);\n            }\n            $fails = array();\n            $successes = array();\n            foreach ($idList as $eid) {\n                if (!is_numeric($eid)) {\n                    continue;\n                }\n                $event = $this->Event->find('first', array(\n                    'conditions' => array('Event.id' => $eid),\n                    'fields' => array('Event.orgc_id', 'Event.id'),\n                    'recursive' => -1\n                ));\n                if (empty($event)) {\n                    $fails[] = $eid;\n                } else {\n                    if (!$this->_isSiteAdmin()) {\n                        if ($event['Event']['orgc_id'] != $this->_checkOrg() || !$this->userRole['perm_modify']) {\n                            $fails[] = $eid;\n                            continue;\n                        }\n                    }\n                    $this->Event->insertLock($this->Auth->user(), $event['Event']['id']);\n                    if ($this->Event->quickDelete($event)) {\n                        $successes[] = $eid;\n                    } else {\n                        $fails[] = $eid;\n                    }\n                }\n            }\n            $message = '';\n            if (count($idList) == 1) {\n                if (!empty($successes)) {\n                    $message = 'Event deleted.';\n                } else {\n                    $message = 'Event was not deleted.';\n                }\n            } else {\n                if (!empty($successes)) {\n                    $message .= count($successes) . ' event(s) deleted.';\n                }\n                if (!empty($fails)) {\n                    $message .= count($fails) . ' event(s) could not be deleted due to insufficient privileges or the event not being found.';\n                }\n            }\n            if ($this->_isRest()) {\n                if (!empty($successes)) {\n                    return $this->RestResponse->saveSuccessResponse('Events', 'delete', $id, $this->response->type(), $message);\n                } else {\n                    return $this->RestResponse->saveFailResponse('Events', 'delete', false, $message, $this->response->type());\n                }\n            } else {\n                if (!empty($successes)) {\n                    $this->Flash->success($message);\n                } else {\n                    $this->Flash->error($message);\n                }\n                $this->redirect(array('action' => 'index'));\n            }\n        } else {\n            if (is_numeric($id)) {\n                $eventList = array($id);\n            } else {\n                $eventList = json_decode($id, true);\n            }\n            $this->request->data['Event']['id'] = json_encode($eventList);\n            $this->set('idArray', $eventList);\n            $this->render('ajax/eventDeleteConfirmationForm');\n        }\n    }\n\n    public function unpublish($id = null)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->recursive = -1;\n        $event = $this->Event->read(null, $id);\n        if (!$this->_isSiteAdmin()) {\n            if (!$this->userRole['perm_modify'] || $this->Auth->user('org_id') !== $this->Event->data['Event']['orgc_id']) {\n                throw new MethodNotAllowedException(__('You don\\'t have the permission to do that.'));\n            }\n        }\n        $this->Event->insertLock($this->Auth->user(), $id);\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $fieldList = array('published', 'id', 'info');\n            $event['Event']['published'] = 0;\n            $result = $this->Event->save($event, array('fieldList' => $fieldList));\n            if ($result) {\n                $message = __('Event unpublished.');\n                $kafkaTopic = Configure::read('Plugin.Kafka_event_publish_notifications_topic');\n                if (Configure::read('Plugin.Kafka_enable') && Configure::read('Plugin.Kafka_event_publish_notifications_enable') && !empty($kafkaTopic)) {\n                    $kafkaPubTool = $this->Event->getKafkaPubTool();\n                    $params = array('eventid' => $id);\n                    if (Configure::read('Plugin.Kafka_include_attachments')) {\n                        $params['includeAttachments'] = 1;\n                    }\n                    $pubEvent = $this->Event->fetchEvent($this->Auth->user(), $params);\n                    if (!empty($pubEvent)) {\n                        $kafkaPubTool->publishJson($kafkaTopic, $pubEvent[0], 'unpublish');\n                    }\n                }\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveSuccessResponse('events', 'unpublish', $id, false, $message);\n                } else {\n                    $this->Flash->success($message);\n                    $this->redirect(array('action' => 'view', $id));\n                }\n            } else {\n                throw new MethodNotAllowedException('Could not unpublish event.');\n            }\n        } else {\n            $this->set('id', $id);\n            $this->set('type', 'unpublish');\n            $this->render('ajax/eventPublishConfirmationForm');\n        }\n    }\n\n    public function publishSightings($id = null)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $event = $this->Event->fetchEvent(\n            $this->Auth->user(),\n            array(\n                'eventid' => $id,\n                'metadata' => 1\n            )\n        );\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $result = $this->Event->publishRouter($id, null, $this->Auth->user(), 'sightings');\n            if (!Configure::read('MISP.background_jobs')) {\n                if (!is_array($result)) {\n                    // redirect to the view event page\n                    $message = 'Sightings published';\n                } else {\n                    $lastResult = array_pop($result);\n                    $resultString = (count($result) > 0) ? implode(', ', $result) . ' and ' . $lastResult : $lastResult;\n                    $errors['failed_servers'] = $result;\n                    $message = sprintf('Sightings published but not pushed to %s, re-try later. If the issue persists, make sure that the correct sync user credentials are used for the server link and that the sync user on the remote server has authentication privileges.', $resultString);\n                }\n            } else {\n                // update the DB to set the published flag\n                // for background jobs, this should be done already\n                $fieldList = array('id', 'info', 'sighting_timestamp');\n                $event['Event']['sighting_timestamp'] = time();\n                $this->Event->save($event, array('fieldList' => $fieldList));\n                $message = 'Job queued';\n            }\n            if ($this->_isRest()) {\n                $this->set('name', 'Publish Sightings');\n                $this->set('message', $message);\n                if (!empty($errors)) {\n                    $this->set('errors', $errors);\n                }\n                $this->set('url', '/events/publishSightings/' . $id);\n                $this->set('id', $id);\n                $this->set('_serialize', array('name', 'message', 'url', 'id', 'errors'));\n            } else {\n                $this->Flash->success($message);\n                $this->redirect(array('action' => 'view', $id));\n            }\n        } else {\n            $this->set('id', $id);\n            $this->set('type', 'publishSightings');\n            $this->render('ajax/eventPublishConfirmationForm');\n        }\n    }\n\n    // Publishes the event without sending an alert email\n    public function publish($id = null)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        // update the event and set the from field to the current instance's organisation from the bootstrap. We also need to save id and info for the logs.\n        $this->Event->recursive = -1;\n        $event = $this->Event->read(null, $id);\n        if (!$this->_isSiteAdmin()) {\n            if (!$this->userRole['perm_publish'] || $this->Auth->user('org_id') !== $this->Event->data['Event']['orgc_id']) {\n                throw new MethodNotAllowedException(__('You don\\'t have the permission to do that.'));\n            }\n        }\n        $this->Event->insertLock($this->Auth->user(), $id);\n        $success = true;\n        $message = '';\n        $errors = array();\n        // only allow form submit CSRF protection.\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!$this->_isRest()) {\n                $publishable = $this->Event->checkIfPublishable($id);\n                if ($publishable !== true) {\n                    $this->Flash->error(__('Could not publish event - no tag for required taxonomies missing: %s', implode(', ', $publishable)));\n                    $this->redirect(array('action' => 'view', $id));\n                }\n            }\n            // Performs all the actions required to publish an event\n            $result = $this->Event->publishRouter($id, null, $this->Auth->user());\n            if (!Configure::read('MISP.background_jobs')) {\n                if (!is_array($result)) {\n                    // redirect to the view event page\n                    $message = 'Event published without alerts';\n                } else {\n                    $lastResult = array_pop($result);\n                    $resultString = (count($result) > 0) ? implode(', ', $result) . ' and ' . $lastResult : $lastResult;\n                    $errors['failed_servers'] = $result;\n                    $message = sprintf('Event published but not pushed to %s, re-try later. If the issue persists, make sure that the correct sync user credentials are used for the server link and that the sync user on the remote server has authentication privileges.', $resultString);\n                }\n            } else {\n                // update the DB to set the published flag\n                // for background jobs, this should be done already\n                $fieldList = array('published', 'id', 'info', 'publish_timestamp');\n                $event['Event']['published'] = 1;\n                $event['Event']['publish_timestamp'] = time();\n                $this->Event->save($event, array('fieldList' => $fieldList));\n                $message = 'Job queued';\n            }\n            if ($this->_isRest()) {\n                $this->set('name', 'Publish');\n                $this->set('message', $message);\n                if (!empty($errors)) {\n                    $this->set('errors', $errors);\n                }\n                $this->set('url', '/events/alert/' . $id);\n                $this->set('id', $id);\n                $this->set('_serialize', array('name', 'message', 'url', 'id', 'errors'));\n            } else {\n                $this->Flash->success($message);\n                $this->redirect(array('action' => 'view', $id));\n            }\n        } else {\n            $this->set('id', $id);\n            $this->set('type', 'publish');\n            $this->render('ajax/eventPublishConfirmationForm');\n        }\n    }\n\n    // Send out an alert email to all the users that wanted to be notified.\n    // Users with a GnuPG key will get the mail encrypted, other users will get the mail unencrypted\n    public function alert($id = null)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        $this->Event->id = $id;\n        $this->Event->recursive = 0;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->recursive = -1;\n        $this->Event->read(null, $id);\n        if (!$this->_isSiteAdmin()) {\n            if (!$this->userRole['perm_publish'] || $this->Auth->user('org_id') !== $this->Event->data['Event']['orgc_id']) {\n                throw new MethodNotAllowedException(__('You don\\'t have the permission to do that.'));\n            }\n        }\n        $success = true;\n        $message = '';\n        $errors = array();\n        // only allow form submit CSRF protection\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!$this->_isRest()) {\n                $publishable = $this->Event->checkIfPublishable($id);\n                if ($publishable !== true) {\n                    $this->Flash->error(__('Could not publish event - no tag for required taxonomies missing: %s', implode(', ', $publishable)));\n                    $this->redirect(array('action' => 'view', $id));\n                }\n            }\n            // send out the email\n            $emailResult = $this->Event->sendAlertEmailRouter($id, $this->Auth->user(), $this->Event->data['Event']['publish_timestamp']);\n            if (is_bool($emailResult) && $emailResult == true) {\n                // Performs all the actions required to publish an event\n                $result = $this->Event->publishRouter($id, null, $this->Auth->user());\n                if (!is_array($result)) {\n                    // redirect to the view event page\n                    if (Configure::read('MISP.background_jobs')) {\n                        $message = 'Job queued.';\n                    } else {\n                        $message = 'Email sent to all participants.';\n                    }\n                } else {\n                    $lastResult = array_pop($result);\n                    $resultString = (count($result) > 0) ? implode(', ', $result) . ' and ' . $lastResult : $lastResult;\n                    $errors['failed_servers'] = $result;\n                    $failed = 1;\n                    $message = sprintf('Not published given no connection to %s but email sent to all participants.', $resultString);\n                }\n            } elseif (!is_bool($emailResult)) {\n                // Performs all the actions required to publish an event\n                $result = $this->Event->publishRouter($id, null, $this->Auth->user());\n                if (!is_array($result)) {\n                    // redirect to the view event page\n                    $message = 'Published but no email sent given GnuPG is not configured.';\n                    $errors['GnuPG'] = 'GnuPG not set up.';\n                } else {\n                    $lastResult = array_pop($result);\n                    $resultString = (count($result) > 0) ? implode(', ', $result) . ' and ' . $lastResult : $lastResult;\n                    $errors['failed_servers'] = $result;\n                    $errors['GnuPG'] = 'GnuPG not set up.';\n                    $failed = 1;\n                    $message = sprintf('Not published given no connection to %s but no email sent given GnuPG is not configured.', $resultString);\n                }\n            } else {\n                $message = 'Sending of email failed';\n                $errors['email'] = 'The sending of emails failed.';\n            }\n            if ($this->_isRest()) {\n                $this->set('name', 'Alert');\n                $this->set('message', $message);\n                if (!empty($errors)) {\n                    $this->set('errors', $errors);\n                }\n                $this->set('url', '/events/alert/' . $id);\n                $this->set('id', $id);\n                $this->set('_serialize', array('name', 'message', 'url', 'id', 'errors'));\n            } else {\n                if (!empty($failed)) {\n                    $this->Flash->error($message);\n                } else {\n                    $this->Flash->success($message);\n                }\n                $this->redirect(array('action' => 'view', $id));\n            }\n        } else {\n            $this->set('id', $id);\n            $this->set('type', 'alert');\n            $this->render('ajax/eventPublishConfirmationForm');\n        }\n    }\n\n    // Send out an contact email to the person who posted the event.\n    // Users with a GnuPG key will get the mail encrypted, other users will get the mail unencrypted\n    public function contact($id = null)\n    {\n        $events = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n        if (empty($events)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        // User has filled in his contact form, send out the email.\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['Event'])) {\n                $this->request->data = array('Event' => $this->request->data);\n            }\n            $message = $this->request->data['Event']['message'];\n            if (empty($message)) {\n                $error = __('You must specify a message.');\n                if ($this->_isRest()) {\n                    throw new MethodNotAllowedException($error);\n                } else {\n                    $this->Flash->error($error);\n                    $this->redirect(array('action' => 'contact', $id));\n                }\n            }\n\n            $creator_only = false;\n            if (isset($this->request->data['Event']['person'])) {\n                $creator_only = $this->request->data['Event']['person'];\n            }\n            $user = $this->Auth->user();\n            $user['gpgkey'] = $this->Event->User->getPGP($user['id']);\n            $user['certif_public'] = $this->Event->User->getCertificate($user['id']);\n\n            $success = $this->Event->sendContactEmailRouter($id, $message, $creator_only, $user, $this->_isSiteAdmin());\n            if ($success) {\n                $return_message = __('Email sent to the reporter.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveSuccessResponse('Events', 'contact', $id, $this->response->type(), $return_message);\n                } else {\n                    $this->Flash->success($return_message);\n                    // redirect to the view event page\n                    $this->redirect(array('action' => 'view', $id));\n                }\n            } else {\n                $return_message = __('Sending of email failed.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Events', 'contact', $id, $return_message, $this->response->type());\n                } else {\n                    $this->Flash->error($return_message, 'default', array(), 'error');\n                    // redirect to the view event page\n                    $this->redirect(array('action' => 'view', $id));\n                }\n            }\n        }\n        // User didn't see the contact form yet. Present it to him.\n        if (empty($this->data)) {\n            $this->data = $events[0];\n        }\n    }\n\n    public function automation($legacy = false)\n    {\n        // Simply display a static view\n        if (!$this->userRole['perm_auth']) {\n            $this->redirect(array('controller' => 'events', 'action' => 'index'));\n        }\n        App::uses('BroExport', 'Export');\n        $export = new BroExport();\n        $temp = $export->mispTypes;\n        $broTypes = array('all' => 'All types listed below.');\n        foreach ($temp as $broType => $mispTypes) {\n            foreach ($mispTypes as $mT) {\n                $broTypes[$broType][] = $mT[0];\n            }\n            $broTypes[$broType] = implode(', ', $broTypes[$broType]);\n        }\n        $this->loadModel('Server');\n        $this->set('command_line_functions', $this->Server->command_line_functions);\n        $this->set('broTypes', $broTypes);\n        // generate the list of Attribute types\n        $this->loadModel('Attribute');\n        $this->set('sigTypes', array_keys($this->Attribute->typeDefinitions));\n        $this->loadModel('Server');\n        $rpzSettings = $this->Server->retrieveCurrentSettings('Plugin', 'RPZ_');\n        $this->set('rpzSettings', $rpzSettings);\n        $this->set('hashTypes', array_keys($this->Event->Attribute->hashTypes));\n        if ($legacy) {\n            $this->render('legacy_automation');\n        }\n    }\n\n    public function export()\n    {\n        $filesize_units = array('B', 'KB', 'MB', 'GB', 'TB');\n        if ($this->_isSiteAdmin()) {\n            $this->Flash->info(__('Warning, you are logged in as a site admin, any export that you generate will contain the FULL UNRESTRICTED data-set. If you would like to generate an export for your own organisation, please log in with a different user.'));\n        }\n        // Check if the background jobs are enabled - if not, fall back to old export page.\n        if (Configure::read('MISP.background_jobs') && !Configure::read('MISP.disable_cached_exports')) {\n            $now = time();\n\n            // as a site admin we'll use the ADMIN identifier, not to overwrite the cached files of our own org with a file that includes too much data.\n            $org_name = $this->_isSiteAdmin() ? 'ADMIN' : $this->Auth->user('Organisation')['name'];\n            $conditions = $this->Event->createEventConditions($this->Auth->user());\n            $this->Event->recursive = -1;\n            $newestEvent = $this->Event->find('first', array(\n                'conditions' => $conditions,\n                'fields' => 'timestamp',\n                'order' => 'Event.timestamp DESC',\n            ));\n            $newestEventPublished = $this->Event->find('first', array(\n                'conditions' => array('AND' => array($conditions, array('published' => 1))),\n                'fields' => 'timestamp',\n                'order' => 'Event.timestamp DESC',\n            ));\n            $this->loadModel('Job');\n            foreach ($this->Event->export_types as $k => $type) {\n                if ($type['requiresPublished']) {\n                    $tempNewestEvent = $newestEventPublished;\n                } else {\n                    $tempNewestEvent = $newestEvent;\n                }\n                $job = $this->Job->find('first', array(\n                        'fields' => array('id', 'progress'),\n                        'conditions' => array(\n                                'job_type' => 'cache_' . $k,\n                                'org_id' => $this->_isSiteAdmin() ? 0 : $this->Auth->user('org_id')\n                            ),\n                        'order' => array('Job.id' => 'desc')\n                ));\n                $dir = new Folder(APP . 'tmp/cached_exports/' . $k, true);\n                if ($k === 'text') {\n                    // Since all of the text export files are generated together, we might as well just check for a single one md5.\n                    $file = new File($dir->pwd() . DS . 'misp.text_md5.' . $org_name . $type['extension']);\n                } else {\n                    $file = new File($dir->pwd() . DS . 'misp.' . $k . '.' . $org_name . $type['extension']);\n                }\n                if (!$file->readable()) {\n                    if (empty($tempNewestEvent)) {\n                        $lastModified = 'No valid events';\n                        $this->Event->export_types[$k]['recommendation'] = 0;\n                    } else {\n                        $lastModified = 'N/A';\n                        $this->Event->export_types[$k]['recommendation'] = 1;\n                    }\n                } else {\n                    $filesize = $file->size();\n                    $filesize_unit_index = 0;\n                    while ($filesize > 1024) {\n                        $filesize_unit_index++;\n                        $filesize = $filesize / 1024;\n                    }\n                    $this->Event->export_types[$k]['filesize'] = round($filesize, 1) . $filesize_units[$filesize_unit_index];\n                    $fileChange = $file->lastChange();\n                    $lastModified = $this->__timeDifference($now, $fileChange);\n                    if (empty($tempNewestEvent) || $fileChange > $tempNewestEvent['Event']['timestamp']) {\n                        if (empty($tempNewestEvent)) {\n                            $lastModified = 'No valid events';\n                        }\n                        $this->Event->export_types[$k]['recommendation'] = 0;\n                    } else {\n                        $this->Event->export_types[$k]['recommendation'] = 1;\n                    }\n                }\n\n                $this->Event->export_types[$k]['lastModified'] = $lastModified;\n                if (!empty($job)) {\n                    $this->Event->export_types[$k]['job_id'] = $job['Job']['id'];\n                    $this->Event->export_types[$k]['progress'] = $job['Job']['progress'];\n                } else {\n                    $this->Event->export_types[$k]['job_id'] = -1;\n                    $this->Event->export_types[$k]['progress'] = 0;\n                }\n            }\n        }\n        $this->loadModel('Attribute');\n        $this->set('sigTypes', array_keys($this->Attribute->typeDefinitions));\n        $this->set('export_types', $this->Event->export_types);\n    }\n\n    public function downloadExport($type, $extra = null)\n    {\n        if (Configure::read('MISP.disable_cached_exports')) {\n            throw new MethodNotAllowedException(__('This feature is currently disabled'));\n        }\n        if ($this->_isSiteAdmin()) {\n            $org = 'ADMIN';\n        } else {\n            $org = $this->Auth->user('Organisation')['name'];\n        }\n        $this->autoRender = false;\n        if ($extra != null) {\n            $extra = '_' . $extra;\n        }\n        $this->response->type($this->Event->export_types[$type]['extension']);\n        $path = 'tmp/cached_exports/' . $type . DS . 'misp.' . strtolower($this->Event->export_types[$type]['type']) . $extra . '.' . $org . $this->Event->export_types[$type]['extension'];\n        $this->response->file($path, array('download' => true));\n    }\n\n    private function __timeDifference($now, $then)\n    {\n        $periods = array(\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\");\n        $lengths = array(\"60\",\"60\",\"24\",\"7\",\"4.35\",\"12\");\n        $difference = $now - $then;\n        for ($j = 0; $difference >= $lengths[$j] && $j < count($lengths)-1; $j++) {\n            $difference /= $lengths[$j];\n        }\n        $difference = round($difference);\n        if ($difference != 1) {\n            $periods[$j].= \"s\";\n        }\n        return $difference . \" \" . $periods[$j] . \" ago\";\n    }\n\n    public function xml($key, $eventid = false, $withAttachment = false, $tags = false, $from = false, $to = false, $last = false)\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'eventid', 'withAttachment', 'tags', 'from', 'to', 'last'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'xml'\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    // Grab an event or a list of events for the event view or any of the XML exports. The returned object includes an array of events (or an array that only includes a single event if an ID was given)\n    // Included with the event are the attached attributes, shadow attributes, related events, related attribute information for the event view and the creating user's email address where appropriate\n    private function __fetchEvent($eventid = false, $idList = false, $user = false, $tags = false, $from = false, $to = false)\n    {\n        // if we come from automation, we may not be logged in - instead we used an auth key in the URL.\n        if (empty($user)) {\n            $user = $this->Auth->user();\n        }\n        $results = $this->Event->fetchEvent($user, array('eventid' => $eventid, 'idList' => $idList, 'tags' => $tags, 'from' => $from, 'to' => $to));\n        return $results;\n    }\n\n    public function nids()\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'format', 'key', 'id', 'continue', 'tags', 'from', 'to', 'last',\n                'type', 'enforceWarninglist', 'includeAllTags', 'eventid'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args()\n        ));\n        if (empty($this->_legacyParams['returnFormat'])) {\n            $this->_legacyParams['returnFormat'] = 'suricata';\n        }\n        return $this->restSearch();\n    }\n\n    public function hids($type)\n    {\n        $typeMappings = array(\n            'md5' => array('malware-sample', 'md5', 'filename|md5'),\n            'sha1' => array('sha1', 'filename|sha1'),\n            'sha256' => array('sha256', 'filename|sha256')\n        );\n        $ordered_url_params = func_get_args();\n        unset($ordered_url_params[0]);\n        $ordered_url_params = array_values($ordered_url_params);\n        $this->scopeOverride = 'Attribute';\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'id', 'withAttachment', 'tags', 'from', 'to', 'last'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => $ordered_url_params,\n            'injectedParams' => array(\n                'returnFormat' => 'hashes',\n                'type' => (isset($typeMappings[$type])) ? $typeMappings[$type] : $type\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    // DEPRECATED - use restSearch with \"returnFormat\":\"csv\"\n    public function csv($key)\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'eventid', 'ignore', 'tags', 'category', 'type', 'includeContext',\n                'from', 'to', 'last', 'headerless', 'enforceWarninglist', 'value', 'timestamp'\n            ),\n            'key' => $key,\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'csv',\n                'to_ids' => '1',\n                'published' => '1'\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    public function _addIOCFile($id)\n    {\n        if (!empty($this->data) && $this->data['Event']['submittedioc']['size'] > 0 &&\n                is_uploaded_file($this->data['Event']['submittedioc']['tmp_name'])) {\n            if (!$this->Event->checkFilename($this->data['Event']['submittedioc']['name'])) {\n                throw new Exception(__('Filename not allowed.'));\n            }\n\n            App::uses('FileAccessTool', 'Tools');\n            $fileAccessTool = new FileAccessTool();\n            $iocData = $fileAccessTool->readFromFile($this->data['Event']['submittedioc']['tmp_name'], $this->data['Event']['submittedioc']['size']);\n\n        // write\n        $attachments_dir = Configure::read('MISP.attachments_dir');\n            if (empty($attachments_dir)) {\n            $attachments_dir = $this->Event->getDefaultAttachments_dir();\n        }\n        $rootDir = $attachments_dir . DS . $id . DS;\n            App::uses('Folder', 'Utility');\n            $dir = new Folder($rootDir . 'ioc', true);\n            $destPath = $rootDir . 'ioc';\n            App::uses('File', 'Utility');\n            $iocFile = new File($destPath . DS . $this->data['Event']['submittedioc']['name']);\n            $result = $iocFile->write($iocData);\n            if (!$result) {\n                $this->Flash->error(__('Problem with writing the IoC file. Please report to site admin.'));\n            }\n\n            // open the xml\n            $xmlFilePath = $destPath . DS . $this->data['Event']['submittedioc']['name'];\n            $xmlFileData = $fileAccessTool->readFromFile($xmlFilePath, $this->data['Event']['submittedioc']['size']);\n\n            // Load event and populate the event data\n            $this->Event->id = $id;\n            $this->Event->recursive = -1;\n            if (!$this->Event->exists()) {\n                throw new NotFoundException(__('Invalid event'));\n            }\n            $this->Event->read(null, $id);\n            $saveEvent['Event'] = $this->Event->data['Event'];\n            $saveEvent['Event']['published'] = false;\n            $dist = '5';\n            if (Configure::read('MISP.default_attribute_distribution') != null) {\n                if (Configure::read('MISP.default_attribute_distribution') === 'event') {\n                    $dist = '5';\n                } else {\n                    $dist = '';\n                    $dist .= Configure::read('MISP.default_attribute_distribution');\n                }\n            }\n            // read XML\n            $event = $this->IOCImport->readXML($xmlFileData, $id, $dist, $this->data['Event']['submittedioc']['name']);\n\n            // make some changes to have $saveEvent in the format that is needed to save the event together with its attributes\n            $fails = $event['Fails'];\n            $saveEvent['Attribute'] = $event['Attribute'];\n            // we've already stored these elsewhere, unset them so we can extract the event related data\n            unset($event['Attribute']);\n            unset($event['Fails']);\n\n            // add the original openIOC file as an attachment\n            $saveEvent['Attribute'][] = array(\n                'category' => 'External analysis',\n                'uuid' =>  CakeText::uuid(),\n                'type' => 'attachment',\n                'value' => $this->data['Event']['submittedioc']['name'],\n                'to_ids' => false,\n                'distribution' => $dist,\n                'data' => base64_encode($xmlFileData),\n                'comment' => 'OpenIOC import source file'\n            );\n\n            // LATER we might want to let an ioc create the event data automatically in a later version\n            // save the event related data into $saveEvent['Event']\n            //$saveEvent['Event'] = $event;\n            //$saveEvent['Event']['id'] = $id;\n\n            $fieldList = array(\n                    'Event' => array('published', 'timestamp'),\n                    'Attribute' => array('event_id', 'category', 'type', 'value', 'value1', 'value2', 'to_ids', 'uuid', 'distribution', 'timestamp', 'comment')\n            );\n            // Save it all\n            $saveResult = $this->Event->saveAssociated($saveEvent, array('validate' => true, 'fieldList' => $fieldList));\n            // set stuff for the view and render the showIOCResults view.\n            $this->set('attributes', $saveEvent['Attribute']);\n            if (isset($fails)) {\n                $this->set('fails', $fails);\n            }\n            $this->set('eventId', $id);\n            $this->set('graph', $event['Graph']);\n            $this->set('saveEvent', $saveEvent);\n            $this->render('showIOCResults');\n        }\n    }\n\n    public function _addMISPExportFile($ext, $take_ownership = false, $publish = false)\n    {\n        App::uses('FileAccessTool', 'Tools');\n        $data = (new FileAccessTool())->readFromFile($this->data['Event']['submittedfile']['tmp_name'], $this->data['Event']['submittedfile']['size']);\n\n        if ($ext == 'xml') {\n            App::uses('Xml', 'Utility');\n            $dataArray = Xml::toArray(Xml::build($data));\n        } else {\n            $dataArray = json_decode($data, true);\n            if (isset($dataArray['response'][0])) {\n                foreach ($dataArray['response'] as $k => $temp) {\n                    $dataArray['Event'][] = $temp['Event'];\n                    unset($dataArray['response'][$k]);\n                }\n            }\n        }\n        // In case we receive an event that is not encapsulated in a response. This should never happen (unless it's a copy+paste fail),\n        // but just in case, let's clean it up anyway.\n        if (isset($dataArray['Event'])) {\n            $dataArray['response']['Event'] = $dataArray['Event'];\n            unset($dataArray['Event']);\n        }\n        if (!isset($dataArray['response']) || !isset($dataArray['response']['Event'])) {\n            throw new Exception(__('This is not a valid MISP XML file.'));\n        }\n        $dataArray = $this->Event->updateXMLArray($dataArray);\n        $results = array();\n        $validationIssues = array();\n        if (isset($dataArray['response']['Event'][0])) {\n            foreach ($dataArray['response']['Event'] as $k => $event) {\n                $result = array('info' => $event['info']);\n                if ($take_ownership) {\n                    $event['orgc_id'] = $this->Auth->user('org_id');\n                    unset($event['Orgc']);\n                }\n                $event = array('Event' => $event);\n                $created_id = 0;\n                $event['Event']['locked'] = 1;\n                $event['Event']['published'] = $publish;\n                $result['result'] = $this->Event->_add($event, true, $this->Auth->user(), '', null, false, null, $created_id, $validationIssues);\n                $result['id'] = $created_id;\n                $result['validationIssues'] = $validationIssues;\n                $results[] = $result;\n            }\n        } else {\n            $temp['Event'] = $dataArray['response']['Event'];\n            if ($take_ownership) {\n                $temp['Event']['orgc_id'] = $this->Auth->user('org_id');\n                unset($temp['Event']['Orgc']);\n            }\n            $created_id = 0;\n            $temp['Event']['locked'] = 1;\n            $temp['Event']['published'] = $publish;\n            $result = $this->Event->_add($temp, true, $this->Auth->user(), '', null, false, null, $created_id, $validationIssues);\n            $results = array(0 => array('info' => $temp['Event']['info'], 'result' => $result, 'id' => $created_id, 'validationIssues' => $validationIssues));\n        }\n        return $results;\n    }\n\n    public function downloadOpenIOCEvent($key, $eventid, $enforceWarninglist = false)\n    {\n        // return a downloadable text file called misp.openIOC.<eventId>.ioc for individual events\n        // TODO implement mass download of all events - maybe in a zip file?\n        $this->response->type('text');  // set the content type\n        if ($eventid == null) {\n            throw new Exception(__('Not yet implemented'));\n        }\n        $this->layout = 'text/default';\n\n        if ($key != 'download') {\n            $user = $this->checkAuthUser($key);\n            if (!$user) {\n                throw new UnauthorizedException(__('This authentication key is not authorized to be used for exports. Contact your administrator.'));\n            }\n        } else {\n            if (!$this->Auth->user('id')) {\n                throw new UnauthorizedException(__('You have to be logged in to do that.'));\n            }\n        }\n\n        // get the event if it exists and load it together with its attributes\n        $this->Event->id = $eventid;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event or not authorised.'));\n        }\n        $event = $this->Event->fetchEvent($this->Auth->user(), $options = array('eventid' => $eventid, 'to_ids' => 1, 'enforceWarninglist' => $enforceWarninglist));\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid event or not authorised.'));\n        }\n        $this->loadModel('Whitelist');\n        $temp = $this->Whitelist->removeWhitelistedFromArray(array($event[0]), false);\n        $event = $temp[0];\n\n        // send the event and the vars needed to check authorisation to the Component\n        App::uses('IOCExportTool', 'Tools');\n        $this->IOCExport = new IOCExportTool();\n        $final = $this->IOCExport->buildAll($this->Auth->user(), $event);\n        $this->response->type('xml');\n        $this->autoRender = false;\n        $this->response->body($final);\n        $this->response->download('misp.openIOC' . $eventid . '.ioc');\n        return $this->response;\n    }\n\n    public function proposalEventIndex()\n    {\n        $this->loadModel('ShadowAttribute');\n        $this->ShadowAttribute->recursive = -1;\n        $conditions = array('ShadowAttribute.deleted' => 0);\n        if (!$this->_isSiteAdmin()) {\n            $conditions[] = array('ShadowAttribute.event_org_id' => $this->Auth->user('org_id'));\n        }\n        $result = $this->ShadowAttribute->find('all', array(\n                'fields' => array('event_id'),\n                'group' => array('event_id', 'id'),\n                'conditions' => $conditions\n        ));\n        $this->Event->recursive = -1;\n        $conditions = array();\n        foreach ($result as $eventId) {\n            $conditions['OR'][] = array('Event.id =' => $eventId['ShadowAttribute']['event_id']);\n        }\n        if (empty($result)) {\n            $conditions['OR'][] = array('Event.id =' => -1);\n        }\n        $this->paginate = array(\n                'fields' => array('Event.id', 'Event.org_id', 'Event.orgc_id', 'Event.publish_timestamp', 'Event.distribution', 'Event.info', 'Event.date', 'Event.published'),\n                'conditions' => $conditions,\n                'contain' => array(\n                    'User' => array(\n                            'fields' => array(\n                                'User.email'\n                    )),\n                    'ShadowAttribute'=> array(\n                        'fields' => array(\n                            'ShadowAttribute.id', 'ShadowAttribute.org_id', 'ShadowAttribute.event_id'\n                        ),\n                        'conditions' => array(\n                            'ShadowAttribute.deleted' => 0\n                        ),\n                    ),\n        ));\n        $events = $this->paginate();\n        $orgIds = array();\n        foreach ($events as $k => $event) {\n            $orgs = array();\n            foreach ($event['ShadowAttribute'] as $sa) {\n                if (!in_array($sa['org_id'], $orgs)) {\n                    $orgs[] = $sa['org_id'];\n                }\n                if (!in_array($sa['org_id'], $orgIds)) {\n                    $orgIds[] = $sa['org_id'];\n                }\n            }\n            $events[$k]['orgArray'] = $orgs;\n            $events[$k]['Event']['proposal_count'] = count($event['ShadowAttribute']);\n        }\n        $orgs = $this->Event->Orgc->find('list', array(\n            'conditions' => array('Orgc.id' => $orgIds),\n            'fields' => array('Orgc.id', 'Orgc.name')\n        ));\n        $this->set('orgs', $orgs);\n        $this->set('events', $events);\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('analysisLevels', $this->Event->analysisLevels);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n    }\n\n    public function reportValidationIssuesEvents()\n    {\n        // search for validation problems in the events\n        if (!self::_isSiteAdmin()) {\n            throw new NotFoundException();\n        }\n        $results = $this->Event->reportValidationIssuesEvents();\n        $result = $results[0];\n        $count = $results[1];\n        $this->set('result', $result);\n        $this->set('count', $count);\n    }\n\n    public function addTag($id = false, $tag_id = false)\n    {\n        $this->loadModel('Taxonomy');\n        $rearrangeRules = array(\n                'request' => false,\n                'Event' => false,\n                'tag_id' => 'tag',\n                'event_id' => 'event',\n                'id' => 'event'\n        );\n        $RearrangeTool = new RequestRearrangeTool();\n        $this->request->data = $RearrangeTool->rearrangeArray($this->request->data, $rearrangeRules);\n        if ($id === false) {\n            $id = $this->request->data['event'];\n        }\n        $this->Event->recursive = -1;\n        $event = $this->Event->read(array(), $id);\n        if (empty($event)) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid event.')), 'status'=>200, 'type' => 'json'));\n        }\n        $local = !empty($this->params['named']['local']);\n        if (!$this->request->is('post')) {\n            $this->set('local', $local);\n            $this->set('object_id', $id);\n            $this->set('scope', 'Event');\n            $this->layout = false;\n            $this->autoRender = false;\n            $this->render('/Events/add_tag');\n        } else {\n            if ($tag_id === false) {\n                $tag_id = $this->request->data['tag'];\n            }\n            if (!$this->_isSiteAdmin() && !$this->userRole['perm_sync']) {\n                if (\n                    !$this->userRole['perm_tagger'] ||\n                    (\n                        $this->Auth->user('org_id') !== $event['Event']['orgc_id']\n                    )\n                ) {\n                    if (Configure::read('MISP.host_org_id') != $this->Auth->user('org_id') || !$local) {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You don\\'t have permission to do that.')), 'status'=>200, 'type' => 'json'));\n                    }\n                }\n            }\n            $conditions = array('LOWER(Tag.name) LIKE' => strtolower(trim($tag_id)));\n            if (!$this->_isSiteAdmin()) {\n                $conditions['Tag.org_id'] = array('0', $this->Auth->user('org_id'));\n                $conditions['Tag.user_id'] = array('0', $this->Auth->user('id'));\n            }\n            if (!is_numeric($tag_id)) {\n                if (preg_match('/^collection_[0-9]+$/i', $tag_id)) {\n                    $tagChoice = explode('_', $tag_id)[1];\n                    $this->loadModel('TagCollection');\n                    $tagCollection = $this->TagCollection->fetchTagCollection($this->Auth->user(), array('conditions' => array('TagCollection.id' => $tagChoice)));\n                    if (empty($tagCollection)) {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag Collection.')), 'status'=>200, 'type' => 'json'));\n                    }\n                    $tag_id_list = array();\n                    foreach ($tagCollection[0]['TagCollectionTag'] as $tagCollectionTag) {\n                        $tag_id_list[] = $tagCollectionTag['tag_id'];\n                    }\n                } else {\n                    $tag_ids = json_decode($tag_id);\n                    if ($tag_ids !== null) { // can decode json\n                        $tag_id_list = array();\n                        foreach ($tag_ids as $tag_id) {\n                            if (preg_match('/^collection_[0-9]+$/i', $tag_id)) {\n                                $tagChoice = explode('_', $tag_id)[1];\n                                $this->loadModel('TagCollection');\n                                $tagCollection = $this->TagCollection->fetchTagCollection($this->Auth->user(), array('conditions' => array('TagCollection.id' => $tagChoice)));\n                                if (empty($tagCollection)) {\n                                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag Collection.')), 'status'=>200, 'type' => 'json'));\n                                }\n                                foreach ($tagCollection[0]['TagCollectionTag'] as $tagCollectionTag) {\n                                    $tag_id_list[] = $tagCollectionTag['tag_id'];\n                                }\n                            } else {\n                                $tag_id_list[] = $tag_id;\n                            }\n                        }\n                    } else {\n                        $tag = $this->Event->EventTag->Tag->find('first', array('recursive' => -1, 'conditions' => $conditions));\n                        if (empty($tag)) {\n                            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag.')), 'status'=>200, 'type' => 'json'));\n                        }\n                        $tag_id = $tag['Tag']['id'];\n                    }\n                }\n            }\n            $this->autoRender = false;\n            $error = false;\n            $success = false;\n            if (empty($tag_id_list)) {\n                $tag_id_list = array($tag_id);\n            }\n            foreach ($tag_id_list as $tag_id) {\n                $this->Event->EventTag->Tag->id = $tag_id;\n                if (!$this->Event->EventTag->Tag->exists()) {\n                    $error = __('Invalid Tag.');\n                    continue;\n                }\n                $tag = $this->Event->EventTag->Tag->find('first', array(\n                    'conditions' => array('Tag.id' => $tag_id),\n                    'recursive' => -1,\n                    'fields' => array('Tag.name')\n                ));\n                $found = $this->Event->EventTag->find('first', array(\n                    'conditions' => array(\n                        'event_id' => $id,\n                        'tag_id' => $tag_id\n                    ),\n                    'recursive' => -1,\n                ));\n                if (!empty($found)) {\n                    $error = __('Tag is already attached to this event.');\n                    continue;\n                }\n                $tagsOnEvent = $this->Event->EventTag->find('all', array(\n                    'conditions' => array(\n                        'EventTag.event_id' => $id,\n                        'EventTag.local' => $local\n                    ),\n                    'contain' => 'Tag',\n                    'fields' => array('Tag.name'),\n                    'recursive' => -1\n                ));\n                $exclusiveTestPassed = $this->Taxonomy->checkIfNewTagIsAllowedByTaxonomy($tag['Tag']['name'], Hash::extract($tagsOnEvent, '{n}.Tag.name'));\n                if (!$exclusiveTestPassed) {\n                    $fail = __('Tag is not allowed due to taxonomy exclusivity settings');\n                    continue;\n                }\n                $this->Event->EventTag->create();\n                if ($this->Event->EventTag->save(array('event_id' => $id, 'tag_id' => $tag_id, 'local' => $local))) {\n                    if (!$local) {\n                        $event['Event']['published'] = 0;\n                        $date = new DateTime();\n                        $event['Event']['timestamp'] = $date->getTimestamp();\n                        $this->Event->save($event);\n                    }\n                    $log = ClassRegistry::init('Log');\n                    $log->createLogEntry(\n                        $this->Auth->user(),\n                        'tag',\n                        'Event',\n                        $id,\n                        sprintf(\n                            'Attached%s tag (%s) \"%s\" to event (%s)',\n                            $local ? ' local' : '',\n                            $tag_id,\n                            $tag['Tag']['name'],\n                            $id\n                        ),\n                        sprintf(\n                            'Event (%s) tagged as Tag (%s)%s',\n                            $id,\n                            $tag_id,\n                            $local ? ' locally' : ''\n                        )\n                    );\n                    $success = __('Tag(s) added.');\n                } else {\n                    $fail = __('Tag could not be added.');\n                }\n            }\n            if ($success) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => __('Tag(s) added.'), 'check_publish' => true)), 'status'=>200, 'type' => 'json'));\n            } elseif (empty($fail)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => __('All tags are already present, nothing to add.'), 'check_publish' => true)), 'status'=>200, 'type' => 'json'));\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $fail)), 'status'=>200, 'type' => 'json'));\n            }\n        }\n    }\n\n    public function removeTag($id = false, $tag_id = false, $galaxy = false)\n    {\n        if (!$this->request->is('post')) {\n            $this->set('id', $id);\n            $this->set('tag_id', $tag_id);\n            $this->set('model', 'Event');\n            $this->render('/Attributes/ajax/tagRemoveConfirmation');\n        } else {\n            $rearrangeRules = array(\n                    'request' => false,\n                    'Event' => false,\n                    'tag_id' => 'tag',\n                    'event_id' => 'event',\n                    'id' => 'event'\n            );\n            $RearrangeTool = new RequestRearrangeTool();\n            $this->request->data = $RearrangeTool->rearrangeArray($this->request->data, $rearrangeRules);\n            if ($id === false) {\n                $id = $this->request->data['event'];\n            }\n            if ($tag_id === false) {\n                $tag_id = $this->request->data['tag'];\n            }\n            if (empty($tag_id)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid ' . ($galaxy ? 'Galaxy' : 'Tag') . '.')), 'status'=>200, 'type' => 'json'));\n            }\n            if (!is_numeric($tag_id)) {\n                $tag = $this->Event->EventTag->Tag->find('first', array('recursive' => -1, 'conditions' => array('LOWER(Tag.name) LIKE' => strtolower(trim($tag_id)))));\n                if (empty($tag)) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid ' . ($galaxy ? 'Galaxy' : 'Tag') . '.')), 'status'=>200, 'type' => 'json'));\n                }\n                $tag_id = $tag['Tag']['id'];\n            }\n            if (!is_numeric($id)) {\n                $id = $this->request->data['Event']['id'];\n            }\n            $this->Event->recursive = -1;\n            $event = $this->Event->read(array(), $id);\n            $eventTag = $this->Event->EventTag->find('first', array(\n                'conditions' => array(\n                    'event_id' => $id,\n                    'tag_id' => $tag_id\n                ),\n                'recursive' => -1,\n            ));\n\n            // org should allow to (un)tag too, so that an event that gets pushed can be (un)tagged locally by the owning org\n            if (\n                (\n                    (\n                        $this->Auth->user('org_id') !== $event['Event']['orgc_id'] ||\n                        (\n                            $this->Auth->user('org_id') != Configure::read('MISP.host_org_id') &&\n                            !empty($eventTag['EventTag']['local'])\n                        )\n                    ) ||\n                    !$this->userRole['perm_tagger']\n                ) &&\n                !$this->_isSiteAdmin()\n            ) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You don\\'t have permission to do that.')), 'status'=>200, 'type' => 'json'));\n            }\n            $this->Event->insertLock($this->Auth->user(), $id);\n            $this->autoRender = false;\n            if (empty($eventTag)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid event - ' . ($galaxy ? 'galaxy' : 'tag') . ' combination.')), 'status'=>200, 'type' => 'json'));\n            }\n            $tag = $this->Event->EventTag->Tag->find('first', array(\n                'conditions' => array('Tag.id' => $tag_id),\n                'recursive' => -1,\n                'fields' => array('Tag.name')\n            ));\n            if ($this->Event->EventTag->delete($eventTag['EventTag']['id'])) {\n                if (empty($eventTag['EventTag']['local'])) {\n                    $event['Event']['published'] = 0;\n                    $date = new DateTime();\n                    $event['Event']['timestamp'] = $date->getTimestamp();\n                    $this->Event->save($event);\n                }\n                $log = ClassRegistry::init('Log');\n                $log->createLogEntry($this->Auth->user(), 'tag', 'Event', $id, 'Removed tag (' . $tag_id . ') \"' . $tag['Tag']['name'] . '\" from event (' . $id . ')', 'Event (' . $id . ') untagged of Tag (' . $tag_id . ')');\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => ($galaxy ? 'Galaxy' : 'Tag') . ' removed.', 'check_publish' => empty($eventTag['EventTag']['local']))), 'status'=>200, 'type' => 'json'));\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => ($galaxy ? 'Galaxy' : 'Tag') . ' could not be removed.')), 'status'=>200, 'type' => 'json'));\n            }\n        }\n    }\n\n    /*\n     * adhereToWarninglists is used when querying this function via the API\n     * possible options:\n     *  - false: (default) ignore warninglists\n     *  - 'soft': Unset the IDS flag of all attributes hitting on a warninglist item\n     *  - true / 'hard': Block attributes from being added that have a hit in the warninglists\n     * returnMetaAttributes is a flag that will force the API to return the results of the\n     * parsing directly for external further processing. The flag is a simple boolean flag (0||1)\n     */\n    public function freeTextImport($id, $adhereToWarninglists = false, $returnMetaAttributes = false)\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('Event not found or you don\\'t have permissions to create attributes'));\n        }\n        $event = $this->Event->find('first', array(\n                'conditions' => array('Event.id' => $id),\n                'fields' => array('id', 'orgc_id'),\n                'recursive' => -1\n        ));\n        $this->set('event_id', $id);\n        if ($this->request->is('get')) {\n            $this->layout = 'ajax';\n            $this->request->data['Attribute']['event_id'] = $id;\n        }\n\n        if ($this->request->is('post')) {\n            App::uses('ComplexTypeTool', 'Tools');\n            $complexTypeTool = new ComplexTypeTool();\n            $this->loadModel('Warninglist');\n            $complexTypeTool->setTLDs($this->Warninglist->fetchTLDLists());\n            if (!isset($this->request->data['Attribute'])) {\n                $this->request->data = array('Attribute' => $this->request->data);\n            }\n            if (!isset($this->request->data['Attribute']['value'])) {\n                $this->request->data['Attribute'] = array('value' => $this->request->data['Attribute']);\n            }\n            if (isset($this->request->data['Attribute']['adhereToWarninglists'])) {\n                $adhereToWarninglists = $this->request->data['Attribute']['adhereToWarninglists'];\n            }\n            $resultArray = $complexTypeTool->checkComplexRouter($this->request->data['Attribute']['value'], 'freetext');\n            foreach ($resultArray as $key => $r) {\n                $temp = array();\n                foreach ($r['types'] as $type) {\n                    $temp[$type] = $type;\n                }\n                $resultArray[$key]['types'] = $temp;\n            }\n\n            // remove all duplicates\n            foreach ($resultArray as $k => $v) {\n                for ($i = 0; $i < $k; $i++) {\n                    if (isset($resultArray[$i]) && $v == $resultArray[$i]) {\n                        unset($resultArray[$k]);\n                    }\n                }\n            }\n            if ($this->_isRest()) {\n                if ($returnMetaAttributes || !empty($this->request->data['Attribute']['returnMetaAttributes'])) {\n                    return $this->RestResponse->viewData($resultArray, $this->response->type());\n                } else {\n                    return $this->__pushFreetext(\n                        $resultArray,\n                        $id,\n                        isset($this->request->data['Attribute']['distribution']) ? $this->request->data['Attribute']['distribution'] : false,\n                        isset($this->request->data['Attribute']['sharing_group_id']) ? $this->request->data['Attribute']['sharing_group_id'] : false,\n                        $adhereToWarninglists\n                    );\n                }\n            }\n            foreach ($resultArray as $key => $result) {\n                if ($has_pipe = strpos($result['default_type'], '|') !== false || $result['default_type'] === 'malware-sample') {\n                    $pieces = explode('|', $result['value']);\n                    $or = array('Attribute.value1' => $pieces,\n                                'Attribute.value2' => $pieces);\n                } else {\n                    $or = array('Attribute.value1' => $result['value'], 'Attribute.value2' => $result['value']);\n                }\n                $options = array(\n                    'conditions' => array('OR' => $or),\n                    'fields' => array('Attribute.type', 'Attribute.category', 'Attribute.value', 'Attribute.comment'),\n                    'order' => false,\n                    'flatten' => 1\n                );\n                $resultArray[$key]['related'] = $this->Event->Attribute->fetchAttributes($this->Auth->user(), $options);\n            }\n            $resultArray = array_values($resultArray);\n            $typeCategoryMapping = array();\n            foreach ($this->Event->Attribute->categoryDefinitions as $k => $cat) {\n                foreach ($cat['types'] as $type) {\n                    $typeCategoryMapping[$type][$k] = $k;\n                }\n            }\n            $distributions = $this->Event->Attribute->distributionLevels;\n            $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n            if (empty($sgs)) {\n                unset($distributions[4]);\n            }\n\n            $this->set('proposals', $event['Event']['orgc_id'] != $this->Auth->user('org_id') && !$this->_isSiteAdmin());\n            $this->set('distributions', $distributions);\n            $this->set('sgs', $sgs);\n            $this->set('event', $event);\n            $this->set('typeList', array_keys($this->Event->Attribute->typeDefinitions));\n            $this->set('defaultCategories', $this->Event->Attribute->defaultCategories);\n            $this->set('typeCategoryMapping', $typeCategoryMapping);\n            foreach ($typeCategoryMapping as $k => $v) {\n                $typeCategoryMapping[$k] = array_values($v);\n            }\n            $this->set('mapping', $typeCategoryMapping);\n            $this->set('resultArray', $resultArray);\n            $this->set('importComment', '');\n            $this->set('title', 'Freetext Import Results');\n            $this->loadModel('Warninglist');\n            $tldLists = $this->Warninglist->getTldLists();\n            $missingTldLists = array();\n            foreach ($tldLists as $tldList) {\n                $temp = $this->Warninglist->find('first', array(\n                    'recursive' => -1,\n                    'conditions' => array('Warninglist.name' => $tldList),\n                    'fields' => array('Warninglist.id')\n                ));\n                if (empty($temp)) {\n                    $missingTldLists[] = $tldList;\n                }\n            }\n            $this->set('missingTldLists', $missingTldLists);\n            $this->render('resolved_attributes');\n        }\n    }\n\n    public function __pushFreetext($attributes, $id, $distribution = false, $sg = false, $adhereToWarninglists = false)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        if ($distribution === false) {\n            if (Configure::read('MISP.default_attribute_distribution') != null) {\n                if (Configure::read('MISP.default_attribute_distribution') == 'event') {\n                    $distribution = 5;\n                } else {\n                    $distribution = Configure::read('MISP.default_attribute_distribution');\n                }\n            } else {\n                $distribution = 0;\n            }\n        }\n        // prepare the default choices\n        foreach ($attributes as $k => $attribute) {\n            $attribute['type'] = $attribute['default_type'];\n            unset($attribute['default_type']);\n            unset($attribute['types']);\n            if (isset($attribute['default_category'])) {\n                $attribute['category'] = $attribute['default_category'];\n                unset($attribute['default_category']);\n            } else {\n                $attribute['category'] = $this->Event->Attribute->defaultCategories[$attribute['type']];\n            }\n            $attribute['distribution'] = $distribution;\n            $attribute['event_id'] = $id;\n            $attributes[$k] = $attribute;\n        }\n        // actually save the attribute now\n        $temp = $this->Event->processFreeTextDataRouter($this->Auth->user(), $attributes, $id, '', false, $adhereToWarninglists, empty(Configure::read('MISP.background_jobs')));\n        if (empty(Configure::read('MISP.background_jobs'))) {\n            $attributes = $temp;\n        }\n        // FIXME $attributes does not contain the onteflyattributes\n        $attributes = array_values($attributes);\n        return $this->RestResponse->viewData($attributes, $this->response->type());\n    }\n\n    public function saveFreeText($id)\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('Event not found or you don\\'t have permissions to create attributes'));\n        }\n        if ($this->request->is('post')) {\n            if (!$this->Event->checkIfAuthorised($this->Auth->user(), $id)) {\n                throw new MethodNotAllowedException(__('Invalid event.'));\n            }\n            $this->Event->insertLock($this->Auth->user(), $id);\n            $attributes = json_decode($this->request->data['Attribute']['JsonObject'], true);\n            $default_comment = $this->request->data['Attribute']['default_comment'];\n            $force = $this->_isSiteAdmin() && $this->request->data['Attribute']['force'];\n            $flashMessage = $this->Event->processFreeTextDataRouter($this->Auth->user(), $attributes, $id, $default_comment, $force);\n            $this->Flash->info($flashMessage);\n            $this->redirect(array('controller' => 'events', 'action' => 'view', $id));\n        } else {\n            throw new MethodNotAllowedException('This endpoint requires a POST request.');\n        }\n    }\n\n    public function stix2()\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'id', 'withAttachment', 'tags', 'from', 'to', 'last'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'stix2'\n            ),\n            'alias' => array(\n                'id' => 'eventid'\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    public function stix()\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'id', 'withAttachment', 'tags', 'from', 'to', 'last'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'stix'\n            ),\n            'alias' => array(\n                'id' => 'eventid'\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    public function filterEventIdsForPush()\n    {\n        if (!$this->userRole['perm_sync']) {\n            throw new MethodNotAllowedException(__('You do not have the permission to do that.'));\n        }\n        if ($this->request->is('post')) {\n            $incomingIDs = array();\n            $incomingEvents = array();\n            foreach ($this->request->data as $event) {\n                $incomingIDs[] = $event['Event']['uuid'];\n                $incomingEvents[$event['Event']['uuid']] = $event['Event']['timestamp'];\n            }\n            $events = $this->Event->find('all', array(\n                'conditions' => array('Event.uuid' => $incomingIDs),\n                'recursive' => -1,\n                'fields' => array('Event.uuid', 'Event.timestamp', 'Event.locked'),\n            ));\n            foreach ($events as $k => $v) {\n                if ($v['Event']['timestamp'] >= $incomingEvents[$v['Event']['uuid']]) {\n                    unset($incomingEvents[$v['Event']['uuid']]);\n                    continue;\n                }\n                if ($v['Event']['locked'] == 0) {\n                    unset($incomingEvents[$v['Event']['uuid']]);\n                }\n            }\n            $this->set('result', array_keys($incomingEvents));\n        }\n    }\n\n    public function checkuuid($uuid)\n    {\n        if (!$this->userRole['perm_sync']) {\n            throw new MethodNotAllowedException(__('You do not have the permission to do that.'));\n        }\n        $events = $this->Event->find('first', array(\n                'conditions' => array('Event.uuid' => $uuid),\n                'recursive' => -1,\n                'fields' => array('Event.uuid'),\n        ));\n        $this->set('result', array('result' => empty($events)));\n    }\n\n    public function pushProposals($uuid)\n    {\n        $message= \"\";\n        $success = true;\n        $counter = 0;\n        if (!$this->userRole['perm_sync'] || !$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('You do not have the permission to do that.'));\n        }\n        if ($this->request->is('post')) {\n            $event = $this->Event->find('first', array(\n                    'conditions' => array('Event.uuid' => $uuid),\n                    'contains' => array('ShadowAttribute', 'Attribute' => array(\n                        'fields' => array('id', 'uuid', 'event_id'),\n                    )),\n                    'fields' => array('Event.uuid', 'Event.id'),\n            ));\n            if (empty($event)) {\n                $message = \"Event not found.\";\n                $success = false;\n            } else {\n                foreach ($this->request->data as $k => $sa) {\n                    if (isset($event['ShadowAttribute'])) {\n                        foreach ($event['ShadowAttribute'] as $oldk => $oldsa) {\n                            $temp = json_encode($oldsa);\n                            if ($sa['event_uuid'] == $oldsa['event_uuid'] && $sa['value'] == $oldsa['value'] && $sa['type'] == $oldsa['type'] && $sa['category'] == $oldsa['category'] && $sa['to_ids'] == $oldsa['to_ids']) {\n                                if ($oldsa['timestamp'] < $sa['timestamp']) {\n                                    $this->Event->ShadowAttribute->delete($oldsa['id']);\n                                } else {\n                                    continue 2;\n                                }\n                            }\n                        }\n                    }\n                    $sa['event_id'] = $event['Event']['id'];\n                    if ($sa['old_id'] != 0) {\n                        foreach ($event['Attribute'] as $attribute) {\n                            if ($sa['uuid'] == $attribute['uuid']) {\n                                $sa['old_id'] = $attribute['id'];\n                            }\n                        }\n                    }\n                    if (isset($sa['id'])) {\n                        unset($sa['id']);\n                    }\n                    $this->Event->ShadowAttribute->create();\n                    if (!$this->Event->ShadowAttribute->save(array('ShadowAttribute' => $sa))) {\n                        $message = \"Some of the proposals could not be saved.\";\n                        $success = false;\n                    } else {\n                        $counter++;\n                    }\n                    if (!$sa['deleted']) {\n                        $this->Event->ShadowAttribute->__sendProposalAlertEmail($event['Event']['id']);\n                    }\n                }\n            }\n            if ($success) {\n                if ($counter) {\n                    $message = $counter . \" Proposal(s) added.\";\n                } else {\n                    $message = \"Nothing to update.\";\n                }\n            }\n            $this->set('data', array('success' => $success, 'message' => $message, 'counter' => $counter));\n            $this->set('_serialize', 'data');\n        }\n    }\n\n    public function exportChoice($id)\n    {\n        if (!is_numeric($id)) {\n            throw new MethodNotAllowedException(__('Invalid ID'));\n        }\n        $event = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n        if (empty($event)) {\n            throw new NotFoundException(__('Event not found or you are not authorised to view it.'));\n        }\n        $event = $event[0];\n        // #TODO i18n\n        $exports = array(\n            'xml' => array(\n                    'url' => '/events/restSearch/xml/eventid:' . $id . '.xml',\n                    'text' => 'MISP XML (metadata + all attributes)',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Encode Attachments',\n                    'checkbox_set' => '/events/restSearch/xml/eventid:' . $id . '/withAttachments:1.xml',\n                    'checkbox_default' => true\n            ),\n            'json' => array(\n                    'url' => '/events/restSearch/json/eventid:' . $id . '.json',\n                    'text' => 'MISP JSON (metadata + all attributes)',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Encode Attachments',\n                    'checkbox_set' => '/events/restSearch/json/withAttachments:1/eventid:' . $id . '.json',\n                    'checkbox_default' => true\n            ),\n            'openIOC' => array(\n                    'url' => '/events/restSearch/openioc/to_ids:1/published:1/eventid:' . $id . '.json',\n                    'text' => 'OpenIOC (all indicators marked to IDS)',\n                    'requiresPublished' => false,\n                    'checkbox' => false,\n            ),\n            'csv' => array(\n                    'url' => '/events/restSearch/returnFormat:csv/to_ids:1/published:1/includeContext:0/eventid:' . $id,\n                    'text' => 'CSV',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Include non-IDS marked attributes',\n                    'checkbox_set' => '/events/restSearch/returnFormat:csv/to_ids:1||0/published:1||0/includeContext:0/eventid:' . $id\n            ),\n            'csv_with_context' => array(\n                    'url' => '/events/restSearch/returnFormat:csv/to_ids:1/published:1/includeContext:1/eventid:' . $id,\n                    'text' => 'CSV with additional context',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Include non-IDS marked attributes',\n                    'checkbox_set' => '/events/restSearch/returnFormat:csv/to_ids:1||0/published:1||0/includeContext:1/eventid:' . $id\n            ),\n            'stix_xml' => array(\n                    'url' => '/events/restSearch/stix/eventid:' . $id,\n                    'text' => 'STIX XML (metadata + all attributes)',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Encode Attachments',\n                    'checkbox_set' => '/events/restSearch/stix/eventid:' . $id . '/withAttachments:1'\n            ),\n            'stix_json' => array(\n                    'url' => '/events/restSearch/stix-json/eventid:' . $id,\n                    'text' => 'STIX JSON (metadata + all attributes)',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Encode Attachments',\n                    'checkbox_set' => '/events/restSearch/stix-json/withAttachments:1/eventid:' . $id\n            ),\n            'stix2_json' => array(\n                    'url' => '/events/restSearch/stix2/eventid:' . $id,\n                    'text' => 'STIX2 (requires the STIX 2 library)',\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Encode Attachments',\n                    'checkbox_set' => '/events/restSearch/stix2/eventid:' . $id . '/withAttachments:1'\n            ),\n            'rpz' => array(\n                    'url' => '/attributes/restSearch/returnFormat:rpz/published:1||0/eventid:' . $id,\n                    'text' => 'RPZ Zone file',\n                    'requiresPublished' => false,\n                    'checkbox' => false,\n            ),\n            'suricata' => array(\n                    'url' => '/events/restSearch/returnFormat:suricata/published:1||0/eventid:' . $id,\n                    'text' => 'Download Suricata rules',\n                    'requiresPublished' => false,\n                    'checkbox' => false,\n            ),\n            'snort' => array(\n                    'url' => '/events/restSearch/returnFormat:snort/published:1||0/eventid:' . $id,\n                    'text' => 'Download Snort rules',\n                    'requiresPublished' => false,\n                    'checkbox' => false,\n            ),\n            'bro' => array(\n                    'url' => '/attributes/bro/download/all/false/' . $id,\n                    // 'url' => '/attributes/restSearch/returnFormat:bro/published:1||0/eventid:' . $id,\n                    'text' => 'Download Bro rules',\n                    'requiresPublished' => false,\n                    'checkbox' => false\n            ),\n            'text' => array(\n                    'text' => 'Export all attribute values as a text file',\n                    'url' => '/attributes/restSearch/returnFormat:text/published:1||0/eventid:' . $id,\n                    'requiresPublished' => false,\n                    'checkbox' => true,\n                    'checkbox_text' => 'Include non-IDS marked attributes',\n                    'checkbox_set' => '/attributes/restSearch/returnFormat:text/published:1||0/to_ids:1||0/eventid:' . $id\n            ),\n        );\n        if ($event['Event']['published'] == 0) {\n            foreach ($exports as $k => $export) {\n                if ($export['requiresPublished']) {\n                    unset($exports[$k]);\n                }\n            }\n            $exports['csv'] = array(\n                'url' => '/events/restSearch/returnFormat:csv/includeContext:0/eventid:' . $id,\n                'text' => 'CSV (event not published, IDS flag ignored)',\n                'requiresPublished' => false,\n                'checkbox' => false\n            );\n        }\n        $this->loadModel('Module');\n        $modules = $this->Module->getEnabledModules($this->Auth->user(), false, 'Export');\n        if (is_array($modules) && !empty($modules)) {\n            foreach ($modules['modules'] as $module) {\n                $exports[$module['name']] = array(\n                        'url' => '/events/exportModule/' . $module['name'] . '/' . $id,\n                        'text' => Inflector::humanize($module['name']),\n                        'requiresPublished' => true,\n                        'checkbox' => false,\n                );\n            }\n        }\n        $this->set('exports', $exports);\n        $this->set('id', $id);\n        $this->render('ajax/exportChoice');\n    }\n\n    public function importChoice($id = false, $scope = 'event')\n    {\n        if ($scope == 'event') {\n            if (!is_numeric($id)) {\n                throw new MethodNotAllowedException(__('Invalid ID'));\n            }\n            $event = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n            if (empty($event)) {\n                throw new NotFoundException(__('Event not found or you are not authorised to view it.'));\n            }\n            $event = $event[0];\n            $imports = array(\n                    'freetext' => array(\n                            'url' => '/events/freeTextImport/' . $id,\n                            'text' => __('Freetext Import'),\n                            'ajax' => true,\n                            'target' => 'popover_form'\n                    ),\n                    'template' => array(\n                            'url' => '/templates/templateChoices/' . $id,\n                            'text' => __('Populate using a Template'),\n                            'ajax' => true,\n                            'target' => 'popover_form'\n                    ),\n                    'OpenIOC' => array(\n                            'url' => '/events/addIOC/' . $id,\n                            'text' => __('OpenIOC Import'),\n                            'ajax' => false,\n                    ),\n                    'ThreatConnect' => array(\n                            'url' => '/attributes/add_threatconnect/' . $id,\n                            'text' => __('ThreatConnect Import'),\n                            'ajax' => false\n                    ),\n                    'Forensic analysis' => array(\n                        'url' => '/events/upload_analysis_file/'.$id,\n                        'text' => __('(Experimental) Forensic analysis - Mactime'),\n                        'ajax' => false,\n                )\n            );\n            $this->loadModel('Module');\n            $modules = $this->Module->getEnabledModules($this->Auth->user(), false, 'Import');\n            if (is_array($modules) && !empty($modules)) {\n                foreach ($modules['modules'] as $k => $module) {\n                    $imports[$module['name']] = array(\n                            'url' => '/events/importModule/' . $module['name'] . '/' . $id,\n                            'text' => Inflector::humanize($module['name']),\n                            'ajax' => false\n                    );\n                }\n            }\n        } else {\n            $imports = array(\n                'MISP' => array(\n                        'url' => '/events/add_misp_export',\n                        'text' => __('MISP standard (recommended exchange format - lossless)'),\n                        'ajax' => false,\n                        'bold' => true\n                ),\n                'STIX' => array(\n                        'url' => '/events/upload_stix',\n                        'text' => __('STIX 1.1.1 format (lossy)'),\n                        'ajax' => false,\n                ),\n                'STIX2' => array(\n                        'url' => '/events/upload_stix/2',\n                        'text' => __('STIX 2.0 format (lossy)'),\n                        'ajax' => false,\n                )\n            );\n        }\n        $this->set('imports', $imports);\n        $this->set('id', $id);\n        $this->render('ajax/importChoice');\n    }\n\n    // API for pushing samples to MISP\n    // Either send it to an existing event, or let MISP create a new one automatically\n    public function upload_sample($event_id = null, $advanced = false)\n    {\n        $this->loadModel('Log');\n        $hashes = array('md5' => 'malware-sample', 'sha1' => 'filename|sha1', 'sha256' => 'filename|sha256');\n        $categoryDefinitions = $this->Event->Attribute->categoryDefinitions;\n        $categories = array();\n        foreach ($categoryDefinitions as $k => $v) {\n            if (in_array('malware-sample', $v['types']) && !in_array($k, $categories)) {\n                $categories[] = $k;\n            }\n        }\n        $default_distribution = !empty(Configure::read('MISP.default_attribute_distribution')) ? Configure::read('MISP.default_attribute_distribution') : 5;\n        if ($default_distribution == 'event') {\n            $default_distribution = 5;\n        }\n        // #TODO i18n\n        $parameter_options = array(\n                'distribution' => array('valid_options' => array(0, 1, 2, 3, 5), 'default' => $default_distribution),\n                'threat_level_id' => array('valid_options' => array(1, 2, 3, 4), 'default' => 4),\n                'analysis' => array('valid_options' => array(0, 1, 2), 'default' => 0),\n                'info' => array('default' =>  'Malware samples uploaded on ' . date('Y-m-d')),\n                'to_ids' => array('valid_options' => array(0, 1), 'default' => 1),\n                'category' => array('valid_options' => $categories, 'default' => 'Payload installation'),\n                'comment' => array('default' => '')\n        );\n\n        if (!$this->userRole['perm_auth']) {\n            throw new MethodNotAllowedException(__('This functionality requires API key access.'));\n        }\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('Please POST the samples as described on the automation page.'));\n        }\n        if ($this->response->type() === 'application/json') {\n            $data = $this->request->input('json_decode', true);\n        } elseif ($this->response->type() === 'application/xml') {\n            $data = $this->request->data;\n        } else {\n            throw new BadRequestException(__('Please POST the samples as described on the automation page.'));\n        }\n\n        if (isset($data['request'])) {\n            $data = $data['request'];\n        }\n        foreach ($parameter_options as $k => $v) {\n            if (isset($data[$k])) {\n                if (isset($v['valid_options']) && !in_array($data[$k], $v['valid_options'])) {\n                    $data['settings'][$k] = $v['default'];\n                } else {\n                    $data['settings'][$k] = $data[$k];\n                }\n                unset($data[$k]);\n            } else {\n                $data['settings'][$k] = $v['default'];\n            }\n        }\n        if (isset($data['files'])) {\n            foreach ($data['files'] as $k => $file) {\n                if (!isset($file['filename']) || !isset($file['data'])) {\n                    unset($data['files'][$k]);\n                } else {\n                    $data['files'][$k]['md5'] = md5(base64_decode($file['data']));\n                }\n            }\n        }\n\n        if (empty($data['files'])) {\n            throw new BadRequestException(__('No samples received, or samples not in the correct format. Please refer to the API documentation on the automation page.'));\n        }\n        if (isset($event_id)) {\n            $data['settings']['event_id'] = $event_id;\n        }\n        if (isset($data['settings']['event_id'])) {\n            $this->Event->id = $data['settings']['event_id'];\n            if (!$this->Event->exists()) {\n                throw new NotFoundException(__('Event not found'));\n            }\n        }\n        if (isset($data['advanced'])) {\n            $advanced = $data['advanced'];\n        }\n\n        // check if the user has permission to create attributes for an event, if the event ID has been passed\n        // If not, create an event\n        if (isset($data['settings']['event_id']) && !empty($data['settings']['event_id']) && is_numeric($data['settings']['event_id'])) {\n            $conditions = array('Event.id' => $data['settings']['event_id']);\n            if (!$this->_isSiteAdmin()) {\n                $conditions[] = array('Event.orgc_id' => $this->Auth->user('org_id'));\n                if (!$this->userRole['perm_modify_org']) {\n                    $conditions[] = array('Event.user_id' => $this->Auth->user('id'));\n                }\n            }\n            $event = $this->Event->find('first', array(\n                'recursive' => -1,\n                'conditions' => $conditions,\n                'fields' => array('id'),\n            ));\n            if (empty($event)) {\n                throw new NotFoundException(__('Event not found.'));\n            }\n            $this->Event->insertLock($this->Auth->user(), $event['Event']['id']);\n            $this->Event->id = $data['settings']['event_id'];\n            $date = new DateTime();\n            $this->Event->saveField('timestamp', $date->getTimestamp());\n            $this->Event->saveField('published', 0);\n        } else {\n            $this->Event->create();\n            if ($data['settings']['distribution'] == 5) {\n                throw new BadRequestException(__('Distribution level 5 is not supported when uploading a sample without passing an event ID. Distribution level 5 is meant to take on the distribution level of an existing event.'));\n            }\n            $result = $this->Event->save(\n                array(\n                    'info' => $data['settings']['info'],\n                    'analysis' => $data['settings']['analysis'],\n                    'threat_level_id' => $data['settings']['threat_level_id'],\n                    'distribution' => $data['settings']['distribution'],\n                    'date' => date('Y-m-d'),\n                    'orgc_id' => $this->Auth->user('org_id'),\n                    'org_id' => $this->Auth->user('org_id'),\n                    'user_id' => $this->Auth->user('id'),\n                )\n            );\n            if (!$result) {\n                $this->Log->save(array(\n                        'org' => $this->Auth->user('Organisation')['name'],\n                        'model' => 'Event',\n                        'model_id' => 0,\n                        'email' => $this->Auth->user('email'),\n                        'action' => 'upload_sample',\n                        'user_id' => $this->Auth->user('id'),\n                        'title' => 'Error: Failed to create event using the upload sample functionality',\n                        'change' => 'There was an issue creating an event (' . $data['settings']['info'] . '). The validation errors were: ' . json_encode($this->Event->validationErrors),\n                ));\n                throw new BadRequestException(__('The creation of a new event with the supplied information has failed.'));\n            }\n            $data['settings']['event_id'] = $this->Event->id;\n            $event_id = $this->Event->id;\n        }\n\n        if (!isset($data['settings']['to_ids']) || !in_array($data['settings']['to_ids'], array('0', '1', 0, 1))) {\n            $data['settings']['to_ids'] = 1;\n        }\n        $successCount = 0;\n        $errors = array();\n        App::uses('FileAccessTool', 'Tools');\n        $fileAccessTool = new FileAccessTool();\n        foreach ($data['files'] as $file) {\n            $tmpdir = Configure::read('MISP.tmpdir') ? Configure::read('MISP.tmpdir') : APP . 'tmp';\n            $tmpfile = $fileAccessTool->createTempFile($tmpdir, $prefix = 'MISP_upload');\n            $fileAccessTool->writeToFile($tmpfile, base64_decode($file['data']));\n            $tmpfile = new File($tmpfile);\n            if ($advanced) {\n                $result = $this->Event->Attribute->advancedAddMalwareSample(\n                    $event_id,\n                    $data['settings'],\n                    $file['filename'],\n                    $tmpfile\n                );\n                if ($result) {\n                    $successCount++;\n                } else {\n                    $errors[] = $file['filename'];\n                }\n            } else {\n                $result = $this->Event->Attribute->simpleAddMalwareSample(\n                    $event_id,\n                    $data['settings'],\n                    $file['filename'],\n                    $tmpfile\n                );\n                if ($result) {\n                    $successCount++;\n                } else {\n                    $errors[] = $file['filename'];\n                }\n            }\n            if (!empty($result)) {\n                foreach ($result['Object'] as $object) {\n                    if (isset($data['settings']['distribution'])) {\n                        $object['distribution'] = $data['settings']['distribution'];\n                    }\n                    $object['sharing_group_id'] = isset($data['settings']['sharing_group_id']) ? $data['settings']['sharing_group_id'] : 0;\n                    if (!empty($object['Attribute'])) {\n                        foreach ($object['Attribute'] as $k => $attribute) {\n                            if ($attribute['value'] == $tmpfile->name) {\n                                $object['Attribute'][$k]['value'] = $file['filename'];\n                            }\n                            if (isset($data['settings']['distribution'])) {\n                                $object['Attribute'][$k]['distribution'] = $data['settings']['distribution'];\n                            }\n                            $object['Attribute'][$k]['sharing_group_id'] = isset($data['settings']['sharing_group_id']) ? $data['settings']['sharing_group_id'] : 0;\n                        }\n                    }\n                    $this->loadModel('MispObject');\n                    $this->MispObject->captureObject(array('Object' => $object), $event_id, $this->Auth->user());\n                }\n                if (!empty($result['ObjectReference'])) {\n                    foreach ($result['ObjectReference'] as $reference) {\n                        $this->MispObject->ObjectReference->smartSave($reference, $event_id);\n                    }\n                }\n            }\n            $fileAccessTool->deleteFile($tmpfile->path);\n        }\n        if (!empty($errors)) {\n            $this->set('errors', $errors);\n            if ($successCount > 0) {\n                $this->set('name', 'Partial success');\n                $this->set('message', 'Successfuly saved ' . $successCount . ' sample(s), but some samples could not be saved.');\n                $this->set('url', '/events/view/' . $data['settings']['event_id']);\n                $this->set('id', $data['settings']['event_id']);\n                $this->set('_serialize', array('name', 'message', 'url', 'id', 'errors'));\n            } else {\n                $this->set('name', 'Failed');\n                $this->set('message', 'Failed to save any of the supplied samples.');\n                $this->set('_serialize', array('name', 'message', 'errors'));\n            }\n        } else {\n            $this->set('name', 'Success');\n            $this->set('message', 'Success, saved all attributes.');\n            $this->set('url', '/events/view/' . $data['settings']['event_id']);\n            $this->set('id', $data['settings']['event_id']);\n            $this->set('_serialize', array('name', 'message', 'url', 'id'));\n        }\n        $this->view($data['settings']['event_id']);\n        $this->render('view');\n    }\n\n    public function viewGraph($id)\n    {\n        $event = $this->Event->fetchEvent($this->Auth->user(), array(\n            'eventid' => $id,\n            'includeGranularCorrelations' => 1\n        ));\n        if (empty($event)) {\n            throw new MethodNotAllowedException(__('Invalid Event.'));\n        }\n\n        $this->set('event', $event[0]);\n        $this->set('scope', 'event');\n        $this->set('id', $id);\n    }\n\n    public function viewEventGraph()\n    {\n        $event = $this->Event->fetchEvent($this->Auth->user(), array(\n            'eventid' => $id\n        ));\n        if (empty($event)) {\n            throw new MethodNotAllowedException(__('Invalid Event.'));\n        }\n        $this->set('event', $event[0]);\n        $this->set('scope', 'event');\n        $this->set('id', $id);\n    }\n\n\n\n    /*\n        public function deleteNode($id) {\n            if (!$this->request->is('post')) throw new MethodNotAllowedException(__('Only POST requests are allowed.'));\n            App::uses('CorrelationGraphTool', 'Tools');\n            $grapher = new CorrelationGraphTool();\n            $grapher->construct($this->Event, $this->Taxonomy, $this->GalaxyCluster, $this->Auth->user(), $this->request->data);\n            $json = $grapher->deleteNode($id);\n        }\n    */\n\n    public function updateGraph($id, $type = 'event')\n    {\n        $validTools = array('event', 'galaxy', 'tag');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        $this->loadModel('Taxonomy');\n        $this->loadModel('GalaxyCluster');\n        App::uses('CorrelationGraphTool', 'Tools');\n        $grapher = new CorrelationGraphTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n        $grapher->construct($this->Event, $this->Taxonomy, $this->GalaxyCluster, $this->Auth->user(), $data);\n        $json = $grapher->buildGraphJson($id, $type);\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    private function genDistributionGraph($id, $type = 'event', $extended = 0) {\n        $validTools = array('event');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        $this->loadModel('Server');\n        $this->loadModel('Organisation');\n        App::uses('DistributionGraphTool', 'Tools');\n        $grapher = new DistributionGraphTool();\n\n        $servers = $this->Server->find('list', array(\n            'fields' => array('name'),\n        ));\n        $grapher->construct($this->Event, $servers, $this->Auth->user(), $extended);\n        $json = $grapher->get_distributions_graph($id);\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        return $json;\n    }\n\n    public function getEventTimeline($id, $type = 'event')\n    {\n        $validTools = array('event');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException('Invalid type.');\n        }\n        App::uses('EventTimelineTool', 'Tools');\n        $grapher = new EventTimelineTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n        $dataFiltering = array_key_exists('filtering', $data) ? $data['filtering'] : array();\n        $scope = isset($data['scope']) ? $data['scope'] : 'seen';\n\n        $extended = isset($this->params['named']['extended']) ? 1 : 0;\n\n        $grapher->construct($this->Event, $this->Auth->user(), $dataFiltering, $extended);\n        if ($scope == 'seen') {\n            $json = $grapher->get_timeline($id);\n        } elseif ($scope == 'sightings') {\n            $json = $grapher->get_sighting_timeline($id);\n        }\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getDistributionGraph($id, $type = 'event')\n    {\n        $extended = isset($this->params['named']['extended']) ? 1 : 0;\n        $json = $this->genDistributionGraph($id, $type, $extended);\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getEventGraphReferences($id, $type = 'event')\n    {\n        $validTools = array('event');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        $this->loadModel('Tag');\n        App::uses('EventGraphTool', 'Tools');\n        $grapher = new EventGraphTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n\n        $extended = isset($this->params['named']['extended']) ? 1 : 0;\n\n        $grapher->construct($this->Event, $this->Tag, $this->Auth->user(), $data['filtering'], $extended);\n        $json = $grapher->get_references($id);\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getEventGraphTags($id, $type = 'event')\n    {\n        $validTools = array('event');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        $this->loadModel('Tag');\n        App::uses('EventGraphTool', 'Tools');\n        $grapher = new EventGraphTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n\n        $extended = isset($this->params['named']['extended']) ? 1 : 0;\n\n        $grapher->construct($this->Event, $this->Tag, $this->Auth->user(), $data['filtering'], $extended);\n        $json = $grapher->get_tags($id);\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getEventGraphGeneric($id, $type = 'event')\n    {\n        $validTools = array('event');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        $this->loadModel('Tag');\n        App::uses('EventGraphTool', 'Tools');\n        $grapher = new EventGraphTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n\n        $extended = isset($this->params['named']['extended']) ? 1 : 0;\n\n        $grapher->construct($this->Event, $this->Tag, $this->Auth->user(), $data['filtering'], $extended);\n        if (!array_key_exists('keyType', $data)) {\n            $keyType = ''; // empty key\n        } else {\n            $keyType = $data['keyType'];\n        }\n        $json = $grapher->get_generic_from_key($id, $keyType);\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getReferenceData($uuid, $type = 'reference')\n    {\n        $validTools = array('reference');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        App::uses('EventGraphTool', 'Tools');\n        $grapher = new EventGraphTool();\n        $data = $this->request->is('post') ? $this->request->data : array();\n        $grapher->construct_for_ref($this->Event->Object, $this->Auth->user());\n        $json = $grapher->get_reference_data($uuid);\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function getObjectTemplate($type = 'templates')\n    {\n        $validTools = array('templates');\n        if (!in_array($type, $validTools)) {\n            throw new MethodNotAllowedException(__('Invalid type.'));\n        }\n        App::uses('EventGraphTool', 'Tools');\n        $eventGraphTool = new EventGraphTool();\n\n        $data = $this->request->is('post') ? $this->request->data : array();\n        $eventGraphTool->construct_for_ref($this->Event->Object, $this->Auth->user());\n        $json = $eventGraphTool->get_object_templates();\n\n        array_walk_recursive($json, function (&$item, $key) {\n            if (!mb_detect_encoding($item, 'utf-8', true)) {\n                $item = utf8_encode($item);\n            }\n        });\n        $this->response->type('json');\n        return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n    }\n\n    public function viewGalaxyMatrix($scope_id, $galaxy_id, $scope='event', $disable_picking=false)\n    {\n        $local = !empty($this->params['named']['local']);\n        $this->set('local', $local);\n        $this->loadModel('Galaxy');\n        $mitreAttackGalaxyId = $this->Galaxy->getMitreAttackGalaxyId();\n        $matrixData = $this->Galaxy->getMatrix($galaxy_id);\n\n        $tabs = $matrixData['tabs'];\n        $matrixTags = $matrixData['matrixTags'];\n        $killChainOrders = $matrixData['killChain'];\n        $instanceUUID = $matrixData['instance-uuid'];\n\n        if ($scope == 'event') {\n            $eventId = $scope_id;\n        } elseif ($scope == 'attribute') {\n            $attribute = $this->Event->Attribute->fetchAttributes($this->Auth->user(), array(\n                'conditions' => array('Attribute.id' => $scope_id),\n                'fields' => array('event_id'),\n                'flatten' => 1,\n            ));\n            if (empty($attribute)) {\n                throw new Exception(\"Invalid Attribute.\");\n            }\n            $attribute = $attribute[0];\n            $eventId = $attribute['Attribute']['event_id'];\n        } elseif ($scope == 'tag_collection') {\n            $eventId = 0; // no event_id for tag_collection, consider all events\n        } else {\n            throw new Exception(\"Invalid options.\");\n        }\n\n        if ($scope !== 'tag_collection') {\n            $event = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $eventId, 'metadata' => true));\n            if (empty($event)) {\n                throw new NotFoundException(__('Event not found or you are not authorised to view it.'));\n            }\n            $scoresDataAttr = $this->Event->Attribute->AttributeTag->getTagScores($this->Auth->user(), $eventId, $matrixTags);\n            $scoresDataEvent = $this->Event->EventTag->getTagScores($eventId, $matrixTags);\n            $maxScore = 0;\n            $scoresData = array();\n            foreach (array_keys($scoresDataAttr['scores'] + $scoresDataEvent['scores']) as $key) {\n                $sum = (isset($scoresDataAttr['scores'][$key]) ? $scoresDataAttr['scores'][$key] : 0) + (isset($scoresDataEvent['scores'][$key]) ? $scoresDataEvent['scores'][$key] : 0);\n                $scoresData[$key] = $sum;\n                $maxScore = max($maxScore, $sum);\n            }\n            $scores = $scoresData;\n        } else {\n            $scores = $scoresData = array();\n        }\n        // FIXME: temporary fix: add the score of deprecated mitre galaxies to the new one (for the stats)\n        if ($matrixData['galaxy']['id'] == $mitreAttackGalaxyId) {\n            $mergedScore = array();\n            foreach ($scoresData as $tag => $v) {\n                $predicateValue = explode(':', $tag, 2)[1];\n                $predicateValue = explode('=', $predicateValue, 2);\n                $predicate = $predicateValue[0];\n                $clusterValue = $predicateValue[1];\n                $mappedTag = '';\n                $mappingWithoutExternalId = array();\n                if ($predicate == 'mitre-attack-pattern') {\n                    $mappedTag = $tag;\n                    $name = explode(\" \", $tag);\n                    $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                    $mappingWithoutExternalId[$name] = $tag;\n                } else {\n                    $name = explode(\" \", $clusterValue);\n                    $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                    if (isset($mappingWithoutExternalId[$name])) {\n                        $mappedTag = $mappingWithoutExternalId[$name];\n                    } else {\n                        $adjustedTagName = $this->Galaxy->GalaxyCluster->find('list', array(\n                            'group' => array('GalaxyCluster.id', 'GalaxyCluster.tag_name'),\n                            'conditions' => array('GalaxyCluster.tag_name LIKE' => 'misp-galaxy:mitre-attack-pattern=' . $name . '% T%'),\n                            'fields' => array('GalaxyCluster.tag_name')\n                        ));\n                        $adjustedTagName = array_values($adjustedTagName)[0];\n                        $mappingWithoutExternalId[$name] = $adjustedTagName;\n                        $mappedTag = $mappingWithoutExternalId[$name];\n                    }\n                }\n\n                if (isset($mergedScore[$mappedTag])) {\n                    $mergedScore[$mappedTag] += $v;\n                } else {\n                    $mergedScore[$mappedTag] = $v;\n                }\n            }\n            $scores = $mergedScore;\n            $maxScore = !empty($mergedScore) ? max(array_values($mergedScore)) : 0;\n        }\n        // end FIXME\n\n        $this->Galaxy->sortMatrixByScore($tabs, $scores);\n        if ($this->_isRest()) {\n            $json = array('matrix' => $tabs, 'scores' => $scores, 'instance-uuid' => $instanceUUID);\n            $this->response->type('json');\n            return new CakeResponse(array('body' => json_encode($json), 'status' => 200, 'type' => 'json'));\n        } else {\n            if (!$this->request->is('ajax')) {\n                throw new MethodNotAllowedException(__('Invalid method.'));\n            }\n\n            App::uses('ColourGradientTool', 'Tools');\n            $gradientTool = new ColourGradientTool();\n            $colours = $gradientTool->createGradientFromValues($scores);\n            $this->set('eventId', $eventId);\n            $this->set('target_type', $scope);\n            $this->set('columnOrders', $killChainOrders);\n            $this->set('tabs', $tabs);\n            $this->set('scores', $scores);\n            $this->set('maxScore', $maxScore);\n            if (!empty($colours)) {\n                $this->set('colours', $colours['mapping']);\n                $this->set('interpolation', $colours['interpolation']);\n            }\n            $this->set('pickingMode', !$disable_picking);\n            $this->set('target_id', $scope_id);\n            if ($matrixData['galaxy']['id'] == $mitreAttackGalaxyId) {\n                $this->set('defaultTabName', 'mitre-attack');\n                $this->set('removeTrailling', 2);\n            }\n\n            $this->render('/Elements/view_galaxy_matrix');\n        }\n    }\n\n    public function delegation_index()\n    {\n        $this->loadModel('EventDelegation');\n        $delegatedEvents = $this->EventDelegation->find('list', array(\n                'conditions' => array('EventDelegation.org_id' => $this->Auth->user('org_id')),\n                'fields' => array('event_id')\n        ));\n        $this->Event->contain(array('User.email', 'EventTag' => array('Tag')));\n        $tags = $this->Event->EventTag->Tag->find('all', array('recursive' => -1));\n        $tagNames = array('None');\n        foreach ($tags as $k => $v) {\n            $tagNames[$v['Tag']['id']] = $v['Tag']['name'];\n        }\n        $this->set('tags', $tagNames);\n        $this->paginate = array(\n            'limit' => 60,\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events <- no we won't, this is the max a user van view/page.\n            'order' => array(\n                    'Event.timestamp' => 'DESC'\n            ),\n            'contain' => array(\n                    'Org' => array('fields' => array('id', 'name')),\n                    'Orgc' => array('fields' => array('id', 'name')),\n                    'SharingGroup' => array('fields' => array('id', 'name')),\n                    'ThreatLevel' => array('fields' => array('ThreatLevel.name'))\n\n            ),\n            'conditions' => array('Event.id' => $delegatedEvents),\n        );\n\n        $this->set('events', $this->paginate());\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('analysisLevels', $this->Event->analysisLevels);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n\n        $shortDist = array(0 => 'Organisation', 1 => 'Community', 2 => 'Connected', 3 => 'All', 4 => ' sharing Group');\n        $this->set('shortDist', $shortDist);\n        $this->set('ajax', false);\n        $this->set('simple', true);\n        $this->Event->contain(array('User.email', 'EventTag' => array('Tag')));\n        $tags = $this->Event->EventTag->Tag->find('all', array('recursive' => -1));\n        $tagNames = array('None');\n        foreach ($tags as $k => $v) {\n            $tagNames[$v['Tag']['id']] = $v['Tag']['name'];\n        }\n        $this->set('tags', $tagNames);\n        $this->render('index');\n    }\n\n    // expects an attribute ID and the module to be used\n    public function queryEnrichment($attribute_id, $module = false, $type = 'Enrichment')\n    {\n        if (!Configure::read('Plugin.' . $type . '_services_enable')) {\n            throw new MethodNotAllowedException(__('%s services are not enabled.', $type));\n        }\n        $attribute = $this->Event->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $attribute_id), 'flatten' => 1));\n        if (empty($attribute)) {\n            throw new MethodNotAllowedException(__('Attribute not found or you are not authorised to see it.'));\n        }\n        $this->loadModel('Module');\n        $enabledModules = $this->Module->getEnabledModules($this->Auth->user(), false, $type);\n        if (!is_array($enabledModules) || empty($enabledModules)) {\n            throw new MethodNotAllowedException(__('No valid %s options found for this attribute.', $type));\n        }\n        if ($this->request->is('ajax')) {\n            $modules = array();\n            foreach ($enabledModules['modules'] as $module) {\n                if (in_array($attribute[0]['Attribute']['type'], $module['mispattributes']['input'])) {\n                    $modules[] = array('name' => $module['name'], 'description' => $module['meta']['description']);\n                }\n            }\n            foreach (array('attribute_id', 'modules') as $viewVar) {\n                $this->set($viewVar, $$viewVar);\n            }\n            $this->set('type', $type);\n            $this->render('ajax/enrichmentChoice');\n        } else {\n            $options = array();\n            foreach ($enabledModules['modules'] as $temp) {\n                if ($temp['name'] == $module) {\n                    $format = (!empty($temp['mispattributes']['format']) ? $temp['mispattributes']['format'] : 'simplified');\n                    if (isset($temp['meta']['config'])) {\n                        foreach ($temp['meta']['config'] as $conf) {\n                            $options[$conf] = Configure::read('Plugin.' . $type . '_' . $module . '_' . $conf);\n                        }\n                    }\n                    break;\n                }\n            }\n            $distributions = $this->Event->Attribute->distributionLevels;\n            $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n            if (empty($sgs)) {\n                unset($distributions[4]);\n            }\n            $this->set('distributions', $distributions);\n            $this->set('sgs', $sgs);\n            if ($format == 'misp_standard') {\n                $this->__queryEnrichment($attribute, $module, $options, $type);\n            } else {\n                $this->__queryOldEnrichment($attribute, $module, $options, $type);\n            }\n        }\n    }\n\n    private function __queryEnrichment($attribute, $module, $options, $type)\n    {\n        if ($this->Event->Attribute->typeIsAttachment($attribute[0]['Attribute']['type'])) {\n            $attribute[0]['Attribute']['data'] = $this->Event->Attribute->base64EncodeAttachment($attribute[0]['Attribute']);\n        }\n        $event_id = $attribute[0]['Event']['id'];\n        $data = array('module' => $module, 'attribute' => $attribute[0]['Attribute'], 'event_id' => $event_id);\n        if (!empty($options)) {\n            $data['config'] = $options;\n        }\n        $data = json_encode($data);\n        $result = $this->Module->queryModuleServer('/query', $data, false, $type);\n        if (!$result) {\n            throw new MethodNotAllowedException(__('%s service not reachable.', $type));\n        }\n        if (isset($result['error'])) {\n            $this->Flash->error($result['error']);\n        }\n        if (!is_array($result)) {\n            throw new Exception($result);\n        }\n        $event = $this->Event->handleMispFormatFromModuleResult($result);\n        if (empty($event['Attribute']) && empty($event['Object'])) {\n            $this->__handleSimplifiedFormat($attribute, $module, $options, $result, $type);\n        } else {\n            $importComment = !empty($result['comment']) ? $result['comment'] : $attribute[0]['Attribute']['value'] . __(': Enriched via the ') . $module . ($type != 'Enrichment' ? ' ' . $type : '')  . ' module';\n            $this->set('importComment', $importComment);\n            $event['Event'] = $attribute[0]['Event'];\n            $org_name = $this->Event->Orgc->find('first', array(\n                'conditions' => array('Orgc.id' => $event['Event']['orgc_id']),\n                'fields' => array('Orgc.name')\n            ));\n            $event['Event']['orgc_name'] = $org_name['Orgc']['name'];\n            if ($attribute[0]['Object']['id']) {\n                $object_id = $attribute[0]['Object']['id'];\n                $initial_object = $this->Event->fetchInitialObject($event_id, $object_id);\n                if (!empty($initial_object)) {\n                    $event['initialObject'] = $initial_object;\n                }\n            }\n            $this->set('event', $event);\n            $this->set('menuItem', 'enrichmentResults');\n            $this->set('title', 'Enrichment Results');\n            $this->render('resolved_misp_format');\n        }\n    }\n\n    private function __queryOldEnrichment($attribute, $module, $options, $type)\n    {\n        $data = array('module' => $module, $attribute[0]['Attribute']['type'] => $attribute[0]['Attribute']['value'], 'event_id' => $attribute[0]['Attribute']['event_id'], 'attribute_uuid' => $attribute[0]['Attribute']['uuid']);\n        if ($this->Event->Attribute->typeIsAttachment($attribute[0]['Attribute']['type'])) {\n            $data['data'] = $this->Event->Attribute->base64EncodeAttachment($attribute[0]['Attribute']);\n        }\n        if (!empty($options)) {\n            $data['config'] = $options;\n        }\n        $data = json_encode($data);\n        $result = $this->Module->queryModuleServer('/query', $data, false, $type);\n        if (!$result) {\n            throw new MethodNotAllowedException(__('%s service not reachable.', $type));\n        }\n        if (isset($result['error'])) {\n            $this->Flash->error($result['error']);\n        }\n        if (!is_array($result)) {\n            throw new Exception($result);\n        }\n        $this->__handleSimplifiedFormat($attribute, $module, $options, $result, $type);\n    }\n\n    private function __handleSimplifiedFormat($attribute, $module, $options, $result, $type, $event = false)\n    {\n        $resultArray = $this->Event->handleModuleResult($result, $attribute[0]['Attribute']['event_id']);\n        if (!empty($result['comment'])) {\n            $importComment = $result['comment'];\n        } else {\n            $importComment = $attribute[0]['Attribute']['value'] . __(': Enriched via the %s', $module) . ($type != 'Enrichment' ? ' ' . $type : '')  . ' module';\n        }\n        $typeCategoryMapping = array();\n        foreach ($this->Event->Attribute->categoryDefinitions as $k => $cat) {\n            foreach ($cat['types'] as $type) {\n                $typeCategoryMapping[$type][$k] = $k;\n            }\n        }\n        foreach ($resultArray as $key => $result) {\n            if ($has_pipe = strpos($result['default_type'], '|') !== false || $result['default_type'] === 'malware-sample') {\n                $pieces = explode('|', $result['value']);\n                $or = array('Attribute.value1' => $pieces,\n                            'Attribute.value2' => $pieces);\n            } else {\n                $or = array('Attribute.value1' => $result['value'], 'Attribute.value2' => $result['value']);\n            }\n            $options = array(\n                'conditions' => array('OR' => $or),\n                'fields' => array('Attribute.type', 'Attribute.category', 'Attribute.value', 'Attribute.comment'),\n                'order' => false\n            );\n            $resultArray[$key]['related'] = $this->Event->Attribute->fetchAttributes($this->Auth->user(), $options);\n            if (isset($result['data'])) {\n                App::uses('FileAccessTool', 'Tools');\n                $fileAccessTool = new FileAccessTool();\n                $tmpdir = Configure::read('MISP.tmpdir') ? Configure::read('MISP.tmpdir') : '/tmp';\n                $tempFile = $fileAccessTool->createTempFile($tmpdir, $prefix = 'MISP');\n                $fileAccessTool->writeToFile($tempFile, $result['data']);\n                $resultArray[$key]['data'] = basename($tempFile) . '|' . filesize($tempFile);\n            }\n        }\n        $this->set('type', $type);\n        if (!$event){\n            $this->set('event', array('Event' => $attribute[0]['Event']));\n        }\n        $this->set('resultArray', $resultArray);\n        $this->set('typeList', array_keys($this->Event->Attribute->typeDefinitions));\n        $this->set('defaultCategories', $this->Event->Attribute->defaultCategories);\n        $this->set('typeCategoryMapping', $typeCategoryMapping);\n        $this->set('title', 'Enrichment Results');\n        $this->set('importComment', $importComment);\n        $this->render('resolved_attributes');\n    }\n\n    public function handleModuleResults($id)\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('Event not found or you don\\'t have permissions to create attributes'));\n        }\n        if ($this->request->is('post')) {\n            if (!$this->Event->checkIfAuthorised($this->Auth->user(), $id)) {\n                throw new MethodNotAllowedException(__('Invalid event.'));\n            }\n            $resolved_data = json_decode($this->request->data['Event']['JsonObject'], true);\n            $data = json_decode($this->request->data['Event']['data'], true);\n            if (!empty($data['initialObject'])) {\n                $resolved_data['initialObject'] = $data['initialObject'];\n            }\n            unset($data);\n            $default_comment = $this->request->data['Event']['default_comment'];\n            $flashMessage = $this->Event->processModuleResultsDataRouter($this->Auth->user(), $resolved_data, $id, $default_comment);\n            $this->Flash->info($flashMessage);\n            $this->redirect(array('controller' => 'events', 'action' => 'view', $id));\n        } else {\n            throw new MethodNotAllowedException('This endpoint requires a POST request.');\n        }\n    }\n\n    public function importModule($module, $eventId)\n    {\n        $this->loadModel('Module');\n        $moduleName = $module;\n        if (!$this->Event->checkIfAuthorised($this->Auth->user(), $eventId)) {\n            throw new MethodNotAllowedException(__('Invalid event.'));\n        }\n        $module = $this->Module->getEnabledModule($module, 'Import');\n        if (!is_array($module)) {\n            throw new MethodNotAllowedException($module);\n        }\n        if (!isset($module['mispattributes']['inputSource'])) {\n            $module['mispattributes']['inputSource'] = array('paste');\n        }\n        if ($this->request->is('post')) {\n            $fail = false;\n            $modulePayload = array(\n                    'module' => $module['name'],\n                    'event_id' => $eventId\n            );\n            if (isset($module['meta']['config'])) {\n                foreach ($module['meta']['config'] as $conf) {\n                    $modulePayload['config'][$conf] = Configure::read('Plugin.Import_' . $moduleName . '_' . $conf);\n                }\n            }\n            if ($moduleName === 'csvimport') {\n                if (empty($this->request->data['Event']['config']['header']) && $this->request->data['Event']['config']['has_header'] === '1') {\n                    $this->request->data['Event']['config']['header'] = ' ';\n                }\n                if (empty($this->request->data['Event']['config']['special_delimiter'])) {\n                    $this->request->data['Event']['config']['special_delimiter'] = ' ';\n                }\n            }\n            foreach ($module['mispattributes']['userConfig'] as $configName => $config) {\n                if (!$fail) {\n                    if (isset($config['validation'])) {\n                        if ($config['validation'] === '0' && $config['type'] == 'String') {\n                            $validation = true;\n                        }\n                    } else {\n                        $validation = call_user_func_array(array($this->Module, $this->Module->configTypes[$config['type']]['validation']), array($this->request->data['Event']['config'][$configName]));\n                    }\n                    if ($validation !== true) {\n                        $fail = ucfirst($configName) . ': ' . $validation;\n                    } else {\n                        if (isset($config['regex']) && !empty($config['regex'])) {\n                            $fail = preg_match($config['regex'], $this->request->data['Event']['config'][$configName]) ? false : ucfirst($configName) . ': ' . 'Invalid setting' . ($config['errorMessage'] ? ' - ' . $config['errorMessage'] : '');\n                            if (!empty($fail)) {\n                                $modulePayload['config'][$configName] = $this->request->data['Event']['config'][$configName];\n                            }\n                        } else {\n                            $modulePayload['config'][$configName] = $this->request->data['Event']['config'][$configName];\n                        }\n                    }\n                }\n            }\n            if (!$fail) {\n                if (!empty($module['mispattributes']['inputSource'])) {\n                    if (!isset($this->request->data['Event']['source'])) {\n                        if (in_array('paste', $module['mispattributes']['inputSource'])) {\n                            $this->request->data['Event']['source'] = '0';\n                        } else {\n                            $this->request->data['Event']['source'] = '1';\n                        }\n                    }\n                    if ($this->request->data['Event']['source'] == '1') {\n                        if (isset($this->request->data['Event']['data'])) {\n                            $modulePayload['data'] = base64_decode($this->request->data['Event']['data']);\n                        } elseif (!isset($this->request->data['Event']['fileupload']) || empty($this->request->data['Event']['fileupload'])) {\n                            $fail = 'Invalid file upload.';\n                        } else {\n                            $fileupload = $this->request->data['Event']['fileupload'];\n                            $tmpfile = new File($fileupload['tmp_name']);\n                            if ((isset($fileupload['error']) && $fileupload['error'] == 0) || (!empty($fileupload['tmp_name']) && $fileupload['tmp_name'] != 'none') && is_uploaded_file($tmpfile->path)) {\n                                $filename = basename($fileupload['name']);\n                                App::uses('FileAccessTool', 'Tools');\n                                $modulePayload['data'] = (new FileAccessTool())->readFromFile($fileupload['tmp_name'], $fileupload['size']);\n                            } else {\n                                $fail = 'Invalid file upload.';\n                            }\n                        }\n                    } else {\n                        $modulePayload['data'] = $this->request->data['Event']['paste'];\n                    }\n                } else {\n                    $modulePayload['data'] = '';\n                }\n                if (!$fail) {\n                    $modulePayload['data'] = base64_encode($modulePayload['data']);\n                    if (!empty($filename)) {\n                        $modulePayload['filename'] = $filename;\n                    }\n                    $result = $this->Module->queryModuleServer('/query', json_encode($modulePayload, true), false, $moduleFamily = 'Import');\n                    if (!$result) {\n                        throw new Exception(__('Import service not reachable.'));\n                    }\n                    if (isset($result['error'])) {\n                        $this->Flash->error($result['error']);\n                    }\n                    if (!is_array($result)) {\n                        throw new Exception($result);\n                    }\n                    $importComment = !empty($result['comment']) ? $result['comment'] : 'Enriched via the ' . $module['name'] . ' module';\n                    if (!empty($module['mispattributes']['format']) && $module['mispattributes']['format'] === 'misp_standard') {\n                        $event = $this->Event->handleMispFormatFromModuleResult($result);\n                        $event['Event'] = array('id' => $eventId);\n                        if ($this->_isRest()) {\n                            $this->Event->processModuleResultsDataRouter($this->Auth->user(), $event, $eventId, $importComment);\n                            return $this->RestResponse->viewData($event, $this->response->type());\n                        }\n                        $this->set('event', $event);\n                        $this->set('menuItem', 'importResults');\n                        $render_name = 'resolved_misp_format';\n                    } else {\n                        $resultArray = $this->Event->handleModuleResult($result, $eventId);\n                        if ($this->_isRest()) {\n                            return $this->__pushFreetext(\n                                $resultArray,\n                                $eventId,\n                                false,\n                                false,\n                                'soft'\n                            );\n                        }\n                        $typeCategoryMapping = array();\n                        foreach ($this->Event->Attribute->categoryDefinitions as $k => $cat) {\n                            foreach ($cat['types'] as $type) {\n                                $typeCategoryMapping[$type][$k] = $k;\n                            }\n                        }\n                        foreach ($resultArray as $key => $result) {\n                            if ($has_pipe = strpos($result['default_type'], '|') !== false || $result['default_type'] === 'malware-sample') {\n                                $pieces = explode('|', $result['value']);\n                                $or = array('Attribute.value1' => $pieces,\n                                            'Attribute.value2' => $pieces);\n                            } else {\n                                $or = array('Attribute.value1' => $result['value'], 'Attribute.value2' => $result['value']);\n                            }\n                            $options = array(\n                                'conditions' => array('OR' => $or),\n                                'fields' => array('Attribute.type', 'Attribute.category', 'Attribute.value', 'Attribute.comment'),\n                                'order' => false\n                            );\n                            $resultArray[$key]['related'] = $this->Event->Attribute->fetchAttributes($this->Auth->user(), $options);\n                        }\n                        $this->set('event', array('Event' => array('id' => $eventId)));\n                        $this->set('resultArray', $resultArray);\n                        $this->set('typeList', array_keys($this->Event->Attribute->typeDefinitions));\n                        $this->set('defaultCategories', $this->Event->Attribute->defaultCategories);\n                        $this->set('typeCategoryMapping', $typeCategoryMapping);\n                        $render_name = 'resolved_attributes';\n                    }\n                    $distributions = $this->Event->Attribute->distributionLevels;\n                    $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n                    if (empty($sgs)) {\n                        unset($distributions[4]);\n                    }\n                    $this->set('distributions', $distributions);\n                    $this->set('sgs', $sgs);\n                    $this->set('title', 'Import Results');\n                    $this->set('importComment', $importComment);\n                    $this->render($render_name);\n                }\n            } else {\n                $this->Flash->error($fail);\n            }\n        }\n        $this->set('configTypes', $this->Module->configTypes);\n        $this->set('module', $module);\n        $this->set('eventId', $eventId);\n    }\n\n    public function exportModule($module, $id, $standard = false)\n    {\n        $result = $this->Event->export($this->Auth->user(), $module, array('eventid' => $id, 'standard' => $standard));\n        $this->response->body(base64_decode($result['data']));\n        $this->response->type($result['response']);\n        $this->response->download('misp.event.' . $id . '.' . $module . '.export.' . $result['extension']);\n        return $this->response;\n    }\n\n    public function toggleCorrelation($id)\n    {\n        if (!$this->_isSiteAdmin() && !Configure::read('MISP.allow_disabling_correlation')) {\n            throw new MethodNotAllowedException(__('Disabling the correlation is not permitted on this instance.'));\n        }\n        $this->Event->id = $id;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid Event.'));\n        }\n        if (!$this->Auth->user('Role')['perm_modify']) {\n            throw new MethodNotAllowedException(__('You don\\'t have permission to do that.'));\n        }\n        $conditions = array('Event.id' => $id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['Event.orgc_id'] = $this->Auth->user('org_id');\n        }\n        $event = $this->Event->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid Event.'));\n        }\n        if (!$this->Auth->user('Role')['perm_modify_org'] && $this->Auth->user('id') != $event['Event']['user_id']) {\n            throw new MethodNotAllowedException(__('You don\\'t have permission to do that.'));\n        }\n        if ($this->request->is('post')) {\n            if ($event['Event']['disable_correlation']) {\n                $event['Event']['disable_correlation'] = 0;\n                $this->Event->save($event);\n                $attributes = $this->Event->Attribute->find('all', array(\n                    'conditions' => array('Attribute.event_id' => $id),\n                    'recursive' => -1\n                ));\n                foreach ($attributes as $attribute) {\n                    $this->Event->Attribute->__afterSaveCorrelation($attribute['Attribute'], false, $event);\n                }\n            } else {\n                $event['Event']['disable_correlation'] = 1;\n                $this->Event->save($event);\n                $this->Event->Attribute->purgeCorrelations($id);\n            }\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('events', 'toggleCorrelation', $id, false, 'Correlation ' . ($event['Event']['disable_correlation'] ? 'disabled' : 'enabled') . '.');\n            } else {\n                $this->Flash->success('Correlation ' . ($event['Event']['disable_correlation'] ? 'disabled' : 'enabled') . '.');\n                $this->redirect(array('controller' => 'events', 'action' => 'view', $id));\n            }\n        } else {\n            $this->set('event', $event);\n            $this->render('ajax/toggle_correlation');\n        }\n    }\n\n    public function checkPublishedStatus($id)\n    {\n        $event = $this->Event->fetchEvent($this->Auth->user(), array('metadata' => 1, 'eventid' => $id));\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        return new CakeResponse(array('body'=> h($event[0]['Event']['published']), 'status'=>200, 'type' => 'txt'));\n    }\n    // #TODO i18n\n    public function pushEventToZMQ($id)\n    {\n        $id = $this->Toolbox->findIdByUuid($this->Event, $id);\n        if ($this->request->is('Post')) {\n            if (Configure::read('Plugin.ZeroMQ_enable')) {\n                $pubSubTool = $this->Event->getPubSubTool();\n                $event = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n                if (!empty($event)) {\n                    $pubSubTool->publishEvent($event[0]);\n                    $success = 1;\n                    $message = 'Event published to ZMQ';\n                } else {\n                    $message = 'Invalid event.';\n                }\n            } else {\n                $message = 'ZMQ event publishing not enabled.';\n            }\n        } else {\n            $message = 'This functionality is only available via POST requests';\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Events', 'pushEventToZMQ', $id, $this->response->type(), $message);\n        } else {\n            if (!empty($success)) {\n                $this->Flash->success($message);\n            } else {\n                $this->Flash->error($message);\n            }\n            $this->redirect($this->referer());\n        }\n    }\n\n    public function pushEventToKafka($id)\n    {\n        if ($this->request->is('Post')) {\n            $message = 'Kafka event publishing not enabled.';\n            if (Configure::read('Plugin.Kafka_enable')) {\n                $kafkaEventTopic = Configure::read('Plugin.Kafka_event_notifications_topic');\n                $event = $this->Event->quickFetchEvent(array('eventid' => $id));\n                if (Configure::read('Plugin.Kafka_event_notifications_enable') && !empty($kafkaEventTopic)) {\n                    $kafkaPubTool = $this->Event->getKafkaPubTool();\n                    if (!empty($event)) {\n                        $kafkaPubTool->publishJson($kafkaEventTopic, $event, 'manual_publish');\n                        $success = 1;\n                        $message = 'Event published to Kafka';\n                    } else {\n                        $success = 0;\n                        $message = 'Invalid event.';\n                    }\n                }\n                $kafkaPubTopic = Configure::read('Plugin.Kafka_event_publish_notifications_topic');\n                if (!empty($event['Event']['published']) && Configure::read('Plugin.Kafka_event_publish_notifications_enable') && !empty($kafkaPubTopic)) {\n                    $kafkaPubTool = $this->Event->getKafkaPubTool();\n                    $params = array('eventid' => $id);\n                    if (Configure::read('Plugin.Kafka_include_attachments')) {\n                        $params['includeAttachments'] = 1;\n                    }\n                    $event = $this->Event->fetchEvent($this->Auth->user(), $params);\n                    if (!empty($event)) {\n                        $kafkaPubTool->publishJson($kafkaPubTopic, $event[0], 'manual_publish');\n                        if (!isset($success)) {\n                            $success = 1;\n                            $message = 'Event published to Kafka';\n                        }\n                    } else {\n                        $success = 0;\n                        $message = 'Invalid event.';\n                    }\n                }\n            }\n        } else {\n            $message = 'This functionality is only available via POST requests';\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Events', 'pushEventToKafka', $id, $this->response->type(), $message);\n        } else {\n            if (!empty($success)) {\n                $this->Flash->success($message);\n            } else {\n                $this->Flash->error($message);\n            }\n            $this->redirect($this->referer());\n        }\n    }\n\n    public function getEventInfoById($id)\n    {\n        if (empty($id)) {\n            throw new MethodNotAllowedException(__('Invalid ID.'));\n        }\n        $conditions = array('Event.id' => $id);\n        if (Validation::uuid($id)) {\n            $conditions = array('Event.uuid' => $id);\n        } elseif (!is_numeric($id)) {\n            $conditions = array('Event.uuid' => -1);\n        }\n        $event = $this->Event->find('first', array(\n            'conditions' => $conditions,\n            'fields' => array('Event.id', 'Event.distribution', 'Event.sharing_group_id', 'Event.info', 'Event.org_id', 'Event.date', 'Event.threat_level_id', 'Event.analysis'),\n            'contain' => array('Orgc.id', 'Orgc.name', 'EventTag' => array('Tag.id', 'Tag.name', 'Tag.colour'), 'ThreatLevel.name'),\n            'recursive' => -1\n        ));\n        if (!empty($event) && !$this->_isSiteAdmin() && $event['Event']['org_id'] != $this->Auth->user('org_id')) {\n            if (!in_array($event['Event']['distribution'], array(1, 2, 3))) {\n                if ($event['Event']['distribution'] == 4) {\n                    $sharingGroups = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user());\n                    if (!in_array($event['Event']['sharing_group_id'], $sharingGroups)) {\n                        $event = array();\n                    }\n                } else {\n                    $event = array();\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($event, $this->response->type());\n        } else {\n            if ($this->request->is('ajax')) {\n                $this->layout = 'ajax';\n            }\n            $this->set('analysisLevels', $this->Event->analysisLevels);\n            $this->set('validUuid', Validation::uuid($id));\n            $this->set('id', $id);\n            $this->set('event', $event);\n        }\n    }\n\n    public function enrichEvent($id)\n    {\n        if (Validation::uuid($id)) {\n            $conditions = array('Event.uuid' => $id);\n        } else {\n            $conditions = array('Event.id' => $id);\n        }\n        $event = $this->Event->find('first', array('conditions' => $conditions, 'recursive' => -1));\n        if (empty($event) || (!$this->_isSiteAdmin() && ($this->Auth->user('org_id') != $event['Event']['orgc_id'] || !$this->userRole['perm_modify']))) {\n            throw new MethodNotAllowedException(__('Invalid Event'));\n        }\n        $this->Event->insertLock($this->Auth->user(), $event['Event']['id']);\n        if ($this->request->is('post')) {\n            $modules = array();\n            if (!isset($this->request->data['Event'])) {\n                $this->request->data = array('Event' => $this->request->data);\n            }\n            foreach ($this->request->data['Event'] as $module => $enabled) {\n                if ($enabled) {\n                    $modules[] = $module;\n                }\n            }\n            $result = $this->Event->enrichmentRouter(array(\n                'user' => $this->Auth->user(),\n                'event_id' => $event['Event']['id'],\n                'modules' => $modules\n            ));\n            if ($this->_isRest()) {\n            } else {\n                if ($result === true) {\n                    $result = __('Enrichment task queued for background processing. Check back later to see the results.');\n                }\n                $this->Flash->success($result);\n                $this->redirect('/events/view/' . $id);\n            }\n        } else {\n            $this->loadModel('Module');\n            $modules = $this->Module->getEnabledModules($this->Auth->user(), 'expansion');\n            $this->layout = 'ajax';\n            $this->set('modules', $modules);\n            $this->render('ajax/enrich_event');\n        }\n    }\n\n    public function checkLocks($id)\n    {\n        $this->loadModel('EventLock');\n        $event = $this->Event->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('Event.id' => $id),\n            'fields' => array('Event.orgc_id')\n        ));\n        $locks = array();\n        if (!empty($event) && ($event['Event']['orgc_id'] == $this->Auth->user('org_id') || $this->_isSiteAdmin())) {\n            $locks = $this->EventLock->checkLock($this->Auth->user(), $id);\n        }\n        if (!empty($locks)) {\n            $temp = $locks;\n            $locks = array();\n            foreach ($temp as $t) {\n                if ($t['User']['id'] !== $this->Auth->user('id')) {\n                    if (!$this->_isSiteAdmin() && $t['User']['org_id'] != $this->Auth->user('org_id')) {\n                        continue;\n                    }\n                    $locks[] = $t['User']['email'];\n                }\n            }\n        }\n        // TODO: i18n\n        if (!empty($locks)) {\n            $message = sprintf('Warning: Your view on this event might not be up to date as it is currently being edited by: %s', implode(', ', $locks));\n            $this->set('message', $message);\n            $this->layout = false;\n            $this->render('/Events/ajax/event_lock');\n        } else {\n            return $this->RestResponse->viewData('', $this->response->type(), false, true);\n        }\n    }\n\n    public function getEditStrategy($id)\n    {\n        // find the id of the event, change $id to it and proceed to read the event as if the ID was entered.\n        if (Validation::uuid($id)) {\n            $this->Event->recursive = -1;\n            $event = $this->Event->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Event.uuid' => $id),\n                'fields' => array('Event.id', 'Event.uuid', 'Event.orgc_id')\n            ));\n            if ($event == null) {\n                throw new NotFoundException(__('Invalid event'));\n            }\n            $id = $event['Event']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException(__('Invalid event'));\n        } else {\n            $event = $this->Event->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Event.id' => $id),\n                'fields' => array('Event.id', 'Event.uuid', 'Event.orgc_id')\n            ));\n        }\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $response = array('extensions' => array());\n        if ($event['Event']['orgc_id'] === $this->Auth->user('org_id')) {\n            $response['strategy'] = 'edit';\n        } else {\n            $response['strategy'] = 'extend';\n        }\n        $extendedEvents = $this->Event->find('all', array(\n            'recursive' => -1,\n            'fields' => array('Event.id', 'Event.info', 'Event.uuid'),\n            'conditions' => array(\n                'Event.extends_uuid' => $event['Event']['uuid'],\n                'Event.orgc_id' => $this->Auth->user('org_id')\n            )\n        ));\n        foreach ($extendedEvents as $extendedEvent) {\n            $response['extensions'][] = $extendedEvent['Event'];\n        }\n        return $this->RestResponse->viewData($response, $this->response->type());\n    }\n    public function upload_analysis_file($eventId)\n    {\n        $data = array();\n        $this->set('eventId', $eventId);\n        $this->set('file_uploaded', \"0\");\n        $this->set('file_name', \"\");\n\n        if (!$this->userRole['perm_modify']) {\n            throw new UnauthorizedException('You do not have permission to do that.');\n        }\n\n        if ($this->request->is('post') && !empty($this->request['data']['Event']['analysis_file']['name'])) {\n            $this->set('file_uploaded', \"1\");\n            $this->set('file_name', $this->request['data']['Event']['analysis_file']['name']);\n            $this->set('file_content', file_get_contents($this->request['data']['Event']['analysis_file']['tmp_name']));\n\n        //$result = $this->Event->upload_mactime($this->Auth->user(), );\n        } elseif ($this->request->is('post') && $this->request['data']['SelectedData']['mactime_data']) {\n            // Find the event that is to be updated\n            if (Validation::uuid($eventId)) {\n                $eventFindParams['conditions']['Event.uuid'] = $eventId;\n            } elseif (is_numeric($eventId)) {\n                $eventFindParams['conditions']['Event.id'] = $eventId;\n            } else {\n                throw new NotFoundException(__('Invalid event.'));\n            }\n            $event = $this->Event->find('first', $eventFindParams);\n            if (empty($event) || (!$this->_isSiteAdmin() && $event['Event']['orgc_id'] != $this->Auth->user('org_id'))) {\n                throw new NotFoundException(__('Invalid event.'));\n            }\n            $eventId = $event['Event']['id'];\n\n            $fileName = $this->request['data']['SelectedData']['mactime_file_name'];\n            $fileData = $this->request['data']['SelectedData']['mactime_file_content'];\n            $object = array();\n        $data = json_decode($this->request['data']['SelectedData']['mactime_data'], true);\n        $firstObject = 1;\n            foreach ($data as $objectData) {\n                $object['Object'] = array(\n                    'name' => 'mactime-timeline-analysis',\n                    'meta-category' => 'file',\n                    'description' => 'Mactime template, used in forensic investigations to describe the timeline of a file activity',\n                    'template_version' => 1,\n                    'template_uuid' => '9297982e-be62-4772-a665-c91f5a8d639'\n                );\n\n                $object['Attribute'] = array(\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\"=> \"Other\",\n                        \"type\" => \"text\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"filepath\",\n                        \"value\" => $objectData['filepath']\n                    ],\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\" => \"Other\",\n                        \"type\" => \"datetime\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"datetime\",\n                        \"value\" => $objectData['time_accessed']\n                    ],\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\" => \"Other\",\n                        \"type\" => \"text\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"fileSize\",\n                        \"value\" => $objectData['file_size']\n                    ],\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\" => \"Other\",\n                        \"type\" => \"text\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"activityType\",\n                        \"value\" => $objectData['activity_type']\n                    ],\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\" => \"Other\",\n                        \"type\" => \"text\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"filePermissions\",\n                        \"value\" => $objectData['permissions']\n                    ],\n                    [\n                        \"event_id\" => $eventId,\n                        \"category\" => \"External analysis\",\n                        \"type\" => \"attachment\",\n                        \"to_ids\" => false,\n                        \"distribution\" => \"5\",\n                        \"object_relation\" => \"file\",\n                        \"value\" => $fileName,\n                        \"data\" => base64_encode($fileData),\n                        \"comment\" => \"Mactime source file\"\n                    ]\n\n                    );\n                $this->loadModel('MispObject');\n                $ObjectResult = $this->MispObject->saveObject($object, $eventId, \"\", \"\");\n                $temp = $this->MispObject->ObjectReference->Object->find('first', array(\n                    'recursive' => -1,\n                    'fields' => array('Object.uuid','Object.id'),\n                    'conditions' => array('Object.id' =>$ObjectResult)\n                ));\n\n                if ($firstObject === 0) {\n                    $objectRef['referenced_id'] = $PreviousObjRef['Object']['id'];\n                    $objectRef['referenced_uuid'] = $PreviousObjRef['Object']['uuid'];\n                    $objectRef['object_id'] = $ObjectResult;\n                    $objectRef['relationship_type'] = \"preceded-by\";\n                    $this->loadModel('MispObject');\n                    $result = $this->MispObject->ObjectReference->captureReference($objectRef, $eventId, $this->Auth->user(), false);\n                    $objectRef['referenced_id'] = $temp['Object']['id'];\n                    $objectRef['referenced_uuid'] = $temp['Object']['uuid'];\n                    $objectRef['object_id'] = $PreviousObjRef['Object']['id'];\n                    $objectRef['relationship_type'] = \"followed-by\";\n                    $this->loadModel('MispObject');\n                    $result = $this->MispObject->ObjectReference->captureReference($objectRef, $eventId, $this->Auth->user(), false);\n                    $PreviousObjRef = $temp;\n                } else {\n                    $PreviousObjRef = $temp;\n                    $firstObject = 0;\n                }\n            }\n            $this->redirect('/events/view/' . $eventId);\n        }\n    }\n\n    public function cullEmptyEvents()\n    {\n        $eventIds = $this->Event->find('list', array(\n            'conditions' => array('Event.published' => 1),\n            'fields' => array('Event.id', 'Event.uuid'),\n            'recursive' => -1\n        ));\n        $count = 0;\n        $this->Event->skipBlacklist = true;\n        foreach ($eventIds as $eventId => $eventUuid) {\n            $result = $this->Event->Attribute->find('first', array(\n                'conditions' => array('Attribute.event_id' => $eventId),\n                'recursive' => -1,\n                'fields' => array('Attribute.id', 'Attribute.event_id')\n            ));\n            if (empty($result)) {\n                $this->Event->delete($eventId);\n                $count++;\n            }\n        }\n        $this->Event->skipBlacklist = null;\n        $message = __('%s event(s) deleted.', $count);\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($message, $this->response->type());\n        } else {\n            $this->Flash->success($message);\n            $this->redirect($this->referer());\n        }\n    }\n}\n"], "filenames": ["app/Controller/EventsController.php"], "buggy_code_start_loc": [4], "buggy_code_end_loc": [2848], "fixing_code_start_loc": [5], "fixing_code_end_loc": [2850], "type": "CWE-862", "message": "An issue was discovered in MISP 2.4.128. app/Controller/EventsController.php lacks an event ACL check before proceeding to allow a user to send an event contact form.", "other": {"cve": {"id": "CVE-2020-15412", "sourceIdentifier": "cve@mitre.org", "published": "2020-06-30T14:15:11.877", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in MISP 2.4.128. app/Controller/EventsController.php lacks an event ACL check before proceeding to allow a user to send an event contact form."}, {"lang": "es", "value": "Se detect\u00f3 un problema en MISP versi\u00f3n 2.4.128. El archivo app/Controller/EventsController.php carece de una comprobaci\u00f3n de la ACL del evento antes de proceder a permitir a un usuario enviar un formulario de contacto de evento"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.128:*:*:*:*:*:*:*", "matchCriteriaId": "1F16A85A-DEA7-491C-8D83-E4D61E428C32"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/b0be3b07fee2ab9bf1869ef81a7f24f58bd687ef", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/b0be3b07fee2ab9bf1869ef81a7f24f58bd687ef"}}