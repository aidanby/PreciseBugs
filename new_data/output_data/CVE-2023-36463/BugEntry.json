{"buggy_code": ["var entries = [];\nconst entryLength = 19;\nvar exportString = \"\";\nconst emptyObject = { \"name\": \"\", \"firstName\": \"\", \"birthdate\": \"\", \"sex\": \"\", \"zip\": \"\", \"residency\": \"\", \"nationality\": \"\", \"street\": \"\", \"identityDisk\": \"\", \"district\": \"\", \"rcUnit\": \"\", \"place\": \"\", \"unit\": \"\", \"start\": \"\" }\n\nfunction isEmpty(obj) {\n    const keys = Object.keys(obj)\n    for (let i = 0; i < keys.length; i++) {\n        let val = obj[keys[i]]\n        if (val && val != \"\" && val != undefined && val != null) return false\n    }\n    return true\n}\n\nfunction dateToStandard(date, includeTime = false) {\n    const jsDate = new Date(date);\n    if (jsDate == \"Invalid Date\") return \"\"\n    const yyyy = jsDate.getFullYear();\n    let mm = jsDate.getMonth() + 1;\n    let dd = jsDate.getDate();\n    let hh = jsDate.getHours();\n    let minmin = jsDate.getMinutes();\n\n    if (dd < 10) dd = '0' + dd;\n    if (mm < 10) mm = '0' + mm;\n    if (hh < 10) hh = '0' + hh;\n    if (minmin < 10) minmin = '0' + minmin;\n\n    if (includeTime) return dd + '.' + mm + '.' + yyyy + ', ' + hh + ':' + minmin;\n    return dd + '.' + mm + '.' + yyyy;\n}\n\nfunction importString(input) {\n    getData()\n    input = input.replace(/\\n/g, \";\");\n    input = input.split(\";\");\n    input.length = input.length - 1;\n    for (let i = 0; i < input.length / entryLength; i++) {\n        let entry = {};\n        entry.name = input[i * entryLength + 0];\n        entry.firstName = input[i * entryLength + 1];\n        let birthdate = input[i * entryLength + 2];\n        if (!birthdate) {\n            entry.birthdate = \"\"\n        } else {\n            birthdate = birthdate.split(\".\")\n            entry.birthdate = `${birthdate[2]}-${birthdate[1]}-${birthdate[0]}`;\n        }\n        entry.sex = input[i * entryLength + 3];\n        entry.zip = input[i * entryLength + 4];\n        entry.residency = input[i * entryLength + 5];\n        entry.nationality = input[i * entryLength + 6];\n        entry.street = input[i * entryLength + 7];\n        entry.identityDisk = input[i * entryLength + 8];\n        entry.district = input[i * entryLength + 9];\n        entry.rcUnit = input[i * entryLength + 10];\n        entry.place = input[i * entryLength + 11];\n        entry.unit = input[i * entryLength + 12];\n        let start = input[i * entryLength + 13];\n        if (!start) {\n            entry.start = \"\"\n        } else {\n            start = start.split(\".\")\n            entry.start = `${start[2]}-${start[1]}-${start[0]}`;\n        }\n        entries.push(entry);\n    }\n    render()\n}\n\nfunction doExportString() {\n    getData();\n    let exportArray = [];\n    for (let i = 0; i < entries.length; i++) {\n        let entry = entries[i];\n        let arrayForEntry = [];\n        arrayForEntry[0] = entry.name;\n        arrayForEntry[1] = entry.firstName;\n        arrayForEntry[2] = dateToStandard(entry.birthdate);\n        arrayForEntry[3] = entry.sex;\n        arrayForEntry[4] = entry.zip;\n        arrayForEntry[5] = entry.residency;\n        arrayForEntry[6] = entry.nationality;\n        arrayForEntry[7] = entry.street;\n        arrayForEntry[8] = entry.identityDisk;\n        arrayForEntry[9] = entry.district;\n        arrayForEntry[10] = entry.rcUnit;\n        arrayForEntry[11] = entry.place;\n        arrayForEntry[12] = entry.unit;\n        arrayForEntry[13] = dateToStandard(entry.start, true);\n        let entryString = \"\";\n        for (let j = 0; j < entryLength - 1; j++) {\n            if (arrayForEntry[j] != undefined) entryString += arrayForEntry[j] + \";\";\n            else entryString += \";\";\n        }\n        exportArray.push(entryString);\n    }\n    let newExportString = \"\";\n    for (let j = 0; j < exportArray.length; j++) {\n        newExportString += exportArray[j] + \"\\n\";\n    }\n    exportString = newExportString;\n    document.getElementById(\"export-overlay\").style.display = \"inline\";\n}\n\nfunction download() {\n    let link = document.createElement(\"a\");\n    link.style.display = \"none\";\n    link.textContent = \"download\";\n    link.download = \"meldekarten.csv\";\n    link.href = \"data:text/csv;charset=utf-8,\" + encodeURIComponent(exportString);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    document.getElementById(\"export-overlay\").style.display = \"none\";\n}\n\nfunction copy() {\n    navigator.clipboard.writeText(exportString);\n    document.getElementById(\"export-overlay\").style.display = \"none\";\n}\n\nfunction addEntry() {\n    getData()\n    entries.push(emptyObject);\n    render()\n    const entriesObj = document.getElementsByClassName(\"entry\")\n    scrollTo({\n        top: entriesObj[entriesObj.length - 1].offsetTop,\n        left: 0,\n        behavior: \"smooth\"\n    })\n}\n\nfunction deleteAllData() {\n    document.getElementById(\"delete-all-overlay\").style.display = \"none\";\n    entries = [];\n    render();\n}\n\nfunction openDeleteEntry(element) {\n    document.getElementById(\"delete-entry-overlay\").style.display = \"inline\";\n    document.getElementById(\"delete-entry-button\").onclick = function () {\n        document.getElementById(\"delete-entry-overlay\").style.display = \"none\";\n        deleteEntry(element);\n    }\n}\n\nfunction deleteEntry(element) {\n    entries.splice(element, 1);\n    render();\n}\n\nfunction getData() {\n    let newEntries = []\n    const DOMEntries = document.getElementsByClassName(\"entry\")\n    for (let entry of DOMEntries) {\n        let entryObj = {};\n        entryObj.name = entry.getElementsByClassName(\"name\")[0].value;\n        entryObj.firstName = entry.getElementsByClassName(\"first-name\")[0].value;\n        entryObj.birthdate = entry.getElementsByClassName(\"birthdate\")[0].value;\n        entryObj.zip = entry.getElementsByClassName(\"zip\")[0].value;\n        entryObj.residency = entry.getElementsByClassName(\"residency\")[0].value;\n        entryObj.nationality = entry.getElementsByClassName(\"nationality\")[0].value;\n        entryObj.street = entry.getElementsByClassName(\"street\")[0].value;\n        entryObj.identityDisk = entry.getElementsByClassName(\"identity-disk\")[0].value;\n        entryObj.district = entry.getElementsByClassName(\"district\")[0].value;\n        entryObj.rcUnit = entry.getElementsByClassName(\"rc-unit\")[0].value;\n        entryObj.place = entry.getElementsByClassName(\"place\")[0].value;\n        entryObj.unit = entry.getElementsByClassName(\"unit\")[0].value;\n        entryObj.start = entry.getElementsByClassName(\"start\")[0].value;\n        let sex = entry.querySelectorAll(\"input[name='sex']\");\n        for (i = 0; i < sex.length; i++) {\n            if (sex[i].checked) entryObj.sex = sex[i].value\n        }\n        if (!isEmpty(entryObj)) newEntries.push(entryObj)\n    }\n    entries = newEntries\n    localStorage.setItem(\"storedState\", JSON.stringify(entries))\n}\n\nfunction render() {\n    localStorage.setItem(\"storedState\", JSON.stringify(entries))\n    let renderEntries = entries\n    if (entries.length === 0) renderEntries.push(emptyObject)\n    let html = \"\"\n    for (let i = 0; i < renderEntries.length; i++) {\n        let entry = entries[i]\n        let birthdateType = \"date\"\n        if (entry.birthdate == \"\") birthdateType = \"text\"\n        let startType = \"datetime-local\"\n        if (entry.start == \"\") startType = \"text\"\n        let maleChecked = \"\", femaleChecked = \"\", diverseChecked = \"\"\n        switch (entry.sex) {\n            case \"m\": maleChecked = \"checked\"; break;\n            case \"f\": femaleChecked = \"checked\"; break;\n            case \"d\": diverseChecked = \"checked\"\n        }\n        console.log\n        html += `<div class=\"entry\"><form>\n        <div style=\"display: flex; justify-content: space-between;\">\n            <span>\n                <input value=\"${entry.name}\" class=\"name\" type=\"text\" placeholder=\"Nachname\">\n                <input value=\"${entry.firstName}\" class=\"first-name\" type=\"text\" placeholder=\"Vorname\">\n            </span>\n            <button type=\"button\" onclick=\"openDeleteEntry(${i})\" class=\"input-style not-printable\">\ud83d\uddd1\ufe0f</button>\n        </div>\n        <input value=\"${entry.birthdate}\" class=\"birthdate\" type=\"${birthdateType}\" max=\"${new Date().toISOString().split('T')[0]}\" placeholder=\"Geburtsdatum\"\n            onfocus=\"(this.type='date')\" onblur=\"if(this.value==''){this.type='text'}\">\n        <fieldset id=\"fs-${i}\" class=\"input-style\" style=\"font-size: 21px;\" aria-label=\"Geschlecht\">\n            <label aria-label=\"m\u00e4nnlich\"> <input value=\"m\" type=\"radio\" name=\"sex\" ${maleChecked}>\u2642</label>\n            <label aria-label=\"weiblich\"> <input value=\"f\" type=\"radio\" name=\"sex\" ${femaleChecked}>\u2640</label>\n            <label aria-label=\"divers\"> <input value=\"d\" type=\"radio\" name=\"sex\" ${diverseChecked}>\u26a7</label>\n        </fieldset>\n        <input value=\"${entry.nationality}\" class=\"nationality\" type=\"text\" placeholder=\"Nationalit\u00e4t\">\n        <br>\n        <input value=\"${entry.street}\" class=\"street\" type=\"text\" placeholder=\"Stra\u00dfe\">\n        <input value=\"${entry.zip}\" class=\"zip\" type=\"text\" placeholder=\"PLZ\" pattern=\"[0-9]{5}\" inputmode=\"numeric\">\n        <input value=\"${entry.residency}\" class=\"residency\" type=\"text\" placeholder=\"Wohnort\">\n        <br>\n        <input value=\"${entry.identityDisk}\" aria-label=\"Nummer der Erkennungsmarke\" class=\"identity-disk\" type=\"text\" placeholder=\"Nr. der Erk.-Marke\">\n        <input value=\"${entry.district}\" class=\"district\" type=\"text\" placeholder=\"Kreisverband\">\n        <input value=\"${entry.rcUnit}\" class=\"rc-unit\" type=\"text\" placeholder=\"Gemeinschaft\">\n        <br>\n        <input value=\"${entry.place}\" class=\"place\" type=\"text\" placeholder=\"Einsatzort\">\n        <input value=\"${entry.unit}\" class=\"unit\" type=\"text\" placeholder=\"Einsatzformation\">\n        <input value=\"${entry.start}\" class=\"start\" type=\"${startType}\" placeholder=\"Einsatzbeginn\"\n            onfocus=\"(this.type='datetime-local')\" onblur=\"if(this.value==''){this.type='text'}\">\n    </form></div>`\n    }\n    document.getElementById(\"entry-list\").innerHTML = html\n}\n\nfunction printCard() {\n    getData()\n    let html = \"\"\n    for (let i = 0; i < entries.length; i++) {\n        let entry = entries[i]\n        entry.residency = entry.zip + \" \" + entry.residency\n        if (!entry.sex) entry.sex = \"uk\"\n        html += `<div>\n            <p class=\"name\">${entry.name}</p>\n            <p class=\"birthdate\">${dateToStandard(entry.birthdate)}</p>\n            <p class=\"residency\">${entry.residency}</p>\n            <p class=\"street\">${entry.street}</p>\n            <p class=\"district\">${entry.district}</p>\n            <p class=\"place\">${entry.place}</p>\n            <p class=\"start\">${dateToStandard(entry.start, true)}</p>\n            <p class=\"first-name\">${entry.firstName}</p>\n            <p class=\"${entry.sex}\">&times;</p>\n            <p class=\"nationality\">${entry.nationality}</p>\n            <p class=\"identity-disk\">${entry.identityDisk}</p>\n            <p class=\"rc-unit\">${entry.rcUnit}</p>\n            <p class=\"unit\">${entry.unit}</p>\n        </div>`\n    }\n    document.getElementById(\"print-area\").innerHTML = html\n    print()\n}\n\ndocument.getElementById(\"file-upload\").addEventListener(\"change\", function (e) {\n    let file = document.getElementById(\"file-upload\").files[0];\n    (async () => {\n        const fileContent = await file.text();\n        document.getElementById(\"import-overlay\").style.display = \"none\";\n        importString(fileContent);\n    })();\n});\ndocument.getElementById(\"add-string\").addEventListener(\"click\", function (e) {\n    document.getElementById(\"import-overlay\").style.display = \"none\";\n    importString(document.getElementById(\"string-input\").value);\n    document.getElementById(\"string-input\").value = \"\";\n});\n\nconst overlays = document.getElementsByClassName(\"overlay\");\nfor (let overlay of overlays) {\n    overlay.addEventListener(\"click\", (e) => {\n        if (e.target.className === \"overlay\") e.target.style.display = \"none\";\n    });\n}\n\nlet lsItem = JSON.parse(localStorage.getItem(\"storedState\"));\nif (lsItem !== null && lsItem instanceof Array) {\n    entries = lsItem;\n}\nrender()\nsetInterval(getData, 1000)\n\nasync function registerServiceWorker () {\n    if (\"serviceWorker\" in navigator) {\n        try {\n            const registration = await navigator.serviceWorker.register(\"./sw.js\", {\n                scope: \"./\",\n            });\n            if (registration.installing) {\n                console.log(\"Service worker installing\");\n            } else if (registration.waiting) {\n                console.log(\"Service worker installed\");\n            } else if (registration.active) {\n                console.log(\"Service worker active\");\n            }\n        } catch (error) {\n            console.error(`Registration failed with ${error}`);\n        }\n    }\n};\n\n\nregisterServiceWorker();\n"], "fixing_code": ["var entries = [];\nconst entryLength = 19;\nvar exportString = \"\";\nconst emptyObject = { \"name\": \"\", \"firstName\": \"\", \"birthdate\": \"\", \"sex\": \"\", \"zip\": \"\", \"residency\": \"\", \"nationality\": \"\", \"street\": \"\", \"identityDisk\": \"\", \"district\": \"\", \"rcUnit\": \"\", \"place\": \"\", \"unit\": \"\", \"start\": \"\" }\n\nfunction isEmpty(obj) {\n    const keys = Object.keys(obj)\n    for (let i = 0; i < keys.length; i++) {\n        let val = obj[keys[i]]\n        if (val && val != \"\" && val != undefined && val != null) return false\n    }\n    return true\n}\n\nfunction dateToStandard(date, includeTime = false) {\n    const jsDate = new Date(date);\n    if (jsDate == \"Invalid Date\") return \"\"\n    const yyyy = jsDate.getFullYear();\n    let mm = jsDate.getMonth() + 1;\n    let dd = jsDate.getDate();\n    let hh = jsDate.getHours();\n    let minmin = jsDate.getMinutes();\n\n    if (dd < 10) dd = '0' + dd;\n    if (mm < 10) mm = '0' + mm;\n    if (hh < 10) hh = '0' + hh;\n    if (minmin < 10) minmin = '0' + minmin;\n\n    if (includeTime) return dd + '.' + mm + '.' + yyyy + ', ' + hh + ':' + minmin;\n    return dd + '.' + mm + '.' + yyyy;\n}\n\nfunction importString(input) {\n    getData()\n    input = input.replace(/\\n/g, \";\");\n    input = input.split(\";\");\n    input.length = input.length - 1;\n    for (let i = 0; i < input.length / entryLength; i++) {\n        let entry = {};\n        entry.name = input[i * entryLength + 0];\n        entry.firstName = input[i * entryLength + 1];\n        let birthdate = input[i * entryLength + 2];\n        if (!birthdate) {\n            entry.birthdate = \"\"\n        } else {\n            birthdate = birthdate.split(\".\")\n            entry.birthdate = `${birthdate[2]}-${birthdate[1]}-${birthdate[0]}`;\n        }\n        entry.sex = input[i * entryLength + 3];\n        entry.zip = input[i * entryLength + 4];\n        entry.residency = input[i * entryLength + 5];\n        entry.nationality = input[i * entryLength + 6];\n        entry.street = input[i * entryLength + 7];\n        entry.identityDisk = input[i * entryLength + 8];\n        entry.district = input[i * entryLength + 9];\n        entry.rcUnit = input[i * entryLength + 10];\n        entry.place = input[i * entryLength + 11];\n        entry.unit = input[i * entryLength + 12];\n        let start = input[i * entryLength + 13];\n        if (!start) {\n            entry.start = \"\"\n        } else {\n            start = start.split(\".\")\n            entry.start = `${start[2]}-${start[1]}-${start[0]}`;\n        }\n        entries.push(entry);\n    }\n    render()\n}\n\nfunction doExportString() {\n    getData();\n    let exportArray = [];\n    for (let i = 0; i < entries.length; i++) {\n        let entry = entries[i];\n        let arrayForEntry = [];\n        arrayForEntry[0] = entry.name;\n        arrayForEntry[1] = entry.firstName;\n        arrayForEntry[2] = dateToStandard(entry.birthdate);\n        arrayForEntry[3] = entry.sex;\n        arrayForEntry[4] = entry.zip;\n        arrayForEntry[5] = entry.residency;\n        arrayForEntry[6] = entry.nationality;\n        arrayForEntry[7] = entry.street;\n        arrayForEntry[8] = entry.identityDisk;\n        arrayForEntry[9] = entry.district;\n        arrayForEntry[10] = entry.rcUnit;\n        arrayForEntry[11] = entry.place;\n        arrayForEntry[12] = entry.unit;\n        arrayForEntry[13] = dateToStandard(entry.start, true);\n        let entryString = \"\";\n        for (let j = 0; j < entryLength - 1; j++) {\n            if (arrayForEntry[j] != undefined) entryString += arrayForEntry[j].replace(/;/g, \",\") + \";\";\n            else entryString += \";\";\n        }\n        exportArray.push(entryString);\n    }\n    let newExportString = \"\";\n    for (let j = 0; j < exportArray.length; j++) {\n        newExportString += exportArray[j] + \"\\n\";\n    }\n    exportString = newExportString;\n    document.getElementById(\"export-overlay\").style.display = \"inline\";\n}\n\nfunction download() {\n    let link = document.createElement(\"a\");\n    link.style.display = \"none\";\n    link.textContent = \"download\";\n    link.download = \"meldekarten.csv\";\n    link.href = \"data:text/csv;charset=utf-8,\" + encodeURIComponent(exportString);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    document.getElementById(\"export-overlay\").style.display = \"none\";\n}\n\nfunction copy() {\n    navigator.clipboard.writeText(exportString);\n    document.getElementById(\"export-overlay\").style.display = \"none\";\n}\n\nfunction addEntry() {\n    getData()\n    entries.push(emptyObject);\n    render()\n    const entriesObj = document.getElementsByClassName(\"entry\")\n    scrollTo({\n        top: entriesObj[entriesObj.length - 1].offsetTop,\n        left: 0,\n        behavior: \"smooth\"\n    })\n}\n\nfunction deleteAllData() {\n    document.getElementById(\"delete-all-overlay\").style.display = \"none\";\n    entries = [];\n    render();\n}\n\nfunction openDeleteEntry(element) {\n    document.getElementById(\"delete-entry-overlay\").style.display = \"inline\";\n    document.getElementById(\"delete-entry-button\").onclick = function () {\n        document.getElementById(\"delete-entry-overlay\").style.display = \"none\";\n        deleteEntry(element);\n    }\n}\n\nfunction deleteEntry(element) {\n    entries.splice(element, 1);\n    render();\n}\n\nfunction getData() {\n    let newEntries = []\n    const DOMEntries = document.getElementsByClassName(\"entry\")\n    for (let entry of DOMEntries) {\n        let entryObj = {};\n        entryObj.name = entry.getElementsByClassName(\"name\")[0].value;\n        entryObj.firstName = entry.getElementsByClassName(\"first-name\")[0].value;\n        entryObj.birthdate = entry.getElementsByClassName(\"birthdate\")[0].value;\n        entryObj.zip = entry.getElementsByClassName(\"zip\")[0].value;\n        entryObj.residency = entry.getElementsByClassName(\"residency\")[0].value;\n        entryObj.nationality = entry.getElementsByClassName(\"nationality\")[0].value;\n        entryObj.street = entry.getElementsByClassName(\"street\")[0].value;\n        entryObj.identityDisk = entry.getElementsByClassName(\"identity-disk\")[0].value;\n        entryObj.district = entry.getElementsByClassName(\"district\")[0].value;\n        entryObj.rcUnit = entry.getElementsByClassName(\"rc-unit\")[0].value;\n        entryObj.place = entry.getElementsByClassName(\"place\")[0].value;\n        entryObj.unit = entry.getElementsByClassName(\"unit\")[0].value;\n        entryObj.start = entry.getElementsByClassName(\"start\")[0].value;\n        let sex = entry.querySelectorAll(\"input[name='sex']\");\n        for (i = 0; i < sex.length; i++) {\n            if (sex[i].checked) entryObj.sex = sex[i].value\n        }\n        if (!isEmpty(entryObj)) newEntries.push(entryObj)\n    }\n    entries = newEntries\n    localStorage.setItem(\"storedState\", JSON.stringify(entries))\n}\n\nfunction render() {\n    localStorage.setItem(\"storedState\", JSON.stringify(entries))\n    let renderEntries = entries\n    if (entries.length === 0) renderEntries.push(emptyObject)\n    let html = \"\"\n    for (let i = 0; i < renderEntries.length; i++) {\n        let entry = entries[i]\n        let birthdateType = \"date\"\n        if (entry.birthdate == \"\") birthdateType = \"text\"\n        let startType = \"datetime-local\"\n        if (entry.start == \"\") startType = \"text\"\n        let maleChecked = \"\", femaleChecked = \"\", diverseChecked = \"\"\n        switch (entry.sex) {\n            case \"m\": maleChecked = \"checked\"; break;\n            case \"f\": femaleChecked = \"checked\"; break;\n            case \"d\": diverseChecked = \"checked\"\n        }\n        console.log\n        html += `<div class=\"entry\"><form>\n        <div style=\"display: flex; justify-content: space-between;\">\n            <span>\n                <input value=\"${entry.name.replace(/\"/g, \"&quot;\")}\" class=\"name\" type=\"text\" placeholder=\"Nachname\">\n                <input value=\"${entry.firstName.replace(/\"/g, \"&quot;\")}\" class=\"first-name\" type=\"text\" placeholder=\"Vorname\">\n            </span>\n            <button type=\"button\" onclick=\"openDeleteEntry(${i})\" class=\"input-style not-printable\">\ud83d\uddd1\ufe0f</button>\n        </div>\n        <input value=\"${entry.birthdate.replace(/\"/g, \"&quot;\")}\" class=\"birthdate\" type=\"${birthdateType}\" max=\"${new Date().toISOString().split('T')[0]}\" placeholder=\"Geburtsdatum\"\n            onfocus=\"(this.type='date')\" onblur=\"if(this.value==''){this.type='text'}\">\n        <fieldset id=\"fs-${i}\" class=\"input-style\" style=\"font-size: 21px;\" aria-label=\"Geschlecht\">\n            <label aria-label=\"m\u00e4nnlich\"> <input value=\"m\" type=\"radio\" name=\"sex\" ${maleChecked.replace(/\"/g, \"&quot;\")}>\u2642</label>\n            <label aria-label=\"weiblich\"> <input value=\"f\" type=\"radio\" name=\"sex\" ${femaleChecked.replace(/\"/g, \"&quot;\")}>\u2640</label>\n            <label aria-label=\"divers\"> <input value=\"d\" type=\"radio\" name=\"sex\" ${diverseChecked.replace(/\"/g, \"&quot;\")}>\u26a7</label>\n        </fieldset>\n        <input value=\"${entry.nationality.replace(/\"/g, \"&quot;\")}\" class=\"nationality\" type=\"text\" placeholder=\"Nationalit\u00e4t\">\n        <br>\n        <input value=\"${entry.street.replace(/\"/g, \"&quot;\")}\" class=\"street\" type=\"text\" placeholder=\"Stra\u00dfe\">\n        <input value=\"${entry.zip.replace(/\"/g, \"&quot;\")}\" class=\"zip\" type=\"text\" placeholder=\"PLZ\" pattern=\"[0-9]{5}\" inputmode=\"numeric\">\n        <input value=\"${entry.residency.replace(/\"/g, \"&quot;\")}\" class=\"residency\" type=\"text\" placeholder=\"Wohnort\">\n        <br>\n        <input value=\"${entry.identityDisk.replace(/\"/g, \"&quot;\")}\" aria-label=\"Nummer der Erkennungsmarke\" class=\"identity-disk\" type=\"text\" placeholder=\"Nr. der Erk.-Marke\">\n        <input value=\"${entry.district.replace(/\"/g, \"&quot;\")}\" class=\"district\" type=\"text\" placeholder=\"Kreisverband\">\n        <input value=\"${entry.rcUnit.replace(/\"/g, \"&quot;\")}\" class=\"rc-unit\" type=\"text\" placeholder=\"Gemeinschaft\">\n        <br>\n        <input value=\"${entry.place.replace(/\"/g, \"&quot;\")}\" class=\"place\" type=\"text\" placeholder=\"Einsatzort\">\n        <input value=\"${entry.unit.replace(/\"/g, \"&quot;\")}\" class=\"unit\" type=\"text\" placeholder=\"Einsatzformation\">\n        <input value=\"${entry.start.replace(/\"/g, \"&quot;\")}\" class=\"start\" type=\"${startType.replace(/\"/g, \"&quot;\")}\" placeholder=\"Einsatzbeginn\"\n            onfocus=\"(this.type='datetime-local')\" onblur=\"if(this.value==''){this.type='text'}\">\n    </form></div>`\n    }\n    document.getElementById(\"entry-list\").innerHTML = html\n}\n\nfunction printCard() {\n    getData()\n    let html = \"\"\n    for (let i = 0; i < entries.length; i++) {\n        let entry = entries[i]\n        entry.residency = entry.zip + \" \" + entry.residency\n        if (!entry.sex) entry.sex = \"uk\"\n        html += `<div>\n            <p class=\"name\">${entry.name.replace(/</g, \"&lt;\")}</p>\n            <p class=\"birthdate\">${dateToStandard(entry.birthdate)}</p>\n            <p class=\"residency\">${entry.residency.replace(/</g, \"&lt;\")}</p>\n            <p class=\"street\">${entry.street.replace(/</g, \"&lt;\")}</p>\n            <p class=\"district\">${entry.district.replace(/</g, \"&lt;\")}</p>\n            <p class=\"place\">${entry.place.replace(/</g, \"&lt;\")}</p>\n            <p class=\"start\">${dateToStandard(entry.start, true)}</p>\n            <p class=\"first-name\">${entry.firstName.replace(/</g, \"&lt;\")}</p>\n            <p class=\"${entry.sex.replace(/</g, \"&lt;\")}\">&times;</p>\n            <p class=\"nationality\">${entry.nationality.replace(/</g, \"&lt;\")}</p>\n            <p class=\"identity-disk\">${entry.identityDisk.replace(/</g, \"&lt;\")}</p>\n            <p class=\"rc-unit\">${entry.rcUnit.replace(/</g, \"&lt;\")}</p>\n            <p class=\"unit\">${entry.unit.replace(/</g, \"&lt;\")}</p>\n        </div>`\n    }\n    document.getElementById(\"print-area\").innerHTML = html\n    print()\n}\n\ndocument.getElementById(\"file-upload\").addEventListener(\"change\", function (e) {\n    let file = document.getElementById(\"file-upload\").files[0];\n    (async () => {\n        const fileContent = await file.text();\n        document.getElementById(\"import-overlay\").style.display = \"none\";\n        importString(fileContent);\n    })();\n});\ndocument.getElementById(\"add-string\").addEventListener(\"click\", function (e) {\n    document.getElementById(\"import-overlay\").style.display = \"none\";\n    importString(document.getElementById(\"string-input\").value);\n    document.getElementById(\"string-input\").value = \"\";\n});\n\nconst overlays = document.getElementsByClassName(\"overlay\");\nfor (let overlay of overlays) {\n    overlay.addEventListener(\"click\", (e) => {\n        if (e.target.className === \"overlay\") e.target.style.display = \"none\";\n    });\n}\n\nlet lsItem = JSON.parse(localStorage.getItem(\"storedState\"));\nif (lsItem !== null && lsItem instanceof Array) {\n    entries = lsItem;\n}\nrender()\nsetInterval(getData, 1000)\n\nasync function registerServiceWorker () {\n    if (\"serviceWorker\" in navigator) {\n        try {\n            const registration = await navigator.serviceWorker.register(\"./sw.js\", {\n                scope: \"./\",\n            });\n            if (registration.installing) {\n                console.log(\"Service worker installing\");\n            } else if (registration.waiting) {\n                console.log(\"Service worker installed\");\n            } else if (registration.active) {\n                console.log(\"Service worker active\");\n            }\n        } catch (error) {\n            console.error(`Registration failed with ${error}`);\n        }\n    }\n};\n\n\nregisterServiceWorker();\n"], "filenames": ["app.js"], "buggy_code_start_loc": [93], "buggy_code_end_loc": [255], "fixing_code_start_loc": [93], "fixing_code_end_loc": [255], "type": "CWE-79", "message": "Meldekarten generator is an open source project to create a program, running locally in the browser without the need for an internet-connection, to create, store and print registration cards for volunteers. All text fields on the webpage are vulnerable to XSS attacks. The user input isn't (fully) sanitized after submission. This issue has been addressed in commit `77e04f4af` which is included in the `1.0.0b1.1.2` release. Users are advised to upgrade. There are no known workarounds for this vulnerability. ", "other": {"cve": {"id": "CVE-2023-36463", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-27T20:15:09.727", "lastModified": "2023-07-06T15:00:39.457", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Meldekarten generator is an open source project to create a program, running locally in the browser without the need for an internet-connection, to create, store and print registration cards for volunteers. All text fields on the webpage are vulnerable to XSS attacks. The user input isn't (fully) sanitized after submission. This issue has been addressed in commit `77e04f4af` which is included in the `1.0.0b1.1.2` release. Users are advised to upgrade. There are no known workarounds for this vulnerability. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:meldekarten_generator_project:meldekarten_generator:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.0b1.1.2", "matchCriteriaId": "C6AECD1E-2EE5-49E2-97F1-A4884E8DCDDD"}]}]}], "references": [{"url": "https://github.com/jucktnich/meldekarten-generator/commit/77e04f4af85a6d0b08e616d40eaa81877a108c96", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/jucktnich/meldekarten-generator/security/advisories/GHSA-f2gp-85cr-vgj7", "source": "security-advisories@github.com", "tags": ["Exploit"]}]}, "github_commit_url": "https://github.com/jucktnich/meldekarten-generator/commit/77e04f4af85a6d0b08e616d40eaa81877a108c96"}}