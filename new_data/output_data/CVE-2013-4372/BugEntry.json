{"buggy_code": ["###\n Copyright 2010 Red Hat, Inc.\n\n Red Hat licenses this file to you under the Apache License, version\n 2.0 (the \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n implied.  See the License for the specific language governing\n permissions and limitations under the License.\n###\n\ndefine [\n  \"models/app\"\n  \"views/jade\"\n  \"models/versions\"\n  \"models/patch_files\"\n  \"controllers/controls/loading_page\"\n], (app, jade, Versions, PatchFiles) ->\n\n  class VersionList extends FON.TemplateController\n\n\n  class PatchPage extends FON.TemplateController\n    template: jade[\"patch_page/index.jade\"]\n    template_data: -> \n\n    elements:\n      \"select[name=version-select]\": \"version_select\"\n      \"input[name=patch_file]\": \"file_input\"\n      \".patch-list\": \"patch_list\"\n      \"form\": \"upload_form\"\n      \"a.upload.btn\": \"upload_button\"\n      \"a.apply.btn\": \"apply_button\"\n\n    events:\n      \"click a.apply.btn\": \"do_apply\"\n\n    initialize: ->\n      super\n      @versions = @options.versions if @options.versions\n      @version = @options.version if @options.version\n      @patch_files = @options.patch_files if @options.patch_files\n\n      @patch_files.bind 'remove', @patch_files_changed, @\n      @patch_files.bind 'add', @patch_files_changed, @\n\n    patch_files_changed: ->\n      if @apply_button\n        @apply_button.toggleClass 'disabled', @patch_files.length == 0\n\n    poll: ->\n      @versions.fetch\n        op: \"update\"\n      @patch_files.fetch\n        op: \"update\"\n\n    do_apply: ->\n      if @apply_button.hasClass('disabled')\n        return false\n\n      arguments =\n        target_version: @version.id\n\n      options = \n        success: (data, textStatus, jqXHR) =>\n          app.flash\n            kind: \"info\"\n            title: \"Patching Successful: \"\n            message: \"Successfully applied patches to new version #{data}, use the \\\"Migrate Containers\\\" button to move containers to version #{data}.\"\n            on_close: -> app.router.navigate \"/containers\", true\n        error: (data, textStatus, jqXHR) ->\n          app.flash\n            kind: \"error\"\n            title: \"Error Patching: \"\n            message: data.responseText\n            on_close: -> window.location.reload()\n\n      app.page new FON.LoadingPage\n      @patch_files.apply_patches arguments, options\n\n      false\n\n\n    on_render: ->\n\n      @apply_button.toggleClass 'disabled', @patch_files.length == 0\n\n      @upload_button.toggleClass 'disabled', @file_input.val() == \"\"\n\n      @file_input.change (event) =>\n        @upload_button.toggleClass 'disabled', @file_input.val() == \"\"\n\n      @upload_button.click =>\n        if @upload_button.hasClass('disabled')\n          return false;\n\n        app.flash\n          kind: \"info\"\n          title: \"Uploading patch file to server\"\n\n        @upload_form.ajaxSubmit\n          success: (data, textStatus, jqXHR) =>\n            app.flash\n              kind: \"info\"\n              title: \"Successfully uploaded patch file\"\n              hide_after: 2000\n\n          error: (data, textStatus, errorThrown) =>\n            @file_input.val \"\"\n            @upload_button.addClass 'disabled'\n            app.flash\n              kind: \"error\"\n              title: \"Error uploading patch file: \"\n              message: data.responseText\n        false\n\n\n      version_control = new FON.CollectionController\n        el: @version_select\n        collection: @versions\n        child_control: (model) ->\n          FON.model_backed_template\n            model: model\n            tagName: \"option\"\n            attr:\n              \"value\": model.id\n            template: _.template(\"#{model.id}\")\n        on_render: =>\n          super\n          if @versions.get(@version.id)\n            @version_select.val(@version.id)\n          else\n            @version = @versions.default_version()\n            @version_select.val(@versions.default_version().id)\n\n      version_control.render()\n\n      @version_select.change =>\n        @version = @versions.get(@version_select.val())\n\n      file_listing = new FON.CollectionController\n        el: @patch_list\n        collection: @patch_files\n        child_control: (model) ->\n          FON.model_backed_template\n            model: model\n            tagName: \"li\"\n            template: _.template(\"\"\"<a href=\"#\" class=\"delete\"><img src=\"img/x-16.png\"></a>#{model.id}\"\"\")\n            elements:\n              \".delete\": \"delete\"\n            on_render: (controller) ->\n              controller.delete.click (event) ->\n                FON.confirm_delete(model.id, \"patch\", -> model.destroy()).render()\n                false\n\n\n\n      file_listing.render()\n\n\n  handle_error = ->\n    app.flash\n      kind: \"error\"\n      title: \"Error: \"\n      message: \"Failed to retrieve data from server\"\n      on_close: -> window.location.reload()\n\n  app.router.route \"/patches\", \"patches\", ->\n    app.page new FON.LoadingPage\n\n    versions = new Versions\n    versions.fetch\n      success: (model, r) ->\n        patch_files = new PatchFiles\n        patch_files.fetch\n          success: (m, r) ->\n            app.page new PatchPage\n              versions: versions\n              version: versions.default_version()\n              patch_files: patch_files\n          error: handle_error\n\n      error: handle_error\n", "###\n Copyright 2010 Red Hat, Inc.\n\n Red Hat licenses this file to you under the Apache License, version\n 2.0 (the \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n implied.  See the License for the specific language governing\n permissions and limitations under the License.\n###\n\ndefine [\n  \"models/app\"\n  \"views/jade\"\n  \"models/profile\"\n  \"models/versions\"\n  \"controllers/controls/label\"\n  \"controllers/controls/collection\"\n  \"controllers/controls/tabs\"\n  \"controllers/controls/dialog\"\n  \"controllers/controls/editable_property\"  \n], (app, jade, Profile, Versions) ->\n\n  class ChangeParentProfilesDialog extends FON.Dialog\n    accept: -> \"Change\"\n    header: -> \"Change Parent Profiles\"\n\n    on_accept: (body, options) ->\n      selected_ids = _.pluck(body.find(\"input[type=checkbox]\").filter(\":checked\"), \"value\")\n\n      options.model.set_parents\n        parents: selected_ids\n        error: (jqXHR, textStatus, errorThrown)  ->\n          app.flash\n            kind: \"error\"\n            title: \"Error: \"\n            message: \"Failed to save new parent profiles: #{textStatus.responseText}\"\n\n      @do_hide()\n\n    on_display: (body, options) ->\n      controller = new FON.TemplateController\n        tagName: \"fieldset\"\n        model: options.model\n        template: jade[\"agents_page/add_profile.jade\"]\n        elements:\n          \"ul.profiles\": \"profiles_list\"\n        on_render: ->\n          version = app.versions.get @model.get \"version\"\n          existing = @model.get(\"parents\")\n\n          all_profiles = _.without(version.get(\"_profiles\"), @model.id)\n          for profile in all_profiles\n            checked = \"\"\n            if _.contains(existing, profile)\n              checked = \"checked\"\n            @profiles_list.append(\"\"\"<li><label><input value=\"#{profile}\" type=\"checkbox\" #{checked}><span> #{profile}</span></label></li>\"\"\")\n\n      body.append controller.render().el\n\n  class EditConfigDialog extends FON.Dialog\n    accept: -> \"Save\"\n    header: -> \"View/Edit Configuration File\"\n\n    on_accept: (body, options) ->\n      data = body.find(\".data\").val()\n      encoded_data = btoa(data)\n      options.model.set\n        value: encoded_data\n      options.model.save()\n      @do_hide()\n\n    on_display: (body, options) ->\n      controller = new FON.TemplateController\n        tagName: \"fieldset\"\n        model: options.model\n        template: jade[\"profiles_page/detail_page/edit_dialog.jade\"]\n        elements:\n          \".data\": \"data\"\n        on_render: ->\n          encoded_data = @model.get('value')\n          @data.val window.atob(encoded_data)\n      body.append(controller.render().el)\n\n\n  class TabContentController extends FON.TemplateController\n    initialize: ->\n      super\n      @addPromptLabel = @options.addPromptLabel\n      @model.bind \"change\", @render, @\n  \n    template: jade[\"profiles_page/detail_page/list.jade\"]\n    template_data: -> \n        addPromptLabel: @addPromptLabel\n    elements:\n      \"ul\": \"ul\"\n      \"a#add\": \"add_button\"\n      \"input#add\": \"add_input\"\n      \"span#add\": \"add_label\"\n\n    on_render: ->\n      collection = new FON.CollectionController\n        el: @ul\n        collection: @model\n        child_control: (model) ->\n          FON.model_backed_template\n            model: model\n            tagName: \"li\"\n            template: _.template(\"\"\"<a href=\"#\" class=\"delete\"><img src=\"img/x-16.png\"></a><a href=\"#\" class=\"view\">{{id}}</a>\"\"\")\n            elements:\n              \".delete\": \"delete\"\n              \".view\": \"view\"\n            on_render: (controller) ->\n              controller.delete.click (event) ->\n                FON.confirm_delete(model.id, \"item\", -> model.destroy()).render()\n                false\n              controller.view.click (event) ->\n                e = new EditConfigDialog\n                  model: model\n                e.render()\n                false\n\n      @add_button.click (event) =>\n        if @add_input.val() != \"\"\n          @do_add(@add_input.val())\n      @add_input.keydown (event) =>\n        if event.which == 13\n          @do_add(@add_input.val())\n        else\n          true\n      setTimeout(\n        =>\n          # do this after stuff is in the DOM\n          parent = @add_input.parent()\n          parentWidth = parent.width()\n          labelWidth = @add_label.width()\n          buttonWidth = @add_button.width()\n          inputWidth = parentWidth - labelWidth - buttonWidth - 47\n          @add_input.width(inputWidth)\n        , 0)\n\n    do_add: (item) ->\n      @model.create(\n        id: item\n        value: \"\"\n      )\n      @add_input.val(\"\")\n      true\n\n\n  class AgentListController extends FON.TemplateController\n    template: _.template(\"\"\"<div class=\"edit-list\"><ul></ul></div>\"\"\")\n    elements:\n      \"ul\": \"ul\"\n\n    on_render: ->\n      collection = new FON.CollectionController\n        el: @ul\n        collection: @model.agents()\n        child_control: (model) ->\n          FON.model_backed_template\n            model: model\n            tagName: \"li\"\n            template: _.template('<a href=#/containers/{{id}}>{{id}}</a>')\n\n\n  class ValueListEntry extends FON.TemplateController\n    tagName: \"li\"\n    template: jade[\"profiles_page/detail_page/value_list_entry.jade\"]\n    template_data: -> @model.toJSON()\n    elements:\n      \".delete\": \"delete\"\n      \".val\": \"value\"\n\n    initialize: ->\n      super\n      @collection = @options.collection if @options.collection\n\n    on_render: ->\n\n      ep = new FON.EditableProperty\n        el: @value\n        property: @model.property(\"value\")\n        on_save: => \n          @collection.remove(@model)\n          @collection.create\n            id: @model.id\n            value: @model.get(\"value\")\n\n      ep.render()\n\n      @delete.click =>\n        FON.confirm_delete(@model.get(\"value\"), \"item\", => @model.destroy()).render()\n        false\n\n\n  class IDValueListEntry extends FON.TemplateController\n    tagName: \"li\"\n    template: jade[\"profiles_page/detail_page/id_value_list_entry.jade\"]\n    template_data: ->\n      id = @model.id\n      id = id.replace(@options.prefix, \"\")\n      {\n        value: @model.get(\"value\")\n        id: id\n      }\n\n    elements:\n      \".delete\": \"delete\"\n    on_render: ->\n      @delete.click =>\n        FON.confirm_delete(@model.get(\"value\"), \"item\", => @model.destroy()).render()\n        false\n\n\n  class FeatureRepositoryDisplay extends FON.TemplateController\n    template: jade[\"profiles_page/detail_page/feature_repo.jade\"]\n    template_data: -> \n      installed_features = @model.features().toJSON()\n      installed_repos = _.map(@parent.repos.toJSON(), (repo) -> repo.id)\n      {\n        installed_features: _.map(installed_features, (model) -> model.value)\n        installed_repos: installed_repos\n        error: @error if @error\n        features: @json if @json\n      }\n\n    elements:\n      \".feature-detail\": \"detail_container\"\n      \"a.add-feature\": \"add_feature\"\n      \"a.add-repo\": \"add_repo\"\n      \"a.view-feature\": \"view_feature\"\n\n    initialize: ->\n      super\n      @json = @options.json if @options.json\n      @error = @options.error if @options.error\n      @repo = @options.repo if @options.repo\n\n      @model.features().bind \"add\", @render, @\n      @model.features().bind \"remove\", @render, @\n\n    on_render: ->\n      @add_feature.click (event) =>\n        feature = event.currentTarget.id.substring(3)\n        @model.features().create\n          id: \"feature.#{feature}\"\n          value: feature\n        false\n\n      @add_repo.click (event) =>\n        repo = event.currentTarget.id.substring(3)\n        repo = repo.trim()\n        id = \"repository.#{repo.replace(/\\//g, \"_\")}\"\n        @model.repositories().create(\n          id: id\n          value: repo\n        )\n        false\n\n      @view_feature.click (event) =>\n        feature = event.currentTarget.id.substring(4)\n        for f in @json.feature\n          if f.name == feature\n            if f.feature && !_.isArray(f.feature)\n              f.feature = [f.feature]\n            if f.bundle && !_.isArray(f.bundle)\n              f.bundle = [f.bundle]\n            if f.config\n              if !_.isArray(f.config)\n                f.configs = [f.config]\n              else\n                f.configs = f.config\n\n            offset = $(event.currentTarget).offset()\n            offset.top = offset.top - 250 - Math.floor(event.currentTarget.offsetHeight / 2) + 3\n            offset.left = offset.left - 500 - event.currentTarget.offsetWidth\n\n            @show_detail FON.template\n              template: jade[\"profiles_page/detail_page/feature_details.jade\"]\n              template_data: => _.extend(f, {offset: offset})\n\n        false\n\n    show_detail: (controller) ->\n      @detail_container.empty()\n      if controller\n        @detail_container.append controller.render().el\n        controller.$(\"a.close\").click =>\n          @show_detail(null)  \n          false      \n\n\n\n  class FeaturesListController extends FON.TemplateController\n    template: jade[\"profiles_page/detail_page/features_list.jade\"]\n    elements:\n      \".edit-list\": \"list\"\n      \"select[name=selected-repo]\": \"select\"\n      \".feature-list\": \"feature_list\"\n\n    initialize: ->\n      super\n      @repos = new FON.Collection\n      @repos.url = \"rest/versions/#{@model.get(\"version\")}/profiles/#{@model.id}/available_repos\"\n      @repos.bind \"add\", @update_select, @\n      @repos.bind \"remove\", @update_select, @\n      @repos.fetch\n        success: (model, resp) => @render()\n\n    update_select: ->\n      if @select\n        @select.html(\"\")\n        @repos.each (repo) =>\n          @select.append \"\"\"<option value=#{repo.id}>#{repo.id}</option>\"\"\"\n        if @selected_repo\n          @select.val @selected_repo\n          @selection_changed()\n        else\n          @select.val @repos.get(0).id if @repos.get(0)\n          @selection_changed()\n\n    selection_changed: ->\n      @selected_repo.unbind(\"change\", @selection_changed) if @selected_repo\n      @selected_repo = @repos.get @select.val()\n\n      if @selected_repo\n\n        json = $.xml2json(@selected_repo.get(\"xml\")) if @selected_repo.get(\"xml\")\n\n        if json\n          if json.repository && !$.isArray(json.repository)\n            json.repository = [json.repository]\n          if json.feature && !$.isArray(json.feature)\n            json.feature = [json.feature]\n\n        @display = new FeatureRepositoryDisplay\n          parent: @\n          model: @model\n          repo: @selected_repo\n          json: json\n          error: @selected_repo.get(\"error\")\n\n        @selected_repo.bind \"change\", @selection_changed, @\n\n        @feature_list.html @display.render().el\n\n\n    on_render: ->\n      collection = new FON.CollectionController\n        tagName: \"ul\"\n        collection: @model.features()\n        child_control: (model) =>\n          new ValueListEntry\n            collection: @model.features()\n            model: model\n\n      @list.html collection.render().el\n      @select.change => @selection_changed()\n      @update_select()\n\n    poll: ->\n      @model.fetch\n        op: \"update\"\n      @repos.fetch\n        op: \"update\"\n\n\n  class ListController extends FON.TemplateController\n    template: jade[\"profiles_page/detail_page/list.jade\"]\n    template_data: -> \n        addPromptLabel: @addPromptLabel\n\n    elements:\n      \"ul\": \"ul\"\n      \"a#add\": \"add_button\"\n      \"input#add\": \"add_input\"\n      \"span#add\": \"add_label\"\n\n    get_child_control: (model) ->\n      if @show_id\n        new IDValueListEntry\n          model: model\n          prefix: @prefix\n      else\n        new ValueListEntry\n          collection: @collection()\n          model: model\n\n    on_render: ->\n      collection = new FON.CollectionController\n        el: @ul\n        collection: @collection()\n        child_control: (model) => @get_child_control(model)\n\n      @add_button.click (event) =>\n        if @add_input.val() != \"\"\n          @do_add(@add_input.val())\n      @add_input.keydown (event) =>\n        if event.which == 13\n          @do_add(@add_input.val())\n        else\n          true\n      setTimeout(\n        =>\n          # do this after stuff is in the DOM\n          parent = @add_input.parent()\n          parentWidth = parent.width()\n          labelWidth = @add_label.width()\n          buttonWidth = @add_button.width()\n          inputWidth = parentWidth - labelWidth - buttonWidth - 47\n          @add_input.width(inputWidth)\n        , 0)\n\n    do_add: (item) ->\n      @on_add(item)\n      @add_input.val(\"\")\n      false\n\n\n  class ProfileVersionAndParents extends FON.ModelBackedTemplate\n    template: jade[\"profiles_page/detail_page/parent_block.jade\"]\n\n\n  class ProfileAttributes extends FON.TemplateController\n    attr:\n      \"style\": \"padding-top: 9px;\"\n    template: jade[\"profiles_page/detail_page/profile_attributes.jade\"]\n    template_data: -> @model.toJSON()\n\n    elements:\n      \":input[name=locked]\": \"locked\"\n      \":input[name=abstract]\": \"abstract\"\n\n    initialize: ->\n      super\n      @model.bind \"change:_locked\", =>\n        @locked.attr \"checked\", @model.get(\"_locked\")\n\n      @model.bind \"change:_abstract\", =>\n        @abstract.attr \"checked\", @model.get(\"_abstract\")\n\n    on_render: ->\n      @locked.attr \"checked\", @model.get(\"_locked\")\n      @abstract.attr \"checked\", @model.get(\"_abstract\")\n\n      @locked.change (event) =>\n        @model.set_attribute\n          key: \"locked\"\n          value: @locked.is(\":checked\")\n          error: ->\n            app.flash\n              kind: \"error\"\n              title: \"Error: \"\n              message: \"Error modifying profile attribute\"\n        false\n\n      @abstract.change (event) =>\n        @model.set_attribute\n          key: \"abstract\"\n          value: @abstract.is(\":checked\")\n          error: ->\n            app.flash\n              kind: \"error\"\n              title: \"Error: \"\n              message: \"Error modifying profile attribute\"\n        false\n\n\n  class ProfileDetailController extends FON.TemplateController\n    template: jade[\"profiles_page/detail_page/index.jade\"]\n    template_data: ->\n      name: @options.name\n      version: @options.version\n      model: @model.toJSON()\n\n    elements:\n      \"#tabs\": \"tabs\"\n      \".parent-block\": \"parent_detail_block\"\n      \".profile-attributes\": \"profile_attributes\"\n\n    events:\n      \"click a.set-parents\": \"do_set_parents\"\n\n    initialize: ->\n      super\n      @parent_block = new ProfileVersionAndParents\n        model: @model\n\n      @attributes_block = new ProfileAttributes\n        model: @model\n\n    do_set_parents: ->\n      dialog = new ChangeParentProfilesDialog\n        model: @model\n      dialog.render()\n      false\n\n    on_render: ->\n      name = @options.name\n      version = @options.version\n      @tabs_controller = new FON.Tabs\n        el: @tabs\n        tab: @options.tab\n        tabs:\n          features:\n            route: \"#/versions/profiles/details/#{version}/#{name}!features\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"Features (#{model.features.length})\"\n            page: new FeaturesListController\n                    model: @model\n          fabs:\n            route: \"#/versions/profiles/details/#{version}/#{name}!fabs\"\n            label: new FON.Label\n              model: @model\n              template: (model)-> \"FABs (#{model.fabs.length})\"\n            page: => ListController.singleton\n              addPromptLabel: \"Add new FAB (example: mvn:com.foo/myfab/1.0):\"\n              collection: => @model.fabs()\n              on_add: (items) =>\n                for item in items.split(\",\")\n                  do (item) =>\n                    item = item.trim()\n                    if item != \"\"\n                      @model.features().create(\n                        id: \"fab.#{item}\"\n                        value: item\n                      )\n          bundles:\n            route: \"#/versions/profiles/details/#{version}/#{name}!bundles\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"Bundles (#{model.bundles.length})\"\n            page: => ListController.singleton\n              addPromptLabel: \"Add new bundle (example: mvn:com.foo/mybundle/1.0):\"\n              collection: => @model.bundles()\n              on_add: (items) =>\n                for item in items.split(\",\")\n                  do (item) =>\n                    item = item.trim()\n                    if item != \"\"\n                      @model.bundles().create(\n                        id: \"bundle.#{item}\"\n                        value: item\n                      )\n\n          repositories:\n            route: \"#/versions/profiles/details/#{version}/#{name}!repositories\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"Repositories (#{model.repositories.length})\"\n            page: => ListController.singleton\n              addPromptLabel: \"Add repository (example: mvn:com.foo/myrepo/xml/features):\"\n              collection: => @model.repositories()\n              on_add: (item) =>\n                id = \"repository.#{item.replace(/\\//g, \"_\")}\"\n                item = item.trim()\n                @model.repositories().create(\n                  id: id\n                  value: item\n                )\n\n          config_props:\n            route: \"#/versions/profiles/details/#{version}/#{name}!config_props\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"Config Properties (#{model.config_props.length})\"\n            page: => ListController.singleton\n              show_id: true\n              prefix: \"config.\"\n              addPromptLabel: \"Add new entry to config.properties (example: name=value):\"\n              collection: => @model.config_props()\n              on_add: (items) =>\n                id = _.strLeft(items, \"=\")\n                id = _.trim(id)\n                value = _.strRight(items, \"=\")\n                value = _.trim(value)\n                @model.config_props().create\n                  id: \"config.#{id}\"\n                  value: value\n\n          system_props:\n            route: \"#/versions/profiles/details/#{version}/#{name}!system_props\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"System Properties (#{model.system_props.length})\"\n            page: => ListController.singleton\n              show_id: true\n              prefix: \"system.\"\n              addPromptLabel: \"Add new entry to system.properties (example: name=value):\"\n              collection: => @model.system_props()\n              on_add: (items) =>\n                id = _.strLeft(items, \"=\")\n                id = _.trim(id)\n                value = _.strRight(items, \"=\")\n                value = _.trim(value)\n                @model.system_props().create\n                  id: \"system.#{id}\"\n                  value: value\n\n          configurations:\n            route: \"#/versions/profiles/details/#{version}/#{name}!configurations\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"Config Files (#{model.configurations.length})\"\n            page: => new TabContentController\n              addPromptLabel: \"Add new config file (example: com.foo.myservice.properties):\"\n              model: @model.configurations()\n\n      @tabs_controller.render()\n      @parent_detail_block.html @parent_block.render().el\n      @profile_attributes.html @attributes_block.render().el\n\n    poll: ->\n      @model.fetch\n        op: \"update\"\n\n      if typeof @tabs_controller.active_item.page.poll == 'function'\n        @tabs_controller.active_item.page.poll()\n\n  app.router.route \"/versions/profiles/details/:version/:name\", \"profile_details\", (version, name) ->\n    app.router.navigate \"/versions/profiles/details/#{version}/#{name}!features\", true\n\n  app.router.route \"/versions/profiles/details/:version/:name!:tab\", \"profile_details\", (version, name, tab) ->\n    model = new Profile\n    model.url = \"#{app.versions.url}/#{version}/profiles/#{name}\"\n    model.fetch\n      success: (model, resp) =>\n        app.page new ProfileDetailController\n          model: model\n          version: version\n          name: name\n          tab: tab\n      error: (model, resp, opts) =>\n        app.flash\n          kind: \"error\"\n          title: \"Error: \"\n          message: \"Error fetching data for profile #{name}\"\n\n  ProfileDetailController\n", "###\n Copyright 2010 Red Hat, Inc.\n\n Red Hat licenses this file to you under the Apache License, version\n 2.0 (the \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n implied.  See the License for the specific language governing\n permissions and limitations under the License.\n###\n\ndefine [\n  \"models/app\",\n  \"views/jade\",\n  \"models/user\",\n  \"models/users\",\n  \"controllers/controls/collection\"\n  \"controllers/controls/table\"\n  \"controllers/controls/dialog\"\n], (app, jade, User, Users) ->\n\n  class UsersTable extends FON.Table\n    row_template: jade[\"users_page/user_row.jade\"]\n\n    initialize: ->\n      @parent = @options.parent\n      super\n\n    child_control: (model)->\n      controller = new FON.TemplateController\n        model: model\n        tagName: \"tr\"\n        template: @row_template\n        template_data: -> model.toJSON()\n        on_render: (self)=>\n\n          el = $(self.el)\n          if @parent.state.get(\"selected\") == model\n            el.addClass(\"selected\")\n          else\n            el.removeClass(\"selected\")\n\n          el.click (event)=>\n            @parent.selected(model)\n            false\n\n      @parent.state.bind \"change:selected\", -> controller.render()\n      model.bind \"all\", -> controller.render()\n      controller\n\n\n  class UsersController extends FON.TemplateController\n    template: jade[\"users_page/index.jade\"]\n\n    selected: (value)-> @state.set({selected:value})\n\n    initialize: ->\n      super\n\n      @state = new FON.Model\n\n      @state.bind \"change:selected\", (value)=>\n        @details.empty()\n        @overview = null\n        selected = @state.get(\"selected\")\n        if selected\n          @overview = new UserOverviewController\n            model: selected\n\n          el = $(@overview.render().el)\n          @details.append el\n          @add_role.removeClass \"disabled\"\n          @delete.removeClass \"disabled\"\n          @change_password.removeClass \"disabled\"\n        else\n          @add_role.addClass \"disabled\"\n          @delete.addClass \"disabled\"\n          @change_password.addClass \"disabled\"\n\n    elements:\n      \"div.nav_buttons > ul\": \"items\"\n      \"a.add-role\": \"add_role\"\n      \"a.change-password\": \"change_password\"\n      \"a.delete\": \"delete\"\n      \"#user_overview_container\": \"details\"\n\n    events:\n      \"click a.add\": \"do_add\"\n      \"click a.add-role\": \"do_add_role\"\n      \"click a.delete\": \"do_delete\"\n      \"click a.change-password\": \"do_change_password\"\n\n    do_add: ->\n      d = new AddUserDialog\n        parent: @\n        model: @model\n      d.render()\n      false\n\n    do_add_role: ->\n      if @state.get(\"selected\")\n        d = new AddRoleDialog\n          model: @state.get \"selected\"\n          selected: @state.get \"selected\"\n        d.render()\n      false\n\n    do_change_password: ->\n      if @state.get(\"selected\")\n        d = new ChangePasswordDialog\n          model: @state.get \"selected\"\n          selected: @state.get \"selected\"\n        d.render()\n      false\n\n    do_delete: ->\n      FON.confirm_delete(@state.get(\"selected\").get(\"id\"), \"user\", => \n        @state.get(\"selected\").destroy()\n        @state.set\n          selected: null\n      ).render()\n      false\n\n    on_render: ->\n      @model.trigger \"reset\", @model\n      @table = new UsersTable\n        el: @$(\"#users\")\n        parent: @\n        collection: @model\n      @table.render()\n\n  class RoleEntry extends FON.ModelBackedTemplate\n    tagName:\"li\"\n\n    template: _.template(\"\"\"<a href=\"#\" class=\"delete-role\" title=\"Delete role\"><img src=\"img/x-16.png\"></a>{{id}}\"\"\")\n    elements:\n      \"a.delete-role\": \"delete\"\n\n    on_render: ->\n      @delete.click (event) =>\n        FON.confirm_delete(@model.id, \"role\", => @model.destroy()).render()\n        false\n\n\n  class UserOverviewController extends FON.TemplateController\n    template: jade[\"users_page/user_overview.jade\"]\n    template_data: ->  @model.toJSON()\n    elements:\n      \"ul.roles\": \"ul_roles\"\n    on_render: ->\n\n      ul = new FON.CollectionController\n        el: @ul_roles\n        collection: @model.roles()\n        child_control: (model) ->\n          new RoleEntry\n            model: model\n      ul.render()\n\n\n  class AddUserDialogBody extends FON.TemplateController\n    tagName: \"fieldset\"\n    template: jade[\"users_page/add_user.jade\"]\n\n\n  class AddUserDialog extends FON.Dialog\n    accept: -> \"Create\"\n    header: -> \"Create New User\"\n\n    on_accept: (body, options) ->\n      username = body.find(\"#username_input\").val()\n\n      if (username.length < 5)\n        @show_error(\"Username must be at least 5 characters long\")\n        return\n\n      for user in @model.models\n        if username == user.id\n          @show_error(\"Username already exists\")\n          return\n\n      password = body.find(\"#password_input\").val()\n      repeat_password = body.find(\"#repeat_password_input\").val()\n      if (password.length < 5)\n        @show_error(\"Password must be at least 5 characters long\")\n        return\n      if (password != repeat_password)\n        @show_error(\"Passwords don't match\")\n        return\n\n\n      user = new User()\n\n      user.id = username\n      user.password = password\n      user.save {password: password}\n        error: =>\n          @do_hide()\n          app.flash\n            kind: \"error\"\n            title: \"Error adding user.\"\n        success: =>\n          @do_hide()\n          @model.fetch()\n\n    on_display: (body, options) ->\n      controller = new AddUserDialogBody\n        model: options.model\n\n      body.html controller.render().el  \n\n\n  class AddRoleDialog extends FON.Dialog\n    accept: -> \"Add\"\n    header: -> \"Add New Role\"\n\n    initialize: ->\n      @model = @options.model if @options.model\n      super\n\n    on_accept: (body, options) ->\n      role = body.find(\"#role_input\").val()\n\n      if (role.length < 4)\n        @show_error(\"Role must be at least 4 characters long\")\n        return\n\n      @model.roles().create(\n        \"id\": role\n      ,\n        success: =>\n          @do_hide()\n          @model.collection.fetch()\n        error: =>\n          @do_hide()\n          app.flash\n            kind: \"error\"\n            title: \"Error adding role\"\n      )\n\n    on_display: (body, options) ->\n      body.append(new FON.TemplateController\n          tagName: \"div\"\n          template: jade[\"users_page/add_role.jade\"]\n          template_data: -> options.selected.toJSON()  \n        .render().el)\n\n\n  class ChangePasswordDialog extends FON.Dialog\n  \n    accept: -> \"Change\"\n    header: -> \"Change Password\"\n\n    on_accept: (body, options) ->\n      password = body.find(\"#password_input\").val()\n      repeat_password = body.find(\"#repeat_password_input\").val()\n      if (password.length < 5)\n        @show_error(\"Password must be at least 5 characters long\")\n        return\n      if (password != repeat_password)\n        @show_error(\"Passwords don't match\")\n        return\n      user = new User()\n      user.id = @model.id\n      user.save {password: password},\n        success: =>\n          @do_hide()\n          app.flash\n            title: \"Password successfully changed.\"\n            hide_after: 2000\n        , error: =>\n            @do_hide()\n            app.flash\n              kind: \"error\"\n              title: \"Error changing password.\"\n\n    on_display: (body, options) ->\n      body.append(new FON.TemplateController\n          tagName: \"div\"\n          template: jade[\"users_page/change_password.jade\"]\n          template_data: -> options.selected.toJSON()  \n        .render().el)\n\n\n  app.router.route \"/users\", \"users\", ->\n    model = new Users\n    model.fetch\n      success: (model, resp) ->\n        app.page new UsersController\n          model: model\n      error: (model, data, resp) ->\n        app.flash\n          kind: \"error\"\n          title: \"Error: \"\n          message: \"Failed to fetch user information: #{resp}\"\n\n  UsersController\n\n"], "fixing_code": ["###\n Copyright 2010 Red Hat, Inc.\n\n Red Hat licenses this file to you under the Apache License, version\n 2.0 (the \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n implied.  See the License for the specific language governing\n permissions and limitations under the License.\n###\n\ndefine [\n  \"models/app\"\n  \"views/jade\"\n  \"models/versions\"\n  \"models/patch_files\"\n  \"controllers/controls/loading_page\"\n], (app, jade, Versions, PatchFiles) ->\n\n  class VersionList extends FON.TemplateController\n\n\n  class PatchPage extends FON.TemplateController\n    template: jade[\"patch_page/index.jade\"]\n    template_data: -> \n\n    elements:\n      \"select[name=version-select]\": \"version_select\"\n      \"input[name=patch_file]\": \"file_input\"\n      \".patch-list\": \"patch_list\"\n      \"form\": \"upload_form\"\n      \"a.upload.btn\": \"upload_button\"\n      \"a.apply.btn\": \"apply_button\"\n\n    events:\n      \"click a.apply.btn\": \"do_apply\"\n\n    initialize: ->\n      super\n      @versions = @options.versions if @options.versions\n      @version = @options.version if @options.version\n      @patch_files = @options.patch_files if @options.patch_files\n\n      @patch_files.bind 'remove', @patch_files_changed, @\n      @patch_files.bind 'add', @patch_files_changed, @\n\n    patch_files_changed: ->\n      if @apply_button\n        @apply_button.toggleClass 'disabled', @patch_files.length == 0\n\n    poll: ->\n      @versions.fetch\n        op: \"update\"\n      @patch_files.fetch\n        op: \"update\"\n\n    do_apply: ->\n      if @apply_button.hasClass('disabled')\n        return false\n\n      arguments =\n        target_version: @version.id\n\n      options = \n        success: (data, textStatus, jqXHR) =>\n          app.flash\n            kind: \"info\"\n            title: \"Patching Successful: \"\n            message: \"Successfully applied patches to new version #{data}, use the \\\"Migrate Containers\\\" button to move containers to version #{data}.\"\n            on_close: -> app.router.navigate \"/containers\", true\n        error: (data, textStatus, jqXHR) ->\n          app.flash\n            kind: \"error\"\n            title: \"Error Patching: \"\n            message: data.responseText\n            on_close: -> window.location.reload()\n\n      app.page new FON.LoadingPage\n      @patch_files.apply_patches arguments, options\n\n      false\n\n\n    on_render: ->\n\n      @apply_button.toggleClass 'disabled', @patch_files.length == 0\n\n      @upload_button.toggleClass 'disabled', @file_input.val() == \"\"\n\n      @file_input.change (event) =>\n        @upload_button.toggleClass 'disabled', @file_input.val() == \"\"\n\n      @upload_button.click =>\n        if @upload_button.hasClass('disabled')\n          return false;\n\n        app.flash\n          kind: \"info\"\n          title: \"Uploading patch file to server\"\n\n        @upload_form.ajaxSubmit\n          success: (data, textStatus, jqXHR) =>\n            app.flash\n              kind: \"info\"\n              title: \"Successfully uploaded patch file\"\n              hide_after: 2000\n\n          error: (data, textStatus, errorThrown) =>\n            @file_input.val \"\"\n            @upload_button.addClass 'disabled'\n            app.flash\n              kind: \"error\"\n              title: \"Error uploading patch file: \"\n              message: data.responseText\n        false\n\n\n      version_control = new FON.CollectionController\n        el: @version_select\n        collection: @versions\n        child_control: (model) ->\n          FON.model_backed_template\n            model: model\n            tagName: \"option\"\n            attr:\n              \"value\": model.id\n            template: _.template(\"#{FON.escapeHtml(model.id)}\")\n        on_render: =>\n          super\n          if @versions.get(@version.id)\n            @version_select.val(@version.id)\n          else\n            @version = @versions.default_version()\n            @version_select.val(@versions.default_version().id)\n\n      version_control.render()\n\n      @version_select.change =>\n        @version = @versions.get(@version_select.val())\n\n      file_listing = new FON.CollectionController\n        el: @patch_list\n        collection: @patch_files\n        child_control: (model) ->\n          FON.model_backed_template\n            model: model\n            tagName: \"li\"\n            template: _.template(\"\"\"<a href=\"#\" class=\"delete\"><img src=\"img/x-16.png\"></a>#{FON.escapeHtml(model.id)}\"\"\")\n            elements:\n              \".delete\": \"delete\"\n            on_render: (controller) ->\n              controller.delete.click (event) ->\n                FON.confirm_delete(model.id, \"patch\", -> model.destroy()).render()\n                false\n\n\n\n      file_listing.render()\n\n\n  handle_error = ->\n    app.flash\n      kind: \"error\"\n      title: \"Error: \"\n      message: \"Failed to retrieve data from server\"\n      on_close: -> window.location.reload()\n\n  app.router.route \"/patches\", \"patches\", ->\n    app.page new FON.LoadingPage\n\n    versions = new Versions\n    versions.fetch\n      success: (model, r) ->\n        patch_files = new PatchFiles\n        patch_files.fetch\n          success: (m, r) ->\n            app.page new PatchPage\n              versions: versions\n              version: versions.default_version()\n              patch_files: patch_files\n          error: handle_error\n\n      error: handle_error\n", "###\n Copyright 2010 Red Hat, Inc.\n\n Red Hat licenses this file to you under the Apache License, version\n 2.0 (the \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n implied.  See the License for the specific language governing\n permissions and limitations under the License.\n###\n\ndefine [\n  \"models/app\"\n  \"views/jade\"\n  \"models/profile\"\n  \"models/versions\"\n  \"controllers/controls/label\"\n  \"controllers/controls/collection\"\n  \"controllers/controls/tabs\"\n  \"controllers/controls/dialog\"\n  \"controllers/controls/editable_property\"  \n], (app, jade, Profile, Versions) ->\n\n  class ChangeParentProfilesDialog extends FON.Dialog\n    accept: -> \"Change\"\n    header: -> \"Change Parent Profiles\"\n\n    on_accept: (body, options) ->\n      selected_ids = _.pluck(body.find(\"input[type=checkbox]\").filter(\":checked\"), \"value\")\n\n      options.model.set_parents\n        parents: selected_ids\n        error: (jqXHR, textStatus, errorThrown)  ->\n          app.flash\n            kind: \"error\"\n            title: \"Error: \"\n            message: \"Failed to save new parent profiles: #{textStatus.responseText}\"\n\n      @do_hide()\n\n    on_display: (body, options) ->\n      controller = new FON.TemplateController\n        tagName: \"fieldset\"\n        model: options.model\n        template: jade[\"agents_page/add_profile.jade\"]\n        elements:\n          \"ul.profiles\": \"profiles_list\"\n        on_render: ->\n          version = app.versions.get @model.get \"version\"\n          existing = @model.get(\"parents\")\n\n          all_profiles = _.without(version.get(\"_profiles\"), @model.id)\n          for profile in all_profiles\n            checked = \"\"\n            if _.contains(existing, profile)\n              checked = \"checked\"\n            @profiles_list.append(\"\"\"<li><label><input value=\"#{profile}\" type=\"checkbox\" #{checked}><span> #{profile}</span></label></li>\"\"\")\n\n      body.append controller.render().el\n\n  class EditConfigDialog extends FON.Dialog\n    accept: -> \"Save\"\n    header: -> \"View/Edit Configuration File\"\n\n    on_accept: (body, options) ->\n      data = body.find(\".data\").val()\n      encoded_data = btoa(data)\n      options.model.set\n        value: encoded_data\n      options.model.save()\n      @do_hide()\n\n    on_display: (body, options) ->\n      controller = new FON.TemplateController\n        tagName: \"fieldset\"\n        model: options.model\n        template: jade[\"profiles_page/detail_page/edit_dialog.jade\"]\n        elements:\n          \".data\": \"data\"\n        on_render: ->\n          encoded_data = @model.get('value')\n          @data.val window.atob(encoded_data)\n      body.append(controller.render().el)\n\n\n  class TabContentController extends FON.TemplateController\n    initialize: ->\n      super\n      @addPromptLabel = @options.addPromptLabel\n      @model.bind \"change\", @render, @\n  \n    template: jade[\"profiles_page/detail_page/list.jade\"]\n    template_data: -> \n        addPromptLabel: @addPromptLabel\n    elements:\n      \"ul\": \"ul\"\n      \"a#add\": \"add_button\"\n      \"input#add\": \"add_input\"\n      \"span#add\": \"add_label\"\n\n    on_render: ->\n      collection = new FON.CollectionController\n        el: @ul\n        collection: @model\n        child_control: (model) ->\n          FON.model_backed_template\n            model: model\n            tagName: \"li\"\n            template: _.template(\"\"\"<a href=\"#\" class=\"delete\"><img src=\"img/x-16.png\"></a><a href=\"#\" class=\"view\">{{FON.escapeHtml(id)}}</a>\"\"\")\n            elements:\n              \".delete\": \"delete\"\n              \".view\": \"view\"\n            on_render: (controller) ->\n              controller.delete.click (event) ->\n                FON.confirm_delete(model.id, \"item\", -> model.destroy()).render()\n                false\n              controller.view.click (event) ->\n                e = new EditConfigDialog\n                  model: model\n                e.render()\n                false\n\n      @add_button.click (event) =>\n        if @add_input.val() != \"\"\n          @do_add(@add_input.val())\n      @add_input.keydown (event) =>\n        if event.which == 13\n          @do_add(@add_input.val())\n        else\n          true\n      setTimeout(\n        =>\n          # do this after stuff is in the DOM\n          parent = @add_input.parent()\n          parentWidth = parent.width()\n          labelWidth = @add_label.width()\n          buttonWidth = @add_button.width()\n          inputWidth = parentWidth - labelWidth - buttonWidth - 47\n          @add_input.width(inputWidth)\n        , 0)\n\n    do_add: (item) ->\n      @model.create(\n        id: item\n        value: \"\"\n      )\n      @add_input.val(\"\")\n      true\n\n\n  class AgentListController extends FON.TemplateController\n    template: _.template(\"\"\"<div class=\"edit-list\"><ul></ul></div>\"\"\")\n    elements:\n      \"ul\": \"ul\"\n\n    on_render: ->\n      collection = new FON.CollectionController\n        el: @ul\n        collection: @model.agents()\n        child_control: (model) ->\n          FON.model_backed_template\n            model: model\n            tagName: \"li\"\n            template: _.template('<a href=#/containers/{{id}}>{{FON.escapeHtml(id)}}</a>')\n\n\n  class ValueListEntry extends FON.TemplateController\n    tagName: \"li\"\n    template: jade[\"profiles_page/detail_page/value_list_entry.jade\"]\n    template_data: -> @model.toJSON()\n    elements:\n      \".delete\": \"delete\"\n      \".val\": \"value\"\n\n    initialize: ->\n      super\n      @collection = @options.collection if @options.collection\n\n    on_render: ->\n\n      ep = new FON.EditableProperty\n        el: @value\n        property: @model.property(\"value\")\n        on_save: => \n          @collection.remove(@model)\n          @collection.create\n            id: @model.id\n            value: @model.get(\"value\")\n\n      ep.render()\n\n      @delete.click =>\n        FON.confirm_delete(@model.get(\"value\"), \"item\", => @model.destroy()).render()\n        false\n\n\n  class IDValueListEntry extends FON.TemplateController\n    tagName: \"li\"\n    template: jade[\"profiles_page/detail_page/id_value_list_entry.jade\"]\n    template_data: ->\n      id = @model.id\n      id = id.replace(@options.prefix, \"\")\n      {\n        value: @model.get(\"value\")\n        id: id\n      }\n\n    elements:\n      \".delete\": \"delete\"\n    on_render: ->\n      @delete.click =>\n        FON.confirm_delete(@model.get(\"value\"), \"item\", => @model.destroy()).render()\n        false\n\n\n  class FeatureRepositoryDisplay extends FON.TemplateController\n    template: jade[\"profiles_page/detail_page/feature_repo.jade\"]\n    template_data: -> \n      installed_features = @model.features().toJSON()\n      installed_repos = _.map(@parent.repos.toJSON(), (repo) -> repo.id)\n      {\n        installed_features: _.map(installed_features, (model) -> model.value)\n        installed_repos: installed_repos\n        error: @error if @error\n        features: @json if @json\n      }\n\n    elements:\n      \".feature-detail\": \"detail_container\"\n      \"a.add-feature\": \"add_feature\"\n      \"a.add-repo\": \"add_repo\"\n      \"a.view-feature\": \"view_feature\"\n\n    initialize: ->\n      super\n      @json = @options.json if @options.json\n      @error = @options.error if @options.error\n      @repo = @options.repo if @options.repo\n\n      @model.features().bind \"add\", @render, @\n      @model.features().bind \"remove\", @render, @\n\n    on_render: ->\n      @add_feature.click (event) =>\n        feature = event.currentTarget.id.substring(3)\n        @model.features().create\n          id: \"feature.#{feature}\"\n          value: feature\n        false\n\n      @add_repo.click (event) =>\n        repo = event.currentTarget.id.substring(3)\n        repo = repo.trim()\n        id = \"repository.#{repo.replace(/\\//g, \"_\")}\"\n        @model.repositories().create(\n          id: id\n          value: repo\n        )\n        false\n\n      @view_feature.click (event) =>\n        feature = event.currentTarget.id.substring(4)\n        for f in @json.feature\n          if f.name == feature\n            if f.feature && !_.isArray(f.feature)\n              f.feature = [f.feature]\n            if f.bundle && !_.isArray(f.bundle)\n              f.bundle = [f.bundle]\n            if f.config\n              if !_.isArray(f.config)\n                f.configs = [f.config]\n              else\n                f.configs = f.config\n\n            offset = $(event.currentTarget).offset()\n            offset.top = offset.top - 250 - Math.floor(event.currentTarget.offsetHeight / 2) + 3\n            offset.left = offset.left - 500 - event.currentTarget.offsetWidth\n\n            @show_detail FON.template\n              template: jade[\"profiles_page/detail_page/feature_details.jade\"]\n              template_data: => _.extend(f, {offset: offset})\n\n        false\n\n    show_detail: (controller) ->\n      @detail_container.empty()\n      if controller\n        @detail_container.append controller.render().el\n        controller.$(\"a.close\").click =>\n          @show_detail(null)  \n          false      \n\n\n\n  class FeaturesListController extends FON.TemplateController\n    template: jade[\"profiles_page/detail_page/features_list.jade\"]\n    elements:\n      \".edit-list\": \"list\"\n      \"select[name=selected-repo]\": \"select\"\n      \".feature-list\": \"feature_list\"\n\n    initialize: ->\n      super\n      @repos = new FON.Collection\n      @repos.url = \"rest/versions/#{@model.get(\"version\")}/profiles/#{@model.id}/available_repos\"\n      @repos.bind \"add\", @update_select, @\n      @repos.bind \"remove\", @update_select, @\n      @repos.fetch\n        success: (model, resp) => @render()\n\n    update_select: ->\n      if @select\n        @select.html(\"\")\n        @repos.each (repo) =>\n          @select.append \"\"\"<option value=#{repo.id}>#{repo.id}</option>\"\"\"\n        if @selected_repo\n          @select.val @selected_repo\n          @selection_changed()\n        else\n          @select.val @repos.get(0).id if @repos.get(0)\n          @selection_changed()\n\n    selection_changed: ->\n      @selected_repo.unbind(\"change\", @selection_changed) if @selected_repo\n      @selected_repo = @repos.get @select.val()\n\n      if @selected_repo\n\n        json = $.xml2json(@selected_repo.get(\"xml\")) if @selected_repo.get(\"xml\")\n\n        if json\n          if json.repository && !$.isArray(json.repository)\n            json.repository = [json.repository]\n          if json.feature && !$.isArray(json.feature)\n            json.feature = [json.feature]\n\n        @display = new FeatureRepositoryDisplay\n          parent: @\n          model: @model\n          repo: @selected_repo\n          json: json\n          error: @selected_repo.get(\"error\")\n\n        @selected_repo.bind \"change\", @selection_changed, @\n\n        @feature_list.html @display.render().el\n\n\n    on_render: ->\n      collection = new FON.CollectionController\n        tagName: \"ul\"\n        collection: @model.features()\n        child_control: (model) =>\n          new ValueListEntry\n            collection: @model.features()\n            model: model\n\n      @list.html collection.render().el\n      @select.change => @selection_changed()\n      @update_select()\n\n    poll: ->\n      @model.fetch\n        op: \"update\"\n      @repos.fetch\n        op: \"update\"\n\n\n  class ListController extends FON.TemplateController\n    template: jade[\"profiles_page/detail_page/list.jade\"]\n    template_data: -> \n        addPromptLabel: @addPromptLabel\n\n    elements:\n      \"ul\": \"ul\"\n      \"a#add\": \"add_button\"\n      \"input#add\": \"add_input\"\n      \"span#add\": \"add_label\"\n\n    get_child_control: (model) ->\n      if @show_id\n        new IDValueListEntry\n          model: model\n          prefix: @prefix\n      else\n        new ValueListEntry\n          collection: @collection()\n          model: model\n\n    on_render: ->\n      collection = new FON.CollectionController\n        el: @ul\n        collection: @collection()\n        child_control: (model) => @get_child_control(model)\n\n      @add_button.click (event) =>\n        if @add_input.val() != \"\"\n          @do_add(@add_input.val())\n      @add_input.keydown (event) =>\n        if event.which == 13\n          @do_add(@add_input.val())\n        else\n          true\n      setTimeout(\n        =>\n          # do this after stuff is in the DOM\n          parent = @add_input.parent()\n          parentWidth = parent.width()\n          labelWidth = @add_label.width()\n          buttonWidth = @add_button.width()\n          inputWidth = parentWidth - labelWidth - buttonWidth - 47\n          @add_input.width(inputWidth)\n        , 0)\n\n    do_add: (item) ->\n      @on_add(item)\n      @add_input.val(\"\")\n      false\n\n\n  class ProfileVersionAndParents extends FON.ModelBackedTemplate\n    template: jade[\"profiles_page/detail_page/parent_block.jade\"]\n\n\n  class ProfileAttributes extends FON.TemplateController\n    attr:\n      \"style\": \"padding-top: 9px;\"\n    template: jade[\"profiles_page/detail_page/profile_attributes.jade\"]\n    template_data: -> @model.toJSON()\n\n    elements:\n      \":input[name=locked]\": \"locked\"\n      \":input[name=abstract]\": \"abstract\"\n\n    initialize: ->\n      super\n      @model.bind \"change:_locked\", =>\n        @locked.attr \"checked\", @model.get(\"_locked\")\n\n      @model.bind \"change:_abstract\", =>\n        @abstract.attr \"checked\", @model.get(\"_abstract\")\n\n    on_render: ->\n      @locked.attr \"checked\", @model.get(\"_locked\")\n      @abstract.attr \"checked\", @model.get(\"_abstract\")\n\n      @locked.change (event) =>\n        @model.set_attribute\n          key: \"locked\"\n          value: @locked.is(\":checked\")\n          error: ->\n            app.flash\n              kind: \"error\"\n              title: \"Error: \"\n              message: \"Error modifying profile attribute\"\n        false\n\n      @abstract.change (event) =>\n        @model.set_attribute\n          key: \"abstract\"\n          value: @abstract.is(\":checked\")\n          error: ->\n            app.flash\n              kind: \"error\"\n              title: \"Error: \"\n              message: \"Error modifying profile attribute\"\n        false\n\n\n  class ProfileDetailController extends FON.TemplateController\n    template: jade[\"profiles_page/detail_page/index.jade\"]\n    template_data: ->\n      name: @options.name\n      version: @options.version\n      model: @model.toJSON()\n\n    elements:\n      \"#tabs\": \"tabs\"\n      \".parent-block\": \"parent_detail_block\"\n      \".profile-attributes\": \"profile_attributes\"\n\n    events:\n      \"click a.set-parents\": \"do_set_parents\"\n\n    initialize: ->\n      super\n      @parent_block = new ProfileVersionAndParents\n        model: @model\n\n      @attributes_block = new ProfileAttributes\n        model: @model\n\n    do_set_parents: ->\n      dialog = new ChangeParentProfilesDialog\n        model: @model\n      dialog.render()\n      false\n\n    on_render: ->\n      name = @options.name\n      version = @options.version\n      @tabs_controller = new FON.Tabs\n        el: @tabs\n        tab: @options.tab\n        tabs:\n          features:\n            route: \"#/versions/profiles/details/#{version}/#{name}!features\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"Features (#{model.features.length})\"\n            page: new FeaturesListController\n                    model: @model\n          fabs:\n            route: \"#/versions/profiles/details/#{version}/#{name}!fabs\"\n            label: new FON.Label\n              model: @model\n              template: (model)-> \"FABs (#{model.fabs.length})\"\n            page: => ListController.singleton\n              addPromptLabel: \"Add new FAB (example: mvn:com.foo/myfab/1.0):\"\n              collection: => @model.fabs()\n              on_add: (items) =>\n                for item in items.split(\",\")\n                  do (item) =>\n                    item = item.trim()\n                    if item != \"\"\n                      @model.features().create(\n                        id: \"fab.#{item}\"\n                        value: item\n                      )\n          bundles:\n            route: \"#/versions/profiles/details/#{version}/#{name}!bundles\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"Bundles (#{model.bundles.length})\"\n            page: => ListController.singleton\n              addPromptLabel: \"Add new bundle (example: mvn:com.foo/mybundle/1.0):\"\n              collection: => @model.bundles()\n              on_add: (items) =>\n                for item in items.split(\",\")\n                  do (item) =>\n                    item = item.trim()\n                    if item != \"\"\n                      @model.bundles().create(\n                        id: \"bundle.#{item}\"\n                        value: item\n                      )\n\n          repositories:\n            route: \"#/versions/profiles/details/#{version}/#{name}!repositories\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"Repositories (#{model.repositories.length})\"\n            page: => ListController.singleton\n              addPromptLabel: \"Add repository (example: mvn:com.foo/myrepo/xml/features):\"\n              collection: => @model.repositories()\n              on_add: (item) =>\n                id = \"repository.#{item.replace(/\\//g, \"_\")}\"\n                item = item.trim()\n                @model.repositories().create(\n                  id: id\n                  value: item\n                )\n\n          config_props:\n            route: \"#/versions/profiles/details/#{version}/#{name}!config_props\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"Config Properties (#{model.config_props.length})\"\n            page: => ListController.singleton\n              show_id: true\n              prefix: \"config.\"\n              addPromptLabel: \"Add new entry to config.properties (example: name=value):\"\n              collection: => @model.config_props()\n              on_add: (items) =>\n                id = _.strLeft(items, \"=\")\n                id = _.trim(id)\n                value = _.strRight(items, \"=\")\n                value = _.trim(value)\n                @model.config_props().create\n                  id: \"config.#{id}\"\n                  value: value\n\n          system_props:\n            route: \"#/versions/profiles/details/#{version}/#{name}!system_props\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"System Properties (#{model.system_props.length})\"\n            page: => ListController.singleton\n              show_id: true\n              prefix: \"system.\"\n              addPromptLabel: \"Add new entry to system.properties (example: name=value):\"\n              collection: => @model.system_props()\n              on_add: (items) =>\n                id = _.strLeft(items, \"=\")\n                id = _.trim(id)\n                value = _.strRight(items, \"=\")\n                value = _.trim(value)\n                @model.system_props().create\n                  id: \"system.#{id}\"\n                  value: value\n\n          configurations:\n            route: \"#/versions/profiles/details/#{version}/#{name}!configurations\"\n            label: new FON.Label\n              model:@model\n              template: (model)-> \"Config Files (#{model.configurations.length})\"\n            page: => new TabContentController\n              addPromptLabel: \"Add new config file (example: com.foo.myservice.properties):\"\n              model: @model.configurations()\n\n      @tabs_controller.render()\n      @parent_detail_block.html @parent_block.render().el\n      @profile_attributes.html @attributes_block.render().el\n\n    poll: ->\n      @model.fetch\n        op: \"update\"\n\n      if typeof @tabs_controller.active_item.page.poll == 'function'\n        @tabs_controller.active_item.page.poll()\n\n  app.router.route \"/versions/profiles/details/:version/:name\", \"profile_details\", (version, name) ->\n    app.router.navigate \"/versions/profiles/details/#{version}/#{name}!features\", true\n\n  app.router.route \"/versions/profiles/details/:version/:name!:tab\", \"profile_details\", (version, name, tab) ->\n    model = new Profile\n    model.url = \"#{app.versions.url}/#{version}/profiles/#{name}\"\n    model.fetch\n      success: (model, resp) =>\n        app.page new ProfileDetailController\n          model: model\n          version: version\n          name: name\n          tab: tab\n      error: (model, resp, opts) =>\n        app.flash\n          kind: \"error\"\n          title: \"Error: \"\n          message: \"Error fetching data for profile #{name}\"\n\n  ProfileDetailController\n", "###\n Copyright 2010 Red Hat, Inc.\n\n Red Hat licenses this file to you under the Apache License, version\n 2.0 (the \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n implied.  See the License for the specific language governing\n permissions and limitations under the License.\n###\n\ndefine [\n  \"models/app\",\n  \"views/jade\",\n  \"models/user\",\n  \"models/users\",\n  \"controllers/controls/collection\"\n  \"controllers/controls/table\"\n  \"controllers/controls/dialog\"\n], (app, jade, User, Users) ->\n\n  class UsersTable extends FON.Table\n    row_template: jade[\"users_page/user_row.jade\"]\n\n    initialize: ->\n      @parent = @options.parent\n      super\n\n    child_control: (model)->\n      controller = new FON.TemplateController\n        model: model\n        tagName: \"tr\"\n        template: @row_template\n        template_data: -> model.toJSON()\n        on_render: (self)=>\n\n          el = $(self.el)\n          if @parent.state.get(\"selected\") == model\n            el.addClass(\"selected\")\n          else\n            el.removeClass(\"selected\")\n\n          el.click (event)=>\n            @parent.selected(model)\n            false\n\n      @parent.state.bind \"change:selected\", -> controller.render()\n      model.bind \"all\", -> controller.render()\n      controller\n\n\n  class UsersController extends FON.TemplateController\n    template: jade[\"users_page/index.jade\"]\n\n    selected: (value)-> @state.set({selected:value})\n\n    initialize: ->\n      super\n\n      @state = new FON.Model\n\n      @state.bind \"change:selected\", (value)=>\n        @details.empty()\n        @overview = null\n        selected = @state.get(\"selected\")\n        if selected\n          @overview = new UserOverviewController\n            model: selected\n\n          el = $(@overview.render().el)\n          @details.append el\n          @add_role.removeClass \"disabled\"\n          @delete.removeClass \"disabled\"\n          @change_password.removeClass \"disabled\"\n        else\n          @add_role.addClass \"disabled\"\n          @delete.addClass \"disabled\"\n          @change_password.addClass \"disabled\"\n\n    elements:\n      \"div.nav_buttons > ul\": \"items\"\n      \"a.add-role\": \"add_role\"\n      \"a.change-password\": \"change_password\"\n      \"a.delete\": \"delete\"\n      \"#user_overview_container\": \"details\"\n\n    events:\n      \"click a.add\": \"do_add\"\n      \"click a.add-role\": \"do_add_role\"\n      \"click a.delete\": \"do_delete\"\n      \"click a.change-password\": \"do_change_password\"\n\n    do_add: ->\n      d = new AddUserDialog\n        parent: @\n        model: @model\n      d.render()\n      false\n\n    do_add_role: ->\n      if @state.get(\"selected\")\n        d = new AddRoleDialog\n          model: @state.get \"selected\"\n          selected: @state.get \"selected\"\n        d.render()\n      false\n\n    do_change_password: ->\n      if @state.get(\"selected\")\n        d = new ChangePasswordDialog\n          model: @state.get \"selected\"\n          selected: @state.get \"selected\"\n        d.render()\n      false\n\n    do_delete: ->\n      FON.confirm_delete(@state.get(\"selected\").get(\"id\"), \"user\", => \n        @state.get(\"selected\").destroy()\n        @state.set\n          selected: null\n      ).render()\n      false\n\n    on_render: ->\n      @model.trigger \"reset\", @model\n      @table = new UsersTable\n        el: @$(\"#users\")\n        parent: @\n        collection: @model\n      @table.render()\n\n  class RoleEntry extends FON.ModelBackedTemplate\n    tagName:\"li\"\n\n    template: _.template(\"\"\"<a href=\"#\" class=\"delete-role\" title=\"Delete role\"><img src=\"img/x-16.png\"></a>{{FON.escapeHtml(id)}}\"\"\")\n    elements:\n      \"a.delete-role\": \"delete\"\n\n    on_render: ->\n      @delete.click (event) =>\n        FON.confirm_delete(@model.id, \"role\", => @model.destroy()).render()\n        false\n\n\n  class UserOverviewController extends FON.TemplateController\n    template: jade[\"users_page/user_overview.jade\"]\n    template_data: ->  @model.toJSON()\n    elements:\n      \"ul.roles\": \"ul_roles\"\n    on_render: ->\n\n      ul = new FON.CollectionController\n        el: @ul_roles\n        collection: @model.roles()\n        child_control: (model) ->\n          new RoleEntry\n            model: model\n      ul.render()\n\n\n  class AddUserDialogBody extends FON.TemplateController\n    tagName: \"fieldset\"\n    template: jade[\"users_page/add_user.jade\"]\n\n\n  class AddUserDialog extends FON.Dialog\n    accept: -> \"Create\"\n    header: -> \"Create New User\"\n\n    on_accept: (body, options) ->\n      username = body.find(\"#username_input\").val()\n\n      if (username.length < 5)\n        @show_error(\"Username must be at least 5 characters long\")\n        return\n\n      for user in @model.models\n        if username == user.id\n          @show_error(\"Username already exists\")\n          return\n\n      password = body.find(\"#password_input\").val()\n      repeat_password = body.find(\"#repeat_password_input\").val()\n      if (password.length < 5)\n        @show_error(\"Password must be at least 5 characters long\")\n        return\n      if (password != repeat_password)\n        @show_error(\"Passwords don't match\")\n        return\n\n\n      user = new User()\n\n      user.id = username\n      user.password = password\n      user.save {password: password}\n        error: =>\n          @do_hide()\n          app.flash\n            kind: \"error\"\n            title: \"Error adding user.\"\n        success: =>\n          @do_hide()\n          @model.fetch()\n\n    on_display: (body, options) ->\n      controller = new AddUserDialogBody\n        model: options.model\n\n      body.html controller.render().el  \n\n\n  class AddRoleDialog extends FON.Dialog\n    accept: -> \"Add\"\n    header: -> \"Add New Role\"\n\n    initialize: ->\n      @model = @options.model if @options.model\n      super\n\n    on_accept: (body, options) ->\n      role = body.find(\"#role_input\").val()\n\n      if (role.length < 4)\n        @show_error(\"Role must be at least 4 characters long\")\n        return\n\n      @model.roles().create(\n        \"id\": role\n      ,\n        success: =>\n          @do_hide()\n          @model.collection.fetch()\n        error: =>\n          @do_hide()\n          app.flash\n            kind: \"error\"\n            title: \"Error adding role\"\n      )\n\n    on_display: (body, options) ->\n      body.append(new FON.TemplateController\n          tagName: \"div\"\n          template: jade[\"users_page/add_role.jade\"]\n          template_data: -> options.selected.toJSON()  \n        .render().el)\n\n\n  class ChangePasswordDialog extends FON.Dialog\n  \n    accept: -> \"Change\"\n    header: -> \"Change Password\"\n\n    on_accept: (body, options) ->\n      password = body.find(\"#password_input\").val()\n      repeat_password = body.find(\"#repeat_password_input\").val()\n      if (password.length < 5)\n        @show_error(\"Password must be at least 5 characters long\")\n        return\n      if (password != repeat_password)\n        @show_error(\"Passwords don't match\")\n        return\n      user = new User()\n      user.id = @model.id\n      user.save {password: password},\n        success: =>\n          @do_hide()\n          app.flash\n            title: \"Password successfully changed.\"\n            hide_after: 2000\n        , error: =>\n            @do_hide()\n            app.flash\n              kind: \"error\"\n              title: \"Error changing password.\"\n\n    on_display: (body, options) ->\n      body.append(new FON.TemplateController\n          tagName: \"div\"\n          template: jade[\"users_page/change_password.jade\"]\n          template_data: -> options.selected.toJSON()  \n        .render().el)\n\n\n  app.router.route \"/users\", \"users\", ->\n    model = new Users\n    model.fetch\n      success: (model, resp) ->\n        app.page new UsersController\n          model: model\n      error: (model, data, resp) ->\n        app.flash\n          kind: \"error\"\n          title: \"Error: \"\n          message: \"Failed to fetch user information: #{resp}\"\n\n  UsersController\n\n"], "filenames": ["fmc/fmc-webui/src/main/webapp/app/controllers/patches_page.coffee", "fmc/fmc-webui/src/main/webapp/app/controllers/profile_details_page.coffee", "fmc/fmc-webui/src/main/webapp/app/controllers/users_page.coffee"], "buggy_code_start_loc": [132, 114, 140], "buggy_code_end_loc": [154, 170, 141], "fixing_code_start_loc": [132, 114, 140], "fixing_code_end_loc": [154, 170, 141], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in Fuse Management Console in Red Hat JBoss Fuse 6.0.0 before patch 3 and JBoss A-MQ 6.0.0 before patch 3 allow remote attackers to inject arbitrary web script or HTML via the (1) user field in the create user page or (2) profile version to the create profile page.", "other": {"cve": {"id": "CVE-2013-4372", "sourceIdentifier": "secalert@redhat.com", "published": "2013-09-30T21:55:07.377", "lastModified": "2023-02-13T04:46:49.323", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in Fuse Management Console in Red Hat JBoss Fuse 6.0.0 before patch 3 and JBoss A-MQ 6.0.0 before patch 3 allow remote attackers to inject arbitrary web script or HTML via the (1) user field in the create user page or (2) profile version to the create profile page."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de XSS en Fuse Management Console en Red Hat JBoss Fuse 6.0.0 anterior al parche 3 y JBoss A-MQ 6.0.0 anterior al parche 3 permite a atacantes remotos inyectar script web o HTML arbitrario a trav\u00e9s de (1) campos de usuario en la p\u00e1gina de creaci\u00f3n de usuarios o (2) en la versi\u00f3n de perfil de la p\u00e1gina de creaci\u00f3n de perfiles."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jboss_a-mq:6.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "33C4404A-CFB7-4B47-9487-F998825C31CA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jboss_fuse:6.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "A305F012-544E-4245-9D69-1C8CD37748B1"}]}]}], "references": [{"url": "http://fusesource.com/forge/git/fuseenterprise.git/?p=fuseenterprise.git%3Ba=commitdiff%3Bh=f5436ea1c5547c851bb6f92561272fe42c146e68", "source": "secalert@redhat.com"}, {"url": "http://fusesource.com/issues/browse/FMC-495", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2013-1286.html", "source": "secalert@redhat.com"}, {"url": "http://rhn.redhat.com/errata/RHSA-2013-1862.html", "source": "secalert@redhat.com"}, {"url": "http://www.securityfocus.com/bid/62659", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1011736", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/jboss-fuse/fuse/commit/e280cb370323eeb759030919d5111ed809e8ded5", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/jboss-fuse/fuse/commit/e280cb370323eeb759030919d5111ed809e8ded5"}}