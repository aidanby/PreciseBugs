{"buggy_code": ["<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\nerTranslationClassLhTranslation::$htmlEscape = false;\n\n$payload = json_decode(file_get_contents('php://input'),true);\n\n$r = '';\n\nif (isset($payload['msg']) && trim($payload['msg']) != '' && trim(str_replace('[[msgitm]]', '',$payload['msg'])) != '' && mb_strlen($payload['msg']) < (int)erLhcoreClassModelChatConfig::fetch('max_message_length')->current_value)\n{\n    try {\n        $db = ezcDbInstance::get();\n\n        $db->beginTransaction();\n\n        $chat = erLhcoreClassModelChat::fetchAndLock($payload['id']);\n\n        // We do not want to call mobile notifications and any related database calls\n        if (!isset($payload['mn']) || $chat->status != erLhcoreClassModelChat::STATUS_ACTIVE_CHAT) {\n            erLhcoreClassChatEventDispatcher::getInstance()->disableMobile = true;\n        }\n\n        $validStatuses = array(\n            erLhcoreClassModelChat::STATUS_PENDING_CHAT,\n            erLhcoreClassModelChat::STATUS_ACTIVE_CHAT,\n            erLhcoreClassModelChat::STATUS_BOT_CHAT,\n        );\n\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.validstatus_chat',array('chat' => & $chat, 'valid_statuses' => & $validStatuses));\n\n        if ($chat->hash == $payload['hash'] && (in_array($chat->status,$validStatuses)) && !in_array($chat->status_sub, array(erLhcoreClassModelChat::STATUS_SUB_SURVEY_COMPLETED, erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT, erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW, erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM))) // Allow add messages only if chat is active\n        {\n            $msgText = preg_replace('/\\[html\\](.*?)\\[\\/html\\]/ms','',$payload['msg']);\n\n            $messagesToStore = explode('[[msgitm]]', trim($msgText));\n\n            foreach ($messagesToStore as $messageText)\n            {\n                if (trim($messageText) != '')\n                {\n                    $msg = new erLhcoreClassModelmsg();\n                    $msg->msg = trim($messageText);\n                    $msg->chat_id = $payload['id'];\n                    $msg->user_id = 0;\n                    $msg->time = time();\n\n                    if ($chat->chat_locale != '' && $chat->chat_locale_to != '' && isset($chat->chat_variables_array['lhc_live_trans']) && $chat->chat_variables_array['lhc_live_trans'] === true) {\n                        erLhcoreClassTranslate::translateChatMsgVisitor($chat, $msg);\n                    }\n\n                    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_user_saved',array('msg' => & $msg,'chat' => & $chat));\n\n                    erLhcoreClassChat::getSession()->save($msg);\n                }\n            }\n\n            if (!isset($msg)) {\n                $r = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','Please enter a message, max characters').' - '.(int)erLhcoreClassModelChatConfig::fetch('max_message_length')->current_value;\n                echo erLhcoreClassChat::safe_json_encode(array('error' => true, 'r' => $r));\n                exit;\n            }\n\n            $triggers = [];\n            if ($chat->gbot_id > 0 && (!isset($chat->chat_variables_array['gbot_disabled']) || $chat->chat_variables_array['gbot_disabled'] == 0)) {\n                erLhcoreClassGenericBotWorkflow::userMessageAdded($chat, $msg);\n                $triggers = erLhcoreClassGenericBotWorkflow::$triggerName;\n            }\n\n            // Reset active counter if visitor send new message and now user is the last message\n            if ($chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && $chat->auto_responder !== false) {\n                if ($chat->auto_responder->active_send_status != 0 && $chat->last_user_msg_time < $chat->last_op_msg_time) {\n                    $chat->auto_responder->active_send_status = 0;\n                    $chat->auto_responder->saveThis();\n                }\n            }\n\n            $updateFields = array(\n                'last_user_msg_time',\n                'lsync',\n                'last_msg_id',\n                'has_unread_messages',\n                'unanswered_chat',\n            );\n\n            if ($chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT) {\n                $chatVariables = $chat->chat_variables_array;\n                if (!isset($chatVariables['msg_v'])) {\n                    $chatVariables['msg_v'] = 1;\n                } else {\n                    $chatVariables['msg_v']++;\n                }\n                $chat->chat_variables_array = $chatVariables;\n                $chat->chat_variables = json_encode($chatVariables);\n                $updateFields[] = 'chat_variables';\n            }\n\n            // Visitor hold should be removed on visitor message\n            /*if ($chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && isset($chat->chat_variables_array['lhc_hldu'])) {\n                $chat->status_sub = 0;\n                $chat->operation_admin .= \";$('#hold-action-usr-\".$chat->id.\"').removeClass('btn-outline-info')\";\n                $chatVariables = $chat->chat_variables_array;\n                unset($chatVariables['lhc_hldu']);\n                $chat->chat_variables_array = $chatVariables;\n                $chat->chat_variables = json_encode($chatVariables);\n                $updateFields[] = 'chat_variables';\n                $updateFields[] = 'status_sub';\n                $updateFields[] = 'operation_admin';\n            }*/\n\n            $chat->last_user_msg_time = $msg->time;\n            $chat->lsync = time();\n            $chat->last_msg_id = $chat->last_msg_id < $msg->id ? $msg->id : $chat->last_msg_id;\n            $chat->has_unread_messages = ($chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT ? 0 : 1);\n            $chat->unanswered_chat = ($chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT ? 1 : 0);\n            $chat->updateThis(array('update' => $updateFields));\n\n            if ($chat->has_unread_messages == 1 && $chat->last_user_msg_time < (time() - 5)) {\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.unread_chat',array('chat' => & $chat));\n            }\n\n            // Assign to last message all the texts\n            $msg->msg = trim(implode(\"\\n\", $messagesToStore));\n\n        } else {\n            throw new Exception(erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','You cannot send messages to this chat. Chat has been closed.'), 100);\n        }\n\n        $db->commit();\n\n        echo erLhcoreClassChat::safe_json_encode(array('r' => $r, 't' => $triggers));\n\n        // Try to finish request before any listers do their job\n        flush();\n        if (function_exists('fastcgi_finish_request')) {\n            fastcgi_finish_request();\n        }\n\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.addmsguser',array('chat' => & $chat, 'msg' => & $msg));\n        exit;\n\n    } catch (Exception $e) {\n\n        if ($e->getCode() !== 100) {\n            echo erLhcoreClassChat::safe_json_encode(array('error' => true, 'r' => $e->getMessage(), 'system' => true));\n        } else {\n            echo erLhcoreClassChat::safe_json_encode(array('error' => true, 'r' => $e->getMessage()));\n        }\n\n        if ($e->getCode() !== 100) {\n            $statusString = '';\n\n            if (isset($chat)) {\n                $statusString = ' | '. $chat->status . '_' . $chat->satus_sub;\n            }\n\n            erLhcoreClassLog::write($e->getMessage() . ' - ' . $e->getTraceAsString() . $statusString,\n                ezcLog::SUCCESS_AUDIT,\n                array(\n                    'source' => 'lhc',\n                    'category' => 'store',\n                    'line' => $e->getLine(),\n                    'file' => 'addmsguser.php',\n                    'object_id' => $payload['id']\n                )\n            );\n        }\n\n        exit;\n    }\n\n} else {\n    $r = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','Please enter a message') . ', ' . (int)erLhcoreClassModelChatConfig::fetch('max_message_length')->current_value . ' ' . erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','characters max.');\n    echo erLhcoreClassChat::safe_json_encode(array('error' => true, 'r' => $r));\n    exit;\n}\n\n\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\nif (!empty($_GET) && $_SERVER['REQUEST_METHOD'] === 'GET') {\n    $requestPayload = $_GET;\n} else {\n    $requestPayload = json_decode(file_get_contents('php://input'),true);\n}\n\ntry {\n\n    if (!isset($requestPayload['id']) || !isset($requestPayload['msg_id'])) {\n        throw new Exception('Chat ID or message ID not provided!');\n    }\n\n    $chat = erLhcoreClassModelChat::fetch($requestPayload['id']);\n\n    if ($chat instanceof erLhcoreClassModelChat && $chat->hash == $requestPayload['hash'])\n    {\n        $msg = erLhcoreClassModelmsg::fetch($requestPayload['msg_id']);\n\n        if ($msg instanceof erLhcoreClassModelmsg && $msg->chat_id == $chat->id) {\n\n            $tpl = erLhcoreClassTemplate::getInstance( 'lhchat/syncuser.tpl.php');\n            $tpl->set('messages',array((array)$msg));\n            $tpl->set('chat',$chat);\n            $tpl->set('react',true);\n            $tpl->set('sync_mode','');\n            $tpl->set('async_call',true);\n\n            echo json_encode(array('id' => $msg->id, 'msg' => trim($tpl->fetch())));\n            exit;\n        }\n    }\n\n} catch ( Exception $e ) {\n\n}\n\nexit;\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\nif (!empty($_GET) && $_SERVER['REQUEST_METHOD'] === 'GET') {\n    $requestPayload = $_GET;\n} else {\n    $requestPayload = json_decode(file_get_contents('php://input'),true);\n}\n\n$db = ezcDbInstance::get();\n$db->beginTransaction();\n\ntry {\n    if (isset($requestPayload['chat_id'])) {\n        $chat = erLhcoreClassModelChat::fetchAndLock($requestPayload['chat_id']);\n    } else {\n        $chat = false;\n    }\n} catch (Exception $e) {\n    $chat = false;\n}\n\n$content = '';\n$ott = '';\n$LastMessageID = 0;\n$firstOperatorMessageId = 0;\n$userOwner = true;\n$saveChat = false;\n$operation = '';\n$operatorId = 0;\n$visitorTotalMessages = 0;\n$operatorTotalMessages = 0;\n\n$responseArray = array('status' => erLhcoreClassModelChat::STATUS_CLOSED_CHAT, 'status_sub' => erLhcoreClassModelChat::STATUS_SUB_DEFAULT);\n\nif (is_object($chat) && $chat->hash == $requestPayload['hash'])\n{\n    erLhcoreClassChat::setTimeZoneByChat($chat);\n    $chat->updateIgnoreColumns = array('last_msg_id');\n\n    $responseArray['status_sub'] = $chat->status_sub;\n    $responseArray['status'] = $chat->status;\n\n\ttry {\n\n\t\t    if ($chat->auto_responder !== false) {\n\t\t        $chat->auto_responder->chat = $chat;\n\t\t        $chat->auto_responder->process();\n\t\t    }\n\n        if (erLhcoreClassModelChatConfig::fetch('run_departments_workflow')->current_value != 1 && $chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT && $chat->transfer_if_na == 1 &&\n            (\n                (\n                    $chat->transfer_timeout_ts < (time()-$chat->transfer_timeout_ac)\n                ) || (\n                    ($department = $chat->department) && $offlineDepartmentOperators = true && $department !== false && isset($department->bot_configuration_array['off_op_exec']) && $department->bot_configuration_array['off_op_exec'] == 1 && erLhcoreClassChat::isOnline($chat->dep_id,false, array('exclude_bot' => true, 'exclude_online_hours' => true)) === false\n                )\n            ) ) {\n\n\t\t\t\t$canExecuteWorkflow = true;\n\n\t\t\t\tif (erLhcoreClassModelChatConfig::fetch('pro_active_limitation')->current_value >= 0) {\n\t\t\t\t\tif ($chat->department !== false && $chat->department->department_transfer_id > 0) {\n\t\t\t\t\t\t$canExecuteWorkflow = erLhcoreClassChat::getPendingChatsCountPublic($chat->department->department_transfer_id) <= erLhcoreClassModelChatConfig::fetch('pro_active_limitation')->current_value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($canExecuteWorkflow == true) {\n\t\t\t\t\terLhcoreClassChatWorkflow::transferWorkflow($chat, array('offline_operators' => isset($offlineDepartmentOperators)));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($chat->reinform_timeout > 0 && $chat->unread_messages_informed == 0 && $chat->has_unread_messages == 1 && (time()-$chat->last_user_msg_time) > $chat->reinform_timeout) {\n\t\t\t\t$department = $chat->department;\n\t\t\t\tif ($department !== false) {\n\t\t\t\t\t$options = $department->inform_options_array;\n\t\t\t\t\terLhcoreClassChatWorkflow::unreadInformWorkflow(array('department' => $department,'options' => $options),$chat);\n\t\t\t\t}\n\t\t\t}\n\n            $validStatuses = array(\n                erLhcoreClassModelChat::STATUS_PENDING_CHAT,\n                erLhcoreClassModelChat::STATUS_ACTIVE_CHAT,\n                erLhcoreClassModelChat::STATUS_BOT_CHAT,\n            );\n\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.validstatus_chat',array('chat' => & $chat, 'valid_statuses' => & $validStatuses));\n\n            // Sync only if chat is pending or active\n\t\t\tif (in_array($chat->status,$validStatuses) || ($chat->status == erLhcoreClassModelChat::STATUS_CLOSED_CHAT && ($chat->last_op_msg_time == 0 || $chat->last_op_msg_time > time() - (int)erLhcoreClassModelChatConfig::fetch('open_closed_chat_timeout')->current_value))) {\n\t\t\t\t// Check for new messages only if chat last message id is greater than user last message id\n\t\t\t\tif (!isset($requestPayload['lmgsid']) || (int)$requestPayload['lmgsid'] < $chat->last_msg_id) {\n\t\t\t\t    $Messages = erLhcoreClassChat::getPendingMessages((int)$requestPayload['chat_id'], (isset($requestPayload['lmgsid']) ? (int)$requestPayload['lmgsid'] : 0), true);\n\t\t\t\t    if (count($Messages) > 0)\n\t\t\t\t    {\n\t\t\t\t        $tpl = erLhcoreClassTemplate::getInstance( 'lhchat/syncuser.tpl.php');\n\t\t\t\t        $tpl->set('messages',$Messages);\n\t\t\t\t        $tpl->set('chat',$chat);\n\t\t\t\t        $tpl->set('sync_mode','');\n\n\t\t\t\t        if ($requestPayload['lmgsid'] == 0) {\n                            if (isset($requestPayload['new_chat']) && $requestPayload['new_chat'] == true) {\n                                $tpl->set('chat_started_now',true);\n                                if (isset($requestPayload['old_msg_id']) && is_numeric($requestPayload['old_msg_id']) && $requestPayload['old_msg_id'] > 0) {\n                                    $tpl->set('old_msg_id',(int)$requestPayload['old_msg_id']);\n                                }\n                            }\n                        } else {\n                            $tpl->set('async_call',true);\n                        }\n\n\t\t\t\t        if (isset($requestPayload['theme']) && ($themeId = erLhcoreClassChat::extractTheme($requestPayload['theme'])) !== false) {\n                            $tpl->set('theme',erLhAbstractModelWidgetTheme::fetch($requestPayload['theme']));\n                        }\n\n                        $tpl->set('react',true);\n\n                        $content = $tpl->fetch();\n\n                        $operatorId = null;\n\n\t\t\t\t        foreach ($Messages as $msg) {\n\n                            if ($firstOperatorMessageId == 0 && ($msg['user_id'] > 0 || $msg['user_id'] == -2) && strpos($content,'id=\"msg-'.$msg['id'].'\"') !== false) {\n                                $firstOperatorMessageId = $msg['id'];\n                            }\n\n\t\t\t\t        \tif ($msg['user_id'] > 0 || $msg['user_id'] == -2 && $userOwner === true) {\n\t\t\t\t        \t\t$userOwner = false;\n\t\t\t\t        \t}\n\n\t\t\t\t        \tif ($msg['user_id'] != -1 && $operatorId === null) {\n                                $operatorId = (int)$msg['user_id'];\n                            }\n\n\t\t\t\t        \tif ($msg['user_id'] == 0) {\n                                $visitorTotalMessages++;\n                            } else {\n                                $operatorTotalMessages++;\n                            }\n\n                            $operatorIdLast = (int)$msg['user_id'];\n\n                            $LastMessageID = $msg['id'];\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t}\n\n\t\t\t\tif ( $chat->is_operator_typing == true /*&& $Params['user_parameters_unordered']['ot'] != 't'*/ ) {\n\t\t\t\t    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.syncuser.operator_typing',array('chat' => & $chat));\n\t\t\t\t\t$ott = ($chat->operator_typing_user !== false) ? $chat->operator_typing_user->name_support . ' ' . htmlspecialchars_decode(erTranslationClassLhTranslation::getInstance()->getTranslation('chat/chat','is typing now...'),ENT_QUOTES) : htmlspecialchars_decode(erTranslationClassLhTranslation::getInstance()->getTranslation('chat/chat','Operator is typing now...'),ENT_QUOTES);\n\t\t\t\t}  elseif (/*$Params['user_parameters_unordered']['ot'] == 't' &&*/ $chat->is_operator_typing == false) {\n\t\t\t\t\t$ott = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t    // Closed\n\t\t    if ($chat->status == erLhcoreClassModelChat::STATUS_CLOSED_CHAT || $chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT) {\n\t\t    \t$responseArray['closed'] = true;\n\t\t    }\n\n\t\t    $updateFields = array('lsync');\n\t\t    if ($chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_OWNER_CHANGED) {\n\t\t    \t$chat->status_sub = erLhcoreClassModelChat::STATUS_SUB_DEFAULT;\n                $updateFields[] = 'status_sub';\n\t\t    \t$saveChat = true;\n\t\t    }\n\n\t\t    if ($chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW) {\n\t\t    \t$responseArray['closed'] = true;\n\t\t    \tif ($chat->status_sub_arg != '') {\n\t\t    \t    $args = json_decode($chat->status_sub_arg,true);\n\t\t    \t    $responseArray['closed_arg'] = $args;\n\t\t    \t}\n\t\t    }\n\n\t\t    if ($chat->operation != '') {\n\t\t    \t$operation = explode(\"\\n\", trim($chat->operation));\n\t\t    \t$chat->operation = '';\n                $updateFields[] = 'operation';\n\t\t    \t$saveChat = true;\n\t\t    }\n\n\t\t    if ($chat->user_status != 0) {\n\t\t    \t$chat->user_status = 0;\n                $updateFields[] = 'user_status';\n\t\t    \t$saveChat = true;\n\t\t    }\n\n\t\t    if ($chat->has_unread_op_messages == 1)\n\t\t    {\n\t\t    \t$chat->unread_op_messages_informed = 0;\n\t\t    \t$chat->has_unread_op_messages = 0;\n                $chat->unanswered_chat = 0;\n                $updateFields[] = 'unread_op_messages_informed';\n                $updateFields[] = 'has_unread_op_messages';\n                $updateFields[] = 'unanswered_chat';\n\t\t    \t$saveChat = true;\n\t\t    }\n\n\t\t    if (isset($responseArray['closed']) && $responseArray['closed'] == true) {\n                $chatVariables = $chat->chat_variables_array;\n                if (isset($chatVariables['lhc_ds']) && (int)$chatVariables['lhc_ds'] == 0) {\n                    $responseArray['disable_survey'] = true;\n                }\n            }\n\n\t\t    if ($saveChat === true || $chat->lsync < time()-30) {\n\t\t        $chat->lsync = time();\n\t\t    \t$chat->updateThis(array('update' => $updateFields));\n\t\t    }\n\n\t\t    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.syncuser',array('chat' => & $chat, 'response' => & $responseArray));\n\n\t\t$db->commit();\n\n\t} catch (Exception $e) {\n\t    $db->rollback();\n\t}\n\n} else {\n    $db->rollback();\n    $responseArray['closed'] = true;\n}\n\n$responseArray['op'] = $operation;\n$responseArray['uw'] = $userOwner;\n$responseArray['msop'] = $operatorId;\nif (isset($operatorIdLast) && $operatorIdLast != $operatorId) {\n    $responseArray['lmsop'] = $operatorIdLast;\n}\n$responseArray['ott'] = $ott;\n\n// Append how many of messages ones are visitor ones\nif ($visitorTotalMessages > 0) {\n    $responseArray['vtm'] = $visitorTotalMessages;\n}\n\n// Append how many of messages ones are visitor ones\nif ($operatorTotalMessages > 0) {\n    $responseArray['otm'] = $operatorTotalMessages;\n}\n\n$responseArray['message_id'] = (int)$LastMessageID;\n$responseArray['message_id_first'] = (int)$firstOperatorMessageId;\n$responseArray['messages'] = trim($content);\n\necho erLhcoreClassChat::safe_json_encode($responseArray);\nexit;\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\nif (!empty($_GET) && $_SERVER['REQUEST_METHOD'] === 'GET') {\n    $requestPayload = $_GET;\n} else {\n    $requestPayload = json_decode(file_get_contents('php://input'),true);\n}\n\ntry {\n\n    if (!isset($requestPayload['id'])) {\n        throw new Exception('Chat ID or message ID not provided!');\n    }\n\n    $chat = erLhcoreClassModelChat::fetch($requestPayload['id']);\n\n    if ($chat instanceof erLhcoreClassModelChat && $chat->hash == $requestPayload['hash'])\n    {\n\n        $msg = erLhcoreClassModelmsg::findOne(array('limit' => 1, 'sort' => 'id DESC', 'filtergt' => array('user_id' => 0), 'filter' => array('chat_id' => $chat->id)));\n\n        if ($msg instanceof erLhcoreClassModelmsg && $msg->chat_id == $chat->id) {\n            $tpl = erLhcoreClassTemplate::getInstance( 'lhchat/getmessagesnippet/getmessagesnippet.tpl.php');\n            $tpl->set('messages',array((array)$msg));\n            $tpl->set('chat',$chat);\n            $tpl->set('react',true);\n            $tpl->set('sync_mode','');\n            $tpl->set('async_call',true);\n            $tpl->set('user', erLhcoreClassModelUser::fetch($msg->user_id));\n\n            $msgPlain = trim($tpl->fetch());\n\n            $operator_profile = $tpl->fetch('lhchat/getmessagesnippet/operator_profile.tpl.php');\n\n            $msg_body = $tpl->fetch('lhchat/syncuser.tpl.php');\n            $onlineUser = $chat->online_user;\n            $outputResponse = array('operator_profile' => $operator_profile, 'msg_body' => $msg_body, 'msg' => $msgPlain, 'msop' => $msg->user_id);\n\n            if ($onlineUser instanceof erLhcoreClassModelChatOnlineUser && isset($onlineUser->online_attr_system_array['lhc_full_widget'])) {\n                $outputResponse['full_widget'] = 1;\n            }\n\n            echo json_encode($outputResponse);\n            exit;\n        } else {\n            http_response_code(400);\n            echo json_encode(array('result' => 'Message could not be found!'));\n            exit;\n        }\n    }\n\n} catch ( Exception $e ) {\n    http_response_code(400);\n    echo json_encode(array('result' => 'Message could not be found!'));\n    exit;\n}\n\nexit;\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\nif (!empty($_GET) && $_SERVER['REQUEST_METHOD'] === 'GET') {\n    $requestPayload = $_GET;\n} else {\n    $requestPayload = json_decode(file_get_contents('php://input'),true);\n}\n\ntry {\n    $db = ezcDbInstance::get();\n    $db->beginTransaction();\n\n    $chat = erLhcoreClassModelChat::fetchAndLock($requestPayload['id']);\n\n    // Chat does not exists\n    if (!($chat instanceof erLhcoreClassModelChat)) {\n        echo erLhcoreClassRestAPIHandler::outputResponse(array(\n            'operator' => 'operator',\n            'messages' => [],\n            'closed' => true,\n            'status' => erLhcoreClassModelChat::STATUS_CLOSED_CHAT,\n            'status_sub' => 0,\n            'chat_ui' => ['sync_interval' => 2500]\n        ));\n        exit;\n    }\n\n    erLhcoreClassChat::setTimeZoneByChat($chat);\n\n    if ($chat->hash == $requestPayload['hash'])\n    {\n        // User online\n        if ($chat->user_status != 0) {\n            $chat->support_informed = 1;\n            $chat->user_typing = time();// Show for shorter period these status messages\n            $chat->is_user_typing = 1;\n            if (($refererSite = erLhcoreClassModelChatOnlineUser::getReferer()) != '') {\n                if (strlen($refererSite) > 50) {\n                    if ( function_exists('mb_substr') ) {\n                        $refererSite = mb_substr($refererSite, 0, 50);\n                    } else {\n                        $refererSite = substr($refererSite, 0, 50);\n                    }\n                }\n\n                $chat->user_typing_txt = $refererSite;\n            } else {\n                $chat->user_typing_txt = htmlspecialchars_decode(erTranslationClassLhTranslation::getInstance()->getTranslation('chat/userjoined','Visitor has joined the chat!'),ENT_QUOTES);\n            }\n\n            if ($chat->user_status == erLhcoreClassModelChat::USER_STATUS_PENDING_REOPEN && ($onlineuser = $chat->online_user) !== false) {\n                $onlineuser->reopen_chat = 0;\n                $onlineuser->saveThis();\n            }\n\n            $chat->unread_op_messages_informed = 0;\n            $chat->has_unread_op_messages = 0;\n            $chat->unanswered_chat = 0;\n\n            $chat->user_status = erLhcoreClassModelChat::USER_STATUS_JOINED_CHAT;\n\n            $chat->updateThis(array('update' => array(\n                'unanswered_chat',\n                'user_status',\n                'has_unread_op_messages',\n                'unread_op_messages_informed',\n                'user_typing_txt',\n                'is_user_typing',\n                'user_typing',\n                'support_informed',\n            )));\n        }\n\n        $db->commit();\n\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.chatwidgetchat',array('params' => & $Params, 'chat' => & $chat));\n\n        $outputResponse = array(\n            'operator' => 'operator',\n            'messages' => [],\n            'chat_ui' => array(\n\n            )\n        );\n\n        $data = erLhcoreClassModelChatConfig::fetch('mobile_options')->data_value;\n\n        if (isset($data['notifications']) && $data['notifications'] == true) {\n            $outputResponse['chat_ui']['mn'] = 1;\n        }\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('bbc_button_visible')->value != 1) {\n            $outputResponse['chat_ui']['bbc_btnh'] = true;\n        }\n\n        $outputResponse['chat_ui']['header_buttons'] = array(\n            array(\n                'pos' => 'left',\n                'btn' => 'min'\n            ),\n            array(\n                'pos' => 'right',\n                'btn' => 'close',\n            ),\n            array(\n                'pos' => 'right',\n                'btn' => 'popup'\n            )\n        );\n\n        if (isset($requestPayload['theme']) && !empty($requestPayload['theme']) && ($themeId = erLhcoreClassChat::extractTheme($requestPayload['theme'])) !== false) {\n\n            $theme = erLhAbstractModelWidgetTheme::fetch($themeId);\n\n            if ($theme instanceof erLhAbstractModelWidgetTheme) {\n\n                $theme->translate();\n\n                foreach (array('placeholder_message','cnew_msgh','cnew_msg','cscroll_btn','cnew_msgm','min_text','popup_text','end_chat_text') as $attrTranslate) {\n                    if (isset($theme->bot_configuration_array[$attrTranslate]) && !empty($theme->bot_configuration_array[$attrTranslate])) {\n                        $outputResponse['chat_ui'][$attrTranslate] = $theme->bot_configuration_array[$attrTranslate];\n                    }\n                }\n\n                if (isset($theme->bot_configuration_array['hide_status']) && $theme->bot_configuration_array['hide_status'] == true) {\n                    $outputResponse['chat_ui']['hide_status'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['embed_closed']) && !empty($theme->bot_configuration_array['embed_closed'])) {\n                    $outputResponse['chat_ui']['embed_cls'] = (int)$theme->bot_configuration_array['embed_closed'];\n                }\n\n                if (isset($theme->bot_configuration_array['msg_expand']) && $theme->bot_configuration_array['msg_expand'] == true) {\n                    $outputResponse['chat_ui']['msg_expand'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['font_size']) && $theme->bot_configuration_array['font_size'] == true) {\n                    $outputResponse['chat_ui']['font_size'] = true;\n                }\n\n                // Theme configuration overrides default settings\n                if (isset($theme->bot_configuration_array['hide_bb_code']) && $theme->bot_configuration_array['hide_bb_code'] == true) {\n                    $outputResponse['chat_ui']['bbc_btnh'] = true;\n                } elseif (isset($outputResponse['chat_ui']['bbc_btnh'])) {\n                    unset($outputResponse['chat_ui']['bbc_btnh']);\n                }\n\n                if ($theme->hide_popup == 1) {\n                    $outputResponse['chat_ui']['hide_popup'] = true;\n                }\n\n                if ($theme->hide_close == 1) {\n                    $outputResponse['chat_ui']['hide_close'] = true;\n                }\n\n                if ($theme->popup_image_url != '') {\n                    $outputResponse['chat_ui']['img_icon_popup'] = $theme->popup_image_url;\n                }\n\n                if ($theme->close_image_url != '') {\n                    $outputResponse['chat_ui']['img_icon_close'] = $theme->close_image_url;\n                }\n\n                if ($theme->minimize_image_url != '') {\n                    $outputResponse['chat_ui']['img_icon_min'] = $theme->minimize_image_url;\n                }\n\n                if (isset($theme->bot_configuration_array['survey_button']) && $theme->bot_configuration_array['survey_button'] == true) {\n                    $outputResponse['chat_ui']['survey_button'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['start_on_close']) && $theme->bot_configuration_array['start_on_close'] == true) {\n                    $outputResponse['chat_ui']['start_on_close'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['confirm_close']) && $theme->bot_configuration_array['confirm_close'] == true) {\n                    $outputResponse['chat_ui']['confirm_close'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['close_on_unload']) && $theme->bot_configuration_array['close_on_unload'] == true) {\n                    $outputResponse['chat_ui']['close_on_unload'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['switch_to_human']) && is_numeric($theme->bot_configuration_array['switch_to_human'])) {\n                    $outputResponse['chat_ui']['switch_to_human'] = (int)$theme->bot_configuration_array['switch_to_human'];\n                }\n\n                if (isset($theme->bot_configuration_array['close_in_status']) && $theme->bot_configuration_array['close_in_status'] == true) {\n                    $outputResponse['chat_ui']['clinst'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['msg_snippet']) && $theme->bot_configuration_array['msg_snippet'] == true) {\n                    $outputResponse['chat_ui']['msg_snippet'] = true;\n                }\n                \n                if (isset($theme->bot_configuration_array['custom_html_header']) && $theme->bot_configuration_array['custom_html_header'] != '') {\n                    $outputResponse['chat_ui']['custom_html_header'] = $theme->bot_configuration_array['custom_html_header'];\n                }\n\n                if (isset($theme->bot_configuration_array['custom_html_header_body']) && $theme->bot_configuration_array['custom_html_header_body'] != '') {\n                    $outputResponse['chat_ui']['custom_html_header_body'] = $theme->bot_configuration_array['custom_html_header_body'];\n                }\n\n                if (isset($theme->bot_configuration_array['prev_msg']) && $theme->bot_configuration_array['prev_msg'] == true) {\n                    if ($chat->online_user instanceof erLhcoreClassModelChatOnlineUser) {\n\n                        $previousChat = erLhcoreClassModelChat::findOne(array('sort' => 'id DESC', 'limit' => 1, 'filternot' => array('id' => $chat->id), 'filter' => array('online_user_id' => $chat->online_user->id)));\n\n                        if ($previousChat instanceof erLhcoreClassModelChat){\n                            $tpl = erLhcoreClassTemplate::getInstance( 'lhchat/previous_chat.tpl.php');\n                            $tpl->set('messages', erLhcoreClassChat::getPendingMessages((int)$previousChat->id,  0, true));\n                            $tpl->set('chat',$previousChat);\n                            $tpl->set('sync_mode','');\n                            $tpl->set('async_call',true);\n                            $tpl->set('theme',$theme);\n                            $tpl->set('react',true);\n                            $outputResponse['chat_ui']['prev_chat'] = $tpl->fetch();\n                        }\n                    }\n                }\n\n                if (isset($theme->bot_configuration_array['icons_order']) && $theme->bot_configuration_array['icons_order'] != '') {\n                    $icons = explode(',',str_replace(' ','',$theme->bot_configuration_array['icons_order']));\n                    $outputResponse['chat_ui']['header_buttons'] = array();\n                    foreach ($icons as $icon) {\n                        $paramsIcon = explode('_',$icon);\n                        $outputResponse['chat_ui']['header_buttons'][] = array(\n                            'pos' => $paramsIcon[0],\n                            'btn' => $paramsIcon[1],\n                            'print' => isset($paramsIcon[2]) && $paramsIcon[2] == 'print',\n                        );\n                    }\n                }\n            }\n        }\n\n        if ($chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW) {\n            if ($chat->status_sub_arg != '') {\n                $args = json_decode($chat->status_sub_arg, true);\n                if (isset($args['survey_id'])) {\n                    $outputResponse['chat_ui']['survey_id'] = (int)$args['survey_id'];\n                }\n            }\n        }\n\n        if (!isset($outputResponse['chat_ui']['survey_id']) && isset($chat->department->bot_configuration_array['survey_id']) && $chat->department->bot_configuration_array['survey_id'] > 0) {\n            $outputResponse['chat_ui']['survey_id'] = $chat->department->bot_configuration_array['survey_id'];\n        };\n\n        $soundData = erLhcoreClassModelChatConfig::fetch('sync_sound_settings')->data_value;\n        $outputResponse['chat_ui']['sync_interval'] = (int)($soundData['chat_message_sinterval']*1000);\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('disable_send')->current_value == 0) {\n            $outputResponse['chat_ui']['mail'] = true;\n        }\n\n        $outputResponse['status_sub'] = $chat->status_sub;\n        $outputResponse['status'] = $chat->status;\n\n        if ($chat->status == erLhcoreClassModelChat::STATUS_CLOSED_CHAT || $chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM || $chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW || $chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT) {\n            $outputResponse['closed'] = true;\n        } else {\n            $outputResponse['closed'] = false;\n        }\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('disable_print')->current_value == 0) {\n            $outputResponse['chat_ui']['print'] = true;\n        }\n\n        $notificationsSettings = erLhcoreClassModelChatConfig::fetch('notifications_settings')->data_value;\n\n        if (isset($notificationsSettings['enabled']) && $notificationsSettings['enabled'] == 1 && (!isset($theme) || $theme === false || (isset($theme->notification_configuration_array['notification_enabled']) && $theme->notification_configuration_array['notification_enabled'] == 1))) {\n            $outputResponse['chat_ui']['notifications'] = true;\n            $outputResponse['chat_ui']['notifications_pk'] = $notificationsSettings['public_key'];\n        }\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('disable_send')->current_value == 0) {\n            $outputResponse['chat_ui']['transcript'] = true;\n        }\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('hide_button_dropdown')->current_value == 0) {\n            $outputResponse['chat_ui']['close_btn'] = true;\n        }\n\n        $outputResponse['chat_ui']['open_timeout'] = (int)erLhcoreClassModelChatConfig::fetch('open_closed_chat_timeout')->current_value;\n\n        $outputResponse['chat_ui']['max_length'] = (int)erLhcoreClassModelChatConfig::fetch('max_message_length')->current_value - 1;\n\n        $fileData = (array)erLhcoreClassModelChatConfig::fetch('file_configuration')->data;\n\n        $chatVariables = $chat->chat_variables_array;\n\n        if ((isset($fileData['active_user_upload']) && $fileData['active_user_upload'] == true) || (isset($chatVariables['lhc_fu']) && $chatVariables['lhc_fu'] == 1)) {\n            $outputResponse['chat_ui']['file'] = true;\n            $outputResponse['chat_ui']['file_options'] = array(\n                'fs' => $fileData['fs_max']*1024,\n                'ft_us' => $fileData['ft_us'],\n            );\n            \n            if (isset($fileData['one_file_upload']) && $fileData['one_file_upload'] == true) {\n                $outputResponse['chat_ui']['file_options']['one_file_upload'] = true;\n            }\n        }\n\n        if (isset($chatVariables['lhc_ds'])) {\n            if ((int)$chatVariables['lhc_ds'] == 0) {\n                if (isset($outputResponse['chat_ui']['survey_id'])) {\n                    unset($outputResponse['chat_ui']['survey_id']);\n                }\n            } else {\n                $outputResponse['chat_ui']['survey_id'] = (int)$chatVariables['lhc_ds'];\n            }\n        }\n\n        if (isset($fileData['sound_messages']) && $fileData['sound_messages'] == true) {\n            $outputResponse['chat_ui']['voice_message'] = $fileData['sound_length'];\n        }\n\n        $voiceData = (array)erLhcoreClassModelChatConfig::fetch('vvsh_configuration')->data;\n\n        if (isset($voiceData['voice']) && $voiceData['voice'] == true) {\n            $outputResponse['chat_ui']['voice'] = true;\n        }\n\n        $outputResponse['chat_ui']['fbst'] = $chat->fbst;\n\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('widgetrestapi.initchat', array('output' => & $outputResponse, 'chat' => $chat));\n\n        echo erLhcoreClassRestAPIHandler::outputResponse($outputResponse);\n    }\n\n} catch(Exception $e) {\n    try {\n        $db->rollback();\n    } catch (Exception $ee) {\n        // No need for an error\n    }\n\n    erLhcoreClassLog::write(print_r($e,true));\n}\nexit;\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\n$db = ezcDbInstance::get();\n\n$chat = erLhcoreClassModelChat::fetch($Params['user_parameters']['chat_id']);\n\nif ($chat instanceof erLhcoreClassModelChat && $chat->hash == $Params['user_parameters']['hash'])\n{\n    if ($Params['user_parameters_unordered']['action'] == 'send') {\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('disable_send')->current_value == 0 && ($chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT || $chat->status == erLhcoreClassModelChat::STATUS_ACTIVE_CHAT || $chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT || erLhcoreClassChat::canReopen($chat,true)))\n        {\n            $payload = json_decode(file_get_contents('php://input'),true);\n            if (isset($payload['email']) && filter_var($payload['email'], FILTER_VALIDATE_EMAIL)) {\n\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_send', array('chat' => & $chat, 'errors' => & $Errors));\n\n                $mailTemplate = erLhAbstractModelEmailTemplate::fetch(3);\n                $mailTemplate->translate($chat->chat_locale);\n\n                erLhcoreClassChatMail::prepareSendMail($mailTemplate, $chat);\n                $mailTemplate->recipient = $payload['email'];\n\n                $messages = array_reverse(erLhcoreClassModelmsg::getList(array('customfilter' => array('user_id != -1'),'limit' => 500, 'sort' => 'id DESC','filter' => array('chat_id' => $chat->id))));\n\n                // Fetch chat messages\n                $tpl = new erLhcoreClassTemplate( 'lhchat/messagelist/plain.tpl.php');\n                $tpl->set('chat', $chat);\n                $tpl->set('messages', $messages);\n\n                $mailTemplate->content = str_replace(array('{user_chat_nick}','{messages_content}','{chat_id}'), array($chat->nick, $tpl->fetch(), $chat->id), $mailTemplate->content);\n\n                erLhcoreClassChatMail::sendMail($mailTemplate, $chat);\n\n                echo json_encode(array('error' => false));\n                exit;\n\n            } else {\n                $errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Invalid email address');\n            }\n\n        } else {\n            $errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Invalid chat!');\n        }\n\n        $tpl = erLhcoreClassTemplate::getInstance( 'lhkernel/validation_error.tpl.php');\n        $tpl->set('errors',$errors);\n        $tpl->set('hideErrorButton',true);\n\n        echo json_encode(array('error' => true, 'result' => $tpl->fetch()));\n        exit;\n\n    } else {\n        echo $chat->email;\n    }\n}\n\nexit;\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\nif (!empty($_GET) && $_SERVER['REQUEST_METHOD'] === 'GET') {\n    $requestPayload = $_GET;\n} else {\n    $requestPayload = json_decode(file_get_contents('php://input'),true);\n}\n\ntry {\n    $db = ezcDbInstance::get();\n    $db->beginTransaction();\n\n    $chat = erLhcoreClassModelChat::fetchAndLock($requestPayload['id']);\n\n    erLhcoreClassChat::setTimeZoneByChat($chat);\n\n    if ($chat->hash == $requestPayload['hash'])\n    {\n        $outputResponse = array(\n            'operator' => 'operator',\n            'chat_ui' => array(),\n            'chat_ui_remove' => array(),\n        );\n\n        $fileData = (array)erLhcoreClassModelChatConfig::fetch('file_configuration')->data;\n\n        $chatVariables = $chat->chat_variables_array;\n\n        if ((isset($fileData['active_user_upload']) && $fileData['active_user_upload'] == true) || (isset($chatVariables['lhc_fu']) && $chatVariables['lhc_fu'] == 1)) {\n            $outputResponse['chat_ui']['file'] = true;\n            $outputResponse['chat_ui']['file_options'] = array(\n                'fs' => $fileData['fs_max']*1024,\n                'ft_us' => $fileData['ft_us'],\n            );\n\n            if (isset($fileData['one_file_upload']) && $fileData['one_file_upload'] == true) {\n                $outputResponse['chat_ui']['file_options']['one_file_upload'] = true;\n            }\n\n        } else {\n            $outputResponse['chat_ui_remove'][] = ['chat_ui','file'];\n            $outputResponse['chat_ui_remove'][] = ['chat_ui','file_options'];\n        }\n\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('widgetrestapi.uisettings', array('output' => & $outputResponse, 'chat' => $chat));\n\n        echo erLhcoreClassRestAPIHandler::outputResponse($outputResponse);\n    }\n\n} catch(Exception $e) {\n    $db->rollback();\n}\n\nexit;\n\n?>"], "fixing_code": ["<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\nerTranslationClassLhTranslation::$htmlEscape = false;\n\n$payload = json_decode(file_get_contents('php://input'),true);\n\n$r = '';\n\nif (isset($payload['msg']) && trim($payload['msg']) != '' && trim(str_replace('[[msgitm]]', '',$payload['msg'])) != '' && mb_strlen($payload['msg']) < (int)erLhcoreClassModelChatConfig::fetch('max_message_length')->current_value)\n{\n    try {\n        $db = ezcDbInstance::get();\n\n        $db->beginTransaction();\n\n        $chat = erLhcoreClassModelChat::fetchAndLock($payload['id']);\n\n        // We do not want to call mobile notifications and any related database calls\n        if (!isset($payload['mn']) || $chat->status != erLhcoreClassModelChat::STATUS_ACTIVE_CHAT) {\n            erLhcoreClassChatEventDispatcher::getInstance()->disableMobile = true;\n        }\n\n        $validStatuses = array(\n            erLhcoreClassModelChat::STATUS_PENDING_CHAT,\n            erLhcoreClassModelChat::STATUS_ACTIVE_CHAT,\n            erLhcoreClassModelChat::STATUS_BOT_CHAT,\n        );\n\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.validstatus_chat',array('chat' => & $chat, 'valid_statuses' => & $validStatuses));\n\n        if ($chat->hash === $payload['hash'] && (in_array($chat->status,$validStatuses)) && !in_array($chat->status_sub, array(erLhcoreClassModelChat::STATUS_SUB_SURVEY_COMPLETED, erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT, erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW, erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM))) // Allow add messages only if chat is active\n        {\n            $msgText = preg_replace('/\\[html\\](.*?)\\[\\/html\\]/ms','',$payload['msg']);\n\n            $messagesToStore = explode('[[msgitm]]', trim($msgText));\n\n            foreach ($messagesToStore as $messageText)\n            {\n                if (trim($messageText) != '')\n                {\n                    $msg = new erLhcoreClassModelmsg();\n                    $msg->msg = trim($messageText);\n                    $msg->chat_id = $payload['id'];\n                    $msg->user_id = 0;\n                    $msg->time = time();\n\n                    if ($chat->chat_locale != '' && $chat->chat_locale_to != '' && isset($chat->chat_variables_array['lhc_live_trans']) && $chat->chat_variables_array['lhc_live_trans'] === true) {\n                        erLhcoreClassTranslate::translateChatMsgVisitor($chat, $msg);\n                    }\n\n                    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_user_saved',array('msg' => & $msg,'chat' => & $chat));\n\n                    erLhcoreClassChat::getSession()->save($msg);\n                }\n            }\n\n            if (!isset($msg)) {\n                $r = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','Please enter a message, max characters').' - '.(int)erLhcoreClassModelChatConfig::fetch('max_message_length')->current_value;\n                echo erLhcoreClassChat::safe_json_encode(array('error' => true, 'r' => $r));\n                exit;\n            }\n\n            $triggers = [];\n            if ($chat->gbot_id > 0 && (!isset($chat->chat_variables_array['gbot_disabled']) || $chat->chat_variables_array['gbot_disabled'] == 0)) {\n                erLhcoreClassGenericBotWorkflow::userMessageAdded($chat, $msg);\n                $triggers = erLhcoreClassGenericBotWorkflow::$triggerName;\n            }\n\n            // Reset active counter if visitor send new message and now user is the last message\n            if ($chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && $chat->auto_responder !== false) {\n                if ($chat->auto_responder->active_send_status != 0 && $chat->last_user_msg_time < $chat->last_op_msg_time) {\n                    $chat->auto_responder->active_send_status = 0;\n                    $chat->auto_responder->saveThis();\n                }\n            }\n\n            $updateFields = array(\n                'last_user_msg_time',\n                'lsync',\n                'last_msg_id',\n                'has_unread_messages',\n                'unanswered_chat',\n            );\n\n            if ($chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT) {\n                $chatVariables = $chat->chat_variables_array;\n                if (!isset($chatVariables['msg_v'])) {\n                    $chatVariables['msg_v'] = 1;\n                } else {\n                    $chatVariables['msg_v']++;\n                }\n                $chat->chat_variables_array = $chatVariables;\n                $chat->chat_variables = json_encode($chatVariables);\n                $updateFields[] = 'chat_variables';\n            }\n\n            // Visitor hold should be removed on visitor message\n            /*if ($chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && isset($chat->chat_variables_array['lhc_hldu'])) {\n                $chat->status_sub = 0;\n                $chat->operation_admin .= \";$('#hold-action-usr-\".$chat->id.\"').removeClass('btn-outline-info')\";\n                $chatVariables = $chat->chat_variables_array;\n                unset($chatVariables['lhc_hldu']);\n                $chat->chat_variables_array = $chatVariables;\n                $chat->chat_variables = json_encode($chatVariables);\n                $updateFields[] = 'chat_variables';\n                $updateFields[] = 'status_sub';\n                $updateFields[] = 'operation_admin';\n            }*/\n\n            $chat->last_user_msg_time = $msg->time;\n            $chat->lsync = time();\n            $chat->last_msg_id = $chat->last_msg_id < $msg->id ? $msg->id : $chat->last_msg_id;\n            $chat->has_unread_messages = ($chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT ? 0 : 1);\n            $chat->unanswered_chat = ($chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT ? 1 : 0);\n            $chat->updateThis(array('update' => $updateFields));\n\n            if ($chat->has_unread_messages == 1 && $chat->last_user_msg_time < (time() - 5)) {\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.unread_chat',array('chat' => & $chat));\n            }\n\n            // Assign to last message all the texts\n            $msg->msg = trim(implode(\"\\n\", $messagesToStore));\n\n        } else {\n            throw new Exception(erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','You cannot send messages to this chat. Chat has been closed.'), 100);\n        }\n\n        $db->commit();\n\n        echo erLhcoreClassChat::safe_json_encode(array('r' => $r, 't' => $triggers));\n\n        // Try to finish request before any listers do their job\n        flush();\n        if (function_exists('fastcgi_finish_request')) {\n            fastcgi_finish_request();\n        }\n\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.addmsguser',array('chat' => & $chat, 'msg' => & $msg));\n        exit;\n\n    } catch (Exception $e) {\n\n        if ($e->getCode() !== 100) {\n            echo erLhcoreClassChat::safe_json_encode(array('error' => true, 'r' => $e->getMessage(), 'system' => true));\n        } else {\n            echo erLhcoreClassChat::safe_json_encode(array('error' => true, 'r' => $e->getMessage()));\n        }\n\n        if ($e->getCode() !== 100) {\n            $statusString = '';\n\n            if (isset($chat)) {\n                $statusString = ' | '. $chat->status . '_' . $chat->satus_sub;\n            }\n\n            erLhcoreClassLog::write($e->getMessage() . ' - ' . $e->getTraceAsString() . $statusString,\n                ezcLog::SUCCESS_AUDIT,\n                array(\n                    'source' => 'lhc',\n                    'category' => 'store',\n                    'line' => $e->getLine(),\n                    'file' => 'addmsguser.php',\n                    'object_id' => $payload['id']\n                )\n            );\n        }\n\n        exit;\n    }\n\n} else {\n    $r = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','Please enter a message') . ', ' . (int)erLhcoreClassModelChatConfig::fetch('max_message_length')->current_value . ' ' . erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','characters max.');\n    echo erLhcoreClassChat::safe_json_encode(array('error' => true, 'r' => $r));\n    exit;\n}\n\n\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\nif (!empty($_GET) && $_SERVER['REQUEST_METHOD'] === 'GET') {\n    $requestPayload = $_GET;\n} else {\n    $requestPayload = json_decode(file_get_contents('php://input'),true);\n}\n\ntry {\n\n    if (!isset($requestPayload['id']) || !isset($requestPayload['msg_id'])) {\n        throw new Exception('Chat ID or message ID not provided!');\n    }\n\n    $chat = erLhcoreClassModelChat::fetch($requestPayload['id']);\n\n    if ($chat instanceof erLhcoreClassModelChat && $chat->hash === $requestPayload['hash'])\n    {\n        $msg = erLhcoreClassModelmsg::fetch($requestPayload['msg_id']);\n\n        if ($msg instanceof erLhcoreClassModelmsg && $msg->chat_id == $chat->id) {\n\n            $tpl = erLhcoreClassTemplate::getInstance( 'lhchat/syncuser.tpl.php');\n            $tpl->set('messages',array((array)$msg));\n            $tpl->set('chat',$chat);\n            $tpl->set('react',true);\n            $tpl->set('sync_mode','');\n            $tpl->set('async_call',true);\n\n            echo json_encode(array('id' => $msg->id, 'msg' => trim($tpl->fetch())));\n            exit;\n        }\n    }\n\n} catch ( Exception $e ) {\n\n}\n\nexit;\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\nif (!empty($_GET) && $_SERVER['REQUEST_METHOD'] === 'GET') {\n    $requestPayload = $_GET;\n} else {\n    $requestPayload = json_decode(file_get_contents('php://input'),true);\n}\n\n$db = ezcDbInstance::get();\n$db->beginTransaction();\n\ntry {\n    if (isset($requestPayload['chat_id'])) {\n        $chat = erLhcoreClassModelChat::fetchAndLock($requestPayload['chat_id']);\n    } else {\n        $chat = false;\n    }\n} catch (Exception $e) {\n    $chat = false;\n}\n\n$content = '';\n$ott = '';\n$LastMessageID = 0;\n$firstOperatorMessageId = 0;\n$userOwner = true;\n$saveChat = false;\n$operation = '';\n$operatorId = 0;\n$visitorTotalMessages = 0;\n$operatorTotalMessages = 0;\n\n$responseArray = array('status' => erLhcoreClassModelChat::STATUS_CLOSED_CHAT, 'status_sub' => erLhcoreClassModelChat::STATUS_SUB_DEFAULT);\n\nif (is_object($chat) && $chat->hash === $requestPayload['hash'])\n{\n    erLhcoreClassChat::setTimeZoneByChat($chat);\n    $chat->updateIgnoreColumns = array('last_msg_id');\n\n    $responseArray['status_sub'] = $chat->status_sub;\n    $responseArray['status'] = $chat->status;\n\n\ttry {\n\n\t\t    if ($chat->auto_responder !== false) {\n\t\t        $chat->auto_responder->chat = $chat;\n\t\t        $chat->auto_responder->process();\n\t\t    }\n\n        if (erLhcoreClassModelChatConfig::fetch('run_departments_workflow')->current_value != 1 && $chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT && $chat->transfer_if_na == 1 &&\n            (\n                (\n                    $chat->transfer_timeout_ts < (time()-$chat->transfer_timeout_ac)\n                ) || (\n                    ($department = $chat->department) && $offlineDepartmentOperators = true && $department !== false && isset($department->bot_configuration_array['off_op_exec']) && $department->bot_configuration_array['off_op_exec'] == 1 && erLhcoreClassChat::isOnline($chat->dep_id,false, array('exclude_bot' => true, 'exclude_online_hours' => true)) === false\n                )\n            ) ) {\n\n\t\t\t\t$canExecuteWorkflow = true;\n\n\t\t\t\tif (erLhcoreClassModelChatConfig::fetch('pro_active_limitation')->current_value >= 0) {\n\t\t\t\t\tif ($chat->department !== false && $chat->department->department_transfer_id > 0) {\n\t\t\t\t\t\t$canExecuteWorkflow = erLhcoreClassChat::getPendingChatsCountPublic($chat->department->department_transfer_id) <= erLhcoreClassModelChatConfig::fetch('pro_active_limitation')->current_value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($canExecuteWorkflow == true) {\n\t\t\t\t\terLhcoreClassChatWorkflow::transferWorkflow($chat, array('offline_operators' => isset($offlineDepartmentOperators)));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($chat->reinform_timeout > 0 && $chat->unread_messages_informed == 0 && $chat->has_unread_messages == 1 && (time()-$chat->last_user_msg_time) > $chat->reinform_timeout) {\n\t\t\t\t$department = $chat->department;\n\t\t\t\tif ($department !== false) {\n\t\t\t\t\t$options = $department->inform_options_array;\n\t\t\t\t\terLhcoreClassChatWorkflow::unreadInformWorkflow(array('department' => $department,'options' => $options),$chat);\n\t\t\t\t}\n\t\t\t}\n\n            $validStatuses = array(\n                erLhcoreClassModelChat::STATUS_PENDING_CHAT,\n                erLhcoreClassModelChat::STATUS_ACTIVE_CHAT,\n                erLhcoreClassModelChat::STATUS_BOT_CHAT,\n            );\n\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.validstatus_chat',array('chat' => & $chat, 'valid_statuses' => & $validStatuses));\n\n            // Sync only if chat is pending or active\n\t\t\tif (in_array($chat->status,$validStatuses) || ($chat->status == erLhcoreClassModelChat::STATUS_CLOSED_CHAT && ($chat->last_op_msg_time == 0 || $chat->last_op_msg_time > time() - (int)erLhcoreClassModelChatConfig::fetch('open_closed_chat_timeout')->current_value))) {\n\t\t\t\t// Check for new messages only if chat last message id is greater than user last message id\n\t\t\t\tif (!isset($requestPayload['lmgsid']) || (int)$requestPayload['lmgsid'] < $chat->last_msg_id) {\n\t\t\t\t    $Messages = erLhcoreClassChat::getPendingMessages((int)$requestPayload['chat_id'], (isset($requestPayload['lmgsid']) ? (int)$requestPayload['lmgsid'] : 0), true);\n\t\t\t\t    if (count($Messages) > 0)\n\t\t\t\t    {\n\t\t\t\t        $tpl = erLhcoreClassTemplate::getInstance( 'lhchat/syncuser.tpl.php');\n\t\t\t\t        $tpl->set('messages',$Messages);\n\t\t\t\t        $tpl->set('chat',$chat);\n\t\t\t\t        $tpl->set('sync_mode','');\n\n\t\t\t\t        if ($requestPayload['lmgsid'] == 0) {\n                            if (isset($requestPayload['new_chat']) && $requestPayload['new_chat'] == true) {\n                                $tpl->set('chat_started_now',true);\n                                if (isset($requestPayload['old_msg_id']) && is_numeric($requestPayload['old_msg_id']) && $requestPayload['old_msg_id'] > 0) {\n                                    $tpl->set('old_msg_id',(int)$requestPayload['old_msg_id']);\n                                }\n                            }\n                        } else {\n                            $tpl->set('async_call',true);\n                        }\n\n\t\t\t\t        if (isset($requestPayload['theme']) && ($themeId = erLhcoreClassChat::extractTheme($requestPayload['theme'])) !== false) {\n                            $tpl->set('theme',erLhAbstractModelWidgetTheme::fetch($requestPayload['theme']));\n                        }\n\n                        $tpl->set('react',true);\n\n                        $content = $tpl->fetch();\n\n                        $operatorId = null;\n\n\t\t\t\t        foreach ($Messages as $msg) {\n\n                            if ($firstOperatorMessageId == 0 && ($msg['user_id'] > 0 || $msg['user_id'] == -2) && strpos($content,'id=\"msg-'.$msg['id'].'\"') !== false) {\n                                $firstOperatorMessageId = $msg['id'];\n                            }\n\n\t\t\t\t        \tif ($msg['user_id'] > 0 || $msg['user_id'] == -2 && $userOwner === true) {\n\t\t\t\t        \t\t$userOwner = false;\n\t\t\t\t        \t}\n\n\t\t\t\t        \tif ($msg['user_id'] != -1 && $operatorId === null) {\n                                $operatorId = (int)$msg['user_id'];\n                            }\n\n\t\t\t\t        \tif ($msg['user_id'] == 0) {\n                                $visitorTotalMessages++;\n                            } else {\n                                $operatorTotalMessages++;\n                            }\n\n                            $operatorIdLast = (int)$msg['user_id'];\n\n                            $LastMessageID = $msg['id'];\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t}\n\n\t\t\t\tif ( $chat->is_operator_typing == true /*&& $Params['user_parameters_unordered']['ot'] != 't'*/ ) {\n\t\t\t\t    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.syncuser.operator_typing',array('chat' => & $chat));\n\t\t\t\t\t$ott = ($chat->operator_typing_user !== false) ? $chat->operator_typing_user->name_support . ' ' . htmlspecialchars_decode(erTranslationClassLhTranslation::getInstance()->getTranslation('chat/chat','is typing now...'),ENT_QUOTES) : htmlspecialchars_decode(erTranslationClassLhTranslation::getInstance()->getTranslation('chat/chat','Operator is typing now...'),ENT_QUOTES);\n\t\t\t\t}  elseif (/*$Params['user_parameters_unordered']['ot'] == 't' &&*/ $chat->is_operator_typing == false) {\n\t\t\t\t\t$ott = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t    // Closed\n\t\t    if ($chat->status == erLhcoreClassModelChat::STATUS_CLOSED_CHAT || $chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT) {\n\t\t    \t$responseArray['closed'] = true;\n\t\t    }\n\n\t\t    $updateFields = array('lsync');\n\t\t    if ($chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_OWNER_CHANGED) {\n\t\t    \t$chat->status_sub = erLhcoreClassModelChat::STATUS_SUB_DEFAULT;\n                $updateFields[] = 'status_sub';\n\t\t    \t$saveChat = true;\n\t\t    }\n\n\t\t    if ($chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW) {\n\t\t    \t$responseArray['closed'] = true;\n\t\t    \tif ($chat->status_sub_arg != '') {\n\t\t    \t    $args = json_decode($chat->status_sub_arg,true);\n\t\t    \t    $responseArray['closed_arg'] = $args;\n\t\t    \t}\n\t\t    }\n\n\t\t    if ($chat->operation != '') {\n\t\t    \t$operation = explode(\"\\n\", trim($chat->operation));\n\t\t    \t$chat->operation = '';\n                $updateFields[] = 'operation';\n\t\t    \t$saveChat = true;\n\t\t    }\n\n\t\t    if ($chat->user_status != 0) {\n\t\t    \t$chat->user_status = 0;\n                $updateFields[] = 'user_status';\n\t\t    \t$saveChat = true;\n\t\t    }\n\n\t\t    if ($chat->has_unread_op_messages == 1)\n\t\t    {\n\t\t    \t$chat->unread_op_messages_informed = 0;\n\t\t    \t$chat->has_unread_op_messages = 0;\n                $chat->unanswered_chat = 0;\n                $updateFields[] = 'unread_op_messages_informed';\n                $updateFields[] = 'has_unread_op_messages';\n                $updateFields[] = 'unanswered_chat';\n\t\t    \t$saveChat = true;\n\t\t    }\n\n\t\t    if (isset($responseArray['closed']) && $responseArray['closed'] == true) {\n                $chatVariables = $chat->chat_variables_array;\n                if (isset($chatVariables['lhc_ds']) && (int)$chatVariables['lhc_ds'] == 0) {\n                    $responseArray['disable_survey'] = true;\n                }\n            }\n\n\t\t    if ($saveChat === true || $chat->lsync < time()-30) {\n\t\t        $chat->lsync = time();\n\t\t    \t$chat->updateThis(array('update' => $updateFields));\n\t\t    }\n\n\t\t    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.syncuser',array('chat' => & $chat, 'response' => & $responseArray));\n\n\t\t$db->commit();\n\n\t} catch (Exception $e) {\n\t    $db->rollback();\n\t}\n\n} else {\n    $db->rollback();\n    $responseArray['closed'] = true;\n}\n\n$responseArray['op'] = $operation;\n$responseArray['uw'] = $userOwner;\n$responseArray['msop'] = $operatorId;\nif (isset($operatorIdLast) && $operatorIdLast != $operatorId) {\n    $responseArray['lmsop'] = $operatorIdLast;\n}\n$responseArray['ott'] = $ott;\n\n// Append how many of messages ones are visitor ones\nif ($visitorTotalMessages > 0) {\n    $responseArray['vtm'] = $visitorTotalMessages;\n}\n\n// Append how many of messages ones are visitor ones\nif ($operatorTotalMessages > 0) {\n    $responseArray['otm'] = $operatorTotalMessages;\n}\n\n$responseArray['message_id'] = (int)$LastMessageID;\n$responseArray['message_id_first'] = (int)$firstOperatorMessageId;\n$responseArray['messages'] = trim($content);\n\necho erLhcoreClassChat::safe_json_encode($responseArray);\nexit;\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\nif (!empty($_GET) && $_SERVER['REQUEST_METHOD'] === 'GET') {\n    $requestPayload = $_GET;\n} else {\n    $requestPayload = json_decode(file_get_contents('php://input'),true);\n}\n\ntry {\n\n    if (!isset($requestPayload['id'])) {\n        throw new Exception('Chat ID or message ID not provided!');\n    }\n\n    $chat = erLhcoreClassModelChat::fetch($requestPayload['id']);\n\n    if ($chat instanceof erLhcoreClassModelChat && $chat->hash === $requestPayload['hash'])\n    {\n\n        $msg = erLhcoreClassModelmsg::findOne(array('limit' => 1, 'sort' => 'id DESC', 'filtergt' => array('user_id' => 0), 'filter' => array('chat_id' => $chat->id)));\n\n        if ($msg instanceof erLhcoreClassModelmsg && $msg->chat_id == $chat->id) {\n            $tpl = erLhcoreClassTemplate::getInstance( 'lhchat/getmessagesnippet/getmessagesnippet.tpl.php');\n            $tpl->set('messages',array((array)$msg));\n            $tpl->set('chat',$chat);\n            $tpl->set('react',true);\n            $tpl->set('sync_mode','');\n            $tpl->set('async_call',true);\n            $tpl->set('user', erLhcoreClassModelUser::fetch($msg->user_id));\n\n            $msgPlain = trim($tpl->fetch());\n\n            $operator_profile = $tpl->fetch('lhchat/getmessagesnippet/operator_profile.tpl.php');\n\n            $msg_body = $tpl->fetch('lhchat/syncuser.tpl.php');\n            $onlineUser = $chat->online_user;\n            $outputResponse = array('operator_profile' => $operator_profile, 'msg_body' => $msg_body, 'msg' => $msgPlain, 'msop' => $msg->user_id);\n\n            if ($onlineUser instanceof erLhcoreClassModelChatOnlineUser && isset($onlineUser->online_attr_system_array['lhc_full_widget'])) {\n                $outputResponse['full_widget'] = 1;\n            }\n\n            echo json_encode($outputResponse);\n            exit;\n        } else {\n            http_response_code(400);\n            echo json_encode(array('result' => 'Message could not be found!'));\n            exit;\n        }\n    }\n\n} catch ( Exception $e ) {\n    http_response_code(400);\n    echo json_encode(array('result' => 'Message could not be found!'));\n    exit;\n}\n\nexit;\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\nif (!empty($_GET) && $_SERVER['REQUEST_METHOD'] === 'GET') {\n    $requestPayload = $_GET;\n} else {\n    $requestPayload = json_decode(file_get_contents('php://input'),true);\n}\n\ntry {\n    $db = ezcDbInstance::get();\n    $db->beginTransaction();\n\n    $chat = erLhcoreClassModelChat::fetchAndLock($requestPayload['id']);\n\n    // Chat does not exists\n    if (!($chat instanceof erLhcoreClassModelChat)) {\n        echo erLhcoreClassRestAPIHandler::outputResponse(array(\n            'operator' => 'operator',\n            'messages' => [],\n            'closed' => true,\n            'status' => erLhcoreClassModelChat::STATUS_CLOSED_CHAT,\n            'status_sub' => 0,\n            'chat_ui' => ['sync_interval' => 2500]\n        ));\n        exit;\n    }\n\n    erLhcoreClassChat::setTimeZoneByChat($chat);\n\n    if ($chat->hash === $requestPayload['hash'])\n    {\n        // User online\n        if ($chat->user_status != 0) {\n            $chat->support_informed = 1;\n            $chat->user_typing = time();// Show for shorter period these status messages\n            $chat->is_user_typing = 1;\n            if (($refererSite = erLhcoreClassModelChatOnlineUser::getReferer()) != '') {\n                if (strlen($refererSite) > 50) {\n                    if ( function_exists('mb_substr') ) {\n                        $refererSite = mb_substr($refererSite, 0, 50);\n                    } else {\n                        $refererSite = substr($refererSite, 0, 50);\n                    }\n                }\n\n                $chat->user_typing_txt = $refererSite;\n            } else {\n                $chat->user_typing_txt = htmlspecialchars_decode(erTranslationClassLhTranslation::getInstance()->getTranslation('chat/userjoined','Visitor has joined the chat!'),ENT_QUOTES);\n            }\n\n            if ($chat->user_status == erLhcoreClassModelChat::USER_STATUS_PENDING_REOPEN && ($onlineuser = $chat->online_user) !== false) {\n                $onlineuser->reopen_chat = 0;\n                $onlineuser->saveThis();\n            }\n\n            $chat->unread_op_messages_informed = 0;\n            $chat->has_unread_op_messages = 0;\n            $chat->unanswered_chat = 0;\n\n            $chat->user_status = erLhcoreClassModelChat::USER_STATUS_JOINED_CHAT;\n\n            $chat->updateThis(array('update' => array(\n                'unanswered_chat',\n                'user_status',\n                'has_unread_op_messages',\n                'unread_op_messages_informed',\n                'user_typing_txt',\n                'is_user_typing',\n                'user_typing',\n                'support_informed',\n            )));\n        }\n\n        $db->commit();\n\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.chatwidgetchat',array('params' => & $Params, 'chat' => & $chat));\n\n        $outputResponse = array(\n            'operator' => 'operator',\n            'messages' => [],\n            'chat_ui' => array(\n\n            )\n        );\n\n        $data = erLhcoreClassModelChatConfig::fetch('mobile_options')->data_value;\n\n        if (isset($data['notifications']) && $data['notifications'] == true) {\n            $outputResponse['chat_ui']['mn'] = 1;\n        }\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('bbc_button_visible')->value != 1) {\n            $outputResponse['chat_ui']['bbc_btnh'] = true;\n        }\n\n        $outputResponse['chat_ui']['header_buttons'] = array(\n            array(\n                'pos' => 'left',\n                'btn' => 'min'\n            ),\n            array(\n                'pos' => 'right',\n                'btn' => 'close',\n            ),\n            array(\n                'pos' => 'right',\n                'btn' => 'popup'\n            )\n        );\n\n        if (isset($requestPayload['theme']) && !empty($requestPayload['theme']) && ($themeId = erLhcoreClassChat::extractTheme($requestPayload['theme'])) !== false) {\n\n            $theme = erLhAbstractModelWidgetTheme::fetch($themeId);\n\n            if ($theme instanceof erLhAbstractModelWidgetTheme) {\n\n                $theme->translate();\n\n                foreach (array('placeholder_message','cnew_msgh','cnew_msg','cscroll_btn','cnew_msgm','min_text','popup_text','end_chat_text') as $attrTranslate) {\n                    if (isset($theme->bot_configuration_array[$attrTranslate]) && !empty($theme->bot_configuration_array[$attrTranslate])) {\n                        $outputResponse['chat_ui'][$attrTranslate] = $theme->bot_configuration_array[$attrTranslate];\n                    }\n                }\n\n                if (isset($theme->bot_configuration_array['hide_status']) && $theme->bot_configuration_array['hide_status'] == true) {\n                    $outputResponse['chat_ui']['hide_status'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['embed_closed']) && !empty($theme->bot_configuration_array['embed_closed'])) {\n                    $outputResponse['chat_ui']['embed_cls'] = (int)$theme->bot_configuration_array['embed_closed'];\n                }\n\n                if (isset($theme->bot_configuration_array['msg_expand']) && $theme->bot_configuration_array['msg_expand'] == true) {\n                    $outputResponse['chat_ui']['msg_expand'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['font_size']) && $theme->bot_configuration_array['font_size'] == true) {\n                    $outputResponse['chat_ui']['font_size'] = true;\n                }\n\n                // Theme configuration overrides default settings\n                if (isset($theme->bot_configuration_array['hide_bb_code']) && $theme->bot_configuration_array['hide_bb_code'] == true) {\n                    $outputResponse['chat_ui']['bbc_btnh'] = true;\n                } elseif (isset($outputResponse['chat_ui']['bbc_btnh'])) {\n                    unset($outputResponse['chat_ui']['bbc_btnh']);\n                }\n\n                if ($theme->hide_popup == 1) {\n                    $outputResponse['chat_ui']['hide_popup'] = true;\n                }\n\n                if ($theme->hide_close == 1) {\n                    $outputResponse['chat_ui']['hide_close'] = true;\n                }\n\n                if ($theme->popup_image_url != '') {\n                    $outputResponse['chat_ui']['img_icon_popup'] = $theme->popup_image_url;\n                }\n\n                if ($theme->close_image_url != '') {\n                    $outputResponse['chat_ui']['img_icon_close'] = $theme->close_image_url;\n                }\n\n                if ($theme->minimize_image_url != '') {\n                    $outputResponse['chat_ui']['img_icon_min'] = $theme->minimize_image_url;\n                }\n\n                if (isset($theme->bot_configuration_array['survey_button']) && $theme->bot_configuration_array['survey_button'] == true) {\n                    $outputResponse['chat_ui']['survey_button'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['start_on_close']) && $theme->bot_configuration_array['start_on_close'] == true) {\n                    $outputResponse['chat_ui']['start_on_close'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['confirm_close']) && $theme->bot_configuration_array['confirm_close'] == true) {\n                    $outputResponse['chat_ui']['confirm_close'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['close_on_unload']) && $theme->bot_configuration_array['close_on_unload'] == true) {\n                    $outputResponse['chat_ui']['close_on_unload'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['switch_to_human']) && is_numeric($theme->bot_configuration_array['switch_to_human'])) {\n                    $outputResponse['chat_ui']['switch_to_human'] = (int)$theme->bot_configuration_array['switch_to_human'];\n                }\n\n                if (isset($theme->bot_configuration_array['close_in_status']) && $theme->bot_configuration_array['close_in_status'] == true) {\n                    $outputResponse['chat_ui']['clinst'] = true;\n                }\n\n                if (isset($theme->bot_configuration_array['msg_snippet']) && $theme->bot_configuration_array['msg_snippet'] == true) {\n                    $outputResponse['chat_ui']['msg_snippet'] = true;\n                }\n                \n                if (isset($theme->bot_configuration_array['custom_html_header']) && $theme->bot_configuration_array['custom_html_header'] != '') {\n                    $outputResponse['chat_ui']['custom_html_header'] = $theme->bot_configuration_array['custom_html_header'];\n                }\n\n                if (isset($theme->bot_configuration_array['custom_html_header_body']) && $theme->bot_configuration_array['custom_html_header_body'] != '') {\n                    $outputResponse['chat_ui']['custom_html_header_body'] = $theme->bot_configuration_array['custom_html_header_body'];\n                }\n\n                if (isset($theme->bot_configuration_array['prev_msg']) && $theme->bot_configuration_array['prev_msg'] == true) {\n                    if ($chat->online_user instanceof erLhcoreClassModelChatOnlineUser) {\n\n                        $previousChat = erLhcoreClassModelChat::findOne(array('sort' => 'id DESC', 'limit' => 1, 'filternot' => array('id' => $chat->id), 'filter' => array('online_user_id' => $chat->online_user->id)));\n\n                        if ($previousChat instanceof erLhcoreClassModelChat){\n                            $tpl = erLhcoreClassTemplate::getInstance( 'lhchat/previous_chat.tpl.php');\n                            $tpl->set('messages', erLhcoreClassChat::getPendingMessages((int)$previousChat->id,  0, true));\n                            $tpl->set('chat',$previousChat);\n                            $tpl->set('sync_mode','');\n                            $tpl->set('async_call',true);\n                            $tpl->set('theme',$theme);\n                            $tpl->set('react',true);\n                            $outputResponse['chat_ui']['prev_chat'] = $tpl->fetch();\n                        }\n                    }\n                }\n\n                if (isset($theme->bot_configuration_array['icons_order']) && $theme->bot_configuration_array['icons_order'] != '') {\n                    $icons = explode(',',str_replace(' ','',$theme->bot_configuration_array['icons_order']));\n                    $outputResponse['chat_ui']['header_buttons'] = array();\n                    foreach ($icons as $icon) {\n                        $paramsIcon = explode('_',$icon);\n                        $outputResponse['chat_ui']['header_buttons'][] = array(\n                            'pos' => $paramsIcon[0],\n                            'btn' => $paramsIcon[1],\n                            'print' => isset($paramsIcon[2]) && $paramsIcon[2] == 'print',\n                        );\n                    }\n                }\n            }\n        }\n\n        if ($chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW) {\n            if ($chat->status_sub_arg != '') {\n                $args = json_decode($chat->status_sub_arg, true);\n                if (isset($args['survey_id'])) {\n                    $outputResponse['chat_ui']['survey_id'] = (int)$args['survey_id'];\n                }\n            }\n        }\n\n        if (!isset($outputResponse['chat_ui']['survey_id']) && isset($chat->department->bot_configuration_array['survey_id']) && $chat->department->bot_configuration_array['survey_id'] > 0) {\n            $outputResponse['chat_ui']['survey_id'] = $chat->department->bot_configuration_array['survey_id'];\n        };\n\n        $soundData = erLhcoreClassModelChatConfig::fetch('sync_sound_settings')->data_value;\n        $outputResponse['chat_ui']['sync_interval'] = (int)($soundData['chat_message_sinterval']*1000);\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('disable_send')->current_value == 0) {\n            $outputResponse['chat_ui']['mail'] = true;\n        }\n\n        $outputResponse['status_sub'] = $chat->status_sub;\n        $outputResponse['status'] = $chat->status;\n\n        if ($chat->status == erLhcoreClassModelChat::STATUS_CLOSED_CHAT || $chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM || $chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW || $chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT) {\n            $outputResponse['closed'] = true;\n        } else {\n            $outputResponse['closed'] = false;\n        }\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('disable_print')->current_value == 0) {\n            $outputResponse['chat_ui']['print'] = true;\n        }\n\n        $notificationsSettings = erLhcoreClassModelChatConfig::fetch('notifications_settings')->data_value;\n\n        if (isset($notificationsSettings['enabled']) && $notificationsSettings['enabled'] == 1 && (!isset($theme) || $theme === false || (isset($theme->notification_configuration_array['notification_enabled']) && $theme->notification_configuration_array['notification_enabled'] == 1))) {\n            $outputResponse['chat_ui']['notifications'] = true;\n            $outputResponse['chat_ui']['notifications_pk'] = $notificationsSettings['public_key'];\n        }\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('disable_send')->current_value == 0) {\n            $outputResponse['chat_ui']['transcript'] = true;\n        }\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('hide_button_dropdown')->current_value == 0) {\n            $outputResponse['chat_ui']['close_btn'] = true;\n        }\n\n        $outputResponse['chat_ui']['open_timeout'] = (int)erLhcoreClassModelChatConfig::fetch('open_closed_chat_timeout')->current_value;\n\n        $outputResponse['chat_ui']['max_length'] = (int)erLhcoreClassModelChatConfig::fetch('max_message_length')->current_value - 1;\n\n        $fileData = (array)erLhcoreClassModelChatConfig::fetch('file_configuration')->data;\n\n        $chatVariables = $chat->chat_variables_array;\n\n        if ((isset($fileData['active_user_upload']) && $fileData['active_user_upload'] == true) || (isset($chatVariables['lhc_fu']) && $chatVariables['lhc_fu'] == 1)) {\n            $outputResponse['chat_ui']['file'] = true;\n            $outputResponse['chat_ui']['file_options'] = array(\n                'fs' => $fileData['fs_max']*1024,\n                'ft_us' => $fileData['ft_us'],\n            );\n            \n            if (isset($fileData['one_file_upload']) && $fileData['one_file_upload'] == true) {\n                $outputResponse['chat_ui']['file_options']['one_file_upload'] = true;\n            }\n        }\n\n        if (isset($chatVariables['lhc_ds'])) {\n            if ((int)$chatVariables['lhc_ds'] == 0) {\n                if (isset($outputResponse['chat_ui']['survey_id'])) {\n                    unset($outputResponse['chat_ui']['survey_id']);\n                }\n            } else {\n                $outputResponse['chat_ui']['survey_id'] = (int)$chatVariables['lhc_ds'];\n            }\n        }\n\n        if (isset($fileData['sound_messages']) && $fileData['sound_messages'] == true) {\n            $outputResponse['chat_ui']['voice_message'] = $fileData['sound_length'];\n        }\n\n        $voiceData = (array)erLhcoreClassModelChatConfig::fetch('vvsh_configuration')->data;\n\n        if (isset($voiceData['voice']) && $voiceData['voice'] == true) {\n            $outputResponse['chat_ui']['voice'] = true;\n        }\n\n        $outputResponse['chat_ui']['fbst'] = $chat->fbst;\n\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('widgetrestapi.initchat', array('output' => & $outputResponse, 'chat' => $chat));\n\n        echo erLhcoreClassRestAPIHandler::outputResponse($outputResponse);\n    }\n\n} catch(Exception $e) {\n    try {\n        $db->rollback();\n    } catch (Exception $ee) {\n        // No need for an error\n    }\n\n    erLhcoreClassLog::write(print_r($e,true));\n}\nexit;\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\n$db = ezcDbInstance::get();\n\n$chat = erLhcoreClassModelChat::fetch($Params['user_parameters']['chat_id']);\n\nif ($chat instanceof erLhcoreClassModelChat && $chat->hash === $Params['user_parameters']['hash'])\n{\n    if ($Params['user_parameters_unordered']['action'] == 'send') {\n\n        if ((int)erLhcoreClassModelChatConfig::fetch('disable_send')->current_value == 0 && ($chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT || $chat->status == erLhcoreClassModelChat::STATUS_ACTIVE_CHAT || $chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT || erLhcoreClassChat::canReopen($chat,true)))\n        {\n            $payload = json_decode(file_get_contents('php://input'),true);\n            if (isset($payload['email']) && filter_var($payload['email'], FILTER_VALIDATE_EMAIL)) {\n\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_send', array('chat' => & $chat, 'errors' => & $Errors));\n\n                $mailTemplate = erLhAbstractModelEmailTemplate::fetch(3);\n                $mailTemplate->translate($chat->chat_locale);\n\n                erLhcoreClassChatMail::prepareSendMail($mailTemplate, $chat);\n                $mailTemplate->recipient = $payload['email'];\n\n                $messages = array_reverse(erLhcoreClassModelmsg::getList(array('customfilter' => array('user_id != -1'),'limit' => 500, 'sort' => 'id DESC','filter' => array('chat_id' => $chat->id))));\n\n                // Fetch chat messages\n                $tpl = new erLhcoreClassTemplate( 'lhchat/messagelist/plain.tpl.php');\n                $tpl->set('chat', $chat);\n                $tpl->set('messages', $messages);\n\n                $mailTemplate->content = str_replace(array('{user_chat_nick}','{messages_content}','{chat_id}'), array($chat->nick, $tpl->fetch(), $chat->id), $mailTemplate->content);\n\n                erLhcoreClassChatMail::sendMail($mailTemplate, $chat);\n\n                echo json_encode(array('error' => false));\n                exit;\n\n            } else {\n                $errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Invalid email address');\n            }\n\n        } else {\n            $errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Invalid chat!');\n        }\n\n        $tpl = erLhcoreClassTemplate::getInstance( 'lhkernel/validation_error.tpl.php');\n        $tpl->set('errors',$errors);\n        $tpl->set('hideErrorButton',true);\n\n        echo json_encode(array('error' => true, 'result' => $tpl->fetch()));\n        exit;\n\n    } else {\n        echo $chat->email;\n    }\n}\n\nexit;\n\n?>", "<?php\n\nerLhcoreClassRestAPIHandler::setHeaders();\n\nif (!empty($_GET) && $_SERVER['REQUEST_METHOD'] === 'GET') {\n    $requestPayload = $_GET;\n} else {\n    $requestPayload = json_decode(file_get_contents('php://input'),true);\n}\n\ntry {\n    $db = ezcDbInstance::get();\n    $db->beginTransaction();\n\n    $chat = erLhcoreClassModelChat::fetchAndLock($requestPayload['id']);\n\n    erLhcoreClassChat::setTimeZoneByChat($chat);\n\n    if ($chat->hash === $requestPayload['hash'])\n    {\n        $outputResponse = array(\n            'operator' => 'operator',\n            'chat_ui' => array(),\n            'chat_ui_remove' => array(),\n        );\n\n        $fileData = (array)erLhcoreClassModelChatConfig::fetch('file_configuration')->data;\n\n        $chatVariables = $chat->chat_variables_array;\n\n        if ((isset($fileData['active_user_upload']) && $fileData['active_user_upload'] == true) || (isset($chatVariables['lhc_fu']) && $chatVariables['lhc_fu'] == 1)) {\n            $outputResponse['chat_ui']['file'] = true;\n            $outputResponse['chat_ui']['file_options'] = array(\n                'fs' => $fileData['fs_max']*1024,\n                'ft_us' => $fileData['ft_us'],\n            );\n\n            if (isset($fileData['one_file_upload']) && $fileData['one_file_upload'] == true) {\n                $outputResponse['chat_ui']['file_options']['one_file_upload'] = true;\n            }\n\n        } else {\n            $outputResponse['chat_ui_remove'][] = ['chat_ui','file'];\n            $outputResponse['chat_ui_remove'][] = ['chat_ui','file_options'];\n        }\n\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('widgetrestapi.uisettings', array('output' => & $outputResponse, 'chat' => $chat));\n\n        echo erLhcoreClassRestAPIHandler::outputResponse($outputResponse);\n    }\n\n} catch(Exception $e) {\n    $db->rollback();\n}\n\nexit;\n\n?>"], "filenames": ["lhc_web/modules/lhwidgetrestapi/addmsguser.php", "lhc_web/modules/lhwidgetrestapi/fetchmessage.php", "lhc_web/modules/lhwidgetrestapi/fetchmessages.php", "lhc_web/modules/lhwidgetrestapi/getmessagesnippet.php", "lhc_web/modules/lhwidgetrestapi/initchat.php", "lhc_web/modules/lhwidgetrestapi/sendmailsettings.php", "lhc_web/modules/lhwidgetrestapi/uisettings.php"], "buggy_code_start_loc": [32, 19, 37, 19, 32, 9, 19], "buggy_code_end_loc": [33, 20, 38, 20, 33, 10, 20], "fixing_code_start_loc": [32, 19, 37, 19, 32, 9, 19], "fixing_code_end_loc": [33, 20, 38, 20, 33, 10, 20], "type": "CWE-843", "message": "Loose comparison causes IDOR on multiple endpoints in GitHub repository livehelperchat/livehelperchat prior to 3.96.", "other": {"cve": {"id": "CVE-2022-1176", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-31T10:15:07.857", "lastModified": "2022-04-08T06:33:00.953", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Loose comparison causes IDOR on multiple endpoints in GitHub repository livehelperchat/livehelperchat prior to 3.96."}, {"lang": "es", "value": "Una comparaci\u00f3n floja causa IDOR en m\u00faltiples endpoints en el repositorio de GitHub livehelperchat/livehelperchat versiones anteriores a 3.96"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-843"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:livehelperchat:live_helper_chat:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.96", "matchCriteriaId": "A501764D-64D8-4CD8-9AE9-9B340EDD3DE4"}]}]}], "references": [{"url": "https://github.com/livehelperchat/livehelperchat/commit/72c0df160bfe9838c618652facef29af99392ce3", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/3e30171b-c9bf-415c-82f1-6f55a44d09d3", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/livehelperchat/livehelperchat/commit/72c0df160bfe9838c618652facef29af99392ce3"}}