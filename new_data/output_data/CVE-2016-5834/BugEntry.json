{"buggy_code": ["<?php\n/**\n * List Table API: WP_Media_List_Table class\n *\n * @package WordPress\n * @subpackage Administration\n * @since 3.1.0\n */\n\n/**\n * Core class used to implement displaying media items in a list table.\n *\n * @since 3.1.0\n * @access private\n *\n * @see WP_List_Table\n */\nclass WP_Media_List_Table extends WP_List_Table {\n\t/**\n\t * Holds the number of pending comments for each post.\n\t *\n\t * @since 4.4.0\n\t * @var array\n\t * @access protected\n\t */\n\tprotected $comment_pending_count = array();\n\n\tprivate $detached;\n\n\tprivate $is_trash;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t *\n\t * @see WP_List_Table::__construct() for more information on default arguments.\n\t *\n\t * @param array $args An associative array of arguments.\n\t */\n\tpublic function __construct( $args = array() ) {\n\t\t$this->detached = ( isset( $_REQUEST['attachment-filter'] ) && 'detached' === $_REQUEST['attachment-filter'] );\n\n\t\t$this->modes = array(\n\t\t\t'list' => __( 'List View' ),\n\t\t\t'grid' => __( 'Grid View' )\n\t\t);\n\n\t\tparent::__construct( array(\n\t\t\t'plural' => 'media',\n\t\t\t'screen' => isset( $args['screen'] ) ? $args['screen'] : null,\n\t\t) );\n\t}\n\n\t/**\n\t *\n\t * @return bool\n\t */\n\tpublic function ajax_user_can() {\n\t\treturn current_user_can('upload_files');\n\t}\n\n\t/**\n\t *\n\t * @global WP_Query $wp_query\n\t * @global array    $post_mime_types\n\t * @global array    $avail_post_mime_types\n\t * @global string   $mode\n\t */\n\tpublic function prepare_items() {\n\t\tglobal $wp_query, $post_mime_types, $avail_post_mime_types, $mode;\n\n\t\tlist( $post_mime_types, $avail_post_mime_types ) = wp_edit_attachments_query( $_REQUEST );\n\n \t\t$this->is_trash = isset( $_REQUEST['attachment-filter'] ) && 'trash' === $_REQUEST['attachment-filter'];\n\n \t\t$mode = empty( $_REQUEST['mode'] ) ? 'list' : $_REQUEST['mode'];\n\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $wp_query->found_posts,\n\t\t\t'total_pages' => $wp_query->max_num_pages,\n\t\t\t'per_page' => $wp_query->query_vars['posts_per_page'],\n\t\t) );\n\t}\n\n\t/**\n\t * @global array $post_mime_types\n\t * @global array $avail_post_mime_types\n\t * @return array\n\t */\n\tprotected function get_views() {\n\t\tglobal $post_mime_types, $avail_post_mime_types;\n\n\t\t$type_links = array();\n\n\t\t$filter = empty( $_GET['attachment-filter'] ) ? '' : $_GET['attachment-filter'];\n\n\t\t$type_links['all'] = sprintf(\n\t\t\t'<option value=\"\"%s>%s</option>',\n\t\t\tselected( $filter, true, false ),\n\t\t\t__( 'All media items' )\n\t\t);\n\n\t\tforeach ( $post_mime_types as $mime_type => $label ) {\n\t\t\tif ( ! wp_match_mime_types( $mime_type, $avail_post_mime_types ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$selected = selected(\n\t\t\t\t$filter && 0 === strpos( $filter, 'post_mime_type:' ) &&\n\t\t\t\t\twp_match_mime_types( $mime_type, str_replace( 'post_mime_type:', '', $filter ) ),\n\t\t\t\ttrue,\n\t\t\t\tfalse\n\t\t\t);\n\n\t\t\t$type_links[$mime_type] = sprintf(\n\t\t\t\t'<option value=\"post_mime_type:%s\"%s>%s</option>',\n\t\t\t\tesc_attr( $mime_type ),\n\t\t\t\t$selected,\n\t\t\t\t$label[0]\n\t\t\t);\n\t\t}\n\t\t$type_links['detached'] = '<option value=\"detached\"' . ( $this->detached ? ' selected=\"selected\"' : '' ) . '>' . __( 'Unattached' ) . '</option>';\n\n\t\tif ( $this->is_trash || ( defined( 'MEDIA_TRASH') && MEDIA_TRASH ) ) {\n\t\t\t$type_links['trash'] = sprintf(\n\t\t\t\t'<option value=\"trash\"%s>%s</option>',\n\t\t\t\tselected( 'trash' === $filter, true, false ),\n\t\t\t\t_x( 'Trash', 'attachment filter' )\n\t\t\t);\n\t\t}\n\t\treturn $type_links;\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_bulk_actions() {\n\t\t$actions = array();\n\t\tif ( MEDIA_TRASH ) {\n\t\t\tif ( $this->is_trash ) {\n\t\t\t\t$actions['untrash'] = __( 'Restore' );\n\t\t\t\t$actions['delete'] = __( 'Delete Permanently' );\n\t\t\t} else {\n\t\t\t\t$actions['trash'] = _x( 'Trash', 'verb' );\n\t\t\t}\n\t\t} else {\n\t\t\t$actions['delete'] = __( 'Delete Permanently' );\n\t\t}\n\n\t\tif ( $this->detached )\n\t\t\t$actions['attach'] = __( 'Attach' );\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * @param string $which\n\t */\n\tprotected function extra_tablenav( $which ) {\n\t\tif ( 'bar' !== $which ) {\n\t\t\treturn;\n\t\t}\n?>\n\t\t<div class=\"actions\">\n<?php\n\t\tif ( ! is_singular() ) {\n\t\t\tif ( ! $this->is_trash ) {\n\t\t\t\t$this->months_dropdown( 'attachment' );\n\t\t\t}\n\n\t\t\t/** This action is documented in wp-admin/includes/class-wp-posts-list-table.php */\n\t\t\tdo_action( 'restrict_manage_posts', $this->screen->post_type );\n\n\t\t\tsubmit_button( __( 'Filter' ), 'button', 'filter_action', false, array( 'id' => 'post-query-submit' ) );\n\t\t}\n\n\t\tif ( $this->is_trash && current_user_can( 'edit_others_posts' ) ) {\n\t\t\tsubmit_button( __( 'Empty Trash' ), 'apply', 'delete_all', false );\n\t\t} ?>\n\t\t</div>\n<?php\n\t}\n\n\t/**\n\t *\n\t * @return string\n\t */\n\tpublic function current_action() {\n\t\tif ( isset( $_REQUEST['found_post_id'] ) && isset( $_REQUEST['media'] ) )\n\t\t\treturn 'attach';\n\n\t\tif ( isset( $_REQUEST['parent_post_id'] ) && isset( $_REQUEST['media'] ) )\n\t\t\treturn 'detach';\n\n\t\tif ( isset( $_REQUEST['delete_all'] ) || isset( $_REQUEST['delete_all2'] ) )\n\t\t\treturn 'delete_all';\n\n\t\treturn parent::current_action();\n\t}\n\n\t/**\n\t *\n\t * @return bool\n\t */\n\tpublic function has_items() {\n\t\treturn have_posts();\n\t}\n\n\t/**\n\t * @access public\n\t */\n\tpublic function no_items() {\n\t\t_e( 'No media files found.' );\n\t}\n\n\t/**\n\t * Override parent views so we can use the filter bar display.\n\t *\n\t * @global string $mode\n\t */\n\tpublic function views() {\n\t\tglobal $mode;\n\n\t\t$views = $this->get_views();\n\n\t\t$this->screen->render_screen_reader_content( 'heading_views' );\n?>\n<div class=\"wp-filter\">\n\t<div class=\"filter-items\">\n\t\t<?php $this->view_switcher( $mode ); ?>\n\n\t\t<label for=\"attachment-filter\" class=\"screen-reader-text\"><?php _e( 'Filter by type' ); ?></label>\n\t\t<select class=\"attachment-filters\" name=\"attachment-filter\" id=\"attachment-filter\">\n\t\t\t<?php\n\t\t\tif ( ! empty( $views ) ) {\n\t\t\t\tforeach ( $views as $class => $view ) {\n\t\t\t\t\techo \"\\t$view\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t?>\n\t\t</select>\n\n<?php\n\t\t$this->extra_tablenav( 'bar' );\n\n\t\t/** This filter is documented in wp-admin/inclues/class-wp-list-table.php */\n\t\t$views = apply_filters( \"views_{$this->screen->id}\", array() );\n\n\t\t// Back compat for pre-4.0 view links.\n\t\tif ( ! empty( $views ) ) {\n\t\t\techo '<ul class=\"filter-links\">';\n\t\t\tforeach ( $views as $class => $view ) {\n\t\t\t\techo \"<li class='$class'>$view</li>\";\n\t\t\t}\n\t\t\techo '</ul>';\n\t\t}\n?>\n\t</div>\n\n\t<div class=\"search-form\">\n\t\t<label for=\"media-search-input\" class=\"screen-reader-text\"><?php esc_html_e( 'Search Media' ); ?></label>\n\t\t<input type=\"search\" placeholder=\"<?php esc_attr_e( 'Search' ) ?>\" id=\"media-search-input\" class=\"search\" name=\"s\" value=\"<?php _admin_search_query(); ?>\"></div>\n\t</div>\n\t<?php\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tpublic function get_columns() {\n\t\t$posts_columns = array();\n\t\t$posts_columns['cb'] = '<input type=\"checkbox\" />';\n\t\t/* translators: column name */\n\t\t$posts_columns['title'] = _x( 'File', 'column name' );\n\t\t$posts_columns['author'] = __( 'Author' );\n\n\t\t$taxonomies = get_taxonomies_for_attachments( 'objects' );\n\t\t$taxonomies = wp_filter_object_list( $taxonomies, array( 'show_admin_column' => true ), 'and', 'name' );\n\n\t\t/**\n\t\t * Filters the taxonomy columns for attachments in the Media list table.\n\t\t *\n\t\t * @since 3.5.0\n\t\t *\n\t\t * @param array  $taxonomies An array of registered taxonomies to show for attachments.\n\t\t * @param string $post_type  The post type. Default 'attachment'.\n\t\t */\n\t\t$taxonomies = apply_filters( 'manage_taxonomies_for_attachment_columns', $taxonomies, 'attachment' );\n\t\t$taxonomies = array_filter( $taxonomies, 'taxonomy_exists' );\n\n\t\tforeach ( $taxonomies as $taxonomy ) {\n\t\t\tif ( 'category' === $taxonomy ) {\n\t\t\t\t$column_key = 'categories';\n\t\t\t} elseif ( 'post_tag' === $taxonomy ) {\n\t\t\t\t$column_key = 'tags';\n\t\t\t} else {\n\t\t\t\t$column_key = 'taxonomy-' . $taxonomy;\n\t\t\t}\n\t\t\t$posts_columns[ $column_key ] = get_taxonomy( $taxonomy )->labels->name;\n\t\t}\n\n\t\t/* translators: column name */\n\t\tif ( !$this->detached ) {\n\t\t\t$posts_columns['parent'] = _x( 'Uploaded to', 'column name' );\n\t\t\tif ( post_type_supports( 'attachment', 'comments' ) )\n\t\t\t\t$posts_columns['comments'] = '<span class=\"vers comment-grey-bubble\" title=\"' . esc_attr__( 'Comments' ) . '\"><span class=\"screen-reader-text\">' . __( 'Comments' ) . '</span></span>';\n\t\t}\n\t\t/* translators: column name */\n\t\t$posts_columns['date'] = _x( 'Date', 'column name' );\n\t\t/**\n\t\t * Filters the Media list table columns.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $posts_columns An array of columns displayed in the Media list table.\n\t\t * @param bool  $detached      Whether the list table contains media not attached\n\t\t *                             to any posts. Default true.\n\t\t */\n\t\treturn apply_filters( 'manage_media_columns', $posts_columns, $this->detached );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_sortable_columns() {\n\t\treturn array(\n\t\t\t'title'    => 'title',\n\t\t\t'author'   => 'author',\n\t\t\t'parent'   => 'parent',\n\t\t\t'comments' => 'comment_count',\n\t\t\t'date'     => array( 'date', true ),\n\t\t);\n\t}\n\n\t/**\n\t * Handles the checkbox column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_cb( $post ) {\n\t\tif ( current_user_can( 'edit_post', $post->ID ) ) { ?>\n\t\t\t<label class=\"screen-reader-text\" for=\"cb-select-<?php echo $post->ID; ?>\"><?php\n\t\t\t\techo sprintf( __( 'Select %s' ), _draft_or_post_title() );\n\t\t\t?></label>\n\t\t\t<input type=\"checkbox\" name=\"media[]\" id=\"cb-select-<?php echo $post->ID; ?>\" value=\"<?php echo $post->ID; ?>\" />\n\t\t<?php }\n\t}\n\n\t/**\n\t * Handles the title column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_title( $post ) {\n\t\tlist( $mime ) = explode( '/', $post->post_mime_type );\n\n\t\t$title = _draft_or_post_title();\n\t\t$thumb = wp_get_attachment_image( $post->ID, array( 60, 60 ), true, array( 'alt' => '' ) );\n\t\t$link_start = $link_end = '';\n\n\t\tif ( current_user_can( 'edit_post', $post->ID ) && ! $this->is_trash ) {\n\t\t\t$link_start = sprintf(\n\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">',\n\t\t\t\tget_edit_post_link( $post->ID ),\n\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\tesc_attr( sprintf( __( '&#8220;%s&#8221; (Edit)' ), $title ) )\n\t\t\t);\n\t\t\t$link_end = '</a>';\n\t\t}\n\n\t\t$class = $thumb ? ' class=\"has-media-icon\"' : '';\n\t\t?>\n\t\t<strong<?php echo $class; ?>>\n\t\t\t<?php\n\t\t\techo $link_start;\n\t\t\tif ( $thumb ) : ?>\n\t\t\t\t<span class=\"media-icon <?php echo sanitize_html_class( $mime . '-icon' ); ?>\"><?php echo $thumb; ?></span>\n\t\t\t<?php endif;\n\t\t\techo $title . $link_end;\n\t\t\t_media_states( $post );\n\t\t\t?>\n\t\t</strong>\n\t\t<p class=\"filename\">\n\t\t\t<span class=\"screen-reader-text\"><?php _e( 'File name:' ); ?> </span>\n\t\t\t<?php\n\t\t\t$file = get_attached_file( $post->ID );\n\t\t\techo wp_basename( $file );\n\t\t\t?>\n\t\t</p>\n\t\t<?php\n\t}\n\n\t/**\n\t * Handles the author column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_author( $post ) {\n\t\tprintf( '<a href=\"%s\">%s</a>',\n\t\t\tesc_url( add_query_arg( array( 'author' => get_the_author_meta('ID') ), 'upload.php' ) ),\n\t\t\tget_the_author()\n\t\t);\n\t}\n\n\t/**\n\t * Handles the description column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_desc( $post ) {\n\t\techo has_excerpt() ? $post->post_excerpt : '';\n\t}\n\n\t/**\n\t * Handles the date column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_date( $post ) {\n\t\tif ( '0000-00-00 00:00:00' === $post->post_date ) {\n\t\t\t$h_time = __( 'Unpublished' );\n\t\t} else {\n\t\t\t$m_time = $post->post_date;\n\t\t\t$time = get_post_time( 'G', true, $post, false );\n\t\t\tif ( ( abs( $t_diff = time() - $time ) ) < DAY_IN_SECONDS ) {\n\t\t\t\tif ( $t_diff < 0 ) {\n\t\t\t\t\t$h_time = sprintf( __( '%s from now' ), human_time_diff( $time ) );\n\t\t\t\t} else {\n\t\t\t\t\t$h_time = sprintf( __( '%s ago' ), human_time_diff( $time ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$h_time = mysql2date( __( 'Y/m/d' ), $m_time );\n\t\t\t}\n\t\t}\n\n\t\techo $h_time;\n\t}\n\n\t/**\n\t * Handles the parent column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_parent( $post ) {\n\t\t$user_can_edit = current_user_can( 'edit_post', $post->ID );\n\n\t\tif ( $post->post_parent > 0 ) {\n\t\t\t$parent = get_post( $post->post_parent );\n\t\t} else {\n\t\t\t$parent = false;\n\t\t}\n\n\t\tif ( $parent ) {\n\t\t\t$title = _draft_or_post_title( $post->post_parent );\n\t\t\t$parent_type = get_post_type_object( $parent->post_type );\n?>\n\t\t\t<strong>\n\t\t\t<?php if ( $parent_type && $parent_type->show_ui && current_user_can( 'edit_post', $post->post_parent ) ) { ?>\n\t\t\t\t<a href=\"<?php echo get_edit_post_link( $post->post_parent ); ?>\">\n\t\t\t\t\t<?php echo $title ?></a><?php\n\t\t\t} else {\n\t\t\t\techo $title;\n\t\t\t} ?></strong>\n\t\t\t<br />\n\t\t\t<?php\n\t\t\tif ( $user_can_edit ):\n\t\t\t\t$detach_url = add_query_arg( array(\n\t\t\t\t\t'parent_post_id' => $post->post_parent,\n\t\t\t\t\t'media[]' => $post->ID,\n\t\t\t\t\t'_wpnonce' => wp_create_nonce( 'bulk-' . $this->_args['plural'] )\n\t\t\t\t), 'upload.php' );\n\t\t\t\tprintf(\n\t\t\t\t\t'<a href=\"%s\" class=\"hide-if-no-js detach-from-parent\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t$detach_url,\n\t\t\t\t\t/* translators: %s: title of the post the attachment is attached to */\n\t\t\t\t\tesc_attr( sprintf( __( 'Detach from &#8220;%s&#8221;' ), $title ) ),\n\t\t\t\t\t__( 'Detach' )\n\t\t\t\t);\n\t\t\tendif;\n\t\t} else {\n\t\t\t_e( '(Unattached)' ); ?><br />\n\t\t\t<?php if ( $user_can_edit ) {\n\t\t\t\t$title = _draft_or_post_title( $post->post_parent );\n\t\t\t\tprintf(\n\t\t\t\t\t'<a href=\"#the-list\" onclick=\"findPosts.open( \\'media[]\\', \\'%s\\' ); return false;\" class=\"hide-if-no-js\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t$post->ID,\n\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Attach &#8220;%s&#8221; to existing content' ), $title ) ),\n\t\t\t\t\t__( 'Attach' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles the comments column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_comments( $post ) {\n\t\techo '<div class=\"post-com-count-wrapper\">';\n\n\t\tif ( isset( $this->comment_pending_count[ $post->ID ] ) ) {\n\t\t\t$pending_comments = $this->comment_pending_count[ $post->ID ];\n\t\t} else {\n\t\t\t$pending_comments = get_pending_comments_num( $post->ID );\n\t\t}\n\n\t\t$this->comments_bubble( $post->ID, $pending_comments );\n\n\t\techo '</div>';\n\t}\n\n\t/**\n\t * Handles output for the default column.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post        The current WP_Post object.\n\t * @param string  $column_name Current column name.\n\t */\n\tpublic function column_default( $post, $column_name ) {\n\t\tif ( 'categories' === $column_name ) {\n\t\t\t$taxonomy = 'category';\n\t\t} elseif ( 'tags' === $column_name ) {\n\t\t\t$taxonomy = 'post_tag';\n\t\t} elseif ( 0 === strpos( $column_name, 'taxonomy-' ) ) {\n\t\t\t$taxonomy = substr( $column_name, 9 );\n\t\t} else {\n\t\t\t$taxonomy = false;\n\t\t}\n\n\t\tif ( $taxonomy ) {\n\t\t\t$terms = get_the_terms( $post->ID, $taxonomy );\n\t\t\tif ( is_array( $terms ) ) {\n\t\t\t\t$out = array();\n\t\t\t\tforeach ( $terms as $t ) {\n\t\t\t\t\t$posts_in_term_qv = array();\n\t\t\t\t\t$posts_in_term_qv['taxonomy'] = $taxonomy;\n\t\t\t\t\t$posts_in_term_qv['term'] = $t->slug;\n\n\t\t\t\t\t$out[] = sprintf( '<a href=\"%s\">%s</a>',\n\t\t\t\t\t\tesc_url( add_query_arg( $posts_in_term_qv, 'upload.php' ) ),\n\t\t\t\t\t\tesc_html( sanitize_term_field( 'name', $t->name, $t->term_id, $taxonomy, 'display' ) )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t/* translators: used between list items, there is a space after the comma */\n\t\t\t\techo join( __( ', ' ), $out );\n\t\t\t} else {\n\t\t\t\techo '<span aria-hidden=\"true\">&#8212;</span><span class=\"screen-reader-text\">' . get_taxonomy( $taxonomy )->labels->no_terms . '</span>';\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Fires for each custom column in the Media list table.\n\t\t *\n\t\t * Custom columns are registered using the {@see 'manage_media_columns'} filter.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $column_name Name of the custom column.\n\t\t * @param int    $post_id     Attachment ID.\n\t\t */\n\t\tdo_action( 'manage_media_custom_column', $column_name, $post->ID );\n\t}\n\n\t/**\n\t *\n\t * @global WP_Post $post\n\t */\n\tpublic function display_rows() {\n\t\tglobal $post, $wp_query;\n\n\t\t$post_ids = wp_list_pluck( $wp_query->posts, 'ID' );\n\t\treset( $wp_query->posts );\n\n\t\t$this->comment_pending_count = get_pending_comments_num( $post_ids );\n\n\t\tadd_filter( 'the_title','esc_html' );\n\n\t\twhile ( have_posts() ) : the_post();\n\t\t\tif (\n\t\t\t\t( $this->is_trash && $post->post_status != 'trash' )\n\t\t\t\t|| ( ! $this->is_trash && $post->post_status === 'trash' )\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$post_owner = ( get_current_user_id() == $post->post_author ) ? 'self' : 'other';\n\t\t?>\n\t\t\t<tr id=\"post-<?php echo $post->ID; ?>\" class=\"<?php echo trim( ' author-' . $post_owner . ' status-' . $post->post_status ); ?>\">\n\t\t\t\t<?php $this->single_row_columns( $post ); ?>\n\t\t\t</tr>\n\t\t<?php\n\t\tendwhile;\n\t}\n\n\t/**\n\t * Gets the name of the default primary column.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @return string Name of the default primary column, in this case, 'title'.\n\t */\n\tprotected function get_default_primary_column_name() {\n\t\treturn 'title';\n\t}\n\n\t/**\n\t * @param WP_Post $post\n\t * @param string  $att_title\n\t *\n\t * @return array\n\t */\n\tprivate function _get_row_actions( $post, $att_title ) {\n\t\t$actions = array();\n\n\t\tif ( $this->detached ) {\n\t\t\tif ( current_user_can( 'edit_post', $post->ID ) ) {\n\t\t\t\t$actions['edit'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\tget_edit_post_link( $post->ID ),\n\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Edit &#8220;%s&#8221;' ), $att_title ) ),\n\t\t\t\t\t__( 'Edit' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ( current_user_can( 'delete_post', $post->ID ) ) {\n\t\t\t\tif ( EMPTY_TRASH_DAYS && MEDIA_TRASH ) {\n\t\t\t\t\t$actions['trash'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\twp_nonce_url( \"post.php?action=trash&amp;post=$post->ID\", 'trash-post_' . $post->ID ),\n\t\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Move &#8220;%s&#8221; to the Trash' ), $att_title ) ),\n\t\t\t\t\t\t_x( 'Trash', 'verb' )\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$delete_ays = ! MEDIA_TRASH ? \" onclick='return showNotice.warn();'\" : '';\n\t\t\t\t\t$actions['delete'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\"%s aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\twp_nonce_url( \"post.php?action=delete&amp;post=$post->ID\", 'delete-post_' . $post->ID ),\n\t\t\t\t\t\t$delete_ays,\n\t\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Delete &#8220;%s&#8221; permanently' ), $att_title ) ),\n\t\t\t\t\t\t__( 'Delete Permanently' )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$actions['view'] = sprintf(\n\t\t\t\t'<a href=\"%s\" aria-label=\"%s\" rel=\"permalink\">%s</a>',\n\t\t\t\tget_permalink( $post->ID ),\n\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\tesc_attr( sprintf( __( 'View &#8220;%s&#8221;' ), $att_title ) ),\n\t\t\t\t__( 'View' )\n\t\t\t);\n\n\t\t\tif ( current_user_can( 'edit_post', $post->ID ) ) {\n\t\t\t\t$actions['attach'] = sprintf(\n\t\t\t\t\t'<a href=\"#the-list\" onclick=\"findPosts.open( \\'media[]\\', \\'%s\\' ); return false;\" class=\"hide-if-no-js\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t$post->ID,\n\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Attach &#8220;%s&#8221; to existing content' ), $att_title ) ),\n\t\t\t\t\t__( 'Attach' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif ( current_user_can( 'edit_post', $post->ID ) && !$this->is_trash ) {\n\t\t\t\t$actions['edit'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\tget_edit_post_link( $post->ID ),\n\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Edit &#8220;%s&#8221;' ), $att_title ) ),\n\t\t\t\t\t__( 'Edit' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ( current_user_can( 'delete_post', $post->ID ) ) {\n\t\t\t\tif ( $this->is_trash ) {\n\t\t\t\t\t$actions['untrash'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\twp_nonce_url( \"post.php?action=untrash&amp;post=$post->ID\", 'untrash-post_' . $post->ID ),\n\t\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Restore &#8220;%s&#8221; from the Trash' ), $att_title ) ),\n\t\t\t\t\t\t__( 'Restore' )\n\t\t\t\t\t);\n\t\t\t\t} elseif ( EMPTY_TRASH_DAYS && MEDIA_TRASH ) {\n\t\t\t\t\t$actions['trash'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\twp_nonce_url( \"post.php?action=trash&amp;post=$post->ID\", 'trash-post_' . $post->ID ),\n\t\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Move &#8220;%s&#8221; to the Trash' ), $att_title ) ),\n\t\t\t\t\t\t_x( 'Trash', 'verb' )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif ( $this->is_trash || ! EMPTY_TRASH_DAYS || ! MEDIA_TRASH ) {\n\t\t\t\t\t$delete_ays = ( !$this->is_trash && !MEDIA_TRASH ) ? \" onclick='return showNotice.warn();'\" : '';\n\t\t\t\t\t$actions['delete'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\"%s aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\twp_nonce_url( \"post.php?action=delete&amp;post=$post->ID\", 'delete-post_' . $post->ID ),\n\t\t\t\t\t\t$delete_ays,\n\t\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Delete &#8220;%s&#8221; permanently' ), $att_title ) ),\n\t\t\t\t\t\t__( 'Delete Permanently' )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( ! $this->is_trash ) {\n\t\t\t\t$actions['view'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" aria-label=\"%s\" rel=\"permalink\">%s</a>',\n\t\t\t\t\tget_permalink( $post->ID ),\n\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\tesc_attr( sprintf( __( 'View &#8220;%s&#8221;' ), $att_title ) ),\n\t\t\t\t\t__( 'View' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the action links for each attachment in the Media list table.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param array   $actions  An array of action links for each attachment.\n\t\t *                          Default 'Edit', 'Delete Permanently', 'View'.\n\t\t * @param WP_Post $post     WP_Post object for the current attachment.\n\t\t * @param bool    $detached Whether the list table contains media not attached\n\t\t *                          to any posts. Default true.\n\t\t */\n\t\treturn apply_filters( 'media_row_actions', $actions, $post, $this->detached );\n\t}\n\n\t/**\n\t * Generates and displays row action links.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @param object $post        Attachment being acted upon.\n\t * @param string $column_name Current column name.\n\t * @param string $primary     Primary column name.\n\t * @return string Row actions output for media attachments.\n\t */\n\tprotected function handle_row_actions( $post, $column_name, $primary ) {\n\t\tif ( $primary !== $column_name ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$att_title = _draft_or_post_title();\n\t\treturn $this->row_actions( $this->_get_row_actions( $post, $att_title ) );\n\t}\n}\n", "<?php\n/**\n * WordPress Post Template Functions.\n *\n * Gets content for the current post in the loop.\n *\n * @package WordPress\n * @subpackage Template\n */\n\n/**\n * Display the ID of the current item in the WordPress Loop.\n *\n * @since 0.71\n */\nfunction the_ID() {\n\techo get_the_ID();\n}\n\n/**\n * Retrieve the ID of the current item in the WordPress Loop.\n *\n * @since 2.1.0\n *\n * @return int|false The ID of the current item in the WordPress Loop. False if $post is not set.\n */\nfunction get_the_ID() {\n\t$post = get_post();\n\treturn ! empty( $post ) ? $post->ID : false;\n}\n\n/**\n * Display or retrieve the current post title with optional content.\n *\n * @since 0.71\n *\n * @param string $before Optional. Content to prepend to the title.\n * @param string $after  Optional. Content to append to the title.\n * @param bool   $echo   Optional, default to true.Whether to display or return.\n * @return string|void String if $echo parameter is false.\n */\nfunction the_title( $before = '', $after = '', $echo = true ) {\n\t$title = get_the_title();\n\n\tif ( strlen($title) == 0 )\n\t\treturn;\n\n\t$title = $before . $title . $after;\n\n\tif ( $echo )\n\t\techo $title;\n\telse\n\t\treturn $title;\n}\n\n/**\n * Sanitize the current title when retrieving or displaying.\n *\n * Works like the_title(), except the parameters can be in a string or\n * an array. See the function for what can be override in the $args parameter.\n *\n * The title before it is displayed will have the tags stripped and esc_attr()\n * before it is passed to the user or displayed. The default as with the_title(),\n * is to display the title.\n *\n * @since 2.3.0\n *\n * @param string|array $args {\n *     Title attribute arguments. Optional.\n *\n *     @type string  $before Markup to prepend to the title. Default empty.\n *     @type string  $after  Markup to append to the title. Default empty.\n *     @type bool    $echo   Whether to echo or return the title. Default true for echo.\n *     @type WP_Post $post   Current post object to retrieve the title for.\n * }\n * @return string|void String when echo is false.\n */\nfunction the_title_attribute( $args = '' ) {\n\t$defaults = array( 'before' => '', 'after' =>  '', 'echo' => true, 'post' => get_post() );\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$title = get_the_title( $r['post'] );\n\n\tif ( strlen( $title ) == 0 ) {\n\t\treturn;\n\t}\n\n\t$title = $r['before'] . $title . $r['after'];\n\t$title = esc_attr( strip_tags( $title ) );\n\n\tif ( $r['echo'] ) {\n\t\techo $title;\n\t} else {\n\t\treturn $title;\n\t}\n}\n\n/**\n * Retrieve post title.\n *\n * If the post is protected and the visitor is not an admin, then \"Protected\"\n * will be displayed before the post title. If the post is private, then\n * \"Private\" will be located before the post title.\n *\n * @since 0.71\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string\n */\nfunction get_the_title( $post = 0 ) {\n\t$post = get_post( $post );\n\n\t$title = isset( $post->post_title ) ? $post->post_title : '';\n\t$id = isset( $post->ID ) ? $post->ID : 0;\n\n\tif ( ! is_admin() ) {\n\t\tif ( ! empty( $post->post_password ) ) {\n\n\t\t\t/**\n\t\t\t * Filters the text prepended to the post title for protected posts.\n\t\t\t *\n\t\t\t * The filter is only applied on the front end.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param string  $prepend Text displayed before the post title.\n\t\t\t *                         Default 'Protected: %s'.\n\t\t\t * @param WP_Post $post    Current post object.\n\t\t\t */\n\t\t\t$protected_title_format = apply_filters( 'protected_title_format', __( 'Protected: %s' ), $post );\n\t\t\t$title = sprintf( $protected_title_format, $title );\n\t\t} elseif ( isset( $post->post_status ) && 'private' == $post->post_status ) {\n\n\t\t\t/**\n\t\t\t * Filters the text prepended to the post title of private posts.\n\t\t\t *\n\t\t\t * The filter is only applied on the front end.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param string  $prepend Text displayed before the post title.\n\t\t\t *                         Default 'Private: %s'.\n\t\t\t * @param WP_Post $post    Current post object.\n\t\t\t */\n\t\t\t$private_title_format = apply_filters( 'private_title_format', __( 'Private: %s' ), $post );\n\t\t\t$title = sprintf( $private_title_format, $title );\n\t\t}\n\t}\n\n\t/**\n\t * Filters the post title.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $title The post title.\n\t * @param int    $id    The post ID.\n\t */\n\treturn apply_filters( 'the_title', $title, $id );\n}\n\n/**\n * Display the Post Global Unique Identifier (guid).\n *\n * The guid will appear to be a link, but should not be used as a link to the\n * post. The reason you should not use it as a link, is because of moving the\n * blog across domains.\n *\n * URL is escaped to make it XML-safe.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post Optional. Post ID or post object. Default is global $post.\n */\nfunction the_guid( $post = 0 ) {\n\t$post = get_post( $post );\n\n\t$guid = isset( $post->guid ) ? get_the_guid( $post ) : '';\n\t$id   = isset( $post->ID ) ? $post->ID : 0;\n\n\t/**\n\t * Filters the escaped Global Unique Identifier (guid) of the post.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @see get_the_guid()\n\t *\n\t * @param string $guid Escaped Global Unique Identifier (guid) of the post.\n\t * @param int    $id   The post ID.\n\t */\n\techo apply_filters( 'the_guid', $guid, $id );\n}\n\n/**\n * Retrieve the Post Global Unique Identifier (guid).\n *\n * The guid will appear to be a link, but should not be used as an link to the\n * post. The reason you should not use it as a link, is because of moving the\n * blog across domains.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post Optional. Post ID or post object. Default is global $post.\n * @return string\n */\nfunction get_the_guid( $post = 0 ) {\n\t$post = get_post( $post );\n\n\t$guid = isset( $post->guid ) ? $post->guid : '';\n\t$id   = isset( $post->ID ) ? $post->ID : 0;\n\n\t/**\n\t * Filters the Global Unique Identifier (guid) of the post.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param string $guid Global Unique Identifier (guid) of the post.\n\t * @param int    $id   The post ID.\n\t */\n\treturn apply_filters( 'get_the_guid', $guid, $id );\n}\n\n/**\n * Display the post content.\n *\n * @since 0.71\n *\n * @param string $more_link_text Optional. Content for when there is more text.\n * @param bool   $strip_teaser   Optional. Strip teaser content before the more text. Default is false.\n */\nfunction the_content( $more_link_text = null, $strip_teaser = false) {\n\t$content = get_the_content( $more_link_text, $strip_teaser );\n\n\t/**\n\t * Filters the post content.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $content Content of the current post.\n\t */\n\t$content = apply_filters( 'the_content', $content );\n\t$content = str_replace( ']]>', ']]&gt;', $content );\n\techo $content;\n}\n\n/**\n * Retrieve the post content.\n *\n * @since 0.71\n *\n * @global int   $page\n * @global int   $more\n * @global bool  $preview\n * @global array $pages\n * @global int   $multipage\n *\n * @param string $more_link_text Optional. Content for when there is more text.\n * @param bool   $strip_teaser   Optional. Strip teaser content before the more text. Default is false.\n * @return string\n */\nfunction get_the_content( $more_link_text = null, $strip_teaser = false ) {\n\tglobal $page, $more, $preview, $pages, $multipage;\n\n\t$post = get_post();\n\n\tif ( null === $more_link_text ) {\n\t\t$more_link_text = sprintf(\n\t\t\t'<span aria-label=\"%1$s\">%2$s</span>',\n\t\t\tsprintf(\n\t\t\t\t/* translators: %s: Name of current post */\n\t\t\t\t__( 'Continue reading %s' ),\n\t\t\t\tthe_title_attribute( array( 'echo' => false ) )\n\t\t\t),\n\t\t\t__( '(more&hellip;)' )\n\t\t);\n\t}\n\n\t$output = '';\n\t$has_teaser = false;\n\n\t// If post password required and it doesn't match the cookie.\n\tif ( post_password_required( $post ) )\n\t\treturn get_the_password_form( $post );\n\n\tif ( $page > count( $pages ) ) // if the requested page doesn't exist\n\t\t$page = count( $pages ); // give them the highest numbered page that DOES exist\n\n\t$content = $pages[$page - 1];\n\tif ( preg_match( '/<!--more(.*?)?-->/', $content, $matches ) ) {\n\t\t$content = explode( $matches[0], $content, 2 );\n\t\tif ( ! empty( $matches[1] ) && ! empty( $more_link_text ) )\n\t\t\t$more_link_text = strip_tags( wp_kses_no_null( trim( $matches[1] ) ) );\n\n\t\t$has_teaser = true;\n\t} else {\n\t\t$content = array( $content );\n\t}\n\n\tif ( false !== strpos( $post->post_content, '<!--noteaser-->' ) && ( ! $multipage || $page == 1 ) )\n\t\t$strip_teaser = true;\n\n\t$teaser = $content[0];\n\n\tif ( $more && $strip_teaser && $has_teaser )\n\t\t$teaser = '';\n\n\t$output .= $teaser;\n\n\tif ( count( $content ) > 1 ) {\n\t\tif ( $more ) {\n\t\t\t$output .= '<span id=\"more-' . $post->ID . '\"></span>' . $content[1];\n\t\t} else {\n\t\t\tif ( ! empty( $more_link_text ) )\n\n\t\t\t\t/**\n\t\t\t\t * Filters the Read More link text.\n\t\t\t\t *\n\t\t\t\t * @since 2.8.0\n\t\t\t\t *\n\t\t\t\t * @param string $more_link_element Read More link element.\n\t\t\t\t * @param string $more_link_text    Read More text.\n\t\t\t\t */\n\t\t\t\t$output .= apply_filters( 'the_content_more_link', ' <a href=\"' . get_permalink() . \"#more-{$post->ID}\\\" class=\\\"more-link\\\">$more_link_text</a>\", $more_link_text );\n\t\t\t$output = force_balance_tags( $output );\n\t\t}\n\t}\n\n\tif ( $preview ) // Preview fix for JavaScript bug with foreign languages.\n\t\t$output =\tpreg_replace_callback( '/\\%u([0-9A-F]{4})/', '_convert_urlencoded_to_entities', $output );\n\n\treturn $output;\n}\n\n/**\n * Preview fix for JavaScript bug with foreign languages.\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $match Match array from preg_replace_callback.\n * @return string\n */\nfunction _convert_urlencoded_to_entities( $match ) {\n\treturn '&#' . base_convert( $match[1], 16, 10 ) . ';';\n}\n\n/**\n * Display the post excerpt.\n *\n * @since 0.71\n */\nfunction the_excerpt() {\n\n\t/**\n\t * Filters the displayed post excerpt.\n\t *\n\t * @since 0.71\n\t *\n\t * @see get_the_excerpt()\n\t *\n\t * @param string $post_excerpt The post excerpt.\n\t */\n\techo apply_filters( 'the_excerpt', get_the_excerpt() );\n}\n\n/**\n * Retrieves the post excerpt.\n *\n * @since 0.71\n * @since 4.5.0 Introduced the `$post` parameter.\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string Post excerpt.\n */\nfunction get_the_excerpt( $post = null ) {\n\tif ( is_bool( $post ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '2.3' );\n\t}\n\n\t$post = get_post( $post );\n\tif ( empty( $post ) ) {\n\t\treturn '';\n\t}\n\n\tif ( post_password_required( $post ) ) {\n\t\treturn __( 'There is no excerpt because this is a protected post.' );\n\t}\n\n\t/**\n\t * Filters the retrieved post excerpt.\n\t *\n\t * @since 1.2.0\n\t * @since 4.5.0 Introduced the `$post` parameter.\n\t *\n\t * @param string $post_excerpt The post excerpt.\n\t * @param WP_Post $post Post object.\n\t */\n\treturn apply_filters( 'get_the_excerpt', $post->post_excerpt, $post );\n}\n\n/**\n * Whether post has excerpt.\n *\n * @since 2.3.0\n *\n * @param int|WP_Post $id Optional. Post ID or post object.\n * @return bool\n */\nfunction has_excerpt( $id = 0 ) {\n\t$post = get_post( $id );\n\treturn ( !empty( $post->post_excerpt ) );\n}\n\n/**\n * Display the classes for the post div.\n *\n * @since 2.7.0\n *\n * @param string|array $class   One or more classes to add to the class list.\n * @param int|WP_Post  $post_id Optional. Post ID or post object. Defaults to the global `$post`.\n */\nfunction post_class( $class = '', $post_id = null ) {\n\t// Separates classes with a single space, collates classes for post DIV\n\techo 'class=\"' . join( ' ', get_post_class( $class, $post_id ) ) . '\"';\n}\n\n/**\n * Retrieves the classes for the post div as an array.\n *\n * The class names are many. If the post is a sticky, then the 'sticky'\n * class name. The class 'hentry' is always added to each post. If the post has a\n * post thumbnail, 'has-post-thumbnail' is added as a class. For each taxonomy that\n * the post belongs to, a class will be added of the format '{$taxonomy}-{$slug}' -\n * eg 'category-foo' or 'my_custom_taxonomy-bar'.\n *\n * The 'post_tag' taxonomy is a special\n * case; the class has the 'tag-' prefix instead of 'post_tag-'. All classes are\n * passed through the filter, {@see 'post_class'}, with the list of classes, followed by\n * $class parameter value, with the post ID as the last parameter.\n *\n * @since 2.7.0\n * @since 4.2.0 Custom taxonomy classes were added.\n *\n * @param string|array $class   One or more classes to add to the class list.\n * @param int|WP_Post  $post_id Optional. Post ID or post object.\n * @return array Array of classes.\n */\nfunction get_post_class( $class = '', $post_id = null ) {\n\t$post = get_post( $post_id );\n\n\t$classes = array();\n\n\tif ( $class ) {\n\t\tif ( ! is_array( $class ) ) {\n\t\t\t$class = preg_split( '#\\s+#', $class );\n\t\t}\n\t\t$classes = array_map( 'esc_attr', $class );\n\t} else {\n\t\t// Ensure that we always coerce class to being an array.\n\t\t$class = array();\n\t}\n\n\tif ( ! $post ) {\n\t\treturn $classes;\n\t}\n\n\t$classes[] = 'post-' . $post->ID;\n\tif ( ! is_admin() )\n\t\t$classes[] = $post->post_type;\n\t$classes[] = 'type-' . $post->post_type;\n\t$classes[] = 'status-' . $post->post_status;\n\n\t// Post Format\n\tif ( post_type_supports( $post->post_type, 'post-formats' ) ) {\n\t\t$post_format = get_post_format( $post->ID );\n\n\t\tif ( $post_format && !is_wp_error($post_format) )\n\t\t\t$classes[] = 'format-' . sanitize_html_class( $post_format );\n\t\telse\n\t\t\t$classes[] = 'format-standard';\n\t}\n\n\t$post_password_required = post_password_required( $post->ID );\n\n\t// Post requires password.\n\tif ( $post_password_required ) {\n\t\t$classes[] = 'post-password-required';\n\t} elseif ( ! empty( $post->post_password ) ) {\n\t\t$classes[] = 'post-password-protected';\n\t}\n\n\t// Post thumbnails.\n\tif ( current_theme_supports( 'post-thumbnails' ) && has_post_thumbnail( $post->ID ) && ! is_attachment( $post ) && ! $post_password_required ) {\n\t\t$classes[] = 'has-post-thumbnail';\n\t}\n\n\t// sticky for Sticky Posts\n\tif ( is_sticky( $post->ID ) ) {\n\t\tif ( is_home() && ! is_paged() ) {\n\t\t\t$classes[] = 'sticky';\n\t\t} elseif ( is_admin() ) {\n\t\t\t$classes[] = 'status-sticky';\n\t\t}\n\t}\n\n\t// hentry for hAtom compliance\n\t$classes[] = 'hentry';\n\n\t// All public taxonomies\n\t$taxonomies = get_taxonomies( array( 'public' => true ) );\n\tforeach ( (array) $taxonomies as $taxonomy ) {\n\t\tif ( is_object_in_taxonomy( $post->post_type, $taxonomy ) ) {\n\t\t\tforeach ( (array) get_the_terms( $post->ID, $taxonomy ) as $term ) {\n\t\t\t\tif ( empty( $term->slug ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$term_class = sanitize_html_class( $term->slug, $term->term_id );\n\t\t\t\tif ( is_numeric( $term_class ) || ! trim( $term_class, '-' ) ) {\n\t\t\t\t\t$term_class = $term->term_id;\n\t\t\t\t}\n\n\t\t\t\t// 'post_tag' uses the 'tag' prefix for backward compatibility.\n\t\t\t\tif ( 'post_tag' == $taxonomy ) {\n\t\t\t\t\t$classes[] = 'tag-' . $term_class;\n\t\t\t\t} else {\n\t\t\t\t\t$classes[] = sanitize_html_class( $taxonomy . '-' . $term_class, $taxonomy . '-' . $term->term_id );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$classes = array_map( 'esc_attr', $classes );\n\n\t/**\n\t * Filters the list of CSS classes for the current post.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param array $classes An array of post classes.\n\t * @param array $class   An array of additional classes added to the post.\n\t * @param int   $post_id The post ID.\n\t */\n\t$classes = apply_filters( 'post_class', $classes, $class, $post->ID );\n\n\treturn array_unique( $classes );\n}\n\n/**\n * Display the classes for the body element.\n *\n * @since 2.8.0\n *\n * @param string|array $class One or more classes to add to the class list.\n */\nfunction body_class( $class = '' ) {\n\t// Separates classes with a single space, collates classes for body element\n\techo 'class=\"' . join( ' ', get_body_class( $class ) ) . '\"';\n}\n\n/**\n * Retrieve the classes for the body element as an array.\n *\n * @since 2.8.0\n *\n * @global WP_Query $wp_query\n *\n * @param string|array $class One or more classes to add to the class list.\n * @return array Array of classes.\n */\nfunction get_body_class( $class = '' ) {\n\tglobal $wp_query;\n\n\t$classes = array();\n\n\tif ( is_rtl() )\n\t\t$classes[] = 'rtl';\n\n\tif ( is_front_page() )\n\t\t$classes[] = 'home';\n\tif ( is_home() )\n\t\t$classes[] = 'blog';\n\tif ( is_archive() )\n\t\t$classes[] = 'archive';\n\tif ( is_date() )\n\t\t$classes[] = 'date';\n\tif ( is_search() ) {\n\t\t$classes[] = 'search';\n\t\t$classes[] = $wp_query->posts ? 'search-results' : 'search-no-results';\n\t}\n\tif ( is_paged() )\n\t\t$classes[] = 'paged';\n\tif ( is_attachment() )\n\t\t$classes[] = 'attachment';\n\tif ( is_404() )\n\t\t$classes[] = 'error404';\n\n\tif ( is_single() ) {\n\t\t$post_id = $wp_query->get_queried_object_id();\n\t\t$post = $wp_query->get_queried_object();\n\n\t\t$classes[] = 'single';\n\t\tif ( isset( $post->post_type ) ) {\n\t\t\t$classes[] = 'single-' . sanitize_html_class($post->post_type, $post_id);\n\t\t\t$classes[] = 'postid-' . $post_id;\n\n\t\t\t// Post Format\n\t\t\tif ( post_type_supports( $post->post_type, 'post-formats' ) ) {\n\t\t\t\t$post_format = get_post_format( $post->ID );\n\n\t\t\t\tif ( $post_format && !is_wp_error($post_format) )\n\t\t\t\t\t$classes[] = 'single-format-' . sanitize_html_class( $post_format );\n\t\t\t\telse\n\t\t\t\t\t$classes[] = 'single-format-standard';\n\t\t\t}\n\t\t}\n\n\t\tif ( is_attachment() ) {\n\t\t\t$mime_type = get_post_mime_type($post_id);\n\t\t\t$mime_prefix = array( 'application/', 'image/', 'text/', 'audio/', 'video/', 'music/' );\n\t\t\t$classes[] = 'attachmentid-' . $post_id;\n\t\t\t$classes[] = 'attachment-' . str_replace( $mime_prefix, '', $mime_type );\n\t\t}\n\t} elseif ( is_archive() ) {\n\t\tif ( is_post_type_archive() ) {\n\t\t\t$classes[] = 'post-type-archive';\n\t\t\t$post_type = get_query_var( 'post_type' );\n\t\t\tif ( is_array( $post_type ) )\n\t\t\t\t$post_type = reset( $post_type );\n\t\t\t$classes[] = 'post-type-archive-' . sanitize_html_class( $post_type );\n\t\t} elseif ( is_author() ) {\n\t\t\t$author = $wp_query->get_queried_object();\n\t\t\t$classes[] = 'author';\n\t\t\tif ( isset( $author->user_nicename ) ) {\n\t\t\t\t$classes[] = 'author-' . sanitize_html_class( $author->user_nicename, $author->ID );\n\t\t\t\t$classes[] = 'author-' . $author->ID;\n\t\t\t}\n\t\t} elseif ( is_category() ) {\n\t\t\t$cat = $wp_query->get_queried_object();\n\t\t\t$classes[] = 'category';\n\t\t\tif ( isset( $cat->term_id ) ) {\n\t\t\t\t$cat_class = sanitize_html_class( $cat->slug, $cat->term_id );\n\t\t\t\tif ( is_numeric( $cat_class ) || ! trim( $cat_class, '-' ) ) {\n\t\t\t\t\t$cat_class = $cat->term_id;\n\t\t\t\t}\n\n\t\t\t\t$classes[] = 'category-' . $cat_class;\n\t\t\t\t$classes[] = 'category-' . $cat->term_id;\n\t\t\t}\n\t\t} elseif ( is_tag() ) {\n\t\t\t$tag = $wp_query->get_queried_object();\n\t\t\t$classes[] = 'tag';\n\t\t\tif ( isset( $tag->term_id ) ) {\n\t\t\t\t$tag_class = sanitize_html_class( $tag->slug, $tag->term_id );\n\t\t\t\tif ( is_numeric( $tag_class ) || ! trim( $tag_class, '-' ) ) {\n\t\t\t\t\t$tag_class = $tag->term_id;\n\t\t\t\t}\n\n\t\t\t\t$classes[] = 'tag-' . $tag_class;\n\t\t\t\t$classes[] = 'tag-' . $tag->term_id;\n\t\t\t}\n\t\t} elseif ( is_tax() ) {\n\t\t\t$term = $wp_query->get_queried_object();\n\t\t\tif ( isset( $term->term_id ) ) {\n\t\t\t\t$term_class = sanitize_html_class( $term->slug, $term->term_id );\n\t\t\t\tif ( is_numeric( $term_class ) || ! trim( $term_class, '-' ) ) {\n\t\t\t\t\t$term_class = $term->term_id;\n\t\t\t\t}\n\n\t\t\t\t$classes[] = 'tax-' . sanitize_html_class( $term->taxonomy );\n\t\t\t\t$classes[] = 'term-' . $term_class;\n\t\t\t\t$classes[] = 'term-' . $term->term_id;\n\t\t\t}\n\t\t}\n\t} elseif ( is_page() ) {\n\t\t$classes[] = 'page';\n\n\t\t$page_id = $wp_query->get_queried_object_id();\n\n\t\t$post = get_post($page_id);\n\n\t\t$classes[] = 'page-id-' . $page_id;\n\n\t\tif ( get_pages( array( 'parent' => $page_id, 'number' => 1 ) ) ) {\n\t\t\t$classes[] = 'page-parent';\n\t\t}\n\n\t\tif ( $post->post_parent ) {\n\t\t\t$classes[] = 'page-child';\n\t\t\t$classes[] = 'parent-pageid-' . $post->post_parent;\n\t\t}\n\t\tif ( is_page_template() ) {\n\t\t\t$classes[] = 'page-template';\n\n\t\t\t$template_slug  = get_page_template_slug( $page_id );\n\t\t\t$template_parts = explode( '/', $template_slug );\n\n\t\t\tforeach ( $template_parts as $part ) {\n\t\t\t\t$classes[] = 'page-template-' . sanitize_html_class( str_replace( array( '.', '/' ), '-', basename( $part, '.php' ) ) );\n\t\t\t}\n\t\t\t$classes[] = 'page-template-' . sanitize_html_class( str_replace( '.', '-', $template_slug ) );\n\t\t} else {\n\t\t\t$classes[] = 'page-template-default';\n\t\t}\n\t}\n\n\tif ( is_user_logged_in() )\n\t\t$classes[] = 'logged-in';\n\n\tif ( is_admin_bar_showing() ) {\n\t\t$classes[] = 'admin-bar';\n\t\t$classes[] = 'no-customize-support';\n\t}\n\n\tif ( get_background_color() !== get_theme_support( 'custom-background', 'default-color' ) || get_background_image() )\n\t\t$classes[] = 'custom-background';\n\n\tif ( has_custom_logo() ) {\n\t\t$classes[] = 'wp-custom-logo';\n\t}\n\n\t$page = $wp_query->get( 'page' );\n\n\tif ( ! $page || $page < 2 )\n\t\t$page = $wp_query->get( 'paged' );\n\n\tif ( $page && $page > 1 && ! is_404() ) {\n\t\t$classes[] = 'paged-' . $page;\n\n\t\tif ( is_single() )\n\t\t\t$classes[] = 'single-paged-' . $page;\n\t\telseif ( is_page() )\n\t\t\t$classes[] = 'page-paged-' . $page;\n\t\telseif ( is_category() )\n\t\t\t$classes[] = 'category-paged-' . $page;\n\t\telseif ( is_tag() )\n\t\t\t$classes[] = 'tag-paged-' . $page;\n\t\telseif ( is_date() )\n\t\t\t$classes[] = 'date-paged-' . $page;\n\t\telseif ( is_author() )\n\t\t\t$classes[] = 'author-paged-' . $page;\n\t\telseif ( is_search() )\n\t\t\t$classes[] = 'search-paged-' . $page;\n\t\telseif ( is_post_type_archive() )\n\t\t\t$classes[] = 'post-type-paged-' . $page;\n\t}\n\n\tif ( ! empty( $class ) ) {\n\t\tif ( !is_array( $class ) )\n\t\t\t$class = preg_split( '#\\s+#', $class );\n\t\t$classes = array_merge( $classes, $class );\n\t} else {\n\t\t// Ensure that we always coerce class to being an array.\n\t\t$class = array();\n\t}\n\n\t$classes = array_map( 'esc_attr', $classes );\n\n\t/**\n\t * Filters the list of CSS body classes for the current post or page.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array $classes An array of body classes.\n\t * @param array $class   An array of additional classes added to the body.\n\t */\n\t$classes = apply_filters( 'body_class', $classes, $class );\n\n\treturn array_unique( $classes );\n}\n\n/**\n * Whether post requires password and correct password has been provided.\n *\n * @since 2.7.0\n *\n * @param int|WP_Post|null $post An optional post. Global $post used if not provided.\n * @return bool false if a password is not required or the correct password cookie is present, true otherwise.\n */\nfunction post_password_required( $post = null ) {\n\t$post = get_post($post);\n\n\tif ( empty( $post->post_password ) )\n\t\treturn false;\n\n\tif ( ! isset( $_COOKIE['wp-postpass_' . COOKIEHASH] ) )\n\t\treturn true;\n\n\trequire_once ABSPATH . WPINC . '/class-phpass.php';\n\t$hasher = new PasswordHash( 8, true );\n\n\t$hash = wp_unslash( $_COOKIE[ 'wp-postpass_' . COOKIEHASH ] );\n\tif ( 0 !== strpos( $hash, '$P$B' ) )\n\t\treturn true;\n\n\treturn ! $hasher->CheckPassword( $post->post_password, $hash );\n}\n\n//\n// Page Template Functions for usage in Themes\n//\n\n/**\n * The formatted output of a list of pages.\n *\n * Displays page links for paginated posts (i.e. includes the <!--nextpage-->.\n * Quicktag one or more times). This tag must be within The Loop.\n *\n * @since 1.2.0\n *\n * @global int $page\n * @global int $numpages\n * @global int $multipage\n * @global int $more\n *\n * @param string|array $args {\n *     Optional. Array or string of default arguments.\n *\n *     @type string       $before           HTML or text to prepend to each link. Default is `<p> Pages:`.\n *     @type string       $after            HTML or text to append to each link. Default is `</p>`.\n *     @type string       $link_before      HTML or text to prepend to each link, inside the `<a>` tag.\n *                                          Also prepended to the current item, which is not linked. Default empty.\n *     @type string       $link_after       HTML or text to append to each Pages link inside the `<a>` tag.\n *                                          Also appended to the current item, which is not linked. Default empty.\n *     @type string       $next_or_number   Indicates whether page numbers should be used. Valid values are number\n *                                          and next. Default is 'number'.\n *     @type string       $separator        Text between pagination links. Default is ' '.\n *     @type string       $nextpagelink     Link text for the next page link, if available. Default is 'Next Page'.\n *     @type string       $previouspagelink Link text for the previous page link, if available. Default is 'Previous Page'.\n *     @type string       $pagelink         Format string for page numbers. The % in the parameter string will be\n *                                          replaced with the page number, so 'Page %' generates \"Page 1\", \"Page 2\", etc.\n *                                          Defaults to '%', just the page number.\n *     @type int|bool     $echo             Whether to echo or not. Accepts 1|true or 0|false. Default 1|true.\n * }\n * @return string Formatted output in HTML.\n */\nfunction wp_link_pages( $args = '' ) {\n\tglobal $page, $numpages, $multipage, $more;\n\n\t$defaults = array(\n\t\t'before'           => '<p>' . __( 'Pages:' ),\n\t\t'after'            => '</p>',\n\t\t'link_before'      => '',\n\t\t'link_after'       => '',\n\t\t'next_or_number'   => 'number',\n\t\t'separator'        => ' ',\n\t\t'nextpagelink'     => __( 'Next page' ),\n\t\t'previouspagelink' => __( 'Previous page' ),\n\t\t'pagelink'         => '%',\n\t\t'echo'             => 1\n\t);\n\n\t$params = wp_parse_args( $args, $defaults );\n\n\t/**\n\t * Filters the arguments used in retrieving page links for paginated posts.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param array $params An array of arguments for page links for paginated posts.\n\t */\n\t$r = apply_filters( 'wp_link_pages_args', $params );\n\n\t$output = '';\n\tif ( $multipage ) {\n\t\tif ( 'number' == $r['next_or_number'] ) {\n\t\t\t$output .= $r['before'];\n\t\t\tfor ( $i = 1; $i <= $numpages; $i++ ) {\n\t\t\t\t$link = $r['link_before'] . str_replace( '%', $i, $r['pagelink'] ) . $r['link_after'];\n\t\t\t\tif ( $i != $page || ! $more && 1 == $page ) {\n\t\t\t\t\t$link = _wp_link_page( $i ) . $link . '</a>';\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * Filters the HTML output of individual page number links.\n\t\t\t\t *\n\t\t\t\t * @since 3.6.0\n\t\t\t\t *\n\t\t\t\t * @param string $link The page number HTML output.\n\t\t\t\t * @param int    $i    Page number for paginated posts' page links.\n\t\t\t\t */\n\t\t\t\t$link = apply_filters( 'wp_link_pages_link', $link, $i );\n\n\t\t\t\t// Use the custom links separator beginning with the second link.\n\t\t\t\t$output .= ( 1 === $i ) ? ' ' : $r['separator'];\n\t\t\t\t$output .= $link;\n\t\t\t}\n\t\t\t$output .= $r['after'];\n\t\t} elseif ( $more ) {\n\t\t\t$output .= $r['before'];\n\t\t\t$prev = $page - 1;\n\t\t\tif ( $prev > 0 ) {\n\t\t\t\t$link = _wp_link_page( $prev ) . $r['link_before'] . $r['previouspagelink'] . $r['link_after'] . '</a>';\n\n\t\t\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t\t\t$output .= apply_filters( 'wp_link_pages_link', $link, $prev );\n\t\t\t}\n\t\t\t$next = $page + 1;\n\t\t\tif ( $next <= $numpages ) {\n\t\t\t\tif ( $prev ) {\n\t\t\t\t\t$output .= $r['separator'];\n\t\t\t\t}\n\t\t\t\t$link = _wp_link_page( $next ) . $r['link_before'] . $r['nextpagelink'] . $r['link_after'] . '</a>';\n\n\t\t\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t\t\t$output .= apply_filters( 'wp_link_pages_link', $link, $next );\n\t\t\t}\n\t\t\t$output .= $r['after'];\n\t\t}\n\t}\n\n\t/**\n\t * Filters the HTML output of page links for paginated posts.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $output HTML output of paginated posts' page links.\n\t * @param array  $args   An array of arguments.\n\t */\n\t$html = apply_filters( 'wp_link_pages', $output, $args );\n\n\tif ( $r['echo'] ) {\n\t\techo $html;\n\t}\n\treturn $html;\n}\n\n/**\n * Helper function for wp_link_pages().\n *\n * @since 3.1.0\n * @access private\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int $i Page number.\n * @return string Link.\n */\nfunction _wp_link_page( $i ) {\n\tglobal $wp_rewrite;\n\t$post = get_post();\n\t$query_args = array();\n\n\tif ( 1 == $i ) {\n\t\t$url = get_permalink();\n\t} else {\n\t\tif ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )\n\t\t\t$url = add_query_arg( 'page', $i, get_permalink() );\n\t\telseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )\n\t\t\t$url = trailingslashit(get_permalink()) . user_trailingslashit(\"$wp_rewrite->pagination_base/\" . $i, 'single_paged');\n\t\telse\n\t\t\t$url = trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged');\n\t}\n\n\tif ( is_preview() ) {\n\n\t\tif ( ( 'draft' !== $post->post_status ) && isset( $_GET['preview_id'], $_GET['preview_nonce'] ) ) {\n\t\t\t$query_args['preview_id'] = wp_unslash( $_GET['preview_id'] );\n\t\t\t$query_args['preview_nonce'] = wp_unslash( $_GET['preview_nonce'] );\n\t\t}\n\n\t\t$url = get_preview_post_link( $post, $query_args, $url );\n\t}\n\n\treturn '<a href=\"' . esc_url( $url ) . '\">';\n}\n\n//\n// Post-meta: Custom per-post fields.\n//\n\n/**\n * Retrieve post custom meta data field.\n *\n * @since 1.5.0\n *\n * @param string $key Meta data key name.\n * @return false|string|array Array of values or single value, if only one element exists. False will be returned if key does not exist.\n */\nfunction post_custom( $key = '' ) {\n\t$custom = get_post_custom();\n\n\tif ( !isset( $custom[$key] ) )\n\t\treturn false;\n\telseif ( 1 == count($custom[$key]) )\n\t\treturn $custom[$key][0];\n\telse\n\t\treturn $custom[$key];\n}\n\n/**\n * Display list of post custom fields.\n *\n * @since 1.2.0\n *\n * @internal This will probably change at some point...\n *\n */\nfunction the_meta() {\n\tif ( $keys = get_post_custom_keys() ) {\n\t\techo \"<ul class='post-meta'>\\n\";\n\t\tforeach ( (array) $keys as $key ) {\n\t\t\t$keyt = trim($key);\n\t\t\tif ( is_protected_meta( $keyt, 'post' ) )\n\t\t\t\tcontinue;\n\t\t\t$values = array_map('trim', get_post_custom_values($key));\n\t\t\t$value = implode($values,', ');\n\n\t\t\t/**\n\t\t\t * Filters the HTML output of the li element in the post custom fields list.\n\t\t\t *\n\t\t\t * @since 2.2.0\n\t\t\t *\n\t\t\t * @param string $html  The HTML output for the li element.\n\t\t\t * @param string $key   Meta key.\n\t\t\t * @param string $value Meta value.\n\t\t\t */\n\t\t\techo apply_filters( 'the_meta_key', \"<li><span class='post-meta-key'>$key:</span> $value</li>\\n\", $key, $value );\n\t\t}\n\t\techo \"</ul>\\n\";\n\t}\n}\n\n//\n// Pages\n//\n\n/**\n * Retrieve or display list of pages as a dropdown (select list).\n *\n * @since 2.1.0\n * @since 4.2.0 The `$value_field` argument was added.\n * @since 4.3.0 The `$class` argument was added.\n *\n * @param array|string $args {\n *     Optional. Array or string of arguments to generate a pages drop-down element.\n *\n *     @type int          $depth                 Maximum depth. Default 0.\n *     @type int          $child_of              Page ID to retrieve child pages of. Default 0.\n *     @type int|string   $selected              Value of the option that should be selected. Default 0.\n *     @type bool|int     $echo                  Whether to echo or return the generated markup. Accepts 0, 1,\n *                                               or their bool equivalents. Default 1.\n *     @type string       $name                  Value for the 'name' attribute of the select element.\n *                                               Default 'page_id'.\n *     @type string       $id                    Value for the 'id' attribute of the select element.\n *     @type string       $class                 Value for the 'class' attribute of the select element. Default: none.\n *                                               Defaults to the value of `$name`.\n *     @type string       $show_option_none      Text to display for showing no pages. Default empty (does not display).\n *     @type string       $show_option_no_change Text to display for \"no change\" option. Default empty (does not display).\n *     @type string       $option_none_value     Value to use when no page is selected. Default empty.\n *     @type string       $value_field           Post field used to populate the 'value' attribute of the option\n *                                               elements. Accepts any valid post field. Default 'ID'.\n * }\n * @return string HTML content, if not displaying.\n */\nfunction wp_dropdown_pages( $args = '' ) {\n\t$defaults = array(\n\t\t'depth' => 0, 'child_of' => 0,\n\t\t'selected' => 0, 'echo' => 1,\n\t\t'name' => 'page_id', 'id' => '',\n\t\t'class' => '',\n\t\t'show_option_none' => '', 'show_option_no_change' => '',\n\t\t'option_none_value' => '',\n\t\t'value_field' => 'ID',\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$pages = get_pages( $r );\n\t$output = '';\n\t// Back-compat with old system where both id and name were based on $name argument\n\tif ( empty( $r['id'] ) ) {\n\t\t$r['id'] = $r['name'];\n\t}\n\n\tif ( ! empty( $pages ) ) {\n\t\t$class = '';\n\t\tif ( ! empty( $r['class'] ) ) {\n\t\t\t$class = \" class='\" . esc_attr( $r['class'] ) . \"'\";\n\t\t}\n\n\t\t$output = \"<select name='\" . esc_attr( $r['name'] ) . \"'\" . $class . \" id='\" . esc_attr( $r['id'] ) . \"'>\\n\";\n\t\tif ( $r['show_option_no_change'] ) {\n\t\t\t$output .= \"\\t<option value=\\\"-1\\\">\" . $r['show_option_no_change'] . \"</option>\\n\";\n\t\t}\n\t\tif ( $r['show_option_none'] ) {\n\t\t\t$output .= \"\\t<option value=\\\"\" . esc_attr( $r['option_none_value'] ) . '\">' . $r['show_option_none'] . \"</option>\\n\";\n\t\t}\n\t\t$output .= walk_page_dropdown_tree( $pages, $r['depth'], $r );\n\t\t$output .= \"</select>\\n\";\n\t}\n\n\t/**\n\t * Filters the HTML output of a list of pages as a drop down.\n\t *\n\t * @since 2.1.0\n\t * @since 4.4.0 `$r` and `$pages` added as arguments.\n\t *\n\t * @param string $output HTML output for drop down list of pages.\n\t * @param array  $r      The parsed arguments array.\n\t * @param array  $pages  List of WP_Post objects returned by `get_pages()`\n \t */\n\t$html = apply_filters( 'wp_dropdown_pages', $output, $r, $pages );\n\n\tif ( $r['echo'] ) {\n\t\techo $html;\n\t}\n\treturn $html;\n}\n\n/**\n * Retrieve or display list of pages in list (li) format.\n *\n * @since 1.5.0\n *\n * @see get_pages()\n *\n * @global WP_Query $wp_query\n *\n * @param array|string $args {\n *     Array or string of arguments. Optional.\n *\n *     @type int    $child_of     Display only the sub-pages of a single page by ID. Default 0 (all pages).\n *     @type string $authors      Comma-separated list of author IDs. Default empty (all authors).\n *     @type string $date_format  PHP date format to use for the listed pages. Relies on the 'show_date' parameter.\n *                                Default is the value of 'date_format' option.\n *     @type int    $depth        Number of levels in the hierarchy of pages to include in the generated list.\n *                                Accepts -1 (any depth), 0 (all pages), 1 (top-level pages only), and n (pages to\n *                                the given n depth). Default 0.\n *     @type bool   $echo         Whether or not to echo the list of pages. Default true.\n *     @type string $exclude      Comma-separated list of page IDs to exclude. Default empty.\n *     @type array  $include      Comma-separated list of page IDs to include. Default empty.\n *     @type string $link_after   Text or HTML to follow the page link label. Default null.\n *     @type string $link_before  Text or HTML to precede the page link label. Default null.\n *     @type string $post_type    Post type to query for. Default 'page'.\n *     @type string $post_status  Comma-separated list of post statuses to include. Default 'publish'.\n *     @type string $show_date\t  Whether to display the page publish or modified date for each page. Accepts\n *                                'modified' or any other value. An empty value hides the date. Default empty.\n *     @type string $sort_column  Comma-separated list of column names to sort the pages by. Accepts 'post_author',\n *                                'post_date', 'post_title', 'post_name', 'post_modified', 'post_modified_gmt',\n *                                'menu_order', 'post_parent', 'ID', 'rand', or 'comment_count'. Default 'post_title'.\n *     @type string $title_li     List heading. Passing a null or empty value will result in no heading, and the list\n *                                will not be wrapped with unordered list `<ul>` tags. Default 'Pages'.\n *     @type Walker $walker       Walker instance to use for listing pages. Default empty (Walker_Page).\n * }\n * @return string|void HTML list of pages.\n */\nfunction wp_list_pages( $args = '' ) {\n\t$defaults = array(\n\t\t'depth' => 0, 'show_date' => '',\n\t\t'date_format' => get_option( 'date_format' ),\n\t\t'child_of' => 0, 'exclude' => '',\n\t\t'title_li' => __( 'Pages' ), 'echo' => 1,\n\t\t'authors' => '', 'sort_column' => 'menu_order, post_title',\n\t\t'link_before' => '', 'link_after' => '', 'walker' => '',\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$output = '';\n\t$current_page = 0;\n\n\t// sanitize, mostly to keep spaces out\n\t$r['exclude'] = preg_replace( '/[^0-9,]/', '', $r['exclude'] );\n\n\t// Allow plugins to filter an array of excluded pages (but don't put a nullstring into the array)\n\t$exclude_array = ( $r['exclude'] ) ? explode( ',', $r['exclude'] ) : array();\n\n\t/**\n\t * Filters the array of pages to exclude from the pages list.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param array $exclude_array An array of page IDs to exclude.\n\t */\n\t$r['exclude'] = implode( ',', apply_filters( 'wp_list_pages_excludes', $exclude_array ) );\n\n\t// Query pages.\n\t$r['hierarchical'] = 0;\n\t$pages = get_pages( $r );\n\n\tif ( ! empty( $pages ) ) {\n\t\tif ( $r['title_li'] ) {\n\t\t\t$output .= '<li class=\"pagenav\">' . $r['title_li'] . '<ul>';\n\t\t}\n\t\tglobal $wp_query;\n\t\tif ( is_page() || is_attachment() || $wp_query->is_posts_page ) {\n\t\t\t$current_page = get_queried_object_id();\n\t\t} elseif ( is_singular() ) {\n\t\t\t$queried_object = get_queried_object();\n\t\t\tif ( is_post_type_hierarchical( $queried_object->post_type ) ) {\n\t\t\t\t$current_page = $queried_object->ID;\n\t\t\t}\n\t\t}\n\n\t\t$output .= walk_page_tree( $pages, $r['depth'], $current_page, $r );\n\n\t\tif ( $r['title_li'] ) {\n\t\t\t$output .= '</ul></li>';\n\t\t}\n\t}\n\n\t/**\n\t * Filters the HTML output of the pages to list.\n\t *\n\t * @since 1.5.1\n\t * @since 4.4.0 `$pages` added as arguments.\n\t *\n\t * @see wp_list_pages()\n\t *\n\t * @param string $output HTML output of the pages list.\n\t * @param array  $r      An array of page-listing arguments.\n\t * @param array  $pages  List of WP_Post objects returned by `get_pages()`\n\t */\n\t$html = apply_filters( 'wp_list_pages', $output, $r, $pages );\n\n\tif ( $r['echo'] ) {\n\t\techo $html;\n\t} else {\n\t\treturn $html;\n\t}\n}\n\n/**\n * Displays or retrieves a list of pages with an optional home link.\n *\n * The arguments are listed below and part of the arguments are for wp_list_pages()} function.\n * Check that function for more info on those arguments.\n *\n * @since 2.7.0\n * @since 4.4.0 Added `menu_id`, `container`, `before`, `after`, and `walker` arguments.\n *\n * @param array|string $args {\n *     Optional. Arguments to generate a page menu. See wp_list_pages() for additional arguments.\n *\n *     @type string          $sort_column How to short the list of pages. Accepts post column names.\n *                                        Default 'menu_order, post_title'.\n *     @type string          $menu_id     ID for the div containing the page list. Default is empty string.\n *     @type string          $menu_class  Class to use for the element containing the page list. Default 'menu'.\n *     @type string          $container   Element to use for the element containing the page list. Default 'div'.\n *     @type bool            $echo        Whether to echo the list or return it. Accepts true (echo) or false (return).\n *                                        Default true.\n *     @type int|bool|string $show_home   Whether to display the link to the home page. Can just enter the text\n *                                        you'd like shown for the home link. 1|true defaults to 'Home'.\n *     @type string          $link_before The HTML or text to prepend to $show_home text. Default empty.\n *     @type string          $link_after  The HTML or text to append to $show_home text. Default empty.\n *     @type string          $before      The HTML or text to prepend to the menu. Default is '<ul>'.\n *     @type string          $after       The HTML or text to append to the menu. Default is '</ul>'.\n *     @type Walker          $walker      Walker instance to use for listing pages. Default empty (Walker_Page).\n * }\n * @return string|void HTML menu\n */\nfunction wp_page_menu( $args = array() ) {\n\t$defaults = array(\n\t\t'sort_column' => 'menu_order, post_title',\n\t\t'menu_id'     => '',\n\t\t'menu_class'  => 'menu',\n\t\t'container'   => 'div',\n\t\t'echo'        => true,\n\t\t'link_before' => '',\n\t\t'link_after'  => '',\n\t\t'before'      => '<ul>',\n\t\t'after'       => '</ul>',\n\t\t'walker'      => '',\n\t);\n\t$args = wp_parse_args( $args, $defaults );\n\n\t/**\n\t * Filters the arguments used to generate a page-based menu.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @see wp_page_menu()\n\t *\n\t * @param array $args An array of page menu arguments.\n\t */\n\t$args = apply_filters( 'wp_page_menu_args', $args );\n\n\t$menu = '';\n\n\t$list_args = $args;\n\n\t// Show Home in the menu\n\tif ( ! empty($args['show_home']) ) {\n\t\tif ( true === $args['show_home'] || '1' === $args['show_home'] || 1 === $args['show_home'] )\n\t\t\t$text = __('Home');\n\t\telse\n\t\t\t$text = $args['show_home'];\n\t\t$class = '';\n\t\tif ( is_front_page() && !is_paged() )\n\t\t\t$class = 'class=\"current_page_item\"';\n\t\t$menu .= '<li ' . $class . '><a href=\"' . home_url( '/' ) . '\">' . $args['link_before'] . $text . $args['link_after'] . '</a></li>';\n\t\t// If the front page is a page, add it to the exclude list\n\t\tif (get_option('show_on_front') == 'page') {\n\t\t\tif ( !empty( $list_args['exclude'] ) ) {\n\t\t\t\t$list_args['exclude'] .= ',';\n\t\t\t} else {\n\t\t\t\t$list_args['exclude'] = '';\n\t\t\t}\n\t\t\t$list_args['exclude'] .= get_option('page_on_front');\n\t\t}\n\t}\n\n\t$list_args['echo'] = false;\n\t$list_args['title_li'] = '';\n\t$menu .= str_replace( array( \"\\r\", \"\\n\", \"\\t\" ), '', wp_list_pages($list_args) );\n\n\t$container = sanitize_text_field( $args['container'] );\n\n\t// Fallback in case `wp_nav_menu()` was called without a container.\n\tif ( empty( $container ) ) {\n\t\t$container = 'div';\n\t}\n\n\tif ( $menu ) {\n\n\t\t// wp_nav_menu doesn't set before and after\n\t\tif ( isset( $args['fallback_cb'] ) &&\n\t\t\t'wp_page_menu' === $args['fallback_cb'] &&\n\t\t\t'ul' !== $container ) {\n\t\t\t$args['before'] = '<ul>';\n\t\t\t$args['after'] = '</ul>';\n\t\t}\n\n\t\t$menu = $args['before'] . $menu . $args['after'];\n\t}\n\n\t$attrs = '';\n\tif ( ! empty( $args['menu_id'] ) ) {\n\t\t$attrs .= ' id=\"' . esc_attr( $args['menu_id'] ) . '\"';\n\t}\n\n\tif ( ! empty( $args['menu_class'] ) ) {\n\t\t$attrs .= ' class=\"' . esc_attr( $args['menu_class'] ) . '\"';\n\t}\n\n\t$menu = \"<{$container}{$attrs}>\" . $menu . \"</{$container}>\\n\";\n\n\t/**\n\t * Filters the HTML output of a page-based menu.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @see wp_page_menu()\n\t *\n\t * @param string $menu The HTML output.\n\t * @param array  $args An array of arguments.\n\t */\n\t$menu = apply_filters( 'wp_page_menu', $menu, $args );\n\tif ( $args['echo'] )\n\t\techo $menu;\n\telse\n\t\treturn $menu;\n}\n\n//\n// Page helpers\n//\n\n/**\n * Retrieve HTML list content for page list.\n *\n * @uses Walker_Page to create HTML list content.\n * @since 2.1.0\n *\n * @param array $pages\n * @param int   $depth\n * @param int   $current_page\n * @param array $r\n * @return string\n */\nfunction walk_page_tree( $pages, $depth, $current_page, $r ) {\n\tif ( empty($r['walker']) )\n\t\t$walker = new Walker_Page;\n\telse\n\t\t$walker = $r['walker'];\n\n\tforeach ( (array) $pages as $page ) {\n\t\tif ( $page->post_parent )\n\t\t\t$r['pages_with_children'][ $page->post_parent ] = true;\n\t}\n\n\t$args = array($pages, $depth, $r, $current_page);\n\treturn call_user_func_array(array($walker, 'walk'), $args);\n}\n\n/**\n * Retrieve HTML dropdown (select) content for page list.\n *\n * @uses Walker_PageDropdown to create HTML dropdown content.\n * @since 2.1.0\n * @see Walker_PageDropdown::walk() for parameters and return description.\n *\n * @return string\n */\nfunction walk_page_dropdown_tree() {\n\t$args = func_get_args();\n\tif ( empty($args[2]['walker']) ) // the user's options are the third parameter\n\t\t$walker = new Walker_PageDropdown;\n\telse\n\t\t$walker = $args[2]['walker'];\n\n\treturn call_user_func_array(array($walker, 'walk'), $args);\n}\n\n//\n// Attachments\n//\n\n/**\n * Display an attachment page link using an image or icon.\n *\n * @since 2.0.0\n *\n * @param int|WP_Post $id Optional. Post ID or post object.\n * @param bool        $fullsize     Optional, default is false. Whether to use full size.\n * @param bool        $deprecated   Deprecated. Not used.\n * @param bool        $permalink    Optional, default is false. Whether to include permalink.\n */\nfunction the_attachment_link( $id = 0, $fullsize = false, $deprecated = false, $permalink = false ) {\n\tif ( !empty( $deprecated ) )\n\t\t_deprecated_argument( __FUNCTION__, '2.5' );\n\n\tif ( $fullsize )\n\t\techo wp_get_attachment_link($id, 'full', $permalink);\n\telse\n\t\techo wp_get_attachment_link($id, 'thumbnail', $permalink);\n}\n\n/**\n * Retrieve an attachment page link using an image or icon, if possible.\n *\n * @since 2.5.0\n * @since 4.4.0 The `$id` parameter can now accept either a post ID or `WP_Post` object.\n *\n * @param int|WP_Post  $id        Optional. Post ID or post object.\n * @param string|array $size      Optional. Image size. Accepts any valid image size, or an array\n *                                of width and height values in pixels (in that order).\n *                                Default 'thumbnail'.\n * @param bool         $permalink Optional, Whether to add permalink to image. Default false.\n * @param bool         $icon      Optional. Whether the attachment is an icon. Default false.\n * @param string|false $text      Optional. Link text to use. Activated by passing a string, false otherwise.\n *                                Default false.\n * @param array|string $attr      Optional. Array or string of attributes. Default empty.\n * @return string HTML content.\n */\nfunction wp_get_attachment_link( $id = 0, $size = 'thumbnail', $permalink = false, $icon = false, $text = false, $attr = '' ) {\n\t$_post = get_post( $id );\n\n\tif ( empty( $_post ) || ( 'attachment' != $_post->post_type ) || ! $url = wp_get_attachment_url( $_post->ID ) )\n\t\treturn __( 'Missing Attachment' );\n\n\tif ( $permalink )\n\t\t$url = get_attachment_link( $_post->ID );\n\n\tif ( $text ) {\n\t\t$link_text = $text;\n\t} elseif ( $size && 'none' != $size ) {\n\t\t$link_text = wp_get_attachment_image( $_post->ID, $size, $icon, $attr );\n\t} else {\n\t\t$link_text = '';\n\t}\n\n\tif ( trim( $link_text ) == '' )\n\t\t$link_text = $_post->post_title;\n\n\t/**\n\t * Filters a retrieved attachment page link.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param string       $link_html The page link HTML output.\n\t * @param int          $id        Post ID.\n\t * @param string|array $size      Size of the image. Image size or array of width and height values (in that order).\n\t *                                Default 'thumbnail'.\n\t * @param bool         $permalink Whether to add permalink to image. Default false.\n\t * @param bool         $icon      Whether to include an icon. Default false.\n\t * @param string|bool  $text      If string, will be link text. Default false.\n\t */\n\treturn apply_filters( 'wp_get_attachment_link', \"<a href='$url'>$link_text</a>\", $id, $size, $permalink, $icon, $text );\n}\n\n/**\n * Wrap attachment in paragraph tag before content.\n *\n * @since 2.0.0\n *\n * @param string $content\n * @return string\n */\nfunction prepend_attachment($content) {\n\t$post = get_post();\n\n\tif ( empty($post->post_type) || $post->post_type != 'attachment' )\n\t\treturn $content;\n\n\tif ( wp_attachment_is( 'video', $post ) ) {\n\t\t$meta = wp_get_attachment_metadata( get_the_ID() );\n\t\t$atts = array( 'src' => wp_get_attachment_url() );\n\t\tif ( ! empty( $meta['width'] ) && ! empty( $meta['height'] ) ) {\n\t\t\t$atts['width'] = (int) $meta['width'];\n\t\t\t$atts['height'] = (int) $meta['height'];\n\t\t}\n\t\tif ( has_post_thumbnail() ) {\n\t\t\t$atts['poster'] = wp_get_attachment_url( get_post_thumbnail_id() );\n\t\t}\n\t\t$p = wp_video_shortcode( $atts );\n\t} elseif ( wp_attachment_is( 'audio', $post ) ) {\n\t\t$p = wp_audio_shortcode( array( 'src' => wp_get_attachment_url() ) );\n\t} else {\n\t\t$p = '<p class=\"attachment\">';\n\t\t// show the medium sized image representation of the attachment if available, and link to the raw file\n\t\t$p .= wp_get_attachment_link(0, 'medium', false);\n\t\t$p .= '</p>';\n\t}\n\n\t/**\n\t * Filters the attachment markup to be prepended to the post content.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @see prepend_attachment()\n\t *\n\t * @param string $p The attachment HTML output.\n\t */\n\t$p = apply_filters( 'prepend_attachment', $p );\n\n\treturn \"$p\\n$content\";\n}\n\n//\n// Misc\n//\n\n/**\n * Retrieve protected post password form content.\n *\n * @since 1.0.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string HTML content for password form for password protected post.\n */\nfunction get_the_password_form( $post = 0 ) {\n\t$post = get_post( $post );\n\t$label = 'pwbox-' . ( empty($post->ID) ? rand() : $post->ID );\n\t$output = '<form action=\"' . esc_url( site_url( 'wp-login.php?action=postpass', 'login_post' ) ) . '\" class=\"post-password-form\" method=\"post\">\n\t<p>' . __( 'This content is password protected. To view it please enter your password below:' ) . '</p>\n\t<p><label for=\"' . $label . '\">' . __( 'Password:' ) . ' <input name=\"post_password\" id=\"' . $label . '\" type=\"password\" size=\"20\" /></label> <input type=\"submit\" name=\"Submit\" value=\"' . esc_attr_x( 'Enter', 'post password form' ) . '\" /></p></form>\n\t';\n\n\t/**\n\t * Filters the HTML output for the protected post password form.\n\t *\n\t * If modifying the password field, please note that the core database schema\n\t * limits the password field to 20 characters regardless of the value of the\n\t * size attribute in the form input.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param string $output The password form HTML output.\n\t */\n\treturn apply_filters( 'the_password_form', $output );\n}\n\n/**\n * Whether currently in a page template.\n *\n * This template tag allows you to determine if you are in a page template.\n * You can optionally provide a template name or array of template names\n * and then the check will be specific to that template.\n *\n * @since 2.5.0\n * @since 4.2.0 The `$template` parameter was changed to also accept an array of page templates.\n *\n * @param string|array $template The specific template name or array of templates to match.\n * @return bool True on success, false on failure.\n */\nfunction is_page_template( $template = '' ) {\n\tif ( ! is_page() )\n\t\treturn false;\n\n\t$page_template = get_page_template_slug( get_queried_object_id() );\n\n\tif ( empty( $template ) )\n\t\treturn (bool) $page_template;\n\n\tif ( $template == $page_template )\n\t\treturn true;\n\n\tif ( is_array( $template ) ) {\n\t\tif ( ( in_array( 'default', $template, true ) && ! $page_template )\n\t\t\t|| in_array( $page_template, $template, true )\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn ( 'default' === $template && ! $page_template );\n}\n\n/**\n * Get the specific template name for a page.\n *\n * @since 3.4.0\n *\n * @param int $post_id Optional. The page ID to check. Defaults to the current post, when used in the loop.\n * @return string|false Page template filename. Returns an empty string when the default page template\n * \tis in use. Returns false if the post is not a page.\n */\nfunction get_page_template_slug( $post_id = null ) {\n\t$post = get_post( $post_id );\n\tif ( ! $post || 'page' != $post->post_type )\n\t\treturn false;\n\t$template = get_post_meta( $post->ID, '_wp_page_template', true );\n\tif ( ! $template || 'default' == $template )\n\t\treturn '';\n\treturn $template;\n}\n\n/**\n * Retrieve formatted date timestamp of a revision (linked to that revisions's page).\n *\n * @since 2.6.0\n *\n * @param int|object $revision Revision ID or revision object.\n * @param bool       $link     Optional, default is true. Link to revisions's page?\n * @return string|false i18n formatted datetimestamp or localized 'Current Revision'.\n */\nfunction wp_post_revision_title( $revision, $link = true ) {\n\tif ( !$revision = get_post( $revision ) )\n\t\treturn $revision;\n\n\tif ( !in_array( $revision->post_type, array( 'post', 'page', 'revision' ) ) )\n\t\treturn false;\n\n\t/* translators: revision date format, see https://secure.php.net/date */\n\t$datef = _x( 'F j, Y @ H:i:s', 'revision date format' );\n\t/* translators: 1: date */\n\t$autosavef = _x( '%1$s [Autosave]', 'post revision title extra' );\n\t/* translators: 1: date */\n\t$currentf  = _x( '%1$s [Current Revision]', 'post revision title extra' );\n\n\t$date = date_i18n( $datef, strtotime( $revision->post_modified ) );\n\tif ( $link && current_user_can( 'edit_post', $revision->ID ) && $link = get_edit_post_link( $revision->ID ) )\n\t\t$date = \"<a href='$link'>$date</a>\";\n\n\tif ( !wp_is_post_revision( $revision ) )\n\t\t$date = sprintf( $currentf, $date );\n\telseif ( wp_is_post_autosave( $revision ) )\n\t\t$date = sprintf( $autosavef, $date );\n\n\treturn $date;\n}\n\n/**\n * Retrieve formatted date timestamp of a revision (linked to that revisions's page).\n *\n * @since 3.6.0\n *\n * @param int|object $revision Revision ID or revision object.\n * @param bool       $link     Optional, default is true. Link to revisions's page?\n * @return string|false gravatar, user, i18n formatted datetimestamp or localized 'Current Revision'.\n */\nfunction wp_post_revision_title_expanded( $revision, $link = true ) {\n\tif ( !$revision = get_post( $revision ) )\n\t\treturn $revision;\n\n\tif ( !in_array( $revision->post_type, array( 'post', 'page', 'revision' ) ) )\n\t\treturn false;\n\n\t$author = get_the_author_meta( 'display_name', $revision->post_author );\n\t/* translators: revision date format, see https://secure.php.net/date */\n\t$datef = _x( 'F j, Y @ H:i:s', 'revision date format' );\n\n\t$gravatar = get_avatar( $revision->post_author, 24 );\n\n\t$date = date_i18n( $datef, strtotime( $revision->post_modified ) );\n\tif ( $link && current_user_can( 'edit_post', $revision->ID ) && $link = get_edit_post_link( $revision->ID ) )\n\t\t$date = \"<a href='$link'>$date</a>\";\n\n\t$revision_date_author = sprintf(\n\t\t/* translators: post revision title: 1: author avatar, 2: author name, 3: time ago, 4: date */\n\t\t_x( '%1$s %2$s, %3$s ago (%4$s)', 'post revision title' ),\n\t\t$gravatar,\n\t\t$author,\n\t\thuman_time_diff( strtotime( $revision->post_modified ), current_time( 'timestamp' ) ),\n\t\t$date\n\t);\n\n\t$autosavef = __( '%1$s [Autosave]' );\n\t$currentf  = __( '%1$s [Current Revision]' );\n\n\tif ( !wp_is_post_revision( $revision ) )\n\t\t$revision_date_author = sprintf( $currentf, $revision_date_author );\n\telseif ( wp_is_post_autosave( $revision ) )\n\t\t$revision_date_author = sprintf( $autosavef, $revision_date_author );\n\n\t/**\n\t * Filters the formatted author and date for a revision.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string  $revision_date_author The formatted string.\n\t * @param WP_Post $revision             The revision object.\n\t * @param bool    $link                 Whether to link to the revisions page, as passed into\n\t *                                      wp_post_revision_title_expanded().\n\t */\n\treturn apply_filters( 'wp_post_revision_title_expanded', $revision_date_author, $revision, $link );\n}\n\n/**\n * Display list of a post's revisions.\n *\n * Can output either a UL with edit links or a TABLE with diff interface, and\n * restore action links.\n *\n * @since 2.6.0\n *\n * @param int|WP_Post $post_id Optional. Post ID or WP_Post object. Default is global $post.\n * @param string      $type    'all' (default), 'revision' or 'autosave'\n */\nfunction wp_list_post_revisions( $post_id = 0, $type = 'all' ) {\n\tif ( ! $post = get_post( $post_id ) )\n\t\treturn;\n\n\t// $args array with (parent, format, right, left, type) deprecated since 3.6\n\tif ( is_array( $type ) ) {\n\t\t$type = ! empty( $type['type'] ) ? $type['type']  : $type;\n\t\t_deprecated_argument( __FUNCTION__, '3.6' );\n\t}\n\n\tif ( ! $revisions = wp_get_post_revisions( $post->ID ) )\n\t\treturn;\n\n\t$rows = '';\n\tforeach ( $revisions as $revision ) {\n\t\tif ( ! current_user_can( 'read_post', $revision->ID ) )\n\t\t\tcontinue;\n\n\t\t$is_autosave = wp_is_post_autosave( $revision );\n\t\tif ( ( 'revision' === $type && $is_autosave ) || ( 'autosave' === $type && ! $is_autosave ) )\n\t\t\tcontinue;\n\n\t\t$rows .= \"\\t<li>\" . wp_post_revision_title_expanded( $revision ) . \"</li>\\n\";\n\t}\n\n\techo \"<div class='hide-if-js'><p>\" . __( 'JavaScript must be enabled to use this feature.' ) . \"</p></div>\\n\";\n\n\techo \"<ul class='post-revisions hide-if-no-js'>\\n\";\n\techo $rows;\n\techo \"</ul>\";\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.6-alpha-37756';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 36686;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4310-20160418';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * List Table API: WP_Media_List_Table class\n *\n * @package WordPress\n * @subpackage Administration\n * @since 3.1.0\n */\n\n/**\n * Core class used to implement displaying media items in a list table.\n *\n * @since 3.1.0\n * @access private\n *\n * @see WP_List_Table\n */\nclass WP_Media_List_Table extends WP_List_Table {\n\t/**\n\t * Holds the number of pending comments for each post.\n\t *\n\t * @since 4.4.0\n\t * @var array\n\t * @access protected\n\t */\n\tprotected $comment_pending_count = array();\n\n\tprivate $detached;\n\n\tprivate $is_trash;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t *\n\t * @see WP_List_Table::__construct() for more information on default arguments.\n\t *\n\t * @param array $args An associative array of arguments.\n\t */\n\tpublic function __construct( $args = array() ) {\n\t\t$this->detached = ( isset( $_REQUEST['attachment-filter'] ) && 'detached' === $_REQUEST['attachment-filter'] );\n\n\t\t$this->modes = array(\n\t\t\t'list' => __( 'List View' ),\n\t\t\t'grid' => __( 'Grid View' )\n\t\t);\n\n\t\tparent::__construct( array(\n\t\t\t'plural' => 'media',\n\t\t\t'screen' => isset( $args['screen'] ) ? $args['screen'] : null,\n\t\t) );\n\t}\n\n\t/**\n\t *\n\t * @return bool\n\t */\n\tpublic function ajax_user_can() {\n\t\treturn current_user_can('upload_files');\n\t}\n\n\t/**\n\t *\n\t * @global WP_Query $wp_query\n\t * @global array    $post_mime_types\n\t * @global array    $avail_post_mime_types\n\t * @global string   $mode\n\t */\n\tpublic function prepare_items() {\n\t\tglobal $wp_query, $post_mime_types, $avail_post_mime_types, $mode;\n\n\t\tlist( $post_mime_types, $avail_post_mime_types ) = wp_edit_attachments_query( $_REQUEST );\n\n \t\t$this->is_trash = isset( $_REQUEST['attachment-filter'] ) && 'trash' === $_REQUEST['attachment-filter'];\n\n \t\t$mode = empty( $_REQUEST['mode'] ) ? 'list' : $_REQUEST['mode'];\n\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $wp_query->found_posts,\n\t\t\t'total_pages' => $wp_query->max_num_pages,\n\t\t\t'per_page' => $wp_query->query_vars['posts_per_page'],\n\t\t) );\n\t}\n\n\t/**\n\t * @global array $post_mime_types\n\t * @global array $avail_post_mime_types\n\t * @return array\n\t */\n\tprotected function get_views() {\n\t\tglobal $post_mime_types, $avail_post_mime_types;\n\n\t\t$type_links = array();\n\n\t\t$filter = empty( $_GET['attachment-filter'] ) ? '' : $_GET['attachment-filter'];\n\n\t\t$type_links['all'] = sprintf(\n\t\t\t'<option value=\"\"%s>%s</option>',\n\t\t\tselected( $filter, true, false ),\n\t\t\t__( 'All media items' )\n\t\t);\n\n\t\tforeach ( $post_mime_types as $mime_type => $label ) {\n\t\t\tif ( ! wp_match_mime_types( $mime_type, $avail_post_mime_types ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$selected = selected(\n\t\t\t\t$filter && 0 === strpos( $filter, 'post_mime_type:' ) &&\n\t\t\t\t\twp_match_mime_types( $mime_type, str_replace( 'post_mime_type:', '', $filter ) ),\n\t\t\t\ttrue,\n\t\t\t\tfalse\n\t\t\t);\n\n\t\t\t$type_links[$mime_type] = sprintf(\n\t\t\t\t'<option value=\"post_mime_type:%s\"%s>%s</option>',\n\t\t\t\tesc_attr( $mime_type ),\n\t\t\t\t$selected,\n\t\t\t\t$label[0]\n\t\t\t);\n\t\t}\n\t\t$type_links['detached'] = '<option value=\"detached\"' . ( $this->detached ? ' selected=\"selected\"' : '' ) . '>' . __( 'Unattached' ) . '</option>';\n\n\t\tif ( $this->is_trash || ( defined( 'MEDIA_TRASH') && MEDIA_TRASH ) ) {\n\t\t\t$type_links['trash'] = sprintf(\n\t\t\t\t'<option value=\"trash\"%s>%s</option>',\n\t\t\t\tselected( 'trash' === $filter, true, false ),\n\t\t\t\t_x( 'Trash', 'attachment filter' )\n\t\t\t);\n\t\t}\n\t\treturn $type_links;\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_bulk_actions() {\n\t\t$actions = array();\n\t\tif ( MEDIA_TRASH ) {\n\t\t\tif ( $this->is_trash ) {\n\t\t\t\t$actions['untrash'] = __( 'Restore' );\n\t\t\t\t$actions['delete'] = __( 'Delete Permanently' );\n\t\t\t} else {\n\t\t\t\t$actions['trash'] = _x( 'Trash', 'verb' );\n\t\t\t}\n\t\t} else {\n\t\t\t$actions['delete'] = __( 'Delete Permanently' );\n\t\t}\n\n\t\tif ( $this->detached )\n\t\t\t$actions['attach'] = __( 'Attach' );\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * @param string $which\n\t */\n\tprotected function extra_tablenav( $which ) {\n\t\tif ( 'bar' !== $which ) {\n\t\t\treturn;\n\t\t}\n?>\n\t\t<div class=\"actions\">\n<?php\n\t\tif ( ! is_singular() ) {\n\t\t\tif ( ! $this->is_trash ) {\n\t\t\t\t$this->months_dropdown( 'attachment' );\n\t\t\t}\n\n\t\t\t/** This action is documented in wp-admin/includes/class-wp-posts-list-table.php */\n\t\t\tdo_action( 'restrict_manage_posts', $this->screen->post_type );\n\n\t\t\tsubmit_button( __( 'Filter' ), 'button', 'filter_action', false, array( 'id' => 'post-query-submit' ) );\n\t\t}\n\n\t\tif ( $this->is_trash && current_user_can( 'edit_others_posts' ) ) {\n\t\t\tsubmit_button( __( 'Empty Trash' ), 'apply', 'delete_all', false );\n\t\t} ?>\n\t\t</div>\n<?php\n\t}\n\n\t/**\n\t *\n\t * @return string\n\t */\n\tpublic function current_action() {\n\t\tif ( isset( $_REQUEST['found_post_id'] ) && isset( $_REQUEST['media'] ) )\n\t\t\treturn 'attach';\n\n\t\tif ( isset( $_REQUEST['parent_post_id'] ) && isset( $_REQUEST['media'] ) )\n\t\t\treturn 'detach';\n\n\t\tif ( isset( $_REQUEST['delete_all'] ) || isset( $_REQUEST['delete_all2'] ) )\n\t\t\treturn 'delete_all';\n\n\t\treturn parent::current_action();\n\t}\n\n\t/**\n\t *\n\t * @return bool\n\t */\n\tpublic function has_items() {\n\t\treturn have_posts();\n\t}\n\n\t/**\n\t * @access public\n\t */\n\tpublic function no_items() {\n\t\t_e( 'No media files found.' );\n\t}\n\n\t/**\n\t * Override parent views so we can use the filter bar display.\n\t *\n\t * @global string $mode\n\t */\n\tpublic function views() {\n\t\tglobal $mode;\n\n\t\t$views = $this->get_views();\n\n\t\t$this->screen->render_screen_reader_content( 'heading_views' );\n?>\n<div class=\"wp-filter\">\n\t<div class=\"filter-items\">\n\t\t<?php $this->view_switcher( $mode ); ?>\n\n\t\t<label for=\"attachment-filter\" class=\"screen-reader-text\"><?php _e( 'Filter by type' ); ?></label>\n\t\t<select class=\"attachment-filters\" name=\"attachment-filter\" id=\"attachment-filter\">\n\t\t\t<?php\n\t\t\tif ( ! empty( $views ) ) {\n\t\t\t\tforeach ( $views as $class => $view ) {\n\t\t\t\t\techo \"\\t$view\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t?>\n\t\t</select>\n\n<?php\n\t\t$this->extra_tablenav( 'bar' );\n\n\t\t/** This filter is documented in wp-admin/inclues/class-wp-list-table.php */\n\t\t$views = apply_filters( \"views_{$this->screen->id}\", array() );\n\n\t\t// Back compat for pre-4.0 view links.\n\t\tif ( ! empty( $views ) ) {\n\t\t\techo '<ul class=\"filter-links\">';\n\t\t\tforeach ( $views as $class => $view ) {\n\t\t\t\techo \"<li class='$class'>$view</li>\";\n\t\t\t}\n\t\t\techo '</ul>';\n\t\t}\n?>\n\t</div>\n\n\t<div class=\"search-form\">\n\t\t<label for=\"media-search-input\" class=\"screen-reader-text\"><?php esc_html_e( 'Search Media' ); ?></label>\n\t\t<input type=\"search\" placeholder=\"<?php esc_attr_e( 'Search' ) ?>\" id=\"media-search-input\" class=\"search\" name=\"s\" value=\"<?php _admin_search_query(); ?>\"></div>\n\t</div>\n\t<?php\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tpublic function get_columns() {\n\t\t$posts_columns = array();\n\t\t$posts_columns['cb'] = '<input type=\"checkbox\" />';\n\t\t/* translators: column name */\n\t\t$posts_columns['title'] = _x( 'File', 'column name' );\n\t\t$posts_columns['author'] = __( 'Author' );\n\n\t\t$taxonomies = get_taxonomies_for_attachments( 'objects' );\n\t\t$taxonomies = wp_filter_object_list( $taxonomies, array( 'show_admin_column' => true ), 'and', 'name' );\n\n\t\t/**\n\t\t * Filters the taxonomy columns for attachments in the Media list table.\n\t\t *\n\t\t * @since 3.5.0\n\t\t *\n\t\t * @param array  $taxonomies An array of registered taxonomies to show for attachments.\n\t\t * @param string $post_type  The post type. Default 'attachment'.\n\t\t */\n\t\t$taxonomies = apply_filters( 'manage_taxonomies_for_attachment_columns', $taxonomies, 'attachment' );\n\t\t$taxonomies = array_filter( $taxonomies, 'taxonomy_exists' );\n\n\t\tforeach ( $taxonomies as $taxonomy ) {\n\t\t\tif ( 'category' === $taxonomy ) {\n\t\t\t\t$column_key = 'categories';\n\t\t\t} elseif ( 'post_tag' === $taxonomy ) {\n\t\t\t\t$column_key = 'tags';\n\t\t\t} else {\n\t\t\t\t$column_key = 'taxonomy-' . $taxonomy;\n\t\t\t}\n\t\t\t$posts_columns[ $column_key ] = get_taxonomy( $taxonomy )->labels->name;\n\t\t}\n\n\t\t/* translators: column name */\n\t\tif ( !$this->detached ) {\n\t\t\t$posts_columns['parent'] = _x( 'Uploaded to', 'column name' );\n\t\t\tif ( post_type_supports( 'attachment', 'comments' ) )\n\t\t\t\t$posts_columns['comments'] = '<span class=\"vers comment-grey-bubble\" title=\"' . esc_attr__( 'Comments' ) . '\"><span class=\"screen-reader-text\">' . __( 'Comments' ) . '</span></span>';\n\t\t}\n\t\t/* translators: column name */\n\t\t$posts_columns['date'] = _x( 'Date', 'column name' );\n\t\t/**\n\t\t * Filters the Media list table columns.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $posts_columns An array of columns displayed in the Media list table.\n\t\t * @param bool  $detached      Whether the list table contains media not attached\n\t\t *                             to any posts. Default true.\n\t\t */\n\t\treturn apply_filters( 'manage_media_columns', $posts_columns, $this->detached );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_sortable_columns() {\n\t\treturn array(\n\t\t\t'title'    => 'title',\n\t\t\t'author'   => 'author',\n\t\t\t'parent'   => 'parent',\n\t\t\t'comments' => 'comment_count',\n\t\t\t'date'     => array( 'date', true ),\n\t\t);\n\t}\n\n\t/**\n\t * Handles the checkbox column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_cb( $post ) {\n\t\tif ( current_user_can( 'edit_post', $post->ID ) ) { ?>\n\t\t\t<label class=\"screen-reader-text\" for=\"cb-select-<?php echo $post->ID; ?>\"><?php\n\t\t\t\techo sprintf( __( 'Select %s' ), _draft_or_post_title() );\n\t\t\t?></label>\n\t\t\t<input type=\"checkbox\" name=\"media[]\" id=\"cb-select-<?php echo $post->ID; ?>\" value=\"<?php echo $post->ID; ?>\" />\n\t\t<?php }\n\t}\n\n\t/**\n\t * Handles the title column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_title( $post ) {\n\t\tlist( $mime ) = explode( '/', $post->post_mime_type );\n\n\t\t$title = _draft_or_post_title();\n\t\t$thumb = wp_get_attachment_image( $post->ID, array( 60, 60 ), true, array( 'alt' => '' ) );\n\t\t$link_start = $link_end = '';\n\n\t\tif ( current_user_can( 'edit_post', $post->ID ) && ! $this->is_trash ) {\n\t\t\t$link_start = sprintf(\n\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">',\n\t\t\t\tget_edit_post_link( $post->ID ),\n\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\tesc_attr( sprintf( __( '&#8220;%s&#8221; (Edit)' ), $title ) )\n\t\t\t);\n\t\t\t$link_end = '</a>';\n\t\t}\n\n\t\t$class = $thumb ? ' class=\"has-media-icon\"' : '';\n\t\t?>\n\t\t<strong<?php echo $class; ?>>\n\t\t\t<?php\n\t\t\techo $link_start;\n\t\t\tif ( $thumb ) : ?>\n\t\t\t\t<span class=\"media-icon <?php echo sanitize_html_class( $mime . '-icon' ); ?>\"><?php echo $thumb; ?></span>\n\t\t\t<?php endif;\n\t\t\techo $title . $link_end;\n\t\t\t_media_states( $post );\n\t\t\t?>\n\t\t</strong>\n\t\t<p class=\"filename\">\n\t\t\t<span class=\"screen-reader-text\"><?php _e( 'File name:' ); ?> </span>\n\t\t\t<?php\n\t\t\t$file = get_attached_file( $post->ID );\n\t\t\techo esc_html( wp_basename( $file ) );\n\t\t\t?>\n\t\t</p>\n\t\t<?php\n\t}\n\n\t/**\n\t * Handles the author column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_author( $post ) {\n\t\tprintf( '<a href=\"%s\">%s</a>',\n\t\t\tesc_url( add_query_arg( array( 'author' => get_the_author_meta('ID') ), 'upload.php' ) ),\n\t\t\tget_the_author()\n\t\t);\n\t}\n\n\t/**\n\t * Handles the description column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_desc( $post ) {\n\t\techo has_excerpt() ? $post->post_excerpt : '';\n\t}\n\n\t/**\n\t * Handles the date column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_date( $post ) {\n\t\tif ( '0000-00-00 00:00:00' === $post->post_date ) {\n\t\t\t$h_time = __( 'Unpublished' );\n\t\t} else {\n\t\t\t$m_time = $post->post_date;\n\t\t\t$time = get_post_time( 'G', true, $post, false );\n\t\t\tif ( ( abs( $t_diff = time() - $time ) ) < DAY_IN_SECONDS ) {\n\t\t\t\tif ( $t_diff < 0 ) {\n\t\t\t\t\t$h_time = sprintf( __( '%s from now' ), human_time_diff( $time ) );\n\t\t\t\t} else {\n\t\t\t\t\t$h_time = sprintf( __( '%s ago' ), human_time_diff( $time ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$h_time = mysql2date( __( 'Y/m/d' ), $m_time );\n\t\t\t}\n\t\t}\n\n\t\techo $h_time;\n\t}\n\n\t/**\n\t * Handles the parent column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_parent( $post ) {\n\t\t$user_can_edit = current_user_can( 'edit_post', $post->ID );\n\n\t\tif ( $post->post_parent > 0 ) {\n\t\t\t$parent = get_post( $post->post_parent );\n\t\t} else {\n\t\t\t$parent = false;\n\t\t}\n\n\t\tif ( $parent ) {\n\t\t\t$title = _draft_or_post_title( $post->post_parent );\n\t\t\t$parent_type = get_post_type_object( $parent->post_type );\n?>\n\t\t\t<strong>\n\t\t\t<?php if ( $parent_type && $parent_type->show_ui && current_user_can( 'edit_post', $post->post_parent ) ) { ?>\n\t\t\t\t<a href=\"<?php echo get_edit_post_link( $post->post_parent ); ?>\">\n\t\t\t\t\t<?php echo $title ?></a><?php\n\t\t\t} else {\n\t\t\t\techo $title;\n\t\t\t} ?></strong>\n\t\t\t<br />\n\t\t\t<?php\n\t\t\tif ( $user_can_edit ):\n\t\t\t\t$detach_url = add_query_arg( array(\n\t\t\t\t\t'parent_post_id' => $post->post_parent,\n\t\t\t\t\t'media[]' => $post->ID,\n\t\t\t\t\t'_wpnonce' => wp_create_nonce( 'bulk-' . $this->_args['plural'] )\n\t\t\t\t), 'upload.php' );\n\t\t\t\tprintf(\n\t\t\t\t\t'<a href=\"%s\" class=\"hide-if-no-js detach-from-parent\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t$detach_url,\n\t\t\t\t\t/* translators: %s: title of the post the attachment is attached to */\n\t\t\t\t\tesc_attr( sprintf( __( 'Detach from &#8220;%s&#8221;' ), $title ) ),\n\t\t\t\t\t__( 'Detach' )\n\t\t\t\t);\n\t\t\tendif;\n\t\t} else {\n\t\t\t_e( '(Unattached)' ); ?><br />\n\t\t\t<?php if ( $user_can_edit ) {\n\t\t\t\t$title = _draft_or_post_title( $post->post_parent );\n\t\t\t\tprintf(\n\t\t\t\t\t'<a href=\"#the-list\" onclick=\"findPosts.open( \\'media[]\\', \\'%s\\' ); return false;\" class=\"hide-if-no-js\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t$post->ID,\n\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Attach &#8220;%s&#8221; to existing content' ), $title ) ),\n\t\t\t\t\t__( 'Attach' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles the comments column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_comments( $post ) {\n\t\techo '<div class=\"post-com-count-wrapper\">';\n\n\t\tif ( isset( $this->comment_pending_count[ $post->ID ] ) ) {\n\t\t\t$pending_comments = $this->comment_pending_count[ $post->ID ];\n\t\t} else {\n\t\t\t$pending_comments = get_pending_comments_num( $post->ID );\n\t\t}\n\n\t\t$this->comments_bubble( $post->ID, $pending_comments );\n\n\t\techo '</div>';\n\t}\n\n\t/**\n\t * Handles output for the default column.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post        The current WP_Post object.\n\t * @param string  $column_name Current column name.\n\t */\n\tpublic function column_default( $post, $column_name ) {\n\t\tif ( 'categories' === $column_name ) {\n\t\t\t$taxonomy = 'category';\n\t\t} elseif ( 'tags' === $column_name ) {\n\t\t\t$taxonomy = 'post_tag';\n\t\t} elseif ( 0 === strpos( $column_name, 'taxonomy-' ) ) {\n\t\t\t$taxonomy = substr( $column_name, 9 );\n\t\t} else {\n\t\t\t$taxonomy = false;\n\t\t}\n\n\t\tif ( $taxonomy ) {\n\t\t\t$terms = get_the_terms( $post->ID, $taxonomy );\n\t\t\tif ( is_array( $terms ) ) {\n\t\t\t\t$out = array();\n\t\t\t\tforeach ( $terms as $t ) {\n\t\t\t\t\t$posts_in_term_qv = array();\n\t\t\t\t\t$posts_in_term_qv['taxonomy'] = $taxonomy;\n\t\t\t\t\t$posts_in_term_qv['term'] = $t->slug;\n\n\t\t\t\t\t$out[] = sprintf( '<a href=\"%s\">%s</a>',\n\t\t\t\t\t\tesc_url( add_query_arg( $posts_in_term_qv, 'upload.php' ) ),\n\t\t\t\t\t\tesc_html( sanitize_term_field( 'name', $t->name, $t->term_id, $taxonomy, 'display' ) )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t/* translators: used between list items, there is a space after the comma */\n\t\t\t\techo join( __( ', ' ), $out );\n\t\t\t} else {\n\t\t\t\techo '<span aria-hidden=\"true\">&#8212;</span><span class=\"screen-reader-text\">' . get_taxonomy( $taxonomy )->labels->no_terms . '</span>';\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Fires for each custom column in the Media list table.\n\t\t *\n\t\t * Custom columns are registered using the {@see 'manage_media_columns'} filter.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $column_name Name of the custom column.\n\t\t * @param int    $post_id     Attachment ID.\n\t\t */\n\t\tdo_action( 'manage_media_custom_column', $column_name, $post->ID );\n\t}\n\n\t/**\n\t *\n\t * @global WP_Post $post\n\t */\n\tpublic function display_rows() {\n\t\tglobal $post, $wp_query;\n\n\t\t$post_ids = wp_list_pluck( $wp_query->posts, 'ID' );\n\t\treset( $wp_query->posts );\n\n\t\t$this->comment_pending_count = get_pending_comments_num( $post_ids );\n\n\t\tadd_filter( 'the_title','esc_html' );\n\n\t\twhile ( have_posts() ) : the_post();\n\t\t\tif (\n\t\t\t\t( $this->is_trash && $post->post_status != 'trash' )\n\t\t\t\t|| ( ! $this->is_trash && $post->post_status === 'trash' )\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$post_owner = ( get_current_user_id() == $post->post_author ) ? 'self' : 'other';\n\t\t?>\n\t\t\t<tr id=\"post-<?php echo $post->ID; ?>\" class=\"<?php echo trim( ' author-' . $post_owner . ' status-' . $post->post_status ); ?>\">\n\t\t\t\t<?php $this->single_row_columns( $post ); ?>\n\t\t\t</tr>\n\t\t<?php\n\t\tendwhile;\n\t}\n\n\t/**\n\t * Gets the name of the default primary column.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @return string Name of the default primary column, in this case, 'title'.\n\t */\n\tprotected function get_default_primary_column_name() {\n\t\treturn 'title';\n\t}\n\n\t/**\n\t * @param WP_Post $post\n\t * @param string  $att_title\n\t *\n\t * @return array\n\t */\n\tprivate function _get_row_actions( $post, $att_title ) {\n\t\t$actions = array();\n\n\t\tif ( $this->detached ) {\n\t\t\tif ( current_user_can( 'edit_post', $post->ID ) ) {\n\t\t\t\t$actions['edit'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\tget_edit_post_link( $post->ID ),\n\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Edit &#8220;%s&#8221;' ), $att_title ) ),\n\t\t\t\t\t__( 'Edit' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ( current_user_can( 'delete_post', $post->ID ) ) {\n\t\t\t\tif ( EMPTY_TRASH_DAYS && MEDIA_TRASH ) {\n\t\t\t\t\t$actions['trash'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\twp_nonce_url( \"post.php?action=trash&amp;post=$post->ID\", 'trash-post_' . $post->ID ),\n\t\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Move &#8220;%s&#8221; to the Trash' ), $att_title ) ),\n\t\t\t\t\t\t_x( 'Trash', 'verb' )\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$delete_ays = ! MEDIA_TRASH ? \" onclick='return showNotice.warn();'\" : '';\n\t\t\t\t\t$actions['delete'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\"%s aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\twp_nonce_url( \"post.php?action=delete&amp;post=$post->ID\", 'delete-post_' . $post->ID ),\n\t\t\t\t\t\t$delete_ays,\n\t\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Delete &#8220;%s&#8221; permanently' ), $att_title ) ),\n\t\t\t\t\t\t__( 'Delete Permanently' )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$actions['view'] = sprintf(\n\t\t\t\t'<a href=\"%s\" aria-label=\"%s\" rel=\"permalink\">%s</a>',\n\t\t\t\tget_permalink( $post->ID ),\n\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\tesc_attr( sprintf( __( 'View &#8220;%s&#8221;' ), $att_title ) ),\n\t\t\t\t__( 'View' )\n\t\t\t);\n\n\t\t\tif ( current_user_can( 'edit_post', $post->ID ) ) {\n\t\t\t\t$actions['attach'] = sprintf(\n\t\t\t\t\t'<a href=\"#the-list\" onclick=\"findPosts.open( \\'media[]\\', \\'%s\\' ); return false;\" class=\"hide-if-no-js\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t$post->ID,\n\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Attach &#8220;%s&#8221; to existing content' ), $att_title ) ),\n\t\t\t\t\t__( 'Attach' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif ( current_user_can( 'edit_post', $post->ID ) && !$this->is_trash ) {\n\t\t\t\t$actions['edit'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\tget_edit_post_link( $post->ID ),\n\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Edit &#8220;%s&#8221;' ), $att_title ) ),\n\t\t\t\t\t__( 'Edit' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ( current_user_can( 'delete_post', $post->ID ) ) {\n\t\t\t\tif ( $this->is_trash ) {\n\t\t\t\t\t$actions['untrash'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\twp_nonce_url( \"post.php?action=untrash&amp;post=$post->ID\", 'untrash-post_' . $post->ID ),\n\t\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Restore &#8220;%s&#8221; from the Trash' ), $att_title ) ),\n\t\t\t\t\t\t__( 'Restore' )\n\t\t\t\t\t);\n\t\t\t\t} elseif ( EMPTY_TRASH_DAYS && MEDIA_TRASH ) {\n\t\t\t\t\t$actions['trash'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\twp_nonce_url( \"post.php?action=trash&amp;post=$post->ID\", 'trash-post_' . $post->ID ),\n\t\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Move &#8220;%s&#8221; to the Trash' ), $att_title ) ),\n\t\t\t\t\t\t_x( 'Trash', 'verb' )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif ( $this->is_trash || ! EMPTY_TRASH_DAYS || ! MEDIA_TRASH ) {\n\t\t\t\t\t$delete_ays = ( !$this->is_trash && !MEDIA_TRASH ) ? \" onclick='return showNotice.warn();'\" : '';\n\t\t\t\t\t$actions['delete'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\"%s aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\twp_nonce_url( \"post.php?action=delete&amp;post=$post->ID\", 'delete-post_' . $post->ID ),\n\t\t\t\t\t\t$delete_ays,\n\t\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Delete &#8220;%s&#8221; permanently' ), $att_title ) ),\n\t\t\t\t\t\t__( 'Delete Permanently' )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( ! $this->is_trash ) {\n\t\t\t\t$actions['view'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" aria-label=\"%s\" rel=\"permalink\">%s</a>',\n\t\t\t\t\tget_permalink( $post->ID ),\n\t\t\t\t\t/* translators: %s: attachment title */\n\t\t\t\t\tesc_attr( sprintf( __( 'View &#8220;%s&#8221;' ), $att_title ) ),\n\t\t\t\t\t__( 'View' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the action links for each attachment in the Media list table.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param array   $actions  An array of action links for each attachment.\n\t\t *                          Default 'Edit', 'Delete Permanently', 'View'.\n\t\t * @param WP_Post $post     WP_Post object for the current attachment.\n\t\t * @param bool    $detached Whether the list table contains media not attached\n\t\t *                          to any posts. Default true.\n\t\t */\n\t\treturn apply_filters( 'media_row_actions', $actions, $post, $this->detached );\n\t}\n\n\t/**\n\t * Generates and displays row action links.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @param object $post        Attachment being acted upon.\n\t * @param string $column_name Current column name.\n\t * @param string $primary     Primary column name.\n\t * @return string Row actions output for media attachments.\n\t */\n\tprotected function handle_row_actions( $post, $column_name, $primary ) {\n\t\tif ( $primary !== $column_name ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$att_title = _draft_or_post_title();\n\t\treturn $this->row_actions( $this->_get_row_actions( $post, $att_title ) );\n\t}\n}\n", "<?php\n/**\n * WordPress Post Template Functions.\n *\n * Gets content for the current post in the loop.\n *\n * @package WordPress\n * @subpackage Template\n */\n\n/**\n * Display the ID of the current item in the WordPress Loop.\n *\n * @since 0.71\n */\nfunction the_ID() {\n\techo get_the_ID();\n}\n\n/**\n * Retrieve the ID of the current item in the WordPress Loop.\n *\n * @since 2.1.0\n *\n * @return int|false The ID of the current item in the WordPress Loop. False if $post is not set.\n */\nfunction get_the_ID() {\n\t$post = get_post();\n\treturn ! empty( $post ) ? $post->ID : false;\n}\n\n/**\n * Display or retrieve the current post title with optional content.\n *\n * @since 0.71\n *\n * @param string $before Optional. Content to prepend to the title.\n * @param string $after  Optional. Content to append to the title.\n * @param bool   $echo   Optional, default to true.Whether to display or return.\n * @return string|void String if $echo parameter is false.\n */\nfunction the_title( $before = '', $after = '', $echo = true ) {\n\t$title = get_the_title();\n\n\tif ( strlen($title) == 0 )\n\t\treturn;\n\n\t$title = $before . $title . $after;\n\n\tif ( $echo )\n\t\techo $title;\n\telse\n\t\treturn $title;\n}\n\n/**\n * Sanitize the current title when retrieving or displaying.\n *\n * Works like the_title(), except the parameters can be in a string or\n * an array. See the function for what can be override in the $args parameter.\n *\n * The title before it is displayed will have the tags stripped and esc_attr()\n * before it is passed to the user or displayed. The default as with the_title(),\n * is to display the title.\n *\n * @since 2.3.0\n *\n * @param string|array $args {\n *     Title attribute arguments. Optional.\n *\n *     @type string  $before Markup to prepend to the title. Default empty.\n *     @type string  $after  Markup to append to the title. Default empty.\n *     @type bool    $echo   Whether to echo or return the title. Default true for echo.\n *     @type WP_Post $post   Current post object to retrieve the title for.\n * }\n * @return string|void String when echo is false.\n */\nfunction the_title_attribute( $args = '' ) {\n\t$defaults = array( 'before' => '', 'after' =>  '', 'echo' => true, 'post' => get_post() );\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$title = get_the_title( $r['post'] );\n\n\tif ( strlen( $title ) == 0 ) {\n\t\treturn;\n\t}\n\n\t$title = $r['before'] . $title . $r['after'];\n\t$title = esc_attr( strip_tags( $title ) );\n\n\tif ( $r['echo'] ) {\n\t\techo $title;\n\t} else {\n\t\treturn $title;\n\t}\n}\n\n/**\n * Retrieve post title.\n *\n * If the post is protected and the visitor is not an admin, then \"Protected\"\n * will be displayed before the post title. If the post is private, then\n * \"Private\" will be located before the post title.\n *\n * @since 0.71\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string\n */\nfunction get_the_title( $post = 0 ) {\n\t$post = get_post( $post );\n\n\t$title = isset( $post->post_title ) ? $post->post_title : '';\n\t$id = isset( $post->ID ) ? $post->ID : 0;\n\n\tif ( ! is_admin() ) {\n\t\tif ( ! empty( $post->post_password ) ) {\n\n\t\t\t/**\n\t\t\t * Filters the text prepended to the post title for protected posts.\n\t\t\t *\n\t\t\t * The filter is only applied on the front end.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param string  $prepend Text displayed before the post title.\n\t\t\t *                         Default 'Protected: %s'.\n\t\t\t * @param WP_Post $post    Current post object.\n\t\t\t */\n\t\t\t$protected_title_format = apply_filters( 'protected_title_format', __( 'Protected: %s' ), $post );\n\t\t\t$title = sprintf( $protected_title_format, $title );\n\t\t} elseif ( isset( $post->post_status ) && 'private' == $post->post_status ) {\n\n\t\t\t/**\n\t\t\t * Filters the text prepended to the post title of private posts.\n\t\t\t *\n\t\t\t * The filter is only applied on the front end.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param string  $prepend Text displayed before the post title.\n\t\t\t *                         Default 'Private: %s'.\n\t\t\t * @param WP_Post $post    Current post object.\n\t\t\t */\n\t\t\t$private_title_format = apply_filters( 'private_title_format', __( 'Private: %s' ), $post );\n\t\t\t$title = sprintf( $private_title_format, $title );\n\t\t}\n\t}\n\n\t/**\n\t * Filters the post title.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $title The post title.\n\t * @param int    $id    The post ID.\n\t */\n\treturn apply_filters( 'the_title', $title, $id );\n}\n\n/**\n * Display the Post Global Unique Identifier (guid).\n *\n * The guid will appear to be a link, but should not be used as a link to the\n * post. The reason you should not use it as a link, is because of moving the\n * blog across domains.\n *\n * URL is escaped to make it XML-safe.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post Optional. Post ID or post object. Default is global $post.\n */\nfunction the_guid( $post = 0 ) {\n\t$post = get_post( $post );\n\n\t$guid = isset( $post->guid ) ? get_the_guid( $post ) : '';\n\t$id   = isset( $post->ID ) ? $post->ID : 0;\n\n\t/**\n\t * Filters the escaped Global Unique Identifier (guid) of the post.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @see get_the_guid()\n\t *\n\t * @param string $guid Escaped Global Unique Identifier (guid) of the post.\n\t * @param int    $id   The post ID.\n\t */\n\techo apply_filters( 'the_guid', $guid, $id );\n}\n\n/**\n * Retrieve the Post Global Unique Identifier (guid).\n *\n * The guid will appear to be a link, but should not be used as an link to the\n * post. The reason you should not use it as a link, is because of moving the\n * blog across domains.\n *\n * @since 1.5.0\n *\n * @param int|WP_Post $post Optional. Post ID or post object. Default is global $post.\n * @return string\n */\nfunction get_the_guid( $post = 0 ) {\n\t$post = get_post( $post );\n\n\t$guid = isset( $post->guid ) ? $post->guid : '';\n\t$id   = isset( $post->ID ) ? $post->ID : 0;\n\n\t/**\n\t * Filters the Global Unique Identifier (guid) of the post.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param string $guid Global Unique Identifier (guid) of the post.\n\t * @param int    $id   The post ID.\n\t */\n\treturn apply_filters( 'get_the_guid', $guid, $id );\n}\n\n/**\n * Display the post content.\n *\n * @since 0.71\n *\n * @param string $more_link_text Optional. Content for when there is more text.\n * @param bool   $strip_teaser   Optional. Strip teaser content before the more text. Default is false.\n */\nfunction the_content( $more_link_text = null, $strip_teaser = false) {\n\t$content = get_the_content( $more_link_text, $strip_teaser );\n\n\t/**\n\t * Filters the post content.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $content Content of the current post.\n\t */\n\t$content = apply_filters( 'the_content', $content );\n\t$content = str_replace( ']]>', ']]&gt;', $content );\n\techo $content;\n}\n\n/**\n * Retrieve the post content.\n *\n * @since 0.71\n *\n * @global int   $page\n * @global int   $more\n * @global bool  $preview\n * @global array $pages\n * @global int   $multipage\n *\n * @param string $more_link_text Optional. Content for when there is more text.\n * @param bool   $strip_teaser   Optional. Strip teaser content before the more text. Default is false.\n * @return string\n */\nfunction get_the_content( $more_link_text = null, $strip_teaser = false ) {\n\tglobal $page, $more, $preview, $pages, $multipage;\n\n\t$post = get_post();\n\n\tif ( null === $more_link_text ) {\n\t\t$more_link_text = sprintf(\n\t\t\t'<span aria-label=\"%1$s\">%2$s</span>',\n\t\t\tsprintf(\n\t\t\t\t/* translators: %s: Name of current post */\n\t\t\t\t__( 'Continue reading %s' ),\n\t\t\t\tthe_title_attribute( array( 'echo' => false ) )\n\t\t\t),\n\t\t\t__( '(more&hellip;)' )\n\t\t);\n\t}\n\n\t$output = '';\n\t$has_teaser = false;\n\n\t// If post password required and it doesn't match the cookie.\n\tif ( post_password_required( $post ) )\n\t\treturn get_the_password_form( $post );\n\n\tif ( $page > count( $pages ) ) // if the requested page doesn't exist\n\t\t$page = count( $pages ); // give them the highest numbered page that DOES exist\n\n\t$content = $pages[$page - 1];\n\tif ( preg_match( '/<!--more(.*?)?-->/', $content, $matches ) ) {\n\t\t$content = explode( $matches[0], $content, 2 );\n\t\tif ( ! empty( $matches[1] ) && ! empty( $more_link_text ) )\n\t\t\t$more_link_text = strip_tags( wp_kses_no_null( trim( $matches[1] ) ) );\n\n\t\t$has_teaser = true;\n\t} else {\n\t\t$content = array( $content );\n\t}\n\n\tif ( false !== strpos( $post->post_content, '<!--noteaser-->' ) && ( ! $multipage || $page == 1 ) )\n\t\t$strip_teaser = true;\n\n\t$teaser = $content[0];\n\n\tif ( $more && $strip_teaser && $has_teaser )\n\t\t$teaser = '';\n\n\t$output .= $teaser;\n\n\tif ( count( $content ) > 1 ) {\n\t\tif ( $more ) {\n\t\t\t$output .= '<span id=\"more-' . $post->ID . '\"></span>' . $content[1];\n\t\t} else {\n\t\t\tif ( ! empty( $more_link_text ) )\n\n\t\t\t\t/**\n\t\t\t\t * Filters the Read More link text.\n\t\t\t\t *\n\t\t\t\t * @since 2.8.0\n\t\t\t\t *\n\t\t\t\t * @param string $more_link_element Read More link element.\n\t\t\t\t * @param string $more_link_text    Read More text.\n\t\t\t\t */\n\t\t\t\t$output .= apply_filters( 'the_content_more_link', ' <a href=\"' . get_permalink() . \"#more-{$post->ID}\\\" class=\\\"more-link\\\">$more_link_text</a>\", $more_link_text );\n\t\t\t$output = force_balance_tags( $output );\n\t\t}\n\t}\n\n\tif ( $preview ) // Preview fix for JavaScript bug with foreign languages.\n\t\t$output =\tpreg_replace_callback( '/\\%u([0-9A-F]{4})/', '_convert_urlencoded_to_entities', $output );\n\n\treturn $output;\n}\n\n/**\n * Preview fix for JavaScript bug with foreign languages.\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $match Match array from preg_replace_callback.\n * @return string\n */\nfunction _convert_urlencoded_to_entities( $match ) {\n\treturn '&#' . base_convert( $match[1], 16, 10 ) . ';';\n}\n\n/**\n * Display the post excerpt.\n *\n * @since 0.71\n */\nfunction the_excerpt() {\n\n\t/**\n\t * Filters the displayed post excerpt.\n\t *\n\t * @since 0.71\n\t *\n\t * @see get_the_excerpt()\n\t *\n\t * @param string $post_excerpt The post excerpt.\n\t */\n\techo apply_filters( 'the_excerpt', get_the_excerpt() );\n}\n\n/**\n * Retrieves the post excerpt.\n *\n * @since 0.71\n * @since 4.5.0 Introduced the `$post` parameter.\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string Post excerpt.\n */\nfunction get_the_excerpt( $post = null ) {\n\tif ( is_bool( $post ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '2.3' );\n\t}\n\n\t$post = get_post( $post );\n\tif ( empty( $post ) ) {\n\t\treturn '';\n\t}\n\n\tif ( post_password_required( $post ) ) {\n\t\treturn __( 'There is no excerpt because this is a protected post.' );\n\t}\n\n\t/**\n\t * Filters the retrieved post excerpt.\n\t *\n\t * @since 1.2.0\n\t * @since 4.5.0 Introduced the `$post` parameter.\n\t *\n\t * @param string $post_excerpt The post excerpt.\n\t * @param WP_Post $post Post object.\n\t */\n\treturn apply_filters( 'get_the_excerpt', $post->post_excerpt, $post );\n}\n\n/**\n * Whether post has excerpt.\n *\n * @since 2.3.0\n *\n * @param int|WP_Post $id Optional. Post ID or post object.\n * @return bool\n */\nfunction has_excerpt( $id = 0 ) {\n\t$post = get_post( $id );\n\treturn ( !empty( $post->post_excerpt ) );\n}\n\n/**\n * Display the classes for the post div.\n *\n * @since 2.7.0\n *\n * @param string|array $class   One or more classes to add to the class list.\n * @param int|WP_Post  $post_id Optional. Post ID or post object. Defaults to the global `$post`.\n */\nfunction post_class( $class = '', $post_id = null ) {\n\t// Separates classes with a single space, collates classes for post DIV\n\techo 'class=\"' . join( ' ', get_post_class( $class, $post_id ) ) . '\"';\n}\n\n/**\n * Retrieves the classes for the post div as an array.\n *\n * The class names are many. If the post is a sticky, then the 'sticky'\n * class name. The class 'hentry' is always added to each post. If the post has a\n * post thumbnail, 'has-post-thumbnail' is added as a class. For each taxonomy that\n * the post belongs to, a class will be added of the format '{$taxonomy}-{$slug}' -\n * eg 'category-foo' or 'my_custom_taxonomy-bar'.\n *\n * The 'post_tag' taxonomy is a special\n * case; the class has the 'tag-' prefix instead of 'post_tag-'. All classes are\n * passed through the filter, {@see 'post_class'}, with the list of classes, followed by\n * $class parameter value, with the post ID as the last parameter.\n *\n * @since 2.7.0\n * @since 4.2.0 Custom taxonomy classes were added.\n *\n * @param string|array $class   One or more classes to add to the class list.\n * @param int|WP_Post  $post_id Optional. Post ID or post object.\n * @return array Array of classes.\n */\nfunction get_post_class( $class = '', $post_id = null ) {\n\t$post = get_post( $post_id );\n\n\t$classes = array();\n\n\tif ( $class ) {\n\t\tif ( ! is_array( $class ) ) {\n\t\t\t$class = preg_split( '#\\s+#', $class );\n\t\t}\n\t\t$classes = array_map( 'esc_attr', $class );\n\t} else {\n\t\t// Ensure that we always coerce class to being an array.\n\t\t$class = array();\n\t}\n\n\tif ( ! $post ) {\n\t\treturn $classes;\n\t}\n\n\t$classes[] = 'post-' . $post->ID;\n\tif ( ! is_admin() )\n\t\t$classes[] = $post->post_type;\n\t$classes[] = 'type-' . $post->post_type;\n\t$classes[] = 'status-' . $post->post_status;\n\n\t// Post Format\n\tif ( post_type_supports( $post->post_type, 'post-formats' ) ) {\n\t\t$post_format = get_post_format( $post->ID );\n\n\t\tif ( $post_format && !is_wp_error($post_format) )\n\t\t\t$classes[] = 'format-' . sanitize_html_class( $post_format );\n\t\telse\n\t\t\t$classes[] = 'format-standard';\n\t}\n\n\t$post_password_required = post_password_required( $post->ID );\n\n\t// Post requires password.\n\tif ( $post_password_required ) {\n\t\t$classes[] = 'post-password-required';\n\t} elseif ( ! empty( $post->post_password ) ) {\n\t\t$classes[] = 'post-password-protected';\n\t}\n\n\t// Post thumbnails.\n\tif ( current_theme_supports( 'post-thumbnails' ) && has_post_thumbnail( $post->ID ) && ! is_attachment( $post ) && ! $post_password_required ) {\n\t\t$classes[] = 'has-post-thumbnail';\n\t}\n\n\t// sticky for Sticky Posts\n\tif ( is_sticky( $post->ID ) ) {\n\t\tif ( is_home() && ! is_paged() ) {\n\t\t\t$classes[] = 'sticky';\n\t\t} elseif ( is_admin() ) {\n\t\t\t$classes[] = 'status-sticky';\n\t\t}\n\t}\n\n\t// hentry for hAtom compliance\n\t$classes[] = 'hentry';\n\n\t// All public taxonomies\n\t$taxonomies = get_taxonomies( array( 'public' => true ) );\n\tforeach ( (array) $taxonomies as $taxonomy ) {\n\t\tif ( is_object_in_taxonomy( $post->post_type, $taxonomy ) ) {\n\t\t\tforeach ( (array) get_the_terms( $post->ID, $taxonomy ) as $term ) {\n\t\t\t\tif ( empty( $term->slug ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$term_class = sanitize_html_class( $term->slug, $term->term_id );\n\t\t\t\tif ( is_numeric( $term_class ) || ! trim( $term_class, '-' ) ) {\n\t\t\t\t\t$term_class = $term->term_id;\n\t\t\t\t}\n\n\t\t\t\t// 'post_tag' uses the 'tag' prefix for backward compatibility.\n\t\t\t\tif ( 'post_tag' == $taxonomy ) {\n\t\t\t\t\t$classes[] = 'tag-' . $term_class;\n\t\t\t\t} else {\n\t\t\t\t\t$classes[] = sanitize_html_class( $taxonomy . '-' . $term_class, $taxonomy . '-' . $term->term_id );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$classes = array_map( 'esc_attr', $classes );\n\n\t/**\n\t * Filters the list of CSS classes for the current post.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param array $classes An array of post classes.\n\t * @param array $class   An array of additional classes added to the post.\n\t * @param int   $post_id The post ID.\n\t */\n\t$classes = apply_filters( 'post_class', $classes, $class, $post->ID );\n\n\treturn array_unique( $classes );\n}\n\n/**\n * Display the classes for the body element.\n *\n * @since 2.8.0\n *\n * @param string|array $class One or more classes to add to the class list.\n */\nfunction body_class( $class = '' ) {\n\t// Separates classes with a single space, collates classes for body element\n\techo 'class=\"' . join( ' ', get_body_class( $class ) ) . '\"';\n}\n\n/**\n * Retrieve the classes for the body element as an array.\n *\n * @since 2.8.0\n *\n * @global WP_Query $wp_query\n *\n * @param string|array $class One or more classes to add to the class list.\n * @return array Array of classes.\n */\nfunction get_body_class( $class = '' ) {\n\tglobal $wp_query;\n\n\t$classes = array();\n\n\tif ( is_rtl() )\n\t\t$classes[] = 'rtl';\n\n\tif ( is_front_page() )\n\t\t$classes[] = 'home';\n\tif ( is_home() )\n\t\t$classes[] = 'blog';\n\tif ( is_archive() )\n\t\t$classes[] = 'archive';\n\tif ( is_date() )\n\t\t$classes[] = 'date';\n\tif ( is_search() ) {\n\t\t$classes[] = 'search';\n\t\t$classes[] = $wp_query->posts ? 'search-results' : 'search-no-results';\n\t}\n\tif ( is_paged() )\n\t\t$classes[] = 'paged';\n\tif ( is_attachment() )\n\t\t$classes[] = 'attachment';\n\tif ( is_404() )\n\t\t$classes[] = 'error404';\n\n\tif ( is_single() ) {\n\t\t$post_id = $wp_query->get_queried_object_id();\n\t\t$post = $wp_query->get_queried_object();\n\n\t\t$classes[] = 'single';\n\t\tif ( isset( $post->post_type ) ) {\n\t\t\t$classes[] = 'single-' . sanitize_html_class($post->post_type, $post_id);\n\t\t\t$classes[] = 'postid-' . $post_id;\n\n\t\t\t// Post Format\n\t\t\tif ( post_type_supports( $post->post_type, 'post-formats' ) ) {\n\t\t\t\t$post_format = get_post_format( $post->ID );\n\n\t\t\t\tif ( $post_format && !is_wp_error($post_format) )\n\t\t\t\t\t$classes[] = 'single-format-' . sanitize_html_class( $post_format );\n\t\t\t\telse\n\t\t\t\t\t$classes[] = 'single-format-standard';\n\t\t\t}\n\t\t}\n\n\t\tif ( is_attachment() ) {\n\t\t\t$mime_type = get_post_mime_type($post_id);\n\t\t\t$mime_prefix = array( 'application/', 'image/', 'text/', 'audio/', 'video/', 'music/' );\n\t\t\t$classes[] = 'attachmentid-' . $post_id;\n\t\t\t$classes[] = 'attachment-' . str_replace( $mime_prefix, '', $mime_type );\n\t\t}\n\t} elseif ( is_archive() ) {\n\t\tif ( is_post_type_archive() ) {\n\t\t\t$classes[] = 'post-type-archive';\n\t\t\t$post_type = get_query_var( 'post_type' );\n\t\t\tif ( is_array( $post_type ) )\n\t\t\t\t$post_type = reset( $post_type );\n\t\t\t$classes[] = 'post-type-archive-' . sanitize_html_class( $post_type );\n\t\t} elseif ( is_author() ) {\n\t\t\t$author = $wp_query->get_queried_object();\n\t\t\t$classes[] = 'author';\n\t\t\tif ( isset( $author->user_nicename ) ) {\n\t\t\t\t$classes[] = 'author-' . sanitize_html_class( $author->user_nicename, $author->ID );\n\t\t\t\t$classes[] = 'author-' . $author->ID;\n\t\t\t}\n\t\t} elseif ( is_category() ) {\n\t\t\t$cat = $wp_query->get_queried_object();\n\t\t\t$classes[] = 'category';\n\t\t\tif ( isset( $cat->term_id ) ) {\n\t\t\t\t$cat_class = sanitize_html_class( $cat->slug, $cat->term_id );\n\t\t\t\tif ( is_numeric( $cat_class ) || ! trim( $cat_class, '-' ) ) {\n\t\t\t\t\t$cat_class = $cat->term_id;\n\t\t\t\t}\n\n\t\t\t\t$classes[] = 'category-' . $cat_class;\n\t\t\t\t$classes[] = 'category-' . $cat->term_id;\n\t\t\t}\n\t\t} elseif ( is_tag() ) {\n\t\t\t$tag = $wp_query->get_queried_object();\n\t\t\t$classes[] = 'tag';\n\t\t\tif ( isset( $tag->term_id ) ) {\n\t\t\t\t$tag_class = sanitize_html_class( $tag->slug, $tag->term_id );\n\t\t\t\tif ( is_numeric( $tag_class ) || ! trim( $tag_class, '-' ) ) {\n\t\t\t\t\t$tag_class = $tag->term_id;\n\t\t\t\t}\n\n\t\t\t\t$classes[] = 'tag-' . $tag_class;\n\t\t\t\t$classes[] = 'tag-' . $tag->term_id;\n\t\t\t}\n\t\t} elseif ( is_tax() ) {\n\t\t\t$term = $wp_query->get_queried_object();\n\t\t\tif ( isset( $term->term_id ) ) {\n\t\t\t\t$term_class = sanitize_html_class( $term->slug, $term->term_id );\n\t\t\t\tif ( is_numeric( $term_class ) || ! trim( $term_class, '-' ) ) {\n\t\t\t\t\t$term_class = $term->term_id;\n\t\t\t\t}\n\n\t\t\t\t$classes[] = 'tax-' . sanitize_html_class( $term->taxonomy );\n\t\t\t\t$classes[] = 'term-' . $term_class;\n\t\t\t\t$classes[] = 'term-' . $term->term_id;\n\t\t\t}\n\t\t}\n\t} elseif ( is_page() ) {\n\t\t$classes[] = 'page';\n\n\t\t$page_id = $wp_query->get_queried_object_id();\n\n\t\t$post = get_post($page_id);\n\n\t\t$classes[] = 'page-id-' . $page_id;\n\n\t\tif ( get_pages( array( 'parent' => $page_id, 'number' => 1 ) ) ) {\n\t\t\t$classes[] = 'page-parent';\n\t\t}\n\n\t\tif ( $post->post_parent ) {\n\t\t\t$classes[] = 'page-child';\n\t\t\t$classes[] = 'parent-pageid-' . $post->post_parent;\n\t\t}\n\t\tif ( is_page_template() ) {\n\t\t\t$classes[] = 'page-template';\n\n\t\t\t$template_slug  = get_page_template_slug( $page_id );\n\t\t\t$template_parts = explode( '/', $template_slug );\n\n\t\t\tforeach ( $template_parts as $part ) {\n\t\t\t\t$classes[] = 'page-template-' . sanitize_html_class( str_replace( array( '.', '/' ), '-', basename( $part, '.php' ) ) );\n\t\t\t}\n\t\t\t$classes[] = 'page-template-' . sanitize_html_class( str_replace( '.', '-', $template_slug ) );\n\t\t} else {\n\t\t\t$classes[] = 'page-template-default';\n\t\t}\n\t}\n\n\tif ( is_user_logged_in() )\n\t\t$classes[] = 'logged-in';\n\n\tif ( is_admin_bar_showing() ) {\n\t\t$classes[] = 'admin-bar';\n\t\t$classes[] = 'no-customize-support';\n\t}\n\n\tif ( get_background_color() !== get_theme_support( 'custom-background', 'default-color' ) || get_background_image() )\n\t\t$classes[] = 'custom-background';\n\n\tif ( has_custom_logo() ) {\n\t\t$classes[] = 'wp-custom-logo';\n\t}\n\n\t$page = $wp_query->get( 'page' );\n\n\tif ( ! $page || $page < 2 )\n\t\t$page = $wp_query->get( 'paged' );\n\n\tif ( $page && $page > 1 && ! is_404() ) {\n\t\t$classes[] = 'paged-' . $page;\n\n\t\tif ( is_single() )\n\t\t\t$classes[] = 'single-paged-' . $page;\n\t\telseif ( is_page() )\n\t\t\t$classes[] = 'page-paged-' . $page;\n\t\telseif ( is_category() )\n\t\t\t$classes[] = 'category-paged-' . $page;\n\t\telseif ( is_tag() )\n\t\t\t$classes[] = 'tag-paged-' . $page;\n\t\telseif ( is_date() )\n\t\t\t$classes[] = 'date-paged-' . $page;\n\t\telseif ( is_author() )\n\t\t\t$classes[] = 'author-paged-' . $page;\n\t\telseif ( is_search() )\n\t\t\t$classes[] = 'search-paged-' . $page;\n\t\telseif ( is_post_type_archive() )\n\t\t\t$classes[] = 'post-type-paged-' . $page;\n\t}\n\n\tif ( ! empty( $class ) ) {\n\t\tif ( !is_array( $class ) )\n\t\t\t$class = preg_split( '#\\s+#', $class );\n\t\t$classes = array_merge( $classes, $class );\n\t} else {\n\t\t// Ensure that we always coerce class to being an array.\n\t\t$class = array();\n\t}\n\n\t$classes = array_map( 'esc_attr', $classes );\n\n\t/**\n\t * Filters the list of CSS body classes for the current post or page.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array $classes An array of body classes.\n\t * @param array $class   An array of additional classes added to the body.\n\t */\n\t$classes = apply_filters( 'body_class', $classes, $class );\n\n\treturn array_unique( $classes );\n}\n\n/**\n * Whether post requires password and correct password has been provided.\n *\n * @since 2.7.0\n *\n * @param int|WP_Post|null $post An optional post. Global $post used if not provided.\n * @return bool false if a password is not required or the correct password cookie is present, true otherwise.\n */\nfunction post_password_required( $post = null ) {\n\t$post = get_post($post);\n\n\tif ( empty( $post->post_password ) )\n\t\treturn false;\n\n\tif ( ! isset( $_COOKIE['wp-postpass_' . COOKIEHASH] ) )\n\t\treturn true;\n\n\trequire_once ABSPATH . WPINC . '/class-phpass.php';\n\t$hasher = new PasswordHash( 8, true );\n\n\t$hash = wp_unslash( $_COOKIE[ 'wp-postpass_' . COOKIEHASH ] );\n\tif ( 0 !== strpos( $hash, '$P$B' ) )\n\t\treturn true;\n\n\treturn ! $hasher->CheckPassword( $post->post_password, $hash );\n}\n\n//\n// Page Template Functions for usage in Themes\n//\n\n/**\n * The formatted output of a list of pages.\n *\n * Displays page links for paginated posts (i.e. includes the <!--nextpage-->.\n * Quicktag one or more times). This tag must be within The Loop.\n *\n * @since 1.2.0\n *\n * @global int $page\n * @global int $numpages\n * @global int $multipage\n * @global int $more\n *\n * @param string|array $args {\n *     Optional. Array or string of default arguments.\n *\n *     @type string       $before           HTML or text to prepend to each link. Default is `<p> Pages:`.\n *     @type string       $after            HTML or text to append to each link. Default is `</p>`.\n *     @type string       $link_before      HTML or text to prepend to each link, inside the `<a>` tag.\n *                                          Also prepended to the current item, which is not linked. Default empty.\n *     @type string       $link_after       HTML or text to append to each Pages link inside the `<a>` tag.\n *                                          Also appended to the current item, which is not linked. Default empty.\n *     @type string       $next_or_number   Indicates whether page numbers should be used. Valid values are number\n *                                          and next. Default is 'number'.\n *     @type string       $separator        Text between pagination links. Default is ' '.\n *     @type string       $nextpagelink     Link text for the next page link, if available. Default is 'Next Page'.\n *     @type string       $previouspagelink Link text for the previous page link, if available. Default is 'Previous Page'.\n *     @type string       $pagelink         Format string for page numbers. The % in the parameter string will be\n *                                          replaced with the page number, so 'Page %' generates \"Page 1\", \"Page 2\", etc.\n *                                          Defaults to '%', just the page number.\n *     @type int|bool     $echo             Whether to echo or not. Accepts 1|true or 0|false. Default 1|true.\n * }\n * @return string Formatted output in HTML.\n */\nfunction wp_link_pages( $args = '' ) {\n\tglobal $page, $numpages, $multipage, $more;\n\n\t$defaults = array(\n\t\t'before'           => '<p>' . __( 'Pages:' ),\n\t\t'after'            => '</p>',\n\t\t'link_before'      => '',\n\t\t'link_after'       => '',\n\t\t'next_or_number'   => 'number',\n\t\t'separator'        => ' ',\n\t\t'nextpagelink'     => __( 'Next page' ),\n\t\t'previouspagelink' => __( 'Previous page' ),\n\t\t'pagelink'         => '%',\n\t\t'echo'             => 1\n\t);\n\n\t$params = wp_parse_args( $args, $defaults );\n\n\t/**\n\t * Filters the arguments used in retrieving page links for paginated posts.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param array $params An array of arguments for page links for paginated posts.\n\t */\n\t$r = apply_filters( 'wp_link_pages_args', $params );\n\n\t$output = '';\n\tif ( $multipage ) {\n\t\tif ( 'number' == $r['next_or_number'] ) {\n\t\t\t$output .= $r['before'];\n\t\t\tfor ( $i = 1; $i <= $numpages; $i++ ) {\n\t\t\t\t$link = $r['link_before'] . str_replace( '%', $i, $r['pagelink'] ) . $r['link_after'];\n\t\t\t\tif ( $i != $page || ! $more && 1 == $page ) {\n\t\t\t\t\t$link = _wp_link_page( $i ) . $link . '</a>';\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * Filters the HTML output of individual page number links.\n\t\t\t\t *\n\t\t\t\t * @since 3.6.0\n\t\t\t\t *\n\t\t\t\t * @param string $link The page number HTML output.\n\t\t\t\t * @param int    $i    Page number for paginated posts' page links.\n\t\t\t\t */\n\t\t\t\t$link = apply_filters( 'wp_link_pages_link', $link, $i );\n\n\t\t\t\t// Use the custom links separator beginning with the second link.\n\t\t\t\t$output .= ( 1 === $i ) ? ' ' : $r['separator'];\n\t\t\t\t$output .= $link;\n\t\t\t}\n\t\t\t$output .= $r['after'];\n\t\t} elseif ( $more ) {\n\t\t\t$output .= $r['before'];\n\t\t\t$prev = $page - 1;\n\t\t\tif ( $prev > 0 ) {\n\t\t\t\t$link = _wp_link_page( $prev ) . $r['link_before'] . $r['previouspagelink'] . $r['link_after'] . '</a>';\n\n\t\t\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t\t\t$output .= apply_filters( 'wp_link_pages_link', $link, $prev );\n\t\t\t}\n\t\t\t$next = $page + 1;\n\t\t\tif ( $next <= $numpages ) {\n\t\t\t\tif ( $prev ) {\n\t\t\t\t\t$output .= $r['separator'];\n\t\t\t\t}\n\t\t\t\t$link = _wp_link_page( $next ) . $r['link_before'] . $r['nextpagelink'] . $r['link_after'] . '</a>';\n\n\t\t\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t\t\t$output .= apply_filters( 'wp_link_pages_link', $link, $next );\n\t\t\t}\n\t\t\t$output .= $r['after'];\n\t\t}\n\t}\n\n\t/**\n\t * Filters the HTML output of page links for paginated posts.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $output HTML output of paginated posts' page links.\n\t * @param array  $args   An array of arguments.\n\t */\n\t$html = apply_filters( 'wp_link_pages', $output, $args );\n\n\tif ( $r['echo'] ) {\n\t\techo $html;\n\t}\n\treturn $html;\n}\n\n/**\n * Helper function for wp_link_pages().\n *\n * @since 3.1.0\n * @access private\n *\n * @global WP_Rewrite $wp_rewrite\n *\n * @param int $i Page number.\n * @return string Link.\n */\nfunction _wp_link_page( $i ) {\n\tglobal $wp_rewrite;\n\t$post = get_post();\n\t$query_args = array();\n\n\tif ( 1 == $i ) {\n\t\t$url = get_permalink();\n\t} else {\n\t\tif ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )\n\t\t\t$url = add_query_arg( 'page', $i, get_permalink() );\n\t\telseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )\n\t\t\t$url = trailingslashit(get_permalink()) . user_trailingslashit(\"$wp_rewrite->pagination_base/\" . $i, 'single_paged');\n\t\telse\n\t\t\t$url = trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged');\n\t}\n\n\tif ( is_preview() ) {\n\n\t\tif ( ( 'draft' !== $post->post_status ) && isset( $_GET['preview_id'], $_GET['preview_nonce'] ) ) {\n\t\t\t$query_args['preview_id'] = wp_unslash( $_GET['preview_id'] );\n\t\t\t$query_args['preview_nonce'] = wp_unslash( $_GET['preview_nonce'] );\n\t\t}\n\n\t\t$url = get_preview_post_link( $post, $query_args, $url );\n\t}\n\n\treturn '<a href=\"' . esc_url( $url ) . '\">';\n}\n\n//\n// Post-meta: Custom per-post fields.\n//\n\n/**\n * Retrieve post custom meta data field.\n *\n * @since 1.5.0\n *\n * @param string $key Meta data key name.\n * @return false|string|array Array of values or single value, if only one element exists. False will be returned if key does not exist.\n */\nfunction post_custom( $key = '' ) {\n\t$custom = get_post_custom();\n\n\tif ( !isset( $custom[$key] ) )\n\t\treturn false;\n\telseif ( 1 == count($custom[$key]) )\n\t\treturn $custom[$key][0];\n\telse\n\t\treturn $custom[$key];\n}\n\n/**\n * Display list of post custom fields.\n *\n * @since 1.2.0\n *\n * @internal This will probably change at some point...\n *\n */\nfunction the_meta() {\n\tif ( $keys = get_post_custom_keys() ) {\n\t\techo \"<ul class='post-meta'>\\n\";\n\t\tforeach ( (array) $keys as $key ) {\n\t\t\t$keyt = trim($key);\n\t\t\tif ( is_protected_meta( $keyt, 'post' ) )\n\t\t\t\tcontinue;\n\t\t\t$values = array_map('trim', get_post_custom_values($key));\n\t\t\t$value = implode($values,', ');\n\n\t\t\t/**\n\t\t\t * Filters the HTML output of the li element in the post custom fields list.\n\t\t\t *\n\t\t\t * @since 2.2.0\n\t\t\t *\n\t\t\t * @param string $html  The HTML output for the li element.\n\t\t\t * @param string $key   Meta key.\n\t\t\t * @param string $value Meta value.\n\t\t\t */\n\t\t\techo apply_filters( 'the_meta_key', \"<li><span class='post-meta-key'>$key:</span> $value</li>\\n\", $key, $value );\n\t\t}\n\t\techo \"</ul>\\n\";\n\t}\n}\n\n//\n// Pages\n//\n\n/**\n * Retrieve or display list of pages as a dropdown (select list).\n *\n * @since 2.1.0\n * @since 4.2.0 The `$value_field` argument was added.\n * @since 4.3.0 The `$class` argument was added.\n *\n * @param array|string $args {\n *     Optional. Array or string of arguments to generate a pages drop-down element.\n *\n *     @type int          $depth                 Maximum depth. Default 0.\n *     @type int          $child_of              Page ID to retrieve child pages of. Default 0.\n *     @type int|string   $selected              Value of the option that should be selected. Default 0.\n *     @type bool|int     $echo                  Whether to echo or return the generated markup. Accepts 0, 1,\n *                                               or their bool equivalents. Default 1.\n *     @type string       $name                  Value for the 'name' attribute of the select element.\n *                                               Default 'page_id'.\n *     @type string       $id                    Value for the 'id' attribute of the select element.\n *     @type string       $class                 Value for the 'class' attribute of the select element. Default: none.\n *                                               Defaults to the value of `$name`.\n *     @type string       $show_option_none      Text to display for showing no pages. Default empty (does not display).\n *     @type string       $show_option_no_change Text to display for \"no change\" option. Default empty (does not display).\n *     @type string       $option_none_value     Value to use when no page is selected. Default empty.\n *     @type string       $value_field           Post field used to populate the 'value' attribute of the option\n *                                               elements. Accepts any valid post field. Default 'ID'.\n * }\n * @return string HTML content, if not displaying.\n */\nfunction wp_dropdown_pages( $args = '' ) {\n\t$defaults = array(\n\t\t'depth' => 0, 'child_of' => 0,\n\t\t'selected' => 0, 'echo' => 1,\n\t\t'name' => 'page_id', 'id' => '',\n\t\t'class' => '',\n\t\t'show_option_none' => '', 'show_option_no_change' => '',\n\t\t'option_none_value' => '',\n\t\t'value_field' => 'ID',\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$pages = get_pages( $r );\n\t$output = '';\n\t// Back-compat with old system where both id and name were based on $name argument\n\tif ( empty( $r['id'] ) ) {\n\t\t$r['id'] = $r['name'];\n\t}\n\n\tif ( ! empty( $pages ) ) {\n\t\t$class = '';\n\t\tif ( ! empty( $r['class'] ) ) {\n\t\t\t$class = \" class='\" . esc_attr( $r['class'] ) . \"'\";\n\t\t}\n\n\t\t$output = \"<select name='\" . esc_attr( $r['name'] ) . \"'\" . $class . \" id='\" . esc_attr( $r['id'] ) . \"'>\\n\";\n\t\tif ( $r['show_option_no_change'] ) {\n\t\t\t$output .= \"\\t<option value=\\\"-1\\\">\" . $r['show_option_no_change'] . \"</option>\\n\";\n\t\t}\n\t\tif ( $r['show_option_none'] ) {\n\t\t\t$output .= \"\\t<option value=\\\"\" . esc_attr( $r['option_none_value'] ) . '\">' . $r['show_option_none'] . \"</option>\\n\";\n\t\t}\n\t\t$output .= walk_page_dropdown_tree( $pages, $r['depth'], $r );\n\t\t$output .= \"</select>\\n\";\n\t}\n\n\t/**\n\t * Filters the HTML output of a list of pages as a drop down.\n\t *\n\t * @since 2.1.0\n\t * @since 4.4.0 `$r` and `$pages` added as arguments.\n\t *\n\t * @param string $output HTML output for drop down list of pages.\n\t * @param array  $r      The parsed arguments array.\n\t * @param array  $pages  List of WP_Post objects returned by `get_pages()`\n \t */\n\t$html = apply_filters( 'wp_dropdown_pages', $output, $r, $pages );\n\n\tif ( $r['echo'] ) {\n\t\techo $html;\n\t}\n\treturn $html;\n}\n\n/**\n * Retrieve or display list of pages in list (li) format.\n *\n * @since 1.5.0\n *\n * @see get_pages()\n *\n * @global WP_Query $wp_query\n *\n * @param array|string $args {\n *     Array or string of arguments. Optional.\n *\n *     @type int    $child_of     Display only the sub-pages of a single page by ID. Default 0 (all pages).\n *     @type string $authors      Comma-separated list of author IDs. Default empty (all authors).\n *     @type string $date_format  PHP date format to use for the listed pages. Relies on the 'show_date' parameter.\n *                                Default is the value of 'date_format' option.\n *     @type int    $depth        Number of levels in the hierarchy of pages to include in the generated list.\n *                                Accepts -1 (any depth), 0 (all pages), 1 (top-level pages only), and n (pages to\n *                                the given n depth). Default 0.\n *     @type bool   $echo         Whether or not to echo the list of pages. Default true.\n *     @type string $exclude      Comma-separated list of page IDs to exclude. Default empty.\n *     @type array  $include      Comma-separated list of page IDs to include. Default empty.\n *     @type string $link_after   Text or HTML to follow the page link label. Default null.\n *     @type string $link_before  Text or HTML to precede the page link label. Default null.\n *     @type string $post_type    Post type to query for. Default 'page'.\n *     @type string $post_status  Comma-separated list of post statuses to include. Default 'publish'.\n *     @type string $show_date\t  Whether to display the page publish or modified date for each page. Accepts\n *                                'modified' or any other value. An empty value hides the date. Default empty.\n *     @type string $sort_column  Comma-separated list of column names to sort the pages by. Accepts 'post_author',\n *                                'post_date', 'post_title', 'post_name', 'post_modified', 'post_modified_gmt',\n *                                'menu_order', 'post_parent', 'ID', 'rand', or 'comment_count'. Default 'post_title'.\n *     @type string $title_li     List heading. Passing a null or empty value will result in no heading, and the list\n *                                will not be wrapped with unordered list `<ul>` tags. Default 'Pages'.\n *     @type Walker $walker       Walker instance to use for listing pages. Default empty (Walker_Page).\n * }\n * @return string|void HTML list of pages.\n */\nfunction wp_list_pages( $args = '' ) {\n\t$defaults = array(\n\t\t'depth' => 0, 'show_date' => '',\n\t\t'date_format' => get_option( 'date_format' ),\n\t\t'child_of' => 0, 'exclude' => '',\n\t\t'title_li' => __( 'Pages' ), 'echo' => 1,\n\t\t'authors' => '', 'sort_column' => 'menu_order, post_title',\n\t\t'link_before' => '', 'link_after' => '', 'walker' => '',\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$output = '';\n\t$current_page = 0;\n\n\t// sanitize, mostly to keep spaces out\n\t$r['exclude'] = preg_replace( '/[^0-9,]/', '', $r['exclude'] );\n\n\t// Allow plugins to filter an array of excluded pages (but don't put a nullstring into the array)\n\t$exclude_array = ( $r['exclude'] ) ? explode( ',', $r['exclude'] ) : array();\n\n\t/**\n\t * Filters the array of pages to exclude from the pages list.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param array $exclude_array An array of page IDs to exclude.\n\t */\n\t$r['exclude'] = implode( ',', apply_filters( 'wp_list_pages_excludes', $exclude_array ) );\n\n\t// Query pages.\n\t$r['hierarchical'] = 0;\n\t$pages = get_pages( $r );\n\n\tif ( ! empty( $pages ) ) {\n\t\tif ( $r['title_li'] ) {\n\t\t\t$output .= '<li class=\"pagenav\">' . $r['title_li'] . '<ul>';\n\t\t}\n\t\tglobal $wp_query;\n\t\tif ( is_page() || is_attachment() || $wp_query->is_posts_page ) {\n\t\t\t$current_page = get_queried_object_id();\n\t\t} elseif ( is_singular() ) {\n\t\t\t$queried_object = get_queried_object();\n\t\t\tif ( is_post_type_hierarchical( $queried_object->post_type ) ) {\n\t\t\t\t$current_page = $queried_object->ID;\n\t\t\t}\n\t\t}\n\n\t\t$output .= walk_page_tree( $pages, $r['depth'], $current_page, $r );\n\n\t\tif ( $r['title_li'] ) {\n\t\t\t$output .= '</ul></li>';\n\t\t}\n\t}\n\n\t/**\n\t * Filters the HTML output of the pages to list.\n\t *\n\t * @since 1.5.1\n\t * @since 4.4.0 `$pages` added as arguments.\n\t *\n\t * @see wp_list_pages()\n\t *\n\t * @param string $output HTML output of the pages list.\n\t * @param array  $r      An array of page-listing arguments.\n\t * @param array  $pages  List of WP_Post objects returned by `get_pages()`\n\t */\n\t$html = apply_filters( 'wp_list_pages', $output, $r, $pages );\n\n\tif ( $r['echo'] ) {\n\t\techo $html;\n\t} else {\n\t\treturn $html;\n\t}\n}\n\n/**\n * Displays or retrieves a list of pages with an optional home link.\n *\n * The arguments are listed below and part of the arguments are for wp_list_pages()} function.\n * Check that function for more info on those arguments.\n *\n * @since 2.7.0\n * @since 4.4.0 Added `menu_id`, `container`, `before`, `after`, and `walker` arguments.\n *\n * @param array|string $args {\n *     Optional. Arguments to generate a page menu. See wp_list_pages() for additional arguments.\n *\n *     @type string          $sort_column How to short the list of pages. Accepts post column names.\n *                                        Default 'menu_order, post_title'.\n *     @type string          $menu_id     ID for the div containing the page list. Default is empty string.\n *     @type string          $menu_class  Class to use for the element containing the page list. Default 'menu'.\n *     @type string          $container   Element to use for the element containing the page list. Default 'div'.\n *     @type bool            $echo        Whether to echo the list or return it. Accepts true (echo) or false (return).\n *                                        Default true.\n *     @type int|bool|string $show_home   Whether to display the link to the home page. Can just enter the text\n *                                        you'd like shown for the home link. 1|true defaults to 'Home'.\n *     @type string          $link_before The HTML or text to prepend to $show_home text. Default empty.\n *     @type string          $link_after  The HTML or text to append to $show_home text. Default empty.\n *     @type string          $before      The HTML or text to prepend to the menu. Default is '<ul>'.\n *     @type string          $after       The HTML or text to append to the menu. Default is '</ul>'.\n *     @type Walker          $walker      Walker instance to use for listing pages. Default empty (Walker_Page).\n * }\n * @return string|void HTML menu\n */\nfunction wp_page_menu( $args = array() ) {\n\t$defaults = array(\n\t\t'sort_column' => 'menu_order, post_title',\n\t\t'menu_id'     => '',\n\t\t'menu_class'  => 'menu',\n\t\t'container'   => 'div',\n\t\t'echo'        => true,\n\t\t'link_before' => '',\n\t\t'link_after'  => '',\n\t\t'before'      => '<ul>',\n\t\t'after'       => '</ul>',\n\t\t'walker'      => '',\n\t);\n\t$args = wp_parse_args( $args, $defaults );\n\n\t/**\n\t * Filters the arguments used to generate a page-based menu.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @see wp_page_menu()\n\t *\n\t * @param array $args An array of page menu arguments.\n\t */\n\t$args = apply_filters( 'wp_page_menu_args', $args );\n\n\t$menu = '';\n\n\t$list_args = $args;\n\n\t// Show Home in the menu\n\tif ( ! empty($args['show_home']) ) {\n\t\tif ( true === $args['show_home'] || '1' === $args['show_home'] || 1 === $args['show_home'] )\n\t\t\t$text = __('Home');\n\t\telse\n\t\t\t$text = $args['show_home'];\n\t\t$class = '';\n\t\tif ( is_front_page() && !is_paged() )\n\t\t\t$class = 'class=\"current_page_item\"';\n\t\t$menu .= '<li ' . $class . '><a href=\"' . home_url( '/' ) . '\">' . $args['link_before'] . $text . $args['link_after'] . '</a></li>';\n\t\t// If the front page is a page, add it to the exclude list\n\t\tif (get_option('show_on_front') == 'page') {\n\t\t\tif ( !empty( $list_args['exclude'] ) ) {\n\t\t\t\t$list_args['exclude'] .= ',';\n\t\t\t} else {\n\t\t\t\t$list_args['exclude'] = '';\n\t\t\t}\n\t\t\t$list_args['exclude'] .= get_option('page_on_front');\n\t\t}\n\t}\n\n\t$list_args['echo'] = false;\n\t$list_args['title_li'] = '';\n\t$menu .= str_replace( array( \"\\r\", \"\\n\", \"\\t\" ), '', wp_list_pages($list_args) );\n\n\t$container = sanitize_text_field( $args['container'] );\n\n\t// Fallback in case `wp_nav_menu()` was called without a container.\n\tif ( empty( $container ) ) {\n\t\t$container = 'div';\n\t}\n\n\tif ( $menu ) {\n\n\t\t// wp_nav_menu doesn't set before and after\n\t\tif ( isset( $args['fallback_cb'] ) &&\n\t\t\t'wp_page_menu' === $args['fallback_cb'] &&\n\t\t\t'ul' !== $container ) {\n\t\t\t$args['before'] = '<ul>';\n\t\t\t$args['after'] = '</ul>';\n\t\t}\n\n\t\t$menu = $args['before'] . $menu . $args['after'];\n\t}\n\n\t$attrs = '';\n\tif ( ! empty( $args['menu_id'] ) ) {\n\t\t$attrs .= ' id=\"' . esc_attr( $args['menu_id'] ) . '\"';\n\t}\n\n\tif ( ! empty( $args['menu_class'] ) ) {\n\t\t$attrs .= ' class=\"' . esc_attr( $args['menu_class'] ) . '\"';\n\t}\n\n\t$menu = \"<{$container}{$attrs}>\" . $menu . \"</{$container}>\\n\";\n\n\t/**\n\t * Filters the HTML output of a page-based menu.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @see wp_page_menu()\n\t *\n\t * @param string $menu The HTML output.\n\t * @param array  $args An array of arguments.\n\t */\n\t$menu = apply_filters( 'wp_page_menu', $menu, $args );\n\tif ( $args['echo'] )\n\t\techo $menu;\n\telse\n\t\treturn $menu;\n}\n\n//\n// Page helpers\n//\n\n/**\n * Retrieve HTML list content for page list.\n *\n * @uses Walker_Page to create HTML list content.\n * @since 2.1.0\n *\n * @param array $pages\n * @param int   $depth\n * @param int   $current_page\n * @param array $r\n * @return string\n */\nfunction walk_page_tree( $pages, $depth, $current_page, $r ) {\n\tif ( empty($r['walker']) )\n\t\t$walker = new Walker_Page;\n\telse\n\t\t$walker = $r['walker'];\n\n\tforeach ( (array) $pages as $page ) {\n\t\tif ( $page->post_parent )\n\t\t\t$r['pages_with_children'][ $page->post_parent ] = true;\n\t}\n\n\t$args = array($pages, $depth, $r, $current_page);\n\treturn call_user_func_array(array($walker, 'walk'), $args);\n}\n\n/**\n * Retrieve HTML dropdown (select) content for page list.\n *\n * @uses Walker_PageDropdown to create HTML dropdown content.\n * @since 2.1.0\n * @see Walker_PageDropdown::walk() for parameters and return description.\n *\n * @return string\n */\nfunction walk_page_dropdown_tree() {\n\t$args = func_get_args();\n\tif ( empty($args[2]['walker']) ) // the user's options are the third parameter\n\t\t$walker = new Walker_PageDropdown;\n\telse\n\t\t$walker = $args[2]['walker'];\n\n\treturn call_user_func_array(array($walker, 'walk'), $args);\n}\n\n//\n// Attachments\n//\n\n/**\n * Display an attachment page link using an image or icon.\n *\n * @since 2.0.0\n *\n * @param int|WP_Post $id Optional. Post ID or post object.\n * @param bool        $fullsize     Optional, default is false. Whether to use full size.\n * @param bool        $deprecated   Deprecated. Not used.\n * @param bool        $permalink    Optional, default is false. Whether to include permalink.\n */\nfunction the_attachment_link( $id = 0, $fullsize = false, $deprecated = false, $permalink = false ) {\n\tif ( !empty( $deprecated ) )\n\t\t_deprecated_argument( __FUNCTION__, '2.5' );\n\n\tif ( $fullsize )\n\t\techo wp_get_attachment_link($id, 'full', $permalink);\n\telse\n\t\techo wp_get_attachment_link($id, 'thumbnail', $permalink);\n}\n\n/**\n * Retrieve an attachment page link using an image or icon, if possible.\n *\n * @since 2.5.0\n * @since 4.4.0 The `$id` parameter can now accept either a post ID or `WP_Post` object.\n *\n * @param int|WP_Post  $id        Optional. Post ID or post object.\n * @param string|array $size      Optional. Image size. Accepts any valid image size, or an array\n *                                of width and height values in pixels (in that order).\n *                                Default 'thumbnail'.\n * @param bool         $permalink Optional, Whether to add permalink to image. Default false.\n * @param bool         $icon      Optional. Whether the attachment is an icon. Default false.\n * @param string|false $text      Optional. Link text to use. Activated by passing a string, false otherwise.\n *                                Default false.\n * @param array|string $attr      Optional. Array or string of attributes. Default empty.\n * @return string HTML content.\n */\nfunction wp_get_attachment_link( $id = 0, $size = 'thumbnail', $permalink = false, $icon = false, $text = false, $attr = '' ) {\n\t$_post = get_post( $id );\n\n\tif ( empty( $_post ) || ( 'attachment' != $_post->post_type ) || ! $url = wp_get_attachment_url( $_post->ID ) )\n\t\treturn __( 'Missing Attachment' );\n\n\tif ( $permalink )\n\t\t$url = get_attachment_link( $_post->ID );\n\n\tif ( $text ) {\n\t\t$link_text = $text;\n\t} elseif ( $size && 'none' != $size ) {\n\t\t$link_text = wp_get_attachment_image( $_post->ID, $size, $icon, $attr );\n\t} else {\n\t\t$link_text = '';\n\t}\n\n\tif ( trim( $link_text ) == '' )\n\t\t$link_text = $_post->post_title;\n\n\t/**\n\t * Filters a retrieved attachment page link.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param string       $link_html The page link HTML output.\n\t * @param int          $id        Post ID.\n\t * @param string|array $size      Size of the image. Image size or array of width and height values (in that order).\n\t *                                Default 'thumbnail'.\n\t * @param bool         $permalink Whether to add permalink to image. Default false.\n\t * @param bool         $icon      Whether to include an icon. Default false.\n\t * @param string|bool  $text      If string, will be link text. Default false.\n\t */\n\treturn apply_filters( 'wp_get_attachment_link', \"<a href='\" . esc_url( $url ) . \"'>$link_text</a>\", $id, $size, $permalink, $icon, $text );\n}\n\n/**\n * Wrap attachment in paragraph tag before content.\n *\n * @since 2.0.0\n *\n * @param string $content\n * @return string\n */\nfunction prepend_attachment($content) {\n\t$post = get_post();\n\n\tif ( empty($post->post_type) || $post->post_type != 'attachment' )\n\t\treturn $content;\n\n\tif ( wp_attachment_is( 'video', $post ) ) {\n\t\t$meta = wp_get_attachment_metadata( get_the_ID() );\n\t\t$atts = array( 'src' => wp_get_attachment_url() );\n\t\tif ( ! empty( $meta['width'] ) && ! empty( $meta['height'] ) ) {\n\t\t\t$atts['width'] = (int) $meta['width'];\n\t\t\t$atts['height'] = (int) $meta['height'];\n\t\t}\n\t\tif ( has_post_thumbnail() ) {\n\t\t\t$atts['poster'] = wp_get_attachment_url( get_post_thumbnail_id() );\n\t\t}\n\t\t$p = wp_video_shortcode( $atts );\n\t} elseif ( wp_attachment_is( 'audio', $post ) ) {\n\t\t$p = wp_audio_shortcode( array( 'src' => wp_get_attachment_url() ) );\n\t} else {\n\t\t$p = '<p class=\"attachment\">';\n\t\t// show the medium sized image representation of the attachment if available, and link to the raw file\n\t\t$p .= wp_get_attachment_link(0, 'medium', false);\n\t\t$p .= '</p>';\n\t}\n\n\t/**\n\t * Filters the attachment markup to be prepended to the post content.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @see prepend_attachment()\n\t *\n\t * @param string $p The attachment HTML output.\n\t */\n\t$p = apply_filters( 'prepend_attachment', $p );\n\n\treturn \"$p\\n$content\";\n}\n\n//\n// Misc\n//\n\n/**\n * Retrieve protected post password form content.\n *\n * @since 1.0.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string HTML content for password form for password protected post.\n */\nfunction get_the_password_form( $post = 0 ) {\n\t$post = get_post( $post );\n\t$label = 'pwbox-' . ( empty($post->ID) ? rand() : $post->ID );\n\t$output = '<form action=\"' . esc_url( site_url( 'wp-login.php?action=postpass', 'login_post' ) ) . '\" class=\"post-password-form\" method=\"post\">\n\t<p>' . __( 'This content is password protected. To view it please enter your password below:' ) . '</p>\n\t<p><label for=\"' . $label . '\">' . __( 'Password:' ) . ' <input name=\"post_password\" id=\"' . $label . '\" type=\"password\" size=\"20\" /></label> <input type=\"submit\" name=\"Submit\" value=\"' . esc_attr_x( 'Enter', 'post password form' ) . '\" /></p></form>\n\t';\n\n\t/**\n\t * Filters the HTML output for the protected post password form.\n\t *\n\t * If modifying the password field, please note that the core database schema\n\t * limits the password field to 20 characters regardless of the value of the\n\t * size attribute in the form input.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param string $output The password form HTML output.\n\t */\n\treturn apply_filters( 'the_password_form', $output );\n}\n\n/**\n * Whether currently in a page template.\n *\n * This template tag allows you to determine if you are in a page template.\n * You can optionally provide a template name or array of template names\n * and then the check will be specific to that template.\n *\n * @since 2.5.0\n * @since 4.2.0 The `$template` parameter was changed to also accept an array of page templates.\n *\n * @param string|array $template The specific template name or array of templates to match.\n * @return bool True on success, false on failure.\n */\nfunction is_page_template( $template = '' ) {\n\tif ( ! is_page() )\n\t\treturn false;\n\n\t$page_template = get_page_template_slug( get_queried_object_id() );\n\n\tif ( empty( $template ) )\n\t\treturn (bool) $page_template;\n\n\tif ( $template == $page_template )\n\t\treturn true;\n\n\tif ( is_array( $template ) ) {\n\t\tif ( ( in_array( 'default', $template, true ) && ! $page_template )\n\t\t\t|| in_array( $page_template, $template, true )\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn ( 'default' === $template && ! $page_template );\n}\n\n/**\n * Get the specific template name for a page.\n *\n * @since 3.4.0\n *\n * @param int $post_id Optional. The page ID to check. Defaults to the current post, when used in the loop.\n * @return string|false Page template filename. Returns an empty string when the default page template\n * \tis in use. Returns false if the post is not a page.\n */\nfunction get_page_template_slug( $post_id = null ) {\n\t$post = get_post( $post_id );\n\tif ( ! $post || 'page' != $post->post_type )\n\t\treturn false;\n\t$template = get_post_meta( $post->ID, '_wp_page_template', true );\n\tif ( ! $template || 'default' == $template )\n\t\treturn '';\n\treturn $template;\n}\n\n/**\n * Retrieve formatted date timestamp of a revision (linked to that revisions's page).\n *\n * @since 2.6.0\n *\n * @param int|object $revision Revision ID or revision object.\n * @param bool       $link     Optional, default is true. Link to revisions's page?\n * @return string|false i18n formatted datetimestamp or localized 'Current Revision'.\n */\nfunction wp_post_revision_title( $revision, $link = true ) {\n\tif ( !$revision = get_post( $revision ) )\n\t\treturn $revision;\n\n\tif ( !in_array( $revision->post_type, array( 'post', 'page', 'revision' ) ) )\n\t\treturn false;\n\n\t/* translators: revision date format, see https://secure.php.net/date */\n\t$datef = _x( 'F j, Y @ H:i:s', 'revision date format' );\n\t/* translators: 1: date */\n\t$autosavef = _x( '%1$s [Autosave]', 'post revision title extra' );\n\t/* translators: 1: date */\n\t$currentf  = _x( '%1$s [Current Revision]', 'post revision title extra' );\n\n\t$date = date_i18n( $datef, strtotime( $revision->post_modified ) );\n\tif ( $link && current_user_can( 'edit_post', $revision->ID ) && $link = get_edit_post_link( $revision->ID ) )\n\t\t$date = \"<a href='$link'>$date</a>\";\n\n\tif ( !wp_is_post_revision( $revision ) )\n\t\t$date = sprintf( $currentf, $date );\n\telseif ( wp_is_post_autosave( $revision ) )\n\t\t$date = sprintf( $autosavef, $date );\n\n\treturn $date;\n}\n\n/**\n * Retrieve formatted date timestamp of a revision (linked to that revisions's page).\n *\n * @since 3.6.0\n *\n * @param int|object $revision Revision ID or revision object.\n * @param bool       $link     Optional, default is true. Link to revisions's page?\n * @return string|false gravatar, user, i18n formatted datetimestamp or localized 'Current Revision'.\n */\nfunction wp_post_revision_title_expanded( $revision, $link = true ) {\n\tif ( !$revision = get_post( $revision ) )\n\t\treturn $revision;\n\n\tif ( !in_array( $revision->post_type, array( 'post', 'page', 'revision' ) ) )\n\t\treturn false;\n\n\t$author = get_the_author_meta( 'display_name', $revision->post_author );\n\t/* translators: revision date format, see https://secure.php.net/date */\n\t$datef = _x( 'F j, Y @ H:i:s', 'revision date format' );\n\n\t$gravatar = get_avatar( $revision->post_author, 24 );\n\n\t$date = date_i18n( $datef, strtotime( $revision->post_modified ) );\n\tif ( $link && current_user_can( 'edit_post', $revision->ID ) && $link = get_edit_post_link( $revision->ID ) )\n\t\t$date = \"<a href='$link'>$date</a>\";\n\n\t$revision_date_author = sprintf(\n\t\t/* translators: post revision title: 1: author avatar, 2: author name, 3: time ago, 4: date */\n\t\t_x( '%1$s %2$s, %3$s ago (%4$s)', 'post revision title' ),\n\t\t$gravatar,\n\t\t$author,\n\t\thuman_time_diff( strtotime( $revision->post_modified ), current_time( 'timestamp' ) ),\n\t\t$date\n\t);\n\n\t$autosavef = __( '%1$s [Autosave]' );\n\t$currentf  = __( '%1$s [Current Revision]' );\n\n\tif ( !wp_is_post_revision( $revision ) )\n\t\t$revision_date_author = sprintf( $currentf, $revision_date_author );\n\telseif ( wp_is_post_autosave( $revision ) )\n\t\t$revision_date_author = sprintf( $autosavef, $revision_date_author );\n\n\t/**\n\t * Filters the formatted author and date for a revision.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string  $revision_date_author The formatted string.\n\t * @param WP_Post $revision             The revision object.\n\t * @param bool    $link                 Whether to link to the revisions page, as passed into\n\t *                                      wp_post_revision_title_expanded().\n\t */\n\treturn apply_filters( 'wp_post_revision_title_expanded', $revision_date_author, $revision, $link );\n}\n\n/**\n * Display list of a post's revisions.\n *\n * Can output either a UL with edit links or a TABLE with diff interface, and\n * restore action links.\n *\n * @since 2.6.0\n *\n * @param int|WP_Post $post_id Optional. Post ID or WP_Post object. Default is global $post.\n * @param string      $type    'all' (default), 'revision' or 'autosave'\n */\nfunction wp_list_post_revisions( $post_id = 0, $type = 'all' ) {\n\tif ( ! $post = get_post( $post_id ) )\n\t\treturn;\n\n\t// $args array with (parent, format, right, left, type) deprecated since 3.6\n\tif ( is_array( $type ) ) {\n\t\t$type = ! empty( $type['type'] ) ? $type['type']  : $type;\n\t\t_deprecated_argument( __FUNCTION__, '3.6' );\n\t}\n\n\tif ( ! $revisions = wp_get_post_revisions( $post->ID ) )\n\t\treturn;\n\n\t$rows = '';\n\tforeach ( $revisions as $revision ) {\n\t\tif ( ! current_user_can( 'read_post', $revision->ID ) )\n\t\t\tcontinue;\n\n\t\t$is_autosave = wp_is_post_autosave( $revision );\n\t\tif ( ( 'revision' === $type && $is_autosave ) || ( 'autosave' === $type && ! $is_autosave ) )\n\t\t\tcontinue;\n\n\t\t$rows .= \"\\t<li>\" . wp_post_revision_title_expanded( $revision ) . \"</li>\\n\";\n\t}\n\n\techo \"<div class='hide-if-js'><p>\" . __( 'JavaScript must be enabled to use this feature.' ) . \"</p></div>\\n\";\n\n\techo \"<ul class='post-revisions hide-if-no-js'>\\n\";\n\techo $rows;\n\techo \"</ul>\";\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.6-alpha-37774';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 36686;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4310-20160418';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-admin/includes/class-wp-media-list-table.php", "wp-includes/post-template.php", "wp-includes/version.php"], "buggy_code_start_loc": [398, 1478, 7], "buggy_code_end_loc": [399, 1479, 8], "fixing_code_start_loc": [398, 1478, 7], "fixing_code_end_loc": [399, 1479, 8], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in the wp_get_attachment_link function in wp-includes/post-template.php in WordPress before 4.5.3 allows remote attackers to inject arbitrary web script or HTML via a crafted attachment name, a different vulnerability than CVE-2016-5833.", "other": {"cve": {"id": "CVE-2016-5834", "sourceIdentifier": "security@debian.org", "published": "2016-06-29T14:10:05.880", "lastModified": "2016-11-30T03:07:12.010", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in the wp_get_attachment_link function in wp-includes/post-template.php in WordPress before 4.5.3 allows remote attackers to inject arbitrary web script or HTML via a crafted attachment name, a different vulnerability than CVE-2016-5833."}, {"lang": "es", "value": "Vulnerabilidad de XSS en la funci\u00f3n wp_get_attachment_link en wp-includes/post-template.php en WordPress en versiones anteriores a 4.5.3 permite a atacantes remotos inyectar secuencia de comandos web o HTML a trav\u00e9s de un nombre adjunto manipulado, una vulnerabilidad diferente a CVE-2016-5833."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.5.2", "matchCriteriaId": "6FD1C123-A5DE-4665-BC7B-46996C86E185"}]}]}], "references": [{"url": "http://www.debian.org/security/2016/dsa-3639", "source": "security@debian.org"}, {"url": "http://www.securityfocus.com/bid/91368", "source": "security@debian.org"}, {"url": "http://www.securitytracker.com/id/1036163", "source": "security@debian.org", "tags": ["Third Party Advisory"]}, {"url": "https://codex.wordpress.org/Version_4.5.3", "source": "security@debian.org", "tags": ["Release Notes"]}, {"url": "https://github.com/WordPress/WordPress/commit/4372cdf45d0f49c74bbd4d60db7281de83e32648", "source": "security@debian.org", "tags": ["Patch"]}, {"url": "https://wordpress.org/news/2016/06/wordpress-4-5-3/", "source": "security@debian.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8518", "source": "security@debian.org"}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/4372cdf45d0f49c74bbd4d60db7281de83e32648"}}