{"buggy_code": ["var util = require('util'),\n\tchildProcess = require('child_process'),\n\texpress = require('express'),\n\tbodyParser = require('body-parser'),\n\n\tserver = express(),\n\tport = 3000;\n\nserver.set('view engine', 'pug')\n\t.use(bodyParser.json())\n\n\t.use('/css/bootstrap', express.static(__dirname + '/node_modules/bootstrap/dist/css'))\n\t.use('/css/alertify', express.static(__dirname + '/node_modules/alertifyjs/build/css'))\n\t.use('/css/alertify', express.static(__dirname + '/node_modules/alertifyjs/build/css/themes'))\n\t.use('/js', express.static(__dirname + '/js'))\n\t.use('/js/alertify', express.static(__dirname + '/node_modules/alertifyjs/build'))\n\n\t.get('/', renderForm)\n\t.post('/', processData)\n\n\t.listen(port, function() {\n\n\t\tvar port = this.address().port;\n\t\tconsole.log('Listening at port', port);\n\t});\n\nfunction renderForm(req, res) {\n\n\tvar formView = 'form';\n\tres.render(formView);\n}\n\nfunction processData(req, res) {\n\n\tvar body = req.body,\n\t\texec = childProcess.exec,\n\t\tcmd = getCmdWithArgs(body),\n\t\tcbk = onSpeechDone.bind(this, {\n\t\t\tres: res,\n\t\t\tfields: body\n\t\t});\n\n\tif (!cmd) {\n\t\tcbk('Empty command generated');\n\t} else {\n\t\texec(cmd, cbk);\n\t}\n}\n\nfunction getCmdWithArgs(fields) {\n\n\tvar voice = fields.voice;\n\n\tif (voice === 'google_speech') {\n\t\treturn getGoogleSpeechCmdWithArgs(fields);\n\t} else if (voice === 'gtts') {\n\t\treturn getGttsCmdWithArgs(fields);\n\t} else if (voice === 'festival') {\n\t\treturn getFestivalCmdWithArgs(fields);\n\t} else if (voice === 'espeak') {\n\t\treturn getEspeakCmdWithArgs(fields);\n\t}\n\n\treturn '';\n}\n\nfunction getGoogleSpeechCmdWithArgs(fields) {\n\n\tvar text = fields.textToSpeech,\n\t\tlanguage = fields.language,\n\t\tspeed = fields.speed,\n\n\t\tcmd = 'google_speech' + ' -l ' + language + ' \\\"' + text + '\\\"' + ' -e overdrive 10 speed ' + speed;\n\n\treturn cmd;\n}\n\nfunction getGttsCmdWithArgs(fields) {\n\n\tvar text = fields.textToSpeech,\n\t\tlanguage = fields.language,\n\t\tspeed = fields.speed,\n\t\tspeedParam = speed ? ' -s' : '',\n\n\t\tcmd = 'gtts-cli' + ' -l ' + language + speedParam + ' --nocheck \\\"' + text + '\\\"' + ' | play -t mp3 -';\n\n\treturn cmd;\n}\n\nfunction getFestivalCmdWithArgs(fields) {\n\n\tvar text = fields.textToSpeech,\n\t\tlanguage = fields.language,\n\n\t\tcmd = 'echo \"' + text + '\" | festival' + ' --tts --heap 1000000 --language ' + language;\n\n\treturn cmd;\n}\n\nfunction getEspeakCmdWithArgs(fields) {\n\n\tvar text = fields.textToSpeech,\n\t\tlanguage = fields.language,\n\t\tvoiceCode = '+f4',\n\t\tspeed = Math.floor(fields.speed * 150),\n\t\tpitch = '70',\n\n\t\tcmd = 'espeak' + ' -v' + language + voiceCode + ' -s ' + speed + ' -p ' + pitch + ' \\\"' + text + '\\\"';\n\n\treturn cmd;\n}\n\nfunction onSpeechDone(args, err, stdout, stderr) {\n\n\tvar res = args.res,\n\t\tfields = args.fields;\n\n\tif (!err) {\n\t\tres.end();\n\t\treturn;\n\t}\n\n\tres.writeHead(500, {\n\t\t'content-type': 'text/plain'\n\t});\n\tres.write('error:\\n\\n');\n\tres.write(util.inspect(err) + '\\n\\n');\n\tres.write('received data:\\n\\n');\n\tres.end(util.inspect(fields));\n}\n"], "fixing_code": ["var util = require('util'),\n\tchildProcess = require('child_process'),\n\texpress = require('express'),\n\tbodyParser = require('body-parser'),\n\n\tserver = express(),\n\tport = 3000;\n\nserver.set('view engine', 'pug')\n\t.use(bodyParser.json())\n\n\t.use('/css/bootstrap', express.static(__dirname + '/node_modules/bootstrap/dist/css'))\n\t.use('/css/alertify', express.static(__dirname + '/node_modules/alertifyjs/build/css'))\n\t.use('/css/alertify', express.static(__dirname + '/node_modules/alertifyjs/build/css/themes'))\n\t.use('/js', express.static(__dirname + '/js'))\n\t.use('/js/alertify', express.static(__dirname + '/node_modules/alertifyjs/build'))\n\n\t.get('/', renderForm)\n\t.post('/', processData)\n\n\t.listen(port, function() {\n\n\t\tconsole.log('Listening at port', this.address().port);\n\t});\n\nfunction renderForm(req, res) {\n\n\tvar formView = 'form';\n\tres.render(formView);\n}\n\nfunction processData(req, res) {\n\n\tvar body = req.body,\n\t\tcmdWithArgs = getCmdWithArgs(body) || {},\n\t\thttpArgs = {\n\t\t\tres: res,\n\t\t\tfields: body\n\t\t};\n\n\tif (cmdWithArgs instanceof Array) {\n\t\trunSpeechProcessChain(cmdWithArgs, httpArgs);\n\t} else {\n\t\trunLastSpeechProcess(cmdWithArgs, httpArgs);\n\t}\n}\n\nfunction getCmdWithArgs(fields) {\n\n\tvar voice = fields.voice;\n\n\tif (voice === 'google_speech') {\n\t\treturn getGoogleSpeechCmdWithArgs(fields);\n\t} else if (voice === 'gtts') {\n\t\treturn getGttsCmdWithArgs(fields);\n\t} else if (voice === 'festival') {\n\t\treturn getFestivalCmdWithArgs(fields);\n\t} else if (voice === 'espeak') {\n\t\treturn getEspeakCmdWithArgs(fields);\n\t}\n}\n\nfunction getGoogleSpeechCmdWithArgs(fields) {\n\n\tvar text = fields.textToSpeech,\n\t\tlanguage = fields.language,\n\t\tspeed = fields.speed;\n\n\treturn {\n\t\tcmd: 'google_speech',\n\t\targs: [\n\t\t\t'-v', 'warning',\n\t\t\t'-l', language,\n\t\t\ttext,\n\t\t\t'-e',\n\t\t\t'gain', '4',\n\t\t\t'speed', speed\n\t\t]\n\t};\n}\n\nfunction getGttsCmdWithArgs(fields) {\n\n\tvar text = fields.textToSpeech,\n\t\tlanguage = fields.language,\n\t\tspeed = fields.speed,\n\t\tslowSpeed = fields.slowSpeed ? '-s' : '';\n\n\treturn [{\n\t\tcmd: 'gtts-cli',\n\t\targs: [\n\t\t\t'-l', language,\n\t\t\t'--nocheck',\n\t\t\tslowSpeed,\n\t\t\ttext\n\t\t]\n\t},{\n\t\tcmd: 'play',\n\t\targs: [\n\t\t\t'-q',\n\t\t\t'-t', 'mp3',\n\t\t\t'-',\n\t\t\t'gain', '4',\n\t\t\t'speed', speed\n\t\t]\n\t}];\n}\n\nfunction getFestivalCmdWithArgs(fields) {\n\n\tvar text = fields.textToSpeech,\n\t\tlanguage = fields.language;\n\n\treturn [{\n\t\tcmd: 'echo',\n\t\targs: [\n\t\t\ttext\n\t\t]\n\t},{\n\t\tcmd: 'festival',\n\t\targs: [\n\t\t\t'--tts',\n\t\t\t'--language', language,\n\t\t\t'--heap', '1000000'\n\t\t]\n\t}];\n}\n\nfunction getEspeakCmdWithArgs(fields) {\n\n\tvar text = fields.textToSpeech,\n\t\tlanguage = fields.language,\n\t\tvoiceCode = '+f4',\n\t\tvoice = language + voiceCode,\n\t\tspeed = Math.floor(fields.speed * 150),\n\t\tpitch = '70';\n\n\treturn {\n\t\tcmd: 'espeak',\n\t\targs: [\n\t\t\t'-v', voice,\n\t\t\t'-s', speed,\n\t\t\t'-p', pitch,\n\t\t\ttext\n\t\t]\n\t};\n}\n\nfunction runLastSpeechProcess(cmdWithArgs, httpArgs) {\n\n\tvar speechProcess = runSpeechProcess(cmdWithArgs);\n\n\tspeechProcess.on('error', onLastSpeechError.bind(this, httpArgs));\n\tspeechProcess.on('close', onLastSpeechClose);\n\tspeechProcess.on('exit', onLastSpeechExit.bind(this, httpArgs));\n\n\treturn speechProcess;\n}\n\nfunction runSpeechProcess(cmdWithArgs) {\n\n\tvar newProcess = childProcess.spawn(cmdWithArgs.cmd, cmdWithArgs.args);\n\n\tnewProcess.stderr.on('data', onSpeechStandardError);\n\n\treturn newProcess;\n}\n\nfunction onSpeechStandardError(buffer) {\n\n\tconsole.error('[stderr]:', buffer.toString('utf8'));\n}\n\nfunction runSpeechProcessChain(cmdWithArgs, httpArgs) {\n\n\tvar speechProcs = {};\n\n\tfor (var i = 0; i < cmdWithArgs.length; i++) {\n\t\tif (i !== cmdWithArgs.length - 1) {\n\t\t\tvar getNextProcessCbk = getNextSpeechProcess.bind(speechProcs, i + 1);\n\t\t\tspeechProcs[i] = runIntermediateSpeechProcess(cmdWithArgs[i], getNextProcessCbk);\n\t\t} else {\n\t\t\tspeechProcs[i] = runLastSpeechProcess(cmdWithArgs[i], httpArgs);\n\t\t}\n\t}\n}\n\nfunction runIntermediateSpeechProcess(cmdWithArgs, procArgs) {\n\n\tvar speechProcess = runSpeechProcess(cmdWithArgs);\n\n\tspeechProcess.stdout.on('data', onIntermediateSpeechStandardOutput.bind(this, procArgs));\n\tspeechProcess.on('error', onIntermediateSpeechError);\n\tspeechProcess.on('close', onIntermediateSpeechClose.bind(this, procArgs));\n\n\treturn speechProcess;\n}\n\nfunction getNextSpeechProcess(nextIndex) {\n\n\treturn this[nextIndex];\n}\n\nfunction onIntermediateSpeechStandardOutput(getNextProc, data) {\n\n\tvar nextSpeechProcess = getNextProc(),\n\t\tinputStream = nextSpeechProcess.stdin;\n\n\tif (inputStream.writable) {\n\t\tinputStream.write(data);\n\t}\n}\n\nfunction onIntermediateSpeechClose(getNextProc, code) {\n\n\tvar nextSpeechProcess = getNextProc(),\n\t\tinputStream = nextSpeechProcess.stdin;\n\n\tif (code) {\n\t\tconsole.error('[intermediate exit code]:', code);\n\t}\n\n\tinputStream.end();\n}\n\nfunction onIntermediateSpeechError(err) {\n\n\tconsole.error('[intermediate error]:', util.inspect(err));\n}\n\nfunction onLastSpeechClose(code) {\n\n\tif (code) {\n\t\tconsole.error('[exit code]:', code);\n\t}\n}\n\nfunction onLastSpeechExit(args, err) {\n\n\tvar res = args.res;\n\n\tif (!err) {\n\t\tres.end();\n\t} else {\n\t\thandleSpeechError(args, err);\n\t}\n}\n\nfunction onLastSpeechError(args, err) {\n\n\thandleSpeechError(args, err);\n}\n\nfunction handleSpeechError(args, err) {\n\n\tvar res = args.res,\n\t\tfields = args.fields,\n\t\terrorHeaderMessage = '----[error]----',\n\t\tdataHeaderMessage = '-----[data]-----',\n\t\tinspectedError = util.inspect(err),\n\t\tinspectedFields = util.inspect(fields);\n\n\tres.writeHead(500, {\n\t\t'Content-Type': 'text/plain; charset=utf-8'\n\t});\n\n\tres.write(errorHeaderMessage + '\\n');\n\tres.write(inspectedError + '\\n');\n\tres.write(dataHeaderMessage + '\\n');\n\tres.write(inspectedFields + '\\n');\n\n\tres.end();\n\n\tconsole.error(errorHeaderMessage);\n\tconsole.error(inspectedError);\n\tconsole.error(dataHeaderMessage);\n\tconsole.error(inspectedFields);\n}\n"], "filenames": ["app.js"], "buggy_code_start_loc": [23], "buggy_code_end_loc": [131], "fixing_code_start_loc": [23], "fixing_code_end_loc": [279], "type": "CWE-78", "message": "A vulnerability has been found in pedroetb tts-api up to 2.1.4 and classified as critical. This vulnerability affects the function onSpeechDone of the file app.js. The manipulation leads to os command injection. Upgrading to version 2.2.0 is able to address this issue. The patch is identified as 29d9c25415911ea2f8b6de247cb5c4607d13d434. It is recommended to upgrade the affected component. VDB-248278 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2019-25158", "sourceIdentifier": "cna@vuldb.com", "published": "2023-12-19T13:15:43.133", "lastModified": "2024-02-29T01:25:42.023", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in pedroetb tts-api up to 2.1.4 and classified as critical. This vulnerability affects the function onSpeechDone of the file app.js. The manipulation leads to os command injection. Upgrading to version 2.2.0 is able to address this issue. The patch is identified as 29d9c25415911ea2f8b6de247cb5c4607d13d434. It is recommended to upgrade the affected component. VDB-248278 is the identifier assigned to this vulnerability."}, {"lang": "es", "value": "Una vulnerabilidad ha sido encontrada en pedroetb tts-api hasta 2.1.4 y clasificada como cr\u00edtica. Esta vulnerabilidad afecta a la funci\u00f3n onSpeechDone del archivo app.js. La manipulaci\u00f3n conduce a la inyecci\u00f3n de comandos del sistema operativo. La actualizaci\u00f3n a la versi\u00f3n 2.2.0 puede solucionar este problema. El parche se identifica como 29d9c25415911ea2f8b6de247cb5c4607d13d434. Se recomienda actualizar el componente afectado. VDB-248278 es el identificador asignado a esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pedroetb:tts-api:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.2.0", "matchCriteriaId": "6A7BC92B-21CF-43A4-87DC-12008F7AC264"}]}]}], "references": [{"url": "https://github.com/pedroetb/tts-api/commit/29d9c25415911ea2f8b6de247cb5c4607d13d434", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/pedroetb/tts-api/releases/tag/v2.2.0", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.248278", "source": "cna@vuldb.com", "tags": ["Permissions Required"]}, {"url": "https://vuldb.com/?id.248278", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pedroetb/tts-api/commit/29d9c25415911ea2f8b6de247cb5c4607d13d434"}}