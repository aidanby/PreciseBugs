{"buggy_code": ["<?php\n\nrequire_once('../Slim/Slim.php');\n\nclass DB extends PDO {\n\n\tprotected $dbname\t = 'db71989';\n\tprotected $dbuser\t = 'root';\n\tprotected $dbpw\t\t = 'usbw';\n\tprotected $dbport\t = '3307';\n\tprotected $dbserver  = 'localhost';\n\n\tpublic function __construct($options = Null){\n\t\t\n\t\tif(!isset($options)) {\n\n\t\t\t$options = array(\n\t\t    \n\t\t    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,\n\t\t    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC\n\t\t\t);\n\t\t}\n\n\t\tparent::__construct('mysql:host='. $this->dbserver . ';dbname=' . $this->dbname . ';port=' . $this->dbport, $this->dbuser, $this->dbpw, $options);\n\t}\n\n\tpublic function GetAllAnimals(){\n\n\t\t$query = 'SELECT `id`, `naam` FROM `meol1_dieren`';\n\n        $reponse = parent::prepare($query);\n        $reponse->execute();\n        $result\t = $reponse->fetchAll(PDO::FETCH_ASSOC);\n\n        return $result;\n\t}\n\n\tpublic function GetAnimal($where){\n\n\t\t$query = 'SELECT `id`, `naam` FROM `meol1_dieren` ';\n\n\t\t//Quickhand if decides wether to filter on name or id based on if the input is numeric. \n\t\t//Have an animal with a numeric name? Too bad. You could solve this if it weren't for a school excercise.\n\t\t$whereCondition = 'WHERE ' . (is_numeric($where) ? 'id=\\''.$where.'\\'' : 'naam=\\''.$where.'\\'');\n\n\t\t$query = $query . $whereCondition . ' LIMIT 1';\n\n\t\t$reponse = parent::prepare($query);\n        $reponse->execute();\n        $result\t = $reponse->fetchAll(PDO::FETCH_ASSOC);\n\n        return $result;\n\t}\n}\n\n\n\n\\Slim\\Slim::registerAutoloader();\n\n$slim = new \\Slim\\Slim();\n\n$slim->get('/dieren', function(){\n\n\t$db \t = new DB();\n\t$dieren  = $db->GetAllAnimals();\n\t\n\tprint(json_encode($dieren));\n});\n\n$slim->get('/dieren/:id', function($id){\n\t\n\t$db \t = new DB();\n\t$dieren  = $db->GetAnimal($id);\n\t\n\tprint(json_encode($dieren));\n});\n\n$slim->run();"], "fixing_code": ["<?php\n\nrequire_once('../Slim/Slim.php');\n\nclass DB extends PDO {\n\n\tprotected $dbname\t = 'db71989';\n\tprotected $dbuser\t = 'root';\n\tprotected $dbpw\t\t = 'usbw';\n\tprotected $dbport\t = '3307';\n\tprotected $dbserver  = 'localhost';\n\n\tpublic function __construct($options = Null){\n\t\t\n\t\tif(!isset($options)) {\n\n\t\t\t$options = array(\n\t\t\t    PDO::ATTR_EMULATE_PREPARES => false,\n\t\t\t    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,\n\t\t\t    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC\n\t\t\t);\n\t\t}\n\n\t\tparent::__construct('mysql:host='. $this->dbserver . ';dbname=' . $this->dbname . ';port=' . $this->dbport, $this->dbuser, $this->dbpw, $options);\n\t}\n\n\tpublic function GetAllAnimals(){\n\n\t\t$query = 'SELECT `id`, `naam` FROM `meol1_dieren`';\n\n        $reponse = parent::prepare($query);\n        $reponse->execute();\n        $result\t = $reponse->fetchAll(PDO::FETCH_ASSOC);\n\n        return $result;\n\t}\n\n\tpublic function GetAnimal($where){\n\n\t\t$query = 'SELECT `id`, `naam` FROM `meol1_dieren` ';\n\n\t\t//Quickhand if decides wether to filter on name or id based on if the input is numeric. \n\t\t//Have an animal with a numeric name? Too bad. You could solve this if it weren't for a school excercise.\n\t\t$whereCondition = 'WHERE ' . (is_numeric($where) ? 'id=UNHEX(:where)' : 'naam=UNHEX(:where)');\n\n\t\t$query = $query . $whereCondition . ' LIMIT 1';\n\n\t\t$reponse = parent::prepare($query);\n\t\t$where = bin2hex($where);\n\n\t\t$reponse->bindParam(':where', $where);\n\n        $reponse->execute();\n        $result\t = $reponse->fetchAll(PDO::FETCH_ASSOC);\n\n        return $result;\n\t}\n}\n\n\n\n\\Slim\\Slim::registerAutoloader();\n\n$slim = new \\Slim\\Slim();\n\n$slim->get('/dieren', function(){\n\n\t$db \t = new DB();\n\t$dieren  = $db->GetAllAnimals();\n\t\n\tprint(json_encode($dieren));\n});\n\n$slim->get('/dieren/:id', function($id){\n\t\n\t$db \t = new DB();\n\t$dieren  = $db->GetAnimal($id);\n\t\n\tprint(json_encode($dieren));\n});\n\n$slim->run();"], "filenames": ["opdracht4/index.php"], "buggy_code_start_loc": [18], "buggy_code_end_loc": [48], "fixing_code_start_loc": [18], "fixing_code_end_loc": [53], "type": "CWE-89", "message": "A vulnerability has been found in meol1 and classified as critical. Affected by this vulnerability is the function GetAnimal of the file opdracht4/index.php. The manipulation of the argument where leads to sql injection. The name of the patch is 82441e413f87920d1e8f866e8ef9d7f353a7c583. It is recommended to apply a patch to fix this issue. The identifier VDB-217525 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125045", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-05T22:15:08.700", "lastModified": "2023-01-11T21:09:49.377", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in meol1 and classified as critical. Affected by this vulnerability is the function GetAnimal of the file opdracht4/index.php. The manipulation of the argument where leads to sql injection. The name of the patch is 82441e413f87920d1e8f866e8ef9d7f353a7c583. It is recommended to apply a patch to fix this issue. The identifier VDB-217525 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:meol1_project:meol1:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-11-24", "matchCriteriaId": "47D8B2F8-449F-40C9-AA10-BC319609DB1E"}]}]}], "references": [{"url": "https://github.com/Miesvanderlippe/meol1/commit/82441e413f87920d1e8f866e8ef9d7f353a7c583", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217525", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.217525", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/Miesvanderlippe/meol1/commit/82441e413f87920d1e8f866e8ef9d7f353a7c583"}}