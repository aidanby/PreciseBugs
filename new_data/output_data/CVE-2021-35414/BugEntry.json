{"buggy_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nrequire_once '../../inc/global.inc.php';\nrequire_once '../../work/work.lib.php';\n\nini_set('soap.wsdl_cache_enabled', 0);\nini_set('default_socket_timeout', '1000');\n\napi_set_more_memory_and_time_limits();\n\n$courseId = api_get_course_int_id();\n$courseInfo = api_get_course_info();\n$compilatio = new Compilatio();\n\n/* if we have to upload severals documents*/\nif (isset($_REQUEST['type']) && 'multi' === $_REQUEST['type']) {\n    $docs = explode('a', $_REQUEST['doc']);\n    for ($k = 0; $k < count($docs) - 1; $k++) {\n        $documentId = 0;\n        if (!isset($docs[$k])) {\n            $documentId = (int) $docs[$k];\n        }\n\n        /**\n         * File problem in the url field that no longer have the file extension,\n         * Compilatio's server refuse the files\n         * we renames in the FS and the database with the file extension that is found in the title field.\n         */\n        compilatioUpdateWorkDocument($documentId, $courseId);\n\n        $compilatioId = $compilatio->getCompilatioId($documentId, $courseId);\n        if (empty($compilatioId)) {\n            $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n            $query = \"SELECT * FROM $workTable WHERE id= $documentId AND c_id= $courseId\";\n            $sqlResult = Database::query($query);\n            $doc = Database::fetch_object($sqlResult);\n            if ($doc) {\n                /*We load the document in compilatio through the webservice */\n                $currentCourseRepositoryWeb = api_get_path(WEB_COURSE_PATH).$courseInfo['path'].'/';\n                $WrkUrl = $currentCourseRepositoryWeb.$doc->url;\n                $LocalWrkUrl = $courseInfo['course_sys_path'].$doc->url;\n                $mime = DocumentManager::file_get_mime_type($doc->title);\n                if ('wget' === $compilatio->getTransportMode()) {\n                    /*Compilatio's server recover tjre file throught wget like this:\n                    username:password@http://somedomain.com/reg/remotefilename.tar.gz */\n                    if (strlen($compilatio->getWgetUri()) > 2) {\n                        $filename = preg_replace(\n                                '/$',\n                                '',\n                                $compilatio->getWgetUri()\n                            ).'/'.$courseInfo['path'].'/'.$doc->url;\n                    } else {\n                        $filename = $WrkUrl;\n                    }\n                    if (strlen($compilatio->getWgetLogin()) > 2) {\n                        $filename = $compilatio->getWgetLogin().':'.$compilatio->getWgetPassword().'@'.$filename;\n                    }\n                    $mime = 'text/plain';\n                    $compilatioId = $compilatio->sendDoc($doc->title, '', $filename, $mime, 'get_url');\n                } else {\n                    /* we use strictly the SOAP for the data trasmission */\n                    $pieces = explode('/', $doc->url);\n                    $nbPieces = count($pieces);\n                    $filename = $pieces[$nbPieces - 1];\n                    $compilatioId = $compilatio->sendDoc(\n                        $doc->title,\n                        '',\n                        $filename,\n                        $mime,\n                        file_get_contents($LocalWrkUrl)\n                    );\n                }\n                /*we associate in the database the document chamilo to the document compilatio*/\n                /*we verify that the docmuent's id is an hash_md5*/\n                if (Compilatio::isMd5($compilatioId)) {\n                    $compilatio->saveDocument($courseId, $doc->id, $compilatioId);\n                    $soapRes = $compilatio->startAnalyse($compilatioId);\n                }\n            }\n        }\n    }\n} else {\n    $documentId = isset($_GET['doc']) ? $_GET['doc'] : 0;\n    sendDocument($documentId, $courseInfo);\n}\n\nfunction sendDocument($documentId, $courseInfo)\n{\n    $courseId = $courseInfo['real_id'];\n\n    compilatioUpdateWorkDocument($documentId, $courseId);\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $query = \"SELECT * FROM $workTable\n              WHERE id = $documentId AND c_id= $courseId\";\n    $sqlResult = Database::query($query);\n    $doc = Database::fetch_object($sqlResult);\n    $currentCourseRepositoryWeb = api_get_path(WEB_COURSE_PATH).$courseInfo['path'].'/';\n    $documentUrl = $currentCourseRepositoryWeb.$doc->url;\n\n    $filePath = $courseInfo['course_sys_path'].$doc->url;\n    $mime = DocumentManager::file_get_mime_type($doc->title);\n\n    $compilatio = new Compilatio();\n    if ('wget' === $compilatio->getTransportMode()) {\n        if (strlen($compilatio->getWgetUri()) > 2) {\n            $filename = preg_replace('/$', '', $compilatio->getWgetUri()).'/'.$courseInfo['path'].'/'.$doc->title;\n        } else {\n            $filename = $documentUrl;\n        }\n        if (strlen($compilatio->getWgetLogin()) > 2) {\n            $filename = $compilatio->getWgetLogin().':'.$compilatio->getWgetPassword().'@'.$filename;\n        }\n        $compilatioId = $compilatio->sendDoc($doc->title, '', $filename, 'text/plain', 'get_url');\n    } else {\n        $pieces = explode('/', $doc->url);\n        $nbPieces = count($pieces);\n        $filename = $pieces[$nbPieces - 1];\n        $compilatioId = $compilatio->sendDoc($doc->title, '', $filename, $mime, file_get_contents($filePath));\n    }\n\n    if (Compilatio::isMd5($compilatioId)) {\n        $compilatio->saveDocument($courseId, $doc->id, $compilatioId);\n        $compilatio->startAnalyse($compilatioId);\n        echo Display::return_message(get_lang('Uploaded'));\n    } else {\n        echo Display::return_message(get_lang('Error'), 'error');\n    }\n}\n\n/**\n * function for show and recovery the extension from a file.\n *\n * @param $docId\n * @param $courseId\n *\n * @return string\n */\nfunction workDocExtension($docId, $courseId)\n{\n    $dbTitle = getWorkTitle($docId, $courseId);\n    $res = getFileExtension($dbTitle);\n\n    return $res;\n}\n\nfunction getFileExtension($filename)\n{\n    $res = '';\n    preg_match(\"/.*\\.([^.]+)/\", $filename, $dbTitle);\n    if (count($dbTitle) > 1) {\n        $res = $dbTitle[1];\n    }\n\n    return $res;\n}\n\nfunction getWorkTitle($docId, $courseId)\n{\n    $docId = (int) $docId;\n    $courseId = (int) $courseId;\n\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $sql = \"SELECT title FROM $workTable\n            WHERE c_id= $courseId AND id = $docId\";\n    $res = Database::query($sql);\n    if (Database::num_rows($res) > 0) {\n        $data = Database::fetch_array($res);\n        $res = $data['title'];\n    }\n\n    return $res;\n}\n\nfunction getFilename($txt)\n{\n    $res = $txt;\n    preg_match('|.*/([^/]+)|', $txt, $urlList);\n    if (count($urlList) > 0) {\n        $res = $urlList[1];\n    }\n\n    return $res;\n}\n\nfunction getWorkFolder($txt)\n{\n    $res = '';\n    preg_match('|(.*/)[^/]+|', $txt, $urlList);\n    if (count($urlList) > 0) {\n        $res = $urlList[1];\n    }\n\n    return $res;\n}\n\nfunction getShortFilename($txt)\n{\n    $res = $txt;\n    if (strlen($txt) > 10) {\n        $res = substr($txt, 0, 10);\n    }\n\n    return $res;\n}\n\nfunction compilatioUpdateWorkDocument($docId, $courseId)\n{\n    $_course = api_get_course_info();\n\n    $docId = (int) $docId;\n    $courseId = (int) $courseId;\n\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $extensionFile = workDocExtension($docId, $courseId);\n    $urlFile = get_work_path($docId);\n    $filename = getFilename($urlFile);\n    $work_folder = getWorkFolder($urlFile);\n    $urlFile_ext = getFileExtension($urlFile);\n    $coursePath = $_course['course_sys_path'];\n    $workTitle = getWorkTitle($docId, $courseId);\n\n    if ($extensionFile != '' && $urlFile_ext == '') {\n        /* Rename the files in the FS with the extension */\n        $shortFilename = $filename;\n        $cleanWorkTitle = api_replace_dangerous_char($workTitle);\n        $newestFilename = $shortFilename.'_'.$cleanWorkTitle;\n        rename($coursePath.$urlFile, $coursePath.$work_folder.$newestFilename);\n        /*rename the db's input with the extension*/\n        $sql = \"UPDATE $workTable SET url='\".$work_folder.$newestFilename.\"'\n                WHERE c_id=$courseId AND id=$docId\";\n        Database::query($sql);\n    }\n}\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nrequire_once '../../inc/global.inc.php';\nrequire_once '../../work/work.lib.php';\n\nini_set('soap.wsdl_cache_enabled', 0);\nini_set('default_socket_timeout', '1000');\n\napi_set_more_memory_and_time_limits();\n\n$courseId = api_get_course_int_id();\n$courseInfo = api_get_course_info();\n$compilatio = new Compilatio();\n\n/* if we have to upload severals documents*/\nif (isset($_REQUEST['type']) && 'multi' === $_REQUEST['type']) {\n    $docs = explode('a', $_REQUEST['doc']);\n    for ($k = 0; $k < count($docs) - 1; $k++) {\n        $documentId = 0;\n        if (!isset($docs[$k])) {\n            $documentId = (int) $docs[$k];\n        }\n\n        /**\n         * File problem in the url field that no longer have the file extension,\n         * Compilatio's server refuse the files\n         * we renames in the FS and the database with the file extension that is found in the title field.\n         */\n        compilatioUpdateWorkDocument($documentId, $courseId);\n\n        $compilatioId = $compilatio->getCompilatioId($documentId, $courseId);\n        if (empty($compilatioId)) {\n            $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n            $query = \"SELECT * FROM $workTable WHERE id= $documentId AND c_id= $courseId\";\n            $sqlResult = Database::query($query);\n            $doc = Database::fetch_object($sqlResult);\n            if ($doc) {\n                /*We load the document in compilatio through the webservice */\n                $currentCourseRepositoryWeb = api_get_path(WEB_COURSE_PATH).$courseInfo['path'].'/';\n                $WrkUrl = $currentCourseRepositoryWeb.$doc->url;\n                $LocalWrkUrl = $courseInfo['course_sys_path'].$doc->url;\n                $mime = DocumentManager::file_get_mime_type($doc->title);\n                if ('wget' === $compilatio->getTransportMode()) {\n                    /*Compilatio's server recover tjre file throught wget like this:\n                    username:password@http://somedomain.com/reg/remotefilename.tar.gz */\n                    if (strlen($compilatio->getWgetUri()) > 2) {\n                        $filename = preg_replace(\n                                '/$',\n                                '',\n                                $compilatio->getWgetUri()\n                            ).'/'.$courseInfo['path'].'/'.$doc->url;\n                    } else {\n                        $filename = $WrkUrl;\n                    }\n                    if (strlen($compilatio->getWgetLogin()) > 2) {\n                        $filename = $compilatio->getWgetLogin().':'.$compilatio->getWgetPassword().'@'.$filename;\n                    }\n                    $mime = 'text/plain';\n                    $compilatioId = $compilatio->sendDoc($doc->title, '', $filename, $mime, 'get_url');\n                } else {\n                    /* we use strictly the SOAP for the data trasmission */\n                    $pieces = explode('/', $doc->url);\n                    $nbPieces = count($pieces);\n                    $filename = $pieces[$nbPieces - 1];\n                    $compilatioId = $compilatio->sendDoc(\n                        $doc->title,\n                        '',\n                        $filename,\n                        $mime,\n                        file_get_contents($LocalWrkUrl)\n                    );\n                }\n                /*we associate in the database the document chamilo to the document compilatio*/\n                /*we verify that the docmuent's id is an hash_md5*/\n                if (Compilatio::isMd5($compilatioId)) {\n                    $compilatio->saveDocument($courseId, $doc->id, $compilatioId);\n                    $soapRes = $compilatio->startAnalyse($compilatioId);\n                }\n            }\n        }\n    }\n} else {\n    $documentId = isset($_GET['doc']) ? $_GET['doc'] : 0;\n    sendDocument($documentId, $courseInfo);\n}\n\nfunction sendDocument($documentId, $courseInfo)\n{\n    if (empty($courseInfo)) {\n        return false;\n    }\n\n    $courseId = $courseInfo['real_id'] ?? 0;\n    $documentId = (int) $documentId;\n\n    if (empty($courseId) || empty($documentId)) {\n        return false;\n    }\n\n    compilatioUpdateWorkDocument($documentId, $courseId);\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $query = \"SELECT * FROM $workTable\n              WHERE id = $documentId AND c_id= $courseId\";\n    $sqlResult = Database::query($query);\n    $doc = Database::fetch_object($sqlResult);\n    $currentCourseRepositoryWeb = api_get_path(WEB_COURSE_PATH).$courseInfo['path'].'/';\n    $documentUrl = $currentCourseRepositoryWeb.$doc->url;\n\n    $filePath = $courseInfo['course_sys_path'].$doc->url;\n    $mime = DocumentManager::file_get_mime_type($doc->title);\n\n    $compilatio = new Compilatio();\n    if ('wget' === $compilatio->getTransportMode()) {\n        if (strlen($compilatio->getWgetUri()) > 2) {\n            $filename = preg_replace('/$', '', $compilatio->getWgetUri()).'/'.$courseInfo['path'].'/'.$doc->title;\n        } else {\n            $filename = $documentUrl;\n        }\n        if (strlen($compilatio->getWgetLogin()) > 2) {\n            $filename = $compilatio->getWgetLogin().':'.$compilatio->getWgetPassword().'@'.$filename;\n        }\n        $compilatioId = $compilatio->sendDoc($doc->title, '', $filename, 'text/plain', 'get_url');\n    } else {\n        $pieces = explode('/', $doc->url);\n        $nbPieces = count($pieces);\n        $filename = $pieces[$nbPieces - 1];\n        $compilatioId = $compilatio->sendDoc($doc->title, '', $filename, $mime, file_get_contents($filePath));\n    }\n\n    if (Compilatio::isMd5($compilatioId)) {\n        $compilatio->saveDocument($courseId, $doc->id, $compilatioId);\n        $compilatio->startAnalyse($compilatioId);\n        echo Display::return_message(get_lang('Uploaded'));\n    } else {\n        echo Display::return_message(get_lang('Error'), 'error');\n    }\n}\n\n/**\n * function for show and recovery the extension from a file.\n *\n * @param $docId\n * @param $courseId\n *\n * @return string\n */\nfunction workDocExtension($docId, $courseId)\n{\n    $dbTitle = getWorkTitle($docId, $courseId);\n    $res = getFileExtension($dbTitle);\n\n    return $res;\n}\n\nfunction getFileExtension($filename)\n{\n    $res = '';\n    preg_match(\"/.*\\.([^.]+)/\", $filename, $dbTitle);\n    if (count($dbTitle) > 1) {\n        $res = $dbTitle[1];\n    }\n\n    return $res;\n}\n\nfunction getWorkTitle($docId, $courseId)\n{\n    $docId = (int) $docId;\n    $courseId = (int) $courseId;\n\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $sql = \"SELECT title FROM $workTable\n            WHERE c_id= $courseId AND id = $docId\";\n    $res = Database::query($sql);\n    if (Database::num_rows($res) > 0) {\n        $data = Database::fetch_array($res);\n        $res = $data['title'];\n    }\n\n    return $res;\n}\n\nfunction getFilename($txt)\n{\n    $res = $txt;\n    preg_match('|.*/([^/]+)|', $txt, $urlList);\n    if (count($urlList) > 0) {\n        $res = $urlList[1];\n    }\n\n    return $res;\n}\n\nfunction getWorkFolder($txt)\n{\n    $res = '';\n    preg_match('|(.*/)[^/]+|', $txt, $urlList);\n    if (count($urlList) > 0) {\n        $res = $urlList[1];\n    }\n\n    return $res;\n}\n\nfunction getShortFilename($txt)\n{\n    $res = $txt;\n    if (strlen($txt) > 10) {\n        $res = substr($txt, 0, 10);\n    }\n\n    return $res;\n}\n\nfunction compilatioUpdateWorkDocument($docId, $courseId)\n{\n    $_course = api_get_course_info();\n\n    $docId = (int) $docId;\n    $courseId = (int) $courseId;\n\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $extensionFile = workDocExtension($docId, $courseId);\n    $urlFile = get_work_path($docId);\n    $filename = getFilename($urlFile);\n    $work_folder = getWorkFolder($urlFile);\n    $urlFile_ext = getFileExtension($urlFile);\n    $coursePath = $_course['course_sys_path'];\n    $workTitle = getWorkTitle($docId, $courseId);\n\n    if ($extensionFile != '' && $urlFile_ext == '') {\n        /* Rename the files in the FS with the extension */\n        $shortFilename = $filename;\n        $cleanWorkTitle = api_replace_dangerous_char($workTitle);\n        $newestFilename = $shortFilename.'_'.$cleanWorkTitle;\n        rename($coursePath.$urlFile, $coursePath.$work_folder.$newestFilename);\n        /*rename the db's input with the extension*/\n        $sql = \"UPDATE $workTable SET url='\".$work_folder.$newestFilename.\"'\n                WHERE c_id=$courseId AND id=$docId\";\n        Database::query($sql);\n    }\n}\n"], "filenames": ["main/plagiarism/compilatio/upload.php"], "buggy_code_start_loc": [91], "buggy_code_end_loc": [92], "fixing_code_start_loc": [91], "fixing_code_end_loc": [101], "type": "CWE-89", "message": "Chamilo LMS v1.11.x was discovered to contain a SQL injection via the doc parameter in main/plagiarism/compilatio/upload.php.", "other": {"cve": {"id": "CVE-2021-35414", "sourceIdentifier": "cve@mitre.org", "published": "2021-12-03T22:15:07.580", "lastModified": "2021-12-06T19:13:49.900", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo LMS v1.11.x was discovered to contain a SQL injection via the doc parameter in main/plagiarism/compilatio/upload.php."}, {"lang": "es", "value": "Se ha detectado que Chamilo LMS versi\u00f3n v1.11.x, contiene una inyecci\u00f3n SQL por medio del par\u00e1metro doc en el archivo main/plagiarism/compilatio/upload.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.16", "matchCriteriaId": "99B19DF3-CF09-4E80-A1E6-9A66F9424B16"}]}]}], "references": [{"url": "https://github.com/andrejspuler/writeups/tree/main/chamilo-lms#unauthenticated-sql-injection-2-in-plugin", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/andrejspuler/writeups/tree/main/chamilo-lms#unauthenticated-sql-injection-in-compilatio-module", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/36149c1ff99973840a809bb865f23e1b23d6df00", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/6a98e32bb04aa66cbd0d29ad74d7d20cc7e7e9c5", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/f398b5b45c019f873a54fe25c815dbaaf963728b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-59-2021-05-13-High-impact-low-risk-Unauthenticated-SQL-injection-vulnerability-when-a-module-is-enabled", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-65-2021-05-15-High-impact-very-high-risk-Unauthenticated-SQL-injection-in-plugin", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/36149c1ff99973840a809bb865f23e1b23d6df00"}}