{"buggy_code": ["/*\n *\n *  Copyright (C) 1994-2021, OFFIS e.V.\n *  All rights reserved.  See COPYRIGHT file for details.\n *\n *  This software and supporting documentation were partly developed by\n *\n *    OFFIS e.V.\n *    R&D Division Health\n *    Escherweg 2\n *    D-26121 Oldenburg, Germany\n *\n *  For further copyrights, see the following paragraphs.\n *\n */\n\n/*\n**  Copyright (C) 1993/1994, OFFIS, Oldenburg University and CERIUM\n**\n**  This software and supporting documentation were\n**  developed by\n**\n**    Institut OFFIS\n**    Bereich Kommunikationssysteme\n**    Westerstr. 10-12\n**    26121 Oldenburg, Germany\n**\n**    Fachbereich Informatik\n**    Abteilung Prozessinformatik\n**    Carl von Ossietzky Universitaet Oldenburg\n**    Ammerlaender Heerstr. 114-118\n**    26111 Oldenburg, Germany\n**\n**    CERIUM\n**    Laboratoire SIM\n**    Faculte de Medecine\n**    2 Avenue du Pr. Leon Bernard\n**    35043 Rennes Cedex, France\n**\n**  for CEN/TC251/WG4 as a contribution to the Radiological\n**  Society of North America (RSNA) 1993 Digital Imaging and\n**  Communications in Medicine (DICOM) Demonstration.\n**\n**  THIS SOFTWARE IS MADE AVAILABLE, AS IS, AND NEITHER OFFIS,\n**  OLDENBURG UNIVERSITY NOR CERIUM MAKE ANY WARRANTY REGARDING\n**  THE SOFTWARE, ITS PERFORMANCE, ITS MERCHANTABILITY OR\n**  FITNESS FOR ANY PARTICULAR USE, FREEDOM FROM ANY COMPUTER\n**  DISEASES OR ITS CONFORMITY TO ANY SPECIFICATION.  THE\n**  ENTIRE RISK AS TO QUALITY AND PERFORMANCE OF THE SOFTWARE\n**  IS WITH THE USER.\n**\n**  Copyright of the software and supporting documentation\n**  is, unless otherwise stated, jointly owned by OFFIS,\n**  Oldenburg University and CERIUM and free access is hereby\n**  granted as a license to use this software, copy this\n**  software and prepare derivative works based upon this\n**  software. However, any distribution of this software\n**  source code or supporting documentation or derivative\n**  works (source code and supporting documentation) must\n**  include the three paragraphs of this copyright notice.\n**\n*/\n\n/*\n**\n** Author: Andrew Hewett                Created: 11-08-93\n**\n** Module: diutil\n**\n** Purpose:\n**     This file contains the interface to\n**     some general useful dicom utility routines\n**\n** Module Prefix: DU_\n*/\n\n\n\n#include \"dcmtk/config/osconfig.h\"    /* make sure OS specific configuration is included first */\n\n#ifdef HAVE_UNIX_H\n#if defined(macintosh) && defined (HAVE_WINSOCK_H)\n/* unix.h defines timeval incompatible with winsock.h */\n#define timeval _UNWANTED_timeval\n#endif\n#include <unix.h>       /* for unlink() under Metrowerks C++ (Macintosh) */\n#undef timeval\n#endif\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_STAT_H\n#include <sys/stat.h>\n#endif\n#ifdef HAVE_STAT_H\n#include <stat.h>\n#endif\n\n#include \"dcmtk/ofstd/ofstd.h\"\n#include \"dcmtk/dcmnet/diutil.h\"\n#include \"dcmtk/dcmdata/dcdatset.h\"\n#include \"dcmtk/dcmdata/dcfilefo.h\"\n#include \"dcmtk/dcmdata/dcmetinf.h\"\n#include \"dcmtk/dcmdata/dcdeftag.h\"\n#include \"dcmtk/dcmdata/dcuid.h\"\n#include \"dcmtk/dcmdata/dcbytstr.h\"\n\nstatic char staticBuf[256];\n\nOFLogger DCM_dcmnetLogger = OFLog::getLogger(DCMNET_LOGGER_NAME);\n\n#define TO_UCHAR(s) OFstatic_cast(unsigned char, (s))\nvoid\nDU_stripTrailingSpaces(char *s)\n{\n    int i, n;\n\n    if (s)\n    {\n        n = OFstatic_cast(int, strlen(s));\n        for (i = n - 1; i >= 0 && isspace(TO_UCHAR(s[i])); i--)\n            s[i] = '\\0';\n    }\n}\n\nvoid\nDU_stripLeadingSpaces(char *s)\n{\n    int i, j, n;\n\n    if (s == NULL) return;\n    n = OFstatic_cast(int, strlen(s));\n    if (n == 0) return;\n    if (!isspace(TO_UCHAR(s[0]))) return; /* no leading space */\n\n    /* first non-space */\n    for (i=0; i<n && isspace(TO_UCHAR(s[i])); i++)\n        /* do nothing, just iterate */\n        ;\n    if (i<n) {\n        /* found non-space, pull to front (inclusive '\\0') */\n        for (j=i; j<=n; j++) {\n            s[j-i] = s[j];\n        }\n    } else {\n        /* all spaces */\n        s[0] = '\\0';\n    }\n}\n\nvoid\nDU_stripLeadingAndTrailingSpaces(char *s)\n{\n    DU_stripLeadingSpaces(s);\n    DU_stripTrailingSpaces(s);\n}\n#undef TO_UCHAR\n\nOFBool\nDU_getStringDOElement(DcmItem *obj, DcmTagKey t, char *s, size_t bufsize)\n{\n    DcmByteString *elem;\n    DcmStack stack;\n    OFCondition ec = EC_Normal;\n    char* aString;\n\n    ec = obj->search(t, stack);\n    elem = (DcmByteString*) stack.top();\n    if (ec == EC_Normal && elem != NULL) {\n        if (elem->getLength() == 0) {\n            s[0] = '\\0';\n        } else {\n            ec =  elem->getString(aString);\n            OFStandard::strlcpy(s, aString, bufsize);\n        }\n    }\n    return (ec == EC_Normal);\n}\n\nOFBool\nDU_putStringDOElement(DcmItem *obj, DcmTagKey t, const char *s)\n{\n    OFCondition ec = EC_Normal;\n    DcmElement *e = NULL;\n    DcmTag tag(t);\n\n    ec = DcmItem::newDicomElement(e, tag);\n    if (ec == EC_Normal && s != NULL) {\n        ec = e->putString(s);\n    }\n    if (ec == EC_Normal) {\n        ec = obj->insert(e, OFTrue);\n    }\n\n    return (ec == EC_Normal);\n}\n\nOFBool\nDU_getShortDOElement(DcmItem *obj, DcmTagKey t, Uint16 *us)\n{\n    DcmElement *elem;\n    DcmStack stack;\n    OFCondition ec = EC_Normal;\n\n    ec = obj->search(t, stack);\n    elem = (DcmElement*) stack.top();\n    if (ec == EC_Normal && elem != NULL) {\n        ec = elem->getUint16(*us, 0);\n    }\n\n    return (ec == EC_Normal);\n}\n\nOFBool\nDU_putShortDOElement(DcmItem *obj, DcmTagKey t, Uint16 us)\n{\n    OFCondition ec = EC_Normal;\n    DcmElement *e = NULL;\n    DcmTag tag(t);\n\n    ec = DcmItem::newDicomElement(e, tag);\n    if (ec == EC_Normal) {\n        ec = e->putUint16(us);\n    }\n    if (ec == EC_Normal) {\n        ec = obj->insert(e, OFTrue);\n    }\n    return (ec == EC_Normal);\n}\n\nOFBool\nDU_findSOPClassAndInstanceInDataSet(\n  DcmItem *obj,\n  char* sopClass,\n  size_t sopClassSize,\n  char* sopInstance,\n  size_t sopInstanceSize,\n  OFBool tolerateSpacePaddedUIDs)\n{\n    OFBool result = (DU_getStringDOElement(obj, DCM_SOPClassUID, sopClass, sopClassSize) &&\n        DU_getStringDOElement(obj, DCM_SOPInstanceUID, sopInstance, sopInstanceSize));\n\n    if (tolerateSpacePaddedUIDs)\n    {\n        /* gracefully correct space-padded UID strings */\n        int slength;\n\n        if ((0 < (slength=OFstatic_cast(int, strlen(sopClass))))&&(sopClass[slength-1]==' '))\n            sopClass[slength-1]=0;\n        if ((0 < (slength=OFstatic_cast(int, strlen(sopInstance))))&&(sopInstance[slength-1]==' '))\n            sopInstance[slength-1]=0;\n    }\n    return result;\n}\n\nOFBool\nDU_findSOPClassAndInstanceInFile(\n  const char *fname,\n  char* sopClass,\n  size_t sopClassSize,\n  char* sopInstance,\n  size_t sopInstanceSize,\n  OFBool tolerateSpacePaddedUIDs)\n{\n    DcmFileFormat ff;\n    if (! ff.loadFile(fname, EXS_Unknown, EGL_noChange).good())\n        return OFFalse;\n\n    /* look in the meta-header first */\n    OFBool found = DU_findSOPClassAndInstanceInDataSet(\n        ff.getMetaInfo(), sopClass, sopClassSize, sopInstance, sopInstanceSize, tolerateSpacePaddedUIDs);\n\n    if (!found) {\n        found = DU_findSOPClassAndInstanceInDataSet(\n            ff.getDataset(), sopClass, sopClassSize, sopInstance, sopInstanceSize, tolerateSpacePaddedUIDs);\n    }\n\n    return found;\n}\n\nconst char *\nDU_cechoStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    if (statusCode == STATUS_Success)\n        s = \"Success\";\n    else {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_cstoreStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_STORE_Refused_SOPClassNotSupported:\n          s = \"Refused: SOPClassNotSupported\";\n          break;\n      case STATUS_STORE_Warning_CoercionOfDataElements:\n          s = \"Warning: CoercionOfDataElements\";\n          break;\n      case STATUS_STORE_Warning_DataSetDoesNotMatchSOPClass:\n          s = \"Warning: DataSetDoesNotMatchSOPClass\";\n          break;\n      case STATUS_STORE_Warning_ElementsDiscarded:\n          s = \"Warning: ElementsDiscarded\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xff00) {      /* high byte significant */\n      case STATUS_STORE_Refused_OutOfResources:   /* high byte */\n          s = \"Refused: OutOfResources\";\n          break;\n      case STATUS_STORE_Error_DataSetDoesNotMatchSOPClass:        /* high byte */\n          s = \"Error: DataSetDoesNotMatchSOPClass\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {      /* high nibble significant */\n      case STATUS_STORE_Error_CannotUnderstand:   /* high nibble */\n          s = \"Error: CannotUnderstand\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\n\nconst char *\nDU_cfindStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_Pending:\n          s = \"Pending\";\n          break;\n      case STATUS_FIND_Refused_OutOfResources:\n          s = \"Refused: OutOfResources\";\n          break;\n      case STATUS_FIND_Refused_SOPClassNotSupported:\n          s = \"Refused: SOPClassNotSupported\";\n          break;\n      case STATUS_FIND_Failed_IdentifierDoesNotMatchSOPClass:\n          s = \"Failed: IdentifierDoesNotMatchSOPClass\";\n          break;\n      case STATUS_FIND_Cancel_MatchingTerminatedDueToCancelRequest:\n          s = \"Cancel: MatchingTerminatedDueToCancelRequest\";\n          break;\n      case STATUS_FIND_Pending_WarningUnsupportedOptionalKeys:\n          s = \"Pending: WarningUnsupportedOptionalKeys\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {      /* high nibble significant */\n    case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n        s = \"Failed: UnableToProcess\";\n        break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_cmoveStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_Pending:\n          s = \"Pending\";\n          break;\n      case STATUS_MOVE_Refused_OutOfResourcesNumberOfMatches:\n          s = \"Refused: OutOfResourcesNumberOfMatches\";\n          break;\n      case STATUS_MOVE_Refused_OutOfResourcesSubOperations:\n          s = \"Refused: OutOfResourcesSubOperations\";\n          break;\n      case STATUS_MOVE_Failed_SOPClassNotSupported:\n          s = \"Failed: SOPClassNotSupported\";\n          break;\n      case STATUS_MOVE_Failed_MoveDestinationUnknown:\n          s = \"Failed: MoveDestinationUnknown\";\n          break;\n      case STATUS_MOVE_Failed_IdentifierDoesNotMatchSOPClass:\n          s = \"Failed: IdentifierDoesNotMatchSOPClass\";\n          break;\n      case STATUS_MOVE_Cancel_SubOperationsTerminatedDueToCancelIndication:\n          s = \"Cancel: SubOperationsTerminatedDueToCancelIndication\";\n          break;\n      case STATUS_MOVE_Warning_SubOperationsCompleteOneOrMoreFailures:\n          s = \"Warning: SubOperationsCompleteOneOrMoreFailures\";\n          break;\n\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {      /* high nibble significant */\n      case STATUS_MOVE_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_cgetStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_Pending:\n          s = \"Pending\";\n          break;\n      case STATUS_GET_Refused_OutOfResourcesNumberOfMatches:\n          s = \"Refused: OutOfResourcesNumberOfMatches\";\n          break;\n      case STATUS_GET_Refused_OutOfResourcesSubOperations:\n          s = \"Refused: OutOfResourcesSubOperations\";\n          break;\n      case STATUS_GET_Failed_SOPClassNotSupported:\n          s = \"Failed: SOPClassNotSupported\";\n          break;\n      case STATUS_GET_Failed_IdentifierDoesNotMatchSOPClass:\n          s = \"Failed: IdentifierDoesNotMatchSOPClass\";\n          break;\n      case STATUS_GET_Cancel_SubOperationsTerminatedDueToCancelIndication:\n          s = \"Cancel: SubOperationsTerminatedDueToCancelIndication\";\n          break;\n      case STATUS_GET_Warning_SubOperationsCompleteOneOrMoreFailures:\n          s = \"Warning: SubOperationsCompleteOneOrMoreFailures\";\n          break;\n\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {      /* high nibble significant */\n      case STATUS_GET_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_ncreateStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_DuplicateSOPInstance:\n          s = \"Failure: DuplicateSOPInstance\";\n          break;\n      case STATUS_N_InvalidAttributeValue:\n          s = \"Failure: InvalidAttributeValue\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MissingAttribute:\n          s = \"Failure: MissingAttribute\";\n          break;\n      case STATUS_N_MissingAttributeValue:\n          s = \"Failure: MissingAttributeValue\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_NoSuchAttribute:\n          s = \"Failure: NoSuchAttribute\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_UnrecognizedOperation:\n          s = \"Failure: UnrecognizedOperation\";\n          break;\n      case STATUS_N_AttributeValueOutOfRange:\n          s = \"Warning: AttributeValueOutOfRange\";\n          break;\n    }\n    if (s)\n          return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_ngetStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_AttributeListError:\n          s = \"Warning: AttributeListError\";\n          break;\n      case STATUS_N_AttributeValueOutOfRange:\n          s = \"Warning: AttributeValueOutOfRange\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n          sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n          s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_nsetStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_InvalidAttributeValue:\n          s = \"Failure: InvalidAttributeValue\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MissingAttributeValue:\n          s = \"Failure: MissingAttributeValue\";\n          break;\n      case STATUS_N_NoSuchAttribute:\n          s = \"Failure: NoSuchAttribute\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_UnrecognizedOperation:\n          s = \"Failure: UnrecognizedOperation\";\n          break;\n      case STATUS_N_AttributeValueOutOfRange:\n          s = \"Warning: AttributeValueOutOfRange\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_nactionStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_InvalidArgumentValue:\n          s = \"Failure: InvalidArgumentValue\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_NoSuchAction:\n          s = \"Failure: NoSuchAction\";\n          break;\n      case STATUS_N_NoSuchArgument:\n          s = \"Failure: NoSuchArgument\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_UnrecognizedOperation:\n          s = \"Failure: UnrecognizedOperation\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_ndeleteStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_UnrecognizedOperation:\n          s = \"Failure: UnrecognizedOperation\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_neventReportStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_InvalidArgumentValue:\n          s = \"Failure: InvalidArgumentValue\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_NoSuchArgument:\n          s = \"Failure: NoSuchArgument\";\n          break;\n      case STATUS_N_NoSuchEventType:\n          s = \"Failure: NoSuchEventType\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_UnrecognizedOperation:\n          s = \"Failure: UnrecognizedOperation\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nvoid DU_logSelectResult(int selectReturnValue)\n{\n  if (selectReturnValue < 0)\n  {\n#ifdef HAVE_WINSOCK_H\n    LPVOID errBuf = NULL;\n    OFString err;\n    // Obtain an error string from system error code\n    if (FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,\n      NULL, GetLastError(), MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), OFreinterpret_cast(LPTSTR, &errBuf), 0, NULL) > 0)\n    {\n      err = (OFstatic_cast(const char *, errBuf));\n    } else\n      err = \"Unknown Winsock error code\";\n    LocalFree(errBuf);\n    DCMNET_DEBUG(\"Windows Socket error while waiting for incoming network data: \" << err);\n#else\n    // POSIX interface\n    char buf[256];\n    DCMNET_DEBUG(\"Error while waiting for incoming network data: \" << OFStandard::strerror(errno, buf, 256));\n#endif\n  }\n  else if (selectReturnValue == 0)\n  {\n    DCMNET_TRACE(\"Timeout while waiting for incoming network data\");\n  }\n  else\n  {\n    // This function is only meant to be used for return values <= 0, handle\n    // normal case anyway\n    DCMNET_TRACE(\"Receiving data via select()\");\n  }\n}\n"], "fixing_code": ["/*\n *\n *  Copyright (C) 1994-2021, OFFIS e.V.\n *  All rights reserved.  See COPYRIGHT file for details.\n *\n *  This software and supporting documentation were partly developed by\n *\n *    OFFIS e.V.\n *    R&D Division Health\n *    Escherweg 2\n *    D-26121 Oldenburg, Germany\n *\n *  For further copyrights, see the following paragraphs.\n *\n */\n\n/*\n**  Copyright (C) 1993/1994, OFFIS, Oldenburg University and CERIUM\n**\n**  This software and supporting documentation were\n**  developed by\n**\n**    Institut OFFIS\n**    Bereich Kommunikationssysteme\n**    Westerstr. 10-12\n**    26121 Oldenburg, Germany\n**\n**    Fachbereich Informatik\n**    Abteilung Prozessinformatik\n**    Carl von Ossietzky Universitaet Oldenburg\n**    Ammerlaender Heerstr. 114-118\n**    26111 Oldenburg, Germany\n**\n**    CERIUM\n**    Laboratoire SIM\n**    Faculte de Medecine\n**    2 Avenue du Pr. Leon Bernard\n**    35043 Rennes Cedex, France\n**\n**  for CEN/TC251/WG4 as a contribution to the Radiological\n**  Society of North America (RSNA) 1993 Digital Imaging and\n**  Communications in Medicine (DICOM) Demonstration.\n**\n**  THIS SOFTWARE IS MADE AVAILABLE, AS IS, AND NEITHER OFFIS,\n**  OLDENBURG UNIVERSITY NOR CERIUM MAKE ANY WARRANTY REGARDING\n**  THE SOFTWARE, ITS PERFORMANCE, ITS MERCHANTABILITY OR\n**  FITNESS FOR ANY PARTICULAR USE, FREEDOM FROM ANY COMPUTER\n**  DISEASES OR ITS CONFORMITY TO ANY SPECIFICATION.  THE\n**  ENTIRE RISK AS TO QUALITY AND PERFORMANCE OF THE SOFTWARE\n**  IS WITH THE USER.\n**\n**  Copyright of the software and supporting documentation\n**  is, unless otherwise stated, jointly owned by OFFIS,\n**  Oldenburg University and CERIUM and free access is hereby\n**  granted as a license to use this software, copy this\n**  software and prepare derivative works based upon this\n**  software. However, any distribution of this software\n**  source code or supporting documentation or derivative\n**  works (source code and supporting documentation) must\n**  include the three paragraphs of this copyright notice.\n**\n*/\n\n/*\n**\n** Author: Andrew Hewett                Created: 11-08-93\n**\n** Module: diutil\n**\n** Purpose:\n**     This file contains the interface to\n**     some general useful dicom utility routines\n**\n** Module Prefix: DU_\n*/\n\n\n\n#include \"dcmtk/config/osconfig.h\"    /* make sure OS specific configuration is included first */\n\n#ifdef HAVE_UNIX_H\n#if defined(macintosh) && defined (HAVE_WINSOCK_H)\n/* unix.h defines timeval incompatible with winsock.h */\n#define timeval _UNWANTED_timeval\n#endif\n#include <unix.h>       /* for unlink() under Metrowerks C++ (Macintosh) */\n#undef timeval\n#endif\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_STAT_H\n#include <sys/stat.h>\n#endif\n#ifdef HAVE_STAT_H\n#include <stat.h>\n#endif\n\n#include \"dcmtk/ofstd/ofstd.h\"\n#include \"dcmtk/dcmnet/diutil.h\"\n#include \"dcmtk/dcmdata/dcdatset.h\"\n#include \"dcmtk/dcmdata/dcfilefo.h\"\n#include \"dcmtk/dcmdata/dcmetinf.h\"\n#include \"dcmtk/dcmdata/dcdeftag.h\"\n#include \"dcmtk/dcmdata/dcuid.h\"\n#include \"dcmtk/dcmdata/dcbytstr.h\"\n\nstatic char staticBuf[256];\n\nOFLogger DCM_dcmnetLogger = OFLog::getLogger(DCMNET_LOGGER_NAME);\n\n#define TO_UCHAR(s) OFstatic_cast(unsigned char, (s))\nvoid\nDU_stripTrailingSpaces(char *s)\n{\n    int i, n;\n\n    if (s)\n    {\n        n = OFstatic_cast(int, strlen(s));\n        for (i = n - 1; i >= 0 && isspace(TO_UCHAR(s[i])); i--)\n            s[i] = '\\0';\n    }\n}\n\nvoid\nDU_stripLeadingSpaces(char *s)\n{\n    int i, j, n;\n\n    if (s == NULL) return;\n    n = OFstatic_cast(int, strlen(s));\n    if (n == 0) return;\n    if (!isspace(TO_UCHAR(s[0]))) return; /* no leading space */\n\n    /* first non-space */\n    for (i=0; i<n && isspace(TO_UCHAR(s[i])); i++)\n        /* do nothing, just iterate */\n        ;\n    if (i<n) {\n        /* found non-space, pull to front (inclusive '\\0') */\n        for (j=i; j<=n; j++) {\n            s[j-i] = s[j];\n        }\n    } else {\n        /* all spaces */\n        s[0] = '\\0';\n    }\n}\n\nvoid\nDU_stripLeadingAndTrailingSpaces(char *s)\n{\n    DU_stripLeadingSpaces(s);\n    DU_stripTrailingSpaces(s);\n}\n#undef TO_UCHAR\n\nOFBool\nDU_getStringDOElement(DcmItem *obj, DcmTagKey t, char *s, size_t bufsize)\n{\n    DcmByteString *elem;\n    DcmStack stack;\n    OFCondition ec = EC_Normal;\n    char* aString;\n\n    ec = obj->search(t, stack);\n    elem = (DcmByteString*) stack.top();\n    if (ec == EC_Normal && elem != NULL) {\n        if (elem->getLength() == 0) {\n            s[0] = '\\0';\n        } else {\n            ec =  elem->getString(aString);\n            if (ec == EC_Normal)\n                OFStandard::strlcpy(s, aString, bufsize);\n        }\n    }\n    return (ec == EC_Normal);\n}\n\nOFBool\nDU_putStringDOElement(DcmItem *obj, DcmTagKey t, const char *s)\n{\n    OFCondition ec = EC_Normal;\n    DcmElement *e = NULL;\n    DcmTag tag(t);\n\n    ec = DcmItem::newDicomElement(e, tag);\n    if (ec == EC_Normal && s != NULL) {\n        ec = e->putString(s);\n    }\n    if (ec == EC_Normal) {\n        ec = obj->insert(e, OFTrue);\n    }\n\n    return (ec == EC_Normal);\n}\n\nOFBool\nDU_getShortDOElement(DcmItem *obj, DcmTagKey t, Uint16 *us)\n{\n    DcmElement *elem;\n    DcmStack stack;\n    OFCondition ec = EC_Normal;\n\n    ec = obj->search(t, stack);\n    elem = (DcmElement*) stack.top();\n    if (ec == EC_Normal && elem != NULL) {\n        ec = elem->getUint16(*us, 0);\n    }\n\n    return (ec == EC_Normal);\n}\n\nOFBool\nDU_putShortDOElement(DcmItem *obj, DcmTagKey t, Uint16 us)\n{\n    OFCondition ec = EC_Normal;\n    DcmElement *e = NULL;\n    DcmTag tag(t);\n\n    ec = DcmItem::newDicomElement(e, tag);\n    if (ec == EC_Normal) {\n        ec = e->putUint16(us);\n    }\n    if (ec == EC_Normal) {\n        ec = obj->insert(e, OFTrue);\n    }\n    return (ec == EC_Normal);\n}\n\nOFBool\nDU_findSOPClassAndInstanceInDataSet(\n  DcmItem *obj,\n  char* sopClass,\n  size_t sopClassSize,\n  char* sopInstance,\n  size_t sopInstanceSize,\n  OFBool tolerateSpacePaddedUIDs)\n{\n    OFBool result = (DU_getStringDOElement(obj, DCM_SOPClassUID, sopClass, sopClassSize) &&\n        DU_getStringDOElement(obj, DCM_SOPInstanceUID, sopInstance, sopInstanceSize));\n\n    if (tolerateSpacePaddedUIDs)\n    {\n        /* gracefully correct space-padded UID strings */\n        int slength;\n\n        if ((0 < (slength=OFstatic_cast(int, strlen(sopClass))))&&(sopClass[slength-1]==' '))\n            sopClass[slength-1]=0;\n        if ((0 < (slength=OFstatic_cast(int, strlen(sopInstance))))&&(sopInstance[slength-1]==' '))\n            sopInstance[slength-1]=0;\n    }\n    return result;\n}\n\nOFBool\nDU_findSOPClassAndInstanceInFile(\n  const char *fname,\n  char* sopClass,\n  size_t sopClassSize,\n  char* sopInstance,\n  size_t sopInstanceSize,\n  OFBool tolerateSpacePaddedUIDs)\n{\n    DcmFileFormat ff;\n    if (! ff.loadFile(fname, EXS_Unknown, EGL_noChange).good())\n        return OFFalse;\n\n    /* look in the meta-header first */\n    OFBool found = DU_findSOPClassAndInstanceInDataSet(\n        ff.getMetaInfo(), sopClass, sopClassSize, sopInstance, sopInstanceSize, tolerateSpacePaddedUIDs);\n\n    if (!found) {\n        found = DU_findSOPClassAndInstanceInDataSet(\n            ff.getDataset(), sopClass, sopClassSize, sopInstance, sopInstanceSize, tolerateSpacePaddedUIDs);\n    }\n\n    return found;\n}\n\nconst char *\nDU_cechoStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    if (statusCode == STATUS_Success)\n        s = \"Success\";\n    else {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_cstoreStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_STORE_Refused_SOPClassNotSupported:\n          s = \"Refused: SOPClassNotSupported\";\n          break;\n      case STATUS_STORE_Warning_CoercionOfDataElements:\n          s = \"Warning: CoercionOfDataElements\";\n          break;\n      case STATUS_STORE_Warning_DataSetDoesNotMatchSOPClass:\n          s = \"Warning: DataSetDoesNotMatchSOPClass\";\n          break;\n      case STATUS_STORE_Warning_ElementsDiscarded:\n          s = \"Warning: ElementsDiscarded\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xff00) {      /* high byte significant */\n      case STATUS_STORE_Refused_OutOfResources:   /* high byte */\n          s = \"Refused: OutOfResources\";\n          break;\n      case STATUS_STORE_Error_DataSetDoesNotMatchSOPClass:        /* high byte */\n          s = \"Error: DataSetDoesNotMatchSOPClass\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {      /* high nibble significant */\n      case STATUS_STORE_Error_CannotUnderstand:   /* high nibble */\n          s = \"Error: CannotUnderstand\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\n\nconst char *\nDU_cfindStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_Pending:\n          s = \"Pending\";\n          break;\n      case STATUS_FIND_Refused_OutOfResources:\n          s = \"Refused: OutOfResources\";\n          break;\n      case STATUS_FIND_Refused_SOPClassNotSupported:\n          s = \"Refused: SOPClassNotSupported\";\n          break;\n      case STATUS_FIND_Failed_IdentifierDoesNotMatchSOPClass:\n          s = \"Failed: IdentifierDoesNotMatchSOPClass\";\n          break;\n      case STATUS_FIND_Cancel_MatchingTerminatedDueToCancelRequest:\n          s = \"Cancel: MatchingTerminatedDueToCancelRequest\";\n          break;\n      case STATUS_FIND_Pending_WarningUnsupportedOptionalKeys:\n          s = \"Pending: WarningUnsupportedOptionalKeys\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {      /* high nibble significant */\n    case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n        s = \"Failed: UnableToProcess\";\n        break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_cmoveStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_Pending:\n          s = \"Pending\";\n          break;\n      case STATUS_MOVE_Refused_OutOfResourcesNumberOfMatches:\n          s = \"Refused: OutOfResourcesNumberOfMatches\";\n          break;\n      case STATUS_MOVE_Refused_OutOfResourcesSubOperations:\n          s = \"Refused: OutOfResourcesSubOperations\";\n          break;\n      case STATUS_MOVE_Failed_SOPClassNotSupported:\n          s = \"Failed: SOPClassNotSupported\";\n          break;\n      case STATUS_MOVE_Failed_MoveDestinationUnknown:\n          s = \"Failed: MoveDestinationUnknown\";\n          break;\n      case STATUS_MOVE_Failed_IdentifierDoesNotMatchSOPClass:\n          s = \"Failed: IdentifierDoesNotMatchSOPClass\";\n          break;\n      case STATUS_MOVE_Cancel_SubOperationsTerminatedDueToCancelIndication:\n          s = \"Cancel: SubOperationsTerminatedDueToCancelIndication\";\n          break;\n      case STATUS_MOVE_Warning_SubOperationsCompleteOneOrMoreFailures:\n          s = \"Warning: SubOperationsCompleteOneOrMoreFailures\";\n          break;\n\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {      /* high nibble significant */\n      case STATUS_MOVE_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_cgetStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_Pending:\n          s = \"Pending\";\n          break;\n      case STATUS_GET_Refused_OutOfResourcesNumberOfMatches:\n          s = \"Refused: OutOfResourcesNumberOfMatches\";\n          break;\n      case STATUS_GET_Refused_OutOfResourcesSubOperations:\n          s = \"Refused: OutOfResourcesSubOperations\";\n          break;\n      case STATUS_GET_Failed_SOPClassNotSupported:\n          s = \"Failed: SOPClassNotSupported\";\n          break;\n      case STATUS_GET_Failed_IdentifierDoesNotMatchSOPClass:\n          s = \"Failed: IdentifierDoesNotMatchSOPClass\";\n          break;\n      case STATUS_GET_Cancel_SubOperationsTerminatedDueToCancelIndication:\n          s = \"Cancel: SubOperationsTerminatedDueToCancelIndication\";\n          break;\n      case STATUS_GET_Warning_SubOperationsCompleteOneOrMoreFailures:\n          s = \"Warning: SubOperationsCompleteOneOrMoreFailures\";\n          break;\n\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {      /* high nibble significant */\n      case STATUS_GET_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_ncreateStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_DuplicateSOPInstance:\n          s = \"Failure: DuplicateSOPInstance\";\n          break;\n      case STATUS_N_InvalidAttributeValue:\n          s = \"Failure: InvalidAttributeValue\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MissingAttribute:\n          s = \"Failure: MissingAttribute\";\n          break;\n      case STATUS_N_MissingAttributeValue:\n          s = \"Failure: MissingAttributeValue\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_NoSuchAttribute:\n          s = \"Failure: NoSuchAttribute\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_UnrecognizedOperation:\n          s = \"Failure: UnrecognizedOperation\";\n          break;\n      case STATUS_N_AttributeValueOutOfRange:\n          s = \"Warning: AttributeValueOutOfRange\";\n          break;\n    }\n    if (s)\n          return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_ngetStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_AttributeListError:\n          s = \"Warning: AttributeListError\";\n          break;\n      case STATUS_N_AttributeValueOutOfRange:\n          s = \"Warning: AttributeValueOutOfRange\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n          sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n          s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_nsetStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_InvalidAttributeValue:\n          s = \"Failure: InvalidAttributeValue\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MissingAttributeValue:\n          s = \"Failure: MissingAttributeValue\";\n          break;\n      case STATUS_N_NoSuchAttribute:\n          s = \"Failure: NoSuchAttribute\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_UnrecognizedOperation:\n          s = \"Failure: UnrecognizedOperation\";\n          break;\n      case STATUS_N_AttributeValueOutOfRange:\n          s = \"Warning: AttributeValueOutOfRange\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_nactionStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_InvalidArgumentValue:\n          s = \"Failure: InvalidArgumentValue\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_NoSuchAction:\n          s = \"Failure: NoSuchAction\";\n          break;\n      case STATUS_N_NoSuchArgument:\n          s = \"Failure: NoSuchArgument\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_UnrecognizedOperation:\n          s = \"Failure: UnrecognizedOperation\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_ndeleteStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_UnrecognizedOperation:\n          s = \"Failure: UnrecognizedOperation\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nconst char *\nDU_neventReportStatusString(Uint16 statusCode)\n{\n    const char *s = NULL;\n\n    switch (statusCode) {\n      case STATUS_Success:\n          s = \"Success\";\n          break;\n      case STATUS_N_ClassInstanceConflict:\n          s = \"Failure: ClassInstanceConflict\";\n          break;\n      case STATUS_N_DuplicateInvocation:\n          s = \"Failure: DuplicateInvocation\";\n          break;\n      case STATUS_N_InvalidArgumentValue:\n          s = \"Failure: InvalidArgumentValue\";\n          break;\n      case STATUS_N_InvalidObjectInstance:\n          s = \"Failure: InvalidObjectInstance\";\n          break;\n      case STATUS_N_MistypedArgument:\n          s = \"Failure: MistypedArgument\";\n          break;\n      case STATUS_N_NoSuchArgument:\n          s = \"Failure: NoSuchArgument\";\n          break;\n      case STATUS_N_NoSuchEventType:\n          s = \"Failure: NoSuchEventType\";\n          break;\n      case STATUS_N_NoSuchSOPClass:\n          s = \"Failure: NoSuchSOPClass\";\n          break;\n      case STATUS_N_NoSuchObjectInstance:\n          s = \"Failure: NoSuchObjectInstance\";\n          break;\n      case STATUS_N_ProcessingFailure:\n          s = \"Failure: ProcessingFailure\";\n          break;\n      case STATUS_N_ResourceLimitation:\n          s = \"Failure: ResourceLimitation\";\n          break;\n      case STATUS_N_UnrecognizedOperation:\n          s = \"Failure: UnrecognizedOperation\";\n          break;\n    }\n    if (s)\n        return s;\n\n    switch (statusCode & 0xf000) {        /* high nibble significant */\n      case STATUS_FIND_Failed_UnableToProcess:    /* high nibble */\n          s = \"Failed: UnableToProcess\";\n          break;\n    }\n\n    if (s == NULL) {\n        sprintf(staticBuf, \"Unknown Status: 0x%x\", (unsigned int)statusCode);\n        s = staticBuf;\n    }\n    return s;\n}\n\nvoid DU_logSelectResult(int selectReturnValue)\n{\n  if (selectReturnValue < 0)\n  {\n#ifdef HAVE_WINSOCK_H\n    LPVOID errBuf = NULL;\n    OFString err;\n    // Obtain an error string from system error code\n    if (FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,\n      NULL, GetLastError(), MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), OFreinterpret_cast(LPTSTR, &errBuf), 0, NULL) > 0)\n    {\n      err = (OFstatic_cast(const char *, errBuf));\n    } else\n      err = \"Unknown Winsock error code\";\n    LocalFree(errBuf);\n    DCMNET_DEBUG(\"Windows Socket error while waiting for incoming network data: \" << err);\n#else\n    // POSIX interface\n    char buf[256];\n    DCMNET_DEBUG(\"Error while waiting for incoming network data: \" << OFStandard::strerror(errno, buf, 256));\n#endif\n  }\n  else if (selectReturnValue == 0)\n  {\n    DCMNET_TRACE(\"Timeout while waiting for incoming network data\");\n  }\n  else\n  {\n    // This function is only meant to be used for return values <= 0, handle\n    // normal case anyway\n    DCMNET_TRACE(\"Receiving data via select()\");\n  }\n}\n"], "filenames": ["dcmnet/libsrc/diutil.cc"], "buggy_code_start_loc": [174], "buggy_code_end_loc": [175], "fixing_code_start_loc": [174], "fixing_code_end_loc": [176], "type": "CWE-476", "message": "DCMTK through 3.6.6 does not handle string copy properly. Sending specific requests to the dcmqrdb program, it would query its database and copy the result even if the result is null, which can incur a head-based overflow. An attacker can use it to launch a DoS attack.", "other": {"cve": {"id": "CVE-2021-41689", "sourceIdentifier": "cve@mitre.org", "published": "2022-06-28T13:15:10.587", "lastModified": "2022-07-06T19:44:04.263", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "DCMTK through 3.6.6 does not handle string copy properly. Sending specific requests to the dcmqrdb program, it would query its database and copy the result even if the result is null, which can incur a head-based overflow. An attacker can use it to launch a DoS attack."}, {"lang": "es", "value": "DCMTK versiones hasta 3.6.6 no maneja apropiadamente la copia de cadenas. Al enviar peticiones espec\u00edficas al programa dcmqrdb, \u00e9ste consulta su base de datos y copia el resultado incluso si \u00e9ste es nulo, lo que puede incurrir en un desbordamiento en la regi\u00f3n head de la memoria. Un atacante puede usarlo para lanzar un ataque DoS"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:offis:dcmtk:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.6.6", "matchCriteriaId": "8F06D153-851C-4E6F-B524-2A8D40A8F634"}]}]}], "references": [{"url": "https://github.com/DCMTK/dcmtk", "source": "cve@mitre.org", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://github.com/DCMTK/dcmtk/commit/5c14bf53fb42ceca12bbcc0016e8704b1580920d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/DCMTK/dcmtk/commit/5c14bf53fb42ceca12bbcc0016e8704b1580920d"}}