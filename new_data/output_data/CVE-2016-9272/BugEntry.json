{"buggy_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expController\n *\n * @package    Core\n * @subpackage Controllers\n */\n\nabstract class expController {\n    protected $classname = ''; // full controller name w/ 'Controller' suffix\n    public $baseclassname = ''; // root controller name w/o 'Controller' suffix\n    public $classinfo = null; // holds reflection class of class\n//    public $module_name = '';       //FIXME not used and not actually set right index needed of -3 instead of -2 below\n//    protected $basemodel = null;    //FIXME never used, $basemodel_name replaced?\n    public $basemodel_name = ''; // holds classname of base model associated w/ this controller\n    public $model_table = ''; // holds table name for base model\n\n    public $useractions = array(); // available (displayed) user actions/methods for this module\n    public $remove_configs = array(); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    // $permissions used to restrict access to module's actions/methods\n    protected $permissions = array(  // standard set of permissions for all modules unless add'ed or remove'd\n        'manage'    => 'Manage',\n        'configure' => 'Configure',\n        'create'    => 'Create',\n        'edit'      => 'Edit',\n        'delete'    => 'Delete',\n    );\n    protected $m_permissions = array(  // standard set of actions requiring manage permission for all modules\n        'activate'  => 'Activate',\n        'approve'   => 'Approve',\n        'merge'     => 'Merge',\n        'rerank'    => 'ReRank',\n        'import'    => 'Import Items',\n        'export'    => 'Export Items'\n    );\n    protected $remove_permissions = array();  // $permissions not applicable for this module from above list\n    protected $add_permissions = array();  // additional $permissions processed and visible  for this module\n    protected $manage_permissions = array();  // additional actions requiring manage permission in addition to $m_permissions\n    public $requires_login = array();  // actions/methods (lower case ONLY) which ONLY require user be logged in to access...$permissions take priority\n\n    public $filepath = ''; // location of this controller's files\n    public $viewpath = ''; // location of this controllers views; defaults to controller file location\n    public $relative_viewpath = ''; // relative location of controller's views\n    public $asset_path = ''; // location of this controller's assets; defaults to controller file location\n\n    public $config = array(); // holds module configuration settings\n    public $params = array(); // holds sanitized parameters passed to module\n    public $loc = null; // module location object\n\n    public $codequality = 'stable'; // code's level of stability\n\n    public $rss_is_podcast = false;\n\n    /**\n     * @param null  $src\n     * @param array $params\n     *\n     * @return expController\n     *\n     */\n    public function __construct($src = null, $params = array()) {\n        // setup some basic information about this class\n        $this->classinfo = new ReflectionClass($this);\n        $this->classname = $this->classinfo->getName();\n        $this->baseclassname = substr($this->classinfo->getName(), 0, -10);\n        $this->filepath = __realpath($this->classinfo->getFileName());\n\n        // figure out which \"module\" we belong to and setup view path information\n        $controllerpath = explode('/', $this->filepath);\n//        $this->module_name = $controllerpath[(count($controllerpath)-3)];\n\n        // set up the path to this module view files\n        array_pop($controllerpath); // remove 'controllers' from array\n        $controllerpath[count($controllerpath) - 1] = 'views';\n        array_push($controllerpath, $this->baseclassname);\n        $this->relative_viewpath = implode('/', array_slice($controllerpath, -3, 3));\n//        $this->viewpath = BASE.'framework/modules/'.$this->relative_viewpath;\n        //FIXME this requires we move the 'core' controllers into the modules folder or use this hack\n        $depth = array_search('core', $controllerpath);\n        if ($depth) {\n            $this->viewpath = BASE . 'framework/modules/' . $this->relative_viewpath;\n        } else {\n            $this->viewpath = implode('/', $controllerpath);\n        }\n\n        //grab the path to the module's assets\n        array_pop($controllerpath);\n        $controllerpath[count($controllerpath) - 1] = 'assets';\n//        $this->asset_path = PATH_RELATIVE.'framework/'.implode('/', array_slice($controllerpath, -3, 3)).\"/\";\n        $depth = array_search('framework', $controllerpath);  // is this a system file (or theme)?\n        if (!$depth) $depth = array_search('themes', $controllerpath);\n        $this->asset_path = PATH_RELATIVE . implode('/', array_slice($controllerpath, $depth)) . \"/\";\n\n        // figure out which model we're using and setup some info about it\n        if (empty($this->basemodel_name)) $this->basemodel_name = get_model_for_controller($this->classname);\n        $modelname = $this->basemodel_name;\n        if (class_exists($modelname)) {\n            $this->$modelname = new $modelname(null, false, false);\n            $this->model_table = $this->$modelname->tablename;\n        } else {\n            $this->basemodel_name = 'expRecord';\n            $this->$modelname = new expRecord(null, false, false);\n            $this->model_table = null;\n        }\n\n        // set the location data\n        $this->loc = expCore::makeLocation($this->baseclassname, $src, null);\n\n        // flag for needing approval check\n        if (ENABLE_WORKFLOW && $this->$modelname->supports_revisions) {\n            $uilevel = 99;\n            if (expSession::exists(\"uilevel\")) $uilevel = expSession::get(\"uilevel\");\n            if (!expPermissions::check('approve', $this->loc)) {\n                $this->$modelname->needs_approval = true;\n            } elseif ($uilevel == UILEVEL_PREVIEW && isset($uilevel)) {\n                $this->$modelname->needs_approval = true;  // 'preview' should provide a true preview\n            }\n        }\n\n        // get this controllers config data if there is any\n        $config = new expConfig($this->loc);\n        $this->config = $config->config;\n\n        $this->params = $params;\n        if (ENABLE_WORKFLOW)\n            $this->permissions = array_merge($this->permissions, array('approve'=>'Approval'));\n    }\n\n    /**\n     * name of module for backwards compat with old modules\n     *\n     * @return string\n     */\n    public function name() {\n        return static::displayname();\n    }\n\n    /**\n     * name of module\n     *\n     * @return string\n     */\n    public static function displayname() {\n        return gt(\"Exponent Base Controller\");\n    }\n\n    /**\n     * description of module\n     *\n     * @return string\n     */\n    public static function description() {\n        return gt(\"This is the base controller which most Exponent modules inherit their methods from.\");\n    }\n\n    /**\n     * author of module\n     *\n     * @return string\n     */\n    public static function author() {\n        return \"OIC Group, Inc\";\n    }\n\n    /**\n     * does module have sources available? or does it treat content globally\n     *\n     * @return bool\n     */\n    public static function hasSources() {\n        return true;\n    }\n\n    /**\n     * does module have views available?\n     *\n     * @return bool\n     */  //NOTE: Never used - equivalent to !empty ($this->useractions) via expModules::listUserRunnableControllers()?\n    public static function hasViews() {\n        return true;\n    }\n\n    /**\n     * does module have content (stored items) available?\n     *\n     * @return bool\n     */  //NOTE: Never used, better utilized/implemented as isSearchable()\n    public static function hasContent() {\n        return true;\n    }\n\n    /**\n     * does module support workflow?\n     *\n     * @return bool\n     */\n    public static function supportsWorkflow() {\n        return false;\n    }\n\n    /**\n     * is module content searchable? should it be added to search index?\n     *\n     * @return bool\n     */\n    public static function isSearchable() {\n        return false;\n    }\n\n    /**\n     * can this module import data?\n     *\n     * @return bool\n     */\n    public static function canImportData() {\n        return false;\n    }\n\n    /**\n     * can this module export data?\n     *\n     * @return bool\n     */\n    public static function canExportData() {\n        return false;\n    }\n\n    /**\n     * does this module require configuration?\n     *\n     * @return bool\n     */  //NOTE: Never Used\n    public static function requiresConfiguration() {\n        return false;\n    }\n\n    /**\n     * glue to make the view template aware of the module\n     * @deprecated\n     */\n    public function moduleSelfAwareness() {\n        assign_to_template(array(\n            'asset_path' => $this->asset_path,\n            'model_name' => $this->basemodel_name,\n            'table'      => $this->model_table,\n            'controller' => $this->baseclassname,\n            'config'     => $this->config\n        ));\n    }\n\n    /**\n     * default module view method for all items\n     */\n    public function showall() {\n        expHistory::set('viewable', $this->params);\n\n        $page = new expPaginator(array(\n            'model'      => $this->basemodel_name,\n            'where'      => static::hasSources() ? $this->aggregateWhereClause() : null,\n            'limit'      => (isset($this->params['limit']) && $this->params['limit'] != '') ? $this->params['limit'] : 10,\n            'order'      => isset($this->params['order']) ? $this->params['order'] : null,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'        => static::hasSources() == true ? $this->loc->src : null,\n            'columns'    => array(\n                gt('ID#')   => 'id',\n                gt('Title') => 'title',\n                gt('Body')  => 'body'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'  => $page,\n            'items' => $page->records\n        ));\n    }\n\n    /**\n     * default module view method for all items with a specific tag\n     */\n    public function showall_by_tags() {\n        global $db;\n\n         // set history\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        // get the tag being passed\n        $tag = new expTag(expString::escape($this->params['tag']));\n\n        // find all the id's of the portfolios for this module\n        $item_ids = $db->selectColumn($modelname, 'id', $this->aggregateWhereClause());\n\n        // find all the items that this tag is attached to\n        $items = $tag->findWhereAttachedTo($modelname);\n\n        // loop the items for this tag and find out which ones belong to this module\n        $items_by_tags = array();\n        foreach ($items as $item) {\n            if (in_array($item->id, $item_ids)) $items_by_tags[] = $item;\n        }\n\n        // create a pagination object for the model and render the action\n        $order = 'created_at DESC';\n        $page = new expPaginator(array(\n            'records'    => $items_by_tags,\n            'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'      => $order,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'=>$this->loc->src,\n            'columns'    => array(\n                gt('Title') => 'title'\n            ),\n        ));\n//        $page->records = expSorter::sort(array('array'=>$page->records, 'sortby'=>'rank', 'order'=>'ASC', 'ignore_case'=>true));\n        $page->records = expSorter::sort(array('array' => $page->records, 'sortby' => 'created_at', 'order' => 'DESC', 'ignore_case' => true));\n\n        assign_to_template(array(\n            'page'        => $page,\n            'items'       => $page->records,\n            'moduletitle' => ucfirst($modelname) . ' ' . gt('items tagged with') . ' \"' . expString::escape($this->params['tag']) . '\"',\n            'rank'        => ($order === 'rank') ? 1 : 0\n        ));\n    }\n\n    /**\n     * return all tags used by module's items\n     */\n    public function tags() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all', $this->aggregateWhereClause());\n        $used_tags = array();\n        foreach ($items as $item) {\n            foreach ($item->expTag as $tag) {\n                if (isset($used_tags[$tag->id])) {\n                    $used_tags[$tag->id]->count++;\n                } else {\n                    $exptag = new expTag($tag->id);\n                    $used_tags[$tag->id] = $exptag;\n                    $used_tags[$tag->id]->count = 1;\n                }\n            }\n        }\n\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'rank';\n//        $used_tags = expSorter::sort(array('array'=>$used_tags,'sortby'=>'title', 'order'=>'ASC', 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n//        $used_tags = expSorter::sort(array('array'=>$used_tags, 'order'=>$order, 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n        $used_tags = expSorter::sort(array('array' => $used_tags, 'order' => 'count DESC', 'type' => 'a'));\n        if (!empty($this->config['limit'])) $used_tags = array_slice($used_tags, 0, $this->config['limit']);\n        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n        if ($order != 'hits') {\n            $used_tags = expSorter::sort(array('array' => $used_tags, 'order' => $order, 'ignore_case' => true, 'rank' => ($order === 'rank') ? 1 : 0));\n        }\n\n        assign_to_template(array(\n            'tags' => $used_tags\n        ));\n    }\n\n    /**\n     * return all categories used by module's items\n     */\n    public function categories() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all', $this->aggregateWhereClause());\n        $used_cats = array();\n        $used_cats[0] = new stdClass();\n        $used_cats[0]->id = 0;\n        $used_cats[0]->title = !empty($this->config['uncat']) ? $this->config['uncat'] : gt('Not Categorized');\n        $used_cats[0]->count = 0;\n        foreach ($items as $item) {\n            if (!empty($item->expCat)) {\n                if (isset($used_cats[$item->expCat[0]->id])) {\n                    $used_cats[$item->expCat[0]->id]->count++;\n                } else {\n                    $expcat = new expCat($item->expCat[0]->id);\n                    $used_cats[$item->expCat[0]->id] = $expcat;\n                    $used_cats[$item->expCat[0]->id]->count = 1;\n                }\n            } else {\n                $used_cats[0]->count++;\n            }\n        }\n\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'rank';\n//        $used_cats = expSorter::sort(array('array'=>$used_cats,'sortby'=>'title', 'order'=>'ASC', 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n//        $used_cats = expSorter::sort(array('array'=>$used_cats, 'order'=>$order, 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n        $used_cats = expSorter::sort(array('array' => $used_cats, 'order' => 'count DESC', 'type' => 'a'));\n        if (!empty($this->config['limit'])) $used_cats = array_slice($used_cats, 0, $this->config['limit']);\n        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n        if ($order != 'count') {\n            $used_cats = expSorter::sort(array('array' => $used_cats, 'order' => $order, 'ignore_case' => true, 'rank' => ($order === 'rank') ? 1 : 0));\n        }\n\n        assign_to_template(array(\n            'cats' => $used_cats\n        ));\n    }\n\n    /**\n     * return all comments used by module's items\n     */\n    public function comments() {\n\t    expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all');\n        $all_comments = array();\n        // get all the blog comments\n        foreach ($items as $item) {\n            $more_comments = expCommentController::getComments(array('content_type'=>$modelname,'content_id'=>$item->id));\n            if (!empty($more_comments)) {\n                foreach ($more_comments as $next_comment) {\n                    $next_comment->ref = $item->title;\n                    $next_comment->sef_url = $item->sef_url;\n                }\n                $all_comments = array_merge($all_comments,$more_comments);\n            }\n        }\n        // sort then limit all the blog comments\n        $all_comments = expSorter::sort(array('array' => $all_comments, 'sortby' => 'created_at', 'order' => 'DESC', 'ignore_case' => true));\n        $limit = (isset($this->config['headcount']) && $this->config['headcount'] != '') ? $this->config['headcount'] : 10;\n        $comments = array_slice($all_comments,0,$limit);\n\t    assign_to_template(array(\n            'comments'=>$comments,\n        ));\n\t}\n\n    /**\n     * default view for individual item\n     */\n    public function show() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        // figure out if we're looking this up by id or title\n        $id = null;\n        if (isset($this->params['id'])) {\n            $id = $this->params['id'];\n        } elseif (isset($this->params['title'])) {\n            $id = expString::escape($this->params['title']);\n        }\n\n        $record = new $modelname($id);\n        if (empty($record->id))\n            redirect_to(array('controller'=>'notfound','action'=>'page_not_found','title'=>$this->params['title']));\n\n        $config = expConfig::getConfig($record->location_data);\n        if (empty($this->config))\n            $this->config = $config;\n        if (empty($this->loc->src)) {\n            $r_loc = expUnserialize($record->location_data);\n            $this->loc = new stdClass();\n            $this->loc->src = $r_loc->src;\n        }\n\n        assign_to_template(array(\n            'record' => $record,\n            'config' => $config\n        ));\n    }\n\n    /**\n     * view the item by referring to its title\n     * @deprecated\n     */\n    public function showByTitle() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n        // first we'll check to see if this matches the sef_url field...if not then we'll look for the\n        // title field\n        $this->params['title'] = expString::escape($this->params['title']);  // escape title to prevent sql injection\n        $record = $this->$modelname->find('first', \"sef_url='\" . $this->params['title'] . \"'\");\n        if (!is_object($record)) {\n            $record = $this->$modelname->find('first', \"title='\" . $this->params['title'] . \"'\");\n        }\n        $this->loc = unserialize($record->location_data);\n\n        assign_to_template(array(\n            'record' => $record,\n        ));\n    }\n\n    /**\n     * view a random item\n     */\n    public function showRandom() {\n        expHistory::set('viewable', $this->params);\n        $where = static::hasSources() ? $this->aggregateWhereClause() : null;\n        $limit = isset($this->params['limit']) ? $this->params['limit'] : 1;\n        $order = 'RAND()';\n        assign_to_template(array(\n            'items' => $this->text->find('all', $where, $order, $limit)\n        ));\n    }\n\n    /**\n     * view items referenced by tags\n     * @deprecated\n     */\n    public function showByTags() {\n        global $db;\n\n        // set the history point for this action\n        expHistory::set('viewable', $this->params);\n\n        // setup some objects\n        $tagobj = new expTag();\n        $modelname = empty($this->params['model']) ? $this->basemodel_name : $this->params['model'];\n        $model = new $modelname();\n\n        // start building the sql query\n        $sql = 'SELECT DISTINCT m.id FROM ' . $db->prefix . $model->tablename . ' m ';\n        $sql .= 'JOIN ' . $db->prefix . $tagobj->attachable_table . ' ct ';\n        $sql .= 'ON m.id = ct.content_id WHERE (';\n        $first = true;\n\n        if (isset($this->params['tags'])) {\n            $tags = is_array($this->params['tags']) ? $this->params['tags'] : array($this->params['tags']);\n        } elseif (isset($this->config['expTags'])) {\n            $tags = $this->config['expTags'];\n        } else {\n            $tags = array();\n        }\n\n        foreach ($tags as $tagid) {\n            $sql .= ($first) ? 'exptags_id=' . intval($tagid) : ' OR exptags_id=' . intval($tagid);\n            $first = false;\n        }\n        $sql .= \") AND content_type='\" . $model->classname . \"'\";\n\n        // get the objects and render the template\n        $tag_assocs = $db->selectObjectsBySql($sql);\n        $records = array();\n        foreach ($tag_assocs as $assoc) {\n            $records[] = new $modelname($assoc->id);\n        }\n\n        assign_to_template(array(\n            'items' => $records\n        ));\n    }\n\n    /**\n     * create an item in this module\n     * @deprecated in favor of edit w/o id param\n     */\n    public function create() {\n        $args = array('controller' => $this->params['controller'], 'action' => 'edit');\n        //if (!empty($this->params['instance'])) $args['instance'] = $this->params['instance'];\n        if (!empty($this->params['src'])) $args['src'] = $this->params['src'];\n        redirect_to($args);\n    }\n\n    /**\n     * edit item in module, also used to copy items\n     */\n    public function edit() {\n        expHistory::set('editable', $this->params);\n        $taglist = expTag::getAllTags();\n        $modelname = $this->basemodel_name;\n//        $record = isset($this->params['id']) ? $this->$modelname->find($this->params['id']) : new $modelname($this->params);\n        if (isset($this->params['id'])) {\n            if (!isset($this->params['revision_id'])) {\n                $record = $this->$modelname->find($this->params['id']);\n            } else {\n                $currentrecord = $this->$modelname->find($this->params['id']);\n                $records = $this->$modelname->find('revisions', $this->$modelname->identifier . '=' . intval($this->params['id']) . ' AND revision_id=' . intval($this->params['revision_id']));\n                $record = $records[0];\n                $record->current_revision_id = $currentrecord->revision_id;\n            }\n        } else {\n            $record = new $modelname($this->params);\n        }\n        if (!empty($this->params['copy'])) {\n            $record->id = null;\n            if (isset($record->sef_url)) $record->sef_url = null;\n        }\n        assign_to_template(array(\n            'record'     => $record,\n//            'table'      => $this->$modelname->tablename,\n//            'controller' => $this->params['controller'],\n            'taglist'    => $taglist\n        ));\n    }\n\n    /**\n     * merge/move aggregated item into this module\n     */\n    public function merge() {\n        expHistory::set('editable', $this->params);\n        $modelname = $this->basemodel_name;\n        $record = $this->$modelname->find($this->params['id']);\n\n        $loc = expUnserialize($record->location_data);\n        $loc->src = $this->loc->src;\n        $record->location_data = serialize($loc);\n//        $this->$modelname->update($record);\n        $record->update();\n\n        expHistory::back();\n    }\n\n    /**\n     * update (save) item in module\n     */\n    public function update() {\n        global $db;\n\n        //check for and handle tags\n        if (array_key_exists('expTag', $this->params)) {\n            if (isset($this->params['id'])) {\n                $db->delete('content_expTags', 'content_type=\"' . (!empty($this->params['content_type']) ? $this->params['content_type'] : $this->basemodel_name) . '\" AND content_id=' . $this->params['id']);\n            }\n            $tags = explode(\",\", trim($this->params['expTag']));\n            unset($this->params['expTag']);\n\n            foreach ($tags as $tag) {\n                if (!empty($tag)) {\n                    $tag = strtolower(trim($tag));\n                    $tag = str_replace(array('\"', \"'\"), \"\", $tag); // strip double and single quotes\n                    if (!empty($tag)) {\n                        $expTag = new expTag($tag);\n                        if (empty($expTag->id))\n                            $expTag->update(array('title' => $tag));\n                        $this->params['expTag'][] = $expTag->id;\n                    }\n                }\n            }\n        }\n\n        //check for and handle cats\n        if (array_key_exists('expCat', $this->params) && !empty($this->params['expCat'])) {\n            $catid = $this->params['expCat'];\n            unset($this->params['expCat']);\n            $this->params['expCat'][] = $catid;\n        }\n\n        $modelname = $this->basemodel_name;\n        $this->$modelname->update($this->params);\n\n        if ($this->isSearchable()) {\n            $this->addContentToSearch($this->params);\n        }\n\n        // check for auto send facebook status\n        if (!empty($this->params['send_status'])) {\n            if ($this->classname == 'eventController') {\n                facebookController::postEvent(\n                    array('model' => $modelname, 'id' => $this->params['date_id'], 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            } else {\n                facebookController::postStatus(\n                    array('model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            }\n        }\n\n        // check for auto send tweet\n        if (!empty($this->params['send_tweet'])) {\n            if ($this->classname == 'eventController') {\n                twitterController::postEventTweet(\n                    array('model' => $modelname, 'id' => $this->params['date_id'], 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            } else {\n                twitterController::postTweet(\n                    array('model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            }\n        }\n\n        // check for eAlerts\n        if (!empty($this->params['send_ealerts'])) {\n            redirect_to(array('controller' => 'ealert', 'action' => 'send_confirm', 'model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'orig_controller' => expModules::getControllerName($this->classname)));\n        } else {\n            expHistory::back();\n        }\n    }\n\n    /**\n     * delete item in module\n     */\n    public function delete() {\n        $modelname = $this->basemodel_name;\n        if (empty($this->params['id'])) {\n            flash('error', gt('Missing id for the') . ' ' . $modelname . ' ' . gt('you would like to delete'));\n            expHistory::back();\n        }\n\n        $obj = new $modelname($this->params['id']);\n        $rows = $obj->delete();\n\n        // if this module is searchable lets delete spidered content\n        if ($this->isSearchable()) {\n            $search = new search();\n//            $content = $search->find('first', 'original_id=' . $this->params['id'] . \" AND ref_module='\" . $this->classname . \"'\");\n            $content = $search->find('first', 'original_id=' . $this->params['id'] . \" AND ref_module='\" . $this->baseclassname . \"'\");\n            if (!empty($content->id)) $content->delete();\n        }\n\n        expHistory::back();\n    }\n\n    /**\n     * rerank items in model\n     */\n    public function rerank() {\n        $modelname = $this->basemodel_name;\n        $obj = new $modelname($this->params['id']);\n        $obj->rerank($this->params['push']);\n        expHistory::back();\n    }\n\n    /**\n     * display module management view\n     */\n    public function manage() {\n        expHistory::set('manageable', $this->params);\n\n        $page = new expPaginator(array(\n            'model'      => $this->basemodel_name,\n            'where'      => static::hasSources() ? $this->aggregateWhereClause() : null,\n            'limit'      => isset($this->params['limit']) ? $this->params['limit'] : 10,\n            'order'      => isset($this->params['order']) ? $this->params['order'] : null,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'        => static::hasSources() == true ? $this->loc->src : null,\n            'columns'    => array(\n                gt('ID#')   => 'id',\n                gt('Title') => 'title',\n                gt('Body')  => 'body'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'  => $page,\n            'items' => $page->records\n        ));\n    }\n\n    /**\n     * rerank module items, called from ddrerank\n     */\n    public function manage_ranks() {\n        $rank = 1;\n        foreach ($this->params['rerank'] as $id) {\n            $modelname = $this->params['model'];\n            $obj = new $modelname($id);\n            $obj->rank = $rank;\n            $obj->save(false, true);\n            $rank++;\n        }\n\n        if (!expJavascript::inAjaxAction())\n            redirect_to($this->params['lastpage']);\n    }\n\n    /**\n     * Configure the module\n     */\n    public function configure() {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        $views = expTemplate::get_config_templates($this, $this->loc);\n\n        // needed for aggregation list\n        $pullable_modules = expModules::listInstalledControllers($this->baseclassname, $this->loc);\n        $page = new expPaginator(array(\n            'records' => $pullable_modules,\n            'controller' => $this->loc->mod,\n            'action' => $this->params['action'],\n            'order'   => isset($this->params['order']) ? $this->params['order'] : 'section',\n            'dir'     => isset($this->params['dir']) ? $this->params['dir'] : '',\n            'page'    => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns' => array(\n                gt('Title') => 'title',\n                gt('Page')  => 'section'\n            ),\n        ));\n\n//        if (empty($this->params['hcview'])) {\n            $containerloc = expCore::makeLocation(expModules::getModuleName($this->loc->mod),$this->loc->src);\n            $container = $db->selectObject('container', \"internal='\" . serialize($containerloc) . \"'\");\n            if (empty($container)) {\n                $container = new stdClass();\n                $container->action = 'showall';\n            } else {\n                $container->internal = unserialize($container->internal);\n            }\n            if (empty($container->action)) {\n                $container->action = 'showall';\n            }\n//            expSession::clearAllUsersSessionCache('containermodule');\n\n//            $modules_list = expModules::getActiveModulesAndControllersList();\n//            foreach ($modules_list as $moduleclass) {\n//                $module = new $moduleclass();\n//\n//                // Get basic module meta info\n//                $mod = new stdClass();\n//                $mod->name = $module->name();\n//                $mod->author = $module->author();\n//                $mod->description = $module->description();\n//                if (isset($container->view) && $container->internal->mod == $moduleclass) {\n//                    $mod->defaultView = $container->view;\n//                } else $mod->defaultView = DEFAULT_VIEW;\n//\n//                // Get support flags\n//                $mod->supportsSources = ($module->hasSources() ? 1 : 0);\n//                $mod->supportsViews = ($module->hasViews() ? 1 : 0);\n//\n//                // Get a list of views\n//                $mod->views = expTemplate::listModuleViews($moduleclass);\n//                natsort($mod->views);\n//\n//                $modules[$moduleclass] = $mod;\n////       \t\t$mods[$moduleclass] = $module->name();\n//                //        $mods[$moduleclass] = $moduleclass::name();\n//            }\n\n//        array_multisort(array_map('strtolower', $mods), $mods);\n\n            $actions = $this->useractions;\n            $mod_views = array();\n            if (!empty($actions)) {\n                  // Language-ize the action names\n                foreach ($actions as $key => $value) {\n                    $actions[$key] = gt($value);\n                }\n                $mod_views = expTemplate::get_action_views($this->classname, $container->action, $actions[$container->action]);\n                if (count($mod_views) < 1) $mod_views[$container->action] = $actions[$container->action] . ' - Default View';\n            }\n\n            assign_to_template(array(\n                'container' => $container,\n                'actions'   => $actions,\n                'mod_views' => $mod_views,\n            ));\n//        } else {\n        if (!empty($this->params['hcview'])) {\n            // this must be a hard-coded module?\n            assign_to_template(array(\n                'hcview' => $this->params['hcview'],\n            ));\n        }\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $folders = array();\n        $folders[] = 'Root Folder';\n        foreach ($cats as $cat) {\n            $folders[$cat->id] = $cat->title;\n        }\n\n        assign_to_template(array(\n//            'config'            => $this->config,  //FIXME already assigned in controllertemplate?\n            'page'              => $page, // needed for aggregation list\n            'views'             => $views,\n            'title'             =>static::displayname(),\n            'current_section'   => expSession::get('last_section'),\n//            'classname'         => $this->classname,  //FIXME $controller already assigned baseclassname (short vs long) in controllertemplate?\n            'viewpath'          => $this->viewpath,\n            'relative_viewpath' => $this->relative_viewpath,\n            'folders'           => $folders,\n        ));\n\n    }\n\n    /**\n     * save module configuration\n     */\n    public function saveconfig() {\n        global $db;\n\n        // update module title/action/view\n        if (!empty($this->params['container_id'])) {\n            $container = $db->selectObject('container', \"id=\" . $this->params['container_id']);\n            if (!empty($container)) {\n                $container->title = $this->params['moduletitle'];\n                $container->action = $this->params['actions'];\n                $container->view = $this->params['views'];\n                $container->is_private = $this->params['is_private'];\n                $db->updateObject($container, 'container');\n                expSession::clearAllUsersSessionCache('containermodule');\n            }\n            unset(\n                $this->params['container_id'],\n                $this->params['moduletitle'],\n                $this->params['modcntrol'],\n                $this->params['actions'],\n                $this->params['views'],\n                $this->params['actions'],\n                $this->params['is_private']\n            );\n        }\n\n        // create a new RSS object if enable is checked.\n        $params = $this->params;\n        if (!empty($this->params['enable_rss'])) {\n            $params['title'] = $params['feed_title'];\n            unset($params['feed_title']);\n            $params['sef_url'] = $params['feed_sef_url'];\n            unset($params['feed_sef_url']);\n            $rssfeed = new expRss($params);\n            $rssfeed->update($params);\n            $this->params['feed_sef_url'] = $rssfeed->sef_url;\n        } else {\n            $rssfeed = new expRss($this->params);\n            $params['enable_rss'] = false;\n            if (empty($params['advertise']))\n                $params['advertise'] = false;\n            $params['title'] = $params['feed_title'];\n            unset($params['feed_title']);\n            $params['sef_url'] = $params['feed_sef_url'];\n            unset($params['feed_sef_url']);\n            if (!empty($rssfeed->id)) { // do NOT create a new record, only update existing ones\n                $rssfeed->update($params);\n                $this->params['feed_sef_url'] = $rssfeed->sef_url;\n            }\n        }\n\n        // create a new eAlerts object if enable is checked.\n        if (!empty($this->params['enable_ealerts'])) {\n            $ealert = new expeAlerts($this->params);\n            $ealert->update($this->params);\n        }\n\n        // unset some unneeded params\n        unset(\n            $this->params['module'],\n            $this->params['controller'],\n            $this->params['src'],\n            $this->params['int'],\n            $this->params['id'],\n            $this->params['cid'],\n            $this->params['action'],\n            $this->params['PHPSESSID'],\n            $this->params['__utma'],\n            $this->params['__utmb'],\n            $this->params['__utmc'],\n            $this->params['__utmz'],\n            $this->params['__utmt'],\n            $this->params['__utmli'],\n            $this->params['__cfduid']\n        );\n\n        // setup and save the config\n        $config = new expConfig($this->loc);\n        $config->update(array('config' => $this->params));\n\n        flash('message', gt('Configuration updated'));\n        expHistory::back();\n    }\n\n    /**\n     * get the module's items in an rss feed format\n     *\n     * this function is very general and will most of the time need to be overwritten and customized\n     *\n     * @return array\n     */\n    public function getRSSContent($limit = 0) {\n        $class = new $this->basemodel_name;\n        $items = $class->find('all', $this->aggregateWhereClause(), isset($this->config['order']) ? $this->config['order'] : 'created_at DESC', $limit);\n\n        //Convert the items to rss items\n        $rssitems = array();\n        foreach ($items as $key => $item) {\n            $rss_item = new FeedItem();\n            $rss_item->title = expString::convertSmartQuotes($item->title);\n            $rss_item->link = $rss_item->guid = makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $item->sef_url));\n            $rss_item->description = expString::convertSmartQuotes($item->body);\n            $rss_item->author = user::getUserById($item->poster)->firstname . ' ' . user::getUserById($item->poster)->lastname;\n            $rss_item->authorEmail = user::getEmailById($item->poster);\n//            $rss_item->date = isset($item->publish_date) ? date(DATE_RSS, $item->publish_date) : date(DATE_RSS, $item->created_at);\n            $rss_item->date = isset($item->publish_date) ? $item->publish_date : $item->created_at;\n            if (!empty($item->expCat[0]->title)) $rss_item->category = array($item->expCat[0]->title);\n            $comment_count = expCommentController::countComments(array('content_id' => $item->id, 'content_type' => $this->basemodel_name));\n            if ($comment_count) {\n                $rss_item->comments = makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $item->sef_url)) . '#exp-comments';\n//                $rss_item->commentsRSS = makeLink(array('controller'=>$this->baseclassname, 'action'=>'show', 'title'=>$item->sef_url)).'#exp-comments';\n                $rss_item->commentsCount = $comment_count;\n            }\n            $rssitems[$key] = $rss_item;\n\n            if ($limit && count($rssitems) >= $limit)\n                break;\n        }\n        return $rssitems;\n    }\n\n    /**\n     * method to display an rss feed from this module\n     */\n    public function rss() {\n        require_once(BASE . 'external/feedcreator.class.php');\n\n        $id = isset($this->params['title']) ? expString::escape($this->params['title']) : (isset($this->params['id']) ? $this->params['id'] : null);\n        if (empty($id)) {\n            $module = !empty($this->params['module']) ? $this->params['module'] : $this->params['controller'];\n            $id = array('module' => $module, 'src' => $this->params['src']);\n        }\n        $site_rss = new expRss($id);\n        if ($site_rss->enable_rss == true && !empty($site_rss->id)) {\n            $site_rss->title = empty($site_rss->title) ? gt('RSS for') . ' ' . URL_FULL : $site_rss->title;\n            $site_rss->feed_desc = empty($site_rss->feed_desc) ? gt('This is an RSS syndication from') . ' ' . HOSTNAME : $site_rss->feed_desc;\n//            if (isset($site_rss->rss_cachetime)) {\n//                $ttl = $site_rss->rss_cachetime;\n//            }\n            if ($site_rss->rss_cachetime == 0) {\n                $site_rss->rss_cachetime = 1440;\n            }\n\n            if (!empty($site_rss->itunes_cats)) {\n                $ic = explode(\";\", $site_rss->itunes_cats);\n                $x = 0;\n                $itunes_cats = array();\n                foreach ($ic as $cat) {\n                    $cat_sub = explode(\":\", $cat);\n                    $itunes_cats[$x]->category = $cat_sub[0];\n                    if (isset($cat_sub[1])) {\n                        $itunes_cats[$x]->subcategory = $cat_sub[1];\n                    }\n                    $x++;\n                }\n            }\n\n            // NO buffering from here on out or things break unexpectedly. - RAM\n            ob_end_clean();\n\n            header('Content-Type: ' . 'application/rss+xml');\n//            header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n//            header('Content-Transfer-Encoding: binary');\n            header('Content-Encoding:');\n            // IE need specific headers\n            if (EXPONENT_USER_BROWSER == 'IE') {\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n                header('Vary: User-Agent');\n            } else {\n                header('Pragma: no-cache');\n            }\n\n            if ($site_rss->rss_is_podcast) {\n                $feed_type = \"PODCAST\";\n            } else {\n                $feed_type = \"RSS2.0\";\n            }\n            $feed_cache = BASE . 'tmp/rsscache/' . $site_rss->sef_url . '.xml';\n\n            $rss = new UniversalFeedCreator();\n//            if (file_exists(THEME_ABSOLUTE . \"rss/feed.css\"))  // custom css style\n//                $rss->cssStyleSheet = THEME_RELATIVE . \"rss/feed.css\";\n            if (file_exists(THEME_ABSOLUTE . \"rss/feed.xsl\"))  // custom xml style\n                $rss->xslStyleSheet = THEME_RELATIVE . \"rss/feed.xsl\";\n            $rss->useCached($feed_type, $feed_cache, $site_rss->rss_cachetime);  // if cache exists output then redirect\n\n            $rss->title = $site_rss->title;\n            if (!empty($this->params['type']))\n                $rss->title .= ' ' . ucfirst($this->params['type']);\n            $rss->description = $site_rss->feed_desc;\n            $rss->image = new FeedImage();\n            $rss->image->url = !empty($site_rss->expFile['album'][0]) ? $site_rss->expFile['album'][0]->url : URL_FULL . 'themes/' . DISPLAY_THEME . '/images/logo.png';\n            $rss->image->title = $site_rss->title;\n            $rss->image->link = URL_FULL;\n            //    $rss->image->width = 64;\n            //    $rss->image->height = 64;\n            $rss->ttl = $site_rss->rss_cachetime;\n            $rss->link = URL_FULL;\n            $rss->language = LOCALE;\n            $rss->syndicationURL = makeLink(array('module'=>$site_rss->module, 'src'=>$site_rss->src));\n            if ($site_rss->rss_is_podcast) {\n                $rss->itunes = new iTunes();\n                $rss->itunes->author = !empty($site_rss->feed_artist) ? $site_rss->feed_artist : ORGANIZATION_NAME;\n                $rss->itunes->image = !empty($site_rss->expFile['album'][0]) ? $site_rss->expFile['album'][0]->url :URL_FULL . 'themes/' . DISPLAY_THEME . '/images/logo.png';\n                $rss->itunes->summary = $site_rss->feed_desc;\n                if (!empty($itunes_cats)) {\n                    $rss->itunes->category = $itunes_cats[0]->category;\n                    $rss->itunes->subcategory = $itunes_cats[0]->subcategory;\n                }\n                //\t\t$rss->itunes->explicit = 0;\n//                $rss->itunes->subtitle = $site_rss->title;\n                $rss->itunes->subtitle = $site_rss->feed_desc;\n                //\t\t$rss->itunes->keywords = 0;\n                $rss->itunes->owner_email = SMTP_FROMADDRESS;\n                $rss->itunes->owner_name = ORGANIZATION_NAME;\n            }\n\n            $pubDate = '';\n            $site_rss->params = $this->params;\n            foreach ($site_rss->getFeedItems($site_rss->rss_limit) as $item) {\n                if ($item->date > $pubDate) {\n                    $pubDate = $item->date;\n                }\n                $rss->addItem($item);\n            }\n            if (!empty($site_rss->rss_limit)) {\n                $rss->items = array_slice($rss->items, 0, $site_rss->rss_limit);\n            }\n            $rss->pubDate = $pubDate;\n\n//            echo $rss->createFeed($feed_type);\n            echo $rss->saveFeed($feed_type, $feed_cache, $site_rss->rss_cachetime);  // does redirect after updating cache\n        } else {\n            flash('notice', gt(\"This RSS feed is not available.\"));\n            expHistory::back();\n        }\n\n        //Read the file out directly\n        exit();\n    }\n\n    /**\n     * download a file attached to item\n     */\n    public function downloadfile() {\n        if (!isset($this->config['allowdownloads']) || $this->config['allowdownloads'] == true) {\n            //if ($db->selectObject('content_expFiles', 'content_type=\"'.$this->baseclassname.'\" AND expfiles_id='.$this->params['id']) != null) {\n            expFile::download($this->params['id']);\n            //}\n        } else {\n            flash('error', gt('Downloads have not been enabled for this file'));\n            expHistory::back();\n        }\n\n    }\n\n    /**\n     * permission functions to aggregate a module's visible permissions based on add/remove permissions\n     *\n     * @return array\n     */\n    public function permissions() {\n        //set the permissions array\n        $perms = array();\n        foreach ($this->permissions as $perm => $name) {\n            if (!in_array($perm, $this->remove_permissions)) $perms[$perm] = $name;\n        }\n        $perms = array_merge($perms, $this->add_permissions);\n        return $perms;\n    }\n\n    /**\n     * permission functions to aggregate a module's permissions based on add/remove and manage permissions\n     *\n     * @return array\n     */\n    public function permissions_all() {\n        //set the permissions array\n        $perms = array();\n        foreach ($this->permissions as $perm => $name) {\n            if (!in_array($perm, $this->remove_permissions)) $perms[$perm] = $name;\n        }\n        $perms = array_merge($perms, $this->m_permissions, $this->add_permissions, $this->manage_permissions);\n        return $perms;\n    }\n\n    // create a psuedo global permission specific to the module; return true grants permission, false continues with other permission checks\n    public static function checkPermissions($permission, $location) {\n        return false;\n    }\n\n    /**\n     * get the model(s) associated with this module\n     *\n     * @return array\n     */\n    public function getModels() {\n        return isset($this->models) ? $this->models : array($this->basemodel_name);\n    }\n\n    /**\n     * type of items searched in the module\n     *\n     * @return string\n     */\n    public function searchName() {\n        return static::displayname();\n    }\n\n    /**\n     * category of items searched in the module\n     *\n     * @return string\n     */\n    public function searchCategory() {\n        return $this->basemodel_name;\n    }\n\n    /**\n     * add module items to search index\n     *\n     * @return int\n     */\n    public function addContentToSearch() {\n//        global $db, $router;\n        global $db;\n\n        $count = 0;\n        $model = new $this->basemodel_name(null, false, false);\n        $where = (!empty($this->params['id'])) ? 'id=' . $this->params['id'] : null;\n        $content = $db->selectArrays($model->tablename, $where);\n        foreach ($content as $cnt) {\n            $origid = $cnt['id'];\n            unset($cnt['id']);\n           //build the search record and save it.\n//            $sql = \"original_id=\" . $origid . \" AND ref_module='\" . $this->classname . \"'\";\n            $sql = \"original_id=\" . $origid . \" AND ref_module='\" . $this->baseclassname . \"'\";\n            $oldindex = $db->selectObject('search', $sql);\n            if (!empty($oldindex)) {\n                $search_record = new search($oldindex->id, false, false);\n                $search_record->update($cnt);\n            } else {\n                $search_record = new search($cnt, false, false);\n            }\n\n            //build the search record and save it.\n            $search_record->original_id = $origid;\n            $search_record->posted = empty($cnt['created_at']) ? null : $cnt['created_at'];\n            // get the location data for this content\n            if (isset($cnt['location_data']))\n                $loc = expUnserialize($cnt['location_data']);\n            $src = isset($loc->src) ? $loc->src : null;\n            if (!empty($cnt['sef_url'])) {\n                $link = str_replace(URL_FULL, '', makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $cnt['sef_url'])));\n            } else {\n                $link = str_replace(URL_FULL, '', makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'id' => $origid, 'src' => $src)));\n            }\n//\t        if (empty($search_record->title)) $search_record->title = 'Untitled';\n            $search_record->view_link = $link;\n//            $search_record->ref_module = $this->classname;\n            $search_record->ref_module = $this->baseclassname;\n            $search_record->category = $this->searchName();\n            $search_record->ref_type = $this->searchCategory();\n            $search_record->save();\n            $count++;\n        }\n\n        return $count;\n    }\n\n    /**\n     * additional check for display of search hit\n     *\n     * @param $record\n     *\n     * @return bool\n     */\n    public static function searchHit($record) {\n        return true;  // default is to display search hit\n    }\n\n    /**\n     * remove all module items from search index\n     */\n    public function delete_search() {\n        global $db;\n        // remove this modules entries from the search table.\n        if ($this->isSearchable()) {\n//            $where = \"ref_module='\" . $this->classname . \"' AND location_data='\" . serialize($this->loc) . \"'\";\n            $where = \"ref_module='\" . $this->baseclassname . \"' AND location_data='\" . serialize($this->loc) . \"'\";\n//            $test = $db->selectObjects('search', $where);\n            $db->delete('search', $where);\n        }\n    }\n\n    /**\n     * delete module and all its items for backwards compat with old modules\n     *\n     * @param $loc\n     */\n    public function delete_In($loc) {\n        $this->delete_instance($loc);\n    }\n\n    /**\n     * delete module, config, and all its items\n     * @param bool $loc\n     */\n    public function delete_instance($loc = false) {\n        $model = new $this->basemodel_name();\n        $where = 1;\n        if ($loc || static::hasSources())\n            $where = \"location_data='\" . serialize($this->loc) . \"'\";\n        $items = $model->find('all',$where);\n        foreach ($items as $item) {\n            $item->delete();  // model should delete attachments and other associated objects\n        }\n        $cfg = new expConfig($this->loc);\n        $cfg->delete();\n    }\n\n    /**\n     * get the metainfo for this module\n     *\n     * @return array\n     */\n    public function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return false;\n\n        // figure out what metadata to pass back based on the action we are in.\n        $action = $router->params['action'];\n        $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n        $modelname = $this->basemodel_name;\n\n        switch ($action) {\n            case 'showall':\n                $metainfo['title'] = gt(\"Showing\") . \" \" . static::displayname() . ' - ' . SITE_TITLE;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n                break;\n            case 'show':\n            case 'showByTitle':\n                // look up the record.\n                if (isset($router->params['id']) || isset($router->params['title'])) {\n                    $lookup = isset($router->params['id']) ? $router->params['id'] : $router->params['title'];\n                    $object = new $modelname($lookup);\n                    // set the meta info\n                    if (!empty($object)) {\n                        if (!empty($object->body)) {\n                            $desc = str_replace('\"',\"'\",expString::summarize($object->body,'html','para'));\n                        } else {\n                            $desc = SITE_DESCRIPTION;\n                        }\n                        if (!empty($object->expTag)) {\n                            $keyw = '';\n                            foreach ($object->expTag as $tag) {\n                                if (!empty($keyw)) $keyw .= ', ';\n                                $keyw .= $tag->title;\n                            }\n                        } else {\n                            $keyw = SITE_KEYWORDS;\n                        }\n                        $metainfo['title'] = empty($object->meta_title) ? $object->title : $object->meta_title;\n                        $metainfo['keywords'] = empty($object->meta_keywords) ? $keyw : $object->meta_keywords;\n                        $metainfo['description'] = empty($object->meta_description) ? $desc : $object->meta_description;\n//                        $metainfo['canonical'] = empty($object->canonical) ? URL_FULL.substr($router->sefPath, 1) : $object->canonical;\n                        $metainfo['canonical'] = empty($object->canonical) ? $router->plainPath() : $object->canonical;\n                        $metainfo['noindex'] = empty($object->meta_noindex) ? false : $object->meta_noindex;\n                        $metainfo['nofollow'] = empty($object->meta_nofollow) ? false : $object->meta_nofollow;\n                        $metainfo['rich'] = $this->meta_rich($router->params, $object);\n                        $metainfo['fb'] = $this->meta_fb($router->params, $object, $metainfo['canonical']);\n                        $metainfo['tw'] = $this->meta_tw($router->params, $object, $metainfo['canonical']);\n                    }\n                    break;\n                }\n            default:\n                //check for a function in the controller called 'action'_meta and use it if so\n                $functionName = $action . \"_meta\";\n                $mod = new $this->classname;\n                if (method_exists($mod, $functionName)) {\n                    $metainfo = $mod->$functionName($router->params);\n                } else {\n                    $metainfo['title'] = static::displayname() . \" - \" . SITE_TITLE;\n                    $metainfo['keywords'] = SITE_KEYWORDS;\n                    $metainfo['description'] = SITE_DESCRIPTION;\n//                    $metainfo['canonical'] = URL_FULL.substr($router->sefPath, 1);\n                    $metainfo['canonical'] = $router->plainPath();\n                }\n        }\n\n        return $metainfo;\n    }\n\n    /**\n     * Returns rich snippet PageMap meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return null\n     */\n    public function meta_rich($request, $object) {\n        return null;\n    }\n\n    /**\n     * Returns Facebook og: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return array\n     */\n    public function meta_fb($request, $object, $canonical) {\n        return array();\n    }\n\n    /**\n     * Returns Twitter twitter: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return array\n     */\n    public function meta_tw($request, $object, $canonical) {\n        return array();\n    }\n\n    /**\n     * action specific metainfo\n     *\n     * @param $request\n     * @return array\n     */\n    public function showall_by_tags_meta($request) {\n        global $router;\n\n        // look up the record.\n        if (isset($request['tag'])) {\n            $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n            $tag = $request['tag'];\n            // set the meta info\n            $metainfo['title'] = gt('Showing all') . ' ' . ucwords($this->basemodel_name) . ' ' . gt('tagged as') . ' ' . $tag;\n//            $metainfo['keywords'] = empty($object->meta_keywords) ? SITE_KEYWORDS : $object->meta_keywords; //FIXME $object not set\n            $metainfo['keywords'] = $request['tag'];\n//            $metainfo['description'] = empty($object->meta_description) ? SITE_DESCRIPTION : $object->meta_description; //FIXME $object not set\n            $metainfo['description'] = SITE_DESCRIPTION;\n//            $metainfo['canonical'] = empty($object->canonical) ? URL_FULL . substr($router->sefPath, 1) : $object->canonical; //FIXME $object not set\n//            $metainfo['canonical'] = URL_FULL . substr($router->sefPath, 1);\n            $metainfo['canonical'] = $router->plainPath();\n            return $metainfo;\n        }\n        return null;\n    }\n\n    /**\n     * action specific metainfo\n     *\n     * @param $request\n     * @return array\n     */\n    public function showall_by_date_meta($request) {\n        global $router;\n\n        // look up the record.\n        if (isset($request['month'])) {\n            $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n            $mk = mktime(0, 0, 0, $request['month'], 01, $request['year']);\n            $ts = strftime('%B, %Y', $mk);\n            // set the meta info\n            $metainfo['title'] = gt('Showing all') . ' ' . ucwords($this->basemodel_name) . ' ' . gt('written in') . ' ' . $ts;\n//            $metainfo['keywords'] = empty($object->meta_keywords) ? SITE_KEYWORDS : $object->meta_keywords; //FIXME $object not set\n            $metainfo['keywords'] = SITE_KEYWORDS;\n//            $metainfo['description'] = empty($object->meta_description) ? SITE_DESCRIPTION : $object->meta_description; //FIXME $object not set\n            $metainfo['description'] = SITE_DESCRIPTION;\n//            $metainfo['canonical'] = empty($object->canonical) ? URL_FULL . substr($router->sefPath, 1) : $object->canonical; //FIXME $object not set\n//            $metainfo['canonical'] = URL_FULL . substr($router->sefPath, 1);\n            $metainfo['canonical'] = $router->plainPath();\n            return $metainfo;\n        }\n        return null;\n    }\n\n    /**\n     * approve module item\n     */\n    public function approve() {\n        $modelname = $this->basemodel_name;\n        $lookup = isset($this->params['id']) ? $this->params['id'] : $this->params['title'];\n        $object = new $modelname($lookup);\n        $object->approved = true;\n        $object->save(false, true);  // we don't want to add this approval as a new revision\n        expHistory::back();\n    }\n\n    /**\n     * The aggregateWhereClause function creates a sql where clause which also includes aggregated module content\n     *\n     * @param string $type\n     *\n     * @return string\n     */\n    public function aggregateWhereClause($type='') {\n        global $user;\n\n        $sql = '';\n\n        if (empty($this->config['add_source']) && !static::hasSources()) {\n            return $sql;\n        }\n\n        if (!empty($this->config['aggregate'])) $sql .= '(';\n\n        $sql .= \"location_data ='\" . serialize($this->loc) . \"'\";\n\n        if (!empty($this->config['aggregate'])) {\n            foreach ($this->config['aggregate'] as $src) {\n                $loc = expCore::makeLocation($this->baseclassname, $src);\n                $sql .= \" OR location_data ='\" . serialize($loc) . \"'\";\n            }\n\n            $sql .= ')';\n        }\n        $model = $this->basemodel_name;\n        if (ENABLE_WORKFLOW && $this->$model->needs_approval) {\n            if ($user->id) {\n                $sql .= ' AND (approved=1 OR poster=' . $user->id . ' OR editor=' . $user->id . ')';\n            } else {\n                $sql .= ' AND approved=1';\n            }\n        }\n\n        return $sql;\n    }\n\n}\n\n?>"], "fixing_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expController\n *\n * @package    Core\n * @subpackage Controllers\n */\n\nabstract class expController {\n    protected $classname = ''; // full controller name w/ 'Controller' suffix\n    public $baseclassname = ''; // root controller name w/o 'Controller' suffix\n    public $classinfo = null; // holds reflection class of class\n//    public $module_name = '';       //FIXME not used and not actually set right index needed of -3 instead of -2 below\n//    protected $basemodel = null;    //FIXME never used, $basemodel_name replaced?\n    public $basemodel_name = ''; // holds classname of base model associated w/ this controller\n    public $model_table = ''; // holds table name for base model\n\n    public $useractions = array(); // available (displayed) user actions/methods for this module\n    public $remove_configs = array(); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    // $permissions used to restrict access to module's actions/methods\n    protected $permissions = array(  // standard set of permissions for all modules unless add'ed or remove'd\n        'manage'    => 'Manage',\n        'configure' => 'Configure',\n        'create'    => 'Create',\n        'edit'      => 'Edit',\n        'delete'    => 'Delete',\n    );\n    protected $m_permissions = array(  // standard set of actions requiring manage permission for all modules\n        'activate'  => 'Activate',\n        'approve'   => 'Approve',\n        'merge'     => 'Merge',\n        'rerank'    => 'ReRank',\n        'import'    => 'Import Items',\n        'export'    => 'Export Items'\n    );\n    protected $remove_permissions = array();  // $permissions not applicable for this module from above list\n    protected $add_permissions = array();  // additional $permissions processed and visible  for this module\n    protected $manage_permissions = array();  // additional actions requiring manage permission in addition to $m_permissions\n    public $requires_login = array();  // actions/methods (lower case ONLY) which ONLY require user be logged in to access...$permissions take priority\n\n    public $filepath = ''; // location of this controller's files\n    public $viewpath = ''; // location of this controllers views; defaults to controller file location\n    public $relative_viewpath = ''; // relative location of controller's views\n    public $asset_path = ''; // location of this controller's assets; defaults to controller file location\n\n    public $config = array(); // holds module configuration settings\n    public $params = array(); // holds sanitized parameters passed to module\n    public $loc = null; // module location object\n\n    public $codequality = 'stable'; // code's level of stability\n\n    public $rss_is_podcast = false;\n\n    /**\n     * @param null  $src\n     * @param array $params\n     *\n     * @return expController\n     *\n     */\n    public function __construct($src = null, $params = array()) {\n        // setup some basic information about this class\n        $this->classinfo = new ReflectionClass($this);\n        $this->classname = $this->classinfo->getName();\n        $this->baseclassname = substr($this->classinfo->getName(), 0, -10);\n        $this->filepath = __realpath($this->classinfo->getFileName());\n\n        // figure out which \"module\" we belong to and setup view path information\n        $controllerpath = explode('/', $this->filepath);\n//        $this->module_name = $controllerpath[(count($controllerpath)-3)];\n\n        // set up the path to this module view files\n        array_pop($controllerpath); // remove 'controllers' from array\n        $controllerpath[count($controllerpath) - 1] = 'views';\n        array_push($controllerpath, $this->baseclassname);\n        $this->relative_viewpath = implode('/', array_slice($controllerpath, -3, 3));\n//        $this->viewpath = BASE.'framework/modules/'.$this->relative_viewpath;\n        //FIXME this requires we move the 'core' controllers into the modules folder or use this hack\n        $depth = array_search('core', $controllerpath);\n        if ($depth) {\n            $this->viewpath = BASE . 'framework/modules/' . $this->relative_viewpath;\n        } else {\n            $this->viewpath = implode('/', $controllerpath);\n        }\n\n        //grab the path to the module's assets\n        array_pop($controllerpath);\n        $controllerpath[count($controllerpath) - 1] = 'assets';\n//        $this->asset_path = PATH_RELATIVE.'framework/'.implode('/', array_slice($controllerpath, -3, 3)).\"/\";\n        $depth = array_search('framework', $controllerpath);  // is this a system file (or theme)?\n        if (!$depth) $depth = array_search('themes', $controllerpath);\n        $this->asset_path = PATH_RELATIVE . implode('/', array_slice($controllerpath, $depth)) . \"/\";\n\n        // figure out which model we're using and setup some info about it\n        if (empty($this->basemodel_name)) $this->basemodel_name = get_model_for_controller($this->classname);\n        $modelname = $this->basemodel_name;\n        if (class_exists($modelname)) {\n            $this->$modelname = new $modelname(null, false, false);\n            $this->model_table = $this->$modelname->tablename;\n        } else {\n            $this->basemodel_name = 'expRecord';\n            $this->$modelname = new expRecord(null, false, false);\n            $this->model_table = null;\n        }\n\n        // set the location data\n        $this->loc = expCore::makeLocation($this->baseclassname, $src, null);\n\n        // flag for needing approval check\n        if (ENABLE_WORKFLOW && $this->$modelname->supports_revisions) {\n            $uilevel = 99;\n            if (expSession::exists(\"uilevel\")) $uilevel = expSession::get(\"uilevel\");\n            if (!expPermissions::check('approve', $this->loc)) {\n                $this->$modelname->needs_approval = true;\n            } elseif ($uilevel == UILEVEL_PREVIEW && isset($uilevel)) {\n                $this->$modelname->needs_approval = true;  // 'preview' should provide a true preview\n            }\n        }\n\n        // get this controllers config data if there is any\n        $config = new expConfig($this->loc);\n        $this->config = $config->config;\n\n        $this->params = $params;\n        if (ENABLE_WORKFLOW)\n            $this->permissions = array_merge($this->permissions, array('approve'=>'Approval'));\n    }\n\n    /**\n     * name of module for backwards compat with old modules\n     *\n     * @return string\n     */\n    public function name() {\n        return static::displayname();\n    }\n\n    /**\n     * name of module\n     *\n     * @return string\n     */\n    public static function displayname() {\n        return gt(\"Exponent Base Controller\");\n    }\n\n    /**\n     * description of module\n     *\n     * @return string\n     */\n    public static function description() {\n        return gt(\"This is the base controller which most Exponent modules inherit their methods from.\");\n    }\n\n    /**\n     * author of module\n     *\n     * @return string\n     */\n    public static function author() {\n        return \"OIC Group, Inc\";\n    }\n\n    /**\n     * does module have sources available? or does it treat content globally\n     *\n     * @return bool\n     */\n    public static function hasSources() {\n        return true;\n    }\n\n    /**\n     * does module have views available?\n     *\n     * @return bool\n     */  //NOTE: Never used - equivalent to !empty ($this->useractions) via expModules::listUserRunnableControllers()?\n    public static function hasViews() {\n        return true;\n    }\n\n    /**\n     * does module have content (stored items) available?\n     *\n     * @return bool\n     */  //NOTE: Never used, better utilized/implemented as isSearchable()\n    public static function hasContent() {\n        return true;\n    }\n\n    /**\n     * does module support workflow?\n     *\n     * @return bool\n     */\n    public static function supportsWorkflow() {\n        return false;\n    }\n\n    /**\n     * is module content searchable? should it be added to search index?\n     *\n     * @return bool\n     */\n    public static function isSearchable() {\n        return false;\n    }\n\n    /**\n     * can this module import data?\n     *\n     * @return bool\n     */\n    public static function canImportData() {\n        return false;\n    }\n\n    /**\n     * can this module export data?\n     *\n     * @return bool\n     */\n    public static function canExportData() {\n        return false;\n    }\n\n    /**\n     * does this module require configuration?\n     *\n     * @return bool\n     */  //NOTE: Never Used\n    public static function requiresConfiguration() {\n        return false;\n    }\n\n    /**\n     * glue to make the view template aware of the module\n     * @deprecated\n     */\n    public function moduleSelfAwareness() {\n        assign_to_template(array(\n            'asset_path' => $this->asset_path,\n            'model_name' => $this->basemodel_name,\n            'table'      => $this->model_table,\n            'controller' => $this->baseclassname,\n            'config'     => $this->config\n        ));\n    }\n\n    /**\n     * default module view method for all items\n     */\n    public function showall() {\n        expHistory::set('viewable', $this->params);\n\n        $page = new expPaginator(array(\n            'model'      => $this->basemodel_name,\n            'where'      => static::hasSources() ? $this->aggregateWhereClause() : null,\n            'limit'      => (isset($this->params['limit']) && $this->params['limit'] != '') ? $this->params['limit'] : 10,\n            'order'      => isset($this->params['order']) ? $this->params['order'] : null,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'        => static::hasSources() == true ? $this->loc->src : null,\n            'columns'    => array(\n                gt('ID#')   => 'id',\n                gt('Title') => 'title',\n                gt('Body')  => 'body'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'  => $page,\n            'items' => $page->records\n        ));\n    }\n\n    /**\n     * default module view method for all items with a specific tag\n     */\n    public function showall_by_tags() {\n        global $db;\n\n         // set history\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        // get the tag being passed\n        $tag = new expTag(expString::escape($this->params['tag']));\n\n        // find all the id's of the portfolios for this module\n        $item_ids = $db->selectColumn($modelname, 'id', $this->aggregateWhereClause());\n\n        // find all the items that this tag is attached to\n        $items = $tag->findWhereAttachedTo($modelname);\n\n        // loop the items for this tag and find out which ones belong to this module\n        $items_by_tags = array();\n        foreach ($items as $item) {\n            if (in_array($item->id, $item_ids)) $items_by_tags[] = $item;\n        }\n\n        // create a pagination object for the model and render the action\n        $order = 'created_at DESC';\n        $page = new expPaginator(array(\n            'records'    => $items_by_tags,\n            'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'      => $order,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'=>$this->loc->src,\n            'columns'    => array(\n                gt('Title') => 'title'\n            ),\n        ));\n//        $page->records = expSorter::sort(array('array'=>$page->records, 'sortby'=>'rank', 'order'=>'ASC', 'ignore_case'=>true));\n        $page->records = expSorter::sort(array('array' => $page->records, 'sortby' => 'created_at', 'order' => 'DESC', 'ignore_case' => true));\n\n        assign_to_template(array(\n            'page'        => $page,\n            'items'       => $page->records,\n            'moduletitle' => ucfirst($modelname) . ' ' . gt('items tagged with') . ' \"' . expString::escape($this->params['tag']) . '\"',\n            'rank'        => ($order === 'rank') ? 1 : 0\n        ));\n    }\n\n    /**\n     * return all tags used by module's items\n     */\n    public function tags() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all', $this->aggregateWhereClause());\n        $used_tags = array();\n        foreach ($items as $item) {\n            foreach ($item->expTag as $tag) {\n                if (isset($used_tags[$tag->id])) {\n                    $used_tags[$tag->id]->count++;\n                } else {\n                    $exptag = new expTag($tag->id);\n                    $used_tags[$tag->id] = $exptag;\n                    $used_tags[$tag->id]->count = 1;\n                }\n            }\n        }\n\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'rank';\n//        $used_tags = expSorter::sort(array('array'=>$used_tags,'sortby'=>'title', 'order'=>'ASC', 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n//        $used_tags = expSorter::sort(array('array'=>$used_tags, 'order'=>$order, 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n        $used_tags = expSorter::sort(array('array' => $used_tags, 'order' => 'count DESC', 'type' => 'a'));\n        if (!empty($this->config['limit'])) $used_tags = array_slice($used_tags, 0, $this->config['limit']);\n        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n        if ($order != 'hits') {\n            $used_tags = expSorter::sort(array('array' => $used_tags, 'order' => $order, 'ignore_case' => true, 'rank' => ($order === 'rank') ? 1 : 0));\n        }\n\n        assign_to_template(array(\n            'tags' => $used_tags\n        ));\n    }\n\n    /**\n     * return all categories used by module's items\n     */\n    public function categories() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all', $this->aggregateWhereClause());\n        $used_cats = array();\n        $used_cats[0] = new stdClass();\n        $used_cats[0]->id = 0;\n        $used_cats[0]->title = !empty($this->config['uncat']) ? $this->config['uncat'] : gt('Not Categorized');\n        $used_cats[0]->count = 0;\n        foreach ($items as $item) {\n            if (!empty($item->expCat)) {\n                if (isset($used_cats[$item->expCat[0]->id])) {\n                    $used_cats[$item->expCat[0]->id]->count++;\n                } else {\n                    $expcat = new expCat($item->expCat[0]->id);\n                    $used_cats[$item->expCat[0]->id] = $expcat;\n                    $used_cats[$item->expCat[0]->id]->count = 1;\n                }\n            } else {\n                $used_cats[0]->count++;\n            }\n        }\n\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'rank';\n//        $used_cats = expSorter::sort(array('array'=>$used_cats,'sortby'=>'title', 'order'=>'ASC', 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n//        $used_cats = expSorter::sort(array('array'=>$used_cats, 'order'=>$order, 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n        $used_cats = expSorter::sort(array('array' => $used_cats, 'order' => 'count DESC', 'type' => 'a'));\n        if (!empty($this->config['limit'])) $used_cats = array_slice($used_cats, 0, $this->config['limit']);\n        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n        if ($order != 'count') {\n            $used_cats = expSorter::sort(array('array' => $used_cats, 'order' => $order, 'ignore_case' => true, 'rank' => ($order === 'rank') ? 1 : 0));\n        }\n\n        assign_to_template(array(\n            'cats' => $used_cats\n        ));\n    }\n\n    /**\n     * return all comments used by module's items\n     */\n    public function comments() {\n\t    expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all');\n        $all_comments = array();\n        // get all the blog comments\n        foreach ($items as $item) {\n            $more_comments = expCommentController::getComments(array('content_type'=>$modelname,'content_id'=>$item->id));\n            if (!empty($more_comments)) {\n                foreach ($more_comments as $next_comment) {\n                    $next_comment->ref = $item->title;\n                    $next_comment->sef_url = $item->sef_url;\n                }\n                $all_comments = array_merge($all_comments,$more_comments);\n            }\n        }\n        // sort then limit all the blog comments\n        $all_comments = expSorter::sort(array('array' => $all_comments, 'sortby' => 'created_at', 'order' => 'DESC', 'ignore_case' => true));\n        $limit = (isset($this->config['headcount']) && $this->config['headcount'] != '') ? $this->config['headcount'] : 10;\n        $comments = array_slice($all_comments,0,$limit);\n\t    assign_to_template(array(\n            'comments'=>$comments,\n        ));\n\t}\n\n    /**\n     * default view for individual item\n     */\n    public function show() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        // figure out if we're looking this up by id or title\n        $id = null;\n        if (isset($this->params['id'])) {\n            $id = $this->params['id'];\n        } elseif (isset($this->params['title'])) {\n            $id = expString::escape($this->params['title']);\n        }\n\n        $record = new $modelname($id);\n        if (empty($record->id))\n            redirect_to(array('controller'=>'notfound','action'=>'page_not_found','title'=>$this->params['title']));\n\n        $config = expConfig::getConfig($record->location_data);\n        if (empty($this->config))\n            $this->config = $config;\n        if (empty($this->loc->src)) {\n            $r_loc = expUnserialize($record->location_data);\n            $this->loc = new stdClass();\n            $this->loc->src = $r_loc->src;\n        }\n\n        assign_to_template(array(\n            'record' => $record,\n            'config' => $config\n        ));\n    }\n\n    /**\n     * view the item by referring to its title\n     * @deprecated\n     */\n    public function showByTitle() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n        // first we'll check to see if this matches the sef_url field...if not then we'll look for the\n        // title field\n        $this->params['title'] = expString::escape($this->params['title']);  // escape title to prevent sql injection\n        $record = $this->$modelname->find('first', \"sef_url='\" . $this->params['title'] . \"'\");\n        if (!is_object($record)) {\n            $record = $this->$modelname->find('first', \"title='\" . $this->params['title'] . \"'\");\n        }\n        $this->loc = unserialize($record->location_data);\n\n        assign_to_template(array(\n            'record' => $record,\n        ));\n    }\n\n    /**\n     * view a random item\n     */\n    public function showRandom() {\n        expHistory::set('viewable', $this->params);\n        $where = static::hasSources() ? $this->aggregateWhereClause() : null;\n        $limit = isset($this->params['limit']) ? $this->params['limit'] : 1;\n        $order = 'RAND()';\n        assign_to_template(array(\n            'items' => $this->text->find('all', $where, $order, $limit)\n        ));\n    }\n\n    /**\n     * view items referenced by tags\n     * @deprecated\n     */\n    public function showByTags() {\n        global $db;\n\n        // set the history point for this action\n        expHistory::set('viewable', $this->params);\n\n        // setup some objects\n        $tagobj = new expTag();\n        $modelname = empty($this->params['model']) ? $this->basemodel_name : $this->params['model'];\n        $model = new $modelname();\n\n        // start building the sql query\n        $sql = 'SELECT DISTINCT m.id FROM ' . $db->prefix . $model->tablename . ' m ';\n        $sql .= 'JOIN ' . $db->prefix . $tagobj->attachable_table . ' ct ';\n        $sql .= 'ON m.id = ct.content_id WHERE (';\n        $first = true;\n\n        if (isset($this->params['tags'])) {\n            $tags = is_array($this->params['tags']) ? $this->params['tags'] : array($this->params['tags']);\n        } elseif (isset($this->config['expTags'])) {\n            $tags = $this->config['expTags'];\n        } else {\n            $tags = array();\n        }\n\n        foreach ($tags as $tagid) {\n            $sql .= ($first) ? 'exptags_id=' . intval($tagid) : ' OR exptags_id=' . intval($tagid);\n            $first = false;\n        }\n        $sql .= \") AND content_type='\" . $model->classname . \"'\";\n\n        // get the objects and render the template\n        $tag_assocs = $db->selectObjectsBySql($sql);\n        $records = array();\n        foreach ($tag_assocs as $assoc) {\n            $records[] = new $modelname($assoc->id);\n        }\n\n        assign_to_template(array(\n            'items' => $records\n        ));\n    }\n\n    /**\n     * create an item in this module\n     * @deprecated in favor of edit w/o id param\n     */\n    public function create() {\n        $args = array('controller' => $this->params['controller'], 'action' => 'edit');\n        //if (!empty($this->params['instance'])) $args['instance'] = $this->params['instance'];\n        if (!empty($this->params['src'])) $args['src'] = $this->params['src'];\n        redirect_to($args);\n    }\n\n    /**\n     * edit item in module, also used to copy items\n     */\n    public function edit() {\n        expHistory::set('editable', $this->params);\n        $taglist = expTag::getAllTags();\n        $modelname = $this->basemodel_name;\n//        $record = isset($this->params['id']) ? $this->$modelname->find($this->params['id']) : new $modelname($this->params);\n        if (isset($this->params['id'])) {\n            if (!isset($this->params['revision_id'])) {\n                $record = $this->$modelname->find($this->params['id']);\n            } else {\n                $currentrecord = $this->$modelname->find($this->params['id']);\n                $records = $this->$modelname->find('revisions', $this->$modelname->identifier . '=' . intval($this->params['id']) . ' AND revision_id=' . intval($this->params['revision_id']));\n                $record = $records[0];\n                $record->current_revision_id = $currentrecord->revision_id;\n            }\n        } else {\n            $record = new $modelname($this->params);\n        }\n        if (!empty($this->params['copy'])) {\n            $record->id = null;\n            if (isset($record->sef_url)) $record->sef_url = null;\n        }\n        assign_to_template(array(\n            'record'     => $record,\n//            'table'      => $this->$modelname->tablename,\n//            'controller' => $this->params['controller'],\n            'taglist'    => $taglist\n        ));\n    }\n\n    /**\n     * merge/move aggregated item into this module\n     */\n    public function merge() {\n        expHistory::set('editable', $this->params);\n        $modelname = $this->basemodel_name;\n        $record = $this->$modelname->find($this->params['id']);\n\n        $loc = expUnserialize($record->location_data);\n        $loc->src = $this->loc->src;\n        $record->location_data = serialize($loc);\n//        $this->$modelname->update($record);\n        $record->update();\n\n        expHistory::back();\n    }\n\n    /**\n     * update (save) item in module\n     */\n    public function update() {\n        global $db;\n\n        //check for and handle tags\n        if (array_key_exists('expTag', $this->params)) {\n            if (isset($this->params['id'])) {\n                $db->delete('content_expTags', 'content_type=\"' . (!empty($this->params['content_type']) ? $this->params['content_type'] : $this->basemodel_name) . '\" AND content_id=' . $this->params['id']);\n            }\n            $tags = explode(\",\", trim($this->params['expTag']));\n            unset($this->params['expTag']);\n\n            foreach ($tags as $tag) {\n                if (!empty($tag)) {\n                    $tag = strtolower(trim($tag));\n                    $tag = str_replace(array('\"', \"'\"), \"\", $tag); // strip double and single quotes\n                    if (!empty($tag)) {\n                        $expTag = new expTag($tag);\n                        if (empty($expTag->id))\n                            $expTag->update(array('title' => $tag));\n                        $this->params['expTag'][] = $expTag->id;\n                    }\n                }\n            }\n        }\n\n        //check for and handle cats\n        if (array_key_exists('expCat', $this->params) && !empty($this->params['expCat'])) {\n            $catid = $this->params['expCat'];\n            unset($this->params['expCat']);\n            $this->params['expCat'][] = $catid;\n        }\n\n        $modelname = $this->basemodel_name;\n        $this->$modelname->update($this->params);\n\n        if ($this->isSearchable()) {\n            $this->addContentToSearch($this->params);\n        }\n\n        // check for auto send facebook status\n        if (!empty($this->params['send_status'])) {\n            if ($this->classname == 'eventController') {\n                facebookController::postEvent(\n                    array('model' => $modelname, 'id' => $this->params['date_id'], 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            } else {\n                facebookController::postStatus(\n                    array('model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            }\n        }\n\n        // check for auto send tweet\n        if (!empty($this->params['send_tweet'])) {\n            if ($this->classname == 'eventController') {\n                twitterController::postEventTweet(\n                    array('model' => $modelname, 'id' => $this->params['date_id'], 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            } else {\n                twitterController::postTweet(\n                    array('model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            }\n        }\n\n        // check for eAlerts\n        if (!empty($this->params['send_ealerts'])) {\n            redirect_to(array('controller' => 'ealert', 'action' => 'send_confirm', 'model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'orig_controller' => expModules::getControllerName($this->classname)));\n        } else {\n            expHistory::back();\n        }\n    }\n\n    /**\n     * delete item in module\n     */\n    public function delete() {\n        $modelname = $this->basemodel_name;\n        if (empty($this->params['id'])) {\n            flash('error', gt('Missing id for the') . ' ' . $modelname . ' ' . gt('you would like to delete'));\n            expHistory::back();\n        }\n\n        $obj = new $modelname($this->params['id']);\n        $rows = $obj->delete();\n\n        // if this module is searchable lets delete spidered content\n        if ($this->isSearchable()) {\n            $search = new search();\n//            $content = $search->find('first', 'original_id=' . $this->params['id'] . \" AND ref_module='\" . $this->classname . \"'\");\n            $content = $search->find('first', 'original_id=' . $this->params['id'] . \" AND ref_module='\" . $this->baseclassname . \"'\");\n            if (!empty($content->id)) $content->delete();\n        }\n\n        expHistory::back();\n    }\n\n    /**\n     * rerank items in model\n     */\n    public function rerank() {\n        $modelname = $this->basemodel_name;\n        $obj = new $modelname($this->params['id']);\n        $obj->rerank($this->params['push']);\n        expHistory::back();\n    }\n\n    /**\n     * display module management view\n     */\n    public function manage() {\n        expHistory::set('manageable', $this->params);\n\n        $page = new expPaginator(array(\n            'model'      => $this->basemodel_name,\n            'where'      => static::hasSources() ? $this->aggregateWhereClause() : null,\n            'limit'      => isset($this->params['limit']) ? $this->params['limit'] : 10,\n            'order'      => isset($this->params['order']) ? $this->params['order'] : null,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'        => static::hasSources() == true ? $this->loc->src : null,\n            'columns'    => array(\n                gt('ID#')   => 'id',\n                gt('Title') => 'title',\n                gt('Body')  => 'body'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'  => $page,\n            'items' => $page->records\n        ));\n    }\n\n    /**\n     * rerank module items, called from ddrerank\n     */\n    public function manage_ranks() {\n        $rank = 1;\n        foreach ($this->params['rerank'] as $id) {\n            $modelname = $this->params['model'];\n            $obj = new $modelname(intval($id));\n            $obj->rank = $rank;\n            $obj->save(false, true);\n            $rank++;\n        }\n\n        if (!expJavascript::inAjaxAction())\n            redirect_to($this->params['lastpage']);\n    }\n\n    /**\n     * Configure the module\n     */\n    public function configure() {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        $views = expTemplate::get_config_templates($this, $this->loc);\n\n        // needed for aggregation list\n        $pullable_modules = expModules::listInstalledControllers($this->baseclassname, $this->loc);\n        $page = new expPaginator(array(\n            'records' => $pullable_modules,\n            'controller' => $this->loc->mod,\n            'action' => $this->params['action'],\n            'order'   => isset($this->params['order']) ? $this->params['order'] : 'section',\n            'dir'     => isset($this->params['dir']) ? $this->params['dir'] : '',\n            'page'    => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns' => array(\n                gt('Title') => 'title',\n                gt('Page')  => 'section'\n            ),\n        ));\n\n//        if (empty($this->params['hcview'])) {\n            $containerloc = expCore::makeLocation(expModules::getModuleName($this->loc->mod),$this->loc->src);\n            $container = $db->selectObject('container', \"internal='\" . serialize($containerloc) . \"'\");\n            if (empty($container)) {\n                $container = new stdClass();\n                $container->action = 'showall';\n            } else {\n                $container->internal = unserialize($container->internal);\n            }\n            if (empty($container->action)) {\n                $container->action = 'showall';\n            }\n//            expSession::clearAllUsersSessionCache('containermodule');\n\n//            $modules_list = expModules::getActiveModulesAndControllersList();\n//            foreach ($modules_list as $moduleclass) {\n//                $module = new $moduleclass();\n//\n//                // Get basic module meta info\n//                $mod = new stdClass();\n//                $mod->name = $module->name();\n//                $mod->author = $module->author();\n//                $mod->description = $module->description();\n//                if (isset($container->view) && $container->internal->mod == $moduleclass) {\n//                    $mod->defaultView = $container->view;\n//                } else $mod->defaultView = DEFAULT_VIEW;\n//\n//                // Get support flags\n//                $mod->supportsSources = ($module->hasSources() ? 1 : 0);\n//                $mod->supportsViews = ($module->hasViews() ? 1 : 0);\n//\n//                // Get a list of views\n//                $mod->views = expTemplate::listModuleViews($moduleclass);\n//                natsort($mod->views);\n//\n//                $modules[$moduleclass] = $mod;\n////       \t\t$mods[$moduleclass] = $module->name();\n//                //        $mods[$moduleclass] = $moduleclass::name();\n//            }\n\n//        array_multisort(array_map('strtolower', $mods), $mods);\n\n            $actions = $this->useractions;\n            $mod_views = array();\n            if (!empty($actions)) {\n                  // Language-ize the action names\n                foreach ($actions as $key => $value) {\n                    $actions[$key] = gt($value);\n                }\n                $mod_views = expTemplate::get_action_views($this->classname, $container->action, $actions[$container->action]);\n                if (count($mod_views) < 1) $mod_views[$container->action] = $actions[$container->action] . ' - Default View';\n            }\n\n            assign_to_template(array(\n                'container' => $container,\n                'actions'   => $actions,\n                'mod_views' => $mod_views,\n            ));\n//        } else {\n        if (!empty($this->params['hcview'])) {\n            // this must be a hard-coded module?\n            assign_to_template(array(\n                'hcview' => $this->params['hcview'],\n            ));\n        }\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $folders = array();\n        $folders[] = 'Root Folder';\n        foreach ($cats as $cat) {\n            $folders[$cat->id] = $cat->title;\n        }\n\n        assign_to_template(array(\n//            'config'            => $this->config,  //FIXME already assigned in controllertemplate?\n            'page'              => $page, // needed for aggregation list\n            'views'             => $views,\n            'title'             =>static::displayname(),\n            'current_section'   => expSession::get('last_section'),\n//            'classname'         => $this->classname,  //FIXME $controller already assigned baseclassname (short vs long) in controllertemplate?\n            'viewpath'          => $this->viewpath,\n            'relative_viewpath' => $this->relative_viewpath,\n            'folders'           => $folders,\n        ));\n\n    }\n\n    /**\n     * save module configuration\n     */\n    public function saveconfig() {\n        global $db;\n\n        // update module title/action/view\n        if (!empty($this->params['container_id'])) {\n            $container = $db->selectObject('container', \"id=\" . $this->params['container_id']);\n            if (!empty($container)) {\n                $container->title = $this->params['moduletitle'];\n                $container->action = $this->params['actions'];\n                $container->view = $this->params['views'];\n                $container->is_private = $this->params['is_private'];\n                $db->updateObject($container, 'container');\n                expSession::clearAllUsersSessionCache('containermodule');\n            }\n            unset(\n                $this->params['container_id'],\n                $this->params['moduletitle'],\n                $this->params['modcntrol'],\n                $this->params['actions'],\n                $this->params['views'],\n                $this->params['actions'],\n                $this->params['is_private']\n            );\n        }\n\n        // create a new RSS object if enable is checked.\n        $params = $this->params;\n        if (!empty($this->params['enable_rss'])) {\n            $params['title'] = $params['feed_title'];\n            unset($params['feed_title']);\n            $params['sef_url'] = $params['feed_sef_url'];\n            unset($params['feed_sef_url']);\n            $rssfeed = new expRss($params);\n            $rssfeed->update($params);\n            $this->params['feed_sef_url'] = $rssfeed->sef_url;\n        } else {\n            $rssfeed = new expRss($this->params);\n            $params['enable_rss'] = false;\n            if (empty($params['advertise']))\n                $params['advertise'] = false;\n            $params['title'] = $params['feed_title'];\n            unset($params['feed_title']);\n            $params['sef_url'] = $params['feed_sef_url'];\n            unset($params['feed_sef_url']);\n            if (!empty($rssfeed->id)) { // do NOT create a new record, only update existing ones\n                $rssfeed->update($params);\n                $this->params['feed_sef_url'] = $rssfeed->sef_url;\n            }\n        }\n\n        // create a new eAlerts object if enable is checked.\n        if (!empty($this->params['enable_ealerts'])) {\n            $ealert = new expeAlerts($this->params);\n            $ealert->update($this->params);\n        }\n\n        // unset some unneeded params\n        unset(\n            $this->params['module'],\n            $this->params['controller'],\n            $this->params['src'],\n            $this->params['int'],\n            $this->params['id'],\n            $this->params['cid'],\n            $this->params['action'],\n            $this->params['PHPSESSID'],\n            $this->params['__utma'],\n            $this->params['__utmb'],\n            $this->params['__utmc'],\n            $this->params['__utmz'],\n            $this->params['__utmt'],\n            $this->params['__utmli'],\n            $this->params['__cfduid']\n        );\n\n        // setup and save the config\n        $config = new expConfig($this->loc);\n        $config->update(array('config' => $this->params));\n\n        flash('message', gt('Configuration updated'));\n        expHistory::back();\n    }\n\n    /**\n     * get the module's items in an rss feed format\n     *\n     * this function is very general and will most of the time need to be overwritten and customized\n     *\n     * @return array\n     */\n    public function getRSSContent($limit = 0) {\n        $class = new $this->basemodel_name;\n        $items = $class->find('all', $this->aggregateWhereClause(), isset($this->config['order']) ? $this->config['order'] : 'created_at DESC', $limit);\n\n        //Convert the items to rss items\n        $rssitems = array();\n        foreach ($items as $key => $item) {\n            $rss_item = new FeedItem();\n            $rss_item->title = expString::convertSmartQuotes($item->title);\n            $rss_item->link = $rss_item->guid = makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $item->sef_url));\n            $rss_item->description = expString::convertSmartQuotes($item->body);\n            $rss_item->author = user::getUserById($item->poster)->firstname . ' ' . user::getUserById($item->poster)->lastname;\n            $rss_item->authorEmail = user::getEmailById($item->poster);\n//            $rss_item->date = isset($item->publish_date) ? date(DATE_RSS, $item->publish_date) : date(DATE_RSS, $item->created_at);\n            $rss_item->date = isset($item->publish_date) ? $item->publish_date : $item->created_at;\n            if (!empty($item->expCat[0]->title)) $rss_item->category = array($item->expCat[0]->title);\n            $comment_count = expCommentController::countComments(array('content_id' => $item->id, 'content_type' => $this->basemodel_name));\n            if ($comment_count) {\n                $rss_item->comments = makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $item->sef_url)) . '#exp-comments';\n//                $rss_item->commentsRSS = makeLink(array('controller'=>$this->baseclassname, 'action'=>'show', 'title'=>$item->sef_url)).'#exp-comments';\n                $rss_item->commentsCount = $comment_count;\n            }\n            $rssitems[$key] = $rss_item;\n\n            if ($limit && count($rssitems) >= $limit)\n                break;\n        }\n        return $rssitems;\n    }\n\n    /**\n     * method to display an rss feed from this module\n     */\n    public function rss() {\n        require_once(BASE . 'external/feedcreator.class.php');\n\n        $id = isset($this->params['title']) ? expString::escape($this->params['title']) : (isset($this->params['id']) ? $this->params['id'] : null);\n        if (empty($id)) {\n            $module = !empty($this->params['module']) ? $this->params['module'] : $this->params['controller'];\n            $id = array('module' => $module, 'src' => $this->params['src']);\n        }\n        $site_rss = new expRss($id);\n        if ($site_rss->enable_rss == true && !empty($site_rss->id)) {\n            $site_rss->title = empty($site_rss->title) ? gt('RSS for') . ' ' . URL_FULL : $site_rss->title;\n            $site_rss->feed_desc = empty($site_rss->feed_desc) ? gt('This is an RSS syndication from') . ' ' . HOSTNAME : $site_rss->feed_desc;\n//            if (isset($site_rss->rss_cachetime)) {\n//                $ttl = $site_rss->rss_cachetime;\n//            }\n            if ($site_rss->rss_cachetime == 0) {\n                $site_rss->rss_cachetime = 1440;\n            }\n\n            if (!empty($site_rss->itunes_cats)) {\n                $ic = explode(\";\", $site_rss->itunes_cats);\n                $x = 0;\n                $itunes_cats = array();\n                foreach ($ic as $cat) {\n                    $cat_sub = explode(\":\", $cat);\n                    $itunes_cats[$x]->category = $cat_sub[0];\n                    if (isset($cat_sub[1])) {\n                        $itunes_cats[$x]->subcategory = $cat_sub[1];\n                    }\n                    $x++;\n                }\n            }\n\n            // NO buffering from here on out or things break unexpectedly. - RAM\n            ob_end_clean();\n\n            header('Content-Type: ' . 'application/rss+xml');\n//            header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n//            header('Content-Transfer-Encoding: binary');\n            header('Content-Encoding:');\n            // IE need specific headers\n            if (EXPONENT_USER_BROWSER == 'IE') {\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n                header('Vary: User-Agent');\n            } else {\n                header('Pragma: no-cache');\n            }\n\n            if ($site_rss->rss_is_podcast) {\n                $feed_type = \"PODCAST\";\n            } else {\n                $feed_type = \"RSS2.0\";\n            }\n            $feed_cache = BASE . 'tmp/rsscache/' . $site_rss->sef_url . '.xml';\n\n            $rss = new UniversalFeedCreator();\n//            if (file_exists(THEME_ABSOLUTE . \"rss/feed.css\"))  // custom css style\n//                $rss->cssStyleSheet = THEME_RELATIVE . \"rss/feed.css\";\n            if (file_exists(THEME_ABSOLUTE . \"rss/feed.xsl\"))  // custom xml style\n                $rss->xslStyleSheet = THEME_RELATIVE . \"rss/feed.xsl\";\n            $rss->useCached($feed_type, $feed_cache, $site_rss->rss_cachetime);  // if cache exists output then redirect\n\n            $rss->title = $site_rss->title;\n            if (!empty($this->params['type']))\n                $rss->title .= ' ' . ucfirst($this->params['type']);\n            $rss->description = $site_rss->feed_desc;\n            $rss->image = new FeedImage();\n            $rss->image->url = !empty($site_rss->expFile['album'][0]) ? $site_rss->expFile['album'][0]->url : URL_FULL . 'themes/' . DISPLAY_THEME . '/images/logo.png';\n            $rss->image->title = $site_rss->title;\n            $rss->image->link = URL_FULL;\n            //    $rss->image->width = 64;\n            //    $rss->image->height = 64;\n            $rss->ttl = $site_rss->rss_cachetime;\n            $rss->link = URL_FULL;\n            $rss->language = LOCALE;\n            $rss->syndicationURL = makeLink(array('module'=>$site_rss->module, 'src'=>$site_rss->src));\n            if ($site_rss->rss_is_podcast) {\n                $rss->itunes = new iTunes();\n                $rss->itunes->author = !empty($site_rss->feed_artist) ? $site_rss->feed_artist : ORGANIZATION_NAME;\n                $rss->itunes->image = !empty($site_rss->expFile['album'][0]) ? $site_rss->expFile['album'][0]->url :URL_FULL . 'themes/' . DISPLAY_THEME . '/images/logo.png';\n                $rss->itunes->summary = $site_rss->feed_desc;\n                if (!empty($itunes_cats)) {\n                    $rss->itunes->category = $itunes_cats[0]->category;\n                    $rss->itunes->subcategory = $itunes_cats[0]->subcategory;\n                }\n                //\t\t$rss->itunes->explicit = 0;\n//                $rss->itunes->subtitle = $site_rss->title;\n                $rss->itunes->subtitle = $site_rss->feed_desc;\n                //\t\t$rss->itunes->keywords = 0;\n                $rss->itunes->owner_email = SMTP_FROMADDRESS;\n                $rss->itunes->owner_name = ORGANIZATION_NAME;\n            }\n\n            $pubDate = '';\n            $site_rss->params = $this->params;\n            foreach ($site_rss->getFeedItems($site_rss->rss_limit) as $item) {\n                if ($item->date > $pubDate) {\n                    $pubDate = $item->date;\n                }\n                $rss->addItem($item);\n            }\n            if (!empty($site_rss->rss_limit)) {\n                $rss->items = array_slice($rss->items, 0, $site_rss->rss_limit);\n            }\n            $rss->pubDate = $pubDate;\n\n//            echo $rss->createFeed($feed_type);\n            echo $rss->saveFeed($feed_type, $feed_cache, $site_rss->rss_cachetime);  // does redirect after updating cache\n        } else {\n            flash('notice', gt(\"This RSS feed is not available.\"));\n            expHistory::back();\n        }\n\n        //Read the file out directly\n        exit();\n    }\n\n    /**\n     * download a file attached to item\n     */\n    public function downloadfile() {\n        if (!isset($this->config['allowdownloads']) || $this->config['allowdownloads'] == true) {\n            //if ($db->selectObject('content_expFiles', 'content_type=\"'.$this->baseclassname.'\" AND expfiles_id='.$this->params['id']) != null) {\n            expFile::download($this->params['id']);\n            //}\n        } else {\n            flash('error', gt('Downloads have not been enabled for this file'));\n            expHistory::back();\n        }\n\n    }\n\n    /**\n     * permission functions to aggregate a module's visible permissions based on add/remove permissions\n     *\n     * @return array\n     */\n    public function permissions() {\n        //set the permissions array\n        $perms = array();\n        foreach ($this->permissions as $perm => $name) {\n            if (!in_array($perm, $this->remove_permissions)) $perms[$perm] = $name;\n        }\n        $perms = array_merge($perms, $this->add_permissions);\n        return $perms;\n    }\n\n    /**\n     * permission functions to aggregate a module's permissions based on add/remove and manage permissions\n     *\n     * @return array\n     */\n    public function permissions_all() {\n        //set the permissions array\n        $perms = array();\n        foreach ($this->permissions as $perm => $name) {\n            if (!in_array($perm, $this->remove_permissions)) $perms[$perm] = $name;\n        }\n        $perms = array_merge($perms, $this->m_permissions, $this->add_permissions, $this->manage_permissions);\n        return $perms;\n    }\n\n    // create a psuedo global permission specific to the module; return true grants permission, false continues with other permission checks\n    public static function checkPermissions($permission, $location) {\n        return false;\n    }\n\n    /**\n     * get the model(s) associated with this module\n     *\n     * @return array\n     */\n    public function getModels() {\n        return isset($this->models) ? $this->models : array($this->basemodel_name);\n    }\n\n    /**\n     * type of items searched in the module\n     *\n     * @return string\n     */\n    public function searchName() {\n        return static::displayname();\n    }\n\n    /**\n     * category of items searched in the module\n     *\n     * @return string\n     */\n    public function searchCategory() {\n        return $this->basemodel_name;\n    }\n\n    /**\n     * add module items to search index\n     *\n     * @return int\n     */\n    public function addContentToSearch() {\n//        global $db, $router;\n        global $db;\n\n        $count = 0;\n        $model = new $this->basemodel_name(null, false, false);\n        $where = (!empty($this->params['id'])) ? 'id=' . $this->params['id'] : null;\n        $content = $db->selectArrays($model->tablename, $where);\n        foreach ($content as $cnt) {\n            $origid = $cnt['id'];\n            unset($cnt['id']);\n           //build the search record and save it.\n//            $sql = \"original_id=\" . $origid . \" AND ref_module='\" . $this->classname . \"'\";\n            $sql = \"original_id=\" . $origid . \" AND ref_module='\" . $this->baseclassname . \"'\";\n            $oldindex = $db->selectObject('search', $sql);\n            if (!empty($oldindex)) {\n                $search_record = new search($oldindex->id, false, false);\n                $search_record->update($cnt);\n            } else {\n                $search_record = new search($cnt, false, false);\n            }\n\n            //build the search record and save it.\n            $search_record->original_id = $origid;\n            $search_record->posted = empty($cnt['created_at']) ? null : $cnt['created_at'];\n            // get the location data for this content\n            if (isset($cnt['location_data']))\n                $loc = expUnserialize($cnt['location_data']);\n            $src = isset($loc->src) ? $loc->src : null;\n            if (!empty($cnt['sef_url'])) {\n                $link = str_replace(URL_FULL, '', makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $cnt['sef_url'])));\n            } else {\n                $link = str_replace(URL_FULL, '', makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'id' => $origid, 'src' => $src)));\n            }\n//\t        if (empty($search_record->title)) $search_record->title = 'Untitled';\n            $search_record->view_link = $link;\n//            $search_record->ref_module = $this->classname;\n            $search_record->ref_module = $this->baseclassname;\n            $search_record->category = $this->searchName();\n            $search_record->ref_type = $this->searchCategory();\n            $search_record->save();\n            $count++;\n        }\n\n        return $count;\n    }\n\n    /**\n     * additional check for display of search hit\n     *\n     * @param $record\n     *\n     * @return bool\n     */\n    public static function searchHit($record) {\n        return true;  // default is to display search hit\n    }\n\n    /**\n     * remove all module items from search index\n     */\n    public function delete_search() {\n        global $db;\n        // remove this modules entries from the search table.\n        if ($this->isSearchable()) {\n//            $where = \"ref_module='\" . $this->classname . \"' AND location_data='\" . serialize($this->loc) . \"'\";\n            $where = \"ref_module='\" . $this->baseclassname . \"' AND location_data='\" . serialize($this->loc) . \"'\";\n//            $test = $db->selectObjects('search', $where);\n            $db->delete('search', $where);\n        }\n    }\n\n    /**\n     * delete module and all its items for backwards compat with old modules\n     *\n     * @param $loc\n     */\n    public function delete_In($loc) {\n        $this->delete_instance($loc);\n    }\n\n    /**\n     * delete module, config, and all its items\n     * @param bool $loc\n     */\n    public function delete_instance($loc = false) {\n        $model = new $this->basemodel_name();\n        $where = 1;\n        if ($loc || static::hasSources())\n            $where = \"location_data='\" . serialize($this->loc) . \"'\";\n        $items = $model->find('all',$where);\n        foreach ($items as $item) {\n            $item->delete();  // model should delete attachments and other associated objects\n        }\n        $cfg = new expConfig($this->loc);\n        $cfg->delete();\n    }\n\n    /**\n     * get the metainfo for this module\n     *\n     * @return array\n     */\n    public function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return false;\n\n        // figure out what metadata to pass back based on the action we are in.\n        $action = $router->params['action'];\n        $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n        $modelname = $this->basemodel_name;\n\n        switch ($action) {\n            case 'showall':\n                $metainfo['title'] = gt(\"Showing\") . \" \" . static::displayname() . ' - ' . SITE_TITLE;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n                break;\n            case 'show':\n            case 'showByTitle':\n                // look up the record.\n                if (isset($router->params['id']) || isset($router->params['title'])) {\n                    $lookup = isset($router->params['id']) ? $router->params['id'] : $router->params['title'];\n                    $object = new $modelname($lookup);\n                    // set the meta info\n                    if (!empty($object)) {\n                        if (!empty($object->body)) {\n                            $desc = str_replace('\"',\"'\",expString::summarize($object->body,'html','para'));\n                        } else {\n                            $desc = SITE_DESCRIPTION;\n                        }\n                        if (!empty($object->expTag)) {\n                            $keyw = '';\n                            foreach ($object->expTag as $tag) {\n                                if (!empty($keyw)) $keyw .= ', ';\n                                $keyw .= $tag->title;\n                            }\n                        } else {\n                            $keyw = SITE_KEYWORDS;\n                        }\n                        $metainfo['title'] = empty($object->meta_title) ? $object->title : $object->meta_title;\n                        $metainfo['keywords'] = empty($object->meta_keywords) ? $keyw : $object->meta_keywords;\n                        $metainfo['description'] = empty($object->meta_description) ? $desc : $object->meta_description;\n//                        $metainfo['canonical'] = empty($object->canonical) ? URL_FULL.substr($router->sefPath, 1) : $object->canonical;\n                        $metainfo['canonical'] = empty($object->canonical) ? $router->plainPath() : $object->canonical;\n                        $metainfo['noindex'] = empty($object->meta_noindex) ? false : $object->meta_noindex;\n                        $metainfo['nofollow'] = empty($object->meta_nofollow) ? false : $object->meta_nofollow;\n                        $metainfo['rich'] = $this->meta_rich($router->params, $object);\n                        $metainfo['fb'] = $this->meta_fb($router->params, $object, $metainfo['canonical']);\n                        $metainfo['tw'] = $this->meta_tw($router->params, $object, $metainfo['canonical']);\n                    }\n                    break;\n                }\n            default:\n                //check for a function in the controller called 'action'_meta and use it if so\n                $functionName = $action . \"_meta\";\n                $mod = new $this->classname;\n                if (method_exists($mod, $functionName)) {\n                    $metainfo = $mod->$functionName($router->params);\n                } else {\n                    $metainfo['title'] = static::displayname() . \" - \" . SITE_TITLE;\n                    $metainfo['keywords'] = SITE_KEYWORDS;\n                    $metainfo['description'] = SITE_DESCRIPTION;\n//                    $metainfo['canonical'] = URL_FULL.substr($router->sefPath, 1);\n                    $metainfo['canonical'] = $router->plainPath();\n                }\n        }\n\n        return $metainfo;\n    }\n\n    /**\n     * Returns rich snippet PageMap meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return null\n     */\n    public function meta_rich($request, $object) {\n        return null;\n    }\n\n    /**\n     * Returns Facebook og: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return array\n     */\n    public function meta_fb($request, $object, $canonical) {\n        return array();\n    }\n\n    /**\n     * Returns Twitter twitter: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return array\n     */\n    public function meta_tw($request, $object, $canonical) {\n        return array();\n    }\n\n    /**\n     * action specific metainfo\n     *\n     * @param $request\n     * @return array\n     */\n    public function showall_by_tags_meta($request) {\n        global $router;\n\n        // look up the record.\n        if (isset($request['tag'])) {\n            $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n            $tag = $request['tag'];\n            // set the meta info\n            $metainfo['title'] = gt('Showing all') . ' ' . ucwords($this->basemodel_name) . ' ' . gt('tagged as') . ' ' . $tag;\n//            $metainfo['keywords'] = empty($object->meta_keywords) ? SITE_KEYWORDS : $object->meta_keywords; //FIXME $object not set\n            $metainfo['keywords'] = $request['tag'];\n//            $metainfo['description'] = empty($object->meta_description) ? SITE_DESCRIPTION : $object->meta_description; //FIXME $object not set\n            $metainfo['description'] = SITE_DESCRIPTION;\n//            $metainfo['canonical'] = empty($object->canonical) ? URL_FULL . substr($router->sefPath, 1) : $object->canonical; //FIXME $object not set\n//            $metainfo['canonical'] = URL_FULL . substr($router->sefPath, 1);\n            $metainfo['canonical'] = $router->plainPath();\n            return $metainfo;\n        }\n        return null;\n    }\n\n    /**\n     * action specific metainfo\n     *\n     * @param $request\n     * @return array\n     */\n    public function showall_by_date_meta($request) {\n        global $router;\n\n        // look up the record.\n        if (isset($request['month'])) {\n            $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n            $mk = mktime(0, 0, 0, $request['month'], 01, $request['year']);\n            $ts = strftime('%B, %Y', $mk);\n            // set the meta info\n            $metainfo['title'] = gt('Showing all') . ' ' . ucwords($this->basemodel_name) . ' ' . gt('written in') . ' ' . $ts;\n//            $metainfo['keywords'] = empty($object->meta_keywords) ? SITE_KEYWORDS : $object->meta_keywords; //FIXME $object not set\n            $metainfo['keywords'] = SITE_KEYWORDS;\n//            $metainfo['description'] = empty($object->meta_description) ? SITE_DESCRIPTION : $object->meta_description; //FIXME $object not set\n            $metainfo['description'] = SITE_DESCRIPTION;\n//            $metainfo['canonical'] = empty($object->canonical) ? URL_FULL . substr($router->sefPath, 1) : $object->canonical; //FIXME $object not set\n//            $metainfo['canonical'] = URL_FULL . substr($router->sefPath, 1);\n            $metainfo['canonical'] = $router->plainPath();\n            return $metainfo;\n        }\n        return null;\n    }\n\n    /**\n     * approve module item\n     */\n    public function approve() {\n        $modelname = $this->basemodel_name;\n        $lookup = isset($this->params['id']) ? $this->params['id'] : $this->params['title'];\n        $object = new $modelname($lookup);\n        $object->approved = true;\n        $object->save(false, true);  // we don't want to add this approval as a new revision\n        expHistory::back();\n    }\n\n    /**\n     * The aggregateWhereClause function creates a sql where clause which also includes aggregated module content\n     *\n     * @param string $type\n     *\n     * @return string\n     */\n    public function aggregateWhereClause($type='') {\n        global $user;\n\n        $sql = '';\n\n        if (empty($this->config['add_source']) && !static::hasSources()) {\n            return $sql;\n        }\n\n        if (!empty($this->config['aggregate'])) $sql .= '(';\n\n        $sql .= \"location_data ='\" . serialize($this->loc) . \"'\";\n\n        if (!empty($this->config['aggregate'])) {\n            foreach ($this->config['aggregate'] as $src) {\n                $loc = expCore::makeLocation($this->baseclassname, $src);\n                $sql .= \" OR location_data ='\" . serialize($loc) . \"'\";\n            }\n\n            $sql .= ')';\n        }\n        $model = $this->basemodel_name;\n        if (ENABLE_WORKFLOW && $this->$model->needs_approval) {\n            if ($user->id) {\n                $sql .= ' AND (approved=1 OR poster=' . $user->id . ' OR editor=' . $user->id . ')';\n            } else {\n                $sql .= ' AND approved=1';\n            }\n        }\n\n        return $sql;\n    }\n\n}\n\n?>"], "filenames": ["framework/core/controllers/expController.php"], "buggy_code_start_loc": [775], "buggy_code_end_loc": [776], "fixing_code_start_loc": [775], "fixing_code_end_loc": [776], "type": "CWE-89", "message": "A Blind SQL Injection Vulnerability in Exponent CMS through 2.4.0, with the rerank array parameter, can lead to site database information disclosure and denial of service.", "other": {"cve": {"id": "CVE-2016-9272", "sourceIdentifier": "cve@mitre.org", "published": "2016-11-11T11:59:00.180", "lastModified": "2016-11-29T18:24:10.630", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A Blind SQL Injection Vulnerability in Exponent CMS through 2.4.0, with the rerank array parameter, can lead to site database information disclosure and denial of service."}, {"lang": "es", "value": "Una Blind SQL Injection Vulnerability en Exponent CMS hasta la versi\u00f3n 2.4.0, con la reclasificaci\u00f3n del par\u00e1metro array, puede conducir a la revelaci\u00f3n de la informaci\u00f3n de la base de datos y a una denegaci\u00f3n de servicio."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.4.0", "matchCriteriaId": "3563BB54-8589-4588-B4AE-5CE7EA36AF45"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/94261", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://exponentcms.lighthouseapp.com/projects/61783/tickets/1394-blind-sql-injection-vulnerability-in-exponent-cms-240-4", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://exponentcms.lighthouseapp.com/projects/61783/tickets/1395-blind-sql-injection-vulnerability-in-exponent-cms-240-5", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/exponentcms/exponent-cms/commit/fffb2038de4c603931b785a4c3ec69cfd06181ba", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/fffb2038de4c603931b785a4c3ec69cfd06181ba"}}