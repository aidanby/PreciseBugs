{"buggy_code": ["<?php\nheader(\"Access-Control-Allow-Origin: *\");\n\n// Composer\nrequire 'vendor/autoload.php';\n\n// Our libs\nrequire_once('TwidditDB.php');\nrequire_once('Reddit.php');\nrequire_once('View.php');\nrequire_once('Auth.php');\n\n// If request is for the public directory, serve static file (for js/css)\nif (stristr($_SERVER['REQUEST_URI'], 'public')) {\n   return false;\n}\n\n$app = new \\Slim\\Slim();\n\n$app->get('/', function() use ($app) {\n   if(!isset($_COOKIE['user'])) {\n      $loginpage = new View('signin.phtml');\n      $loginpage->render();\n   } else {\n      $mainpage = new View('main.phtml');\n      $oauthUrl = Auth::buildOAuthRedirectUrl();\n      $mainpage->addPageVariable('oauthUrl', $oauthUrl);\n      $mainpage->render();\n   }\n});\n\n$app->get('/signin', function()  use ($app) {\n   $signinpage = new View('signin.phtml');\n   $signinpage->render();\n});\n\n$app->get('/feed', function() use ($app) {\n   $db = TwidditDB::db();\n   $username = $_COOKIE['user'];\n   $query = \"select redditor \n            from followingRedditors \n            where '$username' = userName\";\n   $result = $db->query($query);\n   $users = [];\n   foreach ($result as $row) {\n      $users[] = $row['redditor'];\n   }\n   \n   $comments = Reddit::getComments($users);\n\n   echo json_encode($comments);\n});\n$app->get('/subreddits', function() use ($app) {\n   $db = TwidditDB::db();\n   $username = $_COOKIE['user'];\n   $query = \"select subreddit \n            from followingSubreddit \n            where '$username' = userName\";\n   $result = $db->query($query);\n   $subreddit = [];\n   foreach ($result as $row) {\n      $subreddit[] = $row['subreddit'];\n   }\n   $data = Reddit::getSubredditPosts($subreddit);\n\n   echo json_encode($data);\n});\n\n$app->get('/reddit_callback', function() use ($app) {\n   $req = $app->request();\n   $state = $req->get('state');\n   $code = $req->get('code');\n   $response = Auth::getTokenFromAuthCode($code, $state);\n\n   if (array_key_exists('error', $response)) {\n      // Do error thing\n      echo \"OAuth Error: {$response['error']}\";\n      die();\n   }\n\n   Auth::setUserToken($response['access_token'], $response['refresh_token'],\n    $response['expires_in']);\n   $app->redirect('/');\n});\n\n$app->post('/login', function() use ($app) {\n   $db = TwidditDB::db();\n   $username = $app->request->post('username');\n   $password = $app->request->post('password');\n    \n   $query = \"SELECT * FROM  users where userName='$username' and userPassword='$password'\";\n\n   if ($db == null) {\n      echo 'hi your db is null';\n   }\n   $result = $db->query($query);\n\n   if($result->rowCount() == 0) {\n      $failpage = new View('signin.phtml');\n      $failpage->addPageVariable('failure', true);\n      $failpage->render();\n   } else {\n     $cookie_name = 'user';\n     $cookie_value = $username;\n     setcookie($cookie_name, $cookie_value, time() + 36000); // cookie lasts 60 secs\n     $app->redirect('/');\n   }\n});\n\n\n$app->post('/signup', function() use ($app) {\n   $db = TwidditDB::db();\n   $username = $app->request->post('username');\n   $password = $app->request->post('password');\n\n   $query = \"SELECT * FROM  users where userName='$username'\";\n   $result = $db->query($query);\n   \n   if ($result->rowCount() > 0) {\n     $failpage = new View('signin.php');\n     $failpage->addPageVariable('signupfail', true);\n     $failpage->render();\n   } else {\n     $insert = \"INSERT INTO users values('$username', '$password')\";\n     $result = $db->exec($insert);\n     $successpage = new View('signin.php');\n     $successpage->addPageVariable('signupsuccess', true);\n     $successpage->render(); \n   }\n});\n\n$app->run();\n"], "fixing_code": ["<?php\nheader(\"Access-Control-Allow-Origin: *\");\n\n// Composer\nrequire 'vendor/autoload.php';\n\n// Our libs\nrequire_once('TwidditDB.php');\nrequire_once('Reddit.php');\nrequire_once('View.php');\nrequire_once('Auth.php');\n\n// If request is for the public directory, serve static file (for js/css)\nif (stristr($_SERVER['REQUEST_URI'], 'public')) {\n   return false;\n}\n\n$app = new \\Slim\\Slim();\n\n$app->get('/', function() use ($app) {\n   if(!isset($_COOKIE['user'])) {\n      $loginpage = new View('signin.phtml');\n      $loginpage->render();\n   } else {\n      $mainpage = new View('main.phtml');\n      $oauthUrl = Auth::buildOAuthRedirectUrl();\n      $mainpage->addPageVariable('oauthUrl', $oauthUrl);\n      $mainpage->render();\n   }\n});\n\n$app->get('/signin', function()  use ($app) {\n   $signinpage = new View('signin.phtml');\n   $signinpage->render();\n});\n\n$app->get('/feed', function() use ($app) {\n   $db = TwidditDB::db();\n   $username = $_COOKIE['user'];\n   $query = <<<EOT\n      SELECT `redditor`\n      FROM `followingRedditors`\n      WHERE `userName` = :username\nEOT;\n\n   $statement = $db->prepare($query);\n   $statement->bindParam(':username', $username);\n   $statement->execute();\n   $result = $statement->fetchAll(PDO::FETCH_ASSOC);\n\n   $users = [];\n   foreach ($result as $row) {\n      $users[] = $row['redditor'];\n   }\n   \n   $comments = Reddit::getComments($users);\n\n   echo json_encode($comments);\n});\n\n$app->get('/subreddits', function() use ($app) {\n   $db = TwidditDB::db();\n   $username = $_COOKIE['user'];\n   $query = <<<EOT\n      SELECT `subreddit`\n      FROM `followingSubreddit`\n      WHERE `userName` = :username\nEOT;\n\n   $statement = $db->prepare($query);\n   $statement->bindParam(':username', $username);\n   $statement->execute();\n   $results = $statement->fetchAll(PDO::FETCH_ASSOC);\n\n   $subreddits = [];\n   foreach ($results as $row) {\n      $subreddits[] = $row['subreddit'];\n   }\n   $data = Reddit::getSubredditPosts($subreddits);\n\n   echo json_encode($data);\n});\n\n$app->get('/reddit_callback', function() use ($app) {\n   $req = $app->request();\n   $state = $req->get('state');\n   $code = $req->get('code');\n   $response = Auth::getTokenFromAuthCode($code, $state);\n\n   if (array_key_exists('error', $response)) {\n      // Do error thing\n      echo \"OAuth Error: {$response['error']}\";\n      die();\n   }\n\n   Auth::setUserToken($response['access_token'], $response['refresh_token'],\n    $response['expires_in']);\n   $app->redirect('/');\n});\n\n$app->post('/login', function() use ($app) {\n   $db = TwidditDB::db();\n   $username = $app->request->post('username');\n   $password = $app->request->post('password');\n    \n   $query = \"SELECT * FROM  users where userName='$username' and userPassword='$password'\";\n\n   if ($db == null) {\n      echo 'hi your db is null';\n   }\n   $result = $db->query($query);\n\n   if($result->rowCount() == 0) {\n      $failpage = new View('signin.phtml');\n      $failpage->addPageVariable('failure', true);\n      $failpage->render();\n   } else {\n     $cookie_name = 'user';\n     $cookie_value = $username;\n     setcookie($cookie_name, $cookie_value, time() + 36000); // cookie lasts 60 secs\n     $app->redirect('/');\n   }\n});\n\n$app->post('/signup', function() use ($app) {\n   $db = TwidditDB::db();\n   $username = $app->request->post('username');\n   $password = $app->request->post('password');\n\n   $query = \"SELECT * FROM  users where userName='$username'\";\n   $result = $db->query($query);\n   \n   if ($result->rowCount() > 0) {\n     $failpage = new View('signin.php');\n     $failpage->addPageVariable('signupfail', true);\n     $failpage->render();\n   } else {\n     $insert = \"INSERT INTO users values('$username', '$password')\";\n     $result = $db->exec($insert);\n     $successpage = new View('signin.php');\n     $successpage->addPageVariable('signupsuccess', true);\n     $successpage->render(); \n   }\n});\n\n$app->run();\n"], "filenames": ["index.php"], "buggy_code_start_loc": [40], "buggy_code_end_loc": [111], "fixing_code_start_loc": [40], "fixing_code_end_loc": [124], "type": "CWE-89", "message": "A vulnerability was found in copperwall Twiddit. It has been rated as critical. This issue affects some unknown processing of the file index.php. The manipulation leads to sql injection. The name of the patch is 2203d4ce9810bdaccece5c48ff4888658a01acfc. It is recommended to apply a patch to fix this issue. The identifier VDB-218897 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10070", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-19T10:15:11.597", "lastModified": "2023-01-27T17:35:16.873", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in copperwall Twiddit. It has been rated as critical. This issue affects some unknown processing of the file index.php. The manipulation leads to sql injection. The name of the patch is 2203d4ce9810bdaccece5c48ff4888658a01acfc. It is recommended to apply a patch to fix this issue. The identifier VDB-218897 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.5, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:twiddit_project:twiddit:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-03-18", "matchCriteriaId": "F673A469-580D-4388-B848-9B15D6E5C76A"}]}]}], "references": [{"url": "https://github.com/copperwall/twiddit/commit/2203d4ce9810bdaccece5c48ff4888658a01acfc", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218897", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218897", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/copperwall/twiddit/commit/2203d4ce9810bdaccece5c48ff4888658a01acfc"}}