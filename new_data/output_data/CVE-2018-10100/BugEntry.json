{"buggy_code": ["<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '5.0-alpha-42891';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 42836;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4607-20180123';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n", "<?php\n/**\n * WordPress User Page\n *\n * Handles authentication, registering, resetting passwords, forgot password,\n * and other user handling.\n *\n * @package WordPress\n */\n\n/** Make sure that the WordPress bootstrap has run before continuing. */\nrequire( dirname( __FILE__ ) . '/wp-load.php' );\n\n// Redirect to https login if forced to use SSL\nif ( force_ssl_admin() && ! is_ssl() ) {\n\tif ( 0 === strpos( $_SERVER['REQUEST_URI'], 'http' ) ) {\n\t\twp_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\texit();\n\t} else {\n\t\twp_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\texit();\n\t}\n}\n\n/**\n * Output the login page header.\n *\n * @param string   $title    Optional. WordPress login Page title to display in the `<title>` element.\n *                           Default 'Log In'.\n * @param string   $message  Optional. Message to display in header. Default empty.\n * @param WP_Error $wp_error Optional. The error to pass. Default empty.\n */\nfunction login_header( $title = 'Log In', $message = '', $wp_error = '' ) {\n\tglobal $error, $interim_login, $action;\n\n\t// Don't index any of these forms\n\tadd_action( 'login_head', 'wp_no_robots' );\n\n\tadd_action( 'login_head', 'wp_login_viewport_meta' );\n\n\tif ( empty( $wp_error ) ) {\n\t\t$wp_error = new WP_Error();\n\t}\n\n\t// Shake it!\n\t$shake_error_codes = array( 'empty_password', 'empty_email', 'invalid_email', 'invalidcombo', 'empty_username', 'invalid_username', 'incorrect_password' );\n\t/**\n\t * Filters the error codes array for shaking the login form.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param array $shake_error_codes Error codes that shake the login form.\n\t */\n\t$shake_error_codes = apply_filters( 'shake_error_codes', $shake_error_codes );\n\n\tif ( $shake_error_codes && $wp_error->has_errors() && in_array( $wp_error->get_error_code(), $shake_error_codes ) ) {\n\t\tadd_action( 'login_head', 'wp_shake_js', 12 );\n\t}\n\n\t$login_title = get_bloginfo( 'name', 'display' );\n\n\t/* translators: Login screen title. 1: Login screen name, 2: Network or site name */\n\t$login_title = sprintf( __( '%1$s &lsaquo; %2$s &#8212; WordPress' ), $title, $login_title );\n\n\t/**\n\t * Filters the title tag content for login page.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param string $login_title The page title, with extra context added.\n\t * @param string $title       The original page title.\n\t */\n\t$login_title = apply_filters( 'login_title', $login_title, $title );\n\n\t?><!DOCTYPE html>\n\t<!--[if IE 8]>\n\t\t<html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"ie8\" <?php language_attributes(); ?>>\n\t<![endif]-->\n\t<!--[if !(IE 8) ]><!-->\n\t\t<html xmlns=\"http://www.w3.org/1999/xhtml\" <?php language_attributes(); ?>>\n\t<!--<![endif]-->\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"<?php bloginfo( 'html_type' ); ?>; charset=<?php bloginfo( 'charset' ); ?>\" />\n\t<title><?php echo $login_title; ?></title>\n\t<?php\n\n\twp_enqueue_style( 'login' );\n\n\t/*\n\t * Remove all stored post data on logging out.\n\t * This could be added by add_action('login_head'...) like wp_shake_js(),\n\t * but maybe better if it's not removable by plugins\n\t */\n\tif ( 'loggedout' == $wp_error->get_error_code() ) {\n\t\t?>\n\t\t<script>if(\"sessionStorage\" in window){try{for(var key in sessionStorage){if(key.indexOf(\"wp-autosave-\")!=-1){sessionStorage.removeItem(key)}}}catch(e){}};</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Enqueue scripts and styles for the login page.\n\t *\n\t * @since 3.1.0\n\t */\n\tdo_action( 'login_enqueue_scripts' );\n\n\t/**\n\t * Fires in the login page header after scripts are enqueued.\n\t *\n\t * @since 2.1.0\n\t */\n\tdo_action( 'login_head' );\n\n\tif ( is_multisite() ) {\n\t\t$login_header_url   = network_home_url();\n\t\t$login_header_title = get_network()->site_name;\n\t} else {\n\t\t$login_header_url   = __( 'https://wordpress.org/' );\n\t\t$login_header_title = __( 'Powered by WordPress' );\n\t}\n\n\t/**\n\t * Filters link URL of the header logo above login form.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $login_header_url Login header logo URL.\n\t */\n\t$login_header_url = apply_filters( 'login_headerurl', $login_header_url );\n\n\t/**\n\t * Filters the title attribute of the header logo above login form.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $login_header_title Login header logo title attribute.\n\t */\n\t$login_header_title = apply_filters( 'login_headertitle', $login_header_title );\n\n\t/*\n\t * To match the URL/title set above, Multisite sites have the blog name,\n\t * while single sites get the header title.\n\t */\n\tif ( is_multisite() ) {\n\t\t$login_header_text = get_bloginfo( 'name', 'display' );\n\t} else {\n\t\t$login_header_text = $login_header_title;\n\t}\n\n\t$classes = array( 'login-action-' . $action, 'wp-core-ui' );\n\tif ( is_rtl() ) {\n\t\t$classes[] = 'rtl';\n\t}\n\tif ( $interim_login ) {\n\t\t$classes[] = 'interim-login';\n\t\t?>\n\t\t<style type=\"text/css\">html{background-color: transparent;}</style>\n\t\t<?php\n\n\t\tif ( 'success' === $interim_login ) {\n\t\t\t$classes[] = 'interim-login-success';\n\t\t}\n\t}\n\t$classes[] = ' locale-' . sanitize_html_class( strtolower( str_replace( '_', '-', get_locale() ) ) );\n\n\t/**\n\t * Filters the login page body classes.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param array  $classes An array of body classes.\n\t * @param string $action  The action that brought the visitor to the login page.\n\t */\n\t$classes = apply_filters( 'login_body_class', $classes, $action );\n\n\t?>\n\t</head>\n\t<body class=\"login <?php echo esc_attr( implode( ' ', $classes ) ); ?>\">\n\t<?php\n\t/**\n\t * Fires in the login page header after the body tag is opened.\n\t *\n\t * @since 4.6.0\n\t */\n\tdo_action( 'login_header' );\n\t?>\n\t<div id=\"login\">\n\t\t<h1><a href=\"<?php echo esc_url( $login_header_url ); ?>\" title=\"<?php echo esc_attr( $login_header_title ); ?>\" tabindex=\"-1\"><?php echo $login_header_text; ?></a></h1>\n\t<?php\n\n\tunset( $login_header_url, $login_header_title );\n\n\t/**\n\t * Filters the message to display above the login form.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $message Login message text.\n\t */\n\t$message = apply_filters( 'login_message', $message );\n\tif ( ! empty( $message ) ) {\n\t\techo $message . \"\\n\";\n\t}\n\n\t// In case a plugin uses $error rather than the $wp_errors object\n\tif ( ! empty( $error ) ) {\n\t\t$wp_error->add( 'error', $error );\n\t\tunset( $error );\n\t}\n\n\tif ( $wp_error->has_errors() ) {\n\t\t$errors   = '';\n\t\t$messages = '';\n\t\tforeach ( $wp_error->get_error_codes() as $code ) {\n\t\t\t$severity = $wp_error->get_error_data( $code );\n\t\t\tforeach ( $wp_error->get_error_messages( $code ) as $error_message ) {\n\t\t\t\tif ( 'message' == $severity ) {\n\t\t\t\t\t$messages .= '\t' . $error_message . \"<br />\\n\";\n\t\t\t\t} else {\n\t\t\t\t\t$errors .= '\t' . $error_message . \"<br />\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( ! empty( $errors ) ) {\n\t\t\t/**\n\t\t\t * Filters the error messages displayed above the login form.\n\t\t\t *\n\t\t\t * @since 2.1.0\n\t\t\t *\n\t\t\t * @param string $errors Login error message.\n\t\t\t */\n\t\t\techo '<div id=\"login_error\">' . apply_filters( 'login_errors', $errors ) . \"</div>\\n\";\n\t\t}\n\t\tif ( ! empty( $messages ) ) {\n\t\t\t/**\n\t\t\t * Filters instructional messages displayed above the login form.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $messages Login messages.\n\t\t\t */\n\t\t\techo '<p class=\"message\">' . apply_filters( 'login_messages', $messages ) . \"</p>\\n\";\n\t\t}\n\t}\n} // End of login_header()\n\n/**\n * Outputs the footer for the login page.\n *\n * @param string $input_id Which input to auto-focus\n */\nfunction login_footer( $input_id = '' ) {\n\tglobal $interim_login;\n\n\t// Don't allow interim logins to navigate away from the page.\n\tif ( ! $interim_login ) :\n\t?>\n\t<p id=\"backtoblog\"><a href=\"<?php echo esc_url( home_url( '/' ) ); ?>\">\n\t\t\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t\t\t\t/* translators: %s: site title */\n\t\t\t\t\t\t\t\t\t\t\tprintf( _x( '&larr; Back to %s', 'site' ), get_bloginfo( 'title', 'display' ) );\n\t?>\n\t</a></p>\n\t<?php endif; ?>\n\n\t</div>\n\n\t<?php if ( ! empty( $input_id ) ) : ?>\n\t<script type=\"text/javascript\">\n\ttry{document.getElementById('<?php echo $input_id; ?>').focus();}catch(e){}\n\tif(typeof wpOnload=='function')wpOnload();\n\t</script>\n\t<?php endif; ?>\n\n\t<?php\n\t/**\n\t * Fires in the login page footer.\n\t *\n\t * @since 3.1.0\n\t */\n\tdo_action( 'login_footer' );\n\t?>\n\t<div class=\"clear\"></div>\n\t</body>\n\t</html>\n\t<?php\n}\n\n/**\n * @since 3.0.0\n */\nfunction wp_shake_js() {\n?>\n<script type=\"text/javascript\">\naddLoadEvent = function(func){if(typeof jQuery!=\"undefined\")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};\nfunction s(id,pos){g(id).left=pos+'px';}\nfunction g(id){return document.getElementById(id).style;}\nfunction shake(id,a,d){c=a.shift();s(id,c);if(a.length>0){setTimeout(function(){shake(id,a,d);},d);}else{try{g(id).position='static';wp_attempt_focus();}catch(e){}}}\naddLoadEvent(function(){ var p=new Array(15,30,15,0,-15,-30,-15,0);p=p.concat(p.concat(p));var i=document.forms[0].id;g(i).position='relative';shake(i,p,20);});\n</script>\n<?php\n}\n\n/**\n * @since 3.7.0\n */\nfunction wp_login_viewport_meta() {\n\t?>\n\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t<?php\n}\n\n/**\n * Handles sending password retrieval email to user.\n *\n * @return bool|WP_Error True: when finish. WP_Error on error\n */\nfunction retrieve_password() {\n\t$errors = new WP_Error();\n\n\tif ( empty( $_POST['user_login'] ) || ! is_string( $_POST['user_login'] ) ) {\n\t\t$errors->add( 'empty_username', __( '<strong>ERROR</strong>: Enter a username or email address.' ) );\n\t} elseif ( strpos( $_POST['user_login'], '@' ) ) {\n\t\t$user_data = get_user_by( 'email', trim( wp_unslash( $_POST['user_login'] ) ) );\n\t\tif ( empty( $user_data ) ) {\n\t\t\t$errors->add( 'invalid_email', __( '<strong>ERROR</strong>: There is no user registered with that email address.' ) );\n\t\t}\n\t} else {\n\t\t$login     = trim( $_POST['user_login'] );\n\t\t$user_data = get_user_by( 'login', $login );\n\t}\n\n\t/**\n\t * Fires before errors are returned from a password reset request.\n\t *\n\t * @since 2.1.0\n\t * @since 4.4.0 Added the `$errors` parameter.\n\t *\n\t * @param WP_Error $errors A WP_Error object containing any errors generated\n\t *                         by using invalid credentials.\n\t */\n\tdo_action( 'lostpassword_post', $errors );\n\n\tif ( $errors->has_errors() ) {\n\t\treturn $errors;\n\t}\n\n\tif ( ! $user_data ) {\n\t\t$errors->add( 'invalidcombo', __( '<strong>ERROR</strong>: Invalid username or email.' ) );\n\t\treturn $errors;\n\t}\n\n\t// Redefining user_login ensures we return the right case in the email.\n\t$user_login = $user_data->user_login;\n\t$user_email = $user_data->user_email;\n\t$key        = get_password_reset_key( $user_data );\n\n\tif ( is_wp_error( $key ) ) {\n\t\treturn $key;\n\t}\n\n\tif ( is_multisite() ) {\n\t\t$site_name = get_network()->site_name;\n\t} else {\n\t\t/*\n\t\t * The blogname option is escaped with esc_html on the way into the database\n\t\t * in sanitize_option we want to reverse this for the plain text arena of emails.\n\t\t */\n\t\t$site_name = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\t}\n\n\t$message = __( 'Someone has requested a password reset for the following account:' ) . \"\\r\\n\\r\\n\";\n\t/* translators: %s: site name */\n\t$message .= sprintf( __( 'Site Name: %s' ), $site_name ) . \"\\r\\n\\r\\n\";\n\t/* translators: %s: user login */\n\t$message .= sprintf( __( 'Username: %s' ), $user_login ) . \"\\r\\n\\r\\n\";\n\t$message .= __( 'If this was a mistake, just ignore this email and nothing will happen.' ) . \"\\r\\n\\r\\n\";\n\t$message .= __( 'To reset your password, visit the following address:' ) . \"\\r\\n\\r\\n\";\n\t$message .= '<' . network_site_url( \"wp-login.php?action=rp&key=$key&login=\" . rawurlencode( $user_login ), 'login' ) . \">\\r\\n\";\n\n\t/* translators: Password reset email subject. %s: Site name */\n\t$title = sprintf( __( '[%s] Password Reset' ), $site_name );\n\n\t/**\n\t * Filters the subject of the password reset email.\n\t *\n\t * @since 2.8.0\n\t * @since 4.4.0 Added the `$user_login` and `$user_data` parameters.\n\t *\n\t * @param string  $title      Default email title.\n\t * @param string  $user_login The username for the user.\n\t * @param WP_User $user_data  WP_User object.\n\t */\n\t$title = apply_filters( 'retrieve_password_title', $title, $user_login, $user_data );\n\n\t/**\n\t * Filters the message body of the password reset mail.\n\t *\n\t * If the filtered message is empty, the password reset email will not be sent.\n\t *\n\t * @since 2.8.0\n\t * @since 4.1.0 Added `$user_login` and `$user_data` parameters.\n\t *\n\t * @param string  $message    Default mail message.\n\t * @param string  $key        The activation key.\n\t * @param string  $user_login The username for the user.\n\t * @param WP_User $user_data  WP_User object.\n\t */\n\t$message = apply_filters( 'retrieve_password_message', $message, $key, $user_login, $user_data );\n\n\tif ( $message && ! wp_mail( $user_email, wp_specialchars_decode( $title ), $message ) ) {\n\t\twp_die( __( 'The email could not be sent.' ) . \"<br />\\n\" . __( 'Possible reason: your host may have disabled the mail() function.' ) );\n\t}\n\n\treturn true;\n}\n\n//\n// Main\n//\n\n$action = isset( $_REQUEST['action'] ) ? $_REQUEST['action'] : 'login';\n$errors = new WP_Error();\n\nif ( isset( $_GET['key'] ) ) {\n\t$action = 'resetpass';\n}\n\n// validate action so as to default to the login screen\nif ( ! in_array( $action, array( 'postpass', 'logout', 'lostpassword', 'retrievepassword', 'resetpass', 'rp', 'register', 'login', 'emailconfirm' ), true ) && false === has_filter( 'login_form_' . $action ) ) {\n\t$action = 'login';\n}\n\nnocache_headers();\n\nheader( 'Content-Type: ' . get_bloginfo( 'html_type' ) . '; charset=' . get_bloginfo( 'charset' ) );\n\nif ( defined( 'RELOCATE' ) && RELOCATE ) { // Move flag is set\n\tif ( isset( $_SERVER['PATH_INFO'] ) && ( $_SERVER['PATH_INFO'] != $_SERVER['PHP_SELF'] ) ) {\n\t\t$_SERVER['PHP_SELF'] = str_replace( $_SERVER['PATH_INFO'], '', $_SERVER['PHP_SELF'] );\n\t}\n\n\t$url = dirname( set_url_scheme( 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'] ) );\n\tif ( $url != get_option( 'siteurl' ) ) {\n\t\tupdate_option( 'siteurl', $url );\n\t}\n}\n\n//Set a cookie now to see if they are supported by the browser.\n$secure = ( 'https' === parse_url( wp_login_url(), PHP_URL_SCHEME ) );\nsetcookie( TEST_COOKIE, 'WP Cookie check', 0, COOKIEPATH, COOKIE_DOMAIN, $secure );\nif ( SITECOOKIEPATH != COOKIEPATH ) {\n\tsetcookie( TEST_COOKIE, 'WP Cookie check', 0, SITECOOKIEPATH, COOKIE_DOMAIN, $secure );\n}\n\n$lang            = ! empty( $_GET['wp_lang'] ) ? sanitize_text_field( $_GET['wp_lang'] ) : '';\n$switched_locale = switch_to_locale( $lang );\n\n/**\n * Fires when the login form is initialized.\n *\n * @since 3.2.0\n */\ndo_action( 'login_init' );\n\n/**\n * Fires before a specified login form action.\n *\n * The dynamic portion of the hook name, `$action`, refers to the action\n * that brought the visitor to the login form. Actions include 'postpass',\n * 'logout', 'lostpassword', etc.\n *\n * @since 2.8.0\n */\ndo_action( \"login_form_{$action}\" );\n\n$http_post     = ( 'POST' == $_SERVER['REQUEST_METHOD'] );\n$interim_login = isset( $_REQUEST['interim-login'] );\n\n/**\n * Filters the separator used between login form navigation links.\n *\n * @since 4.9.0\n *\n * @param string $login_link_separator The separator used between login form navigation links.\n */\n$login_link_separator = apply_filters( 'login_link_separator', ' | ' );\n\nswitch ( $action ) {\n\n\tcase 'postpass':\n\t\tif ( ! array_key_exists( 'post_password', $_POST ) ) {\n\t\t\twp_safe_redirect( wp_get_referer() );\n\t\t\texit();\n\t\t}\n\n\t\trequire_once ABSPATH . WPINC . '/class-phpass.php';\n\t\t$hasher = new PasswordHash( 8, true );\n\n\t\t/**\n\t\t * Filters the life span of the post password cookie.\n\t\t *\n\t\t * By default, the cookie expires 10 days from creation. To turn this\n\t\t * into a session cookie, return 0.\n\t\t *\n\t\t * @since 3.7.0\n\t\t *\n\t\t * @param int $expires The expiry time, as passed to setcookie().\n\t\t */\n\t\t$expire  = apply_filters( 'post_password_expires', time() + 10 * DAY_IN_SECONDS );\n\t\t$referer = wp_get_referer();\n\t\tif ( $referer ) {\n\t\t\t$secure = ( 'https' === parse_url( $referer, PHP_URL_SCHEME ) );\n\t\t} else {\n\t\t\t$secure = false;\n\t\t}\n\t\tsetcookie( 'wp-postpass_' . COOKIEHASH, $hasher->HashPassword( wp_unslash( $_POST['post_password'] ) ), $expire, COOKIEPATH, COOKIE_DOMAIN, $secure );\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\n\t\twp_safe_redirect( wp_get_referer() );\n\t\texit();\n\n\tcase 'logout':\n\t\tcheck_admin_referer( 'log-out' );\n\n\t\t$user = wp_get_current_user();\n\n\t\twp_logout();\n\n\t\tif ( ! empty( $_REQUEST['redirect_to'] ) ) {\n\t\t\t$redirect_to = $requested_redirect_to = $_REQUEST['redirect_to'];\n\t\t} else {\n\t\t\t$redirect_to           = 'wp-login.php?loggedout=true';\n\t\t\t$requested_redirect_to = '';\n\t\t}\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\n\t\t/**\n\t\t * Filters the log out redirect URL.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string  $redirect_to           The redirect destination URL.\n\t\t * @param string  $requested_redirect_to The requested redirect destination URL passed as a parameter.\n\t\t * @param WP_User $user                  The WP_User object for the user that's logging out.\n\t\t */\n\t\t$redirect_to = apply_filters( 'logout_redirect', $redirect_to, $requested_redirect_to, $user );\n\t\twp_safe_redirect( $redirect_to );\n\t\texit();\n\n\tcase 'lostpassword':\n\tcase 'retrievepassword':\n\t\tif ( $http_post ) {\n\t\t\t$errors = retrieve_password();\n\t\t\tif ( ! is_wp_error( $errors ) ) {\n\t\t\t\t$redirect_to = ! empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?checkemail=confirm';\n\t\t\t\twp_safe_redirect( $redirect_to );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $_GET['error'] ) ) {\n\t\t\tif ( 'invalidkey' == $_GET['error'] ) {\n\t\t\t\t$errors->add( 'invalidkey', __( 'Your password reset link appears to be invalid. Please request a new link below.' ) );\n\t\t\t} elseif ( 'expiredkey' == $_GET['error'] ) {\n\t\t\t\t$errors->add( 'expiredkey', __( 'Your password reset link has expired. Please request a new link below.' ) );\n\t\t\t}\n\t\t}\n\n\t\t$lostpassword_redirect = ! empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '';\n\t\t/**\n\t\t * Filters the URL redirected to after submitting the lostpassword/retrievepassword form.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string $lostpassword_redirect The redirect destination URL.\n\t\t */\n\t\t$redirect_to = apply_filters( 'lostpassword_redirect', $lostpassword_redirect );\n\n\t\t/**\n\t\t * Fires before the lost password form.\n\t\t *\n\t\t * @since 1.5.1\n\t\t */\n\t\tdo_action( 'lost_password' );\n\n\t\tlogin_header( __( 'Lost Password' ), '<p class=\"message\">' . __( 'Please enter your username or email address. You will receive a link to create a new password via email.' ) . '</p>', $errors );\n\n\t\t$user_login = '';\n\n\t\tif ( isset( $_POST['user_login'] ) && is_string( $_POST['user_login'] ) ) {\n\t\t\t$user_login = wp_unslash( $_POST['user_login'] );\n\t\t}\n\n\t?>\n\n\t<form name=\"lostpasswordform\" id=\"lostpasswordform\" action=\"<?php echo esc_url( network_site_url( 'wp-login.php?action=lostpassword', 'login_post' ) ); ?>\" method=\"post\">\n\t<p>\n\t\t<label for=\"user_login\" ><?php _e( 'Username or Email Address' ); ?><br />\n\t\t<input type=\"text\" name=\"user_login\" id=\"user_login\" class=\"input\" value=\"<?php echo esc_attr( $user_login ); ?>\" size=\"20\" autocapitalize=\"off\" /></label>\n\t</p>\n\t<?php\n\t/**\n\t * Fires inside the lostpassword form tags, before the hidden fields.\n\t *\n\t * @since 2.1.0\n\t */\n\tdo_action( 'lostpassword_form' );\n\t?>\n\t\t<input type=\"hidden\" name=\"redirect_to\" value=\"<?php echo esc_attr( $redirect_to ); ?>\" />\n\t\t<p class=\"submit\"><input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e( 'Get New Password' ); ?>\" /></p>\n\t</form>\n\n\t<p id=\"nav\">\n\t<a href=\"<?php echo esc_url( wp_login_url() ); ?>\"><?php _e( 'Log in' ); ?></a>\n\t<?php\n\tif ( get_option( 'users_can_register' ) ) :\n\t\t$registration_url = sprintf( '<a href=\"%s\">%s</a>', esc_url( wp_registration_url() ), __( 'Register' ) );\n\n\t\techo esc_html( $login_link_separator );\n\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\techo apply_filters( 'register', $registration_url );\n\tendif;\n\t?>\n\t</p>\n\n\t<?php\n\tlogin_footer( 'user_login' );\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\t\tbreak;\n\n\tcase 'resetpass':\n\tcase 'rp':\n\t\tlist( $rp_path ) = explode( '?', wp_unslash( $_SERVER['REQUEST_URI'] ) );\n\t\t$rp_cookie       = 'wp-resetpass-' . COOKIEHASH;\n\t\tif ( isset( $_GET['key'] ) ) {\n\t\t\t$value = sprintf( '%s:%s', wp_unslash( $_GET['login'] ), wp_unslash( $_GET['key'] ) );\n\t\t\tsetcookie( $rp_cookie, $value, 0, $rp_path, COOKIE_DOMAIN, is_ssl(), true );\n\t\t\twp_safe_redirect( remove_query_arg( array( 'key', 'login' ) ) );\n\t\t\texit;\n\t\t}\n\n\t\tif ( isset( $_COOKIE[ $rp_cookie ] ) && 0 < strpos( $_COOKIE[ $rp_cookie ], ':' ) ) {\n\t\t\tlist( $rp_login, $rp_key ) = explode( ':', wp_unslash( $_COOKIE[ $rp_cookie ] ), 2 );\n\t\t\t$user                      = check_password_reset_key( $rp_key, $rp_login );\n\t\t\tif ( isset( $_POST['pass1'] ) && ! hash_equals( $rp_key, $_POST['rp_key'] ) ) {\n\t\t\t\t$user = false;\n\t\t\t}\n\t\t} else {\n\t\t\t$user = false;\n\t\t}\n\n\t\tif ( ! $user || is_wp_error( $user ) ) {\n\t\t\tsetcookie( $rp_cookie, ' ', time() - YEAR_IN_SECONDS, $rp_path, COOKIE_DOMAIN, is_ssl(), true );\n\t\t\tif ( $user && $user->get_error_code() === 'expired_key' ) {\n\t\t\t\twp_redirect( site_url( 'wp-login.php?action=lostpassword&error=expiredkey' ) );\n\t\t\t} else {\n\t\t\t\twp_redirect( site_url( 'wp-login.php?action=lostpassword&error=invalidkey' ) );\n\t\t\t}\n\t\t\texit;\n\t\t}\n\n\t\t$errors = new WP_Error();\n\n\t\tif ( isset( $_POST['pass1'] ) && $_POST['pass1'] != $_POST['pass2'] ) {\n\t\t\t$errors->add( 'password_reset_mismatch', __( 'The passwords do not match.' ) );\n\t\t}\n\n\t\t/**\n\t\t * Fires before the password reset procedure is validated.\n\t\t *\n\t\t * @since 3.5.0\n\t\t *\n\t\t * @param object           $errors WP Error object.\n\t\t * @param WP_User|WP_Error $user   WP_User object if the login and reset key match. WP_Error object otherwise.\n\t\t */\n\t\tdo_action( 'validate_password_reset', $errors, $user );\n\n\t\tif ( ( ! $errors->has_errors() ) && isset( $_POST['pass1'] ) && ! empty( $_POST['pass1'] ) ) {\n\t\t\treset_password( $user, $_POST['pass1'] );\n\t\t\tsetcookie( $rp_cookie, ' ', time() - YEAR_IN_SECONDS, $rp_path, COOKIE_DOMAIN, is_ssl(), true );\n\t\t\tlogin_header( __( 'Password Reset' ), '<p class=\"message reset-pass\">' . __( 'Your password has been reset.' ) . ' <a href=\"' . esc_url( wp_login_url() ) . '\">' . __( 'Log in' ) . '</a></p>' );\n\t\t\tlogin_footer();\n\t\t\texit;\n\t\t}\n\n\t\twp_enqueue_script( 'utils' );\n\t\twp_enqueue_script( 'user-profile' );\n\n\t\tlogin_header( __( 'Reset Password' ), '<p class=\"message reset-pass\">' . __( 'Enter your new password below.' ) . '</p>', $errors );\n\n\t?>\n\t<form name=\"resetpassform\" id=\"resetpassform\" action=\"<?php echo esc_url( network_site_url( 'wp-login.php?action=resetpass', 'login_post' ) ); ?>\" method=\"post\" autocomplete=\"off\">\n\t<input type=\"hidden\" id=\"user_login\" value=\"<?php echo esc_attr( $rp_login ); ?>\" autocomplete=\"off\" />\n\n\t<div class=\"user-pass1-wrap\">\n\t\t<p>\n\t\t\t<label for=\"pass1\"><?php _e( 'New password' ); ?></label>\n\t\t</p>\n\n\t\t<div class=\"wp-pwd\">\n\t\t\t<div class=\"password-input-wrapper\">\n\t\t\t\t<input type=\"password\" data-reveal=\"1\" data-pw=\"<?php echo esc_attr( wp_generate_password( 16 ) ); ?>\" name=\"pass1\" id=\"pass1\" class=\"input password-input\" size=\"24\" value=\"\" autocomplete=\"off\" aria-describedby=\"pass-strength-result\" />\n\t\t\t\t<span class=\"button button-secondary wp-hide-pw hide-if-no-js\">\n\t\t\t\t\t<span class=\"dashicons dashicons-hidden\"></span>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div id=\"pass-strength-result\" class=\"hide-if-no-js\" aria-live=\"polite\"><?php _e( 'Strength indicator' ); ?></div>\n\t\t</div>\n\t\t<div class=\"pw-weak\">\n\t\t\t<label>\n\t\t\t\t<input type=\"checkbox\" name=\"pw_weak\" class=\"pw-checkbox\" />\n\t\t\t\t<?php _e( 'Confirm use of weak password' ); ?>\n\t\t\t</label>\n\t\t</div>\n\t</div>\n\n\t<p class=\"user-pass2-wrap\">\n\t\t<label for=\"pass2\"><?php _e( 'Confirm new password' ); ?></label><br />\n\t\t<input type=\"password\" name=\"pass2\" id=\"pass2\" class=\"input\" size=\"20\" value=\"\" autocomplete=\"off\" />\n\t</p>\n\n\t<p class=\"description indicator-hint\"><?php echo wp_get_password_hint(); ?></p>\n\t<br class=\"clear\" />\n\n\t<?php\n\t/**\n\t * Fires following the 'Strength indicator' meter in the user password reset form.\n\t *\n\t * @since 3.9.0\n\t *\n\t * @param WP_User $user User object of the user whose password is being reset.\n\t */\n\tdo_action( 'resetpass_form', $user );\n\t?>\n\t<input type=\"hidden\" name=\"rp_key\" value=\"<?php echo esc_attr( $rp_key ); ?>\" />\n\t<p class=\"submit\"><input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e( 'Reset Password' ); ?>\" /></p>\n\t</form>\n\n\t<p id=\"nav\">\n\t<a href=\"<?php echo esc_url( wp_login_url() ); ?>\"><?php _e( 'Log in' ); ?></a>\n\t<?php\n\tif ( get_option( 'users_can_register' ) ) :\n\t\t$registration_url = sprintf( '<a href=\"%s\">%s</a>', esc_url( wp_registration_url() ), __( 'Register' ) );\n\n\t\techo esc_html( $login_link_separator );\n\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\techo apply_filters( 'register', $registration_url );\n\tendif;\n\t?>\n\t</p>\n\n\t<?php\n\tlogin_footer( 'user_pass' );\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\t\tbreak;\n\n\tcase 'register':\n\t\tif ( is_multisite() ) {\n\t\t\t/**\n\t\t\t * Filters the Multisite sign up URL.\n\t\t\t *\n\t\t\t * @since 3.0.0\n\t\t\t *\n\t\t\t * @param string $sign_up_url The sign up URL.\n\t\t\t */\n\t\t\twp_redirect( apply_filters( 'wp_signup_location', network_site_url( 'wp-signup.php' ) ) );\n\t\t\texit;\n\t\t}\n\n\t\tif ( ! get_option( 'users_can_register' ) ) {\n\t\t\twp_redirect( site_url( 'wp-login.php?registration=disabled' ) );\n\t\t\texit();\n\t\t}\n\n\t\t$user_login = '';\n\t\t$user_email = '';\n\n\t\tif ( $http_post ) {\n\t\t\tif ( isset( $_POST['user_login'] ) && is_string( $_POST['user_login'] ) ) {\n\t\t\t\t$user_login = $_POST['user_login'];\n\t\t\t}\n\n\t\t\tif ( isset( $_POST['user_email'] ) && is_string( $_POST['user_email'] ) ) {\n\t\t\t\t$user_email = wp_unslash( $_POST['user_email'] );\n\t\t\t}\n\n\t\t\t$errors = register_new_user( $user_login, $user_email );\n\t\t\tif ( ! is_wp_error( $errors ) ) {\n\t\t\t\t$redirect_to = ! empty( $_POST['redirect_to'] ) ? $_POST['redirect_to'] : 'wp-login.php?checkemail=registered';\n\t\t\t\twp_safe_redirect( $redirect_to );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t$registration_redirect = ! empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '';\n\t\t/**\n\t\t * Filters the registration redirect URL.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string $registration_redirect The redirect destination URL.\n\t\t */\n\t\t$redirect_to = apply_filters( 'registration_redirect', $registration_redirect );\n\t\tlogin_header( __( 'Registration Form' ), '<p class=\"message register\">' . __( 'Register For This Site' ) . '</p>', $errors );\n\t?>\n\t<form name=\"registerform\" id=\"registerform\" action=\"<?php echo esc_url( site_url( 'wp-login.php?action=register', 'login_post' ) ); ?>\" method=\"post\" novalidate=\"novalidate\">\n\t<p>\n\t\t<label for=\"user_login\"><?php _e( 'Username' ); ?><br />\n\t\t<input type=\"text\" name=\"user_login\" id=\"user_login\" class=\"input\" value=\"<?php echo esc_attr( wp_unslash( $user_login ) ); ?>\" size=\"20\" autocapitalize=\"off\" /></label>\n\t</p>\n\t<p>\n\t\t<label for=\"user_email\"><?php _e( 'Email' ); ?><br />\n\t\t<input type=\"email\" name=\"user_email\" id=\"user_email\" class=\"input\" value=\"<?php echo esc_attr( wp_unslash( $user_email ) ); ?>\" size=\"25\" /></label>\n\t</p>\n\t<?php\n\t/**\n\t * Fires following the 'Email' field in the user registration form.\n\t *\n\t * @since 2.1.0\n\t */\n\tdo_action( 'register_form' );\n\t?>\n\t<p id=\"reg_passmail\"><?php _e( 'Registration confirmation will be emailed to you.' ); ?></p>\n\t<br class=\"clear\" />\n\t<input type=\"hidden\" name=\"redirect_to\" value=\"<?php echo esc_attr( $redirect_to ); ?>\" />\n\t<p class=\"submit\"><input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e( 'Register' ); ?>\" /></p>\n\t</form>\n\n\t<p id=\"nav\">\n\t<a href=\"<?php echo esc_url( wp_login_url() ); ?>\"><?php _e( 'Log in' ); ?></a>\n\t<?php echo esc_html( $login_link_separator ); ?>\n\t<a href=\"<?php echo esc_url( wp_lostpassword_url() ); ?>\"><?php _e( 'Lost your password?' ); ?></a>\n\t</p>\n\n\t<?php\n\tlogin_footer( 'user_login' );\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\t\tbreak;\n\n\tcase 'emailconfirm' :\n\t\tif ( isset( $_GET['confirm_action'], $_GET['confirm_key'], $_GET['uid'] ) ) {\n\t\t\t$action_name = sanitize_key( wp_unslash( $_GET['confirm_action'] ) );\n\t\t\t$key         = sanitize_text_field( wp_unslash( $_GET['confirm_key'] ) );\n\t\t\t$uid         = sanitize_text_field( wp_unslash( $_GET['uid'] ) );\n\t\t\t$result      = check_confirm_account_action_key( $action_name, $key, $uid );\n\t\t} else {\n\t\t\t$result = new WP_Error( 'invalid_key', __( 'Invalid key' ) );\n\t\t}\n\n\t\tif ( is_wp_error( $result ) ) {\n\t\t\t/**\n\t\t\t * Fires an action hook when the account action was not confirmed.\n\t\t\t *\n\t\t\t * After running this action hook the page will die.\n\t\t\t *\n\t\t\t * @param WP_Error $result Error object.\n\t\t\t */\n\t\t\tdo_action( 'account_action_failed', $result );\n\n\t\t\twp_die( $result );\n\t\t}\n\n\t\t/**\n\t\t * Fires an action hook when the account action has been confirmed by the user.\n\t\t *\n\t\t * Using this you can assume the user has agreed to perform the action by\n\t\t * clicking on the link in the confirmation email.\n\t\t *\n\t\t * After firing this action hook the page will redirect to wp-login a callback\n\t\t * redirects or exits first.\n\t\t *\n\t\t * @param array $result {\n\t\t *     Data about the action which was confirmed.\n\t\t *\n\t\t *     @type string $action Name of the action that was confirmed.\n\t\t *     @type string $email  Email of the user who confirmed the action.\n\t\t * }\n\t\t */\n\t\tdo_action( 'account_action_confirmed', $result );\n\n\t\t$message = '<p class=\"message\">' . __( 'Action has been confirmed.' ) . '</p>';\n\t\tlogin_header( '', $message );\n\t\tlogin_footer();\n\t\texit;\n\n\tcase 'login':\n\tdefault:\n\t\t$secure_cookie   = '';\n\t\t$customize_login = isset( $_REQUEST['customize-login'] );\n\t\tif ( $customize_login ) {\n\t\t\twp_enqueue_script( 'customize-base' );\n\t\t}\n\n\t\t// If the user wants ssl but the session is not ssl, force a secure cookie.\n\t\tif ( ! empty( $_POST['log'] ) && ! force_ssl_admin() ) {\n\t\t\t$user_name = sanitize_user( $_POST['log'] );\n\t\t\t$user      = get_user_by( 'login', $user_name );\n\n\t\t\tif ( ! $user && strpos( $user_name, '@' ) ) {\n\t\t\t\t$user = get_user_by( 'email', $user_name );\n\t\t\t}\n\n\t\t\tif ( $user ) {\n\t\t\t\tif ( get_user_option( 'use_ssl', $user->ID ) ) {\n\t\t\t\t\t$secure_cookie = true;\n\t\t\t\t\tforce_ssl_admin( true );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $_REQUEST['redirect_to'] ) ) {\n\t\t\t$redirect_to = $_REQUEST['redirect_to'];\n\t\t\t// Redirect to https if user wants ssl\n\t\t\tif ( $secure_cookie && false !== strpos( $redirect_to, 'wp-admin' ) ) {\n\t\t\t\t$redirect_to = preg_replace( '|^http://|', 'https://', $redirect_to );\n\t\t\t}\n\t\t} else {\n\t\t\t$redirect_to = admin_url();\n\t\t}\n\n\t\t$reauth = empty( $_REQUEST['reauth'] ) ? false : true;\n\n\t\t$user = wp_signon( array(), $secure_cookie );\n\n\t\tif ( empty( $_COOKIE[ LOGGED_IN_COOKIE ] ) ) {\n\t\t\tif ( headers_sent() ) {\n\t\t\t\t/* translators: 1: Browser cookie documentation URL, 2: Support forums URL */\n\t\t\t\t$user = new WP_Error(\n\t\t\t\t\t'test_cookie', sprintf(\n\t\t\t\t\t\t__( '<strong>ERROR</strong>: Cookies are blocked due to unexpected output. For help, please see <a href=\"%1$s\">this documentation</a> or try the <a href=\"%2$s\">support forums</a>.' ),\n\t\t\t\t\t\t__( 'https://codex.wordpress.org/Cookies' ), __( 'https://wordpress.org/support/' )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} elseif ( isset( $_POST['testcookie'] ) && empty( $_COOKIE[ TEST_COOKIE ] ) ) {\n\t\t\t\t// If cookies are disabled we can't log in even with a valid user+pass\n\t\t\t\t/* translators: %s: Browser cookie documentation URL */\n\t\t\t\t$user = new WP_Error(\n\t\t\t\t\t'test_cookie', sprintf(\n\t\t\t\t\t\t__( '<strong>ERROR</strong>: Cookies are blocked or not supported by your browser. You must <a href=\"%s\">enable cookies</a> to use WordPress.' ),\n\t\t\t\t\t\t__( 'https://codex.wordpress.org/Cookies' )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$requested_redirect_to = isset( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '';\n\t\t/**\n\t\t * Filters the login redirect URL.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string           $redirect_to           The redirect destination URL.\n\t\t * @param string           $requested_redirect_to The requested redirect destination URL passed as a parameter.\n\t\t * @param WP_User|WP_Error $user                  WP_User object if login was successful, WP_Error object otherwise.\n\t\t */\n\t\t$redirect_to = apply_filters( 'login_redirect', $redirect_to, $requested_redirect_to, $user );\n\n\t\tif ( ! is_wp_error( $user ) && ! $reauth ) {\n\t\t\tif ( $interim_login ) {\n\t\t\t\t$message       = '<p class=\"message\">' . __( 'You have logged in successfully.' ) . '</p>';\n\t\t\t\t$interim_login = 'success';\n\t\t\t\tlogin_header( '', $message );\n\t\t\t?>\n\t\t\t\t</div>\n\t\t\t\t<?php\n\t\t\t\t/** This action is documented in wp-login.php */\n\t\t\t\tdo_action( 'login_footer' );\n\t\t\t?>\n\t\t\t\t<?php if ( $customize_login ) : ?>\n\t\t\t\t<script type=\"text/javascript\">setTimeout( function(){ new wp.customize.Messenger({ url: '<?php echo wp_customize_url(); ?>', channel: 'login' }).send('login') }, 1000 );</script>\n\t\t\t<?php endif; ?>\n\t\t\t\t</body></html>\n\t<?php\n\t  exit;\n\t\t\t}\n\n\t\t\tif ( ( empty( $redirect_to ) || $redirect_to == 'wp-admin/' || $redirect_to == admin_url() ) ) {\n\t\t\t\t// If the user doesn't belong to a blog, send them to user admin. If the user can't edit posts, send them to their profile.\n\t\t\t\tif ( is_multisite() && ! get_active_blog_for_user( $user->ID ) && ! is_super_admin( $user->ID ) ) {\n\t\t\t\t\t$redirect_to = user_admin_url();\n\t\t\t\t} elseif ( is_multisite() && ! $user->has_cap( 'read' ) ) {\n\t\t\t\t\t$redirect_to = get_dashboard_url( $user->ID );\n\t\t\t\t} elseif ( ! $user->has_cap( 'edit_posts' ) ) {\n\t\t\t\t\t$redirect_to = $user->has_cap( 'read' ) ? admin_url( 'profile.php' ) : home_url();\n\t\t\t\t}\n\n\t\t\t\twp_redirect( $redirect_to );\n\t\t\t\texit();\n\t\t\t}\n\t\t\twp_safe_redirect( $redirect_to );\n\t\t\texit();\n\t\t}\n\n\t\t$errors = $user;\n\t\t// Clear errors if loggedout is set.\n\t\tif ( ! empty( $_GET['loggedout'] ) || $reauth ) {\n\t\t\t$errors = new WP_Error();\n\t\t}\n\n\t\tif ( $interim_login ) {\n\t\t\tif ( ! $errors->has_errors() ) {\n\t\t\t\t$errors->add( 'expired', __( 'Your session has expired. Please log in to continue where you left off.' ), 'message' );\n\t\t\t}\n\t\t} else {\n\t\t\t// Some parts of this script use the main login form to display a message\n\t\t\tif ( isset( $_GET['loggedout'] ) && true == $_GET['loggedout'] ) {\n\t\t\t\t$errors->add( 'loggedout', __( 'You are now logged out.' ), 'message' );\n\t\t\t} elseif ( isset( $_GET['registration'] ) && 'disabled' == $_GET['registration'] ) {\n\t\t\t\t$errors->add( 'registerdisabled', __( 'User registration is currently not allowed.' ) );\n\t\t\t} elseif ( isset( $_GET['checkemail'] ) && 'confirm' == $_GET['checkemail'] ) {\n\t\t\t\t$errors->add( 'confirm', __( 'Check your email for the confirmation link.' ), 'message' );\n\t\t\t} elseif ( isset( $_GET['checkemail'] ) && 'newpass' == $_GET['checkemail'] ) {\n\t\t\t\t$errors->add( 'newpass', __( 'Check your email for your new password.' ), 'message' );\n\t\t\t} elseif ( isset( $_GET['checkemail'] ) && 'registered' == $_GET['checkemail'] ) {\n\t\t\t\t$errors->add( 'registered', __( 'Registration complete. Please check your email.' ), 'message' );\n\t\t\t} elseif ( strpos( $redirect_to, 'about.php?updated' ) ) {\n\t\t\t\t$errors->add( 'updated', __( '<strong>You have successfully updated WordPress!</strong> Please log back in to see what&#8217;s new.' ), 'message' );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the login page errors.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param object $errors      WP Error object.\n\t\t * @param string $redirect_to Redirect destination URL.\n\t\t */\n\t\t$errors = apply_filters( 'wp_login_errors', $errors, $redirect_to );\n\n\t\t// Clear any stale cookies.\n\t\tif ( $reauth ) {\n\t\t\twp_clear_auth_cookie();\n\t\t}\n\n\t\tlogin_header( __( 'Log In' ), '', $errors );\n\n\t\tif ( isset( $_POST['log'] ) ) {\n\t\t\t$user_login = ( 'incorrect_password' == $errors->get_error_code() || 'empty_password' == $errors->get_error_code() ) ? esc_attr( wp_unslash( $_POST['log'] ) ) : '';\n\t\t}\n\t\t$rememberme = ! empty( $_POST['rememberme'] );\n\n\t\tif ( $errors->has_errors() ) {\n\t\t\t$aria_describedby_error = ' aria-describedby=\"login_error\"';\n\t\t} else {\n\t\t\t$aria_describedby_error = '';\n\t\t}\n\t?>\n\n\t<form name=\"loginform\" id=\"loginform\" action=\"<?php echo esc_url( site_url( 'wp-login.php', 'login_post' ) ); ?>\" method=\"post\">\n\t<p>\n\t\t<label for=\"user_login\"><?php _e( 'Username or Email Address' ); ?><br />\n\t\t<input type=\"text\" name=\"log\" id=\"user_login\"<?php echo $aria_describedby_error; ?> class=\"input\" value=\"<?php echo esc_attr( $user_login ); ?>\" size=\"20\" autocapitalize=\"off\" /></label>\n\t</p>\n\t<p>\n\t\t<label for=\"user_pass\"><?php _e( 'Password' ); ?><br />\n\t\t<input type=\"password\" name=\"pwd\" id=\"user_pass\"<?php echo $aria_describedby_error; ?> class=\"input\" value=\"\" size=\"20\" /></label>\n\t</p>\n\t<?php\n\t/**\n\t * Fires following the 'Password' field in the login form.\n\t *\n\t * @since 2.1.0\n\t */\n\tdo_action( 'login_form' );\n\t?>\n\t<p class=\"forgetmenot\"><label for=\"rememberme\"><input name=\"rememberme\" type=\"checkbox\" id=\"rememberme\" value=\"forever\" <?php checked( $rememberme ); ?> /> <?php esc_html_e( 'Remember Me' ); ?></label></p>\n\t<p class=\"submit\">\n\t\t<input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e( 'Log In' ); ?>\" />\n\t<?php\tif ( $interim_login ) { ?>\n\t\t<input type=\"hidden\" name=\"interim-login\" value=\"1\" />\n\t<?php\t} else { ?>\n\t\t<input type=\"hidden\" name=\"redirect_to\" value=\"<?php echo esc_attr( $redirect_to ); ?>\" />\n\t<?php } ?>\n\t<?php if ( $customize_login ) : ?>\n\t\t<input type=\"hidden\" name=\"customize-login\" value=\"1\" />\n\t<?php endif; ?>\n\t\t<input type=\"hidden\" name=\"testcookie\" value=\"1\" />\n\t</p>\n\t</form>\n\n\t<?php if ( ! $interim_login ) { ?>\n\t<p id=\"nav\">\n\t<?php\n\tif ( ! isset( $_GET['checkemail'] ) || ! in_array( $_GET['checkemail'], array( 'confirm', 'newpass' ) ) ) :\n\t\tif ( get_option( 'users_can_register' ) ) :\n\t\t\t$registration_url = sprintf( '<a href=\"%s\">%s</a>', esc_url( wp_registration_url() ), __( 'Register' ) );\n\n\t\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\t\techo apply_filters( 'register', $registration_url );\n\n\t\t\techo esc_html( $login_link_separator );\n\t\tendif;\n\t\t?>\n\t\t<a href=\"<?php echo esc_url( wp_lostpassword_url() ); ?>\"><?php _e( 'Lost your password?' ); ?></a>\n\t<?php endif; ?>\n\t</p>\n\t<?php } ?>\n\n\t<script type=\"text/javascript\">\n\tfunction wp_attempt_focus(){\n\tsetTimeout( function(){ try{\n\t<?php if ( $user_login ) { ?>\n\td = document.getElementById('user_pass');\n\td.value = '';\n\t<?php } else { ?>\n\td = document.getElementById('user_login');\n\t<?php if ( 'invalid_username' == $errors->get_error_code() ) { ?>\n\tif( d.value != '' )\n\td.value = '';\n\t<?php\n}\n}\n?>\n\td.focus();\n\td.select();\n\t} catch(e){}\n\t}, 200);\n\t}\n\n\t<?php\n\t/**\n\t * Filters whether to print the call to `wp_attempt_focus()` on the login screen.\n\t *\n\t * @since 4.8.0\n\t *\n\t * @param bool $print Whether to print the function call. Default true.\n\t */\n\tif ( apply_filters( 'enable_login_autofocus', true ) && ! $error ) {\n?>\n\twp_attempt_focus();\n\t<?php } ?>\n\tif(typeof wpOnload=='function')wpOnload();\n\t<?php if ( $interim_login ) { ?>\n\t(function(){\n\ttry {\n\t\tvar i, links = document.getElementsByTagName('a');\n\t\tfor ( i in links ) {\n\t\t\tif ( links[i].href )\n\t\t\t\tlinks[i].target = '_blank';\n\t\t}\n\t} catch(e){}\n\t}());\n\t<?php } ?>\n\t</script>\n\n\t<?php\n\tlogin_footer();\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\t\tbreak;\n} // end action switch\n"], "fixing_code": ["<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '5.0-alpha-42892';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 42836;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4607-20180123';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n", "<?php\n/**\n * WordPress User Page\n *\n * Handles authentication, registering, resetting passwords, forgot password,\n * and other user handling.\n *\n * @package WordPress\n */\n\n/** Make sure that the WordPress bootstrap has run before continuing. */\nrequire( dirname( __FILE__ ) . '/wp-load.php' );\n\n// Redirect to https login if forced to use SSL\nif ( force_ssl_admin() && ! is_ssl() ) {\n\tif ( 0 === strpos( $_SERVER['REQUEST_URI'], 'http' ) ) {\n\t\twp_safe_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\texit();\n\t} else {\n\t\twp_safe_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\texit();\n\t}\n}\n\n/**\n * Output the login page header.\n *\n * @param string   $title    Optional. WordPress login Page title to display in the `<title>` element.\n *                           Default 'Log In'.\n * @param string   $message  Optional. Message to display in header. Default empty.\n * @param WP_Error $wp_error Optional. The error to pass. Default empty.\n */\nfunction login_header( $title = 'Log In', $message = '', $wp_error = '' ) {\n\tglobal $error, $interim_login, $action;\n\n\t// Don't index any of these forms\n\tadd_action( 'login_head', 'wp_no_robots' );\n\n\tadd_action( 'login_head', 'wp_login_viewport_meta' );\n\n\tif ( empty( $wp_error ) ) {\n\t\t$wp_error = new WP_Error();\n\t}\n\n\t// Shake it!\n\t$shake_error_codes = array( 'empty_password', 'empty_email', 'invalid_email', 'invalidcombo', 'empty_username', 'invalid_username', 'incorrect_password' );\n\t/**\n\t * Filters the error codes array for shaking the login form.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param array $shake_error_codes Error codes that shake the login form.\n\t */\n\t$shake_error_codes = apply_filters( 'shake_error_codes', $shake_error_codes );\n\n\tif ( $shake_error_codes && $wp_error->has_errors() && in_array( $wp_error->get_error_code(), $shake_error_codes ) ) {\n\t\tadd_action( 'login_head', 'wp_shake_js', 12 );\n\t}\n\n\t$login_title = get_bloginfo( 'name', 'display' );\n\n\t/* translators: Login screen title. 1: Login screen name, 2: Network or site name */\n\t$login_title = sprintf( __( '%1$s &lsaquo; %2$s &#8212; WordPress' ), $title, $login_title );\n\n\t/**\n\t * Filters the title tag content for login page.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param string $login_title The page title, with extra context added.\n\t * @param string $title       The original page title.\n\t */\n\t$login_title = apply_filters( 'login_title', $login_title, $title );\n\n\t?><!DOCTYPE html>\n\t<!--[if IE 8]>\n\t\t<html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"ie8\" <?php language_attributes(); ?>>\n\t<![endif]-->\n\t<!--[if !(IE 8) ]><!-->\n\t\t<html xmlns=\"http://www.w3.org/1999/xhtml\" <?php language_attributes(); ?>>\n\t<!--<![endif]-->\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"<?php bloginfo( 'html_type' ); ?>; charset=<?php bloginfo( 'charset' ); ?>\" />\n\t<title><?php echo $login_title; ?></title>\n\t<?php\n\n\twp_enqueue_style( 'login' );\n\n\t/*\n\t * Remove all stored post data on logging out.\n\t * This could be added by add_action('login_head'...) like wp_shake_js(),\n\t * but maybe better if it's not removable by plugins\n\t */\n\tif ( 'loggedout' == $wp_error->get_error_code() ) {\n\t\t?>\n\t\t<script>if(\"sessionStorage\" in window){try{for(var key in sessionStorage){if(key.indexOf(\"wp-autosave-\")!=-1){sessionStorage.removeItem(key)}}}catch(e){}};</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Enqueue scripts and styles for the login page.\n\t *\n\t * @since 3.1.0\n\t */\n\tdo_action( 'login_enqueue_scripts' );\n\n\t/**\n\t * Fires in the login page header after scripts are enqueued.\n\t *\n\t * @since 2.1.0\n\t */\n\tdo_action( 'login_head' );\n\n\tif ( is_multisite() ) {\n\t\t$login_header_url   = network_home_url();\n\t\t$login_header_title = get_network()->site_name;\n\t} else {\n\t\t$login_header_url   = __( 'https://wordpress.org/' );\n\t\t$login_header_title = __( 'Powered by WordPress' );\n\t}\n\n\t/**\n\t * Filters link URL of the header logo above login form.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $login_header_url Login header logo URL.\n\t */\n\t$login_header_url = apply_filters( 'login_headerurl', $login_header_url );\n\n\t/**\n\t * Filters the title attribute of the header logo above login form.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $login_header_title Login header logo title attribute.\n\t */\n\t$login_header_title = apply_filters( 'login_headertitle', $login_header_title );\n\n\t/*\n\t * To match the URL/title set above, Multisite sites have the blog name,\n\t * while single sites get the header title.\n\t */\n\tif ( is_multisite() ) {\n\t\t$login_header_text = get_bloginfo( 'name', 'display' );\n\t} else {\n\t\t$login_header_text = $login_header_title;\n\t}\n\n\t$classes = array( 'login-action-' . $action, 'wp-core-ui' );\n\tif ( is_rtl() ) {\n\t\t$classes[] = 'rtl';\n\t}\n\tif ( $interim_login ) {\n\t\t$classes[] = 'interim-login';\n\t\t?>\n\t\t<style type=\"text/css\">html{background-color: transparent;}</style>\n\t\t<?php\n\n\t\tif ( 'success' === $interim_login ) {\n\t\t\t$classes[] = 'interim-login-success';\n\t\t}\n\t}\n\t$classes[] = ' locale-' . sanitize_html_class( strtolower( str_replace( '_', '-', get_locale() ) ) );\n\n\t/**\n\t * Filters the login page body classes.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param array  $classes An array of body classes.\n\t * @param string $action  The action that brought the visitor to the login page.\n\t */\n\t$classes = apply_filters( 'login_body_class', $classes, $action );\n\n\t?>\n\t</head>\n\t<body class=\"login <?php echo esc_attr( implode( ' ', $classes ) ); ?>\">\n\t<?php\n\t/**\n\t * Fires in the login page header after the body tag is opened.\n\t *\n\t * @since 4.6.0\n\t */\n\tdo_action( 'login_header' );\n\t?>\n\t<div id=\"login\">\n\t\t<h1><a href=\"<?php echo esc_url( $login_header_url ); ?>\" title=\"<?php echo esc_attr( $login_header_title ); ?>\" tabindex=\"-1\"><?php echo $login_header_text; ?></a></h1>\n\t<?php\n\n\tunset( $login_header_url, $login_header_title );\n\n\t/**\n\t * Filters the message to display above the login form.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $message Login message text.\n\t */\n\t$message = apply_filters( 'login_message', $message );\n\tif ( ! empty( $message ) ) {\n\t\techo $message . \"\\n\";\n\t}\n\n\t// In case a plugin uses $error rather than the $wp_errors object\n\tif ( ! empty( $error ) ) {\n\t\t$wp_error->add( 'error', $error );\n\t\tunset( $error );\n\t}\n\n\tif ( $wp_error->has_errors() ) {\n\t\t$errors   = '';\n\t\t$messages = '';\n\t\tforeach ( $wp_error->get_error_codes() as $code ) {\n\t\t\t$severity = $wp_error->get_error_data( $code );\n\t\t\tforeach ( $wp_error->get_error_messages( $code ) as $error_message ) {\n\t\t\t\tif ( 'message' == $severity ) {\n\t\t\t\t\t$messages .= '\t' . $error_message . \"<br />\\n\";\n\t\t\t\t} else {\n\t\t\t\t\t$errors .= '\t' . $error_message . \"<br />\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( ! empty( $errors ) ) {\n\t\t\t/**\n\t\t\t * Filters the error messages displayed above the login form.\n\t\t\t *\n\t\t\t * @since 2.1.0\n\t\t\t *\n\t\t\t * @param string $errors Login error message.\n\t\t\t */\n\t\t\techo '<div id=\"login_error\">' . apply_filters( 'login_errors', $errors ) . \"</div>\\n\";\n\t\t}\n\t\tif ( ! empty( $messages ) ) {\n\t\t\t/**\n\t\t\t * Filters instructional messages displayed above the login form.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $messages Login messages.\n\t\t\t */\n\t\t\techo '<p class=\"message\">' . apply_filters( 'login_messages', $messages ) . \"</p>\\n\";\n\t\t}\n\t}\n} // End of login_header()\n\n/**\n * Outputs the footer for the login page.\n *\n * @param string $input_id Which input to auto-focus\n */\nfunction login_footer( $input_id = '' ) {\n\tglobal $interim_login;\n\n\t// Don't allow interim logins to navigate away from the page.\n\tif ( ! $interim_login ) :\n\t?>\n\t<p id=\"backtoblog\"><a href=\"<?php echo esc_url( home_url( '/' ) ); ?>\">\n\t\t\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t\t\t\t/* translators: %s: site title */\n\t\t\t\t\t\t\t\t\t\t\tprintf( _x( '&larr; Back to %s', 'site' ), get_bloginfo( 'title', 'display' ) );\n\t?>\n\t</a></p>\n\t<?php endif; ?>\n\n\t</div>\n\n\t<?php if ( ! empty( $input_id ) ) : ?>\n\t<script type=\"text/javascript\">\n\ttry{document.getElementById('<?php echo $input_id; ?>').focus();}catch(e){}\n\tif(typeof wpOnload=='function')wpOnload();\n\t</script>\n\t<?php endif; ?>\n\n\t<?php\n\t/**\n\t * Fires in the login page footer.\n\t *\n\t * @since 3.1.0\n\t */\n\tdo_action( 'login_footer' );\n\t?>\n\t<div class=\"clear\"></div>\n\t</body>\n\t</html>\n\t<?php\n}\n\n/**\n * @since 3.0.0\n */\nfunction wp_shake_js() {\n?>\n<script type=\"text/javascript\">\naddLoadEvent = function(func){if(typeof jQuery!=\"undefined\")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};\nfunction s(id,pos){g(id).left=pos+'px';}\nfunction g(id){return document.getElementById(id).style;}\nfunction shake(id,a,d){c=a.shift();s(id,c);if(a.length>0){setTimeout(function(){shake(id,a,d);},d);}else{try{g(id).position='static';wp_attempt_focus();}catch(e){}}}\naddLoadEvent(function(){ var p=new Array(15,30,15,0,-15,-30,-15,0);p=p.concat(p.concat(p));var i=document.forms[0].id;g(i).position='relative';shake(i,p,20);});\n</script>\n<?php\n}\n\n/**\n * @since 3.7.0\n */\nfunction wp_login_viewport_meta() {\n\t?>\n\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t<?php\n}\n\n/**\n * Handles sending password retrieval email to user.\n *\n * @return bool|WP_Error True: when finish. WP_Error on error\n */\nfunction retrieve_password() {\n\t$errors = new WP_Error();\n\n\tif ( empty( $_POST['user_login'] ) || ! is_string( $_POST['user_login'] ) ) {\n\t\t$errors->add( 'empty_username', __( '<strong>ERROR</strong>: Enter a username or email address.' ) );\n\t} elseif ( strpos( $_POST['user_login'], '@' ) ) {\n\t\t$user_data = get_user_by( 'email', trim( wp_unslash( $_POST['user_login'] ) ) );\n\t\tif ( empty( $user_data ) ) {\n\t\t\t$errors->add( 'invalid_email', __( '<strong>ERROR</strong>: There is no user registered with that email address.' ) );\n\t\t}\n\t} else {\n\t\t$login     = trim( $_POST['user_login'] );\n\t\t$user_data = get_user_by( 'login', $login );\n\t}\n\n\t/**\n\t * Fires before errors are returned from a password reset request.\n\t *\n\t * @since 2.1.0\n\t * @since 4.4.0 Added the `$errors` parameter.\n\t *\n\t * @param WP_Error $errors A WP_Error object containing any errors generated\n\t *                         by using invalid credentials.\n\t */\n\tdo_action( 'lostpassword_post', $errors );\n\n\tif ( $errors->has_errors() ) {\n\t\treturn $errors;\n\t}\n\n\tif ( ! $user_data ) {\n\t\t$errors->add( 'invalidcombo', __( '<strong>ERROR</strong>: Invalid username or email.' ) );\n\t\treturn $errors;\n\t}\n\n\t// Redefining user_login ensures we return the right case in the email.\n\t$user_login = $user_data->user_login;\n\t$user_email = $user_data->user_email;\n\t$key        = get_password_reset_key( $user_data );\n\n\tif ( is_wp_error( $key ) ) {\n\t\treturn $key;\n\t}\n\n\tif ( is_multisite() ) {\n\t\t$site_name = get_network()->site_name;\n\t} else {\n\t\t/*\n\t\t * The blogname option is escaped with esc_html on the way into the database\n\t\t * in sanitize_option we want to reverse this for the plain text arena of emails.\n\t\t */\n\t\t$site_name = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\t}\n\n\t$message = __( 'Someone has requested a password reset for the following account:' ) . \"\\r\\n\\r\\n\";\n\t/* translators: %s: site name */\n\t$message .= sprintf( __( 'Site Name: %s' ), $site_name ) . \"\\r\\n\\r\\n\";\n\t/* translators: %s: user login */\n\t$message .= sprintf( __( 'Username: %s' ), $user_login ) . \"\\r\\n\\r\\n\";\n\t$message .= __( 'If this was a mistake, just ignore this email and nothing will happen.' ) . \"\\r\\n\\r\\n\";\n\t$message .= __( 'To reset your password, visit the following address:' ) . \"\\r\\n\\r\\n\";\n\t$message .= '<' . network_site_url( \"wp-login.php?action=rp&key=$key&login=\" . rawurlencode( $user_login ), 'login' ) . \">\\r\\n\";\n\n\t/* translators: Password reset email subject. %s: Site name */\n\t$title = sprintf( __( '[%s] Password Reset' ), $site_name );\n\n\t/**\n\t * Filters the subject of the password reset email.\n\t *\n\t * @since 2.8.0\n\t * @since 4.4.0 Added the `$user_login` and `$user_data` parameters.\n\t *\n\t * @param string  $title      Default email title.\n\t * @param string  $user_login The username for the user.\n\t * @param WP_User $user_data  WP_User object.\n\t */\n\t$title = apply_filters( 'retrieve_password_title', $title, $user_login, $user_data );\n\n\t/**\n\t * Filters the message body of the password reset mail.\n\t *\n\t * If the filtered message is empty, the password reset email will not be sent.\n\t *\n\t * @since 2.8.0\n\t * @since 4.1.0 Added `$user_login` and `$user_data` parameters.\n\t *\n\t * @param string  $message    Default mail message.\n\t * @param string  $key        The activation key.\n\t * @param string  $user_login The username for the user.\n\t * @param WP_User $user_data  WP_User object.\n\t */\n\t$message = apply_filters( 'retrieve_password_message', $message, $key, $user_login, $user_data );\n\n\tif ( $message && ! wp_mail( $user_email, wp_specialchars_decode( $title ), $message ) ) {\n\t\twp_die( __( 'The email could not be sent.' ) . \"<br />\\n\" . __( 'Possible reason: your host may have disabled the mail() function.' ) );\n\t}\n\n\treturn true;\n}\n\n//\n// Main\n//\n\n$action = isset( $_REQUEST['action'] ) ? $_REQUEST['action'] : 'login';\n$errors = new WP_Error();\n\nif ( isset( $_GET['key'] ) ) {\n\t$action = 'resetpass';\n}\n\n// validate action so as to default to the login screen\nif ( ! in_array( $action, array( 'postpass', 'logout', 'lostpassword', 'retrievepassword', 'resetpass', 'rp', 'register', 'login', 'emailconfirm' ), true ) && false === has_filter( 'login_form_' . $action ) ) {\n\t$action = 'login';\n}\n\nnocache_headers();\n\nheader( 'Content-Type: ' . get_bloginfo( 'html_type' ) . '; charset=' . get_bloginfo( 'charset' ) );\n\nif ( defined( 'RELOCATE' ) && RELOCATE ) { // Move flag is set\n\tif ( isset( $_SERVER['PATH_INFO'] ) && ( $_SERVER['PATH_INFO'] != $_SERVER['PHP_SELF'] ) ) {\n\t\t$_SERVER['PHP_SELF'] = str_replace( $_SERVER['PATH_INFO'], '', $_SERVER['PHP_SELF'] );\n\t}\n\n\t$url = dirname( set_url_scheme( 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'] ) );\n\tif ( $url != get_option( 'siteurl' ) ) {\n\t\tupdate_option( 'siteurl', $url );\n\t}\n}\n\n//Set a cookie now to see if they are supported by the browser.\n$secure = ( 'https' === parse_url( wp_login_url(), PHP_URL_SCHEME ) );\nsetcookie( TEST_COOKIE, 'WP Cookie check', 0, COOKIEPATH, COOKIE_DOMAIN, $secure );\nif ( SITECOOKIEPATH != COOKIEPATH ) {\n\tsetcookie( TEST_COOKIE, 'WP Cookie check', 0, SITECOOKIEPATH, COOKIE_DOMAIN, $secure );\n}\n\n$lang            = ! empty( $_GET['wp_lang'] ) ? sanitize_text_field( $_GET['wp_lang'] ) : '';\n$switched_locale = switch_to_locale( $lang );\n\n/**\n * Fires when the login form is initialized.\n *\n * @since 3.2.0\n */\ndo_action( 'login_init' );\n\n/**\n * Fires before a specified login form action.\n *\n * The dynamic portion of the hook name, `$action`, refers to the action\n * that brought the visitor to the login form. Actions include 'postpass',\n * 'logout', 'lostpassword', etc.\n *\n * @since 2.8.0\n */\ndo_action( \"login_form_{$action}\" );\n\n$http_post     = ( 'POST' == $_SERVER['REQUEST_METHOD'] );\n$interim_login = isset( $_REQUEST['interim-login'] );\n\n/**\n * Filters the separator used between login form navigation links.\n *\n * @since 4.9.0\n *\n * @param string $login_link_separator The separator used between login form navigation links.\n */\n$login_link_separator = apply_filters( 'login_link_separator', ' | ' );\n\nswitch ( $action ) {\n\n\tcase 'postpass':\n\t\tif ( ! array_key_exists( 'post_password', $_POST ) ) {\n\t\t\twp_safe_redirect( wp_get_referer() );\n\t\t\texit();\n\t\t}\n\n\t\trequire_once ABSPATH . WPINC . '/class-phpass.php';\n\t\t$hasher = new PasswordHash( 8, true );\n\n\t\t/**\n\t\t * Filters the life span of the post password cookie.\n\t\t *\n\t\t * By default, the cookie expires 10 days from creation. To turn this\n\t\t * into a session cookie, return 0.\n\t\t *\n\t\t * @since 3.7.0\n\t\t *\n\t\t * @param int $expires The expiry time, as passed to setcookie().\n\t\t */\n\t\t$expire  = apply_filters( 'post_password_expires', time() + 10 * DAY_IN_SECONDS );\n\t\t$referer = wp_get_referer();\n\t\tif ( $referer ) {\n\t\t\t$secure = ( 'https' === parse_url( $referer, PHP_URL_SCHEME ) );\n\t\t} else {\n\t\t\t$secure = false;\n\t\t}\n\t\tsetcookie( 'wp-postpass_' . COOKIEHASH, $hasher->HashPassword( wp_unslash( $_POST['post_password'] ) ), $expire, COOKIEPATH, COOKIE_DOMAIN, $secure );\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\n\t\twp_safe_redirect( wp_get_referer() );\n\t\texit();\n\n\tcase 'logout':\n\t\tcheck_admin_referer( 'log-out' );\n\n\t\t$user = wp_get_current_user();\n\n\t\twp_logout();\n\n\t\tif ( ! empty( $_REQUEST['redirect_to'] ) ) {\n\t\t\t$redirect_to = $requested_redirect_to = $_REQUEST['redirect_to'];\n\t\t} else {\n\t\t\t$redirect_to           = 'wp-login.php?loggedout=true';\n\t\t\t$requested_redirect_to = '';\n\t\t}\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\n\t\t/**\n\t\t * Filters the log out redirect URL.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string  $redirect_to           The redirect destination URL.\n\t\t * @param string  $requested_redirect_to The requested redirect destination URL passed as a parameter.\n\t\t * @param WP_User $user                  The WP_User object for the user that's logging out.\n\t\t */\n\t\t$redirect_to = apply_filters( 'logout_redirect', $redirect_to, $requested_redirect_to, $user );\n\t\twp_safe_redirect( $redirect_to );\n\t\texit();\n\n\tcase 'lostpassword':\n\tcase 'retrievepassword':\n\t\tif ( $http_post ) {\n\t\t\t$errors = retrieve_password();\n\t\t\tif ( ! is_wp_error( $errors ) ) {\n\t\t\t\t$redirect_to = ! empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?checkemail=confirm';\n\t\t\t\twp_safe_redirect( $redirect_to );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $_GET['error'] ) ) {\n\t\t\tif ( 'invalidkey' == $_GET['error'] ) {\n\t\t\t\t$errors->add( 'invalidkey', __( 'Your password reset link appears to be invalid. Please request a new link below.' ) );\n\t\t\t} elseif ( 'expiredkey' == $_GET['error'] ) {\n\t\t\t\t$errors->add( 'expiredkey', __( 'Your password reset link has expired. Please request a new link below.' ) );\n\t\t\t}\n\t\t}\n\n\t\t$lostpassword_redirect = ! empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '';\n\t\t/**\n\t\t * Filters the URL redirected to after submitting the lostpassword/retrievepassword form.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string $lostpassword_redirect The redirect destination URL.\n\t\t */\n\t\t$redirect_to = apply_filters( 'lostpassword_redirect', $lostpassword_redirect );\n\n\t\t/**\n\t\t * Fires before the lost password form.\n\t\t *\n\t\t * @since 1.5.1\n\t\t */\n\t\tdo_action( 'lost_password' );\n\n\t\tlogin_header( __( 'Lost Password' ), '<p class=\"message\">' . __( 'Please enter your username or email address. You will receive a link to create a new password via email.' ) . '</p>', $errors );\n\n\t\t$user_login = '';\n\n\t\tif ( isset( $_POST['user_login'] ) && is_string( $_POST['user_login'] ) ) {\n\t\t\t$user_login = wp_unslash( $_POST['user_login'] );\n\t\t}\n\n\t?>\n\n\t<form name=\"lostpasswordform\" id=\"lostpasswordform\" action=\"<?php echo esc_url( network_site_url( 'wp-login.php?action=lostpassword', 'login_post' ) ); ?>\" method=\"post\">\n\t<p>\n\t\t<label for=\"user_login\" ><?php _e( 'Username or Email Address' ); ?><br />\n\t\t<input type=\"text\" name=\"user_login\" id=\"user_login\" class=\"input\" value=\"<?php echo esc_attr( $user_login ); ?>\" size=\"20\" autocapitalize=\"off\" /></label>\n\t</p>\n\t<?php\n\t/**\n\t * Fires inside the lostpassword form tags, before the hidden fields.\n\t *\n\t * @since 2.1.0\n\t */\n\tdo_action( 'lostpassword_form' );\n\t?>\n\t\t<input type=\"hidden\" name=\"redirect_to\" value=\"<?php echo esc_attr( $redirect_to ); ?>\" />\n\t\t<p class=\"submit\"><input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e( 'Get New Password' ); ?>\" /></p>\n\t</form>\n\n\t<p id=\"nav\">\n\t<a href=\"<?php echo esc_url( wp_login_url() ); ?>\"><?php _e( 'Log in' ); ?></a>\n\t<?php\n\tif ( get_option( 'users_can_register' ) ) :\n\t\t$registration_url = sprintf( '<a href=\"%s\">%s</a>', esc_url( wp_registration_url() ), __( 'Register' ) );\n\n\t\techo esc_html( $login_link_separator );\n\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\techo apply_filters( 'register', $registration_url );\n\tendif;\n\t?>\n\t</p>\n\n\t<?php\n\tlogin_footer( 'user_login' );\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\t\tbreak;\n\n\tcase 'resetpass':\n\tcase 'rp':\n\t\tlist( $rp_path ) = explode( '?', wp_unslash( $_SERVER['REQUEST_URI'] ) );\n\t\t$rp_cookie       = 'wp-resetpass-' . COOKIEHASH;\n\t\tif ( isset( $_GET['key'] ) ) {\n\t\t\t$value = sprintf( '%s:%s', wp_unslash( $_GET['login'] ), wp_unslash( $_GET['key'] ) );\n\t\t\tsetcookie( $rp_cookie, $value, 0, $rp_path, COOKIE_DOMAIN, is_ssl(), true );\n\t\t\twp_safe_redirect( remove_query_arg( array( 'key', 'login' ) ) );\n\t\t\texit;\n\t\t}\n\n\t\tif ( isset( $_COOKIE[ $rp_cookie ] ) && 0 < strpos( $_COOKIE[ $rp_cookie ], ':' ) ) {\n\t\t\tlist( $rp_login, $rp_key ) = explode( ':', wp_unslash( $_COOKIE[ $rp_cookie ] ), 2 );\n\t\t\t$user                      = check_password_reset_key( $rp_key, $rp_login );\n\t\t\tif ( isset( $_POST['pass1'] ) && ! hash_equals( $rp_key, $_POST['rp_key'] ) ) {\n\t\t\t\t$user = false;\n\t\t\t}\n\t\t} else {\n\t\t\t$user = false;\n\t\t}\n\n\t\tif ( ! $user || is_wp_error( $user ) ) {\n\t\t\tsetcookie( $rp_cookie, ' ', time() - YEAR_IN_SECONDS, $rp_path, COOKIE_DOMAIN, is_ssl(), true );\n\t\t\tif ( $user && $user->get_error_code() === 'expired_key' ) {\n\t\t\t\twp_redirect( site_url( 'wp-login.php?action=lostpassword&error=expiredkey' ) );\n\t\t\t} else {\n\t\t\t\twp_redirect( site_url( 'wp-login.php?action=lostpassword&error=invalidkey' ) );\n\t\t\t}\n\t\t\texit;\n\t\t}\n\n\t\t$errors = new WP_Error();\n\n\t\tif ( isset( $_POST['pass1'] ) && $_POST['pass1'] != $_POST['pass2'] ) {\n\t\t\t$errors->add( 'password_reset_mismatch', __( 'The passwords do not match.' ) );\n\t\t}\n\n\t\t/**\n\t\t * Fires before the password reset procedure is validated.\n\t\t *\n\t\t * @since 3.5.0\n\t\t *\n\t\t * @param object           $errors WP Error object.\n\t\t * @param WP_User|WP_Error $user   WP_User object if the login and reset key match. WP_Error object otherwise.\n\t\t */\n\t\tdo_action( 'validate_password_reset', $errors, $user );\n\n\t\tif ( ( ! $errors->has_errors() ) && isset( $_POST['pass1'] ) && ! empty( $_POST['pass1'] ) ) {\n\t\t\treset_password( $user, $_POST['pass1'] );\n\t\t\tsetcookie( $rp_cookie, ' ', time() - YEAR_IN_SECONDS, $rp_path, COOKIE_DOMAIN, is_ssl(), true );\n\t\t\tlogin_header( __( 'Password Reset' ), '<p class=\"message reset-pass\">' . __( 'Your password has been reset.' ) . ' <a href=\"' . esc_url( wp_login_url() ) . '\">' . __( 'Log in' ) . '</a></p>' );\n\t\t\tlogin_footer();\n\t\t\texit;\n\t\t}\n\n\t\twp_enqueue_script( 'utils' );\n\t\twp_enqueue_script( 'user-profile' );\n\n\t\tlogin_header( __( 'Reset Password' ), '<p class=\"message reset-pass\">' . __( 'Enter your new password below.' ) . '</p>', $errors );\n\n\t?>\n\t<form name=\"resetpassform\" id=\"resetpassform\" action=\"<?php echo esc_url( network_site_url( 'wp-login.php?action=resetpass', 'login_post' ) ); ?>\" method=\"post\" autocomplete=\"off\">\n\t<input type=\"hidden\" id=\"user_login\" value=\"<?php echo esc_attr( $rp_login ); ?>\" autocomplete=\"off\" />\n\n\t<div class=\"user-pass1-wrap\">\n\t\t<p>\n\t\t\t<label for=\"pass1\"><?php _e( 'New password' ); ?></label>\n\t\t</p>\n\n\t\t<div class=\"wp-pwd\">\n\t\t\t<div class=\"password-input-wrapper\">\n\t\t\t\t<input type=\"password\" data-reveal=\"1\" data-pw=\"<?php echo esc_attr( wp_generate_password( 16 ) ); ?>\" name=\"pass1\" id=\"pass1\" class=\"input password-input\" size=\"24\" value=\"\" autocomplete=\"off\" aria-describedby=\"pass-strength-result\" />\n\t\t\t\t<span class=\"button button-secondary wp-hide-pw hide-if-no-js\">\n\t\t\t\t\t<span class=\"dashicons dashicons-hidden\"></span>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div id=\"pass-strength-result\" class=\"hide-if-no-js\" aria-live=\"polite\"><?php _e( 'Strength indicator' ); ?></div>\n\t\t</div>\n\t\t<div class=\"pw-weak\">\n\t\t\t<label>\n\t\t\t\t<input type=\"checkbox\" name=\"pw_weak\" class=\"pw-checkbox\" />\n\t\t\t\t<?php _e( 'Confirm use of weak password' ); ?>\n\t\t\t</label>\n\t\t</div>\n\t</div>\n\n\t<p class=\"user-pass2-wrap\">\n\t\t<label for=\"pass2\"><?php _e( 'Confirm new password' ); ?></label><br />\n\t\t<input type=\"password\" name=\"pass2\" id=\"pass2\" class=\"input\" size=\"20\" value=\"\" autocomplete=\"off\" />\n\t</p>\n\n\t<p class=\"description indicator-hint\"><?php echo wp_get_password_hint(); ?></p>\n\t<br class=\"clear\" />\n\n\t<?php\n\t/**\n\t * Fires following the 'Strength indicator' meter in the user password reset form.\n\t *\n\t * @since 3.9.0\n\t *\n\t * @param WP_User $user User object of the user whose password is being reset.\n\t */\n\tdo_action( 'resetpass_form', $user );\n\t?>\n\t<input type=\"hidden\" name=\"rp_key\" value=\"<?php echo esc_attr( $rp_key ); ?>\" />\n\t<p class=\"submit\"><input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e( 'Reset Password' ); ?>\" /></p>\n\t</form>\n\n\t<p id=\"nav\">\n\t<a href=\"<?php echo esc_url( wp_login_url() ); ?>\"><?php _e( 'Log in' ); ?></a>\n\t<?php\n\tif ( get_option( 'users_can_register' ) ) :\n\t\t$registration_url = sprintf( '<a href=\"%s\">%s</a>', esc_url( wp_registration_url() ), __( 'Register' ) );\n\n\t\techo esc_html( $login_link_separator );\n\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\techo apply_filters( 'register', $registration_url );\n\tendif;\n\t?>\n\t</p>\n\n\t<?php\n\tlogin_footer( 'user_pass' );\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\t\tbreak;\n\n\tcase 'register':\n\t\tif ( is_multisite() ) {\n\t\t\t/**\n\t\t\t * Filters the Multisite sign up URL.\n\t\t\t *\n\t\t\t * @since 3.0.0\n\t\t\t *\n\t\t\t * @param string $sign_up_url The sign up URL.\n\t\t\t */\n\t\t\twp_redirect( apply_filters( 'wp_signup_location', network_site_url( 'wp-signup.php' ) ) );\n\t\t\texit;\n\t\t}\n\n\t\tif ( ! get_option( 'users_can_register' ) ) {\n\t\t\twp_redirect( site_url( 'wp-login.php?registration=disabled' ) );\n\t\t\texit();\n\t\t}\n\n\t\t$user_login = '';\n\t\t$user_email = '';\n\n\t\tif ( $http_post ) {\n\t\t\tif ( isset( $_POST['user_login'] ) && is_string( $_POST['user_login'] ) ) {\n\t\t\t\t$user_login = $_POST['user_login'];\n\t\t\t}\n\n\t\t\tif ( isset( $_POST['user_email'] ) && is_string( $_POST['user_email'] ) ) {\n\t\t\t\t$user_email = wp_unslash( $_POST['user_email'] );\n\t\t\t}\n\n\t\t\t$errors = register_new_user( $user_login, $user_email );\n\t\t\tif ( ! is_wp_error( $errors ) ) {\n\t\t\t\t$redirect_to = ! empty( $_POST['redirect_to'] ) ? $_POST['redirect_to'] : 'wp-login.php?checkemail=registered';\n\t\t\t\twp_safe_redirect( $redirect_to );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t$registration_redirect = ! empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '';\n\t\t/**\n\t\t * Filters the registration redirect URL.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string $registration_redirect The redirect destination URL.\n\t\t */\n\t\t$redirect_to = apply_filters( 'registration_redirect', $registration_redirect );\n\t\tlogin_header( __( 'Registration Form' ), '<p class=\"message register\">' . __( 'Register For This Site' ) . '</p>', $errors );\n\t?>\n\t<form name=\"registerform\" id=\"registerform\" action=\"<?php echo esc_url( site_url( 'wp-login.php?action=register', 'login_post' ) ); ?>\" method=\"post\" novalidate=\"novalidate\">\n\t<p>\n\t\t<label for=\"user_login\"><?php _e( 'Username' ); ?><br />\n\t\t<input type=\"text\" name=\"user_login\" id=\"user_login\" class=\"input\" value=\"<?php echo esc_attr( wp_unslash( $user_login ) ); ?>\" size=\"20\" autocapitalize=\"off\" /></label>\n\t</p>\n\t<p>\n\t\t<label for=\"user_email\"><?php _e( 'Email' ); ?><br />\n\t\t<input type=\"email\" name=\"user_email\" id=\"user_email\" class=\"input\" value=\"<?php echo esc_attr( wp_unslash( $user_email ) ); ?>\" size=\"25\" /></label>\n\t</p>\n\t<?php\n\t/**\n\t * Fires following the 'Email' field in the user registration form.\n\t *\n\t * @since 2.1.0\n\t */\n\tdo_action( 'register_form' );\n\t?>\n\t<p id=\"reg_passmail\"><?php _e( 'Registration confirmation will be emailed to you.' ); ?></p>\n\t<br class=\"clear\" />\n\t<input type=\"hidden\" name=\"redirect_to\" value=\"<?php echo esc_attr( $redirect_to ); ?>\" />\n\t<p class=\"submit\"><input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e( 'Register' ); ?>\" /></p>\n\t</form>\n\n\t<p id=\"nav\">\n\t<a href=\"<?php echo esc_url( wp_login_url() ); ?>\"><?php _e( 'Log in' ); ?></a>\n\t<?php echo esc_html( $login_link_separator ); ?>\n\t<a href=\"<?php echo esc_url( wp_lostpassword_url() ); ?>\"><?php _e( 'Lost your password?' ); ?></a>\n\t</p>\n\n\t<?php\n\tlogin_footer( 'user_login' );\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\t\tbreak;\n\n\tcase 'emailconfirm' :\n\t\tif ( isset( $_GET['confirm_action'], $_GET['confirm_key'], $_GET['uid'] ) ) {\n\t\t\t$action_name = sanitize_key( wp_unslash( $_GET['confirm_action'] ) );\n\t\t\t$key         = sanitize_text_field( wp_unslash( $_GET['confirm_key'] ) );\n\t\t\t$uid         = sanitize_text_field( wp_unslash( $_GET['uid'] ) );\n\t\t\t$result      = check_confirm_account_action_key( $action_name, $key, $uid );\n\t\t} else {\n\t\t\t$result = new WP_Error( 'invalid_key', __( 'Invalid key' ) );\n\t\t}\n\n\t\tif ( is_wp_error( $result ) ) {\n\t\t\t/**\n\t\t\t * Fires an action hook when the account action was not confirmed.\n\t\t\t *\n\t\t\t * After running this action hook the page will die.\n\t\t\t *\n\t\t\t * @param WP_Error $result Error object.\n\t\t\t */\n\t\t\tdo_action( 'account_action_failed', $result );\n\n\t\t\twp_die( $result );\n\t\t}\n\n\t\t/**\n\t\t * Fires an action hook when the account action has been confirmed by the user.\n\t\t *\n\t\t * Using this you can assume the user has agreed to perform the action by\n\t\t * clicking on the link in the confirmation email.\n\t\t *\n\t\t * After firing this action hook the page will redirect to wp-login a callback\n\t\t * redirects or exits first.\n\t\t *\n\t\t * @param array $result {\n\t\t *     Data about the action which was confirmed.\n\t\t *\n\t\t *     @type string $action Name of the action that was confirmed.\n\t\t *     @type string $email  Email of the user who confirmed the action.\n\t\t * }\n\t\t */\n\t\tdo_action( 'account_action_confirmed', $result );\n\n\t\t$message = '<p class=\"message\">' . __( 'Action has been confirmed.' ) . '</p>';\n\t\tlogin_header( '', $message );\n\t\tlogin_footer();\n\t\texit;\n\n\tcase 'login':\n\tdefault:\n\t\t$secure_cookie   = '';\n\t\t$customize_login = isset( $_REQUEST['customize-login'] );\n\t\tif ( $customize_login ) {\n\t\t\twp_enqueue_script( 'customize-base' );\n\t\t}\n\n\t\t// If the user wants ssl but the session is not ssl, force a secure cookie.\n\t\tif ( ! empty( $_POST['log'] ) && ! force_ssl_admin() ) {\n\t\t\t$user_name = sanitize_user( $_POST['log'] );\n\t\t\t$user      = get_user_by( 'login', $user_name );\n\n\t\t\tif ( ! $user && strpos( $user_name, '@' ) ) {\n\t\t\t\t$user = get_user_by( 'email', $user_name );\n\t\t\t}\n\n\t\t\tif ( $user ) {\n\t\t\t\tif ( get_user_option( 'use_ssl', $user->ID ) ) {\n\t\t\t\t\t$secure_cookie = true;\n\t\t\t\t\tforce_ssl_admin( true );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $_REQUEST['redirect_to'] ) ) {\n\t\t\t$redirect_to = $_REQUEST['redirect_to'];\n\t\t\t// Redirect to https if user wants ssl\n\t\t\tif ( $secure_cookie && false !== strpos( $redirect_to, 'wp-admin' ) ) {\n\t\t\t\t$redirect_to = preg_replace( '|^http://|', 'https://', $redirect_to );\n\t\t\t}\n\t\t} else {\n\t\t\t$redirect_to = admin_url();\n\t\t}\n\n\t\t$reauth = empty( $_REQUEST['reauth'] ) ? false : true;\n\n\t\t$user = wp_signon( array(), $secure_cookie );\n\n\t\tif ( empty( $_COOKIE[ LOGGED_IN_COOKIE ] ) ) {\n\t\t\tif ( headers_sent() ) {\n\t\t\t\t/* translators: 1: Browser cookie documentation URL, 2: Support forums URL */\n\t\t\t\t$user = new WP_Error(\n\t\t\t\t\t'test_cookie', sprintf(\n\t\t\t\t\t\t__( '<strong>ERROR</strong>: Cookies are blocked due to unexpected output. For help, please see <a href=\"%1$s\">this documentation</a> or try the <a href=\"%2$s\">support forums</a>.' ),\n\t\t\t\t\t\t__( 'https://codex.wordpress.org/Cookies' ), __( 'https://wordpress.org/support/' )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} elseif ( isset( $_POST['testcookie'] ) && empty( $_COOKIE[ TEST_COOKIE ] ) ) {\n\t\t\t\t// If cookies are disabled we can't log in even with a valid user+pass\n\t\t\t\t/* translators: %s: Browser cookie documentation URL */\n\t\t\t\t$user = new WP_Error(\n\t\t\t\t\t'test_cookie', sprintf(\n\t\t\t\t\t\t__( '<strong>ERROR</strong>: Cookies are blocked or not supported by your browser. You must <a href=\"%s\">enable cookies</a> to use WordPress.' ),\n\t\t\t\t\t\t__( 'https://codex.wordpress.org/Cookies' )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$requested_redirect_to = isset( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '';\n\t\t/**\n\t\t * Filters the login redirect URL.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string           $redirect_to           The redirect destination URL.\n\t\t * @param string           $requested_redirect_to The requested redirect destination URL passed as a parameter.\n\t\t * @param WP_User|WP_Error $user                  WP_User object if login was successful, WP_Error object otherwise.\n\t\t */\n\t\t$redirect_to = apply_filters( 'login_redirect', $redirect_to, $requested_redirect_to, $user );\n\n\t\tif ( ! is_wp_error( $user ) && ! $reauth ) {\n\t\t\tif ( $interim_login ) {\n\t\t\t\t$message       = '<p class=\"message\">' . __( 'You have logged in successfully.' ) . '</p>';\n\t\t\t\t$interim_login = 'success';\n\t\t\t\tlogin_header( '', $message );\n\t\t\t?>\n\t\t\t\t</div>\n\t\t\t\t<?php\n\t\t\t\t/** This action is documented in wp-login.php */\n\t\t\t\tdo_action( 'login_footer' );\n\t\t\t?>\n\t\t\t\t<?php if ( $customize_login ) : ?>\n\t\t\t\t<script type=\"text/javascript\">setTimeout( function(){ new wp.customize.Messenger({ url: '<?php echo wp_customize_url(); ?>', channel: 'login' }).send('login') }, 1000 );</script>\n\t\t\t<?php endif; ?>\n\t\t\t\t</body></html>\n\t<?php\n\t  exit;\n\t\t\t}\n\n\t\t\tif ( ( empty( $redirect_to ) || $redirect_to == 'wp-admin/' || $redirect_to == admin_url() ) ) {\n\t\t\t\t// If the user doesn't belong to a blog, send them to user admin. If the user can't edit posts, send them to their profile.\n\t\t\t\tif ( is_multisite() && ! get_active_blog_for_user( $user->ID ) && ! is_super_admin( $user->ID ) ) {\n\t\t\t\t\t$redirect_to = user_admin_url();\n\t\t\t\t} elseif ( is_multisite() && ! $user->has_cap( 'read' ) ) {\n\t\t\t\t\t$redirect_to = get_dashboard_url( $user->ID );\n\t\t\t\t} elseif ( ! $user->has_cap( 'edit_posts' ) ) {\n\t\t\t\t\t$redirect_to = $user->has_cap( 'read' ) ? admin_url( 'profile.php' ) : home_url();\n\t\t\t\t}\n\n\t\t\t\twp_redirect( $redirect_to );\n\t\t\t\texit();\n\t\t\t}\n\t\t\twp_safe_redirect( $redirect_to );\n\t\t\texit();\n\t\t}\n\n\t\t$errors = $user;\n\t\t// Clear errors if loggedout is set.\n\t\tif ( ! empty( $_GET['loggedout'] ) || $reauth ) {\n\t\t\t$errors = new WP_Error();\n\t\t}\n\n\t\tif ( $interim_login ) {\n\t\t\tif ( ! $errors->has_errors() ) {\n\t\t\t\t$errors->add( 'expired', __( 'Your session has expired. Please log in to continue where you left off.' ), 'message' );\n\t\t\t}\n\t\t} else {\n\t\t\t// Some parts of this script use the main login form to display a message\n\t\t\tif ( isset( $_GET['loggedout'] ) && true == $_GET['loggedout'] ) {\n\t\t\t\t$errors->add( 'loggedout', __( 'You are now logged out.' ), 'message' );\n\t\t\t} elseif ( isset( $_GET['registration'] ) && 'disabled' == $_GET['registration'] ) {\n\t\t\t\t$errors->add( 'registerdisabled', __( 'User registration is currently not allowed.' ) );\n\t\t\t} elseif ( isset( $_GET['checkemail'] ) && 'confirm' == $_GET['checkemail'] ) {\n\t\t\t\t$errors->add( 'confirm', __( 'Check your email for the confirmation link.' ), 'message' );\n\t\t\t} elseif ( isset( $_GET['checkemail'] ) && 'newpass' == $_GET['checkemail'] ) {\n\t\t\t\t$errors->add( 'newpass', __( 'Check your email for your new password.' ), 'message' );\n\t\t\t} elseif ( isset( $_GET['checkemail'] ) && 'registered' == $_GET['checkemail'] ) {\n\t\t\t\t$errors->add( 'registered', __( 'Registration complete. Please check your email.' ), 'message' );\n\t\t\t} elseif ( strpos( $redirect_to, 'about.php?updated' ) ) {\n\t\t\t\t$errors->add( 'updated', __( '<strong>You have successfully updated WordPress!</strong> Please log back in to see what&#8217;s new.' ), 'message' );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the login page errors.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param object $errors      WP Error object.\n\t\t * @param string $redirect_to Redirect destination URL.\n\t\t */\n\t\t$errors = apply_filters( 'wp_login_errors', $errors, $redirect_to );\n\n\t\t// Clear any stale cookies.\n\t\tif ( $reauth ) {\n\t\t\twp_clear_auth_cookie();\n\t\t}\n\n\t\tlogin_header( __( 'Log In' ), '', $errors );\n\n\t\tif ( isset( $_POST['log'] ) ) {\n\t\t\t$user_login = ( 'incorrect_password' == $errors->get_error_code() || 'empty_password' == $errors->get_error_code() ) ? esc_attr( wp_unslash( $_POST['log'] ) ) : '';\n\t\t}\n\t\t$rememberme = ! empty( $_POST['rememberme'] );\n\n\t\tif ( $errors->has_errors() ) {\n\t\t\t$aria_describedby_error = ' aria-describedby=\"login_error\"';\n\t\t} else {\n\t\t\t$aria_describedby_error = '';\n\t\t}\n\t?>\n\n\t<form name=\"loginform\" id=\"loginform\" action=\"<?php echo esc_url( site_url( 'wp-login.php', 'login_post' ) ); ?>\" method=\"post\">\n\t<p>\n\t\t<label for=\"user_login\"><?php _e( 'Username or Email Address' ); ?><br />\n\t\t<input type=\"text\" name=\"log\" id=\"user_login\"<?php echo $aria_describedby_error; ?> class=\"input\" value=\"<?php echo esc_attr( $user_login ); ?>\" size=\"20\" autocapitalize=\"off\" /></label>\n\t</p>\n\t<p>\n\t\t<label for=\"user_pass\"><?php _e( 'Password' ); ?><br />\n\t\t<input type=\"password\" name=\"pwd\" id=\"user_pass\"<?php echo $aria_describedby_error; ?> class=\"input\" value=\"\" size=\"20\" /></label>\n\t</p>\n\t<?php\n\t/**\n\t * Fires following the 'Password' field in the login form.\n\t *\n\t * @since 2.1.0\n\t */\n\tdo_action( 'login_form' );\n\t?>\n\t<p class=\"forgetmenot\"><label for=\"rememberme\"><input name=\"rememberme\" type=\"checkbox\" id=\"rememberme\" value=\"forever\" <?php checked( $rememberme ); ?> /> <?php esc_html_e( 'Remember Me' ); ?></label></p>\n\t<p class=\"submit\">\n\t\t<input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e( 'Log In' ); ?>\" />\n\t<?php\tif ( $interim_login ) { ?>\n\t\t<input type=\"hidden\" name=\"interim-login\" value=\"1\" />\n\t<?php\t} else { ?>\n\t\t<input type=\"hidden\" name=\"redirect_to\" value=\"<?php echo esc_attr( $redirect_to ); ?>\" />\n\t<?php } ?>\n\t<?php if ( $customize_login ) : ?>\n\t\t<input type=\"hidden\" name=\"customize-login\" value=\"1\" />\n\t<?php endif; ?>\n\t\t<input type=\"hidden\" name=\"testcookie\" value=\"1\" />\n\t</p>\n\t</form>\n\n\t<?php if ( ! $interim_login ) { ?>\n\t<p id=\"nav\">\n\t<?php\n\tif ( ! isset( $_GET['checkemail'] ) || ! in_array( $_GET['checkemail'], array( 'confirm', 'newpass' ) ) ) :\n\t\tif ( get_option( 'users_can_register' ) ) :\n\t\t\t$registration_url = sprintf( '<a href=\"%s\">%s</a>', esc_url( wp_registration_url() ), __( 'Register' ) );\n\n\t\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\t\techo apply_filters( 'register', $registration_url );\n\n\t\t\techo esc_html( $login_link_separator );\n\t\tendif;\n\t\t?>\n\t\t<a href=\"<?php echo esc_url( wp_lostpassword_url() ); ?>\"><?php _e( 'Lost your password?' ); ?></a>\n\t<?php endif; ?>\n\t</p>\n\t<?php } ?>\n\n\t<script type=\"text/javascript\">\n\tfunction wp_attempt_focus(){\n\tsetTimeout( function(){ try{\n\t<?php if ( $user_login ) { ?>\n\td = document.getElementById('user_pass');\n\td.value = '';\n\t<?php } else { ?>\n\td = document.getElementById('user_login');\n\t<?php if ( 'invalid_username' == $errors->get_error_code() ) { ?>\n\tif( d.value != '' )\n\td.value = '';\n\t<?php\n}\n}\n?>\n\td.focus();\n\td.select();\n\t} catch(e){}\n\t}, 200);\n\t}\n\n\t<?php\n\t/**\n\t * Filters whether to print the call to `wp_attempt_focus()` on the login screen.\n\t *\n\t * @since 4.8.0\n\t *\n\t * @param bool $print Whether to print the function call. Default true.\n\t */\n\tif ( apply_filters( 'enable_login_autofocus', true ) && ! $error ) {\n?>\n\twp_attempt_focus();\n\t<?php } ?>\n\tif(typeof wpOnload=='function')wpOnload();\n\t<?php if ( $interim_login ) { ?>\n\t(function(){\n\ttry {\n\t\tvar i, links = document.getElementsByTagName('a');\n\t\tfor ( i in links ) {\n\t\t\tif ( links[i].href )\n\t\t\t\tlinks[i].target = '_blank';\n\t\t}\n\t} catch(e){}\n\t}());\n\t<?php } ?>\n\t</script>\n\n\t<?php\n\tlogin_footer();\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\t\tbreak;\n} // end action switch\n"], "filenames": ["wp-includes/version.php", "wp-login.php"], "buggy_code_start_loc": [7, 17], "buggy_code_end_loc": [8, 21], "fixing_code_start_loc": [7, 17], "fixing_code_end_loc": [8, 21], "type": "CWE-601", "message": "Before WordPress 4.9.5, the redirection URL for the login page was not validated or sanitized if forced to use HTTPS.", "other": {"cve": {"id": "CVE-2018-10100", "sourceIdentifier": "cve@mitre.org", "published": "2018-04-16T09:58:09.477", "lastModified": "2018-05-18T13:49:54.003", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Before WordPress 4.9.5, the redirection URL for the login page was not validated or sanitized if forced to use HTTPS."}, {"lang": "es", "value": "En versiones anteriores a la 4.9.5 de WordPress, la URL de redirecci\u00f3n para la p\u00e1gina de inicio de sesi\u00f3n no se valid\u00f3 o sane\u00f3 si se forz\u00f3 el uso de HTTPS."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.9.5", "matchCriteriaId": "8F03A691-0741-487D-A951-523B04170F4E"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.securitytracker.com/id/1040836", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.9.5", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://core.trac.wordpress.org/changeset/42892", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/14bc2c0a6fde0da04b47130707e01df850eedc7e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/04/msg00031.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://wordpress.org/news/2018/04/wordpress-4-9-5-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/9054", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2018/dsa-4193", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/14bc2c0a6fde0da04b47130707e01df850eedc7e"}}