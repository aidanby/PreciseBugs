{"buggy_code": ["package io.onedev.server.model.support.inputspec;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.annotation.Nullable;\r\n\r\nimport org.apache.commons.lang.SerializationUtils;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.unbescape.java.JavaEscape;\r\n\r\nimport com.google.common.collect.Lists;\r\n\r\nimport io.onedev.server.model.support.inputspec.showcondition.ShowCondition;\r\nimport io.onedev.server.util.GroovyUtils;\r\nimport io.onedev.server.web.editable.EditableUtils;\r\nimport io.onedev.server.web.editable.annotation.Editable;\r\n\r\n@Editable\r\npublic abstract class InputSpec implements Serializable {\r\n\t\r\n\tprivate static final long serialVersionUID = 1L;\r\n\t\r\n\tprivate static final Logger logger = LoggerFactory.getLogger(InputSpec.class);\r\n\t\r\n\tpublic static final String BOOLEAN = \"Checkbox\";\r\n\r\n\tpublic static final String TEXT = \"Text\";\r\n\t\r\n\tpublic static final String DATE = \"Date\";\r\n\t\r\n\tpublic static final String SECRET = \"Secret\";\r\n\t\r\n\tpublic static final String NUMBER = \"Number\";\r\n\t\r\n\tpublic static final String COMMIT = \"Commit\";\r\n\t\r\n\tpublic static final String ENUMERATION = \"Enumeration\";\r\n\t\r\n\tpublic static final String USER = \"User\";\r\n\t\r\n\tpublic static final String GROUP = \"Group\";\r\n\t\r\n\tpublic static final String ISSUE = \"Issue\";\r\n\t\r\n\tpublic static final String BUILD = \"Build\";\r\n\r\n\tpublic static final String PULLREQUEST = \"Pull request\";\r\n\t\r\n\tprivate String name;\r\n\r\n\tprivate String description;\r\n\r\n\tprivate boolean allowMultiple;\r\n\t\r\n\tprivate boolean allowEmpty;\r\n\t\r\n\tprivate ShowCondition showCondition;\r\n\t\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic String getDescription() {\r\n\t\treturn description;\r\n\t}\r\n\r\n\tpublic void setDescription(String description) {\r\n\t\tthis.description = description;\r\n\t}\r\n\r\n\tpublic boolean isAllowMultiple() {\r\n\t\treturn allowMultiple;\r\n\t}\r\n\r\n\tpublic void setAllowMultiple(boolean allowMultiple) {\r\n\t\tthis.allowMultiple = allowMultiple;\r\n\t}\r\n\r\n\tpublic ShowCondition getShowCondition() {\r\n\t\treturn showCondition;\r\n\t}\r\n\r\n\tpublic void setShowCondition(ShowCondition showCondition) {\r\n\t\tthis.showCondition = showCondition;\r\n\t}\r\n\t\r\n\tpublic boolean isAllowEmpty() {\r\n\t\treturn allowEmpty;\r\n\t}\r\n\r\n\tpublic void setAllowEmpty(boolean allowEmpty) {\r\n\t\tthis.allowEmpty = allowEmpty;\r\n\t}\r\n\t\r\n\tpublic List<String> getPossibleValues() {\r\n\t\treturn Lists.newArrayList();\r\n\t}\r\n\r\n\tprotected String escape(String string) {\r\n\t\tString escaped = JavaEscape.escapeJava(string);\r\n\t\t// escape $ character since it has special meaning in groovy string\r\n\t\tescaped = escaped.replace(\"$\", \"\\\\$\");\r\n\r\n\t\treturn escaped;\r\n\t}\r\n\t\r\n\tpublic abstract String getPropertyDef(Map<String, Integer> indexes);\r\n\t\r\n\tprotected String getLiteral(byte[] bytes) {\r\n\t\tStringBuffer buffer = new StringBuffer(\"[\");\r\n\t\tfor (byte eachByte: bytes) {\r\n\t\t\tbuffer.append(String.format(\"%d\", eachByte)).append(\",\");\r\n\t\t}\r\n\t\tbuffer.append(\"] as byte[]\");\r\n\t\treturn buffer.toString();\r\n\t}\r\n\r\n\tpublic void appendField(StringBuffer buffer, int index, String type) {\r\n\t\tbuffer.append(\"    private Optional<\" + type + \"> input\" + index + \";\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t}\r\n\t\r\n\tpublic void appendChoiceProvider(StringBuffer buffer, int index, String annotation) {\r\n\t\tbuffer.append(\"    \" + annotation + \"(\\\"getInput\" + index + \"Choices\\\")\\n\");\t\t\r\n\t}\r\n\t\r\n\tpublic void appendCommonAnnotations(StringBuffer buffer, int index) {\r\n\t\tif (description != null) {\r\n\t\t\tbuffer.append(\"    @Editable(name=\\\"\" + escape(name) + \"\\\", description=\\\"\" + \r\n\t\t\t\t\tescape(description) + \"\\\", order=\" + index + \")\\n\");\r\n\t\t} else {\r\n\t\t\tbuffer.append(\"    @Editable(name=\\\"\" + escape(name) + \r\n\t\t\t\t\t\"\\\", order=\" + index + \")\\n\");\r\n\t\t}\r\n\t\tif (showCondition != null) \r\n\t\t\tbuffer.append(\"    @ShowCondition(\\\"isInput\" + index + \"Visible\\\")\\n\");\r\n\t}\r\n\r\n\tprivate void wrapWithChildContext(StringBuffer buffer, int index, String statement) {\r\n\t\tbuffer.append(\"            ComponentContext context = ComponentContext.get();\\n\");\r\n\t\tbuffer.append(\"            if (context != null) {\\n\");\r\n\t\tbuffer.append(\"                ComponentContext childContext = context.getChildContext(\\\"input\" + index + \"\\\");\\n\");\r\n\t\tbuffer.append(\"                if (childContext != null) {\\n\");\r\n\t\tbuffer.append(\"                    ComponentContext.push(childContext);\\n\");\r\n\t\tbuffer.append(\"                    try {\\n\");\r\n\t\tbuffer.append(\"                        \" + statement + \"\\n\");\r\n\t\tbuffer.append(\"                    } finally {\\n\");\r\n\t\tbuffer.append(\"                        ComponentContext.pop();\\n\");\r\n\t\tbuffer.append(\"                    }\\n\");\r\n\t\tbuffer.append(\"                } else {\\n\");\r\n\t\tbuffer.append(\"                    \" + statement + \"\\n\");\r\n\t\tbuffer.append(\"                }\\n\");\r\n\t\tbuffer.append(\"            } else {\\n\");\r\n\t\tbuffer.append(\"                \" + statement + \"\\n\");\r\n\t\tbuffer.append(\"            }\\n\");\r\n\t}\r\n\t\r\n\tpublic void appendMethods(StringBuffer buffer, int index, String type, \r\n\t\t\t@Nullable Serializable choiceProvider, @Nullable Serializable defaultValueProvider) {\r\n\t\tString literalBytes = getLiteral(SerializationUtils.serialize(defaultValueProvider));\r\n\t\tbuffer.append(\"    public \" + type + \" getInput\" + index + \"() {\\n\");\r\n\t\tbuffer.append(\"        if (input\" + index + \"!=null) {\\n\");\r\n\t\tbuffer.append(\"            return input\" + index + \".orNull();\\n\");\r\n\t\tbuffer.append(\"        } else {\\n\");\r\n\t\tif (defaultValueProvider != null) {\r\n\t\t\twrapWithChildContext(buffer, index, \"return SerializationUtils.deserialize(\" + literalBytes + \").getDefaultValue();\");\r\n\t\t} else {\r\n\t\t\tbuffer.append(\"        return null;\\n\");\r\n\t\t}\r\n\t\tbuffer.append(\"        }\\n\");\r\n\t\tbuffer.append(\"    }\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t\t\r\n\t\tbuffer.append(\"    public void setInput\" + index + \"(\" + type + \" value) {\\n\");\r\n\t\tbuffer.append(\"        this.input\" + index + \"=Optional.fromNullable(value);\\n\");\r\n\t\tbuffer.append(\"    }\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t\t\r\n\t\tif (showCondition != null) {\r\n\t\t\tbuffer.append(\"    private static boolean isInput\" + index + \"Visible() {\\n\");\r\n\t\t\tliteralBytes = getLiteral(SerializationUtils.serialize(showCondition));\r\n\t\t\tbuffer.append(\"        return SerializationUtils.deserialize(\" + literalBytes + \").isVisible();\\n\");\r\n\t\t\tbuffer.append(\"    }\\n\");\r\n\t\t\tbuffer.append(\"\\n\");\r\n\t\t}\r\n \r\n\t\tif (choiceProvider != null) {\r\n\t\t\tbuffer.append(\"    private static List getInput\" + index + \"Choices() {\\n\");\r\n\t\t\tliteralBytes = getLiteral(SerializationUtils.serialize(choiceProvider));\r\n\t\t\tif (choiceProvider instanceof io.onedev.server.model.support.inputspec.choiceinput.choiceprovider.ChoiceProvider) {\r\n\t\t\t\tbuffer.append(\"        return new ArrayList(SerializationUtils.deserialize(\" + literalBytes + \").getChoices(false).keySet());\\n\");\r\n\t\t\t} else {\r\n\t\t\t\tbuffer.append(\"        return SerializationUtils.deserialize(\" + literalBytes + \").getChoices(false);\\n\");\r\n\t\t\t}\r\n\t\t\tbuffer.append(\"    }\\n\");\r\n\t\t\tbuffer.append(\"\\n\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static Class<?> defineClass(String className, String description, Collection<? extends InputSpec> inputs) {\r\n\t\tStringBuffer buffer = new StringBuffer();\r\n\t\tbuffer.append(\"import org.apache.commons.lang3.SerializationUtils;\\n\");\r\n\t\tbuffer.append(\"import com.google.common.base.Optional;\\n\");\r\n\t\tbuffer.append(\"import io.onedev.server.web.editable.annotation.*;\\n\");\r\n\t\tbuffer.append(\"import io.onedev.server.util.validation.annotation.*;\\n\");\r\n\t\tbuffer.append(\"import io.onedev.util.*;\\n\");\r\n\t\tbuffer.append(\"import io.onedev.server.util.*;\\n\");\r\n\t\tbuffer.append(\"import io.onedev.server.util.facade.*;\\n\");\r\n\t\tbuffer.append(\"import java.util.*;\\n\");\r\n\t\tbuffer.append(\"import javax.validation.constraints.*;\\n\");\r\n\t\tbuffer.append(\"import org.hibernate.validator.constraints.*;\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t\tbuffer.append(\"@Editable(name=\").append(\"\\\"\").append(description).append(\"\\\")\\n\");\r\n\t\tbuffer.append(\"class \" + className + \" implements java.io.Serializable {\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t\tbuffer.append(\"    private static final long serialVersionUID = 1L;\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t\tMap<String, Integer> indexes = new HashMap<>();\r\n\t\tint index = 1;\r\n\t\tfor (InputSpec input: inputs)\r\n\t\t\tindexes.put(input.getName(), index++);\r\n\t\tfor (InputSpec input: inputs)\r\n\t\t\tbuffer.append(input.getPropertyDef(indexes));\r\n\r\n\t\tbuffer.append(\"}\\n\");\r\n\t\tbuffer.append(\"return \" + className + \";\\n\");\r\n\t\t\r\n\t\tlogger.trace(\"Class definition script:\\n\" + buffer.toString());\r\n\t\t\r\n\t\treturn (Class<?>) GroovyUtils.evalScript(buffer.toString(), new HashMap<>());\r\n\t}\r\n\r\n\tpublic abstract List<String> convertToStrings(@Nullable Object object);\r\n\r\n\t/**\r\n\t * Convert list of strings to object\r\n\t * \r\n\t * @param strings\r\n\t * \t\t\tlist of strings\r\n\t * @return\r\n\t * \t\t\tconverted object\r\n\t */\r\n\t@Nullable\r\n\tpublic abstract Object convertToObject(List<String> strings);\r\n\t\r\n\tpublic long getOrdinal(String fieldValue) {\r\n\t\treturn -1;\r\n\t}\r\n\t\r\n\tpublic String getType() {\r\n\t\treturn EditableUtils.getDisplayName(getClass());\t\t\r\n\t}\r\n\r\n\tpublic boolean checkListElements(Object value, Class<?> elementClass) {\r\n\t\tif (value instanceof List) {\r\n\t\t\tfor (Object element: (List<?>)value) {\r\n\t\t\t\tif (element == null || element.getClass() != elementClass)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\t\r\n}\r\n", "package io.onedev.server.model.support.inputspec.textinput;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.validation.ValidationException;\n\nimport com.google.common.collect.Lists;\n\nimport io.onedev.server.model.support.inputspec.InputSpec;\nimport io.onedev.server.model.support.inputspec.textinput.defaultvalueprovider.DefaultValueProvider;\n\npublic class TextInput {\n\n\tpublic static String getPropertyDef(InputSpec inputSpec, Map<String, Integer> indexes, \n\t\t\tString pattern, DefaultValueProvider defaultValueProvider) {\n\t\tint index = indexes.get(inputSpec.getName());\n\t\tStringBuffer buffer = new StringBuffer();\n\t\tinputSpec.appendField(buffer, index, \"String\");\n\t\tinputSpec.appendCommonAnnotations(buffer, index);\n\t\tif (!inputSpec.isAllowEmpty())\n\t\t\tbuffer.append(\"    @NotEmpty\\n\");\n\t\tif (pattern != null)\n\t\t\tbuffer.append(\"    @Pattern(regexp=\\\"\" + pattern + \"\\\", message=\\\"Should match regular expression: \" + pattern + \"\\\")\\n\");\n\t\tinputSpec.appendMethods(buffer, index, \"String\", null, defaultValueProvider);\n\t\t\n\t\treturn buffer.toString();\n\t}\n\n\tpublic static Object convertToObject(List<String> strings) {\n\t\tif (strings.size() == 0)\n\t\t\treturn null;\n\t\telse if (strings.size() == 1)\n\t\t\treturn strings.iterator().next();\n\t\telse\n\t\t\tthrow new ValidationException(\"Not eligible for multi-value\");\n\t}\n\n\tpublic static List<String> convertToStrings(Object value) {\n\t\tif (value instanceof String)\n\t\t\treturn Lists.newArrayList((String)value);\n\t\telse\n\t\t\treturn new ArrayList<>();\n\t}\n\t\n}\n", "package io.onedev.server.product;\r\n\r\npublic class Test {\r\n\r\n\t@org.junit.Test\r\n\tpublic void test() {\r\n\t}\t\t\r\n\t\r\n}"], "fixing_code": ["package io.onedev.server.model.support.inputspec;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.annotation.Nullable;\r\n\r\nimport org.apache.commons.lang.SerializationUtils;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.unbescape.java.JavaEscape;\r\n\r\nimport com.google.common.collect.Lists;\r\n\r\nimport io.onedev.server.model.support.inputspec.showcondition.ShowCondition;\r\nimport io.onedev.server.util.GroovyUtils;\r\nimport io.onedev.server.web.editable.EditableUtils;\r\nimport io.onedev.server.web.editable.annotation.Editable;\r\n\r\n@Editable\r\npublic abstract class InputSpec implements Serializable {\r\n\t\r\n\tprivate static final long serialVersionUID = 1L;\r\n\t\r\n\tprivate static final Logger logger = LoggerFactory.getLogger(InputSpec.class);\r\n\t\r\n\tpublic static final String BOOLEAN = \"Checkbox\";\r\n\r\n\tpublic static final String TEXT = \"Text\";\r\n\t\r\n\tpublic static final String DATE = \"Date\";\r\n\t\r\n\tpublic static final String SECRET = \"Secret\";\r\n\t\r\n\tpublic static final String NUMBER = \"Number\";\r\n\t\r\n\tpublic static final String COMMIT = \"Commit\";\r\n\t\r\n\tpublic static final String ENUMERATION = \"Enumeration\";\r\n\t\r\n\tpublic static final String USER = \"User\";\r\n\t\r\n\tpublic static final String GROUP = \"Group\";\r\n\t\r\n\tpublic static final String ISSUE = \"Issue\";\r\n\t\r\n\tpublic static final String BUILD = \"Build\";\r\n\r\n\tpublic static final String PULLREQUEST = \"Pull request\";\r\n\t\r\n\tprivate String name;\r\n\r\n\tprivate String description;\r\n\r\n\tprivate boolean allowMultiple;\r\n\t\r\n\tprivate boolean allowEmpty;\r\n\t\r\n\tprivate ShowCondition showCondition;\r\n\t\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic String getDescription() {\r\n\t\treturn description;\r\n\t}\r\n\r\n\tpublic void setDescription(String description) {\r\n\t\tthis.description = description;\r\n\t}\r\n\r\n\tpublic boolean isAllowMultiple() {\r\n\t\treturn allowMultiple;\r\n\t}\r\n\r\n\tpublic void setAllowMultiple(boolean allowMultiple) {\r\n\t\tthis.allowMultiple = allowMultiple;\r\n\t}\r\n\r\n\tpublic ShowCondition getShowCondition() {\r\n\t\treturn showCondition;\r\n\t}\r\n\r\n\tpublic void setShowCondition(ShowCondition showCondition) {\r\n\t\tthis.showCondition = showCondition;\r\n\t}\r\n\t\r\n\tpublic boolean isAllowEmpty() {\r\n\t\treturn allowEmpty;\r\n\t}\r\n\r\n\tpublic void setAllowEmpty(boolean allowEmpty) {\r\n\t\tthis.allowEmpty = allowEmpty;\r\n\t}\r\n\t\r\n\tpublic List<String> getPossibleValues() {\r\n\t\treturn Lists.newArrayList();\r\n\t}\r\n\r\n\tpublic static String escape(String string) {\r\n\t\tString escaped = JavaEscape.escapeJava(string);\r\n\t\t// escape $ character since it has special meaning in groovy string\r\n\t\tescaped = escaped.replace(\"$\", \"\\\\$\");\r\n\r\n\t\treturn escaped;\r\n\t}\r\n\t\r\n\tpublic abstract String getPropertyDef(Map<String, Integer> indexes);\r\n\t\r\n\tprotected String getLiteral(byte[] bytes) {\r\n\t\tStringBuffer buffer = new StringBuffer(\"[\");\r\n\t\tfor (byte eachByte: bytes) {\r\n\t\t\tbuffer.append(String.format(\"%d\", eachByte)).append(\",\");\r\n\t\t}\r\n\t\tbuffer.append(\"] as byte[]\");\r\n\t\treturn buffer.toString();\r\n\t}\r\n\r\n\tpublic void appendField(StringBuffer buffer, int index, String type) {\r\n\t\tbuffer.append(\"    private Optional<\" + type + \"> input\" + index + \";\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t}\r\n\t\r\n\tpublic void appendChoiceProvider(StringBuffer buffer, int index, String annotation) {\r\n\t\tbuffer.append(\"    \" + annotation + \"(\\\"getInput\" + index + \"Choices\\\")\\n\");\t\t\r\n\t}\r\n\t\r\n\tpublic void appendCommonAnnotations(StringBuffer buffer, int index) {\r\n\t\tif (description != null) {\r\n\t\t\tbuffer.append(\"    @Editable(name=\\\"\" + escape(name) + \"\\\", description=\\\"\" + \r\n\t\t\t\t\tescape(description) + \"\\\", order=\" + index + \")\\n\");\r\n\t\t} else {\r\n\t\t\tbuffer.append(\"    @Editable(name=\\\"\" + escape(name) + \r\n\t\t\t\t\t\"\\\", order=\" + index + \")\\n\");\r\n\t\t}\r\n\t\tif (showCondition != null) \r\n\t\t\tbuffer.append(\"    @ShowCondition(\\\"isInput\" + index + \"Visible\\\")\\n\");\r\n\t}\r\n\r\n\tprivate void wrapWithChildContext(StringBuffer buffer, int index, String statement) {\r\n\t\tbuffer.append(\"            ComponentContext context = ComponentContext.get();\\n\");\r\n\t\tbuffer.append(\"            if (context != null) {\\n\");\r\n\t\tbuffer.append(\"                ComponentContext childContext = context.getChildContext(\\\"input\" + index + \"\\\");\\n\");\r\n\t\tbuffer.append(\"                if (childContext != null) {\\n\");\r\n\t\tbuffer.append(\"                    ComponentContext.push(childContext);\\n\");\r\n\t\tbuffer.append(\"                    try {\\n\");\r\n\t\tbuffer.append(\"                        \" + statement + \"\\n\");\r\n\t\tbuffer.append(\"                    } finally {\\n\");\r\n\t\tbuffer.append(\"                        ComponentContext.pop();\\n\");\r\n\t\tbuffer.append(\"                    }\\n\");\r\n\t\tbuffer.append(\"                } else {\\n\");\r\n\t\tbuffer.append(\"                    \" + statement + \"\\n\");\r\n\t\tbuffer.append(\"                }\\n\");\r\n\t\tbuffer.append(\"            } else {\\n\");\r\n\t\tbuffer.append(\"                \" + statement + \"\\n\");\r\n\t\tbuffer.append(\"            }\\n\");\r\n\t}\r\n\t\r\n\tpublic void appendMethods(StringBuffer buffer, int index, String type, \r\n\t\t\t@Nullable Serializable choiceProvider, @Nullable Serializable defaultValueProvider) {\r\n\t\tString literalBytes = getLiteral(SerializationUtils.serialize(defaultValueProvider));\r\n\t\tbuffer.append(\"    public \" + type + \" getInput\" + index + \"() {\\n\");\r\n\t\tbuffer.append(\"        if (input\" + index + \"!=null) {\\n\");\r\n\t\tbuffer.append(\"            return input\" + index + \".orNull();\\n\");\r\n\t\tbuffer.append(\"        } else {\\n\");\r\n\t\tif (defaultValueProvider != null) {\r\n\t\t\twrapWithChildContext(buffer, index, \"return SerializationUtils.deserialize(\" + literalBytes + \").getDefaultValue();\");\r\n\t\t} else {\r\n\t\t\tbuffer.append(\"        return null;\\n\");\r\n\t\t}\r\n\t\tbuffer.append(\"        }\\n\");\r\n\t\tbuffer.append(\"    }\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t\t\r\n\t\tbuffer.append(\"    public void setInput\" + index + \"(\" + type + \" value) {\\n\");\r\n\t\tbuffer.append(\"        this.input\" + index + \"=Optional.fromNullable(value);\\n\");\r\n\t\tbuffer.append(\"    }\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t\t\r\n\t\tif (showCondition != null) {\r\n\t\t\tbuffer.append(\"    private static boolean isInput\" + index + \"Visible() {\\n\");\r\n\t\t\tliteralBytes = getLiteral(SerializationUtils.serialize(showCondition));\r\n\t\t\tbuffer.append(\"        return SerializationUtils.deserialize(\" + literalBytes + \").isVisible();\\n\");\r\n\t\t\tbuffer.append(\"    }\\n\");\r\n\t\t\tbuffer.append(\"\\n\");\r\n\t\t}\r\n \r\n\t\tif (choiceProvider != null) {\r\n\t\t\tbuffer.append(\"    private static List getInput\" + index + \"Choices() {\\n\");\r\n\t\t\tliteralBytes = getLiteral(SerializationUtils.serialize(choiceProvider));\r\n\t\t\tif (choiceProvider instanceof io.onedev.server.model.support.inputspec.choiceinput.choiceprovider.ChoiceProvider) {\r\n\t\t\t\tbuffer.append(\"        return new ArrayList(SerializationUtils.deserialize(\" + literalBytes + \").getChoices(false).keySet());\\n\");\r\n\t\t\t} else {\r\n\t\t\t\tbuffer.append(\"        return SerializationUtils.deserialize(\" + literalBytes + \").getChoices(false);\\n\");\r\n\t\t\t}\r\n\t\t\tbuffer.append(\"    }\\n\");\r\n\t\t\tbuffer.append(\"\\n\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static Class<?> defineClass(String className, String description, Collection<? extends InputSpec> inputs) {\r\n\t\tStringBuffer buffer = new StringBuffer();\r\n\t\tbuffer.append(\"import org.apache.commons.lang3.SerializationUtils;\\n\");\r\n\t\tbuffer.append(\"import com.google.common.base.Optional;\\n\");\r\n\t\tbuffer.append(\"import io.onedev.server.web.editable.annotation.*;\\n\");\r\n\t\tbuffer.append(\"import io.onedev.server.util.validation.annotation.*;\\n\");\r\n\t\tbuffer.append(\"import io.onedev.util.*;\\n\");\r\n\t\tbuffer.append(\"import io.onedev.server.util.*;\\n\");\r\n\t\tbuffer.append(\"import io.onedev.server.util.facade.*;\\n\");\r\n\t\tbuffer.append(\"import java.util.*;\\n\");\r\n\t\tbuffer.append(\"import javax.validation.constraints.*;\\n\");\r\n\t\tbuffer.append(\"import org.hibernate.validator.constraints.*;\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t\tbuffer.append(\"@Editable(name=\").append(\"\\\"\").append(description).append(\"\\\")\\n\");\r\n\t\tbuffer.append(\"class \" + className + \" implements java.io.Serializable {\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t\tbuffer.append(\"    private static final long serialVersionUID = 1L;\\n\");\r\n\t\tbuffer.append(\"\\n\");\r\n\t\tMap<String, Integer> indexes = new HashMap<>();\r\n\t\tint index = 1;\r\n\t\tfor (InputSpec input: inputs)\r\n\t\t\tindexes.put(input.getName(), index++);\r\n\t\tfor (InputSpec input: inputs)\r\n\t\t\tbuffer.append(input.getPropertyDef(indexes));\r\n\r\n\t\tbuffer.append(\"}\\n\");\r\n\t\tbuffer.append(\"return \" + className + \";\\n\");\r\n\t\t\r\n\t\tlogger.trace(\"Class definition script:\\n\" + buffer.toString());\r\n\t\t\r\n\t\treturn (Class<?>) GroovyUtils.evalScript(buffer.toString(), new HashMap<>());\r\n\t}\r\n\r\n\tpublic abstract List<String> convertToStrings(@Nullable Object object);\r\n\r\n\t/**\r\n\t * Convert list of strings to object\r\n\t * \r\n\t * @param strings\r\n\t * \t\t\tlist of strings\r\n\t * @return\r\n\t * \t\t\tconverted object\r\n\t */\r\n\t@Nullable\r\n\tpublic abstract Object convertToObject(List<String> strings);\r\n\t\r\n\tpublic long getOrdinal(String fieldValue) {\r\n\t\treturn -1;\r\n\t}\r\n\t\r\n\tpublic String getType() {\r\n\t\treturn EditableUtils.getDisplayName(getClass());\t\t\r\n\t}\r\n\r\n\tpublic boolean checkListElements(Object value, Class<?> elementClass) {\r\n\t\tif (value instanceof List) {\r\n\t\t\tfor (Object element: (List<?>)value) {\r\n\t\t\t\tif (element == null || element.getClass() != elementClass)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\t\r\n}\r\n", "package io.onedev.server.model.support.inputspec.textinput;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.validation.ValidationException;\n\nimport com.google.common.collect.Lists;\n\nimport io.onedev.server.model.support.inputspec.InputSpec;\nimport io.onedev.server.model.support.inputspec.textinput.defaultvalueprovider.DefaultValueProvider;\n\npublic class TextInput {\n\n\tpublic static String getPropertyDef(InputSpec inputSpec, Map<String, Integer> indexes, \n\t\t\tString pattern, DefaultValueProvider defaultValueProvider) {\n\t\tpattern = InputSpec.escape(pattern);\n\t\tint index = indexes.get(inputSpec.getName());\n\t\tStringBuffer buffer = new StringBuffer();\n\t\tinputSpec.appendField(buffer, index, \"String\");\n\t\tinputSpec.appendCommonAnnotations(buffer, index);\n\t\tif (!inputSpec.isAllowEmpty())\n\t\t\tbuffer.append(\"    @NotEmpty\\n\");\n\t\tif (pattern != null)\n\t\t\tbuffer.append(\"    @Pattern(regexp=\\\"\" + pattern + \"\\\", message=\\\"Should match regular expression: \" + pattern + \"\\\")\\n\");\n\t\tinputSpec.appendMethods(buffer, index, \"String\", null, defaultValueProvider);\n\n\t\treturn buffer.toString();\n\t}\n\n\tpublic static Object convertToObject(List<String> strings) {\n\t\tif (strings.size() == 0)\n\t\t\treturn null;\n\t\telse if (strings.size() == 1)\n\t\t\treturn strings.iterator().next();\n\t\telse\n\t\t\tthrow new ValidationException(\"Not eligible for multi-value\");\n\t}\n\n\tpublic static List<String> convertToStrings(Object value) {\n\t\tif (value instanceof String)\n\t\t\treturn Lists.newArrayList((String)value);\n\t\telse\n\t\t\treturn new ArrayList<>();\n\t}\n\t\n}\n", "package io.onedev.server.product;\r\n\r\npublic class Test {\r\n\r\n\t@org.junit.Test\r\n\tpublic void test() {\r\n\t}\t\t\r\n\r\n}"], "filenames": ["server-core/src/main/java/io/onedev/server/model/support/inputspec/InputSpec.java", "server-core/src/main/java/io/onedev/server/model/support/inputspec/textinput/TextInput.java", "server-product/src/test/java/io/onedev/server/product/Test.java"], "buggy_code_start_loc": [108, 17, 8], "buggy_code_end_loc": [109, 28, 9], "fixing_code_start_loc": [108, 18, 8], "fixing_code_end_loc": [109, 29, 9], "type": "CWE-94", "message": "OneDev is an all-in-one devops platform. In OneDev before version 4.0.3, there is a critical vulnerability involving the build endpoint parameters. InputSpec is used to define parameters of a Build spec. It does so by using dynamically generated Groovy classes. A user able to control job parameters can run arbitrary code on OneDev's server by injecting arbitrary Groovy code. The ultimate result is in the injection of a static constructor that will run arbitrary code. For a full example refer to the referenced GHSA. This issue was addressed in 4.0.3 by escaping special characters such as quote from user input.", "other": {"cve": {"id": "CVE-2021-21248", "sourceIdentifier": "security-advisories@github.com", "published": "2021-01-15T21:15:13.663", "lastModified": "2022-10-19T13:15:35.200", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OneDev is an all-in-one devops platform. In OneDev before version 4.0.3, there is a critical vulnerability involving the build endpoint parameters. InputSpec is used to define parameters of a Build spec. It does so by using dynamically generated Groovy classes. A user able to control job parameters can run arbitrary code on OneDev's server by injecting arbitrary Groovy code. The ultimate result is in the injection of a static constructor that will run arbitrary code. For a full example refer to the referenced GHSA. This issue was addressed in 4.0.3 by escaping special characters such as quote from user input."}, {"lang": "es", "value": "OneDev es una plataforma devops todo en uno.&#xa0;En OneDev versiones anteriores a 4.0.3. Se presenta una vulnerabilidad cr\u00edtica que involucra los par\u00e1metros del endpoint de compilaci\u00f3n.&#xa0;InputSpec es usada para definir par\u00e1metros de una especificaci\u00f3n de compilaci\u00f3n.&#xa0;Lo hace al usar clases Groovy generadas din\u00e1micamente.&#xa0;Un usuario capaz de controlar los par\u00e1metros de trabajo puede ejecutar c\u00f3digo arbitrario en el servidor de OneDev inyectando c\u00f3digo Groovy arbitrario.&#xa0;El resultado final es la inyecci\u00f3n de un constructor est\u00e1tico que ejecutar\u00e1 c\u00f3digo arbitrario.&#xa0;Para obtener un ejemplo completo, consulte la GHSA referenciada.&#xa0;Este problema fue abordado en la versi\u00f3n 4.0.3 al escapar de caracteres especiales tal y como la cita de la entrada del usuario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:onedev_project:onedev:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.3", "matchCriteriaId": "5287F01C-3A77-4491-AB49-401A50FAA6E9"}]}]}], "references": [{"url": "https://github.com/theonedev/onedev/commit/39d95ab8122c5d9ed18e69dc024870cae08d2d60", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/theonedev/onedev/security/advisories/GHSA-gwp4-5498-hv5f", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/theonedev/onedev/commit/39d95ab8122c5d9ed18e69dc024870cae08d2d60"}}