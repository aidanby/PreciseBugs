{"buggy_code": ["<?php\r\n/*\r\nPlugin Name: Blogger Importer\r\nPlugin URI: http://wordpress.org/extend/plugins/blogger-importer/\r\nDescription: Import posts, comments, and tags from a Blogger blog and migrate authors to Wordpress users.\r\nAuthor: wordpressdotorg\r\nAuthor URI: http://wordpress.org/\r\nVersion: 0.6\r\nLicense: GPLv2\r\nLicense URI: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\r\n*/\r\n\r\nif (!defined('WP_LOAD_IMPORTERS'))\r\n    return;\r\n\r\n// Load Importer API\r\nrequire_once ABSPATH . 'wp-admin/includes/import.php';\r\n\r\n// Load Simple Pie\r\nrequire_once ABSPATH . WPINC . '/class-feed.php';\r\nrequire_once 'blogger-importer-sanitize.php';\r\nrequire_once 'blogger-importer-blogitem.php';\r\n\r\n// Load OAuth library\r\nrequire_once 'oauth.php';\r\n\r\nif (!class_exists('WP_Importer'))\r\n{\r\n    $class_wp_importer = ABSPATH . 'wp-admin/includes/class-wp-importer.php';\r\n    if (file_exists($class_wp_importer))\r\n        require_once $class_wp_importer;\r\n}\r\n\r\n/**\r\n * How many records per GData query\r\n *\r\n * @package WordPress\r\n * @subpackage Blogger_Import\r\n * @var int\r\n * @since unknown\r\n */\r\ndefine('MAX_RESULTS', 25);\r\n\r\n/**\r\n * How many seconds to let the script run\r\n *\r\n * @package WordPress\r\n * @subpackage Blogger_Import\r\n * @var int\r\n * @since unknown\r\n */\r\ndefine('MAX_EXECUTION_TIME', 20);\r\n\r\n/**\r\n * How many seconds between status bar updates\r\n *\r\n * @package WordPress\r\n * @subpackage Blogger_Import\r\n * @var int\r\n * @since unknown\r\n */\r\ndefine('STATUS_INTERVAL', 3);\r\n\r\n/**\r\n * Blogger Importer\r\n *\r\n * @package WordPress\r\n * @subpackage Importer\r\n */\r\nif (class_exists('WP_Importer'))\r\n{\r\n    class Blogger_Import extends WP_Importer\r\n    {\r\n\r\n        function Blogger_Import()\r\n        {\r\n            global $importer_started;\r\n            $importer_started = time();\r\n            if (isset($_GET['import']) && $_GET['import'] == 'blogger')\r\n            {\r\n                add_action('admin_print_scripts', array(&$this, 'queue_scripts'));\r\n                add_action('admin_print_styles', array(&$this, 'queue_style'));\r\n            }\r\n        }\r\n\r\n        function queue_scripts($hook)\r\n        {\r\n            wp_enqueue_script('jquery');\r\n        }\r\n\r\n        function queue_style()\r\n        {\r\n            wp_enqueue_style('BloggerImporter', plugins_url('/blogger-importer.css', __file__));\r\n        }\r\n\r\n        // Shows the welcome screen and the magic auth link.\r\n        function greet()\r\n        {\r\n            $next_url = get_option('siteurl') . '/wp-admin/index.php?import=blogger&amp;noheader=true';\r\n            $auth_url = $this->get_oauth_link();\r\n            $title = __('Import Blogger', 'blogger-importer');\r\n            $welcome = __('Howdy! This importer allows you to import posts and comments from your Blogger account into your WordPress site.', 'blogger-importer');\r\n            $prereqs = __('To use this importer, you must have a Google account and an upgraded (New, was Beta) blog hosted on blogspot.com or a custom domain (not FTP).', 'blogger-importer');\r\n            $stepone = __('The first thing you need to do is tell Blogger to let WordPress access your account. You will be sent back here after providing authorization.', 'blogger-importer');\r\n            $auth = esc_attr__('Authorize', 'blogger-importer');\r\n\r\n            echo \"\r\n\t\t<div class='wrap'>\r\n\t\t\" . screen_icon() . \"\r\n\t\t<h2>$title</h2>\r\n\t\t<p>$welcome</p><p>$prereqs</p><p>$stepone</p>\r\n\t\t\t<form action='{$auth_url['url']}' method='get'>\r\n\t\t\t\t<p class='submit' style='text-align:left;'>\r\n\t\t\t\t\t<input type='submit' class='button' value='$auth' />\r\n\t\t\t\t\t<input type='hidden' name='oauth_token' value='{$auth_url['oauth_token']}' />\r\n\t\t\t\t\t<input type='hidden' name='oauth_callback' value='{$auth_url['oauth_callback']}' />\r\n\t\t\t\t</p>\r\n\t\t\t</form>\r\n\t\t</div>\\n\";\r\n        }\r\n\r\n        function get_oauth_link()\r\n        {\r\n            // Establish an Blogger_OAuth consumer\r\n            $base_url = get_option('siteurl') . '/wp-admin';\r\n            $request_token_endpoint = 'https://www.google.com/accounts/OAuthGetRequestToken';\r\n            $authorize_endpoint = 'https://www.google.com/accounts/OAuthAuthorizeToken';\r\n\r\n            $test_consumer = new Blogger_OAuthConsumer('anonymous', 'anonymous', null); // anonymous is a google thing to allow non-registered apps to work\r\n\r\n            //prepare to get request token\r\n            $sig_method = new Blogger_OAuthSignatureMethod_HMAC_SHA1();\r\n            $parsed = parse_url($request_token_endpoint);\r\n            $params = array('callback' => $base_url, 'scope' => 'http://www.blogger.com/feeds/', 'xoauth_displayname' => 'WordPress');\r\n\r\n            $req_req = Blogger_OAuthRequest::from_consumer_and_token($test_consumer, null, \"GET\", $request_token_endpoint, $params);\r\n            $req_req->sign_request($sig_method, $test_consumer, null);\r\n\r\n            // go get the request tokens from Google\r\n            $req_token = wp_remote_retrieve_body(wp_remote_get($req_req->to_url(), array('sslverify' => false)));\r\n\r\n            // parse the tokens\r\n            parse_str($req_token, $tokens);\r\n\r\n            $oauth_token = $tokens['oauth_token'];\r\n            $oauth_token_secret = $tokens['oauth_token_secret'];\r\n\r\n            $callback_url = \"$base_url/index.php?import=blogger&noheader=true&token=$oauth_token&token_secret=$oauth_token_secret\";\r\n\r\n            return array('url' => $authorize_endpoint, 'oauth_token' => $oauth_token, 'oauth_callback' => $callback_url);\r\n        }\r\n\r\n        function uh_oh($title, $message, $info)\r\n        {\r\n            echo \"<div class='wrap'>\";\r\n            screen_icon();\r\n            echo \"<h2>$title</h2><p>$message</p><pre>$info</pre></div>\";\r\n        }\r\n\r\n        function auth()\r\n        {\r\n            // we have a authorized request token now, so upgrade it to an access token\r\n            $token = $_GET['token'];\r\n            $token_secret = $_GET['token_secret'];\r\n\r\n            $oauth_access_token_endpoint = 'https://www.google.com/accounts/OAuthGetAccessToken';\r\n\r\n            // auth the token\r\n            $test_consumer = new Blogger_OAuthConsumer('anonymous', 'anonymous', null);\r\n            $auth_token = new Blogger_OAuthConsumer($token, $token_secret);\r\n            $access_token_req = new Blogger_OAuthRequest(\"GET\", $oauth_access_token_endpoint);\r\n            $access_token_req = $access_token_req->from_consumer_and_token($test_consumer, $auth_token, \"GET\", $oauth_access_token_endpoint);\r\n\r\n            $access_token_req->sign_request(new Blogger_OAuthSignatureMethod_HMAC_SHA1(), $test_consumer, $auth_token);\r\n\r\n            $after_access_request = wp_remote_retrieve_body(wp_remote_get($access_token_req->to_url(), array('sslverify' => false)));\r\n\r\n            parse_str($after_access_request, $access_tokens);\r\n\r\n            $this->token = $access_tokens['oauth_token'];\r\n            $this->token_secret = $access_tokens['oauth_token_secret'];\r\n\r\n            wp_redirect(remove_query_arg(array('token', 'noheader')));\r\n        }\r\n\r\n        // get a URL using the oauth token for authentication (returns false on failure)\r\n        function oauth_get($url, $params = null)\r\n        {\r\n            $test_consumer = new Blogger_OAuthConsumer('anonymous', 'anonymous', null);\r\n            $goog = new Blogger_OAuthConsumer($this->token, $this->token_secret, null);\r\n            $request = new Blogger_OAuthRequest(\"GET\", $url, $params);\r\n\r\n            //Ref: Not importing properly http://core.trac.wordpress.org/ticket/19096\r\n            $blog_req = $request->from_consumer_and_token($test_consumer, $goog, 'GET', $url, $params);\r\n\r\n            $blog_req->sign_request(new Blogger_OAuthSignatureMethod_HMAC_SHA1(), $test_consumer, $goog);\r\n\r\n            $data = wp_remote_get($blog_req->to_url(), array('sslverify' => false));\r\n\r\n            if (wp_remote_retrieve_response_code($data) == 200)\r\n            {\r\n                $response = wp_remote_retrieve_body($data);\r\n            } else\r\n            {\r\n                $response == false;\r\n            }\r\n\r\n            return $response;\r\n        }\r\n\r\n        function show_blogs($iter = 0)\r\n        {\r\n            if (empty($this->blogs))\r\n            {\r\n                $xml = $this->oauth_get('https://www.blogger.com/feeds/default/blogs');\r\n\r\n                // Give it a few retries... this step often flakes out the first time.\r\n                if (empty($xml))\r\n                {\r\n                    if ($iter < 3)\r\n                    {\r\n                        return $this->show_blogs($iter + 1);\r\n                    } else\r\n                    {\r\n                        $this->uh_oh(__('Trouble signing in', 'blogger-importer'), __('We were not able to gain access to your account. Try starting over.', 'blogger-importer'), '');\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                $feed = new SimplePie();\r\n                $feed->set_raw_data($xml);\r\n                $feed->init();\r\n\r\n                foreach ($feed->get_items() as $item)\r\n                {\r\n                    $blog = array(); //reset\r\n                    $blog['title'] = $item->get_title();\r\n                    $blog['summary'] = $item->get_description();\r\n\r\n                    //ID is of the form tag:blogger.com,1999:blog-417730729915399755\r\n                    //We need that number from the end\r\n                    $rawid = explode('-', $item->get_id());\r\n                    $blog['id'] = $rawid[count($rawid) - 1];\r\n\r\n                    $parts = parse_url($item->get_link(0, 'alternate'));\r\n                    $blog['host'] = $parts['host'];\r\n                    $blog['gateway'] = $item->get_link(0, 'edit');\r\n                    $blog['posts_url'] = $item->get_link(0, 'http://schemas.google.com/g/2005#post');\r\n\r\n                    //AGC:20/4/2012 Developers guide suggests that the correct feed is located as follows\r\n                    //See https://developers.google.com/blogger/docs/1.0/developers_guide_php\r\n                    $blog['comments_url'] = \"http://www.blogger.com/feeds/{$blog['id']}/comments/default\";\r\n\r\n                    if (!empty($blog))\r\n                    {\r\n                        $blog['total_posts'] = $this->get_total_results($blog['posts_url']);\r\n                        $blog['total_comments'] = $this->get_total_results($blog['comments_url']);\r\n\r\n                        $blog['mode'] = 'init';\r\n                        $this->blogs[] = $blog;\r\n                    }\r\n\r\n                }\r\n\r\n                if (empty($this->blogs))\r\n                {\r\n                    $this->uh_oh(__('No blogs found', 'blogger-importer'), __('We were able to log in but there were no blogs. Try a different account next time.', 'blogger-importer'), '');\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            //Should probably be using WP_LIST_TABLE here rather than manually rendering a table in html\r\n            //http://wpengineer.com/2426/wp_list_table-a-step-by-step-guide/\r\n            //echo '<pre>'.print_r($this,1).'</pre>';\r\n            $start = esc_js(__('Import', 'blogger-importer'));\r\n            $continue = esc_js(__('Continue', 'blogger-importer'));\r\n            $stop = esc_js(__('Importing...', 'blogger-importer'));\r\n            $authors = esc_js(__('Set Authors', 'blogger-importer'));\r\n            $loadauth = esc_js(__('Preparing author mapping form...', 'blogger-importer'));\r\n            $authhead = esc_js(__('Final Step: Author Mapping', 'blogger-importer'));\r\n            $nothing = esc_js(__('Nothing was imported. Had you already imported this blog?', 'blogger-importer'));\r\n            $stopping = ''; //Missing String used below.\r\n            $title = __('Blogger Blogs', 'blogger-importer');\r\n            $name = __('Blog Name', 'blogger-importer');\r\n            $url = __('Blog URL', 'blogger-importer');\r\n            $action = __('The Magic Button', 'blogger-importer');\r\n            $posts = __('Posts', 'blogger-importer');\r\n            $comments = __('Comments', 'blogger-importer');\r\n            $noscript = __('This feature requires Javascript but it seems to be disabled. Please enable Javascript and then reload this page. Don&#8217;t worry, you can turn it back off when you&#8217;re done.',\r\n                'blogger-importer');\r\n\r\n            $interval = STATUS_INTERVAL * 1000;\r\n            $init = '';\r\n            $rows = '';\r\n\r\n            foreach ($this->blogs as $i => $blog)\r\n            {\r\n                if ($blog['mode'] == 'init')\r\n                    $value = $start;\r\n                elseif ($blog['mode'] == 'posts' || $blog['mode'] == 'comments')\r\n                    $value = $continue;\r\n                else\r\n                    $value = $authors;\r\n                $value = esc_attr($value);\r\n                $blogtitle = esc_js($blog['title']);\r\n                $pdone = isset($blog['posts_done']) ? (int)$blog['posts_done'] : 0;\r\n                $cdone = isset($blog['comments_done']) ? (int)$blog['comments_done'] : 0;\r\n                $init .= \"blogs[$i]=new blog($i,'$blogtitle','{$blog['mode']}','\" . $this->get_js_status($i) . '\\');';\r\n                $pstat = \"<div class='ind' id='pind$i'>&nbsp;</div><div id='pstat$i' class='stat'>$pdone/{$blog['total_posts']}</div>\";\r\n                $cstat = \"<div class='ind' id='cind$i'>&nbsp;</div><div id='cstat$i' class='stat'>$cdone/{$blog['total_comments']}</div>\";\r\n                $rows .= \"<tr id='blog$i'><td class='blogtitle'>$blogtitle</td><td class='bloghost'>{$blog['host']}</td><td class='bar'>$pstat</td><td class='bar'>$cstat</td><td class='submit'><input type='submit' class='button' id='submit$i' value='$value' /><input type='hidden' name='blog' value='$i' /></td></tr>\\n\";\r\n            }\r\n\r\n            echo \"<div class='wrap'>\". screen_icon() .\"<h2>$title</h2><noscript>$noscript</noscript><table cellpadding='5px'><thead><tr><td>$name</td><td>$url</td><td>$posts</td><td>$comments</td><td>$action</td></tr></thead>\\n$rows</table></div>\";\r\n            echo \"\r\n\t\t<script type='text/javascript'>\r\n\t\t/* <![CDATA[ */\r\n\t\t\tvar strings = {cont:'$continue',stop:'$stop',stopping:'$stopping',authors:'$authors',nothing:'$nothing'};\r\n\t\t\tvar blogs = {};\r\n\t\t\tfunction blog(i, title, mode, status){\r\n\t\t\t\tthis.blog   = i;\r\n\t\t\t\tthis.mode   = mode;\r\n\t\t\t\tthis.title  = title;\r\n                eval('this.status='+status);\r\n\t\t\t\tthis.button = document.getElementById('submit'+this.blog);\r\n\t\t\t};\r\n\t\t\tblog.prototype = {\r\n\t\t\t\tstart: function() {\r\n\t\t\t\t\tthis.cont = true;\r\n\t\t\t\t\tthis.kick();\r\n\t\t\t\t\tthis.check();\r\n\t\t\t\t},\r\n\t\t\t\tkick: function() {\r\n\t\t\t\t\t++this.kicks;\r\n\t\t\t\t\tvar i = this.blog;\r\n\t\t\t\t\tjQuery.post('admin.php?import=blogger&noheader=true',{blog:this.blog},function(text,result){blogs[i].kickd(text,result)});\r\n\t\t\t\t},\r\n\t\t\t\tcheck: function() {\r\n\t\t\t\t\t++this.checks;\r\n\t\t\t\t\tvar i = this.blog;\r\n\t\t\t\t\tjQuery.post('admin.php?import=blogger&noheader=true&status=true',{blog:this.blog},function(text,result){blogs[i].checkd(text,result)});\r\n\t\t\t\t},\r\n\t\t\t\tkickd: function(text, result) {\r\n\t\t\t\t\tif ( result == 'error' ) {\r\n\t\t\t\t\t\t// TODO: exception handling\r\n\t\t\t\t\t\tif ( this.cont )\r\n\t\t\t\t\t\t\tsetTimeout('blogs['+this.blog+'].kick()', 1000);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif ( text == 'done' ) {\r\n\t\t\t\t\t\t\tthis.stop();\r\n\t\t\t\t\t\t\tthis.done();\r\n\t\t\t\t\t\t} else if ( text == 'nothing' ) {\r\n\t\t\t\t\t\t\tthis.stop();\r\n\t\t\t\t\t\t\tthis.nothing();\r\n                            this.done();\r\n\t\t\t\t\t\t} else if ( text == 'continue' ) {\r\n\t\t\t\t\t\t\tthis.kick();\r\n\t\t\t\t\t\t} else if ( this.mode = 'stopped' )\r\n\t\t\t\t\t\t\tjQuery(this.button).attr('value', strings.cont);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t--this.kicks;\r\n\t\t\t\t},\r\n\t\t\t\tcheckd: function(text, result) {\r\n\t\t\t\t\tif ( result == 'error' ) {\r\n\t\t\t\t\t\t// TODO: exception handling\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\teval('this.status='+text);\r\n\t\t\t\t\t\tjQuery('#pstat'+this.blog).empty().append(this.status.p1+'/'+this.status.p2);\r\n\t\t\t\t\t\tjQuery('#cstat'+this.blog).empty().append(this.status.c1+'/'+this.status.c2);\r\n\t\t\t\t\t\tthis.update();\r\n\t\t\t\t\t\tif ( this.cont || this.kicks > 0 )\r\n\t\t\t\t\t\t\tsetTimeout('blogs['+this.blog+'].check()', $interval);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t--this.checks;\r\n\t\t\t\t},\r\n\t\t\t\tupdate: function() {\r\n\t\t\t\t\tjQuery('#pind'+this.blog).width(((this.status.p1>0&&this.status.p2>0)?(this.status.p1/this.status.p2*jQuery('#pind'+this.blog).parent().width()):1)+'px');\r\n                    jQuery('#pstat'+this.blog).attr('title', 'Posts skipped '+this.status.p3);\r\n\t\t\t\t\tjQuery('#cind'+this.blog).width(((this.status.c1>0&&this.status.c2>0)?(this.status.c1/this.status.c2*jQuery('#cind'+this.blog).parent().width()):1)+'px');\r\n                    jQuery('#cstat'+this.blog).attr('title', 'Comments skipped '+this.status.c3);\r\n\r\n\t\t\t\t},\r\n\t\t\t\tstop: function() {\r\n\t\t\t\t\tthis.cont = false;\r\n\t\t\t\t},\r\n\t\t\t\tdone: function() {\r\n\t\t\t\t\tthis.mode = 'authors';\r\n\t\t\t\t\tjQuery(this.button).attr('value', strings.authors);\r\n\t\t\t\t},\r\n\t\t\t\tnothing: function() {\r\n\t\t\t\t\tthis.mode = 'nothing';\r\n\t\t\t\t\tjQuery(this.button).remove();\r\n\t\t\t\t\talert(strings.nothing);\r\n\t\t\t\t},\r\n\t\t\t\tgetauthors: function() {\r\n\t\t\t\t\tif ( jQuery('div.wrap').length > 1 )\r\n\t\t\t\t\t\tjQuery('div.wrap').gt(0).remove();\r\n\t\t\t\t\tjQuery('div.wrap').empty().append('<h2>$authhead</h2><h3>' + this.title + '</h3>');\r\n\t\t\t\t\tjQuery('div.wrap').append('<p id=\\\"auth\\\">$loadauth</p>');\r\n\t\t\t\t\tjQuery('p#auth').load('index.php?import=blogger&noheader=true&authors=1',{blog:this.blog});\r\n\t\t\t\t},\r\n\t\t\t\tinit: function() {\r\n\t\t\t\t\tthis.update();\r\n\t\t\t\t\tvar i = this.blog;\r\n\t\t\t\t\tjQuery(this.button).bind('click', function(){return blogs[i].click();});\r\n\t\t\t\t\tthis.kicks = 0;\r\n\t\t\t\t\tthis.checks = 0;\r\n\t\t\t\t},\r\n\t\t\t\tclick: function() {\r\n\t\t\t\t\tif ( this.mode == 'init' || this.mode == 'stopped' || this.mode == 'posts' || this.mode == 'comments' ) {\r\n\t\t\t\t\t\tthis.mode = 'started';\r\n\t\t\t\t\t\tthis.start();\r\n\t\t\t\t\t\tjQuery(this.button).attr('value', strings.stop);\r\n\t\t\t\t\t} else if ( this.mode == 'started' ) {\r\n\t\t\t\t\t\treturn false; // let it run...\r\n\t\t\t\t\t\tthis.mode = 'stopped';\r\n\t\t\t\t\t\tthis.stop();\r\n\t\t\t\t\t\tif ( this.checks > 0 || this.kicks > 0 ) {\r\n\t\t\t\t\t\t\tthis.mode = 'stopping';\r\n\t\t\t\t\t\t\tjQuery(this.button).attr('value', strings.stopping);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tjQuery(this.button).attr('value', strings.cont);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if ( this.mode == 'authors' ) {\r\n\t\t\t\t\t\tdocument.location = 'index.php?import=blogger&authors=1&blog='+this.blog;\r\n\t\t\t\t\t\t//this.mode = 'authors2';\r\n\t\t\t\t\t\t//this.getauthors();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t$init\r\n\t\t\tjQuery.each(blogs, function(i, me){me.init();});\r\n\t\t/* ]]> */\r\n\t\t</script>\\n\";\r\n        }\r\n\r\n        // Handy function for stopping the script after a number of seconds.\r\n        function have_time()\r\n        {\r\n            global $importer_started;\r\n            if (time() - $importer_started > MAX_EXECUTION_TIME)\r\n                self::ajax_die('continue');\r\n            return true;\r\n        }\r\n\r\n        function get_total_results($url)\r\n        {\r\n            $response = $this->oauth_get($url, array('max-results' => 1, 'start-index' => 2));\r\n\r\n            $feed = new SimplePie();\r\n            $feed->set_raw_data($response);\r\n            $feed->init();\r\n            $results = $feed->get_channel_tags('http://a9.com/-/spec/opensearchrss/1.0/', 'totalResults');\r\n\r\n            $total_results = $results[0]['data'];\r\n            unset($feed);\r\n            return (int)$total_results;\r\n        }\r\n\r\n        function import_blog($blogID)\r\n        {\r\n            global $importing_blog;\r\n            $importing_blog = $blogID;\r\n\r\n            if (isset($_GET['authors']))\r\n                return print ($this->get_author_form());\r\n\r\n            if (isset($_GET['status']))\r\n                self::ajax_die($this->get_js_status());\r\n\r\n            if (isset($_GET['saveauthors']))\r\n                self::ajax_die($this->save_authors());\r\n\r\n            //Simpler counting for posts as we load them forwards\r\n            if (isset($this->blogs[$importing_blog]['posts_start_index']))\r\n                $start_index = (int)$this->blogs[$importing_blog]['posts_start_index'];\r\n            else\r\n                $start_index = 1;\r\n\r\n            // This will be positive until we have finished importing posts\r\n            if ($start_index > 0)\r\n            {\r\n                // Grab all the posts\r\n                $this->blogs[$importing_blog]['mode'] = 'posts';\r\n                do\r\n                {\r\n\r\n                    $index = $struct = $entries = array();\r\n\r\n                    $url = $this->blogs[$importing_blog]['posts_url'];\r\n\r\n                    $response = $this->oauth_get($url, array('max-results' => MAX_RESULTS, 'start-index' => $start_index));\r\n\r\n                    if ($response == false)\r\n                        break;\r\n\r\n                    // parse the feed\r\n                    $feed = new SimplePie();\r\n                    $feed->set_item_class('WP_SimplePie_Blog_Item');\r\n                    $feed->set_sanitize_class('Blogger_Importer_Sanitize');\r\n                    $feed->set_raw_data($response);\r\n                    $feed->init();\r\n\r\n                    foreach ($feed->get_items() as $item)\r\n                    {\r\n\r\n                        $blogentry = new BloggerEntry();\r\n\r\n                        $blogentry->id = $item->get_id();\r\n                        $blogentry->published = $item->get_published();\r\n                        $blogentry->updated = $item->get_updated();\r\n                        $blogentry->isDraft = $item->get_draft_status($item);\r\n                        $blogentry->title = $item->get_title();\r\n                        $blogentry->content = $item->get_content();\r\n                        $blogentry->author = $item->get_author()->get_name();\r\n                        $blogentry->geotags = $item->get_geotags();\r\n\r\n                        $linktypes = array('replies', 'edit', 'self', 'alternate');\r\n                        foreach ($linktypes as $type)\r\n                        {\r\n                            $links = $item->get_links($type);\r\n\r\n                            if (!is_null($links))\r\n                            {\r\n                                foreach ($links as $link)\r\n                                {\r\n                                    $blogentry->links[] = array('rel' => $type, 'href' => $link);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        $cats = $item->get_categories();\r\n\r\n                        if (!is_null($cats))\r\n                        {\r\n                            foreach ($cats as $cat)\r\n                            {\r\n                                $blogentry->categories[] = $cat->term;\r\n                            }\r\n                        }\r\n\r\n                        $result = $this->import_post($blogentry);\r\n\r\n                        //Ref: Not importing properly http://core.trac.wordpress.org/ticket/19096\r\n                        //Simplified this section to count what is loaded rather than parsing the results again\r\n                        $start_index++;\r\n                    }\r\n\r\n                    $this->blogs[$importing_blog]['posts_start_index'] = $start_index;\r\n\r\n                    $this->save_vars();\r\n\r\n                } while ($this->blogs[$importing_blog]['total_posts'] > $start_index && $this->have_time()); //have time function will \"die\" if it's out of time\r\n            }\r\n\r\n\r\n            if (isset($this->blogs[$importing_blog]['comments_start_index']))\r\n                $start_index = (int)$this->blogs[$importing_blog]['comments_start_index'];\r\n            else\r\n                $start_index = 1;\r\n\r\n            if ($start_index > 0 && $this->blogs[$importing_blog]['total_comments'] > 0)\r\n            {\r\n\r\n                $this->blogs[$importing_blog]['mode'] = 'comments';\r\n                do\r\n                {\r\n                    $index = $struct = $entries = array();\r\n\r\n                    //So we can link up the comments as we go we need to load them in reverse order\r\n                    //Reverse the start index as the GData Blogger feed can't be sorted\r\n                    $batch = ((floor(($this->blogs[$importing_blog]['total_comments'] - $start_index) / MAX_RESULTS) * MAX_RESULTS) + 1);\r\n\r\n                    $response = $this->oauth_get($this->blogs[$importing_blog]['comments_url'], array('max-results' => MAX_RESULTS, 'start-index' => $batch));\r\n\r\n                    // parse the feed\r\n                    $feed = new SimplePie();\r\n                    $feed->set_item_class('WP_SimplePie_Blog_Item');\r\n                    // Use the standard \"stricter\" sanitize class for comments\r\n                    $feed->set_raw_data($response);\r\n                    $feed->init();\r\n\r\n                    //Reverse the batch so we load the oldest comments first and hence can link up nested comments\r\n                    $comments = array_reverse($feed->get_items());\r\n\r\n                    if (!is_null($comments))\r\n                    {\r\n                        foreach ($comments as $item)\r\n                        {\r\n\r\n                            $blogentry = new BloggerEntry();\r\n                            $blogentry->id = $item->get_id();\r\n                            $blogentry->updated = $item->get_updated();\r\n                            $blogentry->content = $item->get_content();\r\n                            $blogentry->author = $item->get_author()->get_name();\r\n                            $blogentry->authoruri = $item->get_author()->get_link();\r\n                            $blogentry->authoremail = $item->get_author()->get_email();\r\n\r\n                            $temp = $item->get_item_tags('http://purl.org/syndication/thread/1.0', 'in-reply-to');\r\n\r\n                            foreach ($temp as $t)\r\n                            {\r\n                                if (isset($t['attribs']['']['source']))\r\n                                {\r\n                                    $blogentry->source = $t['attribs']['']['source'];\r\n                                }\r\n                            }\r\n\r\n                            //Get the links\r\n                            $linktypes = array('edit', 'self', 'alternate', 'related');\r\n                            foreach ($linktypes as $type)\r\n                            {\r\n                                $links = $item->get_links($type);\r\n                                if (!is_null($links))\r\n                                {\r\n                                    foreach ($links as $link)\r\n                                    {\r\n                                        $blogentry->links[] = array('rel' => $type, 'href' => $link);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            $this->import_comment($blogentry);\r\n                            $start_index++;\r\n                        }\r\n                    }\r\n\r\n                    $this->blogs[$importing_blog]['comments_start_index'] = $start_index;\r\n                    $this->save_vars();\r\n                } while ($this->blogs[$importing_blog]['total_comments'] > $start_index && $this->have_time());\r\n            }\r\n\r\n            $this->blogs[$importing_blog]['mode'] = 'authors';\r\n            $this->save_vars();\r\n\r\n            if (!$this->blogs[$importing_blog]['posts_done'] && !$this->blogs[$importing_blog]['comments_done'])\r\n                self::ajax_die('nothing');\r\n\r\n            do_action('import_done', 'blogger');\r\n            self::ajax_die('done');\r\n        }\r\n\r\n        function no_apos($string)\r\n        {\r\n            return str_replace('&apos;', \"'\", $string);\r\n        }\r\n\r\n        function min_whitespace($string)\r\n        {\r\n            return preg_replace('|\\s+|', ' ', $string);\r\n        }\r\n\r\n        function _normalize_tag($matches)\r\n        {\r\n            return '<' . strtolower($matches[1]);\r\n        }\r\n\r\n        function import_post($entry)\r\n        {\r\n            global $importing_blog;\r\n\r\n            foreach ($entry->links as $link)\r\n            {\r\n                // save the self link as meta\r\n                if ($link['rel'] == 'self')\r\n                {\r\n                    $postself = $link['href'];\r\n                    $parts = parse_url($link['href']);\r\n                    $entry->old_permalink = $parts['path'];\r\n                }\r\n\r\n                // get the old URI for the page when available\r\n                if ($link['rel'] == 'alternate')\r\n                {\r\n                    $parts = parse_url($link['href']);\r\n                    $entry->bookmark = $parts['path'];\r\n                }\r\n\r\n                // save the replies feed link as meta (ignore the comment form one)\r\n                if ($link['rel'] == 'replies' && false === strpos($link['href'], '#comment-form'))\r\n                {\r\n                    $postreplies = $link['href'];\r\n                }\r\n            }\r\n\r\n            //Check if we are double cleaning here? Does the Simplepie already do all this?\r\n            $post_date = $entry->published;\r\n            $post_content = trim(addslashes($this->no_apos(@html_entity_decode($entry->content, ENT_COMPAT, get_option('blog_charset')))));\r\n            $post_title = trim(addslashes($this->no_apos($this->min_whitespace($entry->title))));\r\n\r\n            $post_status = $entry->isDraft ? 'draft' : 'publish';\r\n\r\n            // N.B. Clean up of $post_content is now part of the sanitize class\r\n\r\n            // Checks for duplicates\r\n            if (isset($this->blogs[$importing_blog]['posts'][$entry->old_permalink]))\r\n            {\r\n                $this->blogs[$importing_blog]['posts_skipped']++;\r\n            } elseif ($post_id = post_exists($post_title, $post_content, $post_date))\r\n            {\r\n                $this->blogs[$importing_blog]['posts'][$entry->old_permalink] = $post_id;\r\n                $this->blogs[$importing_blog]['posts_skipped']++;\r\n            } else\r\n            {\r\n                $post = compact('post_date', 'post_content', 'post_title', 'post_status');\r\n\r\n                $post_id = wp_insert_post($post);\r\n                if (is_wp_error($post_id))\r\n                    return $post_id;\r\n\r\n                wp_create_categories(array_map('addslashes', $entry->categories), $post_id);\r\n\r\n                $author = $this->no_apos(strip_tags($entry->author));\r\n\r\n                add_post_meta($post_id, 'blogger_blog', $this->blogs[$importing_blog]['host'], true);\r\n                add_post_meta($post_id, 'blogger_author', $author, true);\r\n\r\n                //Use the page id if available or the blogger internal id if it's a draft\r\n                if ($entry->isDraft | !isset($entry->bookmark))\r\n                    add_post_meta($post_id, 'blogger_permalink', $entry->old_permalink, true);\r\n                else\r\n                    add_post_meta($post_id, 'blogger_permalink', $entry->bookmark, true);\r\n\r\n                add_post_meta($post_id, '_blogger_self', $postself, true);\r\n                \r\n                if (isset($entry->geotags)) {\r\n                    add_post_meta($post_id,'geo_latitude',$entry->geotags['geo_latitude']);\r\n                    add_post_meta($post_id,'geo_longitude',$entry->geotags['geo_longitude']);\r\n                    if (isset($entry->geotags['geo_address'])) {\r\n                        add_post_meta($post_id,'geo_address',$entry->geotags['geo_address']);\r\n                    }\r\n                }\r\n\r\n                $this->blogs[$importing_blog]['posts'][$entry->old_permalink] = $post_id;\r\n\r\n                $this->blogs[$importing_blog]['posts_done']++;\r\n            }\r\n            $this->save_vars();\r\n            return;\r\n        }\r\n\r\n        function import_comment($entry)\r\n        {\r\n            global $importing_blog;\r\n\r\n            $parts = parse_url($entry->source);\r\n            $entry->old_post_permalink = $parts['path']; //Will be something like this '/feeds/417730729915399755/posts/default/8397846992898424746'\r\n\r\n            // Drop the #fragment and we have the comment's old post permalink.\r\n            foreach ($entry->links as $link)\r\n            {\r\n                if ($link['rel'] == 'alternate')\r\n                {\r\n                    $parts = parse_url($link['href']);\r\n                    $entry->old_permalink = $parts['fragment'];\r\n                }\r\n                //Parent post for nested links\r\n                if ($link['rel'] == 'related')\r\n                {\r\n                    $parts = parse_url($link['href']);\r\n                    $entry->related = $parts['path'];\r\n                }\r\n                if ($link['rel'] == 'self')\r\n                {\r\n                    $parts = parse_url($link['href']);\r\n                    $entry->self = $parts['path'];\r\n                }\r\n            }\r\n\r\n            //Check for duplicated cleanup here\r\n            $comment_post_ID = (int)$this->blogs[$importing_blog]['posts'][$entry->old_post_permalink];\r\n            $comment_author = addslashes($this->no_apos(strip_tags($entry->author)));\r\n            $comment_author_url = addslashes($this->no_apos(strip_tags($entry->authoruri)));\r\n            $comment_author_email = addslashes($this->no_apos(strip_tags($entry->authoremail)));\r\n            $comment_date = $entry->updated;\r\n\r\n            // Clean up content\r\n            // Again, check if the Simplepie is already handling all of the cleaning\r\n            $comment_content = addslashes($this->no_apos(@html_entity_decode($entry->content, ENT_COMPAT, get_option('blog_charset'))));\r\n            $comment_content = preg_replace_callback('|<(/?[A-Z]+)|', array(&$this, '_normalize_tag'), $comment_content);\r\n            $comment_content = str_replace('<br>', '<br />', $comment_content);\r\n            $comment_content = str_replace('<hr>', '<hr />', $comment_content);\r\n\r\n            // Nested comment?\r\n            if (!is_null($entry->related))\r\n            {\r\n                $comment_parent = $this->blogs[$importing_blog]['comments'][$entry->related];\r\n            }\r\n\r\n            // if the post does not exist then we need stop and not add the comment\r\n            if ($comment_post_ID != 0)\r\n            {\r\n                // Checks for duplicates\r\n                if (isset($this->blogs[$importing_blog][$entry->id]) || $this->comment_exists($comment_post_ID, $comment_author, $comment_date))\r\n                {\r\n                    $this->blogs[$importing_blog]['comments_skipped']++;\r\n                } else\r\n                {\r\n                    $comment = compact('comment_post_ID', 'comment_author', 'comment_author_url', 'comment_author_email', 'comment_date', 'comment_content', 'comment_parent');\r\n\r\n                    $comment = wp_filter_comment($comment);\r\n                    $comment_id = wp_insert_comment($comment);\r\n\r\n                    $this->blogs[$importing_blog]['comments'][$entry->id] = $comment_id;\r\n                    $this->blogs[$importing_blog]['comments'][$entry->self] = $comment_id; //For nested comments\r\n\r\n                    $this->blogs[$importing_blog]['comments_done']++;\r\n                }\r\n            } else\r\n            {\r\n                $this->blogs[$importing_blog]['comments_skipped']++;\r\n            }\r\n            $this->save_vars();\r\n        }\r\n\r\n        function ajax_die($data)\r\n        {\r\n            ob_clean(); //Discard any debug messages or other fluff already sent\r\n            header('Content-Type: text/plain');\r\n            die($data);\r\n        }\r\n\r\n\r\n        function get_js_status($blog = false)\r\n        {\r\n            global $importing_blog;\r\n            if ($blog === false)\r\n                $blog = $this->blogs[$importing_blog];\r\n            else\r\n                $blog = $this->blogs[$blog];\r\n\r\n            $p1 = isset($blog['posts_done']) ? (int)$blog['posts_done'] : 0;\r\n            $p2 = isset($blog['total_posts']) ? (int)$blog['total_posts'] : 0;\r\n            $p3 = isset($blog['posts_skipped']) ? (int)$blog['posts_skipped'] : 0;\r\n            $c1 = isset($blog['comments_done']) ? (int)$blog['comments_done'] : 0;\r\n            $c2 = isset($blog['total_comments']) ? (int)$blog['total_comments'] : 0;\r\n            $c3 = isset($blog['comments_skipped']) ? (int)$blog['comments_skipped'] : 0;\r\n            return \"{p1:$p1,p2:$p2,p3:$p3,c1:$c1,c2:$c2,c3:$c3}\";\r\n        }\r\n\r\n        function get_author_form($blog = false)\r\n        {\r\n            global $importing_blog, $wpdb, $current_user;\r\n            if ($blog === false)\r\n                $blog = &$this->blogs[$importing_blog];\r\n            else\r\n                $blog = &$this->blogs[$blog];\r\n\r\n            if (!isset($blog['authors']))\r\n            {\r\n                $post_ids = array_values($blog['posts']);\r\n                $authors = (array )$wpdb->get_col(\"SELECT DISTINCT meta_value FROM $wpdb->postmeta WHERE meta_key = 'blogger_author' AND post_id IN (\" . join(',', $post_ids) . \")\");\r\n                $blog['authors'] = array_map(null, $authors, array_fill(0, count($authors), $current_user->ID));\r\n                $this->save_vars();\r\n            }\r\n\r\n            $directions = sprintf(__('All posts were imported with the current user as author. Use this form to move each Blogger user&#8217;s posts to a different WordPress user. You may <a href=\"%s\">add users</a> and then return to this page and complete the user mapping. This form may be used as many times as you like until you activate the &#8220;Restart&#8221; function below.',\r\n                'blogger-importer'), 'users.php');\r\n            $heading = __('Author mapping', 'blogger-importer');\r\n            $blogtitle = \"{$blog['title']} ({$blog['host']})\";\r\n            $mapthis = __('Blogger username', 'blogger-importer');\r\n            $tothis = __('WordPress login', 'blogger-importer');\r\n            $submit = esc_js(__('Save Changes', 'blogger-importer'));\r\n            $rows = '';\r\n\r\n            foreach ($blog['authors'] as $i => $author)\r\n                $rows .= \"<tr><td><label for='authors[$i]'>{$author[0]}</label></td><td><select name='authors[$i]' id='authors[$i]'>\" . $this->get_user_options($author[1]) . \"</select></td></tr>\";\r\n\r\n            return \"<div class='wrap'>\".screen_icon().\"<h2>$heading</h2><h3>$blogtitle</h3><p>$directions</p><form action='index.php?import=blogger&amp;noheader=true&saveauthors=1' method='post'><input type='hidden' name='blog' value='\" .\r\n                esc_attr($importing_blog) . \"' /><table cellpadding='5'><thead><td>$mapthis</td><td>$tothis</td></thead>$rows<tr><td></td><td class='submit'><input type='submit' class='button authorsubmit' value='$submit' /></td></tr></table></form></div>\";\r\n        }\r\n\r\n        function get_user_options($current)\r\n        {\r\n            global $importer_users;\r\n            if (!isset($importer_users))\r\n                $importer_users = (array )get_users(); //Function: get_users_of_blog() Deprecated in version 3.1. Use get_users() instead.\r\n\r\n            $options = '';\r\n\r\n            foreach ($importer_users as $user)\r\n            {\r\n                $sel = ($user->ID == $current) ? \" selected='selected'\" : '';\r\n                $options .= \"<option value='$user->ID'$sel>$user->display_name</option>\";\r\n            }\r\n\r\n            return $options;\r\n        }\r\n\r\n        function save_authors()\r\n        {\r\n            global $importing_blog, $wpdb;\r\n            $blog = &$this->blogs[$importing_blog]; //Get a reference to blogs so we don't have to write it longhand\r\n\r\n            $authors = (array )$_POST['authors'];\r\n\r\n            $host = $blog['host'];\r\n\r\n            // Get an array of posts => authors\r\n            $post_ids = (array )$wpdb->get_col($wpdb->prepare(\"SELECT post_id FROM $wpdb->postmeta WHERE meta_key = 'blogger_blog' AND meta_value = %s\", $host));\r\n            $post_ids = join(',', $post_ids);\r\n            $results = (array )$wpdb->get_results(\"SELECT post_id, meta_value FROM $wpdb->postmeta WHERE meta_key = 'blogger_author' AND post_id IN ($post_ids)\");\r\n            foreach ($results as $row)\r\n                $authors_posts[$row->post_id] = $row->meta_value;\r\n\r\n            foreach ($authors as $author => $user_id)\r\n            {\r\n                $user_id = (int)$user_id;\r\n\r\n                // Skip authors that haven't been changed\r\n                if ($user_id == $blog['authors'][$author][1])\r\n                    continue;\r\n\r\n                // Get a list of the selected author's posts\r\n                $post_ids = (array )array_keys($authors_posts, $blog['authors'][$author][0]);\r\n                $post_ids = join(',', $post_ids);\r\n\r\n                $wpdb->query($wpdb->prepare(\"UPDATE $wpdb->posts SET post_author = %d WHERE id IN ($post_ids)\", $user_id));\r\n                $blog['authors'][$author][1] = $user_id;\r\n            }\r\n            $this->save_vars();\r\n\r\n            wp_redirect('edit.php');\r\n        }\r\n\r\n        function restart()\r\n        {\r\n            global $wpdb;\r\n            $options = get_option('blogger_importer');\r\n\r\n            delete_option('blogger_importer');\r\n            $wpdb->query(\"DELETE FROM $wpdb->postmeta WHERE meta_key = 'blogger_author'\");\r\n            wp_redirect('?import=blogger');\r\n        }\r\n\r\n        // Step 9: Congratulate the user\r\n        function congrats()\r\n        {\r\n            $blog = (int)$_GET['blog'];\r\n            echo '<h1>' . __('Congratulations!', 'blogger-importer') . '</h1><p>' . __('Now that you have imported your Blogger blog into WordPress, what are you going to do? Here are some suggestions:',\r\n                'blogger-importer') . '</p><ul><li>' . __('That was hard work! Take a break.', 'blogger-importer') . '</li>';\r\n            if (count($this->import['blogs']) > 1)\r\n                echo '<li>' . __('In case you haven&#8217;t done it already, you can import the posts from your other blogs:', 'blogger-importer') . $this->show_blogs() . '</li>';\r\n            if ($n = count($this->import['blogs'][$blog]['newusers']))\r\n                echo '<li>' . sprintf(__('Go to <a href=\"%s\" target=\"%s\">Authors &amp; Users</a>, where you can modify the new user(s) or delete them. If you want to make all of the imported posts yours, you will be given that option when you delete the new authors.',\r\n                    'blogger-importer'), 'users.php', '_parent') . '</li>';\r\n            echo '<li>' . __('For security, click the link below to reset this importer.', 'blogger-importer') . '</li>';\r\n            echo '</ul>';\r\n        }\r\n\r\n        // Figures out what to do, then does it.\r\n        function start()\r\n        {\r\n            if (isset($_POST['restart']))\r\n                $this->restart();\r\n\r\n            $options = get_option('blogger_importer');\r\n\r\n            if (is_array($options))\r\n                foreach ($options as $key => $value)\r\n                    $this->$key = $value;\r\n\r\n            if (isset($_REQUEST['blog']))\r\n            {\r\n                $blog = is_array($_REQUEST['blog']) ? array_shift($keys = array_keys($_REQUEST['blog'])) : $_REQUEST['blog'];\r\n                $blog = (int)$blog;\r\n                $result = $this->import_blog($blog);\r\n                if (is_wp_error($result))\r\n                    echo $result->get_error_message();\r\n            } elseif (isset($_GET['token']) && isset($_GET['token_secret']))\r\n                $this->auth();\r\n            elseif (isset($this->token) && isset($this->token_secret))\r\n                $this->show_blogs();\r\n            else\r\n                $this->greet();\r\n\r\n            $saved = $this->save_vars();\r\n\r\n            if ($saved && !isset($_GET['noheader']))\r\n            {\r\n                $restart = __('Restart', 'blogger-importer');\r\n                $message = __('We have saved some information about your Blogger account in your WordPress database. Clearing this information will allow you to start over. Restarting will not affect any posts you have already imported. If you attempt to re-import a blog, duplicate posts and comments will be skipped.',\r\n                    'blogger-importer');\r\n                $submit = esc_attr__('Clear account information', 'blogger-importer');\r\n                echo \"<div class='wrap'><h2>$restart</h2><p>$message</p><form method='post' action='?import=blogger&amp;noheader=true'><p class='submit' style='text-align:left;'><input type='submit' class='button' value='$submit' name='restart' /></p></form></div>\";\r\n            }\r\n        }\r\n\r\n        function save_vars()\r\n        {\r\n            $vars = get_object_vars($this);\r\n            update_option('blogger_importer', $vars);\r\n\r\n            return !empty($vars);\r\n        }\r\n\r\n        function comment_exists($post_id, $comment_author, $comment_date)\r\n        {\r\n            //Do we have 2 comments for the same author at the same time, on the same post?\r\n            //returns comment id\r\n            global $wpdb;\r\n\r\n            $comment_author = stripslashes($comment_author);\r\n            $comment_date = stripslashes($comment_date);\r\n\r\n            return $wpdb->get_var($wpdb->prepare(\"SELECT comment_ID FROM $wpdb->comments\r\n\t\t\tWHERE comment_post_ID = %s and comment_author = %s AND comment_date = %s\", $post_id, $comment_author, $comment_date));\r\n        }\r\n\r\n    }\r\n\r\n    class BloggerEntry\r\n    {\r\n        var $links = array();\r\n        var $categories = array();\r\n    }\r\n\r\n} // class_exists( 'WP_Importer' )\r\n\r\nfunction blogger_importer_init()\r\n{\r\n    load_plugin_textdomain('blogger-importer', false, dirname(plugin_basename(__file__)) . '/languages');\r\n\r\n    $blogger_import = new Blogger_Import();\r\n    register_importer('blogger', __('Blogger', 'blogger-importer'), __('Import categories, posts and comments then maps users from a Blogger blog.', 'blogger-importer'), array($blogger_import, 'start'));\r\n\r\n}\r\nadd_action('admin_init', 'blogger_importer_init');\r\n", "=== Plugin Name ===\r\nContributors: wordpressdotorg, Otto42, Workshopshed, SergeyBiryukov, rmccue\r\nDonate link: \r\nTags: importer, blogger\r\nRequires at least: 3.0\r\nTested up to: 3.4\r\nStable tag: 0.5\r\nLicense: GPLv2 or later\r\n\r\nImports posts, comments, and categories (blogger tags) from a Blogger blog then migrates authors to Wordpress users.\r\n\r\n== Description ==\r\n\r\nThe Blogger Importer imports your blog data from a Blogger site into a WordPress.org installation.\r\n\r\n= Items imported =\r\n\r\n* Categories\r\n* Posts (published, scheduled and draft)\r\n* Comments (not spam)\r\n\r\n= Items not imported =\r\n\r\n* Pages\r\n* Images (the images will appear in your new blog but will link to the old blogspot or picassa web locations)\r\n\r\n== Installation ==\r\n\r\n1. Upload the `blogger-importer` folder to the `/wp-content/plugins/` directory\r\n1. Activate the plugin through the 'Plugins' menu in WordPress\r\n\r\n= How to use =\r\n\r\n1. Blogger Importer is available from the WordPress Tools->Import screen.\r\n1. Press Authorise\r\n1. If you are not already logged into Google you will be asked to login\r\n1. You will be asked to grant Wordpress access to your Blogger information, to continue press Grant Access\r\n1. You will be presented with a list of all your blogs\r\n1. Select the appropriate blog and press the import button\r\n1. Wait whilst the posts and comments are imported\r\n1. Press the Set Authors button\r\n1. Select the appropriate mapping for the authors\r\n1. Review categories, posts and comments\r\n\r\nYou can now remove the importer plugin if you no longer need to use it.\r\n\r\n== Frequently Asked Questions ==\r\n\r\n= How do I re-import? =\r\n\r\nPress the clear account information button, then re-connect to blogger and re-import, the importer is designed not to re-import the same posts. If you need to do a full re-import then delete the posts and then empty the trash before re-importing.\r\n\r\n= How do I know which posts were imported? = \r\n\r\nEach of the posts loaded is tagged with a meta tags indicating where the posts were loaded from. The permalink will be set to the visible URL if the post was published or the internal ID if it was still a draft or scheduled post\r\n\r\n* blogger_author\r\n* blogger_blog\r\n* blogger_permalink\r\n\r\n= Why does it keep stopping? = \r\n\r\nThe importer is designed not to overload blogger or your site so only imports in batches and will run for a fixed number of seconds before pausing, the admin screen will refresh every few seconds to show how many it has done so far. Press continue to continue importing posts and comments.\r\n\r\n= After importing there are a lot of categories =\r\n\r\nBlogger does not distinguish between tags and categories so you will likely want to review what was imported and then use the categories to tags converter\r\n\r\n= What about pages? =\r\n\r\nThis importer does not handle blogger pages, you will need to manually transfer them.\r\n\r\n= What about images? =\r\n\r\nThe importer will simply load the tags for the images as they appear in your source data, so you will have references to blogspot and picassa based images. If you do not migrate these with a separate tool then these will be lost when you delete your old blogger blog.\r\n\r\n= Are the permalinks the same? =\r\n\r\nNo, Wordpress and Blogger handle the permalinks differently. However, it is possible to use the redirection plugin to map the old URLs across to the new URLs.\r\n\r\n= What about future posts? =\r\n\r\nThe scheduled posts will be transferred and will be published as specified. However, Blogger and Wordpress handle drafts differently, Wordpress does not support dates on draft posts so you will need to use a plugin if you wish to plan your writing schedule.\r\n\r\n= My posts and comments moved across but some things are stripped out =\r\n\r\nThe importer uses the SimplePie classes to process the data, these in turn use a Simplepie_Sanitize class to remove potentially malicious code from the source data.\r\n\r\n== Screenshots ==\r\n\r\n== Reference ==\r\n\r\n* https://developers.google.com/blogger/docs/1.0/developers_guide_php\r\n* https://developers.google.com/gdata/articles/oauth\r\n\r\n== Changelog ==\r\n\r\n= 0.5 =\r\n* Merged in fix by SergeyBiryukov http://core.trac.wordpress.org/ticket/16012\r\n* Merged in rmccue change to get_total_results to also use SimplePie from http://core.trac.wordpress.org/attachment/ticket/7652/7652-blogger.diff\r\n* Reviewed in rmccue's changes in http://core.trac.wordpress.org/attachment/ticket/7652/7652-separate.diff issues with date handling functions so skipped those\r\n* Moved SimplePie functions in  new class WP_SimplePie_Blog_Item incorporating get_draft_status and get_updated and convert date\r\n* Tested comments from source blog GMT-8, destination London (currently GMT-1), comment dates transferred correctly.\r\n* Fixed typo in oauth_get\r\n* Added screen_icon() to all pages\r\n* Added GeoTags as per spec on http://codex.wordpress.org/Geodata \r\n* Change by Otto42, rmccue to use Simplepie XML processing rather than Atomparser, http://core.trac.wordpress.org/ticket/14525 ref: http://core.trac.wordpress.org/attachment/ticket/7652/7652-blogger.diff (this also fixes http://core.trac.wordpress.org/ticket/15560)\r\n* Change by Otto42 to use OAuth rather than AuthSub authentication, should make authentication more reliable\r\n* Fix by Andy from Workshopshed to load comments and nested comments correctly\r\n* Fix by Andy from Workshopshed to correctly pass the blogger start-index and max-results parameters to oAuth functions and to process more than one batch http://core.trac.wordpress.org/ticket/19096\r\n* Fix by Andy from Workshopshed error about incorrect enqueuing of scripts also changed styles to work the same\r\n* Change by Andy from Workshopshed testing in debug mode and wrapped ajax return into a function to suppress debug messages\r\n* Fix by Andy from Workshopshed notices for undefined variables.\r\n* Change by Andy from Workshopshed Added tooltip to results table to show numbers of posts and comments skipped (duplicates / missing key)\r\n* Fix by Andy from Workshopshed incorrectly checking for duplicates based on only the date and username, this gave false positives when large numbers of comments, particularly anonymous ones.\r\n\r\n= 0.4 =\r\n* Fix for tracking images being added by Blogger to non-authenticated feeds http://core.trac.wordpress.org/ticket/17623\r\n\r\n= 0.3 =\r\n* Bugfix for 403 Invalid AuthSub Token http://core.trac.wordpress.org/ticket/14629\r\n\r\n= 0.1 =\r\n* Initial release\r\n\r\n== Upgrade Notice ==\r\n\r\n= 0.5 =\r\n\r\nMerged in fixes found in Trac\r\nThis version is a significant re-write based on previous versions. \r\n\r\n"], "fixing_code": ["<?php\r\n/*\r\nPlugin Name: Blogger Importer\r\nPlugin URI: http://wordpress.org/extend/plugins/blogger-importer/\r\nDescription: Import posts, comments, and tags from a Blogger blog and migrate authors to Wordpress users.\r\nAuthor: wordpressdotorg\r\nAuthor URI: http://wordpress.org/\r\nVersion: 0.5\r\nLicense: GPLv2\r\nLicense URI: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\r\n*/\r\n\r\nif (!defined('WP_LOAD_IMPORTERS'))\r\n    return;\r\n\r\n// Load Importer API\r\nrequire_once ABSPATH . 'wp-admin/includes/import.php';\r\n\r\n// Load Simple Pie\r\nrequire_once ABSPATH . WPINC . '/class-feed.php';\r\nrequire_once 'blogger-importer-sanitize.php';\r\nrequire_once 'blogger-importer-blogitem.php';\r\n\r\n// Load OAuth library\r\nrequire_once 'oauth.php';\r\n\r\nif (!class_exists('WP_Importer'))\r\n{\r\n    $class_wp_importer = ABSPATH . 'wp-admin/includes/class-wp-importer.php';\r\n    if (file_exists($class_wp_importer))\r\n        require_once $class_wp_importer;\r\n}\r\n\r\n/**\r\n * How many records per GData query\r\n *\r\n * @package WordPress\r\n * @subpackage Blogger_Import\r\n * @var int\r\n * @since unknown\r\n */\r\ndefine('MAX_RESULTS', 25);\r\n\r\n/**\r\n * How many seconds to let the script run\r\n *\r\n * @package WordPress\r\n * @subpackage Blogger_Import\r\n * @var int\r\n * @since unknown\r\n */\r\ndefine('MAX_EXECUTION_TIME', 20);\r\n\r\n/**\r\n * How many seconds between status bar updates\r\n *\r\n * @package WordPress\r\n * @subpackage Blogger_Import\r\n * @var int\r\n * @since unknown\r\n */\r\ndefine('STATUS_INTERVAL', 3);\r\n\r\n/**\r\n * Blogger Importer\r\n *\r\n * @package WordPress\r\n * @subpackage Importer\r\n */\r\nif (class_exists('WP_Importer'))\r\n{\r\n    class Blogger_Import extends WP_Importer\r\n    {\r\n\r\n        function Blogger_Import()\r\n        {\r\n            global $importer_started;\r\n            $importer_started = time();\r\n            if (isset($_GET['import']) && $_GET['import'] == 'blogger')\r\n            {\r\n                add_action('admin_print_scripts', array(&$this, 'queue_scripts'));\r\n                add_action('admin_print_styles', array(&$this, 'queue_style'));\r\n            }\r\n        }\r\n\r\n        function queue_scripts($hook)\r\n        {\r\n            wp_enqueue_script('jquery');\r\n        }\r\n\r\n        function queue_style()\r\n        {\r\n            wp_enqueue_style('BloggerImporter', plugins_url('/blogger-importer.css', __file__));\r\n        }\r\n\r\n        // Shows the welcome screen and the magic auth link.\r\n        function greet()\r\n        {\r\n            $next_url = get_option('siteurl') . '/wp-admin/index.php?import=blogger&amp;noheader=true';\r\n            $auth_url = $this->get_oauth_link();\r\n            $title = __('Import Blogger', 'blogger-importer');\r\n            $welcome = __('Howdy! This importer allows you to import posts and comments from your Blogger account into your WordPress site.', 'blogger-importer');\r\n            $prereqs = __('To use this importer, you must have a Google account and an upgraded (New, was Beta) blog hosted on blogspot.com or a custom domain (not FTP).', 'blogger-importer');\r\n            $stepone = __('The first thing you need to do is tell Blogger to let WordPress access your account. You will be sent back here after providing authorization.', 'blogger-importer');\r\n            $auth = esc_attr__('Authorize', 'blogger-importer');\r\n\r\n            echo \"\r\n\t\t<div class='wrap'>\r\n\t\t\" . screen_icon() . \"\r\n\t\t<h2>$title</h2>\r\n\t\t<p>$welcome</p><p>$prereqs</p><p>$stepone</p>\r\n\t\t\t<form action='{$auth_url['url']}' method='get'>\r\n\t\t\t\t<p class='submit' style='text-align:left;'>\r\n\t\t\t\t\t<input type='submit' class='button' value='$auth' />\r\n\t\t\t\t\t<input type='hidden' name='oauth_token' value='{$auth_url['oauth_token']}' />\r\n\t\t\t\t\t<input type='hidden' name='oauth_callback' value='{$auth_url['oauth_callback']}' />\r\n\t\t\t\t</p>\r\n\t\t\t</form>\r\n\t\t</div>\\n\";\r\n        }\r\n\r\n        function get_oauth_link()\r\n        {\r\n            // Establish an Blogger_OAuth consumer\r\n            $base_url = get_option('siteurl') . '/wp-admin';\r\n            $request_token_endpoint = 'https://www.google.com/accounts/OAuthGetRequestToken';\r\n            $authorize_endpoint = 'https://www.google.com/accounts/OAuthAuthorizeToken';\r\n\r\n            $test_consumer = new Blogger_OAuthConsumer('anonymous', 'anonymous', null); // anonymous is a google thing to allow non-registered apps to work\r\n\r\n            //prepare to get request token\r\n            $sig_method = new Blogger_OAuthSignatureMethod_HMAC_SHA1();\r\n            $parsed = parse_url($request_token_endpoint);\r\n            $params = array('callback' => $base_url, 'scope' => 'http://www.blogger.com/feeds/', 'xoauth_displayname' => 'WordPress');\r\n\r\n            $req_req = Blogger_OAuthRequest::from_consumer_and_token($test_consumer, null, \"GET\", $request_token_endpoint, $params);\r\n            $req_req->sign_request($sig_method, $test_consumer, null);\r\n\r\n            // go get the request tokens from Google\r\n            $req_token = wp_remote_retrieve_body(wp_remote_get($req_req->to_url(), array('sslverify' => false)));\r\n\r\n            // parse the tokens\r\n            parse_str($req_token, $tokens);\r\n\r\n            $oauth_token = $tokens['oauth_token'];\r\n            $oauth_token_secret = $tokens['oauth_token_secret'];\r\n\r\n            $callback_url = \"$base_url/index.php?import=blogger&noheader=true&token=$oauth_token&token_secret=$oauth_token_secret\";\r\n\r\n            return array('url' => $authorize_endpoint, 'oauth_token' => $oauth_token, 'oauth_callback' => $callback_url);\r\n        }\r\n\r\n        function uh_oh($title, $message, $info)\r\n        {\r\n            echo \"<div class='wrap'>\";\r\n            screen_icon();\r\n            echo \"<h2>$title</h2><p>$message</p><pre>$info</pre></div>\";\r\n        }\r\n\r\n        function auth()\r\n        {\r\n            // we have a authorized request token now, so upgrade it to an access token\r\n            $token = $_GET['token'];\r\n            $token_secret = $_GET['token_secret'];\r\n\r\n            $oauth_access_token_endpoint = 'https://www.google.com/accounts/OAuthGetAccessToken';\r\n\r\n            // auth the token\r\n            $test_consumer = new Blogger_OAuthConsumer('anonymous', 'anonymous', null);\r\n            $auth_token = new Blogger_OAuthConsumer($token, $token_secret);\r\n            $access_token_req = new Blogger_OAuthRequest(\"GET\", $oauth_access_token_endpoint);\r\n            $access_token_req = $access_token_req->from_consumer_and_token($test_consumer, $auth_token, \"GET\", $oauth_access_token_endpoint);\r\n\r\n            $access_token_req->sign_request(new Blogger_OAuthSignatureMethod_HMAC_SHA1(), $test_consumer, $auth_token);\r\n\r\n            $after_access_request = wp_remote_retrieve_body(wp_remote_get($access_token_req->to_url(), array('sslverify' => false)));\r\n\r\n            parse_str($after_access_request, $access_tokens);\r\n\r\n            $this->token = $access_tokens['oauth_token'];\r\n            $this->token_secret = $access_tokens['oauth_token_secret'];\r\n\r\n            wp_redirect(remove_query_arg(array('token', 'noheader')));\r\n        }\r\n\r\n        // get a URL using the oauth token for authentication (returns false on failure)\r\n        function oauth_get($url, $params = null)\r\n        {\r\n            $test_consumer = new Blogger_OAuthConsumer('anonymous', 'anonymous', null);\r\n            $goog = new Blogger_OAuthConsumer($this->token, $this->token_secret, null);\r\n            $request = new Blogger_OAuthRequest(\"GET\", $url, $params);\r\n\r\n            //Ref: Not importing properly http://core.trac.wordpress.org/ticket/19096\r\n            $blog_req = $request->from_consumer_and_token($test_consumer, $goog, 'GET', $url, $params);\r\n\r\n            $blog_req->sign_request(new Blogger_OAuthSignatureMethod_HMAC_SHA1(), $test_consumer, $goog);\r\n\r\n            $data = wp_remote_get($blog_req->to_url(), array('sslverify' => false));\r\n\r\n            if (wp_remote_retrieve_response_code($data) == 200)\r\n            {\r\n                $response = wp_remote_retrieve_body($data);\r\n            } else\r\n            {\r\n                $response == false;\r\n            }\r\n\r\n            return $response;\r\n        }\r\n\r\n        function show_blogs($iter = 0)\r\n        {\r\n            if (empty($this->blogs))\r\n            {\r\n                $xml = $this->oauth_get('https://www.blogger.com/feeds/default/blogs');\r\n\r\n                // Give it a few retries... this step often flakes out the first time.\r\n                if (empty($xml))\r\n                {\r\n                    if ($iter < 3)\r\n                    {\r\n                        return $this->show_blogs($iter + 1);\r\n                    } else\r\n                    {\r\n                        $this->uh_oh(__('Trouble signing in', 'blogger-importer'), __('We were not able to gain access to your account. Try starting over.', 'blogger-importer'), '');\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                $feed = new SimplePie();\r\n                $feed->set_raw_data($xml);\r\n                $feed->init();\r\n\r\n                foreach ($feed->get_items() as $item)\r\n                {\r\n                    $blog = array(); //reset\r\n                    $blog['title'] = $item->get_title();\r\n                    $blog['summary'] = $item->get_description();\r\n\r\n                    //ID is of the form tag:blogger.com,1999:blog-417730729915399755\r\n                    //We need that number from the end\r\n                    $rawid = explode('-', $item->get_id());\r\n                    $blog['id'] = $rawid[count($rawid) - 1];\r\n\r\n                    $parts = parse_url($item->get_link(0, 'alternate'));\r\n                    $blog['host'] = $parts['host'];\r\n                    $blog['gateway'] = $item->get_link(0, 'edit');\r\n                    $blog['posts_url'] = $item->get_link(0, 'http://schemas.google.com/g/2005#post');\r\n\r\n                    //AGC:20/4/2012 Developers guide suggests that the correct feed is located as follows\r\n                    //See https://developers.google.com/blogger/docs/1.0/developers_guide_php\r\n                    $blog['comments_url'] = \"http://www.blogger.com/feeds/{$blog['id']}/comments/default\";\r\n\r\n                    if (!empty($blog))\r\n                    {\r\n                        $blog['total_posts'] = $this->get_total_results($blog['posts_url']);\r\n                        $blog['total_comments'] = $this->get_total_results($blog['comments_url']);\r\n\r\n                        $blog['mode'] = 'init';\r\n                        $this->blogs[] = $blog;\r\n                    }\r\n\r\n                }\r\n\r\n                if (empty($this->blogs))\r\n                {\r\n                    $this->uh_oh(__('No blogs found', 'blogger-importer'), __('We were able to log in but there were no blogs. Try a different account next time.', 'blogger-importer'), '');\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            //Should probably be using WP_LIST_TABLE here rather than manually rendering a table in html\r\n            //http://wpengineer.com/2426/wp_list_table-a-step-by-step-guide/\r\n            //echo '<pre>'.print_r($this,1).'</pre>';\r\n            $start = esc_js(__('Import', 'blogger-importer'));\r\n            $continue = esc_js(__('Continue', 'blogger-importer'));\r\n            $stop = esc_js(__('Importing...', 'blogger-importer'));\r\n            $authors = esc_js(__('Set Authors', 'blogger-importer'));\r\n            $loadauth = esc_js(__('Preparing author mapping form...', 'blogger-importer'));\r\n            $authhead = esc_js(__('Final Step: Author Mapping', 'blogger-importer'));\r\n            $nothing = esc_js(__('Nothing was imported. Had you already imported this blog?', 'blogger-importer'));\r\n            $stopping = ''; //Missing String used below.\r\n            $title = __('Blogger Blogs', 'blogger-importer');\r\n            $name = __('Blog Name', 'blogger-importer');\r\n            $url = __('Blog URL', 'blogger-importer');\r\n            $action = __('The Magic Button', 'blogger-importer');\r\n            $posts = __('Posts', 'blogger-importer');\r\n            $comments = __('Comments', 'blogger-importer');\r\n            $noscript = __('This feature requires Javascript but it seems to be disabled. Please enable Javascript and then reload this page. Don&#8217;t worry, you can turn it back off when you&#8217;re done.',\r\n                'blogger-importer');\r\n\r\n            $interval = STATUS_INTERVAL * 1000;\r\n            $init = '';\r\n            $rows = '';\r\n\r\n            foreach ($this->blogs as $i => $blog)\r\n            {\r\n                if ($blog['mode'] == 'init')\r\n                    $value = $start;\r\n                elseif ($blog['mode'] == 'posts' || $blog['mode'] == 'comments')\r\n                    $value = $continue;\r\n                else\r\n                    $value = $authors;\r\n                $value = esc_attr($value);\r\n                $blogtitle = esc_js($blog['title']);\r\n                $pdone = isset($blog['posts_done']) ? (int)$blog['posts_done'] : 0;\r\n                $cdone = isset($blog['comments_done']) ? (int)$blog['comments_done'] : 0;\r\n                $init .= \"blogs[$i]=new blog($i,'$blogtitle','{$blog['mode']}','\" . $this->get_js_status($i) . '\\');';\r\n                $pstat = \"<div class='ind' id='pind$i'>&nbsp;</div><div id='pstat$i' class='stat'>$pdone/{$blog['total_posts']}</div>\";\r\n                $cstat = \"<div class='ind' id='cind$i'>&nbsp;</div><div id='cstat$i' class='stat'>$cdone/{$blog['total_comments']}</div>\";\r\n                $rows .= \"<tr id='blog$i'><td class='blogtitle'>$blogtitle</td><td class='bloghost'>{$blog['host']}</td><td class='bar'>$pstat</td><td class='bar'>$cstat</td><td class='submit'><input type='submit' class='button' id='submit$i' value='$value' /><input type='hidden' name='blog' value='$i' /></td></tr>\\n\";\r\n            }\r\n\r\n            echo \"<div class='wrap'>\". screen_icon() .\"<h2>$title</h2><noscript>$noscript</noscript><table cellpadding='5px'><thead><tr><td>$name</td><td>$url</td><td>$posts</td><td>$comments</td><td>$action</td></tr></thead>\\n$rows</table></div>\";\r\n            echo \"\r\n\t\t<script type='text/javascript'>\r\n\t\t/* <![CDATA[ */\r\n\t\t\tvar strings = {cont:'$continue',stop:'$stop',stopping:'$stopping',authors:'$authors',nothing:'$nothing'};\r\n\t\t\tvar blogs = {};\r\n\t\t\tfunction blog(i, title, mode, status){\r\n\t\t\t\tthis.blog   = i;\r\n\t\t\t\tthis.mode   = mode;\r\n\t\t\t\tthis.title  = title;\r\n                eval('this.status='+status);\r\n\t\t\t\tthis.button = document.getElementById('submit'+this.blog);\r\n\t\t\t};\r\n\t\t\tblog.prototype = {\r\n\t\t\t\tstart: function() {\r\n\t\t\t\t\tthis.cont = true;\r\n\t\t\t\t\tthis.kick();\r\n\t\t\t\t\tthis.check();\r\n\t\t\t\t},\r\n\t\t\t\tkick: function() {\r\n\t\t\t\t\t++this.kicks;\r\n\t\t\t\t\tvar i = this.blog;\r\n\t\t\t\t\tjQuery.post('admin.php?import=blogger&noheader=true',{blog:this.blog},function(text,result){blogs[i].kickd(text,result)});\r\n\t\t\t\t},\r\n\t\t\t\tcheck: function() {\r\n\t\t\t\t\t++this.checks;\r\n\t\t\t\t\tvar i = this.blog;\r\n\t\t\t\t\tjQuery.post('admin.php?import=blogger&noheader=true&status=true',{blog:this.blog},function(text,result){blogs[i].checkd(text,result)});\r\n\t\t\t\t},\r\n\t\t\t\tkickd: function(text, result) {\r\n\t\t\t\t\tif ( result == 'error' ) {\r\n\t\t\t\t\t\t// TODO: exception handling\r\n\t\t\t\t\t\tif ( this.cont )\r\n\t\t\t\t\t\t\tsetTimeout('blogs['+this.blog+'].kick()', 1000);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif ( text == 'done' ) {\r\n\t\t\t\t\t\t\tthis.stop();\r\n\t\t\t\t\t\t\tthis.done();\r\n\t\t\t\t\t\t} else if ( text == 'nothing' ) {\r\n\t\t\t\t\t\t\tthis.stop();\r\n\t\t\t\t\t\t\tthis.nothing();\r\n                            this.done();\r\n\t\t\t\t\t\t} else if ( text == 'continue' ) {\r\n\t\t\t\t\t\t\tthis.kick();\r\n\t\t\t\t\t\t} else if ( this.mode = 'stopped' )\r\n\t\t\t\t\t\t\tjQuery(this.button).attr('value', strings.cont);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t--this.kicks;\r\n\t\t\t\t},\r\n\t\t\t\tcheckd: function(text, result) {\r\n\t\t\t\t\tif ( result == 'error' ) {\r\n\t\t\t\t\t\t// TODO: exception handling\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\teval('this.status='+text);\r\n\t\t\t\t\t\tjQuery('#pstat'+this.blog).empty().append(this.status.p1+'/'+this.status.p2);\r\n\t\t\t\t\t\tjQuery('#cstat'+this.blog).empty().append(this.status.c1+'/'+this.status.c2);\r\n\t\t\t\t\t\tthis.update();\r\n\t\t\t\t\t\tif ( this.cont || this.kicks > 0 )\r\n\t\t\t\t\t\t\tsetTimeout('blogs['+this.blog+'].check()', $interval);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t--this.checks;\r\n\t\t\t\t},\r\n\t\t\t\tupdate: function() {\r\n\t\t\t\t\tjQuery('#pind'+this.blog).width(((this.status.p1>0&&this.status.p2>0)?(this.status.p1/this.status.p2*jQuery('#pind'+this.blog).parent().width()):1)+'px');\r\n                    jQuery('#pstat'+this.blog).attr('title', 'Posts skipped '+this.status.p3);\r\n\t\t\t\t\tjQuery('#cind'+this.blog).width(((this.status.c1>0&&this.status.c2>0)?(this.status.c1/this.status.c2*jQuery('#cind'+this.blog).parent().width()):1)+'px');\r\n                    jQuery('#cstat'+this.blog).attr('title', 'Comments skipped '+this.status.c3);\r\n\r\n\t\t\t\t},\r\n\t\t\t\tstop: function() {\r\n\t\t\t\t\tthis.cont = false;\r\n\t\t\t\t},\r\n\t\t\t\tdone: function() {\r\n\t\t\t\t\tthis.mode = 'authors';\r\n\t\t\t\t\tjQuery(this.button).attr('value', strings.authors);\r\n\t\t\t\t},\r\n\t\t\t\tnothing: function() {\r\n\t\t\t\t\tthis.mode = 'nothing';\r\n\t\t\t\t\tjQuery(this.button).remove();\r\n\t\t\t\t\talert(strings.nothing);\r\n\t\t\t\t},\r\n\t\t\t\tgetauthors: function() {\r\n\t\t\t\t\tif ( jQuery('div.wrap').length > 1 )\r\n\t\t\t\t\t\tjQuery('div.wrap').gt(0).remove();\r\n\t\t\t\t\tjQuery('div.wrap').empty().append('<h2>$authhead</h2><h3>' + this.title + '</h3>');\r\n\t\t\t\t\tjQuery('div.wrap').append('<p id=\\\"auth\\\">$loadauth</p>');\r\n\t\t\t\t\tjQuery('p#auth').load('index.php?import=blogger&noheader=true&authors=1',{blog:this.blog});\r\n\t\t\t\t},\r\n\t\t\t\tinit: function() {\r\n\t\t\t\t\tthis.update();\r\n\t\t\t\t\tvar i = this.blog;\r\n\t\t\t\t\tjQuery(this.button).bind('click', function(){return blogs[i].click();});\r\n\t\t\t\t\tthis.kicks = 0;\r\n\t\t\t\t\tthis.checks = 0;\r\n\t\t\t\t},\r\n\t\t\t\tclick: function() {\r\n\t\t\t\t\tif ( this.mode == 'init' || this.mode == 'stopped' || this.mode == 'posts' || this.mode == 'comments' ) {\r\n\t\t\t\t\t\tthis.mode = 'started';\r\n\t\t\t\t\t\tthis.start();\r\n\t\t\t\t\t\tjQuery(this.button).attr('value', strings.stop);\r\n\t\t\t\t\t} else if ( this.mode == 'started' ) {\r\n\t\t\t\t\t\treturn false; // let it run...\r\n\t\t\t\t\t\tthis.mode = 'stopped';\r\n\t\t\t\t\t\tthis.stop();\r\n\t\t\t\t\t\tif ( this.checks > 0 || this.kicks > 0 ) {\r\n\t\t\t\t\t\t\tthis.mode = 'stopping';\r\n\t\t\t\t\t\t\tjQuery(this.button).attr('value', strings.stopping);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tjQuery(this.button).attr('value', strings.cont);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if ( this.mode == 'authors' ) {\r\n\t\t\t\t\t\tdocument.location = 'index.php?import=blogger&authors=1&blog='+this.blog;\r\n\t\t\t\t\t\t//this.mode = 'authors2';\r\n\t\t\t\t\t\t//this.getauthors();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t$init\r\n\t\t\tjQuery.each(blogs, function(i, me){me.init();});\r\n\t\t/* ]]> */\r\n\t\t</script>\\n\";\r\n        }\r\n\r\n        // Handy function for stopping the script after a number of seconds.\r\n        function have_time()\r\n        {\r\n            global $importer_started;\r\n            if (time() - $importer_started > MAX_EXECUTION_TIME)\r\n                self::ajax_die('continue');\r\n            return true;\r\n        }\r\n\r\n        function get_total_results($url)\r\n        {\r\n            $response = $this->oauth_get($url, array('max-results' => 1, 'start-index' => 2));\r\n\r\n            $feed = new SimplePie();\r\n            $feed->set_raw_data($response);\r\n            $feed->init();\r\n            $results = $feed->get_channel_tags('http://a9.com/-/spec/opensearchrss/1.0/', 'totalResults');\r\n\r\n            $total_results = $results[0]['data'];\r\n            unset($feed);\r\n            return (int)$total_results;\r\n        }\r\n\r\n        function import_blog($blogID)\r\n        {\r\n            global $importing_blog;\r\n            $importing_blog = $blogID;\r\n\r\n            if (isset($_GET['authors']))\r\n                return print ($this->get_author_form());\r\n\r\n            if (isset($_GET['status']))\r\n                self::ajax_die($this->get_js_status());\r\n\r\n            if (isset($_GET['saveauthors']))\r\n                self::ajax_die($this->save_authors());\r\n\r\n            //Simpler counting for posts as we load them forwards\r\n            if (isset($this->blogs[$importing_blog]['posts_start_index']))\r\n                $start_index = (int)$this->blogs[$importing_blog]['posts_start_index'];\r\n            else\r\n                $start_index = 1;\r\n\r\n            // This will be positive until we have finished importing posts\r\n            if ($start_index > 0)\r\n            {\r\n                // Grab all the posts\r\n                $this->blogs[$importing_blog]['mode'] = 'posts';\r\n                do\r\n                {\r\n\r\n                    $index = $struct = $entries = array();\r\n\r\n                    $url = $this->blogs[$importing_blog]['posts_url'];\r\n\r\n                    $response = $this->oauth_get($url, array('max-results' => MAX_RESULTS, 'start-index' => $start_index));\r\n\r\n                    if ($response == false)\r\n                        break;\r\n\r\n                    // parse the feed\r\n                    $feed = new SimplePie();\r\n                    $feed->set_item_class('WP_SimplePie_Blog_Item');\r\n                    $feed->set_sanitize_class('Blogger_Importer_Sanitize');\r\n                    $feed->set_raw_data($response);\r\n                    $feed->init();\r\n\r\n                    foreach ($feed->get_items() as $item)\r\n                    {\r\n\r\n                        $blogentry = new BloggerEntry();\r\n\r\n                        $blogentry->id = $item->get_id();\r\n                        $blogentry->published = $item->get_published();\r\n                        $blogentry->updated = $item->get_updated();\r\n                        $blogentry->isDraft = $item->get_draft_status($item);\r\n                        $blogentry->title = $item->get_title();\r\n                        $blogentry->content = $item->get_content();\r\n                        $blogentry->author = $item->get_author()->get_name();\r\n                        $blogentry->geotags = $item->get_geotags();\r\n\r\n                        $linktypes = array('replies', 'edit', 'self', 'alternate');\r\n                        foreach ($linktypes as $type)\r\n                        {\r\n                            $links = $item->get_links($type);\r\n\r\n                            if (!is_null($links))\r\n                            {\r\n                                foreach ($links as $link)\r\n                                {\r\n                                    $blogentry->links[] = array('rel' => $type, 'href' => $link);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        $cats = $item->get_categories();\r\n\r\n                        if (!is_null($cats))\r\n                        {\r\n                            foreach ($cats as $cat)\r\n                            {\r\n                                $blogentry->categories[] = $cat->term;\r\n                            }\r\n                        }\r\n\r\n                        $result = $this->import_post($blogentry);\r\n\r\n                        //Ref: Not importing properly http://core.trac.wordpress.org/ticket/19096\r\n                        //Simplified this section to count what is loaded rather than parsing the results again\r\n                        $start_index++;\r\n                    }\r\n\r\n                    $this->blogs[$importing_blog]['posts_start_index'] = $start_index;\r\n\r\n                    $this->save_vars();\r\n\r\n                } while ($this->blogs[$importing_blog]['total_posts'] > $start_index && $this->have_time()); //have time function will \"die\" if it's out of time\r\n            }\r\n\r\n\r\n            if (isset($this->blogs[$importing_blog]['comments_start_index']))\r\n                $start_index = (int)$this->blogs[$importing_blog]['comments_start_index'];\r\n            else\r\n                $start_index = 1;\r\n\r\n            if ($start_index > 0 && $this->blogs[$importing_blog]['total_comments'] > 0)\r\n            {\r\n\r\n                $this->blogs[$importing_blog]['mode'] = 'comments';\r\n                do\r\n                {\r\n                    $index = $struct = $entries = array();\r\n\r\n                    //So we can link up the comments as we go we need to load them in reverse order\r\n                    //Reverse the start index as the GData Blogger feed can't be sorted\r\n                    $batch = ((floor(($this->blogs[$importing_blog]['total_comments'] - $start_index) / MAX_RESULTS) * MAX_RESULTS) + 1);\r\n\r\n                    $response = $this->oauth_get($this->blogs[$importing_blog]['comments_url'], array('max-results' => MAX_RESULTS, 'start-index' => $batch));\r\n\r\n                    // parse the feed\r\n                    $feed = new SimplePie();\r\n                    $feed->set_item_class('WP_SimplePie_Blog_Item');\r\n                    // Use the standard \"stricter\" sanitize class for comments\r\n                    $feed->set_raw_data($response);\r\n                    $feed->init();\r\n\r\n                    //Reverse the batch so we load the oldest comments first and hence can link up nested comments\r\n                    $comments = array_reverse($feed->get_items());\r\n\r\n                    if (!is_null($comments))\r\n                    {\r\n                        foreach ($comments as $item)\r\n                        {\r\n\r\n                            $blogentry = new BloggerEntry();\r\n                            $blogentry->id = $item->get_id();\r\n                            $blogentry->updated = $item->get_updated();\r\n                            $blogentry->content = $item->get_content();\r\n                            $blogentry->author = $item->get_author()->get_name();\r\n                            $blogentry->authoruri = $item->get_author()->get_link();\r\n                            $blogentry->authoremail = $item->get_author()->get_email();\r\n\r\n                            $temp = $item->get_item_tags('http://purl.org/syndication/thread/1.0', 'in-reply-to');\r\n\r\n                            foreach ($temp as $t)\r\n                            {\r\n                                if (isset($t['attribs']['']['source']))\r\n                                {\r\n                                    $blogentry->source = $t['attribs']['']['source'];\r\n                                }\r\n                            }\r\n\r\n                            //Get the links\r\n                            $linktypes = array('edit', 'self', 'alternate', 'related');\r\n                            foreach ($linktypes as $type)\r\n                            {\r\n                                $links = $item->get_links($type);\r\n                                if (!is_null($links))\r\n                                {\r\n                                    foreach ($links as $link)\r\n                                    {\r\n                                        $blogentry->links[] = array('rel' => $type, 'href' => $link);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            $this->import_comment($blogentry);\r\n                            $start_index++;\r\n                        }\r\n                    }\r\n\r\n                    $this->blogs[$importing_blog]['comments_start_index'] = $start_index;\r\n                    $this->save_vars();\r\n                } while ($this->blogs[$importing_blog]['total_comments'] > $start_index && $this->have_time());\r\n            }\r\n\r\n            $this->blogs[$importing_blog]['mode'] = 'authors';\r\n            $this->save_vars();\r\n\r\n            if (!$this->blogs[$importing_blog]['posts_done'] && !$this->blogs[$importing_blog]['comments_done'])\r\n                self::ajax_die('nothing');\r\n\r\n            do_action('import_done', 'blogger');\r\n            self::ajax_die('done');\r\n        }\r\n\r\n        function no_apos($string)\r\n        {\r\n            return str_replace('&apos;', \"'\", $string);\r\n        }\r\n\r\n        function min_whitespace($string)\r\n        {\r\n            return preg_replace('|\\s+|', ' ', $string);\r\n        }\r\n\r\n        function _normalize_tag($matches)\r\n        {\r\n            return '<' . strtolower($matches[1]);\r\n        }\r\n\r\n        function import_post($entry)\r\n        {\r\n            global $importing_blog;\r\n\r\n            foreach ($entry->links as $link)\r\n            {\r\n                // save the self link as meta\r\n                if ($link['rel'] == 'self')\r\n                {\r\n                    $postself = $link['href'];\r\n                    $parts = parse_url($link['href']);\r\n                    $entry->old_permalink = $parts['path'];\r\n                }\r\n\r\n                // get the old URI for the page when available\r\n                if ($link['rel'] == 'alternate')\r\n                {\r\n                    $parts = parse_url($link['href']);\r\n                    $entry->bookmark = $parts['path'];\r\n                }\r\n\r\n                // save the replies feed link as meta (ignore the comment form one)\r\n                if ($link['rel'] == 'replies' && false === strpos($link['href'], '#comment-form'))\r\n                {\r\n                    $postreplies = $link['href'];\r\n                }\r\n            }\r\n\r\n            //Check if we are double cleaning here? Does the Simplepie already do all this?\r\n            $post_date = $entry->published;\r\n            $post_content = trim(addslashes($this->no_apos(@html_entity_decode($entry->content, ENT_COMPAT, get_option('blog_charset')))));\r\n            $post_title = trim(addslashes($this->no_apos($this->min_whitespace($entry->title))));\r\n\r\n            $post_status = $entry->isDraft ? 'draft' : 'publish';\r\n\r\n            // N.B. Clean up of $post_content is now part of the sanitize class\r\n\r\n            // Checks for duplicates\r\n            if (isset($this->blogs[$importing_blog]['posts'][$entry->old_permalink]))\r\n            {\r\n                $this->blogs[$importing_blog]['posts_skipped']++;\r\n            } elseif ($post_id = post_exists($post_title, $post_content, $post_date))\r\n            {\r\n                $this->blogs[$importing_blog]['posts'][$entry->old_permalink] = $post_id;\r\n                $this->blogs[$importing_blog]['posts_skipped']++;\r\n            } else\r\n            {\r\n                $post = compact('post_date', 'post_content', 'post_title', 'post_status');\r\n\r\n                $post_id = wp_insert_post($post);\r\n                if (is_wp_error($post_id))\r\n                    return $post_id;\r\n\r\n                wp_create_categories(array_map('addslashes', $entry->categories), $post_id);\r\n\r\n                $author = $this->no_apos(strip_tags($entry->author));\r\n\r\n                add_post_meta($post_id, 'blogger_blog', $this->blogs[$importing_blog]['host'], true);\r\n                add_post_meta($post_id, 'blogger_author', $author, true);\r\n\r\n                //Use the page id if available or the blogger internal id if it's a draft\r\n                if ($entry->isDraft | !isset($entry->bookmark))\r\n                    add_post_meta($post_id, 'blogger_permalink', $entry->old_permalink, true);\r\n                else\r\n                    add_post_meta($post_id, 'blogger_permalink', $entry->bookmark, true);\r\n\r\n                add_post_meta($post_id, '_blogger_self', $postself, true);\r\n                \r\n                if (isset($entry->geotags)) {\r\n                    add_post_meta($post_id,'geo_latitude',$entry->geotags['geo_latitude']);\r\n                    add_post_meta($post_id,'geo_longitude',$entry->geotags['geo_longitude']);\r\n                    if (isset($entry->geotags['geo_address'])) {\r\n                        add_post_meta($post_id,'geo_address',$entry->geotags['geo_address']);\r\n                    }\r\n                }\r\n\r\n                $this->blogs[$importing_blog]['posts'][$entry->old_permalink] = $post_id;\r\n\r\n                $this->blogs[$importing_blog]['posts_done']++;\r\n            }\r\n            $this->save_vars();\r\n            return;\r\n        }\r\n\r\n        function import_comment($entry)\r\n        {\r\n            global $importing_blog;\r\n\r\n            $parts = parse_url($entry->source);\r\n            $entry->old_post_permalink = $parts['path']; //Will be something like this '/feeds/417730729915399755/posts/default/8397846992898424746'\r\n\r\n            // Drop the #fragment and we have the comment's old post permalink.\r\n            foreach ($entry->links as $link)\r\n            {\r\n                if ($link['rel'] == 'alternate')\r\n                {\r\n                    $parts = parse_url($link['href']);\r\n                    $entry->old_permalink = $parts['fragment'];\r\n                }\r\n                //Parent post for nested links\r\n                if ($link['rel'] == 'related')\r\n                {\r\n                    $parts = parse_url($link['href']);\r\n                    $entry->related = $parts['path'];\r\n                }\r\n                if ($link['rel'] == 'self')\r\n                {\r\n                    $parts = parse_url($link['href']);\r\n                    $entry->self = $parts['path'];\r\n                }\r\n            }\r\n\r\n            //Check for duplicated cleanup here\r\n            $comment_post_ID = (int)$this->blogs[$importing_blog]['posts'][$entry->old_post_permalink];\r\n            $comment_author = addslashes($this->no_apos(strip_tags($entry->author)));\r\n            $comment_author_url = addslashes($this->no_apos(strip_tags($entry->authoruri)));\r\n            $comment_author_email = addslashes($this->no_apos(strip_tags($entry->authoremail)));\r\n            $comment_date = $entry->updated;\r\n\r\n            // Clean up content\r\n            // Again, check if the Simplepie is already handling all of the cleaning\r\n            $comment_content = addslashes($this->no_apos(@html_entity_decode($entry->content, ENT_COMPAT, get_option('blog_charset'))));\r\n            $comment_content = preg_replace_callback('|<(/?[A-Z]+)|', array(&$this, '_normalize_tag'), $comment_content);\r\n            $comment_content = str_replace('<br>', '<br />', $comment_content);\r\n            $comment_content = str_replace('<hr>', '<hr />', $comment_content);\r\n\r\n            // Nested comment?\r\n            if (!is_null($entry->related))\r\n            {\r\n                $comment_parent = $this->blogs[$importing_blog]['comments'][$entry->related];\r\n            }\r\n\r\n            // if the post does not exist then we need stop and not add the comment\r\n            if ($comment_post_ID != 0)\r\n            {\r\n                // Checks for duplicates\r\n                if (isset($this->blogs[$importing_blog][$entry->id]) || $this->comment_exists($comment_post_ID, $comment_author, $comment_date))\r\n                {\r\n                    $this->blogs[$importing_blog]['comments_skipped']++;\r\n                } else\r\n                {\r\n                    $comment = compact('comment_post_ID', 'comment_author', 'comment_author_url', 'comment_author_email', 'comment_date', 'comment_content', 'comment_parent');\r\n\r\n                    $comment = wp_filter_comment($comment);\r\n                    $comment_id = wp_insert_comment($comment);\r\n\r\n                    $this->blogs[$importing_blog]['comments'][$entry->id] = $comment_id;\r\n                    $this->blogs[$importing_blog]['comments'][$entry->self] = $comment_id; //For nested comments\r\n\r\n                    $this->blogs[$importing_blog]['comments_done']++;\r\n                }\r\n            } else\r\n            {\r\n                $this->blogs[$importing_blog]['comments_skipped']++;\r\n            }\r\n            $this->save_vars();\r\n        }\r\n\r\n        function ajax_die($data)\r\n        {\r\n            ob_clean(); //Discard any debug messages or other fluff already sent\r\n            header('Content-Type: text/plain');\r\n            die($data);\r\n        }\r\n\r\n\r\n        function get_js_status($blog = false)\r\n        {\r\n            global $importing_blog;\r\n            if ($blog === false)\r\n                $blog = $this->blogs[$importing_blog];\r\n            else\r\n                $blog = $this->blogs[$blog];\r\n\r\n            $p1 = isset($blog['posts_done']) ? (int)$blog['posts_done'] : 0;\r\n            $p2 = isset($blog['total_posts']) ? (int)$blog['total_posts'] : 0;\r\n            $p3 = isset($blog['posts_skipped']) ? (int)$blog['posts_skipped'] : 0;\r\n            $c1 = isset($blog['comments_done']) ? (int)$blog['comments_done'] : 0;\r\n            $c2 = isset($blog['total_comments']) ? (int)$blog['total_comments'] : 0;\r\n            $c3 = isset($blog['comments_skipped']) ? (int)$blog['comments_skipped'] : 0;\r\n            return \"{p1:$p1,p2:$p2,p3:$p3,c1:$c1,c2:$c2,c3:$c3}\";\r\n        }\r\n\r\n        function get_author_form($blog = false)\r\n        {\r\n            global $importing_blog, $wpdb, $current_user;\r\n            if ($blog === false)\r\n                $blog = &$this->blogs[$importing_blog];\r\n            else\r\n                $blog = &$this->blogs[$blog];\r\n\r\n            if (!isset($blog['authors']))\r\n            {\r\n                $post_ids = array_values($blog['posts']);\r\n                $authors = (array )$wpdb->get_col(\"SELECT DISTINCT meta_value FROM $wpdb->postmeta WHERE meta_key = 'blogger_author' AND post_id IN (\" . join(',', $post_ids) . \")\");\r\n                $blog['authors'] = array_map(null, $authors, array_fill(0, count($authors), $current_user->ID));\r\n                $this->save_vars();\r\n            }\r\n\r\n            $directions = sprintf(__('All posts were imported with the current user as author. Use this form to move each Blogger user&#8217;s posts to a different WordPress user. You may <a href=\"%s\">add users</a> and then return to this page and complete the user mapping. This form may be used as many times as you like until you activate the &#8220;Restart&#8221; function below.',\r\n                'blogger-importer'), 'users.php');\r\n            $heading = __('Author mapping', 'blogger-importer');\r\n            $blogtitle = \"{$blog['title']} ({$blog['host']})\";\r\n            $mapthis = __('Blogger username', 'blogger-importer');\r\n            $tothis = __('WordPress login', 'blogger-importer');\r\n            $submit = esc_js(__('Save Changes', 'blogger-importer'));\r\n            $rows = '';\r\n\r\n            foreach ($blog['authors'] as $i => $author)\r\n                $rows .= \"<tr><td><label for='authors[$i]'>{$author[0]}</label></td><td><select name='authors[$i]' id='authors[$i]'>\" . $this->get_user_options($author[1]) . \"</select></td></tr>\";\r\n\r\n            return \"<div class='wrap'>\".screen_icon().\"<h2>$heading</h2><h3>$blogtitle</h3><p>$directions</p><form action='index.php?import=blogger&amp;noheader=true&saveauthors=1' method='post'><input type='hidden' name='blog' value='\" .\r\n                esc_attr($importing_blog) . \"' /><table cellpadding='5'><thead><td>$mapthis</td><td>$tothis</td></thead>$rows<tr><td></td><td class='submit'><input type='submit' class='button authorsubmit' value='$submit' /></td></tr></table></form></div>\";\r\n        }\r\n\r\n        function get_user_options($current)\r\n        {\r\n            global $importer_users;\r\n            if (!isset($importer_users))\r\n                $importer_users = (array )get_users(); //Function: get_users_of_blog() Deprecated in version 3.1. Use get_users() instead.\r\n\r\n            $options = '';\r\n\r\n            foreach ($importer_users as $user)\r\n            {\r\n                $sel = ($user->ID == $current) ? \" selected='selected'\" : '';\r\n                $options .= \"<option value='$user->ID'$sel>$user->display_name</option>\";\r\n            }\r\n\r\n            return $options;\r\n        }\r\n\r\n        function save_authors()\r\n        {\r\n            global $importing_blog, $wpdb;\r\n            $blog = &$this->blogs[$importing_blog]; //Get a reference to blogs so we don't have to write it longhand\r\n\r\n            $authors = (array )$_POST['authors'];\r\n\r\n            $host = $blog['host'];\r\n\r\n            // Get an array of posts => authors\r\n            $post_ids = (array )$wpdb->get_col($wpdb->prepare(\"SELECT post_id FROM $wpdb->postmeta WHERE meta_key = 'blogger_blog' AND meta_value = %s\", $host));\r\n            $post_ids = join(',', $post_ids);\r\n            $results = (array )$wpdb->get_results(\"SELECT post_id, meta_value FROM $wpdb->postmeta WHERE meta_key = 'blogger_author' AND post_id IN ($post_ids)\");\r\n            foreach ($results as $row)\r\n                $authors_posts[$row->post_id] = $row->meta_value;\r\n\r\n            foreach ($authors as $author => $user_id)\r\n            {\r\n                $user_id = (int)$user_id;\r\n\r\n                // Skip authors that haven't been changed\r\n                if ($user_id == $blog['authors'][$author][1])\r\n                    continue;\r\n\r\n                // Get a list of the selected author's posts\r\n                $post_ids = (array )array_keys($authors_posts, $blog['authors'][$author][0]);\r\n                $post_ids = join(',', $post_ids);\r\n\r\n                $wpdb->query($wpdb->prepare(\"UPDATE $wpdb->posts SET post_author = %d WHERE id IN ($post_ids)\", $user_id));\r\n                $blog['authors'][$author][1] = $user_id;\r\n            }\r\n            $this->save_vars();\r\n\r\n            wp_redirect('edit.php');\r\n        }\r\n\r\n        function restart()\r\n        {\r\n            global $wpdb;\r\n            $options = get_option('blogger_importer');\r\n\r\n            if ( check_admin_referer( 'clear-blogger-importer', 'clear-blogger-importer-nonce' ) ) {\r\n                delete_option('blogger_importer');\r\n                $wpdb->query(\"DELETE FROM $wpdb->postmeta WHERE meta_key = 'blogger_author'\");\r\n            }\r\n            wp_redirect('?import=blogger');\r\n            exit;\r\n        }\r\n\r\n        // Step 9: Congratulate the user\r\n        function congrats()\r\n        {\r\n            $blog = (int)$_GET['blog'];\r\n            echo '<h1>' . __('Congratulations!', 'blogger-importer') . '</h1><p>' . __('Now that you have imported your Blogger blog into WordPress, what are you going to do? Here are some suggestions:',\r\n                'blogger-importer') . '</p><ul><li>' . __('That was hard work! Take a break.', 'blogger-importer') . '</li>';\r\n            if (count($this->import['blogs']) > 1)\r\n                echo '<li>' . __('In case you haven&#8217;t done it already, you can import the posts from your other blogs:', 'blogger-importer') . $this->show_blogs() . '</li>';\r\n            if ($n = count($this->import['blogs'][$blog]['newusers']))\r\n                echo '<li>' . sprintf(__('Go to <a href=\"%s\" target=\"%s\">Authors &amp; Users</a>, where you can modify the new user(s) or delete them. If you want to make all of the imported posts yours, you will be given that option when you delete the new authors.',\r\n                    'blogger-importer'), 'users.php', '_parent') . '</li>';\r\n            echo '<li>' . __('For security, click the link below to reset this importer.', 'blogger-importer') . '</li>';\r\n            echo '</ul>';\r\n        }\r\n\r\n        // Figures out what to do, then does it.\r\n        function start()\r\n        {\r\n            if (isset($_POST['restart']))\r\n                $this->restart();\r\n\r\n            $options = get_option('blogger_importer');\r\n\r\n            if (is_array($options))\r\n                foreach ($options as $key => $value)\r\n                    $this->$key = $value;\r\n\r\n            if (isset($_REQUEST['blog']))\r\n            {\r\n                $blog = is_array($_REQUEST['blog']) ? array_shift($keys = array_keys($_REQUEST['blog'])) : $_REQUEST['blog'];\r\n                $blog = (int)$blog;\r\n                $result = $this->import_blog($blog);\r\n                if (is_wp_error($result))\r\n                    echo $result->get_error_message();\r\n            } elseif (isset($_GET['token']) && isset($_GET['token_secret']))\r\n                $this->auth();\r\n            elseif (isset($this->token) && isset($this->token_secret))\r\n                $this->show_blogs();\r\n            else\r\n                $this->greet();\r\n\r\n            $saved = $this->save_vars();\r\n\r\n            if ($saved && !isset($_GET['noheader']))\r\n            {\r\n                $restart = __('Restart', 'blogger-importer');\r\n                $message = __('We have saved some information about your Blogger account in your WordPress database. Clearing this information will allow you to start over. Restarting will not affect any posts you have already imported. If you attempt to re-import a blog, duplicate posts and comments will be skipped.',\r\n                    'blogger-importer');\r\n                $submit = esc_attr__('Clear account information', 'blogger-importer');\r\n                echo \"<div class='wrap'><h2>$restart</h2><p>$message</p><form method='post' action='?import=blogger&amp;noheader=true'>\";\r\n                wp_nonce_field( 'clear-blogger-importer', 'clear-blogger-importer-nonce' ); \r\n                echo \"<p class='submit' style='text-align:left;'><input type='submit' class='button' value='$submit' name='restart' /></p></form></div>\";\r\n            }\r\n        }\r\n\r\n        function save_vars()\r\n        {\r\n            $vars = get_object_vars($this);\r\n            update_option('blogger_importer', $vars);\r\n\r\n            return !empty($vars);\r\n        }\r\n\r\n        function comment_exists($post_id, $comment_author, $comment_date)\r\n        {\r\n            //Do we have 2 comments for the same author at the same time, on the same post?\r\n            //returns comment id\r\n            global $wpdb;\r\n\r\n            $comment_author = stripslashes($comment_author);\r\n            $comment_date = stripslashes($comment_date);\r\n\r\n            return $wpdb->get_var($wpdb->prepare(\"SELECT comment_ID FROM $wpdb->comments\r\n\t\t\tWHERE comment_post_ID = %s and comment_author = %s AND comment_date = %s\", $post_id, $comment_author, $comment_date));\r\n        }\r\n\r\n    }\r\n\r\n    class BloggerEntry\r\n    {\r\n        var $links = array();\r\n        var $categories = array();\r\n    }\r\n\r\n} // class_exists( 'WP_Importer' )\r\n\r\nfunction blogger_importer_init()\r\n{\r\n    load_plugin_textdomain('blogger-importer', false, dirname(plugin_basename(__file__)) . '/languages');\r\n\r\n    $blogger_import = new Blogger_Import();\r\n    register_importer('blogger', __('Blogger', 'blogger-importer'), __('Import categories, posts and comments then maps users from a Blogger blog.', 'blogger-importer'), array($blogger_import, 'start'));\r\n\r\n}\r\nadd_action('admin_init', 'blogger_importer_init');\r\n", "=== Plugin Name ===\r\nContributors: wordpressdotorg, Otto42, Workshopshed, SergeyBiryukov, rmccue\r\nDonate link: \r\nTags: importer, blogger\r\nRequires at least: 3.0\r\nTested up to: 3.6\r\nStable tag: 0.6\r\nLicense: GPLv2 or later\r\n\r\nImports posts, comments, and categories (blogger tags) from a Blogger blog then migrates authors to Wordpress users.\r\n\r\n== Description ==\r\n\r\nThe Blogger Importer imports your blog data from a Blogger site into a WordPress.org installation.\r\n\r\n= Items imported =\r\n\r\n* Categories\r\n* Posts (published, scheduled and draft)\r\n* Comments (not spam)\r\n\r\n= Items not imported =\r\n\r\n* Pages\r\n* Images (the images will appear in your new blog but will link to the old blogspot or picassa web locations)\r\n\r\n== Installation ==\r\n\r\n1. Upload the `blogger-importer` folder to the `/wp-content/plugins/` directory\r\n1. Activate the plugin through the 'Plugins' menu in WordPress\r\n\r\n= How to use =\r\n\r\n1. Blogger Importer is available from the WordPress Tools->Import screen.\r\n1. Press Authorise\r\n1. If you are not already logged into Google you will be asked to login\r\n1. You will be asked to grant Wordpress access to your Blogger information, to continue press Grant Access\r\n1. You will be presented with a list of all your blogs\r\n1. Select the appropriate blog and press the import button\r\n1. Wait whilst the posts and comments are imported\r\n1. Press the Set Authors button\r\n1. Select the appropriate mapping for the authors\r\n1. Review categories, posts and comments\r\n\r\nYou can now remove the importer plugin if you no longer need to use it.\r\n\r\n== Frequently Asked Questions ==\r\n\r\n= How do I re-import? =\r\n\r\nPress the clear account information button, then re-connect to blogger and re-import, the importer is designed not to re-import the same posts. If you need to do a full re-import then delete the posts and then empty the trash before re-importing.\r\n\r\n= How do I know which posts were imported? = \r\n\r\nEach of the posts loaded is tagged with a meta tags indicating where the posts were loaded from. The permalink will be set to the visible URL if the post was published or the internal ID if it was still a draft or scheduled post\r\n\r\n* blogger_author\r\n* blogger_blog\r\n* blogger_permalink\r\n\r\n= Why does it keep stopping? = \r\n\r\nThe importer is designed not to overload blogger or your site so only imports in batches and will run for a fixed number of seconds before pausing, the admin screen will refresh every few seconds to show how many it has done so far. Press continue to continue importing posts and comments.\r\n\r\n= After importing there are a lot of categories =\r\n\r\nBlogger does not distinguish between tags and categories so you will likely want to review what was imported and then use the categories to tags converter\r\n\r\n= What about pages? =\r\n\r\nThis importer does not handle blogger pages, you will need to manually transfer them.\r\n\r\n= What about images? =\r\n\r\nThe importer will simply load the tags for the images as they appear in your source data, so you will have references to blogspot and picassa based images. If you do not migrate these with a separate tool then these will be lost when you delete your old blogger blog.\r\n\r\n= Are the permalinks the same? =\r\n\r\nNo, Wordpress and Blogger handle the permalinks differently. However, it is possible to use the redirection plugin to map the old URLs across to the new URLs.\r\n\r\n= What about future posts? =\r\n\r\nThe scheduled posts will be transferred and will be published as specified. However, Blogger and Wordpress handle drafts differently, Wordpress does not support dates on draft posts so you will need to use a plugin if you wish to plan your writing schedule.\r\n\r\n= My posts and comments moved across but some things are stripped out =\r\n\r\nThe importer uses the SimplePie classes to process the data, these in turn use a Simplepie_Sanitize class to remove potentially malicious code from the source data.\r\n\r\n== Screenshots ==\r\n\r\n== Reference ==\r\n\r\n* https://developers.google.com/blogger/docs/1.0/developers_guide_php\r\n* https://developers.google.com/gdata/articles/oauth\r\n\r\n== Changelog ==\r\n\r\n= 0.6 = \r\n* Security improvements.\r\n\r\n= 0.5 =\r\n* Merged in fix by SergeyBiryukov http://core.trac.wordpress.org/ticket/16012\r\n* Merged in rmccue change to get_total_results to also use SimplePie from http://core.trac.wordpress.org/attachment/ticket/7652/7652-blogger.diff\r\n* Reviewed in rmccue's changes in http://core.trac.wordpress.org/attachment/ticket/7652/7652-separate.diff issues with date handling functions so skipped those\r\n* Moved SimplePie functions in  new class WP_SimplePie_Blog_Item incorporating get_draft_status and get_updated and convert date\r\n* Tested comments from source blog GMT-8, destination London (currently GMT-1), comment dates transferred correctly.\r\n* Fixed typo in oauth_get\r\n* Added screen_icon() to all pages\r\n* Added GeoTags as per spec on http://codex.wordpress.org/Geodata \r\n* Change by Otto42, rmccue to use Simplepie XML processing rather than Atomparser, http://core.trac.wordpress.org/ticket/14525 ref: http://core.trac.wordpress.org/attachment/ticket/7652/7652-blogger.diff (this also fixes http://core.trac.wordpress.org/ticket/15560)\r\n* Change by Otto42 to use OAuth rather than AuthSub authentication, should make authentication more reliable\r\n* Fix by Andy from Workshopshed to load comments and nested comments correctly\r\n* Fix by Andy from Workshopshed to correctly pass the blogger start-index and max-results parameters to oAuth functions and to process more than one batch http://core.trac.wordpress.org/ticket/19096\r\n* Fix by Andy from Workshopshed error about incorrect enqueuing of scripts also changed styles to work the same\r\n* Change by Andy from Workshopshed testing in debug mode and wrapped ajax return into a function to suppress debug messages\r\n* Fix by Andy from Workshopshed notices for undefined variables.\r\n* Change by Andy from Workshopshed Added tooltip to results table to show numbers of posts and comments skipped (duplicates / missing key)\r\n* Fix by Andy from Workshopshed incorrectly checking for duplicates based on only the date and username, this gave false positives when large numbers of comments, particularly anonymous ones.\r\n\r\n= 0.4 =\r\n* Fix for tracking images being added by Blogger to non-authenticated feeds http://core.trac.wordpress.org/ticket/17623\r\n\r\n= 0.3 =\r\n* Bugfix for 403 Invalid AuthSub Token http://core.trac.wordpress.org/ticket/14629\r\n\r\n= 0.1 =\r\n* Initial release\r\n\r\n== Upgrade Notice ==\r\n\r\n= 0.5 =\r\n\r\nMerged in fixes found in Trac\r\nThis version is a significant re-write based on previous versions. \r\n\r\n"], "filenames": ["blogger-importer.php", "readme.txt"], "buggy_code_start_loc": [8, 6], "buggy_code_end_loc": [987, 97], "fixing_code_start_loc": [8, 6], "fixing_code_end_loc": [992, 101], "type": "CWE-352", "message": "A vulnerability was found in Blogger Importer Plugin up to 0.5 on WordPress. It has been classified as problematic. Affected is the function start/restart of the file blogger-importer.php. The manipulation leads to cross-site request forgery. It is possible to launch the attack remotely. Upgrading to version 0.6 is able to address this issue. The name of the patch is b83fa4f862b0f19a54cfee76060ec9c2e7f7ca70. It is recommended to upgrade the affected component. VDB-230658 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2013-10027", "sourceIdentifier": "cna@vuldb.com", "published": "2023-06-04T14:15:09.397", "lastModified": "2023-06-09T19:05:15.310", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Blogger Importer Plugin up to 0.5 on WordPress. It has been classified as problematic. Affected is the function start/restart of the file blogger-importer.php. The manipulation leads to cross-site request forgery. It is possible to launch the attack remotely. Upgrading to version 0.6 is able to address this issue. The name of the patch is b83fa4f862b0f19a54cfee76060ec9c2e7f7ca70. It is recommended to upgrade the affected component. VDB-230658 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:blogger_importer:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "0.6", "matchCriteriaId": "34BFDCCF-F4E5-45FF-ACA7-7431B9E71AF1"}]}]}], "references": [{"url": "https://github.com/wp-plugins/blogger-importer/commit/b83fa4f862b0f19a54cfee76060ec9c2e7f7ca70", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://vuldb.com/?ctiid.230658", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.230658", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wp-plugins/blogger-importer/commit/b83fa4f862b0f19a54cfee76060ec9c2e7f7ca70"}}