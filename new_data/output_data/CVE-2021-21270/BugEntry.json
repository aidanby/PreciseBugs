{"buggy_code": ["$defaultTentacleDownloadUrl = \"https://octopus.com/downloads/latest/OctopusTentacle\"\n$defaultTentacleDownloadUrl64 = \"https://octopus.com/downloads/latest/OctopusTentacle64\"\n\n# dot-source the helper file (cannot load as a module due to scope considerations)\n. (Join-Path -Path (Split-Path (Split-Path $PSScriptRoot -Parent) -Parent) -ChildPath 'OctopusDSCHelpers.ps1')\n\nfunction Get-APIResult {\n    param (\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $ServerUrl,\n\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $API,\n\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $APIKey\n    )\n\n    # Check to see if the server url ends with a /\n    if (!$ServerUrl.EndsWith(\"/\")) {\n        # Add trailing slash\n        $ServerUrl = \"$ServerUrl/\"\n    }\n\n    # form the api endpoint\n    $apiEndpoint = \"{0}api{1}\" -f $ServerUrl, $API\n\n    # Call API and capture results\n    $results = Invoke-WebRequest -Uri $apiEndpoint -Headers @{\"X-Octopus-ApiKey\"=\"$APIKey\"} -UseBasicParsing\n\n    # return the result\n    return ConvertFrom-Json -InputObject $results\n}\n\nfunction Add-SpaceIfPresent {\n    param (\n        [string]\n        $Space,\n        [string[]]\n        $argumentList\n     )\n    if(![String]::IsNullOrEmpty($Space)) {\n        $argumentList += @(\"--space\", $Space)\n    }\n\n    return $argumentList\n}\n\nfunction Get-MachineFromOctopusServer {\n    param (\n        [Parameter(Mandatory=$true)]\n        [String]\n        $ServerUrl,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $APIKey,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $Instance,\n        [Parameter(Mandatory=$true)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [System.String]\n        $SpaceId\n    )\n    $apiUrl = \"/machines/all\"\n    if (![String]::IsNullOrEmpty($SpaceId)) {\n        $apiUrl = \"/$SpaceId\" + $apiUrl\n    }\n\n    $machines = Get-APIResult -ServerUrl $ServerUrl -APIKey $APIKey -API $apiUrl\n    $thumbprint = Get-TentacleThumbprint -Instance $Instance\n    $machine = $machines | Where-Object {$_.Thumbprint -eq $thumbprint}\n\n    return $machine\n}\n\nfunction Get-WorkerFromOctopusServer\n{\n    param (\n        [Parameter(Mandatory=$true)]\n        [String]\n        $ServerUrl,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $APIKey,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $Instance,\n        [Parameter(Mandatory=$true)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [System.String]\n        $SpaceId\n    )\n    $apiUrl = \"/workers/all\"\n    if (![String]::IsNullOrEmpty($SpaceId)) {\n        $apiUrl = \"/$SpaceId\" + $apiUrl\n    }\n\n    $workers = Get-APIResult -ServerUrl $ServerUrl -APIKey $APIKey -API $apiUrl\n    $thumbprint = Get-TentacleThumbprint -Instance $Instance\n    $worker = $workers | Where-Object {$_.Thumbprint -eq $thumbprint}\n\n    return $worker\n}\n\nfunction Get-TentacleThumbprint {\n    param (\n        [Parameter(Mandatory=$true)]\n        [string]\n        $Instance\n    )\n\n    $thumbprint = Invoke-TentacleCommand @(\"show-thumbprint\", \"--instance\", $Instance, \"--console\", \"--thumbprint-only\")\n    return $thumbprint\n}\n\nfunction Get-WorkerPoolMembership {\n    [OutputType([object[]])]\n    param (\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $ServerUrl,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $Thumbprint,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $ApiKey,\n        [Parameter(Mandatory=$true)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [System.String]\n        $SpaceId\n    )\n    $apiUrl = \"/workerpools/all\"\n\n    if (![String]::IsNullOrEmpty($SpaceId)) {\n        $apiUrl = \"/$SpaceId\" + $apiUrl\n    }\n\n    $octoWorkerPools = Get-APIResult -ServerUrl $ServerUrl -ApiKey $ApiKey -API $apiUrl\n\n    $workerPoolMembership = @()\n    $workersUrl = \"/workers/all\"\n    if (![String]::IsNullOrEmpty($SpaceId)) {\n        $workersUrl = \"/$SpaceId\" + $workersUrl\n    }\n    $workersall = Get-APIResult -ServerUrl $ServerUrl -ApiKey $ApiKey -API $workersUrl\n\n    foreach ($octoWorkerPool in $octoWorkerPools) {\n        $workers = $workersall | Where-Object { $_.WorkerPoolIds -contains $($octoWorkerPool.Id) }\n        # Check to see if the thumbprint is listed\n        $workerWithThumbprint = ($workers | Where-Object {$_.Thumbprint -eq $Thumbprint})\n        if ($null -ne $workerWithThumbprint) {\n            $workerPoolMembership += $octoWorkerPool\n        }\n    }\n    return ,$workerPoolMembership\n}\n\nfunction Test-ParameterSet {\n    param(\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $publicHostNameConfiguration,\n        [Parameter(Mandatory=$true)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [System.String]\n        $CustomPublicHostName,\n        [System.String[]]\n        $Environments = \"\",\n        [System.String[]]\n        $Roles = \"\",\n        [System.String[]]\n        $WorkerPools,\n        [System.String[]]\n        $Tenants,\n        [System.String[]]\n        $TenantTags\n    )\n\n    if($publicHostNameConfiguration -eq \"Custom\" -and [String]::IsNullOrWhiteSpace($CustomPublicHostName)) {\n        throw \"Invalid configuration requested. \" + `\n            \"PublicHostNameConfiguration was set to 'Custom' but an invalid or null CustomPublicHostName was specified.\"\n    } elseif ((Test-Value($Environments)) -and (Test-Value($WorkerPools))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered as a worker, but still provided the 'Environments' configuration argument. \" + `\n            \"Please remove the 'Environments' configuration argument.\"\n    } elseif ((Test-Value($Roles)) -and (Test-Value($WorkerPools))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered as a worker, but still provided the 'Roles' configuration argument. \" + `\n            \"Please remove the 'Roles' configuration argument.\"\n    } elseif ((Test-Value($Tenants)) -and (Test-Value($WorkerPools))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered as a worker, but still provided the 'Tenants' configuration argument. \" + `\n            \"Please remove the 'Tenants' configuration argument.\"\n    } elseif ((Test-Value($TenantTags)) -and (Test-Value($WorkerPools))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered as a worker, but still provided the 'TenantTags' configuration argument. \" + `\n            \"Please remove the 'TenantTags' configuration argument.\"\n    }\n}\n\nfunction Get-Space {\n    param(\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $Space,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $ServerUrl,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $APIKey\n    )\n    $spaces = Get-APIResult -ServerUrl $ServerUrl -APIKey $APIKey -API \"/spaces/all\"\n    return ($spaces | Where-Object {$_.Name -eq $Space})\n}\n\nfunction Get-TargetResource {\n    [OutputType([Hashtable])]\n    param (\n        [ValidateSet(\"Present\", \"Absent\")]\n        [string]$Ensure = \"Present\",\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$Name,\n        [ValidateSet(\"Started\", \"Stopped\")]\n        [string]$State = \"Started\",\n        [ValidateSet(\"Listen\", \"Poll\")]\n        [string]$CommunicationMode = \"Listen\",\n        [string]$ApiKey,\n        [string]$DisplayName = \"$($env:COMPUTERNAME)_$Name\",\n        [string]$OctopusServerUrl,\n        [string[]]$Environments = \"\",\n        [string[]]$Roles = \"\",\n        [string]$Policy,\n        [string[]]$Tenants = \"\",\n        [string[]]$TenantTags = \"\",\n        [string]$DefaultApplicationDirectory,\n        [int]$ListenPort = 10933,\n        [int]$TentacleCommsPort = 0,\n        [int]$ServerPort = 10943,\n        [string]$tentacleDownloadUrl = $defaultTentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64 = $defaultTentacleDownloadUrl64,\n        [ValidateSet(\"PublicIp\", \"FQDN\", \"ComputerName\", \"Custom\")]\n        [string]$PublicHostNameConfiguration = \"PublicIp\",\n        [string]$CustomPublicHostName,\n        [string]$TentacleHomeDirectory = \"$($env:SystemDrive)\\Octopus\",\n        [bool]$RegisterWithServer = $true,\n        [string]$OctopusServerThumbprint,\n        [PSCredential]$TentacleServiceCredential,\n        [string[]]$WorkerPools,\n        [ValidateSet(\"Untenanted\",\"TenantedOrUntenanted\",\"Tenanted\")]\n        [string]$TenantedDeploymentParticipation,\n        [string]$Space\n    )\n\n    Test-ParameterSet   -publicHostNameConfiguration $PublicHostNameConfiguration `\n                        -customPublicHostName $CustomPublicHostName `\n                        -Environments $Environments `\n                        -Roles $Roles `\n                        -WorkerPools $WorkerPools `\n                        -Tenants $Tenants `\n                        -TenantTags $TenantTags\n\n    Write-Verbose \"Checking if Tentacle is installed\"\n    $installLocation = (Get-ItemProperty -path \"HKLM:\\Software\\Octopus\\Tentacle\" -ErrorAction SilentlyContinue).InstallLocation\n    $present = ($null -ne $installLocation)\n    Write-Verbose \"Tentacle present: $present\"\n\n    $currentEnsure = if ($present) { \"Present\" } else { \"Absent\" }\n\n    $serviceName = (Get-TentacleServiceName $Name)\n    Write-Verbose \"Checking for Windows Service: $serviceName\"\n    $serviceInstance = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n    $currentState = \"Stopped\"\n    if ($null -ne $serviceInstance) {\n        Write-Verbose \"Windows service: $($serviceInstance.Status)\"\n        if ($serviceInstance.Status -eq \"Running\") {\n            $currentState = \"Started\"\n        }\n\n        if ($currentEnsure -eq \"Absent\") {\n            Write-Verbose \"Since the Windows Service is still installed, the service is present\"\n            $currentEnsure = \"Present\"\n        }\n    } else {\n        Write-Verbose \"Windows service: Not installed\"\n        $currentEnsure = \"Absent\"\n    }\n\n    $originalDownloadUrl = $null\n    if (Test-Path \"$($env:SystemDrive)\\Octopus\\Octopus.DSC.installstate\") {\n        $originalDownloadUrl = (Get-Content -Raw -Path \"$($env:SystemDrive)\\Octopus\\Octopus.DSC.installstate\" | ConvertFrom-Json).TentacleDownloadUrl\n    }\n\n    return @{\n        Name                = $Name;\n        Ensure              = $currentEnsure;\n        State               = $currentState;\n        TentacleDownloadUrl = $originalDownloadUrl;\n    };\n}\n\n# test a variable has a value (whether its an array or string)\nfunction Test-Value($value) {\n    if ($null -eq $value) { return $false }\n    if ($value -eq \"\") { return $false }\n    if ($value.length -eq 0) { return $false }\n    if ($value.length -eq 1 -and $value[0].length -eq 0) { return $false }\n    return $true\n}\n\nfunction Confirm-RegistrationParameter {\n    param (\n        [Parameter(Mandatory)]\n        [ValidateSet(\"Present\", \"Absent\")]\n        [string]\n        $Ensure,\n        [bool]$RegisterWithServer,\n        [string[]]$Environments,\n        [string[]]$Roles,\n        [string]$Policy,\n        [string[]]$Tenants,\n        [string[]]$TenantTags,\n        [string]$OctopusServerUrl,\n        [string]$ApiKey\n    )\n\n    if ($Ensure -eq \"Absent\") {\n        if ((-not (Test-Value($ApiKey))) -and (($RegisterWithServer))) {\n            throw \"Invalid configuration requested. \" + `\n                \"You have asked for the Tentacle to be de-registered from the server, but not provided the 'ApiKey' configuration argument. \" + `\n                \"Please specify the 'ApiKey' configuration argument or set 'RegisterWithServer = `$False'.\"\n        }\n    } elseif ((Test-Value($Roles)) -and (-not ($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle not to be registered with the server, but still provided the 'Roles' configuration argument. \" + `\n            \"Please remove the 'Roles' configuration argument or set 'RegisterWithServer = `$True'.\"\n    } elseif ((Test-Value($Environments)) -and (-not ($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle not to be registered with the server, but still provided the 'Environments' configuration argument. \" + `\n            \"Please remove the 'Environments' configuration argument or set 'RegisterWithServer = `$True'.\"\n    } elseif ((Test-Value($Tenants)) -and (-not ($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle not to be registered with the server, but still provided the 'Tenants' configuration argument. \" + `\n            \"Please remove the 'Tenants' configuration argument or set 'RegisterWithServer = `$True'.\"\n    } elseif ((Test-Value($TenantTags)) -and (-not ($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle not to be registered with the server, but still provided the 'TenantTags' configuration argument. \" + `\n            \"Please remove the 'TenantTags' configuration argument or set 'RegisterWithServer = `$True'.\"\n    } elseif ((Test-Value($Policy)) -and (-not ($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle not to be registered with the server, but still provided the 'Policy' configuration argument. \" + `\n            \"Please remove the 'Policy' configuration argument or set 'RegisterWithServer = `$True'.\"\n    } elseif ((-not (Test-Value($OctopusServerUrl))) -and (($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered with the server, but not provided the 'OctopusServerUrl' configuration argument. \" + `\n            \"Please specify the 'OctopusServerUrl' configuration argument or set 'RegisterWithServer = `$False'.\"\n    } elseif ((-not (Test-Value($ApiKey))) -and (($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered with the server, but not provided the 'ApiKey' configuration argument. \" + `\n            \"Please specify the 'ApiKey' configuration argument or set 'RegisterWithServer = `$False'.\"\n    }\n}\n\nfunction Confirm-RequestedState() {\n    param (\n        [Parameter(Mandatory)]\n        [Hashtable]$parameters\n    )\n    if ($parameters['Ensure'] -eq \"Absent\" -and $parameters['State'] -eq \"Started\") {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the service to not exist, but also be running at the same time. \" + `\n            \"You probably want 'State = `\"Stopped`\"'.\"\n    }\n}\n\nfunction Set-TargetResource {\n    param (\n        [ValidateSet(\"Present\", \"Absent\")]\n        [string]$Ensure = \"Present\",\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$Name,\n        [ValidateSet(\"Started\", \"Stopped\")]\n        [string]$State = \"Started\",\n        [ValidateSet(\"Listen\", \"Poll\")]\n        [string]$CommunicationMode = \"Listen\",\n        [string]$ApiKey,\n        [string]$OctopusServerUrl,\n        [string]$DisplayName = \"$($env:COMPUTERNAME)_$Name\",\n        [string[]]$Environments = \"\",\n        [string[]]$Roles = \"\",\n        [string]$Policy,\n        [string[]]$Tenants = \"\",\n        [string[]]$TenantTags = \"\",\n        [string]$DefaultApplicationDirectory = \"$($env:SystemDrive)\\Applications\",\n        [int]$ListenPort = 10933,\n        [int]$TentacleCommsPort = 0,\n        [int]$ServerPort = 10943,\n        [string]$tentacleDownloadUrl = $defaultTentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64 = $defaultTentacleDownloadUrl64,\n        [ValidateSet(\"PublicIp\", \"FQDN\", \"ComputerName\", \"Custom\")]\n        [string]$PublicHostNameConfiguration = \"PublicIp\",\n        [string]$CustomPublicHostName,\n        [string]$TentacleHomeDirectory = \"$($env:SystemDrive)\\Octopus\",\n        [bool]$RegisterWithServer = $true,\n        [string]$OctopusServerThumbprint,\n        [PSCredential]$TentacleServiceCredential,\n        [string[]]$WorkerPools,\n        [ValidateSet(\"Untenanted\",\"TenantedOrUntenanted\",\"Tenanted\")]\n        [string]$TenantedDeploymentParticipation,\n        [string]$Space\n    )\n    Confirm-RequestedState $PSBoundParameters\n    Confirm-RegistrationParameter `\n        -Ensure $Ensure `\n        -RegisterWithServer $RegisterWithServer `\n        -Environments $Environments `\n        -Roles $Roles `\n        -Policy $Policy `\n        -Tenants $Tenants `\n        -TenantTags $TenantTags `\n        -OctopusServerUrl $OctopusServerUrl `\n        -ApiKey $ApiKey\n\n    $currentResource = (Get-TargetResource -Name $Name -Ensure $Ensure)\n\n    Write-Verbose \"Configuring Tentacle...\"\n    if ($State -eq \"Stopped\" -and $currentResource[\"State\"] -eq \"Started\") {\n        $serviceName = (Get-TentacleServiceName $Name)\n        Write-Verbose \"Stopping $serviceName\"\n        Stop-Service -Name $serviceName -Force\n    }\n\n    if ($Ensure -eq \"Absent\" -and $currentResource[\"Ensure\"] -eq \"Present\") {\n        if ($RegisterWithServer) {\n            Remove-TentacleRegistration -name $Name -apiKey $ApiKey -octopusServerUrl $OctopusServerUrl -Space $Space\n        }\n\n        $serviceName = (Get-TentacleServiceName $Name)\n        Write-Verbose \"Deleting service $serviceName...\"\n        Invoke-AndAssert { & sc.exe delete $serviceName }\n\n        $otherServices = @(Get-CimInstance win32_service | Where-Object {$_.PathName -like \"`\"$($env:ProgramFiles)\\Octopus Deploy\\Tentacle\\Tentacle.exe*\"})\n\n        if ($otherServices.length -eq 0) {\n            # Uninstall msi\n            Invoke-MsiUninstall\n        }\n        else {\n            Write-Verbose \"Skipping uninstall, as other tentacles still exist:\"\n            foreach ($otherService in $otherServices) {\n                Write-Verbose \" - $($otherService.Name)\"\n            }\n        }\n    }\n    elseif ($Ensure -eq \"Present\" -and $currentResource[\"Ensure\"] -eq \"Absent\") {\n        Write-Verbose \"Installing Tentacle...\"\n        New-Tentacle -name $Name `\n            -apiKey $ApiKey `\n            -octopusServerUrl $OctopusServerUrl `\n            -listenPort $ListenPort `\n            -tentacleCommsPort $TentacleCommsPort `\n            -displayName $DisplayName `\n            -environments $Environments `\n            -roles $Roles `\n            -policy $Policy `\n            -tenants $Tenants `\n            -tenantTags $TenantTags `\n            -defaultApplicationDirectory $DefaultApplicationDirectory `\n            -tentacleDownloadUrl $tentacleDownloadUrl `\n            -tentacleDownloadUrl64 $tentacleDownloadUrl64 `\n            -communicationMode $CommunicationMode `\n            -serverPort $ServerPort `\n            -publicHostNameConfiguration $PublicHostNameConfiguration `\n            -customPublicHostName $CustomPublicHostName `\n            -tentacleHomeDirectory $TentacleHomeDirectory `\n            -registerWithServer $RegisterWithServer `\n            -octopusServerThumbprint $OctopusServerThumbprint `\n            -TentacleServiceCredential $TentacleServiceCredential `\n            -WorkerPools $WorkerPools `\n            -TenantedDeploymentParticipation $TenantedDeploymentParticipation  `\n            -Space $Space\n\n        Write-Verbose \"Tentacle installed!\"\n    }\n    elseif ($Ensure -eq \"Present\" -and $currentResource[\"TentacleDownloadUrl\"] -ne (Get-TentacleDownloadUrl $tentacleDownloadUrl $tentacleDownloadUrl64)) {\n        Write-Verbose \"Upgrading Tentacle...\"\n        $serviceName = (Get-TentacleServiceName $Name)\n        Stop-Service -Name $serviceName\n        Install-Tentacle -name $name `\n                         -tentacleDownloadUrl $tentacleDownloadUrl `\n                         -tentacleDownloadUrl64 $tentacleDownloadUrl64 `\n                         -tentacleHomeDirectory $TentacleHomeDirectory\n        if ($State -eq \"Started\") {\n            Start-Service $serviceName\n        }\n        Write-Verbose \"Tentacle upgraded!\"\n    }\n    elseif ($Ensure -eq \"Present\" -and $currentResource[\"Ensure\"] -eq \"Present\") {\n        Write-Verbose \"Upgrading/modifying Tentacle...\"\n        if (($null -ne $WorkerPools) -and ($WorkerPools.Count -gt 0)) {\n            Write-Verbose \"Registering $Name as a worker in worker pools $($workerPools -join \", \").\"\n            Add-TentacleToWorkerPool -name $name `\n                -octopusServerUrl $octopusServerUrl `\n                -apiKey $apiKey `\n                -workerPools $workerPools `\n                -communicationMode $communicationMode `\n                -displayName $displayName `\n                -publicHostNameConfiguration $publicHostNameConfiguration `\n                -customPublicHostName $customPublicHostName `\n                -listenPort $listenPort `\n                -tentacleCommsPort $tentacleCommsPort `\n                -space $space\n        } elseif (![string]::IsNullOrEmpty($Environments) -and ![string]::IsNullOrEmpty($Roles)) {\n             Register-Tentacle -name $Name `\n                 -apiKey $ApiKey `\n                 -octopusServerUrl $OctopusServerUrl `\n                 -environments $Environments `\n                 -roles $Roles `\n                 -tenants $Tenants `\n                 -tenantTags $TenantTags `\n                 -policy $Policy `\n                 -communicationMode $CommunicationMode `\n                 -displayName $DisplayName `\n                 -publicHostNameConfiguration $PublicHostNameConfiguration `\n                 -customPublicHostName $CustomPublicHostName `\n                 -listenPort $ListenPort `\n                 -serverPort $ServerPort `\n                 -tentacleCommsPort $TentacleCommsPort `\n                 -TenantedDeploymentParticipation $TenantedDeploymentParticipation `\n                 -Space $Space\n         }\n    }\n\n    if ($State -eq \"Started\" -and $currentResource[\"State\"] -eq \"Stopped\") {\n        $serviceName = (Get-TentacleServiceName $Name)\n        Write-Verbose \"Starting $serviceName\"\n        Start-Service -Name $serviceName\n    }\n\n    Write-Verbose \"Finished\"\n}\n\nfunction Test-TargetResource {\n    param (\n        [ValidateSet(\"Present\", \"Absent\")]\n        [string]$Ensure = \"Present\",\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$Name,\n        [ValidateSet(\"Started\", \"Stopped\")]\n        [string]$State = \"Started\",\n        [ValidateSet(\"Listen\", \"Poll\")]\n        [string]$CommunicationMode = \"Listen\",\n        [string]$ApiKey,\n        [string]$OctopusServerUrl,\n        [string]$DisplayName = \"$($env:COMPUTERNAME)_$Name\",\n        [string[]]$Environments = \"\",\n        [string[]]$Roles = \"\",\n        [string]$Policy,\n        [string[]]$Tenants = \"\",\n        [string[]]$TenantTags = \"\",\n        [string]$DefaultApplicationDirectory,\n        [int]$ListenPort = 10933,\n        [int]$TentacleCommsPort = 0,\n        [int]$ServerPort = 10943,\n        [string]$tentacleDownloadUrl = $defaultTentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64 = $defaultTentacleDownloadUrl64,\n        [ValidateSet(\"PublicIp\", \"FQDN\", \"ComputerName\", \"Custom\")]\n        [string]$PublicHostNameConfiguration = \"PublicIp\",\n        [string]$CustomPublicHostName,\n        [string]$TentacleHomeDirectory = \"$($env:SystemDrive)\\Octopus\",\n        [bool]$RegisterWithServer = $true,\n        [string]$OctopusServerThumbprint,\n        [PSCredential]$TentacleServiceCredential,\n        [string[]]$WorkerPools,\n        [ValidateSet(\"Untenanted\",\"TenantedOrUntenanted\",\"Tenanted\")]\n        [string]$TenantedDeploymentParticipation,\n        [string]$Space\n    )\n\n    $currentResource = (Get-TargetResource -Name $Name)\n\n    $ensureMatch = $currentResource[\"Ensure\"] -eq $Ensure\n    Write-Verbose \"Ensure: $($currentResource[\"Ensure\"]) vs. $Ensure = $ensureMatch\"\n    if (!$ensureMatch) {\n        return $false\n    }\n\n    $stateMatch = $currentResource[\"State\"] -eq $State\n    Write-Verbose \"State: $($currentResource[\"State\"]) vs. $State = $stateMatch\"\n    if (!$stateMatch) {\n        return $false\n    }\n\n    if ($null -ne $currentResource[\"TentacleDownloadUrl\"]) {\n        $requestedDownloadUrl = Get-TentacleDownloadUrl $tentacleDownloadUrl $tentacleDownloadUrl64\n        $downloadUrlsMatch = $requestedDownloadUrl -eq $currentResource[\"TentacleDownloadUrl\"]\n        Write-Verbose \"Download Url: $($currentResource[\"TentacleDownloadUrl\"]) vs. $requestedDownloadUrl = $downloadUrlsMatch\"\n        if (!$downloadUrlsMatch) {\n            return $false\n        }\n    }\n\n    if ($Ensure -eq \"Present\" -and ![string]::IsNullOrEmpty($OctopusServerUrl)) {\n        if (![string]::IsNullOrEmpty($Space)) {\n            $spaceRef = Get-Space -Space $Space -ServerUrl $OctopusServerUrl -APIKey $ApiKey\n\n            if ($null -eq $spaceRef) {\n                throw \"Unable to find a space by the name of '$Space'\"\n            }\n        }\n\n        if ($null -ne $WorkerPools -and $WorkerPools.Length -gt 0) {\n            $worker = Get-WorkerFromOctopusServer -ServerUrl $OctopusServerUrl -APIKey $ApiKey -Instance $Name -SpaceId $spaceRef.Id\n\n            if ($null -ne $worker) {\n                $workerPoolMembership = Get-WorkerPoolMembership -ServerUrl $OctopusServerUrl -ApiKey $ApiKey -Thumbprint $worker.Endpoint.Thumbprint -SpaceId $spaceRef.Id\n\n                if ($WorkerPools.Count -ne $workerPoolMembership.Count) {\n                    Write-Verbose \"Worker pools [$WorkerPools] vs [$workerPoolMembership] = $false\"\n                    return $false\n                } else {\n                    foreach ($workerPool in $workerPoolMembership) {\n                        if ($WorkerPools -notcontains $workerPool.Name) {\n                            Write-Verbose \"Worker pools: [$WorkerPools] vs [$workerPoolMembership] = $false\"\n                            return $false\n                        }\n                    }\n                }\n            } else {\n                if ([string]::IsNullOrEmpty($Space)) {\n                    Write-Verbose \"Worker '$Name' is not registered in Space '$Space'\"\n                } else {\n                    Write-Verbose \"Worker '$Name' is not registered\"\n                }\n                return $false\n            }\n        } else {\n            $machine = Get-MachineFromOctopusServer -ServerUrl $OctopusServerUrl -APIKey $ApiKey -Instance $Name -SpaceId $spaceRef.Id\n\n            if ($null -ne $machine) {\n                if ($Environments.Count -ne $machine.EnvironmentIds.Count) {\n                    Write-Verbose \"Environments: [$Environments] vs [$machine.EnvironmentIds]: $false\"\n                    return $false\n                } else {\n                    foreach ($environmentId in $machine.EnvironmentIds) {\n                        $environmentUrl = \"/environments/$environmentId\"\n                        if ($null -ne $spaceRef) {\n                            $environmentUrl = \"/$($spaceRef.Id)\" + $environmentUrl\n                        }\n                        $environment = Get-APIResult -ServerUrl $OctopusServerUrl -ApiKey $ApiKey -API $environmentUrl\n                        if ($Environments -notcontains $environment.Name) {\n                            Write-Verbose \"Environments: Machine currently has environment $($environment.Name), which is not listed in the passed in list [$Environments].  Machine is not in desired state.\"\n                            return $false\n                        }\n                    }\n                }\n\n                if ($Roles.Count -ne $machine.Roles.Count) {\n                    Write-Verbose \"Roles: [$Roles] vs [$($machine.Roles)]: $false\"\n                    return $false\n                } else {\n                    $differences = Compare-Object -ReferenceObject $Roles -DifferenceObject $machine.Roles\n                    if ($null -ne $differences) {\n                        Write-Verbose \"Roles: [$Roles] vs [$($machine.Roles)]: $false\"\n                        return $false\n                    }\n                }\n            } else {\n                if ([string]::IsNullOrEmpty($Space)) {\n                    Write-Verbose \"Machine '$Name' is not registered\"\n                } else {\n                    Write-Verbose \"Machine '$Name' is not registered in Space '$Space'\"\n                }\n                return $false\n            }\n        }\n    }\n\n    Write-Verbose \"Everything looks to be in working order\"\n    return $true\n}\n\nfunction Get-TentacleServiceName {\n    param ( [string]$instanceName )\n\n    if ($instanceName -eq \"Tentacle\") {\n        return \"OctopusDeploy Tentacle\"\n    }\n    else {\n        return \"OctopusDeploy Tentacle: $instanceName\"\n    }\n}\n\n# After the Tentacle is registered with Octopus, Tentacle listens on a TCP port, and Octopus connects to it. The Octopus server\n# needs to know the public IP address to use to connect to this Tentacle instance.\nfunction Get-MyPublicIPAddress {\n    [CmdletBinding()]\n    [Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"PSUseDeclaredVarsMoreThanAssignments\", \"\")]\n    param()\n    Write-Verbose \"Getting public IP address\"\n\n    [Net.ServicePointManager]::SecurityProtocol = @(\n        [Net.SecurityProtocolType]::Tls12,\n        [Net.SecurityProtocolType]::Tls11\n    )\n\n    $publicIPServices = @('https://api.ipify.org/', 'https://canhazip.com/', 'https://ipv4bot.whatismyipaddress.com/')\n    $ip = $null\n    $x = 0\n    while($null -eq $ip -and $x -lt $publicIPServices.Length) {\n        try {\n            $target = $publicIpServices[$x++]\n            $ip = Invoke-RestMethod -Uri $target\n        }\n        catch {\n            Write-Verbose \"Failed to find a public IP via $target. Reason: $_ \"\n        }\n    }\n\n    if($null -eq $ip) {\n        throw \"Unable to determine your Public IP address. Please supply a hostname or IP address via the PublicHostName parameter.\"\n    }\n\n    try {\n        [Ipaddress]$ip | Out-Null\n    } catch {\n        throw \"Detected Public IP address '$ip', but we we couldn't parse it as an IPv4 address.\"\n    }\n\n    return $ip\n}\n\n\nfunction Install-Tentacle {\n    param (\n        [string]$name,\n        [string]$tentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64,\n        [string]$tentacleHomeDirectory\n    )\n    Write-Verbose \"Beginning Tentacle installation\"\n\n    $actualTentacleDownloadUrl = Get-TentacleDownloadUrl $tentacleDownloadUrl $tentacleDownloadUrl64\n\n    if (-not (Test-Path $tentacleHomeDirectory)) {\n        Write-Verbose \"Tentacle Home directory does not exist. Creating...\"\n        New-Item -Path \"$tentacleHomeDirectory\" -ItemType Directory | Out-Null\n    }\n    $tentaclePath = \"$tentacleHomeDirectory\\Tentacle.msi\"\n    if ((Test-Path $tentaclePath) -eq $true) {\n        Remove-Item $tentaclePath -force\n    }\n    Write-Verbose \"Downloading Octopus Tentacle MSI from $actualTentacleDownloadUrl to $tentaclePath\"\n    Request-File $actualTentacleDownloadUrl $tentaclePath\n\n    if (-not (Test-Path $env:TEMP)) {\n        Write-Verbose \"Configured temp folder does not currently exist, creating...\"\n        New-Item $env:TEMP -ItemType Directory -force | Out-Null # an edge case when the env var exists but the folder does not\n    }\n\n    $logDirectory = Get-LogDirectory\n    Invoke-MsiExec -name $name -logDirectory $logDirectory -msiPath $tentaclePath\n\n    if (-not (Test-Path \"$($env:SystemDrive)\\Octopus\")) {\n        Write-Verbose \"$($env:SystemDrive)\\Octopus not found. Creating...\"\n        New-Item -type Directory \"$($env:SystemDrive)\\Octopus\" -Force | Out-Null\n    }\n    Update-InstallState \"TentacleDownloadUrl\" $actualTentacleDownloadUrl -global\n}\n\nfunction Get-LogDirectory {\n    $logDirectory = \"$($env:SystemDrive)\\Octopus\\logs\"\n    if (-not (Test-Path $logDirectory)) { New-Item -type Directory $logDirectory | out-null }\n    return $logDirectory\n}\n\nfunction Update-InstallState {\n    param (\n        [string]$key,\n        [string]$value,\n        [switch]$global = $false\n    )\n\n    if ((Test-Path \"$($env:SystemDrive)\\Octopus\\Octopus.DSC.installstate\") -or $global) { # do we already have a legacy installstate file, or are we writing global settings?\n        $installStateFile = \"$($env:SystemDrive)\\Octopus\\Octopus.DSC.installstate\"\n    } else {\n        $installStateFile = \"$($env:SystemDrive)\\Octopus\\Octopus.DSC.$script:instancecontext.installstate\"\n    }\n\n    $currentInstallState = @{}\n    if (Test-Path $installStateFile) {\n        $fileContent = (Get-Content -Raw -Path $installStateFile | ConvertFrom-Json)\n        $fileContent.psobject.properties | ForEach-Object { $currentInstallState[$_.Name] = $_.Value }\n    }\n\n    $currentInstallState.Set_Item($key, $value)\n\n    $currentInstallState | ConvertTo-Json | set-content $installStateFile\n}\n\nfunction Invoke-MsiExec ($name, $logDirectory, $msiPath) {\n    Write-Verbose \"Installing MSI...\"\n    $msiLog = \"$logDirectory\\Tentacle.$name.msi.log\"\n    write-verbose \"Executing 'msiexec.exe /i $msiPath /quiet /l*v $msiLog'\"\n    $msiExitCode = (Start-Process -FilePath \"msiexec.exe\" -ArgumentList @(\"/i\", \"`\"$msiPath`\"\", \"/quiet\", \"/l*v\", $msiLog) -Wait -Passthru).ExitCode\n    Write-Verbose \"MSI installer returned exit code $msiExitCode\"\n    if ($msiExitCode -ne 0) {\n        throw \"Installation of the MSI failed; MSIEXEC exited with code: $msiExitCode. View the log at $msiLog\"\n    }\n}\n\nfunction Invoke-MsiUninstall\n{\n    Write-Verbose \"Uninstalling Tentacle...\"\n    if (-not (Test-Path \"$TentacleHomeDirectory\\logs\")) {\n        Write-Verbose \"Log directory does not exist. Creating...\"\n        New-Item -type Directory \"$TentacleHomeDirectory\\logs\" | Out-Null\n    }\n    $tentaclePath = \"$TentacleHomeDirectory\\Tentacle.msi\"\n    $msiLog = \"$TentacleHomeDirectory\\logs\\Tentacle.msi.uninstall.log\"\n    if (test-path $tentaclePath) {\n        $msiExitCode = (Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/x `\"$tentaclePath`\" /quiet /l*v `\"$msiLog`\"\" -Wait -Passthru).ExitCode\n        Write-Verbose \"Tentacle MSI installer returned exit code $msiExitCode\"\n        if ($msiExitCode -ne 0) {\n            throw \"Removal of Tentacle failed, MSIEXEC exited with code: $msiExitCode. View the log at $msiLog\"\n        }\n    } else {\n        throw \"Tentacle cannot be removed, because the MSI could not be found.\"\n    }\n}\n\nfunction New-Tentacle {\n    param (\n        [Parameter(Mandatory = $True)]\n        [string]$name,\n        [string]$apiKey,\n        [string]$octopusServerUrl,\n        [Parameter(Mandatory = $False)]\n        [string[]]$environments = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$roles = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$tenants = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$tenantTags = \"\",\n        [Parameter(Mandatory = $False)]\n        [string]$policy,\n        [int]$listenPort = 10933,\n        [int]$tentacleCommsPort = 0,\n        [string]$displayName,\n        [string]$defaultApplicationDirectory,\n        [string]$tentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64,\n        [ValidateSet(\"Listen\", \"Poll\")]\n        [string]$communicationMode = \"Listen\",\n        [int]$serverPort = 10943,\n        [ValidateSet(\"PublicIp\", \"FQDN\", \"ComputerName\", \"Custom\")]\n        [string]$publicHostNameConfiguration = \"PublicIp\",\n        [string]$customPublicHostName,\n        [string]$tentacleHomeDirectory = \"$($env:SystemDrive)\\Octopus\",\n        [bool]$registerWithServer = $true,\n        [Parameter(Mandatory = $False)]\n        [string]$octopusServerThumbprint,\n        [PSCredential]$TentacleServiceCredential,\n        [string[]] $workerPools,\n        [string]$TenantedDeploymentParticipation,\n        [string]$Space\n    )\n\n    Install-Tentacle -Name $name `\n                     -tentacleDownloadUrl $tentacleDownloadUrl `\n                     -tentacleDownloadUrl64 $tentacleDownloadUrl64 `\n                     -tentacleHomeDirectory $tentacleHomeDirectory\n    if ($communicationMode -eq \"Listen\") {\n        $windowsFirewall = Get-Service -Name MpsSvc\n        if ($windowsFirewall.Status -eq \"Running\") {\n\n            # Check to see if the firewall rule already exists\n            $rules = Invoke-Command {& netsh.exe advfirewall firewall show rule name=\"Octopus Tentacle: $Name\"} | Write-Output\n\n            if ($rules -eq \"No rules match the specified criteria.\") {\n                Write-Verbose \"Open port $listenPort on Windows Firewall\"\n                Invoke-AndAssert { & netsh.exe advfirewall firewall add rule protocol=TCP dir=in localport=$listenPort action=allow name=\"Octopus Tentacle: $Name\" }\n            } else {\n                Write-Verbose \"Tentacle firewall rule already exists, skipping firewall rule addition\"\n            }\n        } else {\n            Write-Verbose \"Windows Firewall Service is not running... skipping firewall rule addition\"\n        }\n    }\n    Write-Verbose \"Configuring and registering Tentacle\"\n\n    $tentacleAppDirectory = $DefaultApplicationDirectory\n    $tentacleConfigFile = \"$tentacleHomeDirectory\\$Name\\Tentacle.config\"\n    Write-Verbose \"Tentacle configuration set as $tentacleConfigFile\"\n    Invoke-TentacleCommand @(\"create-instance\", \"--instance\", \"$name\", \"--config\", \"$tentacleConfigFile\", \"--console\")\n    Invoke-TentacleCommand @(\"new-certificate\", \"--instance\", \"$name\", \"--console\")\n\n    $configureArgs = @(\n        'configure',\n        '--instance', $name,\n        '--home', $tentacleHomeDirectory,\n        '--app', $tentacleAppDirectory,\n        '--console')\n    if (($null -ne $octopusServerThumbprint) -and ($octopusServerThumbprint -ne \"\")) {\n        $configureArgs += @('--trust', $octopusServerThumbprint)\n    }\n\n    if ($CommunicationMode -eq \"Listen\") {\n        $configureArgs += @('--port', $listenPort)\n    } else {\n        $configureArgs += @('--noListen', 'True')\n    }\n    Invoke-TentacleCommand $configureArgs\n\n    $serviceArgs = @(\n        'service',\n        '--install',\n        '--instance', $name,\n        '--console',\n        '--reconfigure'\n    )\n\n    if ($TentacleServiceCredential) {\n        Write-Verbose \"Adding Service identity to installation command\"\n\n        $serviceArgs += @(\n            '--username', $TentacleServiceCredential.UserName\n            '--password', $TentacleServiceCredential.GetNetworkCredential().Password\n        )\n    }\n    Invoke-TentacleCommand $serviceArgs\n\n    Pop-Location\n\n    if ($registerWithServer) {\n        if (($null -ne $workerPools) -and ($workerPools.Count -gt 0)) {\n            Write-Verbose \"Adding Tentacle to worker pool\"\n            Add-TentacleToWorkerPool -name $name `\n                -octopusServerUrl $octopusServerUrl `\n                -apiKey $apiKey `\n                -workerPools $workerPools `\n                -communicationMode $communicationMode `\n                -displayName $displayName `\n                -customPublicHostName $customPublicHostName `\n                -publicHostNameConfiguration $publicHostNameConfiguration `\n                -listenPort $listenPort `\n                -tentacleCommsPort $tentacleCommsPort `\n                -space $space\n        } elseif (![string]::IsNullOrEmpty($Environments) -and ![string]::IsNullOrEmpty($Roles)) {\n            Write-Verbose \"Registering Tentacle\"\n            Register-Tentacle -name $name `\n                -apiKey $apiKey `\n                -octopusServerUrl $octopusServerUrl `\n                -environments $environments `\n                -roles $roles `\n                -tenants $tenants `\n                -tenantTags $tenantTags `\n                -policy $policy `\n                -communicationMode $communicationMode `\n                -displayName $displayName `\n                -publicHostNameConfiguration $publicHostNameConfiguration `\n                -customPublicHostName $customPublicHostName `\n                -serverPort $serverPort `\n                -listenPort $listenPort `\n                -tentacleCommsPort $tentacleCommsPort `\n                -TenantedDeploymentParticipation $TenantedDeploymentParticipation `\n                -space $space\n        }\n    } else {\n        Write-Verbose \"Skipping registration with server as 'RegisterWithServer' is set to '$registerWithServer'\"\n    }\n\n    Write-Verbose \"Tentacle commands complete\"\n}\n\nfunction Get-PublicHostName {\n    param (\n        [ValidateSet(\"PublicIp\", \"FQDN\", \"ComputerName\", \"Custom\")]\n        [string]$publicHostNameConfiguration = \"PublicIp\",\n        [string]$customPublicHostName\n    )\n    if ($publicHostNameConfiguration -eq \"Custom\") {\n        $publicHostName = $customPublicHostName\n    } elseif ($publicHostNameConfiguration -eq \"FQDN\") {\n        $publicHostName = [System.Net.Dns]::GetHostByName($env:computerName).HostName\n    } elseif ($publicHostNameConfiguration -eq \"ComputerName\") {\n        $publicHostName = $env:COMPUTERNAME\n    } else {\n        $publicHostName = Get-MyPublicIPAddress\n    }\n    $publicHostName = $publicHostName.Trim()\n    return $publicHostName\n}\n\nfunction Get-TentacleDownloadUrl {\n    param (\n        [string]$tentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64\n    )\n\n    if ([IntPtr]::Size -eq 4) {\n        return $tentacleDownloadUrl\n    }\n    return $tentacleDownloadUrl64\n}\n\nfunction Remove-TentacleRegistration {\n    param (\n        [Parameter(Mandatory = $True)]\n        [string]$name,\n        [Parameter(Mandatory = $True)]\n        [string]$apiKey,\n        [Parameter(Mandatory = $True)]\n        [string]$octopusServerUrl,\n        [Parameter(Mandatory = $True)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [string]$Space\n    )\n\n    if (Test-TentacleExecutableExists) {\n        Write-Verbose \"Beginning Tentacle deregistration\"\n        $argumentList = @(\"deregister-from\", \"--instance\", \"$name\", \"--server\", $octopusServerUrl, \"--apiKey\", $apiKey, \"--console\")\n        $argumentList = Add-SpaceIfPresent -argumentList $argumentList -space $space\n        Invoke-TentacleCommand $argumentList\n    } else {\n        Write-Verbose \"Could not find Tentacle.exe\"\n    }\n}\n\nfunction Remove-WorkerPoolRegistration {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]\n        $octopusServerUrl,\n        [Parameter(Mandatory = $true)]\n        [string]\n        $apiKey,\n        [Parameter(Mandatory = $true)]\n        [PSCredential]\n        $TentacleServiceCredential,\n        [Parameter(Mandatory = $true)]\n        [string]\n        $name,\n        [Parameter(Mandatory = $true)]\n        [string]\n        $Space\n    )\n    if (Test-TentacleExecutableExists) {\n        Write-Verbose \"Deregistering $($env:ComputerName) from worker pools\"\n        $argumentList = @(\n            \"deregister-worker\",\n            \"--instance\", $name,\n            \"--server\", $octopusServerUrl,\n            \"--console\"\n        )\n        $argumentList = Add-SpaceIfPresent -Space $Space -ArgumentList $argumentList\n        if (![string]::IsNullOrEmpty($apiKey)) {\n            $argumentList += @(\n                \"--apiKey\", $apiKey\n            )\n        } elseif (![string]::IsNullOrEmpty($TentacleServiceCredential)) {\n            $argumentList += @(\n                \"--username\", $TentacleServiceCredential.UserName,\n                \"--password\", $TentacleServiceCredential.GetNetworkCredential().Password\n            )\n        } else {\n            throw \"Both APIKey and TentacleServiceCredential are null!\"\n        }\n        Invoke-TentacleCommand $argumentList\n    } else {\n        throw \"Could not find Tentacle.exe\"\n    }\n}\n\nfunction Add-TentacleToWorkerPool {\n    param(\n        [Parameter(Mandatory = $true)]\n        [String]\n        $name,\n        [Parameter(Mandatory = $true)]\n        [String]\n        $octopusServerUrl,\n        [Parameter(Mandatory = $true)]\n        [string]\n        $apiKey,\n        [Parameter(Mandatory = $false)]\n        [PSCredential]\n        $TentacleServiceCredential,\n        [Parameter(Mandatory = $true)]\n        [String[]]\n        $workerPools,\n        [Parameter(Mandatory = $true)]\n        [String]\n        [ValidateSet(\"Listen\", \"Poll\")]\n        $communicationMode,\n        [string]$displayName,\n        [string]$publicHostNameConfiguration = \"PublicIp\",\n        [string]$customPublicHostName,\n        [int]$tentacleCommsPort = 0,\n        [int]$listenPort = 0,\n        [Parameter(Mandatory = $true)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [String]\n        $Space\n    )\n    if ($listenPort -eq 0) {\n        $listenPort = 10933\n    }\n    if ($tentacleCommsPort -eq 0) {\n        $tentacleCommsPort = $listenPort\n    }\n\n    if (Test-TentacleExecutableExists) {\n        Write-Verbose \"Adding $($env:COMPUTERNAME) to pool(s) $($workerPools -join ', ')\"\n        $argumentList = @(\n            \"register-worker\",\n            \"--instance\", $name,\n            \"--server\", $octopusServerUrl,\n            \"--name\", $displayName,\n            \"--force\"\n        )\n        $argumentList = Add-SpaceIfPresent -Space $Space -ArgumentList $argumentList\n        if (![string]::IsNullOrEmpty($apiKey)) {\n            $argumentList += @(\n                \"--apiKey\", $apiKey\n            )\n        } elseif (![string]::IsNullOrEmpty($TentacleServiceCredential)) {\n            $argumentList += @(\n                \"--username\", $TentacleServiceCredential.UserName,\n                \"--password\", $TentacleServiceCredential.GetNetworkCredential().Password\n            )\n        } else {\n            throw \"Both APIKey and TentacleServiceCredential are null!\"\n        }\n        if ($CommunicationMode -eq \"Listen\") {\n            $publicHostName = Get-PublicHostName $publicHostNameConfiguration $customPublicHostName\n            Write-Verbose \"Public host name: $publicHostName\"\n            $argumentList += @(\n                \"--comms-style\", \"TentaclePassive\",\n                \"--publicHostName\", $publicHostName\n            )\n            if ($tentacleCommsPort -ne $listenPort) {\n                $argumentList += @(\"--tentacle-comms-port\", $tentacleCommsPort)\n            }\n        } else {\n            $argumentList += @(\n                \"--comms-style\", \"TentacleActive\",\n                \"--server-comms-port\", $serverPort\n            )\n        }\n\n        foreach ($workerPool in $workerPools) {\n            $argumentList += @(\n                \"--workerpool\", $workerPool\n            )\n        }\n\n        Invoke-TentacleCommand $argumentList\n    }\n}\n\nfunction Register-Tentacle {\n    param (\n        [string]$name,\n        [string]$apiKey,\n        [string]$octopusServerUrl,\n        [Parameter(Mandatory = $False)]\n        [string[]]$environments = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$roles = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$tenants = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$tenantTags = \"\",\n        [Parameter(Mandatory = $False)]\n        [string]$policy,\n        [ValidateSet(\"Listen\", \"Poll\")]\n        [string]$communicationMode = \"Listen\",\n        [string]$displayName,\n        [string]$publicHostNameConfiguration = \"PublicIp\",\n        [string]$customPublicHostName,\n        [int]$serverPort = 10943,\n        [int]$listenPort = 10933,\n        [int]$tentacleCommsPort = 0,\n        [string]$TenantedDeploymentParticipation,\n        [string]$Space\n    )\n    if ($listenPort -eq 0) {\n        $listenPort = 10933\n    }\n    if ($tentacleCommsPort -eq 0) {\n        $tentacleCommsPort = $listenPort\n    }\n\n    $registerArguments = @(\n        \"register-with\",\n        \"--instance\", $name,\n        \"--server\", $octopusServerUrl,\n        \"--name\", $displayName,\n        \"--apiKey\", $apiKey,\n        \"--force\",\n        \"--console\"\n    )\n\n    $registerArguments = Add-SpaceIfPresent -Space $Space -ArgumentList $registerArguments\n\n    if (($null -ne $policy) -and ($policy -ne \"\")) {\n        $registerArguments += @(\"--policy\", $policy)\n    }\n    if ($CommunicationMode -eq \"Listen\") {\n        $publicHostName = Get-PublicHostName $publicHostNameConfiguration $customPublicHostName\n        Write-Verbose \"Public host name: $publicHostName\"\n        $registerArguments += @(\n            \"--comms-style\", \"TentaclePassive\",\n            \"--publicHostName\", $publicHostName\n        )\n        if ($tentacleCommsPort -ne $listenPort) {\n            $registerArguments += @(\"--tentacle-comms-port\", $tentacleCommsPort)\n        }\n    } else {\n        $registerArguments += @(\n            \"--comms-style\", \"TentacleActive\",\n            \"--server-comms-port\", $serverPort\n        )\n    }\n    if ($environments -ne \"\" -and $environments.Count -gt 0) {\n        foreach ($environment in $environments) {\n            foreach ($e2 in $environment.Split(',')) {\n                $registerArguments += \"--environment\"\n                $registerArguments += $e2.Trim()\n            }\n        }\n    }\n\n    if ($roles -ne \"\" -and $roles.Count -gt 0) {\n        foreach ($role in $roles) {\n            foreach ($r2 in $role.Split(',')) {\n                $registerArguments += \"--role\"\n                $registerArguments += $r2.Trim()\n            }\n        }\n    }\n\n    if ($tenants -ne \"\" -and $tenants.Count -gt 0) {\n        foreach ($tenant in $tenants) {\n            foreach ($t2 in $tenant.Split(',')) {\n                $registerArguments += \"--tenant\"\n                $registerArguments += $t2.Trim()\n            }\n        }\n    }\n\n    if ($tenantTags -ne \"\" -and $tenantTags.Count -gt 0) {\n        foreach ($tenantTag in $tenantTags) {\n            foreach ($tt2 in $tenantTag.Split(',')) {\n                $registerArguments += \"--tenanttag\"\n                $registerArguments += $tt2.Trim()\n            }\n        }\n    }\n\n    if ($TenantedDeploymentParticipation -ne \"\") {\n        $registerArguments += @(\"--tenanted-deployment-participation\", $TenantedDeploymentParticipation)\n    }\n\n    Write-Verbose \"Registering with arguments: $registerArguments\"\n    Invoke-TentacleCommand $registerArguments\n}\n", "# Module contains shared code for OctopusDSC\n\n$octopusServerExePath = \"$($env:ProgramFiles)\\Octopus Deploy\\Octopus\\Octopus.Server.exe\"\n$tentacleExePath = \"$($env:ProgramFiles)\\Octopus Deploy\\Tentacle\\Tentacle.exe\"\n\nfunction Get-ODSCParameter($parameters) {\n    # unfortunately $PSBoundParameters doesn't contain parameters that weren't supplied (because the default value was okay)\n    # credit to https://www.briantist.com/how-to/splatting-psboundparameters-default-values-optional-parameters/\n    $params = @{}\n    foreach ($h in $parameters.GetEnumerator()) {\n        $key = $h.Key\n        $var = Get-Variable -Name $key -ErrorAction SilentlyContinue\n        if ($null -ne $var) {\n            $val = Get-Variable -Name $key -ErrorAction Stop  | Select-Object -ExpandProperty Value -ErrorAction Stop\n            $params[$key] = $val\n        }\n    }\n    return $params\n}\n\nfunction Test-GetODSCParameter {\n    param(\n        $Name,\n        $Ensure,\n        $DefaultValue = 'default'\n    )\n   return (Get-ODSCParameter $MyInvocation.MyCommand.Parameters)\n}\n\n\nfunction Invoke-WebClient($url, $OutFile) {\n    $downloader = new-object System.Net.WebClient\n    $downloader.DownloadFile($url, $OutFile)\n}\n\nfunction Request-File {\n    [CmdletBinding()]\n    param (\n        [string]$url,\n        [string]$saveAs\n    )\n\n    $retry = $true\n    $retryCount = 0\n    $maxRetries = 5\n    $downloadFile = $true\n\n    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12, [System.Net.SecurityProtocolType]::Tls11, [System.Net.SecurityProtocolType]::Tls\n\n    Write-Verbose \"Checking to see if we have an installer at $saveas\"\n    if(Test-Path $saveAs)\n    {\n        # check if we already have a matching file on disk\n        Write-Verbose \"Local file exists\"\n        $localHash = Get-FileHash $saveAs -Algorithm SHA256 | Select -Expand hash\n        Write-Verbose \"Local SHA256 hash: $localHash\"\n        $remoteHash = (Invoke-WebRequest -uri $url -Method Head -UseBasicParsing | select -expand headers).GetEnumerator()  | ? { $_.Key -eq \"x-amz-meta-sha256\" } | select -expand value\n        Write-Verbose \"Remote SHA256 hash: $remoteHash\"\n        $downloadFile = ($localHash -ne $remoteHash)\n    }\n    else\n    {\n        Write-Verbose \"No local installer found\"\n    }\n\n    if($downloadFile)\n    {\n        while ($retry) {\n            Write-Verbose \"Downloading $url to $saveAs\"\n\n            try {\n                Invoke-WebClient -Url $url -OutFile $saveAs\n                $retry = $false\n            }\n            catch {\n                Write-Verbose \"Failed to download $url\"\n\n                $ex = $_.Exception\n                while($null -ne $ex)\n                {\n                    Write-Verbose \"Got Exception '$($ex.Message)'.\"\n                    $ex = $ex.InnerException\n                }\n\n                Write-Verbose \"Retrying up to $maxRetries times.\"\n\n                if ($retryCount -gt $maxRetries) {\n                    # rethrow the inner exception if we've retried enough times\n                    throw $_.Exception.InnerException\n                }\n                $retryCount = $retryCount + 1\n                Start-Sleep -Seconds 1\n            }\n        }\n    }\n    else\n    {\n        Write-Verbose \"Local file and remote file hashes match. We already have the file, skipping download.\"\n    }\n}\n\nfunction Invoke-AndAssert {\n    param ($block)\n    & $block | Write-Verbose\n    if ($LASTEXITCODE -ne 0 -and $null -ne $LASTEXITCODE) {\n        throw \"Command returned exit code $LASTEXITCODE\"\n    }\n}\n\nfunction Write-Log {\n    param (\n        [string] $message\n    )\n\n    $timestamp = ([System.DateTime]::UTCNow).ToString(\"yyyy'-'MM'-'dd'T'HH':'mm':'ss\")\n    Write-Verbose \"[$timestamp] $message\"\n}\n\nFunction Invoke-WithRetries {\n    [CmdletBinding()]\n    param(\n        [scriptblock]$ScriptBlock,\n        [int]$MaxRetries = 10,\n        [int]$IntervalInMilliseconds = 200\n    )\n\n    $backoff = 1\n    $retrycount = 0\n    $returnvalue = $null\n    while ($null -eq $returnvalue -and $retrycount -lt $MaxRetries) {\n        try {\n            $returnvalue = Invoke-Command $ScriptBlock\n            if ($null -ne $LastExitCode -and $LastExitCode -ne 0) {\n                throw \"Command exited with exit code $LastExitCode\"\n            }\n        }\n        catch\n        {\n            if($error)\n            {\n                Write-Verbose ($error | Select-Object -first 1)\n            }\n            else {\n                Write-Verbose (\"Invoke-WithRetries threw an exception: \" + ($_| Out-String))\n            }\n            Write-Verbose \"We have tried $retrycount times, sleeping for $($backoff * $IntervalInMilliseconds) milliseconds and trying again.\"\n            Start-Sleep -MilliSeconds ($backoff * $IntervalInMilliseconds)\n            $backoff = $backoff + $backoff\n            $retrycount++\n        }\n    }\n\n    return $returnvalue\n}\n\nFunction Get-MaskedOutput\n{\n    [CmdletBinding()]\n    param($arguments)\n\n    $reg = [System.Text.RegularExpressions.RegEx]::new(\"--masterkey|--password|--license\",\n                [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)\n\n    if(($arguments -match \"--masterkey|--password|--license\"))\n    {\n        for($x=0;$x -lt $arguments.count; $x++)\n        {\n            if(($arguments[$x] -match \"--masterkey|--password|--license|--trust|--remove-trust|--apikey|--password|--pw|--pfx-password|--proxyPassword\"))\n            {\n                $arguments[$x+1] = $arguments[$x+1] -replace \".\", \"*\"\n            }\n        }\n        $out = $arguments\n    }\n    elseif(($arguments -match \"password|pwd\"))\n    {\n        $out = $arguments -replace \"(password|pwd)=[^;|`\"]*\", \"`$1=********\"\n    }\n    else\n    {\n        $out = @(\"************************\")\n    }\n    return $out\n}\n\nfunction Invoke-OctopusServerCommand ($cmdArgs) {\n    # todo: fix this up\n    if ((($cmdArgs -match \"masterkey|password|license|pwd=\").Count -eq 0)) {\n        Write-Verbose \"Executing command '$octopusServerExePath $($cmdArgs -join ' ')'\"\n    } else {\n        $copiedarguments = @() # hack to pass a copy of the array, not a reference\n        $copiedarguments += $cmdArgs\n        $maskedarguments = Get-MaskedOutput $copiedarguments\n        Write-Verbose \"Executing command '$octopusServerExePath $($maskedarguments -join ' ')'\"\n    }\n    $LASTEXITCODE = 0\n    $output = & $octopusServerExePath $cmdArgs 2>&1\n\n    Write-CommandOutput $output\n    if (($null -ne $LASTEXITCODE) -and ($LASTEXITCODE -ne 0)) {\n        Write-Error \"Command returned exit code $LASTEXITCODE. Aborting.\"\n        throw \"Command returned exit code $LASTEXITCODE. Aborting.\"\n    }\n    Write-Verbose \"done.\"\n}\n\nfunction Test-TentacleExecutableExists {\n    $tentacleDir = \"${env:ProgramFiles}\\Octopus Deploy\\Tentacle\"\n    return ((test-path $tentacleDir) -and (test-path \"$tentacleDir\\tentacle.exe\"))\n}\n\nfunction Invoke-TentacleCommand ($cmdArgs) {\n    # todo: fix this up\n    if ((($cmdArgs -match \"masterkey|password|license|pwd=\").Count -eq 0)) {\n        Write-Verbose \"Executing command '$tentacleExePath $($cmdArgs -join ' ')'\"\n    } else {\n        $copiedarguments = @() # hack to pass a copy of the array, not a reference\n        $copiedarguments += $cmdArgs\n        $maskedarguments = Get-MaskedOutput $copiedarguments\n        Write-Verbose \"Executing command '$tentacleExePath $($maskedarguments -join ' ')'\"\n    }\n    $LASTEXITCODE = 0\n    $output = & $tentacleExePath $cmdArgs 2>&1\n\n    Write-CommandOutput $output\n    if (($null -ne $LASTEXITCODE) -and ($LASTEXITCODE -ne 0)) {\n        Write-Error \"Command returned exit code $LASTEXITCODE. Aborting.\"\n        throw \"Command returned exit code $LASTEXITCODE. Aborting.\"\n    }\n    Write-Verbose \"done.\"\n    return $output\n}\n\nfunction Write-CommandOutput {\n    param (\n        [string] $output\n    )\n\n    if ($output -eq \"\") { return }\n\n    Write-Verbose \"\"\n    #this isn't quite working\n    foreach ($line in $output.Trim().Split(\"`n\")) {\n        Write-Verbose $line\n    }\n    Write-Verbose \"\"\n}\n\nfunction Get-ServerConfiguration($instanceName) {\n    $rawConfig = & $octopusServerExePath show-configuration --format=json-hierarchical --noconsolelogging --console --instance $instanceName\n\n    # handle a specific error where an exception in registry migration finds its way into the json-hierarchical output\n    # Refer to Issue #179 (https://github.com/OctopusDeploy/OctopusDSC/issues/179)\n    # wrapped in retries to catch transient issues in json output\n    $config = Invoke-WithRetries {\n        if(Test-ValidJson $rawConfig) {\n            return $rawConfig | ConvertFrom-Json\n        } else {\n            Write-Warning \"Invalid json encountered in show-configuration; attempting to clean up.\"\n            $cleanedUpConfig = Get-CleanedJson $rawConfig\n            if(Test-ValidJson $cleanedUpConfig ) {\n                return $cleanedUpConfig | ConvertFrom-Json\n            } else {\n                throw \"Attempted to cleanup bad JSON and failed.\"\n            }\n        }\n    } -MaxRetries 3 -IntervalInMilliseconds 100\n\n    $plainTextMasterKey = & $octopusServerExePath show-master-key --noconsolelogging --console --instance $instanceName\n\n    $encryptedMasterKey = New-Object SecureString\n    $plainTextMasterKey.ToCharArray() | Foreach-Object { $encryptedMasterKey.AppendChar($_) }\n    $config | Add-Member -NotePropertyName \"OctopusMasterKey\" -NotePropertyValue (New-Object System.Management.Automation.PSCredential (\"ignored\", $encryptedMasterKey))\n\n    return $config\n}\n\nfunction Get-TentacleConfiguration($instanceName)\n{\n  $rawConfig = & $tentacleExePath show-configuration --instance $instanceName\n  $config = $rawConfig | ConvertFrom-Json\n  return $config\n}\n\nfunction Test-ValidJson\n{\n    param($string)\n    try {\n        $string | ConvertFrom-Json | Out-Null\n        return $true\n    }\n    catch {\n        return $false\n    }\n}\n\n# Operates on a very specific json output failure. See issue #179  (https://github.com/OctopusDeploy/OctopusDSC/issues/179)\nfunction Get-CleanedJson\n{\n    [CmdletBinding()]\n    param($jsonstring)\n    $jsonstart = $jsonstring.IndexOf(\"{\")\n    Write-Verbose \"Found start of JSON at character $jsonstart\"\n    $extractedjson = $jsonstring.Substring($jsonstart, $jsonstring.length - $jsonstart)\n    $dumpedstring = $jsonstring.substring(0, $jsonstart)\n    Write-Warning (\"stripped extra content from JSON configuration string`r`n`r`n\" + (Get-MaskedOutput $dumpedstring))\n\n    return $extractedjson\n}\n"], "fixing_code": ["$defaultTentacleDownloadUrl = \"https://octopus.com/downloads/latest/OctopusTentacle\"\n$defaultTentacleDownloadUrl64 = \"https://octopus.com/downloads/latest/OctopusTentacle64\"\n\n# dot-source the helper file (cannot load as a module due to scope considerations)\n. (Join-Path -Path (Split-Path (Split-Path $PSScriptRoot -Parent) -Parent) -ChildPath 'OctopusDSCHelpers.ps1')\n\nfunction Get-APIResult {\n    param (\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $ServerUrl,\n\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $API,\n\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $APIKey\n    )\n\n    # Check to see if the server url ends with a /\n    if (!$ServerUrl.EndsWith(\"/\")) {\n        # Add trailing slash\n        $ServerUrl = \"$ServerUrl/\"\n    }\n\n    # form the api endpoint\n    $apiEndpoint = \"{0}api{1}\" -f $ServerUrl, $API\n\n    # Call API and capture results\n    $results = Invoke-WebRequest -Uri $apiEndpoint -Headers @{\"X-Octopus-ApiKey\"=\"$APIKey\"} -UseBasicParsing\n\n    # return the result\n    return ConvertFrom-Json -InputObject $results\n}\n\nfunction Add-SpaceIfPresent {\n    param (\n        [string]\n        $Space,\n        [string[]]\n        $argumentList\n     )\n    if(![String]::IsNullOrEmpty($Space)) {\n        $argumentList += @(\"--space\", $Space)\n    }\n\n    return $argumentList\n}\n\nfunction Get-MachineFromOctopusServer {\n    param (\n        [Parameter(Mandatory=$true)]\n        [String]\n        $ServerUrl,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $APIKey,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $Instance,\n        [Parameter(Mandatory=$true)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [System.String]\n        $SpaceId\n    )\n    $apiUrl = \"/machines/all\"\n    if (![String]::IsNullOrEmpty($SpaceId)) {\n        $apiUrl = \"/$SpaceId\" + $apiUrl\n    }\n\n    $machines = Get-APIResult -ServerUrl $ServerUrl -APIKey $APIKey -API $apiUrl\n    $thumbprint = Get-TentacleThumbprint -Instance $Instance\n    $machine = $machines | Where-Object {$_.Thumbprint -eq $thumbprint}\n\n    return $machine\n}\n\nfunction Get-WorkerFromOctopusServer\n{\n    param (\n        [Parameter(Mandatory=$true)]\n        [String]\n        $ServerUrl,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $APIKey,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $Instance,\n        [Parameter(Mandatory=$true)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [System.String]\n        $SpaceId\n    )\n    $apiUrl = \"/workers/all\"\n    if (![String]::IsNullOrEmpty($SpaceId)) {\n        $apiUrl = \"/$SpaceId\" + $apiUrl\n    }\n\n    $workers = Get-APIResult -ServerUrl $ServerUrl -APIKey $APIKey -API $apiUrl\n    $thumbprint = Get-TentacleThumbprint -Instance $Instance\n    $worker = $workers | Where-Object {$_.Thumbprint -eq $thumbprint}\n\n    return $worker\n}\n\nfunction Get-TentacleThumbprint {\n    param (\n        [Parameter(Mandatory=$true)]\n        [string]\n        $Instance\n    )\n\n    $thumbprint = Invoke-TentacleCommand @(\"show-thumbprint\", \"--instance\", $Instance, \"--console\", \"--thumbprint-only\")\n    return $thumbprint\n}\n\nfunction Get-WorkerPoolMembership {\n    [OutputType([object[]])]\n    param (\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $ServerUrl,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $Thumbprint,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $ApiKey,\n        [Parameter(Mandatory=$true)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [System.String]\n        $SpaceId\n    )\n    $apiUrl = \"/workerpools/all\"\n\n    if (![String]::IsNullOrEmpty($SpaceId)) {\n        $apiUrl = \"/$SpaceId\" + $apiUrl\n    }\n\n    $octoWorkerPools = Get-APIResult -ServerUrl $ServerUrl -ApiKey $ApiKey -API $apiUrl\n\n    $workerPoolMembership = @()\n    $workersUrl = \"/workers/all\"\n    if (![String]::IsNullOrEmpty($SpaceId)) {\n        $workersUrl = \"/$SpaceId\" + $workersUrl\n    }\n    $workersall = Get-APIResult -ServerUrl $ServerUrl -ApiKey $ApiKey -API $workersUrl\n\n    foreach ($octoWorkerPool in $octoWorkerPools) {\n        $workers = $workersall | Where-Object { $_.WorkerPoolIds -contains $($octoWorkerPool.Id) }\n        # Check to see if the thumbprint is listed\n        $workerWithThumbprint = ($workers | Where-Object {$_.Thumbprint -eq $Thumbprint})\n        if ($null -ne $workerWithThumbprint) {\n            $workerPoolMembership += $octoWorkerPool\n        }\n    }\n    return ,$workerPoolMembership\n}\n\nfunction Test-ParameterSet {\n    param(\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $publicHostNameConfiguration,\n        [Parameter(Mandatory=$true)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [System.String]\n        $CustomPublicHostName,\n        [System.String[]]\n        $Environments = \"\",\n        [System.String[]]\n        $Roles = \"\",\n        [System.String[]]\n        $WorkerPools,\n        [System.String[]]\n        $Tenants,\n        [System.String[]]\n        $TenantTags\n    )\n\n    if($publicHostNameConfiguration -eq \"Custom\" -and [String]::IsNullOrWhiteSpace($CustomPublicHostName)) {\n        throw \"Invalid configuration requested. \" + `\n            \"PublicHostNameConfiguration was set to 'Custom' but an invalid or null CustomPublicHostName was specified.\"\n    } elseif ((Test-Value($Environments)) -and (Test-Value($WorkerPools))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered as a worker, but still provided the 'Environments' configuration argument. \" + `\n            \"Please remove the 'Environments' configuration argument.\"\n    } elseif ((Test-Value($Roles)) -and (Test-Value($WorkerPools))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered as a worker, but still provided the 'Roles' configuration argument. \" + `\n            \"Please remove the 'Roles' configuration argument.\"\n    } elseif ((Test-Value($Tenants)) -and (Test-Value($WorkerPools))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered as a worker, but still provided the 'Tenants' configuration argument. \" + `\n            \"Please remove the 'Tenants' configuration argument.\"\n    } elseif ((Test-Value($TenantTags)) -and (Test-Value($WorkerPools))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered as a worker, but still provided the 'TenantTags' configuration argument. \" + `\n            \"Please remove the 'TenantTags' configuration argument.\"\n    }\n}\n\nfunction Get-Space {\n    param(\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $Space,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $ServerUrl,\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $APIKey\n    )\n    $spaces = Get-APIResult -ServerUrl $ServerUrl -APIKey $APIKey -API \"/spaces/all\"\n    return ($spaces | Where-Object {$_.Name -eq $Space})\n}\n\nfunction Get-TargetResource {\n    [OutputType([Hashtable])]\n    param (\n        [ValidateSet(\"Present\", \"Absent\")]\n        [string]$Ensure = \"Present\",\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$Name,\n        [ValidateSet(\"Started\", \"Stopped\")]\n        [string]$State = \"Started\",\n        [ValidateSet(\"Listen\", \"Poll\")]\n        [string]$CommunicationMode = \"Listen\",\n        [string]$ApiKey,\n        [string]$DisplayName = \"$($env:COMPUTERNAME)_$Name\",\n        [string]$OctopusServerUrl,\n        [string[]]$Environments = \"\",\n        [string[]]$Roles = \"\",\n        [string]$Policy,\n        [string[]]$Tenants = \"\",\n        [string[]]$TenantTags = \"\",\n        [string]$DefaultApplicationDirectory,\n        [int]$ListenPort = 10933,\n        [int]$TentacleCommsPort = 0,\n        [int]$ServerPort = 10943,\n        [string]$tentacleDownloadUrl = $defaultTentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64 = $defaultTentacleDownloadUrl64,\n        [ValidateSet(\"PublicIp\", \"FQDN\", \"ComputerName\", \"Custom\")]\n        [string]$PublicHostNameConfiguration = \"PublicIp\",\n        [string]$CustomPublicHostName,\n        [string]$TentacleHomeDirectory = \"$($env:SystemDrive)\\Octopus\",\n        [bool]$RegisterWithServer = $true,\n        [string]$OctopusServerThumbprint,\n        [PSCredential]$TentacleServiceCredential,\n        [string[]]$WorkerPools,\n        [ValidateSet(\"Untenanted\",\"TenantedOrUntenanted\",\"Tenanted\")]\n        [string]$TenantedDeploymentParticipation,\n        [string]$Space\n    )\n\n    Test-ParameterSet   -publicHostNameConfiguration $PublicHostNameConfiguration `\n                        -customPublicHostName $CustomPublicHostName `\n                        -Environments $Environments `\n                        -Roles $Roles `\n                        -WorkerPools $WorkerPools `\n                        -Tenants $Tenants `\n                        -TenantTags $TenantTags\n\n    Write-Verbose \"Checking if Tentacle is installed\"\n    $installLocation = (Get-ItemProperty -path \"HKLM:\\Software\\Octopus\\Tentacle\" -ErrorAction SilentlyContinue).InstallLocation\n    $present = ($null -ne $installLocation)\n    Write-Verbose \"Tentacle present: $present\"\n\n    $currentEnsure = if ($present) { \"Present\" } else { \"Absent\" }\n\n    $serviceName = (Get-TentacleServiceName $Name)\n    Write-Verbose \"Checking for Windows Service: $serviceName\"\n    $serviceInstance = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n    $currentState = \"Stopped\"\n    if ($null -ne $serviceInstance) {\n        Write-Verbose \"Windows service: $($serviceInstance.Status)\"\n        if ($serviceInstance.Status -eq \"Running\") {\n            $currentState = \"Started\"\n        }\n\n        if ($currentEnsure -eq \"Absent\") {\n            Write-Verbose \"Since the Windows Service is still installed, the service is present\"\n            $currentEnsure = \"Present\"\n        }\n    } else {\n        Write-Verbose \"Windows service: Not installed\"\n        $currentEnsure = \"Absent\"\n    }\n\n    $originalDownloadUrl = $null\n    if (Test-Path \"$($env:SystemDrive)\\Octopus\\Octopus.DSC.installstate\") {\n        $originalDownloadUrl = (Get-Content -Raw -Path \"$($env:SystemDrive)\\Octopus\\Octopus.DSC.installstate\" | ConvertFrom-Json).TentacleDownloadUrl\n    }\n\n    return @{\n        Name                = $Name;\n        Ensure              = $currentEnsure;\n        State               = $currentState;\n        TentacleDownloadUrl = $originalDownloadUrl;\n    };\n}\n\n# test a variable has a value (whether its an array or string)\nfunction Test-Value($value) {\n    if ($null -eq $value) { return $false }\n    if ($value -eq \"\") { return $false }\n    if ($value.length -eq 0) { return $false }\n    if ($value.length -eq 1 -and $value[0].length -eq 0) { return $false }\n    return $true\n}\n\nfunction Confirm-RegistrationParameter {\n    param (\n        [Parameter(Mandatory)]\n        [ValidateSet(\"Present\", \"Absent\")]\n        [string]\n        $Ensure,\n        [bool]$RegisterWithServer,\n        [string[]]$Environments,\n        [string[]]$Roles,\n        [string]$Policy,\n        [string[]]$Tenants,\n        [string[]]$TenantTags,\n        [string]$OctopusServerUrl,\n        [string]$ApiKey\n    )\n\n    if ($Ensure -eq \"Absent\") {\n        if ((-not (Test-Value($ApiKey))) -and (($RegisterWithServer))) {\n            throw \"Invalid configuration requested. \" + `\n                \"You have asked for the Tentacle to be de-registered from the server, but not provided the 'ApiKey' configuration argument. \" + `\n                \"Please specify the 'ApiKey' configuration argument or set 'RegisterWithServer = `$False'.\"\n        }\n    } elseif ((Test-Value($Roles)) -and (-not ($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle not to be registered with the server, but still provided the 'Roles' configuration argument. \" + `\n            \"Please remove the 'Roles' configuration argument or set 'RegisterWithServer = `$True'.\"\n    } elseif ((Test-Value($Environments)) -and (-not ($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle not to be registered with the server, but still provided the 'Environments' configuration argument. \" + `\n            \"Please remove the 'Environments' configuration argument or set 'RegisterWithServer = `$True'.\"\n    } elseif ((Test-Value($Tenants)) -and (-not ($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle not to be registered with the server, but still provided the 'Tenants' configuration argument. \" + `\n            \"Please remove the 'Tenants' configuration argument or set 'RegisterWithServer = `$True'.\"\n    } elseif ((Test-Value($TenantTags)) -and (-not ($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle not to be registered with the server, but still provided the 'TenantTags' configuration argument. \" + `\n            \"Please remove the 'TenantTags' configuration argument or set 'RegisterWithServer = `$True'.\"\n    } elseif ((Test-Value($Policy)) -and (-not ($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle not to be registered with the server, but still provided the 'Policy' configuration argument. \" + `\n            \"Please remove the 'Policy' configuration argument or set 'RegisterWithServer = `$True'.\"\n    } elseif ((-not (Test-Value($OctopusServerUrl))) -and (($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered with the server, but not provided the 'OctopusServerUrl' configuration argument. \" + `\n            \"Please specify the 'OctopusServerUrl' configuration argument or set 'RegisterWithServer = `$False'.\"\n    } elseif ((-not (Test-Value($ApiKey))) -and (($RegisterWithServer))) {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the Tentacle to be registered with the server, but not provided the 'ApiKey' configuration argument. \" + `\n            \"Please specify the 'ApiKey' configuration argument or set 'RegisterWithServer = `$False'.\"\n    }\n}\n\nfunction Confirm-RequestedState() {\n    param (\n        [Parameter(Mandatory)]\n        [Hashtable]$parameters\n    )\n    if ($parameters['Ensure'] -eq \"Absent\" -and $parameters['State'] -eq \"Started\") {\n        throw \"Invalid configuration requested. \" + `\n            \"You have asked for the service to not exist, but also be running at the same time. \" + `\n            \"You probably want 'State = `\"Stopped`\"'.\"\n    }\n}\n\nfunction Set-TargetResource {\n    param (\n        [ValidateSet(\"Present\", \"Absent\")]\n        [string]$Ensure = \"Present\",\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$Name,\n        [ValidateSet(\"Started\", \"Stopped\")]\n        [string]$State = \"Started\",\n        [ValidateSet(\"Listen\", \"Poll\")]\n        [string]$CommunicationMode = \"Listen\",\n        [string]$ApiKey,\n        [string]$OctopusServerUrl,\n        [string]$DisplayName = \"$($env:COMPUTERNAME)_$Name\",\n        [string[]]$Environments = \"\",\n        [string[]]$Roles = \"\",\n        [string]$Policy,\n        [string[]]$Tenants = \"\",\n        [string[]]$TenantTags = \"\",\n        [string]$DefaultApplicationDirectory = \"$($env:SystemDrive)\\Applications\",\n        [int]$ListenPort = 10933,\n        [int]$TentacleCommsPort = 0,\n        [int]$ServerPort = 10943,\n        [string]$tentacleDownloadUrl = $defaultTentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64 = $defaultTentacleDownloadUrl64,\n        [ValidateSet(\"PublicIp\", \"FQDN\", \"ComputerName\", \"Custom\")]\n        [string]$PublicHostNameConfiguration = \"PublicIp\",\n        [string]$CustomPublicHostName,\n        [string]$TentacleHomeDirectory = \"$($env:SystemDrive)\\Octopus\",\n        [bool]$RegisterWithServer = $true,\n        [string]$OctopusServerThumbprint,\n        [PSCredential]$TentacleServiceCredential,\n        [string[]]$WorkerPools,\n        [ValidateSet(\"Untenanted\",\"TenantedOrUntenanted\",\"Tenanted\")]\n        [string]$TenantedDeploymentParticipation,\n        [string]$Space\n    )\n    Confirm-RequestedState $PSBoundParameters\n    Confirm-RegistrationParameter `\n        -Ensure $Ensure `\n        -RegisterWithServer $RegisterWithServer `\n        -Environments $Environments `\n        -Roles $Roles `\n        -Policy $Policy `\n        -Tenants $Tenants `\n        -TenantTags $TenantTags `\n        -OctopusServerUrl $OctopusServerUrl `\n        -ApiKey $ApiKey\n\n    $currentResource = (Get-TargetResource -Name $Name -Ensure $Ensure)\n\n    Write-Verbose \"Configuring Tentacle...\"\n    if ($State -eq \"Stopped\" -and $currentResource[\"State\"] -eq \"Started\") {\n        $serviceName = (Get-TentacleServiceName $Name)\n        Write-Verbose \"Stopping $serviceName\"\n        Stop-Service -Name $serviceName -Force\n    }\n\n    if ($Ensure -eq \"Absent\" -and $currentResource[\"Ensure\"] -eq \"Present\") {\n        if ($RegisterWithServer) {\n            Remove-TentacleRegistration -name $Name -apiKey $ApiKey -octopusServerUrl $OctopusServerUrl -Space $Space\n        }\n\n        $serviceName = (Get-TentacleServiceName $Name)\n        Write-Verbose \"Deleting service $serviceName...\"\n        Invoke-AndAssert { & sc.exe delete $serviceName }\n\n        $otherServices = @(Get-CimInstance win32_service | Where-Object {$_.PathName -like \"`\"$($env:ProgramFiles)\\Octopus Deploy\\Tentacle\\Tentacle.exe*\"})\n\n        if ($otherServices.length -eq 0) {\n            # Uninstall msi\n            Invoke-MsiUninstall\n        }\n        else {\n            Write-Verbose \"Skipping uninstall, as other tentacles still exist:\"\n            foreach ($otherService in $otherServices) {\n                Write-Verbose \" - $($otherService.Name)\"\n            }\n        }\n    }\n    elseif ($Ensure -eq \"Present\" -and $currentResource[\"Ensure\"] -eq \"Absent\") {\n        Write-Verbose \"Installing Tentacle...\"\n        New-Tentacle -name $Name `\n            -apiKey $ApiKey `\n            -octopusServerUrl $OctopusServerUrl `\n            -listenPort $ListenPort `\n            -tentacleCommsPort $TentacleCommsPort `\n            -displayName $DisplayName `\n            -environments $Environments `\n            -roles $Roles `\n            -policy $Policy `\n            -tenants $Tenants `\n            -tenantTags $TenantTags `\n            -defaultApplicationDirectory $DefaultApplicationDirectory `\n            -tentacleDownloadUrl $tentacleDownloadUrl `\n            -tentacleDownloadUrl64 $tentacleDownloadUrl64 `\n            -communicationMode $CommunicationMode `\n            -serverPort $ServerPort `\n            -publicHostNameConfiguration $PublicHostNameConfiguration `\n            -customPublicHostName $CustomPublicHostName `\n            -tentacleHomeDirectory $TentacleHomeDirectory `\n            -registerWithServer $RegisterWithServer `\n            -octopusServerThumbprint $OctopusServerThumbprint `\n            -TentacleServiceCredential $TentacleServiceCredential `\n            -WorkerPools $WorkerPools `\n            -TenantedDeploymentParticipation $TenantedDeploymentParticipation  `\n            -Space $Space\n\n        Write-Verbose \"Tentacle installed!\"\n    }\n    elseif ($Ensure -eq \"Present\" -and $currentResource[\"TentacleDownloadUrl\"] -ne (Get-TentacleDownloadUrl $tentacleDownloadUrl $tentacleDownloadUrl64)) {\n        Write-Verbose \"Upgrading Tentacle...\"\n        $serviceName = (Get-TentacleServiceName $Name)\n        Stop-Service -Name $serviceName\n        Install-Tentacle -name $name `\n                         -tentacleDownloadUrl $tentacleDownloadUrl `\n                         -tentacleDownloadUrl64 $tentacleDownloadUrl64 `\n                         -tentacleHomeDirectory $TentacleHomeDirectory\n        if ($State -eq \"Started\") {\n            Start-Service $serviceName\n        }\n        Write-Verbose \"Tentacle upgraded!\"\n    }\n    elseif ($Ensure -eq \"Present\" -and $currentResource[\"Ensure\"] -eq \"Present\") {\n        Write-Verbose \"Upgrading/modifying Tentacle...\"\n        if (($null -ne $WorkerPools) -and ($WorkerPools.Count -gt 0)) {\n            Write-Verbose \"Registering $Name as a worker in worker pools $($workerPools -join \", \").\"\n            Add-TentacleToWorkerPool -name $name `\n                -octopusServerUrl $octopusServerUrl `\n                -apiKey $apiKey `\n                -workerPools $workerPools `\n                -communicationMode $communicationMode `\n                -displayName $displayName `\n                -publicHostNameConfiguration $publicHostNameConfiguration `\n                -customPublicHostName $customPublicHostName `\n                -listenPort $listenPort `\n                -tentacleCommsPort $tentacleCommsPort `\n                -space $space\n        } elseif (![string]::IsNullOrEmpty($Environments) -and ![string]::IsNullOrEmpty($Roles)) {\n             Register-Tentacle -name $Name `\n                 -apiKey $ApiKey `\n                 -octopusServerUrl $OctopusServerUrl `\n                 -environments $Environments `\n                 -roles $Roles `\n                 -tenants $Tenants `\n                 -tenantTags $TenantTags `\n                 -policy $Policy `\n                 -communicationMode $CommunicationMode `\n                 -displayName $DisplayName `\n                 -publicHostNameConfiguration $PublicHostNameConfiguration `\n                 -customPublicHostName $CustomPublicHostName `\n                 -listenPort $ListenPort `\n                 -serverPort $ServerPort `\n                 -tentacleCommsPort $TentacleCommsPort `\n                 -TenantedDeploymentParticipation $TenantedDeploymentParticipation `\n                 -Space $Space\n         }\n    }\n\n    if ($State -eq \"Started\" -and $currentResource[\"State\"] -eq \"Stopped\") {\n        $serviceName = (Get-TentacleServiceName $Name)\n        Write-Verbose \"Starting $serviceName\"\n        Start-Service -Name $serviceName\n    }\n\n    Write-Verbose \"Finished\"\n}\n\nfunction Test-TargetResource {\n    param (\n        [ValidateSet(\"Present\", \"Absent\")]\n        [string]$Ensure = \"Present\",\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$Name,\n        [ValidateSet(\"Started\", \"Stopped\")]\n        [string]$State = \"Started\",\n        [ValidateSet(\"Listen\", \"Poll\")]\n        [string]$CommunicationMode = \"Listen\",\n        [string]$ApiKey,\n        [string]$OctopusServerUrl,\n        [string]$DisplayName = \"$($env:COMPUTERNAME)_$Name\",\n        [string[]]$Environments = \"\",\n        [string[]]$Roles = \"\",\n        [string]$Policy,\n        [string[]]$Tenants = \"\",\n        [string[]]$TenantTags = \"\",\n        [string]$DefaultApplicationDirectory,\n        [int]$ListenPort = 10933,\n        [int]$TentacleCommsPort = 0,\n        [int]$ServerPort = 10943,\n        [string]$tentacleDownloadUrl = $defaultTentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64 = $defaultTentacleDownloadUrl64,\n        [ValidateSet(\"PublicIp\", \"FQDN\", \"ComputerName\", \"Custom\")]\n        [string]$PublicHostNameConfiguration = \"PublicIp\",\n        [string]$CustomPublicHostName,\n        [string]$TentacleHomeDirectory = \"$($env:SystemDrive)\\Octopus\",\n        [bool]$RegisterWithServer = $true,\n        [string]$OctopusServerThumbprint,\n        [PSCredential]$TentacleServiceCredential,\n        [string[]]$WorkerPools,\n        [ValidateSet(\"Untenanted\",\"TenantedOrUntenanted\",\"Tenanted\")]\n        [string]$TenantedDeploymentParticipation,\n        [string]$Space\n    )\n\n    $currentResource = (Get-TargetResource -Name $Name)\n\n    $ensureMatch = $currentResource[\"Ensure\"] -eq $Ensure\n    Write-Verbose \"Ensure: $($currentResource[\"Ensure\"]) vs. $Ensure = $ensureMatch\"\n    if (!$ensureMatch) {\n        return $false\n    }\n\n    $stateMatch = $currentResource[\"State\"] -eq $State\n    Write-Verbose \"State: $($currentResource[\"State\"]) vs. $State = $stateMatch\"\n    if (!$stateMatch) {\n        return $false\n    }\n\n    if ($null -ne $currentResource[\"TentacleDownloadUrl\"]) {\n        $requestedDownloadUrl = Get-TentacleDownloadUrl $tentacleDownloadUrl $tentacleDownloadUrl64\n        $downloadUrlsMatch = $requestedDownloadUrl -eq $currentResource[\"TentacleDownloadUrl\"]\n        Write-Verbose \"Download Url: $($currentResource[\"TentacleDownloadUrl\"]) vs. $requestedDownloadUrl = $downloadUrlsMatch\"\n        if (!$downloadUrlsMatch) {\n            return $false\n        }\n    }\n\n    if ($Ensure -eq \"Present\" -and ![string]::IsNullOrEmpty($OctopusServerUrl)) {\n        if (![string]::IsNullOrEmpty($Space)) {\n            $spaceRef = Get-Space -Space $Space -ServerUrl $OctopusServerUrl -APIKey $ApiKey\n\n            if ($null -eq $spaceRef) {\n                throw \"Unable to find a space by the name of '$Space'\"\n            }\n        }\n\n        if ($null -ne $WorkerPools -and $WorkerPools.Length -gt 0) {\n            $worker = Get-WorkerFromOctopusServer -ServerUrl $OctopusServerUrl -APIKey $ApiKey -Instance $Name -SpaceId $spaceRef.Id\n\n            if ($null -ne $worker) {\n                $workerPoolMembership = Get-WorkerPoolMembership -ServerUrl $OctopusServerUrl -ApiKey $ApiKey -Thumbprint $worker.Endpoint.Thumbprint -SpaceId $spaceRef.Id\n\n                if ($WorkerPools.Count -ne $workerPoolMembership.Count) {\n                    Write-Verbose \"Worker pools [$WorkerPools] vs [$workerPoolMembership] = $false\"\n                    return $false\n                } else {\n                    foreach ($workerPool in $workerPoolMembership) {\n                        if ($WorkerPools -notcontains $workerPool.Name) {\n                            Write-Verbose \"Worker pools: [$WorkerPools] vs [$workerPoolMembership] = $false\"\n                            return $false\n                        }\n                    }\n                }\n            } else {\n                if ([string]::IsNullOrEmpty($Space)) {\n                    Write-Verbose \"Worker '$Name' is not registered in Space '$Space'\"\n                } else {\n                    Write-Verbose \"Worker '$Name' is not registered\"\n                }\n                return $false\n            }\n        } else {\n            $machine = Get-MachineFromOctopusServer -ServerUrl $OctopusServerUrl -APIKey $ApiKey -Instance $Name -SpaceId $spaceRef.Id\n\n            if ($null -ne $machine) {\n                if ($Environments.Count -ne $machine.EnvironmentIds.Count) {\n                    Write-Verbose \"Environments: [$Environments] vs [$machine.EnvironmentIds]: $false\"\n                    return $false\n                } else {\n                    foreach ($environmentId in $machine.EnvironmentIds) {\n                        $environmentUrl = \"/environments/$environmentId\"\n                        if ($null -ne $spaceRef) {\n                            $environmentUrl = \"/$($spaceRef.Id)\" + $environmentUrl\n                        }\n                        $environment = Get-APIResult -ServerUrl $OctopusServerUrl -ApiKey $ApiKey -API $environmentUrl\n                        if ($Environments -notcontains $environment.Name) {\n                            Write-Verbose \"Environments: Machine currently has environment $($environment.Name), which is not listed in the passed in list [$Environments].  Machine is not in desired state.\"\n                            return $false\n                        }\n                    }\n                }\n\n                if ($Roles.Count -ne $machine.Roles.Count) {\n                    Write-Verbose \"Roles: [$Roles] vs [$($machine.Roles)]: $false\"\n                    return $false\n                } else {\n                    $differences = Compare-Object -ReferenceObject $Roles -DifferenceObject $machine.Roles\n                    if ($null -ne $differences) {\n                        Write-Verbose \"Roles: [$Roles] vs [$($machine.Roles)]: $false\"\n                        return $false\n                    }\n                }\n            } else {\n                if ([string]::IsNullOrEmpty($Space)) {\n                    Write-Verbose \"Machine '$Name' is not registered\"\n                } else {\n                    Write-Verbose \"Machine '$Name' is not registered in Space '$Space'\"\n                }\n                return $false\n            }\n        }\n    }\n\n    Write-Verbose \"Everything looks to be in working order\"\n    return $true\n}\n\nfunction Get-TentacleServiceName {\n    param ( [string]$instanceName )\n\n    if ($instanceName -eq \"Tentacle\") {\n        return \"OctopusDeploy Tentacle\"\n    }\n    else {\n        return \"OctopusDeploy Tentacle: $instanceName\"\n    }\n}\n\n# After the Tentacle is registered with Octopus, Tentacle listens on a TCP port, and Octopus connects to it. The Octopus server\n# needs to know the public IP address to use to connect to this Tentacle instance.\nfunction Get-MyPublicIPAddress {\n    [CmdletBinding()]\n    [Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"PSUseDeclaredVarsMoreThanAssignments\", \"\")]\n    param()\n    Write-Verbose \"Getting public IP address\"\n\n    [Net.ServicePointManager]::SecurityProtocol = @(\n        [Net.SecurityProtocolType]::Tls12,\n        [Net.SecurityProtocolType]::Tls11\n    )\n\n    $publicIPServices = @('https://api.ipify.org/', 'https://canhazip.com/', 'https://ipv4bot.whatismyipaddress.com/')\n    $ip = $null\n    $x = 0\n    while($null -eq $ip -and $x -lt $publicIPServices.Length) {\n        try {\n            $target = $publicIpServices[$x++]\n            $ip = Invoke-RestMethod -Uri $target\n        }\n        catch {\n            Write-Verbose \"Failed to find a public IP via $target. Reason: $_ \"\n        }\n    }\n\n    if($null -eq $ip) {\n        throw \"Unable to determine your Public IP address. Please supply a hostname or IP address via the PublicHostName parameter.\"\n    }\n\n    try {\n        [Ipaddress]$ip | Out-Null\n    } catch {\n        throw \"Detected Public IP address '$ip', but we we couldn't parse it as an IPv4 address.\"\n    }\n\n    return $ip\n}\n\n\nfunction Install-Tentacle {\n    param (\n        [string]$name,\n        [string]$tentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64,\n        [string]$tentacleHomeDirectory\n    )\n    Write-Verbose \"Beginning Tentacle installation\"\n\n    $actualTentacleDownloadUrl = Get-TentacleDownloadUrl $tentacleDownloadUrl $tentacleDownloadUrl64\n\n    if (-not (Test-Path $tentacleHomeDirectory)) {\n        Write-Verbose \"Tentacle Home directory does not exist. Creating...\"\n        New-Item -Path \"$tentacleHomeDirectory\" -ItemType Directory | Out-Null\n    }\n    $tentaclePath = \"$tentacleHomeDirectory\\Tentacle.msi\"\n    if ((Test-Path $tentaclePath) -eq $true) {\n        Remove-Item $tentaclePath -force\n    }\n    Write-Verbose \"Downloading Octopus Tentacle MSI from $actualTentacleDownloadUrl to $tentaclePath\"\n    Request-File $actualTentacleDownloadUrl $tentaclePath\n\n    if (-not (Test-Path $env:TEMP)) {\n        Write-Verbose \"Configured temp folder does not currently exist, creating...\"\n        New-Item $env:TEMP -ItemType Directory -force | Out-Null # an edge case when the env var exists but the folder does not\n    }\n\n    $logDirectory = Get-LogDirectory\n    Invoke-MsiExec -name $name -logDirectory $logDirectory -msiPath $tentaclePath\n\n    if (-not (Test-Path \"$($env:SystemDrive)\\Octopus\")) {\n        Write-Verbose \"$($env:SystemDrive)\\Octopus not found. Creating...\"\n        New-Item -type Directory \"$($env:SystemDrive)\\Octopus\" -Force | Out-Null\n    }\n    Update-InstallState \"TentacleDownloadUrl\" $actualTentacleDownloadUrl -global\n}\n\nfunction Get-LogDirectory {\n    $logDirectory = \"$($env:SystemDrive)\\Octopus\\logs\"\n    if (-not (Test-Path $logDirectory)) { New-Item -type Directory $logDirectory | out-null }\n    return $logDirectory\n}\n\nfunction Update-InstallState {\n    param (\n        [string]$key,\n        [string]$value,\n        [switch]$global = $false\n    )\n\n    if ((Test-Path \"$($env:SystemDrive)\\Octopus\\Octopus.DSC.installstate\") -or $global) { # do we already have a legacy installstate file, or are we writing global settings?\n        $installStateFile = \"$($env:SystemDrive)\\Octopus\\Octopus.DSC.installstate\"\n    } else {\n        $installStateFile = \"$($env:SystemDrive)\\Octopus\\Octopus.DSC.$script:instancecontext.installstate\"\n    }\n\n    $currentInstallState = @{}\n    if (Test-Path $installStateFile) {\n        $fileContent = (Get-Content -Raw -Path $installStateFile | ConvertFrom-Json)\n        $fileContent.psobject.properties | ForEach-Object { $currentInstallState[$_.Name] = $_.Value }\n    }\n\n    $currentInstallState.Set_Item($key, $value)\n\n    $currentInstallState | ConvertTo-Json | set-content $installStateFile\n}\n\nfunction Invoke-MsiExec ($name, $logDirectory, $msiPath) {\n    Write-Verbose \"Installing MSI...\"\n    $msiLog = \"$logDirectory\\Tentacle.$name.msi.log\"\n    write-verbose \"Executing 'msiexec.exe /i $msiPath /quiet /l*v $msiLog'\"\n    $msiExitCode = (Start-Process -FilePath \"msiexec.exe\" -ArgumentList @(\"/i\", \"`\"$msiPath`\"\", \"/quiet\", \"/l*v\", $msiLog) -Wait -Passthru).ExitCode\n    Write-Verbose \"MSI installer returned exit code $msiExitCode\"\n    if ($msiExitCode -ne 0) {\n        throw \"Installation of the MSI failed; MSIEXEC exited with code: $msiExitCode. View the log at $msiLog\"\n    }\n}\n\nfunction Invoke-MsiUninstall\n{\n    Write-Verbose \"Uninstalling Tentacle...\"\n    if (-not (Test-Path \"$TentacleHomeDirectory\\logs\")) {\n        Write-Verbose \"Log directory does not exist. Creating...\"\n        New-Item -type Directory \"$TentacleHomeDirectory\\logs\" | Out-Null\n    }\n    $tentaclePath = \"$TentacleHomeDirectory\\Tentacle.msi\"\n    $msiLog = \"$TentacleHomeDirectory\\logs\\Tentacle.msi.uninstall.log\"\n    if (test-path $tentaclePath) {\n        $msiExitCode = (Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/x `\"$tentaclePath`\" /quiet /l*v `\"$msiLog`\"\" -Wait -Passthru).ExitCode\n        Write-Verbose \"Tentacle MSI installer returned exit code $msiExitCode\"\n        if ($msiExitCode -ne 0) {\n            throw \"Removal of Tentacle failed, MSIEXEC exited with code: $msiExitCode. View the log at $msiLog\"\n        }\n    } else {\n        throw \"Tentacle cannot be removed, because the MSI could not be found.\"\n    }\n}\n\nfunction New-Tentacle {\n    param (\n        [Parameter(Mandatory = $True)]\n        [string]$name,\n        [string]$apiKey,\n        [string]$octopusServerUrl,\n        [Parameter(Mandatory = $False)]\n        [string[]]$environments = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$roles = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$tenants = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$tenantTags = \"\",\n        [Parameter(Mandatory = $False)]\n        [string]$policy,\n        [int]$listenPort = 10933,\n        [int]$tentacleCommsPort = 0,\n        [string]$displayName,\n        [string]$defaultApplicationDirectory,\n        [string]$tentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64,\n        [ValidateSet(\"Listen\", \"Poll\")]\n        [string]$communicationMode = \"Listen\",\n        [int]$serverPort = 10943,\n        [ValidateSet(\"PublicIp\", \"FQDN\", \"ComputerName\", \"Custom\")]\n        [string]$publicHostNameConfiguration = \"PublicIp\",\n        [string]$customPublicHostName,\n        [string]$tentacleHomeDirectory = \"$($env:SystemDrive)\\Octopus\",\n        [bool]$registerWithServer = $true,\n        [Parameter(Mandatory = $False)]\n        [string]$octopusServerThumbprint,\n        [PSCredential]$TentacleServiceCredential,\n        [string[]] $workerPools,\n        [string]$TenantedDeploymentParticipation,\n        [string]$Space\n    )\n\n    Install-Tentacle -Name $name `\n                     -tentacleDownloadUrl $tentacleDownloadUrl `\n                     -tentacleDownloadUrl64 $tentacleDownloadUrl64 `\n                     -tentacleHomeDirectory $tentacleHomeDirectory\n    if ($communicationMode -eq \"Listen\") {\n        $windowsFirewall = Get-Service -Name MpsSvc\n        if ($windowsFirewall.Status -eq \"Running\") {\n\n            # Check to see if the firewall rule already exists\n            $rules = Invoke-Command {& netsh.exe advfirewall firewall show rule name=\"Octopus Tentacle: $Name\"} | Write-Output\n\n            if ($rules -eq \"No rules match the specified criteria.\") {\n                Write-Verbose \"Open port $listenPort on Windows Firewall\"\n                Invoke-AndAssert { & netsh.exe advfirewall firewall add rule protocol=TCP dir=in localport=$listenPort action=allow name=\"Octopus Tentacle: $Name\" }\n            } else {\n                Write-Verbose \"Tentacle firewall rule already exists, skipping firewall rule addition\"\n            }\n        } else {\n            Write-Verbose \"Windows Firewall Service is not running... skipping firewall rule addition\"\n        }\n    }\n    Write-Verbose \"Configuring and registering Tentacle\"\n\n    $tentacleAppDirectory = $DefaultApplicationDirectory\n    $tentacleConfigFile = \"$tentacleHomeDirectory\\$Name\\Tentacle.config\"\n    Write-Verbose \"Tentacle configuration set as $tentacleConfigFile\"\n    Invoke-TentacleCommand @(\"create-instance\", \"--instance\", \"$name\", \"--config\", \"$tentacleConfigFile\", \"--console\")\n    Invoke-TentacleCommand @(\"new-certificate\", \"--instance\", \"$name\", \"--console\")\n\n    $configureArgs = @(\n        'configure',\n        '--instance', $name,\n        '--home', $tentacleHomeDirectory,\n        '--app', $tentacleAppDirectory,\n        '--console')\n    if (($null -ne $octopusServerThumbprint) -and ($octopusServerThumbprint -ne \"\")) {\n        $configureArgs += @('--trust', $octopusServerThumbprint)\n    }\n\n    if ($CommunicationMode -eq \"Listen\") {\n        $configureArgs += @('--port', $listenPort)\n    } else {\n        $configureArgs += @('--noListen', 'True')\n    }\n    Invoke-TentacleCommand $configureArgs\n\n    $serviceArgs = @(\n        'service',\n        '--install',\n        '--instance', $name,\n        '--console',\n        '--reconfigure'\n    )\n\n    if ($TentacleServiceCredential) {\n        Write-Verbose \"Adding Service identity to installation command\"\n\n        $serviceArgs += @(\n            '--username', $TentacleServiceCredential.UserName\n            '--password', $TentacleServiceCredential.GetNetworkCredential().Password\n        )\n    }\n    Invoke-TentacleCommand $serviceArgs\n\n    Pop-Location\n\n    if ($registerWithServer) {\n        if (($null -ne $workerPools) -and ($workerPools.Count -gt 0)) {\n            Write-Verbose \"Adding Tentacle to worker pool\"\n            Add-TentacleToWorkerPool -name $name `\n                -octopusServerUrl $octopusServerUrl `\n                -apiKey $apiKey `\n                -workerPools $workerPools `\n                -communicationMode $communicationMode `\n                -displayName $displayName `\n                -customPublicHostName $customPublicHostName `\n                -publicHostNameConfiguration $publicHostNameConfiguration `\n                -listenPort $listenPort `\n                -tentacleCommsPort $tentacleCommsPort `\n                -space $space\n        } elseif (![string]::IsNullOrEmpty($Environments) -and ![string]::IsNullOrEmpty($Roles)) {\n            Write-Verbose \"Registering Tentacle\"\n            Register-Tentacle -name $name `\n                -apiKey $apiKey `\n                -octopusServerUrl $octopusServerUrl `\n                -environments $environments `\n                -roles $roles `\n                -tenants $tenants `\n                -tenantTags $tenantTags `\n                -policy $policy `\n                -communicationMode $communicationMode `\n                -displayName $displayName `\n                -publicHostNameConfiguration $publicHostNameConfiguration `\n                -customPublicHostName $customPublicHostName `\n                -serverPort $serverPort `\n                -listenPort $listenPort `\n                -tentacleCommsPort $tentacleCommsPort `\n                -TenantedDeploymentParticipation $TenantedDeploymentParticipation `\n                -space $space\n        }\n    } else {\n        Write-Verbose \"Skipping registration with server as 'RegisterWithServer' is set to '$registerWithServer'\"\n    }\n\n    Write-Verbose \"Tentacle commands complete\"\n}\n\nfunction Get-PublicHostName {\n    param (\n        [ValidateSet(\"PublicIp\", \"FQDN\", \"ComputerName\", \"Custom\")]\n        [string]$publicHostNameConfiguration = \"PublicIp\",\n        [string]$customPublicHostName\n    )\n    if ($publicHostNameConfiguration -eq \"Custom\") {\n        $publicHostName = $customPublicHostName\n    } elseif ($publicHostNameConfiguration -eq \"FQDN\") {\n        $publicHostName = [System.Net.Dns]::GetHostByName($env:computerName).HostName\n    } elseif ($publicHostNameConfiguration -eq \"ComputerName\") {\n        $publicHostName = $env:COMPUTERNAME\n    } else {\n        $publicHostName = Get-MyPublicIPAddress\n    }\n    $publicHostName = $publicHostName.Trim()\n    return $publicHostName\n}\n\nfunction Get-TentacleDownloadUrl {\n    param (\n        [string]$tentacleDownloadUrl,\n        [string]$tentacleDownloadUrl64\n    )\n\n    if ([IntPtr]::Size -eq 4) {\n        return $tentacleDownloadUrl\n    }\n    return $tentacleDownloadUrl64\n}\n\nfunction Remove-TentacleRegistration {\n    param (\n        [Parameter(Mandatory = $True)]\n        [string]$name,\n        [Parameter(Mandatory = $True)]\n        [string]$apiKey,\n        [Parameter(Mandatory = $True)]\n        [string]$octopusServerUrl,\n        [Parameter(Mandatory = $True)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [string]$Space\n    )\n\n    if (Test-TentacleExecutableExists) {\n        Write-Verbose \"Beginning Tentacle deregistration\"\n        $argumentList = @(\"deregister-from\", \"--instance\", \"$name\", \"--server\", $octopusServerUrl, \"--apiKey\", $apiKey, \"--console\")\n        $argumentList = Add-SpaceIfPresent -argumentList $argumentList -space $space\n        Invoke-TentacleCommand $argumentList\n    } else {\n        Write-Verbose \"Could not find Tentacle.exe\"\n    }\n}\n\nfunction Remove-WorkerPoolRegistration {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]\n        $octopusServerUrl,\n        [Parameter(Mandatory = $true)]\n        [string]\n        $apiKey,\n        [Parameter(Mandatory = $true)]\n        [PSCredential]\n        $TentacleServiceCredential,\n        [Parameter(Mandatory = $true)]\n        [string]\n        $name,\n        [Parameter(Mandatory = $true)]\n        [string]\n        $Space\n    )\n    if (Test-TentacleExecutableExists) {\n        Write-Verbose \"Deregistering $($env:ComputerName) from worker pools\"\n        $argumentList = @(\n            \"deregister-worker\",\n            \"--instance\", $name,\n            \"--server\", $octopusServerUrl,\n            \"--console\"\n        )\n        $argumentList = Add-SpaceIfPresent -Space $Space -ArgumentList $argumentList\n        if (![string]::IsNullOrEmpty($apiKey)) {\n            $argumentList += @(\n                \"--apiKey\", $apiKey\n            )\n        } elseif (![string]::IsNullOrEmpty($TentacleServiceCredential)) {\n            $argumentList += @(\n                \"--username\", $TentacleServiceCredential.UserName,\n                \"--password\", $TentacleServiceCredential.GetNetworkCredential().Password\n            )\n        } else {\n            throw \"Both APIKey and TentacleServiceCredential are null!\"\n        }\n        Invoke-TentacleCommand $argumentList\n    } else {\n        throw \"Could not find Tentacle.exe\"\n    }\n}\n\nfunction Add-TentacleToWorkerPool {\n    param(\n        [Parameter(Mandatory = $true)]\n        [String]\n        $name,\n        [Parameter(Mandatory = $true)]\n        [String]\n        $octopusServerUrl,\n        [Parameter(Mandatory = $true)]\n        [string]\n        $apiKey,\n        [Parameter(Mandatory = $false)]\n        [PSCredential]\n        $TentacleServiceCredential,\n        [Parameter(Mandatory = $true)]\n        [String[]]\n        $workerPools,\n        [Parameter(Mandatory = $true)]\n        [String]\n        [ValidateSet(\"Listen\", \"Poll\")]\n        $communicationMode,\n        [string]$displayName,\n        [string]$publicHostNameConfiguration = \"PublicIp\",\n        [string]$customPublicHostName,\n        [int]$tentacleCommsPort = 0,\n        [int]$listenPort = 0,\n        [Parameter(Mandatory = $true)]\n        [AllowNull()]\n        [AllowEmptyString()]\n        [String]\n        $Space\n    )\n    if ($listenPort -eq 0) {\n        $listenPort = 10933\n    }\n    if ($tentacleCommsPort -eq 0) {\n        $tentacleCommsPort = $listenPort\n    }\n\n    if (Test-TentacleExecutableExists) {\n        Write-Verbose \"Adding $($env:COMPUTERNAME) to pool(s) $($workerPools -join ', ')\"\n        $argumentList = @(\n            \"register-worker\",\n            \"--instance\", $name,\n            \"--server\", $octopusServerUrl,\n            \"--name\", $displayName,\n            \"--force\"\n        )\n        $argumentList = Add-SpaceIfPresent -Space $Space -ArgumentList $argumentList\n        if (![string]::IsNullOrEmpty($apiKey)) {\n            $argumentList += @(\n                \"--apiKey\", $apiKey\n            )\n        } elseif (![string]::IsNullOrEmpty($TentacleServiceCredential)) {\n            $argumentList += @(\n                \"--username\", $TentacleServiceCredential.UserName,\n                \"--password\", $TentacleServiceCredential.GetNetworkCredential().Password\n            )\n        } else {\n            throw \"Both APIKey and TentacleServiceCredential are null!\"\n        }\n        if ($CommunicationMode -eq \"Listen\") {\n            $publicHostName = Get-PublicHostName $publicHostNameConfiguration $customPublicHostName\n            Write-Verbose \"Public host name: $publicHostName\"\n            $argumentList += @(\n                \"--comms-style\", \"TentaclePassive\",\n                \"--publicHostName\", $publicHostName\n            )\n            if ($tentacleCommsPort -ne $listenPort) {\n                $argumentList += @(\"--tentacle-comms-port\", $tentacleCommsPort)\n            }\n        } else {\n            $argumentList += @(\n                \"--comms-style\", \"TentacleActive\",\n                \"--server-comms-port\", $serverPort\n            )\n        }\n\n        foreach ($workerPool in $workerPools) {\n            $argumentList += @(\n                \"--workerpool\", $workerPool\n            )\n        }\n\n        Invoke-TentacleCommand $argumentList\n    }\n}\n\nfunction Register-Tentacle {\n    param (\n        [string]$name,\n        [string]$apiKey,\n        [string]$octopusServerUrl,\n        [Parameter(Mandatory = $False)]\n        [string[]]$environments = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$roles = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$tenants = \"\",\n        [Parameter(Mandatory = $False)]\n        [string[]]$tenantTags = \"\",\n        [Parameter(Mandatory = $False)]\n        [string]$policy,\n        [ValidateSet(\"Listen\", \"Poll\")]\n        [string]$communicationMode = \"Listen\",\n        [string]$displayName,\n        [string]$publicHostNameConfiguration = \"PublicIp\",\n        [string]$customPublicHostName,\n        [int]$serverPort = 10943,\n        [int]$listenPort = 10933,\n        [int]$tentacleCommsPort = 0,\n        [string]$TenantedDeploymentParticipation,\n        [string]$Space\n    )\n    if ($listenPort -eq 0) {\n        $listenPort = 10933\n    }\n    if ($tentacleCommsPort -eq 0) {\n        $tentacleCommsPort = $listenPort\n    }\n\n    $registerArguments = @(\n        \"register-with\",\n        \"--instance\", $name,\n        \"--server\", $octopusServerUrl,\n        \"--name\", $displayName,\n        \"--apiKey\", $apiKey,\n        \"--force\",\n        \"--console\"\n    )\n\n    $registerArguments = Add-SpaceIfPresent -Space $Space -ArgumentList $registerArguments\n\n    if (($null -ne $policy) -and ($policy -ne \"\")) {\n        $registerArguments += @(\"--policy\", $policy)\n    }\n    if ($CommunicationMode -eq \"Listen\") {\n        $publicHostName = Get-PublicHostName $publicHostNameConfiguration $customPublicHostName\n        Write-Verbose \"Public host name: $publicHostName\"\n        $registerArguments += @(\n            \"--comms-style\", \"TentaclePassive\",\n            \"--publicHostName\", $publicHostName\n        )\n        if ($tentacleCommsPort -ne $listenPort) {\n            $registerArguments += @(\"--tentacle-comms-port\", $tentacleCommsPort)\n        }\n    } else {\n        $registerArguments += @(\n            \"--comms-style\", \"TentacleActive\",\n            \"--server-comms-port\", $serverPort\n        )\n    }\n    if ($environments -ne \"\" -and $environments.Count -gt 0) {\n        foreach ($environment in $environments) {\n            foreach ($e2 in $environment.Split(',')) {\n                $registerArguments += \"--environment\"\n                $registerArguments += $e2.Trim()\n            }\n        }\n    }\n\n    if ($roles -ne \"\" -and $roles.Count -gt 0) {\n        foreach ($role in $roles) {\n            foreach ($r2 in $role.Split(',')) {\n                $registerArguments += \"--role\"\n                $registerArguments += $r2.Trim()\n            }\n        }\n    }\n\n    if ($tenants -ne \"\" -and $tenants.Count -gt 0) {\n        foreach ($tenant in $tenants) {\n            foreach ($t2 in $tenant.Split(',')) {\n                $registerArguments += \"--tenant\"\n                $registerArguments += $t2.Trim()\n            }\n        }\n    }\n\n    if ($tenantTags -ne \"\" -and $tenantTags.Count -gt 0) {\n        foreach ($tenantTag in $tenantTags) {\n            foreach ($tt2 in $tenantTag.Split(',')) {\n                $registerArguments += \"--tenanttag\"\n                $registerArguments += $tt2.Trim()\n            }\n        }\n    }\n\n    if ($TenantedDeploymentParticipation -ne \"\") {\n        $registerArguments += @(\"--tenanted-deployment-participation\", $TenantedDeploymentParticipation)\n    }\n\n    Invoke-TentacleCommand $registerArguments\n}\n", "# Module contains shared code for OctopusDSC\n\n$octopusServerExePath = \"$($env:ProgramFiles)\\Octopus Deploy\\Octopus\\Octopus.Server.exe\"\n$tentacleExePath = \"$($env:ProgramFiles)\\Octopus Deploy\\Tentacle\\Tentacle.exe\"\n\nfunction Get-ODSCParameter($parameters) {\n    # unfortunately $PSBoundParameters doesn't contain parameters that weren't supplied (because the default value was okay)\n    # credit to https://www.briantist.com/how-to/splatting-psboundparameters-default-values-optional-parameters/\n    $params = @{}\n    foreach ($h in $parameters.GetEnumerator()) {\n        $key = $h.Key\n        $var = Get-Variable -Name $key -ErrorAction SilentlyContinue\n        if ($null -ne $var) {\n            $val = Get-Variable -Name $key -ErrorAction Stop  | Select-Object -ExpandProperty Value -ErrorAction Stop\n            $params[$key] = $val\n        }\n    }\n    return $params\n}\n\nfunction Test-GetODSCParameter {\n    param(\n        $Name,\n        $Ensure,\n        $DefaultValue = 'default'\n    )\n   return (Get-ODSCParameter $MyInvocation.MyCommand.Parameters)\n}\n\n\nfunction Invoke-WebClient($url, $OutFile) {\n    $downloader = new-object System.Net.WebClient\n    $downloader.DownloadFile($url, $OutFile)\n}\n\nfunction Request-File {\n    [CmdletBinding()]\n    param (\n        [string]$url,\n        [string]$saveAs\n    )\n\n    $retry = $true\n    $retryCount = 0\n    $maxRetries = 5\n    $downloadFile = $true\n\n    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12, [System.Net.SecurityProtocolType]::Tls11, [System.Net.SecurityProtocolType]::Tls\n\n    Write-Verbose \"Checking to see if we have an installer at $saveas\"\n    if(Test-Path $saveAs)\n    {\n        # check if we already have a matching file on disk\n        Write-Verbose \"Local file exists\"\n        $localHash = Get-FileHash $saveAs -Algorithm SHA256 | Select -Expand hash\n        Write-Verbose \"Local SHA256 hash: $localHash\"\n        $remoteHash = (Invoke-WebRequest -uri $url -Method Head -UseBasicParsing | select -expand headers).GetEnumerator()  | ? { $_.Key -eq \"x-amz-meta-sha256\" } | select -expand value\n        Write-Verbose \"Remote SHA256 hash: $remoteHash\"\n        $downloadFile = ($localHash -ne $remoteHash)\n    }\n    else\n    {\n        Write-Verbose \"No local installer found\"\n    }\n\n    if($downloadFile)\n    {\n        while ($retry) {\n            Write-Verbose \"Downloading $url to $saveAs\"\n\n            try {\n                Invoke-WebClient -Url $url -OutFile $saveAs\n                $retry = $false\n            }\n            catch {\n                Write-Verbose \"Failed to download $url\"\n\n                $ex = $_.Exception\n                while($null -ne $ex)\n                {\n                    Write-Verbose \"Got Exception '$($ex.Message)'.\"\n                    $ex = $ex.InnerException\n                }\n\n                Write-Verbose \"Retrying up to $maxRetries times.\"\n\n                if ($retryCount -gt $maxRetries) {\n                    # rethrow the inner exception if we've retried enough times\n                    throw $_.Exception.InnerException\n                }\n                $retryCount = $retryCount + 1\n                Start-Sleep -Seconds 1\n            }\n        }\n    }\n    else\n    {\n        Write-Verbose \"Local file and remote file hashes match. We already have the file, skipping download.\"\n    }\n}\n\nfunction Invoke-AndAssert {\n    param ($block)\n    & $block | Write-Verbose\n    if ($LASTEXITCODE -ne 0 -and $null -ne $LASTEXITCODE) {\n        throw \"Command returned exit code $LASTEXITCODE\"\n    }\n}\n\nfunction Write-Log {\n    param (\n        [string] $message\n    )\n\n    $timestamp = ([System.DateTime]::UTCNow).ToString(\"yyyy'-'MM'-'dd'T'HH':'mm':'ss\")\n    Write-Verbose \"[$timestamp] $message\"\n}\n\nFunction Invoke-WithRetries {\n    [CmdletBinding()]\n    param(\n        [scriptblock]$ScriptBlock,\n        [int]$MaxRetries = 10,\n        [int]$IntervalInMilliseconds = 200\n    )\n\n    $backoff = 1\n    $retrycount = 0\n    $returnvalue = $null\n    while ($null -eq $returnvalue -and $retrycount -lt $MaxRetries) {\n        try {\n            $returnvalue = Invoke-Command $ScriptBlock\n            if ($null -ne $LastExitCode -and $LastExitCode -ne 0) {\n                throw \"Command exited with exit code $LastExitCode\"\n            }\n        }\n        catch\n        {\n            if($error)\n            {\n                Write-Verbose ($error | Select-Object -first 1)\n            }\n            else {\n                Write-Verbose (\"Invoke-WithRetries threw an exception: \" + ($_| Out-String))\n            }\n            Write-Verbose \"We have tried $retrycount times, sleeping for $($backoff * $IntervalInMilliseconds) milliseconds and trying again.\"\n            Start-Sleep -MilliSeconds ($backoff * $IntervalInMilliseconds)\n            $backoff = $backoff + $backoff\n            $retrycount++\n        }\n    }\n\n    return $returnvalue\n}\n\nfunction Get-MaskedOutput {\n    [CmdletBinding()]\n    param($arguments)\n\n    $singleAsterixArgs = \"--masterkey|--license|--licence|--trust|--password|--remove-trust|--apikey|--pw|--pfx-password|--proxyPassword\";\n    $connectionStringArgs = \"--connectionstring\";\n\n    # Scrub sensitive values\n    for($x=0; $x -lt $arguments.count; $x++) {\n        if($arguments[$x] -match $singleAsterixArgs) {\n            $arguments[$x+1] = \"**********\"\n        } elseif($arguments[$x] -match $connectionStringArgs) {\n            $arguments[$x+1] = $arguments[$x+1] -replace \"(password|pwd)=[^;|`\"]*\", \"`$1=********\"\n        }\n    }\n    return $arguments\n}\n\nfunction Write-VerboseWithMaskedCommand ($cmdArgs) {\n    $copiedarguments = @() # hack to pass a copy of the array, not a reference\n    $copiedarguments += $cmdArgs\n    $maskedarguments = Get-MaskedOutput $copiedarguments\n    Write-Verbose \"Executing command '$octopusServerExePath $($maskedarguments -join ' ')'\"\n}\n\nfunction Invoke-OctopusServerCommand ($cmdArgs) {\n\n    Write-VerboseWithMaskedCommand($cmdArgs);\n\n    $LASTEXITCODE = 0\n    $output = & $octopusServerExePath $cmdArgs 2>&1\n\n    Write-CommandOutput $output\n    if (($null -ne $LASTEXITCODE) -and ($LASTEXITCODE -ne 0)) {\n        Write-Error \"Command returned exit code $LASTEXITCODE. Aborting.\"\n        throw \"Command returned exit code $LASTEXITCODE. Aborting.\"\n    }\n    Write-Verbose \"done.\"\n}\n\nfunction Test-TentacleExecutableExists {\n    $tentacleDir = \"${env:ProgramFiles}\\Octopus Deploy\\Tentacle\"\n    return ((test-path $tentacleDir) -and (test-path \"$tentacleDir\\tentacle.exe\"))\n}\n\nfunction Invoke-TentacleCommand ($cmdArgs) {\n\n    Write-VerboseWithMaskedCommand($cmdArgs);\n\n    $LASTEXITCODE = 0\n    $output = & $tentacleExePath $cmdArgs 2>&1\n\n    Write-CommandOutput $output\n    if (($null -ne $LASTEXITCODE) -and ($LASTEXITCODE -ne 0)) {\n        Write-Error \"Command returned exit code $LASTEXITCODE. Aborting.\"\n        throw \"Command returned exit code $LASTEXITCODE. Aborting.\"\n    }\n    Write-Verbose \"done.\"\n    return $output\n}\n\nfunction Write-CommandOutput {\n    param (\n        [string] $output\n    )\n\n    if ($output -eq \"\") { return }\n\n    Write-Verbose \"\"\n    #this isn't quite working\n    foreach ($line in $output.Trim().Split(\"`n\")) {\n        Write-Verbose $line\n    }\n    Write-Verbose \"\"\n}\n\nfunction Get-ServerConfiguration($instanceName) {\n    $rawConfig = & $octopusServerExePath show-configuration --format=json-hierarchical --noconsolelogging --console --instance $instanceName\n\n    # handle a specific error where an exception in registry migration finds its way into the json-hierarchical output\n    # Refer to Issue #179 (https://github.com/OctopusDeploy/OctopusDSC/issues/179)\n    # wrapped in retries to catch transient issues in json output\n    $config = Invoke-WithRetries {\n        if(Test-ValidJson $rawConfig) {\n            return $rawConfig | ConvertFrom-Json\n        } else {\n            Write-Warning \"Invalid json encountered in show-configuration; attempting to clean up.\"\n            $cleanedUpConfig = Get-CleanedJson $rawConfig\n            if(Test-ValidJson $cleanedUpConfig ) {\n                return $cleanedUpConfig | ConvertFrom-Json\n            } else {\n                throw \"Attempted to cleanup bad JSON and failed.\"\n            }\n        }\n    } -MaxRetries 3 -IntervalInMilliseconds 100\n\n    $plainTextMasterKey = & $octopusServerExePath show-master-key --noconsolelogging --console --instance $instanceName\n\n    $encryptedMasterKey = New-Object SecureString\n    $plainTextMasterKey.ToCharArray() | Foreach-Object { $encryptedMasterKey.AppendChar($_) }\n    $config | Add-Member -NotePropertyName \"OctopusMasterKey\" -NotePropertyValue (New-Object System.Management.Automation.PSCredential (\"ignored\", $encryptedMasterKey))\n\n    return $config\n}\n\nfunction Get-TentacleConfiguration($instanceName)\n{\n  $rawConfig = & $tentacleExePath show-configuration --instance $instanceName\n  $config = $rawConfig | ConvertFrom-Json\n  return $config\n}\n\nfunction Test-ValidJson\n{\n    param($string)\n    try {\n        $string | ConvertFrom-Json | Out-Null\n        return $true\n    }\n    catch {\n        return $false\n    }\n}\n\n# Operates on a very specific json output failure. See issue #179  (https://github.com/OctopusDeploy/OctopusDSC/issues/179)\nfunction Get-CleanedJson\n{\n    [CmdletBinding()]\n    param($jsonstring)\n    $jsonstart = $jsonstring.IndexOf(\"{\")\n    Write-Verbose \"Found start of JSON at character $jsonstart\"\n    $extractedjson = $jsonstring.Substring($jsonstart, $jsonstring.length - $jsonstart)\n    $dumpedstring = $jsonstring.substring(0, $jsonstart)\n    Write-Warning (\"stripped extra content from JSON configuration string`r`n`r`n\" + (Get-MaskedOutput $dumpedstring))\n\n    return $extractedjson\n}\n"], "filenames": ["OctopusDSC/DSCResources/cTentacleAgent/cTentacleAgent.psm1", "OctopusDSC/OctopusDSCHelpers.ps1"], "buggy_code_start_loc": [1281, 156], "buggy_code_end_loc": [1282, 222], "fixing_code_start_loc": [1280, 156], "fixing_code_end_loc": [1280, 205], "type": "CWE-319", "message": "OctopusDSC is a PowerShell module with DSC resources that can be used to install and configure an Octopus Deploy Server and Tentacle agent. In OctopusDSC version 4.0.977 and earlier a customer API key used to connect to Octopus Server is exposed via logging in plaintext. This vulnerability is patched in version 4.0.1002.", "other": {"cve": {"id": "CVE-2021-21270", "sourceIdentifier": "security-advisories@github.com", "published": "2021-01-22T18:15:12.687", "lastModified": "2021-02-01T16:37:56.767", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OctopusDSC is a PowerShell module with DSC resources that can be used to install and configure an Octopus Deploy Server and Tentacle agent. In OctopusDSC version 4.0.977 and earlier a customer API key used to connect to Octopus Server is exposed via logging in plaintext. This vulnerability is patched in version 4.0.1002."}, {"lang": "es", "value": "OctopusDSC es un m\u00f3dulo de PowerShell con recursos de DSC, que se puede utilizar para instalar y configurar un agente de Octopus Deploy Server and Tentacle. En OctopusDSC versi\u00f3n 4.0.977 y anteriores, una clave de la API del cliente usada para conectarse a Octopus Server es expuesta mediante el inicio de sesi\u00f3n en texto plano. Esta vulnerabilidad est\u00e1 parcheada en la versi\u00f3n 4.0.1002"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.5, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-319"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:octopus:octopusdsc:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.1002", "matchCriteriaId": "6C2A1440-E4C7-464D-9FB8-25DE6573A278"}]}]}], "references": [{"url": "https://github.com/OctopusDeploy/OctopusDSC/commit/24b448e6ac964ed938475add494a145c0473ac42", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OctopusDeploy/OctopusDSC/pull/270", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OctopusDeploy/OctopusDSC/releases/tag/v4.0.1002", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/OctopusDeploy/OctopusDSC/security/advisories/GHSA-phmm-rfg9-94fm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OctopusDeploy/OctopusDSC/commit/24b448e6ac964ed938475add494a145c0473ac42"}}