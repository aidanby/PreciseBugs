{"buggy_code": ["import { useRouter } from \"next/router\";\nimport React, { ReactNode } from \"react\";\n\nimport { Layout, Spinner } from \"@/components\";\nimport { NavigationPanel } from \"@/components/NavigationPanel\";\nimport { usePaths } from \"@/lib/paths\";\nimport { useUser } from \"@/lib/useUser\";\nimport { useSaleorAuthContext } from \"@saleor/auth-sdk/react\";\n\nexport type AccountLayoutProps = { children: ReactNode };\n\nexport function AccountLayout({ children }: AccountLayoutProps) {\n  const router = useRouter();\n  const paths = usePaths();\n  const { authenticated } = useUser();\n  const { isAuthenticating } = useSaleorAuthContext();\n\n  if (isAuthenticating) {\n    return (\n      <Layout>\n        <Spinner />\n      </Layout>\n    );\n  }\n\n  if (!authenticated && typeof window !== \"undefined\") {\n    void router.push(paths.account.login.$url({ query: { next: router?.pathname } }));\n    return null;\n  }\n\n  return (\n    <Layout>\n      <div className=\"py-10\">\n        <main className=\"flex flex-col md:flex-row container px-8\">\n          <div className=\"mb-2 flex-initial md:w-3/5\">\n            <NavigationPanel />\n          </div>\n          <div className=\"flex flex-initial w-full flex-col overflow-y-auto md:px-4 space-y-4\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </Layout>\n  );\n}\n", "import Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useIntl } from \"react-intl\";\n\nimport { messages } from \"@/components/translations\";\nimport { DEMO_MODE } from \"@/lib/const\";\nimport { usePaths } from \"@/lib/paths\";\nimport { useSaleorAuthContext } from \"@saleor/auth-sdk/react\";\n\nexport type OptionalQuery = {\n  next?: string;\n};\n\nexport interface LoginFormData {\n  email: string;\n  password: string;\n}\n\nfunction LoginPage() {\n  const router = useRouter();\n  const paths = usePaths();\n  const t = useIntl();\n\n  const { signIn } = useSaleorAuthContext();\n\n  const defaultValues = DEMO_MODE\n    ? {\n        email: \"admin@example.com\",\n        password: \"admin\",\n      }\n    : {};\n\n  const {\n    register: registerForm,\n    handleSubmit: handleSubmitForm,\n    formState: { errors: errorsForm },\n    setError: setErrorForm,\n  } = useForm<LoginFormData>({ defaultValues });\n\n  const routerQueryNext = router.query.next?.toString() || \"\";\n  const isExternalUrl = /^\\w+:\\/\\//.test(routerQueryNext);\n  const redirectURL = !routerQueryNext || isExternalUrl ? paths.$url() : routerQueryNext;\n\n  const handleLogin = handleSubmitForm(async (formData: LoginFormData) => {\n    const { data } = await signIn({\n      email: formData.email,\n      password: formData.password,\n    });\n\n    if (data?.tokenCreate?.errors?.length) {\n      setErrorForm(\"email\", { message: \"Invalid credentials\" });\n      return;\n    }\n\n    void router.push(redirectURL);\n  });\n\n  return (\n    <div className=\"min-h-screen bg-no-repeat bg-cover bg-center bg-gradient-to-r from-blue-100 to-blue-500\">\n      <div className=\"flex justify-end\">\n        <div className=\"bg-white min-h-screen w-1/2 flex justify-center items-center\">\n          <div>\n            <form method=\"post\" onSubmit={handleLogin}>\n              <div>\n                <span className=\"text-sm text-gray-900\">\n                  {t.formatMessage(messages.loginWelcomeMessage)}\n                </span>\n                <h1 className=\"text-2xl font-bold\">{t.formatMessage(messages.loginHeader)}</h1>\n              </div>\n\n              <div className=\"my-3\">\n                <label htmlFor=\"email\" className=\"block text-md mb-2\">\n                  {t.formatMessage(messages.loginEmailFieldLabel)}\n                </label>\n                <input\n                  className=\"px-4 w-full border-2 py-2 rounded-md text-sm outline-none\"\n                  type=\"email\"\n                  id=\"email\"\n                  spellCheck={false}\n                  {...registerForm(\"email\", {\n                    required: true,\n                  })}\n                />\n              </div>\n              <div className=\"mt-5\">\n                <label htmlFor=\"password\" className=\"block text-md mb-2\">\n                  {t.formatMessage(messages.loginPasswordFieldLabel)}\n                </label>\n                <input\n                  className=\"px-4 w-full border-2 py-2 rounded-md text-sm outline-none\"\n                  type=\"password\"\n                  id=\"password\"\n                  spellCheck={false}\n                  {...registerForm(\"password\", {\n                    required: true,\n                  })}\n                />\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-blue-700 hover:underline cursor-pointer pt-2\">\n                  {t.formatMessage(messages.loginRemindPasswordButtonLabel)}\n                </span>\n              </div>\n              <div className=\"\">\n                <button\n                  type=\"submit\"\n                  className=\"mt-4 mb-3 w-full bg-green-500 hover:bg-green-400 text-white py-2 rounded-md transition duration-100\"\n                >\n                  {t.formatMessage(messages.logIn)}\n                </button>\n                {!!errorsForm.email && (\n                  <p className=\"text-sm text-red-500 pt-2\">{errorsForm.email?.message}</p>\n                )}\n              </div>\n            </form>\n            <p className=\"mt-8\">\n              <Link href={paths.account.register.$url()}>\n                {t.formatMessage(messages.createAccount)}\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LoginPage;\n"], "fixing_code": ["import { useRouter } from \"next/router\";\nimport React, { ReactNode } from \"react\";\n\nimport { Layout, Spinner } from \"@/components\";\nimport { NavigationPanel } from \"@/components/NavigationPanel\";\nimport { usePaths } from \"@/lib/paths\";\nimport { useUser } from \"@/lib/useUser\";\nimport { useSaleorAuthContext } from \"@saleor/auth-sdk/react\";\n\nexport type AccountLayoutProps = { children: ReactNode };\n\nexport function AccountLayout({ children }: AccountLayoutProps) {\n  const router = useRouter();\n  const paths = usePaths();\n  const { authenticated } = useUser();\n  const { isAuthenticating } = useSaleorAuthContext();\n\n  if (isAuthenticating) {\n    return (\n      <Layout>\n        <Spinner />\n      </Layout>\n    );\n  }\n\n  if (!authenticated) {\n    if (router.isReady && typeof window !== \"undefined\") {\n      void router.replace(paths.account.login.$url({ query: { next: router?.asPath } }));\n    }\n    return null;\n  }\n\n  return (\n    <Layout>\n      <div className=\"py-10\">\n        <main className=\"flex flex-col md:flex-row container px-8\">\n          <div className=\"mb-2 flex-initial md:w-3/5\">\n            <NavigationPanel />\n          </div>\n          <div className=\"flex flex-initial w-full flex-col overflow-y-auto md:px-4 space-y-4\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </Layout>\n  );\n}\n", "import Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useIntl } from \"react-intl\";\n\nimport { messages } from \"@/components/translations\";\nimport { DEMO_MODE } from \"@/lib/const\";\nimport { usePaths } from \"@/lib/paths\";\nimport { useSaleorAuthContext } from \"@saleor/auth-sdk/react\";\n\nexport type OptionalQuery = {\n  next?: string;\n};\n\nexport interface LoginFormData {\n  email: string;\n  password: string;\n}\n\nfunction LoginPage() {\n  const router = useRouter();\n  const paths = usePaths();\n  const t = useIntl();\n\n  const { signIn } = useSaleorAuthContext();\n\n  const defaultValues = DEMO_MODE\n    ? {\n        email: \"admin@example.com\",\n        password: \"admin\",\n      }\n    : {};\n\n  const {\n    register: registerForm,\n    handleSubmit: handleSubmitForm,\n    formState: { errors: errorsForm },\n    setError: setErrorForm,\n  } = useForm<LoginFormData>({ defaultValues });\n\n  const routerQueryNext = router.query.next?.toString() || \"\";\n\n  const handleLogin = handleSubmitForm(async (formData: LoginFormData) => {\n    const { data } = await signIn({\n      email: formData.email,\n      password: formData.password,\n    });\n\n    if (data?.tokenCreate?.errors?.length) {\n      setErrorForm(\"email\", { message: \"Invalid credentials\" });\n      return;\n    }\n\n    const redirectURL =\n      (routerQueryNext && new URL(routerQueryNext, window.location.toString()).pathname) ||\n      paths.$url();\n    void router.push(redirectURL);\n  });\n\n  return (\n    <div className=\"min-h-screen bg-no-repeat bg-cover bg-center bg-gradient-to-r from-blue-100 to-blue-500\">\n      <div className=\"flex justify-end\">\n        <div className=\"bg-white min-h-screen w-1/2 flex justify-center items-center\">\n          <div>\n            <form method=\"post\" onSubmit={handleLogin}>\n              <div>\n                <span className=\"text-sm text-gray-900\">\n                  {t.formatMessage(messages.loginWelcomeMessage)}\n                </span>\n                <h1 className=\"text-2xl font-bold\">{t.formatMessage(messages.loginHeader)}</h1>\n              </div>\n\n              <div className=\"my-3\">\n                <label htmlFor=\"email\" className=\"block text-md mb-2\">\n                  {t.formatMessage(messages.loginEmailFieldLabel)}\n                </label>\n                <input\n                  className=\"px-4 w-full border-2 py-2 rounded-md text-sm outline-none\"\n                  type=\"email\"\n                  id=\"email\"\n                  spellCheck={false}\n                  {...registerForm(\"email\", {\n                    required: true,\n                  })}\n                />\n              </div>\n              <div className=\"mt-5\">\n                <label htmlFor=\"password\" className=\"block text-md mb-2\">\n                  {t.formatMessage(messages.loginPasswordFieldLabel)}\n                </label>\n                <input\n                  className=\"px-4 w-full border-2 py-2 rounded-md text-sm outline-none\"\n                  type=\"password\"\n                  id=\"password\"\n                  spellCheck={false}\n                  {...registerForm(\"password\", {\n                    required: true,\n                  })}\n                />\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-blue-700 hover:underline cursor-pointer pt-2\">\n                  {t.formatMessage(messages.loginRemindPasswordButtonLabel)}\n                </span>\n              </div>\n              <div className=\"\">\n                <button\n                  type=\"submit\"\n                  className=\"mt-4 mb-3 w-full bg-green-500 hover:bg-green-400 text-white py-2 rounded-md transition duration-100\"\n                >\n                  {t.formatMessage(messages.logIn)}\n                </button>\n                {!!errorsForm.email && (\n                  <p className=\"text-sm text-red-500 pt-2\">{errorsForm.email?.message}</p>\n                )}\n              </div>\n            </form>\n            <p className=\"mt-8\">\n              <Link href={paths.account.register.$url()}>\n                {t.formatMessage(messages.createAccount)}\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LoginPage;\n"], "filenames": ["apps/storefront/components/AccountLayout/AccountLayout.tsx", "apps/storefront/pages/[channel]/[locale]/account/login.tsx"], "buggy_code_start_loc": [26, 43], "buggy_code_end_loc": [28, 56], "fixing_code_start_loc": [26, 42], "fixing_code_end_loc": [30, 58], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - DOM in GitHub repository saleor/react-storefront prior to c29aab226f07ca980cc19787dcef101e11b83ef7.", "other": {"cve": {"id": "CVE-2023-3294", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-16T12:15:09.393", "lastModified": "2023-06-23T21:26:49.927", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - DOM in GitHub repository saleor/react-storefront prior to c29aab226f07ca980cc19787dcef101e11b83ef7."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:saleor:react-storefront:*:*:*:*:*:*:*:*", "versionEndExcluding": "2023-06-16", "matchCriteriaId": "27BF056E-56C0-494A-8932-1AC1BF4FDA23"}]}]}], "references": [{"url": "https://github.com/saleor/react-storefront/commit/c29aab226f07ca980cc19787dcef101e11b83ef7", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/9d308ebb-4289-411f-ac22-990383d98932", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking"]}]}, "github_commit_url": "https://github.com/saleor/react-storefront/commit/c29aab226f07ca980cc19787dcef101e11b83ef7"}}