{"buggy_code": ["#include \"stdafx.h\"\n#include \"WebServer.h\"\n#include \"WebServerHelper.h\"\n#include <boost/bind.hpp>\n#include <iostream>\n#include <fstream>\n#include \"mainworker.h\"\n#include \"Helper.h\"\n#include \"localtime_r.h\"\n#include \"EventSystem.h\"\n#include \"dzVents.h\"\n#include \"../httpclient/HTTPClient.h\"\n#include \"../hardware/hardwaretypes.h\"\n#include \"../hardware/1Wire.h\"\n#include \"../hardware/OTGWBase.h\"\n#ifdef WITH_OPENZWAVE\n#include \"../hardware/OpenZWave.h\"\n#endif\n#include \"../hardware/EnOceanESP2.h\"\n#include \"../hardware/EnOceanESP3.h\"\n#include \"../hardware/Wunderground.h\"\n#include \"../hardware/DarkSky.h\"\n#include \"../hardware/AccuWeather.h\"\n#include \"../hardware/OpenWeatherMap.h\"\n#include \"../hardware/Kodi.h\"\n#include \"../hardware/Limitless.h\"\n#include \"../hardware/LogitechMediaServer.h\"\n#include \"../hardware/MySensorsBase.h\"\n#include \"../hardware/RFXBase.h\"\n#include \"../hardware/RFLinkBase.h\"\n#include \"../hardware/SysfsGpio.h\"\n#include \"../hardware/HEOS.h\"\n#include \"../hardware/eHouseTCP.h\"\n#include \"../hardware/USBtin.h\"\n#include \"../hardware/USBtin_MultiblocV8.h\"\n#ifdef WITH_GPIO\n#include \"../hardware/Gpio.h\"\n#include \"../hardware/GpioPin.h\"\n#endif // WITH_GPIO\n#include \"../hardware/Tellstick.h\"\n#include \"../webserver/Base64.h\"\n#include \"../smtpclient/SMTPClient.h\"\n#include \"../json/json.h\"\n#include \"Logger.h\"\n#include \"SQLHelper.h\"\n#include \"../push/BasePush.h\"\n#include <algorithm>\n#ifdef ENABLE_PYTHON\n#include \"../hardware/plugins/Plugins.h\"\n#endif\n\n#ifndef WIN32\n#include <sys/utsname.h>\n#include <dirent.h>\n#else\n#include \"../msbuild/WindowsHelper.h\"\n#include \"dirent_windows.h\"\n#endif\n#include \"../notifications/NotificationHelper.h\"\n#include \"../main/LuaHandler.h\"\n\n#define __STDC_FORMAT_MACROS\n#include <inttypes.h>\n\n#define round(a) ( int ) ( a + .5 )\n\nextern std::string szUserDataFolder;\nextern std::string szWWWFolder;\n\nextern std::string szAppVersion;\nextern std::string szAppHash;\nextern std::string szAppDate;\nextern std::string szPyVersion;\n\nextern bool g_bUseUpdater;\n\nextern time_t m_StartTime;\n\nextern bool g_bDontCacheWWW;\n\nstruct _tGuiLanguage {\n\tconst char* szShort;\n\tconst char* szLong;\n};\n\nstatic const _tGuiLanguage guiLanguage[] =\n{\n\t{ \"en\", \"English\" },\n\t{ \"sq\", \"Albanian\" },\n\t{ \"ar\", \"Arabic\" },\n\t{ \"bs\", \"Bosnian\" },\n\t{ \"bg\", \"Bulgarian\" },\n\t{ \"ca\", \"Catalan\" },\n\t{ \"zh\", \"Chinese\" },\n\t{ \"cs\", \"Czech\" },\n\t{ \"da\", \"Danish\" },\n\t{ \"nl\", \"Dutch\" },\n\t{ \"et\", \"Estonian\" },\n\t{ \"de\", \"German\" },\n\t{ \"el\", \"Greek\" },\n\t{ \"fr\", \"French\" },\n\t{ \"fi\", \"Finnish\" },\n\t{ \"he\", \"Hebrew\" },\n\t{ \"hu\", \"Hungarian\" },\n\t{ \"is\", \"Icelandic\" },\n\t{ \"it\", \"Italian\" },\n\t{ \"lt\", \"Lithuanian\" },\n\t{ \"lv\", \"Latvian\" },\n\t{ \"mk\", \"Macedonian\" },\n\t{ \"no\", \"Norwegian\" },\n\t{ \"fa\", \"Persian\" },\n\t{ \"pl\", \"Polish\" },\n\t{ \"pt\", \"Portuguese\" },\n\t{ \"ro\", \"Romanian\" },\n\t{ \"ru\", \"Russian\" },\n\t{ \"sr\", \"Serbian\" },\n\t{ \"sk\", \"Slovak\" },\n\t{ \"sl\", \"Slovenian\" },\n\t{ \"es\", \"Spanish\" },\n\t{ \"sv\", \"Swedish\" },\n\t{ \"zh_TW\", \"Taiwanese\" },\n\t{ \"tr\", \"Turkish\" },\n\t{ \"uk\", \"Ukrainian\" },\n\t{ NULL, NULL }\n};\n\nextern http::server::CWebServerHelper m_webservers;\n\nnamespace http {\n\tnamespace server {\n\n\t\tCWebServer::CWebServer(void) : session_store()\n\t\t{\n\t\t\tm_pWebEm = NULL;\n\t\t\tm_bDoStop = false;\n#ifdef WITH_OPENZWAVE\n\t\t\tm_ZW_Hwidx = -1;\n#endif\n\t\t}\n\n\n\t\tCWebServer::~CWebServer(void)\n\t\t{\n\t\t\t// RK, we call StopServer() instead of just deleting m_pWebEm. The Do_Work thread might still be accessing that object\n\t\t\tStopServer();\n\t\t}\n\n\t\tvoid CWebServer::Do_Work()\n\t\t{\n\t\t\tbool exception_thrown = false;\n\t\t\twhile (!m_bDoStop)\n\t\t\t{\n\t\t\t\texception_thrown = false;\n\t\t\t\ttry {\n\t\t\t\t\tif (m_pWebEm) {\n\t\t\t\t\t\tm_pWebEm->Run();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (std::exception& e) {\n\t\t\t\t\t_log.Log(LOG_ERROR, \"WebServer(%s) exception occurred : '%s'\", m_server_alias.c_str(), e.what());\n\t\t\t\t\texception_thrown = true;\n\t\t\t\t}\n\t\t\t\tcatch (...) {\n\t\t\t\t\t_log.Log(LOG_ERROR, \"WebServer(%s) unknown exception occurred\", m_server_alias.c_str());\n\t\t\t\t\texception_thrown = true;\n\t\t\t\t}\n\t\t\t\tif (exception_thrown) {\n\t\t\t\t\t_log.Log(LOG_STATUS, \"WebServer(%s) restart server in 5 seconds\", m_server_alias.c_str());\n\t\t\t\t\tsleep_milliseconds(5000); // prevents from an exception flood\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_log.Log(LOG_STATUS, \"WebServer(%s) stopped\", m_server_alias.c_str());\n\t\t}\n\n\t\tvoid CWebServer::ReloadCustomSwitchIcons()\n\t\t{\n\t\t\tm_custom_light_icons.clear();\n\t\t\tm_custom_light_icons_lookup.clear();\n\t\t\tstd::string sLine = \"\";\n\n\t\t\t//First get them from the switch_icons.txt file\n\t\t\tstd::ifstream infile;\n\t\t\tstd::string switchlightsfile = szWWWFolder + \"/switch_icons.txt\";\n\t\t\tinfile.open(switchlightsfile.c_str());\n\t\t\tif (infile.is_open())\n\t\t\t{\n\t\t\t\tint index = 0;\n\t\t\t\twhile (!infile.eof())\n\t\t\t\t{\n\t\t\t\t\tgetline(infile, sLine);\n\t\t\t\t\tif (sLine.size() != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> results;\n\t\t\t\t\t\tStringSplit(sLine, \";\", results);\n\t\t\t\t\t\tif (results.size() == 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_tCustomIcon cImage;\n\t\t\t\t\t\t\tcImage.idx = index++;\n\t\t\t\t\t\t\tcImage.RootFile = results[0];\n\t\t\t\t\t\t\tcImage.Title = results[1];\n\t\t\t\t\t\t\tcImage.Description = results[2];\n\t\t\t\t\t\t\tm_custom_light_icons.push_back(cImage);\n\t\t\t\t\t\t\tm_custom_light_icons_lookup[cImage.idx] = m_custom_light_icons.size() - 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tinfile.close();\n\t\t\t}\n\t\t\t//Now get them from the database (idx 100+)\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID,Base,Name,Description FROM CustomImages\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tint ID = atoi(sd[0].c_str());\n\n\t\t\t\t\t_tCustomIcon cImage;\n\t\t\t\t\tcImage.idx = 100 + ID;\n\t\t\t\t\tcImage.RootFile = sd[1];\n\t\t\t\t\tcImage.Title = sd[2];\n\t\t\t\t\tcImage.Description = sd[3];\n\n\t\t\t\t\tstd::string IconFile16 = cImage.RootFile + \".png\";\n\t\t\t\t\tstd::string IconFile48On = cImage.RootFile + \"48_On.png\";\n\t\t\t\t\tstd::string IconFile48Off = cImage.RootFile + \"48_Off.png\";\n\n\t\t\t\t\tstd::map<std::string, std::string> _dbImageFiles;\n\t\t\t\t\t_dbImageFiles[\"IconSmall\"] = szWWWFolder + \"/images/\" + IconFile16;\n\t\t\t\t\t_dbImageFiles[\"IconOn\"] = szWWWFolder + \"/images/\" + IconFile48On;\n\t\t\t\t\t_dbImageFiles[\"IconOff\"] = szWWWFolder + \"/images/\" + IconFile48Off;\n\n\t\t\t\t\t//Check if files are on disk, else add them\n\t\t\t\t\tfor (const auto & iItt : _dbImageFiles)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string TableField = iItt.first;\n\t\t\t\t\t\tstd::string IconFile = iItt.second;\n\n\t\t\t\t\t\tif (!file_exist(IconFile.c_str()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Does not exists, extract it from the database and add it\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tresult2 = m_sql.safe_queryBlob(\"SELECT %s FROM CustomImages WHERE ID=%d\", TableField.c_str(), ID);\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::ofstream file;\n\t\t\t\t\t\t\t\tfile.open(IconFile.c_str(), std::ios::out | std::ios::binary);\n\t\t\t\t\t\t\t\tif (!file.is_open())\n\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\tfile << result2[0][0];\n\t\t\t\t\t\t\t\tfile.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tm_custom_light_icons.push_back(cImage);\n\t\t\t\t\tm_custom_light_icons_lookup[cImage.idx] = m_custom_light_icons.size() - 1;\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbool CWebServer::StartServer(server_settings & settings, const std::string & serverpath, const bool bIgnoreUsernamePassword)\n\t\t{\n\t\t\tm_server_alias = (settings.is_secure() == true) ? \"SSL\" : \"HTTP\";\n\n\t\t\tif (!settings.is_enabled())\n\t\t\t\treturn true;\n\n\t\t\tReloadCustomSwitchIcons();\n\n\t\t\tint tries = 0;\n\t\t\tbool exception = false;\n\n\t\t\t//_log.Log(LOG_STATUS, \"CWebServer::StartServer() : settings : %s\", settings.to_string().c_str());\n\t\t\tdo {\n\t\t\t\ttry {\n\t\t\t\t\texception = false;\n\t\t\t\t\tm_pWebEm = new http::server::cWebem(settings, serverpath.c_str());\n\t\t\t\t}\n\t\t\t\tcatch (std::exception& e) {\n\t\t\t\t\texception = true;\n\t\t\t\t\tswitch (tries) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tsettings.listening_address = \"::\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tsettings.listening_address = \"0.0.0.0\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"WebServer(%s) startup failed on address %s with port: %s: %s\", m_server_alias.c_str(), settings.listening_address.c_str(), settings.listening_port.c_str(), e.what());\n\t\t\t\t\t\tif (atoi(settings.listening_port.c_str()) < 1024)\n\t\t\t\t\t\t\t_log.Log(LOG_ERROR, \"WebServer(%s) check privileges for opening ports below 1024\", m_server_alias.c_str());\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t_log.Log(LOG_ERROR, \"WebServer(%s) check if no other application is using port: %s\", m_server_alias.c_str(), settings.listening_port.c_str());\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\ttries++;\n\t\t\t\t}\n\t\t\t} while (exception);\n\n\t\t\t_log.Log(LOG_STATUS, \"WebServer(%s) started on address: %s with port %s\", m_server_alias.c_str(), settings.listening_address.c_str(), settings.listening_port.c_str());\n\n\t\t\tm_pWebEm->SetDigistRealm(\"Domoticz.com\");\n\t\t\tm_pWebEm->SetSessionStore(this);\n\n\t\t\tif (!bIgnoreUsernamePassword)\n\t\t\t{\n\t\t\t\tLoadUsers();\n\t\t\t\tstd::string WebLocalNetworks;\n\t\t\t\tint nValue;\n\t\t\t\tif (m_sql.GetPreferencesVar(\"WebLocalNetworks\", nValue, WebLocalNetworks))\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\tStringSplit(WebLocalNetworks, \";\", strarray);\n\t\t\t\t\tfor (const auto & itt : strarray)\n\t\t\t\t\t\tm_pWebEm->AddLocalNetworks(itt);\n\t\t\t\t\t//add local hostname\n\t\t\t\t\tm_pWebEm->AddLocalNetworks(\"\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstd::string WebRemoteProxyIPs;\n\t\t\tint nValue;\n\t\t\tif (m_sql.GetPreferencesVar(\"WebRemoteProxyIPs\", nValue, WebRemoteProxyIPs))\n\t\t\t{\n\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\tStringSplit(WebRemoteProxyIPs, \";\", strarray);\n\t\t\t\tfor (const auto & itt : strarray)\n\t\t\t\t\tm_pWebEm->AddRemoteProxyIPs(itt);\n\t\t\t}\n\n\t\t\t//register callbacks\n\t\t\tm_pWebEm->RegisterIncludeCode(\"switchtypes\", boost::bind(&CWebServer::DisplaySwitchTypesCombo, this, _1));\n\t\t\tm_pWebEm->RegisterIncludeCode(\"metertypes\", boost::bind(&CWebServer::DisplayMeterTypesCombo, this, _1));\n\t\t\tm_pWebEm->RegisterIncludeCode(\"timertypes\", boost::bind(&CWebServer::DisplayTimerTypesCombo, this, _1));\n\t\t\tm_pWebEm->RegisterIncludeCode(\"combolanguage\", boost::bind(&CWebServer::DisplayLanguageCombo, this, _1));\n\n\t\t\tm_pWebEm->RegisterPageCode(\"/json.htm\", boost::bind(&CWebServer::GetJSonPage, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/uploadcustomicon\", boost::bind(&CWebServer::Post_UploadCustomIcon, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/html5.appcache\", boost::bind(&CWebServer::GetAppCache, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/camsnapshot.jpg\", boost::bind(&CWebServer::GetCameraSnapshot, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/backupdatabase.php\", boost::bind(&CWebServer::GetDatabaseBackup, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/raspberry.cgi\", boost::bind(&CWebServer::GetInternalCameraSnapshot, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/uvccapture.cgi\", boost::bind(&CWebServer::GetInternalCameraSnapshot, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/images/floorplans/plan\", boost::bind(&CWebServer::GetFloorplanImage, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterActionCode(\"storesettings\", boost::bind(&CWebServer::PostSettings, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"setrfxcommode\", boost::bind(&CWebServer::SetRFXCOMMode, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"rfxupgradefirmware\", boost::bind(&CWebServer::RFXComUpgradeFirmware, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"rfxfirmwaregetpercentage\", boost::bind(&CWebServer::Cmd_RFXComGetFirmwarePercentage, this, _1, _2, _3), true);\n\t\t\tm_pWebEm->RegisterActionCode(\"setrego6xxtype\", boost::bind(&CWebServer::SetRego6XXType, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"sets0metertype\", boost::bind(&CWebServer::SetS0MeterType, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"setlimitlesstype\", boost::bind(&CWebServer::SetLimitlessType, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterActionCode(\"uploadfloorplanimage\", boost::bind(&CWebServer::UploadFloorplanImage, this, _1, _2, _3));\n\n\n\t\t\tm_pWebEm->RegisterActionCode(\"setopenthermsettings\", boost::bind(&CWebServer::SetOpenThermSettings, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"sendopenthermcommand\", boost::bind(&CWebServer::Cmd_SendOpenThermCommand, this, _1, _2, _3), true);\n\n\t\t\tm_pWebEm->RegisterActionCode(\"reloadpiface\", boost::bind(&CWebServer::ReloadPiFace, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"setcurrentcostmetertype\", boost::bind(&CWebServer::SetCurrentCostUSBType, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"restoredatabase\", boost::bind(&CWebServer::RestoreDatabase, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"sbfspotimportolddata\", boost::bind(&CWebServer::SBFSpotImportOldData, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterActionCode(\"event_create\", boost::bind(&CWebServer::EventCreate, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"getlanguage\", boost::bind(&CWebServer::Cmd_GetLanguage, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"getthemes\", boost::bind(&CWebServer::Cmd_GetThemes, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"gettitle\", boost::bind(&CWebServer::Cmd_GetTitle, this, _1, _2, _3), true);\n\n\t\t\tRegisterCommandCode(\"logincheck\", boost::bind(&CWebServer::Cmd_LoginCheck, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"getversion\", boost::bind(&CWebServer::Cmd_GetVersion, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"getlog\", boost::bind(&CWebServer::Cmd_GetLog, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"clearlog\", boost::bind(&CWebServer::Cmd_ClearLog, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getauth\", boost::bind(&CWebServer::Cmd_GetAuth, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"getuptime\", boost::bind(&CWebServer::Cmd_GetUptime, this, _1, _2, _3), true);\n\n\n\t\t\tRegisterCommandCode(\"gethardwaretypes\", boost::bind(&CWebServer::Cmd_GetHardwareTypes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addhardware\", boost::bind(&CWebServer::Cmd_AddHardware, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatehardware\", boost::bind(&CWebServer::Cmd_UpdateHardware, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletehardware\", boost::bind(&CWebServer::Cmd_DeleteHardware, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addcamera\", boost::bind(&CWebServer::Cmd_AddCamera, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatecamera\", boost::bind(&CWebServer::Cmd_UpdateCamera, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletecamera\", boost::bind(&CWebServer::Cmd_DeleteCamera, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"wolgetnodes\", boost::bind(&CWebServer::Cmd_WOLGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"woladdnode\", boost::bind(&CWebServer::Cmd_WOLAddNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"wolupdatenode\", boost::bind(&CWebServer::Cmd_WOLUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"wolremovenode\", boost::bind(&CWebServer::Cmd_WOLRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"wolclearnodes\", boost::bind(&CWebServer::Cmd_WOLClearNodes, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"mysensorsgetnodes\", boost::bind(&CWebServer::Cmd_MySensorsGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"mysensorsgetchilds\", boost::bind(&CWebServer::Cmd_MySensorsGetChilds, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"mysensorsupdatenode\", boost::bind(&CWebServer::Cmd_MySensorsUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"mysensorsremovenode\", boost::bind(&CWebServer::Cmd_MySensorsRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"mysensorsremovechild\", boost::bind(&CWebServer::Cmd_MySensorsRemoveChild, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"mysensorsupdatechild\", boost::bind(&CWebServer::Cmd_MySensorsUpdateChild, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"pingersetmode\", boost::bind(&CWebServer::Cmd_PingerSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"pingergetnodes\", boost::bind(&CWebServer::Cmd_PingerGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"pingeraddnode\", boost::bind(&CWebServer::Cmd_PingerAddNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"pingerupdatenode\", boost::bind(&CWebServer::Cmd_PingerUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"pingerremovenode\", boost::bind(&CWebServer::Cmd_PingerRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"pingerclearnodes\", boost::bind(&CWebServer::Cmd_PingerClearNodes, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"kodisetmode\", boost::bind(&CWebServer::Cmd_KodiSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodigetnodes\", boost::bind(&CWebServer::Cmd_KodiGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodiaddnode\", boost::bind(&CWebServer::Cmd_KodiAddNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodiupdatenode\", boost::bind(&CWebServer::Cmd_KodiUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodiremovenode\", boost::bind(&CWebServer::Cmd_KodiRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodiclearnodes\", boost::bind(&CWebServer::Cmd_KodiClearNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodimediacommand\", boost::bind(&CWebServer::Cmd_KodiMediaCommand, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"panasonicsetmode\", boost::bind(&CWebServer::Cmd_PanasonicSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicgetnodes\", boost::bind(&CWebServer::Cmd_PanasonicGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicaddnode\", boost::bind(&CWebServer::Cmd_PanasonicAddNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicupdatenode\", boost::bind(&CWebServer::Cmd_PanasonicUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicremovenode\", boost::bind(&CWebServer::Cmd_PanasonicRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicclearnodes\", boost::bind(&CWebServer::Cmd_PanasonicClearNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicmediacommand\", boost::bind(&CWebServer::Cmd_PanasonicMediaCommand, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"heossetmode\", boost::bind(&CWebServer::Cmd_HEOSSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"heosmediacommand\", boost::bind(&CWebServer::Cmd_HEOSMediaCommand, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"onkyoeiscpcommand\", boost::bind(&CWebServer::Cmd_OnkyoEiscpCommand, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"bleboxsetmode\", boost::bind(&CWebServer::Cmd_BleBoxSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxgetnodes\", boost::bind(&CWebServer::Cmd_BleBoxGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxaddnode\", boost::bind(&CWebServer::Cmd_BleBoxAddNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxremovenode\", boost::bind(&CWebServer::Cmd_BleBoxRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxclearnodes\", boost::bind(&CWebServer::Cmd_BleBoxClearNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxautosearchingnodes\", boost::bind(&CWebServer::Cmd_BleBoxAutoSearchingNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxupdatefirmware\", boost::bind(&CWebServer::Cmd_BleBoxUpdateFirmware, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"lmssetmode\", boost::bind(&CWebServer::Cmd_LMSSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"lmsgetnodes\", boost::bind(&CWebServer::Cmd_LMSGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"lmsgetplaylists\", boost::bind(&CWebServer::Cmd_LMSGetPlaylists, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"lmsmediacommand\", boost::bind(&CWebServer::Cmd_LMSMediaCommand, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"lmsdeleteunuseddevices\", boost::bind(&CWebServer::Cmd_LMSDeleteUnusedDevices, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"savefibarolinkconfig\", boost::bind(&CWebServer::Cmd_SaveFibaroLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getfibarolinkconfig\", boost::bind(&CWebServer::Cmd_GetFibaroLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getfibarolinks\", boost::bind(&CWebServer::Cmd_GetFibaroLinks, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"savefibarolink\", boost::bind(&CWebServer::Cmd_SaveFibaroLink, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletefibarolink\", boost::bind(&CWebServer::Cmd_DeleteFibaroLink, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"saveinfluxlinkconfig\", boost::bind(&CWebServer::Cmd_SaveInfluxLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getinfluxlinkconfig\", boost::bind(&CWebServer::Cmd_GetInfluxLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getinfluxlinks\", boost::bind(&CWebServer::Cmd_GetInfluxLinks, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"saveinfluxlink\", boost::bind(&CWebServer::Cmd_SaveInfluxLink, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deleteinfluxlink\", boost::bind(&CWebServer::Cmd_DeleteInfluxLink, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"savehttplinkconfig\", boost::bind(&CWebServer::Cmd_SaveHttpLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"gethttplinkconfig\", boost::bind(&CWebServer::Cmd_GetHttpLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"gethttplinks\", boost::bind(&CWebServer::Cmd_GetHttpLinks, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"savehttplink\", boost::bind(&CWebServer::Cmd_SaveHttpLink, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletehttplink\", boost::bind(&CWebServer::Cmd_DeleteHttpLink, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"savegooglepubsublinkconfig\", boost::bind(&CWebServer::Cmd_SaveGooglePubSubLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getgooglepubsublinkconfig\", boost::bind(&CWebServer::Cmd_GetGooglePubSubLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getgooglepubsublinks\", boost::bind(&CWebServer::Cmd_GetGooglePubSubLinks, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"savegooglepubsublink\", boost::bind(&CWebServer::Cmd_SaveGooglePubSubLink, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletegooglepubsublink\", boost::bind(&CWebServer::Cmd_DeleteGooglePubSubLink, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"getdevicevalueoptions\", boost::bind(&CWebServer::Cmd_GetDeviceValueOptions, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getdevicevalueoptionwording\", boost::bind(&CWebServer::Cmd_GetDeviceValueOptionWording, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"adduservariable\", boost::bind(&CWebServer::Cmd_AddUserVariable, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updateuservariable\", boost::bind(&CWebServer::Cmd_UpdateUserVariable, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deleteuservariable\", boost::bind(&CWebServer::Cmd_DeleteUserVariable, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getuservariables\", boost::bind(&CWebServer::Cmd_GetUserVariables, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getuservariable\", boost::bind(&CWebServer::Cmd_GetUserVariable, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"allownewhardware\", boost::bind(&CWebServer::Cmd_AllowNewHardware, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addplan\", boost::bind(&CWebServer::Cmd_AddPlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updateplan\", boost::bind(&CWebServer::Cmd_UpdatePlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deleteplan\", boost::bind(&CWebServer::Cmd_DeletePlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getunusedplandevices\", boost::bind(&CWebServer::Cmd_GetUnusedPlanDevices, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addplanactivedevice\", boost::bind(&CWebServer::Cmd_AddPlanActiveDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getplandevices\", boost::bind(&CWebServer::Cmd_GetPlanDevices, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deleteplandevice\", boost::bind(&CWebServer::Cmd_DeletePlanDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"setplandevicecoords\", boost::bind(&CWebServer::Cmd_SetPlanDeviceCoords, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deleteallplandevices\", boost::bind(&CWebServer::Cmd_DeleteAllPlanDevices, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"changeplanorder\", boost::bind(&CWebServer::Cmd_ChangePlanOrder, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"changeplandeviceorder\", boost::bind(&CWebServer::Cmd_ChangePlanDeviceOrder, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"gettimerplans\", boost::bind(&CWebServer::Cmd_GetTimerPlans, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addtimerplan\", boost::bind(&CWebServer::Cmd_AddTimerPlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatetimerplan\", boost::bind(&CWebServer::Cmd_UpdateTimerPlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletetimerplan\", boost::bind(&CWebServer::Cmd_DeleteTimerPlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"duplicatetimerplan\", boost::bind(&CWebServer::Cmd_DuplicateTimerPlan, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"getactualhistory\", boost::bind(&CWebServer::Cmd_GetActualHistory, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getnewhistory\", boost::bind(&CWebServer::Cmd_GetNewHistory, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"getconfig\", boost::bind(&CWebServer::Cmd_GetConfig, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"sendnotification\", boost::bind(&CWebServer::Cmd_SendNotification, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"emailcamerasnapshot\", boost::bind(&CWebServer::Cmd_EmailCameraSnapshot, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"udevice\", boost::bind(&CWebServer::Cmd_UpdateDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"udevices\", boost::bind(&CWebServer::Cmd_UpdateDevices, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"thermostatstate\", boost::bind(&CWebServer::Cmd_SetThermostatState, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"system_shutdown\", boost::bind(&CWebServer::Cmd_SystemShutdown, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"system_reboot\", boost::bind(&CWebServer::Cmd_SystemReboot, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"execute_script\", boost::bind(&CWebServer::Cmd_ExcecuteScript, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getcosts\", boost::bind(&CWebServer::Cmd_GetCosts, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"checkforupdate\", boost::bind(&CWebServer::Cmd_CheckForUpdate, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"downloadupdate\", boost::bind(&CWebServer::Cmd_DownloadUpdate, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"downloadready\", boost::bind(&CWebServer::Cmd_DownloadReady, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletedatapoint\", boost::bind(&CWebServer::Cmd_DeleteDatePoint, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"setactivetimerplan\", boost::bind(&CWebServer::Cmd_SetActiveTimerPlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addtimer\", boost::bind(&CWebServer::Cmd_AddTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatetimer\", boost::bind(&CWebServer::Cmd_UpdateTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletetimer\", boost::bind(&CWebServer::Cmd_DeleteTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"enabletimer\", boost::bind(&CWebServer::Cmd_EnableTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"disabletimer\", boost::bind(&CWebServer::Cmd_DisableTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"cleartimers\", boost::bind(&CWebServer::Cmd_ClearTimers, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addscenetimer\", boost::bind(&CWebServer::Cmd_AddSceneTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatescenetimer\", boost::bind(&CWebServer::Cmd_UpdateSceneTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletescenetimer\", boost::bind(&CWebServer::Cmd_DeleteSceneTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"enablescenetimer\", boost::bind(&CWebServer::Cmd_EnableSceneTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"disablescenetimer\", boost::bind(&CWebServer::Cmd_DisableSceneTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"clearscenetimers\", boost::bind(&CWebServer::Cmd_ClearSceneTimers, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getsceneactivations\", boost::bind(&CWebServer::Cmd_GetSceneActivations, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addscenecode\", boost::bind(&CWebServer::Cmd_AddSceneCode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"removescenecode\", boost::bind(&CWebServer::Cmd_RemoveSceneCode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"clearscenecodes\", boost::bind(&CWebServer::Cmd_ClearSceneCodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"renamescene\", boost::bind(&CWebServer::Cmd_RenameScene, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"setsetpoint\", boost::bind(&CWebServer::Cmd_SetSetpoint, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addsetpointtimer\", boost::bind(&CWebServer::Cmd_AddSetpointTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatesetpointtimer\", boost::bind(&CWebServer::Cmd_UpdateSetpointTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletesetpointtimer\", boost::bind(&CWebServer::Cmd_DeleteSetpointTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"enablesetpointtimer\", boost::bind(&CWebServer::Cmd_EnableSetpointTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"disablesetpointtimer\", boost::bind(&CWebServer::Cmd_DisableSetpointTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"clearsetpointtimers\", boost::bind(&CWebServer::Cmd_ClearSetpointTimers, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"serial_devices\", boost::bind(&CWebServer::Cmd_GetSerialDevices, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"devices_list\", boost::bind(&CWebServer::Cmd_GetDevicesList, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"devices_list_onoff\", boost::bind(&CWebServer::Cmd_GetDevicesListOnOff, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"registerhue\", boost::bind(&CWebServer::Cmd_PhilipsHueRegister, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"getcustomiconset\", boost::bind(&CWebServer::Cmd_GetCustomIconSet, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletecustomicon\", boost::bind(&CWebServer::Cmd_DeleteCustomIcon, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatecustomicon\", boost::bind(&CWebServer::Cmd_UpdateCustomIcon, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"renamedevice\", boost::bind(&CWebServer::Cmd_RenameDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"setunused\", boost::bind(&CWebServer::Cmd_SetUnused, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addlogmessage\", boost::bind(&CWebServer::Cmd_AddLogMessage, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"clearshortlog\", boost::bind(&CWebServer::Cmd_ClearShortLog, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"vacuumdatabase\", boost::bind(&CWebServer::Cmd_VacuumDatabase, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addmobiledevice\", boost::bind(&CWebServer::Cmd_AddMobileDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatemobiledevice\", boost::bind(&CWebServer::Cmd_UpdateMobileDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletemobiledevice\", boost::bind(&CWebServer::Cmd_DeleteMobileDevice, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addyeelight\", boost::bind(&CWebServer::Cmd_AddYeeLight, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addArilux\", boost::bind(&CWebServer::Cmd_AddArilux, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"graph\", boost::bind(&CWebServer::RType_HandleGraph, this, _1, _2, _3));\n\t\t\tRegisterRType(\"lightlog\", boost::bind(&CWebServer::RType_LightLog, this, _1, _2, _3));\n\t\t\tRegisterRType(\"textlog\", boost::bind(&CWebServer::RType_TextLog, this, _1, _2, _3));\n\t\t\tRegisterRType(\"scenelog\", boost::bind(&CWebServer::RType_SceneLog, this, _1, _2, _3));\n\t\t\tRegisterRType(\"settings\", boost::bind(&CWebServer::RType_Settings, this, _1, _2, _3));\n\t\t\tRegisterRType(\"events\", boost::bind(&CWebServer::RType_Events, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"hardware\", boost::bind(&CWebServer::RType_Hardware, this, _1, _2, _3));\n\t\t\tRegisterRType(\"devices\", boost::bind(&CWebServer::RType_Devices, this, _1, _2, _3));\n\t\t\tRegisterRType(\"deletedevice\", boost::bind(&CWebServer::RType_DeleteDevice, this, _1, _2, _3));\n\t\t\tRegisterRType(\"cameras\", boost::bind(&CWebServer::RType_Cameras, this, _1, _2, _3));\n\t\t\tRegisterRType(\"cameras_user\", boost::bind(&CWebServer::RType_CamerasUser, this, _1, _2, _3));\n\t\t\tRegisterRType(\"users\", boost::bind(&CWebServer::RType_Users, this, _1, _2, _3));\n\t\t\tRegisterRType(\"mobiles\", boost::bind(&CWebServer::RType_Mobiles, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"timers\", boost::bind(&CWebServer::RType_Timers, this, _1, _2, _3));\n\t\t\tRegisterRType(\"scenetimers\", boost::bind(&CWebServer::RType_SceneTimers, this, _1, _2, _3));\n\t\t\tRegisterRType(\"setpointtimers\", boost::bind(&CWebServer::RType_SetpointTimers, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"gettransfers\", boost::bind(&CWebServer::RType_GetTransfers, this, _1, _2, _3));\n\t\t\tRegisterRType(\"transferdevice\", boost::bind(&CWebServer::RType_TransferDevice, this, _1, _2, _3));\n\t\t\tRegisterRType(\"notifications\", boost::bind(&CWebServer::RType_Notifications, this, _1, _2, _3));\n\t\t\tRegisterRType(\"schedules\", boost::bind(&CWebServer::RType_Schedules, this, _1, _2, _3));\n\t\t\tRegisterRType(\"getshareduserdevices\", boost::bind(&CWebServer::RType_GetSharedUserDevices, this, _1, _2, _3));\n\t\t\tRegisterRType(\"setshareduserdevices\", boost::bind(&CWebServer::RType_SetSharedUserDevices, this, _1, _2, _3));\n\t\t\tRegisterRType(\"setused\", boost::bind(&CWebServer::RType_SetUsed, this, _1, _2, _3));\n\t\t\tRegisterRType(\"scenes\", boost::bind(&CWebServer::RType_Scenes, this, _1, _2, _3));\n\t\t\tRegisterRType(\"addscene\", boost::bind(&CWebServer::RType_AddScene, this, _1, _2, _3));\n\t\t\tRegisterRType(\"deletescene\", boost::bind(&CWebServer::RType_DeleteScene, this, _1, _2, _3));\n\t\t\tRegisterRType(\"updatescene\", boost::bind(&CWebServer::RType_UpdateScene, this, _1, _2, _3));\n\t\t\tRegisterRType(\"createvirtualsensor\", boost::bind(&CWebServer::RType_CreateMappedSensor, this, _1, _2, _3));\n\t\t\tRegisterRType(\"createdevice\", boost::bind(&CWebServer::RType_CreateDevice, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"createevohomesensor\", boost::bind(&CWebServer::RType_CreateEvohomeSensor, this, _1, _2, _3));\n\t\t\tRegisterRType(\"bindevohome\", boost::bind(&CWebServer::RType_BindEvohome, this, _1, _2, _3));\n\t\t\tRegisterRType(\"createrflinkdevice\", boost::bind(&CWebServer::RType_CreateRFLinkDevice, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"custom_light_icons\", boost::bind(&CWebServer::RType_CustomLightIcons, this, _1, _2, _3));\n\t\t\tRegisterRType(\"plans\", boost::bind(&CWebServer::RType_Plans, this, _1, _2, _3));\n\t\t\tRegisterRType(\"floorplans\", boost::bind(&CWebServer::RType_FloorPlans, this, _1, _2, _3));\n#ifdef WITH_OPENZWAVE\n\t\t\t//ZWave\n\t\t\tRegisterCommandCode(\"updatezwavenode\", boost::bind(&CWebServer::Cmd_ZWaveUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletezwavenode\", boost::bind(&CWebServer::Cmd_ZWaveDeleteNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveinclude\", boost::bind(&CWebServer::Cmd_ZWaveInclude, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveexclude\", boost::bind(&CWebServer::Cmd_ZWaveExclude, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"zwaveisnodeincluded\", boost::bind(&CWebServer::Cmd_ZWaveIsNodeIncluded, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveisnodeexcluded\", boost::bind(&CWebServer::Cmd_ZWaveIsNodeExcluded, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"zwavesoftreset\", boost::bind(&CWebServer::Cmd_ZWaveSoftReset, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavehardreset\", boost::bind(&CWebServer::Cmd_ZWaveHardReset, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavenetworkheal\", boost::bind(&CWebServer::Cmd_ZWaveNetworkHeal, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavenodeheal\", boost::bind(&CWebServer::Cmd_ZWaveNodeHeal, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavenetworkinfo\", boost::bind(&CWebServer::Cmd_ZWaveNetworkInfo, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveremovegroupnode\", boost::bind(&CWebServer::Cmd_ZWaveRemoveGroupNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveaddgroupnode\", boost::bind(&CWebServer::Cmd_ZWaveAddGroupNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavegroupinfo\", boost::bind(&CWebServer::Cmd_ZWaveGroupInfo, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavecancel\", boost::bind(&CWebServer::Cmd_ZWaveCancel, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"applyzwavenodeconfig\", boost::bind(&CWebServer::Cmd_ApplyZWaveNodeConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"requestzwavenodeconfig\", boost::bind(&CWebServer::Cmd_ZWaveRequestNodeConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavestatecheck\", boost::bind(&CWebServer::Cmd_ZWaveStateCheck, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavereceiveconfigurationfromothercontroller\", boost::bind(&CWebServer::Cmd_ZWaveReceiveConfigurationFromOtherController, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavesendconfigurationtosecondcontroller\", boost::bind(&CWebServer::Cmd_ZWaveSendConfigurationToSecondaryController, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavetransferprimaryrole\", boost::bind(&CWebServer::Cmd_ZWaveTransferPrimaryRole, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavestartusercodeenrollmentmode\", boost::bind(&CWebServer::Cmd_ZWaveSetUserCodeEnrollmentMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavegetusercodes\", boost::bind(&CWebServer::Cmd_ZWaveGetNodeUserCodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveremoveusercode\", boost::bind(&CWebServer::Cmd_ZWaveRemoveUserCode, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterPageCode(\"/zwavegetconfig.php\", boost::bind(&CWebServer::ZWaveGetConfigFile, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/poll.xml\", boost::bind(&CWebServer::ZWaveCPPollXml, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/cp.html\", boost::bind(&CWebServer::ZWaveCPIndex, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/confparmpost.html\", boost::bind(&CWebServer::ZWaveCPNodeGetConf, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/refreshpost.html\", boost::bind(&CWebServer::ZWaveCPNodeGetValues, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/valuepost.html\", boost::bind(&CWebServer::ZWaveCPNodeSetValue, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/buttonpost.html\", boost::bind(&CWebServer::ZWaveCPNodeSetButton, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/admpost.html\", boost::bind(&CWebServer::ZWaveCPAdminCommand, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/nodepost.html\", boost::bind(&CWebServer::ZWaveCPNodeChange, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/savepost.html\", boost::bind(&CWebServer::ZWaveCPSaveConfig, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/thpost.html\", boost::bind(&CWebServer::ZWaveCPTestHeal, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/topopost.html\", boost::bind(&CWebServer::ZWaveCPGetTopo, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/statpost.html\", boost::bind(&CWebServer::ZWaveCPGetStats, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/grouppost.html\", boost::bind(&CWebServer::ZWaveCPSetGroup, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/scenepost.html\", boost::bind(&CWebServer::ZWaveCPSceneCommand, this, _1, _2, _3));\n\t\t\t//\n\t\t\t//pollpost.html\n\t\t\t//scenepost.html\n\t\t\t//thpost.html\n\t\t\tRegisterRType(\"openzwavenodes\", boost::bind(&CWebServer::RType_OpenZWaveNodes, this, _1, _2, _3));\n#endif\n\t\t\tRegisterCommandCode(\"tellstickApplySettings\", boost::bind(&CWebServer::Cmd_TellstickApplySettings, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterWhitelistURLString(\"/html5.appcache\");\n\t\t\tm_pWebEm->RegisterWhitelistURLString(\"/images/floorplans/plan\");\n\n\t\t\t//Start normal worker thread\n\t\t\tm_bDoStop = false;\n\t\t\tm_thread = std::make_shared<std::thread>(&CWebServer::Do_Work, this);\n\t\t\tstd::string server_name = \"WebServer_\" + settings.listening_port;\n\t\t\tSetThreadName(m_thread->native_handle(), server_name.c_str());\n\t\t\treturn (m_thread != nullptr);\n\t\t}\n\n\t\tvoid CWebServer::StopServer()\n\t\t{\n\t\t\tm_bDoStop = true;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (m_pWebEm == NULL)\n\t\t\t\t\treturn;\n\t\t\t\tm_pWebEm->Stop();\n\t\t\t\tif (m_thread) {\n\t\t\t\t\tm_thread->join();\n\t\t\t\t\tm_thread.reset();\n\t\t\t\t}\n\t\t\t\tdelete m_pWebEm;\n\t\t\t\tm_pWebEm = NULL;\n\t\t\t}\n\t\t\tcatch (...)\n\t\t\t{\n\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::SetWebCompressionMode(const _eWebCompressionMode gzmode)\n\t\t{\n\t\t\tif (m_pWebEm == NULL)\n\t\t\t\treturn;\n\t\t\tm_pWebEm->SetWebCompressionMode(gzmode);\n\t\t}\n\n\t\tvoid CWebServer::SetAuthenticationMethod(const _eAuthenticationMethod amethod)\n\t\t{\n\t\t\tif (m_pWebEm == NULL)\n\t\t\t\treturn;\n\t\t\tm_pWebEm->SetAuthenticationMethod(amethod);\n\t\t}\n\n\t\tvoid CWebServer::SetWebTheme(const std::string &themename)\n\t\t{\n\t\t\tif (m_pWebEm == NULL)\n\t\t\t\treturn;\n\t\t\tm_pWebEm->SetWebTheme(themename);\n\t\t}\n\n\t\tvoid CWebServer::SetWebRoot(const std::string &webRoot)\n\t\t{\n\t\t\tif (m_pWebEm == NULL)\n\t\t\t\treturn;\n\t\t\tm_pWebEm->SetWebRoot(webRoot);\n\t\t}\n\n\t\tvoid CWebServer::RegisterCommandCode(const char* idname, webserver_response_function ResponseFunction, bool bypassAuthentication)\n\t\t{\n\t\t\tm_webcommands.insert(std::pair<std::string, webserver_response_function >(std::string(idname), ResponseFunction));\n\t\t\tif (bypassAuthentication)\n\t\t\t{\n\t\t\t\tm_pWebEm->RegisterWhitelistURLString(idname);\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RegisterRType(const char* idname, webserver_response_function ResponseFunction)\n\t\t{\n\t\t\tm_webrtypes.insert(std::pair<std::string, webserver_response_function >(std::string(idname), ResponseFunction));\n\t\t}\n\n\t\tvoid CWebServer::HandleRType(const std::string &rtype, WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::map < std::string, webserver_response_function >::iterator pf = m_webrtypes.find(rtype);\n\t\t\tif (pf != m_webrtypes.end())\n\t\t\t{\n\t\t\t\tpf->second(session, req, root);\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::GetAppCache(WebEmSession & session, const request& req, reply & rep)\n\t\t{\n\t\t\tstd::string response = \"\";\n\t\t\tif (g_bDontCacheWWW)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//Return the appcache file (dynamically generated)\n\t\t\tstd::string sLine;\n\t\t\tstd::string filename = szWWWFolder + \"/html5.appcache\";\n\n\n\t\t\tstd::string sWebTheme = \"default\";\n\t\t\tm_sql.GetPreferencesVar(\"WebTheme\", sWebTheme);\n\n\t\t\t//Get Dynamic Theme Files\n\t\t\tstd::map<std::string, int> _ThemeFiles;\n\t\t\tGetDirFilesRecursive(szWWWFolder + \"/styles/\" + sWebTheme + \"/\", _ThemeFiles);\n\n\t\t\t//Get Dynamic Floorplan Images from database\n\t\t\tstd::map<std::string, int> _FloorplanFiles;\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM Floorplans ORDER BY [Order]\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\tstd::string ImageURL = \"images/floorplans/plan?idx=\" + sd[0];\n\t\t\t\t\t_FloorplanFiles[ImageURL] = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstd::ifstream is(filename.c_str());\n\t\t\tif (is)\n\t\t\t{\n\t\t\t\twhile (!is.eof())\n\t\t\t\t{\n\t\t\t\t\tgetline(is, sLine);\n\t\t\t\t\tif (!sLine.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (sLine.find(\"#BuildHash\") != std::string::npos)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstdreplace(sLine, \"#BuildHash\", szAppHash);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sLine.find(\"#ThemeFiles\") != std::string::npos)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresponse += \"#Theme=\" + sWebTheme + '\\n';\n\t\t\t\t\t\t\t//Add all theme files\n\t\t\t\t\t\t\tfor (const auto & itt : _ThemeFiles)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::string tfname = itt.first.substr(szWWWFolder.size() + 1);\n\t\t\t\t\t\t\t\tstdreplace(tfname, \"styles/\" + sWebTheme, \"acttheme\");\n\t\t\t\t\t\t\t\tresponse += tfname + '\\n';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sLine.find(\"#Floorplans\") != std::string::npos)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Add all floorplans\n\t\t\t\t\t\t\tfor (const auto & itt : _FloorplanFiles)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::string tfname = itt.first;\n\t\t\t\t\t\t\t\tresponse += tfname + '\\n';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sLine.find(\"#SwitchIcons\") != std::string::npos)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Add database switch icons\n\t\t\t\t\t\t\tfor (const auto & itt : m_custom_light_icons)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (itt.idx >= 100)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstd::string IconFile16 = itt.RootFile + \".png\";\n\t\t\t\t\t\t\t\t\tstd::string IconFile48On = itt.RootFile + \"48_On.png\";\n\t\t\t\t\t\t\t\t\tstd::string IconFile48Off = itt.RootFile + \"48_Off.png\";\n\n\t\t\t\t\t\t\t\t\tresponse += \"images/\" + CURLEncode::URLEncode(IconFile16) + '\\n';\n\t\t\t\t\t\t\t\t\tresponse += \"images/\" + CURLEncode::URLEncode(IconFile48On) + '\\n';\n\t\t\t\t\t\t\t\t\tresponse += \"images/\" + CURLEncode::URLEncode(IconFile48Off) + '\\n';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresponse += sLine + '\\n';\n\t\t\t\t}\n\t\t\t}\n\t\t\treply::set_content(&rep, response);\n\t\t}\n\n\t\tvoid CWebServer::GetJSonPage(WebEmSession & session, const request& req, reply & rep)\n\t\t{\n\t\t\tJson::Value root;\n\t\t\troot[\"status\"] = \"ERR\";\n\n\t\t\tstd::string rtype = request::findValue(&req, \"type\");\n\t\t\tif (rtype == \"command\")\n\t\t\t{\n\t\t\t\tstd::string cparam = request::findValue(&req, \"param\");\n\t\t\t\tif (cparam.empty())\n\t\t\t\t{\n\t\t\t\t\tcparam = request::findValue(&req, \"dparam\");\n\t\t\t\t\tif (cparam.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tgoto exitjson;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cparam == \"dologout\")\n\t\t\t\t{\n\t\t\t\t\tsession.forcelogin = true;\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Logout\";\n\t\t\t\t\tgoto exitjson;\n\n\t\t\t\t}\n\t\t\t\t_log.Debug(DEBUG_WEBSERVER, \"WEBS GetJSon :%s :%s \", cparam.c_str(), req.uri.c_str());\n\t\t\t\tHandleCommand(cparam, session, req, root);\n\t\t\t} //(rtype==\"command\")\n\t\t\telse {\n\t\t\t\tHandleRType(rtype, session, req, root);\n\t\t\t}\n\t\texitjson:\n\t\t\tstd::string jcallback = request::findValue(&req, \"jsoncallback\");\n\t\t\tif (jcallback.size() == 0) {\n\t\t\t\treply::set_content(&rep, root.toStyledString());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treply::set_content(&rep, \"var data=\" + root.toStyledString() + '\\n' + jcallback + \"(data);\");\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetLanguage(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string sValue;\n\t\t\tif (m_sql.GetPreferencesVar(\"Language\", sValue))\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetLanguage\";\n\t\t\t\troot[\"language\"] = sValue;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetThemes(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetThemes\";\n\t\t\tm_mainworker.GetAvailableWebThemes();\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : m_mainworker.m_webthemes)\n\t\t\t{\n\t\t\t\troot[\"result\"][ii][\"theme\"] = itt;\n\t\t\t\tii++;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetTitle(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string sValue;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetTitle\";\n\t\t\tif (m_sql.GetPreferencesVar(\"Title\", sValue))\n\t\t\t\troot[\"Title\"] = sValue;\n\t\t\telse\n\t\t\t\troot[\"Title\"] = \"Domoticz\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_LoginCheck(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string tmpusrname = request::findValue(&req, \"username\");\n\t\t\tstd::string tmpusrpass = request::findValue(&req, \"password\");\n\t\t\tif (\n\t\t\t\t(tmpusrname.empty()) ||\n\t\t\t\t(tmpusrpass.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tstd::string rememberme = request::findValue(&req, \"rememberme\");\n\n\t\t\tstd::string usrname;\n\t\t\tstd::string usrpass;\n\t\t\tif (request_handler::url_decode(tmpusrname, usrname))\n\t\t\t{\n\t\t\t\tif (request_handler::url_decode(tmpusrpass, usrpass))\n\t\t\t\t{\n\t\t\t\t\tusrname = base64_decode(usrname);\n\t\t\t\t\tint iUser = FindUser(usrname.c_str());\n\t\t\t\t\tif (iUser == -1) {\n\t\t\t\t\t\t// log brute force attack\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"Failed login attempt from %s for user '%s' !\", session.remote_host.c_str(), usrname.c_str());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (m_users[iUser].Password != usrpass) {\n\t\t\t\t\t\t// log brute force attack\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"Failed login attempt from %s for '%s' !\", session.remote_host.c_str(), m_users[iUser].Username.c_str());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t_log.Log(LOG_STATUS, \"Login successful from %s for user '%s'\", session.remote_host.c_str(), m_users[iUser].Username.c_str());\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"version\"] = szAppVersion;\n\t\t\t\t\troot[\"title\"] = \"logincheck\";\n\t\t\t\t\tsession.isnew = true;\n\t\t\t\t\tsession.username = m_users[iUser].Username;\n\t\t\t\t\tsession.rights = m_users[iUser].userrights;\n\t\t\t\t\tsession.rememberme = (rememberme == \"true\");\n\t\t\t\t\troot[\"user\"] = session.username;\n\t\t\t\t\troot[\"rights\"] = session.rights;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetHardwareTypes(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetHardwareTypes\";\n\t\t\tstd::map<std::string, int> _htypes;\n\t\t\tfor (int ii = 0; ii < HTYPE_END; ii++)\n\t\t\t{\n\t\t\t\tbool bDoAdd = true;\n#ifndef _DEBUG\n#ifdef WIN32\n\t\t\t\tif (\n\t\t\t\t\t(ii == HTYPE_RaspberryBMP085) ||\n\t\t\t\t\t(ii == HTYPE_RaspberryHTU21D) ||\n\t\t\t\t\t(ii == HTYPE_RaspberryTSL2561) ||\n\t\t\t\t\t(ii == HTYPE_RaspberryPCF8574) ||\n\t\t\t\t\t(ii == HTYPE_RaspberryBME280) ||\n\t\t\t\t\t(ii == HTYPE_RaspberryMCP23017)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tbDoAdd = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n#ifndef WITH_LIBUSB\n\t\t\t\t\tif (\n\t\t\t\t\t\t(ii == HTYPE_VOLCRAFTCO20) ||\n\t\t\t\t\t\t(ii == HTYPE_TE923)\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tbDoAdd = false;\n\t\t\t\t\t}\n#endif\n\n\t\t}\n#endif\n#endif\n#ifndef WITH_OPENZWAVE\n\t\t\t\tif (ii == HTYPE_OpenZWave)\n\t\t\t\t\tbDoAdd = false;\n#endif\n#ifndef WITH_GPIO\n\t\t\t\tif (ii == HTYPE_RaspberryGPIO)\n\t\t\t\t{\n\t\t\t\t\tbDoAdd = false;\n\t\t\t\t}\n\n\t\t\t\tif (ii == HTYPE_SysfsGpio)\n\t\t\t\t{\n\t\t\t\t\tbDoAdd = false;\n\t\t\t\t}\n#endif\n\t\t\t\tif (ii == HTYPE_PythonPlugin)\n\t\t\t\t\tbDoAdd = false;\n\t\t\t\tif (bDoAdd)\n\t\t\t\t\t_htypes[Hardware_Type_Desc(ii)] = ii;\n\t}\n\t\t\t//return a sorted hardware list\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : _htypes)\n\t\t\t{\n\t\t\t\troot[\"result\"][ii][\"idx\"] = itt.second;\n\t\t\t\troot[\"result\"][ii][\"name\"] = itt.first;\n\t\t\t\tii++;\n\t\t\t}\n\n#ifdef ENABLE_PYTHON\n\t\t\t// Append Plugin list as well\n\t\t\tPluginList(root[\"result\"]);\n#endif\n}\n\n\t\tvoid CWebServer::Cmd_AddHardware(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string name = CURLEncode::URLDecode(request::findValue(&req, \"name\"));\n\t\t\tstd::string senabled = request::findValue(&req, \"enabled\");\n\t\t\tstd::string shtype = request::findValue(&req, \"htype\");\n\t\t\tstd::string address = request::findValue(&req, \"address\");\n\t\t\tstd::string sport = request::findValue(&req, \"port\");\n\t\t\tstd::string username = CURLEncode::URLDecode(request::findValue(&req, \"username\"));\n\t\t\tstd::string password = CURLEncode::URLDecode(request::findValue(&req, \"password\"));\n\t\t\tstd::string extra = CURLEncode::URLDecode(request::findValue(&req, \"extra\"));\n\t\t\tstd::string sdatatimeout = request::findValue(&req, \"datatimeout\");\n\t\t\tif (\n\t\t\t\t(name.empty()) ||\n\t\t\t\t(senabled.empty()) ||\n\t\t\t\t(shtype.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\t_eHardwareTypes htype = (_eHardwareTypes)atoi(shtype.c_str());\n\n\t\t\tint iDataTimeout = atoi(sdatatimeout.c_str());\n\t\t\tint mode1 = 0;\n\t\t\tint mode2 = 0;\n\t\t\tint mode3 = 0;\n\t\t\tint mode4 = 0;\n\t\t\tint mode5 = 0;\n\t\t\tint mode6 = 0;\n\t\t\tint port = atoi(sport.c_str());\n\t\t\tstd::string mode1Str = request::findValue(&req, \"Mode1\");\n\t\t\tif (!mode1Str.empty()) {\n\t\t\t\tmode1 = atoi(mode1Str.c_str());\n\t\t\t}\n\t\t\tstd::string mode2Str = request::findValue(&req, \"Mode2\");\n\t\t\tif (!mode2Str.empty()) {\n\t\t\t\tmode2 = atoi(mode2Str.c_str());\n\t\t\t}\n\t\t\tstd::string mode3Str = request::findValue(&req, \"Mode3\");\n\t\t\tif (!mode3Str.empty()) {\n\t\t\t\tmode3 = atoi(mode3Str.c_str());\n\t\t\t}\n\t\t\tstd::string mode4Str = request::findValue(&req, \"Mode4\");\n\t\t\tif (!mode4Str.empty()) {\n\t\t\t\tmode4 = atoi(mode4Str.c_str());\n\t\t\t}\n\t\t\tstd::string mode5Str = request::findValue(&req, \"Mode5\");\n\t\t\tif (!mode5Str.empty()) {\n\t\t\t\tmode5 = atoi(mode5Str.c_str());\n\t\t\t}\n\t\t\tstd::string mode6Str = request::findValue(&req, \"Mode6\");\n\t\t\tif (!mode6Str.empty()) {\n\t\t\t\tmode6 = atoi(mode6Str.c_str());\n\t\t\t}\n\n\t\t\tif (IsSerialDevice(htype))\n\t\t\t{\n\t\t\t\t//USB/System\n\t\t\t\tif (sport.empty())\n\t\t\t\t\treturn; //need to have a serial port\n\n\t\t\t\tif (htype == HTYPE_TeleinfoMeter) {\n\t\t\t\t\t// Teleinfo always has decimals. Chances to have a P1 and a Teleinfo device on the same\n\t\t\t\t\t// Domoticz instance are very low as both are national standards (NL and FR)\n\t\t\t\t\tm_sql.UpdatePreferencesVar(\"SmartMeterType\", 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (IsNetworkDevice(htype))\n\t\t\t{\n\t\t\t\t//Lan\n\t\t\t\tif (address.empty() || port == 0)\n\t\t\t\t\treturn;\n\n\t\t\t\tif (htype == HTYPE_MySensorsMQTT || htype == HTYPE_MQTT) {\n\t\t\t\t\tstd::string modeqStr = request::findValue(&req, \"mode1\");\n\t\t\t\t\tif (!modeqStr.empty()) {\n\t\t\t\t\t\tmode1 = atoi(modeqStr.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (htype == HTYPE_ECODEVICES) {\n\t\t\t\t\t// EcoDevices always have decimals. Chances to have a P1 and a EcoDevice/Teleinfo device on the same\n\t\t\t\t\t// Domoticz instance are very low as both are national standards (NL and FR)\n\t\t\t\t\tm_sql.UpdatePreferencesVar(\"SmartMeterType\", 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (htype == HTYPE_DomoticzInternal) {\n\t\t\t\t// DomoticzInternal cannot be added manually\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Domoticz) {\n\t\t\t\t//Remote Domoticz\n\t\t\t\tif (address.empty() || port == 0)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_TE923) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_VOLCRAFTCO20) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_System) {\n\t\t\t\t//There should be only one\n\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM Hardware WHERE (Type==%d)\", HTYPE_System);\n\t\t\t\tif (!result.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_1WIRE) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Rtl433) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Pinger) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Kodi) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PanasonicTV) {\n\t\t\t\t// all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_LogitechMediaServer) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryBMP085) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryHTU21D) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryTSL2561) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryBME280) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryMCP23017) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Dummy) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Tellstick) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_EVOHOME_SCRIPT || htype == HTYPE_EVOHOME_SERIAL || htype == HTYPE_EVOHOME_WEB || htype == HTYPE_EVOHOME_TCP) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PiFace) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HTTPPOLLER) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_BleBox) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HEOS) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Yeelight) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_XiaomiGateway) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Arilux) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_USBtinGateway) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (\n\t\t\t\t(htype == HTYPE_Wunderground) ||\n\t\t\t\t(htype == HTYPE_DarkSky) ||\n\t\t\t\t(htype == HTYPE_AccuWeather) ||\n\t\t\t\t(htype == HTYPE_OpenWeatherMap) ||\n\t\t\t\t(htype == HTYPE_ICYTHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_TOONTHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_AtagOne) ||\n\t\t\t\t(htype == HTYPE_PVOUTPUT_INPUT) ||\n\t\t\t\t(htype == HTYPE_NEST) ||\n\t\t\t\t(htype == HTYPE_ANNATHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_THERMOSMART) ||\n\t\t\t\t(htype == HTYPE_Tado) ||\n\t\t\t\t(htype == HTYPE_Netatmo)\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tif (\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(password.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SolarEdgeAPI)\n\t\t\t{\n\t\t\t\tif (\n\t\t\t\t\t(username.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Nest_OAuthAPI) {\n\t\t\t\tif (\n\t\t\t\t\t(username == \"\") &&\n\t\t\t\t\t(extra == \"||\")\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SBFSpot) {\n\t\t\t\tif (username.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HARMONY_HUB) {\n\t\t\t\tif (\n\t\t\t\t\t(address.empty() || port == 0)\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Philips_Hue) {\n\t\t\t\tif (\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(address.empty() || port == 0)\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tif (port == 0)\n\t\t\t\t\tport = 80;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_WINDDELEN) {\n\t\t\t\tstd::string mill_id = request::findValue(&req, \"Mode1\");\n\t\t\t\tif (\n\t\t\t\t\t(mill_id.empty()) ||\n\t\t\t\t\t(sport.empty())\n\t\t\t\t\t)\n\n\t\t\t\t\treturn;\n\t\t\t\tmode1 = atoi(mill_id.c_str());\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Honeywell) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryGPIO) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SysfsGpio) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_OpenWebNetTCP) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Daikin) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_GoodweAPI) {\n\t\t\t\tif (username.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PythonPlugin) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryPCF8574) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_OpenWebNetUSB) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_IntergasInComfortLAN2RF) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_EnphaseAPI) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_EcoCompteur) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddHardware\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\tif (htype == HTYPE_Domoticz)\n\t\t\t{\n\t\t\t\tif (password.size() != 32)\n\t\t\t\t{\n\t\t\t\t\tpassword = GenerateMD5Hash(password);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ((htype == HTYPE_S0SmartMeterUSB) || (htype == HTYPE_S0SmartMeterTCP))\n\t\t\t{\n\t\t\t\textra = \"0;1000;0;1000;0;1000;0;1000;0;1000\";\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Pinger)\n\t\t\t{\n\t\t\t\tmode1 = 30;\n\t\t\t\tmode2 = 1000;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Kodi)\n\t\t\t{\n\t\t\t\tmode1 = 30;\n\t\t\t\tmode2 = 1000;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PanasonicTV)\n\t\t\t{\n\t\t\t\tmode1 = 30;\n\t\t\t\tmode2 = 1000;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_LogitechMediaServer)\n\t\t\t{\n\t\t\t\tmode1 = 30;\n\t\t\t\tmode2 = 1000;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HEOS)\n\t\t\t{\n\t\t\t\tmode1 = 30;\n\t\t\t\tmode2 = 1000;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Tellstick)\n\t\t\t{\n\t\t\t\tmode1 = 4;\n\t\t\t\tmode2 = 500;\n\t\t\t}\n\n\t\t\tif (htype == HTYPE_HTTPPOLLER) {\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO Hardware (Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout) VALUES ('%q',%d, %d,'%q',%d,'%q','%q','%q','%q','%q','%q', '%q', '%q', '%q', '%q', %d)\",\n\t\t\t\t\tname.c_str(),\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\thtype,\n\t\t\t\t\taddress.c_str(),\n\t\t\t\t\tport,\n\t\t\t\t\tsport.c_str(),\n\t\t\t\t\tusername.c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\textra.c_str(),\n\t\t\t\t\tmode1Str.c_str(), mode2Str.c_str(), mode3Str.c_str(), mode4Str.c_str(), mode5Str.c_str(), mode6Str.c_str(),\n\t\t\t\t\tiDataTimeout\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PythonPlugin) {\n\t\t\t\tsport = request::findValue(&req, \"serialport\");\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO Hardware (Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout) VALUES ('%q',%d, %d,'%q',%d,'%q','%q','%q','%q','%q','%q', '%q', '%q', '%q', '%q', %d)\",\n\t\t\t\t\tname.c_str(),\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\thtype,\n\t\t\t\t\taddress.c_str(),\n\t\t\t\t\tport,\n\t\t\t\t\tsport.c_str(),\n\t\t\t\t\tusername.c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\textra.c_str(),\n\t\t\t\t\tmode1Str.c_str(), mode2Str.c_str(), mode3Str.c_str(), mode4Str.c_str(), mode5Str.c_str(), mode6Str.c_str(),\n\t\t\t\t\tiDataTimeout\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if (\n\t\t\t\t(htype == HTYPE_RFXtrx433)||\n\t\t\t\t(htype == HTYPE_RFXtrx868)\n\t\t\t\t)\n\t\t\t{\n\t\t\t\t//No Extra field here, handled in CWebServer::SetRFXCOMMode\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO Hardware (Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout) VALUES ('%q',%d, %d,'%q',%d,'%q','%q','%q',%d,%d,%d,%d,%d,%d,%d)\",\n\t\t\t\t\tname.c_str(),\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\thtype,\n\t\t\t\t\taddress.c_str(),\n\t\t\t\t\tport,\n\t\t\t\t\tsport.c_str(),\n\t\t\t\t\tusername.c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\tmode1, mode2, mode3, mode4, mode5, mode6,\n\t\t\t\t\tiDataTimeout\n\t\t\t\t);\n\t\t\t\textra = \"0\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO Hardware (Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout) VALUES ('%q',%d, %d,'%q',%d,'%q','%q','%q','%q',%d,%d,%d,%d,%d,%d,%d)\",\n\t\t\t\t\tname.c_str(),\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\thtype,\n\t\t\t\t\taddress.c_str(),\n\t\t\t\t\tport,\n\t\t\t\t\tsport.c_str(),\n\t\t\t\t\tusername.c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\textra.c_str(),\n\t\t\t\t\tmode1, mode2, mode3, mode4, mode5, mode6,\n\t\t\t\t\tiDataTimeout\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t//add the device for real in our system\n\t\t\tresult = m_sql.safe_query(\"SELECT MAX(ID) FROM Hardware\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\tint ID = atoi(sd[0].c_str());\n\n\t\t\t\troot[\"idx\"] = sd[0].c_str(); // OTO output the created ID for easier management on the caller side (if automated)\n\n\t\t\t\tm_mainworker.AddHardwareFromParams(ID, name, (senabled == \"true\") ? true : false, htype, address, port, sport, username, password, extra, mode1, mode2, mode3, mode4, mode5, mode6, iDataTimeout, true);\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateHardware(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tstd::string name = CURLEncode::URLDecode(request::findValue(&req, \"name\"));\n\t\t\tstd::string senabled = request::findValue(&req, \"enabled\");\n\t\t\tstd::string shtype = request::findValue(&req, \"htype\");\n\t\t\tstd::string address = request::findValue(&req, \"address\");\n\t\t\tstd::string sport = request::findValue(&req, \"port\");\n\t\t\tstd::string username = CURLEncode::URLDecode(request::findValue(&req, \"username\"));\n\t\t\tstd::string password = CURLEncode::URLDecode(request::findValue(&req, \"password\"));\n\t\t\tstd::string extra = CURLEncode::URLDecode(request::findValue(&req, \"extra\"));\n\t\t\tstd::string sdatatimeout = request::findValue(&req, \"datatimeout\");\n\n\t\t\tif (\n\t\t\t\t(name.empty()) ||\n\t\t\t\t(senabled.empty()) ||\n\t\t\t\t(shtype.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tint mode1 = atoi(request::findValue(&req, \"Mode1\").c_str());\n\t\t\tint mode2 = atoi(request::findValue(&req, \"Mode2\").c_str());\n\t\t\tint mode3 = atoi(request::findValue(&req, \"Mode3\").c_str());\n\t\t\tint mode4 = atoi(request::findValue(&req, \"Mode4\").c_str());\n\t\t\tint mode5 = atoi(request::findValue(&req, \"Mode5\").c_str());\n\t\t\tint mode6 = atoi(request::findValue(&req, \"Mode6\").c_str());\n\n\t\t\tbool bEnabled = (senabled == \"true\") ? true : false;\n\n\t\t\t_eHardwareTypes htype = (_eHardwareTypes)atoi(shtype.c_str());\n\t\t\tint iDataTimeout = atoi(sdatatimeout.c_str());\n\n\t\t\tint port = atoi(sport.c_str());\n\n\t\t\tbool bIsSerial = false;\n\n\t\t\tif (IsSerialDevice(htype))\n\t\t\t{\n\t\t\t\t//USB/System\n\t\t\t\tbIsSerial = true;\n\t\t\t\tif (bEnabled)\n\t\t\t\t{\n\t\t\t\t\tif (sport.empty())\n\t\t\t\t\t\treturn; //need to have a serial port\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (\n\t\t\t\t(htype == HTYPE_RFXLAN) || (htype == HTYPE_P1SmartMeterLAN) ||\n\t\t\t\t(htype == HTYPE_YouLess) || (htype == HTYPE_OpenThermGatewayTCP) || (htype == HTYPE_LimitlessLights) ||\n\t\t\t\t(htype == HTYPE_SolarEdgeTCP) || (htype == HTYPE_WOL) || (htype == HTYPE_S0SmartMeterTCP) || (htype == HTYPE_ECODEVICES) || (htype == HTYPE_Mochad) ||\n\t\t\t\t(htype == HTYPE_MySensorsTCP) || (htype == HTYPE_MySensorsMQTT) || (htype == HTYPE_MQTT) || (htype == HTYPE_TTN_MQTT) || (htype == HTYPE_FRITZBOX) || (htype == HTYPE_ETH8020) || (htype == HTYPE_Sterbox) ||\n\t\t\t\t(htype == HTYPE_KMTronicTCP) || (htype == HTYPE_KMTronicUDP) || (htype == HTYPE_SOLARMAXTCP) || (htype == HTYPE_RelayNet) || (htype == HTYPE_SatelIntegra) || (htype == HTYPE_eHouseTCP) || (htype == HTYPE_RFLINKTCP) ||\n\t\t\t\t(htype == HTYPE_Comm5TCP || (htype == HTYPE_Comm5SMTCP) || (htype == HTYPE_CurrentCostMeterLAN)) ||\n\t\t\t\t(htype == HTYPE_NefitEastLAN) || (htype == HTYPE_DenkoviHTTPDevices) || (htype == HTYPE_DenkoviTCPDevices) || (htype == HTYPE_Ec3kMeterTCP) || (htype == HTYPE_MultiFun) || (htype == HTYPE_ZIBLUETCP) || (htype == HTYPE_OnkyoAVTCP)\n\t\t\t\t) {\n\t\t\t\t//Lan\n\t\t\t\tif (address.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_DomoticzInternal) {\n\t\t\t\t// DomoticzInternal cannot be updated\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Domoticz) {\n\t\t\t\t//Remote Domoticz\n\t\t\t\tif (address.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_System) {\n\t\t\t\t//There should be only one, and with this ID\n\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM Hardware WHERE (Type==%d)\", HTYPE_System);\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint hID = atoi(result[0][0].c_str());\n\t\t\t\t\tint aID = atoi(idx.c_str());\n\t\t\t\t\tif (hID != aID)\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (htype == HTYPE_TE923) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_VOLCRAFTCO20) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_1WIRE) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Pinger) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Kodi) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PanasonicTV) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_LogitechMediaServer) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryBMP085) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryHTU21D) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryTSL2561) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryBME280) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryMCP23017) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Dummy) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_EVOHOME_SCRIPT || htype == HTYPE_EVOHOME_SERIAL || htype == HTYPE_EVOHOME_WEB || htype == HTYPE_EVOHOME_TCP) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PiFace) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HTTPPOLLER) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_BleBox) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HEOS) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Yeelight) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_XiaomiGateway) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Arilux) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_USBtinGateway) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (\n\t\t\t\t(htype == HTYPE_Wunderground) ||\n\t\t\t\t(htype == HTYPE_DarkSky) ||\n\t\t\t\t(htype == HTYPE_AccuWeather) ||\n\t\t\t\t(htype == HTYPE_OpenWeatherMap) ||\n\t\t\t\t(htype == HTYPE_ICYTHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_TOONTHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_AtagOne) ||\n\t\t\t\t(htype == HTYPE_PVOUTPUT_INPUT) ||\n\t\t\t\t(htype == HTYPE_NEST) ||\n\t\t\t\t(htype == HTYPE_ANNATHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_THERMOSMART) ||\n\t\t\t\t(htype == HTYPE_Tado) ||\n\t\t\t\t(htype == HTYPE_Netatmo)\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tif (\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(password.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SolarEdgeAPI)\n\t\t\t{\n\t\t\t\tif (\n\t\t\t\t\t(username.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Nest_OAuthAPI) {\n\t\t\t\tif (\n\t\t\t\t\t(username == \"\") &&\n\t\t\t\t\t(extra == \"||\")\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HARMONY_HUB) {\n\t\t\t\tif (\n\t\t\t\t\t(address.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Philips_Hue) {\n\t\t\t\tif (\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(address.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tif (port == 0)\n\t\t\t\t\tport = 80;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryGPIO) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SysfsGpio) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Rtl433) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Daikin) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SBFSpot) {\n\t\t\t\tif (username.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_WINDDELEN) {\n\t\t\t\tstd::string mill_id = request::findValue(&req, \"Mode1\");\n\t\t\t\tif (\n\t\t\t\t\t(mill_id.empty()) ||\n\t\t\t\t\t(sport.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Honeywell) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_OpenWebNetTCP) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PythonPlugin) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_GoodweAPI) {\n\t\t\t\tif (username.empty()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryPCF8574) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_OpenWebNetUSB) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_IntergasInComfortLAN2RF) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_EnphaseAPI) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn;\n\n\t\t\tstd::string mode1Str;\n\t\t\tstd::string mode2Str;\n\t\t\tstd::string mode3Str;\n\t\t\tstd::string mode4Str;\n\t\t\tstd::string mode5Str;\n\t\t\tstd::string mode6Str;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"UpdateHardware\";\n\n\t\t\tif (htype == HTYPE_Domoticz)\n\t\t\t{\n\t\t\t\tif (password.size() != 32)\n\t\t\t\t{\n\t\t\t\t\tpassword = GenerateMD5Hash(password);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((bIsSerial) && (!bEnabled) && (sport.empty()))\n\t\t\t{\n\t\t\t\t//just disable the device\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Hardware SET Enabled=%d WHERE (ID == '%q')\",\n\t\t\t\t\t(bEnabled == true) ? 1 : 0,\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (htype == HTYPE_HTTPPOLLER) {\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Hardware SET Name='%q', Enabled=%d, Type=%d, Address='%q', Port=%d, SerialPort='%q', Username='%q', Password='%q', Extra='%q', DataTimeout=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tname.c_str(),\n\t\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\t\thtype,\n\t\t\t\t\t\taddress.c_str(),\n\t\t\t\t\t\tport,\n\t\t\t\t\t\tsport.c_str(),\n\t\t\t\t\t\tusername.c_str(),\n\t\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\t\textra.c_str(),\n\t\t\t\t\t\tiDataTimeout,\n\t\t\t\t\t\tidx.c_str()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse if (htype == HTYPE_PythonPlugin) {\n\t\t\t\t\tmode1Str = request::findValue(&req, \"Mode1\");\n\t\t\t\t\tmode2Str = request::findValue(&req, \"Mode2\");\n\t\t\t\t\tmode3Str = request::findValue(&req, \"Mode3\");\n\t\t\t\t\tmode4Str = request::findValue(&req, \"Mode4\");\n\t\t\t\t\tmode5Str = request::findValue(&req, \"Mode5\");\n\t\t\t\t\tmode6Str = request::findValue(&req, \"Mode6\");\n\t\t\t\t\tsport = request::findValue(&req, \"serialport\");\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Hardware SET Name='%q', Enabled=%d, Type=%d, Address='%q', Port=%d, SerialPort='%q', Username='%q', Password='%q', Extra='%q', Mode1='%q', Mode2='%q', Mode3='%q', Mode4='%q', Mode5='%q', Mode6='%q', DataTimeout=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tname.c_str(),\n\t\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\t\thtype,\n\t\t\t\t\t\taddress.c_str(),\n\t\t\t\t\t\tport,\n\t\t\t\t\t\tsport.c_str(),\n\t\t\t\t\t\tusername.c_str(),\n\t\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\t\textra.c_str(),\n\t\t\t\t\t\tmode1Str.c_str(), mode2Str.c_str(), mode3Str.c_str(), mode4Str.c_str(), mode5Str.c_str(), mode6Str.c_str(),\n\t\t\t\t\t\tiDataTimeout,\n\t\t\t\t\t\tidx.c_str()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse if (\n\t\t\t\t\t(htype == HTYPE_RFXtrx433) ||\n\t\t\t\t\t(htype == HTYPE_RFXtrx868)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t//No Extra field here, handled in CWebServer::SetRFXCOMMode\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Hardware SET Name='%q', Enabled=%d, Type=%d, Address='%q', Port=%d, SerialPort='%q', Username='%q', Password='%q', Mode1=%d, Mode2=%d, Mode3=%d, Mode4=%d, Mode5=%d, Mode6=%d, DataTimeout=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tname.c_str(),\n\t\t\t\t\t\t(bEnabled == true) ? 1 : 0,\n\t\t\t\t\t\thtype,\n\t\t\t\t\t\taddress.c_str(),\n\t\t\t\t\t\tport,\n\t\t\t\t\t\tsport.c_str(),\n\t\t\t\t\t\tusername.c_str(),\n\t\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\t\tmode1, mode2, mode3, mode4, mode5, mode6,\n\t\t\t\t\t\tiDataTimeout,\n\t\t\t\t\t\tidx.c_str()\n\t\t\t\t\t);\n\t\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Extra FROM Hardware WHERE ID=%q\", idx.c_str());\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\textra = result[0][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Hardware SET Name='%q', Enabled=%d, Type=%d, Address='%q', Port=%d, SerialPort='%q', Username='%q', Password='%q', Extra='%q', Mode1=%d, Mode2=%d, Mode3=%d, Mode4=%d, Mode5=%d, Mode6=%d, DataTimeout=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tname.c_str(),\n\t\t\t\t\t\t(bEnabled == true) ? 1 : 0,\n\t\t\t\t\t\thtype,\n\t\t\t\t\t\taddress.c_str(),\n\t\t\t\t\t\tport,\n\t\t\t\t\t\tsport.c_str(),\n\t\t\t\t\t\tusername.c_str(),\n\t\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\t\textra.c_str(),\n\t\t\t\t\t\tmode1, mode2, mode3, mode4, mode5, mode6,\n\t\t\t\t\t\tiDataTimeout,\n\t\t\t\t\t\tidx.c_str()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//re-add the device in our system\n\t\t\tint ID = atoi(idx.c_str());\n\t\t\tm_mainworker.AddHardwareFromParams(ID, name, bEnabled, htype, address, port, sport, username, password, extra, mode1, mode2, mode3, mode4, mode5, mode6, iDataTimeout, true);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetDeviceValueOptions(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tstd::vector<std::string> result;\n\t\t\tresult = CBasePush::DropdownOptions(atoi(idx.c_str()));\n\t\t\tif ((result.size() == 1) && result[0] == \"Status\") {\n\t\t\t\troot[\"result\"][0][\"Value\"] = 0;\n\t\t\t\troot[\"result\"][0][\"Wording\"] = result[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::string ddOption = itt;\n\t\t\t\t\troot[\"result\"][ii][\"Value\"] = ii + 1;\n\t\t\t\t\troot[\"result\"][ii][\"Wording\"] = ddOption.c_str();\n\t\t\t\t\tii++;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetDeviceValueOptions\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetDeviceValueOptionWording(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string pos = request::findValue(&req, \"pos\");\n\t\t\tif ((idx.empty()) || (pos.empty()))\n\t\t\t\treturn;\n\t\t\tstd::string wording;\n\t\t\twording = CBasePush::DropdownOptionsValue(atoi(idx.c_str()), atoi(pos.c_str()));\n\t\t\troot[\"wording\"] = wording;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetDeviceValueOptions\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_AddUserVariable(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string variablename = request::findValue(&req, \"vname\");\n\t\t\tstd::string variablevalue = request::findValue(&req, \"vvalue\");\n\t\t\tstd::string variabletype = request::findValue(&req, \"vtype\");\n\t\t\tif (\n\t\t\t\t(variablename.empty()) ||\n\t\t\t\t(variabletype.empty()) ||\n\t\t\t\t((variablevalue.empty()) && (variabletype != \"2\"))\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\troot[\"title\"] = \"AddUserVariable\";\n\n\t\t\tstd::string errorMessage;\n\t\t\tif (!m_sql.AddUserVariable(variablename, (const _eUsrVariableType)atoi(variabletype.c_str()), variablevalue, errorMessage))\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = errorMessage;\n\t\t\t}\n\t\t\telse {\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeleteUserVariable(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\n\t\t\tm_sql.DeleteUserVariable(idx);\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteUserVariable\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateUserVariable(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string variablename = request::findValue(&req, \"vname\");\n\t\t\tstd::string variablevalue = request::findValue(&req, \"vvalue\");\n\t\t\tstd::string variabletype = request::findValue(&req, \"vtype\");\n\n\t\t\tif (\n\t\t\t\t(variablename.empty()) ||\n\t\t\t\t(variabletype.empty()) ||\n\t\t\t\t((variablevalue.empty()) && (variabletype != \"2\"))\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tif (idx.empty())\n\t\t\t{\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM UserVariables WHERE Name='%q'\", variablename.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\tidx = result[0][0];\n\t\t\t}\n\n\t\t\tresult = m_sql.safe_query(\"SELECT Name, ValueType FROM UserVariables WHERE ID='%q'\", idx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\tbool bTypeNameChanged = false;\n\t\t\tif (variablename != result[0][0])\n\t\t\t\tbTypeNameChanged = true; //new name\n\t\t\telse if (variabletype != result[0][1])\n\t\t\t\tbTypeNameChanged = true; //new type\n\n\t\t\troot[\"title\"] = \"UpdateUserVariable\";\n\n\t\t\tstd::string errorMessage;\n\t\t\tif (!m_sql.UpdateUserVariable(idx, variablename, (const _eUsrVariableType)atoi(variabletype.c_str()), variablevalue, !bTypeNameChanged, errorMessage))\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = errorMessage;\n\t\t\t}\n\t\t\telse {\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\tif (bTypeNameChanged)\n\t\t\t\t{\n\t\t\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t\t\t\tm_mainworker.m_eventsystem.GetCurrentUserVariables();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tvoid CWebServer::Cmd_GetUserVariables(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, ValueType, Value, LastUpdate FROM UserVariables\");\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : result)\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\troot[\"result\"][ii][\"Type\"] = sd[2];\n\t\t\t\troot[\"result\"][ii][\"Value\"] = sd[3];\n\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sd[4];\n\t\t\t\tii++;\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetUserVariables\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetUserVariable(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\n\t\t\tint iVarID = atoi(idx.c_str());\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, ValueType, Value, LastUpdate FROM UserVariables WHERE (ID==%d)\", iVarID);\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : result)\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\troot[\"result\"][ii][\"Type\"] = sd[2];\n\t\t\t\troot[\"result\"][ii][\"Value\"] = sd[3];\n\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sd[4];\n\t\t\t\tii++;\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetUserVariable\";\n\t\t}\n\n\n\t\tvoid CWebServer::Cmd_AllowNewHardware(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string sTimeout = request::findValue(&req, \"timeout\");\n\t\t\tif (sTimeout.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AllowNewHardware\";\n\n\t\t\tm_sql.AllowNewHardwareTimer(atoi(sTimeout.c_str()));\n\t\t}\n\n\n\t\tvoid CWebServer::Cmd_DeleteHardware(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tint hwID = atoi(idx.c_str());\n\n\t\t\tCDomoticzHardwareBase *pBaseHardware = m_mainworker.GetHardware(hwID);\n\t\t\tif ((pBaseHardware != NULL) && (pBaseHardware->HwdType == HTYPE_DomoticzInternal)) {\n\t\t\t\t// DomoticzInternal cannot be removed\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteHardware\";\n\n\t\t\tm_mainworker.RemoveDomoticzHardware(hwID);\n\t\t\tm_sql.DeleteHardware(idx);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetLog\";\n\n\t\t\ttime_t lastlogtime = 0;\n\t\t\tstd::string slastlogtime = request::findValue(&req, \"lastlogtime\");\n\t\t\tif (slastlogtime != \"\")\n\t\t\t{\n\t\t\t\tstd::stringstream s_str(slastlogtime);\n\t\t\t\ts_str >> lastlogtime;\n\t\t\t}\n\n\t\t\t_eLogLevel lLevel = LOG_NORM;\n\t\t\tstd::string sloglevel = request::findValue(&req, \"loglevel\");\n\t\t\tif (!sloglevel.empty())\n\t\t\t{\n\t\t\t\tlLevel = (_eLogLevel)atoi(sloglevel.c_str());\n\t\t\t}\n\n\t\t\tstd::list<CLogger::_tLogLineStruct> logmessages = _log.GetLog(lLevel);\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : logmessages)\n\t\t\t{\n\t\t\t\tif (itt.logtime > lastlogtime)\n\t\t\t\t{\n\t\t\t\t\tstd::stringstream szLogTime;\n\t\t\t\t\tszLogTime << itt.logtime;\n\t\t\t\t\troot[\"LastLogTime\"] = szLogTime.str();\n\t\t\t\t\troot[\"result\"][ii][\"level\"] = static_cast<int>(itt.level);\n\t\t\t\t\troot[\"result\"][ii][\"message\"] = itt.logmessage;\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ClearLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"ClearLog\";\n\t\t\t_log.ClearLog();\n\t\t}\n\n\t\t//Plan Functions\n\t\tvoid CWebServer::Cmd_AddPlan(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddPlan\";\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"INSERT INTO Plans (Name) VALUES ('%q')\",\n\t\t\t\tname.c_str()\n\t\t\t);\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT MAX(ID) FROM Plans\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\tint ID = atoi(sd[0].c_str());\n\n\t\t\t\troot[\"idx\"] = sd[0].c_str(); // OTO output the created ID for easier management on the caller side (if automated)\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdatePlan(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\tif (\n\t\t\t\t(name.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"UpdatePlan\";\n\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"UPDATE Plans SET Name='%q' WHERE (ID == '%q')\",\n\t\t\t\tname.c_str(),\n\t\t\t\tidx.c_str()\n\t\t\t);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeletePlan(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeletePlan\";\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"DELETE FROM DeviceToPlansMap WHERE (PlanID == '%q')\",\n\t\t\t\tidx.c_str()\n\t\t\t);\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"DELETE FROM Plans WHERE (ID == '%q')\",\n\t\t\t\tidx.c_str()\n\t\t\t);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetUnusedPlanDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetUnusedPlanDevices\";\n\t\t\tstd::string sunique = request::findValue(&req, \"unique\");\n\t\t\tif (sunique.empty())\n\t\t\t\treturn;\n\t\t\tint iUnique = (sunique == \"true\") ? 1 : 0;\n\t\t\tint ii = 0;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\tresult = m_sql.safe_query(\"SELECT T1.[ID], T1.[Name], T1.[Type], T1.[SubType], T2.[Name] AS HardwareName FROM DeviceStatus as T1, Hardware as T2 WHERE (T1.[Used]==1) AND (T2.[ID]==T1.[HardwareID]) ORDER BY T2.[Name], T1.[Name]\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tbool bDoAdd = true;\n\t\t\t\t\tif (iUnique)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT ID FROM DeviceToPlansMap WHERE (DeviceRowID=='%q') AND (DevSceneType==0)\",\n\t\t\t\t\t\t\tsd[0].c_str());\n\t\t\t\t\t\tbDoAdd = (result2.size() == 0);\n\t\t\t\t\t}\n\t\t\t\t\tif (bDoAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tint _dtype = atoi(sd[2].c_str());\n\t\t\t\t\t\tstd::string Name = \"[\" + sd[4] + \"] \" + sd[1] + \" (\" + RFX_Type_Desc(_dtype, 1) + \"/\" + RFX_Type_SubType_Desc(_dtype, atoi(sd[3].c_str())) + \")\";\n\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 0;\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Add Scenes\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name FROM Scenes ORDER BY Name\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tbool bDoAdd = true;\n\t\t\t\t\tif (iUnique)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT ID FROM DeviceToPlansMap WHERE (DeviceRowID=='%q') AND (DevSceneType==1)\",\n\t\t\t\t\t\t\tsd[0].c_str());\n\t\t\t\t\t\tbDoAdd = (result2.size() == 0);\n\t\t\t\t\t}\n\t\t\t\t\tif (bDoAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 1;\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\tstd::string sname = \"[Scene] \" + sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sname;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_AddPlanActiveDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string sactivetype = request::findValue(&req, \"activetype\");\n\t\t\tstd::string activeidx = request::findValue(&req, \"activeidx\");\n\t\t\tif (\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(sactivetype.empty()) ||\n\t\t\t\t(activeidx.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddPlanActiveDevice\";\n\n\t\t\tint activetype = atoi(sactivetype.c_str());\n\n\t\t\t//check if it is not already there\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM DeviceToPlansMap WHERE (DeviceRowID=='%q') AND (DevSceneType==%d) AND (PlanID=='%q')\",\n\t\t\t\tactiveidx.c_str(), activetype, idx.c_str());\n\t\t\tif (result.empty())\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO DeviceToPlansMap (DevSceneType,DeviceRowID, PlanID) VALUES (%d,'%q','%q')\",\n\t\t\t\t\tactivetype,\n\t\t\t\t\tactiveidx.c_str(),\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetPlanDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetPlanDevices\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, DevSceneType, DeviceRowID, [Order] FROM DeviceToPlansMap WHERE (PlanID=='%q') ORDER BY [Order]\",\n\t\t\t\tidx.c_str());\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tstd::string ID = sd[0];\n\t\t\t\t\tint DevSceneType = atoi(sd[1].c_str());\n\t\t\t\t\tstd::string DevSceneRowID = sd[2];\n\n\t\t\t\t\tstd::string Name = \"\";\n\t\t\t\t\tif (DevSceneType == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT Name FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\t\t\t\tDevSceneRowID.c_str());\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName = result2[0][0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT Name FROM Scenes WHERE (ID=='%q')\",\n\t\t\t\t\t\t\tDevSceneRowID.c_str());\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName = \"[Scene] \" + result2[0][0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Name != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\troot[\"result\"][ii][\"devidx\"] = DevSceneRowID;\n\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = DevSceneType;\n\t\t\t\t\t\troot[\"result\"][ii][\"DevSceneRowID\"] = DevSceneRowID;\n\t\t\t\t\t\troot[\"result\"][ii][\"order\"] = sd[3];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeletePlanDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeletePlanDevice\";\n\t\t\tm_sql.safe_query(\"DELETE FROM DeviceToPlansMap WHERE (ID == '%q')\", idx.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SetPlanDeviceCoords(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string planidx = request::findValue(&req, \"planidx\");\n\t\t\tstd::string xoffset = request::findValue(&req, \"xoffset\");\n\t\t\tstd::string yoffset = request::findValue(&req, \"yoffset\");\n\t\t\tstd::string type = request::findValue(&req, \"DevSceneType\");\n\t\t\tif ((idx.empty()) || (planidx.empty()) || (xoffset.empty()) || (yoffset.empty()))\n\t\t\t\treturn;\n\t\t\tif (type != \"1\") type = \"0\";  // 0 = Device, 1 = Scene/Group\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"SetPlanDeviceCoords\";\n\t\t\tm_sql.safe_query(\"UPDATE DeviceToPlansMap SET [XOffset] = '%q', [YOffset] = '%q' WHERE (DeviceRowID='%q') and (PlanID='%q') and (DevSceneType='%q')\",\n\t\t\t\txoffset.c_str(), yoffset.c_str(), idx.c_str(), planidx.c_str(), type.c_str());\n\t\t\t_log.Log(LOG_STATUS, \"(Floorplan) Device '%s' coordinates set to '%s,%s' in plan '%s'.\", idx.c_str(), xoffset.c_str(), yoffset.c_str(), planidx.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeleteAllPlanDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteAllPlanDevices\";\n\t\t\tm_sql.safe_query(\"DELETE FROM DeviceToPlansMap WHERE (PlanID == '%q')\", idx.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ChangePlanOrder(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tstd::string sway = request::findValue(&req, \"way\");\n\t\t\tif (sway.empty())\n\t\t\t\treturn;\n\t\t\tbool bGoUp = (sway == \"0\");\n\n\t\t\tstd::string aOrder, oID, oOrder;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM Plans WHERE (ID=='%q')\",\n\t\t\t\tidx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\taOrder = result[0][0];\n\n\t\t\tif (!bGoUp)\n\t\t\t{\n\t\t\t\t//Get next device order\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM Plans WHERE ([Order]>'%q') ORDER BY [Order] ASC\",\n\t\t\t\t\taOrder.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\toID = result[0][0];\n\t\t\t\toOrder = result[0][1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Get previous device order\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM Plans WHERE ([Order]<'%q') ORDER BY [Order] DESC\",\n\t\t\t\t\taOrder.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\toID = result[0][0];\n\t\t\t\toOrder = result[0][1];\n\t\t\t}\n\t\t\t//Swap them\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"ChangePlanOrder\";\n\n\t\t\tm_sql.safe_query(\"UPDATE Plans SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\toOrder.c_str(), idx.c_str());\n\t\t\tm_sql.safe_query(\"UPDATE Plans SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\taOrder.c_str(), oID.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ChangePlanDeviceOrder(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string planid = request::findValue(&req, \"planid\");\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string sway = request::findValue(&req, \"way\");\n\t\t\tif (\n\t\t\t\t(planid.empty()) ||\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(sway.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tbool bGoUp = (sway == \"0\");\n\n\t\t\tstd::string aOrder, oID, oOrder;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM DeviceToPlansMap WHERE ((ID=='%q') AND (PlanID=='%q'))\",\n\t\t\t\tidx.c_str(), planid.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\taOrder = result[0][0];\n\n\t\t\tif (!bGoUp)\n\t\t\t{\n\t\t\t\t//Get next device order\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM DeviceToPlansMap WHERE (([Order]>'%q') AND (PlanID=='%q')) ORDER BY [Order] ASC\",\n\t\t\t\t\taOrder.c_str(), planid.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\toID = result[0][0];\n\t\t\t\toOrder = result[0][1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Get previous device order\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM DeviceToPlansMap WHERE (([Order]<'%q') AND (PlanID=='%q')) ORDER BY [Order] DESC\",\n\t\t\t\t\taOrder.c_str(), planid.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\toID = result[0][0];\n\t\t\t\toOrder = result[0][1];\n\t\t\t}\n\t\t\t//Swap them\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"ChangePlanOrder\";\n\n\t\t\tm_sql.safe_query(\"UPDATE DeviceToPlansMap SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\toOrder.c_str(), idx.c_str());\n\t\t\tm_sql.safe_query(\"UPDATE DeviceToPlansMap SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\taOrder.c_str(), oID.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetVersion(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetVersion\";\n\t\t\troot[\"version\"] = szAppVersion;\n\t\t\troot[\"hash\"] = szAppHash;\n\t\t\troot[\"build_time\"] = szAppDate;\n\t\t\tCdzVents* dzvents = CdzVents::GetInstance();\n\t\t\troot[\"dzvents_version\"] = dzvents->GetVersion();\n\t\t\troot[\"python_version\"] = szPyVersion;\n\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\t//only admin users will receive the update notification\n\t\t\t\troot[\"UseUpdate\"] = false;\n\t\t\t\troot[\"HaveUpdate\"] = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\troot[\"UseUpdate\"] = g_bUseUpdater;\n\t\t\t\troot[\"HaveUpdate\"] = m_mainworker.IsUpdateAvailable(false);\n\t\t\t\troot[\"DomoticzUpdateURL\"] = m_mainworker.m_szDomoticzUpdateURL;\n\t\t\t\troot[\"SystemName\"] = m_mainworker.m_szSystemName;\n\t\t\t\troot[\"Revision\"] = m_mainworker.m_iRevision;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetAuth(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetAuth\";\n\t\t\tif (session.rights != -1)\n\t\t\t{\n\t\t\t\troot[\"version\"] = szAppVersion;\n\t\t\t}\n\t\t\troot[\"user\"] = session.username;\n\t\t\troot[\"rights\"] = session.rights;\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetUptime(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\t//this is used in the about page, we are going to round the seconds a bit to display nicer\n\t\t\ttime_t atime = mytime(NULL);\n\t\t\ttime_t tuptime = atime - m_StartTime;\n\t\t\t//round to 5 seconds (nicer in about page)\n\t\t\ttuptime = ((tuptime / 5) * 5) + 5;\n\t\t\tint days, hours, minutes, seconds;\n\t\t\tdays = (int)(tuptime / 86400);\n\t\t\ttuptime -= (days * 86400);\n\t\t\thours = (int)(tuptime / 3600);\n\t\t\ttuptime -= (hours * 3600);\n\t\t\tminutes = (int)(tuptime / 60);\n\t\t\ttuptime -= (minutes * 60);\n\t\t\tseconds = (int)tuptime;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetUptime\";\n\t\t\troot[\"days\"] = days;\n\t\t\troot[\"hours\"] = hours;\n\t\t\troot[\"minutes\"] = minutes;\n\t\t\troot[\"seconds\"] = seconds;\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetActualHistory(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetActualHistory\";\n\n\t\t\tstd::string historyfile = szUserDataFolder + \"History.txt\";\n\n\t\t\tstd::ifstream infile;\n\t\t\tint ii = 0;\n\t\t\tinfile.open(historyfile.c_str());\n\t\t\tstd::string sLine;\n\t\t\tif (infile.is_open())\n\t\t\t{\n\t\t\t\twhile (!infile.eof())\n\t\t\t\t{\n\t\t\t\t\tgetline(infile, sLine);\n\t\t\t\t\troot[\"LastLogTime\"] = \"\";\n\t\t\t\t\tif (sLine.find(\"Version \") == 0)\n\t\t\t\t\t\troot[\"result\"][ii][\"level\"] = 1;\n\t\t\t\t\telse\n\t\t\t\t\t\troot[\"result\"][ii][\"level\"] = 0;\n\t\t\t\t\troot[\"result\"][ii][\"message\"] = sLine;\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetNewHistory(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetNewHistory\";\n\n\t\t\tstd::string historyfile;\n\t\t\tint nValue;\n\t\t\tm_sql.GetPreferencesVar(\"ReleaseChannel\", nValue);\n\t\t\tbool bIsBetaChannel = (nValue != 0);\n\n\t\t\tstd::string szHistoryURL = \"https://www.domoticz.com/download.php?channel=stable&type=history\";\n\t\t\tif (bIsBetaChannel)\n\t\t\t{\n\t\t\t\tutsname my_uname;\n\t\t\t\tif (uname(&my_uname) < 0)\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string systemname = my_uname.sysname;\n\t\t\t\tstd::string machine = my_uname.machine;\n\t\t\t\tstd::transform(systemname.begin(), systemname.end(), systemname.begin(), ::tolower);\n\n\t\t\t\tif (machine == \"armv6l\")\n\t\t\t\t{\n\t\t\t\t\t//Seems like old arm systems can also use the new arm build\n\t\t\t\t\tmachine = \"armv7l\";\n\t\t\t\t}\n\n\t\t\t\tif (((machine != \"armv6l\") && (machine != \"armv7l\") && (systemname != \"windows\") && (machine != \"x86_64\") && (machine != \"aarch64\")) || (strstr(my_uname.release, \"ARCH+\") != NULL))\n\t\t\t\t\tszHistoryURL = \"https://www.domoticz.com/download.php?channel=beta&type=history\";\n\t\t\t\telse\n\t\t\t\t\tszHistoryURL = \"https://www.domoticz.com/download.php?channel=beta&type=history&system=\" + systemname + \"&machine=\" + machine;\n\t\t\t}\n\t\t\tif (!HTTPClient::GET(szHistoryURL, historyfile))\n\t\t\t{\n\t\t\t\thistoryfile = \"Unable to get Online History document !!\";\n\t\t\t}\n\n\t\t\tstd::istringstream stream(historyfile);\n\t\t\tstd::string sLine;\n\t\t\tint ii = 0;\n\t\t\twhile (std::getline(stream, sLine))\n\t\t\t{\n\t\t\t\troot[\"LastLogTime\"] = \"\";\n\t\t\t\tif (sLine.find(\"Version \") == 0)\n\t\t\t\t\troot[\"result\"][ii][\"level\"] = 1;\n\t\t\t\telse\n\t\t\t\t\troot[\"result\"][ii][\"level\"] = 0;\n\t\t\t\troot[\"result\"][ii][\"message\"] = sLine;\n\t\t\t\tii++;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetConfig(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights == -1)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn;//Only auth user allowed\n\t\t\t}\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetConfig\";\n\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint urights = 3;\n\t\t\tunsigned long UserID = 0;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t{\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\tUserID = m_users[iUser].ID;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tint nValue;\n\t\t\tstd::string sValue;\n\n\t\t\tif (m_sql.GetPreferencesVar(\"Language\", sValue))\n\t\t\t{\n\t\t\t\troot[\"language\"] = sValue;\n\t\t\t}\n\t\t\tif (m_sql.GetPreferencesVar(\"DegreeDaysBaseTemperature\", sValue))\n\t\t\t{\n\t\t\t\troot[\"DegreeDaysBaseTemperature\"] = atof(sValue.c_str());\n\t\t\t}\n\n\t\t\tnValue = 0;\n\t\t\tint iDashboardType = 0;\n\t\t\tm_sql.GetPreferencesVar(\"DashboardType\", iDashboardType);\n\t\t\troot[\"DashboardType\"] = iDashboardType;\n\t\t\tm_sql.GetPreferencesVar(\"MobileType\", nValue);\n\t\t\troot[\"MobileType\"] = nValue;\n\n\t\t\tnValue = 1;\n\t\t\tm_sql.GetPreferencesVar(\"5MinuteHistoryDays\", nValue);\n\t\t\troot[\"FiveMinuteHistoryDays\"] = nValue;\n\n\t\t\tnValue = 1;\n\t\t\tm_sql.GetPreferencesVar(\"ShowUpdateEffect\", nValue);\n\t\t\troot[\"result\"][\"ShowUpdatedEffect\"] = (nValue == 1);\n\n\t\t\troot[\"AllowWidgetOrdering\"] = m_sql.m_bAllowWidgetOrdering;\n\n\t\t\troot[\"WindScale\"] = m_sql.m_windscale*10.0f;\n\t\t\troot[\"WindSign\"] = m_sql.m_windsign;\n\t\t\troot[\"TempScale\"] = m_sql.m_tempscale;\n\t\t\troot[\"TempSign\"] = m_sql.m_tempsign;\n\n\t\t\tstd::string Latitude = \"1\";\n\t\t\tstd::string Longitude = \"1\";\n\t\t\tif (m_sql.GetPreferencesVar(\"Location\", nValue, sValue))\n\t\t\t{\n\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\tStringSplit(sValue, \";\", strarray);\n\n\t\t\t\tif (strarray.size() == 2)\n\t\t\t\t{\n\t\t\t\t\tLatitude = strarray[0];\n\t\t\t\t\tLongitude = strarray[1];\n\t\t\t\t}\n\t\t\t}\n\t\t\troot[\"Latitude\"] = Latitude;\n\t\t\troot[\"Longitude\"] = Longitude;\n\n#ifndef NOCLOUD\n\t\t\tbool bEnableTabProxy = request::get_req_header(&req, \"X-From-MyDomoticz\") != NULL;\n#else\n\t\t\tbool bEnableTabProxy = false;\n#endif\n\t\t\tint bEnableTabDashboard = 1;\n\t\t\tint bEnableTabFloorplans = 1;\n\t\t\tint bEnableTabLight = 1;\n\t\t\tint bEnableTabScenes = 1;\n\t\t\tint bEnableTabTemp = 1;\n\t\t\tint bEnableTabWeather = 1;\n\t\t\tint bEnableTabUtility = 1;\n\t\t\tint bEnableTabCustom = 1;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\tif ((UserID != 0) && (UserID != 10000))\n\t\t\t{\n\t\t\t\tresult = m_sql.safe_query(\"SELECT TabsEnabled FROM Users WHERE (ID==%lu)\",\n\t\t\t\t\tUserID);\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint TabsEnabled = atoi(result[0][0].c_str());\n\t\t\t\t\tbEnableTabLight = (TabsEnabled&(1 << 0));\n\t\t\t\t\tbEnableTabScenes = (TabsEnabled&(1 << 1));\n\t\t\t\t\tbEnableTabTemp = (TabsEnabled&(1 << 2));\n\t\t\t\t\tbEnableTabWeather = (TabsEnabled&(1 << 3));\n\t\t\t\t\tbEnableTabUtility = (TabsEnabled&(1 << 4));\n\t\t\t\t\tbEnableTabCustom = (TabsEnabled&(1 << 5));\n\t\t\t\t\tbEnableTabFloorplans = (TabsEnabled&(1 << 6));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabFloorplans\", bEnableTabFloorplans);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabLights\", bEnableTabLight);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabScenes\", bEnableTabScenes);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabTemp\", bEnableTabTemp);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabWeather\", bEnableTabWeather);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabUtility\", bEnableTabUtility);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabCustom\", bEnableTabCustom);\n\t\t\t}\n\t\t\tif (iDashboardType == 3)\n\t\t\t{\n\t\t\t\t//Floorplan , no need to show a tab floorplan\n\t\t\t\tbEnableTabFloorplans = 0;\n\t\t\t}\n\t\t\troot[\"result\"][\"EnableTabProxy\"] = bEnableTabProxy;\n\t\t\troot[\"result\"][\"EnableTabDashboard\"] = bEnableTabDashboard != 0;\n\t\t\troot[\"result\"][\"EnableTabFloorplans\"] = bEnableTabFloorplans != 0;\n\t\t\troot[\"result\"][\"EnableTabLights\"] = bEnableTabLight != 0;\n\t\t\troot[\"result\"][\"EnableTabScenes\"] = bEnableTabScenes != 0;\n\t\t\troot[\"result\"][\"EnableTabTemp\"] = bEnableTabTemp != 0;\n\t\t\troot[\"result\"][\"EnableTabWeather\"] = bEnableTabWeather != 0;\n\t\t\troot[\"result\"][\"EnableTabUtility\"] = bEnableTabUtility != 0;\n\t\t\troot[\"result\"][\"EnableTabCustom\"] = bEnableTabCustom != 0;\n\n\t\t\tif (bEnableTabCustom)\n\t\t\t{\n\t\t\t\t//Add custom templates\n\t\t\t\tDIR *lDir;\n\t\t\t\tstruct dirent *ent;\n\t\t\t\tstd::string templatesFolder = szWWWFolder + \"/templates\";\n\t\t\t\tint iFile = 0;\n\t\t\t\tif ((lDir = opendir(templatesFolder.c_str())) != NULL)\n\t\t\t\t{\n\t\t\t\t\twhile ((ent = readdir(lDir)) != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string filename = ent->d_name;\n\t\t\t\t\t\tsize_t pos = filename.find(\".htm\");\n\t\t\t\t\t\tif (pos != std::string::npos)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string shortfile = filename.substr(0, pos);\n\t\t\t\t\t\t\troot[\"result\"][\"templates\"][iFile++] = shortfile;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tclosedir(lDir);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SendNotification(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string subject = request::findValue(&req, \"subject\");\n\t\t\tstd::string body = request::findValue(&req, \"body\");\n\t\t\tstd::string subsystem = request::findValue(&req, \"subsystem\");\n\t\t\tif (\n\t\t\t\t(subject.empty()) ||\n\t\t\t\t(body.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tif (subsystem.empty()) subsystem = NOTIFYALL;\n\t\t\t//Add to queue\n\t\t\tif (m_notifications.SendMessage(0, std::string(\"\"), subsystem, subject, body, std::string(\"\"), 1, std::string(\"\"), false)) {\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t}\n\t\t\troot[\"title\"] = \"SendNotification\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_EmailCameraSnapshot(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string camidx = request::findValue(&req, \"camidx\");\n\t\t\tstd::string subject = request::findValue(&req, \"subject\");\n\t\t\tif (\n\t\t\t\t(camidx.empty()) ||\n\t\t\t\t(subject.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\t//Add to queue\n\t\t\tm_sql.AddTaskItem(_tTaskItem::EmailCameraSnapshot(1, camidx, subject));\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Email Camera Snapshot\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights < 1)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //only user or higher allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\tif (!IsIdxForUser(&session, atoi(idx.c_str())))\n\t\t\t{\n\t\t\t\t_log.Log(LOG_ERROR, \"User: %s tried to update an Unauthorized device!\", session.username.c_str());\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstd::string hid = request::findValue(&req, \"hid\");\n\t\t\tstd::string did = request::findValue(&req, \"did\");\n\t\t\tstd::string dunit = request::findValue(&req, \"dunit\");\n\t\t\tstd::string dtype = request::findValue(&req, \"dtype\");\n\t\t\tstd::string dsubtype = request::findValue(&req, \"dsubtype\");\n\n\t\t\tstd::string nvalue = request::findValue(&req, \"nvalue\");\n\t\t\tstd::string svalue = request::findValue(&req, \"svalue\");\n\n\t\t\tif ((nvalue.empty() && svalue.empty()))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tint signallevel = 12;\n\t\t\tint batterylevel = 255;\n\n\t\t\tif (idx.empty())\n\t\t\t{\n\t\t\t\t//No index supplied, check if raw parameters where supplied\n\t\t\t\tif (\n\t\t\t\t\t(hid.empty()) ||\n\t\t\t\t\t(did.empty()) ||\n\t\t\t\t\t(dunit.empty()) ||\n\t\t\t\t\t(dtype.empty()) ||\n\t\t\t\t\t(dsubtype.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Get the raw device parameters\n\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT HardwareID, DeviceID, Unit, Type, SubType FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\thid = result[0][0];\n\t\t\t\tdid = result[0][1];\n\t\t\t\tdunit = result[0][2];\n\t\t\t\tdtype = result[0][3];\n\t\t\t\tdsubtype = result[0][4];\n\t\t\t}\n\n\t\t\tint HardwareID = atoi(hid.c_str());\n\t\t\tstd::string DeviceID = did;\n\t\t\tint unit = atoi(dunit.c_str());\n\t\t\tint devType = atoi(dtype.c_str());\n\t\t\tint subType = atoi(dsubtype.c_str());\n\n\t\t\tuint64_t ulIdx = std::strtoull(idx.c_str(), nullptr, 10);\n\n\t\t\tint invalue = atoi(nvalue.c_str());\n\n\t\t\tstd::string sSignalLevel = request::findValue(&req, \"rssi\");\n\t\t\tif (sSignalLevel != \"\")\n\t\t\t{\n\t\t\t\tsignallevel = atoi(sSignalLevel.c_str());\n\t\t\t}\n\t\t\tstd::string sBatteryLevel = request::findValue(&req, \"battery\");\n\t\t\tif (sBatteryLevel != \"\")\n\t\t\t{\n\t\t\t\tbatterylevel = atoi(sBatteryLevel.c_str());\n\t\t\t}\n\t\t\tif (m_mainworker.UpdateDevice(HardwareID, DeviceID, unit, devType, subType, invalue, svalue, signallevel, batterylevel))\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Update Device\";\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string script = request::findValue(&req, \"script\");\n\t\t\tif (script.empty())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstd::string content = req.content;\n\n\t\t\tstd::vector<std::string> allParameters;\n\n\t\t\t// Keep the url content on the right of the '?'\n\t\t\tstd::vector<std::string> allParts;\n\t\t\tStringSplit(req.uri, \"?\", allParts);\n\t\t\tif (!allParts.empty())\n\t\t\t{\n\t\t\t\t// Split all url parts separated by a '&'\n\t\t\t\tStringSplit(allParts[1], \"&\", allParameters);\n\t\t\t}\n\n\t\t\tCLuaHandler luaScript;\n\t\t\tbool ret = luaScript.executeLuaScript(script, content, allParameters);\n\t\t\tif (ret)\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Update Device\";\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SetThermostatState(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string sstate = request::findValue(&req, \"state\");\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\n\t\t\tif (\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(sstate.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tint iState = atoi(sstate.c_str());\n\n\t\t\tint urights = 3;\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t{\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a Thermostat State change command\", m_users[iUser].Username.c_str());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (urights < 1)\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Set Thermostat State\";\n\t\t\t_log.Log(LOG_NORM, \"Setting Thermostat State....\");\n\t\t\tm_mainworker.SetThermostatState(idx, iState);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SystemShutdown(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n#ifdef WIN32\n\t\t\tint ret = system(\"shutdown -s -f -t 1 -d up:125:1\");\n#else\n\t\t\tint ret = system(\"sudo shutdown -h now\");\n#endif\n\t\t\tif (ret != 0)\n\t\t\t{\n\t\t\t\t_log.Log(LOG_ERROR, \"Error executing shutdown command. returned: %d\", ret);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\troot[\"title\"] = \"SystemShutdown\";\n\t\t\troot[\"status\"] = \"OK\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SystemReboot(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n#ifdef WIN32\n\t\t\tint ret = system(\"shutdown -r -f -t 1 -d up:125:1\");\n#else\n\t\t\tint ret = system(\"sudo shutdown -r now\");\n#endif\n\t\t\tif (ret != 0)\n\t\t\t{\n\t\t\t\t_log.Log(LOG_ERROR, \"Error executing reboot command. returned: %d\", ret);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\troot[\"title\"] = \"SystemReboot\";\n\t\t\troot[\"status\"] = \"OK\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ExcecuteScript(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string scriptname = request::findValue(&req, \"scriptname\");\n\t\t\tif (scriptname.empty())\n\t\t\t\treturn;\n\t\t\tif (scriptname.find(\"..\") != std::string::npos)\n\t\t\t\treturn;\n#ifdef WIN32\n\t\t\tscriptname = szUserDataFolder + \"scripts\\\\\" + scriptname;\n#else\n\t\t\tscriptname = szUserDataFolder + \"scripts/\" + scriptname;\n#endif\n\t\t\tif (!file_exist(scriptname.c_str()))\n\t\t\t\treturn;\n\t\t\tstd::string script_params = request::findValue(&req, \"scriptparams\");\n\t\t\tstd::string strparm = szUserDataFolder;\n\t\t\tif (!script_params.empty())\n\t\t\t{\n\t\t\t\tif (strparm.size() > 0)\n\t\t\t\t\tstrparm += \" \" + script_params;\n\t\t\t\telse\n\t\t\t\t\tstrparm = script_params;\n\t\t\t}\n\t\t\tstd::string sdirect = request::findValue(&req, \"direct\");\n\t\t\tif (sdirect == \"true\")\n\t\t\t{\n\t\t\t\t_log.Log(LOG_STATUS, \"Executing script: %s\", scriptname.c_str());\n#ifdef WIN32\n\t\t\t\tShellExecute(NULL, \"open\", scriptname.c_str(), strparm.c_str(), NULL, SW_SHOWNORMAL);\n#else\n\t\t\t\tstd::string lscript = scriptname + \" \" + strparm;\n\t\t\t\tint ret = system(lscript.c_str());\n\t\t\t\tif (ret != 0)\n\t\t\t\t{\n\t\t\t\t\t_log.Log(LOG_ERROR, \"Error executing script command (%s). returned: %d\", lscript.c_str(), ret);\n\t\t\t\t\treturn;\n\t\t\t}\n#endif\n\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//add script to background worker\n\t\t\t\tm_sql.AddTaskItem(_tTaskItem::ExecuteScript(0.2f, scriptname, strparm));\n\t\t\t}\n\t\t\troot[\"title\"] = \"ExecuteScript\";\n\t\t\troot[\"status\"] = \"OK\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetCosts(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tchar szTmp[100];\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType, nValue, sValue FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\tidx.c_str());\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\tint nValue = 0;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetElectraCosts\";\n\t\t\t\tm_sql.GetPreferencesVar(\"CostEnergy\", nValue);\n\t\t\t\troot[\"CostEnergy\"] = nValue;\n\t\t\t\tm_sql.GetPreferencesVar(\"CostEnergyT2\", nValue);\n\t\t\t\troot[\"CostEnergyT2\"] = nValue;\n\t\t\t\tm_sql.GetPreferencesVar(\"CostEnergyR1\", nValue);\n\t\t\t\troot[\"CostEnergyR1\"] = nValue;\n\t\t\t\tm_sql.GetPreferencesVar(\"CostEnergyR2\", nValue);\n\t\t\t\troot[\"CostEnergyR2\"] = nValue;\n\t\t\t\tm_sql.GetPreferencesVar(\"CostGas\", nValue);\n\t\t\t\troot[\"CostGas\"] = nValue;\n\t\t\t\tm_sql.GetPreferencesVar(\"CostWater\", nValue);\n\t\t\t\troot[\"CostWater\"] = nValue;\n\n\t\t\t\tint tValue = 1000;\n\t\t\t\tif (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))\n\t\t\t\t{\n\t\t\t\t\troot[\"DividerWater\"] = float(tValue);\n\t\t\t\t}\n\n\t\t\t\tunsigned char dType = atoi(sd[0].c_str());\n\t\t\t\t//unsigned char subType = atoi(sd[1].c_str());\n\t\t\t\t//nValue = (unsigned char)atoi(sd[2].c_str());\n\t\t\t\tstd::string sValue = sd[3];\n\n\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t{\n\t\t\t\t\t//also provide the counter values\n\n\t\t\t\t\tstd::vector<std::string> splitresults;\n\t\t\t\t\tStringSplit(sValue, \";\", splitresults);\n\t\t\t\t\tif (splitresults.size() != 6)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tfloat EnergyDivider = 1000.0f;\n\t\t\t\t\tif (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))\n\t\t\t\t\t{\n\t\t\t\t\t\tEnergyDivider = float(tValue);\n\t\t\t\t\t}\n\n\t\t\t\t\tunsigned long long powerusage1 = std::strtoull(splitresults[0].c_str(), nullptr, 10);\n\t\t\t\t\tunsigned long long powerusage2 = std::strtoull(splitresults[1].c_str(), nullptr, 10);\n\t\t\t\t\tunsigned long long powerdeliv1 = std::strtoull(splitresults[2].c_str(), nullptr, 10);\n\t\t\t\t\tunsigned long long powerdeliv2 = std::strtoull(splitresults[3].c_str(), nullptr, 10);\n\t\t\t\t\tunsigned long long usagecurrent = std::strtoull(splitresults[4].c_str(), nullptr, 10);\n\t\t\t\t\tunsigned long long delivcurrent = std::strtoull(splitresults[5].c_str(), nullptr, 10);\n\n\t\t\t\t\tpowerdeliv1 = (powerdeliv1 < 10) ? 0 : powerdeliv1;\n\t\t\t\t\tpowerdeliv2 = (powerdeliv2 < 10) ? 0 : powerdeliv2;\n\n\t\t\t\t\tsprintf(szTmp, \"%.03f\", float(powerusage1) / EnergyDivider);\n\t\t\t\t\troot[\"CounterT1\"] = szTmp;\n\t\t\t\t\tsprintf(szTmp, \"%.03f\", float(powerusage2) / EnergyDivider);\n\t\t\t\t\troot[\"CounterT2\"] = szTmp;\n\t\t\t\t\tsprintf(szTmp, \"%.03f\", float(powerdeliv1) / EnergyDivider);\n\t\t\t\t\troot[\"CounterR1\"] = szTmp;\n\t\t\t\t\tsprintf(szTmp, \"%.03f\", float(powerdeliv2) / EnergyDivider);\n\t\t\t\t\troot[\"CounterR2\"] = szTmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_CheckForUpdate(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint urights = 3;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t}\n\t\t\troot[\"statuscode\"] = urights;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"CheckForUpdate\";\n\t\t\troot[\"HaveUpdate\"] = false;\n\t\t\troot[\"Revision\"] = m_mainworker.m_iRevision;\n\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin users may update\n\t\t\t}\n\n\t\t\tbool bIsForced = (request::findValue(&req, \"forced\") == \"true\");\n\n\t\t\tif (!bIsForced)\n\t\t\t{\n\t\t\t\tint nValue = 0;\n\t\t\t\tm_sql.GetPreferencesVar(\"UseAutoUpdate\", nValue);\n\t\t\t\tif (nValue != 1)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troot[\"HaveUpdate\"] = m_mainworker.IsUpdateAvailable(bIsForced);\n\t\t\troot[\"DomoticzUpdateURL\"] = m_mainworker.m_szDomoticzUpdateURL;\n\t\t\troot[\"SystemName\"] = m_mainworker.m_szSystemName;\n\t\t\troot[\"Revision\"] = m_mainworker.m_iRevision;\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DownloadUpdate(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (!m_mainworker.StartDownloadUpdate())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DownloadUpdate\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DownloadReady(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (!m_mainworker.m_bHaveDownloadedDomoticzUpdate)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DownloadReady\";\n\t\t\troot[\"downloadok\"] = (m_mainworker.m_bHaveDownloadedDomoticzUpdateSuccessFull) ? true : false;\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeleteDatePoint(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tconst std::string idx = request::findValue(&req, \"idx\");\n\t\t\tconst std::string Date = request::findValue(&req, \"date\");\n\t\t\tif (\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(Date.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"deletedatapoint\";\n\t\t\tm_sql.DeleteDataPoint(idx.c_str(), Date);\n\t\t}\n\n\t\tbool CWebServer::IsIdxForUser(const WebEmSession *pSession, const int Idx)\n\t\t{\n\t\t\tif (pSession->rights == 2)\n\t\t\t\treturn true;\n\t\t\tif (pSession->rights == 0)\n\t\t\t\treturn false; //viewer\n\t\t\t//User\n\t\t\tint iUser = FindUser(pSession->username.c_str());\n\t\t\tif ((iUser < 0) || (iUser >= (int)m_users.size()))\n\t\t\t\treturn false;\n\n\t\t\tif (m_users[iUser].TotSensors == 0)\n\t\t\t\treturn true; // all sensors\n\n\t\t\tstd::vector<std::vector<std::string> > result = m_sql.safe_query(\"SELECT DeviceRowID FROM SharedDevices WHERE (SharedUserID == '%d') AND (DeviceRowID == '%d')\", m_users[iUser].ID, Idx);\n\t\t\treturn (!result.empty());\n\t\t}\n\n\n\t\tvoid CWebServer::HandleCommand(const std::string &cparam, WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::map < std::string, webserver_response_function >::iterator pf = m_webcommands.find(cparam);\n\t\t\tif (pf != m_webcommands.end())\n\t\t\t{\n\t\t\t\tpf->second(session, req, root);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tchar szTmp[300];\n\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint iUser = -1;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tiUser = FindUser(session.username.c_str());\n\t\t\t}\n\n\t\t\tif (cparam == \"deleteallsubdevices\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteAllSubDevices\";\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM LightSubDevices WHERE (ParentID == '%q')\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"deletesubdevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteSubDevice\";\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM LightSubDevices WHERE (ID == '%q')\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"addsubdevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string subidx = request::findValue(&req, \"subidx\");\n\t\t\t\tif ((idx.empty()) || (subidx.empty()))\n\t\t\t\t\treturn;\n\t\t\t\tif (idx == subidx)\n\t\t\t\t\treturn;\n\n\t\t\t\t//first check if it is not already a sub device\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q') AND (ParentID =='%q')\",\n\t\t\t\t\tsubidx.c_str(), idx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"AddSubDevice\";\n\t\t\t\t\t//no it is not, add it\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"INSERT INTO LightSubDevices (DeviceRowID, ParentID) VALUES ('%q','%q')\",\n\t\t\t\t\t\tsubidx.c_str(),\n\t\t\t\t\t\tidx.c_str()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"addscenedevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string devidx = request::findValue(&req, \"devidx\");\n\t\t\t\tstd::string isscene = request::findValue(&req, \"isscene\");\n\t\t\t\tstd::string scommand = request::findValue(&req, \"command\");\n\t\t\t\tint ondelay = atoi(request::findValue(&req, \"ondelay\").c_str());\n\t\t\t\tint offdelay = atoi(request::findValue(&req, \"offdelay\").c_str());\n\n\t\t\t\tif (\n\t\t\t\t\t(idx.empty()) ||\n\t\t\t\t\t(devidx.empty()) ||\n\t\t\t\t\t(isscene.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tint level = -1;\n\t\t\t\tif (request::hasValue(&req, \"level\"))\n\t\t\t\t\tlevel = atoi(request::findValue(&req, \"level\").c_str());\n\t\t\t\tstd::string color = _tColor(request::findValue(&req, \"color\")).toJSONString(); //Parse the color to detect incorrectly formatted color data\n\n\t\t\t\tunsigned char command = 0;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT HardwareID, DeviceID, Unit, Type, SubType, SwitchType, Options FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\t\tdevidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint dType = atoi(result[0][3].c_str());\n\t\t\t\t\tint sType = atoi(result[0][4].c_str());\n\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(result[0][5].c_str());\n\t\t\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(result[0][6].c_str());\n\t\t\t\t\tGetLightCommand(dType, sType, switchtype, scommand, command, options);\n\t\t\t\t}\n\n\t\t\t\t//first check if this device is not the scene code!\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Activators, SceneType FROM Scenes WHERE (ID=='%q')\", idx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint SceneType = atoi(result[0][1].c_str());\n\n\t\t\t\t\tstd::vector<std::string> arrayActivators;\n\t\t\t\t\tStringSplit(result[0][0], \";\", arrayActivators);\n\t\t\t\t\tfor (const auto & ittAct : arrayActivators)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string sCodeCmd = ittAct;\n\n\t\t\t\t\t\tstd::vector<std::string> arrayCode;\n\t\t\t\t\t\tStringSplit(sCodeCmd, \":\", arrayCode);\n\n\t\t\t\t\t\tstd::string sID = arrayCode[0];\n\t\t\t\t\t\tstd::string sCode = \"\";\n\t\t\t\t\t\tif (arrayCode.size() == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsCode = arrayCode[1];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (sID == devidx)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn; //Group does not work with separate codes, so already there\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//first check if it is not already a part of this scene/group (with the same OnDelay)\n\t\t\t\tif (isscene == \"true\") {\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM SceneDevices WHERE (DeviceRowID=='%q') AND (SceneRowID =='%q') AND (OnDelay == %d) AND (OffDelay == %d) AND (Cmd == %d)\",\n\t\t\t\t\t\tdevidx.c_str(), idx.c_str(), ondelay, offdelay, command);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM SceneDevices WHERE (DeviceRowID=='%q') AND (SceneRowID =='%q') AND (OnDelay == %d)\",\n\t\t\t\t\t\tdevidx.c_str(), idx.c_str(), ondelay);\n\t\t\t\t}\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"AddSceneDevice\";\n\t\t\t\t\t//no it is not, add it\n\t\t\t\t\tif (isscene == \"true\")\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"INSERT INTO SceneDevices (DeviceRowID, SceneRowID, Cmd, Level, Color, OnDelay, OffDelay) VALUES ('%q','%q',%d,%d,'%q',%d,%d)\",\n\t\t\t\t\t\t\tdevidx.c_str(),\n\t\t\t\t\t\t\tidx.c_str(),\n\t\t\t\t\t\t\tcommand,\n\t\t\t\t\t\t\tlevel,\n\t\t\t\t\t\t\tcolor.c_str(),\n\t\t\t\t\t\t\tondelay,\n\t\t\t\t\t\t\toffdelay\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"INSERT INTO SceneDevices (DeviceRowID, SceneRowID, Level, Color, OnDelay, OffDelay) VALUES ('%q','%q',%d,'%q',%d,%d)\",\n\t\t\t\t\t\t\tdevidx.c_str(),\n\t\t\t\t\t\t\tidx.c_str(),\n\t\t\t\t\t\t\tlevel,\n\t\t\t\t\t\t\tcolor.c_str(),\n\t\t\t\t\t\t\tondelay,\n\t\t\t\t\t\t\toffdelay\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t\t\t\tm_mainworker.m_eventsystem.GetCurrentScenesGroups();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"updatescenedevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string devidx = request::findValue(&req, \"devidx\");\n\t\t\t\tstd::string scommand = request::findValue(&req, \"command\");\n\t\t\t\tint ondelay = atoi(request::findValue(&req, \"ondelay\").c_str());\n\t\t\t\tint offdelay = atoi(request::findValue(&req, \"offdelay\").c_str());\n\n\t\t\t\tif (\n\t\t\t\t\t(idx.empty()) ||\n\t\t\t\t\t(devidx.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\n\t\t\t\tunsigned char command = 0;\n\n\t\t\t\tresult = m_sql.safe_query(\"SELECT HardwareID, DeviceID, Unit, Type, SubType, SwitchType, Options FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\t\tdevidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint dType = atoi(result[0][3].c_str());\n\t\t\t\t\tint sType = atoi(result[0][4].c_str());\n\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(result[0][5].c_str());\n\t\t\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(result[0][6].c_str());\n\t\t\t\t\tGetLightCommand(dType, sType, switchtype, scommand, command, options);\n\t\t\t\t}\n\t\t\t\tint level = -1;\n\t\t\t\tif (request::hasValue(&req, \"level\"))\n\t\t\t\t\tlevel = atoi(request::findValue(&req, \"level\").c_str());\n\t\t\t\tstd::string color = _tColor(request::findValue(&req, \"color\")).toJSONString(); //Parse the color to detect incorrectly formatted color data\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"UpdateSceneDevice\";\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"UPDATE SceneDevices SET Cmd=%d, Level=%d, Color='%q', OnDelay=%d, OffDelay=%d  WHERE (ID == '%q')\",\n\t\t\t\t\tcommand, level, color.c_str(), ondelay, offdelay, idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"deletescenedevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteSceneDevice\";\n\t\t\t\tm_sql.safe_query(\"DELETE FROM SceneDevices WHERE (ID == '%q')\", idx.c_str());\n\t\t\t\tm_sql.safe_query(\"DELETE FROM CamerasActiveDevices WHERE (DevSceneType==1) AND (DevSceneRowID == '%q')\", idx.c_str());\n\t\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t\t\tm_mainworker.m_eventsystem.GetCurrentScenesGroups();\n\t\t\t}\n\t\t\telse if (cparam == \"getsubdevices\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetSubDevices\";\n\t\t\t\tresult = m_sql.safe_query(\"SELECT a.ID, b.Name FROM LightSubDevices a, DeviceStatus b WHERE (a.ParentID=='%q') AND (b.ID == a.DeviceRowID)\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"ID\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"getscenedevices\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string isscene = request::findValue(&req, \"isscene\");\n\n\t\t\t\tif (\n\t\t\t\t\t(idx.empty()) ||\n\t\t\t\t\t(isscene.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetSceneDevices\";\n\n\t\t\t\tresult = m_sql.safe_query(\"SELECT a.ID, b.Name, a.DeviceRowID, b.Type, b.SubType, b.nValue, b.sValue, a.Cmd, a.Level, b.ID, a.[Order], a.Color, a.OnDelay, a.OffDelay, b.SwitchType FROM SceneDevices a, DeviceStatus b WHERE (a.SceneRowID=='%q') AND (b.ID == a.DeviceRowID) ORDER BY a.[Order]\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"ID\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"DevID\"] = sd[2];\n\t\t\t\t\t\troot[\"result\"][ii][\"DevRealIdx\"] = sd[9];\n\t\t\t\t\t\troot[\"result\"][ii][\"Order\"] = atoi(sd[10].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"OnDelay\"] = atoi(sd[12].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"OffDelay\"] = atoi(sd[13].c_str());\n\n\t\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sd[14].c_str());\n\n\t\t\t\t\t\tunsigned char devType = atoi(sd[3].c_str());\n\n\t\t\t\t\t\t//switchtype seemed not to be used down with the GetLightStatus command,\n\t\t\t\t\t\t//causing RFY to go wrong, fixing here\n\t\t\t\t\t\tif (devType != pTypeRFY)\n\t\t\t\t\t\t\tswitchtype = STYPE_OnOff;\n\n\t\t\t\t\t\tunsigned char subType = atoi(sd[4].c_str());\n\t\t\t\t\t\tunsigned char nValue = (unsigned char)atoi(sd[5].c_str());\n\t\t\t\t\t\tstd::string sValue = sd[6];\n\t\t\t\t\t\tint command = atoi(sd[7].c_str());\n\t\t\t\t\t\tint level = atoi(sd[8].c_str());\n\n\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\tint maxDimLevel = 0;\n\t\t\t\t\t\tGetLightStatus(devType, subType, switchtype, command, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\t\t\t\t\t\troot[\"result\"][ii][\"Command\"] = lstatus;\n\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = level;\n\t\t\t\t\t\troot[\"result\"][ii][\"Color\"] = _tColor(sd[11]).toJSONString();\n\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = RFX_Type_Desc(devType, 1);\n\t\t\t\t\t\troot[\"result\"][ii][\"SubType\"] = RFX_Type_SubType_Desc(devType, subType);\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"changescenedeviceorder\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\tstd::string sway = request::findValue(&req, \"way\");\n\t\t\t\tif (sway.empty())\n\t\t\t\t\treturn;\n\t\t\t\tbool bGoUp = (sway == \"0\");\n\n\t\t\t\tstd::string aScene, aOrder, oID, oOrder;\n\n\t\t\t\t//Get actual device order\n\t\t\t\tresult = m_sql.safe_query(\"SELECT SceneRowID, [Order] FROM SceneDevices WHERE (ID=='%q')\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\taScene = result[0][0];\n\t\t\t\taOrder = result[0][1];\n\n\t\t\t\tif (!bGoUp)\n\t\t\t\t{\n\t\t\t\t\t//Get next device order\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM SceneDevices WHERE (SceneRowID=='%q' AND [Order]>'%q') ORDER BY [Order] ASC\",\n\t\t\t\t\t\taScene.c_str(), aOrder.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\toID = result[0][0];\n\t\t\t\t\toOrder = result[0][1];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//Get previous device order\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM SceneDevices WHERE (SceneRowID=='%q' AND [Order]<'%q') ORDER BY [Order] DESC\",\n\t\t\t\t\t\taScene.c_str(), aOrder.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\toID = result[0][0];\n\t\t\t\t\toOrder = result[0][1];\n\t\t\t\t}\n\t\t\t\t//Swap them\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ChangeSceneDeviceOrder\";\n\n\t\t\t\tresult = m_sql.safe_query(\"UPDATE SceneDevices SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\t\toOrder.c_str(), idx.c_str());\n\t\t\t\tresult = m_sql.safe_query(\"UPDATE SceneDevices SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\t\taOrder.c_str(), oID.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"deleteallscenedevices\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteAllSceneDevices\";\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM SceneDevices WHERE (SceneRowID == %q)\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"getmanualhardware\")\n\t\t\t{\n\t\t\t\t//used by Add Manual Light/Switch dialog\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetHardware\";\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Type FROM Hardware ORDER BY ID ASC\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\tint ID = atoi(sd[0].c_str());\n\t\t\t\t\t\tstd::string Name = sd[1];\n\t\t\t\t\t\t_eHardwareTypes Type = (_eHardwareTypes)atoi(sd[2].c_str());\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(Type == HTYPE_RFXLAN) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RFXtrx315) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RFXtrx433) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RFXtrx868) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EnOceanESP2) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EnOceanESP3) ||\n\t\t\t\t\t\t\t(Type == HTYPE_Dummy) ||\n\t\t\t\t\t\t\t(Type == HTYPE_Tellstick) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EVOHOME_SCRIPT) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EVOHOME_SERIAL) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EVOHOME_WEB) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EVOHOME_TCP) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RaspberryGPIO) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RFLINKUSB) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RFLINKTCP) ||\n\t\t\t\t\t\t\t(Type == HTYPE_ZIBLUEUSB) ||\n\t\t\t\t\t\t\t(Type == HTYPE_ZIBLUETCP) ||\n\t\t\t\t\t\t\t(Type == HTYPE_OpenWebNetTCP) ||\n\t\t\t\t\t\t\t(Type == HTYPE_OpenWebNetUSB) ||\n\t\t\t\t\t\t\t(Type == HTYPE_SysfsGpio) ||\n\t\t\t\t\t\t\t(Type == HTYPE_USBtinGateway)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"getgpio\")\n\t\t\t{\n\t\t\t\t//used by Add Manual Light/Switch dialog\n\t\t\t\troot[\"title\"] = \"GetGpio\";\n#ifdef WITH_GPIO\n\t\t\t\tstd::vector<CGpioPin> pins = CGpio::GetPinList();\n\t\t\t\tif (pins.size() == 0) {\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"result\"][0][\"idx\"] = 0;\n\t\t\t\t\troot[\"result\"][0][\"Name\"] = \"GPIO INIT ERROR\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & it : pins)\n\t\t\t\t\t{\n\t\t\t\t\t\tCGpioPin pin = it;\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = pin.GetPin();\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = pin.ToString();\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n#else\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"result\"][0][\"idx\"] = 0;\n\t\t\t\troot[\"result\"][0][\"Name\"] = \"N/A\";\n#endif\n\t\t\t}\n\t\t\telse if (cparam == \"getsysfsgpio\")\n\t\t\t{\n\t\t\t\t//used by Add Manual Light/Switch dialog\n\t\t\t\troot[\"title\"] = \"GetSysfsGpio\";\n#ifdef WITH_GPIO\n\t\t\t\tstd::vector<int> gpio_ids = CSysfsGpio::GetGpioIds();\n\t\t\t\tstd::vector<std::string> gpio_names = CSysfsGpio::GetGpioNames();\n\n\t\t\t\tif (gpio_ids.size() == 0) {\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"result\"][0][\"idx\"] = 0;\n\t\t\t\t\troot[\"result\"][0][\"Name\"] = \"No sysfs-gpio exports\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor (int ii = 0; ii < gpio_ids.size(); ii++)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = gpio_ids[ii];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = gpio_names[ii];\n\t\t\t}\n\t\t\t\t}\n#else\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"result\"][0][\"idx\"] = 0;\n\t\t\t\troot[\"result\"][0][\"Name\"] = \"N/A\";\n#endif\n\t\t\t}\n\t\t\telse if (cparam == \"getlightswitches\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetLightSwitches\";\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Type, SubType, Used, SwitchType, Options FROM DeviceStatus ORDER BY Name\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\tstd::string ID = sd[0];\n\t\t\t\t\t\tstd::string Name = sd[1];\n\t\t\t\t\t\tint Type = atoi(sd[2].c_str());\n\t\t\t\t\t\tint SubType = atoi(sd[3].c_str());\n\t\t\t\t\t\tint used = atoi(sd[4].c_str());\n\t\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sd[5].c_str());\n\t\t\t\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(sd[6]);\n\t\t\t\t\t\tbool bdoAdd = false;\n\t\t\t\t\t\tswitch (Type)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase pTypeLighting1:\n\t\t\t\t\t\tcase pTypeLighting2:\n\t\t\t\t\t\tcase pTypeLighting3:\n\t\t\t\t\t\tcase pTypeLighting4:\n\t\t\t\t\t\tcase pTypeLighting5:\n\t\t\t\t\t\tcase pTypeLighting6:\n\t\t\t\t\t\tcase pTypeFan:\n\t\t\t\t\t\tcase pTypeColorSwitch:\n\t\t\t\t\t\tcase pTypeSecurity1:\n\t\t\t\t\t\tcase pTypeSecurity2:\n\t\t\t\t\t\tcase pTypeEvohome:\n\t\t\t\t\t\tcase pTypeEvohomeRelay:\n\t\t\t\t\t\tcase pTypeCurtain:\n\t\t\t\t\t\tcase pTypeBlinds:\n\t\t\t\t\t\tcase pTypeRFY:\n\t\t\t\t\t\tcase pTypeChime:\n\t\t\t\t\t\tcase pTypeThermostat2:\n\t\t\t\t\t\tcase pTypeThermostat3:\n\t\t\t\t\t\tcase pTypeThermostat4:\n\t\t\t\t\t\tcase pTypeRemote:\n\t\t\t\t\t\tcase pTypeRadiator1:\n\t\t\t\t\t\tcase pTypeGeneralSwitch:\n\t\t\t\t\t\tcase pTypeHomeConfort:\n\t\t\t\t\t\tcase pTypeFS20:\n\t\t\t\t\t\t\tbdoAdd = true;\n\t\t\t\t\t\t\tif (!used)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbdoAdd = false;\n\t\t\t\t\t\t\t\tbool bIsSubDevice = false;\n\t\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > resultSD;\n\t\t\t\t\t\t\t\tresultSD = m_sql.safe_query(\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q')\",\n\t\t\t\t\t\t\t\t\tsd[0].c_str());\n\t\t\t\t\t\t\t\tif (resultSD.size() > 0)\n\t\t\t\t\t\t\t\t\tbdoAdd = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((Type == pTypeRadiator1) && (SubType != sTypeSmartwaresSwitchRadiator))\n\t\t\t\t\t\t\t\tbdoAdd = false;\n\t\t\t\t\t\t\tif (bdoAdd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint idx = atoi(ID.c_str());\n\t\t\t\t\t\t\t\tif (!IsIdxForUser(&session, idx))\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = RFX_Type_Desc(Type, 1);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"SubType\"] = RFX_Type_SubType_Desc(Type, SubType);\n\t\t\t\t\t\t\t\tbool bIsDimmer = (\n\t\t\t\t\t\t\t\t\t(switchtype == STYPE_Dimmer) ||\n\t\t\t\t\t\t\t\t\t(switchtype == STYPE_BlindsPercentage) ||\n\t\t\t\t\t\t\t\t\t(switchtype == STYPE_BlindsPercentageInverted) ||\n\t\t\t\t\t\t\t\t\t(switchtype == STYPE_Selector)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"IsDimmer\"] = bIsDimmer;\n\n\t\t\t\t\t\t\t\tstd::string dimmerLevels = \"none\";\n\n\t\t\t\t\t\t\t\tif (bIsDimmer)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstd::stringstream ss;\n\n\t\t\t\t\t\t\t\t\tif (switchtype == STYPE_Selector) {\n\t\t\t\t\t\t\t\t\t\tstd::map<std::string, std::string> selectorStatuses;\n\t\t\t\t\t\t\t\t\t\tGetSelectorSwitchStatuses(options, selectorStatuses);\n\t\t\t\t\t\t\t\t\t\tbool levelOffHidden = (options[\"LevelOffHidden\"] == \"true\");\n\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < (int)selectorStatuses.size(); i++) {\n\t\t\t\t\t\t\t\t\t\t\tif (levelOffHidden && (i == 0)) {\n\t\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif ((levelOffHidden && (i > 1)) || (i > 0)) {\n\t\t\t\t\t\t\t\t\t\t\t\tss << \",\";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tss << i * 10;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tint nValue = 0;\n\t\t\t\t\t\t\t\t\t\tstd::string sValue = \"\";\n\t\t\t\t\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\t\t\t\t\tint maxDimLevel = 0;\n\t\t\t\t\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\n\t\t\t\t\t\t\t\t\t\tGetLightStatus(Type, SubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\n\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i <= maxDimLevel; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (i != 0)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tss << \",\";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tss << (int)float((100.0f / float(maxDimLevel))*i);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdimmerLevels = ss.str();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"DimmerLevels\"] = dimmerLevels;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"getlightswitchesscenes\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetLightSwitchesScenes\";\n\t\t\t\tint ii = 0;\n\n\t\t\t\t//First List/Switch Devices\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Type, SubType, Used FROM DeviceStatus ORDER BY Name\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\tstd::string ID = sd[0];\n\t\t\t\t\t\tstd::string Name = sd[1];\n\t\t\t\t\t\tint Type = atoi(sd[2].c_str());\n\t\t\t\t\t\tint SubType = atoi(sd[3].c_str());\n\t\t\t\t\t\tint used = atoi(sd[4].c_str());\n\t\t\t\t\t\tif (used)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tswitch (Type)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase pTypeLighting1:\n\t\t\t\t\t\t\tcase pTypeLighting2:\n\t\t\t\t\t\t\tcase pTypeLighting3:\n\t\t\t\t\t\t\tcase pTypeLighting4:\n\t\t\t\t\t\t\tcase pTypeLighting5:\n\t\t\t\t\t\t\tcase pTypeLighting6:\n\t\t\t\t\t\t\tcase pTypeFan:\n\t\t\t\t\t\t\tcase pTypeColorSwitch:\n\t\t\t\t\t\t\tcase pTypeSecurity1:\n\t\t\t\t\t\t\tcase pTypeSecurity2:\n\t\t\t\t\t\t\tcase pTypeEvohome:\n\t\t\t\t\t\t\tcase pTypeEvohomeRelay:\n\t\t\t\t\t\t\tcase pTypeCurtain:\n\t\t\t\t\t\t\tcase pTypeBlinds:\n\t\t\t\t\t\t\tcase pTypeRFY:\n\t\t\t\t\t\t\tcase pTypeChime:\n\t\t\t\t\t\t\tcase pTypeThermostat2:\n\t\t\t\t\t\t\tcase pTypeThermostat3:\n\t\t\t\t\t\t\tcase pTypeThermostat4:\n\t\t\t\t\t\t\tcase pTypeRemote:\n\t\t\t\t\t\t\tcase pTypeGeneralSwitch:\n\t\t\t\t\t\t\tcase pTypeHomeConfort:\n\t\t\t\t\t\t\tcase pTypeFS20:\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 0;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = \"[Light/Switch] \" + Name;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase pTypeRadiator1:\n\t\t\t\t\t\t\t\tif (SubType == sTypeSmartwaresSwitchRadiator)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 0;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = \"[Light/Switch] \" + Name;\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}//end light/switches\n\n\t\t\t\t//Add Scenes\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name FROM Scenes ORDER BY Name\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\tstd::string ID = sd[0];\n\t\t\t\t\t\tstd::string Name = sd[1];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 1;\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = \"[Scene] \" + Name;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}//end light/switches\n\t\t\t}\n\t\t\telse if (cparam == \"getcamactivedevices\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetCameraActiveDevices\";\n\t\t\t\t//First List/Switch Devices\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, DevSceneType, DevSceneRowID, DevSceneWhen, DevSceneDelay FROM CamerasActiveDevices WHERE (CameraRowID=='%q') ORDER BY ID\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\tstd::string ID = sd[0];\n\t\t\t\t\t\tint DevSceneType = atoi(sd[1].c_str());\n\t\t\t\t\t\tstd::string DevSceneRowID = sd[2];\n\t\t\t\t\t\tint DevSceneWhen = atoi(sd[3].c_str());\n\t\t\t\t\t\tint DevSceneDelay = atoi(sd[4].c_str());\n\n\t\t\t\t\t\tstd::string Name = \"\";\n\t\t\t\t\t\tif (DevSceneType == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT Name FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\t\t\t\t\tDevSceneRowID.c_str());\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName = \"[Light/Switches] \" + result2[0][0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT Name FROM Scenes WHERE (ID=='%q')\",\n\t\t\t\t\t\t\t\tDevSceneRowID.c_str());\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName = \"[Scene] \" + result2[0][0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Name != \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = DevSceneType;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"DevSceneRowID\"] = DevSceneRowID;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"when\"] = DevSceneWhen;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"delay\"] = DevSceneDelay;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"addcamactivedevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string activeidx = request::findValue(&req, \"activeidx\");\n\t\t\t\tstd::string sactivetype = request::findValue(&req, \"activetype\");\n\t\t\t\tstd::string sactivewhen = request::findValue(&req, \"activewhen\");\n\t\t\t\tstd::string sactivedelay = request::findValue(&req, \"activedelay\");\n\n\t\t\t\tif (\n\t\t\t\t\t(idx.empty()) ||\n\t\t\t\t\t(activeidx.empty()) ||\n\t\t\t\t\t(sactivetype.empty()) ||\n\t\t\t\t\t(sactivewhen.empty()) ||\n\t\t\t\t\t(sactivedelay.empty())\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tint activetype = atoi(sactivetype.c_str());\n\t\t\t\tint activewhen = atoi(sactivewhen.c_str());\n\t\t\t\tint activedelay = atoi(sactivedelay.c_str());\n\n\t\t\t\t//first check if it is not already a Active Device\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"SELECT ID FROM CamerasActiveDevices WHERE (CameraRowID=='%q')\"\n\t\t\t\t\t\" AND (DevSceneType==%d) AND (DevSceneRowID=='%q')\"\n\t\t\t\t\t\" AND (DevSceneWhen==%d)\",\n\t\t\t\t\tidx.c_str(), activetype, activeidx.c_str(), activewhen);\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"AddCameraActiveDevice\";\n\t\t\t\t\t//no it is not, add it\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"INSERT INTO CamerasActiveDevices (CameraRowID, DevSceneType, DevSceneRowID, DevSceneWhen, DevSceneDelay) VALUES ('%q',%d,'%q',%d,%d)\",\n\t\t\t\t\t\tidx.c_str(),\n\t\t\t\t\t\tactivetype,\n\t\t\t\t\t\tactiveidx.c_str(),\n\t\t\t\t\t\tactivewhen,\n\t\t\t\t\t\tactivedelay\n\t\t\t\t\t);\n\t\t\t\t\tm_mainworker.m_cameras.ReloadCameras();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"deleteamactivedevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteCameraActiveDevice\";\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM CamerasActiveDevices WHERE (ID == '%q')\", idx.c_str());\n\t\t\t\tm_mainworker.m_cameras.ReloadCameras();\n\t\t\t}\n\t\t\telse if (cparam == \"deleteallactivecamdevices\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteAllCameraActiveDevices\";\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM CamerasActiveDevices WHERE (CameraRowID == '%q')\", idx.c_str());\n\t\t\t\tm_mainworker.m_cameras.ReloadCameras();\n\t\t\t}\n\t\t\telse if (cparam == \"testnotification\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string notification_Title = \"Domoticz test\";\n\t\t\t\tstd::string notification_Message = \"Domoticz test message!\";\n\t\t\t\tstd::string subsystem = request::findValue(&req, \"subsystem\");\n\n\t\t\t\tstd::string extraData = request::findValue(&req, \"extradata\");\n\n\t\t\t\tm_notifications.ConfigFromGetvars(req, false);\n\t\t\t\tif (m_notifications.SendMessage(0, std::string(\"\"), subsystem, notification_Title, notification_Message, extraData, 1, std::string(\"\"), false)) {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t}\n\t\t\t\t/* we need to reload the config, because the values that were set were only for testing */\n\t\t\t\tm_notifications.LoadConfig();\n\t\t\t}\n\t\t\telse if (cparam == \"testswitch\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string hwdid = request::findValue(&req, \"hwdid\");\n\t\t\t\tstd::string sswitchtype = request::findValue(&req, \"switchtype\");\n\t\t\t\tstd::string slighttype = request::findValue(&req, \"lighttype\");\n\n\t\t\t\tif (\n\t\t\t\t\t(hwdid.empty()) ||\n\t\t\t\t\t(sswitchtype.empty()) ||\n\t\t\t\t\t(slighttype.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sswitchtype.c_str());\n\t\t\t\tint lighttype = atoi(slighttype.c_str());\n\t\t\t\tint dtype;\n\t\t\t\tint subtype = 0;\n\t\t\t\tstd::string sunitcode;\n\t\t\t\tstd::string devid;\n\n\t\t\t\tif (lighttype == 70)\n\t\t\t\t{\n\t\t\t\t\t//EnOcean (Lighting2 with Base_ID offset)\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = sTypeAC;\n\t\t\t\t\tstd::string sgroupcode = request::findValue(&req, \"groupcode\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tint iUnitTest = atoi(sunitcode.c_str());\t//only First Rocker_ID at the moment, gives us 128 devices we can control, should be enough!\n\t\t\t\t\tif (\n\t\t\t\t\t\t(sunitcode.empty()) ||\n\t\t\t\t\t\t(sgroupcode.empty()) ||\n\t\t\t\t\t\t((iUnitTest < 1) || (iUnitTest > 128))\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tsunitcode = sgroupcode;//Button A or B\n\t\t\t\t\tCDomoticzHardwareBase *pBaseHardware = reinterpret_cast<CDomoticzHardwareBase*>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\t\t\t\t\tif (pBaseHardware == NULL)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif ((pBaseHardware->HwdType != HTYPE_EnOceanESP2) && (pBaseHardware->HwdType != HTYPE_EnOceanESP3)\n\t\t\t\t\t\t&& (pBaseHardware->HwdType != HTYPE_USBtinGateway) )\n\t\t\t\t\t\treturn;\n\t\t\t\t\tunsigned long rID = 0;\n\t\t\t\t\tif (pBaseHardware->HwdType == HTYPE_EnOceanESP2)\n\t\t\t\t\t{\n\t\t\t\t\t\tCEnOceanESP2 *pEnoceanHardware = reinterpret_cast<CEnOceanESP2 *>(pBaseHardware);\n\t\t\t\t\t\trID = pEnoceanHardware->m_id_base + iUnitTest;\n\t\t\t\t\t}\n\t\t\t\t\telse if (pBaseHardware->HwdType == HTYPE_EnOceanESP3)\n\t\t\t\t\t{\n\t\t\t\t\t\tCEnOceanESP3 *pEnoceanHardware = reinterpret_cast<CEnOceanESP3 *>(pBaseHardware);\n\t\t\t\t\t\trID = pEnoceanHardware->m_id_base + iUnitTest;\n\t\t\t\t\t}\n\t\t\t\t\telse if (pBaseHardware->HwdType == HTYPE_USBtinGateway) //Like EnOcean (Lighting2 with Base_ID offset)\n\t\t\t\t\t{\n\t\t\t\t\t\tUSBtin *pUSBtinHardware = reinterpret_cast<USBtin *>(pBaseHardware);\n\t\t\t\t\t\t//base ID calculate in the USBtinharwade dependant of the CAN Layer !\n\t\t\t\t\t\t//for exemple see MultiblocV8 layer...\n\t\t\t\t\t\trID = pUSBtinHardware->switch_id_base;\n\t\t\t\t\t\tstd::stringstream ssunitcode;\n\t\t\t\t\t\tssunitcode << iUnitTest;\n\t\t\t\t\t\tsunitcode = ssunitcode.str();\n\t\t\t\t\t}\n\t\t\t\t\t//convert to hex, and we have our ID\n\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\ts_strid << std::hex << std::uppercase << rID;\n\t\t\t\t\tdevid = s_strid.str();\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 68)\n\t\t\t\t{\n#ifdef WITH_GPIO\n\t\t\t\t\tdtype = pTypeLighting1;\n\t\t\t\t\tsubtype = sTypeIMPULS;\n\t\t\t\t\tdevid = \"0\";\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\"); //Unit code = GPIO number\n\n\t\t\t\t\tif (sunitcode.empty()) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"No GPIO number given\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tCGpio *pGpio = reinterpret_cast<CGpio *>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\t\t\t\t\tif (pGpio == NULL) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Could not retrieve GPIO hardware pointer\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (pGpio->HwdType != HTYPE_RaspberryGPIO) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Given hardware is not GPIO\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tCGpioPin *pPin = CGpio::GetPPinById(atoi(sunitcode.c_str()));\n\t\t\t\t\tif (pPin == NULL) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Given pin does not exist on this GPIO hardware\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (pPin->GetIsInput()) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Given pin is not configured for output\";\n\t\t\t\t\t\treturn;\n\t\t\t}\n#else\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"message\"] = \"GPIO support is disabled\";\n\t\t\t\t\treturn;\n#endif\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 69)\n\t\t\t\t{\n#ifdef WITH_GPIO\n\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\"); // sysfs-gpio number\n\t\t\t\t\tint unitcode = atoi(sunitcode.c_str());\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = sTypeAC;\n\t\t\t\t\tstd::string sswitchtype = request::findValue(&req, \"switchtype\");\n\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sswitchtype.c_str());\n\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tif ((id.empty()) || (sunitcode.empty()))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdevid = id;\n\n\t\t\t\t\tif (sunitcode.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"No GPIO number given\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tCSysfsGpio *pSysfsGpio = reinterpret_cast<CSysfsGpio *>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\n\t\t\t\t\tif (pSysfsGpio == NULL) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Could not retrieve SysfsGpio hardware pointer\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pSysfsGpio->HwdType != HTYPE_SysfsGpio) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Given hardware is not SysfsGpio\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n#else\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"message\"] = \"GPIO support is disabled\";\n\t\t\t\t\treturn;\n#endif\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 20)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting1;\n\t\t\t\t\tsubtype = lighttype;\n\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = shousecode;\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 30)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = lighttype - 20;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 70)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting5;\n\t\t\t\t\tsubtype = lighttype - 50;\n\t\t\t\t\tif (lighttype == 59)\n\t\t\t\t\t\tsubtype = sTypeIT;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif ((subtype != sTypeEMW100) && (subtype != sTypeLivolo) && (subtype != sTypeLivolo1to10) && (subtype != sTypeRGB432W) && (subtype != sTypeIT))\n\t\t\t\t\t\tdevid = \"00\" + id;\n\t\t\t\t\telse\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (lighttype == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Chime/ByronSX\n\t\t\t\t\t\tdtype = pTypeChime;\n\t\t\t\t\t\tsubtype = sTypeByronSX;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str()) - 1;\n\t\t\t\t\t\tswitch (iUnitCode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tiUnitCode = chime_sound0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tiUnitCode = chime_sound1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tiUnitCode = chime_sound2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tiUnitCode = chime_sound3;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\tiUnitCode = chime_sound4;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\tiUnitCode = chime_sound5;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\tiUnitCode = chime_sound6;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\tiUnitCode = chime_sound7;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 101)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Curtain Harrison\n\t\t\t\t\t\tdtype = pTypeCurtain;\n\t\t\t\t\t\tsubtype = sTypeHarrison;\n\t\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = shousecode;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 102)\n\t\t\t\t\t{\n\t\t\t\t\t\t//RFY\n\t\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\t\tsubtype = sTypeRFY;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 103)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Meiantech\n\t\t\t\t\t\tdtype = pTypeSecurity1;\n\t\t\t\t\t\tsubtype = sTypeMeiantech;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 104)\n\t\t\t\t\t{\n\t\t\t\t\t\t//HE105\n\t\t\t\t\t\tdtype = pTypeThermostat2;\n\t\t\t\t\t\tsubtype = sTypeHE105;\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (sunitcode.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t//convert to hex, and we have our Unit Code\n\t\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\t\ts_strid << std::hex << std::uppercase << sunitcode;\n\t\t\t\t\t\tint iUnitCode;\n\t\t\t\t\t\ts_strid >> iUnitCode;\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tdevid = \"1\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 105)\n\t\t\t\t\t{\n\t\t\t\t\t\t//ASA\n\t\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\t\tsubtype = sTypeASA;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 106)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Blyss\n\t\t\t\t\t\tdtype = pTypeLighting6;\n\t\t\t\t\t\tsubtype = sTypeBlyss;\n\t\t\t\t\t\tstd::string sgroupcode = request::findValue(&req, \"groupcode\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(sgroupcode.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty()) ||\n\t\t\t\t\t\t\t(id.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id + sgroupcode;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 107)\n\t\t\t\t\t{\n\t\t\t\t\t\t//RFY2\n\t\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\t\tsubtype = sTypeRFY2;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if ((lighttype >= 200) && (lighttype < 300))\n\t\t\t\t\t{\n\t\t\t\t\t\tdtype = pTypeBlinds;\n\t\t\t\t\t\tsubtype = lighttype - 200;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str());\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 301)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Smartwares Radiator\n\t\t\t\t\t\tdtype = pTypeRadiator1;\n\t\t\t\t\t\tsubtype = sTypeSmartwaresSwitchRadiator;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 302)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Home Confort\n\t\t\t\t\t\tdtype = pTypeHomeConfort;\n\t\t\t\t\t\tsubtype = sTypeHomeConfortTEL010;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\n\t\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str());\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tsprintf(szTmp, \"%02X\", atoi(shousecode.c_str()));\n\t\t\t\t\t\tshousecode = szTmp;\n\t\t\t\t\t\tdevid = id + shousecode;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 303)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Selector Switch\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchTypeSelector;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 304)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Itho CVE RFT\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeItho;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 305)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Lucci Air/DC\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeLucciAir;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 306)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Lucci Air DC\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeLucciAirDC;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 307)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Westinghouse\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeWestinghouse;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 400) {\n\t\t\t\t\t\t//Openwebnet Bus Blinds\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchBlindsT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 401) {\n\t\t\t\t\t\t//Openwebnet Bus Lights\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchLightT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 402)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Bus Auxiliary\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchAuxiliaryT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 403) {\n\t\t\t\t\t\t//Openwebnet Zigbee Blinds\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchBlindsT2;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 404) {\n\t\t\t\t\t\t//Light Openwebnet Zigbee\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchLightT2;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if ((lighttype == 405) || (lighttype == 406)) {\n\t\t\t\t\t\t// Openwebnet Dry Contact / IR Detection\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchContactT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// ----------- If needed convert to GeneralSwitch type (for o.a. RFlink) -----------\n\t\t\t\tCDomoticzHardwareBase *pBaseHardware = reinterpret_cast<CDomoticzHardwareBase*>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\t\t\t\tif (pBaseHardware != NULL)\n\t\t\t\t{\n\t\t\t\t\tif ((pBaseHardware->HwdType == HTYPE_RFLINKUSB) || (pBaseHardware->HwdType == HTYPE_RFLINKTCP)) {\n\t\t\t\t\t\tConvertToGeneralSwitchType(devid, dtype, subtype);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// -----------------------------------------------\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"message\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"TestSwitch\";\n\t\t\t\tstd::vector<std::string> sd;\n\n\t\t\t\tsd.push_back(hwdid);\n\t\t\t\tsd.push_back(devid);\n\t\t\t\tsd.push_back(sunitcode);\n\t\t\t\tsprintf(szTmp, \"%d\", dtype);\n\t\t\t\tsd.push_back(szTmp);\n\t\t\t\tsprintf(szTmp, \"%d\", subtype);\n\t\t\t\tsd.push_back(szTmp);\n\t\t\t\tsprintf(szTmp, \"%d\", switchtype);\n\t\t\t\tsd.push_back(szTmp);\n\t\t\t\tsd.push_back(\"\"); //AddjValue2\n\t\t\t\tsd.push_back(\"\"); //nValue\n\t\t\t\tsd.push_back(\"\"); //sValue\n\t\t\t\tsd.push_back(\"\"); //Name\n\t\t\t\tsd.push_back(\"\"); //Options\n\n\t\t\t\tstd::string switchcmd = \"On\";\n\t\t\t\tint level = 0;\n\t\t\t\tif (lighttype == 70)\n\t\t\t\t{\n\t\t\t\t\t//Special EnOcean case, if it is a dimmer, set a dim value\n\t\t\t\t\tif (switchtype == STYPE_Dimmer)\n\t\t\t\t\t\tlevel = 5;\n\t\t\t\t}\n\t\t\t\tm_mainworker.SwitchLightInt(sd, switchcmd, level, NoColor, true);\n\t\t\t}\n\t\t\telse if (cparam == \"addswitch\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string hwdid = request::findValue(&req, \"hwdid\");\n\t\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\t\tstd::string sswitchtype = request::findValue(&req, \"switchtype\");\n\t\t\t\tstd::string slighttype = request::findValue(&req, \"lighttype\");\n\t\t\t\tstd::string maindeviceidx = request::findValue(&req, \"maindeviceidx\");\n\t\t\t\tstd::string deviceoptions;\n\n\t\t\t\tif (\n\t\t\t\t\t(hwdid.empty()) ||\n\t\t\t\t\t(sswitchtype.empty()) ||\n\t\t\t\t\t(slighttype.empty()) ||\n\t\t\t\t\t(name.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sswitchtype.c_str());\n\t\t\t\tint lighttype = atoi(slighttype.c_str());\n\t\t\t\tint dtype = 0;\n\t\t\t\tint subtype = 0;\n\t\t\t\tstd::string sunitcode;\n\t\t\t\tstd::string devid;\n\n#ifdef ENABLE_PYTHON\n\t\t\t\t//check if HW is plugin\n\t\t\t\t{\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Type FROM Hardware WHERE (ID == '%q')\", hwdid.c_str());\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\t_eHardwareTypes Type = (_eHardwareTypes)atoi(sd[0].c_str());\n\t\t\t\t\t\tif (Type == HTYPE_PythonPlugin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Not allowed to add device to plugin HW (plugin framework does not use key column \"ID\" but instead uses column \"unit\" as key)\n\t\t\t\t\t\t\t_log.Log(LOG_ERROR, \"CWebServer::HandleCommand addswitch: Not allowed to add device owned by plugin %u!\", atoi(hwdid.c_str()));\n\t\t\t\t\t\t\troot[\"message\"] = \"Not allowed to add switch to plugin HW!\";\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\n\t\t\t\tif (lighttype == 70)\n\t\t\t\t{\n\t\t\t\t\t//EnOcean (Lighting2 with Base_ID offset)\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = sTypeAC;\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tstd::string sgroupcode = request::findValue(&req, \"groupcode\");\n\t\t\t\t\tint iUnitTest = atoi(sunitcode.c_str());\t//gives us 128 devices we can control, should be enough!\n\t\t\t\t\tif (\n\t\t\t\t\t\t(sunitcode.empty()) ||\n\t\t\t\t\t\t(sgroupcode.empty()) ||\n\t\t\t\t\t\t((iUnitTest < 1) || (iUnitTest > 128))\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tsunitcode = sgroupcode;//Button A/B\n\t\t\t\t\tCDomoticzHardwareBase *pBaseHardware = reinterpret_cast<CDomoticzHardwareBase*>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\t\t\t\t\tif (pBaseHardware == NULL)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif ((pBaseHardware->HwdType != HTYPE_EnOceanESP2) && (pBaseHardware->HwdType != HTYPE_EnOceanESP3)\n\t\t\t\t\t\t&& (pBaseHardware->HwdType != HTYPE_USBtinGateway) )\n\t\t\t\t\t\treturn;\n\t\t\t\t\tunsigned long rID = 0;\n\t\t\t\t\tif (pBaseHardware->HwdType == HTYPE_EnOceanESP2)\n\t\t\t\t\t{\n\t\t\t\t\t\tCEnOceanESP2 *pEnoceanHardware = reinterpret_cast<CEnOceanESP2*>(pBaseHardware);\n\t\t\t\t\t\tif (pEnoceanHardware->m_id_base == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"message\"] = \"BaseID not found, is the hardware running?\";\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trID = pEnoceanHardware->m_id_base + iUnitTest;\n\t\t\t\t\t}\n\t\t\t\t\telse if (pBaseHardware->HwdType == HTYPE_EnOceanESP3)\n\t\t\t\t\t{\n\t\t\t\t\t\tCEnOceanESP3 *pEnoceanHardware = reinterpret_cast<CEnOceanESP3*>(pBaseHardware);\n\t\t\t\t\t\tif (pEnoceanHardware->m_id_base == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"message\"] = \"BaseID not found, is the hardware running?\";\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trID = pEnoceanHardware->m_id_base + iUnitTest;\n\t\t\t\t\t}\n\t\t\t\t\telse if (pBaseHardware->HwdType == HTYPE_USBtinGateway)\n\t\t\t\t\t{\n\t\t\t\t\t\tUSBtin *pUSBtinHardware = reinterpret_cast<USBtin *>(pBaseHardware);\n\t\t\t\t\t\trID = pUSBtinHardware->switch_id_base;\n\t\t\t\t\t\tstd::stringstream ssunitcode;\n\t\t\t\t\t\tssunitcode << iUnitTest;\n\t\t\t\t\t\tsunitcode = ssunitcode.str();\n\t\t\t\t\t}\n\t\t\t\t\t//convert to hex, and we have our ID\n\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\ts_strid << std::hex << std::uppercase << rID;\n\t\t\t\t\tdevid = s_strid.str();\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 68)\n\t\t\t\t{\n#ifdef WITH_GPIO\n\t\t\t\t\tdtype = pTypeLighting1;\n\t\t\t\t\tsubtype = sTypeIMPULS;\n\t\t\t\t\tdevid = \"0\";\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\"); //Unit code = GPIO number\n\n\t\t\t\t\tif (sunitcode.empty()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tCGpio *pGpio = reinterpret_cast<CGpio *>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\t\t\t\t\tif (pGpio == NULL) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (pGpio->HwdType != HTYPE_RaspberryGPIO) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tCGpioPin *pPin = CGpio::GetPPinById(atoi(sunitcode.c_str()));\n\t\t\t\t\tif (pPin == NULL) {\n\t\t\t\t\t\treturn;\n\t\t\t}\n#else\n\t\t\t\t\treturn;\n#endif\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 69)\n\t\t\t\t{\n#ifdef WITH_GPIO\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = sTypeAC;\n\t\t\t\t\tdevid = \"0\";\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\"); // sysfs-gpio number\n\t\t\t\t\tint unitcode = atoi(sunitcode.c_str());\n\t\t\t\t\tstd::string sswitchtype = request::findValue(&req, \"switchtype\");\n\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sswitchtype.c_str());\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tCSysfsGpio::RequestDbUpdate(unitcode);\n\n\t\t\t\t\tif ((id.empty()) || (sunitcode.empty()))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdevid = id;\n\n\t\t\t\t\tCSysfsGpio *pSysfsGpio = reinterpret_cast<CSysfsGpio *>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\n\t\t\t\t\tif ((pSysfsGpio == NULL) || (pSysfsGpio->HwdType != HTYPE_SysfsGpio))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n#else\n\t\t\t\t\treturn;\n#endif\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 20)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting1;\n\t\t\t\t\tsubtype = lighttype;\n\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = shousecode;\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 30)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = lighttype - 20;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 70)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting5;\n\t\t\t\t\tsubtype = lighttype - 50;\n\t\t\t\t\tif (lighttype == 59)\n\t\t\t\t\t\tsubtype = sTypeIT;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif ((subtype != sTypeEMW100) && (subtype != sTypeLivolo) && (subtype != sTypeLivolo1to10) && (subtype != sTypeRGB432W) && (subtype != sTypeLightwaveRF) && (subtype != sTypeIT))\n\t\t\t\t\t\tdevid = \"00\" + id;\n\t\t\t\t\telse\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 101)\n\t\t\t\t{\n\t\t\t\t\t//Curtain Harrison\n\t\t\t\t\tdtype = pTypeCurtain;\n\t\t\t\t\tsubtype = sTypeHarrison;\n\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = shousecode;\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 102)\n\t\t\t\t{\n\t\t\t\t\t//RFY\n\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\tsubtype = sTypeRFY;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 103)\n\t\t\t\t{\n\t\t\t\t\t//Meiantech\n\t\t\t\t\tdtype = pTypeSecurity1;\n\t\t\t\t\tsubtype = sTypeMeiantech;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 104)\n\t\t\t\t{\n\t\t\t\t\t//HE105\n\t\t\t\t\tdtype = pTypeThermostat2;\n\t\t\t\t\tsubtype = sTypeHE105;\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (sunitcode.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\t//convert to hex, and we have our Unit Code\n\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\ts_strid << std::hex << std::uppercase << sunitcode;\n\t\t\t\t\tint iUnitCode;\n\t\t\t\t\ts_strid >> iUnitCode;\n\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\tdevid = \"1\";\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 105)\n\t\t\t\t{\n\t\t\t\t\t//ASA\n\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\tsubtype = sTypeASA;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 106)\n\t\t\t\t{\n\t\t\t\t\t//Blyss\n\t\t\t\t\tdtype = pTypeLighting6;\n\t\t\t\t\tsubtype = sTypeBlyss;\n\t\t\t\t\tstd::string sgroupcode = request::findValue(&req, \"groupcode\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(sgroupcode.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty()) ||\n\t\t\t\t\t\t(id.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id + sgroupcode;\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 107)\n\t\t\t\t{\n\t\t\t\t\t//RFY2\n\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\tsubtype = sTypeRFY2;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (lighttype == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Chime/ByronSX\n\t\t\t\t\t\tdtype = pTypeChime;\n\t\t\t\t\t\tsubtype = sTypeByronSX;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str()) - 1;\n\t\t\t\t\t\tswitch (iUnitCode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tiUnitCode = chime_sound0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tiUnitCode = chime_sound1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tiUnitCode = chime_sound2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tiUnitCode = chime_sound3;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\tiUnitCode = chime_sound4;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\tiUnitCode = chime_sound5;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\tiUnitCode = chime_sound6;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\tiUnitCode = chime_sound7;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if ((lighttype >= 200) && (lighttype < 300))\n\t\t\t\t\t{\n\t\t\t\t\t\tdtype = pTypeBlinds;\n\t\t\t\t\t\tsubtype = lighttype - 200;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str());\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 301)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Smartwares Radiator\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\n\t\t\t\t\t\t//For this device, we will also need to add a Radiator type, do that first\n\t\t\t\t\t\tdtype = pTypeRadiator1;\n\t\t\t\t\t\tsubtype = sTypeSmartwares;\n\n\t\t\t\t\t\t//check if switch is unique\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Name FROM DeviceStatus WHERE (HardwareID=='%q' AND DeviceID=='%q' AND Unit=='%q' AND Type==%d AND SubType==%d)\",\n\t\t\t\t\t\t\thwdid.c_str(), devid.c_str(), sunitcode.c_str(), dtype, subtype);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"message\"] = \"Switch already exists!\";\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbool bActEnabledState = m_sql.m_bAcceptNewHardware;\n\t\t\t\t\t\tm_sql.m_bAcceptNewHardware = true;\n\t\t\t\t\t\tstd::string devname;\n\t\t\t\t\t\tm_sql.UpdateValue(atoi(hwdid.c_str()), devid.c_str(), atoi(sunitcode.c_str()), dtype, subtype, 0, -1, 0, \"20.5\", devname);\n\t\t\t\t\t\tm_sql.m_bAcceptNewHardware = bActEnabledState;\n\n\t\t\t\t\t\t//set name and switchtype\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT ID FROM DeviceStatus WHERE (HardwareID=='%q' AND DeviceID=='%q' AND Unit=='%q' AND Type==%d AND SubType==%d)\",\n\t\t\t\t\t\t\thwdid.c_str(), devid.c_str(), sunitcode.c_str(), dtype, subtype);\n\t\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"message\"] = \"Error finding switch in Database!?!?\";\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstd::string ID = result[0][0];\n\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"UPDATE DeviceStatus SET Used=1, Name='%q', SwitchType=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\t\tname.c_str(), switchtype, ID.c_str());\n\n\t\t\t\t\t\t//Now continue to insert the switch\n\t\t\t\t\t\tdtype = pTypeRadiator1;\n\t\t\t\t\t\tsubtype = sTypeSmartwaresSwitchRadiator;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 302)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Home Confort\n\t\t\t\t\t\tdtype = pTypeHomeConfort;\n\t\t\t\t\t\tsubtype = sTypeHomeConfortTEL010;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\n\t\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str());\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tsprintf(szTmp, \"%02X\", atoi(shousecode.c_str()));\n\t\t\t\t\t\tshousecode = szTmp;\n\t\t\t\t\t\tdevid = id + shousecode;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 303)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Selector Switch\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchTypeSelector;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = \"0\" + id;\n\t\t\t\t\t\tswitchtype = STYPE_Selector;\n\t\t\t\t\t\tif (!deviceoptions.empty()) {\n\t\t\t\t\t\t\tdeviceoptions.append(\";\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeviceoptions.append(\"SelectorStyle:0;LevelNames:Off|Level1|Level2|Level3\");\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 304)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Itho CVE RFT\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeItho;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 305)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Lucci Air\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeLucciAir;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 306)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Lucci Air DC\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeLucciAirDC;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 307)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Westinghouse\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeWestinghouse;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 400)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Bus Blinds\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchBlindsT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 401)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Bus Lights\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchLightT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 402)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Bus Auxiliary\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchAuxiliaryT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 403)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Zigbee Blinds\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchBlindsT2;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 404)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Zigbee Lights\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchLightT2;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if ((lighttype == 405) || (lighttype == 406))\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Dry Contact / IR Detection\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchContactT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//check if switch is unique\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"SELECT Name FROM DeviceStatus WHERE (HardwareID=='%q' AND DeviceID=='%q' AND Unit=='%q' AND Type==%d AND SubType==%d)\",\n\t\t\t\t\thwdid.c_str(), devid.c_str(), sunitcode.c_str(), dtype, subtype);\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\troot[\"message\"] = \"Switch already exists!\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// ----------- If needed convert to GeneralSwitch type (for o.a. RFlink) -----------\n\t\t\t\tCDomoticzHardwareBase *pBaseHardware = m_mainworker.GetHardware(atoi(hwdid.c_str()));\n\t\t\t\tif (pBaseHardware != NULL)\n\t\t\t\t{\n\t\t\t\t\tif ((pBaseHardware->HwdType == HTYPE_RFLINKUSB) || (pBaseHardware->HwdType == HTYPE_RFLINKTCP)) {\n\t\t\t\t\t\tConvertToGeneralSwitchType(devid, dtype, subtype);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// -----------------------------------------------\n\n\t\t\t\tbool bActEnabledState = m_sql.m_bAcceptNewHardware;\n\t\t\t\tm_sql.m_bAcceptNewHardware = true;\n\t\t\t\tstd::string devname;\n\t\t\t\tm_sql.UpdateValue(atoi(hwdid.c_str()), devid.c_str(), atoi(sunitcode.c_str()), dtype, subtype, 0, -1, 0, devname);\n\t\t\t\tm_sql.m_bAcceptNewHardware = bActEnabledState;\n\n\t\t\t\t//set name and switchtype\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"SELECT ID FROM DeviceStatus WHERE (HardwareID=='%q' AND DeviceID=='%q' AND Unit=='%q' AND Type==%d AND SubType==%d)\",\n\t\t\t\t\thwdid.c_str(), devid.c_str(), sunitcode.c_str(), dtype, subtype);\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\troot[\"message\"] = \"Error finding switch in Database!?!?\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstd::string ID = result[0][0];\n\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE DeviceStatus SET Used=1, Name='%q', SwitchType=%d WHERE (ID == '%q')\",\n\t\t\t\t\tname.c_str(), switchtype, ID.c_str());\n\t\t\t\tm_mainworker.m_eventsystem.GetCurrentStates();\n\n\t\t\t\t//Set device options\n\t\t\t\tm_sql.SetDeviceOptions(atoi(ID.c_str()), m_sql.BuildDeviceOptions(deviceoptions, false));\n\n\t\t\t\tif (maindeviceidx != \"\")\n\t\t\t\t{\n\t\t\t\t\tif (maindeviceidx != ID)\n\t\t\t\t\t{\n\t\t\t\t\t\t//this is a sub device for another light/switch\n\t\t\t\t\t\t//first check if it is not already a sub device\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q') AND (ParentID =='%q')\",\n\t\t\t\t\t\t\tID.c_str(), maindeviceidx.c_str());\n\t\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//no it is not, add it\n\t\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\t\"INSERT INTO LightSubDevices (DeviceRowID, ParentID) VALUES ('%q','%q')\",\n\t\t\t\t\t\t\t\tID.c_str(),\n\t\t\t\t\t\t\t\tmaindeviceidx.c_str()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"AddSwitch\";\n\t\t\t}\n\t\t\telse if (cparam == \"getnotificationtypes\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\t//First get Device Type/SubType\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType, SwitchType FROM DeviceStatus WHERE (ID == '%q')\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetNotificationTypes\";\n\t\t\t\tunsigned char dType = atoi(result[0][0].c_str());\n\t\t\t\tunsigned char dSubType = atoi(result[0][1].c_str());\n\t\t\t\tunsigned char switchtype = atoi(result[0][2].c_str());\n\n\t\t\t\tint ii = 0;\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeLighting1) ||\n\t\t\t\t\t(dType == pTypeLighting2) ||\n\t\t\t\t\t(dType == pTypeLighting3) ||\n\t\t\t\t\t(dType == pTypeLighting4) ||\n\t\t\t\t\t(dType == pTypeLighting5) ||\n\t\t\t\t\t(dType == pTypeLighting6) ||\n\t\t\t\t\t(dType == pTypeColorSwitch) ||\n\t\t\t\t\t(dType == pTypeSecurity1) ||\n\t\t\t\t\t(dType == pTypeSecurity2) ||\n\t\t\t\t\t(dType == pTypeEvohome) ||\n\t\t\t\t\t(dType == pTypeEvohomeRelay) ||\n\t\t\t\t\t(dType == pTypeCurtain) ||\n\t\t\t\t\t(dType == pTypeBlinds) ||\n\t\t\t\t\t(dType == pTypeRFY) ||\n\t\t\t\t\t(dType == pTypeChime) ||\n\t\t\t\t\t(dType == pTypeThermostat2) ||\n\t\t\t\t\t(dType == pTypeThermostat3) ||\n\t\t\t\t\t(dType == pTypeThermostat4) ||\n\t\t\t\t\t(dType == pTypeRemote) ||\n\t\t\t\t\t(dType == pTypeGeneralSwitch) ||\n\t\t\t\t\t(dType == pTypeHomeConfort) ||\n\t\t\t\t\t(dType == pTypeFS20) ||\n\t\t\t\t\t((dType == pTypeRadiator1) && (dSubType == sTypeSmartwaresSwitchRadiator))\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tif (switchtype != STYPE_PushOff)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_SWITCH_ON;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_SWITCH_ON, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_SWITCH_ON, 1);\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\tif (switchtype != STYPE_PushOn)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_SWITCH_OFF;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_SWITCH_OFF, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_SWITCH_OFF, 1);\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\tif (switchtype == STYPE_Media)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT HardwareID FROM DeviceStatus WHERE (ID=='%q')\", idx.c_str());\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string hdwid = result[0][0];\n\t\t\t\t\t\t\tCDomoticzHardwareBase *pBaseHardware = reinterpret_cast<CDomoticzHardwareBase*>(m_mainworker.GetHardware(atoi(hdwid.c_str())));\n\t\t\t\t\t\t\tif (pBaseHardware != NULL) {\n\t\t\t\t\t\t\t\t_eHardwareTypes type = pBaseHardware->HwdType;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_PAUSED;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_PAUSED, 0);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_PAUSED, 1);\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\tif (type == HTYPE_Kodi) {\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AUDIO;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AUDIO, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AUDIO, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_VIDEO;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_VIDEO, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_VIDEO, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_PHOTO;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_PHOTO, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_PHOTO, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (type == HTYPE_LogitechMediaServer) {\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_PLAYING;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_PLAYING, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_PLAYING, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_STOPPED;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_STOPPED, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_STOPPED, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (type == HTYPE_HEOS) {\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_PLAYING;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_PLAYING, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_PLAYING, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_STOPPED;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_STOPPED, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_STOPPED, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(\n\t\t\t\t\t(dType == pTypeTEMP) ||\n\t\t\t\t\t\t(dType == pTypeTEMP_HUM) ||\n\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t(dType == pTypeEvohomeZone) ||\n\t\t\t\t\t\t(dType == pTypeEvohomeWater) ||\n\t\t\t\t\t\t(dType == pTypeThermostat1) ||\n\t\t\t\t\t\t(dType == pTypeRego6XXTemp) ||\n\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp))\n\t\t\t\t\t\t) ||\n\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp)) ||\n\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSystemTemp))\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TEMPERATURE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TEMPERATURE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TEMPERATURE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeHUM) ||\n\t\t\t\t\t(dType == pTypeTEMP_HUM) ||\n\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_HUMIDITY;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_HUMIDITY, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_HUMIDITY, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeTEMP_HUM) ||\n\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_DEWPOINT;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_DEWPOINT, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_DEWPOINT, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeRAIN)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_RAIN;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_RAIN, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_RAIN, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeWIND)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_WIND;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_WIND, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_WIND, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeUV)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_UV;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_UV, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_UV, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t(dType == pTypeBARO) ||\n\t\t\t\t\t(dType == pTypeTEMP_BARO)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_BARO;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_BARO, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_BARO, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t((dType == pTypeRFXMeter) && (dSubType == sTypeRFXMeterCount)) ||\n\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCounterIncremental)) ||\n\t\t\t\t\t(dType == pTypeYouLess) ||\n\t\t\t\t\t((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXCounter))\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tif ((switchtype == MTYPE_ENERGY) || (switchtype == MTYPE_ENERGY_GENERATED))\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYENERGY;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYENERGY, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYENERGY, 1);\n\t\t\t\t\t}\n\t\t\t\t\telse if (switchtype == MTYPE_GAS)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYGAS;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 1);\n\t\t\t\t\t}\n\t\t\t\t\telse if (switchtype == MTYPE_COUNTER)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYCOUNTER;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYCOUNTER, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYCOUNTER, 1);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//water (same as gas)\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYGAS;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 1);\n\t\t\t\t\t}\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeYouLess)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeAirQuality)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\telse if ((dType == pTypeGeneral) && ((dSubType == sTypeSoilMoisture) || (dSubType == sTypeLeafWetness)))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeVisibility))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeDistance))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeVoltage))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypePressure))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeLux)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeWEIGHT)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeUsage)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeENERGY) ||\n\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeKwh))\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypePOWER)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeCURRENT) && (dSubType == sTypeELEC1))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE1;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE1, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE1, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE2;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE2, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE2, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE3;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE3, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE3, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeCURRENTENERGY) && (dSubType == sTypeELEC4))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE1;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE1, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE1, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE2;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE2, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE2, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE3;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE3, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE3, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYENERGY;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYENERGY, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYENERGY, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeP1Gas)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYGAS;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TEMPERATURE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TEMPERATURE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TEMPERATURE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeEvohomeZone)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TEMPERATURE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_SETPOINT, 0); //FIXME NTYPE_SETPOINT implementation?\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_SETPOINT, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeRFXSensor) && ((dSubType == sTypeRFXSensorAD) || (dSubType == sTypeRFXSensorVolt)))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypePercentage))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_PERCENTAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_PERCENTAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_PERCENTAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeWaterflow))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeCustom))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeFan))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_RPM;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_RPM, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_RPM, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeAlert))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeZWaveAlarm))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_VALUE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_VALUE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_VALUE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXStatus))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_SWITCH_ON;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_SWITCH_ON, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_SWITCH_ON, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_SWITCH_OFF;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_SWITCH_OFF, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_SWITCH_OFF, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (!IsLightOrSwitch(dType, dSubType))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_LASTUPDATE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_LASTUPDATE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_LASTUPDATE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"addnotification\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string stype = request::findValue(&req, \"ttype\");\n\t\t\t\tstd::string swhen = request::findValue(&req, \"twhen\");\n\t\t\t\tstd::string svalue = request::findValue(&req, \"tvalue\");\n\t\t\t\tstd::string scustommessage = request::findValue(&req, \"tmsg\");\n\t\t\t\tstd::string sactivesystems = request::findValue(&req, \"tsystems\");\n\t\t\t\tstd::string spriority = request::findValue(&req, \"tpriority\");\n\t\t\t\tstd::string ssendalways = request::findValue(&req, \"tsendalways\");\n\t\t\t\tstd::string srecovery = (request::findValue(&req, \"trecovery\") == \"true\") ? \"1\" : \"0\";\n\n\t\t\t\tif ((stype.empty()) || (swhen.empty()) || (svalue.empty()) || (spriority.empty()) || (ssendalways.empty()) || (srecovery.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\t_eNotificationTypes ntype = (_eNotificationTypes)atoi(stype.c_str());\n\t\t\t\tstd::string ttype = Notification_Type_Desc(ntype, 1);\n\t\t\t\tif (\n\t\t\t\t\t(ntype == NTYPE_SWITCH_ON) ||\n\t\t\t\t\t(ntype == NTYPE_SWITCH_OFF) ||\n\t\t\t\t\t(ntype == NTYPE_DEWPOINT)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tif ((ntype == NTYPE_SWITCH_ON) && (swhen == \"2\")) { // '='\n\t\t\t\t\t\tunsigned char twhen = '=';\n\t\t\t\t\t\tsprintf(szTmp, \"%s;%c;%s\", ttype.c_str(), twhen, svalue.c_str());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tstrcpy(szTmp, ttype.c_str());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstd::string twhen;\n\t\t\t\t\tif (swhen == \"0\")\n\t\t\t\t\t\ttwhen = \">\";\n\t\t\t\t\telse if (swhen == \"1\")\n\t\t\t\t\t\ttwhen = \">=\";\n\t\t\t\t\telse if (swhen == \"2\")\n\t\t\t\t\t\ttwhen = \"=\";\n\t\t\t\t\telse if (swhen == \"3\")\n\t\t\t\t\t\ttwhen = \"!=\";\n\t\t\t\t\telse if (swhen == \"4\")\n\t\t\t\t\t\ttwhen = \"<=\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttwhen = \"<\";\n\t\t\t\t\tsprintf(szTmp, \"%s;%s;%s;%s\", ttype.c_str(), twhen.c_str(), svalue.c_str(), srecovery.c_str());\n\t\t\t\t}\n\t\t\t\tint priority = atoi(spriority.c_str());\n\t\t\t\tbool bOK = m_notifications.AddNotification(idx, szTmp, scustommessage, sactivesystems, priority, (ssendalways == \"true\") ? true : false);\n\t\t\t\tif (bOK) {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"AddNotification\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"updatenotification\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string devidx = request::findValue(&req, \"devidx\");\n\t\t\t\tif ((idx.empty()) || (devidx.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string stype = request::findValue(&req, \"ttype\");\n\t\t\t\tstd::string swhen = request::findValue(&req, \"twhen\");\n\t\t\t\tstd::string svalue = request::findValue(&req, \"tvalue\");\n\t\t\t\tstd::string scustommessage = request::findValue(&req, \"tmsg\");\n\t\t\t\tstd::string sactivesystems = request::findValue(&req, \"tsystems\");\n\t\t\t\tstd::string spriority = request::findValue(&req, \"tpriority\");\n\t\t\t\tstd::string ssendalways = request::findValue(&req, \"tsendalways\");\n\t\t\t\tstd::string srecovery = (request::findValue(&req, \"trecovery\") == \"true\") ? \"1\" : \"0\";\n\n\t\t\t\tif ((stype.empty()) || (swhen.empty()) || (svalue.empty()) || (spriority.empty()) || (ssendalways.empty()) || srecovery.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"UpdateNotification\";\n\n\t\t\t\tstd::string recoverymsg;\n\t\t\t\tif ((srecovery == \"1\") && (m_notifications.CustomRecoveryMessage(strtoull(idx.c_str(), NULL, 0), recoverymsg, true)))\n\t\t\t\t{\n\t\t\t\t\tscustommessage.append(\";;\");\n\t\t\t\t\tscustommessage.append(recoverymsg);\n\t\t\t\t}\n\t\t\t\t//delete old record\n\t\t\t\tm_notifications.RemoveNotification(idx);\n\n\t\t\t\t_eNotificationTypes ntype = (_eNotificationTypes)atoi(stype.c_str());\n\t\t\t\tstd::string ttype = Notification_Type_Desc(ntype, 1);\n\t\t\t\tif (\n\t\t\t\t\t(ntype == NTYPE_SWITCH_ON) ||\n\t\t\t\t\t(ntype == NTYPE_SWITCH_OFF) ||\n\t\t\t\t\t(ntype == NTYPE_DEWPOINT)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tif ((ntype == NTYPE_SWITCH_ON) && (swhen == \"2\")) { // '='\n\t\t\t\t\t\tunsigned char twhen = '=';\n\t\t\t\t\t\tsprintf(szTmp, \"%s;%c;%s\", ttype.c_str(), twhen, svalue.c_str());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tstrcpy(szTmp, ttype.c_str());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstd::string twhen;\n\t\t\t\t\tif (swhen == \"0\")\n\t\t\t\t\t\ttwhen = \">\";\n\t\t\t\t\telse if (swhen == \"1\")\n\t\t\t\t\t\ttwhen = \">=\";\n\t\t\t\t\telse if (swhen == \"2\")\n\t\t\t\t\t\ttwhen = \"=\";\n\t\t\t\t\telse if (swhen == \"3\")\n\t\t\t\t\t\ttwhen = \"!=\";\n\t\t\t\t\telse if (swhen == \"4\")\n\t\t\t\t\t\ttwhen = \"<=\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttwhen = \"<\";\n\t\t\t\t\tsprintf(szTmp, \"%s;%s;%s;%s\", ttype.c_str(), twhen.c_str(), svalue.c_str(), srecovery.c_str());\n\t\t\t\t}\n\t\t\t\tint priority = atoi(spriority.c_str());\n\t\t\t\tm_notifications.AddNotification(devidx, szTmp, scustommessage, sactivesystems, priority, (ssendalways == \"true\") ? true : false);\n\t\t\t}\n\t\t\telse if (cparam == \"deletenotification\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteNotification\";\n\n\t\t\t\tm_notifications.RemoveNotification(idx);\n\t\t\t}\n\t\t\telse if (cparam == \"switchdeviceorder\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx1 = request::findValue(&req, \"idx1\");\n\t\t\t\tstd::string idx2 = request::findValue(&req, \"idx2\");\n\t\t\t\tif ((idx1.empty()) || (idx2.empty()))\n\t\t\t\t\treturn;\n\t\t\t\tstd::string sroomid = request::findValue(&req, \"roomid\");\n\t\t\t\tint roomid = atoi(sroomid.c_str());\n\n\t\t\t\tstd::string Order1, Order2;\n\t\t\t\tif (roomid == 0)\n\t\t\t\t{\n\t\t\t\t\t//get device order 1\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM DeviceStatus WHERE (ID == '%q')\",\n\t\t\t\t\t\tidx1.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\tOrder1 = result[0][0];\n\n\t\t\t\t\t//get device order 2\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM DeviceStatus WHERE (ID == '%q')\",\n\t\t\t\t\t\tidx2.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\tOrder2 = result[0][0];\n\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"SwitchDeviceOrder\";\n\n\t\t\t\t\tif (atoi(Order1.c_str()) < atoi(Order2.c_str()))\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"UPDATE DeviceStatus SET [Order] = [Order]+1 WHERE ([Order] >= '%q' AND [Order] < '%q')\",\n\t\t\t\t\t\t\tOrder1.c_str(), Order2.c_str());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"UPDATE DeviceStatus SET [Order] = [Order]-1 WHERE ([Order] > '%q' AND [Order] <= '%q')\",\n\t\t\t\t\t\t\tOrder2.c_str(), Order1.c_str());\n\t\t\t\t\t}\n\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET [Order] = '%q' WHERE (ID == '%q')\",\n\t\t\t\t\t\tOrder1.c_str(), idx2.c_str());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//change order in a room\n\t\t\t\t\t//get device order 1\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM DeviceToPlansMap WHERE (DeviceRowID == '%q') AND (PlanID==%d)\",\n\t\t\t\t\t\tidx1.c_str(), roomid);\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\tOrder1 = result[0][0];\n\n\t\t\t\t\t//get device order 2\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM DeviceToPlansMap WHERE (DeviceRowID == '%q') AND (PlanID==%d)\",\n\t\t\t\t\t\tidx2.c_str(), roomid);\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\tOrder2 = result[0][0];\n\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"SwitchDeviceOrder\";\n\n\t\t\t\t\tif (atoi(Order1.c_str()) < atoi(Order2.c_str()))\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"UPDATE DeviceToPlansMap SET [Order] = [Order]+1 WHERE ([Order] >= '%q' AND [Order] < '%q') AND (PlanID==%d)\",\n\t\t\t\t\t\t\tOrder1.c_str(), Order2.c_str(), roomid);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"UPDATE DeviceToPlansMap SET [Order] = [Order]-1 WHERE ([Order] > '%q' AND [Order] <= '%q') AND (PlanID==%d)\",\n\t\t\t\t\t\t\tOrder2.c_str(), Order1.c_str(), roomid);\n\t\t\t\t\t}\n\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceToPlansMap SET [Order] = '%q' WHERE (DeviceRowID == '%q') AND (PlanID==%d)\",\n\t\t\t\t\t\tOrder1.c_str(), idx2.c_str(), roomid);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"switchsceneorder\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx1 = request::findValue(&req, \"idx1\");\n\t\t\t\tstd::string idx2 = request::findValue(&req, \"idx2\");\n\t\t\t\tif ((idx1.empty()) || (idx2.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string Order1, Order2;\n\t\t\t\t//get device order 1\n\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM Scenes WHERE (ID == '%q')\",\n\t\t\t\t\tidx1.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\tOrder1 = result[0][0];\n\n\t\t\t\t//get device order 2\n\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM Scenes WHERE (ID == '%q')\",\n\t\t\t\t\tidx2.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\tOrder2 = result[0][0];\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"SwitchSceneOrder\";\n\n\t\t\t\tif (atoi(Order1.c_str()) < atoi(Order2.c_str()))\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Scenes SET [Order] = [Order]+1 WHERE ([Order] >= '%q' AND [Order] < '%q')\",\n\t\t\t\t\t\tOrder1.c_str(), Order2.c_str());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Scenes SET [Order] = [Order]-1 WHERE ([Order] > '%q' AND [Order] <= '%q')\",\n\t\t\t\t\t\tOrder2.c_str(), Order1.c_str());\n\t\t\t\t}\n\n\t\t\t\tm_sql.safe_query(\"UPDATE Scenes SET [Order] = '%q' WHERE (ID == '%q')\",\n\t\t\t\t\tOrder1.c_str(), idx2.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"clearnotifications\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ClearNotification\";\n\n\t\t\t\tm_notifications.RemoveDeviceNotifications(idx);\n\t\t\t}\n\t\t\telse if (cparam == \"adduser\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string senabled = request::findValue(&req, \"enabled\");\n\t\t\t\tstd::string username = request::findValue(&req, \"username\");\n\t\t\t\tstd::string password = request::findValue(&req, \"password\");\n\t\t\t\tstd::string srights = request::findValue(&req, \"rights\");\n\t\t\t\tstd::string sRemoteSharing = request::findValue(&req, \"RemoteSharing\");\n\t\t\t\tstd::string sTabsEnabled = request::findValue(&req, \"TabsEnabled\");\n\t\t\t\tif (\n\t\t\t\t\t(senabled.empty()) ||\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(password.empty()) ||\n\t\t\t\t\t(srights.empty()) ||\n\t\t\t\t\t(sRemoteSharing.empty()) ||\n\t\t\t\t\t(sTabsEnabled.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tint rights = atoi(srights.c_str());\n\t\t\t\tif (rights != 2)\n\t\t\t\t{\n\t\t\t\t\tif (!FindAdminUser())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"message\"] = \"Add a Admin user first! (Or enable Settings/Website Protection)\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"AddUser\";\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO Users (Active, Username, Password, Rights, RemoteSharing, TabsEnabled) VALUES (%d,'%q','%q','%d','%d','%d')\",\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\tbase64_encode(username).c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\trights,\n\t\t\t\t\t(sRemoteSharing == \"true\") ? 1 : 0,\n\t\t\t\t\tatoi(sTabsEnabled.c_str())\n\t\t\t\t);\n\t\t\t\tLoadUsers();\n\t\t\t}\n\t\t\telse if (cparam == \"updateuser\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\tstd::string senabled = request::findValue(&req, \"enabled\");\n\t\t\t\tstd::string username = request::findValue(&req, \"username\");\n\t\t\t\tstd::string password = request::findValue(&req, \"password\");\n\t\t\t\tstd::string srights = request::findValue(&req, \"rights\");\n\t\t\t\tstd::string sRemoteSharing = request::findValue(&req, \"RemoteSharing\");\n\t\t\t\tstd::string sTabsEnabled = request::findValue(&req, \"TabsEnabled\");\n\t\t\t\tif (\n\t\t\t\t\t(senabled.empty()) ||\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(password.empty()) ||\n\t\t\t\t\t(srights.empty()) ||\n\t\t\t\t\t(sRemoteSharing.empty()) ||\n\t\t\t\t\t(sTabsEnabled.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tint rights = atoi(srights.c_str());\n\t\t\t\tif (rights != 2)\n\t\t\t\t{\n\t\t\t\t\tif (!FindAdminUser())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"message\"] = \"Add a Admin user first! (Or enable Settings/Website Protection)\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstd::string sHashedUsername = base64_encode(username);\n\n\t\t\t\t// Invalid user's sessions if username or password has changed\n\t\t\t\tstd::string sOldUsername;\n\t\t\t\tstd::string sOldPassword;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Username, Password FROM Users WHERE (ID == '%q')\", idx.c_str());\n\t\t\t\tif (result.size() == 1)\n\t\t\t\t{\n\t\t\t\t\tsOldUsername = result[0][0];\n\t\t\t\t\tsOldPassword = result[0][1];\n\t\t\t\t}\n\t\t\t\tif ((sHashedUsername != sOldUsername) || (password != sOldPassword))\n\t\t\t\t\tRemoveUsersSessions(sOldUsername, session);\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"UpdateUser\";\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Users SET Active=%d, Username='%q', Password='%q', Rights=%d, RemoteSharing=%d, TabsEnabled=%d WHERE (ID == '%q')\",\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\tsHashedUsername.c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\trights,\n\t\t\t\t\t(sRemoteSharing == \"true\") ? 1 : 0,\n\t\t\t\t\tatoi(sTabsEnabled.c_str()),\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t\tLoadUsers();\n\n\n\t\t\t}\n\t\t\telse if (cparam == \"deleteuser\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteUser\";\n\n\t\t\t\t// Remove user's sessions\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Username FROM Users WHERE (ID == '%q')\", idx.c_str());\n\t\t\t\tif (result.size() == 1)\n\t\t\t\t{\n\t\t\t\t\tRemoveUsersSessions(result[0][0], session);\n\t\t\t\t}\n\n\t\t\t\tm_sql.safe_query(\"DELETE FROM Users WHERE (ID == '%q')\", idx.c_str());\n\n\t\t\t\tm_sql.safe_query(\"DELETE FROM SharedDevices WHERE (SharedUserID == '%q')\", idx.c_str());\n\n\t\t\t\tLoadUsers();\n\t\t\t}\n\t\t\telse if (cparam == \"clearlightlog\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\t//First get Device Type/SubType\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType FROM DeviceStatus WHERE (ID == '%q')\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\tunsigned char dType = atoi(result[0][0].c_str());\n\t\t\t\tunsigned char dSubType = atoi(result[0][1].c_str());\n\n\t\t\t\tif (\n\t\t\t\t\t(dType != pTypeLighting1) &&\n\t\t\t\t\t(dType != pTypeLighting2) &&\n\t\t\t\t\t(dType != pTypeLighting3) &&\n\t\t\t\t\t(dType != pTypeLighting4) &&\n\t\t\t\t\t(dType != pTypeLighting5) &&\n\t\t\t\t\t(dType != pTypeLighting6) &&\n\t\t\t\t\t(dType != pTypeFan) &&\n\t\t\t\t\t(dType != pTypeColorSwitch) &&\n\t\t\t\t\t(dType != pTypeSecurity1) &&\n\t\t\t\t\t(dType != pTypeSecurity2) &&\n\t\t\t\t\t(dType != pTypeEvohome) &&\n\t\t\t\t\t(dType != pTypeEvohomeRelay) &&\n\t\t\t\t\t(dType != pTypeCurtain) &&\n\t\t\t\t\t(dType != pTypeBlinds) &&\n\t\t\t\t\t(dType != pTypeRFY) &&\n\t\t\t\t\t(dType != pTypeChime) &&\n\t\t\t\t\t(dType != pTypeThermostat2) &&\n\t\t\t\t\t(dType != pTypeThermostat3) &&\n\t\t\t\t\t(dType != pTypeThermostat4) &&\n\t\t\t\t\t(dType != pTypeRemote) &&\n\t\t\t\t\t(dType != pTypeGeneralSwitch) &&\n\t\t\t\t\t(dType != pTypeHomeConfort) &&\n\t\t\t\t\t(dType != pTypeFS20) &&\n\t\t\t\t\t(!((dType == pTypeRadiator1) && (dSubType == sTypeSmartwaresSwitchRadiator))) &&\n\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeTextStatus))) &&\n\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeAlert)))\n\t\t\t\t\t)\n\t\t\t\t\treturn; //no light device! we should not be here!\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ClearLightLog\";\n\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM LightingLog WHERE (DeviceRowID=='%q')\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"clearscenelog\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ClearSceneLog\";\n\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM SceneLog WHERE (SceneRowID=='%q')\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"learnsw\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tm_sql.AllowNewHardwareTimer(5);\n\t\t\t\tm_sql.m_LastSwitchID = \"\";\n\t\t\t\tbool bReceivedSwitch = false;\n\t\t\t\tunsigned char cntr = 0;\n\t\t\t\twhile ((!bReceivedSwitch) && (cntr < 50))\t//wait for max. 5 seconds\n\t\t\t\t{\n\t\t\t\t\tif (m_sql.m_LastSwitchID != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tbReceivedSwitch = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//sleep 100ms\n\t\t\t\t\t\tsleep_milliseconds(100);\n\t\t\t\t\t\tcntr++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (bReceivedSwitch)\n\t\t\t\t{\n\t\t\t\t\t//check if used\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Name, Used, nValue FROM DeviceStatus WHERE (ID==%\" PRIu64 \")\",\n\t\t\t\t\t\tm_sql.m_LastSwitchRowID);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"LearnSW\";\n\t\t\t\t\t\troot[\"ID\"] = m_sql.m_LastSwitchID;\n\t\t\t\t\t\troot[\"idx\"] = m_sql.m_LastSwitchRowID;\n\t\t\t\t\t\troot[\"Name\"] = result[0][0];\n\t\t\t\t\t\troot[\"Used\"] = atoi(result[0][1].c_str());\n\t\t\t\t\t\troot[\"Cmd\"] = atoi(result[0][2].c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //learnsw\n\t\t\telse if (cparam == \"makefavorite\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string sisfavorite = request::findValue(&req, \"isfavorite\");\n\t\t\t\tif ((idx.empty()) || (sisfavorite.empty()))\n\t\t\t\t\treturn;\n\t\t\t\tint isfavorite = atoi(sisfavorite.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Favorite=%d WHERE (ID == '%q')\",\n\t\t\t\t\tisfavorite, idx.c_str());\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"MakeFavorite\";\n\t\t\t} //makefavorite\n\t\t\telse if (cparam == \"makescenefavorite\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string sisfavorite = request::findValue(&req, \"isfavorite\");\n\t\t\t\tif ((idx.empty()) || (sisfavorite.empty()))\n\t\t\t\t\treturn;\n\t\t\t\tint isfavorite = atoi(sisfavorite.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Favorite=%d WHERE (ID == '%q')\",\n\t\t\t\t\tisfavorite, idx.c_str());\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"MakeSceneFavorite\";\n\t\t\t} //makescenefavorite\n\t\t\telse if (cparam == \"resetsecuritystatus\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string switchcmd = request::findValue(&req, \"switchcmd\");\n\n\t\t\t\tif ((idx.empty()) || (switchcmd.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ResetSecurityStatus\";\n\n\t\t\t\tint nValue = -1;\n\n\t\t\t\t// Change to generic *Security_Status_Desc lookup...\n\n\t\t\t\tif (switchcmd == \"Panic End\") {\n\t\t\t\t\tnValue = 7;\n\t\t\t\t}\n\t\t\t\telse if (switchcmd == \"Normal\") {\n\t\t\t\t\tnValue = 0;\n\t\t\t\t}\n\n\t\t\t\tif (nValue >= 0)\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET nValue=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tnValue, idx.c_str());\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"SwitchLight\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"verifypasscode\")\n\t\t\t{\n\t\t\t\tstd::string passcode = request::findValue(&req, \"passcode\");\n\t\t\t\tif (passcode.empty())\n\t\t\t\t\treturn;\n\t\t\t\t//Check if passcode is correct\n\t\t\t\tpasscode = GenerateMD5Hash(passcode);\n\t\t\t\tstd::string rpassword;\n\t\t\t\tint nValue = 1;\n\t\t\t\tm_sql.GetPreferencesVar(\"ProtectionPassword\", nValue, rpassword);\n\t\t\t\tif (passcode == rpassword)\n\t\t\t\t{\n\t\t\t\t\troot[\"title\"] = \"VerifyPasscode\";\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"switchmodal\")\n\t\t\t{\n\t\t\t\tint urights = 3;\n\t\t\t\tif (bHaveUser)\n\t\t\t\t{\n\t\t\t\t\tint iUser = -1;\n\t\t\t\t\tiUser = FindUser(session.username.c_str());\n\t\t\t\t\tif (iUser != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\turights = (int)m_users[iUser].userrights;\n\t\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a modal command\", m_users[iUser].Username.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urights < 1)\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string switchcmd = request::findValue(&req, \"status\");\n\t\t\t\tstd::string until = request::findValue(&req, \"until\");//optional until date / time as applicable\n\t\t\t\tstd::string action = request::findValue(&req, \"action\");//Run action or not (update status only)\n\t\t\t\tstd::string onlyonchange = request::findValue(&req, \"ooc\");//No update unless the value changed (check if updated)\n\t\t\t\t//The on action is used to call a script to update the real device so we only want to use it when altering the status in the Domoticz Web Client\n\t\t\t\t//If we're posting the status from the real device to domoticz we don't want to run the on action script (\"action\"!=1) to avoid loops and contention\n\t\t\t\t//\"\"... we only want to log a change (and trigger an event) when the status has actually changed (\"ooc\"==1) i.e. suppress non transient updates\n\t\t\t\tif ((idx.empty()) || (switchcmd.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string passcode = request::findValue(&req, \"passcode\");\n\t\t\t\tif (passcode.size() > 0)\n\t\t\t\t{\n\t\t\t\t\t//Check if passcode is correct\n\t\t\t\t\tpasscode = GenerateMD5Hash(passcode);\n\t\t\t\t\tstd::string rpassword;\n\t\t\t\t\tint nValue = 1;\n\t\t\t\t\tm_sql.GetPreferencesVar(\"ProtectionPassword\", nValue, rpassword);\n\t\t\t\t\tif (passcode != rpassword)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"title\"] = \"Modal\";\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (m_mainworker.SwitchModal(idx, switchcmd, action, onlyonchange, until) == true)//FIXME we need to return a status of already set / no update if ooc==\"1\" and no status update was performed\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Modal\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"switchlight\")\n\t\t\t{\n\t\t\t\tif (session.rights < 1)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only user/admin allowed\n\t\t\t\t}\n\t\t\t\tstd::string Username = \"Admin\";\n\t\t\t\tif (!session.username.empty())\n\t\t\t\t\tUsername = session.username;\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tstd::string switchcmd = request::findValue(&req, \"switchcmd\");\n\t\t\t\tstd::string level = \"-1\";\n\t\t\t\tif (switchcmd == \"Set Level\")\n\t\t\t\t\tlevel = request::findValue(&req, \"level\");\n\t\t\t\tstd::string onlyonchange = request::findValue(&req, \"ooc\");//No update unless the value changed (check if updated)\n\t\t\t\t_log.Debug(DEBUG_WEBSERVER, \"WEBS switchlight idx:%s switchcmd:%s level:%s\", idx.c_str(), switchcmd.c_str(), level.c_str());\n\t\t\t\tstd::string passcode = request::findValue(&req, \"passcode\");\n\t\t\t\tif ((idx.empty()) || (switchcmd.empty()) || ((switchcmd == \"Set Level\") && (level.empty())) )\n\t\t\t\t\treturn;\n\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"SELECT [Protected],[Name] FROM DeviceStatus WHERE (ID = '%q')\", idx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\t//Switch not found!\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbool bIsProtected = atoi(result[0][0].c_str()) != 0;\n\t\t\t\tstd::string sSwitchName = result[0][1];\n\t\t\t\tif (session.rights == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!IsIdxForUser(&session, atoi(idx.c_str())))\n\t\t\t\t\t{\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"User: %s initiated a Unauthorized switch command!\", Username.c_str());\n\t\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (bIsProtected)\n\t\t\t\t{\n\t\t\t\t\tif (passcode.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\t//Switch is protected, but no passcode has been\n\t\t\t\t\t\troot[\"title\"] = \"SwitchLight\";\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t//Check if passcode is correct\n\t\t\t\t\tpasscode = GenerateMD5Hash(passcode);\n\t\t\t\t\tstd::string rpassword;\n\t\t\t\t\tint nValue = 1;\n\t\t\t\t\tm_sql.GetPreferencesVar(\"ProtectionPassword\", nValue, rpassword);\n\t\t\t\t\tif (passcode != rpassword)\n\t\t\t\t\t{\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"User: %s initiated a switch command (Wrong code!)\", Username.c_str());\n\t\t\t\t\t\troot[\"title\"] = \"SwitchLight\";\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a switch command (%s/%s/%s)\", Username.c_str(), idx.c_str(), sSwitchName.c_str(), switchcmd.c_str());\n\n\t\t\t\troot[\"title\"] = \"SwitchLight\";\n\t\t\t\tif (m_mainworker.SwitchLight(idx, switchcmd, level, \"-1\", onlyonchange, 0) == true)\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"message\"] = \"Error sending switch command, check device/hardware !\";\n\t\t\t\t}\n\t\t\t} //(rtype==\"switchlight\")\n\t\t\telse if (cparam == \"switchscene\")\n\t\t\t{\n\t\t\t\tif (session.rights < 1)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only user/admin allowed\n\t\t\t\t}\n\t\t\t\tstd::string Username = \"Admin\";\n\t\t\t\tif (!session.username.empty())\n\t\t\t\t\tUsername = session.username;\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string switchcmd = request::findValue(&req, \"switchcmd\");\n\t\t\t\tstd::string passcode = request::findValue(&req, \"passcode\");\n\t\t\t\tif ((idx.empty()) || (switchcmd.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"SELECT [Protected] FROM Scenes WHERE (ID = '%q')\", idx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\t//Scene/Group not found!\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbool bIsProtected = atoi(result[0][0].c_str()) != 0;\n\t\t\t\tif (bIsProtected)\n\t\t\t\t{\n\t\t\t\t\tif (passcode.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"title\"] = \"SwitchScene\";\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t//Check if passcode is correct\n\t\t\t\t\tpasscode = GenerateMD5Hash(passcode);\n\t\t\t\t\tstd::string rpassword;\n\t\t\t\t\tint nValue = 1;\n\t\t\t\t\tm_sql.GetPreferencesVar(\"ProtectionPassword\", nValue, rpassword);\n\t\t\t\t\tif (passcode != rpassword)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"title\"] = \"SwitchScene\";\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"User: %s initiated a scene/group command (Wrong code!)\", Username.c_str());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a scene/group command\", Username.c_str());\n\n\t\t\t\tif (m_mainworker.SwitchScene(idx, switchcmd) == true)\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"SwitchScene\";\n\t\t\t\t}\n\t\t\t} //(rtype==\"switchscene\")\n\t\t\telse if (cparam == \"getSunRiseSet\") {\n\t\t\t\tif (!m_mainworker.m_LastSunriseSet.empty())\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\tStringSplit(m_mainworker.m_LastSunriseSet, \";\", strarray);\n\t\t\t\t\tif (strarray.size() == 10)\n\t\t\t\t\t{\n\t\t\t\t\t\tstruct tm loctime;\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\n\t\t\t\t\t\tlocaltime_r(&now, &loctime);\n\t\t\t\t\t\t//strftime(szTmp, 80, \"%b %d %Y %X\", &loctime);\n\t\t\t\t\t\tstrftime(szTmp, 80, \"%Y-%m-%d %X\", &loctime);\n\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"getSunRiseSet\";\n\t\t\t\t\t\troot[\"ServerTime\"] = szTmp;\n\t\t\t\t\t\troot[\"Sunrise\"] = strarray[0];\n\t\t\t\t\t\troot[\"Sunset\"] = strarray[1];\n\t\t\t\t\t\troot[\"SunAtSouth\"] = strarray[2];\n\t\t\t\t\t\troot[\"CivTwilightStart\"] = strarray[3];\n\t\t\t\t\t\troot[\"CivTwilightEnd\"] = strarray[4];\n\t\t\t\t\t\troot[\"NautTwilightStart\"] = strarray[5];\n\t\t\t\t\t\troot[\"NautTwilightEnd\"] = strarray[6];\n\t\t\t\t\t\troot[\"AstrTwilightStart\"] = strarray[7];\n\t\t\t\t\t\troot[\"AstrTwilightEnd\"] = strarray[8];\n\t\t\t\t\t\troot[\"DayLength\"] = strarray[9];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"getServerTime\") {\n\n\t\t\t\tstruct tm loctime;\n\t\t\t\ttime_t now = mytime(NULL);\n\n\t\t\t\tlocaltime_r(&now, &loctime);\n\t\t\t\t//strftime(szTmp, 80, \"%b %d %Y %X\", &loctime);\n\t\t\t\tstrftime(szTmp, 80, \"%Y-%m-%d %X\", &loctime);\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"getServerTime\";\n\t\t\t\troot[\"ServerTime\"] = szTmp;\n\t\t\t}\n\t\t\telse if (cparam == \"getsecstatus\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetSecStatus\";\n\n\t\t\t\tint secstatus = 0;\n\t\t\t\tm_sql.GetPreferencesVar(\"SecStatus\", secstatus);\n\t\t\t\troot[\"secstatus\"] = secstatus;\n\n\t\t\t\tint secondelay = 30;\n\t\t\t\tm_sql.GetPreferencesVar(\"SecOnDelay\", secondelay);\n\t\t\t\troot[\"secondelay\"] = secondelay;\n\t\t\t}\n\t\t\telse if (cparam == \"setsecstatus\")\n\t\t\t{\n\t\t\t\tstd::string ssecstatus = request::findValue(&req, \"secstatus\");\n\t\t\t\tstd::string seccode = request::findValue(&req, \"seccode\");\n\t\t\t\tif ((ssecstatus.empty()) || (seccode.empty()))\n\t\t\t\t{\n\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\troot[\"title\"] = \"SetSecStatus\";\n\t\t\t\tstd::string rpassword;\n\t\t\t\tint nValue = 1;\n\t\t\t\tm_sql.GetPreferencesVar(\"SecPassword\", nValue, rpassword);\n\t\t\t\tif (seccode != rpassword)\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\tint iSecStatus = atoi(ssecstatus.c_str());\n\t\t\t\tm_mainworker.UpdateDomoticzSecurityStatus(iSecStatus);\n\t\t\t}\n\t\t\telse if (cparam == \"setcolbrightnessvalue\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\t_tColor color;\n\n\t\t\t\tstd::string json = request::findValue(&req, \"color\");\n\t\t\t\tstd::string hex = request::findValue(&req, \"hex\");\n\t\t\t\tstd::string hue = request::findValue(&req, \"hue\");\n\t\t\t\tstd::string sat = request::findValue(&req, \"sat\");\n\t\t\t\tstd::string brightness = request::findValue(&req, \"brightness\");\n\t\t\t\tstd::string iswhite = request::findValue(&req, \"iswhite\");\n\n\t\t\t\tint ival = 100;\n\t\t\t\tfloat brightnessAdj = 1.0f;\n\n\t\t\t\tif (!json.empty())\n\t\t\t\t{\n\t\t\t\t\tcolor = _tColor(json);\n\t\t\t\t\tif (color.mode == ColorModeRGB)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Normalize RGB to full brightness\n\t\t\t\t\t\tfloat hsb[3];\n\t\t\t\t\t\tint r, g, b;\n\t\t\t\t\t\trgb2hsb(color.r, color.g, color.b, hsb);\n\t\t\t\t\t\thsb2rgb(hsb[0]*360.0f, hsb[1], 1.0f, r, g, b, 255);\n\t\t\t\t\t\tcolor.r = r;\n\t\t\t\t\t\tcolor.g = g;\n\t\t\t\t\t\tcolor.b = b;\n\t\t\t\t\t\tbrightnessAdj = hsb[2];\n\t\t\t\t\t}\n\n\t\t\t\t\t//_log.Debug(DEBUG_WEBSERVER, \"setcolbrightnessvalue: json: %s, color: '%s', bri: '%s'\", json.c_str(), color.toString().c_str(), brightness.c_str());\n\t\t\t\t}\n\t\t\t\telse if (!hex.empty())\n\t\t\t\t{\n\t\t\t\t\tuint64_t ihex = hexstrtoui64(hex);\n\t\t\t\t\t//_log.Debug(DEBUG_WEBSERVER, \"setcolbrightnessvalue: hex: '%s', ihex: %\" PRIx64 \", bri: '%s', iswhite: '%s'\", hex.c_str(), ihex, brightness.c_str(), iswhite.c_str());\n\t\t\t\t\tuint8_t r = 0;\n\t\t\t\t\tuint8_t g = 0;\n\t\t\t\t\tuint8_t b = 0;\n\t\t\t\t\tuint8_t cw = 0;\n\t\t\t\t\tuint8_t ww = 0;\n\t\t\t\t\tswitch (hex.length())\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 6: //RGB\n\t\t\t\t\t\t\tr = (uint8_t)((ihex & 0x0000FF0000) >> 16);\n\t\t\t\t\t\t\tg = (uint8_t)((ihex & 0x000000FF00) >> 8);\n\t\t\t\t\t\t\tb = (uint8_t)ihex & 0xFF;\n\t\t\t\t\t\t\tfloat hsb[3];\n\t\t\t\t\t\t\tint tr, tg, tb; // tmp of 'int' type so can be passed as references to hsb2rgb\n\t\t\t\t\t\t\trgb2hsb(r, g, b, hsb);\n\t\t\t\t\t\t\t// Normalize RGB to full brightness\n\t\t\t\t\t\t\thsb2rgb(hsb[0]*360.0f, hsb[1], 1.0f, tr, tg, tb, 255);\n\t\t\t\t\t\t\tr = tr;\n\t\t\t\t\t\t\tg = tg;\n\t\t\t\t\t\t\tb = tb;\n\t\t\t\t\t\t\tbrightnessAdj = hsb[2];\n\t\t\t\t\t\t\t// Backwards compatibility: set iswhite for unsaturated colors\n\t\t\t\t\t\t\tiswhite = (hsb[1] < (20.0 / 255.0)) ? \"true\" : \"false\";\n\t\t\t\t\t\t\tcolor = _tColor(r, g, b, cw, ww, ColorModeRGB);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 8: //RGB_WW\n\t\t\t\t\t\t\tr = (uint8_t)((ihex & 0x00FF000000) >> 24);\n\t\t\t\t\t\t\tg = (uint8_t)((ihex & 0x0000FF0000) >> 16);\n\t\t\t\t\t\t\tb = (uint8_t)((ihex & 0x000000FF00) >> 8);\n\t\t\t\t\t\t\tww = (uint8_t)ihex & 0xFF;\n\t\t\t\t\t\t\tcolor = _tColor(r, g, b, cw, ww, ColorModeCustom);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 10: //RGB_CW_WW\n\t\t\t\t\t\t\tr = (uint8_t)((ihex & 0xFF00000000) >> 32);\n\t\t\t\t\t\t\tg = (uint8_t)((ihex & 0x00FF000000) >> 24);\n\t\t\t\t\t\t\tb = (uint8_t)((ihex & 0x0000FF0000) >> 16);\n\t\t\t\t\t\t\tcw = (uint8_t)((ihex & 0x000000FF00) >> 8);\n\t\t\t\t\t\t\tww = (uint8_t)ihex & 0xFF;\n\t\t\t\t\t\t\tcolor = _tColor(r, g, b, cw, ww, ColorModeCustom);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (iswhite == \"true\") color.mode = ColorModeWhite;\n\t\t\t\t\t//_log.Debug(DEBUG_WEBSERVER, \"setcolbrightnessvalue: rgbww: %02x%02x%02x%02x%02x, color: '%s'\", r, g, b, cw, ww, color.toString().c_str());\n\t\t\t\t}\n\t\t\t\telse if (!hue.empty())\n\t\t\t\t{\n\t\t\t\t\tint r, g, b;\n\n\t\t\t\t\t//convert hue to RGB\n\t\t\t\t\tfloat iHue = float(atof(hue.c_str()));\n\t\t\t\t\tfloat iSat = 100.0f;\n\t\t\t\t\tif (!sat.empty()) iSat = float(atof(sat.c_str()));\n\t\t\t\t\thsb2rgb(iHue, iSat/100.0f, 1.0f, r, g, b, 255);\n\n\t\t\t\t\tcolor = _tColor(r, g, b, 0, 0, ColorModeRGB);\n\t\t\t\t\tif (iswhite == \"true\") color.mode = ColorModeWhite;\n\t\t\t\t\t//_log.Debug(DEBUG_WEBSERVER, \"setcolbrightnessvalue2: hue: %f, rgb: %02x%02x%02x, color: '%s'\", iHue, r, g, b, color.toString().c_str());\n\t\t\t\t}\n\n\t\t\t\tif (color.mode == ColorModeNone)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!brightness.empty())\n\t\t\t\t\tival = atoi(brightness.c_str());\n\t\t\t\tival = int(ival * brightnessAdj);\n\t\t\t\tival = std::max(ival, 0);\n\t\t\t\tival = std::min(ival, 100);\n\n\t\t\t\t_log.Log(LOG_STATUS, \"setcolbrightnessvalue: ID: %\" PRIx64 \", bri: %d, color: '%s'\", ID, ival, color.toString().c_str());\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Set Color\", (unsigned char)ival, color, false, 0);\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"SetColBrightnessValue\";\n\t\t\t}\n\t\t\telse if (cparam.find(\"setkelvinlevel\") == 0)\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set Kelvin Level\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\n\t\t\t\tstd::string kelvin = request::findValue(&req, \"kelvin\");\n\t\t\t\tdouble ival = atof(kelvin.c_str());\n\t\t\t\tival = std::max(ival, 0.0);\n\t\t\t\tival = std::min(ival, 100.0);\n\t\t\t\t_tColor color = _tColor(round(ival*255.0f/100.0f), ColorModeTemp);\n\t\t\t\t_log.Log(LOG_STATUS, \"setkelvinlevel: t: %f, color: '%s'\", ival, color.toString().c_str());\n\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Set Color\", -1, color, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"brightnessup\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set brightness up!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Bright Up\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"brightnessdown\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set brightness down!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Bright Down\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"discomode\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to last known disco mode!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Disco Mode\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam.find(\"discomodenum\") == 0 && cparam != \"discomode\" && cparam.size() == 13)\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to disco mode!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tchar szTmp[40];\n\t\t\t\tsprintf(szTmp, \"Disco Mode %s\", cparam.substr(12).c_str());\n\t\t\t\tm_mainworker.SwitchLight(ID, szTmp, 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"discoup\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to next disco mode!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Disco Up\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"discodown\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to previous disco mode!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Disco Down\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"speedup\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set disco speed up!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Speed Up\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"speeduplong\")\n\t\t\t{\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set speed long!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Speed Up Long\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"speeddown\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set disco speed down!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Speed Down\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"speedmin\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set disco speed minimal!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Speed Minimal\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"speedmax\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set disco speed maximal!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Speed Maximal\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"warmer\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set Kelvin up!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Warmer\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"cooler\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set Kelvin down!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Cooler\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"fulllight\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set Full!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Set Full\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"nightlight\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to nightlight!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Set Night\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"whitelight\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to clear white!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\t//TODO: Change to color with mode=ColorModeWhite and level=100?\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Set White\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"getfloorplanimages\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetFloorplanImages\";\n\n\t\t\t\tbool bReturnUnused = atoi(request::findValue(&req, \"unused\").c_str()) != 0;\n\n\t\t\t\tif (!bReturnUnused)\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, ScaleFactor FROM Floorplans ORDER BY [Name]\");\n\t\t\t\telse\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, ScaleFactor FROM Floorplans WHERE ID NOT IN(SELECT FloorplanID FROM Plans)\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"name\"] = sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"scalefactor\"] = sd[2];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"updatefloorplan\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\t\tstd::string scalefactor = request::findValue(&req, \"scalefactor\");\n\t\t\t\tif (\n\t\t\t\t\t(name.empty())\n\t\t\t\t\t||(scalefactor.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"UpdateFloorplan\";\n\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Floorplans SET Name='%q',ScaleFactor='%q' WHERE (ID == '%q')\",\n\t\t\t\t\tname.c_str(),\n\t\t\t\t\tscalefactor.c_str(),\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if (cparam == \"deletefloorplan\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteFloorplan\";\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceToPlansMap SET XOffset=0,YOffset=0 WHERE (PlanID IN (SELECT ID from Plans WHERE (FloorplanID == '%q')))\", idx.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE Plans SET FloorplanID=0,Area='' WHERE (FloorplanID == '%q')\", idx.c_str());\n\t\t\t\tm_sql.safe_query(\"DELETE FROM Floorplans WHERE (ID == '%q')\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"changefloorplanorder\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\tstd::string sway = request::findValue(&req, \"way\");\n\t\t\t\tif (sway.empty())\n\t\t\t\t\treturn;\n\t\t\t\tbool bGoUp = (sway == \"0\");\n\n\t\t\t\tstd::string aOrder, oID, oOrder;\n\n\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM Floorplans WHERE (ID=='%q')\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\taOrder = result[0][0];\n\n\t\t\t\tif (!bGoUp)\n\t\t\t\t{\n\t\t\t\t\t//Get next device order\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM Floorplans WHERE ([Order]>'%q') ORDER BY [Order] ASC\",\n\t\t\t\t\t\taOrder.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\toID = result[0][0];\n\t\t\t\t\toOrder = result[0][1];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//Get previous device order\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM Floorplans WHERE ([Order]<'%q') ORDER BY [Order] DESC\",\n\t\t\t\t\t\taOrder.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\toID = result[0][0];\n\t\t\t\t\toOrder = result[0][1];\n\t\t\t\t}\n\t\t\t\t//Swap them\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ChangeFloorPlanOrder\";\n\n\t\t\t\tm_sql.safe_query(\"UPDATE Floorplans SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\t\toOrder.c_str(), idx.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE Floorplans SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\t\taOrder.c_str(), oID.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"getunusedfloorplanplans\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetUnusedFloorplanPlans\";\n\t\t\t\tint ii = 0;\n\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name FROM Plans WHERE (FloorplanID==0) ORDER BY Name\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 0;\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"getfloorplanplans\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetFloorplanPlans\";\n\t\t\t\tint ii = 0;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Area FROM Plans WHERE (FloorplanID=='%q') ORDER BY Name\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"Area\"] = sd[2];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"addfloorplanplan\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string planidx = request::findValue(&req, \"planidx\");\n\t\t\t\tif (\n\t\t\t\t\t(idx.empty()) ||\n\t\t\t\t\t(planidx.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"AddFloorplanPlan\";\n\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Plans SET FloorplanID='%q' WHERE (ID == '%q')\",\n\t\t\t\t\tidx.c_str(),\n\t\t\t\t\tplanidx.c_str()\n\t\t\t\t);\n\t\t\t\t_log.Log(LOG_STATUS, \"(Floorplan) Plan '%s' added to floorplan '%s'.\", planidx.c_str(), idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"updatefloorplanplan\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string planidx = request::findValue(&req, \"planidx\");\n\t\t\t\tstd::string planarea = request::findValue(&req, \"area\");\n\t\t\t\tif (planidx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"UpdateFloorplanPlan\";\n\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Plans SET Area='%q' WHERE (ID == '%q')\",\n\t\t\t\t\tplanarea.c_str(),\n\t\t\t\t\tplanidx.c_str()\n\t\t\t\t);\n\t\t\t\t_log.Log(LOG_STATUS, \"(Floorplan) Plan '%s' floor area updated to '%s'.\", planidx.c_str(), planarea.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"deletefloorplanplan\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteFloorplanPlan\";\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE DeviceToPlansMap SET XOffset=0,YOffset=0 WHERE (PlanID == '%q')\",\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t\t_log.Log(LOG_STATUS, \"(Floorplan) Device coordinates reset for plan '%s'.\", idx.c_str());\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Plans SET FloorplanID=0,Area='' WHERE (ID == '%q')\",\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t\t_log.Log(LOG_STATUS, \"(Floorplan) Plan '%s' floorplan data reset.\", idx.c_str());\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::DisplaySwitchTypesCombo(std::string & content_part)\n\t\t{\n\t\t\tchar szTmp[200];\n\n\t\t\tstd::map<std::string, int> _switchtypes;\n\n\t\t\tfor (int ii = 0; ii < STYPE_END; ii++)\n\t\t\t{\n\t\t\t\t_switchtypes[Switch_Type_Desc((_eSwitchType)ii)] = ii;\n\t\t\t}\n\t\t\t//return a sorted list\n\t\t\tfor (const auto & itt : _switchtypes)\n\t\t\t{\n\t\t\t\tsprintf(szTmp, \"<option value=\\\"%d\\\">%s</option>\\n\", itt.second, itt.first.c_str());\n\t\t\t\tcontent_part += szTmp;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::DisplayMeterTypesCombo(std::string & content_part)\n\t\t{\n\t\t\tchar szTmp[200];\n\t\t\tfor (int ii = 0; ii < MTYPE_END; ii++)\n\t\t\t{\n\t\t\t\tsprintf(szTmp, \"<option value=\\\"%d\\\">%s</option>\\n\", ii, Meter_Type_Desc((_eMeterType)ii));\n\t\t\t\tcontent_part += szTmp;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::DisplayLanguageCombo(std::string & content_part)\n\t\t{\n\t\t\t//return a sorted list\n\t\t\tstd::map<std::string, std::string> _ltypes;\n\t\t\tchar szTmp[200];\n\t\t\tint ii = 0;\n\t\t\twhile (guiLanguage[ii].szShort != NULL)\n\t\t\t{\n\t\t\t\t_ltypes[guiLanguage[ii].szLong] = guiLanguage[ii].szShort;\n\t\t\t\tii++;\n\t\t\t}\n\t\t\tfor (const auto & itt : _ltypes)\n\t\t\t{\n\t\t\t\tsprintf(szTmp, \"<option value=\\\"%s\\\">%s</option>\\n\", itt.second.c_str(), itt.first.c_str());\n\t\t\t\tcontent_part += szTmp;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::DisplayTimerTypesCombo(std::string & content_part)\n\t\t{\n\t\t\tchar szTmp[200];\n\t\t\tfor (int ii = 0; ii < TTYPE_END; ii++)\n\t\t\t{\n\t\t\t\tsprintf(szTmp, \"<option data-i18n=\\\"%s\\\" value=\\\"%d\\\">%s</option>\\n\", Timer_Type_Desc(ii), ii, Timer_Type_Desc(ii));\n\t\t\t\tcontent_part += szTmp;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::LoadUsers()\n\t\t{\n\t\t\tClearUserPasswords();\n\t\t\tstd::string WebUserName, WebPassword;\n\t\t\tint nValue = 0;\n\t\t\tif (m_sql.GetPreferencesVar(\"WebUserName\", nValue, WebUserName))\n\t\t\t{\n\t\t\t\tif (m_sql.GetPreferencesVar(\"WebPassword\", nValue, WebPassword))\n\t\t\t\t{\n\t\t\t\t\tif ((WebUserName != \"\") && (WebPassword != \"\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tWebUserName = base64_decode(WebUserName);\n\t\t\t\t\t\t//WebPassword = WebPassword;\n\t\t\t\t\t\tAddUser(10000, WebUserName, WebPassword, URIGHTS_ADMIN, 0xFFFF);\n\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Active, Username, Password, Rights, TabsEnabled FROM Users\");\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\tint bIsActive = static_cast<int>(atoi(sd[1].c_str()));\n\t\t\t\t\t\t\t\tif (bIsActive)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tunsigned long ID = (unsigned long)atol(sd[0].c_str());\n\n\t\t\t\t\t\t\t\t\tstd::string username = base64_decode(sd[2]);\n\t\t\t\t\t\t\t\t\tstd::string password = sd[3];\n\n\t\t\t\t\t\t\t\t\t_eUserRights rights = (_eUserRights)atoi(sd[4].c_str());\n\t\t\t\t\t\t\t\t\tint activetabs = atoi(sd[5].c_str());\n\n\t\t\t\t\t\t\t\t\tAddUser(ID, username, password, rights, activetabs);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tm_mainworker.LoadSharedUsers();\n\t\t}\n\n\t\tvoid CWebServer::AddUser(const unsigned long ID, const std::string &username, const std::string &password, const int userrights, const int activetabs)\n\t\t{\n\t\t\tstd::vector<std::vector<std::string> > result = m_sql.safe_query(\"SELECT COUNT(*) FROM SharedDevices WHERE (SharedUserID == '%d')\", ID);\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\t_tWebUserPassword wtmp;\n\t\t\twtmp.ID = ID;\n\t\t\twtmp.Username = username;\n\t\t\twtmp.Password = password;\n\t\t\twtmp.userrights = (_eUserRights)userrights;\n\t\t\twtmp.ActiveTabs = activetabs;\n\t\t\twtmp.TotSensors = atoi(result[0][0].c_str());\n\t\t\tm_users.push_back(wtmp);\n\n\t\t\tm_pWebEm->AddUserPassword(ID, username, password, (_eUserRights)userrights, activetabs);\n\t\t}\n\n\t\tvoid CWebServer::ClearUserPasswords()\n\t\t{\n\t\t\tm_users.clear();\n\t\t\tm_pWebEm->ClearUserPasswords();\n\t\t}\n\n\t\tint CWebServer::FindUser(const char* szUserName)\n\t\t{\n\t\t\tint iUser = 0;\n\t\t\tfor (const auto & itt : m_users)\n\t\t\t{\n\t\t\t\tif (itt.Username == szUserName)\n\t\t\t\t\treturn iUser;\n\t\t\t\tiUser++;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\tbool CWebServer::FindAdminUser()\n\t\t{\n\t\t\tfor (const auto & itt : m_users)\n\t\t\t{\n\t\t\t\tif (itt.userrights == URIGHTS_ADMIN)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tvoid CWebServer::PostSettings(WebEmSession & session, const request& req, std::string & redirect_uri)\n\t\t{\n\t\t\tredirect_uri = \"/index.html\";\n\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string Latitude = request::findValue(&req, \"Latitude\");\n\t\t\tstd::string Longitude = request::findValue(&req, \"Longitude\");\n\t\t\tif ((Latitude != \"\") && (Longitude != \"\"))\n\t\t\t{\n\t\t\t\tstd::string LatLong = Latitude + \";\" + Longitude;\n\t\t\t\tm_sql.UpdatePreferencesVar(\"Location\", LatLong.c_str());\n\t\t\t\tm_mainworker.GetSunSettings();\n\t\t\t}\n\t\t\tm_notifications.ConfigFromGetvars(req, true);\n\t\t\tstd::string DashboardType = request::findValue(&req, \"DashboardType\");\n\t\t\tm_sql.UpdatePreferencesVar(\"DashboardType\", atoi(DashboardType.c_str()));\n\t\t\tstd::string MobileType = request::findValue(&req, \"MobileType\");\n\t\t\tm_sql.UpdatePreferencesVar(\"MobileType\", atoi(MobileType.c_str()));\n\n\t\t\tint nUnit = atoi(request::findValue(&req, \"WindUnit\").c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"WindUnit\", nUnit);\n\t\t\tm_sql.m_windunit = (_eWindUnit)nUnit;\n\n\t\t\tnUnit = atoi(request::findValue(&req, \"TempUnit\").c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"TempUnit\", nUnit);\n\t\t\tm_sql.m_tempunit = (_eTempUnit)nUnit;\n\n\t\t\tnUnit = atoi(request::findValue(&req, \"WeightUnit\").c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"WeightUnit\", nUnit);\n\t\t\tm_sql.m_weightunit = (_eWeightUnit)nUnit;\n\n\n\t\t\tm_sql.SetUnitsAndScale();\n\n\t\t\tstd::string AuthenticationMethod = request::findValue(&req, \"AuthenticationMethod\");\n\t\t\t_eAuthenticationMethod amethod = (_eAuthenticationMethod)atoi(AuthenticationMethod.c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"AuthenticationMethod\", static_cast<int>(amethod));\n\t\t\tm_pWebEm->SetAuthenticationMethod(amethod);\n\n\t\t\tstd::string ReleaseChannel = request::findValue(&req, \"ReleaseChannel\");\n\t\t\tm_sql.UpdatePreferencesVar(\"ReleaseChannel\", atoi(ReleaseChannel.c_str()));\n\n\t\t\tstd::string LightHistoryDays = request::findValue(&req, \"LightHistoryDays\");\n\t\t\tm_sql.UpdatePreferencesVar(\"LightHistoryDays\", atoi(LightHistoryDays.c_str()));\n\n\t\t\tstd::string s5MinuteHistoryDays = request::findValue(&req, \"ShortLogDays\");\n\t\t\tm_sql.UpdatePreferencesVar(\"5MinuteHistoryDays\", atoi(s5MinuteHistoryDays.c_str()));\n\n\t\t\tint iShortLogInterval = atoi(request::findValue(&req, \"ShortLogInterval\").c_str());\n\t\t\tif (iShortLogInterval < 1)\n\t\t\t\tiShortLogInterval = 5;\n\t\t\tm_sql.UpdatePreferencesVar(\"ShortLogInterval\", iShortLogInterval);\n\t\t\tm_sql.m_ShortLogInterval = iShortLogInterval;\n\n\t\t\tstd::string sElectricVoltage = request::findValue(&req, \"ElectricVoltage\");\n\t\t\tm_sql.UpdatePreferencesVar(\"ElectricVoltage\", atoi(sElectricVoltage.c_str()));\n\n\t\t\tstd::string sCM113DisplayType = request::findValue(&req, \"CM113DisplayType\");\n\t\t\tm_sql.UpdatePreferencesVar(\"CM113DisplayType\", atoi(sCM113DisplayType.c_str()));\n\n\t\t\tstd::string WebUserName = base64_encode(CURLEncode::URLDecode(request::findValue(&req, \"WebUserName\")));\n\t\t\tstd::string WebPassword = CURLEncode::URLDecode(request::findValue(&req, \"WebPassword\"));\n\n\t\t\t//Get old username/password\n\t\t\tstd::string sOldWebLogin;\n\t\t\tstd::string sOldWebPassword;\n\t\t\tm_sql.GetPreferencesVar(\"WebUserName\", sOldWebLogin);\n\t\t\tm_sql.GetPreferencesVar(\"WebPassword\", sOldWebPassword);\n\n\t\t\tbool bHaveAdminUserPasswordChange = false;\n\n\t\t\tif ((WebUserName == sOldWebLogin) && (WebPassword.empty()))\n\t\t\t{\n\t\t\t\t//All is OK, no changes\n\t\t\t}\n\t\t\telse if (WebUserName.empty() || WebPassword.empty())\n\t\t\t{\n\t\t\t\t//If no Admin User/Password is specified, we clear them\n\t\t\t\tif ((!sOldWebLogin.empty()) || (!sOldWebPassword.empty()))\n\t\t\t\t\tbHaveAdminUserPasswordChange = true;\n\t\t\t\tWebUserName = \"\";\n\t\t\t\tWebPassword = \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ((WebUserName != sOldWebLogin) || (WebPassword != sOldWebPassword))\n\t\t\t\t{\n\t\t\t\t\tbHaveAdminUserPasswordChange = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Invalid sessions of WebUser when the username or password has been changed\n\t\t\tif (bHaveAdminUserPasswordChange)\n\t\t\t{\n\t\t\t\tRemoveUsersSessions(sOldWebLogin, session);\n\t\t\t\tm_sql.UpdatePreferencesVar(\"WebUserName\", WebUserName.c_str());\n\t\t\t\tm_sql.UpdatePreferencesVar(\"WebPassword\", WebPassword.c_str());\n\t\t\t}\n\n\t\t\tstd::string WebLocalNetworks = CURLEncode::URLDecode(request::findValue(&req, \"WebLocalNetworks\"));\n\t\t\tstd::string WebRemoteProxyIPs = CURLEncode::URLDecode(request::findValue(&req, \"WebRemoteProxyIPs\"));\n\t\t\tm_sql.UpdatePreferencesVar(\"WebLocalNetworks\", WebLocalNetworks.c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"WebRemoteProxyIPs\", WebRemoteProxyIPs.c_str());\n\n\t\t\tLoadUsers();\n\t\t\tm_pWebEm->ClearLocalNetworks();\n\t\t\tstd::vector<std::string> strarray;\n\t\t\tStringSplit(WebLocalNetworks, \";\", strarray);\n\t\t\tfor (const auto & itt : strarray)\n\t\t\t\tm_pWebEm->AddLocalNetworks(itt);\n\t\t\t//add local hostname\n\t\t\tm_pWebEm->AddLocalNetworks(\"\");\n\n\t\t\tm_pWebEm->ClearRemoteProxyIPs();\n\t\t\tstrarray.clear();\n\t\t\tStringSplit(WebRemoteProxyIPs, \";\", strarray);\n\t\t\tfor (const auto & itt : strarray)\n\t\t\t\tm_pWebEm->AddRemoteProxyIPs(itt);\n\n\t\t\tif (session.username.empty())\n\t\t\t{\n\t\t\t\t//Local network could be changed so lets for a check here\n\t\t\t\tsession.rights = -1;\n\t\t\t}\n\n\t\t\tstd::string SecPassword = request::findValue(&req, \"SecPassword\");\n\t\t\tSecPassword = CURLEncode::URLDecode(SecPassword);\n\t\t\tif (SecPassword.size() != 32)\n\t\t\t{\n\t\t\t\tSecPassword = GenerateMD5Hash(SecPassword);\n\t\t\t}\n\t\t\tm_sql.UpdatePreferencesVar(\"SecPassword\", SecPassword.c_str());\n\n\t\t\tstd::string ProtectionPassword = request::findValue(&req, \"ProtectionPassword\");\n\t\t\tProtectionPassword = CURLEncode::URLDecode(ProtectionPassword);\n\t\t\tif (ProtectionPassword.size() != 32)\n\t\t\t{\n\t\t\t\tProtectionPassword = GenerateMD5Hash(ProtectionPassword);\n\t\t\t}\n\t\t\tm_sql.UpdatePreferencesVar(\"ProtectionPassword\", ProtectionPassword.c_str());\n\n\t\t\tint EnergyDivider = atoi(request::findValue(&req, \"EnergyDivider\").c_str());\n\t\t\tint GasDivider = atoi(request::findValue(&req, \"GasDivider\").c_str());\n\t\t\tint WaterDivider = atoi(request::findValue(&req, \"WaterDivider\").c_str());\n\t\t\tif (EnergyDivider < 1)\n\t\t\t\tEnergyDivider = 1000;\n\t\t\tif (GasDivider < 1)\n\t\t\t\tGasDivider = 100;\n\t\t\tif (WaterDivider < 1)\n\t\t\t\tWaterDivider = 100;\n\t\t\tm_sql.UpdatePreferencesVar(\"MeterDividerEnergy\", EnergyDivider);\n\t\t\tm_sql.UpdatePreferencesVar(\"MeterDividerGas\", GasDivider);\n\t\t\tm_sql.UpdatePreferencesVar(\"MeterDividerWater\", WaterDivider);\n\n\t\t\tstd::string scheckforupdates = request::findValue(&req, \"checkforupdates\");\n\t\t\tm_sql.UpdatePreferencesVar(\"UseAutoUpdate\", (scheckforupdates == \"on\" ? 1 : 0));\n\n\t\t\tstd::string senableautobackup = request::findValue(&req, \"enableautobackup\");\n\t\t\tm_sql.UpdatePreferencesVar(\"UseAutoBackup\", (senableautobackup == \"on\" ? 1 : 0));\n\n\t\t\tfloat CostEnergy = static_cast<float>(atof(request::findValue(&req, \"CostEnergy\").c_str()));\n\t\t\tfloat CostEnergyT2 = static_cast<float>(atof(request::findValue(&req, \"CostEnergyT2\").c_str()));\n\t\t\tfloat CostEnergyR1 = static_cast<float>(atof(request::findValue(&req, \"CostEnergyR1\").c_str()));\n\t\t\tfloat CostEnergyR2 = static_cast<float>(atof(request::findValue(&req, \"CostEnergyR2\").c_str()));\n\t\t\tfloat CostGas = static_cast<float>(atof(request::findValue(&req, \"CostGas\").c_str()));\n\t\t\tfloat CostWater = static_cast<float>(atof(request::findValue(&req, \"CostWater\").c_str()));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostEnergy\", int(CostEnergy*10000.0f));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostEnergyT2\", int(CostEnergyT2*10000.0f));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostEnergyR1\", int(CostEnergyR1*10000.0f));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostEnergyR2\", int(CostEnergyR2*10000.0f));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostGas\", int(CostGas*10000.0f));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostWater\", int(CostWater*10000.0f));\n\n\t\t\tint rnOldvalue = 0;\n\t\t\tint rnvalue = 0;\n\n\t\t\tm_sql.GetPreferencesVar(\"ActiveTimerPlan\", rnOldvalue);\n\t\t\trnvalue = atoi(request::findValue(&req, \"ActiveTimerPlan\").c_str());\n\t\t\tif (rnOldvalue != rnvalue)\n\t\t\t{\n\t\t\t\tm_sql.UpdatePreferencesVar(\"ActiveTimerPlan\", rnvalue);\n\t\t\t\tm_sql.m_ActiveTimerPlan = rnvalue;\n\t\t\t\tm_mainworker.m_scheduler.ReloadSchedules();\n\t\t\t}\n\t\t\tm_sql.UpdatePreferencesVar(\"DoorbellCommand\", atoi(request::findValue(&req, \"DoorbellCommand\").c_str()));\n\t\t\tm_sql.UpdatePreferencesVar(\"SmartMeterType\", atoi(request::findValue(&req, \"SmartMeterType\").c_str()));\n\n\t\t\tstd::string EnableTabFloorplans = request::findValue(&req, \"EnableTabFloorplans\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabFloorplans\", (EnableTabFloorplans == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabLights = request::findValue(&req, \"EnableTabLights\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabLights\", (EnableTabLights == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabTemp = request::findValue(&req, \"EnableTabTemp\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabTemp\", (EnableTabTemp == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabWeather = request::findValue(&req, \"EnableTabWeather\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabWeather\", (EnableTabWeather == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabUtility = request::findValue(&req, \"EnableTabUtility\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabUtility\", (EnableTabUtility == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabScenes = request::findValue(&req, \"EnableTabScenes\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabScenes\", (EnableTabScenes == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabCustom = request::findValue(&req, \"EnableTabCustom\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabCustom\", (EnableTabCustom == \"on\" ? 1 : 0));\n\n\t\t\tm_sql.GetPreferencesVar(\"NotificationSensorInterval\", rnOldvalue);\n\t\t\trnvalue = atoi(request::findValue(&req, \"NotificationSensorInterval\").c_str());\n\t\t\tif (rnOldvalue != rnvalue)\n\t\t\t{\n\t\t\t\tm_sql.UpdatePreferencesVar(\"NotificationSensorInterval\", rnvalue);\n\t\t\t\tm_notifications.ReloadNotifications();\n\t\t\t}\n\t\t\tm_sql.GetPreferencesVar(\"NotificationSwitchInterval\", rnOldvalue);\n\t\t\trnvalue = atoi(request::findValue(&req, \"NotificationSwitchInterval\").c_str());\n\t\t\tif (rnOldvalue != rnvalue)\n\t\t\t{\n\t\t\t\tm_sql.UpdatePreferencesVar(\"NotificationSwitchInterval\", rnvalue);\n\t\t\t\tm_notifications.ReloadNotifications();\n\t\t\t}\n\t\t\tstd::string RaspCamParams = request::findValue(&req, \"RaspCamParams\");\n\t\t\tif (RaspCamParams != \"\")\n\t\t\t{\n\t\t\t\tif (IsArgumentSecure(RaspCamParams))\n\t\t\t\t\tm_sql.UpdatePreferencesVar(\"RaspCamParams\", RaspCamParams.c_str());\n\t\t\t}\n\n\t\t\tstd::string UVCParams = request::findValue(&req, \"UVCParams\");\n\t\t\tif (UVCParams != \"\")\n\t\t\t{\n\t\t\t\tif (IsArgumentSecure(UVCParams))\n\t\t\t\t\tm_sql.UpdatePreferencesVar(\"UVCParams\", UVCParams.c_str());\n\t\t\t}\n\n\t\t\tstd::string EnableNewHardware = request::findValue(&req, \"AcceptNewHardware\");\n\t\t\tint iEnableNewHardware = (EnableNewHardware == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"AcceptNewHardware\", iEnableNewHardware);\n\t\t\tm_sql.m_bAcceptNewHardware = (iEnableNewHardware == 1);\n\n\t\t\tstd::string HideDisabledHardwareSensors = request::findValue(&req, \"HideDisabledHardwareSensors\");\n\t\t\tint iHideDisabledHardwareSensors = (HideDisabledHardwareSensors == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"HideDisabledHardwareSensors\", iHideDisabledHardwareSensors);\n\n\t\t\tstd::string ShowUpdateEffect = request::findValue(&req, \"ShowUpdateEffect\");\n\t\t\tint iShowUpdateEffect = (ShowUpdateEffect == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"ShowUpdateEffect\", iShowUpdateEffect);\n\n\t\t\tstd::string SendErrorsAsNotification = request::findValue(&req, \"SendErrorsAsNotification\");\n\t\t\tint iSendErrorsAsNotification = (SendErrorsAsNotification == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"SendErrorsAsNotification\", iSendErrorsAsNotification);\n\t\t\t_log.ForwardErrorsToNotificationSystem(iSendErrorsAsNotification != 0);\n\n\t\t\tstd::string DegreeDaysBaseTemperature = request::findValue(&req, \"DegreeDaysBaseTemperature\");\n\t\t\tm_sql.UpdatePreferencesVar(\"DegreeDaysBaseTemperature\", DegreeDaysBaseTemperature);\n\n\t\t\trnOldvalue = 0;\n\t\t\tm_sql.GetPreferencesVar(\"EnableEventScriptSystem\", rnOldvalue);\n\t\t\tstd::string EnableEventScriptSystem = request::findValue(&req, \"EnableEventScriptSystem\");\n\t\t\tint iEnableEventScriptSystem = (EnableEventScriptSystem == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableEventScriptSystem\", iEnableEventScriptSystem);\n\t\t\tm_sql.m_bEnableEventSystem = (iEnableEventScriptSystem == 1);\n\t\t\tif (iEnableEventScriptSystem != rnOldvalue)\n\t\t\t{\n\t\t\t\tm_mainworker.m_eventsystem.SetEnabled(m_sql.m_bEnableEventSystem);\n\t\t\t\tm_mainworker.m_eventsystem.StartEventSystem();\n\t\t\t}\n\n\t\t\trnOldvalue = 0;\n\t\t\tm_sql.GetPreferencesVar(\"DisableDzVentsSystem\", rnOldvalue);\n\t\t\tstd::string DisableDzVentsSystem = request::findValue(&req, \"DisableDzVentsSystem\");\n\t\t\tint iDisableDzVentsSystem = (DisableDzVentsSystem == \"on\" ? 0 : 1);\n\t\t\tm_sql.UpdatePreferencesVar(\"DisableDzVentsSystem\", iDisableDzVentsSystem);\n\t\t\tm_sql.m_bDisableDzVentsSystem = (iDisableDzVentsSystem == 1);\n\t\t\tif (m_sql.m_bEnableEventSystem && !iDisableDzVentsSystem && iDisableDzVentsSystem != rnOldvalue)\n\t\t\t{\n\t\t\t\tm_mainworker.m_eventsystem.LoadEvents();\n\t\t\t\tm_mainworker.m_eventsystem.GetCurrentStates();\n\t\t\t}\n\t\t\tm_sql.UpdatePreferencesVar(\"DzVentsLogLevel\", atoi(request::findValue(&req, \"DzVentsLogLevel\").c_str()));\n\n\t\t\tstd::string LogEventScriptTrigger = request::findValue(&req, \"LogEventScriptTrigger\");\n\t\t\tm_sql.m_bLogEventScriptTrigger = (LogEventScriptTrigger == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"LogEventScriptTrigger\", m_sql.m_bLogEventScriptTrigger);\n\n\t\t\tstd::string EnableWidgetOrdering = request::findValue(&req, \"AllowWidgetOrdering\");\n\t\t\tint iEnableAllowWidgetOrdering = (EnableWidgetOrdering == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"AllowWidgetOrdering\", iEnableAllowWidgetOrdering);\n\t\t\tm_sql.m_bAllowWidgetOrdering = (iEnableAllowWidgetOrdering == 1);\n\n\t\t\trnOldvalue = 0;\n\t\t\tm_sql.GetPreferencesVar(\"RemoteSharedPort\", rnOldvalue);\n\n\t\t\tm_sql.UpdatePreferencesVar(\"RemoteSharedPort\", atoi(request::findValue(&req, \"RemoteSharedPort\").c_str()));\n\n\t\t\trnvalue = 0;\n\t\t\tm_sql.GetPreferencesVar(\"RemoteSharedPort\", rnvalue);\n\n\t\t\tif (rnvalue != rnOldvalue)\n\t\t\t{\n\t\t\t\tm_mainworker.m_sharedserver.StopServer();\n\t\t\t\tif (rnvalue != 0)\n\t\t\t\t{\n\t\t\t\t\tchar szPort[100];\n\t\t\t\t\tsprintf(szPort, \"%d\", rnvalue);\n\t\t\t\t\tm_mainworker.m_sharedserver.StartServer(\"::\", szPort);\n\t\t\t\t\tm_mainworker.LoadSharedUsers();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tm_sql.UpdatePreferencesVar(\"Language\", request::findValue(&req, \"Language\").c_str());\n\t\t\tstd::string SelectedTheme = request::findValue(&req, \"Themes\");\n\t\t\tm_sql.UpdatePreferencesVar(\"WebTheme\", SelectedTheme.c_str());\n\t\t\tm_pWebEm->SetWebTheme(SelectedTheme);\n\t\t\tstd::string Title = request::findValue(&req, \"Title\").c_str();\n\t\t\tm_sql.UpdatePreferencesVar(\"Title\", (Title.empty()) ? \"Domoticz\" : Title);\n\n\t\t\tm_sql.GetPreferencesVar(\"RandomTimerFrame\", rnOldvalue);\n\t\t\trnvalue = atoi(request::findValue(&req, \"RandomSpread\").c_str());\n\t\t\tif (rnOldvalue != rnvalue)\n\t\t\t{\n\t\t\t\tm_sql.UpdatePreferencesVar(\"RandomTimerFrame\", rnvalue);\n\t\t\t\tm_mainworker.m_scheduler.ReloadSchedules();\n\t\t\t}\n\n\t\t\tm_sql.UpdatePreferencesVar(\"SecOnDelay\", atoi(request::findValue(&req, \"SecOnDelay\").c_str()));\n\n\t\t\tint sensortimeout = atoi(request::findValue(&req, \"SensorTimeout\").c_str());\n\t\t\tif (sensortimeout < 10)\n\t\t\t\tsensortimeout = 10;\n\t\t\tm_sql.UpdatePreferencesVar(\"SensorTimeout\", sensortimeout);\n\n\t\t\tint batterylowlevel = atoi(request::findValue(&req, \"BatterLowLevel\").c_str());\n\t\t\tif (batterylowlevel > 100)\n\t\t\t\tbatterylowlevel = 100;\n\t\t\tm_sql.GetPreferencesVar(\"BatteryLowNotification\", rnOldvalue);\n\t\t\tm_sql.UpdatePreferencesVar(\"BatteryLowNotification\", batterylowlevel);\n\t\t\tif ((rnOldvalue != batterylowlevel) && (batterylowlevel != 0))\n\t\t\t\tm_sql.CheckBatteryLow();\n\n\t\t\tint nValue = 0;\n\t\t\tnValue = atoi(request::findValue(&req, \"FloorplanPopupDelay\").c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanPopupDelay\", nValue);\n\t\t\tstd::string FloorplanFullscreenMode = request::findValue(&req, \"FloorplanFullscreenMode\");\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanFullscreenMode\", (FloorplanFullscreenMode == \"on\" ? 1 : 0));\n\t\t\tstd::string FloorplanAnimateZoom = request::findValue(&req, \"FloorplanAnimateZoom\");\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanAnimateZoom\", (FloorplanAnimateZoom == \"on\" ? 1 : 0));\n\t\t\tstd::string FloorplanShowSensorValues = request::findValue(&req, \"FloorplanShowSensorValues\");\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanShowSensorValues\", (FloorplanShowSensorValues == \"on\" ? 1 : 0));\n\t\t\tstd::string FloorplanShowSwitchValues = request::findValue(&req, \"FloorplanShowSwitchValues\");\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanShowSwitchValues\", (FloorplanShowSwitchValues == \"on\" ? 1 : 0));\n\t\t\tstd::string FloorplanShowSceneNames = request::findValue(&req, \"FloorplanShowSceneNames\");\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanShowSceneNames\", (FloorplanShowSceneNames == \"on\" ? 1 : 0));\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanRoomColour\", CURLEncode::URLDecode(request::findValue(&req, \"FloorplanRoomColour\").c_str()).c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanActiveOpacity\", atoi(request::findValue(&req, \"FloorplanActiveOpacity\").c_str()));\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanInactiveOpacity\", atoi(request::findValue(&req, \"FloorplanInactiveOpacity\").c_str()));\n\n#ifndef NOCLOUD\n\t\t\tstd::string md_userid, md_password, pf_userid, pf_password;\n\t\t\tint md_subsystems, pf_subsystems;\n\t\t\tm_sql.GetPreferencesVar(\"MyDomoticzUserId\", pf_userid);\n\t\t\tm_sql.GetPreferencesVar(\"MyDomoticzPassword\", pf_password);\n\t\t\tm_sql.GetPreferencesVar(\"MyDomoticzSubsystems\", pf_subsystems);\n\t\t\tmd_userid = CURLEncode::URLDecode(request::findValue(&req, \"MyDomoticzUserId\"));\n\t\t\tmd_password = CURLEncode::URLDecode(request::findValue(&req, \"MyDomoticzPassword\"));\n\t\t\tmd_subsystems = (request::findValue(&req, \"SubsystemHttp\").empty() ? 0 : 1) + (request::findValue(&req, \"SubsystemShared\").empty() ? 0 : 2) + (request::findValue(&req, \"SubsystemApps\").empty() ? 0 : 4);\n\t\t\tif (md_userid != pf_userid || md_password != pf_password || md_subsystems != pf_subsystems) {\n\t\t\t\tm_sql.UpdatePreferencesVar(\"MyDomoticzUserId\", md_userid);\n\t\t\t\tif (md_password != pf_password) {\n\t\t\t\t\tmd_password = base64_encode(md_password);\n\t\t\t\t\tm_sql.UpdatePreferencesVar(\"MyDomoticzPassword\", md_password);\n\t\t\t\t}\n\t\t\t\tm_sql.UpdatePreferencesVar(\"MyDomoticzSubsystems\", md_subsystems);\n\t\t\t\tm_webservers.RestartProxy();\n\t\t\t}\n#endif\n\n\t\t\tm_sql.UpdatePreferencesVar(\"OneWireSensorPollPeriod\", atoi(request::findValue(&req, \"OneWireSensorPollPeriod\").c_str()));\n\t\t\tm_sql.UpdatePreferencesVar(\"OneWireSwitchPollPeriod\", atoi(request::findValue(&req, \"OneWireSwitchPollPeriod\").c_str()));\n\n\t\t\tstd::string IFTTTEnabled = request::findValue(&req, \"IFTTTEnabled\");\n\t\t\tint iIFTTTEnabled = (IFTTTEnabled == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"IFTTTEnabled\", iIFTTTEnabled);\n\t\t\tstd::string szKey = request::findValue(&req, \"IFTTTAPI\");\n\t\t\tm_sql.UpdatePreferencesVar(\"IFTTTAPI\", base64_encode(szKey));\n\n\t\t\tm_notifications.LoadConfig();\n#ifdef ENABLE_PYTHON\n\t\t\t//Signal plugins to update Settings dictionary\n\t\t\tPluginLoadConfig();\n#endif\n\t\t}\n\n\t\tvoid CWebServer::RestoreDatabase(WebEmSession & session, const request& req, std::string & redirect_uri)\n\t\t{\n\t\t\tredirect_uri = \"/index.html\";\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string dbasefile = request::findValue(&req, \"dbasefile\");\n\t\t\tif (dbasefile.empty()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tm_mainworker.StopDomoticzHardware();\n\n\t\t\tm_sql.RestoreDatabase(dbasefile);\n\t\t\tm_mainworker.AddAllDomoticzHardware();\n\t\t}\n\n\t\tstruct _tHardwareListInt {\n\t\t\tstd::string Name;\n\t\t\tint HardwareTypeVal;\n\t\t\tstd::string HardwareType;\n\t\t\tbool Enabled;\n\t\t\tstd::string Mode1; // Used to flag DimmerType as relative for some old LimitLessLight type bulbs\n\t\t\tstd::string Mode2; // Used to flag DimmerType as relative for some old LimitLessLight type bulbs\n\t\t} tHardwareList;\n\n\t\tvoid CWebServer::GetJSonDevices(\n\t\t\tJson::Value &root,\n\t\t\tconst std::string &rused,\n\t\t\tconst std::string &rfilter,\n\t\t\tconst std::string &order,\n\t\t\tconst std::string &rowid,\n\t\t\tconst std::string &planID,\n\t\t\tconst std::string &floorID,\n\t\t\tconst bool bDisplayHidden,\n\t\t\tconst bool bDisplayDisabled,\n\t\t\tconst bool bFetchFavorites,\n\t\t\tconst time_t LastUpdate,\n\t\t\tconst std::string &username,\n\t\t\tconst std::string &hardwareid)\n\t\t{\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\ttime_t now = mytime(NULL);\n\t\t\tstruct tm tm1;\n\t\t\tlocaltime_r(&now, &tm1);\n\t\t\tstruct tm tLastUpdate;\n\t\t\tlocaltime_r(&now, &tLastUpdate);\n\n\t\t\tconst time_t iLastUpdate = LastUpdate - 1;\n\n\t\t\tint SensorTimeOut = 60;\n\t\t\tm_sql.GetPreferencesVar(\"SensorTimeout\", SensorTimeOut);\n\n\t\t\t//Get All Hardware ID's/Names, need them later\n\t\t\tstd::map<int, _tHardwareListInt> _hardwareNames;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Enabled, Type, Mode1, Mode2 FROM Hardware\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\t_tHardwareListInt tlist;\n\t\t\t\t\tint ID = atoi(sd[0].c_str());\n\t\t\t\t\ttlist.Name = sd[1];\n\t\t\t\t\ttlist.Enabled = (atoi(sd[2].c_str()) != 0);\n\t\t\t\t\ttlist.HardwareTypeVal = atoi(sd[3].c_str());\n#ifndef ENABLE_PYTHON\n\t\t\t\t\ttlist.HardwareType = Hardware_Type_Desc(tlist.HardwareTypeVal);\n#else\n\t\t\t\t\tif (tlist.HardwareTypeVal != HTYPE_PythonPlugin)\n\t\t\t\t\t{\n\t\t\t\t\t\ttlist.HardwareType = Hardware_Type_Desc(tlist.HardwareTypeVal);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttlist.HardwareType = PluginHardwareDesc(ID);\n\t\t\t\t\t}\n#endif\n\t\t\t\t\ttlist.Mode1 = sd[4];\n\t\t\t\t\ttlist.Mode2 = sd[5];\n\t\t\t\t\t_hardwareNames[ID] = tlist;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troot[\"ActTime\"] = static_cast<int>(now);\n\n\t\t\tchar szTmp[300];\n\n\t\t\tif (!m_mainworker.m_LastSunriseSet.empty())\n\t\t\t{\n\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\tStringSplit(m_mainworker.m_LastSunriseSet, \";\", strarray);\n\t\t\t\tif (strarray.size() == 10)\n\t\t\t\t{\n\t\t\t\t\t//strftime(szTmp, 80, \"%b %d %Y %X\", &tm1);\n\t\t\t\t\tstrftime(szTmp, 80, \"%Y-%m-%d %X\", &tm1);\n\t\t\t\t\troot[\"ServerTime\"] = szTmp;\n\t\t\t\t\troot[\"Sunrise\"] = strarray[0];\n\t\t\t\t\troot[\"Sunset\"] = strarray[1];\n\t\t\t\t\troot[\"SunAtSouth\"] = strarray[2];\n\t\t\t\t\troot[\"CivTwilightStart\"] = strarray[3];\n\t\t\t\t\troot[\"CivTwilightEnd\"] = strarray[4];\n\t\t\t\t\troot[\"NautTwilightStart\"] = strarray[5];\n\t\t\t\t\troot[\"NautTwilightEnd\"] = strarray[6];\n\t\t\t\t\troot[\"AstrTwilightStart\"] = strarray[7];\n\t\t\t\t\troot[\"AstrTwilightEnd\"] = strarray[8];\n\t\t\t\t\troot[\"DayLength\"] = strarray[9];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchar szOrderBy[50];\n\t\t\tstd::string szQuery;\n\t\t\tbool isAlpha = true;\n\t\t\tconst std::string orderBy = order.c_str();\n\t\t\tfor (size_t i = 0; i < orderBy.size(); i++) {\n\t\t\t\tif (!isalpha(orderBy[i])) {\n\t\t\t\t\tisAlpha = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (order.empty() || (!isAlpha)) {\n\t\t\t\tstrcpy(szOrderBy, \"A.[Order],A.LastUpdate DESC\");\n\t\t\t} else {\n\t\t\t\tsprintf(szOrderBy, \"A.[Order],A.%%s ASC\");\n\t\t\t}\n\n\t\t\tunsigned char tempsign = m_sql.m_tempsign[0];\n\n\t\t\tbool bHaveUser = false;\n\t\t\tint iUser = -1;\n\t\t\tunsigned int totUserDevices = 0;\n\t\t\tbool bShowScenes = true;\n\t\t\tbHaveUser = (username != \"\");\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tiUser = FindUser(username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t{\n\t\t\t\t\t_eUserRights urights = m_users[iUser].userrights;\n\t\t\t\t\tif (urights != URIGHTS_ADMIN)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT DeviceRowID FROM SharedDevices WHERE (SharedUserID == %lu)\", m_users[iUser].ID);\n\t\t\t\t\t\ttotUserDevices = (unsigned int)result.size();\n\t\t\t\t\t\tbShowScenes = (m_users[iUser].ActiveTabs&(1 << 1)) != 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstd::set<std::string> _HiddenDevices;\n\t\t\tbool bAllowDeviceToBeHidden = false;\n\n\t\t\tint ii = 0;\n\t\t\tif (rfilter == \"all\")\n\t\t\t{\n\t\t\t\tif (\n\t\t\t\t\t(bShowScenes) &&\n\t\t\t\t\t((rused == \"all\") || (rused == \"true\"))\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t//add scenes\n\t\t\t\t\tif (rowid != \"\")\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT A.ID, A.Name, A.nValue, A.LastUpdate, A.Favorite, A.SceneType,\"\n\t\t\t\t\t\t\t\" A.Protected, B.XOffset, B.YOffset, B.PlanID, A.Description\"\n\t\t\t\t\t\t\t\" FROM Scenes as A\"\n\t\t\t\t\t\t\t\" LEFT OUTER JOIN DeviceToPlansMap as B ON (B.DeviceRowID==a.ID) AND (B.DevSceneType==1)\"\n\t\t\t\t\t\t\t\" WHERE (A.ID=='%q')\",\n\t\t\t\t\t\t\trowid.c_str());\n\t\t\t\t\telse if ((planID != \"\") && (planID != \"0\"))\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT A.ID, A.Name, A.nValue, A.LastUpdate, A.Favorite, A.SceneType,\"\n\t\t\t\t\t\t\t\" A.Protected, B.XOffset, B.YOffset, B.PlanID, A.Description\"\n\t\t\t\t\t\t\t\" FROM Scenes as A, DeviceToPlansMap as B WHERE (B.PlanID=='%q')\"\n\t\t\t\t\t\t\t\" AND (B.DeviceRowID==a.ID) AND (B.DevSceneType==1) ORDER BY B.[Order]\",\n\t\t\t\t\t\t\tplanID.c_str());\n\t\t\t\t\telse if ((floorID != \"\") && (floorID != \"0\"))\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT A.ID, A.Name, A.nValue, A.LastUpdate, A.Favorite, A.SceneType,\"\n\t\t\t\t\t\t\t\" A.Protected, B.XOffset, B.YOffset, B.PlanID, A.Description\"\n\t\t\t\t\t\t\t\" FROM Scenes as A, DeviceToPlansMap as B, Plans as C\"\n\t\t\t\t\t\t\t\" WHERE (C.FloorplanID=='%q') AND (C.ID==B.PlanID) AND (B.DeviceRowID==a.ID)\"\n\t\t\t\t\t\t\t\" AND (B.DevSceneType==1) ORDER BY B.[Order]\",\n\t\t\t\t\t\t\tfloorID.c_str());\n\t\t\t\t\telse {\n\t\t\t\t\t\tszQuery = (\n\t\t\t\t\t\t\t\"SELECT A.ID, A.Name, A.nValue, A.LastUpdate, A.Favorite, A.SceneType,\"\n\t\t\t\t\t\t\t\" A.Protected, B.XOffset, B.YOffset, B.PlanID, A.Description\"\n\t\t\t\t\t\t\t\" FROM Scenes as A\"\n\t\t\t\t\t\t\t\" LEFT OUTER JOIN DeviceToPlansMap as B ON (B.DeviceRowID==a.ID) AND (B.DevSceneType==1)\"\n\t\t\t\t\t\t\t\" ORDER BY \");\n\t\t\t\t\t\tszQuery += szOrderBy;\n                                                result = m_sql.safe_query(szQuery.c_str(), order.c_str());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\tunsigned char favorite = atoi(sd[4].c_str());\n\t\t\t\t\t\t\t//Check if we only want favorite devices\n\t\t\t\t\t\t\tif ((bFetchFavorites) && (!favorite))\n\t\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t\tstd::string sLastUpdate = sd[3];\n\n\t\t\t\t\t\t\tif (iLastUpdate != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttime_t cLastUpdate;\n\t\t\t\t\t\t\t\tParseSQLdatetime(cLastUpdate, tLastUpdate, sLastUpdate, tm1.tm_isdst);\n\t\t\t\t\t\t\t\tif (cLastUpdate <= iLastUpdate)\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tint nValue = atoi(sd[2].c_str());\n\n\t\t\t\t\t\t\tunsigned char scenetype = atoi(sd[5].c_str());\n\t\t\t\t\t\t\tint iProtected = atoi(sd[6].c_str());\n\n\t\t\t\t\t\t\tstd::string sSceneName = sd[1];\n\t\t\t\t\t\t\tif (!bDisplayHidden && sSceneName[0] == '$')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (scenetype == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = \"Scene\";\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"scene\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = \"Group\";\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"group\";\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// has this scene/group already been seen, now with different plan?\n\t\t\t\t\t\t\t// assume results are ordered such that same device is adjacent\n\t\t\t\t\t\t\t// if the idx and the Type are equal (type to prevent matching against Scene with same idx)\n\t\t\t\t\t\t\tstd::string thisIdx = sd[0];\n\n\t\t\t\t\t\t\tif ((ii > 0) && thisIdx == root[\"result\"][ii - 1][\"idx\"].asString()) {\n\t\t\t\t\t\t\t\tstd::string typeOfThisOne = root[\"result\"][ii][\"Type\"].asString();\n\t\t\t\t\t\t\t\tif (typeOfThisOne == root[\"result\"][ii - 1][\"Type\"].asString()) {\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii - 1][\"PlanIDs\"].append(atoi(sd[9].c_str()));\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sSceneName;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Description\"] = sd[10];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Favorite\"] = favorite;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sLastUpdate;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"PlanID\"] = sd[9].c_str();\n\t\t\t\t\t\t\tJson::Value jsonArray;\n\t\t\t\t\t\t\tjsonArray.append(atoi(sd[9].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"PlanIDs\"] = jsonArray;\n\n\t\t\t\t\t\t\tif (nValue == 0)\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"Off\";\n\t\t\t\t\t\t\telse if (nValue == 1)\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"On\";\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"Mixed\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = root[\"result\"][ii][\"Status\"];\n\t\t\t\t\t\t\tuint64_t camIDX = m_mainworker.m_cameras.IsDevSceneInCamera(1, sd[0]);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"UsedByCamera\"] = (camIDX != 0) ? true : false;\n\t\t\t\t\t\t\tif (camIDX != 0) {\n\t\t\t\t\t\t\t\tstd::stringstream scidx;\n\t\t\t\t\t\t\t\tscidx << camIDX;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CameraIdx\"] = scidx.str();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"XOffset\"] = atoi(sd[7].c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"YOffset\"] = atoi(sd[8].c_str());\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchar szData[250];\n\t\t\tif (totUserDevices == 0)\n\t\t\t{\n\t\t\t\t//All\n\t\t\t\tif (rowid != \"\")\n\t\t\t\t{\n\t\t\t\t\t//_log.Log(LOG_STATUS, \"Getting device with id: %s\", rowid.c_str());\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used, A.Type, A.SubType,\"\n\t\t\t\t\t\t\" A.SignalLevel, A.BatteryLevel, A.nValue, A.sValue,\"\n\t\t\t\t\t\t\" A.LastUpdate, A.Favorite, A.SwitchType, A.HardwareID,\"\n\t\t\t\t\t\t\" A.AddjValue, A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1, A.StrParam2,\"\n\t\t\t\t\t\t\" A.Protected, IFNULL(B.XOffset,0), IFNULL(B.YOffset,0), IFNULL(B.PlanID,0), A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus A LEFT OUTER JOIN DeviceToPlansMap as B ON (B.DeviceRowID==a.ID) \"\n\t\t\t\t\t\t\"WHERE (A.ID=='%q')\",\n\t\t\t\t\t\trowid.c_str());\n\t\t\t\t}\n\t\t\t\telse if ((planID != \"\") && (planID != \"0\"))\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, B.XOffset, B.YOffset,\"\n\t\t\t\t\t\t\" B.PlanID, A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, DeviceToPlansMap as B \"\n\t\t\t\t\t\t\"WHERE (B.PlanID=='%q') AND (B.DeviceRowID==a.ID)\"\n\t\t\t\t\t\t\" AND (B.DevSceneType==0) ORDER BY B.[Order]\",\n\t\t\t\t\t\tplanID.c_str());\n\t\t\t\telse if ((floorID != \"\") && (floorID != \"0\"))\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, B.XOffset, B.YOffset,\"\n\t\t\t\t\t\t\" B.PlanID, A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, DeviceToPlansMap as B,\"\n\t\t\t\t\t\t\" Plans as C \"\n\t\t\t\t\t\t\"WHERE (C.FloorplanID=='%q') AND (C.ID==B.PlanID)\"\n\t\t\t\t\t\t\" AND (B.DeviceRowID==a.ID) AND (B.DevSceneType==0) \"\n\t\t\t\t\t\t\"ORDER BY B.[Order]\",\n\t\t\t\t\t\tfloorID.c_str());\n\t\t\t\telse {\n\t\t\t\t\tif (!bDisplayHidden)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Build a list of Hidden Devices\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM Plans WHERE (Name=='$Hidden Devices')\");\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string pID = result[0][0];\n\t\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT DeviceRowID FROM DeviceToPlansMap WHERE (PlanID=='%q') AND (DevSceneType==0)\",\n\t\t\t\t\t\t\t\tpID.c_str());\n\t\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::vector<std::string> >::const_iterator ittP;\n\t\t\t\t\t\t\t\tfor (ittP = result.begin(); ittP != result.end(); ++ittP)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_HiddenDevices.insert(ittP[0][0]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbAllowDeviceToBeHidden = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (order.empty() || (!isAlpha))\n\t\t\t\t\t\tstrcpy(szOrderBy, \"A.[Order],A.LastUpdate DESC\");\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsprintf(szOrderBy, \"A.[Order],A.%%s ASC\");\n\t\t\t\t\t}\n\t\t\t\t\t//_log.Log(LOG_STATUS, \"Getting all devices: order by %s \", szOrderBy);\n\t\t\t\t\tif (hardwareid != \"\") {\n\t\t\t\t\t\tszQuery = (\n\t\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,A.Type, A.SubType,\"\n\t\t\t\t\t\t\t\" A.SignalLevel, A.BatteryLevel, A.nValue, A.sValue,\"\n\t\t\t\t\t\t\t\" A.LastUpdate, A.Favorite, A.SwitchType, A.HardwareID,\"\n\t\t\t\t\t\t\t\" A.AddjValue, A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1, A.StrParam2,\"\n\t\t\t\t\t\t\t\" A.Protected, IFNULL(B.XOffset,0), IFNULL(B.YOffset,0), IFNULL(B.PlanID,0), A.Description,\"\n\t\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\t\"FROM DeviceStatus as A LEFT OUTER JOIN DeviceToPlansMap as B \"\n\t\t\t\t\t\t\t\"ON (B.DeviceRowID==a.ID) AND (B.DevSceneType==0) \"\n\t\t\t\t\t\t\t\"WHERE (A.HardwareID == %q) \"\n\t\t\t\t\t\t\t\"ORDER BY \");\n\t\t\t\t\t\tszQuery += szOrderBy;\n\t\t\t\t\t\tresult = m_sql.safe_query(szQuery.c_str(), hardwareid.c_str(), order.c_str());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tszQuery = (\n\t\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,A.Type, A.SubType,\"\n\t\t\t\t\t\t\t\" A.SignalLevel, A.BatteryLevel, A.nValue, A.sValue,\"\n\t\t\t\t\t\t\t\" A.LastUpdate, A.Favorite, A.SwitchType, A.HardwareID,\"\n\t\t\t\t\t\t\t\" A.AddjValue, A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1, A.StrParam2,\"\n\t\t\t\t\t\t\t\" A.Protected, IFNULL(B.XOffset,0), IFNULL(B.YOffset,0), IFNULL(B.PlanID,0), A.Description,\"\n\t\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\t\"FROM DeviceStatus as A LEFT OUTER JOIN DeviceToPlansMap as B \"\n\t\t\t\t\t\t\t\"ON (B.DeviceRowID==a.ID) AND (B.DevSceneType==0) \"\n\t\t\t\t\t\t\t\"ORDER BY \");\n\t\t\t\t\t\tszQuery += szOrderBy;\n\t\t\t\t\t\tresult = m_sql.safe_query(szQuery.c_str(), order.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (iUser == -1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//Specific devices\n\t\t\t\tif (rowid != \"\")\n\t\t\t\t{\n\t\t\t\t\t//_log.Log(LOG_STATUS, \"Getting device with id: %s for user %lu\", rowid.c_str(), m_users[iUser].ID);\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, 0 as XOffset,\"\n\t\t\t\t\t\t\" 0 as YOffset, 0 as PlanID, A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, SharedDevices as B \"\n\t\t\t\t\t\t\"WHERE (B.DeviceRowID==a.ID)\"\n\t\t\t\t\t\t\" AND (B.SharedUserID==%lu) AND (A.ID=='%q')\",\n\t\t\t\t\t\tm_users[iUser].ID, rowid.c_str());\n\t\t\t\t}\n\t\t\t\telse if ((planID != \"\") && (planID != \"0\"))\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, C.XOffset,\"\n\t\t\t\t\t\t\" C.YOffset, C.PlanID, A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, SharedDevices as B,\"\n\t\t\t\t\t\t\" DeviceToPlansMap as C \"\n\t\t\t\t\t\t\"WHERE (C.PlanID=='%q') AND (C.DeviceRowID==a.ID)\"\n\t\t\t\t\t\t\" AND (B.DeviceRowID==a.ID) \"\n\t\t\t\t\t\t\"AND (B.SharedUserID==%lu) ORDER BY C.[Order]\",\n\t\t\t\t\t\tplanID.c_str(), m_users[iUser].ID);\n\t\t\t\telse if ((floorID != \"\") && (floorID != \"0\"))\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, C.XOffset, C.YOffset,\"\n\t\t\t\t\t\t\" C.PlanID, A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, SharedDevices as B,\"\n\t\t\t\t\t\t\" DeviceToPlansMap as C, Plans as D \"\n\t\t\t\t\t\t\"WHERE (D.FloorplanID=='%q') AND (D.ID==C.PlanID)\"\n\t\t\t\t\t\t\" AND (C.DeviceRowID==a.ID) AND (B.DeviceRowID==a.ID)\"\n\t\t\t\t\t\t\" AND (B.SharedUserID==%lu) ORDER BY C.[Order]\",\n\t\t\t\t\t\tfloorID.c_str(), m_users[iUser].ID);\n\t\t\t\telse {\n\t\t\t\t\tif (!bDisplayHidden)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Build a list of Hidden Devices\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM Plans WHERE (Name=='$Hidden Devices')\");\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string pID = result[0][0];\n\t\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT DeviceRowID FROM DeviceToPlansMap WHERE (PlanID=='%q')  AND (DevSceneType==0)\",\n\t\t\t\t\t\t\t\tpID.c_str());\n\t\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::vector<std::string> >::const_iterator ittP;\n\t\t\t\t\t\t\t\tfor (ittP = result.begin(); ittP != result.end(); ++ittP)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_HiddenDevices.insert(ittP[0][0]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbAllowDeviceToBeHidden = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (order.empty() || (!isAlpha))\n\t\t\t\t\t{\n\t\t\t\t\t\tstrcpy(szOrderBy, \"A.[Order],A.LastUpdate DESC\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsprintf(szOrderBy, \"A.[Order],A.%%s ASC\");\n\t\t\t\t\t}\n\t\t\t\t\t// _log.Log(LOG_STATUS, \"Getting all devices for user %lu\", m_users[iUser].ID);\n\t\t\t\t\tszQuery = (\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, IFNULL(C.XOffset,0),\"\n\t\t\t\t\t\t\" IFNULL(C.YOffset,0), IFNULL(C.PlanID,0), A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, SharedDevices as B \"\n\t\t\t\t\t\t\"LEFT OUTER JOIN DeviceToPlansMap as C  ON (C.DeviceRowID==A.ID)\"\n\t\t\t\t\t\t\"WHERE (B.DeviceRowID==A.ID)\"\n\t\t\t\t\t\t\" AND (B.SharedUserID==%lu) ORDER BY \");\n\t\t\t\t\tszQuery += szOrderBy;\n\t\t\t\t\tresult = m_sql.safe_query(szQuery.c_str(), m_users[iUser].ID, order.c_str());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tunsigned char favorite = atoi(sd[12].c_str());\n\t\t\t\t\tif ((planID != \"\") && (planID != \"0\"))\n\t\t\t\t\t\tfavorite = 1;\n\n\t\t\t\t\t//Check if we only want favorite devices\n\t\t\t\t\tif ((bFetchFavorites) && (!favorite))\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tstd::string sDeviceName = sd[3];\n\n\t\t\t\t\tif (!bDisplayHidden)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (_HiddenDevices.find(sd[0]) != _HiddenDevices.end())\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif (sDeviceName[0] == '$')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (bAllowDeviceToBeHidden)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tif (planID.size() > 0)\n\t\t\t\t\t\t\t\tsDeviceName = sDeviceName.substr(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint hardwareID = atoi(sd[14].c_str());\n\t\t\t\t\tstd::map<int, _tHardwareListInt>::iterator hItt = _hardwareNames.find(hardwareID);\n\t\t\t\t\tif (hItt != _hardwareNames.end())\n\t\t\t\t\t{\n\t\t\t\t\t\t//ignore sensors where the hardware is disabled\n\t\t\t\t\t\tif ((!bDisplayDisabled) && (!(*hItt).second.Enabled))\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tunsigned int dType = atoi(sd[5].c_str());\n\t\t\t\t\tunsigned int dSubType = atoi(sd[6].c_str());\n\t\t\t\t\tunsigned int used = atoi(sd[4].c_str());\n\t\t\t\t\tint nValue = atoi(sd[9].c_str());\n\t\t\t\t\tstd::string sValue = sd[10];\n\t\t\t\t\tstd::string sLastUpdate = sd[11];\n\t\t\t\t\tif (sLastUpdate.size() > 19)\n\t\t\t\t\t\tsLastUpdate = sLastUpdate.substr(0, 19);\n\n\t\t\t\t\tif (iLastUpdate != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttime_t cLastUpdate;\n\t\t\t\t\t\tParseSQLdatetime(cLastUpdate, tLastUpdate, sLastUpdate, tm1.tm_isdst);\n\t\t\t\t\t\tif (cLastUpdate <= iLastUpdate)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sd[13].c_str());\n\t\t\t\t\t_eMeterType metertype = (_eMeterType)switchtype;\n\t\t\t\t\tdouble AddjValue = atof(sd[15].c_str());\n\t\t\t\t\tdouble AddjMulti = atof(sd[16].c_str());\n\t\t\t\t\tdouble AddjValue2 = atof(sd[17].c_str());\n\t\t\t\t\tdouble AddjMulti2 = atof(sd[18].c_str());\n\t\t\t\t\tint LastLevel = atoi(sd[19].c_str());\n\t\t\t\t\tint CustomImage = atoi(sd[20].c_str());\n\t\t\t\t\tstd::string strParam1 = base64_encode(sd[21]);\n\t\t\t\t\tstd::string strParam2 = base64_encode(sd[22]);\n\t\t\t\t\tint iProtected = atoi(sd[23].c_str());\n\n\t\t\t\t\tstd::string Description = sd[27];\n\t\t\t\t\tstd::string sOptions = sd[28];\n\t\t\t\t\tstd::string sColor = sd[29];\n\t\t\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(sOptions);\n\n\t\t\t\t\tstruct tm ntime;\n\t\t\t\t\ttime_t checktime;\n\t\t\t\t\tParseSQLdatetime(checktime, ntime, sLastUpdate, tm1.tm_isdst);\n\t\t\t\t\tbool bHaveTimeout = (now - checktime >= SensorTimeOut * 60);\n\n\t\t\t\t\tif (dType == pTypeTEMP_RAIN)\n\t\t\t\t\t\tcontinue; //dont want you for now\n\n\t\t\t\t\tif ((rused == \"true\") && (!used))\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(rused == \"false\") &&\n\t\t\t\t\t\t(used)\n\t\t\t\t\t\t)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (rfilter != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif (rfilter == \"light\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeLighting1) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLighting2) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLighting3) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLighting4) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLighting5) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLighting6) &&\n\t\t\t\t\t\t\t\t(dType != pTypeFan) &&\n\t\t\t\t\t\t\t\t(dType != pTypeColorSwitch) &&\n\t\t\t\t\t\t\t\t(dType != pTypeSecurity1) &&\n\t\t\t\t\t\t\t\t(dType != pTypeSecurity2) &&\n\t\t\t\t\t\t\t\t(dType != pTypeEvohome) &&\n\t\t\t\t\t\t\t\t(dType != pTypeEvohomeRelay) &&\n\t\t\t\t\t\t\t\t(dType != pTypeCurtain) &&\n\t\t\t\t\t\t\t\t(dType != pTypeBlinds) &&\n\t\t\t\t\t\t\t\t(dType != pTypeRFY) &&\n\t\t\t\t\t\t\t\t(dType != pTypeChime) &&\n\t\t\t\t\t\t\t\t(dType != pTypeThermostat2) &&\n\t\t\t\t\t\t\t\t(dType != pTypeThermostat3) &&\n\t\t\t\t\t\t\t\t(dType != pTypeThermostat4) &&\n\t\t\t\t\t\t\t\t(dType != pTypeRemote) &&\n\t\t\t\t\t\t\t\t(dType != pTypeGeneralSwitch) &&\n\t\t\t\t\t\t\t\t(dType != pTypeHomeConfort) &&\n\t\t\t\t\t\t\t\t(dType != pTypeChime) &&\n\t\t\t\t\t\t\t\t(dType != pTypeFS20) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXStatus))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRadiator1) && (dSubType == sTypeSmartwaresSwitchRadiator)))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"temp\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP) &&\n\t\t\t\t\t\t\t\t(dType != pTypeHUM) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_HUM) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_HUM_BARO) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_BARO) &&\n\t\t\t\t\t\t\t\t(dType != pTypeEvohomeZone) &&\n\t\t\t\t\t\t\t\t(dType != pTypeEvohomeWater) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeWIND) && (dSubType == sTypeWIND4))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeUV) && (dSubType == sTypeUV3))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeSystemTemp))) &&\n\t\t\t\t\t\t\t\t(dType != pTypeThermostat1) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp))) &&\n\t\t\t\t\t\t\t\t(dType != pTypeRego6XXTemp)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"weather\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeWIND) &&\n\t\t\t\t\t\t\t\t(dType != pTypeRAIN) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_HUM_BARO) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_BARO) &&\n\t\t\t\t\t\t\t\t(dType != pTypeUV) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeVisibility))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeBaro))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation)))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"utility\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeRFXMeter) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorAD))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorVolt))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeVoltage))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeCurrent))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeTextStatus))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeAlert))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypePressure))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeSoilMoisture))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeLeafWetness))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypePercentage))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeWaterflow))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeCustom))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeFan))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeZWaveClock))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeZWaveThermostatMode))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeZWaveThermostatFanMode))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeDistance))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeCounterIncremental))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeManagedCounter))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeKwh))) &&\n\t\t\t\t\t\t\t\t(dType != pTypeCURRENT) &&\n\t\t\t\t\t\t\t\t(dType != pTypeCURRENTENERGY) &&\n\t\t\t\t\t\t\t\t(dType != pTypeENERGY) &&\n\t\t\t\t\t\t\t\t(dType != pTypePOWER) &&\n\t\t\t\t\t\t\t\t(dType != pTypeP1Power) &&\n\t\t\t\t\t\t\t\t(dType != pTypeP1Gas) &&\n\t\t\t\t\t\t\t\t(dType != pTypeYouLess) &&\n\t\t\t\t\t\t\t\t(dType != pTypeAirQuality) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLux) &&\n\t\t\t\t\t\t\t\t(dType != pTypeUsage) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXCounter))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint))) &&\n\t\t\t\t\t\t\t\t(dType != pTypeWEIGHT) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRadiator1) && (dSubType == sTypeSmartwares)))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"wind\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeWIND)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"rain\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeRAIN)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"uv\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeUV)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"baro\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_HUM_BARO) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"zwavealarms\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!((dType == pTypeGeneral) && (dSubType == sTypeZWaveAlarm)))\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// has this device already been seen, now with different plan?\n\t\t\t\t\t// assume results are ordered such that same device is adjacent\n\t\t\t\t\t// if the idx and the Type are equal (type to prevent matching against Scene with same idx)\n\t\t\t\t\tstd::string thisIdx = sd[0];\n\t\t\t\t\tint devIdx = atoi(thisIdx.c_str());\n\n\t\t\t\t\tif ((ii > 0) && thisIdx == root[\"result\"][ii - 1][\"idx\"].asString()) {\n\t\t\t\t\t\tstd::string typeOfThisOne = RFX_Type_Desc(dType, 1);\n\t\t\t\t\t\tif (typeOfThisOne == root[\"result\"][ii - 1][\"Type\"].asString()) {\n\t\t\t\t\t\t\troot[\"result\"][ii - 1][\"PlanIDs\"].append(atoi(sd[26].c_str()));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\troot[\"result\"][ii][\"HardwareID\"] = hardwareID;\n\t\t\t\t\tif (_hardwareNames.find(hardwareID) == _hardwareNames.end())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareName\"] = \"Unknown?\";\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareTypeVal\"] = 0;\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareType\"] = \"Unknown?\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareName\"] = _hardwareNames[hardwareID].Name;\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareTypeVal\"] = _hardwareNames[hardwareID].HardwareTypeVal;\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareType\"] = _hardwareNames[hardwareID].HardwareType;\n\t\t\t\t\t}\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\n\t\t\t\t\tCDomoticzHardwareBase *pHardware = m_mainworker.GetHardware(hardwareID);\n\t\t\t\t\tif (pHardware != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_SolarEdgeAPI)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint seSensorTimeOut = 60 * 24 * 60;\n\t\t\t\t\t\t\tbHaveTimeout = (now - checktime >= seSensorTimeOut * 60);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (pHardware->HwdType == HTYPE_Wunderground)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCWunderground *pWHardware = reinterpret_cast<CWunderground *>(pHardware);\n\t\t\t\t\t\t\tstd::string forecast_url = pWHardware->GetForecastURL();\n\t\t\t\t\t\t\tif (forecast_url != \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (pHardware->HwdType == HTYPE_DarkSky)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCDarkSky *pWHardware = reinterpret_cast<CDarkSky*>(pHardware);\n\t\t\t\t\t\t\tstd::string forecast_url = pWHardware->GetForecastURL();\n\t\t\t\t\t\t\tif (forecast_url != \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (pHardware->HwdType == HTYPE_AccuWeather)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCAccuWeather *pWHardware = reinterpret_cast<CAccuWeather*>(pHardware);\n\t\t\t\t\t\t\tstd::string forecast_url = pWHardware->GetForecastURL();\n\t\t\t\t\t\t\tif (forecast_url != \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (pHardware->HwdType == HTYPE_OpenWeatherMap)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCOpenWeatherMap *pWHardware = reinterpret_cast<COpenWeatherMap*>(pHardware);\n\t\t\t\t\t\t\tstd::string forecast_url = pWHardware->GetForecastURL();\n\t\t\t\t\t\t\tif (forecast_url != \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((pHardware != NULL) && (pHardware->HwdType == HTYPE_PythonPlugin))\n\t\t\t\t\t{\n\t\t\t\t\t\t// Device ID special formatting should not be applied to Python plugins\n\t\t\t\t\t\troot[\"result\"][ii][\"ID\"] = sd[1];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsprintf(szData, \"%04X\", (unsigned int)atoi(sd[1].c_str()));\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(dType == pTypeTEMP) ||\n\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM) ||\n\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t(dType == pTypeBARO) ||\n\t\t\t\t\t\t\t(dType == pTypeHUM) ||\n\t\t\t\t\t\t\t(dType == pTypeWIND) ||\n\t\t\t\t\t\t\t(dType == pTypeRAIN) ||\n\t\t\t\t\t\t\t(dType == pTypeUV) ||\n\t\t\t\t\t\t\t(dType == pTypeCURRENT) ||\n\t\t\t\t\t\t\t(dType == pTypeCURRENTENERGY) ||\n\t\t\t\t\t\t\t(dType == pTypeENERGY) ||\n\t\t\t\t\t\t\t(dType == pTypeRFXMeter) ||\n\t\t\t\t\t\t\t(dType == pTypeAirQuality) ||\n\t\t\t\t\t\t\t(dType == pTypeRFXSensor) ||\n\t\t\t\t\t\t\t(dType == pTypeP1Power) ||\n\t\t\t\t\t\t\t(dType == pTypeP1Gas)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ID\"] = szData;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ID\"] = sd[1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\troot[\"result\"][ii][\"Unit\"] = atoi(sd[2].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"Type\"] = RFX_Type_Desc(dType, 1);\n\t\t\t\t\troot[\"result\"][ii][\"SubType\"] = RFX_Type_SubType_Desc(dType, dSubType);\n\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = RFX_Type_Desc(dType, 2);\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sDeviceName;\n\t\t\t\t\troot[\"result\"][ii][\"Description\"] = Description;\n\t\t\t\t\troot[\"result\"][ii][\"Used\"] = used;\n\t\t\t\t\troot[\"result\"][ii][\"Favorite\"] = favorite;\n\n\t\t\t\t\tint iSignalLevel = atoi(sd[7].c_str());\n\t\t\t\t\tif (iSignalLevel < 12)\n\t\t\t\t\t\troot[\"result\"][ii][\"SignalLevel\"] = iSignalLevel;\n\t\t\t\t\telse\n\t\t\t\t\t\troot[\"result\"][ii][\"SignalLevel\"] = \"-\";\n\t\t\t\t\troot[\"result\"][ii][\"BatteryLevel\"] = atoi(sd[8].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sLastUpdate;\n\t\t\t\t\troot[\"result\"][ii][\"CustomImage\"] = CustomImage;\n\t\t\t\t\troot[\"result\"][ii][\"XOffset\"] = sd[24].c_str();\n\t\t\t\t\troot[\"result\"][ii][\"YOffset\"] = sd[25].c_str();\n\t\t\t\t\troot[\"result\"][ii][\"PlanID\"] = sd[26].c_str();\n\t\t\t\t\tJson::Value jsonArray;\n\t\t\t\t\tjsonArray.append(atoi(sd[26].c_str()));\n\t\t\t\t\troot[\"result\"][ii][\"PlanIDs\"] = jsonArray;\n\t\t\t\t\troot[\"result\"][ii][\"AddjValue\"] = AddjValue;\n\t\t\t\t\troot[\"result\"][ii][\"AddjMulti\"] = AddjMulti;\n\t\t\t\t\troot[\"result\"][ii][\"AddjValue2\"] = AddjValue2;\n\t\t\t\t\troot[\"result\"][ii][\"AddjMulti2\"] = AddjMulti2;\n\n\t\t\t\t\tstd::stringstream s_data;\n\t\t\t\t\ts_data << int(nValue) << \", \" << sValue;\n\t\t\t\t\troot[\"result\"][ii][\"Data\"] = s_data.str();\n\n\t\t\t\t\troot[\"result\"][ii][\"Notifications\"] = (m_notifications.HasNotifications(sd[0]) == true) ? \"true\" : \"false\";\n\t\t\t\t\troot[\"result\"][ii][\"ShowNotifications\"] = true;\n\n\t\t\t\t\tbool bHasTimers = false;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(dType == pTypeLighting1) ||\n\t\t\t\t\t\t(dType == pTypeLighting2) ||\n\t\t\t\t\t\t(dType == pTypeLighting3) ||\n\t\t\t\t\t\t(dType == pTypeLighting4) ||\n\t\t\t\t\t\t(dType == pTypeLighting5) ||\n\t\t\t\t\t\t(dType == pTypeLighting6) ||\n\t\t\t\t\t\t(dType == pTypeFan) ||\n\t\t\t\t\t\t(dType == pTypeColorSwitch) ||\n\t\t\t\t\t\t(dType == pTypeCurtain) ||\n\t\t\t\t\t\t(dType == pTypeBlinds) ||\n\t\t\t\t\t\t(dType == pTypeRFY) ||\n\t\t\t\t\t\t(dType == pTypeChime) ||\n\t\t\t\t\t\t(dType == pTypeThermostat2) ||\n\t\t\t\t\t\t(dType == pTypeThermostat3) ||\n\t\t\t\t\t\t(dType == pTypeThermostat4) ||\n\t\t\t\t\t\t(dType == pTypeRemote) ||\n\t\t\t\t\t\t(dType == pTypeGeneralSwitch) ||\n\t\t\t\t\t\t(dType == pTypeHomeConfort) ||\n\t\t\t\t\t\t(dType == pTypeFS20) ||\n\t\t\t\t\t\t((dType == pTypeRadiator1) && (dSubType == sTypeSmartwaresSwitchRadiator)) ||\n\t\t\t\t\t\t((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXStatus))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\t//add light details\n\t\t\t\t\t\tbHasTimers = m_sql.HasTimers(sd[0]);\n\n\t\t\t\t\t\tbHaveTimeout = false;\n#ifdef WITH_OPENZWAVE\n\t\t\t\t\t\tif (pHardware != NULL)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_OpenZWave)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCOpenZWave *pZWave = reinterpret_cast<COpenZWave*>(pHardware);\n\t\t\t\t\t\t\t\tunsigned long ID;\n\t\t\t\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\t\t\t\ts_strid << std::hex << sd[1];\n\t\t\t\t\t\t\t\ts_strid >> ID;\n\t\t\t\t\t\t\t\tint nodeID = (ID & 0x0000FF00) >> 8;\n\t\t\t\t\t\t\t\tbHaveTimeout = pZWave->HasNodeFailed(nodeID);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n#endif\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\tint maxDimLevel = 0;\n\n\t\t\t\t\t\tGetLightStatus(dType, dSubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam1\"] = strParam1;\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam2\"] = strParam2;\n\n\t\t\t\t\t\tstd::string IconFile = \"Light\";\n\t\t\t\t\t\tstd::map<int, int>::const_iterator ittIcon = m_custom_light_icons_lookup.find(CustomImage);\n\t\t\t\t\t\tif (ittIcon != m_custom_light_icons_lookup.end())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIconFile = m_custom_light_icons[ittIcon->second].RootFile;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = IconFile;\n\n\t\t\t\t\t\tif (switchtype == STYPE_Dimmer)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = LastLevel;\n\t\t\t\t\t\t\tint iLevel = round((float(maxDimLevel) / 100.0f)*LastLevel);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelInt\"] = iLevel;\n\t\t\t\t\t\t\tif ((dType == pTypeColorSwitch) ||\n\t\t\t\t\t\t\t    (dType == pTypeLighting5 && dSubType == sTypeTRC02) ||\n\t\t\t\t\t\t\t    (dType == pTypeLighting5 && dSubType == sTypeTRC02_2) ||\n\t\t\t\t\t\t\t    (dType == pTypeGeneralSwitch && dSubType == sSwitchTypeTRC02) ||\n\t\t\t\t\t\t\t    (dType == pTypeGeneralSwitch && dSubType == sSwitchTypeTRC02_2))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_tColor color(sColor);\n\t\t\t\t\t\t\t\tstd::string jsonColor = color.toJSONString();\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Color\"] = jsonColor;\n\t\t\t\t\t\t\t\tllevel = LastLevel;\n\t\t\t\t\t\t\t\tif (lstatus == \"Set Level\" || lstatus == \"Set Color\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"Set Level: %d %%\", LastLevel);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = llevel;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelInt\"] = atoi(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveDimmer\"] = bHaveDimmer;\n\t\t\t\t\t\tstd::string DimmerType = \"none\";\n\t\t\t\t\t\tif (switchtype == STYPE_Dimmer)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDimmerType = \"abs\";\n\t\t\t\t\t\t\tif (_hardwareNames.find(hardwareID) != _hardwareNames.end())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Milight V4/V5 bridges do not support absolute dimming for RGB or CW_WW lights\n\t\t\t\t\t\t\t\tif (_hardwareNames[hardwareID].HardwareTypeVal == HTYPE_LimitlessLights &&\n\t\t\t\t\t\t\t\t    atoi(_hardwareNames[hardwareID].Mode2.c_str()) != CLimitLess::LBTYPE_V6 &&\n\t\t\t\t\t\t\t\t\t(atoi(_hardwareNames[hardwareID].Mode1.c_str()) == sTypeColor_RGB ||\n\t\t\t\t\t\t\t\t\t atoi(_hardwareNames[hardwareID].Mode1.c_str()) == sTypeColor_White ||\n\t\t\t\t\t\t\t\t\t atoi(_hardwareNames[hardwareID].Mode1.c_str()) == sTypeColor_CW_WW))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDimmerType = \"rel\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"DimmerType\"] = DimmerType;\n\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = maxDimLevel;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveGroupCmd\"] = bHaveGroupCmd;\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = Switch_Type_Desc(switchtype);\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = switchtype;\n\t\t\t\t\t\tuint64_t camIDX = m_mainworker.m_cameras.IsDevSceneInCamera(0, sd[0]);\n\t\t\t\t\t\troot[\"result\"][ii][\"UsedByCamera\"] = (camIDX != 0) ? true : false;\n\t\t\t\t\t\tif (camIDX != 0) {\n\t\t\t\t\t\t\tstd::stringstream scidx;\n\t\t\t\t\t\t\tscidx << camIDX;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CameraIdx\"] = scidx.str();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbool bIsSubDevice = false;\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > resultSD;\n\t\t\t\t\t\tresultSD = m_sql.safe_query(\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q')\",\n\t\t\t\t\t\t\tsd[0].c_str());\n\t\t\t\t\t\tbIsSubDevice = (resultSD.size() > 0);\n\n\t\t\t\t\t\troot[\"result\"][ii][\"IsSubDevice\"] = bIsSubDevice;\n\n\t\t\t\t\t\tif (switchtype == STYPE_Doorbell)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"doorbell\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"\";//\"Pressed\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_DoorContact)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Door\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"door\";\n\t\t\t\t\t\t\tbool bIsOn = IsLightSwitchOn(lstatus);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"InternalState\"] = (bIsOn == true) ? \"Open\" : \"Closed\";\n\t\t\t\t\t\t\tif (bIsOn) {\n\t\t\t\t\t\t\t\tlstatus = \"Open\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Closed\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_DoorLock)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Door\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"door\";\n\t\t\t\t\t\t\tbool bIsOn = IsLightSwitchOn(lstatus);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"InternalState\"] = (bIsOn == true) ? \"Locked\" : \"Unlocked\";\n\t\t\t\t\t\t\tif (bIsOn) {\n\t\t\t\t\t\t\t\tlstatus = \"Locked\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Unlocked\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_DoorLockInverted)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Door\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"door\";\n\t\t\t\t\t\t\tbool bIsOn = IsLightSwitchOn(lstatus);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"InternalState\"] = (bIsOn == true) ? \"Unlocked\" : \"Locked\";\n\t\t\t\t\t\t\tif (bIsOn) {\n\t\t\t\t\t\t\t\tlstatus = \"Unlocked\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Locked\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_PushOn)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Push\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"push\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"InternalState\"] = (IsLightSwitchOn(lstatus) == true) ? \"On\" : \"Off\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_PushOff)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Push\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"push\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"pushoff\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_X10Siren)\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"siren\";\n\t\t\t\t\t\telse if (switchtype == STYPE_SMOKEDETECTOR)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"smoke\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = STYPE_SMOKEDETECTOR;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = Switch_Type_Desc(STYPE_SMOKEDETECTOR);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_Contact)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Contact\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"contact\";\n\t\t\t\t\t\t\tbool bIsOn = IsLightSwitchOn(lstatus);\n\t\t\t\t\t\t\tif (bIsOn) {\n\t\t\t\t\t\t\t\tlstatus = \"Open\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Closed\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_Media)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ((pHardware != NULL) && (pHardware->HwdType == HTYPE_LogitechMediaServer))\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"LogitechMediaServer\";\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Media\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = Media_Player_States((_eMediaStatus)nValue);\n\t\t\t\t\t\t\tlstatus = sValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (\n\t\t\t\t\t\t\t(switchtype == STYPE_Blinds) ||\n\t\t\t\t\t\t\t(switchtype == STYPE_VenetianBlindsUS) ||\n\t\t\t\t\t\t\t(switchtype == STYPE_VenetianBlindsEU)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"blinds\";\n\t\t\t\t\t\t\tif ((lstatus == \"On\") || (lstatus == \"Close inline relay\")) {\n\t\t\t\t\t\t\t\tlstatus = \"Closed\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ((lstatus == \"Stop\") || (lstatus == \"Stop inline relay\")) {\n\t\t\t\t\t\t\t\tlstatus = \"Stopped\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Open\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_BlindsInverted)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"blinds\";\n\t\t\t\t\t\t\tif (lstatus == \"On\") {\n\t\t\t\t\t\t\t\tlstatus = \"Open\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Closed\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((switchtype == STYPE_BlindsPercentage) || (switchtype == STYPE_BlindsPercentageInverted))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"blinds\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = LastLevel;\n\t\t\t\t\t\t\tint iLevel = round((float(maxDimLevel) / 100.0f)*LastLevel);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelInt\"] = iLevel;\n\t\t\t\t\t\t\tif (lstatus == \"On\") {\n\t\t\t\t\t\t\t\tlstatus = (switchtype == STYPE_BlindsPercentage) ? \"Closed\" : \"Open\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (lstatus == \"Off\") {\n\t\t\t\t\t\t\t\tlstatus = (switchtype == STYPE_BlindsPercentage) ? \"Open\" : \"Closed\";\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_Dimmer)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"dimmer\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_Motion)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"motion\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_Selector)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string selectorStyle = options[\"SelectorStyle\"];\n\t\t\t\t\t\t\tstd::string levelOffHidden = options[\"LevelOffHidden\"];\n\t\t\t\t\t\t\tstd::string levelNames = options[\"LevelNames\"];\n\t\t\t\t\t\t\tstd::string levelActions = options[\"LevelActions\"];\n\t\t\t\t\t\t\tif (selectorStyle.empty()) {\n\t\t\t\t\t\t\t\tselectorStyle.assign(\"0\"); // default is 'button set'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (levelOffHidden.empty()) {\n\t\t\t\t\t\t\t\tlevelOffHidden.assign(\"false\"); // default is 'not hidden'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (levelNames.empty()) {\n\t\t\t\t\t\t\t\tlevelNames.assign(\"Off\"); // default is Off only\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Light\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SelectorStyle\"] = atoi(selectorStyle.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelOffHidden\"] = (levelOffHidden == \"true\");\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelNames\"] = base64_encode(levelNames);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelActions\"] = base64_encode(levelActions);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsprintf(szData, \"%s\", lstatus.c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeSecurity1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\tint maxDimLevel = 0;\n\n\t\t\t\t\t\tGetLightStatus(dType, dSubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveDimmer\"] = bHaveDimmer;\n\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = maxDimLevel;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveGroupCmd\"] = bHaveGroupCmd;\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = \"Security\";\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = switchtype; //was 0?;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"security\";\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam1\"] = strParam1;\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam2\"] = strParam2;\n\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\n\t\t\t\t\t\tif ((dSubType == sTypeKD101) || (dSubType == sTypeSA30) || (switchtype == STYPE_SMOKEDETECTOR))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = STYPE_SMOKEDETECTOR;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"smoke\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = Switch_Type_Desc(STYPE_SMOKEDETECTOR);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsprintf(szData, \"%s\", lstatus.c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeSecurity2)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\tint maxDimLevel = 0;\n\n\t\t\t\t\t\tGetLightStatus(dType, dSubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveDimmer\"] = bHaveDimmer;\n\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = maxDimLevel;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveGroupCmd\"] = bHaveGroupCmd;\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = \"Security\";\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = switchtype; //was 0?;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"security\";\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam1\"] = strParam1;\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam2\"] = strParam2;\n\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\t\t\t\t\t\tsprintf(szData, \"%s\", lstatus.c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeEvohome || dType == pTypeEvohomeRelay)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\tint maxDimLevel = 0;\n\n\t\t\t\t\t\tGetLightStatus(dType, dSubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveDimmer\"] = bHaveDimmer;\n\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = maxDimLevel;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveGroupCmd\"] = bHaveGroupCmd;\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = \"evohome\";\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = switchtype; //was 0?;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"override_mini\";\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam1\"] = strParam1;\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam2\"] = strParam2;\n\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\n\t\t\t\t\t\tsprintf(szData, \"%s\", lstatus.c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\n\t\t\t\t\t\tif (dType == pTypeEvohomeRelay)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = \"TPI\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = llevel;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelInt\"] = atoi(sValue.c_str());\n\t\t\t\t\t\t\tif (root[\"result\"][ii][\"Unit\"].asInt() > 100)\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = true;\n\n\t\t\t\t\t\t\tsprintf(szData, \"%s: %d\", lstatus.c_str(), atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"override_mini\";\n\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() >= 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint i = 0;\n\t\t\t\t\t\t\tdouble tempCelcius = atof(strarray[i++].c_str());\n\t\t\t\t\t\t\tdouble temp = ConvertTemperature(tempCelcius, tempsign);\n\t\t\t\t\t\t\tdouble tempSetPoint;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = temp;\n\t\t\t\t\t\t\tif (dType == pTypeEvohomeZone)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttempCelcius = atof(strarray[i++].c_str());\n\t\t\t\t\t\t\t\ttempSetPoint = ConvertTemperature(tempCelcius, tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"SetPoint\"] = tempSetPoint;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"State\"] = strarray[i++];\n\n\t\t\t\t\t\t\tstd::string strstatus = strarray[i++];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = strstatus;\n\n\t\t\t\t\t\t\tif ((dType == pTypeEvohomeZone || dType == pTypeEvohomeWater) && strarray.size() >= 4)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Until\"] = strarray[i++];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (dType == pTypeEvohomeZone)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tempCelcius == 325.1)\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"Off\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f %c\", tempSetPoint, tempsign);\n\t\t\t\t\t\t\t\tif (strarray.size() >= 4)\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, (%s), %s until %s\", temp, tempsign, szTmp, strstatus.c_str(), strarray[3].c_str());\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, (%s), %s\", temp, tempsign, szTmp, strstatus.c_str());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tif (strarray.size() >= 4)\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %s, %s until %s\", temp, tempsign, strarray[1].c_str(), strstatus.c_str(), strarray[3].c_str());\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %s, %s\", temp, tempsign, strarray[1].c_str(), strstatus.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeTEMP) || (dType == pTypeRego6XXTemp))\n\t\t\t\t\t{\n\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(sValue.c_str()), tempsign);\n\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\tsprintf(szData, \"%.1f %c\", tvalue, tempsign);\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeThermostat1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 4)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(strarray[0].c_str()), tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c\", tvalue, tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp))\n\t\t\t\t\t{\n\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(sValue.c_str()), tempsign);\n\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\tsprintf(szData, \"%.1f %c\", tvalue, tempsign);\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"temperature\";\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeHUM)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"Humidity\"] = nValue;\n\t\t\t\t\t\troot[\"result\"][ii][\"HumidityStatus\"] = RFX_Humidity_Status_Desc(atoi(sValue.c_str()));\n\t\t\t\t\t\tsprintf(szData, \"Humidity %d %%\", nValue);\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeTEMP_HUM)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble tempCelcius = atof(strarray[0].c_str());\n\t\t\t\t\t\t\tdouble temp = ConvertTemperature(tempCelcius, tempsign);\n\t\t\t\t\t\t\tint humidity = atoi(strarray[1].c_str());\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = temp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Humidity\"] = humidity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HumidityStatus\"] = RFX_Humidity_Status_Desc(atoi(strarray[2].c_str()));\n\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %d %%\", temp, tempsign, atoi(strarray[1].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t\t//Calculate dew point\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", ConvertTemperature(CalculateDewPoint(tempCelcius, humidity), tempsign));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"DewPoint\"] = szTmp;\n\n\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 5)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble tempCelcius = atof(strarray[0].c_str());\n\t\t\t\t\t\t\tdouble temp = ConvertTemperature(tempCelcius, tempsign);\n\t\t\t\t\t\t\tint humidity = atoi(strarray[1].c_str());\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = temp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Humidity\"] = humidity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HumidityStatus\"] = RFX_Humidity_Status_Desc(atoi(strarray[2].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Forecast\"] = atoi(strarray[4].c_str());\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", ConvertTemperature(CalculateDewPoint(tempCelcius, humidity), tempsign));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"DewPoint\"] = szTmp;\n\n\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Barometer\"] = atof(strarray[3].c_str());\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ForecastStr\"] = RFX_WSForecast_Desc(atoi(strarray[4].c_str()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Barometer\"] = atoi(strarray[3].c_str());\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ForecastStr\"] = RFX_Forecast_Desc(atoi(strarray[4].c_str()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %d %%, %.1f hPa\",\n\t\t\t\t\t\t\t\t\ttemp,\n\t\t\t\t\t\t\t\t\ttempsign,\n\t\t\t\t\t\t\t\t\tatoi(strarray[1].c_str()),\n\t\t\t\t\t\t\t\t\tatof(strarray[3].c_str())\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %d %%, %d hPa\",\n\t\t\t\t\t\t\t\t\ttemp,\n\t\t\t\t\t\t\t\t\ttempsign,\n\t\t\t\t\t\t\t\t\tatoi(strarray[1].c_str()),\n\t\t\t\t\t\t\t\t\tatoi(strarray[3].c_str())\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() >= 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(strarray[0].c_str()), tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\t\tint forecast = atoi(strarray[2].c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Forecast\"] = forecast;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ForecastStr\"] = BMP_Forecast_Desc(forecast);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Barometer\"] = atof(strarray[1].c_str());\n\n\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %.1f hPa\",\n\t\t\t\t\t\t\t\ttvalue,\n\t\t\t\t\t\t\t\ttempsign,\n\t\t\t\t\t\t\t\tatof(strarray[1].c_str())\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeUV)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat UVI = static_cast<float>(atof(strarray[0].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"UVI\"] = strarray[0];\n\t\t\t\t\t\t\tif (dSubType == sTypeUV3)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(strarray[1].c_str()), tempsign);\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f UVI, %.1f&deg; %c\", UVI, tvalue, tempsign);\n\n\t\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f UVI\", UVI);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeWIND)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 6)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Direction\"] = atof(strarray[0].c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"DirectionStr\"] = strarray[1];\n\n\t\t\t\t\t\t\tif (dSubType != sTypeWIND5)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint intSpeed = atoi(strarray[2].c_str());\n\t\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfloat windms = float(intSpeed) * 0.1f;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windms));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Speed\"] = szTmp;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//if (dSubType!=sTypeWIND6) //problem in RFXCOM firmware? gust=speed?\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint intGust = atoi(strarray[3].c_str());\n\t\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) *m_sql.m_windscale);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfloat gustms = float(intGust) * 0.1f;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(gustms));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Gust\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dSubType == sTypeWIND4) || (dSubType == sTypeWINDNoTemp))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dSubType == sTypeWIND4)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(strarray[4].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(strarray[5].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Chill\"] = tvalue;\n\n\t\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeRAIN)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//get lowest value of today, and max rate\n\t\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\n\t\t\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\n\t\t\t\t\t\t\t\t\t\"SELECT MIN(Total), MAX(Total) FROM Rain WHERE (DeviceRowID='%q' AND Date>='%q')\", sd[0].c_str(), szDate);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\n\t\t\t\t\t\t\t\t\t\"SELECT Total, Total FROM Rain WHERE (DeviceRowID='%q' AND Date>='%q') ORDER BY ROWID DESC LIMIT 1\", sd[0].c_str(), szDate);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble total_real = 0;\n\t\t\t\t\t\t\t\tfloat rate = 0;\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\t\t\t\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble total_min = atof(sd2[0].c_str());\n\t\t\t\t\t\t\t\t\tdouble total_max = atof(strarray[1].c_str());\n\t\t\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttotal_real = atof(sd2[1].c_str());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttotal_real *= AddjMulti;\n\t\t\t\t\t\t\t\trate = (static_cast<float>(atof(strarray[0].c_str())) / 100.0f)*float(AddjMulti);\n\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", total_real);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Rain\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%g\", rate);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"RainRate\"] = szTmp;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Rain\"] = \"0\";\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"RainRate\"] = \"0\";\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = \"0\";\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeRFXMeter)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string ValueQuantity = options[\"ValueQuantity\"];\n\t\t\t\t\t\tstd::string ValueUnits = options[\"ValueUnits\"];\n\n\t\t\t\t\t\tif (ValueQuantity.empty()) {\n\t\t\t\t\t\t\tValueQuantity.assign(\"Count\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ValueUnits.empty()) {\n\t\t\t\t\t\t\tValueUnits.assign(\"\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//get value of today\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\", sd[0].c_str(), szDate);\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\tuint64_t total_min = std::stoull(sd2[0]);\n\t\t\t\t\t\t\tuint64_t total_max = std::stoull(sValue);\n\t\t\t\t\t\t\tuint64_t total_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%\" PRIu64, total_real);\n\n\t\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\t\t\t\t\t\t\tfloat musage = 0.0f;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / (divider / 1000.0f);\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d Liter\", round(musage));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%\" PRIu64, total_real);\n\t\t\t\t\t\t\t\tif (!ValueUnits.empty())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcat(szTmp, \" \");\n\t\t\t\t\t\t\t\t\tstrcat(szTmp, ValueUnits.c_str());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstrcpy(szTmp, \"?\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = \"\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = \"\";\n\n\t\t\t\t\t\tdouble meteroffset = AddjValue;\n\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\tdouble dvalue = static_cast<double>(atof(sValue.c_str()));\n\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeCounterIncremental))\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string ValueQuantity = options[\"ValueQuantity\"];\n\t\t\t\t\t\tstd::string ValueUnits = options[\"ValueUnits\"];\n\t\t\t\t\t\tif (ValueQuantity.empty()) {\n\t\t\t\t\t\t\tValueQuantity.assign(\"Count\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ValueUnits.empty()) {\n\t\t\t\t\t\t\tValueUnits.assign(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\t//get value of today\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\", sd[0].c_str(), szDate);\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\tuint64_t total_min = std::stoull(sd2[0]);\n\t\t\t\t\t\t\tuint64_t total_max = std::stoull(sValue);\n\t\t\t\t\t\t\tuint64_t total_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%\" PRIu64, total_real);\n\n\t\t\t\t\t\t\tfloat musage = 0;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%\" PRIu64, total_real);\n\t\t\t\t\t\t\t\tif (!ValueUnits.empty())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcat(szTmp, \" \");\n\t\t\t\t\t\t\t\t\tstrcat(szTmp, ValueUnits.c_str());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = sValue;\n\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"counter\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = \"\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = \"\";\n\t\t\t\t\t\tdouble dvalue = static_cast<double>(atof(sValue.c_str()));\n\t\t\t\t\t\tdouble meteroffset = AddjValue;\n\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%\" PRIu64 \" %s\", static_cast<uint64_t>(meteroffset + dvalue), ValueUnits.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeManagedCounter))\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string ValueQuantity = options[\"ValueQuantity\"];\n\t\t\t\t\t\tstd::string ValueUnits = options[\"ValueUnits\"];\n\t\t\t\t\t\tif (ValueQuantity.empty()) {\n\t\t\t\t\t\t\tValueQuantity.assign(\"Count\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ValueUnits.empty()) {\n\t\t\t\t\t\t\tValueUnits.assign(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\tstd::vector<std::string> splitresults;\n\t\t\t\t\t\tStringSplit(sValue, \";\", splitresults);\n\t\t\t\t\t\tdouble dvalue;\n\t\t\t\t\t\tif (splitresults.size() < 2) {\n\t\t\t\t\t\t\tdvalue = static_cast<double>(atof(sValue.c_str()));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdvalue = static_cast<double>(atof(splitresults[1].c_str()));\n\t\t\t\t\t\t\tif (dvalue < 0.0) {\n\t\t\t\t\t\t\t\tdvalue = static_cast<double>(atof(splitresults[0].c_str()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = root[\"result\"][ii][\"Counter\"];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"counter\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = \"\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = \"\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ShowNotifications\"] = false;\n\t\t\t\t\t\tdouble meteroffset = AddjValue;\n\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeYouLess)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string ValueQuantity = options[\"ValueQuantity\"];\n\t\t\t\t\t\tstd::string ValueUnits = options[\"ValueUnits\"];\n\t\t\t\t\t\tfloat musage = 0;\n\t\t\t\t\t\tif (ValueQuantity.empty()) {\n\t\t\t\t\t\t\tValueQuantity.assign(\"Count\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ValueUnits.empty()) {\n\t\t\t\t\t\t\tValueUnits.assign(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\t//get value of today\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\", sd[0].c_str(), szDate);\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\tunsigned long long total_min = std::strtoull(sd2[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max = std::strtoull(sd2[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real;\n\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real);\n\n\t\t\t\t\t\t\tmusage = 0;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%llu %s\", total_real, ValueUnits.c_str());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\n\n\t\t\t\t\t\tstd::vector<std::string> splitresults;\n\t\t\t\t\t\tStringSplit(sValue, \";\", splitresults);\n\t\t\t\t\t\tif (splitresults.size() < 2)\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\tunsigned long long total_actual = std::strtoull(splitresults[0].c_str(), nullptr, 10);\n\t\t\t\t\t\tmusage = 0;\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tmusage = float(total_actual) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", musage);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tmusage = float(total_actual) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", musage);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_actual);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\n\t\t\t\t\t\tunsigned long long acounter = std::strtoull(sValue.c_str(), nullptr, 10);\n\t\t\t\t\t\tmusage = 0;\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tmusage = float(acounter) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh %s Watt\", musage, splitresults[1].c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\tmusage = float(acounter) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tmusage = float(acounter) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu %s\", acounter, ValueUnits.c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = \"\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = \"\";\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%s Watt\", splitresults[1].c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%s m3\", splitresults[1].c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%s m3\", splitresults[1].c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%s\", splitresults[1].c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\troot[\"result\"][ii][\"Usage\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> splitresults;\n\t\t\t\t\t\tStringSplit(sValue, \";\", splitresults);\n\t\t\t\t\t\tif (splitresults.size() != 6)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = MTYPE_ENERGY;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = \"0\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterDeliv\"] = \"0\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Usage\"] = \"Invalid\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"UsageDeliv\"] = \"Invalid\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = \"Invalid!: \" + sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = true;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = \"Invalid\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterDelivToday\"] = \"Invalid\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat EnergyDivider = 1000.0f;\n\t\t\t\t\t\t\tint tValue;\n\t\t\t\t\t\t\tif (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tEnergyDivider = float(tValue);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tunsigned long long powerusage1 = std::strtoull(splitresults[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long powerusage2 = std::strtoull(splitresults[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long powerdeliv1 = std::strtoull(splitresults[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long powerdeliv2 = std::strtoull(splitresults[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long usagecurrent = std::strtoull(splitresults[4].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long delivcurrent = std::strtoull(splitresults[5].c_str(), nullptr, 10);\n\n\t\t\t\t\t\t\tpowerdeliv1 = (powerdeliv1 < 10) ? 0 : powerdeliv1;\n\t\t\t\t\t\t\tpowerdeliv2 = (powerdeliv2 < 10) ? 0 : powerdeliv2;\n\n\t\t\t\t\t\t\tunsigned long long powerusage = powerusage1 + powerusage2;\n\t\t\t\t\t\t\tunsigned long long powerdeliv = powerdeliv1 + powerdeliv2;\n\t\t\t\t\t\t\tif (powerdeliv < 2)\n\t\t\t\t\t\t\t\tpowerdeliv = 0;\n\n\t\t\t\t\t\t\tdouble musage = 0;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = MTYPE_ENERGY;\n\t\t\t\t\t\t\tmusage = double(powerusage) / EnergyDivider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", musage);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tmusage = double(powerdeliv) / EnergyDivider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", musage);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterDeliv\"] = szTmp;\n\n\t\t\t\t\t\t\tif (bHaveTimeout)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tusagecurrent = 0;\n\t\t\t\t\t\t\t\tdelivcurrent = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu Watt\", usagecurrent);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Usage\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu Watt\", delivcurrent);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"UsageDeliv\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t\t//get value of today\n\t\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value1), MIN(Value2), MIN(Value5), MIN(Value6) FROM MultiMeter WHERE (DeviceRowID='%q' AND Date>='%q')\",\n\t\t\t\t\t\t\t\tsd[0].c_str(), szDate);\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\t\tunsigned long long total_min_usage_1 = std::strtoull(sd2[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_min_deliv_1 = std::strtoull(sd2[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_min_usage_2 = std::strtoull(sd2[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_min_deliv_2 = std::strtoull(sd2[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_real_usage, total_real_deliv;\n\n\t\t\t\t\t\t\t\ttotal_real_usage = powerusage - (total_min_usage_1 + total_min_usage_2);\n\t\t\t\t\t\t\t\ttotal_real_deliv = powerdeliv - (total_min_deliv_1 + total_min_deliv_2);\n\n\t\t\t\t\t\t\t\tmusage = double(total_real_usage) / EnergyDivider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", musage);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\t\tmusage = double(total_real_deliv) / EnergyDivider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", musage);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterDelivToday\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", 0.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterDelivToday\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeP1Gas)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = MTYPE_GAS;\n\n\t\t\t\t\t\t//get lowest value of today\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\n\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\",\n\t\t\t\t\t\t\tsd[0].c_str(), szDate);\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\tuint64_t total_min_gas = std::stoull(sd2[0]);\n\t\t\t\t\t\t\tuint64_t gasactual = std::stoull(sValue);\n\t\t\t\t\t\t\tuint64_t total_real_gas = gasactual - total_min_gas;\n\n\t\t\t\t\t\t\tdouble musage = double(gasactual) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", musage);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tmusage = double(total_real_gas) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f m3\", musage);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", atof(sValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", 0.0f);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f m3\", 0.0f);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", atof(sValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//CM113\n\t\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\t\tdouble val1 = atof(strarray[0].c_str());\n\t\t\t\t\t\t\tdouble val2 = atof(strarray[1].c_str());\n\t\t\t\t\t\t\tdouble val3 = atof(strarray[2].c_str());\n\n\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ((val2 == 0) && (val3 == 0))\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f A\", val1);\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f A, %.1f A, %.1f A\", val1, val2, val3);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ((val2 == 0) && (val3 == 0))\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%d Watt\", int(val1*voltage));\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%d Watt, %d Watt, %d Watt\", int(val1*voltage), int(val2*voltage), int(val3*voltage));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"displaytype\"] = displaytype;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENTENERGY)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 4)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//CM180i\n\t\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\t\tdouble total = atof(strarray[3].c_str());\n\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f A, %.1f A, %.1f A\", atof(strarray[0].c_str()), atof(strarray[1].c_str()), atof(strarray[2].c_str()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%d Watt, %d Watt, %d Watt\", int(atof(strarray[0].c_str())*voltage), int(atof(strarray[1].c_str())*voltage), int(atof(strarray[2].c_str())*voltage));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (total > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \", Total: %.3f kWh\", total / 1000.0f);\n\t\t\t\t\t\t\t\tstrcat(szData, szTmp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"displaytype\"] = displaytype;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeENERGY) || (dType == pTypePOWER)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeKwh))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble total = atof(strarray[1].c_str()) / 1000;\n\n\t\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\",\n\t\t\t\t\t\t\t\tsd[0].c_str(), szDate);\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\t\t\t\t\t\t\t\tdouble minimum = atof(sd2[0].c_str()) / divider;\n\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.3f kWh\", total);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\t\tif ((dType == pTypeENERGY) || (dType == pTypePOWER))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%ld Watt\", atol(strarray[0].c_str()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%g Watt\", atof(strarray[0].c_str()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Usage\"] = szData;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", total - minimum);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.3f kWh\", total);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\t\tif ((dType == pTypeENERGY) || (dType == pTypePOWER))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%ld Watt\", atol(strarray[0].c_str()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%g Watt\", atof(strarray[0].c_str()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Usage\"] = szData;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d kWh\", 0);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"current\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = switchtype; //MTYPE_ENERGY\n\t\t\t\t\t\t\troot[\"result\"][ii][\"EnergyMeterMode\"] = options[\"EnergyMeterMode\"];  //for alternate Energy Reading\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeAirQuality)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (bHaveTimeout)\n\t\t\t\t\t\t\tnValue = 0;\n\t\t\t\t\t\tsprintf(szTmp, \"%d ppm\", nValue);\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\tint airquality = nValue;\n\t\t\t\t\t\tif (airquality < 700)\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Quality\"] = \"Excellent\";\n\t\t\t\t\t\telse if (airquality < 900)\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Quality\"] = \"Good\";\n\t\t\t\t\t\telse if (airquality < 1100)\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Quality\"] = \"Fair\";\n\t\t\t\t\t\telse if (airquality < 1600)\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Quality\"] = \"Mediocre\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Quality\"] = \"Bad\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeThermostat)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dSubType == sTypeThermSetpoint)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbHasTimers = m_sql.HasTimers(sd[0]);\n\n\t\t\t\t\t\t\tdouble tempCelcius = atof(sValue.c_str());\n\t\t\t\t\t\t\tdouble temp = ConvertTemperature(tempCelcius, tempsign);\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", temp);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SetPoint\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"override_mini\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeRadiator1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dSubType == sTypeSmartwares)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbHasTimers = m_sql.HasTimers(sd[0]);\n\n\t\t\t\t\t\t\tdouble tempCelcius = atof(sValue.c_str());\n\t\t\t\t\t\t\tdouble temp = ConvertTemperature(tempCelcius, tempsign);\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", temp);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SetPoint\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false; //this device does not provide feedback, so no timeout!\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"override_mini\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeGeneral)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dSubType == sTypeVisibility)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat vis = static_cast<float>(atof(sValue.c_str()));\n\t\t\t\t\t\t\tif (metertype == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//km\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f km\", vis);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//miles\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f mi\", vis*0.6214f);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Visibility\"] = atof(sValue.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"visibility\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeDistance)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat vis = static_cast<float>(atof(sValue.c_str()));\n\t\t\t\t\t\t\tif (metertype == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//km\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f cm\", vis);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//miles\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f in\", vis*0.6214f);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"visibility\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeSolarRadiation)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat radiation = static_cast<float>(atof(sValue.c_str()));\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f Watt/m2\", radiation);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Radiation\"] = atof(sValue.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"radiation\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeSoilMoisture)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d cb\", nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Desc\"] = Get_Moisture_Desc(nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"moisture\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeLeafWetness)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"leaf\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeSystemTemp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(sValue.c_str()), tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c\", tvalue, tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Computer\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"temperature\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = \"temperature\";\n\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypePercentage)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%g%%\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Computer\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"hardware\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeWaterflow)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%g l/min\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Moisture\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"moisture\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeCustom)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string szAxesLabel = \"\";\n\t\t\t\t\t\t\tint SensorType = 1;\n\t\t\t\t\t\t\tstd::vector<std::string> sResults;\n\t\t\t\t\t\t\tStringSplit(sOptions, \";\", sResults);\n\n\t\t\t\t\t\t\tif (sResults.size() == 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSensorType = atoi(sResults[0].c_str());\n\t\t\t\t\t\t\t\tszAxesLabel = sResults[1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsprintf(szData, \"%g %s\", atof(sValue.c_str()), szAxesLabel.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SensorType\"] = SensorType;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SensorUnit\"] = szAxesLabel;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t\tstd::string IconFile = \"Custom\";\n\t\t\t\t\t\t\tif (CustomImage != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::map<int, int>::const_iterator ittIcon = m_custom_light_icons_lookup.find(CustomImage);\n\t\t\t\t\t\t\t\tif (ittIcon != m_custom_light_icons_lookup.end())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tIconFile = m_custom_light_icons[ittIcon->second].RootFile;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = IconFile;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = IconFile;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeFan)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%d RPM\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Fan\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Fan\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeSoundLevel)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%d dB\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Speaker\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeVoltage)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%g V\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"current\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Voltage\"] = atof(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeCurrent)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%g A\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"current\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Current\"] = atof(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeTextStatus)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"text\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ShowNotifications\"] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeAlert)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (nValue > 4)\n\t\t\t\t\t\t\t\tnValue = 4;\n\t\t\t\t\t\t\tsprintf(szData, \"Level: %d\", nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\tif (!sValue.empty())\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = Get_Alert_Desc(nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Alert\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = nValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypePressure)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%.1f Bar\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"gauge\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Pressure\"] = atof(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeBaro)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> tstrarray;\n\t\t\t\t\t\t\tStringSplit(sValue, \";\", tstrarray);\n\t\t\t\t\t\t\tif (tstrarray.empty())\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tsprintf(szData, \"%g hPa\", atof(tstrarray[0].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"gauge\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\tif (tstrarray.size() > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Barometer\"] = atof(tstrarray[0].c_str());\n\t\t\t\t\t\t\t\tint forecast = atoi(tstrarray[1].c_str());\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Forecast\"] = forecast;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ForecastStr\"] = BMP_Forecast_Desc(forecast);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeZWaveClock)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> tstrarray;\n\t\t\t\t\t\t\tStringSplit(sValue, \";\", tstrarray);\n\t\t\t\t\t\t\tint day = 0;\n\t\t\t\t\t\t\tint hour = 0;\n\t\t\t\t\t\t\tint minute = 0;\n\t\t\t\t\t\t\tif (tstrarray.size() == 3)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tday = atoi(tstrarray[0].c_str());\n\t\t\t\t\t\t\t\thour = atoi(tstrarray[1].c_str());\n\t\t\t\t\t\t\t\tminute = atoi(tstrarray[2].c_str());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsprintf(szData, \"%s %02d:%02d\", ZWave_Clock_Days(day), hour, minute);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"DayTime\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"clock\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeZWaveThermostatMode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstrcpy(szData, \"\");\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Mode\"] = nValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"mode\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\tstd::string modes = \"\";\n\t\t\t\t\t\t\t//Add supported modes\n#ifdef WITH_OPENZWAVE\n\t\t\t\t\t\t\tif (pHardware)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_OpenZWave)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCOpenZWave *pZWave = reinterpret_cast<COpenZWave*>(pHardware);\n\t\t\t\t\t\t\t\t\tunsigned long ID;\n\t\t\t\t\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\t\t\t\t\ts_strid << std::hex << sd[1];\n\t\t\t\t\t\t\t\t\ts_strid >> ID;\n\t\t\t\t\t\t\t\t\tstd::vector<std::string> vmodes = pZWave->GetSupportedThermostatModes(ID);\n\t\t\t\t\t\t\t\t\tint smode = 0;\n\t\t\t\t\t\t\t\t\tchar szTmp[200];\n\t\t\t\t\t\t\t\t\tfor (const auto & itt : vmodes)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t//Value supported\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d;%s;\", smode, itt.c_str());\n\t\t\t\t\t\t\t\t\t\tmodes += szTmp;\n\t\t\t\t\t\t\t\t\t\tsmode++;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (!vmodes.empty())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (nValue < (int)vmodes.size())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szData, \"%s\", vmodes[nValue].c_str());\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n#endif\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Modes\"] = modes;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeZWaveThermostatFanMode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%s\", ZWave_Thermostat_Fan_Modes[nValue]);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Mode\"] = nValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"mode\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\t//Add supported modes (add all for now)\n\t\t\t\t\t\t\tbool bAddedSupportedModes = false;\n\t\t\t\t\t\t\tstd::string modes = \"\";\n\t\t\t\t\t\t\t//Add supported modes\n#ifdef WITH_OPENZWAVE\n\t\t\t\t\t\t\tif (pHardware)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_OpenZWave)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCOpenZWave *pZWave = reinterpret_cast<COpenZWave*>(pHardware);\n\t\t\t\t\t\t\t\t\tunsigned long ID;\n\t\t\t\t\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\t\t\t\t\ts_strid << std::hex << sd[1];\n\t\t\t\t\t\t\t\t\ts_strid >> ID;\n\t\t\t\t\t\t\t\t\tmodes = pZWave->GetSupportedThermostatFanModes(ID);\n\t\t\t\t\t\t\t\t\tbAddedSupportedModes = !modes.empty();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n#endif\n\t\t\t\t\t\t\tif (!bAddedSupportedModes)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint smode = 0;\n\t\t\t\t\t\t\t\twhile (ZWave_Thermostat_Fan_Modes[smode] != NULL)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d;%s;\", smode, ZWave_Thermostat_Fan_Modes[smode]);\n\t\t\t\t\t\t\t\t\tmodes += szTmp;\n\t\t\t\t\t\t\t\t\tsmode++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Modes\"] = modes;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeZWaveAlarm)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"Event: 0x%02X (%d)\", nValue, nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Alert\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = nValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeLux)\n\t\t\t\t\t{\n\t\t\t\t\t\tsprintf(szTmp, \"%.0f Lux\", atof(sValue.c_str()));\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeWEIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tsprintf(szTmp, \"%g %s\", m_sql.m_weightscale * atof(sValue.c_str()), m_sql.m_weightsign.c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeUsage)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dSubType == sTypeElectric)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%g Watt\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeRFXSensor)\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch (dSubType)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase sTypeRFXSensorAD:\n\t\t\t\t\t\t\tsprintf(szData, \"%d mV\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"current\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase sTypeRFXSensorVolt:\n\t\t\t\t\t\t\tsprintf(szData, \"%d mV\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"current\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeRego6XXValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch (dSubType)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase sTypeRego6XXStatus:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string lstatus = \"On\";\n\n\t\t\t\t\t\t\tif (atoi(sValue.c_str()) == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlstatus = \"Off\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveDimmer\"] = false;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = 0;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveGroupCmd\"] = false;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"utility\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = STYPE_OnOff;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = Switch_Type_Desc(STYPE_OnOff);\n\t\t\t\t\t\t\tsprintf(szData, \"%d\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"StrParam1\"] = strParam1;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"StrParam2\"] = strParam2;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\n\t\t\t\t\t\t\tif (CustomImage < static_cast<int>(m_custom_light_icons.size()))\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = m_custom_light_icons[CustomImage].RootFile;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Light\";\n\n\t\t\t\t\t\t\tuint64_t camIDX = m_mainworker.m_cameras.IsDevSceneInCamera(0, sd[0]);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"UsedByCamera\"] = (camIDX != 0) ? true : false;\n\t\t\t\t\t\t\tif (camIDX != 0) {\n\t\t\t\t\t\t\t\tstd::stringstream scidx;\n\t\t\t\t\t\t\t\tscidx << camIDX;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CameraIdx\"] = scidx.str();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = 0;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelInt\"] = atoi(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase sTypeRego6XXCounter:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//get value of today\n\t\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\",\n\t\t\t\t\t\t\t\tsd[0].c_str(), szDate);\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\t\tunsigned long long total_min = std::strtoull(sd2[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_max = std::strtoull(sd2[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_real;\n\n\t\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = MTYPE_COUNTER;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n#ifdef ENABLE_PYTHON\n\t\t\t\t\tif (pHardware != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_PythonPlugin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tPlugins::CPlugin *pPlugin = (Plugins::CPlugin*)pHardware;\n\t\t\t\t\t\t\tbHaveTimeout = pPlugin->HasNodeFailed(atoi(sd[2].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n#endif\n\t\t\t\t\troot[\"result\"][ii][\"Timers\"] = (bHasTimers == true) ? \"true\" : \"false\";\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::UploadFloorplanImage(WebEmSession & session, const request& req, std::string & redirect_uri)\n\t\t{\n\t\t\tredirect_uri = \"/index.html\";\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string planname = request::findValue(&req, \"planname\");\n\t\t\tstd::string scalefactor = request::findValue(&req, \"scalefactor\");\n\t\t\tstd::string imagefile = request::findValue(&req, \"imagefile\");\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tm_sql.safe_query(\"INSERT INTO Floorplans ([Name],[ScaleFactor]) VALUES('%s','%s')\", planname.c_str(),scalefactor.c_str());\n\t\t\tresult = m_sql.safe_query(\"SELECT MAX(ID) FROM Floorplans\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tif (!m_sql.safe_UpdateBlobInTableWithID(\"Floorplans\", \"Image\", result[0][0], imagefile))\n\t\t\t\t\t_log.Log(LOG_ERROR, \"SQL: Problem inserting floorplan image into database! \");\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx == \"\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\treply::set_content(&rep, result[0][0].begin(), result[0][0].end());\n\t\t\tstd::string oname = \"floorplan\";\n\t\t\tif (result[0][0].size() > 10)\n\t\t\t{\n\t\t\t\tif (result[0][0][0] == 'P')\n\t\t\t\t\toname += \".png\";\n\t\t\t\telse if (result[0][0][0] == -1)\n\t\t\t\t\toname += \".jpg\";\n\t\t\t\telse if (result[0][0][0] == 'B')\n\t\t\t\t\toname += \".bmp\";\n\t\t\t\telse if (result[0][0][0] == 'G')\n\t\t\t\t\toname += \".gif\";\n\t\t\t}\n\t\t\treply::add_header_attachment(&rep, oname);\n\t\t}\n\n\t\tvoid CWebServer::GetDatabaseBackup(WebEmSession & session, const request& req, reply & rep)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n#ifdef WIN32\n\t\t\tstd::string OutputFileName = szUserDataFolder + \"backup.db\";\n#else\n\t\t\tstd::string OutputFileName = \"/tmp/backup.db\";\n#endif\n\t\t\tif (m_sql.BackupDatabase(OutputFileName))\n\t\t\t{\n\t\t\t\tstd::string szAttachmentName = \"domoticz.db\";\n\t\t\t\tstd::string szVar;\n\t\t\t\tif (m_sql.GetPreferencesVar(\"Title\", szVar))\n\t\t\t\t{\n\t\t\t\t\tstdreplace(szVar, \" \", \"_\");\n\t\t\t\t\tstdreplace(szVar, \"/\", \"_\");\n\t\t\t\t\tstdreplace(szVar, \"\\\\\", \"_\");\n\t\t\t\t\tif (!szVar.empty()) {\n\t\t\t\t\t\tszAttachmentName = szVar + \".db\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treply::set_content_from_file(&rep, OutputFileName, szAttachmentName, true);\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_DeleteDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteDevice\";\n\t\t\tm_sql.DeleteDevices(idx);\n\t\t\tm_mainworker.m_scheduler.ReloadSchedules();\n\t\t}\n\n\t\tvoid CWebServer::RType_AddScene(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\tif (name.empty())\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = \"No Scene Name specified!\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstd::string stype = request::findValue(&req, \"scenetype\");\n\t\t\tif (stype.empty())\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = \"No Scene Type specified!\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (m_sql.DoesSceneByNameExits(name) == true)\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = \"A Scene with this Name already Exits!\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddScene\";\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"INSERT INTO Scenes (Name,SceneType) VALUES ('%q',%d)\",\n\t\t\t\tname.c_str(),\n\t\t\t\tatoi(stype.c_str())\n\t\t\t);\n\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t{\n\t\t\t\tm_mainworker.m_eventsystem.GetCurrentScenesGroups();\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_DeleteScene(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteScene\";\n\t\t\tm_sql.safe_query(\"DELETE FROM Scenes WHERE (ID == '%q')\", idx.c_str());\n\t\t\tm_sql.safe_query(\"DELETE FROM SceneDevices WHERE (SceneRowID == '%q')\", idx.c_str());\n\t\t\tm_sql.safe_query(\"DELETE FROM SceneTimers WHERE (SceneRowID == '%q')\", idx.c_str());\n\t\t\tm_sql.safe_query(\"DELETE FROM SceneLog WHERE (SceneRowID=='%q')\", idx.c_str());\n\t\t\tuint64_t ullidx = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\tm_mainworker.m_eventsystem.RemoveSingleState(ullidx, m_mainworker.m_eventsystem.REASON_SCENEGROUP);\n\t\t}\n\n\t\tvoid CWebServer::RType_UpdateScene(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\tstd::string description = request::findValue(&req, \"description\");\n\t\t\tif ((idx.empty()) || (name.empty()))\n\t\t\t\treturn;\n\t\t\tstd::string stype = request::findValue(&req, \"scenetype\");\n\t\t\tif (stype.empty())\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = \"No Scene Type specified!\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstd::string tmpstr = request::findValue(&req, \"protected\");\n\t\t\tint iProtected = (tmpstr == \"true\") ? 1 : 0;\n\n\t\t\tstd::string onaction = base64_decode(request::findValue(&req, \"onaction\"));\n\t\t\tstd::string offaction = base64_decode(request::findValue(&req, \"offaction\"));\n\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"UpdateScene\";\n\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Name='%q', Description='%q', SceneType=%d, Protected=%d, OnAction='%q', OffAction='%q' WHERE (ID == '%q')\",\n\t\t\t\tname.c_str(),\n\t\t\t\tdescription.c_str(),\n\t\t\t\tatoi(stype.c_str()),\n\t\t\t\tiProtected,\n\t\t\t\tonaction.c_str(),\n\t\t\t\toffaction.c_str(),\n\t\t\t\tidx.c_str()\n\t\t\t);\n\t\t\tuint64_t ullidx = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\tm_mainworker.m_eventsystem.WWWUpdateSingleState(ullidx, name, m_mainworker.m_eventsystem.REASON_SCENEGROUP);\n\t\t}\n\n\t\tbool compareIconsByName(const http::server::CWebServer::_tCustomIcon &a, const http::server::CWebServer::_tCustomIcon &b)\n\t\t{\n\t\t\treturn a.Title < b.Title;\n\t\t}\n\n\t\tvoid CWebServer::RType_CustomLightIcons(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tint ii = 0;\n\n\t\t\tstd::vector<_tCustomIcon> temp_custom_light_icons = m_custom_light_icons;\n\t\t\t//Sort by name\n\t\t\tstd::sort(temp_custom_light_icons.begin(), temp_custom_light_icons.end(), compareIconsByName);\n\n\t\t\tfor (const auto & itt : temp_custom_light_icons)\n\t\t\t{\n\t\t\t\troot[\"result\"][ii][\"idx\"] = itt.idx;\n\t\t\t\troot[\"result\"][ii][\"imageSrc\"] = itt.RootFile;\n\t\t\t\troot[\"result\"][ii][\"text\"] = itt.Title;\n\t\t\t\troot[\"result\"][ii][\"description\"] = itt.Description;\n\t\t\t\tii++;\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t}\n\n\t\tvoid CWebServer::RType_Plans(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Plans\";\n\n\t\t\tstd::string sDisplayHidden = request::findValue(&req, \"displayhidden\");\n\t\t\tbool bDisplayHidden = (sDisplayHidden == \"1\");\n\n\t\t\tstd::vector<std::vector<std::string> > result, result2;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, [Order] FROM Plans ORDER BY [Order]\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tstd::string Name = sd[1];\n\t\t\t\t\tbool bIsHidden = (Name[0] == '$');\n\n\t\t\t\t\tif ((bDisplayHidden) || (!bIsHidden))\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\troot[\"result\"][ii][\"Order\"] = sd[2];\n\n\t\t\t\t\t\tunsigned int totDevices = 0;\n\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT COUNT(*) FROM DeviceToPlansMap WHERE (PlanID=='%q')\",\n\t\t\t\t\t\t\tsd[0].c_str());\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotDevices = (unsigned int)atoi(result2[0][0].c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Devices\"] = totDevices;\n\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_FloorPlans(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Floorplans\";\n\n\t\t\tstd::vector<std::vector<std::string> > result, result2, result3;\n\n\t\t\tresult = m_sql.safe_query(\"SELECT Key, nValue, sValue FROM Preferences WHERE Key LIKE 'Floorplan%%'\");\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\tfor (const auto & itt : result)\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\tstd::string Key = sd[0];\n\t\t\t\tint nValue = atoi(sd[1].c_str());\n\t\t\t\tstd::string sValue = sd[2];\n\n\t\t\t\tif (Key == \"FloorplanPopupDelay\")\n\t\t\t\t{\n\t\t\t\t\troot[\"PopupDelay\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanFullscreenMode\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FullscreenMode\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanAnimateZoom\")\n\t\t\t\t{\n\t\t\t\t\troot[\"AnimateZoom\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanShowSensorValues\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShowSensorValues\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanShowSwitchValues\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShowSwitchValues\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanShowSceneNames\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShowSceneNames\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanRoomColour\")\n\t\t\t\t{\n\t\t\t\t\troot[\"RoomColour\"] = sValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanActiveOpacity\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ActiveRoomOpacity\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanInactiveOpacity\")\n\t\t\t\t{\n\t\t\t\t\troot[\"InactiveRoomOpacity\"] = nValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult2 = m_sql.safe_query(\"SELECT ID, Name, ScaleFactor, [Order] FROM Floorplans ORDER BY [Order]\");\n\t\t\tif (!result2.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result2)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\tstd::string ImageURL = \"images/floorplans/plan?idx=\" + sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Image\"] = ImageURL;\n\t\t\t\t\troot[\"result\"][ii][\"ScaleFactor\"] = sd[2];\n\t\t\t\t\troot[\"result\"][ii][\"Order\"] = sd[3];\n\n\t\t\t\t\tunsigned int totPlans = 0;\n\n\t\t\t\t\tresult3 = m_sql.safe_query(\"SELECT COUNT(*) FROM Plans WHERE (FloorplanID=='%q')\", sd[0].c_str());\n\t\t\t\t\tif (!result3.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\ttotPlans = (unsigned int)atoi(result3[0][0].c_str());\n\t\t\t\t\t}\n\t\t\t\t\troot[\"result\"][ii][\"Plans\"] = totPlans;\n\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_Scenes(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Scenes\";\n\t\t\troot[\"AllowWidgetOrdering\"] = m_sql.m_bAllowWidgetOrdering;\n\n\t\t\tstd::string sDisplayHidden = request::findValue(&req, \"displayhidden\");\n\t\t\tbool bDisplayHidden = (sDisplayHidden == \"1\");\n\n\t\t\tstd::string sLastUpdate = request::findValue(&req, \"lastupdate\");\n\n\t\t\ttime_t LastUpdate = 0;\n\t\t\tif (sLastUpdate != \"\")\n\t\t\t{\n\t\t\t\tstd::stringstream sstr;\n\t\t\t\tsstr << sLastUpdate;\n\t\t\t\tsstr >> LastUpdate;\n\t\t\t}\n\n\t\t\ttime_t now = mytime(NULL);\n\t\t\tstruct tm tm1;\n\t\t\tlocaltime_r(&now, &tm1);\n\t\t\tstruct tm tLastUpdate;\n\t\t\tlocaltime_r(&now, &tLastUpdate);\n\n\t\t\troot[\"ActTime\"] = static_cast<int>(now);\n\n\t\t\tstd::vector<std::vector<std::string> > result, result2;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Activators, Favorite, nValue, SceneType, LastUpdate, Protected, OnAction, OffAction, Description FROM Scenes ORDER BY [Order]\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tstd::string sName = sd[1];\n\t\t\t\t\tif ((bDisplayHidden == false) && (sName[0] == '$'))\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tstd::string sLastUpdate = sd[6].c_str();\n\t\t\t\t\tif (LastUpdate != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttime_t cLastUpdate;\n\t\t\t\t\t\tParseSQLdatetime(cLastUpdate, tLastUpdate, sLastUpdate, tm1.tm_isdst);\n\t\t\t\t\t\tif (cLastUpdate <= LastUpdate)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tunsigned char nValue = atoi(sd[4].c_str());\n\t\t\t\t\tunsigned char scenetype = atoi(sd[5].c_str());\n\t\t\t\t\tint iProtected = atoi(sd[7].c_str());\n\n\t\t\t\t\tstd::string onaction = base64_encode(sd[8]);\n\t\t\t\t\tstd::string offaction = base64_encode(sd[9]);\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sName;\n\t\t\t\t\troot[\"result\"][ii][\"Description\"] = sd[10];\n\t\t\t\t\troot[\"result\"][ii][\"Favorite\"] = atoi(sd[3].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\t\t\t\t\troot[\"result\"][ii][\"OnAction\"] = onaction;\n\t\t\t\t\troot[\"result\"][ii][\"OffAction\"] = offaction;\n\n\t\t\t\t\tif (scenetype == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = \"Scene\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = \"Group\";\n\t\t\t\t\t}\n\n\t\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sLastUpdate;\n\n\t\t\t\t\tif (nValue == 0)\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"Off\";\n\t\t\t\t\telse if (nValue == 1)\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"On\";\n\t\t\t\t\telse\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"Mixed\";\n\t\t\t\t\troot[\"result\"][ii][\"Timers\"] = (m_sql.HasSceneTimers(sd[0]) == true) ? \"true\" : \"false\";\n\t\t\t\t\tuint64_t camIDX = m_mainworker.m_cameras.IsDevSceneInCamera(1, sd[0]);\n\t\t\t\t\troot[\"result\"][ii][\"UsedByCamera\"] = (camIDX != 0) ? true : false;\n\t\t\t\t\tif (camIDX != 0) {\n\t\t\t\t\t\tstd::stringstream scidx;\n\t\t\t\t\t\tscidx << camIDX;\n\t\t\t\t\t\troot[\"result\"][ii][\"CameraIdx\"] = scidx.str();\n\t\t\t\t\t}\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!m_mainworker.m_LastSunriseSet.empty())\n\t\t\t{\n\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\tStringSplit(m_mainworker.m_LastSunriseSet, \";\", strarray);\n\t\t\t\tif (strarray.size() == 10)\n\t\t\t\t{\n\t\t\t\t\tchar szTmp[100];\n\t\t\t\t\t//strftime(szTmp, 80, \"%b %d %Y %X\", &tm1);\n\t\t\t\t\tstrftime(szTmp, 80, \"%Y-%m-%d %X\", &tm1);\n\t\t\t\t\troot[\"ServerTime\"] = szTmp;\n\t\t\t\t\troot[\"Sunrise\"] = strarray[0];\n\t\t\t\t\troot[\"Sunset\"] = strarray[1];\n\t\t\t\t\troot[\"SunAtSouth\"] = strarray[2];\n\t\t\t\t\troot[\"CivTwilightStart\"] = strarray[3];\n\t\t\t\t\troot[\"CivTwilightEnd\"] = strarray[4];\n\t\t\t\t\troot[\"NautTwilightStart\"] = strarray[5];\n\t\t\t\t\troot[\"NautTwilightEnd\"] = strarray[6];\n\t\t\t\t\troot[\"AstrTwilightStart\"] = strarray[7];\n\t\t\t\t\troot[\"AstrTwilightEnd\"] = strarray[8];\n\t\t\t\t\troot[\"DayLength\"] = strarray[9];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_Hardware(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Hardware\";\n\n#ifdef WITH_OPENZWAVE\n\t\t\tm_ZW_Hwidx = -1;\n#endif\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout FROM Hardware ORDER BY ID ASC\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t_eHardwareTypes hType = (_eHardwareTypes)atoi(sd[3].c_str());\n\t\t\t\t\tif (hType == HTYPE_DomoticzInternal)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (hType == HTYPE_RESERVED_FOR_YOU_1)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\troot[\"result\"][ii][\"Enabled\"] = (sd[2] == \"1\") ? \"true\" : \"false\";\n\t\t\t\t\troot[\"result\"][ii][\"Type\"] = hType;\n\t\t\t\t\troot[\"result\"][ii][\"Address\"] = sd[4];\n\t\t\t\t\troot[\"result\"][ii][\"Port\"] = atoi(sd[5].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"SerialPort\"] = sd[6];\n\t\t\t\t\troot[\"result\"][ii][\"Username\"] = sd[7];\n\t\t\t\t\troot[\"result\"][ii][\"Password\"] = sd[8];\n\t\t\t\t\troot[\"result\"][ii][\"Extra\"] = sd[9];\n\n\t\t\t\t\tif (hType == HTYPE_PythonPlugin) {\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode1\"] = sd[10];  // Plugins can have non-numeric values in the Mode fields\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode2\"] = sd[11];\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode3\"] = sd[12];\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode4\"] = sd[13];\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode5\"] = sd[14];\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode6\"] = sd[15];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode1\"] = atoi(sd[10].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode2\"] = atoi(sd[11].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode3\"] = atoi(sd[12].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode4\"] = atoi(sd[13].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode5\"] = atoi(sd[14].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode6\"] = atoi(sd[15].c_str());\n\t\t\t\t\t}\n\t\t\t\t\troot[\"result\"][ii][\"DataTimeout\"] = atoi(sd[16].c_str());\n\n\t\t\t\t\t//Special case for openzwave (status for nodes queried)\n\t\t\t\t\tCDomoticzHardwareBase *pHardware = m_mainworker.GetHardware(atoi(sd[0].c_str()));\n\t\t\t\t\tif (pHardware != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(pHardware->HwdType == HTYPE_RFXtrx315) ||\n\t\t\t\t\t\t\t(pHardware->HwdType == HTYPE_RFXtrx433) ||\n\t\t\t\t\t\t\t(pHardware->HwdType == HTYPE_RFXtrx868) ||\n\t\t\t\t\t\t\t(pHardware->HwdType == HTYPE_RFXLAN)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCRFXBase *pMyHardware = reinterpret_cast<CRFXBase*>(pHardware);\n\t\t\t\t\t\t\tif (!pMyHardware->m_Version.empty())\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = pMyHardware->m_Version;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = sd[11];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"noiselvl\"] = pMyHardware->m_NoiseLevel;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((pHardware->HwdType == HTYPE_MySensorsUSB) || (pHardware->HwdType == HTYPE_MySensorsTCP) || (pHardware->HwdType == HTYPE_MySensorsMQTT))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMySensorsBase *pMyHardware = reinterpret_cast<MySensorsBase*>(pHardware);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = pMyHardware->GetGatewayVersion();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((pHardware->HwdType == HTYPE_OpenThermGateway) || (pHardware->HwdType == HTYPE_OpenThermGatewayTCP))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOTGWBase *pMyHardware = reinterpret_cast<OTGWBase*>(pHardware);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = pMyHardware->m_Version;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((pHardware->HwdType == HTYPE_RFLINKUSB) || (pHardware->HwdType == HTYPE_RFLINKTCP))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCRFLinkBase *pMyHardware = reinterpret_cast<CRFLinkBase*>(pHardware);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = pMyHardware->m_Version;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n#ifdef WITH_OPENZWAVE\n\t\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_OpenZWave)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCOpenZWave *pOZWHardware = reinterpret_cast<COpenZWave*>(pHardware);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = pOZWHardware->GetVersionLong();\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"NodesQueried\"] = (pOZWHardware->m_awakeNodesQueried || pOZWHardware->m_allNodesQueried);\n\t\t\t\t\t\t\t}\n#endif\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_Devices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string rfilter = request::findValue(&req, \"filter\");\n\t\t\tstd::string order = request::findValue(&req, \"order\");\n\t\t\tstd::string rused = request::findValue(&req, \"used\");\n\t\t\tstd::string rid = request::findValue(&req, \"rid\");\n\t\t\tstd::string planid = request::findValue(&req, \"plan\");\n\t\t\tstd::string floorid = request::findValue(&req, \"floor\");\n\t\t\tstd::string sDisplayHidden = request::findValue(&req, \"displayhidden\");\n\t\t\tstd::string sFetchFavorites = request::findValue(&req, \"favorite\");\n\t\t\tstd::string sDisplayDisabled = request::findValue(&req, \"displaydisabled\");\n\t\t\tbool bDisplayHidden = (sDisplayHidden == \"1\");\n\t\t\tbool bFetchFavorites = (sFetchFavorites == \"1\");\n\n\t\t\tint HideDisabledHardwareSensors = 0;\n\t\t\tm_sql.GetPreferencesVar(\"HideDisabledHardwareSensors\", HideDisabledHardwareSensors);\n\t\t\tbool bDisabledDisabled = (HideDisabledHardwareSensors == 0);\n\t\t\tif (sDisplayDisabled == \"1\")\n\t\t\t\tbDisabledDisabled = true;\n\n\t\t\tstd::string sLastUpdate = request::findValue(&req, \"lastupdate\");\n\t\t\tstd::string hwidx = request::findValue(&req, \"hwidx\"); // OTO\n\n\t\t\ttime_t LastUpdate = 0;\n\t\t\tif (sLastUpdate != \"\")\n\t\t\t{\n\t\t\t\tstd::stringstream sstr;\n\t\t\t\tsstr << sLastUpdate;\n\t\t\t\tsstr >> LastUpdate;\n\t\t\t}\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Devices\";\n\t\t\troot[\"app_version\"] = szAppVersion;\n\t\t\tGetJSonDevices(root, rused, rfilter, order, rid, planid, floorid, bDisplayHidden, bDisabledDisabled, bFetchFavorites, LastUpdate, session.username, hwidx);\n\t\t}\n\n\t\tvoid CWebServer::RType_Users(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint urights = 3;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t}\n\t\t\tif (urights < 2)\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Users\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Active, Username, Password, Rights, RemoteSharing, TabsEnabled FROM USERS ORDER BY ID ASC\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Enabled\"] = (sd[1] == \"1\") ? \"true\" : \"false\";\n\t\t\t\t\troot[\"result\"][ii][\"Username\"] = base64_decode(sd[2]);\n\t\t\t\t\troot[\"result\"][ii][\"Password\"] = sd[3];\n\t\t\t\t\troot[\"result\"][ii][\"Rights\"] = atoi(sd[4].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"RemoteSharing\"] = atoi(sd[5].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"TabsEnabled\"] = atoi(sd[6].c_str());\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_Mobiles(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint urights = 3;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t}\n\t\t\tif (urights < 2)\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Mobiles\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Active, Name, UUID, LastUpdate, DeviceType FROM MobileDevices ORDER BY Name ASC\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Enabled\"] = (sd[1] == \"1\") ? \"true\" : \"false\";\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[2];\n\t\t\t\t\troot[\"result\"][ii][\"UUID\"] = sd[3];\n\t\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sd[4];\n\t\t\t\t\troot[\"result\"][ii][\"DeviceType\"] = sd[5];\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SetSetpoint(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint iUser = -1;\n\t\t\tint urights = 3;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tiUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t{\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (urights < 1)\n\t\t\t\treturn;\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string setpoint = request::findValue(&req, \"setpoint\");\n\t\t\tif (\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(setpoint.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"SetSetpoint\";\n\t\t\tif (iUser != -1)\n\t\t\t{\n\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a SetPoint command\", m_users[iUser].Username.c_str());\n\t\t\t}\n\t\t\tm_mainworker.SetSetPoint(idx, static_cast<float>(atof(setpoint.c_str())));\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetSceneActivations(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetSceneActivations\";\n\n\t\t\tstd::vector<std::vector<std::string> > result, result2;\n\t\t\tresult = m_sql.safe_query(\"SELECT Activators, SceneType FROM Scenes WHERE (ID==%q)\", idx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\tint ii = 0;\n\t\t\tstd::string Activators = result[0][0];\n\t\t\tint SceneType = atoi(result[0][1].c_str());\n\t\t\tif (!Activators.empty())\n\t\t\t{\n\t\t\t\t//Get Activator device names\n\t\t\t\tstd::vector<std::string> arrayActivators;\n\t\t\t\tStringSplit(Activators, \";\", arrayActivators);\n\t\t\t\tfor (const auto & ittAct : arrayActivators)\n\t\t\t\t{\n\t\t\t\t\tstd::string sCodeCmd = ittAct;\n\n\t\t\t\t\tstd::vector<std::string> arrayCode;\n\t\t\t\t\tStringSplit(sCodeCmd, \":\", arrayCode);\n\n\t\t\t\t\tstd::string sID = arrayCode[0];\n\t\t\t\t\tint sCode = 0;\n\t\t\t\t\tif (arrayCode.size() == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tsCode = atoi(arrayCode[1].c_str());\n\t\t\t\t\t}\n\n\n\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT Name, [Type], SubType, SwitchType FROM DeviceStatus WHERE (ID==%q)\", sID.c_str());\n\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result2[0];\n\t\t\t\t\t\tstd::string lstatus = \"-\";\n\t\t\t\t\t\tif ((SceneType == 0) && (arrayCode.size() == 2))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunsigned char devType = (unsigned char)atoi(sd[1].c_str());\n\t\t\t\t\t\t\tunsigned char subType = (unsigned char)atoi(sd[2].c_str());\n\t\t\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sd[3].c_str());\n\t\t\t\t\t\t\tint nValue = sCode;\n\t\t\t\t\t\t\tstd::string sValue = \"\";\n\t\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\t\tint maxDimLevel = 0;\n\t\t\t\t\t\t\tGetLightStatus(devType, subType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuint64_t dID = std::strtoull(sID.c_str(), nullptr, 10);\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = dID;\n\t\t\t\t\t\troot[\"result\"][ii][\"name\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"code\"] = sCode;\n\t\t\t\t\t\troot[\"result\"][ii][\"codestr\"] = lstatus;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_AddSceneCode(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sceneidx = request::findValue(&req, \"sceneidx\");\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string cmnd = request::findValue(&req, \"cmnd\");\n\t\t\tif (\n\t\t\t\t(sceneidx.empty()) ||\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(cmnd.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddSceneCode\";\n\n\t\t\t//First check if we do not already have this device as activation code\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT Activators, SceneType FROM Scenes WHERE (ID==%q)\", sceneidx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\tstd::string Activators = result[0][0];\n\t\t\tunsigned char scenetype = atoi(result[0][1].c_str());\n\n\t\t\tif (!Activators.empty())\n\t\t\t{\n\t\t\t\t//Get Activator device names\n\t\t\t\tstd::vector<std::string> arrayActivators;\n\t\t\t\tStringSplit(Activators, \";\", arrayActivators);\n\t\t\t\tfor (const auto & ittAct : arrayActivators)\n\t\t\t\t{\n\t\t\t\t\tstd::string sCodeCmd = ittAct;\n\n\t\t\t\t\tstd::vector<std::string> arrayCode;\n\t\t\t\t\tStringSplit(sCodeCmd, \":\", arrayCode);\n\n\t\t\t\t\tstd::string sID = arrayCode[0];\n\t\t\t\t\tstd::string sCode = \"\";\n\t\t\t\t\tif (arrayCode.size() == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tsCode = arrayCode[1];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sID == idx)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (scenetype == 1)\n\t\t\t\t\t\t\treturn; //Group does not work with separate codes, so already there\n\t\t\t\t\t\tif (sCode == cmnd)\n\t\t\t\t\t\t\treturn; //same code, already there!\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!Activators.empty())\n\t\t\t\tActivators += \";\";\n\t\t\tActivators += idx;\n\t\t\tif (scenetype == 0)\n\t\t\t{\n\t\t\t\tActivators += \":\" + cmnd;\n\t\t\t}\n\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Activators='%q' WHERE (ID==%q)\", Activators.c_str(), sceneidx.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_RemoveSceneCode(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sceneidx = request::findValue(&req, \"sceneidx\");\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string code = request::findValue(&req, \"code\");\n\t\t\tif (\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(sceneidx.empty()) ||\n\t\t\t\t(code.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"RemoveSceneCode\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT Activators, SceneType FROM Scenes WHERE (ID==%q)\", sceneidx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\tstd::string Activators = result[0][0];\n\t\t\tint SceneType = atoi(result[0][1].c_str());\n\t\t\tif (!Activators.empty())\n\t\t\t{\n\t\t\t\t//Get Activator device names\n\t\t\t\tstd::vector<std::string> arrayActivators;\n\t\t\t\tStringSplit(Activators, \";\", arrayActivators);\n\t\t\t\tstd::string newActivation = \"\";\n\t\t\t\tfor (const auto & ittAct : arrayActivators)\n\t\t\t\t{\n\t\t\t\t\tstd::string sCodeCmd = ittAct;\n\n\t\t\t\t\tstd::vector<std::string> arrayCode;\n\t\t\t\t\tStringSplit(sCodeCmd, \":\", arrayCode);\n\n\t\t\t\t\tstd::string sID = arrayCode[0];\n\t\t\t\t\tstd::string sCode = \"\";\n\t\t\t\t\tif (arrayCode.size() == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tsCode = arrayCode[1];\n\t\t\t\t\t}\n\t\t\t\t\tbool bFound = false;\n\t\t\t\t\tif (sID == idx)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((SceneType == 1) || (sCode.empty()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Also check the code\n\t\t\t\t\t\t\tbFound = (sCode == code);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!bFound)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!newActivation.empty())\n\t\t\t\t\t\t\tnewActivation += \";\";\n\t\t\t\t\t\tnewActivation += sID;\n\t\t\t\t\t\tif ((SceneType == 0) && (!sCode.empty()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnewActivation += \":\" + sCode;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (Activators != newActivation)\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Activators='%q' WHERE (ID==%q)\", newActivation.c_str(), sceneidx.c_str());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ClearSceneCodes(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sceneidx = request::findValue(&req, \"sceneidx\");\n\t\t\tif (sceneidx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"ClearSceneCode\";\n\n\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Activators='' WHERE (ID==%q)\", sceneidx.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetSerialDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetSerialDevices\";\n\n\t\t\tbool bUseDirectPath = false;\n\t\t\tstd::vector<std::string> serialports = GetSerialPorts(bUseDirectPath);\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : serialports)\n\t\t\t{\n\t\t\t\troot[\"result\"][ii][\"name\"] = itt;\n\t\t\t\troot[\"result\"][ii][\"value\"] = ii;\n\t\t\t\tii++;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetDevicesList(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetDevicesList\";\n\t\t\tint ii = 0;\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name FROM DeviceStatus WHERE (Used == 1) ORDER BY Name\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\troot[\"result\"][ii][\"name\"] = sd[1];\n\t\t\t\t\troot[\"result\"][ii][\"value\"] = sd[0];\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Post_UploadCustomIcon(WebEmSession & session, const request& req, reply & rep)\n\t\t{\n\t\t\tJson::Value root;\n\t\t\troot[\"title\"] = \"UploadCustomIcon\";\n\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\troot[\"error\"] = \"Invalid\";\n\t\t\t//Only admin user allowed\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string zipfile = request::findValue(&req, \"file\");\n\t\t\tif (zipfile != \"\")\n\t\t\t{\n\t\t\t\tstd::string ErrorMessage;\n\t\t\t\tbool bOK = m_sql.InsertCustomIconFromZip(zipfile, ErrorMessage);\n\t\t\t\tif (bOK)\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"error\"] = ErrorMessage;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstd::string jcallback = request::findValue(&req, \"jsoncallback\");\n\t\t\tif (jcallback.size() == 0) {\n\t\t\t\treply::set_content(&rep, root.toStyledString());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treply::set_content(&rep, \"var data=\" + root.toStyledString() + '\\n' + jcallback + \"(data);\");\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetCustomIconSet(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetCustomIconSet\";\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : m_custom_light_icons)\n\t\t\t{\n\t\t\t\tif (itt.idx >= 100)\n\t\t\t\t{\n\t\t\t\t\tstd::string IconFile16 = \"images/\" + itt.RootFile + \".png\";\n\t\t\t\t\tstd::string IconFile48On = \"images/\" + itt.RootFile + \"48_On.png\";\n\t\t\t\t\tstd::string IconFile48Off = \"images/\" + itt.RootFile + \"48_Off.png\";\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = itt.idx - 100;\n\t\t\t\t\troot[\"result\"][ii][\"Title\"] = itt.Title;\n\t\t\t\t\troot[\"result\"][ii][\"Description\"] = itt.Description;\n\t\t\t\t\troot[\"result\"][ii][\"IconFile16\"] = IconFile16;\n\t\t\t\t\troot[\"result\"][ii][\"IconFile48On\"] = IconFile48On;\n\t\t\t\t\troot[\"result\"][ii][\"IconFile48Off\"] = IconFile48Off;\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeleteCustomIcon(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tif (sidx.empty())\n\t\t\t\treturn;\n\t\t\tint idx = atoi(sidx.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteCustomIcon\";\n\n\t\t\tm_sql.safe_query(\"DELETE FROM CustomImages WHERE (ID == %d)\", idx);\n\n\t\t\t//Delete icons file from disk\n\t\t\tfor (const auto & itt : m_custom_light_icons)\n\t\t\t{\n\t\t\t\tif (itt.idx == idx + 100)\n\t\t\t\t{\n\t\t\t\t\tstd::string IconFile16 = szWWWFolder + \"/images/\" + itt.RootFile + \".png\";\n\t\t\t\t\tstd::string IconFile48On = szWWWFolder + \"/images/\" + itt.RootFile + \"48_On.png\";\n\t\t\t\t\tstd::string IconFile48Off = szWWWFolder + \"/images/\" + itt.RootFile + \"48_Off.png\";\n\t\t\t\t\tstd::remove(IconFile16.c_str());\n\t\t\t\t\tstd::remove(IconFile48On.c_str());\n\t\t\t\t\tstd::remove(IconFile48Off.c_str());\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tReloadCustomSwitchIcons();\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateCustomIcon(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tstd::string sname = request::findValue(&req, \"name\");\n\t\t\tstd::string sdescription = request::findValue(&req, \"description\");\n\t\t\tif (\n\t\t\t\t(sidx.empty()) ||\n\t\t\t\t(sname.empty()) ||\n\t\t\t\t(sdescription.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tint idx = atoi(sidx.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"UpdateCustomIcon\";\n\n\t\t\tm_sql.safe_query(\"UPDATE CustomImages SET Name='%q', Description='%q' WHERE (ID == %d)\", sname.c_str(), sdescription.c_str(), idx);\n\t\t\tReloadCustomSwitchIcons();\n\t\t}\n\n\t\tvoid CWebServer::Cmd_RenameDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tstd::string sname = request::findValue(&req, \"name\");\n\t\t\tif (\n\t\t\t\t(sidx.empty()) ||\n\t\t\t\t(sname.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tint idx = atoi(sidx.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"RenameDevice\";\n\n\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Name='%q' WHERE (ID == %d)\", sname.c_str(), idx);\n\t\t\tuint64_t ullidx = std::strtoull(sidx.c_str(), nullptr, 10);\n\t\t\tm_mainworker.m_eventsystem.WWWUpdateSingleState(ullidx, sname, m_mainworker.m_eventsystem.REASON_DEVICE);\n\n#ifdef ENABLE_PYTHON\n\t\t\t// Notify plugin framework about the change\n\t\t\tm_mainworker.m_pluginsystem.DeviceModified(idx);\n#endif\n\t\t}\n\n\t\tvoid CWebServer::Cmd_RenameScene(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tstd::string sname = request::findValue(&req, \"name\");\n\t\t\tif (\n\t\t\t\t(sidx.empty()) ||\n\t\t\t\t(sname.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tint idx = atoi(sidx.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"RenameScene\";\n\n\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Name='%q' WHERE (ID == %d)\", sname.c_str(), idx);\n\t\t\tuint64_t ullidx = std::strtoull(sidx.c_str(), nullptr, 10);\n\t\t\tm_mainworker.m_eventsystem.WWWUpdateSingleState(ullidx, sname, m_mainworker.m_eventsystem.REASON_SCENEGROUP);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SetUnused(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tif (sidx.empty())\n\t\t\t\treturn;\n\t\t\tint idx = atoi(sidx.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"SetUnused\";\n\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Used=0 WHERE (ID == %d)\", idx);\n\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t\tm_mainworker.m_eventsystem.RemoveSingleState(idx, m_mainworker.m_eventsystem.REASON_DEVICE);\n\n#ifdef ENABLE_PYTHON\n\t\t\t// Notify plugin framework about the change\n\t\t\tm_mainworker.m_pluginsystem.DeviceModified(idx);\n#endif\n\t\t}\n\n\t\tvoid CWebServer::Cmd_AddLogMessage(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string smessage = request::findValue(&req, \"message\");\n\t\t\tif (smessage.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddLogMessage\";\n\n\t\t\t_log.Log(LOG_STATUS, \"%s\", smessage.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ClearShortLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"ClearShortLog\";\n\n\t\t\t_log.Log(LOG_STATUS, \"Clearing Short Log...\");\n\n\t\t\tm_sql.ClearShortLog();\n\n\t\t\t_log.Log(LOG_STATUS, \"Short Log Cleared!\");\n\t\t}\n\n\t\tvoid CWebServer::Cmd_VacuumDatabase(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"VacuumDatabase\";\n\n\t\t\tm_sql.VacuumDatabase();\n\t\t}\n\n\t\tvoid CWebServer::Cmd_AddMobileDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string suuid = request::findValue(&req, \"uuid\");\n\t\t\tstd::string ssenderid = request::findValue(&req, \"senderid\");\n\t\t\tstd::string sname = request::findValue(&req, \"name\");\n\t\t\tstd::string sdevtype = request::findValue(&req, \"devicetype\");\n\t\t\tstd::string sactive = request::findValue(&req, \"active\");\n\t\t\tif (\n\t\t\t\t(suuid.empty()) ||\n\t\t\t\t(ssenderid.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddMobileDevice\";\n\n\t\t\tif (sactive.empty())\n\t\t\t\tsactive = \"1\";\n\t\t\tint iActive = (sactive == \"1\") ? 1 : 0;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, DeviceType FROM MobileDevices WHERE (UUID=='%q')\", suuid.c_str());\n\t\t\tif (result.empty())\n\t\t\t{\n\t\t\t\t//New\n\t\t\t\tm_sql.safe_query(\"INSERT INTO MobileDevices (Active,UUID,SenderID,Name,DeviceType) VALUES (%d,'%q','%q','%q','%q')\",\n\t\t\t\t\tiActive,\n\t\t\t\t\tsuuid.c_str(),\n\t\t\t\t\tssenderid.c_str(),\n\t\t\t\t\tsname.c_str(),\n\t\t\t\t\tsdevtype.c_str());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Update\n\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\tstruct tm ltime;\n\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\tm_sql.safe_query(\"UPDATE MobileDevices SET Active=%d, SenderID='%q', LastUpdate='%04d-%02d-%02d %02d:%02d:%02d' WHERE (UUID == '%q')\",\n\t\t\t\t\tiActive,\n\t\t\t\t\tssenderid.c_str(),\n\t\t\t\t\tltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday, ltime.tm_hour, ltime.tm_min, ltime.tm_sec,\n\t\t\t\t\tsuuid.c_str()\n\t\t\t\t);\n\n\t\t\t\tstd::string dname = result[0][1];\n\t\t\t\tstd::string ddevtype = result[0][2];\n\t\t\t\tif (dname.empty() || ddevtype.empty())\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE MobileDevices SET Name='%q', DeviceType='%q' WHERE (UUID == '%q')\",\n\t\t\t\t\t\tsname.c_str(), sdevtype.c_str(),\n\t\t\t\t\t\tsuuid.c_str()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateMobileDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tstd::string enabled = request::findValue(&req, \"enabled\");\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\n\t\t\tif (\n\t\t\t\t(sidx.empty()) ||\n\t\t\t\t(enabled.empty()) ||\n\t\t\t\t(name.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tuint64_t idx = std::strtoull(sidx.c_str(), nullptr, 10);\n\n\t\t\tm_sql.safe_query(\"UPDATE MobileDevices SET Name='%q', Active=%d WHERE (ID==%\" PRIu64 \")\",\n\t\t\t\tname.c_str(), (enabled == \"true\") ? 1 : 0, idx);\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"UpdateMobile\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeleteMobileDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string suuid = request::findValue(&req, \"uuid\");\n\t\t\tif (suuid.empty())\n\t\t\t\treturn;\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM MobileDevices WHERE (UUID=='%q')\", suuid.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\tm_sql.safe_query(\"DELETE FROM MobileDevices WHERE (UUID == '%q')\", suuid.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteMobileDevice\";\n\t\t}\n\n\n\t\tvoid CWebServer::RType_GetTransfers(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetTransfers\";\n\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType FROM DeviceStatus WHERE (ID==%\" PRIu64 \")\",\n\t\t\t\tidx);\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint dType = atoi(result[0][0].c_str());\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeTEMP) ||\n\t\t\t\t\t(dType == pTypeTEMP_HUM)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT ID, Name FROM DeviceStatus WHERE (Type=='%q') AND (ID!=%\" PRIu64 \")\",\n\t\t\t\t\t\tresult[0][0].c_str(), idx);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT ID, Name FROM DeviceStatus WHERE (Type=='%q') AND (SubType=='%q') AND (ID!=%\" PRIu64 \")\",\n\t\t\t\t\t\tresult[0][0].c_str(), result[0][1].c_str(), idx);\n\t\t\t\t}\n\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Will transfer Newest sensor log to OLD sensor,\n\t\t//then set the HardwareID/DeviceID/Unit/Name/Type/Subtype/Unit for the OLD sensor to the NEW sensor ID/Type/Subtype/Unit\n\t\t//then delete the NEW sensor\n\t\tvoid CWebServer::RType_TransferDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tif (sidx.empty())\n\t\t\t\treturn;\n\n\t\t\tstd::string newidx = request::findValue(&req, \"newidx\");\n\t\t\tif (newidx.empty())\n\t\t\t\treturn;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\t//Check which device is newer\n\n\t\t\ttime_t now = mytime(NULL);\n\t\t\tstruct tm tm1;\n\t\t\tlocaltime_r(&now, &tm1);\n\t\t\tstruct tm LastUpdateTime_A;\n\t\t\tstruct tm LastUpdateTime_B;\n\n\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\"SELECT A.LastUpdate, B.LastUpdate FROM DeviceStatus as A, DeviceStatus as B WHERE (A.ID == '%q') AND (B.ID == '%q')\",\n\t\t\t\tsidx.c_str(), newidx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\tstd::string sLastUpdate_A = result[0][0];\n\t\t\tstd::string sLastUpdate_B = result[0][1];\n\n\t\t\ttime_t timeA, timeB;\n\t\t\tParseSQLdatetime(timeA, LastUpdateTime_A, sLastUpdate_A, tm1.tm_isdst);\n\t\t\tParseSQLdatetime(timeB, LastUpdateTime_B, sLastUpdate_B, tm1.tm_isdst);\n\n\t\t\tif (timeA < timeB)\n\t\t\t{\n\t\t\t\t//Swap idx with newidx\n\t\t\t\tsidx.swap(newidx);\n\t\t\t}\n\n\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\"SELECT HardwareID, DeviceID, Unit, Name, Type, SubType, SignalLevel, BatteryLevel, nValue, sValue FROM DeviceStatus WHERE (ID == '%q')\",\n\t\t\t\tnewidx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"TransferDevice\";\n\n\t\t\t//transfer device logs (new to old)\n\t\t\tm_sql.TransferDevice(newidx, sidx);\n\n\t\t\t//now delete the NEW device\n\t\t\tm_sql.DeleteDevices(newidx);\n\n\t\t\tm_mainworker.m_scheduler.ReloadSchedules();\n\t\t}\n\n\t\tvoid CWebServer::RType_Notifications(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Notifications\";\n\n\t\t\tint ii = 0;\n\n\t\t\t//Add known notification systems\n\t\t\tfor (const auto & ittNotifiers : m_notifications.m_notifiers)\n\t\t\t{\n\t\t\t\troot[\"notifiers\"][ii][\"name\"] = ittNotifiers.first;\n\t\t\t\troot[\"notifiers\"][ii][\"description\"] = ittNotifiers.first;\n\t\t\t\tii++;\n\t\t\t}\n\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\t\t\tstd::vector<_tNotification> notifications = m_notifications.GetNotifications(idx);\n\t\t\tif (notifications.size() > 0)\n\t\t\t{\n\t\t\t\tii = 0;\n\t\t\t\tfor (const auto & itt : notifications)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = itt.ID;\n\t\t\t\t\tstd::string sParams = itt.Params;\n\t\t\t\t\tif (sParams.empty()) {\n\t\t\t\t\t\tsParams = \"S\";\n\t\t\t\t\t}\n\t\t\t\t\troot[\"result\"][ii][\"Params\"] = sParams;\n\t\t\t\t\troot[\"result\"][ii][\"Priority\"] = itt.Priority;\n\t\t\t\t\troot[\"result\"][ii][\"SendAlways\"] = itt.SendAlways;\n\t\t\t\t\troot[\"result\"][ii][\"CustomMessage\"] = itt.CustomMessage;\n\t\t\t\t\troot[\"result\"][ii][\"ActiveSystems\"] = itt.ActiveSystems;\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_GetSharedUserDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetSharedUserDevices\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT DeviceRowID FROM SharedDevices WHERE (SharedUserID == '%q')\", idx.c_str());\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\troot[\"result\"][ii][\"DeviceRowIdx\"] = sd[0];\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_SetSharedUserDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string userdevices = request::findValue(&req, \"devices\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"SetSharedUserDevices\";\n\t\t\tstd::vector<std::string> strarray;\n\t\t\tStringSplit(userdevices, \";\", strarray);\n\n\t\t\t//First delete all devices for this user, then add the (new) onces\n\t\t\tm_sql.safe_query(\"DELETE FROM SharedDevices WHERE (SharedUserID == '%q')\", idx.c_str());\n\n\t\t\tint nDevices = static_cast<int>(strarray.size());\n\t\t\tfor (int ii = 0; ii < nDevices; ii++)\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\"INSERT INTO SharedDevices (SharedUserID,DeviceRowID) VALUES ('%q','%q')\", idx.c_str(), strarray[ii].c_str());\n\t\t\t}\n\t\t\tLoadUsers();\n\t\t}\n\n\t\tvoid CWebServer::RType_SetUsed(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string deviceid = request::findValue(&req, \"deviceid\");\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\tstd::string description = request::findValue(&req, \"description\");\n\t\t\tstd::string sused = request::findValue(&req, \"used\");\n\t\t\tstd::string sswitchtype = request::findValue(&req, \"switchtype\");\n\t\t\tstd::string maindeviceidx = request::findValue(&req, \"maindeviceidx\");\n\t\t\tstd::string addjvalue = request::findValue(&req, \"addjvalue\");\n\t\t\tstd::string addjmulti = request::findValue(&req, \"addjmulti\");\n\t\t\tstd::string addjvalue2 = request::findValue(&req, \"addjvalue2\");\n\t\t\tstd::string addjmulti2 = request::findValue(&req, \"addjmulti2\");\n\t\t\tstd::string setPoint = request::findValue(&req, \"setpoint\");\n\t\t\tstd::string state = request::findValue(&req, \"state\");\n\t\t\tstd::string mode = request::findValue(&req, \"mode\");\n\t\t\tstd::string until = request::findValue(&req, \"until\");\n\t\t\tstd::string clock = request::findValue(&req, \"clock\");\n\t\t\tstd::string tmode = request::findValue(&req, \"tmode\");\n\t\t\tstd::string fmode = request::findValue(&req, \"fmode\");\n\t\t\tstd::string sCustomImage = request::findValue(&req, \"customimage\");\n\n\t\t\tstd::string strunit = request::findValue(&req, \"unit\");\n\t\t\tstd::string strParam1 = base64_decode(request::findValue(&req, \"strparam1\"));\n\t\t\tstd::string strParam2 = base64_decode(request::findValue(&req, \"strparam2\"));\n\t\t\tstd::string tmpstr = request::findValue(&req, \"protected\");\n\t\t\tbool bHasstrParam1 = request::hasValue(&req, \"strparam1\");\n\t\t\tint iProtected = (tmpstr == \"true\") ? 1 : 0;\n\n\t\t\tstd::string sOptions = base64_decode(request::findValue(&req, \"options\"));\n\t\t\tstd::string devoptions = CURLEncode::URLDecode(request::findValue(&req, \"devoptions\"));\n\t\t\tstd::string EnergyMeterMode = CURLEncode::URLDecode(request::findValue(&req, \"EnergyMeterMode\"));\n\n\t\t\tchar szTmp[200];\n\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint iUser = -1;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tiUser = FindUser(session.username.c_str());\n\t\t\t}\n\n\t\t\tint switchtype = -1;\n\t\t\tif (sswitchtype != \"\")\n\t\t\t\tswitchtype = atoi(sswitchtype.c_str());\n\n\t\t\tif ((idx.empty()) || (sused.empty()))\n\t\t\t\treturn;\n\t\t\tint used = (sused == \"true\") ? 1 : 0;\n\t\t\tif (maindeviceidx != \"\")\n\t\t\t\tused = 0;\n\n\t\t\tint CustomImage = 0;\n\t\t\tif (sCustomImage != \"\")\n\t\t\t\tCustomImage = atoi(sCustomImage.c_str());\n\n\t\t\t//Strip trailing spaces in 'name'\n\t\t\tname = stdstring_trim(name);\n\n\t\t\t//Strip trailing spaces in 'description'\n\t\t\tdescription = stdstring_trim(description);\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\tresult = m_sql.safe_query(\"SELECT Type,SubType,HardwareID FROM DeviceStatus WHERE (ID == '%q')\", idx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\tunsigned char dType = atoi(sd[0].c_str());\n\t\t\t//unsigned char dSubType=atoi(sd[1].c_str());\n\t\t\tint HwdID = atoi(sd[2].c_str());\n\t\t\tstd::string sHwdID = sd[2];\n\n\t\t\tif (setPoint != \"\" || state != \"\")\n\t\t\t{\n\t\t\t\tdouble tempcelcius = atof(setPoint.c_str());\n\t\t\t\tif (m_sql.m_tempunit == TEMPUNIT_F)\n\t\t\t\t{\n\t\t\t\t\t//Convert back to Celsius\n\t\t\t\t\ttempcelcius = ConvertToCelsius(tempcelcius);\n\t\t\t\t}\n\t\t\t\tsprintf(szTmp, \"%.2f\", tempcelcius);\n\n\t\t\t\tif (dType != pTypeEvohomeZone && dType != pTypeEvohomeWater)//sql update now done in setsetpoint for evohome devices\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Used=%d, sValue='%q' WHERE (ID == '%q')\",\n\t\t\t\t\t\tused, szTmp, idx.c_str());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (name.empty())\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Used=%d WHERE (ID == '%q')\",\n\t\t\t\t\tused, idx.c_str());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (switchtype == -1)\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Used=%d, Name='%q', Description='%q' WHERE (ID == '%q')\",\n\t\t\t\t\t\tused, name.c_str(), description.c_str(), idx.c_str());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE DeviceStatus SET Used=%d, Name='%q', Description='%q', SwitchType=%d, CustomImage=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tused, name.c_str(), description.c_str(), switchtype, CustomImage, idx.c_str());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (bHasstrParam1)\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET StrParam1='%q', StrParam2='%q' WHERE (ID == '%q')\",\n\t\t\t\t\tstrParam1.c_str(), strParam2.c_str(), idx.c_str());\n\t\t\t}\n\n\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Protected=%d WHERE (ID == '%q')\", iProtected, idx.c_str());\n\n\t\t\tif (!setPoint.empty() || !state.empty())\n\t\t\t{\n\t\t\t\tint urights = 3;\n\t\t\t\tif (bHaveUser)\n\t\t\t\t{\n\t\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\t\tif (iUser != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a SetPoint command\", m_users[iUser].Username.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urights < 1)\n\t\t\t\t\treturn;\n\t\t\t\tif (dType == pTypeEvohomeWater)\n\t\t\t\t\tm_mainworker.SetSetPoint(idx, (state == \"On\") ? 1.0f : 0.0f, mode, until);//FIXME float not guaranteed precise?\n\t\t\t\telse if (dType == pTypeEvohomeZone)\n\t\t\t\t\tm_mainworker.SetSetPoint(idx, static_cast<float>(atof(setPoint.c_str())), mode, until);\n\t\t\t\telse\n\t\t\t\t\tm_mainworker.SetSetPoint(idx, static_cast<float>(atof(setPoint.c_str())));\n\t\t\t}\n\t\t\telse if (!clock.empty())\n\t\t\t{\n\t\t\t\tint urights = 3;\n\t\t\t\tif (bHaveUser)\n\t\t\t\t{\n\t\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\t\tif (iUser != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a SetClock command\", m_users[iUser].Username.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urights < 1)\n\t\t\t\t\treturn;\n\t\t\t\tm_mainworker.SetClock(idx, clock);\n\t\t\t}\n\t\t\telse if (!tmode.empty())\n\t\t\t{\n\t\t\t\tint urights = 3;\n\t\t\t\tif (bHaveUser)\n\t\t\t\t{\n\t\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\t\tif (iUser != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a Thermostat Mode command\", m_users[iUser].Username.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urights < 1)\n\t\t\t\t\treturn;\n\t\t\t\tm_mainworker.SetZWaveThermostatMode(idx, atoi(tmode.c_str()));\n\t\t\t}\n\t\t\telse if (!fmode.empty())\n\t\t\t{\n\t\t\t\tint urights = 3;\n\t\t\t\tif (bHaveUser)\n\t\t\t\t{\n\t\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\t\tif (iUser != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a Thermostat Fan Mode command\", m_users[iUser].Username.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urights < 1)\n\t\t\t\t\treturn;\n\t\t\t\tm_mainworker.SetZWaveThermostatFanMode(idx, atoi(fmode.c_str()));\n\t\t\t}\n\n\t\t\tif (!strunit.empty())\n\t\t\t{\n\t\t\t\tbool bUpdateUnit = true;\n#ifdef ENABLE_PYTHON\n\t\t\t\t//check if HW is plugin\n\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Type FROM Hardware WHERE (ID == %d)\", HwdID);\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t_eHardwareTypes Type = (_eHardwareTypes)atoi(sd[0].c_str());\n\t\t\t\t\tif (Type == HTYPE_PythonPlugin)\n\t\t\t\t\t{\n\t\t\t\t\t\tbUpdateUnit = false;\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"CWebServer::RType_SetUsed: Not allowed to change unit of device owned by plugin %u!\", HwdID);\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\t\t\t\tif (bUpdateUnit)\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Unit='%q' WHERE (ID == '%q')\",\n\t\t\t\t\t\tstrunit.c_str(), idx.c_str());\n\t\t\t\t}\n\t\t\t}\n\t\t\t//FIXME evohome ...we need the zone id to update the correct zone...but this should be ok as a generic call?\n\t\t\tif (!deviceid.empty())\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET DeviceID='%q' WHERE (ID == '%q')\",\n\t\t\t\t\tdeviceid.c_str(), idx.c_str());\n\t\t\t}\n\t\t\tif (!addjvalue.empty())\n\t\t\t{\n\t\t\t\tdouble faddjvalue = atof(addjvalue.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET AddjValue=%f WHERE (ID == '%q')\",\n\t\t\t\t\tfaddjvalue, idx.c_str());\n\t\t\t}\n\t\t\tif (!addjmulti.empty())\n\t\t\t{\n\t\t\t\tdouble faddjmulti = atof(addjmulti.c_str());\n\t\t\t\tif (faddjmulti == 0)\n\t\t\t\t\tfaddjmulti = 1;\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET AddjMulti=%f WHERE (ID == '%q')\",\n\t\t\t\t\tfaddjmulti, idx.c_str());\n\t\t\t}\n\t\t\tif (!addjvalue2.empty())\n\t\t\t{\n\t\t\t\tdouble faddjvalue2 = atof(addjvalue2.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET AddjValue2=%f WHERE (ID == '%q')\",\n\t\t\t\t\tfaddjvalue2, idx.c_str());\n\t\t\t}\n\t\t\tif (!addjmulti2.empty())\n\t\t\t{\n\t\t\t\tdouble faddjmulti2 = atof(addjmulti2.c_str());\n\t\t\t\tif (faddjmulti2 == 0)\n\t\t\t\t\tfaddjmulti2 = 1;\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET AddjMulti2=%f WHERE (ID == '%q')\",\n\t\t\t\t\tfaddjmulti2, idx.c_str());\n\t\t\t}\n\t\t\tif (!EnergyMeterMode.empty())\n\t\t\t{\n\t\t\t\tauto options = m_sql.GetDeviceOptions(idx);\n\t\t\t\toptions[\"EnergyMeterMode\"] = EnergyMeterMode;\n\t\t\t\tuint64_t ullidx = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_sql.SetDeviceOptions(ullidx, options);\n\t\t\t}\n\n\t\t\tif (!devoptions.empty())\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Options='%q' WHERE (ID == '%q')\", devoptions.c_str(), idx.c_str());\n\t\t\t}\n\n\t\t\tif (used == 0)\n\t\t\t{\n\t\t\t\tbool bRemoveSubDevices = (request::findValue(&req, \"RemoveSubDevices\") == \"true\");\n\n\t\t\t\tif (bRemoveSubDevices)\n\t\t\t\t{\n\t\t\t\t\t//if this device was a slave device, remove it\n\t\t\t\t\tm_sql.safe_query(\"DELETE FROM LightSubDevices WHERE (DeviceRowID == '%q')\", idx.c_str());\n\t\t\t\t}\n\t\t\t\tm_sql.safe_query(\"DELETE FROM LightSubDevices WHERE (ParentID == '%q')\", idx.c_str());\n\n\t\t\t\tm_sql.safe_query(\"DELETE FROM Timers WHERE (DeviceRowID == '%q')\", idx.c_str());\n\t\t\t}\n\n\t\t\t// Save device options\n\t\t\tif (!sOptions.empty())\n\t\t\t{\n\t\t\t\tuint64_t ullidx = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_sql.SetDeviceOptions(ullidx, m_sql.BuildDeviceOptions(sOptions, false));\n\t\t\t}\n\n\t\t\tif (maindeviceidx != \"\")\n\t\t\t{\n\t\t\t\tif (maindeviceidx != idx)\n\t\t\t\t{\n\t\t\t\t\t//this is a sub device for another light/switch\n\t\t\t\t\t//first check if it is not already a sub device\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q') AND (ParentID =='%q')\",\n\t\t\t\t\t\tidx.c_str(), maindeviceidx.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\t//no it is not, add it\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"INSERT INTO LightSubDevices (DeviceRowID, ParentID) VALUES ('%q','%q')\",\n\t\t\t\t\t\t\tidx.c_str(),\n\t\t\t\t\t\t\tmaindeviceidx.c_str()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ((used == 0) && (maindeviceidx.empty()))\n\t\t\t{\n\t\t\t\t//really remove it, including log etc\n\t\t\t\tm_sql.DeleteDevices(idx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n#ifdef ENABLE_PYTHON\n\t\t\t\t// Notify plugin framework about the change\n\t\t\t\tm_mainworker.m_pluginsystem.DeviceModified(atoi(idx.c_str()));\n#endif\n\t\t\t}\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"SetUsed\";\n\t\t\t}\n\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t\tm_mainworker.m_eventsystem.GetCurrentStates();\n\t\t}\n\n\t\tvoid CWebServer::RType_Settings(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tchar szTmp[100];\n\n\t\t\tresult = m_sql.safe_query(\"SELECT Key, nValue, sValue FROM Preferences\");\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"settings\";\n#ifndef NOCLOUD\n\t\t\troot[\"cloudenabled\"] = true;\n#else\n\t\t\troot[\"cloudenabled\"] = false;\n#endif\n\n\t\t\tfor (const auto & itt : result)\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\tstd::string Key = sd[0];\n\t\t\t\tint nValue = atoi(sd[1].c_str());\n\t\t\t\tstd::string sValue = sd[2];\n\n\t\t\t\tif (Key == \"Location\")\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\n\t\t\t\t\tif (strarray.size() == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"Location\"][\"Latitude\"] = strarray[0];\n\t\t\t\t\t\troot[\"Location\"][\"Longitude\"] = strarray[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* RK: notification settings */\n\t\t\t\tif (m_notifications.IsInConfig(Key)) {\n\t\t\t\t\tif (sValue.empty() && nValue > 0) {\n\t\t\t\t\t\troot[Key] = nValue;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\troot[Key] = sValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DashboardType\")\n\t\t\t\t{\n\t\t\t\t\troot[\"DashboardType\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MobileType\")\n\t\t\t\t{\n\t\t\t\t\troot[\"MobileType\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"LightHistoryDays\")\n\t\t\t\t{\n\t\t\t\t\troot[\"LightHistoryDays\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"5MinuteHistoryDays\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShortLogDays\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ShortLogInterval\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShortLogInterval\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WebUserName\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WebUserName\"] = base64_decode(sValue);\n\t\t\t\t}\n\t\t\t\t//else if (Key == \"WebPassword\")\n\t\t\t\t//{\n\t\t\t\t//\troot[\"WebPassword\"] = sValue;\n\t\t\t\t//}\n\t\t\t\telse if (Key == \"SecPassword\")\n\t\t\t\t{\n\t\t\t\t\troot[\"SecPassword\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ProtectionPassword\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ProtectionPassword\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WebLocalNetworks\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WebLocalNetworks\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WebRemoteProxyIPs\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WebRemoteProxyIPs\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"RandomTimerFrame\")\n\t\t\t\t{\n\t\t\t\t\troot[\"RandomTimerFrame\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MeterDividerEnergy\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnergyDivider\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MeterDividerGas\")\n\t\t\t\t{\n\t\t\t\t\troot[\"GasDivider\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MeterDividerWater\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WaterDivider\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ElectricVoltage\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ElectricVoltage\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CM113DisplayType\")\n\t\t\t\t{\n\t\t\t\t\troot[\"CM113DisplayType\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"UseAutoUpdate\")\n\t\t\t\t{\n\t\t\t\t\troot[\"UseAutoUpdate\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"UseAutoBackup\")\n\t\t\t\t{\n\t\t\t\t\troot[\"UseAutoBackup\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"Rego6XXType\")\n\t\t\t\t{\n\t\t\t\t\troot[\"Rego6XXType\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostEnergy\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostEnergy\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostEnergyT2\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostEnergyT2\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostEnergyR1\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostEnergyR1\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostEnergyR2\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostEnergyR2\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostGas\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostGas\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostWater\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostWater\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ActiveTimerPlan\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ActiveTimerPlan\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DoorbellCommand\")\n\t\t\t\t{\n\t\t\t\t\troot[\"DoorbellCommand\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"SmartMeterType\")\n\t\t\t\t{\n\t\t\t\t\troot[\"SmartMeterType\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabFloorplans\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabFloorplans\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabLights\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabLights\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabTemp\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabTemp\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabWeather\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabWeather\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabUtility\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabUtility\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabScenes\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabScenes\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabCustom\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabCustom\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"NotificationSensorInterval\")\n\t\t\t\t{\n\t\t\t\t\troot[\"NotificationSensorInterval\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"NotificationSwitchInterval\")\n\t\t\t\t{\n\t\t\t\t\troot[\"NotificationSwitchInterval\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"RemoteSharedPort\")\n\t\t\t\t{\n\t\t\t\t\troot[\"RemoteSharedPort\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"Language\")\n\t\t\t\t{\n\t\t\t\t\troot[\"Language\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"Title\")\n\t\t\t\t{\n\t\t\t\t\troot[\"Title\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WindUnit\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WindUnit\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"TempUnit\")\n\t\t\t\t{\n\t\t\t\t\troot[\"TempUnit\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WeightUnit\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WeightUnit\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"AuthenticationMethod\")\n\t\t\t\t{\n\t\t\t\t\troot[\"AuthenticationMethod\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ReleaseChannel\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ReleaseChannel\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"RaspCamParams\")\n\t\t\t\t{\n\t\t\t\t\troot[\"RaspCamParams\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"UVCParams\")\n\t\t\t\t{\n\t\t\t\t\troot[\"UVCParams\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"AcceptNewHardware\")\n\t\t\t\t{\n\t\t\t\t\troot[\"AcceptNewHardware\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"HideDisabledHardwareSensors\")\n\t\t\t\t{\n\t\t\t\t\troot[\"HideDisabledHardwareSensors\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ShowUpdateEffect\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShowUpdateEffect\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DegreeDaysBaseTemperature\")\n\t\t\t\t{\n\t\t\t\t\troot[\"DegreeDaysBaseTemperature\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableEventScriptSystem\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableEventScriptSystem\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DisableDzVentsSystem\")\n\t\t\t\t{\n\t\t\t\t\troot[\"DisableDzVentsSystem\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DzVentsLogLevel\")\n\t\t\t\t{\n\t\t\t\t\troot[\"DzVentsLogLevel\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"LogEventScriptTrigger\")\n\t\t\t\t{\n\t\t\t\t\troot[\"LogEventScriptTrigger\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"(1WireSensorPollPeriod\")\n\t\t\t\t{\n\t\t\t\t\troot[\"1WireSensorPollPeriod\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"(1WireSwitchPollPeriod\")\n\t\t\t\t{\n\t\t\t\t\troot[\"1WireSwitchPollPeriod\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"SecOnDelay\")\n\t\t\t\t{\n\t\t\t\t\troot[\"SecOnDelay\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"AllowWidgetOrdering\")\n\t\t\t\t{\n\t\t\t\t\troot[\"AllowWidgetOrdering\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanPopupDelay\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanPopupDelay\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanFullscreenMode\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanFullscreenMode\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanAnimateZoom\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanAnimateZoom\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanShowSensorValues\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanShowSensorValues\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanShowSwitchValues\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanShowSwitchValues\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanShowSceneNames\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanShowSceneNames\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanRoomColour\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanRoomColour\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanActiveOpacity\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanActiveOpacity\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanInactiveOpacity\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanInactiveOpacity\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"SensorTimeout\")\n\t\t\t\t{\n\t\t\t\t\troot[\"SensorTimeout\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"BatteryLowNotification\")\n\t\t\t\t{\n\t\t\t\t\troot[\"BatterLowLevel\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WebTheme\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WebTheme\"] = sValue;\n\t\t\t\t}\n#ifndef NOCLOUD\n\t\t\t\telse if (Key == \"MyDomoticzInstanceId\") {\n\t\t\t\t\troot[\"MyDomoticzInstanceId\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MyDomoticzUserId\") {\n\t\t\t\t\troot[\"MyDomoticzUserId\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MyDomoticzPassword\") {\n\t\t\t\t\troot[\"MyDomoticzPassword\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MyDomoticzSubsystems\") {\n\t\t\t\t\troot[\"MyDomoticzSubsystems\"] = nValue;\n\t\t\t\t}\n#endif\n\t\t\t\telse if (Key == \"MyDomoticzSubsystems\") {\n\t\t\t\t\troot[\"MyDomoticzSubsystems\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"SendErrorsAsNotification\") {\n\t\t\t\t\troot[\"SendErrorsAsNotification\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DeltaTemperatureLog\") {\n\t\t\t\t\troot[Key] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"IFTTTEnabled\") {\n\t\t\t\t\troot[\"IFTTTEnabled\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"IFTTTAPI\") {\n\t\t\t\t\troot[\"IFTTTAPI\"] = sValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_LightLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t//First get Device Type/SubType\n\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType, SwitchType, Options FROM DeviceStatus WHERE (ID == %\" PRIu64 \")\",\n\t\t\t\tidx);\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\tunsigned char dType = atoi(result[0][0].c_str());\n\t\t\tunsigned char dSubType = atoi(result[0][1].c_str());\n\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(result[0][2].c_str());\n\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(result[0][3].c_str());\n\n\t\t\tif (\n\t\t\t\t(dType != pTypeLighting1) &&\n\t\t\t\t(dType != pTypeLighting2) &&\n\t\t\t\t(dType != pTypeLighting3) &&\n\t\t\t\t(dType != pTypeLighting4) &&\n\t\t\t\t(dType != pTypeLighting5) &&\n\t\t\t\t(dType != pTypeLighting6) &&\n\t\t\t\t(dType != pTypeFan) &&\n\t\t\t\t(dType != pTypeColorSwitch) &&\n\t\t\t\t(dType != pTypeSecurity1) &&\n\t\t\t\t(dType != pTypeSecurity2) &&\n\t\t\t\t(dType != pTypeEvohome) &&\n\t\t\t\t(dType != pTypeEvohomeRelay) &&\n\t\t\t\t(dType != pTypeCurtain) &&\n\t\t\t\t(dType != pTypeBlinds) &&\n\t\t\t\t(dType != pTypeRFY) &&\n\t\t\t\t(dType != pTypeRego6XXValue) &&\n\t\t\t\t(dType != pTypeChime) &&\n\t\t\t\t(dType != pTypeThermostat2) &&\n\t\t\t\t(dType != pTypeThermostat3) &&\n\t\t\t\t(dType != pTypeThermostat4) &&\n\t\t\t\t(dType != pTypeRemote) &&\n\t\t\t\t(dType != pTypeGeneralSwitch) &&\n\t\t\t\t(dType != pTypeHomeConfort) &&\n\t\t\t\t(dType != pTypeFS20) &&\n\t\t\t\t(!((dType == pTypeRadiator1) && (dSubType == sTypeSmartwaresSwitchRadiator)))\n\t\t\t\t)\n\t\t\t\treturn; //no light device! we should not be here!\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"LightLog\";\n\n\t\t\tresult = m_sql.safe_query(\"SELECT ROWID, nValue, sValue, Date FROM LightingLog WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date DESC\", idx);\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tstd::map<std::string, std::string> selectorStatuses;\n\t\t\t\tif (switchtype == STYPE_Selector) {\n\t\t\t\t\tGetSelectorSwitchStatuses(options, selectorStatuses);\n\t\t\t\t}\n\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tint nValue = atoi(sd[1].c_str());\n\t\t\t\t\tstd::string sValue = sd[2];\n\n\t\t\t\t\t//skip 0-values in log for MediaPlayers\n\t\t\t\t\tif ((switchtype == STYPE_Media) && (sValue == \"0\")) continue;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\n\t\t\t\t\t//add light details\n\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\tstd::string ldata = \"\";\n\t\t\t\t\tint llevel = 0;\n\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\tbool bHaveSelector = false;\n\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\tint maxDimLevel = 0;\n\n\t\t\t\t\tif (switchtype == STYPE_Media) {\n\t\t\t\t\t\tlstatus = sValue;\n\t\t\t\t\t\tldata = lstatus;\n\n\t\t\t\t\t}\n\t\t\t\t\telse if (switchtype == STYPE_Selector)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (ii == 0) {\n\t\t\t\t\t\t\tbHaveSelector = true;\n\t\t\t\t\t\t\tmaxDimLevel = selectorStatuses.size();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!selectorStatuses.empty()) {\n\n\t\t\t\t\t\t\tstd::string sLevel = selectorStatuses[sValue];\n\t\t\t\t\t\t\tldata = sLevel;\n\t\t\t\t\t\t\tlstatus = \"Set Level: \" + sLevel;\n\t\t\t\t\t\t\tllevel = atoi(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tGetLightStatus(dType, dSubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\t\t\t\t\t\tldata = lstatus;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ii == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"HaveDimmer\"] = bHaveDimmer;\n\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = maxDimLevel;\n\t\t\t\t\t\troot[\"HaveGroupCmd\"] = bHaveGroupCmd;\n\t\t\t\t\t\troot[\"HaveSelector\"] = bHaveSelector;\n\t\t\t\t\t}\n\n\t\t\t\t\troot[\"result\"][ii][\"Date\"] = sd[3];\n\t\t\t\t\troot[\"result\"][ii][\"Data\"] = ldata;\n\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\troot[\"result\"][ii][\"Level\"] = llevel;\n\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_TextLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"TextLog\";\n\n\t\t\tresult = m_sql.safe_query(\"SELECT ROWID, sValue, Date FROM LightingLog WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date DESC\",\n\t\t\t\tidx);\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Date\"] = sd[2];\n\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sd[1];\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_SceneLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"SceneLog\";\n\n\t\t\tresult = m_sql.safe_query(\"SELECT ROWID, nValue, Date FROM SceneLog WHERE (SceneRowID==%\" PRIu64 \") ORDER BY Date DESC\", idx);\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tint nValue = atoi(sd[1].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Date\"] = sd[2];\n\t\t\t\t\troot[\"result\"][ii][\"Data\"] = (nValue == 0) ? \"Off\" : \"On\";\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_HandleGraph(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tchar szTmp[300];\n\n\t\t\tstd::string sensor = request::findValue(&req, \"sensor\");\n\t\t\tif (sensor == \"\")\n\t\t\t\treturn;\n\t\t\tstd::string srange = request::findValue(&req, \"range\");\n\t\t\tif (srange == \"\")\n\t\t\t\treturn;\n\n\t\t\ttime_t now = mytime(NULL);\n\t\t\tstruct tm tm1;\n\t\t\tlocaltime_r(&now, &tm1);\n\n\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType, SwitchType, AddjValue, AddjMulti, AddjValue2, Options FROM DeviceStatus WHERE (ID == %\" PRIu64 \")\",\n\t\t\t\tidx);\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\tunsigned char dType = atoi(result[0][0].c_str());\n\t\t\tunsigned char dSubType = atoi(result[0][1].c_str());\n\t\t\t_eMeterType metertype = (_eMeterType)atoi(result[0][2].c_str());\n\t\t\tif (\n\t\t\t\t(dType == pTypeP1Power) ||\n\t\t\t\t(dType == pTypeENERGY) ||\n\t\t\t\t(dType == pTypePOWER) ||\n\t\t\t\t(dType == pTypeCURRENTENERGY) ||\n\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeKwh))\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tmetertype = MTYPE_ENERGY;\n\t\t\t}\n\t\t\telse if (dType == pTypeP1Gas)\n\t\t\t\tmetertype = MTYPE_GAS;\n\t\t\telse if ((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXCounter))\n\t\t\t\tmetertype = MTYPE_COUNTER;\n\n\t\t\t// Special case of managed counter: Usage instead of Value in Meter table, and we don't want to calculate last value\n\t\t\tbool bIsManagedCounter = (dType == pTypeGeneral) && (dSubType == sTypeManagedCounter);\n\n\t\t\tdouble AddjValue = atof(result[0][3].c_str());\n\t\t\tdouble AddjMulti = atof(result[0][4].c_str());\n\t\t\tdouble AddjValue2 = atof(result[0][5].c_str());\n\t\t\tstd::string sOptions = result[0][6].c_str();\n\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(sOptions);\n\n\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\tstd::string dbasetable = \"\";\n\t\t\tif (srange == \"day\") {\n\t\t\t\tif (sensor == \"temp\")\n\t\t\t\t\tdbasetable = \"Temperature\";\n\t\t\t\telse if (sensor == \"rain\")\n\t\t\t\t\tdbasetable = \"Rain\";\n\t\t\t\telse if (sensor == \"Percentage\")\n\t\t\t\t\tdbasetable = \"Percentage\";\n\t\t\t\telse if (sensor == \"fan\")\n\t\t\t\t\tdbasetable = \"Fan\";\n\t\t\t\telse if (sensor == \"counter\")\n\t\t\t\t{\n\t\t\t\t\tif ((dType == pTypeP1Power) || (dType == pTypeCURRENT) || (dType == pTypeCURRENTENERGY))\n\t\t\t\t\t{\n\t\t\t\t\t\tdbasetable = \"MultiMeter\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdbasetable = \"Meter\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ((sensor == \"wind\") || (sensor == \"winddir\"))\n\t\t\t\t\tdbasetable = \"Wind\";\n\t\t\t\telse if (sensor == \"uv\")\n\t\t\t\t\tdbasetable = \"UV\";\n\t\t\t\telse\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//week,year,month\n\t\t\t\tif (sensor == \"temp\")\n\t\t\t\t\tdbasetable = \"Temperature_Calendar\";\n\t\t\t\telse if (sensor == \"rain\")\n\t\t\t\t\tdbasetable = \"Rain_Calendar\";\n\t\t\t\telse if (sensor == \"Percentage\")\n\t\t\t\t\tdbasetable = \"Percentage_Calendar\";\n\t\t\t\telse if (sensor == \"fan\")\n\t\t\t\t\tdbasetable = \"Fan_Calendar\";\n\t\t\t\telse if (sensor == \"counter\")\n\t\t\t\t{\n\t\t\t\t\tif (\n\t\t\t\t\t\t(dType == pTypeP1Power) ||\n\t\t\t\t\t\t(dType == pTypeCURRENT) ||\n\t\t\t\t\t\t(dType == pTypeCURRENTENERGY) ||\n\t\t\t\t\t\t(dType == pTypeAirQuality) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVisibility)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeDistance)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSoilMoisture)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeLeafWetness)) ||\n\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorAD)) ||\n\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorVolt)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypePressure)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel)) ||\n\t\t\t\t\t\t(dType == pTypeLux) ||\n\t\t\t\t\t\t(dType == pTypeWEIGHT) ||\n\t\t\t\t\t\t(dType == pTypeUsage)\n\t\t\t\t\t\t)\n\t\t\t\t\t\tdbasetable = \"MultiMeter_Calendar\";\n\t\t\t\t\telse\n\t\t\t\t\t\tdbasetable = \"Meter_Calendar\";\n\t\t\t\t}\n\t\t\t\telse if ((sensor == \"wind\") || (sensor == \"winddir\"))\n\t\t\t\t\tdbasetable = \"Wind_Calendar\";\n\t\t\t\telse if (sensor == \"uv\")\n\t\t\t\t\tdbasetable = \"UV_Calendar\";\n\t\t\t\telse\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tunsigned char tempsign = m_sql.m_tempsign[0];\n\t\t\tint iPrev;\n\n\t\t\tif (srange == \"day\")\n\t\t\t{\n\t\t\t\tif (sensor == \"temp\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Temperature, Chill, Humidity, Barometer, Date, SetPoint FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[4].substr(0, 16);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeRego6XXTemp) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t\t\t\t(dType == pTypeThermostat1) ||\n\t\t\t\t\t\t\t\t(dType == pTypeRadiator1) ||\n\t\t\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSystemTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint)) ||\n\t\t\t\t\t\t\t\t(dType == pTypeEvohomeZone) ||\n\t\t\t\t\t\t\t\t(dType == pTypeEvohomeWater)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = tvalue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = tvalue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeHUM) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[2];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[3];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[5].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"Percentage\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Percentage, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"fan\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Speed, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\telse if (sensor == \"counter\")\n\t\t\t\t{\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1, Value2, Value3, Value4, Value5, Value6, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\t\tbool bHaveFirstValue = false;\n\t\t\t\t\t\t\tlong long lastUsage1, lastUsage2, lastDeliv1, lastDeliv2;\n\t\t\t\t\t\t\ttime_t lastTime = 0;\n\n\t\t\t\t\t\t\tlong long firstUsage1, firstUsage2, firstDeliv1, firstDeliv2;\n\n\t\t\t\t\t\t\tint nMeterType = 0;\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"SmartMeterType\", nMeterType);\n\n\t\t\t\t\t\t\tint lastDay = 0;\n\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\tif (nMeterType == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlong long actUsage1 = std::strtoll(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\tlong long actUsage2 = std::strtoll(sd[4].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\tlong long actDeliv1 = std::strtoll(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\tlong long actDeliv2 = std::strtoll(sd[5].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\tactDeliv1 = (actDeliv1 < 10) ? 0 : actDeliv1;\n\t\t\t\t\t\t\t\t\tactDeliv2 = (actDeliv2 < 10) ? 0 : actDeliv2;\n\n\t\t\t\t\t\t\t\t\tstd::string stime = sd[6];\n\t\t\t\t\t\t\t\t\tstruct tm ntime;\n\t\t\t\t\t\t\t\t\ttime_t atime;\n\t\t\t\t\t\t\t\t\tParseSQLdatetime(atime, ntime, stime, -1);\n\t\t\t\t\t\t\t\t\tif (lastDay != ntime.tm_mday)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlastDay = ntime.tm_mday;\n\t\t\t\t\t\t\t\t\t\tfirstUsage1 = actUsage1;\n\t\t\t\t\t\t\t\t\t\tfirstUsage2 = actUsage2;\n\t\t\t\t\t\t\t\t\t\tfirstDeliv1 = actDeliv1;\n\t\t\t\t\t\t\t\t\t\tfirstDeliv2 = actDeliv2;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (bHaveFirstValue)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlong curUsage1 = (long)(actUsage1 - lastUsage1);\n\t\t\t\t\t\t\t\t\t\tlong curUsage2 = (long)(actUsage2 - lastUsage2);\n\t\t\t\t\t\t\t\t\t\tlong curDeliv1 = (long)(actDeliv1 - lastDeliv1);\n\t\t\t\t\t\t\t\t\t\tlong curDeliv2 = (long)(actDeliv2 - lastDeliv2);\n\n\t\t\t\t\t\t\t\t\t\tif ((curUsage1 < 0) || (curUsage1 > 100000))\n\t\t\t\t\t\t\t\t\t\t\tcurUsage1 = 0;\n\t\t\t\t\t\t\t\t\t\tif ((curUsage2 < 0) || (curUsage2 > 100000))\n\t\t\t\t\t\t\t\t\t\t\tcurUsage2 = 0;\n\t\t\t\t\t\t\t\t\t\tif ((curDeliv1 < 0) || (curDeliv1 > 100000))\n\t\t\t\t\t\t\t\t\t\t\tcurDeliv1 = 0;\n\t\t\t\t\t\t\t\t\t\tif ((curDeliv2 < 0) || (curDeliv2 > 100000))\n\t\t\t\t\t\t\t\t\t\t\tcurDeliv2 = 0;\n\n\t\t\t\t\t\t\t\t\t\tfloat tdiff = static_cast<float>(difftime(atime, lastTime));\n\t\t\t\t\t\t\t\t\t\tif (tdiff == 0)\n\t\t\t\t\t\t\t\t\t\t\ttdiff = 1;\n\t\t\t\t\t\t\t\t\t\tfloat tlaps = 3600.0f / tdiff;\n\t\t\t\t\t\t\t\t\t\tcurUsage1 *= int(tlaps);\n\t\t\t\t\t\t\t\t\t\tcurUsage2 *= int(tlaps);\n\t\t\t\t\t\t\t\t\t\tcurDeliv1 *= int(tlaps);\n\t\t\t\t\t\t\t\t\t\tcurDeliv2 *= int(tlaps);\n\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[6].substr(0, 16);\n\n\t\t\t\t\t\t\t\t\t\tif ((curDeliv1 != 0) || (curDeliv2 != 0))\n\t\t\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", curUsage1);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", curUsage2);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", curDeliv1);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", curDeliv2);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r2\"] = szTmp;\n\n\t\t\t\t\t\t\t\t\t\tlong pUsage1 = (long)(actUsage1 - firstUsage1);\n\t\t\t\t\t\t\t\t\t\tlong pUsage2 = (long)(actUsage2 - firstUsage2);\n\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", pUsage1 + pUsage2);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"eu\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlong pDeliv1 = (long)(actDeliv1 - firstDeliv1);\n\t\t\t\t\t\t\t\t\t\t\tlong pDeliv2 = (long)(actDeliv2 - firstDeliv2);\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", pDeliv1 + pDeliv2);\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"eg\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbHaveFirstValue = true;\n\t\t\t\t\t\t\t\t\t\tif ((ntime.tm_hour != 0) && (ntime.tm_min != 0))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\t\t\t\t\t\tlocaltime_r(&atime, &tm1);\n\t\t\t\t\t\t\t\t\t\t\tgetNoon(atime, ltime, ntime.tm_year + 1900, ntime.tm_mon + 1, ntime.tm_mday - 1); // We're only interested in finding the date\n\t\t\t\t\t\t\t\t\t\t\tint year = ltime.tm_year + 1900;\n\t\t\t\t\t\t\t\t\t\t\tint mon = ltime.tm_mon + 1;\n\t\t\t\t\t\t\t\t\t\t\tint day = ltime.tm_mday;\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%04d-%02d-%02d\", year, mon, day);\n\t\t\t\t\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\n\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT Counter1, Counter2, Counter3, Counter4 FROM Multimeter_Calendar WHERE (DeviceRowID==%\" PRIu64 \") AND (Date=='%q')\",\n\t\t\t\t\t\t\t\t\t\t\t\tidx, szTmp);\n\t\t\t\t\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tstd::vector<std::string> sd = result2[0];\n\t\t\t\t\t\t\t\t\t\t\t\tfirstUsage1 = std::strtoll(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\t\t\t\tfirstDeliv1 = std::strtoll(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\t\t\t\tfirstUsage2 = std::strtoll(sd[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\t\t\t\tfirstDeliv2 = std::strtoll(sd[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\t\t\t\tlastDay = ntime.tm_mday;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlastUsage1 = actUsage1;\n\t\t\t\t\t\t\t\t\tlastUsage2 = actUsage2;\n\t\t\t\t\t\t\t\t\tlastDeliv1 = actDeliv1;\n\t\t\t\t\t\t\t\t\tlastDeliv2 = actDeliv2;\n\t\t\t\t\t\t\t\t\tlastTime = atime;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//this meter has no decimals, so return the use peaks\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[6].substr(0, 16);\n\n\t\t\t\t\t\t\t\t\tif (sd[3] != \"0\")\n\t\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = sd[2];\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = sd[3];\n\t\t\t\t\t\t\t\t\tii++;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeAirQuality)\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"co2\"] = sd[0];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeGeneral) && ((dSubType == sTypeSoilMoisture) || (dSubType == sTypeLeafWetness)))\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = sd[0];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVisibility)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeDistance)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypePressure)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel))\n\t\t\t\t\t\t)\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\t\tfloat vdiv = 10.0f;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvdiv = 1000.0f;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\tfloat fValue = float(atof(sd[0].c_str())) / vdiv;\n\t\t\t\t\t\t\t\tif (metertype == 1)\n\t\t\t\t\t\t\t\t\tfValue *= 0.6214f;\n\t\t\t\t\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeVoltage))\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue);\n\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue);\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeRFXSensor) && ((dSubType == sTypeRFXSensorAD) || (dSubType == sTypeRFXSensorVolt)))\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = sd[0];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeLux)\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"lux\"] = sd[0];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeWEIGHT)\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", m_sql.m_weightscale * atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeUsage)\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"u\"] = atof(sd[0].c_str()) / 10.0f;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENT)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\t//CM113\n\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\troot[\"displaytype\"] = displaytype;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1, Value2, Value3, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tbool bHaveL1 = false;\n\t\t\t\t\t\t\tbool bHaveL2 = false;\n\t\t\t\t\t\t\tbool bHaveL3 = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\n\t\t\t\t\t\t\t\tfloat fval1 = static_cast<float>(atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval2 = static_cast<float>(atof(sd[1].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval3 = static_cast<float>(atof(sd[2].c_str()) / 10.0f);\n\n\t\t\t\t\t\t\t\tif (fval1 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL1 = true;\n\t\t\t\t\t\t\t\tif (fval2 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL2 = true;\n\t\t\t\t\t\t\t\tif (fval3 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL3 = true;\n\n\t\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval3);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval1*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval2*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval3*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(!bHaveL1) &&\n\t\t\t\t\t\t\t\t(!bHaveL2) &&\n\t\t\t\t\t\t\t\t(!bHaveL3)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\troot[\"haveL1\"] = true; //show at least something\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (bHaveL1)\n\t\t\t\t\t\t\t\t\troot[\"haveL1\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL2)\n\t\t\t\t\t\t\t\t\troot[\"haveL2\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL3)\n\t\t\t\t\t\t\t\t\troot[\"haveL3\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENTENERGY)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\t//CM113\n\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\troot[\"displaytype\"] = displaytype;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1, Value2, Value3, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tbool bHaveL1 = false;\n\t\t\t\t\t\t\tbool bHaveL2 = false;\n\t\t\t\t\t\t\tbool bHaveL3 = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\n\t\t\t\t\t\t\t\tfloat fval1 = static_cast<float>(atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval2 = static_cast<float>(atof(sd[1].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval3 = static_cast<float>(atof(sd[2].c_str()) / 10.0f);\n\n\t\t\t\t\t\t\t\tif (fval1 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL1 = true;\n\t\t\t\t\t\t\t\tif (fval2 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL2 = true;\n\t\t\t\t\t\t\t\tif (fval3 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL3 = true;\n\n\t\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval3);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval1*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval2*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval3*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(!bHaveL1) &&\n\t\t\t\t\t\t\t\t(!bHaveL2) &&\n\t\t\t\t\t\t\t\t(!bHaveL3)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\troot[\"haveL1\"] = true; //show at least something\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (bHaveL1)\n\t\t\t\t\t\t\t\t\troot[\"haveL1\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL2)\n\t\t\t\t\t\t\t\t\troot[\"haveL2\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL3)\n\t\t\t\t\t\t\t\t\troot[\"haveL3\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeENERGY) || (dType == pTypePOWER) || (dType == pTypeYouLess) || ((dType == pTypeGeneral) && (dSubType == sTypeKwh)))\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\t\troot[\"ValueQuantity\"] = options[\"ValueQuantity\"];\n\t\t\t\t\t\troot[\"ValueUnits\"] = options[\"ValueUnits\"];\n\n\t\t\t\t\t\t//First check if we had any usage in the short log, if not, its probably a meter without usage\n\t\t\t\t\t\tbool bHaveUsage = true;\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT MIN([Usage]), MAX([Usage]) FROM %s WHERE (DeviceRowID==%\" PRIu64 \")\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlong long minValue = std::strtoll(result[0][0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tlong long maxValue = std::strtoll(result[0][1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tif ((minValue == 0) && (maxValue == 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbHaveUsage = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value,[Usage], Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\n\t\t\t\t\t\tint method = 0;\n\t\t\t\t\t\tstd::string sMethod = request::findValue(&req, \"method\");\n\t\t\t\t\t\tif (sMethod.size() > 0)\n\t\t\t\t\t\t\tmethod = atoi(sMethod.c_str());\n\t\t\t\t\t\tif (bHaveUsage == false)\n\t\t\t\t\t\t\tmethod = 0;\n\n\t\t\t\t\t\tif ((dType == pTypeYouLess) && ((metertype == MTYPE_ENERGY) || (metertype == MTYPE_ENERGY_GENERATED)))\n\t\t\t\t\t\t\tmethod = 1;\n\n\t\t\t\t\t\tif (method != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//realtime graph\n\t\t\t\t\t\t\tif ((dType == pTypeENERGY) || (dType == pTypePOWER))\n\t\t\t\t\t\t\t\tdivider /= 100.0f;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"method\"] = method;\n\t\t\t\t\t\tbool bHaveFirstValue = false;\n\t\t\t\t\t\tbool bHaveFirstRealValue = false;\n\t\t\t\t\t\tfloat FirstValue = 0;\n\t\t\t\t\t\tlong long ulFirstRealValue = 0;\n\t\t\t\t\t\tlong long ulFirstValue = 0;\n\t\t\t\t\t\tlong long ulLastValue = 0;\n\t\t\t\t\t\tstd::string LastDateTime = \"\";\n\t\t\t\t\t\ttime_t lastTime = 0;\n\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> >::const_iterator itt;\n\t\t\t\t\t\t\tfor (itt = result.begin(); itt!=result.end(); ++itt)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = *itt;\n\n\t\t\t\t\t\t\t\t//If method == 1, provide BOTH hourly and instant usage for combined graph\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//bars / hour\n\t\t\t\t\t\t\t\t\tstd::string actDateTimeHour = sd[2].substr(0, 13);\n\t\t\t\t\t\t\t\t\tlong long actValue = std::strtoll(sd[0].c_str(), nullptr, 10);\n\n\t\t\t\t\t\t\t\t\tif (actValue >= ulLastValue)\n\t\t\t\t\t\t\t\t\t\tulLastValue = actValue;\n\n\t\t\t\t\t\t\t\t\tif (actDateTimeHour != LastDateTime || ((method == 1) && (itt + 1 == result.end())))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (bHaveFirstValue)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t//root[\"result\"][ii][\"d\"] = LastDateTime + (method == 1 ? \":30\" : \":00\");\n\t\t\t\t\t\t\t\t\t\t\t//^^ not necessarily bad, but is currently inconsistent with all other day graphs\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = LastDateTime + \":00\";\n\n\t\t\t\t\t\t\t\t\t\t\tlong long ulTotalValue = ulLastValue - ulFirstValue;\n\t\t\t\t\t\t\t\t\t\t\tif (ulTotalValue == 0)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t//Could be the P1 Gas Meter, only transmits one every 1 a 2 hours\n\t\t\t\t\t\t\t\t\t\t\t\tulTotalValue = ulLastValue - ulFirstRealValue;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tulFirstRealValue = ulLastValue;\n\t\t\t\t\t\t\t\t\t\t\tfloat TotalValue = float(ulTotalValue);\n\t\t\t\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f);\t//from kWh -> Watt\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", TotalValue);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][method == 1 ? \"eu\" : \"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tLastDateTime = actDateTimeHour;\n\t\t\t\t\t\t\t\t\t\tbHaveFirstValue = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!bHaveFirstValue)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tulFirstValue = ulLastValue;\n\t\t\t\t\t\t\t\t\t\tbHaveFirstValue = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!bHaveFirstRealValue)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbHaveFirstRealValue = true;\n\t\t\t\t\t\t\t\t\t\tulFirstRealValue = ulLastValue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (method == 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlong long actValue = std::strtoll(sd[1].c_str(), nullptr, 10);\n\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\n\t\t\t\t\t\t\t\t\tfloat TotalValue = float(actValue);\n\t\t\t\t\t\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeKwh))\n\t\t\t\t\t\t\t\t\t\tTotalValue /= 10.0f;\n\t\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f);\t//from kWh -> Watt\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", TotalValue);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\t\troot[\"ValueQuantity\"] = options[\"ValueQuantity\"];\n\t\t\t\t\t\troot[\"ValueUnits\"] = options[\"ValueUnits\"];\n\n\t\t\t\t\t\tint ii = 0;\n\n\t\t\t\t\t\tbool bHaveFirstValue = false;\n\t\t\t\t\t\tbool bHaveFirstRealValue = false;\n\t\t\t\t\t\tfloat FirstValue = 0;\n\t\t\t\t\t\tunsigned long long ulFirstRealValue = 0;\n\t\t\t\t\t\tunsigned long long ulFirstValue = 0;\n\t\t\t\t\t\tunsigned long long ulLastValue = 0;\n\n\t\t\t\t\t\tstd::string LastDateTime = \"\";\n\t\t\t\t\t\ttime_t lastTime = 0;\n\n\t\t\t\t\t\tif (bIsManagedCounter) {\n\t\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Usage, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\t\tbHaveFirstValue = true;\n\t\t\t\t\t\t\tbHaveFirstRealValue = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tint method = 0;\n\t\t\t\t\t\tstd::string sMethod = request::findValue(&req, \"method\");\n\t\t\t\t\t\tif (sMethod.size() > 0)\n\t\t\t\t\t\t\tmethod = atoi(sMethod.c_str());\n\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\tif (method == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//bars / hour\n\n\t\t\t\t\t\t\t\t\tunsigned long long actValue = std::strtoull(sd[0].c_str(), nullptr, 10);\n\n\t\t\t\t\t\t\t\t\tstd::string actDateTimeHour = sd[1].substr(0, 13);\n\t\t\t\t\t\t\t\t\tif (actDateTimeHour != LastDateTime)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (bHaveFirstValue)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tstruct tm ntime;\n\t\t\t\t\t\t\t\t\t\t\ttime_t atime;\n\t\t\t\t\t\t\t\t\t\t\tif (actDateTimeHour.size() == 10)\n\t\t\t\t\t\t\t\t\t\t\t\tactDateTimeHour += \" 00\";\n\t\t\t\t\t\t\t\t\t\t\tconstructTime(atime, ntime,\n\t\t\t\t\t\t\t\t\t\t\t\tatoi(actDateTimeHour.substr(0, 4).c_str()),\n\t\t\t\t\t\t\t\t\t\t\t\tatoi(actDateTimeHour.substr(5, 2).c_str()),\n\t\t\t\t\t\t\t\t\t\t\t\tatoi(actDateTimeHour.substr(8, 2).c_str()),\n\t\t\t\t\t\t\t\t\t\t\t\tatoi(actDateTimeHour.substr(11, 2).c_str()) - 1,\n\t\t\t\t\t\t\t\t\t\t\t\t0, 0, -1);\n\n\t\t\t\t\t\t\t\t\t\t\tchar szTime[50];\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szTime, \"%04d-%02d-%02d %02d:00\", ntime.tm_year + 1900, ntime.tm_mon + 1, ntime.tm_mday, ntime.tm_hour);\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szTime;\n\n\t\t\t\t\t\t\t\t\t\t\t//float TotalValue = float(actValue - ulFirstValue);\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t//prevents graph from going crazy if the meter counter resets \n\t\t\t\t\t\t\t\t\t\t\tfloat TotalValue = (actValue >= ulFirstValue) ? float(actValue - ulFirstValue) : actValue;\n\n\t\t\t\t\t\t\t\t\t\t\t//if (TotalValue != 0)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f);\t//from kWh -> Watt\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", TotalValue);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (!bIsManagedCounter) {\n\t\t\t\t\t\t\t\t\t\t\tulFirstValue = actValue;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tLastDateTime = actDateTimeHour;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (!bHaveFirstValue)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tulFirstValue = actValue;\n\t\t\t\t\t\t\t\t\t\tbHaveFirstValue = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tulLastValue = actValue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//realtime graph\n\t\t\t\t\t\t\t\t\tunsigned long long actValue = std::strtoull(sd[0].c_str(), nullptr, 10);\n\n\t\t\t\t\t\t\t\t\tstd::string stime = sd[1];\n\t\t\t\t\t\t\t\t\tstruct tm ntime;\n\t\t\t\t\t\t\t\t\ttime_t atime;\n\t\t\t\t\t\t\t\t\tParseSQLdatetime(atime, ntime, stime, -1);\n\t\t\t\t\t\t\t\t\tif (bHaveFirstRealValue)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlong long curValue = actValue - ulLastValue;\n\n\t\t\t\t\t\t\t\t\t\tfloat tdiff = static_cast<float>(difftime(atime, lastTime));\n\t\t\t\t\t\t\t\t\t\tif (tdiff == 0)\n\t\t\t\t\t\t\t\t\t\t\ttdiff = 1;\n\t\t\t\t\t\t\t\t\t\tfloat tlaps = 3600.0f / tdiff;\n\t\t\t\t\t\t\t\t\t\tcurValue *= int(tlaps);\n\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\n\t\t\t\t\t\t\t\t\t\tfloat TotalValue = float(curValue);\n\t\t\t\t\t\t\t\t\t\t//if (TotalValue != 0)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f);\t//from kWh -> Watt\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", TotalValue);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tbHaveFirstRealValue = true;\n\t\t\t\t\t\t\t\t\tif (!bIsManagedCounter) {\n\t\t\t\t\t\t\t\t\t\tulLastValue = actValue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlastTime = atime;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((!bIsManagedCounter) && (bHaveFirstValue) && (method == 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//add last value\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = LastDateTime + \":00\";\n\n\t\t\t\t\t\t\tunsigned long long ulTotalValue = ulLastValue - ulFirstValue;\n\n\t\t\t\t\t\t\tfloat TotalValue = float(ulTotalValue);\n\n\t\t\t\t\t\t\t//if (TotalValue != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f);\t//from kWh -> Watt\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", TotalValue);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"uv\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Level, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"uvi\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"rain\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tint LastHour = -1;\n\t\t\t\t\tfloat LastTotalPreviousHour = -1;\n\n\t\t\t\t\tfloat LastValue = -1;\n\t\t\t\t\tstd::string LastDate = \"\";\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Total, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\t\t\tfloat ActTotal = static_cast<float>(atof(sd[0].c_str()));\n\t\t\t\t\t\t\tint Hour = atoi(sd[1].substr(11, 2).c_str());\n\t\t\t\t\t\t\tif (Hour != LastHour)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (LastHour != -1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tint NextCalculatedHour = (LastHour + 1) % 24;\n\t\t\t\t\t\t\t\t\tif (Hour != NextCalculatedHour)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t//Looks like we have a GAP somewhere, finish the last hour\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = LastDate;\n\t\t\t\t\t\t\t\t\t\tdouble mmval = ActTotal - LastValue;\n\t\t\t\t\t\t\t\t\t\tmmval *= AddjMulti;\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", mmval);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\t\t\tdouble mmval = ActTotal - LastTotalPreviousHour;\n\t\t\t\t\t\t\t\t\t\tmmval *= AddjMulti;\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", mmval);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tLastHour = Hour;\n\t\t\t\t\t\t\t\tLastTotalPreviousHour = ActTotal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tLastValue = ActTotal;\n\t\t\t\t\t\t\tLastDate = sd[1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"wind\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Direction, Speed, Gust, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"di\"] = sd[0];\n\n\t\t\t\t\t\t\tint intSpeed = atoi(sd[1].c_str());\n\t\t\t\t\t\t\tint intGust = atoi(sd[2].c_str());\n\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"winddir\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Direction, Speed, Gust FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::map<int, int> _directions;\n\t\t\t\t\t\tint wdirtabletemp[17][8];\n\t\t\t\t\t\tstd::string szLegendLabels[7];\n\t\t\t\t\t\tint ii = 0;\n\n\t\t\t\t\t\tint totalvalues = 0;\n\t\t\t\t\t\t//init dir list\n\t\t\t\t\t\tint idir;\n\t\t\t\t\t\tfor (idir = 0; idir < 360 + 1; idir++)\n\t\t\t\t\t\t\t_directions[idir] = 0;\n\t\t\t\t\t\tfor (ii = 0; ii < 17; ii++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (int jj = 0; jj < 8; jj++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twdirtabletemp[ii][jj] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (m_sql.m_windunit == WINDUNIT_MS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 0.5 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"0.5-2 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"2-4 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"4-6 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"6-8 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"8-10 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 10\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_KMH)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 2 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"2-4 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"4-6 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"6-10 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"10-20 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"20-36 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 36\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_MPH)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 3 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"3-7 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"7-12 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"12-18 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"18-24 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"24-46 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 46\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_Knots)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 3 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"3-7 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"7-17 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"17-27 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"27-34 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"34-41 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 41\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_Beaufort)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 2 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"2-4 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"4-6 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"6-8 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"8-10 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"10-12 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 12\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t//Todo !\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 0.5 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"0.5-2 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"2-4 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"4-6 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"6-8 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"8-10 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 10\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\t\t\tfloat fdirection = static_cast<float>(atof(sd[0].c_str()));\n\t\t\t\t\t\t\tif (fdirection >= 360)\n\t\t\t\t\t\t\t\tfdirection = 0;\n\t\t\t\t\t\t\tint direction = int(fdirection);\n\t\t\t\t\t\t\tfloat speedOrg = static_cast<float>(atof(sd[1].c_str()));\n\t\t\t\t\t\t\tfloat gustOrg = static_cast<float>(atof(sd[2].c_str()));\n\t\t\t\t\t\t\tif ((gustOrg == 0) && (speedOrg != 0))\n\t\t\t\t\t\t\t\tgustOrg = speedOrg;\n\t\t\t\t\t\t\tif (gustOrg == 0)\n\t\t\t\t\t\t\t\tcontinue; //no direction if wind is still\n\t\t\t\t\t\t\tfloat speed = speedOrg * m_sql.m_windscale;\n\t\t\t\t\t\t\tfloat gust = gustOrg * m_sql.m_windscale;\n\t\t\t\t\t\t\tint bucket = int(fdirection / 22.5f);\n\n\t\t\t\t\t\t\tint speedpos = 0;\n\n\t\t\t\t\t\t\tif (m_sql.m_windunit == WINDUNIT_MS)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (gust < 0.5f) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (gust < 2.0f) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (gust < 4.0f) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (gust < 6.0f) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (gust < 8.0f) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (gust < 10.0f) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_KMH)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (gust < 2.0f) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (gust < 4.0f) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (gust < 6.0f) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (gust < 10.0f) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (gust < 20.0f) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (gust < 36.0f) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_MPH)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (gust < 3.0f) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (gust < 7.0f) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (gust < 12.0f) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (gust < 18.0f) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (gust < 24.0f) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (gust < 46.0f) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_Knots)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (gust < 3.0f) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (gust < 7.0f) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (gust < 17.0f) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (gust < 27.0f) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (gust < 34.0f) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (gust < 41.0f) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat gustms = gustOrg * 0.1f;\n\t\t\t\t\t\t\t\tint iBeaufort = MStoBeaufort(gustms);\n\t\t\t\t\t\t\t\tif (iBeaufort < 2) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (iBeaufort < 4) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (iBeaufort < 6) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (iBeaufort < 8) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (iBeaufort < 10) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (iBeaufort < 12) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//Still todo !\n\t\t\t\t\t\t\t\tif (gust < 0.5f) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (gust < 2.0f) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (gust < 4.0f) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (gust < 6.0f) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (gust < 8.0f) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (gust < 10.0f) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twdirtabletemp[bucket][speedpos]++;\n\t\t\t\t\t\t\t_directions[direction]++;\n\t\t\t\t\t\t\ttotalvalues++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (int jj = 0; jj < 7; jj++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result_speed\"][jj][\"label\"] = szLegendLabels[jj];\n\n\t\t\t\t\t\t\tfor (ii = 0; ii < 16; ii++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat svalue = 0;\n\t\t\t\t\t\t\t\tif (totalvalues > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsvalue = (100.0f / totalvalues)*wdirtabletemp[ii][jj];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", svalue);\n\t\t\t\t\t\t\t\troot[\"result_speed\"][jj][\"sp\"][ii] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tii = 0;\n\t\t\t\t\t\tfor (idir = 0; idir < 360 + 1; idir++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (_directions[idir] != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"dig\"] = idir;\n\t\t\t\t\t\t\t\tfloat percentage = 0;\n\t\t\t\t\t\t\t\tif (totalvalues > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpercentage = (float(100.0 / float(totalvalues))*float(_directions[idir]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", percentage);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"div\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}//day\n\t\t\telse if (srange == \"week\")\n\t\t\t{\n\t\t\t\tif (sensor == \"rain\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tchar szDateStart[40];\n\t\t\t\t\tchar szDateEnd[40];\n\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday);\n\n\t\t\t\t\t//Subtract one week\n\t\t\t\t\ttime_t weekbefore;\n\t\t\t\t\tstruct tm tm2;\n\t\t\t\t\tgetNoon(weekbefore, tm2, tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday - 7); // We only want the date\n\t\t\t\t\tsprintf(szDateStart, \"%04d-%02d-%02d\", tm2.tm_year + 1900, tm2.tm_mon + 1, tm2.tm_mday);\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Total, Rate, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\tdouble mmval = atof(sd[0].c_str());\n\t\t\t\t\t\t\tmmval *= AddjMulti;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", mmval);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Total), MAX(Total), MAX(Rate) FROM Rain WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Total, Total, Rate FROM Rain WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q') ORDER BY ROWID DESC LIMIT 1\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t}\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\tfloat total_min = static_cast<float>(atof(sd[0].c_str()));\n\t\t\t\t\t\tfloat total_max = static_cast<float>(atof(sd[1].c_str()));\n\t\t\t\t\t\tint rate = atoi(sd[2].c_str());\n\n\t\t\t\t\t\tdouble total_real = 0;\n\t\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal_real *= AddjMulti;\n\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", total_real);\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"counter\")\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\troot[\"ValueQuantity\"] = options[\"ValueQuantity\"];\n\t\t\t\t\troot[\"ValueUnits\"] = options[\"ValueUnits\"];\n\n\t\t\t\t\tchar szDateStart[40];\n\t\t\t\t\tchar szDateEnd[40];\n\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday);\n\n\t\t\t\t\t//Subtract one week\n\t\t\t\t\ttime_t weekbefore;\n\t\t\t\t\tstruct tm tm2;\n\t\t\t\t\tgetNoon(weekbefore, tm2, tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday - 7); // We only want the date\n\t\t\t\t\tsprintf(szDateStart, \"%04d-%02d-%02d\", tm2.tm_year + 1900, tm2.tm_mon + 1, tm2.tm_mday);\n\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value5,Value6,Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[4].substr(0, 16);\n\t\t\t\t\t\t\t\tstd::string szValueUsage1 = sd[0];\n\t\t\t\t\t\t\t\tstd::string szValueDeliv1 = sd[1];\n\t\t\t\t\t\t\t\tstd::string szValueUsage2 = sd[2];\n\t\t\t\t\t\t\t\tstd::string szValueDeliv2 = sd[3];\n\n\t\t\t\t\t\t\t\tfloat fUsage1 = (float)(atof(szValueUsage1.c_str()));\n\t\t\t\t\t\t\t\tfloat fUsage2 = (float)(atof(szValueUsage2.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv1 = (float)(atof(szValueDeliv1.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv2 = (float)(atof(szValueDeliv2.c_str()));\n\n\t\t\t\t\t\t\t\tfDeliv1 = (fDeliv1 < 10) ? 0 : fDeliv1;\n\t\t\t\t\t\t\t\tfDeliv2 = (fDeliv2 < 10) ? 0 : fDeliv2;\n\n\t\t\t\t\t\t\t\tif ((fDeliv1 != 0) || (fDeliv2 != 0))\n\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage1 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage2 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv1 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv2 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r2\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\tstd::string szValue = sd[0];\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\t//value already set above!\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tszValue = \"0\";\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szValue;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value1), MAX(Value1), MIN(Value2), MAX(Value2),MIN(Value5), MAX(Value5), MIN(Value6), MAX(Value6) FROM MultiMeter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\t\tunsigned long long total_min_usage_1 = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_1 = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_usage_2 = std::strtoull(sd[4].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_2 = std::strtoull(sd[5].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_usage_1, total_real_usage_2;\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_1 = std::strtoull(sd[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_1 = std::strtoull(sd[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_2 = std::strtoull(sd[6].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_2 = std::strtoull(sd[7].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_deliv_1, total_real_deliv_2;\n\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\n\t\t\t\t\t\t\ttotal_real_usage_1 = total_max_usage_1 - total_min_usage_1;\n\t\t\t\t\t\t\ttotal_real_usage_2 = total_max_usage_2 - total_min_usage_2;\n\n\t\t\t\t\t\t\ttotal_real_deliv_1 = total_max_deliv_1 - total_min_deliv_1;\n\t\t\t\t\t\t\ttotal_real_deliv_2 = total_max_deliv_2 - total_min_deliv_2;\n\t\t\t\t\t\t\tif ((total_real_deliv_1 != 0) || (total_real_deliv_2 != 0))\n\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_usage_1);\n\t\t\t\t\t\t\tstd::string szValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_usage_2);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_deliv_1);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_deliv_2);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"r2\"] = szTmp;\n\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!bIsManagedCounter)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\t\tunsigned long long total_min = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real;\n\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real);\n\t\t\t\t\t\t\tstd::string szValue = szTmp;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t//value already set above!\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tszValue = \"0\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szValue;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}//week\n\t\t\telse if ((srange == \"month\") || (srange == \"year\"))\n\t\t\t{\n\t\t\t\tchar szDateStart[40];\n\t\t\t\tchar szDateEnd[40];\n\t\t\t\tchar szDateStartPrev[40];\n\t\t\t\tchar szDateEndPrev[40];\n\n\t\t\t\tstd::string sactmonth = request::findValue(&req, \"actmonth\");\n\t\t\t\tstd::string sactyear = request::findValue(&req, \"actyear\");\n\n\t\t\t\tint actMonth = atoi(sactmonth.c_str());\n\t\t\t\tint actYear = atoi(sactyear.c_str());\n\n\t\t\t\tif ((sactmonth != \"\") && (sactyear != \"\"))\n\t\t\t\t{\n\t\t\t\t\tsprintf(szDateStart, \"%04d-%02d-%02d\", actYear, actMonth, 1);\n\t\t\t\t\tsprintf(szDateStartPrev, \"%04d-%02d-%02d\", actYear - 1, actMonth, 1);\n\t\t\t\t\tactMonth++;\n\t\t\t\t\tif (actMonth == 13)\n\t\t\t\t\t{\n\t\t\t\t\t\tactMonth = 1;\n\t\t\t\t\t\tactYear++;\n\t\t\t\t\t}\n\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", actYear, actMonth, 1);\n\t\t\t\t\tsprintf(szDateEndPrev, \"%04d-%02d-%02d\", actYear - 1, actMonth, 1);\n\t\t\t\t}\n\t\t\t\telse if (sactyear != \"\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szDateStart, \"%04d-%02d-%02d\", actYear, 1, 1);\n\t\t\t\t\tsprintf(szDateStartPrev, \"%04d-%02d-%02d\", actYear - 1, 1, 1);\n\t\t\t\t\tactYear++;\n\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", actYear, 1, 1);\n\t\t\t\t\tsprintf(szDateEndPrev, \"%04d-%02d-%02d\", actYear - 1, 1, 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday);\n\t\t\t\t\tsprintf(szDateEndPrev, \"%04d-%02d-%02d\", tm1.tm_year + 1900 - 1, tm1.tm_mon + 1, tm1.tm_mday);\n\n\t\t\t\t\tstruct tm tm2;\n\t\t\t\t\tif (srange == \"month\")\n\t\t\t\t\t{\n\t\t\t\t\t\t//Subtract one month\n\t\t\t\t\t\ttime_t monthbefore;\n\t\t\t\t\t\tgetNoon(monthbefore, tm2, tm1.tm_year + 1900, tm1.tm_mon, tm1.tm_mday);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//Subtract one year\n\t\t\t\t\t\ttime_t yearbefore;\n\t\t\t\t\t\tgetNoon(yearbefore, tm2, tm1.tm_year + 1900 - 1, tm1.tm_mon + 1, tm1.tm_mday);\n\t\t\t\t\t}\n\n\t\t\t\t\tsprintf(szDateStart, \"%04d-%02d-%02d\", tm2.tm_year + 1900, tm2.tm_mon + 1, tm2.tm_mday);\n\t\t\t\t\tsprintf(szDateStartPrev, \"%04d-%02d-%02d\", tm2.tm_year + 1900 - 1, tm2.tm_mon + 1, tm2.tm_mday);\n\t\t\t\t}\n\n\t\t\t\tif (sensor == \"temp\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t//Actual Year\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Temp_Min, Temp_Max, Chill_Min, Chill_Max,\"\n\t\t\t\t\t\t\" Humidity, Barometer, Temp_Avg, Date, SetPoint_Min,\"\n\t\t\t\t\t\t\" SetPoint_Max, SetPoint_Avg \"\n\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[7].substr(0, 16);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeRego6XXTemp) || (dType == pTypeTEMP) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO) || (dType == pTypeTEMP_BARO) || (dType == pTypeWIND) || (dType == pTypeThermostat1) || (dType == pTypeRadiator1) ||\n\t\t\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSystemTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint)) ||\n\t\t\t\t\t\t\t\t(dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbool bOK = true;\n\t\t\t\t\t\t\t\tif (dType == pTypeWIND)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbOK = ((dSubType != sTypeWINDNoTemp) && (dSubType != sTypeWINDNoTempNoChill));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (bOK)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble ta = ConvertTemperature(atof(sd[6].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = te;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"tm\"] = tm;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ta\"] = ta;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[3].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[2].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = ch;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"cm\"] = cm;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeHUM) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[4];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[5];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble sm = ConvertTemperature(atof(sd[8].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble sx = ConvertTemperature(atof(sd[9].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[10].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sm\"] = sm;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sx\"] = sx;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT MIN(Temperature), MAX(Temperature),\"\n\t\t\t\t\t\t\" MIN(Chill), MAX(Chill), AVG(Humidity),\"\n\t\t\t\t\t\t\" AVG(Barometer), AVG(Temperature), MIN(SetPoint),\"\n\t\t\t\t\t\t\" MAX(SetPoint), AVG(SetPoint) \"\n\t\t\t\t\t\t\"FROM Temperature WHERE (DeviceRowID==%\" PRIu64 \"\"\n\t\t\t\t\t\t\" AND Date>='%q')\",\n\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((dType == pTypeRego6XXTemp) || (dType == pTypeTEMP) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO) || (dType == pTypeTEMP_BARO) || (dType == pTypeWIND) || (dType == pTypeThermostat1) || (dType == pTypeRadiator1)) ||\n\t\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t(dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\tdouble ta = ConvertTemperature(atof(sd[6].c_str()), tempsign);\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = te;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"tm\"] = tm;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ta\"] = ta;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[3].c_str()), tempsign);\n\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[2].c_str()), tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = ch;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"cm\"] = cm;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((dType == pTypeHUM) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[4];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[5];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble sx = ConvertTemperature(atof(sd[8].c_str()), tempsign);\n\t\t\t\t\t\t\tdouble sm = ConvertTemperature(atof(sd[7].c_str()), tempsign);\n\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[9].c_str()), tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sm\"] = sm;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sx\"] = sx;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\t//Previous Year\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Temp_Min, Temp_Max, Chill_Min, Chill_Max,\"\n\t\t\t\t\t\t\" Humidity, Barometer, Temp_Avg, Date, SetPoint_Min,\"\n\t\t\t\t\t\t\" SetPoint_Max, SetPoint_Avg \"\n\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[7].substr(0, 16);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeRego6XXTemp) || (dType == pTypeTEMP) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO) || (dType == pTypeTEMP_BARO) || (dType == pTypeWIND) || (dType == pTypeThermostat1) || (dType == pTypeRadiator1) ||\n\t\t\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSystemTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint)) ||\n\t\t\t\t\t\t\t\t(dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbool bOK = true;\n\t\t\t\t\t\t\t\tif (dType == pTypeWIND)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbOK = ((dSubType == sTypeWIND4) || (dSubType == sTypeWINDNoTemp));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (bOK)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble ta = ConvertTemperature(atof(sd[6].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"te\"] = te;\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"tm\"] = tm;\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ta\"] = ta;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[3].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[2].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ch\"] = ch;\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"cm\"] = cm;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeHUM) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"hu\"] = sd[4];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ba\"] = sd[5];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble sx = ConvertTemperature(atof(sd[8].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble sm = ConvertTemperature(atof(sd[7].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[9].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"se\"] = se;\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"sm\"] = sm;\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"sx\"] = sx;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"Percentage\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Percentage_Min, Percentage_Max, Percentage_Avg, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = sd[0];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = sd[1];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_avg\"] = sd[2];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT MIN(Percentage), MAX(Percentage), AVG(Percentage) FROM Percentage WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"v_avg\"] = sd[2];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"fan\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Speed_Min, Speed_Max, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = sd[1];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT MIN(Speed), MAX(Speed) FROM Fan WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = sd[0];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"uv\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Level, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"uvi\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT MAX(Level) FROM UV WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"uvi\"] = sd[0];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\t//Previous Year\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Level, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"uvi\"] = sd[0];\n\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"rain\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Total, Rate, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\tdouble mmval = atof(sd[0].c_str());\n\t\t\t\t\t\t\tmmval *= AddjMulti;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", mmval);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Total), MAX(Total), MAX(Rate) FROM Rain WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Total, Total, Rate FROM Rain WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q') ORDER BY ROWID DESC LIMIT 1\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t}\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\tfloat total_min = static_cast<float>(atof(sd[0].c_str()));\n\t\t\t\t\t\tfloat total_max = static_cast<float>(atof(sd[1].c_str()));\n\t\t\t\t\t\tint rate = atoi(sd[2].c_str());\n\n\t\t\t\t\t\tdouble total_real = 0;\n\t\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal_real *= AddjMulti;\n\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", total_real);\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\t//Previous Year\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Total, Rate, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\tdouble mmval = atof(sd[0].c_str());\n\t\t\t\t\t\t\tmmval *= AddjMulti;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", mmval);\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"mm\"] = szTmp;\n\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"counter\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\troot[\"ValueQuantity\"] = options[\"ValueQuantity\"];\n\t\t\t\t\troot[\"ValueUnits\"] = options[\"ValueUnits\"];\n\n\t\t\t\t\tint nValue = 0;\n\t\t\t\t\tstd::string sValue = \"\";\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT nValue, sValue FROM DeviceStatus WHERE (ID==%\" PRIu64 \")\",\n\t\t\t\t\t\tidx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\tnValue = atoi(sd[0].c_str());\n\t\t\t\t\t\tsValue = sd[1];\n\t\t\t\t\t}\n\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tiPrev = 0;\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Actual Year\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Value1,Value2,Value5,Value6, Date,\"\n\t\t\t\t\t\t\t\" Counter1, Counter2, Counter3, Counter4 \"\n\t\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[4].substr(0, 16);\n\n\t\t\t\t\t\t\t\tdouble counter_1 = atof(sd[5].c_str());\n\t\t\t\t\t\t\t\tdouble counter_2 = atof(sd[6].c_str());\n\t\t\t\t\t\t\t\tdouble counter_3 = atof(sd[7].c_str());\n\t\t\t\t\t\t\t\tdouble counter_4 = atof(sd[8].c_str());\n\n\t\t\t\t\t\t\t\tstd::string szUsage1 = sd[0];\n\t\t\t\t\t\t\t\tstd::string szDeliv1 = sd[1];\n\t\t\t\t\t\t\t\tstd::string szUsage2 = sd[2];\n\t\t\t\t\t\t\t\tstd::string szDeliv2 = sd[3];\n\n\t\t\t\t\t\t\t\tfloat fUsage_1 = static_cast<float>(atof(szUsage1.c_str()));\n\t\t\t\t\t\t\t\tfloat fUsage_2 = static_cast<float>(atof(szUsage2.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv_1 = static_cast<float>(atof(szDeliv1.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv_2 = static_cast<float>(atof(szDeliv2.c_str()));\n\n\t\t\t\t\t\t\t\tfDeliv_1 = (fDeliv_1 < 10) ? 0 : fDeliv_1;\n\t\t\t\t\t\t\t\tfDeliv_2 = (fDeliv_2 < 10) ? 0 : fDeliv_2;\n\n\t\t\t\t\t\t\t\tif ((fDeliv_1 != 0) || (fDeliv_2 != 0))\n\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage_1 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage_2 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv_1 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv_2 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r2\"] = szTmp;\n\n\t\t\t\t\t\t\t\tif (counter_1 != 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (counter_1 - fUsage_1) / divider);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c1\"] = szTmp;\n\n\t\t\t\t\t\t\t\tif (counter_2 != 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (counter_2 - fDeliv_1) / divider);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c2\"] = szTmp;\n\n\t\t\t\t\t\t\t\tif (counter_3 != 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (counter_3 - fUsage_2) / divider);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c3\"] = szTmp;\n\n\t\t\t\t\t\t\t\tif (counter_4 != 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (counter_4 - fDeliv_2) / divider);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c4\"] = szTmp;\n\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Previous Year\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Value1,Value2,Value5,Value6, Date \"\n\t\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[4].substr(0, 16);\n\n\t\t\t\t\t\t\t\tstd::string szUsage1 = sd[0];\n\t\t\t\t\t\t\t\tstd::string szDeliv1 = sd[1];\n\t\t\t\t\t\t\t\tstd::string szUsage2 = sd[2];\n\t\t\t\t\t\t\t\tstd::string szDeliv2 = sd[3];\n\n\t\t\t\t\t\t\t\tfloat fUsage_1 = static_cast<float>(atof(szUsage1.c_str()));\n\t\t\t\t\t\t\t\tfloat fUsage_2 = static_cast<float>(atof(szUsage2.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv_1 = static_cast<float>(atof(szDeliv1.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv_2 = static_cast<float>(atof(szDeliv2.c_str()));\n\n\t\t\t\t\t\t\t\tif ((fDeliv_1 != 0) || (fDeliv_2 != 0))\n\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage_1 / divider);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage_2 / divider);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv_1 / divider);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"r1\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv_2 / divider);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"r2\"] = szTmp;\n\t\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeAirQuality)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value3,Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_min\"] = sd[0];\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_max\"] = sd[1];\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_avg\"] = sd[2];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value2,Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"co2_max\"] = sd[0];\n\t\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeGeneral) && ((dSubType == sTypeSoilMoisture) || (dSubType == sTypeLeafWetness))) ||\n\t\t\t\t\t\t((dType == pTypeRFXSensor) && ((dSubType == sTypeRFXSensorAD) || (dSubType == sTypeRFXSensorVolt)))\n\t\t\t\t\t\t)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = sd[0];\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = sd[1];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVisibility)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeDistance)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypePressure)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel))\n\t\t\t\t\t\t)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tfloat vdiv = 10.0f;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvdiv = 1000.0f;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value3,Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\tfloat fValue1 = float(atof(sd[0].c_str())) / vdiv;\n\t\t\t\t\t\t\t\tfloat fValue2 = float(atof(sd[1].c_str())) / vdiv;\n\t\t\t\t\t\t\t\tfloat fValue3 = float(atof(sd[2].c_str())) / vdiv;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\n\t\t\t\t\t\t\t\tif (metertype == 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfValue1 *= 0.6214f;\n\t\t\t\t\t\t\t\t\tfValue2 *= 0.6214f;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fValue3 != 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue3);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_avg\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fValue3 != 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue3);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_avg\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeLux)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value3, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_min\"] = sd[0];\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_max\"] = sd[1];\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_avg\"] = sd[2];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeWEIGHT)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Value1,Value2, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", m_sql.m_weightscale * atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", m_sql.m_weightscale * atof(sd[1].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeUsage)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Value1,Value2, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"u_min\"] = atof(sd[0].c_str()) / 10.0f;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"u_max\"] = atof(sd[1].c_str()) / 10.0f;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value3,Value4,Value5,Value6, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//CM113\n\t\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\t\troot[\"displaytype\"] = displaytype;\n\n\t\t\t\t\t\t\tbool bHaveL1 = false;\n\t\t\t\t\t\t\tbool bHaveL2 = false;\n\t\t\t\t\t\t\tbool bHaveL3 = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[6].substr(0, 16);\n\n\t\t\t\t\t\t\t\tfloat fval1 = static_cast<float>(atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval2 = static_cast<float>(atof(sd[1].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval3 = static_cast<float>(atof(sd[2].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval4 = static_cast<float>(atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval5 = static_cast<float>(atof(sd[4].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval6 = static_cast<float>(atof(sd[5].c_str()) / 10.0f);\n\n\t\t\t\t\t\t\t\tif ((fval1 != 0) || (fval2 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL1 = true;\n\t\t\t\t\t\t\t\tif ((fval3 != 0) || (fval4 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL2 = true;\n\t\t\t\t\t\t\t\tif ((fval5 != 0) || (fval6 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL3 = true;\n\n\t\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval3);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval4);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v4\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval5);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v5\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval6);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v6\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval1*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval2*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval3*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval4*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v4\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval5*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v5\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval6*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v6\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(!bHaveL1) &&\n\t\t\t\t\t\t\t\t(!bHaveL2) &&\n\t\t\t\t\t\t\t\t(!bHaveL3)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\troot[\"haveL1\"] = true; //show at least something\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (bHaveL1)\n\t\t\t\t\t\t\t\t\troot[\"haveL1\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL2)\n\t\t\t\t\t\t\t\t\troot[\"haveL2\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL3)\n\t\t\t\t\t\t\t\t\troot[\"haveL3\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENTENERGY)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value3,Value4,Value5,Value6, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//CM180i\n\t\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\t\troot[\"displaytype\"] = displaytype;\n\n\t\t\t\t\t\t\tbool bHaveL1 = false;\n\t\t\t\t\t\t\tbool bHaveL2 = false;\n\t\t\t\t\t\t\tbool bHaveL3 = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[6].substr(0, 16);\n\n\t\t\t\t\t\t\t\tfloat fval1 = static_cast<float>(atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval2 = static_cast<float>(atof(sd[1].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval3 = static_cast<float>(atof(sd[2].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval4 = static_cast<float>(atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval5 = static_cast<float>(atof(sd[4].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval6 = static_cast<float>(atof(sd[5].c_str()) / 10.0f);\n\n\t\t\t\t\t\t\t\tif ((fval1 != 0) || (fval2 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL1 = true;\n\t\t\t\t\t\t\t\tif ((fval3 != 0) || (fval4 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL2 = true;\n\t\t\t\t\t\t\t\tif ((fval5 != 0) || (fval6 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL3 = true;\n\n\t\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval3);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval4);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v4\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval5);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v5\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval6);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v6\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval1*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval2*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval3*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval4*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v4\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval5*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v5\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval6*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v6\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(!bHaveL1) &&\n\t\t\t\t\t\t\t\t(!bHaveL2) &&\n\t\t\t\t\t\t\t\t(!bHaveL3)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\troot[\"haveL1\"] = true; //show at least something\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (bHaveL1)\n\t\t\t\t\t\t\t\t\troot[\"haveL1\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL2)\n\t\t\t\t\t\t\t\t\troot[\"haveL2\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL3)\n\t\t\t\t\t\t\t\t\troot[\"haveL3\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dType == pTypeP1Gas)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Add last counter value\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(sValue.c_str()) / 1000.0);\n\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dType == pTypeENERGY)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsize_t spos = sValue.find(\";\");\n\t\t\t\t\t\t\tif (spos != std::string::npos)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat fvalue = static_cast<float>(atof(sValue.substr(spos + 1).c_str()));\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fvalue / (divider / 100.0f));\n\t\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeKwh))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsize_t spos = sValue.find(\";\");\n\t\t\t\t\t\t\tif (spos != std::string::npos)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat fvalue = static_cast<float>(atof(sValue.substr(spos + 1).c_str()));\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fvalue / divider);\n\t\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dType == pTypeRFXMeter)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Add last counter value\n\t\t\t\t\t\t\tfloat fvalue = static_cast<float>(atof(sValue.c_str()));\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + (fvalue / divider));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", AddjValue + (fvalue / divider));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + (fvalue / divider));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstrcpy(szTmp, \"\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dType == pTypeYouLess)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> results;\n\t\t\t\t\t\t\tStringSplit(sValue, \";\", results);\n\t\t\t\t\t\t\tif (results.size() == 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//Add last counter value\n\t\t\t\t\t\t\t\tfloat fvalue = static_cast<float>(atof(results[0].c_str()));\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fvalue / divider);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", fvalue / divider);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fvalue / divider);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"\");\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!bIsManagedCounter)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Add last counter value\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"counter\"] = \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Actual Year\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date, Counter FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\n\t\t\t\t\t\t\t\tstd::string szValue = sd[0];\n\n\t\t\t\t\t\t\t\tdouble fcounter = atof(sd[2].c_str());\n\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fcounter != 0)\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + ((fcounter - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fcounter != 0)\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", AddjValue + ((fcounter - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fcounter != 0)\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + ((fcounter - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.0f\", atof(szValue.c_str()));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fcounter != 0)\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.0f\", AddjValue + ((fcounter - atof(szValue.c_str()))));\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Past Year\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date, Counter FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[1].substr(0, 16);\n\n\t\t\t\t\t\t\t\tstd::string szValue = sd[0];\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.0f\", atof(szValue.c_str()));\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\n\t\t\t\t\tif ((sactmonth != \"\") || (sactyear != \"\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tstruct tm loctime;\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\tlocaltime_r(&now, &loctime);\n\t\t\t\t\t\tif ((sactmonth != \"\") && (sactyear != \"\"))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bIsThisMonth = (atoi(sactyear.c_str()) == loctime.tm_year + 1900) && (atoi(sactmonth.c_str()) == loctime.tm_mon + 1);\n\t\t\t\t\t\t\tif (bIsThisMonth)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", loctime.tm_year + 1900, loctime.tm_mon + 1, loctime.tm_mday);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sactyear != \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bIsThisYear = (atoi(sactyear.c_str()) == loctime.tm_year + 1900);\n\t\t\t\t\t\t\tif (bIsThisYear)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", loctime.tm_year + 1900, loctime.tm_mon + 1, loctime.tm_mday);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value1), MAX(Value1), MIN(Value2),\"\n\t\t\t\t\t\t\t\" MAX(Value2), MIN(Value5), MAX(Value5),\"\n\t\t\t\t\t\t\t\" MIN(Value6), MAX(Value6) \"\n\t\t\t\t\t\t\t\"FROM MultiMeter WHERE (DeviceRowID=%\" PRIu64 \"\"\n\t\t\t\t\t\t\t\" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\t\tunsigned long long total_min_usage_1 = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_1 = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_usage_2 = std::strtoull(sd[4].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_2 = std::strtoull(sd[5].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_usage_1, total_real_usage_2;\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_1 = std::strtoull(sd[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_1 = std::strtoull(sd[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_2 = std::strtoull(sd[6].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_2 = std::strtoull(sd[7].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_deliv_1, total_real_deliv_2;\n\n\t\t\t\t\t\t\ttotal_real_usage_1 = total_max_usage_1 - total_min_usage_1;\n\t\t\t\t\t\t\ttotal_real_usage_2 = total_max_usage_2 - total_min_usage_2;\n\n\t\t\t\t\t\t\ttotal_real_deliv_1 = total_max_deliv_1 - total_min_deliv_1;\n\t\t\t\t\t\t\ttotal_real_deliv_2 = total_max_deliv_2 - total_min_deliv_2;\n\n\t\t\t\t\t\t\tif ((total_real_deliv_1 != 0) || (total_real_deliv_2 != 0))\n\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\n\t\t\t\t\t\t\tstd::string szValue;\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_usage_1);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_usage_2);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_deliv_1);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_deliv_2);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"r2\"] = szTmp;\n\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeAirQuality)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value), AVG(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_min\"] = result[0][0];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_max\"] = result[0][1];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_avg\"] = result[0][2];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeGeneral) && ((dSubType == sTypeSoilMoisture) || (dSubType == sTypeLeafWetness))) ||\n\t\t\t\t\t\t((dType == pTypeRFXSensor) && ((dSubType == sTypeRFXSensorAD) || (dSubType == sTypeRFXSensorVolt)))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = result[0][0];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = result[0][1];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVisibility)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeDistance)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypePressure)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat vdiv = 10.0f;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvdiv = 1000.0f;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\tfloat fValue1 = float(atof(result[0][0].c_str())) / vdiv;\n\t\t\t\t\t\t\tfloat fValue2 = float(atof(result[0][1].c_str())) / vdiv;\n\t\t\t\t\t\t\tif (metertype == 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfValue1 *= 0.6214f;\n\t\t\t\t\t\t\t\tfValue2 *= 0.6214f;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeVoltage))\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue1);\n\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue1);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue1);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = szTmp;\n\t\t\t\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeVoltage))\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue2);\n\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue2);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue2);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = szTmp;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeLux)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value), AVG(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_min\"] = result[0][0];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_max\"] = result[0][1];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_avg\"] = result[0][2];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeWEIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", m_sql.m_weightscale* atof(result[0][0].c_str()) / 10.0f);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", m_sql.m_weightscale * atof(result[0][1].c_str()) / 10.0f);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = szTmp;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeUsage)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"u_min\"] = atof(result[0][0].c_str()) / 10.0f;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"u_max\"] = atof(result[0][1].c_str()) / 10.0f;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!bIsManagedCounter)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\t\tunsigned long long total_min = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real;\n\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real);\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\n\t\t\t\t\t\t\tstd::string szValue = szTmp;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\n\t\t\t\t\t\t\t\tstd::vector<std::string> mresults;\n\t\t\t\t\t\t\t\tStringSplit(sValue, \";\", mresults);\n\t\t\t\t\t\t\t\tif (mresults.size() == 2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsValue = mresults[1];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (dType == pTypeENERGY)\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + (((atof(sValue.c_str())*100.0f) - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.0f\", atof(szValue.c_str()));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.0f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str()))));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"wind\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tint ii = 0;\n\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Direction, Speed_Min, Speed_Max, Gust_Min,\"\n\t\t\t\t\t\t\" Gust_Max, Date \"\n\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[5].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"di\"] = sd[0];\n\n\t\t\t\t\t\t\tint intSpeed = atoi(sd[2].c_str());\n\t\t\t\t\t\t\tint intGust = atoi(sd[4].c_str());\n\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT AVG(Direction), MIN(Speed), MAX(Speed),\"\n\t\t\t\t\t\t\" MIN(Gust), MAX(Gust) \"\n\t\t\t\t\t\t\"FROM Wind WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"di\"] = sd[0];\n\n\t\t\t\t\t\tint intSpeed = atoi(sd[2].c_str());\n\t\t\t\t\t\tint intGust = atoi(sd[4].c_str());\n\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\t//Previous Year\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Direction, Speed_Min, Speed_Max, Gust_Min,\"\n\t\t\t\t\t\t\" Gust_Max, Date \"\n\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[5].substr(0, 16);\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"di\"] = sd[0];\n\n\t\t\t\t\t\t\tint intSpeed = atoi(sd[2].c_str());\n\t\t\t\t\t\t\tint intGust = atoi(sd[4].c_str());\n\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}//month or year\n\t\t\telse if ((srange.substr(0, 1) == \"2\") && (srange.substr(10, 1) == \"T\") && (srange.substr(11, 1) == \"2\")) // custom range 2013-01-01T2013-12-31\n\t\t\t{\n\t\t\t\tstd::string szDateStart = srange.substr(0, 10);\n\t\t\t\tstd::string szDateEnd = srange.substr(11, 10);\n\t\t\t\tstd::string sgraphtype = request::findValue(&req, \"graphtype\");\n\t\t\t\tstd::string sgraphTemp = request::findValue(&req, \"graphTemp\");\n\t\t\t\tstd::string sgraphChill = request::findValue(&req, \"graphChill\");\n\t\t\t\tstd::string sgraphHum = request::findValue(&req, \"graphHum\");\n\t\t\t\tstd::string sgraphBaro = request::findValue(&req, \"graphBaro\");\n\t\t\t\tstd::string sgraphDew = request::findValue(&req, \"graphDew\");\n\t\t\t\tstd::string sgraphSet = request::findValue(&req, \"graphSet\");\n\n\t\t\t\tif (sensor == \"temp\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tbool sendTemp = false;\n\t\t\t\t\tbool sendChill = false;\n\t\t\t\t\tbool sendHum = false;\n\t\t\t\t\tbool sendBaro = false;\n\t\t\t\t\tbool sendDew = false;\n\t\t\t\t\tbool sendSet = false;\n\n\t\t\t\t\tif ((sgraphTemp == \"true\") &&\n\t\t\t\t\t\t((dType == pTypeRego6XXTemp) || (dType == pTypeTEMP) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO) || (dType == pTypeTEMP_BARO) || (dType == pTypeWIND) || (dType == pTypeThermostat1) || (dType == pTypeRadiator1) ||\n\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp)) ||\n\t\t\t\t\t\t\t((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint)) ||\n\t\t\t\t\t\t\t(dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tsendTemp = true;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sgraphSet == \"true\") &&\n\t\t\t\t\t\t((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))) //FIXME cheat for water setpoint is just on or off\n\t\t\t\t\t{\n\t\t\t\t\t\tsendSet = true;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sgraphChill == \"true\") &&\n\t\t\t\t\t\t(((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp)))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tsendChill = true;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sgraphHum == \"true\") &&\n\t\t\t\t\t\t((dType == pTypeHUM) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tsendHum = true;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sgraphBaro == \"true\") && (\n\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t))\n\t\t\t\t\t{\n\t\t\t\t\t\tsendBaro = true;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sgraphDew == \"true\") && ((dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO)))\n\t\t\t\t\t{\n\t\t\t\t\t\tsendDew = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sgraphtype == \"1\")\n\t\t\t\t\t{\n\t\t\t\t\t\t// Need to get all values of the end date so 23:59:59 is appended to the date string\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Temperature, Chill, Humidity, Barometer,\"\n\t\t\t\t\t\t\t\" Date, DewPoint, SetPoint \"\n\t\t\t\t\t\t\t\"FROM Temperature WHERE (DeviceRowID==%\" PRIu64 \"\"\n\t\t\t\t\t\t\t\" AND Date>='%q' AND Date<='%q 23:59:59') ORDER BY Date ASC\",\n\t\t\t\t\t\t\tidx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[4];//.substr(0,16);\n\t\t\t\t\t\t\t\tif (sendTemp)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = te;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"tm\"] = tm;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendChill)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = ch;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"cm\"] = cm;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendHum)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[2];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendBaro)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[3];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendDew)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble dp = ConvertTemperature(atof(sd[5].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"dp\"] = dp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendSet)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[6].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Temp_Min, Temp_Max, Chill_Min, Chill_Max,\"\n\t\t\t\t\t\t\t\" Humidity, Barometer, Date, DewPoint, Temp_Avg,\"\n\t\t\t\t\t\t\t\" SetPoint_Min, SetPoint_Max, SetPoint_Avg \"\n\t\t\t\t\t\t\t\"FROM Temperature_Calendar \"\n\t\t\t\t\t\t\t\"WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\t\tidx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[6].substr(0, 16);\n\t\t\t\t\t\t\t\tif (sendTemp)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble ta = ConvertTemperature(atof(sd[8].c_str()), tempsign);\n\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = te;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"tm\"] = tm;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ta\"] = ta;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendChill)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[3].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[2].c_str()), tempsign);\n\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = ch;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"cm\"] = cm;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendHum)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[4];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendBaro)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[5];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendDew)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble dp = ConvertTemperature(atof(sd[7].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"dp\"] = dp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendSet)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble sm = ConvertTemperature(atof(sd[9].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble sx = ConvertTemperature(atof(sd[10].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[11].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sm\"] = sm;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sx\"] = sx;\n\t\t\t\t\t\t\t\t\tchar szTmp[1024];\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f %.1f %.1f\", sm, se, sx);\n\t\t\t\t\t\t\t\t\t_log.Log(LOG_STATUS, \"%s\", szTmp);\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Temperature), MAX(Temperature),\"\n\t\t\t\t\t\t\t\" MIN(Chill), MAX(Chill), AVG(Humidity),\"\n\t\t\t\t\t\t\t\" AVG(Barometer), MIN(DewPoint), AVG(Temperature),\"\n\t\t\t\t\t\t\t\" MIN(SetPoint), MAX(SetPoint), AVG(SetPoint) \"\n\t\t\t\t\t\t\t\"FROM Temperature WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\tif (sendTemp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble ta = ConvertTemperature(atof(sd[7].c_str()), tempsign);\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = te;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"tm\"] = tm;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ta\"] = ta;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sendChill)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[3].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[2].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = ch;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"cm\"] = cm;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sendHum)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[4];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sendBaro)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[5];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sendDew)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble dp = ConvertTemperature(atof(sd[6].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"dp\"] = dp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sendSet)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble sm = ConvertTemperature(atof(sd[8].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble sx = ConvertTemperature(atof(sd[9].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[10].c_str()), tempsign);\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sm\"] = sm;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sx\"] = sx;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"uv\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Level, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \"\"\n\t\t\t\t\t\t\" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"uvi\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT MAX(Level) FROM UV WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"uvi\"] = sd[0];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"rain\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Total, Rate, Date FROM %s \"\n\t\t\t\t\t\t\"WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Total), MAX(Total), MAX(Rate) FROM Rain WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Total, Total, Rate FROM Rain WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q') ORDER BY ROWID DESC LIMIT 1\",\n\t\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\t}\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\tfloat total_min = static_cast<float>(atof(sd[0].c_str()));\n\t\t\t\t\t\tfloat total_max = static_cast<float>(atof(sd[1].c_str()));\n\t\t\t\t\t\tint rate = atoi(sd[2].c_str());\n\n\t\t\t\t\t\tfloat total_real = 0;\n\t\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", total_real);\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"counter\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\troot[\"ValueQuantity\"] = options[\"ValueQuantity\"];\n\t\t\t\t\troot[\"ValueUnits\"] = options[\"ValueUnits\"];\n\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Value1,Value2,Value5,Value6, Date \"\n\t\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[4].substr(0, 16);\n\n\t\t\t\t\t\t\t\tstd::string szUsage1 = sd[0];\n\t\t\t\t\t\t\t\tstd::string szDeliv1 = sd[1];\n\t\t\t\t\t\t\t\tstd::string szUsage2 = sd[2];\n\t\t\t\t\t\t\t\tstd::string szDeliv2 = sd[3];\n\n\t\t\t\t\t\t\t\tfloat fUsage = (float)(atof(szUsage1.c_str()) + atof(szUsage2.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv = (float)(atof(szDeliv1.c_str()) + atof(szDeliv2.c_str()));\n\n\t\t\t\t\t\t\t\tif (fDeliv != 0)\n\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\tstd::string szValue = sd[0];\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szValue;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value1), MAX(Value1), MIN(Value2),\"\n\t\t\t\t\t\t\t\" MAX(Value2),MIN(Value5), MAX(Value5),\"\n\t\t\t\t\t\t\t\" MIN(Value6), MAX(Value6) \"\n\t\t\t\t\t\t\t\"FROM MultiMeter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\t\tunsigned long long total_min_usage_1 = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_1 = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_usage_2 = std::strtoull(sd[4].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_2 = std::strtoull(sd[5].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_usage;\n\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_1 = std::strtoull(sd[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_1 = std::strtoull(sd[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_2 = std::strtoull(sd[6].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_2 = std::strtoull(sd[7].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_deliv;\n\n\t\t\t\t\t\t\ttotal_real_usage = (total_max_usage_1 + total_max_usage_2) - (total_min_usage_1 + total_min_usage_2);\n\t\t\t\t\t\t\ttotal_real_deliv = (total_max_deliv_1 + total_max_deliv_2) - (total_min_deliv_1 + total_min_deliv_2);\n\n\t\t\t\t\t\t\tif (total_real_deliv != 0)\n\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_usage);\n\t\t\t\t\t\t\tstd::string szValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_deliv);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!bIsManagedCounter)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\t\tunsigned long long total_min = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real;\n\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real);\n\n\t\t\t\t\t\t\tstd::string szValue = szTmp;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szValue;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"wind\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tint ii = 0;\n\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Direction, Speed_Min, Speed_Max, Gust_Min,\"\n\t\t\t\t\t\t\" Gust_Max, Date \"\n\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[5].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"di\"] = sd[0];\n\n\t\t\t\t\t\t\tint intSpeed = atoi(sd[2].c_str());\n\t\t\t\t\t\t\tint intGust = atoi(sd[4].c_str());\n\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT AVG(Direction), MIN(Speed), MAX(Speed), MIN(Gust), MAX(Gust) FROM Wind WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"di\"] = sd[0];\n\n\t\t\t\t\t\tint intSpeed = atoi(sd[2].c_str());\n\t\t\t\t\t\tint intGust = atoi(sd[4].c_str());\n\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}//custom range\n\t\t}\n\n\t\t/**\n\t\t * Retrieve user session from store, without remote host.\n\t\t */\n\t\tconst WebEmStoredSession CWebServer::GetSession(const std::string & sessionId) {\n\t\t\t//_log.Log(LOG_STATUS, \"SessionStore : get...\");\n\t\t\tWebEmStoredSession session;\n\n\t\t\tif (sessionId.empty()) {\n\t\t\t\t_log.Log(LOG_ERROR, \"SessionStore : cannot get session without id.\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT SessionID, Username, AuthToken, ExpirationDate FROM UserSessions WHERE SessionID = '%q'\",\n\t\t\t\t\tsessionId.c_str());\n\t\t\t\tif (!result.empty()) {\n\t\t\t\t\tsession.id = result[0][0].c_str();\n\t\t\t\t\tsession.username = base64_decode(result[0][1]);\n\t\t\t\t\tsession.auth_token = result[0][2].c_str();\n\n\t\t\t\t\tstd::string sExpirationDate = result[0][3];\n\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\tstruct tm tExpirationDate;\n\t\t\t\t\tParseSQLdatetime(session.expires, tExpirationDate, sExpirationDate);\n\t\t\t\t\t// RemoteHost is not used to restore the session\n\t\t\t\t\t// LastUpdate is not used to restore the session\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn session;\n\t\t}\n\n\t\t/**\n\t\t * Save user session.\n\t\t */\n\t\tvoid CWebServer::StoreSession(const WebEmStoredSession & session) {\n\t\t\t//_log.Log(LOG_STATUS, \"SessionStore : store...\");\n\t\t\tif (session.id.empty()) {\n\t\t\t\t_log.Log(LOG_ERROR, \"SessionStore : cannot store session without id.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchar szExpires[30];\n\t\t\tstruct tm ltime;\n\t\t\tlocaltime_r(&session.expires, &ltime);\n\t\t\tstrftime(szExpires, sizeof(szExpires), \"%Y-%m-%d %H:%M:%S\", &ltime);\n\n\t\t\tstd::string remote_host = (session.remote_host.size() <= 50) ? // IPv4 : 15, IPv6 : (39|45)\n\t\t\t\tsession.remote_host : session.remote_host.substr(0, 50);\n\n\t\t\tWebEmStoredSession storedSession = GetSession(session.id);\n\t\t\tif (storedSession.id.empty()) {\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO UserSessions (SessionID, Username, AuthToken, ExpirationDate, RemoteHost) VALUES ('%q', '%q', '%q', '%q', '%q')\",\n\t\t\t\t\tsession.id.c_str(),\n\t\t\t\t\tbase64_encode(session.username).c_str(),\n\t\t\t\t\tsession.auth_token.c_str(),\n\t\t\t\t\tszExpires,\n\t\t\t\t\tremote_host.c_str());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE UserSessions set AuthToken = '%q', ExpirationDate = '%q', RemoteHost = '%q', LastUpdate = datetime('now', 'localtime') WHERE SessionID = '%q'\",\n\t\t\t\t\tsession.auth_token.c_str(),\n\t\t\t\t\tszExpires,\n\t\t\t\t\tremote_host.c_str(),\n\t\t\t\t\tsession.id.c_str());\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Remove user session and expired sessions.\n\t\t */\n\t\tvoid CWebServer::RemoveSession(const std::string & sessionId) {\n\t\t\t//_log.Log(LOG_STATUS, \"SessionStore : remove...\");\n\t\t\tif (sessionId.empty()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"DELETE FROM UserSessions WHERE SessionID = '%q'\",\n\t\t\t\tsessionId.c_str());\n\t\t}\n\n\t\t/**\n\t\t * Remove all expired user sessions.\n\t\t */\n\t\tvoid CWebServer::CleanSessions() {\n\t\t\t//_log.Log(LOG_STATUS, \"SessionStore : clean...\");\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"DELETE FROM UserSessions WHERE ExpirationDate < datetime('now', 'localtime')\");\n\t\t}\n\n\t\t/**\n\t\t * Delete all user's session, except the session used to modify the username or password.\n\t\t * username must have been hashed\n\t\t *\n\t\t * Note : on the WebUserName modification, this method will not delete the session, but the session will be deleted anyway\n\t\t * because the username will be unknown (see cWebemRequestHandler::checkAuthToken).\n\t\t */\n\t\tvoid CWebServer::RemoveUsersSessions(const std::string& username, const WebEmSession & exceptSession) {\n\t\t\tm_sql.safe_query(\"DELETE FROM UserSessions WHERE (Username=='%q') and (SessionID!='%q')\", username.c_str(), exceptSession.id.c_str());\n\t\t}\n\n\t} //server\n}//http\n"], "fixing_code": ["#include \"stdafx.h\"\n#include \"WebServer.h\"\n#include \"WebServerHelper.h\"\n#include <boost/bind.hpp>\n#include <iostream>\n#include <fstream>\n#include \"mainworker.h\"\n#include \"Helper.h\"\n#include \"localtime_r.h\"\n#include \"EventSystem.h\"\n#include \"dzVents.h\"\n#include \"../httpclient/HTTPClient.h\"\n#include \"../hardware/hardwaretypes.h\"\n#include \"../hardware/1Wire.h\"\n#include \"../hardware/OTGWBase.h\"\n#ifdef WITH_OPENZWAVE\n#include \"../hardware/OpenZWave.h\"\n#endif\n#include \"../hardware/EnOceanESP2.h\"\n#include \"../hardware/EnOceanESP3.h\"\n#include \"../hardware/Wunderground.h\"\n#include \"../hardware/DarkSky.h\"\n#include \"../hardware/AccuWeather.h\"\n#include \"../hardware/OpenWeatherMap.h\"\n#include \"../hardware/Kodi.h\"\n#include \"../hardware/Limitless.h\"\n#include \"../hardware/LogitechMediaServer.h\"\n#include \"../hardware/MySensorsBase.h\"\n#include \"../hardware/RFXBase.h\"\n#include \"../hardware/RFLinkBase.h\"\n#include \"../hardware/SysfsGpio.h\"\n#include \"../hardware/HEOS.h\"\n#include \"../hardware/eHouseTCP.h\"\n#include \"../hardware/USBtin.h\"\n#include \"../hardware/USBtin_MultiblocV8.h\"\n#ifdef WITH_GPIO\n#include \"../hardware/Gpio.h\"\n#include \"../hardware/GpioPin.h\"\n#endif // WITH_GPIO\n#include \"../hardware/Tellstick.h\"\n#include \"../webserver/Base64.h\"\n#include \"../smtpclient/SMTPClient.h\"\n#include \"../json/json.h\"\n#include \"Logger.h\"\n#include \"SQLHelper.h\"\n#include \"../push/BasePush.h\"\n#include <algorithm>\n#ifdef ENABLE_PYTHON\n#include \"../hardware/plugins/Plugins.h\"\n#endif\n\n#ifndef WIN32\n#include <sys/utsname.h>\n#include <dirent.h>\n#else\n#include \"../msbuild/WindowsHelper.h\"\n#include \"dirent_windows.h\"\n#endif\n#include \"../notifications/NotificationHelper.h\"\n#include \"../main/LuaHandler.h\"\n\n#define __STDC_FORMAT_MACROS\n#include <inttypes.h>\n\n#define round(a) ( int ) ( a + .5 )\n\nextern std::string szUserDataFolder;\nextern std::string szWWWFolder;\n\nextern std::string szAppVersion;\nextern std::string szAppHash;\nextern std::string szAppDate;\nextern std::string szPyVersion;\n\nextern bool g_bUseUpdater;\n\nextern time_t m_StartTime;\n\nextern bool g_bDontCacheWWW;\n\nstruct _tGuiLanguage {\n\tconst char* szShort;\n\tconst char* szLong;\n};\n\nstatic const _tGuiLanguage guiLanguage[] =\n{\n\t{ \"en\", \"English\" },\n\t{ \"sq\", \"Albanian\" },\n\t{ \"ar\", \"Arabic\" },\n\t{ \"bs\", \"Bosnian\" },\n\t{ \"bg\", \"Bulgarian\" },\n\t{ \"ca\", \"Catalan\" },\n\t{ \"zh\", \"Chinese\" },\n\t{ \"cs\", \"Czech\" },\n\t{ \"da\", \"Danish\" },\n\t{ \"nl\", \"Dutch\" },\n\t{ \"et\", \"Estonian\" },\n\t{ \"de\", \"German\" },\n\t{ \"el\", \"Greek\" },\n\t{ \"fr\", \"French\" },\n\t{ \"fi\", \"Finnish\" },\n\t{ \"he\", \"Hebrew\" },\n\t{ \"hu\", \"Hungarian\" },\n\t{ \"is\", \"Icelandic\" },\n\t{ \"it\", \"Italian\" },\n\t{ \"lt\", \"Lithuanian\" },\n\t{ \"lv\", \"Latvian\" },\n\t{ \"mk\", \"Macedonian\" },\n\t{ \"no\", \"Norwegian\" },\n\t{ \"fa\", \"Persian\" },\n\t{ \"pl\", \"Polish\" },\n\t{ \"pt\", \"Portuguese\" },\n\t{ \"ro\", \"Romanian\" },\n\t{ \"ru\", \"Russian\" },\n\t{ \"sr\", \"Serbian\" },\n\t{ \"sk\", \"Slovak\" },\n\t{ \"sl\", \"Slovenian\" },\n\t{ \"es\", \"Spanish\" },\n\t{ \"sv\", \"Swedish\" },\n\t{ \"zh_TW\", \"Taiwanese\" },\n\t{ \"tr\", \"Turkish\" },\n\t{ \"uk\", \"Ukrainian\" },\n\t{ NULL, NULL }\n};\n\nextern http::server::CWebServerHelper m_webservers;\n\nnamespace http {\n\tnamespace server {\n\n\t\tCWebServer::CWebServer(void) : session_store()\n\t\t{\n\t\t\tm_pWebEm = NULL;\n\t\t\tm_bDoStop = false;\n#ifdef WITH_OPENZWAVE\n\t\t\tm_ZW_Hwidx = -1;\n#endif\n\t\t}\n\n\n\t\tCWebServer::~CWebServer(void)\n\t\t{\n\t\t\t// RK, we call StopServer() instead of just deleting m_pWebEm. The Do_Work thread might still be accessing that object\n\t\t\tStopServer();\n\t\t}\n\n\t\tvoid CWebServer::Do_Work()\n\t\t{\n\t\t\tbool exception_thrown = false;\n\t\t\twhile (!m_bDoStop)\n\t\t\t{\n\t\t\t\texception_thrown = false;\n\t\t\t\ttry {\n\t\t\t\t\tif (m_pWebEm) {\n\t\t\t\t\t\tm_pWebEm->Run();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (std::exception& e) {\n\t\t\t\t\t_log.Log(LOG_ERROR, \"WebServer(%s) exception occurred : '%s'\", m_server_alias.c_str(), e.what());\n\t\t\t\t\texception_thrown = true;\n\t\t\t\t}\n\t\t\t\tcatch (...) {\n\t\t\t\t\t_log.Log(LOG_ERROR, \"WebServer(%s) unknown exception occurred\", m_server_alias.c_str());\n\t\t\t\t\texception_thrown = true;\n\t\t\t\t}\n\t\t\t\tif (exception_thrown) {\n\t\t\t\t\t_log.Log(LOG_STATUS, \"WebServer(%s) restart server in 5 seconds\", m_server_alias.c_str());\n\t\t\t\t\tsleep_milliseconds(5000); // prevents from an exception flood\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_log.Log(LOG_STATUS, \"WebServer(%s) stopped\", m_server_alias.c_str());\n\t\t}\n\n\t\tvoid CWebServer::ReloadCustomSwitchIcons()\n\t\t{\n\t\t\tm_custom_light_icons.clear();\n\t\t\tm_custom_light_icons_lookup.clear();\n\t\t\tstd::string sLine = \"\";\n\n\t\t\t//First get them from the switch_icons.txt file\n\t\t\tstd::ifstream infile;\n\t\t\tstd::string switchlightsfile = szWWWFolder + \"/switch_icons.txt\";\n\t\t\tinfile.open(switchlightsfile.c_str());\n\t\t\tif (infile.is_open())\n\t\t\t{\n\t\t\t\tint index = 0;\n\t\t\t\twhile (!infile.eof())\n\t\t\t\t{\n\t\t\t\t\tgetline(infile, sLine);\n\t\t\t\t\tif (sLine.size() != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> results;\n\t\t\t\t\t\tStringSplit(sLine, \";\", results);\n\t\t\t\t\t\tif (results.size() == 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_tCustomIcon cImage;\n\t\t\t\t\t\t\tcImage.idx = index++;\n\t\t\t\t\t\t\tcImage.RootFile = results[0];\n\t\t\t\t\t\t\tcImage.Title = results[1];\n\t\t\t\t\t\t\tcImage.Description = results[2];\n\t\t\t\t\t\t\tm_custom_light_icons.push_back(cImage);\n\t\t\t\t\t\t\tm_custom_light_icons_lookup[cImage.idx] = m_custom_light_icons.size() - 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tinfile.close();\n\t\t\t}\n\t\t\t//Now get them from the database (idx 100+)\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID,Base,Name,Description FROM CustomImages\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tint ID = atoi(sd[0].c_str());\n\n\t\t\t\t\t_tCustomIcon cImage;\n\t\t\t\t\tcImage.idx = 100 + ID;\n\t\t\t\t\tcImage.RootFile = sd[1];\n\t\t\t\t\tcImage.Title = sd[2];\n\t\t\t\t\tcImage.Description = sd[3];\n\n\t\t\t\t\tstd::string IconFile16 = cImage.RootFile + \".png\";\n\t\t\t\t\tstd::string IconFile48On = cImage.RootFile + \"48_On.png\";\n\t\t\t\t\tstd::string IconFile48Off = cImage.RootFile + \"48_Off.png\";\n\n\t\t\t\t\tstd::map<std::string, std::string> _dbImageFiles;\n\t\t\t\t\t_dbImageFiles[\"IconSmall\"] = szWWWFolder + \"/images/\" + IconFile16;\n\t\t\t\t\t_dbImageFiles[\"IconOn\"] = szWWWFolder + \"/images/\" + IconFile48On;\n\t\t\t\t\t_dbImageFiles[\"IconOff\"] = szWWWFolder + \"/images/\" + IconFile48Off;\n\n\t\t\t\t\t//Check if files are on disk, else add them\n\t\t\t\t\tfor (const auto & iItt : _dbImageFiles)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string TableField = iItt.first;\n\t\t\t\t\t\tstd::string IconFile = iItt.second;\n\n\t\t\t\t\t\tif (!file_exist(IconFile.c_str()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Does not exists, extract it from the database and add it\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tresult2 = m_sql.safe_queryBlob(\"SELECT %s FROM CustomImages WHERE ID=%d\", TableField.c_str(), ID);\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::ofstream file;\n\t\t\t\t\t\t\t\tfile.open(IconFile.c_str(), std::ios::out | std::ios::binary);\n\t\t\t\t\t\t\t\tif (!file.is_open())\n\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\tfile << result2[0][0];\n\t\t\t\t\t\t\t\tfile.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tm_custom_light_icons.push_back(cImage);\n\t\t\t\t\tm_custom_light_icons_lookup[cImage.idx] = m_custom_light_icons.size() - 1;\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbool CWebServer::StartServer(server_settings & settings, const std::string & serverpath, const bool bIgnoreUsernamePassword)\n\t\t{\n\t\t\tm_server_alias = (settings.is_secure() == true) ? \"SSL\" : \"HTTP\";\n\n\t\t\tif (!settings.is_enabled())\n\t\t\t\treturn true;\n\n\t\t\tReloadCustomSwitchIcons();\n\n\t\t\tint tries = 0;\n\t\t\tbool exception = false;\n\n\t\t\t//_log.Log(LOG_STATUS, \"CWebServer::StartServer() : settings : %s\", settings.to_string().c_str());\n\t\t\tdo {\n\t\t\t\ttry {\n\t\t\t\t\texception = false;\n\t\t\t\t\tm_pWebEm = new http::server::cWebem(settings, serverpath.c_str());\n\t\t\t\t}\n\t\t\t\tcatch (std::exception& e) {\n\t\t\t\t\texception = true;\n\t\t\t\t\tswitch (tries) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tsettings.listening_address = \"::\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tsettings.listening_address = \"0.0.0.0\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"WebServer(%s) startup failed on address %s with port: %s: %s\", m_server_alias.c_str(), settings.listening_address.c_str(), settings.listening_port.c_str(), e.what());\n\t\t\t\t\t\tif (atoi(settings.listening_port.c_str()) < 1024)\n\t\t\t\t\t\t\t_log.Log(LOG_ERROR, \"WebServer(%s) check privileges for opening ports below 1024\", m_server_alias.c_str());\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t_log.Log(LOG_ERROR, \"WebServer(%s) check if no other application is using port: %s\", m_server_alias.c_str(), settings.listening_port.c_str());\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\ttries++;\n\t\t\t\t}\n\t\t\t} while (exception);\n\n\t\t\t_log.Log(LOG_STATUS, \"WebServer(%s) started on address: %s with port %s\", m_server_alias.c_str(), settings.listening_address.c_str(), settings.listening_port.c_str());\n\n\t\t\tm_pWebEm->SetDigistRealm(\"Domoticz.com\");\n\t\t\tm_pWebEm->SetSessionStore(this);\n\n\t\t\tif (!bIgnoreUsernamePassword)\n\t\t\t{\n\t\t\t\tLoadUsers();\n\t\t\t\tstd::string WebLocalNetworks;\n\t\t\t\tint nValue;\n\t\t\t\tif (m_sql.GetPreferencesVar(\"WebLocalNetworks\", nValue, WebLocalNetworks))\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\tStringSplit(WebLocalNetworks, \";\", strarray);\n\t\t\t\t\tfor (const auto & itt : strarray)\n\t\t\t\t\t\tm_pWebEm->AddLocalNetworks(itt);\n\t\t\t\t\t//add local hostname\n\t\t\t\t\tm_pWebEm->AddLocalNetworks(\"\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstd::string WebRemoteProxyIPs;\n\t\t\tint nValue;\n\t\t\tif (m_sql.GetPreferencesVar(\"WebRemoteProxyIPs\", nValue, WebRemoteProxyIPs))\n\t\t\t{\n\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\tStringSplit(WebRemoteProxyIPs, \";\", strarray);\n\t\t\t\tfor (const auto & itt : strarray)\n\t\t\t\t\tm_pWebEm->AddRemoteProxyIPs(itt);\n\t\t\t}\n\n\t\t\t//register callbacks\n\t\t\tm_pWebEm->RegisterIncludeCode(\"switchtypes\", boost::bind(&CWebServer::DisplaySwitchTypesCombo, this, _1));\n\t\t\tm_pWebEm->RegisterIncludeCode(\"metertypes\", boost::bind(&CWebServer::DisplayMeterTypesCombo, this, _1));\n\t\t\tm_pWebEm->RegisterIncludeCode(\"timertypes\", boost::bind(&CWebServer::DisplayTimerTypesCombo, this, _1));\n\t\t\tm_pWebEm->RegisterIncludeCode(\"combolanguage\", boost::bind(&CWebServer::DisplayLanguageCombo, this, _1));\n\n\t\t\tm_pWebEm->RegisterPageCode(\"/json.htm\", boost::bind(&CWebServer::GetJSonPage, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/uploadcustomicon\", boost::bind(&CWebServer::Post_UploadCustomIcon, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/html5.appcache\", boost::bind(&CWebServer::GetAppCache, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/camsnapshot.jpg\", boost::bind(&CWebServer::GetCameraSnapshot, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/backupdatabase.php\", boost::bind(&CWebServer::GetDatabaseBackup, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/raspberry.cgi\", boost::bind(&CWebServer::GetInternalCameraSnapshot, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/uvccapture.cgi\", boost::bind(&CWebServer::GetInternalCameraSnapshot, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/images/floorplans/plan\", boost::bind(&CWebServer::GetFloorplanImage, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterActionCode(\"storesettings\", boost::bind(&CWebServer::PostSettings, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"setrfxcommode\", boost::bind(&CWebServer::SetRFXCOMMode, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"rfxupgradefirmware\", boost::bind(&CWebServer::RFXComUpgradeFirmware, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"rfxfirmwaregetpercentage\", boost::bind(&CWebServer::Cmd_RFXComGetFirmwarePercentage, this, _1, _2, _3), true);\n\t\t\tm_pWebEm->RegisterActionCode(\"setrego6xxtype\", boost::bind(&CWebServer::SetRego6XXType, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"sets0metertype\", boost::bind(&CWebServer::SetS0MeterType, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"setlimitlesstype\", boost::bind(&CWebServer::SetLimitlessType, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterActionCode(\"uploadfloorplanimage\", boost::bind(&CWebServer::UploadFloorplanImage, this, _1, _2, _3));\n\n\n\t\t\tm_pWebEm->RegisterActionCode(\"setopenthermsettings\", boost::bind(&CWebServer::SetOpenThermSettings, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"sendopenthermcommand\", boost::bind(&CWebServer::Cmd_SendOpenThermCommand, this, _1, _2, _3), true);\n\n\t\t\tm_pWebEm->RegisterActionCode(\"reloadpiface\", boost::bind(&CWebServer::ReloadPiFace, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"setcurrentcostmetertype\", boost::bind(&CWebServer::SetCurrentCostUSBType, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"restoredatabase\", boost::bind(&CWebServer::RestoreDatabase, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterActionCode(\"sbfspotimportolddata\", boost::bind(&CWebServer::SBFSpotImportOldData, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterActionCode(\"event_create\", boost::bind(&CWebServer::EventCreate, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"getlanguage\", boost::bind(&CWebServer::Cmd_GetLanguage, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"getthemes\", boost::bind(&CWebServer::Cmd_GetThemes, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"gettitle\", boost::bind(&CWebServer::Cmd_GetTitle, this, _1, _2, _3), true);\n\n\t\t\tRegisterCommandCode(\"logincheck\", boost::bind(&CWebServer::Cmd_LoginCheck, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"getversion\", boost::bind(&CWebServer::Cmd_GetVersion, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"getlog\", boost::bind(&CWebServer::Cmd_GetLog, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"clearlog\", boost::bind(&CWebServer::Cmd_ClearLog, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getauth\", boost::bind(&CWebServer::Cmd_GetAuth, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"getuptime\", boost::bind(&CWebServer::Cmd_GetUptime, this, _1, _2, _3), true);\n\n\n\t\t\tRegisterCommandCode(\"gethardwaretypes\", boost::bind(&CWebServer::Cmd_GetHardwareTypes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addhardware\", boost::bind(&CWebServer::Cmd_AddHardware, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatehardware\", boost::bind(&CWebServer::Cmd_UpdateHardware, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletehardware\", boost::bind(&CWebServer::Cmd_DeleteHardware, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addcamera\", boost::bind(&CWebServer::Cmd_AddCamera, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatecamera\", boost::bind(&CWebServer::Cmd_UpdateCamera, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletecamera\", boost::bind(&CWebServer::Cmd_DeleteCamera, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"wolgetnodes\", boost::bind(&CWebServer::Cmd_WOLGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"woladdnode\", boost::bind(&CWebServer::Cmd_WOLAddNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"wolupdatenode\", boost::bind(&CWebServer::Cmd_WOLUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"wolremovenode\", boost::bind(&CWebServer::Cmd_WOLRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"wolclearnodes\", boost::bind(&CWebServer::Cmd_WOLClearNodes, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"mysensorsgetnodes\", boost::bind(&CWebServer::Cmd_MySensorsGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"mysensorsgetchilds\", boost::bind(&CWebServer::Cmd_MySensorsGetChilds, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"mysensorsupdatenode\", boost::bind(&CWebServer::Cmd_MySensorsUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"mysensorsremovenode\", boost::bind(&CWebServer::Cmd_MySensorsRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"mysensorsremovechild\", boost::bind(&CWebServer::Cmd_MySensorsRemoveChild, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"mysensorsupdatechild\", boost::bind(&CWebServer::Cmd_MySensorsUpdateChild, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"pingersetmode\", boost::bind(&CWebServer::Cmd_PingerSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"pingergetnodes\", boost::bind(&CWebServer::Cmd_PingerGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"pingeraddnode\", boost::bind(&CWebServer::Cmd_PingerAddNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"pingerupdatenode\", boost::bind(&CWebServer::Cmd_PingerUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"pingerremovenode\", boost::bind(&CWebServer::Cmd_PingerRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"pingerclearnodes\", boost::bind(&CWebServer::Cmd_PingerClearNodes, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"kodisetmode\", boost::bind(&CWebServer::Cmd_KodiSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodigetnodes\", boost::bind(&CWebServer::Cmd_KodiGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodiaddnode\", boost::bind(&CWebServer::Cmd_KodiAddNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodiupdatenode\", boost::bind(&CWebServer::Cmd_KodiUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodiremovenode\", boost::bind(&CWebServer::Cmd_KodiRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodiclearnodes\", boost::bind(&CWebServer::Cmd_KodiClearNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"kodimediacommand\", boost::bind(&CWebServer::Cmd_KodiMediaCommand, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"panasonicsetmode\", boost::bind(&CWebServer::Cmd_PanasonicSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicgetnodes\", boost::bind(&CWebServer::Cmd_PanasonicGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicaddnode\", boost::bind(&CWebServer::Cmd_PanasonicAddNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicupdatenode\", boost::bind(&CWebServer::Cmd_PanasonicUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicremovenode\", boost::bind(&CWebServer::Cmd_PanasonicRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicclearnodes\", boost::bind(&CWebServer::Cmd_PanasonicClearNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"panasonicmediacommand\", boost::bind(&CWebServer::Cmd_PanasonicMediaCommand, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"heossetmode\", boost::bind(&CWebServer::Cmd_HEOSSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"heosmediacommand\", boost::bind(&CWebServer::Cmd_HEOSMediaCommand, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"onkyoeiscpcommand\", boost::bind(&CWebServer::Cmd_OnkyoEiscpCommand, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"bleboxsetmode\", boost::bind(&CWebServer::Cmd_BleBoxSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxgetnodes\", boost::bind(&CWebServer::Cmd_BleBoxGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxaddnode\", boost::bind(&CWebServer::Cmd_BleBoxAddNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxremovenode\", boost::bind(&CWebServer::Cmd_BleBoxRemoveNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxclearnodes\", boost::bind(&CWebServer::Cmd_BleBoxClearNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxautosearchingnodes\", boost::bind(&CWebServer::Cmd_BleBoxAutoSearchingNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"bleboxupdatefirmware\", boost::bind(&CWebServer::Cmd_BleBoxUpdateFirmware, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"lmssetmode\", boost::bind(&CWebServer::Cmd_LMSSetMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"lmsgetnodes\", boost::bind(&CWebServer::Cmd_LMSGetNodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"lmsgetplaylists\", boost::bind(&CWebServer::Cmd_LMSGetPlaylists, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"lmsmediacommand\", boost::bind(&CWebServer::Cmd_LMSMediaCommand, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"lmsdeleteunuseddevices\", boost::bind(&CWebServer::Cmd_LMSDeleteUnusedDevices, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"savefibarolinkconfig\", boost::bind(&CWebServer::Cmd_SaveFibaroLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getfibarolinkconfig\", boost::bind(&CWebServer::Cmd_GetFibaroLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getfibarolinks\", boost::bind(&CWebServer::Cmd_GetFibaroLinks, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"savefibarolink\", boost::bind(&CWebServer::Cmd_SaveFibaroLink, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletefibarolink\", boost::bind(&CWebServer::Cmd_DeleteFibaroLink, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"saveinfluxlinkconfig\", boost::bind(&CWebServer::Cmd_SaveInfluxLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getinfluxlinkconfig\", boost::bind(&CWebServer::Cmd_GetInfluxLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getinfluxlinks\", boost::bind(&CWebServer::Cmd_GetInfluxLinks, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"saveinfluxlink\", boost::bind(&CWebServer::Cmd_SaveInfluxLink, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deleteinfluxlink\", boost::bind(&CWebServer::Cmd_DeleteInfluxLink, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"savehttplinkconfig\", boost::bind(&CWebServer::Cmd_SaveHttpLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"gethttplinkconfig\", boost::bind(&CWebServer::Cmd_GetHttpLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"gethttplinks\", boost::bind(&CWebServer::Cmd_GetHttpLinks, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"savehttplink\", boost::bind(&CWebServer::Cmd_SaveHttpLink, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletehttplink\", boost::bind(&CWebServer::Cmd_DeleteHttpLink, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"savegooglepubsublinkconfig\", boost::bind(&CWebServer::Cmd_SaveGooglePubSubLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getgooglepubsublinkconfig\", boost::bind(&CWebServer::Cmd_GetGooglePubSubLinkConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getgooglepubsublinks\", boost::bind(&CWebServer::Cmd_GetGooglePubSubLinks, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"savegooglepubsublink\", boost::bind(&CWebServer::Cmd_SaveGooglePubSubLink, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletegooglepubsublink\", boost::bind(&CWebServer::Cmd_DeleteGooglePubSubLink, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"getdevicevalueoptions\", boost::bind(&CWebServer::Cmd_GetDeviceValueOptions, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getdevicevalueoptionwording\", boost::bind(&CWebServer::Cmd_GetDeviceValueOptionWording, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"adduservariable\", boost::bind(&CWebServer::Cmd_AddUserVariable, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updateuservariable\", boost::bind(&CWebServer::Cmd_UpdateUserVariable, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deleteuservariable\", boost::bind(&CWebServer::Cmd_DeleteUserVariable, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getuservariables\", boost::bind(&CWebServer::Cmd_GetUserVariables, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getuservariable\", boost::bind(&CWebServer::Cmd_GetUserVariable, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"allownewhardware\", boost::bind(&CWebServer::Cmd_AllowNewHardware, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addplan\", boost::bind(&CWebServer::Cmd_AddPlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updateplan\", boost::bind(&CWebServer::Cmd_UpdatePlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deleteplan\", boost::bind(&CWebServer::Cmd_DeletePlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getunusedplandevices\", boost::bind(&CWebServer::Cmd_GetUnusedPlanDevices, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addplanactivedevice\", boost::bind(&CWebServer::Cmd_AddPlanActiveDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getplandevices\", boost::bind(&CWebServer::Cmd_GetPlanDevices, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deleteplandevice\", boost::bind(&CWebServer::Cmd_DeletePlanDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"setplandevicecoords\", boost::bind(&CWebServer::Cmd_SetPlanDeviceCoords, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deleteallplandevices\", boost::bind(&CWebServer::Cmd_DeleteAllPlanDevices, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"changeplanorder\", boost::bind(&CWebServer::Cmd_ChangePlanOrder, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"changeplandeviceorder\", boost::bind(&CWebServer::Cmd_ChangePlanDeviceOrder, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"gettimerplans\", boost::bind(&CWebServer::Cmd_GetTimerPlans, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addtimerplan\", boost::bind(&CWebServer::Cmd_AddTimerPlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatetimerplan\", boost::bind(&CWebServer::Cmd_UpdateTimerPlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletetimerplan\", boost::bind(&CWebServer::Cmd_DeleteTimerPlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"duplicatetimerplan\", boost::bind(&CWebServer::Cmd_DuplicateTimerPlan, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"getactualhistory\", boost::bind(&CWebServer::Cmd_GetActualHistory, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getnewhistory\", boost::bind(&CWebServer::Cmd_GetNewHistory, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"getconfig\", boost::bind(&CWebServer::Cmd_GetConfig, this, _1, _2, _3), true);\n\t\t\tRegisterCommandCode(\"sendnotification\", boost::bind(&CWebServer::Cmd_SendNotification, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"emailcamerasnapshot\", boost::bind(&CWebServer::Cmd_EmailCameraSnapshot, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"udevice\", boost::bind(&CWebServer::Cmd_UpdateDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"udevices\", boost::bind(&CWebServer::Cmd_UpdateDevices, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"thermostatstate\", boost::bind(&CWebServer::Cmd_SetThermostatState, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"system_shutdown\", boost::bind(&CWebServer::Cmd_SystemShutdown, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"system_reboot\", boost::bind(&CWebServer::Cmd_SystemReboot, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"execute_script\", boost::bind(&CWebServer::Cmd_ExcecuteScript, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getcosts\", boost::bind(&CWebServer::Cmd_GetCosts, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"checkforupdate\", boost::bind(&CWebServer::Cmd_CheckForUpdate, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"downloadupdate\", boost::bind(&CWebServer::Cmd_DownloadUpdate, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"downloadready\", boost::bind(&CWebServer::Cmd_DownloadReady, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletedatapoint\", boost::bind(&CWebServer::Cmd_DeleteDatePoint, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"setactivetimerplan\", boost::bind(&CWebServer::Cmd_SetActiveTimerPlan, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addtimer\", boost::bind(&CWebServer::Cmd_AddTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatetimer\", boost::bind(&CWebServer::Cmd_UpdateTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletetimer\", boost::bind(&CWebServer::Cmd_DeleteTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"enabletimer\", boost::bind(&CWebServer::Cmd_EnableTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"disabletimer\", boost::bind(&CWebServer::Cmd_DisableTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"cleartimers\", boost::bind(&CWebServer::Cmd_ClearTimers, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addscenetimer\", boost::bind(&CWebServer::Cmd_AddSceneTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatescenetimer\", boost::bind(&CWebServer::Cmd_UpdateSceneTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletescenetimer\", boost::bind(&CWebServer::Cmd_DeleteSceneTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"enablescenetimer\", boost::bind(&CWebServer::Cmd_EnableSceneTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"disablescenetimer\", boost::bind(&CWebServer::Cmd_DisableSceneTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"clearscenetimers\", boost::bind(&CWebServer::Cmd_ClearSceneTimers, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"getsceneactivations\", boost::bind(&CWebServer::Cmd_GetSceneActivations, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addscenecode\", boost::bind(&CWebServer::Cmd_AddSceneCode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"removescenecode\", boost::bind(&CWebServer::Cmd_RemoveSceneCode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"clearscenecodes\", boost::bind(&CWebServer::Cmd_ClearSceneCodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"renamescene\", boost::bind(&CWebServer::Cmd_RenameScene, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"setsetpoint\", boost::bind(&CWebServer::Cmd_SetSetpoint, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"addsetpointtimer\", boost::bind(&CWebServer::Cmd_AddSetpointTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatesetpointtimer\", boost::bind(&CWebServer::Cmd_UpdateSetpointTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletesetpointtimer\", boost::bind(&CWebServer::Cmd_DeleteSetpointTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"enablesetpointtimer\", boost::bind(&CWebServer::Cmd_EnableSetpointTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"disablesetpointtimer\", boost::bind(&CWebServer::Cmd_DisableSetpointTimer, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"clearsetpointtimers\", boost::bind(&CWebServer::Cmd_ClearSetpointTimers, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"serial_devices\", boost::bind(&CWebServer::Cmd_GetSerialDevices, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"devices_list\", boost::bind(&CWebServer::Cmd_GetDevicesList, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"devices_list_onoff\", boost::bind(&CWebServer::Cmd_GetDevicesListOnOff, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"registerhue\", boost::bind(&CWebServer::Cmd_PhilipsHueRegister, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"getcustomiconset\", boost::bind(&CWebServer::Cmd_GetCustomIconSet, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletecustomicon\", boost::bind(&CWebServer::Cmd_DeleteCustomIcon, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatecustomicon\", boost::bind(&CWebServer::Cmd_UpdateCustomIcon, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"renamedevice\", boost::bind(&CWebServer::Cmd_RenameDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"setunused\", boost::bind(&CWebServer::Cmd_SetUnused, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addlogmessage\", boost::bind(&CWebServer::Cmd_AddLogMessage, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"clearshortlog\", boost::bind(&CWebServer::Cmd_ClearShortLog, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"vacuumdatabase\", boost::bind(&CWebServer::Cmd_VacuumDatabase, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addmobiledevice\", boost::bind(&CWebServer::Cmd_AddMobileDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"updatemobiledevice\", boost::bind(&CWebServer::Cmd_UpdateMobileDevice, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletemobiledevice\", boost::bind(&CWebServer::Cmd_DeleteMobileDevice, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addyeelight\", boost::bind(&CWebServer::Cmd_AddYeeLight, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"addArilux\", boost::bind(&CWebServer::Cmd_AddArilux, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"graph\", boost::bind(&CWebServer::RType_HandleGraph, this, _1, _2, _3));\n\t\t\tRegisterRType(\"lightlog\", boost::bind(&CWebServer::RType_LightLog, this, _1, _2, _3));\n\t\t\tRegisterRType(\"textlog\", boost::bind(&CWebServer::RType_TextLog, this, _1, _2, _3));\n\t\t\tRegisterRType(\"scenelog\", boost::bind(&CWebServer::RType_SceneLog, this, _1, _2, _3));\n\t\t\tRegisterRType(\"settings\", boost::bind(&CWebServer::RType_Settings, this, _1, _2, _3));\n\t\t\tRegisterRType(\"events\", boost::bind(&CWebServer::RType_Events, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"hardware\", boost::bind(&CWebServer::RType_Hardware, this, _1, _2, _3));\n\t\t\tRegisterRType(\"devices\", boost::bind(&CWebServer::RType_Devices, this, _1, _2, _3));\n\t\t\tRegisterRType(\"deletedevice\", boost::bind(&CWebServer::RType_DeleteDevice, this, _1, _2, _3));\n\t\t\tRegisterRType(\"cameras\", boost::bind(&CWebServer::RType_Cameras, this, _1, _2, _3));\n\t\t\tRegisterRType(\"cameras_user\", boost::bind(&CWebServer::RType_CamerasUser, this, _1, _2, _3));\n\t\t\tRegisterRType(\"users\", boost::bind(&CWebServer::RType_Users, this, _1, _2, _3));\n\t\t\tRegisterRType(\"mobiles\", boost::bind(&CWebServer::RType_Mobiles, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"timers\", boost::bind(&CWebServer::RType_Timers, this, _1, _2, _3));\n\t\t\tRegisterRType(\"scenetimers\", boost::bind(&CWebServer::RType_SceneTimers, this, _1, _2, _3));\n\t\t\tRegisterRType(\"setpointtimers\", boost::bind(&CWebServer::RType_SetpointTimers, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"gettransfers\", boost::bind(&CWebServer::RType_GetTransfers, this, _1, _2, _3));\n\t\t\tRegisterRType(\"transferdevice\", boost::bind(&CWebServer::RType_TransferDevice, this, _1, _2, _3));\n\t\t\tRegisterRType(\"notifications\", boost::bind(&CWebServer::RType_Notifications, this, _1, _2, _3));\n\t\t\tRegisterRType(\"schedules\", boost::bind(&CWebServer::RType_Schedules, this, _1, _2, _3));\n\t\t\tRegisterRType(\"getshareduserdevices\", boost::bind(&CWebServer::RType_GetSharedUserDevices, this, _1, _2, _3));\n\t\t\tRegisterRType(\"setshareduserdevices\", boost::bind(&CWebServer::RType_SetSharedUserDevices, this, _1, _2, _3));\n\t\t\tRegisterRType(\"setused\", boost::bind(&CWebServer::RType_SetUsed, this, _1, _2, _3));\n\t\t\tRegisterRType(\"scenes\", boost::bind(&CWebServer::RType_Scenes, this, _1, _2, _3));\n\t\t\tRegisterRType(\"addscene\", boost::bind(&CWebServer::RType_AddScene, this, _1, _2, _3));\n\t\t\tRegisterRType(\"deletescene\", boost::bind(&CWebServer::RType_DeleteScene, this, _1, _2, _3));\n\t\t\tRegisterRType(\"updatescene\", boost::bind(&CWebServer::RType_UpdateScene, this, _1, _2, _3));\n\t\t\tRegisterRType(\"createvirtualsensor\", boost::bind(&CWebServer::RType_CreateMappedSensor, this, _1, _2, _3));\n\t\t\tRegisterRType(\"createdevice\", boost::bind(&CWebServer::RType_CreateDevice, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"createevohomesensor\", boost::bind(&CWebServer::RType_CreateEvohomeSensor, this, _1, _2, _3));\n\t\t\tRegisterRType(\"bindevohome\", boost::bind(&CWebServer::RType_BindEvohome, this, _1, _2, _3));\n\t\t\tRegisterRType(\"createrflinkdevice\", boost::bind(&CWebServer::RType_CreateRFLinkDevice, this, _1, _2, _3));\n\n\t\t\tRegisterRType(\"custom_light_icons\", boost::bind(&CWebServer::RType_CustomLightIcons, this, _1, _2, _3));\n\t\t\tRegisterRType(\"plans\", boost::bind(&CWebServer::RType_Plans, this, _1, _2, _3));\n\t\t\tRegisterRType(\"floorplans\", boost::bind(&CWebServer::RType_FloorPlans, this, _1, _2, _3));\n#ifdef WITH_OPENZWAVE\n\t\t\t//ZWave\n\t\t\tRegisterCommandCode(\"updatezwavenode\", boost::bind(&CWebServer::Cmd_ZWaveUpdateNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"deletezwavenode\", boost::bind(&CWebServer::Cmd_ZWaveDeleteNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveinclude\", boost::bind(&CWebServer::Cmd_ZWaveInclude, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveexclude\", boost::bind(&CWebServer::Cmd_ZWaveExclude, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"zwaveisnodeincluded\", boost::bind(&CWebServer::Cmd_ZWaveIsNodeIncluded, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveisnodeexcluded\", boost::bind(&CWebServer::Cmd_ZWaveIsNodeExcluded, this, _1, _2, _3));\n\n\t\t\tRegisterCommandCode(\"zwavesoftreset\", boost::bind(&CWebServer::Cmd_ZWaveSoftReset, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavehardreset\", boost::bind(&CWebServer::Cmd_ZWaveHardReset, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavenetworkheal\", boost::bind(&CWebServer::Cmd_ZWaveNetworkHeal, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavenodeheal\", boost::bind(&CWebServer::Cmd_ZWaveNodeHeal, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavenetworkinfo\", boost::bind(&CWebServer::Cmd_ZWaveNetworkInfo, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveremovegroupnode\", boost::bind(&CWebServer::Cmd_ZWaveRemoveGroupNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveaddgroupnode\", boost::bind(&CWebServer::Cmd_ZWaveAddGroupNode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavegroupinfo\", boost::bind(&CWebServer::Cmd_ZWaveGroupInfo, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavecancel\", boost::bind(&CWebServer::Cmd_ZWaveCancel, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"applyzwavenodeconfig\", boost::bind(&CWebServer::Cmd_ApplyZWaveNodeConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"requestzwavenodeconfig\", boost::bind(&CWebServer::Cmd_ZWaveRequestNodeConfig, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavestatecheck\", boost::bind(&CWebServer::Cmd_ZWaveStateCheck, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavereceiveconfigurationfromothercontroller\", boost::bind(&CWebServer::Cmd_ZWaveReceiveConfigurationFromOtherController, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavesendconfigurationtosecondcontroller\", boost::bind(&CWebServer::Cmd_ZWaveSendConfigurationToSecondaryController, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavetransferprimaryrole\", boost::bind(&CWebServer::Cmd_ZWaveTransferPrimaryRole, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavestartusercodeenrollmentmode\", boost::bind(&CWebServer::Cmd_ZWaveSetUserCodeEnrollmentMode, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwavegetusercodes\", boost::bind(&CWebServer::Cmd_ZWaveGetNodeUserCodes, this, _1, _2, _3));\n\t\t\tRegisterCommandCode(\"zwaveremoveusercode\", boost::bind(&CWebServer::Cmd_ZWaveRemoveUserCode, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterPageCode(\"/zwavegetconfig.php\", boost::bind(&CWebServer::ZWaveGetConfigFile, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/poll.xml\", boost::bind(&CWebServer::ZWaveCPPollXml, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/cp.html\", boost::bind(&CWebServer::ZWaveCPIndex, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/confparmpost.html\", boost::bind(&CWebServer::ZWaveCPNodeGetConf, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/refreshpost.html\", boost::bind(&CWebServer::ZWaveCPNodeGetValues, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/valuepost.html\", boost::bind(&CWebServer::ZWaveCPNodeSetValue, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/buttonpost.html\", boost::bind(&CWebServer::ZWaveCPNodeSetButton, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/admpost.html\", boost::bind(&CWebServer::ZWaveCPAdminCommand, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/nodepost.html\", boost::bind(&CWebServer::ZWaveCPNodeChange, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/savepost.html\", boost::bind(&CWebServer::ZWaveCPSaveConfig, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/thpost.html\", boost::bind(&CWebServer::ZWaveCPTestHeal, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/topopost.html\", boost::bind(&CWebServer::ZWaveCPGetTopo, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/statpost.html\", boost::bind(&CWebServer::ZWaveCPGetStats, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/grouppost.html\", boost::bind(&CWebServer::ZWaveCPSetGroup, this, _1, _2, _3));\n\t\t\tm_pWebEm->RegisterPageCode(\"/ozwcp/scenepost.html\", boost::bind(&CWebServer::ZWaveCPSceneCommand, this, _1, _2, _3));\n\t\t\t//\n\t\t\t//pollpost.html\n\t\t\t//scenepost.html\n\t\t\t//thpost.html\n\t\t\tRegisterRType(\"openzwavenodes\", boost::bind(&CWebServer::RType_OpenZWaveNodes, this, _1, _2, _3));\n#endif\n\t\t\tRegisterCommandCode(\"tellstickApplySettings\", boost::bind(&CWebServer::Cmd_TellstickApplySettings, this, _1, _2, _3));\n\n\t\t\tm_pWebEm->RegisterWhitelistURLString(\"/html5.appcache\");\n\t\t\tm_pWebEm->RegisterWhitelistURLString(\"/images/floorplans/plan\");\n\n\t\t\t//Start normal worker thread\n\t\t\tm_bDoStop = false;\n\t\t\tm_thread = std::make_shared<std::thread>(&CWebServer::Do_Work, this);\n\t\t\tstd::string server_name = \"WebServer_\" + settings.listening_port;\n\t\t\tSetThreadName(m_thread->native_handle(), server_name.c_str());\n\t\t\treturn (m_thread != nullptr);\n\t\t}\n\n\t\tvoid CWebServer::StopServer()\n\t\t{\n\t\t\tm_bDoStop = true;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (m_pWebEm == NULL)\n\t\t\t\t\treturn;\n\t\t\t\tm_pWebEm->Stop();\n\t\t\t\tif (m_thread) {\n\t\t\t\t\tm_thread->join();\n\t\t\t\t\tm_thread.reset();\n\t\t\t\t}\n\t\t\t\tdelete m_pWebEm;\n\t\t\t\tm_pWebEm = NULL;\n\t\t\t}\n\t\t\tcatch (...)\n\t\t\t{\n\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::SetWebCompressionMode(const _eWebCompressionMode gzmode)\n\t\t{\n\t\t\tif (m_pWebEm == NULL)\n\t\t\t\treturn;\n\t\t\tm_pWebEm->SetWebCompressionMode(gzmode);\n\t\t}\n\n\t\tvoid CWebServer::SetAuthenticationMethod(const _eAuthenticationMethod amethod)\n\t\t{\n\t\t\tif (m_pWebEm == NULL)\n\t\t\t\treturn;\n\t\t\tm_pWebEm->SetAuthenticationMethod(amethod);\n\t\t}\n\n\t\tvoid CWebServer::SetWebTheme(const std::string &themename)\n\t\t{\n\t\t\tif (m_pWebEm == NULL)\n\t\t\t\treturn;\n\t\t\tm_pWebEm->SetWebTheme(themename);\n\t\t}\n\n\t\tvoid CWebServer::SetWebRoot(const std::string &webRoot)\n\t\t{\n\t\t\tif (m_pWebEm == NULL)\n\t\t\t\treturn;\n\t\t\tm_pWebEm->SetWebRoot(webRoot);\n\t\t}\n\n\t\tvoid CWebServer::RegisterCommandCode(const char* idname, webserver_response_function ResponseFunction, bool bypassAuthentication)\n\t\t{\n\t\t\tm_webcommands.insert(std::pair<std::string, webserver_response_function >(std::string(idname), ResponseFunction));\n\t\t\tif (bypassAuthentication)\n\t\t\t{\n\t\t\t\tm_pWebEm->RegisterWhitelistURLString(idname);\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RegisterRType(const char* idname, webserver_response_function ResponseFunction)\n\t\t{\n\t\t\tm_webrtypes.insert(std::pair<std::string, webserver_response_function >(std::string(idname), ResponseFunction));\n\t\t}\n\n\t\tvoid CWebServer::HandleRType(const std::string &rtype, WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::map < std::string, webserver_response_function >::iterator pf = m_webrtypes.find(rtype);\n\t\t\tif (pf != m_webrtypes.end())\n\t\t\t{\n\t\t\t\tpf->second(session, req, root);\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::GetAppCache(WebEmSession & session, const request& req, reply & rep)\n\t\t{\n\t\t\tstd::string response = \"\";\n\t\t\tif (g_bDontCacheWWW)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//Return the appcache file (dynamically generated)\n\t\t\tstd::string sLine;\n\t\t\tstd::string filename = szWWWFolder + \"/html5.appcache\";\n\n\n\t\t\tstd::string sWebTheme = \"default\";\n\t\t\tm_sql.GetPreferencesVar(\"WebTheme\", sWebTheme);\n\n\t\t\t//Get Dynamic Theme Files\n\t\t\tstd::map<std::string, int> _ThemeFiles;\n\t\t\tGetDirFilesRecursive(szWWWFolder + \"/styles/\" + sWebTheme + \"/\", _ThemeFiles);\n\n\t\t\t//Get Dynamic Floorplan Images from database\n\t\t\tstd::map<std::string, int> _FloorplanFiles;\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM Floorplans ORDER BY [Order]\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\tstd::string ImageURL = \"images/floorplans/plan?idx=\" + sd[0];\n\t\t\t\t\t_FloorplanFiles[ImageURL] = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstd::ifstream is(filename.c_str());\n\t\t\tif (is)\n\t\t\t{\n\t\t\t\twhile (!is.eof())\n\t\t\t\t{\n\t\t\t\t\tgetline(is, sLine);\n\t\t\t\t\tif (!sLine.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (sLine.find(\"#BuildHash\") != std::string::npos)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstdreplace(sLine, \"#BuildHash\", szAppHash);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sLine.find(\"#ThemeFiles\") != std::string::npos)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresponse += \"#Theme=\" + sWebTheme + '\\n';\n\t\t\t\t\t\t\t//Add all theme files\n\t\t\t\t\t\t\tfor (const auto & itt : _ThemeFiles)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::string tfname = itt.first.substr(szWWWFolder.size() + 1);\n\t\t\t\t\t\t\t\tstdreplace(tfname, \"styles/\" + sWebTheme, \"acttheme\");\n\t\t\t\t\t\t\t\tresponse += tfname + '\\n';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sLine.find(\"#Floorplans\") != std::string::npos)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Add all floorplans\n\t\t\t\t\t\t\tfor (const auto & itt : _FloorplanFiles)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::string tfname = itt.first;\n\t\t\t\t\t\t\t\tresponse += tfname + '\\n';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sLine.find(\"#SwitchIcons\") != std::string::npos)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Add database switch icons\n\t\t\t\t\t\t\tfor (const auto & itt : m_custom_light_icons)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (itt.idx >= 100)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstd::string IconFile16 = itt.RootFile + \".png\";\n\t\t\t\t\t\t\t\t\tstd::string IconFile48On = itt.RootFile + \"48_On.png\";\n\t\t\t\t\t\t\t\t\tstd::string IconFile48Off = itt.RootFile + \"48_Off.png\";\n\n\t\t\t\t\t\t\t\t\tresponse += \"images/\" + CURLEncode::URLEncode(IconFile16) + '\\n';\n\t\t\t\t\t\t\t\t\tresponse += \"images/\" + CURLEncode::URLEncode(IconFile48On) + '\\n';\n\t\t\t\t\t\t\t\t\tresponse += \"images/\" + CURLEncode::URLEncode(IconFile48Off) + '\\n';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresponse += sLine + '\\n';\n\t\t\t\t}\n\t\t\t}\n\t\t\treply::set_content(&rep, response);\n\t\t}\n\n\t\tvoid CWebServer::GetJSonPage(WebEmSession & session, const request& req, reply & rep)\n\t\t{\n\t\t\tJson::Value root;\n\t\t\troot[\"status\"] = \"ERR\";\n\n\t\t\tstd::string rtype = request::findValue(&req, \"type\");\n\t\t\tif (rtype == \"command\")\n\t\t\t{\n\t\t\t\tstd::string cparam = request::findValue(&req, \"param\");\n\t\t\t\tif (cparam.empty())\n\t\t\t\t{\n\t\t\t\t\tcparam = request::findValue(&req, \"dparam\");\n\t\t\t\t\tif (cparam.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tgoto exitjson;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cparam == \"dologout\")\n\t\t\t\t{\n\t\t\t\t\tsession.forcelogin = true;\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Logout\";\n\t\t\t\t\tgoto exitjson;\n\n\t\t\t\t}\n\t\t\t\t_log.Debug(DEBUG_WEBSERVER, \"WEBS GetJSon :%s :%s \", cparam.c_str(), req.uri.c_str());\n\t\t\t\tHandleCommand(cparam, session, req, root);\n\t\t\t} //(rtype==\"command\")\n\t\t\telse {\n\t\t\t\tHandleRType(rtype, session, req, root);\n\t\t\t}\n\t\texitjson:\n\t\t\tstd::string jcallback = request::findValue(&req, \"jsoncallback\");\n\t\t\tif (jcallback.size() == 0) {\n\t\t\t\treply::set_content(&rep, root.toStyledString());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treply::set_content(&rep, \"var data=\" + root.toStyledString() + '\\n' + jcallback + \"(data);\");\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetLanguage(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string sValue;\n\t\t\tif (m_sql.GetPreferencesVar(\"Language\", sValue))\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetLanguage\";\n\t\t\t\troot[\"language\"] = sValue;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetThemes(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetThemes\";\n\t\t\tm_mainworker.GetAvailableWebThemes();\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : m_mainworker.m_webthemes)\n\t\t\t{\n\t\t\t\troot[\"result\"][ii][\"theme\"] = itt;\n\t\t\t\tii++;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetTitle(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string sValue;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetTitle\";\n\t\t\tif (m_sql.GetPreferencesVar(\"Title\", sValue))\n\t\t\t\troot[\"Title\"] = sValue;\n\t\t\telse\n\t\t\t\troot[\"Title\"] = \"Domoticz\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_LoginCheck(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string tmpusrname = request::findValue(&req, \"username\");\n\t\t\tstd::string tmpusrpass = request::findValue(&req, \"password\");\n\t\t\tif (\n\t\t\t\t(tmpusrname.empty()) ||\n\t\t\t\t(tmpusrpass.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tstd::string rememberme = request::findValue(&req, \"rememberme\");\n\n\t\t\tstd::string usrname;\n\t\t\tstd::string usrpass;\n\t\t\tif (request_handler::url_decode(tmpusrname, usrname))\n\t\t\t{\n\t\t\t\tif (request_handler::url_decode(tmpusrpass, usrpass))\n\t\t\t\t{\n\t\t\t\t\tusrname = base64_decode(usrname);\n\t\t\t\t\tint iUser = FindUser(usrname.c_str());\n\t\t\t\t\tif (iUser == -1) {\n\t\t\t\t\t\t// log brute force attack\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"Failed login attempt from %s for user '%s' !\", session.remote_host.c_str(), usrname.c_str());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (m_users[iUser].Password != usrpass) {\n\t\t\t\t\t\t// log brute force attack\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"Failed login attempt from %s for '%s' !\", session.remote_host.c_str(), m_users[iUser].Username.c_str());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t_log.Log(LOG_STATUS, \"Login successful from %s for user '%s'\", session.remote_host.c_str(), m_users[iUser].Username.c_str());\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"version\"] = szAppVersion;\n\t\t\t\t\troot[\"title\"] = \"logincheck\";\n\t\t\t\t\tsession.isnew = true;\n\t\t\t\t\tsession.username = m_users[iUser].Username;\n\t\t\t\t\tsession.rights = m_users[iUser].userrights;\n\t\t\t\t\tsession.rememberme = (rememberme == \"true\");\n\t\t\t\t\troot[\"user\"] = session.username;\n\t\t\t\t\troot[\"rights\"] = session.rights;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetHardwareTypes(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetHardwareTypes\";\n\t\t\tstd::map<std::string, int> _htypes;\n\t\t\tfor (int ii = 0; ii < HTYPE_END; ii++)\n\t\t\t{\n\t\t\t\tbool bDoAdd = true;\n#ifndef _DEBUG\n#ifdef WIN32\n\t\t\t\tif (\n\t\t\t\t\t(ii == HTYPE_RaspberryBMP085) ||\n\t\t\t\t\t(ii == HTYPE_RaspberryHTU21D) ||\n\t\t\t\t\t(ii == HTYPE_RaspberryTSL2561) ||\n\t\t\t\t\t(ii == HTYPE_RaspberryPCF8574) ||\n\t\t\t\t\t(ii == HTYPE_RaspberryBME280) ||\n\t\t\t\t\t(ii == HTYPE_RaspberryMCP23017)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tbDoAdd = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n#ifndef WITH_LIBUSB\n\t\t\t\t\tif (\n\t\t\t\t\t\t(ii == HTYPE_VOLCRAFTCO20) ||\n\t\t\t\t\t\t(ii == HTYPE_TE923)\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tbDoAdd = false;\n\t\t\t\t\t}\n#endif\n\n\t\t}\n#endif\n#endif\n#ifndef WITH_OPENZWAVE\n\t\t\t\tif (ii == HTYPE_OpenZWave)\n\t\t\t\t\tbDoAdd = false;\n#endif\n#ifndef WITH_GPIO\n\t\t\t\tif (ii == HTYPE_RaspberryGPIO)\n\t\t\t\t{\n\t\t\t\t\tbDoAdd = false;\n\t\t\t\t}\n\n\t\t\t\tif (ii == HTYPE_SysfsGpio)\n\t\t\t\t{\n\t\t\t\t\tbDoAdd = false;\n\t\t\t\t}\n#endif\n\t\t\t\tif (ii == HTYPE_PythonPlugin)\n\t\t\t\t\tbDoAdd = false;\n\t\t\t\tif (bDoAdd)\n\t\t\t\t\t_htypes[Hardware_Type_Desc(ii)] = ii;\n\t}\n\t\t\t//return a sorted hardware list\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : _htypes)\n\t\t\t{\n\t\t\t\troot[\"result\"][ii][\"idx\"] = itt.second;\n\t\t\t\troot[\"result\"][ii][\"name\"] = itt.first;\n\t\t\t\tii++;\n\t\t\t}\n\n#ifdef ENABLE_PYTHON\n\t\t\t// Append Plugin list as well\n\t\t\tPluginList(root[\"result\"]);\n#endif\n}\n\n\t\tvoid CWebServer::Cmd_AddHardware(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string name = CURLEncode::URLDecode(request::findValue(&req, \"name\"));\n\t\t\tstd::string senabled = request::findValue(&req, \"enabled\");\n\t\t\tstd::string shtype = request::findValue(&req, \"htype\");\n\t\t\tstd::string address = request::findValue(&req, \"address\");\n\t\t\tstd::string sport = request::findValue(&req, \"port\");\n\t\t\tstd::string username = CURLEncode::URLDecode(request::findValue(&req, \"username\"));\n\t\t\tstd::string password = CURLEncode::URLDecode(request::findValue(&req, \"password\"));\n\t\t\tstd::string extra = CURLEncode::URLDecode(request::findValue(&req, \"extra\"));\n\t\t\tstd::string sdatatimeout = request::findValue(&req, \"datatimeout\");\n\t\t\tif (\n\t\t\t\t(name.empty()) ||\n\t\t\t\t(senabled.empty()) ||\n\t\t\t\t(shtype.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\t_eHardwareTypes htype = (_eHardwareTypes)atoi(shtype.c_str());\n\n\t\t\tint iDataTimeout = atoi(sdatatimeout.c_str());\n\t\t\tint mode1 = 0;\n\t\t\tint mode2 = 0;\n\t\t\tint mode3 = 0;\n\t\t\tint mode4 = 0;\n\t\t\tint mode5 = 0;\n\t\t\tint mode6 = 0;\n\t\t\tint port = atoi(sport.c_str());\n\t\t\tstd::string mode1Str = request::findValue(&req, \"Mode1\");\n\t\t\tif (!mode1Str.empty()) {\n\t\t\t\tmode1 = atoi(mode1Str.c_str());\n\t\t\t}\n\t\t\tstd::string mode2Str = request::findValue(&req, \"Mode2\");\n\t\t\tif (!mode2Str.empty()) {\n\t\t\t\tmode2 = atoi(mode2Str.c_str());\n\t\t\t}\n\t\t\tstd::string mode3Str = request::findValue(&req, \"Mode3\");\n\t\t\tif (!mode3Str.empty()) {\n\t\t\t\tmode3 = atoi(mode3Str.c_str());\n\t\t\t}\n\t\t\tstd::string mode4Str = request::findValue(&req, \"Mode4\");\n\t\t\tif (!mode4Str.empty()) {\n\t\t\t\tmode4 = atoi(mode4Str.c_str());\n\t\t\t}\n\t\t\tstd::string mode5Str = request::findValue(&req, \"Mode5\");\n\t\t\tif (!mode5Str.empty()) {\n\t\t\t\tmode5 = atoi(mode5Str.c_str());\n\t\t\t}\n\t\t\tstd::string mode6Str = request::findValue(&req, \"Mode6\");\n\t\t\tif (!mode6Str.empty()) {\n\t\t\t\tmode6 = atoi(mode6Str.c_str());\n\t\t\t}\n\n\t\t\tif (IsSerialDevice(htype))\n\t\t\t{\n\t\t\t\t//USB/System\n\t\t\t\tif (sport.empty())\n\t\t\t\t\treturn; //need to have a serial port\n\n\t\t\t\tif (htype == HTYPE_TeleinfoMeter) {\n\t\t\t\t\t// Teleinfo always has decimals. Chances to have a P1 and a Teleinfo device on the same\n\t\t\t\t\t// Domoticz instance are very low as both are national standards (NL and FR)\n\t\t\t\t\tm_sql.UpdatePreferencesVar(\"SmartMeterType\", 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (IsNetworkDevice(htype))\n\t\t\t{\n\t\t\t\t//Lan\n\t\t\t\tif (address.empty() || port == 0)\n\t\t\t\t\treturn;\n\n\t\t\t\tif (htype == HTYPE_MySensorsMQTT || htype == HTYPE_MQTT) {\n\t\t\t\t\tstd::string modeqStr = request::findValue(&req, \"mode1\");\n\t\t\t\t\tif (!modeqStr.empty()) {\n\t\t\t\t\t\tmode1 = atoi(modeqStr.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (htype == HTYPE_ECODEVICES) {\n\t\t\t\t\t// EcoDevices always have decimals. Chances to have a P1 and a EcoDevice/Teleinfo device on the same\n\t\t\t\t\t// Domoticz instance are very low as both are national standards (NL and FR)\n\t\t\t\t\tm_sql.UpdatePreferencesVar(\"SmartMeterType\", 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (htype == HTYPE_DomoticzInternal) {\n\t\t\t\t// DomoticzInternal cannot be added manually\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Domoticz) {\n\t\t\t\t//Remote Domoticz\n\t\t\t\tif (address.empty() || port == 0)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_TE923) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_VOLCRAFTCO20) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_System) {\n\t\t\t\t//There should be only one\n\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM Hardware WHERE (Type==%d)\", HTYPE_System);\n\t\t\t\tif (!result.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_1WIRE) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Rtl433) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Pinger) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Kodi) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PanasonicTV) {\n\t\t\t\t// all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_LogitechMediaServer) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryBMP085) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryHTU21D) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryTSL2561) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryBME280) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryMCP23017) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Dummy) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Tellstick) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_EVOHOME_SCRIPT || htype == HTYPE_EVOHOME_SERIAL || htype == HTYPE_EVOHOME_WEB || htype == HTYPE_EVOHOME_TCP) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PiFace) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HTTPPOLLER) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_BleBox) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HEOS) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Yeelight) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_XiaomiGateway) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Arilux) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_USBtinGateway) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (\n\t\t\t\t(htype == HTYPE_Wunderground) ||\n\t\t\t\t(htype == HTYPE_DarkSky) ||\n\t\t\t\t(htype == HTYPE_AccuWeather) ||\n\t\t\t\t(htype == HTYPE_OpenWeatherMap) ||\n\t\t\t\t(htype == HTYPE_ICYTHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_TOONTHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_AtagOne) ||\n\t\t\t\t(htype == HTYPE_PVOUTPUT_INPUT) ||\n\t\t\t\t(htype == HTYPE_NEST) ||\n\t\t\t\t(htype == HTYPE_ANNATHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_THERMOSMART) ||\n\t\t\t\t(htype == HTYPE_Tado) ||\n\t\t\t\t(htype == HTYPE_Netatmo)\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tif (\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(password.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SolarEdgeAPI)\n\t\t\t{\n\t\t\t\tif (\n\t\t\t\t\t(username.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Nest_OAuthAPI) {\n\t\t\t\tif (\n\t\t\t\t\t(username == \"\") &&\n\t\t\t\t\t(extra == \"||\")\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SBFSpot) {\n\t\t\t\tif (username.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HARMONY_HUB) {\n\t\t\t\tif (\n\t\t\t\t\t(address.empty() || port == 0)\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Philips_Hue) {\n\t\t\t\tif (\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(address.empty() || port == 0)\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tif (port == 0)\n\t\t\t\t\tport = 80;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_WINDDELEN) {\n\t\t\t\tstd::string mill_id = request::findValue(&req, \"Mode1\");\n\t\t\t\tif (\n\t\t\t\t\t(mill_id.empty()) ||\n\t\t\t\t\t(sport.empty())\n\t\t\t\t\t)\n\n\t\t\t\t\treturn;\n\t\t\t\tmode1 = atoi(mill_id.c_str());\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Honeywell) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryGPIO) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SysfsGpio) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_OpenWebNetTCP) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Daikin) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_GoodweAPI) {\n\t\t\t\tif (username.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PythonPlugin) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryPCF8574) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_OpenWebNetUSB) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_IntergasInComfortLAN2RF) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_EnphaseAPI) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_EcoCompteur) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddHardware\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\tif (htype == HTYPE_Domoticz)\n\t\t\t{\n\t\t\t\tif (password.size() != 32)\n\t\t\t\t{\n\t\t\t\t\tpassword = GenerateMD5Hash(password);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ((htype == HTYPE_S0SmartMeterUSB) || (htype == HTYPE_S0SmartMeterTCP))\n\t\t\t{\n\t\t\t\textra = \"0;1000;0;1000;0;1000;0;1000;0;1000\";\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Pinger)\n\t\t\t{\n\t\t\t\tmode1 = 30;\n\t\t\t\tmode2 = 1000;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Kodi)\n\t\t\t{\n\t\t\t\tmode1 = 30;\n\t\t\t\tmode2 = 1000;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PanasonicTV)\n\t\t\t{\n\t\t\t\tmode1 = 30;\n\t\t\t\tmode2 = 1000;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_LogitechMediaServer)\n\t\t\t{\n\t\t\t\tmode1 = 30;\n\t\t\t\tmode2 = 1000;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HEOS)\n\t\t\t{\n\t\t\t\tmode1 = 30;\n\t\t\t\tmode2 = 1000;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Tellstick)\n\t\t\t{\n\t\t\t\tmode1 = 4;\n\t\t\t\tmode2 = 500;\n\t\t\t}\n\n\t\t\tif (htype == HTYPE_HTTPPOLLER) {\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO Hardware (Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout) VALUES ('%q',%d, %d,'%q',%d,'%q','%q','%q','%q','%q','%q', '%q', '%q', '%q', '%q', %d)\",\n\t\t\t\t\tname.c_str(),\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\thtype,\n\t\t\t\t\taddress.c_str(),\n\t\t\t\t\tport,\n\t\t\t\t\tsport.c_str(),\n\t\t\t\t\tusername.c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\textra.c_str(),\n\t\t\t\t\tmode1Str.c_str(), mode2Str.c_str(), mode3Str.c_str(), mode4Str.c_str(), mode5Str.c_str(), mode6Str.c_str(),\n\t\t\t\t\tiDataTimeout\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PythonPlugin) {\n\t\t\t\tsport = request::findValue(&req, \"serialport\");\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO Hardware (Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout) VALUES ('%q',%d, %d,'%q',%d,'%q','%q','%q','%q','%q','%q', '%q', '%q', '%q', '%q', %d)\",\n\t\t\t\t\tname.c_str(),\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\thtype,\n\t\t\t\t\taddress.c_str(),\n\t\t\t\t\tport,\n\t\t\t\t\tsport.c_str(),\n\t\t\t\t\tusername.c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\textra.c_str(),\n\t\t\t\t\tmode1Str.c_str(), mode2Str.c_str(), mode3Str.c_str(), mode4Str.c_str(), mode5Str.c_str(), mode6Str.c_str(),\n\t\t\t\t\tiDataTimeout\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if (\n\t\t\t\t(htype == HTYPE_RFXtrx433)||\n\t\t\t\t(htype == HTYPE_RFXtrx868)\n\t\t\t\t)\n\t\t\t{\n\t\t\t\t//No Extra field here, handled in CWebServer::SetRFXCOMMode\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO Hardware (Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout) VALUES ('%q',%d, %d,'%q',%d,'%q','%q','%q',%d,%d,%d,%d,%d,%d,%d)\",\n\t\t\t\t\tname.c_str(),\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\thtype,\n\t\t\t\t\taddress.c_str(),\n\t\t\t\t\tport,\n\t\t\t\t\tsport.c_str(),\n\t\t\t\t\tusername.c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\tmode1, mode2, mode3, mode4, mode5, mode6,\n\t\t\t\t\tiDataTimeout\n\t\t\t\t);\n\t\t\t\textra = \"0\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO Hardware (Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout) VALUES ('%q',%d, %d,'%q',%d,'%q','%q','%q','%q',%d,%d,%d,%d,%d,%d,%d)\",\n\t\t\t\t\tname.c_str(),\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\thtype,\n\t\t\t\t\taddress.c_str(),\n\t\t\t\t\tport,\n\t\t\t\t\tsport.c_str(),\n\t\t\t\t\tusername.c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\textra.c_str(),\n\t\t\t\t\tmode1, mode2, mode3, mode4, mode5, mode6,\n\t\t\t\t\tiDataTimeout\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t//add the device for real in our system\n\t\t\tresult = m_sql.safe_query(\"SELECT MAX(ID) FROM Hardware\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\tint ID = atoi(sd[0].c_str());\n\n\t\t\t\troot[\"idx\"] = sd[0].c_str(); // OTO output the created ID for easier management on the caller side (if automated)\n\n\t\t\t\tm_mainworker.AddHardwareFromParams(ID, name, (senabled == \"true\") ? true : false, htype, address, port, sport, username, password, extra, mode1, mode2, mode3, mode4, mode5, mode6, iDataTimeout, true);\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateHardware(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tstd::string name = CURLEncode::URLDecode(request::findValue(&req, \"name\"));\n\t\t\tstd::string senabled = request::findValue(&req, \"enabled\");\n\t\t\tstd::string shtype = request::findValue(&req, \"htype\");\n\t\t\tstd::string address = request::findValue(&req, \"address\");\n\t\t\tstd::string sport = request::findValue(&req, \"port\");\n\t\t\tstd::string username = CURLEncode::URLDecode(request::findValue(&req, \"username\"));\n\t\t\tstd::string password = CURLEncode::URLDecode(request::findValue(&req, \"password\"));\n\t\t\tstd::string extra = CURLEncode::URLDecode(request::findValue(&req, \"extra\"));\n\t\t\tstd::string sdatatimeout = request::findValue(&req, \"datatimeout\");\n\n\t\t\tif (\n\t\t\t\t(name.empty()) ||\n\t\t\t\t(senabled.empty()) ||\n\t\t\t\t(shtype.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tint mode1 = atoi(request::findValue(&req, \"Mode1\").c_str());\n\t\t\tint mode2 = atoi(request::findValue(&req, \"Mode2\").c_str());\n\t\t\tint mode3 = atoi(request::findValue(&req, \"Mode3\").c_str());\n\t\t\tint mode4 = atoi(request::findValue(&req, \"Mode4\").c_str());\n\t\t\tint mode5 = atoi(request::findValue(&req, \"Mode5\").c_str());\n\t\t\tint mode6 = atoi(request::findValue(&req, \"Mode6\").c_str());\n\n\t\t\tbool bEnabled = (senabled == \"true\") ? true : false;\n\n\t\t\t_eHardwareTypes htype = (_eHardwareTypes)atoi(shtype.c_str());\n\t\t\tint iDataTimeout = atoi(sdatatimeout.c_str());\n\n\t\t\tint port = atoi(sport.c_str());\n\n\t\t\tbool bIsSerial = false;\n\n\t\t\tif (IsSerialDevice(htype))\n\t\t\t{\n\t\t\t\t//USB/System\n\t\t\t\tbIsSerial = true;\n\t\t\t\tif (bEnabled)\n\t\t\t\t{\n\t\t\t\t\tif (sport.empty())\n\t\t\t\t\t\treturn; //need to have a serial port\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (\n\t\t\t\t(htype == HTYPE_RFXLAN) || (htype == HTYPE_P1SmartMeterLAN) ||\n\t\t\t\t(htype == HTYPE_YouLess) || (htype == HTYPE_OpenThermGatewayTCP) || (htype == HTYPE_LimitlessLights) ||\n\t\t\t\t(htype == HTYPE_SolarEdgeTCP) || (htype == HTYPE_WOL) || (htype == HTYPE_S0SmartMeterTCP) || (htype == HTYPE_ECODEVICES) || (htype == HTYPE_Mochad) ||\n\t\t\t\t(htype == HTYPE_MySensorsTCP) || (htype == HTYPE_MySensorsMQTT) || (htype == HTYPE_MQTT) || (htype == HTYPE_TTN_MQTT) || (htype == HTYPE_FRITZBOX) || (htype == HTYPE_ETH8020) || (htype == HTYPE_Sterbox) ||\n\t\t\t\t(htype == HTYPE_KMTronicTCP) || (htype == HTYPE_KMTronicUDP) || (htype == HTYPE_SOLARMAXTCP) || (htype == HTYPE_RelayNet) || (htype == HTYPE_SatelIntegra) || (htype == HTYPE_eHouseTCP) || (htype == HTYPE_RFLINKTCP) ||\n\t\t\t\t(htype == HTYPE_Comm5TCP || (htype == HTYPE_Comm5SMTCP) || (htype == HTYPE_CurrentCostMeterLAN)) ||\n\t\t\t\t(htype == HTYPE_NefitEastLAN) || (htype == HTYPE_DenkoviHTTPDevices) || (htype == HTYPE_DenkoviTCPDevices) || (htype == HTYPE_Ec3kMeterTCP) || (htype == HTYPE_MultiFun) || (htype == HTYPE_ZIBLUETCP) || (htype == HTYPE_OnkyoAVTCP)\n\t\t\t\t) {\n\t\t\t\t//Lan\n\t\t\t\tif (address.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_DomoticzInternal) {\n\t\t\t\t// DomoticzInternal cannot be updated\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Domoticz) {\n\t\t\t\t//Remote Domoticz\n\t\t\t\tif (address.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_System) {\n\t\t\t\t//There should be only one, and with this ID\n\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM Hardware WHERE (Type==%d)\", HTYPE_System);\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint hID = atoi(result[0][0].c_str());\n\t\t\t\t\tint aID = atoi(idx.c_str());\n\t\t\t\t\tif (hID != aID)\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (htype == HTYPE_TE923) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_VOLCRAFTCO20) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_1WIRE) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Pinger) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Kodi) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PanasonicTV) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_LogitechMediaServer) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryBMP085) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryHTU21D) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryTSL2561) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryBME280) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryMCP23017) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Dummy) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_EVOHOME_SCRIPT || htype == HTYPE_EVOHOME_SERIAL || htype == HTYPE_EVOHOME_WEB || htype == HTYPE_EVOHOME_TCP) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PiFace) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HTTPPOLLER) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_BleBox) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HEOS) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Yeelight) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_XiaomiGateway) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Arilux) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_USBtinGateway) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (\n\t\t\t\t(htype == HTYPE_Wunderground) ||\n\t\t\t\t(htype == HTYPE_DarkSky) ||\n\t\t\t\t(htype == HTYPE_AccuWeather) ||\n\t\t\t\t(htype == HTYPE_OpenWeatherMap) ||\n\t\t\t\t(htype == HTYPE_ICYTHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_TOONTHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_AtagOne) ||\n\t\t\t\t(htype == HTYPE_PVOUTPUT_INPUT) ||\n\t\t\t\t(htype == HTYPE_NEST) ||\n\t\t\t\t(htype == HTYPE_ANNATHERMOSTAT) ||\n\t\t\t\t(htype == HTYPE_THERMOSMART) ||\n\t\t\t\t(htype == HTYPE_Tado) ||\n\t\t\t\t(htype == HTYPE_Netatmo)\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tif (\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(password.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SolarEdgeAPI)\n\t\t\t{\n\t\t\t\tif (\n\t\t\t\t\t(username.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Nest_OAuthAPI) {\n\t\t\t\tif (\n\t\t\t\t\t(username == \"\") &&\n\t\t\t\t\t(extra == \"||\")\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_HARMONY_HUB) {\n\t\t\t\tif (\n\t\t\t\t\t(address.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Philips_Hue) {\n\t\t\t\tif (\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(address.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tif (port == 0)\n\t\t\t\t\tport = 80;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryGPIO) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SysfsGpio) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Rtl433) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Daikin) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse if (htype == HTYPE_SBFSpot) {\n\t\t\t\tif (username.empty())\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_WINDDELEN) {\n\t\t\t\tstd::string mill_id = request::findValue(&req, \"Mode1\");\n\t\t\t\tif (\n\t\t\t\t\t(mill_id.empty()) ||\n\t\t\t\t\t(sport.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (htype == HTYPE_Honeywell) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_OpenWebNetTCP) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_PythonPlugin) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_GoodweAPI) {\n\t\t\t\tif (username.empty()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (htype == HTYPE_RaspberryPCF8574) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_OpenWebNetUSB) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_IntergasInComfortLAN2RF) {\n\t\t\t\t//All fine here\n\t\t\t}\n\t\t\telse if (htype == HTYPE_EnphaseAPI) {\n\t\t\t\t//all fine here!\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn;\n\n\t\t\tstd::string mode1Str;\n\t\t\tstd::string mode2Str;\n\t\t\tstd::string mode3Str;\n\t\t\tstd::string mode4Str;\n\t\t\tstd::string mode5Str;\n\t\t\tstd::string mode6Str;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"UpdateHardware\";\n\n\t\t\tif (htype == HTYPE_Domoticz)\n\t\t\t{\n\t\t\t\tif (password.size() != 32)\n\t\t\t\t{\n\t\t\t\t\tpassword = GenerateMD5Hash(password);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((bIsSerial) && (!bEnabled) && (sport.empty()))\n\t\t\t{\n\t\t\t\t//just disable the device\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Hardware SET Enabled=%d WHERE (ID == '%q')\",\n\t\t\t\t\t(bEnabled == true) ? 1 : 0,\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (htype == HTYPE_HTTPPOLLER) {\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Hardware SET Name='%q', Enabled=%d, Type=%d, Address='%q', Port=%d, SerialPort='%q', Username='%q', Password='%q', Extra='%q', DataTimeout=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tname.c_str(),\n\t\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\t\thtype,\n\t\t\t\t\t\taddress.c_str(),\n\t\t\t\t\t\tport,\n\t\t\t\t\t\tsport.c_str(),\n\t\t\t\t\t\tusername.c_str(),\n\t\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\t\textra.c_str(),\n\t\t\t\t\t\tiDataTimeout,\n\t\t\t\t\t\tidx.c_str()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse if (htype == HTYPE_PythonPlugin) {\n\t\t\t\t\tmode1Str = request::findValue(&req, \"Mode1\");\n\t\t\t\t\tmode2Str = request::findValue(&req, \"Mode2\");\n\t\t\t\t\tmode3Str = request::findValue(&req, \"Mode3\");\n\t\t\t\t\tmode4Str = request::findValue(&req, \"Mode4\");\n\t\t\t\t\tmode5Str = request::findValue(&req, \"Mode5\");\n\t\t\t\t\tmode6Str = request::findValue(&req, \"Mode6\");\n\t\t\t\t\tsport = request::findValue(&req, \"serialport\");\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Hardware SET Name='%q', Enabled=%d, Type=%d, Address='%q', Port=%d, SerialPort='%q', Username='%q', Password='%q', Extra='%q', Mode1='%q', Mode2='%q', Mode3='%q', Mode4='%q', Mode5='%q', Mode6='%q', DataTimeout=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tname.c_str(),\n\t\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\t\thtype,\n\t\t\t\t\t\taddress.c_str(),\n\t\t\t\t\t\tport,\n\t\t\t\t\t\tsport.c_str(),\n\t\t\t\t\t\tusername.c_str(),\n\t\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\t\textra.c_str(),\n\t\t\t\t\t\tmode1Str.c_str(), mode2Str.c_str(), mode3Str.c_str(), mode4Str.c_str(), mode5Str.c_str(), mode6Str.c_str(),\n\t\t\t\t\t\tiDataTimeout,\n\t\t\t\t\t\tidx.c_str()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse if (\n\t\t\t\t\t(htype == HTYPE_RFXtrx433) ||\n\t\t\t\t\t(htype == HTYPE_RFXtrx868)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t//No Extra field here, handled in CWebServer::SetRFXCOMMode\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Hardware SET Name='%q', Enabled=%d, Type=%d, Address='%q', Port=%d, SerialPort='%q', Username='%q', Password='%q', Mode1=%d, Mode2=%d, Mode3=%d, Mode4=%d, Mode5=%d, Mode6=%d, DataTimeout=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tname.c_str(),\n\t\t\t\t\t\t(bEnabled == true) ? 1 : 0,\n\t\t\t\t\t\thtype,\n\t\t\t\t\t\taddress.c_str(),\n\t\t\t\t\t\tport,\n\t\t\t\t\t\tsport.c_str(),\n\t\t\t\t\t\tusername.c_str(),\n\t\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\t\tmode1, mode2, mode3, mode4, mode5, mode6,\n\t\t\t\t\t\tiDataTimeout,\n\t\t\t\t\t\tidx.c_str()\n\t\t\t\t\t);\n\t\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Extra FROM Hardware WHERE ID=%q\", idx.c_str());\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\textra = result[0][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Hardware SET Name='%q', Enabled=%d, Type=%d, Address='%q', Port=%d, SerialPort='%q', Username='%q', Password='%q', Extra='%q', Mode1=%d, Mode2=%d, Mode3=%d, Mode4=%d, Mode5=%d, Mode6=%d, DataTimeout=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tname.c_str(),\n\t\t\t\t\t\t(bEnabled == true) ? 1 : 0,\n\t\t\t\t\t\thtype,\n\t\t\t\t\t\taddress.c_str(),\n\t\t\t\t\t\tport,\n\t\t\t\t\t\tsport.c_str(),\n\t\t\t\t\t\tusername.c_str(),\n\t\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\t\textra.c_str(),\n\t\t\t\t\t\tmode1, mode2, mode3, mode4, mode5, mode6,\n\t\t\t\t\t\tiDataTimeout,\n\t\t\t\t\t\tidx.c_str()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//re-add the device in our system\n\t\t\tint ID = atoi(idx.c_str());\n\t\t\tm_mainworker.AddHardwareFromParams(ID, name, bEnabled, htype, address, port, sport, username, password, extra, mode1, mode2, mode3, mode4, mode5, mode6, iDataTimeout, true);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetDeviceValueOptions(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tstd::vector<std::string> result;\n\t\t\tresult = CBasePush::DropdownOptions(atoi(idx.c_str()));\n\t\t\tif ((result.size() == 1) && result[0] == \"Status\") {\n\t\t\t\troot[\"result\"][0][\"Value\"] = 0;\n\t\t\t\troot[\"result\"][0][\"Wording\"] = result[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::string ddOption = itt;\n\t\t\t\t\troot[\"result\"][ii][\"Value\"] = ii + 1;\n\t\t\t\t\troot[\"result\"][ii][\"Wording\"] = ddOption.c_str();\n\t\t\t\t\tii++;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetDeviceValueOptions\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetDeviceValueOptionWording(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string pos = request::findValue(&req, \"pos\");\n\t\t\tif ((idx.empty()) || (pos.empty()))\n\t\t\t\treturn;\n\t\t\tstd::string wording;\n\t\t\twording = CBasePush::DropdownOptionsValue(atoi(idx.c_str()), atoi(pos.c_str()));\n\t\t\troot[\"wording\"] = wording;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetDeviceValueOptions\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_AddUserVariable(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string variablename = request::findValue(&req, \"vname\");\n\t\t\tstd::string variablevalue = request::findValue(&req, \"vvalue\");\n\t\t\tstd::string variabletype = request::findValue(&req, \"vtype\");\n\t\t\tif (\n\t\t\t\t(variablename.empty()) ||\n\t\t\t\t(variabletype.empty()) ||\n\t\t\t\t((variablevalue.empty()) && (variabletype != \"2\"))\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\troot[\"title\"] = \"AddUserVariable\";\n\n\t\t\tstd::string errorMessage;\n\t\t\tif (!m_sql.AddUserVariable(variablename, (const _eUsrVariableType)atoi(variabletype.c_str()), variablevalue, errorMessage))\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = errorMessage;\n\t\t\t}\n\t\t\telse {\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeleteUserVariable(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\n\t\t\tm_sql.DeleteUserVariable(idx);\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteUserVariable\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateUserVariable(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string variablename = request::findValue(&req, \"vname\");\n\t\t\tstd::string variablevalue = request::findValue(&req, \"vvalue\");\n\t\t\tstd::string variabletype = request::findValue(&req, \"vtype\");\n\n\t\t\tif (\n\t\t\t\t(variablename.empty()) ||\n\t\t\t\t(variabletype.empty()) ||\n\t\t\t\t((variablevalue.empty()) && (variabletype != \"2\"))\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tif (idx.empty())\n\t\t\t{\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM UserVariables WHERE Name='%q'\", variablename.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\tidx = result[0][0];\n\t\t\t}\n\n\t\t\tresult = m_sql.safe_query(\"SELECT Name, ValueType FROM UserVariables WHERE ID='%q'\", idx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\tbool bTypeNameChanged = false;\n\t\t\tif (variablename != result[0][0])\n\t\t\t\tbTypeNameChanged = true; //new name\n\t\t\telse if (variabletype != result[0][1])\n\t\t\t\tbTypeNameChanged = true; //new type\n\n\t\t\troot[\"title\"] = \"UpdateUserVariable\";\n\n\t\t\tstd::string errorMessage;\n\t\t\tif (!m_sql.UpdateUserVariable(idx, variablename, (const _eUsrVariableType)atoi(variabletype.c_str()), variablevalue, !bTypeNameChanged, errorMessage))\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = errorMessage;\n\t\t\t}\n\t\t\telse {\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\tif (bTypeNameChanged)\n\t\t\t\t{\n\t\t\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t\t\t\tm_mainworker.m_eventsystem.GetCurrentUserVariables();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tvoid CWebServer::Cmd_GetUserVariables(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, ValueType, Value, LastUpdate FROM UserVariables\");\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : result)\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\troot[\"result\"][ii][\"Type\"] = sd[2];\n\t\t\t\troot[\"result\"][ii][\"Value\"] = sd[3];\n\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sd[4];\n\t\t\t\tii++;\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetUserVariables\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetUserVariable(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\n\t\t\tint iVarID = atoi(idx.c_str());\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, ValueType, Value, LastUpdate FROM UserVariables WHERE (ID==%d)\", iVarID);\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : result)\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\troot[\"result\"][ii][\"Type\"] = sd[2];\n\t\t\t\troot[\"result\"][ii][\"Value\"] = sd[3];\n\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sd[4];\n\t\t\t\tii++;\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetUserVariable\";\n\t\t}\n\n\n\t\tvoid CWebServer::Cmd_AllowNewHardware(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string sTimeout = request::findValue(&req, \"timeout\");\n\t\t\tif (sTimeout.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AllowNewHardware\";\n\n\t\t\tm_sql.AllowNewHardwareTimer(atoi(sTimeout.c_str()));\n\t\t}\n\n\n\t\tvoid CWebServer::Cmd_DeleteHardware(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tint hwID = atoi(idx.c_str());\n\n\t\t\tCDomoticzHardwareBase *pBaseHardware = m_mainworker.GetHardware(hwID);\n\t\t\tif ((pBaseHardware != NULL) && (pBaseHardware->HwdType == HTYPE_DomoticzInternal)) {\n\t\t\t\t// DomoticzInternal cannot be removed\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteHardware\";\n\n\t\t\tm_mainworker.RemoveDomoticzHardware(hwID);\n\t\t\tm_sql.DeleteHardware(idx);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetLog\";\n\n\t\t\ttime_t lastlogtime = 0;\n\t\t\tstd::string slastlogtime = request::findValue(&req, \"lastlogtime\");\n\t\t\tif (slastlogtime != \"\")\n\t\t\t{\n\t\t\t\tstd::stringstream s_str(slastlogtime);\n\t\t\t\ts_str >> lastlogtime;\n\t\t\t}\n\n\t\t\t_eLogLevel lLevel = LOG_NORM;\n\t\t\tstd::string sloglevel = request::findValue(&req, \"loglevel\");\n\t\t\tif (!sloglevel.empty())\n\t\t\t{\n\t\t\t\tlLevel = (_eLogLevel)atoi(sloglevel.c_str());\n\t\t\t}\n\n\t\t\tstd::list<CLogger::_tLogLineStruct> logmessages = _log.GetLog(lLevel);\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : logmessages)\n\t\t\t{\n\t\t\t\tif (itt.logtime > lastlogtime)\n\t\t\t\t{\n\t\t\t\t\tstd::stringstream szLogTime;\n\t\t\t\t\tszLogTime << itt.logtime;\n\t\t\t\t\troot[\"LastLogTime\"] = szLogTime.str();\n\t\t\t\t\troot[\"result\"][ii][\"level\"] = static_cast<int>(itt.level);\n\t\t\t\t\troot[\"result\"][ii][\"message\"] = itt.logmessage;\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ClearLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"ClearLog\";\n\t\t\t_log.ClearLog();\n\t\t}\n\n\t\t//Plan Functions\n\t\tvoid CWebServer::Cmd_AddPlan(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddPlan\";\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"INSERT INTO Plans (Name) VALUES ('%q')\",\n\t\t\t\tname.c_str()\n\t\t\t);\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT MAX(ID) FROM Plans\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\tint ID = atoi(sd[0].c_str());\n\n\t\t\t\troot[\"idx\"] = sd[0].c_str(); // OTO output the created ID for easier management on the caller side (if automated)\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdatePlan(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\tif (\n\t\t\t\t(name.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"UpdatePlan\";\n\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"UPDATE Plans SET Name='%q' WHERE (ID == '%q')\",\n\t\t\t\tname.c_str(),\n\t\t\t\tidx.c_str()\n\t\t\t);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeletePlan(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeletePlan\";\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"DELETE FROM DeviceToPlansMap WHERE (PlanID == '%q')\",\n\t\t\t\tidx.c_str()\n\t\t\t);\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"DELETE FROM Plans WHERE (ID == '%q')\",\n\t\t\t\tidx.c_str()\n\t\t\t);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetUnusedPlanDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetUnusedPlanDevices\";\n\t\t\tstd::string sunique = request::findValue(&req, \"unique\");\n\t\t\tif (sunique.empty())\n\t\t\t\treturn;\n\t\t\tint iUnique = (sunique == \"true\") ? 1 : 0;\n\t\t\tint ii = 0;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\tresult = m_sql.safe_query(\"SELECT T1.[ID], T1.[Name], T1.[Type], T1.[SubType], T2.[Name] AS HardwareName FROM DeviceStatus as T1, Hardware as T2 WHERE (T1.[Used]==1) AND (T2.[ID]==T1.[HardwareID]) ORDER BY T2.[Name], T1.[Name]\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tbool bDoAdd = true;\n\t\t\t\t\tif (iUnique)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT ID FROM DeviceToPlansMap WHERE (DeviceRowID=='%q') AND (DevSceneType==0)\",\n\t\t\t\t\t\t\tsd[0].c_str());\n\t\t\t\t\t\tbDoAdd = (result2.size() == 0);\n\t\t\t\t\t}\n\t\t\t\t\tif (bDoAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tint _dtype = atoi(sd[2].c_str());\n\t\t\t\t\t\tstd::string Name = \"[\" + sd[4] + \"] \" + sd[1] + \" (\" + RFX_Type_Desc(_dtype, 1) + \"/\" + RFX_Type_SubType_Desc(_dtype, atoi(sd[3].c_str())) + \")\";\n\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 0;\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Add Scenes\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name FROM Scenes ORDER BY Name\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tbool bDoAdd = true;\n\t\t\t\t\tif (iUnique)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT ID FROM DeviceToPlansMap WHERE (DeviceRowID=='%q') AND (DevSceneType==1)\",\n\t\t\t\t\t\t\tsd[0].c_str());\n\t\t\t\t\t\tbDoAdd = (result2.size() == 0);\n\t\t\t\t\t}\n\t\t\t\t\tif (bDoAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 1;\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\tstd::string sname = \"[Scene] \" + sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sname;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_AddPlanActiveDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string sactivetype = request::findValue(&req, \"activetype\");\n\t\t\tstd::string activeidx = request::findValue(&req, \"activeidx\");\n\t\t\tif (\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(sactivetype.empty()) ||\n\t\t\t\t(activeidx.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddPlanActiveDevice\";\n\n\t\t\tint activetype = atoi(sactivetype.c_str());\n\n\t\t\t//check if it is not already there\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM DeviceToPlansMap WHERE (DeviceRowID=='%q') AND (DevSceneType==%d) AND (PlanID=='%q')\",\n\t\t\t\tactiveidx.c_str(), activetype, idx.c_str());\n\t\t\tif (result.empty())\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO DeviceToPlansMap (DevSceneType,DeviceRowID, PlanID) VALUES (%d,'%q','%q')\",\n\t\t\t\t\tactivetype,\n\t\t\t\t\tactiveidx.c_str(),\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetPlanDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetPlanDevices\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, DevSceneType, DeviceRowID, [Order] FROM DeviceToPlansMap WHERE (PlanID=='%q') ORDER BY [Order]\",\n\t\t\t\tidx.c_str());\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tstd::string ID = sd[0];\n\t\t\t\t\tint DevSceneType = atoi(sd[1].c_str());\n\t\t\t\t\tstd::string DevSceneRowID = sd[2];\n\n\t\t\t\t\tstd::string Name = \"\";\n\t\t\t\t\tif (DevSceneType == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT Name FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\t\t\t\tDevSceneRowID.c_str());\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName = result2[0][0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT Name FROM Scenes WHERE (ID=='%q')\",\n\t\t\t\t\t\t\tDevSceneRowID.c_str());\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName = \"[Scene] \" + result2[0][0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Name != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\troot[\"result\"][ii][\"devidx\"] = DevSceneRowID;\n\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = DevSceneType;\n\t\t\t\t\t\troot[\"result\"][ii][\"DevSceneRowID\"] = DevSceneRowID;\n\t\t\t\t\t\troot[\"result\"][ii][\"order\"] = sd[3];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeletePlanDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeletePlanDevice\";\n\t\t\tm_sql.safe_query(\"DELETE FROM DeviceToPlansMap WHERE (ID == '%q')\", idx.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SetPlanDeviceCoords(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string planidx = request::findValue(&req, \"planidx\");\n\t\t\tstd::string xoffset = request::findValue(&req, \"xoffset\");\n\t\t\tstd::string yoffset = request::findValue(&req, \"yoffset\");\n\t\t\tstd::string type = request::findValue(&req, \"DevSceneType\");\n\t\t\tif ((idx.empty()) || (planidx.empty()) || (xoffset.empty()) || (yoffset.empty()))\n\t\t\t\treturn;\n\t\t\tif (type != \"1\") type = \"0\";  // 0 = Device, 1 = Scene/Group\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"SetPlanDeviceCoords\";\n\t\t\tm_sql.safe_query(\"UPDATE DeviceToPlansMap SET [XOffset] = '%q', [YOffset] = '%q' WHERE (DeviceRowID='%q') and (PlanID='%q') and (DevSceneType='%q')\",\n\t\t\t\txoffset.c_str(), yoffset.c_str(), idx.c_str(), planidx.c_str(), type.c_str());\n\t\t\t_log.Log(LOG_STATUS, \"(Floorplan) Device '%s' coordinates set to '%s,%s' in plan '%s'.\", idx.c_str(), xoffset.c_str(), yoffset.c_str(), planidx.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeleteAllPlanDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteAllPlanDevices\";\n\t\t\tm_sql.safe_query(\"DELETE FROM DeviceToPlansMap WHERE (PlanID == '%q')\", idx.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ChangePlanOrder(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tstd::string sway = request::findValue(&req, \"way\");\n\t\t\tif (sway.empty())\n\t\t\t\treturn;\n\t\t\tbool bGoUp = (sway == \"0\");\n\n\t\t\tstd::string aOrder, oID, oOrder;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM Plans WHERE (ID=='%q')\",\n\t\t\t\tidx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\taOrder = result[0][0];\n\n\t\t\tif (!bGoUp)\n\t\t\t{\n\t\t\t\t//Get next device order\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM Plans WHERE ([Order]>'%q') ORDER BY [Order] ASC\",\n\t\t\t\t\taOrder.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\toID = result[0][0];\n\t\t\t\toOrder = result[0][1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Get previous device order\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM Plans WHERE ([Order]<'%q') ORDER BY [Order] DESC\",\n\t\t\t\t\taOrder.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\toID = result[0][0];\n\t\t\t\toOrder = result[0][1];\n\t\t\t}\n\t\t\t//Swap them\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"ChangePlanOrder\";\n\n\t\t\tm_sql.safe_query(\"UPDATE Plans SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\toOrder.c_str(), idx.c_str());\n\t\t\tm_sql.safe_query(\"UPDATE Plans SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\taOrder.c_str(), oID.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ChangePlanDeviceOrder(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string planid = request::findValue(&req, \"planid\");\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string sway = request::findValue(&req, \"way\");\n\t\t\tif (\n\t\t\t\t(planid.empty()) ||\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(sway.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tbool bGoUp = (sway == \"0\");\n\n\t\t\tstd::string aOrder, oID, oOrder;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM DeviceToPlansMap WHERE ((ID=='%q') AND (PlanID=='%q'))\",\n\t\t\t\tidx.c_str(), planid.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\taOrder = result[0][0];\n\n\t\t\tif (!bGoUp)\n\t\t\t{\n\t\t\t\t//Get next device order\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM DeviceToPlansMap WHERE (([Order]>'%q') AND (PlanID=='%q')) ORDER BY [Order] ASC\",\n\t\t\t\t\taOrder.c_str(), planid.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\toID = result[0][0];\n\t\t\t\toOrder = result[0][1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Get previous device order\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM DeviceToPlansMap WHERE (([Order]<'%q') AND (PlanID=='%q')) ORDER BY [Order] DESC\",\n\t\t\t\t\taOrder.c_str(), planid.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\toID = result[0][0];\n\t\t\t\toOrder = result[0][1];\n\t\t\t}\n\t\t\t//Swap them\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"ChangePlanOrder\";\n\n\t\t\tm_sql.safe_query(\"UPDATE DeviceToPlansMap SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\toOrder.c_str(), idx.c_str());\n\t\t\tm_sql.safe_query(\"UPDATE DeviceToPlansMap SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\taOrder.c_str(), oID.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetVersion(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetVersion\";\n\t\t\troot[\"version\"] = szAppVersion;\n\t\t\troot[\"hash\"] = szAppHash;\n\t\t\troot[\"build_time\"] = szAppDate;\n\t\t\tCdzVents* dzvents = CdzVents::GetInstance();\n\t\t\troot[\"dzvents_version\"] = dzvents->GetVersion();\n\t\t\troot[\"python_version\"] = szPyVersion;\n\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\t//only admin users will receive the update notification\n\t\t\t\troot[\"UseUpdate\"] = false;\n\t\t\t\troot[\"HaveUpdate\"] = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\troot[\"UseUpdate\"] = g_bUseUpdater;\n\t\t\t\troot[\"HaveUpdate\"] = m_mainworker.IsUpdateAvailable(false);\n\t\t\t\troot[\"DomoticzUpdateURL\"] = m_mainworker.m_szDomoticzUpdateURL;\n\t\t\t\troot[\"SystemName\"] = m_mainworker.m_szSystemName;\n\t\t\t\troot[\"Revision\"] = m_mainworker.m_iRevision;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetAuth(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetAuth\";\n\t\t\tif (session.rights != -1)\n\t\t\t{\n\t\t\t\troot[\"version\"] = szAppVersion;\n\t\t\t}\n\t\t\troot[\"user\"] = session.username;\n\t\t\troot[\"rights\"] = session.rights;\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetUptime(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\t//this is used in the about page, we are going to round the seconds a bit to display nicer\n\t\t\ttime_t atime = mytime(NULL);\n\t\t\ttime_t tuptime = atime - m_StartTime;\n\t\t\t//round to 5 seconds (nicer in about page)\n\t\t\ttuptime = ((tuptime / 5) * 5) + 5;\n\t\t\tint days, hours, minutes, seconds;\n\t\t\tdays = (int)(tuptime / 86400);\n\t\t\ttuptime -= (days * 86400);\n\t\t\thours = (int)(tuptime / 3600);\n\t\t\ttuptime -= (hours * 3600);\n\t\t\tminutes = (int)(tuptime / 60);\n\t\t\ttuptime -= (minutes * 60);\n\t\t\tseconds = (int)tuptime;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetUptime\";\n\t\t\troot[\"days\"] = days;\n\t\t\troot[\"hours\"] = hours;\n\t\t\troot[\"minutes\"] = minutes;\n\t\t\troot[\"seconds\"] = seconds;\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetActualHistory(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetActualHistory\";\n\n\t\t\tstd::string historyfile = szUserDataFolder + \"History.txt\";\n\n\t\t\tstd::ifstream infile;\n\t\t\tint ii = 0;\n\t\t\tinfile.open(historyfile.c_str());\n\t\t\tstd::string sLine;\n\t\t\tif (infile.is_open())\n\t\t\t{\n\t\t\t\twhile (!infile.eof())\n\t\t\t\t{\n\t\t\t\t\tgetline(infile, sLine);\n\t\t\t\t\troot[\"LastLogTime\"] = \"\";\n\t\t\t\t\tif (sLine.find(\"Version \") == 0)\n\t\t\t\t\t\troot[\"result\"][ii][\"level\"] = 1;\n\t\t\t\t\telse\n\t\t\t\t\t\troot[\"result\"][ii][\"level\"] = 0;\n\t\t\t\t\troot[\"result\"][ii][\"message\"] = sLine;\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetNewHistory(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetNewHistory\";\n\n\t\t\tstd::string historyfile;\n\t\t\tint nValue;\n\t\t\tm_sql.GetPreferencesVar(\"ReleaseChannel\", nValue);\n\t\t\tbool bIsBetaChannel = (nValue != 0);\n\n\t\t\tstd::string szHistoryURL = \"https://www.domoticz.com/download.php?channel=stable&type=history\";\n\t\t\tif (bIsBetaChannel)\n\t\t\t{\n\t\t\t\tutsname my_uname;\n\t\t\t\tif (uname(&my_uname) < 0)\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string systemname = my_uname.sysname;\n\t\t\t\tstd::string machine = my_uname.machine;\n\t\t\t\tstd::transform(systemname.begin(), systemname.end(), systemname.begin(), ::tolower);\n\n\t\t\t\tif (machine == \"armv6l\")\n\t\t\t\t{\n\t\t\t\t\t//Seems like old arm systems can also use the new arm build\n\t\t\t\t\tmachine = \"armv7l\";\n\t\t\t\t}\n\n\t\t\t\tif (((machine != \"armv6l\") && (machine != \"armv7l\") && (systemname != \"windows\") && (machine != \"x86_64\") && (machine != \"aarch64\")) || (strstr(my_uname.release, \"ARCH+\") != NULL))\n\t\t\t\t\tszHistoryURL = \"https://www.domoticz.com/download.php?channel=beta&type=history\";\n\t\t\t\telse\n\t\t\t\t\tszHistoryURL = \"https://www.domoticz.com/download.php?channel=beta&type=history&system=\" + systemname + \"&machine=\" + machine;\n\t\t\t}\n\t\t\tif (!HTTPClient::GET(szHistoryURL, historyfile))\n\t\t\t{\n\t\t\t\thistoryfile = \"Unable to get Online History document !!\";\n\t\t\t}\n\n\t\t\tstd::istringstream stream(historyfile);\n\t\t\tstd::string sLine;\n\t\t\tint ii = 0;\n\t\t\twhile (std::getline(stream, sLine))\n\t\t\t{\n\t\t\t\troot[\"LastLogTime\"] = \"\";\n\t\t\t\tif (sLine.find(\"Version \") == 0)\n\t\t\t\t\troot[\"result\"][ii][\"level\"] = 1;\n\t\t\t\telse\n\t\t\t\t\troot[\"result\"][ii][\"level\"] = 0;\n\t\t\t\troot[\"result\"][ii][\"message\"] = sLine;\n\t\t\t\tii++;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetConfig(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights == -1)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn;//Only auth user allowed\n\t\t\t}\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetConfig\";\n\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint urights = 3;\n\t\t\tunsigned long UserID = 0;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t{\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\tUserID = m_users[iUser].ID;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tint nValue;\n\t\t\tstd::string sValue;\n\n\t\t\tif (m_sql.GetPreferencesVar(\"Language\", sValue))\n\t\t\t{\n\t\t\t\troot[\"language\"] = sValue;\n\t\t\t}\n\t\t\tif (m_sql.GetPreferencesVar(\"DegreeDaysBaseTemperature\", sValue))\n\t\t\t{\n\t\t\t\troot[\"DegreeDaysBaseTemperature\"] = atof(sValue.c_str());\n\t\t\t}\n\n\t\t\tnValue = 0;\n\t\t\tint iDashboardType = 0;\n\t\t\tm_sql.GetPreferencesVar(\"DashboardType\", iDashboardType);\n\t\t\troot[\"DashboardType\"] = iDashboardType;\n\t\t\tm_sql.GetPreferencesVar(\"MobileType\", nValue);\n\t\t\troot[\"MobileType\"] = nValue;\n\n\t\t\tnValue = 1;\n\t\t\tm_sql.GetPreferencesVar(\"5MinuteHistoryDays\", nValue);\n\t\t\troot[\"FiveMinuteHistoryDays\"] = nValue;\n\n\t\t\tnValue = 1;\n\t\t\tm_sql.GetPreferencesVar(\"ShowUpdateEffect\", nValue);\n\t\t\troot[\"result\"][\"ShowUpdatedEffect\"] = (nValue == 1);\n\n\t\t\troot[\"AllowWidgetOrdering\"] = m_sql.m_bAllowWidgetOrdering;\n\n\t\t\troot[\"WindScale\"] = m_sql.m_windscale*10.0f;\n\t\t\troot[\"WindSign\"] = m_sql.m_windsign;\n\t\t\troot[\"TempScale\"] = m_sql.m_tempscale;\n\t\t\troot[\"TempSign\"] = m_sql.m_tempsign;\n\n\t\t\tstd::string Latitude = \"1\";\n\t\t\tstd::string Longitude = \"1\";\n\t\t\tif (m_sql.GetPreferencesVar(\"Location\", nValue, sValue))\n\t\t\t{\n\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\tStringSplit(sValue, \";\", strarray);\n\n\t\t\t\tif (strarray.size() == 2)\n\t\t\t\t{\n\t\t\t\t\tLatitude = strarray[0];\n\t\t\t\t\tLongitude = strarray[1];\n\t\t\t\t}\n\t\t\t}\n\t\t\troot[\"Latitude\"] = Latitude;\n\t\t\troot[\"Longitude\"] = Longitude;\n\n#ifndef NOCLOUD\n\t\t\tbool bEnableTabProxy = request::get_req_header(&req, \"X-From-MyDomoticz\") != NULL;\n#else\n\t\t\tbool bEnableTabProxy = false;\n#endif\n\t\t\tint bEnableTabDashboard = 1;\n\t\t\tint bEnableTabFloorplans = 1;\n\t\t\tint bEnableTabLight = 1;\n\t\t\tint bEnableTabScenes = 1;\n\t\t\tint bEnableTabTemp = 1;\n\t\t\tint bEnableTabWeather = 1;\n\t\t\tint bEnableTabUtility = 1;\n\t\t\tint bEnableTabCustom = 1;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\tif ((UserID != 0) && (UserID != 10000))\n\t\t\t{\n\t\t\t\tresult = m_sql.safe_query(\"SELECT TabsEnabled FROM Users WHERE (ID==%lu)\",\n\t\t\t\t\tUserID);\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint TabsEnabled = atoi(result[0][0].c_str());\n\t\t\t\t\tbEnableTabLight = (TabsEnabled&(1 << 0));\n\t\t\t\t\tbEnableTabScenes = (TabsEnabled&(1 << 1));\n\t\t\t\t\tbEnableTabTemp = (TabsEnabled&(1 << 2));\n\t\t\t\t\tbEnableTabWeather = (TabsEnabled&(1 << 3));\n\t\t\t\t\tbEnableTabUtility = (TabsEnabled&(1 << 4));\n\t\t\t\t\tbEnableTabCustom = (TabsEnabled&(1 << 5));\n\t\t\t\t\tbEnableTabFloorplans = (TabsEnabled&(1 << 6));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabFloorplans\", bEnableTabFloorplans);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabLights\", bEnableTabLight);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabScenes\", bEnableTabScenes);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabTemp\", bEnableTabTemp);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabWeather\", bEnableTabWeather);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabUtility\", bEnableTabUtility);\n\t\t\t\tm_sql.GetPreferencesVar(\"EnableTabCustom\", bEnableTabCustom);\n\t\t\t}\n\t\t\tif (iDashboardType == 3)\n\t\t\t{\n\t\t\t\t//Floorplan , no need to show a tab floorplan\n\t\t\t\tbEnableTabFloorplans = 0;\n\t\t\t}\n\t\t\troot[\"result\"][\"EnableTabProxy\"] = bEnableTabProxy;\n\t\t\troot[\"result\"][\"EnableTabDashboard\"] = bEnableTabDashboard != 0;\n\t\t\troot[\"result\"][\"EnableTabFloorplans\"] = bEnableTabFloorplans != 0;\n\t\t\troot[\"result\"][\"EnableTabLights\"] = bEnableTabLight != 0;\n\t\t\troot[\"result\"][\"EnableTabScenes\"] = bEnableTabScenes != 0;\n\t\t\troot[\"result\"][\"EnableTabTemp\"] = bEnableTabTemp != 0;\n\t\t\troot[\"result\"][\"EnableTabWeather\"] = bEnableTabWeather != 0;\n\t\t\troot[\"result\"][\"EnableTabUtility\"] = bEnableTabUtility != 0;\n\t\t\troot[\"result\"][\"EnableTabCustom\"] = bEnableTabCustom != 0;\n\n\t\t\tif (bEnableTabCustom)\n\t\t\t{\n\t\t\t\t//Add custom templates\n\t\t\t\tDIR *lDir;\n\t\t\t\tstruct dirent *ent;\n\t\t\t\tstd::string templatesFolder = szWWWFolder + \"/templates\";\n\t\t\t\tint iFile = 0;\n\t\t\t\tif ((lDir = opendir(templatesFolder.c_str())) != NULL)\n\t\t\t\t{\n\t\t\t\t\twhile ((ent = readdir(lDir)) != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string filename = ent->d_name;\n\t\t\t\t\t\tsize_t pos = filename.find(\".htm\");\n\t\t\t\t\t\tif (pos != std::string::npos)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string shortfile = filename.substr(0, pos);\n\t\t\t\t\t\t\troot[\"result\"][\"templates\"][iFile++] = shortfile;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tclosedir(lDir);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SendNotification(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string subject = request::findValue(&req, \"subject\");\n\t\t\tstd::string body = request::findValue(&req, \"body\");\n\t\t\tstd::string subsystem = request::findValue(&req, \"subsystem\");\n\t\t\tif (\n\t\t\t\t(subject.empty()) ||\n\t\t\t\t(body.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tif (subsystem.empty()) subsystem = NOTIFYALL;\n\t\t\t//Add to queue\n\t\t\tif (m_notifications.SendMessage(0, std::string(\"\"), subsystem, subject, body, std::string(\"\"), 1, std::string(\"\"), false)) {\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t}\n\t\t\troot[\"title\"] = \"SendNotification\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_EmailCameraSnapshot(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string camidx = request::findValue(&req, \"camidx\");\n\t\t\tstd::string subject = request::findValue(&req, \"subject\");\n\t\t\tif (\n\t\t\t\t(camidx.empty()) ||\n\t\t\t\t(subject.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\t//Add to queue\n\t\t\tm_sql.AddTaskItem(_tTaskItem::EmailCameraSnapshot(1, camidx, subject));\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Email Camera Snapshot\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights < 1)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //only user or higher allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\tif (!IsIdxForUser(&session, atoi(idx.c_str())))\n\t\t\t{\n\t\t\t\t_log.Log(LOG_ERROR, \"User: %s tried to update an Unauthorized device!\", session.username.c_str());\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstd::string hid = request::findValue(&req, \"hid\");\n\t\t\tstd::string did = request::findValue(&req, \"did\");\n\t\t\tstd::string dunit = request::findValue(&req, \"dunit\");\n\t\t\tstd::string dtype = request::findValue(&req, \"dtype\");\n\t\t\tstd::string dsubtype = request::findValue(&req, \"dsubtype\");\n\n\t\t\tstd::string nvalue = request::findValue(&req, \"nvalue\");\n\t\t\tstd::string svalue = request::findValue(&req, \"svalue\");\n\n\t\t\tif ((nvalue.empty() && svalue.empty()))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tint signallevel = 12;\n\t\t\tint batterylevel = 255;\n\n\t\t\tif (idx.empty())\n\t\t\t{\n\t\t\t\t//No index supplied, check if raw parameters where supplied\n\t\t\t\tif (\n\t\t\t\t\t(hid.empty()) ||\n\t\t\t\t\t(did.empty()) ||\n\t\t\t\t\t(dunit.empty()) ||\n\t\t\t\t\t(dtype.empty()) ||\n\t\t\t\t\t(dsubtype.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Get the raw device parameters\n\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT HardwareID, DeviceID, Unit, Type, SubType FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\thid = result[0][0];\n\t\t\t\tdid = result[0][1];\n\t\t\t\tdunit = result[0][2];\n\t\t\t\tdtype = result[0][3];\n\t\t\t\tdsubtype = result[0][4];\n\t\t\t}\n\n\t\t\tint HardwareID = atoi(hid.c_str());\n\t\t\tstd::string DeviceID = did;\n\t\t\tint unit = atoi(dunit.c_str());\n\t\t\tint devType = atoi(dtype.c_str());\n\t\t\tint subType = atoi(dsubtype.c_str());\n\n\t\t\tuint64_t ulIdx = std::strtoull(idx.c_str(), nullptr, 10);\n\n\t\t\tint invalue = atoi(nvalue.c_str());\n\n\t\t\tstd::string sSignalLevel = request::findValue(&req, \"rssi\");\n\t\t\tif (sSignalLevel != \"\")\n\t\t\t{\n\t\t\t\tsignallevel = atoi(sSignalLevel.c_str());\n\t\t\t}\n\t\t\tstd::string sBatteryLevel = request::findValue(&req, \"battery\");\n\t\t\tif (sBatteryLevel != \"\")\n\t\t\t{\n\t\t\t\tbatterylevel = atoi(sBatteryLevel.c_str());\n\t\t\t}\n\t\t\tif (m_mainworker.UpdateDevice(HardwareID, DeviceID, unit, devType, subType, invalue, svalue, signallevel, batterylevel))\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Update Device\";\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string script = request::findValue(&req, \"script\");\n\t\t\tif (script.empty())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstd::string content = req.content;\n\n\t\t\tstd::vector<std::string> allParameters;\n\n\t\t\t// Keep the url content on the right of the '?'\n\t\t\tstd::vector<std::string> allParts;\n\t\t\tStringSplit(req.uri, \"?\", allParts);\n\t\t\tif (!allParts.empty())\n\t\t\t{\n\t\t\t\t// Split all url parts separated by a '&'\n\t\t\t\tStringSplit(allParts[1], \"&\", allParameters);\n\t\t\t}\n\n\t\t\tCLuaHandler luaScript;\n\t\t\tbool ret = luaScript.executeLuaScript(script, content, allParameters);\n\t\t\tif (ret)\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Update Device\";\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SetThermostatState(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string sstate = request::findValue(&req, \"state\");\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\n\t\t\tif (\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(sstate.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tint iState = atoi(sstate.c_str());\n\n\t\t\tint urights = 3;\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t{\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a Thermostat State change command\", m_users[iUser].Username.c_str());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (urights < 1)\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Set Thermostat State\";\n\t\t\t_log.Log(LOG_NORM, \"Setting Thermostat State....\");\n\t\t\tm_mainworker.SetThermostatState(idx, iState);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SystemShutdown(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n#ifdef WIN32\n\t\t\tint ret = system(\"shutdown -s -f -t 1 -d up:125:1\");\n#else\n\t\t\tint ret = system(\"sudo shutdown -h now\");\n#endif\n\t\t\tif (ret != 0)\n\t\t\t{\n\t\t\t\t_log.Log(LOG_ERROR, \"Error executing shutdown command. returned: %d\", ret);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\troot[\"title\"] = \"SystemShutdown\";\n\t\t\troot[\"status\"] = \"OK\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SystemReboot(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n#ifdef WIN32\n\t\t\tint ret = system(\"shutdown -r -f -t 1 -d up:125:1\");\n#else\n\t\t\tint ret = system(\"sudo shutdown -r now\");\n#endif\n\t\t\tif (ret != 0)\n\t\t\t{\n\t\t\t\t_log.Log(LOG_ERROR, \"Error executing reboot command. returned: %d\", ret);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\troot[\"title\"] = \"SystemReboot\";\n\t\t\troot[\"status\"] = \"OK\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ExcecuteScript(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string scriptname = request::findValue(&req, \"scriptname\");\n\t\t\tif (scriptname.empty())\n\t\t\t\treturn;\n\t\t\tif (scriptname.find(\"..\") != std::string::npos)\n\t\t\t\treturn;\n#ifdef WIN32\n\t\t\tscriptname = szUserDataFolder + \"scripts\\\\\" + scriptname;\n#else\n\t\t\tscriptname = szUserDataFolder + \"scripts/\" + scriptname;\n#endif\n\t\t\tif (!file_exist(scriptname.c_str()))\n\t\t\t\treturn;\n\t\t\tstd::string script_params = request::findValue(&req, \"scriptparams\");\n\t\t\tstd::string strparm = szUserDataFolder;\n\t\t\tif (!script_params.empty())\n\t\t\t{\n\t\t\t\tif (strparm.size() > 0)\n\t\t\t\t\tstrparm += \" \" + script_params;\n\t\t\t\telse\n\t\t\t\t\tstrparm = script_params;\n\t\t\t}\n\t\t\tstd::string sdirect = request::findValue(&req, \"direct\");\n\t\t\tif (sdirect == \"true\")\n\t\t\t{\n\t\t\t\t_log.Log(LOG_STATUS, \"Executing script: %s\", scriptname.c_str());\n#ifdef WIN32\n\t\t\t\tShellExecute(NULL, \"open\", scriptname.c_str(), strparm.c_str(), NULL, SW_SHOWNORMAL);\n#else\n\t\t\t\tstd::string lscript = scriptname + \" \" + strparm;\n\t\t\t\tint ret = system(lscript.c_str());\n\t\t\t\tif (ret != 0)\n\t\t\t\t{\n\t\t\t\t\t_log.Log(LOG_ERROR, \"Error executing script command (%s). returned: %d\", lscript.c_str(), ret);\n\t\t\t\t\treturn;\n\t\t\t}\n#endif\n\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//add script to background worker\n\t\t\t\tm_sql.AddTaskItem(_tTaskItem::ExecuteScript(0.2f, scriptname, strparm));\n\t\t\t}\n\t\t\troot[\"title\"] = \"ExecuteScript\";\n\t\t\troot[\"status\"] = \"OK\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetCosts(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\tchar szTmp[100];\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType, nValue, sValue FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\tidx.c_str());\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\tint nValue = 0;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetElectraCosts\";\n\t\t\t\tm_sql.GetPreferencesVar(\"CostEnergy\", nValue);\n\t\t\t\troot[\"CostEnergy\"] = nValue;\n\t\t\t\tm_sql.GetPreferencesVar(\"CostEnergyT2\", nValue);\n\t\t\t\troot[\"CostEnergyT2\"] = nValue;\n\t\t\t\tm_sql.GetPreferencesVar(\"CostEnergyR1\", nValue);\n\t\t\t\troot[\"CostEnergyR1\"] = nValue;\n\t\t\t\tm_sql.GetPreferencesVar(\"CostEnergyR2\", nValue);\n\t\t\t\troot[\"CostEnergyR2\"] = nValue;\n\t\t\t\tm_sql.GetPreferencesVar(\"CostGas\", nValue);\n\t\t\t\troot[\"CostGas\"] = nValue;\n\t\t\t\tm_sql.GetPreferencesVar(\"CostWater\", nValue);\n\t\t\t\troot[\"CostWater\"] = nValue;\n\n\t\t\t\tint tValue = 1000;\n\t\t\t\tif (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))\n\t\t\t\t{\n\t\t\t\t\troot[\"DividerWater\"] = float(tValue);\n\t\t\t\t}\n\n\t\t\t\tunsigned char dType = atoi(sd[0].c_str());\n\t\t\t\t//unsigned char subType = atoi(sd[1].c_str());\n\t\t\t\t//nValue = (unsigned char)atoi(sd[2].c_str());\n\t\t\t\tstd::string sValue = sd[3];\n\n\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t{\n\t\t\t\t\t//also provide the counter values\n\n\t\t\t\t\tstd::vector<std::string> splitresults;\n\t\t\t\t\tStringSplit(sValue, \";\", splitresults);\n\t\t\t\t\tif (splitresults.size() != 6)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tfloat EnergyDivider = 1000.0f;\n\t\t\t\t\tif (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))\n\t\t\t\t\t{\n\t\t\t\t\t\tEnergyDivider = float(tValue);\n\t\t\t\t\t}\n\n\t\t\t\t\tunsigned long long powerusage1 = std::strtoull(splitresults[0].c_str(), nullptr, 10);\n\t\t\t\t\tunsigned long long powerusage2 = std::strtoull(splitresults[1].c_str(), nullptr, 10);\n\t\t\t\t\tunsigned long long powerdeliv1 = std::strtoull(splitresults[2].c_str(), nullptr, 10);\n\t\t\t\t\tunsigned long long powerdeliv2 = std::strtoull(splitresults[3].c_str(), nullptr, 10);\n\t\t\t\t\tunsigned long long usagecurrent = std::strtoull(splitresults[4].c_str(), nullptr, 10);\n\t\t\t\t\tunsigned long long delivcurrent = std::strtoull(splitresults[5].c_str(), nullptr, 10);\n\n\t\t\t\t\tpowerdeliv1 = (powerdeliv1 < 10) ? 0 : powerdeliv1;\n\t\t\t\t\tpowerdeliv2 = (powerdeliv2 < 10) ? 0 : powerdeliv2;\n\n\t\t\t\t\tsprintf(szTmp, \"%.03f\", float(powerusage1) / EnergyDivider);\n\t\t\t\t\troot[\"CounterT1\"] = szTmp;\n\t\t\t\t\tsprintf(szTmp, \"%.03f\", float(powerusage2) / EnergyDivider);\n\t\t\t\t\troot[\"CounterT2\"] = szTmp;\n\t\t\t\t\tsprintf(szTmp, \"%.03f\", float(powerdeliv1) / EnergyDivider);\n\t\t\t\t\troot[\"CounterR1\"] = szTmp;\n\t\t\t\t\tsprintf(szTmp, \"%.03f\", float(powerdeliv2) / EnergyDivider);\n\t\t\t\t\troot[\"CounterR2\"] = szTmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_CheckForUpdate(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint urights = 3;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t}\n\t\t\troot[\"statuscode\"] = urights;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"CheckForUpdate\";\n\t\t\troot[\"HaveUpdate\"] = false;\n\t\t\troot[\"Revision\"] = m_mainworker.m_iRevision;\n\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin users may update\n\t\t\t}\n\n\t\t\tbool bIsForced = (request::findValue(&req, \"forced\") == \"true\");\n\n\t\t\tif (!bIsForced)\n\t\t\t{\n\t\t\t\tint nValue = 0;\n\t\t\t\tm_sql.GetPreferencesVar(\"UseAutoUpdate\", nValue);\n\t\t\t\tif (nValue != 1)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troot[\"HaveUpdate\"] = m_mainworker.IsUpdateAvailable(bIsForced);\n\t\t\troot[\"DomoticzUpdateURL\"] = m_mainworker.m_szDomoticzUpdateURL;\n\t\t\troot[\"SystemName\"] = m_mainworker.m_szSystemName;\n\t\t\troot[\"Revision\"] = m_mainworker.m_iRevision;\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DownloadUpdate(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (!m_mainworker.StartDownloadUpdate())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DownloadUpdate\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DownloadReady(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (!m_mainworker.m_bHaveDownloadedDomoticzUpdate)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DownloadReady\";\n\t\t\troot[\"downloadok\"] = (m_mainworker.m_bHaveDownloadedDomoticzUpdateSuccessFull) ? true : false;\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeleteDatePoint(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tconst std::string idx = request::findValue(&req, \"idx\");\n\t\t\tconst std::string Date = request::findValue(&req, \"date\");\n\t\t\tif (\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(Date.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"deletedatapoint\";\n\t\t\tm_sql.DeleteDataPoint(idx.c_str(), Date);\n\t\t}\n\n\t\tbool CWebServer::IsIdxForUser(const WebEmSession *pSession, const int Idx)\n\t\t{\n\t\t\tif (pSession->rights == 2)\n\t\t\t\treturn true;\n\t\t\tif (pSession->rights == 0)\n\t\t\t\treturn false; //viewer\n\t\t\t//User\n\t\t\tint iUser = FindUser(pSession->username.c_str());\n\t\t\tif ((iUser < 0) || (iUser >= (int)m_users.size()))\n\t\t\t\treturn false;\n\n\t\t\tif (m_users[iUser].TotSensors == 0)\n\t\t\t\treturn true; // all sensors\n\n\t\t\tstd::vector<std::vector<std::string> > result = m_sql.safe_query(\"SELECT DeviceRowID FROM SharedDevices WHERE (SharedUserID == '%d') AND (DeviceRowID == '%d')\", m_users[iUser].ID, Idx);\n\t\t\treturn (!result.empty());\n\t\t}\n\n\n\t\tvoid CWebServer::HandleCommand(const std::string &cparam, WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::map < std::string, webserver_response_function >::iterator pf = m_webcommands.find(cparam);\n\t\t\tif (pf != m_webcommands.end())\n\t\t\t{\n\t\t\t\tpf->second(session, req, root);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tchar szTmp[300];\n\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint iUser = -1;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tiUser = FindUser(session.username.c_str());\n\t\t\t}\n\n\t\t\tif (cparam == \"deleteallsubdevices\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteAllSubDevices\";\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM LightSubDevices WHERE (ParentID == '%q')\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"deletesubdevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteSubDevice\";\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM LightSubDevices WHERE (ID == '%q')\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"addsubdevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string subidx = request::findValue(&req, \"subidx\");\n\t\t\t\tif ((idx.empty()) || (subidx.empty()))\n\t\t\t\t\treturn;\n\t\t\t\tif (idx == subidx)\n\t\t\t\t\treturn;\n\n\t\t\t\t//first check if it is not already a sub device\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q') AND (ParentID =='%q')\",\n\t\t\t\t\tsubidx.c_str(), idx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"AddSubDevice\";\n\t\t\t\t\t//no it is not, add it\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"INSERT INTO LightSubDevices (DeviceRowID, ParentID) VALUES ('%q','%q')\",\n\t\t\t\t\t\tsubidx.c_str(),\n\t\t\t\t\t\tidx.c_str()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"addscenedevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string devidx = request::findValue(&req, \"devidx\");\n\t\t\t\tstd::string isscene = request::findValue(&req, \"isscene\");\n\t\t\t\tstd::string scommand = request::findValue(&req, \"command\");\n\t\t\t\tint ondelay = atoi(request::findValue(&req, \"ondelay\").c_str());\n\t\t\t\tint offdelay = atoi(request::findValue(&req, \"offdelay\").c_str());\n\n\t\t\t\tif (\n\t\t\t\t\t(idx.empty()) ||\n\t\t\t\t\t(devidx.empty()) ||\n\t\t\t\t\t(isscene.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tint level = -1;\n\t\t\t\tif (request::hasValue(&req, \"level\"))\n\t\t\t\t\tlevel = atoi(request::findValue(&req, \"level\").c_str());\n\t\t\t\tstd::string color = _tColor(request::findValue(&req, \"color\")).toJSONString(); //Parse the color to detect incorrectly formatted color data\n\n\t\t\t\tunsigned char command = 0;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT HardwareID, DeviceID, Unit, Type, SubType, SwitchType, Options FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\t\tdevidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint dType = atoi(result[0][3].c_str());\n\t\t\t\t\tint sType = atoi(result[0][4].c_str());\n\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(result[0][5].c_str());\n\t\t\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(result[0][6].c_str());\n\t\t\t\t\tGetLightCommand(dType, sType, switchtype, scommand, command, options);\n\t\t\t\t}\n\n\t\t\t\t//first check if this device is not the scene code!\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Activators, SceneType FROM Scenes WHERE (ID=='%q')\", idx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint SceneType = atoi(result[0][1].c_str());\n\n\t\t\t\t\tstd::vector<std::string> arrayActivators;\n\t\t\t\t\tStringSplit(result[0][0], \";\", arrayActivators);\n\t\t\t\t\tfor (const auto & ittAct : arrayActivators)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string sCodeCmd = ittAct;\n\n\t\t\t\t\t\tstd::vector<std::string> arrayCode;\n\t\t\t\t\t\tStringSplit(sCodeCmd, \":\", arrayCode);\n\n\t\t\t\t\t\tstd::string sID = arrayCode[0];\n\t\t\t\t\t\tstd::string sCode = \"\";\n\t\t\t\t\t\tif (arrayCode.size() == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsCode = arrayCode[1];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (sID == devidx)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn; //Group does not work with separate codes, so already there\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//first check if it is not already a part of this scene/group (with the same OnDelay)\n\t\t\t\tif (isscene == \"true\") {\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM SceneDevices WHERE (DeviceRowID=='%q') AND (SceneRowID =='%q') AND (OnDelay == %d) AND (OffDelay == %d) AND (Cmd == %d)\",\n\t\t\t\t\t\tdevidx.c_str(), idx.c_str(), ondelay, offdelay, command);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM SceneDevices WHERE (DeviceRowID=='%q') AND (SceneRowID =='%q') AND (OnDelay == %d)\",\n\t\t\t\t\t\tdevidx.c_str(), idx.c_str(), ondelay);\n\t\t\t\t}\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"AddSceneDevice\";\n\t\t\t\t\t//no it is not, add it\n\t\t\t\t\tif (isscene == \"true\")\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"INSERT INTO SceneDevices (DeviceRowID, SceneRowID, Cmd, Level, Color, OnDelay, OffDelay) VALUES ('%q','%q',%d,%d,'%q',%d,%d)\",\n\t\t\t\t\t\t\tdevidx.c_str(),\n\t\t\t\t\t\t\tidx.c_str(),\n\t\t\t\t\t\t\tcommand,\n\t\t\t\t\t\t\tlevel,\n\t\t\t\t\t\t\tcolor.c_str(),\n\t\t\t\t\t\t\tondelay,\n\t\t\t\t\t\t\toffdelay\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"INSERT INTO SceneDevices (DeviceRowID, SceneRowID, Level, Color, OnDelay, OffDelay) VALUES ('%q','%q',%d,'%q',%d,%d)\",\n\t\t\t\t\t\t\tdevidx.c_str(),\n\t\t\t\t\t\t\tidx.c_str(),\n\t\t\t\t\t\t\tlevel,\n\t\t\t\t\t\t\tcolor.c_str(),\n\t\t\t\t\t\t\tondelay,\n\t\t\t\t\t\t\toffdelay\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t\t\t\tm_mainworker.m_eventsystem.GetCurrentScenesGroups();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"updatescenedevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string devidx = request::findValue(&req, \"devidx\");\n\t\t\t\tstd::string scommand = request::findValue(&req, \"command\");\n\t\t\t\tint ondelay = atoi(request::findValue(&req, \"ondelay\").c_str());\n\t\t\t\tint offdelay = atoi(request::findValue(&req, \"offdelay\").c_str());\n\n\t\t\t\tif (\n\t\t\t\t\t(idx.empty()) ||\n\t\t\t\t\t(devidx.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\n\t\t\t\tunsigned char command = 0;\n\n\t\t\t\tresult = m_sql.safe_query(\"SELECT HardwareID, DeviceID, Unit, Type, SubType, SwitchType, Options FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\t\tdevidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint dType = atoi(result[0][3].c_str());\n\t\t\t\t\tint sType = atoi(result[0][4].c_str());\n\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(result[0][5].c_str());\n\t\t\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(result[0][6].c_str());\n\t\t\t\t\tGetLightCommand(dType, sType, switchtype, scommand, command, options);\n\t\t\t\t}\n\t\t\t\tint level = -1;\n\t\t\t\tif (request::hasValue(&req, \"level\"))\n\t\t\t\t\tlevel = atoi(request::findValue(&req, \"level\").c_str());\n\t\t\t\tstd::string color = _tColor(request::findValue(&req, \"color\")).toJSONString(); //Parse the color to detect incorrectly formatted color data\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"UpdateSceneDevice\";\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"UPDATE SceneDevices SET Cmd=%d, Level=%d, Color='%q', OnDelay=%d, OffDelay=%d  WHERE (ID == '%q')\",\n\t\t\t\t\tcommand, level, color.c_str(), ondelay, offdelay, idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"deletescenedevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteSceneDevice\";\n\t\t\t\tm_sql.safe_query(\"DELETE FROM SceneDevices WHERE (ID == '%q')\", idx.c_str());\n\t\t\t\tm_sql.safe_query(\"DELETE FROM CamerasActiveDevices WHERE (DevSceneType==1) AND (DevSceneRowID == '%q')\", idx.c_str());\n\t\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t\t\tm_mainworker.m_eventsystem.GetCurrentScenesGroups();\n\t\t\t}\n\t\t\telse if (cparam == \"getsubdevices\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetSubDevices\";\n\t\t\t\tresult = m_sql.safe_query(\"SELECT a.ID, b.Name FROM LightSubDevices a, DeviceStatus b WHERE (a.ParentID=='%q') AND (b.ID == a.DeviceRowID)\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"ID\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"getscenedevices\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string isscene = request::findValue(&req, \"isscene\");\n\n\t\t\t\tif (\n\t\t\t\t\t(idx.empty()) ||\n\t\t\t\t\t(isscene.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetSceneDevices\";\n\n\t\t\t\tresult = m_sql.safe_query(\"SELECT a.ID, b.Name, a.DeviceRowID, b.Type, b.SubType, b.nValue, b.sValue, a.Cmd, a.Level, b.ID, a.[Order], a.Color, a.OnDelay, a.OffDelay, b.SwitchType FROM SceneDevices a, DeviceStatus b WHERE (a.SceneRowID=='%q') AND (b.ID == a.DeviceRowID) ORDER BY a.[Order]\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"ID\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"DevID\"] = sd[2];\n\t\t\t\t\t\troot[\"result\"][ii][\"DevRealIdx\"] = sd[9];\n\t\t\t\t\t\troot[\"result\"][ii][\"Order\"] = atoi(sd[10].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"OnDelay\"] = atoi(sd[12].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"OffDelay\"] = atoi(sd[13].c_str());\n\n\t\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sd[14].c_str());\n\n\t\t\t\t\t\tunsigned char devType = atoi(sd[3].c_str());\n\n\t\t\t\t\t\t//switchtype seemed not to be used down with the GetLightStatus command,\n\t\t\t\t\t\t//causing RFY to go wrong, fixing here\n\t\t\t\t\t\tif (devType != pTypeRFY)\n\t\t\t\t\t\t\tswitchtype = STYPE_OnOff;\n\n\t\t\t\t\t\tunsigned char subType = atoi(sd[4].c_str());\n\t\t\t\t\t\tunsigned char nValue = (unsigned char)atoi(sd[5].c_str());\n\t\t\t\t\t\tstd::string sValue = sd[6];\n\t\t\t\t\t\tint command = atoi(sd[7].c_str());\n\t\t\t\t\t\tint level = atoi(sd[8].c_str());\n\n\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\tint maxDimLevel = 0;\n\t\t\t\t\t\tGetLightStatus(devType, subType, switchtype, command, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\t\t\t\t\t\troot[\"result\"][ii][\"Command\"] = lstatus;\n\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = level;\n\t\t\t\t\t\troot[\"result\"][ii][\"Color\"] = _tColor(sd[11]).toJSONString();\n\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = RFX_Type_Desc(devType, 1);\n\t\t\t\t\t\troot[\"result\"][ii][\"SubType\"] = RFX_Type_SubType_Desc(devType, subType);\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"changescenedeviceorder\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\tstd::string sway = request::findValue(&req, \"way\");\n\t\t\t\tif (sway.empty())\n\t\t\t\t\treturn;\n\t\t\t\tbool bGoUp = (sway == \"0\");\n\n\t\t\t\tstd::string aScene, aOrder, oID, oOrder;\n\n\t\t\t\t//Get actual device order\n\t\t\t\tresult = m_sql.safe_query(\"SELECT SceneRowID, [Order] FROM SceneDevices WHERE (ID=='%q')\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\taScene = result[0][0];\n\t\t\t\taOrder = result[0][1];\n\n\t\t\t\tif (!bGoUp)\n\t\t\t\t{\n\t\t\t\t\t//Get next device order\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM SceneDevices WHERE (SceneRowID=='%q' AND [Order]>'%q') ORDER BY [Order] ASC\",\n\t\t\t\t\t\taScene.c_str(), aOrder.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\toID = result[0][0];\n\t\t\t\t\toOrder = result[0][1];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//Get previous device order\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM SceneDevices WHERE (SceneRowID=='%q' AND [Order]<'%q') ORDER BY [Order] DESC\",\n\t\t\t\t\t\taScene.c_str(), aOrder.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\toID = result[0][0];\n\t\t\t\t\toOrder = result[0][1];\n\t\t\t\t}\n\t\t\t\t//Swap them\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ChangeSceneDeviceOrder\";\n\n\t\t\t\tresult = m_sql.safe_query(\"UPDATE SceneDevices SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\t\toOrder.c_str(), idx.c_str());\n\t\t\t\tresult = m_sql.safe_query(\"UPDATE SceneDevices SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\t\taOrder.c_str(), oID.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"deleteallscenedevices\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteAllSceneDevices\";\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM SceneDevices WHERE (SceneRowID == %q)\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"getmanualhardware\")\n\t\t\t{\n\t\t\t\t//used by Add Manual Light/Switch dialog\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetHardware\";\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Type FROM Hardware ORDER BY ID ASC\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\tint ID = atoi(sd[0].c_str());\n\t\t\t\t\t\tstd::string Name = sd[1];\n\t\t\t\t\t\t_eHardwareTypes Type = (_eHardwareTypes)atoi(sd[2].c_str());\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(Type == HTYPE_RFXLAN) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RFXtrx315) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RFXtrx433) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RFXtrx868) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EnOceanESP2) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EnOceanESP3) ||\n\t\t\t\t\t\t\t(Type == HTYPE_Dummy) ||\n\t\t\t\t\t\t\t(Type == HTYPE_Tellstick) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EVOHOME_SCRIPT) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EVOHOME_SERIAL) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EVOHOME_WEB) ||\n\t\t\t\t\t\t\t(Type == HTYPE_EVOHOME_TCP) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RaspberryGPIO) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RFLINKUSB) ||\n\t\t\t\t\t\t\t(Type == HTYPE_RFLINKTCP) ||\n\t\t\t\t\t\t\t(Type == HTYPE_ZIBLUEUSB) ||\n\t\t\t\t\t\t\t(Type == HTYPE_ZIBLUETCP) ||\n\t\t\t\t\t\t\t(Type == HTYPE_OpenWebNetTCP) ||\n\t\t\t\t\t\t\t(Type == HTYPE_OpenWebNetUSB) ||\n\t\t\t\t\t\t\t(Type == HTYPE_SysfsGpio) ||\n\t\t\t\t\t\t\t(Type == HTYPE_USBtinGateway)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"getgpio\")\n\t\t\t{\n\t\t\t\t//used by Add Manual Light/Switch dialog\n\t\t\t\troot[\"title\"] = \"GetGpio\";\n#ifdef WITH_GPIO\n\t\t\t\tstd::vector<CGpioPin> pins = CGpio::GetPinList();\n\t\t\t\tif (pins.size() == 0) {\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"result\"][0][\"idx\"] = 0;\n\t\t\t\t\troot[\"result\"][0][\"Name\"] = \"GPIO INIT ERROR\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & it : pins)\n\t\t\t\t\t{\n\t\t\t\t\t\tCGpioPin pin = it;\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = pin.GetPin();\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = pin.ToString();\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n#else\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"result\"][0][\"idx\"] = 0;\n\t\t\t\troot[\"result\"][0][\"Name\"] = \"N/A\";\n#endif\n\t\t\t}\n\t\t\telse if (cparam == \"getsysfsgpio\")\n\t\t\t{\n\t\t\t\t//used by Add Manual Light/Switch dialog\n\t\t\t\troot[\"title\"] = \"GetSysfsGpio\";\n#ifdef WITH_GPIO\n\t\t\t\tstd::vector<int> gpio_ids = CSysfsGpio::GetGpioIds();\n\t\t\t\tstd::vector<std::string> gpio_names = CSysfsGpio::GetGpioNames();\n\n\t\t\t\tif (gpio_ids.size() == 0) {\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"result\"][0][\"idx\"] = 0;\n\t\t\t\t\troot[\"result\"][0][\"Name\"] = \"No sysfs-gpio exports\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor (int ii = 0; ii < gpio_ids.size(); ii++)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = gpio_ids[ii];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = gpio_names[ii];\n\t\t\t}\n\t\t\t\t}\n#else\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"result\"][0][\"idx\"] = 0;\n\t\t\t\troot[\"result\"][0][\"Name\"] = \"N/A\";\n#endif\n\t\t\t}\n\t\t\telse if (cparam == \"getlightswitches\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetLightSwitches\";\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Type, SubType, Used, SwitchType, Options FROM DeviceStatus ORDER BY Name\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\tstd::string ID = sd[0];\n\t\t\t\t\t\tstd::string Name = sd[1];\n\t\t\t\t\t\tint Type = atoi(sd[2].c_str());\n\t\t\t\t\t\tint SubType = atoi(sd[3].c_str());\n\t\t\t\t\t\tint used = atoi(sd[4].c_str());\n\t\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sd[5].c_str());\n\t\t\t\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(sd[6]);\n\t\t\t\t\t\tbool bdoAdd = false;\n\t\t\t\t\t\tswitch (Type)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase pTypeLighting1:\n\t\t\t\t\t\tcase pTypeLighting2:\n\t\t\t\t\t\tcase pTypeLighting3:\n\t\t\t\t\t\tcase pTypeLighting4:\n\t\t\t\t\t\tcase pTypeLighting5:\n\t\t\t\t\t\tcase pTypeLighting6:\n\t\t\t\t\t\tcase pTypeFan:\n\t\t\t\t\t\tcase pTypeColorSwitch:\n\t\t\t\t\t\tcase pTypeSecurity1:\n\t\t\t\t\t\tcase pTypeSecurity2:\n\t\t\t\t\t\tcase pTypeEvohome:\n\t\t\t\t\t\tcase pTypeEvohomeRelay:\n\t\t\t\t\t\tcase pTypeCurtain:\n\t\t\t\t\t\tcase pTypeBlinds:\n\t\t\t\t\t\tcase pTypeRFY:\n\t\t\t\t\t\tcase pTypeChime:\n\t\t\t\t\t\tcase pTypeThermostat2:\n\t\t\t\t\t\tcase pTypeThermostat3:\n\t\t\t\t\t\tcase pTypeThermostat4:\n\t\t\t\t\t\tcase pTypeRemote:\n\t\t\t\t\t\tcase pTypeRadiator1:\n\t\t\t\t\t\tcase pTypeGeneralSwitch:\n\t\t\t\t\t\tcase pTypeHomeConfort:\n\t\t\t\t\t\tcase pTypeFS20:\n\t\t\t\t\t\t\tbdoAdd = true;\n\t\t\t\t\t\t\tif (!used)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbdoAdd = false;\n\t\t\t\t\t\t\t\tbool bIsSubDevice = false;\n\t\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > resultSD;\n\t\t\t\t\t\t\t\tresultSD = m_sql.safe_query(\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q')\",\n\t\t\t\t\t\t\t\t\tsd[0].c_str());\n\t\t\t\t\t\t\t\tif (resultSD.size() > 0)\n\t\t\t\t\t\t\t\t\tbdoAdd = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((Type == pTypeRadiator1) && (SubType != sTypeSmartwaresSwitchRadiator))\n\t\t\t\t\t\t\t\tbdoAdd = false;\n\t\t\t\t\t\t\tif (bdoAdd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint idx = atoi(ID.c_str());\n\t\t\t\t\t\t\t\tif (!IsIdxForUser(&session, idx))\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = RFX_Type_Desc(Type, 1);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"SubType\"] = RFX_Type_SubType_Desc(Type, SubType);\n\t\t\t\t\t\t\t\tbool bIsDimmer = (\n\t\t\t\t\t\t\t\t\t(switchtype == STYPE_Dimmer) ||\n\t\t\t\t\t\t\t\t\t(switchtype == STYPE_BlindsPercentage) ||\n\t\t\t\t\t\t\t\t\t(switchtype == STYPE_BlindsPercentageInverted) ||\n\t\t\t\t\t\t\t\t\t(switchtype == STYPE_Selector)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"IsDimmer\"] = bIsDimmer;\n\n\t\t\t\t\t\t\t\tstd::string dimmerLevels = \"none\";\n\n\t\t\t\t\t\t\t\tif (bIsDimmer)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstd::stringstream ss;\n\n\t\t\t\t\t\t\t\t\tif (switchtype == STYPE_Selector) {\n\t\t\t\t\t\t\t\t\t\tstd::map<std::string, std::string> selectorStatuses;\n\t\t\t\t\t\t\t\t\t\tGetSelectorSwitchStatuses(options, selectorStatuses);\n\t\t\t\t\t\t\t\t\t\tbool levelOffHidden = (options[\"LevelOffHidden\"] == \"true\");\n\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < (int)selectorStatuses.size(); i++) {\n\t\t\t\t\t\t\t\t\t\t\tif (levelOffHidden && (i == 0)) {\n\t\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif ((levelOffHidden && (i > 1)) || (i > 0)) {\n\t\t\t\t\t\t\t\t\t\t\t\tss << \",\";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tss << i * 10;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tint nValue = 0;\n\t\t\t\t\t\t\t\t\t\tstd::string sValue = \"\";\n\t\t\t\t\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\t\t\t\t\tint maxDimLevel = 0;\n\t\t\t\t\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\n\t\t\t\t\t\t\t\t\t\tGetLightStatus(Type, SubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\n\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i <= maxDimLevel; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (i != 0)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tss << \",\";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tss << (int)float((100.0f / float(maxDimLevel))*i);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdimmerLevels = ss.str();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"DimmerLevels\"] = dimmerLevels;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"getlightswitchesscenes\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetLightSwitchesScenes\";\n\t\t\t\tint ii = 0;\n\n\t\t\t\t//First List/Switch Devices\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Type, SubType, Used FROM DeviceStatus ORDER BY Name\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\tstd::string ID = sd[0];\n\t\t\t\t\t\tstd::string Name = sd[1];\n\t\t\t\t\t\tint Type = atoi(sd[2].c_str());\n\t\t\t\t\t\tint SubType = atoi(sd[3].c_str());\n\t\t\t\t\t\tint used = atoi(sd[4].c_str());\n\t\t\t\t\t\tif (used)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tswitch (Type)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase pTypeLighting1:\n\t\t\t\t\t\t\tcase pTypeLighting2:\n\t\t\t\t\t\t\tcase pTypeLighting3:\n\t\t\t\t\t\t\tcase pTypeLighting4:\n\t\t\t\t\t\t\tcase pTypeLighting5:\n\t\t\t\t\t\t\tcase pTypeLighting6:\n\t\t\t\t\t\t\tcase pTypeFan:\n\t\t\t\t\t\t\tcase pTypeColorSwitch:\n\t\t\t\t\t\t\tcase pTypeSecurity1:\n\t\t\t\t\t\t\tcase pTypeSecurity2:\n\t\t\t\t\t\t\tcase pTypeEvohome:\n\t\t\t\t\t\t\tcase pTypeEvohomeRelay:\n\t\t\t\t\t\t\tcase pTypeCurtain:\n\t\t\t\t\t\t\tcase pTypeBlinds:\n\t\t\t\t\t\t\tcase pTypeRFY:\n\t\t\t\t\t\t\tcase pTypeChime:\n\t\t\t\t\t\t\tcase pTypeThermostat2:\n\t\t\t\t\t\t\tcase pTypeThermostat3:\n\t\t\t\t\t\t\tcase pTypeThermostat4:\n\t\t\t\t\t\t\tcase pTypeRemote:\n\t\t\t\t\t\t\tcase pTypeGeneralSwitch:\n\t\t\t\t\t\t\tcase pTypeHomeConfort:\n\t\t\t\t\t\t\tcase pTypeFS20:\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 0;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = \"[Light/Switch] \" + Name;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase pTypeRadiator1:\n\t\t\t\t\t\t\t\tif (SubType == sTypeSmartwaresSwitchRadiator)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 0;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = \"[Light/Switch] \" + Name;\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}//end light/switches\n\n\t\t\t\t//Add Scenes\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name FROM Scenes ORDER BY Name\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\tstd::string ID = sd[0];\n\t\t\t\t\t\tstd::string Name = sd[1];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 1;\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = \"[Scene] \" + Name;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}//end light/switches\n\t\t\t}\n\t\t\telse if (cparam == \"getcamactivedevices\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetCameraActiveDevices\";\n\t\t\t\t//First List/Switch Devices\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, DevSceneType, DevSceneRowID, DevSceneWhen, DevSceneDelay FROM CamerasActiveDevices WHERE (CameraRowID=='%q') ORDER BY ID\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\tstd::string ID = sd[0];\n\t\t\t\t\t\tint DevSceneType = atoi(sd[1].c_str());\n\t\t\t\t\t\tstd::string DevSceneRowID = sd[2];\n\t\t\t\t\t\tint DevSceneWhen = atoi(sd[3].c_str());\n\t\t\t\t\t\tint DevSceneDelay = atoi(sd[4].c_str());\n\n\t\t\t\t\t\tstd::string Name = \"\";\n\t\t\t\t\t\tif (DevSceneType == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT Name FROM DeviceStatus WHERE (ID=='%q')\",\n\t\t\t\t\t\t\t\tDevSceneRowID.c_str());\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName = \"[Light/Switches] \" + result2[0][0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT Name FROM Scenes WHERE (ID=='%q')\",\n\t\t\t\t\t\t\t\tDevSceneRowID.c_str());\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName = \"[Scene] \" + result2[0][0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Name != \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = ID;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = DevSceneType;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"DevSceneRowID\"] = DevSceneRowID;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"when\"] = DevSceneWhen;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"delay\"] = DevSceneDelay;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"addcamactivedevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string activeidx = request::findValue(&req, \"activeidx\");\n\t\t\t\tstd::string sactivetype = request::findValue(&req, \"activetype\");\n\t\t\t\tstd::string sactivewhen = request::findValue(&req, \"activewhen\");\n\t\t\t\tstd::string sactivedelay = request::findValue(&req, \"activedelay\");\n\n\t\t\t\tif (\n\t\t\t\t\t(idx.empty()) ||\n\t\t\t\t\t(activeidx.empty()) ||\n\t\t\t\t\t(sactivetype.empty()) ||\n\t\t\t\t\t(sactivewhen.empty()) ||\n\t\t\t\t\t(sactivedelay.empty())\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tint activetype = atoi(sactivetype.c_str());\n\t\t\t\tint activewhen = atoi(sactivewhen.c_str());\n\t\t\t\tint activedelay = atoi(sactivedelay.c_str());\n\n\t\t\t\t//first check if it is not already a Active Device\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"SELECT ID FROM CamerasActiveDevices WHERE (CameraRowID=='%q')\"\n\t\t\t\t\t\" AND (DevSceneType==%d) AND (DevSceneRowID=='%q')\"\n\t\t\t\t\t\" AND (DevSceneWhen==%d)\",\n\t\t\t\t\tidx.c_str(), activetype, activeidx.c_str(), activewhen);\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"AddCameraActiveDevice\";\n\t\t\t\t\t//no it is not, add it\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"INSERT INTO CamerasActiveDevices (CameraRowID, DevSceneType, DevSceneRowID, DevSceneWhen, DevSceneDelay) VALUES ('%q',%d,'%q',%d,%d)\",\n\t\t\t\t\t\tidx.c_str(),\n\t\t\t\t\t\tactivetype,\n\t\t\t\t\t\tactiveidx.c_str(),\n\t\t\t\t\t\tactivewhen,\n\t\t\t\t\t\tactivedelay\n\t\t\t\t\t);\n\t\t\t\t\tm_mainworker.m_cameras.ReloadCameras();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"deleteamactivedevice\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteCameraActiveDevice\";\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM CamerasActiveDevices WHERE (ID == '%q')\", idx.c_str());\n\t\t\t\tm_mainworker.m_cameras.ReloadCameras();\n\t\t\t}\n\t\t\telse if (cparam == \"deleteallactivecamdevices\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteAllCameraActiveDevices\";\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM CamerasActiveDevices WHERE (CameraRowID == '%q')\", idx.c_str());\n\t\t\t\tm_mainworker.m_cameras.ReloadCameras();\n\t\t\t}\n\t\t\telse if (cparam == \"testnotification\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string notification_Title = \"Domoticz test\";\n\t\t\t\tstd::string notification_Message = \"Domoticz test message!\";\n\t\t\t\tstd::string subsystem = request::findValue(&req, \"subsystem\");\n\n\t\t\t\tstd::string extraData = request::findValue(&req, \"extradata\");\n\n\t\t\t\tm_notifications.ConfigFromGetvars(req, false);\n\t\t\t\tif (m_notifications.SendMessage(0, std::string(\"\"), subsystem, notification_Title, notification_Message, extraData, 1, std::string(\"\"), false)) {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t}\n\t\t\t\t/* we need to reload the config, because the values that were set were only for testing */\n\t\t\t\tm_notifications.LoadConfig();\n\t\t\t}\n\t\t\telse if (cparam == \"testswitch\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string hwdid = request::findValue(&req, \"hwdid\");\n\t\t\t\tstd::string sswitchtype = request::findValue(&req, \"switchtype\");\n\t\t\t\tstd::string slighttype = request::findValue(&req, \"lighttype\");\n\n\t\t\t\tif (\n\t\t\t\t\t(hwdid.empty()) ||\n\t\t\t\t\t(sswitchtype.empty()) ||\n\t\t\t\t\t(slighttype.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sswitchtype.c_str());\n\t\t\t\tint lighttype = atoi(slighttype.c_str());\n\t\t\t\tint dtype;\n\t\t\t\tint subtype = 0;\n\t\t\t\tstd::string sunitcode;\n\t\t\t\tstd::string devid;\n\n\t\t\t\tif (lighttype == 70)\n\t\t\t\t{\n\t\t\t\t\t//EnOcean (Lighting2 with Base_ID offset)\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = sTypeAC;\n\t\t\t\t\tstd::string sgroupcode = request::findValue(&req, \"groupcode\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tint iUnitTest = atoi(sunitcode.c_str());\t//only First Rocker_ID at the moment, gives us 128 devices we can control, should be enough!\n\t\t\t\t\tif (\n\t\t\t\t\t\t(sunitcode.empty()) ||\n\t\t\t\t\t\t(sgroupcode.empty()) ||\n\t\t\t\t\t\t((iUnitTest < 1) || (iUnitTest > 128))\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tsunitcode = sgroupcode;//Button A or B\n\t\t\t\t\tCDomoticzHardwareBase *pBaseHardware = reinterpret_cast<CDomoticzHardwareBase*>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\t\t\t\t\tif (pBaseHardware == NULL)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif ((pBaseHardware->HwdType != HTYPE_EnOceanESP2) && (pBaseHardware->HwdType != HTYPE_EnOceanESP3)\n\t\t\t\t\t\t&& (pBaseHardware->HwdType != HTYPE_USBtinGateway) )\n\t\t\t\t\t\treturn;\n\t\t\t\t\tunsigned long rID = 0;\n\t\t\t\t\tif (pBaseHardware->HwdType == HTYPE_EnOceanESP2)\n\t\t\t\t\t{\n\t\t\t\t\t\tCEnOceanESP2 *pEnoceanHardware = reinterpret_cast<CEnOceanESP2 *>(pBaseHardware);\n\t\t\t\t\t\trID = pEnoceanHardware->m_id_base + iUnitTest;\n\t\t\t\t\t}\n\t\t\t\t\telse if (pBaseHardware->HwdType == HTYPE_EnOceanESP3)\n\t\t\t\t\t{\n\t\t\t\t\t\tCEnOceanESP3 *pEnoceanHardware = reinterpret_cast<CEnOceanESP3 *>(pBaseHardware);\n\t\t\t\t\t\trID = pEnoceanHardware->m_id_base + iUnitTest;\n\t\t\t\t\t}\n\t\t\t\t\telse if (pBaseHardware->HwdType == HTYPE_USBtinGateway) //Like EnOcean (Lighting2 with Base_ID offset)\n\t\t\t\t\t{\n\t\t\t\t\t\tUSBtin *pUSBtinHardware = reinterpret_cast<USBtin *>(pBaseHardware);\n\t\t\t\t\t\t//base ID calculate in the USBtinharwade dependant of the CAN Layer !\n\t\t\t\t\t\t//for exemple see MultiblocV8 layer...\n\t\t\t\t\t\trID = pUSBtinHardware->switch_id_base;\n\t\t\t\t\t\tstd::stringstream ssunitcode;\n\t\t\t\t\t\tssunitcode << iUnitTest;\n\t\t\t\t\t\tsunitcode = ssunitcode.str();\n\t\t\t\t\t}\n\t\t\t\t\t//convert to hex, and we have our ID\n\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\ts_strid << std::hex << std::uppercase << rID;\n\t\t\t\t\tdevid = s_strid.str();\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 68)\n\t\t\t\t{\n#ifdef WITH_GPIO\n\t\t\t\t\tdtype = pTypeLighting1;\n\t\t\t\t\tsubtype = sTypeIMPULS;\n\t\t\t\t\tdevid = \"0\";\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\"); //Unit code = GPIO number\n\n\t\t\t\t\tif (sunitcode.empty()) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"No GPIO number given\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tCGpio *pGpio = reinterpret_cast<CGpio *>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\t\t\t\t\tif (pGpio == NULL) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Could not retrieve GPIO hardware pointer\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (pGpio->HwdType != HTYPE_RaspberryGPIO) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Given hardware is not GPIO\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tCGpioPin *pPin = CGpio::GetPPinById(atoi(sunitcode.c_str()));\n\t\t\t\t\tif (pPin == NULL) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Given pin does not exist on this GPIO hardware\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (pPin->GetIsInput()) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Given pin is not configured for output\";\n\t\t\t\t\t\treturn;\n\t\t\t}\n#else\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"message\"] = \"GPIO support is disabled\";\n\t\t\t\t\treturn;\n#endif\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 69)\n\t\t\t\t{\n#ifdef WITH_GPIO\n\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\"); // sysfs-gpio number\n\t\t\t\t\tint unitcode = atoi(sunitcode.c_str());\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = sTypeAC;\n\t\t\t\t\tstd::string sswitchtype = request::findValue(&req, \"switchtype\");\n\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sswitchtype.c_str());\n\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tif ((id.empty()) || (sunitcode.empty()))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdevid = id;\n\n\t\t\t\t\tif (sunitcode.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"No GPIO number given\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tCSysfsGpio *pSysfsGpio = reinterpret_cast<CSysfsGpio *>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\n\t\t\t\t\tif (pSysfsGpio == NULL) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Could not retrieve SysfsGpio hardware pointer\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pSysfsGpio->HwdType != HTYPE_SysfsGpio) {\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"Given hardware is not SysfsGpio\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n#else\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"message\"] = \"GPIO support is disabled\";\n\t\t\t\t\treturn;\n#endif\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 20)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting1;\n\t\t\t\t\tsubtype = lighttype;\n\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = shousecode;\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 30)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = lighttype - 20;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 70)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting5;\n\t\t\t\t\tsubtype = lighttype - 50;\n\t\t\t\t\tif (lighttype == 59)\n\t\t\t\t\t\tsubtype = sTypeIT;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif ((subtype != sTypeEMW100) && (subtype != sTypeLivolo) && (subtype != sTypeLivolo1to10) && (subtype != sTypeRGB432W) && (subtype != sTypeIT))\n\t\t\t\t\t\tdevid = \"00\" + id;\n\t\t\t\t\telse\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (lighttype == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Chime/ByronSX\n\t\t\t\t\t\tdtype = pTypeChime;\n\t\t\t\t\t\tsubtype = sTypeByronSX;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str()) - 1;\n\t\t\t\t\t\tswitch (iUnitCode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tiUnitCode = chime_sound0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tiUnitCode = chime_sound1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tiUnitCode = chime_sound2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tiUnitCode = chime_sound3;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\tiUnitCode = chime_sound4;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\tiUnitCode = chime_sound5;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\tiUnitCode = chime_sound6;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\tiUnitCode = chime_sound7;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 101)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Curtain Harrison\n\t\t\t\t\t\tdtype = pTypeCurtain;\n\t\t\t\t\t\tsubtype = sTypeHarrison;\n\t\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = shousecode;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 102)\n\t\t\t\t\t{\n\t\t\t\t\t\t//RFY\n\t\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\t\tsubtype = sTypeRFY;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 103)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Meiantech\n\t\t\t\t\t\tdtype = pTypeSecurity1;\n\t\t\t\t\t\tsubtype = sTypeMeiantech;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 104)\n\t\t\t\t\t{\n\t\t\t\t\t\t//HE105\n\t\t\t\t\t\tdtype = pTypeThermostat2;\n\t\t\t\t\t\tsubtype = sTypeHE105;\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (sunitcode.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t//convert to hex, and we have our Unit Code\n\t\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\t\ts_strid << std::hex << std::uppercase << sunitcode;\n\t\t\t\t\t\tint iUnitCode;\n\t\t\t\t\t\ts_strid >> iUnitCode;\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tdevid = \"1\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 105)\n\t\t\t\t\t{\n\t\t\t\t\t\t//ASA\n\t\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\t\tsubtype = sTypeASA;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 106)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Blyss\n\t\t\t\t\t\tdtype = pTypeLighting6;\n\t\t\t\t\t\tsubtype = sTypeBlyss;\n\t\t\t\t\t\tstd::string sgroupcode = request::findValue(&req, \"groupcode\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(sgroupcode.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty()) ||\n\t\t\t\t\t\t\t(id.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id + sgroupcode;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 107)\n\t\t\t\t\t{\n\t\t\t\t\t\t//RFY2\n\t\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\t\tsubtype = sTypeRFY2;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if ((lighttype >= 200) && (lighttype < 300))\n\t\t\t\t\t{\n\t\t\t\t\t\tdtype = pTypeBlinds;\n\t\t\t\t\t\tsubtype = lighttype - 200;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str());\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 301)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Smartwares Radiator\n\t\t\t\t\t\tdtype = pTypeRadiator1;\n\t\t\t\t\t\tsubtype = sTypeSmartwaresSwitchRadiator;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 302)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Home Confort\n\t\t\t\t\t\tdtype = pTypeHomeConfort;\n\t\t\t\t\t\tsubtype = sTypeHomeConfortTEL010;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\n\t\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str());\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tsprintf(szTmp, \"%02X\", atoi(shousecode.c_str()));\n\t\t\t\t\t\tshousecode = szTmp;\n\t\t\t\t\t\tdevid = id + shousecode;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 303)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Selector Switch\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchTypeSelector;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 304)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Itho CVE RFT\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeItho;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 305)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Lucci Air/DC\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeLucciAir;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 306)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Lucci Air DC\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeLucciAirDC;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 307)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Westinghouse\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeWestinghouse;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 400) {\n\t\t\t\t\t\t//Openwebnet Bus Blinds\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchBlindsT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 401) {\n\t\t\t\t\t\t//Openwebnet Bus Lights\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchLightT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 402)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Bus Auxiliary\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchAuxiliaryT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 403) {\n\t\t\t\t\t\t//Openwebnet Zigbee Blinds\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchBlindsT2;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 404) {\n\t\t\t\t\t\t//Light Openwebnet Zigbee\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchLightT2;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if ((lighttype == 405) || (lighttype == 406)) {\n\t\t\t\t\t\t// Openwebnet Dry Contact / IR Detection\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchContactT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// ----------- If needed convert to GeneralSwitch type (for o.a. RFlink) -----------\n\t\t\t\tCDomoticzHardwareBase *pBaseHardware = reinterpret_cast<CDomoticzHardwareBase*>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\t\t\t\tif (pBaseHardware != NULL)\n\t\t\t\t{\n\t\t\t\t\tif ((pBaseHardware->HwdType == HTYPE_RFLINKUSB) || (pBaseHardware->HwdType == HTYPE_RFLINKTCP)) {\n\t\t\t\t\t\tConvertToGeneralSwitchType(devid, dtype, subtype);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// -----------------------------------------------\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"message\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"TestSwitch\";\n\t\t\t\tstd::vector<std::string> sd;\n\n\t\t\t\tsd.push_back(hwdid);\n\t\t\t\tsd.push_back(devid);\n\t\t\t\tsd.push_back(sunitcode);\n\t\t\t\tsprintf(szTmp, \"%d\", dtype);\n\t\t\t\tsd.push_back(szTmp);\n\t\t\t\tsprintf(szTmp, \"%d\", subtype);\n\t\t\t\tsd.push_back(szTmp);\n\t\t\t\tsprintf(szTmp, \"%d\", switchtype);\n\t\t\t\tsd.push_back(szTmp);\n\t\t\t\tsd.push_back(\"\"); //AddjValue2\n\t\t\t\tsd.push_back(\"\"); //nValue\n\t\t\t\tsd.push_back(\"\"); //sValue\n\t\t\t\tsd.push_back(\"\"); //Name\n\t\t\t\tsd.push_back(\"\"); //Options\n\n\t\t\t\tstd::string switchcmd = \"On\";\n\t\t\t\tint level = 0;\n\t\t\t\tif (lighttype == 70)\n\t\t\t\t{\n\t\t\t\t\t//Special EnOcean case, if it is a dimmer, set a dim value\n\t\t\t\t\tif (switchtype == STYPE_Dimmer)\n\t\t\t\t\t\tlevel = 5;\n\t\t\t\t}\n\t\t\t\tm_mainworker.SwitchLightInt(sd, switchcmd, level, NoColor, true);\n\t\t\t}\n\t\t\telse if (cparam == \"addswitch\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string hwdid = request::findValue(&req, \"hwdid\");\n\t\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\t\tstd::string sswitchtype = request::findValue(&req, \"switchtype\");\n\t\t\t\tstd::string slighttype = request::findValue(&req, \"lighttype\");\n\t\t\t\tstd::string maindeviceidx = request::findValue(&req, \"maindeviceidx\");\n\t\t\t\tstd::string deviceoptions;\n\n\t\t\t\tif (\n\t\t\t\t\t(hwdid.empty()) ||\n\t\t\t\t\t(sswitchtype.empty()) ||\n\t\t\t\t\t(slighttype.empty()) ||\n\t\t\t\t\t(name.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sswitchtype.c_str());\n\t\t\t\tint lighttype = atoi(slighttype.c_str());\n\t\t\t\tint dtype = 0;\n\t\t\t\tint subtype = 0;\n\t\t\t\tstd::string sunitcode;\n\t\t\t\tstd::string devid;\n\n#ifdef ENABLE_PYTHON\n\t\t\t\t//check if HW is plugin\n\t\t\t\t{\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Type FROM Hardware WHERE (ID == '%q')\", hwdid.c_str());\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\t_eHardwareTypes Type = (_eHardwareTypes)atoi(sd[0].c_str());\n\t\t\t\t\t\tif (Type == HTYPE_PythonPlugin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Not allowed to add device to plugin HW (plugin framework does not use key column \"ID\" but instead uses column \"unit\" as key)\n\t\t\t\t\t\t\t_log.Log(LOG_ERROR, \"CWebServer::HandleCommand addswitch: Not allowed to add device owned by plugin %u!\", atoi(hwdid.c_str()));\n\t\t\t\t\t\t\troot[\"message\"] = \"Not allowed to add switch to plugin HW!\";\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\n\t\t\t\tif (lighttype == 70)\n\t\t\t\t{\n\t\t\t\t\t//EnOcean (Lighting2 with Base_ID offset)\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = sTypeAC;\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tstd::string sgroupcode = request::findValue(&req, \"groupcode\");\n\t\t\t\t\tint iUnitTest = atoi(sunitcode.c_str());\t//gives us 128 devices we can control, should be enough!\n\t\t\t\t\tif (\n\t\t\t\t\t\t(sunitcode.empty()) ||\n\t\t\t\t\t\t(sgroupcode.empty()) ||\n\t\t\t\t\t\t((iUnitTest < 1) || (iUnitTest > 128))\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tsunitcode = sgroupcode;//Button A/B\n\t\t\t\t\tCDomoticzHardwareBase *pBaseHardware = reinterpret_cast<CDomoticzHardwareBase*>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\t\t\t\t\tif (pBaseHardware == NULL)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif ((pBaseHardware->HwdType != HTYPE_EnOceanESP2) && (pBaseHardware->HwdType != HTYPE_EnOceanESP3)\n\t\t\t\t\t\t&& (pBaseHardware->HwdType != HTYPE_USBtinGateway) )\n\t\t\t\t\t\treturn;\n\t\t\t\t\tunsigned long rID = 0;\n\t\t\t\t\tif (pBaseHardware->HwdType == HTYPE_EnOceanESP2)\n\t\t\t\t\t{\n\t\t\t\t\t\tCEnOceanESP2 *pEnoceanHardware = reinterpret_cast<CEnOceanESP2*>(pBaseHardware);\n\t\t\t\t\t\tif (pEnoceanHardware->m_id_base == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"message\"] = \"BaseID not found, is the hardware running?\";\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trID = pEnoceanHardware->m_id_base + iUnitTest;\n\t\t\t\t\t}\n\t\t\t\t\telse if (pBaseHardware->HwdType == HTYPE_EnOceanESP3)\n\t\t\t\t\t{\n\t\t\t\t\t\tCEnOceanESP3 *pEnoceanHardware = reinterpret_cast<CEnOceanESP3*>(pBaseHardware);\n\t\t\t\t\t\tif (pEnoceanHardware->m_id_base == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"message\"] = \"BaseID not found, is the hardware running?\";\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trID = pEnoceanHardware->m_id_base + iUnitTest;\n\t\t\t\t\t}\n\t\t\t\t\telse if (pBaseHardware->HwdType == HTYPE_USBtinGateway)\n\t\t\t\t\t{\n\t\t\t\t\t\tUSBtin *pUSBtinHardware = reinterpret_cast<USBtin *>(pBaseHardware);\n\t\t\t\t\t\trID = pUSBtinHardware->switch_id_base;\n\t\t\t\t\t\tstd::stringstream ssunitcode;\n\t\t\t\t\t\tssunitcode << iUnitTest;\n\t\t\t\t\t\tsunitcode = ssunitcode.str();\n\t\t\t\t\t}\n\t\t\t\t\t//convert to hex, and we have our ID\n\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\ts_strid << std::hex << std::uppercase << rID;\n\t\t\t\t\tdevid = s_strid.str();\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 68)\n\t\t\t\t{\n#ifdef WITH_GPIO\n\t\t\t\t\tdtype = pTypeLighting1;\n\t\t\t\t\tsubtype = sTypeIMPULS;\n\t\t\t\t\tdevid = \"0\";\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\"); //Unit code = GPIO number\n\n\t\t\t\t\tif (sunitcode.empty()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tCGpio *pGpio = reinterpret_cast<CGpio *>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\t\t\t\t\tif (pGpio == NULL) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (pGpio->HwdType != HTYPE_RaspberryGPIO) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tCGpioPin *pPin = CGpio::GetPPinById(atoi(sunitcode.c_str()));\n\t\t\t\t\tif (pPin == NULL) {\n\t\t\t\t\t\treturn;\n\t\t\t}\n#else\n\t\t\t\t\treturn;\n#endif\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 69)\n\t\t\t\t{\n#ifdef WITH_GPIO\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = sTypeAC;\n\t\t\t\t\tdevid = \"0\";\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\"); // sysfs-gpio number\n\t\t\t\t\tint unitcode = atoi(sunitcode.c_str());\n\t\t\t\t\tstd::string sswitchtype = request::findValue(&req, \"switchtype\");\n\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sswitchtype.c_str());\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tCSysfsGpio::RequestDbUpdate(unitcode);\n\n\t\t\t\t\tif ((id.empty()) || (sunitcode.empty()))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdevid = id;\n\n\t\t\t\t\tCSysfsGpio *pSysfsGpio = reinterpret_cast<CSysfsGpio *>(m_mainworker.GetHardware(atoi(hwdid.c_str())));\n\n\t\t\t\t\tif ((pSysfsGpio == NULL) || (pSysfsGpio->HwdType != HTYPE_SysfsGpio))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n#else\n\t\t\t\t\treturn;\n#endif\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 20)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting1;\n\t\t\t\t\tsubtype = lighttype;\n\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = shousecode;\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 30)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting2;\n\t\t\t\t\tsubtype = lighttype - 20;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse if (lighttype < 70)\n\t\t\t\t{\n\t\t\t\t\tdtype = pTypeLighting5;\n\t\t\t\t\tsubtype = lighttype - 50;\n\t\t\t\t\tif (lighttype == 59)\n\t\t\t\t\t\tsubtype = sTypeIT;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif ((subtype != sTypeEMW100) && (subtype != sTypeLivolo) && (subtype != sTypeLivolo1to10) && (subtype != sTypeRGB432W) && (subtype != sTypeLightwaveRF) && (subtype != sTypeIT))\n\t\t\t\t\t\tdevid = \"00\" + id;\n\t\t\t\t\telse\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 101)\n\t\t\t\t{\n\t\t\t\t\t//Curtain Harrison\n\t\t\t\t\tdtype = pTypeCurtain;\n\t\t\t\t\tsubtype = sTypeHarrison;\n\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = shousecode;\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 102)\n\t\t\t\t{\n\t\t\t\t\t//RFY\n\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\tsubtype = sTypeRFY;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 103)\n\t\t\t\t{\n\t\t\t\t\t//Meiantech\n\t\t\t\t\tdtype = pTypeSecurity1;\n\t\t\t\t\tsubtype = sTypeMeiantech;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 104)\n\t\t\t\t{\n\t\t\t\t\t//HE105\n\t\t\t\t\tdtype = pTypeThermostat2;\n\t\t\t\t\tsubtype = sTypeHE105;\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (sunitcode.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\t//convert to hex, and we have our Unit Code\n\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\ts_strid << std::hex << std::uppercase << sunitcode;\n\t\t\t\t\tint iUnitCode;\n\t\t\t\t\ts_strid >> iUnitCode;\n\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\tdevid = \"1\";\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 105)\n\t\t\t\t{\n\t\t\t\t\t//ASA\n\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\tsubtype = sTypeASA;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 106)\n\t\t\t\t{\n\t\t\t\t\t//Blyss\n\t\t\t\t\tdtype = pTypeLighting6;\n\t\t\t\t\tsubtype = sTypeBlyss;\n\t\t\t\t\tstd::string sgroupcode = request::findValue(&req, \"groupcode\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(sgroupcode.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty()) ||\n\t\t\t\t\t\t(id.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id + sgroupcode;\n\t\t\t\t}\n\t\t\t\telse if (lighttype == 107)\n\t\t\t\t{\n\t\t\t\t\t//RFY2\n\t\t\t\t\tdtype = pTypeRFY;\n\t\t\t\t\tsubtype = sTypeRFY2;\n\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\tif (\n\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tdevid = id;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (lighttype == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Chime/ByronSX\n\t\t\t\t\t\tdtype = pTypeChime;\n\t\t\t\t\t\tsubtype = sTypeByronSX;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str()) - 1;\n\t\t\t\t\t\tswitch (iUnitCode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tiUnitCode = chime_sound0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tiUnitCode = chime_sound1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tiUnitCode = chime_sound2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tiUnitCode = chime_sound3;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\tiUnitCode = chime_sound4;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\tiUnitCode = chime_sound5;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\tiUnitCode = chime_sound6;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\tiUnitCode = chime_sound7;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if ((lighttype >= 200) && (lighttype < 300))\n\t\t\t\t\t{\n\t\t\t\t\t\tdtype = pTypeBlinds;\n\t\t\t\t\t\tsubtype = lighttype - 200;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str());\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 301)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Smartwares Radiator\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\n\t\t\t\t\t\t//For this device, we will also need to add a Radiator type, do that first\n\t\t\t\t\t\tdtype = pTypeRadiator1;\n\t\t\t\t\t\tsubtype = sTypeSmartwares;\n\n\t\t\t\t\t\t//check if switch is unique\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Name FROM DeviceStatus WHERE (HardwareID=='%q' AND DeviceID=='%q' AND Unit=='%q' AND Type==%d AND SubType==%d)\",\n\t\t\t\t\t\t\thwdid.c_str(), devid.c_str(), sunitcode.c_str(), dtype, subtype);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"message\"] = \"Switch already exists!\";\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbool bActEnabledState = m_sql.m_bAcceptNewHardware;\n\t\t\t\t\t\tm_sql.m_bAcceptNewHardware = true;\n\t\t\t\t\t\tstd::string devname;\n\t\t\t\t\t\tm_sql.UpdateValue(atoi(hwdid.c_str()), devid.c_str(), atoi(sunitcode.c_str()), dtype, subtype, 0, -1, 0, \"20.5\", devname);\n\t\t\t\t\t\tm_sql.m_bAcceptNewHardware = bActEnabledState;\n\n\t\t\t\t\t\t//set name and switchtype\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT ID FROM DeviceStatus WHERE (HardwareID=='%q' AND DeviceID=='%q' AND Unit=='%q' AND Type==%d AND SubType==%d)\",\n\t\t\t\t\t\t\thwdid.c_str(), devid.c_str(), sunitcode.c_str(), dtype, subtype);\n\t\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"message\"] = \"Error finding switch in Database!?!?\";\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstd::string ID = result[0][0];\n\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"UPDATE DeviceStatus SET Used=1, Name='%q', SwitchType=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\t\tname.c_str(), switchtype, ID.c_str());\n\n\t\t\t\t\t\t//Now continue to insert the switch\n\t\t\t\t\t\tdtype = pTypeRadiator1;\n\t\t\t\t\t\tsubtype = sTypeSmartwaresSwitchRadiator;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 302)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Home Confort\n\t\t\t\t\t\tdtype = pTypeHomeConfort;\n\t\t\t\t\t\tsubtype = sTypeHomeConfortTEL010;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\n\t\t\t\t\t\tstd::string shousecode = request::findValue(&req, \"housecode\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(shousecode.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tint iUnitCode = atoi(sunitcode.c_str());\n\t\t\t\t\t\tsprintf(szTmp, \"%d\", iUnitCode);\n\t\t\t\t\t\tsunitcode = szTmp;\n\t\t\t\t\t\tsprintf(szTmp, \"%02X\", atoi(shousecode.c_str()));\n\t\t\t\t\t\tshousecode = szTmp;\n\t\t\t\t\t\tdevid = id + shousecode;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 303)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Selector Switch\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchTypeSelector;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(id.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = \"0\" + id;\n\t\t\t\t\t\tswitchtype = STYPE_Selector;\n\t\t\t\t\t\tif (!deviceoptions.empty()) {\n\t\t\t\t\t\t\tdeviceoptions.append(\";\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeviceoptions.append(\"SelectorStyle:0;LevelNames:Off|Level1|Level2|Level3\");\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 304)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Itho CVE RFT\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeItho;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 305)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Lucci Air\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeLucciAir;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 306)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Lucci Air DC\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeLucciAirDC;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 307)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Westinghouse\n\t\t\t\t\t\tdtype = pTypeFan;\n\t\t\t\t\t\tsubtype = sTypeWestinghouse;\n\t\t\t\t\t\tstd::string id = request::findValue(&req, \"id\");\n\t\t\t\t\t\tif (id.empty())\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdevid = id;\n\t\t\t\t\t\tsunitcode = \"0\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 400)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Bus Blinds\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchBlindsT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 401)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Bus Lights\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchLightT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 402)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Bus Auxiliary\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchAuxiliaryT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 403)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Zigbee Blinds\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchBlindsT2;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lighttype == 404)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Zigbee Lights\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchLightT2;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if ((lighttype == 405) || (lighttype == 406))\n\t\t\t\t\t{\n\t\t\t\t\t\t//Openwebnet Dry Contact / IR Detection\n\t\t\t\t\t\tdtype = pTypeGeneralSwitch;\n\t\t\t\t\t\tsubtype = sSwitchContactT1;\n\t\t\t\t\t\tdevid = request::findValue(&req, \"id\");\n\t\t\t\t\t\tsunitcode = request::findValue(&req, \"unitcode\");\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(devid.empty()) ||\n\t\t\t\t\t\t\t(sunitcode.empty())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//check if switch is unique\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"SELECT Name FROM DeviceStatus WHERE (HardwareID=='%q' AND DeviceID=='%q' AND Unit=='%q' AND Type==%d AND SubType==%d)\",\n\t\t\t\t\thwdid.c_str(), devid.c_str(), sunitcode.c_str(), dtype, subtype);\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\troot[\"message\"] = \"Switch already exists!\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// ----------- If needed convert to GeneralSwitch type (for o.a. RFlink) -----------\n\t\t\t\tCDomoticzHardwareBase *pBaseHardware = m_mainworker.GetHardware(atoi(hwdid.c_str()));\n\t\t\t\tif (pBaseHardware != NULL)\n\t\t\t\t{\n\t\t\t\t\tif ((pBaseHardware->HwdType == HTYPE_RFLINKUSB) || (pBaseHardware->HwdType == HTYPE_RFLINKTCP)) {\n\t\t\t\t\t\tConvertToGeneralSwitchType(devid, dtype, subtype);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// -----------------------------------------------\n\n\t\t\t\tbool bActEnabledState = m_sql.m_bAcceptNewHardware;\n\t\t\t\tm_sql.m_bAcceptNewHardware = true;\n\t\t\t\tstd::string devname;\n\t\t\t\tm_sql.UpdateValue(atoi(hwdid.c_str()), devid.c_str(), atoi(sunitcode.c_str()), dtype, subtype, 0, -1, 0, devname);\n\t\t\t\tm_sql.m_bAcceptNewHardware = bActEnabledState;\n\n\t\t\t\t//set name and switchtype\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"SELECT ID FROM DeviceStatus WHERE (HardwareID=='%q' AND DeviceID=='%q' AND Unit=='%q' AND Type==%d AND SubType==%d)\",\n\t\t\t\t\thwdid.c_str(), devid.c_str(), sunitcode.c_str(), dtype, subtype);\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\troot[\"message\"] = \"Error finding switch in Database!?!?\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstd::string ID = result[0][0];\n\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE DeviceStatus SET Used=1, Name='%q', SwitchType=%d WHERE (ID == '%q')\",\n\t\t\t\t\tname.c_str(), switchtype, ID.c_str());\n\t\t\t\tm_mainworker.m_eventsystem.GetCurrentStates();\n\n\t\t\t\t//Set device options\n\t\t\t\tm_sql.SetDeviceOptions(atoi(ID.c_str()), m_sql.BuildDeviceOptions(deviceoptions, false));\n\n\t\t\t\tif (maindeviceidx != \"\")\n\t\t\t\t{\n\t\t\t\t\tif (maindeviceidx != ID)\n\t\t\t\t\t{\n\t\t\t\t\t\t//this is a sub device for another light/switch\n\t\t\t\t\t\t//first check if it is not already a sub device\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q') AND (ParentID =='%q')\",\n\t\t\t\t\t\t\tID.c_str(), maindeviceidx.c_str());\n\t\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//no it is not, add it\n\t\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\t\"INSERT INTO LightSubDevices (DeviceRowID, ParentID) VALUES ('%q','%q')\",\n\t\t\t\t\t\t\t\tID.c_str(),\n\t\t\t\t\t\t\t\tmaindeviceidx.c_str()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"AddSwitch\";\n\t\t\t}\n\t\t\telse if (cparam == \"getnotificationtypes\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\t//First get Device Type/SubType\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType, SwitchType FROM DeviceStatus WHERE (ID == '%q')\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetNotificationTypes\";\n\t\t\t\tunsigned char dType = atoi(result[0][0].c_str());\n\t\t\t\tunsigned char dSubType = atoi(result[0][1].c_str());\n\t\t\t\tunsigned char switchtype = atoi(result[0][2].c_str());\n\n\t\t\t\tint ii = 0;\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeLighting1) ||\n\t\t\t\t\t(dType == pTypeLighting2) ||\n\t\t\t\t\t(dType == pTypeLighting3) ||\n\t\t\t\t\t(dType == pTypeLighting4) ||\n\t\t\t\t\t(dType == pTypeLighting5) ||\n\t\t\t\t\t(dType == pTypeLighting6) ||\n\t\t\t\t\t(dType == pTypeColorSwitch) ||\n\t\t\t\t\t(dType == pTypeSecurity1) ||\n\t\t\t\t\t(dType == pTypeSecurity2) ||\n\t\t\t\t\t(dType == pTypeEvohome) ||\n\t\t\t\t\t(dType == pTypeEvohomeRelay) ||\n\t\t\t\t\t(dType == pTypeCurtain) ||\n\t\t\t\t\t(dType == pTypeBlinds) ||\n\t\t\t\t\t(dType == pTypeRFY) ||\n\t\t\t\t\t(dType == pTypeChime) ||\n\t\t\t\t\t(dType == pTypeThermostat2) ||\n\t\t\t\t\t(dType == pTypeThermostat3) ||\n\t\t\t\t\t(dType == pTypeThermostat4) ||\n\t\t\t\t\t(dType == pTypeRemote) ||\n\t\t\t\t\t(dType == pTypeGeneralSwitch) ||\n\t\t\t\t\t(dType == pTypeHomeConfort) ||\n\t\t\t\t\t(dType == pTypeFS20) ||\n\t\t\t\t\t((dType == pTypeRadiator1) && (dSubType == sTypeSmartwaresSwitchRadiator))\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tif (switchtype != STYPE_PushOff)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_SWITCH_ON;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_SWITCH_ON, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_SWITCH_ON, 1);\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\tif (switchtype != STYPE_PushOn)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_SWITCH_OFF;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_SWITCH_OFF, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_SWITCH_OFF, 1);\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\tif (switchtype == STYPE_Media)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT HardwareID FROM DeviceStatus WHERE (ID=='%q')\", idx.c_str());\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string hdwid = result[0][0];\n\t\t\t\t\t\t\tCDomoticzHardwareBase *pBaseHardware = reinterpret_cast<CDomoticzHardwareBase*>(m_mainworker.GetHardware(atoi(hdwid.c_str())));\n\t\t\t\t\t\t\tif (pBaseHardware != NULL) {\n\t\t\t\t\t\t\t\t_eHardwareTypes type = pBaseHardware->HwdType;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_PAUSED;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_PAUSED, 0);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_PAUSED, 1);\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\tif (type == HTYPE_Kodi) {\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AUDIO;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AUDIO, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AUDIO, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_VIDEO;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_VIDEO, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_VIDEO, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_PHOTO;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_PHOTO, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_PHOTO, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (type == HTYPE_LogitechMediaServer) {\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_PLAYING;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_PLAYING, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_PLAYING, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_STOPPED;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_STOPPED, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_STOPPED, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (type == HTYPE_HEOS) {\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_PLAYING;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_PLAYING, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_PLAYING, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_STOPPED;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_STOPPED, 0);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_STOPPED, 1);\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(\n\t\t\t\t\t(dType == pTypeTEMP) ||\n\t\t\t\t\t\t(dType == pTypeTEMP_HUM) ||\n\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t(dType == pTypeEvohomeZone) ||\n\t\t\t\t\t\t(dType == pTypeEvohomeWater) ||\n\t\t\t\t\t\t(dType == pTypeThermostat1) ||\n\t\t\t\t\t\t(dType == pTypeRego6XXTemp) ||\n\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp))\n\t\t\t\t\t\t) ||\n\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp)) ||\n\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSystemTemp))\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TEMPERATURE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TEMPERATURE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TEMPERATURE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeHUM) ||\n\t\t\t\t\t(dType == pTypeTEMP_HUM) ||\n\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_HUMIDITY;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_HUMIDITY, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_HUMIDITY, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeTEMP_HUM) ||\n\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_DEWPOINT;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_DEWPOINT, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_DEWPOINT, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeRAIN)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_RAIN;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_RAIN, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_RAIN, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeWIND)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_WIND;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_WIND, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_WIND, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeUV)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_UV;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_UV, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_UV, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t(dType == pTypeBARO) ||\n\t\t\t\t\t(dType == pTypeTEMP_BARO)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_BARO;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_BARO, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_BARO, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t((dType == pTypeRFXMeter) && (dSubType == sTypeRFXMeterCount)) ||\n\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCounterIncremental)) ||\n\t\t\t\t\t(dType == pTypeYouLess) ||\n\t\t\t\t\t((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXCounter))\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tif ((switchtype == MTYPE_ENERGY) || (switchtype == MTYPE_ENERGY_GENERATED))\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYENERGY;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYENERGY, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYENERGY, 1);\n\t\t\t\t\t}\n\t\t\t\t\telse if (switchtype == MTYPE_GAS)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYGAS;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 1);\n\t\t\t\t\t}\n\t\t\t\t\telse if (switchtype == MTYPE_COUNTER)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYCOUNTER;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYCOUNTER, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYCOUNTER, 1);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//water (same as gas)\n\t\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYGAS;\n\t\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 0);\n\t\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 1);\n\t\t\t\t\t}\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeYouLess)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeAirQuality)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\telse if ((dType == pTypeGeneral) && ((dSubType == sTypeSoilMoisture) || (dSubType == sTypeLeafWetness)))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeVisibility))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeDistance))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeVoltage))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypePressure))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeLux)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeWEIGHT)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeUsage)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeENERGY) ||\n\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeKwh))\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypePOWER)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeCURRENT) && (dSubType == sTypeELEC1))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE1;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE1, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE1, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE2;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE2, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE2, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE3;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE3, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE3, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeCURRENTENERGY) && (dSubType == sTypeELEC4))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE1;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE1, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE1, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE2;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE2, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE2, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_AMPERE3;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_AMPERE3, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_AMPERE3, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYENERGY;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYENERGY, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYENERGY, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeP1Gas)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TODAYGAS;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TODAYGAS, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TEMPERATURE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_TEMPERATURE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_TEMPERATURE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (dType == pTypeEvohomeZone)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_TEMPERATURE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_SETPOINT, 0); //FIXME NTYPE_SETPOINT implementation?\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_SETPOINT, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeRFXSensor) && ((dSubType == sTypeRFXSensorAD) || (dSubType == sTypeRFXSensorVolt)))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypePercentage))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_PERCENTAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_PERCENTAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_PERCENTAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeWaterflow))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeCustom))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeFan))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_RPM;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_RPM, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_RPM, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeAlert))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_USAGE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_USAGE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_USAGE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeZWaveAlarm))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_VALUE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_VALUE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_VALUE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif ((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXStatus))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_SWITCH_ON;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_SWITCH_ON, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_SWITCH_ON, 1);\n\t\t\t\t\tii++;\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_SWITCH_OFF;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_SWITCH_OFF, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_SWITCH_OFF, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tif (!IsLightOrSwitch(dType, dSubType))\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"val\"] = NTYPE_LASTUPDATE;\n\t\t\t\t\troot[\"result\"][ii][\"text\"] = Notification_Type_Desc(NTYPE_LASTUPDATE, 0);\n\t\t\t\t\troot[\"result\"][ii][\"ptag\"] = Notification_Type_Desc(NTYPE_LASTUPDATE, 1);\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"addnotification\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string stype = request::findValue(&req, \"ttype\");\n\t\t\t\tstd::string swhen = request::findValue(&req, \"twhen\");\n\t\t\t\tstd::string svalue = request::findValue(&req, \"tvalue\");\n\t\t\t\tstd::string scustommessage = request::findValue(&req, \"tmsg\");\n\t\t\t\tstd::string sactivesystems = request::findValue(&req, \"tsystems\");\n\t\t\t\tstd::string spriority = request::findValue(&req, \"tpriority\");\n\t\t\t\tstd::string ssendalways = request::findValue(&req, \"tsendalways\");\n\t\t\t\tstd::string srecovery = (request::findValue(&req, \"trecovery\") == \"true\") ? \"1\" : \"0\";\n\n\t\t\t\tif ((stype.empty()) || (swhen.empty()) || (svalue.empty()) || (spriority.empty()) || (ssendalways.empty()) || (srecovery.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\t_eNotificationTypes ntype = (_eNotificationTypes)atoi(stype.c_str());\n\t\t\t\tstd::string ttype = Notification_Type_Desc(ntype, 1);\n\t\t\t\tif (\n\t\t\t\t\t(ntype == NTYPE_SWITCH_ON) ||\n\t\t\t\t\t(ntype == NTYPE_SWITCH_OFF) ||\n\t\t\t\t\t(ntype == NTYPE_DEWPOINT)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tif ((ntype == NTYPE_SWITCH_ON) && (swhen == \"2\")) { // '='\n\t\t\t\t\t\tunsigned char twhen = '=';\n\t\t\t\t\t\tsprintf(szTmp, \"%s;%c;%s\", ttype.c_str(), twhen, svalue.c_str());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tstrcpy(szTmp, ttype.c_str());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstd::string twhen;\n\t\t\t\t\tif (swhen == \"0\")\n\t\t\t\t\t\ttwhen = \">\";\n\t\t\t\t\telse if (swhen == \"1\")\n\t\t\t\t\t\ttwhen = \">=\";\n\t\t\t\t\telse if (swhen == \"2\")\n\t\t\t\t\t\ttwhen = \"=\";\n\t\t\t\t\telse if (swhen == \"3\")\n\t\t\t\t\t\ttwhen = \"!=\";\n\t\t\t\t\telse if (swhen == \"4\")\n\t\t\t\t\t\ttwhen = \"<=\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttwhen = \"<\";\n\t\t\t\t\tsprintf(szTmp, \"%s;%s;%s;%s\", ttype.c_str(), twhen.c_str(), svalue.c_str(), srecovery.c_str());\n\t\t\t\t}\n\t\t\t\tint priority = atoi(spriority.c_str());\n\t\t\t\tbool bOK = m_notifications.AddNotification(idx, szTmp, scustommessage, sactivesystems, priority, (ssendalways == \"true\") ? true : false);\n\t\t\t\tif (bOK) {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"AddNotification\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"updatenotification\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string devidx = request::findValue(&req, \"devidx\");\n\t\t\t\tif ((idx.empty()) || (devidx.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string stype = request::findValue(&req, \"ttype\");\n\t\t\t\tstd::string swhen = request::findValue(&req, \"twhen\");\n\t\t\t\tstd::string svalue = request::findValue(&req, \"tvalue\");\n\t\t\t\tstd::string scustommessage = request::findValue(&req, \"tmsg\");\n\t\t\t\tstd::string sactivesystems = request::findValue(&req, \"tsystems\");\n\t\t\t\tstd::string spriority = request::findValue(&req, \"tpriority\");\n\t\t\t\tstd::string ssendalways = request::findValue(&req, \"tsendalways\");\n\t\t\t\tstd::string srecovery = (request::findValue(&req, \"trecovery\") == \"true\") ? \"1\" : \"0\";\n\n\t\t\t\tif ((stype.empty()) || (swhen.empty()) || (svalue.empty()) || (spriority.empty()) || (ssendalways.empty()) || srecovery.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"UpdateNotification\";\n\n\t\t\t\tstd::string recoverymsg;\n\t\t\t\tif ((srecovery == \"1\") && (m_notifications.CustomRecoveryMessage(strtoull(idx.c_str(), NULL, 0), recoverymsg, true)))\n\t\t\t\t{\n\t\t\t\t\tscustommessage.append(\";;\");\n\t\t\t\t\tscustommessage.append(recoverymsg);\n\t\t\t\t}\n\t\t\t\t//delete old record\n\t\t\t\tm_notifications.RemoveNotification(idx);\n\n\t\t\t\t_eNotificationTypes ntype = (_eNotificationTypes)atoi(stype.c_str());\n\t\t\t\tstd::string ttype = Notification_Type_Desc(ntype, 1);\n\t\t\t\tif (\n\t\t\t\t\t(ntype == NTYPE_SWITCH_ON) ||\n\t\t\t\t\t(ntype == NTYPE_SWITCH_OFF) ||\n\t\t\t\t\t(ntype == NTYPE_DEWPOINT)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tif ((ntype == NTYPE_SWITCH_ON) && (swhen == \"2\")) { // '='\n\t\t\t\t\t\tunsigned char twhen = '=';\n\t\t\t\t\t\tsprintf(szTmp, \"%s;%c;%s\", ttype.c_str(), twhen, svalue.c_str());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tstrcpy(szTmp, ttype.c_str());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstd::string twhen;\n\t\t\t\t\tif (swhen == \"0\")\n\t\t\t\t\t\ttwhen = \">\";\n\t\t\t\t\telse if (swhen == \"1\")\n\t\t\t\t\t\ttwhen = \">=\";\n\t\t\t\t\telse if (swhen == \"2\")\n\t\t\t\t\t\ttwhen = \"=\";\n\t\t\t\t\telse if (swhen == \"3\")\n\t\t\t\t\t\ttwhen = \"!=\";\n\t\t\t\t\telse if (swhen == \"4\")\n\t\t\t\t\t\ttwhen = \"<=\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttwhen = \"<\";\n\t\t\t\t\tsprintf(szTmp, \"%s;%s;%s;%s\", ttype.c_str(), twhen.c_str(), svalue.c_str(), srecovery.c_str());\n\t\t\t\t}\n\t\t\t\tint priority = atoi(spriority.c_str());\n\t\t\t\tm_notifications.AddNotification(devidx, szTmp, scustommessage, sactivesystems, priority, (ssendalways == \"true\") ? true : false);\n\t\t\t}\n\t\t\telse if (cparam == \"deletenotification\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteNotification\";\n\n\t\t\t\tm_notifications.RemoveNotification(idx);\n\t\t\t}\n\t\t\telse if (cparam == \"switchdeviceorder\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx1 = request::findValue(&req, \"idx1\");\n\t\t\t\tstd::string idx2 = request::findValue(&req, \"idx2\");\n\t\t\t\tif ((idx1.empty()) || (idx2.empty()))\n\t\t\t\t\treturn;\n\t\t\t\tstd::string sroomid = request::findValue(&req, \"roomid\");\n\t\t\t\tint roomid = atoi(sroomid.c_str());\n\n\t\t\t\tstd::string Order1, Order2;\n\t\t\t\tif (roomid == 0)\n\t\t\t\t{\n\t\t\t\t\t//get device order 1\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM DeviceStatus WHERE (ID == '%q')\",\n\t\t\t\t\t\tidx1.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\tOrder1 = result[0][0];\n\n\t\t\t\t\t//get device order 2\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM DeviceStatus WHERE (ID == '%q')\",\n\t\t\t\t\t\tidx2.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\tOrder2 = result[0][0];\n\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"SwitchDeviceOrder\";\n\n\t\t\t\t\tif (atoi(Order1.c_str()) < atoi(Order2.c_str()))\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"UPDATE DeviceStatus SET [Order] = [Order]+1 WHERE ([Order] >= '%q' AND [Order] < '%q')\",\n\t\t\t\t\t\t\tOrder1.c_str(), Order2.c_str());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"UPDATE DeviceStatus SET [Order] = [Order]-1 WHERE ([Order] > '%q' AND [Order] <= '%q')\",\n\t\t\t\t\t\t\tOrder2.c_str(), Order1.c_str());\n\t\t\t\t\t}\n\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET [Order] = '%q' WHERE (ID == '%q')\",\n\t\t\t\t\t\tOrder1.c_str(), idx2.c_str());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//change order in a room\n\t\t\t\t\t//get device order 1\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM DeviceToPlansMap WHERE (DeviceRowID == '%q') AND (PlanID==%d)\",\n\t\t\t\t\t\tidx1.c_str(), roomid);\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\tOrder1 = result[0][0];\n\n\t\t\t\t\t//get device order 2\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM DeviceToPlansMap WHERE (DeviceRowID == '%q') AND (PlanID==%d)\",\n\t\t\t\t\t\tidx2.c_str(), roomid);\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\tOrder2 = result[0][0];\n\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"SwitchDeviceOrder\";\n\n\t\t\t\t\tif (atoi(Order1.c_str()) < atoi(Order2.c_str()))\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"UPDATE DeviceToPlansMap SET [Order] = [Order]+1 WHERE ([Order] >= '%q' AND [Order] < '%q') AND (PlanID==%d)\",\n\t\t\t\t\t\t\tOrder1.c_str(), Order2.c_str(), roomid);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"UPDATE DeviceToPlansMap SET [Order] = [Order]-1 WHERE ([Order] > '%q' AND [Order] <= '%q') AND (PlanID==%d)\",\n\t\t\t\t\t\t\tOrder2.c_str(), Order1.c_str(), roomid);\n\t\t\t\t\t}\n\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceToPlansMap SET [Order] = '%q' WHERE (DeviceRowID == '%q') AND (PlanID==%d)\",\n\t\t\t\t\t\tOrder1.c_str(), idx2.c_str(), roomid);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"switchsceneorder\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx1 = request::findValue(&req, \"idx1\");\n\t\t\t\tstd::string idx2 = request::findValue(&req, \"idx2\");\n\t\t\t\tif ((idx1.empty()) || (idx2.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string Order1, Order2;\n\t\t\t\t//get device order 1\n\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM Scenes WHERE (ID == '%q')\",\n\t\t\t\t\tidx1.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\tOrder1 = result[0][0];\n\n\t\t\t\t//get device order 2\n\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM Scenes WHERE (ID == '%q')\",\n\t\t\t\t\tidx2.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\tOrder2 = result[0][0];\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"SwitchSceneOrder\";\n\n\t\t\t\tif (atoi(Order1.c_str()) < atoi(Order2.c_str()))\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Scenes SET [Order] = [Order]+1 WHERE ([Order] >= '%q' AND [Order] < '%q')\",\n\t\t\t\t\t\tOrder1.c_str(), Order2.c_str());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE Scenes SET [Order] = [Order]-1 WHERE ([Order] > '%q' AND [Order] <= '%q')\",\n\t\t\t\t\t\tOrder2.c_str(), Order1.c_str());\n\t\t\t\t}\n\n\t\t\t\tm_sql.safe_query(\"UPDATE Scenes SET [Order] = '%q' WHERE (ID == '%q')\",\n\t\t\t\t\tOrder1.c_str(), idx2.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"clearnotifications\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ClearNotification\";\n\n\t\t\t\tm_notifications.RemoveDeviceNotifications(idx);\n\t\t\t}\n\t\t\telse if (cparam == \"adduser\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string senabled = request::findValue(&req, \"enabled\");\n\t\t\t\tstd::string username = request::findValue(&req, \"username\");\n\t\t\t\tstd::string password = request::findValue(&req, \"password\");\n\t\t\t\tstd::string srights = request::findValue(&req, \"rights\");\n\t\t\t\tstd::string sRemoteSharing = request::findValue(&req, \"RemoteSharing\");\n\t\t\t\tstd::string sTabsEnabled = request::findValue(&req, \"TabsEnabled\");\n\t\t\t\tif (\n\t\t\t\t\t(senabled.empty()) ||\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(password.empty()) ||\n\t\t\t\t\t(srights.empty()) ||\n\t\t\t\t\t(sRemoteSharing.empty()) ||\n\t\t\t\t\t(sTabsEnabled.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tint rights = atoi(srights.c_str());\n\t\t\t\tif (rights != 2)\n\t\t\t\t{\n\t\t\t\t\tif (!FindAdminUser())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"message\"] = \"Add a Admin user first! (Or enable Settings/Website Protection)\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"AddUser\";\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO Users (Active, Username, Password, Rights, RemoteSharing, TabsEnabled) VALUES (%d,'%q','%q','%d','%d','%d')\",\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\tbase64_encode(username).c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\trights,\n\t\t\t\t\t(sRemoteSharing == \"true\") ? 1 : 0,\n\t\t\t\t\tatoi(sTabsEnabled.c_str())\n\t\t\t\t);\n\t\t\t\tLoadUsers();\n\t\t\t}\n\t\t\telse if (cparam == \"updateuser\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\tstd::string senabled = request::findValue(&req, \"enabled\");\n\t\t\t\tstd::string username = request::findValue(&req, \"username\");\n\t\t\t\tstd::string password = request::findValue(&req, \"password\");\n\t\t\t\tstd::string srights = request::findValue(&req, \"rights\");\n\t\t\t\tstd::string sRemoteSharing = request::findValue(&req, \"RemoteSharing\");\n\t\t\t\tstd::string sTabsEnabled = request::findValue(&req, \"TabsEnabled\");\n\t\t\t\tif (\n\t\t\t\t\t(senabled.empty()) ||\n\t\t\t\t\t(username.empty()) ||\n\t\t\t\t\t(password.empty()) ||\n\t\t\t\t\t(srights.empty()) ||\n\t\t\t\t\t(sRemoteSharing.empty()) ||\n\t\t\t\t\t(sTabsEnabled.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tint rights = atoi(srights.c_str());\n\t\t\t\tif (rights != 2)\n\t\t\t\t{\n\t\t\t\t\tif (!FindAdminUser())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"message\"] = \"Add a Admin user first! (Or enable Settings/Website Protection)\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstd::string sHashedUsername = base64_encode(username);\n\n\t\t\t\t// Invalid user's sessions if username or password has changed\n\t\t\t\tstd::string sOldUsername;\n\t\t\t\tstd::string sOldPassword;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Username, Password FROM Users WHERE (ID == '%q')\", idx.c_str());\n\t\t\t\tif (result.size() == 1)\n\t\t\t\t{\n\t\t\t\t\tsOldUsername = result[0][0];\n\t\t\t\t\tsOldPassword = result[0][1];\n\t\t\t\t}\n\t\t\t\tif ((sHashedUsername != sOldUsername) || (password != sOldPassword))\n\t\t\t\t\tRemoveUsersSessions(sOldUsername, session);\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"UpdateUser\";\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Users SET Active=%d, Username='%q', Password='%q', Rights=%d, RemoteSharing=%d, TabsEnabled=%d WHERE (ID == '%q')\",\n\t\t\t\t\t(senabled == \"true\") ? 1 : 0,\n\t\t\t\t\tsHashedUsername.c_str(),\n\t\t\t\t\tpassword.c_str(),\n\t\t\t\t\trights,\n\t\t\t\t\t(sRemoteSharing == \"true\") ? 1 : 0,\n\t\t\t\t\tatoi(sTabsEnabled.c_str()),\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t\tLoadUsers();\n\n\n\t\t\t}\n\t\t\telse if (cparam == \"deleteuser\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteUser\";\n\n\t\t\t\t// Remove user's sessions\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Username FROM Users WHERE (ID == '%q')\", idx.c_str());\n\t\t\t\tif (result.size() == 1)\n\t\t\t\t{\n\t\t\t\t\tRemoveUsersSessions(result[0][0], session);\n\t\t\t\t}\n\n\t\t\t\tm_sql.safe_query(\"DELETE FROM Users WHERE (ID == '%q')\", idx.c_str());\n\n\t\t\t\tm_sql.safe_query(\"DELETE FROM SharedDevices WHERE (SharedUserID == '%q')\", idx.c_str());\n\n\t\t\t\tLoadUsers();\n\t\t\t}\n\t\t\telse if (cparam == \"clearlightlog\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\t//First get Device Type/SubType\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType FROM DeviceStatus WHERE (ID == '%q')\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\n\t\t\t\tunsigned char dType = atoi(result[0][0].c_str());\n\t\t\t\tunsigned char dSubType = atoi(result[0][1].c_str());\n\n\t\t\t\tif (\n\t\t\t\t\t(dType != pTypeLighting1) &&\n\t\t\t\t\t(dType != pTypeLighting2) &&\n\t\t\t\t\t(dType != pTypeLighting3) &&\n\t\t\t\t\t(dType != pTypeLighting4) &&\n\t\t\t\t\t(dType != pTypeLighting5) &&\n\t\t\t\t\t(dType != pTypeLighting6) &&\n\t\t\t\t\t(dType != pTypeFan) &&\n\t\t\t\t\t(dType != pTypeColorSwitch) &&\n\t\t\t\t\t(dType != pTypeSecurity1) &&\n\t\t\t\t\t(dType != pTypeSecurity2) &&\n\t\t\t\t\t(dType != pTypeEvohome) &&\n\t\t\t\t\t(dType != pTypeEvohomeRelay) &&\n\t\t\t\t\t(dType != pTypeCurtain) &&\n\t\t\t\t\t(dType != pTypeBlinds) &&\n\t\t\t\t\t(dType != pTypeRFY) &&\n\t\t\t\t\t(dType != pTypeChime) &&\n\t\t\t\t\t(dType != pTypeThermostat2) &&\n\t\t\t\t\t(dType != pTypeThermostat3) &&\n\t\t\t\t\t(dType != pTypeThermostat4) &&\n\t\t\t\t\t(dType != pTypeRemote) &&\n\t\t\t\t\t(dType != pTypeGeneralSwitch) &&\n\t\t\t\t\t(dType != pTypeHomeConfort) &&\n\t\t\t\t\t(dType != pTypeFS20) &&\n\t\t\t\t\t(!((dType == pTypeRadiator1) && (dSubType == sTypeSmartwaresSwitchRadiator))) &&\n\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeTextStatus))) &&\n\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeAlert)))\n\t\t\t\t\t)\n\t\t\t\t\treturn; //no light device! we should not be here!\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ClearLightLog\";\n\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM LightingLog WHERE (DeviceRowID=='%q')\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"clearscenelog\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ClearSceneLog\";\n\n\t\t\t\tresult = m_sql.safe_query(\"DELETE FROM SceneLog WHERE (SceneRowID=='%q')\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"learnsw\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tm_sql.AllowNewHardwareTimer(5);\n\t\t\t\tm_sql.m_LastSwitchID = \"\";\n\t\t\t\tbool bReceivedSwitch = false;\n\t\t\t\tunsigned char cntr = 0;\n\t\t\t\twhile ((!bReceivedSwitch) && (cntr < 50))\t//wait for max. 5 seconds\n\t\t\t\t{\n\t\t\t\t\tif (m_sql.m_LastSwitchID != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tbReceivedSwitch = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//sleep 100ms\n\t\t\t\t\t\tsleep_milliseconds(100);\n\t\t\t\t\t\tcntr++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (bReceivedSwitch)\n\t\t\t\t{\n\t\t\t\t\t//check if used\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Name, Used, nValue FROM DeviceStatus WHERE (ID==%\" PRIu64 \")\",\n\t\t\t\t\t\tm_sql.m_LastSwitchRowID);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"LearnSW\";\n\t\t\t\t\t\troot[\"ID\"] = m_sql.m_LastSwitchID;\n\t\t\t\t\t\troot[\"idx\"] = m_sql.m_LastSwitchRowID;\n\t\t\t\t\t\troot[\"Name\"] = result[0][0];\n\t\t\t\t\t\troot[\"Used\"] = atoi(result[0][1].c_str());\n\t\t\t\t\t\troot[\"Cmd\"] = atoi(result[0][2].c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //learnsw\n\t\t\telse if (cparam == \"makefavorite\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string sisfavorite = request::findValue(&req, \"isfavorite\");\n\t\t\t\tif ((idx.empty()) || (sisfavorite.empty()))\n\t\t\t\t\treturn;\n\t\t\t\tint isfavorite = atoi(sisfavorite.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Favorite=%d WHERE (ID == '%q')\",\n\t\t\t\t\tisfavorite, idx.c_str());\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"MakeFavorite\";\n\t\t\t} //makefavorite\n\t\t\telse if (cparam == \"makescenefavorite\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string sisfavorite = request::findValue(&req, \"isfavorite\");\n\t\t\t\tif ((idx.empty()) || (sisfavorite.empty()))\n\t\t\t\t\treturn;\n\t\t\t\tint isfavorite = atoi(sisfavorite.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Favorite=%d WHERE (ID == '%q')\",\n\t\t\t\t\tisfavorite, idx.c_str());\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"MakeSceneFavorite\";\n\t\t\t} //makescenefavorite\n\t\t\telse if (cparam == \"resetsecuritystatus\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string switchcmd = request::findValue(&req, \"switchcmd\");\n\n\t\t\t\tif ((idx.empty()) || (switchcmd.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ResetSecurityStatus\";\n\n\t\t\t\tint nValue = -1;\n\n\t\t\t\t// Change to generic *Security_Status_Desc lookup...\n\n\t\t\t\tif (switchcmd == \"Panic End\") {\n\t\t\t\t\tnValue = 7;\n\t\t\t\t}\n\t\t\t\telse if (switchcmd == \"Normal\") {\n\t\t\t\t\tnValue = 0;\n\t\t\t\t}\n\n\t\t\t\tif (nValue >= 0)\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET nValue=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tnValue, idx.c_str());\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"SwitchLight\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"verifypasscode\")\n\t\t\t{\n\t\t\t\tstd::string passcode = request::findValue(&req, \"passcode\");\n\t\t\t\tif (passcode.empty())\n\t\t\t\t\treturn;\n\t\t\t\t//Check if passcode is correct\n\t\t\t\tpasscode = GenerateMD5Hash(passcode);\n\t\t\t\tstd::string rpassword;\n\t\t\t\tint nValue = 1;\n\t\t\t\tm_sql.GetPreferencesVar(\"ProtectionPassword\", nValue, rpassword);\n\t\t\t\tif (passcode == rpassword)\n\t\t\t\t{\n\t\t\t\t\troot[\"title\"] = \"VerifyPasscode\";\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"switchmodal\")\n\t\t\t{\n\t\t\t\tint urights = 3;\n\t\t\t\tif (bHaveUser)\n\t\t\t\t{\n\t\t\t\t\tint iUser = -1;\n\t\t\t\t\tiUser = FindUser(session.username.c_str());\n\t\t\t\t\tif (iUser != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\turights = (int)m_users[iUser].userrights;\n\t\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a modal command\", m_users[iUser].Username.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urights < 1)\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string switchcmd = request::findValue(&req, \"status\");\n\t\t\t\tstd::string until = request::findValue(&req, \"until\");//optional until date / time as applicable\n\t\t\t\tstd::string action = request::findValue(&req, \"action\");//Run action or not (update status only)\n\t\t\t\tstd::string onlyonchange = request::findValue(&req, \"ooc\");//No update unless the value changed (check if updated)\n\t\t\t\t//The on action is used to call a script to update the real device so we only want to use it when altering the status in the Domoticz Web Client\n\t\t\t\t//If we're posting the status from the real device to domoticz we don't want to run the on action script (\"action\"!=1) to avoid loops and contention\n\t\t\t\t//\"\"... we only want to log a change (and trigger an event) when the status has actually changed (\"ooc\"==1) i.e. suppress non transient updates\n\t\t\t\tif ((idx.empty()) || (switchcmd.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\tstd::string passcode = request::findValue(&req, \"passcode\");\n\t\t\t\tif (passcode.size() > 0)\n\t\t\t\t{\n\t\t\t\t\t//Check if passcode is correct\n\t\t\t\t\tpasscode = GenerateMD5Hash(passcode);\n\t\t\t\t\tstd::string rpassword;\n\t\t\t\t\tint nValue = 1;\n\t\t\t\t\tm_sql.GetPreferencesVar(\"ProtectionPassword\", nValue, rpassword);\n\t\t\t\t\tif (passcode != rpassword)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"title\"] = \"Modal\";\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (m_mainworker.SwitchModal(idx, switchcmd, action, onlyonchange, until) == true)//FIXME we need to return a status of already set / no update if ooc==\"1\" and no status update was performed\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Modal\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"switchlight\")\n\t\t\t{\n\t\t\t\tif (session.rights < 1)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only user/admin allowed\n\t\t\t\t}\n\t\t\t\tstd::string Username = \"Admin\";\n\t\t\t\tif (!session.username.empty())\n\t\t\t\t\tUsername = session.username;\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tstd::string switchcmd = request::findValue(&req, \"switchcmd\");\n\t\t\t\tstd::string level = \"-1\";\n\t\t\t\tif (switchcmd == \"Set Level\")\n\t\t\t\t\tlevel = request::findValue(&req, \"level\");\n\t\t\t\tstd::string onlyonchange = request::findValue(&req, \"ooc\");//No update unless the value changed (check if updated)\n\t\t\t\t_log.Debug(DEBUG_WEBSERVER, \"WEBS switchlight idx:%s switchcmd:%s level:%s\", idx.c_str(), switchcmd.c_str(), level.c_str());\n\t\t\t\tstd::string passcode = request::findValue(&req, \"passcode\");\n\t\t\t\tif ((idx.empty()) || (switchcmd.empty()) || ((switchcmd == \"Set Level\") && (level.empty())) )\n\t\t\t\t\treturn;\n\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"SELECT [Protected],[Name] FROM DeviceStatus WHERE (ID = '%q')\", idx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\t//Switch not found!\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbool bIsProtected = atoi(result[0][0].c_str()) != 0;\n\t\t\t\tstd::string sSwitchName = result[0][1];\n\t\t\t\tif (session.rights == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!IsIdxForUser(&session, atoi(idx.c_str())))\n\t\t\t\t\t{\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"User: %s initiated a Unauthorized switch command!\", Username.c_str());\n\t\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (bIsProtected)\n\t\t\t\t{\n\t\t\t\t\tif (passcode.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\t//Switch is protected, but no passcode has been\n\t\t\t\t\t\troot[\"title\"] = \"SwitchLight\";\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t//Check if passcode is correct\n\t\t\t\t\tpasscode = GenerateMD5Hash(passcode);\n\t\t\t\t\tstd::string rpassword;\n\t\t\t\t\tint nValue = 1;\n\t\t\t\t\tm_sql.GetPreferencesVar(\"ProtectionPassword\", nValue, rpassword);\n\t\t\t\t\tif (passcode != rpassword)\n\t\t\t\t\t{\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"User: %s initiated a switch command (Wrong code!)\", Username.c_str());\n\t\t\t\t\t\troot[\"title\"] = \"SwitchLight\";\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a switch command (%s/%s/%s)\", Username.c_str(), idx.c_str(), sSwitchName.c_str(), switchcmd.c_str());\n\n\t\t\t\troot[\"title\"] = \"SwitchLight\";\n\t\t\t\tif (m_mainworker.SwitchLight(idx, switchcmd, level, \"-1\", onlyonchange, 0) == true)\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"message\"] = \"Error sending switch command, check device/hardware !\";\n\t\t\t\t}\n\t\t\t} //(rtype==\"switchlight\")\n\t\t\telse if (cparam == \"switchscene\")\n\t\t\t{\n\t\t\t\tif (session.rights < 1)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only user/admin allowed\n\t\t\t\t}\n\t\t\t\tstd::string Username = \"Admin\";\n\t\t\t\tif (!session.username.empty())\n\t\t\t\t\tUsername = session.username;\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string switchcmd = request::findValue(&req, \"switchcmd\");\n\t\t\t\tstd::string passcode = request::findValue(&req, \"passcode\");\n\t\t\t\tif ((idx.empty()) || (switchcmd.empty()))\n\t\t\t\t\treturn;\n\n\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\"SELECT [Protected] FROM Scenes WHERE (ID = '%q')\", idx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t{\n\t\t\t\t\t//Scene/Group not found!\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbool bIsProtected = atoi(result[0][0].c_str()) != 0;\n\t\t\t\tif (bIsProtected)\n\t\t\t\t{\n\t\t\t\t\tif (passcode.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"title\"] = \"SwitchScene\";\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t//Check if passcode is correct\n\t\t\t\t\tpasscode = GenerateMD5Hash(passcode);\n\t\t\t\t\tstd::string rpassword;\n\t\t\t\t\tint nValue = 1;\n\t\t\t\t\tm_sql.GetPreferencesVar(\"ProtectionPassword\", nValue, rpassword);\n\t\t\t\t\tif (passcode != rpassword)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"title\"] = \"SwitchScene\";\n\t\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"User: %s initiated a scene/group command (Wrong code!)\", Username.c_str());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a scene/group command\", Username.c_str());\n\n\t\t\t\tif (m_mainworker.SwitchScene(idx, switchcmd) == true)\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"SwitchScene\";\n\t\t\t\t}\n\t\t\t} //(rtype==\"switchscene\")\n\t\t\telse if (cparam == \"getSunRiseSet\") {\n\t\t\t\tif (!m_mainworker.m_LastSunriseSet.empty())\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\tStringSplit(m_mainworker.m_LastSunriseSet, \";\", strarray);\n\t\t\t\t\tif (strarray.size() == 10)\n\t\t\t\t\t{\n\t\t\t\t\t\tstruct tm loctime;\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\n\t\t\t\t\t\tlocaltime_r(&now, &loctime);\n\t\t\t\t\t\t//strftime(szTmp, 80, \"%b %d %Y %X\", &loctime);\n\t\t\t\t\t\tstrftime(szTmp, 80, \"%Y-%m-%d %X\", &loctime);\n\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"getSunRiseSet\";\n\t\t\t\t\t\troot[\"ServerTime\"] = szTmp;\n\t\t\t\t\t\troot[\"Sunrise\"] = strarray[0];\n\t\t\t\t\t\troot[\"Sunset\"] = strarray[1];\n\t\t\t\t\t\troot[\"SunAtSouth\"] = strarray[2];\n\t\t\t\t\t\troot[\"CivTwilightStart\"] = strarray[3];\n\t\t\t\t\t\troot[\"CivTwilightEnd\"] = strarray[4];\n\t\t\t\t\t\troot[\"NautTwilightStart\"] = strarray[5];\n\t\t\t\t\t\troot[\"NautTwilightEnd\"] = strarray[6];\n\t\t\t\t\t\troot[\"AstrTwilightStart\"] = strarray[7];\n\t\t\t\t\t\troot[\"AstrTwilightEnd\"] = strarray[8];\n\t\t\t\t\t\troot[\"DayLength\"] = strarray[9];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"getServerTime\") {\n\n\t\t\t\tstruct tm loctime;\n\t\t\t\ttime_t now = mytime(NULL);\n\n\t\t\t\tlocaltime_r(&now, &loctime);\n\t\t\t\t//strftime(szTmp, 80, \"%b %d %Y %X\", &loctime);\n\t\t\t\tstrftime(szTmp, 80, \"%Y-%m-%d %X\", &loctime);\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"getServerTime\";\n\t\t\t\troot[\"ServerTime\"] = szTmp;\n\t\t\t}\n\t\t\telse if (cparam == \"getsecstatus\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetSecStatus\";\n\n\t\t\t\tint secstatus = 0;\n\t\t\t\tm_sql.GetPreferencesVar(\"SecStatus\", secstatus);\n\t\t\t\troot[\"secstatus\"] = secstatus;\n\n\t\t\t\tint secondelay = 30;\n\t\t\t\tm_sql.GetPreferencesVar(\"SecOnDelay\", secondelay);\n\t\t\t\troot[\"secondelay\"] = secondelay;\n\t\t\t}\n\t\t\telse if (cparam == \"setsecstatus\")\n\t\t\t{\n\t\t\t\tstd::string ssecstatus = request::findValue(&req, \"secstatus\");\n\t\t\t\tstd::string seccode = request::findValue(&req, \"seccode\");\n\t\t\t\tif ((ssecstatus.empty()) || (seccode.empty()))\n\t\t\t\t{\n\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\troot[\"title\"] = \"SetSecStatus\";\n\t\t\t\tstd::string rpassword;\n\t\t\t\tint nValue = 1;\n\t\t\t\tm_sql.GetPreferencesVar(\"SecPassword\", nValue, rpassword);\n\t\t\t\tif (seccode != rpassword)\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"message\"] = \"WRONG CODE\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\tint iSecStatus = atoi(ssecstatus.c_str());\n\t\t\t\tm_mainworker.UpdateDomoticzSecurityStatus(iSecStatus);\n\t\t\t}\n\t\t\telse if (cparam == \"setcolbrightnessvalue\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\t_tColor color;\n\n\t\t\t\tstd::string json = request::findValue(&req, \"color\");\n\t\t\t\tstd::string hex = request::findValue(&req, \"hex\");\n\t\t\t\tstd::string hue = request::findValue(&req, \"hue\");\n\t\t\t\tstd::string sat = request::findValue(&req, \"sat\");\n\t\t\t\tstd::string brightness = request::findValue(&req, \"brightness\");\n\t\t\t\tstd::string iswhite = request::findValue(&req, \"iswhite\");\n\n\t\t\t\tint ival = 100;\n\t\t\t\tfloat brightnessAdj = 1.0f;\n\n\t\t\t\tif (!json.empty())\n\t\t\t\t{\n\t\t\t\t\tcolor = _tColor(json);\n\t\t\t\t\tif (color.mode == ColorModeRGB)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Normalize RGB to full brightness\n\t\t\t\t\t\tfloat hsb[3];\n\t\t\t\t\t\tint r, g, b;\n\t\t\t\t\t\trgb2hsb(color.r, color.g, color.b, hsb);\n\t\t\t\t\t\thsb2rgb(hsb[0]*360.0f, hsb[1], 1.0f, r, g, b, 255);\n\t\t\t\t\t\tcolor.r = r;\n\t\t\t\t\t\tcolor.g = g;\n\t\t\t\t\t\tcolor.b = b;\n\t\t\t\t\t\tbrightnessAdj = hsb[2];\n\t\t\t\t\t}\n\n\t\t\t\t\t//_log.Debug(DEBUG_WEBSERVER, \"setcolbrightnessvalue: json: %s, color: '%s', bri: '%s'\", json.c_str(), color.toString().c_str(), brightness.c_str());\n\t\t\t\t}\n\t\t\t\telse if (!hex.empty())\n\t\t\t\t{\n\t\t\t\t\tuint64_t ihex = hexstrtoui64(hex);\n\t\t\t\t\t//_log.Debug(DEBUG_WEBSERVER, \"setcolbrightnessvalue: hex: '%s', ihex: %\" PRIx64 \", bri: '%s', iswhite: '%s'\", hex.c_str(), ihex, brightness.c_str(), iswhite.c_str());\n\t\t\t\t\tuint8_t r = 0;\n\t\t\t\t\tuint8_t g = 0;\n\t\t\t\t\tuint8_t b = 0;\n\t\t\t\t\tuint8_t cw = 0;\n\t\t\t\t\tuint8_t ww = 0;\n\t\t\t\t\tswitch (hex.length())\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 6: //RGB\n\t\t\t\t\t\t\tr = (uint8_t)((ihex & 0x0000FF0000) >> 16);\n\t\t\t\t\t\t\tg = (uint8_t)((ihex & 0x000000FF00) >> 8);\n\t\t\t\t\t\t\tb = (uint8_t)ihex & 0xFF;\n\t\t\t\t\t\t\tfloat hsb[3];\n\t\t\t\t\t\t\tint tr, tg, tb; // tmp of 'int' type so can be passed as references to hsb2rgb\n\t\t\t\t\t\t\trgb2hsb(r, g, b, hsb);\n\t\t\t\t\t\t\t// Normalize RGB to full brightness\n\t\t\t\t\t\t\thsb2rgb(hsb[0]*360.0f, hsb[1], 1.0f, tr, tg, tb, 255);\n\t\t\t\t\t\t\tr = tr;\n\t\t\t\t\t\t\tg = tg;\n\t\t\t\t\t\t\tb = tb;\n\t\t\t\t\t\t\tbrightnessAdj = hsb[2];\n\t\t\t\t\t\t\t// Backwards compatibility: set iswhite for unsaturated colors\n\t\t\t\t\t\t\tiswhite = (hsb[1] < (20.0 / 255.0)) ? \"true\" : \"false\";\n\t\t\t\t\t\t\tcolor = _tColor(r, g, b, cw, ww, ColorModeRGB);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 8: //RGB_WW\n\t\t\t\t\t\t\tr = (uint8_t)((ihex & 0x00FF000000) >> 24);\n\t\t\t\t\t\t\tg = (uint8_t)((ihex & 0x0000FF0000) >> 16);\n\t\t\t\t\t\t\tb = (uint8_t)((ihex & 0x000000FF00) >> 8);\n\t\t\t\t\t\t\tww = (uint8_t)ihex & 0xFF;\n\t\t\t\t\t\t\tcolor = _tColor(r, g, b, cw, ww, ColorModeCustom);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 10: //RGB_CW_WW\n\t\t\t\t\t\t\tr = (uint8_t)((ihex & 0xFF00000000) >> 32);\n\t\t\t\t\t\t\tg = (uint8_t)((ihex & 0x00FF000000) >> 24);\n\t\t\t\t\t\t\tb = (uint8_t)((ihex & 0x0000FF0000) >> 16);\n\t\t\t\t\t\t\tcw = (uint8_t)((ihex & 0x000000FF00) >> 8);\n\t\t\t\t\t\t\tww = (uint8_t)ihex & 0xFF;\n\t\t\t\t\t\t\tcolor = _tColor(r, g, b, cw, ww, ColorModeCustom);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (iswhite == \"true\") color.mode = ColorModeWhite;\n\t\t\t\t\t//_log.Debug(DEBUG_WEBSERVER, \"setcolbrightnessvalue: rgbww: %02x%02x%02x%02x%02x, color: '%s'\", r, g, b, cw, ww, color.toString().c_str());\n\t\t\t\t}\n\t\t\t\telse if (!hue.empty())\n\t\t\t\t{\n\t\t\t\t\tint r, g, b;\n\n\t\t\t\t\t//convert hue to RGB\n\t\t\t\t\tfloat iHue = float(atof(hue.c_str()));\n\t\t\t\t\tfloat iSat = 100.0f;\n\t\t\t\t\tif (!sat.empty()) iSat = float(atof(sat.c_str()));\n\t\t\t\t\thsb2rgb(iHue, iSat/100.0f, 1.0f, r, g, b, 255);\n\n\t\t\t\t\tcolor = _tColor(r, g, b, 0, 0, ColorModeRGB);\n\t\t\t\t\tif (iswhite == \"true\") color.mode = ColorModeWhite;\n\t\t\t\t\t//_log.Debug(DEBUG_WEBSERVER, \"setcolbrightnessvalue2: hue: %f, rgb: %02x%02x%02x, color: '%s'\", iHue, r, g, b, color.toString().c_str());\n\t\t\t\t}\n\n\t\t\t\tif (color.mode == ColorModeNone)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!brightness.empty())\n\t\t\t\t\tival = atoi(brightness.c_str());\n\t\t\t\tival = int(ival * brightnessAdj);\n\t\t\t\tival = std::max(ival, 0);\n\t\t\t\tival = std::min(ival, 100);\n\n\t\t\t\t_log.Log(LOG_STATUS, \"setcolbrightnessvalue: ID: %\" PRIx64 \", bri: %d, color: '%s'\", ID, ival, color.toString().c_str());\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Set Color\", (unsigned char)ival, color, false, 0);\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"SetColBrightnessValue\";\n\t\t\t}\n\t\t\telse if (cparam.find(\"setkelvinlevel\") == 0)\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set Kelvin Level\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\n\t\t\t\tstd::string kelvin = request::findValue(&req, \"kelvin\");\n\t\t\t\tdouble ival = atof(kelvin.c_str());\n\t\t\t\tival = std::max(ival, 0.0);\n\t\t\t\tival = std::min(ival, 100.0);\n\t\t\t\t_tColor color = _tColor(round(ival*255.0f/100.0f), ColorModeTemp);\n\t\t\t\t_log.Log(LOG_STATUS, \"setkelvinlevel: t: %f, color: '%s'\", ival, color.toString().c_str());\n\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Set Color\", -1, color, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"brightnessup\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set brightness up!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Bright Up\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"brightnessdown\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set brightness down!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Bright Down\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"discomode\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to last known disco mode!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Disco Mode\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam.find(\"discomodenum\") == 0 && cparam != \"discomode\" && cparam.size() == 13)\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to disco mode!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tchar szTmp[40];\n\t\t\t\tsprintf(szTmp, \"Disco Mode %s\", cparam.substr(12).c_str());\n\t\t\t\tm_mainworker.SwitchLight(ID, szTmp, 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"discoup\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to next disco mode!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Disco Up\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"discodown\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to previous disco mode!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Disco Down\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"speedup\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set disco speed up!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Speed Up\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"speeduplong\")\n\t\t\t{\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set speed long!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Speed Up Long\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"speeddown\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set disco speed down!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Speed Down\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"speedmin\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set disco speed minimal!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Speed Minimal\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"speedmax\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set disco speed maximal!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Speed Maximal\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"warmer\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set Kelvin up!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Warmer\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"cooler\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set Kelvin down!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Cooler\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"fulllight\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set Full!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Set Full\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"nightlight\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to nightlight!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Set Night\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"whitelight\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"Set to clear white!\";\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\n\t\t\t\tif (idx.empty())\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuint64_t ID = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\t//TODO: Change to color with mode=ColorModeWhite and level=100?\n\t\t\t\tm_mainworker.SwitchLight(ID, \"Set White\", 0, NoColor, false, 0);\n\t\t\t}\n\t\t\telse if (cparam == \"getfloorplanimages\")\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetFloorplanImages\";\n\n\t\t\t\tbool bReturnUnused = atoi(request::findValue(&req, \"unused\").c_str()) != 0;\n\n\t\t\t\tif (!bReturnUnused)\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, ScaleFactor FROM Floorplans ORDER BY [Name]\");\n\t\t\t\telse\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, ScaleFactor FROM Floorplans WHERE ID NOT IN(SELECT FloorplanID FROM Plans)\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"name\"] = sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"scalefactor\"] = sd[2];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"updatefloorplan\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\t\tstd::string scalefactor = request::findValue(&req, \"scalefactor\");\n\t\t\t\tif (\n\t\t\t\t\t(name.empty())\n\t\t\t\t\t||(scalefactor.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"UpdateFloorplan\";\n\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Floorplans SET Name='%q',ScaleFactor='%q' WHERE (ID == '%q')\",\n\t\t\t\t\tname.c_str(),\n\t\t\t\t\tscalefactor.c_str(),\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if (cparam == \"deletefloorplan\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteFloorplan\";\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceToPlansMap SET XOffset=0,YOffset=0 WHERE (PlanID IN (SELECT ID from Plans WHERE (FloorplanID == '%q')))\", idx.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE Plans SET FloorplanID=0,Area='' WHERE (FloorplanID == '%q')\", idx.c_str());\n\t\t\t\tm_sql.safe_query(\"DELETE FROM Floorplans WHERE (ID == '%q')\", idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"changefloorplanorder\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\tstd::string sway = request::findValue(&req, \"way\");\n\t\t\t\tif (sway.empty())\n\t\t\t\t\treturn;\n\t\t\t\tbool bGoUp = (sway == \"0\");\n\n\t\t\t\tstd::string aOrder, oID, oOrder;\n\n\t\t\t\tresult = m_sql.safe_query(\"SELECT [Order] FROM Floorplans WHERE (ID=='%q')\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (result.empty())\n\t\t\t\t\treturn;\n\t\t\t\taOrder = result[0][0];\n\n\t\t\t\tif (!bGoUp)\n\t\t\t\t{\n\t\t\t\t\t//Get next device order\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM Floorplans WHERE ([Order]>'%q') ORDER BY [Order] ASC\",\n\t\t\t\t\t\taOrder.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\toID = result[0][0];\n\t\t\t\t\toOrder = result[0][1];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//Get previous device order\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, [Order] FROM Floorplans WHERE ([Order]<'%q') ORDER BY [Order] DESC\",\n\t\t\t\t\t\taOrder.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t\treturn;\n\t\t\t\t\toID = result[0][0];\n\t\t\t\t\toOrder = result[0][1];\n\t\t\t\t}\n\t\t\t\t//Swap them\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"ChangeFloorPlanOrder\";\n\n\t\t\t\tm_sql.safe_query(\"UPDATE Floorplans SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\t\toOrder.c_str(), idx.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE Floorplans SET [Order] = '%q' WHERE (ID='%q')\",\n\t\t\t\t\taOrder.c_str(), oID.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"getunusedfloorplanplans\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetUnusedFloorplanPlans\";\n\t\t\t\tint ii = 0;\n\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name FROM Plans WHERE (FloorplanID==0) ORDER BY Name\");\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"type\"] = 0;\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"getfloorplanplans\")\n\t\t\t{\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"GetFloorplanPlans\";\n\t\t\t\tint ii = 0;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Area FROM Plans WHERE (FloorplanID=='%q') ORDER BY Name\",\n\t\t\t\t\tidx.c_str());\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"Area\"] = sd[2];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (cparam == \"addfloorplanplan\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tstd::string planidx = request::findValue(&req, \"planidx\");\n\t\t\t\tif (\n\t\t\t\t\t(idx.empty()) ||\n\t\t\t\t\t(planidx.empty())\n\t\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"AddFloorplanPlan\";\n\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Plans SET FloorplanID='%q' WHERE (ID == '%q')\",\n\t\t\t\t\tidx.c_str(),\n\t\t\t\t\tplanidx.c_str()\n\t\t\t\t);\n\t\t\t\t_log.Log(LOG_STATUS, \"(Floorplan) Plan '%s' added to floorplan '%s'.\", planidx.c_str(), idx.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"updatefloorplanplan\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string planidx = request::findValue(&req, \"planidx\");\n\t\t\t\tstd::string planarea = request::findValue(&req, \"area\");\n\t\t\t\tif (planidx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"UpdateFloorplanPlan\";\n\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Plans SET Area='%q' WHERE (ID == '%q')\",\n\t\t\t\t\tplanarea.c_str(),\n\t\t\t\t\tplanidx.c_str()\n\t\t\t\t);\n\t\t\t\t_log.Log(LOG_STATUS, \"(Floorplan) Plan '%s' floor area updated to '%s'.\", planidx.c_str(), planarea.c_str());\n\t\t\t}\n\t\t\telse if (cparam == \"deletefloorplanplan\")\n\t\t\t{\n\t\t\t\tif (session.rights < 2)\n\t\t\t\t{\n\t\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\t\treturn; //Only admin user allowed\n\t\t\t\t}\n\n\t\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\t\tif (idx.empty())\n\t\t\t\t\treturn;\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"DeleteFloorplanPlan\";\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE DeviceToPlansMap SET XOffset=0,YOffset=0 WHERE (PlanID == '%q')\",\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t\t_log.Log(LOG_STATUS, \"(Floorplan) Device coordinates reset for plan '%s'.\", idx.c_str());\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE Plans SET FloorplanID=0,Area='' WHERE (ID == '%q')\",\n\t\t\t\t\tidx.c_str()\n\t\t\t\t);\n\t\t\t\t_log.Log(LOG_STATUS, \"(Floorplan) Plan '%s' floorplan data reset.\", idx.c_str());\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::DisplaySwitchTypesCombo(std::string & content_part)\n\t\t{\n\t\t\tchar szTmp[200];\n\n\t\t\tstd::map<std::string, int> _switchtypes;\n\n\t\t\tfor (int ii = 0; ii < STYPE_END; ii++)\n\t\t\t{\n\t\t\t\t_switchtypes[Switch_Type_Desc((_eSwitchType)ii)] = ii;\n\t\t\t}\n\t\t\t//return a sorted list\n\t\t\tfor (const auto & itt : _switchtypes)\n\t\t\t{\n\t\t\t\tsprintf(szTmp, \"<option value=\\\"%d\\\">%s</option>\\n\", itt.second, itt.first.c_str());\n\t\t\t\tcontent_part += szTmp;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::DisplayMeterTypesCombo(std::string & content_part)\n\t\t{\n\t\t\tchar szTmp[200];\n\t\t\tfor (int ii = 0; ii < MTYPE_END; ii++)\n\t\t\t{\n\t\t\t\tsprintf(szTmp, \"<option value=\\\"%d\\\">%s</option>\\n\", ii, Meter_Type_Desc((_eMeterType)ii));\n\t\t\t\tcontent_part += szTmp;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::DisplayLanguageCombo(std::string & content_part)\n\t\t{\n\t\t\t//return a sorted list\n\t\t\tstd::map<std::string, std::string> _ltypes;\n\t\t\tchar szTmp[200];\n\t\t\tint ii = 0;\n\t\t\twhile (guiLanguage[ii].szShort != NULL)\n\t\t\t{\n\t\t\t\t_ltypes[guiLanguage[ii].szLong] = guiLanguage[ii].szShort;\n\t\t\t\tii++;\n\t\t\t}\n\t\t\tfor (const auto & itt : _ltypes)\n\t\t\t{\n\t\t\t\tsprintf(szTmp, \"<option value=\\\"%s\\\">%s</option>\\n\", itt.second.c_str(), itt.first.c_str());\n\t\t\t\tcontent_part += szTmp;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::DisplayTimerTypesCombo(std::string & content_part)\n\t\t{\n\t\t\tchar szTmp[200];\n\t\t\tfor (int ii = 0; ii < TTYPE_END; ii++)\n\t\t\t{\n\t\t\t\tsprintf(szTmp, \"<option data-i18n=\\\"%s\\\" value=\\\"%d\\\">%s</option>\\n\", Timer_Type_Desc(ii), ii, Timer_Type_Desc(ii));\n\t\t\t\tcontent_part += szTmp;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::LoadUsers()\n\t\t{\n\t\t\tClearUserPasswords();\n\t\t\tstd::string WebUserName, WebPassword;\n\t\t\tint nValue = 0;\n\t\t\tif (m_sql.GetPreferencesVar(\"WebUserName\", nValue, WebUserName))\n\t\t\t{\n\t\t\t\tif (m_sql.GetPreferencesVar(\"WebPassword\", nValue, WebPassword))\n\t\t\t\t{\n\t\t\t\t\tif ((WebUserName != \"\") && (WebPassword != \"\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tWebUserName = base64_decode(WebUserName);\n\t\t\t\t\t\t//WebPassword = WebPassword;\n\t\t\t\t\t\tAddUser(10000, WebUserName, WebPassword, URIGHTS_ADMIN, 0xFFFF);\n\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID, Active, Username, Password, Rights, TabsEnabled FROM Users\");\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\tint bIsActive = static_cast<int>(atoi(sd[1].c_str()));\n\t\t\t\t\t\t\t\tif (bIsActive)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tunsigned long ID = (unsigned long)atol(sd[0].c_str());\n\n\t\t\t\t\t\t\t\t\tstd::string username = base64_decode(sd[2]);\n\t\t\t\t\t\t\t\t\tstd::string password = sd[3];\n\n\t\t\t\t\t\t\t\t\t_eUserRights rights = (_eUserRights)atoi(sd[4].c_str());\n\t\t\t\t\t\t\t\t\tint activetabs = atoi(sd[5].c_str());\n\n\t\t\t\t\t\t\t\t\tAddUser(ID, username, password, rights, activetabs);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tm_mainworker.LoadSharedUsers();\n\t\t}\n\n\t\tvoid CWebServer::AddUser(const unsigned long ID, const std::string &username, const std::string &password, const int userrights, const int activetabs)\n\t\t{\n\t\t\tstd::vector<std::vector<std::string> > result = m_sql.safe_query(\"SELECT COUNT(*) FROM SharedDevices WHERE (SharedUserID == '%d')\", ID);\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\t_tWebUserPassword wtmp;\n\t\t\twtmp.ID = ID;\n\t\t\twtmp.Username = username;\n\t\t\twtmp.Password = password;\n\t\t\twtmp.userrights = (_eUserRights)userrights;\n\t\t\twtmp.ActiveTabs = activetabs;\n\t\t\twtmp.TotSensors = atoi(result[0][0].c_str());\n\t\t\tm_users.push_back(wtmp);\n\n\t\t\tm_pWebEm->AddUserPassword(ID, username, password, (_eUserRights)userrights, activetabs);\n\t\t}\n\n\t\tvoid CWebServer::ClearUserPasswords()\n\t\t{\n\t\t\tm_users.clear();\n\t\t\tm_pWebEm->ClearUserPasswords();\n\t\t}\n\n\t\tint CWebServer::FindUser(const char* szUserName)\n\t\t{\n\t\t\tint iUser = 0;\n\t\t\tfor (const auto & itt : m_users)\n\t\t\t{\n\t\t\t\tif (itt.Username == szUserName)\n\t\t\t\t\treturn iUser;\n\t\t\t\tiUser++;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\tbool CWebServer::FindAdminUser()\n\t\t{\n\t\t\tfor (const auto & itt : m_users)\n\t\t\t{\n\t\t\t\tif (itt.userrights == URIGHTS_ADMIN)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tvoid CWebServer::PostSettings(WebEmSession & session, const request& req, std::string & redirect_uri)\n\t\t{\n\t\t\tredirect_uri = \"/index.html\";\n\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string Latitude = request::findValue(&req, \"Latitude\");\n\t\t\tstd::string Longitude = request::findValue(&req, \"Longitude\");\n\t\t\tif ((Latitude != \"\") && (Longitude != \"\"))\n\t\t\t{\n\t\t\t\tstd::string LatLong = Latitude + \";\" + Longitude;\n\t\t\t\tm_sql.UpdatePreferencesVar(\"Location\", LatLong.c_str());\n\t\t\t\tm_mainworker.GetSunSettings();\n\t\t\t}\n\t\t\tm_notifications.ConfigFromGetvars(req, true);\n\t\t\tstd::string DashboardType = request::findValue(&req, \"DashboardType\");\n\t\t\tm_sql.UpdatePreferencesVar(\"DashboardType\", atoi(DashboardType.c_str()));\n\t\t\tstd::string MobileType = request::findValue(&req, \"MobileType\");\n\t\t\tm_sql.UpdatePreferencesVar(\"MobileType\", atoi(MobileType.c_str()));\n\n\t\t\tint nUnit = atoi(request::findValue(&req, \"WindUnit\").c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"WindUnit\", nUnit);\n\t\t\tm_sql.m_windunit = (_eWindUnit)nUnit;\n\n\t\t\tnUnit = atoi(request::findValue(&req, \"TempUnit\").c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"TempUnit\", nUnit);\n\t\t\tm_sql.m_tempunit = (_eTempUnit)nUnit;\n\n\t\t\tnUnit = atoi(request::findValue(&req, \"WeightUnit\").c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"WeightUnit\", nUnit);\n\t\t\tm_sql.m_weightunit = (_eWeightUnit)nUnit;\n\n\n\t\t\tm_sql.SetUnitsAndScale();\n\n\t\t\tstd::string AuthenticationMethod = request::findValue(&req, \"AuthenticationMethod\");\n\t\t\t_eAuthenticationMethod amethod = (_eAuthenticationMethod)atoi(AuthenticationMethod.c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"AuthenticationMethod\", static_cast<int>(amethod));\n\t\t\tm_pWebEm->SetAuthenticationMethod(amethod);\n\n\t\t\tstd::string ReleaseChannel = request::findValue(&req, \"ReleaseChannel\");\n\t\t\tm_sql.UpdatePreferencesVar(\"ReleaseChannel\", atoi(ReleaseChannel.c_str()));\n\n\t\t\tstd::string LightHistoryDays = request::findValue(&req, \"LightHistoryDays\");\n\t\t\tm_sql.UpdatePreferencesVar(\"LightHistoryDays\", atoi(LightHistoryDays.c_str()));\n\n\t\t\tstd::string s5MinuteHistoryDays = request::findValue(&req, \"ShortLogDays\");\n\t\t\tm_sql.UpdatePreferencesVar(\"5MinuteHistoryDays\", atoi(s5MinuteHistoryDays.c_str()));\n\n\t\t\tint iShortLogInterval = atoi(request::findValue(&req, \"ShortLogInterval\").c_str());\n\t\t\tif (iShortLogInterval < 1)\n\t\t\t\tiShortLogInterval = 5;\n\t\t\tm_sql.UpdatePreferencesVar(\"ShortLogInterval\", iShortLogInterval);\n\t\t\tm_sql.m_ShortLogInterval = iShortLogInterval;\n\n\t\t\tstd::string sElectricVoltage = request::findValue(&req, \"ElectricVoltage\");\n\t\t\tm_sql.UpdatePreferencesVar(\"ElectricVoltage\", atoi(sElectricVoltage.c_str()));\n\n\t\t\tstd::string sCM113DisplayType = request::findValue(&req, \"CM113DisplayType\");\n\t\t\tm_sql.UpdatePreferencesVar(\"CM113DisplayType\", atoi(sCM113DisplayType.c_str()));\n\n\t\t\tstd::string WebUserName = base64_encode(CURLEncode::URLDecode(request::findValue(&req, \"WebUserName\")));\n\t\t\tstd::string WebPassword = CURLEncode::URLDecode(request::findValue(&req, \"WebPassword\"));\n\n\t\t\t//Get old username/password\n\t\t\tstd::string sOldWebLogin;\n\t\t\tstd::string sOldWebPassword;\n\t\t\tm_sql.GetPreferencesVar(\"WebUserName\", sOldWebLogin);\n\t\t\tm_sql.GetPreferencesVar(\"WebPassword\", sOldWebPassword);\n\n\t\t\tbool bHaveAdminUserPasswordChange = false;\n\n\t\t\tif ((WebUserName == sOldWebLogin) && (WebPassword.empty()))\n\t\t\t{\n\t\t\t\t//All is OK, no changes\n\t\t\t}\n\t\t\telse if (WebUserName.empty() || WebPassword.empty())\n\t\t\t{\n\t\t\t\t//If no Admin User/Password is specified, we clear them\n\t\t\t\tif ((!sOldWebLogin.empty()) || (!sOldWebPassword.empty()))\n\t\t\t\t\tbHaveAdminUserPasswordChange = true;\n\t\t\t\tWebUserName = \"\";\n\t\t\t\tWebPassword = \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ((WebUserName != sOldWebLogin) || (WebPassword != sOldWebPassword))\n\t\t\t\t{\n\t\t\t\t\tbHaveAdminUserPasswordChange = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Invalid sessions of WebUser when the username or password has been changed\n\t\t\tif (bHaveAdminUserPasswordChange)\n\t\t\t{\n\t\t\t\tRemoveUsersSessions(sOldWebLogin, session);\n\t\t\t\tm_sql.UpdatePreferencesVar(\"WebUserName\", WebUserName.c_str());\n\t\t\t\tm_sql.UpdatePreferencesVar(\"WebPassword\", WebPassword.c_str());\n\t\t\t}\n\n\t\t\tstd::string WebLocalNetworks = CURLEncode::URLDecode(request::findValue(&req, \"WebLocalNetworks\"));\n\t\t\tstd::string WebRemoteProxyIPs = CURLEncode::URLDecode(request::findValue(&req, \"WebRemoteProxyIPs\"));\n\t\t\tm_sql.UpdatePreferencesVar(\"WebLocalNetworks\", WebLocalNetworks.c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"WebRemoteProxyIPs\", WebRemoteProxyIPs.c_str());\n\n\t\t\tLoadUsers();\n\t\t\tm_pWebEm->ClearLocalNetworks();\n\t\t\tstd::vector<std::string> strarray;\n\t\t\tStringSplit(WebLocalNetworks, \";\", strarray);\n\t\t\tfor (const auto & itt : strarray)\n\t\t\t\tm_pWebEm->AddLocalNetworks(itt);\n\t\t\t//add local hostname\n\t\t\tm_pWebEm->AddLocalNetworks(\"\");\n\n\t\t\tm_pWebEm->ClearRemoteProxyIPs();\n\t\t\tstrarray.clear();\n\t\t\tStringSplit(WebRemoteProxyIPs, \";\", strarray);\n\t\t\tfor (const auto & itt : strarray)\n\t\t\t\tm_pWebEm->AddRemoteProxyIPs(itt);\n\n\t\t\tif (session.username.empty())\n\t\t\t{\n\t\t\t\t//Local network could be changed so lets for a check here\n\t\t\t\tsession.rights = -1;\n\t\t\t}\n\n\t\t\tstd::string SecPassword = request::findValue(&req, \"SecPassword\");\n\t\t\tSecPassword = CURLEncode::URLDecode(SecPassword);\n\t\t\tif (SecPassword.size() != 32)\n\t\t\t{\n\t\t\t\tSecPassword = GenerateMD5Hash(SecPassword);\n\t\t\t}\n\t\t\tm_sql.UpdatePreferencesVar(\"SecPassword\", SecPassword.c_str());\n\n\t\t\tstd::string ProtectionPassword = request::findValue(&req, \"ProtectionPassword\");\n\t\t\tProtectionPassword = CURLEncode::URLDecode(ProtectionPassword);\n\t\t\tif (ProtectionPassword.size() != 32)\n\t\t\t{\n\t\t\t\tProtectionPassword = GenerateMD5Hash(ProtectionPassword);\n\t\t\t}\n\t\t\tm_sql.UpdatePreferencesVar(\"ProtectionPassword\", ProtectionPassword.c_str());\n\n\t\t\tint EnergyDivider = atoi(request::findValue(&req, \"EnergyDivider\").c_str());\n\t\t\tint GasDivider = atoi(request::findValue(&req, \"GasDivider\").c_str());\n\t\t\tint WaterDivider = atoi(request::findValue(&req, \"WaterDivider\").c_str());\n\t\t\tif (EnergyDivider < 1)\n\t\t\t\tEnergyDivider = 1000;\n\t\t\tif (GasDivider < 1)\n\t\t\t\tGasDivider = 100;\n\t\t\tif (WaterDivider < 1)\n\t\t\t\tWaterDivider = 100;\n\t\t\tm_sql.UpdatePreferencesVar(\"MeterDividerEnergy\", EnergyDivider);\n\t\t\tm_sql.UpdatePreferencesVar(\"MeterDividerGas\", GasDivider);\n\t\t\tm_sql.UpdatePreferencesVar(\"MeterDividerWater\", WaterDivider);\n\n\t\t\tstd::string scheckforupdates = request::findValue(&req, \"checkforupdates\");\n\t\t\tm_sql.UpdatePreferencesVar(\"UseAutoUpdate\", (scheckforupdates == \"on\" ? 1 : 0));\n\n\t\t\tstd::string senableautobackup = request::findValue(&req, \"enableautobackup\");\n\t\t\tm_sql.UpdatePreferencesVar(\"UseAutoBackup\", (senableautobackup == \"on\" ? 1 : 0));\n\n\t\t\tfloat CostEnergy = static_cast<float>(atof(request::findValue(&req, \"CostEnergy\").c_str()));\n\t\t\tfloat CostEnergyT2 = static_cast<float>(atof(request::findValue(&req, \"CostEnergyT2\").c_str()));\n\t\t\tfloat CostEnergyR1 = static_cast<float>(atof(request::findValue(&req, \"CostEnergyR1\").c_str()));\n\t\t\tfloat CostEnergyR2 = static_cast<float>(atof(request::findValue(&req, \"CostEnergyR2\").c_str()));\n\t\t\tfloat CostGas = static_cast<float>(atof(request::findValue(&req, \"CostGas\").c_str()));\n\t\t\tfloat CostWater = static_cast<float>(atof(request::findValue(&req, \"CostWater\").c_str()));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostEnergy\", int(CostEnergy*10000.0f));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostEnergyT2\", int(CostEnergyT2*10000.0f));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostEnergyR1\", int(CostEnergyR1*10000.0f));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostEnergyR2\", int(CostEnergyR2*10000.0f));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostGas\", int(CostGas*10000.0f));\n\t\t\tm_sql.UpdatePreferencesVar(\"CostWater\", int(CostWater*10000.0f));\n\n\t\t\tint rnOldvalue = 0;\n\t\t\tint rnvalue = 0;\n\n\t\t\tm_sql.GetPreferencesVar(\"ActiveTimerPlan\", rnOldvalue);\n\t\t\trnvalue = atoi(request::findValue(&req, \"ActiveTimerPlan\").c_str());\n\t\t\tif (rnOldvalue != rnvalue)\n\t\t\t{\n\t\t\t\tm_sql.UpdatePreferencesVar(\"ActiveTimerPlan\", rnvalue);\n\t\t\t\tm_sql.m_ActiveTimerPlan = rnvalue;\n\t\t\t\tm_mainworker.m_scheduler.ReloadSchedules();\n\t\t\t}\n\t\t\tm_sql.UpdatePreferencesVar(\"DoorbellCommand\", atoi(request::findValue(&req, \"DoorbellCommand\").c_str()));\n\t\t\tm_sql.UpdatePreferencesVar(\"SmartMeterType\", atoi(request::findValue(&req, \"SmartMeterType\").c_str()));\n\n\t\t\tstd::string EnableTabFloorplans = request::findValue(&req, \"EnableTabFloorplans\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabFloorplans\", (EnableTabFloorplans == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabLights = request::findValue(&req, \"EnableTabLights\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabLights\", (EnableTabLights == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabTemp = request::findValue(&req, \"EnableTabTemp\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabTemp\", (EnableTabTemp == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabWeather = request::findValue(&req, \"EnableTabWeather\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabWeather\", (EnableTabWeather == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabUtility = request::findValue(&req, \"EnableTabUtility\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabUtility\", (EnableTabUtility == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabScenes = request::findValue(&req, \"EnableTabScenes\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabScenes\", (EnableTabScenes == \"on\" ? 1 : 0));\n\t\t\tstd::string EnableTabCustom = request::findValue(&req, \"EnableTabCustom\");\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableTabCustom\", (EnableTabCustom == \"on\" ? 1 : 0));\n\n\t\t\tm_sql.GetPreferencesVar(\"NotificationSensorInterval\", rnOldvalue);\n\t\t\trnvalue = atoi(request::findValue(&req, \"NotificationSensorInterval\").c_str());\n\t\t\tif (rnOldvalue != rnvalue)\n\t\t\t{\n\t\t\t\tm_sql.UpdatePreferencesVar(\"NotificationSensorInterval\", rnvalue);\n\t\t\t\tm_notifications.ReloadNotifications();\n\t\t\t}\n\t\t\tm_sql.GetPreferencesVar(\"NotificationSwitchInterval\", rnOldvalue);\n\t\t\trnvalue = atoi(request::findValue(&req, \"NotificationSwitchInterval\").c_str());\n\t\t\tif (rnOldvalue != rnvalue)\n\t\t\t{\n\t\t\t\tm_sql.UpdatePreferencesVar(\"NotificationSwitchInterval\", rnvalue);\n\t\t\t\tm_notifications.ReloadNotifications();\n\t\t\t}\n\t\t\tstd::string RaspCamParams = request::findValue(&req, \"RaspCamParams\");\n\t\t\tif (RaspCamParams != \"\")\n\t\t\t{\n\t\t\t\tif (IsArgumentSecure(RaspCamParams))\n\t\t\t\t\tm_sql.UpdatePreferencesVar(\"RaspCamParams\", RaspCamParams.c_str());\n\t\t\t}\n\n\t\t\tstd::string UVCParams = request::findValue(&req, \"UVCParams\");\n\t\t\tif (UVCParams != \"\")\n\t\t\t{\n\t\t\t\tif (IsArgumentSecure(UVCParams))\n\t\t\t\t\tm_sql.UpdatePreferencesVar(\"UVCParams\", UVCParams.c_str());\n\t\t\t}\n\n\t\t\tstd::string EnableNewHardware = request::findValue(&req, \"AcceptNewHardware\");\n\t\t\tint iEnableNewHardware = (EnableNewHardware == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"AcceptNewHardware\", iEnableNewHardware);\n\t\t\tm_sql.m_bAcceptNewHardware = (iEnableNewHardware == 1);\n\n\t\t\tstd::string HideDisabledHardwareSensors = request::findValue(&req, \"HideDisabledHardwareSensors\");\n\t\t\tint iHideDisabledHardwareSensors = (HideDisabledHardwareSensors == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"HideDisabledHardwareSensors\", iHideDisabledHardwareSensors);\n\n\t\t\tstd::string ShowUpdateEffect = request::findValue(&req, \"ShowUpdateEffect\");\n\t\t\tint iShowUpdateEffect = (ShowUpdateEffect == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"ShowUpdateEffect\", iShowUpdateEffect);\n\n\t\t\tstd::string SendErrorsAsNotification = request::findValue(&req, \"SendErrorsAsNotification\");\n\t\t\tint iSendErrorsAsNotification = (SendErrorsAsNotification == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"SendErrorsAsNotification\", iSendErrorsAsNotification);\n\t\t\t_log.ForwardErrorsToNotificationSystem(iSendErrorsAsNotification != 0);\n\n\t\t\tstd::string DegreeDaysBaseTemperature = request::findValue(&req, \"DegreeDaysBaseTemperature\");\n\t\t\tm_sql.UpdatePreferencesVar(\"DegreeDaysBaseTemperature\", DegreeDaysBaseTemperature);\n\n\t\t\trnOldvalue = 0;\n\t\t\tm_sql.GetPreferencesVar(\"EnableEventScriptSystem\", rnOldvalue);\n\t\t\tstd::string EnableEventScriptSystem = request::findValue(&req, \"EnableEventScriptSystem\");\n\t\t\tint iEnableEventScriptSystem = (EnableEventScriptSystem == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"EnableEventScriptSystem\", iEnableEventScriptSystem);\n\t\t\tm_sql.m_bEnableEventSystem = (iEnableEventScriptSystem == 1);\n\t\t\tif (iEnableEventScriptSystem != rnOldvalue)\n\t\t\t{\n\t\t\t\tm_mainworker.m_eventsystem.SetEnabled(m_sql.m_bEnableEventSystem);\n\t\t\t\tm_mainworker.m_eventsystem.StartEventSystem();\n\t\t\t}\n\n\t\t\trnOldvalue = 0;\n\t\t\tm_sql.GetPreferencesVar(\"DisableDzVentsSystem\", rnOldvalue);\n\t\t\tstd::string DisableDzVentsSystem = request::findValue(&req, \"DisableDzVentsSystem\");\n\t\t\tint iDisableDzVentsSystem = (DisableDzVentsSystem == \"on\" ? 0 : 1);\n\t\t\tm_sql.UpdatePreferencesVar(\"DisableDzVentsSystem\", iDisableDzVentsSystem);\n\t\t\tm_sql.m_bDisableDzVentsSystem = (iDisableDzVentsSystem == 1);\n\t\t\tif (m_sql.m_bEnableEventSystem && !iDisableDzVentsSystem && iDisableDzVentsSystem != rnOldvalue)\n\t\t\t{\n\t\t\t\tm_mainworker.m_eventsystem.LoadEvents();\n\t\t\t\tm_mainworker.m_eventsystem.GetCurrentStates();\n\t\t\t}\n\t\t\tm_sql.UpdatePreferencesVar(\"DzVentsLogLevel\", atoi(request::findValue(&req, \"DzVentsLogLevel\").c_str()));\n\n\t\t\tstd::string LogEventScriptTrigger = request::findValue(&req, \"LogEventScriptTrigger\");\n\t\t\tm_sql.m_bLogEventScriptTrigger = (LogEventScriptTrigger == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"LogEventScriptTrigger\", m_sql.m_bLogEventScriptTrigger);\n\n\t\t\tstd::string EnableWidgetOrdering = request::findValue(&req, \"AllowWidgetOrdering\");\n\t\t\tint iEnableAllowWidgetOrdering = (EnableWidgetOrdering == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"AllowWidgetOrdering\", iEnableAllowWidgetOrdering);\n\t\t\tm_sql.m_bAllowWidgetOrdering = (iEnableAllowWidgetOrdering == 1);\n\n\t\t\trnOldvalue = 0;\n\t\t\tm_sql.GetPreferencesVar(\"RemoteSharedPort\", rnOldvalue);\n\n\t\t\tm_sql.UpdatePreferencesVar(\"RemoteSharedPort\", atoi(request::findValue(&req, \"RemoteSharedPort\").c_str()));\n\n\t\t\trnvalue = 0;\n\t\t\tm_sql.GetPreferencesVar(\"RemoteSharedPort\", rnvalue);\n\n\t\t\tif (rnvalue != rnOldvalue)\n\t\t\t{\n\t\t\t\tm_mainworker.m_sharedserver.StopServer();\n\t\t\t\tif (rnvalue != 0)\n\t\t\t\t{\n\t\t\t\t\tchar szPort[100];\n\t\t\t\t\tsprintf(szPort, \"%d\", rnvalue);\n\t\t\t\t\tm_mainworker.m_sharedserver.StartServer(\"::\", szPort);\n\t\t\t\t\tm_mainworker.LoadSharedUsers();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tm_sql.UpdatePreferencesVar(\"Language\", request::findValue(&req, \"Language\").c_str());\n\t\t\tstd::string SelectedTheme = request::findValue(&req, \"Themes\");\n\t\t\tm_sql.UpdatePreferencesVar(\"WebTheme\", SelectedTheme.c_str());\n\t\t\tm_pWebEm->SetWebTheme(SelectedTheme);\n\t\t\tstd::string Title = request::findValue(&req, \"Title\").c_str();\n\t\t\tm_sql.UpdatePreferencesVar(\"Title\", (Title.empty()) ? \"Domoticz\" : Title);\n\n\t\t\tm_sql.GetPreferencesVar(\"RandomTimerFrame\", rnOldvalue);\n\t\t\trnvalue = atoi(request::findValue(&req, \"RandomSpread\").c_str());\n\t\t\tif (rnOldvalue != rnvalue)\n\t\t\t{\n\t\t\t\tm_sql.UpdatePreferencesVar(\"RandomTimerFrame\", rnvalue);\n\t\t\t\tm_mainworker.m_scheduler.ReloadSchedules();\n\t\t\t}\n\n\t\t\tm_sql.UpdatePreferencesVar(\"SecOnDelay\", atoi(request::findValue(&req, \"SecOnDelay\").c_str()));\n\n\t\t\tint sensortimeout = atoi(request::findValue(&req, \"SensorTimeout\").c_str());\n\t\t\tif (sensortimeout < 10)\n\t\t\t\tsensortimeout = 10;\n\t\t\tm_sql.UpdatePreferencesVar(\"SensorTimeout\", sensortimeout);\n\n\t\t\tint batterylowlevel = atoi(request::findValue(&req, \"BatterLowLevel\").c_str());\n\t\t\tif (batterylowlevel > 100)\n\t\t\t\tbatterylowlevel = 100;\n\t\t\tm_sql.GetPreferencesVar(\"BatteryLowNotification\", rnOldvalue);\n\t\t\tm_sql.UpdatePreferencesVar(\"BatteryLowNotification\", batterylowlevel);\n\t\t\tif ((rnOldvalue != batterylowlevel) && (batterylowlevel != 0))\n\t\t\t\tm_sql.CheckBatteryLow();\n\n\t\t\tint nValue = 0;\n\t\t\tnValue = atoi(request::findValue(&req, \"FloorplanPopupDelay\").c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanPopupDelay\", nValue);\n\t\t\tstd::string FloorplanFullscreenMode = request::findValue(&req, \"FloorplanFullscreenMode\");\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanFullscreenMode\", (FloorplanFullscreenMode == \"on\" ? 1 : 0));\n\t\t\tstd::string FloorplanAnimateZoom = request::findValue(&req, \"FloorplanAnimateZoom\");\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanAnimateZoom\", (FloorplanAnimateZoom == \"on\" ? 1 : 0));\n\t\t\tstd::string FloorplanShowSensorValues = request::findValue(&req, \"FloorplanShowSensorValues\");\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanShowSensorValues\", (FloorplanShowSensorValues == \"on\" ? 1 : 0));\n\t\t\tstd::string FloorplanShowSwitchValues = request::findValue(&req, \"FloorplanShowSwitchValues\");\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanShowSwitchValues\", (FloorplanShowSwitchValues == \"on\" ? 1 : 0));\n\t\t\tstd::string FloorplanShowSceneNames = request::findValue(&req, \"FloorplanShowSceneNames\");\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanShowSceneNames\", (FloorplanShowSceneNames == \"on\" ? 1 : 0));\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanRoomColour\", CURLEncode::URLDecode(request::findValue(&req, \"FloorplanRoomColour\").c_str()).c_str());\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanActiveOpacity\", atoi(request::findValue(&req, \"FloorplanActiveOpacity\").c_str()));\n\t\t\tm_sql.UpdatePreferencesVar(\"FloorplanInactiveOpacity\", atoi(request::findValue(&req, \"FloorplanInactiveOpacity\").c_str()));\n\n#ifndef NOCLOUD\n\t\t\tstd::string md_userid, md_password, pf_userid, pf_password;\n\t\t\tint md_subsystems, pf_subsystems;\n\t\t\tm_sql.GetPreferencesVar(\"MyDomoticzUserId\", pf_userid);\n\t\t\tm_sql.GetPreferencesVar(\"MyDomoticzPassword\", pf_password);\n\t\t\tm_sql.GetPreferencesVar(\"MyDomoticzSubsystems\", pf_subsystems);\n\t\t\tmd_userid = CURLEncode::URLDecode(request::findValue(&req, \"MyDomoticzUserId\"));\n\t\t\tmd_password = CURLEncode::URLDecode(request::findValue(&req, \"MyDomoticzPassword\"));\n\t\t\tmd_subsystems = (request::findValue(&req, \"SubsystemHttp\").empty() ? 0 : 1) + (request::findValue(&req, \"SubsystemShared\").empty() ? 0 : 2) + (request::findValue(&req, \"SubsystemApps\").empty() ? 0 : 4);\n\t\t\tif (md_userid != pf_userid || md_password != pf_password || md_subsystems != pf_subsystems) {\n\t\t\t\tm_sql.UpdatePreferencesVar(\"MyDomoticzUserId\", md_userid);\n\t\t\t\tif (md_password != pf_password) {\n\t\t\t\t\tmd_password = base64_encode(md_password);\n\t\t\t\t\tm_sql.UpdatePreferencesVar(\"MyDomoticzPassword\", md_password);\n\t\t\t\t}\n\t\t\t\tm_sql.UpdatePreferencesVar(\"MyDomoticzSubsystems\", md_subsystems);\n\t\t\t\tm_webservers.RestartProxy();\n\t\t\t}\n#endif\n\n\t\t\tm_sql.UpdatePreferencesVar(\"OneWireSensorPollPeriod\", atoi(request::findValue(&req, \"OneWireSensorPollPeriod\").c_str()));\n\t\t\tm_sql.UpdatePreferencesVar(\"OneWireSwitchPollPeriod\", atoi(request::findValue(&req, \"OneWireSwitchPollPeriod\").c_str()));\n\n\t\t\tstd::string IFTTTEnabled = request::findValue(&req, \"IFTTTEnabled\");\n\t\t\tint iIFTTTEnabled = (IFTTTEnabled == \"on\" ? 1 : 0);\n\t\t\tm_sql.UpdatePreferencesVar(\"IFTTTEnabled\", iIFTTTEnabled);\n\t\t\tstd::string szKey = request::findValue(&req, \"IFTTTAPI\");\n\t\t\tm_sql.UpdatePreferencesVar(\"IFTTTAPI\", base64_encode(szKey));\n\n\t\t\tm_notifications.LoadConfig();\n#ifdef ENABLE_PYTHON\n\t\t\t//Signal plugins to update Settings dictionary\n\t\t\tPluginLoadConfig();\n#endif\n\t\t}\n\n\t\tvoid CWebServer::RestoreDatabase(WebEmSession & session, const request& req, std::string & redirect_uri)\n\t\t{\n\t\t\tredirect_uri = \"/index.html\";\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string dbasefile = request::findValue(&req, \"dbasefile\");\n\t\t\tif (dbasefile.empty()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tm_mainworker.StopDomoticzHardware();\n\n\t\t\tm_sql.RestoreDatabase(dbasefile);\n\t\t\tm_mainworker.AddAllDomoticzHardware();\n\t\t}\n\n\t\tstruct _tHardwareListInt {\n\t\t\tstd::string Name;\n\t\t\tint HardwareTypeVal;\n\t\t\tstd::string HardwareType;\n\t\t\tbool Enabled;\n\t\t\tstd::string Mode1; // Used to flag DimmerType as relative for some old LimitLessLight type bulbs\n\t\t\tstd::string Mode2; // Used to flag DimmerType as relative for some old LimitLessLight type bulbs\n\t\t} tHardwareList;\n\n\t\tvoid CWebServer::GetJSonDevices(\n\t\t\tJson::Value &root,\n\t\t\tconst std::string &rused,\n\t\t\tconst std::string &rfilter,\n\t\t\tconst std::string &order,\n\t\t\tconst std::string &rowid,\n\t\t\tconst std::string &planID,\n\t\t\tconst std::string &floorID,\n\t\t\tconst bool bDisplayHidden,\n\t\t\tconst bool bDisplayDisabled,\n\t\t\tconst bool bFetchFavorites,\n\t\t\tconst time_t LastUpdate,\n\t\t\tconst std::string &username,\n\t\t\tconst std::string &hardwareid)\n\t\t{\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\ttime_t now = mytime(NULL);\n\t\t\tstruct tm tm1;\n\t\t\tlocaltime_r(&now, &tm1);\n\t\t\tstruct tm tLastUpdate;\n\t\t\tlocaltime_r(&now, &tLastUpdate);\n\n\t\t\tconst time_t iLastUpdate = LastUpdate - 1;\n\n\t\t\tint SensorTimeOut = 60;\n\t\t\tm_sql.GetPreferencesVar(\"SensorTimeout\", SensorTimeOut);\n\n\t\t\t//Get All Hardware ID's/Names, need them later\n\t\t\tstd::map<int, _tHardwareListInt> _hardwareNames;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Enabled, Type, Mode1, Mode2 FROM Hardware\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\t_tHardwareListInt tlist;\n\t\t\t\t\tint ID = atoi(sd[0].c_str());\n\t\t\t\t\ttlist.Name = sd[1];\n\t\t\t\t\ttlist.Enabled = (atoi(sd[2].c_str()) != 0);\n\t\t\t\t\ttlist.HardwareTypeVal = atoi(sd[3].c_str());\n#ifndef ENABLE_PYTHON\n\t\t\t\t\ttlist.HardwareType = Hardware_Type_Desc(tlist.HardwareTypeVal);\n#else\n\t\t\t\t\tif (tlist.HardwareTypeVal != HTYPE_PythonPlugin)\n\t\t\t\t\t{\n\t\t\t\t\t\ttlist.HardwareType = Hardware_Type_Desc(tlist.HardwareTypeVal);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttlist.HardwareType = PluginHardwareDesc(ID);\n\t\t\t\t\t}\n#endif\n\t\t\t\t\ttlist.Mode1 = sd[4];\n\t\t\t\t\ttlist.Mode2 = sd[5];\n\t\t\t\t\t_hardwareNames[ID] = tlist;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troot[\"ActTime\"] = static_cast<int>(now);\n\n\t\t\tchar szTmp[300];\n\n\t\t\tif (!m_mainworker.m_LastSunriseSet.empty())\n\t\t\t{\n\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\tStringSplit(m_mainworker.m_LastSunriseSet, \";\", strarray);\n\t\t\t\tif (strarray.size() == 10)\n\t\t\t\t{\n\t\t\t\t\t//strftime(szTmp, 80, \"%b %d %Y %X\", &tm1);\n\t\t\t\t\tstrftime(szTmp, 80, \"%Y-%m-%d %X\", &tm1);\n\t\t\t\t\troot[\"ServerTime\"] = szTmp;\n\t\t\t\t\troot[\"Sunrise\"] = strarray[0];\n\t\t\t\t\troot[\"Sunset\"] = strarray[1];\n\t\t\t\t\troot[\"SunAtSouth\"] = strarray[2];\n\t\t\t\t\troot[\"CivTwilightStart\"] = strarray[3];\n\t\t\t\t\troot[\"CivTwilightEnd\"] = strarray[4];\n\t\t\t\t\troot[\"NautTwilightStart\"] = strarray[5];\n\t\t\t\t\troot[\"NautTwilightEnd\"] = strarray[6];\n\t\t\t\t\troot[\"AstrTwilightStart\"] = strarray[7];\n\t\t\t\t\troot[\"AstrTwilightEnd\"] = strarray[8];\n\t\t\t\t\troot[\"DayLength\"] = strarray[9];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchar szOrderBy[50];\n\t\t\tstd::string szQuery;\n\t\t\tbool isAlpha = true;\n\t\t\tconst std::string orderBy = order.c_str();\n\t\t\tfor (size_t i = 0; i < orderBy.size(); i++) {\n\t\t\t\tif (!isalpha(orderBy[i])) {\n\t\t\t\t\tisAlpha = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (order.empty() || (!isAlpha)) {\n\t\t\t\tstrcpy(szOrderBy, \"A.[Order],A.LastUpdate DESC\");\n\t\t\t} else {\n\t\t\t\tsprintf(szOrderBy, \"A.[Order],A.%%s ASC\");\n\t\t\t}\n\n\t\t\tunsigned char tempsign = m_sql.m_tempsign[0];\n\n\t\t\tbool bHaveUser = false;\n\t\t\tint iUser = -1;\n\t\t\tunsigned int totUserDevices = 0;\n\t\t\tbool bShowScenes = true;\n\t\t\tbHaveUser = (username != \"\");\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tiUser = FindUser(username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t{\n\t\t\t\t\t_eUserRights urights = m_users[iUser].userrights;\n\t\t\t\t\tif (urights != URIGHTS_ADMIN)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT DeviceRowID FROM SharedDevices WHERE (SharedUserID == %lu)\", m_users[iUser].ID);\n\t\t\t\t\t\ttotUserDevices = (unsigned int)result.size();\n\t\t\t\t\t\tbShowScenes = (m_users[iUser].ActiveTabs&(1 << 1)) != 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstd::set<std::string> _HiddenDevices;\n\t\t\tbool bAllowDeviceToBeHidden = false;\n\n\t\t\tint ii = 0;\n\t\t\tif (rfilter == \"all\")\n\t\t\t{\n\t\t\t\tif (\n\t\t\t\t\t(bShowScenes) &&\n\t\t\t\t\t((rused == \"all\") || (rused == \"true\"))\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t//add scenes\n\t\t\t\t\tif (rowid != \"\")\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT A.ID, A.Name, A.nValue, A.LastUpdate, A.Favorite, A.SceneType,\"\n\t\t\t\t\t\t\t\" A.Protected, B.XOffset, B.YOffset, B.PlanID, A.Description\"\n\t\t\t\t\t\t\t\" FROM Scenes as A\"\n\t\t\t\t\t\t\t\" LEFT OUTER JOIN DeviceToPlansMap as B ON (B.DeviceRowID==a.ID) AND (B.DevSceneType==1)\"\n\t\t\t\t\t\t\t\" WHERE (A.ID=='%q')\",\n\t\t\t\t\t\t\trowid.c_str());\n\t\t\t\t\telse if ((planID != \"\") && (planID != \"0\"))\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT A.ID, A.Name, A.nValue, A.LastUpdate, A.Favorite, A.SceneType,\"\n\t\t\t\t\t\t\t\" A.Protected, B.XOffset, B.YOffset, B.PlanID, A.Description\"\n\t\t\t\t\t\t\t\" FROM Scenes as A, DeviceToPlansMap as B WHERE (B.PlanID=='%q')\"\n\t\t\t\t\t\t\t\" AND (B.DeviceRowID==a.ID) AND (B.DevSceneType==1) ORDER BY B.[Order]\",\n\t\t\t\t\t\t\tplanID.c_str());\n\t\t\t\t\telse if ((floorID != \"\") && (floorID != \"0\"))\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT A.ID, A.Name, A.nValue, A.LastUpdate, A.Favorite, A.SceneType,\"\n\t\t\t\t\t\t\t\" A.Protected, B.XOffset, B.YOffset, B.PlanID, A.Description\"\n\t\t\t\t\t\t\t\" FROM Scenes as A, DeviceToPlansMap as B, Plans as C\"\n\t\t\t\t\t\t\t\" WHERE (C.FloorplanID=='%q') AND (C.ID==B.PlanID) AND (B.DeviceRowID==a.ID)\"\n\t\t\t\t\t\t\t\" AND (B.DevSceneType==1) ORDER BY B.[Order]\",\n\t\t\t\t\t\t\tfloorID.c_str());\n\t\t\t\t\telse {\n\t\t\t\t\t\tszQuery = (\n\t\t\t\t\t\t\t\"SELECT A.ID, A.Name, A.nValue, A.LastUpdate, A.Favorite, A.SceneType,\"\n\t\t\t\t\t\t\t\" A.Protected, B.XOffset, B.YOffset, B.PlanID, A.Description\"\n\t\t\t\t\t\t\t\" FROM Scenes as A\"\n\t\t\t\t\t\t\t\" LEFT OUTER JOIN DeviceToPlansMap as B ON (B.DeviceRowID==a.ID) AND (B.DevSceneType==1)\"\n\t\t\t\t\t\t\t\" ORDER BY \");\n\t\t\t\t\t\tszQuery += szOrderBy;\n                                                result = m_sql.safe_query(szQuery.c_str(), order.c_str());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\tunsigned char favorite = atoi(sd[4].c_str());\n\t\t\t\t\t\t\t//Check if we only want favorite devices\n\t\t\t\t\t\t\tif ((bFetchFavorites) && (!favorite))\n\t\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t\tstd::string sLastUpdate = sd[3];\n\n\t\t\t\t\t\t\tif (iLastUpdate != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttime_t cLastUpdate;\n\t\t\t\t\t\t\t\tParseSQLdatetime(cLastUpdate, tLastUpdate, sLastUpdate, tm1.tm_isdst);\n\t\t\t\t\t\t\t\tif (cLastUpdate <= iLastUpdate)\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tint nValue = atoi(sd[2].c_str());\n\n\t\t\t\t\t\t\tunsigned char scenetype = atoi(sd[5].c_str());\n\t\t\t\t\t\t\tint iProtected = atoi(sd[6].c_str());\n\n\t\t\t\t\t\t\tstd::string sSceneName = sd[1];\n\t\t\t\t\t\t\tif (!bDisplayHidden && sSceneName[0] == '$')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (scenetype == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = \"Scene\";\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"scene\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = \"Group\";\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"group\";\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// has this scene/group already been seen, now with different plan?\n\t\t\t\t\t\t\t// assume results are ordered such that same device is adjacent\n\t\t\t\t\t\t\t// if the idx and the Type are equal (type to prevent matching against Scene with same idx)\n\t\t\t\t\t\t\tstd::string thisIdx = sd[0];\n\n\t\t\t\t\t\t\tif ((ii > 0) && thisIdx == root[\"result\"][ii - 1][\"idx\"].asString()) {\n\t\t\t\t\t\t\t\tstd::string typeOfThisOne = root[\"result\"][ii][\"Type\"].asString();\n\t\t\t\t\t\t\t\tif (typeOfThisOne == root[\"result\"][ii - 1][\"Type\"].asString()) {\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii - 1][\"PlanIDs\"].append(atoi(sd[9].c_str()));\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sSceneName;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Description\"] = sd[10];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Favorite\"] = favorite;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sLastUpdate;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"PlanID\"] = sd[9].c_str();\n\t\t\t\t\t\t\tJson::Value jsonArray;\n\t\t\t\t\t\t\tjsonArray.append(atoi(sd[9].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"PlanIDs\"] = jsonArray;\n\n\t\t\t\t\t\t\tif (nValue == 0)\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"Off\";\n\t\t\t\t\t\t\telse if (nValue == 1)\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"On\";\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"Mixed\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = root[\"result\"][ii][\"Status\"];\n\t\t\t\t\t\t\tuint64_t camIDX = m_mainworker.m_cameras.IsDevSceneInCamera(1, sd[0]);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"UsedByCamera\"] = (camIDX != 0) ? true : false;\n\t\t\t\t\t\t\tif (camIDX != 0) {\n\t\t\t\t\t\t\t\tstd::stringstream scidx;\n\t\t\t\t\t\t\t\tscidx << camIDX;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CameraIdx\"] = scidx.str();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"XOffset\"] = atoi(sd[7].c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"YOffset\"] = atoi(sd[8].c_str());\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchar szData[250];\n\t\t\tif (totUserDevices == 0)\n\t\t\t{\n\t\t\t\t//All\n\t\t\t\tif (rowid != \"\")\n\t\t\t\t{\n\t\t\t\t\t//_log.Log(LOG_STATUS, \"Getting device with id: %s\", rowid.c_str());\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used, A.Type, A.SubType,\"\n\t\t\t\t\t\t\" A.SignalLevel, A.BatteryLevel, A.nValue, A.sValue,\"\n\t\t\t\t\t\t\" A.LastUpdate, A.Favorite, A.SwitchType, A.HardwareID,\"\n\t\t\t\t\t\t\" A.AddjValue, A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1, A.StrParam2,\"\n\t\t\t\t\t\t\" A.Protected, IFNULL(B.XOffset,0), IFNULL(B.YOffset,0), IFNULL(B.PlanID,0), A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus A LEFT OUTER JOIN DeviceToPlansMap as B ON (B.DeviceRowID==a.ID) \"\n\t\t\t\t\t\t\"WHERE (A.ID=='%q')\",\n\t\t\t\t\t\trowid.c_str());\n\t\t\t\t}\n\t\t\t\telse if ((planID != \"\") && (planID != \"0\"))\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, B.XOffset, B.YOffset,\"\n\t\t\t\t\t\t\" B.PlanID, A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, DeviceToPlansMap as B \"\n\t\t\t\t\t\t\"WHERE (B.PlanID=='%q') AND (B.DeviceRowID==a.ID)\"\n\t\t\t\t\t\t\" AND (B.DevSceneType==0) ORDER BY B.[Order]\",\n\t\t\t\t\t\tplanID.c_str());\n\t\t\t\telse if ((floorID != \"\") && (floorID != \"0\"))\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, B.XOffset, B.YOffset,\"\n\t\t\t\t\t\t\" B.PlanID, A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, DeviceToPlansMap as B,\"\n\t\t\t\t\t\t\" Plans as C \"\n\t\t\t\t\t\t\"WHERE (C.FloorplanID=='%q') AND (C.ID==B.PlanID)\"\n\t\t\t\t\t\t\" AND (B.DeviceRowID==a.ID) AND (B.DevSceneType==0) \"\n\t\t\t\t\t\t\"ORDER BY B.[Order]\",\n\t\t\t\t\t\tfloorID.c_str());\n\t\t\t\telse {\n\t\t\t\t\tif (!bDisplayHidden)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Build a list of Hidden Devices\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM Plans WHERE (Name=='$Hidden Devices')\");\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string pID = result[0][0];\n\t\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT DeviceRowID FROM DeviceToPlansMap WHERE (PlanID=='%q') AND (DevSceneType==0)\",\n\t\t\t\t\t\t\t\tpID.c_str());\n\t\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::vector<std::string> >::const_iterator ittP;\n\t\t\t\t\t\t\t\tfor (ittP = result.begin(); ittP != result.end(); ++ittP)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_HiddenDevices.insert(ittP[0][0]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbAllowDeviceToBeHidden = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (order.empty() || (!isAlpha))\n\t\t\t\t\t\tstrcpy(szOrderBy, \"A.[Order],A.LastUpdate DESC\");\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsprintf(szOrderBy, \"A.[Order],A.%%s ASC\");\n\t\t\t\t\t}\n\t\t\t\t\t//_log.Log(LOG_STATUS, \"Getting all devices: order by %s \", szOrderBy);\n\t\t\t\t\tif (hardwareid != \"\") {\n\t\t\t\t\t\tszQuery = (\n\t\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,A.Type, A.SubType,\"\n\t\t\t\t\t\t\t\" A.SignalLevel, A.BatteryLevel, A.nValue, A.sValue,\"\n\t\t\t\t\t\t\t\" A.LastUpdate, A.Favorite, A.SwitchType, A.HardwareID,\"\n\t\t\t\t\t\t\t\" A.AddjValue, A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1, A.StrParam2,\"\n\t\t\t\t\t\t\t\" A.Protected, IFNULL(B.XOffset,0), IFNULL(B.YOffset,0), IFNULL(B.PlanID,0), A.Description,\"\n\t\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\t\"FROM DeviceStatus as A LEFT OUTER JOIN DeviceToPlansMap as B \"\n\t\t\t\t\t\t\t\"ON (B.DeviceRowID==a.ID) AND (B.DevSceneType==0) \"\n\t\t\t\t\t\t\t\"WHERE (A.HardwareID == %q) \"\n\t\t\t\t\t\t\t\"ORDER BY \");\n\t\t\t\t\t\tszQuery += szOrderBy;\n\t\t\t\t\t\tresult = m_sql.safe_query(szQuery.c_str(), hardwareid.c_str(), order.c_str());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tszQuery = (\n\t\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,A.Type, A.SubType,\"\n\t\t\t\t\t\t\t\" A.SignalLevel, A.BatteryLevel, A.nValue, A.sValue,\"\n\t\t\t\t\t\t\t\" A.LastUpdate, A.Favorite, A.SwitchType, A.HardwareID,\"\n\t\t\t\t\t\t\t\" A.AddjValue, A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1, A.StrParam2,\"\n\t\t\t\t\t\t\t\" A.Protected, IFNULL(B.XOffset,0), IFNULL(B.YOffset,0), IFNULL(B.PlanID,0), A.Description,\"\n\t\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\t\"FROM DeviceStatus as A LEFT OUTER JOIN DeviceToPlansMap as B \"\n\t\t\t\t\t\t\t\"ON (B.DeviceRowID==a.ID) AND (B.DevSceneType==0) \"\n\t\t\t\t\t\t\t\"ORDER BY \");\n\t\t\t\t\t\tszQuery += szOrderBy;\n\t\t\t\t\t\tresult = m_sql.safe_query(szQuery.c_str(), order.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (iUser == -1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//Specific devices\n\t\t\t\tif (rowid != \"\")\n\t\t\t\t{\n\t\t\t\t\t//_log.Log(LOG_STATUS, \"Getting device with id: %s for user %lu\", rowid.c_str(), m_users[iUser].ID);\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, 0 as XOffset,\"\n\t\t\t\t\t\t\" 0 as YOffset, 0 as PlanID, A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, SharedDevices as B \"\n\t\t\t\t\t\t\"WHERE (B.DeviceRowID==a.ID)\"\n\t\t\t\t\t\t\" AND (B.SharedUserID==%lu) AND (A.ID=='%q')\",\n\t\t\t\t\t\tm_users[iUser].ID, rowid.c_str());\n\t\t\t\t}\n\t\t\t\telse if ((planID != \"\") && (planID != \"0\"))\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, C.XOffset,\"\n\t\t\t\t\t\t\" C.YOffset, C.PlanID, A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, SharedDevices as B,\"\n\t\t\t\t\t\t\" DeviceToPlansMap as C \"\n\t\t\t\t\t\t\"WHERE (C.PlanID=='%q') AND (C.DeviceRowID==a.ID)\"\n\t\t\t\t\t\t\" AND (B.DeviceRowID==a.ID) \"\n\t\t\t\t\t\t\"AND (B.SharedUserID==%lu) ORDER BY C.[Order]\",\n\t\t\t\t\t\tplanID.c_str(), m_users[iUser].ID);\n\t\t\t\telse if ((floorID != \"\") && (floorID != \"0\"))\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, C.XOffset, C.YOffset,\"\n\t\t\t\t\t\t\" C.PlanID, A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, SharedDevices as B,\"\n\t\t\t\t\t\t\" DeviceToPlansMap as C, Plans as D \"\n\t\t\t\t\t\t\"WHERE (D.FloorplanID=='%q') AND (D.ID==C.PlanID)\"\n\t\t\t\t\t\t\" AND (C.DeviceRowID==a.ID) AND (B.DeviceRowID==a.ID)\"\n\t\t\t\t\t\t\" AND (B.SharedUserID==%lu) ORDER BY C.[Order]\",\n\t\t\t\t\t\tfloorID.c_str(), m_users[iUser].ID);\n\t\t\t\telse {\n\t\t\t\t\tif (!bDisplayHidden)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Build a list of Hidden Devices\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM Plans WHERE (Name=='$Hidden Devices')\");\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string pID = result[0][0];\n\t\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT DeviceRowID FROM DeviceToPlansMap WHERE (PlanID=='%q')  AND (DevSceneType==0)\",\n\t\t\t\t\t\t\t\tpID.c_str());\n\t\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::vector<std::string> >::const_iterator ittP;\n\t\t\t\t\t\t\t\tfor (ittP = result.begin(); ittP != result.end(); ++ittP)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_HiddenDevices.insert(ittP[0][0]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbAllowDeviceToBeHidden = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (order.empty() || (!isAlpha))\n\t\t\t\t\t{\n\t\t\t\t\t\tstrcpy(szOrderBy, \"A.[Order],A.LastUpdate DESC\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsprintf(szOrderBy, \"A.[Order],A.%%s ASC\");\n\t\t\t\t\t}\n\t\t\t\t\t// _log.Log(LOG_STATUS, \"Getting all devices for user %lu\", m_users[iUser].ID);\n\t\t\t\t\tszQuery = (\n\t\t\t\t\t\t\"SELECT A.ID, A.DeviceID, A.Unit, A.Name, A.Used,\"\n\t\t\t\t\t\t\" A.Type, A.SubType, A.SignalLevel, A.BatteryLevel,\"\n\t\t\t\t\t\t\" A.nValue, A.sValue, A.LastUpdate, A.Favorite,\"\n\t\t\t\t\t\t\" A.SwitchType, A.HardwareID, A.AddjValue,\"\n\t\t\t\t\t\t\" A.AddjMulti, A.AddjValue2, A.AddjMulti2,\"\n\t\t\t\t\t\t\" A.LastLevel, A.CustomImage, A.StrParam1,\"\n\t\t\t\t\t\t\" A.StrParam2, A.Protected, IFNULL(C.XOffset,0),\"\n\t\t\t\t\t\t\" IFNULL(C.YOffset,0), IFNULL(C.PlanID,0), A.Description,\"\n\t\t\t\t\t\t\" A.Options, A.Color \"\n\t\t\t\t\t\t\"FROM DeviceStatus as A, SharedDevices as B \"\n\t\t\t\t\t\t\"LEFT OUTER JOIN DeviceToPlansMap as C  ON (C.DeviceRowID==A.ID)\"\n\t\t\t\t\t\t\"WHERE (B.DeviceRowID==A.ID)\"\n\t\t\t\t\t\t\" AND (B.SharedUserID==%lu) ORDER BY \");\n\t\t\t\t\tszQuery += szOrderBy;\n\t\t\t\t\tresult = m_sql.safe_query(szQuery.c_str(), m_users[iUser].ID, order.c_str());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tunsigned char favorite = atoi(sd[12].c_str());\n\t\t\t\t\tif ((planID != \"\") && (planID != \"0\"))\n\t\t\t\t\t\tfavorite = 1;\n\n\t\t\t\t\t//Check if we only want favorite devices\n\t\t\t\t\tif ((bFetchFavorites) && (!favorite))\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tstd::string sDeviceName = sd[3];\n\n\t\t\t\t\tif (!bDisplayHidden)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (_HiddenDevices.find(sd[0]) != _HiddenDevices.end())\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif (sDeviceName[0] == '$')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (bAllowDeviceToBeHidden)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tif (planID.size() > 0)\n\t\t\t\t\t\t\t\tsDeviceName = sDeviceName.substr(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint hardwareID = atoi(sd[14].c_str());\n\t\t\t\t\tstd::map<int, _tHardwareListInt>::iterator hItt = _hardwareNames.find(hardwareID);\n\t\t\t\t\tif (hItt != _hardwareNames.end())\n\t\t\t\t\t{\n\t\t\t\t\t\t//ignore sensors where the hardware is disabled\n\t\t\t\t\t\tif ((!bDisplayDisabled) && (!(*hItt).second.Enabled))\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tunsigned int dType = atoi(sd[5].c_str());\n\t\t\t\t\tunsigned int dSubType = atoi(sd[6].c_str());\n\t\t\t\t\tunsigned int used = atoi(sd[4].c_str());\n\t\t\t\t\tint nValue = atoi(sd[9].c_str());\n\t\t\t\t\tstd::string sValue = sd[10];\n\t\t\t\t\tstd::string sLastUpdate = sd[11];\n\t\t\t\t\tif (sLastUpdate.size() > 19)\n\t\t\t\t\t\tsLastUpdate = sLastUpdate.substr(0, 19);\n\n\t\t\t\t\tif (iLastUpdate != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttime_t cLastUpdate;\n\t\t\t\t\t\tParseSQLdatetime(cLastUpdate, tLastUpdate, sLastUpdate, tm1.tm_isdst);\n\t\t\t\t\t\tif (cLastUpdate <= iLastUpdate)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sd[13].c_str());\n\t\t\t\t\t_eMeterType metertype = (_eMeterType)switchtype;\n\t\t\t\t\tdouble AddjValue = atof(sd[15].c_str());\n\t\t\t\t\tdouble AddjMulti = atof(sd[16].c_str());\n\t\t\t\t\tdouble AddjValue2 = atof(sd[17].c_str());\n\t\t\t\t\tdouble AddjMulti2 = atof(sd[18].c_str());\n\t\t\t\t\tint LastLevel = atoi(sd[19].c_str());\n\t\t\t\t\tint CustomImage = atoi(sd[20].c_str());\n\t\t\t\t\tstd::string strParam1 = base64_encode(sd[21]);\n\t\t\t\t\tstd::string strParam2 = base64_encode(sd[22]);\n\t\t\t\t\tint iProtected = atoi(sd[23].c_str());\n\n\t\t\t\t\tstd::string Description = sd[27];\n\t\t\t\t\tstd::string sOptions = sd[28];\n\t\t\t\t\tstd::string sColor = sd[29];\n\t\t\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(sOptions);\n\n\t\t\t\t\tstruct tm ntime;\n\t\t\t\t\ttime_t checktime;\n\t\t\t\t\tParseSQLdatetime(checktime, ntime, sLastUpdate, tm1.tm_isdst);\n\t\t\t\t\tbool bHaveTimeout = (now - checktime >= SensorTimeOut * 60);\n\n\t\t\t\t\tif (dType == pTypeTEMP_RAIN)\n\t\t\t\t\t\tcontinue; //dont want you for now\n\n\t\t\t\t\tif ((rused == \"true\") && (!used))\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(rused == \"false\") &&\n\t\t\t\t\t\t(used)\n\t\t\t\t\t\t)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (rfilter != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif (rfilter == \"light\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeLighting1) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLighting2) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLighting3) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLighting4) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLighting5) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLighting6) &&\n\t\t\t\t\t\t\t\t(dType != pTypeFan) &&\n\t\t\t\t\t\t\t\t(dType != pTypeColorSwitch) &&\n\t\t\t\t\t\t\t\t(dType != pTypeSecurity1) &&\n\t\t\t\t\t\t\t\t(dType != pTypeSecurity2) &&\n\t\t\t\t\t\t\t\t(dType != pTypeEvohome) &&\n\t\t\t\t\t\t\t\t(dType != pTypeEvohomeRelay) &&\n\t\t\t\t\t\t\t\t(dType != pTypeCurtain) &&\n\t\t\t\t\t\t\t\t(dType != pTypeBlinds) &&\n\t\t\t\t\t\t\t\t(dType != pTypeRFY) &&\n\t\t\t\t\t\t\t\t(dType != pTypeChime) &&\n\t\t\t\t\t\t\t\t(dType != pTypeThermostat2) &&\n\t\t\t\t\t\t\t\t(dType != pTypeThermostat3) &&\n\t\t\t\t\t\t\t\t(dType != pTypeThermostat4) &&\n\t\t\t\t\t\t\t\t(dType != pTypeRemote) &&\n\t\t\t\t\t\t\t\t(dType != pTypeGeneralSwitch) &&\n\t\t\t\t\t\t\t\t(dType != pTypeHomeConfort) &&\n\t\t\t\t\t\t\t\t(dType != pTypeChime) &&\n\t\t\t\t\t\t\t\t(dType != pTypeFS20) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXStatus))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRadiator1) && (dSubType == sTypeSmartwaresSwitchRadiator)))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"temp\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP) &&\n\t\t\t\t\t\t\t\t(dType != pTypeHUM) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_HUM) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_HUM_BARO) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_BARO) &&\n\t\t\t\t\t\t\t\t(dType != pTypeEvohomeZone) &&\n\t\t\t\t\t\t\t\t(dType != pTypeEvohomeWater) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeWIND) && (dSubType == sTypeWIND4))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeUV) && (dSubType == sTypeUV3))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeSystemTemp))) &&\n\t\t\t\t\t\t\t\t(dType != pTypeThermostat1) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp))) &&\n\t\t\t\t\t\t\t\t(dType != pTypeRego6XXTemp)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"weather\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeWIND) &&\n\t\t\t\t\t\t\t\t(dType != pTypeRAIN) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_HUM_BARO) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_BARO) &&\n\t\t\t\t\t\t\t\t(dType != pTypeUV) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeVisibility))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeBaro))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation)))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"utility\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeRFXMeter) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorAD))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorVolt))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeVoltage))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeCurrent))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeTextStatus))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeAlert))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypePressure))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeSoilMoisture))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeLeafWetness))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypePercentage))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeWaterflow))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeCustom))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeFan))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeZWaveClock))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeZWaveThermostatMode))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeZWaveThermostatFanMode))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeDistance))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeCounterIncremental))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeManagedCounter))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeGeneral) && (dSubType == sTypeKwh))) &&\n\t\t\t\t\t\t\t\t(dType != pTypeCURRENT) &&\n\t\t\t\t\t\t\t\t(dType != pTypeCURRENTENERGY) &&\n\t\t\t\t\t\t\t\t(dType != pTypeENERGY) &&\n\t\t\t\t\t\t\t\t(dType != pTypePOWER) &&\n\t\t\t\t\t\t\t\t(dType != pTypeP1Power) &&\n\t\t\t\t\t\t\t\t(dType != pTypeP1Gas) &&\n\t\t\t\t\t\t\t\t(dType != pTypeYouLess) &&\n\t\t\t\t\t\t\t\t(dType != pTypeAirQuality) &&\n\t\t\t\t\t\t\t\t(dType != pTypeLux) &&\n\t\t\t\t\t\t\t\t(dType != pTypeUsage) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXCounter))) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint))) &&\n\t\t\t\t\t\t\t\t(dType != pTypeWEIGHT) &&\n\t\t\t\t\t\t\t\t(!((dType == pTypeRadiator1) && (dSubType == sTypeSmartwares)))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"wind\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeWIND)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"rain\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeRAIN)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"uv\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeUV)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"baro\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_HUM_BARO) &&\n\t\t\t\t\t\t\t\t(dType != pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (rfilter == \"zwavealarms\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!((dType == pTypeGeneral) && (dSubType == sTypeZWaveAlarm)))\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// has this device already been seen, now with different plan?\n\t\t\t\t\t// assume results are ordered such that same device is adjacent\n\t\t\t\t\t// if the idx and the Type are equal (type to prevent matching against Scene with same idx)\n\t\t\t\t\tstd::string thisIdx = sd[0];\n\t\t\t\t\tint devIdx = atoi(thisIdx.c_str());\n\n\t\t\t\t\tif ((ii > 0) && thisIdx == root[\"result\"][ii - 1][\"idx\"].asString()) {\n\t\t\t\t\t\tstd::string typeOfThisOne = RFX_Type_Desc(dType, 1);\n\t\t\t\t\t\tif (typeOfThisOne == root[\"result\"][ii - 1][\"Type\"].asString()) {\n\t\t\t\t\t\t\troot[\"result\"][ii - 1][\"PlanIDs\"].append(atoi(sd[26].c_str()));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\troot[\"result\"][ii][\"HardwareID\"] = hardwareID;\n\t\t\t\t\tif (_hardwareNames.find(hardwareID) == _hardwareNames.end())\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareName\"] = \"Unknown?\";\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareTypeVal\"] = 0;\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareType\"] = \"Unknown?\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareName\"] = _hardwareNames[hardwareID].Name;\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareTypeVal\"] = _hardwareNames[hardwareID].HardwareTypeVal;\n\t\t\t\t\t\troot[\"result\"][ii][\"HardwareType\"] = _hardwareNames[hardwareID].HardwareType;\n\t\t\t\t\t}\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\n\t\t\t\t\tCDomoticzHardwareBase *pHardware = m_mainworker.GetHardware(hardwareID);\n\t\t\t\t\tif (pHardware != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_SolarEdgeAPI)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint seSensorTimeOut = 60 * 24 * 60;\n\t\t\t\t\t\t\tbHaveTimeout = (now - checktime >= seSensorTimeOut * 60);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (pHardware->HwdType == HTYPE_Wunderground)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCWunderground *pWHardware = reinterpret_cast<CWunderground *>(pHardware);\n\t\t\t\t\t\t\tstd::string forecast_url = pWHardware->GetForecastURL();\n\t\t\t\t\t\t\tif (forecast_url != \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (pHardware->HwdType == HTYPE_DarkSky)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCDarkSky *pWHardware = reinterpret_cast<CDarkSky*>(pHardware);\n\t\t\t\t\t\t\tstd::string forecast_url = pWHardware->GetForecastURL();\n\t\t\t\t\t\t\tif (forecast_url != \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (pHardware->HwdType == HTYPE_AccuWeather)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCAccuWeather *pWHardware = reinterpret_cast<CAccuWeather*>(pHardware);\n\t\t\t\t\t\t\tstd::string forecast_url = pWHardware->GetForecastURL();\n\t\t\t\t\t\t\tif (forecast_url != \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (pHardware->HwdType == HTYPE_OpenWeatherMap)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCOpenWeatherMap *pWHardware = reinterpret_cast<COpenWeatherMap*>(pHardware);\n\t\t\t\t\t\t\tstd::string forecast_url = pWHardware->GetForecastURL();\n\t\t\t\t\t\t\tif (forecast_url != \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((pHardware != NULL) && (pHardware->HwdType == HTYPE_PythonPlugin))\n\t\t\t\t\t{\n\t\t\t\t\t\t// Device ID special formatting should not be applied to Python plugins\n\t\t\t\t\t\troot[\"result\"][ii][\"ID\"] = sd[1];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsprintf(szData, \"%04X\", (unsigned int)atoi(sd[1].c_str()));\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(dType == pTypeTEMP) ||\n\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM) ||\n\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t(dType == pTypeBARO) ||\n\t\t\t\t\t\t\t(dType == pTypeHUM) ||\n\t\t\t\t\t\t\t(dType == pTypeWIND) ||\n\t\t\t\t\t\t\t(dType == pTypeRAIN) ||\n\t\t\t\t\t\t\t(dType == pTypeUV) ||\n\t\t\t\t\t\t\t(dType == pTypeCURRENT) ||\n\t\t\t\t\t\t\t(dType == pTypeCURRENTENERGY) ||\n\t\t\t\t\t\t\t(dType == pTypeENERGY) ||\n\t\t\t\t\t\t\t(dType == pTypeRFXMeter) ||\n\t\t\t\t\t\t\t(dType == pTypeAirQuality) ||\n\t\t\t\t\t\t\t(dType == pTypeRFXSensor) ||\n\t\t\t\t\t\t\t(dType == pTypeP1Power) ||\n\t\t\t\t\t\t\t(dType == pTypeP1Gas)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ID\"] = szData;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ID\"] = sd[1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\troot[\"result\"][ii][\"Unit\"] = atoi(sd[2].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"Type\"] = RFX_Type_Desc(dType, 1);\n\t\t\t\t\troot[\"result\"][ii][\"SubType\"] = RFX_Type_SubType_Desc(dType, dSubType);\n\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = RFX_Type_Desc(dType, 2);\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sDeviceName;\n\t\t\t\t\troot[\"result\"][ii][\"Description\"] = Description;\n\t\t\t\t\troot[\"result\"][ii][\"Used\"] = used;\n\t\t\t\t\troot[\"result\"][ii][\"Favorite\"] = favorite;\n\n\t\t\t\t\tint iSignalLevel = atoi(sd[7].c_str());\n\t\t\t\t\tif (iSignalLevel < 12)\n\t\t\t\t\t\troot[\"result\"][ii][\"SignalLevel\"] = iSignalLevel;\n\t\t\t\t\telse\n\t\t\t\t\t\troot[\"result\"][ii][\"SignalLevel\"] = \"-\";\n\t\t\t\t\troot[\"result\"][ii][\"BatteryLevel\"] = atoi(sd[8].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sLastUpdate;\n\t\t\t\t\troot[\"result\"][ii][\"CustomImage\"] = CustomImage;\n\t\t\t\t\troot[\"result\"][ii][\"XOffset\"] = sd[24].c_str();\n\t\t\t\t\troot[\"result\"][ii][\"YOffset\"] = sd[25].c_str();\n\t\t\t\t\troot[\"result\"][ii][\"PlanID\"] = sd[26].c_str();\n\t\t\t\t\tJson::Value jsonArray;\n\t\t\t\t\tjsonArray.append(atoi(sd[26].c_str()));\n\t\t\t\t\troot[\"result\"][ii][\"PlanIDs\"] = jsonArray;\n\t\t\t\t\troot[\"result\"][ii][\"AddjValue\"] = AddjValue;\n\t\t\t\t\troot[\"result\"][ii][\"AddjMulti\"] = AddjMulti;\n\t\t\t\t\troot[\"result\"][ii][\"AddjValue2\"] = AddjValue2;\n\t\t\t\t\troot[\"result\"][ii][\"AddjMulti2\"] = AddjMulti2;\n\n\t\t\t\t\tstd::stringstream s_data;\n\t\t\t\t\ts_data << int(nValue) << \", \" << sValue;\n\t\t\t\t\troot[\"result\"][ii][\"Data\"] = s_data.str();\n\n\t\t\t\t\troot[\"result\"][ii][\"Notifications\"] = (m_notifications.HasNotifications(sd[0]) == true) ? \"true\" : \"false\";\n\t\t\t\t\troot[\"result\"][ii][\"ShowNotifications\"] = true;\n\n\t\t\t\t\tbool bHasTimers = false;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(dType == pTypeLighting1) ||\n\t\t\t\t\t\t(dType == pTypeLighting2) ||\n\t\t\t\t\t\t(dType == pTypeLighting3) ||\n\t\t\t\t\t\t(dType == pTypeLighting4) ||\n\t\t\t\t\t\t(dType == pTypeLighting5) ||\n\t\t\t\t\t\t(dType == pTypeLighting6) ||\n\t\t\t\t\t\t(dType == pTypeFan) ||\n\t\t\t\t\t\t(dType == pTypeColorSwitch) ||\n\t\t\t\t\t\t(dType == pTypeCurtain) ||\n\t\t\t\t\t\t(dType == pTypeBlinds) ||\n\t\t\t\t\t\t(dType == pTypeRFY) ||\n\t\t\t\t\t\t(dType == pTypeChime) ||\n\t\t\t\t\t\t(dType == pTypeThermostat2) ||\n\t\t\t\t\t\t(dType == pTypeThermostat3) ||\n\t\t\t\t\t\t(dType == pTypeThermostat4) ||\n\t\t\t\t\t\t(dType == pTypeRemote) ||\n\t\t\t\t\t\t(dType == pTypeGeneralSwitch) ||\n\t\t\t\t\t\t(dType == pTypeHomeConfort) ||\n\t\t\t\t\t\t(dType == pTypeFS20) ||\n\t\t\t\t\t\t((dType == pTypeRadiator1) && (dSubType == sTypeSmartwaresSwitchRadiator)) ||\n\t\t\t\t\t\t((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXStatus))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\t//add light details\n\t\t\t\t\t\tbHasTimers = m_sql.HasTimers(sd[0]);\n\n\t\t\t\t\t\tbHaveTimeout = false;\n#ifdef WITH_OPENZWAVE\n\t\t\t\t\t\tif (pHardware != NULL)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_OpenZWave)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCOpenZWave *pZWave = reinterpret_cast<COpenZWave*>(pHardware);\n\t\t\t\t\t\t\t\tunsigned long ID;\n\t\t\t\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\t\t\t\ts_strid << std::hex << sd[1];\n\t\t\t\t\t\t\t\ts_strid >> ID;\n\t\t\t\t\t\t\t\tint nodeID = (ID & 0x0000FF00) >> 8;\n\t\t\t\t\t\t\t\tbHaveTimeout = pZWave->HasNodeFailed(nodeID);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n#endif\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\tint maxDimLevel = 0;\n\n\t\t\t\t\t\tGetLightStatus(dType, dSubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam1\"] = strParam1;\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam2\"] = strParam2;\n\n\t\t\t\t\t\tstd::string IconFile = \"Light\";\n\t\t\t\t\t\tstd::map<int, int>::const_iterator ittIcon = m_custom_light_icons_lookup.find(CustomImage);\n\t\t\t\t\t\tif (ittIcon != m_custom_light_icons_lookup.end())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIconFile = m_custom_light_icons[ittIcon->second].RootFile;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = IconFile;\n\n\t\t\t\t\t\tif (switchtype == STYPE_Dimmer)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = LastLevel;\n\t\t\t\t\t\t\tint iLevel = round((float(maxDimLevel) / 100.0f)*LastLevel);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelInt\"] = iLevel;\n\t\t\t\t\t\t\tif ((dType == pTypeColorSwitch) ||\n\t\t\t\t\t\t\t    (dType == pTypeLighting5 && dSubType == sTypeTRC02) ||\n\t\t\t\t\t\t\t    (dType == pTypeLighting5 && dSubType == sTypeTRC02_2) ||\n\t\t\t\t\t\t\t    (dType == pTypeGeneralSwitch && dSubType == sSwitchTypeTRC02) ||\n\t\t\t\t\t\t\t    (dType == pTypeGeneralSwitch && dSubType == sSwitchTypeTRC02_2))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_tColor color(sColor);\n\t\t\t\t\t\t\t\tstd::string jsonColor = color.toJSONString();\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Color\"] = jsonColor;\n\t\t\t\t\t\t\t\tllevel = LastLevel;\n\t\t\t\t\t\t\t\tif (lstatus == \"Set Level\" || lstatus == \"Set Color\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"Set Level: %d %%\", LastLevel);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = llevel;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelInt\"] = atoi(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveDimmer\"] = bHaveDimmer;\n\t\t\t\t\t\tstd::string DimmerType = \"none\";\n\t\t\t\t\t\tif (switchtype == STYPE_Dimmer)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDimmerType = \"abs\";\n\t\t\t\t\t\t\tif (_hardwareNames.find(hardwareID) != _hardwareNames.end())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Milight V4/V5 bridges do not support absolute dimming for RGB or CW_WW lights\n\t\t\t\t\t\t\t\tif (_hardwareNames[hardwareID].HardwareTypeVal == HTYPE_LimitlessLights &&\n\t\t\t\t\t\t\t\t    atoi(_hardwareNames[hardwareID].Mode2.c_str()) != CLimitLess::LBTYPE_V6 &&\n\t\t\t\t\t\t\t\t\t(atoi(_hardwareNames[hardwareID].Mode1.c_str()) == sTypeColor_RGB ||\n\t\t\t\t\t\t\t\t\t atoi(_hardwareNames[hardwareID].Mode1.c_str()) == sTypeColor_White ||\n\t\t\t\t\t\t\t\t\t atoi(_hardwareNames[hardwareID].Mode1.c_str()) == sTypeColor_CW_WW))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDimmerType = \"rel\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"DimmerType\"] = DimmerType;\n\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = maxDimLevel;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveGroupCmd\"] = bHaveGroupCmd;\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = Switch_Type_Desc(switchtype);\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = switchtype;\n\t\t\t\t\t\tuint64_t camIDX = m_mainworker.m_cameras.IsDevSceneInCamera(0, sd[0]);\n\t\t\t\t\t\troot[\"result\"][ii][\"UsedByCamera\"] = (camIDX != 0) ? true : false;\n\t\t\t\t\t\tif (camIDX != 0) {\n\t\t\t\t\t\t\tstd::stringstream scidx;\n\t\t\t\t\t\t\tscidx << camIDX;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CameraIdx\"] = scidx.str();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbool bIsSubDevice = false;\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > resultSD;\n\t\t\t\t\t\tresultSD = m_sql.safe_query(\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q')\",\n\t\t\t\t\t\t\tsd[0].c_str());\n\t\t\t\t\t\tbIsSubDevice = (resultSD.size() > 0);\n\n\t\t\t\t\t\troot[\"result\"][ii][\"IsSubDevice\"] = bIsSubDevice;\n\n\t\t\t\t\t\tif (switchtype == STYPE_Doorbell)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"doorbell\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"\";//\"Pressed\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_DoorContact)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Door\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"door\";\n\t\t\t\t\t\t\tbool bIsOn = IsLightSwitchOn(lstatus);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"InternalState\"] = (bIsOn == true) ? \"Open\" : \"Closed\";\n\t\t\t\t\t\t\tif (bIsOn) {\n\t\t\t\t\t\t\t\tlstatus = \"Open\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Closed\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_DoorLock)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Door\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"door\";\n\t\t\t\t\t\t\tbool bIsOn = IsLightSwitchOn(lstatus);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"InternalState\"] = (bIsOn == true) ? \"Locked\" : \"Unlocked\";\n\t\t\t\t\t\t\tif (bIsOn) {\n\t\t\t\t\t\t\t\tlstatus = \"Locked\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Unlocked\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_DoorLockInverted)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Door\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"door\";\n\t\t\t\t\t\t\tbool bIsOn = IsLightSwitchOn(lstatus);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"InternalState\"] = (bIsOn == true) ? \"Unlocked\" : \"Locked\";\n\t\t\t\t\t\t\tif (bIsOn) {\n\t\t\t\t\t\t\t\tlstatus = \"Unlocked\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Locked\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_PushOn)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Push\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"push\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"InternalState\"] = (IsLightSwitchOn(lstatus) == true) ? \"On\" : \"Off\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_PushOff)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Push\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"push\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"pushoff\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_X10Siren)\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"siren\";\n\t\t\t\t\t\telse if (switchtype == STYPE_SMOKEDETECTOR)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"smoke\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = STYPE_SMOKEDETECTOR;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = Switch_Type_Desc(STYPE_SMOKEDETECTOR);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_Contact)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CustomImage == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Contact\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"contact\";\n\t\t\t\t\t\t\tbool bIsOn = IsLightSwitchOn(lstatus);\n\t\t\t\t\t\t\tif (bIsOn) {\n\t\t\t\t\t\t\t\tlstatus = \"Open\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Closed\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_Media)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ((pHardware != NULL) && (pHardware->HwdType == HTYPE_LogitechMediaServer))\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"LogitechMediaServer\";\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Media\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = Media_Player_States((_eMediaStatus)nValue);\n\t\t\t\t\t\t\tlstatus = sValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (\n\t\t\t\t\t\t\t(switchtype == STYPE_Blinds) ||\n\t\t\t\t\t\t\t(switchtype == STYPE_VenetianBlindsUS) ||\n\t\t\t\t\t\t\t(switchtype == STYPE_VenetianBlindsEU)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"blinds\";\n\t\t\t\t\t\t\tif ((lstatus == \"On\") || (lstatus == \"Close inline relay\")) {\n\t\t\t\t\t\t\t\tlstatus = \"Closed\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ((lstatus == \"Stop\") || (lstatus == \"Stop inline relay\")) {\n\t\t\t\t\t\t\t\tlstatus = \"Stopped\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Open\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_BlindsInverted)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"blinds\";\n\t\t\t\t\t\t\tif (lstatus == \"On\") {\n\t\t\t\t\t\t\t\tlstatus = \"Open\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlstatus = \"Closed\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((switchtype == STYPE_BlindsPercentage) || (switchtype == STYPE_BlindsPercentageInverted))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"blinds\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = LastLevel;\n\t\t\t\t\t\t\tint iLevel = round((float(maxDimLevel) / 100.0f)*LastLevel);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelInt\"] = iLevel;\n\t\t\t\t\t\t\tif (lstatus == \"On\") {\n\t\t\t\t\t\t\t\tlstatus = (switchtype == STYPE_BlindsPercentage) ? \"Closed\" : \"Open\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (lstatus == \"Off\") {\n\t\t\t\t\t\t\t\tlstatus = (switchtype == STYPE_BlindsPercentage) ? \"Open\" : \"Closed\";\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_Dimmer)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"dimmer\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_Motion)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"motion\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (switchtype == STYPE_Selector)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string selectorStyle = options[\"SelectorStyle\"];\n\t\t\t\t\t\t\tstd::string levelOffHidden = options[\"LevelOffHidden\"];\n\t\t\t\t\t\t\tstd::string levelNames = options[\"LevelNames\"];\n\t\t\t\t\t\t\tstd::string levelActions = options[\"LevelActions\"];\n\t\t\t\t\t\t\tif (selectorStyle.empty()) {\n\t\t\t\t\t\t\t\tselectorStyle.assign(\"0\"); // default is 'button set'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (levelOffHidden.empty()) {\n\t\t\t\t\t\t\t\tlevelOffHidden.assign(\"false\"); // default is 'not hidden'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (levelNames.empty()) {\n\t\t\t\t\t\t\t\tlevelNames.assign(\"Off\"); // default is Off only\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Light\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SelectorStyle\"] = atoi(selectorStyle.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelOffHidden\"] = (levelOffHidden == \"true\");\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelNames\"] = base64_encode(levelNames);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelActions\"] = base64_encode(levelActions);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsprintf(szData, \"%s\", lstatus.c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeSecurity1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\tint maxDimLevel = 0;\n\n\t\t\t\t\t\tGetLightStatus(dType, dSubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveDimmer\"] = bHaveDimmer;\n\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = maxDimLevel;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveGroupCmd\"] = bHaveGroupCmd;\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = \"Security\";\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = switchtype; //was 0?;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"security\";\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam1\"] = strParam1;\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam2\"] = strParam2;\n\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\n\t\t\t\t\t\tif ((dSubType == sTypeKD101) || (dSubType == sTypeSA30) || (switchtype == STYPE_SMOKEDETECTOR))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = STYPE_SMOKEDETECTOR;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"smoke\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = Switch_Type_Desc(STYPE_SMOKEDETECTOR);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsprintf(szData, \"%s\", lstatus.c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeSecurity2)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\tint maxDimLevel = 0;\n\n\t\t\t\t\t\tGetLightStatus(dType, dSubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveDimmer\"] = bHaveDimmer;\n\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = maxDimLevel;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveGroupCmd\"] = bHaveGroupCmd;\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = \"Security\";\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = switchtype; //was 0?;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"security\";\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam1\"] = strParam1;\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam2\"] = strParam2;\n\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\t\t\t\t\t\tsprintf(szData, \"%s\", lstatus.c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeEvohome || dType == pTypeEvohomeRelay)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\tint maxDimLevel = 0;\n\n\t\t\t\t\t\tGetLightStatus(dType, dSubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveDimmer\"] = bHaveDimmer;\n\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = maxDimLevel;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveGroupCmd\"] = bHaveGroupCmd;\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = \"evohome\";\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = switchtype; //was 0?;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"override_mini\";\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam1\"] = strParam1;\n\t\t\t\t\t\troot[\"result\"][ii][\"StrParam2\"] = strParam2;\n\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\n\t\t\t\t\t\tsprintf(szData, \"%s\", lstatus.c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\n\t\t\t\t\t\tif (dType == pTypeEvohomeRelay)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = \"TPI\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = llevel;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelInt\"] = atoi(sValue.c_str());\n\t\t\t\t\t\t\tif (root[\"result\"][ii][\"Unit\"].asInt() > 100)\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = true;\n\n\t\t\t\t\t\t\tsprintf(szData, \"%s: %d\", lstatus.c_str(), atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"override_mini\";\n\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() >= 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint i = 0;\n\t\t\t\t\t\t\tdouble tempCelcius = atof(strarray[i++].c_str());\n\t\t\t\t\t\t\tdouble temp = ConvertTemperature(tempCelcius, tempsign);\n\t\t\t\t\t\t\tdouble tempSetPoint;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = temp;\n\t\t\t\t\t\t\tif (dType == pTypeEvohomeZone)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttempCelcius = atof(strarray[i++].c_str());\n\t\t\t\t\t\t\t\ttempSetPoint = ConvertTemperature(tempCelcius, tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"SetPoint\"] = tempSetPoint;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"State\"] = strarray[i++];\n\n\t\t\t\t\t\t\tstd::string strstatus = strarray[i++];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = strstatus;\n\n\t\t\t\t\t\t\tif ((dType == pTypeEvohomeZone || dType == pTypeEvohomeWater) && strarray.size() >= 4)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Until\"] = strarray[i++];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (dType == pTypeEvohomeZone)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tempCelcius == 325.1)\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"Off\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f %c\", tempSetPoint, tempsign);\n\t\t\t\t\t\t\t\tif (strarray.size() >= 4)\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, (%s), %s until %s\", temp, tempsign, szTmp, strstatus.c_str(), strarray[3].c_str());\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, (%s), %s\", temp, tempsign, szTmp, strstatus.c_str());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tif (strarray.size() >= 4)\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %s, %s until %s\", temp, tempsign, strarray[1].c_str(), strstatus.c_str(), strarray[3].c_str());\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %s, %s\", temp, tempsign, strarray[1].c_str(), strstatus.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeTEMP) || (dType == pTypeRego6XXTemp))\n\t\t\t\t\t{\n\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(sValue.c_str()), tempsign);\n\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\tsprintf(szData, \"%.1f %c\", tvalue, tempsign);\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeThermostat1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 4)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(strarray[0].c_str()), tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c\", tvalue, tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp))\n\t\t\t\t\t{\n\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(sValue.c_str()), tempsign);\n\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\tsprintf(szData, \"%.1f %c\", tvalue, tempsign);\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"temperature\";\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeHUM)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"Humidity\"] = nValue;\n\t\t\t\t\t\troot[\"result\"][ii][\"HumidityStatus\"] = RFX_Humidity_Status_Desc(atoi(sValue.c_str()));\n\t\t\t\t\t\tsprintf(szData, \"Humidity %d %%\", nValue);\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeTEMP_HUM)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble tempCelcius = atof(strarray[0].c_str());\n\t\t\t\t\t\t\tdouble temp = ConvertTemperature(tempCelcius, tempsign);\n\t\t\t\t\t\t\tint humidity = atoi(strarray[1].c_str());\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = temp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Humidity\"] = humidity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HumidityStatus\"] = RFX_Humidity_Status_Desc(atoi(strarray[2].c_str()));\n\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %d %%\", temp, tempsign, atoi(strarray[1].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t\t//Calculate dew point\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", ConvertTemperature(CalculateDewPoint(tempCelcius, humidity), tempsign));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"DewPoint\"] = szTmp;\n\n\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 5)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble tempCelcius = atof(strarray[0].c_str());\n\t\t\t\t\t\t\tdouble temp = ConvertTemperature(tempCelcius, tempsign);\n\t\t\t\t\t\t\tint humidity = atoi(strarray[1].c_str());\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = temp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Humidity\"] = humidity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HumidityStatus\"] = RFX_Humidity_Status_Desc(atoi(strarray[2].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Forecast\"] = atoi(strarray[4].c_str());\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", ConvertTemperature(CalculateDewPoint(tempCelcius, humidity), tempsign));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"DewPoint\"] = szTmp;\n\n\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Barometer\"] = atof(strarray[3].c_str());\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ForecastStr\"] = RFX_WSForecast_Desc(atoi(strarray[4].c_str()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Barometer\"] = atoi(strarray[3].c_str());\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ForecastStr\"] = RFX_Forecast_Desc(atoi(strarray[4].c_str()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %d %%, %.1f hPa\",\n\t\t\t\t\t\t\t\t\ttemp,\n\t\t\t\t\t\t\t\t\ttempsign,\n\t\t\t\t\t\t\t\t\tatoi(strarray[1].c_str()),\n\t\t\t\t\t\t\t\t\tatof(strarray[3].c_str())\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %d %%, %d hPa\",\n\t\t\t\t\t\t\t\t\ttemp,\n\t\t\t\t\t\t\t\t\ttempsign,\n\t\t\t\t\t\t\t\t\tatoi(strarray[1].c_str()),\n\t\t\t\t\t\t\t\t\tatoi(strarray[3].c_str())\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() >= 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(strarray[0].c_str()), tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\t\tint forecast = atoi(strarray[2].c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Forecast\"] = forecast;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ForecastStr\"] = BMP_Forecast_Desc(forecast);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Barometer\"] = atof(strarray[1].c_str());\n\n\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c, %.1f hPa\",\n\t\t\t\t\t\t\t\ttvalue,\n\t\t\t\t\t\t\t\ttempsign,\n\t\t\t\t\t\t\t\tatof(strarray[1].c_str())\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeUV)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat UVI = static_cast<float>(atof(strarray[0].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"UVI\"] = strarray[0];\n\t\t\t\t\t\t\tif (dSubType == sTypeUV3)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(strarray[1].c_str()), tempsign);\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f UVI, %.1f&deg; %c\", UVI, tvalue, tempsign);\n\n\t\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f UVI\", UVI);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeWIND)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 6)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Direction\"] = atof(strarray[0].c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"DirectionStr\"] = strarray[1];\n\n\t\t\t\t\t\t\tif (dSubType != sTypeWIND5)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint intSpeed = atoi(strarray[2].c_str());\n\t\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfloat windms = float(intSpeed) * 0.1f;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windms));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Speed\"] = szTmp;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//if (dSubType!=sTypeWIND6) //problem in RFXCOM firmware? gust=speed?\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint intGust = atoi(strarray[3].c_str());\n\t\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) *m_sql.m_windscale);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfloat gustms = float(intGust) * 0.1f;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(gustms));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Gust\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dSubType == sTypeWIND4) || (dSubType == sTypeWINDNoTemp))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dSubType == sTypeWIND4)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(strarray[4].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(strarray[5].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Chill\"] = tvalue;\n\n\t\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeRAIN)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//get lowest value of today, and max rate\n\t\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\n\t\t\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\n\t\t\t\t\t\t\t\t\t\"SELECT MIN(Total), MAX(Total) FROM Rain WHERE (DeviceRowID='%q' AND Date>='%q')\", sd[0].c_str(), szDate);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\n\t\t\t\t\t\t\t\t\t\"SELECT Total, Total FROM Rain WHERE (DeviceRowID='%q' AND Date>='%q') ORDER BY ROWID DESC LIMIT 1\", sd[0].c_str(), szDate);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble total_real = 0;\n\t\t\t\t\t\t\t\tfloat rate = 0;\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\t\t\t\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble total_min = atof(sd2[0].c_str());\n\t\t\t\t\t\t\t\t\tdouble total_max = atof(strarray[1].c_str());\n\t\t\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttotal_real = atof(sd2[1].c_str());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttotal_real *= AddjMulti;\n\t\t\t\t\t\t\t\trate = (static_cast<float>(atof(strarray[0].c_str())) / 100.0f)*float(AddjMulti);\n\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", total_real);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Rain\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%g\", rate);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"RainRate\"] = szTmp;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Rain\"] = \"0\";\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"RainRate\"] = \"0\";\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = \"0\";\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeRFXMeter)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string ValueQuantity = options[\"ValueQuantity\"];\n\t\t\t\t\t\tstd::string ValueUnits = options[\"ValueUnits\"];\n\n\t\t\t\t\t\tif (ValueQuantity.empty()) {\n\t\t\t\t\t\t\tValueQuantity.assign(\"Count\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ValueUnits.empty()) {\n\t\t\t\t\t\t\tValueUnits.assign(\"\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//get value of today\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\", sd[0].c_str(), szDate);\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\tuint64_t total_min = std::stoull(sd2[0]);\n\t\t\t\t\t\t\tuint64_t total_max = std::stoull(sValue);\n\t\t\t\t\t\t\tuint64_t total_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%\" PRIu64, total_real);\n\n\t\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\t\t\t\t\t\t\tfloat musage = 0.0f;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / (divider / 1000.0f);\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d Liter\", round(musage));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%\" PRIu64, total_real);\n\t\t\t\t\t\t\t\tif (!ValueUnits.empty())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcat(szTmp, \" \");\n\t\t\t\t\t\t\t\t\tstrcat(szTmp, ValueUnits.c_str());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstrcpy(szTmp, \"?\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = \"\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = \"\";\n\n\t\t\t\t\t\tdouble meteroffset = AddjValue;\n\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\tdouble dvalue = static_cast<double>(atof(sValue.c_str()));\n\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeCounterIncremental))\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string ValueQuantity = options[\"ValueQuantity\"];\n\t\t\t\t\t\tstd::string ValueUnits = options[\"ValueUnits\"];\n\t\t\t\t\t\tif (ValueQuantity.empty()) {\n\t\t\t\t\t\t\tValueQuantity.assign(\"Count\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ValueUnits.empty()) {\n\t\t\t\t\t\t\tValueUnits.assign(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\t//get value of today\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\", sd[0].c_str(), szDate);\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\tuint64_t total_min = std::stoull(sd2[0]);\n\t\t\t\t\t\t\tuint64_t total_max = std::stoull(sValue);\n\t\t\t\t\t\t\tuint64_t total_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%\" PRIu64, total_real);\n\n\t\t\t\t\t\t\tfloat musage = 0;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%\" PRIu64, total_real);\n\t\t\t\t\t\t\t\tif (!ValueUnits.empty())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcat(szTmp, \" \");\n\t\t\t\t\t\t\t\t\tstrcat(szTmp, ValueUnits.c_str());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = sValue;\n\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"counter\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = \"\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = \"\";\n\t\t\t\t\t\tdouble dvalue = static_cast<double>(atof(sValue.c_str()));\n\t\t\t\t\t\tdouble meteroffset = AddjValue;\n\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%\" PRIu64 \" %s\", static_cast<uint64_t>(meteroffset + dvalue), ValueUnits.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeManagedCounter))\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string ValueQuantity = options[\"ValueQuantity\"];\n\t\t\t\t\t\tstd::string ValueUnits = options[\"ValueUnits\"];\n\t\t\t\t\t\tif (ValueQuantity.empty()) {\n\t\t\t\t\t\t\tValueQuantity.assign(\"Count\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ValueUnits.empty()) {\n\t\t\t\t\t\t\tValueUnits.assign(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\tstd::vector<std::string> splitresults;\n\t\t\t\t\t\tStringSplit(sValue, \";\", splitresults);\n\t\t\t\t\t\tdouble dvalue;\n\t\t\t\t\t\tif (splitresults.size() < 2) {\n\t\t\t\t\t\t\tdvalue = static_cast<double>(atof(sValue.c_str()));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdvalue = static_cast<double>(atof(splitresults[1].c_str()));\n\t\t\t\t\t\t\tif (dvalue < 0.0) {\n\t\t\t\t\t\t\t\tdvalue = static_cast<double>(atof(splitresults[0].c_str()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = root[\"result\"][ii][\"Counter\"];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"counter\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = \"\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = \"\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ShowNotifications\"] = false;\n\t\t\t\t\t\tdouble meteroffset = AddjValue;\n\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", meteroffset + (dvalue / divider));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = \"?\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeYouLess)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::string ValueQuantity = options[\"ValueQuantity\"];\n\t\t\t\t\t\tstd::string ValueUnits = options[\"ValueUnits\"];\n\t\t\t\t\t\tfloat musage = 0;\n\t\t\t\t\t\tif (ValueQuantity.empty()) {\n\t\t\t\t\t\t\tValueQuantity.assign(\"Count\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ValueUnits.empty()) {\n\t\t\t\t\t\t\tValueUnits.assign(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\t//get value of today\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\", sd[0].c_str(), szDate);\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\tunsigned long long total_min = std::strtoull(sd2[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max = std::strtoull(sd2[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real;\n\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real);\n\n\t\t\t\t\t\t\tmusage = 0;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tmusage = float(total_real) / divider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%llu %s\", total_real, ValueUnits.c_str());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\n\n\t\t\t\t\t\tstd::vector<std::string> splitresults;\n\t\t\t\t\t\tStringSplit(sValue, \";\", splitresults);\n\t\t\t\t\t\tif (splitresults.size() < 2)\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\tunsigned long long total_actual = std::strtoull(splitresults[0].c_str(), nullptr, 10);\n\t\t\t\t\t\tmusage = 0;\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tmusage = float(total_actual) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", musage);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tmusage = float(total_actual) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", musage);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_actual);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\n\t\t\t\t\t\tunsigned long long acounter = std::strtoull(sValue.c_str(), nullptr, 10);\n\t\t\t\t\t\tmusage = 0;\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tmusage = float(acounter) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh %s Watt\", musage, splitresults[1].c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\tmusage = float(acounter) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tmusage = float(acounter) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f m3\", musage);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu %s\", acounter, ValueUnits.c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = \"\";\n\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = \"\";\n\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%s Watt\", splitresults[1].c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%s m3\", splitresults[1].c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%s m3\", splitresults[1].c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\tsprintf(szTmp, \"%s\", splitresults[1].c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ValueUnits\"] = ValueUnits;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\troot[\"result\"][ii][\"Usage\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> splitresults;\n\t\t\t\t\t\tStringSplit(sValue, \";\", splitresults);\n\t\t\t\t\t\tif (splitresults.size() != 6)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = MTYPE_ENERGY;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = \"0\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterDeliv\"] = \"0\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Usage\"] = \"Invalid\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"UsageDeliv\"] = \"Invalid\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = \"Invalid!: \" + sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = true;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = \"Invalid\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterDelivToday\"] = \"Invalid\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat EnergyDivider = 1000.0f;\n\t\t\t\t\t\t\tint tValue;\n\t\t\t\t\t\t\tif (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tEnergyDivider = float(tValue);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tunsigned long long powerusage1 = std::strtoull(splitresults[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long powerusage2 = std::strtoull(splitresults[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long powerdeliv1 = std::strtoull(splitresults[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long powerdeliv2 = std::strtoull(splitresults[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long usagecurrent = std::strtoull(splitresults[4].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long delivcurrent = std::strtoull(splitresults[5].c_str(), nullptr, 10);\n\n\t\t\t\t\t\t\tpowerdeliv1 = (powerdeliv1 < 10) ? 0 : powerdeliv1;\n\t\t\t\t\t\t\tpowerdeliv2 = (powerdeliv2 < 10) ? 0 : powerdeliv2;\n\n\t\t\t\t\t\t\tunsigned long long powerusage = powerusage1 + powerusage2;\n\t\t\t\t\t\t\tunsigned long long powerdeliv = powerdeliv1 + powerdeliv2;\n\t\t\t\t\t\t\tif (powerdeliv < 2)\n\t\t\t\t\t\t\t\tpowerdeliv = 0;\n\n\t\t\t\t\t\t\tdouble musage = 0;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = MTYPE_ENERGY;\n\t\t\t\t\t\t\tmusage = double(powerusage) / EnergyDivider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", musage);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tmusage = double(powerdeliv) / EnergyDivider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", musage);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterDeliv\"] = szTmp;\n\n\t\t\t\t\t\t\tif (bHaveTimeout)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tusagecurrent = 0;\n\t\t\t\t\t\t\t\tdelivcurrent = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu Watt\", usagecurrent);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Usage\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu Watt\", delivcurrent);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"UsageDeliv\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t\t//get value of today\n\t\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value1), MIN(Value2), MIN(Value5), MIN(Value6) FROM MultiMeter WHERE (DeviceRowID='%q' AND Date>='%q')\",\n\t\t\t\t\t\t\t\tsd[0].c_str(), szDate);\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\t\tunsigned long long total_min_usage_1 = std::strtoull(sd2[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_min_deliv_1 = std::strtoull(sd2[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_min_usage_2 = std::strtoull(sd2[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_min_deliv_2 = std::strtoull(sd2[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_real_usage, total_real_deliv;\n\n\t\t\t\t\t\t\t\ttotal_real_usage = powerusage - (total_min_usage_1 + total_min_usage_2);\n\t\t\t\t\t\t\t\ttotal_real_deliv = powerdeliv - (total_min_deliv_1 + total_min_deliv_2);\n\n\t\t\t\t\t\t\t\tmusage = double(total_real_usage) / EnergyDivider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", musage);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\t\tmusage = double(total_real_deliv) / EnergyDivider;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", musage);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterDelivToday\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", 0.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterDelivToday\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeP1Gas)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = MTYPE_GAS;\n\n\t\t\t\t\t\t//get lowest value of today\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\n\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\",\n\t\t\t\t\t\t\tsd[0].c_str(), szDate);\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\tuint64_t total_min_gas = std::stoull(sd2[0]);\n\t\t\t\t\t\t\tuint64_t gasactual = std::stoull(sValue);\n\t\t\t\t\t\t\tuint64_t total_real_gas = gasactual - total_min_gas;\n\n\t\t\t\t\t\t\tdouble musage = double(gasactual) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", musage);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tmusage = double(total_real_gas) / divider;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f m3\", musage);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", atof(sValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", 0.0f);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f m3\", 0.0f);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.03f\", atof(sValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//CM113\n\t\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\t\tdouble val1 = atof(strarray[0].c_str());\n\t\t\t\t\t\t\tdouble val2 = atof(strarray[1].c_str());\n\t\t\t\t\t\t\tdouble val3 = atof(strarray[2].c_str());\n\n\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ((val2 == 0) && (val3 == 0))\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f A\", val1);\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f A, %.1f A, %.1f A\", val1, val2, val3);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ((val2 == 0) && (val3 == 0))\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%d Watt\", int(val1*voltage));\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%d Watt, %d Watt, %d Watt\", int(val1*voltage), int(val2*voltage), int(val3*voltage));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"displaytype\"] = displaytype;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENTENERGY)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 4)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//CM180i\n\t\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\t\tdouble total = atof(strarray[3].c_str());\n\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.1f A, %.1f A, %.1f A\", atof(strarray[0].c_str()), atof(strarray[1].c_str()), atof(strarray[2].c_str()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%d Watt, %d Watt, %d Watt\", int(atof(strarray[0].c_str())*voltage), int(atof(strarray[1].c_str())*voltage), int(atof(strarray[2].c_str())*voltage));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (total > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \", Total: %.3f kWh\", total / 1000.0f);\n\t\t\t\t\t\t\t\tstrcat(szData, szTmp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"displaytype\"] = displaytype;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeENERGY) || (dType == pTypePOWER)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeKwh))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\t\t\t\t\t\tif (strarray.size() == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble total = atof(strarray[1].c_str()) / 1000;\n\n\t\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\",\n\t\t\t\t\t\t\t\tsd[0].c_str(), szDate);\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\t\t\t\t\t\t\t\tdouble minimum = atof(sd2[0].c_str()) / divider;\n\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.3f kWh\", total);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\t\tif ((dType == pTypeENERGY) || (dType == pTypePOWER))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%ld Watt\", atol(strarray[0].c_str()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%g Watt\", atof(strarray[0].c_str()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Usage\"] = szData;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f kWh\", total - minimum);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szData, \"%.3f kWh\", total);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\t\tif ((dType == pTypeENERGY) || (dType == pTypePOWER))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%ld Watt\", atol(strarray[0].c_str()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szData, \"%g Watt\", atof(strarray[0].c_str()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Usage\"] = szData;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d kWh\", 0);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"current\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = switchtype; //MTYPE_ENERGY\n\t\t\t\t\t\t\troot[\"result\"][ii][\"EnergyMeterMode\"] = options[\"EnergyMeterMode\"];  //for alternate Energy Reading\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeAirQuality)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (bHaveTimeout)\n\t\t\t\t\t\t\tnValue = 0;\n\t\t\t\t\t\tsprintf(szTmp, \"%d ppm\", nValue);\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\tint airquality = nValue;\n\t\t\t\t\t\tif (airquality < 700)\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Quality\"] = \"Excellent\";\n\t\t\t\t\t\telse if (airquality < 900)\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Quality\"] = \"Good\";\n\t\t\t\t\t\telse if (airquality < 1100)\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Quality\"] = \"Fair\";\n\t\t\t\t\t\telse if (airquality < 1600)\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Quality\"] = \"Mediocre\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Quality\"] = \"Bad\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeThermostat)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dSubType == sTypeThermSetpoint)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbHasTimers = m_sql.HasTimers(sd[0]);\n\n\t\t\t\t\t\t\tdouble tempCelcius = atof(sValue.c_str());\n\t\t\t\t\t\t\tdouble temp = ConvertTemperature(tempCelcius, tempsign);\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", temp);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SetPoint\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"override_mini\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeRadiator1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dSubType == sTypeSmartwares)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbHasTimers = m_sql.HasTimers(sd[0]);\n\n\t\t\t\t\t\t\tdouble tempCelcius = atof(sValue.c_str());\n\t\t\t\t\t\t\tdouble temp = ConvertTemperature(tempCelcius, tempsign);\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", temp);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SetPoint\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false; //this device does not provide feedback, so no timeout!\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"override_mini\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeGeneral)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dSubType == sTypeVisibility)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat vis = static_cast<float>(atof(sValue.c_str()));\n\t\t\t\t\t\t\tif (metertype == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//km\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f km\", vis);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//miles\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f mi\", vis*0.6214f);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Visibility\"] = atof(sValue.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"visibility\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeDistance)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat vis = static_cast<float>(atof(sValue.c_str()));\n\t\t\t\t\t\t\tif (metertype == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//km\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f cm\", vis);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//miles\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f in\", vis*0.6214f);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"visibility\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeSolarRadiation)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat radiation = static_cast<float>(atof(sValue.c_str()));\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f Watt/m2\", radiation);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Radiation\"] = atof(sValue.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"radiation\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeSoilMoisture)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d cb\", nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Desc\"] = Get_Moisture_Desc(nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"moisture\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeLeafWetness)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"leaf\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = metertype;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeSystemTemp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(sValue.c_str()), tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Temp\"] = tvalue;\n\t\t\t\t\t\t\tsprintf(szData, \"%.1f %c\", tvalue, tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Computer\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"temperature\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = \"temperature\";\n\t\t\t\t\t\t\t_tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;\n\t\t\t\t\t\t\tuint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);\n\t\t\t\t\t\t\tif (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttstate = m_mainworker.m_trend_calculator[tID].m_state;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"trend\"] = (int)tstate;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypePercentage)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%g%%\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Computer\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"hardware\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeWaterflow)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%g l/min\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Moisture\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"moisture\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeCustom)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string szAxesLabel = \"\";\n\t\t\t\t\t\t\tint SensorType = 1;\n\t\t\t\t\t\t\tstd::vector<std::string> sResults;\n\t\t\t\t\t\t\tStringSplit(sOptions, \";\", sResults);\n\n\t\t\t\t\t\t\tif (sResults.size() == 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSensorType = atoi(sResults[0].c_str());\n\t\t\t\t\t\t\t\tszAxesLabel = sResults[1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsprintf(szData, \"%g %s\", atof(sValue.c_str()), szAxesLabel.c_str());\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SensorType\"] = SensorType;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SensorUnit\"] = szAxesLabel;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\n\t\t\t\t\t\t\tstd::string IconFile = \"Custom\";\n\t\t\t\t\t\t\tif (CustomImage != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::map<int, int>::const_iterator ittIcon = m_custom_light_icons_lookup.find(CustomImage);\n\t\t\t\t\t\t\t\tif (ittIcon != m_custom_light_icons_lookup.end())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tIconFile = m_custom_light_icons[ittIcon->second].RootFile;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = IconFile;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = IconFile;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeFan)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%d RPM\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Fan\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Fan\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeSoundLevel)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%d dB\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Speaker\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeVoltage)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%g V\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"current\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Voltage\"] = atof(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeCurrent)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%g A\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"current\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Current\"] = atof(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeTextStatus)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"text\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ShowNotifications\"] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeAlert)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (nValue > 4)\n\t\t\t\t\t\t\t\tnValue = 4;\n\t\t\t\t\t\t\tsprintf(szData, \"Level: %d\", nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\tif (!sValue.empty())\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = Get_Alert_Desc(nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Alert\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = nValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypePressure)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%.1f Bar\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"gauge\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Pressure\"] = atof(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeBaro)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> tstrarray;\n\t\t\t\t\t\t\tStringSplit(sValue, \";\", tstrarray);\n\t\t\t\t\t\t\tif (tstrarray.empty())\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tsprintf(szData, \"%g hPa\", atof(tstrarray[0].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"gauge\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\tif (tstrarray.size() > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Barometer\"] = atof(tstrarray[0].c_str());\n\t\t\t\t\t\t\t\tint forecast = atoi(tstrarray[1].c_str());\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Forecast\"] = forecast;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ForecastStr\"] = BMP_Forecast_Desc(forecast);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeZWaveClock)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> tstrarray;\n\t\t\t\t\t\t\tStringSplit(sValue, \";\", tstrarray);\n\t\t\t\t\t\t\tint day = 0;\n\t\t\t\t\t\t\tint hour = 0;\n\t\t\t\t\t\t\tint minute = 0;\n\t\t\t\t\t\t\tif (tstrarray.size() == 3)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tday = atoi(tstrarray[0].c_str());\n\t\t\t\t\t\t\t\thour = atoi(tstrarray[1].c_str());\n\t\t\t\t\t\t\t\tminute = atoi(tstrarray[2].c_str());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsprintf(szData, \"%s %02d:%02d\", ZWave_Clock_Days(day), hour, minute);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"DayTime\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"clock\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeZWaveThermostatMode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstrcpy(szData, \"\");\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Mode\"] = nValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"mode\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\tstd::string modes = \"\";\n\t\t\t\t\t\t\t//Add supported modes\n#ifdef WITH_OPENZWAVE\n\t\t\t\t\t\t\tif (pHardware)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_OpenZWave)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCOpenZWave *pZWave = reinterpret_cast<COpenZWave*>(pHardware);\n\t\t\t\t\t\t\t\t\tunsigned long ID;\n\t\t\t\t\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\t\t\t\t\ts_strid << std::hex << sd[1];\n\t\t\t\t\t\t\t\t\ts_strid >> ID;\n\t\t\t\t\t\t\t\t\tstd::vector<std::string> vmodes = pZWave->GetSupportedThermostatModes(ID);\n\t\t\t\t\t\t\t\t\tint smode = 0;\n\t\t\t\t\t\t\t\t\tchar szTmp[200];\n\t\t\t\t\t\t\t\t\tfor (const auto & itt : vmodes)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t//Value supported\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d;%s;\", smode, itt.c_str());\n\t\t\t\t\t\t\t\t\t\tmodes += szTmp;\n\t\t\t\t\t\t\t\t\t\tsmode++;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (!vmodes.empty())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (nValue < (int)vmodes.size())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szData, \"%s\", vmodes[nValue].c_str());\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n#endif\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Modes\"] = modes;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeZWaveThermostatFanMode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%s\", ZWave_Thermostat_Fan_Modes[nValue]);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Mode\"] = nValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"mode\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\t//Add supported modes (add all for now)\n\t\t\t\t\t\t\tbool bAddedSupportedModes = false;\n\t\t\t\t\t\t\tstd::string modes = \"\";\n\t\t\t\t\t\t\t//Add supported modes\n#ifdef WITH_OPENZWAVE\n\t\t\t\t\t\t\tif (pHardware)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_OpenZWave)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tCOpenZWave *pZWave = reinterpret_cast<COpenZWave*>(pHardware);\n\t\t\t\t\t\t\t\t\tunsigned long ID;\n\t\t\t\t\t\t\t\t\tstd::stringstream s_strid;\n\t\t\t\t\t\t\t\t\ts_strid << std::hex << sd[1];\n\t\t\t\t\t\t\t\t\ts_strid >> ID;\n\t\t\t\t\t\t\t\t\tmodes = pZWave->GetSupportedThermostatFanModes(ID);\n\t\t\t\t\t\t\t\t\tbAddedSupportedModes = !modes.empty();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n#endif\n\t\t\t\t\t\t\tif (!bAddedSupportedModes)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint smode = 0;\n\t\t\t\t\t\t\t\twhile (ZWave_Thermostat_Fan_Modes[smode] != NULL)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d;%s;\", smode, ZWave_Thermostat_Fan_Modes[smode]);\n\t\t\t\t\t\t\t\t\tmodes += szTmp;\n\t\t\t\t\t\t\t\t\tsmode++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Modes\"] = modes;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dSubType == sTypeZWaveAlarm)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"Event: 0x%02X (%d)\", nValue, nValue);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"Alert\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = nValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeLux)\n\t\t\t\t\t{\n\t\t\t\t\t\tsprintf(szTmp, \"%.0f Lux\", atof(sValue.c_str()));\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeWEIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tsprintf(szTmp, \"%g %s\", m_sql.m_weightscale * atof(sValue.c_str()), m_sql.m_weightsign.c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szTmp;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = false;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeUsage)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dSubType == sTypeElectric)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szData, \"%g Watt\", atof(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeRFXSensor)\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch (dSubType)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase sTypeRFXSensorAD:\n\t\t\t\t\t\t\tsprintf(szData, \"%d mV\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"current\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase sTypeRFXSensorVolt:\n\t\t\t\t\t\t\tsprintf(szData, \"%d mV\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"current\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeRego6XXValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch (dSubType)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase sTypeRego6XXStatus:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::string lstatus = \"On\";\n\n\t\t\t\t\t\t\tif (atoi(sValue.c_str()) == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlstatus = \"Off\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveDimmer\"] = false;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = 0;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveGroupCmd\"] = false;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"TypeImg\"] = \"utility\";\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = STYPE_OnOff;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchType\"] = Switch_Type_Desc(STYPE_OnOff);\n\t\t\t\t\t\t\tsprintf(szData, \"%d\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = szData;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"StrParam1\"] = strParam1;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"StrParam2\"] = strParam2;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\n\t\t\t\t\t\t\tif (CustomImage < static_cast<int>(m_custom_light_icons.size()))\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = m_custom_light_icons[CustomImage].RootFile;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"Image\"] = \"Light\";\n\n\t\t\t\t\t\t\tuint64_t camIDX = m_mainworker.m_cameras.IsDevSceneInCamera(0, sd[0]);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"UsedByCamera\"] = (camIDX != 0) ? true : false;\n\t\t\t\t\t\t\tif (camIDX != 0) {\n\t\t\t\t\t\t\t\tstd::stringstream scidx;\n\t\t\t\t\t\t\t\tscidx << camIDX;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"CameraIdx\"] = scidx.str();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Level\"] = 0;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"LevelInt\"] = atoi(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase sTypeRego6XXCounter:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//get value of today\n\t\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\t\t\t\tchar szDate[40];\n\t\t\t\t\t\t\tsprintf(szDate, \"%04d-%02d-%02d\", ltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday);\n\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\",\n\t\t\t\t\t\t\t\tsd[0].c_str(), szDate);\n\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd2 = result2[0];\n\n\t\t\t\t\t\t\t\tunsigned long long total_min = std::strtoull(sd2[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_max = std::strtoull(sd2[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\tunsigned long long total_real;\n\n\t\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"result\"][ii][\"SwitchTypeVal\"] = MTYPE_COUNTER;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Counter\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"CounterToday\"] = szTmp;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sValue;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n#ifdef ENABLE_PYTHON\n\t\t\t\t\tif (pHardware != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_PythonPlugin)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tPlugins::CPlugin *pPlugin = (Plugins::CPlugin*)pHardware;\n\t\t\t\t\t\t\tbHaveTimeout = pPlugin->HasNodeFailed(atoi(sd[2].c_str()));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n#endif\n\t\t\t\t\troot[\"result\"][ii][\"Timers\"] = (bHasTimers == true) ? \"true\" : \"false\";\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::UploadFloorplanImage(WebEmSession & session, const request& req, std::string & redirect_uri)\n\t\t{\n\t\t\tredirect_uri = \"/index.html\";\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string planname = request::findValue(&req, \"planname\");\n\t\t\tstd::string scalefactor = request::findValue(&req, \"scalefactor\");\n\t\t\tstd::string imagefile = request::findValue(&req, \"imagefile\");\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tm_sql.safe_query(\"INSERT INTO Floorplans ([Name],[ScaleFactor]) VALUES('%s','%s')\", planname.c_str(),scalefactor.c_str());\n\t\t\tresult = m_sql.safe_query(\"SELECT MAX(ID) FROM Floorplans\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tif (!m_sql.safe_UpdateBlobInTableWithID(\"Floorplans\", \"Image\", result[0][0], imagefile))\n\t\t\t\t\t_log.Log(LOG_ERROR, \"SQL: Problem inserting floorplan image into database! \");\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx == \"\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\treply::set_content(&rep, result[0][0].begin(), result[0][0].end());\n\t\t\tstd::string oname = \"floorplan\";\n\t\t\tif (result[0][0].size() > 10)\n\t\t\t{\n\t\t\t\tif (result[0][0][0] == 'P')\n\t\t\t\t\toname += \".png\";\n\t\t\t\telse if (result[0][0][0] == -1)\n\t\t\t\t\toname += \".jpg\";\n\t\t\t\telse if (result[0][0][0] == 'B')\n\t\t\t\t\toname += \".bmp\";\n\t\t\t\telse if (result[0][0][0] == 'G')\n\t\t\t\t\toname += \".gif\";\n\t\t\t}\n\t\t\treply::add_header_attachment(&rep, oname);\n\t\t}\n\n\t\tvoid CWebServer::GetDatabaseBackup(WebEmSession & session, const request& req, reply & rep)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n#ifdef WIN32\n\t\t\tstd::string OutputFileName = szUserDataFolder + \"backup.db\";\n#else\n\t\t\tstd::string OutputFileName = \"/tmp/backup.db\";\n#endif\n\t\t\tif (m_sql.BackupDatabase(OutputFileName))\n\t\t\t{\n\t\t\t\tstd::string szAttachmentName = \"domoticz.db\";\n\t\t\t\tstd::string szVar;\n\t\t\t\tif (m_sql.GetPreferencesVar(\"Title\", szVar))\n\t\t\t\t{\n\t\t\t\t\tstdreplace(szVar, \" \", \"_\");\n\t\t\t\t\tstdreplace(szVar, \"/\", \"_\");\n\t\t\t\t\tstdreplace(szVar, \"\\\\\", \"_\");\n\t\t\t\t\tif (!szVar.empty()) {\n\t\t\t\t\t\tszAttachmentName = szVar + \".db\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treply::set_content_from_file(&rep, OutputFileName, szAttachmentName, true);\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_DeleteDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteDevice\";\n\t\t\tm_sql.DeleteDevices(idx);\n\t\t\tm_mainworker.m_scheduler.ReloadSchedules();\n\t\t}\n\n\t\tvoid CWebServer::RType_AddScene(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\tif (name.empty())\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = \"No Scene Name specified!\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstd::string stype = request::findValue(&req, \"scenetype\");\n\t\t\tif (stype.empty())\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = \"No Scene Type specified!\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (m_sql.DoesSceneByNameExits(name) == true)\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = \"A Scene with this Name already Exits!\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddScene\";\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"INSERT INTO Scenes (Name,SceneType) VALUES ('%q',%d)\",\n\t\t\t\tname.c_str(),\n\t\t\t\tatoi(stype.c_str())\n\t\t\t);\n\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t{\n\t\t\t\tm_mainworker.m_eventsystem.GetCurrentScenesGroups();\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_DeleteScene(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteScene\";\n\t\t\tm_sql.safe_query(\"DELETE FROM Scenes WHERE (ID == '%q')\", idx.c_str());\n\t\t\tm_sql.safe_query(\"DELETE FROM SceneDevices WHERE (SceneRowID == '%q')\", idx.c_str());\n\t\t\tm_sql.safe_query(\"DELETE FROM SceneTimers WHERE (SceneRowID == '%q')\", idx.c_str());\n\t\t\tm_sql.safe_query(\"DELETE FROM SceneLog WHERE (SceneRowID=='%q')\", idx.c_str());\n\t\t\tuint64_t ullidx = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\tm_mainworker.m_eventsystem.RemoveSingleState(ullidx, m_mainworker.m_eventsystem.REASON_SCENEGROUP);\n\t\t}\n\n\t\tvoid CWebServer::RType_UpdateScene(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\tstd::string description = request::findValue(&req, \"description\");\n\t\t\tif ((idx.empty()) || (name.empty()))\n\t\t\t\treturn;\n\t\t\tstd::string stype = request::findValue(&req, \"scenetype\");\n\t\t\tif (stype.empty())\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"ERR\";\n\t\t\t\troot[\"message\"] = \"No Scene Type specified!\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstd::string tmpstr = request::findValue(&req, \"protected\");\n\t\t\tint iProtected = (tmpstr == \"true\") ? 1 : 0;\n\n\t\t\tstd::string onaction = base64_decode(request::findValue(&req, \"onaction\"));\n\t\t\tstd::string offaction = base64_decode(request::findValue(&req, \"offaction\"));\n\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"UpdateScene\";\n\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Name='%q', Description='%q', SceneType=%d, Protected=%d, OnAction='%q', OffAction='%q' WHERE (ID == '%q')\",\n\t\t\t\tname.c_str(),\n\t\t\t\tdescription.c_str(),\n\t\t\t\tatoi(stype.c_str()),\n\t\t\t\tiProtected,\n\t\t\t\tonaction.c_str(),\n\t\t\t\toffaction.c_str(),\n\t\t\t\tidx.c_str()\n\t\t\t);\n\t\t\tuint64_t ullidx = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\tm_mainworker.m_eventsystem.WWWUpdateSingleState(ullidx, name, m_mainworker.m_eventsystem.REASON_SCENEGROUP);\n\t\t}\n\n\t\tbool compareIconsByName(const http::server::CWebServer::_tCustomIcon &a, const http::server::CWebServer::_tCustomIcon &b)\n\t\t{\n\t\t\treturn a.Title < b.Title;\n\t\t}\n\n\t\tvoid CWebServer::RType_CustomLightIcons(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tint ii = 0;\n\n\t\t\tstd::vector<_tCustomIcon> temp_custom_light_icons = m_custom_light_icons;\n\t\t\t//Sort by name\n\t\t\tstd::sort(temp_custom_light_icons.begin(), temp_custom_light_icons.end(), compareIconsByName);\n\n\t\t\tfor (const auto & itt : temp_custom_light_icons)\n\t\t\t{\n\t\t\t\troot[\"result\"][ii][\"idx\"] = itt.idx;\n\t\t\t\troot[\"result\"][ii][\"imageSrc\"] = itt.RootFile;\n\t\t\t\troot[\"result\"][ii][\"text\"] = itt.Title;\n\t\t\t\troot[\"result\"][ii][\"description\"] = itt.Description;\n\t\t\t\tii++;\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t}\n\n\t\tvoid CWebServer::RType_Plans(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Plans\";\n\n\t\t\tstd::string sDisplayHidden = request::findValue(&req, \"displayhidden\");\n\t\t\tbool bDisplayHidden = (sDisplayHidden == \"1\");\n\n\t\t\tstd::vector<std::vector<std::string> > result, result2;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, [Order] FROM Plans ORDER BY [Order]\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tstd::string Name = sd[1];\n\t\t\t\t\tbool bIsHidden = (Name[0] == '$');\n\n\t\t\t\t\tif ((bDisplayHidden) || (!bIsHidden))\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"Name\"] = Name;\n\t\t\t\t\t\troot[\"result\"][ii][\"Order\"] = sd[2];\n\n\t\t\t\t\t\tunsigned int totDevices = 0;\n\n\t\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT COUNT(*) FROM DeviceToPlansMap WHERE (PlanID=='%q')\",\n\t\t\t\t\t\t\tsd[0].c_str());\n\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotDevices = (unsigned int)atoi(result2[0][0].c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"result\"][ii][\"Devices\"] = totDevices;\n\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_FloorPlans(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Floorplans\";\n\n\t\t\tstd::vector<std::vector<std::string> > result, result2, result3;\n\n\t\t\tresult = m_sql.safe_query(\"SELECT Key, nValue, sValue FROM Preferences WHERE Key LIKE 'Floorplan%%'\");\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\tfor (const auto & itt : result)\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\tstd::string Key = sd[0];\n\t\t\t\tint nValue = atoi(sd[1].c_str());\n\t\t\t\tstd::string sValue = sd[2];\n\n\t\t\t\tif (Key == \"FloorplanPopupDelay\")\n\t\t\t\t{\n\t\t\t\t\troot[\"PopupDelay\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanFullscreenMode\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FullscreenMode\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanAnimateZoom\")\n\t\t\t\t{\n\t\t\t\t\troot[\"AnimateZoom\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanShowSensorValues\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShowSensorValues\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanShowSwitchValues\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShowSwitchValues\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanShowSceneNames\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShowSceneNames\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanRoomColour\")\n\t\t\t\t{\n\t\t\t\t\troot[\"RoomColour\"] = sValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanActiveOpacity\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ActiveRoomOpacity\"] = nValue;\n\t\t\t\t}\n\t\t\t\tif (Key == \"FloorplanInactiveOpacity\")\n\t\t\t\t{\n\t\t\t\t\troot[\"InactiveRoomOpacity\"] = nValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult2 = m_sql.safe_query(\"SELECT ID, Name, ScaleFactor, [Order] FROM Floorplans ORDER BY [Order]\");\n\t\t\tif (!result2.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result2)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\tstd::string ImageURL = \"images/floorplans/plan?idx=\" + sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Image\"] = ImageURL;\n\t\t\t\t\troot[\"result\"][ii][\"ScaleFactor\"] = sd[2];\n\t\t\t\t\troot[\"result\"][ii][\"Order\"] = sd[3];\n\n\t\t\t\t\tunsigned int totPlans = 0;\n\n\t\t\t\t\tresult3 = m_sql.safe_query(\"SELECT COUNT(*) FROM Plans WHERE (FloorplanID=='%q')\", sd[0].c_str());\n\t\t\t\t\tif (!result3.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\ttotPlans = (unsigned int)atoi(result3[0][0].c_str());\n\t\t\t\t\t}\n\t\t\t\t\troot[\"result\"][ii][\"Plans\"] = totPlans;\n\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_Scenes(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Scenes\";\n\t\t\troot[\"AllowWidgetOrdering\"] = m_sql.m_bAllowWidgetOrdering;\n\n\t\t\tstd::string sDisplayHidden = request::findValue(&req, \"displayhidden\");\n\t\t\tbool bDisplayHidden = (sDisplayHidden == \"1\");\n\n\t\t\tstd::string sLastUpdate = request::findValue(&req, \"lastupdate\");\n\n\t\t\ttime_t LastUpdate = 0;\n\t\t\tif (sLastUpdate != \"\")\n\t\t\t{\n\t\t\t\tstd::stringstream sstr;\n\t\t\t\tsstr << sLastUpdate;\n\t\t\t\tsstr >> LastUpdate;\n\t\t\t}\n\n\t\t\ttime_t now = mytime(NULL);\n\t\t\tstruct tm tm1;\n\t\t\tlocaltime_r(&now, &tm1);\n\t\t\tstruct tm tLastUpdate;\n\t\t\tlocaltime_r(&now, &tLastUpdate);\n\n\t\t\troot[\"ActTime\"] = static_cast<int>(now);\n\n\t\t\tstd::vector<std::vector<std::string> > result, result2;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Activators, Favorite, nValue, SceneType, LastUpdate, Protected, OnAction, OffAction, Description FROM Scenes ORDER BY [Order]\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tstd::string sName = sd[1];\n\t\t\t\t\tif ((bDisplayHidden == false) && (sName[0] == '$'))\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tstd::string sLastUpdate = sd[6].c_str();\n\t\t\t\t\tif (LastUpdate != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttime_t cLastUpdate;\n\t\t\t\t\t\tParseSQLdatetime(cLastUpdate, tLastUpdate, sLastUpdate, tm1.tm_isdst);\n\t\t\t\t\t\tif (cLastUpdate <= LastUpdate)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tunsigned char nValue = atoi(sd[4].c_str());\n\t\t\t\t\tunsigned char scenetype = atoi(sd[5].c_str());\n\t\t\t\t\tint iProtected = atoi(sd[7].c_str());\n\n\t\t\t\t\tstd::string onaction = base64_encode(sd[8]);\n\t\t\t\t\tstd::string offaction = base64_encode(sd[9]);\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sName;\n\t\t\t\t\troot[\"result\"][ii][\"Description\"] = sd[10];\n\t\t\t\t\troot[\"result\"][ii][\"Favorite\"] = atoi(sd[3].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"Protected\"] = (iProtected != 0);\n\t\t\t\t\troot[\"result\"][ii][\"OnAction\"] = onaction;\n\t\t\t\t\troot[\"result\"][ii][\"OffAction\"] = offaction;\n\n\t\t\t\t\tif (scenetype == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = \"Scene\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"result\"][ii][\"Type\"] = \"Group\";\n\t\t\t\t\t}\n\n\t\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sLastUpdate;\n\n\t\t\t\t\tif (nValue == 0)\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"Off\";\n\t\t\t\t\telse if (nValue == 1)\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"On\";\n\t\t\t\t\telse\n\t\t\t\t\t\troot[\"result\"][ii][\"Status\"] = \"Mixed\";\n\t\t\t\t\troot[\"result\"][ii][\"Timers\"] = (m_sql.HasSceneTimers(sd[0]) == true) ? \"true\" : \"false\";\n\t\t\t\t\tuint64_t camIDX = m_mainworker.m_cameras.IsDevSceneInCamera(1, sd[0]);\n\t\t\t\t\troot[\"result\"][ii][\"UsedByCamera\"] = (camIDX != 0) ? true : false;\n\t\t\t\t\tif (camIDX != 0) {\n\t\t\t\t\t\tstd::stringstream scidx;\n\t\t\t\t\t\tscidx << camIDX;\n\t\t\t\t\t\troot[\"result\"][ii][\"CameraIdx\"] = scidx.str();\n\t\t\t\t\t}\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!m_mainworker.m_LastSunriseSet.empty())\n\t\t\t{\n\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\tStringSplit(m_mainworker.m_LastSunriseSet, \";\", strarray);\n\t\t\t\tif (strarray.size() == 10)\n\t\t\t\t{\n\t\t\t\t\tchar szTmp[100];\n\t\t\t\t\t//strftime(szTmp, 80, \"%b %d %Y %X\", &tm1);\n\t\t\t\t\tstrftime(szTmp, 80, \"%Y-%m-%d %X\", &tm1);\n\t\t\t\t\troot[\"ServerTime\"] = szTmp;\n\t\t\t\t\troot[\"Sunrise\"] = strarray[0];\n\t\t\t\t\troot[\"Sunset\"] = strarray[1];\n\t\t\t\t\troot[\"SunAtSouth\"] = strarray[2];\n\t\t\t\t\troot[\"CivTwilightStart\"] = strarray[3];\n\t\t\t\t\troot[\"CivTwilightEnd\"] = strarray[4];\n\t\t\t\t\troot[\"NautTwilightStart\"] = strarray[5];\n\t\t\t\t\troot[\"NautTwilightEnd\"] = strarray[6];\n\t\t\t\t\troot[\"AstrTwilightStart\"] = strarray[7];\n\t\t\t\t\troot[\"AstrTwilightEnd\"] = strarray[8];\n\t\t\t\t\troot[\"DayLength\"] = strarray[9];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_Hardware(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Hardware\";\n\n#ifdef WITH_OPENZWAVE\n\t\t\tm_ZW_Hwidx = -1;\n#endif\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout FROM Hardware ORDER BY ID ASC\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t_eHardwareTypes hType = (_eHardwareTypes)atoi(sd[3].c_str());\n\t\t\t\t\tif (hType == HTYPE_DomoticzInternal)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (hType == HTYPE_RESERVED_FOR_YOU_1)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\troot[\"result\"][ii][\"Enabled\"] = (sd[2] == \"1\") ? \"true\" : \"false\";\n\t\t\t\t\troot[\"result\"][ii][\"Type\"] = hType;\n\t\t\t\t\troot[\"result\"][ii][\"Address\"] = sd[4];\n\t\t\t\t\troot[\"result\"][ii][\"Port\"] = atoi(sd[5].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"SerialPort\"] = sd[6];\n\t\t\t\t\troot[\"result\"][ii][\"Username\"] = sd[7];\n\t\t\t\t\troot[\"result\"][ii][\"Password\"] = sd[8];\n\t\t\t\t\troot[\"result\"][ii][\"Extra\"] = sd[9];\n\n\t\t\t\t\tif (hType == HTYPE_PythonPlugin) {\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode1\"] = sd[10];  // Plugins can have non-numeric values in the Mode fields\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode2\"] = sd[11];\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode3\"] = sd[12];\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode4\"] = sd[13];\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode5\"] = sd[14];\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode6\"] = sd[15];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode1\"] = atoi(sd[10].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode2\"] = atoi(sd[11].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode3\"] = atoi(sd[12].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode4\"] = atoi(sd[13].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode5\"] = atoi(sd[14].c_str());\n\t\t\t\t\t\troot[\"result\"][ii][\"Mode6\"] = atoi(sd[15].c_str());\n\t\t\t\t\t}\n\t\t\t\t\troot[\"result\"][ii][\"DataTimeout\"] = atoi(sd[16].c_str());\n\n\t\t\t\t\t//Special case for openzwave (status for nodes queried)\n\t\t\t\t\tCDomoticzHardwareBase *pHardware = m_mainworker.GetHardware(atoi(sd[0].c_str()));\n\t\t\t\t\tif (pHardware != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(pHardware->HwdType == HTYPE_RFXtrx315) ||\n\t\t\t\t\t\t\t(pHardware->HwdType == HTYPE_RFXtrx433) ||\n\t\t\t\t\t\t\t(pHardware->HwdType == HTYPE_RFXtrx868) ||\n\t\t\t\t\t\t\t(pHardware->HwdType == HTYPE_RFXLAN)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCRFXBase *pMyHardware = reinterpret_cast<CRFXBase*>(pHardware);\n\t\t\t\t\t\t\tif (!pMyHardware->m_Version.empty())\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = pMyHardware->m_Version;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = sd[11];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"noiselvl\"] = pMyHardware->m_NoiseLevel;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((pHardware->HwdType == HTYPE_MySensorsUSB) || (pHardware->HwdType == HTYPE_MySensorsTCP) || (pHardware->HwdType == HTYPE_MySensorsMQTT))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMySensorsBase *pMyHardware = reinterpret_cast<MySensorsBase*>(pHardware);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = pMyHardware->GetGatewayVersion();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((pHardware->HwdType == HTYPE_OpenThermGateway) || (pHardware->HwdType == HTYPE_OpenThermGatewayTCP))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOTGWBase *pMyHardware = reinterpret_cast<OTGWBase*>(pHardware);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = pMyHardware->m_Version;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((pHardware->HwdType == HTYPE_RFLINKUSB) || (pHardware->HwdType == HTYPE_RFLINKTCP))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCRFLinkBase *pMyHardware = reinterpret_cast<CRFLinkBase*>(pHardware);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = pMyHardware->m_Version;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n#ifdef WITH_OPENZWAVE\n\t\t\t\t\t\t\tif (pHardware->HwdType == HTYPE_OpenZWave)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCOpenZWave *pOZWHardware = reinterpret_cast<COpenZWave*>(pHardware);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"version\"] = pOZWHardware->GetVersionLong();\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"NodesQueried\"] = (pOZWHardware->m_awakeNodesQueried || pOZWHardware->m_allNodesQueried);\n\t\t\t\t\t\t\t}\n#endif\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_Devices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string rfilter = request::findValue(&req, \"filter\");\n\t\t\tstd::string order = request::findValue(&req, \"order\");\n\t\t\tstd::string rused = request::findValue(&req, \"used\");\n\t\t\tstd::string rid = request::findValue(&req, \"rid\");\n\t\t\tstd::string planid = request::findValue(&req, \"plan\");\n\t\t\tstd::string floorid = request::findValue(&req, \"floor\");\n\t\t\tstd::string sDisplayHidden = request::findValue(&req, \"displayhidden\");\n\t\t\tstd::string sFetchFavorites = request::findValue(&req, \"favorite\");\n\t\t\tstd::string sDisplayDisabled = request::findValue(&req, \"displaydisabled\");\n\t\t\tbool bDisplayHidden = (sDisplayHidden == \"1\");\n\t\t\tbool bFetchFavorites = (sFetchFavorites == \"1\");\n\n\t\t\tint HideDisabledHardwareSensors = 0;\n\t\t\tm_sql.GetPreferencesVar(\"HideDisabledHardwareSensors\", HideDisabledHardwareSensors);\n\t\t\tbool bDisabledDisabled = (HideDisabledHardwareSensors == 0);\n\t\t\tif (sDisplayDisabled == \"1\")\n\t\t\t\tbDisabledDisabled = true;\n\n\t\t\tstd::string sLastUpdate = request::findValue(&req, \"lastupdate\");\n\t\t\tstd::string hwidx = request::findValue(&req, \"hwidx\"); // OTO\n\n\t\t\ttime_t LastUpdate = 0;\n\t\t\tif (sLastUpdate != \"\")\n\t\t\t{\n\t\t\t\tstd::stringstream sstr;\n\t\t\t\tsstr << sLastUpdate;\n\t\t\t\tsstr >> LastUpdate;\n\t\t\t}\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Devices\";\n\t\t\troot[\"app_version\"] = szAppVersion;\n\t\t\tGetJSonDevices(root, rused, rfilter, order, rid, planid, floorid, bDisplayHidden, bDisabledDisabled, bFetchFavorites, LastUpdate, session.username, hwidx);\n\t\t}\n\n\t\tvoid CWebServer::RType_Users(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint urights = 3;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t}\n\t\t\tif (urights < 2)\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Users\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Active, Username, Password, Rights, RemoteSharing, TabsEnabled FROM USERS ORDER BY ID ASC\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Enabled\"] = (sd[1] == \"1\") ? \"true\" : \"false\";\n\t\t\t\t\troot[\"result\"][ii][\"Username\"] = base64_decode(sd[2]);\n\t\t\t\t\troot[\"result\"][ii][\"Password\"] = sd[3];\n\t\t\t\t\troot[\"result\"][ii][\"Rights\"] = atoi(sd[4].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"RemoteSharing\"] = atoi(sd[5].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"TabsEnabled\"] = atoi(sd[6].c_str());\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_Mobiles(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint urights = 3;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t}\n\t\t\tif (urights < 2)\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Mobiles\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Active, Name, UUID, LastUpdate, DeviceType FROM MobileDevices ORDER BY Name ASC\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Enabled\"] = (sd[1] == \"1\") ? \"true\" : \"false\";\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[2];\n\t\t\t\t\troot[\"result\"][ii][\"UUID\"] = sd[3];\n\t\t\t\t\troot[\"result\"][ii][\"LastUpdate\"] = sd[4];\n\t\t\t\t\troot[\"result\"][ii][\"DeviceType\"] = sd[5];\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SetSetpoint(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint iUser = -1;\n\t\t\tint urights = 3;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tiUser = FindUser(session.username.c_str());\n\t\t\t\tif (iUser != -1)\n\t\t\t\t{\n\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (urights < 1)\n\t\t\t\treturn;\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string setpoint = request::findValue(&req, \"setpoint\");\n\t\t\tif (\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(setpoint.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"SetSetpoint\";\n\t\t\tif (iUser != -1)\n\t\t\t{\n\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a SetPoint command\", m_users[iUser].Username.c_str());\n\t\t\t}\n\t\t\tm_mainworker.SetSetPoint(idx, static_cast<float>(atof(setpoint.c_str())));\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetSceneActivations(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetSceneActivations\";\n\n\t\t\tstd::vector<std::vector<std::string> > result, result2;\n\t\t\tresult = m_sql.safe_query(\"SELECT Activators, SceneType FROM Scenes WHERE (ID==%q)\", idx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\tint ii = 0;\n\t\t\tstd::string Activators = result[0][0];\n\t\t\tint SceneType = atoi(result[0][1].c_str());\n\t\t\tif (!Activators.empty())\n\t\t\t{\n\t\t\t\t//Get Activator device names\n\t\t\t\tstd::vector<std::string> arrayActivators;\n\t\t\t\tStringSplit(Activators, \";\", arrayActivators);\n\t\t\t\tfor (const auto & ittAct : arrayActivators)\n\t\t\t\t{\n\t\t\t\t\tstd::string sCodeCmd = ittAct;\n\n\t\t\t\t\tstd::vector<std::string> arrayCode;\n\t\t\t\t\tStringSplit(sCodeCmd, \":\", arrayCode);\n\n\t\t\t\t\tstd::string sID = arrayCode[0];\n\t\t\t\t\tint sCode = 0;\n\t\t\t\t\tif (arrayCode.size() == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tsCode = atoi(arrayCode[1].c_str());\n\t\t\t\t\t}\n\n\n\t\t\t\t\tresult2 = m_sql.safe_query(\"SELECT Name, [Type], SubType, SwitchType FROM DeviceStatus WHERE (ID==%q)\", sID.c_str());\n\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result2[0];\n\t\t\t\t\t\tstd::string lstatus = \"-\";\n\t\t\t\t\t\tif ((SceneType == 0) && (arrayCode.size() == 2))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunsigned char devType = (unsigned char)atoi(sd[1].c_str());\n\t\t\t\t\t\t\tunsigned char subType = (unsigned char)atoi(sd[2].c_str());\n\t\t\t\t\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(sd[3].c_str());\n\t\t\t\t\t\t\tint nValue = sCode;\n\t\t\t\t\t\t\tstd::string sValue = \"\";\n\t\t\t\t\t\t\tint llevel = 0;\n\t\t\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\t\t\tint maxDimLevel = 0;\n\t\t\t\t\t\t\tGetLightStatus(devType, subType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuint64_t dID = std::strtoull(sID.c_str(), nullptr, 10);\n\t\t\t\t\t\troot[\"result\"][ii][\"idx\"] = dID;\n\t\t\t\t\t\troot[\"result\"][ii][\"name\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"code\"] = sCode;\n\t\t\t\t\t\troot[\"result\"][ii][\"codestr\"] = lstatus;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_AddSceneCode(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sceneidx = request::findValue(&req, \"sceneidx\");\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string cmnd = request::findValue(&req, \"cmnd\");\n\t\t\tif (\n\t\t\t\t(sceneidx.empty()) ||\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(cmnd.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddSceneCode\";\n\n\t\t\t//First check if we do not already have this device as activation code\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT Activators, SceneType FROM Scenes WHERE (ID==%q)\", sceneidx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\tstd::string Activators = result[0][0];\n\t\t\tunsigned char scenetype = atoi(result[0][1].c_str());\n\n\t\t\tif (!Activators.empty())\n\t\t\t{\n\t\t\t\t//Get Activator device names\n\t\t\t\tstd::vector<std::string> arrayActivators;\n\t\t\t\tStringSplit(Activators, \";\", arrayActivators);\n\t\t\t\tfor (const auto & ittAct : arrayActivators)\n\t\t\t\t{\n\t\t\t\t\tstd::string sCodeCmd = ittAct;\n\n\t\t\t\t\tstd::vector<std::string> arrayCode;\n\t\t\t\t\tStringSplit(sCodeCmd, \":\", arrayCode);\n\n\t\t\t\t\tstd::string sID = arrayCode[0];\n\t\t\t\t\tstd::string sCode = \"\";\n\t\t\t\t\tif (arrayCode.size() == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tsCode = arrayCode[1];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sID == idx)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (scenetype == 1)\n\t\t\t\t\t\t\treturn; //Group does not work with separate codes, so already there\n\t\t\t\t\t\tif (sCode == cmnd)\n\t\t\t\t\t\t\treturn; //same code, already there!\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!Activators.empty())\n\t\t\t\tActivators += \";\";\n\t\t\tActivators += idx;\n\t\t\tif (scenetype == 0)\n\t\t\t{\n\t\t\t\tActivators += \":\" + cmnd;\n\t\t\t}\n\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Activators='%q' WHERE (ID==%q)\", Activators.c_str(), sceneidx.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_RemoveSceneCode(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sceneidx = request::findValue(&req, \"sceneidx\");\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string code = request::findValue(&req, \"code\");\n\t\t\tif (\n\t\t\t\t(idx.empty()) ||\n\t\t\t\t(sceneidx.empty()) ||\n\t\t\t\t(code.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"RemoveSceneCode\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT Activators, SceneType FROM Scenes WHERE (ID==%q)\", sceneidx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\tstd::string Activators = result[0][0];\n\t\t\tint SceneType = atoi(result[0][1].c_str());\n\t\t\tif (!Activators.empty())\n\t\t\t{\n\t\t\t\t//Get Activator device names\n\t\t\t\tstd::vector<std::string> arrayActivators;\n\t\t\t\tStringSplit(Activators, \";\", arrayActivators);\n\t\t\t\tstd::string newActivation = \"\";\n\t\t\t\tfor (const auto & ittAct : arrayActivators)\n\t\t\t\t{\n\t\t\t\t\tstd::string sCodeCmd = ittAct;\n\n\t\t\t\t\tstd::vector<std::string> arrayCode;\n\t\t\t\t\tStringSplit(sCodeCmd, \":\", arrayCode);\n\n\t\t\t\t\tstd::string sID = arrayCode[0];\n\t\t\t\t\tstd::string sCode = \"\";\n\t\t\t\t\tif (arrayCode.size() == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tsCode = arrayCode[1];\n\t\t\t\t\t}\n\t\t\t\t\tbool bFound = false;\n\t\t\t\t\tif (sID == idx)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((SceneType == 1) || (sCode.empty()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Also check the code\n\t\t\t\t\t\t\tbFound = (sCode == code);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!bFound)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!newActivation.empty())\n\t\t\t\t\t\t\tnewActivation += \";\";\n\t\t\t\t\t\tnewActivation += sID;\n\t\t\t\t\t\tif ((SceneType == 0) && (!sCode.empty()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnewActivation += \":\" + sCode;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (Activators != newActivation)\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Activators='%q' WHERE (ID==%q)\", newActivation.c_str(), sceneidx.c_str());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ClearSceneCodes(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sceneidx = request::findValue(&req, \"sceneidx\");\n\t\t\tif (sceneidx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"ClearSceneCode\";\n\n\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Activators='' WHERE (ID==%q)\", sceneidx.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetSerialDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetSerialDevices\";\n\n\t\t\tbool bUseDirectPath = false;\n\t\t\tstd::vector<std::string> serialports = GetSerialPorts(bUseDirectPath);\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : serialports)\n\t\t\t{\n\t\t\t\troot[\"result\"][ii][\"name\"] = itt;\n\t\t\t\troot[\"result\"][ii][\"value\"] = ii;\n\t\t\t\tii++;\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetDevicesList(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetDevicesList\";\n\t\t\tint ii = 0;\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name FROM DeviceStatus WHERE (Used == 1) ORDER BY Name\");\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\troot[\"result\"][ii][\"name\"] = sd[1];\n\t\t\t\t\troot[\"result\"][ii][\"value\"] = sd[0];\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Post_UploadCustomIcon(WebEmSession & session, const request& req, reply & rep)\n\t\t{\n\t\t\tJson::Value root;\n\t\t\troot[\"title\"] = \"UploadCustomIcon\";\n\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\troot[\"error\"] = \"Invalid\";\n\t\t\t//Only admin user allowed\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string zipfile = request::findValue(&req, \"file\");\n\t\t\tif (zipfile != \"\")\n\t\t\t{\n\t\t\t\tstd::string ErrorMessage;\n\t\t\t\tbool bOK = m_sql.InsertCustomIconFromZip(zipfile, ErrorMessage);\n\t\t\t\tif (bOK)\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"ERROR\";\n\t\t\t\t\troot[\"error\"] = ErrorMessage;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstd::string jcallback = request::findValue(&req, \"jsoncallback\");\n\t\t\tif (jcallback.size() == 0) {\n\t\t\t\treply::set_content(&rep, root.toStyledString());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treply::set_content(&rep, \"var data=\" + root.toStyledString() + '\\n' + jcallback + \"(data);\");\n\t\t}\n\n\t\tvoid CWebServer::Cmd_GetCustomIconSet(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetCustomIconSet\";\n\t\t\tint ii = 0;\n\t\t\tfor (const auto & itt : m_custom_light_icons)\n\t\t\t{\n\t\t\t\tif (itt.idx >= 100)\n\t\t\t\t{\n\t\t\t\t\tstd::string IconFile16 = \"images/\" + itt.RootFile + \".png\";\n\t\t\t\t\tstd::string IconFile48On = \"images/\" + itt.RootFile + \"48_On.png\";\n\t\t\t\t\tstd::string IconFile48Off = \"images/\" + itt.RootFile + \"48_Off.png\";\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = itt.idx - 100;\n\t\t\t\t\troot[\"result\"][ii][\"Title\"] = itt.Title;\n\t\t\t\t\troot[\"result\"][ii][\"Description\"] = itt.Description;\n\t\t\t\t\troot[\"result\"][ii][\"IconFile16\"] = IconFile16;\n\t\t\t\t\troot[\"result\"][ii][\"IconFile48On\"] = IconFile48On;\n\t\t\t\t\troot[\"result\"][ii][\"IconFile48Off\"] = IconFile48Off;\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeleteCustomIcon(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tif (sidx.empty())\n\t\t\t\treturn;\n\t\t\tint idx = atoi(sidx.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteCustomIcon\";\n\n\t\t\tm_sql.safe_query(\"DELETE FROM CustomImages WHERE (ID == %d)\", idx);\n\n\t\t\t//Delete icons file from disk\n\t\t\tfor (const auto & itt : m_custom_light_icons)\n\t\t\t{\n\t\t\t\tif (itt.idx == idx + 100)\n\t\t\t\t{\n\t\t\t\t\tstd::string IconFile16 = szWWWFolder + \"/images/\" + itt.RootFile + \".png\";\n\t\t\t\t\tstd::string IconFile48On = szWWWFolder + \"/images/\" + itt.RootFile + \"48_On.png\";\n\t\t\t\t\tstd::string IconFile48Off = szWWWFolder + \"/images/\" + itt.RootFile + \"48_Off.png\";\n\t\t\t\t\tstd::remove(IconFile16.c_str());\n\t\t\t\t\tstd::remove(IconFile48On.c_str());\n\t\t\t\t\tstd::remove(IconFile48Off.c_str());\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tReloadCustomSwitchIcons();\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateCustomIcon(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tstd::string sname = request::findValue(&req, \"name\");\n\t\t\tstd::string sdescription = request::findValue(&req, \"description\");\n\t\t\tif (\n\t\t\t\t(sidx.empty()) ||\n\t\t\t\t(sname.empty()) ||\n\t\t\t\t(sdescription.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tint idx = atoi(sidx.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"UpdateCustomIcon\";\n\n\t\t\tm_sql.safe_query(\"UPDATE CustomImages SET Name='%q', Description='%q' WHERE (ID == %d)\", sname.c_str(), sdescription.c_str(), idx);\n\t\t\tReloadCustomSwitchIcons();\n\t\t}\n\n\t\tvoid CWebServer::Cmd_RenameDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tstd::string sname = request::findValue(&req, \"name\");\n\t\t\tif (\n\t\t\t\t(sidx.empty()) ||\n\t\t\t\t(sname.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tint idx = atoi(sidx.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"RenameDevice\";\n\n\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Name='%q' WHERE (ID == %d)\", sname.c_str(), idx);\n\t\t\tuint64_t ullidx = std::strtoull(sidx.c_str(), nullptr, 10);\n\t\t\tm_mainworker.m_eventsystem.WWWUpdateSingleState(ullidx, sname, m_mainworker.m_eventsystem.REASON_DEVICE);\n\n#ifdef ENABLE_PYTHON\n\t\t\t// Notify plugin framework about the change\n\t\t\tm_mainworker.m_pluginsystem.DeviceModified(idx);\n#endif\n\t\t}\n\n\t\tvoid CWebServer::Cmd_RenameScene(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tstd::string sname = request::findValue(&req, \"name\");\n\t\t\tif (\n\t\t\t\t(sidx.empty()) ||\n\t\t\t\t(sname.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tint idx = atoi(sidx.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"RenameScene\";\n\n\t\t\tm_sql.safe_query(\"UPDATE Scenes SET Name='%q' WHERE (ID == %d)\", sname.c_str(), idx);\n\t\t\tuint64_t ullidx = std::strtoull(sidx.c_str(), nullptr, 10);\n\t\t\tm_mainworker.m_eventsystem.WWWUpdateSingleState(ullidx, sname, m_mainworker.m_eventsystem.REASON_SCENEGROUP);\n\t\t}\n\n\t\tvoid CWebServer::Cmd_SetUnused(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tif (sidx.empty())\n\t\t\t\treturn;\n\t\t\tint idx = atoi(sidx.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"SetUnused\";\n\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Used=0 WHERE (ID == %d)\", idx);\n\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t\tm_mainworker.m_eventsystem.RemoveSingleState(idx, m_mainworker.m_eventsystem.REASON_DEVICE);\n\n#ifdef ENABLE_PYTHON\n\t\t\t// Notify plugin framework about the change\n\t\t\tm_mainworker.m_pluginsystem.DeviceModified(idx);\n#endif\n\t\t}\n\n\t\tvoid CWebServer::Cmd_AddLogMessage(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string smessage = request::findValue(&req, \"message\");\n\t\t\tif (smessage.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddLogMessage\";\n\n\t\t\t_log.Log(LOG_STATUS, \"%s\", smessage.c_str());\n\t\t}\n\n\t\tvoid CWebServer::Cmd_ClearShortLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"ClearShortLog\";\n\n\t\t\t_log.Log(LOG_STATUS, \"Clearing Short Log...\");\n\n\t\t\tm_sql.ClearShortLog();\n\n\t\t\t_log.Log(LOG_STATUS, \"Short Log Cleared!\");\n\t\t}\n\n\t\tvoid CWebServer::Cmd_VacuumDatabase(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"VacuumDatabase\";\n\n\t\t\tm_sql.VacuumDatabase();\n\t\t}\n\n\t\tvoid CWebServer::Cmd_AddMobileDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string suuid = request::findValue(&req, \"uuid\");\n\t\t\tstd::string ssenderid = request::findValue(&req, \"senderid\");\n\t\t\tstd::string sname = request::findValue(&req, \"name\");\n\t\t\tstd::string sdevtype = request::findValue(&req, \"devicetype\");\n\t\t\tstd::string sactive = request::findValue(&req, \"active\");\n\t\t\tif (\n\t\t\t\t(suuid.empty()) ||\n\t\t\t\t(ssenderid.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"AddMobileDevice\";\n\n\t\t\tif (sactive.empty())\n\t\t\t\tsactive = \"1\";\n\t\t\tint iActive = (sactive == \"1\") ? 1 : 0;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID, Name, DeviceType FROM MobileDevices WHERE (UUID=='%q')\", suuid.c_str());\n\t\t\tif (result.empty())\n\t\t\t{\n\t\t\t\t//New\n\t\t\t\tm_sql.safe_query(\"INSERT INTO MobileDevices (Active,UUID,SenderID,Name,DeviceType) VALUES (%d,'%q','%q','%q','%q')\",\n\t\t\t\t\tiActive,\n\t\t\t\t\tsuuid.c_str(),\n\t\t\t\t\tssenderid.c_str(),\n\t\t\t\t\tsname.c_str(),\n\t\t\t\t\tsdevtype.c_str());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Update\n\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\tstruct tm ltime;\n\t\t\t\tlocaltime_r(&now, &ltime);\n\t\t\t\tm_sql.safe_query(\"UPDATE MobileDevices SET Active=%d, SenderID='%q', LastUpdate='%04d-%02d-%02d %02d:%02d:%02d' WHERE (UUID == '%q')\",\n\t\t\t\t\tiActive,\n\t\t\t\t\tssenderid.c_str(),\n\t\t\t\t\tltime.tm_year + 1900, ltime.tm_mon + 1, ltime.tm_mday, ltime.tm_hour, ltime.tm_min, ltime.tm_sec,\n\t\t\t\t\tsuuid.c_str()\n\t\t\t\t);\n\n\t\t\t\tstd::string dname = result[0][1];\n\t\t\t\tstd::string ddevtype = result[0][2];\n\t\t\t\tif (dname.empty() || ddevtype.empty())\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE MobileDevices SET Name='%q', DeviceType='%q' WHERE (UUID == '%q')\",\n\t\t\t\t\t\tsname.c_str(), sdevtype.c_str(),\n\t\t\t\t\t\tsuuid.c_str()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::Cmd_UpdateMobileDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tstd::string enabled = request::findValue(&req, \"enabled\");\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\n\t\t\tif (\n\t\t\t\t(sidx.empty()) ||\n\t\t\t\t(enabled.empty()) ||\n\t\t\t\t(name.empty())\n\t\t\t\t)\n\t\t\t\treturn;\n\t\t\tuint64_t idx = std::strtoull(sidx.c_str(), nullptr, 10);\n\n\t\t\tm_sql.safe_query(\"UPDATE MobileDevices SET Name='%q', Active=%d WHERE (ID==%\" PRIu64 \")\",\n\t\t\t\tname.c_str(), (enabled == \"true\") ? 1 : 0, idx);\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"UpdateMobile\";\n\t\t}\n\n\t\tvoid CWebServer::Cmd_DeleteMobileDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\t\t\tstd::string suuid = request::findValue(&req, \"uuid\");\n\t\t\tif (suuid.empty())\n\t\t\t\treturn;\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM MobileDevices WHERE (UUID=='%q')\", suuid.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\tm_sql.safe_query(\"DELETE FROM MobileDevices WHERE (UUID == '%q')\", suuid.c_str());\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"DeleteMobileDevice\";\n\t\t}\n\n\n\t\tvoid CWebServer::RType_GetTransfers(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetTransfers\";\n\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType FROM DeviceStatus WHERE (ID==%\" PRIu64 \")\",\n\t\t\t\tidx);\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint dType = atoi(result[0][0].c_str());\n\t\t\t\tif (\n\t\t\t\t\t(dType == pTypeTEMP) ||\n\t\t\t\t\t(dType == pTypeTEMP_HUM)\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT ID, Name FROM DeviceStatus WHERE (Type=='%q') AND (ID!=%\" PRIu64 \")\",\n\t\t\t\t\t\tresult[0][0].c_str(), idx);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT ID, Name FROM DeviceStatus WHERE (Type=='%q') AND (SubType=='%q') AND (ID!=%\" PRIu64 \")\",\n\t\t\t\t\t\tresult[0][0].c_str(), result[0][1].c_str(), idx);\n\t\t\t\t}\n\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Name\"] = sd[1];\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Will transfer Newest sensor log to OLD sensor,\n\t\t//then set the HardwareID/DeviceID/Unit/Name/Type/Subtype/Unit for the OLD sensor to the NEW sensor ID/Type/Subtype/Unit\n\t\t//then delete the NEW sensor\n\t\tvoid CWebServer::RType_TransferDevice(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string sidx = request::findValue(&req, \"idx\");\n\t\t\tif (sidx.empty())\n\t\t\t\treturn;\n\n\t\t\tstd::string newidx = request::findValue(&req, \"newidx\");\n\t\t\tif (newidx.empty())\n\t\t\t\treturn;\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\t//Check which device is newer\n\n\t\t\ttime_t now = mytime(NULL);\n\t\t\tstruct tm tm1;\n\t\t\tlocaltime_r(&now, &tm1);\n\t\t\tstruct tm LastUpdateTime_A;\n\t\t\tstruct tm LastUpdateTime_B;\n\n\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\"SELECT A.LastUpdate, B.LastUpdate FROM DeviceStatus as A, DeviceStatus as B WHERE (A.ID == '%q') AND (B.ID == '%q')\",\n\t\t\t\tsidx.c_str(), newidx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\tstd::string sLastUpdate_A = result[0][0];\n\t\t\tstd::string sLastUpdate_B = result[0][1];\n\n\t\t\ttime_t timeA, timeB;\n\t\t\tParseSQLdatetime(timeA, LastUpdateTime_A, sLastUpdate_A, tm1.tm_isdst);\n\t\t\tParseSQLdatetime(timeB, LastUpdateTime_B, sLastUpdate_B, tm1.tm_isdst);\n\n\t\t\tif (timeA < timeB)\n\t\t\t{\n\t\t\t\t//Swap idx with newidx\n\t\t\t\tsidx.swap(newidx);\n\t\t\t}\n\n\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\"SELECT HardwareID, DeviceID, Unit, Name, Type, SubType, SignalLevel, BatteryLevel, nValue, sValue FROM DeviceStatus WHERE (ID == '%q')\",\n\t\t\t\tnewidx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"TransferDevice\";\n\n\t\t\t//transfer device logs (new to old)\n\t\t\tm_sql.TransferDevice(newidx, sidx);\n\n\t\t\t//now delete the NEW device\n\t\t\tm_sql.DeleteDevices(newidx);\n\n\t\t\tm_mainworker.m_scheduler.ReloadSchedules();\n\t\t}\n\n\t\tvoid CWebServer::RType_Notifications(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"Notifications\";\n\n\t\t\tint ii = 0;\n\n\t\t\t//Add known notification systems\n\t\t\tfor (const auto & ittNotifiers : m_notifications.m_notifiers)\n\t\t\t{\n\t\t\t\troot[\"notifiers\"][ii][\"name\"] = ittNotifiers.first;\n\t\t\t\troot[\"notifiers\"][ii][\"description\"] = ittNotifiers.first;\n\t\t\t\tii++;\n\t\t\t}\n\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\t\t\tstd::vector<_tNotification> notifications = m_notifications.GetNotifications(idx);\n\t\t\tif (notifications.size() > 0)\n\t\t\t{\n\t\t\t\tii = 0;\n\t\t\t\tfor (const auto & itt : notifications)\n\t\t\t\t{\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = itt.ID;\n\t\t\t\t\tstd::string sParams = itt.Params;\n\t\t\t\t\tif (sParams.empty()) {\n\t\t\t\t\t\tsParams = \"S\";\n\t\t\t\t\t}\n\t\t\t\t\troot[\"result\"][ii][\"Params\"] = sParams;\n\t\t\t\t\troot[\"result\"][ii][\"Priority\"] = itt.Priority;\n\t\t\t\t\troot[\"result\"][ii][\"SendAlways\"] = itt.SendAlways;\n\t\t\t\t\troot[\"result\"][ii][\"CustomMessage\"] = itt.CustomMessage;\n\t\t\t\t\troot[\"result\"][ii][\"ActiveSystems\"] = itt.ActiveSystems;\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_GetSharedUserDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"GetSharedUserDevices\";\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tresult = m_sql.safe_query(\"SELECT DeviceRowID FROM SharedDevices WHERE (SharedUserID == '%q')\", idx.c_str());\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\troot[\"result\"][ii][\"DeviceRowIdx\"] = sd[0];\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_SetSharedUserDevices(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string userdevices = request::findValue(&req, \"devices\");\n\t\t\tif (idx.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"SetSharedUserDevices\";\n\t\t\tstd::vector<std::string> strarray;\n\t\t\tStringSplit(userdevices, \";\", strarray);\n\n\t\t\t//First delete all devices for this user, then add the (new) onces\n\t\t\tm_sql.safe_query(\"DELETE FROM SharedDevices WHERE (SharedUserID == '%q')\", idx.c_str());\n\n\t\t\tint nDevices = static_cast<int>(strarray.size());\n\t\t\tfor (int ii = 0; ii < nDevices; ii++)\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\"INSERT INTO SharedDevices (SharedUserID,DeviceRowID) VALUES ('%q','%q')\", idx.c_str(), strarray[ii].c_str());\n\t\t\t}\n\t\t\tLoadUsers();\n\t\t}\n\n\t\tvoid CWebServer::RType_SetUsed(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tif (session.rights != 2)\n\t\t\t{\n\t\t\t\tsession.reply_status = reply::forbidden;\n\t\t\t\treturn; //Only admin user allowed\n\t\t\t}\n\n\t\t\tstd::string idx = request::findValue(&req, \"idx\");\n\t\t\tstd::string deviceid = request::findValue(&req, \"deviceid\");\n\t\t\tstd::string name = request::findValue(&req, \"name\");\n\t\t\tstd::string description = request::findValue(&req, \"description\");\n\t\t\tstd::string sused = request::findValue(&req, \"used\");\n\t\t\tstd::string sswitchtype = request::findValue(&req, \"switchtype\");\n\t\t\tstd::string maindeviceidx = request::findValue(&req, \"maindeviceidx\");\n\t\t\tstd::string addjvalue = request::findValue(&req, \"addjvalue\");\n\t\t\tstd::string addjmulti = request::findValue(&req, \"addjmulti\");\n\t\t\tstd::string addjvalue2 = request::findValue(&req, \"addjvalue2\");\n\t\t\tstd::string addjmulti2 = request::findValue(&req, \"addjmulti2\");\n\t\t\tstd::string setPoint = request::findValue(&req, \"setpoint\");\n\t\t\tstd::string state = request::findValue(&req, \"state\");\n\t\t\tstd::string mode = request::findValue(&req, \"mode\");\n\t\t\tstd::string until = request::findValue(&req, \"until\");\n\t\t\tstd::string clock = request::findValue(&req, \"clock\");\n\t\t\tstd::string tmode = request::findValue(&req, \"tmode\");\n\t\t\tstd::string fmode = request::findValue(&req, \"fmode\");\n\t\t\tstd::string sCustomImage = request::findValue(&req, \"customimage\");\n\n\t\t\tstd::string strunit = request::findValue(&req, \"unit\");\n\t\t\tstd::string strParam1 = base64_decode(request::findValue(&req, \"strparam1\"));\n\t\t\tstd::string strParam2 = base64_decode(request::findValue(&req, \"strparam2\"));\n\t\t\tstd::string tmpstr = request::findValue(&req, \"protected\");\n\t\t\tbool bHasstrParam1 = request::hasValue(&req, \"strparam1\");\n\t\t\tint iProtected = (tmpstr == \"true\") ? 1 : 0;\n\n\t\t\tstd::string sOptions = base64_decode(request::findValue(&req, \"options\"));\n\t\t\tstd::string devoptions = CURLEncode::URLDecode(request::findValue(&req, \"devoptions\"));\n\t\t\tstd::string EnergyMeterMode = CURLEncode::URLDecode(request::findValue(&req, \"EnergyMeterMode\"));\n\n\t\t\tchar szTmp[200];\n\n\t\t\tbool bHaveUser = (session.username != \"\");\n\t\t\tint iUser = -1;\n\t\t\tif (bHaveUser)\n\t\t\t{\n\t\t\t\tiUser = FindUser(session.username.c_str());\n\t\t\t}\n\n\t\t\tint switchtype = -1;\n\t\t\tif (sswitchtype != \"\")\n\t\t\t\tswitchtype = atoi(sswitchtype.c_str());\n\n\t\t\tif ((idx.empty()) || (sused.empty()))\n\t\t\t\treturn;\n\t\t\tint used = (sused == \"true\") ? 1 : 0;\n\t\t\tif (maindeviceidx != \"\")\n\t\t\t\tused = 0;\n\n\t\t\tint CustomImage = 0;\n\t\t\tif (sCustomImage != \"\")\n\t\t\t\tCustomImage = atoi(sCustomImage.c_str());\n\n\t\t\t//Strip trailing spaces in 'name'\n\t\t\tname = stdstring_trim(name);\n\n\t\t\t//Strip trailing spaces in 'description'\n\t\t\tdescription = stdstring_trim(description);\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\tresult = m_sql.safe_query(\"SELECT Type,SubType,HardwareID FROM DeviceStatus WHERE (ID == '%q')\", idx.c_str());\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\tunsigned char dType = atoi(sd[0].c_str());\n\t\t\t//unsigned char dSubType=atoi(sd[1].c_str());\n\t\t\tint HwdID = atoi(sd[2].c_str());\n\t\t\tstd::string sHwdID = sd[2];\n\n\t\t\tif (setPoint != \"\" || state != \"\")\n\t\t\t{\n\t\t\t\tdouble tempcelcius = atof(setPoint.c_str());\n\t\t\t\tif (m_sql.m_tempunit == TEMPUNIT_F)\n\t\t\t\t{\n\t\t\t\t\t//Convert back to Celsius\n\t\t\t\t\ttempcelcius = ConvertToCelsius(tempcelcius);\n\t\t\t\t}\n\t\t\t\tsprintf(szTmp, \"%.2f\", tempcelcius);\n\n\t\t\t\tif (dType != pTypeEvohomeZone && dType != pTypeEvohomeWater)//sql update now done in setsetpoint for evohome devices\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Used=%d, sValue='%q' WHERE (ID == '%q')\",\n\t\t\t\t\t\tused, szTmp, idx.c_str());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (name.empty())\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Used=%d WHERE (ID == '%q')\",\n\t\t\t\t\tused, idx.c_str());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (switchtype == -1)\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Used=%d, Name='%q', Description='%q' WHERE (ID == '%q')\",\n\t\t\t\t\t\tused, name.c_str(), description.c_str(), idx.c_str());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\"UPDATE DeviceStatus SET Used=%d, Name='%q', Description='%q', SwitchType=%d, CustomImage=%d WHERE (ID == '%q')\",\n\t\t\t\t\t\tused, name.c_str(), description.c_str(), switchtype, CustomImage, idx.c_str());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (bHasstrParam1)\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET StrParam1='%q', StrParam2='%q' WHERE (ID == '%q')\",\n\t\t\t\t\tstrParam1.c_str(), strParam2.c_str(), idx.c_str());\n\t\t\t}\n\n\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Protected=%d WHERE (ID == '%q')\", iProtected, idx.c_str());\n\n\t\t\tif (!setPoint.empty() || !state.empty())\n\t\t\t{\n\t\t\t\tint urights = 3;\n\t\t\t\tif (bHaveUser)\n\t\t\t\t{\n\t\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\t\tif (iUser != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a SetPoint command\", m_users[iUser].Username.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urights < 1)\n\t\t\t\t\treturn;\n\t\t\t\tif (dType == pTypeEvohomeWater)\n\t\t\t\t\tm_mainworker.SetSetPoint(idx, (state == \"On\") ? 1.0f : 0.0f, mode, until);//FIXME float not guaranteed precise?\n\t\t\t\telse if (dType == pTypeEvohomeZone)\n\t\t\t\t\tm_mainworker.SetSetPoint(idx, static_cast<float>(atof(setPoint.c_str())), mode, until);\n\t\t\t\telse\n\t\t\t\t\tm_mainworker.SetSetPoint(idx, static_cast<float>(atof(setPoint.c_str())));\n\t\t\t}\n\t\t\telse if (!clock.empty())\n\t\t\t{\n\t\t\t\tint urights = 3;\n\t\t\t\tif (bHaveUser)\n\t\t\t\t{\n\t\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\t\tif (iUser != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a SetClock command\", m_users[iUser].Username.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urights < 1)\n\t\t\t\t\treturn;\n\t\t\t\tm_mainworker.SetClock(idx, clock);\n\t\t\t}\n\t\t\telse if (!tmode.empty())\n\t\t\t{\n\t\t\t\tint urights = 3;\n\t\t\t\tif (bHaveUser)\n\t\t\t\t{\n\t\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\t\tif (iUser != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a Thermostat Mode command\", m_users[iUser].Username.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urights < 1)\n\t\t\t\t\treturn;\n\t\t\t\tm_mainworker.SetZWaveThermostatMode(idx, atoi(tmode.c_str()));\n\t\t\t}\n\t\t\telse if (!fmode.empty())\n\t\t\t{\n\t\t\t\tint urights = 3;\n\t\t\t\tif (bHaveUser)\n\t\t\t\t{\n\t\t\t\t\tint iUser = FindUser(session.username.c_str());\n\t\t\t\t\tif (iUser != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\turights = static_cast<int>(m_users[iUser].userrights);\n\t\t\t\t\t\t_log.Log(LOG_STATUS, \"User: %s initiated a Thermostat Fan Mode command\", m_users[iUser].Username.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urights < 1)\n\t\t\t\t\treturn;\n\t\t\t\tm_mainworker.SetZWaveThermostatFanMode(idx, atoi(fmode.c_str()));\n\t\t\t}\n\n\t\t\tif (!strunit.empty())\n\t\t\t{\n\t\t\t\tbool bUpdateUnit = true;\n#ifdef ENABLE_PYTHON\n\t\t\t\t//check if HW is plugin\n\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT Type FROM Hardware WHERE (ID == %d)\", HwdID);\n\t\t\t\tif (!result.empty())\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t_eHardwareTypes Type = (_eHardwareTypes)atoi(sd[0].c_str());\n\t\t\t\t\tif (Type == HTYPE_PythonPlugin)\n\t\t\t\t\t{\n\t\t\t\t\t\tbUpdateUnit = false;\n\t\t\t\t\t\t_log.Log(LOG_ERROR, \"CWebServer::RType_SetUsed: Not allowed to change unit of device owned by plugin %u!\", HwdID);\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\t\t\t\tif (bUpdateUnit)\n\t\t\t\t{\n\t\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Unit='%q' WHERE (ID == '%q')\",\n\t\t\t\t\t\tstrunit.c_str(), idx.c_str());\n\t\t\t\t}\n\t\t\t}\n\t\t\t//FIXME evohome ...we need the zone id to update the correct zone...but this should be ok as a generic call?\n\t\t\tif (!deviceid.empty())\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET DeviceID='%q' WHERE (ID == '%q')\",\n\t\t\t\t\tdeviceid.c_str(), idx.c_str());\n\t\t\t}\n\t\t\tif (!addjvalue.empty())\n\t\t\t{\n\t\t\t\tdouble faddjvalue = atof(addjvalue.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET AddjValue=%f WHERE (ID == '%q')\",\n\t\t\t\t\tfaddjvalue, idx.c_str());\n\t\t\t}\n\t\t\tif (!addjmulti.empty())\n\t\t\t{\n\t\t\t\tdouble faddjmulti = atof(addjmulti.c_str());\n\t\t\t\tif (faddjmulti == 0)\n\t\t\t\t\tfaddjmulti = 1;\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET AddjMulti=%f WHERE (ID == '%q')\",\n\t\t\t\t\tfaddjmulti, idx.c_str());\n\t\t\t}\n\t\t\tif (!addjvalue2.empty())\n\t\t\t{\n\t\t\t\tdouble faddjvalue2 = atof(addjvalue2.c_str());\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET AddjValue2=%f WHERE (ID == '%q')\",\n\t\t\t\t\tfaddjvalue2, idx.c_str());\n\t\t\t}\n\t\t\tif (!addjmulti2.empty())\n\t\t\t{\n\t\t\t\tdouble faddjmulti2 = atof(addjmulti2.c_str());\n\t\t\t\tif (faddjmulti2 == 0)\n\t\t\t\t\tfaddjmulti2 = 1;\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET AddjMulti2=%f WHERE (ID == '%q')\",\n\t\t\t\t\tfaddjmulti2, idx.c_str());\n\t\t\t}\n\t\t\tif (!EnergyMeterMode.empty())\n\t\t\t{\n\t\t\t\tauto options = m_sql.GetDeviceOptions(idx);\n\t\t\t\toptions[\"EnergyMeterMode\"] = EnergyMeterMode;\n\t\t\t\tuint64_t ullidx = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_sql.SetDeviceOptions(ullidx, options);\n\t\t\t}\n\n\t\t\tif (!devoptions.empty())\n\t\t\t{\n\t\t\t\tm_sql.safe_query(\"UPDATE DeviceStatus SET Options='%q' WHERE (ID == '%q')\", devoptions.c_str(), idx.c_str());\n\t\t\t}\n\n\t\t\tif (used == 0)\n\t\t\t{\n\t\t\t\tbool bRemoveSubDevices = (request::findValue(&req, \"RemoveSubDevices\") == \"true\");\n\n\t\t\t\tif (bRemoveSubDevices)\n\t\t\t\t{\n\t\t\t\t\t//if this device was a slave device, remove it\n\t\t\t\t\tm_sql.safe_query(\"DELETE FROM LightSubDevices WHERE (DeviceRowID == '%q')\", idx.c_str());\n\t\t\t\t}\n\t\t\t\tm_sql.safe_query(\"DELETE FROM LightSubDevices WHERE (ParentID == '%q')\", idx.c_str());\n\n\t\t\t\tm_sql.safe_query(\"DELETE FROM Timers WHERE (DeviceRowID == '%q')\", idx.c_str());\n\t\t\t}\n\n\t\t\t// Save device options\n\t\t\tif (!sOptions.empty())\n\t\t\t{\n\t\t\t\tuint64_t ullidx = std::strtoull(idx.c_str(), nullptr, 10);\n\t\t\t\tm_sql.SetDeviceOptions(ullidx, m_sql.BuildDeviceOptions(sOptions, false));\n\t\t\t}\n\n\t\t\tif (maindeviceidx != \"\")\n\t\t\t{\n\t\t\t\tif (maindeviceidx != idx)\n\t\t\t\t{\n\t\t\t\t\t//this is a sub device for another light/switch\n\t\t\t\t\t//first check if it is not already a sub device\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT ID FROM LightSubDevices WHERE (DeviceRowID=='%q') AND (ParentID =='%q')\",\n\t\t\t\t\t\tidx.c_str(), maindeviceidx.c_str());\n\t\t\t\t\tif (result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\t//no it is not, add it\n\t\t\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\t\t\"INSERT INTO LightSubDevices (DeviceRowID, ParentID) VALUES ('%q','%q')\",\n\t\t\t\t\t\t\tidx.c_str(),\n\t\t\t\t\t\t\tmaindeviceidx.c_str()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ((used == 0) && (maindeviceidx.empty()))\n\t\t\t{\n\t\t\t\t//really remove it, including log etc\n\t\t\t\tm_sql.DeleteDevices(idx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n#ifdef ENABLE_PYTHON\n\t\t\t\t// Notify plugin framework about the change\n\t\t\t\tm_mainworker.m_pluginsystem.DeviceModified(atoi(idx.c_str()));\n#endif\n\t\t\t}\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\troot[\"title\"] = \"SetUsed\";\n\t\t\t}\n\t\t\tif (m_sql.m_bEnableEventSystem)\n\t\t\t\tm_mainworker.m_eventsystem.GetCurrentStates();\n\t\t}\n\n\t\tvoid CWebServer::RType_Settings(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tchar szTmp[100];\n\n\t\t\tresult = m_sql.safe_query(\"SELECT Key, nValue, sValue FROM Preferences\");\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"settings\";\n#ifndef NOCLOUD\n\t\t\troot[\"cloudenabled\"] = true;\n#else\n\t\t\troot[\"cloudenabled\"] = false;\n#endif\n\n\t\t\tfor (const auto & itt : result)\n\t\t\t{\n\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\tstd::string Key = sd[0];\n\t\t\t\tint nValue = atoi(sd[1].c_str());\n\t\t\t\tstd::string sValue = sd[2];\n\n\t\t\t\tif (Key == \"Location\")\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> strarray;\n\t\t\t\t\tStringSplit(sValue, \";\", strarray);\n\n\t\t\t\t\tif (strarray.size() == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"Location\"][\"Latitude\"] = strarray[0];\n\t\t\t\t\t\troot[\"Location\"][\"Longitude\"] = strarray[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* RK: notification settings */\n\t\t\t\tif (m_notifications.IsInConfig(Key)) {\n\t\t\t\t\tif (sValue.empty() && nValue > 0) {\n\t\t\t\t\t\troot[Key] = nValue;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\troot[Key] = sValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DashboardType\")\n\t\t\t\t{\n\t\t\t\t\troot[\"DashboardType\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MobileType\")\n\t\t\t\t{\n\t\t\t\t\troot[\"MobileType\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"LightHistoryDays\")\n\t\t\t\t{\n\t\t\t\t\troot[\"LightHistoryDays\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"5MinuteHistoryDays\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShortLogDays\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ShortLogInterval\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShortLogInterval\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WebUserName\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WebUserName\"] = base64_decode(sValue);\n\t\t\t\t}\n\t\t\t\t//else if (Key == \"WebPassword\")\n\t\t\t\t//{\n\t\t\t\t//\troot[\"WebPassword\"] = sValue;\n\t\t\t\t//}\n\t\t\t\telse if (Key == \"SecPassword\")\n\t\t\t\t{\n\t\t\t\t\troot[\"SecPassword\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ProtectionPassword\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ProtectionPassword\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WebLocalNetworks\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WebLocalNetworks\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WebRemoteProxyIPs\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WebRemoteProxyIPs\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"RandomTimerFrame\")\n\t\t\t\t{\n\t\t\t\t\troot[\"RandomTimerFrame\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MeterDividerEnergy\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnergyDivider\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MeterDividerGas\")\n\t\t\t\t{\n\t\t\t\t\troot[\"GasDivider\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MeterDividerWater\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WaterDivider\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ElectricVoltage\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ElectricVoltage\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CM113DisplayType\")\n\t\t\t\t{\n\t\t\t\t\troot[\"CM113DisplayType\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"UseAutoUpdate\")\n\t\t\t\t{\n\t\t\t\t\troot[\"UseAutoUpdate\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"UseAutoBackup\")\n\t\t\t\t{\n\t\t\t\t\troot[\"UseAutoBackup\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"Rego6XXType\")\n\t\t\t\t{\n\t\t\t\t\troot[\"Rego6XXType\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostEnergy\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostEnergy\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostEnergyT2\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostEnergyT2\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostEnergyR1\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostEnergyR1\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostEnergyR2\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostEnergyR2\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostGas\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostGas\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"CostWater\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szTmp, \"%.4f\", (float)(nValue) / 10000.0f);\n\t\t\t\t\troot[\"CostWater\"] = szTmp;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ActiveTimerPlan\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ActiveTimerPlan\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DoorbellCommand\")\n\t\t\t\t{\n\t\t\t\t\troot[\"DoorbellCommand\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"SmartMeterType\")\n\t\t\t\t{\n\t\t\t\t\troot[\"SmartMeterType\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabFloorplans\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabFloorplans\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabLights\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabLights\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabTemp\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabTemp\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabWeather\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabWeather\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabUtility\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabUtility\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabScenes\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabScenes\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableTabCustom\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableTabCustom\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"NotificationSensorInterval\")\n\t\t\t\t{\n\t\t\t\t\troot[\"NotificationSensorInterval\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"NotificationSwitchInterval\")\n\t\t\t\t{\n\t\t\t\t\troot[\"NotificationSwitchInterval\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"RemoteSharedPort\")\n\t\t\t\t{\n\t\t\t\t\troot[\"RemoteSharedPort\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"Language\")\n\t\t\t\t{\n\t\t\t\t\troot[\"Language\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"Title\")\n\t\t\t\t{\n\t\t\t\t\troot[\"Title\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WindUnit\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WindUnit\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"TempUnit\")\n\t\t\t\t{\n\t\t\t\t\troot[\"TempUnit\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WeightUnit\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WeightUnit\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"AuthenticationMethod\")\n\t\t\t\t{\n\t\t\t\t\troot[\"AuthenticationMethod\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ReleaseChannel\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ReleaseChannel\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"RaspCamParams\")\n\t\t\t\t{\n\t\t\t\t\troot[\"RaspCamParams\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"UVCParams\")\n\t\t\t\t{\n\t\t\t\t\troot[\"UVCParams\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"AcceptNewHardware\")\n\t\t\t\t{\n\t\t\t\t\troot[\"AcceptNewHardware\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"HideDisabledHardwareSensors\")\n\t\t\t\t{\n\t\t\t\t\troot[\"HideDisabledHardwareSensors\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"ShowUpdateEffect\")\n\t\t\t\t{\n\t\t\t\t\troot[\"ShowUpdateEffect\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DegreeDaysBaseTemperature\")\n\t\t\t\t{\n\t\t\t\t\troot[\"DegreeDaysBaseTemperature\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"EnableEventScriptSystem\")\n\t\t\t\t{\n\t\t\t\t\troot[\"EnableEventScriptSystem\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DisableDzVentsSystem\")\n\t\t\t\t{\n\t\t\t\t\troot[\"DisableDzVentsSystem\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DzVentsLogLevel\")\n\t\t\t\t{\n\t\t\t\t\troot[\"DzVentsLogLevel\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"LogEventScriptTrigger\")\n\t\t\t\t{\n\t\t\t\t\troot[\"LogEventScriptTrigger\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"(1WireSensorPollPeriod\")\n\t\t\t\t{\n\t\t\t\t\troot[\"1WireSensorPollPeriod\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"(1WireSwitchPollPeriod\")\n\t\t\t\t{\n\t\t\t\t\troot[\"1WireSwitchPollPeriod\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"SecOnDelay\")\n\t\t\t\t{\n\t\t\t\t\troot[\"SecOnDelay\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"AllowWidgetOrdering\")\n\t\t\t\t{\n\t\t\t\t\troot[\"AllowWidgetOrdering\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanPopupDelay\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanPopupDelay\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanFullscreenMode\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanFullscreenMode\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanAnimateZoom\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanAnimateZoom\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanShowSensorValues\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanShowSensorValues\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanShowSwitchValues\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanShowSwitchValues\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanShowSceneNames\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanShowSceneNames\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanRoomColour\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanRoomColour\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanActiveOpacity\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanActiveOpacity\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"FloorplanInactiveOpacity\")\n\t\t\t\t{\n\t\t\t\t\troot[\"FloorplanInactiveOpacity\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"SensorTimeout\")\n\t\t\t\t{\n\t\t\t\t\troot[\"SensorTimeout\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"BatteryLowNotification\")\n\t\t\t\t{\n\t\t\t\t\troot[\"BatterLowLevel\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"WebTheme\")\n\t\t\t\t{\n\t\t\t\t\troot[\"WebTheme\"] = sValue;\n\t\t\t\t}\n#ifndef NOCLOUD\n\t\t\t\telse if (Key == \"MyDomoticzInstanceId\") {\n\t\t\t\t\troot[\"MyDomoticzInstanceId\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MyDomoticzUserId\") {\n\t\t\t\t\troot[\"MyDomoticzUserId\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MyDomoticzPassword\") {\n\t\t\t\t\troot[\"MyDomoticzPassword\"] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"MyDomoticzSubsystems\") {\n\t\t\t\t\troot[\"MyDomoticzSubsystems\"] = nValue;\n\t\t\t\t}\n#endif\n\t\t\t\telse if (Key == \"MyDomoticzSubsystems\") {\n\t\t\t\t\troot[\"MyDomoticzSubsystems\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"SendErrorsAsNotification\") {\n\t\t\t\t\troot[\"SendErrorsAsNotification\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"DeltaTemperatureLog\") {\n\t\t\t\t\troot[Key] = sValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"IFTTTEnabled\") {\n\t\t\t\t\troot[\"IFTTTEnabled\"] = nValue;\n\t\t\t\t}\n\t\t\t\telse if (Key == \"IFTTTAPI\") {\n\t\t\t\t\troot[\"IFTTTAPI\"] = sValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_LightLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t//First get Device Type/SubType\n\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType, SwitchType, Options FROM DeviceStatus WHERE (ID == %\" PRIu64 \")\",\n\t\t\t\tidx);\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\tunsigned char dType = atoi(result[0][0].c_str());\n\t\t\tunsigned char dSubType = atoi(result[0][1].c_str());\n\t\t\t_eSwitchType switchtype = (_eSwitchType)atoi(result[0][2].c_str());\n\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(result[0][3].c_str());\n\n\t\t\tif (\n\t\t\t\t(dType != pTypeLighting1) &&\n\t\t\t\t(dType != pTypeLighting2) &&\n\t\t\t\t(dType != pTypeLighting3) &&\n\t\t\t\t(dType != pTypeLighting4) &&\n\t\t\t\t(dType != pTypeLighting5) &&\n\t\t\t\t(dType != pTypeLighting6) &&\n\t\t\t\t(dType != pTypeFan) &&\n\t\t\t\t(dType != pTypeColorSwitch) &&\n\t\t\t\t(dType != pTypeSecurity1) &&\n\t\t\t\t(dType != pTypeSecurity2) &&\n\t\t\t\t(dType != pTypeEvohome) &&\n\t\t\t\t(dType != pTypeEvohomeRelay) &&\n\t\t\t\t(dType != pTypeCurtain) &&\n\t\t\t\t(dType != pTypeBlinds) &&\n\t\t\t\t(dType != pTypeRFY) &&\n\t\t\t\t(dType != pTypeRego6XXValue) &&\n\t\t\t\t(dType != pTypeChime) &&\n\t\t\t\t(dType != pTypeThermostat2) &&\n\t\t\t\t(dType != pTypeThermostat3) &&\n\t\t\t\t(dType != pTypeThermostat4) &&\n\t\t\t\t(dType != pTypeRemote) &&\n\t\t\t\t(dType != pTypeGeneralSwitch) &&\n\t\t\t\t(dType != pTypeHomeConfort) &&\n\t\t\t\t(dType != pTypeFS20) &&\n\t\t\t\t(!((dType == pTypeRadiator1) && (dSubType == sTypeSmartwaresSwitchRadiator)))\n\t\t\t\t)\n\t\t\t\treturn; //no light device! we should not be here!\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"LightLog\";\n\n\t\t\tresult = m_sql.safe_query(\"SELECT ROWID, nValue, sValue, Date FROM LightingLog WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date DESC\", idx);\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tstd::map<std::string, std::string> selectorStatuses;\n\t\t\t\tif (switchtype == STYPE_Selector) {\n\t\t\t\t\tGetSelectorSwitchStatuses(options, selectorStatuses);\n\t\t\t\t}\n\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tint nValue = atoi(sd[1].c_str());\n\t\t\t\t\tstd::string sValue = sd[2];\n\n\t\t\t\t\t//skip 0-values in log for MediaPlayers\n\t\t\t\t\tif ((switchtype == STYPE_Media) && (sValue == \"0\")) continue;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\n\t\t\t\t\t//add light details\n\t\t\t\t\tstd::string lstatus = \"\";\n\t\t\t\t\tstd::string ldata = \"\";\n\t\t\t\t\tint llevel = 0;\n\t\t\t\t\tbool bHaveDimmer = false;\n\t\t\t\t\tbool bHaveSelector = false;\n\t\t\t\t\tbool bHaveGroupCmd = false;\n\t\t\t\t\tint maxDimLevel = 0;\n\n\t\t\t\t\tif (switchtype == STYPE_Media) {\n\t\t\t\t\t\tlstatus = sValue;\n\t\t\t\t\t\tldata = lstatus;\n\n\t\t\t\t\t}\n\t\t\t\t\telse if (switchtype == STYPE_Selector)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (ii == 0) {\n\t\t\t\t\t\t\tbHaveSelector = true;\n\t\t\t\t\t\t\tmaxDimLevel = selectorStatuses.size();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!selectorStatuses.empty()) {\n\n\t\t\t\t\t\t\tstd::string sLevel = selectorStatuses[sValue];\n\t\t\t\t\t\t\tldata = sLevel;\n\t\t\t\t\t\t\tlstatus = \"Set Level: \" + sLevel;\n\t\t\t\t\t\t\tllevel = atoi(sValue.c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tGetLightStatus(dType, dSubType, switchtype, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);\n\t\t\t\t\t\tldata = lstatus;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ii == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"HaveDimmer\"] = bHaveDimmer;\n\t\t\t\t\t\troot[\"result\"][ii][\"MaxDimLevel\"] = maxDimLevel;\n\t\t\t\t\t\troot[\"HaveGroupCmd\"] = bHaveGroupCmd;\n\t\t\t\t\t\troot[\"HaveSelector\"] = bHaveSelector;\n\t\t\t\t\t}\n\n\t\t\t\t\troot[\"result\"][ii][\"Date\"] = sd[3];\n\t\t\t\t\troot[\"result\"][ii][\"Data\"] = ldata;\n\t\t\t\t\troot[\"result\"][ii][\"Status\"] = lstatus;\n\t\t\t\t\troot[\"result\"][ii][\"Level\"] = llevel;\n\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_TextLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"TextLog\";\n\n\t\t\tresult = m_sql.safe_query(\"SELECT ROWID, sValue, Date FROM LightingLog WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date DESC\",\n\t\t\t\tidx);\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Date\"] = sd[2];\n\t\t\t\t\troot[\"result\"][ii][\"Data\"] = sd[1];\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_SceneLog(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\t\t\tstd::vector<std::vector<std::string> > result;\n\n\t\t\troot[\"status\"] = \"OK\";\n\t\t\troot[\"title\"] = \"SceneLog\";\n\n\t\t\tresult = m_sql.safe_query(\"SELECT ROWID, nValue, Date FROM SceneLog WHERE (SceneRowID==%\" PRIu64 \") ORDER BY Date DESC\", idx);\n\t\t\tif (!result.empty())\n\t\t\t{\n\t\t\t\tint ii = 0;\n\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t{\n\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\tint nValue = atoi(sd[1].c_str());\n\t\t\t\t\troot[\"result\"][ii][\"idx\"] = sd[0];\n\t\t\t\t\troot[\"result\"][ii][\"Date\"] = sd[2];\n\t\t\t\t\troot[\"result\"][ii][\"Data\"] = (nValue == 0) ? \"Off\" : \"On\";\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid CWebServer::RType_HandleGraph(WebEmSession & session, const request& req, Json::Value &root)\n\t\t{\n\t\t\tuint64_t idx = 0;\n\t\t\tif (request::findValue(&req, \"idx\") != \"\")\n\t\t\t{\n\t\t\t\tidx = std::strtoull(request::findValue(&req, \"idx\").c_str(), nullptr, 10);\n\t\t\t}\n\n\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\tchar szTmp[300];\n\n\t\t\tstd::string sensor = request::findValue(&req, \"sensor\");\n\t\t\tif (sensor == \"\")\n\t\t\t\treturn;\n\t\t\tstd::string srange = request::findValue(&req, \"range\");\n\t\t\tif (srange == \"\")\n\t\t\t\treturn;\n\n\t\t\ttime_t now = mytime(NULL);\n\t\t\tstruct tm tm1;\n\t\t\tlocaltime_r(&now, &tm1);\n\n\t\t\tresult = m_sql.safe_query(\"SELECT Type, SubType, SwitchType, AddjValue, AddjMulti, AddjValue2, Options FROM DeviceStatus WHERE (ID == %\" PRIu64 \")\",\n\t\t\t\tidx);\n\t\t\tif (result.empty())\n\t\t\t\treturn;\n\n\t\t\tunsigned char dType = atoi(result[0][0].c_str());\n\t\t\tunsigned char dSubType = atoi(result[0][1].c_str());\n\t\t\t_eMeterType metertype = (_eMeterType)atoi(result[0][2].c_str());\n\t\t\tif (\n\t\t\t\t(dType == pTypeP1Power) ||\n\t\t\t\t(dType == pTypeENERGY) ||\n\t\t\t\t(dType == pTypePOWER) ||\n\t\t\t\t(dType == pTypeCURRENTENERGY) ||\n\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeKwh))\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tmetertype = MTYPE_ENERGY;\n\t\t\t}\n\t\t\telse if (dType == pTypeP1Gas)\n\t\t\t\tmetertype = MTYPE_GAS;\n\t\t\telse if ((dType == pTypeRego6XXValue) && (dSubType == sTypeRego6XXCounter))\n\t\t\t\tmetertype = MTYPE_COUNTER;\n\n\t\t\t// Special case of managed counter: Usage instead of Value in Meter table, and we don't want to calculate last value\n\t\t\tbool bIsManagedCounter = (dType == pTypeGeneral) && (dSubType == sTypeManagedCounter);\n\n\t\t\tdouble AddjValue = atof(result[0][3].c_str());\n\t\t\tdouble AddjMulti = atof(result[0][4].c_str());\n\t\t\tdouble AddjValue2 = atof(result[0][5].c_str());\n\t\t\tstd::string sOptions = result[0][6].c_str();\n\t\t\tstd::map<std::string, std::string> options = m_sql.BuildDeviceOptions(sOptions);\n\n\t\t\tfloat divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));\n\n\t\t\tstd::string dbasetable = \"\";\n\t\t\tif (srange == \"day\") {\n\t\t\t\tif (sensor == \"temp\")\n\t\t\t\t\tdbasetable = \"Temperature\";\n\t\t\t\telse if (sensor == \"rain\")\n\t\t\t\t\tdbasetable = \"Rain\";\n\t\t\t\telse if (sensor == \"Percentage\")\n\t\t\t\t\tdbasetable = \"Percentage\";\n\t\t\t\telse if (sensor == \"fan\")\n\t\t\t\t\tdbasetable = \"Fan\";\n\t\t\t\telse if (sensor == \"counter\")\n\t\t\t\t{\n\t\t\t\t\tif ((dType == pTypeP1Power) || (dType == pTypeCURRENT) || (dType == pTypeCURRENTENERGY))\n\t\t\t\t\t{\n\t\t\t\t\t\tdbasetable = \"MultiMeter\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdbasetable = \"Meter\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ((sensor == \"wind\") || (sensor == \"winddir\"))\n\t\t\t\t\tdbasetable = \"Wind\";\n\t\t\t\telse if (sensor == \"uv\")\n\t\t\t\t\tdbasetable = \"UV\";\n\t\t\t\telse\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//week,year,month\n\t\t\t\tif (sensor == \"temp\")\n\t\t\t\t\tdbasetable = \"Temperature_Calendar\";\n\t\t\t\telse if (sensor == \"rain\")\n\t\t\t\t\tdbasetable = \"Rain_Calendar\";\n\t\t\t\telse if (sensor == \"Percentage\")\n\t\t\t\t\tdbasetable = \"Percentage_Calendar\";\n\t\t\t\telse if (sensor == \"fan\")\n\t\t\t\t\tdbasetable = \"Fan_Calendar\";\n\t\t\t\telse if (sensor == \"counter\")\n\t\t\t\t{\n\t\t\t\t\tif (\n\t\t\t\t\t\t(dType == pTypeP1Power) ||\n\t\t\t\t\t\t(dType == pTypeCURRENT) ||\n\t\t\t\t\t\t(dType == pTypeCURRENTENERGY) ||\n\t\t\t\t\t\t(dType == pTypeAirQuality) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVisibility)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeDistance)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSoilMoisture)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeLeafWetness)) ||\n\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorAD)) ||\n\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorVolt)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypePressure)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel)) ||\n\t\t\t\t\t\t(dType == pTypeLux) ||\n\t\t\t\t\t\t(dType == pTypeWEIGHT) ||\n\t\t\t\t\t\t(dType == pTypeUsage)\n\t\t\t\t\t\t)\n\t\t\t\t\t\tdbasetable = \"MultiMeter_Calendar\";\n\t\t\t\t\telse\n\t\t\t\t\t\tdbasetable = \"Meter_Calendar\";\n\t\t\t\t}\n\t\t\t\telse if ((sensor == \"wind\") || (sensor == \"winddir\"))\n\t\t\t\t\tdbasetable = \"Wind_Calendar\";\n\t\t\t\telse if (sensor == \"uv\")\n\t\t\t\t\tdbasetable = \"UV_Calendar\";\n\t\t\t\telse\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tunsigned char tempsign = m_sql.m_tempsign[0];\n\t\t\tint iPrev;\n\n\t\t\tif (srange == \"day\")\n\t\t\t{\n\t\t\t\tif (sensor == \"temp\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Temperature, Chill, Humidity, Barometer, Date, SetPoint FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[4].substr(0, 16);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeRego6XXTemp) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t\t\t\t(dType == pTypeThermostat1) ||\n\t\t\t\t\t\t\t\t(dType == pTypeRadiator1) ||\n\t\t\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSystemTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint)) ||\n\t\t\t\t\t\t\t\t(dType == pTypeEvohomeZone) ||\n\t\t\t\t\t\t\t\t(dType == pTypeEvohomeWater)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = tvalue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble tvalue = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = tvalue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeHUM) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[2];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[3];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[5].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"Percentage\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Percentage, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"fan\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Speed, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\telse if (sensor == \"counter\")\n\t\t\t\t{\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1, Value2, Value3, Value4, Value5, Value6, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\t\tbool bHaveFirstValue = false;\n\t\t\t\t\t\t\tlong long lastUsage1, lastUsage2, lastDeliv1, lastDeliv2;\n\t\t\t\t\t\t\ttime_t lastTime = 0;\n\n\t\t\t\t\t\t\tlong long firstUsage1, firstUsage2, firstDeliv1, firstDeliv2;\n\n\t\t\t\t\t\t\tint nMeterType = 0;\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"SmartMeterType\", nMeterType);\n\n\t\t\t\t\t\t\tint lastDay = 0;\n\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\tif (nMeterType == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlong long actUsage1 = std::strtoll(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\tlong long actUsage2 = std::strtoll(sd[4].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\tlong long actDeliv1 = std::strtoll(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\tlong long actDeliv2 = std::strtoll(sd[5].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\tactDeliv1 = (actDeliv1 < 10) ? 0 : actDeliv1;\n\t\t\t\t\t\t\t\t\tactDeliv2 = (actDeliv2 < 10) ? 0 : actDeliv2;\n\n\t\t\t\t\t\t\t\t\tstd::string stime = sd[6];\n\t\t\t\t\t\t\t\t\tstruct tm ntime;\n\t\t\t\t\t\t\t\t\ttime_t atime;\n\t\t\t\t\t\t\t\t\tParseSQLdatetime(atime, ntime, stime, -1);\n\t\t\t\t\t\t\t\t\tif (lastDay != ntime.tm_mday)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlastDay = ntime.tm_mday;\n\t\t\t\t\t\t\t\t\t\tfirstUsage1 = actUsage1;\n\t\t\t\t\t\t\t\t\t\tfirstUsage2 = actUsage2;\n\t\t\t\t\t\t\t\t\t\tfirstDeliv1 = actDeliv1;\n\t\t\t\t\t\t\t\t\t\tfirstDeliv2 = actDeliv2;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (bHaveFirstValue)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlong curUsage1 = (long)(actUsage1 - lastUsage1);\n\t\t\t\t\t\t\t\t\t\tlong curUsage2 = (long)(actUsage2 - lastUsage2);\n\t\t\t\t\t\t\t\t\t\tlong curDeliv1 = (long)(actDeliv1 - lastDeliv1);\n\t\t\t\t\t\t\t\t\t\tlong curDeliv2 = (long)(actDeliv2 - lastDeliv2);\n\n\t\t\t\t\t\t\t\t\t\tif ((curUsage1 < 0) || (curUsage1 > 100000))\n\t\t\t\t\t\t\t\t\t\t\tcurUsage1 = 0;\n\t\t\t\t\t\t\t\t\t\tif ((curUsage2 < 0) || (curUsage2 > 100000))\n\t\t\t\t\t\t\t\t\t\t\tcurUsage2 = 0;\n\t\t\t\t\t\t\t\t\t\tif ((curDeliv1 < 0) || (curDeliv1 > 100000))\n\t\t\t\t\t\t\t\t\t\t\tcurDeliv1 = 0;\n\t\t\t\t\t\t\t\t\t\tif ((curDeliv2 < 0) || (curDeliv2 > 100000))\n\t\t\t\t\t\t\t\t\t\t\tcurDeliv2 = 0;\n\n\t\t\t\t\t\t\t\t\t\tfloat tdiff = static_cast<float>(difftime(atime, lastTime));\n\t\t\t\t\t\t\t\t\t\tif (tdiff == 0)\n\t\t\t\t\t\t\t\t\t\t\ttdiff = 1;\n\t\t\t\t\t\t\t\t\t\tfloat tlaps = 3600.0f / tdiff;\n\t\t\t\t\t\t\t\t\t\tcurUsage1 *= int(tlaps);\n\t\t\t\t\t\t\t\t\t\tcurUsage2 *= int(tlaps);\n\t\t\t\t\t\t\t\t\t\tcurDeliv1 *= int(tlaps);\n\t\t\t\t\t\t\t\t\t\tcurDeliv2 *= int(tlaps);\n\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[6].substr(0, 16);\n\n\t\t\t\t\t\t\t\t\t\tif ((curDeliv1 != 0) || (curDeliv2 != 0))\n\t\t\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", curUsage1);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", curUsage2);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", curDeliv1);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", curDeliv2);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r2\"] = szTmp;\n\n\t\t\t\t\t\t\t\t\t\tlong pUsage1 = (long)(actUsage1 - firstUsage1);\n\t\t\t\t\t\t\t\t\t\tlong pUsage2 = (long)(actUsage2 - firstUsage2);\n\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", pUsage1 + pUsage2);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"eu\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlong pDeliv1 = (long)(actDeliv1 - firstDeliv1);\n\t\t\t\t\t\t\t\t\t\t\tlong pDeliv2 = (long)(actDeliv2 - firstDeliv2);\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%ld\", pDeliv1 + pDeliv2);\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"eg\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbHaveFirstValue = true;\n\t\t\t\t\t\t\t\t\t\tif ((ntime.tm_hour != 0) && (ntime.tm_min != 0))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tstruct tm ltime;\n\t\t\t\t\t\t\t\t\t\t\tlocaltime_r(&atime, &tm1);\n\t\t\t\t\t\t\t\t\t\t\tgetNoon(atime, ltime, ntime.tm_year + 1900, ntime.tm_mon + 1, ntime.tm_mday - 1); // We're only interested in finding the date\n\t\t\t\t\t\t\t\t\t\t\tint year = ltime.tm_year + 1900;\n\t\t\t\t\t\t\t\t\t\t\tint mon = ltime.tm_mon + 1;\n\t\t\t\t\t\t\t\t\t\t\tint day = ltime.tm_mday;\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%04d-%02d-%02d\", year, mon, day);\n\t\t\t\t\t\t\t\t\t\t\tstd::vector<std::vector<std::string> > result2;\n\t\t\t\t\t\t\t\t\t\t\tresult2 = m_sql.safe_query(\n\t\t\t\t\t\t\t\t\t\t\t\t\"SELECT Counter1, Counter2, Counter3, Counter4 FROM Multimeter_Calendar WHERE (DeviceRowID==%\" PRIu64 \") AND (Date=='%q')\",\n\t\t\t\t\t\t\t\t\t\t\t\tidx, szTmp);\n\t\t\t\t\t\t\t\t\t\t\tif (!result2.empty())\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tstd::vector<std::string> sd = result2[0];\n\t\t\t\t\t\t\t\t\t\t\t\tfirstUsage1 = std::strtoll(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\t\t\t\tfirstDeliv1 = std::strtoll(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\t\t\t\tfirstUsage2 = std::strtoll(sd[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\t\t\t\tfirstDeliv2 = std::strtoll(sd[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\t\t\t\t\t\tlastDay = ntime.tm_mday;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlastUsage1 = actUsage1;\n\t\t\t\t\t\t\t\t\tlastUsage2 = actUsage2;\n\t\t\t\t\t\t\t\t\tlastDeliv1 = actDeliv1;\n\t\t\t\t\t\t\t\t\tlastDeliv2 = actDeliv2;\n\t\t\t\t\t\t\t\t\tlastTime = atime;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//this meter has no decimals, so return the use peaks\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[6].substr(0, 16);\n\n\t\t\t\t\t\t\t\t\tif (sd[3] != \"0\")\n\t\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = sd[2];\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = sd[3];\n\t\t\t\t\t\t\t\t\tii++;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeAirQuality)\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"co2\"] = sd[0];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeGeneral) && ((dSubType == sTypeSoilMoisture) || (dSubType == sTypeLeafWetness)))\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = sd[0];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVisibility)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeDistance)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypePressure)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel))\n\t\t\t\t\t\t)\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\t\tfloat vdiv = 10.0f;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvdiv = 1000.0f;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\tfloat fValue = float(atof(sd[0].c_str())) / vdiv;\n\t\t\t\t\t\t\t\tif (metertype == 1)\n\t\t\t\t\t\t\t\t\tfValue *= 0.6214f;\n\t\t\t\t\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeVoltage))\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue);\n\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue);\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeRFXSensor) && ((dSubType == sTypeRFXSensorAD) || (dSubType == sTypeRFXSensorVolt)))\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = sd[0];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeLux)\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"lux\"] = sd[0];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeWEIGHT)\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", m_sql.m_weightscale * atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeUsage)\n\t\t\t\t\t{//day\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"u\"] = atof(sd[0].c_str()) / 10.0f;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENT)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\t//CM113\n\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\troot[\"displaytype\"] = displaytype;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1, Value2, Value3, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tbool bHaveL1 = false;\n\t\t\t\t\t\t\tbool bHaveL2 = false;\n\t\t\t\t\t\t\tbool bHaveL3 = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\n\t\t\t\t\t\t\t\tfloat fval1 = static_cast<float>(atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval2 = static_cast<float>(atof(sd[1].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval3 = static_cast<float>(atof(sd[2].c_str()) / 10.0f);\n\n\t\t\t\t\t\t\t\tif (fval1 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL1 = true;\n\t\t\t\t\t\t\t\tif (fval2 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL2 = true;\n\t\t\t\t\t\t\t\tif (fval3 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL3 = true;\n\n\t\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval3);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval1*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval2*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval3*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(!bHaveL1) &&\n\t\t\t\t\t\t\t\t(!bHaveL2) &&\n\t\t\t\t\t\t\t\t(!bHaveL3)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\troot[\"haveL1\"] = true; //show at least something\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (bHaveL1)\n\t\t\t\t\t\t\t\t\troot[\"haveL1\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL2)\n\t\t\t\t\t\t\t\t\troot[\"haveL2\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL3)\n\t\t\t\t\t\t\t\t\troot[\"haveL3\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENTENERGY)\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\t//CM113\n\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\troot[\"displaytype\"] = displaytype;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1, Value2, Value3, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\t\tbool bHaveL1 = false;\n\t\t\t\t\t\t\tbool bHaveL2 = false;\n\t\t\t\t\t\t\tbool bHaveL3 = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\n\t\t\t\t\t\t\t\tfloat fval1 = static_cast<float>(atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval2 = static_cast<float>(atof(sd[1].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval3 = static_cast<float>(atof(sd[2].c_str()) / 10.0f);\n\n\t\t\t\t\t\t\t\tif (fval1 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL1 = true;\n\t\t\t\t\t\t\t\tif (fval2 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL2 = true;\n\t\t\t\t\t\t\t\tif (fval3 != 0)\n\t\t\t\t\t\t\t\t\tbHaveL3 = true;\n\n\t\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval3);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval1*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval2*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval3*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(!bHaveL1) &&\n\t\t\t\t\t\t\t\t(!bHaveL2) &&\n\t\t\t\t\t\t\t\t(!bHaveL3)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\troot[\"haveL1\"] = true; //show at least something\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (bHaveL1)\n\t\t\t\t\t\t\t\t\troot[\"haveL1\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL2)\n\t\t\t\t\t\t\t\t\troot[\"haveL2\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL3)\n\t\t\t\t\t\t\t\t\troot[\"haveL3\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ((dType == pTypeENERGY) || (dType == pTypePOWER) || (dType == pTypeYouLess) || ((dType == pTypeGeneral) && (dSubType == sTypeKwh)))\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\t\troot[\"ValueQuantity\"] = options[\"ValueQuantity\"];\n\t\t\t\t\t\troot[\"ValueUnits\"] = options[\"ValueUnits\"];\n\n\t\t\t\t\t\t//First check if we had any usage in the short log, if not, its probably a meter without usage\n\t\t\t\t\t\tbool bHaveUsage = true;\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT MIN([Usage]), MAX([Usage]) FROM %s WHERE (DeviceRowID==%\" PRIu64 \")\", dbasetable.c_str(), idx);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlong long minValue = std::strtoll(result[0][0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tlong long maxValue = std::strtoll(result[0][1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tif ((minValue == 0) && (maxValue == 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbHaveUsage = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value,[Usage], Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\n\t\t\t\t\t\tint method = 0;\n\t\t\t\t\t\tstd::string sMethod = request::findValue(&req, \"method\");\n\t\t\t\t\t\tif (sMethod.size() > 0)\n\t\t\t\t\t\t\tmethod = atoi(sMethod.c_str());\n\t\t\t\t\t\tif (bHaveUsage == false)\n\t\t\t\t\t\t\tmethod = 0;\n\n\t\t\t\t\t\tif ((dType == pTypeYouLess) && ((metertype == MTYPE_ENERGY) || (metertype == MTYPE_ENERGY_GENERATED)))\n\t\t\t\t\t\t\tmethod = 1;\n\n\t\t\t\t\t\tif (method != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//realtime graph\n\t\t\t\t\t\t\tif ((dType == pTypeENERGY) || (dType == pTypePOWER))\n\t\t\t\t\t\t\t\tdivider /= 100.0f;\n\t\t\t\t\t\t}\n\t\t\t\t\t\troot[\"method\"] = method;\n\t\t\t\t\t\tbool bHaveFirstValue = false;\n\t\t\t\t\t\tbool bHaveFirstRealValue = false;\n\t\t\t\t\t\tfloat FirstValue = 0;\n\t\t\t\t\t\tlong long ulFirstRealValue = 0;\n\t\t\t\t\t\tlong long ulFirstValue = 0;\n\t\t\t\t\t\tlong long ulLastValue = 0;\n\t\t\t\t\t\tstd::string LastDateTime = \"\";\n\t\t\t\t\t\ttime_t lastTime = 0;\n\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::vector<std::string> >::const_iterator itt;\n\t\t\t\t\t\t\tfor (itt = result.begin(); itt!=result.end(); ++itt)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = *itt;\n\n\t\t\t\t\t\t\t\t//If method == 1, provide BOTH hourly and instant usage for combined graph\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//bars / hour\n\t\t\t\t\t\t\t\t\tstd::string actDateTimeHour = sd[2].substr(0, 13);\n\t\t\t\t\t\t\t\t\tlong long actValue = std::strtoll(sd[0].c_str(), nullptr, 10);\n\n\t\t\t\t\t\t\t\t\tif (actValue >= ulLastValue)\n\t\t\t\t\t\t\t\t\t\tulLastValue = actValue;\n\n\t\t\t\t\t\t\t\t\tif (actDateTimeHour != LastDateTime || ((method == 1) && (itt + 1 == result.end())))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (bHaveFirstValue)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t//root[\"result\"][ii][\"d\"] = LastDateTime + (method == 1 ? \":30\" : \":00\");\n\t\t\t\t\t\t\t\t\t\t\t//^^ not necessarily bad, but is currently inconsistent with all other day graphs\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = LastDateTime + \":00\";\n\n\t\t\t\t\t\t\t\t\t\t\tlong long ulTotalValue = ulLastValue - ulFirstValue;\n\t\t\t\t\t\t\t\t\t\t\tif (ulTotalValue == 0)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t//Could be the P1 Gas Meter, only transmits one every 1 a 2 hours\n\t\t\t\t\t\t\t\t\t\t\t\tulTotalValue = ulLastValue - ulFirstRealValue;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tulFirstRealValue = ulLastValue;\n\t\t\t\t\t\t\t\t\t\t\tfloat TotalValue = float(ulTotalValue);\n\t\t\t\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f);\t//from kWh -> Watt\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", TotalValue);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][method == 1 ? \"eu\" : \"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tLastDateTime = actDateTimeHour;\n\t\t\t\t\t\t\t\t\t\tbHaveFirstValue = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!bHaveFirstValue)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tulFirstValue = ulLastValue;\n\t\t\t\t\t\t\t\t\t\tbHaveFirstValue = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!bHaveFirstRealValue)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbHaveFirstRealValue = true;\n\t\t\t\t\t\t\t\t\t\tulFirstRealValue = ulLastValue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (method == 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlong long actValue = std::strtoll(sd[1].c_str(), nullptr, 10);\n\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\n\t\t\t\t\t\t\t\t\tfloat TotalValue = float(actValue);\n\t\t\t\t\t\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeKwh))\n\t\t\t\t\t\t\t\t\t\tTotalValue /= 10.0f;\n\t\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f);\t//from kWh -> Watt\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", TotalValue);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\t\troot[\"ValueQuantity\"] = options[\"ValueQuantity\"];\n\t\t\t\t\t\troot[\"ValueUnits\"] = options[\"ValueUnits\"];\n\n\t\t\t\t\t\tint ii = 0;\n\n\t\t\t\t\t\tbool bHaveFirstValue = false;\n\t\t\t\t\t\tbool bHaveFirstRealValue = false;\n\t\t\t\t\t\tfloat FirstValue = 0;\n\t\t\t\t\t\tunsigned long long ulFirstRealValue = 0;\n\t\t\t\t\t\tunsigned long long ulFirstValue = 0;\n\t\t\t\t\t\tunsigned long long ulLastValue = 0;\n\n\t\t\t\t\t\tstd::string LastDateTime = \"\";\n\t\t\t\t\t\ttime_t lastTime = 0;\n\n\t\t\t\t\t\tif (bIsManagedCounter) {\n\t\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Usage, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\t\tbHaveFirstValue = true;\n\t\t\t\t\t\t\tbHaveFirstRealValue = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tint method = 0;\n\t\t\t\t\t\tstd::string sMethod = request::findValue(&req, \"method\");\n\t\t\t\t\t\tif (sMethod.size() > 0)\n\t\t\t\t\t\t\tmethod = atoi(sMethod.c_str());\n\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\tif (method == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//bars / hour\n\n\t\t\t\t\t\t\t\t\tunsigned long long actValue = std::strtoull(sd[0].c_str(), nullptr, 10);\n\n\t\t\t\t\t\t\t\t\tstd::string actDateTimeHour = sd[1].substr(0, 13);\n\t\t\t\t\t\t\t\t\tif (actDateTimeHour != LastDateTime)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (bHaveFirstValue)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tstruct tm ntime;\n\t\t\t\t\t\t\t\t\t\t\ttime_t atime;\n\t\t\t\t\t\t\t\t\t\t\tif (actDateTimeHour.size() == 10)\n\t\t\t\t\t\t\t\t\t\t\t\tactDateTimeHour += \" 00\";\n\t\t\t\t\t\t\t\t\t\t\tconstructTime(atime, ntime,\n\t\t\t\t\t\t\t\t\t\t\t\tatoi(actDateTimeHour.substr(0, 4).c_str()),\n\t\t\t\t\t\t\t\t\t\t\t\tatoi(actDateTimeHour.substr(5, 2).c_str()),\n\t\t\t\t\t\t\t\t\t\t\t\tatoi(actDateTimeHour.substr(8, 2).c_str()),\n\t\t\t\t\t\t\t\t\t\t\t\tatoi(actDateTimeHour.substr(11, 2).c_str()) - 1,\n\t\t\t\t\t\t\t\t\t\t\t\t0, 0, -1);\n\n\t\t\t\t\t\t\t\t\t\t\tchar szTime[50];\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szTime, \"%04d-%02d-%02d %02d:00\", ntime.tm_year + 1900, ntime.tm_mon + 1, ntime.tm_mday, ntime.tm_hour);\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szTime;\n\n\t\t\t\t\t\t\t\t\t\t\t//float TotalValue = float(actValue - ulFirstValue);\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t//prevents graph from going crazy if the meter counter resets \n\t\t\t\t\t\t\t\t\t\t\tfloat TotalValue = (actValue >= ulFirstValue) ? float(actValue - ulFirstValue) : actValue;\n\n\t\t\t\t\t\t\t\t\t\t\t//if (TotalValue != 0)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f);\t//from kWh -> Watt\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", TotalValue);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (!bIsManagedCounter) {\n\t\t\t\t\t\t\t\t\t\t\tulFirstValue = actValue;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tLastDateTime = actDateTimeHour;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (!bHaveFirstValue)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tulFirstValue = actValue;\n\t\t\t\t\t\t\t\t\t\tbHaveFirstValue = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tulLastValue = actValue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//realtime graph\n\t\t\t\t\t\t\t\t\tunsigned long long actValue = std::strtoull(sd[0].c_str(), nullptr, 10);\n\n\t\t\t\t\t\t\t\t\tstd::string stime = sd[1];\n\t\t\t\t\t\t\t\t\tstruct tm ntime;\n\t\t\t\t\t\t\t\t\ttime_t atime;\n\t\t\t\t\t\t\t\t\tParseSQLdatetime(atime, ntime, stime, -1);\n\t\t\t\t\t\t\t\t\tif (bHaveFirstRealValue)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlong long curValue = actValue - ulLastValue;\n\n\t\t\t\t\t\t\t\t\t\tfloat tdiff = static_cast<float>(difftime(atime, lastTime));\n\t\t\t\t\t\t\t\t\t\tif (tdiff == 0)\n\t\t\t\t\t\t\t\t\t\t\ttdiff = 1;\n\t\t\t\t\t\t\t\t\t\tfloat tlaps = 3600.0f / tdiff;\n\t\t\t\t\t\t\t\t\t\tcurValue *= int(tlaps);\n\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\n\t\t\t\t\t\t\t\t\t\tfloat TotalValue = float(curValue);\n\t\t\t\t\t\t\t\t\t\t//if (TotalValue != 0)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f);\t//from kWh -> Watt\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", TotalValue);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tbHaveFirstRealValue = true;\n\t\t\t\t\t\t\t\t\tif (!bIsManagedCounter) {\n\t\t\t\t\t\t\t\t\t\tulLastValue = actValue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlastTime = atime;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((!bIsManagedCounter) && (bHaveFirstValue) && (method == 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//add last value\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = LastDateTime + \":00\";\n\n\t\t\t\t\t\t\tunsigned long long ulTotalValue = ulLastValue - ulFirstValue;\n\n\t\t\t\t\t\t\tfloat TotalValue = float(ulTotalValue);\n\n\t\t\t\t\t\t\t//if (TotalValue != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f);\t//from kWh -> Watt\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", TotalValue / divider);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", TotalValue);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"uv\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Level, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"uvi\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"rain\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tint LastHour = -1;\n\t\t\t\t\tfloat LastTotalPreviousHour = -1;\n\n\t\t\t\t\tfloat LastValue = -1;\n\t\t\t\t\tstd::string LastDate = \"\";\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Total, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\t\t\tfloat ActTotal = static_cast<float>(atof(sd[0].c_str()));\n\t\t\t\t\t\t\tint Hour = atoi(sd[1].substr(11, 2).c_str());\n\t\t\t\t\t\t\tif (Hour != LastHour)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (LastHour != -1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tint NextCalculatedHour = (LastHour + 1) % 24;\n\t\t\t\t\t\t\t\t\tif (Hour != NextCalculatedHour)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t//Looks like we have a GAP somewhere, finish the last hour\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = LastDate;\n\t\t\t\t\t\t\t\t\t\tdouble mmval = ActTotal - LastValue;\n\t\t\t\t\t\t\t\t\t\tmmval *= AddjMulti;\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", mmval);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\t\t\tdouble mmval = ActTotal - LastTotalPreviousHour;\n\t\t\t\t\t\t\t\t\t\tmmval *= AddjMulti;\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", mmval);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tLastHour = Hour;\n\t\t\t\t\t\t\t\tLastTotalPreviousHour = ActTotal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tLastValue = ActTotal;\n\t\t\t\t\t\t\tLastDate = sd[1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"wind\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Direction, Speed, Gust, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"di\"] = sd[0];\n\n\t\t\t\t\t\t\tint intSpeed = atoi(sd[1].c_str());\n\t\t\t\t\t\t\tint intGust = atoi(sd[2].c_str());\n\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"winddir\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Direction, Speed, Gust FROM %s WHERE (DeviceRowID==%\" PRIu64 \") ORDER BY Date ASC\", dbasetable.c_str(), idx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::map<int, int> _directions;\n\t\t\t\t\t\tint wdirtabletemp[17][8];\n\t\t\t\t\t\tstd::string szLegendLabels[7];\n\t\t\t\t\t\tint ii = 0;\n\n\t\t\t\t\t\tint totalvalues = 0;\n\t\t\t\t\t\t//init dir list\n\t\t\t\t\t\tint idir;\n\t\t\t\t\t\tfor (idir = 0; idir < 360 + 1; idir++)\n\t\t\t\t\t\t\t_directions[idir] = 0;\n\t\t\t\t\t\tfor (ii = 0; ii < 17; ii++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (int jj = 0; jj < 8; jj++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twdirtabletemp[ii][jj] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (m_sql.m_windunit == WINDUNIT_MS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 0.5 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"0.5-2 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"2-4 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"4-6 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"6-8 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"8-10 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 10\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_KMH)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 2 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"2-4 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"4-6 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"6-10 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"10-20 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"20-36 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 36\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_MPH)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 3 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"3-7 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"7-12 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"12-18 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"18-24 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"24-46 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 46\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_Knots)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 3 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"3-7 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"7-17 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"17-27 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"27-34 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"34-41 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 41\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_Beaufort)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 2 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"2-4 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"4-6 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"6-8 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"8-10 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"10-12 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 12\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t//Todo !\n\t\t\t\t\t\t\tszLegendLabels[0] = \"&lt; 0.5 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[1] = \"0.5-2 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[2] = \"2-4 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[3] = \"4-6 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[4] = \"6-8 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[5] = \"8-10 \" + m_sql.m_windsign;\n\t\t\t\t\t\t\tszLegendLabels[6] = \"&gt; 10\" + m_sql.m_windsign;\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\t\t\tfloat fdirection = static_cast<float>(atof(sd[0].c_str()));\n\t\t\t\t\t\t\tif (fdirection >= 360)\n\t\t\t\t\t\t\t\tfdirection = 0;\n\t\t\t\t\t\t\tint direction = int(fdirection);\n\t\t\t\t\t\t\tfloat speedOrg = static_cast<float>(atof(sd[1].c_str()));\n\t\t\t\t\t\t\tfloat gustOrg = static_cast<float>(atof(sd[2].c_str()));\n\t\t\t\t\t\t\tif ((gustOrg == 0) && (speedOrg != 0))\n\t\t\t\t\t\t\t\tgustOrg = speedOrg;\n\t\t\t\t\t\t\tif (gustOrg == 0)\n\t\t\t\t\t\t\t\tcontinue; //no direction if wind is still\n\t\t\t\t\t\t\tfloat speed = speedOrg * m_sql.m_windscale;\n\t\t\t\t\t\t\tfloat gust = gustOrg * m_sql.m_windscale;\n\t\t\t\t\t\t\tint bucket = int(fdirection / 22.5f);\n\n\t\t\t\t\t\t\tint speedpos = 0;\n\n\t\t\t\t\t\t\tif (m_sql.m_windunit == WINDUNIT_MS)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (gust < 0.5f) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (gust < 2.0f) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (gust < 4.0f) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (gust < 6.0f) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (gust < 8.0f) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (gust < 10.0f) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_KMH)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (gust < 2.0f) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (gust < 4.0f) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (gust < 6.0f) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (gust < 10.0f) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (gust < 20.0f) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (gust < 36.0f) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_MPH)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (gust < 3.0f) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (gust < 7.0f) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (gust < 12.0f) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (gust < 18.0f) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (gust < 24.0f) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (gust < 46.0f) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_Knots)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (gust < 3.0f) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (gust < 7.0f) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (gust < 17.0f) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (gust < 27.0f) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (gust < 34.0f) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (gust < 41.0f) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (m_sql.m_windunit == WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat gustms = gustOrg * 0.1f;\n\t\t\t\t\t\t\t\tint iBeaufort = MStoBeaufort(gustms);\n\t\t\t\t\t\t\t\tif (iBeaufort < 2) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (iBeaufort < 4) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (iBeaufort < 6) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (iBeaufort < 8) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (iBeaufort < 10) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (iBeaufort < 12) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//Still todo !\n\t\t\t\t\t\t\t\tif (gust < 0.5f) speedpos = 0;\n\t\t\t\t\t\t\t\telse if (gust < 2.0f) speedpos = 1;\n\t\t\t\t\t\t\t\telse if (gust < 4.0f) speedpos = 2;\n\t\t\t\t\t\t\t\telse if (gust < 6.0f) speedpos = 3;\n\t\t\t\t\t\t\t\telse if (gust < 8.0f) speedpos = 4;\n\t\t\t\t\t\t\t\telse if (gust < 10.0f) speedpos = 5;\n\t\t\t\t\t\t\t\telse speedpos = 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twdirtabletemp[bucket][speedpos]++;\n\t\t\t\t\t\t\t_directions[direction]++;\n\t\t\t\t\t\t\ttotalvalues++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (int jj = 0; jj < 7; jj++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result_speed\"][jj][\"label\"] = szLegendLabels[jj];\n\n\t\t\t\t\t\t\tfor (ii = 0; ii < 16; ii++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat svalue = 0;\n\t\t\t\t\t\t\t\tif (totalvalues > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsvalue = (100.0f / totalvalues)*wdirtabletemp[ii][jj];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", svalue);\n\t\t\t\t\t\t\t\troot[\"result_speed\"][jj][\"sp\"][ii] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tii = 0;\n\t\t\t\t\t\tfor (idir = 0; idir < 360 + 1; idir++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (_directions[idir] != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"dig\"] = idir;\n\t\t\t\t\t\t\t\tfloat percentage = 0;\n\t\t\t\t\t\t\t\tif (totalvalues > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpercentage = (float(100.0 / float(totalvalues))*float(_directions[idir]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", percentage);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"div\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}//day\n\t\t\telse if (srange == \"week\")\n\t\t\t{\n\t\t\t\tif (sensor == \"rain\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tchar szDateStart[40];\n\t\t\t\t\tchar szDateEnd[40];\n\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday);\n\n\t\t\t\t\t//Subtract one week\n\t\t\t\t\ttime_t weekbefore;\n\t\t\t\t\tstruct tm tm2;\n\t\t\t\t\tgetNoon(weekbefore, tm2, tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday - 7); // We only want the date\n\t\t\t\t\tsprintf(szDateStart, \"%04d-%02d-%02d\", tm2.tm_year + 1900, tm2.tm_mon + 1, tm2.tm_mday);\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Total, Rate, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\tdouble mmval = atof(sd[0].c_str());\n\t\t\t\t\t\t\tmmval *= AddjMulti;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", mmval);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Total), MAX(Total), MAX(Rate) FROM Rain WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Total, Total, Rate FROM Rain WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q') ORDER BY ROWID DESC LIMIT 1\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t}\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\tfloat total_min = static_cast<float>(atof(sd[0].c_str()));\n\t\t\t\t\t\tfloat total_max = static_cast<float>(atof(sd[1].c_str()));\n\t\t\t\t\t\tint rate = atoi(sd[2].c_str());\n\n\t\t\t\t\t\tdouble total_real = 0;\n\t\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal_real *= AddjMulti;\n\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", total_real);\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"counter\")\n\t\t\t\t{\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\troot[\"ValueQuantity\"] = options[\"ValueQuantity\"];\n\t\t\t\t\troot[\"ValueUnits\"] = options[\"ValueUnits\"];\n\n\t\t\t\t\tchar szDateStart[40];\n\t\t\t\t\tchar szDateEnd[40];\n\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday);\n\n\t\t\t\t\t//Subtract one week\n\t\t\t\t\ttime_t weekbefore;\n\t\t\t\t\tstruct tm tm2;\n\t\t\t\t\tgetNoon(weekbefore, tm2, tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday - 7); // We only want the date\n\t\t\t\t\tsprintf(szDateStart, \"%04d-%02d-%02d\", tm2.tm_year + 1900, tm2.tm_mon + 1, tm2.tm_mday);\n\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value5,Value6,Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[4].substr(0, 16);\n\t\t\t\t\t\t\t\tstd::string szValueUsage1 = sd[0];\n\t\t\t\t\t\t\t\tstd::string szValueDeliv1 = sd[1];\n\t\t\t\t\t\t\t\tstd::string szValueUsage2 = sd[2];\n\t\t\t\t\t\t\t\tstd::string szValueDeliv2 = sd[3];\n\n\t\t\t\t\t\t\t\tfloat fUsage1 = (float)(atof(szValueUsage1.c_str()));\n\t\t\t\t\t\t\t\tfloat fUsage2 = (float)(atof(szValueUsage2.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv1 = (float)(atof(szValueDeliv1.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv2 = (float)(atof(szValueDeliv2.c_str()));\n\n\t\t\t\t\t\t\t\tfDeliv1 = (fDeliv1 < 10) ? 0 : fDeliv1;\n\t\t\t\t\t\t\t\tfDeliv2 = (fDeliv2 < 10) ? 0 : fDeliv2;\n\n\t\t\t\t\t\t\t\tif ((fDeliv1 != 0) || (fDeliv2 != 0))\n\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage1 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage2 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv1 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv2 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r2\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\tstd::string szValue = sd[0];\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\t//value already set above!\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tszValue = \"0\";\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szValue;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value1), MAX(Value1), MIN(Value2), MAX(Value2),MIN(Value5), MAX(Value5), MIN(Value6), MAX(Value6) FROM MultiMeter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\t\tunsigned long long total_min_usage_1 = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_1 = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_usage_2 = std::strtoull(sd[4].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_2 = std::strtoull(sd[5].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_usage_1, total_real_usage_2;\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_1 = std::strtoull(sd[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_1 = std::strtoull(sd[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_2 = std::strtoull(sd[6].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_2 = std::strtoull(sd[7].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_deliv_1, total_real_deliv_2;\n\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\n\t\t\t\t\t\t\ttotal_real_usage_1 = total_max_usage_1 - total_min_usage_1;\n\t\t\t\t\t\t\ttotal_real_usage_2 = total_max_usage_2 - total_min_usage_2;\n\n\t\t\t\t\t\t\ttotal_real_deliv_1 = total_max_deliv_1 - total_min_deliv_1;\n\t\t\t\t\t\t\ttotal_real_deliv_2 = total_max_deliv_2 - total_min_deliv_2;\n\t\t\t\t\t\t\tif ((total_real_deliv_1 != 0) || (total_real_deliv_2 != 0))\n\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_usage_1);\n\t\t\t\t\t\t\tstd::string szValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_usage_2);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_deliv_1);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_deliv_2);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"r2\"] = szTmp;\n\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!bIsManagedCounter)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\t\tunsigned long long total_min = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real;\n\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real);\n\t\t\t\t\t\t\tstd::string szValue = szTmp;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t//value already set above!\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tszValue = \"0\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szValue;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}//week\n\t\t\telse if ((srange == \"month\") || (srange == \"year\"))\n\t\t\t{\n\t\t\t\tchar szDateStart[40];\n\t\t\t\tchar szDateEnd[40];\n\t\t\t\tchar szDateStartPrev[40];\n\t\t\t\tchar szDateEndPrev[40];\n\n\t\t\t\tstd::string sactmonth = request::findValue(&req, \"actmonth\");\n\t\t\t\tstd::string sactyear = request::findValue(&req, \"actyear\");\n\n\t\t\t\tint actMonth = atoi(sactmonth.c_str());\n\t\t\t\tint actYear = atoi(sactyear.c_str());\n\n\t\t\t\tif ((sactmonth != \"\") && (sactyear != \"\"))\n\t\t\t\t{\n\t\t\t\t\tsprintf(szDateStart, \"%04d-%02d-%02d\", actYear, actMonth, 1);\n\t\t\t\t\tsprintf(szDateStartPrev, \"%04d-%02d-%02d\", actYear - 1, actMonth, 1);\n\t\t\t\t\tactMonth++;\n\t\t\t\t\tif (actMonth == 13)\n\t\t\t\t\t{\n\t\t\t\t\t\tactMonth = 1;\n\t\t\t\t\t\tactYear++;\n\t\t\t\t\t}\n\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", actYear, actMonth, 1);\n\t\t\t\t\tsprintf(szDateEndPrev, \"%04d-%02d-%02d\", actYear - 1, actMonth, 1);\n\t\t\t\t}\n\t\t\t\telse if (sactyear != \"\")\n\t\t\t\t{\n\t\t\t\t\tsprintf(szDateStart, \"%04d-%02d-%02d\", actYear, 1, 1);\n\t\t\t\t\tsprintf(szDateStartPrev, \"%04d-%02d-%02d\", actYear - 1, 1, 1);\n\t\t\t\t\tactYear++;\n\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", actYear, 1, 1);\n\t\t\t\t\tsprintf(szDateEndPrev, \"%04d-%02d-%02d\", actYear - 1, 1, 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday);\n\t\t\t\t\tsprintf(szDateEndPrev, \"%04d-%02d-%02d\", tm1.tm_year + 1900 - 1, tm1.tm_mon + 1, tm1.tm_mday);\n\n\t\t\t\t\tstruct tm tm2;\n\t\t\t\t\tif (srange == \"month\")\n\t\t\t\t\t{\n\t\t\t\t\t\t//Subtract one month\n\t\t\t\t\t\ttime_t monthbefore;\n\t\t\t\t\t\tgetNoon(monthbefore, tm2, tm1.tm_year + 1900, tm1.tm_mon, tm1.tm_mday);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//Subtract one year\n\t\t\t\t\t\ttime_t yearbefore;\n\t\t\t\t\t\tgetNoon(yearbefore, tm2, tm1.tm_year + 1900 - 1, tm1.tm_mon + 1, tm1.tm_mday);\n\t\t\t\t\t}\n\n\t\t\t\t\tsprintf(szDateStart, \"%04d-%02d-%02d\", tm2.tm_year + 1900, tm2.tm_mon + 1, tm2.tm_mday);\n\t\t\t\t\tsprintf(szDateStartPrev, \"%04d-%02d-%02d\", tm2.tm_year + 1900 - 1, tm2.tm_mon + 1, tm2.tm_mday);\n\t\t\t\t}\n\n\t\t\t\tif (sensor == \"temp\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t//Actual Year\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Temp_Min, Temp_Max, Chill_Min, Chill_Max,\"\n\t\t\t\t\t\t\" Humidity, Barometer, Temp_Avg, Date, SetPoint_Min,\"\n\t\t\t\t\t\t\" SetPoint_Max, SetPoint_Avg \"\n\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[7].substr(0, 16);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeRego6XXTemp) || (dType == pTypeTEMP) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO) || (dType == pTypeTEMP_BARO) || (dType == pTypeWIND) || (dType == pTypeThermostat1) || (dType == pTypeRadiator1) ||\n\t\t\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSystemTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint)) ||\n\t\t\t\t\t\t\t\t(dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbool bOK = true;\n\t\t\t\t\t\t\t\tif (dType == pTypeWIND)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbOK = ((dSubType != sTypeWINDNoTemp) && (dSubType != sTypeWINDNoTempNoChill));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (bOK)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble ta = ConvertTemperature(atof(sd[6].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = te;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"tm\"] = tm;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ta\"] = ta;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[3].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[2].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = ch;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"cm\"] = cm;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeHUM) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[4];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[5];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble sm = ConvertTemperature(atof(sd[8].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble sx = ConvertTemperature(atof(sd[9].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[10].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sm\"] = sm;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sx\"] = sx;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT MIN(Temperature), MAX(Temperature),\"\n\t\t\t\t\t\t\" MIN(Chill), MAX(Chill), AVG(Humidity),\"\n\t\t\t\t\t\t\" AVG(Barometer), AVG(Temperature), MIN(SetPoint),\"\n\t\t\t\t\t\t\" MAX(SetPoint), AVG(SetPoint) \"\n\t\t\t\t\t\t\"FROM Temperature WHERE (DeviceRowID==%\" PRIu64 \"\"\n\t\t\t\t\t\t\" AND Date>='%q')\",\n\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((dType == pTypeRego6XXTemp) || (dType == pTypeTEMP) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO) || (dType == pTypeTEMP_BARO) || (dType == pTypeWIND) || (dType == pTypeThermostat1) || (dType == pTypeRadiator1)) ||\n\t\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t(dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\tdouble ta = ConvertTemperature(atof(sd[6].c_str()), tempsign);\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = te;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"tm\"] = tm;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ta\"] = ta;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[3].c_str()), tempsign);\n\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[2].c_str()), tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = ch;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"cm\"] = cm;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((dType == pTypeHUM) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[4];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[5];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble sx = ConvertTemperature(atof(sd[8].c_str()), tempsign);\n\t\t\t\t\t\t\tdouble sm = ConvertTemperature(atof(sd[7].c_str()), tempsign);\n\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[9].c_str()), tempsign);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sm\"] = sm;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sx\"] = sx;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\t//Previous Year\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Temp_Min, Temp_Max, Chill_Min, Chill_Max,\"\n\t\t\t\t\t\t\" Humidity, Barometer, Temp_Avg, Date, SetPoint_Min,\"\n\t\t\t\t\t\t\" SetPoint_Max, SetPoint_Avg \"\n\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[7].substr(0, 16);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeRego6XXTemp) || (dType == pTypeTEMP) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO) || (dType == pTypeTEMP_BARO) || (dType == pTypeWIND) || (dType == pTypeThermostat1) || (dType == pTypeRadiator1) ||\n\t\t\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSystemTemp)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint)) ||\n\t\t\t\t\t\t\t\t(dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbool bOK = true;\n\t\t\t\t\t\t\t\tif (dType == pTypeWIND)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbOK = ((dSubType == sTypeWIND4) || (dSubType == sTypeWINDNoTemp));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (bOK)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble ta = ConvertTemperature(atof(sd[6].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"te\"] = te;\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"tm\"] = tm;\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ta\"] = ta;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[3].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[2].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ch\"] = ch;\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"cm\"] = cm;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeHUM) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"hu\"] = sd[4];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ba\"] = sd[5];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble sx = ConvertTemperature(atof(sd[8].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble sm = ConvertTemperature(atof(sd[7].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[9].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"se\"] = se;\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"sm\"] = sm;\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"sx\"] = sx;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"Percentage\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Percentage_Min, Percentage_Max, Percentage_Avg, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = sd[0];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = sd[1];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_avg\"] = sd[2];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT MIN(Percentage), MAX(Percentage), AVG(Percentage) FROM Percentage WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = sd[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"v_avg\"] = sd[2];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"fan\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Speed_Min, Speed_Max, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = sd[1];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT MIN(Speed), MAX(Speed) FROM Fan WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = sd[1];\n\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = sd[0];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"uv\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Level, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"uvi\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT MAX(Level) FROM UV WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"uvi\"] = sd[0];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\t//Previous Year\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Level, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"uvi\"] = sd[0];\n\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"rain\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Total, Rate, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\tdouble mmval = atof(sd[0].c_str());\n\t\t\t\t\t\t\tmmval *= AddjMulti;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", mmval);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Total), MAX(Total), MAX(Rate) FROM Rain WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Total, Total, Rate FROM Rain WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q') ORDER BY ROWID DESC LIMIT 1\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t}\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\tfloat total_min = static_cast<float>(atof(sd[0].c_str()));\n\t\t\t\t\t\tfloat total_max = static_cast<float>(atof(sd[1].c_str()));\n\t\t\t\t\t\tint rate = atoi(sd[2].c_str());\n\n\t\t\t\t\t\tdouble total_real = 0;\n\t\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal_real *= AddjMulti;\n\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", total_real);\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\t//Previous Year\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Total, Rate, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\tdouble mmval = atof(sd[0].c_str());\n\t\t\t\t\t\t\tmmval *= AddjMulti;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", mmval);\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"mm\"] = szTmp;\n\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"counter\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\troot[\"ValueQuantity\"] = options[\"ValueQuantity\"];\n\t\t\t\t\troot[\"ValueUnits\"] = options[\"ValueUnits\"];\n\n\t\t\t\t\tint nValue = 0;\n\t\t\t\t\tstd::string sValue = \"\";\n\n\t\t\t\t\tresult = m_sql.safe_query(\"SELECT nValue, sValue FROM DeviceStatus WHERE (ID==%\" PRIu64 \")\",\n\t\t\t\t\t\tidx);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\tnValue = atoi(sd[0].c_str());\n\t\t\t\t\t\tsValue = sd[1];\n\t\t\t\t\t}\n\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tiPrev = 0;\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Actual Year\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Value1,Value2,Value5,Value6, Date,\"\n\t\t\t\t\t\t\t\" Counter1, Counter2, Counter3, Counter4 \"\n\t\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[4].substr(0, 16);\n\n\t\t\t\t\t\t\t\tdouble counter_1 = atof(sd[5].c_str());\n\t\t\t\t\t\t\t\tdouble counter_2 = atof(sd[6].c_str());\n\t\t\t\t\t\t\t\tdouble counter_3 = atof(sd[7].c_str());\n\t\t\t\t\t\t\t\tdouble counter_4 = atof(sd[8].c_str());\n\n\t\t\t\t\t\t\t\tstd::string szUsage1 = sd[0];\n\t\t\t\t\t\t\t\tstd::string szDeliv1 = sd[1];\n\t\t\t\t\t\t\t\tstd::string szUsage2 = sd[2];\n\t\t\t\t\t\t\t\tstd::string szDeliv2 = sd[3];\n\n\t\t\t\t\t\t\t\tfloat fUsage_1 = static_cast<float>(atof(szUsage1.c_str()));\n\t\t\t\t\t\t\t\tfloat fUsage_2 = static_cast<float>(atof(szUsage2.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv_1 = static_cast<float>(atof(szDeliv1.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv_2 = static_cast<float>(atof(szDeliv2.c_str()));\n\n\t\t\t\t\t\t\t\tfDeliv_1 = (fDeliv_1 < 10) ? 0 : fDeliv_1;\n\t\t\t\t\t\t\t\tfDeliv_2 = (fDeliv_2 < 10) ? 0 : fDeliv_2;\n\n\t\t\t\t\t\t\t\tif ((fDeliv_1 != 0) || (fDeliv_2 != 0))\n\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage_1 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage_2 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv_1 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv_2 / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"r2\"] = szTmp;\n\n\t\t\t\t\t\t\t\tif (counter_1 != 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (counter_1 - fUsage_1) / divider);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c1\"] = szTmp;\n\n\t\t\t\t\t\t\t\tif (counter_2 != 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (counter_2 - fDeliv_1) / divider);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c2\"] = szTmp;\n\n\t\t\t\t\t\t\t\tif (counter_3 != 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (counter_3 - fUsage_2) / divider);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c3\"] = szTmp;\n\n\t\t\t\t\t\t\t\tif (counter_4 != 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", (counter_4 - fDeliv_2) / divider);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c4\"] = szTmp;\n\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Previous Year\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Value1,Value2,Value5,Value6, Date \"\n\t\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[4].substr(0, 16);\n\n\t\t\t\t\t\t\t\tstd::string szUsage1 = sd[0];\n\t\t\t\t\t\t\t\tstd::string szDeliv1 = sd[1];\n\t\t\t\t\t\t\t\tstd::string szUsage2 = sd[2];\n\t\t\t\t\t\t\t\tstd::string szDeliv2 = sd[3];\n\n\t\t\t\t\t\t\t\tfloat fUsage_1 = static_cast<float>(atof(szUsage1.c_str()));\n\t\t\t\t\t\t\t\tfloat fUsage_2 = static_cast<float>(atof(szUsage2.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv_1 = static_cast<float>(atof(szDeliv1.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv_2 = static_cast<float>(atof(szDeliv2.c_str()));\n\n\t\t\t\t\t\t\t\tif ((fDeliv_1 != 0) || (fDeliv_2 != 0))\n\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage_1 / divider);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage_2 / divider);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv_1 / divider);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"r1\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv_2 / divider);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"r2\"] = szTmp;\n\t\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeAirQuality)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value3,Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_min\"] = sd[0];\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_max\"] = sd[1];\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_avg\"] = sd[2];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value2,Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"co2_max\"] = sd[0];\n\t\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeGeneral) && ((dSubType == sTypeSoilMoisture) || (dSubType == sTypeLeafWetness))) ||\n\t\t\t\t\t\t((dType == pTypeRFXSensor) && ((dSubType == sTypeRFXSensorAD) || (dSubType == sTypeRFXSensorVolt)))\n\t\t\t\t\t\t)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = sd[0];\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = sd[1];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVisibility)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeDistance)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypePressure)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel))\n\t\t\t\t\t\t)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tfloat vdiv = 10.0f;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvdiv = 1000.0f;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value3,Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\tfloat fValue1 = float(atof(sd[0].c_str())) / vdiv;\n\t\t\t\t\t\t\t\tfloat fValue2 = float(atof(sd[1].c_str())) / vdiv;\n\t\t\t\t\t\t\t\tfloat fValue3 = float(atof(sd[2].c_str())) / vdiv;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\n\t\t\t\t\t\t\t\tif (metertype == 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfValue1 *= 0.6214f;\n\t\t\t\t\t\t\t\t\tfValue2 *= 0.6214f;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fValue3 != 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue3);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_avg\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fValue3 != 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue3);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_avg\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeLux)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value3, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[3].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_min\"] = sd[0];\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_max\"] = sd[1];\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_avg\"] = sd[2];\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeWEIGHT)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Value1,Value2, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", m_sql.m_weightscale * atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", m_sql.m_weightscale * atof(sd[1].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeUsage)\n\t\t\t\t\t{//month/year\n\t\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Value1,Value2, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"u_min\"] = atof(sd[0].c_str()) / 10.0f;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"u_max\"] = atof(sd[1].c_str()) / 10.0f;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value3,Value4,Value5,Value6, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//CM113\n\t\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\t\troot[\"displaytype\"] = displaytype;\n\n\t\t\t\t\t\t\tbool bHaveL1 = false;\n\t\t\t\t\t\t\tbool bHaveL2 = false;\n\t\t\t\t\t\t\tbool bHaveL3 = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[6].substr(0, 16);\n\n\t\t\t\t\t\t\t\tfloat fval1 = static_cast<float>(atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval2 = static_cast<float>(atof(sd[1].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval3 = static_cast<float>(atof(sd[2].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval4 = static_cast<float>(atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval5 = static_cast<float>(atof(sd[4].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval6 = static_cast<float>(atof(sd[5].c_str()) / 10.0f);\n\n\t\t\t\t\t\t\t\tif ((fval1 != 0) || (fval2 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL1 = true;\n\t\t\t\t\t\t\t\tif ((fval3 != 0) || (fval4 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL2 = true;\n\t\t\t\t\t\t\t\tif ((fval5 != 0) || (fval6 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL3 = true;\n\n\t\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval3);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval4);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v4\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval5);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v5\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval6);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v6\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval1*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval2*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval3*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval4*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v4\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval5*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v5\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval6*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v6\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(!bHaveL1) &&\n\t\t\t\t\t\t\t\t(!bHaveL2) &&\n\t\t\t\t\t\t\t\t(!bHaveL3)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\troot[\"haveL1\"] = true; //show at least something\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (bHaveL1)\n\t\t\t\t\t\t\t\t\troot[\"haveL1\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL2)\n\t\t\t\t\t\t\t\t\troot[\"haveL2\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL3)\n\t\t\t\t\t\t\t\t\troot[\"haveL3\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeCURRENTENERGY)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value1,Value2,Value3,Value4,Value5,Value6, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//CM180i\n\t\t\t\t\t\t\tint displaytype = 0;\n\t\t\t\t\t\t\tint voltage = 230;\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"CM113DisplayType\", displaytype);\n\t\t\t\t\t\t\tm_sql.GetPreferencesVar(\"ElectricVoltage\", voltage);\n\n\t\t\t\t\t\t\troot[\"displaytype\"] = displaytype;\n\n\t\t\t\t\t\t\tbool bHaveL1 = false;\n\t\t\t\t\t\t\tbool bHaveL2 = false;\n\t\t\t\t\t\t\tbool bHaveL3 = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[6].substr(0, 16);\n\n\t\t\t\t\t\t\t\tfloat fval1 = static_cast<float>(atof(sd[0].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval2 = static_cast<float>(atof(sd[1].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval3 = static_cast<float>(atof(sd[2].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval4 = static_cast<float>(atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval5 = static_cast<float>(atof(sd[4].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\tfloat fval6 = static_cast<float>(atof(sd[5].c_str()) / 10.0f);\n\n\t\t\t\t\t\t\t\tif ((fval1 != 0) || (fval2 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL1 = true;\n\t\t\t\t\t\t\t\tif ((fval3 != 0) || (fval4 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL2 = true;\n\t\t\t\t\t\t\t\tif ((fval5 != 0) || (fval6 != 0))\n\t\t\t\t\t\t\t\t\tbHaveL3 = true;\n\n\t\t\t\t\t\t\t\tif (displaytype == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval1);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval2);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval3);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval4);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v4\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval5);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v5\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fval6);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v6\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval1*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v1\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval2*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval3*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v3\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval4*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v4\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval5*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v5\"] = szTmp;\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", int(fval6*voltage));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v6\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(!bHaveL1) &&\n\t\t\t\t\t\t\t\t(!bHaveL2) &&\n\t\t\t\t\t\t\t\t(!bHaveL3)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\troot[\"haveL1\"] = true; //show at least something\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (bHaveL1)\n\t\t\t\t\t\t\t\t\troot[\"haveL1\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL2)\n\t\t\t\t\t\t\t\t\troot[\"haveL2\"] = true;\n\t\t\t\t\t\t\t\tif (bHaveL3)\n\t\t\t\t\t\t\t\t\troot[\"haveL3\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dType == pTypeP1Gas)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Add last counter value\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(sValue.c_str()) / 1000.0);\n\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dType == pTypeENERGY)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsize_t spos = sValue.find(\";\");\n\t\t\t\t\t\t\tif (spos != std::string::npos)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat fvalue = static_cast<float>(atof(sValue.substr(spos + 1).c_str()));\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fvalue / (divider / 100.0f));\n\t\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeKwh))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsize_t spos = sValue.find(\";\");\n\t\t\t\t\t\t\tif (spos != std::string::npos)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat fvalue = static_cast<float>(atof(sValue.substr(spos + 1).c_str()));\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fvalue / divider);\n\t\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dType == pTypeRFXMeter)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Add last counter value\n\t\t\t\t\t\t\tfloat fvalue = static_cast<float>(atof(sValue.c_str()));\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + (fvalue / divider));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", AddjValue + (fvalue / divider));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + (fvalue / divider));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstrcpy(szTmp, \"\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dType == pTypeYouLess)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> results;\n\t\t\t\t\t\t\tStringSplit(sValue, \";\", results);\n\t\t\t\t\t\t\tif (results.size() == 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//Add last counter value\n\t\t\t\t\t\t\t\tfloat fvalue = static_cast<float>(atof(results[0].c_str()));\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fvalue / divider);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", fvalue / divider);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fvalue / divider);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"\");\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!bIsManagedCounter)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Add last counter value\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", atoi(sValue.c_str()));\n\t\t\t\t\t\t\troot[\"counter\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"counter\"] = \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Actual Year\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date, Counter FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\n\t\t\t\t\t\t\t\tstd::string szValue = sd[0];\n\n\t\t\t\t\t\t\t\tdouble fcounter = atof(sd[2].c_str());\n\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fcounter != 0)\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + ((fcounter - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fcounter != 0)\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", AddjValue + ((fcounter - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fcounter != 0)\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + ((fcounter - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.0f\", atof(szValue.c_str()));\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tif (fcounter != 0)\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.0f\", AddjValue + ((fcounter - atof(szValue.c_str()))));\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tstrcpy(szTmp, \"0\");\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Past Year\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date, Counter FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[1].substr(0, 16);\n\n\t\t\t\t\t\t\t\tstd::string szValue = sd[0];\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.0f\", atof(szValue.c_str()));\n\t\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\n\t\t\t\t\tif ((sactmonth != \"\") || (sactyear != \"\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tstruct tm loctime;\n\t\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\t\tlocaltime_r(&now, &loctime);\n\t\t\t\t\t\tif ((sactmonth != \"\") && (sactyear != \"\"))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bIsThisMonth = (atoi(sactyear.c_str()) == loctime.tm_year + 1900) && (atoi(sactmonth.c_str()) == loctime.tm_mon + 1);\n\t\t\t\t\t\t\tif (bIsThisMonth)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", loctime.tm_year + 1900, loctime.tm_mon + 1, loctime.tm_mday);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sactyear != \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bIsThisYear = (atoi(sactyear.c_str()) == loctime.tm_year + 1900);\n\t\t\t\t\t\t\tif (bIsThisYear)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szDateEnd, \"%04d-%02d-%02d\", loctime.tm_year + 1900, loctime.tm_mon + 1, loctime.tm_mday);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value1), MAX(Value1), MIN(Value2),\"\n\t\t\t\t\t\t\t\" MAX(Value2), MIN(Value5), MAX(Value5),\"\n\t\t\t\t\t\t\t\" MIN(Value6), MAX(Value6) \"\n\t\t\t\t\t\t\t\"FROM MultiMeter WHERE (DeviceRowID=%\" PRIu64 \"\"\n\t\t\t\t\t\t\t\" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\t\tunsigned long long total_min_usage_1 = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_1 = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_usage_2 = std::strtoull(sd[4].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_2 = std::strtoull(sd[5].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_usage_1, total_real_usage_2;\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_1 = std::strtoull(sd[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_1 = std::strtoull(sd[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_2 = std::strtoull(sd[6].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_2 = std::strtoull(sd[7].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_deliv_1, total_real_deliv_2;\n\n\t\t\t\t\t\t\ttotal_real_usage_1 = total_max_usage_1 - total_min_usage_1;\n\t\t\t\t\t\t\ttotal_real_usage_2 = total_max_usage_2 - total_min_usage_2;\n\n\t\t\t\t\t\t\ttotal_real_deliv_1 = total_max_deliv_1 - total_min_deliv_1;\n\t\t\t\t\t\t\ttotal_real_deliv_2 = total_max_deliv_2 - total_min_deliv_2;\n\n\t\t\t\t\t\t\tif ((total_real_deliv_1 != 0) || (total_real_deliv_2 != 0))\n\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\n\t\t\t\t\t\t\tstd::string szValue;\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_usage_1);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_usage_2);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_deliv_1);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"r1\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_deliv_2);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"r2\"] = szTmp;\n\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeAirQuality)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value), AVG(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_min\"] = result[0][0];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_max\"] = result[0][1];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"co2_avg\"] = result[0][2];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeGeneral) && ((dSubType == sTypeSoilMoisture) || (dSubType == sTypeLeafWetness))) ||\n\t\t\t\t\t\t((dType == pTypeRFXSensor) && ((dSubType == sTypeRFXSensorAD) || (dSubType == sTypeRFXSensorVolt)))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = result[0][0];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = result[0][1];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVisibility)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeDistance)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSolarRadiation)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypePressure)) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeSoundLevel))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat vdiv = 10.0f;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeVoltage)) ||\n\t\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvdiv = 1000.0f;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\tfloat fValue1 = float(atof(result[0][0].c_str())) / vdiv;\n\t\t\t\t\t\t\tfloat fValue2 = float(atof(result[0][1].c_str())) / vdiv;\n\t\t\t\t\t\t\tif (metertype == 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfValue1 *= 0.6214f;\n\t\t\t\t\t\t\t\tfValue2 *= 0.6214f;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeVoltage))\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue1);\n\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue1);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue1);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = szTmp;\n\t\t\t\t\t\t\tif ((dType == pTypeGeneral) && (dSubType == sTypeVoltage))\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue2);\n\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeCurrent))\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fValue2);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", fValue2);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = szTmp;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeLux)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value), AVG(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_min\"] = result[0][0];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_max\"] = result[0][1];\n\t\t\t\t\t\t\troot[\"result\"][ii][\"lux_avg\"] = result[0][2];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeWEIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", m_sql.m_weightscale* atof(result[0][0].c_str()) / 10.0f);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_min\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", m_sql.m_weightscale * atof(result[0][1].c_str()) / 10.0f);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v_max\"] = szTmp;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (dType == pTypeUsage)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID=%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"u_min\"] = atof(result[0][0].c_str()) / 10.0f;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"u_max\"] = atof(result[0][1].c_str()) / 10.0f;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!bIsManagedCounter)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\t\tunsigned long long total_min = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real;\n\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real);\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\n\t\t\t\t\t\t\tstd::string szValue = szTmp;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\n\t\t\t\t\t\t\t\tstd::vector<std::string> mresults;\n\t\t\t\t\t\t\t\tStringSplit(sValue, \";\", mresults);\n\t\t\t\t\t\t\t\tif (mresults.size() == 2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsValue = mresults[1];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (dType == pTypeENERGY)\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + (((atof(sValue.c_str())*100.0f) - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / divider));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_COUNTER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.0f\", atof(szValue.c_str()));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.0f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str()))));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"c\"] = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"wind\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tint ii = 0;\n\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Direction, Speed_Min, Speed_Max, Gust_Min,\"\n\t\t\t\t\t\t\" Gust_Max, Date \"\n\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[5].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"di\"] = sd[0];\n\n\t\t\t\t\t\t\tint intSpeed = atoi(sd[2].c_str());\n\t\t\t\t\t\t\tint intGust = atoi(sd[4].c_str());\n\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT AVG(Direction), MIN(Speed), MAX(Speed),\"\n\t\t\t\t\t\t\" MIN(Gust), MAX(Gust) \"\n\t\t\t\t\t\t\"FROM Wind WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tidx, szDateEnd);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"di\"] = sd[0];\n\n\t\t\t\t\t\tint intSpeed = atoi(sd[2].c_str());\n\t\t\t\t\t\tint intGust = atoi(sd[4].c_str());\n\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t\t//Previous Year\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Direction, Speed_Min, Speed_Max, Gust_Min,\"\n\t\t\t\t\t\t\" Gust_Max, Date \"\n\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStartPrev, szDateEndPrev);\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tiPrev = 0;\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"d\"] = sd[5].substr(0, 16);\n\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"di\"] = sd[0];\n\n\t\t\t\t\t\t\tint intSpeed = atoi(sd[2].c_str());\n\t\t\t\t\t\t\tint intGust = atoi(sd[4].c_str());\n\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\t\troot[\"resultprev\"][iPrev][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tiPrev++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}//month or year\n\t\t\telse if ((srange.substr(0, 1) == \"2\") && (srange.substr(10, 1) == \"T\") && (srange.substr(11, 1) == \"2\")) // custom range 2013-01-01T2013-12-31\n\t\t\t{\n\t\t\t\tstd::string szDateStart = srange.substr(0, 10);\n\t\t\t\tstd::string szDateEnd = srange.substr(11, 10);\n\t\t\t\tstd::string sgraphtype = request::findValue(&req, \"graphtype\");\n\t\t\t\tstd::string sgraphTemp = request::findValue(&req, \"graphTemp\");\n\t\t\t\tstd::string sgraphChill = request::findValue(&req, \"graphChill\");\n\t\t\t\tstd::string sgraphHum = request::findValue(&req, \"graphHum\");\n\t\t\t\tstd::string sgraphBaro = request::findValue(&req, \"graphBaro\");\n\t\t\t\tstd::string sgraphDew = request::findValue(&req, \"graphDew\");\n\t\t\t\tstd::string sgraphSet = request::findValue(&req, \"graphSet\");\n\n\t\t\t\tif (sensor == \"temp\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tbool sendTemp = false;\n\t\t\t\t\tbool sendChill = false;\n\t\t\t\t\tbool sendHum = false;\n\t\t\t\t\tbool sendBaro = false;\n\t\t\t\t\tbool sendDew = false;\n\t\t\t\t\tbool sendSet = false;\n\n\t\t\t\t\tif ((sgraphTemp == \"true\") &&\n\t\t\t\t\t\t((dType == pTypeRego6XXTemp) || (dType == pTypeTEMP) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO) || (dType == pTypeTEMP_BARO) || (dType == pTypeWIND) || (dType == pTypeThermostat1) || (dType == pTypeRadiator1) ||\n\t\t\t\t\t\t((dType == pTypeUV) && (dSubType == sTypeUV3)) ||\n\t\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t\t((dType == pTypeRFXSensor) && (dSubType == sTypeRFXSensorTemp)) ||\n\t\t\t\t\t\t\t((dType == pTypeThermostat) && (dSubType == sTypeThermSetpoint)) ||\n\t\t\t\t\t\t\t(dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tsendTemp = true;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sgraphSet == \"true\") &&\n\t\t\t\t\t\t((dType == pTypeEvohomeZone) || (dType == pTypeEvohomeWater))) //FIXME cheat for water setpoint is just on or off\n\t\t\t\t\t{\n\t\t\t\t\t\tsendSet = true;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sgraphChill == \"true\") &&\n\t\t\t\t\t\t(((dType == pTypeWIND) && (dSubType == sTypeWIND4)) ||\n\t\t\t\t\t\t((dType == pTypeWIND) && (dSubType == sTypeWINDNoTemp)))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tsendChill = true;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sgraphHum == \"true\") &&\n\t\t\t\t\t\t((dType == pTypeHUM) || (dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO))\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tsendHum = true;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sgraphBaro == \"true\") && (\n\t\t\t\t\t\t(dType == pTypeTEMP_HUM_BARO) ||\n\t\t\t\t\t\t(dType == pTypeTEMP_BARO) ||\n\t\t\t\t\t\t((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t))\n\t\t\t\t\t{\n\t\t\t\t\t\tsendBaro = true;\n\t\t\t\t\t}\n\t\t\t\t\tif ((sgraphDew == \"true\") && ((dType == pTypeTEMP_HUM) || (dType == pTypeTEMP_HUM_BARO)))\n\t\t\t\t\t{\n\t\t\t\t\t\tsendDew = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sgraphtype == \"1\")\n\t\t\t\t\t{\n\t\t\t\t\t\t// Need to get all values of the end date so 23:59:59 is appended to the date string\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Temperature, Chill, Humidity, Barometer,\"\n\t\t\t\t\t\t\t\" Date, DewPoint, SetPoint \"\n\t\t\t\t\t\t\t\"FROM Temperature WHERE (DeviceRowID==%\" PRIu64 \"\"\n\t\t\t\t\t\t\t\" AND Date>='%q' AND Date<='%q 23:59:59') ORDER BY Date ASC\",\n\t\t\t\t\t\t\tidx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[4];//.substr(0,16);\n\t\t\t\t\t\t\t\tif (sendTemp)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = te;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"tm\"] = tm;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendChill)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = ch;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"cm\"] = cm;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendHum)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[2];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendBaro)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[3];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[3].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendDew)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble dp = ConvertTemperature(atof(sd[5].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"dp\"] = dp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendSet)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[6].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Temp_Min, Temp_Max, Chill_Min, Chill_Max,\"\n\t\t\t\t\t\t\t\" Humidity, Barometer, Date, DewPoint, Temp_Avg,\"\n\t\t\t\t\t\t\t\" SetPoint_Min, SetPoint_Max, SetPoint_Avg \"\n\t\t\t\t\t\t\t\"FROM Temperature_Calendar \"\n\t\t\t\t\t\t\t\"WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\t\tidx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\t\tint ii = 0;\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[6].substr(0, 16);\n\t\t\t\t\t\t\t\tif (sendTemp)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble ta = ConvertTemperature(atof(sd[8].c_str()), tempsign);\n\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = te;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"tm\"] = tm;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ta\"] = ta;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendChill)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[3].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[2].c_str()), tempsign);\n\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = ch;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"cm\"] = cm;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendHum)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[4];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendBaro)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[5];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendDew)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble dp = ConvertTemperature(atof(sd[7].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"dp\"] = dp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (sendSet)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdouble sm = ConvertTemperature(atof(sd[9].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble sx = ConvertTemperature(atof(sd[10].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[11].c_str()), tempsign);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sm\"] = sm;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sx\"] = sx;\n\t\t\t\t\t\t\t\t\tchar szTmp[1024];\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f %.1f %.1f\", sm, se, sx);\n\t\t\t\t\t\t\t\t\t_log.Log(LOG_STATUS, \"%s\", szTmp);\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Temperature), MAX(Temperature),\"\n\t\t\t\t\t\t\t\" MIN(Chill), MAX(Chill), AVG(Humidity),\"\n\t\t\t\t\t\t\t\" AVG(Barometer), MIN(DewPoint), AVG(Temperature),\"\n\t\t\t\t\t\t\t\" MIN(SetPoint), MAX(SetPoint), AVG(SetPoint) \"\n\t\t\t\t\t\t\t\"FROM Temperature WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\tif (sendTemp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble te = ConvertTemperature(atof(sd[1].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble tm = ConvertTemperature(atof(sd[0].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble ta = ConvertTemperature(atof(sd[7].c_str()), tempsign);\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"te\"] = te;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"tm\"] = tm;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ta\"] = ta;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sendChill)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble ch = ConvertTemperature(atof(sd[3].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble cm = ConvertTemperature(atof(sd[2].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ch\"] = ch;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"cm\"] = cm;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sendHum)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"hu\"] = sd[4];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sendBaro)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (dType == pTypeTEMP_HUM_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (dSubType == sTypeTHBFloat)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = sd[5];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (dType == pTypeTEMP_BARO)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ((dType == pTypeGeneral) && (dSubType == sTypeBaro))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", atof(sd[5].c_str()) / 10.0f);\n\t\t\t\t\t\t\t\t\troot[\"result\"][ii][\"ba\"] = szTmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sendDew)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble dp = ConvertTemperature(atof(sd[6].c_str()), tempsign);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"dp\"] = dp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sendSet)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble sm = ConvertTemperature(atof(sd[8].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble sx = ConvertTemperature(atof(sd[9].c_str()), tempsign);\n\t\t\t\t\t\t\t\tdouble se = ConvertTemperature(atof(sd[10].c_str()), tempsign);\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sm\"] = sm;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"se\"] = se;\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sx\"] = sx;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"uv\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Level, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \"\"\n\t\t\t\t\t\t\" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"uvi\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT MAX(Level) FROM UV WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"uvi\"] = sd[0];\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"rain\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Total, Rate, Date FROM %s \"\n\t\t\t\t\t\t\"WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[2].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = sd[0];\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Total), MAX(Total), MAX(Rate) FROM Rain WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Total, Total, Rate FROM Rain WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q') ORDER BY ROWID DESC LIMIT 1\",\n\t\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\t}\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\tfloat total_min = static_cast<float>(atof(sd[0].c_str()));\n\t\t\t\t\t\tfloat total_max = static_cast<float>(atof(sd[1].c_str()));\n\t\t\t\t\t\tint rate = atoi(sd[2].c_str());\n\n\t\t\t\t\t\tfloat total_real = 0;\n\t\t\t\t\t\tif (dSubType != sTypeRAINWU)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotal_real = total_max;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", total_real);\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"mm\"] = szTmp;\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"counter\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\t\t\t\t\troot[\"ValueQuantity\"] = options[\"ValueQuantity\"];\n\t\t\t\t\troot[\"ValueUnits\"] = options[\"ValueUnits\"];\n\n\t\t\t\t\tint ii = 0;\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT Value1,Value2,Value5,Value6, Date \"\n\t\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[4].substr(0, 16);\n\n\t\t\t\t\t\t\t\tstd::string szUsage1 = sd[0];\n\t\t\t\t\t\t\t\tstd::string szDeliv1 = sd[1];\n\t\t\t\t\t\t\t\tstd::string szUsage2 = sd[2];\n\t\t\t\t\t\t\t\tstd::string szDeliv2 = sd[3];\n\n\t\t\t\t\t\t\t\tfloat fUsage = (float)(atof(szUsage1.c_str()) + atof(szUsage2.c_str()));\n\t\t\t\t\t\t\t\tfloat fDeliv = (float)(atof(szDeliv1.c_str()) + atof(szDeliv2.c_str()));\n\n\t\t\t\t\t\t\t\tif (fDeliv != 0)\n\t\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fUsage / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", fDeliv / divider);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\"SELECT Value, Date FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q' AND Date<='%q') ORDER BY Date ASC\", dbasetable.c_str(), idx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\t\tstd::string szValue = sd[0];\n\t\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[1].substr(0, 16);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szValue;\n\t\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tif (dType == pTypeP1Power)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value1), MAX(Value1), MIN(Value2),\"\n\t\t\t\t\t\t\t\" MAX(Value2),MIN(Value5), MAX(Value5),\"\n\t\t\t\t\t\t\t\" MIN(Value6), MAX(Value6) \"\n\t\t\t\t\t\t\t\"FROM MultiMeter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\t\tbool bHaveDeliverd = false;\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\t\tunsigned long long total_min_usage_1 = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_1 = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_usage_2 = std::strtoull(sd[4].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_usage_2 = std::strtoull(sd[5].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_usage;\n\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_1 = std::strtoull(sd[2].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_1 = std::strtoull(sd[3].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_min_deliv_2 = std::strtoull(sd[6].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max_deliv_2 = std::strtoull(sd[7].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real_deliv;\n\n\t\t\t\t\t\t\ttotal_real_usage = (total_max_usage_1 + total_max_usage_2) - (total_min_usage_1 + total_min_usage_2);\n\t\t\t\t\t\t\ttotal_real_deliv = (total_max_deliv_1 + total_max_deliv_2) - (total_min_deliv_1 + total_min_deliv_2);\n\n\t\t\t\t\t\t\tif (total_real_deliv != 0)\n\t\t\t\t\t\t\t\tbHaveDeliverd = true;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_usage);\n\t\t\t\t\t\t\tstd::string szValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real_deliv);\n\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v2\"] = szTmp;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t\tif (bHaveDeliverd)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\troot[\"delivered\"] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!bIsManagedCounter)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\t\"SELECT MIN(Value), MAX(Value) FROM Meter WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q')\",\n\t\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\t\t\t\t\t\t\tunsigned long long total_min = std::strtoull(sd[0].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_max = std::strtoull(sd[1].c_str(), nullptr, 10);\n\t\t\t\t\t\t\tunsigned long long total_real;\n\n\t\t\t\t\t\t\ttotal_real = total_max - total_min;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%llu\", total_real);\n\n\t\t\t\t\t\t\tstd::string szValue = szTmp;\n\t\t\t\t\t\t\tswitch (metertype)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase MTYPE_ENERGY:\n\t\t\t\t\t\t\tcase MTYPE_ENERGY_GENERATED:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_GAS:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MTYPE_WATER:\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);\n\t\t\t\t\t\t\t\tszValue = szTmp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\t\troot[\"result\"][ii][\"v\"] = szValue;\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sensor == \"wind\") {\n\t\t\t\t\troot[\"status\"] = \"OK\";\n\t\t\t\t\troot[\"title\"] = \"Graph \" + sensor + \" \" + srange;\n\n\t\t\t\t\tint ii = 0;\n\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT Direction, Speed_Min, Speed_Max, Gust_Min,\"\n\t\t\t\t\t\t\" Gust_Max, Date \"\n\t\t\t\t\t\t\"FROM %s WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q'\"\n\t\t\t\t\t\t\" AND Date<='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tdbasetable.c_str(), idx, szDateStart.c_str(), szDateEnd.c_str());\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const auto & itt : result)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstd::vector<std::string> sd = itt;\n\n\t\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = sd[5].substr(0, 16);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"di\"] = sd[0];\n\n\t\t\t\t\t\t\tint intSpeed = atoi(sd[2].c_str());\n\t\t\t\t\t\t\tint intGust = atoi(sd[4].c_str());\n\t\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tii++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//add today (have to calculate it)\n\t\t\t\t\tresult = m_sql.safe_query(\n\t\t\t\t\t\t\"SELECT AVG(Direction), MIN(Speed), MAX(Speed), MIN(Gust), MAX(Gust) FROM Wind WHERE (DeviceRowID==%\" PRIu64 \" AND Date>='%q') ORDER BY Date ASC\",\n\t\t\t\t\t\tidx, szDateEnd.c_str());\n\t\t\t\t\tif (!result.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tstd::vector<std::string> sd = result[0];\n\n\t\t\t\t\t\troot[\"result\"][ii][\"d\"] = szDateEnd;\n\t\t\t\t\t\troot[\"result\"][ii][\"di\"] = sd[0];\n\n\t\t\t\t\t\tint intSpeed = atoi(sd[2].c_str());\n\t\t\t\t\t\tint intGust = atoi(sd[4].c_str());\n\t\t\t\t\t\tif (m_sql.m_windunit != WINDUNIT_Beaufort)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intSpeed) * m_sql.m_windscale);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%.1f\", float(intGust) * m_sql.m_windscale);\n\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat windspeedms = float(intSpeed)*0.1f;\n\t\t\t\t\t\t\tfloat windgustms = float(intGust)*0.1f;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windspeedms));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"sp\"] = szTmp;\n\t\t\t\t\t\t\tsprintf(szTmp, \"%d\", MStoBeaufort(windgustms));\n\t\t\t\t\t\t\troot[\"result\"][ii][\"gu\"] = szTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}//custom range\n\t\t}\n\n\t\t/**\n\t\t * Retrieve user session from store, without remote host.\n\t\t */\n\t\tconst WebEmStoredSession CWebServer::GetSession(const std::string & sessionId) {\n\t\t\t//_log.Log(LOG_STATUS, \"SessionStore : get...\");\n\t\t\tWebEmStoredSession session;\n\n\t\t\tif (sessionId.empty()) {\n\t\t\t\t_log.Log(LOG_ERROR, \"SessionStore : cannot get session without id.\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstd::vector<std::vector<std::string> > result;\n\t\t\t\tresult = m_sql.safe_query(\"SELECT SessionID, Username, AuthToken, ExpirationDate FROM UserSessions WHERE SessionID = '%q'\",\n\t\t\t\t\tsessionId.c_str());\n\t\t\t\tif (!result.empty()) {\n\t\t\t\t\tsession.id = result[0][0].c_str();\n\t\t\t\t\tsession.username = base64_decode(result[0][1]);\n\t\t\t\t\tsession.auth_token = result[0][2].c_str();\n\n\t\t\t\t\tstd::string sExpirationDate = result[0][3];\n\t\t\t\t\ttime_t now = mytime(NULL);\n\t\t\t\t\tstruct tm tExpirationDate;\n\t\t\t\t\tParseSQLdatetime(session.expires, tExpirationDate, sExpirationDate);\n\t\t\t\t\t// RemoteHost is not used to restore the session\n\t\t\t\t\t// LastUpdate is not used to restore the session\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn session;\n\t\t}\n\n\t\t/**\n\t\t * Save user session.\n\t\t */\n\t\tvoid CWebServer::StoreSession(const WebEmStoredSession & session) {\n\t\t\t//_log.Log(LOG_STATUS, \"SessionStore : store...\");\n\t\t\tif (session.id.empty()) {\n\t\t\t\t_log.Log(LOG_ERROR, \"SessionStore : cannot store session without id.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tchar szExpires[30];\n\t\t\tstruct tm ltime;\n\t\t\tlocaltime_r(&session.expires, &ltime);\n\t\t\tstrftime(szExpires, sizeof(szExpires), \"%Y-%m-%d %H:%M:%S\", &ltime);\n\n\t\t\tstd::string remote_host = (session.remote_host.size() <= 50) ? // IPv4 : 15, IPv6 : (39|45)\n\t\t\t\tsession.remote_host : session.remote_host.substr(0, 50);\n\n\t\t\tWebEmStoredSession storedSession = GetSession(session.id);\n\t\t\tif (storedSession.id.empty()) {\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"INSERT INTO UserSessions (SessionID, Username, AuthToken, ExpirationDate, RemoteHost) VALUES ('%q', '%q', '%q', '%q', '%q')\",\n\t\t\t\t\tsession.id.c_str(),\n\t\t\t\t\tbase64_encode(session.username).c_str(),\n\t\t\t\t\tsession.auth_token.c_str(),\n\t\t\t\t\tszExpires,\n\t\t\t\t\tremote_host.c_str());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tm_sql.safe_query(\n\t\t\t\t\t\"UPDATE UserSessions set AuthToken = '%q', ExpirationDate = '%q', RemoteHost = '%q', LastUpdate = datetime('now', 'localtime') WHERE SessionID = '%q'\",\n\t\t\t\t\tsession.auth_token.c_str(),\n\t\t\t\t\tszExpires,\n\t\t\t\t\tremote_host.c_str(),\n\t\t\t\t\tsession.id.c_str());\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Remove user session and expired sessions.\n\t\t */\n\t\tvoid CWebServer::RemoveSession(const std::string & sessionId) {\n\t\t\t//_log.Log(LOG_STATUS, \"SessionStore : remove...\");\n\t\t\tif (sessionId.empty()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"DELETE FROM UserSessions WHERE SessionID = '%q'\",\n\t\t\t\tsessionId.c_str());\n\t\t}\n\n\t\t/**\n\t\t * Remove all expired user sessions.\n\t\t */\n\t\tvoid CWebServer::CleanSessions() {\n\t\t\t//_log.Log(LOG_STATUS, \"SessionStore : clean...\");\n\t\t\tm_sql.safe_query(\n\t\t\t\t\"DELETE FROM UserSessions WHERE ExpirationDate < datetime('now', 'localtime')\");\n\t\t}\n\n\t\t/**\n\t\t * Delete all user's session, except the session used to modify the username or password.\n\t\t * username must have been hashed\n\t\t *\n\t\t * Note : on the WebUserName modification, this method will not delete the session, but the session will be deleted anyway\n\t\t * because the username will be unknown (see cWebemRequestHandler::checkAuthToken).\n\t\t */\n\t\tvoid CWebServer::RemoveUsersSessions(const std::string& username, const WebEmSession & exceptSession) {\n\t\t\tm_sql.safe_query(\"DELETE FROM UserSessions WHERE (Username=='%q') and (SessionID!='%q')\", username.c_str(), exceptSession.id.c_str());\n\t\t}\n\n\t} //server\n}//http\n"], "filenames": ["main/WebServer.cpp"], "buggy_code_start_loc": [10775], "buggy_code_end_loc": [10776], "fixing_code_start_loc": [10775], "fixing_code_end_loc": [10776], "type": "CWE-89", "message": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.", "other": {"cve": {"id": "CVE-2019-10664", "sourceIdentifier": "cve@mitre.org", "published": "2019-03-31T14:29:00.207", "lastModified": "2019-05-03T11:51:55.697", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp."}, {"lang": "es", "value": "Domoticz, en versiones anteriores a la 4.10578, permite una inyecci\u00f3n SQL mediante el parametro idx en CWebServer::GetFloorplanImage en WebServer.cpp."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:domoticz:domoticz:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.10578", "matchCriteriaId": "A2720B34-891F-4516-AEB9-175C04EDFBEF"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/152678/Domoticz-4.10577-Unauthenticated-Remote-Command-Execution.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/46773/", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00"}}