{"buggy_code": ["/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nimport SearchInput from \"../SearchTokenizer/SearchInput.js\";\n\n/* global sortable */\n/* global glpi_toast_error */\n\n/**\n * Kanban rights structure\n * @since 10.0.0\n */\nclass GLPIKanbanRights {\n    constructor(rights) {\n        /**\n       * If true, then a button will be added to each column to allow new items to be added.\n       * When an item is added, a request is made via AJAX to create the item in the DB.\n       * Permissions are re-checked server-side during this request.\n       * Users will still be limited by the {@link create_card_limited_columns} right both client-side and server-side.\n       * @since 9.5.0\n       * @since 10.0.0 Moved to new rights class\n       * @type {boolean}\n       */\n        this.create_item = rights['create_item'] || false;\n\n        /**\n       * If true, then a button will be added to each card to allow deleting them and the underlying item directly from the kanban.\n       * When a card is deleted, a request is made via AJAX to delete the item in the DB.\n       * Permissions are re-checked server-side during this request.\n       * @since 10.0.0\n       * @type {boolean}\n       */\n        this.delete_item = rights['delete_item'] || false;\n\n        /**\n       * If true, then a button will be added to the add column form that lets the user create a new column.\n       * For Projects as an example, it would create a new project state.\n       * Permissions are re-checked server-side during this request.\n       * @since 9.5.0\n       * @since 10.0.0 Moved to new rights class\n       * @type {boolean}\n       */\n        this.create_column = rights['create_column'] || false;\n\n        /**\n       * Global permission for being able to modify the Kanban state/view.\n       * This includes the order of cards in the columns.\n       * @since 9.5.0\n       * @since 10.0.0 Moved to new rights class\n       * @type {boolean}\n       */\n        this.modify_view = rights['modify_view'] || false;\n\n        /**\n       * Limits the columns that the user can add cards to.\n       * By default, it is empty which allows cards to be added to all columns.\n       * If you don't want the user to add cards to any column, {@link rights.create_item} should be false.\n       * @since 9.5.0\n       * @since 10.0.0 Moved to new rights class\n       * @type {Array}\n       */\n        this.create_card_limited_columns = rights['create_card_limited_columns'] || [];\n\n        /**\n       * Global right for ordering cards.\n       * @since 9.5.0\n       * @since 10.0.0 Moved to new rights class\n       * @type {boolean}\n       */\n        this.order_card = rights['order_card'] || false;\n    }\n\n    /** @see this.create_item */\n    canCreateItem() {\n        return this.create_item;\n    }\n\n    /** @see this.delete_item */\n    canDeleteItem() {\n        return this.delete_item;\n    }\n\n    /** @see this.create_column */\n    canCreateColumn() {\n        return this.create_column;\n    }\n\n    /** @see this.modify_view */\n    canModifyView() {\n        return this.modify_view;\n    }\n\n    /** @see this.order_card */\n    canOrderCard() {\n        return this.order_card;\n    }\n\n    /** @see this.create_card_limited_columns */\n    getAllowedColumnsForNewCards() {\n        return this.create_card_limited_columns;\n    }\n}\n\n(function(){\n    window.GLPIKanban = function() {\n        /**\n       * Self-reference for property access in functions.\n       */\n        const self = this;\n\n        /**\n       * Selector for the parent Kanban element. This is specified in PHP and passed in the GLPIKanban constructor.\n       * @since 9.5.0\n       * @type {string}\n       */\n        this.element = \"\";\n\n        /**\n       * The original column state when the Kanban was built or refreshed.\n       * It should not be considered up to date beyond the initial build/refresh.\n       * @since 9.5.0\n       * @type {Array}\n       */\n        this.columns = {};\n\n        /**\n       * The AJAX directory.\n       * @since 9.5.0\n       * @type {string}\n       */\n        this.ajax_root = CFG_GLPI.root_doc + \"/ajax/\";\n\n        /**\n       * The maximum number of badges able to be shown before an overflow badge is added.\n       * @since 9.5.0\n       * @type {number}\n       */\n        this.max_team_images = 3;\n\n        /**\n       * The size in pixels for the team badges.\n       * @since 9.5.0\n       * @type {number}\n       */\n        this.team_image_size = 24;\n\n        /**\n       * The parent item for this Kanban. In the future, this may be null for personal/unrelated Kanbans. For now, it is expected to be defined.\n       * @since 9.5.0\n       * @type {Object|{itemtype: string, items_id: number}}\n       */\n        this.item = null;\n\n        /**\n       * Object of itemtypes that can be used as items in the Kanban. They should be in the format:\n       * itemtype => [\n       *    'name' => Localized itemtype name\n       *    'fields' => [\n       *       field_name   => [\n       *          'placeholder' => placeholder text (optional) = blank,\n       *          'type' => input type (optional) default = text,\n       *          'value' => value (optional) default = blank\n       *       ]\n       *    ]\n       * ]\n       * @since 9.5.0\n       * @type {Object}\n       */\n        this.supported_itemtypes = {};\n\n        /**\n       * User rights object\n       * @type {GLPIKanbanRights}\n       */\n        this.rights = new GLPIKanbanRights({});\n\n        /** @deprecated 10.0.0 Use rights.canCreateItem() instead */\n        this.allow_add_item = false;\n        /** @deprecated 10.0.0 Use rights.canDeleteItem() instead */\n        this.allow_delete_item = false;\n        /** @deprecated 10.0.0 Use rights.canCreateColumn() instead */\n        this.allow_create_column = false;\n        /** @deprecated 10.0.0 Use rights.canModifyView() instead */\n        this.allow_modify_view = false;\n        /** @deprecated 10.0.0 Use rights.getAllowedColumnsForNewCards() instead */\n        this.limit_addcard_columns = [];\n        /** @deprecated 10.0.0 Use rights.canOrderCard() instead */\n        this.allow_order_card = false;\n\n        /**\n       * Specifies if the user's current palette is a dark theme (darker for example).\n       * This will help determine the colors of the generated badges.\n       * @since 9.5.0\n       * @type {boolean}\n       */\n        this.dark_theme = false;\n\n        /**\n       * Name of the DB field used to specify columns and any extra fields needed to create the column (Ex: color).\n       * For example, Projects organize items by the state of the sub-Projects and sub-Tasks.\n       * Therefore, the column_field id is 'projectstates_id' with any additional fields needed being specified in extra_fields.\n       * @since 9.5.0\n       * @type {{id: string, extra_fields: Object}}\n       */\n        this.column_field = {id: '', extra_fields: {}};\n\n        /**\n       * Specifies if the Kanban's toolbar (switcher, filters, etc.) should be shown.\n       * This is true by default, but may be set to false if used on a fullscreen display for example.\n       * @since 9.5.0\n       * @type {boolean}\n       */\n        this.show_toolbar = true;\n\n        /**\n       * Filters being applied to the Kanban view.\n       * For now, only a simple/regex text filter is supported.\n       * This can be extended in the future to support more specific filters specified per itemtype.\n       * The name of internal filters like the text filter begin with an underscore.\n       * @since 9.5.0\n       * @type {{_text: string}}\n       */\n        this.filters = {\n            _text: ''\n        };\n\n        this.filter_tokenizer = null;\n\n        this.supported_filters = [];\n\n        /**\n       * The ID of the add column form.\n       * @since 9.5.0\n       * @type {string}\n       */\n        this.add_column_form = '';\n\n        /**\n       * The ID of the create column form.\n       * @since 9.5.0\n       * @type {string}\n       */\n        this.create_column_form = '';\n\n        /**\n       * Cache for images to reduce network requests and keep the same generated image between cards.\n       * @since 9.5.0\n       * @type {{Group: {}, User: {}, Supplier: {}, Contact: {}}}\n       */\n        this.team_badge_cache = {\n            User: {},\n            Group: {},\n            Supplier: {},\n            Contact: {}\n        };\n\n        /**\n       * If greater than zero, this specifies the amount of time in minutes between background refreshes,\n       * During a background refresh, items are added/moved/removed based on the data in the DB.\n       * It does not affect items in the process of being created.\n       * When sorting an item or column, the background refresh is paused to avoid a disruption or incorrect data.\n       * @since 9.5.0\n       * @type {number} Time in minutes between background refreshes.\n       */\n        this.background_refresh_interval = 0;\n\n        /**\n       * Internal refresh function\n       * @since 9.5.0\n       * @type {function}\n       * @private\n       */\n        let _backgroundRefresh = null;\n\n        /**\n       * Reference for the background refresh timer\n       * @type {null}\n       * @private\n       */\n        var _backgroundRefreshTimer = null;\n\n        /**\n       * The user's state object.\n       * This contains an up-to-date list of columns that should be shown, the order they are in, and if they are folded.\n       * @since 9.5.0\n       * @type {{\n       *    is_dirty: boolean,\n       *    state: {}|{order_index: {column: number, folded: boolean, cards: {Array}}}\n       * }}\n       * The is_dirty flag indicates if the state was changed and needs to be saved.\n       */\n        this.user_state = {is_dirty: false, state: {}};\n\n        /**\n       * The last time the Kanban was refreshed. This is used by the server to determine if the state needs to be sent to the client again.\n       * The state will only be sent if there was a change since this time.\n       * @type {?string}\n       */\n        this.last_refresh = null;\n\n        /**\n       * Global sorting active state.\n       * @since 9.5.0\n       * @type {boolean}\n       */\n        this.is_sorting_active = false;\n\n        this.sort_data = undefined;\n\n        this.mutation_observer = null;\n\n        this.display_initials = true;\n\n        /**\n       * Parse arguments and assign them to the object's properties\n       * @since 9.5.0\n       * @param {Object} args Object arguments\n       */\n        const initParams = function(args) {\n            const overridableParams = [\n                'element', 'max_team_images', 'team_image_size', 'item',\n                'supported_itemtypes', 'allow_add_item', 'allow_add_column', 'dark_theme', 'background_refresh_interval',\n                'column_field', 'allow_modify_view', 'limit_addcard_columns', 'allow_order_card', 'allow_create_column',\n                'allow_delete_item', 'supported_filters', 'display_initials'\n            ];\n            // Use CSS variable check for dark theme detection by default\n            self.dark_theme = $('html').css('--is-dark').trim() === 'true';\n\n            if (args.length === 1) {\n                for (let i = 0; i < overridableParams.length; i++) {\n                    const param = overridableParams[i];\n                    if (args[0][param] !== undefined) {\n                        self[param] = args[0][param];\n                    }\n                }\n            }\n            // Set rights\n            if (args[0]['rights'] !== undefined) {\n                self.rights = new GLPIKanbanRights(args[0]['rights']);\n            } else {\n            // 9.5.0 style compatibility\n                self.rights = new GLPIKanbanRights({\n                    create_item: self.allow_add_item,\n                    delete_item: self.allow_delete_item,\n                    create_column: self.allow_create_column,\n                    modify_view: self.allow_modify_view,\n                    create_card_limited_columns: self.limit_addcard_columns,\n                    order_card: self.allow_order_card\n                });\n            }\n            if (self.filters._text === undefined) {\n                self.filters._text = '';\n            }\n            /**\n          * @type {SearchInput}\n          */\n            self.filter_input = null;\n        };\n\n        const initMutationObserver = function() {\n            self.mutation_observer = new MutationObserver((records) => {\n                records.forEach(r => {\n                    if (r.addedNodes.length > 0) {\n                        if (self.is_sorting_active) {\n                            const sortable_placeholders = [...r.addedNodes].filter(n => n.classList.contains('sortable-placeholder'));\n                            if (sortable_placeholders.length > 0) {\n                                const placeholder = $(sortable_placeholders[0]);\n\n                                const current_column = placeholder.closest('.kanban-column').attr('id');\n\n                                // Compute current position based on list of sortable elements without current card.\n                                // Indeed, current card is still in DOM (but invisible), making placeholder index in DOM\n                                // not always corresponding to its position inside list of visible elements.\n                                const sortable_elements = $('#' + current_column + ' ul.kanban-body > li:not([id=\"' + self.sort_data.card_id + '\"])');\n                                const current_position = sortable_elements.index(placeholder.get(0));\n                                const card = $('#' + self.sort_data.card_id);\n                                card.data('current-pos', current_position);\n\n                                if (!self.rights.canOrderCard()) {\n                                    if (current_column === self.sort_data.source_column) {\n                                        if (current_position !== self.sort_data.source_position) {\n                                            placeholder.addClass('invalid-position');\n                                        } else {\n                                            placeholder.removeClass('invalid-position');\n                                        }\n                                    } else {\n                                        if (!$(placeholder).is(':last-child')) {\n                                            placeholder.addClass('invalid-position');\n                                        } else {\n                                            placeholder.removeClass('invalid-position');\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                });\n            });\n            self.mutation_observer.observe($(self.element).get(0), {\n                subtree: true,\n                childList: true\n            });\n        };\n\n        /**\n       * Build DOM elements and defer registering event listeners for when the document is ready.\n       * @since 9.5.0\n      **/\n        const build = function() {\n            $(self.element).trigger('kanban:pre_build');\n            initMutationObserver();\n            if (self.show_toolbar) {\n                buildToolbar();\n            }\n            const kanban_container = $(\"<div class='kanban-container'><div class='kanban-columns'></div></div>\").appendTo($(self.element));\n\n            // Dropdown for single additions\n            let add_itemtype_dropdown = \"<ul id='kanban-add-dropdown' class='kanban-dropdown dropdown-menu' style='display: none'>\";\n            Object.keys(self.supported_itemtypes).forEach(function(itemtype) {\n                add_itemtype_dropdown += \"<li id='kanban-add-\" + itemtype + \"' class='dropdown-item'><span>\" + self.supported_itemtypes[itemtype]['name'] + '</span></li>';\n            });\n            add_itemtype_dropdown += '</ul>';\n            kanban_container.append(add_itemtype_dropdown);\n\n            // Dropdown for overflow (Column)\n            let column_overflow_dropdown = \"<ul id='kanban-overflow-dropdown' class='kanban-dropdown  dropdown-menu' style='display: none'>\";\n            let add_itemtype_bulk_dropdown = \"<ul id='kanban-bulk-add-dropdown' class='dropdown-menu' style='display: none'>\";\n            Object.keys(self.supported_itemtypes).forEach(function(itemtype) {\n                add_itemtype_bulk_dropdown += \"<li id='kanban-bulk-add-\" + itemtype + \"' class='dropdown-item'><span>\" + self.supported_itemtypes[itemtype]['name'] + '</span></li>';\n            });\n            add_itemtype_bulk_dropdown += '</ul>';\n            const add_itemtype_bulk_link = '<a href=\"#\">' + '<i class=\"fa-fw fas fa-list\"></i>' + __('Bulk add') + '</a>';\n            column_overflow_dropdown += '<li class=\"dropdown-trigger dropdown-item\">' + add_itemtype_bulk_link + add_itemtype_bulk_dropdown + '</li>';\n            if (self.rights.canModifyView()) {\n                column_overflow_dropdown += \"<li class='kanban-remove dropdown-item' data-forbid-protected='true'><span>\"  + '<i class=\"fa-fw ti ti-trash\"></i>' + __('Delete') + \"</span></li>\";\n            }\n            column_overflow_dropdown += '</ul>';\n            kanban_container.append(column_overflow_dropdown);\n\n            // Dropdown for overflow (Card)\n\n            let card_overflow_dropdown = \"<ul id='kanban-item-overflow-dropdown' class='kanban-dropdown dropdown-menu' style='display: none'>\";\n            card_overflow_dropdown += `\n            <li class='kanban-item-goto dropdown-item'>\n               <a href=\"#\"><i class=\"fa-fw fas fa-share\"></i>${__('Go to')}</a>\n            </li>`;\n            if (self.rights.canDeleteItem()) {\n                card_overflow_dropdown += `\n                <li class='kanban-item-remove dropdown-item'>\n                   <span>\n                      <i class=\"fa-fw ti ti-trash\"></i>${__('Delete')}\n                   </span>\n                </li>`;\n            }\n            card_overflow_dropdown += '</ul>';\n            kanban_container.append(card_overflow_dropdown);\n\n            $('#kanban-overflow-dropdown li.dropdown-trigger > a').on(\"click\", function(e) {\n                $(this).parent().toggleClass('active');\n                $(this).parent().find('ul').toggle();\n                e.stopPropagation();\n                e.preventDefault();\n            });\n\n            $('#kanban-item-overflow-dropdown li.dropdown-trigger > a').on(\"click\", function(e) {\n                $(this).parent().toggleClass('active');\n                $(this).parent().find('ul').toggle();\n                e.stopPropagation();\n                e.preventDefault();\n            });\n\n            const on_refresh = function() {\n                if (Object.keys(self.user_state.state).length === 0) {\n                    // Save new state since none was stored for the user\n                    saveState(true, true);\n                }\n            };\n            self.refresh(on_refresh, null, null, true);\n\n            if (self.rights.canModifyView()) {\n                buildAddColumnForm();\n                if (self.rights.canCreateColumn()) {\n                    buildCreateColumnForm();\n                }\n            }\n            $(self.element).trigger('kanban:post_build');\n        };\n\n        const buildToolbar = function() {\n            $(self.element).trigger('kanban:pre_build_toolbar');\n            let toolbar = $(\"<div class='kanban-toolbar card flex-column flex-md-row'></div>\").appendTo(self.element);\n            $(\"<select name='kanban-board-switcher'></select>\").appendTo(toolbar);\n            let filter_input = $(`<input name='filter' class='form-control ms-1' type='text' placeholder=\"${__('Search or filter results')}\" autocomplete=\"off\"/>`).appendTo(toolbar);\n            if (self.rights.canModifyView()) {\n                let add_column = \"<buttom rome='button' class='kanban-add-column btn btn-outline-secondary ms-1'>\" + __('Add column') + \"</button>\";\n                toolbar.append(add_column);\n            }\n\n            self.filter_input = new SearchInput(filter_input, {\n                allowed_tags: self.supported_filters,\n                on_result_change: (e, result) => {\n                    self.filters = {\n                        _text: ''\n                    };\n                    self.filters._text = result.getFullPhrase();\n                    result.getTaggedTerms().forEach(t => self.filters[t.tag] = {\n                        term: t.term || '',\n                        exclusion: t.exclusion || false,\n                        prefix: t.prefix\n                    });\n                    self.filter();\n                },\n                tokenizer_options: {\n                    custom_prefixes: {\n                        '#': { // Regex prefix\n                            label: __('Regex'),\n                            token_color: '#00800080'\n                        }\n                    }\n                }\n            });\n            self.refreshSearchTokenizer();\n            self.filter();\n\n            $(self.element).trigger('kanban:post_build_toolbar');\n        };\n\n        const getColumnElementFromID = function(column_id) {\n            return '#column-' + self.column_field.id + '-' + column_id;\n        };\n\n        const getColumnIDFromElement = function(column_el) {\n            let element_id = [column_el];\n            if (typeof column_el !== 'string') {\n                element_id = $(column_el).prop('id').split('-');\n            } else {\n                element_id = column_el.split('-');\n            }\n            return element_id[element_id.length - 1];\n        };\n\n        const preserveNewItemForms = function() {\n            self.temp_forms = {};\n            let columns = $(self.element + \" .kanban-column\");\n            $.each(columns, function(i, column) {\n                let forms = $(column).find('.kanban-add-form');\n                if (forms.length > 0) {\n                    self.temp_forms[column.id] = [];\n                    $.each(forms, function(i2, form) {\n                        // Copy event handlers for element and child elements\n                        // Otherwise, the Add button will act like a normal submit button (not wanted)\n                        self.temp_forms[column.id].push($(form).clone(true, true));\n                    });\n                }\n            });\n        };\n\n        const restoreNewItemForms = function() {\n            if (self.temp_forms !== undefined && Object.keys(self.temp_forms).length > 0) {\n                $.each(self.temp_forms, function(column_id, forms) {\n                    let column = $('#' + column_id);\n                    if (column.length > 0) {\n                        let column_body = column.find('.kanban-body').first();\n                        $.each(forms, function(i, form) {\n                            $(form).appendTo(column_body);\n                        });\n                    }\n                });\n                self.temp_forms = {};\n            }\n        };\n\n        const preserveScrolls = function() {\n            self.temp_kanban_scroll = {\n                left: $(self.element + ' .kanban-container').scrollLeft(),\n                top: $(self.element + ' .kanban-container').scrollTop()\n            };\n            self.temp_column_scrolls = {};\n            let columns = $(self.element + \" .kanban-column\");\n            $.each(columns, function(i, column) {\n                let column_body = $(column).find('.kanban-body');\n                if (column_body.scrollTop() !== 0) {\n                    self.temp_column_scrolls[column.id] = column_body.scrollTop();\n                }\n            });\n        };\n\n        const restoreScrolls = function() {\n            if (self.temp_kanban_scroll !== null) {\n                $(self.element + ' .kanban-container').scrollLeft(self.temp_kanban_scroll.left);\n                $(self.element + ' .kanban-container').scrollTop(self.temp_kanban_scroll.top);\n            }\n            if (self.temp_column_scrolls !== null) {\n                $.each(self.temp_column_scrolls, function(column_id, scroll) {\n                    $('#' + column_id + ' .kanban-body').scrollTop(scroll);\n                });\n            }\n            self.temp_kanban_scroll = {};\n            self.temp_column_scrolls = {};\n        };\n\n        /**\n       * Clear all columns from the Kanban.\n       * Should be used in conjunction with {@link fillColumns()} to refresh the Kanban.\n       * @since 9.5.0\n       */\n        const clearColumns = function() {\n            preserveScrolls();\n            preserveNewItemForms();\n            $(self.element + \" .kanban-column\").remove();\n        };\n\n        /**\n       * Add all columns to the kanban. This does not clear the existing columns first.\n       *    If you are refreshing the Kanban, you should call {@link clearColumns()} first.\n       * @since 9.5.0\n       * @param {Object} columns_container JQuery Object of columns container. Not required.\n       *    If not specified, a new object will be created to reference this Kanban's columns container.\n       */\n        const fillColumns = function(columns_container) {\n            if (columns_container === undefined) {\n                columns_container = $(self.element + \" .kanban-container .kanban-columns\").first();\n            }\n\n            let already_processed = [];\n            $.each(self.user_state.state, function(position, column) {\n                if (column['visible'] !== false && column !== 'false') {\n                    if (self.columns[column['column']] !== undefined) {\n                        appendColumn(column['column'], self.columns[column['column']], columns_container);\n                    }\n                }\n                already_processed.push(column['column']);\n            });\n            $.each(self.columns, function(column_id, column) {\n                if (!already_processed.includes(column_id)) {\n                    if (column['id'] === undefined) {\n                        appendColumn(column_id, column, columns_container);\n                    }\n                }\n            });\n            restoreNewItemForms();\n            restoreScrolls();\n        };\n\n        /**\n       * Add all event listeners. At this point, all elements should have been added to the DOM.\n       * @since 9.5.0\n       */\n        const registerEventListeners = function() {\n            const add_dropdown = $('#kanban-add-dropdown');\n            const column_overflow_dropdown = $('#kanban-overflow-dropdown');\n            const card_overflow_dropdown = $('#kanban-item-overflow-dropdown');\n\n            refreshSortables();\n\n            if (Object.keys(self.supported_itemtypes).length > 0) {\n                $(self.element + ' .kanban-container').on('click', '.kanban-add', function(e) {\n                    const button = $(e.target);\n                    //Keep menu open if clicking on another add button\n                    const force_stay_visible = $(add_dropdown.data('trigger-button')).prop('id') !== button.prop('id');\n                    add_dropdown.css({\n                        position: 'fixed',\n                        left: button.offset().left,\n                        top: button.offset().top + button.outerHeight(true),\n                        display: (add_dropdown.css('display') === 'none' || force_stay_visible) ? 'inline' : 'none'\n                    });\n                    add_dropdown.data('trigger-button', button);\n                });\n            }\n            $(window).on('click', function(e) {\n                if (!$(e.target).hasClass('kanban-add')) {\n                    add_dropdown.css({\n                        display: 'none'\n                    });\n                }\n                if (self.rights.canModifyView()) {\n                    if (!$.contains($(self.add_column_form)[0], e.target)) {\n                        $(self.add_column_form).css({\n                            display: 'none'\n                        });\n                    }\n                    if (self.rights.canCreateColumn()) {\n                        if (!$.contains($(self.create_column_form)[0], e.target) && !$.contains($(self.add_column_form)[0], e.target)) {\n                            $(self.create_column_form).css({\n                                display: 'none'\n                            });\n                        }\n                    }\n                }\n            });\n\n            if (Object.keys(self.supported_itemtypes).length > 0) {\n                $(self.element + ' .kanban-container').on('click', '.kanban-column-overflow-actions', function(e) {\n                    const button = $(e.target);\n                    //Keep menu open if clicking on another add button\n                    const force_stay_visible = $(column_overflow_dropdown.data('trigger-button')).prop('id') !== button.prop('id');\n                    column_overflow_dropdown.css({\n                        position: 'fixed',\n                        left: button.offset().left,\n                        top: button.offset().top + button.outerHeight(true),\n                        display: (column_overflow_dropdown.css('display') === 'none' || force_stay_visible) ? 'inline' : 'none'\n                    });\n                    // Hide sub-menus by default when opening the overflow menu\n                    column_overflow_dropdown.find('ul').css({\n                        display: 'none'\n                    });\n                    column_overflow_dropdown.find('li').removeClass('active');\n                    // If this is a protected column, hide any items with data-forbid-protected='true'. Otherwise show them.\n                    const column = $(e.target.closest('.kanban-column'));\n                    if (column.hasClass('kanban-protected')) {\n                        column_overflow_dropdown.find('li[data-forbid-protected=\"true\"]').hide();\n                    } else {\n                        column_overflow_dropdown.find('li[data-forbid-protected=\"true\"]').show();\n                    }\n                    column_overflow_dropdown.data('trigger-button', button);\n                });\n            }\n            $(self.element + ' .kanban-container').on('click', '.kanban-item-overflow-actions', function(e) {\n                const button = $(e.target);\n                //Keep menu open if clicking on another add button\n                const force_stay_visible = $(card_overflow_dropdown.data('trigger-button')).prop('id') !== button.prop('id');\n                card_overflow_dropdown.css({\n                    position: 'fixed',\n                    left: button.offset().left,\n                    top: button.offset().top + button.outerHeight(true),\n                    display: (card_overflow_dropdown.css('display') === 'none' || force_stay_visible) ? 'inline' : 'none'\n                });\n                // Hide sub-menus by default when opening the overflow menu\n                card_overflow_dropdown.find('ul').css({\n                    display: 'none'\n                });\n                card_overflow_dropdown.find('li').removeClass('active');\n                card_overflow_dropdown.data('trigger-button', button);\n                const card = $(button.closest('.kanban-item'));\n\n                const form_link = card.data('form_link');\n                $(card_overflow_dropdown.find('.kanban-item-goto a')).attr('href', form_link);\n\n                let delete_action = $(card_overflow_dropdown.find('.kanban-item-remove'));\n                if (card.hasClass('deleted')) {\n                    delete_action.html('<span><i class=\"ti ti-trash\"></i>'+__('Purge')+'</span>');\n                } else {\n                    delete_action.html('<span><i class=\"ti ti-trash\"></i>'+__('Delete')+'</span>');\n                }\n            });\n\n            $(window).on('click', function(e) {\n                if (!$(e.target).hasClass('kanban-column-overflow-actions')) {\n                    column_overflow_dropdown.css({\n                        display: 'none'\n                    });\n                }\n                if (!$(e.target).hasClass('kanban-item-overflow-actions')) {\n                    card_overflow_dropdown.css({\n                        display: 'none'\n                    });\n                }\n                if (self.rights.canModifyView()) {\n                    if (!$.contains($(self.add_column_form)[0], e.target)) {\n                        $(self.add_column_form).css({\n                            display: 'none'\n                        });\n                    }\n                    if (self.rights.canCreateColumn()) {\n                        if (!$.contains($(self.create_column_form)[0], e.target) && !$.contains($(self.add_column_form)[0], e.target)) {\n                            $(self.create_column_form).css({\n                                display: 'none'\n                            });\n                        }\n                    }\n                }\n            });\n\n            $(self.element + ' .kanban-container').on('click', '.kanban-remove', function(e) {\n            // Get root dropdown, then the button that triggered it, and finally the column that the button is in\n                const column = $(e.target.closest('.kanban-dropdown')).data('trigger-button').closest('.kanban-column');\n                // Hide that column\n                hideColumn(getColumnIDFromElement(column));\n            });\n            $(self.element).on('click', '.item-details-panel .kanban-item-edit-team', (e) => {\n                self.showTeamModal($(e.target).closest('.item-details-panel').data('card'));\n            });\n            $(self.element + ' .kanban-container').on('click', '.kanban-item-remove', function(e) {\n            // Get root dropdown, then the button that triggered it, and finally the card that the button is in\n                const card = $(e.target.closest('.kanban-dropdown')).data('trigger-button').closest('.kanban-item').prop('id');\n                // Try to delete that card item\n                deleteCard(card, undefined, undefined);\n            });\n            $(self.element + ' .kanban-container').on('click', '.kanban-collapse-column', function(e) {\n                self.toggleCollapseColumn(e.target.closest('.kanban-column'));\n            });\n            $(self.element).on('click', '.kanban-add-column', function() {\n                refreshAddColumnForm();\n            });\n            $(self.add_column_form).on('input', \"input[name='column-name-filter']\", function() {\n                const filter_input = $(this);\n                $(self.add_column_form + ' li').hide();\n                $(self.add_column_form + ' li').filter(function() {\n                    return $(this).text().toLowerCase().includes(filter_input.val().toLowerCase());\n                }).show();\n            });\n            $(self.add_column_form).on('change', \"input[type='checkbox']\", function() {\n                const column_id = $(this).parent().data('list-id');\n                if (column_id !== undefined) {\n                    if ($(this).is(':checked')) {\n                        showColumn(column_id);\n                    } else {\n                        hideColumn(column_id);\n                    }\n                }\n            });\n            $(self.add_column_form).on('submit', 'form', function(e) {\n                e.preventDefault();\n            });\n            $(self.add_column_form).on('click', '.kanban-create-column', function() {\n                const toolbar = $(self.element + ' .kanban-toolbar');\n                $(self.add_column_form).css({\n                    display: 'none'\n                });\n                $(self.create_column_form).css({\n                    display: 'block',\n                    position: 'fixed',\n                    left: toolbar.offset().left + toolbar.outerWidth(true) - $(self.create_column_form).outerWidth(true),\n                    top: toolbar.offset().top + toolbar.outerHeight(true)\n                });\n            });\n            $(self.create_column_form).on('submit', 'form', function(e) {\n                e.preventDefault();\n\n                const toolbar = $(self.element + ' .kanban-toolbar');\n\n                $(self.create_column_form).css({\n                    display: 'none'\n                });\n                const name = $(self.create_column_form + \" input[name='name']\").val();\n                $(self.create_column_form + \" input[name='name']\").val(\"\");\n                const color = $(self.create_column_form + \" input[name='color']\").val();\n                createColumn(name, {color: color}, function() {\n                    // Refresh add column list\n                    refreshAddColumnForm();\n                    $(self.add_column_form).css({\n                        display: 'block',\n                        position: 'fixed',\n                        left: toolbar.offset().left + toolbar.outerWidth(true) - $(self.add_column_form).outerWidth(true),\n                        top: toolbar.offset().top + toolbar.outerHeight(true)\n                    });\n                });\n            });\n            $('#kanban-add-dropdown li').on('click', function(e) {\n                e.preventDefault();\n                const selection = $(this).closest('li');\n                // The add dropdown is a single-level dropdown, so the parent is the ul element\n                const dropdown = selection.parent();\n                // Get the button that triggered the dropdown and then get the column that it is a part of\n                // This is because the dropdown exists outside all columns and is not recreated each time it is opened\n                const column = $($(dropdown.data('trigger-button')).closest('.kanban-column'));\n                // kanban-add-ITEMTYPE (We want the ITEMTYPE token at position 2)\n                const itemtype = selection.prop('id').split('-')[2];\n                self.clearAddItemForms(column);\n                self.showAddItemForm(column, itemtype);\n                delayRefresh();\n            });\n            $('#kanban-bulk-add-dropdown li').on('click', function(e) {\n                e.preventDefault();\n                const selection = $(this).closest('li');\n                // Traverse all the way up to the top-level overflow dropdown\n                const dropdown = selection.closest('.kanban-dropdown');\n                // Get the button that triggered the dropdown and then get the column that it is a part of\n                // This is because the dropdown exists outside all columns and is not recreated each time it is opened\n                const column = $($(dropdown.data('trigger-button')).closest('.kanban-column'));\n                // kanban-bulk-add-ITEMTYPE (We want the ITEMTYPE token at position 3)\n                const itemtype = selection.prop('id').split('-')[3];\n\n                // Force-close the full dropdown\n                dropdown.css({'display': 'none'});\n\n                self.clearAddItemForms(column);\n                self.showBulkAddItemForm(column, itemtype);\n                delayRefresh();\n            });\n            const switcher = $(\"select[name='kanban-board-switcher']\").first();\n            $(self.element + ' .kanban-toolbar').on('select2:select', switcher, function(e) {\n                const items_id = e.params.data.id;\n                $.ajax({\n                    type: \"GET\",\n                    url: (self.ajax_root + \"kanban.php\"),\n                    data: {\n                        action: \"get_url\",\n                        itemtype: self.item.itemtype,\n                        items_id: items_id\n                    },\n                    success: function(url) {\n                        window.location = url;\n                    }\n                });\n            });\n\n            $(self.element).on('input', '.kanban-add-form input, .kanban-add-form textarea', function() {\n                delayRefresh();\n            });\n\n            if (!self.rights.canOrderCard()) {\n                $(self.element).on(\n                    'mouseenter',\n                    '.kanban-column',\n                    function () {\n                        if (self.is_sorting_active) {\n                            return; // Do not change readonly states if user is sorting elements\n                        }\n                        // If user cannot order cards, make items temporarily readonly except for current column.\n                        $(this).find('.kanban-body > li').removeClass('temporarily-readonly');\n                        $(this).siblings().find('.kanban-body > li').addClass('temporarily-readonly');\n                    }\n                );\n                $(self.element).on(\n                    'mouseleave',\n                    '.kanban-column',\n                    function () {\n                        if (self.is_sorting_active) {\n                            return; // Do not change readonly states if user is sorting elements\n                        }\n                        $(self.element).find('.kanban-body > li').removeClass('temporarily-readonly');\n                    }\n                );\n            }\n\n            $(self.element + ' .kanban-container').on('submit', '.kanban-add-form:not(.kanban-bulk-add-form)', function(e) {\n                e.preventDefault();\n                const form = $(e.target);\n                const data = {\n                    inputs: form.serialize(),\n                    itemtype: form.prop('id').split('_')[2],\n                    action: 'add_item'\n                };\n\n                $.ajax({\n                    method: 'POST',\n                    url: (self.ajax_root + \"kanban.php\"),\n                    data: data\n                }).done(function() {\n                    self.refresh();\n                });\n            });\n\n            $(self.element + ' .kanban-container').on('click', '.kanban-item .kanban-item-title', function(e) {\n                e.preventDefault();\n                const card = $(e.target).closest('.kanban-item');\n                self.showCardPanel(card);\n            });\n        };\n\n        const showModal = (content, data) => {\n            const modal = $('#kanban-modal');\n            modal.removeData();\n            modal.data(data);\n            modal.find('.modal-body').html(content);\n            modal.modal('show');\n        };\n\n        const hideModal = () => {\n            $('#kanban-modal').modal('hide');\n        };\n\n        /**\n       * (Re-)Create the list of columns that can be shown/hidden.\n       * This involves fetching the list of valid columns from the server.\n       * @since 9.5.0\n       */\n        const refreshAddColumnForm = function() {\n            let columns_used = [];\n            $(self.element + ' .kanban-columns .kanban-column').each(function() {\n                const column_id = this.id.split('-');\n                columns_used.push(column_id[column_id.length - 1]);\n            });\n            const column_dialog = $(self.add_column_form);\n            const toolbar = $(self.element + ' .kanban-toolbar');\n            $.ajax({\n                method: 'GET',\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"list_columns\",\n                    itemtype: self.item.itemtype,\n                    column_field: self.column_field.id\n                }\n            }).done(function(data) {\n                const form_content = $(self.add_column_form + \" .kanban-item-content\");\n                form_content.empty();\n                form_content.append(\"<input type='text' class='form-control' name='column-name-filter' placeholder='\" + __('Search') + \"'/>\");\n                let list = \"<ul class='kanban-columns-list'>\";\n                $.each(data, function(column_id, column) {\n                    let list_item = \"<li data-list-id='\"+column_id+\"'>\";\n                    if (columns_used.includes(column_id)) {\n                        list_item += \"<input type='checkbox' checked='true' class='form-check-input' />\";\n                    } else {\n                        list_item += \"<input type='checkbox' class='form-check-input' />\";\n                    }\n                    if (typeof column['color_class'] !== \"undefined\") {\n                        list_item += \"<span class='kanban-color-preview \"+column['color_class']+\"'></span>\";\n                    } else {\n                        list_item += \"<span class='kanban-color-preview' style='background-color: \"+column['header_color']+\"'></span>\";\n                    }\n                    list_item += column['name'] + \"</li>\";\n                    list += list_item;\n                });\n                list += \"</ul>\";\n                form_content.append(list);\n                form_content.append();\n\n                column_dialog.css({\n                    display: 'block',\n                    position: 'fixed',\n                    left: toolbar.offset().left + toolbar.outerWidth(true) - column_dialog.outerWidth(true),\n                    top: toolbar.offset().top + toolbar.outerHeight(true)\n                });\n            });\n        };\n\n        /**\n       * (Re-)Initialize JQuery sortable for all items and columns.\n       * This should be called every time a new column or item is added to the board.\n       * @since 9.5.0\n       */\n        const refreshSortables = function() {\n            $(self.element).trigger('kanban:refresh_sortables');\n            // Make sure all items in the columns can be sorted\n            const bodies = $(self.element + ' .kanban-body');\n            $.each(bodies, function(b) {\n                const body = $(b);\n                if (body.data('sortable')) {\n                    sortable(b, 'destroy');\n                }\n            });\n\n            sortable(self.element + ' .kanban-body', {\n                acceptFrom: '.kanban-body',\n                items: '.kanban-item:not(.readonly):not(.temporarily-readonly)',\n            });\n\n            $(self.element + ' .kanban-body').off('sortstart');\n            $(self.element + ' .kanban-body').on('sortstart', (e) => {\n                self.is_sorting_active = true;\n\n                const card = $(e.detail.item);\n                // Track the column and position the card was picked up from\n                const current_column = card.closest('.kanban-column').attr('id');\n                card.data('source-col', current_column);\n                card.data('source-pos', e.detail.origin.index);\n\n                self.sort_data = {\n                    card_id: card.attr('id'),\n                    source_column: current_column,\n                    source_position: e.detail.origin.index\n                };\n            });\n\n            $(self.element + ' .kanban-body').off('sortupdate');\n            $(self.element + ' .kanban-body').on('sortupdate', function(e) {\n                const card = e.detail.item;\n                if (this === $(card).parent()[0]) {\n                    return self.onKanbanCardSort(e, this);\n                }\n            });\n\n            $(self.element + ' .kanban-body').off('sortstop');\n            $(self.element + ' .kanban-body').on('sortstop', (e) => {\n                self.is_sorting_active = false;\n                $(e.detail.item).closest('.kanban-column').trigger('mouseenter'); // force readonly states refresh\n            });\n\n            if (self.rights.canModifyView()) {\n            // Enable column sorting\n                sortable(self.element + ' .kanban-columns', {\n                    acceptFrom: self.element + ' .kanban-columns',\n                    appendTo: '.kanban-container',\n                    items: '.kanban-column:not(.kanban-protected)',\n                    handle: '.kanban-column-header',\n                    orientation: 'horizontal',\n                });\n                $(self.element + ' .kanban-columns .kanban-column:not(.kanban-protected) .kanban-column-header').addClass('grab');\n            }\n\n            $(self.element + ' .kanban-columns').off('sortstop');\n            $(self.element + ' .kanban-columns').on('sortstop', (e) => {\n                const column = e.detail.item;\n                updateColumnPosition(getColumnIDFromElement(column), $(column).index());\n            });\n        };\n\n        /**\n       * Construct and return the toolbar HTML for a specified column.\n       * @since 9.5.0\n       * @param {Object} column Column object that this toolbar will be made for.\n       * @returns {string} HTML coded for the toolbar.\n       */\n        const getColumnToolbarElement = function(column) {\n            let toolbar_el = \"<span class='kanban-column-toolbar'>\";\n            const column_id = parseInt(getColumnIDFromElement(column['id']));\n            if (self.rights.canCreateItem() && (self.rights.getAllowedColumnsForNewCards().length === 0 || self.rights.getAllowedColumnsForNewCards().includes(column_id))) {\n                toolbar_el += \"<i id='kanban_add_\" + column['id'] + \"' class='kanban-add btn btn-sm btn-ghost-secondary fas fa-plus' title='\" + __('Add') + \"'></i>\";\n                toolbar_el += \"<i id='kanban_column_overflow_actions_\" + column['id'] +\"' class='kanban-column-overflow-actions btn btn-sm btn-ghost-secondary fas fa-ellipsis-h' title='\" + __('More') + \"'></i>\";\n            }\n            toolbar_el += \"</span>\";\n            return toolbar_el;\n        };\n\n        /**\n       * Hide all columns that don't have a card in them.\n       * @since 9.5.0\n      **/\n        this.hideEmpty = function() {\n            const bodies = $(\".kanban-body\");\n            bodies.each(function(index, item) {\n                if (item.childElementCount === 0) {\n                    item.parentElement.style.display = \"none\";\n                }\n            });\n        };\n\n        /**\n       * Show all columns that don't have a card in them.\n       * @since 9.5.0\n      **/\n        this.showEmpty = function() {\n            const columns = $(\".kanban-column\");\n            columns.each(function(index, item) {\n                item.style.display = \"block\";\n            });\n        };\n\n        /**\n       * Callback function for when a kanban item is moved.\n       * @since 9.5.0\n       * @param {Object}  e      Event.\n       * @param {Element} sortable Sortable object\n       * @returns {Boolean}       Returns false if the sort was cancelled.\n      **/\n        this.onKanbanCardSort = function(e, sortable) {\n            const target = sortable.parentElement;\n            const source = $(e.detail.origin.container);\n            const card = $(e.detail.item);\n            const el_params = card.attr('id').split('-');\n            const target_params = $(target).attr('id').split('-');\n            const column_id = target_params[target_params.length - 1];\n\n            if (el_params.length === 2 && source !== null && !(!self.rights.canOrderCard() && source.length === 0)) {\n                $.ajax({\n                    type: \"POST\",\n                    url: (self.ajax_root + \"kanban.php\"),\n                    data: {\n                        action: \"update\",\n                        itemtype: el_params[0],\n                        items_id: el_params[1],\n                        column_field: self.column_field.id,\n                        column_value: column_id\n                    },\n                    error: function() {\n                        window.sortable(sortable, 'cancel');\n                        return false;\n                    },\n                    success: function() {\n                        let pos = card.data('current-pos');\n                        if (!self.rights.canOrderCard()) {\n                            card.appendTo($(target).find('.kanban-body').first());\n                            pos = card.index();\n                        }\n                        // Update counters. Always pass the column element instead of the kanban body (card container)\n                        self.updateColumnCount($(source).closest('.kanban-column'));\n                        self.updateColumnCount($(target).closest('.kanban-column'));\n                        card.removeData('source-col');\n                        updateCardPosition(card.attr('id'), target.id, pos);\n                        return true;\n                    }\n                });\n            } else {\n                window.sortable(sortable, 'cancel');\n                return false;\n            }\n        };\n\n        /**\n       * Send the new card position to the server.\n       * @since 9.5.0\n       * @param {string} card The ID of the card being moved.\n       * @param {string|number} column The ID or element of the column the card resides in.\n       * @param {number} position The position in the column that the card is at.\n       * @param {function} error Callback function called when the server reports an error.\n       * @param {function} success Callback function called when the server processes the request successfully.\n       */\n        const updateCardPosition = function(card, column, position, error, success) {\n            if (typeof column === 'string' && column.lastIndexOf('column', 0) === 0) {\n                column = getColumnIDFromElement(column);\n            }\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"move_item\",\n                    card: card,\n                    column: column,\n                    position: position,\n                    kanban: self.item\n                },\n                error: function() {\n                    if (error) {\n                        error();\n                    }\n                },\n                success: function() {\n                    if (success) {\n                        success();\n                        $('#'+card).trigger('kanban:card_move');\n                    }\n                }\n            });\n        };\n\n        /**\n       * Delete a card\n       * @since 10.0.0\n       * @param {string} card The ID of the card being deleted.\n       * @param {function} error Callback function called when the server reports an error.\n       * @param {function} success Callback function called when the server processes the request successfully.\n       */\n        const deleteCard = function(card, error, success) {\n            const [itemtype, items_id] = card.split('-', 2);\n            const card_obj = $('#'+card);\n            const force = card_obj.hasClass('deleted');\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"delete_item\",\n                    itemtype: itemtype,\n                    items_id: items_id,\n                    force: force ? 1 : 0\n                },\n                error: function() {\n                    if (error) {\n                        error();\n                    }\n                },\n                success: function() {\n                    const column = card_obj.closest('.kanban-column');\n                    card_obj.remove();\n                    self.updateColumnCount(column);\n                    if (success) {\n                        success();\n                        $('#'+card).trigger('kanban:card_delete');\n                    }\n                }\n            });\n        };\n\n        /**\n       * Show the column and notify the server of the change.\n       * @since 9.5.0\n       * @param {number} column The ID of the column.\n       */\n        const showColumn = function(column) {\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"show_column\",\n                    column: column,\n                    kanban: self.item\n                },\n                complete: function() {\n                    $.each(self.user_state.state, function(i, c) {\n                        if (parseInt(c['column']) === parseInt(column)) {\n                            self.user_state.state[i]['visible'] = true;\n                            return false;\n                        }\n                    });\n                    loadColumn(column, false, true);\n                    $(self.element + \" .kanban-add-column-form li[data-list-id='\" + column + \"']\").prop('checked', true);\n                }\n            });\n        };\n\n        /**\n       * Hide the column and notify the server of the change.\n       * @since 9.5.0\n       * @param {number} column The ID of the column.\n       */\n        const hideColumn = function(column) {\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"hide_column\",\n                    column: column,\n                    kanban: self.item\n                },\n                complete: function() {\n                    $(getColumnElementFromID(column)).remove();\n                    $.each(self.user_state.state, function(i, c) {\n                        if (parseInt(c['column']) === parseInt(column)) {\n                            self.user_state.state[i]['visible'] = false;\n                            return false;\n                        }\n                    });\n                    $(self.element + \" .kanban-add-column-form li[data-list-id='\" + column + \"']\").prop('checked', false);\n                }\n            });\n        };\n\n        /**\n       * Notify the server that the column's position has changed.\n       * @since 9.5.0\n       * @param {number} column The ID of the column.\n       * @param {number} position The position of the column.\n       */\n        const updateColumnPosition = function(column, position) {\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"move_column\",\n                    column: column,\n                    position: position,\n                    kanban: self.item\n                }\n            });\n        };\n\n        /**\n       * Get or create team member badge\n       * @since 9.5.0\n       * @param {array} teammember\n       * @returns {string} HTML image or icon\n       * @see generateUserBadge()\n       * @see generateOtherBadge()\n      **/\n        const getTeamBadge = function(teammember) {\n            const itemtype = teammember[\"itemtype\"];\n            const items_id = teammember[\"id\"];\n\n            if (self.team_badge_cache[itemtype] === undefined ||\n                 self.team_badge_cache[itemtype][items_id] === undefined) {\n                if (itemtype === 'User') {\n                    let user_img = null;\n                    $.ajax({\n                        url: (self.ajax_root + \"getUserPicture.php\"),\n                        async: false,\n                        data: {\n                            users_id: [items_id],\n                            size: self.team_image_size,\n                        }\n                    }).done(function(data) {\n                        if (data[items_id] !== undefined) {\n                            user_img = data[items_id];\n                        } else {\n                            user_img = null;\n                        }\n                    });\n\n                    if (user_img) {\n                        self.team_badge_cache[itemtype][items_id] = \"<span>\" + user_img + \"</span>\";\n                    } else {\n                        self.team_badge_cache[itemtype][items_id] = generateUserBadge(teammember);\n                    }\n                } else {\n                    switch (itemtype) {\n                        case 'Group':\n                            self.team_badge_cache[itemtype][items_id] = generateOtherBadge(teammember, 'fa-users');\n                            break;\n                        case 'Supplier':\n                            self.team_badge_cache[itemtype][items_id] = generateOtherBadge(teammember, 'fa-briefcase');\n                            break;\n                        case 'Contact':\n                            self.team_badge_cache[itemtype][items_id] = generateOtherBadge(teammember, 'fa-user');\n                            break;\n                        default:\n                            self.team_badge_cache[itemtype][items_id] = generateOtherBadge(teammember, 'fa-user');\n                    }\n                }\n            }\n            return self.team_badge_cache[itemtype][items_id];\n        };\n\n        /**\n       * Attempt to get and cache user badges in a single AJAX request to reduce time wasted when using multiple requests.\n       * Most time spent on the request is latency, so it takes about the same amount of time for 1 or 50 users.\n       * If no image is returned from the server, a badge is generated based on the user's initials.\n       * @since 9.5.0\n       * @param {Object} options Object of options for this function. Supports:\n       *    trim_cache - boolean indicating if unused user images should be removed from the cache.\n       *       This is useful for refresh scenarios.\n       * @see generateUserBadge()\n      **/\n        const preloadBadgeCache = function(options) {\n            let users = [];\n            $.each(self.columns, function(column_id, column) {\n                if (column['items'] !== undefined) {\n                    $.each(column['items'], function(card_id, card) {\n                        if (card[\"_team\"] !== undefined) {\n                            Object.values(card[\"_team\"]).slice(0, self.max_team_images).forEach(function(teammember) {\n                                if (teammember['itemtype'] === 'User') {\n                                    if (self.team_badge_cache['User'][teammember['id']] === undefined) {\n                                        users[teammember['id']] = teammember;\n                                    }\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n            if (users.length === 0) {\n                return;\n            }\n            $.ajax({\n                url: (self.ajax_root + \"getUserPicture.php\"),\n                async: false,\n                data: {\n                    users_id: Object.keys(users),\n                    size: self.team_image_size\n                }\n            }).done(function(data) {\n                Object.keys(users).forEach(function(user_id) {\n                    const teammember = users[user_id];\n                    if (data[user_id] !== undefined) {\n                        self.team_badge_cache['User'][user_id] = \"<span>\" + data[user_id] + \"</span>\";\n                    } else {\n                        self.team_badge_cache['User'][user_id] = generateUserBadge(teammember);\n                    }\n                });\n                if (options !== undefined && options['trim_cache'] !== undefined) {\n                    let cached_colors = JSON.parse(window.sessionStorage.getItem('badge_colors'));\n                    Object.keys(self.team_badge_cache['User']).forEach(function(user_id) {\n                        if (users[user_id] === undefined) {\n                            delete self.team_badge_cache['User'][user_id];\n                            delete cached_colors['User'][user_id];\n                        }\n                    });\n                    window.sessionStorage.setItem('badge_colors', JSON.stringify(cached_colors));\n                }\n            });\n        };\n\n        /**\n       * Convert the given H, S, L values into a color hex code (with prepended hash symbol).\n       * @param {number} h Hue\n       * @param {number} s Saturation\n       * @param {number} l Lightness\n       * @returns {string} Hex code color value\n       */\n        const hslToHexColor = function(h, s, l) {\n            let r, g, b;\n\n            if (s === 0) {\n                r = g = b = l;\n            } else {\n                const hue2rgb = function hue2rgb(p, q, t){\n                    if (t < 0)\n                        t += 1;\n                    if (t > 1)\n                        t -= 1;\n                    if (t < 1/6)\n                        return p + (q - p) * 6 * t;\n                    if (t < 1/2)\n                        return q;\n                    if (t < 2/3)\n                        return p + (q - p) * (2/3 - t) * 6;\n                    return p;\n                };\n\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                r = hue2rgb(p, q, h + 1/3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1/3);\n            }\n\n            r = ('0' + (r * 255).toString(16)).substr(-2);\n            g = ('0' + (g * 255).toString(16)).substr(-2);\n            b = ('0' + (b * 255).toString(16)).substr(-2);\n            return '#' + r + g + b;\n        };\n\n        /**\n       * Compute a new badge color or retrieve the cached color from session storage.\n       * @since 9.5.0\n       * @param {Object} teammember The teammember this badge is for.\n       * @returns {string} Hex code color value\n       */\n        const getBadgeColor = function(teammember) {\n            let cached_colors = JSON.parse(window.sessionStorage.getItem('badge_colors'));\n            const itemtype = teammember['itemtype'];\n            const baseColor = Math.random();\n            const lightness = (Math.random() * 10) + (self.dark_theme ? 25 : 70);\n            //var bg_color = \"hsl(\" + baseColor + \", 100%,\" + lightness + \"%,1)\";\n            let bg_color = hslToHexColor(baseColor, 1, lightness / 100);\n\n            if (cached_colors !== null && cached_colors[itemtype] !== null && cached_colors[itemtype][teammember['id']]) {\n                bg_color = cached_colors[itemtype][teammember['id']];\n            } else {\n                if (cached_colors === null) {\n                    cached_colors = {\n                        User: {},\n                        Group: {},\n                        Supplier: {},\n                        Contact: {},\n                        _dark_theme: self.dark_theme\n                    };\n                }\n                cached_colors[itemtype][teammember['id']] = bg_color;\n                window.sessionStorage.setItem('badge_colors', JSON.stringify(cached_colors));\n            }\n\n            return bg_color;\n        };\n\n        /**\n       * Generate a user image based on the user's initials.\n       * @since 9.5.0\n       * @param {string} teammember The teammember array/object that represents the user.\n       * @return {string} HTML image of the generated user badge.\n       */\n        const generateUserBadge = function(teammember) {\n            let initials = \"\";\n            if (teammember[\"firstname\"]) {\n                initials += teammember[\"firstname\"][0];\n            }\n            if (teammember[\"realname\"]) {\n                initials += teammember[\"realname\"][0];\n            }\n            // Force uppercase initals\n            initials = initials.toUpperCase();\n\n            if (!self.display_initials || initials.length === 0) {\n                return generateOtherBadge(teammember, 'fa-user');\n            }\n\n            const canvas = document.createElement('canvas');\n            canvas.width = self.team_image_size;\n            canvas.height = self.team_image_size;\n            const context = canvas.getContext('2d');\n            context.strokeStyle = \"#f1f1f1\";\n\n            context.fillStyle = getBadgeColor(teammember);\n            context.beginPath();\n            context.arc(self.team_image_size / 2, self.team_image_size / 2, self.team_image_size / 2, 0, 2 * Math.PI);\n            context.fill();\n            context.fillStyle = self.dark_theme ? 'white' : 'black';\n            context.textAlign = 'center';\n            context.font = 'bold ' + (self.team_image_size / 2) + 'px sans-serif';\n            context.textBaseline = 'middle';\n            context.fillText(initials, self.team_image_size / 2, self.team_image_size / 2);\n            const src = canvas.toDataURL(\"image/png\");\n            return \"<span><img src='\" + src + \"' title='\" + teammember['name'] + \"'/></span>\";\n        };\n\n        /**\n       * Generate team member icon based on its name and a FontAwesome icon.\n       * @since 9.5.0\n       * @param {Object} teammember The team member data.\n       * @param {string} icon FontAwesome icon to use for this badge.\n       * @returns {string} HTML icon of the generated badge.\n       */\n        const generateOtherBadge = function(teammember, icon) {\n            const bg_color = getBadgeColor(teammember);\n\n            return `\n            <span class='fa-stack fa-lg' style='font-size: ${(self.team_image_size / 2)}px'>\n                <i class='fas fa-circle fa-stack-2x' style=\"color: ${bg_color}\" title=\"${teammember['name']}\"></i>\n                <i class='fas ${icon} fa-stack-1x' title=\"${teammember['name']}\"></i>\n            </span>\n         `;\n        };\n\n        /**\n       * Generate a badge to indicate that 'overflow_count' number of team members are not shown on the Kanban item.\n       * @since 9.5.0\n       * @param {number} overflow_count Number of members without badges on the Kanban item.\n       * @returns {string} HTML image of the generated overflow badge.\n       */\n        const generateOverflowBadge = function(overflow_count) {\n            const canvas = document.createElement('canvas');\n            canvas.width = self.team_image_size;\n            canvas.height = self.team_image_size;\n            const context = canvas.getContext('2d');\n            context.strokeStyle = \"#f1f1f1\";\n\n            // Create fill color based on theme type\n            const lightness = (self.dark_theme ? 40 : 80);\n            context.fillStyle = \"hsl(255, 0%,\" + lightness + \"%,1)\";\n            context.beginPath();\n            context.arc(self.team_image_size / 2, self.team_image_size / 2, self.team_image_size / 2, 0, 2 * Math.PI);\n            context.fill();\n            context.fillStyle = self.dark_theme ? 'white' : 'black';\n            context.textAlign = 'center';\n            context.font = 'bold ' + (self.team_image_size / 2) + 'px sans-serif';\n            context.textBaseline = 'middle';\n            context.fillText(\"+\" + overflow_count, self.team_image_size / 2, self.team_image_size / 2);\n            const src = canvas.toDataURL(\"image/png\");\n            return \"<span><img src='\" + src + \"' title='\" + __('%d other team members').replace('%d', overflow_count) + \"'/></span>\";\n        };\n\n        /**\n       * Check if the provided color is more light or dark.\n       * This function converts the given hex value into HSL and checks the L value.\n       * @since 9.5.0\n       * @param hex Hex code of the color. It may or may not contain the beginning '#'.\n       * @returns {boolean} True if the color is more light.\n       */\n        const isLightColor = function(hex) {\n            const c = hex.startsWith('#') ? hex.substring(1) : hex;\n            const rgb = parseInt(c, 16);\n            const r = (rgb >> 16) & 0xff;\n            const g = (rgb >>  8) & 0xff;\n            const b = (rgb >>  0) & 0xff;\n            const lightness = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n            return lightness > 110;\n        };\n\n        /**\n       * Convert a CSS RGB or RGBA string to a hex string including the '#' character.\n       * @param {string} rgb The RGB or RGBA string\n       * @returns {string} The hex color string\n       */\n        const rgbToHex = function(rgb) {\n            const pattern = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+\\.?\\d*))?\\)$/;\n            const hex = rgb.match(pattern).slice(1).map((n, i) => (i === 3 ? Math.round(parseFloat(n) * 255) : parseFloat(n))\n                .toString(16).padStart(2, '0') // Convert to hex values\n                .replace('NaN', '') // Handle NaN values\n            ).join('');\n            return `#${hex}`;\n        };\n\n        /**\n       * Update the counter for the specified column.\n       * @since 9.5.0\n       * @param {string|Element|jQuery} column_el The column\n       */\n        this.updateColumnCount = function(column_el) {\n            if (!(column_el instanceof jQuery)) {\n                column_el = $(column_el);\n            }\n            const column_body = $(column_el).find('.kanban-body:first');\n            const counter = $(column_el).find('.kanban_nb:first');\n            // Get all visible kanban items. This ensures the count is correct when items are filtered out.\n            const items = column_body.find('li:not(.filtered-out)');\n            counter.text(items.length);\n        };\n\n        /**\n       * Remove all add item forms from the specified column.\n       * @since 9.5.0\n       * @param {string|Element|jQuery} column_el The column\n       */\n        this.clearAddItemForms = function(column_el) {\n            if (!(column_el instanceof jQuery)) {\n                column_el = $(column_el);\n            }\n            column_el.find('form').remove();\n        };\n\n        /**\n       * Add a new form to the Kanban column to add a new item of the specified itemtype.\n       * @since 9.5.0\n       * @param {string|Element|jQuery} column_el The column\n       * @param {string} itemtype The itemtype that is being added\n       */\n        this.showAddItemForm = function(column_el, itemtype) {\n            if (!(column_el instanceof jQuery)) {\n                column_el = $(column_el);\n            }\n\n            const uniqueID = Math.floor(Math.random() * 999999);\n            const formID = \"form_add_\" + itemtype + \"_\" + uniqueID;\n            let add_form = \"<form id='\" + formID + \"' class='kanban-add-form card kanban-form no-track'>\";\n            let form_header = \"<div class='kanban-item-header'>\";\n            form_header += `\n            <span class='kanban-item-title'>\n               <i class=\"${self.supported_itemtypes[itemtype]['icon']}\"></i>\n               ${self.supported_itemtypes[itemtype]['name']}\n            </span>`;\n            form_header += \"<i class='ti ti-x' title='Close' onclick='$(this).parent().parent().remove()'></i></div>\";\n            add_form += form_header;\n\n            add_form += \"<div class='kanban-item-content'>\";\n            $.each(self.supported_itemtypes[itemtype]['fields'], function(name, options) {\n                const input_type = options['type'] !== undefined ? options['type'] : 'text';\n                const value = options['value'] !== undefined ? options['value'] : '';\n\n                if (input_type.toLowerCase() === 'textarea') {\n                    add_form += \"<textarea class='form-control' name='\" + name + \"'\";\n                    if (options['placeholder'] !== undefined) {\n                        add_form += \" placeholder='\" + options['placeholder'] + \"'\";\n                    }\n                    if (value !== undefined) {\n                        add_form += \" value='\" + value + \"'\";\n                    }\n                    add_form += \"></textarea>\";\n                } else if (input_type.toLowerCase() === 'raw') {\n                    add_form += value;\n                } else {\n                    add_form += \"<input class='form-control' type='\" + input_type + \"' name='\" + name + \"'\";\n                    if (options['placeholder'] !== undefined) {\n                        add_form += \" placeholder='\" + options['placeholder'] + \"'\";\n                    }\n                    if (value !== undefined) {\n                        add_form += \" value='\" + value + \"'\";\n                    }\n                    add_form += \"/>\";\n                }\n            });\n            add_form += \"</div>\";\n\n            const column_id_elements = column_el.prop('id').split('-');\n            const column_value = column_id_elements[column_id_elements.length - 1];\n            add_form += \"<input type='hidden' name='\" + self.column_field.id + \"' value='\" + column_value + \"'/>\";\n            add_form += \"<input type='submit' value='\" + __('Add') + \"' name='add' class='btn btn-primary'/>\";\n            add_form += \"</form>\";\n            $(column_el.find('.kanban-body')[0]).append(add_form);\n            $('#' + formID).get(0).scrollIntoView(false);\n        };\n\n        /**\n       * Add a new form to the Kanban column to add multiple new items of the specified itemtype.\n       * @since 9.5.0\n       * @param {string|Element|jQuery} column_el The column\n       * @param {string} itemtype The itemtype that is being added\n       */\n        this.showBulkAddItemForm = function(column_el, itemtype) {\n            if (!(column_el instanceof jQuery)) {\n                column_el = $(column_el);\n            }\n\n            const uniqueID = Math.floor(Math.random() * 999999);\n            const formID = \"form_add_\" + itemtype + \"_\" + uniqueID;\n            let add_form = \"<form id='\" + formID + \"' class='kanban-add-form kanban-bulk-add-form kanban-form no-track'>\";\n\n            add_form += `\n            <div class='kanban-item-header'>\n                <span class='kanban-item-title'>\n                   <i class=\"${self.supported_itemtypes[itemtype]['icon']}\"></i>\n                   ${self.supported_itemtypes[itemtype]['name']}\n                </span>\n                <i class='ti ti-x' title='Close' onclick='$(this).parent().parent().remove()'></i>\n                <div>\n                    <span class=\"kanban-item-subtitle\">${__(\"One item per line\")}</span>\n                 </div>\n           </div>\n         `;\n\n            add_form += \"<div class='kanban-item-content'>\";\n            $.each(self.supported_itemtypes[itemtype]['fields'], function(name, options) {\n                const input_type = options['type'] !== undefined ? options['type'] : 'text';\n                const value = options['value'] !== undefined ? options['value'] : '';\n\n                // We want to include all hidden fields as they are usually mandatory (project ID)\n                if (input_type === 'hidden') {\n                    add_form += \"<input type='hidden' name='\" + name + \"'\";\n                    if (value !== undefined) {\n                        add_form += \" value='\" + value + \"'\";\n                    }\n                    add_form += \"/>\";\n                } else if (input_type.toLowerCase() === 'raw') {\n                    add_form += value;\n                }\n            });\n            add_form += \"<textarea name='bulk_item_list'></textarea>\";\n            add_form += \"</div>\";\n\n            const column_id_elements = column_el.prop('id').split('-');\n            const column_value = column_id_elements[column_id_elements.length - 1];\n            add_form += \"<input type='hidden' name='\" + self.column_field.id + \"' value='\" + column_value + \"'/>\";\n            add_form += \"<input type='submit' value='\" + __('Add') + \"' name='add' class='submit'/>\";\n            add_form += \"</form>\";\n            $(column_el.find('.kanban-body')[0]).append(add_form);\n            $('#' + formID).get(0).scrollIntoView(false);\n            $(\"#\" + formID).on('submit', function(e) {\n                e.preventDefault();\n                const form = $(e.target);\n                const data = {\n                    inputs: form.serialize(),\n                    itemtype: form.prop('id').split('_')[2],\n                    action: 'bulk_add_item'\n                };\n\n                $.ajax({\n                    method: 'POST',\n                    //async: false,\n                    url: (self.ajax_root + \"kanban.php\"),\n                    data: data\n                }).done(function() {\n                    $('#'+formID).remove();\n                    self.refresh();\n                });\n            });\n        };\n\n        /**\n       * Create the add column form and add it to the DOM.\n       * @since 9.5.0\n       */\n        const buildAddColumnForm = function() {\n            const uniqueID = Math.floor(Math.random() * 999999);\n            const formID = \"form_add_column_\" + uniqueID;\n            self.add_column_form = '#' + formID;\n            let add_form = `\n            <div id=\"${formID}\" class=\"kanban-form kanban-add-column-form dropdown-menu\" style=\"display: none\">\n                <form class='no-track'>\n                    <div class='kanban-item-header'>\n                        <span class='kanban-item-title'>${__('Add a column from existing status')}</span>\n                    </div>\n                    <div class='kanban-item-content'></div>\n         `;\n            if (self.rights.canCreateColumn()) {\n                add_form += `\n               <hr>${__('Or add a new status')}\n               <button role='button' class='btn btn-primary kanban-create-column d-block'>${__('Create status')}</button>\n            `;\n            }\n            add_form += \"</form></div>\";\n            $(self.element).prepend(add_form);\n        };\n\n        /**\n       * Create the create column form and add it to the DOM.\n       * @since 9.5.0\n       */\n        const buildCreateColumnForm = function() {\n            const uniqueID = Math.floor(Math.random() * 999999);\n            const formID = \"form_create_column_\" + uniqueID;\n            self.create_column_form = '#' + formID;\n            let create_form = `\n            <div id='${formID}' class='kanban-form kanban-create-column-form dropdown-menu' style='display: none'>\n                <form class='no-track'>\n                    <div class='kanban-item-header'>\n                        <span class='kanban-item-title'>${__('Create status')}</span>\n                    </div>\n                    <div class='kanban-item-content'>\n                    <input name='name' class='form-control'/>\n         `;\n            $.each(self.column_field.extra_fields, function(name, field) {\n                if (name === undefined) {\n                    return true;\n                }\n                let value = (field.value !== undefined) ? field.value : '';\n                if (field.type === undefined || field.type === 'text') {\n                    create_form += \"<input name='\" + name + \"' value='\" + value + \"'/>\";\n                } else if (field.type === 'color') {\n                    if (value.length === 0) {\n                        value = '#000000';\n                    }\n                    create_form += \"<input type='color' name='\" + name + \"' value='\" + value + \"'/>\";\n                }\n            });\n            create_form += \"</div>\";\n            create_form += \"<button type='submit' class='btn btn-primary'>\" + __('Create status') + \"</button>\";\n            create_form += \"</form></div>\";\n            $(self.element).prepend(create_form);\n        };\n\n        /**\n       * Delay the background refresh for a short amount of time.\n       * This should be called any time the user is in the middle of an action so that the refresh is not disruptive.\n       * @since 9.5.0\n       */\n        const delayRefresh = function() {\n            window.clearTimeout(_backgroundRefreshTimer);\n            _backgroundRefreshTimer = window.setTimeout(_backgroundRefresh, 10000);\n        };\n\n        /**\n       * Refresh the Kanban with the new set of columns.\n       *    This will clear all existing columns from the Kanban, and replace them with what is provided by the server.\n       * @since 9.5.0\n       * @param {function} success Callback for when the Kanban is successfully refreshed.\n       * @param {function} fail Callback for when the Kanban fails to be refreshed.\n       * @param {function} always Callback that is called regardless of the success of the refresh.\n       * @param {boolean} initial_load True if this is the first load. On the first load, the user state is not saved.\n       */\n        this.refresh = function(success, fail, always, initial_load) {\n            const _refresh = function() {\n                $.ajax({\n                    method: 'GET',\n                    //async: false,\n                    url: (self.ajax_root + \"kanban.php\"),\n                    data: {\n                        action: \"refresh\",\n                        itemtype: self.item.itemtype,\n                        items_id: self.item.items_id,\n                        column_field: self.column_field.id\n                    }\n                }).done(function(columns, textStatus, jqXHR) {\n                    preloadBadgeCache({\n                        trim_cache: true\n                    });\n                    clearColumns();\n                    self.columns = columns;\n                    fillColumns();\n                    // Re-filter kanban\n                    self.filter();\n                    if (success) {\n                        success(columns, textStatus, jqXHR);\n                        $(self.element).trigger('kanban:refresh');\n                    }\n                }).fail(function(jqXHR, textStatus, errorThrown) {\n                    if (fail) {\n                        fail(jqXHR, textStatus, errorThrown);\n                    }\n                }).always(function() {\n                    if (always) {\n                        always();\n                    }\n                });\n            };\n            if (initial_load === undefined || initial_load === true) {\n                _refresh();\n            } else {\n                saveState(false, false, null, null, function() {\n                    loadState(_refresh);\n                });\n            }\n\n        };\n\n        /**\n       * Append a column to the Kanban\n       * @param {number} column_id The ID of the column being added.\n       * @param {array} column The column data array.\n       * @param {string|Element|jQuery} columns_container The container that the columns are in.\n       *    If left null, a new JQueryobject is created with the selector \"self.element + ' .kanban-container .kanban-columns'\".\n       * @param {boolean} revalidate If true, all other columns are checked to see if they have an item in this new column.\n       *    If they do, the item is removed from that other column and the counter is updated.\n       *    This is useful if an item is changed in another tab or by another user to be in the new column after the original column was added.\n       */\n        const appendColumn = function(column_id, column, columns_container, revalidate) {\n            if (columns_container == null) {\n                columns_container = $(self.element + \" .kanban-container .kanban-columns\").first();\n            }\n            revalidate = revalidate !== undefined ? revalidate : false;\n\n            column['id'] = \"column-\" + self.column_field.id + '-' + column_id;\n            let collapse = '';\n            let position = -1;\n            $.each(self.user_state.state, function(order, s_column) {\n                if (parseInt(s_column['column']) === parseInt(column_id)) {\n                    position = order;\n                    if (s_column['folded'] === true || s_column['folded'] === 'true') {\n                        collapse = 'collapsed';\n                        return false;\n                    }\n                }\n            });\n            const _protected = column['_protected'] ? 'kanban-protected' : '';\n            const column_classes = \"kanban-column card \" + collapse + \" \" + _protected;\n\n            const column_top_color = (typeof column['header_color'] !== 'undefined') ? column['header_color'] : '';\n            const column_html = \"<div id='\" + column['id'] + \"' style='border-top-color: \"+column_top_color+\"' class='\"+column_classes+\"'></div>\";\n            let column_el = null;\n            if (position < 0) {\n                column_el = $(column_html).appendTo(columns_container);\n            } else {\n                const prev_column = $(columns_container).find('.kanban-column:nth-child(' + (position) + ')');\n                if (prev_column.length === 1) {\n                    column_el = $(column_html).insertAfter(prev_column);\n                } else {\n                    column_el = $(column_html).appendTo(columns_container);\n                }\n            }\n            const cards = column['items'] !== undefined ? column['items'] : [];\n\n            const column_header = $(\"<header class='kanban-column-header'></header>\");\n            const column_content = $(\"<div class='kanban-column-header-content'></div>\").appendTo(column_header);\n            const count = column['items'] !== undefined ? column['items'].length : 0;\n            const column_left = $(\"<span class=''></span>\").appendTo(column_content);\n            const column_right = $(\"<span class=''></span>\").appendTo(column_content);\n            if (self.rights.canModifyView()) {\n                $(column_left).append(\"<i class='fas fa-caret-right fa-lg kanban-collapse-column btn btn-sm btn-ghost-secondary' title='\" + __('Toggle collapse') + \"'/>\");\n            }\n            $(column_left).append(\"<span class='kanban-column-title badge \"+(column['color_class'] || '')+\"' style='background-color: \"+column['header_color']+\"; color: \"+column['header_fg_color']+\";'>\" + column['name'] + \"</span></span>\");\n            $(column_right).append(\"<span class='kanban_nb badge bg-secondary'>\"+count+\"</span>\");\n            $(column_right).append(getColumnToolbarElement(column));\n            $(column_el).prepend(column_header);\n            // Re-apply header text color to handle the actual background color now that the element is actually in the DOM.\n            const column_title = $('#'+column['id']).find('.kanban-column-title').eq(0);\n            let header_color = column_title.css('background-color') ? rgbToHex(column_title.css('background-color')) : '#ffffff';\n            const is_header_light = header_color ? isLightColor(header_color) : !self.dark_theme;\n            const header_text_class = is_header_light ? 'kanban-text-dark' : 'kanban-text-light';\n            column_title.removeClass('kanban-text-light kanban-text-dark');\n            column_title.addClass(header_text_class);\n\n            const column_body = $(\"<ul class='kanban-body card-body'></ul>\").appendTo(column_el);\n\n            column_el.attr('data-drop-only', column['drop_only']);\n\n            if (!column['drop_only']) {\n                let added = [];\n                $.each(self.user_state.state, function (i, c) {\n                    if (c['column'] === column_id) {\n                        $.each(c['cards'], function (i2, card) {\n                            $.each(cards, function (i3, card2) {\n                                if (card2['id'] === card) {\n                                    appendCard(column_el, card2);\n                                    added.push(card2['id']);\n                                    return false;\n                                }\n                            });\n                        });\n                    }\n                });\n\n                $.each(cards, function (card_id, card) {\n                    if (added.indexOf(card['id']) < 0) {\n                        appendCard(column_el, card, revalidate);\n                    }\n                });\n            } else {\n                $(`\n               <li class=\"position-relative\" style=\"width: 250px\">\n                  ${__('This column cannot support showing cards due to how many cards would be shown. You can still drag cards into this column.')}\n               </li>\n            `).appendTo(column_body);\n            }\n\n            refreshSortables();\n        };\n\n        /**\n       * Append the card in the specified column, handle duplicate cards in case the card moved, generate badges, and update column counts.\n       * @since 9.5.0\n       * @param {Element|string} column_el The column to add the card to.\n       * @param {Object} card The card to append.\n       * @param {boolean} revalidate Check for duplicate cards.\n       */\n        const appendCard = function(column_el, card, revalidate = false) {\n            if (revalidate) {\n                const existing = $('#' + card['id']);\n                if (existing !== undefined) {\n                    const existing_column = existing.closest('.kanban-column');\n                    existing.remove();\n                    self.updateColumnCount(existing_column);\n                }\n            }\n\n            const itemtype = card['id'].split('-')[0];\n            const col_body = $(column_el).find('.kanban-body').first();\n            const readonly = card['_readonly'] !== undefined && (card['_readonly'] === true || card['_readonly'] === 1);\n            let card_el = `\n            <li id=\"${card['id']}\" class=\"kanban-item card ${readonly ? 'readonly' : ''} ${card['is_deleted'] ? 'deleted' : ''}\">\n                <div class=\"kanban-item-header\">\n                    <span class=\"kanban-item-title\" title=\"${card['title_tooltip']}\">\n                    <i class=\"${self.supported_itemtypes[itemtype]['icon']}\"></i>\n                        ${card['title']}\n                    </span>\n                    <i class=\"kanban-item-overflow-actions fas fa-ellipsis-h btn btn-sm btn-ghost-secondary\"></i>\n                </div>\n                <div class=\"kanban-item-content\">${(card['content'] || '')}</div>\n                <div class=\"kanban-item-team\">\n         `;\n            const team_count = Object.keys(card['_team']).length;\n            if (card[\"_team\"] !== undefined && team_count > 0) {\n                $.each(Object.values(card[\"_team\"]).slice(0, self.max_team_images), function(teammember_id, teammember) {\n                    card_el += getTeamBadge(teammember);\n                });\n                if (card[\"_team\"].length > self.max_team_images) {\n                    card_el += generateOverflowBadge(team_count - self.max_team_images);\n                }\n            }\n            card_el += \"</div></li>\";\n            const card_obj = $(card_el).appendTo(col_body);\n            card_obj.data('form_link', card['_form_link'] || undefined);\n            if (card['_metadata']) {\n                $.each(card['_metadata'], (k, v) => {\n                    card_obj.data(k, v);\n                });\n            }\n            card_obj.data('_team', card['_team']);\n            self.updateColumnCount(column_el);\n        };\n\n        this.refreshSearchTokenizer = () => {\n            self.filter_input.tokenizer.clearAutocomplete();\n\n            // Refresh core tags autocomplete\n            self.filter_input.tokenizer.setAutocomplete('type', Object.keys(self.supported_itemtypes).map(k => `<i class=\"${self.supported_itemtypes[k].icon} me-1\"></i>` + k));\n            self.filter_input.tokenizer.setAutocomplete('milestone', [\"true\", \"false\"]);\n\n            $(self.element).trigger('kanban:refresh_tokenizer', self.filter_input.tokenizer);\n        };\n\n        /**\n       * Un-hide all filtered items.\n       * This does not reset the filters as it is called whenever the items are being re-filtered.\n       * To clear the filter, set self.filters to {_text: '*'} and call self.filter().\n       * @since 9.5.0\n       */\n        this.clearFiltered = function() {\n            $(self.element + ' .kanban-item').each(function(i, item) {\n                $(item).removeClass('filtered-out');\n            });\n        };\n\n        /**\n       * Applies the current filters.\n       * @since 9.5.0\n       */\n        this.filter = function() {\n            $(self.element).trigger('kanban:pre_filter', self.filters);\n            // Unhide all items in case they are no longer filtered\n            self.clearFiltered();\n\n            $(self.element + ' .kanban-item').each(function(i, item) {\n                const card = $(item);\n                let shown = true;\n                const title = card.find(\"span.kanban-item-title\").text().trim();\n\n                const filter_text = (filter_data, target, matchers = ['regex', 'includes']) => {\n                    if (filter_data.prefix === '#' && matchers.includes('regex')) {\n                        return filter_regex_match(filter_data, target);\n                    } else {\n                        if (matchers.includes('includes')) {\n                            filter_include(filter_data, target);\n                        }\n                        if (matchers.includes('equals')) {\n                            filter_equal(filter_data, target);\n                        }\n                    }\n                };\n\n                const filter_include = (filter_data, haystack) => {\n                    if ((!haystack.toLowerCase().includes(filter_data.term.toLowerCase())) !== filter_data.exclusion) {\n                        shown = false;\n                    }\n                };\n\n                const filter_equal = (filter_data, target) => {\n                    if ((target != filter_data.term) !== filter_data.exclusion) {\n                        shown = false;\n                    }\n                };\n\n                const filter_regex_match = (filter_data, target) => {\n                    try {\n                        if ((!target.trim().match(filter_data.term)) !== filter_data.exclusion) {\n                            shown = false;\n                        }\n                    } catch (e) {\n                        // Invalid regex\n                        glpi_toast_error(\n                            __('The regular expression you entered is invalid. Please check it and try again.'),\n                            __('Invalid regular expression')\n                        );\n                    }\n                };\n\n                const filter_teammember = (filter_data, itemtype) => {\n                    const team_members = card.data('_team');\n                    let has_matching_member = false;\n                    $.each(team_members, (i, m) => {\n                        if (m.itemtype === itemtype && (m.name.toLowerCase().includes(filter_data.term.toLowerCase()) !== filter_data.exclusion)) {\n                            has_matching_member = true;\n                        }\n                    });\n                    if (!has_matching_member) {\n                        shown = false;\n                    }\n                };\n\n                if (self.filters._text) {\n                    try {\n                        if (!title.match(new RegExp(self.filters._text, 'i'))) {\n                            shown = false;\n                        }\n                    } catch (err) {\n                        // Probably not a valid regular expression. Use simple contains matching.\n                        if (!title.toLowerCase().includes(self.filters._text.toLowerCase())) {\n                            shown = false;\n                        }\n                    }\n                }\n\n                if (self.filters.title !== undefined) {\n                    filter_text(self.filters.title, title);\n                }\n\n                if (self.filters.type !== undefined) {\n                    filter_text(self.filters.type, card.attr('id').split('-')[0], ['regex', 'equals']);\n                }\n\n                if (self.filters.milestone !== undefined) {\n                    self.filters.milestone.term = (self.filters.milestone.term == '0' || self.filters.milestone.term == 'false') ? 0 : 1;\n                    filter_equal(self.filters.milestone, card.data('is_milestone'));\n                }\n\n                if (self.filters.content !== undefined) {\n                    filter_text(self.filters.content, card.data('content'));\n                }\n\n                if (self.filters.team !== undefined) {\n                    const team_search = self.filters.team.term.toLowerCase();\n                    const team_members = card.data('_team');\n                    let has_matching_member = false;\n                    $.each(team_members, (i, m) => {\n                        if (m.name.toLowerCase().includes(team_search)) {\n                            has_matching_member = true;\n                        }\n                    });\n                    if (!has_matching_member) {\n                        shown = false;\n                    }\n                }\n\n                if (self.filters.user !== undefined) {\n                    filter_teammember(self.filters.user, 'User');\n                }\n\n                if (self.filters.group !== undefined) {\n                    filter_teammember(self.filters.group, 'Group');\n                }\n\n                if (self.filters.supplier !== undefined) {\n                    filter_teammember(self.filters.supplier, 'Supplier');\n                }\n\n                if (self.filters.contact !== undefined) {\n                    filter_teammember(self.filters.contact, 'Contact');\n                }\n\n                if (!shown) {\n                    card.addClass('filtered-out');\n                }\n            });\n\n            $(self.element).trigger('kanban:filter', {\n                filters: self.filters,\n                kanban_element: self.element\n            });\n\n            // Update column counters\n            $(self.element + ' .kanban-column').each(function(i, column) {\n                self.updateColumnCount(column);\n            });\n            $(self.element).trigger('kanban:post_filter', self.filters);\n        };\n\n        /**\n       * Toggle the collapsed state of the specified column.\n       * After toggling the collapse state, the server is notified of the change.\n       * @since 9.5.0\n       * @param {string|Element|jQuery} column_el The column element or object.\n       */\n        this.toggleCollapseColumn = function(column_el) {\n            if (!(column_el instanceof jQuery)) {\n                column_el = $(column_el);\n            }\n            column_el.toggleClass('collapsed');\n            const action = column_el.hasClass('collapsed') ? 'collapse_column' : 'expand_column';\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: action,\n                    column: getColumnIDFromElement(column_el),\n                    kanban: self.item\n                }\n            });\n        };\n\n        /**\n       * Load a column from the server and append it to the Kanban if it is visible.\n       * @since 9.5.0\n       * @param {number} column_id The ID of the column to load.\n       * @param {boolean} nosave If true, the column state is not saved after adding the new column.\n       *    This should be false when the state is being loaded, and new columns are being added as a part of that process.\n       *    The default behaviour is to save the column state after adding the column (if successful).\n    *    @param {boolean} revalidate If true, all other columns are checked to see if they have an item in this new column.\n       *    If they do, the item is removed from that other column and the counter is updated.\n       *    This is useful if an item is changed in another tab or by another user to be in the new column after the original column was added.\n       * @param {function} callback Function to call after the column is loaded (or fails to load).\n       */\n        const loadColumn = function(column_id, nosave, revalidate, callback = undefined) {\n            nosave = nosave !== undefined ? nosave : false;\n\n            let skip_load = false;\n            $.each(self.user_state.state, function(i, c) {\n                if (parseInt(c['column']) === parseInt(column_id)) {\n                    if (!c['visible']) {\n                        skip_load = true;\n                    }\n                    return false;\n                }\n            });\n            if (skip_load) {\n                if (callback) {\n                    callback();\n                }\n                return;\n            }\n\n            $.ajax({\n                method: 'GET',\n                url: (self.ajax_root + \"kanban.php\"),\n                async: false,\n                data: {\n                    action: \"get_column\",\n                    itemtype: self.item.itemtype,\n                    items_id: self.item.items_id,\n                    column_field: self.column_field.id,\n                    column_id: column_id\n                }\n            }).done(function(column) {\n                if (column !== undefined && Object.keys(column).length > 0) {\n                    self.columns[column_id] = column[column_id];\n                    appendColumn(column_id, self.columns[column_id], null, revalidate);\n                }\n            }).always(function() {\n                if (callback) {\n                    callback();\n                }\n            });\n        };\n\n        /**\n       * Create a new column and send it to the server.\n       * This will create a new item in the DB based on the item type used for columns.\n       * It does not automatically add it to the Kanban.\n       * @since 9.5.0\n       * @param {string} name The name of the new column.\n       * @param {Object} params Extra fields needed to create the column.\n       * @param {function} callback Function to call after the column is created (or fails to be created).\n       */\n        const createColumn = function(name, params, callback) {\n            if (name === undefined || name.length === 0) {\n                if (callback) {\n                    callback();\n                }\n                return;\n            }\n            $.ajax({\n                method: 'POST',\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"create_column\",\n                    itemtype: self.item.itemtype,\n                    items_id: self.item.items_id,\n                    column_field: self.column_field.id,\n                    column_name: name,\n                    params: params\n                }\n            }).always(function() {\n                if (callback) {\n                    callback();\n                }\n            });\n        };\n\n        /**\n       * Update the user state object, but do not send it to the server.\n       * This should only be done if there is no state stored on the server, so one needs to be built.\n       * Do NOT use this for changes to the state such as moving cards/columns!\n       * @since 9.5.0\n       */\n        const updateColumnState = function() {\n            const new_state = {\n                is_dirty: true,\n                state: {}\n            };\n            $(self.element + \" .kanban-column\").each(function(i, element) {\n                const column = $(element);\n                const element_id = column.prop('id').split('-');\n                const column_id = element_id[element_id.length - 1];\n                if (self.user_state.state[i] === undefined || column_id !== self.user_state.state[i]['column'] ||\n               self.user_state.state[i]['folded'] !== column.hasClass('collapsed')) {\n                    new_state.is_dirty = true;\n                }\n                new_state.state[i] = {\n                    column: column_id,\n                    folded: column.hasClass('collapsed'),\n                    cards: {}\n                };\n                $.each(column.find('.kanban-item'), function(i2, element2) {\n                    new_state.state[i]['cards'][i2] = $(element2).prop('id');\n                    if (self.user_state.state[i] !== undefined && self.user_state.state[i]['cards'] !== undefined && self.user_state.state[i]['cards'][i2] !== undefined  &&\n                  self.user_state.state[i]['cards'][i2] !== new_state.state[i]['cards'][i2]) {\n                        new_state.is_dirty = true;\n                    }\n                });\n            });\n            self.user_state = new_state;\n        };\n\n        this.showCardPanel = (card) => {\n            if (!card) {\n                $('.item-details-panel').remove();\n            }\n            const [itemtype, items_id] = card.prop('id').split('-');\n            $.ajax({\n                method: 'GET',\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    itemtype: itemtype,\n                    items_id: items_id,\n                    action: 'load_item_panel'\n                }\n            }).done((result) => {\n                $('.item-details-panel').remove();\n                $(self.element).append($(result));\n                $('.item-details-panel').data('card', card);\n                // Load badges\n                $('.item-details-panel ul.team-list li').each((i, l) => {\n                    l = $(l);\n                    const member_itemtype = l.attr('data-itemtype');\n                    const member_items_id = l.attr('data-items_id');\n                    let member_item = getTeamBadge({\n                        itemtype: member_itemtype,\n                        id: member_items_id,\n                        name: l.attr('data-name'),\n                        realname: l.attr('data-realname'),\n                        firstname: l.attr('data-firstname')\n                    });\n                    l.append(`\n                     <div class=\"member-details\">\n                        ${member_item}\n                        ${l.attr('data-name') || `${member_itemtype} (${member_items_id})`}\n                     </div>\n                     <button type=\"button\" name=\"delete\" class=\"btn btn-ghost-danger\">\n                        <i class=\"ti ti-x\" title=\"${__('Delete')}\"></i>\n                     </button>\n                  `);\n                });\n            });\n\n            $(self.element).on('click', '.item-details-panel ul.team-list button[name=\"delete\"]', (e) => {\n                const list_item = $(e.target).closest('li');\n                const member_itemtype = list_item.attr('data-itemtype');\n                const member_items_id = list_item.attr('data-items_id');\n                const panel = $(e.target).closest('.item-details-panel');\n                const itemtype = panel.attr('data-itemtype');\n                const items_id = panel.attr('data-items_id');\n                const role = list_item.closest('.list-group').attr('data-role');\n\n                if (itemtype && items_id) {\n                    removeTeamMember(itemtype, items_id, member_itemtype, member_items_id, role);\n                    list_item.remove();\n                }\n            });\n        };\n\n        this.showTeamModal = (card_el) => {\n            const [card_itemtype, card_items_id] = card_el.prop('id').split('-', 2);\n            let content = '';\n\n            const teammember_types_dropdown = $(`#kanban-teammember-item-dropdown-${card_itemtype}`).html();\n            content += `\n            ${teammember_types_dropdown}\n            <button type=\"button\" name=\"add\" class=\"btn btn-primary\">${_x('button', 'Add')}</button>\n         `;\n            const modal = $('#kanban-modal');\n            modal.on('click', 'button[name=\"add\"]', () => {\n                const itemtype = modal.find('select[name=\"itemtype\"]').val();\n                const items_id = modal.find('select[name=\"items_id\"]').val();\n                const role = modal.find('select[name=\"role\"]').val();\n\n                if (itemtype && items_id) {\n                    addTeamMember(card_itemtype, card_items_id, itemtype, items_id, role).done(() => {\n                        self.showCardPanel($(`#${card_itemtype}-${card_items_id}`));\n                    });\n                    hideModal();\n                }\n            });\n            modal.on('click', 'button[name=\"delete\"]', (e) => {\n                const list_item = $(e.target).closest('li');\n                const itemtype = list_item.attr('data-itemtype');\n                const items_id = list_item.attr('data-items-id');\n                const role = list_item.closest('ul').attr('data-role');\n\n                if (itemtype && items_id) {\n                    removeTeamMember(card_itemtype, card_items_id, itemtype, items_id, role).done(() => {\n                        self.showCardPanel($(`#${card_itemtype}-${card_items_id}`));\n                    });\n                    list_item.remove();\n                }\n            });\n            showModal(content, {\n                card_el: card_el\n            });\n        };\n\n        const addTeamMember = (itemtype, items_id, member_type, members_id, role) => {\n            return $.ajax({\n                method: 'POST',\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"add_teammember\",\n                    itemtype: itemtype,\n                    items_id: items_id,\n                    itemtype_teammember: member_type,\n                    items_id_teammember: members_id,\n                    role: role\n                }\n            }).done(() => {\n                self.refresh(null, null, function() {\n                    _backgroundRefreshTimer = window.setTimeout(_backgroundRefresh, self.background_refresh_interval * 60 * 1000);\n                }, false);\n            }).fail(() => {\n                glpi_toast_error(__('Failed to add team member'), __('Error'));\n            });\n        };\n\n        const removeTeamMember = (itemtype, items_id, member_type, members_id, role) => {\n            return $.ajax({\n                method: 'POST',\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"delete_teammember\",\n                    itemtype: itemtype,\n                    items_id: items_id,\n                    itemtype_teammember: member_type,\n                    items_id_teammember: members_id,\n                    role: role\n                }\n            }).done(() => {\n                self.refresh(null, null, function() {\n                    _backgroundRefreshTimer = window.setTimeout(_backgroundRefresh, self.background_refresh_interval * 60 * 1000);\n                }, false);\n            }).fail(() => {\n                glpi_toast_error(__('Failed to remove team member'), __('Error'));\n            });\n        };\n\n        /**\n       * Restore the Kanban state for the user from the DB if it exists.\n       * This restores the visible columns and their collapsed state.\n       * @since 9.5.0\n       */\n        const loadState = function(callback) {\n            $(self.element).trigger('kanban:pre_load_state');\n            $.ajax({\n                type: \"GET\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"load_column_state\",\n                    itemtype: self.item.itemtype,\n                    items_id: self.item.items_id,\n                    last_load: self.last_refresh\n                }\n            }).done(function(state) {\n                if (state['state'] === undefined || state['state'] === null || Object.keys(state['state']).length === 0) {\n                    if (callback) {\n                        callback(false);\n                    }\n                    return;\n                }\n                self.user_state = {\n                    is_dirty: false,\n                    state: state['state']\n                };\n\n                const indices = Object.keys(state['state']);\n                for (let i = 0; i < indices.length; i++) {\n                    const index = indices[i];\n                    const entry = state['state'][index];\n                    const element = $('#column-' + self.column_field.id + \"-\" + entry.column);\n                    if (element.length === 0) {\n                        loadColumn(entry.column, true, false);\n                    }\n                    $(self.element + ' .kanban-columns .kanban-column:nth-child(' + index + ')').after(element);\n                    if (entry.folded === 'true') {\n                        element.addClass('collapsed');\n                    }\n                }\n                self.last_refresh = state['timestamp'];\n\n                if (callback) {\n                    callback(true);\n                    $(self.element).trigger('kanban:post_load_state');\n                }\n            });\n        };\n\n        /**\n       * Saves the current state of the Kanban to the DB for the user.\n       * This saves the visible columns and their collapsed state.\n       * This should only be done if there is no state stored on the server, so one needs to be built.\n       * Do NOT use this for changes to the state such as moving cards/columns!\n       * @since 9.5.0\n       * @param {boolean} rebuild_state If true, the column state is recalculated before saving.\n       *    By default, this is false as updates are done as changes are made in most cases.\n       * @param {boolean} force_save If true, the user state is saved even if it has not changed.\n       * @param {function} success Callback for when the user state is successfully saved.\n       * @param {function} fail Callback for when the user state fails to be saved.\n       * @param {function} always Callback that is called regardless of the success of the save.\n       */\n        const saveState = function(rebuild_state, force_save, success, fail, always) {\n            $(self.element).trigger('kanban:pre_save_state');\n            rebuild_state = rebuild_state !== undefined ? rebuild_state : false;\n            if (!force_save && !self.user_state.is_dirty) {\n                if (always) {\n                    always();\n                }\n                return;\n            }\n            // Reload state in case it changed in another tab/window\n            if (rebuild_state) {\n            // Build state of the Kanban\n                updateColumnState();\n            }\n            if (self.user_state.state === undefined || self.user_state.state === null || Object.keys(self.user_state.state).length === 0) {\n                if (always) {\n                    always();\n                }\n                return;\n            }\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"save_column_state\",\n                    itemtype: self.item.itemtype,\n                    items_id: self.item.items_id,\n                    state: self.user_state.state\n                }\n            }).done(function(data, textStatus, jqXHR) {\n                self.user_state.is_dirty = false;\n                if (success) {\n                    success(data, textStatus, jqXHR);\n                    $(self.element).trigger('kanban:post_save_state');\n                }\n            }).fail(function(jqXHR, textStatus, errorThrown) {\n                if (fail) {\n                    fail(jqXHR, textStatus, errorThrown);\n                }\n            }).always(function() {\n                if (always) {\n                    always();\n                }\n            });\n        };\n\n        /**\n       * Initialize the background refresh mechanism.\n       * @since 9.5.0\n       */\n        const backgroundRefresh = function() {\n            if (self.background_refresh_interval <= 0) {\n                return;\n            }\n            _backgroundRefresh = function() {\n                const sorting = $('.sortable-placeholder');\n                // Check if the user is current sorting items\n                if (sorting.length > 0) {\n                    // Wait 10 seconds and try the background refresh again\n                    delayRefresh();\n                    return;\n                }\n                // Refresh and then schedule the next refresh (minutes)\n                self.refresh(null, null, function() {\n                    _backgroundRefreshTimer = window.setTimeout(_backgroundRefresh, self.background_refresh_interval * 60 * 1000);\n                }, false);\n            };\n            // Schedule initial background refresh (minutes)\n            _backgroundRefreshTimer = window.setTimeout(_backgroundRefresh, self.background_refresh_interval * 60 * 1000);\n        };\n\n        /**\n       * Initialize the Kanban by loading the user's column state, adding the needed elements to the DOM, and starting the background save and refresh.\n       * @since 9.5.0\n       */\n        this.init = function() {\n            $(self.element).data('js_class', self);\n            $(self.element).trigger('kanban:pre_init');\n            loadState(function() {\n                build();\n                $(document).ready(function() {\n                    $.ajax({\n                        type: 'GET',\n                        url: (self.ajax_root + 'kanban.php'),\n                        data: {\n                            action: 'get_switcher_dropdown',\n                            itemtype: self.item.itemtype,\n                            items_id: self.item.items_id\n                        },\n                        success: function($data) {\n                            const switcher = $(self.element + \" .kanban-toolbar select[name='kanban-board-switcher']\");\n                            switcher.replaceWith($data);\n                        }\n                    });\n                    registerEventListeners();\n                    backgroundRefresh();\n                });\n            });\n            $(self.element).trigger('kanban:post_init');\n        };\n\n        initParams(arguments);\n    };\n})();\n"], "fixing_code": ["/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nimport SearchInput from \"../SearchTokenizer/SearchInput.js\";\n\n/* global escapeMarkupText */\n/* global sortable */\n/* global glpi_toast_error */\n\n/**\n * Kanban rights structure\n * @since 10.0.0\n */\nclass GLPIKanbanRights {\n    constructor(rights) {\n        /**\n       * If true, then a button will be added to each column to allow new items to be added.\n       * When an item is added, a request is made via AJAX to create the item in the DB.\n       * Permissions are re-checked server-side during this request.\n       * Users will still be limited by the {@link create_card_limited_columns} right both client-side and server-side.\n       * @since 9.5.0\n       * @since 10.0.0 Moved to new rights class\n       * @type {boolean}\n       */\n        this.create_item = rights['create_item'] || false;\n\n        /**\n       * If true, then a button will be added to each card to allow deleting them and the underlying item directly from the kanban.\n       * When a card is deleted, a request is made via AJAX to delete the item in the DB.\n       * Permissions are re-checked server-side during this request.\n       * @since 10.0.0\n       * @type {boolean}\n       */\n        this.delete_item = rights['delete_item'] || false;\n\n        /**\n       * If true, then a button will be added to the add column form that lets the user create a new column.\n       * For Projects as an example, it would create a new project state.\n       * Permissions are re-checked server-side during this request.\n       * @since 9.5.0\n       * @since 10.0.0 Moved to new rights class\n       * @type {boolean}\n       */\n        this.create_column = rights['create_column'] || false;\n\n        /**\n       * Global permission for being able to modify the Kanban state/view.\n       * This includes the order of cards in the columns.\n       * @since 9.5.0\n       * @since 10.0.0 Moved to new rights class\n       * @type {boolean}\n       */\n        this.modify_view = rights['modify_view'] || false;\n\n        /**\n       * Limits the columns that the user can add cards to.\n       * By default, it is empty which allows cards to be added to all columns.\n       * If you don't want the user to add cards to any column, {@link rights.create_item} should be false.\n       * @since 9.5.0\n       * @since 10.0.0 Moved to new rights class\n       * @type {Array}\n       */\n        this.create_card_limited_columns = rights['create_card_limited_columns'] || [];\n\n        /**\n       * Global right for ordering cards.\n       * @since 9.5.0\n       * @since 10.0.0 Moved to new rights class\n       * @type {boolean}\n       */\n        this.order_card = rights['order_card'] || false;\n    }\n\n    /** @see this.create_item */\n    canCreateItem() {\n        return this.create_item;\n    }\n\n    /** @see this.delete_item */\n    canDeleteItem() {\n        return this.delete_item;\n    }\n\n    /** @see this.create_column */\n    canCreateColumn() {\n        return this.create_column;\n    }\n\n    /** @see this.modify_view */\n    canModifyView() {\n        return this.modify_view;\n    }\n\n    /** @see this.order_card */\n    canOrderCard() {\n        return this.order_card;\n    }\n\n    /** @see this.create_card_limited_columns */\n    getAllowedColumnsForNewCards() {\n        return this.create_card_limited_columns;\n    }\n}\n\n(function(){\n    window.GLPIKanban = function() {\n        /**\n       * Self-reference for property access in functions.\n       */\n        const self = this;\n\n        /**\n       * Selector for the parent Kanban element. This is specified in PHP and passed in the GLPIKanban constructor.\n       * @since 9.5.0\n       * @type {string}\n       */\n        this.element = \"\";\n\n        /**\n       * The original column state when the Kanban was built or refreshed.\n       * It should not be considered up to date beyond the initial build/refresh.\n       * @since 9.5.0\n       * @type {Array}\n       */\n        this.columns = {};\n\n        /**\n       * The AJAX directory.\n       * @since 9.5.0\n       * @type {string}\n       */\n        this.ajax_root = CFG_GLPI.root_doc + \"/ajax/\";\n\n        /**\n       * The maximum number of badges able to be shown before an overflow badge is added.\n       * @since 9.5.0\n       * @type {number}\n       */\n        this.max_team_images = 3;\n\n        /**\n       * The size in pixels for the team badges.\n       * @since 9.5.0\n       * @type {number}\n       */\n        this.team_image_size = 24;\n\n        /**\n       * The parent item for this Kanban. In the future, this may be null for personal/unrelated Kanbans. For now, it is expected to be defined.\n       * @since 9.5.0\n       * @type {Object|{itemtype: string, items_id: number}}\n       */\n        this.item = null;\n\n        /**\n       * Object of itemtypes that can be used as items in the Kanban. They should be in the format:\n       * itemtype => [\n       *    'name' => Localized itemtype name\n       *    'fields' => [\n       *       field_name   => [\n       *          'placeholder' => placeholder text (optional) = blank,\n       *          'type' => input type (optional) default = text,\n       *          'value' => value (optional) default = blank\n       *       ]\n       *    ]\n       * ]\n       * @since 9.5.0\n       * @type {Object}\n       */\n        this.supported_itemtypes = {};\n\n        /**\n       * User rights object\n       * @type {GLPIKanbanRights}\n       */\n        this.rights = new GLPIKanbanRights({});\n\n        /** @deprecated 10.0.0 Use rights.canCreateItem() instead */\n        this.allow_add_item = false;\n        /** @deprecated 10.0.0 Use rights.canDeleteItem() instead */\n        this.allow_delete_item = false;\n        /** @deprecated 10.0.0 Use rights.canCreateColumn() instead */\n        this.allow_create_column = false;\n        /** @deprecated 10.0.0 Use rights.canModifyView() instead */\n        this.allow_modify_view = false;\n        /** @deprecated 10.0.0 Use rights.getAllowedColumnsForNewCards() instead */\n        this.limit_addcard_columns = [];\n        /** @deprecated 10.0.0 Use rights.canOrderCard() instead */\n        this.allow_order_card = false;\n\n        /**\n       * Specifies if the user's current palette is a dark theme (darker for example).\n       * This will help determine the colors of the generated badges.\n       * @since 9.5.0\n       * @type {boolean}\n       */\n        this.dark_theme = false;\n\n        /**\n       * Name of the DB field used to specify columns and any extra fields needed to create the column (Ex: color).\n       * For example, Projects organize items by the state of the sub-Projects and sub-Tasks.\n       * Therefore, the column_field id is 'projectstates_id' with any additional fields needed being specified in extra_fields.\n       * @since 9.5.0\n       * @type {{id: string, extra_fields: Object}}\n       */\n        this.column_field = {id: '', extra_fields: {}};\n\n        /**\n       * Specifies if the Kanban's toolbar (switcher, filters, etc.) should be shown.\n       * This is true by default, but may be set to false if used on a fullscreen display for example.\n       * @since 9.5.0\n       * @type {boolean}\n       */\n        this.show_toolbar = true;\n\n        /**\n       * Filters being applied to the Kanban view.\n       * For now, only a simple/regex text filter is supported.\n       * This can be extended in the future to support more specific filters specified per itemtype.\n       * The name of internal filters like the text filter begin with an underscore.\n       * @since 9.5.0\n       * @type {{_text: string}}\n       */\n        this.filters = {\n            _text: ''\n        };\n\n        this.filter_tokenizer = null;\n\n        this.supported_filters = [];\n\n        /**\n       * The ID of the add column form.\n       * @since 9.5.0\n       * @type {string}\n       */\n        this.add_column_form = '';\n\n        /**\n       * The ID of the create column form.\n       * @since 9.5.0\n       * @type {string}\n       */\n        this.create_column_form = '';\n\n        /**\n       * Cache for images to reduce network requests and keep the same generated image between cards.\n       * @since 9.5.0\n       * @type {{Group: {}, User: {}, Supplier: {}, Contact: {}}}\n       */\n        this.team_badge_cache = {\n            User: {},\n            Group: {},\n            Supplier: {},\n            Contact: {}\n        };\n\n        /**\n       * If greater than zero, this specifies the amount of time in minutes between background refreshes,\n       * During a background refresh, items are added/moved/removed based on the data in the DB.\n       * It does not affect items in the process of being created.\n       * When sorting an item or column, the background refresh is paused to avoid a disruption or incorrect data.\n       * @since 9.5.0\n       * @type {number} Time in minutes between background refreshes.\n       */\n        this.background_refresh_interval = 0;\n\n        /**\n       * Internal refresh function\n       * @since 9.5.0\n       * @type {function}\n       * @private\n       */\n        let _backgroundRefresh = null;\n\n        /**\n       * Reference for the background refresh timer\n       * @type {null}\n       * @private\n       */\n        var _backgroundRefreshTimer = null;\n\n        /**\n       * The user's state object.\n       * This contains an up-to-date list of columns that should be shown, the order they are in, and if they are folded.\n       * @since 9.5.0\n       * @type {{\n       *    is_dirty: boolean,\n       *    state: {}|{order_index: {column: number, folded: boolean, cards: {Array}}}\n       * }}\n       * The is_dirty flag indicates if the state was changed and needs to be saved.\n       */\n        this.user_state = {is_dirty: false, state: {}};\n\n        /**\n       * The last time the Kanban was refreshed. This is used by the server to determine if the state needs to be sent to the client again.\n       * The state will only be sent if there was a change since this time.\n       * @type {?string}\n       */\n        this.last_refresh = null;\n\n        /**\n       * Global sorting active state.\n       * @since 9.5.0\n       * @type {boolean}\n       */\n        this.is_sorting_active = false;\n\n        this.sort_data = undefined;\n\n        this.mutation_observer = null;\n\n        this.display_initials = true;\n\n        /**\n       * Parse arguments and assign them to the object's properties\n       * @since 9.5.0\n       * @param {Object} args Object arguments\n       */\n        const initParams = function(args) {\n            const overridableParams = [\n                'element', 'max_team_images', 'team_image_size', 'item',\n                'supported_itemtypes', 'allow_add_item', 'allow_add_column', 'dark_theme', 'background_refresh_interval',\n                'column_field', 'allow_modify_view', 'limit_addcard_columns', 'allow_order_card', 'allow_create_column',\n                'allow_delete_item', 'supported_filters', 'display_initials'\n            ];\n            // Use CSS variable check for dark theme detection by default\n            self.dark_theme = $('html').css('--is-dark').trim() === 'true';\n\n            if (args.length === 1) {\n                for (let i = 0; i < overridableParams.length; i++) {\n                    const param = overridableParams[i];\n                    if (args[0][param] !== undefined) {\n                        self[param] = args[0][param];\n                    }\n                }\n            }\n            // Set rights\n            if (args[0]['rights'] !== undefined) {\n                self.rights = new GLPIKanbanRights(args[0]['rights']);\n            } else {\n            // 9.5.0 style compatibility\n                self.rights = new GLPIKanbanRights({\n                    create_item: self.allow_add_item,\n                    delete_item: self.allow_delete_item,\n                    create_column: self.allow_create_column,\n                    modify_view: self.allow_modify_view,\n                    create_card_limited_columns: self.limit_addcard_columns,\n                    order_card: self.allow_order_card\n                });\n            }\n            if (self.filters._text === undefined) {\n                self.filters._text = '';\n            }\n            /**\n          * @type {SearchInput}\n          */\n            self.filter_input = null;\n        };\n\n        const initMutationObserver = function() {\n            self.mutation_observer = new MutationObserver((records) => {\n                records.forEach(r => {\n                    if (r.addedNodes.length > 0) {\n                        if (self.is_sorting_active) {\n                            const sortable_placeholders = [...r.addedNodes].filter(n => n.classList.contains('sortable-placeholder'));\n                            if (sortable_placeholders.length > 0) {\n                                const placeholder = $(sortable_placeholders[0]);\n\n                                const current_column = placeholder.closest('.kanban-column').attr('id');\n\n                                // Compute current position based on list of sortable elements without current card.\n                                // Indeed, current card is still in DOM (but invisible), making placeholder index in DOM\n                                // not always corresponding to its position inside list of visible elements.\n                                const sortable_elements = $('#' + current_column + ' ul.kanban-body > li:not([id=\"' + self.sort_data.card_id + '\"])');\n                                const current_position = sortable_elements.index(placeholder.get(0));\n                                const card = $('#' + self.sort_data.card_id);\n                                card.data('current-pos', current_position);\n\n                                if (!self.rights.canOrderCard()) {\n                                    if (current_column === self.sort_data.source_column) {\n                                        if (current_position !== self.sort_data.source_position) {\n                                            placeholder.addClass('invalid-position');\n                                        } else {\n                                            placeholder.removeClass('invalid-position');\n                                        }\n                                    } else {\n                                        if (!$(placeholder).is(':last-child')) {\n                                            placeholder.addClass('invalid-position');\n                                        } else {\n                                            placeholder.removeClass('invalid-position');\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                });\n            });\n            self.mutation_observer.observe($(self.element).get(0), {\n                subtree: true,\n                childList: true\n            });\n        };\n\n        /**\n       * Build DOM elements and defer registering event listeners for when the document is ready.\n       * @since 9.5.0\n      **/\n        const build = function() {\n            $(self.element).trigger('kanban:pre_build');\n            initMutationObserver();\n            if (self.show_toolbar) {\n                buildToolbar();\n            }\n            const kanban_container = $(\"<div class='kanban-container'><div class='kanban-columns'></div></div>\").appendTo($(self.element));\n\n            // Dropdown for single additions\n            let add_itemtype_dropdown = \"<ul id='kanban-add-dropdown' class='kanban-dropdown dropdown-menu' style='display: none'>\";\n            Object.keys(self.supported_itemtypes).forEach(function(itemtype) {\n                add_itemtype_dropdown += \"<li id='kanban-add-\" + itemtype + \"' class='dropdown-item'><span>\" + self.supported_itemtypes[itemtype]['name'] + '</span></li>';\n            });\n            add_itemtype_dropdown += '</ul>';\n            kanban_container.append(add_itemtype_dropdown);\n\n            // Dropdown for overflow (Column)\n            let column_overflow_dropdown = \"<ul id='kanban-overflow-dropdown' class='kanban-dropdown  dropdown-menu' style='display: none'>\";\n            let add_itemtype_bulk_dropdown = \"<ul id='kanban-bulk-add-dropdown' class='dropdown-menu' style='display: none'>\";\n            Object.keys(self.supported_itemtypes).forEach(function(itemtype) {\n                add_itemtype_bulk_dropdown += \"<li id='kanban-bulk-add-\" + itemtype + \"' class='dropdown-item'><span>\" + self.supported_itemtypes[itemtype]['name'] + '</span></li>';\n            });\n            add_itemtype_bulk_dropdown += '</ul>';\n            const add_itemtype_bulk_link = '<a href=\"#\">' + '<i class=\"fa-fw fas fa-list\"></i>' + __('Bulk add') + '</a>';\n            column_overflow_dropdown += '<li class=\"dropdown-trigger dropdown-item\">' + add_itemtype_bulk_link + add_itemtype_bulk_dropdown + '</li>';\n            if (self.rights.canModifyView()) {\n                column_overflow_dropdown += \"<li class='kanban-remove dropdown-item' data-forbid-protected='true'><span>\"  + '<i class=\"fa-fw ti ti-trash\"></i>' + __('Delete') + \"</span></li>\";\n            }\n            column_overflow_dropdown += '</ul>';\n            kanban_container.append(column_overflow_dropdown);\n\n            // Dropdown for overflow (Card)\n\n            let card_overflow_dropdown = \"<ul id='kanban-item-overflow-dropdown' class='kanban-dropdown dropdown-menu' style='display: none'>\";\n            card_overflow_dropdown += `\n            <li class='kanban-item-goto dropdown-item'>\n               <a href=\"#\"><i class=\"fa-fw fas fa-share\"></i>${__('Go to')}</a>\n            </li>`;\n            if (self.rights.canDeleteItem()) {\n                card_overflow_dropdown += `\n                <li class='kanban-item-remove dropdown-item'>\n                   <span>\n                      <i class=\"fa-fw ti ti-trash\"></i>${__('Delete')}\n                   </span>\n                </li>`;\n            }\n            card_overflow_dropdown += '</ul>';\n            kanban_container.append(card_overflow_dropdown);\n\n            $('#kanban-overflow-dropdown li.dropdown-trigger > a').on(\"click\", function(e) {\n                $(this).parent().toggleClass('active');\n                $(this).parent().find('ul').toggle();\n                e.stopPropagation();\n                e.preventDefault();\n            });\n\n            $('#kanban-item-overflow-dropdown li.dropdown-trigger > a').on(\"click\", function(e) {\n                $(this).parent().toggleClass('active');\n                $(this).parent().find('ul').toggle();\n                e.stopPropagation();\n                e.preventDefault();\n            });\n\n            const on_refresh = function() {\n                if (Object.keys(self.user_state.state).length === 0) {\n                    // Save new state since none was stored for the user\n                    saveState(true, true);\n                }\n            };\n            self.refresh(on_refresh, null, null, true);\n\n            if (self.rights.canModifyView()) {\n                buildAddColumnForm();\n                if (self.rights.canCreateColumn()) {\n                    buildCreateColumnForm();\n                }\n            }\n            $(self.element).trigger('kanban:post_build');\n        };\n\n        const buildToolbar = function() {\n            $(self.element).trigger('kanban:pre_build_toolbar');\n            let toolbar = $(\"<div class='kanban-toolbar card flex-column flex-md-row'></div>\").appendTo(self.element);\n            $(\"<select name='kanban-board-switcher'></select>\").appendTo(toolbar);\n            let filter_input = $(`<input name='filter' class='form-control ms-1' type='text' placeholder=\"${__('Search or filter results')}\" autocomplete=\"off\"/>`).appendTo(toolbar);\n            if (self.rights.canModifyView()) {\n                let add_column = \"<buttom rome='button' class='kanban-add-column btn btn-outline-secondary ms-1'>\" + __('Add column') + \"</button>\";\n                toolbar.append(add_column);\n            }\n\n            self.filter_input = new SearchInput(filter_input, {\n                allowed_tags: self.supported_filters,\n                on_result_change: (e, result) => {\n                    self.filters = {\n                        _text: ''\n                    };\n                    self.filters._text = result.getFullPhrase();\n                    result.getTaggedTerms().forEach(t => self.filters[t.tag] = {\n                        term: t.term || '',\n                        exclusion: t.exclusion || false,\n                        prefix: t.prefix\n                    });\n                    self.filter();\n                },\n                tokenizer_options: {\n                    custom_prefixes: {\n                        '#': { // Regex prefix\n                            label: __('Regex'),\n                            token_color: '#00800080'\n                        }\n                    }\n                }\n            });\n            self.refreshSearchTokenizer();\n            self.filter();\n\n            $(self.element).trigger('kanban:post_build_toolbar');\n        };\n\n        const getColumnElementFromID = function(column_id) {\n            return '#column-' + self.column_field.id + '-' + column_id;\n        };\n\n        const getColumnIDFromElement = function(column_el) {\n            let element_id = [column_el];\n            if (typeof column_el !== 'string') {\n                element_id = $(column_el).prop('id').split('-');\n            } else {\n                element_id = column_el.split('-');\n            }\n            return element_id[element_id.length - 1];\n        };\n\n        const preserveNewItemForms = function() {\n            self.temp_forms = {};\n            let columns = $(self.element + \" .kanban-column\");\n            $.each(columns, function(i, column) {\n                let forms = $(column).find('.kanban-add-form');\n                if (forms.length > 0) {\n                    self.temp_forms[column.id] = [];\n                    $.each(forms, function(i2, form) {\n                        // Copy event handlers for element and child elements\n                        // Otherwise, the Add button will act like a normal submit button (not wanted)\n                        self.temp_forms[column.id].push($(form).clone(true, true));\n                    });\n                }\n            });\n        };\n\n        const restoreNewItemForms = function() {\n            if (self.temp_forms !== undefined && Object.keys(self.temp_forms).length > 0) {\n                $.each(self.temp_forms, function(column_id, forms) {\n                    let column = $('#' + column_id);\n                    if (column.length > 0) {\n                        let column_body = column.find('.kanban-body').first();\n                        $.each(forms, function(i, form) {\n                            $(form).appendTo(column_body);\n                        });\n                    }\n                });\n                self.temp_forms = {};\n            }\n        };\n\n        const preserveScrolls = function() {\n            self.temp_kanban_scroll = {\n                left: $(self.element + ' .kanban-container').scrollLeft(),\n                top: $(self.element + ' .kanban-container').scrollTop()\n            };\n            self.temp_column_scrolls = {};\n            let columns = $(self.element + \" .kanban-column\");\n            $.each(columns, function(i, column) {\n                let column_body = $(column).find('.kanban-body');\n                if (column_body.scrollTop() !== 0) {\n                    self.temp_column_scrolls[column.id] = column_body.scrollTop();\n                }\n            });\n        };\n\n        const restoreScrolls = function() {\n            if (self.temp_kanban_scroll !== null) {\n                $(self.element + ' .kanban-container').scrollLeft(self.temp_kanban_scroll.left);\n                $(self.element + ' .kanban-container').scrollTop(self.temp_kanban_scroll.top);\n            }\n            if (self.temp_column_scrolls !== null) {\n                $.each(self.temp_column_scrolls, function(column_id, scroll) {\n                    $('#' + column_id + ' .kanban-body').scrollTop(scroll);\n                });\n            }\n            self.temp_kanban_scroll = {};\n            self.temp_column_scrolls = {};\n        };\n\n        /**\n       * Clear all columns from the Kanban.\n       * Should be used in conjunction with {@link fillColumns()} to refresh the Kanban.\n       * @since 9.5.0\n       */\n        const clearColumns = function() {\n            preserveScrolls();\n            preserveNewItemForms();\n            $(self.element + \" .kanban-column\").remove();\n        };\n\n        /**\n       * Add all columns to the kanban. This does not clear the existing columns first.\n       *    If you are refreshing the Kanban, you should call {@link clearColumns()} first.\n       * @since 9.5.0\n       * @param {Object} columns_container JQuery Object of columns container. Not required.\n       *    If not specified, a new object will be created to reference this Kanban's columns container.\n       */\n        const fillColumns = function(columns_container) {\n            if (columns_container === undefined) {\n                columns_container = $(self.element + \" .kanban-container .kanban-columns\").first();\n            }\n\n            let already_processed = [];\n            $.each(self.user_state.state, function(position, column) {\n                if (column['visible'] !== false && column !== 'false') {\n                    if (self.columns[column['column']] !== undefined) {\n                        appendColumn(column['column'], self.columns[column['column']], columns_container);\n                    }\n                }\n                already_processed.push(column['column']);\n            });\n            $.each(self.columns, function(column_id, column) {\n                if (!already_processed.includes(column_id)) {\n                    if (column['id'] === undefined) {\n                        appendColumn(column_id, column, columns_container);\n                    }\n                }\n            });\n            restoreNewItemForms();\n            restoreScrolls();\n        };\n\n        /**\n       * Add all event listeners. At this point, all elements should have been added to the DOM.\n       * @since 9.5.0\n       */\n        const registerEventListeners = function() {\n            const add_dropdown = $('#kanban-add-dropdown');\n            const column_overflow_dropdown = $('#kanban-overflow-dropdown');\n            const card_overflow_dropdown = $('#kanban-item-overflow-dropdown');\n\n            refreshSortables();\n\n            if (Object.keys(self.supported_itemtypes).length > 0) {\n                $(self.element + ' .kanban-container').on('click', '.kanban-add', function(e) {\n                    const button = $(e.target);\n                    //Keep menu open if clicking on another add button\n                    const force_stay_visible = $(add_dropdown.data('trigger-button')).prop('id') !== button.prop('id');\n                    add_dropdown.css({\n                        position: 'fixed',\n                        left: button.offset().left,\n                        top: button.offset().top + button.outerHeight(true),\n                        display: (add_dropdown.css('display') === 'none' || force_stay_visible) ? 'inline' : 'none'\n                    });\n                    add_dropdown.data('trigger-button', button);\n                });\n            }\n            $(window).on('click', function(e) {\n                if (!$(e.target).hasClass('kanban-add')) {\n                    add_dropdown.css({\n                        display: 'none'\n                    });\n                }\n                if (self.rights.canModifyView()) {\n                    if (!$.contains($(self.add_column_form)[0], e.target)) {\n                        $(self.add_column_form).css({\n                            display: 'none'\n                        });\n                    }\n                    if (self.rights.canCreateColumn()) {\n                        if (!$.contains($(self.create_column_form)[0], e.target) && !$.contains($(self.add_column_form)[0], e.target)) {\n                            $(self.create_column_form).css({\n                                display: 'none'\n                            });\n                        }\n                    }\n                }\n            });\n\n            if (Object.keys(self.supported_itemtypes).length > 0) {\n                $(self.element + ' .kanban-container').on('click', '.kanban-column-overflow-actions', function(e) {\n                    const button = $(e.target);\n                    //Keep menu open if clicking on another add button\n                    const force_stay_visible = $(column_overflow_dropdown.data('trigger-button')).prop('id') !== button.prop('id');\n                    column_overflow_dropdown.css({\n                        position: 'fixed',\n                        left: button.offset().left,\n                        top: button.offset().top + button.outerHeight(true),\n                        display: (column_overflow_dropdown.css('display') === 'none' || force_stay_visible) ? 'inline' : 'none'\n                    });\n                    // Hide sub-menus by default when opening the overflow menu\n                    column_overflow_dropdown.find('ul').css({\n                        display: 'none'\n                    });\n                    column_overflow_dropdown.find('li').removeClass('active');\n                    // If this is a protected column, hide any items with data-forbid-protected='true'. Otherwise show them.\n                    const column = $(e.target.closest('.kanban-column'));\n                    if (column.hasClass('kanban-protected')) {\n                        column_overflow_dropdown.find('li[data-forbid-protected=\"true\"]').hide();\n                    } else {\n                        column_overflow_dropdown.find('li[data-forbid-protected=\"true\"]').show();\n                    }\n                    column_overflow_dropdown.data('trigger-button', button);\n                });\n            }\n            $(self.element + ' .kanban-container').on('click', '.kanban-item-overflow-actions', function(e) {\n                const button = $(e.target);\n                //Keep menu open if clicking on another add button\n                const force_stay_visible = $(card_overflow_dropdown.data('trigger-button')).prop('id') !== button.prop('id');\n                card_overflow_dropdown.css({\n                    position: 'fixed',\n                    left: button.offset().left,\n                    top: button.offset().top + button.outerHeight(true),\n                    display: (card_overflow_dropdown.css('display') === 'none' || force_stay_visible) ? 'inline' : 'none'\n                });\n                // Hide sub-menus by default when opening the overflow menu\n                card_overflow_dropdown.find('ul').css({\n                    display: 'none'\n                });\n                card_overflow_dropdown.find('li').removeClass('active');\n                card_overflow_dropdown.data('trigger-button', button);\n                const card = $(button.closest('.kanban-item'));\n\n                const form_link = card.data('form_link');\n                $(card_overflow_dropdown.find('.kanban-item-goto a')).attr('href', form_link);\n\n                let delete_action = $(card_overflow_dropdown.find('.kanban-item-remove'));\n                if (card.hasClass('deleted')) {\n                    delete_action.html('<span><i class=\"ti ti-trash\"></i>'+__('Purge')+'</span>');\n                } else {\n                    delete_action.html('<span><i class=\"ti ti-trash\"></i>'+__('Delete')+'</span>');\n                }\n            });\n\n            $(window).on('click', function(e) {\n                if (!$(e.target).hasClass('kanban-column-overflow-actions')) {\n                    column_overflow_dropdown.css({\n                        display: 'none'\n                    });\n                }\n                if (!$(e.target).hasClass('kanban-item-overflow-actions')) {\n                    card_overflow_dropdown.css({\n                        display: 'none'\n                    });\n                }\n                if (self.rights.canModifyView()) {\n                    if (!$.contains($(self.add_column_form)[0], e.target)) {\n                        $(self.add_column_form).css({\n                            display: 'none'\n                        });\n                    }\n                    if (self.rights.canCreateColumn()) {\n                        if (!$.contains($(self.create_column_form)[0], e.target) && !$.contains($(self.add_column_form)[0], e.target)) {\n                            $(self.create_column_form).css({\n                                display: 'none'\n                            });\n                        }\n                    }\n                }\n            });\n\n            $(self.element + ' .kanban-container').on('click', '.kanban-remove', function(e) {\n            // Get root dropdown, then the button that triggered it, and finally the column that the button is in\n                const column = $(e.target.closest('.kanban-dropdown')).data('trigger-button').closest('.kanban-column');\n                // Hide that column\n                hideColumn(getColumnIDFromElement(column));\n            });\n            $(self.element).on('click', '.item-details-panel .kanban-item-edit-team', (e) => {\n                self.showTeamModal($(e.target).closest('.item-details-panel').data('card'));\n            });\n            $(self.element + ' .kanban-container').on('click', '.kanban-item-remove', function(e) {\n            // Get root dropdown, then the button that triggered it, and finally the card that the button is in\n                const card = $(e.target.closest('.kanban-dropdown')).data('trigger-button').closest('.kanban-item').prop('id');\n                // Try to delete that card item\n                deleteCard(card, undefined, undefined);\n            });\n            $(self.element + ' .kanban-container').on('click', '.kanban-collapse-column', function(e) {\n                self.toggleCollapseColumn(e.target.closest('.kanban-column'));\n            });\n            $(self.element).on('click', '.kanban-add-column', function() {\n                refreshAddColumnForm();\n            });\n            $(self.add_column_form).on('input', \"input[name='column-name-filter']\", function() {\n                const filter_input = $(this);\n                $(self.add_column_form + ' li').hide();\n                $(self.add_column_form + ' li').filter(function() {\n                    return $(this).text().toLowerCase().includes(filter_input.val().toLowerCase());\n                }).show();\n            });\n            $(self.add_column_form).on('change', \"input[type='checkbox']\", function() {\n                const column_id = $(this).parent().data('list-id');\n                if (column_id !== undefined) {\n                    if ($(this).is(':checked')) {\n                        showColumn(column_id);\n                    } else {\n                        hideColumn(column_id);\n                    }\n                }\n            });\n            $(self.add_column_form).on('submit', 'form', function(e) {\n                e.preventDefault();\n            });\n            $(self.add_column_form).on('click', '.kanban-create-column', function() {\n                const toolbar = $(self.element + ' .kanban-toolbar');\n                $(self.add_column_form).css({\n                    display: 'none'\n                });\n                $(self.create_column_form).css({\n                    display: 'block',\n                    position: 'fixed',\n                    left: toolbar.offset().left + toolbar.outerWidth(true) - $(self.create_column_form).outerWidth(true),\n                    top: toolbar.offset().top + toolbar.outerHeight(true)\n                });\n            });\n            $(self.create_column_form).on('submit', 'form', function(e) {\n                e.preventDefault();\n\n                const toolbar = $(self.element + ' .kanban-toolbar');\n\n                $(self.create_column_form).css({\n                    display: 'none'\n                });\n                const name = $(self.create_column_form + \" input[name='name']\").val();\n                $(self.create_column_form + \" input[name='name']\").val(\"\");\n                const color = $(self.create_column_form + \" input[name='color']\").val();\n                createColumn(name, {color: color}, function() {\n                    // Refresh add column list\n                    refreshAddColumnForm();\n                    $(self.add_column_form).css({\n                        display: 'block',\n                        position: 'fixed',\n                        left: toolbar.offset().left + toolbar.outerWidth(true) - $(self.add_column_form).outerWidth(true),\n                        top: toolbar.offset().top + toolbar.outerHeight(true)\n                    });\n                });\n            });\n            $('#kanban-add-dropdown li').on('click', function(e) {\n                e.preventDefault();\n                const selection = $(this).closest('li');\n                // The add dropdown is a single-level dropdown, so the parent is the ul element\n                const dropdown = selection.parent();\n                // Get the button that triggered the dropdown and then get the column that it is a part of\n                // This is because the dropdown exists outside all columns and is not recreated each time it is opened\n                const column = $($(dropdown.data('trigger-button')).closest('.kanban-column'));\n                // kanban-add-ITEMTYPE (We want the ITEMTYPE token at position 2)\n                const itemtype = selection.prop('id').split('-')[2];\n                self.clearAddItemForms(column);\n                self.showAddItemForm(column, itemtype);\n                delayRefresh();\n            });\n            $('#kanban-bulk-add-dropdown li').on('click', function(e) {\n                e.preventDefault();\n                const selection = $(this).closest('li');\n                // Traverse all the way up to the top-level overflow dropdown\n                const dropdown = selection.closest('.kanban-dropdown');\n                // Get the button that triggered the dropdown and then get the column that it is a part of\n                // This is because the dropdown exists outside all columns and is not recreated each time it is opened\n                const column = $($(dropdown.data('trigger-button')).closest('.kanban-column'));\n                // kanban-bulk-add-ITEMTYPE (We want the ITEMTYPE token at position 3)\n                const itemtype = selection.prop('id').split('-')[3];\n\n                // Force-close the full dropdown\n                dropdown.css({'display': 'none'});\n\n                self.clearAddItemForms(column);\n                self.showBulkAddItemForm(column, itemtype);\n                delayRefresh();\n            });\n            const switcher = $(\"select[name='kanban-board-switcher']\").first();\n            $(self.element + ' .kanban-toolbar').on('select2:select', switcher, function(e) {\n                const items_id = e.params.data.id;\n                $.ajax({\n                    type: \"GET\",\n                    url: (self.ajax_root + \"kanban.php\"),\n                    data: {\n                        action: \"get_url\",\n                        itemtype: self.item.itemtype,\n                        items_id: items_id\n                    },\n                    success: function(url) {\n                        window.location = url;\n                    }\n                });\n            });\n\n            $(self.element).on('input', '.kanban-add-form input, .kanban-add-form textarea', function() {\n                delayRefresh();\n            });\n\n            if (!self.rights.canOrderCard()) {\n                $(self.element).on(\n                    'mouseenter',\n                    '.kanban-column',\n                    function () {\n                        if (self.is_sorting_active) {\n                            return; // Do not change readonly states if user is sorting elements\n                        }\n                        // If user cannot order cards, make items temporarily readonly except for current column.\n                        $(this).find('.kanban-body > li').removeClass('temporarily-readonly');\n                        $(this).siblings().find('.kanban-body > li').addClass('temporarily-readonly');\n                    }\n                );\n                $(self.element).on(\n                    'mouseleave',\n                    '.kanban-column',\n                    function () {\n                        if (self.is_sorting_active) {\n                            return; // Do not change readonly states if user is sorting elements\n                        }\n                        $(self.element).find('.kanban-body > li').removeClass('temporarily-readonly');\n                    }\n                );\n            }\n\n            $(self.element + ' .kanban-container').on('submit', '.kanban-add-form:not(.kanban-bulk-add-form)', function(e) {\n                e.preventDefault();\n                const form = $(e.target);\n                const data = {\n                    inputs: form.serialize(),\n                    itemtype: form.prop('id').split('_')[2],\n                    action: 'add_item'\n                };\n\n                $.ajax({\n                    method: 'POST',\n                    url: (self.ajax_root + \"kanban.php\"),\n                    data: data\n                }).done(function() {\n                    self.refresh();\n                });\n            });\n\n            $(self.element + ' .kanban-container').on('click', '.kanban-item .kanban-item-title', function(e) {\n                e.preventDefault();\n                const card = $(e.target).closest('.kanban-item');\n                self.showCardPanel(card);\n            });\n        };\n\n        const showModal = (content, data) => {\n            const modal = $('#kanban-modal');\n            modal.removeData();\n            modal.data(data);\n            modal.find('.modal-body').html(content);\n            modal.modal('show');\n        };\n\n        const hideModal = () => {\n            $('#kanban-modal').modal('hide');\n        };\n\n        /**\n       * (Re-)Create the list of columns that can be shown/hidden.\n       * This involves fetching the list of valid columns from the server.\n       * @since 9.5.0\n       */\n        const refreshAddColumnForm = function() {\n            let columns_used = [];\n            $(self.element + ' .kanban-columns .kanban-column').each(function() {\n                const column_id = this.id.split('-');\n                columns_used.push(column_id[column_id.length - 1]);\n            });\n            const column_dialog = $(self.add_column_form);\n            const toolbar = $(self.element + ' .kanban-toolbar');\n            $.ajax({\n                method: 'GET',\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"list_columns\",\n                    itemtype: self.item.itemtype,\n                    column_field: self.column_field.id\n                }\n            }).done(function(data) {\n                const form_content = $(self.add_column_form + \" .kanban-item-content\");\n                form_content.empty();\n                form_content.append(\"<input type='text' class='form-control' name='column-name-filter' placeholder='\" + __('Search') + \"'/>\");\n                let list = \"<ul class='kanban-columns-list'>\";\n                $.each(data, function(column_id, column) {\n                    let list_item = \"<li data-list-id='\"+column_id+\"'>\";\n                    if (columns_used.includes(column_id)) {\n                        list_item += \"<input type='checkbox' checked='true' class='form-check-input' />\";\n                    } else {\n                        list_item += \"<input type='checkbox' class='form-check-input' />\";\n                    }\n                    if (typeof column['color_class'] !== \"undefined\") {\n                        list_item += \"<span class='kanban-color-preview \"+column['color_class']+\"'></span>\";\n                    } else {\n                        list_item += \"<span class='kanban-color-preview' style='background-color: \"+column['header_color']+\"'></span>\";\n                    }\n                    list_item += column['name'] + \"</li>\";\n                    list += list_item;\n                });\n                list += \"</ul>\";\n                form_content.append(list);\n                form_content.append();\n\n                column_dialog.css({\n                    display: 'block',\n                    position: 'fixed',\n                    left: toolbar.offset().left + toolbar.outerWidth(true) - column_dialog.outerWidth(true),\n                    top: toolbar.offset().top + toolbar.outerHeight(true)\n                });\n            });\n        };\n\n        /**\n       * (Re-)Initialize JQuery sortable for all items and columns.\n       * This should be called every time a new column or item is added to the board.\n       * @since 9.5.0\n       */\n        const refreshSortables = function() {\n            $(self.element).trigger('kanban:refresh_sortables');\n            // Make sure all items in the columns can be sorted\n            const bodies = $(self.element + ' .kanban-body');\n            $.each(bodies, function(b) {\n                const body = $(b);\n                if (body.data('sortable')) {\n                    sortable(b, 'destroy');\n                }\n            });\n\n            sortable(self.element + ' .kanban-body', {\n                acceptFrom: '.kanban-body',\n                items: '.kanban-item:not(.readonly):not(.temporarily-readonly)',\n            });\n\n            $(self.element + ' .kanban-body').off('sortstart');\n            $(self.element + ' .kanban-body').on('sortstart', (e) => {\n                self.is_sorting_active = true;\n\n                const card = $(e.detail.item);\n                // Track the column and position the card was picked up from\n                const current_column = card.closest('.kanban-column').attr('id');\n                card.data('source-col', current_column);\n                card.data('source-pos', e.detail.origin.index);\n\n                self.sort_data = {\n                    card_id: card.attr('id'),\n                    source_column: current_column,\n                    source_position: e.detail.origin.index\n                };\n            });\n\n            $(self.element + ' .kanban-body').off('sortupdate');\n            $(self.element + ' .kanban-body').on('sortupdate', function(e) {\n                const card = e.detail.item;\n                if (this === $(card).parent()[0]) {\n                    return self.onKanbanCardSort(e, this);\n                }\n            });\n\n            $(self.element + ' .kanban-body').off('sortstop');\n            $(self.element + ' .kanban-body').on('sortstop', (e) => {\n                self.is_sorting_active = false;\n                $(e.detail.item).closest('.kanban-column').trigger('mouseenter'); // force readonly states refresh\n            });\n\n            if (self.rights.canModifyView()) {\n            // Enable column sorting\n                sortable(self.element + ' .kanban-columns', {\n                    acceptFrom: self.element + ' .kanban-columns',\n                    appendTo: '.kanban-container',\n                    items: '.kanban-column:not(.kanban-protected)',\n                    handle: '.kanban-column-header',\n                    orientation: 'horizontal',\n                });\n                $(self.element + ' .kanban-columns .kanban-column:not(.kanban-protected) .kanban-column-header').addClass('grab');\n            }\n\n            $(self.element + ' .kanban-columns').off('sortstop');\n            $(self.element + ' .kanban-columns').on('sortstop', (e) => {\n                const column = e.detail.item;\n                updateColumnPosition(getColumnIDFromElement(column), $(column).index());\n            });\n        };\n\n        /**\n       * Construct and return the toolbar HTML for a specified column.\n       * @since 9.5.0\n       * @param {Object} column Column object that this toolbar will be made for.\n       * @returns {string} HTML coded for the toolbar.\n       */\n        const getColumnToolbarElement = function(column) {\n            let toolbar_el = \"<span class='kanban-column-toolbar'>\";\n            const column_id = parseInt(getColumnIDFromElement(column['id']));\n            if (self.rights.canCreateItem() && (self.rights.getAllowedColumnsForNewCards().length === 0 || self.rights.getAllowedColumnsForNewCards().includes(column_id))) {\n                toolbar_el += \"<i id='kanban_add_\" + column['id'] + \"' class='kanban-add btn btn-sm btn-ghost-secondary fas fa-plus' title='\" + __('Add') + \"'></i>\";\n                toolbar_el += \"<i id='kanban_column_overflow_actions_\" + column['id'] +\"' class='kanban-column-overflow-actions btn btn-sm btn-ghost-secondary fas fa-ellipsis-h' title='\" + __('More') + \"'></i>\";\n            }\n            toolbar_el += \"</span>\";\n            return toolbar_el;\n        };\n\n        /**\n       * Hide all columns that don't have a card in them.\n       * @since 9.5.0\n      **/\n        this.hideEmpty = function() {\n            const bodies = $(\".kanban-body\");\n            bodies.each(function(index, item) {\n                if (item.childElementCount === 0) {\n                    item.parentElement.style.display = \"none\";\n                }\n            });\n        };\n\n        /**\n       * Show all columns that don't have a card in them.\n       * @since 9.5.0\n      **/\n        this.showEmpty = function() {\n            const columns = $(\".kanban-column\");\n            columns.each(function(index, item) {\n                item.style.display = \"block\";\n            });\n        };\n\n        /**\n       * Callback function for when a kanban item is moved.\n       * @since 9.5.0\n       * @param {Object}  e      Event.\n       * @param {Element} sortable Sortable object\n       * @returns {Boolean}       Returns false if the sort was cancelled.\n      **/\n        this.onKanbanCardSort = function(e, sortable) {\n            const target = sortable.parentElement;\n            const source = $(e.detail.origin.container);\n            const card = $(e.detail.item);\n            const el_params = card.attr('id').split('-');\n            const target_params = $(target).attr('id').split('-');\n            const column_id = target_params[target_params.length - 1];\n\n            if (el_params.length === 2 && source !== null && !(!self.rights.canOrderCard() && source.length === 0)) {\n                $.ajax({\n                    type: \"POST\",\n                    url: (self.ajax_root + \"kanban.php\"),\n                    data: {\n                        action: \"update\",\n                        itemtype: el_params[0],\n                        items_id: el_params[1],\n                        column_field: self.column_field.id,\n                        column_value: column_id\n                    },\n                    error: function() {\n                        window.sortable(sortable, 'cancel');\n                        return false;\n                    },\n                    success: function() {\n                        let pos = card.data('current-pos');\n                        if (!self.rights.canOrderCard()) {\n                            card.appendTo($(target).find('.kanban-body').first());\n                            pos = card.index();\n                        }\n                        // Update counters. Always pass the column element instead of the kanban body (card container)\n                        self.updateColumnCount($(source).closest('.kanban-column'));\n                        self.updateColumnCount($(target).closest('.kanban-column'));\n                        card.removeData('source-col');\n                        updateCardPosition(card.attr('id'), target.id, pos);\n                        return true;\n                    }\n                });\n            } else {\n                window.sortable(sortable, 'cancel');\n                return false;\n            }\n        };\n\n        /**\n       * Send the new card position to the server.\n       * @since 9.5.0\n       * @param {string} card The ID of the card being moved.\n       * @param {string|number} column The ID or element of the column the card resides in.\n       * @param {number} position The position in the column that the card is at.\n       * @param {function} error Callback function called when the server reports an error.\n       * @param {function} success Callback function called when the server processes the request successfully.\n       */\n        const updateCardPosition = function(card, column, position, error, success) {\n            if (typeof column === 'string' && column.lastIndexOf('column', 0) === 0) {\n                column = getColumnIDFromElement(column);\n            }\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"move_item\",\n                    card: card,\n                    column: column,\n                    position: position,\n                    kanban: self.item\n                },\n                error: function() {\n                    if (error) {\n                        error();\n                    }\n                },\n                success: function() {\n                    if (success) {\n                        success();\n                        $('#'+card).trigger('kanban:card_move');\n                    }\n                }\n            });\n        };\n\n        /**\n       * Delete a card\n       * @since 10.0.0\n       * @param {string} card The ID of the card being deleted.\n       * @param {function} error Callback function called when the server reports an error.\n       * @param {function} success Callback function called when the server processes the request successfully.\n       */\n        const deleteCard = function(card, error, success) {\n            const [itemtype, items_id] = card.split('-', 2);\n            const card_obj = $('#'+card);\n            const force = card_obj.hasClass('deleted');\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"delete_item\",\n                    itemtype: itemtype,\n                    items_id: items_id,\n                    force: force ? 1 : 0\n                },\n                error: function() {\n                    if (error) {\n                        error();\n                    }\n                },\n                success: function() {\n                    const column = card_obj.closest('.kanban-column');\n                    card_obj.remove();\n                    self.updateColumnCount(column);\n                    if (success) {\n                        success();\n                        $('#'+card).trigger('kanban:card_delete');\n                    }\n                }\n            });\n        };\n\n        /**\n       * Show the column and notify the server of the change.\n       * @since 9.5.0\n       * @param {number} column The ID of the column.\n       */\n        const showColumn = function(column) {\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"show_column\",\n                    column: column,\n                    kanban: self.item\n                },\n                complete: function() {\n                    $.each(self.user_state.state, function(i, c) {\n                        if (parseInt(c['column']) === parseInt(column)) {\n                            self.user_state.state[i]['visible'] = true;\n                            return false;\n                        }\n                    });\n                    loadColumn(column, false, true);\n                    $(self.element + \" .kanban-add-column-form li[data-list-id='\" + column + \"']\").prop('checked', true);\n                }\n            });\n        };\n\n        /**\n       * Hide the column and notify the server of the change.\n       * @since 9.5.0\n       * @param {number} column The ID of the column.\n       */\n        const hideColumn = function(column) {\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"hide_column\",\n                    column: column,\n                    kanban: self.item\n                },\n                complete: function() {\n                    $(getColumnElementFromID(column)).remove();\n                    $.each(self.user_state.state, function(i, c) {\n                        if (parseInt(c['column']) === parseInt(column)) {\n                            self.user_state.state[i]['visible'] = false;\n                            return false;\n                        }\n                    });\n                    $(self.element + \" .kanban-add-column-form li[data-list-id='\" + column + \"']\").prop('checked', false);\n                }\n            });\n        };\n\n        /**\n       * Notify the server that the column's position has changed.\n       * @since 9.5.0\n       * @param {number} column The ID of the column.\n       * @param {number} position The position of the column.\n       */\n        const updateColumnPosition = function(column, position) {\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"move_column\",\n                    column: column,\n                    position: position,\n                    kanban: self.item\n                }\n            });\n        };\n\n        /**\n       * Get or create team member badge\n       * @since 9.5.0\n       * @param {array} teammember\n       * @returns {string} HTML image or icon\n       * @see generateUserBadge()\n       * @see generateOtherBadge()\n      **/\n        const getTeamBadge = function(teammember) {\n            const itemtype = teammember[\"itemtype\"];\n            const items_id = teammember[\"id\"];\n\n            if (self.team_badge_cache[itemtype] === undefined ||\n                 self.team_badge_cache[itemtype][items_id] === undefined) {\n                if (itemtype === 'User') {\n                    let user_img = null;\n                    $.ajax({\n                        url: (self.ajax_root + \"getUserPicture.php\"),\n                        async: false,\n                        data: {\n                            users_id: [items_id],\n                            size: self.team_image_size,\n                        }\n                    }).done(function(data) {\n                        if (data[items_id] !== undefined) {\n                            user_img = data[items_id];\n                        } else {\n                            user_img = null;\n                        }\n                    });\n\n                    if (user_img) {\n                        self.team_badge_cache[itemtype][items_id] = \"<span>\" + user_img + \"</span>\";\n                    } else {\n                        self.team_badge_cache[itemtype][items_id] = generateUserBadge(teammember);\n                    }\n                } else {\n                    switch (itemtype) {\n                        case 'Group':\n                            self.team_badge_cache[itemtype][items_id] = generateOtherBadge(teammember, 'fa-users');\n                            break;\n                        case 'Supplier':\n                            self.team_badge_cache[itemtype][items_id] = generateOtherBadge(teammember, 'fa-briefcase');\n                            break;\n                        case 'Contact':\n                            self.team_badge_cache[itemtype][items_id] = generateOtherBadge(teammember, 'fa-user');\n                            break;\n                        default:\n                            self.team_badge_cache[itemtype][items_id] = generateOtherBadge(teammember, 'fa-user');\n                    }\n                }\n            }\n            return self.team_badge_cache[itemtype][items_id];\n        };\n\n        /**\n       * Attempt to get and cache user badges in a single AJAX request to reduce time wasted when using multiple requests.\n       * Most time spent on the request is latency, so it takes about the same amount of time for 1 or 50 users.\n       * If no image is returned from the server, a badge is generated based on the user's initials.\n       * @since 9.5.0\n       * @param {Object} options Object of options for this function. Supports:\n       *    trim_cache - boolean indicating if unused user images should be removed from the cache.\n       *       This is useful for refresh scenarios.\n       * @see generateUserBadge()\n      **/\n        const preloadBadgeCache = function(options) {\n            let users = [];\n            $.each(self.columns, function(column_id, column) {\n                if (column['items'] !== undefined) {\n                    $.each(column['items'], function(card_id, card) {\n                        if (card[\"_team\"] !== undefined) {\n                            Object.values(card[\"_team\"]).slice(0, self.max_team_images).forEach(function(teammember) {\n                                if (teammember['itemtype'] === 'User') {\n                                    if (self.team_badge_cache['User'][teammember['id']] === undefined) {\n                                        users[teammember['id']] = teammember;\n                                    }\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n            if (users.length === 0) {\n                return;\n            }\n            $.ajax({\n                url: (self.ajax_root + \"getUserPicture.php\"),\n                async: false,\n                data: {\n                    users_id: Object.keys(users),\n                    size: self.team_image_size\n                }\n            }).done(function(data) {\n                Object.keys(users).forEach(function(user_id) {\n                    const teammember = users[user_id];\n                    if (data[user_id] !== undefined) {\n                        self.team_badge_cache['User'][user_id] = \"<span>\" + data[user_id] + \"</span>\";\n                    } else {\n                        self.team_badge_cache['User'][user_id] = generateUserBadge(teammember);\n                    }\n                });\n                if (options !== undefined && options['trim_cache'] !== undefined) {\n                    let cached_colors = JSON.parse(window.sessionStorage.getItem('badge_colors'));\n                    Object.keys(self.team_badge_cache['User']).forEach(function(user_id) {\n                        if (users[user_id] === undefined) {\n                            delete self.team_badge_cache['User'][user_id];\n                            delete cached_colors['User'][user_id];\n                        }\n                    });\n                    window.sessionStorage.setItem('badge_colors', JSON.stringify(cached_colors));\n                }\n            });\n        };\n\n        /**\n       * Convert the given H, S, L values into a color hex code (with prepended hash symbol).\n       * @param {number} h Hue\n       * @param {number} s Saturation\n       * @param {number} l Lightness\n       * @returns {string} Hex code color value\n       */\n        const hslToHexColor = function(h, s, l) {\n            let r, g, b;\n\n            if (s === 0) {\n                r = g = b = l;\n            } else {\n                const hue2rgb = function hue2rgb(p, q, t){\n                    if (t < 0)\n                        t += 1;\n                    if (t > 1)\n                        t -= 1;\n                    if (t < 1/6)\n                        return p + (q - p) * 6 * t;\n                    if (t < 1/2)\n                        return q;\n                    if (t < 2/3)\n                        return p + (q - p) * (2/3 - t) * 6;\n                    return p;\n                };\n\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                r = hue2rgb(p, q, h + 1/3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1/3);\n            }\n\n            r = ('0' + (r * 255).toString(16)).substr(-2);\n            g = ('0' + (g * 255).toString(16)).substr(-2);\n            b = ('0' + (b * 255).toString(16)).substr(-2);\n            return '#' + r + g + b;\n        };\n\n        /**\n       * Compute a new badge color or retrieve the cached color from session storage.\n       * @since 9.5.0\n       * @param {Object} teammember The teammember this badge is for.\n       * @returns {string} Hex code color value\n       */\n        const getBadgeColor = function(teammember) {\n            let cached_colors = JSON.parse(window.sessionStorage.getItem('badge_colors'));\n            const itemtype = teammember['itemtype'];\n            const baseColor = Math.random();\n            const lightness = (Math.random() * 10) + (self.dark_theme ? 25 : 70);\n            //var bg_color = \"hsl(\" + baseColor + \", 100%,\" + lightness + \"%,1)\";\n            let bg_color = hslToHexColor(baseColor, 1, lightness / 100);\n\n            if (cached_colors !== null && cached_colors[itemtype] !== null && cached_colors[itemtype][teammember['id']]) {\n                bg_color = cached_colors[itemtype][teammember['id']];\n            } else {\n                if (cached_colors === null) {\n                    cached_colors = {\n                        User: {},\n                        Group: {},\n                        Supplier: {},\n                        Contact: {},\n                        _dark_theme: self.dark_theme\n                    };\n                }\n                cached_colors[itemtype][teammember['id']] = bg_color;\n                window.sessionStorage.setItem('badge_colors', JSON.stringify(cached_colors));\n            }\n\n            return bg_color;\n        };\n\n        /**\n       * Generate a user image based on the user's initials.\n       * @since 9.5.0\n       * @param {string} teammember The teammember array/object that represents the user.\n       * @return {string} HTML image of the generated user badge.\n       */\n        const generateUserBadge = function(teammember) {\n            let initials = \"\";\n            if (teammember[\"firstname\"]) {\n                initials += teammember[\"firstname\"][0];\n            }\n            if (teammember[\"realname\"]) {\n                initials += teammember[\"realname\"][0];\n            }\n            // Force uppercase initals\n            initials = initials.toUpperCase();\n\n            if (!self.display_initials || initials.length === 0) {\n                return generateOtherBadge(teammember, 'fa-user');\n            }\n\n            const canvas = document.createElement('canvas');\n            canvas.width = self.team_image_size;\n            canvas.height = self.team_image_size;\n            const context = canvas.getContext('2d');\n            context.strokeStyle = \"#f1f1f1\";\n\n            context.fillStyle = getBadgeColor(teammember);\n            context.beginPath();\n            context.arc(self.team_image_size / 2, self.team_image_size / 2, self.team_image_size / 2, 0, 2 * Math.PI);\n            context.fill();\n            context.fillStyle = self.dark_theme ? 'white' : 'black';\n            context.textAlign = 'center';\n            context.font = 'bold ' + (self.team_image_size / 2) + 'px sans-serif';\n            context.textBaseline = 'middle';\n            context.fillText(initials, self.team_image_size / 2, self.team_image_size / 2);\n            const src = canvas.toDataURL(\"image/png\");\n            return \"<span><img src='\" + src + \"' title='\" + teammember['name'] + \"'/></span>\";\n        };\n\n        /**\n       * Generate team member icon based on its name and a FontAwesome icon.\n       * @since 9.5.0\n       * @param {Object} teammember The team member data.\n       * @param {string} icon FontAwesome icon to use for this badge.\n       * @returns {string} HTML icon of the generated badge.\n       */\n        const generateOtherBadge = function(teammember, icon) {\n            const bg_color = getBadgeColor(teammember);\n\n            return `\n            <span class='fa-stack fa-lg' style='font-size: ${(self.team_image_size / 2)}px'>\n                <i class='fas fa-circle fa-stack-2x' style=\"color: ${bg_color}\" title=\"${teammember['name']}\"></i>\n                <i class='fas ${icon} fa-stack-1x' title=\"${teammember['name']}\"></i>\n            </span>\n         `;\n        };\n\n        /**\n       * Generate a badge to indicate that 'overflow_count' number of team members are not shown on the Kanban item.\n       * @since 9.5.0\n       * @param {number} overflow_count Number of members without badges on the Kanban item.\n       * @returns {string} HTML image of the generated overflow badge.\n       */\n        const generateOverflowBadge = function(overflow_count) {\n            const canvas = document.createElement('canvas');\n            canvas.width = self.team_image_size;\n            canvas.height = self.team_image_size;\n            const context = canvas.getContext('2d');\n            context.strokeStyle = \"#f1f1f1\";\n\n            // Create fill color based on theme type\n            const lightness = (self.dark_theme ? 40 : 80);\n            context.fillStyle = \"hsl(255, 0%,\" + lightness + \"%,1)\";\n            context.beginPath();\n            context.arc(self.team_image_size / 2, self.team_image_size / 2, self.team_image_size / 2, 0, 2 * Math.PI);\n            context.fill();\n            context.fillStyle = self.dark_theme ? 'white' : 'black';\n            context.textAlign = 'center';\n            context.font = 'bold ' + (self.team_image_size / 2) + 'px sans-serif';\n            context.textBaseline = 'middle';\n            context.fillText(\"+\" + overflow_count, self.team_image_size / 2, self.team_image_size / 2);\n            const src = canvas.toDataURL(\"image/png\");\n            return \"<span><img src='\" + src + \"' title='\" + __('%d other team members').replace('%d', overflow_count) + \"'/></span>\";\n        };\n\n        /**\n       * Check if the provided color is more light or dark.\n       * This function converts the given hex value into HSL and checks the L value.\n       * @since 9.5.0\n       * @param hex Hex code of the color. It may or may not contain the beginning '#'.\n       * @returns {boolean} True if the color is more light.\n       */\n        const isLightColor = function(hex) {\n            const c = hex.startsWith('#') ? hex.substring(1) : hex;\n            const rgb = parseInt(c, 16);\n            const r = (rgb >> 16) & 0xff;\n            const g = (rgb >>  8) & 0xff;\n            const b = (rgb >>  0) & 0xff;\n            const lightness = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n            return lightness > 110;\n        };\n\n        /**\n       * Convert a CSS RGB or RGBA string to a hex string including the '#' character.\n       * @param {string} rgb The RGB or RGBA string\n       * @returns {string} The hex color string\n       */\n        const rgbToHex = function(rgb) {\n            const pattern = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+\\.?\\d*))?\\)$/;\n            const hex = rgb.match(pattern).slice(1).map((n, i) => (i === 3 ? Math.round(parseFloat(n) * 255) : parseFloat(n))\n                .toString(16).padStart(2, '0') // Convert to hex values\n                .replace('NaN', '') // Handle NaN values\n            ).join('');\n            return `#${hex}`;\n        };\n\n        /**\n       * Update the counter for the specified column.\n       * @since 9.5.0\n       * @param {string|Element|jQuery} column_el The column\n       */\n        this.updateColumnCount = function(column_el) {\n            if (!(column_el instanceof jQuery)) {\n                column_el = $(column_el);\n            }\n            const column_body = $(column_el).find('.kanban-body:first');\n            const counter = $(column_el).find('.kanban_nb:first');\n            // Get all visible kanban items. This ensures the count is correct when items are filtered out.\n            const items = column_body.find('li:not(.filtered-out)');\n            counter.text(items.length);\n        };\n\n        /**\n       * Remove all add item forms from the specified column.\n       * @since 9.5.0\n       * @param {string|Element|jQuery} column_el The column\n       */\n        this.clearAddItemForms = function(column_el) {\n            if (!(column_el instanceof jQuery)) {\n                column_el = $(column_el);\n            }\n            column_el.find('form').remove();\n        };\n\n        /**\n       * Add a new form to the Kanban column to add a new item of the specified itemtype.\n       * @since 9.5.0\n       * @param {string|Element|jQuery} column_el The column\n       * @param {string} itemtype The itemtype that is being added\n       */\n        this.showAddItemForm = function(column_el, itemtype) {\n            if (!(column_el instanceof jQuery)) {\n                column_el = $(column_el);\n            }\n\n            const uniqueID = Math.floor(Math.random() * 999999);\n            const formID = \"form_add_\" + itemtype + \"_\" + uniqueID;\n            let add_form = \"<form id='\" + formID + \"' class='kanban-add-form card kanban-form no-track'>\";\n            let form_header = \"<div class='kanban-item-header'>\";\n            form_header += `\n            <span class='kanban-item-title'>\n               <i class=\"${self.supported_itemtypes[itemtype]['icon']}\"></i>\n               ${self.supported_itemtypes[itemtype]['name']}\n            </span>`;\n            form_header += \"<i class='ti ti-x' title='Close' onclick='$(this).parent().parent().remove()'></i></div>\";\n            add_form += form_header;\n\n            add_form += \"<div class='kanban-item-content'>\";\n            $.each(self.supported_itemtypes[itemtype]['fields'], function(name, options) {\n                const input_type = options['type'] !== undefined ? options['type'] : 'text';\n                const value = options['value'] !== undefined ? options['value'] : '';\n\n                if (input_type.toLowerCase() === 'textarea') {\n                    add_form += \"<textarea class='form-control' name='\" + name + \"'\";\n                    if (options['placeholder'] !== undefined) {\n                        add_form += \" placeholder='\" + options['placeholder'] + \"'\";\n                    }\n                    if (value !== undefined) {\n                        add_form += \" value='\" + value + \"'\";\n                    }\n                    add_form += \"></textarea>\";\n                } else if (input_type.toLowerCase() === 'raw') {\n                    add_form += value;\n                } else {\n                    add_form += \"<input class='form-control' type='\" + input_type + \"' name='\" + name + \"'\";\n                    if (options['placeholder'] !== undefined) {\n                        add_form += \" placeholder='\" + options['placeholder'] + \"'\";\n                    }\n                    if (value !== undefined) {\n                        add_form += \" value='\" + value + \"'\";\n                    }\n                    add_form += \"/>\";\n                }\n            });\n            add_form += \"</div>\";\n\n            const column_id_elements = column_el.prop('id').split('-');\n            const column_value = column_id_elements[column_id_elements.length - 1];\n            add_form += \"<input type='hidden' name='\" + self.column_field.id + \"' value='\" + column_value + \"'/>\";\n            add_form += \"<input type='submit' value='\" + __('Add') + \"' name='add' class='btn btn-primary'/>\";\n            add_form += \"</form>\";\n            $(column_el.find('.kanban-body')[0]).append(add_form);\n            $('#' + formID).get(0).scrollIntoView(false);\n        };\n\n        /**\n       * Add a new form to the Kanban column to add multiple new items of the specified itemtype.\n       * @since 9.5.0\n       * @param {string|Element|jQuery} column_el The column\n       * @param {string} itemtype The itemtype that is being added\n       */\n        this.showBulkAddItemForm = function(column_el, itemtype) {\n            if (!(column_el instanceof jQuery)) {\n                column_el = $(column_el);\n            }\n\n            const uniqueID = Math.floor(Math.random() * 999999);\n            const formID = \"form_add_\" + itemtype + \"_\" + uniqueID;\n            let add_form = \"<form id='\" + formID + \"' class='kanban-add-form kanban-bulk-add-form kanban-form no-track'>\";\n\n            add_form += `\n            <div class='kanban-item-header'>\n                <span class='kanban-item-title'>\n                   <i class=\"${self.supported_itemtypes[itemtype]['icon']}\"></i>\n                   ${self.supported_itemtypes[itemtype]['name']}\n                </span>\n                <i class='ti ti-x' title='Close' onclick='$(this).parent().parent().remove()'></i>\n                <div>\n                    <span class=\"kanban-item-subtitle\">${__(\"One item per line\")}</span>\n                 </div>\n           </div>\n         `;\n\n            add_form += \"<div class='kanban-item-content'>\";\n            $.each(self.supported_itemtypes[itemtype]['fields'], function(name, options) {\n                const input_type = options['type'] !== undefined ? options['type'] : 'text';\n                const value = options['value'] !== undefined ? options['value'] : '';\n\n                // We want to include all hidden fields as they are usually mandatory (project ID)\n                if (input_type === 'hidden') {\n                    add_form += \"<input type='hidden' name='\" + name + \"'\";\n                    if (value !== undefined) {\n                        add_form += \" value='\" + value + \"'\";\n                    }\n                    add_form += \"/>\";\n                } else if (input_type.toLowerCase() === 'raw') {\n                    add_form += value;\n                }\n            });\n            add_form += \"<textarea name='bulk_item_list'></textarea>\";\n            add_form += \"</div>\";\n\n            const column_id_elements = column_el.prop('id').split('-');\n            const column_value = column_id_elements[column_id_elements.length - 1];\n            add_form += \"<input type='hidden' name='\" + self.column_field.id + \"' value='\" + column_value + \"'/>\";\n            add_form += \"<input type='submit' value='\" + __('Add') + \"' name='add' class='submit'/>\";\n            add_form += \"</form>\";\n            $(column_el.find('.kanban-body')[0]).append(add_form);\n            $('#' + formID).get(0).scrollIntoView(false);\n            $(\"#\" + formID).on('submit', function(e) {\n                e.preventDefault();\n                const form = $(e.target);\n                const data = {\n                    inputs: form.serialize(),\n                    itemtype: form.prop('id').split('_')[2],\n                    action: 'bulk_add_item'\n                };\n\n                $.ajax({\n                    method: 'POST',\n                    //async: false,\n                    url: (self.ajax_root + \"kanban.php\"),\n                    data: data\n                }).done(function() {\n                    $('#'+formID).remove();\n                    self.refresh();\n                });\n            });\n        };\n\n        /**\n       * Create the add column form and add it to the DOM.\n       * @since 9.5.0\n       */\n        const buildAddColumnForm = function() {\n            const uniqueID = Math.floor(Math.random() * 999999);\n            const formID = \"form_add_column_\" + uniqueID;\n            self.add_column_form = '#' + formID;\n            let add_form = `\n            <div id=\"${formID}\" class=\"kanban-form kanban-add-column-form dropdown-menu\" style=\"display: none\">\n                <form class='no-track'>\n                    <div class='kanban-item-header'>\n                        <span class='kanban-item-title'>${__('Add a column from existing status')}</span>\n                    </div>\n                    <div class='kanban-item-content'></div>\n         `;\n            if (self.rights.canCreateColumn()) {\n                add_form += `\n               <hr>${__('Or add a new status')}\n               <button role='button' class='btn btn-primary kanban-create-column d-block'>${__('Create status')}</button>\n            `;\n            }\n            add_form += \"</form></div>\";\n            $(self.element).prepend(add_form);\n        };\n\n        /**\n       * Create the create column form and add it to the DOM.\n       * @since 9.5.0\n       */\n        const buildCreateColumnForm = function() {\n            const uniqueID = Math.floor(Math.random() * 999999);\n            const formID = \"form_create_column_\" + uniqueID;\n            self.create_column_form = '#' + formID;\n            let create_form = `\n            <div id='${formID}' class='kanban-form kanban-create-column-form dropdown-menu' style='display: none'>\n                <form class='no-track'>\n                    <div class='kanban-item-header'>\n                        <span class='kanban-item-title'>${__('Create status')}</span>\n                    </div>\n                    <div class='kanban-item-content'>\n                    <input name='name' class='form-control'/>\n         `;\n            $.each(self.column_field.extra_fields, function(name, field) {\n                if (name === undefined) {\n                    return true;\n                }\n                let value = (field.value !== undefined) ? field.value : '';\n                if (field.type === undefined || field.type === 'text') {\n                    create_form += \"<input name='\" + name + \"' value='\" + value + \"'/>\";\n                } else if (field.type === 'color') {\n                    if (value.length === 0) {\n                        value = '#000000';\n                    }\n                    create_form += \"<input type='color' name='\" + name + \"' value='\" + value + \"'/>\";\n                }\n            });\n            create_form += \"</div>\";\n            create_form += \"<button type='submit' class='btn btn-primary'>\" + __('Create status') + \"</button>\";\n            create_form += \"</form></div>\";\n            $(self.element).prepend(create_form);\n        };\n\n        /**\n       * Delay the background refresh for a short amount of time.\n       * This should be called any time the user is in the middle of an action so that the refresh is not disruptive.\n       * @since 9.5.0\n       */\n        const delayRefresh = function() {\n            window.clearTimeout(_backgroundRefreshTimer);\n            _backgroundRefreshTimer = window.setTimeout(_backgroundRefresh, 10000);\n        };\n\n        /**\n       * Refresh the Kanban with the new set of columns.\n       *    This will clear all existing columns from the Kanban, and replace them with what is provided by the server.\n       * @since 9.5.0\n       * @param {function} success Callback for when the Kanban is successfully refreshed.\n       * @param {function} fail Callback for when the Kanban fails to be refreshed.\n       * @param {function} always Callback that is called regardless of the success of the refresh.\n       * @param {boolean} initial_load True if this is the first load. On the first load, the user state is not saved.\n       */\n        this.refresh = function(success, fail, always, initial_load) {\n            const _refresh = function() {\n                $.ajax({\n                    method: 'GET',\n                    //async: false,\n                    url: (self.ajax_root + \"kanban.php\"),\n                    data: {\n                        action: \"refresh\",\n                        itemtype: self.item.itemtype,\n                        items_id: self.item.items_id,\n                        column_field: self.column_field.id\n                    }\n                }).done(function(columns, textStatus, jqXHR) {\n                    preloadBadgeCache({\n                        trim_cache: true\n                    });\n                    clearColumns();\n                    self.columns = columns;\n                    fillColumns();\n                    // Re-filter kanban\n                    self.filter();\n                    if (success) {\n                        success(columns, textStatus, jqXHR);\n                        $(self.element).trigger('kanban:refresh');\n                    }\n                }).fail(function(jqXHR, textStatus, errorThrown) {\n                    if (fail) {\n                        fail(jqXHR, textStatus, errorThrown);\n                    }\n                }).always(function() {\n                    if (always) {\n                        always();\n                    }\n                });\n            };\n            if (initial_load === undefined || initial_load === true) {\n                _refresh();\n            } else {\n                saveState(false, false, null, null, function() {\n                    loadState(_refresh);\n                });\n            }\n\n        };\n\n        /**\n       * Append a column to the Kanban\n       * @param {number} column_id The ID of the column being added.\n       * @param {array} column The column data array.\n       * @param {string|Element|jQuery} columns_container The container that the columns are in.\n       *    If left null, a new JQueryobject is created with the selector \"self.element + ' .kanban-container .kanban-columns'\".\n       * @param {boolean} revalidate If true, all other columns are checked to see if they have an item in this new column.\n       *    If they do, the item is removed from that other column and the counter is updated.\n       *    This is useful if an item is changed in another tab or by another user to be in the new column after the original column was added.\n       */\n        const appendColumn = function(column_id, column, columns_container, revalidate) {\n            if (columns_container == null) {\n                columns_container = $(self.element + \" .kanban-container .kanban-columns\").first();\n            }\n            revalidate = revalidate !== undefined ? revalidate : false;\n\n            column['id'] = \"column-\" + self.column_field.id + '-' + column_id;\n            let collapse = '';\n            let position = -1;\n            $.each(self.user_state.state, function(order, s_column) {\n                if (parseInt(s_column['column']) === parseInt(column_id)) {\n                    position = order;\n                    if (s_column['folded'] === true || s_column['folded'] === 'true') {\n                        collapse = 'collapsed';\n                        return false;\n                    }\n                }\n            });\n            const _protected = column['_protected'] ? 'kanban-protected' : '';\n            const column_classes = \"kanban-column card \" + collapse + \" \" + _protected;\n\n            const column_top_color = (typeof column['header_color'] !== 'undefined') ? column['header_color'] : '';\n            const column_html = \"<div id='\" + column['id'] + \"' style='border-top-color: \"+column_top_color+\"' class='\"+column_classes+\"'></div>\";\n            let column_el = null;\n            if (position < 0) {\n                column_el = $(column_html).appendTo(columns_container);\n            } else {\n                const prev_column = $(columns_container).find('.kanban-column:nth-child(' + (position) + ')');\n                if (prev_column.length === 1) {\n                    column_el = $(column_html).insertAfter(prev_column);\n                } else {\n                    column_el = $(column_html).appendTo(columns_container);\n                }\n            }\n            const cards = column['items'] !== undefined ? column['items'] : [];\n\n            const column_header = $(\"<header class='kanban-column-header'></header>\");\n            const column_content = $(\"<div class='kanban-column-header-content'></div>\").appendTo(column_header);\n            const count = column['items'] !== undefined ? column['items'].length : 0;\n            const column_left = $(\"<span class=''></span>\").appendTo(column_content);\n            const column_right = $(\"<span class=''></span>\").appendTo(column_content);\n            if (self.rights.canModifyView()) {\n                $(column_left).append(\"<i class='fas fa-caret-right fa-lg kanban-collapse-column btn btn-sm btn-ghost-secondary' title='\" + __('Toggle collapse') + \"'/>\");\n            }\n            $(column_left).append(\"<span class='kanban-column-title badge \"+(column['color_class'] || '')+\"' style='background-color: \"+column['header_color']+\"; color: \"+column['header_fg_color']+\";'>\" + column['name'] + \"</span></span>\");\n            $(column_right).append(\"<span class='kanban_nb badge bg-secondary'>\"+count+\"</span>\");\n            $(column_right).append(getColumnToolbarElement(column));\n            $(column_el).prepend(column_header);\n            // Re-apply header text color to handle the actual background color now that the element is actually in the DOM.\n            const column_title = $('#'+column['id']).find('.kanban-column-title').eq(0);\n            let header_color = column_title.css('background-color') ? rgbToHex(column_title.css('background-color')) : '#ffffff';\n            const is_header_light = header_color ? isLightColor(header_color) : !self.dark_theme;\n            const header_text_class = is_header_light ? 'kanban-text-dark' : 'kanban-text-light';\n            column_title.removeClass('kanban-text-light kanban-text-dark');\n            column_title.addClass(header_text_class);\n\n            const column_body = $(\"<ul class='kanban-body card-body'></ul>\").appendTo(column_el);\n\n            column_el.attr('data-drop-only', column['drop_only']);\n\n            if (!column['drop_only']) {\n                let added = [];\n                $.each(self.user_state.state, function (i, c) {\n                    if (c['column'] === column_id) {\n                        $.each(c['cards'], function (i2, card) {\n                            $.each(cards, function (i3, card2) {\n                                if (card2['id'] === card) {\n                                    appendCard(column_el, card2);\n                                    added.push(card2['id']);\n                                    return false;\n                                }\n                            });\n                        });\n                    }\n                });\n\n                $.each(cards, function (card_id, card) {\n                    if (added.indexOf(card['id']) < 0) {\n                        appendCard(column_el, card, revalidate);\n                    }\n                });\n            } else {\n                $(`\n               <li class=\"position-relative\" style=\"width: 250px\">\n                  ${__('This column cannot support showing cards due to how many cards would be shown. You can still drag cards into this column.')}\n               </li>\n            `).appendTo(column_body);\n            }\n\n            refreshSortables();\n        };\n\n        /**\n       * Append the card in the specified column, handle duplicate cards in case the card moved, generate badges, and update column counts.\n       * @since 9.5.0\n       * @param {Element|string} column_el The column to add the card to.\n       * @param {Object} card The card to append.\n       * @param {boolean} revalidate Check for duplicate cards.\n       */\n        const appendCard = function(column_el, card, revalidate = false) {\n            if (revalidate) {\n                const existing = $('#' + card['id']);\n                if (existing !== undefined) {\n                    const existing_column = existing.closest('.kanban-column');\n                    existing.remove();\n                    self.updateColumnCount(existing_column);\n                }\n            }\n\n            const itemtype = card['id'].split('-')[0];\n            const col_body = $(column_el).find('.kanban-body').first();\n            const readonly = card['_readonly'] !== undefined && (card['_readonly'] === true || card['_readonly'] === 1);\n            let card_el = `\n            <li id=\"${card['id']}\" class=\"kanban-item card ${readonly ? 'readonly' : ''} ${card['is_deleted'] ? 'deleted' : ''}\">\n                <div class=\"kanban-item-header\">\n                    <span class=\"kanban-item-title\" title=\"${card['title_tooltip']}\">\n                    <i class=\"${self.supported_itemtypes[itemtype]['icon']}\"></i>\n                        ${card['title']}\n                    </span>\n                    <i class=\"kanban-item-overflow-actions fas fa-ellipsis-h btn btn-sm btn-ghost-secondary\"></i>\n                </div>\n                <div class=\"kanban-item-content\">${(card['content'] || '')}</div>\n                <div class=\"kanban-item-team\">\n         `;\n            const team_count = Object.keys(card['_team']).length;\n            if (card[\"_team\"] !== undefined && team_count > 0) {\n                $.each(Object.values(card[\"_team\"]).slice(0, self.max_team_images), function(teammember_id, teammember) {\n                    card_el += getTeamBadge(teammember);\n                });\n                if (card[\"_team\"].length > self.max_team_images) {\n                    card_el += generateOverflowBadge(team_count - self.max_team_images);\n                }\n            }\n            card_el += \"</div></li>\";\n            const card_obj = $(card_el).appendTo(col_body);\n            card_obj.data('form_link', card['_form_link'] || undefined);\n            if (card['_metadata']) {\n                $.each(card['_metadata'], (k, v) => {\n                    card_obj.data(k, v);\n                });\n            }\n            card_obj.data('_team', card['_team']);\n            self.updateColumnCount(column_el);\n        };\n\n        this.refreshSearchTokenizer = () => {\n            self.filter_input.tokenizer.clearAutocomplete();\n\n            // Refresh core tags autocomplete\n            self.filter_input.tokenizer.setAutocomplete('type', Object.keys(self.supported_itemtypes).map(k => `<i class=\"${self.supported_itemtypes[k].icon} me-1\"></i>` + k));\n            self.filter_input.tokenizer.setAutocomplete('milestone', [\"true\", \"false\"]);\n\n            $(self.element).trigger('kanban:refresh_tokenizer', self.filter_input.tokenizer);\n        };\n\n        /**\n       * Un-hide all filtered items.\n       * This does not reset the filters as it is called whenever the items are being re-filtered.\n       * To clear the filter, set self.filters to {_text: '*'} and call self.filter().\n       * @since 9.5.0\n       */\n        this.clearFiltered = function() {\n            $(self.element + ' .kanban-item').each(function(i, item) {\n                $(item).removeClass('filtered-out');\n            });\n        };\n\n        /**\n       * Applies the current filters.\n       * @since 9.5.0\n       */\n        this.filter = function() {\n            $(self.element).trigger('kanban:pre_filter', self.filters);\n            // Unhide all items in case they are no longer filtered\n            self.clearFiltered();\n\n            $(self.element + ' .kanban-item').each(function(i, item) {\n                const card = $(item);\n                let shown = true;\n                const title = card.find(\"span.kanban-item-title\").text().trim();\n\n                const filter_text = (filter_data, target, matchers = ['regex', 'includes']) => {\n                    if (filter_data.prefix === '#' && matchers.includes('regex')) {\n                        return filter_regex_match(filter_data, target);\n                    } else {\n                        if (matchers.includes('includes')) {\n                            filter_include(filter_data, target);\n                        }\n                        if (matchers.includes('equals')) {\n                            filter_equal(filter_data, target);\n                        }\n                    }\n                };\n\n                const filter_include = (filter_data, haystack) => {\n                    if ((!haystack.toLowerCase().includes(filter_data.term.toLowerCase())) !== filter_data.exclusion) {\n                        shown = false;\n                    }\n                };\n\n                const filter_equal = (filter_data, target) => {\n                    if ((target != filter_data.term) !== filter_data.exclusion) {\n                        shown = false;\n                    }\n                };\n\n                const filter_regex_match = (filter_data, target) => {\n                    try {\n                        if ((!target.trim().match(filter_data.term)) !== filter_data.exclusion) {\n                            shown = false;\n                        }\n                    } catch (e) {\n                        // Invalid regex\n                        glpi_toast_error(\n                            __('The regular expression you entered is invalid. Please check it and try again.'),\n                            __('Invalid regular expression')\n                        );\n                    }\n                };\n\n                const filter_teammember = (filter_data, itemtype) => {\n                    const team_members = card.data('_team');\n                    let has_matching_member = false;\n                    $.each(team_members, (i, m) => {\n                        if (m.itemtype === itemtype && (m.name.toLowerCase().includes(filter_data.term.toLowerCase()) !== filter_data.exclusion)) {\n                            has_matching_member = true;\n                        }\n                    });\n                    if (!has_matching_member) {\n                        shown = false;\n                    }\n                };\n\n                if (self.filters._text) {\n                    try {\n                        if (!title.match(new RegExp(self.filters._text, 'i'))) {\n                            shown = false;\n                        }\n                    } catch (err) {\n                        // Probably not a valid regular expression. Use simple contains matching.\n                        if (!title.toLowerCase().includes(self.filters._text.toLowerCase())) {\n                            shown = false;\n                        }\n                    }\n                }\n\n                if (self.filters.title !== undefined) {\n                    filter_text(self.filters.title, title);\n                }\n\n                if (self.filters.type !== undefined) {\n                    filter_text(self.filters.type, card.attr('id').split('-')[0], ['regex', 'equals']);\n                }\n\n                if (self.filters.milestone !== undefined) {\n                    self.filters.milestone.term = (self.filters.milestone.term == '0' || self.filters.milestone.term == 'false') ? 0 : 1;\n                    filter_equal(self.filters.milestone, card.data('is_milestone'));\n                }\n\n                if (self.filters.content !== undefined) {\n                    filter_text(self.filters.content, card.data('content'));\n                }\n\n                if (self.filters.team !== undefined) {\n                    const team_search = self.filters.team.term.toLowerCase();\n                    const team_members = card.data('_team');\n                    let has_matching_member = false;\n                    $.each(team_members, (i, m) => {\n                        if (m.name.toLowerCase().includes(team_search)) {\n                            has_matching_member = true;\n                        }\n                    });\n                    if (!has_matching_member) {\n                        shown = false;\n                    }\n                }\n\n                if (self.filters.user !== undefined) {\n                    filter_teammember(self.filters.user, 'User');\n                }\n\n                if (self.filters.group !== undefined) {\n                    filter_teammember(self.filters.group, 'Group');\n                }\n\n                if (self.filters.supplier !== undefined) {\n                    filter_teammember(self.filters.supplier, 'Supplier');\n                }\n\n                if (self.filters.contact !== undefined) {\n                    filter_teammember(self.filters.contact, 'Contact');\n                }\n\n                if (!shown) {\n                    card.addClass('filtered-out');\n                }\n            });\n\n            $(self.element).trigger('kanban:filter', {\n                filters: self.filters,\n                kanban_element: self.element\n            });\n\n            // Update column counters\n            $(self.element + ' .kanban-column').each(function(i, column) {\n                self.updateColumnCount(column);\n            });\n            $(self.element).trigger('kanban:post_filter', self.filters);\n        };\n\n        /**\n       * Toggle the collapsed state of the specified column.\n       * After toggling the collapse state, the server is notified of the change.\n       * @since 9.5.0\n       * @param {string|Element|jQuery} column_el The column element or object.\n       */\n        this.toggleCollapseColumn = function(column_el) {\n            if (!(column_el instanceof jQuery)) {\n                column_el = $(column_el);\n            }\n            column_el.toggleClass('collapsed');\n            const action = column_el.hasClass('collapsed') ? 'collapse_column' : 'expand_column';\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: action,\n                    column: getColumnIDFromElement(column_el),\n                    kanban: self.item\n                }\n            });\n        };\n\n        /**\n       * Load a column from the server and append it to the Kanban if it is visible.\n       * @since 9.5.0\n       * @param {number} column_id The ID of the column to load.\n       * @param {boolean} nosave If true, the column state is not saved after adding the new column.\n       *    This should be false when the state is being loaded, and new columns are being added as a part of that process.\n       *    The default behaviour is to save the column state after adding the column (if successful).\n    *    @param {boolean} revalidate If true, all other columns are checked to see if they have an item in this new column.\n       *    If they do, the item is removed from that other column and the counter is updated.\n       *    This is useful if an item is changed in another tab or by another user to be in the new column after the original column was added.\n       * @param {function} callback Function to call after the column is loaded (or fails to load).\n       */\n        const loadColumn = function(column_id, nosave, revalidate, callback = undefined) {\n            nosave = nosave !== undefined ? nosave : false;\n\n            let skip_load = false;\n            $.each(self.user_state.state, function(i, c) {\n                if (parseInt(c['column']) === parseInt(column_id)) {\n                    if (!c['visible']) {\n                        skip_load = true;\n                    }\n                    return false;\n                }\n            });\n            if (skip_load) {\n                if (callback) {\n                    callback();\n                }\n                return;\n            }\n\n            $.ajax({\n                method: 'GET',\n                url: (self.ajax_root + \"kanban.php\"),\n                async: false,\n                data: {\n                    action: \"get_column\",\n                    itemtype: self.item.itemtype,\n                    items_id: self.item.items_id,\n                    column_field: self.column_field.id,\n                    column_id: column_id\n                }\n            }).done(function(column) {\n                if (column !== undefined && Object.keys(column).length > 0) {\n                    self.columns[column_id] = column[column_id];\n                    appendColumn(column_id, self.columns[column_id], null, revalidate);\n                }\n            }).always(function() {\n                if (callback) {\n                    callback();\n                }\n            });\n        };\n\n        /**\n       * Create a new column and send it to the server.\n       * This will create a new item in the DB based on the item type used for columns.\n       * It does not automatically add it to the Kanban.\n       * @since 9.5.0\n       * @param {string} name The name of the new column.\n       * @param {Object} params Extra fields needed to create the column.\n       * @param {function} callback Function to call after the column is created (or fails to be created).\n       */\n        const createColumn = function(name, params, callback) {\n            if (name === undefined || name.length === 0) {\n                if (callback) {\n                    callback();\n                }\n                return;\n            }\n            $.ajax({\n                method: 'POST',\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"create_column\",\n                    itemtype: self.item.itemtype,\n                    items_id: self.item.items_id,\n                    column_field: self.column_field.id,\n                    column_name: name,\n                    params: params\n                }\n            }).always(function() {\n                if (callback) {\n                    callback();\n                }\n            });\n        };\n\n        /**\n       * Update the user state object, but do not send it to the server.\n       * This should only be done if there is no state stored on the server, so one needs to be built.\n       * Do NOT use this for changes to the state such as moving cards/columns!\n       * @since 9.5.0\n       */\n        const updateColumnState = function() {\n            const new_state = {\n                is_dirty: true,\n                state: {}\n            };\n            $(self.element + \" .kanban-column\").each(function(i, element) {\n                const column = $(element);\n                const element_id = column.prop('id').split('-');\n                const column_id = element_id[element_id.length - 1];\n                if (self.user_state.state[i] === undefined || column_id !== self.user_state.state[i]['column'] ||\n               self.user_state.state[i]['folded'] !== column.hasClass('collapsed')) {\n                    new_state.is_dirty = true;\n                }\n                new_state.state[i] = {\n                    column: column_id,\n                    folded: column.hasClass('collapsed'),\n                    cards: {}\n                };\n                $.each(column.find('.kanban-item'), function(i2, element2) {\n                    new_state.state[i]['cards'][i2] = $(element2).prop('id');\n                    if (self.user_state.state[i] !== undefined && self.user_state.state[i]['cards'] !== undefined && self.user_state.state[i]['cards'][i2] !== undefined  &&\n                  self.user_state.state[i]['cards'][i2] !== new_state.state[i]['cards'][i2]) {\n                        new_state.is_dirty = true;\n                    }\n                });\n            });\n            self.user_state = new_state;\n        };\n\n        this.showCardPanel = (card) => {\n            if (!card) {\n                $('.item-details-panel').remove();\n            }\n            const [itemtype, items_id] = card.prop('id').split('-');\n            $.ajax({\n                method: 'GET',\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    itemtype: itemtype,\n                    items_id: items_id,\n                    action: 'load_item_panel'\n                }\n            }).done((result) => {\n                $('.item-details-panel').remove();\n                $(self.element).append($(result));\n                $('.item-details-panel').data('card', card);\n                // Load badges\n                $('.item-details-panel ul.team-list li').each((i, l) => {\n                    l = $(l);\n                    const member_itemtype = l.attr('data-itemtype');\n                    const member_items_id = l.attr('data-items_id');\n                    let member_item = getTeamBadge({\n                        itemtype: member_itemtype,\n                        id: member_items_id,\n                        name: l.attr('data-name'),\n                        realname: l.attr('data-realname'),\n                        firstname: l.attr('data-firstname')\n                    });\n                    l.append(`\n                     <div class=\"member-details\">\n                        ${member_item}\n                        ${escapeMarkupText(l.attr('data-name')) || `${member_itemtype} (${member_items_id})`}\n                     </div>\n                     <button type=\"button\" name=\"delete\" class=\"btn btn-ghost-danger\">\n                        <i class=\"ti ti-x\" title=\"${__('Delete')}\"></i>\n                     </button>\n                  `);\n                });\n            });\n\n            $(self.element).on('click', '.item-details-panel ul.team-list button[name=\"delete\"]', (e) => {\n                const list_item = $(e.target).closest('li');\n                const member_itemtype = list_item.attr('data-itemtype');\n                const member_items_id = list_item.attr('data-items_id');\n                const panel = $(e.target).closest('.item-details-panel');\n                const itemtype = panel.attr('data-itemtype');\n                const items_id = panel.attr('data-items_id');\n                const role = list_item.closest('.list-group').attr('data-role');\n\n                if (itemtype && items_id) {\n                    removeTeamMember(itemtype, items_id, member_itemtype, member_items_id, role);\n                    list_item.remove();\n                }\n            });\n        };\n\n        this.showTeamModal = (card_el) => {\n            const [card_itemtype, card_items_id] = card_el.prop('id').split('-', 2);\n            let content = '';\n\n            const teammember_types_dropdown = $(`#kanban-teammember-item-dropdown-${card_itemtype}`).html();\n            content += `\n            ${teammember_types_dropdown}\n            <button type=\"button\" name=\"add\" class=\"btn btn-primary\">${_x('button', 'Add')}</button>\n         `;\n            const modal = $('#kanban-modal');\n            modal.on('click', 'button[name=\"add\"]', () => {\n                const itemtype = modal.find('select[name=\"itemtype\"]').val();\n                const items_id = modal.find('select[name=\"items_id\"]').val();\n                const role = modal.find('select[name=\"role\"]').val();\n\n                if (itemtype && items_id) {\n                    addTeamMember(card_itemtype, card_items_id, itemtype, items_id, role).done(() => {\n                        self.showCardPanel($(`#${card_itemtype}-${card_items_id}`));\n                    });\n                    hideModal();\n                }\n            });\n            modal.on('click', 'button[name=\"delete\"]', (e) => {\n                const list_item = $(e.target).closest('li');\n                const itemtype = list_item.attr('data-itemtype');\n                const items_id = list_item.attr('data-items-id');\n                const role = list_item.closest('ul').attr('data-role');\n\n                if (itemtype && items_id) {\n                    removeTeamMember(card_itemtype, card_items_id, itemtype, items_id, role).done(() => {\n                        self.showCardPanel($(`#${card_itemtype}-${card_items_id}`));\n                    });\n                    list_item.remove();\n                }\n            });\n            showModal(content, {\n                card_el: card_el\n            });\n        };\n\n        const addTeamMember = (itemtype, items_id, member_type, members_id, role) => {\n            return $.ajax({\n                method: 'POST',\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"add_teammember\",\n                    itemtype: itemtype,\n                    items_id: items_id,\n                    itemtype_teammember: member_type,\n                    items_id_teammember: members_id,\n                    role: role\n                }\n            }).done(() => {\n                self.refresh(null, null, function() {\n                    _backgroundRefreshTimer = window.setTimeout(_backgroundRefresh, self.background_refresh_interval * 60 * 1000);\n                }, false);\n            }).fail(() => {\n                glpi_toast_error(__('Failed to add team member'), __('Error'));\n            });\n        };\n\n        const removeTeamMember = (itemtype, items_id, member_type, members_id, role) => {\n            return $.ajax({\n                method: 'POST',\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"delete_teammember\",\n                    itemtype: itemtype,\n                    items_id: items_id,\n                    itemtype_teammember: member_type,\n                    items_id_teammember: members_id,\n                    role: role\n                }\n            }).done(() => {\n                self.refresh(null, null, function() {\n                    _backgroundRefreshTimer = window.setTimeout(_backgroundRefresh, self.background_refresh_interval * 60 * 1000);\n                }, false);\n            }).fail(() => {\n                glpi_toast_error(__('Failed to remove team member'), __('Error'));\n            });\n        };\n\n        /**\n       * Restore the Kanban state for the user from the DB if it exists.\n       * This restores the visible columns and their collapsed state.\n       * @since 9.5.0\n       */\n        const loadState = function(callback) {\n            $(self.element).trigger('kanban:pre_load_state');\n            $.ajax({\n                type: \"GET\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"load_column_state\",\n                    itemtype: self.item.itemtype,\n                    items_id: self.item.items_id,\n                    last_load: self.last_refresh\n                }\n            }).done(function(state) {\n                if (state['state'] === undefined || state['state'] === null || Object.keys(state['state']).length === 0) {\n                    if (callback) {\n                        callback(false);\n                    }\n                    return;\n                }\n                self.user_state = {\n                    is_dirty: false,\n                    state: state['state']\n                };\n\n                const indices = Object.keys(state['state']);\n                for (let i = 0; i < indices.length; i++) {\n                    const index = indices[i];\n                    const entry = state['state'][index];\n                    const element = $('#column-' + self.column_field.id + \"-\" + entry.column);\n                    if (element.length === 0) {\n                        loadColumn(entry.column, true, false);\n                    }\n                    $(self.element + ' .kanban-columns .kanban-column:nth-child(' + index + ')').after(element);\n                    if (entry.folded === 'true') {\n                        element.addClass('collapsed');\n                    }\n                }\n                self.last_refresh = state['timestamp'];\n\n                if (callback) {\n                    callback(true);\n                    $(self.element).trigger('kanban:post_load_state');\n                }\n            });\n        };\n\n        /**\n       * Saves the current state of the Kanban to the DB for the user.\n       * This saves the visible columns and their collapsed state.\n       * This should only be done if there is no state stored on the server, so one needs to be built.\n       * Do NOT use this for changes to the state such as moving cards/columns!\n       * @since 9.5.0\n       * @param {boolean} rebuild_state If true, the column state is recalculated before saving.\n       *    By default, this is false as updates are done as changes are made in most cases.\n       * @param {boolean} force_save If true, the user state is saved even if it has not changed.\n       * @param {function} success Callback for when the user state is successfully saved.\n       * @param {function} fail Callback for when the user state fails to be saved.\n       * @param {function} always Callback that is called regardless of the success of the save.\n       */\n        const saveState = function(rebuild_state, force_save, success, fail, always) {\n            $(self.element).trigger('kanban:pre_save_state');\n            rebuild_state = rebuild_state !== undefined ? rebuild_state : false;\n            if (!force_save && !self.user_state.is_dirty) {\n                if (always) {\n                    always();\n                }\n                return;\n            }\n            // Reload state in case it changed in another tab/window\n            if (rebuild_state) {\n            // Build state of the Kanban\n                updateColumnState();\n            }\n            if (self.user_state.state === undefined || self.user_state.state === null || Object.keys(self.user_state.state).length === 0) {\n                if (always) {\n                    always();\n                }\n                return;\n            }\n            $.ajax({\n                type: \"POST\",\n                url: (self.ajax_root + \"kanban.php\"),\n                data: {\n                    action: \"save_column_state\",\n                    itemtype: self.item.itemtype,\n                    items_id: self.item.items_id,\n                    state: self.user_state.state\n                }\n            }).done(function(data, textStatus, jqXHR) {\n                self.user_state.is_dirty = false;\n                if (success) {\n                    success(data, textStatus, jqXHR);\n                    $(self.element).trigger('kanban:post_save_state');\n                }\n            }).fail(function(jqXHR, textStatus, errorThrown) {\n                if (fail) {\n                    fail(jqXHR, textStatus, errorThrown);\n                }\n            }).always(function() {\n                if (always) {\n                    always();\n                }\n            });\n        };\n\n        /**\n       * Initialize the background refresh mechanism.\n       * @since 9.5.0\n       */\n        const backgroundRefresh = function() {\n            if (self.background_refresh_interval <= 0) {\n                return;\n            }\n            _backgroundRefresh = function() {\n                const sorting = $('.sortable-placeholder');\n                // Check if the user is current sorting items\n                if (sorting.length > 0) {\n                    // Wait 10 seconds and try the background refresh again\n                    delayRefresh();\n                    return;\n                }\n                // Refresh and then schedule the next refresh (minutes)\n                self.refresh(null, null, function() {\n                    _backgroundRefreshTimer = window.setTimeout(_backgroundRefresh, self.background_refresh_interval * 60 * 1000);\n                }, false);\n            };\n            // Schedule initial background refresh (minutes)\n            _backgroundRefreshTimer = window.setTimeout(_backgroundRefresh, self.background_refresh_interval * 60 * 1000);\n        };\n\n        /**\n       * Initialize the Kanban by loading the user's column state, adding the needed elements to the DOM, and starting the background save and refresh.\n       * @since 9.5.0\n       */\n        this.init = function() {\n            $(self.element).data('js_class', self);\n            $(self.element).trigger('kanban:pre_init');\n            loadState(function() {\n                build();\n                $(document).ready(function() {\n                    $.ajax({\n                        type: 'GET',\n                        url: (self.ajax_root + 'kanban.php'),\n                        data: {\n                            action: 'get_switcher_dropdown',\n                            itemtype: self.item.itemtype,\n                            items_id: self.item.items_id\n                        },\n                        success: function($data) {\n                            const switcher = $(self.element + \" .kanban-toolbar select[name='kanban-board-switcher']\");\n                            switcher.replaceWith($data);\n                        }\n                    });\n                    registerEventListeners();\n                    backgroundRefresh();\n                });\n            });\n            $(self.element).trigger('kanban:post_init');\n        };\n\n        initParams(arguments);\n    };\n})();\n"], "filenames": ["js/modules/Kanban/Kanban.js"], "buggy_code_start_loc": [35], "buggy_code_end_loc": [2451], "fixing_code_start_loc": [36], "fixing_code_end_loc": [2452], "type": "CWE-79", "message": "GLPI is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. Kanban is a GLPI view to display Projects, Tickets, Changes or Problems on a task board. In versions prior to 10.0.1 a user can exploit a cross site scripting vulnerability in Kanban by injecting HTML code in its user name. Users are advised to upgrade. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-24876", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-09T19:15:09.587", "lastModified": "2022-06-17T19:22:07.557", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. Kanban is a GLPI view to display Projects, Tickets, Changes or Problems on a task board. In versions prior to 10.0.1 a user can exploit a cross site scripting vulnerability in Kanban by injecting HTML code in its user name. Users are advised to upgrade. There are no known workarounds for this issue."}, {"lang": "es", "value": "GLPI es un paquete gratuito de software de administraci\u00f3n de activos y TI, que proporciona funciones de Service Desk de ITIL, seguimiento de licencias y auditor\u00eda de software. Kanban es una visualizaci\u00f3n de GLPI para mostrar Proyectos, Tickets, Cambios o Problemas en un tablero de tareas. En las versiones anteriores a 10.0.1 un usuario puede explotar una vulnerabilidad de tipo cross site scripting en Kanban al inyectar c\u00f3digo HTML en su nombre de usuario. Es recomendado a usuarios actualizar. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:10.0.0:-:*:*:*:*:*:*", "matchCriteriaId": "B6C1760F-4B01-4775-8481-D93BA28888BF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:10.0.0:beta:*:*:*:*:*:*", "matchCriteriaId": "D0378AD5-BFA0-40CD-BFB5-9D9E0790E9B7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:10.0.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "E82A2E80-7C91-4147-A951-CA25E3AA1F01"}, {"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:10.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "16485B8E-5550-433C-A352-BABBC22DF375"}, {"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:10.0.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "076C11C8-A848-43FB-8C01-E68D85015C58"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/9a3c7487c8761eaa8f3b07589d6dcdfa5d1e4ed6", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-33g2-m556-gccr", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/9a3c7487c8761eaa8f3b07589d6dcdfa5d1e4ed6"}}