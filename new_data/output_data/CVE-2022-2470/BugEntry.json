{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\App\\Http\\Controllers;\n\n\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Request;\nuse MicroweberPackages\\App\\Http\\Middleware\\ApiAuth;\nuse MicroweberPackages\\App\\Http\\Middleware\\SameSiteRefererMiddleware;\nuse MicroweberPackages\\App\\Managers\\Helpers\\VerifyCsrfTokenHelper;\nuse MicroweberPackages\\Helper\\XSSClean;\nuse MicroweberPackages\\View\\View;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n\nclass ApiController  extends FrontendController\n{\n\n    public function api_html()\n    {\n        if (!defined('MW_API_HTML_OUTPUT')) {\n            define('MW_API_HTML_OUTPUT', true);\n        }\n        return $this->api();\n    }\n\n    public function api($api_function = false, $params = false)\n    {\n        if (isset($_REQUEST['api_key']) and user_id() == 0) {\n            api_login($_REQUEST['api_key']);\n        }\n\n        if (!defined('MW_API_CALL')) {\n            define('MW_API_CALL', true);\n        }\n\n        $set_constants = true;\n        if (!mw_is_installed()) {\n            $set_constants = false;\n        }\n\n        $mod_class_api = false;\n        $mod_class_api_called = false;\n        $mod_class_api_class_exist = false;\n        $caller_commander = false;\n        if ($api_function == false) {\n            $api_function_full = app()->url_manager->string();\n            $api_function_full = $this->app->format->replace_once('api_html', '', $api_function_full);\n            $api_function_full = $this->app->format->replace_once('api/api', 'api', $api_function_full);\n\n            $api_function_full = $this->app->format->replace_once('api', '', $api_function_full);\n            $api_function_full = trim($api_function_full, '/');\n\n            //$api_function_full = substr($api_function_full, 4);\n        } else {\n            $api_function_full = $api_function;\n        }\n        if (isset($api_function_full) and $api_function_full != '') {\n            if (ltrim($api_function_full, '/') == 'module') {\n                $set_constants = false;\n            }\n        }\n        if ($set_constants == true) {\n            $this->app->content_manager->define_constants();\n        }\n\n\n        if (defined('TEMPLATE_DIR')) {\n             app()->template_manager->boot_template();\n        }\n\n        //$api_function_full = str_ireplace('api/', '', $api_function_full);\n\n        $api_function_full = str_replace('..', '', $api_function_full);\n        $api_function_full = str_replace('\\\\', '/', $api_function_full);\n        $api_function_full = str_replace('//', '/', $api_function_full);\n\n        $api_function_full = app()->database_manager->escape_string($api_function_full);\n        if (is_string($api_function_full)) {\n            $mod_api_class = explode('/', $api_function_full);\n        } else {\n            $mod_api_class = $api_function_full;\n        }\n        $try_class_func = array_pop($mod_api_class);\n\n        // $try_class_func2 = array_pop($mod_api_class);\n        $mod_api_class_copy = $mod_api_class;\n        $try_class_func2 = array_pop($mod_api_class_copy);\n        $mod_api_class2 = implode(DS, $mod_api_class_copy);\n\n        $mod_api_class = implode(DS, $mod_api_class);\n        $mod_api_class_clean = ltrim($mod_api_class, '/');\n        $mod_api_class_clean = ltrim($mod_api_class_clean, '\\\\');\n        $mod_api_class_clean_uc1 = ucfirst($mod_api_class_clean);\n\n        $mod_api_class1 = normalize_path(modules_path() . $mod_api_class, false) . '.php';\n        $mod_api_class_native = normalize_path(mw_includes_path() . $mod_api_class, false) . '.php';\n        $mod_api_class_native_system = normalize_path(dirname(MW_PATH) . DS . $mod_api_class, false) . '.php';\n        $mod_api_class_native_global_ns = normalize_path(mw_includes_path() . 'classes' . DS . $mod_api_class2, false) . '.php';\n        $mod_api_class1_uc1 = normalize_path(modules_path() . $mod_api_class_clean_uc1, false) . '.php';\n        $mod_api_class_native_uc1 = normalize_path(mw_includes_path() . $mod_api_class_clean_uc1, false) . '.php';\n        $mod_api_class_native_global_ns_uc1 = normalize_path(mw_includes_path() . 'classes' . DS . $mod_api_class_clean_uc1, false) . '.php';\n\n        $mod_api_class2 = normalize_path(modules_path() . DS . $mod_api_class_clean . DS . $mod_api_class_clean, false) . '.php';\n        $mod_api_class2_uc1 = normalize_path(modules_path() . DS . $mod_api_class_clean . DS . $mod_api_class_clean, false) . '.php';\n\n        $try_class = '\\\\' . str_replace('/', '\\\\', $mod_api_class);\n\n        if (class_exists($try_class, false)) {\n            $caller_commander = 'class_is_already_here';\n            $mod_class_api_class_exist = true;\n        } else {\n            if (is_file($mod_api_class1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class1;\n            } elseif (is_file($mod_api_class_native_system)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native_system;\n            } elseif (is_file($mod_api_class1_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class1_uc1;\n            } elseif (is_file($mod_api_class_native_global_ns_uc1)) {\n                $try_class = str_replace('/', '\\\\', $mod_api_class2);\n                $mod_class_api = true;\n\n                include_once $mod_api_class_native_global_ns_uc1;\n            } elseif (is_file($mod_api_class_native_global_ns)) {\n                $try_class = str_replace('/', '\\\\', $mod_api_class2);\n                $mod_class_api = true;\n                include_once $mod_api_class_native_global_ns;\n            } elseif (is_file($mod_api_class_native_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native_uc1;\n            } elseif (is_file($mod_api_class_native)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native;\n            } elseif (is_file($mod_api_class2)) {\n                $mod_class_api = true;\n                include_once $mod_api_class2;\n            } elseif (is_file($mod_api_class2_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class2_uc1;\n            }\n        }\n\n        $api_exposed = '';\n\n        // user functions\n        $api_exposed .= 'user_login user_logout social_login_process';\n\n        // content functions\n\n        $api_exposed .= 'set_language ';\n        $api_exposed .= (api_expose(true));\n        $api_auth_exposed = ' ';\n        if (mw()->user_manager->is_logged()) {\n            $get_exposed = (api_expose_user(true));\n            $api_exposed .= $get_exposed;\n            $api_auth_exposed .= $get_exposed;\n        }\n\n        if (is_admin()) {\n            $get_exposed = (api_expose_admin(true));\n            $api_exposed .= $get_exposed;\n            $api_auth_exposed .= $get_exposed;\n        }\n\n\n        $api_exposed = explode(' ', $api_exposed);\n        $api_exposed = array_unique($api_exposed);\n        $api_exposed = array_trim($api_exposed);\n\n        $api_auth_exposed = explode(' ', $api_auth_exposed);\n        $api_auth_exposed = array_unique($api_auth_exposed);\n        $api_auth_exposed = array_trim($api_auth_exposed);\n\n        $hooks = api_bind(true);\n        if (mw()->user_manager->is_logged()) {\n            $hooks_admin = api_bind_user(true);\n            if (is_array($hooks_admin)) {\n                $hooks = array_merge($hooks, $hooks_admin);\n            }\n        }\n\n        if (is_admin()) {\n            $hooks_admin = api_bind_admin(true);\n            if (is_array($hooks_admin)) {\n                $hooks = array_merge($hooks, $hooks_admin);\n            }\n        }\n\n        if ($api_function == false) {\n            $api_function = app()->url_manager->segment(1);\n        }\n\n        if (!defined('MW_API_RAW')) {\n            if ($mod_class_api != false) {\n                $url_segs = app()->url_manager->segment(-1);\n            }\n        } else {\n            if (is_array($api_function)) {\n                $url_segs = $api_function;\n            } else {\n                $url_segs = explode('/', $api_function);\n            }\n        }\n        if (!defined('MW_API_FUNCTION_CALL')) {\n            define('MW_API_FUNCTION_CALL', $api_function);\n        }\n\n        $api_skip_token_validation_items = ['clearcache','logout','user_login'];\n\n        if (in_array($api_function, $api_auth_exposed)) {\n            if(!in_array($api_function, $api_skip_token_validation_items)) {\n\n                $request = request();\n                $request->merge($_GET);\n                $request->merge($_POST);\n                $ref = $request->headers->get('referer');\n\n                $same_site = app()->make(SameSiteRefererMiddleware::class);\n                $is_same_site = $same_site->isSameSite($ref);\n\n                if (!$is_same_site) {\n                    $bearer_token = $request->bearerToken();\n                    $is_bearer_token_valid = false;\n\n\n                    if ($bearer_token) {\n                        $validator = app()->make(ApiAuth::class);\n                        $is_bearer_token_valid = $validator->validateBearerToken($bearer_token);\n                    }\n                    if (!$is_bearer_token_valid) {\n                        $validator = app()->make(VerifyCsrfTokenHelper::class);\n                        $is_token_valid = $validator->isValid($request);\n                        if (!$is_token_valid) {\n                            App::abort(403, 'Unauthorized action. The API function requires authentication.');\n                        }\n                    }\n                }\n            }\n        }\n\n\n        switch ($caller_commander) {\n            case 'class_is_already_here':\n\n                if ($params != false) {\n                    $data = $params;\n                } elseif (!$_POST and !$_REQUEST) {\n                    $data = app()->url_manager->params(true);\n                    if (empty($data)) {\n                        $data = app()->url_manager->segment(2);\n                    }\n                } else {\n\n                    //$data = $_REQUEST;\n                    $data = array_merge($_GET, $_POST);\n                }\n\n                static $loaded_classes = array();\n\n                //$try_class_n = src_\n                if (isset($loaded_classes[$try_class]) == false) {\n                    $res = new $try_class($data);\n                    $loaded_classes[$try_class] = $res;\n                } else {\n                    $res = $loaded_classes[$try_class];\n                }\n\n                if (isset($hooks[$api_function_full]) and !empty($hooks[$api_function_full])) {\n                    foreach ($hooks[$api_function_full] as $hook) {\n                        if (is_array($hook)) {\n                            $hook = array_pop($hook);\n                        }\n                        if (is_callable($hook)) {\n                            $res = call_user_func($hook, $data);\n                            if (defined('MW_API_RAW')) {\n                                $mod_class_api_called = true;\n                            }\n                            return $this->_api_response($res);\n                        }\n                    }\n                }\n\n\n                if (method_exists($res, $try_class_func) or method_exists($res, $try_class_func2)) {\n                    if (method_exists($res, $try_class_func2)) {\n                        $try_class_func = $try_class_func2;\n                    }\n\n                    $res = $res->$try_class_func($data);\n\n                    if (defined('MW_API_RAW')) {\n                        $mod_class_api_called = true;\n                    }\n\n                    return $this->_api_response($res);\n                }\n                break;\n\n            default:\n                $res = false;\n                if (isset($hooks[$api_function_full])) {\n                    $data = array_merge($_GET, $_POST);\n\n                    $call = $hooks[$api_function_full];\n\n                    if (!empty($call)) {\n                        foreach ($call as $call_item) {\n                            $res = call_user_func($call_item, $data);\n                        }\n                    }\n                    if ($res != false) {\n                        return $this->_api_response($res);\n                    }\n                }\n\n                if ($mod_class_api == true and $mod_api_class != false) {\n                    $mod_api_class = str_replace('..', '', $mod_api_class);\n\n                    $try_class = str_replace('/', '\\\\', $mod_api_class);\n                    $try_class_full = str_replace('/', '\\\\', $api_function_full);\n\n                    $try_class_full2 = str_replace('\\\\', '/', $api_function_full);\n                    $mod_api_class_test = explode('/', $try_class_full2);\n                    $try_class_func_test = array_pop($mod_api_class_test);\n                    $mod_api_class_test_full = implode('/', $mod_api_class_test);\n                    $mod_api_err = false;\n                    if (!defined('MW_API_RAW')) {\n                        if (!in_array($try_class_full, $api_exposed, true) and !in_array($try_class_full2, $api_exposed, true) and !in_array($mod_api_class_test_full, $api_exposed, true)) {\n                            $mod_api_err = true;\n\n                            foreach ($api_exposed as $api_exposed_value) {\n                                if ($mod_api_err == true) {\n                                    if ($api_exposed_value == $try_class_full) {\n                                        $mod_api_err = false;\n                                    } elseif (strtolower('\\\\' . $api_exposed_value) == strtolower($try_class_full)) {\n                                        $mod_api_err = false;\n                                    } elseif ($api_exposed_value == $try_class_full2) {\n                                        $mod_api_err = false;\n                                    } else {\n                                        $convert_slashes = str_replace('\\\\', '/', $try_class_full);\n\n                                        if ($convert_slashes == $api_exposed_value) {\n                                            $mod_api_err = false;\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            $mod_api_err = false;\n                        }\n                    }\n\n                    if ($mod_class_api and $mod_api_err == false) {\n                        if (!class_exists($try_class, false)) {\n                            $remove = $url_segs;\n                            $last_seg = array_pop($remove);\n                            $last_prev_seg = array_pop($remove);\n                            $last_prev_seg2 = array_pop($remove);\n\n                            if (class_exists($last_prev_seg, false)) {\n                                $try_class = $last_prev_seg;\n                            } elseif (class_exists($last_prev_seg2, false)) {\n                                $try_class = $last_prev_seg2;\n                            }\n                        }\n\n                        if (!class_exists($try_class, false)) {\n                            $try_class_mw = ltrim($try_class, '/');\n                            $try_class_mw = ltrim($try_class_mw, '\\\\');\n                            $try_class = $try_class_mw;\n                        }\n\n                        if (class_exists($try_class, false)) {\n                            if ($params != false) {\n                                $data = $params;\n                            } elseif (!$_POST and !$_REQUEST) {\n                                $data = app()->url_manager->params(true);\n                                if (empty($data)) {\n                                    $data = app()->url_manager->segment(2);\n                                }\n                            } else {\n                                $data = array_merge($_GET, $_POST);\n                            }\n\n                            $res = new $try_class($data);\n\n                            if (method_exists($res, $try_class_func) or method_exists($res, $try_class_func2)) {\n                                if (method_exists($res, $try_class_func2)) {\n                                    $try_class_func = $try_class_func2;\n                                }\n\n                                $res = $res->$try_class_func($data);\n\n                                $mod_class_api_called = true;\n\n                                return $this->_api_response($res);\n                            }\n                        } else {\n                            mw_error('The api class ' . $try_class . '  does not exist');\n                        }\n                    }\n                }\n\n                break;\n        }\n\n        if ($api_function) {\n        } else {\n            $api_function = 'index';\n        }\n\n        if ($api_function == 'module' and $mod_class_api_called == false) {\n\n            return $this->module();\n        }\n        $err = false;\n        if (!in_array($api_function, $api_exposed, true)) {\n            $err = true;\n        }\n\n\n\n        if ($err == true) {\n            foreach ($api_exposed as $api_exposed_item) {\n                if ($api_exposed_item == $api_function) {\n                    $err = false;\n                }\n            }\n        }\n\n        if (isset($api_function_full)) {\n            foreach ($api_exposed as $api_exposed_item) {\n                if (is_string($api_exposed_item) and is_string($api_function_full)) {\n                    $api_function_full = str_replace('\\\\', '/', $api_function_full);\n                    $api_function_full = ltrim($api_function_full, '/');\n\n                    if (strtolower($api_exposed_item) == strtolower($api_function_full)) {\n                        $err = false;\n                    }\n                }\n            }\n        }\n\n        if ($err == false) {\n            if ($mod_class_api_called == false) {\n                if (!$_POST and !$_REQUEST) {\n\n                    //  $data = app()->url_manager->segment(2);\n                    $data = app()->url_manager->params(true);\n                    if (empty($data)) {\n                        $data = app()->url_manager->segment(2);\n                    }\n                } else {\n\n                    //$data = $_REQUEST;\n                    $data = array_merge($_GET, $_POST);\n                }\n\n                $api_function_full_2 = explode('/', $api_function_full);\n                unset($api_function_full_2[count($api_function_full_2) - 1]);\n                $api_function_full_2 = implode('/', $api_function_full_2);\n\n                if (function_exists($api_function)) {\n                    $res = $api_function($data);\n                } elseif (class_exists($api_function, false)) {\n\n                    //\n                    $segs = app()->url_manager->segment();\n                    $mmethod = array_pop($segs);\n\n                    $class = new $api_function($this->app);\n\n                    if (method_exists($class, $mmethod)) {\n                        $res = $class->$mmethod($data);\n                    }\n                } else {\n                    $api_function_full_2 = str_replace(array('..', '/'), array('', '\\\\'), $api_function_full_2);\n                    $api_function_full_2 = __NAMESPACE__ . '\\\\' . $api_function_full_2;\n\n                    if (class_exists($api_function_full_2, false)) {\n\n                        //\n\n                        $segs = app()->url_manager->segment();\n                        $mmethod = array_pop($segs);\n\n                        $class = new $api_function_full_2($this->app);\n\n                        if (method_exists($class, $mmethod)) {\n                            $res = $class->$mmethod($data);\n                        }\n                    } elseif (isset($api_function_full)) {\n                        $api_function_full = str_replace('\\\\', '/', $api_function_full);\n\n                        $api_function_full1 = explode('/', $api_function_full);\n                        $mmethod = array_pop($api_function_full1);\n                        $mclass = array_pop($api_function_full1);\n\n                        if (class_exists($mclass, false)) {\n\n                            if (is_array($this->app)) {\n                                $class = new $mclass($this->app);\n                            } else {\n                                $class = new $mclass();\n                            }\n\n                            if (method_exists($class, $mmethod)) {\n                                $res = $class->$mmethod($data);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (isset($res) and isset($hooks[$api_function]) and is_array($hooks[$api_function]) and !empty($hooks[$api_function])) {\n                foreach ($hooks[$api_function] as $hook_key => $hook_value) {\n                    if ($hook_value != false and $hook_value != null) {\n                        $hook_value($res);\n                    }\n                }\n            } else {\n\n                //error('The api function ' . $api_function . ' does not exist', __FILE__, __LINE__);\n            }\n\n            // print $api_function;`\n        } else {\n            $api_function = mw()->format->clean_html($api_function);\n            $api_function = mw()->format->clean_xss($api_function);\n            return response('The api function is not defined in the allowed functions list', 403);\n\n\n        }\n\n        if (isset($res)) {\n            return $this->_api_response($res);\n        }\n\n        return;\n\n    }\n\n\n    private function _api_response($res)\n    {\n        $status_code = 200;\n        if ($res instanceof Response) {\n            return $res;\n        }\n\n        if (defined('MW_API_RAW')) {\n            return response($res);\n        }\n\n        if (!defined('MW_API_HTML_OUTPUT')) {\n            if (is_bool($res) or is_int($res)) {\n                return \\Response::make(json_encode($res), $status_code);\n            } elseif ($res instanceof RedirectResponse) {\n                return $res;\n            } elseif ($res instanceof Response) {\n                return $res;\n            }\n\n            $response = \\Response::make($res, $status_code);\n            if (is_bool($res) or is_int($res) or is_array($res)) {\n                $response->header('Content-Type', 'application/json');\n            }\n\n            return $response;\n        } else {\n            if (is_array($res)) {\n                $res = json_encode($res);\n            } else if (is_bool($res)) {\n                $res = (bool)$res;\n            }\n            $response = \\Response::make($res, $status_code);\n            return $response;\n        }\n    }\n\n    public function module()\n    {\n        if (!defined('MW_API_CALL')) {\n            //      define('MW_API_CALL', true);\n        }\n\n        if (!defined('MW_NO_SESSION')) {\n            $is_ajax = app()->url_manager->is_ajax();\n            if (!mw()->user_manager->session_id() and $is_ajax == false and !defined('MW_SESS_STARTED')) {\n                define('MW_SESS_STARTED', true);\n                //session_start();\n            }\n            $editmode_sess = app()->user_manager->session_get('editmode');\n            if ($editmode_sess == true and !defined('IN_EDIT')) {\n                define('IN_EDIT', true);\n            }\n        }\n\n\n        $request_data = array_merge($_GET, $_POST);\n\n        // sanitize attributes\n        if($request_data){\n            $request_data_new = [];\n\n            $xssClean = new XSSClean();\n\n            foreach ($request_data as $k=>$v){\n                if(is_string($v)) {\n                    $v = str_replace('<', '-', $v);\n                    $v = str_replace('>', '-', $v);\n                    $v = str_replace('\"', '-', $v);\n                    $v = str_replace(\"'\", '-', $v);\n                }\n                if(is_array($v)) {\n                    $v = $xssClean->cleanArray($v);\n                } else {\n                    $v = $xssClean->clean($v);\n                }\n\n                if(is_string($k)){\n                    $k = str_replace('<', '-', $k);\n                    $k = str_replace('>', '-', $k);\n                    $k = str_replace('\"', '-', $k);\n                    $k = str_replace(\"'\", '-', $k);\n\n                    $k = $xssClean->clean($k);\n                    if($k){\n                        $request_data_new[$k] = $v;\n                    }\n                } else {\n                    $request_data_new[$k] = $v;\n                }\n\n            }\n            $request_data = $request_data_new;\n\n        }\n\n        $page = false;\n\n        $custom_display = false;\n        if (isset($request_data['data-display']) and $request_data['data-display'] == 'custom') {\n            $custom_display = true;\n        }\n\n        if (isset($request_data['data-module-name'])) {\n            $request_data['module'] = $request_data['data-module-name'];\n            $request_data['data-type'] = $request_data['data-module-name'];\n\n            if (!isset($request_data['id'])) {\n                $request_data['id'] = app()->url_manager->slug($request_data['data-module-name'] . '-' . date('YmdHis'));\n            }\n        }\n\n        if (isset($request_data['data-type'])) {\n            $request_data['module'] = $request_data['data-type'];\n        }\n\n        if (isset($request_data['display']) and $request_data['display'] == 'custom') {\n            $custom_display = true;\n        }\n        if (isset($request_data['view']) and $request_data['view'] == 'admin') {\n            $custom_display = false;\n        }\n\n        if ($custom_display == true) {\n            $custom_display_id = false;\n            if (isset($request_data['id'])) {\n                $custom_display_id = $request_data['id'];\n            }\n            if (isset($request_data['data-id'])) {\n                $custom_display_id = $request_data['data-id'];\n            }\n        }\n        if (isset($request_data['from_url'])) {\n            $from_url = $request_data['from_url'];\n        } elseif (isset($_SERVER['HTTP_REFERER'])) {\n            $from_url = $_SERVER['HTTP_REFERER'];\n            $from_url_p = @parse_url($from_url);\n            if (is_array($from_url_p) and isset($from_url_p['query'])) {\n                $from_url_p = parse_query($from_url_p['query']);\n                if (is_array($from_url_p) and isset($from_url_p['from_url'])) {\n                    $from_url = $from_url_p['from_url'];\n                }\n            }\n        }\n\n        if (isset($from_url) and $from_url != false) {\n            if (stristr($from_url, 'editor_tools/wysiwyg') && !defined('IN_EDITOR_TOOLS')) {\n                define('IN_EDITOR_TOOLS', true);\n            }\n\n            if (stristr($from_url, admin_url()) && !defined('MW_BACKEND')) {\n                define('MW_BACKEND', true);\n            }\n\n\n            $url = $from_url;\n            $from_url2 = str_replace('#', '/', $from_url);\n\n            $content_id = app()->url_manager->param('content_id', false, $from_url2);\n\n            if ($content_id == false) {\n                $content_id = app()->url_manager->param('editpage', false, $from_url2);\n            }\n            if ($content_id == false) {\n                $content_id = app()->url_manager->param('editpost', false, $from_url2);\n            }\n            if ($content_id == false) {\n                $is_current = app()->url_manager->param('is-current', false, $from_url2);\n                if ($is_current) {\n                    $content_id = app()->url_manager->param('content-id', false, $from_url2);\n                } else {\n                    $content_id = app()->url_manager->param('mw-adm-content-id', false, $from_url2);\n                }\n            }\n\n            if ($content_id == false) {\n                $action_test = app()->url_manager->param('action', false, $from_url2);\n\n                if ($action_test != false) {\n                    $action_test = str_ireplace('editpage:', '', $action_test);\n                    $action_test = str_ireplace('editpost:', '', $action_test);\n                    $action_test = str_ireplace('edit:', '', $action_test);\n                    $action_test = str_ireplace('showposts:', '', $action_test);\n\n                    $action_test = intval($action_test);\n                    if ($action_test != 0) {\n                        $content_id = $action_test;\n                        $this->app->content_manager->define_constants(array('id' => $content_id));\n                    }\n                }\n            }\n\n            if (strpos($url, '#')) {\n                $url = substr($url, 0, strpos($url, '#'));\n            }\n\n            //$url = $_SERVER[\"HTTP_REFERER\"];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if ($content_id != false) {\n                $page = array();\n                $page['id'] = $content_id;\n                if ($content_id) {\n                    $page = $this->app->content_manager->get_by_id($content_id);\n                    if($page){\n                        $url = $page['url'];\n                    }\n                }\n            } else {\n                if (trim($url) == '' or trim($url) == app()->url_manager->site()) {\n\n                    //var_dump($from_url);\n                    //$page = $this->app->content_manager->get_by_url($url);\n                    $page = $this->app->content_manager->homepage();\n\n                    if (!defined('IS_HOME')) {\n                        define('IS_HOME', true);\n                    }\n\n                    if (isset($from_url2)) {\n                        $mw_quick_edit = app()->url_manager->param('mw_quick_edit', false, $from_url2);\n\n                        if ($mw_quick_edit) {\n                            $page = false;\n                        }\n                    }\n                } else {\n                    if (!stristr($url, admin_url())) {\n                        $page = $this->app->content_manager->get_by_url($url);\n                    } else {\n                        $page = false;\n                        if (!defined('PAGE_ID')) {\n                            define('PAGE_ID', false);\n                        }\n                        if (!defined('POST_ID')) {\n                            define('POST_ID', false);\n                        }\n                        if (!defined('CONTENT_ID')) {\n                            define('CONTENT_ID', false);\n                        }\n                    }\n                }\n            }\n        } else {\n            $url = app()->url_manager->string();\n        }\n\n        if (!defined('IS_HOME')) {\n            if (isset($page['is_home']) and $page['is_home'] == 'y') {\n                define('IS_HOME', true);\n            }\n        }\n\n\n        if (mw_is_installed()) {\n            if ($page == false) {\n                if (!isset($content_id)) {\n                    return;\n                }\n\n                $this->app->content_manager->define_constants(array('id' => $content_id));\n            } else {\n                $this->app->content_manager->define_constants($page);\n            }\n        }\n\n        if (defined('TEMPLATE_DIR')) {\n            app()->template_manager->boot_template();\n        }\n\n        if ($custom_display == true) {\n            $u2 = app()->url_manager->site();\n            $u1 = str_replace($u2, '', $url);\n\n            $this->render_this_url = $u1;\n            $this->isolate_by_html_id = $custom_display_id;\n            return $this->frontend();\n\n\n        }\n\n\n        $url_last = false;\n        if (!isset($request_data['module'])) {\n            $url = app()->url_manager->string(0);\n            if ($url == __FUNCTION__) {\n                $url = app()->url_manager->string(0);\n            }\n\n            /*\n            $is_ajax = app()->url_manager->is_ajax();\n\n            if ($is_ajax == true) {\n            $url = app()->url_manager->string(true);\n            }*/\n\n            $url = $this->app->format->replace_once('module/', '', $url);\n            $url = $this->app->format->replace_once('module_api/', '', $url);\n            $url = $this->app->format->replace_once('m/', '', $url);\n            if (is_module($url)) {\n                $request_data['module'] = $url;\n                $mod_from_url = $url;\n            } else {\n                $url1 = $url_temp = explode('/', $url);\n                $url_last = array_pop($url_temp);\n\n                $try_intil_found = false;\n                $temp1 = array();\n                foreach ($url_temp as $item) {\n                    $temp1[] = implode('/', $url_temp);\n                    $url_laset = array_pop($url_temp);\n                }\n\n                $i = 0;\n                foreach ($temp1 as $item) {\n                    if ($try_intil_found == false) {\n                        if (is_module($item)) {\n                            $url_tempx = explode('/', $url);\n\n                            $request_data['module'] = $item;\n                            $url_prev = $url_last;\n                            $url_last = array_pop($url_tempx);\n                            $url_prev = array_pop($url_tempx);\n\n                            // d($url_prev);\n                            $mod_from_url = $item;\n                            $try_intil_found = true;\n                        }\n                    }\n                    ++$i;\n                }\n            }\n        }\n\n        $module_info = app()->url_manager->param('module_info', true);\n\n\n        if ($module_info and isset($request_data['module'])) {\n            $request_data['module'] = str_replace('..', '', $request_data['module']);\n            $try_config_file = modules_path() . '' . $request_data['module'] . '_config.php';\n            $try_config_file = normalize_path($try_config_file, false);\n            if (is_file($try_config_file)) {\n                include $try_config_file;\n\n                if (!isset($config) or !is_array($config)) {\n                    return false;\n                }\n\n                if (!isset($config['icon']) or $config['icon'] == false) {\n                    $config['icon'] = modules_path() . '' . $request_data['module'] . '.png';\n                    $config['icon'] = app()->url_manager->link_to_file($config['icon']);\n                }\n                echo json_encode($config);\n\n                return;\n            }\n        }\n\n\n        $admin = app()->url_manager->param('admin', true);\n\n        $mod_to_edit = app()->url_manager->param('module_to_edit', true);\n        $embed = app()->url_manager->param('embed', true);\n\n        $mod_iframe = false;\n        if ($mod_to_edit != false) {\n            $mod_to_edit = str_ireplace('_mw_slash_replace_', '/', $mod_to_edit);\n            $mod_iframe = true;\n        }\n\n        //$data = $request_data;\n\n        if (($_POST)) {\n            $data = $_POST;\n        } else {\n            $url = app()->url_manager->segment();\n\n            if (!empty($url)) {\n                foreach ($url as $k => $v) {\n                    $kv = explode(':', $v);\n                    if (isset($kv[0]) and isset($kv[1])) {\n                        $data[$kv[0]] = $kv[1];\n                    }\n                }\n            }\n        }\n\n        $tags = false;\n        $mod_n = false;\n\n        if (isset($data['type']) != false) {\n            if (trim($data['type']) != '') {\n                $mod_n = $data['data-type'] = $data['type'];\n            }\n        }\n\n        if (isset($data['data-module-name'])) {\n            $mod_n = $data['data-type'] = $data['data-module-name'];\n            unset($data['data-module-name']);\n        }\n\n        if (isset($data['data-type']) != false) {\n            $mod_n = $data['data-type'];\n        }\n        if (isset($data['data-module']) != false) {\n            if (trim($data['data-module']) != '') {\n                $mod_n = $data['module'] = $data['data-module'];\n            }\n        }\n\n        if (isset($data['module'])) {\n            $mod_n = $data['data-type'] = $data['module'];\n            unset($data['module']);\n        }\n\n        if (isset($data['type'])) {\n            $mod_n = $data['data-type'] = $data['type'];\n            unset($data['type']);\n        }\n        if (isset($data['data-type']) != false) {\n            $data['data-type'] = rtrim($data['data-type'], '/');\n            $data['data-type'] = rtrim($data['data-type'], '\\\\');\n            $data['data-type'] = str_replace('__', '/', $data['data-type']);\n        }\n        if (!isset($data)) {\n            $data = $request_data;\n        }\n        if (!isset($data['module']) and isset($mod_from_url) and $mod_from_url != false) {\n            $data['module'] = ($mod_from_url);\n        }\n\n        if (!isset($data['id']) and isset($request_data['id']) == true) {\n            $data['id'] = $request_data['id'];\n        }\n        if (isset($data['ondrop'])) {\n            if (!defined('MW_MODULE_ONDROP')) {\n                define('MW_MODULE_ONDROP', true);\n            }\n\n            unset($data['ondrop']);\n        }\n        // d($data);\n\n\n        $opts = array();\n        if ($request_data) {\n            $opts = $request_data;\n        }\n\n\n        if (isset($opts['class']) and is_string($opts['class']) and strstr($opts['class'], 'module-as-element')) {\n            $opts['module_as_element'] = true;\n            $opts['populate_module_ids_in_elements'] = true;\n        }\n\n\n        if ($mod_n == 'element-from-template' && isset($data['template'])) {\n            $t = str_replace('..', '', $data['template']);\n            $possible_layout = TEMPLATE_DIR . $t;\n            $possible_layout = normalize_path($possible_layout, false);\n            $opts['element_from_template'] = true;\n\n            if (is_file($possible_layout)) {\n                $l = new View($possible_layout);\n                $layout = $l->__toString();\n                $layout = $this->app->parser->process($layout, $opts);\n                return response($layout);\n            }\n        }\n\n        if ($mod_n == 'module-' && isset($data['template'])) {\n            $t = str_replace('..', '', $data['template']);\n            $possible_layout = templates_path() . $t;\n            $possible_layout = normalize_path($possible_layout, false);\n            if (is_file($possible_layout)) {\n                $l = new View($possible_layout);\n                $layout = $l->__toString();\n                $layout = $this->app->parser->process($layout, $opts);\n                return response($layout);\n\n\n                //  echo $layout;\n\n                // return;\n            }\n        }\n\n        $has_id = false;\n        if (isset($data) and is_array($data)) {\n            foreach ($data as $k => $v) {\n                if ($k != 'ondrop') {\n                    if ($k == 'id') {\n                        $has_id = true;\n                    }\n\n                    if (is_array($v)) {\n                        $v1 = $this->app->format->array_to_base64($v);\n                        $tags .= \"{$k}=\\\"$v1\\\" \";\n                    } else {\n                        $v = $this->app->format->clean_html($v);\n\n                        //$v = app()->database_manager->escape_string($v);\n\n                        $tags .= \"{$k}=\\\"$v\\\" \";\n                    }\n                }\n            }\n        }\n\n        if ($has_id == false) {\n//            if (defined('MW_MODULE_ONDROP')) {\n//                $mod_n = app()->url_manager->slug($mod_n) . '-' . date(\"YmdHis\").unquid();\n//                $tags .= \"id=\\\"$mod_n\\\" \";\n//            }\n            //  $mod_n = app()->url_manager->slug($mod_n) . '-' . date(\"YmdHis\");\n            //  $tags .= \"id=\\\"$mod_n\\\" \";\n        }\n\n        $tags = \"<module {$tags} />\";\n\n\n        if (isset($request_data['live_edit'])) {\n            event_trigger('mw.live_edit');\n        }\n        $opts['admin'] = $admin;\n        if ($admin == 'admin') {\n            event_trigger('mw_backend');\n            event_trigger('mw.admin');\n        } else {\n            event_trigger('mw_frontend');\n            event_trigger('mw.front');\n        }\n\n        if (isset($_SERVER['HTTP_REFERER']) and $_SERVER['HTTP_REFERER'] != false) {\n            $get_arr_from_ref = $_SERVER['HTTP_REFERER'];\n            if (strstr($get_arr_from_ref, app()->url_manager->site())) {\n                $get_arr_from_ref_arr = parse_url($get_arr_from_ref);\n                if (isset($get_arr_from_ref_arr['query']) and $get_arr_from_ref_arr['query'] != '') {\n                    $restore_get = parse_str($get_arr_from_ref_arr['query'], $get_array);\n                    if (is_array($get_array)) {\n                        mw_var('mw_restore_get', $get_array);\n                    }\n\n                    //\n                }\n            }\n        }\n\n        $res = $this->app->parser->process($tags, $opts);\n        $res = preg_replace('~<(?:!DOCTYPE|/?(?:html|head|body))[^>]*>\\s*~i', '', $res);\n\n        if ($embed != false) {\n            $p_index = mw_includes_path() . 'api/index.php';\n            $p_index = normalize_path($p_index, false);\n            $l = new View($p_index);\n            $layout = $l->__toString();\n            $res = str_replace('{content}', $res, $layout);\n        }\n\n        $aj = app()->url_manager->is_ajax();\n\n        if ((isset($request_data['live_edit']) or isset($request_data['admin'])) and $aj == false) {\n            $p_index = mw_includes_path() . DS . 'toolbar' . DS . 'editor_tools' . DS . 'module_settings' . DS . 'index.php';\n            $p_index = normalize_path($p_index, false);\n            $l = new View($p_index);\n            $l->params = $data;\n            $layout = $l->__toString();\n            $res = str_replace('{content}', $res, $layout);\n            $res = $this->app->parser->process($res, $options = false);\n        }\n\n        $res = mw()->template->process_stacks($res);\n\n        $res = execute_document_ready($res);\n        if (!defined('MW_NO_OUTPUT')) {\n            $res = app()->url_manager->replace_site_url_back($res);\n            return response($res);\n\n            // echo $res;\n        }\n\n        if ($url_last == __FUNCTION__) {\n            return;\n        }\n        if (function_exists($url_last)) {\n            $this->api($url_last);\n        } elseif (isset($url_prev) and function_exists($url_prev)) {\n            $this->api($url_last);\n        } elseif (class_exists($url_last, false)) {\n            $this->api($url_last);\n        } elseif (isset($url_prev) and class_exists($url_prev, false)) {\n            $this->api($url_prev);\n        }\n\n        return;\n    }\n\n    public function editor_tools()\n    {\n        if (!defined('IN_ADMIN') and is_admin()) {\n            define('IN_ADMIN', true);\n        }\n        if (!defined('IN_EDITOR_TOOLS')) {\n            define('IN_EDITOR_TOOLS', true);\n        }\n\n        if (mw_is_installed() == true) {\n\n            //event_trigger('mw_db_init');\n            //  event_trigger('mw_cron');\n        }\n\n        $tool = app()->url_manager->segment(1);\n\n        if ($tool) {\n        } else {\n            $tool = 'index';\n        }\n\n        $page = false;\n        if (isset($_REQUEST['content_id'])) {\n            if (intval($_REQUEST['content_id']) == 0) {\n                $this->create_new_page = true;\n\n                $custom_content_data_req = $_REQUEST;\n                $custom_content_data = array();\n                if (isset($custom_content_data_req['content_type'])) {\n                    //    $custom_content_data['content_type'] = $custom_content_data_req['content_type'];\n                }\n                if (isset($custom_content_data_req['content_type'])) {\n                    $custom_content_data['content_type'] = $custom_content_data_req['content_type'];\n                }\n                if (isset($custom_content_data_req['subtype'])) {\n                    $custom_content_data['subtype'] = $custom_content_data_req['subtype'];\n                }\n                if (isset($custom_content_data_req['parent_page']) and is_numeric($custom_content_data_req['parent_page'])) {\n                    $custom_content_data['parent'] = intval($custom_content_data_req['parent_page']);\n                }\n                if (isset($custom_content_data_req['preview_layout'])) {\n                    //  $custom_content_data['preview_layout'] =($custom_content_data_req['preview_layout']);\n                }\n                if (!empty($custom_content_data)) {\n                    $custom_content_data['id'] = 0;\n                    $this->content_data = $custom_content_data;\n                }\n\n                $this->return_data = 1;\n                 $page = $this->frontend();\n            } else {\n                $page = $this->app->content_manager->get_by_id($_REQUEST['content_id']);\n            }\n        } elseif (isset($_SERVER['HTTP_REFERER'])) {\n            $url = $_SERVER['HTTP_REFERER'];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if (trim($url) == '' or trim($url) == app()->url_manager->site()) {\n\n                //$page = $this->app->content_manager->get_by_url($url);\n                $page = $this->app->content_manager->homepage();\n            } else {\n                $page = $this->app->content_manager->get_by_url($url);\n            }\n        } else {\n            $url = app()->url_manager->string();\n        }\n\n        if (!isset($page['active_site_template'])) {\n            $page['active_site_template'] = 'default';\n        }\n\n        if (isset($_GET['preview_template'])) {\n            $page['active_site_template'] = $_GET['preview_template'];\n        }\n        if (isset($_GET['content_type'])) {\n            $page['content_type'] = $_GET['content_type'];\n        }\n        if (isset($_GET['preview_layout']) and $_GET['preview_layout'] != 'inherit') {\n            $page['layout_file'] = $_GET['preview_layout'];\n        }\n\n        $this->app->content_manager->define_constants($page);\n\n        $page['render_file'] = $this->app->template->get_layout($page);\n\n        if (defined('TEMPLATE_DIR')) {\n            app()->template_manager->boot_template();\n        }\n\n        // $params = $_REQUEST;\n        $params = array_merge($_GET, $_POST);\n        $tool = str_replace('..', '', $tool);\n\n        $p_index = mw_includes_path() . 'toolbar/editor_tools/index.php';\n        $p_index = normalize_path($p_index, false);\n\n        $standalone_edit = true;\n        $p = mw_includes_path() . 'toolbar/editor_tools/' . $tool . '/index.php';\n        $standalone_edit = false;\n        if ($tool == 'plupload') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'plupload') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'imageeditor') {\n            $standalone_edit = true;\n        }\n\n        if ($tool == 'rte_image_editor') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'editor_toolbar') {\n            $standalone_edit = true;\n        }\n\n        if ($tool == 'wysiwyg') {\n            $standalone_edit = false;\n            $ed_file_from_template = TEMPLATE_DIR . 'editor.php';\n\n            if (is_file($ed_file_from_template)) {\n                $p_index = $ed_file_from_template;\n            }\n\n            if (isset($page['content_type']) and $page['content_type'] != 'post' and $page['content_type'] != 'page' and $page['content_type'] != 'product') {\n                if (isset($page['subtype']) and ($page['subtype'] != 'post' and $page['subtype'] != 'product')) {\n                    $standalone_edit = true;\n                }\n            } elseif (isset($page['content_type']) and $page['content_type'] == 'post') {\n                if (isset($page['subtype']) and ($page['subtype'] != 'post' and $page['subtype'] != 'product')) {\n                    $standalone_edit = true;\n                }\n            }\n\n            if ($standalone_edit) {\n                if (!isset($page['content'])) {\n                    $page['content'] = '<div class=\"element\"></div>';\n                }\n                $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n                $page['render_file'] = false;\n            }\n\n            //\n            //  $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n        }\n        $default_css = '';\n        $apijs_settings_loaded = '';\n        $apijs_loaded = '';\n\n        $p = normalize_path($p, false);\n\n        $l = new View($p_index);\n        $l->params = $params;\n        $layout = $l->__toString();\n        $apijs_loaded = false;\n        if ($layout != false) {\n\n            //$apijs_loaded = $this->app->template->get_apijs_url() . '?id=' . CONTENT_ID;\n            //$apijs_loaded = $this->app->template->get_apijs_url();\n            // $apijs_settings_loaded = $this->app->template->get_apijs_settings_url() . '?id=' . CONTENT_ID . '&category_id=' . CATEGORY_ID;\n            //  $apijs_settings_loaded = $this->app->template->get_apijs_settings_url();\n            $default_css_url = $this->app->template->get_default_system_ui_css_url();\n\n\n            // $is_admin = app()->user_manager->is_admin();\n            // $default_css = '<link rel=\"stylesheet\" href=\"' . mw_includes_url() . 'default.css?v=' . MW_VERSION . '\" type=\"text/css\" />';\n            $default_css = '<link rel=\"stylesheet\" href=\"' . $default_css_url . '\" type=\"text/css\" />';\n\n\n            $headers = event_trigger('site_header', TEMPLATE_NAME);\n            $template_headers_append = '';\n            $one = 1;\n            if (is_array($headers)) {\n                foreach ($headers as $modify) {\n                    if ($modify != false and is_string($modify) and $modify != '') {\n                        $template_headers_append = $template_headers_append . $modify;\n                    }\n                }\n                if ($template_headers_append != false and $template_headers_append != '') {\n                    $layout = str_ireplace('</head>', $template_headers_append . '</head>', $l, $one);\n                }\n            }\n            if (function_exists('template_headers_src')) {\n                $template_headers_src = template_headers_src();\n                if ($template_headers_src != false and $template_headers_src != '') {\n                    $layout = str_ireplace('</head>', $template_headers_src . '</head>', $l, $one);\n                }\n            }\n\n            if (isset($page['active_site_template'])) {\n                if ($page['active_site_template'] == '') {\n                    $page['active_site_template'] = 'default';\n                }\n\n                if ($page['active_site_template'] == 'default') {\n                    $active_site_template = $this->app->option_manager->get('current_template', 'template');\n                } else {\n                    $active_site_template = $page['active_site_template'];\n                    if ($active_site_template == 'mw_default') {\n                        $active_site_template = 'default';\n                    }\n                }\n\n                $live_edit_css_folder = userfiles_path() . 'css' . DS . $active_site_template . DS;\n                $custom_live_edit = $live_edit_css_folder . DS . 'live_edit.css';\n                if (is_file($custom_live_edit)) {\n                    $live_edit_url_folder = userfiles_url() . 'css/' . $active_site_template . '/';\n                    $custom_live_editmtime = filemtime($custom_live_edit);\n                    $liv_ed_css = '<link rel=\"stylesheet\" href=\"' . $live_edit_url_folder . 'live_edit.css?version=' . $custom_live_editmtime . '\" id=\"mw-template-settings\" type=\"text/css\" />';\n                    $layout = str_ireplace('</head>', $liv_ed_css . '</head>', $l);\n                }\n            }\n        }\n\n        if (isset($_REQUEST['plain'])) {\n            if (is_file($p)) {\n                $p = new View($p);\n                $p->params = $params;\n                $layout = $p->__toString();\n                return response($layout);\n\n            }\n        } elseif (is_file($p)) {\n            $p = new View($p);\n            $p->params = $params;\n            $layout_tool = $p->__toString();\n            $layout = str_replace('{content}', $layout_tool, $layout);\n        } else {\n            $layout = str_replace('{content}', 'Not found!', $layout);\n        }\n        $category = false;\n        if (defined('CATEGORY_ID')) {\n            $category = $this->app->category_manager->get_by_id(CATEGORY_ID);\n        }\n\n        //    $page['render_file'] = $render_file;\n\n        if (!$standalone_edit and $tool == 'wysiwyg') {\n            if (isset($page['render_file'])) {\n                if (!isset($page['layout_file'])) {\n                    $page['layout_file'] = str_replace(template_dir(), '', $page['render_file']);\n                }\n\n\n                event_trigger('mw.front', $page);\n                $l = new View($page['render_file']);\n                $l->page_id = PAGE_ID;\n                $l->content_id = CONTENT_ID;\n                $l->post_id = POST_ID;\n                $l->category_id = CATEGORY_ID;\n                $l->content = $page;\n                $l->category = $category;\n                $l->params = $params;\n                $l->page = $page;\n                $l->application = $this->app;\n                $l = $l->__toString();\n//\n//\n//                $render_params = array();\n//                $render_params['render_file'] = $p;\n//                $render_params['page_id'] = PAGE_ID;\n//                $render_params['content_id'] = CONTENT_ID;\n//                $render_params['post_id'] = POST_ID;\n//                $render_params['category_id'] = CATEGORY_ID;\n//                $render_params['page'] = $page;\n//                $render_params['params'] = $params;\n//                $render_params['application'] = $this->app;\n\n                //  $l = $this->app->template->render($render_params);\n                if (is_object($l)) {\n                    return $l;\n                }\n\n                $l = $this->app->parser->process($l, $options = false);\n\n                //                if(isset($page['content']) and $page['content'] != false){\n                //\n                //                if($page['content'] == ''){\n                //                    unset($page['content']);\n                //                }\n                //                } else {\n                //                    $page['content'] = $l;\n                //                }\n\n                $editable = $this->app->parser->isolate_content_field($l, true);\n\n                if ($editable != false) {\n                    $page['content'] = $editable;\n                } else {\n                    if ($tool == 'wysiwyg') {\n                        $err = 'no editable content region found';\n                        if (isset($page['layout_file'])) {\n                            $file = $page['layout_file'];\n                            $file = str_replace('__', '/', $page['layout_file']);\n                            $err = $err . ' in file ' . $file;\n                        }\n                        if (isset($page['active_site_template'])) {\n                            $err = $err . ' (' . $page['active_site_template'] . ' template)';\n                        }\n\n                        return $err;\n                    }\n                }\n            }\n        }\n\n        /* if (!stristr($layout, $apijs_loaded)) {\n             $rep = 0;\n\n             $default_css = $default_css . \"\\r\\n\" . '<script src=\"' . $apijs_settings_loaded . '\"></script>' . \"\\r\\n\";\n             $default_css = $default_css . \"\\r\\n\" . '<script src=\"' . $apijs_loaded . '\"></script>' . \"\\r\\n\";\n             $layout = str_ireplace('<head>', '<head>' . $default_css, $layout, $rep);\n         }*/\n\n        $layout = str_ireplace('<head>', '<head>' . $default_css, $layout, $rep);\n\n\n        $layout = $this->app->template->append_api_js_to_layout($layout);\n        if (isset($page['content'])) {\n            if ($standalone_edit) {\n                if (!isset($render_file)) {\n                    if (stristr($page['content'], 'field=\"content\"') or stristr($page['content'], 'field=\\'content\\'')) {\n                        $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n                    }\n                }\n            }\n\n            $layout = str_replace('{content}', $page['content'], $layout);\n        }\n\n        $layout = mw()->template->process_meta($layout);\n        $layout = mw()->template->process_stacks($layout);\n\n\n        $layout = $this->app->parser->process($layout, $options = false);\n\n        $layout = mw()->template->add_csrf_token_meta_tags($layout);\n\n        $layout = execute_document_ready($layout);\n\n        $layout = str_replace('{head}', '', $layout);\n\n        $layout = str_replace('{content}', '', $layout);\n        return response($layout);\n\n\n    }\n\n}\n", "<?php\n\n\n/*\n * This file is part of the Microweber framework.\n *\n * (c) Microweber CMS LTD\n *\n * For full license information see\n * https://github.com/microweber/microweber/blob/master/LICENSE\n *\n */\n\nnamespace MicroweberPackages\\Module;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse MicroweberPackages\\App\\Models\\SystemLicenses;\nuse MicroweberPackages\\Database\\Utils as DbUtils;\n\nclass ModuleManager\n{\n    public $tables = array();\n    public $app = null;\n    public $ui = array();\n    private $activeLicenses = array();\n    public $table_prefix = false;\n    public $current_module = false;\n    public $current_module_params = false;\n    protected $table = 'modules';\n    private $_install_mode = false;\n\n    public function __construct($app = null)\n    {\n        if (!defined('EMPTY_MOD_STR')) {\n            define('EMPTY_MOD_STR', \"<div class='mw-empty-module '>{module_title} {type}</div>\");\n        }\n\n        /*  print '         1                  ';\n          dump(debug_backtrace(1));*/\n\n        if (!is_object($this->app)) {\n            if (is_object($app)) {\n                $this->app = $app;\n            } else {\n                $this->app = mw();\n            }\n        }\n        $this->set_table_names();\n        if (mw_is_installed()) {\n            $getSystemLicense = SystemLicenses::get();\n            if ($getSystemLicense != null) {\n                $this->activeLicenses = $getSystemLicense->toArray();\n            }\n        }\n\n\n    }\n\n    public function set_table_names($tables = false)\n    {\n        if (!is_array($tables)) {\n            $tables = array();\n        }\n        if (!isset($tables['modules'])) {\n            $tables['modules'] = 'modules';\n        }\n        if (!isset($tables['elements'])) {\n            $tables['elements'] = 'elements';\n        }\n        if (!isset($tables['module_templates'])) {\n            $tables['module_templates'] = 'module_templates';\n        }\n        if (!isset($tables['system_licenses'])) {\n            $tables['system_licenses'] = 'system_licenses';\n        }\n        if (!isset($tables['options'])) {\n            $tables['options'] = 'options';\n        }\n        $this->tables['options'] = $tables['options'];\n        $this->tables['modules'] = $tables['modules'];\n        $this->tables['elements'] = $tables['elements'];\n        $this->tables['module_templates'] = $tables['module_templates'];\n        $this->tables['system_licenses'] = $tables['system_licenses'];\n    }\n\n\n\n    // example:\n    /*\n     ['name' => 'User Roles',\n            'icon' => 'icon.png',\n            'author' => 'Microweber',\n            'description' => 'User Roles',\n            'website' => 'http://microweber.com/',\n            'help' => 'http://microweber.info/modules',\n            'version' => 0.19,\n            'ui' => true,\n            'ui_admin' => true,\n            'position' => 30,\n            'categories' => 'admin',\n            'assets' => '['resources']',\n\n            'type' => 'users/roles',\n            'controllers' => [\n                'index' => \"MicroweberPackages\\Role\\Http\\Controllers\\IndexController@index\",\n                'admin' => \"MicroweberPackages\\Role\\Http\\Controllers\\IndexController@admin\",\n            ],\n        ]\n    */\n\n\n    private $modules_register = [];\n\n    public function register($module_type, $controller_action)\n    {\n        $this->_register_module_callback_controller($module_type, $controller_action);\n        $config = [];\n        $config['module'] = $module_type;\n        $this->modules_register[] = $config;\n\n//        $config = [];\n//\n//        if (isset($config['type']) and $config['type']) {\n//            $type = $config['type'];\n//\n//            $this->modules_register[] = $config;\n//\n//            //Register controllers\n//            if (isset($config['controllers']) and $config['controllers'] and is_array($config['controllers'])) {\n//                foreach ($config['controllers'] as $controller_key => $controller) {\n//                    $this->_register_module_callback_controller($type . '/' . $controller_key, $controller);\n//                }\n//            }\n//        }\n\n\n    }\n\n    public function _register_module_callback_controller($module_type, $controller)\n    {\n        $this->app->parser->module_registry[trim($module_type)] = trim($controller);\n    }\n\n\n    /* public function register_module($module)\n     {\n\n     }\n\n     public function generate_module($module)\n     {\n         if (!isset($module['public_folder'])) {\n             new Exception('Please set public folder for registering module');\n         }\n\n         $moduleName = trim($module['name']);\n         $modulePublicFolder = trim($module['public_folder']);\n         $modulePublicPath = normalize_path(modules_path() . $modulePublicFolder);\n\n         $moduleIcon = '';\n         if (is_file($module['icon'])) {\n             file_put_contents($modulePublicPath . 'icon.png', file_get_contents($module['icon']));\n             $moduleIcon = $modulePublicPath . 'icon.png';\n             $moduleIcon = dir2url($moduleIcon);\n             $moduleIcon = str_replace(site_url(), '{SITE_URL}', $moduleIcon);\n         }\n\n         if (isset($module['controller'])) {\n             file_put_contents($modulePublicPath . 'index.php', '\n <?php\n return \\App::call(\"' . $module['controller'] . '@index\");\n ?>\n         ');\n         }\n\n         if (isset($module['admin_controller'])) {\n             file_put_contents($modulePublicPath . 'admin.php', '\n <?php\n return \\App::call(\"' . $module['admin_controller'] . '@index\");\n ?>\n         ');\n         }\n\n         $moduleConfig = array();\n         $moduleConfig['name'] = $module['name'];\n         $moduleConfig['icon'] = $moduleIcon;\n         $moduleConfig['author'] = \"Microweber\";\n         $moduleConfig['description'] = $module['name'];\n         $moduleConfig['website'] = \"http://microweber.com/\";\n         $moduleConfig['help'] = \"http://microweber.info/modules\";\n         $moduleConfig['version'] = 0.19;\n         $moduleConfig['ui'] = true;\n         $moduleConfig['ui_admin'] = true;\n         $moduleConfig['position'] = 30;\n         $moduleConfig['categories'] = \"admin\";\n\n         file_put_contents($modulePublicPath . 'config.php', \"<?php\\n\\$config = \".var_export($moduleConfig, true).\";\\n?>\");\n\n     }*/\n\n    public function install()\n    {\n        $this->_install_mode = true;\n\n        mw()->cache_manager->delete('db');\n        mw()->cache_manager->clear();\n        mw()->module_repository->clearCache();\n\n        $this->scan();\n\n        $this->_install_mode = false;\n    }\n\n    public function scan($options = false)\n    {\n        return $this->scan_for_modules($options);\n    }\n\n    public function scan_for_modules($options = false)\n    {\n        $params = $options;\n        if (is_string($params)) {\n            $params = parse_str($params, $params2);\n            $params = $options = $params2;\n        }\n\n\n        $args = func_get_args();\n        $function_cache_id = '';\n        foreach ($args as $k => $v) {\n            $function_cache_id = $function_cache_id . serialize($k) . serialize($v) . serialize($params);\n        }\n        $list_as_element = false;\n        $cache_id = $function_cache_id = __FUNCTION__ . crc32($function_cache_id);\n        if (isset($options['dir_name'])) {\n            $dir_name = $options['dir_name'];\n            //$list_as_element = true;\n            $cache_group = 'elements/global';\n        } else {\n            $dir_name = normalize_path(modules_path());\n            $list_as_element = false;\n            $cache_group = 'modules/global';\n        }\n\n        if (isset($options['is_elements']) and $options['is_elements'] != false) {\n            $list_as_element = true;\n        } else {\n            $list_as_element = false;\n        }\n\n        $skip_save = false;\n        if (isset($options['skip_save']) and $options['skip_save'] != false) {\n            $skip_save = true;\n        }\n        $modules_remove_old = false;\n        if (isset($options['cache_group'])) {\n            $cache_group = $options['cache_group'];\n        }\n\n        if (isset($options['reload_modules']) == true) {\n            $modules_remove_old = true;\n            if (is_cli()) {\n                $this->_install_mode = true;\n            }\n        }\n\n        if ($modules_remove_old or isset($options['cleanup_db']) == true) {\n            if ($this->app->user_manager->is_admin() == true) {\n                $this->app->cache_manager->delete('categories');\n                $this->app->cache_manager->delete('categories_items');\n                $this->app->cache_manager->delete('db');\n                $this->app->cache_manager->delete('modules');\n            }\n        }\n\n        if (isset($options['skip_cache']) == false and isset($options['no_cache']) == false) {\n            $cache_content = $this->app->cache_manager->get($cache_id, $cache_group);\n\n            if (($cache_content) != false) {\n                return $cache_content;\n            }\n        }\n        if (isset($options['glob'])) {\n            $glob_patern = $options['glob'];\n        } else {\n            $glob_patern = '*config.php';\n        }\n\n\n        if (php_can_use_func('ini_set')) {\n            ini_set('memory_limit', '-1');\n        }\n\n\n        $dir = rglob($glob_patern, 0, $dir_name);\n\n        //  var_dump($dir);\n\n        $dir_name_mods = modules_path();\n        $dir_name_mods2 = elements_path();\n        $saved_ids = array();\n        if (!empty($dir)) {\n            $configs = array();\n            foreach ($dir as $key => $value) {\n                $skip_module = false;\n                if (isset($options['skip_admin']) and $options['skip_admin'] == true) {\n                    if (strstr($value, 'admin')) {\n                        $skip_module = true;\n                    }\n                }\n\n                if ($skip_module == false) {\n                    $config = array();\n                    $value = normalize_path($value, false);\n\n                    $moduleDir = $mod_name = str_replace('_config.php', '', $value);\n                    $moduleDir = $mod_name = str_replace('config.php', '', $moduleDir);\n                    $moduleDir = $mod_name = str_replace('index.php', '', $moduleDir);\n\n                    $moduleDir = $mod_name_dir = str_replace($dir_name_mods, '', $moduleDir);\n                    $moduleDir = $mod_name_dir = str_replace($dir_name_mods2, '', $moduleDir);\n\n                    $def_icon = modules_path() . 'default.svg';\n\n                    ob_start();\n\n                    $is_mw_ignore = dirname($value) . DS . '.mwignore';\n                    if (!is_file($is_mw_ignore) and is_file($value)) {\n                        include $value;\n                    }\n\n                    $content = ob_get_contents();\n                    ob_end_clean();\n                    if ($list_as_element == true) {\n                        $moduleDir = str_replace(elements_path(), '', $moduleDir);\n                    } else {\n                        $moduleDir = str_replace(modules_path(), '', $moduleDir);\n                    }\n\n                    $replace_root = MW_ROOTPATH . DS . 'userfiles' . DS . 'modules' . DS;\n\n                    $moduleDir = str_replace($replace_root, '', $moduleDir);\n\n                    $replace_root = dirname(dirname(MW_PATH)) . DS . 'userfiles' . DS . 'modules' . DS;\n                    $moduleDir = str_replace($replace_root, '', $moduleDir);\n\n                    $moduleDir = rtrim($moduleDir, '\\\\');\n                    $moduleDir = rtrim($moduleDir, '/');\n                    $moduleDir = str_replace('\\\\', '/', $moduleDir);\n                    $moduleDir = str_replace(modules_path(), '', $moduleDir);\n\n                    $config['module'] = $moduleDir;\n                    $config['module'] = rtrim($config['module'], '\\\\');\n                    $config['module'] = rtrim($config['module'], '/');\n\n                    $config['module_base'] = str_replace('admin/', '', $moduleDir);\n                    $main_try_icon = false;\n\n                    $config['is_symlink'] = false;\n                    if (is_link(normalize_path($moduleDir, false))) {\n                        $config['is_symlink'] = true;\n                    }\n\n                    if (is_dir($mod_name)) {\n                        $bname = basename($mod_name);\n                        $t1 = modules_path() . $config['module'] . DS . $bname;\n\n                        if (is_file($t1 . '.svg')) {\n                            $try_icon = $t1 . '.svg';\n                        } elseif (is_file($t1 . '.png')) {\n                            $try_icon = $t1 . '.png';\n                        } else {\n                            $try_icon = $t1 . '.jpg';\n                        }\n                        $main_try_icon = modules_path() . $config['module'] . DS . 'icon.png';\n                    } else {\n                        if (is_file($mod_name . '.svg')) {\n                            $try_icon = $mod_name . '.svg';\n                        } elseif (is_file($mod_name . '.png')) {\n                            $try_icon = $mod_name . '.png';\n                        } else {\n                            $try_icon = $mod_name . '.jpg';\n                        }\n                    }\n\n                    $try_icon = normalize_path($try_icon, false);\n\n                    if ($main_try_icon and is_file($main_try_icon)) {\n                        $config['icon'] = $this->app->url_manager->link_to_file($main_try_icon);\n                    } elseif (is_file($try_icon)) {\n//                        d($config);\n//                        d($try_icon);\n                        $config['icon'] = $this->app->url_manager->link_to_file($try_icon);\n                    } else {\n                        $config['icon'] = $this->app->url_manager->link_to_file($def_icon);\n                    }\n\n\n                    if (isset($config['ui'])) {\n                        $config['ui'] = intval($config['ui']);\n                    } else {\n                        $config['ui'] = 0;\n                    }\n\n                    if (isset($config['is_system'])) {\n                        $config['is_system'] = intval($config['is_system']);\n                    } else {\n                        $config['is_system'] = 0;\n                    }\n\n                    if (isset($config['is_integration'])) {\n                        $config['is_integration'] = intval($config['is_integration']);\n                    } else {\n                        $config['is_integration'] = 0;\n                    }\n\n                    if (isset($config['ui_admin'])) {\n                        $config['ui_admin'] = intval($config['ui_admin']);\n                    } else {\n                        $config['ui_admin'] = 0;\n                    }\n\n                    if (isset($config['no_cache']) and $config['no_cache'] == true) {\n                        $config['allow_caching'] = 0;\n                    } else {\n                        $config['allow_caching'] = 1;\n                    }\n\n                    if (isset($config['name']) and $skip_save !== true and $skip_module == false) {\n                        if (trim($config['module']) != '') {\n                            if ($list_as_element == true) {\n\n\n                                $this->app->layouts_manager->save($config);\n                            } else {\n                                $this->log('Installing module: ' . $config['name']);\n                                $config['installed'] = 'auto';\n                                $tablesData = false;\n                                $schemaFileName = modules_path() . $moduleDir . '/schema.json';\n                                if (isset($config['tables']) && is_array($config['tables']) && !empty($config['tables'])) {\n                                    $tablesData = $config['tables'];\n                                } elseif (isset($config['tables']) && is_callable($config['tables'])) {\n                                    call_user_func($config['tables']);\n                                    unset($config['tables']);\n                                } elseif (file_exists($schemaFileName)) {\n                                    $json = file_get_contents($schemaFileName);\n                                    $json = @json_decode($json, true);\n                                    $tablesData = $json;\n                                }\n                                $saved_ids[] = $this->save($config);\n\n                                if ($tablesData) {\n                                    $this->log('Installing module DB: ' . $config['name']);\n                                    (new DbUtils())->build_tables($tablesData);\n                                }\n                            }\n                        }\n                    }\n\n                    $configs[] = $config;\n                }\n            }\n\n\n            if ($skip_save == true) {\n                return $configs;\n            }\n\n            $cfg_ordered = array();\n            $cfg_ordered2 = array();\n            $cfg = $configs;\n            foreach ($cfg as $k => $item) {\n                if (isset($item['position'])) {\n                    $cfg_ordered2[$item['position']][] = $item;\n                    unset($cfg[$k]);\n                }\n            }\n            ksort($cfg_ordered2);\n            foreach ($cfg_ordered2 as $k => $item) {\n                foreach ($item as $ite) {\n                    $cfg_ordered[] = $ite;\n                }\n            }\n            if ($modules_remove_old == true) {\n                $table = 'options';\n                $uninstall_lock = $this->get('ui=any');\n\n                if (is_array($uninstall_lock) and !empty($uninstall_lock)) {\n                    foreach ($uninstall_lock as $value) {\n                        $ism = $this->exists($value['module']);\n                        if ($ism == false) {\n                            $this->delete_module($value['id']);\n                            $mn = $value['module'];\n                            $table_options = $this->tables['options'];\n                            $this->app->database_manager->delete_by_id($table_options, $mn, 'option_group');\n                        }\n                    }\n                }\n            }\n\n            $c2 = array_merge($cfg_ordered, $cfg);\n\n            $this->app->cache_manager->save($c2, $cache_id, $cache_group);\n\n            return $c2;\n        }\n    }\n\n    public function save($data_to_save)\n    {\n        if (mw()->user_manager->is_admin() == false and $this->_install_mode == false) {\n            return false;\n        }\n        if (isset($data_to_save['is_element']) and $data_to_save['is_element'] == true) {\n        }\n\n        $table = $this->tables['modules'];\n        $save = false;\n\n        if (!empty($data_to_save)) {\n            $s = $data_to_save;\n\n            if (!isset($s['parent_id'])) {\n                $s['parent_id'] = 0;\n            }\n\n            if (!isset($s['installed']) or $s['installed'] == 'auto') {\n                $s['installed'] = 1;\n            }\n\n            if (isset($s['settings']) and is_array($s['settings'])) {\n                $s['settings'] = json_encode($s['settings']);\n            }\n\n            $s['allow_html'] = true;\n\n            if (!isset($s['id']) and isset($s['module'])) {\n                $s['module'] = $data_to_save['module'];\n\n                if (!isset($s['module_id'])) {\n                    //$save = $this->get_modules('ui=any&no_cache=1&module=' . $s['module']);\n                    $save = db_get('table=modules&no_cache=1&module=' . $s['module']);\n\n                    if ($save != false and isset($save[0]) and is_array($save[0]) and isset($save[0]['id'])) {\n                        $s['id'] = intval($save[0]['id']);\n                        //   $s['position'] = intval($save[0]['position']);\n                        $s['installed'] = intval($save[0]['installed']);\n\n                        $save = mw()->database_manager->save($table, $s);\n                        // print_r($save);\n                        $mname_clen = str_replace('\\\\', '/', $s['module']);\n                        if ($s['id'] > 0) {\n\n                            //$delid = $s[\"id\"];\n                            DB::table($table)->where('id', '!=', $s['id'])->where('module', $s['module'])->delete();\n                            // $del = \"DELETE FROM {$table} WHERE module='{$mname_clen}' AND id!={$delid} \";\n                            //mw()->database_manager->q($del);\n                        }\n                    } else {\n\n                        $save = mw()->database_manager->save($table, $s);\n                    }\n                }\n            } else {\n                $save = mw()->database_manager->save($table, $s);\n            }\n        }\n        return $save;\n    }\n\n    public function get_modules($params)\n    {\n        return $this->get($params);\n    }\n\n    public function get($params = false)\n    {\n        if (!mw_is_installed()) {\n            return false;\n        }\n\n        $table = $this->tables['modules'];\n        if (is_string($params)) {\n            $params = parse_str($params, $params2);\n            $params = $options = $params2;\n        }\n        $params['table'] = $table;\n        if (!isset($params['group_by'])) {\n            $params['group_by'] = 'module';\n        }\n        if (!isset($params['order_by'])) {\n            $params['order_by'] = 'position asc';\n        }\n        $params['cache_group'] = 'modules/global';\n\n        if (isset($params['id'])) {\n            $params['limit'] = 1;\n        } else {\n            $params['limit'] = 1000;\n        }\n        if (isset($params['module'])) {\n            $params['module'] = str_replace('/admin', '', $params['module']);\n        }\n        if (isset($params['keyword'])) {\n            $params['search_in_fields'] = array('name', 'module', 'description', 'author', 'website', 'version', 'help');\n        }\n\n        if (!isset($params['ui'])) {\n            //  $params['ui'] = 1;\n            //\n        }\n\n        if (isset($params['ui']) and $params['ui'] == 'any') {\n            unset($params['ui']);\n        }\n\n        $data = $this->app->database_manager->get($params);\n\n        if (is_array($data) and !empty($data)) {\n            if (isset($data['settings']) and !is_array($data['settings'])) {\n                $data['settings'] = @json_decode($data['settings'], true);\n            } else {\n                foreach ($data as $k => $v) {\n                    if (isset($v['settings']) and !is_array($v['settings'])) {\n                        $v['settings'] = @json_decode($v['settings'], true);\n                        $data[$k] = $v;\n                    }\n                }\n            }\n        }\n\n        $return = [];\n        if ($data) {\n            $return = array_merge($data, $return);\n        }\n\n        if ($this->modules_register) {\n            $return = array_merge($return, $this->modules_register);\n        }\n\n        return $return;\n    }\n\n    public function exists($module_name)\n    {\n        if (!is_string($module_name)) {\n            return false;\n        }\n\n        if (!mw_is_installed()) {\n            return false;\n        }\n        if (trim($module_name) == '') {\n            return false;\n        }\n\n        if (isset($this->app->parser->module_registry[$module_name]) and $this->app->parser->module_registry[$module_name]) {\n            return true;\n        } else if (isset($this->app->parser->module_registry[$module_name . '/index']) and $this->app->parser->module_registry[$module_name . '/index']) {\n            return true;\n\n        }\n\n\n        global $mw_loaded_mod_memory;\n\n        if (!isset($mw_loaded_mod_memory[$module_name])) {\n            $ch = $this->locate($module_name, $custom_view = false);\n            if ($ch != false) {\n                $mw_loaded_mod_memory[$module_name] = true;\n            } else {\n                $mw_loaded_mod_memory[$module_name] = false;\n            }\n        }\n\n        return $mw_loaded_mod_memory[$module_name];\n    }\n\n    public function locate($module_name, $custom_view = false, $no_fallback_to_view = false)\n    {\n\n        $template_dir = templates_path() . 'default/';\n\n        if (defined('ACTIVE_TEMPLATE_DIR')) {\n            $template_dir = ACTIVE_TEMPLATE_DIR;\n            //  $this->app->content_manager->define_constants();\n        }\n\n        //  dd(debug_backtrace(1));\n\n        $module_name = trim($module_name);\n        // prevent hack of the directory\n        $module_name = str_replace('\\\\', '/', $module_name);\n        $module_name = str_replace('..', '', $module_name);\n\n        $module_name = reduce_double_slashes($module_name);\n        $module_in_template_dir = $template_dir . 'modules/' . $module_name . '';\n        $module_in_template_dir = normalize_path($module_in_template_dir, 1);\n        $module_in_template_file = $template_dir . 'modules/' . $module_name . '.php';\n        $module_in_template_file = normalize_path($module_in_template_file, false);\n        $module_in_default_file12 = modules_path() . $module_name . '.php';\n\n        $try_file1 = false;\n        $mod_d = $module_in_template_dir;\n        $mod_d1 = normalize_path($mod_d, 1);\n        $try_file1x = $mod_d1 . 'index.php';\n\n        if (is_file($try_file1x)) {\n            $try_file1 = $try_file1x;\n        } elseif (is_file($module_in_template_file)) {\n            $try_file1 = $module_in_template_file;\n        } elseif (is_file($module_in_default_file12) and $custom_view == false) {\n            $try_file1 = $module_in_default_file12;\n        } else {\n            $module_in_default_dir = modules_path() . $module_name . '';\n            $module_in_default_dir = normalize_path($module_in_default_dir, 1);\n            $module_in_default_file = modules_path() . $module_name . '.php';\n            $module_in_default_file_custom_view = modules_path() . $module_name . '_' . $custom_view . '.php';\n            $element_in_default_file = elements_path() . $module_name . '.php';\n            $element_in_default_file = normalize_path($element_in_default_file, false);\n\n            $module_in_default_file = normalize_path($module_in_default_file, false);\n\n            if (is_file($module_in_default_file)) {\n                if ($custom_view == true and is_file($module_in_default_file_custom_view)) {\n                    $try_file1 = $module_in_default_file_custom_view;\n                    if ($no_fallback_to_view == true) {\n                        return $try_file1;\n                    }\n                }\n            } else {\n                if (is_dir($module_in_default_dir)) {\n                    $mod_d1 = normalize_path($module_in_default_dir, 1);\n\n                    if ($custom_view == true) {\n                        $try_file1 = $mod_d1 . trim($custom_view) . '.php';\n                        if ($no_fallback_to_view == true) {\n                            return $try_file1;\n                        }\n                    } else {\n                        if ($no_fallback_to_view == true) {\n                            return false;\n                        }\n                        $try_file1 = $mod_d1 . 'index.php';\n                    }\n                } elseif (is_file($element_in_default_file)) {\n                    $is_element = true;\n                    $try_file1 = $element_in_default_file;\n                }\n            }\n        }\n\n        $try_file1 = normalize_path($try_file1, false);\n\n        return $try_file1;\n    }\n\n    public function delete_module($id)\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            return false;\n        }\n        $id = intval($id);\n\n        $table = $this->tables['modules'];\n\n        $db_categories = get_table_prefix() . 'categories';\n        $db_categories_items = get_table_prefix() . 'categories_items';\n\n        $this->app->database_manager->delete_by_id($table, $id);\n\n        $q = \"DELETE FROM $db_categories_items WHERE rel_type='modules' AND rel_id={$id}\";\n        $this->app->database_manager->q($q);\n        $this->app->cache_manager->delete('categories' . DIRECTORY_SEPARATOR . '');\n\n        $this->app->cache_manager->delete('modules' . DIRECTORY_SEPARATOR . '');\n    }\n\n    public function info($module_name)\n    {\n        $module_name = preg_replace('/admin$/', '', $module_name);\n        $module_name = rtrim($module_name, '/');\n\n        $data = app()->module_repository->getModule($module_name);\n\n        return $data;\n    }\n\n    public function ui($name, $arr = false)\n    {\n        return $this->app->ui->module($name, $arr);\n    }\n\n    public function load($module_name, $attrs = array())\n    {\n        return $this->app->parser->load($module_name, $attrs);\n\n    }\n\n    public function css_class($module_name)\n    {\n        global $mw_defined_module_classes;\n\n        if (isset($mw_defined_module_classes[$module_name]) != false) {\n            return $mw_defined_module_classes[$module_name];\n        } else {\n            $module_class = str_replace('/', '-', $module_name);\n            $module_class = str_replace('\\\\', '-', $module_class);\n            $module_class = str_replace(' ', '-', $module_class);\n            $module_class = str_replace('%20', '-', $module_class);\n            $module_class = str_replace('_', '-', $module_class);\n            $module_class = 'module-' . $module_class;\n\n            $mw_defined_module_classes[$module_name] = $module_class;\n\n            return $module_class;\n        }\n    }\n\n    public function license($module_name = false)\n    {\n     //   $module_name = str_replace('\\\\', '/', $module_name);\n        $licenses = $this->activeLicenses;\n        $lic = [];\n        if ($licenses) {\n            foreach ($licenses as $license) {\n               /* if (isset($license[\"rel_type\"]) and $license[\"rel_type\"] == $module_name) {\n                    $lic = $license;\n                }*/\n                $lic[] = $license;\n            }\n        }\n\n        if (!empty($lic)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * module_templates.\n     *\n     * Gets all templates for a module\n     *\n     * @category       modules api\n     */\n    public function templates($module_name, $template_name = false, $get_settings_file = false)\n    {\n        $module_name = str_replace('admin', '', $module_name);\n        $module_name_l = $this->locate($module_name);\n        $replace_paths = array();\n        if ($module_name_l == false) {\n            $module_name_l = modules_path() . DS . $module_name . DS;\n            $module_name_l = normalize_path($module_name_l, 1);\n            $replace_paths[] = $module_name_l;\n        } else {\n            $module_name_l = dirname($module_name_l) . DS . 'templates' . DS;\n            $module_name_l = normalize_path($module_name_l, 1);\n            $replace_paths[] = $module_name_l;\n        }\n\n        if (defined('ACTIVE_TEMPLATE_DIR')) {\n            $module_name_l_theme = ACTIVE_TEMPLATE_DIR . 'modules' . DS . $module_name . DS . 'templates' . DS;\n            $module_name_l_theme = normalize_path($module_name_l_theme, 1);\n            $replace_paths[] = $module_name_l_theme;\n        }\n        $replace_paths[] = normalize_path('modules' . '/' . $module_name . '/' . 'templates' . '/', 1);\n\n        $template_config = mw()->template->get_config();\n\n        if (!is_dir($module_name_l) /*and !is_dir($module_name_l_theme)*/) {\n            return false;\n        } else {\n            if ($template_name == false) {\n                $options = array();\n                $options['for_modules'] = 1;\n                $options['no_cache'] = 1;\n                $options['path'] = $module_name_l;\n                $module_name_l = $this->app->layouts_manager->scan($options);\n\n                //  $module_name_l  = array();\n\n                if (is_dir($module_name_l_theme)) {\n                    $options['path'] = $module_name_l_theme;\n                    $module_skins_from_theme = $this->app->layouts_manager->scan($options);\n\n                    if (is_array($module_skins_from_theme)) {\n                        if (!is_array($module_name_l)) {\n                            $module_name_l = array();\n                        }\n                        $file_names_found = array();\n                        if (is_array($module_skins_from_theme)) {\n\n\n                            if (isset($template_config['standalone_module_skins']) and $template_config['standalone_module_skins']) {\n                                $comb = $module_skins_from_theme;\n\n                            } else {\n                                $comb = array_merge($module_skins_from_theme, $module_name_l);\n                            }\n\n                            // $comb = array_merge($module_skins_from_theme, $module_name_l);\n                            if (is_array($comb) and !empty($comb)) {\n                                foreach ($comb as $k1 => $itm) {\n//                                    if (isset($itm['layout_file']) and $itm['layout_file']) {\n//\n//                                            foreach ($replace_paths as $replace_path) {\n//                                                $replace_path2  = str_replace(DS, '/', $replace_path );\n//\n//                                                $itm['layout_file']  = str_replace(DS, '/', $itm['layout_file'] );\n//\n//                                                $itm['layout_file'] = str_ireplace($replace_path, '', $itm['layout_file']);\n//                                                $itm['layout_file'] = str_ireplace($replace_path2, '', $itm['layout_file']);\n//\n//                                                $itm['layout_file'] = str_ireplace(normalize_path($replace_path), '', $itm['layout_file']);\n//                                            }\n//                                      //\n//\n//                                        $itm['layout_file'] = normalize_path($itm['layout_file'],false);\n//\n//                                    }\n                                    if (!in_array($itm['layout_file'], $file_names_found)) {\n                                        if (isset($itm['visible'])) {\n                                            if ($itm['visible'] == 'false'\n                                                or $itm['visible'] == 'no'\n                                                or $itm['visible'] == 'n'\n                                            ) {\n                                                // skip\n                                            } else {\n                                                $file_names_found[] = $itm['layout_file'];\n                                            }\n                                        } else {\n                                            $file_names_found[] = $itm['layout_file'];\n                                        }\n                                    } else {\n                                        unset($comb[$k1]);\n                                    }\n                                }\n                            }\n                            $module_name_l = ($comb);\n                        }\n                    }\n                }\n\n                return $module_name_l;\n            } else {\n                $template_name = str_replace('..', '', $template_name);\n                $template_name_orig = $template_name;\n\n                if ($get_settings_file == true) {\n                    $is_dot_php = get_file_extension($template_name);\n                    if ($is_dot_php != false and $is_dot_php == 'php') {\n                        $template_name = str_ireplace('.php', '', $template_name);\n                    }\n                    $template_name = $template_name . '_settings';\n                }\n\n                $is_dot_php = get_file_extension($template_name);\n                if ($is_dot_php != false and $is_dot_php != 'php') {\n                    $template_name = $template_name . '.php';\n                }\n\n\n                $tf_mw_default = $module_name_l . 'default.php';\n                $tf = normalize_path($module_name_l . $template_name, false);\n                $tf_theme = $module_name_l_theme . $template_name;\n                $tf_from_other_theme = templates_path() . $template_name;\n                $tf_from_other_theme = normalize_path($tf_from_other_theme, false);\n\n                $tf_other_module = modules_path() . $template_name;\n                $tf_other_module = normalize_path($tf_other_module, false);\n\n\n                if ($template_name == 'mw_default.php' and is_file($tf)) {\n                    return $tf;\n                } else if ($template_name == 'mw_default.php' and is_file($tf_mw_default)) {\n                    return normalize_path($tf_mw_default, false);\n                } else if (strstr($tf_from_other_theme, 'modules') and is_file($tf_from_other_theme)) {\n                    return normalize_path($tf_from_other_theme, false);\n                } elseif (is_file($tf_theme)) {\n                    return normalize_path($tf_theme, false);\n                } elseif (is_file($tf)) {\n                    return normalize_path($tf, false);\n                } elseif (strtolower($template_name_orig) != 'default' and is_file($tf_other_module)) {\n                    return normalize_path($tf_other_module, false);\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n\n    public function url($module_name = false)\n    {\n        if ($module_name == false) {\n\n            $mod_data = $this->app->parser->processor->current_module;\n            if (isset($mod_data['url_to_module'])) {\n                return $mod_data['url_to_module'];\n            }\n\n            if (isset($mod_data['url_to_module'])) {\n                return $mod_data['url_to_module'];\n            } else {\n                $mod_data = $this->current_module;\n                if (isset($mod_data['url_to_module'])) {\n                    return $mod_data['url_to_module'];\n                }\n            }\n        }\n\n        if (!is_string($module_name)) {\n            return false;\n        }\n\n        $secure_connection = false;\n        if (isset($_SERVER['HTTPS'])) {\n            if ($_SERVER['HTTPS'] == 'on') {\n                $secure_connection = true;\n            }\n        }\n\n        $args = func_get_args();\n        $function_cache_id = '';\n        foreach ($args as $k => $v) {\n            $function_cache_id = $function_cache_id . serialize($k) . serialize($v);\n        }\n\n        $cache_id = $function_cache_id = __FUNCTION__ . crc32($function_cache_id);\n\n        $cache_group = 'modules/global';\n\n        $cache_content = $this->app->cache_manager->get($cache_id, $cache_group);\n\n        if (($cache_content) != false) {\n            return $cache_content;\n        }\n\n        static $checked = array();\n\n        if (!isset($checked[$module_name])) {\n            $ch = $this->locate($module_name, $custom_view = false);\n\n            if ($ch != false) {\n                $ch = dirname($ch);\n                $ch = $this->app->url_manager->link_to_file($ch);\n                $ch = $ch . '/';\n                $checked[$module_name] = $ch;\n            } else {\n                $checked[$module_name] = false;\n            }\n        }\n        $this->app->cache_manager->save($checked[$module_name], $function_cache_id, $cache_group);\n        if ($secure_connection == true) {\n            $checked[$module_name] = str_ireplace('http://', 'https://', $checked[$module_name]);\n        }\n\n        return $checked[$module_name];\n    }\n\n    public function path($module_name)\n    {\n        return $this->dir($module_name);\n    }\n\n    public function dir($module_name)\n    {\n        if (!is_string($module_name)) {\n            return false;\n        }\n\n        $args = func_get_args();\n        $function_cache_id = '';\n        foreach ($args as $k => $v) {\n            $function_cache_id = $function_cache_id . serialize($k) . serialize($v);\n        }\n\n        $cache_id = $function_cache_id = __FUNCTION__ . crc32($function_cache_id);\n        $cache_group = 'modules/global';\n        $cache_content = $this->app->cache_manager->get($cache_id, $cache_group);\n        if (($cache_content) != false) {\n            return $cache_content;\n        }\n        $checked = array();\n        if (!isset($checked[$module_name])) {\n            $ch = $this->locate($module_name, $custom_view = false);\n            if ($ch != false) {\n                $ch = dirname($ch);\n                $ch = normalize_path($ch, 1);\n                $checked[$module_name] = $ch;\n            } else {\n                $checked[$module_name] = false;\n            }\n        }\n        $this->app->cache_manager->save($checked[$module_name], $function_cache_id, $cache_group);\n\n        return $checked[$module_name];\n    }\n\n\n    public function is_installed($module_name)\n    {\n\n        if (!mw_is_installed()) {\n            return true;\n        }\n        $module_name = trim($module_name);\n        $module_namei = $module_name;\n        if (strstr($module_name, 'admin')) {\n            $module_namei = str_ireplace('\\\\admin', '', $module_namei);\n            $module_namei = str_ireplace('/admin', '', $module_namei);\n        }\n        //$uninstall_lock = $this->get('one=1&ui=any&module=' . $module_namei);\n        $uninstall_lock = app()->module_repository->getModule($module_namei);\n\n\n        if (!$uninstall_lock or empty($uninstall_lock) or (isset($uninstall_lock['installed']) and $uninstall_lock['installed'] != '' and intval($uninstall_lock['installed']) != 1)) {\n            $root_mod = $this->locate_root_module($module_name);\n            if ($root_mod) {\n                //$uninstall_lock = $this->get('one=1&ui=any&module=' . $root_mod);\n                $uninstall_lock = app()->module_repository->getModule($root_mod);\n\n                if (empty($uninstall_lock) or (isset($uninstall_lock['installed']) and $uninstall_lock['installed'] != '' and intval($uninstall_lock['installed']) != 1)) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public function reorder_modules($data)\n    {\n        $adm = $this->app->user_manager->is_admin();\n        if ($adm == false) {\n            mw_error('Error: not logged in as admin.' . __FILE__ . __LINE__);\n        }\n        $table = $this->tables['modules'];\n        foreach ($data as $value) {\n            if (is_array($value)) {\n                $indx = array();\n                $i = 0;\n                foreach ($value as $value2) {\n                    $indx[$i] = $value2;\n                    ++$i;\n                }\n                $this->app->database_manager->update_position_field($table, $indx);\n                app()->module_repository->clearCache();\n\n                return $indx;\n            }\n        }\n        // $this->db_init();\n    }\n\n    public function delete_all()\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            return false;\n        } else {\n            $table = $this->tables['modules'];\n            $db_categories = $this->table_prefix . 'categories';\n            $db_categories_items = $this->table_prefix . 'categories_items';\n\n            $q = \"DELETE FROM $table \";\n            $this->app->database_manager->q($q);\n\n            $q = \"DELETE FROM $db_categories WHERE rel_type='modules' AND data_type='category' \";\n            $this->app->database_manager->q($q);\n\n            $q = \"DELETE FROM $db_categories_items WHERE rel_type='modules' AND data_type='category_item' \";\n            $this->app->database_manager->q($q);\n            $this->app->cache_manager->delete('categories' . DIRECTORY_SEPARATOR . '');\n            $this->app->cache_manager->delete('categories_items' . DIRECTORY_SEPARATOR . '');\n\n            $this->app->cache_manager->delete('modules' . DIRECTORY_SEPARATOR . '');\n        }\n        app()->module_repository->clearCache();\n    }\n\n    public function icon_with_title($module_name, $link = true)\n    {\n        $params = array();\n        $to_print = '';\n        $params['module'] = $module_name;\n        $params['ui'] = 'any';\n        $params['limit'] = 1;\n\n        //  $data = $this->get($params);\n\n        $data = app()->module_repository->getModule($module_name);\n\n\n        $info = false;\n        if (isset($data[0])) {\n            $info = $data[0];\n        }\n        if ($link == true and $info != false) {\n            $href = admin_url() . 'view:modules/load_module:' . module_name_encode($info['module']);\n        } else {\n            $href = '#';\n        }\n\n        if (isset($data[0])) {\n            $info = $data[0];\n            $tn_ico = thumbnail($info['icon'], 32, 32);\n            $to_print = '<a style=\"background-image:url(' . $tn_ico . ')\" class=\"module-icon-title\" href=\"' . $href . '\">' . $info['name'] . '</a>';\n        }\n        echo $to_print;\n    }\n\n    public function uninstall($params)\n    {\n        if (isset($params['for_module'])) {\n            $this_module = $this->get('ui=any&one=1&module=' . $params['for_module']);\n            if (isset($this_module['id'])) {\n                $params['id'] = $this_module['id'];\n            }\n        }\n\n\n        if (isset($params['id'])) {\n            $id = intval($params['id']);\n            $this_module = $this->get('ui=any&one=1&id=' . $id);\n            if ($this_module != false and is_array($this_module) and isset($this_module['id'])) {\n                $module_name = $this_module['module'];\n\n                if (trim($module_name) == '') {\n                    return false;\n                }\n                $loc_of_config = $this->locate($module_name, 'config');\n                $res = array();\n                $loc_of_functions = $this->locate($module_name, 'functions');\n                $cfg = false;\n                if (is_file($loc_of_config)) {\n                    include $loc_of_config;\n                    if (isset($config)) {\n                        $cfg = $config;\n                    }\n                    if (is_array($cfg) and !empty($cfg)) {\n                        if (isset($cfg['on_uninstall'])) {\n                            $func = $cfg['on_uninstall'];\n                            if (!function_exists($func)) {\n                                if (is_file($loc_of_functions)) {\n                                    include_once $loc_of_functions;\n                                }\n                            }\n                            if (function_exists($func)) {\n                                $res = $func();\n                                // return $res;\n                            }\n                        }\n                    }\n                }\n                $to_save = array();\n                $this->_install_mode = true;\n                $to_save['id'] = $id;\n                $to_save['installed'] = '0';\n                $this->save($to_save);\n            }\n        }\n        $this->app->cache_manager->delete('modules' . DIRECTORY_SEPARATOR . '');\n        $this->app->cache_manager->clear();\n        app()->module_repository->clearCache();\n\n//\n//        $this_module = $this->get('ui=any&one=1&id=' . $id);\n//dd($this_module);\n    }\n\n    public function set_installed($params)\n    {\n\n        if (isset($params['for_module'])) {\n            $this_module = $this->get('ui=any&one=1&module=' . $params['for_module']);\n            if (isset($this_module['id'])) {\n                $params['id'] = $this_module['id'];\n            }\n        }\n\n        if (isset($params['id'])) {\n            $id = intval($params['id']);\n            $this_module = $this->get('ui=any&one=1&id=' . $id);\n            if ($this_module != false and is_array($this_module) and isset($this_module['id'])) {\n                $module_name = $this_module['module'];\n\n                if (trim($module_name) == '') {\n                    return false;\n                }\n                $loc_of_config = $this->locate($module_name, 'config');\n                $res = array();\n                $loc_of_functions = $this->locate($module_name, 'functions');\n                $cfg = false;\n                if (is_file($loc_of_config)) {\n                    include $loc_of_config;\n                    if (isset($config)) {\n                        $cfg = $config;\n                    }\n                    if (is_array($cfg) and !empty($cfg)) {\n                        if (isset($cfg['on_install'])) {\n                            $func = $cfg['on_install'];\n                            if (!function_exists($func)) {\n                                if (is_file($loc_of_functions)) {\n                                    include_once $loc_of_functions;\n                                }\n                            }\n                            if (function_exists($func)) {\n                                $res = $func();\n                            }\n                        }\n                    }\n                }\n                $to_save = array();\n                $to_save['id'] = $id;\n                $to_save['installed'] = 1;\n                $this->_install_mode = true;\n                $this->save($to_save);\n            }\n        }\n        $this->app->cache_manager->delete('modules' . DIRECTORY_SEPARATOR . '');\n        app()->module_repository->clearCache();\n\n    }\n\n    public function update_db()\n    {\n        if (isset($options['glob'])) {\n            $glob_patern = $options['glob'];\n        } else {\n            $glob_patern = 'config.php';\n        }\n\n        //$this->app->cache_manager->clear();\n        //clearstatcache();\n        $dir_name_mods = modules_path();\n        $modules_remove_old = false;\n        $dir = rglob($glob_patern, 0, $dir_name_mods);\n\n        if (!empty($dir)) {\n            $configs = array();\n            foreach ($dir as $value) {\n                $loc_of_config = $value;\n                if ($loc_of_config != false and is_file($loc_of_config)) {\n                    include $loc_of_config;\n                    if (isset($config)) {\n                        $cfg = $config;\n                        if (isset($config['tables']) and is_array($config['tables'])) {\n                            $tabl = $config['tables'];\n                            foreach ($tabl as $key1 => $fields_to_add) {\n                                $table = $this->app->database_manager->real_table_name($key1);\n                                $this->app->database_manager->build_table($table, $fields_to_add);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        app()->module_repository->clearCache();\n\n    }\n\n    public function get_saved_modules_as_template($params)\n    {\n        $params = parse_params($params);\n\n        if ($this->app->user_manager->is_admin() == false) {\n            return false;\n        }\n\n        $table = 'module_templates';\n\n        $params['table'] = $table;\n\n        $data = $this->app->database_manager->get($params);\n\n        return $data;\n    }\n\n    public function delete_module_as_template($data)\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            return false;\n        }\n\n        $table = 'module_templates';\n        $save = false;\n\n        $adm = $this->app->user_manager->is_admin();\n        if ($adm == false) {\n            mw_error('Error: not logged in as admin.' . __FILE__ . __LINE__);\n        }\n\n        if (isset($data['id'])) {\n            $c_id = intval($data['id']);\n            $this->app->database_manager->delete_by_id($table, $c_id);\n        }\n\n        if (isset($data['ids']) and is_array($data['ids'])) {\n            foreach ($data['ids'] as $value) {\n                $c_id = intval($value);\n                $this->app->database_manager->delete_by_id($table, $c_id);\n            }\n        }\n        app()->module_repository->clearCache();\n\n    }\n\n    public function save_module_as_template($data_to_save)\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            return false;\n        }\n\n        $table = 'module_templates';\n        $save = false;\n\n        if (!empty($data_to_save)) {\n            $s = $data_to_save;\n\n            $save = $this->app->database_manager->save($table, $s);\n        }\n        app()->module_repository->clearCache();\n\n        return $save;\n    }\n\n    public function scan_for_elements($options = array())\n    {\n        if (is_string($options)) {\n            $params = parse_str($options, $params2);\n            $options = $params2;\n        }\n\n        $options['is_elements'] = 1;\n        $options['dir_name'] = normalize_path(elements_path());\n\n        if (isset($options['cleanup_db'])) {\n            $this->app->layouts_manager->delete_all();\n        }\n\n        return $this->scan_for_modules($options);\n    }\n\n    public function get_modules_from_current_site_template()\n    {\n        if (!defined('ACTIVE_TEMPLATE_DIR')) {\n            $this->app->content_manager->define_constants();\n        }\n\n        $dir_name = ACTIVE_TEMPLATE_DIR . 'modules' . DS;\n\n\n        if (is_dir($dir_name)) {\n            $configs = array();\n\n            $glob_patern = '*config.php';\n\n            $dir = rglob($glob_patern, 0, $dir_name);\n            $replace_root = normalize_path($dir_name);\n            $def_icon = modules_path() . 'default.svg';\n            if (!empty($dir)) {\n                foreach ($dir as $module) {\n                    $module_dir = dirname($module);\n                    $module_dir = normalize_path($module_dir);\n                    $config = array();\n                    include $module;\n                    $module_name = str_replace($replace_root, '', $module_dir);\n\n                    $module_name = rtrim($module_name, '\\\\');\n                    $module_name = rtrim($module_name, '/');\n                    $config['module'] = $module_name;\n\n                    $config['module'] = rtrim($config['module'], '\\\\');\n                    $config['module'] = rtrim($config['module'], '/');\n\n                    $try_icon = $module_dir . $module_name . '.png';\n                    $try_icon_svg = $module_dir . $module_name . '.svg';\n                    if (is_file($try_icon_svg)) {\n                        $config['icon'] = $this->app->url_manager->link_to_file($try_icon_svg);\n                    } elseif (is_file($try_icon)) {\n                        $config['icon'] = $this->app->url_manager->link_to_file($try_icon);\n                    } elseif (is_file($module_dir . $module_name . '.jpg')) {\n                        $config['icon'] = $this->app->url_manager->link_to_file($module_dir . $module_name . '.jpg');\n                    } else {\n                        $config['icon'] = $this->app->url_manager->link_to_file($def_icon);\n                    }\n\n                    if (isset($config['ui'])) {\n                        $config['ui'] = intval($config['ui']);\n                    } else {\n                        $config['ui'] = 0;\n                    }\n\n                    if ($config['ui'] == 0) {\n                        continue;\n                    }\n\n\n                    $configs[] = $config;\n                }\n            }\n\n            return $configs;\n        }\n    }\n\n    public $logger = null;\n\n\n    public function log($text)\n    {\n        if (is_object($this->logger) and method_exists($this->logger, 'log')) {\n            $this->logger->log($text);\n        }\n    }\n\n\n    public $_module_locations_root_cache = array();\n\n    public function locate_root_module($module_name)\n    {\n        if (isset($this->_module_locations_root_cache[$module_name])) {\n            return $this->_module_locations_root_cache[$module_name];\n        }\n\n\n        $module_name_parts = explode('/', $module_name);\n\n\n        if ($module_name_parts and is_array($module_name_parts)) {\n            $folders_to_check = array();\n            $module_name_parts_count = count($module_name_parts) - 1;\n\n            if ($module_name_parts_count) {\n                for ($id = $module_name_parts_count; $id > 0; $id--) {\n                    unset($module_name_parts[$id]);\n                    if ($module_name_parts) {\n                        $folders_to_check[] = implode('/', $module_name_parts);\n                    }\n                }\n            }\n\n            if ($folders_to_check) {\n\n                foreach ($folders_to_check as $module_name_check) {\n                    $modules_dir_default = modules_path() . $module_name_check;\n                    $modules_dir_default = normalize_path($modules_dir_default, true);\n                    if (is_dir($modules_dir_default) and is_file($modules_dir_default . 'config.php')) {\n                        $this->_module_locations_root_cache[$module_name] = $module_name_check;\n                        return $module_name_check;\n//                        $is_installed = $this->app->module_manager->is_installed($module_name_check);\n//                        if (!$is_installed) {\n//                            return '';\n//                        }\n                    }\n\n                }\n\n            }\n\n        }\n\n    }\n\n\n    public function boot_module($module)\n    {\n        if(!mw_is_installed()){\n            return;\n        }\n        if (isset($module['settings']) and $module['settings'] and isset($module['settings']['autoload_namespace']) and is_array($module['settings']['autoload_namespace']) and !empty($module['settings']['autoload_namespace'])) {\n            foreach ($module['settings']['autoload_namespace'] as $namespace_item) {\n\n                if (isset($namespace_item['path']) and isset($namespace_item['namespace'])) {\n                    $path = normalize_path($namespace_item['path'], 1);\n                    $namespace = $namespace_item['namespace'];\n                    if ($path and is_dir($path)) {\n                        autoload_add_namespace($path, $namespace);\n                    }\n                }\n            }\n\n        }\n\n        if (isset($module['settings']) and $module['settings'] and isset($module['settings']['service_provider']) and is_array($module['settings']['service_provider']) and !empty($module['settings']['service_provider'])) {\n            foreach ($module['settings']['service_provider'] as $service_provider) {\n                if (class_exists($service_provider)) {\n                    app()->register($service_provider);\n                }\n            }\n        }\n\n        $loadProviders = [];\n        if (is_array($module['settings']['service_provider'])) {\n            foreach ($module['settings']['service_provider'] as $serviceProvider) {\n                $loadProviders[] = $serviceProvider;\n            }\n        } else {\n            $loadProviders[] = $module['settings']['service_provider'];\n        }\n        foreach ($loadProviders as $loadProvider) {\n            if (class_exists($loadProvider)) {\n                app()->register($loadProvider);\n            }\n        }\n    }\n\n\n}\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\App\\Http\\Controllers;\n\n\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Request;\nuse MicroweberPackages\\App\\Http\\Middleware\\ApiAuth;\nuse MicroweberPackages\\App\\Http\\Middleware\\SameSiteRefererMiddleware;\nuse MicroweberPackages\\App\\Managers\\Helpers\\VerifyCsrfTokenHelper;\nuse MicroweberPackages\\Helper\\XSSClean;\nuse MicroweberPackages\\View\\View;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n\nclass ApiController  extends FrontendController\n{\n\n    public function api_html()\n    {\n        if (!defined('MW_API_HTML_OUTPUT')) {\n            define('MW_API_HTML_OUTPUT', true);\n        }\n        return $this->api();\n    }\n\n    public function api($api_function = false, $params = false)\n    {\n        if (isset($_REQUEST['api_key']) and user_id() == 0) {\n            api_login($_REQUEST['api_key']);\n        }\n\n        if (!defined('MW_API_CALL')) {\n            define('MW_API_CALL', true);\n        }\n\n        $set_constants = true;\n        if (!mw_is_installed()) {\n            $set_constants = false;\n        }\n\n        $mod_class_api = false;\n        $mod_class_api_called = false;\n        $mod_class_api_class_exist = false;\n        $caller_commander = false;\n        if ($api_function == false) {\n            $api_function_full = app()->url_manager->string();\n            $api_function_full = $this->app->format->replace_once('api_html', '', $api_function_full);\n            $api_function_full = $this->app->format->replace_once('api/api', 'api', $api_function_full);\n\n            $api_function_full = $this->app->format->replace_once('api', '', $api_function_full);\n            $api_function_full = trim($api_function_full, '/');\n\n            //$api_function_full = substr($api_function_full, 4);\n        } else {\n            $api_function_full = $api_function;\n        }\n        if (isset($api_function_full) and $api_function_full != '') {\n            if (ltrim($api_function_full, '/') == 'module') {\n                $set_constants = false;\n            }\n        }\n        if ($set_constants == true) {\n            $this->app->content_manager->define_constants();\n        }\n\n\n        if (defined('TEMPLATE_DIR')) {\n            app()->template_manager->boot_template();\n        }\n\n        //$api_function_full = str_ireplace('api/', '', $api_function_full);\n\n        $api_function_full = str_replace('..', '', $api_function_full);\n        $api_function_full = str_replace('\\\\', '/', $api_function_full);\n        $api_function_full = str_replace('//', '/', $api_function_full);\n\n        $api_function_full = app()->database_manager->escape_string($api_function_full);\n        if (is_string($api_function_full)) {\n            $mod_api_class = explode('/', $api_function_full);\n        } else {\n            $mod_api_class = $api_function_full;\n        }\n        $try_class_func = array_pop($mod_api_class);\n\n        // $try_class_func2 = array_pop($mod_api_class);\n        $mod_api_class_copy = $mod_api_class;\n        $try_class_func2 = array_pop($mod_api_class_copy);\n        $mod_api_class2 = implode(DS, $mod_api_class_copy);\n\n        $mod_api_class = implode(DS, $mod_api_class);\n        $mod_api_class_clean = ltrim($mod_api_class, '/');\n        $mod_api_class_clean = ltrim($mod_api_class_clean, '\\\\');\n        $mod_api_class_clean_uc1 = ucfirst($mod_api_class_clean);\n\n        $mod_api_class1 = normalize_path(modules_path() . $mod_api_class, false) . '.php';\n        $mod_api_class_native = normalize_path(mw_includes_path() . $mod_api_class, false) . '.php';\n        $mod_api_class_native_system = normalize_path(dirname(MW_PATH) . DS . $mod_api_class, false) . '.php';\n        $mod_api_class_native_global_ns = normalize_path(mw_includes_path() . 'classes' . DS . $mod_api_class2, false) . '.php';\n        $mod_api_class1_uc1 = normalize_path(modules_path() . $mod_api_class_clean_uc1, false) . '.php';\n        $mod_api_class_native_uc1 = normalize_path(mw_includes_path() . $mod_api_class_clean_uc1, false) . '.php';\n        $mod_api_class_native_global_ns_uc1 = normalize_path(mw_includes_path() . 'classes' . DS . $mod_api_class_clean_uc1, false) . '.php';\n\n        $mod_api_class2 = normalize_path(modules_path() . DS . $mod_api_class_clean . DS . $mod_api_class_clean, false) . '.php';\n        $mod_api_class2_uc1 = normalize_path(modules_path() . DS . $mod_api_class_clean . DS . $mod_api_class_clean, false) . '.php';\n\n        $try_class = '\\\\' . str_replace('/', '\\\\', $mod_api_class);\n\n        if (class_exists($try_class, false)) {\n            $caller_commander = 'class_is_already_here';\n            $mod_class_api_class_exist = true;\n        } else {\n            if (is_file($mod_api_class1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class1;\n            } elseif (is_file($mod_api_class_native_system)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native_system;\n            } elseif (is_file($mod_api_class1_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class1_uc1;\n            } elseif (is_file($mod_api_class_native_global_ns_uc1)) {\n                $try_class = str_replace('/', '\\\\', $mod_api_class2);\n                $mod_class_api = true;\n\n                include_once $mod_api_class_native_global_ns_uc1;\n            } elseif (is_file($mod_api_class_native_global_ns)) {\n                $try_class = str_replace('/', '\\\\', $mod_api_class2);\n                $mod_class_api = true;\n                include_once $mod_api_class_native_global_ns;\n            } elseif (is_file($mod_api_class_native_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native_uc1;\n            } elseif (is_file($mod_api_class_native)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native;\n            } elseif (is_file($mod_api_class2)) {\n                $mod_class_api = true;\n                include_once $mod_api_class2;\n            } elseif (is_file($mod_api_class2_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class2_uc1;\n            }\n        }\n\n        $api_exposed = '';\n\n        // user functions\n        $api_exposed .= 'user_login user_logout social_login_process';\n\n        // content functions\n\n        $api_exposed .= 'set_language ';\n        $api_exposed .= (api_expose(true));\n        $api_auth_exposed = ' ';\n        if (mw()->user_manager->is_logged()) {\n            $get_exposed = (api_expose_user(true));\n            $api_exposed .= $get_exposed;\n            $api_auth_exposed .= $get_exposed;\n        }\n\n        if (is_admin()) {\n            $get_exposed = (api_expose_admin(true));\n            $api_exposed .= $get_exposed;\n            $api_auth_exposed .= $get_exposed;\n        }\n\n\n        $api_exposed = explode(' ', $api_exposed);\n        $api_exposed = array_unique($api_exposed);\n        $api_exposed = array_trim($api_exposed);\n\n        $api_auth_exposed = explode(' ', $api_auth_exposed);\n        $api_auth_exposed = array_unique($api_auth_exposed);\n        $api_auth_exposed = array_trim($api_auth_exposed);\n\n        $hooks = api_bind(true);\n        if (mw()->user_manager->is_logged()) {\n            $hooks_admin = api_bind_user(true);\n            if (is_array($hooks_admin)) {\n                $hooks = array_merge($hooks, $hooks_admin);\n            }\n        }\n\n        if (is_admin()) {\n            $hooks_admin = api_bind_admin(true);\n            if (is_array($hooks_admin)) {\n                $hooks = array_merge($hooks, $hooks_admin);\n            }\n        }\n\n        if ($api_function == false) {\n            $api_function = app()->url_manager->segment(1);\n        }\n\n        if (!defined('MW_API_RAW')) {\n            if ($mod_class_api != false) {\n                $url_segs = app()->url_manager->segment(-1);\n            }\n        } else {\n            if (is_array($api_function)) {\n                $url_segs = $api_function;\n            } else {\n                $url_segs = explode('/', $api_function);\n            }\n        }\n        if (!defined('MW_API_FUNCTION_CALL')) {\n            define('MW_API_FUNCTION_CALL', $api_function);\n        }\n\n        $api_skip_token_validation_items = ['clearcache','logout','user_login'];\n\n        if (in_array($api_function, $api_auth_exposed)) {\n            if(!in_array($api_function, $api_skip_token_validation_items)) {\n\n                $request = request();\n                $request->merge($_GET);\n                $request->merge($_POST);\n                $ref = $request->headers->get('referer');\n\n                $same_site = app()->make(SameSiteRefererMiddleware::class);\n                $is_same_site = $same_site->isSameSite($ref);\n\n                if (!$is_same_site) {\n                    $bearer_token = $request->bearerToken();\n                    $is_bearer_token_valid = false;\n\n\n                    if ($bearer_token) {\n                        $validator = app()->make(ApiAuth::class);\n                        $is_bearer_token_valid = $validator->validateBearerToken($bearer_token);\n                    }\n                    if (!$is_bearer_token_valid) {\n                        $validator = app()->make(VerifyCsrfTokenHelper::class);\n                        $is_token_valid = $validator->isValid($request);\n                        if (!$is_token_valid) {\n                            App::abort(403, 'Unauthorized action. The API function requires authentication.');\n                        }\n                    }\n                }\n            }\n        }\n\n\n        switch ($caller_commander) {\n            case 'class_is_already_here':\n\n                if ($params != false) {\n                    $data = $params;\n                } elseif (!$_POST and !$_REQUEST) {\n                    $data = app()->url_manager->params(true);\n                    if (empty($data)) {\n                        $data = app()->url_manager->segment(2);\n                    }\n                } else {\n\n                    //$data = $_REQUEST;\n                    $data = array_merge($_GET, $_POST);\n                }\n\n                static $loaded_classes = array();\n\n                //$try_class_n = src_\n                if (isset($loaded_classes[$try_class]) == false) {\n                    $res = new $try_class($data);\n                    $loaded_classes[$try_class] = $res;\n                } else {\n                    $res = $loaded_classes[$try_class];\n                }\n\n                if (isset($hooks[$api_function_full]) and !empty($hooks[$api_function_full])) {\n                    foreach ($hooks[$api_function_full] as $hook) {\n                        if (is_array($hook)) {\n                            $hook = array_pop($hook);\n                        }\n                        if (is_callable($hook)) {\n                            $res = call_user_func($hook, $data);\n                            if (defined('MW_API_RAW')) {\n                                $mod_class_api_called = true;\n                            }\n                            return $this->_api_response($res);\n                        }\n                    }\n                }\n\n\n                if (method_exists($res, $try_class_func) or method_exists($res, $try_class_func2)) {\n                    if (method_exists($res, $try_class_func2)) {\n                        $try_class_func = $try_class_func2;\n                    }\n\n                    $res = $res->$try_class_func($data);\n\n                    if (defined('MW_API_RAW')) {\n                        $mod_class_api_called = true;\n                    }\n\n                    return $this->_api_response($res);\n                }\n                break;\n\n            default:\n                $res = false;\n                if (isset($hooks[$api_function_full])) {\n                    $data = array_merge($_GET, $_POST);\n\n                    $call = $hooks[$api_function_full];\n\n                    if (!empty($call)) {\n                        foreach ($call as $call_item) {\n                            $res = call_user_func($call_item, $data);\n                        }\n                    }\n                    if ($res != false) {\n                        return $this->_api_response($res);\n                    }\n                }\n\n                if ($mod_class_api == true and $mod_api_class != false) {\n                    $mod_api_class = str_replace('..', '', $mod_api_class);\n\n                    $try_class = str_replace('/', '\\\\', $mod_api_class);\n                    $try_class_full = str_replace('/', '\\\\', $api_function_full);\n\n                    $try_class_full2 = str_replace('\\\\', '/', $api_function_full);\n                    $mod_api_class_test = explode('/', $try_class_full2);\n                    $try_class_func_test = array_pop($mod_api_class_test);\n                    $mod_api_class_test_full = implode('/', $mod_api_class_test);\n                    $mod_api_err = false;\n                    if (!defined('MW_API_RAW')) {\n                        if (!in_array($try_class_full, $api_exposed, true) and !in_array($try_class_full2, $api_exposed, true) and !in_array($mod_api_class_test_full, $api_exposed, true)) {\n                            $mod_api_err = true;\n\n                            foreach ($api_exposed as $api_exposed_value) {\n                                if ($mod_api_err == true) {\n                                    if ($api_exposed_value == $try_class_full) {\n                                        $mod_api_err = false;\n                                    } elseif (strtolower('\\\\' . $api_exposed_value) == strtolower($try_class_full)) {\n                                        $mod_api_err = false;\n                                    } elseif ($api_exposed_value == $try_class_full2) {\n                                        $mod_api_err = false;\n                                    } else {\n                                        $convert_slashes = str_replace('\\\\', '/', $try_class_full);\n\n                                        if ($convert_slashes == $api_exposed_value) {\n                                            $mod_api_err = false;\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            $mod_api_err = false;\n                        }\n                    }\n\n                    if ($mod_class_api and $mod_api_err == false) {\n                        if (!class_exists($try_class, false)) {\n                            $remove = $url_segs;\n                            $last_seg = array_pop($remove);\n                            $last_prev_seg = array_pop($remove);\n                            $last_prev_seg2 = array_pop($remove);\n\n                            if (class_exists($last_prev_seg, false)) {\n                                $try_class = $last_prev_seg;\n                            } elseif (class_exists($last_prev_seg2, false)) {\n                                $try_class = $last_prev_seg2;\n                            }\n                        }\n\n                        if (!class_exists($try_class, false)) {\n                            $try_class_mw = ltrim($try_class, '/');\n                            $try_class_mw = ltrim($try_class_mw, '\\\\');\n                            $try_class = $try_class_mw;\n                        }\n\n                        if (class_exists($try_class, false)) {\n                            if ($params != false) {\n                                $data = $params;\n                            } elseif (!$_POST and !$_REQUEST) {\n                                $data = app()->url_manager->params(true);\n                                if (empty($data)) {\n                                    $data = app()->url_manager->segment(2);\n                                }\n                            } else {\n                                $data = array_merge($_GET, $_POST);\n                            }\n\n                            $res = new $try_class($data);\n\n                            if (method_exists($res, $try_class_func) or method_exists($res, $try_class_func2)) {\n                                if (method_exists($res, $try_class_func2)) {\n                                    $try_class_func = $try_class_func2;\n                                }\n\n                                $res = $res->$try_class_func($data);\n\n                                $mod_class_api_called = true;\n\n                                return $this->_api_response($res);\n                            }\n                        } else {\n                            mw_error('The api class ' . $try_class . '  does not exist');\n                        }\n                    }\n                }\n\n                break;\n        }\n\n        if ($api_function) {\n        } else {\n            $api_function = 'index';\n        }\n\n        if ($api_function == 'module' and $mod_class_api_called == false) {\n\n            return $this->module();\n        }\n        $err = false;\n        if (!in_array($api_function, $api_exposed, true)) {\n            $err = true;\n        }\n\n\n\n        if ($err == true) {\n            foreach ($api_exposed as $api_exposed_item) {\n                if ($api_exposed_item == $api_function) {\n                    $err = false;\n                }\n            }\n        }\n\n        if (isset($api_function_full)) {\n            foreach ($api_exposed as $api_exposed_item) {\n                if (is_string($api_exposed_item) and is_string($api_function_full)) {\n                    $api_function_full = str_replace('\\\\', '/', $api_function_full);\n                    $api_function_full = ltrim($api_function_full, '/');\n\n                    if (strtolower($api_exposed_item) == strtolower($api_function_full)) {\n                        $err = false;\n                    }\n                }\n            }\n        }\n\n        if ($err == false) {\n            if ($mod_class_api_called == false) {\n                if (!$_POST and !$_REQUEST) {\n\n                    //  $data = app()->url_manager->segment(2);\n                    $data = app()->url_manager->params(true);\n                    if (empty($data)) {\n                        $data = app()->url_manager->segment(2);\n                    }\n                } else {\n\n                    //$data = $_REQUEST;\n                    $data = array_merge($_GET, $_POST);\n                }\n\n                $api_function_full_2 = explode('/', $api_function_full);\n                unset($api_function_full_2[count($api_function_full_2) - 1]);\n                $api_function_full_2 = implode('/', $api_function_full_2);\n\n                if (function_exists($api_function)) {\n                    $res = $api_function($data);\n                } elseif (class_exists($api_function, false)) {\n\n                    //\n                    $segs = app()->url_manager->segment();\n                    $mmethod = array_pop($segs);\n\n                    $class = new $api_function($this->app);\n\n                    if (method_exists($class, $mmethod)) {\n                        $res = $class->$mmethod($data);\n                    }\n                } else {\n                    $api_function_full_2 = str_replace(array('..', '/'), array('', '\\\\'), $api_function_full_2);\n                    $api_function_full_2 = __NAMESPACE__ . '\\\\' . $api_function_full_2;\n\n                    if (class_exists($api_function_full_2, false)) {\n\n                        //\n\n                        $segs = app()->url_manager->segment();\n                        $mmethod = array_pop($segs);\n\n                        $class = new $api_function_full_2($this->app);\n\n                        if (method_exists($class, $mmethod)) {\n                            $res = $class->$mmethod($data);\n                        }\n                    } elseif (isset($api_function_full)) {\n                        $api_function_full = str_replace('\\\\', '/', $api_function_full);\n\n                        $api_function_full1 = explode('/', $api_function_full);\n                        $mmethod = array_pop($api_function_full1);\n                        $mclass = array_pop($api_function_full1);\n\n                        if (class_exists($mclass, false)) {\n\n                            if (is_array($this->app)) {\n                                $class = new $mclass($this->app);\n                            } else {\n                                $class = new $mclass();\n                            }\n\n                            if (method_exists($class, $mmethod)) {\n                                $res = $class->$mmethod($data);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (isset($res) and isset($hooks[$api_function]) and is_array($hooks[$api_function]) and !empty($hooks[$api_function])) {\n                foreach ($hooks[$api_function] as $hook_key => $hook_value) {\n                    if ($hook_value != false and $hook_value != null) {\n                        $hook_value($res);\n                    }\n                }\n            } else {\n\n                //error('The api function ' . $api_function . ' does not exist', __FILE__, __LINE__);\n            }\n\n            // print $api_function;`\n        } else {\n            $api_function = mw()->format->clean_html($api_function);\n            $api_function = mw()->format->clean_xss($api_function);\n            return response('The api function is not defined in the allowed functions list', 403);\n\n\n        }\n\n        if (isset($res)) {\n            return $this->_api_response($res);\n        }\n\n        return;\n\n    }\n\n\n    private function _api_response($res)\n    {\n        $status_code = 200;\n        if ($res instanceof Response) {\n            return $res;\n        }\n\n        if (defined('MW_API_RAW')) {\n            return response($res);\n        }\n\n        if (!defined('MW_API_HTML_OUTPUT')) {\n            if (is_bool($res) or is_int($res)) {\n                return \\Response::make(json_encode($res), $status_code);\n            } elseif ($res instanceof RedirectResponse) {\n                return $res;\n            } elseif ($res instanceof Response) {\n                return $res;\n            }\n\n            $response = \\Response::make($res, $status_code);\n            if (is_bool($res) or is_int($res) or is_array($res)) {\n                $response->header('Content-Type', 'application/json');\n            }\n\n            return $response;\n        } else {\n            if (is_array($res)) {\n                $res = json_encode($res);\n            } else if (is_bool($res)) {\n                $res = (bool)$res;\n            }\n            $response = \\Response::make($res, $status_code);\n            return $response;\n        }\n    }\n\n    public function module()\n    {\n        if (!defined('MW_API_CALL')) {\n            //      define('MW_API_CALL', true);\n        }\n\n        if (!defined('MW_NO_SESSION')) {\n            $is_ajax = app()->url_manager->is_ajax();\n            if (!mw()->user_manager->session_id() and $is_ajax == false and !defined('MW_SESS_STARTED')) {\n                define('MW_SESS_STARTED', true);\n                //session_start();\n            }\n            $editmode_sess = app()->user_manager->session_get('editmode');\n            if ($editmode_sess == true and !defined('IN_EDIT')) {\n                define('IN_EDIT', true);\n            }\n        }\n\n\n        $request_data = array_merge($_GET, $_POST);\n\n        // sanitize attributes\n        if($request_data){\n            $request_data_new = [];\n\n            $xssClean = new XSSClean();\n\n            foreach ($request_data as $k=>$v){\n                if(is_string($v)) {\n                    $v = str_replace('<', '-', $v);\n                    $v = str_replace('>', '-', $v);\n                    $v = str_replace('\"', '-', $v);\n                    $v = str_replace(\"'\", '-', $v);\n                }\n                if(is_array($v)) {\n                    $v = $xssClean->cleanArray($v);\n                } else {\n                    $v = $xssClean->clean($v);\n                }\n\n                if(is_string($k)){\n                    $k = str_replace('<', '-', $k);\n                    $k = str_replace('>', '-', $k);\n                    $k = str_replace('\"', '-', $k);\n                    $k = str_replace(\"'\", '-', $k);\n\n                    $k = $xssClean->clean($k);\n                    if($k){\n                        $request_data_new[$k] = $v;\n                    }\n                } else {\n                    $request_data_new[$k] = $v;\n                }\n\n            }\n            $request_data = $request_data_new;\n\n        }\n\n        $page = false;\n\n        $custom_display = false;\n        if (isset($request_data['data-display']) and $request_data['data-display'] == 'custom') {\n            $custom_display = true;\n        }\n\n        if (isset($request_data['data-module-name'])) {\n            $request_data['module'] = $request_data['data-module-name'];\n            $request_data['data-type'] = $request_data['data-module-name'];\n\n            if (!isset($request_data['id'])) {\n                $request_data['id'] = app()->url_manager->slug($request_data['data-module-name'] . '-' . date('YmdHis'));\n            }\n        }\n\n        if (isset($request_data['data-type'])) {\n            $request_data['module'] = $request_data['data-type'];\n        }\n\n        if (isset($request_data['display']) and $request_data['display'] == 'custom') {\n            $custom_display = true;\n        }\n        if (isset($request_data['view']) and $request_data['view'] == 'admin') {\n            $custom_display = false;\n        }\n\n        if ($custom_display == true) {\n            $custom_display_id = false;\n            if (isset($request_data['id'])) {\n                $custom_display_id = $request_data['id'];\n            }\n            if (isset($request_data['data-id'])) {\n                $custom_display_id = $request_data['data-id'];\n            }\n        }\n        if (isset($request_data['from_url'])) {\n            $from_url = $request_data['from_url'];\n        } elseif (isset($_SERVER['HTTP_REFERER'])) {\n            $from_url = $_SERVER['HTTP_REFERER'];\n            $from_url_p = @parse_url($from_url);\n            if (is_array($from_url_p) and isset($from_url_p['query'])) {\n                $from_url_p = parse_query($from_url_p['query']);\n                if (is_array($from_url_p) and isset($from_url_p['from_url'])) {\n                    $from_url = $from_url_p['from_url'];\n                }\n            }\n        }\n\n        if (isset($from_url) and $from_url != false) {\n            if (stristr($from_url, 'editor_tools/wysiwyg') && !defined('IN_EDITOR_TOOLS')) {\n                define('IN_EDITOR_TOOLS', true);\n            }\n\n            if (stristr($from_url, admin_url()) && !defined('MW_BACKEND')) {\n                define('MW_BACKEND', true);\n            }\n\n\n            $url = $from_url;\n            $from_url2 = str_replace('#', '/', $from_url);\n\n            $content_id = app()->url_manager->param('content_id', false, $from_url2);\n\n            if ($content_id == false) {\n                $content_id = app()->url_manager->param('editpage', false, $from_url2);\n            }\n            if ($content_id == false) {\n                $content_id = app()->url_manager->param('editpost', false, $from_url2);\n            }\n            if ($content_id == false) {\n                $is_current = app()->url_manager->param('is-current', false, $from_url2);\n                if ($is_current) {\n                    $content_id = app()->url_manager->param('content-id', false, $from_url2);\n                } else {\n                    $content_id = app()->url_manager->param('mw-adm-content-id', false, $from_url2);\n                }\n            }\n\n            if ($content_id == false) {\n                $action_test = app()->url_manager->param('action', false, $from_url2);\n\n                if ($action_test != false) {\n                    $action_test = str_ireplace('editpage:', '', $action_test);\n                    $action_test = str_ireplace('editpost:', '', $action_test);\n                    $action_test = str_ireplace('edit:', '', $action_test);\n                    $action_test = str_ireplace('showposts:', '', $action_test);\n\n                    $action_test = intval($action_test);\n                    if ($action_test != 0) {\n                        $content_id = $action_test;\n                        $this->app->content_manager->define_constants(array('id' => $content_id));\n                    }\n                }\n            }\n\n            if (strpos($url, '#')) {\n                $url = substr($url, 0, strpos($url, '#'));\n            }\n\n            //$url = $_SERVER[\"HTTP_REFERER\"];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if ($content_id != false) {\n                $page = array();\n                $page['id'] = $content_id;\n                if ($content_id) {\n                    $page = $this->app->content_manager->get_by_id($content_id);\n                    if($page){\n                        $url = $page['url'];\n                    }\n                }\n            } else {\n                if (trim($url) == '' or trim($url) == app()->url_manager->site()) {\n\n                    //var_dump($from_url);\n                    //$page = $this->app->content_manager->get_by_url($url);\n                    $page = $this->app->content_manager->homepage();\n\n                    if (!defined('IS_HOME')) {\n                        define('IS_HOME', true);\n                    }\n\n                    if (isset($from_url2)) {\n                        $mw_quick_edit = app()->url_manager->param('mw_quick_edit', false, $from_url2);\n\n                        if ($mw_quick_edit) {\n                            $page = false;\n                        }\n                    }\n                } else {\n                    if (!stristr($url, admin_url())) {\n                        $page = $this->app->content_manager->get_by_url($url);\n                    } else {\n                        $page = false;\n                        if (!defined('PAGE_ID')) {\n                            define('PAGE_ID', false);\n                        }\n                        if (!defined('POST_ID')) {\n                            define('POST_ID', false);\n                        }\n                        if (!defined('CONTENT_ID')) {\n                            define('CONTENT_ID', false);\n                        }\n                    }\n                }\n            }\n        } else {\n            $url = app()->url_manager->string();\n        }\n\n        if (!defined('IS_HOME')) {\n            if (isset($page['is_home']) and $page['is_home'] == 'y') {\n                define('IS_HOME', true);\n            }\n        }\n\n\n        if (mw_is_installed()) {\n            if ($page == false) {\n                if (!isset($content_id)) {\n                    return;\n                }\n\n                $this->app->content_manager->define_constants(array('id' => $content_id));\n            } else {\n                $this->app->content_manager->define_constants($page);\n            }\n        }\n\n        if (defined('TEMPLATE_DIR')) {\n            app()->template_manager->boot_template();\n        }\n\n        if ($custom_display == true) {\n            $u2 = app()->url_manager->site();\n            $u1 = str_replace($u2, '', $url);\n\n            $this->render_this_url = $u1;\n            $this->isolate_by_html_id = $custom_display_id;\n            return $this->frontend();\n\n\n        }\n\n\n        $url_last = false;\n        if (!isset($request_data['module'])) {\n            $url = app()->url_manager->string(0);\n            if ($url == __FUNCTION__) {\n                $url = app()->url_manager->string(0);\n            }\n\n            /*\n            $is_ajax = app()->url_manager->is_ajax();\n\n            if ($is_ajax == true) {\n            $url = app()->url_manager->string(true);\n            }*/\n\n            $url = $this->app->format->replace_once('module/', '', $url);\n            $url = $this->app->format->replace_once('module_api/', '', $url);\n            $url = $this->app->format->replace_once('m/', '', $url);\n            if (is_module($url)) {\n                $request_data['module'] = $url;\n                $mod_from_url = $url;\n            } else {\n                $url1 = $url_temp = explode('/', $url);\n                $url_last = array_pop($url_temp);\n\n                $try_intil_found = false;\n                $temp1 = array();\n                foreach ($url_temp as $item) {\n                    $temp1[] = implode('/', $url_temp);\n                    $url_laset = array_pop($url_temp);\n                }\n\n                $i = 0;\n                foreach ($temp1 as $item) {\n                    if ($try_intil_found == false) {\n                        if (is_module($item)) {\n                            $url_tempx = explode('/', $url);\n\n                            $request_data['module'] = $item;\n                            $url_prev = $url_last;\n                            $url_last = array_pop($url_tempx);\n                            $url_prev = array_pop($url_tempx);\n\n                            // d($url_prev);\n                            $mod_from_url = $item;\n                            $try_intil_found = true;\n                        }\n                    }\n                    ++$i;\n                }\n            }\n        }\n\n        $module_info = app()->url_manager->param('module_info', true);\n\n\n        if ($module_info and isset($request_data['module'])) {\n            $request_data['module'] = str_replace('..', '', $request_data['module']);\n            $try_config_file = modules_path() . '' . $request_data['module'] . '_config.php';\n            $try_config_file = normalize_path($try_config_file, false);\n            if (is_file($try_config_file)) {\n                include $try_config_file;\n\n                if (!isset($config) or !is_array($config)) {\n                    return false;\n                }\n\n                if (!isset($config['icon']) or $config['icon'] == false) {\n                    $config['icon'] = modules_path() . '' . $request_data['module'] . '.png';\n                    $config['icon'] = app()->url_manager->link_to_file($config['icon']);\n                }\n                echo json_encode($config);\n\n                return;\n            }\n        }\n\n\n        $admin = app()->url_manager->param('admin', true);\n\n        $mod_to_edit = app()->url_manager->param('module_to_edit', true);\n        $embed = app()->url_manager->param('embed', true);\n\n        $mod_iframe = false;\n        if ($mod_to_edit != false) {\n            $mod_to_edit = str_ireplace('_mw_slash_replace_', '/', $mod_to_edit);\n            $mod_iframe = true;\n        }\n\n        $data = $request_data;\n\n        if (($_POST)) {\n            $data = $_POST;\n        } else {\n            $url = app()->url_manager->segment();\n\n            if (!empty($url)) {\n                foreach ($url as $k => $v) {\n                    $kv = explode(':', $v);\n                    if (isset($kv[0]) and isset($kv[1])) {\n                        $data[$kv[0]] = $kv[1];\n                    }\n                }\n            }\n        }\n\n        $tags = false;\n        $mod_n = false;\n\n        if (isset($data['type']) != false) {\n            if (trim($data['type']) != '') {\n                $mod_n = $data['data-type'] = $data['type'];\n            }\n        }\n\n        if (isset($data['data-module-name'])) {\n            $mod_n = $data['data-type'] = $data['data-module-name'];\n            unset($data['data-module-name']);\n        }\n\n        if (isset($data['data-type']) != false) {\n            $mod_n = $data['data-type'];\n        }\n        if (isset($data['data-module']) != false) {\n            if (trim($data['data-module']) != '') {\n                $mod_n = $data['module'] = $data['data-module'];\n            }\n        }\n\n        if (isset($data['module'])) {\n            $mod_n = $data['data-type'] = $data['module'];\n            unset($data['module']);\n        }\n\n        if (isset($data['type'])) {\n            $mod_n = $data['data-type'] = $data['type'];\n            unset($data['type']);\n        }\n        if (isset($data['data-type']) != false) {\n            $data['data-type'] = rtrim($data['data-type'], '/');\n            $data['data-type'] = rtrim($data['data-type'], '\\\\');\n            $data['data-type'] = str_replace('__', '/', $data['data-type']);\n        }\n        if (!isset($data)) {\n            $data = $request_data;\n        }\n        if (!isset($data['module']) and isset($mod_from_url) and $mod_from_url != false) {\n            $data['module'] = ($mod_from_url);\n        }\n\n        if (!isset($data['id']) and isset($request_data['id']) == true) {\n            $data['id'] = $request_data['id'];\n        }\n        if (isset($data['ondrop'])) {\n            if (!defined('MW_MODULE_ONDROP')) {\n                define('MW_MODULE_ONDROP', true);\n            }\n\n            unset($data['ondrop']);\n        }\n\n\n\n        $opts = array();\n        if ($request_data) {\n            $opts = $request_data;\n        }\n\n\n        if (isset($opts['class']) and is_string($opts['class']) and strstr($opts['class'], 'module-as-element')) {\n            $opts['module_as_element'] = true;\n            $opts['populate_module_ids_in_elements'] = true;\n        }\n\n\n        if ($mod_n == 'element-from-template' && isset($data['template'])) {\n            $t = str_replace('..', '', $data['template']);\n            $possible_layout = TEMPLATE_DIR . $t;\n            $possible_layout = normalize_path($possible_layout, false);\n            $opts['element_from_template'] = true;\n\n            if (is_file($possible_layout)) {\n                $l = new View($possible_layout);\n                $layout = $l->__toString();\n                $layout = $this->app->parser->process($layout, $opts);\n                return response($layout);\n            }\n        }\n\n        if ($mod_n == 'module-' && isset($data['template'])) {\n            $t = str_replace('..', '', $data['template']);\n            $possible_layout = templates_path() . $t;\n            $possible_layout = normalize_path($possible_layout, false);\n            if (is_file($possible_layout)) {\n                $l = new View($possible_layout);\n                $layout = $l->__toString();\n                $layout = $this->app->parser->process($layout, $opts);\n                return response($layout);\n\n\n                //  echo $layout;\n\n                // return;\n            }\n        }\n\n        $has_id = false;\n        if (isset($data) and is_array($data)) {\n            $data = xss_clean($data);\n            foreach ($data as $k => $v) {\n                $k = $this->app->module_manager->format_attr($k);\n\n                if ($k != 'ondrop') {\n                    if ($k == 'id') {\n                        $has_id = true;\n                    }\n\n                    if (is_array($v)) {\n                        $v1 = $this->app->format->array_to_base64($v);\n                        $tags .= \"{$k}=\\\"$v1\\\" \";\n                    } else {\n                        $v = $this->app->module_manager->format_attr($v);\n\n                        $tags .= \"{$k}=\\\"$v\\\" \";\n                    }\n                }\n            }\n        }\n\n        if ($has_id == false) {\n//            if (defined('MW_MODULE_ONDROP')) {\n//                $mod_n = app()->url_manager->slug($mod_n) . '-' . date(\"YmdHis\").unquid();\n//                $tags .= \"id=\\\"$mod_n\\\" \";\n//            }\n            //  $mod_n = app()->url_manager->slug($mod_n) . '-' . date(\"YmdHis\");\n            //  $tags .= \"id=\\\"$mod_n\\\" \";\n        }\n\n        $tags = \"<module {$tags} />\";\n\n\n        if (isset($request_data['live_edit'])) {\n            event_trigger('mw.live_edit');\n        }\n        $opts['admin'] = $admin;\n        if ($admin == 'admin') {\n            event_trigger('mw_backend');\n            event_trigger('mw.admin');\n        } else {\n            event_trigger('mw_frontend');\n            event_trigger('mw.front');\n        }\n\n        if (isset($_SERVER['HTTP_REFERER']) and $_SERVER['HTTP_REFERER'] != false) {\n            $get_arr_from_ref = $_SERVER['HTTP_REFERER'];\n            if (strstr($get_arr_from_ref, app()->url_manager->site())) {\n                $get_arr_from_ref_arr = parse_url($get_arr_from_ref);\n                if (isset($get_arr_from_ref_arr['query']) and $get_arr_from_ref_arr['query'] != '') {\n                    $restore_get = parse_str($get_arr_from_ref_arr['query'], $get_array);\n                    if (is_array($get_array)) {\n                        mw_var('mw_restore_get', $get_array);\n                    }\n\n                    //\n                }\n            }\n        }\n\n        $res = $this->app->parser->process($tags, $opts);\n        $res = preg_replace('~<(?:!DOCTYPE|/?(?:html|head|body))[^>]*>\\s*~i', '', $res);\n\n        if ($embed != false) {\n            $p_index = mw_includes_path() . 'api/index.php';\n            $p_index = normalize_path($p_index, false);\n            $l = new View($p_index);\n            $layout = $l->__toString();\n            $res = str_replace('{content}', $res, $layout);\n        }\n\n        $aj = app()->url_manager->is_ajax();\n\n        if ((isset($request_data['live_edit']) or isset($request_data['admin'])) and $aj == false) {\n            $p_index = mw_includes_path() . DS . 'toolbar' . DS . 'editor_tools' . DS . 'module_settings' . DS . 'index.php';\n            $p_index = normalize_path($p_index, false);\n            $l = new View($p_index);\n            $l->params = $data;\n            $layout = $l->__toString();\n            $res = str_replace('{content}', $res, $layout);\n            $res = $this->app->parser->process($res, $options = false);\n        }\n\n        $res = mw()->template->process_stacks($res);\n\n        $res = execute_document_ready($res);\n        if (!defined('MW_NO_OUTPUT')) {\n            $res = app()->url_manager->replace_site_url_back($res);\n            return response($res);\n\n            // echo $res;\n        }\n\n        if ($url_last == __FUNCTION__) {\n            return;\n        }\n        if (function_exists($url_last)) {\n            $this->api($url_last);\n        } elseif (isset($url_prev) and function_exists($url_prev)) {\n            $this->api($url_last);\n        } elseif (class_exists($url_last, false)) {\n            $this->api($url_last);\n        } elseif (isset($url_prev) and class_exists($url_prev, false)) {\n            $this->api($url_prev);\n        }\n\n        return;\n    }\n\n    public function editor_tools()\n    {\n        if (!defined('IN_ADMIN') and is_admin()) {\n            define('IN_ADMIN', true);\n        }\n        if (!defined('IN_EDITOR_TOOLS')) {\n            define('IN_EDITOR_TOOLS', true);\n        }\n\n        if (mw_is_installed() == true) {\n\n            //event_trigger('mw_db_init');\n            //  event_trigger('mw_cron');\n        }\n\n        $tool = app()->url_manager->segment(1);\n\n        if ($tool) {\n        } else {\n            $tool = 'index';\n        }\n\n        $page = false;\n        if (isset($_REQUEST['content_id'])) {\n            if (intval($_REQUEST['content_id']) == 0) {\n                $this->create_new_page = true;\n\n                $custom_content_data_req = $_REQUEST;\n                $custom_content_data = array();\n                if (isset($custom_content_data_req['content_type'])) {\n                    //    $custom_content_data['content_type'] = $custom_content_data_req['content_type'];\n                }\n                if (isset($custom_content_data_req['content_type'])) {\n                    $custom_content_data['content_type'] = $custom_content_data_req['content_type'];\n                }\n                if (isset($custom_content_data_req['subtype'])) {\n                    $custom_content_data['subtype'] = $custom_content_data_req['subtype'];\n                }\n                if (isset($custom_content_data_req['parent_page']) and is_numeric($custom_content_data_req['parent_page'])) {\n                    $custom_content_data['parent'] = intval($custom_content_data_req['parent_page']);\n                }\n                if (isset($custom_content_data_req['preview_layout'])) {\n                    //  $custom_content_data['preview_layout'] =($custom_content_data_req['preview_layout']);\n                }\n                if (!empty($custom_content_data)) {\n                    $custom_content_data['id'] = 0;\n                    $this->content_data = $custom_content_data;\n                }\n\n                $this->return_data = 1;\n                $page = $this->frontend();\n            } else {\n                $page = $this->app->content_manager->get_by_id($_REQUEST['content_id']);\n            }\n        } elseif (isset($_SERVER['HTTP_REFERER'])) {\n            $url = $_SERVER['HTTP_REFERER'];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if (trim($url) == '' or trim($url) == app()->url_manager->site()) {\n\n                //$page = $this->app->content_manager->get_by_url($url);\n                $page = $this->app->content_manager->homepage();\n            } else {\n                $page = $this->app->content_manager->get_by_url($url);\n            }\n        } else {\n            $url = app()->url_manager->string();\n        }\n\n        if (!isset($page['active_site_template'])) {\n            $page['active_site_template'] = 'default';\n        }\n\n        if (isset($_GET['preview_template'])) {\n            $page['active_site_template'] = $_GET['preview_template'];\n        }\n        if (isset($_GET['content_type'])) {\n            $page['content_type'] = $_GET['content_type'];\n        }\n        if (isset($_GET['preview_layout']) and $_GET['preview_layout'] != 'inherit') {\n            $page['layout_file'] = $_GET['preview_layout'];\n        }\n\n        $this->app->content_manager->define_constants($page);\n\n        $page['render_file'] = $this->app->template->get_layout($page);\n\n        if (defined('TEMPLATE_DIR')) {\n            app()->template_manager->boot_template();\n        }\n\n        // $params = $_REQUEST;\n        $params = array_merge($_GET, $_POST);\n        $tool = str_replace('..', '', $tool);\n\n        $p_index = mw_includes_path() . 'toolbar/editor_tools/index.php';\n        $p_index = normalize_path($p_index, false);\n\n        $standalone_edit = true;\n        $p = mw_includes_path() . 'toolbar/editor_tools/' . $tool . '/index.php';\n        $standalone_edit = false;\n        if ($tool == 'plupload') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'plupload') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'imageeditor') {\n            $standalone_edit = true;\n        }\n\n        if ($tool == 'rte_image_editor') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'editor_toolbar') {\n            $standalone_edit = true;\n        }\n\n        if ($tool == 'wysiwyg') {\n            $standalone_edit = false;\n            $ed_file_from_template = TEMPLATE_DIR . 'editor.php';\n\n            if (is_file($ed_file_from_template)) {\n                $p_index = $ed_file_from_template;\n            }\n\n            if (isset($page['content_type']) and $page['content_type'] != 'post' and $page['content_type'] != 'page' and $page['content_type'] != 'product') {\n                if (isset($page['subtype']) and ($page['subtype'] != 'post' and $page['subtype'] != 'product')) {\n                    $standalone_edit = true;\n                }\n            } elseif (isset($page['content_type']) and $page['content_type'] == 'post') {\n                if (isset($page['subtype']) and ($page['subtype'] != 'post' and $page['subtype'] != 'product')) {\n                    $standalone_edit = true;\n                }\n            }\n\n            if ($standalone_edit) {\n                if (!isset($page['content'])) {\n                    $page['content'] = '<div class=\"element\"></div>';\n                }\n                $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n                $page['render_file'] = false;\n            }\n\n            //\n            //  $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n        }\n        $default_css = '';\n        $apijs_settings_loaded = '';\n        $apijs_loaded = '';\n\n        $p = normalize_path($p, false);\n\n        $l = new View($p_index);\n        $l->params = $params;\n        $layout = $l->__toString();\n        $apijs_loaded = false;\n        if ($layout != false) {\n\n            //$apijs_loaded = $this->app->template->get_apijs_url() . '?id=' . CONTENT_ID;\n            //$apijs_loaded = $this->app->template->get_apijs_url();\n            // $apijs_settings_loaded = $this->app->template->get_apijs_settings_url() . '?id=' . CONTENT_ID . '&category_id=' . CATEGORY_ID;\n            //  $apijs_settings_loaded = $this->app->template->get_apijs_settings_url();\n            $default_css_url = $this->app->template->get_default_system_ui_css_url();\n\n\n            // $is_admin = app()->user_manager->is_admin();\n            // $default_css = '<link rel=\"stylesheet\" href=\"' . mw_includes_url() . 'default.css?v=' . MW_VERSION . '\" type=\"text/css\" />';\n            $default_css = '<link rel=\"stylesheet\" href=\"' . $default_css_url . '\" type=\"text/css\" />';\n\n\n            $headers = event_trigger('site_header', TEMPLATE_NAME);\n            $template_headers_append = '';\n            $one = 1;\n            if (is_array($headers)) {\n                foreach ($headers as $modify) {\n                    if ($modify != false and is_string($modify) and $modify != '') {\n                        $template_headers_append = $template_headers_append . $modify;\n                    }\n                }\n                if ($template_headers_append != false and $template_headers_append != '') {\n                    $layout = str_ireplace('</head>', $template_headers_append . '</head>', $l, $one);\n                }\n            }\n            if (function_exists('template_headers_src')) {\n                $template_headers_src = template_headers_src();\n                if ($template_headers_src != false and $template_headers_src != '') {\n                    $layout = str_ireplace('</head>', $template_headers_src . '</head>', $l, $one);\n                }\n            }\n\n            if (isset($page['active_site_template'])) {\n                if ($page['active_site_template'] == '') {\n                    $page['active_site_template'] = 'default';\n                }\n\n                if ($page['active_site_template'] == 'default') {\n                    $active_site_template = $this->app->option_manager->get('current_template', 'template');\n                } else {\n                    $active_site_template = $page['active_site_template'];\n                    if ($active_site_template == 'mw_default') {\n                        $active_site_template = 'default';\n                    }\n                }\n\n                $live_edit_css_folder = userfiles_path() . 'css' . DS . $active_site_template . DS;\n                $custom_live_edit = $live_edit_css_folder . DS . 'live_edit.css';\n                if (is_file($custom_live_edit)) {\n                    $live_edit_url_folder = userfiles_url() . 'css/' . $active_site_template . '/';\n                    $custom_live_editmtime = filemtime($custom_live_edit);\n                    $liv_ed_css = '<link rel=\"stylesheet\" href=\"' . $live_edit_url_folder . 'live_edit.css?version=' . $custom_live_editmtime . '\" id=\"mw-template-settings\" type=\"text/css\" />';\n                    $layout = str_ireplace('</head>', $liv_ed_css . '</head>', $l);\n                }\n            }\n        }\n\n        if (isset($_REQUEST['plain'])) {\n            if (is_file($p)) {\n                $p = new View($p);\n                $p->params = $params;\n                $layout = $p->__toString();\n                return response($layout);\n\n            }\n        } elseif (is_file($p)) {\n            $p = new View($p);\n            $p->params = $params;\n            $layout_tool = $p->__toString();\n            $layout = str_replace('{content}', $layout_tool, $layout);\n        } else {\n            $layout = str_replace('{content}', 'Not found!', $layout);\n        }\n        $category = false;\n        if (defined('CATEGORY_ID')) {\n            $category = $this->app->category_manager->get_by_id(CATEGORY_ID);\n        }\n\n        //    $page['render_file'] = $render_file;\n\n        if (!$standalone_edit and $tool == 'wysiwyg') {\n            if (isset($page['render_file'])) {\n                if (!isset($page['layout_file'])) {\n                    $page['layout_file'] = str_replace(template_dir(), '', $page['render_file']);\n                }\n\n\n                event_trigger('mw.front', $page);\n                $l = new View($page['render_file']);\n                $l->page_id = PAGE_ID;\n                $l->content_id = CONTENT_ID;\n                $l->post_id = POST_ID;\n                $l->category_id = CATEGORY_ID;\n                $l->content = $page;\n                $l->category = $category;\n                $l->params = $params;\n                $l->page = $page;\n                $l->application = $this->app;\n                $l = $l->__toString();\n//\n//\n//                $render_params = array();\n//                $render_params['render_file'] = $p;\n//                $render_params['page_id'] = PAGE_ID;\n//                $render_params['content_id'] = CONTENT_ID;\n//                $render_params['post_id'] = POST_ID;\n//                $render_params['category_id'] = CATEGORY_ID;\n//                $render_params['page'] = $page;\n//                $render_params['params'] = $params;\n//                $render_params['application'] = $this->app;\n\n                //  $l = $this->app->template->render($render_params);\n                if (is_object($l)) {\n                    return $l;\n                }\n\n                $l = $this->app->parser->process($l, $options = false);\n\n                //                if(isset($page['content']) and $page['content'] != false){\n                //\n                //                if($page['content'] == ''){\n                //                    unset($page['content']);\n                //                }\n                //                } else {\n                //                    $page['content'] = $l;\n                //                }\n\n                $editable = $this->app->parser->isolate_content_field($l, true);\n\n                if ($editable != false) {\n                    $page['content'] = $editable;\n                } else {\n                    if ($tool == 'wysiwyg') {\n                        $err = 'no editable content region found';\n                        if (isset($page['layout_file'])) {\n                            $file = $page['layout_file'];\n                            $file = str_replace('__', '/', $page['layout_file']);\n                            $err = $err . ' in file ' . $file;\n                        }\n                        if (isset($page['active_site_template'])) {\n                            $err = $err . ' (' . $page['active_site_template'] . ' template)';\n                        }\n\n                        return $err;\n                    }\n                }\n            }\n        }\n\n        /* if (!stristr($layout, $apijs_loaded)) {\n             $rep = 0;\n\n             $default_css = $default_css . \"\\r\\n\" . '<script src=\"' . $apijs_settings_loaded . '\"></script>' . \"\\r\\n\";\n             $default_css = $default_css . \"\\r\\n\" . '<script src=\"' . $apijs_loaded . '\"></script>' . \"\\r\\n\";\n             $layout = str_ireplace('<head>', '<head>' . $default_css, $layout, $rep);\n         }*/\n\n        $layout = str_ireplace('<head>', '<head>' . $default_css, $layout, $rep);\n\n\n        $layout = $this->app->template->append_api_js_to_layout($layout);\n        if (isset($page['content'])) {\n            if ($standalone_edit) {\n                if (!isset($render_file)) {\n                    if (stristr($page['content'], 'field=\"content\"') or stristr($page['content'], 'field=\\'content\\'')) {\n                        $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n                    }\n                }\n            }\n\n            $layout = str_replace('{content}', $page['content'], $layout);\n        }\n\n        $layout = mw()->template->process_meta($layout);\n        $layout = mw()->template->process_stacks($layout);\n\n\n        $layout = $this->app->parser->process($layout, $options = false);\n\n        $layout = mw()->template->add_csrf_token_meta_tags($layout);\n\n        $layout = execute_document_ready($layout);\n\n        $layout = str_replace('{head}', '', $layout);\n\n        $layout = str_replace('{content}', '', $layout);\n        return response($layout);\n\n\n    }\n\n}\n", "<?php\n\n\n/*\n * This file is part of the Microweber framework.\n *\n * (c) Microweber CMS LTD\n *\n * For full license information see\n * https://github.com/microweber/microweber/blob/master/LICENSE\n *\n */\n\nnamespace MicroweberPackages\\Module;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse MicroweberPackages\\App\\Models\\SystemLicenses;\nuse MicroweberPackages\\Database\\Utils as DbUtils;\n\nclass ModuleManager\n{\n    public $tables = array();\n    public $app = null;\n    public $ui = array();\n    private $activeLicenses = array();\n    public $table_prefix = false;\n    public $current_module = false;\n    public $current_module_params = false;\n    protected $table = 'modules';\n    private $_install_mode = false;\n\n    public function __construct($app = null)\n    {\n        if (!defined('EMPTY_MOD_STR')) {\n            define('EMPTY_MOD_STR', \"<div class='mw-empty-module '>{module_title} {type}</div>\");\n        }\n\n        /*  print '         1                  ';\n          dump(debug_backtrace(1));*/\n\n        if (!is_object($this->app)) {\n            if (is_object($app)) {\n                $this->app = $app;\n            } else {\n                $this->app = mw();\n            }\n        }\n        $this->set_table_names();\n        if (mw_is_installed()) {\n            $getSystemLicense = SystemLicenses::get();\n            if ($getSystemLicense != null) {\n                $this->activeLicenses = $getSystemLicense->toArray();\n            }\n        }\n\n\n    }\n\n    public function set_table_names($tables = false)\n    {\n        if (!is_array($tables)) {\n            $tables = array();\n        }\n        if (!isset($tables['modules'])) {\n            $tables['modules'] = 'modules';\n        }\n        if (!isset($tables['elements'])) {\n            $tables['elements'] = 'elements';\n        }\n        if (!isset($tables['module_templates'])) {\n            $tables['module_templates'] = 'module_templates';\n        }\n        if (!isset($tables['system_licenses'])) {\n            $tables['system_licenses'] = 'system_licenses';\n        }\n        if (!isset($tables['options'])) {\n            $tables['options'] = 'options';\n        }\n        $this->tables['options'] = $tables['options'];\n        $this->tables['modules'] = $tables['modules'];\n        $this->tables['elements'] = $tables['elements'];\n        $this->tables['module_templates'] = $tables['module_templates'];\n        $this->tables['system_licenses'] = $tables['system_licenses'];\n    }\n\n\n\n    // example:\n    /*\n     ['name' => 'User Roles',\n            'icon' => 'icon.png',\n            'author' => 'Microweber',\n            'description' => 'User Roles',\n            'website' => 'http://microweber.com/',\n            'help' => 'http://microweber.info/modules',\n            'version' => 0.19,\n            'ui' => true,\n            'ui_admin' => true,\n            'position' => 30,\n            'categories' => 'admin',\n            'assets' => '['resources']',\n\n            'type' => 'users/roles',\n            'controllers' => [\n                'index' => \"MicroweberPackages\\Role\\Http\\Controllers\\IndexController@index\",\n                'admin' => \"MicroweberPackages\\Role\\Http\\Controllers\\IndexController@admin\",\n            ],\n        ]\n    */\n\n\n    private $modules_register = [];\n\n    public function register($module_type, $controller_action)\n    {\n        $this->_register_module_callback_controller($module_type, $controller_action);\n        $config = [];\n        $config['module'] = $module_type;\n        $this->modules_register[] = $config;\n\n//        $config = [];\n//\n//        if (isset($config['type']) and $config['type']) {\n//            $type = $config['type'];\n//\n//            $this->modules_register[] = $config;\n//\n//            //Register controllers\n//            if (isset($config['controllers']) and $config['controllers'] and is_array($config['controllers'])) {\n//                foreach ($config['controllers'] as $controller_key => $controller) {\n//                    $this->_register_module_callback_controller($type . '/' . $controller_key, $controller);\n//                }\n//            }\n//        }\n\n\n    }\n\n    public function _register_module_callback_controller($module_type, $controller)\n    {\n        $this->app->parser->module_registry[trim($module_type)] = trim($controller);\n    }\n\n\n    /* public function register_module($module)\n     {\n\n     }\n\n     public function generate_module($module)\n     {\n         if (!isset($module['public_folder'])) {\n             new Exception('Please set public folder for registering module');\n         }\n\n         $moduleName = trim($module['name']);\n         $modulePublicFolder = trim($module['public_folder']);\n         $modulePublicPath = normalize_path(modules_path() . $modulePublicFolder);\n\n         $moduleIcon = '';\n         if (is_file($module['icon'])) {\n             file_put_contents($modulePublicPath . 'icon.png', file_get_contents($module['icon']));\n             $moduleIcon = $modulePublicPath . 'icon.png';\n             $moduleIcon = dir2url($moduleIcon);\n             $moduleIcon = str_replace(site_url(), '{SITE_URL}', $moduleIcon);\n         }\n\n         if (isset($module['controller'])) {\n             file_put_contents($modulePublicPath . 'index.php', '\n <?php\n return \\App::call(\"' . $module['controller'] . '@index\");\n ?>\n         ');\n         }\n\n         if (isset($module['admin_controller'])) {\n             file_put_contents($modulePublicPath . 'admin.php', '\n <?php\n return \\App::call(\"' . $module['admin_controller'] . '@index\");\n ?>\n         ');\n         }\n\n         $moduleConfig = array();\n         $moduleConfig['name'] = $module['name'];\n         $moduleConfig['icon'] = $moduleIcon;\n         $moduleConfig['author'] = \"Microweber\";\n         $moduleConfig['description'] = $module['name'];\n         $moduleConfig['website'] = \"http://microweber.com/\";\n         $moduleConfig['help'] = \"http://microweber.info/modules\";\n         $moduleConfig['version'] = 0.19;\n         $moduleConfig['ui'] = true;\n         $moduleConfig['ui_admin'] = true;\n         $moduleConfig['position'] = 30;\n         $moduleConfig['categories'] = \"admin\";\n\n         file_put_contents($modulePublicPath . 'config.php', \"<?php\\n\\$config = \".var_export($moduleConfig, true).\";\\n?>\");\n\n     }*/\n\n    public function install()\n    {\n        $this->_install_mode = true;\n\n        mw()->cache_manager->delete('db');\n        mw()->cache_manager->clear();\n        mw()->module_repository->clearCache();\n\n        $this->scan();\n\n        $this->_install_mode = false;\n    }\n\n    public function scan($options = false)\n    {\n        return $this->scan_for_modules($options);\n    }\n\n    public function scan_for_modules($options = false)\n    {\n        $params = $options;\n        if (is_string($params)) {\n            $params = parse_str($params, $params2);\n            $params = $options = $params2;\n        }\n\n\n        $args = func_get_args();\n        $function_cache_id = '';\n        foreach ($args as $k => $v) {\n            $function_cache_id = $function_cache_id . serialize($k) . serialize($v) . serialize($params);\n        }\n        $list_as_element = false;\n        $cache_id = $function_cache_id = __FUNCTION__ . crc32($function_cache_id);\n        if (isset($options['dir_name'])) {\n            $dir_name = $options['dir_name'];\n            //$list_as_element = true;\n            $cache_group = 'elements/global';\n        } else {\n            $dir_name = normalize_path(modules_path());\n            $list_as_element = false;\n            $cache_group = 'modules/global';\n        }\n\n        if (isset($options['is_elements']) and $options['is_elements'] != false) {\n            $list_as_element = true;\n        } else {\n            $list_as_element = false;\n        }\n\n        $skip_save = false;\n        if (isset($options['skip_save']) and $options['skip_save'] != false) {\n            $skip_save = true;\n        }\n        $modules_remove_old = false;\n        if (isset($options['cache_group'])) {\n            $cache_group = $options['cache_group'];\n        }\n\n        if (isset($options['reload_modules']) == true) {\n            $modules_remove_old = true;\n            if (is_cli()) {\n                $this->_install_mode = true;\n            }\n        }\n\n        if ($modules_remove_old or isset($options['cleanup_db']) == true) {\n            if ($this->app->user_manager->is_admin() == true) {\n                $this->app->cache_manager->delete('categories');\n                $this->app->cache_manager->delete('categories_items');\n                $this->app->cache_manager->delete('db');\n                $this->app->cache_manager->delete('modules');\n            }\n        }\n\n        if (isset($options['skip_cache']) == false and isset($options['no_cache']) == false) {\n            $cache_content = $this->app->cache_manager->get($cache_id, $cache_group);\n\n            if (($cache_content) != false) {\n                return $cache_content;\n            }\n        }\n        if (isset($options['glob'])) {\n            $glob_patern = $options['glob'];\n        } else {\n            $glob_patern = '*config.php';\n        }\n\n\n        if (php_can_use_func('ini_set')) {\n            ini_set('memory_limit', '-1');\n        }\n\n\n        $dir = rglob($glob_patern, 0, $dir_name);\n\n        //  var_dump($dir);\n\n        $dir_name_mods = modules_path();\n        $dir_name_mods2 = elements_path();\n        $saved_ids = array();\n        if (!empty($dir)) {\n            $configs = array();\n            foreach ($dir as $key => $value) {\n                $skip_module = false;\n                if (isset($options['skip_admin']) and $options['skip_admin'] == true) {\n                    if (strstr($value, 'admin')) {\n                        $skip_module = true;\n                    }\n                }\n\n                if ($skip_module == false) {\n                    $config = array();\n                    $value = normalize_path($value, false);\n\n                    $moduleDir = $mod_name = str_replace('_config.php', '', $value);\n                    $moduleDir = $mod_name = str_replace('config.php', '', $moduleDir);\n                    $moduleDir = $mod_name = str_replace('index.php', '', $moduleDir);\n\n                    $moduleDir = $mod_name_dir = str_replace($dir_name_mods, '', $moduleDir);\n                    $moduleDir = $mod_name_dir = str_replace($dir_name_mods2, '', $moduleDir);\n\n                    $def_icon = modules_path() . 'default.svg';\n\n                    ob_start();\n\n                    $is_mw_ignore = dirname($value) . DS . '.mwignore';\n                    if (!is_file($is_mw_ignore) and is_file($value)) {\n                        include $value;\n                    }\n\n                    $content = ob_get_contents();\n                    ob_end_clean();\n                    if ($list_as_element == true) {\n                        $moduleDir = str_replace(elements_path(), '', $moduleDir);\n                    } else {\n                        $moduleDir = str_replace(modules_path(), '', $moduleDir);\n                    }\n\n                    $replace_root = MW_ROOTPATH . DS . 'userfiles' . DS . 'modules' . DS;\n\n                    $moduleDir = str_replace($replace_root, '', $moduleDir);\n\n                    $replace_root = dirname(dirname(MW_PATH)) . DS . 'userfiles' . DS . 'modules' . DS;\n                    $moduleDir = str_replace($replace_root, '', $moduleDir);\n\n                    $moduleDir = rtrim($moduleDir, '\\\\');\n                    $moduleDir = rtrim($moduleDir, '/');\n                    $moduleDir = str_replace('\\\\', '/', $moduleDir);\n                    $moduleDir = str_replace(modules_path(), '', $moduleDir);\n\n                    $config['module'] = $moduleDir;\n                    $config['module'] = rtrim($config['module'], '\\\\');\n                    $config['module'] = rtrim($config['module'], '/');\n\n                    $config['module_base'] = str_replace('admin/', '', $moduleDir);\n                    $main_try_icon = false;\n\n                    $config['is_symlink'] = false;\n                    if (is_link(normalize_path($moduleDir, false))) {\n                        $config['is_symlink'] = true;\n                    }\n\n                    if (is_dir($mod_name)) {\n                        $bname = basename($mod_name);\n                        $t1 = modules_path() . $config['module'] . DS . $bname;\n\n                        if (is_file($t1 . '.svg')) {\n                            $try_icon = $t1 . '.svg';\n                        } elseif (is_file($t1 . '.png')) {\n                            $try_icon = $t1 . '.png';\n                        } else {\n                            $try_icon = $t1 . '.jpg';\n                        }\n                        $main_try_icon = modules_path() . $config['module'] . DS . 'icon.png';\n                    } else {\n                        if (is_file($mod_name . '.svg')) {\n                            $try_icon = $mod_name . '.svg';\n                        } elseif (is_file($mod_name . '.png')) {\n                            $try_icon = $mod_name . '.png';\n                        } else {\n                            $try_icon = $mod_name . '.jpg';\n                        }\n                    }\n\n                    $try_icon = normalize_path($try_icon, false);\n\n                    if ($main_try_icon and is_file($main_try_icon)) {\n                        $config['icon'] = $this->app->url_manager->link_to_file($main_try_icon);\n                    } elseif (is_file($try_icon)) {\n//                        d($config);\n//                        d($try_icon);\n                        $config['icon'] = $this->app->url_manager->link_to_file($try_icon);\n                    } else {\n                        $config['icon'] = $this->app->url_manager->link_to_file($def_icon);\n                    }\n\n\n                    if (isset($config['ui'])) {\n                        $config['ui'] = intval($config['ui']);\n                    } else {\n                        $config['ui'] = 0;\n                    }\n\n                    if (isset($config['is_system'])) {\n                        $config['is_system'] = intval($config['is_system']);\n                    } else {\n                        $config['is_system'] = 0;\n                    }\n\n                    if (isset($config['is_integration'])) {\n                        $config['is_integration'] = intval($config['is_integration']);\n                    } else {\n                        $config['is_integration'] = 0;\n                    }\n\n                    if (isset($config['ui_admin'])) {\n                        $config['ui_admin'] = intval($config['ui_admin']);\n                    } else {\n                        $config['ui_admin'] = 0;\n                    }\n\n                    if (isset($config['no_cache']) and $config['no_cache'] == true) {\n                        $config['allow_caching'] = 0;\n                    } else {\n                        $config['allow_caching'] = 1;\n                    }\n\n                    if (isset($config['name']) and $skip_save !== true and $skip_module == false) {\n                        if (trim($config['module']) != '') {\n                            if ($list_as_element == true) {\n\n\n                                $this->app->layouts_manager->save($config);\n                            } else {\n                                $this->log('Installing module: ' . $config['name']);\n                                $config['installed'] = 'auto';\n                                $tablesData = false;\n                                $schemaFileName = modules_path() . $moduleDir . '/schema.json';\n                                if (isset($config['tables']) && is_array($config['tables']) && !empty($config['tables'])) {\n                                    $tablesData = $config['tables'];\n                                } elseif (isset($config['tables']) && is_callable($config['tables'])) {\n                                    call_user_func($config['tables']);\n                                    unset($config['tables']);\n                                } elseif (file_exists($schemaFileName)) {\n                                    $json = file_get_contents($schemaFileName);\n                                    $json = @json_decode($json, true);\n                                    $tablesData = $json;\n                                }\n                                $saved_ids[] = $this->save($config);\n\n                                if ($tablesData) {\n                                    $this->log('Installing module DB: ' . $config['name']);\n                                    (new DbUtils())->build_tables($tablesData);\n                                }\n                            }\n                        }\n                    }\n\n                    $configs[] = $config;\n                }\n            }\n\n\n            if ($skip_save == true) {\n                return $configs;\n            }\n\n            $cfg_ordered = array();\n            $cfg_ordered2 = array();\n            $cfg = $configs;\n            foreach ($cfg as $k => $item) {\n                if (isset($item['position'])) {\n                    $cfg_ordered2[$item['position']][] = $item;\n                    unset($cfg[$k]);\n                }\n            }\n            ksort($cfg_ordered2);\n            foreach ($cfg_ordered2 as $k => $item) {\n                foreach ($item as $ite) {\n                    $cfg_ordered[] = $ite;\n                }\n            }\n            if ($modules_remove_old == true) {\n                $table = 'options';\n                $uninstall_lock = $this->get('ui=any');\n\n                if (is_array($uninstall_lock) and !empty($uninstall_lock)) {\n                    foreach ($uninstall_lock as $value) {\n                        $ism = $this->exists($value['module']);\n                        if ($ism == false) {\n                            $this->delete_module($value['id']);\n                            $mn = $value['module'];\n                            $table_options = $this->tables['options'];\n                            $this->app->database_manager->delete_by_id($table_options, $mn, 'option_group');\n                        }\n                    }\n                }\n            }\n\n            $c2 = array_merge($cfg_ordered, $cfg);\n\n            $this->app->cache_manager->save($c2, $cache_id, $cache_group);\n\n            return $c2;\n        }\n    }\n\n    public function save($data_to_save)\n    {\n        if (mw()->user_manager->is_admin() == false and $this->_install_mode == false) {\n            return false;\n        }\n        if (isset($data_to_save['is_element']) and $data_to_save['is_element'] == true) {\n        }\n\n        $table = $this->tables['modules'];\n        $save = false;\n\n        if (!empty($data_to_save)) {\n            $s = $data_to_save;\n\n            if (!isset($s['parent_id'])) {\n                $s['parent_id'] = 0;\n            }\n\n            if (!isset($s['installed']) or $s['installed'] == 'auto') {\n                $s['installed'] = 1;\n            }\n\n            if (isset($s['settings']) and is_array($s['settings'])) {\n                $s['settings'] = json_encode($s['settings']);\n            }\n\n            $s['allow_html'] = true;\n\n            if (!isset($s['id']) and isset($s['module'])) {\n                $s['module'] = $data_to_save['module'];\n\n                if (!isset($s['module_id'])) {\n                    //$save = $this->get_modules('ui=any&no_cache=1&module=' . $s['module']);\n                    $save = db_get('table=modules&no_cache=1&module=' . $s['module']);\n\n                    if ($save != false and isset($save[0]) and is_array($save[0]) and isset($save[0]['id'])) {\n                        $s['id'] = intval($save[0]['id']);\n                        //   $s['position'] = intval($save[0]['position']);\n                        $s['installed'] = intval($save[0]['installed']);\n\n                        $save = mw()->database_manager->save($table, $s);\n                        // print_r($save);\n                        $mname_clen = str_replace('\\\\', '/', $s['module']);\n                        if ($s['id'] > 0) {\n\n                            //$delid = $s[\"id\"];\n                            DB::table($table)->where('id', '!=', $s['id'])->where('module', $s['module'])->delete();\n                            // $del = \"DELETE FROM {$table} WHERE module='{$mname_clen}' AND id!={$delid} \";\n                            //mw()->database_manager->q($del);\n                        }\n                    } else {\n\n                        $save = mw()->database_manager->save($table, $s);\n                    }\n                }\n            } else {\n                $save = mw()->database_manager->save($table, $s);\n            }\n        }\n        return $save;\n    }\n\n    public function get_modules($params)\n    {\n        return $this->get($params);\n    }\n\n    public function get($params = false)\n    {\n        if (!mw_is_installed()) {\n            return false;\n        }\n\n        $table = $this->tables['modules'];\n        if (is_string($params)) {\n            $params = parse_str($params, $params2);\n            $params = $options = $params2;\n        }\n        $params['table'] = $table;\n        if (!isset($params['group_by'])) {\n            $params['group_by'] = 'module';\n        }\n        if (!isset($params['order_by'])) {\n            $params['order_by'] = 'position asc';\n        }\n        $params['cache_group'] = 'modules/global';\n\n        if (isset($params['id'])) {\n            $params['limit'] = 1;\n        } else {\n            $params['limit'] = 1000;\n        }\n        if (isset($params['module'])) {\n            $params['module'] = str_replace('/admin', '', $params['module']);\n        }\n        if (isset($params['keyword'])) {\n            $params['search_in_fields'] = array('name', 'module', 'description', 'author', 'website', 'version', 'help');\n        }\n\n        if (!isset($params['ui'])) {\n            //  $params['ui'] = 1;\n            //\n        }\n\n        if (isset($params['ui']) and $params['ui'] == 'any') {\n            unset($params['ui']);\n        }\n\n        $data = $this->app->database_manager->get($params);\n\n        if (is_array($data) and !empty($data)) {\n            if (isset($data['settings']) and !is_array($data['settings'])) {\n                $data['settings'] = @json_decode($data['settings'], true);\n            } else {\n                foreach ($data as $k => $v) {\n                    if (isset($v['settings']) and !is_array($v['settings'])) {\n                        $v['settings'] = @json_decode($v['settings'], true);\n                        $data[$k] = $v;\n                    }\n                }\n            }\n        }\n\n        $return = [];\n        if ($data) {\n            $return = array_merge($data, $return);\n        }\n\n        if ($this->modules_register) {\n            $return = array_merge($return, $this->modules_register);\n        }\n\n        return $return;\n    }\n\n    public function exists($module_name)\n    {\n        if (!is_string($module_name)) {\n            return false;\n        }\n\n        if (!mw_is_installed()) {\n            return false;\n        }\n        if (trim($module_name) == '') {\n            return false;\n        }\n\n        if (isset($this->app->parser->module_registry[$module_name]) and $this->app->parser->module_registry[$module_name]) {\n            return true;\n        } else if (isset($this->app->parser->module_registry[$module_name . '/index']) and $this->app->parser->module_registry[$module_name . '/index']) {\n            return true;\n\n        }\n\n\n        global $mw_loaded_mod_memory;\n\n        if (!isset($mw_loaded_mod_memory[$module_name])) {\n            $ch = $this->locate($module_name, $custom_view = false);\n            if ($ch != false) {\n                $mw_loaded_mod_memory[$module_name] = true;\n            } else {\n                $mw_loaded_mod_memory[$module_name] = false;\n            }\n        }\n\n        return $mw_loaded_mod_memory[$module_name];\n    }\n\n    public function locate($module_name, $custom_view = false, $no_fallback_to_view = false)\n    {\n\n        $template_dir = templates_path() . 'default/';\n\n        if (defined('ACTIVE_TEMPLATE_DIR')) {\n            $template_dir = ACTIVE_TEMPLATE_DIR;\n            //  $this->app->content_manager->define_constants();\n        }\n\n        //  dd(debug_backtrace(1));\n\n        $module_name = trim($module_name);\n        // prevent hack of the directory\n        $module_name = str_replace('\\\\', '/', $module_name);\n        $module_name = str_replace('..', '', $module_name);\n\n        $module_name = reduce_double_slashes($module_name);\n        $module_in_template_dir = $template_dir . 'modules/' . $module_name . '';\n        $module_in_template_dir = normalize_path($module_in_template_dir, 1);\n        $module_in_template_file = $template_dir . 'modules/' . $module_name . '.php';\n        $module_in_template_file = normalize_path($module_in_template_file, false);\n        $module_in_default_file12 = modules_path() . $module_name . '.php';\n\n        $try_file1 = false;\n        $mod_d = $module_in_template_dir;\n        $mod_d1 = normalize_path($mod_d, 1);\n        $try_file1x = $mod_d1 . 'index.php';\n\n        if (is_file($try_file1x)) {\n            $try_file1 = $try_file1x;\n        } elseif (is_file($module_in_template_file)) {\n            $try_file1 = $module_in_template_file;\n        } elseif (is_file($module_in_default_file12) and $custom_view == false) {\n            $try_file1 = $module_in_default_file12;\n        } else {\n            $module_in_default_dir = modules_path() . $module_name . '';\n            $module_in_default_dir = normalize_path($module_in_default_dir, 1);\n            $module_in_default_file = modules_path() . $module_name . '.php';\n            $module_in_default_file_custom_view = modules_path() . $module_name . '_' . $custom_view . '.php';\n            $element_in_default_file = elements_path() . $module_name . '.php';\n            $element_in_default_file = normalize_path($element_in_default_file, false);\n\n            $module_in_default_file = normalize_path($module_in_default_file, false);\n\n            if (is_file($module_in_default_file)) {\n                if ($custom_view == true and is_file($module_in_default_file_custom_view)) {\n                    $try_file1 = $module_in_default_file_custom_view;\n                    if ($no_fallback_to_view == true) {\n                        return $try_file1;\n                    }\n                }\n            } else {\n                if (is_dir($module_in_default_dir)) {\n                    $mod_d1 = normalize_path($module_in_default_dir, 1);\n\n                    if ($custom_view == true) {\n                        $try_file1 = $mod_d1 . trim($custom_view) . '.php';\n                        if ($no_fallback_to_view == true) {\n                            return $try_file1;\n                        }\n                    } else {\n                        if ($no_fallback_to_view == true) {\n                            return false;\n                        }\n                        $try_file1 = $mod_d1 . 'index.php';\n                    }\n                } elseif (is_file($element_in_default_file)) {\n                    $is_element = true;\n                    $try_file1 = $element_in_default_file;\n                }\n            }\n        }\n\n        $try_file1 = normalize_path($try_file1, false);\n\n        return $try_file1;\n    }\n\n    public function delete_module($id)\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            return false;\n        }\n        $id = intval($id);\n\n        $table = $this->tables['modules'];\n\n        $db_categories = get_table_prefix() . 'categories';\n        $db_categories_items = get_table_prefix() . 'categories_items';\n\n        $this->app->database_manager->delete_by_id($table, $id);\n\n        $q = \"DELETE FROM $db_categories_items WHERE rel_type='modules' AND rel_id={$id}\";\n        $this->app->database_manager->q($q);\n        $this->app->cache_manager->delete('categories' . DIRECTORY_SEPARATOR . '');\n\n        $this->app->cache_manager->delete('modules' . DIRECTORY_SEPARATOR . '');\n    }\n\n    public function info($module_name)\n    {\n        $module_name = preg_replace('/admin$/', '', $module_name);\n        $module_name = rtrim($module_name, '/');\n\n        $data = app()->module_repository->getModule($module_name);\n\n        return $data;\n    }\n\n    public function ui($name, $arr = false)\n    {\n        return $this->app->ui->module($name, $arr);\n    }\n\n    public function load($module_name, $attrs = array())\n    {\n        return $this->app->parser->load($module_name, $attrs);\n\n    }\n\n    public function format_attr($attr_value)\n    {\n        $attr_value = str_replace('\"', '&quot;', $attr_value);\n        $attr_value = str_replace(\"'\", '&#39;', $attr_value);\n        $attr_value = str_replace('<', '&lt;', $attr_value);\n        $attr_value = str_replace('>', '&gt;', $attr_value);\n        $attr_value = str_replace('&', '&amp;', $attr_value);\n        $attr_value = str_replace(']', '&#93;', $attr_value);\n        $attr_value = str_replace('[', '&#91;', $attr_value);\n        $attr_value = str_replace('{', '&#123;', $attr_value);\n        $attr_value = str_replace('}',  '&#125;', $attr_value);\n        $attr_value = str_replace('`',   '&#96;', $attr_value);\n        $attr_value = str_replace(';',    '&#59;', $attr_value);\n        return $attr_value;\n    }\n\n\n    public function css_class($module_name)\n    {\n        global $mw_defined_module_classes;\n\n        if (isset($mw_defined_module_classes[$module_name]) != false) {\n            return $mw_defined_module_classes[$module_name];\n        } else {\n            $module_class = str_replace('/', '-', $module_name);\n            $module_class = str_replace('\\\\', '-', $module_class);\n            $module_class = str_replace(' ', '-', $module_class);\n            $module_class = str_replace('%20', '-', $module_class);\n            $module_class = str_replace('_', '-', $module_class);\n            $module_class = 'module-' . $module_class;\n\n            $mw_defined_module_classes[$module_name] = $module_class;\n\n            return $module_class;\n        }\n    }\n\n    public function license($module_name = false)\n    {\n     //   $module_name = str_replace('\\\\', '/', $module_name);\n        $licenses = $this->activeLicenses;\n        $lic = [];\n        if ($licenses) {\n            foreach ($licenses as $license) {\n               /* if (isset($license[\"rel_type\"]) and $license[\"rel_type\"] == $module_name) {\n                    $lic = $license;\n                }*/\n                $lic[] = $license;\n            }\n        }\n\n        if (!empty($lic)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * module_templates.\n     *\n     * Gets all templates for a module\n     *\n     * @category       modules api\n     */\n    public function templates($module_name, $template_name = false, $get_settings_file = false)\n    {\n        $module_name = str_replace('admin', '', $module_name);\n        $module_name_l = $this->locate($module_name);\n        $replace_paths = array();\n        if ($module_name_l == false) {\n            $module_name_l = modules_path() . DS . $module_name . DS;\n            $module_name_l = normalize_path($module_name_l, 1);\n            $replace_paths[] = $module_name_l;\n        } else {\n            $module_name_l = dirname($module_name_l) . DS . 'templates' . DS;\n            $module_name_l = normalize_path($module_name_l, 1);\n            $replace_paths[] = $module_name_l;\n        }\n\n        if (defined('ACTIVE_TEMPLATE_DIR')) {\n            $module_name_l_theme = ACTIVE_TEMPLATE_DIR . 'modules' . DS . $module_name . DS . 'templates' . DS;\n            $module_name_l_theme = normalize_path($module_name_l_theme, 1);\n            $replace_paths[] = $module_name_l_theme;\n        }\n        $replace_paths[] = normalize_path('modules' . '/' . $module_name . '/' . 'templates' . '/', 1);\n\n        $template_config = mw()->template->get_config();\n\n        if (!is_dir($module_name_l) /*and !is_dir($module_name_l_theme)*/) {\n            return false;\n        } else {\n            if ($template_name == false) {\n                $options = array();\n                $options['for_modules'] = 1;\n                $options['no_cache'] = 1;\n                $options['path'] = $module_name_l;\n                $module_name_l = $this->app->layouts_manager->scan($options);\n\n                //  $module_name_l  = array();\n\n                if (is_dir($module_name_l_theme)) {\n                    $options['path'] = $module_name_l_theme;\n                    $module_skins_from_theme = $this->app->layouts_manager->scan($options);\n\n                    if (is_array($module_skins_from_theme)) {\n                        if (!is_array($module_name_l)) {\n                            $module_name_l = array();\n                        }\n                        $file_names_found = array();\n                        if (is_array($module_skins_from_theme)) {\n\n\n                            if (isset($template_config['standalone_module_skins']) and $template_config['standalone_module_skins']) {\n                                $comb = $module_skins_from_theme;\n\n                            } else {\n                                $comb = array_merge($module_skins_from_theme, $module_name_l);\n                            }\n\n                            // $comb = array_merge($module_skins_from_theme, $module_name_l);\n                            if (is_array($comb) and !empty($comb)) {\n                                foreach ($comb as $k1 => $itm) {\n//                                    if (isset($itm['layout_file']) and $itm['layout_file']) {\n//\n//                                            foreach ($replace_paths as $replace_path) {\n//                                                $replace_path2  = str_replace(DS, '/', $replace_path );\n//\n//                                                $itm['layout_file']  = str_replace(DS, '/', $itm['layout_file'] );\n//\n//                                                $itm['layout_file'] = str_ireplace($replace_path, '', $itm['layout_file']);\n//                                                $itm['layout_file'] = str_ireplace($replace_path2, '', $itm['layout_file']);\n//\n//                                                $itm['layout_file'] = str_ireplace(normalize_path($replace_path), '', $itm['layout_file']);\n//                                            }\n//                                      //\n//\n//                                        $itm['layout_file'] = normalize_path($itm['layout_file'],false);\n//\n//                                    }\n                                    if (!in_array($itm['layout_file'], $file_names_found)) {\n                                        if (isset($itm['visible'])) {\n                                            if ($itm['visible'] == 'false'\n                                                or $itm['visible'] == 'no'\n                                                or $itm['visible'] == 'n'\n                                            ) {\n                                                // skip\n                                            } else {\n                                                $file_names_found[] = $itm['layout_file'];\n                                            }\n                                        } else {\n                                            $file_names_found[] = $itm['layout_file'];\n                                        }\n                                    } else {\n                                        unset($comb[$k1]);\n                                    }\n                                }\n                            }\n                            $module_name_l = ($comb);\n                        }\n                    }\n                }\n\n                return $module_name_l;\n            } else {\n                $template_name = str_replace('..', '', $template_name);\n                $template_name_orig = $template_name;\n\n                if ($get_settings_file == true) {\n                    $is_dot_php = get_file_extension($template_name);\n                    if ($is_dot_php != false and $is_dot_php == 'php') {\n                        $template_name = str_ireplace('.php', '', $template_name);\n                    }\n                    $template_name = $template_name . '_settings';\n                }\n\n                $is_dot_php = get_file_extension($template_name);\n                if ($is_dot_php != false and $is_dot_php != 'php') {\n                    $template_name = $template_name . '.php';\n                }\n\n\n                $tf_mw_default = $module_name_l . 'default.php';\n                $tf = normalize_path($module_name_l . $template_name, false);\n                $tf_theme = $module_name_l_theme . $template_name;\n                $tf_from_other_theme = templates_path() . $template_name;\n                $tf_from_other_theme = normalize_path($tf_from_other_theme, false);\n\n                $tf_other_module = modules_path() . $template_name;\n                $tf_other_module = normalize_path($tf_other_module, false);\n\n\n                if ($template_name == 'mw_default.php' and is_file($tf)) {\n                    return $tf;\n                } else if ($template_name == 'mw_default.php' and is_file($tf_mw_default)) {\n                    return normalize_path($tf_mw_default, false);\n                } else if (strstr($tf_from_other_theme, 'modules') and is_file($tf_from_other_theme)) {\n                    return normalize_path($tf_from_other_theme, false);\n                } elseif (is_file($tf_theme)) {\n                    return normalize_path($tf_theme, false);\n                } elseif (is_file($tf)) {\n                    return normalize_path($tf, false);\n                } elseif (strtolower($template_name_orig) != 'default' and is_file($tf_other_module)) {\n                    return normalize_path($tf_other_module, false);\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n\n    public function url($module_name = false)\n    {\n        if ($module_name == false) {\n\n            $mod_data = $this->app->parser->processor->current_module;\n            if (isset($mod_data['url_to_module'])) {\n                return $mod_data['url_to_module'];\n            }\n\n            if (isset($mod_data['url_to_module'])) {\n                return $mod_data['url_to_module'];\n            } else {\n                $mod_data = $this->current_module;\n                if (isset($mod_data['url_to_module'])) {\n                    return $mod_data['url_to_module'];\n                }\n            }\n        }\n\n        if (!is_string($module_name)) {\n            return false;\n        }\n\n        $secure_connection = false;\n        if (isset($_SERVER['HTTPS'])) {\n            if ($_SERVER['HTTPS'] == 'on') {\n                $secure_connection = true;\n            }\n        }\n\n        $args = func_get_args();\n        $function_cache_id = '';\n        foreach ($args as $k => $v) {\n            $function_cache_id = $function_cache_id . serialize($k) . serialize($v);\n        }\n\n        $cache_id = $function_cache_id = __FUNCTION__ . crc32($function_cache_id);\n\n        $cache_group = 'modules/global';\n\n        $cache_content = $this->app->cache_manager->get($cache_id, $cache_group);\n\n        if (($cache_content) != false) {\n            return $cache_content;\n        }\n\n        static $checked = array();\n\n        if (!isset($checked[$module_name])) {\n            $ch = $this->locate($module_name, $custom_view = false);\n\n            if ($ch != false) {\n                $ch = dirname($ch);\n                $ch = $this->app->url_manager->link_to_file($ch);\n                $ch = $ch . '/';\n                $checked[$module_name] = $ch;\n            } else {\n                $checked[$module_name] = false;\n            }\n        }\n        $this->app->cache_manager->save($checked[$module_name], $function_cache_id, $cache_group);\n        if ($secure_connection == true) {\n            $checked[$module_name] = str_ireplace('http://', 'https://', $checked[$module_name]);\n        }\n\n        return $checked[$module_name];\n    }\n\n    public function path($module_name)\n    {\n        return $this->dir($module_name);\n    }\n\n    public function dir($module_name)\n    {\n        if (!is_string($module_name)) {\n            return false;\n        }\n\n        $args = func_get_args();\n        $function_cache_id = '';\n        foreach ($args as $k => $v) {\n            $function_cache_id = $function_cache_id . serialize($k) . serialize($v);\n        }\n\n        $cache_id = $function_cache_id = __FUNCTION__ . crc32($function_cache_id);\n        $cache_group = 'modules/global';\n        $cache_content = $this->app->cache_manager->get($cache_id, $cache_group);\n        if (($cache_content) != false) {\n            return $cache_content;\n        }\n        $checked = array();\n        if (!isset($checked[$module_name])) {\n            $ch = $this->locate($module_name, $custom_view = false);\n            if ($ch != false) {\n                $ch = dirname($ch);\n                $ch = normalize_path($ch, 1);\n                $checked[$module_name] = $ch;\n            } else {\n                $checked[$module_name] = false;\n            }\n        }\n        $this->app->cache_manager->save($checked[$module_name], $function_cache_id, $cache_group);\n\n        return $checked[$module_name];\n    }\n\n\n    public function is_installed($module_name)\n    {\n\n        if (!mw_is_installed()) {\n            return true;\n        }\n        $module_name = trim($module_name);\n        $module_namei = $module_name;\n        if (strstr($module_name, 'admin')) {\n            $module_namei = str_ireplace('\\\\admin', '', $module_namei);\n            $module_namei = str_ireplace('/admin', '', $module_namei);\n        }\n        //$uninstall_lock = $this->get('one=1&ui=any&module=' . $module_namei);\n        $uninstall_lock = app()->module_repository->getModule($module_namei);\n\n\n        if (!$uninstall_lock or empty($uninstall_lock) or (isset($uninstall_lock['installed']) and $uninstall_lock['installed'] != '' and intval($uninstall_lock['installed']) != 1)) {\n            $root_mod = $this->locate_root_module($module_name);\n            if ($root_mod) {\n                //$uninstall_lock = $this->get('one=1&ui=any&module=' . $root_mod);\n                $uninstall_lock = app()->module_repository->getModule($root_mod);\n\n                if (empty($uninstall_lock) or (isset($uninstall_lock['installed']) and $uninstall_lock['installed'] != '' and intval($uninstall_lock['installed']) != 1)) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public function reorder_modules($data)\n    {\n        $adm = $this->app->user_manager->is_admin();\n        if ($adm == false) {\n            mw_error('Error: not logged in as admin.' . __FILE__ . __LINE__);\n        }\n        $table = $this->tables['modules'];\n        foreach ($data as $value) {\n            if (is_array($value)) {\n                $indx = array();\n                $i = 0;\n                foreach ($value as $value2) {\n                    $indx[$i] = $value2;\n                    ++$i;\n                }\n                $this->app->database_manager->update_position_field($table, $indx);\n                app()->module_repository->clearCache();\n\n                return $indx;\n            }\n        }\n        // $this->db_init();\n    }\n\n    public function delete_all()\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            return false;\n        } else {\n            $table = $this->tables['modules'];\n            $db_categories = $this->table_prefix . 'categories';\n            $db_categories_items = $this->table_prefix . 'categories_items';\n\n            $q = \"DELETE FROM $table \";\n            $this->app->database_manager->q($q);\n\n            $q = \"DELETE FROM $db_categories WHERE rel_type='modules' AND data_type='category' \";\n            $this->app->database_manager->q($q);\n\n            $q = \"DELETE FROM $db_categories_items WHERE rel_type='modules' AND data_type='category_item' \";\n            $this->app->database_manager->q($q);\n            $this->app->cache_manager->delete('categories' . DIRECTORY_SEPARATOR . '');\n            $this->app->cache_manager->delete('categories_items' . DIRECTORY_SEPARATOR . '');\n\n            $this->app->cache_manager->delete('modules' . DIRECTORY_SEPARATOR . '');\n        }\n        app()->module_repository->clearCache();\n    }\n\n    public function icon_with_title($module_name, $link = true)\n    {\n        $params = array();\n        $to_print = '';\n        $params['module'] = $module_name;\n        $params['ui'] = 'any';\n        $params['limit'] = 1;\n\n        //  $data = $this->get($params);\n\n        $data = app()->module_repository->getModule($module_name);\n\n\n        $info = false;\n        if (isset($data[0])) {\n            $info = $data[0];\n        }\n        if ($link == true and $info != false) {\n            $href = admin_url() . 'view:modules/load_module:' . module_name_encode($info['module']);\n        } else {\n            $href = '#';\n        }\n\n        if (isset($data[0])) {\n            $info = $data[0];\n            $tn_ico = thumbnail($info['icon'], 32, 32);\n            $to_print = '<a style=\"background-image:url(' . $tn_ico . ')\" class=\"module-icon-title\" href=\"' . $href . '\">' . $info['name'] . '</a>';\n        }\n        echo $to_print;\n    }\n\n    public function uninstall($params)\n    {\n        if (isset($params['for_module'])) {\n            $this_module = $this->get('ui=any&one=1&module=' . $params['for_module']);\n            if (isset($this_module['id'])) {\n                $params['id'] = $this_module['id'];\n            }\n        }\n\n\n        if (isset($params['id'])) {\n            $id = intval($params['id']);\n            $this_module = $this->get('ui=any&one=1&id=' . $id);\n            if ($this_module != false and is_array($this_module) and isset($this_module['id'])) {\n                $module_name = $this_module['module'];\n\n                if (trim($module_name) == '') {\n                    return false;\n                }\n                $loc_of_config = $this->locate($module_name, 'config');\n                $res = array();\n                $loc_of_functions = $this->locate($module_name, 'functions');\n                $cfg = false;\n                if (is_file($loc_of_config)) {\n                    include $loc_of_config;\n                    if (isset($config)) {\n                        $cfg = $config;\n                    }\n                    if (is_array($cfg) and !empty($cfg)) {\n                        if (isset($cfg['on_uninstall'])) {\n                            $func = $cfg['on_uninstall'];\n                            if (!function_exists($func)) {\n                                if (is_file($loc_of_functions)) {\n                                    include_once $loc_of_functions;\n                                }\n                            }\n                            if (function_exists($func)) {\n                                $res = $func();\n                                // return $res;\n                            }\n                        }\n                    }\n                }\n                $to_save = array();\n                $this->_install_mode = true;\n                $to_save['id'] = $id;\n                $to_save['installed'] = '0';\n                $this->save($to_save);\n            }\n        }\n        $this->app->cache_manager->delete('modules' . DIRECTORY_SEPARATOR . '');\n        $this->app->cache_manager->clear();\n        app()->module_repository->clearCache();\n\n//\n//        $this_module = $this->get('ui=any&one=1&id=' . $id);\n//dd($this_module);\n    }\n\n    public function set_installed($params)\n    {\n\n        if (isset($params['for_module'])) {\n            $this_module = $this->get('ui=any&one=1&module=' . $params['for_module']);\n            if (isset($this_module['id'])) {\n                $params['id'] = $this_module['id'];\n            }\n        }\n\n        if (isset($params['id'])) {\n            $id = intval($params['id']);\n            $this_module = $this->get('ui=any&one=1&id=' . $id);\n            if ($this_module != false and is_array($this_module) and isset($this_module['id'])) {\n                $module_name = $this_module['module'];\n\n                if (trim($module_name) == '') {\n                    return false;\n                }\n                $loc_of_config = $this->locate($module_name, 'config');\n                $res = array();\n                $loc_of_functions = $this->locate($module_name, 'functions');\n                $cfg = false;\n                if (is_file($loc_of_config)) {\n                    include $loc_of_config;\n                    if (isset($config)) {\n                        $cfg = $config;\n                    }\n                    if (is_array($cfg) and !empty($cfg)) {\n                        if (isset($cfg['on_install'])) {\n                            $func = $cfg['on_install'];\n                            if (!function_exists($func)) {\n                                if (is_file($loc_of_functions)) {\n                                    include_once $loc_of_functions;\n                                }\n                            }\n                            if (function_exists($func)) {\n                                $res = $func();\n                            }\n                        }\n                    }\n                }\n                $to_save = array();\n                $to_save['id'] = $id;\n                $to_save['installed'] = 1;\n                $this->_install_mode = true;\n                $this->save($to_save);\n            }\n        }\n        $this->app->cache_manager->delete('modules' . DIRECTORY_SEPARATOR . '');\n        app()->module_repository->clearCache();\n\n    }\n\n    public function update_db()\n    {\n        if (isset($options['glob'])) {\n            $glob_patern = $options['glob'];\n        } else {\n            $glob_patern = 'config.php';\n        }\n\n        //$this->app->cache_manager->clear();\n        //clearstatcache();\n        $dir_name_mods = modules_path();\n        $modules_remove_old = false;\n        $dir = rglob($glob_patern, 0, $dir_name_mods);\n\n        if (!empty($dir)) {\n            $configs = array();\n            foreach ($dir as $value) {\n                $loc_of_config = $value;\n                if ($loc_of_config != false and is_file($loc_of_config)) {\n                    include $loc_of_config;\n                    if (isset($config)) {\n                        $cfg = $config;\n                        if (isset($config['tables']) and is_array($config['tables'])) {\n                            $tabl = $config['tables'];\n                            foreach ($tabl as $key1 => $fields_to_add) {\n                                $table = $this->app->database_manager->real_table_name($key1);\n                                $this->app->database_manager->build_table($table, $fields_to_add);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        app()->module_repository->clearCache();\n\n    }\n\n    public function get_saved_modules_as_template($params)\n    {\n        $params = parse_params($params);\n\n        if ($this->app->user_manager->is_admin() == false) {\n            return false;\n        }\n\n        $table = 'module_templates';\n\n        $params['table'] = $table;\n\n        $data = $this->app->database_manager->get($params);\n\n        return $data;\n    }\n\n    public function delete_module_as_template($data)\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            return false;\n        }\n\n        $table = 'module_templates';\n        $save = false;\n\n        $adm = $this->app->user_manager->is_admin();\n        if ($adm == false) {\n            mw_error('Error: not logged in as admin.' . __FILE__ . __LINE__);\n        }\n\n        if (isset($data['id'])) {\n            $c_id = intval($data['id']);\n            $this->app->database_manager->delete_by_id($table, $c_id);\n        }\n\n        if (isset($data['ids']) and is_array($data['ids'])) {\n            foreach ($data['ids'] as $value) {\n                $c_id = intval($value);\n                $this->app->database_manager->delete_by_id($table, $c_id);\n            }\n        }\n        app()->module_repository->clearCache();\n\n    }\n\n    public function save_module_as_template($data_to_save)\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            return false;\n        }\n\n        $table = 'module_templates';\n        $save = false;\n\n        if (!empty($data_to_save)) {\n            $s = $data_to_save;\n\n            $save = $this->app->database_manager->save($table, $s);\n        }\n        app()->module_repository->clearCache();\n\n        return $save;\n    }\n\n    public function scan_for_elements($options = array())\n    {\n        if (is_string($options)) {\n            $params = parse_str($options, $params2);\n            $options = $params2;\n        }\n\n        $options['is_elements'] = 1;\n        $options['dir_name'] = normalize_path(elements_path());\n\n        if (isset($options['cleanup_db'])) {\n            $this->app->layouts_manager->delete_all();\n        }\n\n        return $this->scan_for_modules($options);\n    }\n\n    public function get_modules_from_current_site_template()\n    {\n        if (!defined('ACTIVE_TEMPLATE_DIR')) {\n            $this->app->content_manager->define_constants();\n        }\n\n        $dir_name = ACTIVE_TEMPLATE_DIR . 'modules' . DS;\n\n\n        if (is_dir($dir_name)) {\n            $configs = array();\n\n            $glob_patern = '*config.php';\n\n            $dir = rglob($glob_patern, 0, $dir_name);\n            $replace_root = normalize_path($dir_name);\n            $def_icon = modules_path() . 'default.svg';\n            if (!empty($dir)) {\n                foreach ($dir as $module) {\n                    $module_dir = dirname($module);\n                    $module_dir = normalize_path($module_dir);\n                    $config = array();\n                    include $module;\n                    $module_name = str_replace($replace_root, '', $module_dir);\n\n                    $module_name = rtrim($module_name, '\\\\');\n                    $module_name = rtrim($module_name, '/');\n                    $config['module'] = $module_name;\n\n                    $config['module'] = rtrim($config['module'], '\\\\');\n                    $config['module'] = rtrim($config['module'], '/');\n\n                    $try_icon = $module_dir . $module_name . '.png';\n                    $try_icon_svg = $module_dir . $module_name . '.svg';\n                    if (is_file($try_icon_svg)) {\n                        $config['icon'] = $this->app->url_manager->link_to_file($try_icon_svg);\n                    } elseif (is_file($try_icon)) {\n                        $config['icon'] = $this->app->url_manager->link_to_file($try_icon);\n                    } elseif (is_file($module_dir . $module_name . '.jpg')) {\n                        $config['icon'] = $this->app->url_manager->link_to_file($module_dir . $module_name . '.jpg');\n                    } else {\n                        $config['icon'] = $this->app->url_manager->link_to_file($def_icon);\n                    }\n\n                    if (isset($config['ui'])) {\n                        $config['ui'] = intval($config['ui']);\n                    } else {\n                        $config['ui'] = 0;\n                    }\n\n                    if ($config['ui'] == 0) {\n                        continue;\n                    }\n\n\n                    $configs[] = $config;\n                }\n            }\n\n            return $configs;\n        }\n    }\n\n    public $logger = null;\n\n\n    public function log($text)\n    {\n        if (is_object($this->logger) and method_exists($this->logger, 'log')) {\n            $this->logger->log($text);\n        }\n    }\n\n\n    public $_module_locations_root_cache = array();\n\n    public function locate_root_module($module_name)\n    {\n        if (isset($this->_module_locations_root_cache[$module_name])) {\n            return $this->_module_locations_root_cache[$module_name];\n        }\n\n\n        $module_name_parts = explode('/', $module_name);\n\n\n        if ($module_name_parts and is_array($module_name_parts)) {\n            $folders_to_check = array();\n            $module_name_parts_count = count($module_name_parts) - 1;\n\n            if ($module_name_parts_count) {\n                for ($id = $module_name_parts_count; $id > 0; $id--) {\n                    unset($module_name_parts[$id]);\n                    if ($module_name_parts) {\n                        $folders_to_check[] = implode('/', $module_name_parts);\n                    }\n                }\n            }\n\n            if ($folders_to_check) {\n\n                foreach ($folders_to_check as $module_name_check) {\n                    $modules_dir_default = modules_path() . $module_name_check;\n                    $modules_dir_default = normalize_path($modules_dir_default, true);\n                    if (is_dir($modules_dir_default) and is_file($modules_dir_default . 'config.php')) {\n                        $this->_module_locations_root_cache[$module_name] = $module_name_check;\n                        return $module_name_check;\n//                        $is_installed = $this->app->module_manager->is_installed($module_name_check);\n//                        if (!$is_installed) {\n//                            return '';\n//                        }\n                    }\n\n                }\n\n            }\n\n        }\n\n    }\n\n\n    public function boot_module($module)\n    {\n        if(!mw_is_installed()){\n            return;\n        }\n        if (isset($module['settings']) and $module['settings'] and isset($module['settings']['autoload_namespace']) and is_array($module['settings']['autoload_namespace']) and !empty($module['settings']['autoload_namespace'])) {\n            foreach ($module['settings']['autoload_namespace'] as $namespace_item) {\n\n                if (isset($namespace_item['path']) and isset($namespace_item['namespace'])) {\n                    $path = normalize_path($namespace_item['path'], 1);\n                    $namespace = $namespace_item['namespace'];\n                    if ($path and is_dir($path)) {\n                        autoload_add_namespace($path, $namespace);\n                    }\n                }\n            }\n\n        }\n\n        if (isset($module['settings']) and $module['settings'] and isset($module['settings']['service_provider']) and is_array($module['settings']['service_provider']) and !empty($module['settings']['service_provider'])) {\n            foreach ($module['settings']['service_provider'] as $service_provider) {\n                if (class_exists($service_provider)) {\n                    app()->register($service_provider);\n                }\n            }\n        }\n\n        $loadProviders = [];\n        if (is_array($module['settings']['service_provider'])) {\n            foreach ($module['settings']['service_provider'] as $serviceProvider) {\n                $loadProviders[] = $serviceProvider;\n            }\n        } else {\n            $loadProviders[] = $module['settings']['service_provider'];\n        }\n        foreach ($loadProviders as $loadProvider) {\n            if (class_exists($loadProvider)) {\n                app()->register($loadProvider);\n            }\n        }\n    }\n\n\n}\n"], "filenames": ["src/MicroweberPackages/App/Http/Controllers/ApiController.php", "src/MicroweberPackages/Module/ModuleManager.php"], "buggy_code_start_loc": [70, 798], "buggy_code_end_loc": [1197, 798], "fixing_code_start_loc": [70, 799], "fixing_code_end_loc": [1198, 816], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository microweber/microweber prior to 1.2.21.", "other": {"cve": {"id": "CVE-2022-2470", "sourceIdentifier": "security@huntr.dev", "published": "2022-07-22T15:15:08.520", "lastModified": "2022-07-26T14:33:56.367", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository microweber/microweber prior to 1.2.21."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Reflejado en el repositorio de GitHub microweber/microweber versiones anteriores a 1.2.21"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.21", "matchCriteriaId": "C4FFD212-2330-4F47-B901-C0C11A02E665"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/d28655183800b833abb20ccd55e1628f16ff65e4", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/3f1f679c-c243-431c-8ed0-e61543b9921b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/d28655183800b833abb20ccd55e1628f16ff65e4"}}