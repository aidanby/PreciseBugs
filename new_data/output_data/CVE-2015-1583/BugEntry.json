{"buggy_code": ["<?php\n/****************************************************************************/\n/* ATutor\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n/****************************************************************************/\n/* Copyright (c) 2002-2010                                                  */\n/* Inclusive Design Institute                                               */\n/* http://atutor.ca\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n/*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n/* This program is free software. You can redistribute it and/or\t\t\t*/\n/* modify it under the terms of the GNU General Public License\t\t\t\t*/\n/* as published by the Free Software Foundation.\t\t\t\t\t\t\t*/\n/****************************************************************************/\n// $Id$\n\ndefine('AT_INCLUDE_PATH', '../../../../include/');\nrequire(AT_INCLUDE_PATH.'vitals.inc.php');\nadmin_authenticate(AT_ADMIN_PRIV_ADMIN);\n\nif (isset($_POST['cancel'])) {\n\t$msg->addFeedback('CANCELLED');\n\theader('Location: index.php');\n\texit;\n} else if (isset($_POST['submit'])) {\n\t$missing_fields = array();\n\n\t/* login validation */\n\tif ($_POST['login'] == '') {\n\t\t$missing_fields[] = _AT('login_name');\n\t} else {\n\t\t/* check for special characters */\n\t\tif (!(preg_match(\"/^[a-zA-Z0-9_]([a-zA-Z0-9_])*$/i\", $_POST['login']))) {\n\t\t\t$msg->addError('LOGIN_CHARS');\n\t\t} else {\n\t\t\t$sql = \"SELECT * FROM %smembers WHERE login='%s'\";\n\t\t\t$rows_members = queryDB($sql,array(TABLE_PREFIX, $_POST['login']));\n\t\t\tif(count($rows_members) != 0){\n\t\t\t\t$msg->addError('LOGIN_EXISTS');\n\t\t\t} \n\t\t\t\t\t\t\n\t\t\t$sql = \"SELECT * FROM %sadmins WHERE login='%s'\";\n\t\t\t$rows_admins = queryDB($sql, array(TABLE_PREFIX, $_POST['login']));\n\t\t\tif(count($rows_admins) != 0){\n\t\t\t\t$msg->addError('LOGIN_EXISTS');\n\t\t\t}\n\t\t}\n\t}\n\n\t/* password check: password is verified front end by javascript. here is to handle the errors from javascript */\n\tif ($_POST['password_error'] <> \"\")\n\t{\n\t\t$pwd_errors = explode(\",\", $_POST['password_error']);\n\n\t\tforeach ($pwd_errors as $pwd_error)\n\t\t{\n\t\t\tif ($pwd_error == \"missing_password\")\n\t\t\t\t$missing_fields[] = _AT('password');\n\t\t\telse\n\t\t\t\t$msg->addError($pwd_error);\n\t\t}\n\t}\n\n\t/* email validation */\n\tif ($_POST['email'] == '') {\n\t\t$missing_fields[] = _AT('email');\n\t} else if (!preg_match(\"/^[a-z0-9\\._-]+@+[a-z0-9\\._-]+\\.+[a-z]{2,6}$/i\", $_POST['email'])) {\n\t\t$msg->addError('EMAIL_INVALID');\n\t}\n\n\t$sql = \"SELECT * FROM %smembers WHERE email LIKE '%s'\";\n\t$rows_email = queryDB($sql, array(TABLE_PREFIX, $_POST['email']));\n\tif(count($rows_email) != 0){\n\t\t$valid = 'no';\n\t\t$msg->addError('EMAIL_EXISTS');\n\t}\n\t\n\t$sql = \"SELECT * FROM %sadmins WHERE email LIKE '%s'\";\n\t$rows_email = queryDB($sql, array(TABLE_PREFIX, $_POST['email']));\n\tif(count($rows_email) != 0){\n\t\t$valid = 'no';\n\t\t$msg->addError('EMAIL_EXISTS');\n\t}\n\t$priv = 0;\n\tif (isset($_POST['priv_admin'])) {\n\t\t// overrides all above.\n\t\t$priv = AT_ADMIN_PRIV_ADMIN;\n\t} else if (isset($_POST['privs'])) {\n\t\tforeach ($_POST['privs'] as $value) {\n\t\t\t$priv += intval($value);\n\t\t}\n\t}\n\n\tif ($missing_fields) {\n\t\t$missing_fields = implode(', ', $missing_fields);\n\t\t$msg->addError(array('EMPTY_FIELDS', $missing_fields));\n\t}\n\n\tif (!$msg->containsErrors()) {\n\t\t$_POST['login']     = $addslashes($_POST['login']);\n\t\t$password  = $addslashes($_POST['form_password_hidden']);\n\t\t$_POST['real_name'] = $addslashes($_POST['real_name']);\n\t\t$_POST['email']     = $addslashes($_POST['email']);\n\n\t\t$admin_lang = $_config['default_language']; \n\n\t\t$sql    = \"INSERT INTO %sadmins\n\t\t                 (login,\n\t\t                  password,\n\t\t                  real_name,\n\t\t                  email,\n\t\t                  language,\n\t\t                  privileges,\n\t\t                  last_login)\n\t\t          VALUES ('%s', \n\t\t                  '%s', \n\t\t                  '%s', \n\t\t                  '%s', \n\t\t                  '%s', \n\t\t                  %d, \n\t\t                  0)\";\n\t\t$result = queryDB($sql, array(TABLE_PREFIX, $_POST['login'], $password, $_POST['real_name'], $_POST['email'], $admin_lang, $priv));\n\t\n\t\t$sql    = \"INSERT INTO \".TABLE_PREFIX.\"admins\n\t\t                 (login,\n\t\t                  password,\n\t\t                  real_name,\n\t\t                  email,\n\t\t                  language,\n\t\t                  privileges,\n\t\t                  last_login)\n\t\t          VALUES ('$_POST[login]', \n\t\t                  '********', \n\t\t                  '$_POST[real_name]', \n\t\t                  '$_POST[email]', \n\t\t                  '$admin_lang', \n\t\t                  $priv, \n\t\t                  0)\";               \n\t\twrite_to_log(AT_ADMIN_LOG_INSERT, 'admins', $result, $sql);\n\n\t\t$msg->addFeedback('ADMIN_CREATED');\n\t\theader('Location: index.php');\n\t\texit;\n\t}\n\t$_POST['login']             = $stripslashes($_POST['login']);\n\t$_POST['real_name']         = $stripslashes($_POST['real_name']);\n\t$_POST['email']             = $stripslashes($_POST['email']);\n} \n\n$onload = 'document.form.login.focus();';\nrequire(AT_INCLUDE_PATH.'header.inc.php'); \n?>\n<script language=\"JavaScript\" src=\"sha-1factory.js\" type=\"text/javascript\"></script>\n\n<?php\n\t$module_list = $moduleFactory->getModules(AT_MODULE_STATUS_ENABLED, 0, TRUE);\n\t$keys = array_keys($module_list);\n?>\n\n\n<script language=\"JavaScript\" src=\"sha-1factory.js\" type=\"text/javascript\"></script>\n\n<script type=\"text/javascript\">\nfunction encrypt_password()\n{\n\tdocument.form.password_error.value = \"\";\n\n\terr = verify_password(document.form.password.value, document.form.confirm_password.value);\n\t\n\tif (err.length > 0)\n\t{\n\t\tdocument.form.password_error.value = err;\n\t}\n\telse\n\t{\n\t\tdocument.form.form_password_hidden.value = hex_sha1(document.form.password.value);\n\t\tdocument.form.password.value = \"\";\n\t\tdocument.form.confirm_password.value = \"\";\n\t\tif (document.form.priv_admin.checked == true) \n\t\t{\n\t\t\treturn confirm('<?php echo _AT('confirm_admin_create'); ?>');\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n}\n</script>\n\n<?php \n$savant->assign('keys', $keys);\n$savant->assign('module_list', $module_list);\n$savant->display('admin/users/create.tmpl.php');\nrequire(AT_INCLUDE_PATH.'footer.inc.php'); ?>\n"], "fixing_code": ["<?php\n/****************************************************************************/\n/* ATutor\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n/****************************************************************************/\n/* Copyright (c) 2002-2010                                                  */\n/* Inclusive Design Institute                                               */\n/* http://atutor.ca\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n/*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n/* This program is free software. You can redistribute it and/or\t\t\t*/\n/* modify it under the terms of the GNU General Public License\t\t\t\t*/\n/* as published by the Free Software Foundation.\t\t\t\t\t\t\t*/\n/****************************************************************************/\n// $Id$\n\ndefine('AT_INCLUDE_PATH', '../../../../include/');\nrequire(AT_INCLUDE_PATH.'vitals.inc.php');\nadmin_authenticate(AT_ADMIN_PRIV_ADMIN);\nif($_SERVER['HTTP_REFERER'] != $_SERVER['PHP_SELF']){\n    $referer_script = preg_replace('#'.$_base_href.'#', '', $_SERVER['HTTP_REFERER']);\n    if(!in_array($_pages[$referer_script], $_pages)){\n    echo \"not a valid referer\";\n    exit;\n    }\n}\n\nif (isset($_POST['cancel'])) {\n\t$msg->addFeedback('CANCELLED');\n\theader('Location: index.php');\n\texit;\n} else if (isset($_POST['submit'])) {\n\t$missing_fields = array();\n\n\t/* login validation */\n\tif ($_POST['login'] == '') {\n\t\t$missing_fields[] = _AT('login_name');\n\t} else {\n\t\t/* check for special characters */\n\t\tif (!(preg_match(\"/^[a-zA-Z0-9_]([a-zA-Z0-9_])*$/i\", $_POST['login']))) {\n\t\t\t$msg->addError('LOGIN_CHARS');\n\t\t} else {\n\t\t\t$sql = \"SELECT * FROM %smembers WHERE login='%s'\";\n\t\t\t$rows_members = queryDB($sql,array(TABLE_PREFIX, $_POST['login']));\n\t\t\tif(count($rows_members) != 0){\n\t\t\t\t$msg->addError('LOGIN_EXISTS');\n\t\t\t} \n\t\t\t\t\t\t\n\t\t\t$sql = \"SELECT * FROM %sadmins WHERE login='%s'\";\n\t\t\t$rows_admins = queryDB($sql, array(TABLE_PREFIX, $_POST['login']));\n\t\t\tif(count($rows_admins) != 0){\n\t\t\t\t$msg->addError('LOGIN_EXISTS');\n\t\t\t}\n\t\t}\n\t}\n\n\t/* password check: password is verified front end by javascript. here is to handle the errors from javascript */\n\tif ($_POST['password_error'] <> \"\")\n\t{\n\t\t$pwd_errors = explode(\",\", $_POST['password_error']);\n\n\t\tforeach ($pwd_errors as $pwd_error)\n\t\t{\n\t\t\tif ($pwd_error == \"missing_password\")\n\t\t\t\t$missing_fields[] = _AT('password');\n\t\t\telse\n\t\t\t\t$msg->addError($pwd_error);\n\t\t}\n\t}\n\n\t/* email validation */\n\tif ($_POST['email'] == '') {\n\t\t$missing_fields[] = _AT('email');\n\t} else if (!preg_match(\"/^[a-z0-9\\._-]+@+[a-z0-9\\._-]+\\.+[a-z]{2,6}$/i\", $_POST['email'])) {\n\t\t$msg->addError('EMAIL_INVALID');\n\t}\n\n\t$sql = \"SELECT * FROM %smembers WHERE email LIKE '%s'\";\n\t$rows_email = queryDB($sql, array(TABLE_PREFIX, $_POST['email']));\n\tif(count($rows_email) != 0){\n\t\t$valid = 'no';\n\t\t$msg->addError('EMAIL_EXISTS');\n\t}\n\t\n\t$sql = \"SELECT * FROM %sadmins WHERE email LIKE '%s'\";\n\t$rows_email = queryDB($sql, array(TABLE_PREFIX, $_POST['email']));\n\tif(count($rows_email) != 0){\n\t\t$valid = 'no';\n\t\t$msg->addError('EMAIL_EXISTS');\n\t}\n\t$priv = 0;\n\tif (isset($_POST['priv_admin'])) {\n\t\t// overrides all above.\n\t\t$priv = AT_ADMIN_PRIV_ADMIN;\n\t} else if (isset($_POST['privs'])) {\n\t\tforeach ($_POST['privs'] as $value) {\n\t\t\t$priv += intval($value);\n\t\t}\n\t}\n\n\tif ($missing_fields) {\n\t\t$missing_fields = implode(', ', $missing_fields);\n\t\t$msg->addError(array('EMPTY_FIELDS', $missing_fields));\n\t}\n\n\tif (!$msg->containsErrors()) {\n\t\t$_POST['login']     = $addslashes($_POST['login']);\n\t\t$password  = $addslashes($_POST['form_password_hidden']);\n\t\t$_POST['real_name'] = $addslashes($_POST['real_name']);\n\t\t$_POST['email']     = $addslashes($_POST['email']);\n\n\t\t$admin_lang = $_config['default_language']; \n\n\t\t$sql    = \"INSERT INTO %sadmins\n\t\t                 (login,\n\t\t                  password,\n\t\t                  real_name,\n\t\t                  email,\n\t\t                  language,\n\t\t                  privileges,\n\t\t                  last_login)\n\t\t          VALUES ('%s', \n\t\t                  '%s', \n\t\t                  '%s', \n\t\t                  '%s', \n\t\t                  '%s', \n\t\t                  %d, \n\t\t                  0)\";\n\t\t$result = queryDB($sql, array(TABLE_PREFIX, $_POST['login'], $password, $_POST['real_name'], $_POST['email'], $admin_lang, $priv));\n\t\n\t\t$sql    = \"INSERT INTO \".TABLE_PREFIX.\"admins\n\t\t                 (login,\n\t\t                  password,\n\t\t                  real_name,\n\t\t                  email,\n\t\t                  language,\n\t\t                  privileges,\n\t\t                  last_login)\n\t\t          VALUES ('$_POST[login]', \n\t\t                  '********', \n\t\t                  '$_POST[real_name]', \n\t\t                  '$_POST[email]', \n\t\t                  '$admin_lang', \n\t\t                  $priv, \n\t\t                  0)\";               \n\t\twrite_to_log(AT_ADMIN_LOG_INSERT, 'admins', $result, $sql);\n\n\t\t$msg->addFeedback('ADMIN_CREATED');\n\t\theader('Location: index.php');\n\t\texit;\n\t}\n\t$_POST['login']             = $stripslashes($_POST['login']);\n\t$_POST['real_name']         = $stripslashes($_POST['real_name']);\n\t$_POST['email']             = $stripslashes($_POST['email']);\n} \n\n$onload = 'document.form.login.focus();';\nrequire(AT_INCLUDE_PATH.'header.inc.php'); \n?>\n<script language=\"JavaScript\" src=\"sha-1factory.js\" type=\"text/javascript\"></script>\n\n<?php\n\t$module_list = $moduleFactory->getModules(AT_MODULE_STATUS_ENABLED, 0, TRUE);\n\t$keys = array_keys($module_list);\n?>\n\n\n<script language=\"JavaScript\" src=\"sha-1factory.js\" type=\"text/javascript\"></script>\n\n<script type=\"text/javascript\">\nfunction encrypt_password()\n{\n\tdocument.form.password_error.value = \"\";\n\n\terr = verify_password(document.form.password.value, document.form.confirm_password.value);\n\t\n\tif (err.length > 0)\n\t{\n\t\tdocument.form.password_error.value = err;\n\t}\n\telse\n\t{\n\t\tdocument.form.form_password_hidden.value = hex_sha1(document.form.password.value);\n\t\tdocument.form.password.value = \"\";\n\t\tdocument.form.confirm_password.value = \"\";\n\t\tif (document.form.priv_admin.checked == true) \n\t\t{\n\t\t\treturn confirm('<?php echo _AT('confirm_admin_create'); ?>');\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n}\n</script>\n\n<?php \n$savant->assign('keys', $keys);\n$savant->assign('module_list', $module_list);\n$savant->display('admin/users/create.tmpl.php');\nrequire(AT_INCLUDE_PATH.'footer.inc.php'); ?>\n"], "filenames": ["mods/_core/users/admins/create.php"], "buggy_code_start_loc": [17], "buggy_code_end_loc": [17], "fixing_code_start_loc": [18], "fixing_code_end_loc": [25], "type": "CWE-352", "message": "Multiple cross-site request forgery (CSRF) vulnerabilities in ATutor 2.2 allow remote attackers to hijack the authentication of administrators for requests that (1) create an administrator account via a request to mods/_core/users/admins/create.php or (2) create a user account via a request to mods/_core/users/create_user.php.", "other": {"cve": {"id": "CVE-2015-1583", "sourceIdentifier": "cve@mitre.org", "published": "2020-03-02T16:15:11.300", "lastModified": "2020-03-04T17:14:49.297", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site request forgery (CSRF) vulnerabilities in ATutor 2.2 allow remote attackers to hijack the authentication of administrators for requests that (1) create an administrator account via a request to mods/_core/users/admins/create.php or (2) create a user account via a request to mods/_core/users/create_user.php."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de tipo cross-site request forgery (CSRF) en ATutor versi\u00f3n 2.2, permiten a atacantes remotos secuestrar la autenticaci\u00f3n de administradores para peticiones que (1) crean una cuenta de administrador por medio de una petici\u00f3n al archivo mods/_core/users/admins/create.php o (2 ) crea una cuenta de usuario mediante una petici\u00f3n al archivo mods/_core/users/create_user.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:atutor:atutor:2.2:*:*:*:*:*:*:*", "matchCriteriaId": "DDF111DC-ED34-441F-87B3-C1799A9E589C"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/130598/ATutor-LCMS-2.2-Cross-Site-Request-Forgery.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securityfocus.com/bid/72845", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://edricteo.com/cve-2015-1583-atutor-lcms-csrf-vulnerability/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/atutor/ATutor/commit/068b8aa37f24645c62235018fb8da340f60e2d18", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/atutor/ATutor/commit/0ee827317e497f1db86ddc5080b8af461e4595ce", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/atutor/ATutor/commit/af519cfb56da7312eecbb5812484fcbce08e4419", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/atutor/ATutor/commit/068b8aa37f24645c62235018fb8da340f60e2d18"}}