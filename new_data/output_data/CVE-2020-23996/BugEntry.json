{"buggy_code": ["<?php\n/* Copyright (c) 1998-2012 ILIAS open source, Extended GPL, see docs/LICENSE */\n\n/**\n * Factory for importer/exporter implementers\n *\n * @author Stefan Meyer <smeyer.ilias@gmx.de>\n * $Id$\n */\nclass ilImportExportFactory\n{\n    const PLUGINS_DIR = \"Plugins\";\n\n    public static function getExporterClass($a_type)\n    {\n        /**\n         * @var $objDefinition ilObjectDefinition\n         */\n        global $DIC;\n\n        $objDefinition = $DIC['objDefinition'];\n\n        if ($objDefinition->isPlugin($a_type)) {\n            $classname = 'il' . $objDefinition->getClassName($a_type) . 'Exporter';\n            $location = $objDefinition->getLocation($a_type);\n            if (include_once $location . '/class.' . $classname . '.php') {\n                return $classname;\n            }\n        } else {\n            $comp = $objDefinition->getComponentForType($a_type);\n            $class = array_pop(explode(\"/\", $comp));\n            $class = \"il\" . $class . \"Exporter\";\n\n            // page component plugin exporter classes are already included\n            // the component is not registered by ilObjDefinition\n            if (class_exists($class)) {\n                return $class;\n            }\n            \n            // the next line had a \"@\" in front of the include_once\n            // I removed this because it tages ages to track down errors\n            // if the include class contains parse errors.\n            // Alex, 20 Jul 2012\n            if (include_once \"./\" . $comp . \"/classes/class.\" . $class . \".php\") {\n                return $class;\n            }\n        }\n            \n        throw new InvalidArgumentException('Invalid exporter type given');\n    }\n    \n    public static function getComponentForExport($a_type)\n    {\n        /**\n         * @var $objDefinition ilObjectDefinition\n         */\n        global $DIC;\n\n        $objDefinition = $DIC['objDefinition'];\n\n        if ($objDefinition->isPlugin($a_type)) {\n            return self::PLUGINS_DIR . \"/\" . $a_type;\n        } else {\n            return $objDefinition->getComponentForType($a_type);\n        }\n    }\n\n    /**\n     * Get the importer class of a component\n     *\n     * @param string $a_component\tcomponent\n     * @return string\tclass name of the importer class (or empty if the importer should be ignored)\n     * @throws\tInvalidArgumentException\tthe importer class is not found but should not be ignored\n     */\n    public static function getImporterClass($a_component)\n    {\n        /**\n         * @var $objDefinition ilObjectDefinition\n         */\n        global $DIC;\n\n        $objDefinition = $DIC['objDefinition'];\n        \n        $parts = explode('/', $a_component);\n        $component_type = $parts[0];\n        $component = $parts[1];\n        \n        if ($component_type == self::PLUGINS_DIR &&\n            $objDefinition->isPlugin($component)) {\n            $classname = 'il' . $objDefinition->getClassName($component) . 'Importer';\n            $location = $objDefinition->getLocation($component);\n            if (include_once $location . '/class.' . $classname . '.php') {\n                return $classname;\n            }\n        } else {\n            $class = \"il\" . $component . \"Importer\";\n\n            // treat special case of page component plugins\n            // they are imported with component type PLUGINS_DIR\n            // but are not yet recognized by ilObjDefinition::isPlugin()\n            //\n            // if they are active, then their importer class is already included by ilCOPageImporter::init()\n            if (class_exists($class)) {\n                return $class;\n            }\n            // the page component plugin is not installed or not active\n            // return an empty class name instead of throwing an exception\n            // in this case the import should be continued without treating the page component\n            elseif ($component_type == self::PLUGINS_DIR) {\n                return \"\";\n            }\n\n            if (is_file(\"./\" . $a_component . \"/classes/class.\" . $class . \".php\")) {\n                if (include_once \"./\" . $a_component . \"/classes/class.\" . $class . \".php\") {\n                    return $class;\n                }\n            }\n        }\n            \n        throw new InvalidArgumentException('Invalid importer type given: ' . \"./\" . $a_component . \"/classes/class.\" . $class . \".php\");\n    }\n}\n"], "fixing_code": ["<?php\n/* Copyright (c) 1998-2012 ILIAS open source, Extended GPL, see docs/LICENSE */\n\n/**\n * Factory for importer/exporter implementers\n *\n * @author Stefan Meyer <smeyer.ilias@gmx.de>\n * $Id$\n */\nclass ilImportExportFactory\n{\n    const PLUGINS_DIR = \"Plugins\";\n\n    public static function getExporterClass($a_type)\n    {\n        /**\n         * @var $objDefinition ilObjectDefinition\n         */\n        global $DIC;\n\n        $objDefinition = $DIC['objDefinition'];\n\n        if ($objDefinition->isPlugin($a_type)) {\n            $classname = 'il' . $objDefinition->getClassName($a_type) . 'Exporter';\n            $location = $objDefinition->getLocation($a_type);\n            if (include_once $location . '/class.' . $classname . '.php') {\n                return $classname;\n            }\n        } else {\n            $comp = $objDefinition->getComponentForType($a_type);\n            $class = array_pop(explode(\"/\", $comp));\n            $class = \"il\" . $class . \"Exporter\";\n\n            // page component plugin exporter classes are already included\n            // the component is not registered by ilObjDefinition\n            if (class_exists($class)) {\n                return $class;\n            }\n            \n            // the next line had a \"@\" in front of the include_once\n            // I removed this because it tages ages to track down errors\n            // if the include class contains parse errors.\n            // Alex, 20 Jul 2012\n            if (include_once \"./\" . $comp . \"/classes/class.\" . $class . \".php\") {\n                return $class;\n            }\n        }\n            \n        throw new InvalidArgumentException('Invalid exporter type given');\n    }\n    \n    public static function getComponentForExport($a_type)\n    {\n        /**\n         * @var $objDefinition ilObjectDefinition\n         */\n        global $DIC;\n\n        $objDefinition = $DIC['objDefinition'];\n\n        if ($objDefinition->isPlugin($a_type)) {\n            return self::PLUGINS_DIR . \"/\" . $a_type;\n        } else {\n            return $objDefinition->getComponentForType($a_type);\n        }\n    }\n\n    /**\n     * Get the importer class of a component\n     *\n     * @param string $a_component\tcomponent\n     * @return string\tclass name of the importer class (or empty if the importer should be ignored)\n     * @throws\tInvalidArgumentException\tthe importer class is not found but should not be ignored\n     */\n    public static function getImporterClass($a_component)\n    {\n        /**\n         * @var $objDefinition ilObjectDefinition\n         */\n        global $DIC;\n        $objDefinition = $DIC['objDefinition'];\n        \n        $parts = explode('/', $a_component);\n        $component_type = $parts[0];\n        $component = $parts[1];\n        \n        if ($component_type == self::PLUGINS_DIR &&\n            $objDefinition->isPlugin($component)) {\n            $classname = 'il' . $objDefinition->getClassName($component) . 'Importer';\n            $location = $objDefinition->getLocation($component);\n            if (include_once $location . '/class.' . $classname . '.php') {\n                return $classname;\n            }\n        } else {\n            $class = \"il\" . $component . \"Importer\";\n            // treat special case of page component plugins\n            // they are imported with component type PLUGINS_DIR\n            // but are not yet recognized by ilObjDefinition::isPlugin()\n            //\n            // if they are active, then their importer class is already included by ilCOPageImporter::init()\n            if (class_exists($class)) {\n                return $class;\n            }\n            // the page component plugin is not installed or not active\n            // return an empty class name instead of throwing an exception\n            // in this case the import should be continued without treating the page component\n            elseif ($component_type == self::PLUGINS_DIR) {\n                return \"\";\n            }\n\n            if (is_file(\"./\" . $a_component . \"/classes/class.\" . $class . \".php\")) {\n                return $class;\n            }\n        }\n            \n        throw new InvalidArgumentException('Invalid importer type given: ' . \"./\" . $a_component . \"/classes/class.\" . $class . \".php\");\n    }\n}\n"], "filenames": ["Services/Export/classes/class.ilImportExportFactory.php"], "buggy_code_start_loc": [81], "buggy_code_end_loc": [117], "fixing_code_start_loc": [80], "fixing_code_end_loc": [113], "type": "NVD-CWE-Other", "message": "A local file inclusion vulnerability in ILIAS before 5.3.19, 5.4.10 and 6.0 allows remote authenticated attackers to execute arbitrary code via the import of personal data.", "other": {"cve": {"id": "CVE-2020-23996", "sourceIdentifier": "cve@mitre.org", "published": "2021-05-13T20:15:08.253", "lastModified": "2021-05-21T16:33:07.100", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A local file inclusion vulnerability in ILIAS before 5.3.19, 5.4.10 and 6.0 allows remote authenticated attackers to execute arbitrary code via the import of personal data."}, {"lang": "es", "value": "Una vulnerabilidad de inclusi\u00f3n de archivos locales en ILIAS antes de las versiones 5.3.19, 5.4.10 y 6.0 permite a atacantes remotos autentificados ejecutar c\u00f3digo arbitrario a trav\u00e9s de la importaci\u00f3n de datos personales"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.3.19", "matchCriteriaId": "5E63923A-ED47-46B3-9274-1E38E31709C9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.4.0", "versionEndExcluding": "5.4.10", "matchCriteriaId": "806579DF-0FD0-478C-8564-424489B31768"}]}]}], "references": [{"url": "https://docu.ilias.de/goto_docu_pg_118817_35.html", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://docu.ilias.de/goto_docu_pg_118823_35.html", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://docu.ilias.de/goto_docu_pg_122177_35.html", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/ILIAS-eLearning/ILIAS/commit/6717c4ecc6d076154ce185f1ea052f07f37e3537", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ILIAS-eLearning/ILIAS/commit/6717c4ecc6d076154ce185f1ea052f07f37e3537"}}