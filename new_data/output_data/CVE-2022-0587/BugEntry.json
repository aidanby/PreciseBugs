{"buggy_code": ["<?php\n\n// handle OAuth requests\n$request = request();  // grab the Request object\n\nif ($request->has('oauthtransport')) {\n    // make sure transport is safe\n    $validator = Validator::make($request->all(), ['oauthtransport' => 'required|alpha']);\n\n    if ($validator->passes()) {\n        $transport_name = $request->get('oauthtransport');\n        $class = \\LibreNMS\\Alert\\Transport::getClass($transport_name);\n        if (class_exists($class)) {\n            $transport = app($class);\n            if ($transport->handleOauth($request)) {\n                flash()->addSuccess(\"$transport_name added successfully.\");\n            } else {\n                flash()->addError(\"$transport_name was not added. Check the log for details.\");\n            }\n        }\n    }\n\n    // remove get variables otherwise things will get double added\n    echo '<script>window.history.replaceState(null, null, window.location.pathname);</script>';\n}\nunset($request);\n\n// print alert transports\nrequire_once 'includes/html/print-alert-transports.php';\n", "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| contains the \"web\" middleware group. Now create something great!\n|\n*/\n\n// Auth\nAuth::routes(['register' => false, 'reset' => false, 'verify' => false]);\n\n// WebUI\nRoute::group(['middleware' => ['auth'], 'guard' => 'auth'], function () {\n\n    // pages\n    Route::post('alert/{alert}/ack', [\\App\\Http\\Controllers\\AlertController::class, 'ack'])->name('alert.ack');\n    Route::resource('device-groups', 'DeviceGroupController');\n    Route::resource('port-groups', 'PortGroupController');\n    Route::resource('port', 'PortController', ['only' => 'update']);\n    Route::group(['prefix' => 'poller'], function () {\n        Route::get('', 'PollerController@pollerTab')->name('poller.index');\n        Route::get('log', 'PollerController@logTab')->name('poller.log');\n        Route::get('groups', 'PollerController@groupsTab')->name('poller.groups');\n        Route::get('settings', 'PollerController@settingsTab')->name('poller.settings');\n        Route::get('performance', 'PollerController@performanceTab')->name('poller.performance');\n        Route::resource('{id}/settings', 'PollerSettingsController', ['as' => 'poller'])->only(['update', 'destroy']);\n    });\n    Route::prefix('services')->name('services.')->group(function () {\n        Route::resource('templates', 'ServiceTemplateController');\n        Route::post('templates/applyAll', 'ServiceTemplateController@applyAll')->name('templates.applyAll');\n        Route::post('templates/apply/{template}', 'ServiceTemplateController@apply')->name('templates.apply');\n        Route::post('templates/remove/{template}', 'ServiceTemplateController@remove')->name('templates.remove');\n    });\n    Route::get('locations', 'LocationController@index');\n    Route::resource('preferences', 'UserPreferencesController', ['only' => ['index', 'store']]);\n    Route::resource('users', 'UserController');\n    Route::get('about', 'AboutController@index');\n    Route::get('authlog', 'UserController@authlog');\n    Route::get('overview', 'OverviewController@index')->name('overview');\n    Route::get('/', 'OverviewController@index')->name('home');\n    Route::view('vminfo', 'vminfo');\n\n    // Device Tabs\n    Route::group(['prefix' => 'device/{device}', 'namespace' => 'Device\\Tabs', 'as' => 'device.'], function () {\n        Route::put('notes', 'NotesController@update')->name('notes.update');\n    });\n\n    Route::match(['get', 'post'], 'device/{device}/{tab?}/{vars?}', 'DeviceController@index')\n        ->name('device')->where(['vars' => '.*']);\n\n    // Maps\n    Route::group(['prefix' => 'maps', 'namespace' => 'Maps'], function () {\n        Route::get('devicedependency', 'DeviceDependencyController@dependencyMap');\n    });\n\n    // Push notifications\n    Route::group(['prefix' => 'push'], function () {\n        Route::get('token', [\\App\\Http\\Controllers\\PushNotificationController::class, 'token'])->name('push.token');\n        Route::get('key', [\\App\\Http\\Controllers\\PushNotificationController::class, 'key'])->name('push.key');\n        Route::post('register', [\\App\\Http\\Controllers\\PushNotificationController::class, 'register'])->name('push.register');\n        Route::post('unregister', [\\App\\Http\\Controllers\\PushNotificationController::class, 'unregister'])->name('push.unregister');\n    });\n\n    // admin pages\n    Route::group(['middleware' => ['can:admin']], function () {\n        Route::get('settings/{tab?}/{section?}', 'SettingsController@index')->name('settings');\n        Route::put('settings/{name}', 'SettingsController@update')->name('settings.update');\n        Route::delete('settings/{name}', 'SettingsController@destroy')->name('settings.destroy');\n\n        Route::post('alert/transports/{transport}/test', [\\App\\Http\\Controllers\\AlertTransportController::class, 'test'])->name('alert.transports.test');\n    });\n\n    Route::get('plugin/settings', 'PluginAdminController')->name('plugin.admin');\n    Route::get('plugin/settings/{plugin:plugin_name}', 'PluginSettingsController')->name('plugin.settings');\n    Route::post('plugin/settings/{plugin:plugin_name}', 'PluginSettingsController@update')->name('plugin.update');\n    Route::get('plugin', 'PluginLegacyController@redirect');\n    Route::redirect('plugin/view=admin', '/plugin/admin');\n    Route::get('plugin/p={pluginName}', 'PluginLegacyController@redirect');\n    Route::any('plugin/v1/{plugin:plugin_name}/{other?}', 'PluginLegacyController')->where('other', '(.*)')->name('plugin.legacy');\n    Route::get('plugin/{plugin:plugin_name}', 'PluginPageController')->name('plugin.page');\n\n    // old route redirects\n    Route::permanentRedirect('poll-log', 'poller/log');\n\n    // Two Factor Auth\n    Route::group(['prefix' => '2fa', 'namespace' => 'Auth'], function () {\n        Route::get('', 'TwoFactorController@showTwoFactorForm')->name('2fa.form');\n        Route::post('', 'TwoFactorController@verifyTwoFactor')->name('2fa.verify');\n        Route::post('add', 'TwoFactorController@create')->name('2fa.add');\n        Route::post('cancel', 'TwoFactorController@cancelAdd')->name('2fa.cancel');\n        Route::post('remove', 'TwoFactorController@destroy')->name('2fa.remove');\n\n        Route::post('{user}/unlock', 'TwoFactorManagementController@unlock')->name('2fa.unlock');\n        Route::delete('{user}', 'TwoFactorManagementController@destroy')->name('2fa.delete');\n    });\n\n    // Ajax routes\n    Route::group(['prefix' => 'ajax'], function () {\n        // page ajax controllers\n        Route::resource('location', 'LocationController', ['only' => ['update', 'destroy']]);\n        Route::resource('pollergroup', 'PollerGroupController', ['only' => ['destroy']]);\n        // misc ajax controllers\n        Route::group(['namespace' => 'Ajax'], function () {\n            Route::get('search/bgp', 'BgpSearchController');\n            Route::get('search/device', 'DeviceSearchController');\n            Route::get('search/port', 'PortSearchController');\n            Route::post('set_map_group', 'AvailabilityMapController@setGroup');\n            Route::post('set_map_view', 'AvailabilityMapController@setView');\n            Route::post('set_resolution', 'ResolutionController@set');\n            Route::get('netcmd', 'NetCommand@run');\n            Route::post('ripe/raw', 'RipeNccApiController@raw');\n            Route::get('snmp/capabilities', 'SnmpCapabilities')->name('snmp.capabilities');\n        });\n\n        Route::get('settings/list', 'SettingsController@listAll')->name('settings.list');\n\n        // form ajax handlers, perhaps should just be page controllers\n        Route::group(['prefix' => 'form', 'namespace' => 'Form'], function () {\n            Route::resource('widget-settings', 'WidgetSettingsController');\n            Route::post('copy-dashboard', 'CopyDashboardController@store');\n        });\n\n        // js select2 data controllers\n        Route::group(['prefix' => 'select', 'namespace' => 'Select'], function () {\n            Route::get('application', 'ApplicationController')->name('ajax.select.application');\n            Route::get('bill', 'BillController')->name('ajax.select.bill');\n            Route::get('dashboard', 'DashboardController')->name('ajax.select.dashboard');\n            Route::get('device', 'DeviceController')->name('ajax.select.device');\n            Route::get('device-field', 'DeviceFieldController')->name('ajax.select.device-field');\n            Route::get('device-group', 'DeviceGroupController')->name('ajax.select.device-group');\n            Route::get('port-group', 'PortGroupController')->name('ajax.select.port-group');\n            Route::get('eventlog', 'EventlogController')->name('ajax.select.eventlog');\n            Route::get('graph', 'GraphController')->name('ajax.select.graph');\n            Route::get('graph-aggregate', 'GraphAggregateController')->name('ajax.select.graph-aggregate');\n            Route::get('graylog-streams', 'GraylogStreamsController')->name('ajax.select.graylog-streams');\n            Route::get('syslog', 'SyslogController')->name('ajax.select.syslog');\n            Route::get('location', 'LocationController')->name('ajax.select.location');\n            Route::get('munin', 'MuninPluginController')->name('ajax.select.munin');\n            Route::get('service', 'ServiceController')->name('ajax.select.service');\n            Route::get('template', 'ServiceTemplateController')->name('ajax.select.template');\n            Route::get('poller-group', 'PollerGroupController')->name('ajax.select.poller-group');\n            Route::get('port', 'PortController')->name('ajax.select.port');\n            Route::get('port-field', 'PortFieldController')->name('ajax.select.port-field');\n        });\n\n        // jquery bootgrid data controllers\n        Route::group(['prefix' => 'table', 'namespace' => 'Table'], function () {\n            Route::post('alert-schedule', 'AlertScheduleController');\n            Route::post('customers', 'CustomersController');\n            Route::post('device', 'DeviceController');\n            Route::post('edit-ports', 'EditPortsController');\n            Route::post('eventlog', 'EventlogController');\n            Route::post('fdb-tables', 'FdbTablesController');\n            Route::post('graylog', 'GraylogController');\n            Route::post('location', 'LocationController');\n            Route::post('mempools', 'MempoolsController');\n            Route::post('outages', 'OutagesController');\n            Route::post('port-nac', 'PortNacController');\n            Route::post('port-stp', 'PortStpController');\n            Route::post('ports', 'PortsController')->name('table.ports');\n            Route::post('routes', 'RoutesTablesController');\n            Route::post('syslog', 'SyslogController');\n            Route::post('vminfo', 'VminfoController');\n        });\n\n        // dashboard widgets\n        Route::group(['prefix' => 'dash', 'namespace' => 'Widgets'], function () {\n            Route::post('alerts', 'AlertsController');\n            Route::post('alertlog', 'AlertlogController');\n            Route::post('availability-map', 'AvailabilityMapController');\n            Route::post('component-status', 'ComponentStatusController');\n            Route::post('device-summary-horiz', 'DeviceSummaryHorizController');\n            Route::post('device-summary-vert', 'DeviceSummaryVertController');\n            Route::post('eventlog', 'EventlogController');\n            Route::post('generic-graph', 'GraphController');\n            Route::post('generic-image', 'ImageController');\n            Route::post('globe', 'GlobeController');\n            Route::post('graylog', 'GraylogController');\n            Route::post('placeholder', 'PlaceholderController');\n            Route::post('notes', 'NotesController');\n            Route::post('server-stats', 'ServerStatsController');\n            Route::post('syslog', 'SyslogController');\n            Route::post('top-devices', 'TopDevicesController');\n            Route::post('top-interfaces', 'TopInterfacesController');\n            Route::post('top-errors', 'TopErrorsController');\n            Route::post('worldmap', 'WorldMapController');\n            Route::post('alertlog-stats', 'AlertlogStatsController');\n        });\n    });\n\n    // demo helper\n    Route::permanentRedirect('demo', '/');\n});\n\n// installation routes\nRoute::group(['prefix' => 'install', 'namespace' => 'Install'], function () {\n    Route::get('/', 'InstallationController@redirectToFirst')->name('install');\n    Route::get('/checks', 'ChecksController@index')->name('install.checks');\n    Route::get('/database', 'DatabaseController@index')->name('install.database');\n    Route::get('/user', 'MakeUserController@index')->name('install.user');\n    Route::get('/finish', 'FinalizeController@index')->name('install.finish');\n\n    Route::post('/user/create', 'MakeUserController@create')->name('install.action.user');\n    Route::post('/database/test', 'DatabaseController@test')->name('install.acton.test-database');\n    Route::get('/ajax/database/migrate', 'DatabaseController@migrate')->name('install.action.migrate');\n    Route::get('/ajax/steps', 'InstallationController@stepsCompleted')->name('install.action.steps');\n    Route::any('{path?}', 'InstallationController@invalid')->where('path', '.*'); // 404\n});\n\n// Legacy routes\nRoute::any('/dummy_legacy_auth/{path?}', 'LegacyController@dummy')->middleware('auth');\nRoute::any('/dummy_legacy_unauth/{path?}', 'LegacyController@dummy');\nRoute::any('/{path?}', 'LegacyController@index')\n    ->where('path', '^((?!_debugbar).)*')\n    ->middleware('auth');\n"], "fixing_code": ["<?php\n\nif (Auth::user()->hasGlobalAdmin()) {\n    // handle OAuth requests\n    $request = request();  // grab the Request object\n\n    if ($request->has('oauthtransport')) {\n        // make sure transport is safe\n        $validator = Validator::make($request->all(), ['oauthtransport' => 'required|alpha']);\n\n        if ($validator->passes()) {\n            $transport_name = $request->get('oauthtransport');\n            $class = \\LibreNMS\\Alert\\Transport::getClass($transport_name);\n            if (class_exists($class)) {\n                $transport = app($class);\n                if ($transport->handleOauth($request)) {\n                    flash()->addSuccess(\"$transport_name added successfully.\");\n                } else {\n                    flash()->addError(\"$transport_name was not added. Check the log for details.\");\n                }\n            }\n        }\n\n        // remove get variables otherwise things will get double added\n        echo '<script>window.history.replaceState(null, null, window.location.pathname);</script>';\n    }\n    unset($request);\n\n    // print alert transports\n    require_once 'includes/html/print-alert-transports.php';\n} else {\n    include 'includes/html/error-no-perm.inc.php';\n}\n", "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| contains the \"web\" middleware group. Now create something great!\n|\n*/\n\n// Auth\nAuth::routes(['register' => false, 'reset' => false, 'verify' => false]);\n\n// WebUI\nRoute::group(['middleware' => ['auth'], 'guard' => 'auth'], function () {\n\n    // pages\n    Route::post('alert/{alert}/ack', [\\App\\Http\\Controllers\\AlertController::class, 'ack'])->name('alert.ack');\n    Route::resource('device-groups', 'DeviceGroupController');\n    Route::resource('port', 'PortController', ['only' => 'update']);\n    Route::group(['prefix' => 'poller'], function () {\n        Route::get('', 'PollerController@pollerTab')->name('poller.index');\n        Route::get('log', 'PollerController@logTab')->name('poller.log');\n        Route::get('groups', 'PollerController@groupsTab')->name('poller.groups');\n        Route::get('settings', 'PollerController@settingsTab')->name('poller.settings');\n        Route::get('performance', 'PollerController@performanceTab')->name('poller.performance');\n        Route::resource('{id}/settings', 'PollerSettingsController', ['as' => 'poller'])->only(['update', 'destroy']);\n    });\n    Route::prefix('services')->name('services.')->group(function () {\n        Route::resource('templates', 'ServiceTemplateController');\n        Route::post('templates/applyAll', 'ServiceTemplateController@applyAll')->name('templates.applyAll');\n        Route::post('templates/apply/{template}', 'ServiceTemplateController@apply')->name('templates.apply');\n        Route::post('templates/remove/{template}', 'ServiceTemplateController@remove')->name('templates.remove');\n    });\n    Route::get('locations', 'LocationController@index');\n    Route::resource('preferences', 'UserPreferencesController', ['only' => ['index', 'store']]);\n    Route::resource('users', 'UserController');\n    Route::get('about', 'AboutController@index');\n    Route::get('authlog', 'UserController@authlog');\n    Route::get('overview', 'OverviewController@index')->name('overview');\n    Route::get('/', 'OverviewController@index')->name('home');\n    Route::view('vminfo', 'vminfo');\n\n    // Device Tabs\n    Route::group(['prefix' => 'device/{device}', 'namespace' => 'Device\\Tabs', 'as' => 'device.'], function () {\n        Route::put('notes', 'NotesController@update')->name('notes.update');\n    });\n\n    Route::match(['get', 'post'], 'device/{device}/{tab?}/{vars?}', 'DeviceController@index')\n        ->name('device')->where(['vars' => '.*']);\n\n    // Maps\n    Route::group(['prefix' => 'maps', 'namespace' => 'Maps'], function () {\n        Route::get('devicedependency', 'DeviceDependencyController@dependencyMap');\n    });\n\n    // Push notifications\n    Route::group(['prefix' => 'push'], function () {\n        Route::get('token', [\\App\\Http\\Controllers\\PushNotificationController::class, 'token'])->name('push.token');\n        Route::get('key', [\\App\\Http\\Controllers\\PushNotificationController::class, 'key'])->name('push.key');\n        Route::post('register', [\\App\\Http\\Controllers\\PushNotificationController::class, 'register'])->name('push.register');\n        Route::post('unregister', [\\App\\Http\\Controllers\\PushNotificationController::class, 'unregister'])->name('push.unregister');\n    });\n\n    // admin pages\n    Route::group(['middleware' => ['can:admin']], function () {\n        Route::get('settings/{tab?}/{section?}', 'SettingsController@index')->name('settings');\n        Route::put('settings/{name}', 'SettingsController@update')->name('settings.update');\n        Route::delete('settings/{name}', 'SettingsController@destroy')->name('settings.destroy');\n\n        Route::post('alert/transports/{transport}/test', [\\App\\Http\\Controllers\\AlertTransportController::class, 'test'])->name('alert.transports.test');\n\n        Route::get('plugin/settings', 'PluginAdminController')->name('plugin.admin');\n        Route::get('plugin/settings/{plugin:plugin_name}', 'PluginSettingsController')->name('plugin.settings');\n        Route::post('plugin/settings/{plugin:plugin_name}', 'PluginSettingsController@update')->name('plugin.update');\n\n        Route::resource('port-groups', 'PortGroupController');\n    });\n\n    Route::get('plugin', 'PluginLegacyController@redirect');\n    Route::redirect('plugin/view=admin', '/plugin/admin');\n    Route::get('plugin/p={pluginName}', 'PluginLegacyController@redirect');\n    Route::any('plugin/v1/{plugin:plugin_name}/{other?}', 'PluginLegacyController')->where('other', '(.*)')->name('plugin.legacy');\n    Route::get('plugin/{plugin:plugin_name}', 'PluginPageController')->name('plugin.page');\n\n    // old route redirects\n    Route::permanentRedirect('poll-log', 'poller/log');\n\n    // Two Factor Auth\n    Route::group(['prefix' => '2fa', 'namespace' => 'Auth'], function () {\n        Route::get('', 'TwoFactorController@showTwoFactorForm')->name('2fa.form');\n        Route::post('', 'TwoFactorController@verifyTwoFactor')->name('2fa.verify');\n        Route::post('add', 'TwoFactorController@create')->name('2fa.add');\n        Route::post('cancel', 'TwoFactorController@cancelAdd')->name('2fa.cancel');\n        Route::post('remove', 'TwoFactorController@destroy')->name('2fa.remove');\n\n        Route::post('{user}/unlock', 'TwoFactorManagementController@unlock')->name('2fa.unlock');\n        Route::delete('{user}', 'TwoFactorManagementController@destroy')->name('2fa.delete');\n    });\n\n    // Ajax routes\n    Route::group(['prefix' => 'ajax'], function () {\n        // page ajax controllers\n        Route::resource('location', 'LocationController', ['only' => ['update', 'destroy']]);\n        Route::resource('pollergroup', 'PollerGroupController', ['only' => ['destroy']]);\n        // misc ajax controllers\n        Route::group(['namespace' => 'Ajax'], function () {\n            Route::get('search/bgp', 'BgpSearchController');\n            Route::get('search/device', 'DeviceSearchController');\n            Route::get('search/port', 'PortSearchController');\n            Route::post('set_map_group', 'AvailabilityMapController@setGroup');\n            Route::post('set_map_view', 'AvailabilityMapController@setView');\n            Route::post('set_resolution', 'ResolutionController@set');\n            Route::get('netcmd', 'NetCommand@run');\n            Route::post('ripe/raw', 'RipeNccApiController@raw');\n            Route::get('snmp/capabilities', 'SnmpCapabilities')->name('snmp.capabilities');\n        });\n\n        Route::get('settings/list', 'SettingsController@listAll')->name('settings.list');\n\n        // form ajax handlers, perhaps should just be page controllers\n        Route::group(['prefix' => 'form', 'namespace' => 'Form'], function () {\n            Route::resource('widget-settings', 'WidgetSettingsController');\n            Route::post('copy-dashboard', 'CopyDashboardController@store');\n        });\n\n        // js select2 data controllers\n        Route::group(['prefix' => 'select', 'namespace' => 'Select'], function () {\n            Route::get('application', 'ApplicationController')->name('ajax.select.application');\n            Route::get('bill', 'BillController')->name('ajax.select.bill');\n            Route::get('dashboard', 'DashboardController')->name('ajax.select.dashboard');\n            Route::get('device', 'DeviceController')->name('ajax.select.device');\n            Route::get('device-field', 'DeviceFieldController')->name('ajax.select.device-field');\n            Route::get('device-group', 'DeviceGroupController')->name('ajax.select.device-group');\n            Route::get('port-group', 'PortGroupController')->name('ajax.select.port-group');\n            Route::get('eventlog', 'EventlogController')->name('ajax.select.eventlog');\n            Route::get('graph', 'GraphController')->name('ajax.select.graph');\n            Route::get('graph-aggregate', 'GraphAggregateController')->name('ajax.select.graph-aggregate');\n            Route::get('graylog-streams', 'GraylogStreamsController')->name('ajax.select.graylog-streams');\n            Route::get('syslog', 'SyslogController')->name('ajax.select.syslog');\n            Route::get('location', 'LocationController')->name('ajax.select.location');\n            Route::get('munin', 'MuninPluginController')->name('ajax.select.munin');\n            Route::get('service', 'ServiceController')->name('ajax.select.service');\n            Route::get('template', 'ServiceTemplateController')->name('ajax.select.template');\n            Route::get('poller-group', 'PollerGroupController')->name('ajax.select.poller-group');\n            Route::get('port', 'PortController')->name('ajax.select.port');\n            Route::get('port-field', 'PortFieldController')->name('ajax.select.port-field');\n        });\n\n        // jquery bootgrid data controllers\n        Route::group(['prefix' => 'table', 'namespace' => 'Table'], function () {\n            Route::post('alert-schedule', 'AlertScheduleController');\n            Route::post('customers', 'CustomersController');\n            Route::post('device', 'DeviceController');\n            Route::post('edit-ports', 'EditPortsController');\n            Route::post('eventlog', 'EventlogController');\n            Route::post('fdb-tables', 'FdbTablesController');\n            Route::post('graylog', 'GraylogController');\n            Route::post('location', 'LocationController');\n            Route::post('mempools', 'MempoolsController');\n            Route::post('outages', 'OutagesController');\n            Route::post('port-nac', 'PortNacController');\n            Route::post('port-stp', 'PortStpController');\n            Route::post('ports', 'PortsController')->name('table.ports');\n            Route::post('routes', 'RoutesTablesController');\n            Route::post('syslog', 'SyslogController');\n            Route::post('vminfo', 'VminfoController');\n        });\n\n        // dashboard widgets\n        Route::group(['prefix' => 'dash', 'namespace' => 'Widgets'], function () {\n            Route::post('alerts', 'AlertsController');\n            Route::post('alertlog', 'AlertlogController');\n            Route::post('availability-map', 'AvailabilityMapController');\n            Route::post('component-status', 'ComponentStatusController');\n            Route::post('device-summary-horiz', 'DeviceSummaryHorizController');\n            Route::post('device-summary-vert', 'DeviceSummaryVertController');\n            Route::post('eventlog', 'EventlogController');\n            Route::post('generic-graph', 'GraphController');\n            Route::post('generic-image', 'ImageController');\n            Route::post('globe', 'GlobeController');\n            Route::post('graylog', 'GraylogController');\n            Route::post('placeholder', 'PlaceholderController');\n            Route::post('notes', 'NotesController');\n            Route::post('server-stats', 'ServerStatsController');\n            Route::post('syslog', 'SyslogController');\n            Route::post('top-devices', 'TopDevicesController');\n            Route::post('top-interfaces', 'TopInterfacesController');\n            Route::post('top-errors', 'TopErrorsController');\n            Route::post('worldmap', 'WorldMapController');\n            Route::post('alertlog-stats', 'AlertlogStatsController');\n        });\n    });\n\n    // demo helper\n    Route::permanentRedirect('demo', '/');\n});\n\n// installation routes\nRoute::group(['prefix' => 'install', 'namespace' => 'Install'], function () {\n    Route::get('/', 'InstallationController@redirectToFirst')->name('install');\n    Route::get('/checks', 'ChecksController@index')->name('install.checks');\n    Route::get('/database', 'DatabaseController@index')->name('install.database');\n    Route::get('/user', 'MakeUserController@index')->name('install.user');\n    Route::get('/finish', 'FinalizeController@index')->name('install.finish');\n\n    Route::post('/user/create', 'MakeUserController@create')->name('install.action.user');\n    Route::post('/database/test', 'DatabaseController@test')->name('install.acton.test-database');\n    Route::get('/ajax/database/migrate', 'DatabaseController@migrate')->name('install.action.migrate');\n    Route::get('/ajax/steps', 'InstallationController@stepsCompleted')->name('install.action.steps');\n    Route::any('{path?}', 'InstallationController@invalid')->where('path', '.*'); // 404\n});\n\n// Legacy routes\nRoute::any('/dummy_legacy_auth/{path?}', 'LegacyController@dummy')->middleware('auth');\nRoute::any('/dummy_legacy_unauth/{path?}', 'LegacyController@dummy');\nRoute::any('/{path?}', 'LegacyController@index')\n    ->where('path', '^((?!_debugbar).)*')\n    ->middleware('auth');\n"], "filenames": ["includes/html/pages/alert-transports.inc.php", "routes/web.php"], "buggy_code_start_loc": [3, 25], "buggy_code_end_loc": [30, 83], "fixing_code_start_loc": [3, 24], "fixing_code_end_loc": [33, 85], "type": "CWE-285", "message": "Improper Authorization in Packagist librenms/librenms prior to 22.2.0.", "other": {"cve": {"id": "CVE-2022-0587", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-15T08:15:07.240", "lastModified": "2022-02-22T21:31:12.240", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Authorization in Packagist librenms/librenms prior to 22.2.0."}, {"lang": "es", "value": "Una Autorizaci\u00f3n Inapropiada en Packagist librenms/librenms versiones anteriores a 22.2.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-285"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndExcluding": "22.2.0", "matchCriteriaId": "5728F9DE-EADE-4DC6-828D-FE2839E1A5AA"}]}]}], "references": [{"url": "https://github.com/librenms/librenms/commit/95970af78e4c899744a715766d744deef8c505f7", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0c7c9ecd-33ac-4865-b05b-447ced735469", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://notes.netbytesec.com/2022/02/multiple-vulnerabilities-in-librenms.html", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/95970af78e4c899744a715766d744deef8c505f7"}}