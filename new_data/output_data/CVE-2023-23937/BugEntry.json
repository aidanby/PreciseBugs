{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Endroid\\QrCode\\Builder\\Builder;\nuse Endroid\\QrCode\\Writer\\PngWriter;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Tool;\nuse Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Google\\GoogleAuthenticatorInterface;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\n/**\n * @internal\n */\nclass UserController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/user/tree-get-childs-by-id\", name=\"pimcore_admin_user_treegetchildsbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Listing();\n        $list->setCondition('parentId = ?', (int)$request->get('node'));\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user->getId() && $user->getName() != 'system') {\n                    $users[] = $this->getTreeNodeConfig($user);\n                }\n            }\n        }\n\n        return $this->adminJson($users);\n    }\n\n    /**\n     * @param User|User\\Folder $user\n     *\n     * @return array\n     */\n    protected function getTreeNodeConfig($user)\n    {\n        $tmpUser = [\n            'id' => $user->getId(),\n            'text' => $user->getName(),\n            'elementType' => 'user',\n            'type' => $user->getType(),\n            'qtipCfg' => [\n                'title' => 'ID: ' . $user->getId(),\n            ],\n        ];\n\n        // set type specific settings\n        if ($user instanceof User\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($user->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_user';\n            if (!$user->getActive()) {\n                $tmpUser['cls'] = ' pimcore_unpublished';\n            }\n            $tmpUser['allowChildren'] = false;\n            $tmpUser['admin'] = $user->isAdmin();\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/add\", name=\"pimcore_admin_user_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        try {\n            $type = $request->get('type');\n\n            $className = User\\Service::getClassNameForType($type);\n            $user = $className::create([\n                'parentId' => (int)$request->get('parentId'),\n                'name' => trim($request->get('name')),\n                'password' => '',\n                'active' => $request->get('active'),\n            ]);\n\n            if ($request->get('rid')) {\n                $rid = $request->get('rid');\n                $rObject = $className::getById($rid);\n                if ($rObject) {\n                    if ($type == 'user' || $type == 'role') {\n                        $user->setParentId($rObject->getParentId());\n                        if ($rObject->getClasses()) {\n                            $user->setClasses(implode(',', $rObject->getClasses()));\n                        }\n                        if ($rObject->getDocTypes()) {\n                            $user->setDocTypes(implode(',', $rObject->getDocTypes()));\n                        }\n\n                        $keys = ['asset', 'document', 'object'];\n                        foreach ($keys as $key) {\n                            $getter = 'getWorkspaces' . ucfirst($key);\n                            $setter = 'setWorkspaces' . ucfirst($key);\n                            $workspaces = $rObject->$getter();\n                            $clonedWorkspaces = [];\n                            if (is_array($workspaces)) {\n                                /** @var User\\Workspace\\AbstractWorkspace $workspace */\n                                foreach ($workspaces as $workspace) {\n                                    $vars = $workspace->getObjectVars();\n                                    if ($key == 'object') {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\DataObject';\n                                    } else {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . ucfirst($key);\n                                    }\n                                    $newWorkspace = new $workspaceClass();\n                                    foreach ($vars as $varKey => $varValue) {\n                                        $newWorkspace->setObjectVar($varKey, $varValue);\n                                    }\n                                    $newWorkspace->setUserId($user->getId());\n                                    $clonedWorkspaces[] = $newWorkspace;\n                                }\n                            }\n\n                            $user->$setter($clonedWorkspaces);\n                        }\n\n                        $user->setPerspectives($rObject->getPerspectives());\n                        $user->setPermissions($rObject->getPermissions());\n\n                        if ($type == 'user') {\n                            $user->setAdmin(false);\n                            if ($this->getAdminUser()->isAdmin()) {\n                                $user->setAdmin($rObject->getAdmin());\n                            }\n                            $user->setActive($rObject->getActive());\n                            $user->setRoles($rObject->getRoles());\n                            $user->setWelcomeScreen($rObject->getWelcomescreen());\n                            $user->setMemorizeTabs($rObject->getMemorizeTabs());\n                            $user->setCloseWarning($rObject->getCloseWarning());\n                        }\n\n                        $user->setWebsiteTranslationLanguagesView($rObject->getWebsiteTranslationLanguagesView());\n                        $user->setWebsiteTranslationLanguagesEdit($rObject->getWebsiteTranslationLanguagesEdit());\n\n                        $user->save();\n                    }\n                }\n            }\n\n            return $this->adminJson([\n                'success' => true,\n                'id' => $user->getId(),\n            ]);\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @param User\\AbstractUser $node\n     * @param array $currentList\n     * @param bool $roleMode\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    protected function populateChildNodes($node, &$currentList, $roleMode)\n    {\n        $currentUser = \\Pimcore\\Tool\\Admin::getCurrentUser();\n\n        $list = $roleMode ? new User\\Role\\Listing() : new User\\Listing();\n        $list->setCondition('parentId = ?', $node->getId());\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $childList = $roleMode ? $list->getRoles() : $list->getUsers();\n        if (is_array($childList)) {\n            foreach ($childList as $user) {\n                if ($user->getId() == $currentUser->getId()) {\n                    throw new \\Exception('Cannot delete current user');\n                }\n                if ($user->getId() && $currentUser->getId() && $user->getName() != 'system') {\n                    $currentList[] = $user;\n                    $this->populateChildNodes($user, $currentList, $roleMode);\n                }\n            }\n        }\n\n        return $currentList;\n    }\n\n    /**\n     * @Route(\"/user/delete\", name=\"pimcore_admin_user_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteAction(Request $request)\n    {\n        $user = User\\AbstractUser::getById((int)$request->get('id'));\n\n        // only admins are allowed to delete admins and folders\n        // because a folder might contain an admin user, so it is simply not allowed for users with the \"users\" permission\n        if (($user instanceof User\\Folder && !$this->getAdminUser()->isAdmin()) || ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin())) {\n            throw new \\Exception('You are not allowed to delete this user');\n        } else {\n            if ($user instanceof User\\Role\\Folder) {\n                $list = [$user];\n                $this->populateChildNodes($user, $list, $user instanceof User\\Role\\Folder);\n                $listCount = count($list);\n                for ($i = $listCount - 1; $i >= 0; $i--) {\n                    // iterate over the list from the so that nothing can get \"lost\"\n                    $user = $list[$i];\n                    $user->delete();\n                }\n            } else {\n                if ($user->getId()) {\n                    $user->delete();\n                }\n            }\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/update\", name=\"pimcore_admin_user_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function updateAction(Request $request)\n    {\n        $user = User\\UserRole::getById((int)$request->get('id'));\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        if ($request->get('data')) {\n            $values = $this->decodeJson($request->get('data'), true);\n\n            if (!empty($values['password'])) {\n                if (strlen($values['password']) < 10) {\n                    throw new \\Exception('Passwords have to be at least 10 characters long');\n                }\n                $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['password']);\n            }\n\n            // check if there are permissions transmitted, if so reset them all to false (they will be set later)\n            foreach ($values as $key => $value) {\n                if (strpos($key, 'permission_') === 0) {\n                    if (method_exists($user, 'setAllAclToFalse')) {\n                        $user->setAllAclToFalse();\n                    }\n\n                    break;\n                }\n            }\n\n            if ($user instanceof User && isset($values['2fa_required'])) {\n                $user->setTwoFactorAuthentication('required', (bool) $values['2fa_required']);\n            }\n\n            $user->setValues($values);\n\n            // only admins are allowed to create admin users\n            // if the logged in user isn't an admin, set admin always to false\n            if ($user instanceof User && !$this->getAdminUser()->isAdmin()) {\n                $user->setAdmin(false);\n            }\n\n            // check for permissions\n            $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n            $availableUserPermissions = $availableUserPermissionsList->load();\n\n            foreach ($availableUserPermissions as $permission) {\n                if (isset($values['permission_' . $permission->getKey()])) {\n                    $user->setPermission($permission->getKey(), (bool) $values['permission_' . $permission->getKey()]);\n                }\n            }\n\n            // check for workspaces\n            if ($request->get('workspaces')) {\n                $processedPaths = ['object' => [], 'asset' => [], 'document' => []]; //array to find if there are multiple entries for a path\n                $workspaces = $this->decodeJson($request->get('workspaces'), true);\n                foreach ($workspaces as $type => $spaces) {\n                    $newWorkspaces = [];\n                    foreach ($spaces as $space) {\n                        if (in_array($space['path'], $processedPaths[$type])) {\n                            throw new \\Exception('Error saving workspaces as multiple entries found for path \"' . $space['path'] .'\" in '.$this->trans((string)$type) . 's');\n                        }\n\n                        $element = Element\\Service::getElementByPath($type, $space['path']);\n                        if ($element) {\n                            $className = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . Element\\Service::getBaseClassNameForElement($type);\n                            $workspace = new $className();\n                            $workspace->setValues($space);\n\n                            $workspace->setCid($element->getId());\n                            $workspace->setCpath($element->getRealFullPath());\n                            $workspace->setUserId($user->getId());\n\n                            $newWorkspaces[] = $workspace;\n                            $processedPaths[$type][] = $space['path'];\n                        }\n                    }\n                    $user->{'setWorkspaces' . ucfirst($type)}($newWorkspaces);\n                }\n            }\n        }\n\n        if ($user instanceof User && $request->get('keyBindings')) {\n            $keyBindings = json_decode($request->get('keyBindings'), true);\n            $tmpArray = [];\n            foreach ($keyBindings as $action => $item) {\n                $tmpArray[] = json_decode($item, true);\n            }\n            $tmpArray = array_values(array_filter($tmpArray));\n            $tmpArray = User::strictKeybinds($tmpArray);\n            $tmpArray = json_encode($tmpArray);\n\n            $user->setKeyBindings($tmpArray);\n        }\n\n        $user->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/get\", name=\"pimcore_admin_user_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getAction(Request $request)\n    {\n        $userId = (int)$request->get('id');\n        if ($userId < 1) {\n            throw $this->createNotFoundException();\n        }\n\n        $user = User::getById($userId);\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $user->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $wKey => $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                    $workspaces[$wKey] = $workspace->getObjectVars();\n                }\n            }\n            $user->{'setWorkspaces' . ucfirst($type)}($workspaces);\n        }\n\n        // object <=> user dependencies\n        $userObjects = DataObject\\Service::getObjectsReferencingUser($user->getId());\n        $userObjectData = [];\n        $hasHidden = false;\n\n        foreach ($userObjects as $o) {\n            if ($o->isAllowed('list')) {\n                $userObjectData[] = [\n                    'path' => $o->getRealFullPath(),\n                    'id' => $o->getId(),\n                    'subtype' => $o->getClass()->getName(),\n                ];\n            } else {\n                $hasHidden = true;\n            }\n        }\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n\n        $availableUserPermissionsData = [];\n        if (is_array($availableUserPermissions)) {\n            foreach ($availableUserPermissions as $availableUserPermission) {\n                $availableUserPermissionsData[] = $availableUserPermission->getObjectVars();\n            }\n        }\n\n        // get available roles\n        $list = new User\\Role\\Listing();\n        $list->setCondition('`type` = ?', ['role']);\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = [$role->getId(), $role->getName()];\n            }\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $userData['roles'] =  array_map('intval', $user->getRoles());\n        $userData['docTypes'] =  $user->getDocTypes();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['twoFactorAuthentication']['isActive'] = ($user->getTwoFactorAuthentication('enabled') || $user->getTwoFactorAuthentication('secret'));\n        unset($userData['password']);\n        unset($userData['twoFactorAuthentication']['secret']);\n        $userData['hasImage'] = $user->hasImage();\n\n        $availablePerspectives = \\Pimcore\\Perspective\\Config::getAvailablePerspectives(null);\n\n        return $this->adminJson([\n            'success' => true,\n            'user' => $userData,\n            'roles' => $roles,\n            'permissions' => $user->generatePermissionList(),\n            'availablePermissions' => $availableUserPermissionsData,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages(),\n            'objectDependencies' => [\n                'hasHidden' => $hasHidden,\n                'dependencies' => $userObjectData,\n            ],\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-minimal\", name=\"pimcore_admin_user_getminimal\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getMinimalAction(Request $request)\n    {\n        $user = User::getById((int)$request->get('id'));\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        $minimalUserData['id'] = $user->getId();\n        $minimalUserData['admin'] = $user->isAdmin();\n        $minimalUserData['active'] = $user->isActive();\n        $minimalUserData['permissionInfo']['assets'] = $user->isAllowed('assets');\n        $minimalUserData['permissionInfo']['documents'] = $user->isAllowed('documents');\n        $minimalUserData['permissionInfo']['objects'] = $user->isAllowed('objects');\n\n        return $this->adminJson($minimalUserData);\n    }\n\n    /**\n     * @Route(\"/user/upload-current-user-image\", name=\"pimcore_admin_user_uploadcurrentuserimage\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function uploadCurrentUserImageAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                return $this->uploadImageAction($request);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/update-current-user\", name=\"pimcore_admin_user_updatecurrentuser\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                $values = $this->decodeJson($request->get('data'), true);\n\n                unset($values['name']);\n                unset($values['id']);\n                unset($values['admin']);\n                unset($values['permissions']);\n                unset($values['roles']);\n                unset($values['active']);\n\n                if (!empty($values['new_password'])) {\n                    $oldPasswordCheck = false;\n\n                    if (empty($values['old_password'])) {\n                        // if the user want to reset the password, the old password isn't required\n                        $oldPasswordCheck = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n                            if ($adminSession->get('password_reset')) {\n                                return true;\n                            }\n\n                            return false;\n                        });\n                    } else {\n                        // the password has to match\n                        $checkUser = Tool\\Authentication::authenticatePlaintext($user->getName(), $values['old_password']);\n                        if ($checkUser) {\n                            $oldPasswordCheck = true;\n                        }\n                    }\n\n                    if (strlen($values['new_password']) < 10) {\n                        throw new \\Exception('Passwords have to be at least 10 characters long');\n                    }\n\n                    if ($oldPasswordCheck && $values['new_password'] == $values['retype_password']) {\n                        $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['new_password']);\n                    } else {\n                        return $this->adminJson(['success' => false, 'message' => 'password_cannot_be_changed']);\n                    }\n                }\n\n                $user->setValues($values);\n\n                if ($request->get('keyBindings')) {\n                    $keyBindings = json_decode($request->get('keyBindings'), true);\n                    $tmpArray = [];\n                    foreach ($keyBindings as $action => $item) {\n                        $tmpArray[] = json_decode($item, true);\n                    }\n                    $tmpArray = array_values(array_filter($tmpArray));\n                    $tmpArray = json_encode($tmpArray);\n\n                    $user->setKeyBindings($tmpArray);\n                }\n\n                $user->save();\n\n                return $this->adminJson(['success' => true]);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/get-current-user\", name=\"pimcore_admin_user_getcurrentuser\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n\n        $list = new User\\Permission\\Definition\\Listing();\n        $definitions = $list->load();\n\n        foreach ($definitions as $definition) {\n            $user->setPermission($definition->getKey(), $user->isAllowed($definition->getKey()));\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['keyBindings'] = $user->getKeyBindings();\n\n        unset($userData['password']);\n        $userData['twoFactorAuthentication'] = $user->getTwoFactorAuthentication();\n        unset($userData['twoFactorAuthentication']['secret']);\n        $userData['twoFactorAuthentication']['isActive'] = $user->getTwoFactorAuthentication('enabled') && $user->getTwoFactorAuthentication('secret');\n        $userData['hasImage'] = $user->hasImage();\n\n        $userData['isPasswordReset'] = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            return $adminSession->get('password_reset');\n        });\n\n        $response = new Response('pimcore.currentuser = ' . $this->encodeJson($userData));\n        $response->headers->set('Content-Type', 'text/javascript');\n\n        return $response;\n    }\n\n    // ROLES\n\n    /**\n     * @Route(\"/user/role-tree-get-childs-by-id\", name=\"pimcore_admin_user_roletreegetchildsbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleTreeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Role\\Listing();\n        $list->setCondition('parentId = ?', (int)$request->get('node'));\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = $this->getRoleTreeNodeConfig($role);\n            }\n        }\n\n        return $this->adminJson($roles);\n    }\n\n    /**\n     * @param User\\Role|User\\Role\\Folder $role\n     *\n     * @return array\n     */\n    protected function getRoleTreeNodeConfig($role)\n    {\n        $tmpUser = [\n            'id' => $role->getId(),\n            'text' => $role->getName(),\n            'elementType' => 'role',\n            'qtipCfg' => [\n                'title' => 'ID: ' . $role->getId(),\n            ],\n        ];\n\n        // set type specific settings\n        if ($role instanceof User\\Role\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($role->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_roles';\n            $tmpUser['allowChildren'] = false;\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/role-get\", name=\"pimcore_admin_user_roleget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleGetAction(Request $request)\n    {\n        $role = User\\Role::getById((int)$request->get('id'));\n\n        if (!$role) {\n            throw $this->createNotFoundException();\n        }\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $role->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $wKey => $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                    $workspaces[$wKey] = $workspace->getObjectVars();\n                }\n            }\n            $role->{'setWorkspaces' . ucfirst($type)}($workspaces);\n        }\n\n        $replaceFn = function ($value) {\n            return $value->getObjectVars();\n        };\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n        $availableUserPermissions = array_map($replaceFn, $availableUserPermissions);\n\n        $availablePerspectives = \\Pimcore\\Perspective\\Config::getAvailablePerspectives(null);\n\n        return $this->adminJson([\n            'success' => true,\n            'role' => $role->getObjectVars(),\n            'permissions' => $role->generatePermissionList(),\n            'classes' => $role->getClasses(),\n            'docTypes' => $role->getDocTypes(),\n            'availablePermissions' => $availableUserPermissions,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/upload-image\", name=\"pimcore_admin_user_uploadimage\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function uploadImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($userObj->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        $userObj->setImage($_FILES['Filedata']['tmp_name']);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/user/delete-image\", name=\"pimcore_admin_user_deleteimage\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function deleteImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($userObj->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        $userObj->setImage(null);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/renew-2fa-qr-secret\", name=\"pimcore_admin_user_renew2fasecret\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param GoogleAuthenticatorInterface $twoFactor\n     *\n     * @return BinaryFileResponse\n     */\n    public function renew2FaSecretAction(Request $request, GoogleAuthenticatorInterface $twoFactor)\n    {\n        $user = $this->getAdminUser();\n        $proxyUser = $this->getAdminUser(true);\n\n        $newSecret = $twoFactor->generateSecret();\n        $user->setTwoFactorAuthentication('enabled', true);\n        $user->setTwoFactorAuthentication('type', 'google');\n        $user->setTwoFactorAuthentication('secret', $newSecret);\n        $user->save();\n\n        Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            Tool\\Session::regenerateId();\n            $adminSession->set('2fa_required', true);\n        });\n\n        $url = $twoFactor->getQRContent($proxyUser);\n\n        $result = Builder::create()\n            ->writer(new PngWriter())\n            ->data($url)\n            ->size(200)\n            ->build();\n\n        $qrCodeFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/qr-code-' . uniqid() . '.png';\n        $result->saveToFile($qrCodeFile);\n\n        return new BinaryFileResponse($qrCodeFile);\n    }\n\n    /**\n     * @Route(\"/user/disable-2fa\", name=\"pimcore_admin_user_disable2fasecret\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function disable2FaSecretAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        $success = false;\n\n        if (!$user->getTwoFactorAuthentication('required')) {\n            $user->setTwoFactorAuthentication([]);\n            $user->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/reset-2fa-secret\", name=\"pimcore_admin_user_reset2fasecret\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function reset2FaSecretAction(Request $request)\n    {\n        $user = User::getById((int)$request->get('id'));\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n        $user->setTwoFactorAuthentication('enabled', false);\n        $user->setTwoFactorAuthentication('secret', '');\n        $user->save();\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-image\", name=\"pimcore_admin_user_getimage\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n        $stream = $userObj->getImage();\n\n        return new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => 'image/png',\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-token-login-link\", name=\"pimcore_admin_user_gettokenloginlink\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getTokenLoginLinkAction(Request $request)\n    {\n        $user = User::getById((int) $request->get('id'));\n\n        if (!$user) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_invalid_user_error'),\n            ], Response::HTTP_NOT_FOUND);\n        }\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_as_admin_non_admin_user_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        if (empty($user->getPassword())) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_no_password_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        $token = Tool\\Authentication::generateToken($user->getName());\n        $link = $this->generateCustomUrl([\n            'token' => $token,\n        ]);\n\n        return $this->adminJson([\n            'success' => true,\n            'link' => $link,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/search\", name=\"pimcore_admin_user_search\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function searchAction(Request $request)\n    {\n        $q = '%' . $request->get('query') . '%';\n\n        $list = new User\\Listing();\n        $list->setCondition('name LIKE ? OR firstname LIKE ? OR lastname LIKE ? OR email LIKE ? OR id = ?', [$q, $q, $q, $q, (int)$request->get('query')]);\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user instanceof User && $user->getId() && $user->getName() != 'system') {\n                    $users[] = [\n                        'id' => $user->getId(),\n                        'name' => $user->getName(),\n                        'email' => $user->getEmail(),\n                        'firstname' => $user->getFirstname(),\n                        'lastname' => $user->getLastname(),\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'users' => $users,\n        ]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // check permissions\n        $unrestrictedActions = [\n            'getCurrentUserAction', 'updateCurrentUserAction', 'getAvailablePermissionsAction', 'getMinimalAction',\n            'getImageAction', 'uploadCurrentUserImageAction', 'disable2FaSecretAction', 'renew2FaSecretAction',\n            'getUsersForSharingAction', 'getRolesForSharingAction',\n        ];\n\n        $this->checkActionPermission($event, 'users', $unrestrictedActions);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @Route(\"/user/get-users-for-sharing\", name=\"pimcore_admin_user_getusersforsharing\", methods={\"GET\"})\n     */\n    public function getUsersForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getUsersAction($request);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @Route(\"/user/get-roles-for-sharing\", name=\"pimcore_admin_user_getrolesforsharing\", methods={\"GET\"}))\n     */\n    public function getRolesForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getRolesAction($request);\n    }\n\n    /**\n     * @Route(\"/user/get-users\", name=\"pimcore_admin_user_getusers\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getUsersAction(Request $request)\n    {\n        $users = [];\n\n        // get available user\n        $list = new \\Pimcore\\Model\\User\\Listing();\n\n        $conditions = [ 'type = \"user\"' ];\n\n        if (!$request->get('include_current_user')) {\n            $conditions[] = 'id != ' . $this->getAdminUser()->getId();\n        }\n\n        $list->setCondition(implode(' AND ', $conditions));\n\n        $list->load();\n        $userList = $list->getUsers();\n\n        foreach ($userList as $user) {\n            if (!$request->get('permission') || $user->isAllowed($request->get('permission'))) {\n                $users[] = [\n                    'id' => $user->getId(),\n                    'label' => $user->getUsername(),\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($users), 'data' => $users]);\n    }\n\n    /**\n     * @Route(\"/user/get-roles\", name=\"pimcore_admin_user_getroles\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getRolesAction(Request $request)\n    {\n        $roles = [];\n        $list = new \\Pimcore\\Model\\User\\Role\\Listing();\n\n        $list->setCondition('type = \"role\"');\n        $list->load();\n        $roleList = $list->getRoles();\n\n        foreach ($roleList as $role) {\n            if (!$request->get('permission') || in_array($request->get('permission'), $role->getPermissions())) {\n                $roles[] = [\n                    'id' => $role->getId(),\n                    'label' => $role->getName(),\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($roles), 'data' => $roles]);\n    }\n\n    /**\n     * @Route(\"/user/get-default-key-bindings\", name=\"pimcore_admin_user_getdefaultkeybindings\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getDefaultKeyBindingsAction(Request $request)\n    {\n        $data = User::getDefaultKeyBindings();\n\n        return $this->adminJson(['success' => true, 'data' => $data]);\n    }\n\n    /**\n     * @Route(\"/user/invitationlink\", name=\"pimcore_admin_user_invitationlink\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function invitationLinkAction(Request $request)\n    {\n        $success = false;\n        $message = '';\n\n        if ($username = $request->get('username')) {\n            $user = User::getByName($username);\n            if ($user instanceof User) {\n                if (!$user->isActive()) {\n                    $message .= 'User inactive  <br />';\n                }\n\n                if (!$user->getEmail()) {\n                    $message .= 'User has no email address <br />';\n                }\n            } else {\n                $message .= 'User unknown <br />';\n            }\n\n            if (empty($message)) {\n                //generate random password if user has no password\n                if (!$user->getPassword()) {\n                    $user->setPassword(bin2hex(random_bytes(16)));\n                    $user->save();\n                }\n\n                $token = Tool\\Authentication::generateToken($user->getName());\n                $loginUrl = $this->generateCustomUrl([\n                    'token' => $token,\n                    'reset' => true,\n                ]);\n\n                try {\n                    $mail = Tool::getMail([$user->getEmail()], 'Pimcore login invitation for ' . Tool::getHostname());\n                    $mail->setIgnoreDebugMode(true);\n                    $mail->text(\"Login to pimcore and change your password using the following link. This temporary login link will expire in  24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                    $mail->send();\n\n                    $success = true;\n                    $message = sprintf($this->trans('invitation_link_sent'), $user->getEmail());\n                } catch (\\Exception $e) {\n                    $message .= 'could not send email';\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'message' => $message,\n        ]);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return int\n     */\n    protected function getUserId(Request $request)\n    {\n        if ($request->get('id')) {\n            if ($this->getAdminUser()->getId() != $request->get('id')) {\n                $this->checkPermission('users');\n            }\n\n            return (int) $request->get('id');\n        }\n\n        return $this->getAdminUser()->getId();\n    }\n\n    /**\n     *\n     * @param array $params\n     * @param string $fallbackUrl\n     * @param int $referenceType //UrlGeneratorInterface::ABSOLUTE_URL, ABSOLUTE_PATH, RELATIVE_PATH, NETWORK_PATH\n     *\n     * @return string The generated URL\n     */\n    private function generateCustomUrl(array $params, $fallbackUrl = 'pimcore_admin_login_check', $referenceType = UrlGeneratorInterface::ABSOLUTE_URL): string\n    {\n        try {\n            $adminEntryPointRoute = $this->getParameter('pimcore_admin.custom_admin_route_name');\n\n            //try to generate invitation link for custom admin point\n            $loginUrl = $this->generateUrl($adminEntryPointRoute, $params, $referenceType);\n        } catch (\\Exception $e) {\n            //use default login check for invitation link\n            $loginUrl = $this->generateUrl($fallbackUrl, $params, $referenceType);\n        }\n\n        return $loginUrl;\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.profile.panel\");\npimcore.settings.profile.panel = Class.create({\n\n    initialize: function () {\n\n        this.getTabPanel();\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"my_profile\",\n                title: t(\"my_profile\"),\n                iconCls: \"pimcore_icon_user\",\n                border: false,\n                closable: true,\n                layout: \"fit\",\n                bodyStyle: \"padding: 10px;\",\n                items: [this.getEditPanel()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"my_profile\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"profile\");\n            }.bind(this));\n\n\n            pimcore.layout.refresh();\n\n        }\n\n        return this.panel;\n    },\n\n    getEditPanel: function () {\n        this.forceReloadOnSave = false;\n        this.currentUser = pimcore.currentuser;\n\n        var passwordCheck = function (el) {\n            if (/^(?=.*\\d)(?=.*[a-zA-Z]).{6,100}$/.test(el.getValue())) {\n                el.getEl().addCls(\"password_valid\");\n                el.getEl().removeCls(\"password_invalid\");\n            } else {\n                el.getEl().addCls(\"password_invalid\");\n                el.getEl().removeCls(\"password_valid\");\n            }\n        };\n\n        var generalItems = [],\n            baseItems = [];\n\n        baseItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"firstname\"),\n            name: \"firstname\",\n            value: this.currentUser.firstname,\n            width: 400\n        });\n\n        baseItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"lastname\"),\n            name: \"lastname\",\n            value: this.currentUser.lastname,\n            width: 400\n        });\n\n        baseItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"email\"),\n            name: \"email\",\n            value: this.currentUser.email,\n            width: 400\n        });\n\n        baseItems.push({\n            xtype: 'combo',\n            fieldLabel: t('language'),\n            typeAhead: true,\n            value: this.currentUser.language,\n            mode: 'local',\n            name: \"language\",\n            listWidth: 100,\n            store: pimcore.globalmanager.get(\"pimcorelanguages\"),\n            displayField: 'display',\n            valueField: 'language',\n            forceSelection: true,\n            triggerAction: 'all',\n            hiddenName: 'language',\n            listeners: {\n                change: function () {\n                    this.forceReloadOnSave = true;\n                }.bind(this),\n                select: function () {\n                    this.forceReloadOnSave = true;\n                }.bind(this)\n            }\n        });\n\n        baseItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"show_welcome_screen\"),\n            name: \"welcomescreen\",\n            checked: this.currentUser.welcomescreen\n        });\n\n        baseItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"memorize_tabs\"),\n            name: \"memorizeTabs\",\n            checked: this.currentUser.memorizeTabs\n        });\n\n        generalItems.push({\n            xtype: \"fieldset\",\n            title: t('general_settings'),\n            items: baseItems\n        });\n\n        var passwordField = new Ext.form.field.Text({\n            fieldLabel: t(\"new_password\"),\n            name: \"new_password\",\n            inputType: \"password\",\n            width: 400,\n            enableKeyEvents: true,\n            listeners: {\n                keyup: passwordCheck,\n                afterrender: function (cmp) {\n                    cmp.inputEl.set({\n                        autocomplete: 'new-password'\n                    });\n                }\n            }\n        });\n\n        var retypePasswordField = new Ext.form.field.Text({\n            xtype: \"textfield\",\n            fieldLabel: t(\"retype_password\"),\n            name: \"retype_password\",\n            inputType: \"password\",\n            width: 400,\n            style: \"margin-bottom: 20px;\",\n            enableKeyEvents: true,\n            listeners: {\n                keyup: passwordCheck,\n                afterrender: function (cmp) {\n                    cmp.inputEl.set({\n                        autocomplete: 'new-password'\n                    });\n                }\n            }\n        });\n\n        generalItems.push({\n            xtype: \"fieldset\",\n            title: t(\"change_password\"),\n            items: [{\n                xtype: \"textfield\",\n                fieldLabel: t(\"old_password\"),\n                name: \"old_password\",\n                inputType: \"password\",\n                width: 400,\n                hidden: this.currentUser.isPasswordReset,\n                listeners: {\n                    afterrender: function (cmp) {\n                        cmp.inputEl.set({\n                            autocomplete: 'current-password'\n                        });\n                    }\n                }\n            }, {\n                xtype: \"fieldcontainer\",\n                layout: 'hbox',\n                items: [\n\n                    passwordField,\n                    {\n                        xtype: \"button\",\n                        width: 32,\n                        style: \"margin-left: 8px\",\n                        iconCls: \"pimcore_icon_clear_cache\",\n                        handler: function () {\n\n                            var pass;\n\n                            while (true) {\n                                pass = pimcore.helpers.generatePassword(15);\n                                if (pimcore.helpers.isValidPassword(pass)) {\n                                    break;\n                                }\n                            }\n\n                            passwordField.getEl().down('input').set({type: 'text'});\n\n                            passwordField.setValue(pass);\n                            retypePasswordField.setValue(pass);\n\n                            passwordCheck(passwordField);\n                            passwordCheck(retypePasswordField);\n                        }.bind(this)\n                    }\n                ]\n            }, retypePasswordField]\n        });\n\n        var twoFactorSettings = new pimcore.settings.profile.twoFactorSettings(this.currentUser.twoFactorAuthentication);\n        generalItems.push(twoFactorSettings.getPanel());\n\n        generalItems.push({\n            xtype: \"fieldset\",\n            title: t(\"image\"),\n            width: '100%',\n            items: [\n                {\n                    xtype: \"container\",\n                    items: [{\n                        xtype: \"image\",\n                        id: \"pimcore_profile_image_\" + this.currentUser.id,\n                        src: Routing.generate('pimcore_admin_user_getimage', {id: this.currentUser.id, '_dc': Ext.Date.now()}),\n                        width: 45,\n                        height: 45\n                    }],\n                    style: \"float:left; margin-right: 10px;max-width:45px;\"\n                },\n                {\n                    xtype: \"button\",\n                    text: t(\"upload\"),\n                    handler: function () {\n                        pimcore.helpers.uploadDialog(\n                            Routing.generate('pimcore_admin_user_uploadcurrentuserimage', {id: this.currentUser.id}),\n                            null,\n                            function () {\n                                Ext.getCmp(\"pimcore_profile_delete_image_\" + this.currentUser.id).setVisible(true);\n                                pimcore.helpers.reloadUserImage(this.currentUser.id);\n                                this.currentUser.hasImage = true;\n                            }.bind(this)\n                        );\n                    }.bind(this)\n                },\n                {\n                    xtype: \"button\",\n                    iconCls: \"pimcore_icon_cancel\",\n                    tooltip: t(\"remove\"),\n                    id: \"pimcore_profile_delete_image_\" + this.currentUser.id,\n                    hidden: !this.currentUser.hasImage,\n                    handler: function () {\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_user_deleteimage', {id: this.currentUser.id}),\n                            method: 'DELETE',\n                            success: function() {\n                                Ext.getCmp(\"pimcore_profile_delete_image_\" + this.currentUser.id).setVisible(false);\n                                pimcore.helpers.reloadUserImage(this.currentUser.id);\n                                this.currentUser.hasImage = false;\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                }\n            ]\n        });\n\n        this.editorSettings = new pimcore.settings.user.editorSettings(this, this.currentUser.contentLanguages);\n\n        this.basicPanel = new Ext.form.FormPanel({\n            border: false,\n            items: [{items: generalItems}, this.editorSettings.getPanel()],\n            labelWidth: 130\n        });\n\n\n        this.keyBindings = new pimcore.settings.user.user.keyBindings(this, true);\n\n        this.userPanel = new Ext.Panel({\n            autoScroll: true,\n            items: [this.basicPanel, {\n                xtype: \"fieldset\",\n                collapsible: true,\n                title: t(\"key_bindings\"),\n                items: [this.keyBindings.getPanel()]\n            }],\n            buttons: [\n                {\n                    text: t(\"save\"),\n                    iconCls: \"pimcore_icon_apply\",\n                    handler: this.saveCurrentUser.bind(this)\n                }\n            ]\n        });\n\n\n        return this.userPanel;\n    },\n\n    saveCurrentUser: function () {\n        var values = this.basicPanel.getForm().getFieldValues();\n        var contentLanguages = this.editorSettings.getContentLanguages();\n        values.contentLanguages = contentLanguages;\n\n        if (values[\"new_password\"]) {\n            if (!pimcore.helpers.isValidPassword(values[\"new_password\"]) || values[\"new_password\"] != values[\"retype_password\"]) {\n                delete values[\"new_password\"];\n                delete values[\"retype_password\"];\n                Ext.MessageBox.alert(t('error'), t(\"password_was_not_changed\"));\n            }\n        }\n\n        try {\n            var keyBindings = Ext.encode(this.keyBindings.getValues());\n        } catch (e3) {\n            console.log(e3);\n        }\n\n\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_user_updatecurrentuser'),\n            method: \"PUT\",\n            params: {\n                id: this.currentUser.id,\n                data: Ext.encode(values),\n                keyBindings: keyBindings\n            },\n            success: function (response) {\n                try {\n                    var res = Ext.decode(response.responseText);\n                    if (res.success) {\n\n                        if (this.forceReloadOnSave) {\n                            this.forceReloadOnSave = false;\n\n                            Ext.MessageBox.confirm(t(\"info\"), t(\"reload_pimcore_changes\"), function (buttonValue) {\n                                if (buttonValue == \"yes\") {\n                                    window.location.reload();\n                                }\n                            }.bind(this));\n                        }\n\n                        pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n                        if (contentLanguages) {\n                            pimcore.settings.websiteLanguages = contentLanguages;\n                            pimcore.currentuser.contentLanguages = contentLanguages.join(',');\n                        }\n                    } else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\", t(res.message));\n                    }\n                } catch (e) {\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n                }\n            }.bind(this)\n        });\n    },\n\n    activate: function () {\n        Ext.getCmp(\"pimcore_panel_tabs\").setActiveItem(\"my_profile\");\n    }\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.settings.user.user.settings\");\npimcore.settings.user.user.settings = Class.create({\n\n    initialize: function (userPanel) {\n        this.userPanel = userPanel;\n\n        this.data = this.userPanel.data;\n        this.currentUser = this.data.user;\n    },\n\n    getPanel: function () {\n        var user = pimcore.globalmanager.get(\"user\");\n        this.forceReloadOnSave = false;\n\n        var generalItems = [];\n\n\n        generalItems.push({\n            xtype: 'panel',\n            border: false,\n            layout: 'hbox',\n            items: [\n                {\n                    xtype: \"displayfield\",\n                    fieldLabel: t(\"id\"),\n                    value: this.currentUser.id,\n                    flex: 0.3\n                },\n                {\n                    xtype: \"displayfield\",\n                    fieldLabel: t(\"last_login\"),\n                    value: (this.currentUser.lastLogin ? new Date(this.currentUser.lastLogin * 1000) : ''),\n                    flex: 0.7\n                }\n            ]\n        });\n\n        generalItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"active\"),\n            name: \"active\",\n            disabled: user.id == this.currentUser.id,\n            checked: this.currentUser.active\n        });\n\n        generalItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"username\"),\n            value: this.currentUser.name,\n            width: 400,\n            disabled: true\n        });\n\n        var passwordField = new Ext.form.field.Text({\n            fieldLabel: t(\"password\"),\n            name: \"password\",\n            inputType: \"password\",\n            width: 400,\n            enableKeyEvents: true,\n            listeners: {\n                keyup: function (el) {\n                    this.validatePassword(el);\n                }.bind(this),\n                afterrender: function (cmp) {\n                    cmp.inputEl.set({\n                        autocomplete: 'new-password'\n                    });\n                }\n            }\n        });\n\n\n        generalItems.push({\n            xtype: \"fieldcontainer\",\n            layout: 'hbox',\n\n            items: [passwordField,\n                {\n                    xtype: \"button\",\n                    width: 32,\n                    style: \"margin-left: 8px\",\n                    iconCls: \"pimcore_icon_clear_cache\",\n                    handler: function () {\n\n                        var pass;\n\n                        while (true) {\n                            pass = pimcore.helpers.generatePassword(15);\n                            if (pimcore.helpers.isValidPassword(pass)) {\n                                break;\n                            }\n                        }\n\n                        passwordField.getEl().down('input').set({type: 'text'});\n                        passwordField.setValue(pass);\n                        this.validatePassword(passwordField);\n                    }.bind(this)\n                }\n            ]\n        });\n\n        generalItems.push({\n            xtype: \"container\",\n            itemId: \"password_hint\",\n            html: t(\"password_hint\"),\n            style: \"color: red;\",\n            hidden: true\n        });\n\n\n        generalItems.push({\n            xtype: \"fieldset\",\n            title: t(\"two_factor_authentication\"),\n            items: [{\n                xtype: \"checkbox\",\n                boxLabel: t(\"2fa_required\"),\n                name: \"2fa_required\",\n                checked: this.currentUser[\"twoFactorAuthentication\"]['required']\n            }, {\n                xtype: \"button\",\n                text: t(\"2fa_reset_secret\"),\n                hidden: !this.currentUser['twoFactorAuthentication']['isActive'],\n                handler: function () {\n                    Ext.Ajax.request({\n                        url: Routing.generate('pimcore_admin_user_reset2fasecret'),\n                        method: 'PUT',\n                        params: {\n                            id: this.currentUser.id\n                        },\n                        success: function (response) {\n                            Ext.MessageBox.alert(t(\"2fa_reset_secret\"), t(\"2fa_reset_done\"));\n                        }.bind(this)\n                    });\n                }.bind(this)\n            }]\n        });\n\n        generalItems.push({\n            xtype: \"fieldset\",\n            title: t(\"image\"),\n            items: [\n                {\n                    xtype: \"container\",\n                    items: [{\n                        xtype: \"image\",\n                        id: \"pimcore_user_image_\" + this.currentUser.id,\n                        src: Routing.generate(\n                            'pimcore_admin_user_getimage',\n                            {id: this.currentUser.id, '_dc': Ext.Date.now()}\n                        ),\n                        width: 45,\n                        height: 45\n                    }],\n                },\n                {\n                    xtype: \"button\",\n                    text: t(\"upload\"),\n                    handler: function () {\n                        pimcore.helpers.uploadDialog(\n                            Routing.generate('pimcore_admin_user_uploadimage', {id: this.currentUser.id}),\n                            null,\n                            function () {\n                                Ext.getCmp(\"pimcore_user_delete_image_\" + this.currentUser.id).setVisible(true);\n                                pimcore.helpers.reloadUserImage(this.currentUser.id);\n                                this.currentUser.hasImage = true;\n                            }.bind(this)\n                        );\n                    }.bind(this)\n                },\n                {\n                    xtype: \"button\",\n                    iconCls: \"pimcore_icon_cancel\",\n                    tooltip: t(\"remove\"),\n                    id: \"pimcore_user_delete_image_\" + this.currentUser.id,\n                    hidden: !this.currentUser.hasImage,\n                    handler: function () {\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_user_deleteimage', {id: this.currentUser.id}),\n                            method: 'DELETE',\n                            success: function() {\n                                Ext.getCmp(\"pimcore_user_delete_image_\" + this.currentUser.id).setVisible(false);\n                                pimcore.helpers.reloadUserImage(this.currentUser.id);\n                                this.currentUser.hasImage = false;\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                }\n            ]\n        });\n\n        generalItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"firstname\"),\n            name: \"firstname\",\n            value: this.currentUser.firstname,\n            width: 400\n        });\n        generalItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"lastname\"),\n            name: \"lastname\",\n            value: this.currentUser.lastname,\n            width: 400\n        });\n\n        var emailField = new Ext.form.field.Text({\n            xtype: \"textfield\",\n            fieldLabel: t(\"email\"),\n            name: \"email\",\n            value: this.currentUser.email,\n            width: 400\n        });\n\n        generalItems.push({\n            xtype: \"fieldcontainer\",\n            layout: 'hbox',\n\n            items: [emailField,\n                {\n                    text: t(\"send_invitation_link\"),\n                    xtype: \"button\",\n                    style: \"margin-left: 8px\",\n                    iconCls: \"pimcore_nav_icon_email\",\n                    hidden: (this.currentUser.lastLogin > 0) || (user.id == this.currentUser.id),\n                    handler: function () {\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_user_invitationlink'),\n                            method: 'POST',\n                            ignoreErrors: true,\n                            params: {\n                                username: this.currentUser.name\n                            },\n                            success: function (response) {\n                                var res = Ext.decode(response.responseText);\n                                if (res.success) {\n                                    Ext.MessageBox.alert(t('invitation_sent'), res.message);\n                                } else {\n                                    Ext.MessageBox.alert(t('error'), res.message);\n                                }\n                            }.bind(this),\n                            failure: function (response) {\n                                var message = t(\"error_general\");\n\n                                try {\n                                    var json = Ext.decode(response.responseText);\n                                    if (json.message) {\n\n                                        message = json.message;\n                                    }\n                                } catch (e) {\n                                }\n\n                                pimcore.helpers.showNotification(t(\"error\"), message, \"error\");\n                            }\n                        });\n                    }.bind(this)\n                }\n            ]\n        });\n\n        generalItems.push({\n            xtype: 'combo',\n            fieldLabel: t('language'),\n            typeAhead: true,\n            value: this.currentUser.language,\n            mode: 'local',\n            listWidth: 100,\n            store: pimcore.globalmanager.get(\"pimcorelanguages\"),\n            displayField: 'display',\n            valueField: 'language',\n            forceSelection: true,\n            triggerAction: 'all',\n            name: 'language',\n            listeners: {\n                change: function () {\n                    this.forceReloadOnSave = true;\n                }.bind(this),\n                select: function () {\n                    this.forceReloadOnSave = true;\n                }.bind(this)\n            }\n        });\n\n        var rolesStore = Ext.create('Ext.data.ArrayStore', {\n            fields: [\"id\", \"name\"],\n            data: this.data.roles\n        });\n\n        this.roleField = Ext.create('Ext.ux.form.MultiSelect', {\n            name: \"roles\",\n            triggerAction: \"all\",\n            editable: false,\n            fieldLabel: t(\"roles\"),\n            width: 400,\n            minHeight: 100,\n            store: rolesStore,\n            displayField: \"name\",\n            valueField: \"id\",\n            value: this.currentUser.roles,\n            hidden: this.currentUser.admin\n        });\n\n        generalItems.push(this.roleField);\n\n        var perspectivesStore = Ext.create('Ext.data.JsonStore', {\n            fields: [\n                \"name\",\n                {\n                    name:\"translatedName\",\n                    convert: function (v, rec) {\n                        return t(rec.data.name);\n                    },\n                    depends : ['name']\n                }\n            ],\n            data: this.data.availablePerspectives\n        });\n\n        this.perspectivesField = Ext.create('Ext.ux.form.MultiSelect', {\n            name: \"perspectives\",\n            triggerAction: \"all\",\n            editable: false,\n            fieldLabel: t(\"perspectives\"),\n            width: 400,\n            minHeight: 100,\n            store: perspectivesStore,\n            displayField: \"translatedName\",\n            valueField: \"name\",\n            value: this.currentUser.perspectives ? this.currentUser.perspectives.join(\",\") : null,\n            hidden: this.currentUser.admin\n        });\n\n        generalItems.push(this.perspectivesField);\n\n\n        generalItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"show_welcome_screen\"),\n            name: \"welcomescreen\",\n            checked: this.currentUser.welcomescreen\n        });\n\n        generalItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"memorize_tabs\"),\n            name: \"memorizeTabs\",\n            checked: this.currentUser.memorizeTabs\n        });\n\n        generalItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"allow_dirty_close\"),\n            name: \"allowDirtyClose\",\n            checked: this.currentUser.allowDirtyClose\n        });\n\n        generalItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"show_close_warning\"),\n            name: \"closeWarning\",\n            checked: this.currentUser.closeWarning\n        });\n\n\n        this.generalSet = new Ext.form.FieldSet({\n            collapsible: true,\n            title: t(\"general\"),\n            items: generalItems\n        });\n\n\n        var adminItems = [];\n\n        if (user.admin) {\n            // only admins are allowed to create new admin users and to manage API related settings\n            adminItems.push({\n                xtype: \"checkbox\",\n                boxLabel: t(\"admin\"),\n                name: \"admin\",\n                disabled: user.id == this.currentUser.id,\n                checked: this.currentUser.admin,\n                handler: function (box, checked) {\n                    if (checked == true) {\n                        this.roleField.hide();\n                        this.typesSet.hide();\n                        this.permissionsSet.hide();\n                        this.userPanel.workspaces.disable();\n                        this.websiteTranslationSettings.getPanel().hide();\n                    } else {\n                        this.roleField.show();\n                        this.typesSet.show();\n                        this.permissionsSet.show();\n                        this.userPanel.workspaces.enable();\n                        this.websiteTranslationSettings.getPanel().show();\n                    }\n                }.bind(this)\n            });\n\n            adminItems.push({\n                xtype: \"displayfield\",\n                hideLabel: true,\n                width: 600,\n                value: t(\"user_admin_description\"),\n                cls: \"pimcore_extra_label_bottom\"\n            });\n        }\n\n        adminItems.push({\n            xtype: \"button\",\n            text: t(\"login_as_this_user\"),\n            iconCls: \"pimcore_icon_user\",\n            disabled: user.id == this.currentUser.id,\n            handler: function () {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_user_gettokenloginlink'),\n                    ignoreErrors: true,\n                    params: {\n                        id: this.currentUser.id\n                    },\n                    success: function (response) {\n                        var res = Ext.decode(response.responseText);\n                        if (res[\"link\"]) {\n                            Ext.MessageBox.show({\n                                title: t(\"login_as_this_user\"),\n                                msg: t(\"login_as_this_user_description\")\n                                    + '<br /><br /><textarea style=\"width:100%;height:90px;\" readonly=\"readonly\">' + res[\"link\"] + \"</textarea>\",\n                                buttons: Ext.MessageBox.YESNO,\n                                buttonText: {\n                                    yes: t(\"copy\") + ' & ' + t(\"close\"),\n                                    no: t(\"close\")\n                                },\n                                scope: this,\n                                fn: function (result) {\n                                    if (result === 'yes') {\n                                        pimcore.helpers.copyStringToClipboard(res[\"link\"]);\n                                    }\n                                }\n                            });\n                        }\n                    },\n                    failure: function (response) {\n                        var message = t(\"error_general\");\n\n                        try {\n                            var json = Ext.decode(response.responseText);\n                            if (json.message) {\n\n                                message = json.message;\n                            }\n                        } catch (e) {\n                        }\n\n                        pimcore.helpers.showNotification(t(\"error\"), message, \"error\");\n                    }\n                });\n            }.bind(this)\n        });\n\n        this.adminSet = new Ext.form.FieldSet({\n            collapsible: true,\n            title: t(\"admin\"),\n            items: adminItems\n        });\n\n        var itemsPerSection = [];\n        var sectionArray = [];\n        for (var i = 0; i < this.data.availablePermissions.length; i++) {\n            let section = this.data.availablePermissions[i].category;\n            if (!section) {\n                section = \"default\";\n            }\n            if (!itemsPerSection[section]) {\n                itemsPerSection[section] = [];\n            }\n            itemsPerSection[section].push({\n                xtype: \"checkbox\",\n                boxLabel: t(this.data.availablePermissions[i].key),\n                name: \"permission_\" + this.data.availablePermissions[i].key,\n                checked: this.data.permissions[this.data.availablePermissions[i].key],\n                labelWidth: 200\n            });\n        }\n        for (var key in itemsPerSection) {\n            let title = t(\"permissions\");\n            if (key && key != \"default\") {\n                title += \" \" + t(key);\n            }\n\n            itemsPerSection[key].sort((a, b) => a.boxLabel.localeCompare(b.boxLabel));\n\n            sectionArray.push(new Ext.form.FieldSet({\n                collapsible: true,\n                title: title,\n                items: itemsPerSection[key],\n                collapsed: true,\n            }));\n        }\n\n        this.permissionsSet = new Ext.container.Container({\n            items: sectionArray,\n            hidden: this.currentUser.admin\n        });\n\n        this.typesSet = new Ext.form.FieldSet({\n            collapsible: true,\n            title: t(\"allowed_types_to_create\") + \" (\" + t(\"defaults_to_all\") + \")\",\n            items: [\n                Ext.create('Ext.ux.form.MultiSelect', {\n                    name: \"docTypes\",\n                    triggerAction: \"all\",\n                    editable: false,\n                    fieldLabel: t(\"document_types\"),\n                    width: 400,\n                    valueField: \"id\",\n                    store: pimcore.globalmanager.get(\"document_types_store\"),\n                    value: this.currentUser.docTypes,\n                    listConfig: {\n                        itemTpl: new Ext.XTemplate('{[this.sanitize(values.translatedName)]}',\n                            {\n                                sanitize: function (name) {\n                                    return Ext.util.Format.htmlEncode(name);\n                                }\n                            }\n                        )\n                    }\n                }),\n                Ext.create('Ext.ux.form.MultiSelect', {\n                    name: \"classes\",\n                    triggerAction: \"all\",\n                    editable: false,\n                    fieldLabel: t(\"classes\"),\n                    width: 400,\n                    displayField: \"text\",\n                    valueField: \"id\",\n                    store: pimcore.globalmanager.get(\"object_types_store\"),\n                    value: this.currentUser.classes\n                })],\n            hidden: this.currentUser.admin\n        });\n\n        this.editorSettings = new pimcore.settings.user.editorSettings(this, this.data.user.contentLanguages);\n        this.websiteTranslationSettings = new pimcore.settings.user.websiteTranslationSettings(this, this.data.validLanguages, this.data.user);\n\n        var websiteSettingsPanel = this.websiteTranslationSettings.getPanel();\n        if (this.currentUser.admin) {\n            websiteSettingsPanel.hide();\n        }\n\n        this.panel = new Ext.form.FormPanel({\n            title: t(\"settings\"),\n            items: [this.generalSet, this.adminSet, this.permissionsSet, this.typesSet, this.editorSettings.getPanel(), websiteSettingsPanel],\n            bodyStyle: \"padding:10px;\",\n            autoScroll: true\n        });\n\n        return this.panel;\n    },\n\n    getValues: function () {\n\n        var values = this.panel.getForm().getFieldValues();\n        if (values[\"password\"]) {\n            if (!pimcore.helpers.isValidPassword(values[\"password\"])) {\n                delete values[\"password\"];\n                Ext.MessageBox.alert(t('error'), t(\"password_was_not_changed\"));\n            }\n        }\n\n        values.contentLanguages = this.editorSettings.getContentLanguages();\n        values.websiteTranslationLanguagesEdit = this.websiteTranslationSettings.getLanguages(\"edit\");\n        values.websiteTranslationLanguagesView = this.websiteTranslationSettings.getLanguages(\"view\");\n\n        return values;\n    },\n\n    validatePassword: function (el) {\n\n        var theEl = el.getEl();\n        var hintItem = this.generalSet.getComponent(\"password_hint\");\n\n        if (pimcore.helpers.isValidPassword(el.getValue())) {\n            theEl.addCls(\"password_valid\");\n            theEl.removeCls(\"password_invalid\");\n            hintItem.hide();\n        } else {\n            theEl.addCls(\"password_invalid\");\n            theEl.removeCls(\"password_valid\");\n            hintItem.show();\n        }\n\n        if (el.getValue().length < 1) {\n            theEl.removeCls(\"password_valid\");\n            theEl.removeCls(\"password_invalid\");\n            hintItem.hide();\n        }\n\n        this.generalSet.updateLayout();\n    }\n\n});\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Endroid\\QrCode\\Builder\\Builder;\nuse Endroid\\QrCode\\Writer\\PngWriter;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Tool;\nuse Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Google\\GoogleAuthenticatorInterface;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\n/**\n * @internal\n */\nclass UserController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/user/tree-get-childs-by-id\", name=\"pimcore_admin_user_treegetchildsbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Listing();\n        $list->setCondition('parentId = ?', (int)$request->get('node'));\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user->getId() && $user->getName() != 'system') {\n                    $users[] = $this->getTreeNodeConfig($user);\n                }\n            }\n        }\n\n        return $this->adminJson($users);\n    }\n\n    /**\n     * @param User|User\\Folder $user\n     *\n     * @return array\n     */\n    protected function getTreeNodeConfig($user)\n    {\n        $tmpUser = [\n            'id' => $user->getId(),\n            'text' => $user->getName(),\n            'elementType' => 'user',\n            'type' => $user->getType(),\n            'qtipCfg' => [\n                'title' => 'ID: ' . $user->getId(),\n            ],\n        ];\n\n        // set type specific settings\n        if ($user instanceof User\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($user->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_user';\n            if (!$user->getActive()) {\n                $tmpUser['cls'] = ' pimcore_unpublished';\n            }\n            $tmpUser['allowChildren'] = false;\n            $tmpUser['admin'] = $user->isAdmin();\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/add\", name=\"pimcore_admin_user_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        try {\n            $type = $request->get('type');\n\n            $className = User\\Service::getClassNameForType($type);\n            $user = $className::create([\n                'parentId' => (int)$request->get('parentId'),\n                'name' => trim($request->get('name')),\n                'password' => '',\n                'active' => $request->get('active'),\n            ]);\n\n            if ($request->get('rid')) {\n                $rid = $request->get('rid');\n                $rObject = $className::getById($rid);\n                if ($rObject) {\n                    if ($type == 'user' || $type == 'role') {\n                        $user->setParentId($rObject->getParentId());\n                        if ($rObject->getClasses()) {\n                            $user->setClasses(implode(',', $rObject->getClasses()));\n                        }\n                        if ($rObject->getDocTypes()) {\n                            $user->setDocTypes(implode(',', $rObject->getDocTypes()));\n                        }\n\n                        $keys = ['asset', 'document', 'object'];\n                        foreach ($keys as $key) {\n                            $getter = 'getWorkspaces' . ucfirst($key);\n                            $setter = 'setWorkspaces' . ucfirst($key);\n                            $workspaces = $rObject->$getter();\n                            $clonedWorkspaces = [];\n                            if (is_array($workspaces)) {\n                                /** @var User\\Workspace\\AbstractWorkspace $workspace */\n                                foreach ($workspaces as $workspace) {\n                                    $vars = $workspace->getObjectVars();\n                                    if ($key == 'object') {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\DataObject';\n                                    } else {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . ucfirst($key);\n                                    }\n                                    $newWorkspace = new $workspaceClass();\n                                    foreach ($vars as $varKey => $varValue) {\n                                        $newWorkspace->setObjectVar($varKey, $varValue);\n                                    }\n                                    $newWorkspace->setUserId($user->getId());\n                                    $clonedWorkspaces[] = $newWorkspace;\n                                }\n                            }\n\n                            $user->$setter($clonedWorkspaces);\n                        }\n\n                        $user->setPerspectives($rObject->getPerspectives());\n                        $user->setPermissions($rObject->getPermissions());\n\n                        if ($type == 'user') {\n                            $user->setAdmin(false);\n                            if ($this->getAdminUser()->isAdmin()) {\n                                $user->setAdmin($rObject->getAdmin());\n                            }\n                            $user->setActive($rObject->getActive());\n                            $user->setRoles($rObject->getRoles());\n                            $user->setWelcomeScreen($rObject->getWelcomescreen());\n                            $user->setMemorizeTabs($rObject->getMemorizeTabs());\n                            $user->setCloseWarning($rObject->getCloseWarning());\n                        }\n\n                        $user->setWebsiteTranslationLanguagesView($rObject->getWebsiteTranslationLanguagesView());\n                        $user->setWebsiteTranslationLanguagesEdit($rObject->getWebsiteTranslationLanguagesEdit());\n\n                        $user->save();\n                    }\n                }\n            }\n\n            return $this->adminJson([\n                'success' => true,\n                'id' => $user->getId(),\n            ]);\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @param User\\AbstractUser $node\n     * @param array $currentList\n     * @param bool $roleMode\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    protected function populateChildNodes($node, &$currentList, $roleMode)\n    {\n        $currentUser = \\Pimcore\\Tool\\Admin::getCurrentUser();\n\n        $list = $roleMode ? new User\\Role\\Listing() : new User\\Listing();\n        $list->setCondition('parentId = ?', $node->getId());\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $childList = $roleMode ? $list->getRoles() : $list->getUsers();\n        if (is_array($childList)) {\n            foreach ($childList as $user) {\n                if ($user->getId() == $currentUser->getId()) {\n                    throw new \\Exception('Cannot delete current user');\n                }\n                if ($user->getId() && $currentUser->getId() && $user->getName() != 'system') {\n                    $currentList[] = $user;\n                    $this->populateChildNodes($user, $currentList, $roleMode);\n                }\n            }\n        }\n\n        return $currentList;\n    }\n\n    /**\n     * @Route(\"/user/delete\", name=\"pimcore_admin_user_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteAction(Request $request)\n    {\n        $user = User\\AbstractUser::getById((int)$request->get('id'));\n\n        // only admins are allowed to delete admins and folders\n        // because a folder might contain an admin user, so it is simply not allowed for users with the \"users\" permission\n        if (($user instanceof User\\Folder && !$this->getAdminUser()->isAdmin()) || ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin())) {\n            throw new \\Exception('You are not allowed to delete this user');\n        } else {\n            if ($user instanceof User\\Role\\Folder) {\n                $list = [$user];\n                $this->populateChildNodes($user, $list, $user instanceof User\\Role\\Folder);\n                $listCount = count($list);\n                for ($i = $listCount - 1; $i >= 0; $i--) {\n                    // iterate over the list from the so that nothing can get \"lost\"\n                    $user = $list[$i];\n                    $user->delete();\n                }\n            } else {\n                if ($user->getId()) {\n                    $user->delete();\n                }\n            }\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/update\", name=\"pimcore_admin_user_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function updateAction(Request $request)\n    {\n        $user = User\\UserRole::getById((int)$request->get('id'));\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        if ($request->get('data')) {\n            $values = $this->decodeJson($request->get('data'), true);\n\n            if (!empty($values['password'])) {\n                if (strlen($values['password']) < 10) {\n                    throw new \\Exception('Passwords have to be at least 10 characters long');\n                }\n                $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['password']);\n            }\n\n            // check if there are permissions transmitted, if so reset them all to false (they will be set later)\n            foreach ($values as $key => $value) {\n                if (strpos($key, 'permission_') === 0) {\n                    if (method_exists($user, 'setAllAclToFalse')) {\n                        $user->setAllAclToFalse();\n                    }\n\n                    break;\n                }\n            }\n\n            if ($user instanceof User && isset($values['2fa_required'])) {\n                $user->setTwoFactorAuthentication('required', (bool) $values['2fa_required']);\n            }\n\n            $user->setValues($values);\n\n            // only admins are allowed to create admin users\n            // if the logged in user isn't an admin, set admin always to false\n            if ($user instanceof User && !$this->getAdminUser()->isAdmin()) {\n                $user->setAdmin(false);\n            }\n\n            // check for permissions\n            $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n            $availableUserPermissions = $availableUserPermissionsList->load();\n\n            foreach ($availableUserPermissions as $permission) {\n                if (isset($values['permission_' . $permission->getKey()])) {\n                    $user->setPermission($permission->getKey(), (bool) $values['permission_' . $permission->getKey()]);\n                }\n            }\n\n            // check for workspaces\n            if ($request->get('workspaces')) {\n                $processedPaths = ['object' => [], 'asset' => [], 'document' => []]; //array to find if there are multiple entries for a path\n                $workspaces = $this->decodeJson($request->get('workspaces'), true);\n                foreach ($workspaces as $type => $spaces) {\n                    $newWorkspaces = [];\n                    foreach ($spaces as $space) {\n                        if (in_array($space['path'], $processedPaths[$type])) {\n                            throw new \\Exception('Error saving workspaces as multiple entries found for path \"' . $space['path'] .'\" in '.$this->trans((string)$type) . 's');\n                        }\n\n                        $element = Element\\Service::getElementByPath($type, $space['path']);\n                        if ($element) {\n                            $className = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . Element\\Service::getBaseClassNameForElement($type);\n                            $workspace = new $className();\n                            $workspace->setValues($space);\n\n                            $workspace->setCid($element->getId());\n                            $workspace->setCpath($element->getRealFullPath());\n                            $workspace->setUserId($user->getId());\n\n                            $newWorkspaces[] = $workspace;\n                            $processedPaths[$type][] = $space['path'];\n                        }\n                    }\n                    $user->{'setWorkspaces' . ucfirst($type)}($newWorkspaces);\n                }\n            }\n        }\n\n        if ($user instanceof User && $request->get('keyBindings')) {\n            $keyBindings = json_decode($request->get('keyBindings'), true);\n            $tmpArray = [];\n            foreach ($keyBindings as $action => $item) {\n                $tmpArray[] = json_decode($item, true);\n            }\n            $tmpArray = array_values(array_filter($tmpArray));\n            $tmpArray = User::strictKeybinds($tmpArray);\n            $tmpArray = json_encode($tmpArray);\n\n            $user->setKeyBindings($tmpArray);\n        }\n\n        $user->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/get\", name=\"pimcore_admin_user_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getAction(Request $request)\n    {\n        $userId = (int)$request->get('id');\n        if ($userId < 1) {\n            throw $this->createNotFoundException();\n        }\n\n        $user = User::getById($userId);\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $user->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $wKey => $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                    $workspaces[$wKey] = $workspace->getObjectVars();\n                }\n            }\n            $user->{'setWorkspaces' . ucfirst($type)}($workspaces);\n        }\n\n        // object <=> user dependencies\n        $userObjects = DataObject\\Service::getObjectsReferencingUser($user->getId());\n        $userObjectData = [];\n        $hasHidden = false;\n\n        foreach ($userObjects as $o) {\n            if ($o->isAllowed('list')) {\n                $userObjectData[] = [\n                    'path' => $o->getRealFullPath(),\n                    'id' => $o->getId(),\n                    'subtype' => $o->getClass()->getName(),\n                ];\n            } else {\n                $hasHidden = true;\n            }\n        }\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n\n        $availableUserPermissionsData = [];\n        if (is_array($availableUserPermissions)) {\n            foreach ($availableUserPermissions as $availableUserPermission) {\n                $availableUserPermissionsData[] = $availableUserPermission->getObjectVars();\n            }\n        }\n\n        // get available roles\n        $list = new User\\Role\\Listing();\n        $list->setCondition('`type` = ?', ['role']);\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = [$role->getId(), $role->getName()];\n            }\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $userData['roles'] =  array_map('intval', $user->getRoles());\n        $userData['docTypes'] =  $user->getDocTypes();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['twoFactorAuthentication']['isActive'] = ($user->getTwoFactorAuthentication('enabled') || $user->getTwoFactorAuthentication('secret'));\n        unset($userData['password']);\n        unset($userData['twoFactorAuthentication']['secret']);\n        $userData['hasImage'] = $user->hasImage();\n\n        $availablePerspectives = \\Pimcore\\Perspective\\Config::getAvailablePerspectives(null);\n\n        return $this->adminJson([\n            'success' => true,\n            'user' => $userData,\n            'roles' => $roles,\n            'permissions' => $user->generatePermissionList(),\n            'availablePermissions' => $availableUserPermissionsData,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages(),\n            'objectDependencies' => [\n                'hasHidden' => $hasHidden,\n                'dependencies' => $userObjectData,\n            ],\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-minimal\", name=\"pimcore_admin_user_getminimal\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getMinimalAction(Request $request)\n    {\n        $user = User::getById((int)$request->get('id'));\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        $minimalUserData['id'] = $user->getId();\n        $minimalUserData['admin'] = $user->isAdmin();\n        $minimalUserData['active'] = $user->isActive();\n        $minimalUserData['permissionInfo']['assets'] = $user->isAllowed('assets');\n        $minimalUserData['permissionInfo']['documents'] = $user->isAllowed('documents');\n        $minimalUserData['permissionInfo']['objects'] = $user->isAllowed('objects');\n\n        return $this->adminJson($minimalUserData);\n    }\n\n    /**\n     * @Route(\"/user/upload-current-user-image\", name=\"pimcore_admin_user_uploadcurrentuserimage\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function uploadCurrentUserImageAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                return $this->uploadImageAction($request);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/update-current-user\", name=\"pimcore_admin_user_updatecurrentuser\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                $values = $this->decodeJson($request->get('data'), true);\n\n                unset($values['name']);\n                unset($values['id']);\n                unset($values['admin']);\n                unset($values['permissions']);\n                unset($values['roles']);\n                unset($values['active']);\n\n                if (!empty($values['new_password'])) {\n                    $oldPasswordCheck = false;\n\n                    if (empty($values['old_password'])) {\n                        // if the user want to reset the password, the old password isn't required\n                        $oldPasswordCheck = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n                            if ($adminSession->get('password_reset')) {\n                                return true;\n                            }\n\n                            return false;\n                        });\n                    } else {\n                        // the password has to match\n                        $checkUser = Tool\\Authentication::authenticatePlaintext($user->getName(), $values['old_password']);\n                        if ($checkUser) {\n                            $oldPasswordCheck = true;\n                        }\n                    }\n\n                    if (strlen($values['new_password']) < 10) {\n                        throw new \\Exception('Passwords have to be at least 10 characters long');\n                    }\n\n                    if ($oldPasswordCheck && $values['new_password'] == $values['retype_password']) {\n                        $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['new_password']);\n                    } else {\n                        return $this->adminJson(['success' => false, 'message' => 'password_cannot_be_changed']);\n                    }\n                }\n\n                $user->setValues($values);\n\n                if ($request->get('keyBindings')) {\n                    $keyBindings = json_decode($request->get('keyBindings'), true);\n                    $tmpArray = [];\n                    foreach ($keyBindings as $action => $item) {\n                        $tmpArray[] = json_decode($item, true);\n                    }\n                    $tmpArray = array_values(array_filter($tmpArray));\n                    $tmpArray = json_encode($tmpArray);\n\n                    $user->setKeyBindings($tmpArray);\n                }\n\n                $user->save();\n\n                return $this->adminJson(['success' => true]);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/get-current-user\", name=\"pimcore_admin_user_getcurrentuser\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n\n        $list = new User\\Permission\\Definition\\Listing();\n        $definitions = $list->load();\n\n        foreach ($definitions as $definition) {\n            $user->setPermission($definition->getKey(), $user->isAllowed($definition->getKey()));\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['keyBindings'] = $user->getKeyBindings();\n\n        unset($userData['password']);\n        $userData['twoFactorAuthentication'] = $user->getTwoFactorAuthentication();\n        unset($userData['twoFactorAuthentication']['secret']);\n        $userData['twoFactorAuthentication']['isActive'] = $user->getTwoFactorAuthentication('enabled') && $user->getTwoFactorAuthentication('secret');\n        $userData['hasImage'] = $user->hasImage();\n\n        $userData['isPasswordReset'] = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            return $adminSession->get('password_reset');\n        });\n\n        $response = new Response('pimcore.currentuser = ' . $this->encodeJson($userData));\n        $response->headers->set('Content-Type', 'text/javascript');\n\n        return $response;\n    }\n\n    // ROLES\n\n    /**\n     * @Route(\"/user/role-tree-get-childs-by-id\", name=\"pimcore_admin_user_roletreegetchildsbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleTreeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Role\\Listing();\n        $list->setCondition('parentId = ?', (int)$request->get('node'));\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = $this->getRoleTreeNodeConfig($role);\n            }\n        }\n\n        return $this->adminJson($roles);\n    }\n\n    /**\n     * @param User\\Role|User\\Role\\Folder $role\n     *\n     * @return array\n     */\n    protected function getRoleTreeNodeConfig($role)\n    {\n        $tmpUser = [\n            'id' => $role->getId(),\n            'text' => $role->getName(),\n            'elementType' => 'role',\n            'qtipCfg' => [\n                'title' => 'ID: ' . $role->getId(),\n            ],\n        ];\n\n        // set type specific settings\n        if ($role instanceof User\\Role\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($role->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_roles';\n            $tmpUser['allowChildren'] = false;\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/role-get\", name=\"pimcore_admin_user_roleget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleGetAction(Request $request)\n    {\n        $role = User\\Role::getById((int)$request->get('id'));\n\n        if (!$role) {\n            throw $this->createNotFoundException();\n        }\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $role->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $wKey => $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                    $workspaces[$wKey] = $workspace->getObjectVars();\n                }\n            }\n            $role->{'setWorkspaces' . ucfirst($type)}($workspaces);\n        }\n\n        $replaceFn = function ($value) {\n            return $value->getObjectVars();\n        };\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n        $availableUserPermissions = array_map($replaceFn, $availableUserPermissions);\n\n        $availablePerspectives = \\Pimcore\\Perspective\\Config::getAvailablePerspectives(null);\n\n        return $this->adminJson([\n            'success' => true,\n            'role' => $role->getObjectVars(),\n            'permissions' => $role->generatePermissionList(),\n            'classes' => $role->getClasses(),\n            'docTypes' => $role->getDocTypes(),\n            'availablePermissions' => $availableUserPermissions,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/upload-image\", name=\"pimcore_admin_user_uploadimage\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function uploadImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($userObj->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        //Check if uploaded file is an image\n        $avatarFile = $request->files->get('Filedata');\n\n        $assetType = Asset::getTypeFromMimeMapping($avatarFile->getMimeType(), $avatarFile);\n\n        if (!$avatarFile instanceof UploadedFile || $assetType !== 'image') {\n            throw new \\Exception('Unsupported file format.');\n        }\n\n        $userObj->setImage($_FILES['Filedata']['tmp_name']);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/user/delete-image\", name=\"pimcore_admin_user_deleteimage\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function deleteImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($userObj->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        $userObj->setImage(null);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/renew-2fa-qr-secret\", name=\"pimcore_admin_user_renew2fasecret\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param GoogleAuthenticatorInterface $twoFactor\n     *\n     * @return BinaryFileResponse\n     */\n    public function renew2FaSecretAction(Request $request, GoogleAuthenticatorInterface $twoFactor)\n    {\n        $user = $this->getAdminUser();\n        $proxyUser = $this->getAdminUser(true);\n\n        $newSecret = $twoFactor->generateSecret();\n        $user->setTwoFactorAuthentication('enabled', true);\n        $user->setTwoFactorAuthentication('type', 'google');\n        $user->setTwoFactorAuthentication('secret', $newSecret);\n        $user->save();\n\n        Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            Tool\\Session::regenerateId();\n            $adminSession->set('2fa_required', true);\n        });\n\n        $url = $twoFactor->getQRContent($proxyUser);\n\n        $result = Builder::create()\n            ->writer(new PngWriter())\n            ->data($url)\n            ->size(200)\n            ->build();\n\n        $qrCodeFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/qr-code-' . uniqid() . '.png';\n        $result->saveToFile($qrCodeFile);\n\n        return new BinaryFileResponse($qrCodeFile);\n    }\n\n    /**\n     * @Route(\"/user/disable-2fa\", name=\"pimcore_admin_user_disable2fasecret\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function disable2FaSecretAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        $success = false;\n\n        if (!$user->getTwoFactorAuthentication('required')) {\n            $user->setTwoFactorAuthentication([]);\n            $user->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/reset-2fa-secret\", name=\"pimcore_admin_user_reset2fasecret\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function reset2FaSecretAction(Request $request)\n    {\n        $user = User::getById((int)$request->get('id'));\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n        $user->setTwoFactorAuthentication('enabled', false);\n        $user->setTwoFactorAuthentication('secret', '');\n        $user->save();\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-image\", name=\"pimcore_admin_user_getimage\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n        $stream = $userObj->getImage();\n\n        return new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => 'image/png',\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-token-login-link\", name=\"pimcore_admin_user_gettokenloginlink\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getTokenLoginLinkAction(Request $request)\n    {\n        $user = User::getById((int) $request->get('id'));\n\n        if (!$user) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_invalid_user_error'),\n            ], Response::HTTP_NOT_FOUND);\n        }\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_as_admin_non_admin_user_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        if (empty($user->getPassword())) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_no_password_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        $token = Tool\\Authentication::generateToken($user->getName());\n        $link = $this->generateCustomUrl([\n            'token' => $token,\n        ]);\n\n        return $this->adminJson([\n            'success' => true,\n            'link' => $link,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/search\", name=\"pimcore_admin_user_search\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function searchAction(Request $request)\n    {\n        $q = '%' . $request->get('query') . '%';\n\n        $list = new User\\Listing();\n        $list->setCondition('name LIKE ? OR firstname LIKE ? OR lastname LIKE ? OR email LIKE ? OR id = ?', [$q, $q, $q, $q, (int)$request->get('query')]);\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user instanceof User && $user->getId() && $user->getName() != 'system') {\n                    $users[] = [\n                        'id' => $user->getId(),\n                        'name' => $user->getName(),\n                        'email' => $user->getEmail(),\n                        'firstname' => $user->getFirstname(),\n                        'lastname' => $user->getLastname(),\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'users' => $users,\n        ]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // check permissions\n        $unrestrictedActions = [\n            'getCurrentUserAction', 'updateCurrentUserAction', 'getAvailablePermissionsAction', 'getMinimalAction',\n            'getImageAction', 'uploadCurrentUserImageAction', 'disable2FaSecretAction', 'renew2FaSecretAction',\n            'getUsersForSharingAction', 'getRolesForSharingAction',\n        ];\n\n        $this->checkActionPermission($event, 'users', $unrestrictedActions);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @Route(\"/user/get-users-for-sharing\", name=\"pimcore_admin_user_getusersforsharing\", methods={\"GET\"})\n     */\n    public function getUsersForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getUsersAction($request);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @Route(\"/user/get-roles-for-sharing\", name=\"pimcore_admin_user_getrolesforsharing\", methods={\"GET\"}))\n     */\n    public function getRolesForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getRolesAction($request);\n    }\n\n    /**\n     * @Route(\"/user/get-users\", name=\"pimcore_admin_user_getusers\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getUsersAction(Request $request)\n    {\n        $users = [];\n\n        // get available user\n        $list = new \\Pimcore\\Model\\User\\Listing();\n\n        $conditions = [ 'type = \"user\"' ];\n\n        if (!$request->get('include_current_user')) {\n            $conditions[] = 'id != ' . $this->getAdminUser()->getId();\n        }\n\n        $list->setCondition(implode(' AND ', $conditions));\n\n        $list->load();\n        $userList = $list->getUsers();\n\n        foreach ($userList as $user) {\n            if (!$request->get('permission') || $user->isAllowed($request->get('permission'))) {\n                $users[] = [\n                    'id' => $user->getId(),\n                    'label' => $user->getUsername(),\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($users), 'data' => $users]);\n    }\n\n    /**\n     * @Route(\"/user/get-roles\", name=\"pimcore_admin_user_getroles\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getRolesAction(Request $request)\n    {\n        $roles = [];\n        $list = new \\Pimcore\\Model\\User\\Role\\Listing();\n\n        $list->setCondition('type = \"role\"');\n        $list->load();\n        $roleList = $list->getRoles();\n\n        foreach ($roleList as $role) {\n            if (!$request->get('permission') || in_array($request->get('permission'), $role->getPermissions())) {\n                $roles[] = [\n                    'id' => $role->getId(),\n                    'label' => $role->getName(),\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($roles), 'data' => $roles]);\n    }\n\n    /**\n     * @Route(\"/user/get-default-key-bindings\", name=\"pimcore_admin_user_getdefaultkeybindings\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getDefaultKeyBindingsAction(Request $request)\n    {\n        $data = User::getDefaultKeyBindings();\n\n        return $this->adminJson(['success' => true, 'data' => $data]);\n    }\n\n    /**\n     * @Route(\"/user/invitationlink\", name=\"pimcore_admin_user_invitationlink\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function invitationLinkAction(Request $request)\n    {\n        $success = false;\n        $message = '';\n\n        if ($username = $request->get('username')) {\n            $user = User::getByName($username);\n            if ($user instanceof User) {\n                if (!$user->isActive()) {\n                    $message .= 'User inactive  <br />';\n                }\n\n                if (!$user->getEmail()) {\n                    $message .= 'User has no email address <br />';\n                }\n            } else {\n                $message .= 'User unknown <br />';\n            }\n\n            if (empty($message)) {\n                //generate random password if user has no password\n                if (!$user->getPassword()) {\n                    $user->setPassword(bin2hex(random_bytes(16)));\n                    $user->save();\n                }\n\n                $token = Tool\\Authentication::generateToken($user->getName());\n                $loginUrl = $this->generateCustomUrl([\n                    'token' => $token,\n                    'reset' => true,\n                ]);\n\n                try {\n                    $mail = Tool::getMail([$user->getEmail()], 'Pimcore login invitation for ' . Tool::getHostname());\n                    $mail->setIgnoreDebugMode(true);\n                    $mail->text(\"Login to pimcore and change your password using the following link. This temporary login link will expire in  24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                    $mail->send();\n\n                    $success = true;\n                    $message = sprintf($this->trans('invitation_link_sent'), $user->getEmail());\n                } catch (\\Exception $e) {\n                    $message .= 'could not send email';\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'message' => $message,\n        ]);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return int\n     */\n    protected function getUserId(Request $request)\n    {\n        if ($request->get('id')) {\n            if ($this->getAdminUser()->getId() != $request->get('id')) {\n                $this->checkPermission('users');\n            }\n\n            return (int) $request->get('id');\n        }\n\n        return $this->getAdminUser()->getId();\n    }\n\n    /**\n     *\n     * @param array $params\n     * @param string $fallbackUrl\n     * @param int $referenceType //UrlGeneratorInterface::ABSOLUTE_URL, ABSOLUTE_PATH, RELATIVE_PATH, NETWORK_PATH\n     *\n     * @return string The generated URL\n     */\n    private function generateCustomUrl(array $params, $fallbackUrl = 'pimcore_admin_login_check', $referenceType = UrlGeneratorInterface::ABSOLUTE_URL): string\n    {\n        try {\n            $adminEntryPointRoute = $this->getParameter('pimcore_admin.custom_admin_route_name');\n\n            //try to generate invitation link for custom admin point\n            $loginUrl = $this->generateUrl($adminEntryPointRoute, $params, $referenceType);\n        } catch (\\Exception $e) {\n            //use default login check for invitation link\n            $loginUrl = $this->generateUrl($fallbackUrl, $params, $referenceType);\n        }\n\n        return $loginUrl;\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.profile.panel\");\npimcore.settings.profile.panel = Class.create({\n\n    initialize: function () {\n\n        this.getTabPanel();\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"my_profile\",\n                title: t(\"my_profile\"),\n                iconCls: \"pimcore_icon_user\",\n                border: false,\n                closable: true,\n                layout: \"fit\",\n                bodyStyle: \"padding: 10px;\",\n                items: [this.getEditPanel()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"my_profile\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"profile\");\n            }.bind(this));\n\n\n            pimcore.layout.refresh();\n\n        }\n\n        return this.panel;\n    },\n\n    getEditPanel: function () {\n        this.forceReloadOnSave = false;\n        this.currentUser = pimcore.currentuser;\n\n        var passwordCheck = function (el) {\n            if (/^(?=.*\\d)(?=.*[a-zA-Z]).{6,100}$/.test(el.getValue())) {\n                el.getEl().addCls(\"password_valid\");\n                el.getEl().removeCls(\"password_invalid\");\n            } else {\n                el.getEl().addCls(\"password_invalid\");\n                el.getEl().removeCls(\"password_valid\");\n            }\n        };\n\n        var generalItems = [],\n            baseItems = [];\n\n        baseItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"firstname\"),\n            name: \"firstname\",\n            value: this.currentUser.firstname,\n            width: 400\n        });\n\n        baseItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"lastname\"),\n            name: \"lastname\",\n            value: this.currentUser.lastname,\n            width: 400\n        });\n\n        baseItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"email\"),\n            name: \"email\",\n            value: this.currentUser.email,\n            width: 400\n        });\n\n        baseItems.push({\n            xtype: 'combo',\n            fieldLabel: t('language'),\n            typeAhead: true,\n            value: this.currentUser.language,\n            mode: 'local',\n            name: \"language\",\n            listWidth: 100,\n            store: pimcore.globalmanager.get(\"pimcorelanguages\"),\n            displayField: 'display',\n            valueField: 'language',\n            forceSelection: true,\n            triggerAction: 'all',\n            hiddenName: 'language',\n            listeners: {\n                change: function () {\n                    this.forceReloadOnSave = true;\n                }.bind(this),\n                select: function () {\n                    this.forceReloadOnSave = true;\n                }.bind(this)\n            }\n        });\n\n        baseItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"show_welcome_screen\"),\n            name: \"welcomescreen\",\n            checked: this.currentUser.welcomescreen\n        });\n\n        baseItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"memorize_tabs\"),\n            name: \"memorizeTabs\",\n            checked: this.currentUser.memorizeTabs\n        });\n\n        generalItems.push({\n            xtype: \"fieldset\",\n            title: t('general_settings'),\n            items: baseItems\n        });\n\n        var passwordField = new Ext.form.field.Text({\n            fieldLabel: t(\"new_password\"),\n            name: \"new_password\",\n            inputType: \"password\",\n            width: 400,\n            enableKeyEvents: true,\n            listeners: {\n                keyup: passwordCheck,\n                afterrender: function (cmp) {\n                    cmp.inputEl.set({\n                        autocomplete: 'new-password'\n                    });\n                }\n            }\n        });\n\n        var retypePasswordField = new Ext.form.field.Text({\n            xtype: \"textfield\",\n            fieldLabel: t(\"retype_password\"),\n            name: \"retype_password\",\n            inputType: \"password\",\n            width: 400,\n            style: \"margin-bottom: 20px;\",\n            enableKeyEvents: true,\n            listeners: {\n                keyup: passwordCheck,\n                afterrender: function (cmp) {\n                    cmp.inputEl.set({\n                        autocomplete: 'new-password'\n                    });\n                }\n            }\n        });\n\n        generalItems.push({\n            xtype: \"fieldset\",\n            title: t(\"change_password\"),\n            items: [{\n                xtype: \"textfield\",\n                fieldLabel: t(\"old_password\"),\n                name: \"old_password\",\n                inputType: \"password\",\n                width: 400,\n                hidden: this.currentUser.isPasswordReset,\n                listeners: {\n                    afterrender: function (cmp) {\n                        cmp.inputEl.set({\n                            autocomplete: 'current-password'\n                        });\n                    }\n                }\n            }, {\n                xtype: \"fieldcontainer\",\n                layout: 'hbox',\n                items: [\n\n                    passwordField,\n                    {\n                        xtype: \"button\",\n                        width: 32,\n                        style: \"margin-left: 8px\",\n                        iconCls: \"pimcore_icon_clear_cache\",\n                        handler: function () {\n\n                            var pass;\n\n                            while (true) {\n                                pass = pimcore.helpers.generatePassword(15);\n                                if (pimcore.helpers.isValidPassword(pass)) {\n                                    break;\n                                }\n                            }\n\n                            passwordField.getEl().down('input').set({type: 'text'});\n\n                            passwordField.setValue(pass);\n                            retypePasswordField.setValue(pass);\n\n                            passwordCheck(passwordField);\n                            passwordCheck(retypePasswordField);\n                        }.bind(this)\n                    }\n                ]\n            }, retypePasswordField]\n        });\n\n        var twoFactorSettings = new pimcore.settings.profile.twoFactorSettings(this.currentUser.twoFactorAuthentication);\n        generalItems.push(twoFactorSettings.getPanel());\n\n        generalItems.push({\n            xtype: \"fieldset\",\n            title: t(\"image\"),\n            width: '100%',\n            items: [\n                {\n                    xtype: \"container\",\n                    items: [{\n                        xtype: \"image\",\n                        id: \"pimcore_profile_image_\" + this.currentUser.id,\n                        src: Routing.generate('pimcore_admin_user_getimage', {id: this.currentUser.id, '_dc': Ext.Date.now()}),\n                        width: 45,\n                        height: 45\n                    }],\n                    style: \"float:left; margin-right: 10px;max-width:45px;\"\n                },\n                {\n                    xtype: \"button\",\n                    text: t(\"upload\"),\n                    handler: function () {\n                        pimcore.helpers.uploadDialog(\n                            Routing.generate('pimcore_admin_user_uploadcurrentuserimage', {id: this.currentUser.id}),\n                            null,\n                            function () {\n                                Ext.getCmp(\"pimcore_profile_delete_image_\" + this.currentUser.id).setVisible(true);\n                                pimcore.helpers.reloadUserImage(this.currentUser.id);\n                                this.currentUser.hasImage = true;\n                            }.bind(this),\n                            function () {\n                                Ext.MessageBox.alert(t('error'), t(\"unsupported_filetype\"));\n                            }.bind(this)\n                        );\n                    }.bind(this)\n                },\n                {\n                    xtype: \"button\",\n                    iconCls: \"pimcore_icon_cancel\",\n                    tooltip: t(\"remove\"),\n                    id: \"pimcore_profile_delete_image_\" + this.currentUser.id,\n                    hidden: !this.currentUser.hasImage,\n                    handler: function () {\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_user_deleteimage', {id: this.currentUser.id}),\n                            method: 'DELETE',\n                            success: function() {\n                                Ext.getCmp(\"pimcore_profile_delete_image_\" + this.currentUser.id).setVisible(false);\n                                pimcore.helpers.reloadUserImage(this.currentUser.id);\n                                this.currentUser.hasImage = false;\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                }\n            ]\n        });\n\n        this.editorSettings = new pimcore.settings.user.editorSettings(this, this.currentUser.contentLanguages);\n\n        this.basicPanel = new Ext.form.FormPanel({\n            border: false,\n            items: [{items: generalItems}, this.editorSettings.getPanel()],\n            labelWidth: 130\n        });\n\n\n        this.keyBindings = new pimcore.settings.user.user.keyBindings(this, true);\n\n        this.userPanel = new Ext.Panel({\n            autoScroll: true,\n            items: [this.basicPanel, {\n                xtype: \"fieldset\",\n                collapsible: true,\n                title: t(\"key_bindings\"),\n                items: [this.keyBindings.getPanel()]\n            }],\n            buttons: [\n                {\n                    text: t(\"save\"),\n                    iconCls: \"pimcore_icon_apply\",\n                    handler: this.saveCurrentUser.bind(this)\n                }\n            ]\n        });\n\n\n        return this.userPanel;\n    },\n\n    saveCurrentUser: function () {\n        var values = this.basicPanel.getForm().getFieldValues();\n        var contentLanguages = this.editorSettings.getContentLanguages();\n        values.contentLanguages = contentLanguages;\n\n        if (values[\"new_password\"]) {\n            if (!pimcore.helpers.isValidPassword(values[\"new_password\"]) || values[\"new_password\"] != values[\"retype_password\"]) {\n                delete values[\"new_password\"];\n                delete values[\"retype_password\"];\n                Ext.MessageBox.alert(t('error'), t(\"password_was_not_changed\"));\n            }\n        }\n\n        try {\n            var keyBindings = Ext.encode(this.keyBindings.getValues());\n        } catch (e3) {\n            console.log(e3);\n        }\n\n\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_user_updatecurrentuser'),\n            method: \"PUT\",\n            params: {\n                id: this.currentUser.id,\n                data: Ext.encode(values),\n                keyBindings: keyBindings\n            },\n            success: function (response) {\n                try {\n                    var res = Ext.decode(response.responseText);\n                    if (res.success) {\n\n                        if (this.forceReloadOnSave) {\n                            this.forceReloadOnSave = false;\n\n                            Ext.MessageBox.confirm(t(\"info\"), t(\"reload_pimcore_changes\"), function (buttonValue) {\n                                if (buttonValue == \"yes\") {\n                                    window.location.reload();\n                                }\n                            }.bind(this));\n                        }\n\n                        pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n                        if (contentLanguages) {\n                            pimcore.settings.websiteLanguages = contentLanguages;\n                            pimcore.currentuser.contentLanguages = contentLanguages.join(',');\n                        }\n                    } else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\", t(res.message));\n                    }\n                } catch (e) {\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n                }\n            }.bind(this)\n        });\n    },\n\n    activate: function () {\n        Ext.getCmp(\"pimcore_panel_tabs\").setActiveItem(\"my_profile\");\n    }\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.settings.user.user.settings\");\npimcore.settings.user.user.settings = Class.create({\n\n    initialize: function (userPanel) {\n        this.userPanel = userPanel;\n\n        this.data = this.userPanel.data;\n        this.currentUser = this.data.user;\n    },\n\n    getPanel: function () {\n        var user = pimcore.globalmanager.get(\"user\");\n        this.forceReloadOnSave = false;\n\n        var generalItems = [];\n\n\n        generalItems.push({\n            xtype: 'panel',\n            border: false,\n            layout: 'hbox',\n            items: [\n                {\n                    xtype: \"displayfield\",\n                    fieldLabel: t(\"id\"),\n                    value: this.currentUser.id,\n                    flex: 0.3\n                },\n                {\n                    xtype: \"displayfield\",\n                    fieldLabel: t(\"last_login\"),\n                    value: (this.currentUser.lastLogin ? new Date(this.currentUser.lastLogin * 1000) : ''),\n                    flex: 0.7\n                }\n            ]\n        });\n\n        generalItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"active\"),\n            name: \"active\",\n            disabled: user.id == this.currentUser.id,\n            checked: this.currentUser.active\n        });\n\n        generalItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"username\"),\n            value: this.currentUser.name,\n            width: 400,\n            disabled: true\n        });\n\n        var passwordField = new Ext.form.field.Text({\n            fieldLabel: t(\"password\"),\n            name: \"password\",\n            inputType: \"password\",\n            width: 400,\n            enableKeyEvents: true,\n            listeners: {\n                keyup: function (el) {\n                    this.validatePassword(el);\n                }.bind(this),\n                afterrender: function (cmp) {\n                    cmp.inputEl.set({\n                        autocomplete: 'new-password'\n                    });\n                }\n            }\n        });\n\n\n        generalItems.push({\n            xtype: \"fieldcontainer\",\n            layout: 'hbox',\n\n            items: [passwordField,\n                {\n                    xtype: \"button\",\n                    width: 32,\n                    style: \"margin-left: 8px\",\n                    iconCls: \"pimcore_icon_clear_cache\",\n                    handler: function () {\n\n                        var pass;\n\n                        while (true) {\n                            pass = pimcore.helpers.generatePassword(15);\n                            if (pimcore.helpers.isValidPassword(pass)) {\n                                break;\n                            }\n                        }\n\n                        passwordField.getEl().down('input').set({type: 'text'});\n                        passwordField.setValue(pass);\n                        this.validatePassword(passwordField);\n                    }.bind(this)\n                }\n            ]\n        });\n\n        generalItems.push({\n            xtype: \"container\",\n            itemId: \"password_hint\",\n            html: t(\"password_hint\"),\n            style: \"color: red;\",\n            hidden: true\n        });\n\n\n        generalItems.push({\n            xtype: \"fieldset\",\n            title: t(\"two_factor_authentication\"),\n            items: [{\n                xtype: \"checkbox\",\n                boxLabel: t(\"2fa_required\"),\n                name: \"2fa_required\",\n                checked: this.currentUser[\"twoFactorAuthentication\"]['required']\n            }, {\n                xtype: \"button\",\n                text: t(\"2fa_reset_secret\"),\n                hidden: !this.currentUser['twoFactorAuthentication']['isActive'],\n                handler: function () {\n                    Ext.Ajax.request({\n                        url: Routing.generate('pimcore_admin_user_reset2fasecret'),\n                        method: 'PUT',\n                        params: {\n                            id: this.currentUser.id\n                        },\n                        success: function (response) {\n                            Ext.MessageBox.alert(t(\"2fa_reset_secret\"), t(\"2fa_reset_done\"));\n                        }.bind(this)\n                    });\n                }.bind(this)\n            }]\n        });\n\n        generalItems.push({\n            xtype: \"fieldset\",\n            title: t(\"image\"),\n            items: [\n                {\n                    xtype: \"container\",\n                    items: [{\n                        xtype: \"image\",\n                        id: \"pimcore_user_image_\" + this.currentUser.id,\n                        src: Routing.generate(\n                            'pimcore_admin_user_getimage',\n                            {id: this.currentUser.id, '_dc': Ext.Date.now()}\n                        ),\n                        width: 45,\n                        height: 45\n                    }],\n                },\n                {\n                    xtype: \"button\",\n                    text: t(\"upload\"),\n                    handler: function () {\n                        pimcore.helpers.uploadDialog(\n                            Routing.generate('pimcore_admin_user_uploadimage', {id: this.currentUser.id}),\n                            null,\n                            function () {\n                                Ext.getCmp(\"pimcore_user_delete_image_\" + this.currentUser.id).setVisible(true);\n                                pimcore.helpers.reloadUserImage(this.currentUser.id);\n                                this.currentUser.hasImage = true;\n                            }.bind(this),\n                            function () {\n                                Ext.MessageBox.alert(t('error'), t(\"unsupported_filetype\"));\n                            }.bind(this)\n                        );\n                    }.bind(this)\n                },\n                {\n                    xtype: \"button\",\n                    iconCls: \"pimcore_icon_cancel\",\n                    tooltip: t(\"remove\"),\n                    id: \"pimcore_user_delete_image_\" + this.currentUser.id,\n                    hidden: !this.currentUser.hasImage,\n                    handler: function () {\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_user_deleteimage', {id: this.currentUser.id}),\n                            method: 'DELETE',\n                            success: function() {\n                                Ext.getCmp(\"pimcore_user_delete_image_\" + this.currentUser.id).setVisible(false);\n                                pimcore.helpers.reloadUserImage(this.currentUser.id);\n                                this.currentUser.hasImage = false;\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                }\n            ]\n        });\n\n        generalItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"firstname\"),\n            name: \"firstname\",\n            value: this.currentUser.firstname,\n            width: 400\n        });\n        generalItems.push({\n            xtype: \"textfield\",\n            fieldLabel: t(\"lastname\"),\n            name: \"lastname\",\n            value: this.currentUser.lastname,\n            width: 400\n        });\n\n        var emailField = new Ext.form.field.Text({\n            xtype: \"textfield\",\n            fieldLabel: t(\"email\"),\n            name: \"email\",\n            value: this.currentUser.email,\n            width: 400\n        });\n\n        generalItems.push({\n            xtype: \"fieldcontainer\",\n            layout: 'hbox',\n\n            items: [emailField,\n                {\n                    text: t(\"send_invitation_link\"),\n                    xtype: \"button\",\n                    style: \"margin-left: 8px\",\n                    iconCls: \"pimcore_nav_icon_email\",\n                    hidden: (this.currentUser.lastLogin > 0) || (user.id == this.currentUser.id),\n                    handler: function () {\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_user_invitationlink'),\n                            method: 'POST',\n                            ignoreErrors: true,\n                            params: {\n                                username: this.currentUser.name\n                            },\n                            success: function (response) {\n                                var res = Ext.decode(response.responseText);\n                                if (res.success) {\n                                    Ext.MessageBox.alert(t('invitation_sent'), res.message);\n                                } else {\n                                    Ext.MessageBox.alert(t('error'), res.message);\n                                }\n                            }.bind(this),\n                            failure: function (response) {\n                                var message = t(\"error_general\");\n\n                                try {\n                                    var json = Ext.decode(response.responseText);\n                                    if (json.message) {\n\n                                        message = json.message;\n                                    }\n                                } catch (e) {\n                                }\n\n                                pimcore.helpers.showNotification(t(\"error\"), message, \"error\");\n                            }\n                        });\n                    }.bind(this)\n                }\n            ]\n        });\n\n        generalItems.push({\n            xtype: 'combo',\n            fieldLabel: t('language'),\n            typeAhead: true,\n            value: this.currentUser.language,\n            mode: 'local',\n            listWidth: 100,\n            store: pimcore.globalmanager.get(\"pimcorelanguages\"),\n            displayField: 'display',\n            valueField: 'language',\n            forceSelection: true,\n            triggerAction: 'all',\n            name: 'language',\n            listeners: {\n                change: function () {\n                    this.forceReloadOnSave = true;\n                }.bind(this),\n                select: function () {\n                    this.forceReloadOnSave = true;\n                }.bind(this)\n            }\n        });\n\n        var rolesStore = Ext.create('Ext.data.ArrayStore', {\n            fields: [\"id\", \"name\"],\n            data: this.data.roles\n        });\n\n        this.roleField = Ext.create('Ext.ux.form.MultiSelect', {\n            name: \"roles\",\n            triggerAction: \"all\",\n            editable: false,\n            fieldLabel: t(\"roles\"),\n            width: 400,\n            minHeight: 100,\n            store: rolesStore,\n            displayField: \"name\",\n            valueField: \"id\",\n            value: this.currentUser.roles,\n            hidden: this.currentUser.admin\n        });\n\n        generalItems.push(this.roleField);\n\n        var perspectivesStore = Ext.create('Ext.data.JsonStore', {\n            fields: [\n                \"name\",\n                {\n                    name:\"translatedName\",\n                    convert: function (v, rec) {\n                        return t(rec.data.name);\n                    },\n                    depends : ['name']\n                }\n            ],\n            data: this.data.availablePerspectives\n        });\n\n        this.perspectivesField = Ext.create('Ext.ux.form.MultiSelect', {\n            name: \"perspectives\",\n            triggerAction: \"all\",\n            editable: false,\n            fieldLabel: t(\"perspectives\"),\n            width: 400,\n            minHeight: 100,\n            store: perspectivesStore,\n            displayField: \"translatedName\",\n            valueField: \"name\",\n            value: this.currentUser.perspectives ? this.currentUser.perspectives.join(\",\") : null,\n            hidden: this.currentUser.admin\n        });\n\n        generalItems.push(this.perspectivesField);\n\n\n        generalItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"show_welcome_screen\"),\n            name: \"welcomescreen\",\n            checked: this.currentUser.welcomescreen\n        });\n\n        generalItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"memorize_tabs\"),\n            name: \"memorizeTabs\",\n            checked: this.currentUser.memorizeTabs\n        });\n\n        generalItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"allow_dirty_close\"),\n            name: \"allowDirtyClose\",\n            checked: this.currentUser.allowDirtyClose\n        });\n\n        generalItems.push({\n            xtype: \"checkbox\",\n            boxLabel: t(\"show_close_warning\"),\n            name: \"closeWarning\",\n            checked: this.currentUser.closeWarning\n        });\n\n\n        this.generalSet = new Ext.form.FieldSet({\n            collapsible: true,\n            title: t(\"general\"),\n            items: generalItems\n        });\n\n\n        var adminItems = [];\n\n        if (user.admin) {\n            // only admins are allowed to create new admin users and to manage API related settings\n            adminItems.push({\n                xtype: \"checkbox\",\n                boxLabel: t(\"admin\"),\n                name: \"admin\",\n                disabled: user.id == this.currentUser.id,\n                checked: this.currentUser.admin,\n                handler: function (box, checked) {\n                    if (checked == true) {\n                        this.roleField.hide();\n                        this.typesSet.hide();\n                        this.permissionsSet.hide();\n                        this.userPanel.workspaces.disable();\n                        this.websiteTranslationSettings.getPanel().hide();\n                    } else {\n                        this.roleField.show();\n                        this.typesSet.show();\n                        this.permissionsSet.show();\n                        this.userPanel.workspaces.enable();\n                        this.websiteTranslationSettings.getPanel().show();\n                    }\n                }.bind(this)\n            });\n\n            adminItems.push({\n                xtype: \"displayfield\",\n                hideLabel: true,\n                width: 600,\n                value: t(\"user_admin_description\"),\n                cls: \"pimcore_extra_label_bottom\"\n            });\n        }\n\n        adminItems.push({\n            xtype: \"button\",\n            text: t(\"login_as_this_user\"),\n            iconCls: \"pimcore_icon_user\",\n            disabled: user.id == this.currentUser.id,\n            handler: function () {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_user_gettokenloginlink'),\n                    ignoreErrors: true,\n                    params: {\n                        id: this.currentUser.id\n                    },\n                    success: function (response) {\n                        var res = Ext.decode(response.responseText);\n                        if (res[\"link\"]) {\n                            Ext.MessageBox.show({\n                                title: t(\"login_as_this_user\"),\n                                msg: t(\"login_as_this_user_description\")\n                                    + '<br /><br /><textarea style=\"width:100%;height:90px;\" readonly=\"readonly\">' + res[\"link\"] + \"</textarea>\",\n                                buttons: Ext.MessageBox.YESNO,\n                                buttonText: {\n                                    yes: t(\"copy\") + ' & ' + t(\"close\"),\n                                    no: t(\"close\")\n                                },\n                                scope: this,\n                                fn: function (result) {\n                                    if (result === 'yes') {\n                                        pimcore.helpers.copyStringToClipboard(res[\"link\"]);\n                                    }\n                                }\n                            });\n                        }\n                    },\n                    failure: function (response) {\n                        var message = t(\"error_general\");\n\n                        try {\n                            var json = Ext.decode(response.responseText);\n                            if (json.message) {\n\n                                message = json.message;\n                            }\n                        } catch (e) {\n                        }\n\n                        pimcore.helpers.showNotification(t(\"error\"), message, \"error\");\n                    }\n                });\n            }.bind(this)\n        });\n\n        this.adminSet = new Ext.form.FieldSet({\n            collapsible: true,\n            title: t(\"admin\"),\n            items: adminItems\n        });\n\n        var itemsPerSection = [];\n        var sectionArray = [];\n        for (var i = 0; i < this.data.availablePermissions.length; i++) {\n            let section = this.data.availablePermissions[i].category;\n            if (!section) {\n                section = \"default\";\n            }\n            if (!itemsPerSection[section]) {\n                itemsPerSection[section] = [];\n            }\n            itemsPerSection[section].push({\n                xtype: \"checkbox\",\n                boxLabel: t(this.data.availablePermissions[i].key),\n                name: \"permission_\" + this.data.availablePermissions[i].key,\n                checked: this.data.permissions[this.data.availablePermissions[i].key],\n                labelWidth: 200\n            });\n        }\n        for (var key in itemsPerSection) {\n            let title = t(\"permissions\");\n            if (key && key != \"default\") {\n                title += \" \" + t(key);\n            }\n\n            itemsPerSection[key].sort((a, b) => a.boxLabel.localeCompare(b.boxLabel));\n\n            sectionArray.push(new Ext.form.FieldSet({\n                collapsible: true,\n                title: title,\n                items: itemsPerSection[key],\n                collapsed: true,\n            }));\n        }\n\n        this.permissionsSet = new Ext.container.Container({\n            items: sectionArray,\n            hidden: this.currentUser.admin\n        });\n\n        this.typesSet = new Ext.form.FieldSet({\n            collapsible: true,\n            title: t(\"allowed_types_to_create\") + \" (\" + t(\"defaults_to_all\") + \")\",\n            items: [\n                Ext.create('Ext.ux.form.MultiSelect', {\n                    name: \"docTypes\",\n                    triggerAction: \"all\",\n                    editable: false,\n                    fieldLabel: t(\"document_types\"),\n                    width: 400,\n                    valueField: \"id\",\n                    store: pimcore.globalmanager.get(\"document_types_store\"),\n                    value: this.currentUser.docTypes,\n                    listConfig: {\n                        itemTpl: new Ext.XTemplate('{[this.sanitize(values.translatedName)]}',\n                            {\n                                sanitize: function (name) {\n                                    return Ext.util.Format.htmlEncode(name);\n                                }\n                            }\n                        )\n                    }\n                }),\n                Ext.create('Ext.ux.form.MultiSelect', {\n                    name: \"classes\",\n                    triggerAction: \"all\",\n                    editable: false,\n                    fieldLabel: t(\"classes\"),\n                    width: 400,\n                    displayField: \"text\",\n                    valueField: \"id\",\n                    store: pimcore.globalmanager.get(\"object_types_store\"),\n                    value: this.currentUser.classes\n                })],\n            hidden: this.currentUser.admin\n        });\n\n        this.editorSettings = new pimcore.settings.user.editorSettings(this, this.data.user.contentLanguages);\n        this.websiteTranslationSettings = new pimcore.settings.user.websiteTranslationSettings(this, this.data.validLanguages, this.data.user);\n\n        var websiteSettingsPanel = this.websiteTranslationSettings.getPanel();\n        if (this.currentUser.admin) {\n            websiteSettingsPanel.hide();\n        }\n\n        this.panel = new Ext.form.FormPanel({\n            title: t(\"settings\"),\n            items: [this.generalSet, this.adminSet, this.permissionsSet, this.typesSet, this.editorSettings.getPanel(), websiteSettingsPanel],\n            bodyStyle: \"padding:10px;\",\n            autoScroll: true\n        });\n\n        return this.panel;\n    },\n\n    getValues: function () {\n\n        var values = this.panel.getForm().getFieldValues();\n        if (values[\"password\"]) {\n            if (!pimcore.helpers.isValidPassword(values[\"password\"])) {\n                delete values[\"password\"];\n                Ext.MessageBox.alert(t('error'), t(\"password_was_not_changed\"));\n            }\n        }\n\n        values.contentLanguages = this.editorSettings.getContentLanguages();\n        values.websiteTranslationLanguagesEdit = this.websiteTranslationSettings.getLanguages(\"edit\");\n        values.websiteTranslationLanguagesView = this.websiteTranslationSettings.getLanguages(\"view\");\n\n        return values;\n    },\n\n    validatePassword: function (el) {\n\n        var theEl = el.getEl();\n        var hintItem = this.generalSet.getComponent(\"password_hint\");\n\n        if (pimcore.helpers.isValidPassword(el.getValue())) {\n            theEl.addCls(\"password_valid\");\n            theEl.removeCls(\"password_invalid\");\n            hintItem.hide();\n        } else {\n            theEl.addCls(\"password_invalid\");\n            theEl.removeCls(\"password_valid\");\n            hintItem.show();\n        }\n\n        if (el.getValue().length < 1) {\n            theEl.removeCls(\"password_valid\");\n            theEl.removeCls(\"password_invalid\");\n            hintItem.hide();\n        }\n\n        this.generalSet.updateLayout();\n    }\n\n});\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/UserController.php", "bundles/AdminBundle/Resources/public/js/pimcore/settings/profile/panel.js", "bundles/AdminBundle/Resources/public/js/pimcore/settings/user/user/settings.js"], "buggy_code_start_loc": [23, 252, 179], "buggy_code_end_loc": [799, 252, 179], "fixing_code_start_loc": [24, 253, 180], "fixing_code_end_loc": [811, 256, 183], "type": "CWE-434", "message": "Pimcore is an Open Source Data & Experience Management Platform: PIM, MDM, CDP, DAM, DXP/CMS & Digital Commerce. The upload functionality for updating user profile does not properly validate the file content-type, allowing any authenticated user to bypass this security check by adding a valid signature (p.e. GIF89) and sending any invalid content-type. This could allow an authenticated attacker to upload HTML files with JS content that will be executed in the context of the domain. This issue has been patched in version 10.5.16.", "other": {"cve": {"id": "CVE-2023-23937", "sourceIdentifier": "security-advisories@github.com", "published": "2023-02-03T20:15:10.807", "lastModified": "2023-02-13T15:21:51.770", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pimcore is an Open Source Data & Experience Management Platform: PIM, MDM, CDP, DAM, DXP/CMS & Digital Commerce. The upload functionality for updating user profile does not properly validate the file content-type, allowing any authenticated user to bypass this security check by adding a valid signature (p.e. GIF89) and sending any invalid content-type. This could allow an authenticated attacker to upload HTML files with JS content that will be executed in the context of the domain. This issue has been patched in version 10.5.16."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.16", "matchCriteriaId": "DD89B0E3-DCEC-4AEF-BE67-D8525F28E3C6"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/75a448ef8ac74424cf4e723afeb6d05f9eed872f", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/pimcore/pimcore/security/advisories/GHSA-8xv4-jj4h-qww6", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/75a448ef8ac74424cf4e723afeb6d05f9eed872f"}}