{"buggy_code": ["# Changelog\n\nSee https://github.com/doorkeeper-gem/doorkeeper/wiki/Migration-from-old-versions for\nupgrade guides.\n\nUser-visible changes worth mentioning.\n\n## master\n\n- [#1395] Fix `NameError: uninitialized constant Doorkeeper::AccessToken` for Rake tasks.\n- [#1397] Add `as: :doorkeeper_application` on Doorkeeper application form in order to support\n  custom configured application model.\n- [#1400] Correctly yield the application instance to `allow_grant_flow_for_client?` config\n  option (fixes #1398).\n- [#1402] Handle trying authorization with client credentials.\n\n## 5.4.0.rc1\n- [#1366] Sets expiry of token generated using `refresh_token` to that of original token. (Fixes #1364) \n- [#1354] Add `authorize_resource_owner_for_client` option to authorize the calling user to access an application.\n- [#1355] Allow to enable polymorphic Resource Owner association for Access Token & Grant\n  models (`use_polymorphic_resource_owner` configuration option).\n  \n  **[IMPORTANT]** Review your custom patches or extensions for Doorkeeper internals if you\n  have such - since now Doorkeeper passes Resource Owner instance to every objects and not\n  just it's ID. See PR description for details.\n  \n- [#1356] Remove duplicated scopes from Access Tokens and Grants on attribute assignment.\n- [#1357] Fix `Doorkeeper::OAuth::PreAuthorization#as_json` method causing \n  `Stack level too deep` error with AMS (fix #1312).\n- [#1358] Deprecate `active_record_options` configuration option.\n- [#1359] Refactor Doorkeeper configuration options DSL to make it easy to reuse it\n  in external extensions.\n- [#1360] Increase `matching_token_for` lookup size to 10 000 and make it configurable.\n- [#1371] Fix controllers to use valid classes in case Doorkeeper has custom models configured.\n- [#1370] Fix revocation response for invalid token and unauthorized requests to conform with RFC 7009 (fixes #1362).\n\n  **[IMPORTANT]** now fully according to RFC 7009 nobody can do a revocation request without `client_id`\n  (for public clients) and `client_secret` (for private clients). Please update your apps to include that\n  info in the revocation request payload.\n  \n- [#1373] Make Doorkeeper routes mapper reusable in extensions.\n- [#1374] Revoke and issue client credentials token in a transaction with a row lock.\n- [#1384] Add context object with auth/pre_auth and issued_token for authorization hooks.\n- [#1387] Add `AccessToken#create_for` and use in `RefreshTokenRequest`.\n- [#1392] Fix `enable_polymorphic_resource_owner` migration template to have proper index name.\n- [#1393] Improve Applications #show page with more informative data on client secret and scopes.\n- [#1394] Use Ruby `autoload` feature to load Doorkeeper files.\n\n## 5.3.1\n\n- [#1360] Backport: Increase `matching_token_for` batch lookup size to 10 000 and make it configurable.\n\n## 5.3.0\n\n- [#1339] Validate Resource Owner in `PasswordAccessTokenRequest` against `nil` and `false` values.\n- [#1341] Fix `refresh_token_revoked_on_use` with `hash_token_secrets` enabled.\n- [#1343] Fix ruby 2.7 kwargs warning in InvalidTokenResponse.\n- [#1345] Allow to set custom classes for Doorkeeper models, extract reusable AR mixins.\n- [#1346] Refactor `Doorkeeper::Application#to_json` into convenient `#as_json` (fix #1344).\n- [#1349] Fix `Doorkeeper::Application` AR associations using an incorrect foreign key name when using a custom class.\n- [#1318] Make existing token revocation for client credentials optional and disable it by default.\n\n  **[IMPORTANT]** This is a change compared to the behaviour of version 5.2.\n  If you were relying on access tokens being revoked once the same client\n  requested a new access token, reenable it with `revoke_previous_client_credentials_token` in Doorkeeper\n  initialization file.\n  \n## 5.2.4\n  \n- [#1360] Backport: Increase `matching_token_for` batch lookup size to 10 000 and make it configurable.\n\n## 5.2.3\n\n- [#1334] Remove `application_secret` flash helper and `redirect_to` keyword.\n- [#1331] Move redirect_uri_validator to where it is used (`Application` model).\n- [#1326] Move response_type check in pre_authorization to a method to be easily to override.\n- [#1329] Fix `find_in_batches` order warning.\n\n## 5.2.2\n\n- [#1320] Call configured `authenticate_resource_owner` method once per request.\n- [#1315] Allow generation of new secret with `Doorkeeper::Application#renew_secret`.\n- [#1309] Allow `Doorkeeper::Application#to_json` to work without arguments.\n\n## 5.2.1\n\n- [#1308] Fix flash types for `api_only` mode (no flashes for `ActionController::API`).\n- [#1306] Fix interpolation of `missing_param` I18n.\n\n## 5.2.0\n\n- [#1305] Make `Doorkeeper::ApplicationController` to inherit from `ActionController::API` in cases\n  when `api_mode` enabled (fixes #1302).\n\n## 5.2.0.rc3\n\n- [#1298] Slice strong params so doesn't error with Rails forms.\n- [#1300] Limiting access to attributes of pre_authorization.\n- [#1296] Adding client_id to strong parameters.\n\n  **[IMPORTANT]** `Doorkeeper::Server#client_via_uid` was removed.\n\n- [#1293] Move ar specific redirect uri validator to ar orm directory.\n- [#1288] Allow to pass attributes to the `Doorkeeper::OAuth::PreAuthorization#as_json` method to customize\n  the PreAuthorization response.\n- [#1286] Add ability to customize grant flows per application (OAuth client) (#1245 , #1207)\n- [#1283] Allow to customize base class for `Doorkeeper::ApplicationMetalController` (new configuration\n  option called `base_metal_controller` (fix #1273).\n- [#1277] Prevent requested scope be empty on authorization request, handle and add description for invalid request.\n\n## 5.2.0.rc2\n\n- [#1270] Find matching tokens in batches for `reuse_access_token` option (fix #1193).\n- [#1271] Reintroduce existing token revocation for client credentials.\n\n  **[IMPORTANT]** If you rely on being able to fetch multiple access tokens from the same\n  client using client credentials flow, you should skip to version 5.3, where this behaviour\n  is deactivated by default.\n\n- [#1269] Update initializer template documentation.\n- [#1266] Use strong parameters within pre-authorization.\n- [#1264] Add :before_successful_authorization and :after_successful_authorization hooks in TokensController\n- [#1263] Response properly when introspection fails and fix configurations's user guide.\n\n## 5.2.0.rc1\n\n- [#1260], [#1262] Improve Token Introspection configuration option (access to tokens, client).\n- [#1257] Add constraint configuration when using client authentication on introspection endpoint.\n- [#1252] Returning `unauthorized` when the revocation of the token should not be performed due to wrong permissions.\n- [#1249] Specify case sensitive uniqueness to remove Rails 6 deprecation message\n- [#1248] Display the Application Secret in HTML after creating a new application even when `hash_application_secrets` is used.\n- [#1248] Return the unhashed Application Secret in the JSON response after creating new application even when `hash_application_secrets` is used.\n- [#1238] Better support for native app with support for custom scheme and localhost redirection.\n\n## 5.1.0\n\n- [#1243] Add nil check operator in token checking at token introspection.\n- [#1241] Explaining foreign key options for resource owner in a single place\n- [#1237] Allow to set blank redirect URI if Doorkeeper configured to use redirect URI-less grant flows.\n- [#1234] Fix `StaleRecordsCleaner` to properly work with big amount of records.\n- [#1228] Allow to explicitly set non-expiring tokens in `custom_access_token_expires_in` configuration\n  option using `Float::INIFINITY` return value.\n- [#1224] Do not try to store token if not found by fallback hashing strategy.\n- [#1223] Update Hound/Rubocop rules, correct Doorkeeper codebase to follow style-guides.\n- [#1220] Drop Rails 4.2 & Ruby < 2.4 support.\n\n## 5.1.0.rc2\n\n- [#1208] Unify hashing implementation into secret storing strategies\n\n  **[IMPORTANT]** If you have been using the master branch of doorkeeper with bcrypt in your Gemfile.lock,\n  your application secrets have been hashed using BCrypt. To restore this behavior, use the initializer option\n  `hash_application_secrets using: 'Doorkeeper::SecretStoring::BCrypt`.\n\n- [#1216] Add nil check to `expires_at` method.\n- [#1215] Fix deprecates for Rails 6.\n- [#1214] Scopes field accepts array.\n- [#1209] Fix tokens validation for Token Introspection request.\n- [#1202] Use correct HTTP status codes for error responses.\n\n  **[IMPORTANT]**: this change might break your application if you were relying on the previous\n  401 status codes, this is now a 400 by default, or a 401 for `invalid_client` and `invalid_token` errors.\n\n- [#1201] Fix custom TTL block `client` parameter to always be an `Doorkeeper::Application` instance.\n\n  **[IMPORTANT]**: those who defined `custom_access_token_expires_in` configuration option need to check\n  their block implementation: if you are using `oauth_client.application` to get `Doorkeeper::Application`\n  instance, then you need to replace it with just `oauth_client`.\n\n- [#1200] Increase default Doorkeeper access token value complexity (`urlsafe_base64` instead of just `hex`)\n  matching RFC6749/RFC6750.\n\n  **[IMPORTANT]**: this change have possible side-effects in case you have custom database constraints for\n  access token value, application secrets, refresh tokens or you patched Doorkeeper models and introduced\n  token value validations, or you are using database with case-insensitive WHERE clause like MySQL\n  (you can face some collisions). Before this change access token value matched `[a-f0-9]` regex, and now\n  it matches `[a-zA-Z0-9\\-_]`. In case you have such restrictions and your don't use custom token generator\n  please change configuration option `default_generator_method` to `:hex`.\n\n- [#1195] Allow to customize Token Introspection response (fixes #1194).\n- [#1189] Option to set `token_reuse_limit`.\n- [#1191] Try to load bcrypt for hashing of application secrets, but add fallback.\n\n## 5.1.0.rc1\n\n- [#1188] Use `params` instead of `request.POST` in tokens controller (fixes #1183).\n- [#1182] Fix loopback IP redirect URIs to conform with RFC8252, p. 7.3 (fixes #1170).\n- [#1179] Authorization Code Grant Flow without client id returns invalid_client error.\n- [#1177] Allow to limit `scopes` for certain `grant_types`\n- [#1176] Fix test factory support for `factory_bot_rails`\n- [#1175] Internal refactor: use `scopes_string` inside `scopes`.\n- [#1168] Allow optional hashing of tokens and secrets.\n- [#1164] Fix error when `root_path` is not defined.\n- [#1162] Fix `enforce_content_type` for requests without body.\n\n## 5.0.2\n\n- [#1158] Fix initializer template: change `handle_auth_errors` option\n- [#1157] Remove redundant index from migration template.\n\n## 5.0.1\n\n- [#1154] Refactor `StaleRecordsCleaner` to be ORM agnostic.\n- [#1152] Fix migration template: change resource owner data type from integer to Rails generic `references`\n- [#1151] Fix Refresh Token strategy: add proper validation of client credentials both for Public & Private clients.\n- [#1149] Fix for `URIChecker#valid_for_authorization?` false negative when query is blank, but `?` present.\n- [#1140] Allow rendering custom errors from exceptions (issue #844). Originally opened as [#944].\n- [#1138] Revert regression bug (check for token expiration in Authorizations controller so authorization\n  triggers every time)\n\n## 5.0.0\n\n- [#1127] Change the token_type initials of the Banner Token to uppercase to comply with the RFC6750 specification.\n\n## 5.0.0.rc2\n\n- [#1122] Fix AuthorizationsController#new error response to be in JSON format\n- [#1119] Fix token revocation for OAuth apps using \"implicit\" grant flow\n- [#1116] `AccessGrant`s will now be revoked along with `AccessToken`s when\n  hitting the `AuthorizedApplicationController#destroy` route.\n- [#1114] Make token info endpoint's attributes consistent with token creation\n- [#1108] Simple formating of callback URLs when listing oauth applications\n- [#1106] Restrict access to AdminController with 'Forbidden 403' if admin_authenticator is not\n  configured by developers.\n\n## 5.0.0.rc1\n\n- [#1103] Allow customizing use_refresh_token\n- [#1089] Removed enable_pkce_without_secret configuration option\n- [#1102] Expiration time based on scopes\n- [#1099] All the configuration variables in `Doorkeeper.configuration` now\n  always return a non-nil value (`true` or `false`)\n- [#1099] ORM / Query optimization: Do not revoke the refresh token if it is not enabled\n  in `doorkeeper.rb`\n- [#996] Expiration Time Base On Grant Type\n- [#997] Allow PKCE authorization_code flow as specified in RFC7636\n- [#907] Fix lookup for matching tokens in certain edge-cases\n- [#992] Add API option to use Doorkeeper without management views for API only\n  Rails applications (`api_only`)\n- [#1045] Validate redirect_uri as the native URI when making authorization code requests\n- [#1048] Remove deprecated `Doorkeeper#configured?`, `Doorkeeper#database_installed?`, and\n  `Doorkeeper#installed?` method\n- [#1031] Allow public clients to authenticate without `client_secret`. Define an app as\n  either public or private/confidential\n\n  **[IMPORTANT]**: all the applications (clients) now are considered as private by default.\n  You need to manually change `confidential` column to `false` if you are using public clients,\n  in other case your mobile (or other) applications will not be able to authorize.\n  See [#1142](https://github.com/doorkeeper-gem/doorkeeper/issues/1142) for more details.\n\n- [#1010] Add configuration to enforce configured scopes (`default_scopes` and\n  `optional_scopes`) for applications\n- [#1060] Ensure that the native redirect_uri parameter matches with redirect_uri of the client\n- [#1064] Add :before_successful_authorization and :after_successful_authorization hooks\n- [#1069] Upgrade Bootstrap to 4 for Admin\n- [#1068] Add rake task to cleanup databases that can become large over time\n- [#1072] AuthorizationsController: Memoize strategy.authorize_response result to enable\n  subclasses to use the response object.\n- [#1075] Call `before_successful_authorization` and `after_successful_authorization` hooks\n  on `create` action as well as `new`\n- [#1082] Fix #916: remember routes mapping and use it required places (fix error with\n  customized Token Info route).\n- [#1086, #1088] Fix bug with receiving default scopes in the token even if they are\n  not present in the application scopes (use scopes intersection).\n- [#1076] Add config to enforce content type to application/x-www-form-urlencoded\n- Fix bug with `force_ssl_in_redirect_uri` when it breaks existing applications with an\n  SSL redirect_uri.\n\n## 4.4.3\n\n- [#1143] Adds a config option `opt_out_native_route_change` to opt out of the breaking api\n  changed introduced in https://github.com/doorkeeper-gem/doorkeeper/pull/1003\n\n## 4.4.2\n\n- [#1130] Backport fix for native redirect_uri from 5.x.\n\n## 4.4.1\n\n- [#1127] Backport token type to comply with the RFC6750 specification.\n- [#1125] Backport Quote surround I18n yes/no keys\n\n## 4.4.0\n\n- [#1120] Backport security fix from 5.x for token revocation when using public clients\n\n  **[IMPORTANT]**: all the applications (clients) now are considered as private by default.\n  You need to manually change `confidential` column to `false` if you are using public clients,\n  in other case your mobile (or other) applications will not be able to authorize.\n  See [#1142](https://github.com/doorkeeper-gem/doorkeeper/issues/1142) for more details.\n\n## 4.3.2\n\n- [#1053] Support authorizing with query params in the request `redirect_uri` if explicitly present in app's `Application#redirect_uri`\n\n## 4.3.1\n\n- Remove `BaseRecord` and introduce additional concern for ordering methods to fix\n  braking changes for Doorkeeper models.\n- [#1032] Refactor BaseRequest callbacks into configurable lambdas\n- [#1040] Clear mixins from ActiveRecord DSL and save only overridable API. It\n  allows to use this mixins in Doorkeeper ORM extensions with minimum code boilerplate.\n\n## 4.3.0\n\n- [#976] Fix to invalidate the second redirect URI when the first URI is the native URI\n- [#1035] Allow `Application#redirect_uri=` to handle array of URIs.\n- [#1036] Allow to forbid Application redirect URI's with specific rules.\n- [#1029] Deprecate `order_method` and introduce `ordered_by`. Sort applications\n  by `created_at` in index action.\n- [#1033] Allow Doorkeeper configuration option #force_ssl_in_redirect_uri to be a callable object.\n- Fix Grape integration & add specs for it\n- [#913] Deferred ORM (ActiveRecord) models loading\n- [#943] Fix Access Token token generation when certain errors occur in custom token generators\n- [#1026] Implement RFC7662 - OAuth 2.0 Token Introspection\n- [#985] Generate valid migration files for Rails >= 5\n- [#972] Replace Struct subclassing with block-form initialization\n- [#1003] Use URL query param to pass through native redirect auth code so automated apps can find it.\n\n  **[IMPORTANT]**: Previously authorization code response route was `/oauth/authorize/<code>`,\n  now it is `oauth/authorize/native?code=<code>` (in order to help applications to automatically find the code value).\n\n- [#868] `Scopes#&` and `Scopes#+` now take an array or any other enumerable\n  object.\n- [#1019] Remove translation not in use: `invalid_resource_owner`.\n- Use Ruby 2 hash style syntax (min required Ruby version = 2.1)\n- [#948] Make Scopes.<=> work with any \"other\" value.\n- [#974] Redirect URI is checked without query params within AuthorizationCodeRequest.\n- [#1004] More explicit help text for `native_redirect_uri`.\n- [#1023] Update Ruby versions and test against 2.5.0 on Travis CI.\n- [#1024] Migrate from FactoryGirl to FactoryBot.\n- [#1025] Improve documentation for adding foreign keys\n- [#1028] Make it possible to have composite strategy names.\n\n## 4.2.6\n\n- [#970] Escape certain attributes in authorization forms.\n\n## 4.2.5\n\n- [#936] Deprecate `Doorkeeper#configured?`, `Doorkeeper#database_installed?`, and\n  `Doorkeeper#installed?`\n- [#909] Add `InvalidTokenResponse#reason` reader method to allow read the kind\n  of invalid token error.\n- [#928] Test against more recent Ruby versions\n- Small refactorings within the codebase\n- [#921] Switch to Appraisal, and test against Rails master\n- [#892] Add minimum Ruby version requirement\n\n## 4.2.0\n\n- Security fix: Address CVE-2016-6582, implement token revocation according to\n  spec (tokens might not be revoked if client follows the spec).\n- [#873] Add hooks to Doorkeeper::ApplicationMetalController\n- [#871] Allow downstream users to better utilize doorkeeper spec factories by\n  eliminating name conflict on `:user` factory.\n\n## 4.1.0\n\n- [#845] Allow customising the `Doorkeeper::ApplicationController` base\n  controller\n\n## 4.0.0\n\n- [#834] Fix AssetNotPrecompiled error with Sprockets 4\n- [#843] Revert \"Fix validation error messages\"\n- [#847] Specify Null option to timestamps\n\n## 4.0.0.rc4\n\n- [#777] Add support for public client in password grant flow\n- [#823] Make configuration and specs ORM independent\n- [#745] Add created_at timestamp to token generation options\n- [#838] Drop `Application#scopes` generator and warning, introduced for\n  upgrading doorkeeper from v2 to v3.\n- [#801] Fix Rails 5 warning messages\n- Test against Rails 5 RC1\n\n## 4.0.0.rc3\n\n- [#769] Revoke refresh token on access token use. To make use of the new config\n  add `previous_refresh_token` column to `oauth_access_tokens`:\n\n  ```\n  rails generate doorkeeper:previous_refresh_token\n  ```\n\n- [#811] Toughen parameters filter with exact match\n- [#813] Applications admin bugfix\n- [#799] Fix Ruby Warnings\n- Drop `attr_accessible` from models\n\n### Backward incompatible changes\n\n- [#730] Force all timezones to use UTC to prevent comparison issues.\n- [#802] Remove `config.i18n.fallbacks` from engine\n\n## 4.0.0.rc2\n\n- Fix optional belongs_to for Rails 5\n- Fix Ruby warnings\n\n## 4.0.0.rc1\n\n### Backward incompatible changes\n\n- Drops support for Rails 4.1 and earlier\n- Drops support for Ruby 2.0\n- [#778] Bug fix: use the remaining time that a token is still valid when\n  building the redirect URI for the implicit grant flow\n\n### Other changes\n\n- [#771] Validation error messages fixes\n- Adds foreign key constraints in generated migrations between tokens and\n  grants, and applications\n- Support Rails 5\n\n## 3.1.0\n\n- [#736] Existing valid tokens are now reused in client_credentials flow\n- [#749] Allow user to raise authorization error with custom messages.\n  Under `resource_owner_authenticator` block a user can\n  `raise Doorkeeper::Errors::DoorkeeperError.new('custom_message')`\n- [#762] Check doesn\u2019t abort the actual migration, so it runs\n- [#722] `doorkeeper_forbidden_render_options` now supports returning a 404 by\n  specifying `respond_not_found_when_forbidden: true` in the\n  `doorkeeper_forbidden_render_options` method.\n- [#734] Simplify and remove duplication in request strategy classes\n\n## 3.0.1\n\n- [#712] Wrap exchange of grant token for access token and access token refresh\n  in transactions\n- [#704] Allow applications scopes to be mass assigned\n- [#707] Fixed order of Mixin inclusion and table_name configuration in models\n- [#712] Wrap access token and refresh grants in transactions\n- Adds JRuby support\n- Specs, views and documentation adjustments\n\n## 3.0.0\n\n### Other changes\n\n- [#693] Updates `en.yml`.\n\n## 3.0.0 (rc2)\n\n### Backward incompatible changes\n\n- [#678] Change application-specific scopes to take precedence over server-wide\n  scopes. This removes the previous behavior where the intersection between\n  application and server scopes was used.\n\n### Other changes\n\n- [#671] Fixes `NoMethodError - undefined method 'getlocal'` when calling\n  the /oauth/token path. Switch from using a DateTime object to update\n  AR to using a Time object. (Issue #668)\n- [#677] Support editing application-specific scopes via the standard forms\n- [#682] Pass error hash to Grape `error!`\n- [#683] Generate application secret/UID if fields are blank strings\n\n## 3.0.0 (rc1)\n\n### Backward incompatible changes\n\n- [#648] Extracts mongodb ORMs to\n  https://github.com/doorkeeper-gem/doorkeeper-mongodb. If you use ActiveRecord\n  you don\u2019t need to do any change, otherwise you will need to install the new\n  plugin.\n- [#665] `doorkeeper_unauthorized_render_options(error:)` and\n  `doorkeeper_forbidden_render_options(error:)` now accept `error` keyword\n  argument.\n\n### Removed deprecations\n\n- Removes `doorkeeper_for` deprecation notice.\n- Remove `applications.scopes` upgrade notice.\n\n## 2.2.2\n\n- [#541] Fixed `undefined method attr_accessible` problem on Rails 4\n  (happens only when ProtectedAttributes gem is used) in #599\n\n## 2.2.1\n\n- [#636] `custom_access_token_expires_in` bugfixes\n- [#641] syntax error fix (Issue #612)\n- [#633] Send extra details to Custom Token Generator\n- [#628] Refactor: improve orm adapters to ease extension\n- [#637] Upgrade to rspec to 3.2\n\n## 2.2.0 - 2015-04-19\n\n- [#611] Allow custom access token generators to be used\n- [#632] Properly fallback to `default_scopes` when no scope is specified\n- [#622] Clarify that there is a logical OR between scopes for authorizing\n- [#635] Upgrade to rspec 3\n- [#627] i18n fallbacks to english\n- Moved CHANGELOG to NEWS.md\n\n## 2.1.4 - 2015-03-27\n\n- [#595] HTTP spec: Add `scope` for refresh token scope param\n- [#596] Limit scopes in app scopes for client credentials\n- [#567] Add Grape helpers for easier integration with Grape framework\n- [#606] Add custom access token expiration support for Client Credentials flow\n\n## 2.1.3 - 2015-03-01\n\n- [#588] Fixes scopes_match? bug that skipped authorization form in some cases\n\n## 2.1.2 - 2015-02-25\n\n- [#574] Remove unused update authorization route.\n- [#576] Filter out sensitive parameters from logs.\n- [#582] The Authorization HTTP header fields are now case insensitive.\n- [#583] Database connection bugfix in certain scenarios.\n- Testing improvements\n\n## 2.1.1 - 2015-02-06\n\n- Remove `wildcard_redirect_url` option\n- [#481] Customize token flow OAuth expirations with a config lambda\n- [#568] TokensController: Memoize strategy.authorize_response result to enable\n  subclasses to use the response object.\n- [#571] Fix database initialization issues in some configurations.\n- Documentation improvements\n\n## 2.1.0 - 2015-01-13\n\n- [#540] Include `created_at` in response.\n- [#538] Check application-level scopes in client_credentials and password flow.\n- [5596227] Check application scopes in AccessToken when present. Fixes a bug in\n  doorkeeper 2.0.0 and 2.0.1 referring to application specific scopes.\n- [#534] Internationalizes doorkeeper views.\n- [#545] Ensure there is a connection to the database before checking for\n  missing columns\n- [#546] Use `Doorkeeper::` prefix when referencing `Application` to avoid\n  possible application model name conflict.\n- [#538] Test with Rails ~> 4.2.\n\n### Potentially backward incompatible changes\n\n- Enable by default `authorization_code` and `client_credentials` grant flows.\n  Disables implicit and password grant flows by default.\n- [#510, #544, 722113f] Revoked refresh token response bugfix.\n\n## 2.0.1 - 2014-12-17\n\n- [#525, #526, #527] Fix `ActiveRecord::NoDatabaseError` on gem load.\n\n## 2.0.0 - 2014-12-16\n\n### Backward incompatible changes\n\n- [#448] Removes `doorkeeper_for` helper. Now we use\n  `before_action :doorkeeper_authorize!`.\n- [#469] Allow client applications to restrict the set of allowable scopes.\n  Fixes #317. `oauth_applications` relation needs a new `scopes` string column,\n  non nullable, which defaults to an empty string. To add the column run:\n\n  ```\n  rails generate doorkeeper:application_scopes\n  ```\n\n  If you\u2019d rather do it by hand, your ActiveRecord migration should contain:\n\n  ```ruby\n  add_column :oauth_applications, :scopes, :string, null: false, default: \u2018\u2019\n  ```\n\n### Removed deprecations\n\n- Removes `test_redirect_uri` option. It is now called `native_redirect_uri`.\n- [#446] Removes `mount Doorkeeper::Engine`. Now we use `use_doorkeeper`.\n\n### Others\n\n- [#484] Performance improvement - avoid performing order_by when not required.\n- [#450] When password is invalid in Password Credentials Grant, Doorkeeper\n  returned 'invalid_resource_owner' instead of 'invalid_grant', as the spec\n  declares. Fixes #444.\n- [#452] Allows `revoked_at` to be set in the future, for future expiry.\n  Rationale: https://github.com/doorkeeper-gem/doorkeeper/pull/452#issuecomment-51431459\n- [#480] For Implicit grant flow, access tokens can now be reused. Fixes #421.\n- [#491] Reworks of @jasl's #454 and #478. ORM refactor that allows doorkeeper\n  to be extended more easily with unsupported ORMs. It also marks the boundaries\n  between shared model code and ORM specifics inside of the gem.\n- [#496] Tests with Rails 4.2.\n- [#489] Adds `force_ssl_in_redirect_uri` to force the usage of the HTTPS\n  protocol in non-native redirect uris.\n- [#516] SECURITY: Adds `protect_from_forgery` to `Doorkeeper::ApplicationController`\n- [#518] Fix random failures in mongodb.\n\n---\n\n## 1.4.2 - 2015-03-02\n\n- [#576] Filter out sensitive parameters from logs\n\n## 1.4.1 - 2014-12-17\n\n- [#516] SECURITY: Adds `protect_from_forgery` to `Doorkeeper::ApplicationController`\n\n## 1.4.0 - 2014-07-31\n\n- internals\n  - [#427] Adds specs expectations.\n  - [#428] Error response refactor.\n  - [#417] Moves token validation into Access Token class.\n  - [#439] Removes redundant module includes.\n  - [#443] TokensController and TokenInfoController inherit from ActionController::Metal\n- bug\n  - [#418] fixes #243, requests with insufficient scope now respond 403 instead\n    of 401. (API change)\n  - [#438] fixes #398, native redirect for implicit token grant bug.\n  - [#440] namespace fixes\n- enhancements\n  - [#432] Keeps query parameters\n\n## 1.3.1 - 2014-07-06\n\n- enhancements\n  - [#405] Adds facade to more easily get the token from a request in a route\n    constraint.\n  - [#415] Extend Doorkeeper TokenResponse with an `after_successful_response`\n    callback that allows handling of `response` object.\n- internals\n  - [#409] Deprecates `test_redirect_uri` in favor of `native_redirect_uri`.\n    See discussion in: [#351].\n  - [#411] Clean rspec deprecations. General test improvements.\n  - [#412] rspec line width can go longer than 80 (hound CI config).\n- bug\n  - [#413] fixes #340, routing scope is now taken into account in redirect.\n  - [#401] and [#425] application is not required any longer for access_token.\n\n## 1.3.0 - 2014-05-23\n\n- enhancements\n  - [#387] Adds reuse_access_token configuration option.\n\n## 1.2.0 - 2014-05-02\n\n- enhancements\n  - [#376] Allow users to enable basic header authorization for access tokens.\n  - [#374] Token revocation implementation [RFC 7009]\n  - [#295] Only enable specific grant flows.\n- internals\n  - [#381] Locale source fix.\n  - [#380] Renames `errors_for` to `doorkeeper_errors_for`.\n  - [#390] Style adjustments in accordance with Ruby Style Guide form\n    Thoughtbot.\n\n## 1.1.0 - 2014-03-29\n\n- enhancements\n  - [#336] mongoid4 support.\n  - [#372] Allow users to set ActiveRecord table_name_prefix/suffix options\n- internals\n  - [#343] separate OAuth's admin and user end-point to different layouts, upgrade theme to Bootstrap 3.1.\n  - [#348] Move render_options in filter after `@error` has been set\n\n## 1.0.0 - 2014-01-13\n\n- bug (spec)\n  - [#228] token response `expires_in` value is now in seconds, relative to\n    request time\n  - [#296] client is optional for password grant type.\n  - [#319] If client credentials are present on password grant type they are validated\n  - [#326] If client credentials are present in refresh token they are validated\n  - [#326] If authenticated client does not match original client that\n    obtained a refresh token it responds `invalid_grant` instead of\n    `invalid_client`. Previous usage was invalid according to Section 5.2 of\n    the spec.\n  - [#329] access tokens' `scopes` string wa being compared against\n    `default_scopes` symbols, always unauthorizing.\n  - [#318] Include \"WWW-Authenticate\" header with Unauthorized responses\n- enhancements\n  - [#293] Adds ActionController::Instrumentation in TokensController\n  - [#298] Support for multiple redirect_uris added.\n  - [#313] `AccessToken.revoke_all_for` actually revokes all non-revoked\n    tokens for an application/owner instead of deleting them.\n  - [#333] Rails 4.1 support\n- internals\n  - Removes jQuery dependency [fixes #300][pr #312 is related]\n  - [#294] Client uid and secret will be generated only if not present.\n  - [#316] Test warnings addressed.\n  - [#338] Rspec 3 syntax.\n\n---\n\n## 0.7.4 - 2013-12-01\n\n- bug\n  - Symbols instead of strings for user input.\n\n## 0.7.3 - 2013-10-04\n\n- enhancements\n  - [#204] Allow to overwrite scope in routes\n- internals\n  - Returns only present keys in Token Response (may imply a backwards\n    incompatible change). https://github.com/doorkeeper-gem/doorkeeper/issues/220\n- bug\n  - [#290] Support for Rails 4 when 'protected_attributes' gem is present.\n\n## 0.7.2 - 2013-09-11\n\n- enhancements\n  - [#272] Allow issuing multiple access_tokens for one user/application for multiple devices\n  - [#170] Increase length of allowed redirect URIs\n  - [#239] Do not try to load unavailable Request class for the current phase.\n  - [#273] Relax jquery-rails gem dependency\n\n## 0.7.1 - 2013-08-30\n\n- bug\n  - [#269] Rails 3.2 raised `ActiveModel::MassAssignmentSecurity::Error`.\n\n## 0.7.0 - 2013-08-21\n\n- enhancements\n  - [#229] Rails 4!\n- internals\n  - [#203] Changing table name to be specific in column_names_with_table\n  - [#215] README update\n  - [#227] Use Rails.config.paths[\"config/routes\"] instead of assuming \"config/routes.rb\" exists\n  - [#262] Add jquery as gem dependency\n  - [#263] Add a configuration for ActiveRecord.establish_connection\n  - Deprecation and Ruby warnings (PRs merged outside of GitHub).\n\n## 0.6.7 - 2013-01-13\n\n- internals\n  - [#188] Add IDs to the show views for integration testing [@egtann](https://github.com/egtann)\n\n## 0.6.6 - 2013-01-04\n\n- enhancements\n  - [#187] Raise error if configuration is not set\n\n## 0.6.5 - 2012-12-26\n\n- enhancements\n  - [#184] Vendor the Bootstrap CSS [@tylerhunt](https://github.com/tylerhunt)\n\n## 0.6.4 - 2012-12-15\n\n- bug\n  - [#180] Add localization to authorized_applications destroy notice [@aalvarado](https://github.com/aalvarado)\n\n## 0.6.3 - 2012-12-07\n\n- bugfixes\n  - [#163] Error response content-type header should be application/json [@ggayan](https://github.com/ggayan)\n  - [#175] Make token.expires_in_seconds return nil when expires_in is nil [@miyagawa](https://github.com/miyagawa)\n- enhancements\n  - [#166, #172, #174] Behavior to automatically authorize based on a configured proc\n- internals\n  - [#168] Using expectation syntax for controller specs [@rdsoze](https://github.com/rdsoze)\n\n## 0.6.2 - 2012-11-10\n\n- bugfixes\n  - [#162] Remove ownership columns from base migration template [@rdsoze](https://github.com/rdsoze)\n\n## 0.6.1 - 2012-11-07\n\n- bugfixes\n  - [#160] Removed |routes| argument from initializer authenticator blocks\n- documentation\n  - [#160] Fixed description of context of authenticator blocks\n\n## 0.6.0 - 2012-11-05\n\n- enhancements\n  - Mongoid `orm` configuration accepts only :mongoid2 or :mongoid3\n  - Authorization endpoint does not redirect in #new action anymore. It wasn't specified by OAuth spec\n  - TokensController now inherits from ActionController::Metal. There might be performance upgrades\n  - Add link to authorization in Applications scaffold\n  - [#116] MongoMapper support [@carols10cents](https://github.com/carols10cents)\n  - [#122] Mongoid3 support [@petergoldstein](https://github.com/petergoldstein)\n  - [#150] Introduce test redirect uri for applications\n- bugfixes\n  - [#157] Response token status should be `:ok`, not `:success` [@theycallmeswift](https://github.com/theycallmeswift)\n  - [#159] Remove ActionView::Base.field_error_proc override (fixes #145)\n- internals\n  - Update development dependencies\n  - Several refactorings\n  - Rails/ORM are easily swichable with env vars (rails and orm)\n  - Travis now tests against Mongoid v2\n\n## 0.5.0 - 2012-10-20\n\nOfficial support for rubinius was removed.\n\n- enhancements\n  - Configure the way access token is retrieved from request (default to bearer header)\n  - Authorization Code expiration time is now configurable\n  - Add support for mongoid\n  - [#78, #128, #137, #138] Application Ownership\n  - [#92] Allow users to skip controllers\n  - [#99] Remove deprecated warnings for data-\\* attributes [@towerhe](https://github.com/towerhe)\n  - [#101] Return existing access_token for PasswordAccessTokenRequest [@benoist](https://github.com/benoist)\n  - [#104] Changed access token scopes example code to default_scopes and optional_scopes [@amkirwan](https://github.com/amkirwan)\n  - [#107] Fix typos in initializer\n  - [#123] i18n for validator, flash messages [@petergoldstein](https://github.com/petergoldstein)\n  - [#140] ActiveRecord is the default value for the ORM [@petergoldstein](https://github.com/petergoldstein)\n- internals\n  - [#112, #120] Replacing update_attribute with update_column to eliminate deprecation warnings [@rmoriz](https://github.com/rmoriz), [@petergoldstein](https://github.com/petergoldstein)\n  - [#121] Updating all development dependencies to recent versions. [@petergoldstein](https://github.com/petergoldstein)\n  - [#144] Adding MongoDB dependency to .travis.yml [@petergoldstein](https://github.com/petergoldstein)\n  - [#143] Displays errors for unconfigured error messages [@timgaleckas](https://github.com/timgaleckas)\n- bugfixes\n  - [#102] Not returning 401 when access token generation fails [@cslew](https://github.com/cslew)\n  - [#125] Doorkeeper is using ActiveRecord version of as_json in ORM agnostic code [@petergoldstein](https://github.com/petergoldstein)\n  - [#142] Prevent double submission of password based authentication [@bdurand](https://github.com/bdurand)\n- documentation\n  - [#141] Add rack-cors middleware to readme [@gottfrois](https://github.com/gottfrois)\n\n## 0.4.2 - 2012-06-05\n\n- bugfixes:\n  - [#94] Uninitialized Constant in Password Flow\n\n## 0.4.1 - 2012-06-02\n\n- enhancements:\n  - Backport: Move doorkeeper_for extension to Filter helper\n\n## 0.4.0 - 2012-05-26\n\n- deprecation\n  - Deprecate authorization_scopes\n- database changes\n  - AccessToken#resource_owner_id is not nullable\n- enhancements\n  - [#83] Add Resource Owner Password Credentials flow [@jaimeiniesta](https://github.com/jaimeiniesta)\n  - [#76] Allow token expiration to be disabled [@mattgreen](https://github.com/mattgreen)\n  - [#89] Configure the way client credentials are retrieved from request\n  - [#b6470a] Add Client Credentials flow\n- internals\n  - [#2ece8d, #f93778] Introduce Client and ErrorResponse classes\n\n## 0.3.4 - 2012-05-24\n\n- Fix attr_accessible for rails 3.2.x\n\n## 0.3.3 - 2012-05-07\n\n- [#86] shrink gem package size\n\n## 0.3.2 - 2012-04-29\n\n- enhancements\n  - [#54] Ignore Authorization: headers that are not Bearer [@miyagawa](https://github.com/miyagawa)\n  - [#58, #64] Add destroy action to applications endpoint [@jaimeiniesta](https://github.com/jaimeiniesta), [@davidfrey](https://github.com/davidfrey)\n  - [#63] TokensController responds with `401 unauthorized` [@jaimeiniesta](https://github.com/jaimeiniesta)\n  - [#67, #72] Fix for mass-assignment [@cicloid](https://github.com/cicloid)\n- internals\n  - [#49] Add Gemnasium status image to README [@laserlemon](https://github.com/laserlemon)\n  - [#50] Fix typos [@tomekw](https://github.com/tomekw)\n  - [#51] Updated the factory_girl_rails dependency, fix expires_in response which returned a float number instead of integer [@antekpiechnik](https://github.com/antekpiechnik)\n  - [#62] Typos, .gitignore [@jaimeiniesta](https://github.com/jaimeiniesta)\n  - [#65] Change \\_path redirections to \\_url redirections [@jaimeiniesta](https://github.com/jaimeiniesta)\n  - [#75] Fix unknown method #authenticate_admin! [@mattgreen](https://github.com/mattgreen)\n  - Remove application link in authorized app view\n\n## 0.3.1 - 2012-02-17\n\n- enhancements\n  - [#48] Add if, else options to doorkeeper_for\n  - Add views generator\n- internals\n  - Namespace models\n\n## 0.3.0 - 2012-02-11\n\n- enhancements\n  - [#17, #31] Add support for client credentials in basic auth header [@GoldsteinTechPartners](https://github.com/GoldsteinTechPartners)\n  - [#28] Add indices to migration [@GoldsteinTechPartners](https://github.com/GoldsteinTechPartners)\n  - [#29] Allow doorkeeper to run with rails 3.2 [@john-griffin](https://github.com/john-griffin)\n  - [#30] Improve client's redirect uri validation [@GoldsteinTechPartners](https://github.com/GoldsteinTechPartners)\n  - [#32] Add token (implicit grant) flow [@GoldsteinTechPartners](https://github.com/GoldsteinTechPartners)\n  - [#34] Add support for custom unathorized responses [@GoldsteinTechPartners](https://github.com/GoldsteinTechPartners)\n  - [#36] Remove repetitions from the Authorised Applications view [@carvil](https://github.com/carvil)\n  - When user revoke an application, all tokens for that application are revoked\n  - Error messages now can be translated\n  - Install generator copies the error messages localization file\n- internals\n  - Fix deprecation warnings in ActiveSupport::Base64\n  - Remove deprecation in doorkeeper_for that handles hash arguments\n  - Depends on railties instead of whole rails framework\n  - CI now integrates with rails 3.1 and 3.2\n\n## 0.2.0 - 2011-12-17\n\n- enhancements\n  - [#4] Add authorized applications endpoint\n  - [#5, #11] Add access token scopes\n  - [#10] Add access token expiration by default\n  - [#9, #12] Add refresh token flow\n- internals\n  - [#7] Improve configuration options with :default\n  - Improve configuration options with :builder\n  - Refactor config class\n  - Improve coverage of authorization request integration\n- bug fixes\n  - [#6, #20] Fix access token response headers\n  - Fix issue with state parameter\n- deprecation\n  - deprecate :only and :except options in doorkeeper_for\n\n## 0.1.1 - 2011-11-30\n\n- enhancements\n  - [#3] Authorization code must be short lived and single use\n  - [#2] Improve views provided by doorkeeper\n  - [#1] Skips authorization form if the client has been authorized by the resource owner\n  - Improve readme\n- bugfixes\n  - Fix issue when creating the access token (wrong client id)\n\n## 0.1.0 - 2011-11-25\n\n- Authorization Code flow\n- OAuth applications endpoint\n", "# frozen_string_literal: true\n\nmodule Doorkeeper\n  class ApplicationsController < Doorkeeper::ApplicationController\n    layout \"doorkeeper/admin\" unless Doorkeeper.configuration.api_only\n\n    before_action :authenticate_admin!\n    before_action :set_application, only: %i[show edit update destroy]\n\n    def index\n      @applications = Doorkeeper.config.application_model.ordered_by(:created_at)\n\n      respond_to do |format|\n        format.html\n        format.json { head :no_content }\n      end\n    end\n\n    def show\n      respond_to do |format|\n        format.html\n        format.json { render json: @application }\n      end\n    end\n\n    def new\n      @application = Doorkeeper.config.application_model.new\n    end\n\n    def create\n      @application = Doorkeeper.config.application_model.new(application_params)\n\n      if @application.save\n        flash[:notice] = I18n.t(:notice, scope: %i[doorkeeper flash applications create])\n        flash[:application_secret] = @application.plaintext_secret\n\n        respond_to do |format|\n          format.html { redirect_to oauth_application_url(@application) }\n          format.json { render json: @application }\n        end\n      else\n        respond_to do |format|\n          format.html { render :new }\n          format.json do\n            errors = @application.errors.full_messages\n\n            render json: { errors: errors }, status: :unprocessable_entity\n          end\n        end\n      end\n    end\n\n    def edit; end\n\n    def update\n      if @application.update(application_params)\n        flash[:notice] = I18n.t(:notice, scope: i18n_scope(:update))\n\n        respond_to do |format|\n          format.html { redirect_to oauth_application_url(@application) }\n          format.json { render json: @application }\n        end\n      else\n        respond_to do |format|\n          format.html { render :edit }\n          format.json do\n            errors = @application.errors.full_messages\n\n            render json: { errors: errors }, status: :unprocessable_entity\n          end\n        end\n      end\n    end\n\n    def destroy\n      flash[:notice] = I18n.t(:notice, scope: i18n_scope(:destroy)) if @application.destroy\n\n      respond_to do |format|\n        format.html { redirect_to oauth_applications_url }\n        format.json { head :no_content }\n      end\n    end\n\n    private\n\n    def set_application\n      @application = Doorkeeper.config.application_model.find(params[:id])\n    end\n\n    def application_params\n      params.require(:doorkeeper_application)\n        .permit(:name, :redirect_uri, :scopes, :confidential)\n    end\n\n    def i18n_scope(action)\n      %i[doorkeeper flash applications] << action\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nmodule Doorkeeper\n  class AuthorizedApplicationsController < Doorkeeper::ApplicationController\n    before_action :authenticate_resource_owner!\n\n    def index\n      @applications = Doorkeeper.config.application_model.authorized_for(current_resource_owner)\n\n      respond_to do |format|\n        format.html\n        format.json { render json: @applications }\n      end\n    end\n\n    def destroy\n      Doorkeeper.config.application_model.revoke_tokens_and_grants_for(\n        params[:id],\n        current_resource_owner,\n      )\n\n      respond_to do |format|\n        format.html do\n          redirect_to oauth_authorized_applications_url, notice: I18n.t(\n            :notice, scope: %i[doorkeeper flash authorized_applications destroy],\n          )\n        end\n\n        format.json { render :no_content }\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nmodule Doorkeeper::Orm::ActiveRecord::Mixins\n  module Application\n    extend ActiveSupport::Concern\n\n    included do\n      self.table_name = \"#{table_name_prefix}oauth_applications#{table_name_suffix}\"\n\n      include ::Doorkeeper::ApplicationMixin\n\n      has_many :access_grants,\n               foreign_key: :application_id,\n               dependent: :delete_all,\n               class_name: Doorkeeper.config.access_grant_class.to_s\n\n      has_many :access_tokens,\n               foreign_key: :application_id,\n               dependent: :delete_all,\n               class_name: Doorkeeper.config.access_token_class.to_s\n\n      validates :name, :secret, :uid, presence: true\n      validates :uid, uniqueness: { case_sensitive: true }\n      validates :redirect_uri, \"doorkeeper/redirect_uri\": true\n      validates :confidential, inclusion: { in: [true, false] }\n\n      validate :scopes_match_configured, if: :enforce_scopes?\n\n      before_validation :generate_uid, :generate_secret, on: :create\n\n      has_many :authorized_tokens,\n               -> { where(revoked_at: nil) },\n               foreign_key: :application_id,\n               class_name: Doorkeeper.config.access_token_class.to_s\n\n      has_many :authorized_applications,\n               through: :authorized_tokens,\n               source: :application\n\n      # Generates a new secret for this application, intended to be used\n      # for rotating the secret or in case of compromise.\n      #\n      # @return [String] new transformed secret value\n      #\n      def renew_secret\n        @raw_secret = Doorkeeper::OAuth::Helpers::UniqueToken.generate\n        secret_strategy.store_secret(self, :secret, @raw_secret)\n      end\n\n      # We keep a volatile copy of the raw secret for initial communication\n      # The stored refresh_token may be mapped and not available in cleartext.\n      #\n      # Some strategies allow restoring stored secrets (e.g. symmetric encryption)\n      # while hashing strategies do not, so you cannot rely on this value\n      # returning a present value for persisted tokens.\n      def plaintext_secret\n        if secret_strategy.allows_restoring_secrets?\n          secret_strategy.restore_secret(self, :secret)\n        else\n          @raw_secret\n        end\n      end\n\n      # This is the right way how we want to override ActiveRecord #to_json\n      #\n      # @return [String] entity attributes as JSON\n      #\n      def as_json(options = {})\n        hash = super\n\n        hash[\"secret\"] = plaintext_secret if hash.key?(\"secret\")\n        hash\n      end\n\n      def authorized_for_resource_owner?(resource_owner)\n        Doorkeeper.configuration.authorize_resource_owner_for_client.call(self, resource_owner)\n      end\n\n      private\n\n      def generate_uid\n        self.uid = Doorkeeper::OAuth::Helpers::UniqueToken.generate if uid.blank?\n      end\n\n      def generate_secret\n        return if secret.present?\n\n        renew_secret\n      end\n\n      def scopes_match_configured\n        if scopes.present? && !Doorkeeper::OAuth::Helpers::ScopeChecker.valid?(\n          scope_str: scopes.to_s,\n          server_scopes: Doorkeeper.config.scopes,\n        )\n          errors.add(:scopes, :not_match_configured)\n        end\n      end\n\n      def enforce_scopes?\n        Doorkeeper.config.enforce_configured_scopes?\n      end\n    end\n\n    module ClassMethods\n      # Returns Applications associated with active (not revoked) Access Tokens\n      # that are owned by the specific Resource Owner.\n      #\n      # @param resource_owner [ActiveRecord::Base]\n      #   Resource Owner model instance\n      #\n      # @return [ActiveRecord::Relation]\n      #   Applications authorized for the Resource Owner\n      #\n      def authorized_for(resource_owner)\n        resource_access_tokens = Doorkeeper.config.access_token_model.active_for(resource_owner)\n        where(id: resource_access_tokens.select(:application_id).distinct)\n      end\n\n      # Revokes AccessToken and AccessGrant records that have not been revoked and\n      # associated with the specific Application and Resource Owner.\n      #\n      # @param resource_owner [ActiveRecord::Base]\n      #   instance of the Resource Owner model\n      #\n      def revoke_tokens_and_grants_for(id, resource_owner)\n        Doorkeeper.config.access_token_model.revoke_all_for(id, resource_owner)\n        Doorkeeper.config.access_grant_model.revoke_all_for(id, resource_owner)\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nrequire \"spec_helper\"\nrequire \"bcrypt\"\n\ndescribe Doorkeeper::Application do\n  let(:require_owner) { Doorkeeper.config.instance_variable_set(\"@confirm_application_owner\", true) }\n  let(:unset_require_owner) { Doorkeeper.config.instance_variable_set(\"@confirm_application_owner\", false) }\n  let(:new_application) { FactoryBot.build(:application) }\n\n  let(:uid) { SecureRandom.hex(8) }\n  let(:secret) { SecureRandom.hex(8) }\n\n  it \"is invalid without a name\" do\n    new_application.name = nil\n    expect(new_application).not_to be_valid\n  end\n\n  it \"is invalid without determining confidentiality\" do\n    new_application.confidential = nil\n    expect(new_application).not_to be_valid\n  end\n\n  it \"generates uid on create\" do\n    expect(new_application.uid).to be_nil\n    new_application.save\n    expect(new_application.uid).not_to be_nil\n  end\n\n  it \"generates uid on create if an empty string\" do\n    new_application.uid = \"\"\n    new_application.save\n    expect(new_application.uid).not_to be_blank\n  end\n\n  it \"generates uid on create unless one is set\" do\n    new_application.uid = uid\n    new_application.save\n    expect(new_application.uid).to eq(uid)\n  end\n\n  it \"is invalid without uid\" do\n    new_application.save\n    new_application.uid = nil\n    expect(new_application).not_to be_valid\n  end\n\n  it \"checks uniqueness of uid\" do\n    app1 = FactoryBot.create(:application)\n    app2 = FactoryBot.create(:application)\n    app2.uid = app1.uid\n    expect(app2).not_to be_valid\n  end\n\n  it \"expects database to throw an error when uids are the same\" do\n    app1 = FactoryBot.create(:application)\n    app2 = FactoryBot.create(:application)\n    app2.uid = app1.uid\n    expect { app2.save!(validate: false) }.to raise_error(uniqueness_error)\n  end\n\n  it \"generate secret on create\" do\n    expect(new_application.secret).to be_nil\n    new_application.save\n    expect(new_application.secret).not_to be_nil\n  end\n\n  it \"generate secret on create if is blank string\" do\n    new_application.secret = \"\"\n    new_application.save\n    expect(new_application.secret).not_to be_blank\n  end\n\n  it \"generate secret on create unless one is set\" do\n    new_application.secret = secret\n    new_application.save\n    expect(new_application.secret).to eq(secret)\n  end\n\n  it \"is invalid without secret\" do\n    new_application.save\n    new_application.secret = nil\n    expect(new_application).not_to be_valid\n  end\n\n  context \"application_owner is enabled\" do\n    before do\n      Doorkeeper.configure do\n        orm DOORKEEPER_ORM\n        enable_application_owner\n      end\n    end\n\n    context \"application owner is not required\" do\n      before(:each) do\n        unset_require_owner\n      end\n\n      it \"is valid given valid attributes\" do\n        expect(new_application).to be_valid\n      end\n    end\n\n    context \"application owner is required\" do\n      before(:each) do\n        require_owner\n        @owner = FactoryBot.build_stubbed(:doorkeeper_testing_user)\n      end\n\n      it \"is invalid without an owner\" do\n        expect(new_application).not_to be_valid\n      end\n\n      it \"is valid with an owner\" do\n        new_application.owner = @owner\n        expect(new_application).to be_valid\n      end\n    end\n  end\n\n  context \"redirect URI\" do\n    context \"when grant flows allow blank redirect URI\" do\n      before do\n        Doorkeeper.configure do\n          grant_flows %w[password client_credentials]\n        end\n      end\n\n      it \"is valid without redirect_uri\" do\n        new_application.save\n        new_application.redirect_uri = nil\n        expect(new_application).to be_valid\n      end\n    end\n\n    context \"when grant flows require redirect URI\" do\n      before do\n        Doorkeeper.configure do\n          grant_flows %w[password client_credentials authorization_code]\n        end\n      end\n\n      it \"is invalid without redirect_uri\" do\n        new_application.save\n        new_application.redirect_uri = nil\n        expect(new_application).not_to be_valid\n      end\n    end\n\n    context \"when blank URI option disabled\" do\n      before do\n        Doorkeeper.configure do\n          grant_flows %w[password client_credentials]\n          allow_blank_redirect_uri false\n        end\n      end\n\n      it \"is invalid without redirect_uri\" do\n        new_application.save\n        new_application.redirect_uri = nil\n        expect(new_application).not_to be_valid\n      end\n    end\n  end\n\n  context \"with hashing enabled\" do\n    include_context \"with application hashing enabled\"\n    let(:app) { FactoryBot.create :application }\n    let(:default_strategy) { Doorkeeper::SecretStoring::Sha256Hash }\n\n    it \"uses SHA256 to avoid additional dependencies\" do\n      # Ensure token was generated\n      app.validate\n      expect(app.secret).to eq(default_strategy.transform_secret(app.plaintext_secret))\n    end\n\n    context \"when bcrypt strategy is configured\" do\n      # In this text context, we have bcrypt loaded so `bcrypt_present?`\n      # will always be true\n      before do\n        Doorkeeper.configure do\n          hash_application_secrets using: \"Doorkeeper::SecretStoring::BCrypt\"\n        end\n      end\n\n      it \"holds a volatile plaintext and BCrypt secret\" do\n        expect(app.secret_strategy).to eq Doorkeeper::SecretStoring::BCrypt\n        expect(app.plaintext_secret).to be_a(String)\n        expect(app.secret).not_to eq(app.plaintext_secret)\n        expect { ::BCrypt::Password.create(app.secret) }.not_to raise_error\n      end\n    end\n\n    it \"does not fallback to plain lookup by default\" do\n      lookup = described_class.by_uid_and_secret(app.uid, app.secret)\n      expect(lookup).to eq(nil)\n\n      lookup = described_class.by_uid_and_secret(app.uid, app.plaintext_secret)\n      expect(lookup).to eq(app)\n    end\n\n    context \"with fallback enabled\" do\n      include_context \"with token hashing and fallback lookup enabled\"\n\n      it \"provides plain and hashed lookup\" do\n        lookup = described_class.by_uid_and_secret(app.uid, app.secret)\n        expect(lookup).to eq(app)\n\n        lookup = described_class.by_uid_and_secret(app.uid, app.plaintext_secret)\n        expect(lookup).to eq(app)\n      end\n    end\n\n    it \"does not provide access to secret after loading\" do\n      lookup = described_class.by_uid_and_secret(app.uid, app.plaintext_secret)\n      expect(lookup.plaintext_secret).to be_nil\n    end\n  end\n\n  describe \"destroy related models on cascade\" do\n    before(:each) do\n      new_application.save\n    end\n\n    let(:resource_owner) { FactoryBot.create(:resource_owner) }\n\n    it \"should destroy its access grants\" do\n      FactoryBot.create(\n        :access_grant,\n        application: new_application,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n      )\n\n      expect { new_application.destroy }.to change { Doorkeeper::AccessGrant.count }.by(-1)\n    end\n\n    it \"should destroy its access tokens\" do\n      FactoryBot.create(:access_token, application: new_application)\n      FactoryBot.create(:access_token, application: new_application, revoked_at: Time.now.utc)\n      expect do\n        new_application.destroy\n      end.to change { Doorkeeper::AccessToken.count }.by(-2)\n    end\n  end\n\n  describe \"#ordered_by\" do\n    let(:applications) { FactoryBot.create_list(:application, 5) }\n\n    context \"when a direction is not specified\" do\n      it \"calls order with a default order of asc\" do\n        names = applications.map(&:name).sort\n        expect(described_class.ordered_by(:name).map(&:name)).to eq(names)\n      end\n    end\n\n    context \"when a direction is specified\" do\n      it \"calls order with specified direction\" do\n        names = applications.map(&:name).sort.reverse\n        expect(described_class.ordered_by(:name, :desc).map(&:name)).to eq(names)\n      end\n    end\n  end\n\n  describe \"#redirect_uri=\" do\n    context \"when array of valid redirect_uris\" do\n      it \"should join by newline\" do\n        new_application.redirect_uri = [\"http://localhost/callback1\", \"http://localhost/callback2\"]\n        expect(new_application.redirect_uri).to eq(\"http://localhost/callback1\\nhttp://localhost/callback2\")\n      end\n    end\n    context \"when string of valid redirect_uris\" do\n      it \"should store as-is\" do\n        new_application.redirect_uri = \"http://localhost/callback1\\nhttp://localhost/callback2\"\n        expect(new_application.redirect_uri).to eq(\"http://localhost/callback1\\nhttp://localhost/callback2\")\n      end\n    end\n  end\n\n  describe \"#renew_secret\" do\n    let(:app) { FactoryBot.create :application }\n\n    it \"should generate a new secret\" do\n      old_secret = app.secret\n      app.renew_secret\n      expect(old_secret).not_to eq(app.secret)\n    end\n  end\n\n  describe \"#authorized_for\" do\n    let(:resource_owner) { FactoryBot.create(:resource_owner) }\n    let(:other_resource_owner) { FactoryBot.create(:resource_owner) }\n\n    it \"is empty if the application is not authorized for anyone\" do\n      expect(described_class.authorized_for(resource_owner)).to be_empty\n    end\n\n    it \"returns only application for a specific resource owner\" do\n      FactoryBot.create(\n        :access_token,\n        resource_owner_id: other_resource_owner.id,\n        resource_owner_type: other_resource_owner.class.name,\n      )\n      token = FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n      )\n      expect(described_class.authorized_for(resource_owner)).to eq([token.application])\n    end\n\n    it \"excludes revoked tokens\" do\n      FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n        revoked_at: 2.days.ago,\n      )\n      expect(described_class.authorized_for(resource_owner)).to be_empty\n    end\n\n    it \"returns all applications that have been authorized\" do\n      token1 = FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n      )\n      token2 = FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n      )\n      expect(described_class.authorized_for(resource_owner))\n        .to eq([token1.application, token2.application])\n    end\n\n    it \"returns only one application even if it has been authorized twice\" do\n      application = FactoryBot.create(:application)\n      FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n        application: application,\n      )\n      FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n        application: application,\n      )\n      expect(described_class.authorized_for(resource_owner)).to eq([application])\n    end\n  end\n\n  describe \"#revoke_tokens_and_grants_for\" do\n    it \"revokes all access tokens and access grants\" do\n      application_id = 42\n      resource_owner = double\n      expect(Doorkeeper::AccessToken)\n        .to receive(:revoke_all_for).with(application_id, resource_owner)\n      expect(Doorkeeper::AccessGrant)\n        .to receive(:revoke_all_for).with(application_id, resource_owner)\n\n      described_class.revoke_tokens_and_grants_for(application_id, resource_owner)\n    end\n  end\n\n  describe \"#by_uid_and_secret\" do\n    context \"when application is private/confidential\" do\n      it \"finds the application via uid/secret\" do\n        app = FactoryBot.create :application\n        authenticated = described_class.by_uid_and_secret(app.uid, app.secret)\n        expect(authenticated).to eq(app)\n      end\n      context \"when secret is wrong\" do\n        it \"should not find the application\" do\n          app = FactoryBot.create :application\n          authenticated = described_class.by_uid_and_secret(app.uid, \"bad\")\n          expect(authenticated).to eq(nil)\n        end\n      end\n    end\n\n    context \"when application is public/non-confidential\" do\n      context \"when secret is blank\" do\n        it \"should find the application\" do\n          app = FactoryBot.create :application, confidential: false\n          authenticated = described_class.by_uid_and_secret(app.uid, nil)\n          expect(authenticated).to eq(app)\n        end\n      end\n      context \"when secret is wrong\" do\n        it \"should not find the application\" do\n          app = FactoryBot.create :application, confidential: false\n          authenticated = described_class.by_uid_and_secret(app.uid, \"bad\")\n          expect(authenticated).to eq(nil)\n        end\n      end\n    end\n  end\n\n  describe \"#confidential?\" do\n    subject { FactoryBot.create(:application, confidential: confidential).confidential? }\n\n    context \"when application is private/confidential\" do\n      let(:confidential) { true }\n      it { expect(subject).to eq(true) }\n    end\n\n    context \"when application is public/non-confidential\" do\n      let(:confidential) { false }\n      it { expect(subject).to eq(false) }\n    end\n  end\n\n  describe \"#as_json\" do\n    let(:app) { FactoryBot.create :application, secret: \"123123123\" }\n\n    before do\n      allow(Doorkeeper.configuration)\n        .to receive(:application_secret_strategy).and_return(Doorkeeper::SecretStoring::Plain)\n    end\n\n    it \"includes plaintext secret\" do\n      expect(app.as_json).to include(\"secret\" => \"123123123\")\n    end\n\n    it \"respects custom options\" do\n      expect(app.as_json(except: :secret)).not_to include(\"secret\")\n      expect(app.as_json(only: :id)).to match(\"id\" => app.id)\n    end\n\n    # AR specific\n    if DOORKEEPER_ORM == :active_record\n      it \"correctly works with #to_json\" do\n        ActiveRecord::Base.include_root_in_json = true\n        expect(app.to_json(include_root_in_json: true)).to match(/application.+?:\\{/)\n        ActiveRecord::Base.include_root_in_json = false\n      end\n    end\n  end\nend\n"], "fixing_code": ["# Changelog\n\nSee https://github.com/doorkeeper-gem/doorkeeper/wiki/Migration-from-old-versions for\nupgrade guides.\n\nUser-visible changes worth mentioning.\n\n## master\n\n- [#1371] Add `#as_json` method and attributes serialization restriction for Application model.\n  Fixes information disclosure vulnerability (CVE-2020-10187).\n  \n  **[IMPORTANT]** you need to re-implement `#as_json` method for Doorkeeper Application model\n  if you previously used `#to_json` serialization with custom options or attributes or rely on\n  JSON response from /oauth/applications.json or /oauth/authorized_applications.json. This change\n  is a breaking change which restricts serialized attributes to a very small set of columns.\n\n- [#1395] Fix `NameError: uninitialized constant Doorkeeper::AccessToken` for Rake tasks.\n- [#1397] Add `as: :doorkeeper_application` on Doorkeeper application form in order to support\n  custom configured application model.\n- [#1400] Correctly yield the application instance to `allow_grant_flow_for_client?` config\n  option (fixes #1398).\n- [#1402] Handle trying authorization with client credentials.\n\n## 5.4.0.rc1\n- [#1366] Sets expiry of token generated using `refresh_token` to that of original token. (Fixes #1364) \n- [#1354] Add `authorize_resource_owner_for_client` option to authorize the calling user to access an application.\n- [#1355] Allow to enable polymorphic Resource Owner association for Access Token & Grant\n  models (`use_polymorphic_resource_owner` configuration option).\n  \n  **[IMPORTANT]** Review your custom patches or extensions for Doorkeeper internals if you\n  have such - since now Doorkeeper passes Resource Owner instance to every objects and not\n  just it's ID. See PR description for details.\n  \n- [#1356] Remove duplicated scopes from Access Tokens and Grants on attribute assignment.\n- [#1357] Fix `Doorkeeper::OAuth::PreAuthorization#as_json` method causing \n  `Stack level too deep` error with AMS (fix #1312).\n- [#1358] Deprecate `active_record_options` configuration option.\n- [#1359] Refactor Doorkeeper configuration options DSL to make it easy to reuse it\n  in external extensions.\n- [#1360] Increase `matching_token_for` lookup size to 10 000 and make it configurable.\n- [#1371] Fix controllers to use valid classes in case Doorkeeper has custom models configured.\n- [#1370] Fix revocation response for invalid token and unauthorized requests to conform with RFC 7009 (fixes #1362).\n\n  **[IMPORTANT]** now fully according to RFC 7009 nobody can do a revocation request without `client_id`\n  (for public clients) and `client_secret` (for private clients). Please update your apps to include that\n  info in the revocation request payload.\n  \n- [#1373] Make Doorkeeper routes mapper reusable in extensions.\n- [#1374] Revoke and issue client credentials token in a transaction with a row lock.\n- [#1384] Add context object with auth/pre_auth and issued_token for authorization hooks.\n- [#1387] Add `AccessToken#create_for` and use in `RefreshTokenRequest`.\n- [#1392] Fix `enable_polymorphic_resource_owner` migration template to have proper index name.\n- [#1393] Improve Applications #show page with more informative data on client secret and scopes.\n- [#1394] Use Ruby `autoload` feature to load Doorkeeper files.\n\n## 5.3.1\n\n- [#1360] Backport: Increase `matching_token_for` batch lookup size to 10 000 and make it configurable.\n\n## 5.3.0\n\n- [#1339] Validate Resource Owner in `PasswordAccessTokenRequest` against `nil` and `false` values.\n- [#1341] Fix `refresh_token_revoked_on_use` with `hash_token_secrets` enabled.\n- [#1343] Fix ruby 2.7 kwargs warning in InvalidTokenResponse.\n- [#1345] Allow to set custom classes for Doorkeeper models, extract reusable AR mixins.\n- [#1346] Refactor `Doorkeeper::Application#to_json` into convenient `#as_json` (fix #1344).\n- [#1349] Fix `Doorkeeper::Application` AR associations using an incorrect foreign key name when using a custom class.\n- [#1318] Make existing token revocation for client credentials optional and disable it by default.\n\n  **[IMPORTANT]** This is a change compared to the behaviour of version 5.2.\n  If you were relying on access tokens being revoked once the same client\n  requested a new access token, reenable it with `revoke_previous_client_credentials_token` in Doorkeeper\n  initialization file.\n  \n## 5.2.4\n  \n- [#1360] Backport: Increase `matching_token_for` batch lookup size to 10 000 and make it configurable.\n\n## 5.2.3\n\n- [#1334] Remove `application_secret` flash helper and `redirect_to` keyword.\n- [#1331] Move redirect_uri_validator to where it is used (`Application` model).\n- [#1326] Move response_type check in pre_authorization to a method to be easily to override.\n- [#1329] Fix `find_in_batches` order warning.\n\n## 5.2.2\n\n- [#1320] Call configured `authenticate_resource_owner` method once per request.\n- [#1315] Allow generation of new secret with `Doorkeeper::Application#renew_secret`.\n- [#1309] Allow `Doorkeeper::Application#to_json` to work without arguments.\n\n## 5.2.1\n\n- [#1308] Fix flash types for `api_only` mode (no flashes for `ActionController::API`).\n- [#1306] Fix interpolation of `missing_param` I18n.\n\n## 5.2.0\n\n- [#1305] Make `Doorkeeper::ApplicationController` to inherit from `ActionController::API` in cases\n  when `api_mode` enabled (fixes #1302).\n\n## 5.2.0.rc3\n\n- [#1298] Slice strong params so doesn't error with Rails forms.\n- [#1300] Limiting access to attributes of pre_authorization.\n- [#1296] Adding client_id to strong parameters.\n\n  **[IMPORTANT]** `Doorkeeper::Server#client_via_uid` was removed.\n\n- [#1293] Move ar specific redirect uri validator to ar orm directory.\n- [#1288] Allow to pass attributes to the `Doorkeeper::OAuth::PreAuthorization#as_json` method to customize\n  the PreAuthorization response.\n- [#1286] Add ability to customize grant flows per application (OAuth client) (#1245 , #1207)\n- [#1283] Allow to customize base class for `Doorkeeper::ApplicationMetalController` (new configuration\n  option called `base_metal_controller` (fix #1273).\n- [#1277] Prevent requested scope be empty on authorization request, handle and add description for invalid request.\n\n## 5.2.0.rc2\n\n- [#1270] Find matching tokens in batches for `reuse_access_token` option (fix #1193).\n- [#1271] Reintroduce existing token revocation for client credentials.\n\n  **[IMPORTANT]** If you rely on being able to fetch multiple access tokens from the same\n  client using client credentials flow, you should skip to version 5.3, where this behaviour\n  is deactivated by default.\n\n- [#1269] Update initializer template documentation.\n- [#1266] Use strong parameters within pre-authorization.\n- [#1264] Add :before_successful_authorization and :after_successful_authorization hooks in TokensController\n- [#1263] Response properly when introspection fails and fix configurations's user guide.\n\n## 5.2.0.rc1\n\n- [#1260], [#1262] Improve Token Introspection configuration option (access to tokens, client).\n- [#1257] Add constraint configuration when using client authentication on introspection endpoint.\n- [#1252] Returning `unauthorized` when the revocation of the token should not be performed due to wrong permissions.\n- [#1249] Specify case sensitive uniqueness to remove Rails 6 deprecation message\n- [#1248] Display the Application Secret in HTML after creating a new application even when `hash_application_secrets` is used.\n- [#1248] Return the unhashed Application Secret in the JSON response after creating new application even when `hash_application_secrets` is used.\n- [#1238] Better support for native app with support for custom scheme and localhost redirection.\n\n## 5.1.0\n\n- [#1243] Add nil check operator in token checking at token introspection.\n- [#1241] Explaining foreign key options for resource owner in a single place\n- [#1237] Allow to set blank redirect URI if Doorkeeper configured to use redirect URI-less grant flows.\n- [#1234] Fix `StaleRecordsCleaner` to properly work with big amount of records.\n- [#1228] Allow to explicitly set non-expiring tokens in `custom_access_token_expires_in` configuration\n  option using `Float::INIFINITY` return value.\n- [#1224] Do not try to store token if not found by fallback hashing strategy.\n- [#1223] Update Hound/Rubocop rules, correct Doorkeeper codebase to follow style-guides.\n- [#1220] Drop Rails 4.2 & Ruby < 2.4 support.\n\n## 5.1.0.rc2\n\n- [#1208] Unify hashing implementation into secret storing strategies\n\n  **[IMPORTANT]** If you have been using the master branch of doorkeeper with bcrypt in your Gemfile.lock,\n  your application secrets have been hashed using BCrypt. To restore this behavior, use the initializer option\n  `hash_application_secrets using: 'Doorkeeper::SecretStoring::BCrypt`.\n\n- [#1216] Add nil check to `expires_at` method.\n- [#1215] Fix deprecates for Rails 6.\n- [#1214] Scopes field accepts array.\n- [#1209] Fix tokens validation for Token Introspection request.\n- [#1202] Use correct HTTP status codes for error responses.\n\n  **[IMPORTANT]**: this change might break your application if you were relying on the previous\n  401 status codes, this is now a 400 by default, or a 401 for `invalid_client` and `invalid_token` errors.\n\n- [#1201] Fix custom TTL block `client` parameter to always be an `Doorkeeper::Application` instance.\n\n  **[IMPORTANT]**: those who defined `custom_access_token_expires_in` configuration option need to check\n  their block implementation: if you are using `oauth_client.application` to get `Doorkeeper::Application`\n  instance, then you need to replace it with just `oauth_client`.\n\n- [#1200] Increase default Doorkeeper access token value complexity (`urlsafe_base64` instead of just `hex`)\n  matching RFC6749/RFC6750.\n\n  **[IMPORTANT]**: this change have possible side-effects in case you have custom database constraints for\n  access token value, application secrets, refresh tokens or you patched Doorkeeper models and introduced\n  token value validations, or you are using database with case-insensitive WHERE clause like MySQL\n  (you can face some collisions). Before this change access token value matched `[a-f0-9]` regex, and now\n  it matches `[a-zA-Z0-9\\-_]`. In case you have such restrictions and your don't use custom token generator\n  please change configuration option `default_generator_method` to `:hex`.\n\n- [#1195] Allow to customize Token Introspection response (fixes #1194).\n- [#1189] Option to set `token_reuse_limit`.\n- [#1191] Try to load bcrypt for hashing of application secrets, but add fallback.\n\n## 5.1.0.rc1\n\n- [#1188] Use `params` instead of `request.POST` in tokens controller (fixes #1183).\n- [#1182] Fix loopback IP redirect URIs to conform with RFC8252, p. 7.3 (fixes #1170).\n- [#1179] Authorization Code Grant Flow without client id returns invalid_client error.\n- [#1177] Allow to limit `scopes` for certain `grant_types`\n- [#1176] Fix test factory support for `factory_bot_rails`\n- [#1175] Internal refactor: use `scopes_string` inside `scopes`.\n- [#1168] Allow optional hashing of tokens and secrets.\n- [#1164] Fix error when `root_path` is not defined.\n- [#1162] Fix `enforce_content_type` for requests without body.\n\n## 5.0.2\n\n- [#1158] Fix initializer template: change `handle_auth_errors` option\n- [#1157] Remove redundant index from migration template.\n\n## 5.0.1\n\n- [#1154] Refactor `StaleRecordsCleaner` to be ORM agnostic.\n- [#1152] Fix migration template: change resource owner data type from integer to Rails generic `references`\n- [#1151] Fix Refresh Token strategy: add proper validation of client credentials both for Public & Private clients.\n- [#1149] Fix for `URIChecker#valid_for_authorization?` false negative when query is blank, but `?` present.\n- [#1140] Allow rendering custom errors from exceptions (issue #844). Originally opened as [#944].\n- [#1138] Revert regression bug (check for token expiration in Authorizations controller so authorization\n  triggers every time)\n\n## 5.0.0\n\n- [#1127] Change the token_type initials of the Banner Token to uppercase to comply with the RFC6750 specification.\n\n## 5.0.0.rc2\n\n- [#1122] Fix AuthorizationsController#new error response to be in JSON format\n- [#1119] Fix token revocation for OAuth apps using \"implicit\" grant flow\n- [#1116] `AccessGrant`s will now be revoked along with `AccessToken`s when\n  hitting the `AuthorizedApplicationController#destroy` route.\n- [#1114] Make token info endpoint's attributes consistent with token creation\n- [#1108] Simple formating of callback URLs when listing oauth applications\n- [#1106] Restrict access to AdminController with 'Forbidden 403' if admin_authenticator is not\n  configured by developers.\n\n## 5.0.0.rc1\n\n- [#1103] Allow customizing use_refresh_token\n- [#1089] Removed enable_pkce_without_secret configuration option\n- [#1102] Expiration time based on scopes\n- [#1099] All the configuration variables in `Doorkeeper.configuration` now\n  always return a non-nil value (`true` or `false`)\n- [#1099] ORM / Query optimization: Do not revoke the refresh token if it is not enabled\n  in `doorkeeper.rb`\n- [#996] Expiration Time Base On Grant Type\n- [#997] Allow PKCE authorization_code flow as specified in RFC7636\n- [#907] Fix lookup for matching tokens in certain edge-cases\n- [#992] Add API option to use Doorkeeper without management views for API only\n  Rails applications (`api_only`)\n- [#1045] Validate redirect_uri as the native URI when making authorization code requests\n- [#1048] Remove deprecated `Doorkeeper#configured?`, `Doorkeeper#database_installed?`, and\n  `Doorkeeper#installed?` method\n- [#1031] Allow public clients to authenticate without `client_secret`. Define an app as\n  either public or private/confidential\n\n  **[IMPORTANT]**: all the applications (clients) now are considered as private by default.\n  You need to manually change `confidential` column to `false` if you are using public clients,\n  in other case your mobile (or other) applications will not be able to authorize.\n  See [#1142](https://github.com/doorkeeper-gem/doorkeeper/issues/1142) for more details.\n\n- [#1010] Add configuration to enforce configured scopes (`default_scopes` and\n  `optional_scopes`) for applications\n- [#1060] Ensure that the native redirect_uri parameter matches with redirect_uri of the client\n- [#1064] Add :before_successful_authorization and :after_successful_authorization hooks\n- [#1069] Upgrade Bootstrap to 4 for Admin\n- [#1068] Add rake task to cleanup databases that can become large over time\n- [#1072] AuthorizationsController: Memoize strategy.authorize_response result to enable\n  subclasses to use the response object.\n- [#1075] Call `before_successful_authorization` and `after_successful_authorization` hooks\n  on `create` action as well as `new`\n- [#1082] Fix #916: remember routes mapping and use it required places (fix error with\n  customized Token Info route).\n- [#1086, #1088] Fix bug with receiving default scopes in the token even if they are\n  not present in the application scopes (use scopes intersection).\n- [#1076] Add config to enforce content type to application/x-www-form-urlencoded\n- Fix bug with `force_ssl_in_redirect_uri` when it breaks existing applications with an\n  SSL redirect_uri.\n\n## 4.4.3\n\n- [#1143] Adds a config option `opt_out_native_route_change` to opt out of the breaking api\n  changed introduced in https://github.com/doorkeeper-gem/doorkeeper/pull/1003\n\n## 4.4.2\n\n- [#1130] Backport fix for native redirect_uri from 5.x.\n\n## 4.4.1\n\n- [#1127] Backport token type to comply with the RFC6750 specification.\n- [#1125] Backport Quote surround I18n yes/no keys\n\n## 4.4.0\n\n- [#1120] Backport security fix from 5.x for token revocation when using public clients\n\n  **[IMPORTANT]**: all the applications (clients) now are considered as private by default.\n  You need to manually change `confidential` column to `false` if you are using public clients,\n  in other case your mobile (or other) applications will not be able to authorize.\n  See [#1142](https://github.com/doorkeeper-gem/doorkeeper/issues/1142) for more details.\n\n## 4.3.2\n\n- [#1053] Support authorizing with query params in the request `redirect_uri` if explicitly present in app's `Application#redirect_uri`\n\n## 4.3.1\n\n- Remove `BaseRecord` and introduce additional concern for ordering methods to fix\n  braking changes for Doorkeeper models.\n- [#1032] Refactor BaseRequest callbacks into configurable lambdas\n- [#1040] Clear mixins from ActiveRecord DSL and save only overridable API. It\n  allows to use this mixins in Doorkeeper ORM extensions with minimum code boilerplate.\n\n## 4.3.0\n\n- [#976] Fix to invalidate the second redirect URI when the first URI is the native URI\n- [#1035] Allow `Application#redirect_uri=` to handle array of URIs.\n- [#1036] Allow to forbid Application redirect URI's with specific rules.\n- [#1029] Deprecate `order_method` and introduce `ordered_by`. Sort applications\n  by `created_at` in index action.\n- [#1033] Allow Doorkeeper configuration option #force_ssl_in_redirect_uri to be a callable object.\n- Fix Grape integration & add specs for it\n- [#913] Deferred ORM (ActiveRecord) models loading\n- [#943] Fix Access Token token generation when certain errors occur in custom token generators\n- [#1026] Implement RFC7662 - OAuth 2.0 Token Introspection\n- [#985] Generate valid migration files for Rails >= 5\n- [#972] Replace Struct subclassing with block-form initialization\n- [#1003] Use URL query param to pass through native redirect auth code so automated apps can find it.\n\n  **[IMPORTANT]**: Previously authorization code response route was `/oauth/authorize/<code>`,\n  now it is `oauth/authorize/native?code=<code>` (in order to help applications to automatically find the code value).\n\n- [#868] `Scopes#&` and `Scopes#+` now take an array or any other enumerable\n  object.\n- [#1019] Remove translation not in use: `invalid_resource_owner`.\n- Use Ruby 2 hash style syntax (min required Ruby version = 2.1)\n- [#948] Make Scopes.<=> work with any \"other\" value.\n- [#974] Redirect URI is checked without query params within AuthorizationCodeRequest.\n- [#1004] More explicit help text for `native_redirect_uri`.\n- [#1023] Update Ruby versions and test against 2.5.0 on Travis CI.\n- [#1024] Migrate from FactoryGirl to FactoryBot.\n- [#1025] Improve documentation for adding foreign keys\n- [#1028] Make it possible to have composite strategy names.\n\n## 4.2.6\n\n- [#970] Escape certain attributes in authorization forms.\n\n## 4.2.5\n\n- [#936] Deprecate `Doorkeeper#configured?`, `Doorkeeper#database_installed?`, and\n  `Doorkeeper#installed?`\n- [#909] Add `InvalidTokenResponse#reason` reader method to allow read the kind\n  of invalid token error.\n- [#928] Test against more recent Ruby versions\n- Small refactorings within the codebase\n- [#921] Switch to Appraisal, and test against Rails master\n- [#892] Add minimum Ruby version requirement\n\n## 4.2.0\n\n- Security fix: Address CVE-2016-6582, implement token revocation according to\n  spec (tokens might not be revoked if client follows the spec).\n- [#873] Add hooks to Doorkeeper::ApplicationMetalController\n- [#871] Allow downstream users to better utilize doorkeeper spec factories by\n  eliminating name conflict on `:user` factory.\n\n## 4.1.0\n\n- [#845] Allow customising the `Doorkeeper::ApplicationController` base\n  controller\n\n## 4.0.0\n\n- [#834] Fix AssetNotPrecompiled error with Sprockets 4\n- [#843] Revert \"Fix validation error messages\"\n- [#847] Specify Null option to timestamps\n\n## 4.0.0.rc4\n\n- [#777] Add support for public client in password grant flow\n- [#823] Make configuration and specs ORM independent\n- [#745] Add created_at timestamp to token generation options\n- [#838] Drop `Application#scopes` generator and warning, introduced for\n  upgrading doorkeeper from v2 to v3.\n- [#801] Fix Rails 5 warning messages\n- Test against Rails 5 RC1\n\n## 4.0.0.rc3\n\n- [#769] Revoke refresh token on access token use. To make use of the new config\n  add `previous_refresh_token` column to `oauth_access_tokens`:\n\n  ```\n  rails generate doorkeeper:previous_refresh_token\n  ```\n\n- [#811] Toughen parameters filter with exact match\n- [#813] Applications admin bugfix\n- [#799] Fix Ruby Warnings\n- Drop `attr_accessible` from models\n\n### Backward incompatible changes\n\n- [#730] Force all timezones to use UTC to prevent comparison issues.\n- [#802] Remove `config.i18n.fallbacks` from engine\n\n## 4.0.0.rc2\n\n- Fix optional belongs_to for Rails 5\n- Fix Ruby warnings\n\n## 4.0.0.rc1\n\n### Backward incompatible changes\n\n- Drops support for Rails 4.1 and earlier\n- Drops support for Ruby 2.0\n- [#778] Bug fix: use the remaining time that a token is still valid when\n  building the redirect URI for the implicit grant flow\n\n### Other changes\n\n- [#771] Validation error messages fixes\n- Adds foreign key constraints in generated migrations between tokens and\n  grants, and applications\n- Support Rails 5\n\n## 3.1.0\n\n- [#736] Existing valid tokens are now reused in client_credentials flow\n- [#749] Allow user to raise authorization error with custom messages.\n  Under `resource_owner_authenticator` block a user can\n  `raise Doorkeeper::Errors::DoorkeeperError.new('custom_message')`\n- [#762] Check doesn\u2019t abort the actual migration, so it runs\n- [#722] `doorkeeper_forbidden_render_options` now supports returning a 404 by\n  specifying `respond_not_found_when_forbidden: true` in the\n  `doorkeeper_forbidden_render_options` method.\n- [#734] Simplify and remove duplication in request strategy classes\n\n## 3.0.1\n\n- [#712] Wrap exchange of grant token for access token and access token refresh\n  in transactions\n- [#704] Allow applications scopes to be mass assigned\n- [#707] Fixed order of Mixin inclusion and table_name configuration in models\n- [#712] Wrap access token and refresh grants in transactions\n- Adds JRuby support\n- Specs, views and documentation adjustments\n\n## 3.0.0\n\n### Other changes\n\n- [#693] Updates `en.yml`.\n\n## 3.0.0 (rc2)\n\n### Backward incompatible changes\n\n- [#678] Change application-specific scopes to take precedence over server-wide\n  scopes. This removes the previous behavior where the intersection between\n  application and server scopes was used.\n\n### Other changes\n\n- [#671] Fixes `NoMethodError - undefined method 'getlocal'` when calling\n  the /oauth/token path. Switch from using a DateTime object to update\n  AR to using a Time object. (Issue #668)\n- [#677] Support editing application-specific scopes via the standard forms\n- [#682] Pass error hash to Grape `error!`\n- [#683] Generate application secret/UID if fields are blank strings\n\n## 3.0.0 (rc1)\n\n### Backward incompatible changes\n\n- [#648] Extracts mongodb ORMs to\n  https://github.com/doorkeeper-gem/doorkeeper-mongodb. If you use ActiveRecord\n  you don\u2019t need to do any change, otherwise you will need to install the new\n  plugin.\n- [#665] `doorkeeper_unauthorized_render_options(error:)` and\n  `doorkeeper_forbidden_render_options(error:)` now accept `error` keyword\n  argument.\n\n### Removed deprecations\n\n- Removes `doorkeeper_for` deprecation notice.\n- Remove `applications.scopes` upgrade notice.\n\n## 2.2.2\n\n- [#541] Fixed `undefined method attr_accessible` problem on Rails 4\n  (happens only when ProtectedAttributes gem is used) in #599\n\n## 2.2.1\n\n- [#636] `custom_access_token_expires_in` bugfixes\n- [#641] syntax error fix (Issue #612)\n- [#633] Send extra details to Custom Token Generator\n- [#628] Refactor: improve orm adapters to ease extension\n- [#637] Upgrade to rspec to 3.2\n\n## 2.2.0 - 2015-04-19\n\n- [#611] Allow custom access token generators to be used\n- [#632] Properly fallback to `default_scopes` when no scope is specified\n- [#622] Clarify that there is a logical OR between scopes for authorizing\n- [#635] Upgrade to rspec 3\n- [#627] i18n fallbacks to english\n- Moved CHANGELOG to NEWS.md\n\n## 2.1.4 - 2015-03-27\n\n- [#595] HTTP spec: Add `scope` for refresh token scope param\n- [#596] Limit scopes in app scopes for client credentials\n- [#567] Add Grape helpers for easier integration with Grape framework\n- [#606] Add custom access token expiration support for Client Credentials flow\n\n## 2.1.3 - 2015-03-01\n\n- [#588] Fixes scopes_match? bug that skipped authorization form in some cases\n\n## 2.1.2 - 2015-02-25\n\n- [#574] Remove unused update authorization route.\n- [#576] Filter out sensitive parameters from logs.\n- [#582] The Authorization HTTP header fields are now case insensitive.\n- [#583] Database connection bugfix in certain scenarios.\n- Testing improvements\n\n## 2.1.1 - 2015-02-06\n\n- Remove `wildcard_redirect_url` option\n- [#481] Customize token flow OAuth expirations with a config lambda\n- [#568] TokensController: Memoize strategy.authorize_response result to enable\n  subclasses to use the response object.\n- [#571] Fix database initialization issues in some configurations.\n- Documentation improvements\n\n## 2.1.0 - 2015-01-13\n\n- [#540] Include `created_at` in response.\n- [#538] Check application-level scopes in client_credentials and password flow.\n- [5596227] Check application scopes in AccessToken when present. Fixes a bug in\n  doorkeeper 2.0.0 and 2.0.1 referring to application specific scopes.\n- [#534] Internationalizes doorkeeper views.\n- [#545] Ensure there is a connection to the database before checking for\n  missing columns\n- [#546] Use `Doorkeeper::` prefix when referencing `Application` to avoid\n  possible application model name conflict.\n- [#538] Test with Rails ~> 4.2.\n\n### Potentially backward incompatible changes\n\n- Enable by default `authorization_code` and `client_credentials` grant flows.\n  Disables implicit and password grant flows by default.\n- [#510, #544, 722113f] Revoked refresh token response bugfix.\n\n## 2.0.1 - 2014-12-17\n\n- [#525, #526, #527] Fix `ActiveRecord::NoDatabaseError` on gem load.\n\n## 2.0.0 - 2014-12-16\n\n### Backward incompatible changes\n\n- [#448] Removes `doorkeeper_for` helper. Now we use\n  `before_action :doorkeeper_authorize!`.\n- [#469] Allow client applications to restrict the set of allowable scopes.\n  Fixes #317. `oauth_applications` relation needs a new `scopes` string column,\n  non nullable, which defaults to an empty string. To add the column run:\n\n  ```\n  rails generate doorkeeper:application_scopes\n  ```\n\n  If you\u2019d rather do it by hand, your ActiveRecord migration should contain:\n\n  ```ruby\n  add_column :oauth_applications, :scopes, :string, null: false, default: \u2018\u2019\n  ```\n\n### Removed deprecations\n\n- Removes `test_redirect_uri` option. It is now called `native_redirect_uri`.\n- [#446] Removes `mount Doorkeeper::Engine`. Now we use `use_doorkeeper`.\n\n### Others\n\n- [#484] Performance improvement - avoid performing order_by when not required.\n- [#450] When password is invalid in Password Credentials Grant, Doorkeeper\n  returned 'invalid_resource_owner' instead of 'invalid_grant', as the spec\n  declares. Fixes #444.\n- [#452] Allows `revoked_at` to be set in the future, for future expiry.\n  Rationale: https://github.com/doorkeeper-gem/doorkeeper/pull/452#issuecomment-51431459\n- [#480] For Implicit grant flow, access tokens can now be reused. Fixes #421.\n- [#491] Reworks of @jasl's #454 and #478. ORM refactor that allows doorkeeper\n  to be extended more easily with unsupported ORMs. It also marks the boundaries\n  between shared model code and ORM specifics inside of the gem.\n- [#496] Tests with Rails 4.2.\n- [#489] Adds `force_ssl_in_redirect_uri` to force the usage of the HTTPS\n  protocol in non-native redirect uris.\n- [#516] SECURITY: Adds `protect_from_forgery` to `Doorkeeper::ApplicationController`\n- [#518] Fix random failures in mongodb.\n\n---\n\n## 1.4.2 - 2015-03-02\n\n- [#576] Filter out sensitive parameters from logs\n\n## 1.4.1 - 2014-12-17\n\n- [#516] SECURITY: Adds `protect_from_forgery` to `Doorkeeper::ApplicationController`\n\n## 1.4.0 - 2014-07-31\n\n- internals\n  - [#427] Adds specs expectations.\n  - [#428] Error response refactor.\n  - [#417] Moves token validation into Access Token class.\n  - [#439] Removes redundant module includes.\n  - [#443] TokensController and TokenInfoController inherit from ActionController::Metal\n- bug\n  - [#418] fixes #243, requests with insufficient scope now respond 403 instead\n    of 401. (API change)\n  - [#438] fixes #398, native redirect for implicit token grant bug.\n  - [#440] namespace fixes\n- enhancements\n  - [#432] Keeps query parameters\n\n## 1.3.1 - 2014-07-06\n\n- enhancements\n  - [#405] Adds facade to more easily get the token from a request in a route\n    constraint.\n  - [#415] Extend Doorkeeper TokenResponse with an `after_successful_response`\n    callback that allows handling of `response` object.\n- internals\n  - [#409] Deprecates `test_redirect_uri` in favor of `native_redirect_uri`.\n    See discussion in: [#351].\n  - [#411] Clean rspec deprecations. General test improvements.\n  - [#412] rspec line width can go longer than 80 (hound CI config).\n- bug\n  - [#413] fixes #340, routing scope is now taken into account in redirect.\n  - [#401] and [#425] application is not required any longer for access_token.\n\n## 1.3.0 - 2014-05-23\n\n- enhancements\n  - [#387] Adds reuse_access_token configuration option.\n\n## 1.2.0 - 2014-05-02\n\n- enhancements\n  - [#376] Allow users to enable basic header authorization for access tokens.\n  - [#374] Token revocation implementation [RFC 7009]\n  - [#295] Only enable specific grant flows.\n- internals\n  - [#381] Locale source fix.\n  - [#380] Renames `errors_for` to `doorkeeper_errors_for`.\n  - [#390] Style adjustments in accordance with Ruby Style Guide form\n    Thoughtbot.\n\n## 1.1.0 - 2014-03-29\n\n- enhancements\n  - [#336] mongoid4 support.\n  - [#372] Allow users to set ActiveRecord table_name_prefix/suffix options\n- internals\n  - [#343] separate OAuth's admin and user end-point to different layouts, upgrade theme to Bootstrap 3.1.\n  - [#348] Move render_options in filter after `@error` has been set\n\n## 1.0.0 - 2014-01-13\n\n- bug (spec)\n  - [#228] token response `expires_in` value is now in seconds, relative to\n    request time\n  - [#296] client is optional for password grant type.\n  - [#319] If client credentials are present on password grant type they are validated\n  - [#326] If client credentials are present in refresh token they are validated\n  - [#326] If authenticated client does not match original client that\n    obtained a refresh token it responds `invalid_grant` instead of\n    `invalid_client`. Previous usage was invalid according to Section 5.2 of\n    the spec.\n  - [#329] access tokens' `scopes` string wa being compared against\n    `default_scopes` symbols, always unauthorizing.\n  - [#318] Include \"WWW-Authenticate\" header with Unauthorized responses\n- enhancements\n  - [#293] Adds ActionController::Instrumentation in TokensController\n  - [#298] Support for multiple redirect_uris added.\n  - [#313] `AccessToken.revoke_all_for` actually revokes all non-revoked\n    tokens for an application/owner instead of deleting them.\n  - [#333] Rails 4.1 support\n- internals\n  - Removes jQuery dependency [fixes #300][pr #312 is related]\n  - [#294] Client uid and secret will be generated only if not present.\n  - [#316] Test warnings addressed.\n  - [#338] Rspec 3 syntax.\n\n---\n\n## 0.7.4 - 2013-12-01\n\n- bug\n  - Symbols instead of strings for user input.\n\n## 0.7.3 - 2013-10-04\n\n- enhancements\n  - [#204] Allow to overwrite scope in routes\n- internals\n  - Returns only present keys in Token Response (may imply a backwards\n    incompatible change). https://github.com/doorkeeper-gem/doorkeeper/issues/220\n- bug\n  - [#290] Support for Rails 4 when 'protected_attributes' gem is present.\n\n## 0.7.2 - 2013-09-11\n\n- enhancements\n  - [#272] Allow issuing multiple access_tokens for one user/application for multiple devices\n  - [#170] Increase length of allowed redirect URIs\n  - [#239] Do not try to load unavailable Request class for the current phase.\n  - [#273] Relax jquery-rails gem dependency\n\n## 0.7.1 - 2013-08-30\n\n- bug\n  - [#269] Rails 3.2 raised `ActiveModel::MassAssignmentSecurity::Error`.\n\n## 0.7.0 - 2013-08-21\n\n- enhancements\n  - [#229] Rails 4!\n- internals\n  - [#203] Changing table name to be specific in column_names_with_table\n  - [#215] README update\n  - [#227] Use Rails.config.paths[\"config/routes\"] instead of assuming \"config/routes.rb\" exists\n  - [#262] Add jquery as gem dependency\n  - [#263] Add a configuration for ActiveRecord.establish_connection\n  - Deprecation and Ruby warnings (PRs merged outside of GitHub).\n\n## 0.6.7 - 2013-01-13\n\n- internals\n  - [#188] Add IDs to the show views for integration testing [@egtann](https://github.com/egtann)\n\n## 0.6.6 - 2013-01-04\n\n- enhancements\n  - [#187] Raise error if configuration is not set\n\n## 0.6.5 - 2012-12-26\n\n- enhancements\n  - [#184] Vendor the Bootstrap CSS [@tylerhunt](https://github.com/tylerhunt)\n\n## 0.6.4 - 2012-12-15\n\n- bug\n  - [#180] Add localization to authorized_applications destroy notice [@aalvarado](https://github.com/aalvarado)\n\n## 0.6.3 - 2012-12-07\n\n- bugfixes\n  - [#163] Error response content-type header should be application/json [@ggayan](https://github.com/ggayan)\n  - [#175] Make token.expires_in_seconds return nil when expires_in is nil [@miyagawa](https://github.com/miyagawa)\n- enhancements\n  - [#166, #172, #174] Behavior to automatically authorize based on a configured proc\n- internals\n  - [#168] Using expectation syntax for controller specs [@rdsoze](https://github.com/rdsoze)\n\n## 0.6.2 - 2012-11-10\n\n- bugfixes\n  - [#162] Remove ownership columns from base migration template [@rdsoze](https://github.com/rdsoze)\n\n## 0.6.1 - 2012-11-07\n\n- bugfixes\n  - [#160] Removed |routes| argument from initializer authenticator blocks\n- documentation\n  - [#160] Fixed description of context of authenticator blocks\n\n## 0.6.0 - 2012-11-05\n\n- enhancements\n  - Mongoid `orm` configuration accepts only :mongoid2 or :mongoid3\n  - Authorization endpoint does not redirect in #new action anymore. It wasn't specified by OAuth spec\n  - TokensController now inherits from ActionController::Metal. There might be performance upgrades\n  - Add link to authorization in Applications scaffold\n  - [#116] MongoMapper support [@carols10cents](https://github.com/carols10cents)\n  - [#122] Mongoid3 support [@petergoldstein](https://github.com/petergoldstein)\n  - [#150] Introduce test redirect uri for applications\n- bugfixes\n  - [#157] Response token status should be `:ok`, not `:success` [@theycallmeswift](https://github.com/theycallmeswift)\n  - [#159] Remove ActionView::Base.field_error_proc override (fixes #145)\n- internals\n  - Update development dependencies\n  - Several refactorings\n  - Rails/ORM are easily swichable with env vars (rails and orm)\n  - Travis now tests against Mongoid v2\n\n## 0.5.0 - 2012-10-20\n\nOfficial support for rubinius was removed.\n\n- enhancements\n  - Configure the way access token is retrieved from request (default to bearer header)\n  - Authorization Code expiration time is now configurable\n  - Add support for mongoid\n  - [#78, #128, #137, #138] Application Ownership\n  - [#92] Allow users to skip controllers\n  - [#99] Remove deprecated warnings for data-\\* attributes [@towerhe](https://github.com/towerhe)\n  - [#101] Return existing access_token for PasswordAccessTokenRequest [@benoist](https://github.com/benoist)\n  - [#104] Changed access token scopes example code to default_scopes and optional_scopes [@amkirwan](https://github.com/amkirwan)\n  - [#107] Fix typos in initializer\n  - [#123] i18n for validator, flash messages [@petergoldstein](https://github.com/petergoldstein)\n  - [#140] ActiveRecord is the default value for the ORM [@petergoldstein](https://github.com/petergoldstein)\n- internals\n  - [#112, #120] Replacing update_attribute with update_column to eliminate deprecation warnings [@rmoriz](https://github.com/rmoriz), [@petergoldstein](https://github.com/petergoldstein)\n  - [#121] Updating all development dependencies to recent versions. [@petergoldstein](https://github.com/petergoldstein)\n  - [#144] Adding MongoDB dependency to .travis.yml [@petergoldstein](https://github.com/petergoldstein)\n  - [#143] Displays errors for unconfigured error messages [@timgaleckas](https://github.com/timgaleckas)\n- bugfixes\n  - [#102] Not returning 401 when access token generation fails [@cslew](https://github.com/cslew)\n  - [#125] Doorkeeper is using ActiveRecord version of as_json in ORM agnostic code [@petergoldstein](https://github.com/petergoldstein)\n  - [#142] Prevent double submission of password based authentication [@bdurand](https://github.com/bdurand)\n- documentation\n  - [#141] Add rack-cors middleware to readme [@gottfrois](https://github.com/gottfrois)\n\n## 0.4.2 - 2012-06-05\n\n- bugfixes:\n  - [#94] Uninitialized Constant in Password Flow\n\n## 0.4.1 - 2012-06-02\n\n- enhancements:\n  - Backport: Move doorkeeper_for extension to Filter helper\n\n## 0.4.0 - 2012-05-26\n\n- deprecation\n  - Deprecate authorization_scopes\n- database changes\n  - AccessToken#resource_owner_id is not nullable\n- enhancements\n  - [#83] Add Resource Owner Password Credentials flow [@jaimeiniesta](https://github.com/jaimeiniesta)\n  - [#76] Allow token expiration to be disabled [@mattgreen](https://github.com/mattgreen)\n  - [#89] Configure the way client credentials are retrieved from request\n  - [#b6470a] Add Client Credentials flow\n- internals\n  - [#2ece8d, #f93778] Introduce Client and ErrorResponse classes\n\n## 0.3.4 - 2012-05-24\n\n- Fix attr_accessible for rails 3.2.x\n\n## 0.3.3 - 2012-05-07\n\n- [#86] shrink gem package size\n\n## 0.3.2 - 2012-04-29\n\n- enhancements\n  - [#54] Ignore Authorization: headers that are not Bearer [@miyagawa](https://github.com/miyagawa)\n  - [#58, #64] Add destroy action to applications endpoint [@jaimeiniesta](https://github.com/jaimeiniesta), [@davidfrey](https://github.com/davidfrey)\n  - [#63] TokensController responds with `401 unauthorized` [@jaimeiniesta](https://github.com/jaimeiniesta)\n  - [#67, #72] Fix for mass-assignment [@cicloid](https://github.com/cicloid)\n- internals\n  - [#49] Add Gemnasium status image to README [@laserlemon](https://github.com/laserlemon)\n  - [#50] Fix typos [@tomekw](https://github.com/tomekw)\n  - [#51] Updated the factory_girl_rails dependency, fix expires_in response which returned a float number instead of integer [@antekpiechnik](https://github.com/antekpiechnik)\n  - [#62] Typos, .gitignore [@jaimeiniesta](https://github.com/jaimeiniesta)\n  - [#65] Change \\_path redirections to \\_url redirections [@jaimeiniesta](https://github.com/jaimeiniesta)\n  - [#75] Fix unknown method #authenticate_admin! [@mattgreen](https://github.com/mattgreen)\n  - Remove application link in authorized app view\n\n## 0.3.1 - 2012-02-17\n\n- enhancements\n  - [#48] Add if, else options to doorkeeper_for\n  - Add views generator\n- internals\n  - Namespace models\n\n## 0.3.0 - 2012-02-11\n\n- enhancements\n  - [#17, #31] Add support for client credentials in basic auth header [@GoldsteinTechPartners](https://github.com/GoldsteinTechPartners)\n  - [#28] Add indices to migration [@GoldsteinTechPartners](https://github.com/GoldsteinTechPartners)\n  - [#29] Allow doorkeeper to run with rails 3.2 [@john-griffin](https://github.com/john-griffin)\n  - [#30] Improve client's redirect uri validation [@GoldsteinTechPartners](https://github.com/GoldsteinTechPartners)\n  - [#32] Add token (implicit grant) flow [@GoldsteinTechPartners](https://github.com/GoldsteinTechPartners)\n  - [#34] Add support for custom unathorized responses [@GoldsteinTechPartners](https://github.com/GoldsteinTechPartners)\n  - [#36] Remove repetitions from the Authorised Applications view [@carvil](https://github.com/carvil)\n  - When user revoke an application, all tokens for that application are revoked\n  - Error messages now can be translated\n  - Install generator copies the error messages localization file\n- internals\n  - Fix deprecation warnings in ActiveSupport::Base64\n  - Remove deprecation in doorkeeper_for that handles hash arguments\n  - Depends on railties instead of whole rails framework\n  - CI now integrates with rails 3.1 and 3.2\n\n## 0.2.0 - 2011-12-17\n\n- enhancements\n  - [#4] Add authorized applications endpoint\n  - [#5, #11] Add access token scopes\n  - [#10] Add access token expiration by default\n  - [#9, #12] Add refresh token flow\n- internals\n  - [#7] Improve configuration options with :default\n  - Improve configuration options with :builder\n  - Refactor config class\n  - Improve coverage of authorization request integration\n- bug fixes\n  - [#6, #20] Fix access token response headers\n  - Fix issue with state parameter\n- deprecation\n  - deprecate :only and :except options in doorkeeper_for\n\n## 0.1.1 - 2011-11-30\n\n- enhancements\n  - [#3] Authorization code must be short lived and single use\n  - [#2] Improve views provided by doorkeeper\n  - [#1] Skips authorization form if the client has been authorized by the resource owner\n  - Improve readme\n- bugfixes\n  - Fix issue when creating the access token (wrong client id)\n\n## 0.1.0 - 2011-11-25\n\n- Authorization Code flow\n- OAuth applications endpoint\n", "# frozen_string_literal: true\n\nmodule Doorkeeper\n  class ApplicationsController < Doorkeeper::ApplicationController\n    layout \"doorkeeper/admin\" unless Doorkeeper.configuration.api_only\n\n    before_action :authenticate_admin!\n    before_action :set_application, only: %i[show edit update destroy]\n\n    def index\n      @applications = Doorkeeper.config.application_model.ordered_by(:created_at)\n\n      respond_to do |format|\n        format.html\n        format.json { head :no_content }\n      end\n    end\n\n    def show\n      respond_to do |format|\n        format.html\n        format.json { render json: @application, as_owner: true }\n      end\n    end\n\n    def new\n      @application = Doorkeeper.config.application_model.new\n    end\n\n    def create\n      @application = Doorkeeper.config.application_model.new(application_params)\n\n      if @application.save\n        flash[:notice] = I18n.t(:notice, scope: %i[doorkeeper flash applications create])\n        flash[:application_secret] = @application.plaintext_secret\n\n        respond_to do |format|\n          format.html { redirect_to oauth_application_url(@application) }\n          format.json { render json: @application, as_owner: true }\n        end\n      else\n        respond_to do |format|\n          format.html { render :new }\n          format.json do\n            errors = @application.errors.full_messages\n\n            render json: { errors: errors }, status: :unprocessable_entity\n          end\n        end\n      end\n    end\n\n    def edit; end\n\n    def update\n      if @application.update(application_params)\n        flash[:notice] = I18n.t(:notice, scope: i18n_scope(:update))\n\n        respond_to do |format|\n          format.html { redirect_to oauth_application_url(@application) }\n          format.json { render json: @application, as_owner: true }\n        end\n      else\n        respond_to do |format|\n          format.html { render :edit }\n          format.json do\n            errors = @application.errors.full_messages\n\n            render json: { errors: errors }, status: :unprocessable_entity\n          end\n        end\n      end\n    end\n\n    def destroy\n      flash[:notice] = I18n.t(:notice, scope: i18n_scope(:destroy)) if @application.destroy\n\n      respond_to do |format|\n        format.html { redirect_to oauth_applications_url }\n        format.json { head :no_content }\n      end\n    end\n\n    private\n\n    def set_application\n      @application = Doorkeeper.config.application_model.find(params[:id])\n    end\n\n    def application_params\n      params.require(:doorkeeper_application)\n        .permit(:name, :redirect_uri, :scopes, :confidential)\n    end\n\n    def i18n_scope(action)\n      %i[doorkeeper flash applications] << action\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nmodule Doorkeeper\n  class AuthorizedApplicationsController < Doorkeeper::ApplicationController\n    before_action :authenticate_resource_owner!\n\n    def index\n      @applications = Doorkeeper.config.application_model.authorized_for(current_resource_owner)\n\n      respond_to do |format|\n        format.html\n        format.json { render json: @applications, current_resource_owner: current_resource_owner }\n      end\n    end\n\n    def destroy\n      Doorkeeper.config.application_model.revoke_tokens_and_grants_for(\n        params[:id],\n        current_resource_owner,\n      )\n\n      respond_to do |format|\n        format.html do\n          redirect_to oauth_authorized_applications_url, notice: I18n.t(\n            :notice, scope: %i[doorkeeper flash authorized_applications destroy],\n          )\n        end\n\n        format.json { render :no_content }\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nmodule Doorkeeper::Orm::ActiveRecord::Mixins\n  module Application\n    extend ActiveSupport::Concern\n\n    included do\n      self.table_name = \"#{table_name_prefix}oauth_applications#{table_name_suffix}\"\n\n      include ::Doorkeeper::ApplicationMixin\n\n      has_many :access_grants,\n               foreign_key: :application_id,\n               dependent: :delete_all,\n               class_name: Doorkeeper.config.access_grant_class.to_s\n\n      has_many :access_tokens,\n               foreign_key: :application_id,\n               dependent: :delete_all,\n               class_name: Doorkeeper.config.access_token_class.to_s\n\n      validates :name, :secret, :uid, presence: true\n      validates :uid, uniqueness: { case_sensitive: true }\n      validates :redirect_uri, \"doorkeeper/redirect_uri\": true\n      validates :confidential, inclusion: { in: [true, false] }\n\n      validate :scopes_match_configured, if: :enforce_scopes?\n\n      before_validation :generate_uid, :generate_secret, on: :create\n\n      has_many :authorized_tokens,\n               -> { where(revoked_at: nil) },\n               foreign_key: :application_id,\n               class_name: Doorkeeper.config.access_token_class.to_s\n\n      has_many :authorized_applications,\n               through: :authorized_tokens,\n               source: :application\n\n      # Generates a new secret for this application, intended to be used\n      # for rotating the secret or in case of compromise.\n      #\n      # @return [String] new transformed secret value\n      #\n      def renew_secret\n        @raw_secret = Doorkeeper::OAuth::Helpers::UniqueToken.generate\n        secret_strategy.store_secret(self, :secret, @raw_secret)\n      end\n\n      # We keep a volatile copy of the raw secret for initial communication\n      # The stored refresh_token may be mapped and not available in cleartext.\n      #\n      # Some strategies allow restoring stored secrets (e.g. symmetric encryption)\n      # while hashing strategies do not, so you cannot rely on this value\n      # returning a present value for persisted tokens.\n      def plaintext_secret\n        if secret_strategy.allows_restoring_secrets?\n          secret_strategy.restore_secret(self, :secret)\n        else\n          @raw_secret\n        end\n      end\n\n      # Represents client as set of it's attributes in JSON format.\n      # This is the right way how we want to override ActiveRecord #to_json.\n      #\n      # Respects privacy settings and serializes minimum set of attributes\n      # for public/private clients and full set for authorized owners.\n      #\n      # @return [Hash] entity attributes for JSON\n      #\n      def as_json(options = {})\n        # if application belongs to some owner we need to check if it's the same as\n        # the one passed in the options or check if we render the client as an owner\n        if (respond_to?(:owner) && owner && owner == options[:current_resource_owner]) ||\n           options[:as_owner]\n          # Owners can see all the client attributes, fallback to ActiveModel serialization\n          super\n        else\n          # if application has no owner or it's owner doesn't match one from the options\n          # we render only minimum set of attributes that could be exposed to a public\n          only = extract_serializable_attributes(options)\n          super(options.merge(only: only))\n        end\n      end\n\n      def authorized_for_resource_owner?(resource_owner)\n        Doorkeeper.configuration.authorize_resource_owner_for_client.call(self, resource_owner)\n      end\n\n      private\n\n      def generate_uid\n        self.uid = Doorkeeper::OAuth::Helpers::UniqueToken.generate if uid.blank?\n      end\n\n      def generate_secret\n        return if secret.present?\n\n        renew_secret\n      end\n\n      def scopes_match_configured\n        if scopes.present? && !Doorkeeper::OAuth::Helpers::ScopeChecker.valid?(\n          scope_str: scopes.to_s,\n          server_scopes: Doorkeeper.config.scopes,\n        )\n          errors.add(:scopes, :not_match_configured)\n        end\n      end\n\n      def enforce_scopes?\n        Doorkeeper.config.enforce_configured_scopes?\n      end\n\n      # Helper method to extract collection of serializable attribute names\n      # considering serialization options (like `only`, `except` and so on).\n      #\n      # @param options [Hash] serialization options\n      #\n      # @return [Array<String>]\n      #   collection of attributes to be serialized using #as_json\n      #\n      def extract_serializable_attributes(options = {})\n        opts = options.try(:dup) || {}\n        only = Array.wrap(opts[:only]).map(&:to_s)\n\n        only = if only.blank?\n                 serializable_attributes\n               else\n                 only & serializable_attributes\n               end\n\n        only -= Array.wrap(opts[:except]).map(&:to_s) if opts.key?(:except)\n        only.uniq\n      end\n\n      # We need to hook into this method to allow serializing plan-text secrets\n      # when secrets hashing enabled.\n      #\n      # @param key [String] attribute name\n      #\n      def read_attribute_for_serialization(key)\n        return super unless key.to_s == \"secret\"\n\n        plaintext_secret || secret\n      end\n\n      # Collection of attributes that could be serialized for public.\n      # Override this method if you need additional attributes to be serialized.\n      #\n      # @return [Array<String>] collection of serializable attributes\n      def serializable_attributes\n        attributes = %w[id name created_at]\n        attributes << \"uid\" unless confidential?\n        attributes\n      end\n    end\n\n    module ClassMethods\n      # Returns Applications associated with active (not revoked) Access Tokens\n      # that are owned by the specific Resource Owner.\n      #\n      # @param resource_owner [ActiveRecord::Base]\n      #   Resource Owner model instance\n      #\n      # @return [ActiveRecord::Relation]\n      #   Applications authorized for the Resource Owner\n      #\n      def authorized_for(resource_owner)\n        resource_access_tokens = Doorkeeper.config.access_token_model.active_for(resource_owner)\n        where(id: resource_access_tokens.select(:application_id).distinct)\n      end\n\n      # Revokes AccessToken and AccessGrant records that have not been revoked and\n      # associated with the specific Application and Resource Owner.\n      #\n      # @param resource_owner [ActiveRecord::Base]\n      #   instance of the Resource Owner model\n      #\n      def revoke_tokens_and_grants_for(id, resource_owner)\n        Doorkeeper.config.access_token_model.revoke_all_for(id, resource_owner)\n        Doorkeeper.config.access_grant_model.revoke_all_for(id, resource_owner)\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nrequire \"spec_helper\"\nrequire \"bcrypt\"\n\ndescribe Doorkeeper::Application do\n  let(:require_owner) { Doorkeeper.config.instance_variable_set(\"@confirm_application_owner\", true) }\n  let(:unset_require_owner) { Doorkeeper.config.instance_variable_set(\"@confirm_application_owner\", false) }\n  let(:new_application) { FactoryBot.build(:application) }\n\n  let(:uid) { SecureRandom.hex(8) }\n  let(:secret) { SecureRandom.hex(8) }\n\n  it \"is invalid without a name\" do\n    new_application.name = nil\n    expect(new_application).not_to be_valid\n  end\n\n  it \"is invalid without determining confidentiality\" do\n    new_application.confidential = nil\n    expect(new_application).not_to be_valid\n  end\n\n  it \"generates uid on create\" do\n    expect(new_application.uid).to be_nil\n    new_application.save\n    expect(new_application.uid).not_to be_nil\n  end\n\n  it \"generates uid on create if an empty string\" do\n    new_application.uid = \"\"\n    new_application.save\n    expect(new_application.uid).not_to be_blank\n  end\n\n  it \"generates uid on create unless one is set\" do\n    new_application.uid = uid\n    new_application.save\n    expect(new_application.uid).to eq(uid)\n  end\n\n  it \"is invalid without uid\" do\n    new_application.save\n    new_application.uid = nil\n    expect(new_application).not_to be_valid\n  end\n\n  it \"checks uniqueness of uid\" do\n    app1 = FactoryBot.create(:application)\n    app2 = FactoryBot.create(:application)\n    app2.uid = app1.uid\n    expect(app2).not_to be_valid\n  end\n\n  it \"expects database to throw an error when uids are the same\" do\n    app1 = FactoryBot.create(:application)\n    app2 = FactoryBot.create(:application)\n    app2.uid = app1.uid\n    expect { app2.save!(validate: false) }.to raise_error(uniqueness_error)\n  end\n\n  it \"generate secret on create\" do\n    expect(new_application.secret).to be_nil\n    new_application.save\n    expect(new_application.secret).not_to be_nil\n  end\n\n  it \"generate secret on create if is blank string\" do\n    new_application.secret = \"\"\n    new_application.save\n    expect(new_application.secret).not_to be_blank\n  end\n\n  it \"generate secret on create unless one is set\" do\n    new_application.secret = secret\n    new_application.save\n    expect(new_application.secret).to eq(secret)\n  end\n\n  it \"is invalid without secret\" do\n    new_application.save\n    new_application.secret = nil\n    expect(new_application).not_to be_valid\n  end\n\n  context \"application_owner is enabled\" do\n    before do\n      Doorkeeper.configure do\n        orm DOORKEEPER_ORM\n        enable_application_owner\n      end\n    end\n\n    context \"application owner is not required\" do\n      before(:each) do\n        unset_require_owner\n      end\n\n      it \"is valid given valid attributes\" do\n        expect(new_application).to be_valid\n      end\n    end\n\n    context \"application owner is required\" do\n      before do\n        require_owner\n        @owner = FactoryBot.build_stubbed(:doorkeeper_testing_user)\n      end\n\n      it \"is invalid without an owner\" do\n        expect(new_application).not_to be_valid\n      end\n\n      it \"is valid with an owner\" do\n        new_application.owner = @owner\n        expect(new_application).to be_valid\n      end\n    end\n  end\n\n  context \"redirect URI\" do\n    context \"when grant flows allow blank redirect URI\" do\n      before do\n        Doorkeeper.configure do\n          grant_flows %w[password client_credentials]\n        end\n      end\n\n      it \"is valid without redirect_uri\" do\n        new_application.save\n        new_application.redirect_uri = nil\n        expect(new_application).to be_valid\n      end\n    end\n\n    context \"when grant flows require redirect URI\" do\n      before do\n        Doorkeeper.configure do\n          grant_flows %w[password client_credentials authorization_code]\n        end\n      end\n\n      it \"is invalid without redirect_uri\" do\n        new_application.save\n        new_application.redirect_uri = nil\n        expect(new_application).not_to be_valid\n      end\n    end\n\n    context \"when blank URI option disabled\" do\n      before do\n        Doorkeeper.configure do\n          grant_flows %w[password client_credentials]\n          allow_blank_redirect_uri false\n        end\n      end\n\n      it \"is invalid without redirect_uri\" do\n        new_application.save\n        new_application.redirect_uri = nil\n        expect(new_application).not_to be_valid\n      end\n    end\n  end\n\n  context \"with hashing enabled\" do\n    include_context \"with application hashing enabled\"\n    let(:app) { FactoryBot.create :application }\n    let(:default_strategy) { Doorkeeper::SecretStoring::Sha256Hash }\n\n    it \"uses SHA256 to avoid additional dependencies\" do\n      # Ensure token was generated\n      app.validate\n      expect(app.secret).to eq(default_strategy.transform_secret(app.plaintext_secret))\n    end\n\n    context \"when bcrypt strategy is configured\" do\n      # In this text context, we have bcrypt loaded so `bcrypt_present?`\n      # will always be true\n      before do\n        Doorkeeper.configure do\n          hash_application_secrets using: \"Doorkeeper::SecretStoring::BCrypt\"\n        end\n      end\n\n      it \"holds a volatile plaintext and BCrypt secret\" do\n        expect(app.secret_strategy).to eq Doorkeeper::SecretStoring::BCrypt\n        expect(app.plaintext_secret).to be_a(String)\n        expect(app.secret).not_to eq(app.plaintext_secret)\n        expect { ::BCrypt::Password.create(app.secret) }.not_to raise_error\n      end\n    end\n\n    it \"does not fallback to plain lookup by default\" do\n      lookup = described_class.by_uid_and_secret(app.uid, app.secret)\n      expect(lookup).to eq(nil)\n\n      lookup = described_class.by_uid_and_secret(app.uid, app.plaintext_secret)\n      expect(lookup).to eq(app)\n    end\n\n    context \"with fallback enabled\" do\n      include_context \"with token hashing and fallback lookup enabled\"\n\n      it \"provides plain and hashed lookup\" do\n        lookup = described_class.by_uid_and_secret(app.uid, app.secret)\n        expect(lookup).to eq(app)\n\n        lookup = described_class.by_uid_and_secret(app.uid, app.plaintext_secret)\n        expect(lookup).to eq(app)\n      end\n    end\n\n    it \"does not provide access to secret after loading\" do\n      lookup = described_class.by_uid_and_secret(app.uid, app.plaintext_secret)\n      expect(lookup.plaintext_secret).to be_nil\n    end\n  end\n\n  describe \"destroy related models on cascade\" do\n    before(:each) do\n      new_application.save\n    end\n\n    let(:resource_owner) { FactoryBot.create(:resource_owner) }\n\n    it \"should destroy its access grants\" do\n      FactoryBot.create(\n        :access_grant,\n        application: new_application,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n      )\n\n      expect { new_application.destroy }.to change { Doorkeeper::AccessGrant.count }.by(-1)\n    end\n\n    it \"should destroy its access tokens\" do\n      FactoryBot.create(:access_token, application: new_application)\n      FactoryBot.create(:access_token, application: new_application, revoked_at: Time.now.utc)\n      expect do\n        new_application.destroy\n      end.to change { Doorkeeper::AccessToken.count }.by(-2)\n    end\n  end\n\n  describe \"#ordered_by\" do\n    let(:applications) { FactoryBot.create_list(:application, 5) }\n\n    context \"when a direction is not specified\" do\n      it \"calls order with a default order of asc\" do\n        names = applications.map(&:name).sort\n        expect(described_class.ordered_by(:name).map(&:name)).to eq(names)\n      end\n    end\n\n    context \"when a direction is specified\" do\n      it \"calls order with specified direction\" do\n        names = applications.map(&:name).sort.reverse\n        expect(described_class.ordered_by(:name, :desc).map(&:name)).to eq(names)\n      end\n    end\n  end\n\n  describe \"#redirect_uri=\" do\n    context \"when array of valid redirect_uris\" do\n      it \"should join by newline\" do\n        new_application.redirect_uri = [\"http://localhost/callback1\", \"http://localhost/callback2\"]\n        expect(new_application.redirect_uri).to eq(\"http://localhost/callback1\\nhttp://localhost/callback2\")\n      end\n    end\n    context \"when string of valid redirect_uris\" do\n      it \"should store as-is\" do\n        new_application.redirect_uri = \"http://localhost/callback1\\nhttp://localhost/callback2\"\n        expect(new_application.redirect_uri).to eq(\"http://localhost/callback1\\nhttp://localhost/callback2\")\n      end\n    end\n  end\n\n  describe \"#renew_secret\" do\n    let(:app) { FactoryBot.create :application }\n\n    it \"should generate a new secret\" do\n      old_secret = app.secret\n      app.renew_secret\n      expect(old_secret).not_to eq(app.secret)\n    end\n  end\n\n  describe \"#authorized_for\" do\n    let(:resource_owner) { FactoryBot.create(:resource_owner) }\n    let(:other_resource_owner) { FactoryBot.create(:resource_owner) }\n\n    it \"is empty if the application is not authorized for anyone\" do\n      expect(described_class.authorized_for(resource_owner)).to be_empty\n    end\n\n    it \"returns only application for a specific resource owner\" do\n      FactoryBot.create(\n        :access_token,\n        resource_owner_id: other_resource_owner.id,\n        resource_owner_type: other_resource_owner.class.name,\n      )\n      token = FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n      )\n      expect(described_class.authorized_for(resource_owner)).to eq([token.application])\n    end\n\n    it \"excludes revoked tokens\" do\n      FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n        revoked_at: 2.days.ago,\n      )\n      expect(described_class.authorized_for(resource_owner)).to be_empty\n    end\n\n    it \"returns all applications that have been authorized\" do\n      token1 = FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n      )\n      token2 = FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n      )\n      expect(described_class.authorized_for(resource_owner))\n        .to eq([token1.application, token2.application])\n    end\n\n    it \"returns only one application even if it has been authorized twice\" do\n      application = FactoryBot.create(:application)\n      FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n        application: application,\n      )\n      FactoryBot.create(\n        :access_token,\n        resource_owner_id: resource_owner.id,\n        resource_owner_type: resource_owner.class.name,\n        application: application,\n      )\n      expect(described_class.authorized_for(resource_owner)).to eq([application])\n    end\n  end\n\n  describe \"#revoke_tokens_and_grants_for\" do\n    it \"revokes all access tokens and access grants\" do\n      application_id = 42\n      resource_owner = double\n      expect(Doorkeeper::AccessToken)\n        .to receive(:revoke_all_for).with(application_id, resource_owner)\n      expect(Doorkeeper::AccessGrant)\n        .to receive(:revoke_all_for).with(application_id, resource_owner)\n\n      described_class.revoke_tokens_and_grants_for(application_id, resource_owner)\n    end\n  end\n\n  describe \"#by_uid_and_secret\" do\n    context \"when application is private/confidential\" do\n      it \"finds the application via uid/secret\" do\n        app = FactoryBot.create :application\n        authenticated = described_class.by_uid_and_secret(app.uid, app.secret)\n        expect(authenticated).to eq(app)\n      end\n      context \"when secret is wrong\" do\n        it \"should not find the application\" do\n          app = FactoryBot.create :application\n          authenticated = described_class.by_uid_and_secret(app.uid, \"bad\")\n          expect(authenticated).to eq(nil)\n        end\n      end\n    end\n\n    context \"when application is public/non-confidential\" do\n      context \"when secret is blank\" do\n        it \"should find the application\" do\n          app = FactoryBot.create :application, confidential: false\n          authenticated = described_class.by_uid_and_secret(app.uid, nil)\n          expect(authenticated).to eq(app)\n        end\n      end\n      context \"when secret is wrong\" do\n        it \"should not find the application\" do\n          app = FactoryBot.create :application, confidential: false\n          authenticated = described_class.by_uid_and_secret(app.uid, \"bad\")\n          expect(authenticated).to eq(nil)\n        end\n      end\n    end\n  end\n\n  describe \"#confidential?\" do\n    subject { FactoryBot.create(:application, confidential: confidential).confidential? }\n\n    context \"when application is private/confidential\" do\n      let(:confidential) { true }\n      it { expect(subject).to eq(true) }\n    end\n\n    context \"when application is public/non-confidential\" do\n      let(:confidential) { false }\n      it { expect(subject).to eq(false) }\n    end\n  end\n\n  describe \"#as_json\" do\n    let(:app) { FactoryBot.create :application, secret: \"123123123\" }\n\n    before do\n      allow(Doorkeeper.configuration)\n        .to receive(:application_secret_strategy).and_return(Doorkeeper::SecretStoring::Plain)\n    end\n\n    # AR specific feature\n    if DOORKEEPER_ORM == :active_record\n      it \"correctly works with #to_json\" do\n        ActiveRecord::Base.include_root_in_json = true\n        expect(app.to_json(include_root_in_json: true)).to match(/application.+?:\\{/)\n        ActiveRecord::Base.include_root_in_json = false\n      end\n    end\n\n    context \"when called without authorized resource owner\" do\n      it \"includes minimal set of attributes\" do\n        expect(app.as_json).to match(\n          \"id\" => app.id,\n          \"name\" => app.name,\n          \"created_at\" => an_instance_of(String),\n        )\n      end\n\n      it \"includes application UID if it's public\" do\n        app = FactoryBot.create :application, secret: \"123123123\", confidential: false\n\n        expect(app.as_json).to match(\n          \"id\" => app.id,\n          \"name\" => app.name,\n          \"created_at\" => an_instance_of(String),\n          \"uid\" => app.uid,\n        )\n      end\n\n      it \"respects custom options\" do\n        expect(app.as_json(except: :id)).not_to include(\"id\")\n        expect(app.as_json(only: %i[name created_at secret]))\n          .to match(\n            \"name\" => app.name,\n            \"created_at\" => an_instance_of(String),\n          )\n      end\n    end\n\n    context \"when called with authorized resource owner\" do\n      let(:owner) { FactoryBot.create(:doorkeeper_testing_user) }\n      let(:other_owner) { FactoryBot.create(:doorkeeper_testing_user) }\n      let(:app) { FactoryBot.create(:application, secret: \"123123123\", owner: owner) }\n\n      before do\n        Doorkeeper.configure do\n          orm DOORKEEPER_ORM\n          enable_application_owner confirmation: false\n        end\n      end\n\n      it \"includes all the attributes\" do\n        expect(app.as_json(current_resource_owner: owner))\n          .to include(\n            \"secret\" => \"123123123\",\n            \"redirect_uri\" => app.redirect_uri,\n            \"uid\" => app.uid,\n          )\n      end\n\n      it \"doesn't include unsafe attributes if current owner isn't the same as owner\" do\n        expect(app.as_json(current_resource_owner: other_owner))\n          .not_to include(\"redirect_uri\")\n      end\n    end\n  end\nend\n"], "filenames": ["CHANGELOG.md", "app/controllers/doorkeeper/applications_controller.rb", "app/controllers/doorkeeper/authorized_applications_controller.rb", "lib/doorkeeper/orm/active_record/mixins/application.rb", "spec/models/doorkeeper/application_spec.rb"], "buggy_code_start_loc": [8, 22, 12, 64, 105], "buggy_code_end_loc": [8, 62, 13, 101, 440], "fixing_code_start_loc": [9, 22, 12, 64, 105], "fixing_code_end_loc": [17, 62, 13, 157, 489], "type": "CWE-862", "message": "Doorkeeper version 5.0.0 and later contains an information disclosure vulnerability that allows an attacker to retrieve the client secret only intended for the OAuth application owner. After authorizing the application and allowing access, the attacker simply needs to request the list of their authorized applications in a JSON format (usually GET /oauth/authorized_applications.json). An application is vulnerable if the authorized applications controller is enabled.", "other": {"cve": {"id": "CVE-2020-10187", "sourceIdentifier": "cve@mitre.org", "published": "2020-05-04T14:15:13.013", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Doorkeeper version 5.0.0 and later contains an information disclosure vulnerability that allows an attacker to retrieve the client secret only intended for the OAuth application owner. After authorizing the application and allowing access, the attacker simply needs to request the list of their authorized applications in a JSON format (usually GET /oauth/authorized_applications.json). An application is vulnerable if the authorized applications controller is enabled."}, {"lang": "es", "value": "Doorkeeper versi\u00f3n 5.0.0 y posteriores, contienen una vulnerabilidad de divulgaci\u00f3n de informaci\u00f3n que permite a un atacante recuperar el secreto del cliente previsto \u00fanicamente para el propietario de la aplicaci\u00f3n OAuth. Despu\u00e9s de autorizar la aplicaci\u00f3n y permitir el acceso, el atacante simplemente necesita solicitar la lista de sus aplicaciones autorizadas en un formato JSON (normalmente GET /oauth/authorized_applications.json). Una aplicaci\u00f3n es vulnerable si el controlador de aplicaciones autorizadas est\u00e1 habilitado."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:doorkeeper_project:doorkeeper:*:*:*:*:*:ruby:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.0.3", "matchCriteriaId": "45324471-B8B5-4BD5-88D8-FDADD7068460"}, {"vulnerable": true, "criteria": "cpe:2.3:a:doorkeeper_project:doorkeeper:*:*:*:*:*:ruby:*:*", "versionStartIncluding": "5.1.0", "versionEndExcluding": "5.1.1", "matchCriteriaId": "396ABBC9-1CC7-4E2C-96AA-784425C3316D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:doorkeeper_project:doorkeeper:*:*:*:*:*:ruby:*:*", "versionStartIncluding": "5.2.0", "versionEndExcluding": "5.2.5", "matchCriteriaId": "FB61DD54-2340-4B7D-B370-E82E4AA88A1F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:doorkeeper_project:doorkeeper:*:*:*:*:*:ruby:*:*", "versionStartIncluding": "5.3.0", "versionEndExcluding": "5.3.2", "matchCriteriaId": "A79B9E86-2EBC-4452-BCAF-6180E3AB37C7"}]}]}], "references": [{"url": "https://github.com/doorkeeper-gem/doorkeeper/commit/25d038022c2fcad45af5b73f9d003cf38ff491f6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/doorkeeper-gem/doorkeeper/releases", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/doorkeeper-gem/doorkeeper/security/advisories/GHSA-j7vx-8mqj-cqp9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/rubysec/ruby-advisory-db/pull/446", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/doorkeeper-gem/doorkeeper/commit/25d038022c2fcad45af5b73f9d003cf38ff491f6"}}