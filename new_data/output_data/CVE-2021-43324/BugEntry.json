{"buggy_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\BgpPeer;\nuse App\\Models\\Dashboard;\nuse App\\Models\\Device;\nuse App\\Models\\Port;\nuse App\\Models\\Service;\nuse App\\Models\\Syslog;\nuse App\\Models\\User;\nuse App\\Models\\UserPref;\nuse App\\Models\\Widget;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse LibreNMS\\Config;\n\nclass OverviewController extends Controller\n{\n    public function index(Request $request)\n    {\n        $request->validate([\n            'dashboard' => 'integer',\n            'bare' => 'nullable|in:yes',\n        ]);\n\n        $view = Config::get('front_page');\n\n        if (view()->exists(\"overview.custom.$view\")) {\n            return view(\"overview.custom.$view\");\n        } elseif (method_exists($this, $view)) {\n            return $this->{$view}($request);\n        }\n\n        return $this->default($request);\n    }\n\n    public function default(Request $request)\n    {\n        $user = Auth::user();\n        $dashboards = Dashboard::allAvailable($user)->with('user:user_id,username')->orderBy('dashboard_name')->get()->keyBy('dashboard_id');\n\n        // Split dashboards into user owned or shared\n        [$user_dashboards, $shared_dashboards] = $dashboards->partition(function ($dashboard) use ($user) {\n            return $dashboard->user_id == $user->user_id;\n        });\n\n        if (! empty($request->dashboard) && isset($dashboards[$request->dashboard])) {\n            // specific dashboard\n            $dashboard = $dashboards[$request->dashboard];\n        } else {\n            $user_default_dash = (int) UserPref::getPref($user, 'dashboard');\n            $global_default = (int) Config::get('webui.default_dashboard_id');\n\n            // load user default\n            if (isset($dashboards[$user_default_dash])) {\n                $dashboard = $dashboards[$user_default_dash];\n            // load global default\n            } elseif (isset($dashboards[$global_default])) {\n                $dashboard = $dashboards[$global_default];\n            // load users first dashboard\n            } elseif (! empty($user_dashboards)) {\n                $dashboard = $user_dashboards->first();\n            }\n\n            // specific dashboard was requested, but doesn't exist\n            if (isset($dashboard) && ! empty($request->dashboard)) {\n                flash()\n                    ->using('template.librenms')\n                    ->title('Requested Dashboard Not Found!')\n                    ->addError(\"Dashboard <code>#$request->dashboard</code> does not exist! Loaded <code>\n                    \" . htmlentities($dashboard->dashboard_name) . '</code> instead.');\n            }\n        }\n\n        if (! isset($dashboard)) {\n            $dashboard = Dashboard::create([\n                'dashboard_name' => 'Default',\n                'user_id' => $user->user_id,\n            ]);\n        }\n\n        $data = $dashboard\n            ->widgets()\n            ->select(['user_widget_id', 'users_widgets.widget_id', 'title', 'widget', 'col', 'row', 'size_x', 'size_y', 'refresh', 'settings'])\n            ->join('widgets', 'widgets.widget_id', '=', 'users_widgets.widget_id')\n            ->get();\n\n        if ($data->isEmpty()) {\n            $data[] = ['user_widget_id'=>'0',\n                'widget_id'=>1,\n                'title'=>'Add a widget',\n                'widget'=>'placeholder',\n                'col'=>1,\n                'row'=>1,\n                'size_x'=>6,\n                'size_y'=>2,\n                'refresh'=>60,\n            ];\n        }\n\n        $bare = $request->bare;\n        $data = serialize(json_encode($data));\n        $dash_config = unserialize($data);\n        $hide_dashboard_editor = UserPref::getPref($user, 'hide_dashboard_editor');\n        $widgets = Widget::select('widget_id', 'widget_title')->orderBy('widget_title')->get();\n\n        $user_list = [];\n        if ($user->can('manage', User::class)) {\n            $user_list = User::select(['username', 'user_id'])\n                ->where('user_id', '!=', $user->user_id)\n                ->orderBy('username')\n                ->get();\n        }\n\n        return view('overview.default', compact('bare', 'dash_config', 'dashboard', 'hide_dashboard_editor', 'user_dashboards', 'shared_dashboards', 'widgets', 'user_list'));\n    }\n\n    public function simple(Request $request)\n    {\n        //TODO: All below missing D.ignore = '0' check\n        $ports_down = [];\n        $bgp_down = [];\n        $devices_uptime = [];\n        $syslog = [];\n\n        $devices_down = Device::hasAccess(Auth::user())\n            ->isDown()\n            ->limit(Config::get('front_page_down_box_limit'))\n            ->get();\n\n        if (Config::get('warn.ifdown')) {\n            $ports_down = Port::hasAccess(Auth::user())\n                ->isDown()\n                ->limit(Config::get('front_page_down_box_limit'))\n                ->with('device')\n                ->get();\n        }\n\n        $services_down = Service::hasAccess(Auth::user())\n            ->isCritical()\n            ->limit(Config::get('front_page_down_box_limit'))\n            ->with('device')\n            ->get();\n\n        // TODO: is inAlarm() equal to: bgpPeerAdminStatus != 'start' AND bgpPeerState != 'established' AND bgpPeerState != ''  ?\n        if (Config::get('enable_bgp')) {\n            $bgp_down = BgpPeer::hasAccess(Auth::user())\n                ->inAlarm()\n                ->limit(Config::get('front_page_down_box_limit'))\n                ->with('device')\n                ->get();\n        }\n\n        if (filter_var(Config::get('uptime_warning'), FILTER_VALIDATE_FLOAT) !== false\n            && Config::get('uptime_warning') > 0\n        ) {\n            $devices_uptime = Device::hasAccess(Auth::user())\n                ->isUp()\n                ->whereUptime(Config::get('uptime_warning'))\n                ->limit(Config::get('front_page_down_box_limit'))\n                ->get();\n\n            $devices_uptime = $devices_uptime->reject(function ($device) {\n                return Config::getOsSetting($device->os, 'bad_uptime') == true;\n            });\n        }\n\n        if (Config::get('enable_syslog')) {\n            $syslog = Syslog::hasAccess(Auth::user())\n            ->orderBy('timestamp', 'desc')\n            ->limit(20)\n            ->with('device')\n            ->get();\n        }\n\n        return view('overview.simple', compact('devices_down', 'ports_down', 'services_down', 'bgp_down', 'devices_uptime', 'syslog'));\n    }\n}\n", "<?php\n/**\n * WidgetController.php\n *\n * -Description-\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * @link       https://www.librenms.org\n *\n * @copyright  2018 Tony Murray\n * @author     Tony Murray <murraytony@gmail.com>\n */\n\nnamespace App\\Http\\Controllers\\Widgets;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\DeviceGroup;\nuse App\\Models\\PortGroup;\nuse App\\Models\\UserWidget;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\View\\View;\n\nabstract class WidgetController extends Controller\n{\n    /** @var string sets the title for this widget, use title() function if you need to dynamically generate */\n    protected $title = 'Widget';\n\n    /** @var array Set default values for settings */\n    protected $defaults = [];\n\n    private $show_settings = false;\n    protected $settings = null;\n\n    /**\n     * @param  Request  $request\n     * @return View|string\n     */\n    abstract public function getView(Request $request);\n\n    /**\n     * @param  Request  $request\n     * @return View\n     */\n    public function getSettingsView(Request $request)\n    {\n        return view('widgets.settings.base', $this->getSettings(true));\n    }\n\n    public function __invoke(Request $request)\n    {\n        $this->show_settings = (bool) $request->get('settings');\n\n        if ($this->show_settings) {\n            $view = $this->getSettingsView($request);\n        } else {\n            // This might be invoked in getSettingsView() in an extended class\n            // So don't run it before since it's cached.\n            $this->getSettings();\n\n            if (! empty($this->settings['device_group']) || ! empty($this->settings['port_group'])) {\n                $this->title .= ' (';\n\n                $title_details = [];\n                if (! empty($this->settings['device_group'])) {\n                    $title_details[] = DeviceGroup::find($this->settings['device_group'])->name;\n                }\n                if (! empty($this->settings['port_group'])) {\n                    $title_details[] = PortGroup::find($this->settings['port_group'])->name;\n                }\n\n                $this->title .= implode(' ; ', $title_details);\n                $this->title .= ')';\n            }\n            $view = $this->getView($request);\n        }\n\n        if (! empty($this->settings['title'])) {\n            $title = $this->settings['title'];\n        } else {\n            $title = __(method_exists($this, 'title') ? app()->call([$this, 'title']) : $this->title);\n        }\n\n        return $this->formatResponse($view, $title, $this->settings);\n    }\n\n    /**\n     * Get the settings (with defaults applied)\n     *\n     * @param  bool  $settingsView\n     * @return array\n     */\n    public function getSettings($settingsView = false)\n    {\n        if (is_null($this->settings)) {\n            $id = \\Request::get('id');\n            $widget = UserWidget::find($id);\n            $this->defaults['refresh'] = $this->defaults['refresh'] ?? 60;\n            $this->settings = array_replace($this->defaults, $widget ? (array) $widget->settings : []);\n            $this->settings['id'] = $id;\n\n            if ($settingsView && isset($this->settings['device_group'])) {\n                $this->settings['device_group'] = DeviceGroup::find($this->settings['device_group']);\n            }\n\n            if ($settingsView && isset($this->settings['port_group'])) {\n                $this->settings['port_group'] = PortGroup::find($this->settings['port_group']);\n            }\n        }\n\n        return $this->settings;\n    }\n\n    /**\n     * @param  View|string  $view\n     * @param  string  $title\n     * @param  array  $settings\n     * @param  string  $status\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    private function formatResponse($view, $title, $settings, $status = 'ok')\n    {\n        if ($view instanceof View) {\n            $html = $view->__toString();\n            $show_settings = (int) Str::startsWith($view->getName(), 'widgets.settings.');\n        } else {\n            $html = (string) $view;\n            $show_settings = (int) $this->show_settings;\n        }\n\n        return response()->json([\n            'status' => $status,\n            'title' => __($title),\n            'html' => $html,\n            'show_settings' => $show_settings,\n            'settings' => $settings,\n        ]);\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\BgpPeer;\nuse App\\Models\\Dashboard;\nuse App\\Models\\Device;\nuse App\\Models\\Port;\nuse App\\Models\\Service;\nuse App\\Models\\Syslog;\nuse App\\Models\\User;\nuse App\\Models\\UserPref;\nuse App\\Models\\Widget;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse LibreNMS\\Config;\n\nclass OverviewController extends Controller\n{\n    public function index(Request $request)\n    {\n        $request->validate([\n            'dashboard' => 'integer',\n            'bare' => 'nullable|in:yes',\n        ]);\n\n        $view = Config::get('front_page');\n\n        if (view()->exists(\"overview.custom.$view\")) {\n            return view(\"overview.custom.$view\");\n        } elseif (method_exists($this, $view)) {\n            return $this->{$view}($request);\n        }\n\n        return $this->default($request);\n    }\n\n    public function default(Request $request)\n    {\n        $user = Auth::user();\n        $dashboards = Dashboard::allAvailable($user)->with('user:user_id,username')->orderBy('dashboard_name')->get()->keyBy('dashboard_id');\n\n        // Split dashboards into user owned or shared\n        [$user_dashboards, $shared_dashboards] = $dashboards->partition(function ($dashboard) use ($user) {\n            return $dashboard->user_id == $user->user_id;\n        });\n\n        if (! empty($request->dashboard) && isset($dashboards[$request->dashboard])) {\n            // specific dashboard\n            $dashboard = $dashboards[$request->dashboard];\n        } else {\n            $user_default_dash = (int) UserPref::getPref($user, 'dashboard');\n            $global_default = (int) Config::get('webui.default_dashboard_id');\n\n            // load user default\n            if (isset($dashboards[$user_default_dash])) {\n                $dashboard = $dashboards[$user_default_dash];\n            // load global default\n            } elseif (isset($dashboards[$global_default])) {\n                $dashboard = $dashboards[$global_default];\n            // load users first dashboard\n            } elseif (! empty($user_dashboards)) {\n                $dashboard = $user_dashboards->first();\n            }\n\n            // specific dashboard was requested, but doesn't exist\n            if (isset($dashboard) && ! empty($request->dashboard)) {\n                flash()\n                    ->using('template.librenms')\n                    ->title('Requested Dashboard Not Found!')\n                    ->addError(\"Dashboard <code>#$request->dashboard</code> does not exist! Loaded <code>\n                    \" . htmlentities($dashboard->dashboard_name) . '</code> instead.');\n            }\n        }\n\n        if (! isset($dashboard)) {\n            $dashboard = Dashboard::create([\n                'dashboard_name' => 'Default',\n                'user_id' => $user->user_id,\n            ]);\n        }\n\n        $data = $dashboard\n            ->widgets()\n            ->select(['user_widget_id', 'users_widgets.widget_id', 'title', 'widget', 'col', 'row', 'size_x', 'size_y', 'refresh', 'settings'])\n            ->join('widgets', 'widgets.widget_id', '=', 'users_widgets.widget_id')\n            ->get();\n\n        if ($data->isEmpty()) {\n            $data[] = ['user_widget_id'=>'0',\n                'widget_id'=>1,\n                'title'=>'Add a widget',\n                'widget'=>'placeholder',\n                'col'=>1,\n                'row'=>1,\n                'size_x'=>6,\n                'size_y'=>2,\n                'refresh'=>60,\n            ];\n        }\n\n        $bare = $request->bare;\n        $data = serialize(json_encode($data));\n        $dash_config = unserialize($data);\n        $hide_dashboard_editor = UserPref::getPref($user, 'hide_dashboard_editor');\n        $widgets = Widget::select(['widget_id', 'widget_title'])->orderBy('widget_title')->get();\n\n        $user_list = [];\n        if ($user->can('manage', User::class)) {\n            $user_list = User::select(['username', 'user_id'])\n                ->where('user_id', '!=', $user->user_id)\n                ->orderBy('username')\n                ->get();\n        }\n\n        return view('overview.default', compact('bare', 'dash_config', 'dashboard', 'hide_dashboard_editor', 'user_dashboards', 'shared_dashboards', 'widgets', 'user_list'));\n    }\n\n    public function simple(Request $request)\n    {\n        //TODO: All below missing D.ignore = '0' check\n        $ports_down = [];\n        $bgp_down = [];\n        $devices_uptime = [];\n        $syslog = [];\n\n        $devices_down = Device::hasAccess(Auth::user())\n            ->isDown()\n            ->limit(Config::get('front_page_down_box_limit'))\n            ->get();\n\n        if (Config::get('warn.ifdown')) {\n            $ports_down = Port::hasAccess(Auth::user())\n                ->isDown()\n                ->limit(Config::get('front_page_down_box_limit'))\n                ->with('device')\n                ->get();\n        }\n\n        $services_down = Service::hasAccess(Auth::user())\n            ->isCritical()\n            ->limit(Config::get('front_page_down_box_limit'))\n            ->with('device')\n            ->get();\n\n        // TODO: is inAlarm() equal to: bgpPeerAdminStatus != 'start' AND bgpPeerState != 'established' AND bgpPeerState != ''  ?\n        if (Config::get('enable_bgp')) {\n            $bgp_down = BgpPeer::hasAccess(Auth::user())\n                ->inAlarm()\n                ->limit(Config::get('front_page_down_box_limit'))\n                ->with('device')\n                ->get();\n        }\n\n        if (filter_var(Config::get('uptime_warning'), FILTER_VALIDATE_FLOAT) !== false\n            && Config::get('uptime_warning') > 0\n        ) {\n            $devices_uptime = Device::hasAccess(Auth::user())\n                ->isUp()\n                ->whereUptime(Config::get('uptime_warning'))\n                ->limit(Config::get('front_page_down_box_limit'))\n                ->get();\n\n            $devices_uptime = $devices_uptime->reject(function ($device) {\n                return Config::getOsSetting($device->os, 'bad_uptime') == true;\n            });\n        }\n\n        if (Config::get('enable_syslog')) {\n            $syslog = Syslog::hasAccess(Auth::user())\n            ->orderBy('timestamp', 'desc')\n            ->limit(20)\n            ->with('device')\n            ->get();\n        }\n\n        return view('overview.simple', compact('devices_down', 'ports_down', 'services_down', 'bgp_down', 'devices_uptime', 'syslog'));\n    }\n}\n", "<?php\n/**\n * WidgetController.php\n *\n * -Description-\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * @link       https://www.librenms.org\n *\n * @copyright  2018 Tony Murray\n * @author     Tony Murray <murraytony@gmail.com>\n */\n\nnamespace App\\Http\\Controllers\\Widgets;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\DeviceGroup;\nuse App\\Models\\PortGroup;\nuse App\\Models\\UserWidget;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\View\\View;\n\nabstract class WidgetController extends Controller\n{\n    /** @var string sets the title for this widget, use title() function if you need to dynamically generate */\n    protected $title = 'Widget';\n\n    /** @var array Set default values for settings */\n    protected $defaults = [];\n\n    private $show_settings = false;\n    protected $settings = null;\n\n    /**\n     * @param  Request  $request\n     * @return View|string\n     */\n    abstract public function getView(Request $request);\n\n    /**\n     * @param  Request  $request\n     * @return View\n     */\n    public function getSettingsView(Request $request)\n    {\n        return view('widgets.settings.base', $this->getSettings(true));\n    }\n\n    public function __invoke(Request $request)\n    {\n        $this->show_settings = (bool) $request->get('settings');\n\n        if ($this->show_settings) {\n            $view = $this->getSettingsView($request);\n        } else {\n            // This might be invoked in getSettingsView() in an extended class\n            // So don't run it before since it's cached.\n            $this->getSettings();\n\n            if (! empty($this->settings['device_group']) || ! empty($this->settings['port_group'])) {\n                $this->title .= ' (';\n\n                $title_details = [];\n                if (! empty($this->settings['device_group'])) {\n                    $title_details[] = DeviceGroup::find($this->settings['device_group'])->name;\n                }\n                if (! empty($this->settings['port_group'])) {\n                    $title_details[] = PortGroup::find($this->settings['port_group'])->name;\n                }\n\n                $this->title .= implode(' ; ', $title_details);\n                $this->title .= ')';\n            }\n            $view = $this->getView($request);\n        }\n\n        if (! empty($this->settings['title'])) {\n            $title = $this->settings['title'];\n        } else {\n            $title = __(method_exists($this, 'title') ? app()->call([$this, 'title']) : $this->title);\n        }\n\n        return $this->formatResponse($view, $title, $this->settings);\n    }\n\n    /**\n     * Get the settings (with defaults applied)\n     *\n     * @param  bool  $settingsView\n     * @return array\n     */\n    public function getSettings($settingsView = false)\n    {\n        if (is_null($this->settings)) {\n            $id = \\Request::get('id');\n            $widget = UserWidget::find($id);\n            $this->defaults['refresh'] = $this->defaults['refresh'] ?? 60;\n            $this->settings = array_replace($this->defaults, $widget ? (array) $widget->settings : []);\n            $this->settings['id'] = $id;\n\n            if ($settingsView && isset($this->settings['device_group'])) {\n                $this->settings['device_group'] = DeviceGroup::find($this->settings['device_group']);\n            }\n\n            if ($settingsView && isset($this->settings['port_group'])) {\n                $this->settings['port_group'] = PortGroup::find($this->settings['port_group']);\n            }\n        }\n\n        return $this->settings;\n    }\n\n    /**\n     * @param  View|string  $view\n     * @param  string  $title\n     * @param  array  $settings\n     * @param  string  $status\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    private function formatResponse($view, $title, $settings, $status = 'ok')\n    {\n        if ($view instanceof View) {\n            $html = $view->__toString();\n            $show_settings = (int) Str::startsWith($view->getName(), 'widgets.settings.');\n        } else {\n            $html = (string) $view;\n            $show_settings = (int) $this->show_settings;\n        }\n\n        return response()->json([\n            'status' => $status,\n            'title' => htmlentities(__($title)),\n            'html' => $html,\n            'show_settings' => $show_settings,\n            'settings' => $settings,\n        ]);\n    }\n}\n"], "filenames": ["app/Http/Controllers/OverviewController.php", "app/Http/Controllers/Widgets/WidgetController.php"], "buggy_code_start_loc": [106, 145], "buggy_code_end_loc": [107, 146], "fixing_code_start_loc": [106, 145], "fixing_code_end_loc": [107, 146], "type": "CWE-79", "message": "LibreNMS through 21.10.2 allows XSS via a widget title.", "other": {"cve": {"id": "CVE-2021-43324", "sourceIdentifier": "cve@mitre.org", "published": "2021-11-03T15:15:07.770", "lastModified": "2021-11-04T18:21:41.443", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LibreNMS through 21.10.2 allows XSS via a widget title."}, {"lang": "es", "value": "LibreNMS versiones hasta 21.10.2, permite un ataque de tipo XSS por medio de un t\u00edtulo de widget"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndIncluding": "21.10.2", "matchCriteriaId": "CF0A2A72-F597-4FB0-8395-FCB3BFBFE6C3"}]}]}], "references": [{"url": "https://github.com/librenms/librenms/commit/99d2462b80435b91a35236639b909eebee432126", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/99d2462b80435b91a35236639b909eebee432126"}}