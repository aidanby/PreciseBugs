{"buggy_code": ["# JOBE\n\nVersion: 1.6.4, 22 January 2021\n\n\nAuthor: Richard Lobb, University of Canterbury, New Zealand\n\nContributors: Tim Hunt, Fedor Lyanguzov, Kai-Cheung Leung\n\n## Introduction\n\nJobe (short for Job Engine) is a server that supports running of small\ncompile-and-run jobs in a variety of programming languages. It was\ndeveloped as a remote sandbox for use by\n[CodeRunner](http://github.com/trampgeek/coderunner),\na Moodle question-type plugin that asks students to write code to some\nrelatively simple specification. However, Jobe servers could be useful in\na variety of other contexts, particularly in education.\n\nA job specifies a programming language, the source code, the standard input\nto the run and an optional list of additional files. Jobe compiles the\nsource code (if compilation is appropriate in the specified language) and\nruns it with the given input data. It returns a run_result object containing\nvarious status information plus the output and error output from the run.\n\nThe interface is via a RESTful API, that is documented [here](./restapi.pdf).\n\nThe languages C, C++, Python3, Python2,\nOctave, Java, Pascal and PHP are all built-in. Other languages can be added\nfairly easily although if using Jobe from CodeRunner it is usually even\neasier to write a Python-based question type that scripts the execution of\nthe required language. See the\n[CodeRunner documentation](http://coderunner.org.nz/mod/book/view.php?id=193&chapterid=749)\nfor an example.\n\nThe Computer Science quiz server at the University of Canterbury switched to\nexclusive use of the Jobe sandbox in early July 2014. Since then\nit has run many hundreds of thousands of Python3, C, Java and Octave jobs unattended\nwith only a few minor bug fixes and security refinements.\n\n## Implementation status\n\nThe current version of Jobe (Version 1.6, January 2019) implements\na subset of the originally documented API, sufficient for use by CodeRunner.\nIt has been used for many years at the University of Canterbury for several\nyears, running many millions of submissions. Jobe is also used by over 600 other\nCodeRunner sites around the world. It can be considered stable and secure,\nthough it should be run only on a separate appropriately-firewalled server.\n\nWith reference to the original API spec, onnly immediate-mode runs are\nsupported, with run results being returned with the\nresponse to the POST of the run requests. Run results are not retained by\nthe server (unless *run\\_spec.debug* is true; see the API), so\n*get\\_run\\_status* always returns 404 not found.\n\nFile PUTs are supported but not POSTs. When used by CodeRunner, file IDs are\nMD5 checksums of the file contents.\n\nSince version 1.6, the Jobe server cleans the file cache whenever available\ndisk space drops below 5% of the disk size. It simply deletes all files that\nhaven't been used\nfor 2 days or more, so the server must have enough free disk space\nto stay below 95% full for at least two whole days of running. For CodeRunner\nclients this should not be a problem unless question authors enable large\nclasses of students to attach large files to their submissions. Support files\nattached by question authors are unlikely to be a problem; a Jobe server\nat the University of Canterbury\nserving a large Moodle client with many thousands of questions accumulated only\n200 MB of support files over several years.\n\nFor sandboxing, Jobe uses the [domjudge](http://domjudge.org)\n*runguard* program to run student jobs with restrictions on resource\nallocation (memory, processes, cpu time) as a low-privileged user.\nHowever it does not restrict any system calls.\n\nPrograms may write binary output but the results are returned to the caller\nJSON-encoded, which requires UTF-8 strings. To avoid crashing the\njson-encoder, the standard output and standard error output from the program\nare checked to see if they're valid utf-8. If so, they're returned unchanged.\nOtherwise, they're taken as 8-bit character streams; characters below '\\x20'\n(the space\ncharacter) and above '\\x7E' are replaced by C-style hexadecimal encodings\n(e.g. '\\x8E') except for newlines which are passed through directly, and\ntabls and returns which are replaced with '\\t' and '\\r' respectively.\n\nIf Jobe is to correctly handle utf-8 output from programs, the Apache LANG\nenvironment variable must be set to a UTF-8 compatible value. See\nthe section *Setting the locale* below.\n\nJobe is implemented using Ellis Lab's [codeigniter](http://codeigniter.com) plus the\n[RESTserver plugin](https://github.com/chriskacerguis/codeigniter-restserver) originally\nwritten by Phil Sturgeon and now maintained by Chris Kacerguis.\n\n## Installation\n\n**WARNING** Jobe is primarily intended for use on a\nserver that is firewalled to allow connections from authorised client\nmachines only. If you install it on a machine without such firewalling,\nand do not control access with API keys (see later),\nanyone will be able to connect to your machine and run their own code\non it! **CAVEAT EMPTOR!**\n\nNOTE: a video walkthrough of the process of setting up a Jobe server\non a DigitalOcean droplet is [here](https://www.youtube.com/watch?v=dGpnQpLnERw).\n\nInstallation on Ubuntu 18.04 systems should be\nstraightforward but installation on other flavours of Linux or on systems\nwith non-standard configurations may require\nLinux administrator skills.\n\nAn alternative approach, and probably the simplest way to get up and running,\nis to use the [JobeInABox](https://hub.docker.com/r/trampgeek/jobeinabox/)\nDocker image, which should be runnable with a single terminal command\non any Linux system that has\ndocker installed. Thanks to David Bowes for the initial work on this.\nPlease be aware that while this Docker image has been around for a couple of years\nand no significant issues have been reported the developer has not himself\nused it in a production environment. Feedback is welcomed. The steps to fire\nup a Jobe Server on Digital Ocean using JobeInAbox are given below in section\n*Setting up a JobeInAbox Digital Ocean server*.\n\nJobe runs only on Linux, which must have the Apache web server\ninstalled and running. PHP must have been compiled with the System V\nSemaphone and shared-memory functions enabled\n(see here)[http://www.php.net/manual/en/sem.setup.php], but that's the norm.\nAccess Control Lists (ACLs) must be enabled; they normally are but if the\n`/home/jobe` directory lands up on a mounted volume, you may need to\nexplicitly enable ACLs in the `mount` command or in `/etc/fstab`.\nThe Python3 and the C development system must also be\ninstalled.\n\n### Installing the necessary dependencies\n\nOn Ubuntu-16.04 or 18.04, the commands to set up all the necessary web tools plus\nall currently-supported languages is the following:\n\n    sudo apt-get install apache2 php libapache2-mod-php php-cli\\\n        php-mbstring nodejs git python3 build-essential default-jdk\\\n        python3-pip fp-compiler acl sudo sqlite3\n\n    sudo apt-get install --no-install-suggests --no-install-recommends  octave\n\nOctave and fp are required only if you need to run Octave or Pascal\nprograms respectively.\n\nIf you wish to use API-authentication, which is generally pointless when setting\nup a private Jobe server, you also need the following:\n\n    sudo apt install mysql-server php-mysql\n\nSimilar commands should work on other Debian-based Linux distributions,\nalthough some differences are inevitable (e.g.: acl is preinstalled in Ubuntu,\nwhereas in debian it must be installed).\n\nA Raspberry Pi user reports that they additionally had to use the command\n\n    apt-get install --fix-missing\n\nwhich may help with broken installs on other systems, too.\n\n### Setting up pylint (if you want it)\n\nFirstly, install pylint for your required version of python (assumed here to\nbe python3) with the command:\n\n    sudo -H python3 -m pip install pylint\n\nYou also need to build the /etc/pylintrc file\nto set the default options with one of the following commands, which must be\nrun as root (don't just try prefixing the command with sudo, as the output redirection\nwill fail).\n\nFirstly try the command:\n\n    pylint --reports=no --score=n --generate-rcfile > /etc/pylintrc\n\nIf that gives you an error \"no such option: --score\" (which happens with\nolder versions of pylint), try instead\n\n    pylint --reports=no --generate-rcfile > /etc/pylintrc\n\n### Installing Jobe\n\nClone the Jobe project in the web root directory WEBROOT\n(usually /var/www/html).\nDo not clone it elsewhere and attempt to add it to web root with\nsymbolic links. That breaks this installer. In what follows, replace\nWEBROOT with either /var/www or /var/www/html as appropriate.\n\nTo clone Jobe:\n\n    cd WEBROOT\n    sudo git clone https://github.com/trampgeek/jobe.git\n\nInstallation is performed by the install script, which must be run as root\nso that it can add the required jobe run users (jobe00, jobe01, etc) and\nset-up a jobe-sudoers file in /etc/sudoers.d that allows the web server\nto execute the runguard program as root and to kill any residual jobe\nprocesses from the run.\n\n    cd WEBROOT/jobe\n    sudo ./install\n\nOn Centos6 systems (and possibly early Centos7 releases) you should also\ncomment out the line\n\n    Defaults requiretty\n\nin /etc/sudoers. This was\n(reported as a bug)[https://bugzilla.redhat.com/show_bug.cgi?id=1196451]\nand was fixed in later RHEL releases.\n\n### Setting the locale\n\nBy default, Apache is configured to use the C locale. This means that programs\ngenerating, say, UTF-8 output will fail with an error\n\n    UnicodeEncodeError: 'ascii' codec can't encode character ...\n\nIf you wish to run UTF-8 code (recommended) you should\nfind the line in the Apache envvars file (on Ubuntu systems this is to be found\nat /etc/apache2/envvars)\n\n    export LANG=C\n\nand change it to either C.UTF-8 (which changes the charset to UTF-8 but leaves\nother locale settings unchanged) or to the required standard locale value, e.g.\n\n    export LANG=en_NZ.UTF-8\n\nMake sure that whatever locale you use is installed on the Jobe server.\n\nThen restart apache with the command\n\n    sudo service apache2 restart\n\nNote:\n\n1. The comment in the Apache envvars file suggesting the use of the default\nlocale probably won't\nwork, as this will also just give you ASCII text.\n\n2. To take advantage of the UTF-8 capabilities in CodeRunner you will need\nto use Version 3.3 or later.\n\n## Setting up a JobeInAbox Digital Ocean server\n\nFor people wanting to get a Jobe server up in hurry, the following is\nprobably the simplest approach. This uses a minimal Digital Ocean virtual machine,\ncosting just $US5.00 per month, to run the Docker *JobeInAbox* image.\nOther cloud servers, such as Amazon ECS, can of course also be used.\n\n 1. Set yourself up with an account on [Digital Ocean](https://cloud.digitalocean.com).\n 2. Create new Droplet: Ubuntu 20.04. x64, minimal config ($5 per month; 1GB CPI, 25GB disk)\n 3. Connect to the server with an SSH client.\n 4. Install docker (see https://phoenixnap.com/kb/how-to-install-docker-on-ubuntu-18-04): \n    sudo apt update; sudo apt install docker.io\n 5. Launch JobeInABox with Docker: sudo docker run -d -p 80:80 --name jobe trampgeek/jobeinabox:latest\n\nAt this point you have a running Jobe server. You can check it's working by browsing to\n\n    http://<hostname>/jobe/index.php/restapi/languages\n\nYou should get presented with a JSON list of installed languages.\n\nAnd you can connect your CodeRunner plugin to it by setting the new JobeServer\nIP number in the Admin panel of the plugin. You're in business!\n\nAll that remains is to firewall your new server so that only your Moodle server\ncan use it, and so it can't itself open outgoing connections. For example:\n\n    sudo apt install ufw\n    sudo ufw default reject outgoing\n    sudo sudo ufw allow in 22/tcp\n    sudo ufw allow in proto tcp to any port 80 from <your moodle server IP>\n    sudo ufw enable\n\n\n## Testing the install\n\nTo test the installation, first try running the tester with the command\n\n    python3 testsubmit.py\n\nThe first time you run this command, the initial step of obtaining all the\ndifferent versions of all language is slow, as it has to test-drive all compilers and\ninterpreters. Be patient. Results are cached in a file\nin /tmp so subsequent runs will be much faster, at least until the next reboot,\nwhen the list is rebuilt.\n\nAll going well, you should then be able to copy the *testsubmit.py* file to\nany client machine that is allowed to access the jobe server, edit the line\n\n    JOBE_SERVER = 'localhost'\n\nto reference the JOBE_SERVER, e.g. by replacing *localhost* with its IP\nnumber, and re-run the tester with the same command from the client machine.\n\n## Using Jobe\n\nUsually Jobe is used as a server for Moodle CodeRunner questions. So once jobe\nhas been installed and tested with `testsubmit.py` it can be used by CodeRunner\nquestions by plugging the Jobe server hostname into the CodeRunner administrator\nsettings, replacing the default value of `jobe2.cosc.canterbury.ac.nz`.\n\nHowever, Jobe can also be used standalone. The `testsubmit.py` program shows\nhow it can be invoked from a Python client. There are also two other simpler\nclients provided in this repository: `simpletest.py` and `minimaltest.py`.\nNote that the POST request\npayload must a JSON object with a *run_spec* attribute as specified in the\ndocument *restapi.pdf*. For example, the following POST data runs the classic\nC \"Hello World\" program:\n\n    {\"run_spec\": {\"language_id\": \"c\", \"sourcefilename\": \"test.c\", \"sourcecode\": \"\\n#include <stdio.h>\\n\\nint main() {\\n    printf(\\\"Hello world\\\\n\\\");\\n}\\n\"}}\n\nThe POST request must have the header\n\n    Content-type: application/json; charset-utf-8\n\nand should be sent to a URL like\n\n    localhost/jobe/index.php/restapi/runs\n\nFor example, the following Linux `curl` command runs the C Hello World program:\n\n    curl -d '{\"run_spec\": {\"language_id\": \"c\", \"sourcefilename\": \"test.c\", \"sourcecode\": \"\\n#include <stdio.h>\\n\\nint main() {\\n    printf(\\\"Hello world\\\\n\\\");\\n}\\n\"}}' -H \"Content-type: application/json; charset-utf-8\"  localhost/jobe/index.php/restapi/runs\n\n## Updating Jobe\n\nIf you wish to update an existing version of Jobe to a new one, first put the\nthe client Moodle server into maintenance mode. Reboot the Jobe server. Then `cd`\ninto the Jobe directory, do a `git pull` to update the code, then run the\ninstaller with the --purge option, i.e.\n\n    sudo ./install --purge\n\nCheck that all is well by testing as in the section \"Testing the install\" above.\nLastly take the Moodle server out of maintenance mode again.\n\n## Debugging\n\nIf you have problems installing Jobe, here are some things to check.\n\nIf the install script fails, check the error message. You should be able\n    to read through the script and figure out what went wrong. Otherwise ...\n\n1. Check the install went OK:\n\n 1. Make sure your webserver has read access to the entire jobe subtree.\n 1. Make sure your webserver has write access to jobe/files\n 1. Make sure there exist users jobe and jobe00 through jobe09.\n 1. Make sure there is a directory /home/jobe/runs owned by jobe and writeable\n    by the webserver. It should not be readable or writeable by all.\n 1. Make sure there is a directory /var/log/jobe.\n\nIf the install appears OK but testsubmit.py fails:\n\n 1. If you get messages \"Bad result object\", something is fundamentally broken.\n    Start by rebooting your server, and make sure Apache is running, e.g.\n    by browsing to http://\\<jobehost\\>.\n1.  Try pointing your browser at http://\\<jobehost\\>/jobe/index.php/restapi/languages\n    This should return a JSON list of languages. If not, you may at least get\n    a readable error message.\n 1. You are running testsubmit.py with Python3, right?\n 1. Check the apache error log.\n 1. Set DEBUGGING = True in testsubmit.py (around line 19). This will result\n    in all jobe runs being saved in /home/jobe/runs. [Normally a run directory\n    is removed after each run completes.]\n 1. If something unexpected happened with the actual run of a program, find\n    the run in /home/jobe/runs and try executing the program manually. [The\n    run directory contains the source file, the bash command used to run it,\n    plus the compile output and (if it ran) the stderr and stdout outputs.\n 1. Check for any error messages in /var/log/jobe/*.\n 1. Turn on debug level of logging in jobe/application/config/config.php by\n    setting the log_threshold to 2 (around line 183). You should now get\n    screeds of log info in the directory /var/log/jobe. Most of this comes\n    from the framework; look for lines beginning *jobe*. These are all issued\n    by restapi.php in application/controllers, which is the top level handler\n    for all http requests.\n 1. If you are getting Overloaded errors, then you can display the in-memory\n    locks on the Jobe users with this PHP one-liner:\n    ```php -r 'print_r(shm_get_var(shm_attach(ftok\n      (\"/var/www/html/jobe/application/libraries/LanguageTask.php\", \"j\")), 1));'\n\nIf you still can't figure it out, email me (Richard Lobb; my gmail name is\ntrampgeek).\n\n## An optional extra installation step\n\n[For paranoid sysadmins only].\n\nSubmitted jobs can generally write files only into the temporary directory\ncreated for their run within the '/home/jobe/runs'\ndirectory. Exceptions to this rule are the /tmp, /var/tmp, /var/crash and\n/run/lock directories all of which\nconventionally can be written into by any Linux process.\n\nThe temporary working directory and any files in the writable directories\nmentioned above are deleted on the termination of the run. However, depending on\nthe size of the various partitions and\nthe allowed maximum run time, it might in principle be\npossible for a rogue process, or a deliberate attacker, to run the system\nout of disk space in a particular partition (probably /tmp, which is usually\nrelatively small),\nbefore the job terminates. That could in turn impact upon other jobs in\nprogress.\n\nThis possibility is considered very remote under normal circumstances. With typical\nrun times of a few seconds, jobs\ntime out long before they can fill up a main partition such as that housing\n/home/jobe. Filling up /tmp is easier but jobs shouldn't generally be using\nthat directory, so a rogue process that fills it up shouldn't affect other users. In\neither case, the space is freed as soon as the job terminates. Certainly this\nis not a problem we have ever observed in\npractice. However, it should be possible to protect against such an outcome by\nsetting disk quotas for the users jobe00, jobe01, ... jobe09 [The number\nof such user accounts is defined by the parameter `jobe_max_users` in\n`application/config/config.php`. The default value is 10.]\nInstructions for installing the quota\nmanagement system and setting quotas are given in various places on the web, e.g.\n[here](https://www.digitalocean.com/community/tutorials/how-to-enable-user-and-group-quotas).\nThe precise details will vary from system to system according to how the disk\npartitions are set up; quotas should be\nset for all jobe users on whatever partitions contain /home/jobe, /tmp, /var/tmp,\n/var/crash and /run/lock.\n\n## Securing the site\n\n### Securing by means of a firewall\n\nBy default, Jobe is expected to run on an Intranet server\nthat is firewalled\nto permit access only from specific authorised hosts. In this mode,\nthe client is assumed to be trusted and does not need to provide any form of\nauthorisation or authentication. It is also important to prevent the jobe\nserver from opening connections to other machines, so that a student\nprogram cannot do nasty things like port-scanning within your Intranet.\n\nUsing ufw (Uncomplicated Firewall) a possible command\nsequence that will restrict outgoing traffic to just a single nominated host\n(\"some useful ip\") on ports 80 and 443, allow ssh access (port 22) from anywhere and web\naccess to jobe (assumed to be on port 80) from just one specified client is the\nfollowing:\n\n    ufw default reject outgoing\n    ufw allow out proto tcp to <some_useful_ip> port 80,443\n    ufw allow in 22/tcp\n    ufw allow in proto tcp to any port 80 from <your_client_ip>\n    ufw enable\n\nIn the above, <your\\_client\\_ip> is the host that is permitted to send jobs\nto Jobe (e.g. a Moodle server with CodeRunner). <some\\_useful\\_ip> is\nany server to which Jobe might need to connect in order to run/grade\nstudent code. In the absence of such a server, that line should be omitted.\n\n### Securing with API keys (rarely useful)\n\nIf you wish Jobe to serve multiple clients and do not wish to open a\nspecific port for each one you will need to configure the firewall to allow\nincoming connections from anywhere but you should then also configure the rest-server\nto require some form of authentication and authorisation. The various\nways of achieving this are discussed in the documentation of the\n[rest-server plugin](https://github.com/chriskacerguis/codeigniter-restserver).\n\nThe simplest authorisation approach is to provide an API key on each request.\nThe client must then provide the key with each request in an X-API-Key header of\nthe form\n\n    X-API-KEY: <key>\n\nTo set up Jobe to run in this way, proceed as follows:\n\n 1. Make sure you installed the additional dependencies for API-key authentication\n    given in the section \"Installing the necessary dependencies\". You need\n    to be running a PHP version prior to PHP 7.2 (like that on Ubuntu 16.04 for\n    example).\n\n 1. Create a database called *jobe* and define a user with full access to it.\n\n 1. Edit *application/config/database.php* to access your mysql server and\n    the jobe database with the user credentials you defined in the previous\n    step.\n\n 1. Edit the file *application/config/rest.php* and set the configuration\n    parameter *rest_enable_keys* to 1.\n\n 1. Set up tables `keys` and `limits` as explained in *rest.php*. Populate\n    the `keys` table with one or more API keys, which must then be used by\n    any requests to the Jobe server.\n\nIf running in API-Key mode, you should still firewall the Jobe server to\nprevent it opening any sockets to other machines.\n\n### Other security mechanisms\n\nIf serving multiple clients, you may wish to restrict the use made of the\nserver by one or more clients. This can be done by\nsetting the *rest_enable_limits* parameter\nin *application/config/rest.php* to non-zero.\nJobe will then limit the number of requests made\nwith any given key to the values set in\n*application/config/per_method_limits.php*.\n\nFor this to work, the *jobe* database must contain an additional table *limits*,\ndefined with an SQL command like\n\n\tCREATE TABLE `limits` (\n\t  `id` int(11) NOT NULL AUTO_INCREMENT,\n\t  `uri` varchar(255) NOT NULL,\n\t  `count` int(10) NOT NULL,\n\t  `hour_started` int(11) NOT NULL,\n\t  `api_key` varchar(40) NOT NULL,\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nYou can turn off limit checking on a key-by-key basis by setting the *ignore_limits*\nto FALSE in the *keys* table.\n\nYou should read the REST-server plugin documentation and the file\n*application/config/rest.php* for other features available.\n\n\n## Run_spec parameters\n\nThe Jobe REST API specification document defines the format of a so-called\n*run_spec*, which is the record/object that is encoded within a POST request\nor a run request to specify the job details. It includes the language_id, the\nsource code, the source file name, any standard input data, a list of required\nfiles and a set of job parameters. The job parameters are not defined by the\nREST API as they are implementation dependent. This section defines the\nformat of the *parameters* field of a *run_spec* in this implementation.\n\nThe allowable attributes of the parameters field, plus their global default values\nin parentheses, are:\n\n 1. disklimit (20): the maximum number of megabytes that can be written to disk file(s)\nbefore the job is aborted\n 1. streamsize (2): the maximum number of megabytes of standard output before the\njob is aborted.\n 1. cputime (5): the maximum number of seconds of CPU time before the job is aborted\n 1. memorylimit (usually 200 but 600 for Python3):\nthe maximum number of megabytes of memory the task can consume. This value is\nused to set the Linux RLIMIT_STACK, RLIMIT_DATA and\nRLIMIT_AS via the *setrlimit* system call. If the value is exceeded the job\nis not aborted but malloc and/or mmap calls will fail to allocate more memory\nwith somewhat unpredictable results, although a segmentation fault is the most\nlikely outcome.\n 1. numprocs (20): the maximum number of processes the task is allowed. If\nthis is exceeded the *fork* system call will fail with, again, somewhat\nunpredictable outcomes.\n 1. compileargs ([]): a list of string option values to pass to the compiler,\nsuch as [\"-Wall\", \"-std=c99\"] for the C compiler. Meaningful only for compiled\nlanguages. These arguments precede the name of the file to be compiled.\n 1. linkargs ([]): a list of string option values to pass to the compiler,\nsuch as [\"-lm\"] for the C compiler. These arguments follow the name of the file\nto be compiled. Meaningful only for some compiled\nlanguages, notably C and C++.\n 1. interpreterargs ([]): a list of string option values to pass to the\nlanguage interpreter or Java VM etc when the program is executed. Meaningful\nonly for languages like Python, PHP and Java where the output from the compiler\nis not pure executable machine code.\n 1. runargs ([]): a list of string option values to pass to the executed\nprogram, e.g. to set *argc* and *argv* for a C program. Not generally useful\nfrom CodeRunner as there is no way to set parameters on a per-test-case basis.\n\nIndividual languages will usually set their own default values for *compileargs*\nand *interpreterargs*.\n\nIf any of the above attributes are defined within the run_spec\n*parameters* field, the latter is used and the defaults are ignored.\n\nThe default values of *compileargs*\nand *interpreterargs* for the currently-implemented languages are as follows.\nAn empty default means the global default is used.\n\n<table>\n<tr>\n   <th>language_id</th><th>language</th><th>compileargs</th><th>interpreterargs</th>\n</tr>\n  <td>c</td><td>C</td><td>[\"-Wall\", \"-Werror\", \"-std=c99\", \"-x c\"]</td><td></td>\n<tr>\n  <td>cpp</td><td>C++</td><td>[\"-Wall\", \"-Werror\"]</td><td></td>\n</tr>\n<tr>\n  <td>python2</td><td>Python2</td><td></td><td>[\"-BESs\"]</td>\n</tr>\n<tr>\n  <td>python3</td><td>Python3</td><td></td><td>[\"-BE\"]</td>\n</tr>\n<tr>\n  <td>java</td><td>Java</td><td></td><td>[\"-Xrs\", \"-Xss8m\", \"-Xmx200m\"]</td>\n</tr>\n<tr>\n  <td>nodejs</td><td>JavaScript (nodejs)</td><td></td><td>[\"--use_strict\"]</td>\n</tr>\n<tr>\n  <td>octave</td><td>Octave (matlab variant)</td><td></td><td>[\"--norc\", \"--no-window-system\", \"--silent\", \"-H\"]</td>\n</tr>\n<tr>\n  <td>php</td><td>PHP</td><td></td><td>[\"--no-php-ini\"]</td>\n</tr>\n<tr>\n  <td>pascal</td><td>Free Pascal</td><td>[\"-vew\", \"-Se\"]</td><td></td>\n</tr>\n\n</table>\n\n## Configuration\n\nThis version of jobe is configured for use by Moodle Coderunner. When using\nJobe from CodeRunner the\nvarious language compile and run options can be changed\nvia the sandbox Parameters field in the question authoring form (using the\nadvanced customisation capabilities) of either the question prototype\nor within a particular question as suggested by the previous\nsection. For example, if the sandbox *Parameters* field is set to\n\n        { \"compileargs\": [\"-Wall\", \"-Werror\", \"-std=c89\"] }\n\nfor a C question, the code will be compiled with all warnings enabled, aborting\nif any warnings are issued and will need to be C89 compliant.\n\nIf you wish to change the existing default options within Jobe, or you wish to\nadd new languages, you must edit the source code as follows.\n\nThe folder *application/libraries* contains all the code that executes\nsubmitted jobs. The file *LanguageTask.php* defines an abstract class\n*Task* that contains default configuration parameters for things like\nmemory limit, maximum cpu run time, maximum disk output, etc. For each\nsupported language, a subclass with a name of the form *&lt;Language&gt;_Task*\nresides in a file named *&lt;language&gt;_task.php*. For example, *c_task.php*\ncontains all the parameters specific to running C tasks, *octave_task.php*\ncontains parameters for running Octave tasks, etc. To add a new language\nto Jobe you just drop in a new *&lt;language&gt;_task.php* file;\nits presence is autodetected\nby the Restapi constructor and the language will be available immediately.\n\nEach subclass of LanguageTask typically defines at least the following three\nmethods:\n1. __construct(). This is the constructor. It should generally call the parent\n   constructor then set any language-specific default compile and/or interpret\n   and/or run options.\n\n1. getVersion(). This returns a string defining what version of the language,\n   compiler etc is supported. It's not actually used by CodeRunner but is\n   available via the rest API.\n\n1. compile(). Calling this method must result in the file named\n   $this->sourceFileName being compiled, with an executable output file\n   being placed in the current working directory. If compilation succeeds\n   the name of the executable\n   must be returned in $this->executableFileName; alternatively\n   $this->cmpinfo should be set to an appropriate error message; any non-empty\n   string is taken as a compile error. Interpreted languages might do nothing\n   or might copy the program.\n\n1. getRunCommand(). This method must return an array of strings that, when\n   joined with a space separator, make a bash command to execute the\n   program resulting from the compile(). Execution parameters\n   like the Java heap size are set in this function. The output from this\n   function is passed to the RunguardSandbox, after addition of standard\n   I/O redirection plus other sandbox parameters (see *getParam* below).\n\nAdditionally the subclass may define:\n\n1. filteredStderr(). This takes $this->stderr and returns a filtered version,\n   which might be necessary in some languages to remove extraneous text\n   or remove special characters like form-feed or tab in order to make the\n   result more appropriate for subsequent use, e.g. for display to students\n   in a CodeRunner result table.\n\n1. filteredStdout(). This performs the same task as filteredStderr() except it\n   filters stdout, available to the function as $this->stdout.\n\n## Change Log\n\n### Version 1.2\n\nFixed bug with Java when correct source file name supplied in the request\n(rename of file to itself was failing). Thanks Paul Denny.\nReplaced uses of Moodle coding_exception with generic exception. Again thanks\nPaul Denny.\n\nFixed bug in C++ task - invalid language type being passed to compiler.\n\nUpdated CodeIgniter Rest Server to latest version.\n\nAdded code to load limit data from a config file \"per\\_method\\_limits.php\" to\nsupport per-API-key limits on the number of calls that can be made to the\nrestapi's POST and PUT entry points per hour. Updated the documentation to\nexplain how to turn on API-key authorisation and per-method limits.\n\n### Version 1.2.2\n\nAdded code to support CORS (Cross Origin Resource Sharing), i.e.,\nin-browser JavaScript requests from arbitrary domains.\n\n### Version 1.2.3\n\nFixed bug in how Java class names (and hence source file\nnames) were inferred from the source code (main classes that implemented an\ninterface or extended a subclass were not handled correctly). Also the filename\nfield in the REST API runspec is now optional; if provided, it is trusted\nand used as-is, but if not supplied or if an empty string is supplied, Jobe\nnow calls a language-specific function to provide a filename from the sourcecode.\n[Usually this is just something generic like prog.cpp, prog.py etc]\n\n### Version 1.2.4\n\nFixed issue with runguard that prevented use of pthreads library in C programs.,\n\n### Version 1.3\n\nPascal support added by Fedor Lyanguzov (thanks Fedor)\n\nGood luck!\n\n### Version 1.3.1\n\nMinor patches to ensure PHP7 compability. Install instruction in readme.md\nstill relate to PHP5, however.\n\n### Version 1.3.2\n\nChange Java config parameters to allow Java 8 to run (more memory and\nmore processes).\n\n### Version 1.3.3\n\nRemove inline declaration of readoptarg in runguard.c (causing compile errors\nwith most recent gcc versions). Documentation tweaks.\n\n### Version 1.3.4\n\nFix serious security flaw in runguard + my use of it.\n\n### Version 1.3.5\n\n1. Fix broken caching of language versions (wasting time on each submission).\n1. Improve identification of language versions; 'Unknown' is now given as the\nlanguage version if a language get-version command runs but produces output\nin an unexpected format. Formerly such languages were deemed invalid.\n1. Change Java task so supplied memlimit is ignored, leaving JVM to manage its\nown memory.\n1. Add 'getLanguages' to simpletest.py and testsubmit.py.\n\n### Version 1.3.5+ 16 June 2017\n\n 1. Improve installer to handle installation on servers with less permissive\n    access rights than Ubuntu 16.04.\n 1. Delete any files created in /tmp, /var/tmp, /run/lock and /var/crash\n    on completion of a run.\n 1. Limit maximum CPU time for any one Jobe to 30 secs (config constant).\n\nThanks Kai-Cheung Leung for the first two of those additions.\n\n### Version 1.3.6 21 June 2017\n\n 1. Minimum PHP version is now required to be 5.5. (This is now checked in the installer.)\n 1. Compilation of the Student's code is now also done in the runguard sandbox.\n    This provides an additional layer of security.\n\nThanks Tim Hunt for most of the work in this addition.\n\n### 1.3.6+\n\n 1. Tune retry count for better performance under overload.\n 1. Documentation updates\n 1. Tweak installer for Centos detection of web server\n\n### 1.4.0\n\n  1. Tweaks to allow full utf-8 output to be returned, provided Apache's LANG\n     variable is set to a UTF-8 compatible value.\n\n### 1.4.1\n\n  1. Merged in switch to pylint3/python3 completely (thanks Garth Williamson)\n\n### 1.4.2\n\n  1. Bug fix: Jobe server overload was being incorrectly reported as a Runguard\n     error (\"No user jobe-1\").\n### 1.4.3\n\n  1. Fix bug in testsubmit.php when used with latest pylint3.\n  1. Document dependency script for Ubuntu 18.04 plus limitations due to missing\n     mcrypt.\n\n### 1.5.0\n\n  1. Move to latest versions of CodeIgniter and RestServer frameworks, primarily\n     to fix bug with PHP versions > 7.1 no longer supporting mcrypt library,\n     but also for improved security and error handling.\n\n### 1.6.0\n\n  1. Change file cache directory from /var/www/html/jobe/files to /home/jobe/files\n  1. Change file cache to use a 3 level hierarchy, using the first 4 chars of\n     the MD5 file-id (2 pairs of 2) for the directory names to improve lookup\n     performance when there are many files.\n  1. Implement a simple cache clean mechanism that deletes all files that\n     haven't been used for 2 or more days whenever less than 5% of the disk\n     space is free.\n  1. Document in restapi that use of *check_file* to confirm existence of a\n     required file before a run is unsafe, as the file might be removed by\n     the cache cleaner between the two runs.\n\n### 1.6.0+ (5 December 2019)\n\n  1. Correct bad JSON in documentation (was using single quoted strings).\n\n### 1.6.1 (14 April 2020)\n\n  1. Tweak handling of timeouts to kill jobs after a wall-clock time in excess\n     of twice the given max_cpu_time\n  1. Document issue with handling of resource limits. Jobe is inappropriately\n     applying the compile resource limits even for non-compile tasks.\n     However, fixing this might break existing questions and it's not a\n     serious problem.\n  1. Correct bad JSON in documentation that used single-quoted strings.\n  1. Add /var/lock to the list of directories to be cleaned on task exit.\n     While it's usually a symbolic link to /run/lock, apparently that's not\n     always the case.\n  1. Accept Java programs that use \"static public\" in main() declaration rather\n     than the more usual \"public static\".\n  1. Fix deprecation warning with PHP 7.4 (and possibly earlier) resulting from\n     loading the JSON-encoded language cache file into an object rather than an\n     associative array.\n\n### 1.6.2 (16 May 2020)\n\n  1. Increase memory limit for Python3 to 600 MB. Document.\n\n### 1.6.2+ (24 May 2020)\n\n  1. Change install instructions to install non-GUI Octave.\n\n### 1.6.3 (20 November 2020)\n\n  1. Prevent privilege escalation attacks via cputime parameter, [issue #39](https://github.com/trampgeek/jobe/issues/39).\n  1. Change the invalid nodejs program in testsubmit.py to be even more invalid,\n     so it fails to run with all versions of nodejs.\n\n### 1.6.4 (22 January 2021)\n\n  1. Workaround for bug in py_compile (https://bugs.python.org/issue38731)\nthat results in multiple error messages when a python syntax check fails.\n", "<?php\n\n/*\n * Copyright (C) 2014 Richard Lobb\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nif ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\nrequire_once('application/libraries/REST_Controller.php');\nrequire_once('application/libraries/LanguageTask.php');\nrequire_once('application/libraries/JobException.php');\nrequire_once('application/libraries/resultobject.php');\nrequire_once('application/libraries/filecache.php');\n\ndefine('MAX_READ', 4096);  // Max bytes to read in popen\ndefine('MIN_FILE_IDENTIFIER_SIZE', 8);\ndefine('LANGUAGE_CACHE_FILE', '/tmp/jobe_language_cache_file');\n\n\nclass Restapi extends REST_Controller {\n\n    protected $languages = array();\n\n    // Constructor loads the available languages from the libraries directory.\n    // [But to handle CORS (Cross Origin Resource Sharing) it first issues\n    // the access-control headers, and then quits if it's an OPTIONS request,\n    // which is the \"pre-flight\" browser generated request to check access.]\n    // See http://stackoverflow.com/questions/15602099/http-options-error-in-phil-sturgeons-codeigniter-restserver-and-backbone-js\n    public function __construct()\n    {\n        header('Access-Control-Allow-Origin: *');\n        header(\"Access-Control-Allow-Headers: X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Request-Method\");\n        header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, HEAD, DELETE\");\n        $method = $_SERVER['REQUEST_METHOD'];\n        if($method == \"OPTIONS\") {\n            die();\n        }\n        parent::__construct();\n\n        $this->languages = $this->supported_languages();\n\n        if ($this->config->item('rest_enable_limits')) {\n            $this->load->config('per_method_limits');\n            $limits = $this->config->item('per_method_limits');\n            foreach ($limits as $method=>$limit) {\n                $this->methods[$method]['limit'] = $limit;\n            }\n        }\n    }\n\n\n    protected function log($type, $message) {\n        // Call log_message with the same parameters, but prefix the message\n        // by *jobe* for easy identification.\n        log_message($type, '*jobe* ' . $message);\n    }\n\n\n    protected function error($message, $httpCode=400) {\n        // Generate the http response containing the given message with the given\n        // HTTP response code. Log the error first.\n        $this->log('error', $message);\n        $this->response($message, $httpCode);\n    }\n\n\n    public function index_get() {\n        $this->response('Please access this API via the runs, runresults, files or languages collections', 404);\n    }\n\n    // ****************************\n    //         FILES\n    // ****************************\n\n    // Put (i.e. create or update) a file\n    public function files_put($fileId=FALSE) {\n        if ($fileId === FALSE) {\n            $this->error('No file id in URL');\n        }\n        $contentsb64 = $this->put('file_contents', FALSE);\n        if ($contentsb64 === FALSE) {\n            $this->error('put: missing file_contents parameter');\n        }\n\n        $contents = base64_decode($contentsb64, TRUE);\n        if ($contents === FALSE) {\n            $this->error(\"put: contents of file $fileId are not valid base-64\");\n        }\n\n        if (FileCache::file_put_contents($fileId, $contents) === FALSE) {\n            $this->error(\"put: failed to write file $fileId to cache\", 500);\n        }\n        $len = strlen($contents);\n        $this->log('debug', \"Put file $fileId, size $len\");\n        $this->response(NULL, 204);\n    }\n\n\n    // Check file\n    public function files_head($fileId) {\n        if (!$fileId) {\n            $this->error('head: missing file ID parameter in URL');\n        } else if (FileCache::file_exists($fileId)) {\n            $this->log('debug', \"head: file $fileId exists\");\n            $this->response(NULL, 204);\n        } else {\n            $this->log('debug', \"head: file $fileId not found\");\n            $this->response(NULL, 404);\n        }\n    }\n\n    // Post file\n    public function files_post() {\n        $this->error('file_post: not implemented on this server', 403);\n    }\n\n    // ****************************\n    //        RUNS\n    // ****************************\n\n    public function runs_get() {\n        $id = $this->get('runId');\n        $this->error('runs_get: no such run or run result discarded', 200);\n    }\n\n\n    public function runs_post() {\n        global $CI;\n\n        // Note to help understand this method: the ->error and ->response methods\n        // to not return. Then send the response then call exit().\n\n        // Check this looks like a valid request.\n        if (!$run = $this->post('run_spec', false)) {\n            $this->error('runs_post: missing or invalid run_spec parameter', 400);\n        }\n        if (!is_array($run) || !isset($run['sourcecode']) ||\n                !isset($run['language_id'])\n        ) {\n            $this->error('runs_post: invalid run specification', 400);\n        }\n\n        // REST_Controller has called to_array on the JSON decoded\n        // object, so we must first turn it back into an object.\n        $run = (object) $run;\n\n        // If there are files, check them.\n        if (isset($run->file_list)) {\n            $files = $run->file_list;\n            foreach ($files as $file) {\n                if (!$this->is_valid_filespec($file)) {\n                    $this->error(\"runs_post: invalid file specifier: \" . print_r($file, true), 400);\n                }\n            }\n        } else {\n            $files = array();\n        }\n\n        // Get the the request languages and check it.\n        $language = $run->language_id;\n        if (!array_key_exists($language, $this->languages)) {\n            $this->response(\"Language '$language' is not known\", 400);\n        }\n        $reqdTaskClass = ucwords($language) . '_Task';\n        if (!isset($run->sourcefilename) || $run->sourcefilename == 'prog.java') {\n            // If no sourcefilename is given or if it's 'prog.java',\n            // ask the language task to provide a source filename.\n            // The prog.java is a special case (i.e. hack) to support legacy\n            // CodeRunner versions that left it to Jobe to come up with\n            // a name (and in Java it matters).\n            $run->sourcefilename = '';\n        }\n        require_once($this->get_path_for_language_task($language));\n\n        // Get any input.\n        $input = isset($run->input) ? $run->input : '';\n\n        // Get the parameters, and validate.\n        $params = isset($run->parameters) ? $run->parameters : array();\n        if (isset($params['cputime']) &&\n                intval($params['cputime']) > intval($CI->config->item('cputime_upper_limit_secs'))\n        ) {\n            $this->response(\"cputime exceeds maximum allowed on this Jobe server\", 400);\n        }\n\n        // Debugging is set either via a config parameter or, for a\n        // specific run, by the run's debug attribute.\n        // When debugging, the task run directory and its contents\n        // are not deleted after the run.\n        $debug = $this->config->item('debugging') ||\n                (isset($run->debug) && $run->debug);\n\n        // Create the task.\n        $this->task = new $reqdTaskClass($run->sourcefilename, $input, $params);\n\n        // The nested tries here are a bit ugly, but the point is that we want to\n        // to clean up the task with close() before handling the exception.\n        try {\n            try {\n                $this->task->prepare_execution_environment($run->sourcecode);\n\n                $this->task->load_files($files);\n\n                $this->log('debug', \"runs_post: compiling job {$this->task->id}\");\n                $this->task->compile();\n\n                if (empty($this->task->cmpinfo)) {\n                    $this->log('debug', \"runs_post: executing job {$this->task->id}\");\n                    $this->task->execute();\n                }\n\n            } finally {\n                // Delete task run directory unless it's a debug run\n                $this->task->close(!$debug);\n            }\n\n            // Success!\n            $this->log('debug', \"runs_post: returning 200 OK for task {$this->task->id}\");\n            $this->response($this->task->resultObject(), 200);\n\n        // Report any errors.\n        } catch (JobException $e) {\n            $this->log('debug', 'runs_post: ' . $e->getLogMessage());\n            $this->response($e->getMessage(), $e->getHttpStatusCode());\n\n        } catch (OverloadException $e) {\n            $this->log('debug', 'runs_post: overload exception occurred');\n            $resultobject = new ResultObject(0, Task::RESULT_SERVER_OVERLOAD);\n            $this->response($resultobject, 200);\n\n        } catch (Exception $e) {\n            $this->response('Server exception (' . $e->getMessage() . ')', 500);\n        }\n    }\n\n    // **********************\n    //      RUN_RESULTS\n    // **********************\n    public function runresults_get()\n    {\n        $this->error('runresults_get: unimplemented, as all submissions run immediately.', 404);\n    }\n\n\n    // **********************\n    //      LANGUAGES\n    // **********************\n    public function languages_get()\n    {\n        $this->log('debug', 'languages_get called');\n        $languages = $this->supported_languages();\n        $langs = array();\n        foreach($languages as $lang => $version) {\n            $langs[] = array($lang, $version);\n        }\n        $this->response($langs, 200);\n    }\n\n    // **********************\n    // Support functions\n    // **********************\n    private function is_valid_filespec($file) {\n        return (count($file) == 2 || count($file) == 3) &&\n             is_string($file[0]) &&\n             is_string($file[1]) &&\n             strlen($file[0]) >= MIN_FILE_IDENTIFIER_SIZE &&\n             ctype_alnum($file[0]) &&\n             strlen($file[1]) > 0 &&\n             ctype_alnum(str_replace(array('-', '_', '.'), '', $file[1]));\n    }\n\n\n    // Return an associative array mapping language name to language version\n    // string for all supported languages (and only supported languages).\n    private function supported_languages() {\n        if (file_exists(LANGUAGE_CACHE_FILE)) {\n            $langsJson = @file_get_contents(LANGUAGE_CACHE_FILE);\n            $langs = json_decode($langsJson, true);\n\n            // Security check, since this file is stored in /tmp where anyone could write it.\n            foreach ($langs as $lang => $version) {\n                if (!preg_match('/[a-z0-9]+/', $lang)) {\n                    $langs = null; // Looks like the file has been tampered with, re-compute.\n                    break;\n                }\n                if (!is_readable($this->get_path_for_language_task($lang))) {\n                    $langs = null; // Looks like the file has been tampered with, re-compute.\n                    break;\n                }\n            }\n        }\n        if (empty($langs) || (is_array($langs) && isset($langs[0]))) {\n            $this->log('debug', 'Missing or corrupt languages cache file ... rebuilding it.');\n            $langs = array();\n            $library_files = scandir('application/libraries');\n            foreach ($library_files as $file) {\n                $end = '_task.php';\n                $pos = strpos($file, $end);\n                if ($pos == strlen($file) - strlen($end)) {\n                    $lang = substr($file, 0, $pos);\n                    require_once($this->get_path_for_language_task($lang));\n                    $class = $lang . '_Task';\n                    $version = $class::getVersion();\n                    if ($version) {\n                        $langs[$lang] = $version;\n                    }\n                }\n            }\n\n            $langsJson = json_encode($langs);\n            file_put_contents(LANGUAGE_CACHE_FILE, $langsJson);\n        }\n        return $langs;\n    }\n\n    /**\n     * Get the path to the file that defines the language task for a given language.\n     *\n     * @param $lang the language of interest, e.g. cpp.\n     * @return string the corresponding code path.\n     */\n    private function get_path_for_language_task($lang) {\n        return 'application/libraries/' . $lang . '_task.php';\n    }\n}\n"], "fixing_code": ["# JOBE\n\nVersion: 1.6.5, 31 January 2021\n\n\nAuthor: Richard Lobb, University of Canterbury, New Zealand\n\nContributors: Tim Hunt, Fedor Lyanguzov, Kai-Cheung Leung\n\n## Introduction\n\nJobe (short for Job Engine) is a server that supports running of small\ncompile-and-run jobs in a variety of programming languages. It was\ndeveloped as a remote sandbox for use by\n[CodeRunner](http://github.com/trampgeek/coderunner),\na Moodle question-type plugin that asks students to write code to some\nrelatively simple specification. However, Jobe servers could be useful in\na variety of other contexts, particularly in education.\n\nA job specifies a programming language, the source code, the standard input\nto the run and an optional list of additional files. Jobe compiles the\nsource code (if compilation is appropriate in the specified language) and\nruns it with the given input data. It returns a run_result object containing\nvarious status information plus the output and error output from the run.\n\nThe interface is via a RESTful API, that is documented [here](./restapi.pdf).\n\nThe languages C, C++, Python3, Python2,\nOctave, Java, Pascal and PHP are all built-in. Other languages can be added\nfairly easily although if using Jobe from CodeRunner it is usually even\neasier to write a Python-based question type that scripts the execution of\nthe required language. See the\n[CodeRunner documentation](http://coderunner.org.nz/mod/book/view.php?id=193&chapterid=749)\nfor an example.\n\nThe Computer Science quiz server at the University of Canterbury switched to\nexclusive use of the Jobe sandbox in early July 2014. Since then\nit has run many hundreds of thousands of Python3, C, Java and Octave jobs unattended\nwith only a few minor bug fixes and security refinements.\n\n## Implementation status\n\nThe current version of Jobe (Version 1.6, January 2019) implements\na subset of the originally documented API, sufficient for use by CodeRunner.\nIt has been used for many years at the University of Canterbury for several\nyears, running many millions of submissions. Jobe is also used by over 600 other\nCodeRunner sites around the world. It can be considered stable and secure,\nthough it should be run only on a separate appropriately-firewalled server.\n\nWith reference to the original API spec, onnly immediate-mode runs are\nsupported, with run results being returned with the\nresponse to the POST of the run requests. Run results are not retained by\nthe server (unless *run\\_spec.debug* is true; see the API), so\n*get\\_run\\_status* always returns 404 not found.\n\nFile PUTs are supported but not POSTs. When used by CodeRunner, file IDs are\nMD5 checksums of the file contents.\n\nSince version 1.6, the Jobe server cleans the file cache whenever available\ndisk space drops below 5% of the disk size. It simply deletes all files that\nhaven't been used\nfor 2 days or more, so the server must have enough free disk space\nto stay below 95% full for at least two whole days of running. For CodeRunner\nclients this should not be a problem unless question authors enable large\nclasses of students to attach large files to their submissions. Support files\nattached by question authors are unlikely to be a problem; a Jobe server\nat the University of Canterbury\nserving a large Moodle client with many thousands of questions accumulated only\n200 MB of support files over several years.\n\nFor sandboxing, Jobe uses the [domjudge](http://domjudge.org)\n*runguard* program to run student jobs with restrictions on resource\nallocation (memory, processes, cpu time) as a low-privileged user.\nHowever it does not restrict any system calls.\n\nPrograms may write binary output but the results are returned to the caller\nJSON-encoded, which requires UTF-8 strings. To avoid crashing the\njson-encoder, the standard output and standard error output from the program\nare checked to see if they're valid utf-8. If so, they're returned unchanged.\nOtherwise, they're taken as 8-bit character streams; characters below '\\x20'\n(the space\ncharacter) and above '\\x7E' are replaced by C-style hexadecimal encodings\n(e.g. '\\x8E') except for newlines which are passed through directly, and\ntabls and returns which are replaced with '\\t' and '\\r' respectively.\n\nIf Jobe is to correctly handle utf-8 output from programs, the Apache LANG\nenvironment variable must be set to a UTF-8 compatible value. See\nthe section *Setting the locale* below.\n\nJobe is implemented using Ellis Lab's [codeigniter](http://codeigniter.com) plus the\n[RESTserver plugin](https://github.com/chriskacerguis/codeigniter-restserver) originally\nwritten by Phil Sturgeon and now maintained by Chris Kacerguis.\n\n## Installation\n\n**WARNING** Jobe is primarily intended for use on a\nserver that is firewalled to allow connections from authorised client\nmachines only. If you install it on a machine without such firewalling,\nand do not control access with API keys (see later),\nanyone will be able to connect to your machine and run their own code\non it! **CAVEAT EMPTOR!**\n\nNOTE: a video walkthrough of the process of setting up a Jobe server\non a DigitalOcean droplet is [here](https://www.youtube.com/watch?v=dGpnQpLnERw).\n\nInstallation on Ubuntu 18.04 systems should be\nstraightforward but installation on other flavours of Linux or on systems\nwith non-standard configurations may require\nLinux administrator skills.\n\nAn alternative approach, and probably the simplest way to get up and running,\nis to use the [JobeInABox](https://hub.docker.com/r/trampgeek/jobeinabox/)\nDocker image, which should be runnable with a single terminal command\non any Linux system that has\ndocker installed. Thanks to David Bowes for the initial work on this.\nPlease be aware that while this Docker image has been around for a couple of years\nand no significant issues have been reported the developer has not himself\nused it in a production environment. Feedback is welcomed. The steps to fire\nup a Jobe Server on Digital Ocean using JobeInAbox are given below in section\n*Setting up a JobeInAbox Digital Ocean server*.\n\nJobe runs only on Linux, which must have the Apache web server\ninstalled and running. PHP must have been compiled with the System V\nSemaphone and shared-memory functions enabled\n(see here)[http://www.php.net/manual/en/sem.setup.php], but that's the norm.\nAccess Control Lists (ACLs) must be enabled; they normally are but if the\n`/home/jobe` directory lands up on a mounted volume, you may need to\nexplicitly enable ACLs in the `mount` command or in `/etc/fstab`.\nThe Python3 and the C development system must also be\ninstalled.\n\n### Installing the necessary dependencies\n\nOn Ubuntu-16.04 or 18.04, the commands to set up all the necessary web tools plus\nall currently-supported languages is the following:\n\n    sudo apt-get install apache2 php libapache2-mod-php php-cli\\\n        php-mbstring nodejs git python3 build-essential default-jdk\\\n        python3-pip fp-compiler acl sudo sqlite3\n\n    sudo apt-get install --no-install-suggests --no-install-recommends  octave\n\nOctave and fp are required only if you need to run Octave or Pascal\nprograms respectively.\n\nIf you wish to use API-authentication, which is generally pointless when setting\nup a private Jobe server, you also need the following:\n\n    sudo apt install mysql-server php-mysql\n\nSimilar commands should work on other Debian-based Linux distributions,\nalthough some differences are inevitable (e.g.: acl is preinstalled in Ubuntu,\nwhereas in debian it must be installed).\n\nA Raspberry Pi user reports that they additionally had to use the command\n\n    apt-get install --fix-missing\n\nwhich may help with broken installs on other systems, too.\n\n### Setting up pylint (if you want it)\n\nFirstly, install pylint for your required version of python (assumed here to\nbe python3) with the command:\n\n    sudo -H python3 -m pip install pylint\n\nYou also need to build the /etc/pylintrc file\nto set the default options with one of the following commands, which must be\nrun as root (don't just try prefixing the command with sudo, as the output redirection\nwill fail).\n\nFirstly try the command:\n\n    pylint --reports=no --score=n --generate-rcfile > /etc/pylintrc\n\nIf that gives you an error \"no such option: --score\" (which happens with\nolder versions of pylint), try instead\n\n    pylint --reports=no --generate-rcfile > /etc/pylintrc\n\n### Installing Jobe\n\nClone the Jobe project in the web root directory WEBROOT\n(usually /var/www/html).\nDo not clone it elsewhere and attempt to add it to web root with\nsymbolic links. That breaks this installer. In what follows, replace\nWEBROOT with either /var/www or /var/www/html as appropriate.\n\nTo clone Jobe:\n\n    cd WEBROOT\n    sudo git clone https://github.com/trampgeek/jobe.git\n\nInstallation is performed by the install script, which must be run as root\nso that it can add the required jobe run users (jobe00, jobe01, etc) and\nset-up a jobe-sudoers file in /etc/sudoers.d that allows the web server\nto execute the runguard program as root and to kill any residual jobe\nprocesses from the run.\n\n    cd WEBROOT/jobe\n    sudo ./install\n\nOn Centos6 systems (and possibly early Centos7 releases) you should also\ncomment out the line\n\n    Defaults requiretty\n\nin /etc/sudoers. This was\n(reported as a bug)[https://bugzilla.redhat.com/show_bug.cgi?id=1196451]\nand was fixed in later RHEL releases.\n\n### Setting the locale\n\nBy default, Apache is configured to use the C locale. This means that programs\ngenerating, say, UTF-8 output will fail with an error\n\n    UnicodeEncodeError: 'ascii' codec can't encode character ...\n\nIf you wish to run UTF-8 code (recommended) you should\nfind the line in the Apache envvars file (on Ubuntu systems this is to be found\nat /etc/apache2/envvars)\n\n    export LANG=C\n\nand change it to either C.UTF-8 (which changes the charset to UTF-8 but leaves\nother locale settings unchanged) or to the required standard locale value, e.g.\n\n    export LANG=en_NZ.UTF-8\n\nMake sure that whatever locale you use is installed on the Jobe server.\n\nThen restart apache with the command\n\n    sudo service apache2 restart\n\nNote:\n\n1. The comment in the Apache envvars file suggesting the use of the default\nlocale probably won't\nwork, as this will also just give you ASCII text.\n\n2. To take advantage of the UTF-8 capabilities in CodeRunner you will need\nto use Version 3.3 or later.\n\n## Setting up a JobeInAbox Digital Ocean server\n\nFor people wanting to get a Jobe server up in hurry, the following is\nprobably the simplest approach. This uses a minimal Digital Ocean virtual machine,\ncosting just $US5.00 per month, to run the Docker *JobeInAbox* image.\nOther cloud servers, such as Amazon ECS, can of course also be used.\n\n 1. Set yourself up with an account on [Digital Ocean](https://cloud.digitalocean.com).\n 2. Create new Droplet: Ubuntu 20.04. x64, minimal config ($5 per month; 1GB CPI, 25GB disk)\n 3. Connect to the server with an SSH client.\n 4. Install docker (see https://phoenixnap.com/kb/how-to-install-docker-on-ubuntu-18-04): \n    sudo apt update; sudo apt install docker.io\n 5. Launch JobeInABox with Docker: sudo docker run -d -p 80:80 --name jobe trampgeek/jobeinabox:latest\n\nAt this point you have a running Jobe server. You can check it's working by browsing to\n\n    http://<hostname>/jobe/index.php/restapi/languages\n\nYou should get presented with a JSON list of installed languages.\n\nAnd you can connect your CodeRunner plugin to it by setting the new JobeServer\nIP number in the Admin panel of the plugin. You're in business!\n\nAll that remains is to firewall your new server so that only your Moodle server\ncan use it, and so it can't itself open outgoing connections. For example:\n\n    sudo apt install ufw\n    sudo ufw default reject outgoing\n    sudo sudo ufw allow in 22/tcp\n    sudo ufw allow in proto tcp to any port 80 from <your moodle server IP>\n    sudo ufw enable\n\n\n## Testing the install\n\nTo test the installation, first try running the tester with the command\n\n    python3 testsubmit.py\n\nThe first time you run this command, the initial step of obtaining all the\ndifferent versions of all language is slow, as it has to test-drive all compilers and\ninterpreters. Be patient. Results are cached in a file\nin /tmp so subsequent runs will be much faster, at least until the next reboot,\nwhen the list is rebuilt.\n\nAll going well, you should then be able to copy the *testsubmit.py* file to\nany client machine that is allowed to access the jobe server, edit the line\n\n    JOBE_SERVER = 'localhost'\n\nto reference the JOBE_SERVER, e.g. by replacing *localhost* with its IP\nnumber, and re-run the tester with the same command from the client machine.\n\n## Using Jobe\n\nUsually Jobe is used as a server for Moodle CodeRunner questions. So once jobe\nhas been installed and tested with `testsubmit.py` it can be used by CodeRunner\nquestions by plugging the Jobe server hostname into the CodeRunner administrator\nsettings, replacing the default value of `jobe2.cosc.canterbury.ac.nz`.\n\nHowever, Jobe can also be used standalone. The `testsubmit.py` program shows\nhow it can be invoked from a Python client. There are also two other simpler\nclients provided in this repository: `simpletest.py` and `minimaltest.py`.\nNote that the POST request\npayload must a JSON object with a *run_spec* attribute as specified in the\ndocument *restapi.pdf*. For example, the following POST data runs the classic\nC \"Hello World\" program:\n\n    {\"run_spec\": {\"language_id\": \"c\", \"sourcefilename\": \"test.c\", \"sourcecode\": \"\\n#include <stdio.h>\\n\\nint main() {\\n    printf(\\\"Hello world\\\\n\\\");\\n}\\n\"}}\n\nThe POST request must have the header\n\n    Content-type: application/json; charset-utf-8\n\nand should be sent to a URL like\n\n    localhost/jobe/index.php/restapi/runs\n\nFor example, the following Linux `curl` command runs the C Hello World program:\n\n    curl -d '{\"run_spec\": {\"language_id\": \"c\", \"sourcefilename\": \"test.c\", \"sourcecode\": \"\\n#include <stdio.h>\\n\\nint main() {\\n    printf(\\\"Hello world\\\\n\\\");\\n}\\n\"}}' -H \"Content-type: application/json; charset-utf-8\"  localhost/jobe/index.php/restapi/runs\n\n## Updating Jobe\n\nIf you wish to update an existing version of Jobe to a new one, first put the\nthe client Moodle server into maintenance mode. Reboot the Jobe server. Then `cd`\ninto the Jobe directory, do a `git pull` to update the code, then run the\ninstaller with the --purge option, i.e.\n\n    sudo ./install --purge\n\nCheck that all is well by testing as in the section \"Testing the install\" above.\nLastly take the Moodle server out of maintenance mode again.\n\n## Debugging\n\nIf you have problems installing Jobe, here are some things to check.\n\nIf the install script fails, check the error message. You should be able\n    to read through the script and figure out what went wrong. Otherwise ...\n\n1. Check the install went OK:\n\n 1. Make sure your webserver has read access to the entire jobe subtree.\n 1. Make sure your webserver has write access to jobe/files\n 1. Make sure there exist users jobe and jobe00 through jobe09.\n 1. Make sure there is a directory /home/jobe/runs owned by jobe and writeable\n    by the webserver. It should not be readable or writeable by all.\n 1. Make sure there is a directory /var/log/jobe.\n\nIf the install appears OK but testsubmit.py fails:\n\n 1. If you get messages \"Bad result object\", something is fundamentally broken.\n    Start by rebooting your server, and make sure Apache is running, e.g.\n    by browsing to http://\\<jobehost\\>.\n1.  Try pointing your browser at http://\\<jobehost\\>/jobe/index.php/restapi/languages\n    This should return a JSON list of languages. If not, you may at least get\n    a readable error message.\n 1. You are running testsubmit.py with Python3, right?\n 1. Check the apache error log.\n 1. Set DEBUGGING = True in testsubmit.py (around line 19). This will result\n    in all jobe runs being saved in /home/jobe/runs. [Normally a run directory\n    is removed after each run completes.]\n 1. If something unexpected happened with the actual run of a program, find\n    the run in /home/jobe/runs and try executing the program manually. [The\n    run directory contains the source file, the bash command used to run it,\n    plus the compile output and (if it ran) the stderr and stdout outputs.\n 1. Check for any error messages in /var/log/jobe/*.\n 1. Turn on debug level of logging in jobe/application/config/config.php by\n    setting the log_threshold to 2 (around line 183). You should now get\n    screeds of log info in the directory /var/log/jobe. Most of this comes\n    from the framework; look for lines beginning *jobe*. These are all issued\n    by restapi.php in application/controllers, which is the top level handler\n    for all http requests.\n 1. If you are getting Overloaded errors, then you can display the in-memory\n    locks on the Jobe users with this PHP one-liner:\n    ```php -r 'print_r(shm_get_var(shm_attach(ftok\n      (\"/var/www/html/jobe/application/libraries/LanguageTask.php\", \"j\")), 1));'\n\nIf you still can't figure it out, email me (Richard Lobb; my gmail name is\ntrampgeek).\n\n## An optional extra installation step\n\n[For paranoid sysadmins only].\n\nSubmitted jobs can generally write files only into the temporary directory\ncreated for their run within the '/home/jobe/runs'\ndirectory. Exceptions to this rule are the /tmp, /var/tmp, /var/crash and\n/run/lock directories all of which\nconventionally can be written into by any Linux process.\n\nThe temporary working directory and any files in the writable directories\nmentioned above are deleted on the termination of the run. However, depending on\nthe size of the various partitions and\nthe allowed maximum run time, it might in principle be\npossible for a rogue process, or a deliberate attacker, to run the system\nout of disk space in a particular partition (probably /tmp, which is usually\nrelatively small),\nbefore the job terminates. That could in turn impact upon other jobs in\nprogress.\n\nThis possibility is considered very remote under normal circumstances. With typical\nrun times of a few seconds, jobs\ntime out long before they can fill up a main partition such as that housing\n/home/jobe. Filling up /tmp is easier but jobs shouldn't generally be using\nthat directory, so a rogue process that fills it up shouldn't affect other users. In\neither case, the space is freed as soon as the job terminates. Certainly this\nis not a problem we have ever observed in\npractice. However, it should be possible to protect against such an outcome by\nsetting disk quotas for the users jobe00, jobe01, ... jobe09 [The number\nof such user accounts is defined by the parameter `jobe_max_users` in\n`application/config/config.php`. The default value is 10.]\nInstructions for installing the quota\nmanagement system and setting quotas are given in various places on the web, e.g.\n[here](https://www.digitalocean.com/community/tutorials/how-to-enable-user-and-group-quotas).\nThe precise details will vary from system to system according to how the disk\npartitions are set up; quotas should be\nset for all jobe users on whatever partitions contain /home/jobe, /tmp, /var/tmp,\n/var/crash and /run/lock.\n\n## Securing the site\n\n### Securing by means of a firewall\n\nBy default, Jobe is expected to run on an Intranet server\nthat is firewalled\nto permit access only from specific authorised hosts. In this mode,\nthe client is assumed to be trusted and does not need to provide any form of\nauthorisation or authentication. It is also important to prevent the jobe\nserver from opening connections to other machines, so that a student\nprogram cannot do nasty things like port-scanning within your Intranet.\n\nUsing ufw (Uncomplicated Firewall) a possible command\nsequence that will restrict outgoing traffic to just a single nominated host\n(\"some useful ip\") on ports 80 and 443, allow ssh access (port 22) from anywhere and web\naccess to jobe (assumed to be on port 80) from just one specified client is the\nfollowing:\n\n    ufw default reject outgoing\n    ufw allow out proto tcp to <some_useful_ip> port 80,443\n    ufw allow in 22/tcp\n    ufw allow in proto tcp to any port 80 from <your_client_ip>\n    ufw enable\n\nIn the above, <your\\_client\\_ip> is the host that is permitted to send jobs\nto Jobe (e.g. a Moodle server with CodeRunner). <some\\_useful\\_ip> is\nany server to which Jobe might need to connect in order to run/grade\nstudent code. In the absence of such a server, that line should be omitted.\n\n### Securing with API keys (rarely useful)\n\nIf you wish Jobe to serve multiple clients and do not wish to open a\nspecific port for each one you will need to configure the firewall to allow\nincoming connections from anywhere but you should then also configure the rest-server\nto require some form of authentication and authorisation. The various\nways of achieving this are discussed in the documentation of the\n[rest-server plugin](https://github.com/chriskacerguis/codeigniter-restserver).\n\nThe simplest authorisation approach is to provide an API key on each request.\nThe client must then provide the key with each request in an X-API-Key header of\nthe form\n\n    X-API-KEY: <key>\n\nTo set up Jobe to run in this way, proceed as follows:\n\n 1. Make sure you installed the additional dependencies for API-key authentication\n    given in the section \"Installing the necessary dependencies\". You need\n    to be running a PHP version prior to PHP 7.2 (like that on Ubuntu 16.04 for\n    example).\n\n 1. Create a database called *jobe* and define a user with full access to it.\n\n 1. Edit *application/config/database.php* to access your mysql server and\n    the jobe database with the user credentials you defined in the previous\n    step.\n\n 1. Edit the file *application/config/rest.php* and set the configuration\n    parameter *rest_enable_keys* to 1.\n\n 1. Set up tables `keys` and `limits` as explained in *rest.php*. Populate\n    the `keys` table with one or more API keys, which must then be used by\n    any requests to the Jobe server.\n\nIf running in API-Key mode, you should still firewall the Jobe server to\nprevent it opening any sockets to other machines.\n\n### Other security mechanisms\n\nIf serving multiple clients, you may wish to restrict the use made of the\nserver by one or more clients. This can be done by\nsetting the *rest_enable_limits* parameter\nin *application/config/rest.php* to non-zero.\nJobe will then limit the number of requests made\nwith any given key to the values set in\n*application/config/per_method_limits.php*.\n\nFor this to work, the *jobe* database must contain an additional table *limits*,\ndefined with an SQL command like\n\n\tCREATE TABLE `limits` (\n\t  `id` int(11) NOT NULL AUTO_INCREMENT,\n\t  `uri` varchar(255) NOT NULL,\n\t  `count` int(10) NOT NULL,\n\t  `hour_started` int(11) NOT NULL,\n\t  `api_key` varchar(40) NOT NULL,\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nYou can turn off limit checking on a key-by-key basis by setting the *ignore_limits*\nto FALSE in the *keys* table.\n\nYou should read the REST-server plugin documentation and the file\n*application/config/rest.php* for other features available.\n\n\n## Run_spec parameters\n\nThe Jobe REST API specification document defines the format of a so-called\n*run_spec*, which is the record/object that is encoded within a POST request\nor a run request to specify the job details. It includes the language_id, the\nsource code, the source file name, any standard input data, a list of required\nfiles and a set of job parameters. The job parameters are not defined by the\nREST API as they are implementation dependent. This section defines the\nformat of the *parameters* field of a *run_spec* in this implementation.\n\nThe allowable attributes of the parameters field, plus their global default values\nin parentheses, are:\n\n 1. disklimit (20): the maximum number of megabytes that can be written to disk file(s)\nbefore the job is aborted\n 1. streamsize (2): the maximum number of megabytes of standard output before the\njob is aborted.\n 1. cputime (5): the maximum number of seconds of CPU time before the job is aborted\n 1. memorylimit (usually 200 but 600 for Python3):\nthe maximum number of megabytes of memory the task can consume. This value is\nused to set the Linux RLIMIT_STACK, RLIMIT_DATA and\nRLIMIT_AS via the *setrlimit* system call. If the value is exceeded the job\nis not aborted but malloc and/or mmap calls will fail to allocate more memory\nwith somewhat unpredictable results, although a segmentation fault is the most\nlikely outcome.\n 1. numprocs (20): the maximum number of processes the task is allowed. If\nthis is exceeded the *fork* system call will fail with, again, somewhat\nunpredictable outcomes.\n 1. compileargs ([]): a list of string option values to pass to the compiler,\nsuch as [\"-Wall\", \"-std=c99\"] for the C compiler. Meaningful only for compiled\nlanguages. These arguments precede the name of the file to be compiled.\n 1. linkargs ([]): a list of string option values to pass to the compiler,\nsuch as [\"-lm\"] for the C compiler. These arguments follow the name of the file\nto be compiled. Meaningful only for some compiled\nlanguages, notably C and C++.\n 1. interpreterargs ([]): a list of string option values to pass to the\nlanguage interpreter or Java VM etc when the program is executed. Meaningful\nonly for languages like Python, PHP and Java where the output from the compiler\nis not pure executable machine code.\n 1. runargs ([]): a list of string option values to pass to the executed\nprogram, e.g. to set *argc* and *argv* for a C program. Not generally useful\nfrom CodeRunner as there is no way to set parameters on a per-test-case basis.\n\nIndividual languages will usually set their own default values for *compileargs*\nand *interpreterargs*.\n\nIf any of the above attributes are defined within the run_spec\n*parameters* field, the latter is used and the defaults are ignored.\n\nThe default values of *compileargs*\nand *interpreterargs* for the currently-implemented languages are as follows.\nAn empty default means the global default is used.\n\n<table>\n<tr>\n   <th>language_id</th><th>language</th><th>compileargs</th><th>interpreterargs</th>\n</tr>\n  <td>c</td><td>C</td><td>[\"-Wall\", \"-Werror\", \"-std=c99\", \"-x c\"]</td><td></td>\n<tr>\n  <td>cpp</td><td>C++</td><td>[\"-Wall\", \"-Werror\"]</td><td></td>\n</tr>\n<tr>\n  <td>python2</td><td>Python2</td><td></td><td>[\"-BESs\"]</td>\n</tr>\n<tr>\n  <td>python3</td><td>Python3</td><td></td><td>[\"-BE\"]</td>\n</tr>\n<tr>\n  <td>java</td><td>Java</td><td></td><td>[\"-Xrs\", \"-Xss8m\", \"-Xmx200m\"]</td>\n</tr>\n<tr>\n  <td>nodejs</td><td>JavaScript (nodejs)</td><td></td><td>[\"--use_strict\"]</td>\n</tr>\n<tr>\n  <td>octave</td><td>Octave (matlab variant)</td><td></td><td>[\"--norc\", \"--no-window-system\", \"--silent\", \"-H\"]</td>\n</tr>\n<tr>\n  <td>php</td><td>PHP</td><td></td><td>[\"--no-php-ini\"]</td>\n</tr>\n<tr>\n  <td>pascal</td><td>Free Pascal</td><td>[\"-vew\", \"-Se\"]</td><td></td>\n</tr>\n\n</table>\n\n## Configuration\n\nThis version of jobe is configured for use by Moodle Coderunner. When using\nJobe from CodeRunner the\nvarious language compile and run options can be changed\nvia the sandbox Parameters field in the question authoring form (using the\nadvanced customisation capabilities) of either the question prototype\nor within a particular question as suggested by the previous\nsection. For example, if the sandbox *Parameters* field is set to\n\n        { \"compileargs\": [\"-Wall\", \"-Werror\", \"-std=c89\"] }\n\nfor a C question, the code will be compiled with all warnings enabled, aborting\nif any warnings are issued and will need to be C89 compliant.\n\nIf you wish to change the existing default options within Jobe, or you wish to\nadd new languages, you must edit the source code as follows.\n\nThe folder *application/libraries* contains all the code that executes\nsubmitted jobs. The file *LanguageTask.php* defines an abstract class\n*Task* that contains default configuration parameters for things like\nmemory limit, maximum cpu run time, maximum disk output, etc. For each\nsupported language, a subclass with a name of the form *&lt;Language&gt;_Task*\nresides in a file named *&lt;language&gt;_task.php*. For example, *c_task.php*\ncontains all the parameters specific to running C tasks, *octave_task.php*\ncontains parameters for running Octave tasks, etc. To add a new language\nto Jobe you just drop in a new *&lt;language&gt;_task.php* file;\nits presence is autodetected\nby the Restapi constructor and the language will be available immediately.\n\nEach subclass of LanguageTask typically defines at least the following three\nmethods:\n1. __construct(). This is the constructor. It should generally call the parent\n   constructor then set any language-specific default compile and/or interpret\n   and/or run options.\n\n1. getVersion(). This returns a string defining what version of the language,\n   compiler etc is supported. It's not actually used by CodeRunner but is\n   available via the rest API.\n\n1. compile(). Calling this method must result in the file named\n   $this->sourceFileName being compiled, with an executable output file\n   being placed in the current working directory. If compilation succeeds\n   the name of the executable\n   must be returned in $this->executableFileName; alternatively\n   $this->cmpinfo should be set to an appropriate error message; any non-empty\n   string is taken as a compile error. Interpreted languages might do nothing\n   or might copy the program.\n\n1. getRunCommand(). This method must return an array of strings that, when\n   joined with a space separator, make a bash command to execute the\n   program resulting from the compile(). Execution parameters\n   like the Java heap size are set in this function. The output from this\n   function is passed to the RunguardSandbox, after addition of standard\n   I/O redirection plus other sandbox parameters (see *getParam* below).\n\nAdditionally the subclass may define:\n\n1. filteredStderr(). This takes $this->stderr and returns a filtered version,\n   which might be necessary in some languages to remove extraneous text\n   or remove special characters like form-feed or tab in order to make the\n   result more appropriate for subsequent use, e.g. for display to students\n   in a CodeRunner result table.\n\n1. filteredStdout(). This performs the same task as filteredStderr() except it\n   filters stdout, available to the function as $this->stdout.\n\n## Change Log\n\n### Version 1.2\n\nFixed bug with Java when correct source file name supplied in the request\n(rename of file to itself was failing). Thanks Paul Denny.\nReplaced uses of Moodle coding_exception with generic exception. Again thanks\nPaul Denny.\n\nFixed bug in C++ task - invalid language type being passed to compiler.\n\nUpdated CodeIgniter Rest Server to latest version.\n\nAdded code to load limit data from a config file \"per\\_method\\_limits.php\" to\nsupport per-API-key limits on the number of calls that can be made to the\nrestapi's POST and PUT entry points per hour. Updated the documentation to\nexplain how to turn on API-key authorisation and per-method limits.\n\n### Version 1.2.2\n\nAdded code to support CORS (Cross Origin Resource Sharing), i.e.,\nin-browser JavaScript requests from arbitrary domains.\n\n### Version 1.2.3\n\nFixed bug in how Java class names (and hence source file\nnames) were inferred from the source code (main classes that implemented an\ninterface or extended a subclass were not handled correctly). Also the filename\nfield in the REST API runspec is now optional; if provided, it is trusted\nand used as-is, but if not supplied or if an empty string is supplied, Jobe\nnow calls a language-specific function to provide a filename from the sourcecode.\n[Usually this is just something generic like prog.cpp, prog.py etc]\n\n### Version 1.2.4\n\nFixed issue with runguard that prevented use of pthreads library in C programs.,\n\n### Version 1.3\n\nPascal support added by Fedor Lyanguzov (thanks Fedor)\n\nGood luck!\n\n### Version 1.3.1\n\nMinor patches to ensure PHP7 compability. Install instruction in readme.md\nstill relate to PHP5, however.\n\n### Version 1.3.2\n\nChange Java config parameters to allow Java 8 to run (more memory and\nmore processes).\n\n### Version 1.3.3\n\nRemove inline declaration of readoptarg in runguard.c (causing compile errors\nwith most recent gcc versions). Documentation tweaks.\n\n### Version 1.3.4\n\nFix serious security flaw in runguard + my use of it.\n\n### Version 1.3.5\n\n1. Fix broken caching of language versions (wasting time on each submission).\n1. Improve identification of language versions; 'Unknown' is now given as the\nlanguage version if a language get-version command runs but produces output\nin an unexpected format. Formerly such languages were deemed invalid.\n1. Change Java task so supplied memlimit is ignored, leaving JVM to manage its\nown memory.\n1. Add 'getLanguages' to simpletest.py and testsubmit.py.\n\n### Version 1.3.5+ 16 June 2017\n\n 1. Improve installer to handle installation on servers with less permissive\n    access rights than Ubuntu 16.04.\n 1. Delete any files created in /tmp, /var/tmp, /run/lock and /var/crash\n    on completion of a run.\n 1. Limit maximum CPU time for any one Jobe to 30 secs (config constant).\n\nThanks Kai-Cheung Leung for the first two of those additions.\n\n### Version 1.3.6 21 June 2017\n\n 1. Minimum PHP version is now required to be 5.5. (This is now checked in the installer.)\n 1. Compilation of the Student's code is now also done in the runguard sandbox.\n    This provides an additional layer of security.\n\nThanks Tim Hunt for most of the work in this addition.\n\n### 1.3.6+\n\n 1. Tune retry count for better performance under overload.\n 1. Documentation updates\n 1. Tweak installer for Centos detection of web server\n\n### 1.4.0\n\n  1. Tweaks to allow full utf-8 output to be returned, provided Apache's LANG\n     variable is set to a UTF-8 compatible value.\n\n### 1.4.1\n\n  1. Merged in switch to pylint3/python3 completely (thanks Garth Williamson)\n\n### 1.4.2\n\n  1. Bug fix: Jobe server overload was being incorrectly reported as a Runguard\n     error (\"No user jobe-1\").\n### 1.4.3\n\n  1. Fix bug in testsubmit.php when used with latest pylint3.\n  1. Document dependency script for Ubuntu 18.04 plus limitations due to missing\n     mcrypt.\n\n### 1.5.0\n\n  1. Move to latest versions of CodeIgniter and RestServer frameworks, primarily\n     to fix bug with PHP versions > 7.1 no longer supporting mcrypt library,\n     but also for improved security and error handling.\n\n### 1.6.0\n\n  1. Change file cache directory from /var/www/html/jobe/files to /home/jobe/files\n  1. Change file cache to use a 3 level hierarchy, using the first 4 chars of\n     the MD5 file-id (2 pairs of 2) for the directory names to improve lookup\n     performance when there are many files.\n  1. Implement a simple cache clean mechanism that deletes all files that\n     haven't been used for 2 or more days whenever less than 5% of the disk\n     space is free.\n  1. Document in restapi that use of *check_file* to confirm existence of a\n     required file before a run is unsafe, as the file might be removed by\n     the cache cleaner between the two runs.\n\n### 1.6.0+ (5 December 2019)\n\n  1. Correct bad JSON in documentation (was using single quoted strings).\n\n### 1.6.1 (14 April 2020)\n\n  1. Tweak handling of timeouts to kill jobs after a wall-clock time in excess\n     of twice the given max_cpu_time\n  1. Document issue with handling of resource limits. Jobe is inappropriately\n     applying the compile resource limits even for non-compile tasks.\n     However, fixing this might break existing questions and it's not a\n     serious problem.\n  1. Correct bad JSON in documentation that used single-quoted strings.\n  1. Add /var/lock to the list of directories to be cleaned on task exit.\n     While it's usually a symbolic link to /run/lock, apparently that's not\n     always the case.\n  1. Accept Java programs that use \"static public\" in main() declaration rather\n     than the more usual \"public static\".\n  1. Fix deprecation warning with PHP 7.4 (and possibly earlier) resulting from\n     loading the JSON-encoded language cache file into an object rather than an\n     associative array.\n\n### 1.6.2 (16 May 2020)\n\n  1. Increase memory limit for Python3 to 600 MB. Document.\n\n### 1.6.2+ (24 May 2020)\n\n  1. Change install instructions to install non-GUI Octave.\n\n### 1.6.3 (20 November 2020)\n\n  1. Prevent privilege escalation attacks via cputime parameter, [issue #39](https://github.com/trampgeek/jobe/issues/39).\n  1. Change the invalid nodejs program in testsubmit.py to be even more invalid,\n     so it fails to run with all versions of nodejs.\n\n### 1.6.4 (22 January 2021)\n\n  1. Workaround for bug in py_compile (https://bugs.python.org/issue38731)\nthat results in multiple error messages when a python syntax check fails.\n\n### 1.6.5 (31 January 2021)\n\n  1. Prevent privilege escalation attacks via sourcefilename [issue #46](https://github.com/trampgeek/jobe/issues/46).\n  1. Add a load tester (ad hoc, experimental), loadtester.py.\n", "<?php\n\n/*\n * Copyright (C) 2014 Richard Lobb\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nif ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\nrequire_once('application/libraries/REST_Controller.php');\nrequire_once('application/libraries/LanguageTask.php');\nrequire_once('application/libraries/JobException.php');\nrequire_once('application/libraries/resultobject.php');\nrequire_once('application/libraries/filecache.php');\n\ndefine('MAX_READ', 4096);  // Max bytes to read in popen\ndefine('MIN_FILE_IDENTIFIER_SIZE', 8);\ndefine('LANGUAGE_CACHE_FILE', '/tmp/jobe_language_cache_file');\n\n\nclass Restapi extends REST_Controller {\n\n    protected $languages = array();\n\n    // Constructor loads the available languages from the libraries directory.\n    // [But to handle CORS (Cross Origin Resource Sharing) it first issues\n    // the access-control headers, and then quits if it's an OPTIONS request,\n    // which is the \"pre-flight\" browser generated request to check access.]\n    // See http://stackoverflow.com/questions/15602099/http-options-error-in-phil-sturgeons-codeigniter-restserver-and-backbone-js\n    public function __construct()\n    {\n        header('Access-Control-Allow-Origin: *');\n        header(\"Access-Control-Allow-Headers: X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Request-Method\");\n        header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, HEAD, DELETE\");\n        $method = $_SERVER['REQUEST_METHOD'];\n        if($method == \"OPTIONS\") {\n            die();\n        }\n        parent::__construct();\n\n        $this->languages = $this->supported_languages();\n\n        if ($this->config->item('rest_enable_limits')) {\n            $this->load->config('per_method_limits');\n            $limits = $this->config->item('per_method_limits');\n            foreach ($limits as $method=>$limit) {\n                $this->methods[$method]['limit'] = $limit;\n            }\n        }\n    }\n\n\n    protected function log($type, $message) {\n        // Call log_message with the same parameters, but prefix the message\n        // by *jobe* for easy identification.\n        log_message($type, '*jobe* ' . $message);\n    }\n\n\n    protected function error($message, $httpCode=400) {\n        // Generate the http response containing the given message with the given\n        // HTTP response code. Log the error first.\n        $this->log('error', $message);\n        $this->response($message, $httpCode);\n    }\n\n\n    public function index_get() {\n        $this->response('Please access this API via the runs, runresults, files or languages collections', 404);\n    }\n\n    // ****************************\n    //         FILES\n    // ****************************\n\n    // Put (i.e. create or update) a file\n    public function files_put($fileId=FALSE) {\n        if ($fileId === FALSE) {\n            $this->error('No file id in URL');\n        }\n        $contentsb64 = $this->put('file_contents', FALSE);\n        if ($contentsb64 === FALSE) {\n            $this->error('put: missing file_contents parameter');\n        }\n\n        $contents = base64_decode($contentsb64, TRUE);\n        if ($contents === FALSE) {\n            $this->error(\"put: contents of file $fileId are not valid base-64\");\n        }\n\n        if (FileCache::file_put_contents($fileId, $contents) === FALSE) {\n            $this->error(\"put: failed to write file $fileId to cache\", 500);\n        }\n        $len = strlen($contents);\n        $this->log('debug', \"Put file $fileId, size $len\");\n        $this->response(NULL, 204);\n    }\n\n\n    // Check file\n    public function files_head($fileId) {\n        if (!$fileId) {\n            $this->error('head: missing file ID parameter in URL');\n        } else if (FileCache::file_exists($fileId)) {\n            $this->log('debug', \"head: file $fileId exists\");\n            $this->response(NULL, 204);\n        } else {\n            $this->log('debug', \"head: file $fileId not found\");\n            $this->response(NULL, 404);\n        }\n    }\n\n    // Post file\n    public function files_post() {\n        $this->error('file_post: not implemented on this server', 403);\n    }\n\n    // ****************************\n    //        RUNS\n    // ****************************\n\n    public function runs_get() {\n        $id = $this->get('runId');\n        $this->error('runs_get: no such run or run result discarded', 200);\n    }\n\n\n    public function runs_post() {\n        global $CI;\n\n        // Note to help understand this method: the ->error and ->response methods\n        // to not return. Then send the response then call exit().\n\n        // Check this looks like a valid request.\n        if (!$run = $this->post('run_spec', false)) {\n            $this->error('runs_post: missing or invalid run_spec parameter', 400);\n        }\n        if (!is_array($run) || !isset($run['sourcecode']) ||\n                !isset($run['language_id']) ) {\n            $this->error('runs_post: invalid run specification', 400);\n        }\n        if (isset($run->sourcefilename) && !self::is_valid_source_filename($run->sourcefilename)) {\n            $this->error('runs_post: invalid sourcefilename');\n        }\n\n        // REST_Controller has called to_array on the JSON decoded\n        // object, so we must first turn it back into an object.\n        $run = (object) $run;\n\n        // If there are files, check them.\n        if (isset($run->file_list)) {\n            $files = $run->file_list;\n            foreach ($files as $file) {\n                if (!$this->is_valid_filespec($file)) {\n                    $this->error(\"runs_post: invalid file specifier: \" . print_r($file, true), 400);\n                }\n            }\n        } else {\n            $files = array();\n        }\n\n        // Get the the request languages and check it.\n        $language = $run->language_id;\n        if (!array_key_exists($language, $this->languages)) {\n            $this->response(\"Language '$language' is not known\", 400);\n        }\n        $reqdTaskClass = ucwords($language) . '_Task';\n        if (!isset($run->sourcefilename) || $run->sourcefilename == 'prog.java') {\n            // If no sourcefilename is given or if it's 'prog.java',\n            // ask the language task to provide a source filename.\n            // The prog.java is a special case (i.e. hack) to support legacy\n            // CodeRunner versions that left it to Jobe to come up with\n            // a name (and in Java it matters).\n            $run->sourcefilename = '';\n        }\n        require_once($this->get_path_for_language_task($language));\n\n        // Get any input.\n        $input = isset($run->input) ? $run->input : '';\n\n        // Get the parameters, and validate.\n        $params = isset($run->parameters) ? $run->parameters : array();\n        if (isset($params['cputime']) &&\n                intval($params['cputime']) > intval($CI->config->item('cputime_upper_limit_secs'))\n        ) {\n            $this->response(\"cputime exceeds maximum allowed on this Jobe server\", 400);\n        }\n\n        // Debugging is set either via a config parameter or, for a\n        // specific run, by the run's debug attribute.\n        // When debugging, the task run directory and its contents\n        // are not deleted after the run.\n        $debug = $this->config->item('debugging') ||\n                (isset($run->debug) && $run->debug);\n\n        // Create the task.\n        $this->task = new $reqdTaskClass($run->sourcefilename, $input, $params);\n\n        // The nested tries here are a bit ugly, but the point is that we want to\n        // to clean up the task with close() before handling the exception.\n        try {\n            try {\n                $this->task->prepare_execution_environment($run->sourcecode);\n\n                $this->task->load_files($files);\n\n                $this->log('debug', \"runs_post: compiling job {$this->task->id}\");\n                $this->task->compile();\n\n                if (empty($this->task->cmpinfo)) {\n                    $this->log('debug', \"runs_post: executing job {$this->task->id}\");\n                    $this->task->execute();\n                }\n\n            } finally {\n                // Delete task run directory unless it's a debug run\n                $this->task->close(!$debug);\n            }\n\n            // Success!\n            $this->log('debug', \"runs_post: returning 200 OK for task {$this->task->id}\");\n            $this->response($this->task->resultObject(), 200);\n\n        // Report any errors.\n        } catch (JobException $e) {\n            $this->log('debug', 'runs_post: ' . $e->getLogMessage());\n            $this->response($e->getMessage(), $e->getHttpStatusCode());\n\n        } catch (OverloadException $e) {\n            $this->log('debug', 'runs_post: overload exception occurred');\n            $resultobject = new ResultObject(0, Task::RESULT_SERVER_OVERLOAD);\n            $this->response($resultobject, 200);\n\n        } catch (Exception $e) {\n            $this->response('Server exception (' . $e->getMessage() . ')', 500);\n        }\n    }\n\n    // **********************\n    //      RUN_RESULTS\n    // **********************\n    public function runresults_get()\n    {\n        $this->error('runresults_get: unimplemented, as all submissions run immediately.', 404);\n    }\n\n\n    // **********************\n    //      LANGUAGES\n    // **********************\n    public function languages_get()\n    {\n        $this->log('debug', 'languages_get called');\n        $languages = $this->supported_languages();\n        $langs = array();\n        foreach($languages as $lang => $version) {\n            $langs[] = array($lang, $version);\n        }\n        $this->response($langs, 200);\n    }\n\n    // **********************\n    // Support functions\n    // **********************\n    \n    // Return true unless the given filename looks dangerous, e.g. has '/' or '..'\n    // substrings. Uses code from https://stackoverflow.com/questions/2021624/string-sanitizer-for-filename\n    private function is_valid_source_filename($filename) {\n        $sanitised = preg_replace(\n        '~\n        [<>:\"/\\\\|?*]|            # file system reserved https://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words\n        [\\x00-\\x1F]|             # control characters http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx\n        [\\x7F\\xA0\\xAD]|          # non-printing characters DEL, NO-BREAK SPACE, SOFT HYPHEN\n        [#\\[\\]@!$&\\'()+,;=]|     # URI reserved https://tools.ietf.org/html/rfc3986#section-2.2\n        [{}^\\~`]                 # URL unsafe characters https://www.ietf.org/rfc/rfc1738.txt\n        ~x',\n        '-', $filename);\n        // Avoid \".\", \"..\" or \".hiddenFiles\"\n        $sanitised = ltrim($sanitised, '.-');\n        return $sanitised === $filename;\n    }\n    \n    private function is_valid_filespec($file) {\n        return (count($file) == 2 || count($file) == 3) &&\n             is_string($file[0]) &&\n             is_string($file[1]) &&\n             strlen($file[0]) >= MIN_FILE_IDENTIFIER_SIZE &&\n             ctype_alnum($file[0]) &&\n             strlen($file[1]) > 0 &&\n             ctype_alnum(str_replace(array('-', '_', '.'), '', $file[1]));\n    }\n\n\n    // Return an associative array mapping language name to language version\n    // string for all supported languages (and only supported languages).\n    private function supported_languages() {\n        if (file_exists(LANGUAGE_CACHE_FILE)) {\n            $langsJson = @file_get_contents(LANGUAGE_CACHE_FILE);\n            $langs = json_decode($langsJson, true);\n\n            // Security check, since this file is stored in /tmp where anyone could write it.\n            foreach ($langs as $lang => $version) {\n                if (!preg_match('/[a-z0-9]+/', $lang)) {\n                    $langs = null; // Looks like the file has been tampered with, re-compute.\n                    break;\n                }\n                if (!is_readable($this->get_path_for_language_task($lang))) {\n                    $langs = null; // Looks like the file has been tampered with, re-compute.\n                    break;\n                }\n            }\n        }\n        if (empty($langs) || (is_array($langs) && isset($langs[0]))) {\n            $this->log('debug', 'Missing or corrupt languages cache file ... rebuilding it.');\n            $langs = array();\n            $library_files = scandir('application/libraries');\n            foreach ($library_files as $file) {\n                $end = '_task.php';\n                $pos = strpos($file, $end);\n                if ($pos == strlen($file) - strlen($end)) {\n                    $lang = substr($file, 0, $pos);\n                    require_once($this->get_path_for_language_task($lang));\n                    $class = $lang . '_Task';\n                    $version = $class::getVersion();\n                    if ($version) {\n                        $langs[$lang] = $version;\n                    }\n                }\n            }\n\n            $langsJson = json_encode($langs);\n            file_put_contents(LANGUAGE_CACHE_FILE, $langsJson);\n        }\n        return $langs;\n    }\n\n    /**\n     * Get the path to the file that defines the language task for a given language.\n     *\n     * @param $lang the language of interest, e.g. cpp.\n     * @return string the corresponding code path.\n     */\n    private function get_path_for_language_task($lang) {\n        return 'application/libraries/' . $lang . '_task.php';\n    }\n}\n"], "filenames": ["README.md", "application/controllers/Restapi.php"], "buggy_code_start_loc": [3, 152], "buggy_code_end_loc": [848, 275], "fixing_code_start_loc": [3, 152], "fixing_code_end_loc": [854, 296], "type": "NVD-CWE-noinfo", "message": "A vulnerability has been found in trampgeek jobe up to 1.6.4 and classified as problematic. This vulnerability affects the function runs_post of the file application/controllers/Restapi.php. The manipulation of the argument sourcefilename leads to an unknown weakness. Upgrading to version 1.6.5 is able to address this issue. The name of the patch is 694da5013dbecc8d30dd83e2a83e78faadf93771. It is recommended to upgrade the affected component. VDB-217174 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2021-4297", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-01T19:15:10.453", "lastModified": "2023-01-09T18:21:08.977", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in trampgeek jobe up to 1.6.4 and classified as problematic. This vulnerability affects the function runs_post of the file application/controllers/Restapi.php. The manipulation of the argument sourcefilename leads to an unknown weakness. Upgrading to version 1.6.5 is able to address this issue. The name of the patch is 694da5013dbecc8d30dd83e2a83e78faadf93771. It is recommended to upgrade the affected component. VDB-217174 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 4.4, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jobe_project:jobe:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.6.5", "matchCriteriaId": "6C871E58-88D5-47E3-B0D2-8822108CAE8F"}]}]}], "references": [{"url": "https://github.com/trampgeek/jobe/commit/694da5013dbecc8d30dd83e2a83e78faadf93771", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/trampgeek/jobe/issues/46", "source": "cna@vuldb.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217174", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217174", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/trampgeek/jobe/commit/694da5013dbecc8d30dd83e2a83e78faadf93771"}}