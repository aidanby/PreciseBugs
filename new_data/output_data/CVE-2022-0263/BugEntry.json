{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Cache;\nuse Pimcore\\Cache\\Core\\CoreCacheHandler;\nuse Pimcore\\Cache\\Symfony\\CacheClearer;\nuse Pimcore\\Config;\nuse Pimcore\\Event\\SystemEvents;\nuse Pimcore\\File;\nuse Pimcore\\Helper\\StopMessengerWorkersTrait;\nuse Pimcore\\Localization\\LocaleServiceInterface;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Exception\\ConfigWriteException;\nuse Pimcore\\Model\\Glossary;\nuse Pimcore\\Model\\Metadata;\nuse Pimcore\\Model\\Property;\nuse Pimcore\\Model\\Staticroute;\nuse Pimcore\\Model\\Tool\\SettingsStore;\nuse Pimcore\\Model\\WebsiteSetting;\nuse Pimcore\\Tool;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\TerminateEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Yaml\\Yaml;\n\n/**\n * @Route(\"/settings\")\n *\n * @internal\n */\nclass SettingsController extends AdminController\n{\n    use StopMessengerWorkersTrait;\n\n    private const CUSTOM_LOGO_PATH = 'custom-logo.image';\n\n    /**\n     * @Route(\"/display-custom-logo\", name=\"pimcore_settings_display_custom_logo\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function displayCustomLogoAction(Request $request)\n    {\n        $mime = 'image/svg+xml';\n        if ($request->get('white')) {\n            $logo = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img/logo-claim-white.svg';\n        } else {\n            $logo = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img/logo-claim-gray.svg';\n        }\n\n        $stream = fopen($logo, 'rb');\n\n        $storage = Tool\\Storage::get('admin');\n        if ($storage->fileExists(self::CUSTOM_LOGO_PATH)) {\n            try {\n                $mime = $storage->mimeType(self::CUSTOM_LOGO_PATH);\n                $stream = $storage->readStream(self::CUSTOM_LOGO_PATH);\n            } catch (\\Exception $e) {\n                // do nothing\n            }\n        }\n\n        return new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, ['Content-Type' => $mime]);\n    }\n\n    /**\n     * @Route(\"/upload-custom-logo\", name=\"pimcore_admin_settings_uploadcustomlogo\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function uploadCustomLogoAction(Request $request)\n    {\n        $fileExt = File::getFileExtension($_FILES['Filedata']['name']);\n        if (!in_array($fileExt, ['svg', 'png', 'jpg'])) {\n            throw new \\Exception('Unsupported file format');\n        }\n\n        $storage = Tool\\Storage::get('admin');\n        $storage->writeStream(self::CUSTOM_LOGO_PATH, fopen($_FILES['Filedata']['tmp_name'], 'rb'));\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/delete-custom-logo\", name=\"pimcore_admin_settings_deletecustomlogo\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCustomLogoAction(Request $request)\n    {\n        if (Tool\\Storage::get('admin')->fileExists(self::CUSTOM_LOGO_PATH)) {\n            Tool\\Storage::get('admin')->delete(self::CUSTOM_LOGO_PATH);\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * Used by the predefined metadata grid\n     *\n     * @Route(\"/predefined-metadata\", name=\"pimcore_admin_settings_metadata\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function metadataAction(Request $request)\n    {\n        $this->checkPermission('asset_metadata');\n\n        if ($request->get('data')) {\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $metadata = Metadata\\Predefined::getById($id);\n                if (!$metadata->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $metadata->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save type\n                $metadata = Metadata\\Predefined::getById($data['id']);\n                if (!$metadata->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $metadata->setValues($data);\n\n                $existingItem = Metadata\\Predefined\\Listing::getByKeyAndLanguage($metadata->getName(), $metadata->getLanguage(), $metadata->getTargetSubtype());\n                if ($existingItem && $existingItem->getId() != $metadata->getId()) {\n                    return $this->adminJson(['message' => 'rule_violation', 'success' => false]);\n                }\n\n                $metadata->minimize();\n                $metadata->save();\n                $metadata->expand();\n\n                $responseData = $metadata->getObjectVars();\n                $responseData['writeable'] = $metadata->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Metadata\\Predefined())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save type\n                $metadata = Metadata\\Predefined::create();\n\n                $metadata->setValues($data);\n\n                $existingItem = Metadata\\Predefined\\Listing::getByKeyAndLanguage($metadata->getName(), $metadata->getLanguage(), $metadata->getTargetSubtype());\n                if ($existingItem) {\n                    return $this->adminJson(['message' => 'rule_violation', 'success' => false]);\n                }\n\n                $metadata->save();\n\n                $responseData = $metadata->getObjectVars();\n                $responseData['writeable'] = $metadata->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of types\n            $list = new Metadata\\Predefined\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Metadata\\Predefined $predefined) use ($filter) {\n                    foreach ($predefined->getObjectVars() as $value) {\n                        if (stripos($value, $filter) !== false) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $properties = [];\n            foreach ($list->getDefinitions() as $metadata) {\n                $data = $metadata->getObjectVars();\n                $data['writeable'] = $metadata->isWriteable();\n                $properties[] = $data;\n            }\n\n            return $this->adminJson(['data' => $properties, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-predefined-metadata\", name=\"pimcore_admin_settings_getpredefinedmetadata\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPredefinedMetadataAction(Request $request)\n    {\n        $type = $request->get('type');\n        $subType = $request->get('subType');\n        $group = $request->get('group');\n        $list = Metadata\\Predefined\\Listing::getByTargetType($type, [$subType]);\n        $result = [];\n        foreach ($list as $item) {\n            $itemGroup = $item->getGroup() ?? '';\n            if ($group === 'default' || $group === $itemGroup) {\n                $item->expand();\n                $data = $item->getObjectVars();\n                $data['writeable'] = $item->isWriteable();\n                $result[] = $data;\n            }\n        }\n\n        return $this->adminJson(['data' => $result, 'success' => true]);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_settings_properties\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('predefined_properties');\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $property = Property\\Predefined::getById($id);\n                if (!$property->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $property->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save type\n                $property = Property\\Predefined::getById($data['id']);\n                if (!$property->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                if (is_array($data['ctype'])) {\n                    $data['ctype'] = implode(',', $data['ctype']);\n                }\n                $property->setValues($data);\n\n                $property->save();\n\n                $responseData = $property->getObjectVars();\n                $responseData['writeable'] = $property->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Property\\Predefined())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save type\n                $property = Property\\Predefined::create();\n                $property->setValues($data);\n\n                $property->save();\n\n                $responseData = $property->getObjectVars();\n                $responseData['writeable'] = $property->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of types\n            $list = new Property\\Predefined\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Property\\Predefined $predefined) use ($filter) {\n                    foreach ($predefined->getObjectVars() as $value) {\n                        if ($value) {\n                            $cellValues = is_array($value) ? $value : [$value];\n\n                            foreach ($cellValues as $cellValue) {\n                                if (stripos($cellValue, $filter) !== false) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $properties = [];\n            foreach ($list->getProperties() as $property) {\n                $data = $property->getObjectVars();\n                $data['writeable'] = $property->isWriteable();\n                $properties[] = $data;\n            }\n\n            return $this->adminJson(['data' => $properties, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-system\", name=\"pimcore_admin_settings_getsystem\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param Config $config\n     *\n     * @return JsonResponse\n     */\n    public function getSystemAction(Request $request, Config $config)\n    {\n        $this->checkPermission('system_settings');\n\n        $valueArray = [\n            'general' => $config['general'],\n            'documents' => $config['documents'],\n            'assets' => $config['assets'],\n            'objects' => $config['objects'],\n            'branding' => $config['branding'],\n            'email' => $config['email'],\n        ];\n\n        $locales = Tool::getSupportedLocales();\n        $languageOptions = [];\n        $validLanguages = [];\n        foreach ($locales as $short => $translation) {\n            if (!empty($short)) {\n                $languageOptions[] = [\n                    'language' => $short,\n                    'display' => $translation . \" ($short)\",\n                ];\n                $validLanguages[] = $short;\n            }\n        }\n\n        $valueArray['general']['valid_language'] = explode(',', $valueArray['general']['valid_languages']);\n\n        //for \"wrong\" legacy values\n        if (is_array($valueArray['general']['valid_language'])) {\n            foreach ($valueArray['general']['valid_language'] as $existingValue) {\n                if (!in_array($existingValue, $validLanguages)) {\n                    $languageOptions[] = [\n                        'language' => $existingValue,\n                        'display' => $existingValue,\n                    ];\n                }\n            }\n        }\n\n        $response = [\n            'values' => $valueArray,\n            'config' => [\n                'languages' => $languageOptions,\n            ],\n        ];\n\n        return $this->adminJson($response);\n    }\n\n    /**\n     * @Route(\"/set-system\", name=\"pimcore_admin_settings_setsystem\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     * @param LocaleServiceInterface $localeService\n     *\n     * @return JsonResponse\n     */\n    public function setSystemAction(\n        LocaleServiceInterface $localeService,\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CoreCacheHandler $cache,\n        Filesystem $filesystem,\n        CacheClearer $symfonyCacheClearer\n    ) {\n        $this->checkPermission('system_settings');\n\n        $values = $this->decodeJson($request->get('data'));\n\n        $existingValues = [];\n\n        try {\n            $file = Config::locateConfigFile('system.yml');\n            $existingValues = Config::getConfigInstance($file, true);\n        } catch (\\Exception $e) {\n            // nothing to do\n        }\n\n        // localized error pages\n        $localizedErrorPages = [];\n\n        // fallback languages\n        $fallbackLanguages = [];\n        $existingValues['pimcore']['general']['fallback_languages'] = [];\n        $languages = explode(',', $values['general.validLanguages']);\n        $filteredLanguages = [];\n\n        foreach ($languages as $language) {\n            if (isset($values['general.fallbackLanguages.' . $language])) {\n                $fallbackLanguages[$language] = str_replace(' ', '', $values['general.fallbackLanguages.' . $language]);\n            }\n\n            // localized error pages\n            if (isset($values['documents.error_pages.localized.' . $language])) {\n                $localizedErrorPages[$language] = $values['documents.error_pages.localized.' . $language];\n            }\n\n            if ($localeService->isLocale($language)) {\n                $filteredLanguages[] = $language;\n            }\n        }\n\n        // check if there's a fallback language endless loop\n        foreach ($fallbackLanguages as $sourceLang => $targetLang) {\n            $this->checkFallbackLanguageLoop($sourceLang, $fallbackLanguages);\n        }\n\n        $settings['pimcore'] = [\n            'general' => [\n                'domain' => $values['general.domain'],\n                'redirect_to_maindomain' => $values['general.redirect_to_maindomain'],\n                'language' => $values['general.language'],\n                'valid_languages' => implode(',', $filteredLanguages),\n                'fallback_languages' => $fallbackLanguages,\n                'default_language' => $values['general.defaultLanguage'],\n                'debug_admin_translations' => $values['general.debug_admin_translations'],\n            ],\n            'documents' => [\n                'versions' => [\n                    'days' => $values['documents.versions.days'] ?? null,\n                    'steps' => $values['documents.versions.steps'] ?? null,\n                ],\n                'error_pages' => [\n                    'default' => $values['documents.error_pages.default'],\n                    'localized' => $localizedErrorPages,\n                ],\n            ],\n            'objects' => [\n                'versions' => [\n                    'days' => $values['objects.versions.days'] ?? null,\n                    'steps' => $values['objects.versions.steps'] ?? null,\n                ],\n            ],\n            'assets' => [\n                'versions' => [\n                    'days' => $values['assets.versions.days'] ?? null,\n                    'steps' => $values['assets.versions.steps'] ?? null,\n                ],\n                'hide_edit_image' => $values['assets.hide_edit_image'],\n                'disable_tree_preview' => $values['assets.disable_tree_preview'],\n            ],\n        ];\n\n        //branding\n        $settings['pimcore_admin'] = [\n            'branding' =>\n                [\n                    'login_screen_invert_colors' => $values['branding.login_screen_invert_colors'],\n                    'color_login_screen' => $values['branding.color_login_screen'],\n                    'color_admin_interface' => $values['branding.color_admin_interface'],\n                    'login_screen_custom_image' => $values['branding.login_screen_custom_image'],\n                ],\n        ];\n\n        if (array_key_exists('email.debug.emailAddresses', $values) && $values['email.debug.emailAddresses']) {\n            $settings['pimcore']['email']['debug']['email_addresses'] = $values['email.debug.emailAddresses'];\n        }\n\n        $settingsYml = Yaml::dump($settings, 5);\n        $configFile = Config::locateConfigFile('system.yml');\n        File::put($configFile, $settingsYml);\n\n        // clear all caches\n        $this->clearSymfonyCache($request, $kernel, $eventDispatcher, $symfonyCacheClearer);\n        $this->stopMessengerWorkers();\n\n        $eventDispatcher->addListener(KernelEvents::TERMINATE, function (TerminateEvent $event) use (\n            $cache, $eventDispatcher, $filesystem\n        ) {\n            // we need to clear the cache with a delay, because the cache is used by messenger:stop-workers\n            // to send the stop signal to all worker processes\n            sleep(2);\n            $this->clearPimcoreCache($cache, $eventDispatcher, $filesystem);\n        });\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @param string $source\n     * @param array $definitions\n     * @param array $fallbacks\n     *\n     * @throws \\Exception\n     */\n    protected function checkFallbackLanguageLoop($source, $definitions, $fallbacks = [])\n    {\n        if (isset($definitions[$source])) {\n            $targets = explode(',', $definitions[$source]);\n            foreach ($targets as $l) {\n                $target = trim($l);\n                if ($target) {\n                    if (in_array($target, $fallbacks)) {\n                        throw new \\Exception(\"Language `$source` | `$target` causes an infinte loop.\");\n                    }\n                    $fallbacks[] = $target;\n\n                    $this->checkFallbackLanguageLoop($target, $definitions, $fallbacks);\n                }\n            }\n        } else {\n            throw new \\Exception(\"Language `$source` doesn't exist\");\n        }\n    }\n\n    /**\n     * @Route(\"/get-web2print\", name=\"pimcore_admin_settings_getweb2print\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $values = Config::getWeb2PrintConfig();\n        $valueArray = $values->toArray();\n\n        $optionsString = [];\n        if ($valueArray['wkhtml2pdfOptions'] ?? false) {\n            foreach ($valueArray['wkhtml2pdfOptions'] as $key => $value) {\n                $tmpStr = '--'.$key;\n                if ($value !== null && $value !== '') {\n                    $tmpStr .= ' '.$value;\n                }\n                $optionsString[] = $tmpStr;\n            }\n        }\n        $valueArray['wkhtml2pdfOptions'] = implode(\"\\n\", $optionsString);\n\n        $response = [\n            'values' => $valueArray,\n        ];\n\n        return $this->adminJson($response);\n    }\n\n    /**\n     * @Route(\"/set-web2print\", name=\"pimcore_admin_settings_setweb2print\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function setWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $values = $this->decodeJson($request->get('data'));\n\n        unset($values['documentation']);\n        unset($values['additions']);\n        unset($values['json_converter']);\n\n        if ($values['wkhtml2pdfOptions']) {\n            $optionArray = [];\n            $lines = explode(\"\\n\", $values['wkhtml2pdfOptions']);\n            foreach ($lines as $line) {\n                $parts = explode(' ', substr($line, 2));\n                $key = trim($parts[0]);\n                if ($key) {\n                    $value = trim($parts[1] ?? '');\n                    $optionArray[$key] = $value;\n                }\n            }\n            $values['wkhtml2pdfOptions'] = $optionArray;\n        }\n\n        \\Pimcore\\Web2Print\\Config::save($values);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clear-cache\", name=\"pimcore_admin_settings_clearcache\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     * @param KernelInterface $kernel\n     * @param EventDispatcherInterface $eventDispatcher\n     * @param CoreCacheHandler $cache\n     * @param Filesystem $filesystem\n     * @param CacheClearer $symfonyCacheClearer\n     *\n     * @return JsonResponse\n     */\n    public function clearCacheAction(\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CoreCacheHandler $cache,\n        Filesystem $filesystem,\n        CacheClearer $symfonyCacheClearer\n    ) {\n        $this->checkPermissionsHasOneOf(['clear_cache', 'system_settings']);\n\n        $result = [\n            'success' => true,\n        ];\n\n        $clearPimcoreCache = !(bool)$request->get('only_symfony_cache');\n        $clearSymfonyCache = !(bool)$request->get('only_pimcore_cache');\n\n        if ($clearPimcoreCache) {\n            $this->clearPimcoreCache($cache, $eventDispatcher, $filesystem);\n        }\n\n        if ($clearSymfonyCache) {\n            $this->clearSymfonyCache($request, $kernel, $eventDispatcher, $symfonyCacheClearer);\n        }\n\n        $response = new JsonResponse($result);\n\n        if ($clearSymfonyCache) {\n            // we send the response directly here and exit to make sure no code depending on the stale container\n            // is running after this\n            $response->sendHeaders();\n            $response->sendContent();\n            exit;\n        }\n\n        return $response;\n    }\n\n    private function clearPimcoreCache(\n        CoreCacheHandler $cache,\n        EventDispatcherInterface $eventDispatcher,\n        Filesystem $filesystem,\n    ): void {\n        // empty document cache\n        $cache->clearAll();\n\n        if ($filesystem->exists(PIMCORE_CACHE_DIRECTORY)) {\n            $filesystem->remove(PIMCORE_CACHE_DIRECTORY);\n        }\n\n        // PIMCORE-1854 - recreate .dummy file => should remain\n        File::put(PIMCORE_CACHE_DIRECTORY . '/.gitkeep', '');\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR);\n    }\n\n    private function clearSymfonyCache(\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CacheClearer $symfonyCacheClearer,\n    ): void {\n        // pass one or move env parameters to clear multiple envs\n        // if no env is passed it will use the current one\n        $environments = $request->get('env', $kernel->getEnvironment());\n\n        if (!is_array($environments)) {\n            $environments = trim((string)$environments);\n\n            if (empty($environments)) {\n                $environments = [];\n            } else {\n                $environments = [$environments];\n            }\n        }\n\n        if (empty($environments)) {\n            $environments = [$kernel->getEnvironment()];\n        }\n\n        $result['environments'] = $environments;\n\n        if (in_array($kernel->getEnvironment(), $environments)) {\n            // remove terminate and exception event listeners for the current env as they break with a\n            // cleared container - see #2434\n            foreach ($eventDispatcher->getListeners(KernelEvents::TERMINATE) as $listener) {\n                $eventDispatcher->removeListener(KernelEvents::TERMINATE, $listener);\n            }\n\n            foreach ($eventDispatcher->getListeners(KernelEvents::EXCEPTION) as $listener) {\n                $eventDispatcher->removeListener(KernelEvents::EXCEPTION, $listener);\n            }\n        }\n\n        foreach ($environments as $environment) {\n            try {\n                $symfonyCacheClearer->clear($environment);\n            } catch (\\Throwable $e) {\n                $errors = $result['errors'] ?? [];\n                $errors[] = $e->getMessage();\n\n                $result = array_merge($result, [\n                    'success' => false,\n                    'errors' => $errors,\n                ]);\n            }\n        }\n    }\n\n    /**\n     * @Route(\"/clear-output-cache\", name=\"pimcore_admin_settings_clearoutputcache\", methods={\"DELETE\"})\n     *\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function clearOutputCacheAction(EventDispatcherInterface $eventDispatcher)\n    {\n        $this->checkPermission('clear_fullpage_cache');\n\n        // remove \"output\" out of the ignored tags, if a cache lifetime is specified\n        Cache::removeIgnoredTagOnClear('output');\n\n        // empty document cache\n        Cache::clearTags(['output', 'output_lifetime']);\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR_FULLPAGE_CACHE);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clear-temporary-files\", name=\"pimcore_admin_settings_cleartemporaryfiles\", methods={\"DELETE\"})\n     *\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function clearTemporaryFilesAction(EventDispatcherInterface $eventDispatcher)\n    {\n        $this->checkPermission('clear_temp_files');\n\n        // public files\n        Tool\\Storage::get('thumbnail')->deleteDirectory('/');\n        Tool\\Storage::get('asset_cache')->deleteDirectory('/');\n\n        // system files\n        recursiveDelete(PIMCORE_SYSTEM_TEMP_DIRECTORY, false);\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR_TEMPORARY_FILES);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/staticroutes\", name=\"pimcore_admin_settings_staticroutes\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function staticroutesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('routes');\n\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    if (is_string($value)) {\n                        $value = trim($value);\n                    }\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $route = Staticroute::getById($id);\n                if (!$route->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $route->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                // save routes\n                $route = Staticroute::getById($data['id']);\n                if (!$route->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n\n                $route->setValues($data);\n\n                $route->save();\n\n                return $this->adminJson(['data' => $route->getObjectVars(), 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Staticroute())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                unset($data['id']);\n\n                // save route\n                $route = new Staticroute();\n                $route->setValues($data);\n\n                $route->save();\n\n                $responseData = $route->getObjectVars();\n                $responseData['writeable'] = $route->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of routes\n\n            $list = new Staticroute\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Staticroute $staticRoute) use ($filter) {\n                    foreach ($staticRoute->getObjectVars() as $value) {\n                        if (!is_scalar($value)) {\n                            continue;\n                        }\n                        if (stripos((string)$value, $filter) !== false) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $routes = [];\n            foreach ($list->getRoutes() as $routeFromList) {\n                $route = $routeFromList->getObjectVars();\n                $route['writeable'] = $routeFromList->isWriteable();\n                if (is_array($routeFromList->getSiteId())) {\n                    $route['siteId'] = implode(',', $routeFromList->getSiteId());\n                }\n                $routes[] = $route;\n            }\n\n            return $this->adminJson(['data' => $routes, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-available-admin-languages\", name=\"pimcore_admin_settings_getavailableadminlanguages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableAdminLanguagesAction(Request $request)\n    {\n        $langs = [];\n        $availableLanguages = Tool\\Admin::getLanguages();\n        $locales = Tool::getSupportedLocales();\n\n        foreach ($availableLanguages as $lang) {\n            if (array_key_exists($lang, $locales)) {\n                $langs[] = [\n                    'language' => $lang,\n                    'display' => $locales[$lang],\n                ];\n            }\n        }\n\n        usort($langs, function ($a, $b) {\n            return strcmp($a['display'], $b['display']);\n        });\n\n        return $this->adminJson($langs);\n    }\n\n    /**\n     * @Route(\"/glossary\", name=\"pimcore_admin_settings_glossary\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function glossaryAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('glossary');\n\n            Cache::clearTag('glossary');\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $glossary = Glossary::getById($id);\n                $glossary->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save glossary\n                $glossary = Glossary::getById($data['id']);\n\n                if (!empty($data['link'])) {\n                    if ($doc = Document::getByPath($data['link'])) {\n                        $data['link'] = $doc->getId();\n                    }\n                }\n\n                $glossary->setValues($data);\n\n                $glossary->save();\n\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                return $this->adminJson(['data' => $glossary, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save glossary\n                $glossary = new Glossary();\n\n                if (!empty($data['link'])) {\n                    if ($doc = Document::getByPath($data['link'])) {\n                        $data['link'] = $doc->getId();\n                    }\n                }\n\n                $glossary->setValues($data);\n\n                $glossary->save();\n\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                return $this->adminJson(['data' => $glossary->getObjectVars(), 'success' => true]);\n            }\n        } else {\n            // get list of glossaries\n\n            $list = new Glossary\\Listing();\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`text` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $list->load();\n\n            $glossaries = [];\n            foreach ($list->getGlossary() as $glossary) {\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                $glossaries[] = $glossary->getObjectVars();\n            }\n\n            return $this->adminJson(['data' => $glossaries, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-available-sites\", name=\"pimcore_admin_settings_getavailablesites\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableSitesAction(Request $request)\n    {\n        $excludeMainSite = $request->get('excludeMainSite');\n\n        $sitesList = new Model\\Site\\Listing();\n        $sitesObjects = $sitesList->load();\n        $sites = [];\n        if (!$excludeMainSite) {\n            $sites[] = [\n                'id' => 'default',\n                'rootId' => 1,\n                'domains' => '',\n                'rootPath' => '/',\n                'domain' => $this->trans('main_site'),\n            ];\n        }\n\n        foreach ($sitesObjects as $site) {\n            if ($site->getRootDocument()) {\n                if ($site->getMainDomain()) {\n                    $sites[] = [\n                        'id' => $site->getId(),\n                        'rootId' => $site->getRootId(),\n                        'domains' => implode(',', $site->getDomains()),\n                        'rootPath' => $site->getRootPath(),\n                        'domain' => $site->getMainDomain(),\n                    ];\n                }\n            } else {\n                // site is useless, parent doesn't exist anymore\n                $site->delete();\n            }\n        }\n\n        return $this->adminJson($sites);\n    }\n\n    /**\n     * @Route(\"/get-available-countries\", name=\"pimcore_admin_settings_getavailablecountries\", methods={\"GET\"})\n     *\n     * @param LocaleServiceInterface $localeService\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableCountriesAction(LocaleServiceInterface $localeService)\n    {\n        $countries = $localeService->getDisplayRegions();\n        asort($countries);\n\n        $options = [];\n\n        foreach ($countries as $short => $translation) {\n            if (strlen($short) == 2) {\n                $options[] = [\n                    'key' => $translation . ' (' . $short . ')',\n                    'value' => $short,\n                ];\n            }\n        }\n\n        $result = ['data' => $options, 'success' => true, 'total' => count($options)];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/thumbnail-adapter-check\", name=\"pimcore_admin_settings_thumbnailadaptercheck\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function thumbnailAdapterCheckAction(Request $request)\n    {\n        $content = '';\n\n        $instance = \\Pimcore\\Image::getInstance();\n        if ($instance instanceof \\Pimcore\\Image\\Adapter\\GD) {\n            $content = '<span style=\"color: red; font-weight: bold;padding: 10px;margin:0 0 20px 0;border:1px solid red;display:block;\">' .\n                $this->trans('important_use_imagick_pecl_extensions_for_best_results_gd_is_just_a_fallback_with_less_quality') .\n                '</span>';\n        }\n\n        return new Response($content);\n    }\n\n    /**\n     * @Route(\"/thumbnail-tree\", name=\"pimcore_admin_settings_thumbnailtree\", methods={\"GET\", \"POST\"})\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailTreeAction()\n    {\n        $this->checkPermission('thumbnails');\n\n        $thumbnails = [];\n\n        $list = new Asset\\Image\\Thumbnail\\Config\\Listing();\n\n        $groups = [];\n        foreach ($list->getThumbnails() as $item) {\n            if ($item->getGroup()) {\n                if (empty($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getName(),\n                        'text' => $item->getGroup(),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getName(),\n                        'text' => $item->getName(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_thumbnails',\n                        'cls' => 'pimcore_treenode_disabled',\n                        'writeable' => $item->isWriteable(),\n                    ];\n            } else {\n                $thumbnails[] = [\n                    'id' => $item->getName(),\n                    'text' => $item->getName(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_thumbnails',\n                    'cls' => 'pimcore_treenode_disabled',\n                    'writeable' => $item->isWriteable(),\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $thumbnails[] = $group;\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/thumbnail-downloadable\", name=\"pimcore_admin_settings_thumbnaildownloadable\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailDownloadableAction()\n    {\n        $thumbnails = [];\n\n        $list = new Asset\\Image\\Thumbnail\\Config\\Listing();\n        $list->setFilter(function (Asset\\Image\\Thumbnail\\Config $config) {\n            return $config->isDownloadable();\n        });\n\n        foreach ($list->getThumbnails() as $item) {\n            $thumbnails[] = [\n                'id' => $item->getName(),\n                'text' => $item->getName(),\n            ];\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/thumbnail-add\", name=\"pimcore_admin_settings_thumbnailadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailAddAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $success = false;\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe) {\n            $pipe = new Asset\\Image\\Thumbnail\\Config();\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $pipe->setName($request->get('name'));\n            $pipe->save();\n\n            $success = true;\n        } else {\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $pipe->getName()]);\n    }\n\n    /**\n     * @Route(\"/thumbnail-delete\", name=\"pimcore_admin_settings_thumbnaildelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailDeleteAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $pipe->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/thumbnail-get\", name=\"pimcore_admin_settings_thumbnailget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailGetAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n        $data = $pipe->getObjectVars();\n        $data['writeable'] = $pipe->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/thumbnail-update\", name=\"pimcore_admin_settings_thumbnailupdate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailUpdateAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $settingsData = $this->decodeJson($request->get('settings'));\n        $mediaData = $this->decodeJson($request->get('medias'));\n        $mediaOrder = $this->decodeJson($request->get('mediaOrder'));\n\n        foreach ($settingsData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($pipe, $setter)) {\n                $pipe->$setter($value);\n            }\n        }\n\n        $pipe->resetItems();\n\n        uksort($mediaData, function ($a, $b) use ($mediaOrder) {\n            if ($a === 'default') {\n                return -1;\n            }\n\n            return ($mediaOrder[$a] < $mediaOrder[$b]) ? -1 : 1;\n        });\n\n        foreach ($mediaData as $mediaName => $items) {\n            foreach ($items as $item) {\n                $type = $item['type'];\n                unset($item['type']);\n\n                $pipe->addItem($type, $item, $mediaName);\n            }\n        }\n\n        $pipe->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-adapter-check\", name=\"pimcore_admin_settings_videothumbnailadaptercheck\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function videoThumbnailAdapterCheckAction(Request $request)\n    {\n        $content = '';\n\n        if (!\\Pimcore\\Video::isAvailable()) {\n            $content = '<span style=\"color: red; font-weight: bold;padding: 10px;margin:0 0 20px 0;border:1px solid red;display:block;\">' .\n                $this->trans('php_cli_binary_and_or_ffmpeg_binary_setting_is_missing') .\n                '</span>';\n        }\n\n        return new Response($content);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-tree\", name=\"pimcore_admin_settings_videothumbnailtree\", methods={\"GET\", \"POST\"})\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailTreeAction()\n    {\n        $this->checkPermission('thumbnails');\n\n        $thumbnails = [];\n\n        $list = new Asset\\Video\\Thumbnail\\Config\\Listing();\n\n        $groups = [];\n        foreach ($list->getThumbnails() as $item) {\n            if ($item->getGroup()) {\n                if (!$groups[$item->getGroup()]) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getName(),\n                        'text' => $item->getGroup(),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getName(),\n                        'text' => $item->getName(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_videothumbnails',\n                        'cls' => 'pimcore_treenode_disabled',\n                        'writeable' => $item->isWriteable(),\n                    ];\n            } else {\n                $thumbnails[] = [\n                    'id' => $item->getName(),\n                    'text' => $item->getName(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_videothumbnails',\n                    'cls' => 'pimcore_treenode_disabled',\n                    'writeable' => $item->isWriteable(),\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $thumbnails[] = $group;\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-add\", name=\"pimcore_admin_settings_videothumbnailadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailAddAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $success = false;\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe) {\n            $pipe = new Asset\\Video\\Thumbnail\\Config();\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $pipe->setName($request->get('name'));\n            $pipe->save();\n\n            $success = true;\n        } else {\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $pipe->getName()]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-delete\", name=\"pimcore_admin_settings_videothumbnaildelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailDeleteAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $pipe->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-get\", name=\"pimcore_admin_settings_videothumbnailget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailGetAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        $data = $pipe->getObjectVars();\n        $data['writeable'] = $pipe->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-update\", name=\"pimcore_admin_settings_videothumbnailupdate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailUpdateAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $settingsData = $this->decodeJson($request->get('settings'));\n        $mediaData = $this->decodeJson($request->get('medias'));\n        $mediaOrder = $this->decodeJson($request->get('mediaOrder'));\n\n        foreach ($settingsData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($pipe, $setter)) {\n                $pipe->$setter($value);\n            }\n        }\n\n        $pipe->resetItems();\n\n        uksort($mediaData, function ($a, $b) use ($mediaOrder) {\n            if ($a === 'default') {\n                return -1;\n            }\n\n            return ($mediaOrder[$a] < $mediaOrder[$b]) ? -1 : 1;\n        });\n\n        foreach ($mediaData as $mediaName => $items) {\n            foreach ($items as $item) {\n                $type = $item['type'];\n                unset($item['type']);\n\n                $pipe->addItem($type, $item, $mediaName);\n            }\n        }\n\n        $pipe->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/robots-txt\", name=\"pimcore_admin_settings_robotstxtget\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function robotsTxtGetAction()\n    {\n        $this->checkPermission('robots.txt');\n\n        $config = Config::getRobotsConfig();\n        $config = $config->toArray();\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $config,\n            'onFileSystem' => file_exists(PIMCORE_WEB_ROOT . '/robots.txt'),\n        ]);\n    }\n\n    /**\n     * @Route(\"/robots-txt\", name=\"pimcore_admin_settings_robotstxtput\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function robotsTxtPutAction(Request $request)\n    {\n        $this->checkPermission('robots.txt');\n\n        $values = $request->get('data');\n        if (!is_array($values)) {\n            $values = [];\n        }\n\n        foreach ($values as $siteId => $robotsContent) {\n            SettingsStore::set('robots.txt-' . $siteId, $robotsContent, 'string', 'robots.txt');\n        }\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/website-settings\", name=\"pimcore_admin_settings_websitesettings\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function websiteSettingsAction(Request $request)\n    {\n        $this->checkPermission('website_settings');\n\n        if ($request->get('data')) {\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    $value = trim($value);\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $id = $data['id'];\n                $setting = WebsiteSetting::getById($id);\n                if ($setting instanceof WebsiteSetting) {\n                    $setting->delete();\n\n                    return $this->adminJson(['success' => true, 'data' => []]);\n                }\n            } elseif ($request->get('xaction') == 'update') {\n                // save routes\n                $setting = WebsiteSetting::getById($data['id']);\n                if ($setting instanceof WebsiteSetting) {\n                    switch ($setting->getType()) {\n                        case 'document':\n                        case 'asset':\n                        case 'object':\n                            if (isset($data['data'])) {\n                                $element = Element\\Service::getElementByPath($setting->getType(), $data['data']);\n                                $data['data'] = $element;\n                            }\n\n                            break;\n                    }\n\n                    $setting->setValues($data);\n                    $setting->save();\n\n                    $data = $this->getWebsiteSettingForEditMode($setting);\n\n                    return $this->adminJson(['data' => $data, 'success' => true]);\n                }\n            } elseif ($request->get('xaction') == 'create') {\n                unset($data['id']);\n\n                // save route\n                $setting = new WebsiteSetting();\n                $setting->setValues($data);\n\n                $setting->save();\n\n                return $this->adminJson(['data' => $setting->getObjectVars(), 'success' => true]);\n            }\n        } else {\n            $list = new WebsiteSetting\\Listing();\n\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            } else {\n                $list->setOrderKey('name');\n                $list->setOrder('asc');\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`name` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $totalCount = $list->getTotalCount();\n            $list = $list->load();\n\n            $settings = [];\n            foreach ($list as $item) {\n                $resultItem = $this->getWebsiteSettingForEditMode($item);\n                $settings[] = $resultItem;\n            }\n\n            return $this->adminJson(['data' => $settings, 'success' => true, 'total' => $totalCount]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @param WebsiteSetting $item\n     *\n     * @return array\n     */\n    private function getWebsiteSettingForEditMode($item)\n    {\n        $resultItem = [\n            'id' => $item->getId(),\n            'name' => $item->getName(),\n            'language' => $item->getLanguage(),\n            'type' => $item->getType(),\n            'data' => null,\n            'siteId' => $item->getSiteId(),\n            'creationDate' => $item->getCreationDate(),\n            'modificationDate' => $item->getModificationDate(),\n        ];\n\n        switch ($item->getType()) {\n            case 'document':\n            case 'asset':\n            case 'object':\n                $element = $item->getData();\n                if ($element) {\n                    $resultItem['data'] = $element->getRealFullPath();\n                }\n\n                break;\n            default:\n                $resultItem['data'] = $item->getData();\n\n                break;\n        }\n\n        return $resultItem;\n    }\n\n    /**\n     * @Route(\"/get-available-algorithms\", name=\"pimcore_admin_settings_getavailablealgorithms\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableAlgorithmsAction(Request $request)\n    {\n        $options = [\n            [\n                'key' => 'password_hash',\n                'value' => 'password_hash',\n            ],\n        ];\n\n        $algorithms = hash_algos();\n        foreach ($algorithms as $algorithm) {\n            $options[] = [\n                'key' => $algorithm,\n                'value' => $algorithm,\n            ];\n        }\n\n        $result = ['data' => $options, 'success' => true, 'total' => count($options)];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * deleteViews\n     * delete views for localized fields when languages are removed to\n     * prevent mysql errors\n     *\n     * @param string $language\n     * @param string $dbName\n     */\n    protected function deleteViews($language, $dbName)\n    {\n        $db = \\Pimcore\\Db::get();\n        $views = $db->fetchAll('SHOW FULL TABLES IN ' . $db->quoteIdentifier($dbName) . \" WHERE TABLE_TYPE LIKE 'VIEW'\");\n\n        foreach ($views as $view) {\n            if (preg_match('/^object_localized_[0-9]+_' . $language . '$/', $view['Tables_in_' . $dbName])) {\n                $sql = 'DROP VIEW ' . $db->quoteIdentifier($view['Tables_in_' . $dbName]);\n                $db->query($sql);\n            }\n        }\n    }\n\n    /**\n     * @Route(\"/test-web2print\", name=\"pimcore_admin_settings_testweb2print\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function testWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $response = $this->render('@PimcoreAdmin/Admin/Settings/testWeb2print.html.twig');\n        $html = $response->getContent();\n\n        $adapter = \\Pimcore\\Web2Print\\Processor::getInstance();\n        $params = [];\n\n        if ($adapter instanceof \\Pimcore\\Web2Print\\Processor\\WkHtmlToPdf) {\n            $params['adapterConfig'] = '-O landscape';\n        } elseif ($adapter instanceof \\Pimcore\\Web2Print\\Processor\\PdfReactor) {\n            $params['adapterConfig'] = [\n                'javaScriptMode' => 0,\n                'addLinks' => true,\n                'appendLog' => true,\n                'enableDebugMode' => true,\n            ];\n        }\n\n        $responseOptions = [\n            'Content-Type' => 'application/pdf',\n        ];\n\n        $pdfData = $adapter->getPdfFromString($html, $params);\n\n        return new \\Symfony\\Component\\HttpFoundation\\Response(\n            $pdfData,\n            200,\n            $responseOptions\n\n        );\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Cache;\nuse Pimcore\\Cache\\Core\\CoreCacheHandler;\nuse Pimcore\\Cache\\Symfony\\CacheClearer;\nuse Pimcore\\Config;\nuse Pimcore\\Event\\SystemEvents;\nuse Pimcore\\File;\nuse Pimcore\\Helper\\StopMessengerWorkersTrait;\nuse Pimcore\\Localization\\LocaleServiceInterface;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Exception\\ConfigWriteException;\nuse Pimcore\\Model\\Glossary;\nuse Pimcore\\Model\\Metadata;\nuse Pimcore\\Model\\Property;\nuse Pimcore\\Model\\Staticroute;\nuse Pimcore\\Model\\Tool\\SettingsStore;\nuse Pimcore\\Model\\WebsiteSetting;\nuse Pimcore\\Tool;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\TerminateEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Yaml\\Yaml;\n\n/**\n * @Route(\"/settings\")\n *\n * @internal\n */\nclass SettingsController extends AdminController\n{\n    use StopMessengerWorkersTrait;\n\n    private const CUSTOM_LOGO_PATH = 'custom-logo.image';\n\n    /**\n     * @Route(\"/display-custom-logo\", name=\"pimcore_settings_display_custom_logo\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function displayCustomLogoAction(Request $request)\n    {\n        $mime = 'image/svg+xml';\n        if ($request->get('white')) {\n            $logo = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img/logo-claim-white.svg';\n        } else {\n            $logo = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img/logo-claim-gray.svg';\n        }\n\n        $stream = fopen($logo, 'rb');\n\n        $storage = Tool\\Storage::get('admin');\n        if ($storage->fileExists(self::CUSTOM_LOGO_PATH)) {\n            try {\n                $mime = $storage->mimeType(self::CUSTOM_LOGO_PATH);\n                $stream = $storage->readStream(self::CUSTOM_LOGO_PATH);\n            } catch (\\Exception $e) {\n                // do nothing\n            }\n        }\n\n        return new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, ['Content-Type' => $mime]);\n    }\n\n    /**\n     * @Route(\"/upload-custom-logo\", name=\"pimcore_admin_settings_uploadcustomlogo\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function uploadCustomLogoAction(Request $request)\n    {\n        $fileExt = File::getFileExtension($_FILES['Filedata']['name']);\n        if (!in_array($fileExt, ['svg', 'png', 'jpg'])) {\n            throw new \\Exception('Unsupported file format');\n        }\n\n        if($fileExt === 'svg') {\n            if(strpos(file_get_contents($_FILES['Filedata']['tmp_name']), '<script')) {\n                throw new \\Exception('Scripts in SVG files are not supported');\n            }\n        }\n\n        $storage = Tool\\Storage::get('admin');\n        $storage->writeStream(self::CUSTOM_LOGO_PATH, fopen($_FILES['Filedata']['tmp_name'], 'rb'));\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/delete-custom-logo\", name=\"pimcore_admin_settings_deletecustomlogo\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCustomLogoAction(Request $request)\n    {\n        if (Tool\\Storage::get('admin')->fileExists(self::CUSTOM_LOGO_PATH)) {\n            Tool\\Storage::get('admin')->delete(self::CUSTOM_LOGO_PATH);\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * Used by the predefined metadata grid\n     *\n     * @Route(\"/predefined-metadata\", name=\"pimcore_admin_settings_metadata\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function metadataAction(Request $request)\n    {\n        $this->checkPermission('asset_metadata');\n\n        if ($request->get('data')) {\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $metadata = Metadata\\Predefined::getById($id);\n                if (!$metadata->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $metadata->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save type\n                $metadata = Metadata\\Predefined::getById($data['id']);\n                if (!$metadata->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $metadata->setValues($data);\n\n                $existingItem = Metadata\\Predefined\\Listing::getByKeyAndLanguage($metadata->getName(), $metadata->getLanguage(), $metadata->getTargetSubtype());\n                if ($existingItem && $existingItem->getId() != $metadata->getId()) {\n                    return $this->adminJson(['message' => 'rule_violation', 'success' => false]);\n                }\n\n                $metadata->minimize();\n                $metadata->save();\n                $metadata->expand();\n\n                $responseData = $metadata->getObjectVars();\n                $responseData['writeable'] = $metadata->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Metadata\\Predefined())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save type\n                $metadata = Metadata\\Predefined::create();\n\n                $metadata->setValues($data);\n\n                $existingItem = Metadata\\Predefined\\Listing::getByKeyAndLanguage($metadata->getName(), $metadata->getLanguage(), $metadata->getTargetSubtype());\n                if ($existingItem) {\n                    return $this->adminJson(['message' => 'rule_violation', 'success' => false]);\n                }\n\n                $metadata->save();\n\n                $responseData = $metadata->getObjectVars();\n                $responseData['writeable'] = $metadata->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of types\n            $list = new Metadata\\Predefined\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Metadata\\Predefined $predefined) use ($filter) {\n                    foreach ($predefined->getObjectVars() as $value) {\n                        if (stripos($value, $filter) !== false) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $properties = [];\n            foreach ($list->getDefinitions() as $metadata) {\n                $data = $metadata->getObjectVars();\n                $data['writeable'] = $metadata->isWriteable();\n                $properties[] = $data;\n            }\n\n            return $this->adminJson(['data' => $properties, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-predefined-metadata\", name=\"pimcore_admin_settings_getpredefinedmetadata\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPredefinedMetadataAction(Request $request)\n    {\n        $type = $request->get('type');\n        $subType = $request->get('subType');\n        $group = $request->get('group');\n        $list = Metadata\\Predefined\\Listing::getByTargetType($type, [$subType]);\n        $result = [];\n        foreach ($list as $item) {\n            $itemGroup = $item->getGroup() ?? '';\n            if ($group === 'default' || $group === $itemGroup) {\n                $item->expand();\n                $data = $item->getObjectVars();\n                $data['writeable'] = $item->isWriteable();\n                $result[] = $data;\n            }\n        }\n\n        return $this->adminJson(['data' => $result, 'success' => true]);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_settings_properties\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('predefined_properties');\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $property = Property\\Predefined::getById($id);\n                if (!$property->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $property->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save type\n                $property = Property\\Predefined::getById($data['id']);\n                if (!$property->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                if (is_array($data['ctype'])) {\n                    $data['ctype'] = implode(',', $data['ctype']);\n                }\n                $property->setValues($data);\n\n                $property->save();\n\n                $responseData = $property->getObjectVars();\n                $responseData['writeable'] = $property->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Property\\Predefined())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save type\n                $property = Property\\Predefined::create();\n                $property->setValues($data);\n\n                $property->save();\n\n                $responseData = $property->getObjectVars();\n                $responseData['writeable'] = $property->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of types\n            $list = new Property\\Predefined\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Property\\Predefined $predefined) use ($filter) {\n                    foreach ($predefined->getObjectVars() as $value) {\n                        if ($value) {\n                            $cellValues = is_array($value) ? $value : [$value];\n\n                            foreach ($cellValues as $cellValue) {\n                                if (stripos($cellValue, $filter) !== false) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $properties = [];\n            foreach ($list->getProperties() as $property) {\n                $data = $property->getObjectVars();\n                $data['writeable'] = $property->isWriteable();\n                $properties[] = $data;\n            }\n\n            return $this->adminJson(['data' => $properties, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-system\", name=\"pimcore_admin_settings_getsystem\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param Config $config\n     *\n     * @return JsonResponse\n     */\n    public function getSystemAction(Request $request, Config $config)\n    {\n        $this->checkPermission('system_settings');\n\n        $valueArray = [\n            'general' => $config['general'],\n            'documents' => $config['documents'],\n            'assets' => $config['assets'],\n            'objects' => $config['objects'],\n            'branding' => $config['branding'],\n            'email' => $config['email'],\n        ];\n\n        $locales = Tool::getSupportedLocales();\n        $languageOptions = [];\n        $validLanguages = [];\n        foreach ($locales as $short => $translation) {\n            if (!empty($short)) {\n                $languageOptions[] = [\n                    'language' => $short,\n                    'display' => $translation . \" ($short)\",\n                ];\n                $validLanguages[] = $short;\n            }\n        }\n\n        $valueArray['general']['valid_language'] = explode(',', $valueArray['general']['valid_languages']);\n\n        //for \"wrong\" legacy values\n        if (is_array($valueArray['general']['valid_language'])) {\n            foreach ($valueArray['general']['valid_language'] as $existingValue) {\n                if (!in_array($existingValue, $validLanguages)) {\n                    $languageOptions[] = [\n                        'language' => $existingValue,\n                        'display' => $existingValue,\n                    ];\n                }\n            }\n        }\n\n        $response = [\n            'values' => $valueArray,\n            'config' => [\n                'languages' => $languageOptions,\n            ],\n        ];\n\n        return $this->adminJson($response);\n    }\n\n    /**\n     * @Route(\"/set-system\", name=\"pimcore_admin_settings_setsystem\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     * @param LocaleServiceInterface $localeService\n     *\n     * @return JsonResponse\n     */\n    public function setSystemAction(\n        LocaleServiceInterface $localeService,\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CoreCacheHandler $cache,\n        Filesystem $filesystem,\n        CacheClearer $symfonyCacheClearer\n    ) {\n        $this->checkPermission('system_settings');\n\n        $values = $this->decodeJson($request->get('data'));\n\n        $existingValues = [];\n\n        try {\n            $file = Config::locateConfigFile('system.yml');\n            $existingValues = Config::getConfigInstance($file, true);\n        } catch (\\Exception $e) {\n            // nothing to do\n        }\n\n        // localized error pages\n        $localizedErrorPages = [];\n\n        // fallback languages\n        $fallbackLanguages = [];\n        $existingValues['pimcore']['general']['fallback_languages'] = [];\n        $languages = explode(',', $values['general.validLanguages']);\n        $filteredLanguages = [];\n\n        foreach ($languages as $language) {\n            if (isset($values['general.fallbackLanguages.' . $language])) {\n                $fallbackLanguages[$language] = str_replace(' ', '', $values['general.fallbackLanguages.' . $language]);\n            }\n\n            // localized error pages\n            if (isset($values['documents.error_pages.localized.' . $language])) {\n                $localizedErrorPages[$language] = $values['documents.error_pages.localized.' . $language];\n            }\n\n            if ($localeService->isLocale($language)) {\n                $filteredLanguages[] = $language;\n            }\n        }\n\n        // check if there's a fallback language endless loop\n        foreach ($fallbackLanguages as $sourceLang => $targetLang) {\n            $this->checkFallbackLanguageLoop($sourceLang, $fallbackLanguages);\n        }\n\n        $settings['pimcore'] = [\n            'general' => [\n                'domain' => $values['general.domain'],\n                'redirect_to_maindomain' => $values['general.redirect_to_maindomain'],\n                'language' => $values['general.language'],\n                'valid_languages' => implode(',', $filteredLanguages),\n                'fallback_languages' => $fallbackLanguages,\n                'default_language' => $values['general.defaultLanguage'],\n                'debug_admin_translations' => $values['general.debug_admin_translations'],\n            ],\n            'documents' => [\n                'versions' => [\n                    'days' => $values['documents.versions.days'] ?? null,\n                    'steps' => $values['documents.versions.steps'] ?? null,\n                ],\n                'error_pages' => [\n                    'default' => $values['documents.error_pages.default'],\n                    'localized' => $localizedErrorPages,\n                ],\n            ],\n            'objects' => [\n                'versions' => [\n                    'days' => $values['objects.versions.days'] ?? null,\n                    'steps' => $values['objects.versions.steps'] ?? null,\n                ],\n            ],\n            'assets' => [\n                'versions' => [\n                    'days' => $values['assets.versions.days'] ?? null,\n                    'steps' => $values['assets.versions.steps'] ?? null,\n                ],\n                'hide_edit_image' => $values['assets.hide_edit_image'],\n                'disable_tree_preview' => $values['assets.disable_tree_preview'],\n            ],\n        ];\n\n        //branding\n        $settings['pimcore_admin'] = [\n            'branding' =>\n                [\n                    'login_screen_invert_colors' => $values['branding.login_screen_invert_colors'],\n                    'color_login_screen' => $values['branding.color_login_screen'],\n                    'color_admin_interface' => $values['branding.color_admin_interface'],\n                    'login_screen_custom_image' => $values['branding.login_screen_custom_image'],\n                ],\n        ];\n\n        if (array_key_exists('email.debug.emailAddresses', $values) && $values['email.debug.emailAddresses']) {\n            $settings['pimcore']['email']['debug']['email_addresses'] = $values['email.debug.emailAddresses'];\n        }\n\n        $settingsYml = Yaml::dump($settings, 5);\n        $configFile = Config::locateConfigFile('system.yml');\n        File::put($configFile, $settingsYml);\n\n        // clear all caches\n        $this->clearSymfonyCache($request, $kernel, $eventDispatcher, $symfonyCacheClearer);\n        $this->stopMessengerWorkers();\n\n        $eventDispatcher->addListener(KernelEvents::TERMINATE, function (TerminateEvent $event) use (\n            $cache, $eventDispatcher, $filesystem\n        ) {\n            // we need to clear the cache with a delay, because the cache is used by messenger:stop-workers\n            // to send the stop signal to all worker processes\n            sleep(2);\n            $this->clearPimcoreCache($cache, $eventDispatcher, $filesystem);\n        });\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @param string $source\n     * @param array $definitions\n     * @param array $fallbacks\n     *\n     * @throws \\Exception\n     */\n    protected function checkFallbackLanguageLoop($source, $definitions, $fallbacks = [])\n    {\n        if (isset($definitions[$source])) {\n            $targets = explode(',', $definitions[$source]);\n            foreach ($targets as $l) {\n                $target = trim($l);\n                if ($target) {\n                    if (in_array($target, $fallbacks)) {\n                        throw new \\Exception(\"Language `$source` | `$target` causes an infinte loop.\");\n                    }\n                    $fallbacks[] = $target;\n\n                    $this->checkFallbackLanguageLoop($target, $definitions, $fallbacks);\n                }\n            }\n        } else {\n            throw new \\Exception(\"Language `$source` doesn't exist\");\n        }\n    }\n\n    /**\n     * @Route(\"/get-web2print\", name=\"pimcore_admin_settings_getweb2print\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $values = Config::getWeb2PrintConfig();\n        $valueArray = $values->toArray();\n\n        $optionsString = [];\n        if ($valueArray['wkhtml2pdfOptions'] ?? false) {\n            foreach ($valueArray['wkhtml2pdfOptions'] as $key => $value) {\n                $tmpStr = '--'.$key;\n                if ($value !== null && $value !== '') {\n                    $tmpStr .= ' '.$value;\n                }\n                $optionsString[] = $tmpStr;\n            }\n        }\n        $valueArray['wkhtml2pdfOptions'] = implode(\"\\n\", $optionsString);\n\n        $response = [\n            'values' => $valueArray,\n        ];\n\n        return $this->adminJson($response);\n    }\n\n    /**\n     * @Route(\"/set-web2print\", name=\"pimcore_admin_settings_setweb2print\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function setWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $values = $this->decodeJson($request->get('data'));\n\n        unset($values['documentation']);\n        unset($values['additions']);\n        unset($values['json_converter']);\n\n        if ($values['wkhtml2pdfOptions']) {\n            $optionArray = [];\n            $lines = explode(\"\\n\", $values['wkhtml2pdfOptions']);\n            foreach ($lines as $line) {\n                $parts = explode(' ', substr($line, 2));\n                $key = trim($parts[0]);\n                if ($key) {\n                    $value = trim($parts[1] ?? '');\n                    $optionArray[$key] = $value;\n                }\n            }\n            $values['wkhtml2pdfOptions'] = $optionArray;\n        }\n\n        \\Pimcore\\Web2Print\\Config::save($values);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clear-cache\", name=\"pimcore_admin_settings_clearcache\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     * @param KernelInterface $kernel\n     * @param EventDispatcherInterface $eventDispatcher\n     * @param CoreCacheHandler $cache\n     * @param Filesystem $filesystem\n     * @param CacheClearer $symfonyCacheClearer\n     *\n     * @return JsonResponse\n     */\n    public function clearCacheAction(\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CoreCacheHandler $cache,\n        Filesystem $filesystem,\n        CacheClearer $symfonyCacheClearer\n    ) {\n        $this->checkPermissionsHasOneOf(['clear_cache', 'system_settings']);\n\n        $result = [\n            'success' => true,\n        ];\n\n        $clearPimcoreCache = !(bool)$request->get('only_symfony_cache');\n        $clearSymfonyCache = !(bool)$request->get('only_pimcore_cache');\n\n        if ($clearPimcoreCache) {\n            $this->clearPimcoreCache($cache, $eventDispatcher, $filesystem);\n        }\n\n        if ($clearSymfonyCache) {\n            $this->clearSymfonyCache($request, $kernel, $eventDispatcher, $symfonyCacheClearer);\n        }\n\n        $response = new JsonResponse($result);\n\n        if ($clearSymfonyCache) {\n            // we send the response directly here and exit to make sure no code depending on the stale container\n            // is running after this\n            $response->sendHeaders();\n            $response->sendContent();\n            exit;\n        }\n\n        return $response;\n    }\n\n    private function clearPimcoreCache(\n        CoreCacheHandler $cache,\n        EventDispatcherInterface $eventDispatcher,\n        Filesystem $filesystem,\n    ): void {\n        // empty document cache\n        $cache->clearAll();\n\n        if ($filesystem->exists(PIMCORE_CACHE_DIRECTORY)) {\n            $filesystem->remove(PIMCORE_CACHE_DIRECTORY);\n        }\n\n        // PIMCORE-1854 - recreate .dummy file => should remain\n        File::put(PIMCORE_CACHE_DIRECTORY . '/.gitkeep', '');\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR);\n    }\n\n    private function clearSymfonyCache(\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CacheClearer $symfonyCacheClearer,\n    ): void {\n        // pass one or move env parameters to clear multiple envs\n        // if no env is passed it will use the current one\n        $environments = $request->get('env', $kernel->getEnvironment());\n\n        if (!is_array($environments)) {\n            $environments = trim((string)$environments);\n\n            if (empty($environments)) {\n                $environments = [];\n            } else {\n                $environments = [$environments];\n            }\n        }\n\n        if (empty($environments)) {\n            $environments = [$kernel->getEnvironment()];\n        }\n\n        $result['environments'] = $environments;\n\n        if (in_array($kernel->getEnvironment(), $environments)) {\n            // remove terminate and exception event listeners for the current env as they break with a\n            // cleared container - see #2434\n            foreach ($eventDispatcher->getListeners(KernelEvents::TERMINATE) as $listener) {\n                $eventDispatcher->removeListener(KernelEvents::TERMINATE, $listener);\n            }\n\n            foreach ($eventDispatcher->getListeners(KernelEvents::EXCEPTION) as $listener) {\n                $eventDispatcher->removeListener(KernelEvents::EXCEPTION, $listener);\n            }\n        }\n\n        foreach ($environments as $environment) {\n            try {\n                $symfonyCacheClearer->clear($environment);\n            } catch (\\Throwable $e) {\n                $errors = $result['errors'] ?? [];\n                $errors[] = $e->getMessage();\n\n                $result = array_merge($result, [\n                    'success' => false,\n                    'errors' => $errors,\n                ]);\n            }\n        }\n    }\n\n    /**\n     * @Route(\"/clear-output-cache\", name=\"pimcore_admin_settings_clearoutputcache\", methods={\"DELETE\"})\n     *\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function clearOutputCacheAction(EventDispatcherInterface $eventDispatcher)\n    {\n        $this->checkPermission('clear_fullpage_cache');\n\n        // remove \"output\" out of the ignored tags, if a cache lifetime is specified\n        Cache::removeIgnoredTagOnClear('output');\n\n        // empty document cache\n        Cache::clearTags(['output', 'output_lifetime']);\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR_FULLPAGE_CACHE);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clear-temporary-files\", name=\"pimcore_admin_settings_cleartemporaryfiles\", methods={\"DELETE\"})\n     *\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function clearTemporaryFilesAction(EventDispatcherInterface $eventDispatcher)\n    {\n        $this->checkPermission('clear_temp_files');\n\n        // public files\n        Tool\\Storage::get('thumbnail')->deleteDirectory('/');\n        Tool\\Storage::get('asset_cache')->deleteDirectory('/');\n\n        // system files\n        recursiveDelete(PIMCORE_SYSTEM_TEMP_DIRECTORY, false);\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR_TEMPORARY_FILES);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/staticroutes\", name=\"pimcore_admin_settings_staticroutes\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function staticroutesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('routes');\n\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    if (is_string($value)) {\n                        $value = trim($value);\n                    }\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $route = Staticroute::getById($id);\n                if (!$route->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $route->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                // save routes\n                $route = Staticroute::getById($data['id']);\n                if (!$route->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n\n                $route->setValues($data);\n\n                $route->save();\n\n                return $this->adminJson(['data' => $route->getObjectVars(), 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Staticroute())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                unset($data['id']);\n\n                // save route\n                $route = new Staticroute();\n                $route->setValues($data);\n\n                $route->save();\n\n                $responseData = $route->getObjectVars();\n                $responseData['writeable'] = $route->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of routes\n\n            $list = new Staticroute\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Staticroute $staticRoute) use ($filter) {\n                    foreach ($staticRoute->getObjectVars() as $value) {\n                        if (!is_scalar($value)) {\n                            continue;\n                        }\n                        if (stripos((string)$value, $filter) !== false) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $routes = [];\n            foreach ($list->getRoutes() as $routeFromList) {\n                $route = $routeFromList->getObjectVars();\n                $route['writeable'] = $routeFromList->isWriteable();\n                if (is_array($routeFromList->getSiteId())) {\n                    $route['siteId'] = implode(',', $routeFromList->getSiteId());\n                }\n                $routes[] = $route;\n            }\n\n            return $this->adminJson(['data' => $routes, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-available-admin-languages\", name=\"pimcore_admin_settings_getavailableadminlanguages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableAdminLanguagesAction(Request $request)\n    {\n        $langs = [];\n        $availableLanguages = Tool\\Admin::getLanguages();\n        $locales = Tool::getSupportedLocales();\n\n        foreach ($availableLanguages as $lang) {\n            if (array_key_exists($lang, $locales)) {\n                $langs[] = [\n                    'language' => $lang,\n                    'display' => $locales[$lang],\n                ];\n            }\n        }\n\n        usort($langs, function ($a, $b) {\n            return strcmp($a['display'], $b['display']);\n        });\n\n        return $this->adminJson($langs);\n    }\n\n    /**\n     * @Route(\"/glossary\", name=\"pimcore_admin_settings_glossary\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function glossaryAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('glossary');\n\n            Cache::clearTag('glossary');\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $glossary = Glossary::getById($id);\n                $glossary->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save glossary\n                $glossary = Glossary::getById($data['id']);\n\n                if (!empty($data['link'])) {\n                    if ($doc = Document::getByPath($data['link'])) {\n                        $data['link'] = $doc->getId();\n                    }\n                }\n\n                $glossary->setValues($data);\n\n                $glossary->save();\n\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                return $this->adminJson(['data' => $glossary, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save glossary\n                $glossary = new Glossary();\n\n                if (!empty($data['link'])) {\n                    if ($doc = Document::getByPath($data['link'])) {\n                        $data['link'] = $doc->getId();\n                    }\n                }\n\n                $glossary->setValues($data);\n\n                $glossary->save();\n\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                return $this->adminJson(['data' => $glossary->getObjectVars(), 'success' => true]);\n            }\n        } else {\n            // get list of glossaries\n\n            $list = new Glossary\\Listing();\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`text` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $list->load();\n\n            $glossaries = [];\n            foreach ($list->getGlossary() as $glossary) {\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                $glossaries[] = $glossary->getObjectVars();\n            }\n\n            return $this->adminJson(['data' => $glossaries, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-available-sites\", name=\"pimcore_admin_settings_getavailablesites\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableSitesAction(Request $request)\n    {\n        $excludeMainSite = $request->get('excludeMainSite');\n\n        $sitesList = new Model\\Site\\Listing();\n        $sitesObjects = $sitesList->load();\n        $sites = [];\n        if (!$excludeMainSite) {\n            $sites[] = [\n                'id' => 'default',\n                'rootId' => 1,\n                'domains' => '',\n                'rootPath' => '/',\n                'domain' => $this->trans('main_site'),\n            ];\n        }\n\n        foreach ($sitesObjects as $site) {\n            if ($site->getRootDocument()) {\n                if ($site->getMainDomain()) {\n                    $sites[] = [\n                        'id' => $site->getId(),\n                        'rootId' => $site->getRootId(),\n                        'domains' => implode(',', $site->getDomains()),\n                        'rootPath' => $site->getRootPath(),\n                        'domain' => $site->getMainDomain(),\n                    ];\n                }\n            } else {\n                // site is useless, parent doesn't exist anymore\n                $site->delete();\n            }\n        }\n\n        return $this->adminJson($sites);\n    }\n\n    /**\n     * @Route(\"/get-available-countries\", name=\"pimcore_admin_settings_getavailablecountries\", methods={\"GET\"})\n     *\n     * @param LocaleServiceInterface $localeService\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableCountriesAction(LocaleServiceInterface $localeService)\n    {\n        $countries = $localeService->getDisplayRegions();\n        asort($countries);\n\n        $options = [];\n\n        foreach ($countries as $short => $translation) {\n            if (strlen($short) == 2) {\n                $options[] = [\n                    'key' => $translation . ' (' . $short . ')',\n                    'value' => $short,\n                ];\n            }\n        }\n\n        $result = ['data' => $options, 'success' => true, 'total' => count($options)];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/thumbnail-adapter-check\", name=\"pimcore_admin_settings_thumbnailadaptercheck\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function thumbnailAdapterCheckAction(Request $request)\n    {\n        $content = '';\n\n        $instance = \\Pimcore\\Image::getInstance();\n        if ($instance instanceof \\Pimcore\\Image\\Adapter\\GD) {\n            $content = '<span style=\"color: red; font-weight: bold;padding: 10px;margin:0 0 20px 0;border:1px solid red;display:block;\">' .\n                $this->trans('important_use_imagick_pecl_extensions_for_best_results_gd_is_just_a_fallback_with_less_quality') .\n                '</span>';\n        }\n\n        return new Response($content);\n    }\n\n    /**\n     * @Route(\"/thumbnail-tree\", name=\"pimcore_admin_settings_thumbnailtree\", methods={\"GET\", \"POST\"})\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailTreeAction()\n    {\n        $this->checkPermission('thumbnails');\n\n        $thumbnails = [];\n\n        $list = new Asset\\Image\\Thumbnail\\Config\\Listing();\n\n        $groups = [];\n        foreach ($list->getThumbnails() as $item) {\n            if ($item->getGroup()) {\n                if (empty($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getName(),\n                        'text' => $item->getGroup(),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getName(),\n                        'text' => $item->getName(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_thumbnails',\n                        'cls' => 'pimcore_treenode_disabled',\n                        'writeable' => $item->isWriteable(),\n                    ];\n            } else {\n                $thumbnails[] = [\n                    'id' => $item->getName(),\n                    'text' => $item->getName(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_thumbnails',\n                    'cls' => 'pimcore_treenode_disabled',\n                    'writeable' => $item->isWriteable(),\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $thumbnails[] = $group;\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/thumbnail-downloadable\", name=\"pimcore_admin_settings_thumbnaildownloadable\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailDownloadableAction()\n    {\n        $thumbnails = [];\n\n        $list = new Asset\\Image\\Thumbnail\\Config\\Listing();\n        $list->setFilter(function (Asset\\Image\\Thumbnail\\Config $config) {\n            return $config->isDownloadable();\n        });\n\n        foreach ($list->getThumbnails() as $item) {\n            $thumbnails[] = [\n                'id' => $item->getName(),\n                'text' => $item->getName(),\n            ];\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/thumbnail-add\", name=\"pimcore_admin_settings_thumbnailadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailAddAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $success = false;\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe) {\n            $pipe = new Asset\\Image\\Thumbnail\\Config();\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $pipe->setName($request->get('name'));\n            $pipe->save();\n\n            $success = true;\n        } else {\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $pipe->getName()]);\n    }\n\n    /**\n     * @Route(\"/thumbnail-delete\", name=\"pimcore_admin_settings_thumbnaildelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailDeleteAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $pipe->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/thumbnail-get\", name=\"pimcore_admin_settings_thumbnailget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailGetAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n        $data = $pipe->getObjectVars();\n        $data['writeable'] = $pipe->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/thumbnail-update\", name=\"pimcore_admin_settings_thumbnailupdate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailUpdateAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $settingsData = $this->decodeJson($request->get('settings'));\n        $mediaData = $this->decodeJson($request->get('medias'));\n        $mediaOrder = $this->decodeJson($request->get('mediaOrder'));\n\n        foreach ($settingsData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($pipe, $setter)) {\n                $pipe->$setter($value);\n            }\n        }\n\n        $pipe->resetItems();\n\n        uksort($mediaData, function ($a, $b) use ($mediaOrder) {\n            if ($a === 'default') {\n                return -1;\n            }\n\n            return ($mediaOrder[$a] < $mediaOrder[$b]) ? -1 : 1;\n        });\n\n        foreach ($mediaData as $mediaName => $items) {\n            foreach ($items as $item) {\n                $type = $item['type'];\n                unset($item['type']);\n\n                $pipe->addItem($type, $item, $mediaName);\n            }\n        }\n\n        $pipe->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-adapter-check\", name=\"pimcore_admin_settings_videothumbnailadaptercheck\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function videoThumbnailAdapterCheckAction(Request $request)\n    {\n        $content = '';\n\n        if (!\\Pimcore\\Video::isAvailable()) {\n            $content = '<span style=\"color: red; font-weight: bold;padding: 10px;margin:0 0 20px 0;border:1px solid red;display:block;\">' .\n                $this->trans('php_cli_binary_and_or_ffmpeg_binary_setting_is_missing') .\n                '</span>';\n        }\n\n        return new Response($content);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-tree\", name=\"pimcore_admin_settings_videothumbnailtree\", methods={\"GET\", \"POST\"})\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailTreeAction()\n    {\n        $this->checkPermission('thumbnails');\n\n        $thumbnails = [];\n\n        $list = new Asset\\Video\\Thumbnail\\Config\\Listing();\n\n        $groups = [];\n        foreach ($list->getThumbnails() as $item) {\n            if ($item->getGroup()) {\n                if (!$groups[$item->getGroup()]) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getName(),\n                        'text' => $item->getGroup(),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getName(),\n                        'text' => $item->getName(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_videothumbnails',\n                        'cls' => 'pimcore_treenode_disabled',\n                        'writeable' => $item->isWriteable(),\n                    ];\n            } else {\n                $thumbnails[] = [\n                    'id' => $item->getName(),\n                    'text' => $item->getName(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_videothumbnails',\n                    'cls' => 'pimcore_treenode_disabled',\n                    'writeable' => $item->isWriteable(),\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $thumbnails[] = $group;\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-add\", name=\"pimcore_admin_settings_videothumbnailadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailAddAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $success = false;\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe) {\n            $pipe = new Asset\\Video\\Thumbnail\\Config();\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $pipe->setName($request->get('name'));\n            $pipe->save();\n\n            $success = true;\n        } else {\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $pipe->getName()]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-delete\", name=\"pimcore_admin_settings_videothumbnaildelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailDeleteAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $pipe->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-get\", name=\"pimcore_admin_settings_videothumbnailget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailGetAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        $data = $pipe->getObjectVars();\n        $data['writeable'] = $pipe->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-update\", name=\"pimcore_admin_settings_videothumbnailupdate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailUpdateAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $settingsData = $this->decodeJson($request->get('settings'));\n        $mediaData = $this->decodeJson($request->get('medias'));\n        $mediaOrder = $this->decodeJson($request->get('mediaOrder'));\n\n        foreach ($settingsData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($pipe, $setter)) {\n                $pipe->$setter($value);\n            }\n        }\n\n        $pipe->resetItems();\n\n        uksort($mediaData, function ($a, $b) use ($mediaOrder) {\n            if ($a === 'default') {\n                return -1;\n            }\n\n            return ($mediaOrder[$a] < $mediaOrder[$b]) ? -1 : 1;\n        });\n\n        foreach ($mediaData as $mediaName => $items) {\n            foreach ($items as $item) {\n                $type = $item['type'];\n                unset($item['type']);\n\n                $pipe->addItem($type, $item, $mediaName);\n            }\n        }\n\n        $pipe->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/robots-txt\", name=\"pimcore_admin_settings_robotstxtget\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function robotsTxtGetAction()\n    {\n        $this->checkPermission('robots.txt');\n\n        $config = Config::getRobotsConfig();\n        $config = $config->toArray();\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $config,\n            'onFileSystem' => file_exists(PIMCORE_WEB_ROOT . '/robots.txt'),\n        ]);\n    }\n\n    /**\n     * @Route(\"/robots-txt\", name=\"pimcore_admin_settings_robotstxtput\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function robotsTxtPutAction(Request $request)\n    {\n        $this->checkPermission('robots.txt');\n\n        $values = $request->get('data');\n        if (!is_array($values)) {\n            $values = [];\n        }\n\n        foreach ($values as $siteId => $robotsContent) {\n            SettingsStore::set('robots.txt-' . $siteId, $robotsContent, 'string', 'robots.txt');\n        }\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/website-settings\", name=\"pimcore_admin_settings_websitesettings\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function websiteSettingsAction(Request $request)\n    {\n        $this->checkPermission('website_settings');\n\n        if ($request->get('data')) {\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    $value = trim($value);\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $id = $data['id'];\n                $setting = WebsiteSetting::getById($id);\n                if ($setting instanceof WebsiteSetting) {\n                    $setting->delete();\n\n                    return $this->adminJson(['success' => true, 'data' => []]);\n                }\n            } elseif ($request->get('xaction') == 'update') {\n                // save routes\n                $setting = WebsiteSetting::getById($data['id']);\n                if ($setting instanceof WebsiteSetting) {\n                    switch ($setting->getType()) {\n                        case 'document':\n                        case 'asset':\n                        case 'object':\n                            if (isset($data['data'])) {\n                                $element = Element\\Service::getElementByPath($setting->getType(), $data['data']);\n                                $data['data'] = $element;\n                            }\n\n                            break;\n                    }\n\n                    $setting->setValues($data);\n                    $setting->save();\n\n                    $data = $this->getWebsiteSettingForEditMode($setting);\n\n                    return $this->adminJson(['data' => $data, 'success' => true]);\n                }\n            } elseif ($request->get('xaction') == 'create') {\n                unset($data['id']);\n\n                // save route\n                $setting = new WebsiteSetting();\n                $setting->setValues($data);\n\n                $setting->save();\n\n                return $this->adminJson(['data' => $setting->getObjectVars(), 'success' => true]);\n            }\n        } else {\n            $list = new WebsiteSetting\\Listing();\n\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            } else {\n                $list->setOrderKey('name');\n                $list->setOrder('asc');\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`name` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $totalCount = $list->getTotalCount();\n            $list = $list->load();\n\n            $settings = [];\n            foreach ($list as $item) {\n                $resultItem = $this->getWebsiteSettingForEditMode($item);\n                $settings[] = $resultItem;\n            }\n\n            return $this->adminJson(['data' => $settings, 'success' => true, 'total' => $totalCount]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @param WebsiteSetting $item\n     *\n     * @return array\n     */\n    private function getWebsiteSettingForEditMode($item)\n    {\n        $resultItem = [\n            'id' => $item->getId(),\n            'name' => $item->getName(),\n            'language' => $item->getLanguage(),\n            'type' => $item->getType(),\n            'data' => null,\n            'siteId' => $item->getSiteId(),\n            'creationDate' => $item->getCreationDate(),\n            'modificationDate' => $item->getModificationDate(),\n        ];\n\n        switch ($item->getType()) {\n            case 'document':\n            case 'asset':\n            case 'object':\n                $element = $item->getData();\n                if ($element) {\n                    $resultItem['data'] = $element->getRealFullPath();\n                }\n\n                break;\n            default:\n                $resultItem['data'] = $item->getData();\n\n                break;\n        }\n\n        return $resultItem;\n    }\n\n    /**\n     * @Route(\"/get-available-algorithms\", name=\"pimcore_admin_settings_getavailablealgorithms\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableAlgorithmsAction(Request $request)\n    {\n        $options = [\n            [\n                'key' => 'password_hash',\n                'value' => 'password_hash',\n            ],\n        ];\n\n        $algorithms = hash_algos();\n        foreach ($algorithms as $algorithm) {\n            $options[] = [\n                'key' => $algorithm,\n                'value' => $algorithm,\n            ];\n        }\n\n        $result = ['data' => $options, 'success' => true, 'total' => count($options)];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * deleteViews\n     * delete views for localized fields when languages are removed to\n     * prevent mysql errors\n     *\n     * @param string $language\n     * @param string $dbName\n     */\n    protected function deleteViews($language, $dbName)\n    {\n        $db = \\Pimcore\\Db::get();\n        $views = $db->fetchAll('SHOW FULL TABLES IN ' . $db->quoteIdentifier($dbName) . \" WHERE TABLE_TYPE LIKE 'VIEW'\");\n\n        foreach ($views as $view) {\n            if (preg_match('/^object_localized_[0-9]+_' . $language . '$/', $view['Tables_in_' . $dbName])) {\n                $sql = 'DROP VIEW ' . $db->quoteIdentifier($view['Tables_in_' . $dbName]);\n                $db->query($sql);\n            }\n        }\n    }\n\n    /**\n     * @Route(\"/test-web2print\", name=\"pimcore_admin_settings_testweb2print\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function testWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $response = $this->render('@PimcoreAdmin/Admin/Settings/testWeb2print.html.twig');\n        $html = $response->getContent();\n\n        $adapter = \\Pimcore\\Web2Print\\Processor::getInstance();\n        $params = [];\n\n        if ($adapter instanceof \\Pimcore\\Web2Print\\Processor\\WkHtmlToPdf) {\n            $params['adapterConfig'] = '-O landscape';\n        } elseif ($adapter instanceof \\Pimcore\\Web2Print\\Processor\\PdfReactor) {\n            $params['adapterConfig'] = [\n                'javaScriptMode' => 0,\n                'addLinks' => true,\n                'appendLog' => true,\n                'enableDebugMode' => true,\n            ];\n        }\n\n        $responseOptions = [\n            'Content-Type' => 'application/pdf',\n        ];\n\n        $pdfData = $adapter->getPdfFromString($html, $params);\n\n        return new \\Symfony\\Component\\HttpFoundation\\Response(\n            $pdfData,\n            200,\n            $responseOptions\n\n        );\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/SettingsController.php"], "buggy_code_start_loc": [109], "buggy_code_end_loc": [109], "fixing_code_start_loc": [110], "fixing_code_end_loc": [116], "type": "CWE-434", "message": "Unrestricted Upload of File with Dangerous Type in Packagist pimcore/pimcore prior to 10.2.7.", "other": {"cve": {"id": "CVE-2022-0263", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-18T16:15:08.167", "lastModified": "2022-01-24T18:07:52.233", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unrestricted Upload of File with Dangerous Type in Packagist pimcore/pimcore prior to 10.2.7."}, {"lang": "es", "value": "Una Carga Irrestricta de Archivo de Tipo Peligroso en el Empaquetador pimcore/pimcore versiones anteriores a 10.2.7"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.2.7", "matchCriteriaId": "E3B95F1E-AC67-4B0F-9732-CD60CCD98B49"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/35d1853baf64d6a1d90fd8803e52439da53a3911", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/96506857-06bc-4c84-88b7-4f397715bcf6", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/35d1853baf64d6a1d90fd8803e52439da53a3911"}}