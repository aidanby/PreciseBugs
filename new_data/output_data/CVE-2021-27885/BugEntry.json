{"buggy_code": ["<?php\n/*\n * e107 website system\n *\n * Copyright (C) 2008-2009 e107 Inc (e107.org)\n * Released under the terms and conditions of the\n * GNU General Public License (http://www.gnu.org/licenses/gpl.txt)\n *\n * User settings modify\n *\n * $Source: /cvs_backup/e107_0.8/usersettings.php,v $\n * $Revision$\n * $Date$\n * $Author$\n *\n*/\n/*\nNotes:\nUses $udata initially, later curVal to hold current user data\nAdmin log events:\nUSET_01 - admin changed user data\n*/\n\n\nrequire_once ('class2.php');\n\n// TODO - Remove all the adminEdit stuff. \n\ndefine(\"US_DEBUG\",FALSE);\n//define('US_DEBUG', false);\n\n\nif (!USER)\n{\t// Must be logged in to change settings\n\te107::redirect();\n\texit();\n}\n\nif ((!ADMIN || !getperms(\"4\")) && e_QUERY && e_QUERY != \"update\" && substr(e_QUERY, 0, 4) !== 'del=')\n{\n\theader('location:'.e_BASE.'usersettings.php');\n\texit();\n}\n\ne107::includeLan(e_LANGUAGEDIR.e_LANGUAGE.'/lan_user.php');\t\t// Generic user-related language defines\ne107::includeLan(e_LANGUAGEDIR.e_LANGUAGE.'/lan_usersettings.php');\n\n$ue = e107::getUserExt(); // needed by shortcodes for now.\n\nrequire_once (e_HANDLER.'ren_help.php');\n// require_once (e_HANDLER.'user_handler.php');\nrequire_once(e_HANDLER.'validator_class.php');\n\n\n\nclass usersettings_front // Begin Usersettings rewrite.\n{\n\n\tprivate $template = array();\n\tprivate $sc = null;\n\n\n\t/**\n\t * usersettings_front constructor.\n\t */\n\tfunction __construct()\n\t{\n\n\t\tif(deftrue('BOOTSTRAP'))\n\t\t{\n\t\t\t$template = e107::getCoreTemplate('usersettings','', true, true); // always merge\n\n\t\t\t$USERSETTINGS_MESSAGE \t\t\t\t= \"{MESSAGE}\";\n\t\t\t$USERSETTINGS_MESSAGE_CAPTION \t\t= LAN_OK;\n\t\t\t$USERSETTINGS_EDIT_CAPTION \t\t\t= LAN_USET_39; \t// 'Update User Settings'\n\t\t\t$USERSETTINGS_EDIT\t\t\t\t\t= $template['edit'];\n\t\t\t$usersettings_shortcodes \t\t\t= e107::getScBatch('usersettings');\n\n\t\t\t$usersettings_shortcodes->wrapper('usersettings/edit');\n\n\t\t/*\te107::css('inline', \"\n\n\t\t\t\t.usersettings-form .col-sm-9 .checkboxes { margin-left:20px }\n\t\t\t\");*/\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$bcDefs = array(\n\t\t\t\t'LAN_418'   => 'LAN_USET_31',\n\t\t\t\t'LAN_7'     => 'LAN_USER_01',\n\t\t\t\t'LAN_8'     => 'LAN_USER_80',\n\t\t\t\t'LAN_9'     => 'LAN_USER_81',\n\t\t\t\t'LAN_10'    => 'LAN_USER_82',\n\t\t\t\t'LAN_112'   => 'LAN_USER_60',\n\t\t\t\t'LAN_113'   => 'LAN_USER_83',\n\t\t\t\t'LAN_114'   => 'LAN_USER_84',\n\t\t\t\t'LAN_120'   => 'LAN_USER_71', // Signature\n\t\t\t\t'LAN_152'   => 'LAN_USET_24',\n\t\t\t\t'LAN_153'   => 'LAN_USET_25',\n\t\t\t\t'LAN_154'   => 'LAN_USET_37',\n\t\t\t\t'LAN_308'   => 'LAN_USER_63',\n\t\t\t\t'LAN_401'   => 'LAN_USET_23',\n\t\t\t\t'LAN_404'   => 'LAN_USET_32',\n\t\t\t\t'LAN_414'   => 'LAN_USET_27',\n\t\t\t\t'LAN_415'   => 'LAN_USET_26',\n\t\t\t\t'LAN_420'   => 'LAN_USER_07', // Avatar\n\t\t\t\t'LAN_421'   => 'LAN_USET_33',\n\t\t\t\t'LAN_422'   => 'LAN_USET_34',\n\t\t\t\t'LAN_423'   => 'LAN_USET_35',\n\t\t\t\t'LAN_424'   => 'LAN_USET_36',\n\t\t\t\t'LAN_425'   => 'LAN_USER_06',\n\t\t\t\t'LAN_426'   => 'LAN_USET_28',\n\t\t\t\t'LAN_433'   => '',\n\t\t\t\t'LAN_434'   => '',\n\t\t\t\t'LAN_435'   => '',\n\t\t\t\t'LAN_122'   => 'UE_LAN_TIMEZONE',\n\t\t\t\t'LAN_CUSTOMTITLE'   => 'LAN_USER_04'\n\n\t\t\t);\n\n\n\t\t\te107::getLanguage()->bcDefs($bcDefs);\n\n\t\t\tglobal $sc_style;\n\t\t\t$REQUIRED_FIELD                     = '';\n\t\t\t$USER_EXTENDED_CAT                  = '';\n\t\t\t$USEREXTENDED_FIELD                 = '';\n\t\t\t$USERSETTINGS_MESSAGE \t\t\t\t= '';\n\t\t\t$USERSETTINGS_MESSAGE_CAPTION \t\t= '';\n\t\t\t$USERSETTINGS_EDIT_CAPTION \t\t\t= '';\n\t\t\t$USERSETTINGS_EDIT\t\t\t\t\t= '';\n\t\t\t$coreTemplatePath                   = e107::coreTemplatePath('usersettings');\n\t\t\tinclude_once($coreTemplatePath); //correct way to load a core template.\n\t\t\te107::scStyle($sc_style);\n\t\t\t$usersettings_shortcodes = e107::getScBatch('usersettings');\n\n\t\t\t$usersettings_shortcodes->legacyTemplate = array(\n\t\t\t\t'USER_EXTENDED_CAT' => $USER_EXTENDED_CAT,\n\t\t\t\t'USEREXTENDED_FIELD' => $USEREXTENDED_FIELD,\n\t\t\t\t\t'REQUIRED_FIELD' => $REQUIRED_FIELD\n\t\t\t);\n\n\t\t}\n\n\t\t$this->sc = $usersettings_shortcodes;\n\t\t$this->template = array(\n\t\t\t'message'           => $USERSETTINGS_MESSAGE,\n\t\t\t'message_caption'   => $USERSETTINGS_MESSAGE_CAPTION,\n\t\t\t'edit_caption'      => $USERSETTINGS_EDIT_CAPTION,\n\t\t\t'edit'              => $USERSETTINGS_EDIT,\n\n\t\t);\n\n\n\n\n\t\te107::js('footer-inline',\"\n\t\t\tfunction addtext_us(sc)\n\t\t\t{\n\t\t\t\tdocument.getElementById('dataform').image.value = sc;\n\t\t\t}\n\t\t\");\n\n\t}\n\n\t/**\n\t * @param $id\n\t * @return mixed\n\t */\n\tprivate function getTemplate($id)\n\t{\n\t\treturn $this->template[$id];\n\t}\n\t\n\t\n\t\n\tprivate function sendDeleteConfirmationEmail()\n\t{\n\t\t$tp = e107::getParser();\n\n\t\t$message = defset('LAN_USET_52', \"A confirmation email has been sent to [x]. Please click the link in the email to permanently delete your account.\"); // Load LAN with fall-back.\n\t\t$subject = defset(\"LAN_USET_53\", \"Account Removal Confirmation\"); // Load LAN with fall-back.\n\t\t$caption = defset('LAN_USET_54', \"Confirmation Email Sent\"); // Load LAN with fall-back.\n\n\t\t$hash = e107::getUserSession()->generateRandomString(\"#**************************************************************************#\");\n\n\t\t$link = SITEURL.\"usersettings.php?del=\".$hash; // Security measure - user must be logged in to utilize the link.\n\n\t\t$text = LAN_USET_55; // \"Please click the following link to complete the deletion of your account.\";\n\t\t$text .= \"<br /><br />\";\n\t\t$text .= \"<a href='\".$link.\"' target='_blank'>\".$link.\"</a>\";\n\n\n\t\t$eml = array(\n\t\t\t'subject' \t\t=> $subject,\n\t\t\t'html'\t\t\t=> true,\n\t\t\t'priority'      => 1,\n\t\t\t'template'\t\t=> 'default',\n\t\t\t'body'\t\t\t=> $text,\n\t\t);\n\n\t\tif(e107::getEmail()->sendEmail(USEREMAIL,USERNAME, $eml))\n\t\t{\n\t\t\t$update = array(\n\t\t\t\t'user_sess' => $hash,\n\t\t\t\t'WHERE' => 'user_id = '.USERID\n\t\t\t);\n\n\t\t\te107::getDb()->update('user',$update);\n\n\t\t\t$alert = $tp->lanVars($message, USEREMAIL);\n\t\t\treturn e107::getMessage()->setTitle($caption, E_MESSAGE_INFO)->addInfo($alert)->render();\n\n\t\t}\n\n\t\t//todo Email Failure message.\n\t\treturn null;\n\n\n\n\t}\n\n/*\n\tprivate function processUserDeleteFields($vars)\n\t{\n\t\t$qry = array();\n\n\t\tforeach($vars as $field => $var)\n\t\t{\n\n\n\n\t\t}\n\n\t\treturn $qry;\n\t}*/\n\n\n\tprivate function processUserDelete($hash)\n\t{\n\t\tif(!e107::getDb()->select('user', '*',\"user_id = \".USERID.\" AND user_sess='\".$hash.\"' LIMIT 1\")) // user must be logged in AND have correct hash.\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$arr = e107::getAddonConfig('e_user', '', 'delete', USERID);\n\n\t\t$sql = e107::getDb();\n\n\t\tforeach($arr as $plugin)\n\t\t{\n\t\t\tforeach($plugin as $table => $query)\n\t\t\t{\n\t\t\t\t$mode = $query['MODE'];\n\t\t\t\tunset($query['MODE']);\n\n\t\t\t\t// $query = $this->processUserDeleteFields($query); //optional pre-processing..\n\n\t\t\t\tif($mode === 'update')\n\t\t\t\t{\n\t\t\t\t\t//echo \"<h3>UPDATE \".$table.\"</h3>\";\n\t\t\t\t//\tprint_a($query);\n\t\t\t\t\t$sql->update($table, $query); // todo check query ran successfully.\n\t\t\t\t}\n\t\t\t\telseif($mode === 'delete')\n\t\t\t\t{\n\t\t\t\t\t//echo \"<h3>DELETE \".$table.\"</h3>\";\n\t\t\t\t\t//print_a($query);\n\t\t\t\t\t$sql->delete($table, $query['WHERE']); //  todo check query ran successfully.\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\t$alert = defset('LAN_USET_56', \"Your account has been successfully deleted.\");\n\n\t\treturn e107::getMessage()->addSuccess($alert)->render();\n\n\t}\n\n\t/**\n\t * @return bool\n\t */\n\tpublic function init()\n\t{\n\t\t$pref               = e107::getPref();\n\t\t$tp                 = e107::getParser();\n\t\t$ue                 = e107::getUserExt();\n\t\t$mes                = e107::getMessage();\n\t\t$sql                = e107::getDb();\n\t\t$ns                 = e107::getRender();\n\t\t$userMethods        = e107::getUserSession();\n\n\t\t$photo_to_delete    = '';\n\t\t$avatar_to_delete   = '';\n\t//\t$ue_fields          = '';\n\t\t$caption            = '';\n\t\t$promptPassword     = false;\n\t\t$error              = FALSE;\n\t\t$extraErrors        = array();\n\t\t$eufVals            = array();\n\t\t$savePassword       = '';\n\t\t$changedUserData    = array();\n\t\t$udata              = array();\n\t\t$allData            = array();\n\t\t$message            = '';\n\t\t$changedEUFData     = array();\n\n\t\t$inp                = USERID;\t\t\t// Initially assume that user is modifying their own data.\n\t\t$_uid               = false;\t\t\t// FALSE if user modifying their own data; otherwise ID of data being modified\n\t\t$adminEdit          = false; // @deprecated\t\t// FALSE if editing own data. TRUE if admin edit\n\n\n\t\tif(!empty($_POST['delete_account'])) // button clicked.\n\t\t{\n\t\t\techo $this->sendDeleteConfirmationEmail();\n\t\t}\n\n\t\tif(!empty($_GET['del'])) // delete account via confirmation email link.\n\t\t{\n\n\t\t\techo $this->processUserDelete($_GET['del']);\n\t\t\t//e107::getSession()->destroy();\n\t\t\te107::getUser()->logout();\n\t\t\treturn null;\n\t\t}\n\n\t\t/* todo subject of removal */\n\t\tif(is_numeric(e_QUERY))\n\t\t{\t// Trying to edit specific user record\n\t\t\tif (ADMIN)\n\t\t\t{\t// Admin edit of specific record\n\t\t\t\t/*\n\t\t\t\t$_usersettings_matches = Array\n\t\t\t\t(\n\t\t\t\t    [0] => /e107/usersettings.php?# OR /e107/edit/user/#\n\t\t\t\t    [1] => e107\n\t\t\t\t    [2] => usersettings.php OR edit/user\n\t\t\t\t    [3] => ? OR /\n\t\t\t\t    [4] => #\n\t\t\t\t)\n\t\t\t\t*/\n\t\t\t\t$inp = intval(e_QUERY);\n\n\t\t\t//\t$usersettings_form_action = strstr('?', $_usersettings_matches[3]) ? e_SELF.'?'.e_QUERY : e_SELF;\n\n\t\t\t\t$_uid = $inp;\n\t\t\t\t$info = e107::user($inp);\n\t\t\t\t\t\t//Only site admin is able to change setting for other admins\n\t\t\t\tif(!is_array($info) || ($info['user_admin'] == 1 && (!defined('ADMINPERMS') || ADMINPERMS !== '0')) || ((!defined('ADMINPERMS') || ADMINPERMS !== '0') && !getperms('4')))\n\t\t\t\t{\n\t\t\t\t\te107::redirect();\n\t\t\t\t\texit();\n\t\t\t\t}\n\t\t\t\t$adminEdit = TRUE;\t\t// Flag to indicate admin edit\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Non admin attempting to edit another user's ID\n\t\t\t\te107::redirect();\n\t\t\t\texit();\n\t\t\t}\n\n\t\t}\n\n\n\n\t\t// Save user settings (changes only)\n\t\t//-----------------------------------\n\n\t\tif (isset($_POST['updatesettings']) || isset($_POST['SaveValidatedInfo']))\n\t\t{\n\t\t//\t$udata = e107::user($inp);\t//@deprecated\t\t\t// Get all the existing user data, including any extended fields\n\n\t\t\t$udata = e107::user($inp); // Get all the existing user data, including any extended fields\n\t\t\t$udata['user_classlist'] = $userMethods->addCommonClasses($udata, FALSE);\n\t\t}\n\n\n\t\tif (!empty($_POST['updatesettings']))\n\t\t{\n\t\t\t// Do not filter these values (saving)\n\t\t\t$ueVals   \t= $_POST['ue'];\n\t\t\t$passtemp1 \t= $_POST['password1'];\n\t\t\t$passtemp2  = $_POST['password2'];\n\t\t\t\n\t\t\t// Filter the others\n\t\t\t$_POST = e107::getParser()->filter($_POST);\n\t\t\t\n\t\t\t// Pass the original values back (restoring)\n\t\t\t$_POST['ue'] \t\t= $ueVals;\n\t\t\t$_POST['password1']\t= $passtemp1;\n\t\t\t$_POST['password2']\t= $passtemp2; \n\n\t\t\t// Unset temporary vars\n\t\t\tunset($ueVals);\n\t\t\tunset($passtemp1);\n\t\t\tunset($passtemp2);\n\n\t\t\tif (!vartrue($pref['auth_method']))\n\t\t\t{\n\t\t\t\t$pref['auth_method'] = 'e107';\n\t\t\t}\n\n\t\t\tif ($pref['auth_method'] != 'e107')\n\t\t\t{\n\t\t\t\t$_POST['password1'] = '';\n\t\t\t\t$_POST['password2'] = '';\n\t\t\t}\n\n\t\t\te107::getMessage()->addDebug(\"_FILES\".print_a($_FILES,true));\n\t\t\t// Uploaded avatar and/or photo\n\t\t\tif (varset($_FILES['file_userfile']['error']['avatar'], false) === UPLOAD_ERR_OK || varset($_FILES['file_userfile']['error']['photo'], false) == UPLOAD_ERR_OK)\n\t\t\t{\n\t\t\t\te107::getMessage()->addDebug(\"Uploaded File Detected\");\n\t\t\t\trequire_once (e_HANDLER.'resize_handler.php');\n\n\t\t\t\t$opts = array('overwrite' => TRUE, 'file_mask'=>'jpg,png,gif,jpeg', 'max_file_count' => 2);\n\n\t\t\t\tif ($uploaded = e107::getFile()->getUploaded(e_AVATAR_UPLOAD, 'prefix+ap_'.$tp->leadingZeros($udata['user_id'],7).'_', $opts))\n\t\t\t\t{\n\n\t\t\t\t\te107::getMessage()->addDebug(\"Uploaded: \".print_a($uploaded,true));\n\t\t\t\t\tforeach ($uploaded as $upload)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($upload['name'] && ($upload['index'] == 'avatar') && $pref['avatar_upload'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// avatar uploaded - give it a reference which identifies it as server-stored\n\t\t\t\t\t\t\t// Vetting routines will do resizing and so on\n\t\t\t\t\t\t\t$_POST['image'] = '-upload-'.$upload['name'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif ($upload['name'] && ($upload['index'] == 'photo') && $pref['photo_upload'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// photograph uploaded\n\t\t\t\t\t\t\t$_POST['user_sess'] = '-upload-'.$upload['name'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif (isset($upload['error']) && isset($upload['message']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$extraErrors[] = $upload['message'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t}\n\n\n\t\t\t// Now validate everything - just check everything that's been entered\n\t\t\t$allData = validatorClass::validateFields($_POST,$userMethods->userVettingInfo, TRUE);\t\t// Do basic validation\n\t\t\tvalidatorClass::dbValidateArray($allData, $userMethods->userVettingInfo, 'user', $inp);\t\t// Do basic DB-related checks\n\t\t\t$userMethods->userValidation($allData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Do user-specific DB checks\n\n\t\t\t$savePassword = '';\n\n\t\t\tif (($_POST['password1'] != '') || ($_POST['password2'] != ''))\n\t\t\t{\t// Need to validate new password here\n\t\t\t\tif (!isset($allData['errors']['user_password']))\n\t\t\t\t{\t// No errors in password yet - may be valid\n\t\t\t\t\t$savePassword = $allData['data']['user_password'];\n\t\t\t\t\tunset($allData['data']['user_password']);\t\t// Delete the password value in the output array\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunset($allData['errors']['user_password']);\t\t// Delete the error which an empty password field generates\n\t\t\t}\n\n\t\t\tunset($_POST['password1']);\n\t\t\tunset($_POST['password2']);\n\n\n\t\t\t$changedUserData = validatorClass::findChanges($allData['data'], $udata,FALSE);\n\n\n\t\t\te107::getMessage()->addDebug(\"<h5>Existing User Info</h5>\".print_a($udata,true));\n\t\t\te107::getMessage()->addDebug('<h5>$allData</h5>'.print_a($allData['data'],true));\n\n\t\t\te107::getMessage()->addDebug(\"<h5>Posted Changes</h5>\".print_a($changedUserData,true));\n\n\t\t\t// Login Name checks - only admin can change login name\n\t\t\tif (isset($changedUserData['user_loginname']))\n\t\t\t{\n\t\t\t\tif (ADMIN && getperms('4'))\n\t\t\t\t{\n\t\t\t\t\tif (!check_class($pref['displayname_class'], $udata['user_classlist'], $adminEdit))\n\t\t\t\t\t{\t// Display name and login name must be the same\n\t\t\t\t\t\t$changedUserData['user_name'] = $changedUserData['user_loginname'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tunset($changedUserData['user_loginname']);\t\t// Just doing this is probably being kind!\n\t\t\t\t\t$alldata['errors']['user_loginname'] = ERR_GENERIC;\n\t\t\t\t\t$alldata['errortext']['user_loginname'] = LAN_USER_85;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// See if user just wants to delete existing photo\n\t\t\tif (isset($_POST['user_delete_photo']))\n\t\t\t{\n\t\t\t\t$photo_to_delete = $udata['user_sess'];\n\t\t\t\t$changedUserData['user_sess'] = '';\n\t\t\t}\n\n\n\n\t\t\tif ($udata['user_image'] && !isset($changedUserData['user_image']))\n\t\t\t{\n\t\t\t\t// $changedUserData['user_image'] = ''; // FIXME Deletes the user's image when no changes made.\n\t\t\t\t$avatar_to_delete = str_replace('-upload-', '', $udata['user_image']);\n\t\t\t}\n\n\t\t    // Validate Extended User Fields.\n\n\n\n\t\t\tif (isset($_POST['ue']))\n\t\t\t{\n\t\t\t\t$eufVals = $ue->sanitizeAll($_POST['ue']);\n\t\t\t\t$eufVals = $ue->userExtendedValidateAll($eufVals, varset($_POST['hide'],TRUE));\t\t// Validate the extended user fields\n\t\t\t\t$changedEUFData['data'] = validatorClass::findChanges($eufVals['data'], $udata,FALSE);\n\t\t\t}\n\n\t\t\te107::getMessage()->addDebug(\"<h4>Extended Data - post validation</h4>\".print_a($changedEUFData['data'],true));\n\n\n\n\t\t\t// Determine whether we have an error\n\t\t\t$error = ((isset($allData['errors']) && count($allData['errors'])) || (isset($eufVals['errors']) && count($eufVals['errors'])) || count($extraErrors));\n\n\n\t\t\t// Update Userclass - only if its the user changing their own data (admins can do it another way)\n\t\t\tif (isset($allData['data']['user_class']))\n\t\t\t{\n\t\t\t\tunset($changedUserData['user_class']);\t\t// We always recalculate this\n\t\t\t\tif (FALSE === $adminEdit) // Make sure admin can't edit another's user classes\n\t\t\t\t{\n\n\t\t\t\t\t$e_userclass = e107::getUserClass();\n\t\t\t\t\t$ucList = $e_userclass->get_editable_classes(USERCLASS_LIST,TRUE);\t // List of classes which this user can edit\n\t\t\t\t\tif (count($ucList))\n\t\t\t\t\t{\n\t\t\t\t\t\t$nid = $e_userclass->mergeClassLists($udata['user_class'], $ucList, $allData['data']['user_class'], TRUE);\n\t\t\t\t\t\t$nid = $e_userclass->stripFixedClasses($nid);\n\t\t\t\t\t\t$nid = implode(',',$nid);\n\t\t\t\t\t\t//\techo \"Userclass data - new: {$nid}, old: {$udata['user_baseclasslist']}, editable: \".implode(',',$ucList).\", entered: {$allData['data']['user_class']}<br />\";\n\t\t\t\t\t\tif ($nid != $udata['user_baseclasslist'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (US_DEBUG)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\te107::getLog()->addEvent(10, debug_backtrace(), \"DEBUG\", \"Usersettings test\", \"Write back classes; old list: {$udata['user_class']}; new list: \".$nid, false, LOG_TO_ROLLING);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$changedUserData['user_class'] = $nid;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\te107::getMessage()->addDebug(\"<h4>Processed Posted Changes</h4>\".print_a($changedUserData,true));\n\n\t\t\t// All key fields validated here\n\t\t\t// -----------------------------\n\t\t\t// $inp - UID of user whose data is being changed (may not be the currently logged in user)\n\t\t\t$inp = intval($inp);\n\t\t\tif (!$error && count($changedUserData) || count($changedEUFData))\n\t\t\t{\n\t\t\t\t$_POST['user_id'] = $inp;\n\t\t\t\t$ret =e107::getEvent()->trigger('preuserset', $_POST);\n\n\t\t\t\tif ($ret == '')\n\t\t\t\t{\n\n\t\t\t\t// Only admins can update login name - do this just in case one of the event triggers has mucked it about\n\t\t\t\t\tif (!(ADMIN && getperms('4')))\n\t\t\t\t\t{\n\t\t\t\t\t\tunset($changedUserData['user_loginname']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t// Invalid data - from hooked in trigger event\n\t\t\t\t\t$message = \"<div style='text-align:center'>\".$ret.\"</div>\";\n\t\t\t\t\t$caption = LAN_OK;\n\t\t\t\t\t$error = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}  // End - update setttings\n\t\telseif(isset($_POST['SaveValidatedInfo'])) // Next bit only valid if user editing their own data\n\t\t{\n/*\t\t\tif(!empty($_POST['updated_data']) && !empty($_POST['currentpassword']) && !empty($_POST['updated_key']))\n\t\t\t{\t// Got some data confirmed with password entry*/\n\t\t\t\t$new_data = base64_decode($_POST['updated_data']);\n\n\t\t\t\t // Should only happen if someone's fooling around\n\t\t\t\tif ($this->getValidationKey($new_data) !== $_POST['updated_key'] || ($userMethods->hasReadonlyField($new_data) !==false))\n\t\t\t\t{\n\t\t\t\t\techo LAN_USET_42.'<br />';\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (isset($_POST['updated_extended']))\n\t\t\t\t{\n\t\t\t\t\t$new_extended = base64_decode($_POST['updated_extended']);\n\n\t\t\t\t\tif ($this->getValidationKey($new_extended) !== $_POST['extended_key'])\n\t\t\t\t\t{  // Should only happen if someone's fooling around\n\t\t\t\t\t\techo LAN_USET_42.'<br />';\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($userMethods->CheckPassword($_POST['currentpassword'], $udata['user_loginname'], $udata['user_password']) === false) // Use old data to validate\n\t\t\t\t{  // Invalid password\n\n\t\t\t\t\t$mes->addError(\"<p>\".LAN_INCORRECT_PASSWORD.\"</p>\");\n\t\t\t\t\t$mes->addError(\"<a class='btn btn-danger' href='\".e107::getUrl()->create('user/myprofile/edit').\"'>\".LAN_BACK.\"</a>\");\n\n\t\t\t\t\techo $mes->render();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\n\t\t\t\t$changedUserData = e107::unserialize($new_data);\n\t\t\t\t$changedUserData = e107::getParser()->filter($changedUserData, 'str');\n\n\t\t\t\t$savePassword = $_POST['currentpassword'];\n\n\t\t\t\tif(!empty($new_extended))\n\t\t\t\t{\n\t\t\t\t\t$changedEUFData = e107::unserialize($new_extended);\n\t\t\t\t\t$changedEUFData = e107::getParser()->filter($changedEUFData, 'str');\n\t\t\t\t}\n\n\t\t\t\tunset($new_data);\n\t\t\t\tunset($new_extended);\n\n\t\t\t\tif (isset($changedUserData['user_sess']))\n\t\t\t\t{\n\t\t\t\t\t$photo_to_delete = $udata['user_sess'];\n\t\t\t\t}\n\t\t\t\tif (isset($changedUserData['user_image']))\n\t\t\t\t{\n\t\t\t\t\t$avatar_to_delete = $udata['user_image'];\n\t\t\t\t}\n\t\t//\t}\n\t\t}\n\t\tunset($_POST['updatesettings']);\n\t\tunset($_POST['SaveValidatedInfo']);\n\n\n\t\t// At this point we know the error status.\n\t\t// $changedUserData has an array of core changed data, except password, which is in $savePassword if changed (or entered as confirmation).\n\t\t// $eufData has extended user field data\n\t\t// $changedEUFData has any changes in extended user field data\n\t\t$dataToSave = !$error && (isset($changedUserData) && count($changedUserData)) || (isset($changedEUFData['data']) && count($changedEUFData['data'])) || $savePassword;\n\n\t\tif ($dataToSave)\n\t\t{\n\t\t\t// Sort out password hashes\n\t\t\tif ($savePassword)\n\t\t\t{\n\t\t\t\t$loginname = $changedUserData['user_loginname'] ? $changedUserData['user_loginname'] : $udata['user_loginname'];\n\t\t\t\t$email = (isset($changedUserData['user_email']) && $changedUserData['user_email']) ? $changedUserData['user_email'] : $udata['user_email'];\n\t\t\t\t$changedUserData['user_password'] = $sql->escape($userMethods->HashPassword($savePassword, $loginname), false);\n\t\t\t\tif (varset($pref['allowEmailLogin'], FALSE))\n\t\t\t\t{\n\t\t\t\t\t$user_prefs = e107::unserialize($udata['user_prefs']);\n\t\t\t\t\t$user_prefs['email_password'] = $userMethods->HashPassword($savePassword, $email);\n\t\t\t\t\t$changedUserData['user_prefs'] = e107::serialize($user_prefs);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ((isset($changedUserData['user_loginname']) && $userMethods->isPasswordRequired('user_loginname'))\n\t\t\t\t\t|| (isset($changedUserData['user_email']) && $userMethods->isPasswordRequired('user_email')))\n\t\t\t\t{\n\t\t\t\t\tif ($_uid && ADMIN)\n\t\t\t\t\t{\t// Admin is changing it\n\t\t\t\t\t\t$extraErrors[] = LAN_USET_20;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\t// User is changing their own info\n\t\t\t\t\t\t$promptPassword = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($dataToSave && !$promptPassword)\n\t\t{\n\t\t\t$inp = intval($inp);\n\n\n\t\t\t// We can update the basic user record now - can just update fields from $changedUserData\n\t\t\tif (US_DEBUG) { e107::getLog()->addEvent(10, debug_backtrace(), \"DEBUG\", \"Usersettings test\", \"Changed data:<br /> \".var_export($changedUserData, true), false, LOG_TO_ROLLING); }\n\t\t\tif (isset($changedUserData) && count($changedUserData))\n\t\t\t{\n\t\t\t\t$changedData['data'] = $changedUserData;\n\t\t\t\t$changedData['WHERE'] = 'user_id='.$inp;\n\t\t\t\tvalidatorClass::addFieldTypes($userMethods->userVettingInfo,$changedData);\n\n\t\t\t\t// print_a($changedData);\n\t\t\t\tif (FALSE === $sql->update('user', $changedData))\n\t\t\t\t{\n\t\t\t\t\t$extraErrors[] = LAN_USET_43;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$message = LAN_USET_41;\n\t\t\t\t\tif (isset($changedUserData['user_password']) && !$adminEdit)\n\t\t\t\t\t{\n\t\t\t\t\t\t//\techo \"Make new cookie<br />\";\n\t\t\t\t\t\t$userMethods->makeUserCookie(array('user_id' => $udata['user_id'],'user_password' => $changedUserData['user_password']), FALSE);\t\t// Can't handle autologin ATM\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// Save extended field values\n\t\t\tif (!empty($changedEUFData['data']))\n\t\t\t{\n\n\t\t\t\t$ue->addFieldTypes($changedEUFData);\t\t\t\t// Add in the data types for storage\n\n\t\t\t\t$changedEUFData['_DUPLICATE_KEY_UPDATE'] = true; // update record if key found, otherwise INSERT.\n\t\t\t\t$changedEUFData['data']['user_extended_id'] = $inp;\n\n\t\t\t\tif (false === $sql->insert('user_extended', $changedEUFData))\n\t\t\t\t{\n\t\t\t\t\t$message .= '<br />Error updating EUF';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t// Now see if we need to log anything. First check the options and class membership\n\t\t\t// (Normally we would leave logging decision to the log class. But this one's a bit more complicated)\n\t\t\t$user_logging_opts = e107::getConfig()->get('user_audit_opts');\n\t\t\t$do_log = array();\n\t\t\t$log_action = '';\n\t\t\tif ($_uid)\n\t\t\t{\t\t// Its an admin changing someone elses data - make an admin log entry here\n\t\t\t\te107::getLog()->add('USET_01', \"UID: {$udata['user_id']}. UName: {$udata['user_name']}\", E_LOG_INFORMATIVE);\n\t\t\t\t// Check against the class of the target user, not the admin!\n\t\t\t\tif (!check_class(varset($pref['user_audit_class'], ''), $udata['user_class'])) { $user_logging_opts = array(); }\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!check_class(varset($pref['user_audit_class'], ''))) { $user_logging_opts = array(); }\n\t\t\t}\n\n\t\t\t$triggerData = array();\n\t\t\tif (count($changedUserData))\n\t\t\t{\n\t\t\t\t$triggerData = $changedUserData;\t\t// Create record for changed user data trigger\n\t\t\t\t$triggerData['user_id'] = $udata['user_id'];\n\t\t\t\t$triggerData['_CHANGED_BY_UID'] = USERID;\t\t// May be admin changing data\n\t\t\t\t$triggerData['_CHANGED_BY_UNAME'] = USERNAME;\n\t\t\t\tif (!isset($triggerData['user_name'])) { $triggerData['user_name'] = $udata['user_name']; }\n\t\t\t}\n\n\t\t\t// Now log changes if required\n\t\t\tif (count($user_logging_opts))\n\t\t\t{\n\t\t\t\t// Start with any specific fields we're changing\n\t\t\t\tif (isset($changedUserData['user_name']))\n\t\t\t\t{\n\t\t\t\t\tif (isset($user_logging_opts[USER_AUDIT_NEW_DN]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$do_log['user_name'] = $changedUserData['user_name'];\n\t\t\t\t\t\t$log_action = USER_AUDIT_NEW_DN;\n\t\t\t\t\t}\n\t\t\t\t\tunset($changedUserData['user_name']);\n\t\t\t\t}\n\n\t\t\t\tif (isset($changedUserData['user_password']))\n\t\t\t\t{\n\t\t\t\t\tif (isset($user_logging_opts[USER_AUDIT_NEW_PW]))\n\t\t\t\t\t{\t// Password has already been changed to a hashed value, so OK to leave the data\n\t\t\t\t\t\t$do_log['user_password'] = $changedUserData['user_password'];\n\t\t\t\t\t\t$log_action = USER_AUDIT_NEW_PW;\n\t\t\t\t\t}\n\t\t\t\t\tunset($changedUserData['user_password']);\n\t\t\t\t}\n\n\t\t\t\tif (isset($changedUserData['user_email']))\n\t\t\t\t{\n\t\t\t\t\tif (isset($user_logging_opts[USER_AUDIT_NEW_EML]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$do_log['user_email'] = $changedUserData['user_email'];\n\t\t\t\t\t\t$log_action = USER_AUDIT_NEW_EML;\n\t\t\t\t\t}\n\t\t\t\t\tunset($changedUserData['user_email']);\n\t\t\t\t}\n\n\t\t\t\tif (count($changedUserData) && isset($user_logging_opts[USER_AUDIT_NEW_SET]))\n\t\t\t\t{\n\t\t\t\t\t$do_log = array_merge($do_log, $changedUserData);\n\t\t\t\t\t$log_action = USER_AUDIT_NEW_SET;\n\t\t\t\t}\n\t\t\t\tif (count($do_log))\n\t\t\t\t{  // Got some changes to audit\n\t\t\t\t\t//\t\t\techo \"Adding to audit log<br />\";\n\t\t\t\t\tif ($_uid)\n\t\t\t\t\t{\n\t\t\t\t\t\t$log_action = USER_AUDIT_ADMIN;\t\t\t\t\t\t// If an admin did the mod, different heading\n\t\t\t\t\t\t// Embed a message saying who changed the data\n\t\t\t\t\t\t$changedUserData['message'] = str_replace(array('[x]', '[y]'), array(USERID, USERNAME), LAN_USET_18);\n\t\t\t\t\t\te107::getLog()->user_audit($log_action, $do_log, $udata['user_id'], $udata['user_loginname']);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (count($do_log) > 1) { $log_action = USER_AUDIT_NEW_SET; } // Log multiple entries to one record\n\t\t\t\t\t\te107::getLog()->user_audit($log_action, $do_log);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t// End of audit logging\n\n\n\t\t\t// Now tidy up\n\t\t\tif ($photo_to_delete)\n\t\t\t{\t// Photo may be a flat file, or in the database\n\t\t\t\t$this->deleteFile($photo_to_delete);\n\t\t\t}\n\t\t\tif ($avatar_to_delete)\n\t\t\t{\t// Avatar may be a flat file, or in the database\n\t\t\t\t$this->deleteFile($avatar_to_delete);\n\t\t\t}\n\n\t\t\t\t// If user has changed display name, update the record in the online table\n\t\t\tif (isset($changedUserData['user_name']) && !$_uid)\n\t\t\t{\n\t\t\t\t$sql->update('online', \"online_user_id = '\".USERID.\".\".$changedUserData['user_name'].\"' WHERE online_user_id = '\".USERID.\".\".USERNAME.\"'\");\n\t\t\t}\n\n\n\n\n\t\t\te107::getEvent()->trigger('postuserset', $_POST);\n\t\t\tif (count($triggerData))\n\t\t\t{\n\t\t\t\te107::getEvent()->trigger('userdatachanged', $triggerData);\n\t\t\t\te107::getEvent()->trigger('user_profile_edit', $triggerData);\n\t\t\t}\n\n\t\t\tif (e_QUERY == 'update')\n\t\t\t{\n\t\t\t\te107::redirect();\n\t\t\t}\n\n\t\t\tif($adminEdit && $message)\n\t\t\t{\n\t\t\t\t$mes->addSuccess($message);\n\t\t\t}\n\n\n\t\t\t$USERSETTINGS_MESSAGE =$this->getTemplate('message');\n\t\t\t$USERSETTINGS_MESSAGE_CAPTION = $this->getTemplate('message_caption');\n\n\t\t\tif(isset($USERSETTINGS_MESSAGE))\n\t\t\t{\n\t\t\t\t$message = str_replace(\"{MESSAGE}\",$message,$USERSETTINGS_MESSAGE);\n\t\t\t}\n\t\t\telseif(!deftrue('BOOTSTRAP')) // backwards compatible\n\t\t\t{\n\t\t\t\t$message = \"<div style='text-align:center'>\".$message.'</div>';\n\n\t\t\t}\n\n\t\t\t$caption = (isset($USERSETTINGS_MESSAGE_CAPTION)) ? $USERSETTINGS_MESSAGE_CAPTION : LAN_OK;\n\n\t\t}\t// End - if (!$error)...\n\n\n\t\tif (!$error && !$promptPassword)\n\t\t{\n\t\t\tif(isset($_POST) && vartrue($changedUserData['user_name']))\n\t\t\t{\n\t\t\t\t$redirect = e107::getRedirect();\n\t\t\t\t$url = e107::getUrl();\n\t\t\t\t$to = $_uid ? $url->create('user/profile/edit', array('id' => $_uid, 'name' => $changedUserData['user_name'])) : $url->create('user/myprofile/edit');\n\t\t\t\tif($message) e107::getMessage()->addSuccess($message, 'default', true);\n\t\t\t\t$redirect->redirect($to);\n\t\t\t}\n\t\t\tunset($_POST);\n\t\t}\n\n\n\t\tif ($promptPassword) // User has to enter password to validate data\n\t\t{\n\t\t\t$this->renderPasswordForm($changedUserData,$changedEUFData);\n\t\t\treturn false;\n\t\t}\n\n\n\n\t\tif ($error)\n\t\t{\n\t\t\t$message = $this->compileErrors($extraErrors, $allData, $eufVals);\n\n\t\t//\tif(!empty($message))\n\t\t\t{\n\t\t\t\tif(deftrue('BOOTSTRAP'))\n\t\t\t\t{\n\t\t\t\t\techo e107::getMessage()->addError($message)->render();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$ns->tablerender($caption, $message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telseif($dataToSave === true) // --- User data has been updated here if appropriate ---\n\t\t{\n\n\t\t\t$testSessionMessage = e107::getMessage()->get(E_MESSAGE_SUCCESS, 'default', true); // only success in the session\n\n\t\t\tif($testSessionMessage) $message = implode('<br />', $testSessionMessage); // we got raw message - array\n\n\t\t\tif(empty($message))\n\t\t\t{\n\t\t\t\t$message = LAN_USET_41; // probably only extended fields updated.\n\t\t\t}\n\n \t\t\tif(deftrue('BOOTSTRAP'))\n\t\t\t{\n\t\t\t\techo e107::getMessage()->addSuccess($message)->render();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ns->tablerender($caption, $message);\n\t\t\t}\n\n\t\t}\n\n\n\n\t\t$this->renderForm($changedUserData);\n\n\t\treturn false;\n\t}\n\n\n\t/**\n\t * @param $extraErrors\n\t * @param $allData\n\t * @param $eufVals\n\t * @return string\n\t */\n\tprivate function compileErrors($extraErrors, $allData, $eufVals)\n\t{\n\t\t$temp = array();\n\t\t$userMethods = e107::getUserSession();\n\n\t\tif (count($extraErrors))\n\t\t{\n\t\t\t$temp[] = implode('<br />', $extraErrors);\n\t\t}\n\n\t\tif (count($allData['errors']))\n\t\t{\n\t\t\t$temp[] = validatorClass::makeErrorList($allData,'USER_ERR_','%n - %x - %t: %v', '<br />', $userMethods->userVettingInfo);\n\t\t}\n\n\t\tif (vartrue($eufVals['errors']))\n\t\t{\n\t\t\t$temp[] = '<br />'.validatorClass::makeErrorList($eufVals,'USER_ERR_','%n - %x - %t: %v', '<br />', NULL);\n\t\t}\n\n\t\treturn implode('<br />', $temp);\n\n\n\t}\n\n\n\t/**\n\t * @param $string\n\t * @return string\n\t */\n\tprivate function getValidationKey($string)\n\t{\n\t\treturn crypt($string, e_TOKEN);\n\t}\n\n\n\t/**\n\t * @param $changedUserData\n\t * @param $changedEUFData\n\t */\n\tprivate function renderPasswordForm($changedUserData, $changedEUFData )\n\t{\n\t\t$ns                 = e107::getRender();\n\t\t$updated_data       = e107::serialize($changedUserData,'json');\n\t\t$validation_key     = $this->getValidationKey($updated_data);\n\t\t$updated_data       = base64_encode($updated_data);\n\t\t$updated_extended   = e107::serialize($changedEUFData, 'json');\n\t\t$extended_key       = $this->getValidationKey($updated_extended);\n\t\t$updated_extended   = base64_encode($updated_extended);\n\n\t\t$formTarget = e107::getUrl()->create('user/myprofile/edit');\n\n\t\t$text = \"<form method='post' action='\".$formTarget.\"'>\n\t\t\t<table><tr><td>\";\n\n\t\t\t\tforeach ($_POST as $k => $v)\n\t\t\t\t{\n\t\t\t\t\tif (is_array($v))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($v as $sk => $sv)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$text .= \"<input type='hidden' name='{$k}[{$sk}]' value='{$sv}' />\\n\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$text .= \"<input type='hidden' name='{$k}' value='{$v}' />\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$text .= LAN_USET_21.\"</td></tr>\n\t\t\t\t<tr><td>&nbsp;</td></tr>\n\t\t\t\t<tr><td>\n\n\t\t\t\t<input type='password' class='form-control' name='currentpassword' value='' size='30' />\";\n\n\t\t\t\t$text .= \"\n\t\t\t\t<input type='hidden' name='updated_data' value='{$updated_data}' />\n\t\t\t\t<input type='hidden' name='updated_key' value='{$validation_key}' />\n\t\t\t\t<input type='hidden' name='updated_extended' value='{$updated_extended}' />\n\t\t\t\t<input type='hidden' name='extended_key' value='{$extended_key}' />\n\t\t\t\t</td></tr>\n\t\t\t\t<tr><td>&nbsp;</td></tr>\n\t\t\t\t<tr><td style='text-align:center'>\n\t\t\t\t\".e107::getForm()->button('SaveValidatedInfo',1, 'submit', LAN_ENTER).\"\n\t\t\t\t</td></tr>\n\t\t\t</table>\n\t\t\t</form>\";\n\n\n\n\n\t\t\t$ns->tablerender(LAN_USET_39, $text);\n\n\t}\n\n\n\t/**\n\t * @param $changedUserData\n\t */\n\tprivate function renderForm($changedUserData)\n\t{\n\t\t$sql = e107::getDb();\n\t\t$ns = e107::getRender();\n\t\t$tp = e107::getParser();\n\t\t$userMethods = e107::getUserSession();\n\t\t$uuid = USERID;\n\t\t$qry = \"\n\t\tSELECT u.*, ue.* FROM #user AS u\n\t\tLEFT JOIN #user_extended AS ue ON ue.user_extended_id = u.user_id\n\t\tWHERE u.user_id=\".intval($uuid);\n\n\t\t$sql->gen($qry); // Re-read the user data into curVal (ready for display)\n\t\t$curVal=$sql->fetch();\n\t\t$curVal['user_class'] = varset($changedUserData['user_class'], $curVal['user_class']);\n\t\t$curVal['userclass_list'] = $userMethods->addCommonClasses($curVal, FALSE);\n\n\t\tif(!empty($_POST))\n\t\t{     // Fix for all the values being lost when there was an error in a field - restore from the latest $_POST values\n\t\t\t  // (Password fields have intentionally been cleared). If no error, there's an unset($_POST) to disable this block\n\t\t\tforeach ($_POST as $key => $val)\n\t\t\t{\n\t\t\t\tif ($key != 'class') { $curVal['user_'.$key] = $tp->post_toForm($val); }\n\t\t\t}\n\t\t\tforeach ($_POST['ue'] as $key => $val)\n\t\t\t{\n\t\t\t\t$curVal[$key] = $tp->post_toForm($val);\n\t\t\t}\n\t\t}\n\n\t\t$target = e107::getUrl()->create('user/myprofile/edit',array('id'=>USERID));\n\n\t\t$text = '<form method=\"post\" action=\"'.$target.'\" id=\"dataform\" class=\"usersettings-form form-horizontal\"  enctype=\"multipart/form-data\" autocomplete=\"off\">';\n\n\t\t//$text = (is_numeric($_uid) ? $rs->form_open(\"post\", e_SELF.\"?\".e_QUERY, \"dataform\", \"\", \" class='form-horizontal' role='form' enctype='multipart/form-data'\") : $rs->form_open(\"post\", e_SELF, \"dataform\", \"\", \" class='form-horizontal' role='form' enctype='multipart/form-data'\"));\n\n\t\tif (e_QUERY == \"update\")\n\t\t{\n\t\t\t$text .= \"<div class='fborder' style='text-align:center'><br />\".str_replace(\"*\", \"<span class='required'>*</span>\", LAN_USET_9).\"<br />\".LAN_USET_10.\"<br /><br /></div>\";\n\t\t}\n\n\t\t// e107::scStyle($sc_style);\n\t\te107::getScBatch('usersettings')->setVars($curVal)->reset();\n\n\t\t$USERSETTINGS_EDIT = $this->getTemplate('edit');\n\t\t$USERSETTINGS_EDIT_CAPTION = $this->getTemplate('edit_caption');\n\n\t\t$text .= $tp->parseTemplate($USERSETTINGS_EDIT, true, $this->sc); //ParseSC must be set to true so that custom plugin -shortcodes can be utilized.\n\n\n\t\t$text .= \"<div><input type='hidden' name='_uid' value='{$uuid}' /></div>\n\t\t</form>\n\t\t\";\n\n\t\t$caption = (isset($USERSETTINGS_EDIT_CAPTION)) ? $USERSETTINGS_EDIT_CAPTION : LAN_USET_39; // 'Update User Settings'\n\n\t\t$ns->tablerender($caption, $text);\n\n\n\n\n\n\t}\n\n\n\n\n\t//\n\t/**'\n\t * todo review and remove method if deemed appropriate\n\t * Delete a file from the public directories. Return TRUE on success, FALSE on failure.\n\t * Also deletes from database if appropriate.\n\t * @param $fname\n\t */\n\tprivate function deleteFile($fname)\n\t{\n\t\t/*\n\t\t $dir = 'avatars/';\n\n\t\t$sql = e107::getDb();\n\t\t$tp = e107::getParser();\n\n\t\t$fname = trim($fname);\n\t\tif (!$fname) return false;\n\n\t\tif (preg_match(\"#Binary (.*?)/#\", $fname, $match))\n\t\t{\n\t\t\treturn $sql -> db_Delete(\"rbinary\", \"binary_id='\".$tp -> toDB($match[1]).\"'\");\n\t\t}\n\t\telseif (file_exists(e_UPLOAD.$dir.$fname))\n\t\t{\n\t\t\tunlink(e_UPLOAD.$dir.$fname);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t\t*/\n\t}\n\n}\n\n$us = new usersettings_front;\nrequire_once(HEADERF);\n$us->init();\nrequire_once (FOOTERF);\n\n\n\n// If a field is required, returns a red asterisk\nfunction req($field)\n{\n\t$ret = \"\";\n\tif ($field == 2)\n\t{\n\t\t$ret = \"<span class='required'><!-- empty --></span>\";\n\t}\n\treturn $ret;\n}\n\n\n\n"], "fixing_code": ["<?php\n/*\n * e107 website system\n *\n * Copyright (C) 2008-2009 e107 Inc (e107.org)\n * Released under the terms and conditions of the\n * GNU General Public License (http://www.gnu.org/licenses/gpl.txt)\n *\n * User settings modify\n *\n * $Source: /cvs_backup/e107_0.8/usersettings.php,v $\n * $Revision$\n * $Date$\n * $Author$\n *\n*/\n/*\nNotes:\nUses $udata initially, later curVal to hold current user data\nAdmin log events:\nUSET_01 - admin changed user data\n*/\n\nif(!empty($_POST) && !isset($_POST['e-token']))\n{\n\t$_POST['e-token'] = '';\n}\nrequire_once ('class2.php');\n\n// TODO - Remove all the adminEdit stuff. \n\ndefine(\"US_DEBUG\",FALSE);\n//define('US_DEBUG', false);\n\n\nif (!USER)\n{\t// Must be logged in to change settings\n\te107::redirect();\n\texit();\n}\n\nif ((!ADMIN || !getperms(\"4\")) && e_QUERY && e_QUERY != \"update\" && substr(e_QUERY, 0, 4) !== 'del=')\n{\n\theader('location:'.e_BASE.'usersettings.php');\n\texit();\n}\n\ne107::includeLan(e_LANGUAGEDIR.e_LANGUAGE.'/lan_user.php');\t\t// Generic user-related language defines\ne107::includeLan(e_LANGUAGEDIR.e_LANGUAGE.'/lan_usersettings.php');\n\n$ue = e107::getUserExt(); // needed by shortcodes for now.\n\nrequire_once (e_HANDLER.'ren_help.php');\n// require_once (e_HANDLER.'user_handler.php');\nrequire_once(e_HANDLER.'validator_class.php');\n\n\n\nclass usersettings_front // Begin Usersettings rewrite.\n{\n\n\tprivate $template = array();\n\tprivate $sc = null;\n\n\n\t/**\n\t * usersettings_front constructor.\n\t */\n\tfunction __construct()\n\t{\n\n\t\tif(deftrue('BOOTSTRAP'))\n\t\t{\n\t\t\t$template = e107::getCoreTemplate('usersettings','', true, true); // always merge\n\n\t\t\t$USERSETTINGS_MESSAGE \t\t\t\t= \"{MESSAGE}\";\n\t\t\t$USERSETTINGS_MESSAGE_CAPTION \t\t= LAN_OK;\n\t\t\t$USERSETTINGS_EDIT_CAPTION \t\t\t= LAN_USET_39; \t// 'Update User Settings'\n\t\t\t$USERSETTINGS_EDIT\t\t\t\t\t= $template['edit'];\n\t\t\t$usersettings_shortcodes \t\t\t= e107::getScBatch('usersettings');\n\n\t\t\t$usersettings_shortcodes->wrapper('usersettings/edit');\n\n\t\t/*\te107::css('inline', \"\n\n\t\t\t\t.usersettings-form .col-sm-9 .checkboxes { margin-left:20px }\n\t\t\t\");*/\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$bcDefs = array(\n\t\t\t\t'LAN_418'   => 'LAN_USET_31',\n\t\t\t\t'LAN_7'     => 'LAN_USER_01',\n\t\t\t\t'LAN_8'     => 'LAN_USER_80',\n\t\t\t\t'LAN_9'     => 'LAN_USER_81',\n\t\t\t\t'LAN_10'    => 'LAN_USER_82',\n\t\t\t\t'LAN_112'   => 'LAN_USER_60',\n\t\t\t\t'LAN_113'   => 'LAN_USER_83',\n\t\t\t\t'LAN_114'   => 'LAN_USER_84',\n\t\t\t\t'LAN_120'   => 'LAN_USER_71', // Signature\n\t\t\t\t'LAN_152'   => 'LAN_USET_24',\n\t\t\t\t'LAN_153'   => 'LAN_USET_25',\n\t\t\t\t'LAN_154'   => 'LAN_USET_37',\n\t\t\t\t'LAN_308'   => 'LAN_USER_63',\n\t\t\t\t'LAN_401'   => 'LAN_USET_23',\n\t\t\t\t'LAN_404'   => 'LAN_USET_32',\n\t\t\t\t'LAN_414'   => 'LAN_USET_27',\n\t\t\t\t'LAN_415'   => 'LAN_USET_26',\n\t\t\t\t'LAN_420'   => 'LAN_USER_07', // Avatar\n\t\t\t\t'LAN_421'   => 'LAN_USET_33',\n\t\t\t\t'LAN_422'   => 'LAN_USET_34',\n\t\t\t\t'LAN_423'   => 'LAN_USET_35',\n\t\t\t\t'LAN_424'   => 'LAN_USET_36',\n\t\t\t\t'LAN_425'   => 'LAN_USER_06',\n\t\t\t\t'LAN_426'   => 'LAN_USET_28',\n\t\t\t\t'LAN_433'   => '',\n\t\t\t\t'LAN_434'   => '',\n\t\t\t\t'LAN_435'   => '',\n\t\t\t\t'LAN_122'   => 'UE_LAN_TIMEZONE',\n\t\t\t\t'LAN_CUSTOMTITLE'   => 'LAN_USER_04'\n\n\t\t\t);\n\n\n\t\t\te107::getLanguage()->bcDefs($bcDefs);\n\n\t\t\tglobal $sc_style;\n\t\t\t$REQUIRED_FIELD                     = '';\n\t\t\t$USER_EXTENDED_CAT                  = '';\n\t\t\t$USEREXTENDED_FIELD                 = '';\n\t\t\t$USERSETTINGS_MESSAGE \t\t\t\t= '';\n\t\t\t$USERSETTINGS_MESSAGE_CAPTION \t\t= '';\n\t\t\t$USERSETTINGS_EDIT_CAPTION \t\t\t= '';\n\t\t\t$USERSETTINGS_EDIT\t\t\t\t\t= '';\n\t\t\t$coreTemplatePath                   = e107::coreTemplatePath('usersettings');\n\t\t\tinclude_once($coreTemplatePath); //correct way to load a core template.\n\t\t\te107::scStyle($sc_style);\n\t\t\t$usersettings_shortcodes = e107::getScBatch('usersettings');\n\n\t\t\t$usersettings_shortcodes->legacyTemplate = array(\n\t\t\t\t'USER_EXTENDED_CAT' => $USER_EXTENDED_CAT,\n\t\t\t\t'USEREXTENDED_FIELD' => $USEREXTENDED_FIELD,\n\t\t\t\t\t'REQUIRED_FIELD' => $REQUIRED_FIELD\n\t\t\t);\n\n\t\t}\n\n\t\t$this->sc = $usersettings_shortcodes;\n\t\t$this->template = array(\n\t\t\t'message'           => $USERSETTINGS_MESSAGE,\n\t\t\t'message_caption'   => $USERSETTINGS_MESSAGE_CAPTION,\n\t\t\t'edit_caption'      => $USERSETTINGS_EDIT_CAPTION,\n\t\t\t'edit'              => $USERSETTINGS_EDIT,\n\n\t\t);\n\n\n\n\n\t\te107::js('footer-inline',\"\n\t\t\tfunction addtext_us(sc)\n\t\t\t{\n\t\t\t\tdocument.getElementById('dataform').image.value = sc;\n\t\t\t}\n\t\t\");\n\n\t}\n\n\t/**\n\t * @param $id\n\t * @return mixed\n\t */\n\tprivate function getTemplate($id)\n\t{\n\t\treturn $this->template[$id];\n\t}\n\t\n\t\n\t\n\tprivate function sendDeleteConfirmationEmail()\n\t{\n\t\t$tp = e107::getParser();\n\n\t\t$message = defset('LAN_USET_52', \"A confirmation email has been sent to [x]. Please click the link in the email to permanently delete your account.\"); // Load LAN with fall-back.\n\t\t$subject = defset(\"LAN_USET_53\", \"Account Removal Confirmation\"); // Load LAN with fall-back.\n\t\t$caption = defset('LAN_USET_54', \"Confirmation Email Sent\"); // Load LAN with fall-back.\n\n\t\t$hash = e107::getUserSession()->generateRandomString(\"#**************************************************************************#\");\n\n\t\t$link = SITEURL.\"usersettings.php?del=\".$hash; // Security measure - user must be logged in to utilize the link.\n\n\t\t$text = LAN_USET_55; // \"Please click the following link to complete the deletion of your account.\";\n\t\t$text .= \"<br /><br />\";\n\t\t$text .= \"<a href='\".$link.\"' target='_blank'>\".$link.\"</a>\";\n\n\n\t\t$eml = array(\n\t\t\t'subject' \t\t=> $subject,\n\t\t\t'html'\t\t\t=> true,\n\t\t\t'priority'      => 1,\n\t\t\t'template'\t\t=> 'default',\n\t\t\t'body'\t\t\t=> $text,\n\t\t);\n\n\t\tif(e107::getEmail()->sendEmail(USEREMAIL,USERNAME, $eml))\n\t\t{\n\t\t\t$update = array(\n\t\t\t\t'user_sess' => $hash,\n\t\t\t\t'WHERE' => 'user_id = '.USERID\n\t\t\t);\n\n\t\t\te107::getDb()->update('user',$update);\n\n\t\t\t$alert = $tp->lanVars($message, USEREMAIL);\n\t\t\treturn e107::getMessage()->setTitle($caption, E_MESSAGE_INFO)->addInfo($alert)->render();\n\n\t\t}\n\n\t\t//todo Email Failure message.\n\t\treturn null;\n\n\n\n\t}\n\n/*\n\tprivate function processUserDeleteFields($vars)\n\t{\n\t\t$qry = array();\n\n\t\tforeach($vars as $field => $var)\n\t\t{\n\n\n\n\t\t}\n\n\t\treturn $qry;\n\t}*/\n\n\n\tprivate function processUserDelete($hash)\n\t{\n\t\tif(!e107::getDb()->select('user', '*',\"user_id = \".USERID.\" AND user_sess='\".$hash.\"' LIMIT 1\")) // user must be logged in AND have correct hash.\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$arr = e107::getAddonConfig('e_user', '', 'delete', USERID);\n\n\t\t$sql = e107::getDb();\n\n\t\tforeach($arr as $plugin)\n\t\t{\n\t\t\tforeach($plugin as $table => $query)\n\t\t\t{\n\t\t\t\t$mode = $query['MODE'];\n\t\t\t\tunset($query['MODE']);\n\n\t\t\t\t// $query = $this->processUserDeleteFields($query); //optional pre-processing..\n\n\t\t\t\tif($mode === 'update')\n\t\t\t\t{\n\t\t\t\t\t//echo \"<h3>UPDATE \".$table.\"</h3>\";\n\t\t\t\t//\tprint_a($query);\n\t\t\t\t\t$sql->update($table, $query); // todo check query ran successfully.\n\t\t\t\t}\n\t\t\t\telseif($mode === 'delete')\n\t\t\t\t{\n\t\t\t\t\t//echo \"<h3>DELETE \".$table.\"</h3>\";\n\t\t\t\t\t//print_a($query);\n\t\t\t\t\t$sql->delete($table, $query['WHERE']); //  todo check query ran successfully.\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\t$alert = defset('LAN_USET_56', \"Your account has been successfully deleted.\");\n\n\t\treturn e107::getMessage()->addSuccess($alert)->render();\n\n\t}\n\n\t/**\n\t * @return bool\n\t */\n\tpublic function init()\n\t{\n\t\t$pref               = e107::getPref();\n\t\t$tp                 = e107::getParser();\n\t\t$ue                 = e107::getUserExt();\n\t\t$mes                = e107::getMessage();\n\t\t$sql                = e107::getDb();\n\t\t$ns                 = e107::getRender();\n\t\t$userMethods        = e107::getUserSession();\n\n\t\t$photo_to_delete    = '';\n\t\t$avatar_to_delete   = '';\n\t//\t$ue_fields          = '';\n\t\t$caption            = '';\n\t\t$promptPassword     = false;\n\t\t$error              = FALSE;\n\t\t$extraErrors        = array();\n\t\t$eufVals            = array();\n\t\t$savePassword       = '';\n\t\t$changedUserData    = array();\n\t\t$udata              = array();\n\t\t$allData            = array();\n\t\t$message            = '';\n\t\t$changedEUFData     = array();\n\n\t\t$inp                = USERID;\t\t\t// Initially assume that user is modifying their own data.\n\t\t$_uid               = false;\t\t\t// FALSE if user modifying their own data; otherwise ID of data being modified\n\t\t$adminEdit          = false; // @deprecated\t\t// FALSE if editing own data. TRUE if admin edit\n\n\n\t\tif(!empty($_POST['delete_account'])) // button clicked.\n\t\t{\n\t\t\techo $this->sendDeleteConfirmationEmail();\n\t\t}\n\n\t\tif(!empty($_GET['del'])) // delete account via confirmation email link.\n\t\t{\n\n\t\t\techo $this->processUserDelete($_GET['del']);\n\t\t\t//e107::getSession()->destroy();\n\t\t\te107::getUser()->logout();\n\t\t\treturn null;\n\t\t}\n\n\t\t/* todo subject of removal */\n\t\tif(is_numeric(e_QUERY))\n\t\t{\t// Trying to edit specific user record\n\t\t\tif (ADMIN)\n\t\t\t{\t// Admin edit of specific record\n\t\t\t\t/*\n\t\t\t\t$_usersettings_matches = Array\n\t\t\t\t(\n\t\t\t\t    [0] => /e107/usersettings.php?# OR /e107/edit/user/#\n\t\t\t\t    [1] => e107\n\t\t\t\t    [2] => usersettings.php OR edit/user\n\t\t\t\t    [3] => ? OR /\n\t\t\t\t    [4] => #\n\t\t\t\t)\n\t\t\t\t*/\n\t\t\t\t$inp = intval(e_QUERY);\n\n\t\t\t//\t$usersettings_form_action = strstr('?', $_usersettings_matches[3]) ? e_SELF.'?'.e_QUERY : e_SELF;\n\n\t\t\t\t$_uid = $inp;\n\t\t\t\t$info = e107::user($inp);\n\t\t\t\t\t\t//Only site admin is able to change setting for other admins\n\t\t\t\tif(!is_array($info) || ($info['user_admin'] == 1 && (!defined('ADMINPERMS') || ADMINPERMS !== '0')) || ((!defined('ADMINPERMS') || ADMINPERMS !== '0') && !getperms('4')))\n\t\t\t\t{\n\t\t\t\t\te107::redirect();\n\t\t\t\t\texit();\n\t\t\t\t}\n\t\t\t\t$adminEdit = TRUE;\t\t// Flag to indicate admin edit\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Non admin attempting to edit another user's ID\n\t\t\t\te107::redirect();\n\t\t\t\texit();\n\t\t\t}\n\n\t\t}\n\n\n\n\t\t// Save user settings (changes only)\n\t\t//-----------------------------------\n\n\t\tif (isset($_POST['updatesettings']) || isset($_POST['SaveValidatedInfo']))\n\t\t{\n\t\t//\t$udata = e107::user($inp);\t//@deprecated\t\t\t// Get all the existing user data, including any extended fields\n\n\t\t\t$udata = e107::user($inp); // Get all the existing user data, including any extended fields\n\t\t\t$udata['user_classlist'] = $userMethods->addCommonClasses($udata, FALSE);\n\t\t}\n\n\n\t\tif (!empty($_POST['updatesettings']))\n\t\t{\n\t\t\t// Do not filter these values (saving)\n\t\t\t$ueVals   \t= $_POST['ue'];\n\t\t\t$passtemp1 \t= $_POST['password1'];\n\t\t\t$passtemp2  = $_POST['password2'];\n\t\t\t\n\t\t\t// Filter the others\n\t\t\t$_POST = e107::getParser()->filter($_POST);\n\t\t\t\n\t\t\t// Pass the original values back (restoring)\n\t\t\t$_POST['ue'] \t\t= $ueVals;\n\t\t\t$_POST['password1']\t= $passtemp1;\n\t\t\t$_POST['password2']\t= $passtemp2; \n\n\t\t\t// Unset temporary vars\n\t\t\tunset($ueVals);\n\t\t\tunset($passtemp1);\n\t\t\tunset($passtemp2);\n\n\t\t\tif (!vartrue($pref['auth_method']))\n\t\t\t{\n\t\t\t\t$pref['auth_method'] = 'e107';\n\t\t\t}\n\n\t\t\tif ($pref['auth_method'] != 'e107')\n\t\t\t{\n\t\t\t\t$_POST['password1'] = '';\n\t\t\t\t$_POST['password2'] = '';\n\t\t\t}\n\n\t\t\te107::getMessage()->addDebug(\"_FILES\".print_a($_FILES,true));\n\t\t\t// Uploaded avatar and/or photo\n\t\t\tif (varset($_FILES['file_userfile']['error']['avatar'], false) === UPLOAD_ERR_OK || varset($_FILES['file_userfile']['error']['photo'], false) == UPLOAD_ERR_OK)\n\t\t\t{\n\t\t\t\te107::getMessage()->addDebug(\"Uploaded File Detected\");\n\t\t\t\trequire_once (e_HANDLER.'resize_handler.php');\n\n\t\t\t\t$opts = array('overwrite' => TRUE, 'file_mask'=>'jpg,png,gif,jpeg', 'max_file_count' => 2);\n\n\t\t\t\tif ($uploaded = e107::getFile()->getUploaded(e_AVATAR_UPLOAD, 'prefix+ap_'.$tp->leadingZeros($udata['user_id'],7).'_', $opts))\n\t\t\t\t{\n\n\t\t\t\t\te107::getMessage()->addDebug(\"Uploaded: \".print_a($uploaded,true));\n\t\t\t\t\tforeach ($uploaded as $upload)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($upload['name'] && ($upload['index'] == 'avatar') && $pref['avatar_upload'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// avatar uploaded - give it a reference which identifies it as server-stored\n\t\t\t\t\t\t\t// Vetting routines will do resizing and so on\n\t\t\t\t\t\t\t$_POST['image'] = '-upload-'.$upload['name'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif ($upload['name'] && ($upload['index'] == 'photo') && $pref['photo_upload'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// photograph uploaded\n\t\t\t\t\t\t\t$_POST['user_sess'] = '-upload-'.$upload['name'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif (isset($upload['error']) && isset($upload['message']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$extraErrors[] = $upload['message'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t}\n\n\n\t\t\t// Now validate everything - just check everything that's been entered\n\t\t\t$allData = validatorClass::validateFields($_POST,$userMethods->userVettingInfo, TRUE);\t\t// Do basic validation\n\t\t\tvalidatorClass::dbValidateArray($allData, $userMethods->userVettingInfo, 'user', $inp);\t\t// Do basic DB-related checks\n\t\t\t$userMethods->userValidation($allData);\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Do user-specific DB checks\n\n\t\t\t$savePassword = '';\n\n\t\t\tif (($_POST['password1'] != '') || ($_POST['password2'] != ''))\n\t\t\t{\t// Need to validate new password here\n\t\t\t\tif (!isset($allData['errors']['user_password']))\n\t\t\t\t{\t// No errors in password yet - may be valid\n\t\t\t\t\t$savePassword = $allData['data']['user_password'];\n\t\t\t\t\tunset($allData['data']['user_password']);\t\t// Delete the password value in the output array\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunset($allData['errors']['user_password']);\t\t// Delete the error which an empty password field generates\n\t\t\t}\n\n\t\t\tunset($_POST['password1']);\n\t\t\tunset($_POST['password2']);\n\n\n\t\t\t$changedUserData = validatorClass::findChanges($allData['data'], $udata,FALSE);\n\n\n\t\t\te107::getMessage()->addDebug(\"<h5>Existing User Info</h5>\".print_a($udata,true));\n\t\t\te107::getMessage()->addDebug('<h5>$allData</h5>'.print_a($allData['data'],true));\n\n\t\t\te107::getMessage()->addDebug(\"<h5>Posted Changes</h5>\".print_a($changedUserData,true));\n\n\t\t\t// Login Name checks - only admin can change login name\n\t\t\tif (isset($changedUserData['user_loginname']))\n\t\t\t{\n\t\t\t\tif (ADMIN && getperms('4'))\n\t\t\t\t{\n\t\t\t\t\tif (!check_class($pref['displayname_class'], $udata['user_classlist'], $adminEdit))\n\t\t\t\t\t{\t// Display name and login name must be the same\n\t\t\t\t\t\t$changedUserData['user_name'] = $changedUserData['user_loginname'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tunset($changedUserData['user_loginname']);\t\t// Just doing this is probably being kind!\n\t\t\t\t\t$alldata['errors']['user_loginname'] = ERR_GENERIC;\n\t\t\t\t\t$alldata['errortext']['user_loginname'] = LAN_USER_85;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// See if user just wants to delete existing photo\n\t\t\tif (isset($_POST['user_delete_photo']))\n\t\t\t{\n\t\t\t\t$photo_to_delete = $udata['user_sess'];\n\t\t\t\t$changedUserData['user_sess'] = '';\n\t\t\t}\n\n\n\n\t\t\tif ($udata['user_image'] && !isset($changedUserData['user_image']))\n\t\t\t{\n\t\t\t\t// $changedUserData['user_image'] = ''; // FIXME Deletes the user's image when no changes made.\n\t\t\t\t$avatar_to_delete = str_replace('-upload-', '', $udata['user_image']);\n\t\t\t}\n\n\t\t    // Validate Extended User Fields.\n\n\n\n\t\t\tif (isset($_POST['ue']))\n\t\t\t{\n\t\t\t\t$eufVals = $ue->sanitizeAll($_POST['ue']);\n\t\t\t\t$eufVals = $ue->userExtendedValidateAll($eufVals, varset($_POST['hide'],TRUE));\t\t// Validate the extended user fields\n\t\t\t\t$changedEUFData['data'] = validatorClass::findChanges($eufVals['data'], $udata,FALSE);\n\t\t\t}\n\n\t\t\te107::getMessage()->addDebug(\"<h4>Extended Data - post validation</h4>\".print_a($changedEUFData['data'],true));\n\n\n\n\t\t\t// Determine whether we have an error\n\t\t\t$error = ((isset($allData['errors']) && count($allData['errors'])) || (isset($eufVals['errors']) && count($eufVals['errors'])) || count($extraErrors));\n\n\n\t\t\t// Update Userclass - only if its the user changing their own data (admins can do it another way)\n\t\t\tif (isset($allData['data']['user_class']))\n\t\t\t{\n\t\t\t\tunset($changedUserData['user_class']);\t\t// We always recalculate this\n\t\t\t\tif (FALSE === $adminEdit) // Make sure admin can't edit another's user classes\n\t\t\t\t{\n\n\t\t\t\t\t$e_userclass = e107::getUserClass();\n\t\t\t\t\t$ucList = $e_userclass->get_editable_classes(USERCLASS_LIST,TRUE);\t // List of classes which this user can edit\n\t\t\t\t\tif (count($ucList))\n\t\t\t\t\t{\n\t\t\t\t\t\t$nid = $e_userclass->mergeClassLists($udata['user_class'], $ucList, $allData['data']['user_class'], TRUE);\n\t\t\t\t\t\t$nid = $e_userclass->stripFixedClasses($nid);\n\t\t\t\t\t\t$nid = implode(',',$nid);\n\t\t\t\t\t\t//\techo \"Userclass data - new: {$nid}, old: {$udata['user_baseclasslist']}, editable: \".implode(',',$ucList).\", entered: {$allData['data']['user_class']}<br />\";\n\t\t\t\t\t\tif ($nid != $udata['user_baseclasslist'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (US_DEBUG)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\te107::getLog()->addEvent(10, debug_backtrace(), \"DEBUG\", \"Usersettings test\", \"Write back classes; old list: {$udata['user_class']}; new list: \".$nid, false, LOG_TO_ROLLING);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$changedUserData['user_class'] = $nid;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\te107::getMessage()->addDebug(\"<h4>Processed Posted Changes</h4>\".print_a($changedUserData,true));\n\n\t\t\t// All key fields validated here\n\t\t\t// -----------------------------\n\t\t\t// $inp - UID of user whose data is being changed (may not be the currently logged in user)\n\t\t\t$inp = intval($inp);\n\t\t\tif (!$error && count($changedUserData) || count($changedEUFData))\n\t\t\t{\n\t\t\t\t$_POST['user_id'] = $inp;\n\t\t\t\t$ret =e107::getEvent()->trigger('preuserset', $_POST);\n\n\t\t\t\tif ($ret == '')\n\t\t\t\t{\n\n\t\t\t\t// Only admins can update login name - do this just in case one of the event triggers has mucked it about\n\t\t\t\t\tif (!(ADMIN && getperms('4')))\n\t\t\t\t\t{\n\t\t\t\t\t\tunset($changedUserData['user_loginname']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t// Invalid data - from hooked in trigger event\n\t\t\t\t\t$message = \"<div style='text-align:center'>\".$ret.\"</div>\";\n\t\t\t\t\t$caption = LAN_OK;\n\t\t\t\t\t$error = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}  // End - update setttings\n\t\telseif(isset($_POST['SaveValidatedInfo'])) // Next bit only valid if user editing their own data\n\t\t{\n/*\t\t\tif(!empty($_POST['updated_data']) && !empty($_POST['currentpassword']) && !empty($_POST['updated_key']))\n\t\t\t{\t// Got some data confirmed with password entry*/\n\t\t\t\t$new_data = base64_decode($_POST['updated_data']);\n\n\t\t\t\t // Should only happen if someone's fooling around\n\t\t\t\tif ($this->getValidationKey($new_data) !== $_POST['updated_key'] || ($userMethods->hasReadonlyField($new_data) !==false))\n\t\t\t\t{\n\t\t\t\t\techo LAN_USET_42.'<br />';\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (isset($_POST['updated_extended']))\n\t\t\t\t{\n\t\t\t\t\t$new_extended = base64_decode($_POST['updated_extended']);\n\n\t\t\t\t\tif ($this->getValidationKey($new_extended) !== $_POST['extended_key'])\n\t\t\t\t\t{  // Should only happen if someone's fooling around\n\t\t\t\t\t\techo LAN_USET_42.'<br />';\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($userMethods->CheckPassword($_POST['currentpassword'], $udata['user_loginname'], $udata['user_password']) === false) // Use old data to validate\n\t\t\t\t{  // Invalid password\n\n\t\t\t\t\t$mes->addError(\"<p>\".LAN_INCORRECT_PASSWORD.\"</p>\");\n\t\t\t\t\t$mes->addError(\"<a class='btn btn-danger' href='\".e107::getUrl()->create('user/myprofile/edit').\"'>\".LAN_BACK.\"</a>\");\n\n\t\t\t\t\techo $mes->render();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\n\t\t\t\t$changedUserData = e107::unserialize($new_data);\n\t\t\t\t$changedUserData = e107::getParser()->filter($changedUserData, 'str');\n\n\t\t\t\t$savePassword = $_POST['currentpassword'];\n\n\t\t\t\tif(!empty($new_extended))\n\t\t\t\t{\n\t\t\t\t\t$changedEUFData = e107::unserialize($new_extended);\n\t\t\t\t\t$changedEUFData = e107::getParser()->filter($changedEUFData, 'str');\n\t\t\t\t}\n\n\t\t\t\tunset($new_data);\n\t\t\t\tunset($new_extended);\n\n\t\t\t\tif (isset($changedUserData['user_sess']))\n\t\t\t\t{\n\t\t\t\t\t$photo_to_delete = $udata['user_sess'];\n\t\t\t\t}\n\t\t\t\tif (isset($changedUserData['user_image']))\n\t\t\t\t{\n\t\t\t\t\t$avatar_to_delete = $udata['user_image'];\n\t\t\t\t}\n\t\t//\t}\n\t\t}\n\t\tunset($_POST['updatesettings']);\n\t\tunset($_POST['SaveValidatedInfo']);\n\n\n\t\t// At this point we know the error status.\n\t\t// $changedUserData has an array of core changed data, except password, which is in $savePassword if changed (or entered as confirmation).\n\t\t// $eufData has extended user field data\n\t\t// $changedEUFData has any changes in extended user field data\n\t\t$dataToSave = !$error && (isset($changedUserData) && count($changedUserData)) || (isset($changedEUFData['data']) && count($changedEUFData['data'])) || $savePassword;\n\n\t\tif ($dataToSave)\n\t\t{\n\t\t\t// Sort out password hashes\n\t\t\tif ($savePassword)\n\t\t\t{\n\t\t\t\t$loginname = $changedUserData['user_loginname'] ? $changedUserData['user_loginname'] : $udata['user_loginname'];\n\t\t\t\t$email = (isset($changedUserData['user_email']) && $changedUserData['user_email']) ? $changedUserData['user_email'] : $udata['user_email'];\n\t\t\t\t$changedUserData['user_password'] = $sql->escape($userMethods->HashPassword($savePassword, $loginname), false);\n\t\t\t\tif (varset($pref['allowEmailLogin'], FALSE))\n\t\t\t\t{\n\t\t\t\t\t$user_prefs = e107::unserialize($udata['user_prefs']);\n\t\t\t\t\t$user_prefs['email_password'] = $userMethods->HashPassword($savePassword, $email);\n\t\t\t\t\t$changedUserData['user_prefs'] = e107::serialize($user_prefs);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ((isset($changedUserData['user_loginname']) && $userMethods->isPasswordRequired('user_loginname'))\n\t\t\t\t\t|| (isset($changedUserData['user_email']) && $userMethods->isPasswordRequired('user_email')))\n\t\t\t\t{\n\t\t\t\t\tif ($_uid && ADMIN)\n\t\t\t\t\t{\t// Admin is changing it\n\t\t\t\t\t\t$extraErrors[] = LAN_USET_20;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\t// User is changing their own info\n\t\t\t\t\t\t$promptPassword = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($dataToSave && !$promptPassword)\n\t\t{\n\t\t\t$inp = intval($inp);\n\n\n\t\t\t// We can update the basic user record now - can just update fields from $changedUserData\n\t\t\tif (US_DEBUG) { e107::getLog()->addEvent(10, debug_backtrace(), \"DEBUG\", \"Usersettings test\", \"Changed data:<br /> \".var_export($changedUserData, true), false, LOG_TO_ROLLING); }\n\t\t\tif (isset($changedUserData) && count($changedUserData))\n\t\t\t{\n\t\t\t\t$changedData['data'] = $changedUserData;\n\t\t\t\t$changedData['WHERE'] = 'user_id='.$inp;\n\t\t\t\tvalidatorClass::addFieldTypes($userMethods->userVettingInfo,$changedData);\n\n\t\t\t\t// print_a($changedData);\n\t\t\t\tif (FALSE === $sql->update('user', $changedData))\n\t\t\t\t{\n\t\t\t\t\t$extraErrors[] = LAN_USET_43;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$message = LAN_USET_41;\n\t\t\t\t\tif (isset($changedUserData['user_password']) && !$adminEdit)\n\t\t\t\t\t{\n\t\t\t\t\t\t//\techo \"Make new cookie<br />\";\n\t\t\t\t\t\t$userMethods->makeUserCookie(array('user_id' => $udata['user_id'],'user_password' => $changedUserData['user_password']), FALSE);\t\t// Can't handle autologin ATM\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// Save extended field values\n\t\t\tif (!empty($changedEUFData['data']))\n\t\t\t{\n\n\t\t\t\t$ue->addFieldTypes($changedEUFData);\t\t\t\t// Add in the data types for storage\n\n\t\t\t\t$changedEUFData['_DUPLICATE_KEY_UPDATE'] = true; // update record if key found, otherwise INSERT.\n\t\t\t\t$changedEUFData['data']['user_extended_id'] = $inp;\n\n\t\t\t\tif (false === $sql->insert('user_extended', $changedEUFData))\n\t\t\t\t{\n\t\t\t\t\t$message .= '<br />Error updating EUF';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t// Now see if we need to log anything. First check the options and class membership\n\t\t\t// (Normally we would leave logging decision to the log class. But this one's a bit more complicated)\n\t\t\t$user_logging_opts = e107::getConfig()->get('user_audit_opts');\n\t\t\t$do_log = array();\n\t\t\t$log_action = '';\n\t\t\tif ($_uid)\n\t\t\t{\t\t// Its an admin changing someone elses data - make an admin log entry here\n\t\t\t\te107::getLog()->add('USET_01', \"UID: {$udata['user_id']}. UName: {$udata['user_name']}\", E_LOG_INFORMATIVE);\n\t\t\t\t// Check against the class of the target user, not the admin!\n\t\t\t\tif (!check_class(varset($pref['user_audit_class'], ''), $udata['user_class'])) { $user_logging_opts = array(); }\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!check_class(varset($pref['user_audit_class'], ''))) { $user_logging_opts = array(); }\n\t\t\t}\n\n\t\t\t$triggerData = array();\n\t\t\tif (count($changedUserData))\n\t\t\t{\n\t\t\t\t$triggerData = $changedUserData;\t\t// Create record for changed user data trigger\n\t\t\t\t$triggerData['user_id'] = $udata['user_id'];\n\t\t\t\t$triggerData['_CHANGED_BY_UID'] = USERID;\t\t// May be admin changing data\n\t\t\t\t$triggerData['_CHANGED_BY_UNAME'] = USERNAME;\n\t\t\t\tif (!isset($triggerData['user_name'])) { $triggerData['user_name'] = $udata['user_name']; }\n\t\t\t}\n\n\t\t\t// Now log changes if required\n\t\t\tif (count($user_logging_opts))\n\t\t\t{\n\t\t\t\t// Start with any specific fields we're changing\n\t\t\t\tif (isset($changedUserData['user_name']))\n\t\t\t\t{\n\t\t\t\t\tif (isset($user_logging_opts[USER_AUDIT_NEW_DN]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$do_log['user_name'] = $changedUserData['user_name'];\n\t\t\t\t\t\t$log_action = USER_AUDIT_NEW_DN;\n\t\t\t\t\t}\n\t\t\t\t\tunset($changedUserData['user_name']);\n\t\t\t\t}\n\n\t\t\t\tif (isset($changedUserData['user_password']))\n\t\t\t\t{\n\t\t\t\t\tif (isset($user_logging_opts[USER_AUDIT_NEW_PW]))\n\t\t\t\t\t{\t// Password has already been changed to a hashed value, so OK to leave the data\n\t\t\t\t\t\t$do_log['user_password'] = $changedUserData['user_password'];\n\t\t\t\t\t\t$log_action = USER_AUDIT_NEW_PW;\n\t\t\t\t\t}\n\t\t\t\t\tunset($changedUserData['user_password']);\n\t\t\t\t}\n\n\t\t\t\tif (isset($changedUserData['user_email']))\n\t\t\t\t{\n\t\t\t\t\tif (isset($user_logging_opts[USER_AUDIT_NEW_EML]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$do_log['user_email'] = $changedUserData['user_email'];\n\t\t\t\t\t\t$log_action = USER_AUDIT_NEW_EML;\n\t\t\t\t\t}\n\t\t\t\t\tunset($changedUserData['user_email']);\n\t\t\t\t}\n\n\t\t\t\tif (count($changedUserData) && isset($user_logging_opts[USER_AUDIT_NEW_SET]))\n\t\t\t\t{\n\t\t\t\t\t$do_log = array_merge($do_log, $changedUserData);\n\t\t\t\t\t$log_action = USER_AUDIT_NEW_SET;\n\t\t\t\t}\n\t\t\t\tif (count($do_log))\n\t\t\t\t{  // Got some changes to audit\n\t\t\t\t\t//\t\t\techo \"Adding to audit log<br />\";\n\t\t\t\t\tif ($_uid)\n\t\t\t\t\t{\n\t\t\t\t\t\t$log_action = USER_AUDIT_ADMIN;\t\t\t\t\t\t// If an admin did the mod, different heading\n\t\t\t\t\t\t// Embed a message saying who changed the data\n\t\t\t\t\t\t$changedUserData['message'] = str_replace(array('[x]', '[y]'), array(USERID, USERNAME), LAN_USET_18);\n\t\t\t\t\t\te107::getLog()->user_audit($log_action, $do_log, $udata['user_id'], $udata['user_loginname']);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (count($do_log) > 1) { $log_action = USER_AUDIT_NEW_SET; } // Log multiple entries to one record\n\t\t\t\t\t\te107::getLog()->user_audit($log_action, $do_log);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t// End of audit logging\n\n\n\t\t\t// Now tidy up\n\t\t\tif ($photo_to_delete)\n\t\t\t{\t// Photo may be a flat file, or in the database\n\t\t\t\t$this->deleteFile($photo_to_delete);\n\t\t\t}\n\t\t\tif ($avatar_to_delete)\n\t\t\t{\t// Avatar may be a flat file, or in the database\n\t\t\t\t$this->deleteFile($avatar_to_delete);\n\t\t\t}\n\n\t\t\t\t// If user has changed display name, update the record in the online table\n\t\t\tif (isset($changedUserData['user_name']) && !$_uid)\n\t\t\t{\n\t\t\t\t$sql->update('online', \"online_user_id = '\".USERID.\".\".$changedUserData['user_name'].\"' WHERE online_user_id = '\".USERID.\".\".USERNAME.\"'\");\n\t\t\t}\n\n\n\n\n\t\t\te107::getEvent()->trigger('postuserset', $_POST);\n\t\t\tif (count($triggerData))\n\t\t\t{\n\t\t\t\te107::getEvent()->trigger('userdatachanged', $triggerData);\n\t\t\t\te107::getEvent()->trigger('user_profile_edit', $triggerData);\n\t\t\t}\n\n\t\t\tif (e_QUERY == 'update')\n\t\t\t{\n\t\t\t\te107::redirect();\n\t\t\t}\n\n\t\t\tif($adminEdit && $message)\n\t\t\t{\n\t\t\t\t$mes->addSuccess($message);\n\t\t\t}\n\n\n\t\t\t$USERSETTINGS_MESSAGE =$this->getTemplate('message');\n\t\t\t$USERSETTINGS_MESSAGE_CAPTION = $this->getTemplate('message_caption');\n\n\t\t\tif(isset($USERSETTINGS_MESSAGE))\n\t\t\t{\n\t\t\t\t$message = str_replace(\"{MESSAGE}\",$message,$USERSETTINGS_MESSAGE);\n\t\t\t}\n\t\t\telseif(!deftrue('BOOTSTRAP')) // backwards compatible\n\t\t\t{\n\t\t\t\t$message = \"<div style='text-align:center'>\".$message.'</div>';\n\n\t\t\t}\n\n\t\t\t$caption = (isset($USERSETTINGS_MESSAGE_CAPTION)) ? $USERSETTINGS_MESSAGE_CAPTION : LAN_OK;\n\n\t\t}\t// End - if (!$error)...\n\n\n\t\tif (!$error && !$promptPassword)\n\t\t{\n\t\t\tif(isset($_POST) && vartrue($changedUserData['user_name']))\n\t\t\t{\n\t\t\t\t$redirect = e107::getRedirect();\n\t\t\t\t$url = e107::getUrl();\n\t\t\t\t$to = $_uid ? $url->create('user/profile/edit', array('id' => $_uid, 'name' => $changedUserData['user_name'])) : $url->create('user/myprofile/edit');\n\t\t\t\tif($message) e107::getMessage()->addSuccess($message, 'default', true);\n\t\t\t\t$redirect->redirect($to);\n\t\t\t}\n\t\t\tunset($_POST);\n\t\t}\n\n\n\t\tif ($promptPassword) // User has to enter password to validate data\n\t\t{\n\t\t\t$this->renderPasswordForm($changedUserData,$changedEUFData);\n\t\t\treturn false;\n\t\t}\n\n\n\n\t\tif ($error)\n\t\t{\n\t\t\t$message = $this->compileErrors($extraErrors, $allData, $eufVals);\n\n\t\t//\tif(!empty($message))\n\t\t\t{\n\t\t\t\tif(deftrue('BOOTSTRAP'))\n\t\t\t\t{\n\t\t\t\t\techo e107::getMessage()->addError($message)->render();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$ns->tablerender($caption, $message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telseif($dataToSave === true) // --- User data has been updated here if appropriate ---\n\t\t{\n\n\t\t\t$testSessionMessage = e107::getMessage()->get(E_MESSAGE_SUCCESS, 'default', true); // only success in the session\n\n\t\t\tif($testSessionMessage) $message = implode('<br />', $testSessionMessage); // we got raw message - array\n\n\t\t\tif(empty($message))\n\t\t\t{\n\t\t\t\t$message = LAN_USET_41; // probably only extended fields updated.\n\t\t\t}\n\n \t\t\tif(deftrue('BOOTSTRAP'))\n\t\t\t{\n\t\t\t\techo e107::getMessage()->addSuccess($message)->render();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ns->tablerender($caption, $message);\n\t\t\t}\n\n\t\t}\n\n\n\n\t\t$this->renderForm($changedUserData);\n\n\t\treturn false;\n\t}\n\n\n\t/**\n\t * @param $extraErrors\n\t * @param $allData\n\t * @param $eufVals\n\t * @return string\n\t */\n\tprivate function compileErrors($extraErrors, $allData, $eufVals)\n\t{\n\t\t$temp = array();\n\t\t$userMethods = e107::getUserSession();\n\n\t\tif (count($extraErrors))\n\t\t{\n\t\t\t$temp[] = implode('<br />', $extraErrors);\n\t\t}\n\n\t\tif (count($allData['errors']))\n\t\t{\n\t\t\t$temp[] = validatorClass::makeErrorList($allData,'USER_ERR_','%n - %x - %t: %v', '<br />', $userMethods->userVettingInfo);\n\t\t}\n\n\t\tif (vartrue($eufVals['errors']))\n\t\t{\n\t\t\t$temp[] = '<br />'.validatorClass::makeErrorList($eufVals,'USER_ERR_','%n - %x - %t: %v', '<br />', NULL);\n\t\t}\n\n\t\treturn implode('<br />', $temp);\n\n\n\t}\n\n\n\t/**\n\t * @param $string\n\t * @return string\n\t */\n\tprivate function getValidationKey($string)\n\t{\n\t\treturn crypt($string, e_TOKEN);\n\t}\n\n\n\t/**\n\t * @param $changedUserData\n\t * @param $changedEUFData\n\t */\n\tprivate function renderPasswordForm($changedUserData, $changedEUFData )\n\t{\n\t\t$ns                 = e107::getRender();\n\t\t$updated_data       = e107::serialize($changedUserData,'json');\n\t\t$validation_key     = $this->getValidationKey($updated_data);\n\t\t$updated_data       = base64_encode($updated_data);\n\t\t$updated_extended   = e107::serialize($changedEUFData, 'json');\n\t\t$extended_key       = $this->getValidationKey($updated_extended);\n\t\t$updated_extended   = base64_encode($updated_extended);\n\n\t\t$formTarget = e107::getUrl()->create('user/myprofile/edit');\n\n\t\t$text = \"<form method='post' action='\".$formTarget.\"'>\n\t\t\t<table><tr><td>\";\n\n\t\t\t\tforeach ($_POST as $k => $v)\n\t\t\t\t{\n\t\t\t\t\tif (is_array($v))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($v as $sk => $sv)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$text .= \"<input type='hidden' name='{$k}[{$sk}]' value='{$sv}' />\\n\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$text .= \"<input type='hidden' name='{$k}' value='{$v}' />\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$text .= LAN_USET_21.\"</td></tr>\n\t\t\t\t<tr><td>&nbsp;</td></tr>\n\t\t\t\t<tr><td>\n\n\t\t\t\t<input type='password' class='form-control' name='currentpassword' value='' size='30' />\";\n\n\t\t\t\t$text .= \"\n\t\t\t\t<input type='hidden' name='updated_data' value='{$updated_data}' />\n\t\t\t\t<input type='hidden' name='updated_key' value='{$validation_key}' />\n\t\t\t\t<input type='hidden' name='updated_extended' value='{$updated_extended}' />\n\t\t\t\t<input type='hidden' name='extended_key' value='{$extended_key}' />\n\t\t\t\t<input type='hidden' name='e-token' value='\".defset('e_TOKEN').\"' />\n\t\t\t\t</td></tr>\n\t\t\t\t<tr><td>&nbsp;</td></tr>\n\t\t\t\t<tr><td style='text-align:center'>\n\t\t\t\t\".e107::getForm()->button('SaveValidatedInfo',1, 'submit', LAN_ENTER).\"\n\t\t\t\t</td></tr>\n\t\t\t</table>\n\t\t\t</form>\";\n\n\n\n\n\t\t\t$ns->tablerender(LAN_USET_39, $text);\n\n\t}\n\n\n\t/**\n\t * @param $changedUserData\n\t */\n\tprivate function renderForm($changedUserData)\n\t{\n\t\t$sql = e107::getDb();\n\t\t$ns = e107::getRender();\n\t\t$tp = e107::getParser();\n\t\t$userMethods = e107::getUserSession();\n\t\t$uuid = USERID;\n\t\t$qry = \"\n\t\tSELECT u.*, ue.* FROM #user AS u\n\t\tLEFT JOIN #user_extended AS ue ON ue.user_extended_id = u.user_id\n\t\tWHERE u.user_id=\".intval($uuid);\n\n\t\t$sql->gen($qry); // Re-read the user data into curVal (ready for display)\n\t\t$curVal=$sql->fetch();\n\t\t$curVal['user_class'] = varset($changedUserData['user_class'], $curVal['user_class']);\n\t\t$curVal['userclass_list'] = $userMethods->addCommonClasses($curVal, FALSE);\n\n\t\tif(!empty($_POST))\n\t\t{     // Fix for all the values being lost when there was an error in a field - restore from the latest $_POST values\n\t\t\t  // (Password fields have intentionally been cleared). If no error, there's an unset($_POST) to disable this block\n\t\t\tforeach ($_POST as $key => $val)\n\t\t\t{\n\t\t\t\tif ($key != 'class') { $curVal['user_'.$key] = $tp->post_toForm($val); }\n\t\t\t}\n\t\t\tforeach ($_POST['ue'] as $key => $val)\n\t\t\t{\n\t\t\t\t$curVal[$key] = $tp->post_toForm($val);\n\t\t\t}\n\t\t}\n\n\t\t$target = e107::getUrl()->create('user/myprofile/edit',array('id'=>USERID));\n\n\t\t$text = '<form method=\"post\" action=\"'.$target.'\" id=\"dataform\" class=\"usersettings-form form-horizontal\"  enctype=\"multipart/form-data\" autocomplete=\"off\">';\n\n\t\tif (e_QUERY == \"update\")\n\t\t{\n\t\t\t$text .= \"<div class='fborder' style='text-align:center'><br />\".str_replace(\"*\", \"<span class='required'>*</span>\", LAN_USET_9).\"<br />\".LAN_USET_10.\"<br /><br /></div>\";\n\t\t}\n\n\t\t// e107::scStyle($sc_style);\n\t\te107::getScBatch('usersettings')->setVars($curVal)->reset();\n\n\t\t$USERSETTINGS_EDIT = $this->getTemplate('edit');\n\t\t$USERSETTINGS_EDIT_CAPTION = $this->getTemplate('edit_caption');\n\n\t\t$text .= $tp->parseTemplate($USERSETTINGS_EDIT, true, $this->sc); //ParseSC must be set to true so that custom plugin -shortcodes can be utilized.\n\n\n\t\t$text .= \"<div><input type='hidden' name='_uid' value='{$uuid}' /></div>\n\t\t\t\t<input type='hidden' name='e-token' value='\".defset('e_TOKEN').\"' />\n\t\t</form>\n\t\t\";\n\n\t\t$caption = (isset($USERSETTINGS_EDIT_CAPTION)) ? $USERSETTINGS_EDIT_CAPTION : LAN_USET_39; // 'Update User Settings'\n\n\t\t$ns->tablerender($caption, $text);\n\n\n\t}\n\n\n\n\n\t//\n\t/**'\n\t * todo review and remove method if deemed appropriate\n\t * Delete a file from the public directories. Return TRUE on success, FALSE on failure.\n\t * Also deletes from database if appropriate.\n\t * @param $fname\n\t */\n\tprivate function deleteFile($fname)\n\t{\n\t\t/*\n\t\t $dir = 'avatars/';\n\n\t\t$sql = e107::getDb();\n\t\t$tp = e107::getParser();\n\n\t\t$fname = trim($fname);\n\t\tif (!$fname) return false;\n\n\t\tif (preg_match(\"#Binary (.*?)/#\", $fname, $match))\n\t\t{\n\t\t\treturn $sql -> db_Delete(\"rbinary\", \"binary_id='\".$tp -> toDB($match[1]).\"'\");\n\t\t}\n\t\telseif (file_exists(e_UPLOAD.$dir.$fname))\n\t\t{\n\t\t\tunlink(e_UPLOAD.$dir.$fname);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t\t*/\n\t}\n\n}\n\n$us = new usersettings_front;\nrequire_once(HEADERF);\n$us->init();\nrequire_once (FOOTERF);\n\n\n\n// If a field is required, returns a red asterisk\nfunction req($field)\n{\n\t$ret = \"\";\n\tif ($field == 2)\n\t{\n\t\t$ret = \"<span class='required'><!-- empty --></span>\";\n\t}\n\treturn $ret;\n}\n\n\n\n"], "filenames": ["usersettings.php"], "buggy_code_start_loc": [24], "buggy_code_end_loc": [1114], "fixing_code_start_loc": [24], "fixing_code_end_loc": [1113], "type": "CWE-326", "message": "usersettings.php in e107 through 2.3.0 lacks a certain e_TOKEN protection mechanism.", "other": {"cve": {"id": "CVE-2021-27885", "sourceIdentifier": "cve@mitre.org", "published": "2021-03-02T19:15:13.380", "lastModified": "2021-03-18T20:13:25.433", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "usersettings.php in e107 through 2.3.0 lacks a certain e_TOKEN protection mechanism."}, {"lang": "es", "value": "El archivo usersettings.php en e107 hasta la versi\u00f3n 2.3.0, carece de cierto mecanismo de protecci\u00f3n e_TOKEN"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-326"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:e107:e107:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.3.0", "matchCriteriaId": "A949387D-E5D5-4F96-93E5-F53496F7D159"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/161651/e107-CMS-2.3.0-Cross-Site-Request-Forgery.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/e107inc/e107/commit/d9efdb9b5f424b4996c276e754a380a5e251f472", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/e107inc/e107/releases", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/e107inc/e107/commit/d9efdb9b5f424b4996c276e754a380a5e251f472"}}