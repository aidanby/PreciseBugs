{"buggy_code": ["# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\nList all changes after the last release here (newer on top). Each change on a separate bullet point line\n\n## [2.10.8] - 2021-06-30\n\n### Changed\n\n- Pull translations from Transifex\n\n## [2.10.7] - 2021-06-29\n\n### Changed\n\n- Core: only consider lines from the same supplier as the behavior component\n\n## [2.10.6] - 2021-06-25\n\n### Fixed\n\n- Utils: fix MultiLanguageModelForm so language dependent filed will only be required if the language is required\n\n## [2.10.5] - 2021-06-21\n\n### Fixed\n\n- Xtheme: removed orderable boolean from async highlights plugin from being rendered\n\n## [2.10.4] - 2021-06-21\n\n### Changed\n\n- Admin: show taxless order total column in order list\n\n## [2.10.3] - 2021-06-15\n\n### Fixed\n\n- Importer: fix so the correct context is displayed on first request when selecting importer\n\n## [2.10.2] - 2021-06-11\n\n### Added\n\n- Xtheme: Add so snippets can have start of head content\n\n### Fixed\n\n- Core: fix so task don't require a identifier\n\n## [2.10.1] - 2021-06-07\n\n### Fixed\n\n- SimpleSupplier: always return products as managed by using a different queryset\n\n## [2.10.0] - 2021-06-07\n\n### Removed\n\n- Admin: remove the provides to allow adding extra fields to the Attribute form\n\n### Add\n\n- Core: Allow a supplier to have multiple modules\n- Core: add option to store tasks in the database to collect results\n\n### Changed\n\n- General: pull translation strings from Transifex\n- Admin: filter products in list and edit views according to product kind listing name\n- Core: suppliers don't have default supplier modules anymore\n- Importers: enable importers to run asynchronously\n- Importers: change the admin views to show the list of import processes\n\n### Fixed\n\n- Admin: fix picotable overflow issue\n- Notify: always overrride the current notification data with the new one\n\n## [2.9.2] - 2021-05-26\n\n### Fixed\n\n- General: replace hash() with sha1() as Python's hash() function doesn't have a stable result across processes\n- Core: use SHA-1 to hash cache keys as Python's hash() function doesn't have a stable result across processes\n\n### Changed\n\n- Cache product orderability and prices using a list of user groups instead of per contact\n- Pull translation strings from Transifex\n\n## [2.9.1] - 2021-05-24\n\n### Fixed\n\n- Admin: add ordering to attribute filter, because of frontend related error\n\n## [2.9.0] - 2021-05-19\n\n### Added\n\n- Admin: add a method in AdminModule that allows returning help texts for permissions\n\n### Fixed\n\n- Notify: add notify styles to the script editor iframe to fix email editor size\n- Importer: use more bites in order to detect csv dialect in importer\n- Admin: save the current user menu using the current language\n\n### Changed\n\n- Pull DE translations from Transifex\n- Xtheme: allow async plugin to have orderable only flag set\n- Xtheme: use the current language as part of the plugins cache key\n\n## [2.8.3] - 2021-05-17\n\n### Fixed\n\n- Xtheme: use the context while generating the cache key\n- Xtheme: do not crash the whole site when a plugin fails to render\n- Admin: Force to parse reason as string before encoding the url\n\n## [2.8.2] - 2021-05-14\n\n### Fixed\n\n- Admin: force escape help texts which can contain `\"` characters\n- Admin: show translation fields from all polymorphic models available\n- Xtheme: hash the cache key to prevent strings larger then 250 chars\n\n## [2.8.1] - 2021-05-11\n\n### Fixed\n\n- Xtheme: encode cache key into base64 to prevent issues with memcache\n\n## [2.8.0] - 2021-05-11\n\n### Changed\n\n- General: make some plugins cacheable\n- Xtheme: add attribute on every plugin to indicate whether it can be cached or not\n\n### Removed\n\n- Xtheme: removed the SHUUP_XTHEME_USE_PLACEHOLDER_CACHE setting and do not cache the entire placeholder content\n\n### Fixed\n\n- Core: implement choice attribute getter and setter correctly\n- Admin: collect translation strings from Shepard Tour\n\n## [2.7.3] - 2021-05-11\n\n### Fixed\n\n- Admin: use correct translated label syntax for form fields\n- Front: Remove untranslated Error! prefix in alert messages\n- Campaigns: fix the translation string format\n\n### Changed\n\n- General: use gettext_lazy to make sure translations work\n- Front: unify the Customer Information title across the dashboard\n- Front: bump bootstrap-select and use translated strings while initializing it\n\n## [2.7.2] - 2021-05-05\n\n### Fixed\n\n- Admin: Fix the Select2 translations strings\n- General: Collect translation strings correctly\n\n### Changed\n\n- General: Pull translation strings\n\n## [2.7.1] - 2021-05-04\n\n### Fixed\n\n- Core: do not use message tags as part of the message as it doesn't contain translated string\n- Core: fix the python string format syntax to format after resolving the translation string\n\n### Changed\n\n- Settings: add Portuguese (Portugal) as a language option\n\n## [2.7.0] - 2021-04-29\n\n### Added\n\n- Admin: New type of attribute: CHOICES\n- Admin: Selection of multiple choices from attribute for product\n- Front: Product filter by attribute choices\n\n### Changed\n\n- Pull strings from Transifex\n\n### Fixed\n\n- Reports: convert string into translated string\n- Update requirements to support Python3.6+\n- Fix mass editing validation for ManyToManyField fields.\n\n## [2.6.5] - 2021-04-22\n\n### Changed\n\n- Front: consider the supplier from context or kwargs while reversing the product url\n\n### Fixed\n\n- Front: Fix the order detail template\n- Admin: Pass languages to the TaxClassFormPart to show multilanguage forms\n\n## [2.6.4] - 2021-04-19\n\n### Changed\n\n- Additional German translation strings\n\n## [2.6.3] - 2021-04-13\n\n### Changed\n\n- Update German translation strings\n\n## [2.6.2] - 2021-04-13\n\n### Fixed\n\n- Front: pin LESS version to prevent build breaks\n\n## [2.6.1] - 2021-04-13\n\n### Changed\n\n- Front: add extra head block to base template\n- Core: allow refunds creation when the order is complete\n- Admin: show the product picture in order item list\n- Admin: change so TaxClassEditView is a FormPartView\n- Admin: Picotable to scroll in container on overflow rather, than entire screen scroll\n\n### Fixed\n\n- Front: Fix error that occurred while trying to register as a company\n- Front: fix non existent macro import\n- Core: Fix error that occurred when creating an order with a product which SKU was longer than 48 characters.\n- Admin: Multiple duplicate images being saved when image is uploaded before product is saved\n\n## [2.6.0] - 2021-03-29\n\n### Changed\n\n- Admin: Improve the copy product functionality\n\n### Added\n\n- Admin: add number of received orders in orders menu\n- Admin: add contact CSV exporter\n- CORE: Add .jsx support for shuup_makemessages command\n\n### Fixed\n\n- Admin: prevent exporting products that are not accessible by the current user\n- Fix 'Customize Your Admin Menu' redirecting to the supplier specific edit page on saving.\n- Admin: Fix picotable mobile styling to default to full-width\n- Front: Fail cleanly when visiting a product page without supplier\n- Fix Docker build issues with the development compose file.\n\n## [2.5.0] - 2021-03-22\n\n### Changed\n\n- Front: Add so `basket.get_final_lines(with_taxes=True)` gets called after selecting shipping- and payment method.\n  Reason for this is so all the taxes gets calculated before end customers fills in their payment details\n- Core: undeprecate signals for ShopProduct model\n\n### Added\n\n- Core: add attribute in Carrier model to control whether to manage shipments using default behavior\n- Admin: add shipment list view to list all shipments\n\n### Fixed\n\n- Notify: Fix so there is no 500 error when accessing EmailTemplate settings page\n- Taxes: fallback location to billing address when shipping address is not available\n- Importer: Ignore rows without any data\n\n## [2.4.0] - 2021-03-02\n\n### Added\n\n- Admin: add option to hide font selection and always paste plain text in summernote editors\n\n### Changed\n\n- Core: move refund order line logic to tax module\n  - Since each refund line you need to take care of the taxes it is\n  more logical if the tax module handles the whole thing. With some\n  3rd party taxation tool you need an option to handle refund taxes\n  in different way.\n\n### Fixed\n\n- Added missing labels to product category and supplier fields\n\n## [2.3.18] - 2021-03-01\n\n### Added\n\n- Front: create shipment sent notify event\n- Core: add shipment tracking url to shipment model\n- Admin: add shipment action to mark a shipment as sent\n\n### Changed\n\n- Admin: fix product module not to fail on object does not exists\n- Front: update media upload URL from \"media-upload/\" to \"upload-media/\"\n- Core: bump attribute name to 256 characters\n\n## [2.3.17] - 2021-02-23\n\n### Fixed\n\n- Core: Adding normal products with only deleted children to basket\n\n### Removed\n\n- Front: remove templatecache around basket partial as not stable with custom baskets\n\n## [2.3.16] - 2021-02-18\n\n### Fixed\n\n- Xtheme: fix wrong queryset that was fetching different products from the selection\n\n## [2.3.15] - 2021-02-17\n\n### Changed\n\n- Admin: Disable scrolling on jquery datetime pickers\n- Core: Turn variation parent mode back to normal if it has no non-deleted children\n- Core: add cached property groups_ids for Contact\n- Core: add lru_cache to display unit\n- Core: make some Contact properties cached\n- Front: optimize queries for orderable variations fetch\n- Core: set shop and product for shop instance to prevent query\n- Front: prefetch sales units for category view\n- Lock cryptography version for test builds\n- Use shop instead theme settings shop when initializing theme\n- Xtheme: save current theme to request for later usage\n- GDPR: add lru_cache for shop_setting getter\n\n### Fixed\n\n- Admin: fix bug in user permission view\n- Do not rely on STATIC_URL and MEDIA_URL while formatting static and media urls\n\n## [2.3.14] - 2021-02-04\n\n- Front: add template cache to basket partial\n- Core: avoid unnecessary touching to basket customer \u2026\n- Core: cache basket attributes while get and add cache key attribute \u2026\n- Front: skip front middleware for static and media\n- Core: add makemessages support for do and cache templatetags\n- Update license header for 2021\n\n## [2.3.13] - 2021-01-28\n\n### Added\n\n- Admin: Add an open/close all groups button to 'Granular Permission Groups' list.\n\n### Fixed\n\n- Admin: Update styling for media browser\n- Admin: Ensure media browser images are squares without cropping\n- Xtheme: fix sortable import for static resources\n- Admin: Gracefully handle the error when trying to delete a PROTECTED MediaFolder.\n\n## [2.3.12] - 2021-01-26\n\n### Added\n\n- Setup: add .html to MANIFEST.in\n- Admin: Add text truncate CSS to user dropdown if the user's username\n  gets too long and display only a user icon on mobile screens\n- Admin: always display the dashboard link in the main navigation as the first item\n- Save basket just before starting the order creation.\n  This ensures we have latest basket there on store\n- Save basket after shipping or payment method is saved.\n- Save basket after shipping or billing address is saved. For\n  saving the addresses to basket data\n- Add option to add log entries linked to stored baskets\n- Add detail page for carts\n\n### Changed\n\n- Admin: Change visit shop link from an icon to a button with text\n- Hide \"finished\" carts by default\n- Modify carts list to show latest cart first\n\n### Removed\n\n- Admin: Remove dashboard and home icon links from top menu\n- Remove the delay filter as useless. No need to hide carts\n\n## [2.3.11] - 2021-01-25\n\n### Added\n\n- Core: add verbose_name to shop product so we can translate it\n- Core: add middleware provides to the basket command handler\n- Core: add provides to retrieve properties from order or order source\n- Front: render subscription options in basket template\n- Core: add provider to retrieve subscription options for a given product\n\n### Changed\n\n- Front: render basket and order line properties using the `front_line_properties_descriptor` provides\n- Admin: change the product files form part icon to a file icon\n- Core: cache language utils methods using LRU\n\n## [2.3.10] - 2021-01-22\n\n- Notify: make email template form use code editor with preview\n- Notify: make email action body use code editor with preview\n- Admin: add code editor with preview widget\n- Notify: Remove breadcrumbs from editor and add save button on top\n- Notify: make editor close button to Close instead Done\n- Add related name to package links to enable better queryset performance\n- Ensure migrations are fine for longer log entry fields\n\n## [2.3.9] - 2021-01-19\n\n### Changed\n\n- Admin: add UX improvements through small style updates\n\n### Fixed\n\n- Admin: add apply filters button and display active filters counter badge\n  - Do not save and refresh Picotable lists on filter change, but wait\n  that the user selects the \"Apply filter\" option. Also show badge for\n  active filters to indicate that some content is filtered out.\n  Consider \"_all\" as not filter.\n- Xtheme: fix summernote icons by using the original summernote css file\n\n## [2.3.8] - 2021-01-13\n\n- Front: fix with the product images on price update\n  - patches previous v2.3.7 release\n\n## [2.3.7] - 2021-01-12\n\n- Front: improve async product carousel breakpoints\n  - Also add option to easily override breakpoints by\n    re-defining the breakpoint variable.\n- Front: optimize child product orderability checks a bit\n- Front: add option to replace product detail context\n- Front: optimize rendering images for variation products\n- Core: optimize price range calculations\n\n## [2.3.6] - 2021-01-08\n\n### Added\n\n- Admin: add mass action to send password reset emails to selected users\n- Notify: send notification when user request to reset password\n- Core: remove the dependency of shuup.notify while resetting user's password\n- Core: add signal that is triggered when user request a password reset email\n\n## [2.3.5] - 2021-01-07\n\n- Core: unify tax number max length at models\n  - Also good practice would be not to validate tax number\n  on model level but instead at the form since tax number\n  format varies per country/region.\n\n## [2.3.4] - 2021-01-06\n\n### Changed\n\n- Xtheme: use the shop provider instead of falling back to first shop\n- Admin: cache the user permissions in the user object\n- Admin: make shop provider cache the shop in the request\n- Xtheme: add option to disable placeholder cache\n  - Use setting SHUUP_XTHEME_USE_PLACEHOLDER_CACHE = True for this\n\n### Removed\n\n- Core: remove GB from countries in European Union\n\n\n## [2.3.3] - 2021-01-05\n\n- Patches v2.3.2 a bit around the xtheme editing\n\n- Xtheme: add Jinja markup in custom snippet type\n\n\n## [2.3.2] - 2021-01-04\n\n### Changed\n\n- GDPR: hide consent immediately on accept\n- Notify: Make HTML default format for emails\n- Improve the way the cache is bumped when order is created and changed\n\n### Fixed\n\n- Admin: fix missing `tr` closing tags\n\n### Removed\n\n- Notify: Remove HTML editor from notifications since summernote does not\nfunction Jinja syntax very well and for example for-loops and ifs\ncause easily broken notifications.\n\n\n## [2.3.1] - 2020-12-28\n\n### Changed\n\n- Admin: MultiselectAjaxView returns ordered by name choices\n\n### Fixed\n\n- Fix `0068_help_text_improvements` migration file to have the correct field char size: 128\n- Fix _vertical_phases.jinja incorrectly targets all forms\n- Fix initial value of Choose to register form\n\n## [2.3.0] - 2020-12-16\n\n### Added\n\n- Dashboard: Sorting of dashboard items by ordering number\n- Xtheme: add option to set a custom cell width in placeholders\n\n### Changed\n\n- Admin: set product default price value initial value to zero\n\n### Fixed\n\n- Admin: Fix multiple translations returned when using values_list on translated field\n- Front: Fix so mass and measurements unit is displayed in same unit as in the backend\n\n### Removed\n\n- Product variation management. [Use this instead](https://pypi.org/project/shuup-product-variations/).\n\n## [2.2.11] - 2020-12-08\n\n### Fixed\n\n- SimpleCMS: Show all CMS pages for authenticated users\n  when there is no group filter attached to the page\n\n## [2.2.10] - 2020-12-04\n\n### Fixed\n\n- GDPR: do not create consent for anonymous user in checkout\n\n\n## [2.2.9] - 2020-11-23\n\n### Changed\n\n- Core: Increase field lengths in *LogEntry models\n  - Add an index to the indentifier for faster querying.\n  - Use the same error prevention measures for message than is done for\n    identifier in _add_log_entry() for consistency.\n\n### Fixed\n\n- Core: Fix `ProtectedError` when deleting a `Manufacturer` which was still\n  connected to product(s).\n\n\n## [2.2.8] - 2020-11-23\n\n### Added\n\n- Add font size 16 to summernote text editor\n\n### Fixed\n\n- GDPR: make sure to return a blank list in the `get_active_consent_pages`\n  method when there is no page to consent\n\n\n## [2.2.7] - 2020-11-20\n\n### Fixed\n\n- Admin: do not add/remove shop staff member while saving a staff user\n\n\n## [2.2.6] - 2020-11-17\n\n### Added\n\n- Include products belonging to child categories of filtered category\n\n### Changed\n\nAdmin: do not allow non-superusers manage superusers\n  - Do not show is_superuser field for non-superusers no matter\n    who they are editing\n  - Do not show superuser column in list since the superusers are\n    already filtered out from non-superusers who are main people\n    using the admin panel.\n\n\n## [2.2.5] - 2020-11-12\n\n### Fixed\n\n- Front: force recalculate lines after setting the payment and shipping methods to the basket in checkout phase\n\n### Changed\n\n- Don't display taxless price when it's equal to taxful in checkout\n\n### Added\n\n- SimpleCMS: Add field to limit a page availability by permission group\n\n## [2.2.4] - 2020-11-09\n\n### Fixed\n\n- Core: Fix basket implementation that was using the same memory\nobject for all baskets instances in the same process\n\n## [2.2.3] - 2020-11-05\n\n### Fixed\n\n- Add missing id field to the media forms\n\n\n## [2.2.2] - 2020-11-03\n\n### Fixed\n\n- Prevent duplicate images in product media form\n- Do not render duplicate hidden media form field\n\n\n## [2.2.1] - 2020-11-02\n\n### Changed\n\n- Update French, Finnish and Swedish translations\n- Change the Supplier.objects.enabled() filter to only return approved suppliers\n\n### Changed\n\n- Admin: Show a loader in place of picotable when a request is pending.\n\n## [2.2.0] - 2020-10-23\n\n### Possible breaking change\n\n- When updating to this double check your project filters around supplier are working\n  after this Supplire shop->shops change.\n\n### Changed\n\n- Admin: change the supplier views to update the approved flag for the current shop only\n- Core: change the Supplier object manager to consider the approved flag for the given shop\n\n### Added\n\n- Core: add new module SupplierShop to store thre M2M relationship between the supplier\nand the shop with additional attributes\n\n## [2.1.12] - 2020-10-21\n\n### Fixed\n\n- Importer: fix the product importer to prevent parent sku being the current product or other variation child\n\n## [2.1.11] - 2020-10-15\n\n### Added\n\n- Add Spanish and French (CA) translations from Transifex\n- Notify: Add a new `attributes` attribute to `shuup.notify.base.Variable` for showing examples\n  of which attributes can be accessed in the script templates.\n- Notfiy: Show some `Order` related attributes in the notify templates.\n\n### Fixed\n\n- Core: include arbitrary refunds for max refundable amount\n- Admin: select product variation in popup window\n- Importer: ignore None columns while importing files\n- Admin: Show more descriptive error messages in the media uploader in some situations.\n\n### Changed\n\n- Update Finnish and Swedish translations from Transifex\n- Importer: add option to import product variations\n  - Add option to import product variations\n  - Improve handle stock to get supplier by supplier name and\n    set the supplier stock managed and update the module identifier.\n  - Improve handle stock to set the logical count to desired quantity\n    instead adding new stock for the amount. This should help sellers\n    to keep their product stock value correct.\n- Preserve newlines in vendor and product descriptions even when\n `SHUUP_ADMIN_ALLOW_HTML_IN_PRODUCT_DESCRIPTION` and `SHUUP_ADMIN_ALLOW_HTML_IN_VENDOR_DESCRIPTION` are `False`.\n- Importer: log errors in the importer and use specific exception classes instead of using Exception\n- Notify: make the default script language be the fallback from Parler\n- Admin: Hide the 'Root' folder from users that do not have the `\"media.view-all\"` permission.\n\n\n## [2.1.10] - 2020-09-29\n\n### Fixed\n\n- Front: fix typo in pagination\n\n### Translations\n\n- Update Finnish and Swedish translations\n\n\n## [2.1.9] - 2020-09-23\n\n### Fixed\n\n- Fix button that removes coupon from the basket by using the correct JS event property\n\n## [2.1.8] - 2020-09-15\n\n- Update translations strings\n- Importer: fix product CSV importer to better match the headers\n\n\n## [2.1.7] - 2020-09-11\n\n- Admin: improve product variation management. This release purely\n  amends release 2.1.6.\n\n\n## [2.1.6] - 2020-09-11\n\nAdmin: add supplier check to product list and edit views\nAdmin: improve product variation management\n\n  Remove activate template form field as confusing.\n\n  1. Now when add new template:\n    - New empty template is created\n\n  2. When you have template selected:\n    - Product variations are saved based on the form\n    - Variation options are updated to the selected template\n\n  3. When template is not selected:\n    - Product variations are saved based on the form\n\n\n## [2.1.5] - 2020-09-08\n\n### Fixed\n\n- Requirements: require Markdown>=3,<4 instead <3\n- Xtheme: Fix social media plugin form initial data population.\n\n\n## [2.1.4] - 2020-09-08\n\n### Fixed\n\n- Xtheme: fix social media plugin form populate\n- GDPR: Fix anonymization error when an order of a contact had no shipping or billing address.\n\n\n## [2.1.3] - 2020-08-28\n\n### Fixed\n\n- Xtheme: fix model choice widget for plugins (django 2)\n\n\n## [2.1.2] - 2020-08-26\n\n### Fixed\n\n- Xtheme: fix editor template issue\n- Simple CMS: make sure to pass optional parameters through kwargs in form\n\n\n## [2.1.1] - 2020-08-26\n\n### Added\n\n- Admin: add option to delete attributes\n\n### Fixed\n\n- Xtheme: fix editor template issue and make sure to pass optional parameters through kwargs in form\n- Notify: unescape email subject and body to prevent sending broken characters in emails\n\n\n## [2.1.0] - 2020-08-24\n\n### Added\n\n- shuup.notify: add notification_email_before_send signal to SendMail\n- shuup.notify: add event identifier to Context\n\n\n## [2.0.8] - 2020-08-24\n\n### Fixed\n\n- Prevent crashing when trying to cache an unpicklable value.\n\n\n## [2.0.7] - 2020-08-21\n\n### Fixed\n\n- Fix passing a `reverse_lazy()` URL as the `upload_url` argument for `FileDnDUploaderWidget`.\n\n\n## [2.0.6] - 2020-08-18\n\n### Changed\n\n- Admin: Make the order editor keep the suppliers of non-product order lines intact.\n\n### Fixed:\n\n- Admin: Fix the edit button on the order editor.\n\n\n## [2.0.5] - 2020-08-16\n\n### Added\n\n- Admin: user and permission based access to media folders\n\n  This means that all vendors can have their own root folder and do what every they want in that folder.\n  But it also allows the admin to give viewing access to one folder for all suppliers.\n\n\n## [2.0.4] - 2020-08-07\n\n- Testing: add missing migrations\n\n\n## [2.0.3] - 2020-08-07\n\n- CMS: add missing migrations\n\n\n## [2.0.2] - 2020-08-07\n\n### Changed\n\n- Removed Django 1.11 compatible code from the code base\n\n### Fixed\n\n- Admin: fix logout view that was loading the template from Django instead of custom template\n- Admin: return `None` when the order source was not correctly initialized in JsonOrderCreator\n- Core: add parameter in shuup_static to load the version of a given package\n\n\n## [2.0.1] - 2020-08-04\n\n- Add initial support for Django 2.2\n\n\n## [1.11.10] - 2020-08-04\n\n- Fix issue on arranging menu after reset which sets the configuration None\n  which in the other hand is hard to update as it is not dict.\n\n\n## [1.11.9] - 2020-08-04\n\n- Admin: add option to arrange menu for superuses, staff and suppliers\n\n  For now it was only possible to arrange menu per user which is not\n  sufficient while the menu needs to be arranged for the whole group\n  of people like shop staff or vendors.\n\n  Allow to create menu custom menu for superusers, staff or suppliers,\n  but remain the possibility to still arrange the menu per user.\n\n  Add option to translate each menu arranged for these groups since\n  not all vendors/suppliers necessary speak same language.\n\n\n## [1.11.8] - 2020-07-31\n\n### Fixed\n\n- Fix admin order edit tool to use correct id for supplier query\n- Admin: limit the Manufacturer delete queryset per shop\n\n### Added\n\n- Notify: added email template object to store reusable email templates for SendEmail actions\n  This contains a migration step to move all old body template field to use email templates.\n\n### Changed\n\n- Xtheme: move CodeMirror JS lib dependence to Admin\n- Sanitize product description on save if `SHUUP_ADMIN_ALLOW_HTML_IN_PRODUCT_DESCRIPTION` is set to `False`\n\n## [1.11.7] - 2020-07-23\n\n### Added\n\n- Core: Add dynamic measurement unit system\n  - New settings for specifying units:\n    - `SHUUP_MASS_UNIT`\n    - `SHUUP_LENGTH_UNIT`\n  - New function for getting the volume unit: `shuup.core.utils.units.get_shuup_volume_unit`\n\n### Changed\n\n- **BREAKING**: Change `Shipment` default weight unit from `kg` to `g`\n- **BREAKING**: Change `Shipment` default volume unit from `m3` to `mm3`\n- **BREAKING**: Change `ShipmentProduct` default volume unit from `m3` to `mm3`\n\n### Removed\n\n- Remove 'known unit' validation from `MeasurementField`, it can contain any units now\n\n## [1.11.6] - 2020-07-22\n\n### Changed\n\n- Front: Add priority attribute to base order form to enable using precedence\n\n## [1.11.5] - 2020-07-07\n\n### Added\n\n- Add signal when an email is sent by a notification\n\n## [1.11.4] - 2020-07-06\n\n- Fix issue with browser tests\n\n## [1.11.3] - 2020-07-04\n\n### Added\n\n- Add `Dockerfile-dev` for development\n- Add Docker instructions to docs\n\n### Changed\n\n- Add theme for the shop in `shuup_init`\n- Make the shop not be in maintenance mode in `shuup_init`\n- Make `Dockerfile` use `shuup` from PyPi for faster build time\n\n## [1.11.2] - 2020-07-03\n\n- Move workbench sqlite database location for upcoming Docker setup\n\n## [1.11.1] - 2020-07-03\n\n### Added\n\n- Admin: Add settings for controlling allowing HTML in product and vendor descriptions\n\n\n## [1.11.0] - 2020-07-02\n\n### Changed\n\n- Importer: add context object while initializing a importer class\n- Core: use UUID in basket IDs to prevent possible duplicates\n- Core: save basket shipping and billing address as dictionary when id is not available\n- Front: remove the custom _load() implementation from the basket as it is the same as the core\n- Core: ignore lines that are not from the given source while calculating taxes\n- Campaigns: do not apply campaigns in baskets configured to a supplier\n- Admin: change service admin to list only providers that the current user can access\n- Use UUID4 while generating order line ids by default\n- Admin: Improve message banners, by:\n    - Resetting the timeout for hiding the messages when a new message is added.\n    - Immediately clearing the already hidden messages a when new one is added.\n    - Not hiding messages when clicking just random background elements.\n    - Allowing dismissing all of the messages by clicking any one of them anywhere.\n\n### Added\n\n- Admin: add improved product copy\n- Core: add task runner to support running tasks using 3rd party services like Celery\n- Core: add shops and supplier to ServiceProvider and Service models\n- Front: add feature for checkout phases to spawn extra phases\n- Add custom get_ip method and use it everywhere\n- Importer: add permissions for all the diffrent types of importers\n- Importer: add context class to data importer\n\n### Removed\n\n- Travis jobs for Django 1.8 and 1.9\n\n### Fixed\n\n- Removed the kind prefix from feedback messages using Django messages to prevent duplicate strings.\n- Fixed the way the permissions identifier are split in admin\n- Fixed issue that was importing User model directly\n- Core: changed `del` basket command handler to not try to parse the basket line into an integer\n\n\n## [1.10.16] - 2020-06-03\n\n- Simple CMS: Fix a bug with the page links plugin\n\n## [1.10.15] - 2020-06-02\n\n### Changed\n\n- Front: Ensure company name and tax number is set to both billing and shipping address same way\nas when filled through company form when customer is not logged in. Company name and tax number\nat order addresses seems to help with some taxation logic as well as makes things more consistent.\n\n### Fixed\n\n- Admin: Make sure related custom columns are added accrodingly. Fix issue with filtering through columns\nthat are by default hidden\n\n## [1.10.14] - 2020-05-27\n\n### Fixed\n\n- Front: only show carousel title when there is one\n\n### Changed\n\n- Notify: Add AccountActivation event. AccountActivation event is\n  triggered only when the user is activated for the first time.\n- Front: improve next parameter with registration. Check GET\n  parameter first and then fallback to POST data.\n\n## [1.10.13] - 2020-05-20\n\n- Admin: fix width issue with picotable images\n- Admin: fix bugs in order edit and improve it one step closer to\n  multivendor world. Now supports situation when vendors does not\n  share products.\n     - Add option to make shipping and payment method optional\n     - Add supplier to pricing context\n     - Show supplier name on product column\n     - Make auto add for product select false by default\n     - Fix product select2 missing URL and data handler since\n       the whole ajax method was passed as attrs.\n     - Add option to open/close collapsed content sections in mobile\n- Core: add option to enable order edit for multiple vendors\n- Front: do not stack history on product list when filters are changed.\n  Instead replace state so back-buttons works nicely.\n- Front: prevent image Lightbox touching history so you do not need\n  to click back 6 times after you have viewed all images.\n\n## [1.10.12] - 2020-05-05\n\n### Added\n\n- Admin: add error message when upload fails. At media queue complete do not\n  resave product media if the file-count has not changed. This for example\n  prevents media save when the upload itself fails.\n- Admin: add option to override dropzone upload path by using data attribute\n- Admin: add upload path to browser URLs and use it to fallback on media\n  uploads when the actual media path is not available.\n- Admin: Ability to delete manufacturer\n- Admin: Ability to login as the selected contact if it's a user\n\n### Fixed\n\n- Admin: Now when activating/deactivating user it's contact will also change\n- Admin: New notification for when a account get's reactivated\n\n## [1.10.11] - 2020-04-23\n\n### Fixed\n\n- Discounts: create different admin module for archived discounts to fix breadcrumbs\n- Fix product pagination by not overriding the state with undefined values\n\n### Fixed\n\n- Middleware: fix so it trys to take the users timezone first, then the suppliers, last the projects TIME_ZONE\n\n### Changed\n\n- Front: customize sort options through settings\n\n## [1.10.10] - 2020-03-24\n\n### Fixed\n\n- Admin: Notification name when deleteing it\n- Admin: Update contact list so that it only shows customers by default\n- Front: Fix typo\n\n### Changed\n\n- Front: Add supplier choice to best selling product context function\n- Admin: allow sorting categories by name\n- Admin: show product orderability errors as list\n\n\n## [1.10.9] - 2020-03-24\n\n### Fixed\n\n- Admin: remove pinned /sa/ URL from scripts to support dynamic admin URLs\n- Admin: Fix graphical (incorrect indent) bug in Product / Stock Management\n\n## [1.10.8] - 2020-03-20\n\n### Changed\n\n- Admin: add spinner and progressbar options components through Bootstrap 4.\n\n### Fixed\n\n- Issue running category filter browser test with Travis\n\n\n## [1.10.7] - 2020-03-09\n\n### Fixed\n\n- Admin: remove pinned /sa/ URL from scripts to support dynamic admin URLs\n- Front: keep the current query string parameters as the initial state\n  when refreshing product filters.\n\n### Changed\n\n- Admin: fix page jumps after reaload\n- Admin: make browser urls support urls with parameters\n\n## [1.10.6] - 2020-02-28\n\n### Changed\n\n- Core: supplier name max length to 128 from 64\n\n## [1.10.5] - 2020-02-27\n\n### Added\n\n- Add option to send notification event at password recovery\n\n### Changed\n\n- Improve the admin modals to use flexbox and work better on small devices\n\n### Fixed\n\n- Admin: fix password recovery success URL\n- Picotable: render the filters button on small devices,\n  even when there is no data, to allow resetting filters\n\n## [1.10.4] - 2020-02-22\n\n### Changed\n\n- Make Admin messages dismissible\n\n### Fixed\n\n- Admin: Fix search results overflowing the canvas\n\n## [1.10.3] - 2020-02-21\n\n### Fixed\n\n- Admin: fix bug when uploading product media\n\n## [1.10.2] - 2020-02-19\n\n### Added\n\n- Admin: add option to impersonate staff users\n- Notify: add option to delete notify scripts\n- Admin: Allow shop staff to impersonate regular users\n- Notify: Add BCC and CC fields to SendEmail notification action.\n- Add the CHANGELOG.md to the root of the code base.\n\n### Changed\n\n- Xtheme: Improve template injection by checking not wasting time invoking regex for nothing\n- Add `MiddlewareMixin` to all middlewares to prepare for Django 2.x\n- Notify: Changed the Email topology type to support comma-separated list of emails when using constants.\n- Front: skip product filter refresh if filters not defined\n- GDPR: change \"i agree\" button to \"i understand\"\n\n### Fixed\n\n- Front: fix notification template default content\n- Admin: improve primary image fallback for product\n- Fixed the placeholder of Select2 component in Admin\n- FileDnDUploader: Add check for the `data-kind` attribute of the drop zone. If the data-kind is\n  `images`, add an attribute to the hidden input that only allows images to be uploaded.\n- Front: fix bug with imagelightbox\n- CMS: Free page URL on delete\n\n## Older versions\n\nFind older release notes [here](./doc/changelog.rst).\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom __future__ import unicode_literals\n\nimport inspect\nimport json\nimport six\nimport warnings\nfrom django.conf import settings\nfrom django.contrib.auth.views import redirect_to_login\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.http.response import HttpResponseForbidden\nfrom django.utils.encoding import force_str, force_text\nfrom django.utils.http import urlencode\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom shuup.admin.module_registry import get_modules\nfrom shuup.admin.shop_provider import get_shop\nfrom shuup.admin.utils.permissions import get_missing_permissions\nfrom shuup.utils import importing\nfrom shuup.utils.django_compat import NoReverseMatch, URLPattern, get_callable, is_authenticated, reverse\nfrom shuup.utils.excs import Problem\n\ntry:\n    from urllib.parse import parse_qsl\nexcept ImportError:  # pragma: no cover\n    from urlparse import parse_qsl  # Python 2.7\n\n\nclass AdminRegexURLPattern(URLPattern):\n    def __init__(self, regex, callback, default_args=None, name=None, require_authentication=True, permissions=()):\n        self.permissions = tuple(permissions)\n        self.require_authentication = require_authentication\n\n        if callable(callback):\n            callback = self.wrap_with_permissions(callback)\n\n        from django.urls import re_path\n\n        repath = re_path(regex, callback, default_args, name)\n        pattern = repath.pattern\n        super(AdminRegexURLPattern, self).__init__(pattern, callback, default_args, name)\n\n    def _get_unauth_response(self, request, reason):\n        \"\"\"\n        Get an error response (or raise a Problem) for a given request and reason message.\n\n        :type request: Request.\n        :param request: HttpRequest\n        :type reason: Reason string.\n        :param reason: str\n        \"\"\"\n        if request.is_ajax():\n            return HttpResponseForbidden(json.dumps({\"error\": force_text(reason)}))\n        error_params = urlencode({\"error\": force_text(reason)})\n        login_url = force_str(reverse(\"shuup_admin:login\") + \"?\" + error_params)\n        resp = redirect_to_login(next=request.path, login_url=login_url)\n        if is_authenticated(request.user):\n            # Instead of redirecting to the login page, let the user know what's wrong with\n            # a helpful link.\n            raise (\n                Problem(_(\"Can't view this page. %(reason)s\") % {\"reason\": reason}).with_link(\n                    url=resp.url, title=_(\"Log in with different credentials...\")\n                )\n            )\n        return resp\n\n    def _get_unauth_reason(self, request):\n        \"\"\"\n        Figure out if there's any reason not to allow the user access to this view via the given request.\n\n        :type request: Request.\n        :param request: HttpRequest\n        :rtype: str|None\n        \"\"\"\n        if self.require_authentication:\n            if not is_authenticated(request.user):\n                return _(\"Sign in to continue.\")\n            elif not getattr(request.user, \"is_staff\", False):\n                return _(\"Your account must have `Access to Admin Panel` permissions to access this page.\")\n            elif not get_shop(request):\n                return _(\"There is no active shop available. Contact support for more details.\")\n\n        missing_permissions = get_missing_permissions(request.user, self.permissions)\n        if missing_permissions:\n            return _(\"You do not have the required permissions: %s\") % \", \".join(missing_permissions)\n\n    def wrap_with_permissions(self, view_func):\n        if callable(getattr(view_func, \"as_view\", None)):\n            view_func = view_func.as_view()\n\n        @six.wraps(view_func)\n        def _wrapped_view(request, *args, **kwargs):\n            unauth_reason = self._get_unauth_reason(request)\n            if unauth_reason:\n                return self._get_unauth_response(request, unauth_reason)\n            return view_func(request, *args, **kwargs)\n\n        return _wrapped_view\n\n    @property\n    def callback(self):\n        if self._callback is not None:\n            return self._callback\n\n        callback = get_callable(self._callback_str)\n        self._callback = self.wrap_with_permissions(callback)\n        return self._callback\n\n    @callback.setter\n    def callback(self, value):\n        self._callback = value\n\n\ndef admin_url(regex, view, kwargs=None, name=None, prefix=\"\", require_authentication=True, permissions=None):\n    if permissions is None:\n        permissions = (name,) if name else ()\n\n    if isinstance(view, six.string_types):\n        if not view:\n            raise ImproperlyConfigured(\"Error! Empty URL pattern view name not permitted (for pattern `%r`).\" % regex)\n        if prefix:\n            view = prefix + \".\" + view\n\n        view = importing.load(view)\n\n    return AdminRegexURLPattern(\n        regex, view, kwargs, name, require_authentication=require_authentication, permissions=permissions\n    )\n\n\ndef get_edit_and_list_urls(url_prefix, view_template, name_template, permissions=()):\n    \"\"\"\n    Get a list of edit/new/list URLs for (presumably) an object type with standardized URLs and names.\n\n    :param url_prefix: What to prefix the generated URLs with. E.g. `\"^taxes/tax\"`.\n    :type url_prefix: str\n    :param view_template: A template string for the dotted name of the view class.\n                          E.g. \"shuup.admin.modules.taxes.views.Tax%sView\".\n    :type view_template: str\n    :param name_template: A template string for the URLnames. E.g. \"tax.%s\".\n    :type name_template: str\n    :return: List of URLs.\n    :rtype: list[AdminRegexURLPattern]\n    \"\"\"\n    if permissions:\n        warnings.warn(\n            \"Warning! `get_edit_and_list_urls` permissions attribute will be \"\n            \"deprecated in Shuup 2.0 as unused for this util.\",\n            DeprecationWarning,\n        )\n\n    return [\n        admin_url(\n            r\"%s/(?P<pk>\\d+)/$\" % url_prefix,\n            view_template % \"Edit\",\n            name=name_template % \"edit\",\n            permissions=(name_template % \"edit\",),\n        ),\n        admin_url(\n            \"%s/new/$\" % url_prefix,\n            view_template % \"Edit\",\n            name=name_template % \"new\",\n            kwargs={\"pk\": None},\n            permissions=(name_template % \"new\",),\n        ),\n        admin_url(\n            \"%s/$\" % url_prefix,\n            view_template % \"List\",\n            name=name_template % \"list\",\n            permissions=(name_template % \"list\",),\n        ),\n        admin_url(\n            \"%s/list-settings/\" % url_prefix,\n            \"shuup.admin.modules.settings.views.ListSettingsView\",\n            name=name_template % \"list_settings\",\n            permissions=(name_template % \"list_settings\",),\n        ),\n    ]\n\n\nclass NoModelUrl(ValueError):\n    pass\n\n\ndef get_model_url(\n    object, kind=\"detail\", user=None, required_permissions=None, shop=None, raise_permission_denied=False, **kwargs\n):\n    \"\"\"\n    Get a an admin object URL for the given object or object class by\n    interrogating each admin module.\n\n    If a user is provided, checks whether user has correct permissions\n    before returning URL.\n\n    Raises `NoModelUrl` if lookup fails\n\n    :param object: Model or object class.\n    :type object: class\n    :param kind: URL kind. Currently \"new\", \"list\", \"edit\", \"detail\".\n    :type kind: str\n    :param user: Optional instance to check for permissions.\n    :type user: django.contrib.auth.models.User|None\n    :param required_permissions: Optional iterable of permission strings.\n    :type required_permissions: Iterable[str]|None\n    :param shop: The shop that owns the resource.\n    :type request: shuup.core.models.Shop|None\n    :param raise_permission_denied: raise PermissionDenied exception if the url\n        is found but user has not permission. If false, None will be returned instead.\n        Default is False.\n    :type raise_permission_denied: bool\n    :return: Resolved URL.\n    :rtype: str\n    \"\"\"\n    for module in get_modules():\n        url = module.get_model_url(object, kind, shop)\n\n        if not url:\n            continue\n\n        if user is None:\n            return url\n\n        from shuup.utils.django_compat import Resolver404, resolve\n\n        try:\n            if required_permissions is not None:\n                warnings.warn(\n                    \"Warning! `required_permissions` parameter will be deprecated \"\n                    \"in Shuup 2.0 as unused for this util.\",\n                    DeprecationWarning,\n                )\n                permissions = required_permissions\n            else:\n                resolved = resolve(url)\n                from shuup.admin.utils.permissions import get_permissions_for_module_url\n\n                permissions = get_permissions_for_module_url(module, resolved.url_name)\n\n            missing_permissions = get_missing_permissions(user, permissions)\n\n            if not missing_permissions:\n                return url\n\n            if raise_permission_denied:\n                from django.core.exceptions import PermissionDenied\n\n                reason = _(\"Can't view this page. You do not have the required permission(s): `{permissions}`.\").format(\n                    permissions=\", \".join(missing_permissions)\n                )\n                raise PermissionDenied(reason)\n\n        except Resolver404:\n            # what are you doing developer?\n            return url\n\n    raise NoModelUrl(\"Error! Can't get object URL of kind %s: %r.\" % (kind, force_text(object)))\n\n\ndef derive_model_url(model_class, urlname_prefix, object, kind):\n    \"\"\"\n    Try to guess a model URL for the given `object` and `kind`.\n\n    An utility for people implementing `get_model_url`.\n\n    :param model_class: The model class the object must be an instance or subclass of.\n    :type model_class: class\n    :param urlname_prefix: URLname prefix. For instance, `shuup_admin:shop_product.`\n    :type urlname_prefix: str\n    :param object: The model or model class as passed to `get_model_url`.\n    :type object: django.db.models.Model|class\n    :param kind: URL kind as passed to `get_model_url`.\n    :type kind: str\n    :return: Resolved URL or None.\n    :rtype: str|None\n    \"\"\"\n    if not (isinstance(object, model_class) or (inspect.isclass(object) and issubclass(object, model_class))):\n        return\n\n    kind_to_urlnames = {\n        \"detail\": (\"%s.detail\" % urlname_prefix, \"%s.edit\" % urlname_prefix),\n    }\n\n    kwarg_sets = [{}]\n    if getattr(object, \"pk\", None):\n        kwarg_sets.append({\"pk\": object.pk})\n\n    for urlname in kind_to_urlnames.get(kind, [\"%s.%s\" % (urlname_prefix, kind)]):\n        for kwargs in kwarg_sets:\n            try:\n                return reverse(urlname, kwargs=kwargs)\n            except NoReverseMatch:\n                pass\n    # No match whatsoever.\n    return None\n\n\ndef manipulate_query_string(url, **qs):\n    if \"?\" in url:\n        url, current_qs = url.split(\"?\", 1)\n        qs = dict(parse_qsl(current_qs), **qs)\n    qs = [(key, value) for (key, value) in qs.items() if value is not None]\n    if qs:\n        return \"%s?%s\" % (url, urlencode(qs))\n    else:\n        return url\n\n\ndef get_model_front_url(request, object):\n    \"\"\"\n    Get a frontend URL for an object.\n\n    :param request: Request.\n    :type request: HttpRequest\n    :param object: A model instance.\n    :type object: django.db.models.Model\n    :return: URL or None.\n    :rtype: str|None\n    \"\"\"\n    # TODO: This method could use an extension point for alternative frontends.\n    if not object.pk:\n        return None\n    if \"shuup.front\" in settings.INSTALLED_APPS:\n        # Best effort to use the default frontend for front URLs.\n        try:\n            from shuup.front.template_helpers.urls import model_url\n\n            return model_url({\"request\": request}, object)\n        except (ValueError, NoReverseMatch):\n            pass\n    return None\n\n\ndef get_front_url(context):\n    \"\"\"\n    Get front URL for admin navigation.\n\n    1. Use front URL from view context if passed.\n    2. Fallback to index.\n    \"\"\"\n    front_url = context.get(\"front_url\")\n    if not front_url:\n        try:\n            front_url = reverse(\"shuup:index\")\n        except NoReverseMatch:\n            front_url = None\n    return front_url\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom __future__ import unicode_literals\n\nimport six\nfrom django.core.exceptions import ValidationError\nfrom django.http import HttpResponseRedirect, JsonResponse\nfrom django.shortcuts import redirect\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom shuup.apps.provides import get_provide_objects\nfrom shuup.core.basket import commands\nfrom shuup.core.basket.command_middleware import BaseBasketCommandMiddleware\nfrom shuup.core.signals import get_basket_command_handler\nfrom shuup.utils.django_compat import force_text\nfrom shuup.utils.excs import Problem\n\n\nclass BasketCommandDispatcher(object):\n    \"\"\"\n    BasketCommandDispatcher handles (usually AJAX) requests that somehow update the basket.\n    You should never instantiate BasketCommandDispatcher yourself -- instead use\n    `get_basket_command_dispatcher()`.\n\n    All `handle_*` methods are expected to accept `**kwargs`.\n    \"\"\"\n\n    commands_module = commands\n\n    def __init__(self, request, basket=None):\n        \"\"\"\n        :type request: HttpRequest\n        \"\"\"\n        self.request = request\n        self.ajax = self.request.is_ajax()\n        # :type self.basket: BaseBasket\n        self.basket = basket or request.basket\n\n    def get_command_handler(self, command):\n        handler = getattr(self.commands_module, \"handle_%s\" % command.lower(), None)\n        if handler and callable(handler):\n            return handler\n\n        for receiver, handler in get_basket_command_handler.send(\n            BasketCommandDispatcher, command=command, instance=self\n        ):\n            if handler and callable(handler):\n                return handler\n\n    def handle(self, command, kwargs=None):\n        \"\"\"\n        Dispatch and handle processing of the given command.\n\n        :param command: Name of command to run.\n        :type command: unicode\n        :param kwargs: Arguments to pass to the command handler. If empty, `request.POST` is used.\n        :type kwargs: dict\n        :return: response.\n        :rtype: HttpResponse\n        \"\"\"\n\n        kwargs = kwargs or dict(six.iteritems(self.request.POST))\n        try:\n            handler = self.get_command_handler(command)\n            if not handler or not callable(handler):\n                raise Problem(_(\"Error! Invalid command `%s`.\") % command)\n            kwargs.pop(\"csrfmiddlewaretoken\", None)  # The CSRF token should never be passed as a kwarg\n            kwargs.pop(\"command\", None)  # Nor the command\n            kwargs.update(request=self.request, basket=self.basket)\n            kwargs = self.preprocess_kwargs(command, kwargs)\n\n            response = handler(**kwargs) or {}\n\n        except (Problem, ValidationError) as exc:\n            if not self.ajax:\n                raise\n            msg = exc.message if hasattr(exc, \"message\") else exc\n            response = {\n                \"error\": force_text(msg, errors=\"ignore\"),\n                \"code\": force_text(getattr(exc, \"code\", None) or \"\", errors=\"ignore\"),\n            }\n\n        response = self.postprocess_response(command, kwargs, response)\n\n        if self.ajax:\n            return JsonResponse(response)\n\n        return_url = response.get(\"return\") or kwargs.get(\"return\")\n        if return_url and return_url.startswith(\"/\"):\n            return HttpResponseRedirect(return_url)\n        return redirect(\"shuup:basket\")\n\n    def preprocess_kwargs(self, command, kwargs):\n        \"\"\"\n        Preprocess kwargs before they are passed to the given `command` handler.\n        Useful for subclassing. Must return the new `kwargs`, even if it wasn't\n        mutated.\n\n        :param command: The name of the command about to be run.\n        :param kwargs: dict of arguments.\n        :return: dict of arguments.\n        \"\"\"\n\n        for basket_command_middleware in get_provide_objects(\"basket_command_middleware\"):\n            if not issubclass(basket_command_middleware, BaseBasketCommandMiddleware):\n                continue\n\n            # create a copy\n            kwargs = dict(\n                basket_command_middleware().preprocess_kwargs(\n                    basket=self.basket, request=self.request, command=command, kwargs=kwargs\n                )\n            )\n\n        return kwargs\n\n    def postprocess_response(self, command, kwargs, response):\n        \"\"\"\n        Postprocess the response dictionary (not a HTTP response!) before it is\n        either turned into JSON or otherwise processed (in the case of non-AJAX requests).\n\n        :param command: The command that was run.\n        :param kwargs: The actual kwargs the command was run with.\n        :param response: The response the command returned.\n        :return: The response to be processed and sent to the client.\n        \"\"\"\n\n        for basket_command_middleware in get_provide_objects(\"basket_command_middleware\"):\n            if not issubclass(basket_command_middleware, BaseBasketCommandMiddleware):\n                continue\n\n            response = dict(\n                basket_command_middleware().postprocess_response(\n                    basket=self.basket, request=self.request, command=command, kwargs=kwargs, response=response\n                )\n            )\n\n        return response\n", "# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom __future__ import unicode_literals\n\nfrom collections import OrderedDict\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.http.response import Http404\n\nfrom shuup.front.basket import get_basket\nfrom shuup.utils.django_compat import reverse\nfrom shuup.utils.importing import load\n\n\nclass CheckoutProcess(object):\n    horizontal_template = True\n\n    def __init__(self, phase_specs, phase_kwargs, view=None):\n        \"\"\"\n        Initialize this checkout process.\n\n        :type phase_specs: list[str]\n        :type phase_kwargs: dict\n        :type view: shuup.front.checkout.BaseCheckoutView|None\n        \"\"\"\n        self.phase_specs = phase_specs\n        self.phase_kwargs = phase_kwargs\n        self.view = view\n        self.request = self.phase_kwargs.get(\"request\")\n\n    @property\n    def phases(self):\n        \"\"\"\n        :rtype: Iterable[CheckoutPhaseViewMixin]\n        \"\"\"\n        if not getattr(self, \"_phases\", None):\n            self._phases = self._load_phases()\n        return self._phases\n\n    def instantiate_phase_class(self, phase_class, **extra_kwargs):\n        if not phase_class.identifier:  # pragma: no cover\n            raise ImproperlyConfigured(\"Error! Phase `%r` has no identifier.\" % phase_class)\n        kwargs = {}\n        kwargs.update(self.phase_kwargs)\n        kwargs.update(extra_kwargs)\n        phase = phase_class(checkout_process=self, horizontal_template=self.horizontal_template, **kwargs)\n        return phase\n\n    def _load_phases(self):\n        phases = OrderedDict()\n\n        for phase_spec in self.phase_specs:\n            phase_class = load(phase_spec)\n            phase = self.instantiate_phase_class(phase_class)\n            phases[phase_class.identifier] = phase\n\n            # check whether the phase spawns new phases,\n            # if so, then let's spawn then and add the phases\n            for spawned_phase in phase.spawn_phases(self):\n                phases[spawned_phase.identifier] = spawned_phase\n\n        return list(phases.values())\n\n    def get_current_phase(self, requested_phase_identifier):\n        found = False\n        for phase in self.phases:\n            if phase.is_valid():\n                phase.process()\n            if found or not requested_phase_identifier or requested_phase_identifier == phase.identifier:\n                found = True  # We're at or past the requested phase\n                if not phase.should_skip():\n                    return phase\n            if not phase.should_skip() and not phase.is_valid():  # A past phase is not valid, that's the current one\n                return phase\n        raise Http404(\"Error! Phase with identifier `%s` not found.\" % requested_phase_identifier)  # pragma: no cover\n\n    def _get_next_phase(self, phases, current_phase, target_phase):\n        found = False\n        for phase in phases:\n            if phase.identifier == current_phase.identifier:\n                # Found the current one, so any valid phase from here on out is the next one\n                found = True\n                continue\n\n            if found and current_phase.identifier != target_phase.identifier:\n                return phase\n\n            if found and not phase.should_skip():\n                # Yep, that's the one\n                return phase\n\n    def get_next_phase(self, current_phase, target_phase):\n        return self._get_next_phase(self.phases, current_phase, target_phase)\n\n    def get_previous_phase(self, current_phase, target_phase):\n        return self._get_next_phase(reversed(self.phases), current_phase, target_phase)\n\n    def prepare_current_phase(self, phase_identifier):\n        current_phase = self.get_current_phase(phase_identifier)\n        self.add_phase_attributes(current_phase)\n        self.current_phase = current_phase\n        return current_phase\n\n    def add_phase_attributes(self, target_phase, current_phase=None):\n        \"\"\"\n        Add phase instance attributes (previous, next, etc) to the given target phase,\n        using the optional `current_phase` as the current phase for previous and next.\n\n        This is exposed as a public API for the benefit of phases that need to do sub-phase\n        initialization and dispatching, such as method phases.\n        \"\"\"\n        current_phase = current_phase or target_phase\n        target_phase.previous_phase = self.get_previous_phase(current_phase, target_phase)\n        target_phase.next_phase = self.get_next_phase(current_phase, target_phase)\n        target_phase.phases = self.phases\n        if current_phase in self.phases:\n            current_phase_index = self.phases.index(current_phase)\n            # Set up attributes that are handy for the phase bar in the templates.\n            for i, phase in enumerate(self.phases):\n                setattr(phase, \"is_past\", i > current_phase_index)\n                setattr(phase, \"is_current\", phase == current_phase)\n                setattr(phase, \"is_future\", i < current_phase_index)\n                setattr(phase, \"is_previous\", phase == target_phase.previous_phase)\n                setattr(phase, \"is_next\", phase == target_phase.next_phase)\n        return target_phase\n\n    def reset(self):\n        for phase in self.phases:\n            phase.reset()\n\n    def complete(self):\n        \"\"\"\n        To be called from a phase (`self.checkout_process.complete()`) when the checkout process is complete.\n        \"\"\"\n        self.reset()\n\n    def get_phase_url(self, phase):\n        # The self.view is optional for backward compatibility\n        if not self.view:\n            url_kwargs = {\"phase\": phase.identifier}\n            return reverse(\"shuup:checkout\", kwargs=url_kwargs)\n        return self.view.get_phase_url(phase)\n\n    @property\n    def basket(self):\n        \"\"\"\n        The basket used in this checkout process.\n\n        :rtype: shuup.front.basket.objects.BaseBasket\n        \"\"\"\n        return get_basket(self.request)\n\n\nclass VerticalCheckoutProcess(CheckoutProcess):\n    horizontal_template = False\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom __future__ import unicode_literals\n\nfrom django.conf.urls import url\nfrom django.contrib.auth.decorators import login_required\nfrom django.http.response import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.i18n import set_language\nfrom itertools import chain\n\nfrom shuup.apps.provides import get_provide_objects\n\nfrom .views.basket import BasketView\nfrom .views.category import AllCategoriesView, CategoryView\nfrom .views.checkout import get_checkout_view\nfrom .views.dashboard import DashboardView\nfrom .views.index import IndexView\nfrom .views.misc import (\n    force_anonymous_contact,\n    force_company_contact,\n    force_person_contact,\n    stop_impersonating,\n    toggle_all_seeing,\n)\nfrom .views.order import OrderCompleteView\nfrom .views.payment import ProcessPaymentView\nfrom .views.product import ProductDetailView\nfrom .views.upload import media_upload\n\n# TODO: Check _not_here_yet URLs in this file\n\n\ndef _not_here_yet(request, *args, **kwargs):\n    return HttpResponse(\"Not here yet: %s (%r, %r)\" % (request.path, args, kwargs), status=410)\n\n\n# Use a different js catalog function in front urlpatterns to prevent forcing\n# the shop language settings in admin js catalog.\ndef front_javascript_catalog_all(request, domain=\"djangojs\"):\n    from shuup.utils.i18n import javascript_catalog_all\n\n    return javascript_catalog_all(request, domain)\n\n\ncheckout_view = get_checkout_view()\n\n\nurlpatterns = [\n    url(r\"^set-language/$\", csrf_exempt(set_language), name=\"set-language\"),\n    url(r\"^i18n.js$\", front_javascript_catalog_all, name=\"js-catalog\"),\n    url(r\"^checkout/$\", checkout_view, name=\"checkout\"),\n    url(r\"^checkout/(?P<phase>.+)/$\", checkout_view, name=\"checkout\"),\n    url(r\"^basket/$\", csrf_exempt(BasketView.as_view()), name=\"basket\"),\n    url(r\"^dashboard/$\", login_required(DashboardView.as_view()), name=\"dashboard\"),\n    url(r\"^toggle-allseeing/$\", login_required(toggle_all_seeing), name=\"toggle-all-seeing\"),\n    url(r\"^force-anonymous-contact/$\", login_required(force_anonymous_contact), name=\"force-anonymous-contact\"),\n    url(r\"^force-company-contact/$\", login_required(force_company_contact), name=\"force-company-contact\"),\n    url(r\"^force-person-contact/$\", login_required(force_person_contact), name=\"force-person-contact\"),\n    url(r\"^stop-impersonating/$\", login_required(stop_impersonating), name=\"stop-impersonating\"),\n    url(r\"^upload-media/$\", login_required(media_upload), name=\"media-upload\"),\n    url(\n        r\"^order/payment/(?P<pk>.+?)/(?P<key>.+?)/$\",\n        csrf_exempt(ProcessPaymentView.as_view()),\n        kwargs={\"mode\": \"payment\"},\n        name=\"order_process_payment\",\n    ),\n    url(\n        r\"^order/process-payment/(?P<pk>.+?)/(?P<key>.+?)/$\",\n        csrf_exempt(ProcessPaymentView.as_view()),\n        kwargs={\"mode\": \"return\"},\n        name=\"order_process_payment_return\",\n    ),\n    url(\n        r\"^order/payment-canceled/(?P<pk>.+?)/(?P<key>.+?)/$\",\n        ProcessPaymentView.as_view(),\n        kwargs={\"mode\": \"cancel\"},\n        name=\"order_payment_canceled\",\n    ),\n    url(r\"^order/complete/(?P<pk>.+?)/(?P<key>.+?)/$\", csrf_exempt(OrderCompleteView.as_view()), name=\"order_complete\"),\n    url(r\"^order/verification/(?P<pk>.+?)/(?P<key>.+?)/$\", _not_here_yet, name=\"order_requires_verification\"),\n    url(\n        r\"^order/get-attachment/(?P<order_pk>\\d+)/(?P<key>.+?)/(?P<att_pk>\\d+)/\",\n        _not_here_yet,\n        name=\"secure_attachment\",\n    ),\n    url(r\"^p/(?P<pk>\\d+)-(?P<slug>.*)/$\", csrf_exempt(ProductDetailView.as_view()), name=\"product\"),\n    url(\n        r\"^s/(?P<supplier_pk>\\d+)-(?P<pk>\\d+)-(?P<slug>.*)/$\",\n        csrf_exempt(ProductDetailView.as_view()),\n        name=\"supplier-product\",\n    ),\n    url(r\"^c/$\", csrf_exempt(AllCategoriesView.as_view()), name=\"all-categories\"),\n    url(r\"^c/(?P<pk>\\d+)-(?P<slug>.*)/$\", csrf_exempt(CategoryView.as_view()), name=\"category\"),\n]\n\n# TODO: Document `front_urls_pre`, `front_urls` and `front_urls_post`.\n\n\ndef _get_extension_urlpatterns(provide_category):\n    return chain(*get_provide_objects(provide_category))\n\n\napp_name = \"shuup\"\nurlpatterns = list(\n    chain(\n        *(\n            _get_extension_urlpatterns(\"front_urls_pre\"),\n            urlpatterns,\n            _get_extension_urlpatterns(\"front_urls\"),\n            [url(r\"^$\", IndexView.as_view(), name=\"index\")],\n            _get_extension_urlpatterns(\"front_urls_post\"),\n        )\n    )\n)\n", "from django.core.exceptions import ValidationError\n\nfrom shuup.utils.django_compat import force_text\n\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\n\n\nclass Problem(Exception):\n    \"\"\" User-visible exception. \"\"\"\n\n    message = property(lambda self: self.args[0] if self.args else None)\n\n    def __init__(self, message, title=None):\n        super(Problem, self).__init__(message)\n        self.title = title\n        self.links = []\n\n    def with_link(self, url, title):\n        \"\"\"\n        Append a link to this Problem and return itself.\n\n        This API is designed after `Exception.with_traceback()`,\n        so you can fluently chain this in a `raise` statement::\n\n            raise Problem(\"Oops\").with_link(\"...\", \"...\")\n\n        :param url: URL string.\n        :type url: str\n        :param title: Title text.\n        :type title: str\n        :return: This same Problem.\n        :rtype: shuup.utils.excs.Problem\n        \"\"\"\n        self.links.append({\"url\": url, \"title\": title})\n        return self\n\n\nclass ExceptionalResponse(Exception):\n    def __init__(self, response):\n        self.response = response\n        super(ExceptionalResponse, self).__init__(force_text(response))\n\n\ndef extract_messages(obj_list):\n    \"\"\"\n    Extract \"messages\" from a list of exceptions or other objects.\n\n    For ValidationErrors, `messages` are flattened into the output.\n    For Exceptions, `args[0]` is added into the output.\n    For other objects, `force_text` is called.\n\n    :param obj_list: List of exceptions etc.\n    :type obj_list: Iterable[object]\n    :rtype: Iterable[str]\n    \"\"\"\n    for obj in obj_list:\n        if isinstance(obj, ValidationError):\n            for msg in obj.messages:\n                yield force_text(msg)\n            continue\n        if isinstance(obj, Exception):\n            if len(obj.args):\n                yield force_text(obj.args[0])\n                continue\n        yield force_text(obj)\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom django.conf.urls import url\n\nfrom shuup.xtheme.views.command import command_dispatch\nfrom shuup.xtheme.views.editor import EditorView\nfrom shuup.xtheme.views.extra import extra_view_dispatch\nfrom shuup.xtheme.views.plugins import (\n    get_category_products_highlight,\n    get_product_cross_sell_highlight,\n    get_product_highlight,\n    get_prouduct_selections_highlight,\n)\n\nurlpatterns = [\n    url(r\"^xtheme/editor/$\", EditorView.as_view(), name=\"xtheme_editor\"),\n    url(r\"^xtheme/(?P<view>.+)/*$\", extra_view_dispatch, name=\"xtheme_extra_view\"),\n    url(r\"^xtheme/$\", command_dispatch, name=\"xtheme\"),\n    url(\n        r\"^xtheme-prod-hl/(?P<plugin_type>.*)/(?P<cutoff_days>\\d+)/(?P<count>\\d+)/(?P<cache_timeout>\\d+)/$\",\n        get_product_highlight,\n        name=\"xtheme-product-highlight\",\n    ),\n    url(\n        r\"\"\"\n            ^xtheme-prod-cross-sell-hl/\n            (?P<product_id>.*)/(?P<relation_type>.*)/(?P<use_parents>\\d+)/\n            (?P<count>\\d+)/(?P<cache_timeout>\\d+)/$\n        \"\"\".strip(),\n        get_product_cross_sell_highlight,\n        name=\"xtheme-product-cross-sells-highlight\",\n    ),\n    url(\n        r\"^xtheme-cat-products-hl/(?P<category_id>\\d+)/(?P<count>\\d+)/(?P<cache_timeout>\\d+)/$\",\n        get_category_products_highlight,\n        name=\"xtheme-category-products-highlight\",\n    ),\n    url(\n        r\"^xtheme-prod-selections-hl/(?P<product_ids>.*)/(?P<cache_timeout>\\d+)/$\",\n        get_prouduct_selections_highlight,\n        name=\"xtheme-product-selections-highlight\",\n    ),\n]\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom django.http.response import HttpResponseRedirect\n\nfrom shuup.utils.excs import Problem\nfrom shuup.xtheme.editing import set_edit_mode\n\n\ndef handle_command(request, command):\n    \"\"\"\n    Internal dispatch function.\n\n    :param request: A request\n    :type request: django.http.HttpRequest\n    :param command: Command string\n    :type command: str\n    :return: A response\n    :rtype: django.http.HttpResponse\n    \"\"\"\n    path = request.POST.get(\"path\") or request.META.get(\"HTTP_REFERER\") or \"/\"\n    if command == \"edit_on\" or command == \"edit_off\":\n        set_edit_mode(request, command.endswith(\"_on\"))\n        return HttpResponseRedirect(path)\n\n\ndef command_dispatch(request):\n    \"\"\"\n    Xtheme command dispatch view.\n\n    :param request: A request\n    :type request: django.http.HttpRequest\n    :return: A response\n    :rtype: django.http.HttpResponse\n    \"\"\"\n    command = request.POST.get(\"command\")\n    if command:\n        response = handle_command(request, command)\n        if response:\n            return response\n    raise Problem(\"Error! Unknown command: `%r`\" % command)\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nimport json\nfrom django.http.response import HttpResponse, HttpResponseRedirect\nfrom django.middleware.csrf import get_token\nfrom django.utils.http import urlencode\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.views.generic import TemplateView\n\nfrom shuup.utils.excs import Problem\nfrom shuup.xtheme import XTHEME_GLOBAL_VIEW_NAME\nfrom shuup.xtheme._theme import get_theme_by_identifier\nfrom shuup.xtheme.editing import could_edit\nfrom shuup.xtheme.layout import Layout\nfrom shuup.xtheme.layout.utils import get_provided_layouts\nfrom shuup.xtheme.view_config import ViewConfig\nfrom shuup.xtheme.views.forms import LayoutCellFormGroup\n\n# since layouts will most likely break with multiple cells per row, we are\n# limiting the amount.\nROW_CELL_LIMIT = 4\n\n\nclass EditorView(TemplateView):\n    template_name = \"shuup/xtheme/editor.jinja\"\n    xtheme_injection = False  # We don't need the editing injection here, so opt-out\n    changed = False  # Overridden in `save_layout`\n\n    def _get_default_layout(self):\n        try:\n            return json.loads(self.request.GET[\"default_config\"])\n        except (ValueError, KeyError):\n            return None\n\n    def get_context_data(self, **kwargs):  # doccov: ignore\n        ctx = super(EditorView, self).get_context_data(**kwargs)\n        ctx[\"layout\"] = self.layout\n        ctx[\"csrf_token_str\"] = get_token(self.request)\n        # ctx[\"layout_debug\"] = pformat(ctx[\"layout\"].serialize())\n        ctx[\"current_cell_coords\"] = self.current_cell_coords\n        ctx[\"current_cell\"] = self.current_cell\n        ctx[\"form\"] = self.form\n        ctx[\"changed\"] = self.changed\n        ctx[\"cell_limit\"] = ROW_CELL_LIMIT\n        return ctx\n\n    def dispatch(self, request, *args, **kwargs):  # doccov: ignore\n        if not could_edit(request):\n            raise Problem(_(\"No access to editing.\"))\n        self._populate_vars()\n        if self.default_layout:\n            self.view_config.save_default_placeholder_layout(self.placeholder_name, self.default_layout)\n            # We saved the default layout, so get rid of the humongous GET arg and try again\n            get_args = dict(self.request.GET.items())\n            get_args.pop(\"default_config\", None)\n            global_type = get_args.pop(\"global_type\", None)\n            if global_type:\n                get_args[\"view\"] = XTHEME_GLOBAL_VIEW_NAME\n            # We are overriding the view with XTHEME_GLOBAL_VIEW_NAME if this is a global placeholder\n            return HttpResponseRedirect(\"%s?%s\" % (self.request.path, urlencode(get_args)))\n        return super(EditorView, self).dispatch(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):  # doccov: ignore\n        command = request.POST.get(\"command\")\n        if command:\n            dispatcher = getattr(self, \"dispatch_%s\" % command, None)\n            if not callable(dispatcher):\n                raise Problem(_(\"Unknown command: `%s`.\") % command)\n            dispatch_kwargs = dict(request.POST.items())\n            rv = dispatcher(**dispatch_kwargs)\n            if rv:\n                return rv\n            self.request.method = \"GET\"  # At this point, we won't want to cause form validation\n            self.build_form()  # and it's not a bad idea to rebuild the form\n            return super(EditorView, self).get(request, *args, **kwargs)\n\n        if request.POST.get(\"save\") and self.form and self.form.is_valid():\n            self.form.save()\n            self.save_layout()\n\n            # after we save the new layout configs, make sure to reload the saved data in forms\n            # so the returned get() response contains updated data\n            self.build_form()\n\n            if request.POST.get(\"publish\") == \"1\":\n                return self.dispatch_publish()\n\n        return self.get(request, *args, **kwargs)\n\n    def _populate_vars(self):\n        theme = get_theme_by_identifier(self.request.GET[\"theme\"], self.request.shop)\n        if not theme:\n            raise Problem(_(\"Unable to determine the current theme.\"))\n        view_name = self.request.GET[\"view\"]\n        global_type = self.request.GET.get(\"global_type\", None)\n        self.view_config = ViewConfig(\n            theme=theme,\n            shop=self.request.shop,\n            view_name=view_name,\n            draft=True,\n            global_type=global_type,\n        )\n\n        # Let's store the layout data key for save here\n        self.layout_data_key = self.request.GET.get(\"layout_data_key\", None)\n\n        # Let's use the layout identifier passed by the view to\n        # fetch correct layout\n        layout_identifier = self.request.GET.get(\"layout_identifier\", None)\n        layout_cls = Layout\n        for provided_layout in get_provided_layouts():\n            if provided_layout.identifier == layout_identifier:\n                layout_cls = provided_layout\n\n        self.placeholder_name = self.request.GET[\"ph\"]\n        self.default_layout = self._get_default_layout()\n        self.layout = self.view_config.get_placeholder_layout(\n            layout_cls=layout_cls,\n            placeholder_name=self.placeholder_name,\n            default_layout=self.default_layout,\n            layout_data_key=self.layout_data_key,\n        )\n        (x, y) = self.current_cell_coords = (\n            int(self.request.GET.get(\"x\", -1)),\n            int(self.request.GET.get(\"y\", -1)),\n        )\n        self.current_cell = self.layout.get_cell(x=x, y=y)\n        self.build_form()\n\n    def build_form(self):\n        if not self.current_cell:\n            self.form = None\n            return\n        kwargs = {\"layout_cell\": self.current_cell, \"theme\": self.view_config.theme, \"request\": self.request}\n        if self.request.method == \"POST\":\n            kwargs[\"data\"] = self.request.POST\n            kwargs[\"files\"] = self.request.FILES\n        self.form = LayoutCellFormGroup(**kwargs)\n\n    def save_layout(self, layout=None):\n        self.view_config.save_placeholder_layout(layout_data_key=self.layout_data_key, layout=(layout or self.layout))\n        self.changed = True\n\n    def dispatch_add_cell(self, y, **kwargs):\n        y = int(y)\n        if len(self.layout.rows[y].cells) >= ROW_CELL_LIMIT:\n            raise ValueError(_(\"Can't add more than %d cells in one row.\") % ROW_CELL_LIMIT)\n\n        if not (0 <= y < len(self.layout.rows)):\n            # No need to raise an exception, really.\n            # It must have been a honest mistake.\n            return\n        self.layout.rows[y].add_cell()\n        self.save_layout()\n\n    def dispatch_add_row(self, y=None, **kwargs):\n        row = self.layout.insert_row(y)\n        row.add_cell()  # For convenience, add a cell to the row.\n        self.save_layout()\n\n    def dispatch_del_row(self, y, **kwargs):\n        self.layout.delete_row(y)\n        self.save_layout()\n\n    def dispatch_move_row_to_index(self, from_y, to_y, **kwargs):\n        self.layout.move_row_to_index(from_y, to_y)\n        self.save_layout()\n\n    def dispatch_move_cell_to_position(self, from_x, from_y, to_x, to_y, **kwargs):\n        self.layout.move_cell_to_position(from_x, from_y, to_x, to_y)\n        self.save_layout()\n\n    def dispatch_del_cell(self, x, y, **kwargs):\n        self.layout.delete_cell(x, y)\n        self.save_layout()\n\n    def dispatch_change_plugin(self, plugin=\"\", **kwargs):\n        if self.current_cell:\n            if not plugin:\n                plugin = None\n            self.current_cell.plugin_identifier = plugin\n            self.save_layout()\n\n    def dispatch_publish(self, **kwargs):\n        self.view_config.publish()\n        return HttpResponse(\"<html><script>parent.location.reload()</script>%s.</html>\" % _(\"Published\"))\n\n    def dispatch_revert(self, **kwargs):\n        self.view_config.revert()\n        return HttpResponse(\"<html><script>parent.location.reload()</script>%s.</html>\" % _(\"Reverted\"))\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.core.signals import setting_changed\nfrom django.http.response import HttpResponseNotFound\n\nfrom shuup.xtheme._theme import get_current_theme\n\n_VIEW_CACHE = {}\n\n\ndef clear_view_cache(**kwargs):\n    _VIEW_CACHE.clear()\n\n\nsetting_changed.connect(clear_view_cache, dispatch_uid=\"shuup.xtheme.views.extra.clear_view_cache\")\n\n\ndef _get_view_by_name(theme, view_name):\n    view = theme.get_view(view_name)\n    if hasattr(view, \"as_view\"):  # Handle CBVs\n        view = view.as_view()\n    if view and not callable(view):\n        raise ImproperlyConfigured(\"Error! View `%r` is not callable.\" % view)\n    return view\n\n\ndef get_view_by_name(theme, view_name):\n    if not theme:\n        return None\n    cache_key = (theme.identifier, view_name)\n    if cache_key not in _VIEW_CACHE:\n        view = _get_view_by_name(theme, view_name)\n        _VIEW_CACHE[cache_key] = view\n    else:\n        view = _VIEW_CACHE[cache_key]\n    return view\n\n\ndef extra_view_dispatch(request, view):\n    \"\"\"\n    Dispatch to an Xtheme extra view.\n\n    :param request: A request.\n    :type request: django.http.HttpRequest\n    :param view: View name.\n    :type view: str\n    :return: A response of some kind.\n    :rtype: django.http.HttpResponse\n    \"\"\"\n    theme = getattr(request, \"theme\", None) or get_current_theme(request.shop)\n    view_func = get_view_by_name(theme, view)\n    if not view_func:\n        msg = \"Error! %s/%s: Not found.\" % (getattr(theme, \"identifier\", None), view)\n        return HttpResponseNotFound(msg)\n    return view_func(request)\n"], "fixing_code": ["# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\nList all changes after the last release here (newer on top). Each change on a separate bullet point line\n\n### Fixed\n\n- General: fix critical vulnerability on views that were returning not escaped content making it open to XSS attacks\n\n### Changed\n\n- Admin: hide email template button based on permission\n- Reports: improve log when an importer fails\n\n## [2.10.8] - 2021-06-30\n\n### Changed\n\n- Pull translations from Transifex\n\n## [2.10.7] - 2021-06-29\n\n### Changed\n\n- Core: only consider lines from the same supplier as the behavior component\n\n## [2.10.6] - 2021-06-25\n\n### Fixed\n\n- Utils: fix MultiLanguageModelForm so language dependent filed will only be required if the language is required\n\n## [2.10.5] - 2021-06-21\n\n### Fixed\n\n- Xtheme: removed orderable boolean from async highlights plugin from being rendered\n\n## [2.10.4] - 2021-06-21\n\n### Changed\n\n- Admin: show taxless order total column in order list\n\n## [2.10.3] - 2021-06-15\n\n### Fixed\n\n- Importer: fix so the correct context is displayed on first request when selecting importer\n\n## [2.10.2] - 2021-06-11\n\n### Added\n\n- Xtheme: Add so snippets can have start of head content\n\n### Fixed\n\n- Core: fix so task don't require a identifier\n\n## [2.10.1] - 2021-06-07\n\n### Fixed\n\n- SimpleSupplier: always return products as managed by using a different queryset\n\n## [2.10.0] - 2021-06-07\n\n### Removed\n\n- Admin: remove the provides to allow adding extra fields to the Attribute form\n\n### Add\n\n- Core: Allow a supplier to have multiple modules\n- Core: add option to store tasks in the database to collect results\n\n### Changed\n\n- General: pull translation strings from Transifex\n- Admin: filter products in list and edit views according to product kind listing name\n- Core: suppliers don't have default supplier modules anymore\n- Importers: enable importers to run asynchronously\n- Importers: change the admin views to show the list of import processes\n\n### Fixed\n\n- Admin: fix picotable overflow issue\n- Notify: always overrride the current notification data with the new one\n\n## [2.9.2] - 2021-05-26\n\n### Fixed\n\n- General: replace hash() with sha1() as Python's hash() function doesn't have a stable result across processes\n- Core: use SHA-1 to hash cache keys as Python's hash() function doesn't have a stable result across processes\n\n### Changed\n\n- Cache product orderability and prices using a list of user groups instead of per contact\n- Pull translation strings from Transifex\n\n## [2.9.1] - 2021-05-24\n\n### Fixed\n\n- Admin: add ordering to attribute filter, because of frontend related error\n\n## [2.9.0] - 2021-05-19\n\n### Added\n\n- Admin: add a method in AdminModule that allows returning help texts for permissions\n\n### Fixed\n\n- Notify: add notify styles to the script editor iframe to fix email editor size\n- Importer: use more bites in order to detect csv dialect in importer\n- Admin: save the current user menu using the current language\n\n### Changed\n\n- Pull DE translations from Transifex\n- Xtheme: allow async plugin to have orderable only flag set\n- Xtheme: use the current language as part of the plugins cache key\n\n## [2.8.3] - 2021-05-17\n\n### Fixed\n\n- Xtheme: use the context while generating the cache key\n- Xtheme: do not crash the whole site when a plugin fails to render\n- Admin: Force to parse reason as string before encoding the url\n\n## [2.8.2] - 2021-05-14\n\n### Fixed\n\n- Admin: force escape help texts which can contain `\"` characters\n- Admin: show translation fields from all polymorphic models available\n- Xtheme: hash the cache key to prevent strings larger then 250 chars\n\n## [2.8.1] - 2021-05-11\n\n### Fixed\n\n- Xtheme: encode cache key into base64 to prevent issues with memcache\n\n## [2.8.0] - 2021-05-11\n\n### Changed\n\n- General: make some plugins cacheable\n- Xtheme: add attribute on every plugin to indicate whether it can be cached or not\n\n### Removed\n\n- Xtheme: removed the SHUUP_XTHEME_USE_PLACEHOLDER_CACHE setting and do not cache the entire placeholder content\n\n### Fixed\n\n- Core: implement choice attribute getter and setter correctly\n- Admin: collect translation strings from Shepard Tour\n\n## [2.7.3] - 2021-05-11\n\n### Fixed\n\n- Admin: use correct translated label syntax for form fields\n- Front: Remove untranslated Error! prefix in alert messages\n- Campaigns: fix the translation string format\n\n### Changed\n\n- General: use gettext_lazy to make sure translations work\n- Front: unify the Customer Information title across the dashboard\n- Front: bump bootstrap-select and use translated strings while initializing it\n\n## [2.7.2] - 2021-05-05\n\n### Fixed\n\n- Admin: Fix the Select2 translations strings\n- General: Collect translation strings correctly\n\n### Changed\n\n- General: Pull translation strings\n\n## [2.7.1] - 2021-05-04\n\n### Fixed\n\n- Core: do not use message tags as part of the message as it doesn't contain translated string\n- Core: fix the python string format syntax to format after resolving the translation string\n\n### Changed\n\n- Settings: add Portuguese (Portugal) as a language option\n\n## [2.7.0] - 2021-04-29\n\n### Added\n\n- Admin: New type of attribute: CHOICES\n- Admin: Selection of multiple choices from attribute for product\n- Front: Product filter by attribute choices\n\n### Changed\n\n- Pull strings from Transifex\n\n### Fixed\n\n- Reports: convert string into translated string\n- Update requirements to support Python3.6+\n- Fix mass editing validation for ManyToManyField fields.\n\n## [2.6.5] - 2021-04-22\n\n### Changed\n\n- Front: consider the supplier from context or kwargs while reversing the product url\n\n### Fixed\n\n- Front: Fix the order detail template\n- Admin: Pass languages to the TaxClassFormPart to show multilanguage forms\n\n## [2.6.4] - 2021-04-19\n\n### Changed\n\n- Additional German translation strings\n\n## [2.6.3] - 2021-04-13\n\n### Changed\n\n- Update German translation strings\n\n## [2.6.2] - 2021-04-13\n\n### Fixed\n\n- Front: pin LESS version to prevent build breaks\n\n## [2.6.1] - 2021-04-13\n\n### Changed\n\n- Front: add extra head block to base template\n- Core: allow refunds creation when the order is complete\n- Admin: show the product picture in order item list\n- Admin: change so TaxClassEditView is a FormPartView\n- Admin: Picotable to scroll in container on overflow rather, than entire screen scroll\n\n### Fixed\n\n- Front: Fix error that occurred while trying to register as a company\n- Front: fix non existent macro import\n- Core: Fix error that occurred when creating an order with a product which SKU was longer than 48 characters.\n- Admin: Multiple duplicate images being saved when image is uploaded before product is saved\n\n## [2.6.0] - 2021-03-29\n\n### Changed\n\n- Admin: Improve the copy product functionality\n\n### Added\n\n- Admin: add number of received orders in orders menu\n- Admin: add contact CSV exporter\n- CORE: Add .jsx support for shuup_makemessages command\n\n### Fixed\n\n- Admin: prevent exporting products that are not accessible by the current user\n- Fix 'Customize Your Admin Menu' redirecting to the supplier specific edit page on saving.\n- Admin: Fix picotable mobile styling to default to full-width\n- Front: Fail cleanly when visiting a product page without supplier\n- Fix Docker build issues with the development compose file.\n\n## [2.5.0] - 2021-03-22\n\n### Changed\n\n- Front: Add so `basket.get_final_lines(with_taxes=True)` gets called after selecting shipping- and payment method.\n  Reason for this is so all the taxes gets calculated before end customers fills in their payment details\n- Core: undeprecate signals for ShopProduct model\n\n### Added\n\n- Core: add attribute in Carrier model to control whether to manage shipments using default behavior\n- Admin: add shipment list view to list all shipments\n\n### Fixed\n\n- Notify: Fix so there is no 500 error when accessing EmailTemplate settings page\n- Taxes: fallback location to billing address when shipping address is not available\n- Importer: Ignore rows without any data\n\n## [2.4.0] - 2021-03-02\n\n### Added\n\n- Admin: add option to hide font selection and always paste plain text in summernote editors\n\n### Changed\n\n- Core: move refund order line logic to tax module\n  - Since each refund line you need to take care of the taxes it is\n  more logical if the tax module handles the whole thing. With some\n  3rd party taxation tool you need an option to handle refund taxes\n  in different way.\n\n### Fixed\n\n- Added missing labels to product category and supplier fields\n\n## [2.3.18] - 2021-03-01\n\n### Added\n\n- Front: create shipment sent notify event\n- Core: add shipment tracking url to shipment model\n- Admin: add shipment action to mark a shipment as sent\n\n### Changed\n\n- Admin: fix product module not to fail on object does not exists\n- Front: update media upload URL from \"media-upload/\" to \"upload-media/\"\n- Core: bump attribute name to 256 characters\n\n## [2.3.17] - 2021-02-23\n\n### Fixed\n\n- Core: Adding normal products with only deleted children to basket\n\n### Removed\n\n- Front: remove templatecache around basket partial as not stable with custom baskets\n\n## [2.3.16] - 2021-02-18\n\n### Fixed\n\n- Xtheme: fix wrong queryset that was fetching different products from the selection\n\n## [2.3.15] - 2021-02-17\n\n### Changed\n\n- Admin: Disable scrolling on jquery datetime pickers\n- Core: Turn variation parent mode back to normal if it has no non-deleted children\n- Core: add cached property groups_ids for Contact\n- Core: add lru_cache to display unit\n- Core: make some Contact properties cached\n- Front: optimize queries for orderable variations fetch\n- Core: set shop and product for shop instance to prevent query\n- Front: prefetch sales units for category view\n- Lock cryptography version for test builds\n- Use shop instead theme settings shop when initializing theme\n- Xtheme: save current theme to request for later usage\n- GDPR: add lru_cache for shop_setting getter\n\n### Fixed\n\n- Admin: fix bug in user permission view\n- Do not rely on STATIC_URL and MEDIA_URL while formatting static and media urls\n\n## [2.3.14] - 2021-02-04\n\n- Front: add template cache to basket partial\n- Core: avoid unnecessary touching to basket customer \u2026\n- Core: cache basket attributes while get and add cache key attribute \u2026\n- Front: skip front middleware for static and media\n- Core: add makemessages support for do and cache templatetags\n- Update license header for 2021\n\n## [2.3.13] - 2021-01-28\n\n### Added\n\n- Admin: Add an open/close all groups button to 'Granular Permission Groups' list.\n\n### Fixed\n\n- Admin: Update styling for media browser\n- Admin: Ensure media browser images are squares without cropping\n- Xtheme: fix sortable import for static resources\n- Admin: Gracefully handle the error when trying to delete a PROTECTED MediaFolder.\n\n## [2.3.12] - 2021-01-26\n\n### Added\n\n- Setup: add .html to MANIFEST.in\n- Admin: Add text truncate CSS to user dropdown if the user's username\n  gets too long and display only a user icon on mobile screens\n- Admin: always display the dashboard link in the main navigation as the first item\n- Save basket just before starting the order creation.\n  This ensures we have latest basket there on store\n- Save basket after shipping or payment method is saved.\n- Save basket after shipping or billing address is saved. For\n  saving the addresses to basket data\n- Add option to add log entries linked to stored baskets\n- Add detail page for carts\n\n### Changed\n\n- Admin: Change visit shop link from an icon to a button with text\n- Hide \"finished\" carts by default\n- Modify carts list to show latest cart first\n\n### Removed\n\n- Admin: Remove dashboard and home icon links from top menu\n- Remove the delay filter as useless. No need to hide carts\n\n## [2.3.11] - 2021-01-25\n\n### Added\n\n- Core: add verbose_name to shop product so we can translate it\n- Core: add middleware provides to the basket command handler\n- Core: add provides to retrieve properties from order or order source\n- Front: render subscription options in basket template\n- Core: add provider to retrieve subscription options for a given product\n\n### Changed\n\n- Front: render basket and order line properties using the `front_line_properties_descriptor` provides\n- Admin: change the product files form part icon to a file icon\n- Core: cache language utils methods using LRU\n\n## [2.3.10] - 2021-01-22\n\n- Notify: make email template form use code editor with preview\n- Notify: make email action body use code editor with preview\n- Admin: add code editor with preview widget\n- Notify: Remove breadcrumbs from editor and add save button on top\n- Notify: make editor close button to Close instead Done\n- Add related name to package links to enable better queryset performance\n- Ensure migrations are fine for longer log entry fields\n\n## [2.3.9] - 2021-01-19\n\n### Changed\n\n- Admin: add UX improvements through small style updates\n\n### Fixed\n\n- Admin: add apply filters button and display active filters counter badge\n  - Do not save and refresh Picotable lists on filter change, but wait\n  that the user selects the \"Apply filter\" option. Also show badge for\n  active filters to indicate that some content is filtered out.\n  Consider \"_all\" as not filter.\n- Xtheme: fix summernote icons by using the original summernote css file\n\n## [2.3.8] - 2021-01-13\n\n- Front: fix with the product images on price update\n  - patches previous v2.3.7 release\n\n## [2.3.7] - 2021-01-12\n\n- Front: improve async product carousel breakpoints\n  - Also add option to easily override breakpoints by\n    re-defining the breakpoint variable.\n- Front: optimize child product orderability checks a bit\n- Front: add option to replace product detail context\n- Front: optimize rendering images for variation products\n- Core: optimize price range calculations\n\n## [2.3.6] - 2021-01-08\n\n### Added\n\n- Admin: add mass action to send password reset emails to selected users\n- Notify: send notification when user request to reset password\n- Core: remove the dependency of shuup.notify while resetting user's password\n- Core: add signal that is triggered when user request a password reset email\n\n## [2.3.5] - 2021-01-07\n\n- Core: unify tax number max length at models\n  - Also good practice would be not to validate tax number\n  on model level but instead at the form since tax number\n  format varies per country/region.\n\n## [2.3.4] - 2021-01-06\n\n### Changed\n\n- Xtheme: use the shop provider instead of falling back to first shop\n- Admin: cache the user permissions in the user object\n- Admin: make shop provider cache the shop in the request\n- Xtheme: add option to disable placeholder cache\n  - Use setting SHUUP_XTHEME_USE_PLACEHOLDER_CACHE = True for this\n\n### Removed\n\n- Core: remove GB from countries in European Union\n\n\n## [2.3.3] - 2021-01-05\n\n- Patches v2.3.2 a bit around the xtheme editing\n\n- Xtheme: add Jinja markup in custom snippet type\n\n\n## [2.3.2] - 2021-01-04\n\n### Changed\n\n- GDPR: hide consent immediately on accept\n- Notify: Make HTML default format for emails\n- Improve the way the cache is bumped when order is created and changed\n\n### Fixed\n\n- Admin: fix missing `tr` closing tags\n\n### Removed\n\n- Notify: Remove HTML editor from notifications since summernote does not\nfunction Jinja syntax very well and for example for-loops and ifs\ncause easily broken notifications.\n\n\n## [2.3.1] - 2020-12-28\n\n### Changed\n\n- Admin: MultiselectAjaxView returns ordered by name choices\n\n### Fixed\n\n- Fix `0068_help_text_improvements` migration file to have the correct field char size: 128\n- Fix _vertical_phases.jinja incorrectly targets all forms\n- Fix initial value of Choose to register form\n\n## [2.3.0] - 2020-12-16\n\n### Added\n\n- Dashboard: Sorting of dashboard items by ordering number\n- Xtheme: add option to set a custom cell width in placeholders\n\n### Changed\n\n- Admin: set product default price value initial value to zero\n\n### Fixed\n\n- Admin: Fix multiple translations returned when using values_list on translated field\n- Front: Fix so mass and measurements unit is displayed in same unit as in the backend\n\n### Removed\n\n- Product variation management. [Use this instead](https://pypi.org/project/shuup-product-variations/).\n\n## [2.2.11] - 2020-12-08\n\n### Fixed\n\n- SimpleCMS: Show all CMS pages for authenticated users\n  when there is no group filter attached to the page\n\n## [2.2.10] - 2020-12-04\n\n### Fixed\n\n- GDPR: do not create consent for anonymous user in checkout\n\n\n## [2.2.9] - 2020-11-23\n\n### Changed\n\n- Core: Increase field lengths in *LogEntry models\n  - Add an index to the indentifier for faster querying.\n  - Use the same error prevention measures for message than is done for\n    identifier in _add_log_entry() for consistency.\n\n### Fixed\n\n- Core: Fix `ProtectedError` when deleting a `Manufacturer` which was still\n  connected to product(s).\n\n\n## [2.2.8] - 2020-11-23\n\n### Added\n\n- Add font size 16 to summernote text editor\n\n### Fixed\n\n- GDPR: make sure to return a blank list in the `get_active_consent_pages`\n  method when there is no page to consent\n\n\n## [2.2.7] - 2020-11-20\n\n### Fixed\n\n- Admin: do not add/remove shop staff member while saving a staff user\n\n\n## [2.2.6] - 2020-11-17\n\n### Added\n\n- Include products belonging to child categories of filtered category\n\n### Changed\n\nAdmin: do not allow non-superusers manage superusers\n  - Do not show is_superuser field for non-superusers no matter\n    who they are editing\n  - Do not show superuser column in list since the superusers are\n    already filtered out from non-superusers who are main people\n    using the admin panel.\n\n\n## [2.2.5] - 2020-11-12\n\n### Fixed\n\n- Front: force recalculate lines after setting the payment and shipping methods to the basket in checkout phase\n\n### Changed\n\n- Don't display taxless price when it's equal to taxful in checkout\n\n### Added\n\n- SimpleCMS: Add field to limit a page availability by permission group\n\n## [2.2.4] - 2020-11-09\n\n### Fixed\n\n- Core: Fix basket implementation that was using the same memory\nobject for all baskets instances in the same process\n\n## [2.2.3] - 2020-11-05\n\n### Fixed\n\n- Add missing id field to the media forms\n\n\n## [2.2.2] - 2020-11-03\n\n### Fixed\n\n- Prevent duplicate images in product media form\n- Do not render duplicate hidden media form field\n\n\n## [2.2.1] - 2020-11-02\n\n### Changed\n\n- Update French, Finnish and Swedish translations\n- Change the Supplier.objects.enabled() filter to only return approved suppliers\n\n### Changed\n\n- Admin: Show a loader in place of picotable when a request is pending.\n\n## [2.2.0] - 2020-10-23\n\n### Possible breaking change\n\n- When updating to this double check your project filters around supplier are working\n  after this Supplire shop->shops change.\n\n### Changed\n\n- Admin: change the supplier views to update the approved flag for the current shop only\n- Core: change the Supplier object manager to consider the approved flag for the given shop\n\n### Added\n\n- Core: add new module SupplierShop to store thre M2M relationship between the supplier\nand the shop with additional attributes\n\n## [2.1.12] - 2020-10-21\n\n### Fixed\n\n- Importer: fix the product importer to prevent parent sku being the current product or other variation child\n\n## [2.1.11] - 2020-10-15\n\n### Added\n\n- Add Spanish and French (CA) translations from Transifex\n- Notify: Add a new `attributes` attribute to `shuup.notify.base.Variable` for showing examples\n  of which attributes can be accessed in the script templates.\n- Notfiy: Show some `Order` related attributes in the notify templates.\n\n### Fixed\n\n- Core: include arbitrary refunds for max refundable amount\n- Admin: select product variation in popup window\n- Importer: ignore None columns while importing files\n- Admin: Show more descriptive error messages in the media uploader in some situations.\n\n### Changed\n\n- Update Finnish and Swedish translations from Transifex\n- Importer: add option to import product variations\n  - Add option to import product variations\n  - Improve handle stock to get supplier by supplier name and\n    set the supplier stock managed and update the module identifier.\n  - Improve handle stock to set the logical count to desired quantity\n    instead adding new stock for the amount. This should help sellers\n    to keep their product stock value correct.\n- Preserve newlines in vendor and product descriptions even when\n `SHUUP_ADMIN_ALLOW_HTML_IN_PRODUCT_DESCRIPTION` and `SHUUP_ADMIN_ALLOW_HTML_IN_VENDOR_DESCRIPTION` are `False`.\n- Importer: log errors in the importer and use specific exception classes instead of using Exception\n- Notify: make the default script language be the fallback from Parler\n- Admin: Hide the 'Root' folder from users that do not have the `\"media.view-all\"` permission.\n\n\n## [2.1.10] - 2020-09-29\n\n### Fixed\n\n- Front: fix typo in pagination\n\n### Translations\n\n- Update Finnish and Swedish translations\n\n\n## [2.1.9] - 2020-09-23\n\n### Fixed\n\n- Fix button that removes coupon from the basket by using the correct JS event property\n\n## [2.1.8] - 2020-09-15\n\n- Update translations strings\n- Importer: fix product CSV importer to better match the headers\n\n\n## [2.1.7] - 2020-09-11\n\n- Admin: improve product variation management. This release purely\n  amends release 2.1.6.\n\n\n## [2.1.6] - 2020-09-11\n\nAdmin: add supplier check to product list and edit views\nAdmin: improve product variation management\n\n  Remove activate template form field as confusing.\n\n  1. Now when add new template:\n    - New empty template is created\n\n  2. When you have template selected:\n    - Product variations are saved based on the form\n    - Variation options are updated to the selected template\n\n  3. When template is not selected:\n    - Product variations are saved based on the form\n\n\n## [2.1.5] - 2020-09-08\n\n### Fixed\n\n- Requirements: require Markdown>=3,<4 instead <3\n- Xtheme: Fix social media plugin form initial data population.\n\n\n## [2.1.4] - 2020-09-08\n\n### Fixed\n\n- Xtheme: fix social media plugin form populate\n- GDPR: Fix anonymization error when an order of a contact had no shipping or billing address.\n\n\n## [2.1.3] - 2020-08-28\n\n### Fixed\n\n- Xtheme: fix model choice widget for plugins (django 2)\n\n\n## [2.1.2] - 2020-08-26\n\n### Fixed\n\n- Xtheme: fix editor template issue\n- Simple CMS: make sure to pass optional parameters through kwargs in form\n\n\n## [2.1.1] - 2020-08-26\n\n### Added\n\n- Admin: add option to delete attributes\n\n### Fixed\n\n- Xtheme: fix editor template issue and make sure to pass optional parameters through kwargs in form\n- Notify: unescape email subject and body to prevent sending broken characters in emails\n\n\n## [2.1.0] - 2020-08-24\n\n### Added\n\n- shuup.notify: add notification_email_before_send signal to SendMail\n- shuup.notify: add event identifier to Context\n\n\n## [2.0.8] - 2020-08-24\n\n### Fixed\n\n- Prevent crashing when trying to cache an unpicklable value.\n\n\n## [2.0.7] - 2020-08-21\n\n### Fixed\n\n- Fix passing a `reverse_lazy()` URL as the `upload_url` argument for `FileDnDUploaderWidget`.\n\n\n## [2.0.6] - 2020-08-18\n\n### Changed\n\n- Admin: Make the order editor keep the suppliers of non-product order lines intact.\n\n### Fixed:\n\n- Admin: Fix the edit button on the order editor.\n\n\n## [2.0.5] - 2020-08-16\n\n### Added\n\n- Admin: user and permission based access to media folders\n\n  This means that all vendors can have their own root folder and do what every they want in that folder.\n  But it also allows the admin to give viewing access to one folder for all suppliers.\n\n\n## [2.0.4] - 2020-08-07\n\n- Testing: add missing migrations\n\n\n## [2.0.3] - 2020-08-07\n\n- CMS: add missing migrations\n\n\n## [2.0.2] - 2020-08-07\n\n### Changed\n\n- Removed Django 1.11 compatible code from the code base\n\n### Fixed\n\n- Admin: fix logout view that was loading the template from Django instead of custom template\n- Admin: return `None` when the order source was not correctly initialized in JsonOrderCreator\n- Core: add parameter in shuup_static to load the version of a given package\n\n\n## [2.0.1] - 2020-08-04\n\n- Add initial support for Django 2.2\n\n\n## [1.11.10] - 2020-08-04\n\n- Fix issue on arranging menu after reset which sets the configuration None\n  which in the other hand is hard to update as it is not dict.\n\n\n## [1.11.9] - 2020-08-04\n\n- Admin: add option to arrange menu for superuses, staff and suppliers\n\n  For now it was only possible to arrange menu per user which is not\n  sufficient while the menu needs to be arranged for the whole group\n  of people like shop staff or vendors.\n\n  Allow to create menu custom menu for superusers, staff or suppliers,\n  but remain the possibility to still arrange the menu per user.\n\n  Add option to translate each menu arranged for these groups since\n  not all vendors/suppliers necessary speak same language.\n\n\n## [1.11.8] - 2020-07-31\n\n### Fixed\n\n- Fix admin order edit tool to use correct id for supplier query\n- Admin: limit the Manufacturer delete queryset per shop\n\n### Added\n\n- Notify: added email template object to store reusable email templates for SendEmail actions\n  This contains a migration step to move all old body template field to use email templates.\n\n### Changed\n\n- Xtheme: move CodeMirror JS lib dependence to Admin\n- Sanitize product description on save if `SHUUP_ADMIN_ALLOW_HTML_IN_PRODUCT_DESCRIPTION` is set to `False`\n\n## [1.11.7] - 2020-07-23\n\n### Added\n\n- Core: Add dynamic measurement unit system\n  - New settings for specifying units:\n    - `SHUUP_MASS_UNIT`\n    - `SHUUP_LENGTH_UNIT`\n  - New function for getting the volume unit: `shuup.core.utils.units.get_shuup_volume_unit`\n\n### Changed\n\n- **BREAKING**: Change `Shipment` default weight unit from `kg` to `g`\n- **BREAKING**: Change `Shipment` default volume unit from `m3` to `mm3`\n- **BREAKING**: Change `ShipmentProduct` default volume unit from `m3` to `mm3`\n\n### Removed\n\n- Remove 'known unit' validation from `MeasurementField`, it can contain any units now\n\n## [1.11.6] - 2020-07-22\n\n### Changed\n\n- Front: Add priority attribute to base order form to enable using precedence\n\n## [1.11.5] - 2020-07-07\n\n### Added\n\n- Add signal when an email is sent by a notification\n\n## [1.11.4] - 2020-07-06\n\n- Fix issue with browser tests\n\n## [1.11.3] - 2020-07-04\n\n### Added\n\n- Add `Dockerfile-dev` for development\n- Add Docker instructions to docs\n\n### Changed\n\n- Add theme for the shop in `shuup_init`\n- Make the shop not be in maintenance mode in `shuup_init`\n- Make `Dockerfile` use `shuup` from PyPi for faster build time\n\n## [1.11.2] - 2020-07-03\n\n- Move workbench sqlite database location for upcoming Docker setup\n\n## [1.11.1] - 2020-07-03\n\n### Added\n\n- Admin: Add settings for controlling allowing HTML in product and vendor descriptions\n\n\n## [1.11.0] - 2020-07-02\n\n### Changed\n\n- Importer: add context object while initializing a importer class\n- Core: use UUID in basket IDs to prevent possible duplicates\n- Core: save basket shipping and billing address as dictionary when id is not available\n- Front: remove the custom _load() implementation from the basket as it is the same as the core\n- Core: ignore lines that are not from the given source while calculating taxes\n- Campaigns: do not apply campaigns in baskets configured to a supplier\n- Admin: change service admin to list only providers that the current user can access\n- Use UUID4 while generating order line ids by default\n- Admin: Improve message banners, by:\n    - Resetting the timeout for hiding the messages when a new message is added.\n    - Immediately clearing the already hidden messages a when new one is added.\n    - Not hiding messages when clicking just random background elements.\n    - Allowing dismissing all of the messages by clicking any one of them anywhere.\n\n### Added\n\n- Admin: add improved product copy\n- Core: add task runner to support running tasks using 3rd party services like Celery\n- Core: add shops and supplier to ServiceProvider and Service models\n- Front: add feature for checkout phases to spawn extra phases\n- Add custom get_ip method and use it everywhere\n- Importer: add permissions for all the diffrent types of importers\n- Importer: add context class to data importer\n\n### Removed\n\n- Travis jobs for Django 1.8 and 1.9\n\n### Fixed\n\n- Removed the kind prefix from feedback messages using Django messages to prevent duplicate strings.\n- Fixed the way the permissions identifier are split in admin\n- Fixed issue that was importing User model directly\n- Core: changed `del` basket command handler to not try to parse the basket line into an integer\n\n\n## [1.10.16] - 2020-06-03\n\n- Simple CMS: Fix a bug with the page links plugin\n\n## [1.10.15] - 2020-06-02\n\n### Changed\n\n- Front: Ensure company name and tax number is set to both billing and shipping address same way\nas when filled through company form when customer is not logged in. Company name and tax number\nat order addresses seems to help with some taxation logic as well as makes things more consistent.\n\n### Fixed\n\n- Admin: Make sure related custom columns are added accrodingly. Fix issue with filtering through columns\nthat are by default hidden\n\n## [1.10.14] - 2020-05-27\n\n### Fixed\n\n- Front: only show carousel title when there is one\n\n### Changed\n\n- Notify: Add AccountActivation event. AccountActivation event is\n  triggered only when the user is activated for the first time.\n- Front: improve next parameter with registration. Check GET\n  parameter first and then fallback to POST data.\n\n## [1.10.13] - 2020-05-20\n\n- Admin: fix width issue with picotable images\n- Admin: fix bugs in order edit and improve it one step closer to\n  multivendor world. Now supports situation when vendors does not\n  share products.\n     - Add option to make shipping and payment method optional\n     - Add supplier to pricing context\n     - Show supplier name on product column\n     - Make auto add for product select false by default\n     - Fix product select2 missing URL and data handler since\n       the whole ajax method was passed as attrs.\n     - Add option to open/close collapsed content sections in mobile\n- Core: add option to enable order edit for multiple vendors\n- Front: do not stack history on product list when filters are changed.\n  Instead replace state so back-buttons works nicely.\n- Front: prevent image Lightbox touching history so you do not need\n  to click back 6 times after you have viewed all images.\n\n## [1.10.12] - 2020-05-05\n\n### Added\n\n- Admin: add error message when upload fails. At media queue complete do not\n  resave product media if the file-count has not changed. This for example\n  prevents media save when the upload itself fails.\n- Admin: add option to override dropzone upload path by using data attribute\n- Admin: add upload path to browser URLs and use it to fallback on media\n  uploads when the actual media path is not available.\n- Admin: Ability to delete manufacturer\n- Admin: Ability to login as the selected contact if it's a user\n\n### Fixed\n\n- Admin: Now when activating/deactivating user it's contact will also change\n- Admin: New notification for when a account get's reactivated\n\n## [1.10.11] - 2020-04-23\n\n### Fixed\n\n- Discounts: create different admin module for archived discounts to fix breadcrumbs\n- Fix product pagination by not overriding the state with undefined values\n\n### Fixed\n\n- Middleware: fix so it trys to take the users timezone first, then the suppliers, last the projects TIME_ZONE\n\n### Changed\n\n- Front: customize sort options through settings\n\n## [1.10.10] - 2020-03-24\n\n### Fixed\n\n- Admin: Notification name when deleteing it\n- Admin: Update contact list so that it only shows customers by default\n- Front: Fix typo\n\n### Changed\n\n- Front: Add supplier choice to best selling product context function\n- Admin: allow sorting categories by name\n- Admin: show product orderability errors as list\n\n\n## [1.10.9] - 2020-03-24\n\n### Fixed\n\n- Admin: remove pinned /sa/ URL from scripts to support dynamic admin URLs\n- Admin: Fix graphical (incorrect indent) bug in Product / Stock Management\n\n## [1.10.8] - 2020-03-20\n\n### Changed\n\n- Admin: add spinner and progressbar options components through Bootstrap 4.\n\n### Fixed\n\n- Issue running category filter browser test with Travis\n\n\n## [1.10.7] - 2020-03-09\n\n### Fixed\n\n- Admin: remove pinned /sa/ URL from scripts to support dynamic admin URLs\n- Front: keep the current query string parameters as the initial state\n  when refreshing product filters.\n\n### Changed\n\n- Admin: fix page jumps after reaload\n- Admin: make browser urls support urls with parameters\n\n## [1.10.6] - 2020-02-28\n\n### Changed\n\n- Core: supplier name max length to 128 from 64\n\n## [1.10.5] - 2020-02-27\n\n### Added\n\n- Add option to send notification event at password recovery\n\n### Changed\n\n- Improve the admin modals to use flexbox and work better on small devices\n\n### Fixed\n\n- Admin: fix password recovery success URL\n- Picotable: render the filters button on small devices,\n  even when there is no data, to allow resetting filters\n\n## [1.10.4] - 2020-02-22\n\n### Changed\n\n- Make Admin messages dismissible\n\n### Fixed\n\n- Admin: Fix search results overflowing the canvas\n\n## [1.10.3] - 2020-02-21\n\n### Fixed\n\n- Admin: fix bug when uploading product media\n\n## [1.10.2] - 2020-02-19\n\n### Added\n\n- Admin: add option to impersonate staff users\n- Notify: add option to delete notify scripts\n- Admin: Allow shop staff to impersonate regular users\n- Notify: Add BCC and CC fields to SendEmail notification action.\n- Add the CHANGELOG.md to the root of the code base.\n\n### Changed\n\n- Xtheme: Improve template injection by checking not wasting time invoking regex for nothing\n- Add `MiddlewareMixin` to all middlewares to prepare for Django 2.x\n- Notify: Changed the Email topology type to support comma-separated list of emails when using constants.\n- Front: skip product filter refresh if filters not defined\n- GDPR: change \"i agree\" button to \"i understand\"\n\n### Fixed\n\n- Front: fix notification template default content\n- Admin: improve primary image fallback for product\n- Fixed the placeholder of Select2 component in Admin\n- FileDnDUploader: Add check for the `data-kind` attribute of the drop zone. If the data-kind is\n  `images`, add an attribute to the hidden input that only allows images to be uploaded.\n- Front: fix bug with imagelightbox\n- CMS: Free page URL on delete\n\n## Older versions\n\nFind older release notes [here](./doc/changelog.rst).\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom __future__ import unicode_literals\n\nimport inspect\nimport json\nimport six\nimport warnings\nfrom django.conf import settings\nfrom django.contrib.auth.views import redirect_to_login\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.http.response import HttpResponseForbidden\nfrom django.utils.encoding import force_str, force_text\nfrom django.utils.html import escape\nfrom django.utils.http import urlencode\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom shuup.admin.module_registry import get_modules\nfrom shuup.admin.shop_provider import get_shop\nfrom shuup.admin.utils.permissions import get_missing_permissions\nfrom shuup.utils import importing\nfrom shuup.utils.django_compat import NoReverseMatch, URLPattern, get_callable, is_authenticated, reverse\nfrom shuup.utils.excs import Problem\n\ntry:\n    from urllib.parse import parse_qsl\nexcept ImportError:  # pragma: no cover\n    from urlparse import parse_qsl  # Python 2.7\n\n\nclass AdminRegexURLPattern(URLPattern):\n    def __init__(self, regex, callback, default_args=None, name=None, require_authentication=True, permissions=()):\n        self.permissions = tuple(permissions)\n        self.require_authentication = require_authentication\n\n        if callable(callback):\n            callback = self.wrap_with_permissions(callback)\n\n        from django.urls import re_path\n\n        repath = re_path(regex, callback, default_args, name)\n        pattern = repath.pattern\n        super(AdminRegexURLPattern, self).__init__(pattern, callback, default_args, name)\n\n    def _get_unauth_response(self, request, reason):\n        \"\"\"\n        Get an error response (or raise a Problem) for a given request and reason message.\n\n        :type request: Request.\n        :param request: HttpRequest\n        :type reason: Reason string.\n        :param reason: str\n        \"\"\"\n        if request.is_ajax():\n            return HttpResponseForbidden(json.dumps({\"error\": force_text(reason)}))\n        error_params = urlencode({\"error\": force_text(reason)})\n        login_url = force_str(reverse(\"shuup_admin:login\") + \"?\" + error_params)\n        resp = redirect_to_login(next=request.path, login_url=login_url)\n        if is_authenticated(request.user):\n            # Instead of redirecting to the login page, let the user know what's wrong with\n            # a helpful link.\n            raise (\n                Problem(_(\"Can't view this page. %(reason)s\") % {\"reason\": escape(reason)}).with_link(\n                    url=resp.url, title=_(\"Log in with different credentials...\")\n                )\n            )\n        return resp\n\n    def _get_unauth_reason(self, request):\n        \"\"\"\n        Figure out if there's any reason not to allow the user access to this view via the given request.\n\n        :type request: Request.\n        :param request: HttpRequest\n        :rtype: str|None\n        \"\"\"\n        if self.require_authentication:\n            if not is_authenticated(request.user):\n                return _(\"Sign in to continue.\")\n            elif not getattr(request.user, \"is_staff\", False):\n                return _(\"Your account must have `Access to Admin Panel` permissions to access this page.\")\n            elif not get_shop(request):\n                return _(\"There is no active shop available. Contact support for more details.\")\n\n        missing_permissions = get_missing_permissions(request.user, self.permissions)\n        if missing_permissions:\n            return _(\"You do not have the required permissions: %s\") % \", \".join(missing_permissions)\n\n    def wrap_with_permissions(self, view_func):\n        if callable(getattr(view_func, \"as_view\", None)):\n            view_func = view_func.as_view()\n\n        @six.wraps(view_func)\n        def _wrapped_view(request, *args, **kwargs):\n            unauth_reason = self._get_unauth_reason(request)\n            if unauth_reason:\n                return self._get_unauth_response(request, unauth_reason)\n            return view_func(request, *args, **kwargs)\n\n        return _wrapped_view\n\n    @property\n    def callback(self):\n        if self._callback is not None:\n            return self._callback\n\n        callback = get_callable(self._callback_str)\n        self._callback = self.wrap_with_permissions(callback)\n        return self._callback\n\n    @callback.setter\n    def callback(self, value):\n        self._callback = value\n\n\ndef admin_url(regex, view, kwargs=None, name=None, prefix=\"\", require_authentication=True, permissions=None):\n    if permissions is None:\n        permissions = (name,) if name else ()\n\n    if isinstance(view, six.string_types):\n        if not view:\n            raise ImproperlyConfigured(\"Error! Empty URL pattern view name not permitted (for pattern `%r`).\" % regex)\n        if prefix:\n            view = prefix + \".\" + view\n\n        view = importing.load(view)\n\n    return AdminRegexURLPattern(\n        regex, view, kwargs, name, require_authentication=require_authentication, permissions=permissions\n    )\n\n\ndef get_edit_and_list_urls(url_prefix, view_template, name_template, permissions=()):\n    \"\"\"\n    Get a list of edit/new/list URLs for (presumably) an object type with standardized URLs and names.\n\n    :param url_prefix: What to prefix the generated URLs with. E.g. `\"^taxes/tax\"`.\n    :type url_prefix: str\n    :param view_template: A template string for the dotted name of the view class.\n                          E.g. \"shuup.admin.modules.taxes.views.Tax%sView\".\n    :type view_template: str\n    :param name_template: A template string for the URLnames. E.g. \"tax.%s\".\n    :type name_template: str\n    :return: List of URLs.\n    :rtype: list[AdminRegexURLPattern]\n    \"\"\"\n    if permissions:\n        warnings.warn(\n            \"Warning! `get_edit_and_list_urls` permissions attribute will be \"\n            \"deprecated in Shuup 2.0 as unused for this util.\",\n            DeprecationWarning,\n        )\n\n    return [\n        admin_url(\n            r\"%s/(?P<pk>\\d+)/$\" % url_prefix,\n            view_template % \"Edit\",\n            name=name_template % \"edit\",\n            permissions=(name_template % \"edit\",),\n        ),\n        admin_url(\n            \"%s/new/$\" % url_prefix,\n            view_template % \"Edit\",\n            name=name_template % \"new\",\n            kwargs={\"pk\": None},\n            permissions=(name_template % \"new\",),\n        ),\n        admin_url(\n            \"%s/$\" % url_prefix,\n            view_template % \"List\",\n            name=name_template % \"list\",\n            permissions=(name_template % \"list\",),\n        ),\n        admin_url(\n            \"%s/list-settings/\" % url_prefix,\n            \"shuup.admin.modules.settings.views.ListSettingsView\",\n            name=name_template % \"list_settings\",\n            permissions=(name_template % \"list_settings\",),\n        ),\n    ]\n\n\nclass NoModelUrl(ValueError):\n    pass\n\n\ndef get_model_url(\n    object, kind=\"detail\", user=None, required_permissions=None, shop=None, raise_permission_denied=False, **kwargs\n):\n    \"\"\"\n    Get a an admin object URL for the given object or object class by\n    interrogating each admin module.\n\n    If a user is provided, checks whether user has correct permissions\n    before returning URL.\n\n    Raises `NoModelUrl` if lookup fails\n\n    :param object: Model or object class.\n    :type object: class\n    :param kind: URL kind. Currently \"new\", \"list\", \"edit\", \"detail\".\n    :type kind: str\n    :param user: Optional instance to check for permissions.\n    :type user: django.contrib.auth.models.User|None\n    :param required_permissions: Optional iterable of permission strings.\n    :type required_permissions: Iterable[str]|None\n    :param shop: The shop that owns the resource.\n    :type request: shuup.core.models.Shop|None\n    :param raise_permission_denied: raise PermissionDenied exception if the url\n        is found but user has not permission. If false, None will be returned instead.\n        Default is False.\n    :type raise_permission_denied: bool\n    :return: Resolved URL.\n    :rtype: str\n    \"\"\"\n    for module in get_modules():\n        url = module.get_model_url(object, kind, shop)\n\n        if not url:\n            continue\n\n        if user is None:\n            return url\n\n        from shuup.utils.django_compat import Resolver404, resolve\n\n        try:\n            if required_permissions is not None:\n                warnings.warn(\n                    \"Warning! `required_permissions` parameter will be deprecated \"\n                    \"in Shuup 2.0 as unused for this util.\",\n                    DeprecationWarning,\n                )\n                permissions = required_permissions\n            else:\n                resolved = resolve(url)\n                from shuup.admin.utils.permissions import get_permissions_for_module_url\n\n                permissions = get_permissions_for_module_url(module, resolved.url_name)\n\n            missing_permissions = get_missing_permissions(user, permissions)\n\n            if not missing_permissions:\n                return url\n\n            if raise_permission_denied:\n                from django.core.exceptions import PermissionDenied\n\n                reason = _(\"Can't view this page. You do not have the required permission(s): `{permissions}`.\").format(\n                    permissions=\", \".join(missing_permissions)\n                )\n                raise PermissionDenied(reason)\n\n        except Resolver404:\n            # what are you doing developer?\n            return url\n\n    raise NoModelUrl(\"Error! Can't get object URL of kind %s: %r.\" % (kind, force_text(object)))\n\n\ndef derive_model_url(model_class, urlname_prefix, object, kind):\n    \"\"\"\n    Try to guess a model URL for the given `object` and `kind`.\n\n    An utility for people implementing `get_model_url`.\n\n    :param model_class: The model class the object must be an instance or subclass of.\n    :type model_class: class\n    :param urlname_prefix: URLname prefix. For instance, `shuup_admin:shop_product.`\n    :type urlname_prefix: str\n    :param object: The model or model class as passed to `get_model_url`.\n    :type object: django.db.models.Model|class\n    :param kind: URL kind as passed to `get_model_url`.\n    :type kind: str\n    :return: Resolved URL or None.\n    :rtype: str|None\n    \"\"\"\n    if not (isinstance(object, model_class) or (inspect.isclass(object) and issubclass(object, model_class))):\n        return\n\n    kind_to_urlnames = {\n        \"detail\": (\"%s.detail\" % urlname_prefix, \"%s.edit\" % urlname_prefix),\n    }\n\n    kwarg_sets = [{}]\n    if getattr(object, \"pk\", None):\n        kwarg_sets.append({\"pk\": object.pk})\n\n    for urlname in kind_to_urlnames.get(kind, [\"%s.%s\" % (urlname_prefix, kind)]):\n        for kwargs in kwarg_sets:\n            try:\n                return reverse(urlname, kwargs=kwargs)\n            except NoReverseMatch:\n                pass\n    # No match whatsoever.\n    return None\n\n\ndef manipulate_query_string(url, **qs):\n    if \"?\" in url:\n        url, current_qs = url.split(\"?\", 1)\n        qs = dict(parse_qsl(current_qs), **qs)\n    qs = [(key, value) for (key, value) in qs.items() if value is not None]\n    if qs:\n        return \"%s?%s\" % (url, urlencode(qs))\n    else:\n        return url\n\n\ndef get_model_front_url(request, object):\n    \"\"\"\n    Get a frontend URL for an object.\n\n    :param request: Request.\n    :type request: HttpRequest\n    :param object: A model instance.\n    :type object: django.db.models.Model\n    :return: URL or None.\n    :rtype: str|None\n    \"\"\"\n    # TODO: This method could use an extension point for alternative frontends.\n    if not object.pk:\n        return None\n    if \"shuup.front\" in settings.INSTALLED_APPS:\n        # Best effort to use the default frontend for front URLs.\n        try:\n            from shuup.front.template_helpers.urls import model_url\n\n            return model_url({\"request\": request}, object)\n        except (ValueError, NoReverseMatch):\n            pass\n    return None\n\n\ndef get_front_url(context):\n    \"\"\"\n    Get front URL for admin navigation.\n\n    1. Use front URL from view context if passed.\n    2. Fallback to index.\n    \"\"\"\n    front_url = context.get(\"front_url\")\n    if not front_url:\n        try:\n            front_url = reverse(\"shuup:index\")\n        except NoReverseMatch:\n            front_url = None\n    return front_url\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom __future__ import unicode_literals\n\nimport six\nfrom django.core.exceptions import ValidationError\nfrom django.http import HttpResponseRedirect, JsonResponse\nfrom django.shortcuts import redirect\nfrom django.utils.html import escape\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom shuup.apps.provides import get_provide_objects\nfrom shuup.core.basket import commands\nfrom shuup.core.basket.command_middleware import BaseBasketCommandMiddleware\nfrom shuup.core.signals import get_basket_command_handler\nfrom shuup.utils.django_compat import force_text\nfrom shuup.utils.excs import Problem\n\n\nclass BasketCommandDispatcher(object):\n    \"\"\"\n    BasketCommandDispatcher handles (usually AJAX) requests that somehow update the basket.\n    You should never instantiate BasketCommandDispatcher yourself -- instead use\n    `get_basket_command_dispatcher()`.\n\n    All `handle_*` methods are expected to accept `**kwargs`.\n    \"\"\"\n\n    commands_module = commands\n\n    def __init__(self, request, basket=None):\n        \"\"\"\n        :type request: HttpRequest\n        \"\"\"\n        self.request = request\n        self.ajax = self.request.is_ajax()\n        # :type self.basket: BaseBasket\n        self.basket = basket or request.basket\n\n    def get_command_handler(self, command):\n        handler = getattr(self.commands_module, \"handle_%s\" % command.lower(), None)\n        if handler and callable(handler):\n            return handler\n\n        for receiver, handler in get_basket_command_handler.send(\n            BasketCommandDispatcher, command=command, instance=self\n        ):\n            if handler and callable(handler):\n                return handler\n\n    def handle(self, command, kwargs=None):\n        \"\"\"\n        Dispatch and handle processing of the given command.\n\n        :param command: Name of command to run.\n        :type command: unicode\n        :param kwargs: Arguments to pass to the command handler. If empty, `request.POST` is used.\n        :type kwargs: dict\n        :return: response.\n        :rtype: HttpResponse\n        \"\"\"\n\n        kwargs = kwargs or dict(six.iteritems(self.request.POST))\n        try:\n            handler = self.get_command_handler(command)\n            if not handler or not callable(handler):\n                raise Problem(_(\"Error! Invalid command `%s`.\") % escape(command))\n            kwargs.pop(\"csrfmiddlewaretoken\", None)  # The CSRF token should never be passed as a kwarg\n            kwargs.pop(\"command\", None)  # Nor the command\n            kwargs.update(request=self.request, basket=self.basket)\n            kwargs = self.preprocess_kwargs(command, kwargs)\n\n            response = handler(**kwargs) or {}\n\n        except (Problem, ValidationError) as exc:\n            if not self.ajax:\n                raise\n            msg = exc.message if hasattr(exc, \"message\") else exc\n            response = {\n                \"error\": force_text(msg, errors=\"ignore\"),\n                \"code\": force_text(getattr(exc, \"code\", None) or \"\", errors=\"ignore\"),\n            }\n\n        response = self.postprocess_response(command, kwargs, response)\n\n        if self.ajax:\n            return JsonResponse(response)\n\n        return_url = response.get(\"return\") or kwargs.get(\"return\")\n        if return_url and return_url.startswith(\"/\"):\n            return HttpResponseRedirect(return_url)\n        return redirect(\"shuup:basket\")\n\n    def preprocess_kwargs(self, command, kwargs):\n        \"\"\"\n        Preprocess kwargs before they are passed to the given `command` handler.\n        Useful for subclassing. Must return the new `kwargs`, even if it wasn't\n        mutated.\n\n        :param command: The name of the command about to be run.\n        :param kwargs: dict of arguments.\n        :return: dict of arguments.\n        \"\"\"\n\n        for basket_command_middleware in get_provide_objects(\"basket_command_middleware\"):\n            if not issubclass(basket_command_middleware, BaseBasketCommandMiddleware):\n                continue\n\n            # create a copy\n            kwargs = dict(\n                basket_command_middleware().preprocess_kwargs(\n                    basket=self.basket, request=self.request, command=command, kwargs=kwargs\n                )\n            )\n\n        return kwargs\n\n    def postprocess_response(self, command, kwargs, response):\n        \"\"\"\n        Postprocess the response dictionary (not a HTTP response!) before it is\n        either turned into JSON or otherwise processed (in the case of non-AJAX requests).\n\n        :param command: The command that was run.\n        :param kwargs: The actual kwargs the command was run with.\n        :param response: The response the command returned.\n        :return: The response to be processed and sent to the client.\n        \"\"\"\n\n        for basket_command_middleware in get_provide_objects(\"basket_command_middleware\"):\n            if not issubclass(basket_command_middleware, BaseBasketCommandMiddleware):\n                continue\n\n            response = dict(\n                basket_command_middleware().postprocess_response(\n                    basket=self.basket, request=self.request, command=command, kwargs=kwargs, response=response\n                )\n            )\n\n        return response\n", "# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom __future__ import unicode_literals\n\nfrom collections import OrderedDict\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.http.response import Http404\nfrom django.utils.html import escape\n\nfrom shuup.front.basket import get_basket\nfrom shuup.utils.django_compat import reverse\nfrom shuup.utils.importing import load\n\n\nclass CheckoutProcess(object):\n    horizontal_template = True\n\n    def __init__(self, phase_specs, phase_kwargs, view=None):\n        \"\"\"\n        Initialize this checkout process.\n\n        :type phase_specs: list[str]\n        :type phase_kwargs: dict\n        :type view: shuup.front.checkout.BaseCheckoutView|None\n        \"\"\"\n        self.phase_specs = phase_specs\n        self.phase_kwargs = phase_kwargs\n        self.view = view\n        self.request = self.phase_kwargs.get(\"request\")\n\n    @property\n    def phases(self):\n        \"\"\"\n        :rtype: Iterable[CheckoutPhaseViewMixin]\n        \"\"\"\n        if not getattr(self, \"_phases\", None):\n            self._phases = self._load_phases()\n        return self._phases\n\n    def instantiate_phase_class(self, phase_class, **extra_kwargs):\n        if not phase_class.identifier:  # pragma: no cover\n            raise ImproperlyConfigured(\"Error! Phase `%r` has no identifier.\" % phase_class)\n        kwargs = {}\n        kwargs.update(self.phase_kwargs)\n        kwargs.update(extra_kwargs)\n        phase = phase_class(checkout_process=self, horizontal_template=self.horizontal_template, **kwargs)\n        return phase\n\n    def _load_phases(self):\n        phases = OrderedDict()\n\n        for phase_spec in self.phase_specs:\n            phase_class = load(phase_spec)\n            phase = self.instantiate_phase_class(phase_class)\n            phases[phase_class.identifier] = phase\n\n            # check whether the phase spawns new phases,\n            # if so, then let's spawn then and add the phases\n            for spawned_phase in phase.spawn_phases(self):\n                phases[spawned_phase.identifier] = spawned_phase\n\n        return list(phases.values())\n\n    def get_current_phase(self, requested_phase_identifier):\n        found = False\n        for phase in self.phases:\n            if phase.is_valid():\n                phase.process()\n            if found or not requested_phase_identifier or requested_phase_identifier == phase.identifier:\n                found = True  # We're at or past the requested phase\n                if not phase.should_skip():\n                    return phase\n            if not phase.should_skip() and not phase.is_valid():  # A past phase is not valid, that's the current one\n                return phase\n        raise Http404(\"Error! Phase with identifier `%s` not found.\" % escape(requested_phase_identifier))\n\n    def _get_next_phase(self, phases, current_phase, target_phase):\n        found = False\n        for phase in phases:\n            if phase.identifier == current_phase.identifier:\n                # Found the current one, so any valid phase from here on out is the next one\n                found = True\n                continue\n\n            if found and current_phase.identifier != target_phase.identifier:\n                return phase\n\n            if found and not phase.should_skip():\n                # Yep, that's the one\n                return phase\n\n    def get_next_phase(self, current_phase, target_phase):\n        return self._get_next_phase(self.phases, current_phase, target_phase)\n\n    def get_previous_phase(self, current_phase, target_phase):\n        return self._get_next_phase(reversed(self.phases), current_phase, target_phase)\n\n    def prepare_current_phase(self, phase_identifier):\n        current_phase = self.get_current_phase(phase_identifier)\n        self.add_phase_attributes(current_phase)\n        self.current_phase = current_phase\n        return current_phase\n\n    def add_phase_attributes(self, target_phase, current_phase=None):\n        \"\"\"\n        Add phase instance attributes (previous, next, etc) to the given target phase,\n        using the optional `current_phase` as the current phase for previous and next.\n\n        This is exposed as a public API for the benefit of phases that need to do sub-phase\n        initialization and dispatching, such as method phases.\n        \"\"\"\n        current_phase = current_phase or target_phase\n        target_phase.previous_phase = self.get_previous_phase(current_phase, target_phase)\n        target_phase.next_phase = self.get_next_phase(current_phase, target_phase)\n        target_phase.phases = self.phases\n        if current_phase in self.phases:\n            current_phase_index = self.phases.index(current_phase)\n            # Set up attributes that are handy for the phase bar in the templates.\n            for i, phase in enumerate(self.phases):\n                setattr(phase, \"is_past\", i > current_phase_index)\n                setattr(phase, \"is_current\", phase == current_phase)\n                setattr(phase, \"is_future\", i < current_phase_index)\n                setattr(phase, \"is_previous\", phase == target_phase.previous_phase)\n                setattr(phase, \"is_next\", phase == target_phase.next_phase)\n        return target_phase\n\n    def reset(self):\n        for phase in self.phases:\n            phase.reset()\n\n    def complete(self):\n        \"\"\"\n        To be called from a phase (`self.checkout_process.complete()`) when the checkout process is complete.\n        \"\"\"\n        self.reset()\n\n    def get_phase_url(self, phase):\n        # The self.view is optional for backward compatibility\n        if not self.view:\n            url_kwargs = {\"phase\": phase.identifier}\n            return reverse(\"shuup:checkout\", kwargs=url_kwargs)\n        return self.view.get_phase_url(phase)\n\n    @property\n    def basket(self):\n        \"\"\"\n        The basket used in this checkout process.\n\n        :rtype: shuup.front.basket.objects.BaseBasket\n        \"\"\"\n        return get_basket(self.request)\n\n\nclass VerticalCheckoutProcess(CheckoutProcess):\n    horizontal_template = False\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom __future__ import unicode_literals\n\nfrom django.conf.urls import url\nfrom django.contrib.auth.decorators import login_required\nfrom django.http.response import HttpResponse\nfrom django.utils.html import escape\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.i18n import set_language\nfrom itertools import chain\n\nfrom shuup.apps.provides import get_provide_objects\n\nfrom .views.basket import BasketView\nfrom .views.category import AllCategoriesView, CategoryView\nfrom .views.checkout import get_checkout_view\nfrom .views.dashboard import DashboardView\nfrom .views.index import IndexView\nfrom .views.misc import (\n    force_anonymous_contact,\n    force_company_contact,\n    force_person_contact,\n    stop_impersonating,\n    toggle_all_seeing,\n)\nfrom .views.order import OrderCompleteView\nfrom .views.payment import ProcessPaymentView\nfrom .views.product import ProductDetailView\nfrom .views.upload import media_upload\n\n# TODO: Check _not_here_yet URLs in this file\n\n\ndef _not_here_yet(request, *args, **kwargs):\n    return HttpResponse(\"Not here yet: %s (%r, %r)\" % (request.path, escape(args), escape(kwargs)), status=410)\n\n\n# Use a different js catalog function in front urlpatterns to prevent forcing\n# the shop language settings in admin js catalog.\ndef front_javascript_catalog_all(request, domain=\"djangojs\"):\n    from shuup.utils.i18n import javascript_catalog_all\n\n    return javascript_catalog_all(request, domain)\n\n\ncheckout_view = get_checkout_view()\n\n\nurlpatterns = [\n    url(r\"^set-language/$\", csrf_exempt(set_language), name=\"set-language\"),\n    url(r\"^i18n.js$\", front_javascript_catalog_all, name=\"js-catalog\"),\n    url(r\"^checkout/$\", checkout_view, name=\"checkout\"),\n    url(r\"^checkout/(?P<phase>.+)/$\", checkout_view, name=\"checkout\"),\n    url(r\"^basket/$\", csrf_exempt(BasketView.as_view()), name=\"basket\"),\n    url(r\"^dashboard/$\", login_required(DashboardView.as_view()), name=\"dashboard\"),\n    url(r\"^toggle-allseeing/$\", login_required(toggle_all_seeing), name=\"toggle-all-seeing\"),\n    url(r\"^force-anonymous-contact/$\", login_required(force_anonymous_contact), name=\"force-anonymous-contact\"),\n    url(r\"^force-company-contact/$\", login_required(force_company_contact), name=\"force-company-contact\"),\n    url(r\"^force-person-contact/$\", login_required(force_person_contact), name=\"force-person-contact\"),\n    url(r\"^stop-impersonating/$\", login_required(stop_impersonating), name=\"stop-impersonating\"),\n    url(r\"^upload-media/$\", login_required(media_upload), name=\"media-upload\"),\n    url(\n        r\"^order/payment/(?P<pk>.+?)/(?P<key>.+?)/$\",\n        csrf_exempt(ProcessPaymentView.as_view()),\n        kwargs={\"mode\": \"payment\"},\n        name=\"order_process_payment\",\n    ),\n    url(\n        r\"^order/process-payment/(?P<pk>.+?)/(?P<key>.+?)/$\",\n        csrf_exempt(ProcessPaymentView.as_view()),\n        kwargs={\"mode\": \"return\"},\n        name=\"order_process_payment_return\",\n    ),\n    url(\n        r\"^order/payment-canceled/(?P<pk>.+?)/(?P<key>.+?)/$\",\n        ProcessPaymentView.as_view(),\n        kwargs={\"mode\": \"cancel\"},\n        name=\"order_payment_canceled\",\n    ),\n    url(r\"^order/complete/(?P<pk>.+?)/(?P<key>.+?)/$\", csrf_exempt(OrderCompleteView.as_view()), name=\"order_complete\"),\n    url(r\"^order/verification/(?P<pk>.+?)/(?P<key>.+?)/$\", _not_here_yet, name=\"order_requires_verification\"),\n    url(\n        r\"^order/get-attachment/(?P<order_pk>\\d+)/(?P<key>.+?)/(?P<att_pk>\\d+)/\",\n        _not_here_yet,\n        name=\"secure_attachment\",\n    ),\n    url(r\"^p/(?P<pk>\\d+)-(?P<slug>.*)/$\", csrf_exempt(ProductDetailView.as_view()), name=\"product\"),\n    url(\n        r\"^s/(?P<supplier_pk>\\d+)-(?P<pk>\\d+)-(?P<slug>.*)/$\",\n        csrf_exempt(ProductDetailView.as_view()),\n        name=\"supplier-product\",\n    ),\n    url(r\"^c/$\", csrf_exempt(AllCategoriesView.as_view()), name=\"all-categories\"),\n    url(r\"^c/(?P<pk>\\d+)-(?P<slug>.*)/$\", csrf_exempt(CategoryView.as_view()), name=\"category\"),\n]\n\n# TODO: Document `front_urls_pre`, `front_urls` and `front_urls_post`.\n\n\ndef _get_extension_urlpatterns(provide_category):\n    return chain(*get_provide_objects(provide_category))\n\n\napp_name = \"shuup\"\nurlpatterns = list(\n    chain(\n        *(\n            _get_extension_urlpatterns(\"front_urls_pre\"),\n            urlpatterns,\n            _get_extension_urlpatterns(\"front_urls\"),\n            [url(r\"^$\", IndexView.as_view(), name=\"index\")],\n            _get_extension_urlpatterns(\"front_urls_post\"),\n        )\n    )\n)\n", "from django.core.exceptions import ValidationError\nfrom django.utils.html import escape\n\nfrom shuup.utils.django_compat import force_text\n\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\n\n\nclass Problem(Exception):\n    \"\"\" User-visible exception. \"\"\"\n\n    message = property(lambda self: self.args[0] if self.args else None)\n\n    def __init__(self, message, title=None):\n        super(Problem, self).__init__(message)\n        self.title = title\n        self.links = []\n\n    def with_link(self, url, title):\n        \"\"\"\n        Append a link to this Problem and return itself.\n\n        This API is designed after `Exception.with_traceback()`,\n        so you can fluently chain this in a `raise` statement::\n\n            raise Problem(\"Oops\").with_link(\"...\", \"...\")\n\n        :param url: URL string.\n        :type url: str\n        :param title: Title text.\n        :type title: str\n        :return: This same Problem.\n        :rtype: shuup.utils.excs.Problem\n        \"\"\"\n        self.links.append({\"url\": url, \"title\": title})\n        return self\n\n\nclass ExceptionalResponse(Exception):\n    def __init__(self, response):\n        self.response = response\n        super(ExceptionalResponse, self).__init__(force_text(response))\n\n\ndef extract_messages(obj_list):\n    \"\"\"\n    Extract \"messages\" from a list of exceptions or other objects.\n\n    For ValidationErrors, `messages` are flattened into the output.\n    For Exceptions, `args[0]` is added into the output.\n    For other objects, `force_text` is called.\n\n    :param obj_list: List of exceptions etc.\n    :type obj_list: Iterable[object]\n    :rtype: Iterable[str]\n    \"\"\"\n    for obj in obj_list:\n        if isinstance(obj, ValidationError):\n            for msg in obj.messages:\n                yield escape(force_text(msg))\n            continue\n        if isinstance(obj, Exception):\n            if len(obj.args):\n                yield escape(force_text(obj.args[0]))\n                continue\n        yield escape(force_text(obj))\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom django.conf.urls import url\n\nfrom shuup.xtheme.views.command import command_dispatch\nfrom shuup.xtheme.views.editor import EditorView\nfrom shuup.xtheme.views.extra import extra_view_dispatch\nfrom shuup.xtheme.views.plugins import (\n    get_category_products_highlight,\n    get_product_cross_sell_highlight,\n    get_product_highlight,\n    get_prouduct_selections_highlight,\n)\n\nurlpatterns = [\n    url(r\"^xtheme/editor/$\", EditorView.as_view(), name=\"xtheme_editor\"),\n    url(r\"^xtheme/(?P<view>.+)/?$\", extra_view_dispatch, name=\"xtheme_extra_view\"),\n    url(r\"^xtheme/$\", command_dispatch, name=\"xtheme\"),\n    url(\n        r\"^xtheme-prod-hl/(?P<plugin_type>.*)/(?P<cutoff_days>\\d+)/(?P<count>\\d+)/(?P<cache_timeout>\\d+)/$\",\n        get_product_highlight,\n        name=\"xtheme-product-highlight\",\n    ),\n    url(\n        r\"\"\"\n            ^xtheme-prod-cross-sell-hl/\n            (?P<product_id>.*)/(?P<relation_type>.*)/(?P<use_parents>\\d+)/\n            (?P<count>\\d+)/(?P<cache_timeout>\\d+)/$\n        \"\"\".strip(),\n        get_product_cross_sell_highlight,\n        name=\"xtheme-product-cross-sells-highlight\",\n    ),\n    url(\n        r\"^xtheme-cat-products-hl/(?P<category_id>\\d+)/(?P<count>\\d+)/(?P<cache_timeout>\\d+)/$\",\n        get_category_products_highlight,\n        name=\"xtheme-category-products-highlight\",\n    ),\n    url(\n        r\"^xtheme-prod-selections-hl/(?P<product_ids>.*)/(?P<cache_timeout>\\d+)/$\",\n        get_prouduct_selections_highlight,\n        name=\"xtheme-product-selections-highlight\",\n    ),\n]\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom django.http.response import HttpResponseRedirect\nfrom django.utils.html import escape\n\nfrom shuup.utils.excs import Problem\nfrom shuup.xtheme.editing import set_edit_mode\n\n\ndef handle_command(request, command):\n    \"\"\"\n    Internal dispatch function.\n\n    :param request: A request\n    :type request: django.http.HttpRequest\n    :param command: Command string\n    :type command: str\n    :return: A response\n    :rtype: django.http.HttpResponse\n    \"\"\"\n    path = request.POST.get(\"path\") or request.META.get(\"HTTP_REFERER\") or \"/\"\n    if command == \"edit_on\" or command == \"edit_off\":\n        set_edit_mode(request, command.endswith(\"_on\"))\n        return HttpResponseRedirect(path)\n\n\ndef command_dispatch(request):\n    \"\"\"\n    Xtheme command dispatch view.\n\n    :param request: A request\n    :type request: django.http.HttpRequest\n    :return: A response\n    :rtype: django.http.HttpResponse\n    \"\"\"\n    command = request.POST.get(\"command\")\n    if command:\n        response = handle_command(request, command)\n        if response:\n            return response\n    raise Problem(\"Error! Unknown command: `%r`\" % escape(command))\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nimport json\nfrom django.http.response import HttpResponse, HttpResponseRedirect\nfrom django.middleware.csrf import get_token\nfrom django.utils.html import escape\nfrom django.utils.http import urlencode\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.views.generic import TemplateView\n\nfrom shuup.utils.excs import Problem\nfrom shuup.xtheme import XTHEME_GLOBAL_VIEW_NAME\nfrom shuup.xtheme._theme import get_theme_by_identifier\nfrom shuup.xtheme.editing import could_edit\nfrom shuup.xtheme.layout import Layout\nfrom shuup.xtheme.layout.utils import get_provided_layouts\nfrom shuup.xtheme.view_config import ViewConfig\nfrom shuup.xtheme.views.forms import LayoutCellFormGroup\n\n# since layouts will most likely break with multiple cells per row, we are\n# limiting the amount.\nROW_CELL_LIMIT = 4\n\n\nclass EditorView(TemplateView):\n    template_name = \"shuup/xtheme/editor.jinja\"\n    xtheme_injection = False  # We don't need the editing injection here, so opt-out\n    changed = False  # Overridden in `save_layout`\n\n    def _get_default_layout(self):\n        try:\n            return json.loads(self.request.GET[\"default_config\"])\n        except (ValueError, KeyError):\n            return None\n\n    def get_context_data(self, **kwargs):  # doccov: ignore\n        ctx = super(EditorView, self).get_context_data(**kwargs)\n        ctx[\"layout\"] = self.layout\n        ctx[\"csrf_token_str\"] = get_token(self.request)\n        # ctx[\"layout_debug\"] = pformat(ctx[\"layout\"].serialize())\n        ctx[\"current_cell_coords\"] = self.current_cell_coords\n        ctx[\"current_cell\"] = self.current_cell\n        ctx[\"form\"] = self.form\n        ctx[\"changed\"] = self.changed\n        ctx[\"cell_limit\"] = ROW_CELL_LIMIT\n        return ctx\n\n    def dispatch(self, request, *args, **kwargs):  # doccov: ignore\n        if not could_edit(request):\n            raise Problem(_(\"No access to editing.\"))\n        self._populate_vars()\n        if self.default_layout:\n            self.view_config.save_default_placeholder_layout(self.placeholder_name, self.default_layout)\n            # We saved the default layout, so get rid of the humongous GET arg and try again\n            get_args = dict(self.request.GET.items())\n            get_args.pop(\"default_config\", None)\n            global_type = get_args.pop(\"global_type\", None)\n            if global_type:\n                get_args[\"view\"] = XTHEME_GLOBAL_VIEW_NAME\n            # We are overriding the view with XTHEME_GLOBAL_VIEW_NAME if this is a global placeholder\n            return HttpResponseRedirect(\"%s?%s\" % (self.request.path, urlencode(get_args)))\n        return super(EditorView, self).dispatch(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):  # doccov: ignore\n        command = request.POST.get(\"command\")\n        if command:\n            dispatcher = getattr(self, \"dispatch_%s\" % command, None)\n            if not callable(dispatcher):\n                raise Problem(_(\"Unknown command: `%s`.\") % escape(command))\n            dispatch_kwargs = dict(request.POST.items())\n            rv = dispatcher(**dispatch_kwargs)\n            if rv:\n                return rv\n            self.request.method = \"GET\"  # At this point, we won't want to cause form validation\n            self.build_form()  # and it's not a bad idea to rebuild the form\n            return super(EditorView, self).get(request, *args, **kwargs)\n\n        if request.POST.get(\"save\") and self.form and self.form.is_valid():\n            self.form.save()\n            self.save_layout()\n\n            # after we save the new layout configs, make sure to reload the saved data in forms\n            # so the returned get() response contains updated data\n            self.build_form()\n\n            if request.POST.get(\"publish\") == \"1\":\n                return self.dispatch_publish()\n\n        return self.get(request, *args, **kwargs)\n\n    def _populate_vars(self):\n        theme = get_theme_by_identifier(self.request.GET[\"theme\"], self.request.shop)\n        if not theme:\n            raise Problem(_(\"Unable to determine the current theme.\"))\n        view_name = self.request.GET[\"view\"]\n        global_type = self.request.GET.get(\"global_type\", None)\n        self.view_config = ViewConfig(\n            theme=theme,\n            shop=self.request.shop,\n            view_name=view_name,\n            draft=True,\n            global_type=global_type,\n        )\n\n        # Let's store the layout data key for save here\n        self.layout_data_key = self.request.GET.get(\"layout_data_key\", None)\n\n        # Let's use the layout identifier passed by the view to\n        # fetch correct layout\n        layout_identifier = self.request.GET.get(\"layout_identifier\", None)\n        layout_cls = Layout\n        for provided_layout in get_provided_layouts():\n            if provided_layout.identifier == layout_identifier:\n                layout_cls = provided_layout\n\n        self.placeholder_name = self.request.GET[\"ph\"]\n        self.default_layout = self._get_default_layout()\n        self.layout = self.view_config.get_placeholder_layout(\n            layout_cls=layout_cls,\n            placeholder_name=self.placeholder_name,\n            default_layout=self.default_layout,\n            layout_data_key=self.layout_data_key,\n        )\n        (x, y) = self.current_cell_coords = (\n            int(self.request.GET.get(\"x\", -1)),\n            int(self.request.GET.get(\"y\", -1)),\n        )\n        self.current_cell = self.layout.get_cell(x=x, y=y)\n        self.build_form()\n\n    def build_form(self):\n        if not self.current_cell:\n            self.form = None\n            return\n        kwargs = {\"layout_cell\": self.current_cell, \"theme\": self.view_config.theme, \"request\": self.request}\n        if self.request.method == \"POST\":\n            kwargs[\"data\"] = self.request.POST\n            kwargs[\"files\"] = self.request.FILES\n        self.form = LayoutCellFormGroup(**kwargs)\n\n    def save_layout(self, layout=None):\n        self.view_config.save_placeholder_layout(layout_data_key=self.layout_data_key, layout=(layout or self.layout))\n        self.changed = True\n\n    def dispatch_add_cell(self, y, **kwargs):\n        y = int(y)\n        if len(self.layout.rows[y].cells) >= ROW_CELL_LIMIT:\n            raise ValueError(_(\"Can't add more than %d cells in one row.\") % ROW_CELL_LIMIT)\n\n        if not (0 <= y < len(self.layout.rows)):\n            # No need to raise an exception, really.\n            # It must have been a honest mistake.\n            return\n        self.layout.rows[y].add_cell()\n        self.save_layout()\n\n    def dispatch_add_row(self, y=None, **kwargs):\n        row = self.layout.insert_row(y)\n        row.add_cell()  # For convenience, add a cell to the row.\n        self.save_layout()\n\n    def dispatch_del_row(self, y, **kwargs):\n        self.layout.delete_row(y)\n        self.save_layout()\n\n    def dispatch_move_row_to_index(self, from_y, to_y, **kwargs):\n        self.layout.move_row_to_index(from_y, to_y)\n        self.save_layout()\n\n    def dispatch_move_cell_to_position(self, from_x, from_y, to_x, to_y, **kwargs):\n        self.layout.move_cell_to_position(from_x, from_y, to_x, to_y)\n        self.save_layout()\n\n    def dispatch_del_cell(self, x, y, **kwargs):\n        self.layout.delete_cell(x, y)\n        self.save_layout()\n\n    def dispatch_change_plugin(self, plugin=\"\", **kwargs):\n        if self.current_cell:\n            if not plugin:\n                plugin = None\n            self.current_cell.plugin_identifier = plugin\n            self.save_layout()\n\n    def dispatch_publish(self, **kwargs):\n        self.view_config.publish()\n        return HttpResponse(\"<html><script>parent.location.reload()</script>%s.</html>\" % _(\"Published\"))\n\n    def dispatch_revert(self, **kwargs):\n        self.view_config.revert()\n        return HttpResponse(\"<html><script>parent.location.reload()</script>%s.</html>\" % _(\"Reverted\"))\n", "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2021, Shuup Commerce Inc. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.core.signals import setting_changed\nfrom django.http.response import HttpResponseNotFound\nfrom django.utils.html import escape\n\nfrom shuup.xtheme._theme import get_current_theme\n\n_VIEW_CACHE = {}\n\n\ndef clear_view_cache(**kwargs):\n    _VIEW_CACHE.clear()\n\n\nsetting_changed.connect(clear_view_cache, dispatch_uid=\"shuup.xtheme.views.extra.clear_view_cache\")\n\n\ndef _get_view_by_name(theme, view_name):\n    view = theme.get_view(view_name)\n    if hasattr(view, \"as_view\"):  # Handle CBVs\n        view = view.as_view()\n    if view and not callable(view):\n        raise ImproperlyConfigured(\"Error! View `%r` is not callable.\" % view)\n    return view\n\n\ndef get_view_by_name(theme, view_name):\n    if not theme:\n        return None\n    cache_key = (theme.identifier, view_name)\n    if cache_key not in _VIEW_CACHE:\n        view = _get_view_by_name(theme, view_name)\n        _VIEW_CACHE[cache_key] = view\n    else:\n        view = _VIEW_CACHE[cache_key]\n    return view\n\n\ndef extra_view_dispatch(request, view):\n    \"\"\"\n    Dispatch to an Xtheme extra view.\n\n    :param request: A request.\n    :type request: django.http.HttpRequest\n    :param view: View name.\n    :type view: str\n    :return: A response of some kind.\n    :rtype: django.http.HttpResponse\n    \"\"\"\n    theme = getattr(request, \"theme\", None) or get_current_theme(request.shop)\n    view_func = get_view_by_name(theme, view)\n    if not view_func:\n        msg = \"Error! %s/%s: Not found.\" % (getattr(theme, \"identifier\", None), escape(view))\n        return HttpResponseNotFound(msg)\n    return view_func(request)\n"], "filenames": ["CHANGELOG.md", "shuup/admin/utils/urls.py", "shuup/core/basket/command_dispatcher.py", "shuup/front/checkout/_process.py", "shuup/front/urls.py", "shuup/utils/excs.py", "shuup/xtheme/urls.py", "shuup/xtheme/views/command.py", "shuup/xtheme/views/editor.py", "shuup/xtheme/views/extra.py"], "buggy_code_start_loc": [9, 18, 13, 11, 12, 1, 22, 8, 10, 10], "buggy_code_end_loc": [9, 68, 72, 79, 41, 71, 23, 46, 74, 60], "fixing_code_start_loc": [10, 19, 14, 12, 13, 2, 22, 9, 11, 11], "fixing_code_end_loc": [19, 69, 73, 80, 42, 72, 23, 47, 75, 61], "type": "CWE-79", "message": "In Shuup, versions 1.6.0 through 2.10.8 are vulnerable to reflected Cross-Site Scripting (XSS) that allows execution of arbitrary javascript code on a victim browser. This vulnerability exists due to the error page contents not escaped.", "other": {"cve": {"id": "CVE-2021-25963", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-09-30T08:15:06.357", "lastModified": "2021-10-07T03:02:46.987", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Shuup, versions 1.6.0 through 2.10.8 are vulnerable to reflected Cross-Site Scripting (XSS) that allows execution of arbitrary javascript code on a victim browser. This vulnerability exists due to the error page contents not escaped."}, {"lang": "es", "value": "En Shuup, versiones 1.6.0 hasta 2.10.8, son vulnerables a una ataque de tipo Cross-Site Scripting (XSS) reflejado que permite una ejecuci\u00f3n de c\u00f3digo javascript arbitrario en un navegador v\u00edctima. Esta vulnerabilidad se presenta debido a que el contenido de la p\u00e1gina de error no se escapa"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shuup:shuup:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.6.0", "versionEndIncluding": "2.10.8", "matchCriteriaId": "9D5824DD-A1E4-405E-8137-A84852041A3D"}]}]}], "references": [{"url": "https://github.com/shuup/shuup/commit/75714c37e32796eb7cbb0d977af5bcaa26573588", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25963", "source": "vulnerabilitylab@mend.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shuup/shuup/commit/75714c37e32796eb7cbb0d977af5bcaa26573588"}}