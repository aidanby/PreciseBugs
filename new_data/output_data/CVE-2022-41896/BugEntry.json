{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <math.h>\n\n#include \"tensorflow/core/kernels/mfcc.h\"\n\n#include \"tensorflow/core/platform/logging.h\"\n\nnamespace tensorflow {\n\nconst double kDefaultUpperFrequencyLimit = 4000;\nconst double kDefaultLowerFrequencyLimit = 20;\nconst double kFilterbankFloor = 1e-12;\nconst int kDefaultFilterbankChannelCount = 40;\nconst int kDefaultDCTCoefficientCount = 13;\n\nMfcc::Mfcc()\n    : initialized_(false),\n      lower_frequency_limit_(kDefaultLowerFrequencyLimit),\n      upper_frequency_limit_(kDefaultUpperFrequencyLimit),\n      filterbank_channel_count_(kDefaultFilterbankChannelCount),\n      dct_coefficient_count_(kDefaultDCTCoefficientCount) {}\n\nbool Mfcc::Initialize(int input_length, double input_sample_rate) {\n  bool initialized = mel_filterbank_.Initialize(\n      input_length, input_sample_rate, filterbank_channel_count_,\n      lower_frequency_limit_, upper_frequency_limit_);\n  initialized &=\n      dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);\n  initialized_ = initialized;\n  return initialized;\n}\n\nvoid Mfcc::Compute(const std::vector<double>& spectrogram_frame,\n                   std::vector<double>* output) const {\n  if (!initialized_) {\n    LOG(ERROR) << \"Mfcc not initialized.\";\n    return;\n  }\n  std::vector<double> working;\n  mel_filterbank_.Compute(spectrogram_frame, &working);\n  for (int i = 0; i < working.size(); ++i) {\n    double val = working[i];\n    if (val < kFilterbankFloor) {\n      val = kFilterbankFloor;\n    }\n    working[i] = log(val);\n  }\n  dct_.Compute(working, output);\n}\n\n}  // namespace tensorflow\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// This code resamples the FFT bins, and smooths then with triangle-shaped\n// weights to create a mel-frequency filter bank. For filter i centered at f_i,\n// there is a triangular weighting of the FFT bins that extends from\n// filter f_i-1 (with a value of zero at the left edge of the triangle) to f_i\n// (where the filter value is 1) to f_i+1 (where the filter values returns to\n// zero).\n\n// Note: this code fails if you ask for too many channels.  The algorithm used\n// here assumes that each FFT bin contributes to at most two channels: the\n// right side of a triangle for channel i, and the left side of the triangle\n// for channel i+1.  If you ask for so many channels that some of the\n// resulting mel triangle filters are smaller than a single FFT bin, these\n// channels may end up with no contributing FFT bins.  The resulting mel\n// spectrum output will have some channels that are always zero.\n\n#include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"\n\n#include <math.h>\n\n#include \"tensorflow/core/platform/logging.h\"\n\nnamespace tensorflow {\n\nMfccMelFilterbank::MfccMelFilterbank() : initialized_(false) {}\n\nbool MfccMelFilterbank::Initialize(int input_length, double input_sample_rate,\n                                   int output_channel_count,\n                                   double lower_frequency_limit,\n                                   double upper_frequency_limit) {\n  num_channels_ = output_channel_count;\n  sample_rate_ = input_sample_rate;\n  input_length_ = input_length;\n\n  if (num_channels_ < 1) {\n    LOG(ERROR) << \"Number of filterbank channels must be positive.\";\n    return false;\n  }\n\n  if (sample_rate_ <= 0) {\n    LOG(ERROR) << \"Sample rate must be positive.\";\n    return false;\n  }\n\n  if (input_length < 2) {\n    LOG(ERROR) << \"Input length must greater than 1.\";\n    return false;\n  }\n\n  if (lower_frequency_limit < 0) {\n    LOG(ERROR) << \"Lower frequency limit must be nonnegative.\";\n    return false;\n  }\n\n  if (upper_frequency_limit <= lower_frequency_limit) {\n    LOG(ERROR) << \"Upper frequency limit must be greater than \"\n               << \"lower frequency limit.\";\n    return false;\n  }\n\n  // An extra center frequency is computed at the top to get the upper\n  // limit on the high side of the final triangular filter.\n  center_frequencies_.resize(num_channels_ + 1);\n  const double mel_low = FreqToMel(lower_frequency_limit);\n  const double mel_hi = FreqToMel(upper_frequency_limit);\n  const double mel_span = mel_hi - mel_low;\n  const double mel_spacing = mel_span / static_cast<double>(num_channels_ + 1);\n  for (int i = 0; i < num_channels_ + 1; ++i) {\n    center_frequencies_[i] = mel_low + (mel_spacing * (i + 1));\n  }\n\n  // Always exclude DC; emulate HTK.\n  const double hz_per_sbin =\n      0.5 * sample_rate_ / static_cast<double>(input_length_ - 1);\n  start_index_ = static_cast<int>(1.5 + (lower_frequency_limit / hz_per_sbin));\n  end_index_ = static_cast<int>(upper_frequency_limit / hz_per_sbin);\n\n  // Maps the input spectrum bin indices to filter bank channels/indices. For\n  // each FFT bin, band_mapper tells us which channel this bin contributes to\n  // on the right side of the triangle.  Thus this bin also contributes to the\n  // left side of the next channel's triangle response.\n  band_mapper_.resize(input_length_);\n  int channel = 0;\n  for (int i = 0; i < input_length_; ++i) {\n    double melf = FreqToMel(i * hz_per_sbin);\n    if ((i < start_index_) || (i > end_index_)) {\n      band_mapper_[i] = -2;  // Indicate an unused Fourier coefficient.\n    } else {\n      while ((channel < num_channels_) &&\n             (center_frequencies_[channel] < melf)) {\n        ++channel;\n      }\n      band_mapper_[i] = channel - 1;  // Can be == -1\n    }\n  }\n\n  // Create the weighting functions to taper the band edges.  The contribution\n  // of any one FFT bin is based on its distance along the continuum between two\n  // mel-channel center frequencies.  This bin contributes weights_[i] to the\n  // current channel and 1-weights_[i] to the next channel.\n  weights_.resize(input_length_);\n  for (int i = 0; i < input_length_; ++i) {\n    channel = band_mapper_[i];\n    if ((i < start_index_) || (i > end_index_)) {\n      weights_[i] = 0.0;\n    } else {\n      if (channel >= 0) {\n        weights_[i] =\n            (center_frequencies_[channel + 1] - FreqToMel(i * hz_per_sbin)) /\n            (center_frequencies_[channel + 1] - center_frequencies_[channel]);\n      } else {\n        weights_[i] = (center_frequencies_[0] - FreqToMel(i * hz_per_sbin)) /\n                      (center_frequencies_[0] - mel_low);\n      }\n    }\n  }\n  // Check the sum of FFT bin weights for every mel band to identify\n  // situations where the mel bands are so narrow that they don't get\n  // significant weight on enough (or any) FFT bins -- i.e., too many\n  // mel bands have been requested for the given FFT size.\n  std::vector<int> bad_channels;\n  for (int c = 0; c < num_channels_; ++c) {\n    float band_weights_sum = 0.0;\n    for (int i = 0; i < input_length_; ++i) {\n      if (band_mapper_[i] == c - 1) {\n        band_weights_sum += (1.0 - weights_[i]);\n      } else if (band_mapper_[i] == c) {\n        band_weights_sum += weights_[i];\n      }\n    }\n    // The lowest mel channels have the fewest FFT bins and the lowest\n    // weights sum.  But given that the target gain at the center frequency\n    // is 1.0, if the total sum of weights is 0.5, we're in bad shape.\n    if (band_weights_sum < 0.5) {\n      bad_channels.push_back(c);\n    }\n  }\n  if (!bad_channels.empty()) {\n    LOG(ERROR) << \"Missing \" << bad_channels.size() << \" bands \"\n               << \" starting at \" << bad_channels[0]\n               << \" in mel-frequency design. \"\n               << \"Perhaps too many channels or \"\n               << \"not enough frequency resolution in spectrum. (\"\n               << \"input_length: \" << input_length\n               << \" input_sample_rate: \" << input_sample_rate\n               << \" output_channel_count: \" << output_channel_count\n               << \" lower_frequency_limit: \" << lower_frequency_limit\n               << \" upper_frequency_limit: \" << upper_frequency_limit;\n  }\n  initialized_ = true;\n  return true;\n}\n\n// Compute the mel spectrum from the squared-magnitude FFT input by taking the\n// square root, then summing FFT magnitudes under triangular integration windows\n// whose widths increase with frequency.\nvoid MfccMelFilterbank::Compute(const std::vector<double> &input,\n                                std::vector<double> *output) const {\n  if (!initialized_) {\n    LOG(ERROR) << \"Mel Filterbank not initialized.\";\n    return;\n  }\n\n  if (input.size() <= end_index_) {\n    LOG(ERROR) << \"Input too short to compute filterbank\";\n    return;\n  }\n\n  // Ensure output is right length and reset all values.\n  output->assign(num_channels_, 0.0);\n\n  for (int i = start_index_; i <= end_index_; i++) {  // For each FFT bin\n    double spec_val = sqrt(input[i]);\n    double weighted = spec_val * weights_[i];\n    int channel = band_mapper_[i];\n    if (channel >= 0)\n      (*output)[channel] += weighted;  // Right side of triangle, downward slope\n    channel++;\n    if (channel < num_channels_)\n      (*output)[channel] += spec_val - weighted;  // Left side of triangle\n  }\n}\n\ndouble MfccMelFilterbank::FreqToMel(double freq) const {\n  return 1127.0 * log1p(freq / 700.0);\n}\n\n}  // namespace tensorflow\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"\n\n#include <vector>\n\n#include \"tensorflow/core/platform/test.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\nTEST(MfccMelFilterbankTest, AgreesWithPythonGoldenValues) {\n  // This test verifies the Mel filterbank against \"golden values\".\n  // Golden values are from an independent Python Mel implementation.\n  MfccMelFilterbank filterbank;\n\n  std::vector<double> input;\n  const int kSampleCount = 513;\n  input.reserve(kSampleCount);\n  for (int i = 0; i < kSampleCount; ++i) {\n    input.push_back(i + 1);\n  }\n  const int kChannelCount = 20;\n  filterbank.Initialize(\n      input.size(), 22050 /* sample rate */, kChannelCount /* channels */,\n      20.0 /*  lower frequency limit */, 4000.0 /* upper frequency limit */);\n\n  std::vector<double> output;\n  filterbank.Compute(input, &output);\n\n  std::vector<double> expected = {\n      7.38894574,   10.30330648, 13.72703292,  17.24158686,  21.35253118,\n      25.77781089,  31.30624108, 37.05877236,  43.9436536,   51.80306637,\n      60.79867148,  71.14363376, 82.90910141,  96.50069158,  112.08428368,\n      129.96721968, 150.4277597, 173.74997634, 200.86037462, 231.59802942};\n\n  ASSERT_EQ(output.size(), kChannelCount);\n\n  for (int i = 0; i < kChannelCount; ++i) {\n    EXPECT_NEAR(output[i], expected[i], 1e-04);\n  }\n}\n\nTEST(MfccMelFilterbankTest, IgnoresExistingContentOfOutputVector) {\n  // Test for bug where the output vector was not cleared before\n  // accumulating next frame's weighted spectral values.\n  MfccMelFilterbank filterbank;\n\n  const int kSampleCount = 513;\n  std::vector<double> input;\n  std::vector<double> output;\n\n  filterbank.Initialize(kSampleCount, 22050 /* sample rate */,\n                        20 /* channels */, 20.0 /*  lower frequency limit */,\n                        4000.0 /* upper frequency limit */);\n\n  // First call with nonzero input value, and an empty output vector,\n  // will resize the output and fill it with the correct, nonzero outputs.\n  input.assign(kSampleCount, 1.0);\n  filterbank.Compute(input, &output);\n  for (const double value : output) {\n    EXPECT_LE(0.0, value);\n  }\n\n  // Second call with zero input should also generate zero output.  However,\n  // the output vector now is already the correct size, but full of nonzero\n  // values.  Make sure these don't affect the output.\n  input.assign(kSampleCount, 0.0);\n  filterbank.Compute(input, &output);\n  for (const double value : output) {\n    EXPECT_EQ(0.0, value);\n  }\n}\n\n}  // namespace tensorflow\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/audio_ops.cc\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/kernels/mfcc.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n\nnamespace tensorflow {\n\n// Create a speech fingerpring from spectrogram data.\nclass MfccOp : public OpKernel {\n public:\n  explicit MfccOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"upper_frequency_limit\",\n                                             &upper_frequency_limit_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"lower_frequency_limit\",\n                                             &lower_frequency_limit_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"filterbank_channel_count\",\n                                             &filterbank_channel_count_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"dct_coefficient_count\",\n                                             &dct_coefficient_count_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& spectrogram = context->input(0);\n    OP_REQUIRES(context, spectrogram.dims() == 3,\n                errors::InvalidArgument(\"spectrogram must be 3-dimensional\",\n                                        spectrogram.shape().DebugString()));\n    const Tensor& sample_rate_tensor = context->input(1);\n    OP_REQUIRES(context, TensorShapeUtils::IsScalar(sample_rate_tensor.shape()),\n                errors::InvalidArgument(\n                    \"Input sample_rate should be a scalar tensor, got \",\n                    sample_rate_tensor.shape().DebugString(), \" instead.\"));\n    const int32_t sample_rate = sample_rate_tensor.scalar<int32>()();\n\n    const int spectrogram_channels = spectrogram.dim_size(2);\n    const int spectrogram_samples = spectrogram.dim_size(1);\n    const int audio_channels = spectrogram.dim_size(0);\n\n    Mfcc mfcc;\n    mfcc.set_upper_frequency_limit(upper_frequency_limit_);\n    mfcc.set_lower_frequency_limit(lower_frequency_limit_);\n    mfcc.set_filterbank_channel_count(filterbank_channel_count_);\n    mfcc.set_dct_coefficient_count(dct_coefficient_count_);\n    OP_REQUIRES(context, mfcc.Initialize(spectrogram_channels, sample_rate),\n                errors::InvalidArgument(\n                    \"Mfcc initialization failed for channel count \",\n                    spectrogram_channels, \" and sample rate \", sample_rate));\n\n    Tensor* output_tensor = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(\n                       0,\n                       TensorShape({audio_channels, spectrogram_samples,\n                                    dct_coefficient_count_}),\n                       &output_tensor));\n\n    const float* spectrogram_flat = spectrogram.flat<float>().data();\n    float* output_flat = output_tensor->flat<float>().data();\n\n    for (int audio_channel = 0; audio_channel < audio_channels;\n         ++audio_channel) {\n      for (int spectrogram_sample = 0; spectrogram_sample < spectrogram_samples;\n           ++spectrogram_sample) {\n        const float* sample_data =\n            spectrogram_flat +\n            (audio_channel * spectrogram_samples * spectrogram_channels) +\n            (spectrogram_sample * spectrogram_channels);\n        std::vector<double> mfcc_input(sample_data,\n                                       sample_data + spectrogram_channels);\n        std::vector<double> mfcc_output;\n        mfcc.Compute(mfcc_input, &mfcc_output);\n        DCHECK_EQ(dct_coefficient_count_, mfcc_output.size());\n        float* output_data =\n            output_flat +\n            (audio_channel * spectrogram_samples * dct_coefficient_count_) +\n            (spectrogram_sample * dct_coefficient_count_);\n        for (int i = 0; i < dct_coefficient_count_; ++i) {\n          output_data[i] = mfcc_output[i];\n        }\n      }\n    }\n  }\n\n private:\n  float upper_frequency_limit_;\n  float lower_frequency_limit_;\n  int32 filterbank_channel_count_;\n  int32 dct_coefficient_count_;\n};\nREGISTER_KERNEL_BUILDER(Name(\"Mfcc\").Device(DEVICE_CPU), MfccOp);\n\n}  // namespace tensorflow\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <math.h>\n\n#include \"tensorflow/core/kernels/mfcc.h\"\n\n#include \"tensorflow/core/platform/logging.h\"\n\nnamespace tensorflow {\n\nconst double kDefaultUpperFrequencyLimit = 4000;\nconst double kDefaultLowerFrequencyLimit = 20;\nconst double kFilterbankFloor = 1e-12;\nconst int kDefaultFilterbankChannelCount = 40;\nconst int kDefaultDCTCoefficientCount = 13;\n\nMfcc::Mfcc()\n    : initialized_(false),\n      lower_frequency_limit_(kDefaultLowerFrequencyLimit),\n      upper_frequency_limit_(kDefaultUpperFrequencyLimit),\n      filterbank_channel_count_(kDefaultFilterbankChannelCount),\n      dct_coefficient_count_(kDefaultDCTCoefficientCount) {}\n\nbool Mfcc::Initialize(int input_length, double input_sample_rate) {\n  bool initialized = mel_filterbank_.Initialize(\n      input_length, input_sample_rate, filterbank_channel_count_,\n      lower_frequency_limit_, upper_frequency_limit_);\n  if (initialized) {\n    initialized =\n        dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);\n  }\n  initialized_ = initialized;\n  return initialized;\n}\n\nvoid Mfcc::Compute(const std::vector<double>& spectrogram_frame,\n                   std::vector<double>* output) const {\n  if (!initialized_) {\n    LOG(ERROR) << \"Mfcc not initialized.\";\n    return;\n  }\n  std::vector<double> working;\n  mel_filterbank_.Compute(spectrogram_frame, &working);\n  for (int i = 0; i < working.size(); ++i) {\n    double val = working[i];\n    if (val < kFilterbankFloor) {\n      val = kFilterbankFloor;\n    }\n    working[i] = log(val);\n  }\n  dct_.Compute(working, output);\n}\n\n}  // namespace tensorflow\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// This code resamples the FFT bins, and smooths then with triangle-shaped\n// weights to create a mel-frequency filter bank. For filter i centered at f_i,\n// there is a triangular weighting of the FFT bins that extends from\n// filter f_i-1 (with a value of zero at the left edge of the triangle) to f_i\n// (where the filter value is 1) to f_i+1 (where the filter values returns to\n// zero).\n\n// Note: this code fails if you ask for too many channels.  The algorithm used\n// here assumes that each FFT bin contributes to at most two channels: the\n// right side of a triangle for channel i, and the left side of the triangle\n// for channel i+1.  If you ask for so many channels that some of the\n// resulting mel triangle filters are smaller than a single FFT bin, these\n// channels may end up with no contributing FFT bins.  The resulting mel\n// spectrum output will have some channels that are always zero.\n\n#include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"\n\n#include <math.h>\n\n#include <limits>\n\n#include \"tensorflow/core/platform/logging.h\"\n\nnamespace tensorflow {\n\nMfccMelFilterbank::MfccMelFilterbank() : initialized_(false) {}\n\nbool MfccMelFilterbank::Initialize(int input_length, double input_sample_rate,\n                                   int output_channel_count,\n                                   double lower_frequency_limit,\n                                   double upper_frequency_limit) {\n  num_channels_ = output_channel_count;\n  sample_rate_ = input_sample_rate;\n  input_length_ = input_length;\n\n  if (num_channels_ < 1) {\n    LOG(ERROR) << \"Number of filterbank channels must be positive.\";\n    return false;\n  }\n\n  if (sample_rate_ <= 0) {\n    LOG(ERROR) << \"Sample rate must be positive.\";\n    return false;\n  }\n\n  if (input_length < 2) {\n    LOG(ERROR) << \"Input length must greater than 1.\";\n    return false;\n  }\n\n  if (lower_frequency_limit < 0) {\n    LOG(ERROR) << \"Lower frequency limit must be nonnegative.\";\n    return false;\n  }\n\n  if (upper_frequency_limit <= lower_frequency_limit) {\n    LOG(ERROR) << \"Upper frequency limit must be greater than \"\n               << \"lower frequency limit.\";\n    return false;\n  }\n\n  // An extra center frequency is computed at the top to get the upper\n  // limit on the high side of the final triangular filter.\n  std::size_t center_frequencies_size = std::size_t(num_channels_) + 1;\n  if (center_frequencies_size >= std::numeric_limits<int>::max() ||\n      center_frequencies_size > center_frequencies_.max_size()) {\n    LOG(ERROR) << \"Number of filterbank channels must be less than \"\n               << std::numeric_limits<int>::max()\n               << \" and less than or equal to \"\n               << center_frequencies_.max_size();\n    return false;\n  }\n  center_frequencies_.resize(center_frequencies_size);\n\n  const double mel_low = FreqToMel(lower_frequency_limit);\n  const double mel_hi = FreqToMel(upper_frequency_limit);\n  const double mel_span = mel_hi - mel_low;\n  const double mel_spacing = mel_span / static_cast<double>(num_channels_ + 1);\n  for (int i = 0; i < num_channels_ + 1; ++i) {\n    center_frequencies_[i] = mel_low + (mel_spacing * (i + 1));\n  }\n\n  // Always exclude DC; emulate HTK.\n  const double hz_per_sbin =\n      0.5 * sample_rate_ / static_cast<double>(input_length_ - 1);\n  start_index_ = static_cast<int>(1.5 + (lower_frequency_limit / hz_per_sbin));\n  end_index_ = static_cast<int>(upper_frequency_limit / hz_per_sbin);\n\n  // Maps the input spectrum bin indices to filter bank channels/indices. For\n  // each FFT bin, band_mapper tells us which channel this bin contributes to\n  // on the right side of the triangle.  Thus this bin also contributes to the\n  // left side of the next channel's triangle response.\n  band_mapper_.resize(input_length_);\n  int channel = 0;\n  for (int i = 0; i < input_length_; ++i) {\n    double melf = FreqToMel(i * hz_per_sbin);\n    if ((i < start_index_) || (i > end_index_)) {\n      band_mapper_[i] = -2;  // Indicate an unused Fourier coefficient.\n    } else {\n      while ((channel < num_channels_) &&\n             (center_frequencies_[channel] < melf)) {\n        ++channel;\n      }\n      band_mapper_[i] = channel - 1;  // Can be == -1\n    }\n  }\n\n  // Create the weighting functions to taper the band edges.  The contribution\n  // of any one FFT bin is based on its distance along the continuum between two\n  // mel-channel center frequencies.  This bin contributes weights_[i] to the\n  // current channel and 1-weights_[i] to the next channel.\n  weights_.resize(input_length_);\n  for (int i = 0; i < input_length_; ++i) {\n    channel = band_mapper_[i];\n    if ((i < start_index_) || (i > end_index_)) {\n      weights_[i] = 0.0;\n    } else {\n      if (channel >= 0) {\n        weights_[i] =\n            (center_frequencies_[channel + 1] - FreqToMel(i * hz_per_sbin)) /\n            (center_frequencies_[channel + 1] - center_frequencies_[channel]);\n      } else {\n        weights_[i] = (center_frequencies_[0] - FreqToMel(i * hz_per_sbin)) /\n                      (center_frequencies_[0] - mel_low);\n      }\n    }\n  }\n  // Check the sum of FFT bin weights for every mel band to identify\n  // situations where the mel bands are so narrow that they don't get\n  // significant weight on enough (or any) FFT bins -- i.e., too many\n  // mel bands have been requested for the given FFT size.\n  std::vector<int> bad_channels;\n  for (int c = 0; c < num_channels_; ++c) {\n    float band_weights_sum = 0.0;\n    for (int i = 0; i < input_length_; ++i) {\n      if (band_mapper_[i] == c - 1) {\n        band_weights_sum += (1.0 - weights_[i]);\n      } else if (band_mapper_[i] == c) {\n        band_weights_sum += weights_[i];\n      }\n    }\n    // The lowest mel channels have the fewest FFT bins and the lowest\n    // weights sum.  But given that the target gain at the center frequency\n    // is 1.0, if the total sum of weights is 0.5, we're in bad shape.\n    if (band_weights_sum < 0.5) {\n      bad_channels.push_back(c);\n    }\n  }\n  if (!bad_channels.empty()) {\n    LOG(ERROR) << \"Missing \" << bad_channels.size() << \" bands \"\n               << \" starting at \" << bad_channels[0]\n               << \" in mel-frequency design. \"\n               << \"Perhaps too many channels or \"\n               << \"not enough frequency resolution in spectrum. (\"\n               << \"input_length: \" << input_length\n               << \" input_sample_rate: \" << input_sample_rate\n               << \" output_channel_count: \" << output_channel_count\n               << \" lower_frequency_limit: \" << lower_frequency_limit\n               << \" upper_frequency_limit: \" << upper_frequency_limit;\n  }\n  initialized_ = true;\n  return true;\n}\n\n// Compute the mel spectrum from the squared-magnitude FFT input by taking the\n// square root, then summing FFT magnitudes under triangular integration windows\n// whose widths increase with frequency.\nvoid MfccMelFilterbank::Compute(const std::vector<double> &input,\n                                std::vector<double> *output) const {\n  if (!initialized_) {\n    LOG(ERROR) << \"Mel Filterbank not initialized.\";\n    return;\n  }\n\n  if (input.size() <= end_index_) {\n    LOG(ERROR) << \"Input too short to compute filterbank\";\n    return;\n  }\n\n  // Ensure output is right length and reset all values.\n  output->assign(num_channels_, 0.0);\n\n  for (int i = start_index_; i <= end_index_; i++) {  // For each FFT bin\n    double spec_val = sqrt(input[i]);\n    double weighted = spec_val * weights_[i];\n    int channel = band_mapper_[i];\n    if (channel >= 0)\n      (*output)[channel] += weighted;  // Right side of triangle, downward slope\n    channel++;\n    if (channel < num_channels_)\n      (*output)[channel] += spec_val - weighted;  // Left side of triangle\n  }\n}\n\ndouble MfccMelFilterbank::FreqToMel(double freq) const {\n  return 1127.0 * log1p(freq / 700.0);\n}\n\n}  // namespace tensorflow\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"\n\n#include <limits>\n#include <vector>\n\n#include \"tensorflow/core/platform/test.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\nTEST(MfccMelFilterbankTest, AgreesWithPythonGoldenValues) {\n  // This test verifies the Mel filterbank against \"golden values\".\n  // Golden values are from an independent Python Mel implementation.\n  MfccMelFilterbank filterbank;\n\n  std::vector<double> input;\n  const int kSampleCount = 513;\n  input.reserve(kSampleCount);\n  for (int i = 0; i < kSampleCount; ++i) {\n    input.push_back(i + 1);\n  }\n  const int kChannelCount = 20;\n  filterbank.Initialize(\n      input.size(), 22050 /* sample rate */, kChannelCount /* channels */,\n      20.0 /*  lower frequency limit */, 4000.0 /* upper frequency limit */);\n\n  std::vector<double> output;\n  filterbank.Compute(input, &output);\n\n  std::vector<double> expected = {\n      7.38894574,   10.30330648, 13.72703292,  17.24158686,  21.35253118,\n      25.77781089,  31.30624108, 37.05877236,  43.9436536,   51.80306637,\n      60.79867148,  71.14363376, 82.90910141,  96.50069158,  112.08428368,\n      129.96721968, 150.4277597, 173.74997634, 200.86037462, 231.59802942};\n\n  ASSERT_EQ(output.size(), kChannelCount);\n\n  for (int i = 0; i < kChannelCount; ++i) {\n    EXPECT_NEAR(output[i], expected[i], 1e-04);\n  }\n}\n\nTEST(MfccMelFilterbankTest, IgnoresExistingContentOfOutputVector) {\n  // Test for bug where the output vector was not cleared before\n  // accumulating next frame's weighted spectral values.\n  MfccMelFilterbank filterbank;\n\n  const int kSampleCount = 513;\n  std::vector<double> input;\n  std::vector<double> output;\n\n  filterbank.Initialize(kSampleCount, 22050 /* sample rate */,\n                        20 /* channels */, 20.0 /*  lower frequency limit */,\n                        4000.0 /* upper frequency limit */);\n\n  // First call with nonzero input value, and an empty output vector,\n  // will resize the output and fill it with the correct, nonzero outputs.\n  input.assign(kSampleCount, 1.0);\n  filterbank.Compute(input, &output);\n  for (const double value : output) {\n    EXPECT_LE(0.0, value);\n  }\n\n  // Second call with zero input should also generate zero output.  However,\n  // the output vector now is already the correct size, but full of nonzero\n  // values.  Make sure these don't affect the output.\n  input.assign(kSampleCount, 0.0);\n  filterbank.Compute(input, &output);\n  for (const double value : output) {\n    EXPECT_EQ(0.0, value);\n  }\n}\n\nTEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxIntValue) {\n  // Test for bug where vector throws a length_error when it suspects the size\n  // to be more than it's max_size. For now, we fail initialization when the\n  // number of requested channels is >= the maximum value int can take (since\n  // num_channels_ is an int).\n  MfccMelFilterbank filterbank;\n\n  const int kSampleCount = 513;\n  std::size_t num_channels = std::numeric_limits<int>::max();\n  bool initialized = filterbank.Initialize(\n      kSampleCount, 2 /* sample rate */, num_channels /* channels */,\n      1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);\n\n  EXPECT_FALSE(initialized);\n}\n\nTEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxSize) {\n  // Test for bug where vector throws a length_error when it suspects the size\n  // to be more than it's max_size. For now, we fail initialization when the\n  // number of requested channels is > than std::vector<double>::max_size().\n  MfccMelFilterbank filterbank;\n\n  const int kSampleCount = 513;\n  // Set num_channels to exceed the max_size a double vector can\n  // theoretically take.\n  std::size_t num_channels = std::vector<double>().max_size() + 1;\n  bool initialized = filterbank.Initialize(\n      kSampleCount, 2 /* sample rate */, num_channels /* channels */,\n      1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);\n\n  EXPECT_FALSE(initialized);\n}\n\n}  // namespace tensorflow\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/audio_ops.cc\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/kernels/mfcc.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n\nnamespace tensorflow {\n\n// Create a speech fingerprint from spectrogram data.\nclass MfccOp : public OpKernel {\n public:\n  explicit MfccOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"upper_frequency_limit\",\n                                             &upper_frequency_limit_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"lower_frequency_limit\",\n                                             &lower_frequency_limit_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"filterbank_channel_count\",\n                                             &filterbank_channel_count_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"dct_coefficient_count\",\n                                             &dct_coefficient_count_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& spectrogram = context->input(0);\n    OP_REQUIRES(context, spectrogram.dims() == 3,\n                errors::InvalidArgument(\"spectrogram must be 3-dimensional\",\n                                        spectrogram.shape().DebugString()));\n    const Tensor& sample_rate_tensor = context->input(1);\n    OP_REQUIRES(context, TensorShapeUtils::IsScalar(sample_rate_tensor.shape()),\n                errors::InvalidArgument(\n                    \"Input sample_rate should be a scalar tensor, got \",\n                    sample_rate_tensor.shape().DebugString(), \" instead.\"));\n    const int32_t sample_rate = sample_rate_tensor.scalar<int32>()();\n\n    const int spectrogram_channels = spectrogram.dim_size(2);\n    const int spectrogram_samples = spectrogram.dim_size(1);\n    const int audio_channels = spectrogram.dim_size(0);\n\n    Mfcc mfcc;\n    mfcc.set_upper_frequency_limit(upper_frequency_limit_);\n    mfcc.set_lower_frequency_limit(lower_frequency_limit_);\n    mfcc.set_filterbank_channel_count(filterbank_channel_count_);\n    mfcc.set_dct_coefficient_count(dct_coefficient_count_);\n    OP_REQUIRES(\n        context, mfcc.Initialize(spectrogram_channels, sample_rate),\n        errors::InvalidArgument(\"Mfcc initialization failed for channel count \",\n                                spectrogram_channels, \", sample rate \",\n                                sample_rate, \" and filterbank_channel_count \",\n                                filterbank_channel_count_));\n\n    Tensor* output_tensor = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(\n                       0,\n                       TensorShape({audio_channels, spectrogram_samples,\n                                    dct_coefficient_count_}),\n                       &output_tensor));\n\n    const float* spectrogram_flat = spectrogram.flat<float>().data();\n    float* output_flat = output_tensor->flat<float>().data();\n\n    for (int audio_channel = 0; audio_channel < audio_channels;\n         ++audio_channel) {\n      for (int spectrogram_sample = 0; spectrogram_sample < spectrogram_samples;\n           ++spectrogram_sample) {\n        const float* sample_data =\n            spectrogram_flat +\n            (audio_channel * spectrogram_samples * spectrogram_channels) +\n            (spectrogram_sample * spectrogram_channels);\n        std::vector<double> mfcc_input(sample_data,\n                                       sample_data + spectrogram_channels);\n        std::vector<double> mfcc_output;\n        mfcc.Compute(mfcc_input, &mfcc_output);\n        DCHECK_EQ(dct_coefficient_count_, mfcc_output.size());\n        float* output_data =\n            output_flat +\n            (audio_channel * spectrogram_samples * dct_coefficient_count_) +\n            (spectrogram_sample * dct_coefficient_count_);\n        for (int i = 0; i < dct_coefficient_count_; ++i) {\n          output_data[i] = mfcc_output[i];\n        }\n      }\n    }\n  }\n\n private:\n  float upper_frequency_limit_;\n  float lower_frequency_limit_;\n  int32 filterbank_channel_count_;\n  int32 dct_coefficient_count_;\n};\nREGISTER_KERNEL_BUILDER(Name(\"Mfcc\").Device(DEVICE_CPU), MfccOp);\n\n}  // namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/mfcc.cc", "tensorflow/core/kernels/mfcc_mel_filterbank.cc", "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc", "tensorflow/core/kernels/mfcc_op.cc"], "buggy_code_start_loc": [41, 34, 17, 28], "buggy_code_end_loc": [43, 78, 87, 67], "fixing_code_start_loc": [41, 35, 18, 28], "fixing_code_end_loc": [45, 90, 122, 69], "type": "CWE-20", "message": "TensorFlow is an open source platform for machine learning. If `ThreadUnsafeUnigramCandidateSampler` is given input `filterbank_channel_count` greater than the allowed max size, TensorFlow will crash. We have patched the issue in GitHub commit 39ec7eaf1428e90c37787e5b3fbd68ebd3c48860. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2022-41896", "sourceIdentifier": "security-advisories@github.com", "published": "2022-11-18T22:15:18.590", "lastModified": "2022-11-22T19:33:34.973", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. If `ThreadUnsafeUnigramCandidateSampler` is given input `filterbank_channel_count` greater than the allowed max size, TensorFlow will crash. We have patched the issue in GitHub commit 39ec7eaf1428e90c37787e5b3fbd68ebd3c48860. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.8.4", "matchCriteriaId": "A694EEE1-BFB9-4E6C-B275-02DC2731961C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.9.0", "versionEndExcluding": "2.9.3", "matchCriteriaId": "9057B403-719C-4F10-BAB6-67F84786A89E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.10.0", "versionEndExcluding": "2.10.1", "matchCriteriaId": "793BC396-7686-47FA-A107-DA6FC90704A2"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/39ec7eaf1428e90c37787e5b3fbd68ebd3c48860", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rmg2-f698-wq35", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/39ec7eaf1428e90c37787e5b3fbd68ebd3c48860"}}