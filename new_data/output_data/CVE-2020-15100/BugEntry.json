{"buggy_code": ["#!/usr/bin/python3 -O\n\n# freewvs - a free web vulnerability scanner\n#\n# https://freewvs.schokokeks.org/\n#\n# Written by schokokeks.org Hosting, https://schokokeks.org\n#\n# Contributions by\n# Hanno Boeck, https://hboeck.de/\n# Fabian Fingerle, https://fabian-fingerle.de/\n# Bernd Wurst, https://bwurst.org/\n#\n# To the extent possible under law, the author(s) have dedicated all copyright\n# and related and neighboring rights to this software to the public domain\n# worldwide. This software is distributed without any warranty.\n#\n# You should have received a copy of the CC0 Public Domain Dedication along\n# with this software. If not, see\n# https://creativecommons.org/publicdomain/zero/1.0/\n# Nevertheless, in case you use a significant part of this code, we ask (but\n# not require, see the license) that you keep the authors' names in place and\n# return your changes to the public. We would be especially happy if you tell\n# us what you're going to do with this code.\n\nimport os\nimport glob\nimport re\nimport argparse\nimport sys\nimport json\nimport pathlib\nfrom xml.sax.saxutils import escape  # noqa: DUO107\n\n\ndef versioncompare(safe_version, find_version):\n    if safe_version == \"\":\n        return True\n    safe_version_tup = [int(x) for x in safe_version.split(\".\")]\n    find_version_tup = [int(x) for x in find_version.split(\".\")]\n    return find_version_tup < safe_version_tup\n\n\ndef vulnprint(appname, version, safeversion, vuln, vfilename, subdir,\n              xml):\n    appdir = '/'.join(os.path.abspath(vfilename).split('/')[:-1 - subdir])\n    if not xml:\n        print(\"%(appname)s %(version)s (%(safeversion)s) %(vuln)s \"\n              \"%(appdir)s\" % vars())\n    else:\n        state = 'vulnerable'\n        if safeversion == 'ok':\n            state = 'ok'\n        print('  <app state=\"%s\">' % state)\n        print('    <appname>%s</appname>' % escape(appname))\n        print('    <version>%s</version>' % escape(version))\n        print('    <directory>%s</directory>' % escape(appdir))\n        if state == 'vulnerable':\n            print('    <safeversion>%s</safeversion>' % escape(safeversion))\n            print('    <vulninfo>%s</vulninfo>' % escape(vuln))\n        print('  </app>')\n\n\n# Command-line options\nparser = argparse.ArgumentParser()\nparser.add_argument(\"dirs\", nargs=\"*\",\n                    help=\"Directories to scan\")\nparser.add_argument(\"-a\", \"--all\", action=\"store_true\",\n                    help=\"Show all webapps found, not just vulnerable\")\nparser.add_argument(\"-x\", \"--xml\", action=\"store_true\",\n                    help=\"Output results as XML\")\nparser.add_argument(\"-3\", \"--thirdparty\", action=\"store_true\",\n                    help=\"Scan for third-party components like jquery\")\nopts = parser.parse_args()\n\n# Warn people with old-style freewvsdb dirs,\n# should be removed in a few months\nfor d in [\"/usr/share/freewvs\", \"/usr/local/share/freewvs\"]:\n    if os.path.isdir(d):\n        print(\"WARNING: Obsolete freewvs data in %s, removal recommended\" % d,\n              file=sys.stderr)\n\njdir = False\nfor p in [os.path.dirname(sys.argv[0]) + '/freewvsdb', '/var/lib/freewvs',\n          str(pathlib.Path.home()) + \"/.cache/freewvs/\"]:\n    if os.path.isdir(p):\n        jdir = p\n        break\nif not jdir:\n    print(\"Can't find freewvs json db\")\n    sys.exit(1)\n\njconfig = []\nfor cfile in glob.glob(jdir + '/*.json'):\n    with open(cfile) as json_file:\n        data = json.load(json_file)\n        jconfig += data\n\nscanfiles = set()\nfor app in jconfig:\n    for det in app['detection']:\n        scanfiles.add(det['file'])\n\n\nif opts.xml:\n    print('<?xml version=\"1.0\" ?>')\n    print('<freewvs>')\n\n# start the search\n\nfor fdir in opts.dirs:\n    for root, dirs, files in os.walk(fdir):\n        # this protects us against nested directories causing\n        # an exception\n        if root.count(os.sep) > 500:\n            del dirs[:]\n        for filename in scanfiles.intersection(files):\n            for item in jconfig:\n                if not opts.thirdparty and 'thirdparty' in item:\n                    continue\n                for det in item['detection']:\n                    if filename == det['file']:\n                        mfile = os.path.join(root, filename)\n                        try:\n                            file = open(mfile, errors='replace')\n                        except OSError:\n                            continue\n                        filestr = file.read()\n                        file.close()\n\n                        if (('extra_match' in det\n                             and det['extra_match'] not in filestr)\n                                or ('extra_nomatch' in det\n                                    and det['extra_nomatch'] in filestr)):\n                            continue\n\n                        if ('path_match' in det\n                                and (not root.endswith(det['path_match']))):\n                            continue\n\n                        findversion = re.search(re.escape(det['variable'])\n                                                + r\"[^0-9\\n\\r]*[.]*\"\n                                                \"([0-9.]*[0-9])[^0-9.]\",\n                                                filestr)\n                        if not findversion:\n                            continue\n                        findversion = findversion.group(1)\n\n                        # Very ugly phpbb workaround\n                        if 'add_minor' in det:\n                            findversion = findversion.split('.')\n                            findversion[-1] = str(int(findversion[-1])\n                                                  + int(det['add_minor']))\n                            findversion = '.'.join(findversion)\n\n                        if ((not versioncompare(item['safe'], findversion))\n                                or ('old_safe' in item\n                                    and findversion in\n                                    item['old_safe'].split(','))):\n                            if opts.all:\n                                vulnprint(item['name'], findversion, \"ok\", \"\",\n                                          mfile, det['subdir'], opts.xml)\n                            continue\n\n                        safev = item['safe']\n                        if 'old_safe' in item:\n                            for ver in item['old_safe'].split(','):\n                                if versioncompare(ver, findversion):\n                                    safev = ver\n\n                        vulnprint(item['name'], findversion, safev,\n                                  item['vuln'], mfile, det['subdir'], opts.xml)\n\nif opts.xml:\n    print('</freewvs>')\n"], "fixing_code": ["#!/usr/bin/python3 -O\n\n# freewvs - a free web vulnerability scanner\n#\n# https://freewvs.schokokeks.org/\n#\n# Written by schokokeks.org Hosting, https://schokokeks.org\n#\n# Contributions by\n# Hanno Boeck, https://hboeck.de/\n# Fabian Fingerle, https://fabian-fingerle.de/\n# Bernd Wurst, https://bwurst.org/\n#\n# To the extent possible under law, the author(s) have dedicated all copyright\n# and related and neighboring rights to this software to the public domain\n# worldwide. This software is distributed without any warranty.\n#\n# You should have received a copy of the CC0 Public Domain Dedication along\n# with this software. If not, see\n# https://creativecommons.org/publicdomain/zero/1.0/\n# Nevertheless, in case you use a significant part of this code, we ask (but\n# not require, see the license) that you keep the authors' names in place and\n# return your changes to the public. We would be especially happy if you tell\n# us what you're going to do with this code.\n\nimport os\nimport glob\nimport re\nimport argparse\nimport sys\nimport json\nimport pathlib\nfrom xml.sax.saxutils import escape  # noqa: DUO107\n\n\ndef versioncompare(safe_version, find_version):\n    if safe_version == \"\":\n        return True\n    safe_version_tup = [int(x) for x in safe_version.split(\".\")]\n    find_version_tup = [int(x) for x in find_version.split(\".\")]\n    return find_version_tup < safe_version_tup\n\n\ndef vulnprint(appname, version, safeversion, vuln, vfilename, subdir,\n              xml):\n    appdir = '/'.join(os.path.abspath(vfilename).split('/')[:-1 - subdir])\n    if not xml:\n        print(\"%(appname)s %(version)s (%(safeversion)s) %(vuln)s \"\n              \"%(appdir)s\" % vars())\n    else:\n        state = 'vulnerable'\n        if safeversion == 'ok':\n            state = 'ok'\n        print('  <app state=\"%s\">' % state)\n        print('    <appname>%s</appname>' % escape(appname))\n        print('    <version>%s</version>' % escape(version))\n        print('    <directory>%s</directory>' % escape(appdir))\n        if state == 'vulnerable':\n            print('    <safeversion>%s</safeversion>' % escape(safeversion))\n            print('    <vulninfo>%s</vulninfo>' % escape(vuln))\n        print('  </app>')\n\n\n# Command-line options\nparser = argparse.ArgumentParser()\nparser.add_argument(\"dirs\", nargs=\"*\",\n                    help=\"Directories to scan\")\nparser.add_argument(\"-a\", \"--all\", action=\"store_true\",\n                    help=\"Show all webapps found, not just vulnerable\")\nparser.add_argument(\"-x\", \"--xml\", action=\"store_true\",\n                    help=\"Output results as XML\")\nparser.add_argument(\"-3\", \"--thirdparty\", action=\"store_true\",\n                    help=\"Scan for third-party components like jquery\")\nopts = parser.parse_args()\n\n# Warn people with old-style freewvsdb dirs,\n# should be removed in a few months\nfor d in [\"/usr/share/freewvs\", \"/usr/local/share/freewvs\"]:\n    if os.path.isdir(d):\n        print(\"WARNING: Obsolete freewvs data in %s, removal recommended\" % d,\n              file=sys.stderr)\n\njdir = False\nfor p in [os.path.dirname(sys.argv[0]) + '/freewvsdb', '/var/lib/freewvs',\n          str(pathlib.Path.home()) + \"/.cache/freewvs/\"]:\n    if os.path.isdir(p):\n        jdir = p\n        break\nif not jdir:\n    print(\"Can't find freewvs json db\")\n    sys.exit(1)\n\njconfig = []\nfor cfile in glob.glob(jdir + '/*.json'):\n    with open(cfile) as json_file:\n        data = json.load(json_file)\n        jconfig += data\n\nscanfiles = set()\nfor app in jconfig:\n    for det in app['detection']:\n        scanfiles.add(det['file'])\n\n\nif opts.xml:\n    print('<?xml version=\"1.0\" ?>')\n    print('<freewvs>')\n\n# start the search\n\nfor fdir in opts.dirs:\n    for root, dirs, files in os.walk(fdir):\n        # this protects us against nested directories causing\n        # an exception\n        if root.count(os.sep) > 500:\n            del dirs[:]\n        for filename in scanfiles.intersection(files):\n            for item in jconfig:\n                if not opts.thirdparty and 'thirdparty' in item:\n                    continue\n                for det in item['detection']:\n                    if filename == det['file']:\n                        mfile = os.path.join(root, filename)\n                        try:\n                            file = open(mfile, errors='replace')\n                        except OSError:\n                            continue\n                        filestr = file.read(200000)\n                        file.close()\n\n                        if (('extra_match' in det\n                             and det['extra_match'] not in filestr)\n                                or ('extra_nomatch' in det\n                                    and det['extra_nomatch'] in filestr)):\n                            continue\n\n                        if ('path_match' in det\n                                and (not root.endswith(det['path_match']))):\n                            continue\n\n                        findversion = re.search(re.escape(det['variable'])\n                                                + r\"[^0-9\\n\\r]*[.]*\"\n                                                \"([0-9.]*[0-9])[^0-9.]\",\n                                                filestr)\n                        if not findversion:\n                            continue\n                        findversion = findversion.group(1)\n\n                        # Very ugly phpbb workaround\n                        if 'add_minor' in det:\n                            findversion = findversion.split('.')\n                            findversion[-1] = str(int(findversion[-1])\n                                                  + int(det['add_minor']))\n                            findversion = '.'.join(findversion)\n\n                        if ((not versioncompare(item['safe'], findversion))\n                                or ('old_safe' in item\n                                    and findversion in\n                                    item['old_safe'].split(','))):\n                            if opts.all:\n                                vulnprint(item['name'], findversion, \"ok\", \"\",\n                                          mfile, det['subdir'], opts.xml)\n                            continue\n\n                        safev = item['safe']\n                        if 'old_safe' in item:\n                            for ver in item['old_safe'].split(','):\n                                if versioncompare(ver, findversion):\n                                    safev = ver\n\n                        vulnprint(item['name'], findversion, safev,\n                                  item['vuln'], mfile, det['subdir'], opts.xml)\n\nif opts.xml:\n    print('</freewvs>')\n"], "filenames": ["freewvs"], "buggy_code_start_loc": [128], "buggy_code_end_loc": [129], "fixing_code_start_loc": [128], "fixing_code_end_loc": [129], "type": "CWE-770", "message": "In freewvs before 0.1.1, a user could create a large file that freewvs will try to read, which will terminate a scan process. This has been patched in 0.1.1.", "other": {"cve": {"id": "CVE-2020-15100", "sourceIdentifier": "security-advisories@github.com", "published": "2020-07-14T20:15:11.427", "lastModified": "2021-11-18T18:05:20.650", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In freewvs before 0.1.1, a user could create a large file that freewvs will try to read, which will terminate a scan process. This has been patched in 0.1.1."}, {"lang": "es", "value": "En freewvs versiones anteriores a 0.1.1, un usuario podr\u00eda crear un archivo grande que freewvs intentar\u00e1 leer, lo que finalizar\u00e1 un proceso de escaneo. Esto ha sido parcheado en versi\u00f3n 0.1.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 3.3, "baseSeverity": "LOW"}, "exploitabilityScore": 1.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.8, "baseSeverity": "LOW"}, "exploitabilityScore": 1.3, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-770"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:schokokeks:freewvs:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.1.1", "matchCriteriaId": "B706FF3C-0582-4CAB-B351-A70C32D90B2D"}]}]}], "references": [{"url": "https://github.com/schokokeksorg/freewvs/commit/18bbf2043e53f69e0119d24f8ae4edb274afb9b2", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/schokokeksorg/freewvs/security/advisories/GHSA-9cfv-9463-8gqv", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/schokokeksorg/freewvs/commit/18bbf2043e53f69e0119d24f8ae4edb274afb9b2"}}