{"buggy_code": ["<?php\n\ninclude_once '../models/Location_History.php';\n\n\n\n// range of dates\nif ($dateFilter[0]) {\n\t$query .= \" AND start_date >= STR_TO_DATE('\" . htmlspecialchars($dateFilter[0]) . \"', '%m/%d/%Y')\";\n}\n\nif ($dateFilter[1]) {\n\t$query .= \" AND start_date <= STR_TO_DATE('\" . htmlspecialchars($dateFilter[1]) . \"', '%m/%d/%Y')\";\n}\n\n\n// filtered-out days\nif (isset($dayFilter)) {\n\t$query .= \" AND DAYOFWEEK(start_date) NOT IN (\" . htmlspecialchars($dayFilter) . \")\";\n}\n\n\n?>\n", "<?php\n\ninclude_once '../models/Location_History.php';\n\n\n// limit number of results\n$limit = null;\nif ($_POST['limit']) {\n\t$limit = $_POST['limit'];\n}\n\n\n// select only a certain range of dates\n$dayFilter = null;\nif (isset($_POST['dayFilter'])) {\n\t$dayFilter = implode(',', $_POST['dayFilter']);\n}\n\n\n// filter out certain days of the week\n$dateFilter = array('', '');\nif (isset($_POST['dateFilter'])) {\n\t$dateFilter = $_POST['dateFilter'];\n}\n\n\n\n?>\n", "<?php\n\ninclude_once '__parse_query.php';\n\n\n\n\n// visits\n$query = \"SELECT\n\tCOUNT(gp.id) AS num, SUM(gp.duration) AS duration\n\tFROM grouped_point gp\n\tWHERE 1 = 1\";\n\n\n// CONSTRUCT WHERE CLAUSE\ninclude '__build_query.php';\n\n$visits = $db->rawQuery($query, null, false);\n\n\n\n// trips\n$query = \"SELECT\n\tCOUNT(t.id) AS num, SUM(t.duration) AS duration, SUM(t.distance) AS distance\n\tFROM trip t\n\tWHERE 1 = 1\";\n\n\n// CONSTRUCT WHERE CLAUSE\ninclude '__build_query.php';\n\n$trips = $db->rawQuery($query, null, false);\n\n\necho json_encode(array(\"visits\" => $visits, \"trips\" =>  $trips));\n\n\n\n\n\n\n?>\n", "<?php\n\ninclude_once '__parse_query.php';\n\n\n\n// this cannot return meaningful results with a location id\nif (!$_POST['location_id']) {\n\treturn;\n}\n\n$location_id = $_POST['location_id'];\n\n\n\n// visits for location\n$query = \"SELECT\n\tDATE(start_date) AS date, SUM(duration) AS duration\n\tFROM grouped_point gp\n\tWHERE location_id = \" . htmlspecialchars($location_id);\n\n\n// CONSTRUCT WHERE CLAUSE\ninclude '__build_query.php';\n\n// group by comes after where clause\n$query .= \" GROUP BY DATE(start_date)\";\n\n$results = $db->rawQuery($query, null, false);\n\n\n// convert seconds to hours, and make sure that no day is longer than 24 hours, by rolling extra hours over to the next record\nforeach($results as $index => &$result) {\n\t$duration = $result['duration'];\n\n\tif ($duration > 86400) {\n\t\tif (isset($results[$index + 1])) {\n\t\t\t$results[$index + 1]['duration'] += $duration - 86400;\n\t\t}\n\t\t$duration = 86400;\n\n\t}\n\n\t$result['duration'] = round($duration / 3600, 1);\n}\nunset($value);\n\n\necho json_encode($results);\n\n\n\n\n?>\n", "<?php\n\ninclude_once '__parse_query.php';\n\n\n\n\n// this query also counts the grouped_points that contribute to each location, and gets the duration dynamically by summing the duration values from the grouped_points, which means this can respond to any filters specified by the user\n$query = \"SELECT\n\tl.id, SUM(gp.duration) AS duration, l.lat, l.lon, l.geocode_name, l.name, l.description, COUNT(l.id) AS visits\n\tFROM location l, grouped_point gp\n\tWHERE l.id = gp.location_id\";\n\n\n\n// CONSTRUCT WHERE CLAUSE\ninclude_once '__build_query.php';\n\n\n\n// group by and order by come after where clause\n$query .= \" GROUP BY l.id ORDER BY duration DESC\";\n\n\n// limit clause comes last\nif (isset($limit)) {\n\t$query .= \" LIMIT \" . htmlspecialchars($limit);\n}\n\n\n\necho json_encode($db->rawQuery($query, null, false));\n\n\n\n\n\n\n?>\n", "<?php\n\ninclude_once '__parse_query.php';\ninclude_once '../models/Circular.php';\n\n\n// this cannot return meaningful results without a location id\nif (!$_POST['location_id']) {\n\treturn;\n}\n\n$location_id = htmlspecialchars($_POST['location_id']);\n\n\n\n\n\n\n/* trips starting at location\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n\n    /* aggregate\n    \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n$query = \"SELECT COUNT(t.end_location_id) AS count_lid, t.end_location_id, l.name, AVG(t.duration) AS duration, 0 AS start_time, AVG(t.distance) AS distance\nFROM trip t, location l\nWHERE t.end_location_id = l.id\nAND t.start_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n$query .= \" GROUP BY t.end_location_id HAVING count_lid > 1 ORDER BY count_lid DESC\";\n$start_aggregate = $db->rawQuery($query, null, false);\n\n\n\n\n    /* all\n    \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n$query = \"SELECT t.end_location_id, l.name, DATE(t.start_date) AS start_date, TIME(t.start_date) AS start_time, TIME_TO_SEC(t.start_date) AS start_time_sec, t.duration, t.distance\nFROM trip t, location l,\n\t(SELECT COUNT(t.end_location_id) AS count_lid, t.end_location_id\n\tFROM trip t\n\tWHERE t.start_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n\n$query .= \" GROUP BY t.end_location_id) AS c\nWHERE t.end_location_id = l.id\nAND t.end_location_id = c.end_location_id\nAND t.start_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n$query .= \" ORDER BY c.count_lid DESC, t.end_location_id, t.start_date ASC\";\n$start_all = $db->rawQuery($query, null, false);\n\n\n\n\n/* trips ending at location\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n\n    /* aggregate\n    \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n$query = \"SELECT COUNT(t.start_location_id) AS count_lid, t.start_location_id, l.name, AVG(t.duration) AS duration, 0 AS end_time, AVG(t.distance) AS distance\nFROM trip t, location l\nWHERE t.start_location_id = l.id\nAND t.end_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n$query .= \" GROUP BY t.start_location_id HAVING count_lid > 1 ORDER BY count_lid DESC\";\n$end_aggregate = $db->rawQuery($query, null, false);\n\n\n\n\n    /* all\n    \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n$query = \"SELECT t.start_location_id, l.name, DATE(t.end_date) AS end_date, TIME(t.end_date) AS end_time, TIME_TO_SEC(t.end_date) AS end_time_sec, t.duration, t.distance\nFROM trip t, location l,\n\t(SELECT COUNT(t.start_location_id) AS count_lid, t.start_location_id\n\tFROM trip t\n\tWHERE t.end_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n\n$query .= \" GROUP BY t.start_location_id) AS c\nWHERE t.start_location_id = l.id\nAND t.start_location_id = c.start_location_id\nAND t.end_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n$query .= \" ORDER BY c.count_lid DESC, t.start_location_id, t.end_date ASC\";\n$end_all = $db->rawQuery($query, null, false);\n\n\n\n\n\n\n/* all trips starting at and ending at this location\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n\n$query = \"SELECT ls.name AS start_name, le.name AS end_name, SQ.* FROM\n(SELECT t.start_location_id, t.end_location_id, DATE(t.start_date) AS start_date, TIME(t.start_date) AS start_time, t.duration, t.distance\nFROM trip t\nWHERE t.start_location_id = \" . $location_id . \" OR t.end_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n\n$query .= \" ORDER BY t.start_date ASC) SQ, location ls, location le\nWHERE ls.id = SQ.start_location_id AND le.id = SQ.end_location_id\";\n\n$start_end_all = $db->rawQuery($query, null, false);\n\n\n\n\n\n\n\n\n\n\nfunction modify_avg_times($all, &$aggregate, $location_string = 'end', $time_string = 'start') {\n\n\t$old_id = '';\n\t$times = array();\n\n\tforeach ($all as $result) {\n\t\t$id = $result[$location_string . '_location_id'];\n\n\t\tif ($old_id !== $id) {\n\t\t\tif (isset($times[$old_id]) && count($times[$old_id]) == 1) {\n\t\t\t\tunset($times[$old_id]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$times[$id] = array();\n\t\t}\n\n\t\t$old_id = $id;\n\t\t$times[$id][] = $result[$time_string . '_time_sec'];\n\t}\n\n\n\tforeach ($aggregate as &$result) {\n\t\t$result[$time_string . '_time'] = round(circularMean(\n\t\t\t$times[$result[$location_string . '_location_id']]\n\t\t\t, 86400));\n\t}\n\tunset($result);\n}\n\nmodify_avg_times($start_all, $start_aggregate);\nmodify_avg_times($end_all, $end_aggregate, 'start', 'end');\n\n\necho json_encode(array(\n\t\"start_aggregate\" => $start_aggregate,\n\t\"start_all\" => $start_all,\n\t\"end_aggregate\" => $end_aggregate,\n\t\"end_all\" => $end_all,\n\t\"start_end_all\" => $start_end_all\n\t));\n\n\n\n\n\n?>\n\n\n\n\n", "<?php\n\ninclude_once '__parse_query.php';\n\n\n\n// this cannot return meaningful results without a location id\nif (!$_POST['location_id']) {\n\treturn;\n}\n\n$location_id = $_POST['location_id'];\n\n\n// visits for location\n$query = \"SELECT\n\tDATE(gp.start_date) as start_date, TIME(gp.start_date) as start_time, TIME_TO_SEC(gp.start_date) as start_time_sec, TIME_TO_SEC(gp.end_date) as end_time_sec, duration\n\tFROM grouped_point gp\n\tWHERE location_id = \" . htmlspecialchars($location_id);\n\n\n\n// CONSTRUCT WHERE CLAUSE\ninclude '__build_query.php';\ninclude_once '../models/Circular.php';\n\n$results = $db->rawQuery($query, null, false);\n\n\n$start_times = array();\n$end_times = array();\n\nforeach($results as $result) {\n\t$start_times[] = $result['start_time_sec'];\n\t$end_times[] = $result['end_time_sec'];\n}\n\n\necho json_encode(array\n\t(\"mean_times\" => array\n\t\t(\"start\" => round(circularMean($start_times, 86400)),\n\t\t\"end\" => round(circularMean($end_times, 86400))),\n\t\"results\" => $results));\n\n\n\n\n?>\n", "html, body {\n  height: 99%;\n}\n\nbody {\n  width: 100% !important;\n  margin-bottom: 0px !important;\n}\n\n#wrapper {\n\tposition: relative;\n\theight: 99%;\n  margin: 0px 40px 0px;\n  border: 1px solid gray;\n}\n\n#map-canvas {\n  height: 100%;\n  width: 100%;\n}\n\n\n\n\n\n/*enable scrollbar image in chrome and safari, in mozilla it's enabled by default*/\n.resource-window::-webkit-scrollbar {\n    -webkit-appearance: none;\n}\n\n.resource-window::-webkit-scrollbar:vertical {\n    width: 10px;\n}\n\n.resource-window::-webkit-scrollbar-thumb {\n    border-radius: 8px;\n    border: 2px solid #eee; /* should match background, can't be transparent */\n    background-color: rgba(0, 0, 0, .5);\n}\n\n.resource-window::-webkit-scrollbar-track {\n    background-color: #eee;\n    border-radius: 8px;\n}\n\n\n\n\n\n\n.resource-window {\n\tposition: absolute;\n\tbottom: 3%;\n\tleft: 2%;\n\tz-index: 99;\n\n\tmax-height: 50%;\n\tdisplay: inline-block;\n\toverflow: auto;\n\n\tdisplay: none;\n\tbackground: white;\n\tborder: 1px solid gray;\n\tborder-radius: 3px;\n\tpadding: 5px 15px 5px;\n\n\topacity: 0.9;\n}\n\n.resource-window[value=\"trips\"] {\n\tmax-height: 35%;\n\topacity: 0.75;\n}\n\n.resource-window li {\n\tlist-style: none;\n\tfont-weight: normal;\n\tmargin-left: -30px;\n\tpadding-left: -10px;\n}\n\n.resource-window li.header {\n\tfont-weight: bold;\n}\n\n.resource-window p {\n\tmargin: .5em 0em .5em;\n}\n\n.resource-window p#visits-header {\n\tfont-weight: bold;\n}\n\n.resource-window table#trips-table {\n\twidth: 800px;\n}\n\n.resource-window table#visits-table {\n\twidth: 500px;\n}\n\n.resource-window div.header {\n\tmargin-top: -10px;\n\tmargin-bottom: 10px;\n\twidth: 800px;\n}\n\n.resource-window div.box {\n\tdisplay: inline-block;\n}\n\n.resource-window div#select {\n\tposition: absolute;\n\tright: 2%;\n\ttop: 7%;\n}\n\n.resource-window select {\n\twidth: 125px;\n}\n\n.resource-window tr.selectable {\n\tcursor: pointer;\n}\n\n.resource-window tr.selectable:hover {\n\tbackground-color: #eeeeee;\n}\n\n\n\n\n\n.info-window {\n\tmin-width: 500px;\n\topacity: 0.9;\n}\n\n.info-window #header {\n\tmargin-bottom: .33em;\n\t/*font-weight: bold;*/\n}\n\n.info-window #button {\n\tmargin-top: .5em;\n\tmargin-bottom: 0em;\n\tdisplay: inline-block;\n}\n\n.info-window .resource {\n\tdisplay: inline-block;\n\tborder: 2px solid gray;\n\tborder-radius: 2px;\n\tpadding: 0 9px 3px;\n\tbackground: #eeeeee;\n\tmargin-left: 58px;\n\tcursor: pointer;\n}\n\n\n\n.info-window form {\n\tpadding-bottom: 5px;\n}\n\n.info-window #form-inputs {\n\tdisplay: table;\n}\n\n.info-window li {\n\tdisplay: table-row;\n}\n\n.info-window label {\n\tdisplay: table-cell;\n}\n\n.info-window input {\n\tdisplay: table-cell;\n\twidth: 400px;\n\tmargin-left: 10px;\n}\n\n/* to make sure that the div containing the info-window content is large enough to accomodate this content */\ndiv.gm-style-iw > div {\n\tmax-height: 120% !important;\n}\n\n\n\n\n\n\n\ninput#limit {\n\twidth: 60px;\n}\n\nli#datepicker-container {\n\tmargin-top: 10px;\n\tmax-width: 350px;\n\tpadding-left: 10px;\n\tpadding-right: 25px;\n}\n\n\nli#weekdays-container {\n\tmargin-top: 8px;\n}\n\nli#search-container {\n\tmargin-top: 11px;\n\tmargin-right: 10px;\n\tmargin-left: -30px;\n}\n\n\n\n\n\n\n.wide-dropdown {\n\twidth: 400px !important;\n}\n\n\n"], "fixing_code": ["<?php\n\ninclude_once '../models/Location_History.php';\n\n\n// range of dates\nif ($dateFilter[0]) {\n\t$query .= \" AND start_date >= STR_TO_DATE('\" . $db->mysqli()->real_escape_string($dateFilter[0]) . \"', '%m/%d/%Y')\";\n}\n\nif ($dateFilter[1]) {\n\t$query .= \" AND start_date <= STR_TO_DATE('\" . $db->mysqli()->real_escape_string($dateFilter[1]) . \"', '%m/%d/%Y')\";\n}\n\n\n// filtered-out days\nif (isset($dayFilter)) {\n\t$query .= \" AND DAYOFWEEK(start_date) NOT IN (\" . $dayFilter . \")\";\n}\n\n\n?>\n", "<?php\n\ninclude_once '../models/Location_History.php';\n\n\n// limit number of results\n$limit = null;\nif ($_POST['limit']) {\n\t$limit = $db->mysqli()->real_escape_string($_POST['limit']);\n}\n\n\n// select only a certain range of dates\n$dayFilter = null;\nif (isset($_POST['dayFilter'])) {\n\t$dayFilter = $db->mysqli()->real_escape_string(implode(',', $_POST['dayFilter']));\n}\n\n\n// filter out certain days of the week. the elements of this array are escaped in __build_query.php\n$dateFilter = array('', '');\nif (isset($_POST['dateFilter'])) {\n\t$dateFilter = $_POST['dateFilter'];\n}\n\n\n\n?>\n", "<?php\n\ninclude_once '__parse_query.php';\n\n\n\n\n// visits\n$query = \"SELECT\n\tCOUNT(gp.id) AS num, SUM(gp.duration) AS duration\n\tFROM grouped_point gp\n\tWHERE 1 = 1\";\n\n\n// CONSTRUCT WHERE CLAUSE\ninclude '__build_query.php';\n\n$visits = $db->rawQuery($query, null);\n\n\n\n// trips\n$query = \"SELECT\n\tCOUNT(t.id) AS num, SUM(t.duration) AS duration, SUM(t.distance) AS distance\n\tFROM trip t\n\tWHERE 1 = 1\";\n\n\n// CONSTRUCT WHERE CLAUSE\ninclude '__build_query.php';\n\n$trips = $db->rawQuery($query, null);\n\n\necho json_encode(array(\"visits\" => $visits, \"trips\" =>  $trips));\n\n\n\n\n\n\n?>\n", "<?php\n\ninclude_once '__parse_query.php';\n\n\n\n// this cannot return meaningful results with a location id\nif (!$_POST['location_id']) {\n\treturn;\n}\n\n\n// visits for location\n$query = \"SELECT\n\tDATE(start_date) AS date, SUM(duration) AS duration\n\tFROM grouped_point gp\n\tWHERE location_id = ?\";\n\n\n// CONSTRUCT WHERE CLAUSE\ninclude '__build_query.php';\n\n// group by comes after where clause\n$query .= \" GROUP BY DATE(start_date)\";\n\n$results = $db->rawQuery($query, Array($_POST['location_id']));\n\n\n// convert seconds to hours, and make sure that no day is longer than 24 hours, by rolling extra hours over to the next record\nforeach($results as $index => &$result) {\n\t$duration = $result['duration'];\n\n\tif ($duration > 86400) {\n\t\tif (isset($results[$index + 1])) {\n\t\t\t$results[$index + 1]['duration'] += $duration - 86400;\n\t\t}\n\t\t$duration = 86400;\n\n\t}\n\n\t$result['duration'] = round($duration / 3600, 1);\n}\nunset($value);\n\n\necho json_encode($results);\n\n\n\n\n?>\n", "<?php\n\ninclude_once '__parse_query.php';\n\n\n\n\n// this query also counts the grouped_points that contribute to each location, and gets the duration dynamically by summing the duration values from the grouped_points, which means this can respond to any filters specified by the user\n$query = \"SELECT\n\tl.id, SUM(gp.duration) AS duration, l.lat, l.lon, l.geocode_name, l.name, l.description, COUNT(l.id) AS visits\n\tFROM location l, grouped_point gp\n\tWHERE l.id = gp.location_id\";\n\n\n\n// CONSTRUCT WHERE CLAUSE\ninclude_once '__build_query.php';\n\n\n\n// group by and order by come after where clause\n$query .= \" GROUP BY l.id ORDER BY duration DESC\";\n\n\n// limit clause comes last\nif (isset($limit)) {\n\t$query .= \" LIMIT \" . $limit;\n}\n\n\n\necho json_encode($db->rawQuery($query, null));\n\n\n\n\n\n\n?>\n", "<?php\n\ninclude_once '__parse_query.php';\ninclude_once '../models/Circular.php';\n\n\n// this cannot return meaningful results without a location id\nif (!$_POST['location_id']) {\n\treturn;\n}\n\n$location_id = $db->mysqli()->real_escape_string($_POST['location_id']);\n\n\n\n\n\n\n/* trips starting at location\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n\n    /* aggregate\n    \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n$query = \"SELECT COUNT(t.end_location_id) AS count_lid, t.end_location_id, l.name, AVG(t.duration) AS duration, 0 AS start_time, AVG(t.distance) AS distance\nFROM trip t, location l\nWHERE t.end_location_id = l.id\nAND t.start_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n$query .= \" GROUP BY t.end_location_id HAVING count_lid > 1 ORDER BY count_lid DESC\";\n$start_aggregate = $db->rawQuery($query, null);\n\n\n\n\n    /* all\n    \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n$query = \"SELECT t.end_location_id, l.name, DATE(t.start_date) AS start_date, TIME(t.start_date) AS start_time, TIME_TO_SEC(t.start_date) AS start_time_sec, t.duration, t.distance\nFROM trip t, location l,\n\t(SELECT COUNT(t.end_location_id) AS count_lid, t.end_location_id\n\tFROM trip t\n\tWHERE t.start_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n\n$query .= \" GROUP BY t.end_location_id) AS c\nWHERE t.end_location_id = l.id\nAND t.end_location_id = c.end_location_id\nAND t.start_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n$query .= \" ORDER BY c.count_lid DESC, t.end_location_id, t.start_date ASC\";\n$start_all = $db->rawQuery($query, null);\n\n\n\n\n/* trips ending at location\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n\n    /* aggregate\n    \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n$query = \"SELECT COUNT(t.start_location_id) AS count_lid, t.start_location_id, l.name, AVG(t.duration) AS duration, 0 AS end_time, AVG(t.distance) AS distance\nFROM trip t, location l\nWHERE t.start_location_id = l.id\nAND t.end_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n$query .= \" GROUP BY t.start_location_id HAVING count_lid > 1 ORDER BY count_lid DESC\";\n$end_aggregate = $db->rawQuery($query, null);\n\n\n\n\n    /* all\n    \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n$query = \"SELECT t.start_location_id, l.name, DATE(t.end_date) AS end_date, TIME(t.end_date) AS end_time, TIME_TO_SEC(t.end_date) AS end_time_sec, t.duration, t.distance\nFROM trip t, location l,\n\t(SELECT COUNT(t.start_location_id) AS count_lid, t.start_location_id\n\tFROM trip t\n\tWHERE t.end_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n\n$query .= \" GROUP BY t.start_location_id) AS c\nWHERE t.start_location_id = l.id\nAND t.start_location_id = c.start_location_id\nAND t.end_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n$query .= \" ORDER BY c.count_lid DESC, t.start_location_id, t.end_date ASC\";\n$end_all = $db->rawQuery($query, null);\n\n\n\n\n\n\n/* all trips starting at and ending at this location\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 */\n\n$query = \"SELECT ls.name AS start_name, le.name AS end_name, SQ.* FROM\n(SELECT t.start_location_id, t.end_location_id, DATE(t.start_date) AS start_date, TIME(t.start_date) AS start_time, t.duration, t.distance\nFROM trip t\nWHERE t.start_location_id = \" . $location_id . \" OR t.end_location_id = \" . $location_id;\n\ninclude '__build_query.php';\n\n$query .= \" ORDER BY t.start_date ASC) SQ, location ls, location le\nWHERE ls.id = SQ.start_location_id AND le.id = SQ.end_location_id\";\n\n$start_end_all = $db->rawQuery($query, null);\n\n\n\n\n\n\n\n\n\n\nfunction modify_avg_times($all, &$aggregate, $location_string = 'end', $time_string = 'start') {\n\n\t$old_id = '';\n\t$times = array();\n\n\tforeach ($all as $result) {\n\t\t$id = $result[$location_string . '_location_id'];\n\n\t\tif ($old_id !== $id) {\n\t\t\tif (isset($times[$old_id]) && count($times[$old_id]) == 1) {\n\t\t\t\tunset($times[$old_id]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$times[$id] = array();\n\t\t}\n\n\t\t$old_id = $id;\n\t\t$times[$id][] = $result[$time_string . '_time_sec'];\n\t}\n\n\n\tforeach ($aggregate as &$result) {\n\t\t$result[$time_string . '_time'] = round(circularMean(\n\t\t\t$times[$result[$location_string . '_location_id']]\n\t\t\t, 86400));\n\t}\n\tunset($result);\n}\n\nmodify_avg_times($start_all, $start_aggregate);\nmodify_avg_times($end_all, $end_aggregate, 'start', 'end');\n\n\necho json_encode(array(\n\t\"start_aggregate\" => $start_aggregate,\n\t\"start_all\" => $start_all,\n\t\"end_aggregate\" => $end_aggregate,\n\t\"end_all\" => $end_all,\n\t\"start_end_all\" => $start_end_all\n\t));\n\n\n\n\n\n?>\n\n\n\n\n", "<?php\n\ninclude_once '__parse_query.php';\n\n\n\n// this cannot return meaningful results without a location id\nif (!$_POST['location_id']) {\n\treturn;\n}\n\n// visits for location\n$query = \"SELECT\n\tDATE(gp.start_date) as start_date, TIME(gp.start_date) as start_time, TIME_TO_SEC(gp.start_date) as start_time_sec, TIME_TO_SEC(gp.end_date) as end_time_sec, duration\n\tFROM grouped_point gp\n\tWHERE location_id = ?\";\n\n\n\n// CONSTRUCT WHERE CLAUSE\ninclude '__build_query.php';\ninclude_once '../models/Circular.php';\n\n$results = $db->rawQuery($query, Array($_POST['location_id']));\n\n\n$start_times = array();\n$end_times = array();\n\nforeach($results as $result) {\n\t$start_times[] = $result['start_time_sec'];\n\t$end_times[] = $result['end_time_sec'];\n}\n\n\necho json_encode(array\n\t(\"mean_times\" => array\n\t\t(\"start\" => round(circularMean($start_times, 86400)),\n\t\t\"end\" => round(circularMean($end_times, 86400))),\n\t\"results\" => $results));\n\n\n?>\n", "html, body {\n  height: 99%;\n}\n\nbody {\n  width: 100% !important;\n  margin-bottom: 0px !important;\n}\n\n#wrapper {\n\tposition: relative;\n\theight: 99%;\n  margin: 0px 40px 0px;\n  border: 1px solid gray;\n}\n\n#map-canvas {\n  height: 100%;\n  width: 100%;\n}\n\n\n\n\n\n/*enable scrollbar image in chrome and safari, in mozilla it's enabled by default*/\n.resource-window::-webkit-scrollbar {\n    -webkit-appearance: none;\n}\n\n.resource-window::-webkit-scrollbar:vertical {\n    width: 10px;\n}\n\n.resource-window::-webkit-scrollbar-thumb {\n    border-radius: 8px;\n    border: 2px solid #eee; /* should match background, can't be transparent */\n    background-color: rgba(0, 0, 0, .5);\n}\n\n.resource-window::-webkit-scrollbar-track {\n    background-color: #eee;\n    border-radius: 8px;\n}\n\n\n\n\n\n\n.resource-window {\n\tposition: absolute;\n\tbottom: 3%;\n\tleft: 2%;\n\tz-index: 99;\n\n\tmax-height: 50%;\n\tdisplay: inline-block;\n\toverflow: auto;\n\n\tdisplay: none;\n\tbackground: white;\n\tborder: 1px solid gray;\n\tborder-radius: 3px;\n\tpadding: 5px 15px 5px;\n\n\topacity: 0.9;\n}\n\n.resource-window[value=\"trips\"] {\n\tmax-height: 35%;\n\topacity: 0.75;\n}\n\n.resource-window li {\n\tlist-style: none;\n\tfont-weight: normal;\n\tmargin-left: -30px;\n\tpadding-left: -10px;\n}\n\n.resource-window li.header {\n\tfont-weight: bold;\n}\n\n.resource-window p {\n\tmargin: .5em 0em .5em;\n}\n\n.resource-window p#visits-header {\n\tfont-weight: bold;\n}\n\n.resource-window table#trips-table {\n\twidth: 800px;\n}\n\n.resource-window table#visits-table {\n\twidth: 500px;\n}\n\n.resource-window div.header {\n\tmargin-top: -10px;\n\tmargin-bottom: 10px;\n\twidth: 800px;\n}\n\n.resource-window div.box {\n\tdisplay: inline-block;\n}\n\n.resource-window div#select {\n\tposition: absolute;\n\tright: 2%;\n\ttop: 7%;\n}\n\n.resource-window select {\n\twidth: 125px;\n}\n\n.resource-window tr.selectable {\n\tcursor: pointer;\n}\n\n.resource-window tr.selectable:hover {\n\tbackground-color: #eeeeee;\n}\n\n\n\n\n\n.info-window {\n\tmin-width: 500px;\n\topacity: 0.9;\n}\n\n.info-window #header {\n\tmargin-bottom: .33em;\n\t/*font-weight: bold;*/\n}\n\n.info-window #button {\n\tmargin-top: .5em;\n\tmargin-bottom: 0em;\n\tdisplay: inline-block;\n}\n\n.info-window .resource {\n\tdisplay: inline-block;\n\tborder: 2px solid gray;\n\tborder-radius: 2px;\n\tpadding: 0 9px 3px;\n\tbackground: #eeeeee;\n\tmargin-left: 58px;\n\tcursor: pointer;\n}\n\n\n\n.info-window form {\n\tpadding-bottom: 5px;\n}\n\n.info-window #form-inputs {\n\tdisplay: table;\n}\n\n.info-window li {\n\tdisplay: table-row;\n}\n\n.info-window label {\n\tdisplay: table-cell;\n}\n\n.info-window input {\n\tdisplay: table-cell;\n\twidth: 400px;\n\tmargin-left: 10px;\n}\n\n/* to make sure that the div containing the info-window content is large enough to accomodate this content */\ndiv.gm-style-iw > div {\n\tmax-height: 120% !important;\n}\n\n\n\n\n\n\n\ninput#limit {\n\twidth: 60px;\n}\n\nli#datepicker-container {\n\tmargin-top: 10px;\n\tmax-width: 350px;\n\tpadding-left: 10px;\n\tpadding-right: 25px;\n}\n\n\nli#weekdays-container {\n\tmargin-top: 8px;\n}\n\nlabel.checkbox {\n\tcolor: black !important;\n}\n\nli#search-container {\n\tmargin-top: 11px;\n\tmargin-right: 10px;\n\tmargin-left: -30px;\n}\n\n\n\n\n\n\n.wide-dropdown {\n\twidth: 400px !important;\n}\n\n\n"], "filenames": ["location_history/controllers/__build_query.php", "location_history/controllers/__parse_query.php", "location_history/controllers/global.php", "location_history/controllers/graph.php", "location_history/controllers/main.php", "location_history/controllers/trips.php", "location_history/controllers/visits.php", "location_history/css/style.css"], "buggy_code_start_loc": [6, 9, 18, 12, 27, 12, 12, 210], "buggy_code_end_loc": [20, 21, 33, 30, 33, 113, 48, 210], "fixing_code_start_loc": [5, 9, 18, 11, 27, 12, 11, 211], "fixing_code_end_loc": [19, 21, 33, 27, 33, 113, 42, 215], "type": "CWE-89", "message": "A vulnerability was found in kylebebak dronfelipe. It has been declared as critical. Affected by this vulnerability is an unknown functionality. The manipulation leads to sql injection. The name of the patch is 87405b74fe651892d79d0dff62ed17a7eaef6a60. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217951.", "other": {"cve": {"id": "CVE-2015-10036", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-11T07:15:10.743", "lastModified": "2023-01-18T18:00:00.897", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in kylebebak dronfelipe. It has been declared as critical. Affected by this vulnerability is an unknown functionality. The manipulation leads to sql injection. The name of the patch is 87405b74fe651892d79d0dff62ed17a7eaef6a60. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217951."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dronfelipe_project:dronfelipe:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-12-15", "matchCriteriaId": "FA0A8188-6479-47FB-A14B-243F0A987A14"}]}]}], "references": [{"url": "https://github.com/kylebebak/dronfelipe/commit/87405b74fe651892d79d0dff62ed17a7eaef6a60", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217951", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217951", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kylebebak/dronfelipe/commit/87405b74fe651892d79d0dff62ed17a7eaef6a60"}}