{"buggy_code": ["{\n\t\"root\": true,\n\n\t\"extends\": \"@ljharb/eslint-config/node/6\",\n\n\t\"rules\": {\n\t\t\"consistent-return\": 1,\n\t\t\"func-name-matching\": 0,\n\t\t\"max-nested-callbacks\": 0,\n\t\t\"sort-keys\": 0,\n\t},\n}\n", "'use strict';\n\nconst path = require('path');\nconst { exec } = require('child_process');\nconst promisify = require('util.promisify');\nconst inspect = require('object-inspect');\nconst colors = require('colors/safe');\nconst copyFileCB = require('fs-copy-file');\n\nconst copyFile = promisify(copyFileCB);\nconst readFile = promisify(require('fs').readFile);\n\nconst getProjectTempDir = require('./getProjectTempDir');\n\nmodule.exports = function getLockfile(packageFile, date, {\n\tnpmNeeded,\n\tonly,\n\tlogger = () => {},\n} = {}) {\n\tif (typeof packageFile !== 'string' || packageFile.length === 0) {\n\t\treturn Promise.reject(colors.red(`\\`packageFile\\` must be a non-empty string; got ${inspect(packageFile)}`));\n\t}\n\tif (typeof date !== 'undefined' && !new Date(date).getTime()) {\n\t\treturn Promise.reject(colors.red(`\\`date\\` must be a valid Date format if provided; got ${inspect(date)}`));\n\t}\n\tconst tmpDirP = getProjectTempDir({ npmNeeded, logger });\n\tconst npmRC = path.join(path.dirname(packageFile), '.npmrc');\n\tconst copyPkg = tmpDirP.then((tmpDir) => {\n\t\tlogger(colors.blue(`Creating \\`package.json\\` in temp dir for ${date || '\u201cnow\u201d'} lockfile`));\n\t\treturn Promise.all([\n\t\t\tcopyFile(packageFile, path.join(tmpDir, 'package.json')),\n\t\t\tcopyFile(npmRC, path.join(tmpDir, '.npmrc')).catch((err) => {\n\t\t\t\tif (!err || !(/^ENOENT: no such file or directory/).test(err.message)) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}),\n\t\t]);\n\t});\n\treturn Promise.all([tmpDirP, copyPkg]).then(([tmpDir]) => new Promise((resolve, reject) => {\n\t\tconst PATH = path.join(tmpDir, '../node_modules/.bin');\n\t\tlogger(colors.blue(`Running npm install to create lockfile for ${date || '\u201cnow\u201d'}...`));\n\t\texec(\n\t\t\t`npm install --ignore-scripts --package-lock --package-lock-only${date ? ` --before=${date}` : ''}${only ? ` --only=${only}` : ''}`,\n\t\t\t{\n\t\t\t\tcwd: tmpDir,\n\t\t\t\tenv: {\n\t\t\t\t\tPATH: `${PATH}:${process.env.PATH}`,\n\t\t\t\t\tNODE_ENV: process.env.NODE_ENV,\n\t\t\t\t},\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(tmpDir);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t})).then((tmpDir) => {\n\t\tlogger(colors.blue(`Reading lockfile contents for ${date || '\u201cnow\u201d'}...`));\n\t\tconst lockfile = path.join(tmpDir, 'package-lock.json');\n\t\treturn readFile(lockfile, { encoding: 'utf-8' });\n\t});\n};\n"], "fixing_code": ["{\n\t\"root\": true,\n\n\t\"extends\": \"@ljharb/eslint-config/node/6\",\n\n\t\"rules\": {\n\t\t\"consistent-return\": 1,\n\t\t\"func-name-matching\": 0,\n\t\t\"max-nested-callbacks\": 0,\n\t\t\"max-lines-per-function\": 0,\n\t\t\"sort-keys\": 0,\n\t},\n}\n", "'use strict';\n\nconst path = require('path');\nconst { exec } = require('child_process');\nconst promisify = require('util.promisify');\nconst inspect = require('object-inspect');\nconst colors = require('colors/safe');\nconst copyFileCB = require('fs-copy-file');\n\nconst copyFile = promisify(copyFileCB);\nconst readFile = promisify(require('fs').readFile);\n\nconst getProjectTempDir = require('./getProjectTempDir');\n\nmodule.exports = function getLockfile(packageFile, date, {\n\tnpmNeeded,\n\tonly,\n\tlogger = () => {},\n} = {}) {\n\tif (typeof packageFile !== 'string' || packageFile.length === 0) {\n\t\treturn Promise.reject(colors.red(`\\`packageFile\\` must be a non-empty string; got ${inspect(packageFile)}`));\n\t}\n\tif (typeof date !== 'undefined' && !new Date(date).getTime()) {\n\t\treturn Promise.reject(colors.red(`\\`date\\` must be a valid Date format if provided; got ${inspect(date)}`));\n\t}\n\tif (only && only !== 'prod' && only !== 'production') {\n\t\treturn Promise.reject(colors.red('`only`, when provided, must be \"prod\" or \"production\"'));\n\t}\n\tconst tmpDirP = getProjectTempDir({ npmNeeded, logger });\n\tconst npmRC = path.join(path.dirname(packageFile), '.npmrc');\n\tconst copyPkg = tmpDirP.then((tmpDir) => {\n\t\tlogger(colors.blue(`Creating \\`package.json\\` in temp dir for ${date || '\u201cnow\u201d'} lockfile`));\n\t\treturn Promise.all([\n\t\t\tcopyFile(packageFile, path.join(tmpDir, 'package.json')),\n\t\t\tcopyFile(npmRC, path.join(tmpDir, '.npmrc')).catch((err) => {\n\t\t\t\tif (!err || !(/^ENOENT: no such file or directory/).test(err.message)) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}),\n\t\t]);\n\t});\n\treturn Promise.all([tmpDirP, copyPkg]).then(([tmpDir]) => new Promise((resolve, reject) => {\n\t\tconst PATH = path.join(tmpDir, '../node_modules/.bin');\n\t\tlogger(colors.blue(`Running npm install to create lockfile for ${date || '\u201cnow\u201d'}...`));\n\t\texec(\n\t\t\t`npm install --ignore-scripts --package-lock --package-lock-only${date ? ` --before=${date}` : ''}${only ? ` --only=${only}` : ''}`,\n\t\t\t{\n\t\t\t\tcwd: tmpDir,\n\t\t\t\tenv: {\n\t\t\t\t\tPATH: `${PATH}:${process.env.PATH}`,\n\t\t\t\t\tNODE_ENV: process.env.NODE_ENV,\n\t\t\t\t},\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(tmpDir);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t})).then((tmpDir) => {\n\t\tlogger(colors.blue(`Reading lockfile contents for ${date || '\u201cnow\u201d'}...`));\n\t\tconst lockfile = path.join(tmpDir, 'package-lock.json');\n\t\treturn readFile(lockfile, { encoding: 'utf-8' });\n\t});\n};\n"], "filenames": [".eslintrc", "getLockfile.js"], "buggy_code_start_loc": [9, 24], "buggy_code_end_loc": [9, 24], "fixing_code_start_loc": [10, 25], "fixing_code_end_loc": [11, 28], "type": "CWE-78", "message": "OS Command Injection in GitHub repository ljharb/npm-lockfile in v2.0.3 and v2.0.4.", "other": {"cve": {"id": "CVE-2022-0841", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-03T16:15:07.863", "lastModified": "2022-03-09T21:44:18.777", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OS Command Injection in GitHub repository ljharb/npm-lockfile in v2.0.3 and v2.0.4."}, {"lang": "es", "value": "Inyecci\u00f3n de comandos del sistema operativo en el repositorio de GitHub ljharb/npm-lockfile en las versiones v2.0.3 y v2.0.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:N/UI:R/S:C/C:N/I:L/A:N", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.8, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 10.0}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:npm-lockfile_project:npm-lockfile:2.0.3:*:*:*:*:node.js:*:*", "matchCriteriaId": "F81C86AD-D217-4007-BE77-43366826ACBD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:npm-lockfile_project:npm-lockfile:2.0.4:*:*:*:*:node.js:*:*", "matchCriteriaId": "9DAF0424-6A7C-4853-B316-0BF3CFE247F2"}]}]}], "references": [{"url": "https://github.com/ljharb/npm-lockfile/commit/bfdb84813260f0edbf759f2fde1e8c816c1478b8", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/4f806dc9-2ecd-4e79-997e-5292f1bea9f1", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ljharb/npm-lockfile/commit/bfdb84813260f0edbf759f2fde1e8c816c1478b8"}}