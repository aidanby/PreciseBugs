{"buggy_code": ["/*********************************************************************\n * PicoTCP-NG \n * Copyright (c) 2020 Daniele Lacamera <root@danielinux.net>\n *\n * This file also includes code from:\n * PicoTCP\n * Copyright (c) 2012-2017 Altran Intelligent Systems\n * Authors: Andrei Carp, Simon Maes\n * \n * SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only\n *\n * PicoTCP-NG is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) version 3.\n *\n * PicoTCP-NG is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA\n *\n *\n *********************************************************************/\n#include \"pico_ipv4.h\"\n#include \"pico_config.h\"\n#include \"pico_icmp4.h\"\n#include \"pico_stack.h\"\n#include \"pico_eth.h\"\n#include \"pico_socket.h\"\n#include \"pico_device.h\"\n#include \"pico_ipfilter.h\"\n#include \"pico_tcp.h\"\n#include \"pico_udp.h\"\n#include \"pico_tree.h\"\n\n/**************** LOCAL MACROS ****************/\n#define MAX_PRIORITY    (10)\n#define MIN_PRIORITY    (-10)\n\n#ifdef DEBUG_IPF\n    #define ipf_dbg dbg\n#else\n    #define ipf_dbg(...) do {} while(0)\n#endif\n\n/**************** LOCAL DECLARATIONS ****************/\nstruct filter_node;\n/**************** FILTER TREE ****************/\n\nstruct filter_node {\n    struct pico_device *fdev;\n    /* output address */\n    uint32_t out_addr;\n    uint32_t out_addr_netmask;\n    /* input address */\n    uint32_t in_addr;\n    uint32_t in_addr_netmask;\n    /* transport */\n    uint16_t out_port;\n    uint16_t in_port;\n    /* filter details */\n    uint8_t proto;\n    int8_t priority;\n    uint8_t tos;\n    uint32_t filter_id;\n    int (*function_ptr)(struct filter_node *filter, struct pico_frame *f);\n};\n\n\nstatic inline int ipfilter_uint32_cmp(uint32_t a, uint32_t b)\n{\n    if (a < b)\n        return -1;\n\n    if (b < a)\n        return 1;\n\n    return 0;\n}\n\nstatic inline int ipfilter_uint16_cmp(uint16_t a, uint16_t b)\n{\n    if (a < b)\n        return -1;\n\n    if (b < a)\n        return 1;\n\n    return 0;\n}\n\nstatic inline int ipfilter_uint8_cmp(uint8_t a, uint8_t b)\n{\n    if (a < b)\n        return -1;\n\n    if (b < a)\n        return 1;\n\n    return 0;\n}\n\nstatic inline int ipfilter_ptr_cmp(void *a, void *b)\n{\n    if (a < b)\n        return -1;\n\n    if (b < a)\n        return 1;\n\n    return 0;\n}\n\n\n\nstatic inline int filter_compare_ports(struct filter_node *a, struct filter_node *b)\n{\n    int cmp;\n    cmp = ipfilter_uint16_cmp(a->in_port, b->in_port);\n    if (cmp)\n        return cmp;\n\n    cmp = ipfilter_uint16_cmp(a->out_port, b->out_port);\n    return cmp;\n}\n\nstatic inline int filter_compare_addresses(struct filter_node *a, struct filter_node *b)\n{\n    int cmp;\n    /* Compare source address */\n    cmp = ipfilter_uint32_cmp((a->in_addr & a->in_addr_netmask), (b->in_addr & b->in_addr_netmask));\n    if (cmp)\n        return cmp;\n\n    /* Compare destination address */\n    cmp = ipfilter_uint32_cmp((a->out_addr & a->out_addr_netmask), (b->out_addr & b->out_addr_netmask));\n    return cmp;\n}\n\nstatic inline int filter_compare_proto(struct filter_node *a, struct filter_node *b)\n{\n    return ipfilter_uint8_cmp(a->proto, b->proto);\n}\n\nstatic inline int filter_compare_address_port(struct filter_node *a, struct filter_node *b)\n{\n    int cmp;\n    cmp = filter_compare_addresses(a, b);\n    if (cmp)\n        return cmp;\n\n    return filter_compare_ports(a, b);\n}\n\nstatic inline int filter_match_packet_dev(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    /* 1. Compare devices */\n    if (rule->fdev) {\n        cmp = ipfilter_ptr_cmp(a->fdev, b->fdev);\n        if (cmp)\n            return cmp;\n    }\n\n    return 0;\n\n}\n\nstatic inline int filter_match_packet_proto(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    /* 2. Compare protocol */\n    if (rule->proto) {\n        cmp = filter_compare_proto(a, b);\n        if (cmp)\n            return cmp;\n    }\n\n    return 0;\n\n}\nstatic inline int filter_match_packet_addr_in(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    /* 3. Compare addresses order: in, out */\n    if (rule->in_addr_netmask) {\n        cmp = ipfilter_uint32_cmp(a->in_addr & rule->in_addr_netmask, b->in_addr & rule->in_addr_netmask);\n        if (cmp)\n            return cmp;\n    }\n\n    return 0;\n}\nstatic inline int filter_match_packet_addr_out(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    if (rule->out_addr_netmask) {\n        cmp = ipfilter_uint32_cmp(a->out_addr & rule->out_addr_netmask, b->out_addr & rule->out_addr_netmask);\n        if (cmp) {\n            return cmp;\n        }\n    }\n\n    return 0;\n}\nstatic inline int filter_match_packet_port_in(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    /* 4. Compare ports     order: in, out */\n    if (rule->in_port) {\n        cmp = ipfilter_uint16_cmp(a->in_port, b->in_port);\n        if (cmp)\n            return cmp;\n    }\n\n    return 0;\n}\nstatic inline int filter_match_packet_port_out(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    if (rule->out_port) {\n        cmp = ipfilter_uint16_cmp(a->out_port, b->out_port);\n        if (cmp)\n            return cmp;\n    }\n\n    return 0;\n}\n\nstatic inline int filter_match_packet_dev_and_proto(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp = filter_match_packet_dev(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    return filter_match_packet_proto(a, b, rule);\n}\n\nstatic inline int filter_match_packet_addr(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp = filter_match_packet_addr_in(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    return filter_match_packet_addr_out(a, b, rule);\n\n}\n\nstatic inline int filter_match_packet_port(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp = filter_match_packet_port_in(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    return filter_match_packet_port_out(a, b, rule);\n}\n\nstatic inline struct filter_node *filter_match_packet_find_rule(struct filter_node *a, struct filter_node *b)\n{\n    if (!a->filter_id)\n        return b;\n\n    return a;\n}\n\nstatic inline int filter_match_packet(struct filter_node *a, struct filter_node *b)\n{\n    struct filter_node *rule;\n    int cmp = 0;\n    rule = filter_match_packet_find_rule(a, b);\n\n    cmp = filter_match_packet_dev_and_proto(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    cmp = filter_match_packet_addr(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    cmp = filter_match_packet_port(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    return 0;\n}\n\n\nint filter_compare(void *filterA, void *filterB)\n{\n\n    struct filter_node *a = (struct filter_node *)filterA;\n    struct filter_node *b = (struct filter_node *)filterB;\n    int cmp = 0;\n    if (a->filter_id == 0 || b->filter_id == 0) {\n        return filter_match_packet(a, b);\n    }\n\n    /* improve the search */\n    if(a->filter_id == b->filter_id)\n        return 0;\n\n    /* 1. Compare devices */\n    cmp = ipfilter_ptr_cmp(a->fdev, a->fdev);\n    if (cmp)\n        return cmp;\n\n    /* 2. Compare protocol */\n    cmp = filter_compare_proto(a, b);\n    if(cmp)\n        return cmp;\n\n    /* 3. Compare addresses order: in, out */\n    /* 4. Compare ports     order: in, out */\n    cmp = filter_compare_address_port(a, b);\n\n    return cmp;\n}\n\n/**************** FILTER CALLBACKS ****************/\n\nstatic int fp_priority(struct filter_node *filter, struct pico_frame *f)\n{\n    /* TODO do priority-stuff */\n    IGNORE_PARAMETER(filter);\n    IGNORE_PARAMETER(f);\n    return 0;\n}\n\nstatic int fp_reject(struct filter_node *filter, struct pico_frame *f)\n{\n/* TODO check first if sender is pico itself or not */\n    IGNORE_PARAMETER(filter);\n    ipf_dbg(\"ipfilter> reject\\n\");\n    (void)pico_icmp4_packet_filtered(f->dev->stack, f);\n    pico_frame_discard(f);\n    return 1;\n}\n\nstatic int fp_drop(struct filter_node *filter, struct pico_frame *f)\n{\n    IGNORE_PARAMETER(filter);\n    ipf_dbg(\"ipfilter> drop\\n\");\n    pico_frame_discard(f);\n    return 1;\n}\n\nstruct fp_function {\n    int (*fn)(struct filter_node *filter, struct pico_frame *f);\n};\n\n\nstatic const struct fp_function fp_function[FILTER_COUNT] =\n{\n    {&fp_priority},\n    {&fp_reject},\n    {&fp_drop}\n};\n\nstatic int pico_ipv4_filter_add_validate(int8_t priority, enum filter_action action)\n{\n    if ( priority > MAX_PRIORITY || priority < MIN_PRIORITY) {\n        return -1;\n    }\n\n    if (action >= FILTER_COUNT) {\n        return -1;\n    }\n\n    return 0;\n}\n\n\n/**************** FILTER API's ****************/\nuint32_t pico_ipv4_filter_add(struct pico_device *dev, uint8_t proto,\n                              struct pico_ip4 *out_addr, struct pico_ip4 *out_addr_netmask,\n                              struct pico_ip4 *in_addr, struct pico_ip4 *in_addr_netmask,\n                              uint16_t out_port, uint16_t in_port, int8_t priority,\n                              uint8_t tos, enum filter_action action)\n{\n    static uint32_t filter_id = 1u; /* 0 is a special value used in the binary-tree search for packets being processed */\n    struct filter_node *new_filter;\n\n    if (pico_ipv4_filter_add_validate(priority, action) < 0) {\n        pico_err = PICO_ERR_EINVAL;\n        return 0;\n    }\n\n    new_filter = PICO_ZALLOC(sizeof(struct filter_node));\n    if (!new_filter) {\n        pico_err = PICO_ERR_ENOMEM;\n        return 0;\n    }\n\n    new_filter->fdev = dev;\n    new_filter->proto = proto;\n    new_filter->out_addr = (!out_addr) ? (0U) : (out_addr->addr);\n    new_filter->out_addr_netmask = (!out_addr_netmask) ? (0U) : (out_addr_netmask->addr);\n    new_filter->in_addr = (!in_addr) ? (0U) : (in_addr->addr);\n    new_filter->in_addr_netmask = (!in_addr_netmask) ? (0U) : (in_addr_netmask->addr);\n    new_filter->out_port = out_port;\n    new_filter->in_port = in_port;\n    new_filter->priority = priority;\n    new_filter->tos = tos;\n    new_filter->filter_id = filter_id++;\n    new_filter->function_ptr = fp_function[action].fn;\n\n    if(pico_tree_insert(&dev->stack->ipfilter_tree, new_filter))\n    {\n        PICO_FREE(new_filter);\n        filter_id--;\n        return 0;\n    }\n\n    return new_filter->filter_id;\n}\n\nint pico_ipv4_filter_del(struct pico_stack *S, uint32_t filter_id)\n{\n    struct filter_node *node = NULL;\n    struct filter_node dummy = {\n        0\n    };\n\n    dummy.filter_id = filter_id;\n    if((node = pico_tree_delete(&S->ipfilter_tree, &dummy)) == NULL)\n    {\n        ipf_dbg(\"ipfilter> failed to delete filter :%d\\n\", filter_id);\n        return -1;\n    }\n\n    PICO_FREE(node);\n    return 0;\n}\n\nstatic int ipfilter_apply_filter(struct pico_frame *f, struct filter_node *pkt)\n{\n    struct filter_node *filter_frame = NULL;\n    filter_frame = pico_tree_findKey(&f->dev->stack->ipfilter_tree, pkt);\n    if(filter_frame)\n    {\n        filter_frame->function_ptr(filter_frame, f);\n        return 1;\n    }\n\n    return 0;\n}\n\nint ipfilter(struct pico_frame *f)\n{\n    struct filter_node temp;\n    struct pico_ipv4_hdr *ipv4_hdr = (struct pico_ipv4_hdr *) f->net_hdr;\n    struct pico_trans *trans;\n    struct pico_icmp4_hdr *icmp_hdr;\n\n    memset(&temp, 0u, sizeof(struct filter_node));\n\n    temp.fdev = f->dev;\n    temp.out_addr = ipv4_hdr->dst.addr;\n    temp.in_addr = ipv4_hdr->src.addr;\n    if ((ipv4_hdr->proto == PICO_PROTO_TCP) || (ipv4_hdr->proto == PICO_PROTO_UDP)) {\n        trans = (struct pico_trans *) f->transport_hdr;\n        temp.out_port = short_be(trans->dport);\n        temp.in_port = short_be(trans->sport);\n    }\n    else if(ipv4_hdr->proto == PICO_PROTO_ICMP4) {\n        icmp_hdr = (struct pico_icmp4_hdr *) f->transport_hdr;\n        if(icmp_hdr->type == PICO_ICMP_UNREACH && icmp_hdr->code == PICO_ICMP_UNREACH_FILTER_PROHIB)\n            return 0;\n    }\n\n    temp.proto = ipv4_hdr->proto;\n    temp.priority = f->priority;\n    temp.tos = ipv4_hdr->tos;\n    return ipfilter_apply_filter(f, &temp);\n}\n\n"], "fixing_code": ["/*********************************************************************\n * PicoTCP-NG \n * Copyright (c) 2020 Daniele Lacamera <root@danielinux.net>\n *\n * This file also includes code from:\n * PicoTCP\n * Copyright (c) 2012-2017 Altran Intelligent Systems\n * Authors: Andrei Carp, Simon Maes\n * \n * SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only\n *\n * PicoTCP-NG is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) version 3.\n *\n * PicoTCP-NG is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA\n *\n *\n *********************************************************************/\n#include \"pico_ipv4.h\"\n#include \"pico_config.h\"\n#include \"pico_icmp4.h\"\n#include \"pico_stack.h\"\n#include \"pico_eth.h\"\n#include \"pico_socket.h\"\n#include \"pico_device.h\"\n#include \"pico_ipfilter.h\"\n#include \"pico_tcp.h\"\n#include \"pico_udp.h\"\n#include \"pico_tree.h\"\n\n/**************** LOCAL MACROS ****************/\n#define MAX_PRIORITY    (10)\n#define MIN_PRIORITY    (-10)\n\n#ifdef DEBUG_IPF\n    #define ipf_dbg dbg\n#else\n    #define ipf_dbg(...) do {} while(0)\n#endif\n\n/**************** LOCAL DECLARATIONS ****************/\nstruct filter_node;\n/**************** FILTER TREE ****************/\n\nstruct filter_node {\n    struct pico_device *fdev;\n    /* output address */\n    uint32_t out_addr;\n    uint32_t out_addr_netmask;\n    /* input address */\n    uint32_t in_addr;\n    uint32_t in_addr_netmask;\n    /* transport */\n    uint16_t out_port;\n    uint16_t in_port;\n    /* filter details */\n    uint8_t proto;\n    int8_t priority;\n    uint8_t tos;\n    uint32_t filter_id;\n    int (*function_ptr)(struct filter_node *filter, struct pico_frame *f);\n};\n\n\nstatic inline int ipfilter_uint32_cmp(uint32_t a, uint32_t b)\n{\n    if (a < b)\n        return -1;\n\n    if (b < a)\n        return 1;\n\n    return 0;\n}\n\nstatic inline int ipfilter_uint16_cmp(uint16_t a, uint16_t b)\n{\n    if (a < b)\n        return -1;\n\n    if (b < a)\n        return 1;\n\n    return 0;\n}\n\nstatic inline int ipfilter_uint8_cmp(uint8_t a, uint8_t b)\n{\n    if (a < b)\n        return -1;\n\n    if (b < a)\n        return 1;\n\n    return 0;\n}\n\nstatic inline int ipfilter_ptr_cmp(void *a, void *b)\n{\n    if (a < b)\n        return -1;\n\n    if (b < a)\n        return 1;\n\n    return 0;\n}\n\n\n\nstatic inline int filter_compare_ports(struct filter_node *a, struct filter_node *b)\n{\n    int cmp;\n    cmp = ipfilter_uint16_cmp(a->in_port, b->in_port);\n    if (cmp)\n        return cmp;\n\n    cmp = ipfilter_uint16_cmp(a->out_port, b->out_port);\n    return cmp;\n}\n\nstatic inline int filter_compare_addresses(struct filter_node *a, struct filter_node *b)\n{\n    int cmp;\n    /* Compare source address */\n    cmp = ipfilter_uint32_cmp((a->in_addr & a->in_addr_netmask), (b->in_addr & b->in_addr_netmask));\n    if (cmp)\n        return cmp;\n\n    /* Compare destination address */\n    cmp = ipfilter_uint32_cmp((a->out_addr & a->out_addr_netmask), (b->out_addr & b->out_addr_netmask));\n    return cmp;\n}\n\nstatic inline int filter_compare_proto(struct filter_node *a, struct filter_node *b)\n{\n    return ipfilter_uint8_cmp(a->proto, b->proto);\n}\n\nstatic inline int filter_compare_address_port(struct filter_node *a, struct filter_node *b)\n{\n    int cmp;\n    cmp = filter_compare_addresses(a, b);\n    if (cmp)\n        return cmp;\n\n    return filter_compare_ports(a, b);\n}\n\nstatic inline int filter_match_packet_dev(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    /* 1. Compare devices */\n    if (rule->fdev) {\n        cmp = ipfilter_ptr_cmp(a->fdev, b->fdev);\n        if (cmp)\n            return cmp;\n    }\n\n    return 0;\n\n}\n\nstatic inline int filter_match_packet_proto(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    /* 2. Compare protocol */\n    if (rule->proto) {\n        cmp = filter_compare_proto(a, b);\n        if (cmp)\n            return cmp;\n    }\n\n    return 0;\n\n}\nstatic inline int filter_match_packet_addr_in(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    /* 3. Compare addresses order: in, out */\n    if (rule->in_addr_netmask) {\n        cmp = ipfilter_uint32_cmp(a->in_addr & rule->in_addr_netmask, b->in_addr & rule->in_addr_netmask);\n        if (cmp)\n            return cmp;\n    }\n\n    return 0;\n}\nstatic inline int filter_match_packet_addr_out(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    if (rule->out_addr_netmask) {\n        cmp = ipfilter_uint32_cmp(a->out_addr & rule->out_addr_netmask, b->out_addr & rule->out_addr_netmask);\n        if (cmp) {\n            return cmp;\n        }\n    }\n\n    return 0;\n}\nstatic inline int filter_match_packet_port_in(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    /* 4. Compare ports     order: in, out */\n    if (rule->in_port) {\n        cmp = ipfilter_uint16_cmp(a->in_port, b->in_port);\n        if (cmp)\n            return cmp;\n    }\n\n    return 0;\n}\nstatic inline int filter_match_packet_port_out(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp;\n    if (rule->out_port) {\n        cmp = ipfilter_uint16_cmp(a->out_port, b->out_port);\n        if (cmp)\n            return cmp;\n    }\n\n    return 0;\n}\n\nstatic inline int filter_match_packet_dev_and_proto(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp = filter_match_packet_dev(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    return filter_match_packet_proto(a, b, rule);\n}\n\nstatic inline int filter_match_packet_addr(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp = filter_match_packet_addr_in(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    return filter_match_packet_addr_out(a, b, rule);\n\n}\n\nstatic inline int filter_match_packet_port(struct filter_node *a, struct filter_node *b, struct filter_node *rule)\n{\n    int cmp = filter_match_packet_port_in(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    return filter_match_packet_port_out(a, b, rule);\n}\n\nstatic inline struct filter_node *filter_match_packet_find_rule(struct filter_node *a, struct filter_node *b)\n{\n    if (!a->filter_id)\n        return b;\n\n    return a;\n}\n\nstatic inline int filter_match_packet(struct filter_node *a, struct filter_node *b)\n{\n    struct filter_node *rule;\n    int cmp = 0;\n    rule = filter_match_packet_find_rule(a, b);\n\n    cmp = filter_match_packet_dev_and_proto(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    cmp = filter_match_packet_addr(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    cmp = filter_match_packet_port(a, b, rule);\n    if (cmp)\n        return cmp;\n\n    return 0;\n}\n\n\nint filter_compare(void *filterA, void *filterB)\n{\n\n    struct filter_node *a = (struct filter_node *)filterA;\n    struct filter_node *b = (struct filter_node *)filterB;\n    int cmp = 0;\n    if (a->filter_id == 0 || b->filter_id == 0) {\n        return filter_match_packet(a, b);\n    }\n\n    /* improve the search */\n    if(a->filter_id == b->filter_id)\n        return 0;\n\n    /* 1. Compare devices */\n    cmp = ipfilter_ptr_cmp(a->fdev, a->fdev);\n    if (cmp)\n        return cmp;\n\n    /* 2. Compare protocol */\n    cmp = filter_compare_proto(a, b);\n    if(cmp)\n        return cmp;\n\n    /* 3. Compare addresses order: in, out */\n    /* 4. Compare ports     order: in, out */\n    cmp = filter_compare_address_port(a, b);\n\n    return cmp;\n}\n\n/**************** FILTER CALLBACKS ****************/\n\nstatic int fp_priority(struct filter_node *filter, struct pico_frame *f)\n{\n    /* TODO do priority-stuff */\n    IGNORE_PARAMETER(filter);\n    IGNORE_PARAMETER(f);\n    return 0;\n}\n\nstatic int fp_reject(struct filter_node *filter, struct pico_frame *f)\n{\n/* TODO check first if sender is pico itself or not */\n    IGNORE_PARAMETER(filter);\n    ipf_dbg(\"ipfilter> reject\\n\");\n    (void)pico_icmp4_packet_filtered(f->dev->stack, f);\n    pico_frame_discard(f);\n    return 1;\n}\n\nstatic int fp_drop(struct filter_node *filter, struct pico_frame *f)\n{\n    IGNORE_PARAMETER(filter);\n    ipf_dbg(\"ipfilter> drop\\n\");\n    pico_frame_discard(f);\n    return 1;\n}\n\nstruct fp_function {\n    int (*fn)(struct filter_node *filter, struct pico_frame *f);\n};\n\n\nstatic const struct fp_function fp_function[FILTER_COUNT] =\n{\n    {&fp_priority},\n    {&fp_reject},\n    {&fp_drop}\n};\n\nstatic int pico_ipv4_filter_add_validate(int8_t priority, enum filter_action action)\n{\n    if ( priority > MAX_PRIORITY || priority < MIN_PRIORITY) {\n        return -1;\n    }\n\n    if (action >= FILTER_COUNT) {\n        return -1;\n    }\n\n    return 0;\n}\n\n\n/**************** FILTER API's ****************/\nuint32_t pico_ipv4_filter_add(struct pico_device *dev, uint8_t proto,\n                              struct pico_ip4 *out_addr, struct pico_ip4 *out_addr_netmask,\n                              struct pico_ip4 *in_addr, struct pico_ip4 *in_addr_netmask,\n                              uint16_t out_port, uint16_t in_port, int8_t priority,\n                              uint8_t tos, enum filter_action action)\n{\n    static uint32_t filter_id = 1u; /* 0 is a special value used in the binary-tree search for packets being processed */\n    struct filter_node *new_filter;\n\n    if (pico_ipv4_filter_add_validate(priority, action) < 0) {\n        pico_err = PICO_ERR_EINVAL;\n        return 0;\n    }\n\n    new_filter = PICO_ZALLOC(sizeof(struct filter_node));\n    if (!new_filter) {\n        pico_err = PICO_ERR_ENOMEM;\n        return 0;\n    }\n\n    new_filter->fdev = dev;\n    new_filter->proto = proto;\n    new_filter->out_addr = (!out_addr) ? (0U) : (out_addr->addr);\n    new_filter->out_addr_netmask = (!out_addr_netmask) ? (0U) : (out_addr_netmask->addr);\n    new_filter->in_addr = (!in_addr) ? (0U) : (in_addr->addr);\n    new_filter->in_addr_netmask = (!in_addr_netmask) ? (0U) : (in_addr_netmask->addr);\n    new_filter->out_port = out_port;\n    new_filter->in_port = in_port;\n    new_filter->priority = priority;\n    new_filter->tos = tos;\n    new_filter->filter_id = filter_id++;\n    new_filter->function_ptr = fp_function[action].fn;\n\n    if(pico_tree_insert(&dev->stack->ipfilter_tree, new_filter))\n    {\n        PICO_FREE(new_filter);\n        filter_id--;\n        return 0;\n    }\n\n    return new_filter->filter_id;\n}\n\nint pico_ipv4_filter_del(struct pico_stack *S, uint32_t filter_id)\n{\n    struct filter_node *node = NULL;\n    struct filter_node dummy = {\n        0\n    };\n\n    dummy.filter_id = filter_id;\n    if((node = pico_tree_delete(&S->ipfilter_tree, &dummy)) == NULL)\n    {\n        ipf_dbg(\"ipfilter> failed to delete filter :%d\\n\", filter_id);\n        return -1;\n    }\n\n    PICO_FREE(node);\n    return 0;\n}\n\nstatic int ipfilter_apply_filter(struct pico_frame *f, struct filter_node *pkt)\n{\n    struct filter_node *filter_frame = NULL;\n    filter_frame = pico_tree_findKey(&f->dev->stack->ipfilter_tree, pkt);\n    if(filter_frame)\n    {\n        filter_frame->function_ptr(filter_frame, f);\n        return 1;\n    }\n\n    return 0;\n}\n\nint ipfilter(struct pico_frame *f)\n{\n    struct filter_node temp;\n    struct pico_ipv4_hdr *ipv4_hdr = (struct pico_ipv4_hdr *) f->net_hdr;\n    struct pico_trans *trans;\n    struct pico_icmp4_hdr *icmp_hdr;\n\n    memset(&temp, 0u, sizeof(struct filter_node));\n\n    temp.fdev = f->dev;\n    temp.out_addr = ipv4_hdr->dst.addr;\n    temp.in_addr = ipv4_hdr->src.addr;\n    if ((f->transport_hdr + sizeof(struct pico_trans)) <= (f->buffer + f->buffer_len)) {\n        if ((ipv4_hdr->proto == PICO_PROTO_TCP) || (ipv4_hdr->proto == PICO_PROTO_UDP)) {\n                trans = (struct pico_trans *) f->transport_hdr;\n                temp.out_port = short_be(trans->dport);\n                temp.in_port = short_be(trans->sport);\n        } else if(ipv4_hdr->proto == PICO_PROTO_ICMP4) {\n            icmp_hdr = (struct pico_icmp4_hdr *) f->transport_hdr;\n            if(icmp_hdr->type == PICO_ICMP_UNREACH && icmp_hdr->code == PICO_ICMP_UNREACH_FILTER_PROHIB)\n                return 0;\n        }\n        temp.proto = ipv4_hdr->proto;\n    }\n    temp.priority = f->priority;\n    temp.tos = ipv4_hdr->tos;\n    return ipfilter_apply_filter(f, &temp);\n}\n\n"], "filenames": ["modules/pico_ipfilter.c"], "buggy_code_start_loc": [464], "buggy_code_end_loc": [476], "fixing_code_start_loc": [464], "fixing_code_end_loc": [476], "type": "NVD-CWE-noinfo", "message": "VirtualSquare picoTCP (aka PicoTCP-NG) through 2.1 does not check the transport layer length in a frame before performing port filtering.", "other": {"cve": {"id": "CVE-2023-35846", "sourceIdentifier": "cve@mitre.org", "published": "2023-06-19T03:15:09.227", "lastModified": "2023-06-26T18:11:34.860", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "VirtualSquare picoTCP (aka PicoTCP-NG) through 2.1 does not check the transport layer length in a frame before performing port filtering."}, {"lang": "es", "value": "VirtualSquare picoTCP (tambi\u00e9n conocido como PicoTCP-NG) a trav\u00e9s de la versi\u00f3n 2.1 no comprueba la longitud de la capa de transporte en una trama antes de realizar el filtrado de puertos. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:virtualsquare:picotcp:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.1", "matchCriteriaId": "FF1314A4-D96F-47BB-885E-FA90BFF16E74"}]}]}], "references": [{"url": "https://github.com/virtualsquare/picotcp/commit/d561990a358899178115e156871cc054a1c55ffe", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/virtualsquare/picotcp/commit/d561990a358899178115e156871cc054a1c55ffe"}}