{"buggy_code": ["/**\n * Creates an instance of Admin.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class contains utility methods used by the admin\n * application.\n */\n\n/* global $ gettext Listing */\n\nvar Admin = function(options) {\n    Listing.call(this, options);\n};\n\nAdmin.prototype = {\n    defaults: {\n        deflocation: \"list/\",\n        squery: null\n    },\n\n    initialize: function(options) {\n        this.options = $.extend({}, this.defaults, options);\n        this.options.defcallback = $.proxy(this.list_cb, this);\n        Listing.prototype.initialize.call(this, this.options);\n        this.listen();\n    },\n\n    /**\n     * Callback used when the initial content of the listing is\n     * received.\n     *\n     * @this Admin\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if (data.rows) {\n            $(\"#objects_table tbody\").html(data.rows);\n        } else {\n            $(\"#objects_table tbody\").html(\"\");\n        }\n        this.update_listing(data);\n        if (data.length === 0) {\n            this.get_load_page_args();\n            this.end_of_list_reached();\n        }\n    },\n\n    /**\n     * Children must override this method.\n     */\n    listen: function() {\n    },\n\n    /**\n     * Load a new page using an AJAX request.\n     *\n     * @this Admin\n     * @param {Object} e - event object\n     */\n    page_loader: function(e) {\n        var $link = get_target(e);\n        e.preventDefault();\n        if ($link.hasClass(\"navigation\")) {\n            $(\".sidebar li.active\").removeClass(\"active\");\n            $link.parent().addClass(\"active\");\n        }\n        this.navobj.baseurl($link.attr(\"href\")).update();\n    },\n\n    importform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            if ($(\"#id_sourcefile\").val() === \"\") {\n                return;\n            }\n            $(\"#import_status\").css(\"display\", \"block\");\n            $(\"#import_result\").html(\"\").removeClass(\"alert alert-danger\");\n            $(\"#importform\").submit();\n        });\n    },\n\n    importdone: function(status, msg) {\n        $(\"#import_status\").css(\"display\", \"none\");\n        if (status === \"ok\") {\n            $(\"#modalbox\").modal('hide');\n            this.reload_listing(msg);\n        } else {\n            $(\"#import_result\").addClass(\"alert alert-danger\");\n            $(\"#import_result\").html(msg);\n            this.importform_cb();\n        }\n    },\n\n    exportform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            $(\"#exportform\").submit();\n            $(\"#modalbox\").modal('hide');\n        });\n    },\n\n    reload_listing: function(data) {\n        this.navobj.update(true);\n        if (data) {\n            $(\"body\").notify(\"success\", data, 2000);\n        }\n    }\n};\n\nAdmin.prototype = $.extend({}, Listing.prototype, Admin.prototype);\n\n/**\n * Creates an instance of Domains.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to domains management.\n */\nvar Domains = function(options) {\n    Admin.call(this, options);\n};\n\nDomains.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"domfilter\", \"srvfilter\");\n        this.options.eor_message = gettext(\"No more domain to show\");\n        this.register_tag_handler(\"dom\");\n        this.register_tag_handler(\"srv\", this.srv_tag_handler);\n    },\n\n    /**\n     * Custom callbacks declaration.\n     */\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n    },\n\n    /**\n     * Initialize the domain links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_domain_links: function(data) {\n        var deloptions = (data.handle_mailboxes) ?\n            {keepdir: gettext(\"Do not delete domain directory\")} : {};\n        var warnmsg = (data.auto_account_removal && data.auto_account_removal === \"yes\")\n            ? gettext(\"This operation will remove ALL data associated to this domain.\")\n            : gettext(\"This operation will remove all data associated to this domain, excepting accounts.\");\n\n        $(\"a[name=deldomain]\").confirm({\n            question: function() { return htmlEncode(this.$element.attr('title')); },\n            method: \"POST\",\n            warning: warnmsg,\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domain_listing_refresh');\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"domain\";\n            this.options.eor_message = gettext(\"No more domain to show\");\n        } else if (this.navobj.getbaseurl() === \"quota\") {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        } else {\n            args.objtype = \"log\";\n            this.options.eor_message = gettext(\"No more log to show\");\n        }\n        return args;\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"domains\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_domain_links(data);\n    },\n\n    srv_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined && $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"domfilter\", \"relaydomain\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=dom]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"relaydomain\", \"dom\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_domain_links(data);\n    },\n\n    change_inputs_state: function(value) {\n        $(\"#id_dom_admin_username\").attr(\"disabled\", value);\n        $(\"input[name=with_mailbox]\").attr(\"disabled\", value);\n        $(\"input[name=create_aliases]\").attr(\"disabled\", value);\n    },\n\n    create_dom_admin_changed: function(e) {\n        var $target = $(e.target);\n        this.change_inputs_state(($target.val() === \"True\") ? false : true);\n    },\n\n    withMailboxChanged: function(e) {\n        var $target = $(e.target);\n        $(\"input[name=create_aliases]\").attr(\n            \"disabled\", $target.val() === \"False\");\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    toggleDKIMFields: function (value) {\n        if (value) {\n            $('#id_dkim_key_selector').parents(\".form-group\").show();\n            $('#id_dkim_key_length').parents(\".form-group\").show();\n        } else {\n            $('#id_dkim_key_selector').parents(\".form-group\").hide();\n            $('#id_dkim_key_length').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Initialize the main form contained in the domain edition modal.\n     *\n     * @this Domains\n     */\n    generalform_init: function() {\n        $('input:text:visible:first').focus();\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $('#id_enable_dkim').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.toggleDKIMFields($this.prop('checked'));\n        }, this));\n        this.toggleDKIMFields($('#id_enable_dkim').prop('checked'));\n    },\n\n    optionsform_init: function() {\n        $(\"input[name=create_dom_admin]\").click(\n            $.proxy(this.create_dom_admin_changed, this));\n        $(\"input[name=with_mailbox]\").click(\n            $.proxy(this.withMailboxChanged, this));\n        this.change_inputs_state(\n            $(\"input[name=create_dom_admin]:checked\").val() === \"True\" ? false : true\n        );\n        this.optionsform_prefill();\n    },\n\n    optionsform_prefill: function() {\n        var $span = $(\"#id_dom_admin_username\").next(\"span\");\n        $span.html(\"@\" + htmlEncode($(\"#id_name\").val()));\n    },\n\n    domadminsform_init: function() {\n        $(\"a[name=removeperm]\").click(function(e) {\n            var $tr = $(this).parents('tr');\n            simple_ajax_request.apply(this, [e, {\n                ok_cb: function(resp) {\n                    $tr.remove();\n                    if (!$(\"#domadmins\").find(\"tr\").length) {\n                        $(\"#admins\").html('<div class=\"alert alert-info\">'\n                            + gettext(\"No domain administrator defined\") + \"</div>\");\n                    }\n                }\n            }]);\n        });\n    },\n\n    newdomain_cb: function() {\n        this.generalform_init();\n        this.optionsform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"domform\",\n            transition_callbacks: {\n                \"options\": this.optionsform_prefill\n            },\n            error_callbacks: {\n                \"options\": $.proxy(this.optionsform_init, this)\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domwizard_init');\n    },\n\n    domainform_cb: function() {\n        this.generalform_init();\n        this.domadminsform_init();\n        $(\".submit\").one('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"domform\",\n                error_cb: $.proxy(this.domainform_cb, this),\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n        $(document).trigger('domform_init');\n    }\n};\n\nDomains.prototype = $.extend({}, Admin.prototype, Domains.prototype);\n\n/**\n * Creates an instance of Identities.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to identities management.\n */\nvar Identities = function(options) {\n    Admin.call(this, options);\n};\n\nIdentities.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"idtfilter\", \"grpfilter\");\n        this.options.eor_message = gettext(\"No more identity to show\");\n        this.domain_list = [];\n        this.register_tag_handler(\"idt\");\n        this.register_tag_handler(\"grp\", this.grp_tag_handler);\n    },\n\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n        $(document).on(\"click\", \"a.ajaxcall\", $.proxy(this.send_call, this));\n    },\n\n    /**\n     * Send an ajax call.\n     */\n    send_call: function(evt) {\n        var $link = get_target(evt, \"a\");\n        var $this = this;\n        var method = $link.attr(\"data-call_method\");\n\n        if (method === undefined) {\n            method = \"GET\";\n        }\n        evt.preventDefault();\n        $.ajax({\n            url: $link.attr(\"href\"),\n            type: method,\n            dataType: \"json\"\n        }).done(function(data) {\n            $this.reload_listing(data.respmsg);\n        });\n    },\n\n    /**\n     * Initialize the links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_identity_links: function(data) {\n        var deloptions = {};\n\n        if (data.handle_mailboxes) {\n            deloptions = {keepdir: gettext(\"Do not delete mailbox directory\")};\n        }\n\n        $(\"a[name=delaccount]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"POST\",\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(\"a[name=delalias]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"DELETE\",\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"identity\";\n            this.options.eor_message = gettext(\"No more identity to show\");\n        } else {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        }\n        return args;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_identity_links(data);\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"identities\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_identity_links(data);\n    },\n\n    grp_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined &&\n            $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"idtfilter\", \"account\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=idt]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"account\", \"idt\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Retrieve a list of domain from the server.\n     *\n     * @this Identities\n     * @return {Array} a list of domain names\n     */\n    get_domain_list: function() {\n        if (!this.domain_list.length) {\n            $.ajax({\n                url: this.options.domain_list_url,\n                dataType: \"json\",\n                async: false\n            }).done($.proxy(function(data) {\n                this.domain_list = data;\n            }, this));\n        }\n        return this.domain_list;\n    },\n\n    simpleuser_mode: function() {\n        var $username = $('#id_username');\n        var $email = $('#id_email');\n\n        $username.change(function (evt) {\n            $email.val($(this).val());\n            $email.change();\n        });\n        $username.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#id_email\").addClass(\"disabled\")\n            .attr(\"readonly\", \"\")\n            .autocompleter(\"unbind\");\n        this.toggle_master_user();\n    },\n\n    normal_mode: function(group) {\n        $(\"#id_email\").removeClass(\"disabled\")\n            .attr(\"readonly\", null)\n            .autocompleter(\"listen\");\n        this.toggle_master_user(group);\n    },\n\n    /**\n     * Hide or show the master user checkbox according to desired role.\n     *\n     * @param {string} group - The desired role (or group)\n     */\n    toggle_master_user: function(group) {\n        var $target = $(\"#id_master_user\").parents(\".form-group\");\n        if (group !== \"SuperAdmins\") {\n            $target.hide();\n        } else {\n            $target.show();\n        }\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    togglePasswordInputs: function(value) {\n        if (value) {\n            $('#id_password1').parents(\".form-group\").show();\n            $('#id_password2').parents(\".form-group\").show();\n        } else {\n            $('#id_password1').parents(\".form-group\").hide();\n            $('#id_password2').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Callback to watch for username change.\n     *\n     */\n    emailChanged: function(event) {\n        var $target = get_target(event);\n        var $username = $('#id_username');\n\n        if ($target.val() !== this.originalEmail) {\n            $('#id_create_alias_with_old_address').parents(\".form-group\").show();\n        }\n        if ($username.val() !== $target.val()) {\n            $username.val($target.val());\n        }\n    },\n\n    generalform_init: function(notrigger) {\n        var $role = $('#id_role');\n\n        $role.change($.proxy(function(e) {\n            var $this = $(e.target);\n            var value = $this.val();\n            var email = $('#id_email').val();\n\n            if (value === 'SimpleUsers' || email !== '') {\n                this.simpleuser_mode();\n            } else {\n                this.normal_mode(value);\n            }\n        }, this));\n        $('#id_random_password').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.togglePasswordInputs(!$this.prop('checked'));\n        }, this));\n        this.toggle_master_user($role.val());\n        $('#id_create_alias_with_old_address').parents('.form-group').hide();\n        if (notrigger !== undefined && notrigger) {\n            return;\n        }\n        $role.trigger(\"change\");\n    },\n\n    mailform_init: function() {\n        var $email = $('#id_email');\n\n        this.originalEmail = $email.val();\n        $email.change($.proxy(this.emailChanged, this));\n        $(\"#id_aliases\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#original_senderaddress\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $email.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        if ($(\"#id_role\").length) {\n            $(\"#id_role\").trigger(\"change\");\n        } else {\n            this.simpleuser_mode();\n        }\n        $(\"#id_domains\").autocompleter({\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_domains\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        activate_widget.call($(\"#id_quota_act\"));\n    },\n\n    accountform_init: function() {\n        this.generalform_init(true);\n        this.mailform_init();\n    },\n\n    mailform_prefill: function() {\n        var $role = $(\"#id_role\");\n        if (!$role.length || $role.val() === \"\" || $role.val() === \"SimpleUsers\") {\n            $(\"#id_email\").val($(\"#id_username\").val());\n        }\n    },\n\n    newaccount_cb: function() {\n        this.accountform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"newaccount_form\",\n            transition_callbacks: {\n                mail: this.mailform_prefill\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    editaccount_cb: function() {\n        this.accountform_init();\n        $('.submit').on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"accountform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    },\n\n    aliasform_cb: function() {\n        $(\"#id_random_address\").click(function(evt) {\n            if ($(this).prop(\"checked\")) {\n                $(\"#id_address\").parents(\".form-group\").hide();\n                $(\"#id_domain\").parents(\".form-group\").show();\n            } else {\n                $(\"#id_address\").parents(\".form-group\").show();\n                $(\"#id_domain\").parents(\".form-group\").hide();\n            }\n        });\n        $(\"#id_address\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_recipients\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#id_expire_at\").datetimepicker({\n            format: 'YYYY-MM-DD HH:mm:ss'\n        });\n        $(\".submit\").on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"aliasform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    }\n\n};\n\nIdentities.prototype = $.extend({}, Admin.prototype, Identities.prototype);\n", "{% load core_tags %}\n\n{% for l in logs %}\n<tr>\n  <td>{{ l.date_created|date:\"SHORT_DATETIME_FORMAT\" }}</td>\n  <td>{{ l.level|colorize_level|safe }}</td>\n  <td>{{ l.logger }}</td>\n  <td>{{ l.message|tohtml|safe }}</td>\n</tr>\n{% endfor %}\n", "(function($) {\n    \"use strict\";\n\n    var Autocompleter = function(element, options) {\n        this.initialize(element, options);\n    };\n\n    Autocompleter.prototype = {\n        constructor: Autocompleter,\n\n        initialize: function(element, options) {\n            this.$element = $(element);\n            this.options = $.extend({}, $.fn.autocompleter.defaults, options);\n            if (typeof this.options.choices === \"function\") {\n                this.choices = this.options.choices();\n            } else {\n                this.choices = this.options.choices;\n            }\n            this.$menu =\n                $('<ul class=\"dropdown-menu autocompleter\" data-toggle=\"dropdown\" />');\n            $(\"body\").append(this.$menu);\n            this.$menu.on(\"click\", $.proxy(this.select_entry, this));\n\n            this.$element.attr(\"autocomplete\", \"off\");\n            this.listen();\n        },\n\n        listen: function() {\n            this.$element.keydown($.proxy(this.keydown, this));\n            this.$element.keyup($.proxy(this.keyup, this));\n            this.$element.blur($.proxy(this.hide_menu, this));\n        },\n\n        unbind: function() {\n            this.$element.off(\"keydown keyup blur\");\n        },\n\n        check_user_input: function() {\n            var value = this.$element.val();\n            var start = -1;\n            var pattern = null;\n\n            if (this.options.from_character) {\n                start = value.indexOf(this.options.from_character);\n                if (start == -1) {\n                    return;\n                }\n                pattern = value.substr(start + 1);\n            } else {\n                pattern = value;\n            }\n\n            var exp = new RegExp(\"^\" + pattern);\n\n            this.$menu.empty();\n            $.each(this.choices, $.proxy(function(index, value) {\n                if (exp.test(value)) {\n                    this.$menu.append(\n                        $('<li><a href=\"#\" name=\"' + value + '\">' + value + '</a></li>')\n                    );\n                }\n            }, this));\n\n            var coords = this.$element.offset();\n\n            this.$menu.css({\n                position: \"absolute\",\n                top: coords.top + this.$element.outerHeight(),\n                left: coords.left,\n                width: this.$element.outerWidth(),\n                'z-index': 1051\n            });\n            if (this.$menu.children().length) {\n                this.$menu.children().first().addClass(\"active\");\n                this.$menu.show();\n            } else {\n                this.$menu.hide();\n            }\n        },\n\n        hide_menu: function() {\n            setTimeout($.proxy(function() { this.$menu.hide(); }, this), 150);\n        },\n\n        select_entry: function(evt) {\n            if (this.$menu.is(\":visible\")) {\n                var $link;\n                if (evt !== undefined) {\n                    evt.preventDefault();\n                    $link = $(evt.target);\n                } else {\n                    $link = this.$menu.find('.active > a');\n                }\n                var curvalue = this.$element.val();\n\n                if (curvalue === undefined || curvalue === \"\") {\n                    if (this.options.empty_choice) {\n                        this.options.empty_choice();\n                    }\n                    return;\n                }\n                if ($link.length) {\n                    this.$element.val(curvalue.substr(\n                        0, curvalue.indexOf(this.options.from_character) + 1\n                    ) + $link.attr(\"name\"));\n                    this.$element.change();\n                }\n                this.hide_menu();\n            }\n            if (this.options.choice_selected) {\n                this.options.choice_selected(this.$element.val());\n            }\n        },\n\n        activate_next: function() {\n            var active = this.$menu.find('.active').removeClass('active'),\n                next = active.next();\n\n            if (!next.length) {\n                next = $(this.$menu.find('li').first());\n            }\n            next.addClass('active');\n        },\n\n        activate_prev: function() {\n            var active = this.$menu.find('.active').removeClass('active'),\n                prev = active.prev();\n\n            if (!prev.length) {\n                prev = this.$menu.find('li').last();\n            }\n\n            prev.addClass('active');\n        },\n\n        keydown: function(evt) {\n            evt.stopPropagation();\n\n            switch (evt.which) {\n                case 13:\n                case 27:\n                    evt.preventDefault();\n                    break;\n                case 38:\n                    evt.preventDefault();\n                    this.activate_prev();\n                    break;\n                case 40:\n                    evt.preventDefault();\n                    this.activate_next();\n                    break;\n            }\n        },\n\n        keyup: function(evt) {\n            evt.stopPropagation();\n            evt.preventDefault();\n\n            switch (evt.which) {\n            case 40:\n            case 38:\n                break;\n\n            case 13:\n                this.select_entry();\n                break;\n\n            case 27:\n                this.hide_menu();\n                break;\n\n            default:\n                this.check_user_input();\n            }\n        }\n    };\n\n    $.fn.autocompleter = function(option) {\n        return this.each(function() {\n            var $this = $(this),\n                data = $this.data('autocompleter'),\n                options = typeof option === \"object\" && option;\n\n            if (!data) {\n                $this.data('autocompleter', new Autocompleter(this, options));\n            }\n            if (typeof option === \"string\") {\n                data[option]();\n            }\n        });\n    };\n\n    $.fn.autocompleter.defaults = {\n        'choice_selected' : null,\n        'empty_choice' : null\n    };\n\n})(jQuery);\n"], "fixing_code": ["/**\n * Creates an instance of Admin.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class contains utility methods used by the admin\n * application.\n */\n\n/* global $ gettext Listing */\n\nvar Admin = function(options) {\n    Listing.call(this, options);\n};\n\nAdmin.prototype = {\n    defaults: {\n        deflocation: \"list/\",\n        squery: null\n    },\n\n    initialize: function(options) {\n        this.options = $.extend({}, this.defaults, options);\n        this.options.defcallback = $.proxy(this.list_cb, this);\n        Listing.prototype.initialize.call(this, this.options);\n        this.listen();\n    },\n\n    /**\n     * Callback used when the initial content of the listing is\n     * received.\n     *\n     * @this Admin\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if (data.rows) {\n            $(\"#objects_table tbody\").html(data.rows);\n        } else {\n            $(\"#objects_table tbody\").html(\"\");\n        }\n        this.update_listing(data);\n        if (data.length === 0) {\n            this.get_load_page_args();\n            this.end_of_list_reached();\n        }\n    },\n\n    /**\n     * Children must override this method.\n     */\n    listen: function() {\n    },\n\n    /**\n     * Load a new page using an AJAX request.\n     *\n     * @this Admin\n     * @param {Object} e - event object\n     */\n    page_loader: function(e) {\n        var $link = get_target(e);\n        e.preventDefault();\n        if ($link.hasClass(\"navigation\")) {\n            $(\".sidebar li.active\").removeClass(\"active\");\n            $link.parent().addClass(\"active\");\n        }\n        this.navobj.baseurl($link.attr(\"href\")).update();\n    },\n\n    importform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            if ($(\"#id_sourcefile\").val() === \"\") {\n                return;\n            }\n            $(\"#import_status\").css(\"display\", \"block\");\n            $(\"#import_result\").html(\"\").removeClass(\"alert alert-danger\");\n            $(\"#importform\").submit();\n        });\n    },\n\n    importdone: function(status, msg) {\n        $(\"#import_status\").css(\"display\", \"none\");\n        if (status === \"ok\") {\n            $(\"#modalbox\").modal('hide');\n            this.reload_listing(msg);\n        } else {\n            $(\"#import_result\").addClass(\"alert alert-danger\");\n            $(\"#import_result\").html(msg);\n            this.importform_cb();\n        }\n    },\n\n    exportform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            $(\"#exportform\").submit();\n            $(\"#modalbox\").modal('hide');\n        });\n    },\n\n    reload_listing: function(data) {\n        this.navobj.update(true);\n        if (data) {\n            $(\"body\").notify(\"success\", data, 2000);\n        }\n    }\n};\n\nAdmin.prototype = $.extend({}, Listing.prototype, Admin.prototype);\n\n/**\n * Creates an instance of Domains.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to domains management.\n */\nvar Domains = function(options) {\n    Admin.call(this, options);\n};\n\nDomains.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"domfilter\", \"srvfilter\");\n        this.options.eor_message = gettext(\"No more domain to show\");\n        this.register_tag_handler(\"dom\");\n        this.register_tag_handler(\"srv\", this.srv_tag_handler);\n    },\n\n    /**\n     * Custom callbacks declaration.\n     */\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n    },\n\n    /**\n     * Initialize the domain links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_domain_links: function(data) {\n        var deloptions = (data.handle_mailboxes) ?\n            {keepdir: gettext(\"Do not delete domain directory\")} : {};\n        var warnmsg = (data.auto_account_removal && data.auto_account_removal === \"yes\")\n            ? gettext(\"This operation will remove ALL data associated to this domain.\")\n            : gettext(\"This operation will remove all data associated to this domain, excepting accounts.\");\n\n        $(\"a[name=deldomain]\").confirm({\n            question: function() { return htmlEncode(this.$element.attr('title')); },\n            method: \"POST\",\n            warning: warnmsg,\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domain_listing_refresh');\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"domain\";\n            this.options.eor_message = gettext(\"No more domain to show\");\n        } else if (this.navobj.getbaseurl() === \"quota\") {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        } else {\n            args.objtype = \"log\";\n            this.options.eor_message = gettext(\"No more log to show\");\n        }\n        return args;\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"domains\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_domain_links(data);\n    },\n\n    srv_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined && $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"domfilter\", \"relaydomain\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=dom]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"relaydomain\", \"dom\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_domain_links(data);\n    },\n\n    change_inputs_state: function(value) {\n        $(\"#id_dom_admin_username\").attr(\"disabled\", value);\n        $(\"input[name=with_mailbox]\").attr(\"disabled\", value);\n        $(\"input[name=create_aliases]\").attr(\"disabled\", value);\n    },\n\n    create_dom_admin_changed: function(e) {\n        var $target = $(e.target);\n        this.change_inputs_state(($target.val() === \"True\") ? false : true);\n    },\n\n    withMailboxChanged: function(e) {\n        var $target = $(e.target);\n        $(\"input[name=create_aliases]\").attr(\n            \"disabled\", $target.val() === \"False\");\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    toggleDKIMFields: function (value) {\n        if (value) {\n            $('#id_dkim_key_selector').parents(\".form-group\").show();\n            $('#id_dkim_key_length').parents(\".form-group\").show();\n        } else {\n            $('#id_dkim_key_selector').parents(\".form-group\").hide();\n            $('#id_dkim_key_length').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Initialize the main form contained in the domain edition modal.\n     *\n     * @this Domains\n     */\n    generalform_init: function() {\n        $('input:text:visible:first').focus();\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $('#id_enable_dkim').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.toggleDKIMFields($this.prop('checked'));\n        }, this));\n        this.toggleDKIMFields($('#id_enable_dkim').prop('checked'));\n    },\n\n    optionsform_init: function() {\n        $(\"input[name=create_dom_admin]\").click(\n            $.proxy(this.create_dom_admin_changed, this));\n        $(\"input[name=with_mailbox]\").click(\n            $.proxy(this.withMailboxChanged, this));\n        this.change_inputs_state(\n            $(\"input[name=create_dom_admin]:checked\").val() === \"True\" ? false : true\n        );\n        this.optionsform_prefill();\n    },\n\n    optionsform_prefill: function() {\n        var $span = $(\"#id_dom_admin_username\").next(\"span\");\n        $span.html(\"@\" + htmlEncode($(\"#id_name\").val()));\n    },\n\n    domadminsform_init: function() {\n        $(\"a[name=removeperm]\").click(function(e) {\n            var $tr = $(this).parents('tr');\n            simple_ajax_request.apply(this, [e, {\n                ok_cb: function(resp) {\n                    $tr.remove();\n                    if (!$(\"#domadmins\").find(\"tr\").length) {\n                        $(\"#admins\").html('<div class=\"alert alert-info\">'\n                            + gettext(\"No domain administrator defined\") + \"</div>\");\n                    }\n                }\n            }]);\n        });\n    },\n\n    newdomain_cb: function() {\n        this.generalform_init();\n        this.optionsform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"domform\",\n            transition_callbacks: {\n                \"options\": this.optionsform_prefill\n            },\n            error_callbacks: {\n                \"options\": $.proxy(this.optionsform_init, this)\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domwizard_init');\n    },\n\n    domainform_cb: function() {\n        this.generalform_init();\n        this.domadminsform_init();\n        $(\".submit\").one('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"domform\",\n                error_cb: $.proxy(this.domainform_cb, this),\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n        $(document).trigger('domform_init');\n    }\n};\n\nDomains.prototype = $.extend({}, Admin.prototype, Domains.prototype);\n\n/**\n * Creates an instance of Identities.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to identities management.\n */\nvar Identities = function(options) {\n    Admin.call(this, options);\n};\n\nIdentities.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"idtfilter\", \"grpfilter\");\n        this.options.eor_message = gettext(\"No more identity to show\");\n        this.domain_list = [];\n        this.register_tag_handler(\"idt\");\n        this.register_tag_handler(\"grp\", this.grp_tag_handler);\n    },\n\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n        $(document).on(\"click\", \"a.ajaxcall\", $.proxy(this.send_call, this));\n    },\n\n    /**\n     * Send an ajax call.\n     */\n    send_call: function(evt) {\n        var $link = get_target(evt, \"a\");\n        var $this = this;\n        var method = $link.attr(\"data-call_method\");\n\n        if (method === undefined) {\n            method = \"GET\";\n        }\n        evt.preventDefault();\n        $.ajax({\n            url: $link.attr(\"href\"),\n            type: method,\n            dataType: \"json\"\n        }).done(function(data) {\n            $this.reload_listing(data.respmsg);\n        });\n    },\n\n    /**\n     * Initialize the links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_identity_links: function(data) {\n        var deloptions = {};\n\n        if (data.handle_mailboxes) {\n            deloptions = {keepdir: gettext(\"Do not delete mailbox directory\")};\n        }\n\n        $(\"a[name=delaccount]\").confirm({\n            question: function() { return htmlEncode(this.$element.attr('title')); },\n            method: \"POST\",\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(\"a[name=delalias]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"DELETE\",\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"identity\";\n            this.options.eor_message = gettext(\"No more identity to show\");\n        } else {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        }\n        return args;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_identity_links(data);\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"identities\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_identity_links(data);\n    },\n\n    grp_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined &&\n            $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"idtfilter\", \"account\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=idt]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"account\", \"idt\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Retrieve a list of domain from the server.\n     *\n     * @this Identities\n     * @return {Array} a list of domain names\n     */\n    get_domain_list: function() {\n        if (!this.domain_list.length) {\n            $.ajax({\n                url: this.options.domain_list_url,\n                dataType: \"json\",\n                async: false\n            }).done($.proxy(function(data) {\n                this.domain_list = data;\n            }, this));\n        }\n        return this.domain_list;\n    },\n\n    simpleuser_mode: function() {\n        var $username = $('#id_username');\n        var $email = $('#id_email');\n\n        $username.change(function (evt) {\n            $email.val($(this).val());\n            $email.change();\n        });\n        $username.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#id_email\").addClass(\"disabled\")\n            .attr(\"readonly\", \"\")\n            .autocompleter(\"unbind\");\n        this.toggle_master_user();\n    },\n\n    normal_mode: function(group) {\n        $(\"#id_email\").removeClass(\"disabled\")\n            .attr(\"readonly\", null)\n            .autocompleter(\"listen\");\n        this.toggle_master_user(group);\n    },\n\n    /**\n     * Hide or show the master user checkbox according to desired role.\n     *\n     * @param {string} group - The desired role (or group)\n     */\n    toggle_master_user: function(group) {\n        var $target = $(\"#id_master_user\").parents(\".form-group\");\n        if (group !== \"SuperAdmins\") {\n            $target.hide();\n        } else {\n            $target.show();\n        }\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    togglePasswordInputs: function(value) {\n        if (value) {\n            $('#id_password1').parents(\".form-group\").show();\n            $('#id_password2').parents(\".form-group\").show();\n        } else {\n            $('#id_password1').parents(\".form-group\").hide();\n            $('#id_password2').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Callback to watch for username change.\n     *\n     */\n    emailChanged: function(event) {\n        var $target = get_target(event);\n        var $username = $('#id_username');\n\n        if ($target.val() !== this.originalEmail) {\n            $('#id_create_alias_with_old_address').parents(\".form-group\").show();\n        }\n        if ($username.val() !== $target.val()) {\n            $username.val($target.val());\n        }\n    },\n\n    generalform_init: function(notrigger) {\n        var $role = $('#id_role');\n\n        $role.change($.proxy(function(e) {\n            var $this = $(e.target);\n            var value = $this.val();\n            var email = $('#id_email').val();\n\n            if (value === 'SimpleUsers' || email !== '') {\n                this.simpleuser_mode();\n            } else {\n                this.normal_mode(value);\n            }\n        }, this));\n        $('#id_random_password').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.togglePasswordInputs(!$this.prop('checked'));\n        }, this));\n        this.toggle_master_user($role.val());\n        $('#id_create_alias_with_old_address').parents('.form-group').hide();\n        if (notrigger !== undefined && notrigger) {\n            return;\n        }\n        $role.trigger(\"change\");\n    },\n\n    mailform_init: function() {\n        var $email = $('#id_email');\n\n        this.originalEmail = $email.val();\n        $email.change($.proxy(this.emailChanged, this));\n        $(\"#id_aliases\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#original_senderaddress\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $email.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        if ($(\"#id_role\").length) {\n            $(\"#id_role\").trigger(\"change\");\n        } else {\n            this.simpleuser_mode();\n        }\n        $(\"#id_domains\").autocompleter({\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_domains\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        activate_widget.call($(\"#id_quota_act\"));\n    },\n\n    accountform_init: function() {\n        this.generalform_init(true);\n        this.mailform_init();\n    },\n\n    mailform_prefill: function() {\n        var $role = $(\"#id_role\");\n        if (!$role.length || $role.val() === \"\" || $role.val() === \"SimpleUsers\") {\n            $(\"#id_email\").val($(\"#id_username\").val());\n        }\n    },\n\n    newaccount_cb: function() {\n        this.accountform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"newaccount_form\",\n            transition_callbacks: {\n                mail: this.mailform_prefill\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    editaccount_cb: function() {\n        this.accountform_init();\n        $('.submit').on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"accountform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    },\n\n    aliasform_cb: function() {\n        $(\"#id_random_address\").click(function(evt) {\n            if ($(this).prop(\"checked\")) {\n                $(\"#id_address\").parents(\".form-group\").hide();\n                $(\"#id_domain\").parents(\".form-group\").show();\n            } else {\n                $(\"#id_address\").parents(\".form-group\").show();\n                $(\"#id_domain\").parents(\".form-group\").hide();\n            }\n        });\n        $(\"#id_address\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_recipients\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#id_expire_at\").datetimepicker({\n            format: 'YYYY-MM-DD HH:mm:ss'\n        });\n        $(\".submit\").on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"aliasform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    }\n\n};\n\nIdentities.prototype = $.extend({}, Admin.prototype, Identities.prototype);\n", "{% load core_tags %}\n\n{% for l in logs %}\n<tr>\n  <td>{{ l.date_created|date:\"SHORT_DATETIME_FORMAT\" }}</td>\n  <td>{{ l.level|colorize_level|safe }}</td>\n  <td>{{ l.logger }}</td>\n  <td>{{ l.message }}</td>\n</tr>\n{% endfor %}\n", "(function($) {\n    \"use strict\";\n\n    var Autocompleter = function(element, options) {\n        this.initialize(element, options);\n    };\n\n    Autocompleter.prototype = {\n        constructor: Autocompleter,\n\n        initialize: function(element, options) {\n            this.$element = $(element);\n            this.options = $.extend({}, $.fn.autocompleter.defaults, options);\n            if (typeof this.options.choices === \"function\") {\n                this.choices = this.options.choices();\n            } else {\n                this.choices = this.options.choices;\n            }\n            this.$menu =\n                $('<ul class=\"dropdown-menu autocompleter\" data-toggle=\"dropdown\" />');\n            $(\"body\").append(this.$menu);\n            this.$menu.on(\"click\", $.proxy(this.select_entry, this));\n\n            this.$element.attr(\"autocomplete\", \"off\");\n            this.listen();\n        },\n\n        listen: function() {\n            this.$element.keydown($.proxy(this.keydown, this));\n            this.$element.keyup($.proxy(this.keyup, this));\n            this.$element.blur($.proxy(this.hide_menu, this));\n        },\n\n        unbind: function() {\n            this.$element.off(\"keydown keyup blur\");\n        },\n\n        check_user_input: function() {\n            var value = this.$element.val();\n            var start = -1;\n            var pattern = null;\n\n            if (this.options.from_character) {\n                start = value.indexOf(this.options.from_character);\n                if (start == -1) {\n                    return;\n                }\n                pattern = value.substr(start + 1);\n            } else {\n                pattern = value;\n            }\n\n            var exp = new RegExp(\"^\" + pattern);\n\n            this.$menu.empty();\n            $.each(this.choices, $.proxy(function(index, value) {\n                if (exp.test(value)) {\n                    this.$menu.append(\n                        $('<li><a href=\"#\" name=\"' + htmlEncode(value) + '\">' + htmlEncode(value) + '</a></li>')\n                    );\n                }\n            }, this));\n\n            var coords = this.$element.offset();\n\n            this.$menu.css({\n                position: \"absolute\",\n                top: coords.top + this.$element.outerHeight(),\n                left: coords.left,\n                width: this.$element.outerWidth(),\n                'z-index': 1051\n            });\n            if (this.$menu.children().length) {\n                this.$menu.children().first().addClass(\"active\");\n                this.$menu.show();\n            } else {\n                this.$menu.hide();\n            }\n        },\n\n        hide_menu: function() {\n            setTimeout($.proxy(function() { this.$menu.hide(); }, this), 150);\n        },\n\n        select_entry: function(evt) {\n            if (this.$menu.is(\":visible\")) {\n                var $link;\n                if (evt !== undefined) {\n                    evt.preventDefault();\n                    $link = $(evt.target);\n                } else {\n                    $link = this.$menu.find('.active > a');\n                }\n                var curvalue = this.$element.val();\n\n                if (curvalue === undefined || curvalue === \"\") {\n                    if (this.options.empty_choice) {\n                        this.options.empty_choice();\n                    }\n                    return;\n                }\n                if ($link.length) {\n                    this.$element.val(curvalue.substr(\n                        0, curvalue.indexOf(this.options.from_character) + 1\n                    ) + $link.attr(\"name\"));\n                    this.$element.change();\n                }\n                this.hide_menu();\n            }\n            if (this.options.choice_selected) {\n                this.options.choice_selected(this.$element.val());\n            }\n        },\n\n        activate_next: function() {\n            var active = this.$menu.find('.active').removeClass('active'),\n                next = active.next();\n\n            if (!next.length) {\n                next = $(this.$menu.find('li').first());\n            }\n            next.addClass('active');\n        },\n\n        activate_prev: function() {\n            var active = this.$menu.find('.active').removeClass('active'),\n                prev = active.prev();\n\n            if (!prev.length) {\n                prev = this.$menu.find('li').last();\n            }\n\n            prev.addClass('active');\n        },\n\n        keydown: function(evt) {\n            evt.stopPropagation();\n\n            switch (evt.which) {\n                case 13:\n                case 27:\n                    evt.preventDefault();\n                    break;\n                case 38:\n                    evt.preventDefault();\n                    this.activate_prev();\n                    break;\n                case 40:\n                    evt.preventDefault();\n                    this.activate_next();\n                    break;\n            }\n        },\n\n        keyup: function(evt) {\n            evt.stopPropagation();\n            evt.preventDefault();\n\n            switch (evt.which) {\n            case 40:\n            case 38:\n                break;\n\n            case 13:\n                this.select_entry();\n                break;\n\n            case 27:\n                this.hide_menu();\n                break;\n\n            default:\n                this.check_user_input();\n            }\n        }\n    };\n\n    $.fn.autocompleter = function(option) {\n        return this.each(function() {\n            var $this = $(this),\n                data = $this.data('autocompleter'),\n                options = typeof option === \"object\" && option;\n\n            if (!data) {\n                $this.data('autocompleter', new Autocompleter(this, options));\n            }\n            if (typeof option === \"string\") {\n                data[option]();\n            }\n        });\n    };\n\n    $.fn.autocompleter.defaults = {\n        'choice_selected' : null,\n        'empty_choice' : null\n    };\n\n})(jQuery);\n"], "filenames": ["modoboa/admin/static/admin/js/admin.js", "modoboa/core/templates/core/logs_page.html", "modoboa/static/js/autocompleter.js"], "buggy_code_start_loc": [411, 8, 59], "buggy_code_end_loc": [412, 9, 60], "fixing_code_start_loc": [411, 8, 59], "fixing_code_end_loc": [412, 9, 60], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository modoboa/modoboa prior to 2.0.4.", "other": {"cve": {"id": "CVE-2023-0519", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-26T23:15:16.347", "lastModified": "2023-02-02T15:07:21.873", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository modoboa/modoboa prior to 2.0.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 3.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:modoboa:modoboa:*:*:*:*:*:modoboa:*:*", "versionEndExcluding": "2.0.4", "matchCriteriaId": "4781FBB6-EAE1-4AF9-A51F-5BEE3E8DFA16"}]}]}], "references": [{"url": "https://github.com/modoboa/modoboa/commit/eef9ab72b5305578a3ad7a7463bd284aa645e98b", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/891ad0cb-d12f-4c5e-aac8-d7326caf2129", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/modoboa/modoboa/commit/eef9ab72b5305578a3ad7a7463bd284aa645e98b"}}