{"buggy_code": ["<?php\n/**\n * Functions used to display content in themes.\n * @package functions\n * @subpackage template-functions\n */\n// force UTF-8 \u00d8\n\nrequire_once(dirname(__FILE__) . '/functions.php');\nif (!defined('SEO_FULLWEBPATH')) {\n\tdefine('SEO_FULLWEBPATH', FULLWEBPATH);\n\tdefine('SEO_WEBPATH', WEBPATH);\n}\n\n//******************************************************************************\n//*** Template Functions *******************************************************\n//******************************************************************************\n\n/* * * Generic Helper Functions ************ */\n/* * *************************************** */\n\n/**\n * Returns the zenphoto version string\n */\nfunction getVersion() {\n\treturn ZENPHOTO_VERSION;\n}\n\n/**\n * Prints the zenphoto version string\n */\nfunction printVersion() {\n\techo getVersion();\n}\n\n/**\n * Print any Javascript required by zenphoto.\n */\nfunction printZenJavascripts() {\n\tglobal $_zp_current_album;\n\t?>\n\t<script type=\"text/javascript\" src=\"<?php echo WEBPATH . \"/\" . ZENFOLDER; ?>/js/jquery.js\"></script>\n\t<?php\n\tif(zp_loggedin()) {\n\t\t?>\n\t\t<script type=\"text/javascript\" src=\"<?php echo WEBPATH . \"/\" . ZENFOLDER; ?>/js/zenphoto.js\"></script>\n\t\t<link rel=\"stylesheet\" href=\"<?php echo WEBPATH . '/' . ZENFOLDER; ?>/admintoolbox.css\" type=\"text/css\" />\n\t\t<?php\n\t}\n}\n\n/**\n * Prints the clickable drop down toolbox on any theme page with generic admin helpers\n *\n */\nfunction adminToolbox() {\n\tglobal $_zp_current_album, $_zp_current_image, $_zp_current_search, $_zp_gallery_page, $_zp_gallery, $_zp_current_admin_obj, $_zp_loggedin, $_zp_conf_vars;\n\tif (zp_loggedin()) {\n\t\t$zf = FULLWEBPATH . \"/\" . ZENFOLDER;\n\t\t$page = getCurrentPage();\n\t\tob_start();\n\t\t?>\n\t\t<script type=\"text/javascript\">\n\t\t\t// <!-- <![CDATA[\n\t\t\tvar deleteAlbum1 = \"<?php echo gettext(\"Are you sure you want to delete this item?\"); ?>\";\n\t\t\tvar deleteAlbum2 = \"<?php echo gettext(\"Are you Absolutely positively sure you want to delete this item? THIS CANNOT BE UNDONE!\"); ?>\";\n\t\t\tfunction newAlbum(folder, albumtab) {\n\t\t\t\tvar album = prompt('<?php echo gettext('New album name?'); ?>', '<?php echo gettext('new album'); ?>');\n\t\t\t\tif (album) {\n\t\t\t\t\tlaunchScript('<?php echo $zf; ?>/admin-edit.php', ['action=newalbum', 'folder=' + encodeURIComponent(folder), 'name=' + encodeURIComponent(album), 'albumtab=' + albumtab, 'XSRFToken=<?php echo getXSRFToken('newalbum'); ?>']);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// ]]> -->\n\t\t</script>\n\t\t<div id=\"zp__admin_module\">\n\t\t\t<div id=\"zp__admin_info\">\n\t\t\t\t<span class=\"zp_logo\">ZP</span>\n\t\t\t\t<span class=\"zp_user\"> <?php echo $_zp_current_admin_obj->getUser(); ?>\n\t\t\t\t\t<?php\n\t\t\t\t\tif(array_key_exists('site_upgrade_state', $_zp_conf_vars)) {\n\t\t\t\t\t\tif($_zp_conf_vars['site_upgrade_state'] == 'closed_for_test') {\n\t\t\t\t\t\t\techo ' | <span class=\"zp_sitestatus\">' . gettext('Test mode') . '</span>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<button type=\"button\" id=\"zp__admin_link\" onclick=\"javascript:toggle('zp__admin_data');\">\n\t\t\t\t<?php echo gettext('Admin'); ?>\n\t\t\t</button>\n\t\t\t<div id=\"zp__admin_data\" style=\"display: none;\">\n\t\t\t\t<ul>\n\t\t\t\t<?php\n\t\t\t\t$outputA = ob_get_contents();\n\t\t\t\tob_end_clean();\n\t\t\t\tob_start();\n\n\t\t\t\tif (zp_loggedin(OVERVIEW_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin.php', gettext(\"Overview\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(UPLOAD_RIGHTS | FILES_RIGHTS | THEMES_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-upload.php', gettext(\"Upload\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(ALBUM_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-edit.php', gettext(\"Albums\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tzp_apply_filter('admin_toolbox_global', $zf);\n\n\t\t\t\tif (zp_loggedin(TAGS_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-tags.php', gettext(\"Tags\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(USER_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-users.php', gettext(\"Users\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(OPTIONS_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-options.php?tab=general', gettext(\"Options\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(THEMES_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-themes.php', gettext(\"Themes\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(ADMIN_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-plugins.php', gettext(\"Plugins\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-logs.php', gettext(\"Logs\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\n\t\t\t\t$gal = getOption('custom_index_page');\n\t\t\t\tif (empty($gal) || !file_exists(SERVERPATH . '/' . THEMEFOLDER . '/' . $_zp_gallery->getCurrentTheme() . '/' . internalToFilesystem($gal) . '.php')) {\n\t\t\t\t\t$gal = 'index.php';\n\t\t\t\t} else {\n\t\t\t\t\t$gal .= '.php';\n\t\t\t\t}\n\t\t\t\t$inImage = false;\n\t\t\t\tswitch ($_zp_gallery_page) {\n\t\t\t\t\tcase 'index.php':\n\t\t\t\t\tcase $gal:\n\t\t\t\t\t\t// script is either index.php or the gallery index page\n\t\t\t\t\t\tif (zp_loggedin(ADMIN_RIGHTS)) {\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-edit.php?page=edit', gettext(\"Sort Gallery\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (zp_loggedin(UPLOAD_RIGHTS)) {\n\t\t\t\t\t\t\t// admin has upload rights, provide an upload link for a new album\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"javascript:newAlbum('',true);\"><?php echo gettext(\"New Album\"); ?></a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($_zp_gallery_page == 'index.php') {\n\t\t\t\t\t\t\t$redirect = '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$redirect = \"&amp;p=\" . urlencode(stripSuffix($_zp_gallery_page));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($page > 1) {\n\t\t\t\t\t\t\t$redirect .= \"&amp;page=$page\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzp_apply_filter('admin_toolbox_gallery', $zf);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'image.php':\n\t\t\t\t\t\t$inImage = true; // images are also in albums[sic]\n\t\t\t\t\tcase 'album.php':\n\t\t\t\t\t\t// script is album.php\n\t\t\t\t\t\t$albumname = $_zp_current_album->name;\n\t\t\t\t\t\tif ($_zp_current_album->isMyItem(ALBUM_RIGHTS)) {\n\t\t\t\t\t\t\t// admin is empowered to edit this album--show an edit link\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-edit.php?page=edit&album=' . pathurlencode($_zp_current_album->name), gettext('Edit album'), NULL, NULL, NULL); ?>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\tif (!$_zp_current_album->isDynamic()) {\n\t\t\t\t\t\t\t\tif ($_zp_current_album->getNumAlbums()) {\n\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-edit.php?page=edit&album=' . pathurlencode($albumname) . '&tab=subalbuminfo', gettext(\"Sort subalbums\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ($_zp_current_album->getNumImages() > 0) {\n\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-albumsort.php?page=edit&album=' . pathurlencode($albumname) . '&tab=sort', gettext(\"Sort images\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// and a delete link\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"javascript:confirmDeleteAlbum('<?php echo $zf; ?>/admin-edit.php?page=edit&amp;action=deletealbum&amp;album=<?php echo urlencode(pathurlencode($albumname)) ?>&amp;XSRFToken=<?php echo getXSRFToken('delete'); ?>');\"\n\t\t\t\t\t\t\t\t\t title=\"<?php echo gettext('Delete the album'); ?>\"><?php echo gettext('Delete album'); ?></a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($_zp_current_album->isMyItem(UPLOAD_RIGHTS) && !$_zp_current_album->isDynamic()) {\n\t\t\t\t\t\t\t// provide an album upload link if the admin has upload rights for this album and it is not a dynamic album\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-upload.php?album=' . pathurlencode($albumname), gettext(\"Upload Here\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"javascript:newAlbum('<?php echo pathurlencode($albumname); ?>',true);\"><?php echo gettext(\"New Album Here\"); ?></a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzp_apply_filter('admin_toolbox_album', $albumname, $zf);\n\t\t\t\t\t\tif ($inImage) {\n\t\t\t\t\t\t\t// script is image.php\n\t\t\t\t\t\t\t$imagename = $_zp_current_image->filename;\n\t\t\t\t\t\t\tif (!$_zp_current_album->isDynamic()) { // don't provide links when it is a dynamic album\n\t\t\t\t\t\t\t\tif ($_zp_current_album->isMyItem(ALBUM_RIGHTS)) {\n\t\t\t\t\t\t\t\t\t$delete_image = gettext(\"Are you sure you want to delete this image? THIS CANNOT BE UNDONE!\");\n\t\t\t\t\t\t\t\t\t// if admin has edit rights on this album, provide a delete link for the image.\n\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<a href=\"javascript:confirmDelete('<?php echo $zf; ?>/admin-edit.php?page=edit&amp;action=deleteimage&amp;album=<?php echo urlencode(pathurlencode($albumname)); ?>&amp;image=<?php echo urlencode($imagename); ?>&amp;XSRFToken=<?php echo getXSRFToken('delete'); ?>','<?php echo $delete_image; ?>');\"\n\t\t\t\t\t\t\t\t\t\t\t title=\"<?php echo gettext(\"Delete the image\"); ?>\"><?php echo gettext(\"Delete image\"); ?></a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<a href=\"<?php echo $zf; ?>/admin-edit.php?page=edit&amp;album=<?php echo pathurlencode($albumname); ?>&amp;singleimage=<?php echo urlencode($imagename); ?>&amp;tab=imageinfo&amp;nopagination\"\n\t\t\t\t\t\t\t\t\t\t\t title=\"<?php echo gettext('Edit image'); ?>\"><?php echo gettext('Edit image'); ?></a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// set return to this image page\n\t\t\t\t\t\t\t\tzp_apply_filter('admin_toolbox_image', $albumname, $imagename, $zf);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$redirect = \"&amp;album=\" . html_encode(pathurlencode($albumname)) . \"&amp;image=\" . urlencode($imagename);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// set the return to this album/page\n\t\t\t\t\t\t\t$redirect = \"&amp;album=\" . html_encode(pathurlencode($albumname));\n\t\t\t\t\t\t\tif ($page > 1) {\n\t\t\t\t\t\t\t\t$redirect .= \"&amp;page=$page\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'search.php':\n\t\t\t\t\t\t$words = $_zp_current_search->getSearchWords();\n\t\t\t\t\t\tif (!empty($words)) {\n\t\t\t\t\t\t\t// script is search.php with a search string\n\t\t\t\t\t\t\tif (zp_loggedin(UPLOAD_RIGHTS)) {\n\t\t\t\t\t\t\t\t$link = $zf . '/admin-dynamic-album.php?' . substr($_zp_current_search->getSearchParams(), 1);\n\t\t\t\t\t\t\t\t// if admin has edit rights allow him to create a dynamic album from the search\n\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<a href=\"<?php echo $link; ?>\" title=\"<?php echo gettext('Create an album from the search'); ?>\" ><?php echo gettext('Create Album'); ?></a>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tzp_apply_filter('admin_toolbox_search', $zf);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$redirect = \"&amp;p=search\" . $_zp_current_search->getSearchParams() . \"&amp;page=$page\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// arbitrary custom page\n\t\t\t\t\t\t$gal = stripSuffix($_zp_gallery_page);\n\t\t\t\t\t\t$redirect = \"&amp;p=\" . urlencode($gal);\n\t\t\t\t\t\tif ($page > 1) {\n\t\t\t\t\t\t\t$redirect .= \"&amp;page=$page\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$redirect = zp_apply_filter('admin_toolbox_' . $gal, $redirect, $zf);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$redirect = zp_apply_filter('admin_toolbox_close', $redirect, $zf);\n\t\t\t\tif ($_zp_current_admin_obj->logout_link) {\n\t\t\t\t\t// logout link\n\t\t\t\t\t$sec = (int) ((SERVER_PROTOCOL == 'https') & true);\n\t\t\t\t\t$link = SEO_FULLWEBPATH . '/index.php?logout=' . $sec . $redirect;\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href=\"<?php echo $link; ?>\"><?php echo gettext(\"Logout\"); ?> </a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\t$outputB = ob_get_contents();\n\t\t\t\tob_end_clean();\n\t\t\t\tif ($outputB) {\n\t\t\t\t\techo $outputA . $outputB;\n\t\t\t\t\t?>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t\t<?php\n\t\t}\n\t}\n}\n\n//*** Gallery Index (album list) Context ***\n//******************************************\n\n/**\n * Returns the raw title of the gallery.\n *\n * @return string\n */\nfunction getGalleryTitle() {\n\tglobal $_zp_gallery;\n\treturn $_zp_gallery->getTitle();\n}\n\n/**\n * Returns a text-only title of the gallery.\n *\n * @return string\n */\nfunction getBareGalleryTitle() {\n\treturn getBare(getGalleryTitle());\n}\n\n/**\n * Prints the title of the gallery.\n */\nfunction printGalleryTitle() {\n\techo html_encodeTagged(getGalleryTitle());\n}\n\nfunction printBareGalleryTitle() {\n\techo html_encode(getBareGalleryTitle());\n}\n\n/**\n * Function to create the page title to be used within the html <head> <title></title> element.\n * Usefull if you use one header.php for the header of all theme pages instead of individual ones on the theme pages\n * It returns the title and site name in reversed breadcrumb order:\n * <title of current page> | <parent item if present> | <gallery title>\n * It supports standard gallery pages as well a custom and Zenpage news articles, categories and pages.\n *\n * @param string $separator How you wish the parts to be separated\n * @param bool $listparentalbums If the parent albums should be printed in reversed order before the current\n * @param bool $listparentpage If the parent Zenpage pages should be printed in reversed order before the current page\n */\nfunction getHeadTitle($separator = ' | ', $listparentalbums = true, $listparentpages = true) {\n\tglobal $_zp_gallery, $_zp_current_album, $_zp_current_image, $_zp_current_zenpage_news, $_zp_current_zenpage_page, $_zp_gallery_page, $_zp_current_category, $_zp_page, $_myFavorites;\n\t$mainsitetitle = html_encode(getBare(getMainSiteName()));\n\t$separator = html_encode($separator);\n\tif ($mainsitetitle) {\n\t\t$mainsitetitle = $separator . $mainsitetitle;\n\t}\n\t$gallerytitle = html_encode(getBareGalleryTitle());\n\tif ($_zp_page > 1) {\n\t\t$pagenumber = ' (' . $_zp_page . ')';\n\t} else {\n\t\t$pagenumber = '';\n\t}\n\tswitch ($_zp_gallery_page) {\n\t\tcase 'index.php':\n\t\t\treturn $gallerytitle . $mainsitetitle . $pagenumber;\n\t\t\tbreak;\n\t\tcase 'album.php':\n\t\tcase 'image.php':\n\t\t\tif ($listparentalbums) {\n\t\t\t\t$parents = getParentAlbums();\n\t\t\t\t$parentalbums = '';\n\t\t\t\tif (count($parents) != 0) {\n\t\t\t\t\t$parents = array_reverse($parents);\n\t\t\t\t\tforeach ($parents as $parent) {\n\t\t\t\t\t\t$parentalbums .= html_encode(getBare($parent->getTitle())) . $separator;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$parentalbums = '';\n\t\t\t}\n\t\t\t$albumtitle = html_encode(getBareAlbumTitle()) . $pagenumber . $separator . $parentalbums . $gallerytitle . $mainsitetitle;\n\t\t\tswitch ($_zp_gallery_page) {\n\t\t\t\tcase 'album.php':\n\t\t\t\t\treturn $albumtitle;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'image.php':\n\t\t\t\t\treturn html_encode(getBareImageTitle()) . $separator . $albumtitle;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'news.php':\n\t\t\tif (function_exists(\"is_NewsArticle\")) {\n\t\t\t\tif (is_NewsArticle()) {\n\t\t\t\t\treturn html_encode(getBareNewsTitle()) . $pagenumber . $separator . gettext('News') . $separator . $gallerytitle . $mainsitetitle;\n\t\t\t\t} else if (is_NewsCategory()) {\n\t\t\t\t\treturn html_encode(getBare($_zp_current_category->getTitle())) . $pagenumber . $separator . gettext('News') . $separator . $gallerytitle . $mainsitetitle;\n\t\t\t\t} else {\n\t\t\t\t\treturn gettext('News') . $pagenumber . $separator . $gallerytitle . $mainsitetitle;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'pages.php':\n\t\t\tif ($listparentpages) {\n\t\t\t\t$parents = $_zp_current_zenpage_page->getParents();\n\t\t\t\t$parentpages = '';\n\t\t\t\tif (count($parents) != 0) {\n\t\t\t\t\t$parents = array_reverse($parents);\n\t\t\t\t\tforeach ($parents as $parent) {\n\t\t\t\t\t\t$obj = new ZenpagePage($parent);\n\t\t\t\t\t\t$parentpages .= html_encode(getBare($obj->getTitle())) . $separator;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$parentpages = '';\n\t\t\t}\n\t\t\treturn html_encode(getBarePageTitle()) . $pagenumber . $separator . $parentpages . $gallerytitle . $mainsitetitle;\n\t\t\tbreak;\n\t\tcase '404.php':\n\t\t\treturn gettext('Object not found') . $separator . $gallerytitle . $mainsitetitle;\n\t\t\tbreak;\n\t\tdefault: // for all other possible static custom pages\n\t\t\t$custompage = stripSuffix($_zp_gallery_page);\n\t\t\t$standard = array(\n\t\t\t\t\t'gallery' => gettext('Gallery'), \n\t\t\t\t\t'contact' => gettext('Contact'), \n\t\t\t\t\t'register' => gettext('Register'), \n\t\t\t\t\t'search' => gettext('Search'), \n\t\t\t\t\t'archive' => gettext('Archive view'), \n\t\t\t\t\t'password' => gettext('Password required'));\n\t\t\tif (is_object($_myFavorites)) {\n\t\t\t\t$standard['favorites'] = gettext('My favorites');\n\t\t\t}\n\t\t\tif (array_key_exists($custompage, $standard)) {\n\t\t\t\treturn $standard[$custompage] . $pagenumber . $separator . $gallerytitle . $mainsitetitle;\n\t\t\t} else {\n\t\t\t\treturn $custompage . $pagenumber . $separator . $gallerytitle . $mainsitetitle;\n\t\t\t}\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Function to print the html <title>title</title> within the <head> of a html page based on the current theme page\n * Usefull if you use one header.php for the header of all theme pages instead of individual ones on the theme pages\n * It prints the title and site name including the <title> tag in reversed breadcrumb order:\n * <title><title of current page> | <parent item if present> | <gallery title></title>\n * It supports standard gallery pages as well a custom and Zenpage news articles, categories and pages.\n *\n * @param string $separator How you wish the parts to be separated\n * @param bool $listparentalbums If the parent albums should be printed in reversed order before the current\n * @param bool $listparentpage If the parent Zenpage pages should be printed in reversed order before the current page\n */\nfunction printHeadTitle($separator = ' | ', $listparentalbums = true, $listparentpages = true) {\n\techo '<title>' . getHeadTitle($separator, $listparentalbums, $listparentpages) . '</title>';\n}\n\n/**\n * Returns the raw description of the gallery.\n *\n * @return string\n */\nfunction getGalleryDesc() {\n\tglobal $_zp_gallery;\n\treturn $_zp_gallery->getDesc();\n}\n\n/**\n * Returns a text-only description of the gallery.\n *\n * @return string\n */\nfunction getBareGalleryDesc() {\n\treturn getBare(getGalleryDesc());\n}\n\n/**\n * Prints the description of the gallery.\n */\nfunction printGalleryDesc() {\n\techo html_encodeTagged(getGalleryDesc());\n}\n\nfunction printBareGalleryDesc() {\n\techo html_encode(getBareGalleryDesc());\n}\n\n/**\n * Returns the name of the main website as set by the \"Website Title\" option\n * on the gallery options tab. Use this if Zenphoto is only a part of your website.\n *\n * @return string\n */\nfunction getMainSiteName() {\n\tglobal $_zp_gallery;\n\treturn $_zp_gallery->getWebsiteTitle();\n}\n\n/**\n * Returns the URL of the main website as set by the \"Website URL\" option\n * on the gallery options tab. Use this if Zenphoto is only a part of your website.\n *\n * @return string\n */\nfunction getMainSiteURL() {\n\tglobal $_zp_gallery;\n\treturn $_zp_gallery->getWebsiteURL();\n}\n\n/**\n * Returns the URL of the main gallery index page. If a custom index page is set this returns that page.\n * So this is not necessarily the home page of the site!\n * @return string\n */\nfunction getGalleryIndexURL() {\n\tglobal $_zp_current_album, $_zp_gallery_page;\n\t$page = 1;\n\tif (in_context(ZP_ALBUM) && $_zp_gallery_page != 'index.php') {\n\t\t$album = getUrAlbum($_zp_current_album);\n\t\t$page = $album->getGalleryPage();\n\t}\n\tif (!$link = getCustomGalleryIndexURL($page)) {\n\t\t$link = getStandardGalleryIndexURL($page);\n\t}\n\treturn zp_apply_filter('getLink', $link, 'index.php', NULL);\n}\n\n/**\n * Returns the url to the standard gallery index.php page\n *\n * @see getGalleryIndexURL()\n *\n * @param int $page Pagenumber to append\n * @param bool $webpath host path to be prefixed. If \"false\" is passed you will get a localized \"WEBPATH\"\n * @return string\n */\nfunction getStandardGalleryIndexURL($page = 1, $webpath = null) {\n\tif ($page > 1) {\n\t\treturn rewrite_path('/' . _PAGE_ . '/' . $page . '/', \"/index.php?\" . \"page=\" . $page, $webpath);\n\t} else {\n\t\tif (is_null($webpath)) {\n\t\t\tif (class_exists('seo_locale')) {\n\t\t\t\t$webpath = seo_locale::localePath();\n\t\t\t} else {\n\t\t\t\t$webpath = WEBPATH;\n\t\t\t}\n\t\t}\n\t\treturn $webpath . \"/\";\n\t}\n}\n\n/**\n * Gets the custom gallery index url if one is set, otherwise false\n *\n * @see getGalleryIndexURL()\n *\n * @global array $_zp_conf_vars\n * @param int $page Pagenumber for pagination\n * @param bool $webpath host path to be prefixed. If \"false\" is passed you will get a localized \"WEBPATH\"\n * @return string\n */\nfunction getCustomGalleryIndexURL($page = 1, $webpath = null) {\n\t$custom_index = getOption('custom_index_page');\n\tif ($custom_index) {\n\t\t$link = getCustomPageURL($custom_index, '', $webpath);\n\t\tif ($page > 1) {\n\t\t\tif (MOD_REWRITE) {\n\t\t\t\t$link .= $page . '/';\n\t\t\t} else {\n\t\t\t\t$link .= \"&amp;page=\" . $page;\n\t\t\t}\n\t\t}\n\t\treturn $link;\n\t}\n\treturn false;\n}\n\n/**\n * Returns the name to the individual custom gallery index page name if set,\n * otherwise returns generic custom gallery page \"gallery.php\" that is widely supported by themes\n * If you need to check if there is an indovidual custom_index_page set use\n * `getOption('custom_index_page')` or `getCustomGalleryIndexURL()`\n *\n * @return string\n */\nfunction getCustomGalleryIndexPage() {\n\t$custom_index = getOption('custom_index_page');\n\tif ($custom_index) {\n\t\treturn $custom_index . '.php';\n\t}\n\treturn 'gallery.php';\n}\n\n/**\n * If a custom gallery index page is set this first prints a link to the actual site index (home page = index.php)\n * followed by the gallery index page link. Otherwise just the gallery index link\n *\n * @since 1.4.9\n * @param string $after Text to append after and outside the link for breadcrumbs\n * @param string $text Name of the link, if NULL \"Gallery\" is used\n * @param bool $printHomeURL In case of a custom gallery index, display breadcrumb with home link (default is true)\n */\nfunction printGalleryIndexURL($after = NULL, $text = NULL, $printHomeURL = true) {\n\tglobal $_zp_gallery_page;\n\tif (is_null($text)) {\n\t\t$text = gettext('Gallery');\n\t}\n\t$customgalleryindex = getOption('custom_index_page');\n\tif ($customgalleryindex && $printHomeURL) {\n\t\tprintSiteHomeURL($after);\n\t}\n\tif ($_zp_gallery_page == getCustomGalleryIndexPage()) {\n\t\t$after = NULL;\n\t}\n\tif (!$customgalleryindex || ($customgalleryindex && in_array($_zp_gallery_page, array('image.php', 'album.php', getCustomGalleryIndexPage())))) {\n\t\tprintLinkHTML(getGalleryIndexURL(), $text, $text, 'galleryindexurl');\n\t\techo $after;\n\t}\n}\n\n\n/**\n * Returns the home page link (WEBPATH) to the Zenphoto theme index.php page\n * Use in breadcrumbs if the theme uses a custom gallery index page so the gallery is not the site's home page\n *\n * @since 1.4.9\n * @global string $_zp_gallery_page\n * @return string\n */\nfunction getSiteHomeURL() {\n\treturn WEBPATH . '/';\n}\n\n/**\n * Prints the home page link (WEBPATH with trailing slash) to a Zenphoto theme index.php page\n * Use in breadcrumbs if the theme uses a custom gallery index page so the gallery is not the site's home page\n *\n * @param string $after Text after and outside the link for breadcrumbs\n * @param string $text Text of the link, if NULL \"Home\"\n */\nfunction printSiteHomeURL($after = NULL, $text = NULL) {\n\tglobal $_zp_gallery_page;\n\tif ($_zp_gallery_page == 'index.php') {\n\t\t$after = '';\n\t}\n\tif (is_null($text)) {\n\t\t$text = gettext('Home');\n\t}\n\tprintLinkHTML(getSiteHomeURL(), $text, $text, 'homeurl');\n\techo $after;\n}\n\n/**\n * If the privacy page url option is set this prints a link to it\n * @param string $before To print before the link\n * @param string $after To print after the link\n */\nfunction printPrivacyPageLink($before = null, $after = null) {\n\t$data = getDataUsageNotice();\n\tif (!empty($data['url'])) {\n\t\techo $before;\n\t\tprintLinkHTML($data['url'], $data['linktext'], $data['linktext'], null, null);\n\t\techo $after;\n\t}\n}\n\n/**\n * Returns the number of albums.\n *\n * @return int\n */\nfunction getNumAlbums() {\n\tglobal $_zp_gallery, $_zp_current_album, $_zp_current_search;\n\tif (in_context(ZP_SEARCH) && is_null($_zp_current_album)) {\n\t\treturn $_zp_current_search->getNumAlbums();\n\t} else if (in_context(ZP_ALBUM)) {\n\t\treturn $_zp_current_album->getNumAlbums();\n\t} else {\n\t\treturn $_zp_gallery->getNumAlbums();\n\t}\n}\n\n/**\n * Returns the name of the currently active theme\n *\n * @return string\n */\nfunction getCurrentTheme() {\n\tglobal $_zp_gallery;\n\treturn $_zp_gallery->getCurrentTheme();\n}\n\n/* * * Album AND Gallery Context *********** */\n/* * *************************************** */\n\n/**\n * WHILE next_album(): context switches to Album.\n * If we're already in the album context, this is a sub-albums loop, which,\n * quite simply, changes the source of the album list.\n * Switch back to the previous context when there are no more albums.\n\n * Returns true if there are albums, false if none\n *\n * @param bool $all true to go through all the albums\n * @param bool $mine override the password checks\n * @return bool\n * @since 0.6\n */\nfunction next_album($all = false, $mine = NULL) {\n\tglobal $_zp_albums, $_zp_gallery, $_zp_current_album, $_zp_page, $_zp_current_album_restore, $_zp_current_search;\n\tif (is_null($_zp_albums)) {\n\t\tif (in_context(ZP_SEARCH)) {\n\t\t\t$_zp_albums = $_zp_current_search->getAlbums($all ? 0 : $_zp_page, NULL, NULL, true, $mine);\n\t\t} else if (in_context(ZP_ALBUM)) {\n\t\t\t$_zp_albums = $_zp_current_album->getAlbums($all ? 0 : $_zp_page, NULL, NULL, true, $mine);\n\t\t} else {\n\t\t\t$_zp_albums = $_zp_gallery->getAlbums($all ? 0 : $_zp_page, NULL, NULL, true, $mine);\n\t\t}\n\t\tif (empty($_zp_albums)) {\n\t\t\treturn NULL;\n\t\t}\n\t\t$_zp_current_album_restore = $_zp_current_album;\n\t\t$_zp_current_album = newAlbum(array_shift($_zp_albums), true, true);\n\t\tsave_context();\n\t\tadd_context(ZP_ALBUM);\n\t\treturn true;\n\t} else if (empty($_zp_albums)) {\n\t\t$_zp_albums = NULL;\n\t\t$_zp_current_album = $_zp_current_album_restore;\n\t\trestore_context();\n\t\treturn false;\n\t} else {\n\t\t$_zp_current_album = newAlbum(array_shift($_zp_albums), true, true);\n\t\treturn true;\n\t}\n}\n\n/**\n * Returns the number of the current page without printing it.\n *\n * @return int\n */\nfunction getCurrentPage() {\n\tglobal $_zp_page;\n\treturn $_zp_page;\n}\n\n/**\n * Returns a list of all albums decendent from an album\n *\n * @param object $album optional album. If absent the current album is used\n * @return array\n */\nfunction getAllAlbums($album = NULL) {\n\tglobal $_zp_current_album, $_zp_gallery;\n\tif (is_null($album))\n\t\t$album = $_zp_current_album;\n\tif (!is_object($album))\n\t\treturn;\n\t$list = array();\n\t$subalbums = $album->getAlbums(0);\n\tif (is_array($subalbums)) {\n\t\tforeach ($subalbums as $subalbum) {\n\t\t\t$list[] = $subalbum;\n\t\t\t$sub = newAlbum($subalbum);\n\t\t\t$list = array_merge($list, getAllAlbums($sub));\n\t\t}\n\t}\n\treturn $list;\n}\n\n/**\n * Gets an array of the album ids of all accessible albums (publich or user dependend)\n *\n * @param object $obj from whence to get the albums\n * @param array $albumlist collects the list\n * @param bool $scan force scan for new images in the album folder\n */\nfunction getAllAccessibleAlbums($obj, &$albumlist, $scan) {\n\tglobal $_zp_gallery;\n\t$locallist = $obj->getAlbums();\n foreach ($locallist as $folder) {\n\t\t$album = newAlbum($folder);\n\t\tIf (!$album->isDynamic() && $album->checkAccess()) {\n\t\t\tif ($scan)\n\t\t\t\t$album->getImages();\n\t\t\t$albumlist[] = $album->getID();\n\t\t\tgetAllAccessibleAlbums($album, $albumlist, $scan);\n\t\t}\n\t}\n}\n\n/**\n * Returns the number of pages for the current object\n *\n * @param bool $_oneImagePage set to true if your theme collapses all image thumbs\n * or their equivalent to one page. This is typical with flash viewer themes\n *\n * @return int\n */\nfunction getTotalPages($_oneImagePage = false) {\n\tglobal $_zp_gallery, $_zp_current_album, $_firstPageImages, $_zp_zenpage, $_zp_current_category;\n\tif (in_context(ZP_ALBUM | ZP_SEARCH)) {\n\t\t$albums_per_page = max(1, getOption('albums_per_page'));\n\t\t$pageCount = (int) ceil(getNumAlbums() / $albums_per_page);\n\t\t$imageCount = getNumImages();\n\t\tif ($_oneImagePage) {\n\t\t\tif ($_oneImagePage === true) {\n\t\t\t\t$imageCount = min(1, $imageCount);\n\t\t\t} else {\n\t\t\t\t$imageCount = 0;\n\t\t\t}\n\t\t}\n\t\t$images_per_page = max(1, getOption('images_per_page'));\n\t\t$pageCount = ($pageCount + ceil(($imageCount - $_firstPageImages) / $images_per_page));\n\t\treturn $pageCount;\n\t} else if (get_context() == ZP_INDEX) {\n\t\tif (galleryAlbumsPerPage() != 0) {\n\t\t\treturn (int) ceil($_zp_gallery->getNumAlbums() / galleryAlbumsPerPage());\n\t\t} else {\n\t\t\treturn NULL;\n\t\t}\n\t\treturn NULL;\n\t} else if (isset($_zp_zenpage)) {\n\t\tif (in_context(ZP_ZENPAGE_NEWS_CATEGORY)) {\n\t\t\t$cat = $_zp_current_category;\n\t\t} else {\n\t\t\t$cat = NULL;\n\t\t}\n\t\treturn (int) ceil(count($_zp_zenpage->getArticles(0, NULL, true, NULL, NULL, NULL, $cat)) / ZP_ARTICLES_PER_PAGE);\n\t}\n}\n\n/**\n * Returns the URL of the page number passed as a parameter\n *\n * @param int $page Which page is desired\n * @param int $total How many pages there are.\n * @return int\n */\nfunction getPageNumURL($page, $total = null) {\n\tglobal $_zp_current_album, $_zp_gallery, $_zp_current_search, $_zp_gallery_page, $_zp_conf_vars;\n\tif (is_null($total)) {\n\t\t$total = getTotalPages();\n\t}\n\tif ($page <= 0 || $page > $total) {\n\t\treturn NULL;\n\t}\n\tif (in_context(ZP_SEARCH)) {\n\t\t$searchwords = $_zp_current_search->codifySearchString();\n\t\t$searchdate = $_zp_current_search->getSearchDate();\n\t\t$searchfields = $_zp_current_search->getSearchFields(true);\n\t\t$searchpagepath = getSearchURL($searchwords, $searchdate, $searchfields, $page, array('albums' => $_zp_current_search->getAlbumList()));\n\t\treturn $searchpagepath;\n\t} else if (in_context(ZP_ALBUM)) {\n\t\treturn $_zp_current_album->getLink($page);\n\t} else if (in_array($_zp_gallery_page, array('index.php', 'album.php', 'image.php'))) {\n\t\tif (in_context(ZP_INDEX)) {\n\t\t\t$pagination1 = '/';\n\t\t\t$pagination2 = 'index.php';\n\t\t\tif ($page > 1) {\n\t\t\t\t$pagination1 .= _PAGE_ . '/' . $page . '/';\n\t\t\t\t$pagination2 .= '?page=' . $page;\n\t\t\t}\n\t\t} else {\n\t\t\treturn NULL;\n\t\t}\n\t} else {\n\t\t// handle custom page\n\t\t$pg = stripSuffix($_zp_gallery_page);\n\t\tif (array_key_exists($pg, $_zp_conf_vars['special_pages'])) {\n\t\t\t$pagination1 = preg_replace('~^_PAGE_/~', _PAGE_ . '/', $_zp_conf_vars['special_pages'][$pg]['rewrite']) . '/';\n\t\t} else {\n\t\t\t$pagination1 = '/' . _PAGE_ . '/' . $pg . '/';\n\t\t}\n\t\t$pagination2 = 'index.php?p=' . $pg;\n\t\tif ($page > 1) {\n\t\t\t$pagination1 .= $page . '/';\n\t\t\t$pagination2 .= '&page=' . $page;\n\t\t}\n\t}\n\treturn zp_apply_filter('getLink', rewrite_path($pagination1, $pagination2), $_zp_gallery_page, $page);\n}\n\n/**\n * Returns true if there is a next page\n *\n * @return bool\n */\nfunction hasNextPage() {\n\treturn (getCurrentPage() < getTotalPages());\n}\n\n/**\n * Returns the URL of the next page. Use within If or while loops for pagination.\n *\n * @return string\n */\nfunction getNextPageURL() {\n\treturn getPageNumURL(getCurrentPage() + 1);\n}\n\n/**\n * Prints the URL of the next page.\n *\n * @param string $text text for the URL\n * @param string $title Text for the HTML title\n * @param string $class Text for the HTML class\n * @param string $id Text for the HTML id\n */\nfunction printNextPageURL($text, $title = NULL, $class = NULL, $id = NULL) {\n\tif (hasNextPage()) {\n\t\tprintLinkHTML(getNextPageURL(), $text, $title, $class, $id);\n\t} else {\n\t\techo \"<span class=\\\"disabledlink\\\">$text</span>\";\n\t}\n}\n\n/**\n * Returns TRUE if there is a previous page. Use within If or while loops for pagination.\n *\n * @return bool\n */\nfunction hasPrevPage() {\n\treturn (getCurrentPage() > 1);\n}\n\n/**\n * Returns the URL of the previous page.\n *\n * @return string\n */\nfunction getPrevPageURL() {\n\treturn getPageNumURL(getCurrentPage() - 1);\n}\n\n/**\n * Returns the URL of the previous page.\n *\n * @param string $text The linktext that should be printed as a link\n * @param string $title The text the html-tag \"title\" should contain\n * @param string $class Insert here the CSS-class name you want to style the link with\n * @param string $id Insert here the CSS-ID name you want to style the link with\n */\nfunction printPrevPageURL($text, $title = NULL, $class = NULL, $id = NULL) {\n\tif (hasPrevPage()) {\n\t\tprintLinkHTML(getPrevPageURL(), $text, $title, $class, $id);\n\t} else {\n\t\techo \"<span class=\\\"disabledlink\\\">$text</span>\";\n\t}\n}\n\n/**\n * Prints a page navigation including previous and next page links\n *\n * @param string $prevtext Insert here the linktext like 'previous page'\n * @param string $separator Insert here what you like to be shown between the prev and next links\n * @param string $nexttext Insert here the linktext like \"next page\"\n * @param string $class Insert here the CSS-class name you want to style the link with (default is \"pagelist\")\n * @param string $id Insert here the CSS-ID name if you want to style the link with this\n */\nfunction printPageNav($prevtext, $separator, $nexttext, $class = 'pagenav', $id = NULL) {\n\techo \"<div\" . (($id) ? \" id=\\\"$id\\\"\" : \"\") . \" class=\\\"$class\\\">\";\n\tprintPrevPageURL($prevtext, gettext(\"Previous Page\"));\n\techo \" $separator \";\n\tprintNextPageURL($nexttext, gettext(\"Next Page\"));\n\techo \"</div>\\n\";\n}\n\n/**\n * Prints a list of all pages.\n *\n * @param string $class the css class to use, \"pagelist\" by default\n * @param string $id the css id to use\n * @param int $navlen Number of navigation links to show (0 for all pages). Works best if the number is odd.\n */\nfunction printPageList($class = 'pagelist', $id = NULL, $navlen = 9) {\n\tprintPageListWithNav(null, null, false, false, $class, $id, false, $navlen);\n}\n\n/**\n * returns a page nav list.\n *\n * @param bool $_oneImagePage set to true if there is only one image page as, for instance, in flash themes\n * @param int $navlen Number of navigation links to show (0 for all pages). Works best if the number is odd.\n * @param bool $firstlast Add links to the first and last pages of you gallery\n * @param int $current the current page\n * @param int $total total number of pages\n *\n */\nfunction getPageNavList($_oneImagePage, $navlen, $firstlast, $current, $total) {\n\t$result = array();\n\tif (hasPrevPage()) {\n\t\t$result['prev'] = getPrevPageURL();\n\t} else {\n\t\t$result['prev'] = NULL;\n\t}\n\tif ($firstlast) {\n\t\t$result[1] = getPageNumURL(1, $total);\n\t}\n\n\tif ($navlen == 0) {\n\t\t$navlen = $total;\n\t}\n\t$extralinks = 2;\n\tif ($firstlast)\n\t\t$extralinks = $extralinks + 2;\n\t$len = floor(($navlen - $extralinks) / 2);\n\t$j = max(round($extralinks / 2), min($current - $len - (2 - round($extralinks / 2)), $total - $navlen + $extralinks - 1));\n\t$ilim = min($total, max($navlen - round($extralinks / 2), $current + floor($len)));\n\t$k1 = round(($j - 2) / 2) + 1;\n\t$k2 = $total - round(($total - $ilim) / 2);\n\n\tfor ($i = $j; $i <= $ilim; $i++) {\n\t\t$result[$i] = getPageNumURL($i, $total);\n\t}\n\tif ($firstlast) {\n\t\t$result[$total] = getPageNumURL($total, $total);\n\t}\n\tif (hasNextPage()) {\n\t\t$result['next'] = getNextPageURL();\n\t} else {\n\t\t$result['next'] = NULL;\n\t}\n\treturn $result;\n}\n\n/**\n * Prints a full page navigation including previous and next page links with a list of all pages in between.\n *\n * @param string $prevtext Insert here the linktext like 'previous page'\n * @param string $nexttext Insert here the linktext like 'next page'\n * @param bool $_oneImagePage set to true if there is only one image page as, for instance, in flash themes\n * @param string $nextprev set to true to get the 'next' and 'prev' links printed\n * @param string $class Insert here the CSS-class name you want to style the link with (default is \"pagelist\")\n * @param string $id Insert here the CSS-ID name if you want to style the link with this\n * @param bool $firstlast Add links to the first and last pages of you gallery\n * @param int $navlen Number of navigation links to show (0 for all pages). Works best if the number is odd.\n */\nfunction printPageListWithNav($prevtext, $nexttext, $_oneImagePage = false, $nextprev = true, $class = 'pagelist', $id = NULL, $firstlast = true, $navlen = 9) {\n\t$current = getCurrentPage();\n\t$total = max(1, getTotalPages($_oneImagePage));\n\t$nav = getPageNavList($_oneImagePage, $navlen, $firstlast, $current, $total);\n\tif ($total > 1) {\n\t\t?>\n\t\t<div <?php if ($id) echo ' id=\"'.$id.'\"'; ?> class=\"<?php echo $class; ?>\">\n\t\t\t<ul class=\"<?php echo $class; ?>\">\n\t\t\t\t<?php\n\t\t\t\t$prev = $nav['prev'];\n\t\t\t\tunset($nav['prev']);\n\t\t\t\t$next = $nav['next'];\n\t\t\t\tunset($nav['next']);\n\t\t\t\tif ($nextprev) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li class=\"prev\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tif ($prev) {\n\t\t\t\t\t\t\tprintLinkHTML($prev, html_encode($prevtext), gettext('Previous Page'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<span class=\"disabledlink\"><?php echo html_encode($prevtext); ?></span>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\t$last = NULL;\n\t\t\t\tif ($firstlast) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li class=\"<?php\n\t\t\t\t\tif ($current == 1)\n\t\t\t\t\t\techo 'current';\n\t\t\t\t\telse\n\t\t\t\t\t\techo 'first';\n\t\t\t\t\t?>\">\n\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\tif ($current == 1) {\n\t\t\t\t\t\t\t\t\techo '1';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tprintLinkHTML($nav[1], 1, gettext(\"Page 1\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t\t$last = 1;\n\t\t\t\t\tunset($nav[1]);\n\t\t\t\t}\n\t\t\t\tforeach ($nav as $i => $link) {\n\t\t\t\t\t$d = $i - $last;\n\t\t\t\t\tif ($d > 2) {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$k1 = $i - (int) (($i - $last) / 2);\n\t\t\t\t\t\t\tprintLinkHTML(getPageNumURL($k1, $total), '...', sprintf(ngettext('Page %u', 'Page %u', $k1), $k1));\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t} else if ($d == 2) {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$k1 = $last + 1;\n\t\t\t\t\t\t\tprintLinkHTML(getPageNumURL($k1, $total), $k1, sprintf(ngettext('Page %u', 'Page %u', $k1), $k1));\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<li<?php if ($current == $i) echo ' class=\"current\"'; ?>>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tif ($i == $current) {\n\t\t\t\t\t\t\techo $i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$title = sprintf(ngettext('Page %1$u', 'Page %1$u', $i), $i);\n\t\t\t\t\t\t\tprintLinkHTML($link, $i, $title);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t\t$last = $i;\n\t\t\t\t\tunset($nav[$i]);\n\t\t\t\t\tif ($firstlast && count($nav) == 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($firstlast) {\n\t\t\t\t\tforeach ($nav as $i => $link) {\n\t\t\t\t\t\t$d = $i - $last;\n\t\t\t\t\t\tif ($d > 2) {\n\t\t\t\t\t\t\t$k1 = $i - (int) (($i - $last) / 2);\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<?php printLinkHTML(getPageNumURL($k1, $total), '...', sprintf(ngettext('Page %u', 'Page %u', $k1), $k1)); ?>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t} else if ($d == 2) {\n\t\t\t\t\t\t\t$k1 = $last + 1;\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<?php printLinkHTML(getPageNumURL($k1, $total), $k1, sprintf(ngettext('Page %u', 'Page %u', $k1), $k1)); ?>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<li class=\"last<?php if ($current == $i) echo ' current'; ?>\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\tif ($current == $i) {\n\t\t\t\t\t\t\t\techo $i;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tprintLinkHTML($link, $i, sprintf(ngettext('Page %u', 'Page %u', $i), $i));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($nextprev) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li class=\"next\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tif ($next) {\n\t\t\t\t\t\t\tprintLinkHTML($next, html_encode($nexttext), gettext('Next Page'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<span class=\"disabledlink\"><?php echo html_encode($nexttext); ?></span>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</ul>\n\t\t</div>\n\t\t<?php\n\t}\n}\n\n//*** Album Context ************************\n//******************************************\n\n/**\n * Sets the album passed as the current album\n *\n * @param object $album the album to be made current\n */\nfunction makeAlbumCurrent($album) {\n\tglobal $_zp_current_album;\n\t$_zp_current_album = $album;\n\tset_context(ZP_INDEX | ZP_ALBUM);\n}\n\n/**\n * Returns the raw title of the current album.\n *\n * @return string\n */\nfunction getAlbumTitle() {\n\tif (!in_context(ZP_ALBUM))\n\t\treturn false;\n\tglobal $_zp_current_album;\n\treturn $_zp_current_album->getTitle();\n}\n\n/**\n * Returns a text-only title of the current album.\n *\n * @return string\n */\nfunction getBareAlbumTitle() {\n\treturn getBare(getAlbumTitle());\n}\n\n/**\n * Returns an album title taged with of Not visible or password protected status\n *\n * @return string;\n */\nfunction getAnnotatedAlbumTitle() {\n\tglobal $_zp_current_album;\n\t$title = getBareAlbumTitle();\n\t$pwd = $_zp_current_album->getPassword();\n\tif (zp_loggedin() && !empty($pwd)) {\n\t\t$title .= \"\\n\" . gettext('The album is password protected.');\n\t}\n\tif (!$_zp_current_album->getShow()) {\n\t\t$title .= \"\\n\" . gettext('The album is un-published.');\n\t}\n\treturn $title;\n}\n\nfunction printAnnotatedAlbumTitle() {\n\techo html_encode(getAnnotatedAlbumTitle());\n}\n\n/**\n * Prints an encapsulated title of the current album.\n * If you are logged in you can click on this to modify the title on the fly.\n *\n * @author Ozh\n */\nfunction printAlbumTitle() {\n\techo html_encodeTagged(getAlbumTitle());\n}\n\nfunction printBareAlbumTitle() {\n\techo html_encodeTagged(getBareAlbumTitle());\n}\n\n/**\n * Gets the 'n' for n of m albums\n *\n * @return int\n */\nfunction albumNumber() {\n\tglobal $_zp_current_album, $_zp_current_image, $_zp_current_search, $_zp_gallery;\n\t$name = $_zp_current_album->getFileName();\n\tif (in_context(ZP_SEARCH)) {\n\t\t$albums = $_zp_current_search->getAlbums();\n\t} else if (in_context(ZP_ALBUM)) {\n\t\t$parent = $_zp_current_album->getParent();\n\t\tif (is_null($parent)) {\n\t\t\t$albums = $_zp_gallery->getAlbums();\n\t\t} else {\n\t\t\t$albums = $parent->getAlbums();\n\t\t}\n\t}\n\t$c = 0;\n\tforeach ($albums as $albumfolder) {\n\t\t$c++;\n\t\tif ($name == $albumfolder) {\n\t\t\treturn $c;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Returns an array of the names of the parents of the current album.\n *\n * @param object $album optional album object to use inseted of the current album\n * @return array\n */\nfunction getParentAlbums($album = null) {\n\t$parents = array();\n\tif (in_context(ZP_ALBUM)) {\n\t\tglobal $_zp_current_album, $_zp_current_search, $_zp_gallery;\n\t\tif (is_null($album)) {\n\t\t\tif (in_context(ZP_SEARCH_LINKED) && !in_context(ZP_ALBUM_LINKED)) {\n\t\t\t\t$album = $_zp_current_search->getDynamicAlbum();\n\t\t\t\tif (empty($album))\n\t\t\t\t\treturn $parents;\n\t\t\t} else {\n\t\t\t\t$album = $_zp_current_album;\n\t\t\t}\n\t\t}\n\t\twhile (!is_null($album = $album->getParent())) {\n\t\t\tarray_unshift($parents, $album);\n\t\t}\n\t}\n\treturn $parents;\n}\n\n/**\n * returns the breadcrumb item for the current images's album\n *\n * @param string $title Text to be used as the URL title tag\n * @return array\n */\nfunction getAlbumBreadcrumb($title = NULL) {\n\tglobal $_zp_current_search, $_zp_gallery, $_zp_current_album, $_zp_last_album;\n\t$output = array();\n\tif (in_context(ZP_SEARCH_LINKED)) {\n\t\t$album = NULL;\n\t\t$dynamic_album = $_zp_current_search->getDynamicAlbum();\n\t\tif (empty($dynamic_album)) {\n\t\t\tif (!is_null($_zp_current_album)) {\n\t\t\t\tif (in_context(ZP_ALBUM_LINKED) && $_zp_last_album == $_zp_current_album->name) {\n\t\t\t\t\t$album = $_zp_current_album;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (in_context(ZP_IMAGE) && in_context(ZP_ALBUM_LINKED)) {\n\t\t\t\t$album = $_zp_current_album;\n\t\t\t} else {\n\t\t\t\t$album = $dynamic_album;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$album = $_zp_current_album;\n\t}\n\tif ($album) {\n\t\tif (is_null($title)) {\n\t\t\t$title = $album->getTitle();\n\t\t\tif (empty($title)) {\n\t\t\t\t$title = gettext('Album Thumbnails');\n\t\t\t}\n\t\t}\n\t\treturn array('link' => $album->getLink(), 'text' => $title, 'title' => getBare($title));\n\t}\n\treturn false;\n}\n\n/**\n * prints the breadcrumb item for the current images's album\n *\n * @param string $before Text to place before the breadcrumb\n * @param string $after Text to place after the breadcrumb\n * @param string $title Text to be used as the URL title attribute and text link\n */\nfunction printAlbumBreadcrumb($before = '', $after = '', $title = NULL) {\n\tif ($breadcrumb = getAlbumBreadcrumb($title)) {\n\t\tif ($before) {\n\t\t\t$output = '<span class=\"beforetext\">' . html_encode($before) . '</span>';\n\t\t} else {\n\t\t\t$output = '';\n\t\t}\n\t\t$output .= '<a href=\"' . html_encode($breadcrumb['link']) . '\" title=\"' . html_encode($breadcrumb['title']) . '\">';\n\t\t$output .= html_encode($breadcrumb['text']);\n\t\t$output .= '</a>';\n\t\tif ($after) {\n\t\t\t$output .= '<span class=\"aftertext\">' . html_encode($after) . '</span>';\n\t\t}\n\t\techo $output;\n\t}\n}\n\n/**\n * Prints the \"breadcrumb\" for a search page\n * \t\tif the search was for a data range, the breadcrumb is \"Archive\"\n * \t\totherwise it is \"Search\"\n * @param string $between Insert here the text to be printed between the links\n * @param string $class is the class for the link (if present)\n * @param string $search text for a search page title\n * @param string $archive text for an archive page title\n * @param string $format data format for archive page crumb\n */\nfunction printSearchBreadcrumb($between = NULL, $class = NULL, $search = NULL, $archive = NULL, $format = '%B %Y') {\n\tglobal $_zp_current_search;\n\tif (is_null($between)) {\n\t\t$between = ' | ';\n\t}\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif ($d = $_zp_current_search->getSearchDate()) {\n\t\tif (is_null($archive)) {\n\t\t\t$text = gettext('Archive');\n\t\t\t$textdecoration = true;\n\t\t} else {\n\t\t\t$text = getBare(html_encode($archive));\n\t\t\t$textdecoration = false;\n\t\t}\n\t\techo \"<a href=\\\"\" . html_encode(getCustomPageURL('archive', NULL)) . \"\\\"$class title=\\\"\" . $text . \"\\\">\";\n\t\tprintf('%s' . $text . '%s', $textdecoration ? '<em>' : '', $textdecoration ? '</em>' : '');\n\t\techo \"</a>\";\n\t\techo '<span class=\"betweentext\">' . html_encode($between) . '</span>';\n\t\tif ($format) {\n\t\t\t$d = strtotime($d);\n\t\t\t$d = strftime($format, $d);\n\t\t}\n\t\techo $d;\n\t} else {\n\t\tif (is_null($search)) {\n\t\t\t$text = gettext('Search');\n\t\t\t$textdecoration = true;\n\t\t} else {\n\t\t\t$text = getBare(html_encode($search));\n\t\t\t$textdecoration = false;\n\t\t}\n\t\tprintf('%s' . $text . '%s', $textdecoration ? '<em>' : '', $textdecoration ? '</em>' : '');\n\t}\n}\n\n/**\n * returns the breadcrumb navigation for album, gallery and image view.\n *\n * @return array\n */\nfunction getParentBreadcrumb() {\n\tglobal $_zp_gallery, $_zp_current_search, $_zp_current_album, $_zp_last_album;\n\t$output = array();\n\tif (in_context(ZP_SEARCH_LINKED)) {\n\t\t$page = $_zp_current_search->page;\n\t\t$searchwords = $_zp_current_search->getSearchWords();\n\t\t$searchdate = $_zp_current_search->getSearchDate();\n\t\t$searchfields = $_zp_current_search->getSearchFields(true);\n\t\t$search_album_list = $_zp_current_search->getAlbumList();\n\t\tif (!is_array($search_album_list)) {\n\t\t\t$search_album_list = array();\n\t\t}\n\t\t$searchpagepath = getSearchURL($searchwords, $searchdate, $searchfields, $page, array('albums' => $search_album_list));\n\t\t$dynamic_album = $_zp_current_search->getDynamicAlbum();\n\t\tif (empty($dynamic_album)) {\n\t\t\tif (empty($searchdate)) {\n\t\t\t\t$output[] = array('link' => $searchpagepath, 'title' => gettext(\"Return to search\"), 'text' => gettext(\"Search\"));\n\t\t\t\tif (is_null($_zp_current_album)) {\n\t\t\t\t\treturn $output;\n\t\t\t\t} else {\n\t\t\t\t\t$parents = getParentAlbums();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn array(array('link' => $searchpagepath, 'title' => gettext(\"Return to archive\"), 'text' => gettext(\"Archive\")));\n\t\t\t}\n\t\t} else {\n\t\t\t$album = $dynamic_album;\n\t\t\t$parents = getParentAlbums($album);\n\t\t\tif (in_context(ZP_ALBUM_LINKED)) {\n\t\t\t\tarray_push($parents, $album);\n\t\t\t}\n\t\t}\n// remove parent links that are not in the search path\n\t\tforeach ($parents as $key => $analbum) {\n\t\t\t$target = $analbum->name;\n\t\t\tif ($target !== $dynamic_album && !in_array($target, $search_album_list)) {\n\t\t\t\tunset($parents[$key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$parents = getParentAlbums();\n\t}\n\t$n = count($parents);\n\tif ($n > 0) {\n\t\tarray_push($parents, $_zp_current_album);\n\t\t$index = -1;\n\t\tforeach ($parents as $parent) {\n\t\t\t$index++;\n\t\t\tif($index != 0) {\n\t\t\t\t$parentparent = $parents[$index-1];\n\t\t\t\t$page = $parent->getGalleryPage();\n\t\t\t\t$url = $parentparent->getLink($page);\n\t\t\t\t$output[] = array('link' => html_encode($url), 'title' => $parentparent->getTitle(), 'text' => $parentparent->getTitle());\n\t\t\t}\n\t\t}\n\t}\n\treturn $output;\n}\n\n/**\n * Prints the breadcrumb navigation for album, gallery and image view.\n *\n * @param string $before Insert here the text to be printed before the links\n * @param string $between Insert here the text to be printed between the links\n * @param string $after Insert here the text to be printed after the links\n * @param mixed $truncate if not empty, the max lenght of the description.\n * @param string $elipsis the text to append to the truncated description\n */\nfunction printParentBreadcrumb($before = NULL, $between = NULL, $after = NULL, $truncate = NULL, $elipsis = NULL) {\n\t$crumbs = getParentBreadcrumb();\n\tif (!empty($crumbs)) {\n\t\tif (is_null($between)) {\n\t\t\t$between = ' | ';\n\t\t}\n\t\tif (is_null($after)) {\n\t\t\t$after = ' | ';\n\t\t}\n\t\tif (is_null($elipsis)) {\n\t\t\t$elipsis = '...';\n\t\t}\n\t\tif ($before) {\n\t\t\t$output = '<span class=\"beforetext\">' . html_encode($before) . '</span>';\n\t\t} else {\n\t\t\t$output = '';\n\t\t}\n\t\tif ($between) {\n\t\t\t$between = '<span class=\"betweentext\">' . html_encode($between) . '</span>';\n\t\t}\n\t\t$i = 0;\n\t\tforeach ($crumbs as $crumb) {\n\t\t\tif ($i > 0) {\n\t\t\t\t$output .= $between;\n\t\t\t}\n//cleanup things in description for use as attribute tag\n\t\t\t$desc = $crumb['title'];\n\t\t\tif (!empty($desc) && $truncate) {\n\t\t\t\t$desc = truncate_string($desc, $truncate, $elipsis);\n\t\t\t}\n\t\t\t$output .= '<a href=\"' . html_encode($crumb['link']) . '\"' . ' title=\"' . html_encode(getBare($desc)) . '\">' . html_encode($crumb['text']) . '</a>';\n\t\t\t$i++;\n\t\t}\n\t\tif ($after) {\n\t\t\t$output .= '<span class=\"aftertext\">' . html_encode($after) . '</span>';\n\t\t}\n\t\techo $output;\n\t}\n}\n\n/**\n * Prints a link to the 'main website', not the Zenphoto site home page!\n * Only prints the link if the url is not empty and does not point back the gallery page\n *\n * @param string $before text to precede the link\n * @param string $after text to follow the link\n * @param string $title Title text\n * @param string $class optional css class\n * @param string $id optional css id\n *  */\nfunction printHomeLink($before = '', $after = '', $title = NULL, $class = NULL, $id = NULL) {\n\tglobal $_zp_gallery;\n\t$site = rtrim($_zp_gallery->getWebsiteURL(), '/');\n\tif (!empty($site)) {\n\t\t$name = $_zp_gallery->getWebsiteTitle();\n\t\tif (empty($name)) {\n\t\t\t$name = gettext('Home');\n\t\t}\n\t\tif ($site != SEO_FULLWEBPATH) {\n\t\t\tif ($before) {\n\t\t\t\techo '<span class=\"beforetext\">' . html_encode($before) . '</span>';\n\t\t\t}\n\t\t\tprintLinkHTML($site, $name, $title, $class, $id);\n\t\t\tif ($after) {\n\t\t\t\techo '<span class=\"aftertext\">' . html_encode($after) . '</span>';\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Returns the formatted date field of the album\n *\n * @param string $format optional format string for the date\n * @return string\n */\nfunction getAlbumDate($format = null) {\n\tglobal $_zp_current_album;\n\t$d = $_zp_current_album->getDateTime();\n\tif (empty($d) || ($d == '0000-00-00 00:00:00')) {\n\t\treturn false;\n\t}\n\tif (is_null($format)) {\n\t\treturn $d;\n\t}\n\treturn zpFormattedDate($format, strtotime($d));\n}\n\n/**\n * Prints the date of the current album\n *\n * @param string $before Insert here the text to be printed before the date.\n * @param string $format Format string for the date formatting\n */\nfunction printAlbumDate($before = '', $format = NULL) {\n\tglobal $_zp_current_album;\n\tif (is_null($format)) {\n\t\t$format = DATE_FORMAT;\n\t}\n\t$date = getAlbumDate($format);\n\tif ($date) {\n\t\tif ($before) {\n\t\t\t$date = '<span class=\"beforetext\">' . $before . '</span>' . $date;\n\t\t}\n\t}\n\techo html_encodeTagged($date);\n}\n\n/**\n * Returns the Location of the album.\n *\n * @return string\n */\nfunction getAlbumLocation() {\n\tglobal $_zp_current_album;\n\treturn $_zp_current_album->getLocation();\n}\n\n/**\n * Prints the location of the album\n *\n * @author Ozh\n */\nfunction printAlbumLocation() {\n\techo html_encodeTagged(getAlbumLocation());\n}\n\n/**\n * Returns the raw description of the current album.\n *\n * @return string\n */\nfunction getAlbumDesc() {\n\tif (!in_context(ZP_ALBUM))\n\t\treturn false;\n\tglobal $_zp_current_album;\n\treturn $_zp_current_album->getDesc();\n}\n\n/**\n * Returns a text-only description of the current album.\n *\n * @return string\n */\nfunction getBareAlbumDesc() {\n\treturn getBare(getAlbumDesc());\n}\n\n/**\n * Prints description of the current album\n *\n * @author Ozh\n */\nfunction printAlbumDesc() {\n\tglobal $_zp_current_album;\n\techo html_encodeTagged(getAlbumDesc());\n}\n\nfunction printBareAlbumDesc() {\n\techo html_encode(getBareAlbumDesc());\n}\n\n/**\n * Returns the custom_data field of the current album\n *\n * @return string\n */\nfunction getAlbumCustomData() {\n\tglobal $_zp_current_album;\n\treturn $_zp_current_album->getCustomData();\n}\n\n/**\n * Prints the custom_data field of the current album.\n * Converts and displays line break in the admin field as <br />.\n *\n * @author Ozh\n */\nfunction printAlbumCustomData() {\n\techo html_encodeTagged(getAlbumCustomData());\n}\n\n/**\n * A composit for getting album data\n *\n * @param string $field which field you want\n * @return string\n */\nfunction getAlbumData($field) {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_album_image;\n\treturn get_language_string($_zp_album_image->get($field));\n}\n\n/**\n * Prints arbitrary data from the album object\n *\n * @param string $field the field name of the data desired\n * @param string $label text to label the field\n * @author Ozh\n */\nfunction printAlbumData($field, $label = '') {\n\tglobal $_zp_current_album;\n\techo html_encodeTagged($_zp_current_album->get($field));\n}\n\n/**\n * Returns the album page number of the current image\n *\n * @param object $album optional album object\n * @return integer\n */\nfunction getAlbumPage($album = NULL) {\n\tglobal $_zp_current_album, $_zp_current_image, $_zp_current_search, $_firstPageImages;\n\tif (is_null($album))\n\t\t$album = $_zp_current_album;\n\t$page = 0;\n\tif (in_context(ZP_IMAGE) && !in_context(ZP_SEARCH)) {\n\t\tif ($_zp_current_album->isDynamic()) {\n\t\t\t$search = $_zp_current_album->getSearchEngine();\n\t\t\t$imageindex = $search->getImageIndex($_zp_current_album->name, $_zp_current_image->filename);\n\t\t\t$numalbums = $search->getNumAlbums();\n\t\t} else {\n\t\t\t$imageindex = $_zp_current_image->getIndex();\n\t\t\t$numalbums = $album->getNumAlbums();\n\t\t}\n\t\t$imagepage = floor(($imageindex - $_firstPageImages) / max(1, getOption('images_per_page'))) + 1;\n\t\t$albumpages = ceil($numalbums / max(1, getOption('albums_per_page')));\n\t\tif ($albumpages == 0 && $_firstPageImages > 0)\n\t\t\t$imagepage++;\n\t\t$page = $albumpages + $imagepage;\n\t}\n\treturn $page;\n}\n\n/**\n * Returns the album link url of the current album.\n *\n * @param object $album optional album object\n * @return string\n */\nfunction getAlbumURL($album = NULL) {\n\tglobal $_zp_current_album;\n\tif (is_null($album))\n\t\t$album = $_zp_current_album;\n\tif (in_context(ZP_IMAGE)) {\n\t\t$page = getAlbumPage($album);\n\t\tif ($page <= 1)\n\t\t\t$page = 0;\n\t} else {\n\t\t$page = 0;\n\t}\n\treturn $album->getLink($page);\n}\n\n/**\n * Prints the album link url of the current album.\n *\n * @param string $text Insert the link text here.\n * @param string $title Insert the title text here.\n * @param string $class Insert here the CSS-class name with with you want to style the link.\n * @param string $id Insert here the CSS-id name with with you want to style the link.\n */\nfunction printAlbumURL($text, $title, $class = NULL, $id = NULL) {\n\tprintLinkHTML(getAlbumURL(), $text, $title, $class, $id);\n}\n\n/**\n * Returns the name of the defined album thumbnail image.\n *\n * @return string\n */\nfunction getAlbumThumb() {\n\tglobal $_zp_current_album;\n\treturn $_zp_current_album->getThumb();\n}\n\n/**\n * Returns an img src link to the password protect thumb substitute\n *\n * @param string $extra extra stuff to put in the HTML\n * @return string\n */\nfunction getPasswordProtectImage($extra) {\n\tglobal $_zp_themeroot;\n\t$image = '';\n\t$themedir = SERVERPATH . '/themes/' . basename($_zp_themeroot);\n\tif (file_exists(internalToFilesystem($themedir . '/images/err-passwordprotected.png'))) {\n\t\t$image = $_zp_themeroot . '/images/err-passwordprotected.png';\n\t} else if (file_exists(internalToFilesystem($themedir . '/images/err-passwordprotected.gif'))) {\n\t\t$image = $_zp_themeroot . '/images/err-passwordprotected.gif';\n\t} else {\n\t\t$image = WEBPATH . '/' . ZENFOLDER . '/images/err-passwordprotected.png';\n\t}\n\treturn '<img src=\"' . $image . '\" ' . $extra . ' alt=\"protected\" />';\n}\n\n/**\n * Prints the album thumbnail image.\n *\n * @param string $alt Insert the text for the alternate image name here.\n * @param string $class Insert here the CSS-class name with with you want to style the link.\n * @param string $id Insert here the CSS-id name with with you want to style the link.\n * @param string $title option title attribute\n *  */\nfunction printAlbumThumbImage($alt, $class = NULL, $id = NULL , $title = null) {\n\tglobal $_zp_current_album, $_zp_themeroot;\n\tif (!$_zp_current_album->getShow()) {\n\t\t$class .= \" not_visible\";\n\t}\n\t$pwd = $_zp_current_album->getPassword();\n\tif (!empty($pwd)) {\n\t\t$class .= \" password_protected\";\n\t}\n\n\t$class = trim($class);\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif ($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\tif ($title) {\n\t\t$title = ' title=\"' . $title . '\"';\n\t}\n\t$thumbobj = $_zp_current_album->getAlbumThumbImage();\n\t$sizes = getSizeDefaultThumb($thumbobj);\n\t$size = ' width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\"';\n\tif (!getOption('use_lock_image') || $_zp_current_album->isMyItem(LIST_RIGHTS) || empty($pwd)) {\n\t\t$html = '<img src=\"' . html_encode(pathurlencode($thumbobj->getThumb('album'))) . '\"' . $size . ' alt=\"' . html_encode($alt) . '\"' . $class . $id . $title . ' />';\n\t\t$html = zp_apply_filter('standard_album_thumb_html', $html);\n\t\techo $html;\n\t} else {\n\t\techo getPasswordProtectImage($size);\n\t}\n}\n\n/**\n * Returns a link to a custom sized thumbnail of the current album\n *\n * @param int $size the size of the image to have\n * @param int $width width\n * @param int $height height\n * @param int $cropw crop width\n * @param int $croph crop height\n * @param int $cropx crop part x axis\n * @param int $cropy crop part y axis\n * @param bool $effects image effects (e.g. set 'gray' to force grayscale)\n *\n * @return string\n */\nfunction getCustomAlbumThumb($size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = null, $effects = NULL) {\n\tglobal $_zp_current_album;\n\t$thumb = $_zp_current_album->getAlbumThumbImage();\n\treturn $thumb->getCustomImage($size, $width, $height, $cropw, $croph, $cropx, $cropy, true, $effects);\n}\n\n/**\n * Prints a link to a custom sized thumbnail of the current album\n *\n * See getCustomImageURL() for details.\n *\n * @param string $alt Alt atribute text\n * @param int $size size\n * @param int $width width\n * @param int $height height\n * @param int $cropw cropwidth\n * @param int $croph crop height\n * @param int $cropx crop part x axis\n * @param int $cropy crop part y axis\n * @param string $class css class\n * @param string $id css id\n * @param string $title Optional title attribute\n *\n * @return string\n */\nfunction printCustomAlbumThumbImage($alt, $size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = null, $class = NULL, $id = NULL, $title = null) {\n\tglobal $_zp_current_album;\n\tif (!$_zp_current_album->getShow()) {\n\t\t$class .= \" not_visible\";\n\t}\n\t$pwd = $_zp_current_album->getPassword();\n\tif (!empty($pwd)) {\n\t\t$class .= \" password_protected\";\n\t}\n\t$class = trim($class);\n\t/* set the HTML image width and height parameters in case this image was \"imageDefault.png\" substituted for no thumbnail then the thumb layout is preserved */\n\t$sizes = getSizeCustomImage($size, $width, $height, $cropw, $croph, $cropx, $cropy);\n\t$sizing = ' width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\"';\n\tif($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\tif($title) {\n\t\t$title = ' title=\"' . html_encode($title) . '\"';\n\t}\n\tif (!getOption('use_lock_image') || $_zp_current_album->isMyItem(LIST_RIGHTS) || empty($pwd)) {\n\t\t$html = '<img src=\"' . html_encode(pathurlencode(getCustomAlbumThumb($size, $width, $height, $cropw, $croph, $cropx, $cropy))) . '\"' . $sizing . ' alt=\"' . html_encode($alt) . '\"' \n\t\t\t\t\t\t. $id . $class . $title . ' />';\n\t\t$html = zp_apply_filter('custom_album_thumb_html', $html);\n\t\techo $html;\n\t} else {\n\t\techo getPasswordProtectImage($sizing);\n\t}\n}\n\n/**\n * Called by ***MaxSpace functions to compute the parameters to be passed to xxCustomyyy functions.\n *\n * @param int $width maxspace width\n * @param int $height maxspace height\n * @param object $image the image in question\n * @param bool $thumb true if for a thumbnail\n */\nfunction getMaxSpaceContainer(&$width, &$height, $image, $thumb = false) {\n\tglobal $_zp_gallery;\n\t$upscale = getOption('image_allow_upscale');\n\t$imagename = $image->filename;\n\tif (!isImagePhoto($image) & $thumb) {\n\t\t$imgfile = $image->getThumbImageFile();\n\t\t$image = zp_imageGet($imgfile);\n\t\t$s_width = zp_imageWidth($image);\n\t\t$s_height = zp_imageHeight($image);\n\t} else {\n\t\t$s_width = $image->get('width');\n\t\tif ($s_width == 0)\n\t\t\t$s_width = max($width, $height);\n\t\t$s_height = $image->get('height');\n\t\tif ($s_height == 0)\n\t\t\t$s_height = max($width, $height);\n\t}\n\n\t$newW = round($height / $s_height * $s_width);\n\t$newH = round($width / $s_width * $s_height);\n\tif (DEBUG_IMAGE)\n\t\tdebugLog(\"getMaxSpaceContainer($width, $height, $imagename, $thumb): \\$s_width=$s_width; \\$s_height=$s_height; \\$newW=$newW; \\$newH=$newH; \\$upscale=$upscale;\");\n\tif ($newW > $width) {\n\t\tif ($upscale || $s_height > $newH) {\n\t\t\t$height = $newH;\n\t\t} else {\n\t\t\t$height = $s_height;\n\t\t\t$width = $s_width;\n\t\t}\n\t} else {\n\t\tif ($upscale || $s_width > $newW) {\n\t\t\t$width = $newW;\n\t\t} else {\n\t\t\t$height = $s_height;\n\t\t\t$width = $s_width;\n\t\t}\n\t}\n}\n\n/**\n * Returns a link to a un-cropped custom sized version of the current album thumb within the given height and width dimensions.\n *\n * @param int $width width\n * @param int $height height\n * @return string\n */\nfunction getCustomAlbumThumbMaxSpace($width, $height) {\n\tglobal $_zp_current_album;\n\t$albumthumb = $_zp_current_album->getAlbumThumbImage();\n\tgetMaxSpaceContainer($width, $height, $albumthumb, true);\n\treturn getCustomAlbumThumb(NULL, $width, $height, NULL, NULL, NULL, NULL);\n}\n\n/**\n * Prints a un-cropped custom sized album thumb within the given height and width dimensions.\n * Note: a class of 'not_visible' or 'password_protected' will be added as appropriate\n *\n * @param string $alt Alt text for the url\n * @param int $width width\n * @param int $height height\n * @param string $class Optional style class\n * @param string $id Optional style id\n * @param bool $thumbStandin set to true to treat as thumbnail\n * @param string $title optional title attribute\n */\nfunction printCustomAlbumThumbMaxSpace($alt, $width, $height, $class = NULL, $id = NULL, $title = null) {\n\tglobal $_zp_current_album;\n\t$albumthumb = $_zp_current_album->getAlbumThumbImage();\n\tgetMaxSpaceContainer($width, $height, $albumthumb, true);\n\tprintCustomAlbumThumbImage($alt, NULL, $width, $height, NULL, NULL, NULL, NULL, $class, $id, $title);\n}\n\n/**\n * Returns the next album\n *\n * @return object\n */\nfunction getNextAlbum() {\n\tglobal $_zp_current_album, $_zp_current_search, $_zp_gallery;\n\tif (in_context(ZP_SEARCH) || in_context(ZP_SEARCH_LINKED)) {\n\t\t$nextalbum = $_zp_current_search->getNextAlbum($_zp_current_album->name);\n\t} else if (in_context(ZP_ALBUM)) {\n\t\t$nextalbum = $_zp_current_album->getNextAlbum();\n\t} else {\n\t\treturn null;\n\t}\n\treturn $nextalbum;\n}\n\n/**\n * Get the URL of the next album in the gallery.\n *\n * @return string\n */\nfunction getNextAlbumURL() {\n\t$nextalbum = getNextAlbum();\n\tif ($nextalbum) {\n\t\treturn $nextalbum->getLink();\n\t}\n\treturn false;\n}\n\n/**\n * Returns the previous album\n *\n * @return object\n */\nfunction getPrevAlbum() {\n\tglobal $_zp_current_album, $_zp_current_search;\n\tif (in_context(ZP_SEARCH) || in_context(ZP_SEARCH_LINKED)) {\n\t\t$prevalbum = $_zp_current_search->getPrevAlbum($_zp_current_album->name);\n\t} else if (in_context(ZP_ALBUM)) {\n\t\t$prevalbum = $_zp_current_album->getPrevAlbum();\n\t} else {\n\t\treturn null;\n\t}\n\treturn $prevalbum;\n}\n\n/**\n * Get the URL of the previous album in the gallery.\n *\n * @return string\n */\nfunction getPrevAlbumURL() {\n\t$prevalbum = getPrevAlbum();\n\tif ($prevalbum) {\n\t\treturn $prevalbum->getLink();\n\t}\n\treturn false;\n}\n\n/**\n * Returns true if this page has image thumbs on it\n *\n * @return bool\n */\nfunction isImagePage() {\n\tif (getNumImages()) {\n\t\tglobal $_zp_page, $_firstPageImages;\n\t\t$imagestart = getTotalPages(2); // # of album pages\n\t\tif (!$_firstPageImages)\n\t\t\t$imagestart++; // then images start on the last album page.\n\t\treturn $_zp_page >= $imagestart;\n\t}\n\treturn false;\n}\n\n/**\n * Returns true if this page has album thumbs on it\n *\n * @return bool\n */\nfunction isAlbumPage() {\n\tglobal $_zp_page;\n\t$pageCount = Ceil(getNumAlbums() / max(1, getOption('albums_per_page')));\n\treturn ($_zp_page <= $pageCount);\n}\n\n/**\n * Returns the number of images in the album.\n *\n * @return int\n */\nfunction getNumImages() {\n\tglobal $_zp_current_album, $_zp_current_search;\n\tif ((in_context(ZP_SEARCH_LINKED) && !in_context(ZP_ALBUM_LINKED)) || in_context(ZP_SEARCH) && is_null($_zp_current_album)) {\n\t\treturn $_zp_current_search->getNumImages();\n\t} else {\n\t\treturn $_zp_current_album->getNumImages();\n\t}\n}\n\n/**\n * Returns the count of all the images in the album and any subalbums\n *\n * @param object $album The album whose image count you want\n * @return int\n * @since 1.1.4\n */\nfunction getTotalImagesIn($album) {\n\tglobal $_zp_gallery;\n\t$sum = $album->getNumImages();\n\t$subalbums = $album->getAlbums(0);\n\twhile (count($subalbums) > 0) {\n\t\t$albumname = array_pop($subalbums);\n\t\t$album = newAlbum($albumname);\n\t\t$sum = $sum + getTotalImagesIn($album);\n\t}\n\treturn $sum;\n}\n\n/**\n * Returns the next image on a page.\n * sets $_zp_current_image to the next image in the album.\n\n * Returns true if there is an image to be shown\n *\n * @param bool $all set to true disable pagination\n * @param int $firstPageCount the number of images which can go on the page that transitions between albums and images\n * \t\t\t\t\t\t\tNormally this parameter should be NULL so as to use the default computations.\n * @param bool $mine overridePassword the password check\n * @return bool\n *\n * @return bool\n */\nfunction next_image($all = false, $firstPageCount = NULL, $mine = NULL) {\n\tglobal $_zp_images, $_zp_current_image, $_zp_current_album, $_zp_page, $_zp_current_image_restore, $_zp_current_search, $_zp_gallery, $_firstPageImages;\n\tif (is_null($firstPageCount)) {\n\t\t$firstPageCount = $_firstPageImages;\n\t}\n\t$imagePageOffset = getTotalPages(2); /* gives us the count of pages for album thumbs */\n\tif ($all) {\n\t\t$imagePage = 1;\n\t\t$firstPageCount = 0;\n\t} else {\n\t\t$_firstPageImages = $firstPageCount; /* save this so pagination can see it */\n\t\t$imagePage = $_zp_page - $imagePageOffset;\n\t}\n\tif ($firstPageCount > 0 && $imagePageOffset > 0) {\n\t\t$imagePage = $imagePage + 1; /* can share with last album page */\n\t}\n\tif ($imagePage <= 0) {\n\t\treturn false; /* we are on an album page */\n\t}\n\tif (is_null($_zp_images)) {\n\t\tif (in_context(ZP_SEARCH)) {\n\t\t\t$_zp_images = $_zp_current_search->getImages($all ? 0 : ($imagePage), $firstPageCount, NULL, NULL, true, $mine);\n\t\t} else {\n\t\t\t$_zp_images = $_zp_current_album->getImages($all ? 0 : ($imagePage), $firstPageCount, NULL, NULL, true, $mine);\n\t\t}\n\t\tif (empty($_zp_images)) {\n\t\t\treturn NULL;\n\t\t}\n\t\t$_zp_current_image_restore = $_zp_current_image;\n\t\t$img = array_shift($_zp_images);\n\t\t$_zp_current_image = newImage($_zp_current_album, $img, true, true);\n\t\tsave_context();\n\t\tadd_context(ZP_IMAGE);\n\t\treturn true;\n\t} else if (empty($_zp_images)) {\n\t\t$_zp_images = NULL;\n\t\t$_zp_current_image = $_zp_current_image_restore;\n\t\trestore_context();\n\t\treturn false;\n\t} else {\n\t\t$img = array_shift($_zp_images);\n\t\t$_zp_current_image = newImage($_zp_current_album, $img, true, true);\n\t\treturn true;\n\t}\n}\n\n//*** Image Context ************************\n//******************************************\n\n/**\n * Sets the image passed as the current image\n *\n * @param object $image the image to become current\n */\nfunction makeImageCurrent($image) {\n\tif (!is_object($image))\n\t\treturn;\n\tglobal $_zp_current_album, $_zp_current_image;\n\t$_zp_current_image = $image;\n\t$_zp_current_album = $_zp_current_image->getAlbum();\n\tset_context(ZP_INDEX | ZP_ALBUM | ZP_IMAGE);\n}\n\n/**\n * Returns the raw title of the current image.\n *\n * @return string\n */\nfunction getImageTitle() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getTitle();\n}\n\n/**\n * Returns a text-only title of the current image.\n *\n * @return string\n */\nfunction getBareImageTitle() {\n\treturn getBare(getImageTitle());\n}\n\n/**\n * Returns the image title taged with not visible annotation.\n *\n * @return string\n */\nfunction getAnnotatedImageTitle() {\n\tglobal $_zp_current_image;\n\t$title = getBareImageTitle();\n\tif (!$_zp_current_image->getShow()) {\n\t\t$title .= \"\\n\" . gettext('The image is marked un-published.');\n\t}\n\treturn $title;\n}\n\nfunction printAnnotatedImageTitle() {\n\techo html_encode(getAnnotatedImageTitle());\n}\n\n/**\n * Prints title of the current image\n *\n * @author Ozh\n */\nfunction printImageTitle() {\n\techo html_encodeTagged(getImageTitle());\n}\n\nfunction printBareImageTitle() {\n\techo html_encode(getBareImageTitle());\n}\n\n/**\n * Returns the 'n' of n of m images\n *\n * @return int\n */\nfunction imageNumber() {\n\tglobal $_zp_current_image, $_zp_current_search, $_zp_current_album;\n\t$name = $_zp_current_image->getFileName();\n\tif (in_context(ZP_SEARCH) || (in_context(ZP_SEARCH_LINKED) && !in_context(ZP_ALBUM_LINKED))) {\n\t\t$folder = $_zp_current_image->imagefolder;\n\t\t$images = $_zp_current_search->getImages();\n\t\t$c = 0;\n\t\tforeach ($images as $image) {\n\t\t\t$c++;\n\t\t\tif ($name == $image['filename'] && $folder == $image['folder']) {\n\t\t\t\treturn $c;\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn $_zp_current_image->getIndex() + 1;\n\t}\n\treturn false;\n}\n\n/**\n * Returns the image date of the current image in yyyy-mm-dd hh:mm:ss format.\n * Pass it a date format string for custom formatting\n *\n * @param string $format formatting string for the data\n * @return string\n */\nfunction getImageDate($format = null) {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\t$d = $_zp_current_image->getDateTime();\n\tif (empty($d) || ($d == '0000-00-00 00:00:00')) {\n\t\treturn false;\n\t}\n\tif (is_null($format)) {\n\t\treturn $d;\n\t}\n\treturn zpFormattedDate($format, strtotime($d));\n}\n\n/**\n * Prints the date of the current album\n *\n * @param string $before Insert here the text to be printed before the date.\n * @param string $format Format string for the date formatting\n */\nfunction printImageDate($before = '', $format = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($format)) {\n\t\t$format = DATE_FORMAT;\n\t}\n\t$date = getImageDate($format);\n\tif ($date) {\n\t\tif ($before) {\n\t\t\t$date = '<span class=\"beforetext\">' . $before . '</span>' . $date;\n\t\t}\n\t}\n\techo html_encodeTagged($date);\n}\n\n// IPTC fields\n/**\n * Returns the Location field of the current image\n *\n * @return string\n */\nfunction getImageLocation() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getLocation();\n}\n\n/**\n * Returns the City field of the current image\n *\n * @return string\n */\nfunction getImageCity() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getcity();\n}\n\n/**\n * Returns the State field of the current image\n *\n * @return string\n */\nfunction getImageState() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getState();\n}\n\n/**\n * Returns the Country field of the current image\n *\n * @return string\n */\nfunction getImageCountry() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getCountry();\n}\n\n/**\n * Returns the raw description of the current image.\n * new lines are replaced with <br /> tags\n *\n * @return string\n */\nfunction getImageDesc() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getDesc();\n}\n\n/**\n * Returns a text-only description of the current image.\n *\n * @return string\n */\nfunction getBareImageDesc() {\n\treturn getBare(getImageDesc());\n}\n\n/**\n * Prints the description of the current image.\n * Converts and displays line breaks set in the admin field as <br />.\n *\n */\nfunction printImageDesc() {\n\techo html_encodeTagged(getImageDesc());\n}\n\nfunction printBareImageDesc() {\n\techo html_encode(getBareImageDesc());\n}\n\n/**\n * A composit for getting image data\n *\n * @param string $field which field you want\n * @return string\n */\nfunction getImageData($field) {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn get_language_string($_zp_current_image->get($field));\n}\n\n/**\n * Returns the custom_data field of the current image\n *\n * @return string\n */\nfunction getImageCustomData() {\n\tGlobal $_zp_current_image;\n\treturn $_zp_current_image->getCustomData();\n}\n\n/**\n * Prints the custom_data field of the current image.\n * Converts and displays line breaks set in the admin field as <br />.\n *\n * @return string\n */\nfunction printImageCustomData() {\n\t$data = getImageCustomData();\n\t$data = str_replace(\"\\r\\n\", \"\\n\", $data);\n\t$data = str_replace(\"\\n\", \"<br />\", $data);\n\techo $data;\n}\n\n/**\n * Prints arbitrary data from the image object\n *\n * @param string $field the field name of the data desired\n * @param string $label text to label the field.\n * @author Ozh\n */\nfunction printImageData($field, $label = '') {\n  global $_zp_current_image;\n  $text = getImageData($field);\n  if (!empty($text)) {\n    echo html_encodeTagged($label . $text);\n  }\n}\n\n/**\n * True if there is a next image\n *\n * @return bool\n */\nfunction hasNextImage() {\n  global $_zp_current_image;\n  if (is_null($_zp_current_image))\n    return false;\n  return $_zp_current_image->getNextImage();\n}\n\n/**\n * True if there is a previous image\n *\n * @return bool\n */\nfunction hasPrevImage() {\n  global $_zp_current_image;\n  if (is_null($_zp_current_image))\n    return false;\n  return $_zp_current_image->getPrevImage();\n}\n\n/**\n * Returns the url of the next image.\n *\n * @return string\n */\nfunction getNextImageURL() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_album, $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\t$nextimg = $_zp_current_image->getNextImage();\n\treturn $nextimg->getLink();\n}\n\n/**\n * Returns the url of the previous image.\n *\n * @return string\n */\nfunction getPrevImageURL() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_album, $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\t$previmg = $_zp_current_image->getPrevImage();\n\treturn $previmg->getLink();\n}\n\n/**\n * Returns the thumbnail of the previous image.\n *\n * @return string\n */\nfunction getPrevImageThumb() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\t$img = $_zp_current_image->getPrevImage();\n\treturn $img->getThumb();\n}\n\n/**\n * Returns the thumbnail of the next image.\n *\n * @return string\n */\nfunction getNextImageThumb() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\t$img = $_zp_current_image->getNextImage();\n\treturn $img->getThumb();\n}\n\n/**\n * Returns the url of the current image.\n *\n * @return string\n */\nfunction getImageURL() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\treturn $_zp_current_image->getLink();\n}\n\n/**\n * Prints the link to the current  image.\n *\n * @param string $text text for the link\n * @param string $title title tag for the link\n * @param string $class optional style class for the link\n * @param string $id optional style id for the link\n */\nfunction printImageURL($text, $title, $class = NULL, $id = NULL) {\n\tprintLinkHTML(getImageURL(), $text, $title, $class, $id);\n}\n\n/**\n * Returns the Metadata infromation from the current image\n *\n * @param $image optional image object\n * @param string $displayonly set to true to return only the items selected for display\n * @return array\n */\nfunction getImageMetaData($image = NULL, $displayonly = true) {\n\tglobal $_zp_current_image, $_zp_exifvars;\n\tif (is_null($image))\n\t\t$image = $_zp_current_image;\n\tif (is_null($image) || !$image->get('hasMetadata')) {\n\t\treturn false;\n\t}\n\t$data = $image->getMetaData();\n\tif ($displayonly) {\n\t\tforeach ($data as $field => $value) { //\tremove the empty or not selected to display\n\t\t\tif (!$value || !$_zp_exifvars[$field][3]) {\n\t\t\t\tunset($data[$field]);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($data) > 0) {\n\t\treturn $data;\n\t}\n\treturn false;\n}\n\n/**\n * Prints the Metadata data of the current image\n *\n * @param string $title title tag for the class\n * @param bool $toggle set to true to get a javascript toggle on the display of the data\n * @param string $id style class id\n * @param string $class style class\n * @author Ozh\n */\nfunction printImageMetadata($title = NULL, $toggle = true, $id = 'imagemetadata', $class = null, $span = NULL) {\n\tglobal $_zp_exifvars, $_zp_current_image;\n\tif (false === ($exif = getImageMetaData($_zp_current_image, true))) {\n\t\treturn;\n\t}\n\tif (is_null($title)) {\n\t\t$title = gettext('Image Info');\n\t}\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif (!$span) {\n\t\t$span = 'exif_link';\n\t}\n\t$dataid = $id . '_data';\n\tif ($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\t$refh = $refa = $style = '';\n\tif ($toggle == 'colorbox' && zp_has_filter('theme_head', 'colorbox::css')) {\n\t\t$refh = '<a href=\"#\" class=\"colorbox\" title=\"' . $title . '\">';\n\t\t$refa = '</a>';\n\t\t$style = ' style=\"display:none\"';\n\t} else if ($toggle) {\n\t\t$refh = '<a class=\"metadata_toggle\" href=\"#\" title=\"' . $title . '\">';\n\t\t$refa = '</a>';\n\t\t$style = ' style=\"display:none\"';\n\t}\n\t?>\n\t<span id=\"<?php echo $span; ?>\" class=\"metadata_title\">\n\t\t<?php echo $refh; ?><?php echo $title; ?><?php echo $refa; ?>\n\t</span>\n\t<?php if($toggle) { ?>\n\t\t<script>\n\t\t\t$(\".metadata_toggle\").click(function(event) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\t$(\"#<?php echo $dataid; ?>\").toggle();\n\t\t\t});\n\t\t</script>\n\t<?php } ?>\n\t<div id=\"<?php echo $dataid; ?>\"<?php echo $style; ?>>\n\t\t<div<?php echo $id . $class; ?>>\n\t\t\t<table>\n\t\t\t\t<?php\n\t\t\t\tforeach ($exif as $field => $value) {\n\t\t\t\t\t$label = $_zp_exifvars[$field][2];\n\t\t\t\t\techo \"<tr><td class=\\\"label\\\">$label:</td><td class=\\\"value\\\">\";\n\t\t\t\t\tswitch ($_zp_exifvars[$field][6]) {\n\t\t\t\t\t\tcase 'time':\n\t\t\t\t\t\t\techo zpFormattedDate(DATE_FORMAT, strtotime($value));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\techo html_encode($value);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\techo \"</td></tr>\\n\";\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</table>\n\t\t</div>\n\t</div>\n\t<?php\n}\n\n/**\n * Returns an array with the height & width\n *\n * @param int $size size\n * @param int $width width\n * @param int $height height\n * @param int $cw crop width\n * @param int $ch crop height\n * @param int $cx crop x axis\n * @param int $cy crop y axis\n * @param $image object the image for which the size is desired. NULL means the current image\n * @return array\n */\nfunction getSizeCustomImage($size, $width = NULL, $height = NULL, $cw = NULL, $ch = NULL, $cx = NULL, $cy = NULL, $image = NULL) {\n  global $_zp_current_image;\n  if (is_null($image))\n    $image = $_zp_current_image;\n  if (is_null($image))\n    return false;\n\n  $h = $image->getHeight();\n  $w = $image->getWidth();\n\n  //if we set width/height we are cropping and those are the sizes already\n  if (!is_null($size) && !is_null($width) && !is_null($height)) {\n    return array($width, $height);\n  }\n\tif (isImageVideo($image)) { // size is determined by the player\n    return array($w, $h);\n  }\n  $side = getOption('image_use_side');\n  $us = getOption('image_allow_upscale');\n  $args = getImageParameters(array($size, $width, $height, $cw, $ch, $cx, $cy, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $image->album->name);\n  @list($size, $width, $height, $cw, $ch, $cx, $cy, $quality, $thumb, $crop, $thumbstandin, $passedWM, $adminrequest, $effects) = $args;\n  if (!empty($size)) {\n    $dim = $size;\n    $width = $height = false;\n  } else if (!empty($width)) {\n    $dim = $width;\n    $size = $height = false;\n  } else if (!empty($height)) {\n    $dim = $height;\n    $size = $width = false;\n  } else {\n    $dim = 1;\n  }\n\n  if ($w == 0) {\n    $hprop = 1;\n  } else {\n    $hprop = round(($h / $w) * $dim);\n  }\n  if ($h == 0) {\n    $wprop = 1;\n  } else {\n    $wprop = round(($w / $h) * $dim);\n  }\n\n  if (($size && ($side == 'longest' && $h > $w) || ($side == 'height') || ($side == 'shortest' && $h < $w)) || $height) {\n// Scale the height\n    $newh = $dim;\n    $neww = $wprop;\n  } else {\n// Scale the width\n    $neww = $dim;\n    $newh = $hprop;\n  }\n  if (!$us && $newh >= $h && $neww >= $w) {\n    return array($w, $h);\n  } else {\n    if ($cw && $cw < $neww)\n      $neww = $cw;\n    if ($ch && $ch < $newh)\n      $newh = $ch;\n    if ($size && $ch && $cw) {\n      $neww = $cw;\n      $newh = $ch;\n    }\n    return array($neww, $newh);\n  }\n}\n\n/**\n * Returns an array [width, height] of the default-sized image.\n *\n * @param int $size override the 'image_zize' option\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return array\n */\nfunction getSizeDefaultImage($size = NULL, $image = NULL) {\n  if (is_null($size))\n    $size = getOption('image_size');\n  return getSizeCustomImage($size, NULL, NULL, NULL, NULL, NULL, NULL, $image);\n}\n\n/**\n * Returns an array [width, height] of the original image.\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return array\n */\nfunction getSizeFullImage($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image))\n\t\t$image = $_zp_current_image;\n\tif (is_null($image))\n\t\treturn false;\n\treturn array($image->getWidth(), $image->getHeight());\n}\n\n/**\n * The width of the default-sized image (in printDefaultSizedImage)\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return int\n */\nfunction getDefaultWidth($size = NULL, $image = NULL) {\n\t$size_a = getSizeDefaultImage($size, $image);\n\treturn $size_a[0];\n}\n\n/**\n * Returns the height of the default-sized image (in printDefaultSizedImage)\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return int\n */\nfunction getDefaultHeight($size = NULL, $image = NULL) {\n\t$size_a = getSizeDefaultImage($size, $image);\n\treturn $size_a[1];\n}\n\n/**\n * Returns the width of the original image\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return int\n */\nfunction getFullWidth($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image))\n\t\t$image = $_zp_current_image;\n\tif (is_null($image))\n\t\treturn false;\n\treturn $image->getWidth();\n}\n\n/**\n * Returns the height of the original image\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return int\n */\nfunction getFullHeight($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image))\n\t\t$image = $_zp_current_image;\n\tif (is_null($image))\n\t\treturn false;\n\treturn $image->getHeight();\n}\n\n/**\n * Returns true if the image is landscape-oriented (width is greater than height)\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return bool\n */\nfunction isLandscape($image = NULL) {\n\tif (getFullWidth($image) >= getFullHeight($image))\n\t\treturn true;\n\treturn false;\n}\n\n/**\n * Returns the url to the default sized image.\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return string\n */\nfunction getDefaultSizedImage($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image))\n\t\t$image = $_zp_current_image;\n\tif (is_null($image))\n\t\treturn false;\n\treturn $image->getSizedImage(getOption('image_size'));\n}\n\n/**\n * Show video player with video loaded or display the image.\n *\n * @param string $alt Alt text\n * @param string $class Optional style class\n * @param string $id Optional style id\n * @param string $title Title attribute\n */\nfunction printDefaultSizedImage($alt, $class = NULL, $id = NULL, $title = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn;\n\tif (!$_zp_current_image->getShow()) {\n\t\t$class .= \" not_visible\";\n\t}\n\t$album = $_zp_current_image->getAlbum();\n\t$pwd = $album->getPassword();\n\tif (!empty($pwd)) {\n\t\t$class .= \" password_protected\";\n\t}\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif ($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\tif ($title) {\n\t\t$title = ' title=\"' . html_encode($title) . '\"';\n\t} \n\tif (isImagePhoto()) { //Print images\n\t\t$html = '<img src=\"' . html_encode(pathurlencode(getDefaultSizedImage())) . '\" alt=\"' . html_encode($alt) . '\"' .\n\t\t\t\t\t\t' width=\"' . getDefaultWidth() . '\" height=\"' . getDefaultHeight() . '\"' . $class . $id . $title . ' />';\n\t\t$html = zp_apply_filter('standard_image_html', $html);\n\t\techo $html;\n\t} else { // better be a plugin class then\n\t\techo $_zp_current_image->getContent();\n\t}\n}\n\n/**\n * Returns the url to the thumbnail of the current image.\n *\n * @return string\n */\nfunction getImageThumb() {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\treturn $_zp_current_image->getThumb();\n}\n\n/**\n * @param string $alt Alt text\n * @param string $class optional class tag\n * @param string $id optional id tag\n * @param string $title Title attribute\n */\nfunction printImageThumb($alt, $class = NULL, $id = NULL, $title = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn;\n\tif (!$_zp_current_image->getShow()) {\n\t\t$class .= \" not_visible\";\n\t}\n\t$album = $_zp_current_image->getAlbum();\n\t$pwd = $album->getPassword();\n\tif (!empty($pwd)) {\n\t\t$class .= \" password_protected\";\n\t}\n\t$url = getImageThumb();\n\t$sizes = getSizeDefaultThumb();\n\t$size = ' width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\"';\n\t$class = trim($class);\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif ($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\tif($title) {\n\t\t$title = ' title=\"' . html_encode($title) . '\"';\n\t}\n\t$html = '<img src=\"' . html_encode(pathurlencode($url)) . '\"' . $size . ' alt=\"' . html_encode($alt) . '\"' . $class . $id . $title . \" />\";\n\t$html = zp_apply_filter('standard_image_thumb_html', $html);\n\techo $html;\n}\n\n/**\n * Gets the width and height of a default thumb for the <img> tag height/width\n * @global type $_zp_current_image\n * @param obj $image Image object, if NULL the current image is used\n * @return aray\n */\nfunction getSizeDefaultThumb($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image)) {\n\t\t$image = $_zp_current_image;\n\t}\n\t$s = getOption('thumb_size');\n\tif (getOption('thumb_crop')) {\n\t\t$w = getOption('thumb_crop_width');\n\t\t$h = getOption('thumb_crop_height');\n\t\t$sizes = getSizeCustomImage($s, $w, $h, $w, $h, null, null, $image);\n\t} else {\n\t\t$w = $h = $s;\n\t\tgetMaxSpaceContainer($w, $h, $image, true);\n\t\t$sizes = array($w, $h);\n\t}\n\treturn $sizes;\n}\n\n/**\n * Returns the url to original image.\n * It will return a protected image is the option \"protect_full_image\" is set\n *\n * @param $image optional image object\n * @return string\n */\nfunction getFullImageURL($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image)) {\n\t\t$image = $_zp_current_image;\n\t}\n\tif (is_null($image)) {\n\t\treturn false;\n\t}\n\t$outcome = getOption('protect_full_image');\n\tif ($outcome == 'No access') {\n\t\treturn NULL;\n\t}\n\tif ($outcome == 'Unprotected') {\n\t\treturn $image->getFullImageURL();\n\t} else {\n\t\treturn getProtectedImageURL($image, $outcome);\n\t}\n}\n\n/**\n * Returns the \"raw\" url to the image in the albums folder\n *\n * @param $image optional image object\n * @return string\n *\n */\nfunction getUnprotectedImageURL($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image)) {\n\t\t$image = $_zp_current_image;\n\t}\n\tif (!is_null($image)) {\n\t\treturn $image->getFullImageURL();\n\t}\n}\n\n/**\n * Returns an url to the password protected/watermarked current image\n *\n * @param object $image optional image object overrides the current image\n * @param string $disposal set to override the 'protect_full_image' option\n * @return string\n * */\nfunction getProtectedImageURL($image = NULL, $disposal = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($disposal)) {\n\t\t$disposal = getOption('protect_full_image');\n\t}\n\tif ($disposal == 'No access')\n\t\treturn NULL;\n\tif (is_null($image)) {\n\t\tif (!in_context(ZP_IMAGE))\n\t\t\treturn false;\n\t\tif (is_null($_zp_current_image))\n\t\t\treturn false;\n\t\t$image = $_zp_current_image;\n\t}\n\t$album = $image->getAlbum();\n\t$watermark_use_image = getWatermarkParam($image, WATERMARK_FULL);\n\tif (!empty($watermark_use_image)) {\n\t\t$wmt = $watermark_use_image;\n\t} else {\n\t\t$wmt = false;\n\t}\n\t$args = array('FULL', NULL, NULL, NULL, NULL, NULL, NULL, (int) getOption('full_image_quality'), NULL, NULL, NULL, $wmt, false, NULL, NULL);\n\t$cache_file = getImageCacheFilename($album->name, $image->filename, $args);\n\t$cache_path = SERVERCACHE . $cache_file;\n\tif ($disposal != 'Download' && OPEN_IMAGE_CACHE && file_exists($cache_path)) {\n\t\treturn WEBPATH . '/' . CACHEFOLDER . pathurlencode(imgSrcURI($cache_file));\n\t} else if ($disposal == 'Unprotected') {\n\t\treturn getImageURI($args, $album->name, $image->filename, $image->filemtime);\n\t} else {\n\t\t$params = '&q=' . getOption('full_image_quality');\n\t\tif (!empty($watermark_use_image)) {\n\t\t\t$params .= '&wmk=' . $watermark_use_image;\n\t\t}\n\t\tif ($disposal) {\n\t\t\t$params .= '&dsp=' . $disposal;\n\t\t}\n\t\t$params .= '&check=' . sha1(HASH_SEED . serialize($args));\n\t\tif (is_array($image->filename)) {\n\t\t\t$album = dirname($image->filename['source']);\n\t\t\t$image = basename($image->filename['source']);\n\t\t} else {\n\t\t\t$album = $album->name;\n\t\t\t$image = $image->filename;\n\t\t}\n\t\treturn WEBPATH . '/' . ZENFOLDER . '/full-image.php?a=' . $album . '&i=' . $image . $params;\n\t}\n}\n\n/**\n * Returns a link to the current image custom sized to $size\n *\n * @param int $size The size the image is to be\n */\nfunction getSizedImageURL($size) {\n\treturn getCustomImageURL($size);\n}\n\n/**\n * Returns the url to the image with the dimensions you define with this function.\n *\n * @param int $size the size of the image to have\n * @param int $width width\n * @param int $height height\n * @param int $cropw crop width\n * @param int $croph crop height\n * @param int $cropx crop part x axis\n * @param int $cropy crop part y axis\n * @param bool $thumbStandin set true to inhibit watermarking\n * @param bool $effects image effects (e.g. set gray to force to grayscale)\n * @return string\n *\n * $size, $width, and $height are used in determining the final image size.\n * At least one of these must be provided. If $size is provided, $width and\n * $height are ignored. If both $width and $height are provided, the image\n * will have those dimensions regardless of the original image height/width\n * ratio. (Yes, this means that the image may be distorted!)\n *\n * The $crop* parameters determine the portion of the original image that\n * will be incorporated into the final image.\n *\n * $cropw and $croph \"sizes\" are typically proportional. That is you can\n * set them to values that reflect the ratio of width to height that you\n * want for the final image. Typically you would set them to the final\n * height and width. These values will always be adjusted so that they are\n * not larger than the original image dimensions.\n *\n * The $cropx and $cropy values represent the offset of the crop from the\n * top left corner of the image. If these values are provided, the $croph\n * and $cropw parameters are treated as absolute pixels not proportions of\n * the image. If cropx and cropy are not provided, the crop will be\n * \"centered\" in the image.\n *\n * When $cropx and $cropy are not provided the crop is offset from the top\n * left proportionally to the ratio of the final image size and the crop\n * size.\n *\n * Some typical croppings:\n *\n * $size=200, $width=NULL, $height=NULL, $cropw=200, $croph=100,\n * $cropx=NULL, $cropy=NULL produces an image cropped to a 2x1 ratio which\n * will fit in a 200x200 pixel frame.\n *\n * $size=NULL, $width=200, $height=NULL, $cropw=200, $croph=100, $cropx=100,\n * $cropy=10 will will take a 200x100 pixel slice from (10,100) of the\n * picture and create a 200x100 image\n *\n * $size=NULL, $width=200, $height=100, $cropw=200, $croph=120, $cropx=NULL,\n * $cropy=NULL will produce a (distorted) image 200x100 pixels from a 1x0.6\n * crop of the image.\n *\n * $size=NULL, $width=200, $height=NULL, $cropw=180, $croph=120, $cropx=NULL, $cropy=NULL\n * will produce an image that is 200x133 from a 1.5x1 crop that is 5% from the left\n * and 15% from the top of the image.\n *\n */\nfunction getCustomImageURL($size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = NULL, $thumbStandin = false, $effects = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\treturn $_zp_current_image->getCustomImage($size, $width, $height, $cropw, $croph, $cropx, $cropy, $thumbStandin, $effects);\n}\n\n/**\n * Print normal video or custom sized images.\n * Note: a class of 'not_visible' or 'password_protected' will be added as appropriate\n *\n * Notes on cropping:\n *\n * The $crop* parameters determine the portion of the original image that will be incorporated\n * into the final image. The w and h \"sizes\" are typically proportional. That is you can set them to\n * values that reflect the ratio of width to height that you want for the final image. Typically\n * you would set them to the fincal height and width.\n *\n * @param string $alt Alt text for the url\n * @param int $size size\n * @param int $width width\n * @param int $height height\n * @param int $cropw crop width\n * @param int $croph crop height\n * @param int $cropx crop x axis\n * @param int $cropy crop y axis\n * @param string $class Optional style class\n * @param string $id Optional style id\n * @param bool $thumbStandin set to true to treat as thumbnail\n * @param bool $effects image effects (e.g. set gray to force grayscale)\n * @param string $title title attribute\t\n * */\nfunction printCustomSizedImage($alt, $size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = NULL, $class = NULL, $id = NULL, $thumbStandin = false, $effects = NULL, $title = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn;\n\tif (!$_zp_current_image->getShow()) {\n\t\t$class .= \" not_visible\";\n\t}\n\t$album = $_zp_current_image->getAlbum();\n\t$pwd = $album->getPassword();\n\tif (!empty($pwd)) {\n\t\t$class .= \" password_protected\";\n\t}\n\tif ($size) {\n\t\t$dims = getSizeCustomImage($size);\n\t\t$sizing = ' width=\"' . $dims[0] . '\" height=\"' . $dims[1] . '\"';\n\t} else {\n\t\t$sizing = '';\n\t\tif ($width)\n\t\t\t$sizing .= ' width=\"' . $width . '\"';\n\t\tif ($height)\n\t\t\t$sizing .= ' height=\"' . $height . '\"';\n\t}\n\tif ($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif($title) {\n\t\t$title = ' title=\"' . html_encode($title) . '\"';\n\t}\n\tif (isImagePhoto() || $thumbStandin) {\n\t\t$html = '<img src=\"' . html_encode(pathurlencode(getCustomImageURL($size, $width, $height, $cropw, $croph, $cropx, $cropy, $thumbStandin, $effects))) . '\"' .\n\t\t\t\t\t\t' alt=\"' . html_encode($alt) . '\"' .\n\t\t\t\t\t\t$id . $class . $sizing . $title . ' />';\n\t\t$html = zp_apply_filter('custom_image_html', $html, $thumbStandin);\n\t\techo $html;\n\t} else { // better be a plugin\n\t\techo $_zp_current_image->getContent($width, $height);\n\t}\n}\n\n/**\n * Returns a link to a un-cropped custom sized version of the current image within the given height and width dimensions.\n * Use for sized images.\n *\n * @param int $width width\n * @param int $height height\n * @return string\n */\nfunction getCustomSizedImageMaxSpace($width, $height) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\tgetMaxSpaceContainer($width, $height, $_zp_current_image);\n\treturn getCustomImageURL(NULL, $width, $height);\n}\n\n/**\n * Returns a link to a un-cropped custom sized version of the current image within the given height and width dimensions.\n * Use for sized thumbnails.\n *\n * @param int $width width\n * @param int $height height\n * @return string\n */\nfunction getCustomSizedImageThumbMaxSpace($width, $height) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\tgetMaxSpaceContainer($width, $height, $_zp_current_image, true);\n\treturn getCustomImageURL(NULL, $width, $height, NULL, NULL, NULL, NULL, true);\n}\n\n/**\n * Creates image thumbnails which will fit un-cropped within the width & height parameters given\n *\n * @param string $alt Alt text for the url\n * @param int $width width\n * @param int $height height\n * @param string $class Optional style class\n * @param string $id Optional style id\n * @param string $title Option title attribute\n */\nfunction printCustomSizedImageThumbMaxSpace($alt, $width, $height, $class = NULL, $id = NULL, $title = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn;\n\tgetMaxSpaceContainer($width, $height, $_zp_current_image, true);\n\tprintCustomSizedImage($alt, NULL, $width, $height, NULL, NULL, NULL, NULL, $class, $id, true, null, $title);\n}\n\n/**\n * Print normal video or un-cropped within the given height and width dimensions. Use for sized images or thumbnails in an album.\n * Note: a class of 'not_visible' or 'password_protected' will be added as appropriate\n *\n * @param string $alt Alt text for the url\n * @param int $width width\n * @param int $height height\n * @param string $class Optional style class\n * @param string $id Optional style id\n * @param string $title Option title attribute\n */\nfunction printCustomSizedImageMaxSpace($alt, $width, $height, $class = NULL, $id = NULL, $thumb = false, $title = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn;\n\tgetMaxSpaceContainer($width, $height, $_zp_current_image, $thumb);\n\tprintCustomSizedImage($alt, NULL, $width, $height, NULL, NULL, NULL, NULL, $class, $id, $thumb, null, $title);\n}\n\n/**\n * Prints link to an image of specific size\n * @param int $size how big\n * @param string $text URL text\n * @param string $title URL title\n * @param string $class optional URL class\n * @param string $id optional URL id\n */\nfunction printSizedImageURL($size, $text, $title, $class = NULL, $id = NULL) {\n\tprintLinkHTML(getSizedImageURL($size), $text, $title, $class, $id);\n}\n\n/**\n *\n * performs a query and then filters out \"illegal\" images returning the first \"good\" image\n * used by the random image functions.\n *\n * @param object $result query result\n * @param string $source album object if this is search within the album\n */\nfunction filterImageQuery($result, $source) {\n\tif ($result) {\n\t\twhile ($row = db_fetch_assoc($result)) {\n\t\t\t$image = newImage(null, $row);\n   $album = $image->album;\n   if ($album->name == $source || $album->checkAccess()) {\n\t\t\t\tif (isImagePhoto($image)) {\n\t\t\t\t\tif ($image->checkAccess()) {\n\t\t\t\t\t\treturn $image;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdb_free_result($result);\n\t}\n\treturn NULL;\n}\n\n/**\n * Returns a randomly selected image from the gallery. (May be NULL if none exists)\n * @param bool $daily set to true and the picture changes only once a day.\n *\n * @return object\n */\nfunction getRandomImages($daily = false) {\n\tglobal $_zp_gallery;\n\tif ($daily) {\n\t\t$potd = getSerializedArray(getOption('picture_of_the_day'));\n\t\tif (date('Y-m-d', $potd['day']) == date('Y-m-d')) {\n\t\t\t$album = newAlbum($potd['folder'], true, true);\n\t\t\tif ($album->exists) {\n\t\t\t\t$image = newImage($album, $potd['filename'], true);\n\t\t\t\tif ($image->exists) {\n\t\t\t\t\treturn $image;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (zp_loggedin()) {\n\t\t$imageWhere = '';\n\t} else {\n\t\t$imageWhere = \" AND \" . prefix('images') . \".show=1\";\n\t}\n\t$result = query('SELECT `folder`, `filename` ' .\n\t\t\t\t\t' FROM ' . prefix('images') .\n\t\t\t\t\t' INNER JOIN ' . prefix('albums') . ' ON ' . prefix('images') . '.albumid = ' . prefix('albums') . '.id ' .\n\t\t\t\t\t' INNER JOIN (SELECT CEIL(RAND() * (SELECT MAX(id) FROM ' . prefix('images') . ')) AS id) AS r2 ON ' . prefix('images') . '.id >= r2.id ' . \n\t\t\t\t\t' WHERE ' . prefix('albums') . '.folder!=\"\" ' . $imageWhere . ' ORDER BY ' . prefix('images') . '.id LIMIT 1');\n\n\t$image = filterImageQuery($result, NULL);\n\tif ($image) {\n\t\tif ($daily) {\n\t\t\t$potd = array('day' => time(), 'folder' => $image->getAlbumName(), 'filename' => $image->getFileName());\n\t\t\tsetThemeOption('picture_of_the_day', serialize($potd), NULL, $_zp_gallery->getCurrentTheme());\n\t\t}\n\t\treturn $image;\n\t}\n\treturn NULL;\n}\n\n/**\n * Returns  a randomly selected image from the album or its subalbums. (May be NULL if none exists)\n *\n * @param mixed $rootAlbum optional album object/folder from which to get the image.\n * @param bool $daily set to true to change picture only once a day.\n *\n * @return object\n */\nfunction getRandomImagesAlbum($rootAlbum = NULL, $daily = false) {\n\tglobal $_zp_current_album, $_zp_gallery;\n\tif (empty($rootAlbum) && !in_context(ZP_ALBUM)) {\n\t\treturn null;\n\t}\n\tif (empty($rootAlbum)) {\n\t\t$album = $_zp_current_album;\n\t} else {\n\t\tif (is_object($rootAlbum)) {\n\t\t\t$album = $rootAlbum;\n\t\t} else {\n\t\t\t$album = newAlbum($rootAlbum);\n\t\t}\n\t}\n\tif ($daily && ($potd = getOption('picture_of_the_day:' . $album->name))) {\n\t\t$potd = getSerializedArray($potd);\n\t\tif (date('Y-m-d', $potd['day']) == date('Y-m-d')) {\n\t\t\t$rndalbum = newAlbum($potd['folder']);\n\t\t\t$image = newImage($rndalbum, $potd['filename']);\n\t\t\tif ($image->exists)\n\t\t\t\treturn $image;\n\t\t}\n\t}\n\t$image = NULL;\n\tif ($album->isDynamic()) {\n\t\t$images = $album->getImages(0);\n\t\tshuffle($images);\n\t\twhile (count($images) > 0) {\n\t\t\t$result = array_pop($images);\n\t\t\tif (Gallery::validImage($result['filename'])) {\n\t\t\t\t$image = newImage(newAlbum($result['folder']), $result['filename']);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$albumfolder = $album->getFileName();\n\t\tif ($album->isMyItem(LIST_RIGHTS)) {\n\t\t\t$imageWhere = '';\n\t\t\t$albumInWhere = '';\n\t\t} else {\n\t\t\t$imageWhere = \" AND \" . prefix('images') . \".show=1\";\n\t\t\t$albumInWhere = prefix('albums') . \".show=1\";\n\t\t}\n\t\t$query = \"SELECT id FROM \" . prefix('albums') . \" WHERE \";\n\t\tif ($albumInWhere) {\n\t\t\t$query .= $albumInWhere . ' AND ';\n\t\t}\n\t\t$query .= \"folder LIKE \" . db_quote(db_LIKE_escape($albumfolder) . '%');\n\t\t$result = query($query);\n\t\tif ($result) {\n\t\t\t$albumids = array();\n\t\t\twhile ($row = db_fetch_assoc($result)) {\n\t\t\t\t$albumids[] = $row['id'];\n\t\t\t}\n\t\t\tif (empty($albumids)) {\n\t\t\t\t$albumInWhere = ' AND ' . $albumInWhere;\n\t\t\t} else {\n\t\t\t\t$albumInWhere = ' AND ' . prefix('albums') . \".id IN (\" . implode(',', $albumids) . ')';\n\t\t\t}\n\t\t\tdb_free_result($result);\n\t\t\t$sql = 'SELECT `folder`, `filename` ' .\n\t\t\t\t\t\t\t' FROM ' . prefix('images') . ', ' . prefix('albums') .\n\t\t\t\t\t\t\t' WHERE ' . prefix('albums') . '.folder!=\"\" AND ' . prefix('images') . '.albumid = ' .\n\t\t\t\t\t\t\tprefix('albums') . '.id ' . $albumInWhere . $imageWhere . ' ORDER BY RAND()';\n\t\t\t$result = query($sql);\n\t\t\t$image = filterImageQuery($result, $album->name);\n\t\t}\n\t}\n\tif ($image) {\n\t\tif ($daily) {\n\t\t\t$potd = array('day' => time(), 'folder' => $image->getAlbumName(), 'filename' => $image->getFileName());\n\t\t\tsetThemeOption('picture_of_the_day:' . $album->name, serialize($potd), NULL, $_zp_gallery->getCurrentTheme());\n\t\t}\n\t}\n\treturn $image;\n}\n\n/**\n * Puts up random image thumbs from the gallery\n *\n * @param int $number how many images\n * @param string $class optional class\n * @param string $option what you want selected: all for all images, album for selected ones from an album\n * @param mixed $rootAlbum optional album object/folder from which to get the image.\n * @param integer $width the width/cropwidth of the thumb if crop=true else $width is longest size.\n * @param integer $height the height/cropheight of the thumb if crop=true else not used\n * @param bool $crop 'true' (default) if the thumb should be cropped, 'false' if not\n * @param bool $fullimagelink 'false' (default) for the image page link , 'true' for the unprotected full image link (to use Colorbox for example)\n */\nfunction printRandomImages($number = 5, $class = null, $option = 'all', $rootAlbum = '', $width = NULL, $height = NULL, $crop = NULL, $fullimagelink = false) {\n\tif (is_null($crop) && is_null($width) && is_null($height)) {\n\t\t$crop = 2;\n\t} else {\n\t\tif (is_null($width))\n\t\t\t$width = 85;\n\t\tif (is_null($height))\n\t\t\t$height = 85;\n\t\tif (is_null($crop)) {\n\t\t\t$crop = 1;\n\t\t} else {\n\t\t\t$crop = (int) $crop && true;\n\t\t}\n\t}\n\tif (!empty($class))\n\t\t$class = ' class=\"' . $class . '\"';\n\techo \"<ul\" . $class . \">\";\n\tfor ($i = 1; $i <= $number; $i++) {\n\t\tswitch ($option) {\n\t\t\tcase \"all\":\n\t\t\t\t$randomImage = getRandomImages();\n\t\t\t\tbreak;\n\t\t\tcase \"album\":\n\t\t\t\t$randomImage = getRandomImagesAlbum($rootAlbum);\n\t\t\t\tbreak;\n\t\t}\n\t\tif (is_object($randomImage) && $randomImage->exists) {\n\t\t\techo \"<li>\\n\";\n\t\t\tif ($fullimagelink) {\n\t\t\t\t$randomImageURL = $randomImage->getFullimageURL();\n\t\t\t} else {\n\t\t\t\t$randomImageURL = $randomImage->getLink();\n\t\t\t}\n\t\t\techo '<a href=\"' . html_encode($randomImageURL) . '\" title=\"' . sprintf(gettext('View image: %s'), html_encode($randomImage->getTitle())) . '\">';\n\t\t\tswitch ($crop) {\n\t\t\t\tcase 0:\n\t\t\t\t\t$sizes = getSizeCustomImage($width, NULL, NULL, NULL, NULL, NULL, NULL, $randomImage);\n\t\t\t\t\t$html = '<img src=\"' . html_encode(pathurlencode($randomImage->getCustomImage($width, NULL, NULL, NULL, NULL, NULL, NULL, TRUE))) . '\" width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\" alt=\"' . html_encode($randomImage->getTitle()) . '\" />' . \"\\n\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\t$sizes = getSizeCustomImage(NULL, $width, $height, $width, $height, NULL, NULL, $randomImage);\n\t\t\t\t\t$html = '<img src=\"' . html_encode(pathurlencode($randomImage->getCustomImage(NULL, $width, $height, $width, $height, NULL, NULL, TRUE))) . '\" width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\" alt=\"' . html_encode($randomImage->getTitle()) . '\" />' . \"\\n\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t$sizes = getSizeDefaultThumb($randomImage);\n\t\t\t\t\t$html = '<img src=\"' . html_encode(pathurlencode($randomImage->getThumb())) . '\" width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\" alt=\"' . html_encode($randomImage->getTitle()) . '\" />' . \"\\n\";\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\techo zp_apply_filter('custom_image_html', $html, false);\n\t\t\techo \"</a>\";\n\t\t\techo \"</li>\\n\";\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\techo \"</ul>\";\n}\n\n/**\n * Returns a list of tags for context of the page called where called\n *\n * @return string\n * @since 1.1\n */\nfunction getTags() {\n\tif (in_context(ZP_IMAGE)) {\n\t\tglobal $_zp_current_image;\n\t\treturn $_zp_current_image->getTags();\n\t} else if (in_context(ZP_ALBUM)) {\n\t\tglobal $_zp_current_album;\n\t\treturn $_zp_current_album->getTags();\n\t} else if (in_context(ZP_ZENPAGE_PAGE)) {\n\t\tglobal $_zp_current_zenpage_page;\n\t\treturn $_zp_current_zenpage_page->getTags();\n\t} else if (in_context(ZP_ZENPAGE_NEWS_ARTICLE)) {\n\t\tglobal $_zp_current_zenpage_news;\n\t\treturn $_zp_current_zenpage_news->getTags();\n\t}\n\treturn array();\n}\n\n/**\n * Prints a list of tags, editable by admin\n *\n * @param string $option links by default, if anything else the\n *               tags will not link to all other images with the same tag\n * @param string $preText text to go before the printed tags\n * @param string $class css class to apply to the div surrounding the UL list\n * @param string $separator what charactor shall separate the tags\n * @since 1.1\n */\nfunction printTags($option = 'links', $preText = NULL, $class = NULL, $separator = ', ') {\n\tglobal $_zp_current_search;\n\tif (is_null($class)) {\n\t\t$class = 'taglist';\n\t}\n\t$singletag = getTags();\n\t$tagstring = implode(', ', $singletag);\n\tif ($tagstring === '' or $tagstring === NULL) {\n\t\t$preText = '';\n\t}\n\tif (in_context(ZP_IMAGE)) {\n\t\t$object = \"image\";\n\t} else if (in_context(ZP_ALBUM)) {\n\t\t$object = \"album\";\n\t} else if (in_context(ZP_ZENPAGE_PAGE)) {\n\t\t$object = \"pages\";\n\t} else if (in_context(ZP_ZENPAGE_NEWS_ARTICLE)) {\n\t\t$object = \"news\";\n\t}\n\tif (count($singletag) > 0) {\n\t\tif (!empty($preText)) {\n\t\t\techo \"<span class=\\\"tags_title\\\">\" . $preText . \"</span>\";\n\t\t}\n\t\techo \"<ul class=\\\"\" . $class . \"\\\">\\n\";\n\t\tif (is_object($_zp_current_search)) {\n\t\t\t$albumlist = $_zp_current_search->getAlbumList();\n\t\t} else {\n\t\t\t$albumlist = NULL;\n\t\t}\n\t\t$ct = count($singletag);\n\t\t$x = 0;\n\t\tforeach ($singletag as $atag) {\n\t\t\tif (++$x == $ct) {\n\t\t\t\t$separator = \"\";\n\t\t\t}\n\t\t\tif ($option === \"links\") {\n\t\t\t\t$links1 = \"<a href=\\\"\" . html_encode(getSearchURL(search_quote($atag), '', 'tags', 0, array('albums' => $albumlist))) . \"\\\" title=\\\"\" . html_encode($atag) . \"\\\">\";\n\t\t\t\t$links2 = \"</a>\";\n\t\t\t} else {\n\t\t\t\t$links1 = $links2 = '';\n\t\t\t}\n\t\t\techo \"\\t<li>\" . $links1 . $atag . $links2 . $separator . \"</li>\\n\";\n\t\t}\n\t\techo \"</ul>\";\n\t} else {\n\t\techo \"$tagstring\";\n\t}\n}\n\n/**\n * Either prints all of the galleries tgs as a UL list or a cloud\n *\n * @param string $option \"cloud\" for tag cloud, \"list\" for simple list\n * @param string $class CSS class\n * @param string $sort \"results\" for relevance list, \"random\" for random ordering, otherwise the list is alphabetical\n * @param bool $counter TRUE if you want the tag count within brackets behind the tag\n * @param bool $links set to TRUE to have tag search links included with the tag.\n * @param int $maxfontsize largest font size the cloud should display\n * @param int $maxcount the floor count for setting the cloud font size to $maxfontsize\n * @param int $mincount the minimum count for a tag to appear in the output\n * @param int $limit set to limit the number of tags displayed to the top $numtags\n * @param int $minfontsize minimum font size the cloud should display\n * @param bool $exclude_unassigned True or false if you wish to exclude tags that are not assigne to any item (default: true)\n * @param bool $checkaccess True or false (default: false) if you wish to exclude tags that are assigned to items (or are not assigned at all) the visitor is not allowed to see\n * Beware that this may cause overhead on large sites. Usage of the static_html_cache is strongely recommended then.\n * @since 1.1\n */\nfunction printAllTagsAs($option, $class = '', $sort = NULL, $counter = FALSE, $links = TRUE, $maxfontsize = 2, $maxcount = 50, $mincount = 1, $limit = NULL, $minfontsize = 0.8, $exclude_unassigned = true, $checkaccess = false) {\n\tglobal $_zp_current_search;\n\t$option = strtolower($option);\n\tif ($class != \"\") {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\t$tagcount = getAllTagsCount($exclude_unassigned, $checkaccess);\n\tif (!is_array($tagcount)) {\n\t\treturn false;\n\t}\n\tswitch ($sort) {\n\t\tcase 'results':\n\t\t\tarsort($tagcount);\n\t\t\tif (!is_null($limit)) {\n\t\t\t\t$tagcount = array_slice($tagcount, 0, $limit);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'random':\n\t\t\tif (!is_null($limit)) {\n\t\t\t\t$tagcount = array_slice($tagcount, 0, $limit);\n\t\t\t}\n\t\t\tshuffle_assoc($tagcount);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t?>\n\t<ul<?php echo $class; ?>>\n\t\t<?php\n\t\tif (count($tagcount) > 0) {\n\t\t\tforeach ($tagcount as $key => $val) {\n\t\t\t\tif (!$counter) {\n\t\t\t\t\t$counter = \"\";\n\t\t\t\t} else {\n\t\t\t\t\t$counter = \" (\" . $val . \") \";\n\t\t\t\t}\n\t\t\t\tif ($option == \"cloud\") { // calculate font sizes, formula from wikipedia\n\t\t\t\t\tif ($val <= $mincount) {\n\t\t\t\t\t\t$size = $minfontsize;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$size = min(max(round(($maxfontsize * ($val - $mincount)) / ($maxcount - $mincount), 2), $minfontsize), $maxfontsize);\n\t\t\t\t\t}\n\t\t\t\t\t$size = str_replace(',', '.', $size);\n\t\t\t\t\t$size = ' style=\"font-size:' . $size . 'em;\"';\n\t\t\t\t} else {\n\t\t\t\t\t$size = '';\n\t\t\t\t}\n\t\t\t\tif ($val >= $mincount) {\n\t\t\t\t\tif ($links) {\n\t\t\t\t\t\tif (is_object($_zp_current_search)) {\n\t\t\t\t\t\t\t$albumlist = $_zp_current_search->getAlbumList();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$albumlist = NULL;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$link = getSearchURL(search_quote($key), '', 'tags', 0, array('albums' => $albumlist));\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"<?php echo html_encode($link); ?>\"<?php echo $size; ?>><?php echo $key . $counter; ?></a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t} else {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<li<?php echo $size; ?>><?php echo $key . $counter; ?></li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // while end\n\t\t} else {\n\t\t\t?>\n\t\t\t<li><?php echo gettext('No popular tags'); ?></li>\n\t\t\t<?php\n\t\t}\n\t\t?>\n\t</ul>\n\t<?php\n}\n\n/**\n * Retrieves a list of all unique years & months from the images in the gallery\n *\n * @param string $order set to 'desc' for the list to be in descending order\n * @return array\n */\nfunction getAllDates($order = 'asc') {\n\t$alldates = array();\n\t$cleandates = array();\n\t$sql = \"SELECT `date` FROM \" . prefix('images');\n\tif (!zp_loggedin()) {\n\t\t$sql .= \" WHERE `show` = 1\";\n\t}\n\t$hidealbums = getNotViewableAlbums();\n\tif (!is_null($hidealbums)) {\n\t\tif (zp_loggedin()) {\n\t\t\t$sql .= ' WHERE ';\n\t\t} else {\n\t\t\t$sql .= ' AND ';\n\t\t}\n\t\tforeach ($hidealbums as $id) {\n\t\t\t$sql .= '`albumid`!=' . $id . ' AND ';\n\t\t}\n\t\t$sql = substr($sql, 0, -5);\n\t}\n\t$result = query($sql);\n\tif ($result) {\n\t\twhile ($row = db_fetch_assoc($result)) {\n\t\t\t$alldates[] = $row['date'];\n\t\t}\n\t\tdb_free_result($result);\n\t}\n\tforeach ($alldates as $adate) {\n\t\tif (!empty($adate)) {\n\t\t\t$cleandates[] = substr($adate, 0, 7) . \"-01\";\n\t\t}\n\t}\n\t$datecount = array_count_values($cleandates);\n\tif ($order == 'desc') {\n\t\tkrsort($datecount);\n\t} else {\n\t\tksort($datecount);\n\t}\n\treturn $datecount;\n}\n\n/**\n * Prints a compendum of dates and links to a search page that will show results of the date\n *\n * @param string $class optional class\n * @param string $yearid optional class for \"year\"\n * @param string $monthid optional class for \"month\"\n * @param string $order set to 'desc' for the list to be in descending order\n */\nfunction printAllDates($class = 'archive', $yearid = 'year', $monthid = 'month', $order = 'asc') {\n\tglobal $_zp_current_search, $_zp_gallery_page;\n\tif (empty($class)) {\n\t\t$classactive = 'archive_active';\n\t} else {\n\t\t$classactive = $class . '_active';\n\t\t$class = 'class=\"' . $class . '\"';\n\t}\n\tif ($_zp_gallery_page == 'search.php') {\n\t\t$activedate = getSearchDate('%Y-%m');\n\t} else {\n\t\t$activedate = '';\n\t}\n\tif (!empty($yearid)) {\n\t\t$yearid = 'class=\"' . $yearid . '\"';\n\t}\n\tif (!empty($monthid)) {\n\t\t$monthid = 'class=\"' . $monthid . '\"';\n\t}\n\t$datecount = getAllDates($order);\n\t$lastyear = \"\";\n\techo \"\\n<ul $class>\\n\";\n\t$nr = 0;\n\tforeach($datecount as $key => $val) {\n\t\t$nr++;\n\t\tif ($key == '0000-00-01') {\n\t\t\t$year = \"no date\";\n\t\t\t$month = \"\";\n\t\t} else {\n\t\t\t$dt = strftime('%Y-%B', strtotime($key));\n\t\t\t$year = substr($dt, 0, 4);\n\t\t\t$month = substr($dt, 5);\n\t\t}\n\n\t\tif ($lastyear != $year) {\n\t\t\t$lastyear = $year;\n\t\t\tif ($nr != 1) {\n\t\t\t\techo \"</ul>\\n</li>\\n\";\n\t\t\t}\n\t\t\techo \"<li $yearid>$year\\n<ul $monthid>\\n\";\n\t\t}\n\t\tif (is_object($_zp_current_search)) {\n\t\t\t$albumlist = $_zp_current_search->getAlbumList();\n\t\t} else {\n\t\t\t$albumlist = NULL;\n\t\t}\n\t\t$datekey = substr($key, 0, 7);\n\t\tif ($activedate = $datekey) {\n\t\t\t$cl = ' class=\"' . $classactive . '\"';\n\t\t} else {\n\t\t\t$cl = '';\n\t\t}\n\t\techo '<li' . $cl . '><a href=\"' . html_encode(getSearchURL('', $datekey, '', 0, array('albums' => $albumlist))) . '\">' . $month . ' (' . $val . ')</a></li>' . \"\\n\";\n\t}\n\techo \"</ul>\\n</li>\\n</ul>\\n\";\n}\n\n/**\n * Produces the url to a custom page (e.g. one that is not album.php, image.php, or index.php)\n *\n * @param string $page page name to include in URL\n * @param string $q query string to add to url\n * @param bool $webpath host path to be prefixed. If \"false\" is passed you will get a localized \"WEBPATH\"\n * @return string\n */\nfunction getCustomPageURL($page, $q = '', $webpath = null) {\n\tglobal $_zp_conf_vars;\n\tif (array_key_exists($page, $_zp_conf_vars['special_pages'])) {\n\t\t$rewrite = preg_replace('~^_PAGE_/~', _PAGE_ . '/', $_zp_conf_vars['special_pages'][$page]['rewrite']) . '/';\n\t} else {\n\t\t$rewrite = '/' . _PAGE_ . '/' . $page . '/';\n\t}\n\t$plain = \"index.php?p=$page\";\n\tif (!empty($q)) {\n\t\t$rewrite .= \"?$q\";\n\t\t$plain .= \"&$q\";\n\t}\n\treturn zp_apply_filter('getLink', rewrite_path($rewrite, $plain, $webpath), $page . '.php', null);\n}\n\n/**\n * Prints the url to a custom page (e.g. one that is not album.php, image.php, or index.php)\n *\n * @param string $linktext Text for the URL\n * @param string $page page name to include in URL\n * @param string $q query string to add to url\n * @param string $prev text to insert before the URL\n * @param string $next text to follow the URL\n * @param string $class optional class\n */\nfunction printCustomPageURL($linktext, $page, $q = '', $prev = '', $next = '', $class = NULL) {\n\tif (!is_null($class)) {\n\t\t$class = 'class=\"' . $class . '\"';\n\t}\n\techo $prev . \"<a href=\\\"\" . html_encode(getCustomPageURL($page, $q)) . \"\\\" $class title=\\\"\" . html_encode($linktext) . \"\\\">\" . html_encode($linktext) . \"</a>\" . $next;\n}\n\n//*** Search functions *******************************************************\n//****************************************************************************\n\n/**\n * tests if a search page is an \"archive\" page\n *\n * @return bool\n */\nfunction isArchive() {\n\treturn isset($_REQUEST['date']);\n}\n\n/**\n * Returns a search URL\n *\n * @param mixed $words the search words target\n * @param mixed $dates the dates that limit the search\n * @param mixed $fields the fields on which to search\n * @param int $page the page number for the URL\n * @param array $object_list the list of objects to search\n * @return string\n * @since 1.1.3\n */\nfunction getSearchURL($words, $dates, $fields, $page, $object_list = NULL) {\n\t$urls = '';\n\t$rewrite = false;\n\tif (MOD_REWRITE) {\n\t\t$rewrite = true;\n\t\tif (is_array($object_list)) {\n\t\t\tforeach ($object_list as $obj) {\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$rewrite = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($rewrite) {\n\t\tif (empty($dates)) {\n\t\t\t$url = SEO_WEBPATH . '/' . _SEARCH_ . '/';\n\t\t} else {\n\t\t\t$url = SEO_WEBPATH . '/' . _ARCHIVE_ . '/';\n\t\t}\n\t} else {\n\t\t$url = SEO_WEBPATH . \"/index.php?p=search\";\n\t}\n\tif (!empty($fields) && empty($dates)) {\n\t\tif (!is_array($fields)) {\n\t\t\t$fields = explode(',', $fields);\n\t\t}\n\t\t$temp = $fields;\n\t\tif ($rewrite && count($fields) == 1 && array_shift($temp) == 'tags') {\n\t\t\t$url = SEO_WEBPATH . '/' . _TAGS_ . '/';\n\t\t} else {\n\t\t\t$search = new SearchEngine();\n\t\t\t$urls = $search->getSearchFieldsText($fields, 'searchfields=');\n\t\t}\n\t}\n\n\tif (!empty($words)) {\n\t\tif (is_array($words)) {\n\t\t\tforeach ($words as $key => $word) {\n\t\t\t\t$words[$key] = search_quote($word);\n\t\t\t}\n\t\t\t$words = implode(',', $words);\n\t\t}\n\t\t$words = strtr($words, array('%' => '__25__', '&' => '__26__', '#' => '__23__', '/' => '__2F__'));\n\t\tif ($rewrite) {\n\t\t\t$url .= urlencode($words) . '/';\n\t\t} else {\n\t\t\t$url .= \"&words=\" . urlencode($words);\n\t\t}\n\t}\n\tif (!empty($dates)) {\n\t\tif (is_array($dates)) {\n\t\t\t$dates = implode(',', $dates);\n\t\t}\n\t\tif ($rewrite) {\n\t\t\t$url .= $dates . '/';\n\t\t} else {\n\t\t\t$url .= \"&date=$dates\";\n\t\t}\n\t}\n\tif ($page > 1) {\n\t\tif ($rewrite) {\n\t\t\t$url .= \"$page/\";\n\t\t} else {\n\t\t\tif ($urls) {\n\t\t\t\t$urls .= '&';\n\t\t\t}\n\t\t\t$urls .= \"page=$page\";\n\t\t}\n\t}\n\tif (!empty($urls)) {\n\t\tif ($rewrite) {\n\t\t\t$url .= '?' . $urls;\n\t\t} else {\n\t\t\t$url .= '&' . $urls;\n\t\t}\n\t}\n\tif (is_array($object_list)) {\n\t\tforeach ($object_list as $key => $list) {\n\t\t\tif (!empty($list)) {\n\t\t\t\t$url .= '&in' . $key . '=' . html_encode(implode(',', $list));\n\t\t\t}\n\t\t}\n\t}\n\treturn $url;\n}\n\n/**\n * Prints the search form\n *\n * Search works on a list of tokens entered into the search form.\n *\n * Tokens may be part of boolean expressions using &, |, !, and parens. (Comma is retained as a synonom of | for\n * backwords compatibility.)\n *\n * Tokens may be enclosed in quotation marks to create exact pattern matches or to include the boolean operators and\n * parens as part of the tag..\n *\n * @param string $prevtext text to go before the search form\n * @param string $id css id for the search form, default is 'search'\n * @param string $buttonSource optional path to the image for the button or if not a path to an image,\n * \t\t\t\t\t\t\t\t\t\t\tthis will be the button hint\n * @param string $buttontext optional text for the button (\"Search\" will be the default text)\n * @param string $iconsource optional theme based icon for the search fields toggle\n * @param array $query_fields override selection for enabled fields with this list\n * @param array $objects_list optional array of things to search eg. [albums]=>[list], etc.\n * \t\t\t\t\t\t\t\t\t\t\t\t\t\tif the list is simply 0, the objects will be omitted from the search\n * @param string $within set to true to search within current results, false to search fresh\n * @since 1.1.3\n */\nfunction printSearchForm($prevtext = NULL, $id = 'search', $buttonSource = NULL, $buttontext = '', $iconsource = NULL, $query_fields = NULL, $object_list = NULL, $within = NULL) {\n\tglobal $_zp_adminJS_loaded, $_zp_current_search;\n\t$engine = new SearchEngine();\n\tif (!is_null($_zp_current_search) && !$_zp_current_search->getSearchWords()) {\n\t\t$engine->clearSearchWords();\n\t}\n\tif (!is_null($object_list)) {\n\t\tif (array_key_exists(0, $object_list)) { // handle old form albums list\n\t\t\ttrigger_error(gettext('printSearchForm $album_list parameter is deprecated. Pass array(\"albums\"=>array(album, album, ...)) instead.'), E_USER_NOTICE);\n\t\t\t$object_list = array('albums' => $object_list);\n\t\t}\n\t}\n\tif (empty($buttontext)) {\n\t\t$buttontext = gettext(\"Search\");\n\t}\n\t$zf = WEBPATH . \"/\" . ZENFOLDER;\n\t$searchwords = $engine->codifySearchString();\n\tif (substr($searchwords, -1, 1) == ',') {\n\t\t$searchwords = substr($searchwords, 0, -1);\n\t}\n\tif (empty($searchwords)) {\n\t\t$within = false;\n\t\t$hint = '%s';\n\t} else {\n\t\t$hint = gettext('%s within previous results');\n\t}\n\tif (preg_match('!\\/(.*)[\\.png|\\.jpg|\\.jpeg|\\.gif]$!', $buttonSource)) {\n\t\t$buttonSource = 'src=\"' . $buttonSource . '\" alt=\"' . $buttontext . '\"';\n\t\t$button = 'title=\"' . sprintf($hint, $buttontext) . '\"';\n\t\t$type = 'image';\n\t} else {\n\t\t$type = 'submit';\n\t\tif ($buttonSource) {\n\t\t\t$button = 'value=\"' . $buttontext . '\" title=\"' . sprintf($hint, $buttonSource) . '\"';\n\t\t\t$buttonSource = '';\n\t\t} else {\n\t\t\t$button = 'value=\"' . $buttontext . '\" title=\"' . sprintf($hint, $buttontext) . '\"';\n\t\t}\n\t}\n\tif (empty($iconsource)) {\n\t\t$iconsource = WEBPATH . '/' . ZENFOLDER . '/images/searchfields_icon.png';\n\t}\n\tif (is_null($within)) {\n\t\t$within = getOption('search_within');\n\t}\n\tif (MOD_REWRITE) {\n\t\t$searchurl = SEO_WEBPATH . '/' . _SEARCH_ . '/';\n\t} else {\n\t\t$searchurl = WEBPATH . \"/index.php?p=search\";\n\t}\n\tif (!$within) {\n\t\t$engine->clearSearchWords();\n\t}\n\n\t$fields = $engine->allowedSearchFields();\n\tif (!$_zp_adminJS_loaded) {\n\t\t$_zp_adminJS_loaded = true;\n\t\t?>\n\t\t<script type=\"text/javascript\" src=\"<?php echo WEBPATH . '/' . ZENFOLDER; ?>/js/admin.js\"></script>\n\t\t<?php\n\t}\n\t?>\n\t<div id=\"<?php echo $id; ?>\">\n\t\t<!-- search form -->\n\t\t<form method=\"post\" action=\"<?php echo $searchurl; ?>\" id=\"search_form\">\n\t\t\t<script type=\"text/javascript\">\n\t\t\t// <!-- <![CDATA[\n\t\t\tvar within = <?php echo (int) $within; ?>;\n\t\t\tfunction search_(way) {\n\t\t\t\twithin = way;\n\t\t\t\tif (way) {\n\t\t\t\t\t$('#search_submit').attr('title', '<?php echo sprintf($hint, $buttontext); ?>');\n\t\t\t\t} else {\n\t\t\t\t\tlastsearch = '';\n\t\t\t\t\t$('#search_submit').attr('title', '<?php echo $buttontext; ?>');\n\t\t\t\t}\n\t\t\t\t$('#search_input').val('');\n\t\t\t}\n\t\t\t$('#search_form').submit(function() {\n\t\t\t\tif (within) {\n\t\t\t\t\tvar newsearch = $.trim($('#search_input').val());\n\t\t\t\t\tif (newsearch.substring(newsearch.length - 1) == ',') {\n\t\t\t\t\t\tnewsearch = newsearch.substr(0, newsearch.length - 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (newsearch.length > 0) {\n\t\t\t\t\t\t$('#search_input').val('(<?php echo $searchwords; ?>) AND (' + newsearch + ')');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$('#search_input').val('<?php echo $searchwords; ?>');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n    $(document).ready(function() {\n      $( $(\"#checkall_searchfields\") ).on( \"click\", function() {\n        $(\"#searchextrashow :checkbox\").prop(\"checked\", $(\"#checkall_searchfields\").prop(\"checked\") );\n      });\n    });\n\t\t\t// ]]> -->\n\t\t\t</script>\n\t\t\t<?php echo $prevtext; ?>\n\t\t\t<div>\n\t\t\t\t<span class=\"tagSuggestContainer\">\n\t\t\t\t\t<input type=\"text\" name=\"words\" value=\"\" id=\"search_input\" size=\"10\" />\n\t\t\t\t</span>\n\t\t\t\t<?php if (count($fields) > 1 || $searchwords) { ?>\n\t\t\t\t\t<a class=\"toggle_searchextrashow\" href=\"#\"><img src=\"<?php echo $iconsource; ?>\" title=\"<?php echo gettext('search options'); ?>\" alt=\"<?php echo gettext('fields'); ?>\" id=\"searchfields_icon\" /></a>\n\t\t\t\t\t<script>\n\t\t\t\t\t\t$(\".toggle_searchextrashow\").click(function(event) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t$(\"#searchextrashow\").toggle();\n\t\t\t\t\t\t});\n\t\t\t\t\t</script>\n\t\t\t\t<?php } ?>\n\t\t\t\t<input type=\"<?php echo $type; ?>\" <?php echo $button; ?> class=\"button buttons\" id=\"search_submit\" <?php echo $buttonSource; ?> data-role=\"none\" />\n\t\t\t\t<?php\n\t\t\t\tif (is_array($object_list)) {\n\t\t\t\t\tforeach ($object_list as $key => $list) {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<input type=\"hidden\" name=\"in<?php echo $key ?>\" value=\"<?php\n\t\t\t\t\t\tif (is_array($list))\n\t\t\t\t\t\t\techo html_encode(implode(',', $list));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\techo html_encode($list);\n\t\t\t\t\t\t?>\" />\n\t\t\t\t\t\t\t\t\t <?php\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t ?>\n\t\t\t\t<br />\n\t\t\t\t<?php\n\t\t\t\tif (count($fields) > 1 || $searchwords) {\n\t\t\t\t\t$fields = array_flip($fields);\n\t\t\t\t\tnatcasesort($fields);\n\t\t\t\t\t$fields = array_flip($fields);\n\t\t\t\t\tif (is_null($query_fields)) {\n\t\t\t\t\t\t$query_fields = $engine->parseQueryFields();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!is_array($query_fields)) {\n\t\t\t\t\t\t\t$query_fields = $engine->numericFields($query_fields);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (count($query_fields) == 0) {\n\t\t\t\t\t\t$query_fields = $engine->allowedSearchFields();\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<div style=\"display:none;\" id=\"searchextrashow\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tif ($searchwords) {\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"search_within\" id=\"search_within-1\" value=\"1\"<?php if ($within) echo ' checked=\"checked\"'; ?> onclick=\"search_(1);\" />\n\t\t\t\t\t\t\t\t<?php echo gettext('Within'); ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"search_within\" id=\"search_within-0\" value=\"1\"<?php if (!$within) echo ' checked=\"checked\"'; ?> onclick=\"search_(0);\" />\n\t\t\t\t\t\t\t\t<?php echo gettext('New'); ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (count($fields) > 1) {\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<ul>\n        <li><label><input type=\"checkbox\" name=\"checkall_searchfields\" id=\"checkall_searchfields\" checked=\"checked\">* <?php echo gettext('Check/uncheck all'); ?> *</label></li>\n\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\tforeach ($fields as $display => $key) {\n\t\t\t\t\t\t\t\t\techo '<li><label><input id=\"SEARCH_' . html_encode($key) . '\" name=\"SEARCH_' . html_encode($key) . '\" type=\"checkbox\"';\n\t\t\t\t\t\t\t\t\tif (in_array($key, $query_fields)) {\n\t\t\t\t\t\t\t\t\t\techo ' checked=\"checked\" ';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\techo ' value=\"' . html_encode($key) . '\"  /> ' . $display . \"</label></li>\" . \"\\n\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t</div>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</div>\n\t\t</form>\n\t</div><!-- end of search form -->\n\t<?php\n}\n\n/**\n * Returns the a sanitized version of the search string\n *\n * @return string\n * @since 1.1\n */\nfunction getSearchWords() {\n\tglobal $_zp_current_search;\n\tif (!in_context(ZP_SEARCH))\n\t\treturn '';\n\treturn stripcslashes($_zp_current_search->codifySearchString());\n}\n\n/**\n * Returns the date of the search\n *\n * @param string $format formatting of the date, default 'F Y'\n * @return string\n * @since 1.1\n */\nfunction getSearchDate($format = '%B %Y') {\n\tif (in_context(ZP_SEARCH)) {\n\t\tglobal $_zp_current_search;\n\t\t$date = $_zp_current_search->getSearchDate();\n\t\tif (empty($date)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif ($date == '0000-00') {\n\t\t\treturn gettext(\"no date\");\n\t\t};\n\t\t$dt = strtotime($date . \"-01\");\n\t\treturn zpFormattedDate($format, $dt);\n\t}\n\treturn false;\n}\n\n/**\n * controls the thumbnail layout of themes.\n *\n * Uses the theme options:\n * \talbums_per_row\n * \talbums_per_page\n * \timages_per_row\n * \timages_per_page\n *\n * Computes a normalized images/albums per page and computes the number of\n * images that will fit on the \"transitional\" page between album thumbs and\n * image thumbs. This function is \"internal\" and is called from the root\n * index.php script before the theme script is loaded.\n */\nfunction setThemeColumns() {\n\tglobal $_zp_current_album, $_firstPageImages, $_oneImagePage;\n\t$_firstPageImages = false;\n\tif (($albumColumns = getOption('albums_per_row')) <= 1)\n\t\t$albumColumns = false;\n\tif (($imageColumns = getOption('images_per_row')) <= 1)\n\t\t$imageColumns = false;\n\t$albcount = max(1, getOption('albums_per_page'));\n\tif (($albumColumns) && (($albcount % $albumColumns) != 0)) {\n\t\tsetOption('albums_per_page', $albcount = ((floor($albcount / $albumColumns) + 1) * $albumColumns), false);\n\t}\n\t$imgcount = max(1, getOption('images_per_page'));\n\tif (($imageColumns) && (($imgcount % $imageColumns) != 0)) {\n\t\tsetOption('images_per_page', $imgcount = ((floor($imgcount / $imageColumns) + 1) * $imageColumns), false);\n\t}\n\tif ((getOption('thumb_transition') && !$_oneImagePage) && in_context(ZP_ALBUM | ZP_SEARCH) && $albumColumns && $imageColumns) {\n\t\t$count = getNumAlbums();\n\t\tif ($count == 0) {\n\t\t\t$_firstPageImages = 0;\n\t\t}\n\t\t$rowssused = ceil(($count % $albcount) / $albumColumns); /* number of album rows unused */\n\t\t$leftover = floor(max(1, getOption('images_per_page')) / $imageColumns) - $rowssused;\n\t\t$_firstPageImages = max(0, $leftover * $imageColumns); /* number of images that fill the leftover rows */\n\t\tif ($_firstPageImages == $imgcount) {\n\t\t\t$_firstPageImages = 0;\n\t\t}\n\t}\n}\n\n//************************************************************************************************\n// album password handling\n//************************************************************************************************\n\n/**\n * returns the auth type of a guest login\n *\n * @param string $hint\n * @param string $show\n * @return string\n */\nfunction checkForGuest(&$hint = NULL, &$show = NULL) {\n\tglobal $_zp_gallery, $_zp_gallery_page, $_zp_current_zenpage_page, $_zp_current_category, $_zp_current_zenpage_news;\n\t$authType = zp_apply_filter('checkForGuest', NULL);\n\tif (!is_null($authType))\n\t\treturn $authType;\n\tif (in_context(ZP_SEARCH)) { // search page\n\t\t$hash = getOption('search_password');\n\t\tif (getOption('search_user') != '')\n\t\t\t$show = true;\n\t\t$hint = get_language_string(getOption('search_hint'));\n\t\t$authType = 'zp_search_auth';\n\t\tif (empty($hash)) {\n\t\t\t$hash = $_zp_gallery->getPassword();\n\t\t\tif ($_zp_gallery->getUser() != '')\n\t\t\t\t$show = true;\n\t\t\t$hint = $_zp_gallery->getPasswordHint();\n\t\t\t$authType = 'zp_gallery_auth';\n\t\t}\n\t\tif (!empty($hash) && zp_getCookie($authType) == $hash) {\n\t\t\treturn $authType;\n\t\t}\n\t} else if (!is_null($_zp_current_zenpage_news)) {\n\t\t$authType = $_zp_current_zenpage_news->checkAccess($hint, $show);\n\t\treturn $authType;\n\t} else if (isset($_GET['album'])) { // album page\n\t\tlist($album, $image) = rewrite_get_album_image('album', 'image');\n\t\tif ($authType = checkAlbumPassword($album, $hint)) {\n\t\t\treturn $authType;\n\t\t} else {\n\t\t\t$alb = newAlbum($album);\n\t\t\tif ($alb->getUser() != '')\n\t\t\t\t$show = true;\n\t\t\treturn false;\n\t\t}\n\t} else { // other page\n\t\t$hash = $_zp_gallery->getPassword();\n\t\tif ($_zp_gallery->getUser() != '')\n\t\t\t$show = true;\n\t\t$hint = $_zp_gallery->getPasswordHint();\n\t\tif (!empty($hash) && zp_getCookie('zp_gallery_auth') == $hash) {\n\t\t\treturn 'zp_gallery_auth';\n\t\t}\n\t}\n\tif (empty($hash))\n\t\treturn 'zp_public_access';\n\treturn false;\n}\n\n/**\n * Checks to see if a password is needed\n *\n * Returns true if access is allowed\n *\n * The password protection is hereditary. This normally only impacts direct url access to an object since if\n * you are going down the tree you will be stopped at the first place a password is required.\n *\n *\n * @param string $hint the password hint\n * @param bool $show whether there is a user associated with the password.\n * @return bool\n * @since 1.1.3\n */\nfunction checkAccess(&$hint = NULL, &$show = NULL) {\n\tglobal $_zp_current_album, $_zp_current_search, $_zp_gallery, $_zp_gallery_page,\n\t$_zp_current_zenpage_page, $_zp_current_zenpage_news;\n\tif (GALLERY_SECURITY != 'public') // only registered users allowed\n\t\t$show = true; //\ttherefore they will need to supply their user id is something fails below\n\n\tif ($_zp_gallery->isUnprotectedPage(stripSuffix($_zp_gallery_page)))\n\t\treturn true;\n\tif (zp_loggedin()) {\n\t\t$fail = zp_apply_filter('isMyItemToView', NULL);\n\t\tif (!is_null($fail)) { //\tfilter had something to say about access, honor it\n\t\t\treturn $fail;\n\t\t}\n\t\tswitch ($_zp_gallery_page) {\n\t\t\tcase 'album.php':\n\t\t\tcase 'image.php':\n\t\t\t\tif ($_zp_current_album->isMyItem(LIST_RIGHTS)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'search.php':\n\t\t\t\tif (zp_loggedin(VIEW_SEARCH_RIGHTS)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (zp_loggedin(VIEW_GALLERY_RIGHTS)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tif (GALLERY_SECURITY == 'public' && ($access = checkForGuest($hint, $show))) {\n\t\treturn $access; // public page or a guest is logged in\n\t}\n\treturn false;\n}\n\n/**\n * Returns a redirection link for the password form\n *\n * @return string\n */\nfunction getPageRedirect() {\n  global $_zp_login_error, $_zp_password_form_printed, $_zp_current_search, $_zp_gallery_page,\n  $_zp_current_album, $_zp_current_image, $_zp_current_zenpage_news;\n\tif($_zp_login_error !== 2) {\n\t\treturn false;\n\t}\n  switch ($_zp_gallery_page) {\n    case 'index.php':\n      $action = '/index.php';\n      break;\n    case 'album.php':\n      $action = '/index.php?userlog=1&album=' . pathurlencode($_zp_current_album->name);\n      break;\n    case 'image.php':\n      $action = '/index.php?userlog=1&album=' . pathurlencode($_zp_current_album->name) . '&image=' . urlencode($_zp_current_image->filename);\n      break;\n    case 'pages.php':\n      $action = '/index.php?userlog=1&p=pages&title=' . urlencode(getPageTitlelink());\n      break;\n    case 'news.php':\n      $action = '/index.php?userlog=1&p=news';\n      if (!is_null($_zp_current_zenpage_news)) {\n        $action .= '&title=' . urlencode($_zp_current_zenpage_news->getTitlelink());\n      }\n      break;\n    case 'password.php':\n      $action = str_replace(SEO_WEBPATH, '', getRequestURI());\n      if ($action == '/' . _PAGE_ . '/password' || $action == '/index.php?p=password') {\n        $action = '/index.php';\n      }\n      break;\n    default:\n      if (in_context(ZP_SEARCH)) {\n        $action = '/index.php?userlog=1&p=search' . $_zp_current_search->getSearchParams();\n      } else {\n        $action = '/index.php?userlog=1&p=' . substr($_zp_gallery_page, 0, -4);\n      }\n  }\n  return SEO_WEBPATH . $action;\n}\n\n/**\n * Prints the album password form\n *\n * @param string $hint hint to the password\n * @param bool $showProtected set false to supress the password protected message\n * @param bool $showuser set true to force the user name filed to be present\n * @param string $redirect optional URL to send the user to after successful login\n *\n * @since 1.1.3\n */\nfunction printPasswordForm($_password_hint, $_password_showuser = NULL, $_password_showProtected = true, $_password_redirect = NULL) {\n\tglobal $_zp_login_error, $_zp_password_form_printed, $_zp_current_search, $_zp_gallery, $_zp_gallery_page,\n\t$_zp_current_album, $_zp_current_image, $theme, $_zp_current_zenpage_page, $_zp_authority;\n\tif ($_zp_password_form_printed)\n\t\treturn;\n\t$_zp_password_form_printed = true;\n\n\tif (is_null($_password_redirect))\n\t\t$_password_redirect = getPageRedirect();\n\n\tif (is_null($_password_showuser))\n\t\t$_password_showuser = $_zp_gallery->getUserLogonField();\n\t?>\n\t<div id=\"passwordform\">\n\t\t<?php\n\t\tif ($_password_showProtected && !$_zp_login_error) {\n\t\t\t?>\n\t\t\t<p>\n\t\t\t\t<?php echo gettext(\"The page you are trying to view is password protected.\"); ?>\n\t\t\t</p>\n\t\t\t<?php\n\t\t}\n\t\tif ($loginlink = zp_apply_filter('login_link', NULL)) {\n\t\t\t$logintext = gettext('login');\n\t\t\t?>\n\t\t\t<a href=\"<?php echo $loginlink; ?>\" title=\"<?php echo $logintext; ?>\"><?php echo $logintext; ?></a>\n\t\t\t<?php\n\t\t} else {\n\t\t\t$_zp_authority->printLoginForm($_password_redirect, false, $_password_showuser, false, $_password_hint);\n\t\t}\n\t\t?>\n\t</div>\n\t<?php\n}\n\n/**\n * prints the zenphoto logo and link\n *\n */\nfunction printZenphotoLink() {\n\techo gettext(\"Powered by <a href=\\\"http://www.zenphoto.org\\\" title=\\\"The simpler media website CMS\\\">Zenphoto</a>\");\n}\n\n/**\n * Expose some informations in a HTML comment\n *\n * @param string $obj the path to the page being loaded\n * @param array $plugins list of activated plugins\n * @param string $theme The theme being used\n */\nfunction exposeZenPhotoInformations($obj = '', $plugins = '', $theme = '') {\n\tglobal $_zp_filters;\n\t$a = basename($obj);\n\tif ($a != 'full-image.php') {\n\t\techo \"\\n<!-- zenphoto version \" . ZENPHOTO_VERSION;\n\t\tif (TEST_RELEASE) {\n\t\t\techo \" THEME: \" . $theme . \" (\" . $a . \")\";\n\t\t\t$graphics = zp_graphicsLibInfo();\n\t\t\t$graphics = sanitize(str_replace('<br />', ', ', $graphics['Library_desc']), 3);\n\t\t\techo \" GRAPHICS LIB: \" . $graphics . \" { memory: \" . INI_GET('memory_limit') . \" }\";\n\t\t\techo ' PLUGINS: ';\n\t\t\tif (count($plugins) > 0) {\n\t\t\t\tsort($plugins);\n\t\t\t\tforeach ($plugins as $plugin) {\n\t\t\t\t\techo $plugin . ' ';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\techo 'none ';\n\t\t\t}\n\t\t}\n\t\techo \" -->\";\n\t}\n}\n\n/**\n * Gets the content of a codeblock for an image, album or Zenpage newsarticle or page.\n *\n * The priority for codeblocks will be (based on context)\n * \t1: articles\n * \t2: pages\n * \t3: images\n * \t4: albums\n * \t5: gallery.\n *\n * This means, for instance, if we are in ZP_ZENPAGE_NEWS_ARTICLE context we will use the news article\n * codeblock even if others are available.\n *\n * Note: Echoing this array's content does not execute it. Also no special chars will be escaped.\n * Use printCodeblock() if you need to execute script code.\n *\n * @param int $number The codeblock you want to get\n * @param mixed $what optonal object for which you want the codeblock\n *\n * @return string\n */\nfunction getCodeblock($number = 1, $object = NULL) {\n\tglobal $_zp_current_album, $_zp_current_image, $_zp_current_zenpage_news, $_zp_current_zenpage_page, $_zp_gallery, $_zp_gallery_page;\n\tif (!$number) {\n\t\tsetOptionDefault('codeblock_first_tab', 0);\n\t}\n\tif (!is_object($object)) {\n\t\tif ($_zp_gallery_page == 'index.php') {\n\t\t\t$object = $_zp_gallery;\n\t\t}\n\t\tif (in_context(ZP_ALBUM)) {\n\t\t\t$object = $_zp_current_album;\n\t\t}\n\t\tif (in_context(ZP_IMAGE)) {\n\t\t\t$object = $_zp_current_image;\n\t\t}\n\t\tif (in_context(ZP_ZENPAGE_PAGE)) {\n\t\t\tif ($_zp_current_zenpage_page->checkAccess()) {\n\t\t\t\t$object = $_zp_current_zenpage_page;\n\t\t\t}\n\t\t}\n\t\tif (in_context(ZP_ZENPAGE_NEWS_ARTICLE)) {\n\t\t\tif ($_zp_current_zenpage_news->checkAccess()) {\n\t\t\t\t$object = $_zp_current_zenpage_news;\n\t\t\t}\n\t\t}\n\t}\n\tif (!is_object($object)) {\n\t\treturn NULL;\n\t}\n\t$codeblock = getSerializedArray($object->getcodeblock());\n\t$codeblock = zp_apply_filter('codeblock', @$codeblock[$number], $object, $number);\n\tif ($codeblock) {\n\t\t$codeblock = applyMacros($codeblock);\n\t}\n\treturn $codeblock;\n}\n\n/**\n * Prints the content of a codeblock for an image, album or Zenpage newsarticle or page.\n *\n * @param int $number The codeblock you want to get\n * @param mixed $what optonal object for which you want the codeblock\n *\n * @return string\n */\nfunction printCodeblock($number = 1, $what = NULL) {\n\t$codeblock = getCodeblock($number, $what);\n\tif ($codeblock) {\n\t\t$context = get_context();\n\t\teval('?>' . $codeblock);\n\t\tset_context($context);\n\t}\n}\n\n/**\n * Checks for URL page out-of-bounds for \"standard\" themes\n * Note: This function assumes that an \"index\" page will display albums\n * and the pagination be determined by them. Any other \"index\" page strategy needs to be\n * handled by the theme itself.\n *\n * @param boolean $request\n * @param string $gallery_page\n * @param int $page\n * @return boolean will be true if all is well, false if a 404 error should occur\n */\nfunction checkPageValidity($request, $gallery_page, $page) {\n\tglobal $_zp_gallery, $_firstPageImages, $_oneImagePage, $_zp_zenpage, $_zp_current_category;\n\t$count = NULL;\n\tswitch ($gallery_page) {\n\t\tcase 'album.php':\n\t\tcase 'search.php':\n\t\t\t$albums_per_page = max(1, getOption('albums_per_page'));\n\t\t\t$pageCount = (int) ceil(getNumAlbums() / $albums_per_page);\n\t\t\t$imageCount = getNumImages();\n\t\t\tif ($_oneImagePage) {\n\t\t\t\tif ($_oneImagePage === true) {\n\t\t\t\t\t$imageCount = min(1, $imageCount);\n\t\t\t\t} else {\n\t\t\t\t\t$imageCount = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$images_per_page = max(1, getOption('images_per_page'));\n\t\t\t$count = ($pageCount + (int) ceil(($imageCount - $_firstPageImages) / $images_per_page));\n\t\t\tbreak;\n\t\tcase 'index.php':\n\t\t\tif (galleryAlbumsPerPage() != 0) {\n\t\t\t\t$count = (int) ceil($_zp_gallery->getNumAlbums() / galleryAlbumsPerPage());\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'news.php':\n\t\t\tif (in_context(ZP_ZENPAGE_NEWS_CATEGORY)) {\n\t\t\t\t$count = count($_zp_current_category->getArticles());\n\t\t\t} else {\n\t\t\t\t$count = count($_zp_zenpage->getArticles());\n\t\t\t}\n\t\t\t$count = (int) ceil($count / ZP_ARTICLES_PER_PAGE);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$count = zp_apply_filter('checkPageValidity', NULL, $gallery_page, $page);\n\t\t\tbreak;\n\t}\n\tif ($page > $count) {\n\t\t$request = false; //\tpage is out of range\n\t}\n\n\treturn $request;\n}\n\nfunction print404status($album, $image, $obj) {\n\tglobal $_zp_page;\n\techo \"\\n<strong>\" . gettext(\"Zenphoto Error:</strong> the requested object was not found.\");\n\tif (isset($album)) {\n\t\techo '<br />' . sprintf(gettext('Album: %s'), html_encode($album));\n\n\t\tif (isset($image)) {\n\t\t\techo '<br />' . sprintf(gettext('Image: %s'), html_encode($image));\n\t\t}\n\t} else {\n\t\techo '<br />' . sprintf(gettext('Page: %s'), html_encode(substr(basename($obj), 0, -4)));\n\t}\n\tif (isset($_zp_page) && $_zp_page > 1) {\n\t\techo '/' . $_zp_page;\n\t}\n}\n\nrequire_once(SERVERPATH . '/' . ZENFOLDER . '/template-filters.php');\n?>\n"], "fixing_code": ["<?php\n/**\n * Functions used to display content in themes.\n * @package functions\n * @subpackage template-functions\n */\n// force UTF-8 \u00d8\n\nrequire_once(dirname(__FILE__) . '/functions.php');\nif (!defined('SEO_FULLWEBPATH')) {\n\tdefine('SEO_FULLWEBPATH', FULLWEBPATH);\n\tdefine('SEO_WEBPATH', WEBPATH);\n}\n\n//******************************************************************************\n//*** Template Functions *******************************************************\n//******************************************************************************\n\n/* * * Generic Helper Functions ************ */\n/* * *************************************** */\n\n/**\n * Returns the zenphoto version string\n */\nfunction getVersion() {\n\treturn ZENPHOTO_VERSION;\n}\n\n/**\n * Prints the zenphoto version string\n */\nfunction printVersion() {\n\techo getVersion();\n}\n\n/**\n * Print any Javascript required by zenphoto.\n */\nfunction printZenJavascripts() {\n\tglobal $_zp_current_album;\n\t?>\n\t<script type=\"text/javascript\" src=\"<?php echo WEBPATH . \"/\" . ZENFOLDER; ?>/js/jquery.js\"></script>\n\t<?php\n\tif(zp_loggedin()) {\n\t\t?>\n\t\t<script type=\"text/javascript\" src=\"<?php echo WEBPATH . \"/\" . ZENFOLDER; ?>/js/zenphoto.js\"></script>\n\t\t<link rel=\"stylesheet\" href=\"<?php echo WEBPATH . '/' . ZENFOLDER; ?>/admintoolbox.css\" type=\"text/css\" />\n\t\t<?php\n\t}\n}\n\n/**\n * Prints the clickable drop down toolbox on any theme page with generic admin helpers\n *\n */\nfunction adminToolbox() {\n\tglobal $_zp_current_album, $_zp_current_image, $_zp_current_search, $_zp_gallery_page, $_zp_gallery, $_zp_current_admin_obj, $_zp_loggedin, $_zp_conf_vars;\n\tif (zp_loggedin()) {\n\t\t$zf = FULLWEBPATH . \"/\" . ZENFOLDER;\n\t\t$page = getCurrentPage();\n\t\tob_start();\n\t\t?>\n\t\t<script type=\"text/javascript\">\n\t\t\t// <!-- <![CDATA[\n\t\t\tvar deleteAlbum1 = \"<?php echo gettext(\"Are you sure you want to delete this item?\"); ?>\";\n\t\t\tvar deleteAlbum2 = \"<?php echo gettext(\"Are you Absolutely positively sure you want to delete this item? THIS CANNOT BE UNDONE!\"); ?>\";\n\t\t\tfunction newAlbum(folder, albumtab) {\n\t\t\t\tvar album = prompt('<?php echo gettext('New album name?'); ?>', '<?php echo gettext('new album'); ?>');\n\t\t\t\tif (album) {\n\t\t\t\t\tlaunchScript('<?php echo $zf; ?>/admin-edit.php', ['action=newalbum', 'folder=' + encodeURIComponent(folder), 'name=' + encodeURIComponent(album), 'albumtab=' + albumtab, 'XSRFToken=<?php echo getXSRFToken('newalbum'); ?>']);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// ]]> -->\n\t\t</script>\n\t\t<div id=\"zp__admin_module\">\n\t\t\t<div id=\"zp__admin_info\">\n\t\t\t\t<span class=\"zp_logo\">ZP</span>\n\t\t\t\t<span class=\"zp_user\"> <?php echo $_zp_current_admin_obj->getUser(); ?>\n\t\t\t\t\t<?php\n\t\t\t\t\tif(array_key_exists('site_upgrade_state', $_zp_conf_vars)) {\n\t\t\t\t\t\tif($_zp_conf_vars['site_upgrade_state'] == 'closed_for_test') {\n\t\t\t\t\t\t\techo ' | <span class=\"zp_sitestatus\">' . gettext('Test mode') . '</span>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<button type=\"button\" id=\"zp__admin_link\" onclick=\"javascript:toggle('zp__admin_data');\">\n\t\t\t\t<?php echo gettext('Admin'); ?>\n\t\t\t</button>\n\t\t\t<div id=\"zp__admin_data\" style=\"display: none;\">\n\t\t\t\t<ul>\n\t\t\t\t<?php\n\t\t\t\t$outputA = ob_get_contents();\n\t\t\t\tob_end_clean();\n\t\t\t\tob_start();\n\n\t\t\t\tif (zp_loggedin(OVERVIEW_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin.php', gettext(\"Overview\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(UPLOAD_RIGHTS | FILES_RIGHTS | THEMES_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-upload.php', gettext(\"Upload\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(ALBUM_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-edit.php', gettext(\"Albums\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tzp_apply_filter('admin_toolbox_global', $zf);\n\n\t\t\t\tif (zp_loggedin(TAGS_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-tags.php', gettext(\"Tags\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(USER_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-users.php', gettext(\"Users\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(OPTIONS_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-options.php?tab=general', gettext(\"Options\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(THEMES_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-themes.php', gettext(\"Themes\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\tif (zp_loggedin(ADMIN_RIGHTS)) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-plugins.php', gettext(\"Plugins\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-logs.php', gettext(\"Logs\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\n\t\t\t\t$gal = getOption('custom_index_page');\n\t\t\t\tif (empty($gal) || !file_exists(SERVERPATH . '/' . THEMEFOLDER . '/' . $_zp_gallery->getCurrentTheme() . '/' . internalToFilesystem($gal) . '.php')) {\n\t\t\t\t\t$gal = 'index.php';\n\t\t\t\t} else {\n\t\t\t\t\t$gal .= '.php';\n\t\t\t\t}\n\t\t\t\t$inImage = false;\n\t\t\t\tswitch ($_zp_gallery_page) {\n\t\t\t\t\tcase 'index.php':\n\t\t\t\t\tcase $gal:\n\t\t\t\t\t\t// script is either index.php or the gallery index page\n\t\t\t\t\t\tif (zp_loggedin(ADMIN_RIGHTS)) {\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-edit.php?page=edit', gettext(\"Sort Gallery\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (zp_loggedin(UPLOAD_RIGHTS)) {\n\t\t\t\t\t\t\t// admin has upload rights, provide an upload link for a new album\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"javascript:newAlbum('',true);\"><?php echo gettext(\"New Album\"); ?></a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($_zp_gallery_page == 'index.php') {\n\t\t\t\t\t\t\t$redirect = '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$redirect = \"&amp;p=\" . urlencode(stripSuffix($_zp_gallery_page));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($page > 1) {\n\t\t\t\t\t\t\t$redirect .= \"&amp;page=$page\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzp_apply_filter('admin_toolbox_gallery', $zf);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'image.php':\n\t\t\t\t\t\t$inImage = true; // images are also in albums[sic]\n\t\t\t\t\tcase 'album.php':\n\t\t\t\t\t\t// script is album.php\n\t\t\t\t\t\t$albumname = $_zp_current_album->name;\n\t\t\t\t\t\tif ($_zp_current_album->isMyItem(ALBUM_RIGHTS)) {\n\t\t\t\t\t\t\t// admin is empowered to edit this album--show an edit link\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-edit.php?page=edit&album=' . pathurlencode($_zp_current_album->name), gettext('Edit album'), NULL, NULL, NULL); ?>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\tif (!$_zp_current_album->isDynamic()) {\n\t\t\t\t\t\t\t\tif ($_zp_current_album->getNumAlbums()) {\n\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-edit.php?page=edit&album=' . pathurlencode($albumname) . '&tab=subalbuminfo', gettext(\"Sort subalbums\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ($_zp_current_album->getNumImages() > 0) {\n\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-albumsort.php?page=edit&album=' . pathurlencode($albumname) . '&tab=sort', gettext(\"Sort images\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// and a delete link\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"javascript:confirmDeleteAlbum('<?php echo $zf; ?>/admin-edit.php?page=edit&amp;action=deletealbum&amp;album=<?php echo urlencode(pathurlencode($albumname)) ?>&amp;XSRFToken=<?php echo getXSRFToken('delete'); ?>');\"\n\t\t\t\t\t\t\t\t\t title=\"<?php echo gettext('Delete the album'); ?>\"><?php echo gettext('Delete album'); ?></a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($_zp_current_album->isMyItem(UPLOAD_RIGHTS) && !$_zp_current_album->isDynamic()) {\n\t\t\t\t\t\t\t// provide an album upload link if the admin has upload rights for this album and it is not a dynamic album\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<?php printLinkHTML($zf . '/admin-upload.php?album=' . pathurlencode($albumname), gettext(\"Upload Here\"), NULL, NULL, NULL); ?>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"javascript:newAlbum('<?php echo pathurlencode($albumname); ?>',true);\"><?php echo gettext(\"New Album Here\"); ?></a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzp_apply_filter('admin_toolbox_album', $albumname, $zf);\n\t\t\t\t\t\tif ($inImage) {\n\t\t\t\t\t\t\t// script is image.php\n\t\t\t\t\t\t\t$imagename = $_zp_current_image->filename;\n\t\t\t\t\t\t\tif (!$_zp_current_album->isDynamic()) { // don't provide links when it is a dynamic album\n\t\t\t\t\t\t\t\tif ($_zp_current_album->isMyItem(ALBUM_RIGHTS)) {\n\t\t\t\t\t\t\t\t\t$delete_image = gettext(\"Are you sure you want to delete this image? THIS CANNOT BE UNDONE!\");\n\t\t\t\t\t\t\t\t\t// if admin has edit rights on this album, provide a delete link for the image.\n\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<a href=\"javascript:confirmDelete('<?php echo $zf; ?>/admin-edit.php?page=edit&amp;action=deleteimage&amp;album=<?php echo urlencode(pathurlencode($albumname)); ?>&amp;image=<?php echo urlencode($imagename); ?>&amp;XSRFToken=<?php echo getXSRFToken('delete'); ?>','<?php echo $delete_image; ?>');\"\n\t\t\t\t\t\t\t\t\t\t\t title=\"<?php echo gettext(\"Delete the image\"); ?>\"><?php echo gettext(\"Delete image\"); ?></a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<a href=\"<?php echo $zf; ?>/admin-edit.php?page=edit&amp;album=<?php echo pathurlencode($albumname); ?>&amp;singleimage=<?php echo urlencode($imagename); ?>&amp;tab=imageinfo&amp;nopagination\"\n\t\t\t\t\t\t\t\t\t\t\t title=\"<?php echo gettext('Edit image'); ?>\"><?php echo gettext('Edit image'); ?></a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// set return to this image page\n\t\t\t\t\t\t\t\tzp_apply_filter('admin_toolbox_image', $albumname, $imagename, $zf);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$redirect = \"&amp;album=\" . html_encode(pathurlencode($albumname)) . \"&amp;image=\" . urlencode($imagename);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// set the return to this album/page\n\t\t\t\t\t\t\t$redirect = \"&amp;album=\" . html_encode(pathurlencode($albumname));\n\t\t\t\t\t\t\tif ($page > 1) {\n\t\t\t\t\t\t\t\t$redirect .= \"&amp;page=$page\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'search.php':\n\t\t\t\t\t\t$words = $_zp_current_search->getSearchWords();\n\t\t\t\t\t\tif (!empty($words)) {\n\t\t\t\t\t\t\t// script is search.php with a search string\n\t\t\t\t\t\t\tif (zp_loggedin(UPLOAD_RIGHTS)) {\n\t\t\t\t\t\t\t\t$link = $zf . '/admin-dynamic-album.php?' . substr($_zp_current_search->getSearchParams(), 1);\n\t\t\t\t\t\t\t\t// if admin has edit rights allow him to create a dynamic album from the search\n\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<a href=\"<?php echo $link; ?>\" title=\"<?php echo gettext('Create an album from the search'); ?>\" ><?php echo gettext('Create Album'); ?></a>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tzp_apply_filter('admin_toolbox_search', $zf);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$redirect = \"&amp;p=search\" . $_zp_current_search->getSearchParams() . \"&amp;page=$page\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// arbitrary custom page\n\t\t\t\t\t\t$gal = stripSuffix($_zp_gallery_page);\n\t\t\t\t\t\t$redirect = \"&amp;p=\" . urlencode($gal);\n\t\t\t\t\t\tif ($page > 1) {\n\t\t\t\t\t\t\t$redirect .= \"&amp;page=$page\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$redirect = zp_apply_filter('admin_toolbox_' . $gal, $redirect, $zf);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$redirect = zp_apply_filter('admin_toolbox_close', $redirect, $zf);\n\t\t\t\tif ($_zp_current_admin_obj->logout_link) {\n\t\t\t\t\t// logout link\n\t\t\t\t\t$sec = (int) ((SERVER_PROTOCOL == 'https') & true);\n\t\t\t\t\t$link = SEO_FULLWEBPATH . '/index.php?logout=' . $sec . $redirect;\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href=\"<?php echo $link; ?>\"><?php echo gettext(\"Logout\"); ?> </a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\t$outputB = ob_get_contents();\n\t\t\t\tob_end_clean();\n\t\t\t\tif ($outputB) {\n\t\t\t\t\techo $outputA . $outputB;\n\t\t\t\t\t?>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t\t<?php\n\t\t}\n\t}\n}\n\n//*** Gallery Index (album list) Context ***\n//******************************************\n\n/**\n * Returns the raw title of the gallery.\n *\n * @return string\n */\nfunction getGalleryTitle() {\n\tglobal $_zp_gallery;\n\treturn $_zp_gallery->getTitle();\n}\n\n/**\n * Returns a text-only title of the gallery.\n *\n * @return string\n */\nfunction getBareGalleryTitle() {\n\treturn getBare(getGalleryTitle());\n}\n\n/**\n * Prints the title of the gallery.\n */\nfunction printGalleryTitle() {\n\techo html_encodeTagged(getGalleryTitle());\n}\n\nfunction printBareGalleryTitle() {\n\techo html_encode(getBareGalleryTitle());\n}\n\n/**\n * Function to create the page title to be used within the html <head> <title></title> element.\n * Usefull if you use one header.php for the header of all theme pages instead of individual ones on the theme pages\n * It returns the title and site name in reversed breadcrumb order:\n * <title of current page> | <parent item if present> | <gallery title>\n * It supports standard gallery pages as well a custom and Zenpage news articles, categories and pages.\n *\n * @param string $separator How you wish the parts to be separated\n * @param bool $listparentalbums If the parent albums should be printed in reversed order before the current\n * @param bool $listparentpage If the parent Zenpage pages should be printed in reversed order before the current page\n */\nfunction getHeadTitle($separator = ' | ', $listparentalbums = true, $listparentpages = true) {\n\tglobal $_zp_gallery, $_zp_current_album, $_zp_current_image, $_zp_current_zenpage_news, $_zp_current_zenpage_page, $_zp_gallery_page, $_zp_current_category, $_zp_page, $_myFavorites;\n\t$mainsitetitle = html_encode(getBare(getMainSiteName()));\n\t$separator = html_encode($separator);\n\tif ($mainsitetitle) {\n\t\t$mainsitetitle = $separator . $mainsitetitle;\n\t}\n\t$gallerytitle = html_encode(getBareGalleryTitle());\n\tif ($_zp_page > 1) {\n\t\t$pagenumber = ' (' . $_zp_page . ')';\n\t} else {\n\t\t$pagenumber = '';\n\t}\n\tswitch ($_zp_gallery_page) {\n\t\tcase 'index.php':\n\t\t\treturn $gallerytitle . $mainsitetitle . $pagenumber;\n\t\t\tbreak;\n\t\tcase 'album.php':\n\t\tcase 'image.php':\n\t\t\tif ($listparentalbums) {\n\t\t\t\t$parents = getParentAlbums();\n\t\t\t\t$parentalbums = '';\n\t\t\t\tif (count($parents) != 0) {\n\t\t\t\t\t$parents = array_reverse($parents);\n\t\t\t\t\tforeach ($parents as $parent) {\n\t\t\t\t\t\t$parentalbums .= html_encode(getBare($parent->getTitle())) . $separator;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$parentalbums = '';\n\t\t\t}\n\t\t\t$albumtitle = html_encode(getBareAlbumTitle()) . $pagenumber . $separator . $parentalbums . $gallerytitle . $mainsitetitle;\n\t\t\tswitch ($_zp_gallery_page) {\n\t\t\t\tcase 'album.php':\n\t\t\t\t\treturn $albumtitle;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'image.php':\n\t\t\t\t\treturn html_encode(getBareImageTitle()) . $separator . $albumtitle;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'news.php':\n\t\t\tif (function_exists(\"is_NewsArticle\")) {\n\t\t\t\tif (is_NewsArticle()) {\n\t\t\t\t\treturn html_encode(getBareNewsTitle()) . $pagenumber . $separator . gettext('News') . $separator . $gallerytitle . $mainsitetitle;\n\t\t\t\t} else if (is_NewsCategory()) {\n\t\t\t\t\treturn html_encode(getBare($_zp_current_category->getTitle())) . $pagenumber . $separator . gettext('News') . $separator . $gallerytitle . $mainsitetitle;\n\t\t\t\t} else {\n\t\t\t\t\treturn gettext('News') . $pagenumber . $separator . $gallerytitle . $mainsitetitle;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'pages.php':\n\t\t\tif ($listparentpages) {\n\t\t\t\t$parents = $_zp_current_zenpage_page->getParents();\n\t\t\t\t$parentpages = '';\n\t\t\t\tif (count($parents) != 0) {\n\t\t\t\t\t$parents = array_reverse($parents);\n\t\t\t\t\tforeach ($parents as $parent) {\n\t\t\t\t\t\t$obj = new ZenpagePage($parent);\n\t\t\t\t\t\t$parentpages .= html_encode(getBare($obj->getTitle())) . $separator;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$parentpages = '';\n\t\t\t}\n\t\t\treturn html_encode(getBarePageTitle()) . $pagenumber . $separator . $parentpages . $gallerytitle . $mainsitetitle;\n\t\t\tbreak;\n\t\tcase '404.php':\n\t\t\treturn gettext('Object not found') . $separator . $gallerytitle . $mainsitetitle;\n\t\t\tbreak;\n\t\tdefault: // for all other possible static custom pages\n\t\t\t$custompage = stripSuffix($_zp_gallery_page);\n\t\t\t$standard = array(\n\t\t\t\t\t'gallery' => gettext('Gallery'), \n\t\t\t\t\t'contact' => gettext('Contact'), \n\t\t\t\t\t'register' => gettext('Register'), \n\t\t\t\t\t'search' => gettext('Search'), \n\t\t\t\t\t'archive' => gettext('Archive view'), \n\t\t\t\t\t'password' => gettext('Password required'));\n\t\t\tif (is_object($_myFavorites)) {\n\t\t\t\t$standard['favorites'] = gettext('My favorites');\n\t\t\t}\n\t\t\tif (array_key_exists($custompage, $standard)) {\n\t\t\t\treturn $standard[$custompage] . $pagenumber . $separator . $gallerytitle . $mainsitetitle;\n\t\t\t} else {\n\t\t\t\treturn $custompage . $pagenumber . $separator . $gallerytitle . $mainsitetitle;\n\t\t\t}\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Function to print the html <title>title</title> within the <head> of a html page based on the current theme page\n * Usefull if you use one header.php for the header of all theme pages instead of individual ones on the theme pages\n * It prints the title and site name including the <title> tag in reversed breadcrumb order:\n * <title><title of current page> | <parent item if present> | <gallery title></title>\n * It supports standard gallery pages as well a custom and Zenpage news articles, categories and pages.\n *\n * @param string $separator How you wish the parts to be separated\n * @param bool $listparentalbums If the parent albums should be printed in reversed order before the current\n * @param bool $listparentpage If the parent Zenpage pages should be printed in reversed order before the current page\n */\nfunction printHeadTitle($separator = ' | ', $listparentalbums = true, $listparentpages = true) {\n\techo '<title>' . getHeadTitle($separator, $listparentalbums, $listparentpages) . '</title>';\n}\n\n/**\n * Returns the raw description of the gallery.\n *\n * @return string\n */\nfunction getGalleryDesc() {\n\tglobal $_zp_gallery;\n\treturn $_zp_gallery->getDesc();\n}\n\n/**\n * Returns a text-only description of the gallery.\n *\n * @return string\n */\nfunction getBareGalleryDesc() {\n\treturn getBare(getGalleryDesc());\n}\n\n/**\n * Prints the description of the gallery.\n */\nfunction printGalleryDesc() {\n\techo html_encodeTagged(getGalleryDesc());\n}\n\nfunction printBareGalleryDesc() {\n\techo html_encode(getBareGalleryDesc());\n}\n\n/**\n * Returns the name of the main website as set by the \"Website Title\" option\n * on the gallery options tab. Use this if Zenphoto is only a part of your website.\n *\n * @return string\n */\nfunction getMainSiteName() {\n\tglobal $_zp_gallery;\n\treturn $_zp_gallery->getWebsiteTitle();\n}\n\n/**\n * Returns the URL of the main website as set by the \"Website URL\" option\n * on the gallery options tab. Use this if Zenphoto is only a part of your website.\n *\n * @return string\n */\nfunction getMainSiteURL() {\n\tglobal $_zp_gallery;\n\treturn $_zp_gallery->getWebsiteURL();\n}\n\n/**\n * Returns the URL of the main gallery index page. If a custom index page is set this returns that page.\n * So this is not necessarily the home page of the site!\n * @return string\n */\nfunction getGalleryIndexURL() {\n\tglobal $_zp_current_album, $_zp_gallery_page;\n\t$page = 1;\n\tif (in_context(ZP_ALBUM) && $_zp_gallery_page != 'index.php') {\n\t\t$album = getUrAlbum($_zp_current_album);\n\t\t$page = $album->getGalleryPage();\n\t}\n\tif (!$link = getCustomGalleryIndexURL($page)) {\n\t\t$link = getStandardGalleryIndexURL($page);\n\t}\n\treturn zp_apply_filter('getLink', $link, 'index.php', NULL);\n}\n\n/**\n * Returns the url to the standard gallery index.php page\n *\n * @see getGalleryIndexURL()\n *\n * @param int $page Pagenumber to append\n * @param bool $webpath host path to be prefixed. If \"false\" is passed you will get a localized \"WEBPATH\"\n * @return string\n */\nfunction getStandardGalleryIndexURL($page = 1, $webpath = null) {\n\tif ($page > 1) {\n\t\treturn rewrite_path('/' . _PAGE_ . '/' . $page . '/', \"/index.php?\" . \"page=\" . $page, $webpath);\n\t} else {\n\t\tif (is_null($webpath)) {\n\t\t\tif (class_exists('seo_locale')) {\n\t\t\t\t$webpath = seo_locale::localePath();\n\t\t\t} else {\n\t\t\t\t$webpath = WEBPATH;\n\t\t\t}\n\t\t}\n\t\treturn $webpath . \"/\";\n\t}\n}\n\n/**\n * Gets the custom gallery index url if one is set, otherwise false\n *\n * @see getGalleryIndexURL()\n *\n * @global array $_zp_conf_vars\n * @param int $page Pagenumber for pagination\n * @param bool $webpath host path to be prefixed. If \"false\" is passed you will get a localized \"WEBPATH\"\n * @return string\n */\nfunction getCustomGalleryIndexURL($page = 1, $webpath = null) {\n\t$custom_index = getOption('custom_index_page');\n\tif ($custom_index) {\n\t\t$link = getCustomPageURL($custom_index, '', $webpath);\n\t\tif ($page > 1) {\n\t\t\tif (MOD_REWRITE) {\n\t\t\t\t$link .= $page . '/';\n\t\t\t} else {\n\t\t\t\t$link .= \"&amp;page=\" . $page;\n\t\t\t}\n\t\t}\n\t\treturn $link;\n\t}\n\treturn false;\n}\n\n/**\n * Returns the name to the individual custom gallery index page name if set,\n * otherwise returns generic custom gallery page \"gallery.php\" that is widely supported by themes\n * If you need to check if there is an indovidual custom_index_page set use\n * `getOption('custom_index_page')` or `getCustomGalleryIndexURL()`\n *\n * @return string\n */\nfunction getCustomGalleryIndexPage() {\n\t$custom_index = getOption('custom_index_page');\n\tif ($custom_index) {\n\t\treturn $custom_index . '.php';\n\t}\n\treturn 'gallery.php';\n}\n\n/**\n * If a custom gallery index page is set this first prints a link to the actual site index (home page = index.php)\n * followed by the gallery index page link. Otherwise just the gallery index link\n *\n * @since 1.4.9\n * @param string $after Text to append after and outside the link for breadcrumbs\n * @param string $text Name of the link, if NULL \"Gallery\" is used\n * @param bool $printHomeURL In case of a custom gallery index, display breadcrumb with home link (default is true)\n */\nfunction printGalleryIndexURL($after = NULL, $text = NULL, $printHomeURL = true) {\n\tglobal $_zp_gallery_page;\n\tif (is_null($text)) {\n\t\t$text = gettext('Gallery');\n\t}\n\t$customgalleryindex = getOption('custom_index_page');\n\tif ($customgalleryindex && $printHomeURL) {\n\t\tprintSiteHomeURL($after);\n\t}\n\tif ($_zp_gallery_page == getCustomGalleryIndexPage()) {\n\t\t$after = NULL;\n\t}\n\tif (!$customgalleryindex || ($customgalleryindex && in_array($_zp_gallery_page, array('image.php', 'album.php', getCustomGalleryIndexPage())))) {\n\t\tprintLinkHTML(getGalleryIndexURL(), $text, $text, 'galleryindexurl');\n\t\techo $after;\n\t}\n}\n\n\n/**\n * Returns the home page link (WEBPATH) to the Zenphoto theme index.php page\n * Use in breadcrumbs if the theme uses a custom gallery index page so the gallery is not the site's home page\n *\n * @since 1.4.9\n * @global string $_zp_gallery_page\n * @return string\n */\nfunction getSiteHomeURL() {\n\treturn WEBPATH . '/';\n}\n\n/**\n * Prints the home page link (WEBPATH with trailing slash) to a Zenphoto theme index.php page\n * Use in breadcrumbs if the theme uses a custom gallery index page so the gallery is not the site's home page\n *\n * @param string $after Text after and outside the link for breadcrumbs\n * @param string $text Text of the link, if NULL \"Home\"\n */\nfunction printSiteHomeURL($after = NULL, $text = NULL) {\n\tglobal $_zp_gallery_page;\n\tif ($_zp_gallery_page == 'index.php') {\n\t\t$after = '';\n\t}\n\tif (is_null($text)) {\n\t\t$text = gettext('Home');\n\t}\n\tprintLinkHTML(getSiteHomeURL(), $text, $text, 'homeurl');\n\techo $after;\n}\n\n/**\n * If the privacy page url option is set this prints a link to it\n * @param string $before To print before the link\n * @param string $after To print after the link\n */\nfunction printPrivacyPageLink($before = null, $after = null) {\n\t$data = getDataUsageNotice();\n\tif (!empty($data['url'])) {\n\t\techo $before;\n\t\tprintLinkHTML($data['url'], $data['linktext'], $data['linktext'], null, null);\n\t\techo $after;\n\t}\n}\n\n/**\n * Returns the number of albums.\n *\n * @return int\n */\nfunction getNumAlbums() {\n\tglobal $_zp_gallery, $_zp_current_album, $_zp_current_search;\n\tif (in_context(ZP_SEARCH) && is_null($_zp_current_album)) {\n\t\treturn $_zp_current_search->getNumAlbums();\n\t} else if (in_context(ZP_ALBUM)) {\n\t\treturn $_zp_current_album->getNumAlbums();\n\t} else {\n\t\treturn $_zp_gallery->getNumAlbums();\n\t}\n}\n\n/**\n * Returns the name of the currently active theme\n *\n * @return string\n */\nfunction getCurrentTheme() {\n\tglobal $_zp_gallery;\n\treturn $_zp_gallery->getCurrentTheme();\n}\n\n/* * * Album AND Gallery Context *********** */\n/* * *************************************** */\n\n/**\n * WHILE next_album(): context switches to Album.\n * If we're already in the album context, this is a sub-albums loop, which,\n * quite simply, changes the source of the album list.\n * Switch back to the previous context when there are no more albums.\n\n * Returns true if there are albums, false if none\n *\n * @param bool $all true to go through all the albums\n * @param bool $mine override the password checks\n * @return bool\n * @since 0.6\n */\nfunction next_album($all = false, $mine = NULL) {\n\tglobal $_zp_albums, $_zp_gallery, $_zp_current_album, $_zp_page, $_zp_current_album_restore, $_zp_current_search;\n\tif (is_null($_zp_albums)) {\n\t\tif (in_context(ZP_SEARCH)) {\n\t\t\t$_zp_albums = $_zp_current_search->getAlbums($all ? 0 : $_zp_page, NULL, NULL, true, $mine);\n\t\t} else if (in_context(ZP_ALBUM)) {\n\t\t\t$_zp_albums = $_zp_current_album->getAlbums($all ? 0 : $_zp_page, NULL, NULL, true, $mine);\n\t\t} else {\n\t\t\t$_zp_albums = $_zp_gallery->getAlbums($all ? 0 : $_zp_page, NULL, NULL, true, $mine);\n\t\t}\n\t\tif (empty($_zp_albums)) {\n\t\t\treturn NULL;\n\t\t}\n\t\t$_zp_current_album_restore = $_zp_current_album;\n\t\t$_zp_current_album = newAlbum(array_shift($_zp_albums), true, true);\n\t\tsave_context();\n\t\tadd_context(ZP_ALBUM);\n\t\treturn true;\n\t} else if (empty($_zp_albums)) {\n\t\t$_zp_albums = NULL;\n\t\t$_zp_current_album = $_zp_current_album_restore;\n\t\trestore_context();\n\t\treturn false;\n\t} else {\n\t\t$_zp_current_album = newAlbum(array_shift($_zp_albums), true, true);\n\t\treturn true;\n\t}\n}\n\n/**\n * Returns the number of the current page without printing it.\n *\n * @return int\n */\nfunction getCurrentPage() {\n\tglobal $_zp_page;\n\treturn $_zp_page;\n}\n\n/**\n * Returns a list of all albums decendent from an album\n *\n * @param object $album optional album. If absent the current album is used\n * @return array\n */\nfunction getAllAlbums($album = NULL) {\n\tglobal $_zp_current_album, $_zp_gallery;\n\tif (is_null($album))\n\t\t$album = $_zp_current_album;\n\tif (!is_object($album))\n\t\treturn;\n\t$list = array();\n\t$subalbums = $album->getAlbums(0);\n\tif (is_array($subalbums)) {\n\t\tforeach ($subalbums as $subalbum) {\n\t\t\t$list[] = $subalbum;\n\t\t\t$sub = newAlbum($subalbum);\n\t\t\t$list = array_merge($list, getAllAlbums($sub));\n\t\t}\n\t}\n\treturn $list;\n}\n\n/**\n * Gets an array of the album ids of all accessible albums (publich or user dependend)\n *\n * @param object $obj from whence to get the albums\n * @param array $albumlist collects the list\n * @param bool $scan force scan for new images in the album folder\n */\nfunction getAllAccessibleAlbums($obj, &$albumlist, $scan) {\n\tglobal $_zp_gallery;\n\t$locallist = $obj->getAlbums();\n foreach ($locallist as $folder) {\n\t\t$album = newAlbum($folder);\n\t\tIf (!$album->isDynamic() && $album->checkAccess()) {\n\t\t\tif ($scan)\n\t\t\t\t$album->getImages();\n\t\t\t$albumlist[] = $album->getID();\n\t\t\tgetAllAccessibleAlbums($album, $albumlist, $scan);\n\t\t}\n\t}\n}\n\n/**\n * Returns the number of pages for the current object\n *\n * @param bool $_oneImagePage set to true if your theme collapses all image thumbs\n * or their equivalent to one page. This is typical with flash viewer themes\n *\n * @return int\n */\nfunction getTotalPages($_oneImagePage = false) {\n\tglobal $_zp_gallery, $_zp_current_album, $_firstPageImages, $_zp_zenpage, $_zp_current_category;\n\tif (in_context(ZP_ALBUM | ZP_SEARCH)) {\n\t\t$albums_per_page = max(1, getOption('albums_per_page'));\n\t\t$pageCount = (int) ceil(getNumAlbums() / $albums_per_page);\n\t\t$imageCount = getNumImages();\n\t\tif ($_oneImagePage) {\n\t\t\tif ($_oneImagePage === true) {\n\t\t\t\t$imageCount = min(1, $imageCount);\n\t\t\t} else {\n\t\t\t\t$imageCount = 0;\n\t\t\t}\n\t\t}\n\t\t$images_per_page = max(1, getOption('images_per_page'));\n\t\t$pageCount = ($pageCount + ceil(($imageCount - $_firstPageImages) / $images_per_page));\n\t\treturn $pageCount;\n\t} else if (get_context() == ZP_INDEX) {\n\t\tif (galleryAlbumsPerPage() != 0) {\n\t\t\treturn (int) ceil($_zp_gallery->getNumAlbums() / galleryAlbumsPerPage());\n\t\t} else {\n\t\t\treturn NULL;\n\t\t}\n\t\treturn NULL;\n\t} else if (isset($_zp_zenpage)) {\n\t\tif (in_context(ZP_ZENPAGE_NEWS_CATEGORY)) {\n\t\t\t$cat = $_zp_current_category;\n\t\t} else {\n\t\t\t$cat = NULL;\n\t\t}\n\t\treturn (int) ceil(count($_zp_zenpage->getArticles(0, NULL, true, NULL, NULL, NULL, $cat)) / ZP_ARTICLES_PER_PAGE);\n\t}\n}\n\n/**\n * Returns the URL of the page number passed as a parameter\n *\n * @param int $page Which page is desired\n * @param int $total How many pages there are.\n * @return int\n */\nfunction getPageNumURL($page, $total = null) {\n\tglobal $_zp_current_album, $_zp_gallery, $_zp_current_search, $_zp_gallery_page, $_zp_conf_vars;\n\tif (is_null($total)) {\n\t\t$total = getTotalPages();\n\t}\n\tif ($page <= 0 || $page > $total) {\n\t\treturn NULL;\n\t}\n\tif (in_context(ZP_SEARCH)) {\n\t\t$searchwords = $_zp_current_search->codifySearchString();\n\t\t$searchdate = $_zp_current_search->getSearchDate();\n\t\t$searchfields = $_zp_current_search->getSearchFields(true);\n\t\t$searchpagepath = getSearchURL($searchwords, $searchdate, $searchfields, $page, array('albums' => $_zp_current_search->getAlbumList()));\n\t\treturn $searchpagepath;\n\t} else if (in_context(ZP_ALBUM)) {\n\t\treturn $_zp_current_album->getLink($page);\n\t} else if (in_array($_zp_gallery_page, array('index.php', 'album.php', 'image.php'))) {\n\t\tif (in_context(ZP_INDEX)) {\n\t\t\t$pagination1 = '/';\n\t\t\t$pagination2 = 'index.php';\n\t\t\tif ($page > 1) {\n\t\t\t\t$pagination1 .= _PAGE_ . '/' . $page . '/';\n\t\t\t\t$pagination2 .= '?page=' . $page;\n\t\t\t}\n\t\t} else {\n\t\t\treturn NULL;\n\t\t}\n\t} else {\n\t\t// handle custom page\n\t\t$pg = stripSuffix($_zp_gallery_page);\n\t\tif (array_key_exists($pg, $_zp_conf_vars['special_pages'])) {\n\t\t\t$pagination1 = preg_replace('~^_PAGE_/~', _PAGE_ . '/', $_zp_conf_vars['special_pages'][$pg]['rewrite']) . '/';\n\t\t} else {\n\t\t\t$pagination1 = '/' . _PAGE_ . '/' . $pg . '/';\n\t\t}\n\t\t$pagination2 = 'index.php?p=' . $pg;\n\t\tif ($page > 1) {\n\t\t\t$pagination1 .= $page . '/';\n\t\t\t$pagination2 .= '&page=' . $page;\n\t\t}\n\t}\n\treturn zp_apply_filter('getLink', rewrite_path($pagination1, $pagination2), $_zp_gallery_page, $page);\n}\n\n/**\n * Returns true if there is a next page\n *\n * @return bool\n */\nfunction hasNextPage() {\n\treturn (getCurrentPage() < getTotalPages());\n}\n\n/**\n * Returns the URL of the next page. Use within If or while loops for pagination.\n *\n * @return string\n */\nfunction getNextPageURL() {\n\treturn getPageNumURL(getCurrentPage() + 1);\n}\n\n/**\n * Prints the URL of the next page.\n *\n * @param string $text text for the URL\n * @param string $title Text for the HTML title\n * @param string $class Text for the HTML class\n * @param string $id Text for the HTML id\n */\nfunction printNextPageURL($text, $title = NULL, $class = NULL, $id = NULL) {\n\tif (hasNextPage()) {\n\t\tprintLinkHTML(getNextPageURL(), $text, $title, $class, $id);\n\t} else {\n\t\techo \"<span class=\\\"disabledlink\\\">$text</span>\";\n\t}\n}\n\n/**\n * Returns TRUE if there is a previous page. Use within If or while loops for pagination.\n *\n * @return bool\n */\nfunction hasPrevPage() {\n\treturn (getCurrentPage() > 1);\n}\n\n/**\n * Returns the URL of the previous page.\n *\n * @return string\n */\nfunction getPrevPageURL() {\n\treturn getPageNumURL(getCurrentPage() - 1);\n}\n\n/**\n * Returns the URL of the previous page.\n *\n * @param string $text The linktext that should be printed as a link\n * @param string $title The text the html-tag \"title\" should contain\n * @param string $class Insert here the CSS-class name you want to style the link with\n * @param string $id Insert here the CSS-ID name you want to style the link with\n */\nfunction printPrevPageURL($text, $title = NULL, $class = NULL, $id = NULL) {\n\tif (hasPrevPage()) {\n\t\tprintLinkHTML(getPrevPageURL(), $text, $title, $class, $id);\n\t} else {\n\t\techo \"<span class=\\\"disabledlink\\\">$text</span>\";\n\t}\n}\n\n/**\n * Prints a page navigation including previous and next page links\n *\n * @param string $prevtext Insert here the linktext like 'previous page'\n * @param string $separator Insert here what you like to be shown between the prev and next links\n * @param string $nexttext Insert here the linktext like \"next page\"\n * @param string $class Insert here the CSS-class name you want to style the link with (default is \"pagelist\")\n * @param string $id Insert here the CSS-ID name if you want to style the link with this\n */\nfunction printPageNav($prevtext, $separator, $nexttext, $class = 'pagenav', $id = NULL) {\n\techo \"<div\" . (($id) ? \" id=\\\"$id\\\"\" : \"\") . \" class=\\\"$class\\\">\";\n\tprintPrevPageURL($prevtext, gettext(\"Previous Page\"));\n\techo \" $separator \";\n\tprintNextPageURL($nexttext, gettext(\"Next Page\"));\n\techo \"</div>\\n\";\n}\n\n/**\n * Prints a list of all pages.\n *\n * @param string $class the css class to use, \"pagelist\" by default\n * @param string $id the css id to use\n * @param int $navlen Number of navigation links to show (0 for all pages). Works best if the number is odd.\n */\nfunction printPageList($class = 'pagelist', $id = NULL, $navlen = 9) {\n\tprintPageListWithNav(null, null, false, false, $class, $id, false, $navlen);\n}\n\n/**\n * returns a page nav list.\n *\n * @param bool $_oneImagePage set to true if there is only one image page as, for instance, in flash themes\n * @param int $navlen Number of navigation links to show (0 for all pages). Works best if the number is odd.\n * @param bool $firstlast Add links to the first and last pages of you gallery\n * @param int $current the current page\n * @param int $total total number of pages\n *\n */\nfunction getPageNavList($_oneImagePage, $navlen, $firstlast, $current, $total) {\n\t$result = array();\n\tif (hasPrevPage()) {\n\t\t$result['prev'] = getPrevPageURL();\n\t} else {\n\t\t$result['prev'] = NULL;\n\t}\n\tif ($firstlast) {\n\t\t$result[1] = getPageNumURL(1, $total);\n\t}\n\n\tif ($navlen == 0) {\n\t\t$navlen = $total;\n\t}\n\t$extralinks = 2;\n\tif ($firstlast)\n\t\t$extralinks = $extralinks + 2;\n\t$len = floor(($navlen - $extralinks) / 2);\n\t$j = max(round($extralinks / 2), min($current - $len - (2 - round($extralinks / 2)), $total - $navlen + $extralinks - 1));\n\t$ilim = min($total, max($navlen - round($extralinks / 2), $current + floor($len)));\n\t$k1 = round(($j - 2) / 2) + 1;\n\t$k2 = $total - round(($total - $ilim) / 2);\n\n\tfor ($i = $j; $i <= $ilim; $i++) {\n\t\t$result[$i] = getPageNumURL($i, $total);\n\t}\n\tif ($firstlast) {\n\t\t$result[$total] = getPageNumURL($total, $total);\n\t}\n\tif (hasNextPage()) {\n\t\t$result['next'] = getNextPageURL();\n\t} else {\n\t\t$result['next'] = NULL;\n\t}\n\treturn $result;\n}\n\n/**\n * Prints a full page navigation including previous and next page links with a list of all pages in between.\n *\n * @param string $prevtext Insert here the linktext like 'previous page'\n * @param string $nexttext Insert here the linktext like 'next page'\n * @param bool $_oneImagePage set to true if there is only one image page as, for instance, in flash themes\n * @param string $nextprev set to true to get the 'next' and 'prev' links printed\n * @param string $class Insert here the CSS-class name you want to style the link with (default is \"pagelist\")\n * @param string $id Insert here the CSS-ID name if you want to style the link with this\n * @param bool $firstlast Add links to the first and last pages of you gallery\n * @param int $navlen Number of navigation links to show (0 for all pages). Works best if the number is odd.\n */\nfunction printPageListWithNav($prevtext, $nexttext, $_oneImagePage = false, $nextprev = true, $class = 'pagelist', $id = NULL, $firstlast = true, $navlen = 9) {\n\t$current = getCurrentPage();\n\t$total = max(1, getTotalPages($_oneImagePage));\n\t$nav = getPageNavList($_oneImagePage, $navlen, $firstlast, $current, $total);\n\tif ($total > 1) {\n\t\t?>\n\t\t<div <?php if ($id) echo ' id=\"'.$id.'\"'; ?> class=\"<?php echo $class; ?>\">\n\t\t\t<ul class=\"<?php echo $class; ?>\">\n\t\t\t\t<?php\n\t\t\t\t$prev = $nav['prev'];\n\t\t\t\tunset($nav['prev']);\n\t\t\t\t$next = $nav['next'];\n\t\t\t\tunset($nav['next']);\n\t\t\t\tif ($nextprev) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li class=\"prev\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tif ($prev) {\n\t\t\t\t\t\t\tprintLinkHTML($prev, html_encode($prevtext), gettext('Previous Page'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<span class=\"disabledlink\"><?php echo html_encode($prevtext); ?></span>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\t$last = NULL;\n\t\t\t\tif ($firstlast) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li class=\"<?php\n\t\t\t\t\tif ($current == 1)\n\t\t\t\t\t\techo 'current';\n\t\t\t\t\telse\n\t\t\t\t\t\techo 'first';\n\t\t\t\t\t?>\">\n\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\tif ($current == 1) {\n\t\t\t\t\t\t\t\t\techo '1';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tprintLinkHTML($nav[1], 1, gettext(\"Page 1\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t\t$last = 1;\n\t\t\t\t\tunset($nav[1]);\n\t\t\t\t}\n\t\t\t\tforeach ($nav as $i => $link) {\n\t\t\t\t\t$d = $i - $last;\n\t\t\t\t\tif ($d > 2) {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$k1 = $i - (int) (($i - $last) / 2);\n\t\t\t\t\t\t\tprintLinkHTML(getPageNumURL($k1, $total), '...', sprintf(ngettext('Page %u', 'Page %u', $k1), $k1));\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t} else if ($d == 2) {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$k1 = $last + 1;\n\t\t\t\t\t\t\tprintLinkHTML(getPageNumURL($k1, $total), $k1, sprintf(ngettext('Page %u', 'Page %u', $k1), $k1));\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<li<?php if ($current == $i) echo ' class=\"current\"'; ?>>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tif ($i == $current) {\n\t\t\t\t\t\t\techo $i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$title = sprintf(ngettext('Page %1$u', 'Page %1$u', $i), $i);\n\t\t\t\t\t\t\tprintLinkHTML($link, $i, $title);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t\t$last = $i;\n\t\t\t\t\tunset($nav[$i]);\n\t\t\t\t\tif ($firstlast && count($nav) == 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($firstlast) {\n\t\t\t\t\tforeach ($nav as $i => $link) {\n\t\t\t\t\t\t$d = $i - $last;\n\t\t\t\t\t\tif ($d > 2) {\n\t\t\t\t\t\t\t$k1 = $i - (int) (($i - $last) / 2);\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<?php printLinkHTML(getPageNumURL($k1, $total), '...', sprintf(ngettext('Page %u', 'Page %u', $k1), $k1)); ?>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t} else if ($d == 2) {\n\t\t\t\t\t\t\t$k1 = $last + 1;\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<?php printLinkHTML(getPageNumURL($k1, $total), $k1, sprintf(ngettext('Page %u', 'Page %u', $k1), $k1)); ?>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<li class=\"last<?php if ($current == $i) echo ' current'; ?>\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\tif ($current == $i) {\n\t\t\t\t\t\t\t\techo $i;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tprintLinkHTML($link, $i, sprintf(ngettext('Page %u', 'Page %u', $i), $i));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($nextprev) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li class=\"next\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tif ($next) {\n\t\t\t\t\t\t\tprintLinkHTML($next, html_encode($nexttext), gettext('Next Page'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<span class=\"disabledlink\"><?php echo html_encode($nexttext); ?></span>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</ul>\n\t\t</div>\n\t\t<?php\n\t}\n}\n\n//*** Album Context ************************\n//******************************************\n\n/**\n * Sets the album passed as the current album\n *\n * @param object $album the album to be made current\n */\nfunction makeAlbumCurrent($album) {\n\tglobal $_zp_current_album;\n\t$_zp_current_album = $album;\n\tset_context(ZP_INDEX | ZP_ALBUM);\n}\n\n/**\n * Returns the raw title of the current album.\n *\n * @return string\n */\nfunction getAlbumTitle() {\n\tif (!in_context(ZP_ALBUM))\n\t\treturn false;\n\tglobal $_zp_current_album;\n\treturn $_zp_current_album->getTitle();\n}\n\n/**\n * Returns a text-only title of the current album.\n *\n * @return string\n */\nfunction getBareAlbumTitle() {\n\treturn getBare(getAlbumTitle());\n}\n\n/**\n * Returns an album title taged with of Not visible or password protected status\n *\n * @return string;\n */\nfunction getAnnotatedAlbumTitle() {\n\tglobal $_zp_current_album;\n\t$title = getBareAlbumTitle();\n\t$pwd = $_zp_current_album->getPassword();\n\tif (zp_loggedin() && !empty($pwd)) {\n\t\t$title .= \"\\n\" . gettext('The album is password protected.');\n\t}\n\tif (!$_zp_current_album->getShow()) {\n\t\t$title .= \"\\n\" . gettext('The album is un-published.');\n\t}\n\treturn $title;\n}\n\nfunction printAnnotatedAlbumTitle() {\n\techo html_encode(getAnnotatedAlbumTitle());\n}\n\n/**\n * Prints an encapsulated title of the current album.\n * If you are logged in you can click on this to modify the title on the fly.\n *\n * @author Ozh\n */\nfunction printAlbumTitle() {\n\techo html_encodeTagged(getAlbumTitle());\n}\n\nfunction printBareAlbumTitle() {\n\techo html_encodeTagged(getBareAlbumTitle());\n}\n\n/**\n * Gets the 'n' for n of m albums\n *\n * @return int\n */\nfunction albumNumber() {\n\tglobal $_zp_current_album, $_zp_current_image, $_zp_current_search, $_zp_gallery;\n\t$name = $_zp_current_album->getFileName();\n\tif (in_context(ZP_SEARCH)) {\n\t\t$albums = $_zp_current_search->getAlbums();\n\t} else if (in_context(ZP_ALBUM)) {\n\t\t$parent = $_zp_current_album->getParent();\n\t\tif (is_null($parent)) {\n\t\t\t$albums = $_zp_gallery->getAlbums();\n\t\t} else {\n\t\t\t$albums = $parent->getAlbums();\n\t\t}\n\t}\n\t$c = 0;\n\tforeach ($albums as $albumfolder) {\n\t\t$c++;\n\t\tif ($name == $albumfolder) {\n\t\t\treturn $c;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Returns an array of the names of the parents of the current album.\n *\n * @param object $album optional album object to use inseted of the current album\n * @return array\n */\nfunction getParentAlbums($album = null) {\n\t$parents = array();\n\tif (in_context(ZP_ALBUM)) {\n\t\tglobal $_zp_current_album, $_zp_current_search, $_zp_gallery;\n\t\tif (is_null($album)) {\n\t\t\tif (in_context(ZP_SEARCH_LINKED) && !in_context(ZP_ALBUM_LINKED)) {\n\t\t\t\t$album = $_zp_current_search->getDynamicAlbum();\n\t\t\t\tif (empty($album))\n\t\t\t\t\treturn $parents;\n\t\t\t} else {\n\t\t\t\t$album = $_zp_current_album;\n\t\t\t}\n\t\t}\n\t\twhile (!is_null($album = $album->getParent())) {\n\t\t\tarray_unshift($parents, $album);\n\t\t}\n\t}\n\treturn $parents;\n}\n\n/**\n * returns the breadcrumb item for the current images's album\n *\n * @param string $title Text to be used as the URL title tag\n * @return array\n */\nfunction getAlbumBreadcrumb($title = NULL) {\n\tglobal $_zp_current_search, $_zp_gallery, $_zp_current_album, $_zp_last_album;\n\t$output = array();\n\tif (in_context(ZP_SEARCH_LINKED)) {\n\t\t$album = NULL;\n\t\t$dynamic_album = $_zp_current_search->getDynamicAlbum();\n\t\tif (empty($dynamic_album)) {\n\t\t\tif (!is_null($_zp_current_album)) {\n\t\t\t\tif (in_context(ZP_ALBUM_LINKED) && $_zp_last_album == $_zp_current_album->name) {\n\t\t\t\t\t$album = $_zp_current_album;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (in_context(ZP_IMAGE) && in_context(ZP_ALBUM_LINKED)) {\n\t\t\t\t$album = $_zp_current_album;\n\t\t\t} else {\n\t\t\t\t$album = $dynamic_album;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$album = $_zp_current_album;\n\t}\n\tif ($album) {\n\t\tif (is_null($title)) {\n\t\t\t$title = $album->getTitle();\n\t\t\tif (empty($title)) {\n\t\t\t\t$title = gettext('Album Thumbnails');\n\t\t\t}\n\t\t}\n\t\treturn array('link' => $album->getLink(), 'text' => $title, 'title' => getBare($title));\n\t}\n\treturn false;\n}\n\n/**\n * prints the breadcrumb item for the current images's album\n *\n * @param string $before Text to place before the breadcrumb\n * @param string $after Text to place after the breadcrumb\n * @param string $title Text to be used as the URL title attribute and text link\n */\nfunction printAlbumBreadcrumb($before = '', $after = '', $title = NULL) {\n\tif ($breadcrumb = getAlbumBreadcrumb($title)) {\n\t\tif ($before) {\n\t\t\t$output = '<span class=\"beforetext\">' . html_encode($before) . '</span>';\n\t\t} else {\n\t\t\t$output = '';\n\t\t}\n\t\t$output .= '<a href=\"' . html_encode($breadcrumb['link']) . '\" title=\"' . html_encode($breadcrumb['title']) . '\">';\n\t\t$output .= html_encode($breadcrumb['text']);\n\t\t$output .= '</a>';\n\t\tif ($after) {\n\t\t\t$output .= '<span class=\"aftertext\">' . html_encode($after) . '</span>';\n\t\t}\n\t\techo $output;\n\t}\n}\n\n/**\n * Prints the \"breadcrumb\" for a search page\n * \t\tif the search was for a data range, the breadcrumb is \"Archive\"\n * \t\totherwise it is \"Search\"\n * @param string $between Insert here the text to be printed between the links\n * @param string $class is the class for the link (if present)\n * @param string $search text for a search page title\n * @param string $archive text for an archive page title\n * @param string $format data format for archive page crumb\n */\nfunction printSearchBreadcrumb($between = NULL, $class = NULL, $search = NULL, $archive = NULL, $format = '%B %Y') {\n\tglobal $_zp_current_search;\n\tif (is_null($between)) {\n\t\t$between = ' | ';\n\t}\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif ($d = $_zp_current_search->getSearchDate()) {\n\t\tif (is_null($archive)) {\n\t\t\t$text = gettext('Archive');\n\t\t\t$textdecoration = true;\n\t\t} else {\n\t\t\t$text = getBare(html_encode($archive));\n\t\t\t$textdecoration = false;\n\t\t}\n\t\techo \"<a href=\\\"\" . html_encode(getCustomPageURL('archive', NULL)) . \"\\\"$class title=\\\"\" . $text . \"\\\">\";\n\t\tprintf('%s' . $text . '%s', $textdecoration ? '<em>' : '', $textdecoration ? '</em>' : '');\n\t\techo \"</a>\";\n\t\techo '<span class=\"betweentext\">' . html_encode($between) . '</span>';\n\t\tif ($format) {\n\t\t\t$d = strtotime($d);\n\t\t\t$d = strftime($format, $d);\n\t\t}\n\t\techo $d;\n\t} else {\n\t\tif (is_null($search)) {\n\t\t\t$text = gettext('Search');\n\t\t\t$textdecoration = true;\n\t\t} else {\n\t\t\t$text = getBare(html_encode($search));\n\t\t\t$textdecoration = false;\n\t\t}\n\t\tprintf('%s' . $text . '%s', $textdecoration ? '<em>' : '', $textdecoration ? '</em>' : '');\n\t}\n}\n\n/**\n * returns the breadcrumb navigation for album, gallery and image view.\n *\n * @return array\n */\nfunction getParentBreadcrumb() {\n\tglobal $_zp_gallery, $_zp_current_search, $_zp_current_album, $_zp_last_album;\n\t$output = array();\n\tif (in_context(ZP_SEARCH_LINKED)) {\n\t\t$page = $_zp_current_search->page;\n\t\t$searchwords = $_zp_current_search->getSearchWords();\n\t\t$searchdate = $_zp_current_search->getSearchDate();\n\t\t$searchfields = $_zp_current_search->getSearchFields(true);\n\t\t$search_album_list = $_zp_current_search->getAlbumList();\n\t\tif (!is_array($search_album_list)) {\n\t\t\t$search_album_list = array();\n\t\t}\n\t\t$searchpagepath = getSearchURL($searchwords, $searchdate, $searchfields, $page, array('albums' => $search_album_list));\n\t\t$dynamic_album = $_zp_current_search->getDynamicAlbum();\n\t\tif (empty($dynamic_album)) {\n\t\t\tif (empty($searchdate)) {\n\t\t\t\t$output[] = array('link' => $searchpagepath, 'title' => gettext(\"Return to search\"), 'text' => gettext(\"Search\"));\n\t\t\t\tif (is_null($_zp_current_album)) {\n\t\t\t\t\treturn $output;\n\t\t\t\t} else {\n\t\t\t\t\t$parents = getParentAlbums();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn array(array('link' => $searchpagepath, 'title' => gettext(\"Return to archive\"), 'text' => gettext(\"Archive\")));\n\t\t\t}\n\t\t} else {\n\t\t\t$album = $dynamic_album;\n\t\t\t$parents = getParentAlbums($album);\n\t\t\tif (in_context(ZP_ALBUM_LINKED)) {\n\t\t\t\tarray_push($parents, $album);\n\t\t\t}\n\t\t}\n// remove parent links that are not in the search path\n\t\tforeach ($parents as $key => $analbum) {\n\t\t\t$target = $analbum->name;\n\t\t\tif ($target !== $dynamic_album && !in_array($target, $search_album_list)) {\n\t\t\t\tunset($parents[$key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$parents = getParentAlbums();\n\t}\n\t$n = count($parents);\n\tif ($n > 0) {\n\t\tarray_push($parents, $_zp_current_album);\n\t\t$index = -1;\n\t\tforeach ($parents as $parent) {\n\t\t\t$index++;\n\t\t\tif($index != 0) {\n\t\t\t\t$parentparent = $parents[$index-1];\n\t\t\t\t$page = $parent->getGalleryPage();\n\t\t\t\t$url = $parentparent->getLink($page);\n\t\t\t\t$output[] = array('link' => html_encode($url), 'title' => $parentparent->getTitle(), 'text' => $parentparent->getTitle());\n\t\t\t}\n\t\t}\n\t}\n\treturn $output;\n}\n\n/**\n * Prints the breadcrumb navigation for album, gallery and image view.\n *\n * @param string $before Insert here the text to be printed before the links\n * @param string $between Insert here the text to be printed between the links\n * @param string $after Insert here the text to be printed after the links\n * @param mixed $truncate if not empty, the max lenght of the description.\n * @param string $elipsis the text to append to the truncated description\n */\nfunction printParentBreadcrumb($before = NULL, $between = NULL, $after = NULL, $truncate = NULL, $elipsis = NULL) {\n\t$crumbs = getParentBreadcrumb();\n\tif (!empty($crumbs)) {\n\t\tif (is_null($between)) {\n\t\t\t$between = ' | ';\n\t\t}\n\t\tif (is_null($after)) {\n\t\t\t$after = ' | ';\n\t\t}\n\t\tif (is_null($elipsis)) {\n\t\t\t$elipsis = '...';\n\t\t}\n\t\tif ($before) {\n\t\t\t$output = '<span class=\"beforetext\">' . html_encode($before) . '</span>';\n\t\t} else {\n\t\t\t$output = '';\n\t\t}\n\t\tif ($between) {\n\t\t\t$between = '<span class=\"betweentext\">' . html_encode($between) . '</span>';\n\t\t}\n\t\t$i = 0;\n\t\tforeach ($crumbs as $crumb) {\n\t\t\tif ($i > 0) {\n\t\t\t\t$output .= $between;\n\t\t\t}\n//cleanup things in description for use as attribute tag\n\t\t\t$desc = $crumb['title'];\n\t\t\tif (!empty($desc) && $truncate) {\n\t\t\t\t$desc = truncate_string($desc, $truncate, $elipsis);\n\t\t\t}\n\t\t\t$output .= '<a href=\"' . html_encode($crumb['link']) . '\"' . ' title=\"' . html_encode(getBare($desc)) . '\">' . html_encode($crumb['text']) . '</a>';\n\t\t\t$i++;\n\t\t}\n\t\tif ($after) {\n\t\t\t$output .= '<span class=\"aftertext\">' . html_encode($after) . '</span>';\n\t\t}\n\t\techo $output;\n\t}\n}\n\n/**\n * Prints a link to the 'main website', not the Zenphoto site home page!\n * Only prints the link if the url is not empty and does not point back the gallery page\n *\n * @param string $before text to precede the link\n * @param string $after text to follow the link\n * @param string $title Title text\n * @param string $class optional css class\n * @param string $id optional css id\n *  */\nfunction printHomeLink($before = '', $after = '', $title = NULL, $class = NULL, $id = NULL) {\n\tglobal $_zp_gallery;\n\t$site = rtrim($_zp_gallery->getWebsiteURL(), '/');\n\tif (!empty($site)) {\n\t\t$name = $_zp_gallery->getWebsiteTitle();\n\t\tif (empty($name)) {\n\t\t\t$name = gettext('Home');\n\t\t}\n\t\tif ($site != SEO_FULLWEBPATH) {\n\t\t\tif ($before) {\n\t\t\t\techo '<span class=\"beforetext\">' . html_encode($before) . '</span>';\n\t\t\t}\n\t\t\tprintLinkHTML($site, $name, $title, $class, $id);\n\t\t\tif ($after) {\n\t\t\t\techo '<span class=\"aftertext\">' . html_encode($after) . '</span>';\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Returns the formatted date field of the album\n *\n * @param string $format optional format string for the date\n * @return string\n */\nfunction getAlbumDate($format = null) {\n\tglobal $_zp_current_album;\n\t$d = $_zp_current_album->getDateTime();\n\tif (empty($d) || ($d == '0000-00-00 00:00:00')) {\n\t\treturn false;\n\t}\n\tif (is_null($format)) {\n\t\treturn $d;\n\t}\n\treturn zpFormattedDate($format, strtotime($d));\n}\n\n/**\n * Prints the date of the current album\n *\n * @param string $before Insert here the text to be printed before the date.\n * @param string $format Format string for the date formatting\n */\nfunction printAlbumDate($before = '', $format = NULL) {\n\tglobal $_zp_current_album;\n\tif (is_null($format)) {\n\t\t$format = DATE_FORMAT;\n\t}\n\t$date = getAlbumDate($format);\n\tif ($date) {\n\t\tif ($before) {\n\t\t\t$date = '<span class=\"beforetext\">' . $before . '</span>' . $date;\n\t\t}\n\t}\n\techo html_encodeTagged($date);\n}\n\n/**\n * Returns the Location of the album.\n *\n * @return string\n */\nfunction getAlbumLocation() {\n\tglobal $_zp_current_album;\n\treturn $_zp_current_album->getLocation();\n}\n\n/**\n * Prints the location of the album\n *\n * @author Ozh\n */\nfunction printAlbumLocation() {\n\techo html_encodeTagged(getAlbumLocation());\n}\n\n/**\n * Returns the raw description of the current album.\n *\n * @return string\n */\nfunction getAlbumDesc() {\n\tif (!in_context(ZP_ALBUM))\n\t\treturn false;\n\tglobal $_zp_current_album;\n\treturn $_zp_current_album->getDesc();\n}\n\n/**\n * Returns a text-only description of the current album.\n *\n * @return string\n */\nfunction getBareAlbumDesc() {\n\treturn getBare(getAlbumDesc());\n}\n\n/**\n * Prints description of the current album\n *\n * @author Ozh\n */\nfunction printAlbumDesc() {\n\tglobal $_zp_current_album;\n\techo html_encodeTagged(getAlbumDesc());\n}\n\nfunction printBareAlbumDesc() {\n\techo html_encode(getBareAlbumDesc());\n}\n\n/**\n * Returns the custom_data field of the current album\n *\n * @return string\n */\nfunction getAlbumCustomData() {\n\tglobal $_zp_current_album;\n\treturn $_zp_current_album->getCustomData();\n}\n\n/**\n * Prints the custom_data field of the current album.\n * Converts and displays line break in the admin field as <br />.\n *\n * @author Ozh\n */\nfunction printAlbumCustomData() {\n\techo html_encodeTagged(getAlbumCustomData());\n}\n\n/**\n * A composit for getting album data\n *\n * @param string $field which field you want\n * @return string\n */\nfunction getAlbumData($field) {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_album_image;\n\treturn get_language_string($_zp_album_image->get($field));\n}\n\n/**\n * Prints arbitrary data from the album object\n *\n * @param string $field the field name of the data desired\n * @param string $label text to label the field\n * @author Ozh\n */\nfunction printAlbumData($field, $label = '') {\n\tglobal $_zp_current_album;\n\techo html_encodeTagged($_zp_current_album->get($field));\n}\n\n/**\n * Returns the album page number of the current image\n *\n * @param object $album optional album object\n * @return integer\n */\nfunction getAlbumPage($album = NULL) {\n\tglobal $_zp_current_album, $_zp_current_image, $_zp_current_search, $_firstPageImages;\n\tif (is_null($album))\n\t\t$album = $_zp_current_album;\n\t$page = 0;\n\tif (in_context(ZP_IMAGE) && !in_context(ZP_SEARCH)) {\n\t\tif ($_zp_current_album->isDynamic()) {\n\t\t\t$search = $_zp_current_album->getSearchEngine();\n\t\t\t$imageindex = $search->getImageIndex($_zp_current_album->name, $_zp_current_image->filename);\n\t\t\t$numalbums = $search->getNumAlbums();\n\t\t} else {\n\t\t\t$imageindex = $_zp_current_image->getIndex();\n\t\t\t$numalbums = $album->getNumAlbums();\n\t\t}\n\t\t$imagepage = floor(($imageindex - $_firstPageImages) / max(1, getOption('images_per_page'))) + 1;\n\t\t$albumpages = ceil($numalbums / max(1, getOption('albums_per_page')));\n\t\tif ($albumpages == 0 && $_firstPageImages > 0)\n\t\t\t$imagepage++;\n\t\t$page = $albumpages + $imagepage;\n\t}\n\treturn $page;\n}\n\n/**\n * Returns the album link url of the current album.\n *\n * @param object $album optional album object\n * @return string\n */\nfunction getAlbumURL($album = NULL) {\n\tglobal $_zp_current_album;\n\tif (is_null($album))\n\t\t$album = $_zp_current_album;\n\tif (in_context(ZP_IMAGE)) {\n\t\t$page = getAlbumPage($album);\n\t\tif ($page <= 1)\n\t\t\t$page = 0;\n\t} else {\n\t\t$page = 0;\n\t}\n\treturn $album->getLink($page);\n}\n\n/**\n * Prints the album link url of the current album.\n *\n * @param string $text Insert the link text here.\n * @param string $title Insert the title text here.\n * @param string $class Insert here the CSS-class name with with you want to style the link.\n * @param string $id Insert here the CSS-id name with with you want to style the link.\n */\nfunction printAlbumURL($text, $title, $class = NULL, $id = NULL) {\n\tprintLinkHTML(getAlbumURL(), $text, $title, $class, $id);\n}\n\n/**\n * Returns the name of the defined album thumbnail image.\n *\n * @return string\n */\nfunction getAlbumThumb() {\n\tglobal $_zp_current_album;\n\treturn $_zp_current_album->getThumb();\n}\n\n/**\n * Returns an img src link to the password protect thumb substitute\n *\n * @param string $extra extra stuff to put in the HTML\n * @return string\n */\nfunction getPasswordProtectImage($extra) {\n\tglobal $_zp_themeroot;\n\t$image = '';\n\t$themedir = SERVERPATH . '/themes/' . basename($_zp_themeroot);\n\tif (file_exists(internalToFilesystem($themedir . '/images/err-passwordprotected.png'))) {\n\t\t$image = $_zp_themeroot . '/images/err-passwordprotected.png';\n\t} else if (file_exists(internalToFilesystem($themedir . '/images/err-passwordprotected.gif'))) {\n\t\t$image = $_zp_themeroot . '/images/err-passwordprotected.gif';\n\t} else {\n\t\t$image = WEBPATH . '/' . ZENFOLDER . '/images/err-passwordprotected.png';\n\t}\n\treturn '<img src=\"' . $image . '\" ' . $extra . ' alt=\"protected\" />';\n}\n\n/**\n * Prints the album thumbnail image.\n *\n * @param string $alt Insert the text for the alternate image name here.\n * @param string $class Insert here the CSS-class name with with you want to style the link.\n * @param string $id Insert here the CSS-id name with with you want to style the link.\n * @param string $title option title attribute\n *  */\nfunction printAlbumThumbImage($alt, $class = NULL, $id = NULL , $title = null) {\n\tglobal $_zp_current_album, $_zp_themeroot;\n\tif (!$_zp_current_album->getShow()) {\n\t\t$class .= \" not_visible\";\n\t}\n\t$pwd = $_zp_current_album->getPassword();\n\tif (!empty($pwd)) {\n\t\t$class .= \" password_protected\";\n\t}\n\n\t$class = trim($class);\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif ($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\tif ($title) {\n\t\t$title = ' title=\"' . $title . '\"';\n\t}\n\t$thumbobj = $_zp_current_album->getAlbumThumbImage();\n\t$sizes = getSizeDefaultThumb($thumbobj);\n\t$size = ' width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\"';\n\tif (!getOption('use_lock_image') || $_zp_current_album->isMyItem(LIST_RIGHTS) || empty($pwd)) {\n\t\t$html = '<img src=\"' . html_encode(pathurlencode($thumbobj->getThumb('album'))) . '\"' . $size . ' alt=\"' . html_encode($alt) . '\"' . $class . $id . $title . ' />';\n\t\t$html = zp_apply_filter('standard_album_thumb_html', $html);\n\t\techo $html;\n\t} else {\n\t\techo getPasswordProtectImage($size);\n\t}\n}\n\n/**\n * Returns a link to a custom sized thumbnail of the current album\n *\n * @param int $size the size of the image to have\n * @param int $width width\n * @param int $height height\n * @param int $cropw crop width\n * @param int $croph crop height\n * @param int $cropx crop part x axis\n * @param int $cropy crop part y axis\n * @param bool $effects image effects (e.g. set 'gray' to force grayscale)\n *\n * @return string\n */\nfunction getCustomAlbumThumb($size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = null, $effects = NULL) {\n\tglobal $_zp_current_album;\n\t$thumb = $_zp_current_album->getAlbumThumbImage();\n\treturn $thumb->getCustomImage($size, $width, $height, $cropw, $croph, $cropx, $cropy, true, $effects);\n}\n\n/**\n * Prints a link to a custom sized thumbnail of the current album\n *\n * See getCustomImageURL() for details.\n *\n * @param string $alt Alt atribute text\n * @param int $size size\n * @param int $width width\n * @param int $height height\n * @param int $cropw cropwidth\n * @param int $croph crop height\n * @param int $cropx crop part x axis\n * @param int $cropy crop part y axis\n * @param string $class css class\n * @param string $id css id\n * @param string $title Optional title attribute\n *\n * @return string\n */\nfunction printCustomAlbumThumbImage($alt, $size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = null, $class = NULL, $id = NULL, $title = null) {\n\tglobal $_zp_current_album;\n\tif (!$_zp_current_album->getShow()) {\n\t\t$class .= \" not_visible\";\n\t}\n\t$pwd = $_zp_current_album->getPassword();\n\tif (!empty($pwd)) {\n\t\t$class .= \" password_protected\";\n\t}\n\t$class = trim($class);\n\t/* set the HTML image width and height parameters in case this image was \"imageDefault.png\" substituted for no thumbnail then the thumb layout is preserved */\n\t$sizes = getSizeCustomImage($size, $width, $height, $cropw, $croph, $cropx, $cropy);\n\t$sizing = ' width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\"';\n\tif($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\tif($title) {\n\t\t$title = ' title=\"' . html_encode($title) . '\"';\n\t}\n\tif (!getOption('use_lock_image') || $_zp_current_album->isMyItem(LIST_RIGHTS) || empty($pwd)) {\n\t\t$html = '<img src=\"' . html_encode(pathurlencode(getCustomAlbumThumb($size, $width, $height, $cropw, $croph, $cropx, $cropy))) . '\"' . $sizing . ' alt=\"' . html_encode($alt) . '\"' \n\t\t\t\t\t\t. $id . $class . $title . ' />';\n\t\t$html = zp_apply_filter('custom_album_thumb_html', $html);\n\t\techo $html;\n\t} else {\n\t\techo getPasswordProtectImage($sizing);\n\t}\n}\n\n/**\n * Called by ***MaxSpace functions to compute the parameters to be passed to xxCustomyyy functions.\n *\n * @param int $width maxspace width\n * @param int $height maxspace height\n * @param object $image the image in question\n * @param bool $thumb true if for a thumbnail\n */\nfunction getMaxSpaceContainer(&$width, &$height, $image, $thumb = false) {\n\tglobal $_zp_gallery;\n\t$upscale = getOption('image_allow_upscale');\n\t$imagename = $image->filename;\n\tif (!isImagePhoto($image) & $thumb) {\n\t\t$imgfile = $image->getThumbImageFile();\n\t\t$image = zp_imageGet($imgfile);\n\t\t$s_width = zp_imageWidth($image);\n\t\t$s_height = zp_imageHeight($image);\n\t} else {\n\t\t$s_width = $image->get('width');\n\t\tif ($s_width == 0)\n\t\t\t$s_width = max($width, $height);\n\t\t$s_height = $image->get('height');\n\t\tif ($s_height == 0)\n\t\t\t$s_height = max($width, $height);\n\t}\n\n\t$newW = round($height / $s_height * $s_width);\n\t$newH = round($width / $s_width * $s_height);\n\tif (DEBUG_IMAGE)\n\t\tdebugLog(\"getMaxSpaceContainer($width, $height, $imagename, $thumb): \\$s_width=$s_width; \\$s_height=$s_height; \\$newW=$newW; \\$newH=$newH; \\$upscale=$upscale;\");\n\tif ($newW > $width) {\n\t\tif ($upscale || $s_height > $newH) {\n\t\t\t$height = $newH;\n\t\t} else {\n\t\t\t$height = $s_height;\n\t\t\t$width = $s_width;\n\t\t}\n\t} else {\n\t\tif ($upscale || $s_width > $newW) {\n\t\t\t$width = $newW;\n\t\t} else {\n\t\t\t$height = $s_height;\n\t\t\t$width = $s_width;\n\t\t}\n\t}\n}\n\n/**\n * Returns a link to a un-cropped custom sized version of the current album thumb within the given height and width dimensions.\n *\n * @param int $width width\n * @param int $height height\n * @return string\n */\nfunction getCustomAlbumThumbMaxSpace($width, $height) {\n\tglobal $_zp_current_album;\n\t$albumthumb = $_zp_current_album->getAlbumThumbImage();\n\tgetMaxSpaceContainer($width, $height, $albumthumb, true);\n\treturn getCustomAlbumThumb(NULL, $width, $height, NULL, NULL, NULL, NULL);\n}\n\n/**\n * Prints a un-cropped custom sized album thumb within the given height and width dimensions.\n * Note: a class of 'not_visible' or 'password_protected' will be added as appropriate\n *\n * @param string $alt Alt text for the url\n * @param int $width width\n * @param int $height height\n * @param string $class Optional style class\n * @param string $id Optional style id\n * @param bool $thumbStandin set to true to treat as thumbnail\n * @param string $title optional title attribute\n */\nfunction printCustomAlbumThumbMaxSpace($alt, $width, $height, $class = NULL, $id = NULL, $title = null) {\n\tglobal $_zp_current_album;\n\t$albumthumb = $_zp_current_album->getAlbumThumbImage();\n\tgetMaxSpaceContainer($width, $height, $albumthumb, true);\n\tprintCustomAlbumThumbImage($alt, NULL, $width, $height, NULL, NULL, NULL, NULL, $class, $id, $title);\n}\n\n/**\n * Returns the next album\n *\n * @return object\n */\nfunction getNextAlbum() {\n\tglobal $_zp_current_album, $_zp_current_search, $_zp_gallery;\n\tif (in_context(ZP_SEARCH) || in_context(ZP_SEARCH_LINKED)) {\n\t\t$nextalbum = $_zp_current_search->getNextAlbum($_zp_current_album->name);\n\t} else if (in_context(ZP_ALBUM)) {\n\t\t$nextalbum = $_zp_current_album->getNextAlbum();\n\t} else {\n\t\treturn null;\n\t}\n\treturn $nextalbum;\n}\n\n/**\n * Get the URL of the next album in the gallery.\n *\n * @return string\n */\nfunction getNextAlbumURL() {\n\t$nextalbum = getNextAlbum();\n\tif ($nextalbum) {\n\t\treturn $nextalbum->getLink();\n\t}\n\treturn false;\n}\n\n/**\n * Returns the previous album\n *\n * @return object\n */\nfunction getPrevAlbum() {\n\tglobal $_zp_current_album, $_zp_current_search;\n\tif (in_context(ZP_SEARCH) || in_context(ZP_SEARCH_LINKED)) {\n\t\t$prevalbum = $_zp_current_search->getPrevAlbum($_zp_current_album->name);\n\t} else if (in_context(ZP_ALBUM)) {\n\t\t$prevalbum = $_zp_current_album->getPrevAlbum();\n\t} else {\n\t\treturn null;\n\t}\n\treturn $prevalbum;\n}\n\n/**\n * Get the URL of the previous album in the gallery.\n *\n * @return string\n */\nfunction getPrevAlbumURL() {\n\t$prevalbum = getPrevAlbum();\n\tif ($prevalbum) {\n\t\treturn $prevalbum->getLink();\n\t}\n\treturn false;\n}\n\n/**\n * Returns true if this page has image thumbs on it\n *\n * @return bool\n */\nfunction isImagePage() {\n\tif (getNumImages()) {\n\t\tglobal $_zp_page, $_firstPageImages;\n\t\t$imagestart = getTotalPages(2); // # of album pages\n\t\tif (!$_firstPageImages)\n\t\t\t$imagestart++; // then images start on the last album page.\n\t\treturn $_zp_page >= $imagestart;\n\t}\n\treturn false;\n}\n\n/**\n * Returns true if this page has album thumbs on it\n *\n * @return bool\n */\nfunction isAlbumPage() {\n\tglobal $_zp_page;\n\t$pageCount = Ceil(getNumAlbums() / max(1, getOption('albums_per_page')));\n\treturn ($_zp_page <= $pageCount);\n}\n\n/**\n * Returns the number of images in the album.\n *\n * @return int\n */\nfunction getNumImages() {\n\tglobal $_zp_current_album, $_zp_current_search;\n\tif ((in_context(ZP_SEARCH_LINKED) && !in_context(ZP_ALBUM_LINKED)) || in_context(ZP_SEARCH) && is_null($_zp_current_album)) {\n\t\treturn $_zp_current_search->getNumImages();\n\t} else {\n\t\treturn $_zp_current_album->getNumImages();\n\t}\n}\n\n/**\n * Returns the count of all the images in the album and any subalbums\n *\n * @param object $album The album whose image count you want\n * @return int\n * @since 1.1.4\n */\nfunction getTotalImagesIn($album) {\n\tglobal $_zp_gallery;\n\t$sum = $album->getNumImages();\n\t$subalbums = $album->getAlbums(0);\n\twhile (count($subalbums) > 0) {\n\t\t$albumname = array_pop($subalbums);\n\t\t$album = newAlbum($albumname);\n\t\t$sum = $sum + getTotalImagesIn($album);\n\t}\n\treturn $sum;\n}\n\n/**\n * Returns the next image on a page.\n * sets $_zp_current_image to the next image in the album.\n\n * Returns true if there is an image to be shown\n *\n * @param bool $all set to true disable pagination\n * @param int $firstPageCount the number of images which can go on the page that transitions between albums and images\n * \t\t\t\t\t\t\tNormally this parameter should be NULL so as to use the default computations.\n * @param bool $mine overridePassword the password check\n * @return bool\n *\n * @return bool\n */\nfunction next_image($all = false, $firstPageCount = NULL, $mine = NULL) {\n\tglobal $_zp_images, $_zp_current_image, $_zp_current_album, $_zp_page, $_zp_current_image_restore, $_zp_current_search, $_zp_gallery, $_firstPageImages;\n\tif (is_null($firstPageCount)) {\n\t\t$firstPageCount = $_firstPageImages;\n\t}\n\t$imagePageOffset = getTotalPages(2); /* gives us the count of pages for album thumbs */\n\tif ($all) {\n\t\t$imagePage = 1;\n\t\t$firstPageCount = 0;\n\t} else {\n\t\t$_firstPageImages = $firstPageCount; /* save this so pagination can see it */\n\t\t$imagePage = $_zp_page - $imagePageOffset;\n\t}\n\tif ($firstPageCount > 0 && $imagePageOffset > 0) {\n\t\t$imagePage = $imagePage + 1; /* can share with last album page */\n\t}\n\tif ($imagePage <= 0) {\n\t\treturn false; /* we are on an album page */\n\t}\n\tif (is_null($_zp_images)) {\n\t\tif (in_context(ZP_SEARCH)) {\n\t\t\t$_zp_images = $_zp_current_search->getImages($all ? 0 : ($imagePage), $firstPageCount, NULL, NULL, true, $mine);\n\t\t} else {\n\t\t\t$_zp_images = $_zp_current_album->getImages($all ? 0 : ($imagePage), $firstPageCount, NULL, NULL, true, $mine);\n\t\t}\n\t\tif (empty($_zp_images)) {\n\t\t\treturn NULL;\n\t\t}\n\t\t$_zp_current_image_restore = $_zp_current_image;\n\t\t$img = array_shift($_zp_images);\n\t\t$_zp_current_image = newImage($_zp_current_album, $img, true, true);\n\t\tsave_context();\n\t\tadd_context(ZP_IMAGE);\n\t\treturn true;\n\t} else if (empty($_zp_images)) {\n\t\t$_zp_images = NULL;\n\t\t$_zp_current_image = $_zp_current_image_restore;\n\t\trestore_context();\n\t\treturn false;\n\t} else {\n\t\t$img = array_shift($_zp_images);\n\t\t$_zp_current_image = newImage($_zp_current_album, $img, true, true);\n\t\treturn true;\n\t}\n}\n\n//*** Image Context ************************\n//******************************************\n\n/**\n * Sets the image passed as the current image\n *\n * @param object $image the image to become current\n */\nfunction makeImageCurrent($image) {\n\tif (!is_object($image))\n\t\treturn;\n\tglobal $_zp_current_album, $_zp_current_image;\n\t$_zp_current_image = $image;\n\t$_zp_current_album = $_zp_current_image->getAlbum();\n\tset_context(ZP_INDEX | ZP_ALBUM | ZP_IMAGE);\n}\n\n/**\n * Returns the raw title of the current image.\n *\n * @return string\n */\nfunction getImageTitle() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getTitle();\n}\n\n/**\n * Returns a text-only title of the current image.\n *\n * @return string\n */\nfunction getBareImageTitle() {\n\treturn getBare(getImageTitle());\n}\n\n/**\n * Returns the image title taged with not visible annotation.\n *\n * @return string\n */\nfunction getAnnotatedImageTitle() {\n\tglobal $_zp_current_image;\n\t$title = getBareImageTitle();\n\tif (!$_zp_current_image->getShow()) {\n\t\t$title .= \"\\n\" . gettext('The image is marked un-published.');\n\t}\n\treturn $title;\n}\n\nfunction printAnnotatedImageTitle() {\n\techo html_encode(getAnnotatedImageTitle());\n}\n\n/**\n * Prints title of the current image\n *\n * @author Ozh\n */\nfunction printImageTitle() {\n\techo html_encodeTagged(getImageTitle());\n}\n\nfunction printBareImageTitle() {\n\techo html_encode(getBareImageTitle());\n}\n\n/**\n * Returns the 'n' of n of m images\n *\n * @return int\n */\nfunction imageNumber() {\n\tglobal $_zp_current_image, $_zp_current_search, $_zp_current_album;\n\t$name = $_zp_current_image->getFileName();\n\tif (in_context(ZP_SEARCH) || (in_context(ZP_SEARCH_LINKED) && !in_context(ZP_ALBUM_LINKED))) {\n\t\t$folder = $_zp_current_image->imagefolder;\n\t\t$images = $_zp_current_search->getImages();\n\t\t$c = 0;\n\t\tforeach ($images as $image) {\n\t\t\t$c++;\n\t\t\tif ($name == $image['filename'] && $folder == $image['folder']) {\n\t\t\t\treturn $c;\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn $_zp_current_image->getIndex() + 1;\n\t}\n\treturn false;\n}\n\n/**\n * Returns the image date of the current image in yyyy-mm-dd hh:mm:ss format.\n * Pass it a date format string for custom formatting\n *\n * @param string $format formatting string for the data\n * @return string\n */\nfunction getImageDate($format = null) {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\t$d = $_zp_current_image->getDateTime();\n\tif (empty($d) || ($d == '0000-00-00 00:00:00')) {\n\t\treturn false;\n\t}\n\tif (is_null($format)) {\n\t\treturn $d;\n\t}\n\treturn zpFormattedDate($format, strtotime($d));\n}\n\n/**\n * Prints the date of the current album\n *\n * @param string $before Insert here the text to be printed before the date.\n * @param string $format Format string for the date formatting\n */\nfunction printImageDate($before = '', $format = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($format)) {\n\t\t$format = DATE_FORMAT;\n\t}\n\t$date = getImageDate($format);\n\tif ($date) {\n\t\tif ($before) {\n\t\t\t$date = '<span class=\"beforetext\">' . $before . '</span>' . $date;\n\t\t}\n\t}\n\techo html_encodeTagged($date);\n}\n\n// IPTC fields\n/**\n * Returns the Location field of the current image\n *\n * @return string\n */\nfunction getImageLocation() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getLocation();\n}\n\n/**\n * Returns the City field of the current image\n *\n * @return string\n */\nfunction getImageCity() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getcity();\n}\n\n/**\n * Returns the State field of the current image\n *\n * @return string\n */\nfunction getImageState() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getState();\n}\n\n/**\n * Returns the Country field of the current image\n *\n * @return string\n */\nfunction getImageCountry() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getCountry();\n}\n\n/**\n * Returns the raw description of the current image.\n * new lines are replaced with <br /> tags\n *\n * @return string\n */\nfunction getImageDesc() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn $_zp_current_image->getDesc();\n}\n\n/**\n * Returns a text-only description of the current image.\n *\n * @return string\n */\nfunction getBareImageDesc() {\n\treturn getBare(getImageDesc());\n}\n\n/**\n * Prints the description of the current image.\n * Converts and displays line breaks set in the admin field as <br />.\n *\n */\nfunction printImageDesc() {\n\techo html_encodeTagged(getImageDesc());\n}\n\nfunction printBareImageDesc() {\n\techo html_encode(getBareImageDesc());\n}\n\n/**\n * A composit for getting image data\n *\n * @param string $field which field you want\n * @return string\n */\nfunction getImageData($field) {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\treturn get_language_string($_zp_current_image->get($field));\n}\n\n/**\n * Returns the custom_data field of the current image\n *\n * @return string\n */\nfunction getImageCustomData() {\n\tGlobal $_zp_current_image;\n\treturn $_zp_current_image->getCustomData();\n}\n\n/**\n * Prints the custom_data field of the current image.\n * Converts and displays line breaks set in the admin field as <br />.\n *\n * @return string\n */\nfunction printImageCustomData() {\n\t$data = getImageCustomData();\n\t$data = str_replace(\"\\r\\n\", \"\\n\", $data);\n\t$data = str_replace(\"\\n\", \"<br />\", $data);\n\techo $data;\n}\n\n/**\n * Prints arbitrary data from the image object\n *\n * @param string $field the field name of the data desired\n * @param string $label text to label the field.\n * @author Ozh\n */\nfunction printImageData($field, $label = '') {\n  global $_zp_current_image;\n  $text = getImageData($field);\n  if (!empty($text)) {\n    echo html_encodeTagged($label . $text);\n  }\n}\n\n/**\n * True if there is a next image\n *\n * @return bool\n */\nfunction hasNextImage() {\n  global $_zp_current_image;\n  if (is_null($_zp_current_image))\n    return false;\n  return $_zp_current_image->getNextImage();\n}\n\n/**\n * True if there is a previous image\n *\n * @return bool\n */\nfunction hasPrevImage() {\n  global $_zp_current_image;\n  if (is_null($_zp_current_image))\n    return false;\n  return $_zp_current_image->getPrevImage();\n}\n\n/**\n * Returns the url of the next image.\n *\n * @return string\n */\nfunction getNextImageURL() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_album, $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\t$nextimg = $_zp_current_image->getNextImage();\n\treturn $nextimg->getLink();\n}\n\n/**\n * Returns the url of the previous image.\n *\n * @return string\n */\nfunction getPrevImageURL() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_album, $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\t$previmg = $_zp_current_image->getPrevImage();\n\treturn $previmg->getLink();\n}\n\n/**\n * Returns the thumbnail of the previous image.\n *\n * @return string\n */\nfunction getPrevImageThumb() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\t$img = $_zp_current_image->getPrevImage();\n\treturn $img->getThumb();\n}\n\n/**\n * Returns the thumbnail of the next image.\n *\n * @return string\n */\nfunction getNextImageThumb() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\t$img = $_zp_current_image->getNextImage();\n\treturn $img->getThumb();\n}\n\n/**\n * Returns the url of the current image.\n *\n * @return string\n */\nfunction getImageURL() {\n\tif (!in_context(ZP_IMAGE))\n\t\treturn false;\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\treturn $_zp_current_image->getLink();\n}\n\n/**\n * Prints the link to the current  image.\n *\n * @param string $text text for the link\n * @param string $title title tag for the link\n * @param string $class optional style class for the link\n * @param string $id optional style id for the link\n */\nfunction printImageURL($text, $title, $class = NULL, $id = NULL) {\n\tprintLinkHTML(getImageURL(), $text, $title, $class, $id);\n}\n\n/**\n * Returns the Metadata infromation from the current image\n *\n * @param $image optional image object\n * @param string $displayonly set to true to return only the items selected for display\n * @return array\n */\nfunction getImageMetaData($image = NULL, $displayonly = true) {\n\tglobal $_zp_current_image, $_zp_exifvars;\n\tif (is_null($image))\n\t\t$image = $_zp_current_image;\n\tif (is_null($image) || !$image->get('hasMetadata')) {\n\t\treturn false;\n\t}\n\t$data = $image->getMetaData();\n\tif ($displayonly) {\n\t\tforeach ($data as $field => $value) { //\tremove the empty or not selected to display\n\t\t\tif (!$value || !$_zp_exifvars[$field][3]) {\n\t\t\t\tunset($data[$field]);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($data) > 0) {\n\t\treturn $data;\n\t}\n\treturn false;\n}\n\n/**\n * Prints the Metadata data of the current image\n *\n * @param string $title title tag for the class\n * @param bool $toggle set to true to get a javascript toggle on the display of the data\n * @param string $id style class id\n * @param string $class style class\n * @author Ozh\n */\nfunction printImageMetadata($title = NULL, $toggle = true, $id = 'imagemetadata', $class = null, $span = NULL) {\n\tglobal $_zp_exifvars, $_zp_current_image;\n\tif (false === ($exif = getImageMetaData($_zp_current_image, true))) {\n\t\treturn;\n\t}\n\tif (is_null($title)) {\n\t\t$title = gettext('Image Info');\n\t}\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif (!$span) {\n\t\t$span = 'exif_link';\n\t}\n\t$dataid = $id . '_data';\n\tif ($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\t$refh = $refa = $style = '';\n\tif ($toggle == 'colorbox' && zp_has_filter('theme_head', 'colorbox::css')) {\n\t\t$refh = '<a href=\"#\" class=\"colorbox\" title=\"' . $title . '\">';\n\t\t$refa = '</a>';\n\t\t$style = ' style=\"display:none\"';\n\t} else if ($toggle) {\n\t\t$refh = '<a class=\"metadata_toggle\" href=\"#\" title=\"' . $title . '\">';\n\t\t$refa = '</a>';\n\t\t$style = ' style=\"display:none\"';\n\t}\n\t?>\n\t<span id=\"<?php echo $span; ?>\" class=\"metadata_title\">\n\t\t<?php echo $refh; ?><?php echo $title; ?><?php echo $refa; ?>\n\t</span>\n\t<?php if($toggle) { ?>\n\t\t<script>\n\t\t\t$(\".metadata_toggle\").click(function(event) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\t$(\"#<?php echo $dataid; ?>\").toggle();\n\t\t\t});\n\t\t</script>\n\t<?php } ?>\n\t<div id=\"<?php echo $dataid; ?>\"<?php echo $style; ?>>\n\t\t<div<?php echo $id . $class; ?>>\n\t\t\t<table>\n\t\t\t\t<?php\n\t\t\t\tforeach ($exif as $field => $value) {\n\t\t\t\t\t$label = $_zp_exifvars[$field][2];\n\t\t\t\t\techo \"<tr><td class=\\\"label\\\">$label:</td><td class=\\\"value\\\">\";\n\t\t\t\t\tswitch ($_zp_exifvars[$field][6]) {\n\t\t\t\t\t\tcase 'time':\n\t\t\t\t\t\t\techo zpFormattedDate(DATE_FORMAT, strtotime($value));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\techo html_encode($value);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\techo \"</td></tr>\\n\";\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</table>\n\t\t</div>\n\t</div>\n\t<?php\n}\n\n/**\n * Returns an array with the height & width\n *\n * @param int $size size\n * @param int $width width\n * @param int $height height\n * @param int $cw crop width\n * @param int $ch crop height\n * @param int $cx crop x axis\n * @param int $cy crop y axis\n * @param $image object the image for which the size is desired. NULL means the current image\n * @return array\n */\nfunction getSizeCustomImage($size, $width = NULL, $height = NULL, $cw = NULL, $ch = NULL, $cx = NULL, $cy = NULL, $image = NULL) {\n  global $_zp_current_image;\n  if (is_null($image))\n    $image = $_zp_current_image;\n  if (is_null($image))\n    return false;\n\n  $h = $image->getHeight();\n  $w = $image->getWidth();\n\n  //if we set width/height we are cropping and those are the sizes already\n  if (!is_null($size) && !is_null($width) && !is_null($height)) {\n    return array($width, $height);\n  }\n\tif (isImageVideo($image)) { // size is determined by the player\n    return array($w, $h);\n  }\n  $side = getOption('image_use_side');\n  $us = getOption('image_allow_upscale');\n  $args = getImageParameters(array($size, $width, $height, $cw, $ch, $cx, $cy, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $image->album->name);\n  @list($size, $width, $height, $cw, $ch, $cx, $cy, $quality, $thumb, $crop, $thumbstandin, $passedWM, $adminrequest, $effects) = $args;\n  if (!empty($size)) {\n    $dim = $size;\n    $width = $height = false;\n  } else if (!empty($width)) {\n    $dim = $width;\n    $size = $height = false;\n  } else if (!empty($height)) {\n    $dim = $height;\n    $size = $width = false;\n  } else {\n    $dim = 1;\n  }\n\n  if ($w == 0) {\n    $hprop = 1;\n  } else {\n    $hprop = round(($h / $w) * $dim);\n  }\n  if ($h == 0) {\n    $wprop = 1;\n  } else {\n    $wprop = round(($w / $h) * $dim);\n  }\n\n  if (($size && ($side == 'longest' && $h > $w) || ($side == 'height') || ($side == 'shortest' && $h < $w)) || $height) {\n// Scale the height\n    $newh = $dim;\n    $neww = $wprop;\n  } else {\n// Scale the width\n    $neww = $dim;\n    $newh = $hprop;\n  }\n  if (!$us && $newh >= $h && $neww >= $w) {\n    return array($w, $h);\n  } else {\n    if ($cw && $cw < $neww)\n      $neww = $cw;\n    if ($ch && $ch < $newh)\n      $newh = $ch;\n    if ($size && $ch && $cw) {\n      $neww = $cw;\n      $newh = $ch;\n    }\n    return array($neww, $newh);\n  }\n}\n\n/**\n * Returns an array [width, height] of the default-sized image.\n *\n * @param int $size override the 'image_zize' option\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return array\n */\nfunction getSizeDefaultImage($size = NULL, $image = NULL) {\n  if (is_null($size))\n    $size = getOption('image_size');\n  return getSizeCustomImage($size, NULL, NULL, NULL, NULL, NULL, NULL, $image);\n}\n\n/**\n * Returns an array [width, height] of the original image.\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return array\n */\nfunction getSizeFullImage($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image))\n\t\t$image = $_zp_current_image;\n\tif (is_null($image))\n\t\treturn false;\n\treturn array($image->getWidth(), $image->getHeight());\n}\n\n/**\n * The width of the default-sized image (in printDefaultSizedImage)\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return int\n */\nfunction getDefaultWidth($size = NULL, $image = NULL) {\n\t$size_a = getSizeDefaultImage($size, $image);\n\treturn $size_a[0];\n}\n\n/**\n * Returns the height of the default-sized image (in printDefaultSizedImage)\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return int\n */\nfunction getDefaultHeight($size = NULL, $image = NULL) {\n\t$size_a = getSizeDefaultImage($size, $image);\n\treturn $size_a[1];\n}\n\n/**\n * Returns the width of the original image\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return int\n */\nfunction getFullWidth($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image))\n\t\t$image = $_zp_current_image;\n\tif (is_null($image))\n\t\treturn false;\n\treturn $image->getWidth();\n}\n\n/**\n * Returns the height of the original image\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return int\n */\nfunction getFullHeight($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image))\n\t\t$image = $_zp_current_image;\n\tif (is_null($image))\n\t\treturn false;\n\treturn $image->getHeight();\n}\n\n/**\n * Returns true if the image is landscape-oriented (width is greater than height)\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return bool\n */\nfunction isLandscape($image = NULL) {\n\tif (getFullWidth($image) >= getFullHeight($image))\n\t\treturn true;\n\treturn false;\n}\n\n/**\n * Returns the url to the default sized image.\n *\n * @param $image object the image for which the size is desired. NULL means the current image\n *\n * @return string\n */\nfunction getDefaultSizedImage($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image))\n\t\t$image = $_zp_current_image;\n\tif (is_null($image))\n\t\treturn false;\n\treturn $image->getSizedImage(getOption('image_size'));\n}\n\n/**\n * Show video player with video loaded or display the image.\n *\n * @param string $alt Alt text\n * @param string $class Optional style class\n * @param string $id Optional style id\n * @param string $title Title attribute\n */\nfunction printDefaultSizedImage($alt, $class = NULL, $id = NULL, $title = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn;\n\tif (!$_zp_current_image->getShow()) {\n\t\t$class .= \" not_visible\";\n\t}\n\t$album = $_zp_current_image->getAlbum();\n\t$pwd = $album->getPassword();\n\tif (!empty($pwd)) {\n\t\t$class .= \" password_protected\";\n\t}\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif ($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\tif ($title) {\n\t\t$title = ' title=\"' . html_encode($title) . '\"';\n\t} \n\tif (isImagePhoto()) { //Print images\n\t\t$html = '<img src=\"' . html_encode(pathurlencode(getDefaultSizedImage())) . '\" alt=\"' . html_encode($alt) . '\"' .\n\t\t\t\t\t\t' width=\"' . getDefaultWidth() . '\" height=\"' . getDefaultHeight() . '\"' . $class . $id . $title . ' />';\n\t\t$html = zp_apply_filter('standard_image_html', $html);\n\t\techo $html;\n\t} else { // better be a plugin class then\n\t\techo $_zp_current_image->getContent();\n\t}\n}\n\n/**\n * Returns the url to the thumbnail of the current image.\n *\n * @return string\n */\nfunction getImageThumb() {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\treturn $_zp_current_image->getThumb();\n}\n\n/**\n * @param string $alt Alt text\n * @param string $class optional class tag\n * @param string $id optional id tag\n * @param string $title Title attribute\n */\nfunction printImageThumb($alt, $class = NULL, $id = NULL, $title = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn;\n\tif (!$_zp_current_image->getShow()) {\n\t\t$class .= \" not_visible\";\n\t}\n\t$album = $_zp_current_image->getAlbum();\n\t$pwd = $album->getPassword();\n\tif (!empty($pwd)) {\n\t\t$class .= \" password_protected\";\n\t}\n\t$url = getImageThumb();\n\t$sizes = getSizeDefaultThumb();\n\t$size = ' width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\"';\n\t$class = trim($class);\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif ($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\tif($title) {\n\t\t$title = ' title=\"' . html_encode($title) . '\"';\n\t}\n\t$html = '<img src=\"' . html_encode(pathurlencode($url)) . '\"' . $size . ' alt=\"' . html_encode($alt) . '\"' . $class . $id . $title . \" />\";\n\t$html = zp_apply_filter('standard_image_thumb_html', $html);\n\techo $html;\n}\n\n/**\n * Gets the width and height of a default thumb for the <img> tag height/width\n * @global type $_zp_current_image\n * @param obj $image Image object, if NULL the current image is used\n * @return aray\n */\nfunction getSizeDefaultThumb($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image)) {\n\t\t$image = $_zp_current_image;\n\t}\n\t$s = getOption('thumb_size');\n\tif (getOption('thumb_crop')) {\n\t\t$w = getOption('thumb_crop_width');\n\t\t$h = getOption('thumb_crop_height');\n\t\t$sizes = getSizeCustomImage($s, $w, $h, $w, $h, null, null, $image);\n\t} else {\n\t\t$w = $h = $s;\n\t\tgetMaxSpaceContainer($w, $h, $image, true);\n\t\t$sizes = array($w, $h);\n\t}\n\treturn $sizes;\n}\n\n/**\n * Returns the url to original image.\n * It will return a protected image is the option \"protect_full_image\" is set\n *\n * @param $image optional image object\n * @return string\n */\nfunction getFullImageURL($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image)) {\n\t\t$image = $_zp_current_image;\n\t}\n\tif (is_null($image)) {\n\t\treturn false;\n\t}\n\t$outcome = getOption('protect_full_image');\n\tif ($outcome == 'No access') {\n\t\treturn NULL;\n\t}\n\tif ($outcome == 'Unprotected') {\n\t\treturn $image->getFullImageURL();\n\t} else {\n\t\treturn getProtectedImageURL($image, $outcome);\n\t}\n}\n\n/**\n * Returns the \"raw\" url to the image in the albums folder\n *\n * @param $image optional image object\n * @return string\n *\n */\nfunction getUnprotectedImageURL($image = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($image)) {\n\t\t$image = $_zp_current_image;\n\t}\n\tif (!is_null($image)) {\n\t\treturn $image->getFullImageURL();\n\t}\n}\n\n/**\n * Returns an url to the password protected/watermarked current image\n *\n * @param object $image optional image object overrides the current image\n * @param string $disposal set to override the 'protect_full_image' option\n * @return string\n * */\nfunction getProtectedImageURL($image = NULL, $disposal = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($disposal)) {\n\t\t$disposal = getOption('protect_full_image');\n\t}\n\tif ($disposal == 'No access')\n\t\treturn NULL;\n\tif (is_null($image)) {\n\t\tif (!in_context(ZP_IMAGE))\n\t\t\treturn false;\n\t\tif (is_null($_zp_current_image))\n\t\t\treturn false;\n\t\t$image = $_zp_current_image;\n\t}\n\t$album = $image->getAlbum();\n\t$watermark_use_image = getWatermarkParam($image, WATERMARK_FULL);\n\tif (!empty($watermark_use_image)) {\n\t\t$wmt = $watermark_use_image;\n\t} else {\n\t\t$wmt = false;\n\t}\n\t$args = array('FULL', NULL, NULL, NULL, NULL, NULL, NULL, (int) getOption('full_image_quality'), NULL, NULL, NULL, $wmt, false, NULL, NULL);\n\t$cache_file = getImageCacheFilename($album->name, $image->filename, $args);\n\t$cache_path = SERVERCACHE . $cache_file;\n\tif ($disposal != 'Download' && OPEN_IMAGE_CACHE && file_exists($cache_path)) {\n\t\treturn WEBPATH . '/' . CACHEFOLDER . pathurlencode(imgSrcURI($cache_file));\n\t} else if ($disposal == 'Unprotected') {\n\t\treturn getImageURI($args, $album->name, $image->filename, $image->filemtime);\n\t} else {\n\t\t$params = '&q=' . getOption('full_image_quality');\n\t\tif (!empty($watermark_use_image)) {\n\t\t\t$params .= '&wmk=' . $watermark_use_image;\n\t\t}\n\t\tif ($disposal) {\n\t\t\t$params .= '&dsp=' . $disposal;\n\t\t}\n\t\t$params .= '&check=' . sha1(HASH_SEED . serialize($args));\n\t\tif (is_array($image->filename)) {\n\t\t\t$album = dirname($image->filename['source']);\n\t\t\t$image = basename($image->filename['source']);\n\t\t} else {\n\t\t\t$album = $album->name;\n\t\t\t$image = $image->filename;\n\t\t}\n\t\treturn WEBPATH . '/' . ZENFOLDER . '/full-image.php?a=' . $album . '&i=' . $image . $params;\n\t}\n}\n\n/**\n * Returns a link to the current image custom sized to $size\n *\n * @param int $size The size the image is to be\n */\nfunction getSizedImageURL($size) {\n\treturn getCustomImageURL($size);\n}\n\n/**\n * Returns the url to the image with the dimensions you define with this function.\n *\n * @param int $size the size of the image to have\n * @param int $width width\n * @param int $height height\n * @param int $cropw crop width\n * @param int $croph crop height\n * @param int $cropx crop part x axis\n * @param int $cropy crop part y axis\n * @param bool $thumbStandin set true to inhibit watermarking\n * @param bool $effects image effects (e.g. set gray to force to grayscale)\n * @return string\n *\n * $size, $width, and $height are used in determining the final image size.\n * At least one of these must be provided. If $size is provided, $width and\n * $height are ignored. If both $width and $height are provided, the image\n * will have those dimensions regardless of the original image height/width\n * ratio. (Yes, this means that the image may be distorted!)\n *\n * The $crop* parameters determine the portion of the original image that\n * will be incorporated into the final image.\n *\n * $cropw and $croph \"sizes\" are typically proportional. That is you can\n * set them to values that reflect the ratio of width to height that you\n * want for the final image. Typically you would set them to the final\n * height and width. These values will always be adjusted so that they are\n * not larger than the original image dimensions.\n *\n * The $cropx and $cropy values represent the offset of the crop from the\n * top left corner of the image. If these values are provided, the $croph\n * and $cropw parameters are treated as absolute pixels not proportions of\n * the image. If cropx and cropy are not provided, the crop will be\n * \"centered\" in the image.\n *\n * When $cropx and $cropy are not provided the crop is offset from the top\n * left proportionally to the ratio of the final image size and the crop\n * size.\n *\n * Some typical croppings:\n *\n * $size=200, $width=NULL, $height=NULL, $cropw=200, $croph=100,\n * $cropx=NULL, $cropy=NULL produces an image cropped to a 2x1 ratio which\n * will fit in a 200x200 pixel frame.\n *\n * $size=NULL, $width=200, $height=NULL, $cropw=200, $croph=100, $cropx=100,\n * $cropy=10 will will take a 200x100 pixel slice from (10,100) of the\n * picture and create a 200x100 image\n *\n * $size=NULL, $width=200, $height=100, $cropw=200, $croph=120, $cropx=NULL,\n * $cropy=NULL will produce a (distorted) image 200x100 pixels from a 1x0.6\n * crop of the image.\n *\n * $size=NULL, $width=200, $height=NULL, $cropw=180, $croph=120, $cropx=NULL, $cropy=NULL\n * will produce an image that is 200x133 from a 1.5x1 crop that is 5% from the left\n * and 15% from the top of the image.\n *\n */\nfunction getCustomImageURL($size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = NULL, $thumbStandin = false, $effects = NULL) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\treturn $_zp_current_image->getCustomImage($size, $width, $height, $cropw, $croph, $cropx, $cropy, $thumbStandin, $effects);\n}\n\n/**\n * Print normal video or custom sized images.\n * Note: a class of 'not_visible' or 'password_protected' will be added as appropriate\n *\n * Notes on cropping:\n *\n * The $crop* parameters determine the portion of the original image that will be incorporated\n * into the final image. The w and h \"sizes\" are typically proportional. That is you can set them to\n * values that reflect the ratio of width to height that you want for the final image. Typically\n * you would set them to the fincal height and width.\n *\n * @param string $alt Alt text for the url\n * @param int $size size\n * @param int $width width\n * @param int $height height\n * @param int $cropw crop width\n * @param int $croph crop height\n * @param int $cropx crop x axis\n * @param int $cropy crop y axis\n * @param string $class Optional style class\n * @param string $id Optional style id\n * @param bool $thumbStandin set to true to treat as thumbnail\n * @param bool $effects image effects (e.g. set gray to force grayscale)\n * @param string $title title attribute\t\n * */\nfunction printCustomSizedImage($alt, $size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = NULL, $class = NULL, $id = NULL, $thumbStandin = false, $effects = NULL, $title = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn;\n\tif (!$_zp_current_image->getShow()) {\n\t\t$class .= \" not_visible\";\n\t}\n\t$album = $_zp_current_image->getAlbum();\n\t$pwd = $album->getPassword();\n\tif (!empty($pwd)) {\n\t\t$class .= \" password_protected\";\n\t}\n\tif ($size) {\n\t\t$dims = getSizeCustomImage($size);\n\t\t$sizing = ' width=\"' . $dims[0] . '\" height=\"' . $dims[1] . '\"';\n\t} else {\n\t\t$sizing = '';\n\t\tif ($width)\n\t\t\t$sizing .= ' width=\"' . $width . '\"';\n\t\tif ($height)\n\t\t\t$sizing .= ' height=\"' . $height . '\"';\n\t}\n\tif ($id) {\n\t\t$id = ' id=\"' . $id . '\"';\n\t}\n\tif ($class) {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\tif($title) {\n\t\t$title = ' title=\"' . html_encode($title) . '\"';\n\t}\n\tif (isImagePhoto() || $thumbStandin) {\n\t\t$html = '<img src=\"' . html_encode(pathurlencode(getCustomImageURL($size, $width, $height, $cropw, $croph, $cropx, $cropy, $thumbStandin, $effects))) . '\"' .\n\t\t\t\t\t\t' alt=\"' . html_encode($alt) . '\"' .\n\t\t\t\t\t\t$id . $class . $sizing . $title . ' />';\n\t\t$html = zp_apply_filter('custom_image_html', $html, $thumbStandin);\n\t\techo $html;\n\t} else { // better be a plugin\n\t\techo $_zp_current_image->getContent($width, $height);\n\t}\n}\n\n/**\n * Returns a link to a un-cropped custom sized version of the current image within the given height and width dimensions.\n * Use for sized images.\n *\n * @param int $width width\n * @param int $height height\n * @return string\n */\nfunction getCustomSizedImageMaxSpace($width, $height) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\tgetMaxSpaceContainer($width, $height, $_zp_current_image);\n\treturn getCustomImageURL(NULL, $width, $height);\n}\n\n/**\n * Returns a link to a un-cropped custom sized version of the current image within the given height and width dimensions.\n * Use for sized thumbnails.\n *\n * @param int $width width\n * @param int $height height\n * @return string\n */\nfunction getCustomSizedImageThumbMaxSpace($width, $height) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn false;\n\tgetMaxSpaceContainer($width, $height, $_zp_current_image, true);\n\treturn getCustomImageURL(NULL, $width, $height, NULL, NULL, NULL, NULL, true);\n}\n\n/**\n * Creates image thumbnails which will fit un-cropped within the width & height parameters given\n *\n * @param string $alt Alt text for the url\n * @param int $width width\n * @param int $height height\n * @param string $class Optional style class\n * @param string $id Optional style id\n * @param string $title Option title attribute\n */\nfunction printCustomSizedImageThumbMaxSpace($alt, $width, $height, $class = NULL, $id = NULL, $title = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn;\n\tgetMaxSpaceContainer($width, $height, $_zp_current_image, true);\n\tprintCustomSizedImage($alt, NULL, $width, $height, NULL, NULL, NULL, NULL, $class, $id, true, null, $title);\n}\n\n/**\n * Print normal video or un-cropped within the given height and width dimensions. Use for sized images or thumbnails in an album.\n * Note: a class of 'not_visible' or 'password_protected' will be added as appropriate\n *\n * @param string $alt Alt text for the url\n * @param int $width width\n * @param int $height height\n * @param string $class Optional style class\n * @param string $id Optional style id\n * @param string $title Option title attribute\n */\nfunction printCustomSizedImageMaxSpace($alt, $width, $height, $class = NULL, $id = NULL, $thumb = false, $title = null) {\n\tglobal $_zp_current_image;\n\tif (is_null($_zp_current_image))\n\t\treturn;\n\tgetMaxSpaceContainer($width, $height, $_zp_current_image, $thumb);\n\tprintCustomSizedImage($alt, NULL, $width, $height, NULL, NULL, NULL, NULL, $class, $id, $thumb, null, $title);\n}\n\n/**\n * Prints link to an image of specific size\n * @param int $size how big\n * @param string $text URL text\n * @param string $title URL title\n * @param string $class optional URL class\n * @param string $id optional URL id\n */\nfunction printSizedImageURL($size, $text, $title, $class = NULL, $id = NULL) {\n\tprintLinkHTML(getSizedImageURL($size), $text, $title, $class, $id);\n}\n\n/**\n *\n * performs a query and then filters out \"illegal\" images returning the first \"good\" image\n * used by the random image functions.\n *\n * @param object $result query result\n * @param string $source album object if this is search within the album\n */\nfunction filterImageQuery($result, $source) {\n\tif ($result) {\n\t\twhile ($row = db_fetch_assoc($result)) {\n\t\t\t$image = newImage(null, $row);\n   $album = $image->album;\n   if ($album->name == $source || $album->checkAccess()) {\n\t\t\t\tif (isImagePhoto($image)) {\n\t\t\t\t\tif ($image->checkAccess()) {\n\t\t\t\t\t\treturn $image;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdb_free_result($result);\n\t}\n\treturn NULL;\n}\n\n/**\n * Returns a randomly selected image from the gallery. (May be NULL if none exists)\n * @param bool $daily set to true and the picture changes only once a day.\n *\n * @return object\n */\nfunction getRandomImages($daily = false) {\n\tglobal $_zp_gallery;\n\tif ($daily) {\n\t\t$potd = getSerializedArray(getOption('picture_of_the_day'));\n\t\tif (date('Y-m-d', $potd['day']) == date('Y-m-d')) {\n\t\t\t$album = newAlbum($potd['folder'], true, true);\n\t\t\tif ($album->exists) {\n\t\t\t\t$image = newImage($album, $potd['filename'], true);\n\t\t\t\tif ($image->exists) {\n\t\t\t\t\treturn $image;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (zp_loggedin()) {\n\t\t$imageWhere = '';\n\t} else {\n\t\t$imageWhere = \" AND \" . prefix('images') . \".show=1\";\n\t}\n\t$result = query('SELECT `folder`, `filename` ' .\n\t\t\t\t\t' FROM ' . prefix('images') .\n\t\t\t\t\t' INNER JOIN ' . prefix('albums') . ' ON ' . prefix('images') . '.albumid = ' . prefix('albums') . '.id ' .\n\t\t\t\t\t' INNER JOIN (SELECT CEIL(RAND() * (SELECT MAX(id) FROM ' . prefix('images') . ')) AS id) AS r2 ON ' . prefix('images') . '.id >= r2.id ' . \n\t\t\t\t\t' WHERE ' . prefix('albums') . '.folder!=\"\" ' . $imageWhere . ' ORDER BY ' . prefix('images') . '.id LIMIT 1');\n\n\t$image = filterImageQuery($result, NULL);\n\tif ($image) {\n\t\tif ($daily) {\n\t\t\t$potd = array('day' => time(), 'folder' => $image->getAlbumName(), 'filename' => $image->getFileName());\n\t\t\tsetThemeOption('picture_of_the_day', serialize($potd), NULL, $_zp_gallery->getCurrentTheme());\n\t\t}\n\t\treturn $image;\n\t}\n\treturn NULL;\n}\n\n/**\n * Returns  a randomly selected image from the album or its subalbums. (May be NULL if none exists)\n *\n * @param mixed $rootAlbum optional album object/folder from which to get the image.\n * @param bool $daily set to true to change picture only once a day.\n *\n * @return object\n */\nfunction getRandomImagesAlbum($rootAlbum = NULL, $daily = false) {\n\tglobal $_zp_current_album, $_zp_gallery;\n\tif (empty($rootAlbum) && !in_context(ZP_ALBUM)) {\n\t\treturn null;\n\t}\n\tif (empty($rootAlbum)) {\n\t\t$album = $_zp_current_album;\n\t} else {\n\t\tif (is_object($rootAlbum)) {\n\t\t\t$album = $rootAlbum;\n\t\t} else {\n\t\t\t$album = newAlbum($rootAlbum);\n\t\t}\n\t}\n\tif ($daily && ($potd = getOption('picture_of_the_day:' . $album->name))) {\n\t\t$potd = getSerializedArray($potd);\n\t\tif (date('Y-m-d', $potd['day']) == date('Y-m-d')) {\n\t\t\t$rndalbum = newAlbum($potd['folder']);\n\t\t\t$image = newImage($rndalbum, $potd['filename']);\n\t\t\tif ($image->exists)\n\t\t\t\treturn $image;\n\t\t}\n\t}\n\t$image = NULL;\n\tif ($album->isDynamic()) {\n\t\t$images = $album->getImages(0);\n\t\tshuffle($images);\n\t\twhile (count($images) > 0) {\n\t\t\t$result = array_pop($images);\n\t\t\tif (Gallery::validImage($result['filename'])) {\n\t\t\t\t$image = newImage(newAlbum($result['folder']), $result['filename']);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$albumfolder = $album->getFileName();\n\t\tif ($album->isMyItem(LIST_RIGHTS)) {\n\t\t\t$imageWhere = '';\n\t\t\t$albumInWhere = '';\n\t\t} else {\n\t\t\t$imageWhere = \" AND \" . prefix('images') . \".show=1\";\n\t\t\t$albumInWhere = prefix('albums') . \".show=1\";\n\t\t}\n\t\t$query = \"SELECT id FROM \" . prefix('albums') . \" WHERE \";\n\t\tif ($albumInWhere) {\n\t\t\t$query .= $albumInWhere . ' AND ';\n\t\t}\n\t\t$query .= \"folder LIKE \" . db_quote(db_LIKE_escape($albumfolder) . '%');\n\t\t$result = query($query);\n\t\tif ($result) {\n\t\t\t$albumids = array();\n\t\t\twhile ($row = db_fetch_assoc($result)) {\n\t\t\t\t$albumids[] = $row['id'];\n\t\t\t}\n\t\t\tif (empty($albumids)) {\n\t\t\t\t$albumInWhere = ' AND ' . $albumInWhere;\n\t\t\t} else {\n\t\t\t\t$albumInWhere = ' AND ' . prefix('albums') . \".id IN (\" . implode(',', $albumids) . ')';\n\t\t\t}\n\t\t\tdb_free_result($result);\n\t\t\t$sql = 'SELECT `folder`, `filename` ' .\n\t\t\t\t\t\t\t' FROM ' . prefix('images') . ', ' . prefix('albums') .\n\t\t\t\t\t\t\t' WHERE ' . prefix('albums') . '.folder!=\"\" AND ' . prefix('images') . '.albumid = ' .\n\t\t\t\t\t\t\tprefix('albums') . '.id ' . $albumInWhere . $imageWhere . ' ORDER BY RAND()';\n\t\t\t$result = query($sql);\n\t\t\t$image = filterImageQuery($result, $album->name);\n\t\t}\n\t}\n\tif ($image) {\n\t\tif ($daily) {\n\t\t\t$potd = array('day' => time(), 'folder' => $image->getAlbumName(), 'filename' => $image->getFileName());\n\t\t\tsetThemeOption('picture_of_the_day:' . $album->name, serialize($potd), NULL, $_zp_gallery->getCurrentTheme());\n\t\t}\n\t}\n\treturn $image;\n}\n\n/**\n * Puts up random image thumbs from the gallery\n *\n * @param int $number how many images\n * @param string $class optional class\n * @param string $option what you want selected: all for all images, album for selected ones from an album\n * @param mixed $rootAlbum optional album object/folder from which to get the image.\n * @param integer $width the width/cropwidth of the thumb if crop=true else $width is longest size.\n * @param integer $height the height/cropheight of the thumb if crop=true else not used\n * @param bool $crop 'true' (default) if the thumb should be cropped, 'false' if not\n * @param bool $fullimagelink 'false' (default) for the image page link , 'true' for the unprotected full image link (to use Colorbox for example)\n */\nfunction printRandomImages($number = 5, $class = null, $option = 'all', $rootAlbum = '', $width = NULL, $height = NULL, $crop = NULL, $fullimagelink = false) {\n\tif (is_null($crop) && is_null($width) && is_null($height)) {\n\t\t$crop = 2;\n\t} else {\n\t\tif (is_null($width))\n\t\t\t$width = 85;\n\t\tif (is_null($height))\n\t\t\t$height = 85;\n\t\tif (is_null($crop)) {\n\t\t\t$crop = 1;\n\t\t} else {\n\t\t\t$crop = (int) $crop && true;\n\t\t}\n\t}\n\tif (!empty($class))\n\t\t$class = ' class=\"' . $class . '\"';\n\techo \"<ul\" . $class . \">\";\n\tfor ($i = 1; $i <= $number; $i++) {\n\t\tswitch ($option) {\n\t\t\tcase \"all\":\n\t\t\t\t$randomImage = getRandomImages();\n\t\t\t\tbreak;\n\t\t\tcase \"album\":\n\t\t\t\t$randomImage = getRandomImagesAlbum($rootAlbum);\n\t\t\t\tbreak;\n\t\t}\n\t\tif (is_object($randomImage) && $randomImage->exists) {\n\t\t\techo \"<li>\\n\";\n\t\t\tif ($fullimagelink) {\n\t\t\t\t$randomImageURL = $randomImage->getFullimageURL();\n\t\t\t} else {\n\t\t\t\t$randomImageURL = $randomImage->getLink();\n\t\t\t}\n\t\t\techo '<a href=\"' . html_encode($randomImageURL) . '\" title=\"' . sprintf(gettext('View image: %s'), html_encode($randomImage->getTitle())) . '\">';\n\t\t\tswitch ($crop) {\n\t\t\t\tcase 0:\n\t\t\t\t\t$sizes = getSizeCustomImage($width, NULL, NULL, NULL, NULL, NULL, NULL, $randomImage);\n\t\t\t\t\t$html = '<img src=\"' . html_encode(pathurlencode($randomImage->getCustomImage($width, NULL, NULL, NULL, NULL, NULL, NULL, TRUE))) . '\" width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\" alt=\"' . html_encode($randomImage->getTitle()) . '\" />' . \"\\n\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\t$sizes = getSizeCustomImage(NULL, $width, $height, $width, $height, NULL, NULL, $randomImage);\n\t\t\t\t\t$html = '<img src=\"' . html_encode(pathurlencode($randomImage->getCustomImage(NULL, $width, $height, $width, $height, NULL, NULL, TRUE))) . '\" width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\" alt=\"' . html_encode($randomImage->getTitle()) . '\" />' . \"\\n\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t$sizes = getSizeDefaultThumb($randomImage);\n\t\t\t\t\t$html = '<img src=\"' . html_encode(pathurlencode($randomImage->getThumb())) . '\" width=\"' . $sizes[0] . '\" height=\"' . $sizes[1] . '\" alt=\"' . html_encode($randomImage->getTitle()) . '\" />' . \"\\n\";\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\techo zp_apply_filter('custom_image_html', $html, false);\n\t\t\techo \"</a>\";\n\t\t\techo \"</li>\\n\";\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\techo \"</ul>\";\n}\n\n/**\n * Returns a list of tags for context of the page called where called\n *\n * @return string\n * @since 1.1\n */\nfunction getTags() {\n\tif (in_context(ZP_IMAGE)) {\n\t\tglobal $_zp_current_image;\n\t\treturn $_zp_current_image->getTags();\n\t} else if (in_context(ZP_ALBUM)) {\n\t\tglobal $_zp_current_album;\n\t\treturn $_zp_current_album->getTags();\n\t} else if (in_context(ZP_ZENPAGE_PAGE)) {\n\t\tglobal $_zp_current_zenpage_page;\n\t\treturn $_zp_current_zenpage_page->getTags();\n\t} else if (in_context(ZP_ZENPAGE_NEWS_ARTICLE)) {\n\t\tglobal $_zp_current_zenpage_news;\n\t\treturn $_zp_current_zenpage_news->getTags();\n\t}\n\treturn array();\n}\n\n/**\n * Prints a list of tags, editable by admin\n *\n * @param string $option links by default, if anything else the\n *               tags will not link to all other images with the same tag\n * @param string $preText text to go before the printed tags\n * @param string $class css class to apply to the div surrounding the UL list\n * @param string $separator what charactor shall separate the tags\n * @since 1.1\n */\nfunction printTags($option = 'links', $preText = NULL, $class = NULL, $separator = ', ') {\n\tglobal $_zp_current_search;\n\tif (is_null($class)) {\n\t\t$class = 'taglist';\n\t}\n\t$singletag = getTags();\n\t$tagstring = implode(', ', $singletag);\n\tif ($tagstring === '' or $tagstring === NULL) {\n\t\t$preText = '';\n\t}\n\tif (in_context(ZP_IMAGE)) {\n\t\t$object = \"image\";\n\t} else if (in_context(ZP_ALBUM)) {\n\t\t$object = \"album\";\n\t} else if (in_context(ZP_ZENPAGE_PAGE)) {\n\t\t$object = \"pages\";\n\t} else if (in_context(ZP_ZENPAGE_NEWS_ARTICLE)) {\n\t\t$object = \"news\";\n\t}\n\tif (count($singletag) > 0) {\n\t\tif (!empty($preText)) {\n\t\t\techo \"<span class=\\\"tags_title\\\">\" . $preText . \"</span>\";\n\t\t}\n\t\techo \"<ul class=\\\"\" . $class . \"\\\">\\n\";\n\t\tif (is_object($_zp_current_search)) {\n\t\t\t$albumlist = $_zp_current_search->getAlbumList();\n\t\t} else {\n\t\t\t$albumlist = NULL;\n\t\t}\n\t\t$ct = count($singletag);\n\t\t$x = 0;\n\t\tforeach ($singletag as $atag) {\n\t\t\tif (++$x == $ct) {\n\t\t\t\t$separator = \"\";\n\t\t\t}\n\t\t\tif ($option === \"links\") {\n\t\t\t\t$links1 = \"<a href=\\\"\" . html_encode(getSearchURL(search_quote($atag), '', 'tags', 0, array('albums' => $albumlist))) . \"\\\" title=\\\"\" . html_encode($atag) . \"\\\">\";\n\t\t\t\t$links2 = \"</a>\";\n\t\t\t} else {\n\t\t\t\t$links1 = $links2 = '';\n\t\t\t}\n\t\t\techo \"\\t<li>\" . $links1 . $atag . $links2 . $separator . \"</li>\\n\";\n\t\t}\n\t\techo \"</ul>\";\n\t} else {\n\t\techo \"$tagstring\";\n\t}\n}\n\n/**\n * Either prints all of the galleries tgs as a UL list or a cloud\n *\n * @param string $option \"cloud\" for tag cloud, \"list\" for simple list\n * @param string $class CSS class\n * @param string $sort \"results\" for relevance list, \"random\" for random ordering, otherwise the list is alphabetical\n * @param bool $counter TRUE if you want the tag count within brackets behind the tag\n * @param bool $links set to TRUE to have tag search links included with the tag.\n * @param int $maxfontsize largest font size the cloud should display\n * @param int $maxcount the floor count for setting the cloud font size to $maxfontsize\n * @param int $mincount the minimum count for a tag to appear in the output\n * @param int $limit set to limit the number of tags displayed to the top $numtags\n * @param int $minfontsize minimum font size the cloud should display\n * @param bool $exclude_unassigned True or false if you wish to exclude tags that are not assigne to any item (default: true)\n * @param bool $checkaccess True or false (default: false) if you wish to exclude tags that are assigned to items (or are not assigned at all) the visitor is not allowed to see\n * Beware that this may cause overhead on large sites. Usage of the static_html_cache is strongely recommended then.\n * @since 1.1\n */\nfunction printAllTagsAs($option, $class = '', $sort = NULL, $counter = FALSE, $links = TRUE, $maxfontsize = 2, $maxcount = 50, $mincount = 1, $limit = NULL, $minfontsize = 0.8, $exclude_unassigned = true, $checkaccess = false) {\n\tglobal $_zp_current_search;\n\t$option = strtolower($option);\n\tif ($class != \"\") {\n\t\t$class = ' class=\"' . $class . '\"';\n\t}\n\t$tagcount = getAllTagsCount($exclude_unassigned, $checkaccess);\n\tif (!is_array($tagcount)) {\n\t\treturn false;\n\t}\n\tswitch ($sort) {\n\t\tcase 'results':\n\t\t\tarsort($tagcount);\n\t\t\tif (!is_null($limit)) {\n\t\t\t\t$tagcount = array_slice($tagcount, 0, $limit);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'random':\n\t\t\tif (!is_null($limit)) {\n\t\t\t\t$tagcount = array_slice($tagcount, 0, $limit);\n\t\t\t}\n\t\t\tshuffle_assoc($tagcount);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t?>\n\t<ul<?php echo $class; ?>>\n\t\t<?php\n\t\tif (count($tagcount) > 0) {\n\t\t\tforeach ($tagcount as $key => $val) {\n\t\t\t\tif (!$counter) {\n\t\t\t\t\t$counter = \"\";\n\t\t\t\t} else {\n\t\t\t\t\t$counter = \" (\" . $val . \") \";\n\t\t\t\t}\n\t\t\t\tif ($option == \"cloud\") { // calculate font sizes, formula from wikipedia\n\t\t\t\t\tif ($val <= $mincount) {\n\t\t\t\t\t\t$size = $minfontsize;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$size = min(max(round(($maxfontsize * ($val - $mincount)) / ($maxcount - $mincount), 2), $minfontsize), $maxfontsize);\n\t\t\t\t\t}\n\t\t\t\t\t$size = str_replace(',', '.', $size);\n\t\t\t\t\t$size = ' style=\"font-size:' . $size . 'em;\"';\n\t\t\t\t} else {\n\t\t\t\t\t$size = '';\n\t\t\t\t}\n\t\t\t\tif ($val >= $mincount) {\n\t\t\t\t\tif ($links) {\n\t\t\t\t\t\tif (is_object($_zp_current_search)) {\n\t\t\t\t\t\t\t$albumlist = $_zp_current_search->getAlbumList();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$albumlist = NULL;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$link = getSearchURL(search_quote($key), '', 'tags', 0, array('albums' => $albumlist));\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"<?php echo html_encode($link); ?>\"<?php echo $size; ?>><?php echo $key . $counter; ?></a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t} else {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<li<?php echo $size; ?>><?php echo $key . $counter; ?></li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // while end\n\t\t} else {\n\t\t\t?>\n\t\t\t<li><?php echo gettext('No popular tags'); ?></li>\n\t\t\t<?php\n\t\t}\n\t\t?>\n\t</ul>\n\t<?php\n}\n\n/**\n * Retrieves a list of all unique years & months from the images in the gallery\n *\n * @param string $order set to 'desc' for the list to be in descending order\n * @return array\n */\nfunction getAllDates($order = 'asc') {\n\t$alldates = array();\n\t$cleandates = array();\n\t$sql = \"SELECT `date` FROM \" . prefix('images');\n\tif (!zp_loggedin()) {\n\t\t$sql .= \" WHERE `show` = 1\";\n\t}\n\t$hidealbums = getNotViewableAlbums();\n\tif (!is_null($hidealbums)) {\n\t\tif (zp_loggedin()) {\n\t\t\t$sql .= ' WHERE ';\n\t\t} else {\n\t\t\t$sql .= ' AND ';\n\t\t}\n\t\tforeach ($hidealbums as $id) {\n\t\t\t$sql .= '`albumid`!=' . $id . ' AND ';\n\t\t}\n\t\t$sql = substr($sql, 0, -5);\n\t}\n\t$result = query($sql);\n\tif ($result) {\n\t\twhile ($row = db_fetch_assoc($result)) {\n\t\t\t$alldates[] = $row['date'];\n\t\t}\n\t\tdb_free_result($result);\n\t}\n\tforeach ($alldates as $adate) {\n\t\tif (!empty($adate)) {\n\t\t\t$cleandates[] = substr($adate, 0, 7) . \"-01\";\n\t\t}\n\t}\n\t$datecount = array_count_values($cleandates);\n\tif ($order == 'desc') {\n\t\tkrsort($datecount);\n\t} else {\n\t\tksort($datecount);\n\t}\n\treturn $datecount;\n}\n\n/**\n * Prints a compendum of dates and links to a search page that will show results of the date\n *\n * @param string $class optional class\n * @param string $yearid optional class for \"year\"\n * @param string $monthid optional class for \"month\"\n * @param string $order set to 'desc' for the list to be in descending order\n */\nfunction printAllDates($class = 'archive', $yearid = 'year', $monthid = 'month', $order = 'asc') {\n\tglobal $_zp_current_search, $_zp_gallery_page;\n\tif (empty($class)) {\n\t\t$classactive = 'archive_active';\n\t} else {\n\t\t$classactive = $class . '_active';\n\t\t$class = 'class=\"' . $class . '\"';\n\t}\n\tif ($_zp_gallery_page == 'search.php') {\n\t\t$activedate = getSearchDate('%Y-%m');\n\t} else {\n\t\t$activedate = '';\n\t}\n\tif (!empty($yearid)) {\n\t\t$yearid = 'class=\"' . $yearid . '\"';\n\t}\n\tif (!empty($monthid)) {\n\t\t$monthid = 'class=\"' . $monthid . '\"';\n\t}\n\t$datecount = getAllDates($order);\n\t$lastyear = \"\";\n\techo \"\\n<ul $class>\\n\";\n\t$nr = 0;\n\tforeach($datecount as $key => $val) {\n\t\t$nr++;\n\t\tif ($key == '0000-00-01') {\n\t\t\t$year = \"no date\";\n\t\t\t$month = \"\";\n\t\t} else {\n\t\t\t$dt = strftime('%Y-%B', strtotime($key));\n\t\t\t$year = substr($dt, 0, 4);\n\t\t\t$month = substr($dt, 5);\n\t\t}\n\n\t\tif ($lastyear != $year) {\n\t\t\t$lastyear = $year;\n\t\t\tif ($nr != 1) {\n\t\t\t\techo \"</ul>\\n</li>\\n\";\n\t\t\t}\n\t\t\techo \"<li $yearid>$year\\n<ul $monthid>\\n\";\n\t\t}\n\t\tif (is_object($_zp_current_search)) {\n\t\t\t$albumlist = $_zp_current_search->getAlbumList();\n\t\t} else {\n\t\t\t$albumlist = NULL;\n\t\t}\n\t\t$datekey = substr($key, 0, 7);\n\t\tif ($activedate = $datekey) {\n\t\t\t$cl = ' class=\"' . $classactive . '\"';\n\t\t} else {\n\t\t\t$cl = '';\n\t\t}\n\t\techo '<li' . $cl . '><a href=\"' . html_encode(getSearchURL('', $datekey, '', 0, array('albums' => $albumlist))) . '\">' . $month . ' (' . $val . ')</a></li>' . \"\\n\";\n\t}\n\techo \"</ul>\\n</li>\\n</ul>\\n\";\n}\n\n/**\n * Produces the url to a custom page (e.g. one that is not album.php, image.php, or index.php)\n *\n * @param string $page page name to include in URL\n * @param string $q query string to add to url\n * @param bool $webpath host path to be prefixed. If \"false\" is passed you will get a localized \"WEBPATH\"\n * @return string\n */\nfunction getCustomPageURL($page, $q = '', $webpath = null) {\n\tglobal $_zp_conf_vars;\n\tif (array_key_exists($page, $_zp_conf_vars['special_pages'])) {\n\t\t$rewrite = preg_replace('~^_PAGE_/~', _PAGE_ . '/', $_zp_conf_vars['special_pages'][$page]['rewrite']) . '/';\n\t} else {\n\t\t$rewrite = '/' . _PAGE_ . '/' . $page . '/';\n\t}\n\t$plain = \"index.php?p=$page\";\n\tif (!empty($q)) {\n\t\t$rewrite .= \"?$q\";\n\t\t$plain .= \"&$q\";\n\t}\n\treturn zp_apply_filter('getLink', rewrite_path($rewrite, $plain, $webpath), $page . '.php', null);\n}\n\n/**\n * Prints the url to a custom page (e.g. one that is not album.php, image.php, or index.php)\n *\n * @param string $linktext Text for the URL\n * @param string $page page name to include in URL\n * @param string $q query string to add to url\n * @param string $prev text to insert before the URL\n * @param string $next text to follow the URL\n * @param string $class optional class\n */\nfunction printCustomPageURL($linktext, $page, $q = '', $prev = '', $next = '', $class = NULL) {\n\tif (!is_null($class)) {\n\t\t$class = 'class=\"' . $class . '\"';\n\t}\n\techo $prev . \"<a href=\\\"\" . html_encode(getCustomPageURL($page, $q)) . \"\\\" $class title=\\\"\" . html_encode($linktext) . \"\\\">\" . html_encode($linktext) . \"</a>\" . $next;\n}\n\n//*** Search functions *******************************************************\n//****************************************************************************\n\n/**\n * tests if a search page is an \"archive\" page\n *\n * @return bool\n */\nfunction isArchive() {\n\treturn isset($_REQUEST['date']);\n}\n\n/**\n * Returns a search URL\n *\n * @param mixed $words the search words target\n * @param mixed $dates the dates that limit the search\n * @param mixed $fields the fields on which to search\n * @param int $page the page number for the URL\n * @param array $object_list the list of objects to search\n * @return string\n * @since 1.1.3\n */\nfunction getSearchURL($words, $dates, $fields, $page, $object_list = NULL) {\n\t$urls = '';\n\t$rewrite = false;\n\tif (MOD_REWRITE) {\n\t\t$rewrite = true;\n\t\tif (is_array($object_list)) {\n\t\t\tforeach ($object_list as $obj) {\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$rewrite = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($rewrite) {\n\t\tif (empty($dates)) {\n\t\t\t$url = SEO_WEBPATH . '/' . _SEARCH_ . '/';\n\t\t} else {\n\t\t\t$url = SEO_WEBPATH . '/' . _ARCHIVE_ . '/';\n\t\t}\n\t} else {\n\t\t$url = SEO_WEBPATH . \"/index.php?p=search\";\n\t}\n\tif (!empty($fields) && empty($dates)) {\n\t\tif (!is_array($fields)) {\n\t\t\t$fields = explode(',', $fields);\n\t\t}\n\t\t$temp = $fields;\n\t\tif ($rewrite && count($fields) == 1 && array_shift($temp) == 'tags') {\n\t\t\t$url = SEO_WEBPATH . '/' . _TAGS_ . '/';\n\t\t} else {\n\t\t\t$search = new SearchEngine();\n\t\t\t$urls = $search->getSearchFieldsText($fields, 'searchfields=');\n\t\t}\n\t}\n\n\tif (!empty($words)) {\n\t\tif (is_array($words)) {\n\t\t\tforeach ($words as $key => $word) {\n\t\t\t\t$words[$key] = search_quote($word);\n\t\t\t}\n\t\t\t$words = implode(',', $words);\n\t\t}\n\t\t$words = strtr($words, array('%' => '__25__', '&' => '__26__', '#' => '__23__', '/' => '__2F__'));\n\t\tif ($rewrite) {\n\t\t\t$url .= urlencode($words) . '/';\n\t\t} else {\n\t\t\t$url .= \"&words=\" . urlencode($words);\n\t\t}\n\t}\n\tif (!empty($dates)) {\n\t\tif (is_array($dates)) {\n\t\t\t$dates = implode(',', $dates);\n\t\t}\n\t\tif ($rewrite) {\n\t\t\t$url .= $dates . '/';\n\t\t} else {\n\t\t\t$url .= \"&date=$dates\";\n\t\t}\n\t}\n\tif ($page > 1) {\n\t\tif ($rewrite) {\n\t\t\t$url .= \"$page/\";\n\t\t} else {\n\t\t\tif ($urls) {\n\t\t\t\t$urls .= '&';\n\t\t\t}\n\t\t\t$urls .= \"page=$page\";\n\t\t}\n\t}\n\tif (!empty($urls)) {\n\t\tif ($rewrite) {\n\t\t\t$url .= '?' . $urls;\n\t\t} else {\n\t\t\t$url .= '&' . $urls;\n\t\t}\n\t}\n\tif (is_array($object_list)) {\n\t\tforeach ($object_list as $key => $list) {\n\t\t\tif (!empty($list)) {\n\t\t\t\t$url .= '&in' . $key . '=' . html_encode(implode(',', $list));\n\t\t\t}\n\t\t}\n\t}\n\treturn $url;\n}\n\n/**\n * Prints the search form\n *\n * Search works on a list of tokens entered into the search form.\n *\n * Tokens may be part of boolean expressions using &, |, !, and parens. (Comma is retained as a synonom of | for\n * backwords compatibility.)\n *\n * Tokens may be enclosed in quotation marks to create exact pattern matches or to include the boolean operators and\n * parens as part of the tag..\n *\n * @param string $prevtext text to go before the search form\n * @param string $id css id for the search form, default is 'search'\n * @param string $buttonSource optional path to the image for the button or if not a path to an image,\n * \t\t\t\t\t\t\t\t\t\t\tthis will be the button hint\n * @param string $buttontext optional text for the button (\"Search\" will be the default text)\n * @param string $iconsource optional theme based icon for the search fields toggle\n * @param array $query_fields override selection for enabled fields with this list\n * @param array $objects_list optional array of things to search eg. [albums]=>[list], etc.\n * \t\t\t\t\t\t\t\t\t\t\t\t\t\tif the list is simply 0, the objects will be omitted from the search\n * @param string $within set to true to search within current results, false to search fresh\n * @since 1.1.3\n */\nfunction printSearchForm($prevtext = NULL, $id = 'search', $buttonSource = NULL, $buttontext = '', $iconsource = NULL, $query_fields = NULL, $object_list = NULL, $within = NULL) {\n\tglobal $_zp_adminJS_loaded, $_zp_current_search;\n\t$engine = new SearchEngine();\n\tif (!is_null($_zp_current_search) && !$_zp_current_search->getSearchWords()) {\n\t\t$engine->clearSearchWords();\n\t}\n\tif (!is_null($object_list)) {\n\t\tif (array_key_exists(0, $object_list)) { // handle old form albums list\n\t\t\ttrigger_error(gettext('printSearchForm $album_list parameter is deprecated. Pass array(\"albums\"=>array(album, album, ...)) instead.'), E_USER_NOTICE);\n\t\t\t$object_list = array('albums' => $object_list);\n\t\t}\n\t}\n\tif (empty($buttontext)) {\n\t\t$buttontext = gettext(\"Search\");\n\t}\n\t$zf = WEBPATH . \"/\" . ZENFOLDER;\n\t$searchwords = $engine->codifySearchString();\n\tif (substr($searchwords, -1, 1) == ',') {\n\t\t$searchwords = substr($searchwords, 0, -1);\n\t}\n\tif (empty($searchwords)) {\n\t\t$within = false;\n\t\t$hint = '%s';\n\t} else {\n\t\t$hint = gettext('%s within previous results');\n\t}\n\tif (preg_match('!\\/(.*)[\\.png|\\.jpg|\\.jpeg|\\.gif]$!', $buttonSource)) {\n\t\t$buttonSource = 'src=\"' . $buttonSource . '\" alt=\"' . $buttontext . '\"';\n\t\t$button = 'title=\"' . sprintf($hint, $buttontext) . '\"';\n\t\t$type = 'image';\n\t} else {\n\t\t$type = 'submit';\n\t\tif ($buttonSource) {\n\t\t\t$button = 'value=\"' . $buttontext . '\" title=\"' . sprintf($hint, $buttonSource) . '\"';\n\t\t\t$buttonSource = '';\n\t\t} else {\n\t\t\t$button = 'value=\"' . $buttontext . '\" title=\"' . sprintf($hint, $buttontext) . '\"';\n\t\t}\n\t}\n\tif (empty($iconsource)) {\n\t\t$iconsource = WEBPATH . '/' . ZENFOLDER . '/images/searchfields_icon.png';\n\t}\n\tif (is_null($within)) {\n\t\t$within = getOption('search_within');\n\t}\n\tif (MOD_REWRITE) {\n\t\t$searchurl = SEO_WEBPATH . '/' . _SEARCH_ . '/';\n\t} else {\n\t\t$searchurl = WEBPATH . \"/index.php?p=search\";\n\t}\n\tif (!$within) {\n\t\t$engine->clearSearchWords();\n\t}\n\n\t$fields = $engine->allowedSearchFields();\n\tif (!$_zp_adminJS_loaded) {\n\t\t$_zp_adminJS_loaded = true;\n\t\t?>\n\t\t<script type=\"text/javascript\" src=\"<?php echo WEBPATH . '/' . ZENFOLDER; ?>/js/admin.js\"></script>\n\t\t<?php\n\t}\n\t?>\n\t<div id=\"<?php echo $id; ?>\">\n\t\t<!-- search form -->\n\t\t<form method=\"post\" action=\"<?php echo $searchurl; ?>\" id=\"search_form\">\n\t\t\t<script type=\"text/javascript\">\n\t\t\t// <!-- <![CDATA[\n\t\t\tvar within = <?php echo (int) $within; ?>;\n\t\t\tfunction search_(way) {\n\t\t\t\twithin = way;\n\t\t\t\tif (way) {\n\t\t\t\t\t$('#search_submit').attr('title', '<?php echo sprintf($hint, $buttontext); ?>');\n\t\t\t\t} else {\n\t\t\t\t\tlastsearch = '';\n\t\t\t\t\t$('#search_submit').attr('title', '<?php echo $buttontext; ?>');\n\t\t\t\t}\n\t\t\t\t$('#search_input').val('');\n\t\t\t}\n\t\t\t$('#search_form').submit(function() {\n\t\t\t\tif (within) {\n\t\t\t\t\tvar newsearch = $.trim($('#search_input').val());\n\t\t\t\t\tif (newsearch.substring(newsearch.length - 1) == ',') {\n\t\t\t\t\t\tnewsearch = newsearch.substr(0, newsearch.length - 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (newsearch.length > 0) {\n\t\t\t\t\t\t$('#search_input').val('(<?php echo $searchwords; ?>) AND (' + newsearch + ')');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$('#search_input').val('<?php echo $searchwords; ?>');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n    $(document).ready(function() {\n      $( $(\"#checkall_searchfields\") ).on( \"click\", function() {\n        $(\"#searchextrashow :checkbox\").prop(\"checked\", $(\"#checkall_searchfields\").prop(\"checked\") );\n      });\n    });\n\t\t\t// ]]> -->\n\t\t\t</script>\n\t\t\t<?php echo $prevtext; ?>\n\t\t\t<div>\n\t\t\t\t<span class=\"tagSuggestContainer\">\n\t\t\t\t\t<input type=\"text\" name=\"words\" value=\"\" id=\"search_input\" size=\"10\" />\n\t\t\t\t</span>\n\t\t\t\t<?php if (count($fields) > 1 || $searchwords) { ?>\n\t\t\t\t\t<a class=\"toggle_searchextrashow\" href=\"#\"><img src=\"<?php echo $iconsource; ?>\" title=\"<?php echo gettext('search options'); ?>\" alt=\"<?php echo gettext('fields'); ?>\" id=\"searchfields_icon\" /></a>\n\t\t\t\t\t<script>\n\t\t\t\t\t\t$(\".toggle_searchextrashow\").click(function(event) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t$(\"#searchextrashow\").toggle();\n\t\t\t\t\t\t});\n\t\t\t\t\t</script>\n\t\t\t\t<?php } ?>\n\t\t\t\t<input type=\"<?php echo $type; ?>\" <?php echo $button; ?> class=\"button buttons\" id=\"search_submit\" <?php echo $buttonSource; ?> data-role=\"none\" />\n\t\t\t\t<?php\n\t\t\t\tif (is_array($object_list)) {\n\t\t\t\t\tforeach ($object_list as $key => $list) {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<input type=\"hidden\" name=\"in<?php echo $key ?>\" value=\"<?php\n\t\t\t\t\t\tif (is_array($list))\n\t\t\t\t\t\t\techo html_encode(implode(',', $list));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\techo html_encode($list);\n\t\t\t\t\t\t?>\" />\n\t\t\t\t\t\t\t\t\t <?php\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t ?>\n\t\t\t\t<br />\n\t\t\t\t<?php\n\t\t\t\tif (count($fields) > 1 || $searchwords) {\n\t\t\t\t\t$fields = array_flip($fields);\n\t\t\t\t\tnatcasesort($fields);\n\t\t\t\t\t$fields = array_flip($fields);\n\t\t\t\t\tif (is_null($query_fields)) {\n\t\t\t\t\t\t$query_fields = $engine->parseQueryFields();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!is_array($query_fields)) {\n\t\t\t\t\t\t\t$query_fields = $engine->numericFields($query_fields);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (count($query_fields) == 0) {\n\t\t\t\t\t\t$query_fields = $engine->allowedSearchFields();\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<div style=\"display:none;\" id=\"searchextrashow\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tif ($searchwords) {\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"search_within\" id=\"search_within-1\" value=\"1\"<?php if ($within) echo ' checked=\"checked\"'; ?> onclick=\"search_(1);\" />\n\t\t\t\t\t\t\t\t<?php echo gettext('Within'); ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"search_within\" id=\"search_within-0\" value=\"1\"<?php if (!$within) echo ' checked=\"checked\"'; ?> onclick=\"search_(0);\" />\n\t\t\t\t\t\t\t\t<?php echo gettext('New'); ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (count($fields) > 1) {\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<ul>\n        <li><label><input type=\"checkbox\" name=\"checkall_searchfields\" id=\"checkall_searchfields\" checked=\"checked\">* <?php echo gettext('Check/uncheck all'); ?> *</label></li>\n\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\tforeach ($fields as $display => $key) {\n\t\t\t\t\t\t\t\t\techo '<li><label><input id=\"SEARCH_' . html_encode($key) . '\" name=\"SEARCH_' . html_encode($key) . '\" type=\"checkbox\"';\n\t\t\t\t\t\t\t\t\tif (in_array($key, $query_fields)) {\n\t\t\t\t\t\t\t\t\t\techo ' checked=\"checked\" ';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\techo ' value=\"' . html_encode($key) . '\"  /> ' . html_encode($display) . \"</label></li>\" . \"\\n\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t</div>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</div>\n\t\t</form>\n\t</div><!-- end of search form -->\n\t<?php\n}\n\n/**\n * Returns the a sanitized version of the search string\n *\n * @return string\n * @since 1.1\n */\nfunction getSearchWords() {\n\tglobal $_zp_current_search;\n\tif (!in_context(ZP_SEARCH))\n\t\treturn '';\n\treturn stripcslashes($_zp_current_search->codifySearchString());\n}\n\n/**\n * Returns the date of the search\n *\n * @param string $format formatting of the date, default 'F Y'\n * @return string\n * @since 1.1\n */\nfunction getSearchDate($format = '%B %Y') {\n\tif (in_context(ZP_SEARCH)) {\n\t\tglobal $_zp_current_search;\n\t\t$date = $_zp_current_search->getSearchDate();\n\t\tif (empty($date)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif ($date == '0000-00') {\n\t\t\treturn gettext(\"no date\");\n\t\t};\n\t\t$dt = strtotime($date . \"-01\");\n\t\treturn zpFormattedDate($format, $dt);\n\t}\n\treturn false;\n}\n\n/**\n * controls the thumbnail layout of themes.\n *\n * Uses the theme options:\n * \talbums_per_row\n * \talbums_per_page\n * \timages_per_row\n * \timages_per_page\n *\n * Computes a normalized images/albums per page and computes the number of\n * images that will fit on the \"transitional\" page between album thumbs and\n * image thumbs. This function is \"internal\" and is called from the root\n * index.php script before the theme script is loaded.\n */\nfunction setThemeColumns() {\n\tglobal $_zp_current_album, $_firstPageImages, $_oneImagePage;\n\t$_firstPageImages = false;\n\tif (($albumColumns = getOption('albums_per_row')) <= 1)\n\t\t$albumColumns = false;\n\tif (($imageColumns = getOption('images_per_row')) <= 1)\n\t\t$imageColumns = false;\n\t$albcount = max(1, getOption('albums_per_page'));\n\tif (($albumColumns) && (($albcount % $albumColumns) != 0)) {\n\t\tsetOption('albums_per_page', $albcount = ((floor($albcount / $albumColumns) + 1) * $albumColumns), false);\n\t}\n\t$imgcount = max(1, getOption('images_per_page'));\n\tif (($imageColumns) && (($imgcount % $imageColumns) != 0)) {\n\t\tsetOption('images_per_page', $imgcount = ((floor($imgcount / $imageColumns) + 1) * $imageColumns), false);\n\t}\n\tif ((getOption('thumb_transition') && !$_oneImagePage) && in_context(ZP_ALBUM | ZP_SEARCH) && $albumColumns && $imageColumns) {\n\t\t$count = getNumAlbums();\n\t\tif ($count == 0) {\n\t\t\t$_firstPageImages = 0;\n\t\t}\n\t\t$rowssused = ceil(($count % $albcount) / $albumColumns); /* number of album rows unused */\n\t\t$leftover = floor(max(1, getOption('images_per_page')) / $imageColumns) - $rowssused;\n\t\t$_firstPageImages = max(0, $leftover * $imageColumns); /* number of images that fill the leftover rows */\n\t\tif ($_firstPageImages == $imgcount) {\n\t\t\t$_firstPageImages = 0;\n\t\t}\n\t}\n}\n\n//************************************************************************************************\n// album password handling\n//************************************************************************************************\n\n/**\n * returns the auth type of a guest login\n *\n * @param string $hint\n * @param string $show\n * @return string\n */\nfunction checkForGuest(&$hint = NULL, &$show = NULL) {\n\tglobal $_zp_gallery, $_zp_gallery_page, $_zp_current_zenpage_page, $_zp_current_category, $_zp_current_zenpage_news;\n\t$authType = zp_apply_filter('checkForGuest', NULL);\n\tif (!is_null($authType))\n\t\treturn $authType;\n\tif (in_context(ZP_SEARCH)) { // search page\n\t\t$hash = getOption('search_password');\n\t\tif (getOption('search_user') != '')\n\t\t\t$show = true;\n\t\t$hint = get_language_string(getOption('search_hint'));\n\t\t$authType = 'zp_search_auth';\n\t\tif (empty($hash)) {\n\t\t\t$hash = $_zp_gallery->getPassword();\n\t\t\tif ($_zp_gallery->getUser() != '')\n\t\t\t\t$show = true;\n\t\t\t$hint = $_zp_gallery->getPasswordHint();\n\t\t\t$authType = 'zp_gallery_auth';\n\t\t}\n\t\tif (!empty($hash) && zp_getCookie($authType) == $hash) {\n\t\t\treturn $authType;\n\t\t}\n\t} else if (!is_null($_zp_current_zenpage_news)) {\n\t\t$authType = $_zp_current_zenpage_news->checkAccess($hint, $show);\n\t\treturn $authType;\n\t} else if (isset($_GET['album'])) { // album page\n\t\tlist($album, $image) = rewrite_get_album_image('album', 'image');\n\t\tif ($authType = checkAlbumPassword($album, $hint)) {\n\t\t\treturn $authType;\n\t\t} else {\n\t\t\t$alb = newAlbum($album);\n\t\t\tif ($alb->getUser() != '')\n\t\t\t\t$show = true;\n\t\t\treturn false;\n\t\t}\n\t} else { // other page\n\t\t$hash = $_zp_gallery->getPassword();\n\t\tif ($_zp_gallery->getUser() != '')\n\t\t\t$show = true;\n\t\t$hint = $_zp_gallery->getPasswordHint();\n\t\tif (!empty($hash) && zp_getCookie('zp_gallery_auth') == $hash) {\n\t\t\treturn 'zp_gallery_auth';\n\t\t}\n\t}\n\tif (empty($hash))\n\t\treturn 'zp_public_access';\n\treturn false;\n}\n\n/**\n * Checks to see if a password is needed\n *\n * Returns true if access is allowed\n *\n * The password protection is hereditary. This normally only impacts direct url access to an object since if\n * you are going down the tree you will be stopped at the first place a password is required.\n *\n *\n * @param string $hint the password hint\n * @param bool $show whether there is a user associated with the password.\n * @return bool\n * @since 1.1.3\n */\nfunction checkAccess(&$hint = NULL, &$show = NULL) {\n\tglobal $_zp_current_album, $_zp_current_search, $_zp_gallery, $_zp_gallery_page,\n\t$_zp_current_zenpage_page, $_zp_current_zenpage_news;\n\tif (GALLERY_SECURITY != 'public') // only registered users allowed\n\t\t$show = true; //\ttherefore they will need to supply their user id is something fails below\n\n\tif ($_zp_gallery->isUnprotectedPage(stripSuffix($_zp_gallery_page)))\n\t\treturn true;\n\tif (zp_loggedin()) {\n\t\t$fail = zp_apply_filter('isMyItemToView', NULL);\n\t\tif (!is_null($fail)) { //\tfilter had something to say about access, honor it\n\t\t\treturn $fail;\n\t\t}\n\t\tswitch ($_zp_gallery_page) {\n\t\t\tcase 'album.php':\n\t\t\tcase 'image.php':\n\t\t\t\tif ($_zp_current_album->isMyItem(LIST_RIGHTS)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'search.php':\n\t\t\t\tif (zp_loggedin(VIEW_SEARCH_RIGHTS)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (zp_loggedin(VIEW_GALLERY_RIGHTS)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tif (GALLERY_SECURITY == 'public' && ($access = checkForGuest($hint, $show))) {\n\t\treturn $access; // public page or a guest is logged in\n\t}\n\treturn false;\n}\n\n/**\n * Returns a redirection link for the password form\n *\n * @return string\n */\nfunction getPageRedirect() {\n  global $_zp_login_error, $_zp_password_form_printed, $_zp_current_search, $_zp_gallery_page,\n  $_zp_current_album, $_zp_current_image, $_zp_current_zenpage_news;\n\tif($_zp_login_error !== 2) {\n\t\treturn false;\n\t}\n  switch ($_zp_gallery_page) {\n    case 'index.php':\n      $action = '/index.php';\n      break;\n    case 'album.php':\n      $action = '/index.php?userlog=1&album=' . pathurlencode($_zp_current_album->name);\n      break;\n    case 'image.php':\n      $action = '/index.php?userlog=1&album=' . pathurlencode($_zp_current_album->name) . '&image=' . urlencode($_zp_current_image->filename);\n      break;\n    case 'pages.php':\n      $action = '/index.php?userlog=1&p=pages&title=' . urlencode(getPageTitlelink());\n      break;\n    case 'news.php':\n      $action = '/index.php?userlog=1&p=news';\n      if (!is_null($_zp_current_zenpage_news)) {\n        $action .= '&title=' . urlencode($_zp_current_zenpage_news->getTitlelink());\n      }\n      break;\n    case 'password.php':\n      $action = str_replace(SEO_WEBPATH, '', getRequestURI());\n      if ($action == '/' . _PAGE_ . '/password' || $action == '/index.php?p=password') {\n        $action = '/index.php';\n      }\n      break;\n    default:\n      if (in_context(ZP_SEARCH)) {\n        $action = '/index.php?userlog=1&p=search' . $_zp_current_search->getSearchParams();\n      } else {\n        $action = '/index.php?userlog=1&p=' . substr($_zp_gallery_page, 0, -4);\n      }\n  }\n  return SEO_WEBPATH . $action;\n}\n\n/**\n * Prints the album password form\n *\n * @param string $hint hint to the password\n * @param bool $showProtected set false to supress the password protected message\n * @param bool $showuser set true to force the user name filed to be present\n * @param string $redirect optional URL to send the user to after successful login\n *\n * @since 1.1.3\n */\nfunction printPasswordForm($_password_hint, $_password_showuser = NULL, $_password_showProtected = true, $_password_redirect = NULL) {\n\tglobal $_zp_login_error, $_zp_password_form_printed, $_zp_current_search, $_zp_gallery, $_zp_gallery_page,\n\t$_zp_current_album, $_zp_current_image, $theme, $_zp_current_zenpage_page, $_zp_authority;\n\tif ($_zp_password_form_printed)\n\t\treturn;\n\t$_zp_password_form_printed = true;\n\n\tif (is_null($_password_redirect))\n\t\t$_password_redirect = getPageRedirect();\n\n\tif (is_null($_password_showuser))\n\t\t$_password_showuser = $_zp_gallery->getUserLogonField();\n\t?>\n\t<div id=\"passwordform\">\n\t\t<?php\n\t\tif ($_password_showProtected && !$_zp_login_error) {\n\t\t\t?>\n\t\t\t<p>\n\t\t\t\t<?php echo gettext(\"The page you are trying to view is password protected.\"); ?>\n\t\t\t</p>\n\t\t\t<?php\n\t\t}\n\t\tif ($loginlink = zp_apply_filter('login_link', NULL)) {\n\t\t\t$logintext = gettext('login');\n\t\t\t?>\n\t\t\t<a href=\"<?php echo $loginlink; ?>\" title=\"<?php echo $logintext; ?>\"><?php echo $logintext; ?></a>\n\t\t\t<?php\n\t\t} else {\n\t\t\t$_zp_authority->printLoginForm($_password_redirect, false, $_password_showuser, false, $_password_hint);\n\t\t}\n\t\t?>\n\t</div>\n\t<?php\n}\n\n/**\n * prints the zenphoto logo and link\n *\n */\nfunction printZenphotoLink() {\n\techo gettext(\"Powered by <a href=\\\"http://www.zenphoto.org\\\" title=\\\"The simpler media website CMS\\\">Zenphoto</a>\");\n}\n\n/**\n * Expose some informations in a HTML comment\n *\n * @param string $obj the path to the page being loaded\n * @param array $plugins list of activated plugins\n * @param string $theme The theme being used\n */\nfunction exposeZenPhotoInformations($obj = '', $plugins = '', $theme = '') {\n\tglobal $_zp_filters;\n\t$a = basename($obj);\n\tif ($a != 'full-image.php') {\n\t\techo \"\\n<!-- zenphoto version \" . ZENPHOTO_VERSION;\n\t\tif (TEST_RELEASE) {\n\t\t\techo \" THEME: \" . $theme . \" (\" . $a . \")\";\n\t\t\t$graphics = zp_graphicsLibInfo();\n\t\t\t$graphics = sanitize(str_replace('<br />', ', ', $graphics['Library_desc']), 3);\n\t\t\techo \" GRAPHICS LIB: \" . $graphics . \" { memory: \" . INI_GET('memory_limit') . \" }\";\n\t\t\techo ' PLUGINS: ';\n\t\t\tif (count($plugins) > 0) {\n\t\t\t\tsort($plugins);\n\t\t\t\tforeach ($plugins as $plugin) {\n\t\t\t\t\techo $plugin . ' ';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\techo 'none ';\n\t\t\t}\n\t\t}\n\t\techo \" -->\";\n\t}\n}\n\n/**\n * Gets the content of a codeblock for an image, album or Zenpage newsarticle or page.\n *\n * The priority for codeblocks will be (based on context)\n * \t1: articles\n * \t2: pages\n * \t3: images\n * \t4: albums\n * \t5: gallery.\n *\n * This means, for instance, if we are in ZP_ZENPAGE_NEWS_ARTICLE context we will use the news article\n * codeblock even if others are available.\n *\n * Note: Echoing this array's content does not execute it. Also no special chars will be escaped.\n * Use printCodeblock() if you need to execute script code.\n *\n * @param int $number The codeblock you want to get\n * @param mixed $what optonal object for which you want the codeblock\n *\n * @return string\n */\nfunction getCodeblock($number = 1, $object = NULL) {\n\tglobal $_zp_current_album, $_zp_current_image, $_zp_current_zenpage_news, $_zp_current_zenpage_page, $_zp_gallery, $_zp_gallery_page;\n\tif (!$number) {\n\t\tsetOptionDefault('codeblock_first_tab', 0);\n\t}\n\tif (!is_object($object)) {\n\t\tif ($_zp_gallery_page == 'index.php') {\n\t\t\t$object = $_zp_gallery;\n\t\t}\n\t\tif (in_context(ZP_ALBUM)) {\n\t\t\t$object = $_zp_current_album;\n\t\t}\n\t\tif (in_context(ZP_IMAGE)) {\n\t\t\t$object = $_zp_current_image;\n\t\t}\n\t\tif (in_context(ZP_ZENPAGE_PAGE)) {\n\t\t\tif ($_zp_current_zenpage_page->checkAccess()) {\n\t\t\t\t$object = $_zp_current_zenpage_page;\n\t\t\t}\n\t\t}\n\t\tif (in_context(ZP_ZENPAGE_NEWS_ARTICLE)) {\n\t\t\tif ($_zp_current_zenpage_news->checkAccess()) {\n\t\t\t\t$object = $_zp_current_zenpage_news;\n\t\t\t}\n\t\t}\n\t}\n\tif (!is_object($object)) {\n\t\treturn NULL;\n\t}\n\t$codeblock = getSerializedArray($object->getcodeblock());\n\t$codeblock = zp_apply_filter('codeblock', @$codeblock[$number], $object, $number);\n\tif ($codeblock) {\n\t\t$codeblock = applyMacros($codeblock);\n\t}\n\treturn $codeblock;\n}\n\n/**\n * Prints the content of a codeblock for an image, album or Zenpage newsarticle or page.\n *\n * @param int $number The codeblock you want to get\n * @param mixed $what optonal object for which you want the codeblock\n *\n * @return string\n */\nfunction printCodeblock($number = 1, $what = NULL) {\n\t$codeblock = getCodeblock($number, $what);\n\tif ($codeblock) {\n\t\t$context = get_context();\n\t\teval('?>' . $codeblock);\n\t\tset_context($context);\n\t}\n}\n\n/**\n * Checks for URL page out-of-bounds for \"standard\" themes\n * Note: This function assumes that an \"index\" page will display albums\n * and the pagination be determined by them. Any other \"index\" page strategy needs to be\n * handled by the theme itself.\n *\n * @param boolean $request\n * @param string $gallery_page\n * @param int $page\n * @return boolean will be true if all is well, false if a 404 error should occur\n */\nfunction checkPageValidity($request, $gallery_page, $page) {\n\tglobal $_zp_gallery, $_firstPageImages, $_oneImagePage, $_zp_zenpage, $_zp_current_category;\n\t$count = NULL;\n\tswitch ($gallery_page) {\n\t\tcase 'album.php':\n\t\tcase 'search.php':\n\t\t\t$albums_per_page = max(1, getOption('albums_per_page'));\n\t\t\t$pageCount = (int) ceil(getNumAlbums() / $albums_per_page);\n\t\t\t$imageCount = getNumImages();\n\t\t\tif ($_oneImagePage) {\n\t\t\t\tif ($_oneImagePage === true) {\n\t\t\t\t\t$imageCount = min(1, $imageCount);\n\t\t\t\t} else {\n\t\t\t\t\t$imageCount = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$images_per_page = max(1, getOption('images_per_page'));\n\t\t\t$count = ($pageCount + (int) ceil(($imageCount - $_firstPageImages) / $images_per_page));\n\t\t\tbreak;\n\t\tcase 'index.php':\n\t\t\tif (galleryAlbumsPerPage() != 0) {\n\t\t\t\t$count = (int) ceil($_zp_gallery->getNumAlbums() / galleryAlbumsPerPage());\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'news.php':\n\t\t\tif (in_context(ZP_ZENPAGE_NEWS_CATEGORY)) {\n\t\t\t\t$count = count($_zp_current_category->getArticles());\n\t\t\t} else {\n\t\t\t\t$count = count($_zp_zenpage->getArticles());\n\t\t\t}\n\t\t\t$count = (int) ceil($count / ZP_ARTICLES_PER_PAGE);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$count = zp_apply_filter('checkPageValidity', NULL, $gallery_page, $page);\n\t\t\tbreak;\n\t}\n\tif ($page > $count) {\n\t\t$request = false; //\tpage is out of range\n\t}\n\n\treturn $request;\n}\n\nfunction print404status($album, $image, $obj) {\n\tglobal $_zp_page;\n\techo \"\\n<strong>\" . gettext(\"Zenphoto Error:</strong> the requested object was not found.\");\n\tif (isset($album)) {\n\t\techo '<br />' . sprintf(gettext('Album: %s'), html_encode($album));\n\n\t\tif (isset($image)) {\n\t\t\techo '<br />' . sprintf(gettext('Image: %s'), html_encode($image));\n\t\t}\n\t} else {\n\t\techo '<br />' . sprintf(gettext('Page: %s'), html_encode(substr(basename($obj), 0, -4)));\n\t}\n\tif (isset($_zp_page) && $_zp_page > 1) {\n\t\techo '/' . $_zp_page;\n\t}\n}\n\nrequire_once(SERVERPATH . '/' . ZENFOLDER . '/template-filters.php');\n?>\n"], "filenames": ["zp-core/template-functions.php"], "buggy_code_start_loc": [4138], "buggy_code_end_loc": [4139], "fixing_code_start_loc": [4138], "fixing_code_end_loc": [4139], "type": "CWE-79", "message": "Zenphoto 1.4.14 has multiple cross-site scripting (XSS) vulnerabilities via different URL parameters.", "other": {"cve": {"id": "CVE-2018-20140", "sourceIdentifier": "cve@mitre.org", "published": "2019-03-21T16:00:34.107", "lastModified": "2019-03-21T19:18:16.550", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Zenphoto 1.4.14 has multiple cross-site scripting (XSS) vulnerabilities via different URL parameters."}, {"lang": "es", "value": "Zenphoto 1.4.14 tiene m\u00faltiples vulnerabilidades Cross-Site Scripting (XSS) mediante diferentes par\u00e1metros de la URL."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zenphoto:zenphoto:1.4.14:*:*:*:*:*:*:*", "matchCriteriaId": "4D99E13A-4522-4E0B-A272-AD68B739DCCD"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/151052/ZenPhoto-1.4.14-Cross-Site-Scripting.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://seclists.org/fulldisclosure/2019/Jan/22", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/zenphoto/zenphoto/commit/695fb61707e4286b64f6e446c189b449bd07d00a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/zenphoto/zenphoto/commit/9db85fcf9cc97887b81f34f03dcb180fd74e57da", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.netsparker.com/web-applications-advisories/ns-18-043-cross-site-scripting-in-zenphoto/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/zenphoto/zenphoto/commit/695fb61707e4286b64f6e446c189b449bd07d00a"}}