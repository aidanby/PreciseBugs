{"buggy_code": ["<?php\n/**\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\HudsonGit;\n\nuse GitRepository;\nuse Tuleap\\Git\\Webhook\\ExternalWebhookPresenter;\nuse Tuleap\\HudsonGit\\Git\\Administration\\JenkinsServerFactory;\nuse Tuleap\\HudsonGit\\Hook\\HookDao;\nuse Tuleap\\HudsonGit\\Hook\\ModalsPresenter;\nuse Tuleap\\Git\\Webhook\\SectionOfWebhooksPresenter;\nuse CSRFSynchronizerToken;\nuse TemplateRendererFactory;\nuse Tuleap\\HudsonGit\\Log\\LogFactory;\n\n/**\n * I am responsible of adding the possibility to repo admin to define jenkins hook for a git repository and\n * display relevant information\n */\nclass GitWebhooksSettingsEnhancer\n{\n    /**\n     * @var LogFactory\n     */\n    private $log_factory;\n\n    /**\n     * @var HookDao\n     */\n    private $dao;\n\n    /**\n     * @var CSRFSynchronizerToken\n     */\n    private $csrf;\n\n    /**\n     * @var JenkinsServerFactory\n     */\n    private $jenkins_server_factory;\n\n    public function __construct(\n        HookDao $dao,\n        LogFactory $log_factory,\n        CSRFSynchronizerToken $csrf,\n        JenkinsServerFactory $jenkins_server_factory,\n    ) {\n        $this->dao                    = $dao;\n        $this->csrf                   = $csrf;\n        $this->log_factory            = $log_factory;\n        $this->jenkins_server_factory = $jenkins_server_factory;\n    }\n\n    public function pimp(array $params): void\n    {\n        $repository = $params['repository'];\n        assert($repository instanceof GitRepository);\n\n        $params['description'] = dgettext('tuleap-hudson_git', 'You can define one Jenkins webhook and several generic webhooks.');\n\n        $project                   = $repository->getProject();\n        $jenkins_servers           = $this->jenkins_server_factory->getJenkinsServerOfProject($project);\n        $nb_project_jenkins_server = count($jenkins_servers);\n        if ($nb_project_jenkins_server > 0) {\n            $params['additional_description'] = dngettext(\n                'tuleap-hudson_git',\n                'A Jenkins server has been defined globally for the project and will be triggered after git pushes.',\n                'Some Jenkins servers have been defined globally for the project and will be triggered after git pushes.',\n                $nb_project_jenkins_server\n            );\n\n            $external_webhook_presenters = [];\n            foreach ($jenkins_servers as $jenkins_server) {\n                $external_webhook_presenters[] = new ExternalWebhookPresenter(\n                    $jenkins_server->getServerURL()\n                );\n            }\n            $params['sections'][] = new SectionOfWebhooksPresenter(\n                dgettext(\"tuleap-git\", \"Project Jenkins servers\"),\n                $external_webhook_presenters\n            );\n        }\n\n        $url                        = '';\n        $is_commit_reference_needed = true;\n        $row                        = $this->dao->searchById($repository->getId());\n        $has_already_a_jenkins      = $row !== null;\n        $params['create_buttons'][] = new GitWebhooksSettingsCreateJenkinsButtonPresenter($has_already_a_jenkins);\n\n        if ($row !== null) {\n            $url                        = $row['jenkins_server_url'];\n            $is_commit_reference_needed = $row['is_commit_reference_needed'] === 1;\n\n            $triggered_jobs = $this->log_factory->getJobByRepository($repository);\n\n            $params['sections'][] = new SectionOfWebhooksPresenter(\n                dgettext('tuleap-hudson_git', 'Jenkins hook'),\n                [\n                    new JenkinsWebhookPresenter(\n                        $repository,\n                        $url,\n                        $triggered_jobs,\n                        $this->csrf\n                    ),\n                ]\n            );\n        }\n\n        $renderer                         = TemplateRendererFactory::build()->getRenderer(HUDSON_GIT_BASE_DIR . '/templates');\n        $params['additional_html_bits'][] = $renderer->renderToString(\n            'modals',\n            new ModalsPresenter($repository, $url, $is_commit_reference_needed, $this->csrf)\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\HudsonGit;\n\nuse Tuleap\\Git\\Webhook\\GenericWebhookPresenter;\nuse Tuleap\\Git\\Webhook\\WebhookLogPresenter;\nuse Codendi_HTMLPurifier;\nuse GitRepository;\nuse CSRFSynchronizerToken;\nuse Tuleap\\HudsonGit\\Log\\Log;\n\nclass JenkinsWebhookPresenter extends GenericWebhookPresenter\n{\n    public function __construct(GitRepository $repository, $url, array $hooklogs, CSRFSynchronizerToken $csrf)\n    {\n        $use_default_edit_modal = false;\n        parent::__construct($repository, 'jenkins', $url, [], $csrf, $use_default_edit_modal);\n\n        $this->remove_form_action = '/plugins/hudson_git/?group_id=' . (int) $repository->getProjectId();\n\n        $this->remove_webhook_desc   = dgettext('tuleap-hudson_git', 'You are about to remove the Jenkins server. Please confirm your action.');\n        $this->modal_logs_time_label = dgettext('tuleap-hudson_git', 'Push date');\n        $this->modal_logs_info_label = dgettext('tuleap-hudson_git', 'Logs');\n        $this->empty_logs            = dgettext('tuleap-hudson_git', 'No triggered jobs');\n\n        $this->purified_last_push_info = '<span class=\"text-info\">' . sprintf(dgettext('tuleap-hudson_git', '%1$s jobs triggered'), $this->countNumberOfPollingJobsTriggeredOnLastPush($hooklogs)) . '</span>';\n\n        $this->generateHooklogs($hooklogs);\n    }\n\n    /**\n     * @param Log[] $hooklogs\n     */\n    private function generateHooklogs(array $hooklogs): void\n    {\n        $hp = Codendi_HTMLPurifier::instance();\n        foreach ($hooklogs as $log) {\n            $purified_information = '';\n            $job_list             = $log->getJobUrlList();\n            if (count($job_list) > 0) {\n                $purified_information .= '<div class=\"hook-log-triggered-jobs\">';\n                $purified_information .= '<h4>' . dgettext(\"tuleap-hudson_git\", \"Git plugin triggered jobs:\") . '</h4>';\n                foreach ($job_list as $triggered_job_url) {\n                    $purfied_job_url       = $hp->purify($triggered_job_url);\n                    $purified_information .= '<a href=\"' . $purfied_job_url . '\">' . $purfied_job_url . '</a><br>';\n                }\n                $purified_information .= '</div>';\n            }\n\n            if ($log->getStatusCode() !== null) {\n                $purified_information .= '<div class=\"hook-log-branch-source-status\">';\n                $purified_information .= '<h4>' . dgettext(\"tuleap-hudson_git\", \"Branch source plugin:\") . '</h4>';\n                $purified_information .= $log->getStatusCode();\n                $purified_information .= '</div>';\n            }\n\n            $this->hooklogs[] = new WebhookLogPresenter($log->getFormattedPushDate(), $purified_information);\n        }\n    }\n\n    /**\n     * @param Log[] $hooklogs\n     */\n    private function countNumberOfPollingJobsTriggeredOnLastPush(array $hooklogs): int\n    {\n        if (count($hooklogs) > 0) {\n            return count($hooklogs[0]->getJobUrlList());\n        }\n\n        return 0;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2016-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nrequire_once __DIR__ . '/../../hudson/include/hudsonPlugin.php';\nrequire_once __DIR__ . '/../../git/include/gitPlugin.php';\nrequire_once __DIR__ . '/../vendor/autoload.php';\nrequire_once __DIR__ . '/constants.php';\n\nuse FastRoute\\RouteCollector;\nuse Http\\Client\\Common\\Plugin\\CookiePlugin;\nuse Http\\Message\\CookieJar;\nuse Tuleap\\Authentication\\SplitToken\\PrefixedSplitTokenSerializer;\nuse Tuleap\\Authentication\\SplitToken\\SplitTokenVerificationStringHasher;\nuse Tuleap\\DB\\DBFactory;\nuse Tuleap\\DB\\DBTransactionExecutorWithConnection;\nuse Tuleap\\Git\\CollectGitRoutesEvent;\nuse Tuleap\\Git\\Events\\ExternalGitHomepagePluginInfos;\nuse Tuleap\\Git\\Events\\GetExternalGitHomepagePluginsEvent;\nuse Tuleap\\Git\\Events\\GitAdminGetExternalPanePresenters;\nuse Tuleap\\Git\\Events\\XMLExportExternalContentEvent;\nuse Tuleap\\Git\\Events\\XMLImportExternalContentEvent;\nuse Tuleap\\Git\\GitViews\\RepoManagement\\Pane\\Hooks;\nuse Tuleap\\Git\\Hook\\PostReceiveExecuteEvent;\nuse Tuleap\\Git\\Permissions\\FineGrainedDao;\nuse Tuleap\\Git\\Permissions\\FineGrainedRetriever;\nuse Tuleap\\Http\\HttpClientFactory;\nuse Tuleap\\Http\\HTTPFactoryBuilder;\nuse Tuleap\\Http\\Server\\DisableCacheMiddleware;\nuse Tuleap\\HudsonGit\\Git\\Administration\\AddController;\nuse Tuleap\\HudsonGit\\Git\\Administration\\AdministrationController;\nuse Tuleap\\HudsonGit\\Git\\Administration\\AdministrationPaneBuilder;\nuse Tuleap\\HudsonGit\\Git\\Administration\\AjaxController;\nuse Tuleap\\HudsonGit\\Git\\Administration\\DeleteController;\nuse Tuleap\\HudsonGit\\Git\\Administration\\JenkinsServerAdder;\nuse Tuleap\\HudsonGit\\Git\\Administration\\JenkinsServerDao;\nuse Tuleap\\HudsonGit\\Git\\Administration\\JenkinsServerDeleter;\nuse Tuleap\\HudsonGit\\Git\\Administration\\JenkinsServerFactory;\nuse Tuleap\\HudsonGit\\Git\\Administration\\URLBuilder;\nuse Tuleap\\HudsonGit\\Git\\Administration\\XML\\XMLExporter;\nuse Tuleap\\HudsonGit\\Git\\Administration\\XML\\XMLImporter;\nuse Tuleap\\HudsonGit\\GitWebhooksSettingsEnhancer;\nuse Tuleap\\HudsonGit\\Hook;\nuse Tuleap\\HudsonGit\\Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookPayload;\nuse Tuleap\\HudsonGit\\Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookPrefixToken;\nuse Tuleap\\HudsonGit\\Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookTokenGeneratorDBStore;\nuse Tuleap\\HudsonGit\\Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookTokenVerifierController;\nuse Tuleap\\HudsonGit\\HudsonGitPluginDefaultController;\nuse Tuleap\\HudsonGit\\Job\\JobDao;\nuse Tuleap\\HudsonGit\\Job\\ProjectJobDao;\nuse Tuleap\\HudsonGit\\Log\\LogCreator;\nuse Tuleap\\HudsonGit\\Log\\LogFactory;\nuse Tuleap\\HudsonGit\\Plugin\\PluginInfo;\nuse Tuleap\\HudsonGit\\REST\\ResourcesInjector;\nuse Tuleap\\Jenkins\\JenkinsCSRFCrumbRetriever;\nuse Tuleap\\Layout\\IncludeAssets;\nuse Tuleap\\Request\\CollectRoutesEvent;\n\n//phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass hudson_gitPlugin extends Plugin\n{\n    public const DISPLAY_HUDSON_ADDITION_INFO = 'display_hudson_addition_info';\n\n    public function __construct($id)\n    {\n        parent::__construct($id);\n        $this->setScope(self::SCOPE_PROJECT);\n\n        bindtextdomain('tuleap-hudson_git', __DIR__ . '/../site-content');\n\n        $this->addHook(CollectRoutesEvent::NAME);\n        $this->addHook('cssfile', 'cssFile');\n\n        if (defined('GIT_BASE_URL')) {\n            $this->addHook(Hooks::ADDITIONAL_WEBHOOKS);\n            $this->addHook(PostReceiveExecuteEvent::NAME);\n            $this->addHook(self::DISPLAY_HUDSON_ADDITION_INFO);\n            $this->addHook(GitAdminGetExternalPanePresenters::NAME);\n            $this->addHook(CollectGitRoutesEvent::NAME);\n            $this->addHook(XMLImportExternalContentEvent::NAME);\n            $this->addHook(XMLExportExternalContentEvent::NAME);\n            $this->addHook(Event::REST_RESOURCES);\n            $this->addHook(GetExternalGitHomepagePluginsEvent::NAME);\n        }\n    }\n\n    public function cssFile($params)\n    {\n        $git_plugin = PluginManager::instance()->getPluginByName('git');\n        if (! $git_plugin instanceof GitPlugin) {\n            throw new RuntimeException('Cannot instantiate Git plugin');\n        }\n\n        if (\n            strpos($_SERVER['REQUEST_URI'], '/administration/jenkins') !== false\n            && strpos($_SERVER['REQUEST_URI'], $git_plugin->getPluginPath()) === 0\n        ) {\n            echo '<link rel=\"stylesheet\" type=\"text/css\" href=\"' . $this->getIncludeAssets()->getFileURL('style.css') . '\" />';\n            echo '<link rel=\"stylesheet\" type=\"text/css\" href=\"' . $git_plugin->getLegacyAssets()->getFileURL('default.css') . '\" />';\n        }\n    }\n\n    /**\n     * @access protected for test purpose\n     */\n    protected function getIncludeAssets(): IncludeAssets\n    {\n        return new IncludeAssets(\n            __DIR__ . '/../frontend-assets',\n            \"/assets/hudson_git\"\n        );\n    }\n\n    public function display_hudson_addition_info($params) //phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps\n    {\n        $params['installed'] = defined('GIT_BASE_URL');\n    }\n\n    /**\n     * @see Plugin::getDependencies()\n     */\n    public function getDependencies()\n    {\n        return ['git', 'hudson'];\n    }\n\n    /**\n     * @return PluginInfo\n     */\n    public function getPluginInfo()\n    {\n        if (! $this->pluginInfo) {\n            $this->pluginInfo = new PluginInfo($this);\n        }\n        return $this->pluginInfo;\n    }\n\n    /** @see Tuleap\\Git\\GitViews\\RepoManagement\\Pane\\Hooks::ADDITIONAL_WEBHOOKS */\n    public function plugin_git_settings_additional_webhooks(array $params) //phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps\n    {\n        if ($this->isAllowed($params['repository']->getProjectId())) {\n            $xzibit = new GitWebhooksSettingsEnhancer(\n                new Hook\\HookDao(),\n                new LogFactory(\n                    new JobDao(),\n                    new ProjectJobDao(),\n                    new GitRepositoryFactory(\n                        new GitDao(),\n                        ProjectManager::instance()\n                    )\n                ),\n                $this->getCSRF(),\n                self::getJenkinsServerFactory()\n            );\n            $xzibit->pimp($params);\n        }\n    }\n\n    public function collectRoutesEvent(CollectRoutesEvent $event): void\n    {\n        $event->getRouteCollector()->addGroup($this->getPluginPath(), function (RouteCollector $r) {\n            $r->addRoute(['GET', 'POST'], '[/[index.php]]', $this->getRouteHandler('routeGetPostLegacyController'));\n\n            $r->post('/jenkins_server', $this->getRouteHandler('getPostGitAdministrationJenkinsServer'));\n            $r->post('/jenkins_server/delete', $this->getRouteHandler('getDeleteGitAdministrationJenkinsServer'));\n            $r->post('/test_jenkins_server', $this->getRouteHandler('getAjaxAdministrationTestJenkinsServer'));\n            $r->post('/jenkins_tuleap_hook_trigger_check', $this->getRouteHandler('routePostVerifyHookTrigger'));\n        });\n    }\n\n    public static function getAjaxAdministrationTestJenkinsServer(): AjaxController\n    {\n        return new AjaxController(\n            HttpClientFactory::createClient(new CookiePlugin(new CookieJar())),\n            HTTPFactoryBuilder::requestFactory(),\n            new WrapperLogger(self::getHudsonGitLogger(), 'hudson_git')\n        );\n    }\n\n    public static function getDeleteGitAdministrationJenkinsServer(): DeleteController\n    {\n        return new DeleteController(\n            self::getGitPermissionsManager(),\n            self::getJenkinsServerFactory(),\n            new JenkinsServerDeleter(\n                new JenkinsServerDao(),\n                new ProjectJobDao(),\n                new DBTransactionExecutorWithConnection(\n                    DBFactory::getMainTuleapDBConnection()\n                )\n            ),\n            new CSRFSynchronizerToken(URLBuilder::buildDeleteUrl())\n        );\n    }\n\n    public static function getPostGitAdministrationJenkinsServer(): AddController\n    {\n        return new AddController(\n            ProjectManager::instance(),\n            self::getGitPermissionsManager(),\n            new JenkinsServerAdder(\n                new JenkinsServerDao(),\n                new Valid_HTTPURI(),\n                (new \\Tuleap\\Cryptography\\KeyFactory())->getEncryptionKey()\n            ),\n            new CSRFSynchronizerToken(URLBuilder::buildAddUrl())\n        );\n    }\n\n    public function collectGitRoutesEvent(CollectGitRoutesEvent $event)\n    {\n        $event->getRouteCollector()->get(\n            '/{project_name}/administration/jenkins',\n            $this->getRouteHandler('routeGetGitJenkinsAdministration')\n        );\n    }\n\n    public function routeGetGitJenkinsAdministration(): AdministrationController\n    {\n        $git_plugin = PluginManager::instance()->getPluginByName('git');\n        assert($git_plugin instanceof GitPlugin);\n\n        return new AdministrationController(\n            ProjectManager::instance(),\n            self::getGitPermissionsManager(),\n            self::getJenkinsServerFactory(),\n            new LogFactory(\n                new JobDao(),\n                new ProjectJobDao(),\n                new GitRepositoryFactory(\n                    new GitDao(),\n                    ProjectManager::instance()\n                )\n            ),\n            $git_plugin->getHeaderRenderer(),\n            TemplateRendererFactory::build()->getRenderer(HUDSON_GIT_BASE_DIR . '/templates/git-administration'),\n            $this->getIncludeAssets(),\n            EventManager::instance()\n        );\n    }\n\n    public function routePostVerifyHookTrigger(): JenkinsTuleapPluginHookTokenVerifierController\n    {\n        return new JenkinsTuleapPluginHookTokenVerifierController(\n            HTTPFactoryBuilder::responseFactory(),\n            new Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookTokenVerifierDBStore(\n                new Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookTokenDAO(),\n                new DBTransactionExecutorWithConnection(DBFactory::getMainTuleapDBConnection()),\n                new PrefixedSplitTokenSerializer(new JenkinsTuleapPluginHookPrefixToken()),\n                new SplitTokenVerificationStringHasher(),\n                self::getHudsonGitLogger(),\n            ),\n            new \\Laminas\\HttpHandlerRunner\\Emitter\\SapiEmitter(),\n            new DisableCacheMiddleware()\n        );\n    }\n\n    private static function getGitPermissionsManager(): GitPermissionsManager\n    {\n        $git_system_event_manager = new Git_SystemEventManager(\n            SystemEventManager::instance(),\n        );\n\n        $fine_grained_dao       = new FineGrainedDao();\n        $fine_grained_retriever = new FineGrainedRetriever($fine_grained_dao);\n\n        return new GitPermissionsManager(\n            new Git_PermissionsDao(),\n            $git_system_event_manager,\n            $fine_grained_dao,\n            $fine_grained_retriever\n        );\n    }\n\n    public function routeGetPostLegacyController()\n    {\n        $request    = HTTPRequest::instance();\n        $project_id = (int) $request->getProject()->getID();\n\n        return new HudsonGitPluginDefaultController(\n            $this->getHookController($request),\n            $this->isAllowed($project_id)\n        );\n    }\n\n    public function postReceiveExecuteEvent(PostReceiveExecuteEvent $event): void\n    {\n        $repository = $event->getRepository();\n        if ($this->isAllowed($repository->getProjectId())) {\n            $http_client     = HttpClientFactory::createClient(new CookiePlugin(new CookieJar()));\n            $request_factory = HTTPFactoryBuilder::requestFactory();\n            $stream_factory  = HTTPFactoryBuilder::streamFactory();\n            $encryption_key  = (new \\Tuleap\\Cryptography\\KeyFactory())->getEncryptionKey();\n            $controller      = new Hook\\HookTriggerController(\n                new Hook\\HookDao(),\n                new Hook\\JenkinsClient(\n                    $http_client,\n                    $request_factory,\n                    new JenkinsCSRFCrumbRetriever($http_client, $request_factory),\n                    new JenkinsTuleapPluginHookPayload(\n                        $repository,\n                        $event->getRefname(),\n                        new JenkinsTuleapPluginHookTokenGeneratorDBStore(\n                            new Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookTokenDAO(),\n                            new SplitTokenVerificationStringHasher(),\n                            new PrefixedSplitTokenSerializer(new JenkinsTuleapPluginHookPrefixToken()),\n                            new DateInterval('PT30S'),\n                        ),\n                        fn (): DateTimeImmutable => new DateTimeImmutable(),\n                    ),\n                    $stream_factory,\n                    $encryption_key,\n                ),\n                $this->getLogger(),\n                new LogCreator(\n                    new JobDao(),\n                    new ProjectJobDao(),\n                    new DBTransactionExecutorWithConnection(\n                        DBFactory::getMainTuleapDBConnection()\n                    )\n                ),\n                self::getJenkinsServerFactory()\n            );\n\n            $controller->trigger(\n                $repository,\n                $event->getNewrev(),\n                new DateTimeImmutable()\n            );\n        }\n    }\n\n    /**\n     * @return Hook\\HookController\n     */\n    private function getHookController(Codendi_Request $request)\n    {\n        return new Hook\\HookController(\n            $request,\n            new GitRepositoryFactory(\n                new GitDao(),\n                ProjectManager::instance()\n            ),\n            new Hook\\HookDao(),\n            $this->getCSRF(),\n            new Valid_HTTPURI(),\n            (new \\Tuleap\\Cryptography\\KeyFactory())->getEncryptionKey()\n        );\n    }\n\n    private function getCSRF()\n    {\n        return new CSRFSynchronizerToken('hudson-git-hook-management');\n    }\n\n    private function getLogger(): \\Psr\\Log\\LoggerInterface\n    {\n        return new WrapperLogger(self::getHudsonGitLogger(), 'hudson_git');\n    }\n\n    private static function getHudsonGitLogger(): \\Psr\\Log\\LoggerInterface\n    {\n        return \\BackendLogger::getDefaultLogger('hudson_git_syslog');\n    }\n\n    public function gitAdminGetExternalPanePresenters(GitAdminGetExternalPanePresenters $event): void\n    {\n        if ($event->getCurrentTabName() === AdministrationPaneBuilder::PANE_NAME) {\n            $event->addExternalPanePresenter(AdministrationPaneBuilder::buildActivePane($event->getProject()));\n            return;\n        }\n\n        $event->addExternalPanePresenter(AdministrationPaneBuilder::buildPane($event->getProject()));\n    }\n\n    private static function getJenkinsServerFactory(): JenkinsServerFactory\n    {\n        return new JenkinsServerFactory(\n            new JenkinsServerDao(),\n            ProjectManager::instance()\n        );\n    }\n\n    public function xmlImportExternalContentEvent(XMLImportExternalContentEvent $event): void\n    {\n        $project = $event->getProject();\n        if (! $this->isAllowed((int) $project->getID())) {\n            return;\n        }\n\n        $xml_importer = new XMLImporter(\n            new JenkinsServerAdder(\n                new JenkinsServerDao(),\n                new Valid_HTTPURI(),\n                (new \\Tuleap\\Cryptography\\KeyFactory())->getEncryptionKey()\n            ),\n            $event->getLogger()\n        );\n\n        $xml_importer->import(\n            $project,\n            $event->getXMLGit()\n        );\n    }\n\n    public function xmlExportExternalContentEvent(XMLExportExternalContentEvent $event): void\n    {\n        $project = $event->getProject();\n        if (! $this->isAllowed((int) $project->getID())) {\n            return;\n        }\n\n        $xml_importer = new XMLExporter(\n            self::getJenkinsServerFactory(),\n            $event->getLogger(),\n            (new \\Tuleap\\Cryptography\\KeyFactory())->getEncryptionKey()\n        );\n\n        $xml_importer->export(\n            $project,\n            $event->getXMLGit()\n        );\n    }\n\n    /** @see Event::REST_RESOURCES */\n    public function restResources(array $params)\n    {\n        $injector = new ResourcesInjector();\n        $injector->populate($params['restler']);\n    }\n\n    public function getExternalGitHomepagePluginsEvent(GetExternalGitHomepagePluginsEvent $event): void\n    {\n        $factory = self::getJenkinsServerFactory();\n        $servers = $factory->getJenkinsServerOfProject($event->getProject());\n\n        $plugin_infos = new ExternalGitHomepagePluginInfos(\"hudson_git\", $servers);\n        $event->addExternalPluginInfos($plugin_infos);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\HudsonGit;\n\nuse Codendi_HTMLPurifier;\nuse GitRepository;\nuse Tuleap\\Git\\Webhook\\ExternalWebhookPresenter;\nuse Tuleap\\HudsonGit\\Git\\Administration\\JenkinsServerFactory;\nuse Tuleap\\HudsonGit\\Hook\\HookDao;\nuse Tuleap\\HudsonGit\\Hook\\ModalsPresenter;\nuse Tuleap\\Git\\Webhook\\SectionOfWebhooksPresenter;\nuse CSRFSynchronizerToken;\nuse TemplateRendererFactory;\nuse Tuleap\\HudsonGit\\Log\\LogFactory;\nuse Tuleap\\Sanitizer\\URISanitizer;\n\n/**\n * I am responsible of adding the possibility to repo admin to define jenkins hook for a git repository and\n * display relevant information\n */\nclass GitWebhooksSettingsEnhancer\n{\n    /**\n     * @var LogFactory\n     */\n    private $log_factory;\n\n    /**\n     * @var HookDao\n     */\n    private $dao;\n\n    /**\n     * @var CSRFSynchronizerToken\n     */\n    private $csrf;\n\n    /**\n     * @var JenkinsServerFactory\n     */\n    private $jenkins_server_factory;\n\n    public function __construct(\n        HookDao $dao,\n        LogFactory $log_factory,\n        CSRFSynchronizerToken $csrf,\n        JenkinsServerFactory $jenkins_server_factory,\n        private readonly Codendi_HTMLPurifier $html_purifier,\n        private readonly URISanitizer $uri_sanitizer,\n    ) {\n        $this->dao                    = $dao;\n        $this->csrf                   = $csrf;\n        $this->log_factory            = $log_factory;\n        $this->jenkins_server_factory = $jenkins_server_factory;\n    }\n\n    public function pimp(array $params): void\n    {\n        $repository = $params['repository'];\n        assert($repository instanceof GitRepository);\n\n        $params['description'] = dgettext('tuleap-hudson_git', 'You can define one Jenkins webhook and several generic webhooks.');\n\n        $project                   = $repository->getProject();\n        $jenkins_servers           = $this->jenkins_server_factory->getJenkinsServerOfProject($project);\n        $nb_project_jenkins_server = count($jenkins_servers);\n        if ($nb_project_jenkins_server > 0) {\n            $params['additional_description'] = dngettext(\n                'tuleap-hudson_git',\n                'A Jenkins server has been defined globally for the project and will be triggered after git pushes.',\n                'Some Jenkins servers have been defined globally for the project and will be triggered after git pushes.',\n                $nb_project_jenkins_server\n            );\n\n            $external_webhook_presenters = [];\n            foreach ($jenkins_servers as $jenkins_server) {\n                $external_webhook_presenters[] = new ExternalWebhookPresenter(\n                    $jenkins_server->getServerURL()\n                );\n            }\n            $params['sections'][] = new SectionOfWebhooksPresenter(\n                dgettext(\"tuleap-git\", \"Project Jenkins servers\"),\n                $external_webhook_presenters\n            );\n        }\n\n        $url                        = '';\n        $is_commit_reference_needed = true;\n        $row                        = $this->dao->searchById($repository->getId());\n        $has_already_a_jenkins      = $row !== null;\n        $params['create_buttons'][] = new GitWebhooksSettingsCreateJenkinsButtonPresenter($has_already_a_jenkins);\n\n        if ($row !== null) {\n            $url                        = $row['jenkins_server_url'];\n            $is_commit_reference_needed = $row['is_commit_reference_needed'] === 1;\n\n            $triggered_jobs = $this->log_factory->getJobByRepository($repository);\n\n            $params['sections'][] = new SectionOfWebhooksPresenter(\n                dgettext('tuleap-hudson_git', 'Jenkins hook'),\n                [\n                    new JenkinsWebhookPresenter(\n                        $repository,\n                        $url,\n                        $triggered_jobs,\n                        $this->csrf,\n                        $this->html_purifier,\n                        $this->uri_sanitizer,\n                    ),\n                ]\n            );\n        }\n\n        $renderer                         = TemplateRendererFactory::build()->getRenderer(HUDSON_GIT_BASE_DIR . '/templates');\n        $params['additional_html_bits'][] = $renderer->renderToString(\n            'modals',\n            new ModalsPresenter($repository, $url, $is_commit_reference_needed, $this->csrf)\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\HudsonGit;\n\nuse Tuleap\\Git\\Webhook\\GenericWebhookPresenter;\nuse Tuleap\\Git\\Webhook\\WebhookLogPresenter;\nuse Codendi_HTMLPurifier;\nuse GitRepository;\nuse CSRFSynchronizerToken;\nuse Tuleap\\HudsonGit\\Log\\Log;\nuse Tuleap\\Sanitizer\\URISanitizer;\n\nfinal class JenkinsWebhookPresenter extends GenericWebhookPresenter\n{\n    public function __construct(\n        GitRepository $repository,\n        string $url,\n        array $hooklogs,\n        CSRFSynchronizerToken $csrf,\n        private readonly Codendi_HTMLPurifier $html_purifier,\n        private readonly URISanitizer $uri_sanitizer,\n    ) {\n        $use_default_edit_modal = false;\n        parent::__construct($repository, 'jenkins', $url, [], $csrf, $use_default_edit_modal);\n\n        $this->remove_form_action = '/plugins/hudson_git/?group_id=' . (int) $repository->getProjectId();\n\n        $this->remove_webhook_desc   = dgettext('tuleap-hudson_git', 'You are about to remove the Jenkins server. Please confirm your action.');\n        $this->modal_logs_time_label = dgettext('tuleap-hudson_git', 'Push date');\n        $this->modal_logs_info_label = dgettext('tuleap-hudson_git', 'Logs');\n        $this->empty_logs            = dgettext('tuleap-hudson_git', 'No triggered jobs');\n\n        $this->purified_last_push_info = '<span class=\"text-info\">' . sprintf(dgettext('tuleap-hudson_git', '%1$s jobs triggered'), $this->countNumberOfPollingJobsTriggeredOnLastPush($hooklogs)) . '</span>';\n\n        $this->generateHooklogs($hooklogs);\n    }\n\n    /**\n     * @param Log[] $hooklogs\n     */\n    private function generateHooklogs(array $hooklogs): void\n    {\n        foreach ($hooklogs as $log) {\n            $purified_information = '';\n            $job_list             = $log->getJobUrlList();\n            if (count($job_list) > 0) {\n                $purified_information .= '<div class=\"hook-log-triggered-jobs\">';\n                $purified_information .= '<h4>' . dgettext(\"tuleap-hudson_git\", \"Git plugin triggered jobs:\") . '</h4>';\n                foreach ($job_list as $triggered_job_url) {\n                    $sanitized_job_url = $this->uri_sanitizer->sanitizeForHTMLAttribute($triggered_job_url);\n                    if ($sanitized_job_url !== '' && $triggered_job_url !== '') {\n                        $purified_information .= '<a href=\"' . $this->html_purifier->purify($sanitized_job_url) . '\">' . $this->html_purifier->purify($triggered_job_url) . '</a><br>';\n                    } else {\n                        $purified_information .= $this->html_purifier->purify($triggered_job_url);\n                    }\n                }\n                $purified_information .= '</div>';\n            }\n\n            if ($log->getStatusCode() !== null) {\n                $purified_information .= '<div class=\"hook-log-branch-source-status\">';\n                $purified_information .= '<h4>' . dgettext(\"tuleap-hudson_git\", \"Branch source plugin:\") . '</h4>';\n                $purified_information .= $this->html_purifier->purify((string) $log->getStatusCode());\n                $purified_information .= '</div>';\n            }\n\n            $this->hooklogs[] = new WebhookLogPresenter($log->getFormattedPushDate(), $purified_information);\n        }\n    }\n\n    /**\n     * @param Log[] $hooklogs\n     */\n    private function countNumberOfPollingJobsTriggeredOnLastPush(array $hooklogs): int\n    {\n        if (count($hooklogs) > 0) {\n            return count($hooklogs[0]->getJobUrlList());\n        }\n\n        return 0;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2016-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nrequire_once __DIR__ . '/../../hudson/include/hudsonPlugin.php';\nrequire_once __DIR__ . '/../../git/include/gitPlugin.php';\nrequire_once __DIR__ . '/../vendor/autoload.php';\nrequire_once __DIR__ . '/constants.php';\n\nuse FastRoute\\RouteCollector;\nuse Http\\Client\\Common\\Plugin\\CookiePlugin;\nuse Http\\Message\\CookieJar;\nuse Tuleap\\Authentication\\SplitToken\\PrefixedSplitTokenSerializer;\nuse Tuleap\\Authentication\\SplitToken\\SplitTokenVerificationStringHasher;\nuse Tuleap\\DB\\DBFactory;\nuse Tuleap\\DB\\DBTransactionExecutorWithConnection;\nuse Tuleap\\Git\\CollectGitRoutesEvent;\nuse Tuleap\\Git\\Events\\ExternalGitHomepagePluginInfos;\nuse Tuleap\\Git\\Events\\GetExternalGitHomepagePluginsEvent;\nuse Tuleap\\Git\\Events\\GitAdminGetExternalPanePresenters;\nuse Tuleap\\Git\\Events\\XMLExportExternalContentEvent;\nuse Tuleap\\Git\\Events\\XMLImportExternalContentEvent;\nuse Tuleap\\Git\\GitViews\\RepoManagement\\Pane\\Hooks;\nuse Tuleap\\Git\\Hook\\PostReceiveExecuteEvent;\nuse Tuleap\\Git\\Permissions\\FineGrainedDao;\nuse Tuleap\\Git\\Permissions\\FineGrainedRetriever;\nuse Tuleap\\Http\\HttpClientFactory;\nuse Tuleap\\Http\\HTTPFactoryBuilder;\nuse Tuleap\\Http\\Server\\DisableCacheMiddleware;\nuse Tuleap\\HudsonGit\\Git\\Administration\\AddController;\nuse Tuleap\\HudsonGit\\Git\\Administration\\AdministrationController;\nuse Tuleap\\HudsonGit\\Git\\Administration\\AdministrationPaneBuilder;\nuse Tuleap\\HudsonGit\\Git\\Administration\\AjaxController;\nuse Tuleap\\HudsonGit\\Git\\Administration\\DeleteController;\nuse Tuleap\\HudsonGit\\Git\\Administration\\JenkinsServerAdder;\nuse Tuleap\\HudsonGit\\Git\\Administration\\JenkinsServerDao;\nuse Tuleap\\HudsonGit\\Git\\Administration\\JenkinsServerDeleter;\nuse Tuleap\\HudsonGit\\Git\\Administration\\JenkinsServerFactory;\nuse Tuleap\\HudsonGit\\Git\\Administration\\URLBuilder;\nuse Tuleap\\HudsonGit\\Git\\Administration\\XML\\XMLExporter;\nuse Tuleap\\HudsonGit\\Git\\Administration\\XML\\XMLImporter;\nuse Tuleap\\HudsonGit\\GitWebhooksSettingsEnhancer;\nuse Tuleap\\HudsonGit\\Hook;\nuse Tuleap\\HudsonGit\\Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookPayload;\nuse Tuleap\\HudsonGit\\Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookPrefixToken;\nuse Tuleap\\HudsonGit\\Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookTokenGeneratorDBStore;\nuse Tuleap\\HudsonGit\\Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookTokenVerifierController;\nuse Tuleap\\HudsonGit\\HudsonGitPluginDefaultController;\nuse Tuleap\\HudsonGit\\Job\\JobDao;\nuse Tuleap\\HudsonGit\\Job\\ProjectJobDao;\nuse Tuleap\\HudsonGit\\Log\\LogCreator;\nuse Tuleap\\HudsonGit\\Log\\LogFactory;\nuse Tuleap\\HudsonGit\\Plugin\\PluginInfo;\nuse Tuleap\\HudsonGit\\REST\\ResourcesInjector;\nuse Tuleap\\Jenkins\\JenkinsCSRFCrumbRetriever;\nuse Tuleap\\Layout\\IncludeAssets;\nuse Tuleap\\Request\\CollectRoutesEvent;\n\n//phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass hudson_gitPlugin extends Plugin\n{\n    public const DISPLAY_HUDSON_ADDITION_INFO = 'display_hudson_addition_info';\n\n    public function __construct($id)\n    {\n        parent::__construct($id);\n        $this->setScope(self::SCOPE_PROJECT);\n\n        bindtextdomain('tuleap-hudson_git', __DIR__ . '/../site-content');\n\n        $this->addHook(CollectRoutesEvent::NAME);\n        $this->addHook('cssfile', 'cssFile');\n\n        if (defined('GIT_BASE_URL')) {\n            $this->addHook(Hooks::ADDITIONAL_WEBHOOKS);\n            $this->addHook(PostReceiveExecuteEvent::NAME);\n            $this->addHook(self::DISPLAY_HUDSON_ADDITION_INFO);\n            $this->addHook(GitAdminGetExternalPanePresenters::NAME);\n            $this->addHook(CollectGitRoutesEvent::NAME);\n            $this->addHook(XMLImportExternalContentEvent::NAME);\n            $this->addHook(XMLExportExternalContentEvent::NAME);\n            $this->addHook(Event::REST_RESOURCES);\n            $this->addHook(GetExternalGitHomepagePluginsEvent::NAME);\n        }\n    }\n\n    public function cssFile($params)\n    {\n        $git_plugin = PluginManager::instance()->getPluginByName('git');\n        if (! $git_plugin instanceof GitPlugin) {\n            throw new RuntimeException('Cannot instantiate Git plugin');\n        }\n\n        if (\n            strpos($_SERVER['REQUEST_URI'], '/administration/jenkins') !== false\n            && strpos($_SERVER['REQUEST_URI'], $git_plugin->getPluginPath()) === 0\n        ) {\n            echo '<link rel=\"stylesheet\" type=\"text/css\" href=\"' . $this->getIncludeAssets()->getFileURL('style.css') . '\" />';\n            echo '<link rel=\"stylesheet\" type=\"text/css\" href=\"' . $git_plugin->getLegacyAssets()->getFileURL('default.css') . '\" />';\n        }\n    }\n\n    /**\n     * @access protected for test purpose\n     */\n    protected function getIncludeAssets(): IncludeAssets\n    {\n        return new IncludeAssets(\n            __DIR__ . '/../frontend-assets',\n            \"/assets/hudson_git\"\n        );\n    }\n\n    public function display_hudson_addition_info($params) //phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps\n    {\n        $params['installed'] = defined('GIT_BASE_URL');\n    }\n\n    /**\n     * @see Plugin::getDependencies()\n     */\n    public function getDependencies()\n    {\n        return ['git', 'hudson'];\n    }\n\n    /**\n     * @return PluginInfo\n     */\n    public function getPluginInfo()\n    {\n        if (! $this->pluginInfo) {\n            $this->pluginInfo = new PluginInfo($this);\n        }\n        return $this->pluginInfo;\n    }\n\n    /** @see Tuleap\\Git\\GitViews\\RepoManagement\\Pane\\Hooks::ADDITIONAL_WEBHOOKS */\n    public function plugin_git_settings_additional_webhooks(array $params) //phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps\n    {\n        if ($this->isAllowed($params['repository']->getProjectId())) {\n            $xzibit = new GitWebhooksSettingsEnhancer(\n                new Hook\\HookDao(),\n                new LogFactory(\n                    new JobDao(),\n                    new ProjectJobDao(),\n                    new GitRepositoryFactory(\n                        new GitDao(),\n                        ProjectManager::instance()\n                    )\n                ),\n                $this->getCSRF(),\n                self::getJenkinsServerFactory(),\n                Codendi_HTMLPurifier::instance(),\n                new \\Tuleap\\Sanitizer\\URISanitizer(new Valid_HTTPURI()),\n            );\n            $xzibit->pimp($params);\n        }\n    }\n\n    public function collectRoutesEvent(CollectRoutesEvent $event): void\n    {\n        $event->getRouteCollector()->addGroup($this->getPluginPath(), function (RouteCollector $r) {\n            $r->addRoute(['GET', 'POST'], '[/[index.php]]', $this->getRouteHandler('routeGetPostLegacyController'));\n\n            $r->post('/jenkins_server', $this->getRouteHandler('getPostGitAdministrationJenkinsServer'));\n            $r->post('/jenkins_server/delete', $this->getRouteHandler('getDeleteGitAdministrationJenkinsServer'));\n            $r->post('/test_jenkins_server', $this->getRouteHandler('getAjaxAdministrationTestJenkinsServer'));\n            $r->post('/jenkins_tuleap_hook_trigger_check', $this->getRouteHandler('routePostVerifyHookTrigger'));\n        });\n    }\n\n    public static function getAjaxAdministrationTestJenkinsServer(): AjaxController\n    {\n        return new AjaxController(\n            HttpClientFactory::createClient(new CookiePlugin(new CookieJar())),\n            HTTPFactoryBuilder::requestFactory(),\n            new WrapperLogger(self::getHudsonGitLogger(), 'hudson_git')\n        );\n    }\n\n    public static function getDeleteGitAdministrationJenkinsServer(): DeleteController\n    {\n        return new DeleteController(\n            self::getGitPermissionsManager(),\n            self::getJenkinsServerFactory(),\n            new JenkinsServerDeleter(\n                new JenkinsServerDao(),\n                new ProjectJobDao(),\n                new DBTransactionExecutorWithConnection(\n                    DBFactory::getMainTuleapDBConnection()\n                )\n            ),\n            new CSRFSynchronizerToken(URLBuilder::buildDeleteUrl())\n        );\n    }\n\n    public static function getPostGitAdministrationJenkinsServer(): AddController\n    {\n        return new AddController(\n            ProjectManager::instance(),\n            self::getGitPermissionsManager(),\n            new JenkinsServerAdder(\n                new JenkinsServerDao(),\n                new Valid_HTTPURI(),\n                (new \\Tuleap\\Cryptography\\KeyFactory())->getEncryptionKey()\n            ),\n            new CSRFSynchronizerToken(URLBuilder::buildAddUrl())\n        );\n    }\n\n    public function collectGitRoutesEvent(CollectGitRoutesEvent $event)\n    {\n        $event->getRouteCollector()->get(\n            '/{project_name}/administration/jenkins',\n            $this->getRouteHandler('routeGetGitJenkinsAdministration')\n        );\n    }\n\n    public function routeGetGitJenkinsAdministration(): AdministrationController\n    {\n        $git_plugin = PluginManager::instance()->getPluginByName('git');\n        assert($git_plugin instanceof GitPlugin);\n\n        return new AdministrationController(\n            ProjectManager::instance(),\n            self::getGitPermissionsManager(),\n            self::getJenkinsServerFactory(),\n            new LogFactory(\n                new JobDao(),\n                new ProjectJobDao(),\n                new GitRepositoryFactory(\n                    new GitDao(),\n                    ProjectManager::instance()\n                )\n            ),\n            $git_plugin->getHeaderRenderer(),\n            TemplateRendererFactory::build()->getRenderer(HUDSON_GIT_BASE_DIR . '/templates/git-administration'),\n            $this->getIncludeAssets(),\n            EventManager::instance()\n        );\n    }\n\n    public function routePostVerifyHookTrigger(): JenkinsTuleapPluginHookTokenVerifierController\n    {\n        return new JenkinsTuleapPluginHookTokenVerifierController(\n            HTTPFactoryBuilder::responseFactory(),\n            new Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookTokenVerifierDBStore(\n                new Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookTokenDAO(),\n                new DBTransactionExecutorWithConnection(DBFactory::getMainTuleapDBConnection()),\n                new PrefixedSplitTokenSerializer(new JenkinsTuleapPluginHookPrefixToken()),\n                new SplitTokenVerificationStringHasher(),\n                self::getHudsonGitLogger(),\n            ),\n            new \\Laminas\\HttpHandlerRunner\\Emitter\\SapiEmitter(),\n            new DisableCacheMiddleware()\n        );\n    }\n\n    private static function getGitPermissionsManager(): GitPermissionsManager\n    {\n        $git_system_event_manager = new Git_SystemEventManager(\n            SystemEventManager::instance(),\n        );\n\n        $fine_grained_dao       = new FineGrainedDao();\n        $fine_grained_retriever = new FineGrainedRetriever($fine_grained_dao);\n\n        return new GitPermissionsManager(\n            new Git_PermissionsDao(),\n            $git_system_event_manager,\n            $fine_grained_dao,\n            $fine_grained_retriever\n        );\n    }\n\n    public function routeGetPostLegacyController()\n    {\n        $request    = HTTPRequest::instance();\n        $project_id = (int) $request->getProject()->getID();\n\n        return new HudsonGitPluginDefaultController(\n            $this->getHookController($request),\n            $this->isAllowed($project_id)\n        );\n    }\n\n    public function postReceiveExecuteEvent(PostReceiveExecuteEvent $event): void\n    {\n        $repository = $event->getRepository();\n        if ($this->isAllowed($repository->getProjectId())) {\n            $http_client     = HttpClientFactory::createClient(new CookiePlugin(new CookieJar()));\n            $request_factory = HTTPFactoryBuilder::requestFactory();\n            $stream_factory  = HTTPFactoryBuilder::streamFactory();\n            $encryption_key  = (new \\Tuleap\\Cryptography\\KeyFactory())->getEncryptionKey();\n            $controller      = new Hook\\HookTriggerController(\n                new Hook\\HookDao(),\n                new Hook\\JenkinsClient(\n                    $http_client,\n                    $request_factory,\n                    new JenkinsCSRFCrumbRetriever($http_client, $request_factory),\n                    new JenkinsTuleapPluginHookPayload(\n                        $repository,\n                        $event->getRefname(),\n                        new JenkinsTuleapPluginHookTokenGeneratorDBStore(\n                            new Hook\\JenkinsTuleapBranchSourcePluginHook\\JenkinsTuleapPluginHookTokenDAO(),\n                            new SplitTokenVerificationStringHasher(),\n                            new PrefixedSplitTokenSerializer(new JenkinsTuleapPluginHookPrefixToken()),\n                            new DateInterval('PT30S'),\n                        ),\n                        fn (): DateTimeImmutable => new DateTimeImmutable(),\n                    ),\n                    $stream_factory,\n                    $encryption_key,\n                ),\n                $this->getLogger(),\n                new LogCreator(\n                    new JobDao(),\n                    new ProjectJobDao(),\n                    new DBTransactionExecutorWithConnection(\n                        DBFactory::getMainTuleapDBConnection()\n                    )\n                ),\n                self::getJenkinsServerFactory()\n            );\n\n            $controller->trigger(\n                $repository,\n                $event->getNewrev(),\n                new DateTimeImmutable()\n            );\n        }\n    }\n\n    /**\n     * @return Hook\\HookController\n     */\n    private function getHookController(Codendi_Request $request)\n    {\n        return new Hook\\HookController(\n            $request,\n            new GitRepositoryFactory(\n                new GitDao(),\n                ProjectManager::instance()\n            ),\n            new Hook\\HookDao(),\n            $this->getCSRF(),\n            new Valid_HTTPURI(),\n            (new \\Tuleap\\Cryptography\\KeyFactory())->getEncryptionKey()\n        );\n    }\n\n    private function getCSRF()\n    {\n        return new CSRFSynchronizerToken('hudson-git-hook-management');\n    }\n\n    private function getLogger(): \\Psr\\Log\\LoggerInterface\n    {\n        return new WrapperLogger(self::getHudsonGitLogger(), 'hudson_git');\n    }\n\n    private static function getHudsonGitLogger(): \\Psr\\Log\\LoggerInterface\n    {\n        return \\BackendLogger::getDefaultLogger('hudson_git_syslog');\n    }\n\n    public function gitAdminGetExternalPanePresenters(GitAdminGetExternalPanePresenters $event): void\n    {\n        if ($event->getCurrentTabName() === AdministrationPaneBuilder::PANE_NAME) {\n            $event->addExternalPanePresenter(AdministrationPaneBuilder::buildActivePane($event->getProject()));\n            return;\n        }\n\n        $event->addExternalPanePresenter(AdministrationPaneBuilder::buildPane($event->getProject()));\n    }\n\n    private static function getJenkinsServerFactory(): JenkinsServerFactory\n    {\n        return new JenkinsServerFactory(\n            new JenkinsServerDao(),\n            ProjectManager::instance()\n        );\n    }\n\n    public function xmlImportExternalContentEvent(XMLImportExternalContentEvent $event): void\n    {\n        $project = $event->getProject();\n        if (! $this->isAllowed((int) $project->getID())) {\n            return;\n        }\n\n        $xml_importer = new XMLImporter(\n            new JenkinsServerAdder(\n                new JenkinsServerDao(),\n                new Valid_HTTPURI(),\n                (new \\Tuleap\\Cryptography\\KeyFactory())->getEncryptionKey()\n            ),\n            $event->getLogger()\n        );\n\n        $xml_importer->import(\n            $project,\n            $event->getXMLGit()\n        );\n    }\n\n    public function xmlExportExternalContentEvent(XMLExportExternalContentEvent $event): void\n    {\n        $project = $event->getProject();\n        if (! $this->isAllowed((int) $project->getID())) {\n            return;\n        }\n\n        $xml_importer = new XMLExporter(\n            self::getJenkinsServerFactory(),\n            $event->getLogger(),\n            (new \\Tuleap\\Cryptography\\KeyFactory())->getEncryptionKey()\n        );\n\n        $xml_importer->export(\n            $project,\n            $event->getXMLGit()\n        );\n    }\n\n    /** @see Event::REST_RESOURCES */\n    public function restResources(array $params)\n    {\n        $injector = new ResourcesInjector();\n        $injector->populate($params['restler']);\n    }\n\n    public function getExternalGitHomepagePluginsEvent(GetExternalGitHomepagePluginsEvent $event): void\n    {\n        $factory = self::getJenkinsServerFactory();\n        $servers = $factory->getJenkinsServerOfProject($event->getProject());\n\n        $plugin_infos = new ExternalGitHomepagePluginInfos(\"hudson_git\", $servers);\n        $event->addExternalPluginInfos($plugin_infos);\n    }\n}\n"], "filenames": ["plugins/hudson_git/include/HudsonGit/GitWebhooksSettingsEnhancer.php", "plugins/hudson_git/include/HudsonGit/JenkinsWebhookPresenter.php", "plugins/hudson_git/include/hudson_gitPlugin.php"], "buggy_code_start_loc": [22, 28, 169], "buggy_code_end_loc": [121, 72, 170], "fixing_code_start_loc": [23, 29, 169], "fixing_code_end_loc": [127, 82, 172], "type": "CWE-79", "message": "Tuleap is an open source tool for end to end traceability of application and system developments. Tuleap Community Edition prior to version 14.8.99.60 and Tuleap Enterprise edition prior to 14.8-3 and 14.7-7, the logs of the triggered Jenkins job URLs are not properly escaped. A malicious Git administrator can setup a malicious Jenkins hook to make a victim, also a Git administrator, execute uncontrolled code. Tuleap Community Edition 14.8.99.60, Tuleap Enterprise Edition 14.8-3, and Tuleap Enterprise Edition 14.7-7 contain a patch for this issue.", "other": {"cve": {"id": "CVE-2023-32072", "sourceIdentifier": "security-advisories@github.com", "published": "2023-05-29T21:15:09.893", "lastModified": "2023-06-05T15:42:16.773", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tuleap is an open source tool for end to end traceability of application and system developments. Tuleap Community Edition prior to version 14.8.99.60 and Tuleap Enterprise edition prior to 14.8-3 and 14.7-7, the logs of the triggered Jenkins job URLs are not properly escaped. A malicious Git administrator can setup a malicious Jenkins hook to make a victim, also a Git administrator, execute uncontrolled code. Tuleap Community Edition 14.8.99.60, Tuleap Enterprise Edition 14.8-3, and Tuleap Enterprise Edition 14.7-7 contain a patch for this issue."}, {"lang": "es", "value": "Tuleap es una herramienta de c\u00f3digo abierto para la trazabilidad de extremo a extremo de los desarrollos de aplicaciones y sistemas. En Tuleap Community Edition anterior a la versi\u00f3n 14.8.99.60 y en Tuleap Enterprise Edition anterior a las versiones 14.8-3 y 14.7-7 los registros de las URLs de los trabajos Jenkins desencadenados no se escapan correctamente. Un administrador Git malicioso puede configurar un \"hook\" de Jenkins malicioso para hacer que una v\u00edctima, tambi\u00e9n administrador Git, ejecute c\u00f3digo no controlado. Tuleap Community Edition v14.8.99.60, Tuleap Enterprise Edition v14.8-3 y Tuleap Enterprise Edition v14.7-7 contienen un parche para este problema. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionEndExcluding": "14.7-7", "matchCriteriaId": "0C6D58F3-A54E-4B32-93A9-C8D93855586F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:community:*:*:*", "versionEndExcluding": "14.8.99.60", "matchCriteriaId": "24769828-A1C7-457C-B409-E0BCEE39CBDD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "14.8", "versionEndExcluding": "14.8-3", "matchCriteriaId": "171202C5-61A2-42C5-9A9E-505E2C29FB6D"}]}]}], "references": [{"url": "https://github.com/Enalean/tuleap/commit/6840529def97f564844e810e5a7c5bf837cf58d5", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-6prc-j58r-fmjq", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=6840529def97f564844e810e5a7c5bf837cf58d5", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://tuleap.net/plugins/tracker/?aid=31929", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Enalean/tuleap/commit/6840529def97f564844e810e5a7c5bf837cf58d5"}}