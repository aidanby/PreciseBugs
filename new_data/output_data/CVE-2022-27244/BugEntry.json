{"buggy_code": ["<div class=\"users form\">\n<?php echo $this->Form->create('User', array('novalidate'=>true));?>\n    <fieldset>\n        <legend><?php echo __('Admin Add User'); ?></legend>\n    <?php\n        echo $this->Form->input('email');\n    ?>\n        <div class=\"clear\"></div>\n    <?php\n        $password = true;\n        if (Configure::read('Plugin.CustomAuth_enable')) {\n            if (Configure::read('Plugin.CustomAuth_required')) {\n                $password = false;\n            } else {\n                $userType = Configure::read('Plugin.CustomAuth_name') ? Configure::read('Plugin.CustomAuth_name') : 'External authentication';\n                echo $this->Form->input('external_auth_required', array('type' => 'checkbox', 'label' => $userType . ' user'));\n            }\n            echo sprintf(\n                '<div class=\"clear\"></div><div %s>%s</div>',\n                (\n                    (\n                        !empty(Configure::read('Plugin.CustomAuth_required')) &&\n                        !empty(Configure::read('Plugin.CustomAuth_enable'))\n                    ) ? '' : sprintf('id=\"externalAuthDiv\"')\n                ),\n                $this->Form->input('external_auth_key', array('type' => 'text'))\n            );\n        }\n    ?>\n    <div class=\"clear\"></div>\n    <div id=\"passwordDivDiv\" style=\"<?= (!empty(Configure::read('Plugin.CustomAuth_required')) && !empty(Configure::read('Plugin.CustomAuth_enable'))) ? 'display:none;' : ''?>\">\n        <?php\n            echo $this->Form->input('enable_password', array('type' => 'checkbox', 'label' => __('Set password')));\n        ?>\n        <div id=\"PasswordDiv\">\n            <div class=\"clear\"></div>\n            <?php\n                $passwordPopover = '<span class=\"blue bold\">' . __('Minimal length') . '</span>: ' . h($length) . '<br>';\n                $passwordPopover .= '<span class=\"blue bold\">' . __('Complexity') . '</span>: ' . h($complexity);\n                echo $this->Form->input('password', array(\n                    'label' => __('Password') . ' <span id=\"PasswordPopover\" data-content=\"' . h($passwordPopover) . '\" class=\"fas fa-info-circle\"></span>'\n                ));\n                echo $this->Form->input('confirm_password', array('type' => 'password', 'div' => array('class' => 'input password required')));\n            ?>\n        </div>\n    </div>\n    <div class=\"clear\"></div>\n    <?php\n        if ($isSiteAdmin) {\n            echo $this->Form->input('org_id', array(\n                    'options' => $orgs,\n                    'label' => __('Organisation'),\n                    'empty' => __('Choose organisation'),\n            ));\n        }\n        $roleOptions = array(\n            'label' => __('Role'),\n            'div' => empty(Configure::read('Security.advanced_authkeys')) ? null : 'input clear'\n        );\n        // We need to make sure that the default role is actually available to the admin (for an org admin it might not be)\n        if (!empty($default_role_id) && isset($roles[intval($default_role_id)])) {\n            $roleOptions['default'] = $default_role_id;\n        }\n        echo $this->Form->input('role_id', $roleOptions);\n        if (empty(Configure::read('Security.advanced_authkeys'))) {\n            echo $this->Form->input('authkey', array('value' => $authkey, 'readonly' => 'readonly', 'div' => 'input clear'));\n        }\n        echo $this->Form->input('nids_sid', ['label' => __('NIDS SID')]);\n    ?>\n        <div id=\"syncServers\" class=\"hidden\">\n    <?php\n            echo $this->Form->input('server_id', array('label' => __('Sync user for'), 'div' => 'clear', 'options' => $servers));\n    ?>\n        </div>\n    <?php\n        echo $this->Form->input('gpgkey', array('label' => __('PGP key'), 'div' => 'clear', 'class' => 'input-xxlarge', 'placeholder' => __('Paste the user\\'s PGP key here or try to retrieve it from the CIRCL key server by clicking on \"Fetch PGP key\" below.')));\n    ?>\n        <div class=\"clear\"><span  role=\"button\" tabindex=\"0\" aria-label=\"<?php echo __('Fetch the user\\'s PGP key');?>\" onClick=\"lookupPGPKey('UserEmail');\" class=\"btn btn-inverse\" style=\"margin-bottom:10px;\"><?php echo __('Fetch PGP key');?></span></div>\n    <?php\n        if (Configure::read('SMIME.enabled')) echo $this->Form->input('certif_public', array('label' => __('S/MIME Public certificate (PEM format)'), 'div' => 'clear', 'class' => 'input-xxlarge', 'placeholder' => __('Paste the user\\'s S/MIME public key in PEM format here.')));\n    ?>\n    <div class=\"user-edit-checkboxes\" style=\"margin-bottom: 1em\">\n    <?php\n        $default_publish_alert = Configure::check('MISP.default_publish_alert') ? Configure::read('MISP.default_publish_alert') : true;\n        echo $this->Form->input('autoalert', array(\n            'label' => __('Receive email alerts when events are published'),\n            'type' => 'checkbox',\n            'checked' => isset($this->request->data['User']['autoalert']) ? $this->request->data['User']['autoalert'] : $default_publish_alert\n        ));\n        echo $this->Form->input('contactalert', array(\n            'label' => __('Receive email alerts from \"Contact reporter\" requests'),\n            'type' => 'checkbox',\n            'checked' => isset($this->request->data['User']['contactalert']) ? $this->request->data['User']['contactalert'] : true\n        ));\n        echo $this->Form->input('disabled', array('type' => 'checkbox', 'label' => __('Immediately disable this user account')));\n        echo $this->Form->input('notify', array(\n            'label' => __('Send credentials automatically'),\n            'type' => 'checkbox',\n            'checked' => isset($this->request->data['User']['notify']) ? $this->request->data['User']['notify'] : true\n        ));\n    ?>\n        </div>\n    </fieldset>\n<?php\n    echo $this->Form->button(__('Create user'), array('class' => 'btn btn-primary'));\n    echo $this->Form->end();?>\n</div>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'admin', 'menuItem' => 'addUser'));\n?>\n<script type=\"text/javascript\">\nvar syncRoles = <?php echo json_encode($syncRoles); ?>;\n$(function() {\n    syncUserSelected();\n    $('#UserRoleId').change(function() {\n        syncUserSelected();\n    });\n    checkUserPasswordEnabled();\n    checkUserExternalAuth();\n    $('#UserEnablePassword').change(function() {\n        checkUserPasswordEnabled();\n    });\n    $('#UserExternalAuthRequired').change(function() {\n        checkUserExternalAuth();\n    });\n});\n</script>\n", "<div class=\"users form\">\n<?php echo $this->Form->create('User', array('novalidate' => true));?>\n    <fieldset>\n        <legend><?php echo __('Admin Edit User'); ?></legend>\n    <?php\n        echo $this->Form->input('email', [\n            'disabled' => !$canChangeLogin,\n            'data-disabled-reason' => !$canChangePassword ? __('User login change is disabled on this instance') : '',\n        ]);\n    ?>\n        <div class=\"clear\"></div>\n    <?php\n        $password = true;\n        if (Configure::read('Plugin.CustomAuth_enable')) {\n            if (Configure::read('Plugin.CustomAuth_required')) {\n                $password = false;\n            } else {\n                $userType = Configure::read('Plugin.CustomAuth_name') ? Configure::read('Plugin.CustomAuth_name') : 'External authentication';\n                echo $this->Form->input('external_auth_required', array('type' => 'checkbox', 'label' => $userType . ' user'));\n            }\n            echo sprintf(\n                '<div class=\"clear\"></div><div %s>%s</div>',\n                (\n                    (\n                        !empty(Configure::read('Plugin.CustomAuth_required')) &&\n                        !empty(Configure::read('Plugin.CustomAuth_enable'))\n                    ) ? '' : sprintf('id=\"externalAuthDiv\"')\n                ),\n                $this->Form->input('external_auth_key', array('type' => 'text'))\n            );\n        }\n    ?>\n    <div class=\"clear\"></div>\n    <div id=\"passwordDivDiv\" style=\"<?= (!empty(Configure::read('Plugin.CustomAuth_required')) && !empty(Configure::read('Plugin.CustomAuth_enable'))) ? 'display:none;' : ''?>\">\n        <?php\n            echo $this->Form->input('enable_password', [\n                'type' => 'checkbox',\n                'label' => __('Set password'),\n                'disabled' => !$canChangePassword,\n                'data-disabled-reason' => !$canChangePassword ? __('User password change is disabled on this instance') : '',\n            ]);\n        ?>\n        <div id=\"PasswordDiv\">\n            <div class=\"clear\"></div>\n            <?php\n                $passwordPopover = '<span class=\"blue bold\">' . __('Length') .'</span>: ' . h($length) . '<br>';\n                $passwordPopover .= '<span class=\"blue bold\">' . __('Complexity') .'</span>: ' . h($complexity);\n                echo $this->Form->input('password', array(\n                    'label' => __('Password') . ' <span id=\"PasswordPopover\" data-content=\"' . h($passwordPopover) .'\" class=\"fas fa-info-circle\"></span>'\n                ));\n                echo $this->Form->input('confirm_password', array('type' => 'password', 'div' => array('class' => 'input password required')));\n            ?>\n        </div>\n    </div>\n    <div class=\"clear\"></div>\n    <?php\n        if ($isSiteAdmin) {\n            echo $this->Form->input('org_id', array(\n                    'options' => $orgs,\n                    'label' => __('Organisation'),\n            ));\n        }\n        echo $this->Form->input('role_id', array(\n            'label' => __('Role'),\n            'div' => empty(Configure::read('Security.advanced_authkeys')) ? null : 'input clear'\n        ));\n        if (empty(Configure::read('Security.advanced_authkeys'))) {\n            $authkeyLabel = __('Authkey') . ' <a class=\"useCursorPointer\" onclick=\"$(\\'#resetAuthKeyForm\\').submit();\">' . __('(Reset)') . '</a>';\n            echo $this->Form->input('authkey', array('disabled' => true, 'div' => 'input clear', 'label' => $authkeyLabel));\n        }\n        echo $this->Form->input('nids_sid', ['label' => __('NIDS SID')]);\n    ?>\n        <div id=\"syncServers\" class=\"hidden\">\n    <?php\n            echo $this->Form->input('server_id', array('label' => __('Sync user for'), 'div' => 'clear', 'options' => $servers));\n    ?>\n        </div>\n    <?php\n        echo $this->Form->input('gpgkey', array('label' => __('PGP key'), 'div' => 'clear', 'class' => 'input-xxlarge', 'placeholder' => __('Paste the user\\'s PGP key here or try to retrieve it from the CIRCL key server by clicking on \"Fetch PGP key\" below.')));\n    ?>\n        <div class=\"clear\"><span role=\"button\" tabindex=\"0\" aria-label=\"<?php echo __('Fetch the user\\'s PGP key');?>\" onClick=\"lookupPGPKey('UserEmail');\" class=\"btn btn-inverse\" style=\"margin-bottom:10px;\"><?php echo __('Fetch PGP key');?></span></div>\n    <?php\n        if (Configure::read('SMIME.enabled')) {\n            echo $this->Form->input('certif_public', array('label' => __('S/MIME Public certificate (PEM format)'), 'div' => 'clear', 'class' => 'input-xxlarge', 'placeholder' => __('Paste the user\\'s S/MIME public key in PEM format here.')));\n        }\n        echo '<div class=\"user-edit-checkboxes\">';\n        echo $this->Form->input('termsaccepted', array('type' => 'checkbox', 'label' => __('Terms accepted')));\n        echo $this->Form->input('change_pw', [\n            'type' => 'checkbox',\n            'label' => __('User must change password'),\n            'disabled' => !$canChangePassword,\n            'data-disabled-reason' => !$canChangePassword ? __('User password change is disabled on this instance') : '',\n        ]);\n        echo $this->Form->input('autoalert', array('label' => __('Receive email alerts when events are published'), 'type' => 'checkbox'));\n        echo $this->Form->input('contactalert', array('label' => __('Receive email alerts from \"Contact reporter\" requests'), 'type' => 'checkbox'));\n        echo $this->Form->input('disabled', array('type' => 'checkbox', 'label' => __('Immediately disable this user account')));\n        echo '</div>';\n    ?>\n    </fieldset>\n    <div style=\"border-bottom: 1px solid #e5e5e5;width:100%;\">&nbsp;</div>\n    <div class=\"clear\" style=\"margin-top:10px;\">\n<?php\n    if (Configure::read('Security.require_password_confirmation')) {\n        echo $this->Form->input('current_password', array('type' => 'password', 'div' => false, 'class' => 'input password required', 'label' => __('Confirm with your current password')));\n    }\n?>\n    </div>\n<?php\n    echo $this->Form->button(__('Edit user'), array('class' => 'btn btn-primary'));\n    echo $this->Form->end();\n    echo $this->Form->create('User', array(\n        'url' => array('controller' => 'users', 'action' => 'resetauthkey', $id),\n        'id' => 'resetAuthKeyForm'\n    ));\n    echo $this->Form->end();\n?>\n</div>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'admin', 'menuItem' => 'editUser'));\n?>\n\n<script type=\"text/javascript\">\n    var syncRoles = <?php echo json_encode($syncRoles); ?>;\n    $(function() {\n        syncUserSelected();\n        $('#UserRoleId').change(function() {\n            syncUserSelected();\n        });\n        checkUserPasswordEnabled();\n        checkUserExternalAuth();\n        $('#UserEnablePassword').change(function() {\n            checkUserPasswordEnabled();\n        });\n        $('#UserExternalAuthRequired').change(function() {\n            checkUserExternalAuth();\n        });\n    });\n</script>\n"], "fixing_code": ["<div class=\"users form\">\n<?php echo $this->Form->create('User', array('novalidate'=>true));?>\n    <fieldset>\n        <legend><?php echo __('Admin Add User'); ?></legend>\n    <?php\n        echo $this->Form->input('email');\n    ?>\n        <div class=\"clear\"></div>\n    <?php\n        $password = true;\n        if (Configure::read('Plugin.CustomAuth_enable')) {\n            if (Configure::read('Plugin.CustomAuth_required')) {\n                $password = false;\n            } else {\n                $userType = Configure::read('Plugin.CustomAuth_name') ? Configure::read('Plugin.CustomAuth_name') : 'External authentication';\n                echo $this->Form->input('external_auth_required', array('type' => 'checkbox', 'label' => h($userType) . ' user'));\n            }\n            echo sprintf(\n                '<div class=\"clear\"></div><div %s>%s</div>',\n                (\n                    (\n                        !empty(Configure::read('Plugin.CustomAuth_required')) &&\n                        !empty(Configure::read('Plugin.CustomAuth_enable'))\n                    ) ? '' : sprintf('id=\"externalAuthDiv\"')\n                ),\n                $this->Form->input('external_auth_key', array('type' => 'text'))\n            );\n        }\n    ?>\n    <div class=\"clear\"></div>\n    <div id=\"passwordDivDiv\" style=\"<?= (!empty(Configure::read('Plugin.CustomAuth_required')) && !empty(Configure::read('Plugin.CustomAuth_enable'))) ? 'display:none;' : ''?>\">\n        <?php\n            echo $this->Form->input('enable_password', array('type' => 'checkbox', 'label' => __('Set password')));\n        ?>\n        <div id=\"PasswordDiv\">\n            <div class=\"clear\"></div>\n            <?php\n                $passwordPopover = '<span class=\"blue bold\">' . __('Minimal length') . '</span>: ' . h($length) . '<br>';\n                $passwordPopover .= '<span class=\"blue bold\">' . __('Complexity') . '</span>: ' . h($complexity);\n                echo $this->Form->input('password', array(\n                    'label' => __('Password') . ' <span id=\"PasswordPopover\" data-content=\"' . h($passwordPopover) . '\" class=\"fas fa-info-circle\"></span>'\n                ));\n                echo $this->Form->input('confirm_password', array('type' => 'password', 'div' => array('class' => 'input password required')));\n            ?>\n        </div>\n    </div>\n    <div class=\"clear\"></div>\n    <?php\n        if ($isSiteAdmin) {\n            echo $this->Form->input('org_id', array(\n                    'options' => $orgs,\n                    'label' => __('Organisation'),\n                    'empty' => __('Choose organisation'),\n            ));\n        }\n        $roleOptions = array(\n            'label' => __('Role'),\n            'div' => empty(Configure::read('Security.advanced_authkeys')) ? null : 'input clear'\n        );\n        // We need to make sure that the default role is actually available to the admin (for an org admin it might not be)\n        if (!empty($default_role_id) && isset($roles[intval($default_role_id)])) {\n            $roleOptions['default'] = $default_role_id;\n        }\n        echo $this->Form->input('role_id', $roleOptions);\n        if (empty(Configure::read('Security.advanced_authkeys'))) {\n            echo $this->Form->input('authkey', array('value' => $authkey, 'readonly' => 'readonly', 'div' => 'input clear'));\n        }\n        echo $this->Form->input('nids_sid', ['label' => __('NIDS SID')]);\n    ?>\n        <div id=\"syncServers\" class=\"hidden\">\n    <?php\n            echo $this->Form->input('server_id', array('label' => __('Sync user for'), 'div' => 'clear', 'options' => $servers));\n    ?>\n        </div>\n    <?php\n        echo $this->Form->input('gpgkey', array('label' => __('PGP key'), 'div' => 'clear', 'class' => 'input-xxlarge', 'placeholder' => __('Paste the user\\'s PGP key here or try to retrieve it from the CIRCL key server by clicking on \"Fetch PGP key\" below.')));\n    ?>\n        <div class=\"clear\"><span  role=\"button\" tabindex=\"0\" aria-label=\"<?php echo __('Fetch the user\\'s PGP key');?>\" onClick=\"lookupPGPKey('UserEmail');\" class=\"btn btn-inverse\" style=\"margin-bottom:10px;\"><?php echo __('Fetch PGP key');?></span></div>\n    <?php\n        if (Configure::read('SMIME.enabled')) echo $this->Form->input('certif_public', array('label' => __('S/MIME Public certificate (PEM format)'), 'div' => 'clear', 'class' => 'input-xxlarge', 'placeholder' => __('Paste the user\\'s S/MIME public key in PEM format here.')));\n    ?>\n    <div class=\"user-edit-checkboxes\" style=\"margin-bottom: 1em\">\n    <?php\n        $default_publish_alert = Configure::check('MISP.default_publish_alert') ? Configure::read('MISP.default_publish_alert') : true;\n        echo $this->Form->input('autoalert', array(\n            'label' => __('Receive email alerts when events are published'),\n            'type' => 'checkbox',\n            'checked' => isset($this->request->data['User']['autoalert']) ? $this->request->data['User']['autoalert'] : $default_publish_alert\n        ));\n        echo $this->Form->input('contactalert', array(\n            'label' => __('Receive email alerts from \"Contact reporter\" requests'),\n            'type' => 'checkbox',\n            'checked' => isset($this->request->data['User']['contactalert']) ? $this->request->data['User']['contactalert'] : true\n        ));\n        echo $this->Form->input('disabled', array('type' => 'checkbox', 'label' => __('Immediately disable this user account')));\n        echo $this->Form->input('notify', array(\n            'label' => __('Send credentials automatically'),\n            'type' => 'checkbox',\n            'checked' => isset($this->request->data['User']['notify']) ? $this->request->data['User']['notify'] : true\n        ));\n    ?>\n        </div>\n    </fieldset>\n<?php\n    echo $this->Form->button(__('Create user'), array('class' => 'btn btn-primary'));\n    echo $this->Form->end();?>\n</div>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'admin', 'menuItem' => 'addUser'));\n?>\n<script type=\"text/javascript\">\nvar syncRoles = <?php echo json_encode($syncRoles); ?>;\n$(function() {\n    syncUserSelected();\n    $('#UserRoleId').change(function() {\n        syncUserSelected();\n    });\n    checkUserPasswordEnabled();\n    checkUserExternalAuth();\n    $('#UserEnablePassword').change(function() {\n        checkUserPasswordEnabled();\n    });\n    $('#UserExternalAuthRequired').change(function() {\n        checkUserExternalAuth();\n    });\n});\n</script>\n", "<div class=\"users form\">\n<?php echo $this->Form->create('User', array('novalidate' => true));?>\n    <fieldset>\n        <legend><?php echo __('Admin Edit User'); ?></legend>\n    <?php\n        echo $this->Form->input('email', [\n            'disabled' => !$canChangeLogin,\n            'data-disabled-reason' => !$canChangePassword ? __('User login change is disabled on this instance') : '',\n        ]);\n    ?>\n        <div class=\"clear\"></div>\n    <?php\n        $password = true;\n        if (Configure::read('Plugin.CustomAuth_enable')) {\n            if (Configure::read('Plugin.CustomAuth_required')) {\n                $password = false;\n            } else {\n                $userType = Configure::read('Plugin.CustomAuth_name') ? Configure::read('Plugin.CustomAuth_name') : 'External authentication';\n                echo $this->Form->input('external_auth_required', array('type' => 'checkbox', 'label' => h($userType) . ' user'));\n            }\n            echo sprintf(\n                '<div class=\"clear\"></div><div %s>%s</div>',\n                (\n                    (\n                        !empty(Configure::read('Plugin.CustomAuth_required')) &&\n                        !empty(Configure::read('Plugin.CustomAuth_enable'))\n                    ) ? '' : sprintf('id=\"externalAuthDiv\"')\n                ),\n                $this->Form->input('external_auth_key', array('type' => 'text'))\n            );\n        }\n    ?>\n    <div class=\"clear\"></div>\n    <div id=\"passwordDivDiv\" style=\"<?= (!empty(Configure::read('Plugin.CustomAuth_required')) && !empty(Configure::read('Plugin.CustomAuth_enable'))) ? 'display:none;' : ''?>\">\n        <?php\n            echo $this->Form->input('enable_password', [\n                'type' => 'checkbox',\n                'label' => __('Set password'),\n                'disabled' => !$canChangePassword,\n                'data-disabled-reason' => !$canChangePassword ? __('User password change is disabled on this instance') : '',\n            ]);\n        ?>\n        <div id=\"PasswordDiv\">\n            <div class=\"clear\"></div>\n            <?php\n                $passwordPopover = '<span class=\"blue bold\">' . __('Length') .'</span>: ' . h($length) . '<br>';\n                $passwordPopover .= '<span class=\"blue bold\">' . __('Complexity') .'</span>: ' . h($complexity);\n                echo $this->Form->input('password', array(\n                    'label' => __('Password') . ' <span id=\"PasswordPopover\" data-content=\"' . h($passwordPopover) .'\" class=\"fas fa-info-circle\"></span>'\n                ));\n                echo $this->Form->input('confirm_password', array('type' => 'password', 'div' => array('class' => 'input password required')));\n            ?>\n        </div>\n    </div>\n    <div class=\"clear\"></div>\n    <?php\n        if ($isSiteAdmin) {\n            echo $this->Form->input('org_id', array(\n                    'options' => $orgs,\n                    'label' => __('Organisation'),\n            ));\n        }\n        echo $this->Form->input('role_id', array(\n            'label' => __('Role'),\n            'div' => empty(Configure::read('Security.advanced_authkeys')) ? null : 'input clear'\n        ));\n        if (empty(Configure::read('Security.advanced_authkeys'))) {\n            $authkeyLabel = __('Authkey') . ' <a class=\"useCursorPointer\" onclick=\"$(\\'#resetAuthKeyForm\\').submit();\">' . __('(Reset)') . '</a>';\n            echo $this->Form->input('authkey', array('disabled' => true, 'div' => 'input clear', 'label' => $authkeyLabel));\n        }\n        echo $this->Form->input('nids_sid', ['label' => __('NIDS SID')]);\n    ?>\n        <div id=\"syncServers\" class=\"hidden\">\n    <?php\n            echo $this->Form->input('server_id', array('label' => __('Sync user for'), 'div' => 'clear', 'options' => $servers));\n    ?>\n        </div>\n    <?php\n        echo $this->Form->input('gpgkey', array('label' => __('PGP key'), 'div' => 'clear', 'class' => 'input-xxlarge', 'placeholder' => __('Paste the user\\'s PGP key here or try to retrieve it from the CIRCL key server by clicking on \"Fetch PGP key\" below.')));\n    ?>\n        <div class=\"clear\"><span role=\"button\" tabindex=\"0\" aria-label=\"<?php echo __('Fetch the user\\'s PGP key');?>\" onClick=\"lookupPGPKey('UserEmail');\" class=\"btn btn-inverse\" style=\"margin-bottom:10px;\"><?php echo __('Fetch PGP key');?></span></div>\n    <?php\n        if (Configure::read('SMIME.enabled')) {\n            echo $this->Form->input('certif_public', array('label' => __('S/MIME Public certificate (PEM format)'), 'div' => 'clear', 'class' => 'input-xxlarge', 'placeholder' => __('Paste the user\\'s S/MIME public key in PEM format here.')));\n        }\n        echo '<div class=\"user-edit-checkboxes\">';\n        echo $this->Form->input('termsaccepted', array('type' => 'checkbox', 'label' => __('Terms accepted')));\n        echo $this->Form->input('change_pw', [\n            'type' => 'checkbox',\n            'label' => __('User must change password'),\n            'disabled' => !$canChangePassword,\n            'data-disabled-reason' => !$canChangePassword ? __('User password change is disabled on this instance') : '',\n        ]);\n        echo $this->Form->input('autoalert', array('label' => __('Receive email alerts when events are published'), 'type' => 'checkbox'));\n        echo $this->Form->input('contactalert', array('label' => __('Receive email alerts from \"Contact reporter\" requests'), 'type' => 'checkbox'));\n        echo $this->Form->input('disabled', array('type' => 'checkbox', 'label' => __('Immediately disable this user account')));\n        echo '</div>';\n    ?>\n    </fieldset>\n    <div style=\"border-bottom: 1px solid #e5e5e5;width:100%;\">&nbsp;</div>\n    <div class=\"clear\" style=\"margin-top:10px;\">\n<?php\n    if (Configure::read('Security.require_password_confirmation')) {\n        echo $this->Form->input('current_password', array('type' => 'password', 'div' => false, 'class' => 'input password required', 'label' => __('Confirm with your current password')));\n    }\n?>\n    </div>\n<?php\n    echo $this->Form->button(__('Edit user'), array('class' => 'btn btn-primary'));\n    echo $this->Form->end();\n    echo $this->Form->create('User', array(\n        'url' => array('controller' => 'users', 'action' => 'resetauthkey', $id),\n        'id' => 'resetAuthKeyForm'\n    ));\n    echo $this->Form->end();\n?>\n</div>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'admin', 'menuItem' => 'editUser'));\n?>\n\n<script type=\"text/javascript\">\n    var syncRoles = <?php echo json_encode($syncRoles); ?>;\n    $(function() {\n        syncUserSelected();\n        $('#UserRoleId').change(function() {\n            syncUserSelected();\n        });\n        checkUserPasswordEnabled();\n        checkUserExternalAuth();\n        $('#UserEnablePassword').change(function() {\n            checkUserPasswordEnabled();\n        });\n        $('#UserExternalAuthRequired').change(function() {\n            checkUserExternalAuth();\n        });\n    });\n</script>\n"], "filenames": ["app/View/Users/admin_add.ctp", "app/View/Users/admin_edit.ctp"], "buggy_code_start_loc": [16, 19], "buggy_code_end_loc": [17, 20], "fixing_code_start_loc": [16, 19], "fixing_code_end_loc": [17, 20], "type": "CWE-79", "message": "An issue was discovered in MISP before 2.4.156. A malicious site administrator could store an XSS payload in the custom auth name. This would be executed each time the administrator modifies a user.", "other": {"cve": {"id": "CVE-2022-27244", "sourceIdentifier": "cve@mitre.org", "published": "2022-03-18T18:15:16.800", "lastModified": "2022-03-25T18:35:33.907", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in MISP before 2.4.156. A malicious site administrator could store an XSS payload in the custom auth name. This would be executed each time the administrator modifies a user."}, {"lang": "es", "value": "Se ha detectado un problema en MISP versiones anteriores a 2.4.156. Un administrador de sitio malicioso podr\u00eda almacenar una carga \u00fatil de tipo XSS en el nombre de autenticaci\u00f3n personalizado. Esto ser\u00eda ejecutado cada vez que el administrador modificara un usuario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.156", "matchCriteriaId": "15083894-6DA0-48CC-816E-8387B1B969FD"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/61d4d3670593b78e4dab7a11eb620b7a372f30e6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/61d4d3670593b78e4dab7a11eb620b7a372f30e6"}}