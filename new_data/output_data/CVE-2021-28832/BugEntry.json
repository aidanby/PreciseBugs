{"buggy_code": ["{\n  \"name\": \"vim\",\n  \"displayName\": \"Vim\",\n  \"description\": \"Vim emulation for Visual Studio Code\",\n  \"icon\": \"images/icon.png\",\n  \"version\": \"1.18.9\",\n  \"publisher\": \"vscodevim\",\n  \"galleryBanner\": {\n    \"color\": \"#e3f4ff\",\n    \"theme\": \"light\"\n  },\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"vim\",\n    \"vi\",\n    \"vscodevim\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/VSCodeVim/Vim.git\"\n  },\n  \"homepage\": \"https://github.com/VSCodeVim/Vim\",\n  \"bugs\": {\n    \"url\": \"https://github.com/VSCodeVim/Vim/issues\"\n  },\n  \"engines\": {\n    \"vscode\": \"^1.42.0\"\n  },\n  \"categories\": [\n    \"Other\",\n    \"Keymaps\"\n  ],\n  \"extensionKind\": [\n    \"ui\",\n    \"web\",\n    \"workspace\"\n  ],\n  \"sideEffects\": false,\n  \"activationEvents\": [\n    \"*\",\n    \"onCommand:type\"\n  ],\n  \"qna\": \"https://vscodevim.herokuapp.com/\",\n  \"main\": \"./out/extension\",\n  \"browser\": \"./out/extensionWeb\",\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"toggleVim\",\n        \"title\": \"Vim: Toggle Vim Mode\"\n      },\n      {\n        \"command\": \"vim.showQuickpickCmdLine\",\n        \"title\": \"Vim: Show Command Line\"\n      },\n      {\n        \"command\": \"vim.editVimrc\",\n        \"title\": \"Vim: Edit .vimrc\"\n      }\n    ],\n    \"keybindings\": [\n      {\n        \"key\": \"Escape\",\n        \"command\": \"extension.vim_escape\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"Escape\",\n        \"command\": \"notebook.cell.quitEdit\",\n        \"when\": \"inputFocus && notebookEditorFocused && !editorHasSelection && !editorHoverVisible && vim.active && vim.mode == 'Normal'\"\n      },\n      {\n        \"key\": \"Home\",\n        \"command\": \"extension.vim_home\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"End\",\n        \"command\": \"extension.vim_end\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"Insert\",\n        \"command\": \"extension.vim_insert\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"Backspace\",\n        \"command\": \"extension.vim_backspace\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"Delete\",\n        \"command\": \"extension.vim_delete\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"tab\",\n        \"command\": \"extension.vim_tab\",\n        \"when\": \"editorFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"shift+tab\",\n        \"command\": \"extension.vim_shift+tab\",\n        \"when\": \"editorFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"left\",\n        \"command\": \"extension.vim_left\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"right\",\n        \"command\": \"extension.vim_right\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"up\",\n        \"command\": \"extension.vim_up\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetVisible && !parameterHintsVisible\"\n      },\n      {\n        \"key\": \"down\",\n        \"command\": \"extension.vim_down\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetVisible && !parameterHintsVisible\"\n      },\n      {\n        \"key\": \"g g\",\n        \"command\": \"list.focusFirst\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"h\",\n        \"command\": \"list.collapse\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"j\",\n        \"command\": \"list.focusDown\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"k\",\n        \"command\": \"list.focusUp\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"l\",\n        \"command\": \"list.select\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"o\",\n        \"command\": \"list.toggleExpand\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"/\",\n        \"command\": \"list.toggleKeyboardNavigation\",\n        \"when\": \"listFocus && !inputFocus && listSupportsKeyboardNavigation\"\n      },\n      {\n        \"key\": \"ctrl+a\",\n        \"command\": \"extension.vim_ctrl+a\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+b\",\n        \"command\": \"extension.vim_ctrl+b\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-b> && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+c\",\n        \"command\": \"extension.vim_ctrl+c\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-c> && !inDebugRepl && vim.overrideCtrlC\"\n      },\n      {\n        \"key\": \"ctrl+d\",\n        \"command\": \"extension.vim_ctrl+d\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+d\",\n        \"command\": \"list.focusPageDown\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"ctrl+e\",\n        \"command\": \"extension.vim_ctrl+e\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+f\",\n        \"command\": \"extension.vim_ctrl+f\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-f> && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+g\",\n        \"command\": \"extension.vim_ctrl+g\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-g> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+h\",\n        \"command\": \"extension.vim_ctrl+h\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+i\",\n        \"command\": \"extension.vim_ctrl+i\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+j\",\n        \"command\": \"extension.vim_ctrl+j\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+k\",\n        \"command\": \"extension.vim_ctrl+k\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+l\",\n        \"command\": \"extension.vim_navigateCtrlL\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+m\",\n        \"command\": \"extension.vim_ctrl+m\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-m> && !inDebugRepl || vim.mode == 'CommandlineInProgress' && vim.active && vim.use<C-m> && !inDebugRepl || vim.mode == 'SearchInProgressMode' && vim.active && vim.use<C-m> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+n\",\n        \"command\": \"extension.vim_ctrl+n\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl || vim.mode == 'CommandlineInProgress' && vim.active && vim.use<C-n> && !inDebugRepl || vim.mode == 'SearchInProgressMode' && vim.active && vim.use<C-n> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+o\",\n        \"command\": \"extension.vim_ctrl+o\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+p\",\n        \"command\": \"extension.vim_ctrl+p\",\n        \"when\": \"suggestWidgetVisible && vim.active && vim.use<C-p> && !inDebugRepl || vim.mode == 'CommandlineInProgress' && vim.active && vim.use<C-p> && !inDebugRepl || vim.mode == 'SearchInProgressMode' && vim.active && vim.use<C-p> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+q\",\n        \"command\": \"extension.vim_winCtrlQ\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-q> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+r\",\n        \"command\": \"extension.vim_ctrl+r\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+t\",\n        \"command\": \"extension.vim_ctrl+t\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+u\",\n        \"command\": \"extension.vim_ctrl+u\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+u\",\n        \"command\": \"list.focusPageUp\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"ctrl+v\",\n        \"command\": \"extension.vim_ctrl+v\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-v> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+w\",\n        \"command\": \"extension.vim_ctrl+w\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+x\",\n        \"command\": \"extension.vim_ctrl+x\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+y\",\n        \"command\": \"extension.vim_ctrl+y\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+6\",\n        \"command\": \"extension.vim_ctrl+6\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-6> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+^\",\n        \"command\": \"extension.vim_ctrl+^\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-^> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+[\",\n        \"command\": \"extension.vim_ctrl+[\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+]\",\n        \"command\": \"extension.vim_ctrl+]\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-]> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+shift+2\",\n        \"command\": \"extension.vim_ctrl+shift+2\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-shift+2>\"\n      },\n      {\n        \"key\": \"ctrl+up\",\n        \"command\": \"extension.vim_ctrl+up\",\n        \"when\": \"editorTextFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+down\",\n        \"command\": \"extension.vim_ctrl+down\",\n        \"when\": \"editorTextFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+left\",\n        \"command\": \"extension.vim_ctrl+left\",\n        \"when\": \"editorTextFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+right\",\n        \"command\": \"extension.vim_ctrl+right\",\n        \"when\": \"editorTextFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+pagedown\",\n        \"command\": \"extension.vim_ctrl+pagedown\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-pagedown> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+pageup\",\n        \"command\": \"extension.vim_ctrl+pageup\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-pageup> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+space\",\n        \"command\": \"extension.vim_ctrl+space\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-space> && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"shift+G\",\n        \"command\": \"list.focusLast\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"ctrl+backspace\",\n        \"command\": \"extension.vim_ctrl+backspace\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-BS> && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"shift+backspace\",\n        \"command\": \"extension.vim_shift+backspace\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<S-BS> && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"cmd+left\",\n        \"command\": \"extension.vim_cmd+left\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-left> && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"cmd+right\",\n        \"command\": \"extension.vim_cmd+right\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-right> && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"cmd+a\",\n        \"command\": \"extension.vim_cmd+a\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-a> && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"cmd+c\",\n        \"command\": \"extension.vim_cmd+c\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-c> && vim.overrideCopy && !inDebugRepl\"\n      },\n      {\n        \"key\": \"cmd+d\",\n        \"command\": \"extension.vim_cmd+d\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"cmd+v\",\n        \"command\": \"extension.vim_cmd+v\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-v> && vim.mode == 'CommandlineInProgress' !inDebugRepl || editorTextFocus && vim.active && vim.use<D-v> && vim.mode == 'SearchInProgressMode' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+alt+down\",\n        \"linux\": \"shift+alt+down\",\n        \"mac\": \"cmd+alt+down\",\n        \"command\": \"extension.vim_cmd+alt+down\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+alt+up\",\n        \"linux\": \"shift+alt+up\",\n        \"mac\": \"cmd+alt+up\",\n        \"command\": \"extension.vim_cmd+alt+up\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"j\",\n        \"command\": \"notebook.focusNextEditor\",\n        \"when\": \"vim.mode == 'Normal' && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'\"\n      },\n      {\n        \"key\": \"k\",\n        \"command\": \"notebook.focusPreviousEditor\",\n        \"when\": \"vim.mode == 'Normal' && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'\"\n      }\n    ],\n    \"configuration\": {\n      \"title\": \"Vim\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"vim.debug.silent\": {\n          \"type\": \"boolean\",\n          \"description\": \"If true, all logs are suppressed.\",\n          \"default\": false\n        },\n        \"vim.debug.loggingLevelForAlert\": {\n          \"type\": \"string\",\n          \"description\": \"Maximum level of messages to present as VS Code information window.\",\n          \"default\": \"error\",\n          \"enum\": [\n            \"error\",\n            \"warn\",\n            \"info\",\n            \"verbose\",\n            \"debug\"\n          ]\n        },\n        \"vim.debug.loggingLevelForConsole\": {\n          \"type\": \"string\",\n          \"description\": \"Maximum level of messages to log to console. Logs are visible in developer tools.\",\n          \"default\": \"error\",\n          \"enum\": [\n            \"error\",\n            \"warn\",\n            \"info\",\n            \"verbose\",\n            \"debug\"\n          ]\n        },\n        \"vim.normalModeKeyBindings\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Remapped keys in Normal mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\"\n        },\n        \"vim.normalModeKeyBindingsNonRecursive\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Non-recursive remapped keys in Normal mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\"\n        },\n        \"vim.operatorPendingModeKeyBindings\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Remapped keys in OperatorPending mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\"\n        },\n        \"vim.operatorPendingModeKeyBindingsNonRecursive\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Non-recursive remapped keys in OperatorPending mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\"\n        },\n        \"vim.useCtrlKeys\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable some Vim Ctrl key commands that override otherwise common operations, like `Ctrl+C`.\",\n          \"default\": true\n        },\n        \"vim.leader\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"What key should `<leader>` map to in remappings?\",\n          \"default\": \"\\\\\"\n        },\n        \"vim.searchHighlightColor\": {\n          \"type\": \"string\",\n          \"description\": \"Color of the search highlight.\"\n        },\n        \"vim.searchHighlightTextColor\": {\n          \"type\": \"string\",\n          \"description\": \"Color of the search highlight text.\"\n        },\n        \"vim.highlightedyank.enable\": {\n          \"type\": \"boolean\",\n          \"description\": \"Enable highlighting when yanking.\",\n          \"default\": false\n        },\n        \"vim.highlightedyank.color\": {\n          \"type\": \"string\",\n          \"description\": \"Color of the yank highlight.\",\n          \"default\": \"rgba(250, 240, 170, 0.5)\"\n        },\n        \"vim.highlightedyank.textColor\": {\n          \"type\": \"string\",\n          \"description\": \"Color of the yank highlight text.\"\n        },\n        \"vim.highlightedyank.duration\": {\n          \"type\": \"number\",\n          \"description\": \"Duration in milliseconds of the yank highlight.\",\n          \"default\": 200,\n          \"minimum\": 1\n        },\n        \"vim.useSystemClipboard\": {\n          \"type\": \"boolean\",\n          \"description\": \"Use system clipboard for unnamed register.\",\n          \"default\": false\n        },\n        \"vim.overrideCopy\": {\n          \"type\": \"boolean\",\n          \"description\": \"Override VS Code's copy command with our own copy command, which works better with VSCodeVim. Turn this off if copying is not working.\",\n          \"default\": true\n        },\n        \"vim.insertModeKeyBindings\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Remapped keys in Insert mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\"\n        },\n        \"vim.insertModeKeyBindingsNonRecursive\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Non-recursive keybinding overrides to use for Insert mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\"\n        },\n        \"vim.visualModeKeyBindings\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Remapped keys in Visual mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\"\n        },\n        \"vim.visualModeKeyBindingsNonRecursive\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Non-recursive keybinding overrides to use for Visual mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\"\n        },\n        \"vim.commandLineModeKeyBindings\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Remapped keys in command line mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\"\n        },\n        \"vim.commandLineModeKeyBindingsNonRecursive\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Non-recursive keybinding overrides to use for command line mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\"\n        },\n        \"vim.textwidth\": {\n          \"type\": \"number\",\n          \"markdownDescription\": \"Width to word-wrap to when using `gq`.\",\n          \"default\": 80,\n          \"minimum\": 1\n        },\n        \"vim.timeout\": {\n          \"type\": \"number\",\n          \"description\": \"Timeout in milliseconds for remapped commands.\",\n          \"default\": 1000,\n          \"minimum\": 0\n        },\n        \"vim.maxmapdepth\": {\n          \"type\": \"number\",\n          \"description\": \"Maximum number of times a mapping is done without resulting in a character to be used.\",\n          \"default\": 1000,\n          \"minimum\": 0\n        },\n        \"vim.scroll\": {\n          \"type\": \"number\",\n          \"markdownDescription\": \"Number of lines to scroll with `Ctrl-U` and `Ctrl-D` commands. Set to 0 to use a half page scroll.\",\n          \"default\": 0,\n          \"minimum\": 0\n        },\n        \"vim.showcmd\": {\n          \"type\": \"boolean\",\n          \"description\": \"Show the text of any command you are in the middle of writing.\",\n          \"default\": true\n        },\n        \"vim.showmodename\": {\n          \"type\": \"boolean\",\n          \"description\": \"Show the name of the current mode in the statusbar.\",\n          \"default\": true\n        },\n        \"vim.iskeyword\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"Keywords contain alphanumeric characters and '_'. If not configured, `#editor.wordSeparators#` is used.\"\n        },\n        \"vim.ignorecase\": {\n          \"type\": \"boolean\",\n          \"description\": \"Ignore case in search patterns.\",\n          \"default\": true\n        },\n        \"vim.smartcase\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Override the `ignorecase` option if the search pattern contains upper case characters.\",\n          \"default\": true\n        },\n        \"vim.camelCaseMotion.enable\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable the [CamelCaseMotion](https://github.com/bkad/CamelCaseMotion) plugin for Vim.\",\n          \"default\": false\n        },\n        \"vim.easymotion\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable the [EasyMotion](https://github.com/easymotion/vim-easymotion) plugin for Vim.\",\n          \"default\": false\n        },\n        \"vim.easymotionMarkerBackgroundColor\": {\n          \"type\": \"string\",\n          \"default\": \"#0000\",\n          \"description\": \"Set a custom background color for EasyMotion markers.\"\n        },\n        \"vim.easymotionMarkerForegroundColorOneChar\": {\n          \"type\": \"string\",\n          \"default\": \"#ff0000\",\n          \"description\": \"Set a custom color for the text on one character long markers.\"\n        },\n        \"vim.easymotionMarkerForegroundColorTwoChar\": {\n          \"type\": \"string\",\n          \"description\": \"Set a custom color for the text on two character long markers.\",\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please don't use this setting, use `#vim.easymotionMarkerForegroundColorTwoCharFirst#` and `#vim.easymotionMarkerForegroundColorTwoCharSecond#` instead.\",\n          \"deprecationMessage\": \"Deprecated: Please don't use this setting, use `#vim.easymotionMarkerForegroundColorTwoCharFirst#` and `#vim.easymotionMarkerForegroundColorTwoCharSecond#` instead.\"\n        },\n        \"vim.easymotionMarkerForegroundColorTwoCharFirst\": {\n          \"type\": \"string\",\n          \"default\": \"#ffb400\",\n          \"description\": \"Set a custom color for the first character on two character long markers.\"\n        },\n        \"vim.easymotionMarkerForegroundColorTwoCharSecond\": {\n          \"type\": \"string\",\n          \"default\": \"#b98300\",\n          \"description\": \"Set a custom color for the second character on two character long markers.\"\n        },\n        \"vim.easymotionIncSearchForegroundColor\": {\n          \"type\": \"string\",\n          \"default\": \"#7fbf00\",\n          \"description\": \"Set a custom color for the easymotion search n-character (default `<leader><leader>/`).\"\n        },\n        \"vim.easymotionDimColor\": {\n          \"type\": \"string\",\n          \"default\": \"#777777\",\n          \"description\": \"Set a custom color for the easymotion dimmed characters when `#vim.easymotionDimBackground#` is set to true.\"\n        },\n        \"vim.easymotionMarkerWidthPerChar\": {\n          \"type\": \"number\",\n          \"description\": \"Set the width (in pixels) allocated to each character in the match.\",\n          \"default\": 8,\n          \"minimum\": 1,\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please don't use this setting; the extension now lets vscode calculate the correct width.\",\n          \"deprecationMessage\": \"Deprecated: Please don't use this setting; the extension now lets vscode calculate the correct width.\"\n        },\n        \"vim.easymotionDimBackground\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether to dim other text while markers are visible.\",\n          \"default\": true\n        },\n        \"vim.easymotionMarkerFontFamily\": {\n          \"type\": \"string\",\n          \"description\": \"Set the font family of the marker text.\",\n          \"default\": \"\",\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please don't use this setting; the extension now uses `#editor.fontFamily#` instead.\",\n          \"deprecationMessage\": \"Deprecated: Please don't use this setting; the extension now uses editor.fontFamily instead.\"\n        },\n        \"vim.easymotionMarkerFontSize\": {\n          \"type\": \"string\",\n          \"description\": \"Set the font size of the marker text.\",\n          \"default\": \"\",\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please don't use this setting; the extension now uses `#editor.fontSize#` instead.\",\n          \"deprecationMessage\": \"Deprecated: Please don't use this setting; the extension now uses editor.fontSize instead.\"\n        },\n        \"vim.easymotionMarkerFontWeight\": {\n          \"type\": \"string\",\n          \"description\": \"Set the font weight of the marker text.\",\n          \"default\": \"bold\"\n        },\n        \"vim.easymotionMarkerMargin\": {\n          \"type\": \"number\",\n          \"description\": \"Set the margin around each marker, in pixels.\",\n          \"default\": 0,\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please don't use this setting, it is no longer required.\",\n          \"deprecationMessage\": \"Deprecated: Please don't use this setting, it is no longer required.\"\n        },\n        \"vim.easymotionKeys\": {\n          \"type\": \"string\",\n          \"description\": \"Set the characters used for jump marker name.\",\n          \"default\": \"hklyuiopnm,qwertzxcvbasdgjf;\"\n        },\n        \"vim.easymotionJumpToAnywhereRegex\": {\n          \"type\": \"string\",\n          \"description\": \"Regex matches for JumpToAnywhere motion.\",\n          \"default\": \"\\\\b[A-Za-z0-9]|[A-Za-z0-9]\\\\b|_.|#.|[a-z][A-Z]\"\n        },\n        \"vim.replaceWithRegister\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable the [ReplaceWithRegister](https://github.com/vim-scripts/ReplaceWithRegister) plugin for Vim.\",\n          \"default\": false\n        },\n        \"vim.smartRelativeLine\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"`#editor.lineNumbers#` is determined by the active Vim mode, absolute when in insert mode, relative otherwise.\",\n          \"default\": false\n        },\n        \"vim.sneak\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable the [Sneak](https://github.com/justinmk/vim-sneak) plugin for Vim.\",\n          \"default\": false\n        },\n        \"vim.sneakUseIgnorecaseAndSmartcase\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Case sensitivity is determined by `#vim.ignorecase#` and `#vim.smartcase#`.\",\n          \"default\": false\n        },\n        \"vim.sneakReplacesF\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Use single-character [Sneak](https://github.com/justinmk/vim-sneak) instead of Vim's native `f`.\",\n          \"default\": false\n        },\n        \"vim.surround\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable the [Surround](https://github.com/tpope/vim-surround) plugin for Vim.\",\n          \"default\": true\n        },\n        \"vim.argumentObjectSeparators\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"markdownDescription\": \"Set separators for the argument text object.\",\n          \"default\": [\n            \",\"\n          ]\n        },\n        \"vim.argumentObjectOpeningDelimiters\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"markdownDescription\": \"Set opening delimiters for the argument text object.\",\n          \"default\": [\n            \"(\",\n            \"[\"\n          ]\n        },\n        \"vim.argumentObjectClosingDelimiters\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"markdownDescription\": \"Set closing delimiters for the argument text object.\",\n          \"default\": [\n            \")\",\n            \"]\"\n          ]\n        },\n        \"vim.hlsearch\": {\n          \"type\": \"boolean\",\n          \"description\": \"Show all matches of the most recent search pattern.\",\n          \"default\": false\n        },\n        \"vim.incsearch\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Show where a `/` or `?` search matches as you type it.\",\n          \"default\": true\n        },\n        \"vim.history\": {\n          \"type\": \"number\",\n          \"description\": \"How much search or command history should be remembered.\",\n          \"default\": 50,\n          \"minimum\": 1\n        },\n        \"vim.autoindent\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indent code automatically.\",\n          \"default\": true\n        },\n        \"vim.startInInsertMode\": {\n          \"type\": \"boolean\",\n          \"description\": \"Start in Insert mode.\"\n        },\n        \"vim.handleKeys\": {\n          \"type\": \"object\",\n          \"description\": \"Delegate certain key combinations back to VSCode to be handled natively.\",\n          \"default\": {\n            \"<C-d>\": true\n          }\n        },\n        \"vim.statusBarColorControl\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Allow VSCodeVim to change status bar color based on mode. **NOTE:** Using this feature will have a negative impact on performance.\",\n          \"default\": false\n        },\n        \"vim.statusBarColors.normal\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in Normal mode.\",\n          \"default\": \"#005f5f\"\n        },\n        \"vim.statusBarColors.insert\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in Insert mode.\",\n          \"default\": \"#5f0000\"\n        },\n        \"vim.statusBarColors.visual\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in Visual mode.\",\n          \"default\": \"#5f00af\"\n        },\n        \"vim.statusBarColors.visualline\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in VisualLine mode.\",\n          \"default\": \"#005f5f\"\n        },\n        \"vim.statusBarColors.visualblock\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in VisualBlock mode.\",\n          \"default\": \"#86592d\"\n        },\n        \"vim.statusBarColors.replace\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in Replace mode.\",\n          \"default\": \"#00000\"\n        },\n        \"vim.statusBarColors.commandlineinprogress\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in CommandLineInProgress mode.\",\n          \"default\": \"#007acc\"\n        },\n        \"vim.statusBarColors.searchinprogressmode\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in SearchInProgress mode.\",\n          \"default\": \"#007acc\"\n        },\n        \"vim.statusBarColors.easymotionmode\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in EasyMotion mode.\",\n          \"default\": \"#007acc\"\n        },\n        \"vim.statusBarColors.easymotioninputmode\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in EasyMotionInput mode.\",\n          \"default\": \"#007acc\"\n        },\n        \"vim.statusBarColors.surroundinputmode\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in SurroundInput mode.\",\n          \"default\": \"#007acc\"\n        },\n        \"vim.visualstar\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"In Visual mode, start a search with `*` or `#` using the current selection.\",\n          \"default\": false\n        },\n        \"vim.changeWordIncludesWhitespace\": {\n          \"type\": \"boolean\",\n          \"description\": \"Includes trailing whitespace when changing word.\",\n          \"default\": false\n        },\n        \"vim.foldfix\": {\n          \"type\": \"boolean\",\n          \"description\": \"Uses a hack to move around folds properly.\",\n          \"default\": false\n        },\n        \"vim.mouseSelectionGoesIntoVisualMode\": {\n          \"type\": \"boolean\",\n          \"description\": \"If enabled, dragging with the mouse activates Visual mode.\",\n          \"default\": true\n        },\n        \"vim.disableExtension\": {\n          \"type\": \"boolean\",\n          \"description\": \"Disables the VSCodeVim extension. The extension will continue to be loaded and activated, but Vim functionality will be disabled.\",\n          \"default\": false\n        },\n        \"vim.enableNeovim\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Use Neovim to execute Ex commands. You should restart VS Code after enabling/disabling this for the changes to take effect. **NOTE:** Neovim version 0.2.0 or greater must be installed, and if the executable is not on your PATH, `#vim.neovimPath#` must be set.\",\n          \"default\": false\n        },\n        \"vim.neovimPath\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"Path to Neovim executable. For example, `/usr/bin/nvim`, or  `C:\\\\Program Files\\\\Neovim\\\\bin\\\\nvim.exe`.\",\n          \"default\": \"\",\n          \"scope\": \"machine-overridable\"\n        },\n        \"vim.neovimUseConfigFile\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Use a config file for Neovim, specified by `vim.neovimConfigPath`.\",\n          \"default\": false\n        },\n        \"vim.neovimConfigPath\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"Path to Neovim configuration file. `vim.neovimUseConfigFile` must be enabled. If path is left blank, Neovim will use its default config path, i.e. `~/.config/nvim/init.vim` or 'C:\\\\Users\\\\USERNAME\\\\AppData\\\\Local\\\\nvim\\\\init.vim'.\",\n          \"default\": \"\",\n          \"scope\": \"machine-overridable\"\n        },\n        \"vim.vimrc.enable\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Use key mappings from a `.vimrc` file.\",\n          \"default\": false\n        },\n        \"vim.vimrc.path\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"Path to a Vim configuration file. If unset, it will check for `$HOME/.vimrc`, `$HOME/_vimrc`, and `$HOME/.config/nvim/init.vim`, in that order.\"\n        },\n        \"vim.substituteGlobalFlag\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Automatically apply the global flag, `/g`, to substitute commands. When set to true, use `/g` to mean only first match should be replaced.\",\n          \"default\": false,\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please use `#vim.gdefault#` instead.\",\n          \"deprecationMessage\": \"Deprecated: Please use vim.gdefault instead.\"\n        },\n        \"vim.gdefault\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Automatically apply the global flag, `/g`, to substitute commands. When set to true, use `/g` to mean only first match should be replaced.\",\n          \"default\": false\n        },\n        \"vim.cursorStylePerMode.normal\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for Normal mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.cursorStylePerMode.insert\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for Insert mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.cursorStylePerMode.replace\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for Replace mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.cursorStylePerMode.visual\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for Visual mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.cursorStylePerMode.visualline\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for VisualLine mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.cursorStylePerMode.visualblock\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for VisualBlock mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.autoSwitchInputMethod.enable\": {\n          \"type\": \"boolean\",\n          \"description\": \"If enabled, the input method switches automatically when the mode changes.\",\n          \"default\": false\n        },\n        \"vim.autoSwitchInputMethod.defaultIM\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"The input method for your normal mode, find more information [here](https://github.com/VSCodeVim/Vim#input-method).\",\n          \"default\": \"\"\n        },\n        \"vim.autoSwitchInputMethod.switchIMCmd\": {\n          \"type\": \"string\",\n          \"description\": \"The shell command to switch input method.\",\n          \"default\": \"/path/to/im-select {im}\"\n        },\n        \"vim.autoSwitchInputMethod.obtainIMCmd\": {\n          \"type\": \"string\",\n          \"description\": \"The shell command to get current input method.\",\n          \"default\": \"/path/to/im-select\"\n        },\n        \"vim.whichwrap\": {\n          \"type\": \"string\",\n          \"description\": \"Comma-separated list of motion keys that should wrap to next/previous line.\",\n          \"default\": \"b,s\"\n        },\n        \"vim.report\": {\n          \"type\": \"number\",\n          \"description\": \"Threshold for reporting number of lines changed.\",\n          \"default\": 2,\n          \"minimum\": 1\n        },\n        \"vim.digraphs\": {\n          \"type\": \"object\",\n          \"description\": \"Custom digraph shortcuts for inserting special characters, expressed as UTF16 code points.\",\n          \"default\": {}\n        },\n        \"vim.wrapscan\": {\n          \"type\": \"boolean\",\n          \"description\": \"Searches wrap around the end of the file.\",\n          \"default\": true\n        },\n        \"vim.startofline\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"When `true` the commands listed below move the cursor to the first non-blank of the line.  When `false` the cursor is kept in the same column (if possible).  This applies to the commands: `<C-d>`, `<C-u>`, `<C-b>`, `<C-f>`, `G`, `H`, `M`, `L`, `gg`, and to the commands `d`, `<<` and `>>` with a linewise operator.\",\n          \"default\": true\n        },\n        \"vim.showMarksInGutter\": {\n          \"type\": \"boolean\",\n          \"description\": \"Show the currently set mark(s) in the gutter.\",\n          \"default\": false\n        }\n      }\n    },\n    \"languages\": [\n      {\n        \"id\": \"vimrc\",\n        \"extensions\": [\n          \".vimrc\"\n        ],\n        \"configuration\": \"./language-configuration.json\"\n      }\n    ],\n    \"grammars\": [\n      {\n        \"language\": \"vimrc\",\n        \"scopeName\": \"source.vimrc\",\n        \"path\": \"./syntaxes/vimrc.tmLanguage.json\"\n      }\n    ]\n  },\n  \"scripts\": {\n    \"vscode:prepublish\": \"gulp build\",\n    \"build\": \"gulp build\",\n    \"test\": \"node ./out/test/runTest.js\",\n    \"forceprettier\": \"gulp forceprettier\"\n  },\n  \"dependencies\": {\n    \"diff-match-patch\": \"1.0.5\",\n    \"lodash\": \"^4.17.20\",\n    \"neovim\": \"4.9.0\",\n    \"path-browserify\": \"1.0.1\",\n    \"source-map-support\": \"0.5.19\",\n    \"untildify\": \"4.0.0\",\n    \"winston\": \"3.3.3\",\n    \"winston-console-for-electron\": \"0.0.6\",\n    \"winston-transport\": \"4.4.0\"\n  },\n  \"devDependencies\": {\n    \"@types/diff\": \"5.0.0\",\n    \"@types/diff-match-patch\": \"1.0.32\",\n    \"@types/glob\": \"7.1.3\",\n    \"@types/lodash\": \"4.14.168\",\n    \"@types/mocha\": \"8.2.1\",\n    \"@types/node\": \"12.20.6\",\n    \"@types/sinon\": \"9.0.11\",\n    \"@types/source-map-support\": \"0.5.3\",\n    \"@types/vscode\": \"1.42.0\",\n    \"clean-webpack-plugin\": \"3.0.0\",\n    \"event-stream\": \"4.0.1\",\n    \"fork-ts-checker-webpack-plugin\": \"6.2.0\",\n    \"gulp\": \"4.0.2\",\n    \"gulp-bump\": \"3.2.0\",\n    \"gulp-git\": \"2.10.1\",\n    \"gulp-sourcemaps\": \"3.0.0\",\n    \"gulp-tag-version\": \"1.3.1\",\n    \"gulp-tslint\": \"8.1.4\",\n    \"gulp-typescript\": \"5.0.1\",\n    \"minimist\": \"1.2.5\",\n    \"mocha\": \"8.3.2\",\n    \"plugin-error\": \"1.0.1\",\n    \"prettier\": \"2.2.1\",\n    \"sinon\": \"9.2.4\",\n    \"ts-loader\": \"8.0.18\",\n    \"tslint\": \"6.1.3\",\n    \"typescript\": \"4.2.3\",\n    \"vsce\": \"1.87.0\",\n    \"vscode-test\": \"1.5.1\",\n    \"webpack\": \"5.26.3\",\n    \"webpack-cli\": \"4.5.0\",\n    \"webpack-merge\": \"5.7.3\",\n    \"webpack-stream\": \"6.1.2\"\n  }\n}\n"], "fixing_code": ["{\n  \"name\": \"vim\",\n  \"displayName\": \"Vim\",\n  \"description\": \"Vim emulation for Visual Studio Code\",\n  \"icon\": \"images/icon.png\",\n  \"version\": \"1.18.9\",\n  \"publisher\": \"vscodevim\",\n  \"galleryBanner\": {\n    \"color\": \"#e3f4ff\",\n    \"theme\": \"light\"\n  },\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"vim\",\n    \"vi\",\n    \"vscodevim\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/VSCodeVim/Vim.git\"\n  },\n  \"homepage\": \"https://github.com/VSCodeVim/Vim\",\n  \"bugs\": {\n    \"url\": \"https://github.com/VSCodeVim/Vim/issues\"\n  },\n  \"engines\": {\n    \"vscode\": \"^1.42.0\"\n  },\n  \"categories\": [\n    \"Other\",\n    \"Keymaps\"\n  ],\n  \"extensionKind\": [\n    \"ui\",\n    \"web\",\n    \"workspace\"\n  ],\n  \"sideEffects\": false,\n  \"activationEvents\": [\n    \"*\",\n    \"onCommand:type\"\n  ],\n  \"qna\": \"https://vscodevim.herokuapp.com/\",\n  \"main\": \"./out/extension\",\n  \"browser\": \"./out/extensionWeb\",\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"toggleVim\",\n        \"title\": \"Vim: Toggle Vim Mode\"\n      },\n      {\n        \"command\": \"vim.showQuickpickCmdLine\",\n        \"title\": \"Vim: Show Command Line\"\n      },\n      {\n        \"command\": \"vim.editVimrc\",\n        \"title\": \"Vim: Edit .vimrc\"\n      }\n    ],\n    \"keybindings\": [\n      {\n        \"key\": \"Escape\",\n        \"command\": \"extension.vim_escape\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"Escape\",\n        \"command\": \"notebook.cell.quitEdit\",\n        \"when\": \"inputFocus && notebookEditorFocused && !editorHasSelection && !editorHoverVisible && vim.active && vim.mode == 'Normal'\"\n      },\n      {\n        \"key\": \"Home\",\n        \"command\": \"extension.vim_home\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"End\",\n        \"command\": \"extension.vim_end\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"Insert\",\n        \"command\": \"extension.vim_insert\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"Backspace\",\n        \"command\": \"extension.vim_backspace\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"Delete\",\n        \"command\": \"extension.vim_delete\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"tab\",\n        \"command\": \"extension.vim_tab\",\n        \"when\": \"editorFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"shift+tab\",\n        \"command\": \"extension.vim_shift+tab\",\n        \"when\": \"editorFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"left\",\n        \"command\": \"extension.vim_left\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"right\",\n        \"command\": \"extension.vim_right\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"up\",\n        \"command\": \"extension.vim_up\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetVisible && !parameterHintsVisible\"\n      },\n      {\n        \"key\": \"down\",\n        \"command\": \"extension.vim_down\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetVisible && !parameterHintsVisible\"\n      },\n      {\n        \"key\": \"g g\",\n        \"command\": \"list.focusFirst\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"h\",\n        \"command\": \"list.collapse\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"j\",\n        \"command\": \"list.focusDown\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"k\",\n        \"command\": \"list.focusUp\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"l\",\n        \"command\": \"list.select\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"o\",\n        \"command\": \"list.toggleExpand\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"/\",\n        \"command\": \"list.toggleKeyboardNavigation\",\n        \"when\": \"listFocus && !inputFocus && listSupportsKeyboardNavigation\"\n      },\n      {\n        \"key\": \"ctrl+a\",\n        \"command\": \"extension.vim_ctrl+a\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+b\",\n        \"command\": \"extension.vim_ctrl+b\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-b> && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+c\",\n        \"command\": \"extension.vim_ctrl+c\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-c> && !inDebugRepl && vim.overrideCtrlC\"\n      },\n      {\n        \"key\": \"ctrl+d\",\n        \"command\": \"extension.vim_ctrl+d\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+d\",\n        \"command\": \"list.focusPageDown\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"ctrl+e\",\n        \"command\": \"extension.vim_ctrl+e\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+f\",\n        \"command\": \"extension.vim_ctrl+f\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-f> && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+g\",\n        \"command\": \"extension.vim_ctrl+g\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-g> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+h\",\n        \"command\": \"extension.vim_ctrl+h\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+i\",\n        \"command\": \"extension.vim_ctrl+i\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+j\",\n        \"command\": \"extension.vim_ctrl+j\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+k\",\n        \"command\": \"extension.vim_ctrl+k\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+l\",\n        \"command\": \"extension.vim_navigateCtrlL\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+m\",\n        \"command\": \"extension.vim_ctrl+m\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-m> && !inDebugRepl || vim.mode == 'CommandlineInProgress' && vim.active && vim.use<C-m> && !inDebugRepl || vim.mode == 'SearchInProgressMode' && vim.active && vim.use<C-m> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+n\",\n        \"command\": \"extension.vim_ctrl+n\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl || vim.mode == 'CommandlineInProgress' && vim.active && vim.use<C-n> && !inDebugRepl || vim.mode == 'SearchInProgressMode' && vim.active && vim.use<C-n> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+o\",\n        \"command\": \"extension.vim_ctrl+o\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+p\",\n        \"command\": \"extension.vim_ctrl+p\",\n        \"when\": \"suggestWidgetVisible && vim.active && vim.use<C-p> && !inDebugRepl || vim.mode == 'CommandlineInProgress' && vim.active && vim.use<C-p> && !inDebugRepl || vim.mode == 'SearchInProgressMode' && vim.active && vim.use<C-p> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+q\",\n        \"command\": \"extension.vim_winCtrlQ\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-q> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+r\",\n        \"command\": \"extension.vim_ctrl+r\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+t\",\n        \"command\": \"extension.vim_ctrl+t\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+u\",\n        \"command\": \"extension.vim_ctrl+u\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+u\",\n        \"command\": \"list.focusPageUp\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"ctrl+v\",\n        \"command\": \"extension.vim_ctrl+v\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-v> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+w\",\n        \"command\": \"extension.vim_ctrl+w\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+x\",\n        \"command\": \"extension.vim_ctrl+x\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+y\",\n        \"command\": \"extension.vim_ctrl+y\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+6\",\n        \"command\": \"extension.vim_ctrl+6\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-6> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+^\",\n        \"command\": \"extension.vim_ctrl+^\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-^> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+[\",\n        \"command\": \"extension.vim_ctrl+[\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+]\",\n        \"command\": \"extension.vim_ctrl+]\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-]> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+shift+2\",\n        \"command\": \"extension.vim_ctrl+shift+2\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-shift+2>\"\n      },\n      {\n        \"key\": \"ctrl+up\",\n        \"command\": \"extension.vim_ctrl+up\",\n        \"when\": \"editorTextFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+down\",\n        \"command\": \"extension.vim_ctrl+down\",\n        \"when\": \"editorTextFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+left\",\n        \"command\": \"extension.vim_ctrl+left\",\n        \"when\": \"editorTextFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+right\",\n        \"command\": \"extension.vim_ctrl+right\",\n        \"when\": \"editorTextFocus && vim.active && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+pagedown\",\n        \"command\": \"extension.vim_ctrl+pagedown\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-pagedown> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+pageup\",\n        \"command\": \"extension.vim_ctrl+pageup\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-pageup> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+space\",\n        \"command\": \"extension.vim_ctrl+space\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-space> && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"shift+G\",\n        \"command\": \"list.focusLast\",\n        \"when\": \"listFocus && !inputFocus\"\n      },\n      {\n        \"key\": \"ctrl+backspace\",\n        \"command\": \"extension.vim_ctrl+backspace\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<C-BS> && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"shift+backspace\",\n        \"command\": \"extension.vim_shift+backspace\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<S-BS> && vim.mode != 'Insert' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"cmd+left\",\n        \"command\": \"extension.vim_cmd+left\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-left> && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"cmd+right\",\n        \"command\": \"extension.vim_cmd+right\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-right> && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"cmd+a\",\n        \"command\": \"extension.vim_cmd+a\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-a> && !inDebugRepl && vim.mode != 'Insert'\"\n      },\n      {\n        \"key\": \"cmd+c\",\n        \"command\": \"extension.vim_cmd+c\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-c> && vim.overrideCopy && !inDebugRepl\"\n      },\n      {\n        \"key\": \"cmd+d\",\n        \"command\": \"extension.vim_cmd+d\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl\"\n      },\n      {\n        \"key\": \"cmd+v\",\n        \"command\": \"extension.vim_cmd+v\",\n        \"when\": \"editorTextFocus && vim.active && vim.use<D-v> && vim.mode == 'CommandlineInProgress' !inDebugRepl || editorTextFocus && vim.active && vim.use<D-v> && vim.mode == 'SearchInProgressMode' && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+alt+down\",\n        \"linux\": \"shift+alt+down\",\n        \"mac\": \"cmd+alt+down\",\n        \"command\": \"extension.vim_cmd+alt+down\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"ctrl+alt+up\",\n        \"linux\": \"shift+alt+up\",\n        \"mac\": \"cmd+alt+up\",\n        \"command\": \"extension.vim_cmd+alt+up\",\n        \"when\": \"editorTextFocus && vim.active && !inDebugRepl\"\n      },\n      {\n        \"key\": \"j\",\n        \"command\": \"notebook.focusNextEditor\",\n        \"when\": \"vim.mode == 'Normal' && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'\"\n      },\n      {\n        \"key\": \"k\",\n        \"command\": \"notebook.focusPreviousEditor\",\n        \"when\": \"vim.mode == 'Normal' && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'\"\n      }\n    ],\n    \"configuration\": {\n      \"title\": \"Vim\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"vim.debug.silent\": {\n          \"type\": \"boolean\",\n          \"description\": \"If true, all logs are suppressed.\",\n          \"default\": false\n        },\n        \"vim.debug.loggingLevelForAlert\": {\n          \"type\": \"string\",\n          \"description\": \"Maximum level of messages to present as VS Code information window.\",\n          \"default\": \"error\",\n          \"enum\": [\n            \"error\",\n            \"warn\",\n            \"info\",\n            \"verbose\",\n            \"debug\"\n          ]\n        },\n        \"vim.debug.loggingLevelForConsole\": {\n          \"type\": \"string\",\n          \"description\": \"Maximum level of messages to log to console. Logs are visible in developer tools.\",\n          \"default\": \"error\",\n          \"enum\": [\n            \"error\",\n            \"warn\",\n            \"info\",\n            \"verbose\",\n            \"debug\"\n          ]\n        },\n        \"vim.normalModeKeyBindings\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Remapped keys in Normal mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\",\n          \"scope\": \"application\"\n        },\n        \"vim.normalModeKeyBindingsNonRecursive\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Non-recursive remapped keys in Normal mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\",\n          \"scope\": \"application\"\n        },\n        \"vim.operatorPendingModeKeyBindings\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Remapped keys in OperatorPending mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\",\n          \"scope\": \"application\"\n        },\n        \"vim.operatorPendingModeKeyBindingsNonRecursive\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Non-recursive remapped keys in OperatorPending mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\",\n          \"scope\": \"application\"\n        },\n        \"vim.useCtrlKeys\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable some Vim Ctrl key commands that override otherwise common operations, like `Ctrl+C`.\",\n          \"default\": true\n        },\n        \"vim.leader\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"What key should `<leader>` map to in remappings?\",\n          \"default\": \"\\\\\"\n        },\n        \"vim.searchHighlightColor\": {\n          \"type\": \"string\",\n          \"description\": \"Color of the search highlight.\"\n        },\n        \"vim.searchHighlightTextColor\": {\n          \"type\": \"string\",\n          \"description\": \"Color of the search highlight text.\"\n        },\n        \"vim.highlightedyank.enable\": {\n          \"type\": \"boolean\",\n          \"description\": \"Enable highlighting when yanking.\",\n          \"default\": false\n        },\n        \"vim.highlightedyank.color\": {\n          \"type\": \"string\",\n          \"description\": \"Color of the yank highlight.\",\n          \"default\": \"rgba(250, 240, 170, 0.5)\"\n        },\n        \"vim.highlightedyank.textColor\": {\n          \"type\": \"string\",\n          \"description\": \"Color of the yank highlight text.\"\n        },\n        \"vim.highlightedyank.duration\": {\n          \"type\": \"number\",\n          \"description\": \"Duration in milliseconds of the yank highlight.\",\n          \"default\": 200,\n          \"minimum\": 1\n        },\n        \"vim.useSystemClipboard\": {\n          \"type\": \"boolean\",\n          \"description\": \"Use system clipboard for unnamed register.\",\n          \"default\": false\n        },\n        \"vim.overrideCopy\": {\n          \"type\": \"boolean\",\n          \"description\": \"Override VS Code's copy command with our own copy command, which works better with VSCodeVim. Turn this off if copying is not working.\",\n          \"default\": true\n        },\n        \"vim.insertModeKeyBindings\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Remapped keys in Insert mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\",\n          \"scope\": \"application\"\n        },\n        \"vim.insertModeKeyBindingsNonRecursive\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Non-recursive keybinding overrides to use for Insert mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\",\n          \"scope\": \"application\"\n        },\n        \"vim.visualModeKeyBindings\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Remapped keys in Visual mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\",\n          \"scope\": \"application\"\n        },\n        \"vim.visualModeKeyBindingsNonRecursive\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Non-recursive keybinding overrides to use for Visual mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\",\n          \"scope\": \"application\"\n        },\n        \"vim.commandLineModeKeyBindings\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Remapped keys in command line mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\",\n          \"scope\": \"application\"\n        },\n        \"vim.commandLineModeKeyBindingsNonRecursive\": {\n          \"type\": \"array\",\n          \"markdownDescription\": \"Non-recursive keybinding overrides to use for command line mode. Allows mapping to Vim commands or VS Code actions. See [README](https://github.com/VSCodeVim/Vim/#key-remapping) for details.\",\n          \"scope\": \"application\"\n        },\n        \"vim.textwidth\": {\n          \"type\": \"number\",\n          \"markdownDescription\": \"Width to word-wrap to when using `gq`.\",\n          \"default\": 80,\n          \"minimum\": 1\n        },\n        \"vim.timeout\": {\n          \"type\": \"number\",\n          \"description\": \"Timeout in milliseconds for remapped commands.\",\n          \"default\": 1000,\n          \"minimum\": 0\n        },\n        \"vim.maxmapdepth\": {\n          \"type\": \"number\",\n          \"description\": \"Maximum number of times a mapping is done without resulting in a character to be used.\",\n          \"default\": 1000,\n          \"minimum\": 0\n        },\n        \"vim.scroll\": {\n          \"type\": \"number\",\n          \"markdownDescription\": \"Number of lines to scroll with `Ctrl-U` and `Ctrl-D` commands. Set to 0 to use a half page scroll.\",\n          \"default\": 0,\n          \"minimum\": 0\n        },\n        \"vim.showcmd\": {\n          \"type\": \"boolean\",\n          \"description\": \"Show the text of any command you are in the middle of writing.\",\n          \"default\": true\n        },\n        \"vim.showmodename\": {\n          \"type\": \"boolean\",\n          \"description\": \"Show the name of the current mode in the statusbar.\",\n          \"default\": true\n        },\n        \"vim.iskeyword\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"Keywords contain alphanumeric characters and '_'. If not configured, `#editor.wordSeparators#` is used.\"\n        },\n        \"vim.ignorecase\": {\n          \"type\": \"boolean\",\n          \"description\": \"Ignore case in search patterns.\",\n          \"default\": true\n        },\n        \"vim.smartcase\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Override the `ignorecase` option if the search pattern contains upper case characters.\",\n          \"default\": true\n        },\n        \"vim.camelCaseMotion.enable\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable the [CamelCaseMotion](https://github.com/bkad/CamelCaseMotion) plugin for Vim.\",\n          \"default\": false\n        },\n        \"vim.easymotion\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable the [EasyMotion](https://github.com/easymotion/vim-easymotion) plugin for Vim.\",\n          \"default\": false\n        },\n        \"vim.easymotionMarkerBackgroundColor\": {\n          \"type\": \"string\",\n          \"default\": \"#0000\",\n          \"description\": \"Set a custom background color for EasyMotion markers.\"\n        },\n        \"vim.easymotionMarkerForegroundColorOneChar\": {\n          \"type\": \"string\",\n          \"default\": \"#ff0000\",\n          \"description\": \"Set a custom color for the text on one character long markers.\"\n        },\n        \"vim.easymotionMarkerForegroundColorTwoChar\": {\n          \"type\": \"string\",\n          \"description\": \"Set a custom color for the text on two character long markers.\",\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please don't use this setting, use `#vim.easymotionMarkerForegroundColorTwoCharFirst#` and `#vim.easymotionMarkerForegroundColorTwoCharSecond#` instead.\",\n          \"deprecationMessage\": \"Deprecated: Please don't use this setting, use `#vim.easymotionMarkerForegroundColorTwoCharFirst#` and `#vim.easymotionMarkerForegroundColorTwoCharSecond#` instead.\"\n        },\n        \"vim.easymotionMarkerForegroundColorTwoCharFirst\": {\n          \"type\": \"string\",\n          \"default\": \"#ffb400\",\n          \"description\": \"Set a custom color for the first character on two character long markers.\"\n        },\n        \"vim.easymotionMarkerForegroundColorTwoCharSecond\": {\n          \"type\": \"string\",\n          \"default\": \"#b98300\",\n          \"description\": \"Set a custom color for the second character on two character long markers.\"\n        },\n        \"vim.easymotionIncSearchForegroundColor\": {\n          \"type\": \"string\",\n          \"default\": \"#7fbf00\",\n          \"description\": \"Set a custom color for the easymotion search n-character (default `<leader><leader>/`).\"\n        },\n        \"vim.easymotionDimColor\": {\n          \"type\": \"string\",\n          \"default\": \"#777777\",\n          \"description\": \"Set a custom color for the easymotion dimmed characters when `#vim.easymotionDimBackground#` is set to true.\"\n        },\n        \"vim.easymotionMarkerWidthPerChar\": {\n          \"type\": \"number\",\n          \"description\": \"Set the width (in pixels) allocated to each character in the match.\",\n          \"default\": 8,\n          \"minimum\": 1,\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please don't use this setting; the extension now lets vscode calculate the correct width.\",\n          \"deprecationMessage\": \"Deprecated: Please don't use this setting; the extension now lets vscode calculate the correct width.\"\n        },\n        \"vim.easymotionDimBackground\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether to dim other text while markers are visible.\",\n          \"default\": true\n        },\n        \"vim.easymotionMarkerFontFamily\": {\n          \"type\": \"string\",\n          \"description\": \"Set the font family of the marker text.\",\n          \"default\": \"\",\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please don't use this setting; the extension now uses `#editor.fontFamily#` instead.\",\n          \"deprecationMessage\": \"Deprecated: Please don't use this setting; the extension now uses editor.fontFamily instead.\"\n        },\n        \"vim.easymotionMarkerFontSize\": {\n          \"type\": \"string\",\n          \"description\": \"Set the font size of the marker text.\",\n          \"default\": \"\",\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please don't use this setting; the extension now uses `#editor.fontSize#` instead.\",\n          \"deprecationMessage\": \"Deprecated: Please don't use this setting; the extension now uses editor.fontSize instead.\"\n        },\n        \"vim.easymotionMarkerFontWeight\": {\n          \"type\": \"string\",\n          \"description\": \"Set the font weight of the marker text.\",\n          \"default\": \"bold\"\n        },\n        \"vim.easymotionMarkerMargin\": {\n          \"type\": \"number\",\n          \"description\": \"Set the margin around each marker, in pixels.\",\n          \"default\": 0,\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please don't use this setting, it is no longer required.\",\n          \"deprecationMessage\": \"Deprecated: Please don't use this setting, it is no longer required.\"\n        },\n        \"vim.easymotionKeys\": {\n          \"type\": \"string\",\n          \"description\": \"Set the characters used for jump marker name.\",\n          \"default\": \"hklyuiopnm,qwertzxcvbasdgjf;\"\n        },\n        \"vim.easymotionJumpToAnywhereRegex\": {\n          \"type\": \"string\",\n          \"description\": \"Regex matches for JumpToAnywhere motion.\",\n          \"default\": \"\\\\b[A-Za-z0-9]|[A-Za-z0-9]\\\\b|_.|#.|[a-z][A-Z]\"\n        },\n        \"vim.replaceWithRegister\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable the [ReplaceWithRegister](https://github.com/vim-scripts/ReplaceWithRegister) plugin for Vim.\",\n          \"default\": false\n        },\n        \"vim.smartRelativeLine\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"`#editor.lineNumbers#` is determined by the active Vim mode, absolute when in insert mode, relative otherwise.\",\n          \"default\": false\n        },\n        \"vim.sneak\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable the [Sneak](https://github.com/justinmk/vim-sneak) plugin for Vim.\",\n          \"default\": false\n        },\n        \"vim.sneakUseIgnorecaseAndSmartcase\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Case sensitivity is determined by `#vim.ignorecase#` and `#vim.smartcase#`.\",\n          \"default\": false\n        },\n        \"vim.sneakReplacesF\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Use single-character [Sneak](https://github.com/justinmk/vim-sneak) instead of Vim's native `f`.\",\n          \"default\": false\n        },\n        \"vim.surround\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable the [Surround](https://github.com/tpope/vim-surround) plugin for Vim.\",\n          \"default\": true\n        },\n        \"vim.argumentObjectSeparators\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"markdownDescription\": \"Set separators for the argument text object.\",\n          \"default\": [\n            \",\"\n          ]\n        },\n        \"vim.argumentObjectOpeningDelimiters\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"markdownDescription\": \"Set opening delimiters for the argument text object.\",\n          \"default\": [\n            \"(\",\n            \"[\"\n          ]\n        },\n        \"vim.argumentObjectClosingDelimiters\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"markdownDescription\": \"Set closing delimiters for the argument text object.\",\n          \"default\": [\n            \")\",\n            \"]\"\n          ]\n        },\n        \"vim.hlsearch\": {\n          \"type\": \"boolean\",\n          \"description\": \"Show all matches of the most recent search pattern.\",\n          \"default\": false\n        },\n        \"vim.incsearch\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Show where a `/` or `?` search matches as you type it.\",\n          \"default\": true\n        },\n        \"vim.history\": {\n          \"type\": \"number\",\n          \"description\": \"How much search or command history should be remembered.\",\n          \"default\": 50,\n          \"minimum\": 1\n        },\n        \"vim.autoindent\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indent code automatically.\",\n          \"default\": true\n        },\n        \"vim.startInInsertMode\": {\n          \"type\": \"boolean\",\n          \"description\": \"Start in Insert mode.\"\n        },\n        \"vim.handleKeys\": {\n          \"type\": \"object\",\n          \"description\": \"Delegate certain key combinations back to VSCode to be handled natively.\",\n          \"default\": {\n            \"<C-d>\": true\n          }\n        },\n        \"vim.statusBarColorControl\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Allow VSCodeVim to change status bar color based on mode. **NOTE:** Using this feature will have a negative impact on performance.\",\n          \"default\": false\n        },\n        \"vim.statusBarColors.normal\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in Normal mode.\",\n          \"default\": \"#005f5f\"\n        },\n        \"vim.statusBarColors.insert\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in Insert mode.\",\n          \"default\": \"#5f0000\"\n        },\n        \"vim.statusBarColors.visual\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in Visual mode.\",\n          \"default\": \"#5f00af\"\n        },\n        \"vim.statusBarColors.visualline\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in VisualLine mode.\",\n          \"default\": \"#005f5f\"\n        },\n        \"vim.statusBarColors.visualblock\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in VisualBlock mode.\",\n          \"default\": \"#86592d\"\n        },\n        \"vim.statusBarColors.replace\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in Replace mode.\",\n          \"default\": \"#00000\"\n        },\n        \"vim.statusBarColors.commandlineinprogress\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in CommandLineInProgress mode.\",\n          \"default\": \"#007acc\"\n        },\n        \"vim.statusBarColors.searchinprogressmode\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in SearchInProgress mode.\",\n          \"default\": \"#007acc\"\n        },\n        \"vim.statusBarColors.easymotionmode\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in EasyMotion mode.\",\n          \"default\": \"#007acc\"\n        },\n        \"vim.statusBarColors.easymotioninputmode\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in EasyMotionInput mode.\",\n          \"default\": \"#007acc\"\n        },\n        \"vim.statusBarColors.surroundinputmode\": {\n          \"type\": [\n            \"string\",\n            \"array\"\n          ],\n          \"description\": \"Status bar color when in SurroundInput mode.\",\n          \"default\": \"#007acc\"\n        },\n        \"vim.visualstar\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"In Visual mode, start a search with `*` or `#` using the current selection.\",\n          \"default\": false\n        },\n        \"vim.changeWordIncludesWhitespace\": {\n          \"type\": \"boolean\",\n          \"description\": \"Includes trailing whitespace when changing word.\",\n          \"default\": false\n        },\n        \"vim.foldfix\": {\n          \"type\": \"boolean\",\n          \"description\": \"Uses a hack to move around folds properly.\",\n          \"default\": false\n        },\n        \"vim.mouseSelectionGoesIntoVisualMode\": {\n          \"type\": \"boolean\",\n          \"description\": \"If enabled, dragging with the mouse activates Visual mode.\",\n          \"default\": true\n        },\n        \"vim.disableExtension\": {\n          \"type\": \"boolean\",\n          \"description\": \"Disables the VSCodeVim extension. The extension will continue to be loaded and activated, but Vim functionality will be disabled.\",\n          \"default\": false\n        },\n        \"vim.enableNeovim\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Use Neovim to execute Ex commands. You should restart VS Code after enabling/disabling this for the changes to take effect. **NOTE:** Neovim version 0.2.0 or greater must be installed, and if the executable is not on your PATH, `#vim.neovimPath#` must be set.\",\n          \"default\": false\n        },\n        \"vim.neovimPath\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"Path to Neovim executable. For example, `/usr/bin/nvim`, or  `C:\\\\Program Files\\\\Neovim\\\\bin\\\\nvim.exe`.\",\n          \"default\": \"\",\n          \"scope\": \"machine\"\n        },\n        \"vim.neovimUseConfigFile\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Use a config file for Neovim, specified by `vim.neovimConfigPath`.\",\n          \"default\": false\n        },\n        \"vim.neovimConfigPath\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"Path to Neovim configuration file. `vim.neovimUseConfigFile` must be enabled. If path is left blank, Neovim will use its default config path, i.e. `~/.config/nvim/init.vim` or 'C:\\\\Users\\\\USERNAME\\\\AppData\\\\Local\\\\nvim\\\\init.vim'.\",\n          \"default\": \"\",\n          \"scope\": \"machine\"\n        },\n        \"vim.vimrc.enable\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Use key mappings from a `.vimrc` file.\",\n          \"default\": false\n        },\n        \"vim.vimrc.path\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"Path to a Vim configuration file. If unset, it will check for `$HOME/.vimrc`, `$HOME/_vimrc`, and `$HOME/.config/nvim/init.vim`, in that order.\"\n        },\n        \"vim.substituteGlobalFlag\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Automatically apply the global flag, `/g`, to substitute commands. When set to true, use `/g` to mean only first match should be replaced.\",\n          \"default\": false,\n          \"markdownDeprecationMessage\": \"**Deprecated**: Please use `#vim.gdefault#` instead.\",\n          \"deprecationMessage\": \"Deprecated: Please use vim.gdefault instead.\"\n        },\n        \"vim.gdefault\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Automatically apply the global flag, `/g`, to substitute commands. When set to true, use `/g` to mean only first match should be replaced.\",\n          \"default\": false\n        },\n        \"vim.cursorStylePerMode.normal\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for Normal mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.cursorStylePerMode.insert\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for Insert mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.cursorStylePerMode.replace\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for Replace mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.cursorStylePerMode.visual\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for Visual mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.cursorStylePerMode.visualline\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for VisualLine mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.cursorStylePerMode.visualblock\": {\n          \"type\": \"string\",\n          \"description\": \"Cursor style for VisualBlock mode.\",\n          \"enum\": [\n            \"\",\n            \"block\",\n            \"block-outline\",\n            \"line\",\n            \"line-thin\",\n            \"underline\",\n            \"underline-thin\"\n          ]\n        },\n        \"vim.autoSwitchInputMethod.enable\": {\n          \"type\": \"boolean\",\n          \"description\": \"If enabled, the input method switches automatically when the mode changes.\",\n          \"default\": false\n        },\n        \"vim.autoSwitchInputMethod.defaultIM\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"The input method for your normal mode, find more information [here](https://github.com/VSCodeVim/Vim#input-method).\",\n          \"default\": \"\"\n        },\n        \"vim.autoSwitchInputMethod.switchIMCmd\": {\n          \"type\": \"string\",\n          \"description\": \"The shell command to switch input method.\",\n          \"default\": \"/path/to/im-select {im}\"\n        },\n        \"vim.autoSwitchInputMethod.obtainIMCmd\": {\n          \"type\": \"string\",\n          \"description\": \"The shell command to get current input method.\",\n          \"default\": \"/path/to/im-select\"\n        },\n        \"vim.whichwrap\": {\n          \"type\": \"string\",\n          \"description\": \"Comma-separated list of motion keys that should wrap to next/previous line.\",\n          \"default\": \"b,s\"\n        },\n        \"vim.report\": {\n          \"type\": \"number\",\n          \"description\": \"Threshold for reporting number of lines changed.\",\n          \"default\": 2,\n          \"minimum\": 1\n        },\n        \"vim.digraphs\": {\n          \"type\": \"object\",\n          \"description\": \"Custom digraph shortcuts for inserting special characters, expressed as UTF16 code points.\",\n          \"default\": {}\n        },\n        \"vim.wrapscan\": {\n          \"type\": \"boolean\",\n          \"description\": \"Searches wrap around the end of the file.\",\n          \"default\": true\n        },\n        \"vim.startofline\": {\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"When `true` the commands listed below move the cursor to the first non-blank of the line.  When `false` the cursor is kept in the same column (if possible).  This applies to the commands: `<C-d>`, `<C-u>`, `<C-b>`, `<C-f>`, `G`, `H`, `M`, `L`, `gg`, and to the commands `d`, `<<` and `>>` with a linewise operator.\",\n          \"default\": true\n        },\n        \"vim.showMarksInGutter\": {\n          \"type\": \"boolean\",\n          \"description\": \"Show the currently set mark(s) in the gutter.\",\n          \"default\": false\n        }\n      }\n    },\n    \"languages\": [\n      {\n        \"id\": \"vimrc\",\n        \"extensions\": [\n          \".vimrc\"\n        ],\n        \"configuration\": \"./language-configuration.json\"\n      }\n    ],\n    \"grammars\": [\n      {\n        \"language\": \"vimrc\",\n        \"scopeName\": \"source.vimrc\",\n        \"path\": \"./syntaxes/vimrc.tmLanguage.json\"\n      }\n    ]\n  },\n  \"scripts\": {\n    \"vscode:prepublish\": \"gulp build\",\n    \"build\": \"gulp build\",\n    \"test\": \"node ./out/test/runTest.js\",\n    \"forceprettier\": \"gulp forceprettier\"\n  },\n  \"dependencies\": {\n    \"diff-match-patch\": \"1.0.5\",\n    \"lodash\": \"^4.17.20\",\n    \"neovim\": \"4.9.0\",\n    \"path-browserify\": \"1.0.1\",\n    \"source-map-support\": \"0.5.19\",\n    \"untildify\": \"4.0.0\",\n    \"winston\": \"3.3.3\",\n    \"winston-console-for-electron\": \"0.0.6\",\n    \"winston-transport\": \"4.4.0\"\n  },\n  \"devDependencies\": {\n    \"@types/diff\": \"5.0.0\",\n    \"@types/diff-match-patch\": \"1.0.32\",\n    \"@types/glob\": \"7.1.3\",\n    \"@types/lodash\": \"4.14.168\",\n    \"@types/mocha\": \"8.2.1\",\n    \"@types/node\": \"12.20.6\",\n    \"@types/sinon\": \"9.0.11\",\n    \"@types/source-map-support\": \"0.5.3\",\n    \"@types/vscode\": \"1.42.0\",\n    \"clean-webpack-plugin\": \"3.0.0\",\n    \"event-stream\": \"4.0.1\",\n    \"fork-ts-checker-webpack-plugin\": \"6.2.0\",\n    \"gulp\": \"4.0.2\",\n    \"gulp-bump\": \"3.2.0\",\n    \"gulp-git\": \"2.10.1\",\n    \"gulp-sourcemaps\": \"3.0.0\",\n    \"gulp-tag-version\": \"1.3.1\",\n    \"gulp-tslint\": \"8.1.4\",\n    \"gulp-typescript\": \"5.0.1\",\n    \"minimist\": \"1.2.5\",\n    \"mocha\": \"8.3.2\",\n    \"plugin-error\": \"1.0.1\",\n    \"prettier\": \"2.2.1\",\n    \"sinon\": \"9.2.4\",\n    \"ts-loader\": \"8.0.18\",\n    \"tslint\": \"6.1.3\",\n    \"typescript\": \"4.2.3\",\n    \"vsce\": \"1.87.0\",\n    \"vscode-test\": \"1.5.1\",\n    \"webpack\": \"5.26.3\",\n    \"webpack-cli\": \"4.5.0\",\n    \"webpack-merge\": \"5.7.3\",\n    \"webpack-stream\": \"6.1.2\"\n  }\n}\n"], "filenames": ["package.json"], "buggy_code_start_loc": [457], "buggy_code_end_loc": [919], "fixing_code_start_loc": [457], "fixing_code_end_loc": [929], "type": "NVD-CWE-noinfo", "message": "VSCodeVim before 1.19.0 allows attackers to execute arbitrary code via a crafted workspace configuration.", "other": {"cve": {"id": "CVE-2021-28832", "sourceIdentifier": "cve@mitre.org", "published": "2021-04-05T07:15:13.227", "lastModified": "2021-04-08T18:06:03.227", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "VSCodeVim before 1.19.0 allows attackers to execute arbitrary code via a crafted workspace configuration."}, {"lang": "es", "value": "VSCodeVim versiones anteriores a 1.19.0, permite a atacantes ejecutar c\u00f3digo arbitrario por medio de una configuraci\u00f3n de workspace dise\u00f1ada"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:vim_project:vim:*:*:*:*:*:visual_studio_code:*:*", "versionEndExcluding": "1.19.0", "matchCriteriaId": "61F053BF-1614-4379-8CFF-191D63311C44"}]}]}], "references": [{"url": "https://github.com/VSCodeVim/Vim/commit/939df0e7fd55a9840dbd4fb3c907315e2a5ef446", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://marketplace.visualstudio.com/items?itemName=vscodevim.vim", "source": "cve@mitre.org", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://vuln.ryotak.me/advisories/9", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/VSCodeVim/Vim/commit/939df0e7fd55a9840dbd4fb3c907315e2a5ef446"}}