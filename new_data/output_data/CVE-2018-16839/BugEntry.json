{"buggy_code": ["/***************************************************************************\n *                                  _   _ ____  _\n *  Project                     ___| | | |  _ \\| |\n *                             / __| | | | |_) | |\n *                            | (__| |_| |  _ <| |___\n *                             \\___|\\___/|_| \\_\\_____|\n *\n * Copyright (C) 1998 - 2018, Daniel Stenberg, <daniel@haxx.se>, et al.\n *\n * This software is licensed as described in the file COPYING, which\n * you should have received as part of this distribution. The terms\n * are also available at https://curl.haxx.se/docs/copyright.html.\n *\n * You may opt to use, copy, modify, merge, publish, distribute and/or sell\n * copies of the Software, and permit persons to whom the Software is\n * furnished to do so, under the terms of the COPYING file.\n *\n * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n * KIND, either express or implied.\n *\n * RFC4616 PLAIN authentication\n * Draft   LOGIN SASL Mechanism <draft-murchison-sasl-login-00.txt>\n *\n ***************************************************************************/\n\n#include \"curl_setup.h\"\n\n#include <curl/curl.h>\n#include \"urldata.h\"\n\n#include \"vauth/vauth.h\"\n#include \"curl_base64.h\"\n#include \"curl_md5.h\"\n#include \"warnless.h\"\n#include \"strtok.h\"\n#include \"sendf.h\"\n#include \"curl_printf.h\"\n\n/* The last #include files should be: */\n#include \"curl_memory.h\"\n#include \"memdebug.h\"\n\n/*\n * Curl_auth_create_plain_message()\n *\n * This is used to generate an already encoded PLAIN message ready\n * for sending to the recipient.\n *\n * Parameters:\n *\n * data    [in]     - The session handle.\n * userp   [in]     - The user name.\n * passwdp [in]     - The user's password.\n * outptr  [in/out] - The address where a pointer to newly allocated memory\n *                    holding the result will be stored upon completion.\n * outlen  [out]    - The length of the output message.\n *\n * Returns CURLE_OK on success.\n */\nCURLcode Curl_auth_create_plain_message(struct Curl_easy *data,\n                                        const char *userp,\n                                        const char *passwdp,\n                                        char **outptr, size_t *outlen)\n{\n  CURLcode result;\n  char *plainauth;\n  size_t ulen;\n  size_t plen;\n  size_t plainlen;\n\n  *outlen = 0;\n  *outptr = NULL;\n  ulen = strlen(userp);\n  plen = strlen(passwdp);\n\n  /* Compute binary message length. Check for overflows. */\n  if((ulen > SIZE_T_MAX/2) || (plen > (SIZE_T_MAX/2 - 2)))\n    return CURLE_OUT_OF_MEMORY;\n  plainlen = 2 * ulen + plen + 2;\n\n  plainauth = malloc(plainlen);\n  if(!plainauth)\n    return CURLE_OUT_OF_MEMORY;\n\n  /* Calculate the reply */\n  memcpy(plainauth, userp, ulen);\n  plainauth[ulen] = '\\0';\n  memcpy(plainauth + ulen + 1, userp, ulen);\n  plainauth[2 * ulen + 1] = '\\0';\n  memcpy(plainauth + 2 * ulen + 2, passwdp, plen);\n\n  /* Base64 encode the reply */\n  result = Curl_base64_encode(data, plainauth, plainlen, outptr, outlen);\n  free(plainauth);\n\n  return result;\n}\n\n/*\n * Curl_auth_create_login_message()\n *\n * This is used to generate an already encoded LOGIN message containing the\n * user name or password ready for sending to the recipient.\n *\n * Parameters:\n *\n * data    [in]     - The session handle.\n * valuep  [in]     - The user name or user's password.\n * outptr  [in/out] - The address where a pointer to newly allocated memory\n *                    holding the result will be stored upon completion.\n * outlen  [out]    - The length of the output message.\n *\n * Returns CURLE_OK on success.\n */\nCURLcode Curl_auth_create_login_message(struct Curl_easy *data,\n                                        const char *valuep, char **outptr,\n                                        size_t *outlen)\n{\n  size_t vlen = strlen(valuep);\n\n  if(!vlen) {\n    /* Calculate an empty reply */\n    *outptr = strdup(\"=\");\n    if(*outptr) {\n      *outlen = (size_t) 1;\n      return CURLE_OK;\n    }\n\n    *outlen = 0;\n    return CURLE_OUT_OF_MEMORY;\n  }\n\n  /* Base64 encode the value */\n  return Curl_base64_encode(data, valuep, vlen, outptr, outlen);\n}\n\n/*\n * Curl_auth_create_external_message()\n *\n * This is used to generate an already encoded EXTERNAL message containing\n * the user name ready for sending to the recipient.\n *\n * Parameters:\n *\n * data    [in]     - The session handle.\n * user    [in]     - The user name.\n * outptr  [in/out] - The address where a pointer to newly allocated memory\n *                    holding the result will be stored upon completion.\n * outlen  [out]    - The length of the output message.\n *\n * Returns CURLE_OK on success.\n */\nCURLcode Curl_auth_create_external_message(struct Curl_easy *data,\n                                           const char *user, char **outptr,\n                                           size_t *outlen)\n{\n  /* This is the same formatting as the login message */\n  return Curl_auth_create_login_message(data, user, outptr, outlen);\n}\n"], "fixing_code": ["/***************************************************************************\n *                                  _   _ ____  _\n *  Project                     ___| | | |  _ \\| |\n *                             / __| | | | |_) | |\n *                            | (__| |_| |  _ <| |___\n *                             \\___|\\___/|_| \\_\\_____|\n *\n * Copyright (C) 1998 - 2018, Daniel Stenberg, <daniel@haxx.se>, et al.\n *\n * This software is licensed as described in the file COPYING, which\n * you should have received as part of this distribution. The terms\n * are also available at https://curl.haxx.se/docs/copyright.html.\n *\n * You may opt to use, copy, modify, merge, publish, distribute and/or sell\n * copies of the Software, and permit persons to whom the Software is\n * furnished to do so, under the terms of the COPYING file.\n *\n * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n * KIND, either express or implied.\n *\n * RFC4616 PLAIN authentication\n * Draft   LOGIN SASL Mechanism <draft-murchison-sasl-login-00.txt>\n *\n ***************************************************************************/\n\n#include \"curl_setup.h\"\n\n#include <curl/curl.h>\n#include \"urldata.h\"\n\n#include \"vauth/vauth.h\"\n#include \"curl_base64.h\"\n#include \"curl_md5.h\"\n#include \"warnless.h\"\n#include \"strtok.h\"\n#include \"sendf.h\"\n#include \"curl_printf.h\"\n\n/* The last #include files should be: */\n#include \"curl_memory.h\"\n#include \"memdebug.h\"\n\n/*\n * Curl_auth_create_plain_message()\n *\n * This is used to generate an already encoded PLAIN message ready\n * for sending to the recipient.\n *\n * Parameters:\n *\n * data    [in]     - The session handle.\n * userp   [in]     - The user name.\n * passwdp [in]     - The user's password.\n * outptr  [in/out] - The address where a pointer to newly allocated memory\n *                    holding the result will be stored upon completion.\n * outlen  [out]    - The length of the output message.\n *\n * Returns CURLE_OK on success.\n */\nCURLcode Curl_auth_create_plain_message(struct Curl_easy *data,\n                                        const char *userp,\n                                        const char *passwdp,\n                                        char **outptr, size_t *outlen)\n{\n  CURLcode result;\n  char *plainauth;\n  size_t ulen;\n  size_t plen;\n  size_t plainlen;\n\n  *outlen = 0;\n  *outptr = NULL;\n  ulen = strlen(userp);\n  plen = strlen(passwdp);\n\n  /* Compute binary message length. Check for overflows. */\n  if((ulen > SIZE_T_MAX/4) || (plen > (SIZE_T_MAX/2 - 2)))\n    return CURLE_OUT_OF_MEMORY;\n  plainlen = 2 * ulen + plen + 2;\n\n  plainauth = malloc(plainlen);\n  if(!plainauth)\n    return CURLE_OUT_OF_MEMORY;\n\n  /* Calculate the reply */\n  memcpy(plainauth, userp, ulen);\n  plainauth[ulen] = '\\0';\n  memcpy(plainauth + ulen + 1, userp, ulen);\n  plainauth[2 * ulen + 1] = '\\0';\n  memcpy(plainauth + 2 * ulen + 2, passwdp, plen);\n\n  /* Base64 encode the reply */\n  result = Curl_base64_encode(data, plainauth, plainlen, outptr, outlen);\n  free(plainauth);\n\n  return result;\n}\n\n/*\n * Curl_auth_create_login_message()\n *\n * This is used to generate an already encoded LOGIN message containing the\n * user name or password ready for sending to the recipient.\n *\n * Parameters:\n *\n * data    [in]     - The session handle.\n * valuep  [in]     - The user name or user's password.\n * outptr  [in/out] - The address where a pointer to newly allocated memory\n *                    holding the result will be stored upon completion.\n * outlen  [out]    - The length of the output message.\n *\n * Returns CURLE_OK on success.\n */\nCURLcode Curl_auth_create_login_message(struct Curl_easy *data,\n                                        const char *valuep, char **outptr,\n                                        size_t *outlen)\n{\n  size_t vlen = strlen(valuep);\n\n  if(!vlen) {\n    /* Calculate an empty reply */\n    *outptr = strdup(\"=\");\n    if(*outptr) {\n      *outlen = (size_t) 1;\n      return CURLE_OK;\n    }\n\n    *outlen = 0;\n    return CURLE_OUT_OF_MEMORY;\n  }\n\n  /* Base64 encode the value */\n  return Curl_base64_encode(data, valuep, vlen, outptr, outlen);\n}\n\n/*\n * Curl_auth_create_external_message()\n *\n * This is used to generate an already encoded EXTERNAL message containing\n * the user name ready for sending to the recipient.\n *\n * Parameters:\n *\n * data    [in]     - The session handle.\n * user    [in]     - The user name.\n * outptr  [in/out] - The address where a pointer to newly allocated memory\n *                    holding the result will be stored upon completion.\n * outlen  [out]    - The length of the output message.\n *\n * Returns CURLE_OK on success.\n */\nCURLcode Curl_auth_create_external_message(struct Curl_easy *data,\n                                           const char *user, char **outptr,\n                                           size_t *outlen)\n{\n  /* This is the same formatting as the login message */\n  return Curl_auth_create_login_message(data, user, outptr, outlen);\n}\n"], "filenames": ["lib/vauth/cleartext.c"], "buggy_code_start_loc": [77], "buggy_code_end_loc": [78], "fixing_code_start_loc": [77], "fixing_code_end_loc": [78], "type": "CWE-119", "message": "Curl versions 7.33.0 through 7.61.1 are vulnerable to a buffer overrun in the SASL authentication code that may lead to denial of service.", "other": {"cve": {"id": "CVE-2018-16839", "sourceIdentifier": "secalert@redhat.com", "published": "2018-10-31T18:29:00.230", "lastModified": "2019-10-09T23:36:20.080", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Curl versions 7.33.0 through 7.61.1 are vulnerable to a buffer overrun in the SASL authentication code that may lead to denial of service."}, {"lang": "es", "value": "Curl, desde la versi\u00f3n 7.33.0 hasta la 7.61.1, es vulnerable a una saturaci\u00f3n del b\u00fafer en el c\u00f3digo de autenticaci\u00f3n SASL que podr\u00eda conducir a una denegaci\u00f3n de servicio (DoS)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "secalert@redhat.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}, {"source": "secalert@redhat.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-122"}, {"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:haxx:curl:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.33.0", "versionEndIncluding": "7.61.1", "matchCriteriaId": "36A3566A-BDF8-4EB2-9530-B04E89521685"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.04:*:*:*:lts:*:*:*", "matchCriteriaId": "B5A6F2F3-4894-4392-8296-3B8DD2679084"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:16.04:*:*:*:lts:*:*:*", "matchCriteriaId": "F7016A2A-8365-4F1A-89A2-7A19F2BCAE5B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:18.04:*:*:*:lts:*:*:*", "matchCriteriaId": "23A7C53F-B80F-4E6A-AFA9-58EEA84BE11D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:18.10:*:*:*:*:*:*:*", "matchCriteriaId": "07C312A0-CD2C-4B9C-B064-6409B25C278F"}]}]}], "references": [{"url": "http://www.securitytracker.com/id/1042012", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-16839", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://curl.haxx.se/docs/CVE-2018-16839.html", "source": "secalert@redhat.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/curl/curl/commit/f3a24d7916b9173c69a3e0ee790102993833d6c5", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/8338a0f605bdbb3a6098bb76f666a95fc2b2f53f37fa1ecc89f1146f@%3Cdevnull.infra.apache.org%3E", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/11/msg00005.html", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/201903-03", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/3805-1/", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2018/dsa-4331", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/curl/curl/commit/f3a24d7916b9173c69a3e0ee790102993833d6c5"}}