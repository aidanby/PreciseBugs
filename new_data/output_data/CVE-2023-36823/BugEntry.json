{"buggy_code": ["# Sanitize History\n\n## 6.0.1 (2023-01-27)\n\n### Bug Fixes\n\n* Sanitize now always removes `<noscript>` elements and their contents, even\n  when `noscript` is in the allowlist.\n\n  This fixes a sanitization bypass that could occur when `noscript` was allowed\n  by a custom allowlist. In this scenario, carefully crafted input could sneak\n  arbitrary HTML through Sanitize, potentially enabling an XSS (cross-site\n  scripting) attack.\n\n  Sanitize's default configs don't allow `<noscript>` elements and are not\n  vulnerable. This issue only affects users who are using a custom config that\n  adds `noscript` to the element allowlist.\n\n  The root cause of this issue is that HTML parsing rules treat the contents of\n  a `<noscript>` element differently depending on whether scripting is enabled\n  in the user agent. Nokogiri doesn't support scripting so it follows the\n  \"scripting disabled\" rules, but a web browser with scripting enabled will\n  follow the \"scripting enabled\" rules. This means that Sanitize can't reliably\n  make the contents of a `<noscript>` element safe for scripting enabled\n  browsers, so the safest thing to do is to remove the element and its contents\n  entirely.\n\n  See the following security advisory for additional details:\n  [GHSA-fw3g-2h3j-qmm7](https://github.com/rgrove/sanitize/security/advisories/GHSA-fw3g-2h3j-qmm7)\n\n  Thanks to David Klein from [TU Braunschweig](https://www.tu-braunschweig.de/en/ias)\n  (@leeN) for reporting this issue.\n\n* Fixed an edge case in which the contents of an \"unescaped text\" element (such\n  as `<noembed>` or `<xmp>`) were not properly escaped if that element was\n  allowlisted and was also inside an allowlisted `<math>` or `<svg>` element.\n\n  The only way to encounter this situation was to ignore multiple warnings in\n  the readme and create a custom config that allowlisted all the elements\n  involved, including `<math>` or `<svg>`. If you're using a default config or\n  if you heeded the warnings about MathML and SVG not being supported, you're\n  not affected by this issue.\n\n  Please let this be a reminder that Sanitize cannot safely sanitize MathML or\n  SVG content and does not support this use case. The default configs don't\n  allow MathML or SVG elements, and allowlisting MathML or SVG elements in a\n  custom config may create a security vulnerability in your application.\n\n  Documentation has been updated to add more warnings and to make the existing\n  warnings about this more prominent.\n\n  Thanks to David Klein from [TU Braunschweig](https://www.tu-braunschweig.de/en/ias)\n  (@leeN) for reporting this issue.\n\n## 6.0.0 (2021-08-03)\n\n### Potentially Breaking Changes\n\n* Ruby 2.5.0 is now the oldest officially supported Ruby version.\n\n* Sanitize now requires Nokogiri 1.12.0 or higher, which includes Nokogumbo.\n  The separate dependency on Nokogumbo has been removed. [@lis2 - #211][211]\n\n[211]:https://github.com/rgrove/sanitize/pull/211\n\n## 5.2.3 (2021-01-11)\n\n### Bug Fixes\n\n* Ensure protocol sanitization is applied to data attributes.\n  [@ccutrer - #207][207]\n\n[207]:https://github.com/rgrove/sanitize/pull/207\n\n## 5.2.2 (2021-01-06)\n\n### Bug Fixes\n\n* Fixed a deprecation warning in Ruby 2.7+ when using keyword arguments in a\n  custom transformer. [@mscrivo - #206][206]\n\n[206]:https://github.com/rgrove/sanitize/pull/206\n\n## 5.2.1 (2020-06-16)\n\n### Bug Fixes\n\n* Fixed an HTML sanitization bypass that could allow XSS. This issue affects\n  Sanitize versions 3.0.0 through 5.2.0.\n\n  When HTML was sanitized using the \"relaxed\" config or a custom config that\n  allows certain elements, some content in a `<math>` or `<svg>` element may not\n  have beeen sanitized correctly even if `math` and `svg` were not in the\n  allowlist. This could allow carefully crafted input to sneak arbitrary HTML\n  through Sanitize, potentially enabling an XSS (cross-site scripting) attack.\n\n  You are likely to be vulnerable to this issue if you use Sanitize's relaxed\n  config or a custom config that allows one or more of the following HTML\n  elements:\n\n    -   `iframe`\n    -   `math`\n    -   `noembed`\n    -   `noframes`\n    -   `noscript`\n    -   `plaintext`\n    -   `script`\n    -   `style`\n    -   `svg`\n    -   `xmp`\n\n  See the security advisory for more details, including a workaround if you're\n  not able to upgrade: [GHSA-p4x4-rw2p-8j8m]\n\n  Many thanks to Micha\u0142 Bentkowski of Securitum for reporting this issue and\n  helping to verify the fix.\n\n[GHSA-p4x4-rw2p-8j8m]:https://github.com/rgrove/sanitize/security/advisories/GHSA-p4x4-rw2p-8j8m\n\n## 5.2.0 (2020-06-06)\n\n### Changes\n\n* The term \"whitelist\" has been replaced with \"allowlist\" throughout Sanitize's\n  source and documentation.\n\n  While the etymology of \"whitelist\" may not be explicitly racist in origin or\n  intent, there are inherent racial connotations in the implication that white\n  is good and black (as in \"blacklist\") is not.\n\n  This is a change I should have made long ago, and I apologize for not making\n  it sooner.\n\n* In transformer input, the `:is_whitelisted` and `:node_whitelist` keys are now\n  deprecated. New `:is_allowlisted` and `:node_allowlist` keys have been added.\n  The old keys will continue to work in order to avoid breaking existing code,\n  but they are no longer documented and may be removed in a future semver major\n  release.\n\n## 5.1.0 (2019-09-07)\n\n### Features\n\n* Added a `:parser_options` config hash, which makes it possible to pass custom\n  parsing options to Nokogumbo. [@austin-wang - #194][194]\n\n### Bug Fixes\n\n* Non-characters and non-whitespace control characters are now stripped from\n  HTML input before parsing to comply with the HTML Standard's [preprocessing\n  guidelines][html-preprocessing]. Prior to this Sanitize had adhered to [older\n  W3C guidelines][unicode-xml] that have since been withdrawn. [#179][179]\n\n[179]:https://github.com/rgrove/sanitize/issues/179\n[194]:https://github.com/rgrove/sanitize/pull/194\n[html-preprocessing]:https://html.spec.whatwg.org/multipage/parsing.html#preprocessing-the-input-stream\n[unicode-xml]:https://www.w3.org/TR/unicode-xml/\n\n## 5.0.0 (2018-10-14)\n\nFor most users, upgrading from 4.x shouldn't require any changes. However, the\nminimum required Ruby version has changed, and Sanitize 5.x's HTML output may\ndiffer in some small ways from 4.x's output. If this matters to you, please\nreview the changes below carefully.\n\n### Potentially Breaking Changes\n\n* Ruby 2.3.0 is now the oldest officially supported Ruby version. Sanitize may\n  work in older 2.x Rubies, but they aren't actively tested. Sanitize definitely\n  no longer works in Ruby 1.9.x.\n\n* Upgraded to Nokogumbo 2.x, which fixes various bugs and adds\n  standard-compliant HTML serialization. [@stevecheckoway - #189][189]\n\n* Children of the following elements are now removed by default when these\n  elements are removed, rather than being preserved and escaped:\n\n  - `iframe`\n  - `noembed`\n  - `noframes`\n  - `noscript`\n  - `script`\n  - `style`\n\n* Children of allowlisted `iframe` elements are now always removed. In modern\n  HTML, `iframe` elements should never have children. In HTML 4 and earlier\n  `iframe` elements were allowed to contain fallback content for legacy\n  browsers, but it's been almost two decades since that was useful.\n\n* Fixed a bug that caused `:remove_contents` to behave as if it were set to\n  `true` when it was actually an Array.\n\n[189]:https://github.com/rgrove/sanitize/pull/189\n\n## 4.6.6 (2018-07-23)\n\n* Improved performance and memory usage by optimizing `Sanitize#transform_node!`\n  [@stanhu - #183][183]\n\n[183]:https://github.com/rgrove/sanitize/pull/183\n\n## 4.6.5 (2018-05-16)\n\n* Improved performance slightly by tweaking the order of built-in transformers.\n  [@rafbm - #180][180]\n\n[180]:https://github.com/rgrove/sanitize/pull/180\n\n## 4.6.4 (2018-03-20)\n\n* Fixed: A change introduced in 4.6.2 broke certain transformers that relied on\n  being able to mutate the name of an HTML node. That change has been reverted\n  and a test has been added to cover this case. [@zetter - #177][177]\n\n[177]:https://github.com/rgrove/sanitize/issues/177\n\n## 4.6.3 (2018-03-19)\n\n* [CVE-2018-3740][176]: Fixed an HTML injection vulnerability that could allow\n  XSS.\n\n  When Sanitize <= 4.6.2 is used in combination with libxml2 >= 2.9.2, a\n  specially crafted HTML fragment can cause libxml2 to generate improperly\n  escaped output, allowing non-allowlisted attributes to be used on allowlisted\n  elements.\n\n  Sanitize now performs additional escaping on affected attributes to prevent\n  this.\n\n  Many thanks to the Shopify Application Security Team for responsibly reporting\n  this issue.\n\n[176]:https://github.com/rgrove/sanitize/issues/176\n\n## 4.6.2 (2018-03-19)\n\n* Reduced string allocations to optimize memory usage. [@janklimo - #175][175]\n\n[175]:https://github.com/rgrove/sanitize/pull/175\n\n## 4.6.1 (2018-03-15)\n\n* Added support for frozen string literals in Ruby 2.4+.\n  [@flavorjones - #174][174]\n\n[174]:https://github.com/rgrove/sanitize/pull/174\n\n## 4.6.0 (2018-01-29)\n\n* Loosened the Nokogumbo dependency to allow installing semver-compatible\n  versions greater than or equal to v1.4. [@rafbm - #171][171]\n\n[171]:https://github.com/rgrove/sanitize/pull/171\n\n## 4.5.0 (2017-06-04)\n\n* Added SVG-related CSS properties to the relaxed config. See [the diff][161]\n  for the full list of added properties. [@louim - #161][161]\n\n* Fixed: Sanitize now strips null bytes (`\\u0000`) before passing input to\n  Nokogumbo, since they can cause recent versions to crash with a failed\n  assertion in the Gumbo parser.\n\n[161]:https://github.com/rgrove/sanitize/pull/161\n\n## 4.4.0 (2016-09-29)\n\n* Added `srcset` to the attribute allowlist for `img` elements in the relaxed\n  config. [@ejtttje - #156][156]\n\n[156]:https://github.com/rgrove/sanitize/pull/156\n\n\n## 4.3.0 (2016-09-20)\n\n* Methods can now be used as transformers. [@Skipants - #155][155]\n\n[155]:https://github.com/rgrove/sanitize/pull/155\n\n\n## 4.2.0 (2016-08-22)\n\n* Added `-webkit-font-smoothing` to the relaxed CSS config. [@louim - #154][154]\n\n* Fixed: Nokogumbo >=1.4.9 changed its behavior in a way that allowed invalid\n  doctypes (like `<!DOCTYPE nonsense>`) when the `:allow_doctype` config setting\n  was `true`. Invalid doctypes are now coerced to valid ones as they were prior\n  to this Nokogumbo change.\n\n[154]:https://github.com/rgrove/sanitize/pull/154\n\n\n## 4.1.0 (2016-06-17)\n\n* Added a new CSS config setting, `:import_url_validator`. This is a Proc or\n  other callable object that will be called with each `@import` URL, and should\n  return `true` to allow the URL or `false` to remove it. [@nikz - #153][153]\n\n[153]:https://github.com/rgrove/sanitize/pull/153/\n\n\n## 4.0.1 (2015-12-09)\n\n* Unpinned the Nokogumbo dependency. [@rubys - #141][141]\n\n[141]:https://github.com/rgrove/sanitize/pull/141\n\n\n## 4.0.0 (2015-04-20)\n\n### Potentially breaking changes\n\n* Added two new CSS config settings, `:at_rules_with_properties` and\n  `:at_rules_with_styles`. These allow you to define which at-rules should be\n  allowed to contain properties and which should be allowed to contain style\n  rules. Previously this was hard-coded internally. [#111][111]\n\n  The previous `:at_rules` setting still exists, and defines at-rules that may\n  not have associated blocks, such as `@import`. If you have a custom config\n  that contains an `:at_rules` setting, you may need to move rules can have\n  blocks to either `:at_rules_with_properties` or `:at_rules_with_styles`.\n\n  See Sanitize's relaxed config for an example.\n\n### Other changes\n\n* Added full support for CSS `@page` rules in the relaxed config, including\n  support for all page-margin box rules (such as `@top-left`, `@bottom-center`,\n  etc.)\n\n* Added the following CSS at-rules to the relaxed config:\n\n    - `@-moz-keyframes`\n    - `@-o-keyframes`\n    - `@-webkit-keyframes`\n    - `@document`\n\n* Added a whole bunch of CSS properties to the relaxed config. View the complete\n  list [here](https://gist.github.com/rgrove/044cc7e9a5b44f583c05).\n\n* Small performance improvements.\n\n* Fixed: Upgraded Crass to 1.0.2 to pick up a fix that affected the parsing of\n  CSS `@page` rules.\n\n[111]:https://github.com/rgrove/sanitize/issues/111\n\n\n## 3.1.2 (2015-02-22)\n\n* Fixed: Deleting a node in a custom transformer could trigger a memory leak\n  in Nokogiri if that node's children were later reparented, which the built-in\n  CleanElement transformer did by default. The CleanElement transformer is now\n  careful not to reparent the children of deleted nodes. [#129][129]\n\n[129]:https://github.com/rgrove/sanitize/issues/129\n\n\n## 3.1.1 (2015-02-04)\n\n* Fixed: `#document` and `#fragment` failed on frozen strings, and could\n  unintentionally modify unfrozen strings if they used an encoding other than\n  UTF-8 or if they contained characters not allowed in HTML.\n  [@AnchorCat - #128][128]\n\n[128]:https://github.com/rgrove/sanitize/pull/128\n\n\n## 3.1.0 (2014-12-22)\n\n* Added the following CSS properties to the relaxed config. [@ehudc - #120][120]\n\n    - `-moz-text-size-adjust`\n    - `-ms-text-size-adjust`\n    - `-webkit-text-size-adjust`\n    - `text-size-adjust`\n\n* Updated Nokogumbo to 1.2.0 to pick up a fix for a Gumbo bug where the\n  entity `&AElig;` left its semicolon behind when it was converted to a\n  character during parsing. [#119][119]\n\n[119]:https://github.com/rgrove/sanitize/issues/119\n[120]:https://github.com/rgrove/sanitize/pull/120\n\n\n## 3.0.4 (2014-12-12)\n\n* Fixed: Harmless whitespace preceding a URL protocol (such as \" http://\")\n  caused the URL to be removed even when the protocol was allowlisted.\n  [@benubois - #126][126]\n\n[126]:https://github.com/rgrove/sanitize/pull/126\n\n\n## 3.0.3 (2014-10-29)\n\n* Fixed: Some CSS selectors weren't parsed correctly inside the body of a\n  `@media` block, causing them to be removed even when allowlist rules should\n  have allowed them to remain. [#121][121]\n\n[121]:https://github.com/rgrove/sanitize/issues/121\n\n\n## 3.0.2 (2014-09-02)\n\n* Updated Nokogumbo to 1.1.12, because 1.1.11 silently reverted the change we\n  were trying to pick up in the last release. Now issue [#114][114] is\n  _actually_ fixed.\n\n\n## 3.0.1 (2014-09-02)\n\n* Updated Nokogumbo to 1.1.11 to pick up a fix for a Gumbo bug in which certain\n  HTML character entities, such as `&Ouml;`, were parsed incorrectly, leaving\n  the semicolon behind in the output. [#114][114]\n\n[114]:https://github.com/rgrove/sanitize/issues/114\n\n\n## 3.0.0 (2014-06-21)\n\nAs of this version, Sanitize adheres strictly to the [SemVer 2.0.0][semver]\nversioning standard. This release contains API and output changes that are\nincompatible with previous releases, as indicated by the major version\nincrement.\n\n[semver]:http://semver.org/\n\n### Backwards-incompatible changes\n\n* HTML is now parsed using Google's Gumbo HTML5 parser, which adheres to the\n  HTML5 parsing spec and behaves much more like modern browser parsers than the\n  previous libxml2-based parser. As a result, HTML output may differ from that\n  of previous versions of Sanitize.\n\n* All transformers now traverse the document from the top down, starting with\n  the first node, then its first child, and so on. The `:transformers_breadth`\n  config has been removed, and old bottom-up transformers (the previous default)\n  may need to be rewritten.\n\n* Sanitize's built-in configs are now deeply frozen to prevent people from\n  modifying them (either accidentally or maliciously). To customize a built-in\n  config, create a new copy using `Sanitize::Config.merge()`, like so:\n\n```ruby\nSanitize.fragment(html, Sanitize::Config.merge(Sanitize::Config::BASIC,\n  :elements        => Sanitize::Config::BASIC[:elements] + ['div', 'table'],\n  :remove_contents => true\n))\n```\n\n* The `clean!` and `clean_document!` methods were removed, since they weren't\n  useful and tended to confuse people.\n\n* The `clean` method was renamed to `fragment` to more clearly indicate that its\n  intended use is to sanitize an HTML fragment.\n\n* The `clean_document` method was renamed to `document`.\n\n* The `clean_node!` method was renamed to `node!`.\n\n* The `document` method now raises a `Sanitize::Error` if the `<html>` element\n  isn't allowlisted, rather than a `RuntimeError`. This error is also now raised\n  regardless of the `:remove_contents` config setting.\n\n* The `:output` config has been removed. Output is now always HTML, not XHTML.\n\n* The `:output_encoding` config has been removed. Output is now always UTF-8.\n\n### Other changes\n\n* Added advanced CSS sanitization support using [Crass][crass], which is fully\n  compliant with the CSS Syntax Module Level 3 parsing spec. The contents of\n  allowlisted `<style>` elements and `style` attributes in HTML will be\n  sanitized as CSS, or you can use the `Sanitize::CSS` class to manually\n  sanitize CSS stylesheets or properties.\n\n* Added an `:allow_doctype` setting. When `true`, well-formed doctype\n  definitions will be allowed in documents. When `false` (the default), doctype\n  definitions will be removed from documents. Doctype definitions are never\n  allowed in fragments, regardless of this setting.\n\n* Added the following elements to the relaxed config, in addition to various\n  attributes: `article`, `aside`, `body`, `data`, `div`, `footer`, `head`,\n  `header`, `html`, `main`, `nav`, `section`, `span`, `style`, `title`.\n\n* The `:whitespace_elements` config is now a Hash, and allows you to specify the\n  text that should be inserted before and after these elements when they're\n  removed. The old-style Array-based config value is still supported for\n  backwards compatibility. [@alperkokmen - #94][94]\n\n* Unsuitable Unicode characters are now removed from HTML before it's parsed.\n  [#106][106]\n\n* Fixed: Non-tag brackets in input like `\"1 > 2 and 2 < 1\"` are now parsed and\n  escaped correctly in accordance with the HTML5 spec, becoming\n  `\"1 &gt; 2 and 2 &lt; 1\"`. [#83][83]\n\n* Fixed: Siblings added after the current node during traversal are now\n  also traversed. In previous versions they were simply skipped. [#91][91]\n\n* Fixed: Nokogiri has been smacked and instructed to stop adding newlines after\n  certain elements, because if people wanted newlines there they'd have put them\n  there, dammit. [#103][103]\n\n* Fixed: Added a workaround for a libxml2 bug that caused an undesired\n  content-type meta tag to be added to all documents with `<head>` elements.\n  [Nokogiri #1008][n1008]\n\n[crass]:https://github.com/rgrove/crass\n[83]:https://github.com/rgrove/sanitize/issues/83\n[91]:https://github.com/rgrove/sanitize/issues/91\n[94]:https://github.com/rgrove/sanitize/pull/94/\n[103]:https://github.com/rgrove/sanitize/issues/103\n[106]:https://github.com/rgrove/sanitize/issues/106\n[n1008]:https://github.com/sparklemotion/nokogiri/issues/1008\n\n\n## 2.1.1 (2018-09-30)\n\n* [CVE-2018-3740][176]: Fixed an HTML injection vulnerability that could allow\n  XSS (backported from Sanitize 4.6.3). [@dometto - #188][188]\n\n  When Sanitize <= 2.1.0 is used in combination with libxml2 >= 2.9.2, a\n  specially crafted HTML fragment can cause libxml2 to generate improperly\n  escaped output, allowing non-allowlisted attributes to be used on allowlisted\n  elements.\n\n  Sanitize now performs additional escaping on affected attributes to prevent\n  this.\n\n  Many thanks to the Shopify Application Security Team for responsibly reporting\n  this issue.\n\n[176]:https://github.com/rgrove/sanitize/issues/176\n[188]:https://github.com/rgrove/sanitize/pull/188\n\n\n## 2.1.0 (2014-01-13)\n\n* Added support for allowlisting arbitrary HTML5 `data-*` attributes. Use the\n  symbol `:data` instead of an attribute name in the `:attributes` config to\n  indicate that arbitrary data attributes should be allowed on an element.\n\n* Added the following elements to the relaxed config: `address`, `bdi`, `hr`,\n  and `summary`.\n\n* Fixed: A colon (`:`) character in a URL fragment identifier such as `#foo:1`\n  was incorrectly treated as a protocol delimiter. [@heathd - #87][87]\n\n[87]:https://github.com/rgrove/sanitize/pull/87\n\n\n## 2.0.6 (2013-07-10)\n\n* Fixed: Version 2.0.5 inadvertently included some work-in-progress changes that\n  shouldn't have made their way into the master branch. This is what happens\n  when I release before coffee instead of after.\n\n\n## 2.0.5 (2013-07-10)\n\n* Loosened the Nokogiri dependency back to >= 1.4.4 to allow Sanitize to coexist\n  in newer Rubies with other libraries that restrict Nokogiri to 1.5.x for 1.8.7\n  compatibility. Sanitize still no longer supports 1.8.7, but this should make\n  life easier for people who need those other libs.\n\n\n## 2.0.4 (2013-06-12)\n\n* Added `Sanitize.clean_document`, which sanitizes a full HTML document rather\n  than just a fragment. [Ben Anderson]\n\n* Nokogiri dependency bumped to 1.6.x.\n\n* Dropped support for Ruby versions older than 1.9.2.\n\n\n## 2.0.3 (2011-07-01)\n\n* Loosened the Nokogiri dependency to allow Nokogiri 1.5.x.\n\n\n## 2.0.2 (2011-05-21)\n\n* Fixed a bug in which a protocol like \"java\\script:\" would be translated to\n  \"java%5Cscript:\" and allowed through the filter when relative URLs were\n  enabled. This didn't actually allow malicious code to run, but it is\n  undesired behavior.\n\n\n## 2.0.1 (2011-03-16)\n\n* Updated the protocol regex to anchor at the beginning of the string rather\n  than the beginning of a line. [Eaden McKee]\n\n\n## 2.0.0 (2011-01-15)\n\n* The environment data passed into transformers and the return values expected\n  from transformers have changed. Old transformers will need to be updated.\n  See the README for details.\n\n* Transformers now receive nodes of all types, not just element nodes.\n\n* Sanitize's own core filtering logic is now implemented as a set of always-on\n  transformers.\n\n* The default value for the `:output` config is now `:html`. Previously it was\n  `:xhtml`.\n\n* Added a `:whitespace_elements` config, which specifies elements (such as\n  `<br>` and `<p>`) that should be replaced with whitespace when removed in\n  order to preserve readability. See the README for the default list of\n  elements that will be replaced with whitespace when removed.\n\n* Added a `:transformers_breadth` config, which may be used to specify\n  transformers that should traverse nodes in a breadth-first mode rather than\n  the default depth-first mode.\n\n* Added the `abbr`, `dfn`, `kbd`, `mark`, `s`, `samp`, `time`, and `var`\n  elements to the allowlists for the basic and relaxed configs.\n\n* Added the `bdo`, `del`, `figcaption`, `figure`, `hgroup`, `ins`, `rp`, `rt`,\n  `ruby`, and `wbr` elements to the allowlist for the relaxed config.\n\n* The `dir`, `lang`, and `title` attributes are now allowlisted for all\n  elements in the relaxed config.\n\n* Bumped minimum Nokogiri version to 1.4.4 to avoid a bug in 1.4.2+\n  (issue #315) that caused `</body></html>` to be appended to the CDATA inside\n  unterminated script and style elements.\n\n\n## 1.2.1 (2010-04-20)\n\n* Added a `:remove_contents` config setting. If set to `true`, Sanitize will\n  remove the contents of all non-allowlisted elements in addition to the\n  elements themselves. If set to an array of element names, Sanitize will\n  remove the contents of only those elements (when filtered), and leave the\n  contents of other filtered elements. [Thanks to Rafael Souza for the array\n  option]\n\n* Added an `:output_encoding` config setting to allow the character encoding\n  for HTML output to be specified. The default is utf-8.\n\n* The environment hash passed into transformers now includes a `:node_name`\n  item containing the lowercase name of the current HTML node (e.g. \"div\").\n\n* Returning anything other than a Hash or nil from a transformer will now\n  raise a meaningful `Sanitize::Error` exception rather than an unintended\n  `NameError`.\n\n\n## 1.2.0 (2010-01-17)\n\n* Requires Nokogiri ~> 1.4.1.\n\n* Added support for transformers, which allow you to filter and alter nodes\n  using your own custom logic, on top of (or instead of) Sanitize's core\n  filter. See the README for details and examples.\n\n* Added `Sanitize.clean_node!`, which sanitizes a `Nokogiri::XML::Node` and\n  all its children.\n\n* Added elements `<h1>` through `<h6>` to the Relaxed allowlist. [Suggested by\n  David Reese]\n\n\n## 1.1.0 (2009-10-11)\n\n* Migrated from Hpricot to Nokogiri. Requires libxml2 >= 2.7.2 [Adam Hooper]\n\n* Added an `:output` config setting to allow the output format to be\n  specified. Supported formats are `:xhtml` (the default) and `:html` (which\n  outputs HTML4).\n\n* Changed protocol regex to ensure Sanitize doesn't kill URLs with colons in\n  path segments. [Peter Cooper]\n\n\n## 1.0.8 (2009-04-23)\n\n* Added a workaround for an Hpricot bug that prevents attribute names from\n  being downcased in recent versions of Hpricot. This was exploitable to\n  prevent non-allowlisted protocols from being cleaned. [Reported by Ben\n  Wanicur]\n\n\n## 1.0.7 (2009-04-11)\n\n* Requires Hpricot 0.8.1+, which is finally compatible with Ruby 1.9.1.\n\n* Fixed a bug that caused named character entities containing digits (like\n  `&sup2;`) to be escaped when they shouldn't have been. [Reported by\n  Sebastian Steinmetz]\n\n\n## 1.0.6 (2009-02-23)\n\n* Removed htmlentities gem dependency.\n\n* Existing well-formed character entity references in the input string are now\n  preserved rather than being decoded and re-encoded.\n\n* The `'` character is now encoded as `&#39;` instead of `&apos;` to prevent\n  problems in IE6.\n\n* You can now specify the symbol `:all` in place of an element name in the\n  attributes config hash to allow certain attributes on all elements. [Thanks\n  to Mutwin Kraus]\n\n\n## 1.0.5 (2009-02-05)\n\n* Fixed a bug introduced in version 1.0.3 that prevented non-allowlisted\n  protocols from being cleaned when relative URLs were allowed. [Reported by\n  Dev Purkayastha]\n\n* Fixed \"undefined method `parent='\" exceptions caused by parser changes in\n  edge Hpricot.\n\n\n## 1.0.4 (2009-01-16)\n\n* Fixed a bug that made it possible to sneak a non-allowlisted element through\n  by repeating it several times in a row. All versions of Sanitize prior to\n  1.0.4 are vulnerable. [Reported by Cristobal]\n\n\n## 1.0.3 (2009-01-15)\n\n* Fixed a bug whereby incomplete Unicode or hex entities could be used to\n  prevent non-allowlisted protocols from being cleaned. Since IE6 and Opera\n  still decode the incomplete entities, users of those browsers may be\n  vulnerable to malicious script injection on websites using versions of\n  Sanitize prior to 1.0.3.\n\n\n## 1.0.2 (2009-01-04)\n\n* Fixed a bug that caused an exception to be thrown when parsing a valueless\n  attribute that's expected to contain a URL.\n\n\n## 1.0.1 (2009-01-01)\n\n* You can now specify `:relative` in a protocol config array to allow\n  attributes containing relative URLs with no protocol. The Basic and Relaxed\n  configs have been updated to allow relative URLs.\n\n* Added a workaround for an Hpricot bug that causes HTML entities for\n  non-ASCII characters to be replaced by question marks, and all other\n  entities to be destructively decoded.\n\n\n## 1.0.0 (2008-12-25)\n\n* First release.\n", "class Sanitize; module Transformers; module CSS\n\n# Enforces a CSS allowlist on the contents of `style` attributes.\nclass CleanAttribute\n  def initialize(sanitizer_or_config)\n    if Sanitize::CSS === sanitizer_or_config\n      @scss = sanitizer_or_config\n    else\n      @scss = Sanitize::CSS.new(sanitizer_or_config)\n    end\n  end\n\n  def call(env)\n    node = env[:node]\n\n    return unless node.type == Nokogiri::XML::Node::ELEMENT_NODE &&\n        node.key?('style') && !env[:is_allowlisted]\n\n    attr = node.attribute('style')\n    css  = @scss.properties(attr.value)\n\n    if css.strip.empty?\n      attr.unlink\n    else\n      attr.value = css\n    end\n  end\nend\n\n# Enforces a CSS allowlist on the contents of `<style>` elements.\nclass CleanElement\n  def initialize(sanitizer_or_config)\n    if Sanitize::CSS === sanitizer_or_config\n      @scss = sanitizer_or_config\n    else\n      @scss = Sanitize::CSS.new(sanitizer_or_config)\n    end\n  end\n\n  def call(env)\n    node = env[:node]\n\n    return unless node.type == Nokogiri::XML::Node::ELEMENT_NODE &&\n        env[:node_name] == 'style'\n\n    css = @scss.stylesheet(node.content)\n\n    if css.strip.empty?\n      node.unlink\n    else\n      node.children.unlink\n      node << Nokogiri::XML::Text.new(css, node.document)\n    end\n  end\nend\n\nend; end; end\n", "# encoding: utf-8\n\nclass Sanitize\n  VERSION = '6.0.1'\nend\n", "# encoding: utf-8\nrequire_relative 'common'\n\n# Miscellaneous attempts to sneak maliciously crafted CSS past Sanitize. Some of\n# these are courtesy of (or inspired by) the OWASP XSS Filter Evasion Cheat\n# Sheet.\n#\n# https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n\ndescribe 'Malicious CSS' do\n  make_my_diffs_pretty!\n  parallelize_me!\n\n  before do\n    @s = Sanitize::CSS.new(Sanitize::Config::RELAXED)\n  end\n\n  it 'should not be possible to inject an expression by munging it with a comment' do\n    _(@s.properties(%[width:expr/*XSS*/ession(alert('XSS'))])).\n      must_equal ''\n\n    _(@s.properties(%[width:ex/*XSS*//*/*/pression(alert(\"XSS\"))])).\n      must_equal ''\n  end\n\n  it 'should not be possible to inject an expression by munging it with a newline' do\n    _(@s.properties(%[width:\\nexpression(alert('XSS'));])).\n      must_equal ''\n  end\n\n  it 'should not allow the javascript protocol' do\n    _(@s.properties(%[background-image:url(\"javascript:alert('XSS')\");])).\n      must_equal ''\n\n    _(Sanitize.fragment(%[<div style=\"background-image: url(&#1;javascript:alert('XSS'))\">],\n      Sanitize::Config::RELAXED)).must_equal '<div></div>'\n  end\n\n  it 'should not allow behaviors' do\n    _(@s.properties(%[behavior: url(xss.htc);])).must_equal ''\n  end\nend\n"], "fixing_code": ["# Sanitize History\n\n## 6.0.2 (2023-07-06)\n\n### Bug Fixes\n\n* CVE-2023-36823: Fixed an HTML+CSS sanitization bypass that could allow XSS\n  (cross-site scripting). This issue affects Sanitize versions 3.0.0 through\n  6.0.1.\n\n  When using Sanitize's relaxed config or a custom config that allows `<style>`\n  elements and one or more CSS at-rules, carefully crafted input could be used\n  to sneak arbitrary HTML through Sanitize.\n\n  See the following security advisory for additional details:\n  [GHSA-f5ww-cq3m-q3g7](https://github.com/rgrove/sanitize/security/advisories/GHSA-f5ww-cq3m-q3g7)\n\n  Thanks to @cure53 for finding this issue.\n\n## 6.0.1 (2023-01-27)\n\n### Bug Fixes\n\n* Sanitize now always removes `<noscript>` elements and their contents, even\n  when `noscript` is in the allowlist.\n\n  This fixes a sanitization bypass that could occur when `noscript` was allowed\n  by a custom allowlist. In this scenario, carefully crafted input could sneak\n  arbitrary HTML through Sanitize, potentially enabling an XSS (cross-site\n  scripting) attack.\n\n  Sanitize's default configs don't allow `<noscript>` elements and are not\n  vulnerable. This issue only affects users who are using a custom config that\n  adds `noscript` to the element allowlist.\n\n  The root cause of this issue is that HTML parsing rules treat the contents of\n  a `<noscript>` element differently depending on whether scripting is enabled\n  in the user agent. Nokogiri doesn't support scripting so it follows the\n  \"scripting disabled\" rules, but a web browser with scripting enabled will\n  follow the \"scripting enabled\" rules. This means that Sanitize can't reliably\n  make the contents of a `<noscript>` element safe for scripting enabled\n  browsers, so the safest thing to do is to remove the element and its contents\n  entirely.\n\n  See the following security advisory for additional details:\n  [GHSA-fw3g-2h3j-qmm7](https://github.com/rgrove/sanitize/security/advisories/GHSA-fw3g-2h3j-qmm7)\n\n  Thanks to David Klein from [TU Braunschweig](https://www.tu-braunschweig.de/en/ias)\n  (@leeN) for reporting this issue.\n\n* Fixed an edge case in which the contents of an \"unescaped text\" element (such\n  as `<noembed>` or `<xmp>`) were not properly escaped if that element was\n  allowlisted and was also inside an allowlisted `<math>` or `<svg>` element.\n\n  The only way to encounter this situation was to ignore multiple warnings in\n  the readme and create a custom config that allowlisted all the elements\n  involved, including `<math>` or `<svg>`. If you're using a default config or\n  if you heeded the warnings about MathML and SVG not being supported, you're\n  not affected by this issue.\n\n  Please let this be a reminder that Sanitize cannot safely sanitize MathML or\n  SVG content and does not support this use case. The default configs don't\n  allow MathML or SVG elements, and allowlisting MathML or SVG elements in a\n  custom config may create a security vulnerability in your application.\n\n  Documentation has been updated to add more warnings and to make the existing\n  warnings about this more prominent.\n\n  Thanks to David Klein from [TU Braunschweig](https://www.tu-braunschweig.de/en/ias)\n  (@leeN) for reporting this issue.\n\n## 6.0.0 (2021-08-03)\n\n### Potentially Breaking Changes\n\n* Ruby 2.5.0 is now the oldest officially supported Ruby version.\n\n* Sanitize now requires Nokogiri 1.12.0 or higher, which includes Nokogumbo.\n  The separate dependency on Nokogumbo has been removed. [@lis2 - #211][211]\n\n[211]:https://github.com/rgrove/sanitize/pull/211\n\n## 5.2.3 (2021-01-11)\n\n### Bug Fixes\n\n* Ensure protocol sanitization is applied to data attributes.\n  [@ccutrer - #207][207]\n\n[207]:https://github.com/rgrove/sanitize/pull/207\n\n## 5.2.2 (2021-01-06)\n\n### Bug Fixes\n\n* Fixed a deprecation warning in Ruby 2.7+ when using keyword arguments in a\n  custom transformer. [@mscrivo - #206][206]\n\n[206]:https://github.com/rgrove/sanitize/pull/206\n\n## 5.2.1 (2020-06-16)\n\n### Bug Fixes\n\n* Fixed an HTML sanitization bypass that could allow XSS. This issue affects\n  Sanitize versions 3.0.0 through 5.2.0.\n\n  When HTML was sanitized using the \"relaxed\" config or a custom config that\n  allows certain elements, some content in a `<math>` or `<svg>` element may not\n  have beeen sanitized correctly even if `math` and `svg` were not in the\n  allowlist. This could allow carefully crafted input to sneak arbitrary HTML\n  through Sanitize, potentially enabling an XSS (cross-site scripting) attack.\n\n  You are likely to be vulnerable to this issue if you use Sanitize's relaxed\n  config or a custom config that allows one or more of the following HTML\n  elements:\n\n    -   `iframe`\n    -   `math`\n    -   `noembed`\n    -   `noframes`\n    -   `noscript`\n    -   `plaintext`\n    -   `script`\n    -   `style`\n    -   `svg`\n    -   `xmp`\n\n  See the security advisory for more details, including a workaround if you're\n  not able to upgrade: [GHSA-p4x4-rw2p-8j8m]\n\n  Many thanks to Micha\u0142 Bentkowski of Securitum for reporting this issue and\n  helping to verify the fix.\n\n[GHSA-p4x4-rw2p-8j8m]:https://github.com/rgrove/sanitize/security/advisories/GHSA-p4x4-rw2p-8j8m\n\n## 5.2.0 (2020-06-06)\n\n### Changes\n\n* The term \"whitelist\" has been replaced with \"allowlist\" throughout Sanitize's\n  source and documentation.\n\n  While the etymology of \"whitelist\" may not be explicitly racist in origin or\n  intent, there are inherent racial connotations in the implication that white\n  is good and black (as in \"blacklist\") is not.\n\n  This is a change I should have made long ago, and I apologize for not making\n  it sooner.\n\n* In transformer input, the `:is_whitelisted` and `:node_whitelist` keys are now\n  deprecated. New `:is_allowlisted` and `:node_allowlist` keys have been added.\n  The old keys will continue to work in order to avoid breaking existing code,\n  but they are no longer documented and may be removed in a future semver major\n  release.\n\n## 5.1.0 (2019-09-07)\n\n### Features\n\n* Added a `:parser_options` config hash, which makes it possible to pass custom\n  parsing options to Nokogumbo. [@austin-wang - #194][194]\n\n### Bug Fixes\n\n* Non-characters and non-whitespace control characters are now stripped from\n  HTML input before parsing to comply with the HTML Standard's [preprocessing\n  guidelines][html-preprocessing]. Prior to this Sanitize had adhered to [older\n  W3C guidelines][unicode-xml] that have since been withdrawn. [#179][179]\n\n[179]:https://github.com/rgrove/sanitize/issues/179\n[194]:https://github.com/rgrove/sanitize/pull/194\n[html-preprocessing]:https://html.spec.whatwg.org/multipage/parsing.html#preprocessing-the-input-stream\n[unicode-xml]:https://www.w3.org/TR/unicode-xml/\n\n## 5.0.0 (2018-10-14)\n\nFor most users, upgrading from 4.x shouldn't require any changes. However, the\nminimum required Ruby version has changed, and Sanitize 5.x's HTML output may\ndiffer in some small ways from 4.x's output. If this matters to you, please\nreview the changes below carefully.\n\n### Potentially Breaking Changes\n\n* Ruby 2.3.0 is now the oldest officially supported Ruby version. Sanitize may\n  work in older 2.x Rubies, but they aren't actively tested. Sanitize definitely\n  no longer works in Ruby 1.9.x.\n\n* Upgraded to Nokogumbo 2.x, which fixes various bugs and adds\n  standard-compliant HTML serialization. [@stevecheckoway - #189][189]\n\n* Children of the following elements are now removed by default when these\n  elements are removed, rather than being preserved and escaped:\n\n  - `iframe`\n  - `noembed`\n  - `noframes`\n  - `noscript`\n  - `script`\n  - `style`\n\n* Children of allowlisted `iframe` elements are now always removed. In modern\n  HTML, `iframe` elements should never have children. In HTML 4 and earlier\n  `iframe` elements were allowed to contain fallback content for legacy\n  browsers, but it's been almost two decades since that was useful.\n\n* Fixed a bug that caused `:remove_contents` to behave as if it were set to\n  `true` when it was actually an Array.\n\n[189]:https://github.com/rgrove/sanitize/pull/189\n\n## 4.6.6 (2018-07-23)\n\n* Improved performance and memory usage by optimizing `Sanitize#transform_node!`\n  [@stanhu - #183][183]\n\n[183]:https://github.com/rgrove/sanitize/pull/183\n\n## 4.6.5 (2018-05-16)\n\n* Improved performance slightly by tweaking the order of built-in transformers.\n  [@rafbm - #180][180]\n\n[180]:https://github.com/rgrove/sanitize/pull/180\n\n## 4.6.4 (2018-03-20)\n\n* Fixed: A change introduced in 4.6.2 broke certain transformers that relied on\n  being able to mutate the name of an HTML node. That change has been reverted\n  and a test has been added to cover this case. [@zetter - #177][177]\n\n[177]:https://github.com/rgrove/sanitize/issues/177\n\n## 4.6.3 (2018-03-19)\n\n* [CVE-2018-3740][176]: Fixed an HTML injection vulnerability that could allow\n  XSS.\n\n  When Sanitize <= 4.6.2 is used in combination with libxml2 >= 2.9.2, a\n  specially crafted HTML fragment can cause libxml2 to generate improperly\n  escaped output, allowing non-allowlisted attributes to be used on allowlisted\n  elements.\n\n  Sanitize now performs additional escaping on affected attributes to prevent\n  this.\n\n  Many thanks to the Shopify Application Security Team for responsibly reporting\n  this issue.\n\n[176]:https://github.com/rgrove/sanitize/issues/176\n\n## 4.6.2 (2018-03-19)\n\n* Reduced string allocations to optimize memory usage. [@janklimo - #175][175]\n\n[175]:https://github.com/rgrove/sanitize/pull/175\n\n## 4.6.1 (2018-03-15)\n\n* Added support for frozen string literals in Ruby 2.4+.\n  [@flavorjones - #174][174]\n\n[174]:https://github.com/rgrove/sanitize/pull/174\n\n## 4.6.0 (2018-01-29)\n\n* Loosened the Nokogumbo dependency to allow installing semver-compatible\n  versions greater than or equal to v1.4. [@rafbm - #171][171]\n\n[171]:https://github.com/rgrove/sanitize/pull/171\n\n## 4.5.0 (2017-06-04)\n\n* Added SVG-related CSS properties to the relaxed config. See [the diff][161]\n  for the full list of added properties. [@louim - #161][161]\n\n* Fixed: Sanitize now strips null bytes (`\\u0000`) before passing input to\n  Nokogumbo, since they can cause recent versions to crash with a failed\n  assertion in the Gumbo parser.\n\n[161]:https://github.com/rgrove/sanitize/pull/161\n\n## 4.4.0 (2016-09-29)\n\n* Added `srcset` to the attribute allowlist for `img` elements in the relaxed\n  config. [@ejtttje - #156][156]\n\n[156]:https://github.com/rgrove/sanitize/pull/156\n\n\n## 4.3.0 (2016-09-20)\n\n* Methods can now be used as transformers. [@Skipants - #155][155]\n\n[155]:https://github.com/rgrove/sanitize/pull/155\n\n\n## 4.2.0 (2016-08-22)\n\n* Added `-webkit-font-smoothing` to the relaxed CSS config. [@louim - #154][154]\n\n* Fixed: Nokogumbo >=1.4.9 changed its behavior in a way that allowed invalid\n  doctypes (like `<!DOCTYPE nonsense>`) when the `:allow_doctype` config setting\n  was `true`. Invalid doctypes are now coerced to valid ones as they were prior\n  to this Nokogumbo change.\n\n[154]:https://github.com/rgrove/sanitize/pull/154\n\n\n## 4.1.0 (2016-06-17)\n\n* Added a new CSS config setting, `:import_url_validator`. This is a Proc or\n  other callable object that will be called with each `@import` URL, and should\n  return `true` to allow the URL or `false` to remove it. [@nikz - #153][153]\n\n[153]:https://github.com/rgrove/sanitize/pull/153/\n\n\n## 4.0.1 (2015-12-09)\n\n* Unpinned the Nokogumbo dependency. [@rubys - #141][141]\n\n[141]:https://github.com/rgrove/sanitize/pull/141\n\n\n## 4.0.0 (2015-04-20)\n\n### Potentially breaking changes\n\n* Added two new CSS config settings, `:at_rules_with_properties` and\n  `:at_rules_with_styles`. These allow you to define which at-rules should be\n  allowed to contain properties and which should be allowed to contain style\n  rules. Previously this was hard-coded internally. [#111][111]\n\n  The previous `:at_rules` setting still exists, and defines at-rules that may\n  not have associated blocks, such as `@import`. If you have a custom config\n  that contains an `:at_rules` setting, you may need to move rules can have\n  blocks to either `:at_rules_with_properties` or `:at_rules_with_styles`.\n\n  See Sanitize's relaxed config for an example.\n\n### Other changes\n\n* Added full support for CSS `@page` rules in the relaxed config, including\n  support for all page-margin box rules (such as `@top-left`, `@bottom-center`,\n  etc.)\n\n* Added the following CSS at-rules to the relaxed config:\n\n    - `@-moz-keyframes`\n    - `@-o-keyframes`\n    - `@-webkit-keyframes`\n    - `@document`\n\n* Added a whole bunch of CSS properties to the relaxed config. View the complete\n  list [here](https://gist.github.com/rgrove/044cc7e9a5b44f583c05).\n\n* Small performance improvements.\n\n* Fixed: Upgraded Crass to 1.0.2 to pick up a fix that affected the parsing of\n  CSS `@page` rules.\n\n[111]:https://github.com/rgrove/sanitize/issues/111\n\n\n## 3.1.2 (2015-02-22)\n\n* Fixed: Deleting a node in a custom transformer could trigger a memory leak\n  in Nokogiri if that node's children were later reparented, which the built-in\n  CleanElement transformer did by default. The CleanElement transformer is now\n  careful not to reparent the children of deleted nodes. [#129][129]\n\n[129]:https://github.com/rgrove/sanitize/issues/129\n\n\n## 3.1.1 (2015-02-04)\n\n* Fixed: `#document` and `#fragment` failed on frozen strings, and could\n  unintentionally modify unfrozen strings if they used an encoding other than\n  UTF-8 or if they contained characters not allowed in HTML.\n  [@AnchorCat - #128][128]\n\n[128]:https://github.com/rgrove/sanitize/pull/128\n\n\n## 3.1.0 (2014-12-22)\n\n* Added the following CSS properties to the relaxed config. [@ehudc - #120][120]\n\n    - `-moz-text-size-adjust`\n    - `-ms-text-size-adjust`\n    - `-webkit-text-size-adjust`\n    - `text-size-adjust`\n\n* Updated Nokogumbo to 1.2.0 to pick up a fix for a Gumbo bug where the\n  entity `&AElig;` left its semicolon behind when it was converted to a\n  character during parsing. [#119][119]\n\n[119]:https://github.com/rgrove/sanitize/issues/119\n[120]:https://github.com/rgrove/sanitize/pull/120\n\n\n## 3.0.4 (2014-12-12)\n\n* Fixed: Harmless whitespace preceding a URL protocol (such as \" http://\")\n  caused the URL to be removed even when the protocol was allowlisted.\n  [@benubois - #126][126]\n\n[126]:https://github.com/rgrove/sanitize/pull/126\n\n\n## 3.0.3 (2014-10-29)\n\n* Fixed: Some CSS selectors weren't parsed correctly inside the body of a\n  `@media` block, causing them to be removed even when allowlist rules should\n  have allowed them to remain. [#121][121]\n\n[121]:https://github.com/rgrove/sanitize/issues/121\n\n\n## 3.0.2 (2014-09-02)\n\n* Updated Nokogumbo to 1.1.12, because 1.1.11 silently reverted the change we\n  were trying to pick up in the last release. Now issue [#114][114] is\n  _actually_ fixed.\n\n\n## 3.0.1 (2014-09-02)\n\n* Updated Nokogumbo to 1.1.11 to pick up a fix for a Gumbo bug in which certain\n  HTML character entities, such as `&Ouml;`, were parsed incorrectly, leaving\n  the semicolon behind in the output. [#114][114]\n\n[114]:https://github.com/rgrove/sanitize/issues/114\n\n\n## 3.0.0 (2014-06-21)\n\nAs of this version, Sanitize adheres strictly to the [SemVer 2.0.0][semver]\nversioning standard. This release contains API and output changes that are\nincompatible with previous releases, as indicated by the major version\nincrement.\n\n[semver]:http://semver.org/\n\n### Backwards-incompatible changes\n\n* HTML is now parsed using Google's Gumbo HTML5 parser, which adheres to the\n  HTML5 parsing spec and behaves much more like modern browser parsers than the\n  previous libxml2-based parser. As a result, HTML output may differ from that\n  of previous versions of Sanitize.\n\n* All transformers now traverse the document from the top down, starting with\n  the first node, then its first child, and so on. The `:transformers_breadth`\n  config has been removed, and old bottom-up transformers (the previous default)\n  may need to be rewritten.\n\n* Sanitize's built-in configs are now deeply frozen to prevent people from\n  modifying them (either accidentally or maliciously). To customize a built-in\n  config, create a new copy using `Sanitize::Config.merge()`, like so:\n\n```ruby\nSanitize.fragment(html, Sanitize::Config.merge(Sanitize::Config::BASIC,\n  :elements        => Sanitize::Config::BASIC[:elements] + ['div', 'table'],\n  :remove_contents => true\n))\n```\n\n* The `clean!` and `clean_document!` methods were removed, since they weren't\n  useful and tended to confuse people.\n\n* The `clean` method was renamed to `fragment` to more clearly indicate that its\n  intended use is to sanitize an HTML fragment.\n\n* The `clean_document` method was renamed to `document`.\n\n* The `clean_node!` method was renamed to `node!`.\n\n* The `document` method now raises a `Sanitize::Error` if the `<html>` element\n  isn't allowlisted, rather than a `RuntimeError`. This error is also now raised\n  regardless of the `:remove_contents` config setting.\n\n* The `:output` config has been removed. Output is now always HTML, not XHTML.\n\n* The `:output_encoding` config has been removed. Output is now always UTF-8.\n\n### Other changes\n\n* Added advanced CSS sanitization support using [Crass][crass], which is fully\n  compliant with the CSS Syntax Module Level 3 parsing spec. The contents of\n  allowlisted `<style>` elements and `style` attributes in HTML will be\n  sanitized as CSS, or you can use the `Sanitize::CSS` class to manually\n  sanitize CSS stylesheets or properties.\n\n* Added an `:allow_doctype` setting. When `true`, well-formed doctype\n  definitions will be allowed in documents. When `false` (the default), doctype\n  definitions will be removed from documents. Doctype definitions are never\n  allowed in fragments, regardless of this setting.\n\n* Added the following elements to the relaxed config, in addition to various\n  attributes: `article`, `aside`, `body`, `data`, `div`, `footer`, `head`,\n  `header`, `html`, `main`, `nav`, `section`, `span`, `style`, `title`.\n\n* The `:whitespace_elements` config is now a Hash, and allows you to specify the\n  text that should be inserted before and after these elements when they're\n  removed. The old-style Array-based config value is still supported for\n  backwards compatibility. [@alperkokmen - #94][94]\n\n* Unsuitable Unicode characters are now removed from HTML before it's parsed.\n  [#106][106]\n\n* Fixed: Non-tag brackets in input like `\"1 > 2 and 2 < 1\"` are now parsed and\n  escaped correctly in accordance with the HTML5 spec, becoming\n  `\"1 &gt; 2 and 2 &lt; 1\"`. [#83][83]\n\n* Fixed: Siblings added after the current node during traversal are now\n  also traversed. In previous versions they were simply skipped. [#91][91]\n\n* Fixed: Nokogiri has been smacked and instructed to stop adding newlines after\n  certain elements, because if people wanted newlines there they'd have put them\n  there, dammit. [#103][103]\n\n* Fixed: Added a workaround for a libxml2 bug that caused an undesired\n  content-type meta tag to be added to all documents with `<head>` elements.\n  [Nokogiri #1008][n1008]\n\n[crass]:https://github.com/rgrove/crass\n[83]:https://github.com/rgrove/sanitize/issues/83\n[91]:https://github.com/rgrove/sanitize/issues/91\n[94]:https://github.com/rgrove/sanitize/pull/94/\n[103]:https://github.com/rgrove/sanitize/issues/103\n[106]:https://github.com/rgrove/sanitize/issues/106\n[n1008]:https://github.com/sparklemotion/nokogiri/issues/1008\n\n\n## 2.1.1 (2018-09-30)\n\n* [CVE-2018-3740][176]: Fixed an HTML injection vulnerability that could allow\n  XSS (backported from Sanitize 4.6.3). [@dometto - #188][188]\n\n  When Sanitize <= 2.1.0 is used in combination with libxml2 >= 2.9.2, a\n  specially crafted HTML fragment can cause libxml2 to generate improperly\n  escaped output, allowing non-allowlisted attributes to be used on allowlisted\n  elements.\n\n  Sanitize now performs additional escaping on affected attributes to prevent\n  this.\n\n  Many thanks to the Shopify Application Security Team for responsibly reporting\n  this issue.\n\n[176]:https://github.com/rgrove/sanitize/issues/176\n[188]:https://github.com/rgrove/sanitize/pull/188\n\n\n## 2.1.0 (2014-01-13)\n\n* Added support for allowlisting arbitrary HTML5 `data-*` attributes. Use the\n  symbol `:data` instead of an attribute name in the `:attributes` config to\n  indicate that arbitrary data attributes should be allowed on an element.\n\n* Added the following elements to the relaxed config: `address`, `bdi`, `hr`,\n  and `summary`.\n\n* Fixed: A colon (`:`) character in a URL fragment identifier such as `#foo:1`\n  was incorrectly treated as a protocol delimiter. [@heathd - #87][87]\n\n[87]:https://github.com/rgrove/sanitize/pull/87\n\n\n## 2.0.6 (2013-07-10)\n\n* Fixed: Version 2.0.5 inadvertently included some work-in-progress changes that\n  shouldn't have made their way into the master branch. This is what happens\n  when I release before coffee instead of after.\n\n\n## 2.0.5 (2013-07-10)\n\n* Loosened the Nokogiri dependency back to >= 1.4.4 to allow Sanitize to coexist\n  in newer Rubies with other libraries that restrict Nokogiri to 1.5.x for 1.8.7\n  compatibility. Sanitize still no longer supports 1.8.7, but this should make\n  life easier for people who need those other libs.\n\n\n## 2.0.4 (2013-06-12)\n\n* Added `Sanitize.clean_document`, which sanitizes a full HTML document rather\n  than just a fragment. [Ben Anderson]\n\n* Nokogiri dependency bumped to 1.6.x.\n\n* Dropped support for Ruby versions older than 1.9.2.\n\n\n## 2.0.3 (2011-07-01)\n\n* Loosened the Nokogiri dependency to allow Nokogiri 1.5.x.\n\n\n## 2.0.2 (2011-05-21)\n\n* Fixed a bug in which a protocol like \"java\\script:\" would be translated to\n  \"java%5Cscript:\" and allowed through the filter when relative URLs were\n  enabled. This didn't actually allow malicious code to run, but it is\n  undesired behavior.\n\n\n## 2.0.1 (2011-03-16)\n\n* Updated the protocol regex to anchor at the beginning of the string rather\n  than the beginning of a line. [Eaden McKee]\n\n\n## 2.0.0 (2011-01-15)\n\n* The environment data passed into transformers and the return values expected\n  from transformers have changed. Old transformers will need to be updated.\n  See the README for details.\n\n* Transformers now receive nodes of all types, not just element nodes.\n\n* Sanitize's own core filtering logic is now implemented as a set of always-on\n  transformers.\n\n* The default value for the `:output` config is now `:html`. Previously it was\n  `:xhtml`.\n\n* Added a `:whitespace_elements` config, which specifies elements (such as\n  `<br>` and `<p>`) that should be replaced with whitespace when removed in\n  order to preserve readability. See the README for the default list of\n  elements that will be replaced with whitespace when removed.\n\n* Added a `:transformers_breadth` config, which may be used to specify\n  transformers that should traverse nodes in a breadth-first mode rather than\n  the default depth-first mode.\n\n* Added the `abbr`, `dfn`, `kbd`, `mark`, `s`, `samp`, `time`, and `var`\n  elements to the allowlists for the basic and relaxed configs.\n\n* Added the `bdo`, `del`, `figcaption`, `figure`, `hgroup`, `ins`, `rp`, `rt`,\n  `ruby`, and `wbr` elements to the allowlist for the relaxed config.\n\n* The `dir`, `lang`, and `title` attributes are now allowlisted for all\n  elements in the relaxed config.\n\n* Bumped minimum Nokogiri version to 1.4.4 to avoid a bug in 1.4.2+\n  (issue #315) that caused `</body></html>` to be appended to the CDATA inside\n  unterminated script and style elements.\n\n\n## 1.2.1 (2010-04-20)\n\n* Added a `:remove_contents` config setting. If set to `true`, Sanitize will\n  remove the contents of all non-allowlisted elements in addition to the\n  elements themselves. If set to an array of element names, Sanitize will\n  remove the contents of only those elements (when filtered), and leave the\n  contents of other filtered elements. [Thanks to Rafael Souza for the array\n  option]\n\n* Added an `:output_encoding` config setting to allow the character encoding\n  for HTML output to be specified. The default is utf-8.\n\n* The environment hash passed into transformers now includes a `:node_name`\n  item containing the lowercase name of the current HTML node (e.g. \"div\").\n\n* Returning anything other than a Hash or nil from a transformer will now\n  raise a meaningful `Sanitize::Error` exception rather than an unintended\n  `NameError`.\n\n\n## 1.2.0 (2010-01-17)\n\n* Requires Nokogiri ~> 1.4.1.\n\n* Added support for transformers, which allow you to filter and alter nodes\n  using your own custom logic, on top of (or instead of) Sanitize's core\n  filter. See the README for details and examples.\n\n* Added `Sanitize.clean_node!`, which sanitizes a `Nokogiri::XML::Node` and\n  all its children.\n\n* Added elements `<h1>` through `<h6>` to the Relaxed allowlist. [Suggested by\n  David Reese]\n\n\n## 1.1.0 (2009-10-11)\n\n* Migrated from Hpricot to Nokogiri. Requires libxml2 >= 2.7.2 [Adam Hooper]\n\n* Added an `:output` config setting to allow the output format to be\n  specified. Supported formats are `:xhtml` (the default) and `:html` (which\n  outputs HTML4).\n\n* Changed protocol regex to ensure Sanitize doesn't kill URLs with colons in\n  path segments. [Peter Cooper]\n\n\n## 1.0.8 (2009-04-23)\n\n* Added a workaround for an Hpricot bug that prevents attribute names from\n  being downcased in recent versions of Hpricot. This was exploitable to\n  prevent non-allowlisted protocols from being cleaned. [Reported by Ben\n  Wanicur]\n\n\n## 1.0.7 (2009-04-11)\n\n* Requires Hpricot 0.8.1+, which is finally compatible with Ruby 1.9.1.\n\n* Fixed a bug that caused named character entities containing digits (like\n  `&sup2;`) to be escaped when they shouldn't have been. [Reported by\n  Sebastian Steinmetz]\n\n\n## 1.0.6 (2009-02-23)\n\n* Removed htmlentities gem dependency.\n\n* Existing well-formed character entity references in the input string are now\n  preserved rather than being decoded and re-encoded.\n\n* The `'` character is now encoded as `&#39;` instead of `&apos;` to prevent\n  problems in IE6.\n\n* You can now specify the symbol `:all` in place of an element name in the\n  attributes config hash to allow certain attributes on all elements. [Thanks\n  to Mutwin Kraus]\n\n\n## 1.0.5 (2009-02-05)\n\n* Fixed a bug introduced in version 1.0.3 that prevented non-allowlisted\n  protocols from being cleaned when relative URLs were allowed. [Reported by\n  Dev Purkayastha]\n\n* Fixed \"undefined method `parent='\" exceptions caused by parser changes in\n  edge Hpricot.\n\n\n## 1.0.4 (2009-01-16)\n\n* Fixed a bug that made it possible to sneak a non-allowlisted element through\n  by repeating it several times in a row. All versions of Sanitize prior to\n  1.0.4 are vulnerable. [Reported by Cristobal]\n\n\n## 1.0.3 (2009-01-15)\n\n* Fixed a bug whereby incomplete Unicode or hex entities could be used to\n  prevent non-allowlisted protocols from being cleaned. Since IE6 and Opera\n  still decode the incomplete entities, users of those browsers may be\n  vulnerable to malicious script injection on websites using versions of\n  Sanitize prior to 1.0.3.\n\n\n## 1.0.2 (2009-01-04)\n\n* Fixed a bug that caused an exception to be thrown when parsing a valueless\n  attribute that's expected to contain a URL.\n\n\n## 1.0.1 (2009-01-01)\n\n* You can now specify `:relative` in a protocol config array to allow\n  attributes containing relative URLs with no protocol. The Basic and Relaxed\n  configs have been updated to allow relative URLs.\n\n* Added a workaround for an Hpricot bug that causes HTML entities for\n  non-ASCII characters to be replaced by question marks, and all other\n  entities to be destructively decoded.\n\n\n## 1.0.0 (2008-12-25)\n\n* First release.\n", "class Sanitize; module Transformers; module CSS\n\n# Enforces a CSS allowlist on the contents of `style` attributes.\nclass CleanAttribute\n  def initialize(sanitizer_or_config)\n    if Sanitize::CSS === sanitizer_or_config\n      @scss = sanitizer_or_config\n    else\n      @scss = Sanitize::CSS.new(sanitizer_or_config)\n    end\n  end\n\n  def call(env)\n    node = env[:node]\n\n    return unless node.type == Nokogiri::XML::Node::ELEMENT_NODE &&\n        node.key?('style') && !env[:is_allowlisted]\n\n    attr = node.attribute('style')\n    css  = @scss.properties(attr.value)\n\n    if css.strip.empty?\n      attr.unlink\n    else\n      attr.value = css\n    end\n  end\nend\n\n# Enforces a CSS allowlist on the contents of `<style>` elements.\nclass CleanElement\n  def initialize(sanitizer_or_config)\n    if Sanitize::CSS === sanitizer_or_config\n      @scss = sanitizer_or_config\n    else\n      @scss = Sanitize::CSS.new(sanitizer_or_config)\n    end\n  end\n\n  def call(env)\n    node = env[:node]\n\n    return unless node.type == Nokogiri::XML::Node::ELEMENT_NODE &&\n        env[:node_name] == 'style'\n\n    css = @scss.stylesheet(node.content)\n\n    if css.strip.empty?\n      node.unlink\n    else\n      css.gsub!('</', '<\\/')\n      node.children.unlink\n      node << Nokogiri::XML::Text.new(css, node.document)\n    end\n  end\nend\n\nend; end; end\n", "class Sanitize\n  VERSION = '6.0.2'\nend\n", "# encoding: utf-8\nrequire_relative 'common'\n\n# Miscellaneous attempts to sneak maliciously crafted CSS past Sanitize. Some of\n# these are courtesy of (or inspired by) the OWASP XSS Filter Evasion Cheat\n# Sheet.\n#\n# https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n\ndescribe 'Malicious CSS' do\n  make_my_diffs_pretty!\n  parallelize_me!\n\n  before do\n    @s = Sanitize::CSS.new(Sanitize::Config::RELAXED)\n  end\n\n  it 'should not be possible to inject an expression by munging it with a comment' do\n    _(@s.properties(%[width:expr/*XSS*/ession(alert('XSS'))])).\n      must_equal ''\n\n    _(@s.properties(%[width:ex/*XSS*//*/*/pression(alert(\"XSS\"))])).\n      must_equal ''\n  end\n\n  it 'should not be possible to inject an expression by munging it with a newline' do\n    _(@s.properties(%[width:\\nexpression(alert('XSS'));])).\n      must_equal ''\n  end\n\n  it 'should not allow the javascript protocol' do\n    _(@s.properties(%[background-image:url(\"javascript:alert('XSS')\");])).\n      must_equal ''\n\n    _(Sanitize.fragment(%[<div style=\"background-image: url(&#1;javascript:alert('XSS'))\">],\n      Sanitize::Config::RELAXED)).must_equal '<div></div>'\n  end\n\n  it 'should not allow behaviors' do\n    _(@s.properties(%[behavior: url(xss.htc);])).must_equal ''\n  end\n\n  describe 'sanitization bypass via CSS at-rule in HTML <style> element' do\n    before do\n      @s = Sanitize.new(Sanitize::Config::RELAXED)\n    end\n\n    it 'is not possible to prematurely end a <style> element' do\n      assert_equal(\n        %[<style>@media<\\\\/style><iframe srcdoc='<script>alert(document.domain)<\\\\/script>'>{}</style>],\n        @s.fragment(%[<style>@media</sty/**/le><iframe srcdoc='<script>alert(document.domain)</script>'></style>])\n      )\n    end\n  end\nend\n"], "filenames": ["HISTORY.md", "lib/sanitize/transformers/clean_css.rb", "lib/sanitize/version.rb", "test/test_malicious_css.rb"], "buggy_code_start_loc": [1, 50, 1, 41], "buggy_code_end_loc": [1, 50, 5, 41], "fixing_code_start_loc": [2, 51, 0, 42], "fixing_code_end_loc": [19, 52, 3, 55], "type": "CWE-79", "message": "Sanitize is an allowlist-based HTML and CSS sanitizer. Using carefully crafted input, an attacker may be able to sneak arbitrary HTML and CSS through Sanitize starting with version 3.0.0 and prior to version 6.0.2 when Sanitize is configured to use the built-in \"relaxed\" config or when using a custom config that allows `style` elements and one or more CSS at-rules. This could result in cross-site scripting or other undesired behavior when the malicious HTML and CSS are rendered in a browser. Sanitize 6.0.2 performs additional escaping of CSS in `style` element content, which fixes this issue. Users who are unable to upgrade can prevent this issue by using a Sanitize config that doesn't allow `style` elements, using a Sanitize config that doesn't allow CSS at-rules, or by manually escaping the character sequence `</` as `<\\/` in `style` element content.", "other": {"cve": {"id": "CVE-2023-36823", "sourceIdentifier": "security-advisories@github.com", "published": "2023-07-06T16:15:10.147", "lastModified": "2023-12-22T15:15:50.307", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Sanitize is an allowlist-based HTML and CSS sanitizer. Using carefully crafted input, an attacker may be able to sneak arbitrary HTML and CSS through Sanitize starting with version 3.0.0 and prior to version 6.0.2 when Sanitize is configured to use the built-in \"relaxed\" config or when using a custom config that allows `style` elements and one or more CSS at-rules. This could result in cross-site scripting or other undesired behavior when the malicious HTML and CSS are rendered in a browser. Sanitize 6.0.2 performs additional escaping of CSS in `style` element content, which fixes this issue. Users who are unable to upgrade can prevent this issue by using a Sanitize config that doesn't allow `style` elements, using a Sanitize config that doesn't allow CSS at-rules, or by manually escaping the character sequence `</` as `<\\/` in `style` element content."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 3.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sanitize_project:sanitize:*:*:*:*:*:ruby:*:*", "versionStartIncluding": "3.0.0", "versionEndExcluding": "6.0.2", "matchCriteriaId": "16E468AF-E975-414D-A498-B76B34514EA3"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/rgrove/sanitize/commit/76ed46e6dc70820f38efe27de8dabd54dddb5220", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/rgrove/sanitize/releases/tag/v6.0.2", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/rgrove/sanitize/security/advisories/GHSA-f5ww-cq3m-q3g7", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2023/11/msg00008.html", "source": "security-advisories@github.com", "tags": ["Mailing List"]}]}, "github_commit_url": "https://github.com/rgrove/sanitize/commit/76ed46e6dc70820f38efe27de8dabd54dddb5220"}}