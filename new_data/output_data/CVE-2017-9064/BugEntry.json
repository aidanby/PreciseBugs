{"buggy_code": ["<?php\n/**\n * Filesystem API: Top-level functionality\n *\n * Functions for reading, writing, modifying, and deleting files on the file system.\n * Includes functionality for theme-specific files as well as operations for uploading,\n * archiving, and rendering output when necessary.\n *\n * @package WordPress\n * @subpackage Filesystem\n * @since 2.3.0\n */\n\n/** The descriptions for theme files. */\n$wp_file_descriptions = array(\n\t'functions.php'         => __( 'Theme Functions' ),\n\t'header.php'            => __( 'Theme Header' ),\n\t'footer.php'            => __( 'Theme Footer' ),\n\t'sidebar.php'           => __( 'Sidebar' ),\n\t'comments.php'          => __( 'Comments' ),\n\t'searchform.php'        => __( 'Search Form' ),\n\t'404.php'               => __( '404 Template' ),\n\t'link.php'              => __( 'Links Template' ),\n\t// Archives\n\t'index.php'             => __( 'Main Index Template' ),\n\t'archive.php'           => __( 'Archives' ),\n\t'author.php'            => __( 'Author Template' ),\n\t'taxonomy.php'          => __( 'Taxonomy Template' ),\n\t'category.php'          => __( 'Category Template' ),\n\t'tag.php'               => __( 'Tag Template' ),\n\t'home.php'              => __( 'Posts Page' ),\n\t'search.php'            => __( 'Search Results' ),\n\t'date.php'              => __( 'Date Template' ),\n\t// Content\n\t'singular.php'          => __( 'Singular Template' ),\n\t'single.php'            => __( 'Single Post' ),\n\t'page.php'              => __( 'Single Page' ),\n\t'front-page.php'        => __( 'Static Front Page' ),\n\t// Attachments\n\t'attachment.php'        => __( 'Attachment Template' ),\n\t'image.php'             => __( 'Image Attachment Template' ),\n\t'video.php'             => __( 'Video Attachment Template' ),\n\t'audio.php'             => __( 'Audio Attachment Template' ),\n\t'application.php'       => __( 'Application Attachment Template' ),\n\t// Embeds\n\t'embed.php'             => __( 'Embed Template' ),\n\t'embed-404.php'         => __( 'Embed 404 Template' ),\n\t'embed-content.php'     => __( 'Embed Content Template' ),\n\t'header-embed.php'      => __( 'Embed Header Template' ),\n\t'footer-embed.php'      => __( 'Embed Footer Template' ),\n\t// Stylesheets\n\t'style.css'             => __( 'Stylesheet' ),\n\t'editor-style.css'      => __( 'Visual Editor Stylesheet' ),\n\t'editor-style-rtl.css'  => __( 'Visual Editor RTL Stylesheet' ),\n\t'rtl.css'               => __( 'RTL Stylesheet' ),\n\t// Other\n\t'my-hacks.php'          => __( 'my-hacks.php (legacy hacks support)' ),\n\t'.htaccess'             => __( '.htaccess (for rewrite rules )' ),\n\t// Deprecated files\n\t'wp-layout.css'         => __( 'Stylesheet' ),\n\t'wp-comments.php'       => __( 'Comments Template' ),\n\t'wp-comments-popup.php' => __( 'Popup Comments Template' ),\n\t'comments-popup.php'    => __( 'Popup Comments' ),\n);\n\n/**\n * Get the description for standard WordPress theme files and other various standard\n * WordPress files\n *\n * @since 1.5.0\n *\n * @global array $wp_file_descriptions\n * @param string $file Filesystem path or filename\n * @return string Description of file from $wp_file_descriptions or basename of $file if description doesn't exist.\n *                Appends 'Page Template' to basename of $file if the file is a page template\n */\nfunction get_file_description( $file ) {\n\tglobal $wp_file_descriptions, $allowed_files;\n\n\t$dirname = pathinfo( $file, PATHINFO_DIRNAME );\n\n\t$file_path = $allowed_files[ $file ];\n\tif ( isset( $wp_file_descriptions[ basename( $file ) ] ) && '.' === $dirname ) {\n\t\treturn $wp_file_descriptions[ basename( $file ) ];\n\t} elseif ( file_exists( $file_path ) && is_file( $file_path ) ) {\n\t\t$template_data = implode( '', file( $file_path ) );\n\t\tif ( preg_match( '|Template Name:(.*)$|mi', $template_data, $name ) ) {\n\t\t\treturn sprintf( __( '%s Page Template' ), _cleanup_header_comment( $name[1] ) );\n\t\t}\n\t}\n\n\treturn trim( basename( $file ) );\n}\n\n/**\n * Get the absolute filesystem path to the root of the WordPress installation\n *\n * @since 1.5.0\n *\n * @return string Full filesystem path to the root of the WordPress installation\n */\nfunction get_home_path() {\n\t$home    = set_url_scheme( get_option( 'home' ), 'http' );\n\t$siteurl = set_url_scheme( get_option( 'siteurl' ), 'http' );\n\tif ( ! empty( $home ) && 0 !== strcasecmp( $home, $siteurl ) ) {\n\t\t$wp_path_rel_to_home = str_ireplace( $home, '', $siteurl ); /* $siteurl - $home */\n\t\t$pos = strripos( str_replace( '\\\\', '/', $_SERVER['SCRIPT_FILENAME'] ), trailingslashit( $wp_path_rel_to_home ) );\n\t\t$home_path = substr( $_SERVER['SCRIPT_FILENAME'], 0, $pos );\n\t\t$home_path = trailingslashit( $home_path );\n\t} else {\n\t\t$home_path = ABSPATH;\n\t}\n\n\treturn str_replace( '\\\\', '/', $home_path );\n}\n\n/**\n * Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep.\n * The depth of the recursiveness can be controlled by the $levels param.\n *\n * @since 2.6.0\n *\n * @param string $folder Optional. Full path to folder. Default empty.\n * @param int    $levels Optional. Levels of folders to follow, Default 100 (PHP Loop limit).\n * @return bool|array False on failure, Else array of files\n */\nfunction list_files( $folder = '', $levels = 100 ) {\n\tif ( empty($folder) )\n\t\treturn false;\n\n\tif ( ! $levels )\n\t\treturn false;\n\n\t$files = array();\n\tif ( $dir = @opendir( $folder ) ) {\n\t\twhile (($file = readdir( $dir ) ) !== false ) {\n\t\t\tif ( in_array($file, array('.', '..') ) )\n\t\t\t\tcontinue;\n\t\t\tif ( is_dir( $folder . '/' . $file ) ) {\n\t\t\t\t$files2 = list_files( $folder . '/' . $file, $levels - 1);\n\t\t\t\tif ( $files2 )\n\t\t\t\t\t$files = array_merge($files, $files2 );\n\t\t\t\telse\n\t\t\t\t\t$files[] = $folder . '/' . $file . '/';\n\t\t\t} else {\n\t\t\t\t$files[] = $folder . '/' . $file;\n\t\t\t}\n\t\t}\n\t}\n\t@closedir( $dir );\n\treturn $files;\n}\n\n/**\n * Returns a filename of a Temporary unique file.\n * Please note that the calling function must unlink() this itself.\n *\n * The filename is based off the passed parameter or defaults to the current unix timestamp,\n * while the directory can either be passed as well, or by leaving it blank, default to a writable temporary directory.\n *\n * @since 2.6.0\n *\n * @param string $filename Optional. Filename to base the Unique file off. Default empty.\n * @param string $dir      Optional. Directory to store the file in. Default empty.\n * @return string a writable filename\n */\nfunction wp_tempnam( $filename = '', $dir = '' ) {\n\tif ( empty( $dir ) ) {\n\t\t$dir = get_temp_dir();\n\t}\n\n\tif ( empty( $filename ) || '.' == $filename || '/' == $filename || '\\\\' == $filename ) {\n\t\t$filename = time();\n\t}\n\n\t// Use the basename of the given file without the extension as the name for the temporary directory\n\t$temp_filename = basename( $filename );\n\t$temp_filename = preg_replace( '|\\.[^.]*$|', '', $temp_filename );\n\n\t// If the folder is falsey, use its parent directory name instead.\n\tif ( ! $temp_filename ) {\n\t\treturn wp_tempnam( dirname( $filename ), $dir );\n\t}\n\n\t// Suffix some random data to avoid filename conflicts\n\t$temp_filename .= '-' . wp_generate_password( 6, false );\n\t$temp_filename .= '.tmp';\n\t$temp_filename = $dir . wp_unique_filename( $dir, $temp_filename );\n\n\t$fp = @fopen( $temp_filename, 'x' );\n\tif ( ! $fp && is_writable( $dir ) && file_exists( $temp_filename ) ) {\n\t\treturn wp_tempnam( $filename, $dir );\n\t}\n\tif ( $fp ) {\n\t\tfclose( $fp );\n\t}\n\n\treturn $temp_filename;\n}\n\n/**\n * Make sure that the file that was requested to edit, is allowed to be edited\n *\n * Function will die if you are not allowed to edit the file\n *\n * @since 1.5.0\n *\n * @param string $file file the users is attempting to edit\n * @param array $allowed_files Array of allowed files to edit, $file must match an entry exactly\n * @return string|null\n */\nfunction validate_file_to_edit( $file, $allowed_files = '' ) {\n\t$code = validate_file( $file, $allowed_files );\n\n\tif (!$code )\n\t\treturn $file;\n\n\tswitch ( $code ) {\n\t\tcase 1 :\n\t\t\twp_die( __( 'Sorry, that file cannot be edited.' ) );\n\n\t\t// case 2 :\n\t\t// wp_die( __('Sorry, can&#8217;t call files with their real path.' ));\n\n\t\tcase 3 :\n\t\t\twp_die( __( 'Sorry, that file cannot be edited.' ) );\n\t}\n}\n\n/**\n * Handle PHP uploads in WordPress, sanitizing file names, checking extensions for mime type,\n * and moving the file to the appropriate directory within the uploads directory.\n *\n * @access private\n * @since 4.0.0\n *\n * @see wp_handle_upload_error\n *\n * @param array       $file      Reference to a single element of $_FILES. Call the function once for each uploaded file.\n * @param array|false $overrides An associative array of names => values to override default variables. Default false.\n * @param string      $time      Time formatted in 'yyyy/mm'.\n * @param string      $action    Expected value for $_POST['action'].\n * @return array On success, returns an associative array of file attributes. On failure, returns\n *               $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ).\n */\nfunction _wp_handle_upload( &$file, $overrides, $time, $action ) {\n\t// The default error handler.\n\tif ( ! function_exists( 'wp_handle_upload_error' ) ) {\n\t\tfunction wp_handle_upload_error( &$file, $message ) {\n\t\t\treturn array( 'error' => $message );\n\t\t}\n\t}\n\n\t/**\n\t * Filters the data for a file before it is uploaded to WordPress.\n\t *\n\t * The dynamic portion of the hook name, `$action`, refers to the post action.\n\t *\n\t * @since 2.9.0 as 'wp_handle_upload_prefilter'.\n\t * @since 4.0.0 Converted to a dynamic hook with `$action`.\n\t *\n\t * @param array $file An array of data for a single file.\n\t */\n\t$file = apply_filters( \"{$action}_prefilter\", $file );\n\n\t// You may define your own function and pass the name in $overrides['upload_error_handler']\n\t$upload_error_handler = 'wp_handle_upload_error';\n\tif ( isset( $overrides['upload_error_handler'] ) ) {\n\t\t$upload_error_handler = $overrides['upload_error_handler'];\n\t}\n\n\t// You may have had one or more 'wp_handle_upload_prefilter' functions error out the file. Handle that gracefully.\n\tif ( isset( $file['error'] ) && ! is_numeric( $file['error'] ) && $file['error'] ) {\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, $file['error'] ) );\n\t}\n\n\t// Install user overrides. Did we mention that this voids your warranty?\n\n\t// You may define your own function and pass the name in $overrides['unique_filename_callback']\n\t$unique_filename_callback = null;\n\tif ( isset( $overrides['unique_filename_callback'] ) ) {\n\t\t$unique_filename_callback = $overrides['unique_filename_callback'];\n\t}\n\n\t/*\n\t * This may not have orignially been intended to be overrideable,\n\t * but historically has been.\n\t */\n\tif ( isset( $overrides['upload_error_strings'] ) ) {\n\t\t$upload_error_strings = $overrides['upload_error_strings'];\n\t} else {\n\t\t// Courtesy of php.net, the strings that describe the error indicated in $_FILES[{form field}]['error'].\n\t\t$upload_error_strings = array(\n\t\t\tfalse,\n\t\t\t__( 'The uploaded file exceeds the upload_max_filesize directive in php.ini.' ),\n\t\t\t__( 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.' ),\n\t\t\t__( 'The uploaded file was only partially uploaded.' ),\n\t\t\t__( 'No file was uploaded.' ),\n\t\t\t'',\n\t\t\t__( 'Missing a temporary folder.' ),\n\t\t\t__( 'Failed to write file to disk.' ),\n\t\t\t__( 'File upload stopped by extension.' )\n\t\t);\n\t}\n\n\t// All tests are on by default. Most can be turned off by $overrides[{test_name}] = false;\n\t$test_form = isset( $overrides['test_form'] ) ? $overrides['test_form'] : true;\n\t$test_size = isset( $overrides['test_size'] ) ? $overrides['test_size'] : true;\n\n\t// If you override this, you must provide $ext and $type!!\n\t$test_type = isset( $overrides['test_type'] ) ? $overrides['test_type'] : true;\n\t$mimes = isset( $overrides['mimes'] ) ? $overrides['mimes'] : false;\n\n\t// A correct form post will pass this test.\n\tif ( $test_form && ( ! isset( $_POST['action'] ) || ( $_POST['action'] != $action ) ) ) {\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, __( 'Invalid form submission.' ) ) );\n\t}\n\t// A successful upload will pass this test. It makes no sense to override this one.\n\tif ( isset( $file['error'] ) && $file['error'] > 0 ) {\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, $upload_error_strings[ $file['error'] ] ) );\n\t}\n\n\t$test_file_size = 'wp_handle_upload' === $action ? $file['size'] : filesize( $file['tmp_name'] );\n\t// A non-empty file will pass this test.\n\tif ( $test_size && ! ( $test_file_size > 0 ) ) {\n\t\tif ( is_multisite() ) {\n\t\t\t$error_msg = __( 'File is empty. Please upload something more substantial.' );\n\t\t} else {\n\t\t\t$error_msg = __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.' );\n\t\t}\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, $error_msg ) );\n\t}\n\n\t// A properly uploaded file will pass this test. There should be no reason to override this one.\n\t$test_uploaded_file = 'wp_handle_upload' === $action ? @ is_uploaded_file( $file['tmp_name'] ) : @ is_file( $file['tmp_name'] );\n\tif ( ! $test_uploaded_file ) {\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, __( 'Specified file failed upload test.' ) ) );\n\t}\n\n\t// A correct MIME type will pass this test. Override $mimes or use the upload_mimes filter.\n\tif ( $test_type ) {\n\t\t$wp_filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'], $mimes );\n\t\t$ext = empty( $wp_filetype['ext'] ) ? '' : $wp_filetype['ext'];\n\t\t$type = empty( $wp_filetype['type'] ) ? '' : $wp_filetype['type'];\n\t\t$proper_filename = empty( $wp_filetype['proper_filename'] ) ? '' : $wp_filetype['proper_filename'];\n\n\t\t// Check to see if wp_check_filetype_and_ext() determined the filename was incorrect\n\t\tif ( $proper_filename ) {\n\t\t\t$file['name'] = $proper_filename;\n\t\t}\n\t\tif ( ( ! $type || !$ext ) && ! current_user_can( 'unfiltered_upload' ) ) {\n\t\t\treturn call_user_func_array( $upload_error_handler, array( &$file, __( 'Sorry, this file type is not permitted for security reasons.' ) ) );\n\t\t}\n\t\tif ( ! $type ) {\n\t\t\t$type = $file['type'];\n\t\t}\n\t} else {\n\t\t$type = '';\n\t}\n\n\t/*\n\t * A writable uploads dir will pass this test. Again, there's no point\n\t * overriding this one.\n\t */\n\tif ( ! ( ( $uploads = wp_upload_dir( $time ) ) && false === $uploads['error'] ) ) {\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, $uploads['error'] ) );\n\t}\n\n\t$filename = wp_unique_filename( $uploads['path'], $file['name'], $unique_filename_callback );\n\n\t// Move the file to the uploads dir.\n\t$new_file = $uploads['path'] . \"/$filename\";\n\tif ( 'wp_handle_upload' === $action ) {\n\t\t$move_new_file = @ move_uploaded_file( $file['tmp_name'], $new_file );\n\t} else {\n\t\t// use copy and unlink because rename breaks streams.\n\t\t$move_new_file = @ copy( $file['tmp_name'], $new_file );\n\t\tunlink( $file['tmp_name'] );\n\t}\n\n\tif ( false === $move_new_file ) {\n\t\tif ( 0 === strpos( $uploads['basedir'], ABSPATH ) ) {\n\t\t\t$error_path = str_replace( ABSPATH, '', $uploads['basedir'] ) . $uploads['subdir'];\n\t\t} else {\n\t\t\t$error_path = basename( $uploads['basedir'] ) . $uploads['subdir'];\n\t\t}\n\t\treturn $upload_error_handler( $file, sprintf( __('The uploaded file could not be moved to %s.' ), $error_path ) );\n\t}\n\n\t// Set correct file permissions.\n\t$stat = stat( dirname( $new_file ));\n\t$perms = $stat['mode'] & 0000666;\n\t@ chmod( $new_file, $perms );\n\n\t// Compute the URL.\n\t$url = $uploads['url'] . \"/$filename\";\n\n\tif ( is_multisite() ) {\n\t\tdelete_transient( 'dirsize_cache' );\n\t}\n\n\t/**\n\t * Filters the data array for the uploaded file.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param array  $upload {\n\t *     Array of upload data.\n\t *\n\t *     @type string $file Filename of the newly-uploaded file.\n\t *     @type string $url  URL of the uploaded file.\n\t *     @type string $type File type.\n\t * }\n\t * @param string $context The type of upload action. Values include 'upload' or 'sideload'.\n\t */\n\treturn apply_filters( 'wp_handle_upload', array(\n\t\t'file' => $new_file,\n\t\t'url'  => $url,\n\t\t'type' => $type\n\t), 'wp_handle_sideload' === $action ? 'sideload' : 'upload' );\n}\n\n/**\n * Wrapper for _wp_handle_upload().\n *\n * Passes the {@see 'wp_handle_upload'} action.\n *\n * @since 2.0.0\n *\n * @see _wp_handle_upload()\n *\n * @param array      $file      Reference to a single element of `$_FILES`. Call the function once for\n *                              each uploaded file.\n * @param array|bool $overrides Optional. An associative array of names=>values to override default\n *                              variables. Default false.\n * @param string     $time      Optional. Time formatted in 'yyyy/mm'. Default null.\n * @return array On success, returns an associative array of file attributes. On failure, returns\n *               $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ).\n */\nfunction wp_handle_upload( &$file, $overrides = false, $time = null ) {\n\t/*\n\t *  $_POST['action'] must be set and its value must equal $overrides['action']\n\t *  or this:\n\t */\n\t$action = 'wp_handle_upload';\n\tif ( isset( $overrides['action'] ) ) {\n\t\t$action = $overrides['action'];\n\t}\n\n\treturn _wp_handle_upload( $file, $overrides, $time, $action );\n}\n\n/**\n * Wrapper for _wp_handle_upload().\n *\n * Passes the {@see 'wp_handle_sideload'} action.\n *\n * @since 2.6.0\n *\n * @see _wp_handle_upload()\n *\n * @param array      $file      An array similar to that of a PHP `$_FILES` POST array\n * @param array|bool $overrides Optional. An associative array of names=>values to override default\n *                              variables. Default false.\n * @param string     $time      Optional. Time formatted in 'yyyy/mm'. Default null.\n * @return array On success, returns an associative array of file attributes. On failure, returns\n *               $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ).\n */\nfunction wp_handle_sideload( &$file, $overrides = false, $time = null ) {\n\t/*\n\t *  $_POST['action'] must be set and its value must equal $overrides['action']\n\t *  or this:\n\t */\n\t$action = 'wp_handle_sideload';\n\tif ( isset( $overrides['action'] ) ) {\n\t\t$action = $overrides['action'];\n\t}\n\treturn _wp_handle_upload( $file, $overrides, $time, $action );\n}\n\n\n/**\n * Downloads a URL to a local temporary file using the WordPress HTTP Class.\n * Please note, That the calling function must unlink() the file.\n *\n * @since 2.5.0\n *\n * @param string $url the URL of the file to download\n * @param int $timeout The timeout for the request to download the file default 300 seconds\n * @return mixed WP_Error on failure, string Filename on success.\n */\nfunction download_url( $url, $timeout = 300 ) {\n\t//WARNING: The file is not automatically deleted, The script must unlink() the file.\n\tif ( ! $url )\n\t\treturn new WP_Error('http_no_url', __('Invalid URL Provided.'));\n\n\t$url_filename = basename( parse_url( $url, PHP_URL_PATH ) );\n\n\t$tmpfname = wp_tempnam( $url_filename );\n\tif ( ! $tmpfname )\n\t\treturn new WP_Error('http_no_file', __('Could not create Temporary file.'));\n\n\t$response = wp_safe_remote_get( $url, array( 'timeout' => $timeout, 'stream' => true, 'filename' => $tmpfname ) );\n\n\tif ( is_wp_error( $response ) ) {\n\t\tunlink( $tmpfname );\n\t\treturn $response;\n\t}\n\n\tif ( 200 != wp_remote_retrieve_response_code( $response ) ){\n\t\tunlink( $tmpfname );\n\t\treturn new WP_Error( 'http_404', trim( wp_remote_retrieve_response_message( $response ) ) );\n\t}\n\n\t$content_md5 = wp_remote_retrieve_header( $response, 'content-md5' );\n\tif ( $content_md5 ) {\n\t\t$md5_check = verify_file_md5( $tmpfname, $content_md5 );\n\t\tif ( is_wp_error( $md5_check ) ) {\n\t\t\tunlink( $tmpfname );\n\t\t\treturn $md5_check;\n\t\t}\n\t}\n\n\treturn $tmpfname;\n}\n\n/**\n * Calculates and compares the MD5 of a file to its expected value.\n *\n * @since 3.7.0\n *\n * @param string $filename The filename to check the MD5 of.\n * @param string $expected_md5 The expected MD5 of the file, either a base64 encoded raw md5, or a hex-encoded md5\n * @return bool|object WP_Error on failure, true on success, false when the MD5 format is unknown/unexpected\n */\nfunction verify_file_md5( $filename, $expected_md5 ) {\n\tif ( 32 == strlen( $expected_md5 ) )\n\t\t$expected_raw_md5 = pack( 'H*', $expected_md5 );\n\telseif ( 24 == strlen( $expected_md5 ) )\n\t\t$expected_raw_md5 = base64_decode( $expected_md5 );\n\telse\n\t\treturn false; // unknown format\n\n\t$file_md5 = md5_file( $filename, true );\n\n\tif ( $file_md5 === $expected_raw_md5 )\n\t\treturn true;\n\n\treturn new WP_Error( 'md5_mismatch', sprintf( __( 'The checksum of the file (%1$s) does not match the expected checksum value (%2$s).' ), bin2hex( $file_md5 ), bin2hex( $expected_raw_md5 ) ) );\n}\n\n/**\n * Unzips a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction.\n * Assumes that WP_Filesystem() has already been called and set up. Does not extract a root-level __MACOSX directory, if present.\n *\n * Attempts to increase the PHP Memory limit to 256M before uncompressing,\n * However, The most memory required shouldn't be much larger than the Archive itself.\n *\n * @since 2.5.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $file Full path and filename of zip archive\n * @param string $to Full path on the filesystem to extract archive to\n * @return mixed WP_Error on failure, True on success\n */\nfunction unzip_file($file, $to) {\n\tglobal $wp_filesystem;\n\n\tif ( ! $wp_filesystem || !is_object($wp_filesystem) )\n\t\treturn new WP_Error('fs_unavailable', __('Could not access filesystem.'));\n\n\t// Unzip can use a lot of memory, but not this much hopefully.\n\twp_raise_memory_limit( 'admin' );\n\n\t$needed_dirs = array();\n\t$to = trailingslashit($to);\n\n\t// Determine any parent dir's needed (of the upgrade directory)\n\tif ( ! $wp_filesystem->is_dir($to) ) { //Only do parents if no children exist\n\t\t$path = preg_split('![/\\\\\\]!', untrailingslashit($to));\n\t\tfor ( $i = count($path); $i >= 0; $i-- ) {\n\t\t\tif ( empty($path[$i]) )\n\t\t\t\tcontinue;\n\n\t\t\t$dir = implode('/', array_slice($path, 0, $i+1) );\n\t\t\tif ( preg_match('!^[a-z]:$!i', $dir) ) // Skip it if it looks like a Windows Drive letter.\n\t\t\t\tcontinue;\n\n\t\t\tif ( ! $wp_filesystem->is_dir($dir) )\n\t\t\t\t$needed_dirs[] = $dir;\n\t\t\telse\n\t\t\t\tbreak; // A folder exists, therefor, we dont need the check the levels below this\n\t\t}\n\t}\n\n\t/**\n\t * Filters whether to use ZipArchive to unzip archives.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param bool $ziparchive Whether to use ZipArchive. Default true.\n\t */\n\tif ( class_exists( 'ZipArchive', false ) && apply_filters( 'unzip_file_use_ziparchive', true ) ) {\n\t\t$result = _unzip_file_ziparchive($file, $to, $needed_dirs);\n\t\tif ( true === $result ) {\n\t\t\treturn $result;\n\t\t} elseif ( is_wp_error($result) ) {\n\t\t\tif ( 'incompatible_archive' != $result->get_error_code() )\n\t\t\t\treturn $result;\n\t\t}\n\t}\n\t// Fall through to PclZip if ZipArchive is not available, or encountered an error opening the file.\n\treturn _unzip_file_pclzip($file, $to, $needed_dirs);\n}\n\n/**\n * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the ZipArchive class.\n * Assumes that WP_Filesystem() has already been called and set up.\n *\n * @since 3.0.0\n * @see unzip_file\n * @access private\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $file Full path and filename of zip archive\n * @param string $to Full path on the filesystem to extract archive to\n * @param array $needed_dirs A partial list of required folders needed to be created.\n * @return mixed WP_Error on failure, True on success\n */\nfunction _unzip_file_ziparchive($file, $to, $needed_dirs = array() ) {\n\tglobal $wp_filesystem;\n\n\t$z = new ZipArchive();\n\n\t$zopen = $z->open( $file, ZIPARCHIVE::CHECKCONS );\n\tif ( true !== $zopen )\n\t\treturn new WP_Error( 'incompatible_archive', __( 'Incompatible Archive.' ), array( 'ziparchive_error' => $zopen ) );\n\n\t$uncompressed_size = 0;\n\n\tfor ( $i = 0; $i < $z->numFiles; $i++ ) {\n\t\tif ( ! $info = $z->statIndex($i) )\n\t\t\treturn new WP_Error( 'stat_failed_ziparchive', __( 'Could not retrieve file from archive.' ) );\n\n\t\tif ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Skip the OS X-created __MACOSX directory\n\t\t\tcontinue;\n\n\t\t$uncompressed_size += $info['size'];\n\n\t\tif ( '/' === substr( $info['name'], -1 ) ) {\n\t\t\t// Directory.\n\t\t\t$needed_dirs[] = $to . untrailingslashit( $info['name'] );\n\t\t} elseif ( '.' !== $dirname = dirname( $info['name'] ) ) {\n\t\t\t// Path to a file.\n\t\t\t$needed_dirs[] = $to . untrailingslashit( $dirname );\n\t\t}\n\t}\n\n\t/*\n\t * disk_free_space() could return false. Assume that any falsey value is an error.\n\t * A disk that has zero free bytes has bigger problems.\n\t * Require we have enough space to unzip the file and copy its contents, with a 10% buffer.\n\t */\n\tif ( wp_doing_cron() ) {\n\t\t$available_space = @disk_free_space( WP_CONTENT_DIR );\n\t\tif ( $available_space && ( $uncompressed_size * 2.1 ) > $available_space )\n\t\t\treturn new WP_Error( 'disk_full_unzip_file', __( 'Could not copy files. You may have run out of disk space.' ), compact( 'uncompressed_size', 'available_space' ) );\n\t}\n\n\t$needed_dirs = array_unique($needed_dirs);\n\tforeach ( $needed_dirs as $dir ) {\n\t\t// Check the parent folders of the folders all exist within the creation array.\n\t\tif ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)\n\t\t\tcontinue;\n\t\tif ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it\n\t\t\tcontinue;\n\n\t\t$parent_folder = dirname($dir);\n\t\twhile ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {\n\t\t\t$needed_dirs[] = $parent_folder;\n\t\t\t$parent_folder = dirname($parent_folder);\n\t\t}\n\t}\n\tasort($needed_dirs);\n\n\t// Create those directories if need be:\n\tforeach ( $needed_dirs as $_dir ) {\n\t\t// Only check to see if the Dir exists upon creation failure. Less I/O this way.\n\t\tif ( ! $wp_filesystem->mkdir( $_dir, FS_CHMOD_DIR ) && ! $wp_filesystem->is_dir( $_dir ) ) {\n\t\t\treturn new WP_Error( 'mkdir_failed_ziparchive', __( 'Could not create directory.' ), substr( $_dir, strlen( $to ) ) );\n\t\t}\n\t}\n\tunset($needed_dirs);\n\n\tfor ( $i = 0; $i < $z->numFiles; $i++ ) {\n\t\tif ( ! $info = $z->statIndex($i) )\n\t\t\treturn new WP_Error( 'stat_failed_ziparchive', __( 'Could not retrieve file from archive.' ) );\n\n\t\tif ( '/' == substr($info['name'], -1) ) // directory\n\t\t\tcontinue;\n\n\t\tif ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files\n\t\t\tcontinue;\n\n\t\t$contents = $z->getFromIndex($i);\n\t\tif ( false === $contents )\n\t\t\treturn new WP_Error( 'extract_failed_ziparchive', __( 'Could not extract file from archive.' ), $info['name'] );\n\n\t\tif ( ! $wp_filesystem->put_contents( $to . $info['name'], $contents, FS_CHMOD_FILE) )\n\t\t\treturn new WP_Error( 'copy_failed_ziparchive', __( 'Could not copy file.' ), $info['name'] );\n\t}\n\n\t$z->close();\n\n\treturn true;\n}\n\n/**\n * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the PclZip library.\n * Assumes that WP_Filesystem() has already been called and set up.\n *\n * @since 3.0.0\n * @see unzip_file\n * @access private\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $file Full path and filename of zip archive\n * @param string $to Full path on the filesystem to extract archive to\n * @param array $needed_dirs A partial list of required folders needed to be created.\n * @return mixed WP_Error on failure, True on success\n */\nfunction _unzip_file_pclzip($file, $to, $needed_dirs = array()) {\n\tglobal $wp_filesystem;\n\n\tmbstring_binary_safe_encoding();\n\n\trequire_once(ABSPATH . 'wp-admin/includes/class-pclzip.php');\n\n\t$archive = new PclZip($file);\n\n\t$archive_files = $archive->extract(PCLZIP_OPT_EXTRACT_AS_STRING);\n\n\treset_mbstring_encoding();\n\n\t// Is the archive valid?\n\tif ( !is_array($archive_files) )\n\t\treturn new WP_Error('incompatible_archive', __('Incompatible Archive.'), $archive->errorInfo(true));\n\n\tif ( 0 == count($archive_files) )\n\t\treturn new WP_Error( 'empty_archive_pclzip', __( 'Empty archive.' ) );\n\n\t$uncompressed_size = 0;\n\n\t// Determine any children directories needed (From within the archive)\n\tforeach ( $archive_files as $file ) {\n\t\tif ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Skip the OS X-created __MACOSX directory\n\t\t\tcontinue;\n\n\t\t$uncompressed_size += $file['size'];\n\n\t\t$needed_dirs[] = $to . untrailingslashit( $file['folder'] ? $file['filename'] : dirname($file['filename']) );\n\t}\n\n\t/*\n\t * disk_free_space() could return false. Assume that any falsey value is an error.\n\t * A disk that has zero free bytes has bigger problems.\n\t * Require we have enough space to unzip the file and copy its contents, with a 10% buffer.\n\t */\n\tif ( wp_doing_cron() ) {\n\t\t$available_space = @disk_free_space( WP_CONTENT_DIR );\n\t\tif ( $available_space && ( $uncompressed_size * 2.1 ) > $available_space )\n\t\t\treturn new WP_Error( 'disk_full_unzip_file', __( 'Could not copy files. You may have run out of disk space.' ), compact( 'uncompressed_size', 'available_space' ) );\n\t}\n\n\t$needed_dirs = array_unique($needed_dirs);\n\tforeach ( $needed_dirs as $dir ) {\n\t\t// Check the parent folders of the folders all exist within the creation array.\n\t\tif ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)\n\t\t\tcontinue;\n\t\tif ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it\n\t\t\tcontinue;\n\n\t\t$parent_folder = dirname($dir);\n\t\twhile ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {\n\t\t\t$needed_dirs[] = $parent_folder;\n\t\t\t$parent_folder = dirname($parent_folder);\n\t\t}\n\t}\n\tasort($needed_dirs);\n\n\t// Create those directories if need be:\n\tforeach ( $needed_dirs as $_dir ) {\n\t\t// Only check to see if the dir exists upon creation failure. Less I/O this way.\n\t\tif ( ! $wp_filesystem->mkdir( $_dir, FS_CHMOD_DIR ) && ! $wp_filesystem->is_dir( $_dir ) )\n\t\t\treturn new WP_Error( 'mkdir_failed_pclzip', __( 'Could not create directory.' ), substr( $_dir, strlen( $to ) ) );\n\t}\n\tunset($needed_dirs);\n\n\t// Extract the files from the zip\n\tforeach ( $archive_files as $file ) {\n\t\tif ( $file['folder'] )\n\t\t\tcontinue;\n\n\t\tif ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files\n\t\t\tcontinue;\n\n\t\tif ( ! $wp_filesystem->put_contents( $to . $file['filename'], $file['content'], FS_CHMOD_FILE) )\n\t\t\treturn new WP_Error( 'copy_failed_pclzip', __( 'Could not copy file.' ), $file['filename'] );\n\t}\n\treturn true;\n}\n\n/**\n * Copies a directory from one location to another via the WordPress Filesystem Abstraction.\n * Assumes that WP_Filesystem() has already been called and setup.\n *\n * @since 2.5.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $from source directory\n * @param string $to destination directory\n * @param array $skip_list a list of files/folders to skip copying\n * @return mixed WP_Error on failure, True on success.\n */\nfunction copy_dir($from, $to, $skip_list = array() ) {\n\tglobal $wp_filesystem;\n\n\t$dirlist = $wp_filesystem->dirlist($from);\n\n\t$from = trailingslashit($from);\n\t$to = trailingslashit($to);\n\n\tforeach ( (array) $dirlist as $filename => $fileinfo ) {\n\t\tif ( in_array( $filename, $skip_list ) )\n\t\t\tcontinue;\n\n\t\tif ( 'f' == $fileinfo['type'] ) {\n\t\t\tif ( ! $wp_filesystem->copy($from . $filename, $to . $filename, true, FS_CHMOD_FILE) ) {\n\t\t\t\t// If copy failed, chmod file to 0644 and try again.\n\t\t\t\t$wp_filesystem->chmod( $to . $filename, FS_CHMOD_FILE );\n\t\t\t\tif ( ! $wp_filesystem->copy($from . $filename, $to . $filename, true, FS_CHMOD_FILE) )\n\t\t\t\t\treturn new WP_Error( 'copy_failed_copy_dir', __( 'Could not copy file.' ), $to . $filename );\n\t\t\t}\n\t\t} elseif ( 'd' == $fileinfo['type'] ) {\n\t\t\tif ( !$wp_filesystem->is_dir($to . $filename) ) {\n\t\t\t\tif ( !$wp_filesystem->mkdir($to . $filename, FS_CHMOD_DIR) )\n\t\t\t\t\treturn new WP_Error( 'mkdir_failed_copy_dir', __( 'Could not create directory.' ), $to . $filename );\n\t\t\t}\n\n\t\t\t// generate the $sub_skip_list for the subdirectory as a sub-set of the existing $skip_list\n\t\t\t$sub_skip_list = array();\n\t\t\tforeach ( $skip_list as $skip_item ) {\n\t\t\t\tif ( 0 === strpos( $skip_item, $filename . '/' ) )\n\t\t\t\t\t$sub_skip_list[] = preg_replace( '!^' . preg_quote( $filename, '!' ) . '/!i', '', $skip_item );\n\t\t\t}\n\n\t\t\t$result = copy_dir($from . $filename, $to . $filename, $sub_skip_list);\n\t\t\tif ( is_wp_error($result) )\n\t\t\t\treturn $result;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Initialises and connects the WordPress Filesystem Abstraction classes.\n * This function will include the chosen transport and attempt connecting.\n *\n * Plugins may add extra transports, And force WordPress to use them by returning\n * the filename via the {@see 'filesystem_method_file'} filter.\n *\n * @since 2.5.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param array|false  $args                         Optional. Connection args, These are passed directly to\n *                                                   the `WP_Filesystem_*()` classes. Default false.\n * @param string|false $context                      Optional. Context for get_filesystem_method(). Default false.\n * @param bool         $allow_relaxed_file_ownership Optional. Whether to allow Group/World writable. Default false.\n * @return null|bool false on failure, true on success.\n */\nfunction WP_Filesystem( $args = false, $context = false, $allow_relaxed_file_ownership = false ) {\n\tglobal $wp_filesystem;\n\n\trequire_once(ABSPATH . 'wp-admin/includes/class-wp-filesystem-base.php');\n\n\t$method = get_filesystem_method( $args, $context, $allow_relaxed_file_ownership );\n\n\tif ( ! $method )\n\t\treturn false;\n\n\tif ( ! class_exists( \"WP_Filesystem_$method\" ) ) {\n\n\t\t/**\n\t\t * Filters the path for a specific filesystem method class file.\n\t\t *\n\t\t * @since 2.6.0\n\t\t *\n\t\t * @see get_filesystem_method()\n\t\t *\n\t\t * @param string $path   Path to the specific filesystem method class file.\n\t\t * @param string $method The filesystem method to use.\n\t\t */\n\t\t$abstraction_file = apply_filters( 'filesystem_method_file', ABSPATH . 'wp-admin/includes/class-wp-filesystem-' . $method . '.php', $method );\n\n\t\tif ( ! file_exists($abstraction_file) )\n\t\t\treturn;\n\n\t\trequire_once($abstraction_file);\n\t}\n\t$method = \"WP_Filesystem_$method\";\n\n\t$wp_filesystem = new $method($args);\n\n\t//Define the timeouts for the connections. Only available after the construct is called to allow for per-transport overriding of the default.\n\tif ( ! defined('FS_CONNECT_TIMEOUT') )\n\t\tdefine('FS_CONNECT_TIMEOUT', 30);\n\tif ( ! defined('FS_TIMEOUT') )\n\t\tdefine('FS_TIMEOUT', 30);\n\n\tif ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )\n\t\treturn false;\n\n\tif ( !$wp_filesystem->connect() )\n\t\treturn false; //There was an error connecting to the server.\n\n\t// Set the permission constants if not already set.\n\tif ( ! defined('FS_CHMOD_DIR') )\n\t\tdefine('FS_CHMOD_DIR', ( fileperms( ABSPATH ) & 0777 | 0755 ) );\n\tif ( ! defined('FS_CHMOD_FILE') )\n\t\tdefine('FS_CHMOD_FILE', ( fileperms( ABSPATH . 'index.php' ) & 0777 | 0644 ) );\n\n\treturn true;\n}\n\n/**\n * Determines which method to use for reading, writing, modifying, or deleting\n * files on the filesystem.\n *\n * The priority of the transports are: Direct, SSH2, FTP PHP Extension, FTP Sockets\n * (Via Sockets class, or `fsockopen()`). Valid values for these are: 'direct', 'ssh2',\n * 'ftpext' or 'ftpsockets'.\n *\n * The return value can be overridden by defining the `FS_METHOD` constant in `wp-config.php`,\n * or filtering via {@see 'filesystem_method'}.\n *\n * @link https://codex.wordpress.org/Editing_wp-config.php#WordPress_Upgrade_Constants\n *\n * Plugins may define a custom transport handler, See WP_Filesystem().\n *\n * @since 2.5.0\n *\n * @global callable $_wp_filesystem_direct_method\n *\n * @param array  $args                         Optional. Connection details. Default empty array.\n * @param string $context                      Optional. Full path to the directory that is tested\n *                                             for being writable. Default empty.\n * @param bool   $allow_relaxed_file_ownership Optional. Whether to allow Group/World writable.\n *                                             Default false.\n * @return string The transport to use, see description for valid return values.\n */\nfunction get_filesystem_method( $args = array(), $context = '', $allow_relaxed_file_ownership = false ) {\n\t$method = defined('FS_METHOD') ? FS_METHOD : false; // Please ensure that this is either 'direct', 'ssh2', 'ftpext' or 'ftpsockets'\n\n\tif ( ! $context ) {\n\t\t$context = WP_CONTENT_DIR;\n\t}\n\n\t// If the directory doesn't exist (wp-content/languages) then use the parent directory as we'll create it.\n\tif ( WP_LANG_DIR == $context && ! is_dir( $context ) ) {\n\t\t$context = dirname( $context );\n\t}\n\n\t$context = trailingslashit( $context );\n\n\tif ( ! $method ) {\n\n\t\t$temp_file_name = $context . 'temp-write-test-' . time();\n\t\t$temp_handle = @fopen($temp_file_name, 'w');\n\t\tif ( $temp_handle ) {\n\n\t\t\t// Attempt to determine the file owner of the WordPress files, and that of newly created files\n\t\t\t$wp_file_owner = $temp_file_owner = false;\n\t\t\tif ( function_exists('fileowner') ) {\n\t\t\t\t$wp_file_owner = @fileowner( __FILE__ );\n\t\t\t\t$temp_file_owner = @fileowner( $temp_file_name );\n\t\t\t}\n\n\t\t\tif ( $wp_file_owner !== false && $wp_file_owner === $temp_file_owner ) {\n\t\t\t\t// WordPress is creating files as the same owner as the WordPress files,\n\t\t\t\t// this means it's safe to modify & create new files via PHP.\n\t\t\t\t$method = 'direct';\n\t\t\t\t$GLOBALS['_wp_filesystem_direct_method'] = 'file_owner';\n\t\t\t} elseif ( $allow_relaxed_file_ownership ) {\n\t\t\t\t// The $context directory is writable, and $allow_relaxed_file_ownership is set, this means we can modify files\n\t\t\t\t// safely in this directory. This mode doesn't create new files, only alter existing ones.\n\t\t\t\t$method = 'direct';\n\t\t\t\t$GLOBALS['_wp_filesystem_direct_method'] = 'relaxed_ownership';\n\t\t\t}\n\n\t\t\t@fclose($temp_handle);\n\t\t\t@unlink($temp_file_name);\n\t\t}\n \t}\n\n\tif ( ! $method && isset($args['connection_type']) && 'ssh' == $args['connection_type'] && extension_loaded('ssh2') && function_exists('stream_get_contents') ) $method = 'ssh2';\n\tif ( ! $method && extension_loaded('ftp') ) $method = 'ftpext';\n\tif ( ! $method && ( extension_loaded('sockets') || function_exists('fsockopen') ) ) $method = 'ftpsockets'; //Sockets: Socket extension; PHP Mode: FSockopen / fwrite / fread\n\n\t/**\n\t * Filters the filesystem method to use.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param string $method  Filesystem method to return.\n\t * @param array  $args    An array of connection details for the method.\n\t * @param string $context Full path to the directory that is tested for being writable.\n\t * @param bool   $allow_relaxed_file_ownership Whether to allow Group/World writable.\n\t */\n\treturn apply_filters( 'filesystem_method', $method, $args, $context, $allow_relaxed_file_ownership );\n}\n\n/**\n * Displays a form to the user to request for their FTP/SSH details in order\n * to connect to the filesystem.\n *\n * All chosen/entered details are saved, excluding the password.\n *\n * Hostnames may be in the form of hostname:portnumber (eg: wordpress.org:2467)\n * to specify an alternate FTP/SSH port.\n *\n * Plugins may override this form by returning true|false via the {@see 'request_filesystem_credentials'} filter.\n *\n * @since 2.5.0\n * @since 4.6.0 The `$context` parameter default changed from `false` to an empty string.\n *\n * @global string $pagenow\n *\n * @param string $form_post                    The URL to post the form to.\n * @param string $type                         Optional. Chosen type of filesystem. Default empty.\n * @param bool   $error                        Optional. Whether the current request has failed to connect.\n *                                             Default false.\n * @param string $context                      Optional. Full path to the directory that is tested for being\n *                                             writable. Default empty.\n * @param array  $extra_fields                 Optional. Extra `POST` fields to be checked for inclusion in\n *                                             the post. Default null.\n * @param bool   $allow_relaxed_file_ownership Optional. Whether to allow Group/World writable. Default false.\n *\n * @return bool False on failure, true on success.\n */\nfunction request_filesystem_credentials( $form_post, $type = '', $error = false, $context = '', $extra_fields = null, $allow_relaxed_file_ownership = false ) {\n\tglobal $pagenow;\n\n\t/**\n\t * Filters the filesystem credentials form output.\n\t *\n\t * Returning anything other than an empty string will effectively short-circuit\n\t * output of the filesystem credentials form, returning that value instead.\n\t *\n\t * @since 2.5.0\n\t * @since 4.6.0 The `$context` parameter default changed from `false` to an empty string.\n\t *\n\t * @param mixed  $output                       Form output to return instead. Default empty.\n\t * @param string $form_post                    The URL to post the form to.\n\t * @param string $type                         Chosen type of filesystem.\n\t * @param bool   $error                        Whether the current request has failed to connect.\n\t *                                             Default false.\n\t * @param string $context                      Full path to the directory that is tested for\n\t *                                             being writable.\n\t * @param bool   $allow_relaxed_file_ownership Whether to allow Group/World writable.\n\t *                                             Default false.\n\t * @param array  $extra_fields                 Extra POST fields.\n\t */\n\t$req_cred = apply_filters( 'request_filesystem_credentials', '', $form_post, $type, $error, $context, $extra_fields, $allow_relaxed_file_ownership );\n\tif ( '' !== $req_cred )\n\t\treturn $req_cred;\n\n\tif ( empty($type) ) {\n\t\t$type = get_filesystem_method( array(), $context, $allow_relaxed_file_ownership );\n\t}\n\n\tif ( 'direct' == $type )\n\t\treturn true;\n\n\tif ( is_null( $extra_fields ) )\n\t\t$extra_fields = array( 'version', 'locale' );\n\n\t$credentials = get_option('ftp_credentials', array( 'hostname' => '', 'username' => ''));\n\n\t// If defined, set it to that, Else, If POST'd, set it to that, If not, Set it to whatever it previously was(saved details in option)\n\t$credentials['hostname'] = defined('FTP_HOST') ? FTP_HOST : (!empty($_POST['hostname']) ? wp_unslash( $_POST['hostname'] ) : $credentials['hostname']);\n\t$credentials['username'] = defined('FTP_USER') ? FTP_USER : (!empty($_POST['username']) ? wp_unslash( $_POST['username'] ) : $credentials['username']);\n\t$credentials['password'] = defined('FTP_PASS') ? FTP_PASS : (!empty($_POST['password']) ? wp_unslash( $_POST['password'] ) : '');\n\n\t// Check to see if we are setting the public/private keys for ssh\n\t$credentials['public_key'] = defined('FTP_PUBKEY') ? FTP_PUBKEY : (!empty($_POST['public_key']) ? wp_unslash( $_POST['public_key'] ) : '');\n\t$credentials['private_key'] = defined('FTP_PRIKEY') ? FTP_PRIKEY : (!empty($_POST['private_key']) ? wp_unslash( $_POST['private_key'] ) : '');\n\n\t// Sanitize the hostname, Some people might pass in odd-data:\n\t$credentials['hostname'] = preg_replace('|\\w+://|', '', $credentials['hostname']); //Strip any schemes off\n\n\tif ( strpos($credentials['hostname'], ':') ) {\n\t\tlist( $credentials['hostname'], $credentials['port'] ) = explode(':', $credentials['hostname'], 2);\n\t\tif ( ! is_numeric($credentials['port']) )\n\t\t\tunset($credentials['port']);\n\t} else {\n\t\tunset($credentials['port']);\n\t}\n\n\tif ( ( defined( 'FTP_SSH' ) && FTP_SSH ) || ( defined( 'FS_METHOD' ) && 'ssh2' == FS_METHOD ) ) {\n\t\t$credentials['connection_type'] = 'ssh';\n\t} elseif ( ( defined( 'FTP_SSL' ) && FTP_SSL ) && 'ftpext' == $type ) { //Only the FTP Extension understands SSL\n\t\t$credentials['connection_type'] = 'ftps';\n\t} elseif ( ! empty( $_POST['connection_type'] ) ) {\n\t\t$credentials['connection_type'] = wp_unslash( $_POST['connection_type'] );\n\t} elseif ( ! isset( $credentials['connection_type'] ) ) { //All else fails (And it's not defaulted to something else saved), Default to FTP\n\t\t$credentials['connection_type'] = 'ftp';\n\t}\n\tif ( ! $error &&\n\t\t\t(\n\t\t\t\t( !empty($credentials['password']) && !empty($credentials['username']) && !empty($credentials['hostname']) ) ||\n\t\t\t\t( 'ssh' == $credentials['connection_type'] && !empty($credentials['public_key']) && !empty($credentials['private_key']) )\n\t\t\t) ) {\n\t\t$stored_credentials = $credentials;\n\t\tif ( !empty($stored_credentials['port']) ) //save port as part of hostname to simplify above code.\n\t\t\t$stored_credentials['hostname'] .= ':' . $stored_credentials['port'];\n\n\t\tunset($stored_credentials['password'], $stored_credentials['port'], $stored_credentials['private_key'], $stored_credentials['public_key']);\n\t\tif ( ! wp_installing() ) {\n\t\t\tupdate_option( 'ftp_credentials', $stored_credentials );\n\t\t}\n\t\treturn $credentials;\n\t}\n\t$hostname = isset( $credentials['hostname'] ) ? $credentials['hostname'] : '';\n\t$username = isset( $credentials['username'] ) ? $credentials['username'] : '';\n\t$public_key = isset( $credentials['public_key'] ) ? $credentials['public_key'] : '';\n\t$private_key = isset( $credentials['private_key'] ) ? $credentials['private_key'] : '';\n\t$port = isset( $credentials['port'] ) ? $credentials['port'] : '';\n\t$connection_type = isset( $credentials['connection_type'] ) ? $credentials['connection_type'] : '';\n\n\tif ( $error ) {\n\t\t$error_string = __('<strong>ERROR:</strong> There was an error connecting to the server, Please verify the settings are correct.');\n\t\tif ( is_wp_error($error) )\n\t\t\t$error_string = esc_html( $error->get_error_message() );\n\t\techo '<div id=\"message\" class=\"error\"><p>' . $error_string . '</p></div>';\n\t}\n\n\t$types = array();\n\tif ( extension_loaded('ftp') || extension_loaded('sockets') || function_exists('fsockopen') )\n\t\t$types[ 'ftp' ] = __('FTP');\n\tif ( extension_loaded('ftp') ) //Only this supports FTPS\n\t\t$types[ 'ftps' ] = __('FTPS (SSL)');\n\tif ( extension_loaded('ssh2') && function_exists('stream_get_contents') )\n\t\t$types[ 'ssh' ] = __('SSH2');\n\n\t/**\n\t * Filters the connection types to output to the filesystem credentials form.\n\t *\n\t * @since 2.9.0\n\t * @since 4.6.0 The `$context` parameter default changed from `false` to an empty string.\n\t *\n\t * @param array  $types       Types of connections.\n\t * @param array  $credentials Credentials to connect with.\n\t * @param string $type        Chosen filesystem method.\n\t * @param object $error       Error object.\n\t * @param string $context     Full path to the directory that is tested\n\t *                            for being writable.\n\t */\n\t$types = apply_filters( 'fs_ftp_connection_types', $types, $credentials, $type, $error, $context );\n\n?>\n<form action=\"<?php echo esc_url( $form_post ) ?>\" method=\"post\">\n<div id=\"request-filesystem-credentials-form\" class=\"request-filesystem-credentials-form\">\n<?php\n// Print a H1 heading in the FTP credentials modal dialog, default is a H2.\n$heading_tag = 'h2';\nif ( 'plugins.php' === $pagenow || 'plugin-install.php' === $pagenow ) {\n\t$heading_tag = 'h1';\n}\necho \"<$heading_tag id='request-filesystem-credentials-title'>\" . __( 'Connection Information' ) . \"</$heading_tag>\";\n?>\n<p id=\"request-filesystem-credentials-desc\"><?php\n\t$label_user = __('Username');\n\t$label_pass = __('Password');\n\t_e('To perform the requested action, WordPress needs to access your web server.');\n\techo ' ';\n\tif ( ( isset( $types['ftp'] ) || isset( $types['ftps'] ) ) ) {\n\t\tif ( isset( $types['ssh'] ) ) {\n\t\t\t_e('Please enter your FTP or SSH credentials to proceed.');\n\t\t\t$label_user = __('FTP/SSH Username');\n\t\t\t$label_pass = __('FTP/SSH Password');\n\t\t} else {\n\t\t\t_e('Please enter your FTP credentials to proceed.');\n\t\t\t$label_user = __('FTP Username');\n\t\t\t$label_pass = __('FTP Password');\n\t\t}\n\t\techo ' ';\n\t}\n\t_e('If you do not remember your credentials, you should contact your web host.');\n?></p>\n<label for=\"hostname\">\n\t<span class=\"field-title\"><?php _e( 'Hostname' ) ?></span>\n\t<input name=\"hostname\" type=\"text\" id=\"hostname\" aria-describedby=\"request-filesystem-credentials-desc\" class=\"code\" placeholder=\"<?php esc_attr_e( 'example: www.wordpress.org' ) ?>\" value=\"<?php echo esc_attr($hostname); if ( !empty($port) ) echo \":$port\"; ?>\"<?php disabled( defined('FTP_HOST') ); ?> />\n</label>\n<div class=\"ftp-username\">\n\t<label for=\"username\">\n\t\t<span class=\"field-title\"><?php echo $label_user; ?></span>\n\t\t<input name=\"username\" type=\"text\" id=\"username\" value=\"<?php echo esc_attr($username) ?>\"<?php disabled( defined('FTP_USER') ); ?> />\n\t</label>\n</div>\n<div class=\"ftp-password\">\n\t<label for=\"password\">\n\t\t<span class=\"field-title\"><?php echo $label_pass; ?></span>\n\t\t<input name=\"password\" type=\"password\" id=\"password\" value=\"<?php if ( defined('FTP_PASS') ) echo '*****'; ?>\"<?php disabled( defined('FTP_PASS') ); ?> />\n\t\t<em><?php if ( ! defined('FTP_PASS') ) _e( 'This password will not be stored on the server.' ); ?></em>\n\t</label>\n</div>\n<fieldset>\n<legend><?php _e( 'Connection Type' ); ?></legend>\n<?php\n\t$disabled = disabled( ( defined( 'FTP_SSL' ) && FTP_SSL ) || ( defined( 'FTP_SSH' ) && FTP_SSH ), true, false );\n\tforeach ( $types as $name => $text ) : ?>\n\t<label for=\"<?php echo esc_attr( $name ) ?>\">\n\t\t<input type=\"radio\" name=\"connection_type\" id=\"<?php echo esc_attr( $name ) ?>\" value=\"<?php echo esc_attr( $name ) ?>\"<?php checked( $name, $connection_type ); echo $disabled; ?> />\n\t\t<?php echo $text; ?>\n\t</label>\n<?php\n\tendforeach;\n?>\n</fieldset>\n<?php\nif ( isset( $types['ssh'] ) ) {\n\t$hidden_class = '';\n\tif ( 'ssh' != $connection_type || empty( $connection_type ) ) {\n\t\t$hidden_class = ' class=\"hidden\"';\n\t}\n?>\n<fieldset id=\"ssh-keys\"<?php echo $hidden_class; ?>>\n<legend><?php _e( 'Authentication Keys' ); ?></legend>\n<label for=\"public_key\">\n\t<span class=\"field-title\"><?php _e('Public Key:') ?></span>\n\t<input name=\"public_key\" type=\"text\" id=\"public_key\" aria-describedby=\"auth-keys-desc\" value=\"<?php echo esc_attr($public_key) ?>\"<?php disabled( defined('FTP_PUBKEY') ); ?> />\n</label>\n<label for=\"private_key\">\n\t<span class=\"field-title\"><?php _e('Private Key:') ?></span>\n\t<input name=\"private_key\" type=\"text\" id=\"private_key\" value=\"<?php echo esc_attr($private_key) ?>\"<?php disabled( defined('FTP_PRIKEY') ); ?> />\n</label>\n<p id=\"auth-keys-desc\"><?php _e( 'Enter the location on the server where the public and private keys are located. If a passphrase is needed, enter that in the password field above.' ) ?></p>\n</fieldset>\n<?php\n}\n\nforeach ( (array) $extra_fields as $field ) {\n\tif ( isset( $_POST[ $field ] ) )\n\t\techo '<input type=\"hidden\" name=\"' . esc_attr( $field ) . '\" value=\"' . esc_attr( wp_unslash( $_POST[ $field ] ) ) . '\" />';\n}\n?>\n\t<p class=\"request-filesystem-credentials-action-buttons\">\n\t\t<button class=\"button cancel-button\" data-js-action=\"close\" type=\"button\"><?php _e( 'Cancel' ); ?></button>\n\t\t<?php submit_button( __( 'Proceed' ), '', 'upgrade', false ); ?>\n\t</p>\n</div>\n</form>\n<?php\n\treturn false;\n}\n\n/**\n * Print the filesystem credentials modal when needed.\n *\n * @since 4.2.0\n */\nfunction wp_print_request_filesystem_credentials_modal() {\n\t$filesystem_method = get_filesystem_method();\n\tob_start();\n\t$filesystem_credentials_are_stored = request_filesystem_credentials( self_admin_url() );\n\tob_end_clean();\n\t$request_filesystem_credentials = ( $filesystem_method != 'direct' && ! $filesystem_credentials_are_stored );\n\tif ( ! $request_filesystem_credentials ) {\n\t\treturn;\n\t}\n\t?>\n\t<div id=\"request-filesystem-credentials-dialog\" class=\"notification-dialog-wrap request-filesystem-credentials-dialog\">\n\t\t<div class=\"notification-dialog-background\"></div>\n\t\t<div class=\"notification-dialog\" role=\"dialog\" aria-labelledby=\"request-filesystem-credentials-title\" tabindex=\"0\">\n\t\t\t<div class=\"request-filesystem-credentials-dialog-content\">\n\t\t\t\t<?php request_filesystem_credentials( site_url() ); ?>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<?php\n}\n", "/**\n * Functions for ajaxified updates, deletions and installs inside the WordPress admin.\n *\n * @version 4.2.0\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/* global pagenow */\n\n/**\n * @param {jQuery}  $                                   jQuery object.\n * @param {object}  wp                                  WP object.\n * @param {object}  settings                            WP Updates settings.\n * @param {string}  settings.ajax_nonce                 AJAX nonce.\n * @param {object}  settings.l10n                       Translation strings.\n * @param {object=} settings.plugins                    Base names of plugins in their different states.\n * @param {Array}   settings.plugins.all                Base names of all plugins.\n * @param {Array}   settings.plugins.active             Base names of active plugins.\n * @param {Array}   settings.plugins.inactive           Base names of inactive plugins.\n * @param {Array}   settings.plugins.upgrade            Base names of plugins with updates available.\n * @param {Array}   settings.plugins.recently_activated Base names of recently activated plugins.\n * @param {object=} settings.themes                     Plugin/theme status information or null.\n * @param {number}  settings.themes.all                 Amount of all themes.\n * @param {number}  settings.themes.upgrade             Amount of themes with updates available.\n * @param {number}  settings.themes.disabled            Amount of disabled themes.\n * @param {object=} settings.totals                     Combined information for available update counts.\n * @param {number}  settings.totals.count               Holds the amount of available updates.\n */\n(function( $, wp, settings ) {\n\tvar $document = $( document );\n\n\twp = wp || {};\n\n\t/**\n\t * The WP Updates object.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @type {object}\n\t */\n\twp.updates = {};\n\n\t/**\n\t * User nonce for ajax calls.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @type {string}\n\t */\n\twp.updates.ajaxNonce = settings.ajax_nonce;\n\n\t/**\n\t * Localized strings.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @type {object}\n\t */\n\twp.updates.l10n = settings.l10n;\n\n\t/**\n\t * Current search term.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @type {string}\n\t */\n\twp.updates.searchTerm = '';\n\n\t/**\n\t * Whether filesystem credentials need to be requested from the user.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @type {bool}\n\t */\n\twp.updates.shouldRequestFilesystemCredentials = false;\n\n\t/**\n\t * Filesystem credentials to be packaged along with the request.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 Added `available` property to indicate whether credentials have been provided.\n\t *\n\t * @type {object} filesystemCredentials                    Holds filesystem credentials.\n\t * @type {object} filesystemCredentials.ftp                Holds FTP credentials.\n\t * @type {string} filesystemCredentials.ftp.host           FTP host. Default empty string.\n\t * @type {string} filesystemCredentials.ftp.username       FTP user name. Default empty string.\n\t * @type {string} filesystemCredentials.ftp.password       FTP password. Default empty string.\n\t * @type {string} filesystemCredentials.ftp.connectionType Type of FTP connection. 'ssh', 'ftp', or 'ftps'.\n\t *                                                         Default empty string.\n\t * @type {object} filesystemCredentials.ssh                Holds SSH credentials.\n\t * @type {string} filesystemCredentials.ssh.publicKey      The public key. Default empty string.\n\t * @type {string} filesystemCredentials.ssh.privateKey     The private key. Default empty string.\n\t * @type {bool}   filesystemCredentials.available          Whether filesystem credentials have been provided.\n\t *                                                         Default 'false'.\n\t */\n\twp.updates.filesystemCredentials = {\n\t\tftp:       {\n\t\t\thost:           '',\n\t\t\tusername:       '',\n\t\t\tpassword:       '',\n\t\t\tconnectionType: ''\n\t\t},\n\t\tssh:       {\n\t\t\tpublicKey:  '',\n\t\t\tprivateKey: ''\n\t\t},\n\t\tavailable: false\n\t};\n\n\t/**\n\t * Whether we're waiting for an Ajax request to complete.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 More accurately named `ajaxLocked`.\n\t *\n\t * @type {bool}\n\t */\n\twp.updates.ajaxLocked = false;\n\n\t/**\n\t * Admin notice template.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @type {function} A function that lazily-compiles the template requested.\n\t */\n\twp.updates.adminNotice = wp.template( 'wp-updates-admin-notice' );\n\n\t/**\n\t * Update queue.\n\t *\n\t * If the user tries to update a plugin while an update is\n\t * already happening, it can be placed in this queue to perform later.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 More accurately named `queue`.\n\t *\n\t * @type {Array.object}\n\t */\n\twp.updates.queue = [];\n\n\t/**\n\t * Holds a jQuery reference to return focus to when exiting the request credentials modal.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @type {jQuery}\n\t */\n\twp.updates.$elToReturnFocusToFromCredentialsModal = undefined;\n\n\t/**\n\t * Adds or updates an admin notice.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}  data\n\t * @param {*=}      data.selector      Optional. Selector of an element to be replaced with the admin notice.\n\t * @param {string=} data.id            Optional. Unique id that will be used as the notice's id attribute.\n\t * @param {string=} data.className     Optional. Class names that will be used in the admin notice.\n\t * @param {string=} data.message       Optional. The message displayed in the notice.\n\t * @param {number=} data.successes     Optional. The amount of successful operations.\n\t * @param {number=} data.errors        Optional. The amount of failed operations.\n\t * @param {Array=}  data.errorMessages Optional. Error messages of failed operations.\n\t *\n\t */\n\twp.updates.addAdminNotice = function( data ) {\n\t\tvar $notice = $( data.selector ), $adminNotice;\n\n\t\tdelete data.selector;\n\t\t$adminNotice = wp.updates.adminNotice( data );\n\n\t\t// Check if this admin notice already exists.\n\t\tif ( ! $notice.length ) {\n\t\t\t$notice = $( '#' + data.id );\n\t\t}\n\n\t\tif ( $notice.length ) {\n\t\t\t$notice.replaceWith( $adminNotice );\n\t\t} else {\n\t\t\t$( '.wrap' ).find( '> h1' ).after( $adminNotice );\n\t\t}\n\n\t\t$document.trigger( 'wp-updates-notice-added' );\n\t};\n\n\t/**\n\t * Handles Ajax requests to WordPress.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {string} action The type of Ajax request ('update-plugin', 'install-theme', etc).\n\t * @param {object} data   Data that needs to be passed to the ajax callback.\n\t * @return {$.promise}    A jQuery promise that represents the request,\n\t *                        decorated with an abort() method.\n\t */\n\twp.updates.ajax = function( action, data ) {\n\t\tvar options = {};\n\n\t\tif ( wp.updates.ajaxLocked ) {\n\t\t\twp.updates.queue.push( {\n\t\t\t\taction: action,\n\t\t\t\tdata:   data\n\t\t\t} );\n\n\t\t\t// Return a Deferred object so callbacks can always be registered.\n\t\t\treturn $.Deferred();\n\t\t}\n\n\t\twp.updates.ajaxLocked = true;\n\n\t\tif ( data.success ) {\n\t\t\toptions.success = data.success;\n\t\t\tdelete data.success;\n\t\t}\n\n\t\tif ( data.error ) {\n\t\t\toptions.error = data.error;\n\t\t\tdelete data.error;\n\t\t}\n\n\t\toptions.data = _.extend( data, {\n\t\t\taction:          action,\n\t\t\t_ajax_nonce:     wp.updates.ajaxNonce,\n\t\t\tusername:        wp.updates.filesystemCredentials.ftp.username,\n\t\t\tpassword:        wp.updates.filesystemCredentials.ftp.password,\n\t\t\thostname:        wp.updates.filesystemCredentials.ftp.hostname,\n\t\t\tconnection_type: wp.updates.filesystemCredentials.ftp.connectionType,\n\t\t\tpublic_key:      wp.updates.filesystemCredentials.ssh.publicKey,\n\t\t\tprivate_key:     wp.updates.filesystemCredentials.ssh.privateKey\n\t\t} );\n\n\t\treturn wp.ajax.send( options ).always( wp.updates.ajaxAlways );\n\t};\n\n\t/**\n\t * Actions performed after every Ajax request.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}  response\n\t * @param {array=}  response.debug     Optional. Debug information.\n\t * @param {string=} response.errorCode Optional. Error code for an error that occurred.\n\t */\n\twp.updates.ajaxAlways = function( response ) {\n\t\tif ( ! response.errorCode || 'unable_to_connect_to_filesystem' !== response.errorCode ) {\n\t\t\twp.updates.ajaxLocked = false;\n\t\t\twp.updates.queueChecker();\n\t\t}\n\n\t\tif ( 'undefined' !== typeof response.debug && window.console && window.console.log ) {\n\t\t\t_.map( response.debug, function( message ) {\n\t\t\t\twindow.console.log( $( '<p />' ).html( message ).text() );\n\t\t\t} );\n\t\t}\n\t};\n\n\t/**\n\t * Refreshes update counts everywhere on the screen.\n\t *\n\t * @since 4.7.0\n\t */\n\twp.updates.refreshCount = function() {\n\t\tvar $adminBarUpdates              = $( '#wp-admin-bar-updates' ),\n\t\t\t$dashboardNavMenuUpdateCount  = $( 'a[href=\"update-core.php\"] .update-plugins' ),\n\t\t\t$pluginsNavMenuUpdateCount    = $( 'a[href=\"plugins.php\"] .update-plugins' ),\n\t\t\t$appearanceNavMenuUpdateCount = $( 'a[href=\"themes.php\"] .update-plugins' ),\n\t\t\titemCount;\n\n\t\t$adminBarUpdates.find( '.ab-item' ).removeAttr( 'title' );\n\t\t$adminBarUpdates.find( '.ab-label' ).text( settings.totals.counts.total );\n\n\t\t// Remove the update count from the toolbar if it's zero.\n\t\tif ( 0 === settings.totals.counts.total ) {\n\t\t\t$adminBarUpdates.find( '.ab-label' ).parents( 'li' ).remove();\n\t\t}\n\n\t\t// Update the \"Updates\" menu item.\n\t\t$dashboardNavMenuUpdateCount.each( function( index, element ) {\n\t\t\telement.className = element.className.replace( /count-\\d+/, 'count-' + settings.totals.counts.total );\n\t\t} );\n\t\tif ( settings.totals.counts.total > 0 ) {\n\t\t\t$dashboardNavMenuUpdateCount.find( '.update-count' ).text( settings.totals.counts.total );\n\t\t} else {\n\t\t\t$dashboardNavMenuUpdateCount.remove();\n\t\t}\n\n\t\t// Update the \"Plugins\" menu item.\n\t\t$pluginsNavMenuUpdateCount.each( function( index, element ) {\n\t\t\telement.className = element.className.replace( /count-\\d+/, 'count-' + settings.totals.counts.plugins );\n\t\t} );\n\t\tif ( settings.totals.counts.total > 0 ) {\n\t\t\t$pluginsNavMenuUpdateCount.find( '.plugin-count' ).text( settings.totals.counts.plugins );\n\t\t} else {\n\t\t\t$pluginsNavMenuUpdateCount.remove();\n\t\t}\n\n\t\t// Update the \"Appearance\" menu item.\n\t\t$appearanceNavMenuUpdateCount.each( function( index, element ) {\n\t\t\telement.className = element.className.replace( /count-\\d+/, 'count-' + settings.totals.counts.themes );\n\t\t} );\n\t\tif ( settings.totals.counts.total > 0 ) {\n\t\t\t$appearanceNavMenuUpdateCount.find( '.theme-count' ).text( settings.totals.counts.themes );\n\t\t} else {\n\t\t\t$appearanceNavMenuUpdateCount.remove();\n\t\t}\n\n\t\t// Update list table filter navigation.\n\t\tif ( 'plugins' === pagenow || 'plugins-network' === pagenow ) {\n\t\t\titemCount = settings.totals.counts.plugins;\n\t\t} else if ( 'themes' === pagenow || 'themes-network' === pagenow ) {\n\t\t\titemCount = settings.totals.counts.themes;\n\t\t}\n\n\t\tif ( itemCount > 0 ) {\n\t\t\t$( '.subsubsub .upgrade .count' ).text( '(' + itemCount + ')' );\n\t\t} else {\n\t\t\t$( '.subsubsub .upgrade' ).remove();\n\t\t\t$( '.subsubsub li:last' ).html( function() { return $( this ).children(); } );\n\t\t}\n\t};\n\n\t/**\n\t * Decrements the update counts throughout the various menus.\n\t *\n\t * This includes the toolbar, the \"Updates\" menu item and the menu items\n\t * for plugins and themes.\n\t *\n\t * @since 3.9.0\n\t *\n\t * @param {string} type The type of item that was updated or deleted.\n\t *                      Can be 'plugin', 'theme'.\n\t */\n\twp.updates.decrementCount = function( type ) {\n\t\tsettings.totals.counts.total = Math.max( --settings.totals.counts.total, 0 );\n\n\t\tif ( 'plugin' === type ) {\n\t\t\tsettings.totals.counts.plugins = Math.max( --settings.totals.counts.plugins, 0 );\n\t\t} else if ( 'theme' === type ) {\n\t\t\tsettings.totals.counts.themes = Math.max( --settings.totals.counts.themes, 0 );\n\t\t}\n\n\t\twp.updates.refreshCount( type );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to update a plugin.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 More accurately named `updatePlugin`.\n\t *\n\t * @param {object}               args         Arguments.\n\t * @param {string}               args.plugin  Plugin basename.\n\t * @param {string}               args.slug    Plugin slug.\n\t * @param {updatePluginSuccess=} args.success Optional. Success callback. Default: wp.updates.updatePluginSuccess\n\t * @param {updatePluginError=}   args.error   Optional. Error callback. Default: wp.updates.updatePluginError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.updatePlugin = function( args ) {\n\t\tvar $updateRow, $card, $message, message;\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.updatePluginSuccess,\n\t\t\terror: wp.updates.updatePluginError\n\t\t}, args );\n\n\t\tif ( 'plugins' === pagenow || 'plugins-network' === pagenow ) {\n\t\t\t$updateRow = $( 'tr[data-plugin=\"' + args.plugin + '\"]' );\n\t\t\t$message   = $updateRow.find( '.update-message' ).removeClass( 'notice-error' ).addClass( 'updating-message notice-warning' ).find( 'p' );\n\t\t\tmessage    = wp.updates.l10n.pluginUpdatingLabel.replace( '%s', $updateRow.find( '.plugin-title strong' ).text() );\n\t\t} else if ( 'plugin-install' === pagenow || 'plugin-install-network' === pagenow ) {\n\t\t\t$card    = $( '.plugin-card-' + args.slug );\n\t\t\t$message = $card.find( '.update-now' ).addClass( 'updating-message' );\n\t\t\tmessage  = wp.updates.l10n.pluginUpdatingLabel.replace( '%s', $message.data( 'name' ) );\n\n\t\t\t// Remove previous error messages, if any.\n\t\t\t$card.removeClass( 'plugin-card-update-failed' ).find( '.notice.notice-error' ).remove();\n\t\t}\n\n\t\tif ( $message.html() !== wp.updates.l10n.updating ) {\n\t\t\t$message.data( 'originaltext', $message.html() );\n\t\t}\n\n\t\t$message\n\t\t\t.attr( 'aria-label', message )\n\t\t\t.text( wp.updates.l10n.updating );\n\n\t\t$document.trigger( 'wp-plugin-updating', args );\n\n\t\treturn wp.updates.ajax( 'update-plugin', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful plugin update.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 More accurately named `updatePluginSuccess`.\n\t *\n\t * @typedef {object} updatePluginSuccess\n\t * @param {object} response            Response from the server.\n\t * @param {string} response.slug       Slug of the plugin to be updated.\n\t * @param {string} response.plugin     Basename of the plugin to be updated.\n\t * @param {string} response.pluginName Name of the plugin to be updated.\n\t * @param {string} response.oldVersion Old version of the plugin.\n\t * @param {string} response.newVersion New version of the plugin.\n\t */\n\twp.updates.updatePluginSuccess = function( response ) {\n\t\tvar $pluginRow, $updateMessage, newText;\n\n\t\tif ( 'plugins' === pagenow || 'plugins-network' === pagenow ) {\n\t\t\t$pluginRow     = $( 'tr[data-plugin=\"' + response.plugin + '\"]' )\n\t\t\t\t.removeClass( 'update' )\n\t\t\t\t.addClass( 'updated' );\n\t\t\t$updateMessage = $pluginRow.find( '.update-message' )\n\t\t\t\t.removeClass( 'updating-message notice-warning' )\n\t\t\t\t.addClass( 'updated-message notice-success' ).find( 'p' );\n\n\t\t\t// Update the version number in the row.\n\t\t\tnewText = $pluginRow.find( '.plugin-version-author-uri' ).html().replace( response.oldVersion, response.newVersion );\n\t\t\t$pluginRow.find( '.plugin-version-author-uri' ).html( newText );\n\t\t} else if ( 'plugin-install' === pagenow || 'plugin-install-network' === pagenow ) {\n\t\t\t$updateMessage = $( '.plugin-card-' + response.slug ).find( '.update-now' )\n\t\t\t\t.removeClass( 'updating-message' )\n\t\t\t\t.addClass( 'button-disabled updated-message' );\n\t\t}\n\n\t\t$updateMessage\n\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginUpdatedLabel.replace( '%s', response.pluginName ) )\n\t\t\t.text( wp.updates.l10n.pluginUpdated );\n\n\t\twp.a11y.speak( wp.updates.l10n.updatedMsg, 'polite' );\n\n\t\twp.updates.decrementCount( 'plugin' );\n\n\t\t$document.trigger( 'wp-plugin-update-success', response );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed plugin update.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 More accurately named `updatePluginError`.\n\t *\n\t * @typedef {object} updatePluginError\n\t * @param {object}  response              Response from the server.\n\t * @param {string}  response.slug         Slug of the plugin to be updated.\n\t * @param {string}  response.plugin       Basename of the plugin to be updated.\n\t * @param {string=} response.pluginName   Optional. Name of the plugin to be updated.\n\t * @param {string}  response.errorCode    Error code for the error that occurred.\n\t * @param {string}  response.errorMessage The error that occurred.\n\t */\n\twp.updates.updatePluginError = function( response ) {\n\t\tvar $card, $message, errorMessage;\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'update' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'update-plugin' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\terrorMessage = wp.updates.l10n.updateFailed.replace( '%s', response.errorMessage );\n\n\t\tif ( 'plugins' === pagenow || 'plugins-network' === pagenow ) {\n\t\t\tif ( response.plugin ) {\n\t\t\t\t$message = $( 'tr[data-plugin=\"' + response.plugin + '\"]' ).find( '.update-message' );\n\t\t\t} else {\n\t\t\t\t$message = $( 'tr[data-slug=\"' + response.slug + '\"]' ).find( '.update-message' );\n\t\t\t}\n\t\t\t$message.removeClass( 'updating-message notice-warning' ).addClass( 'notice-error' ).find( 'p' ).html( errorMessage );\n\n\t\t\tif ( response.pluginName ) {\n\t\t\t\t$message.find( 'p' )\n\t\t\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginUpdateFailedLabel.replace( '%s', response.pluginName ) );\n\t\t\t} else {\n\t\t\t\t$message.find( 'p' ).removeAttr( 'aria-label' );\n\t\t\t}\n\t\t} else if ( 'plugin-install' === pagenow || 'plugin-install-network' === pagenow ) {\n\t\t\t$card = $( '.plugin-card-' + response.slug )\n\t\t\t\t.addClass( 'plugin-card-update-failed' )\n\t\t\t\t.append( wp.updates.adminNotice( {\n\t\t\t\t\tclassName: 'update-message notice-error notice-alt is-dismissible',\n\t\t\t\t\tmessage:   errorMessage\n\t\t\t\t} ) );\n\n\t\t\t$card.find( '.update-now' )\n\t\t\t\t.text( wp.updates.l10n.updateFailedShort ).removeClass( 'updating-message' );\n\n\t\t\tif ( response.pluginName ) {\n\t\t\t\t$card.find( '.update-now' )\n\t\t\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginUpdateFailedLabel.replace( '%s', response.pluginName ) );\n\t\t\t} else {\n\t\t\t\t$card.find( '.update-now' ).removeAttr( 'aria-label' );\n\t\t\t}\n\n\t\t\t$card.on( 'click', '.notice.is-dismissible .notice-dismiss', function() {\n\n\t\t\t\t// Use same delay as the total duration of the notice fadeTo + slideUp animation.\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t$card\n\t\t\t\t\t\t.removeClass( 'plugin-card-update-failed' )\n\t\t\t\t\t\t.find( '.column-name a' ).focus();\n\n\t\t\t\t\t$card.find( '.update-now' )\n\t\t\t\t\t\t.attr( 'aria-label', false )\n\t\t\t\t\t\t.text( wp.updates.l10n.updateNow );\n\t\t\t\t}, 200 );\n\t\t\t} );\n\t\t}\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\t$document.trigger( 'wp-plugin-update-error', response );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to install a plugin.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}                args         Arguments.\n\t * @param {string}                args.slug    Plugin identifier in the WordPress.org Plugin repository.\n\t * @param {installPluginSuccess=} args.success Optional. Success callback. Default: wp.updates.installPluginSuccess\n\t * @param {installPluginError=}   args.error   Optional. Error callback. Default: wp.updates.installPluginError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.installPlugin = function( args ) {\n\t\tvar $card    = $( '.plugin-card-' + args.slug ),\n\t\t\t$message = $card.find( '.install-now' );\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.installPluginSuccess,\n\t\t\terror: wp.updates.installPluginError\n\t\t}, args );\n\n\t\tif ( 'import' === pagenow ) {\n\t\t\t$message = $( '[data-slug=\"' + args.slug + '\"]' );\n\t\t}\n\n\t\tif ( $message.html() !== wp.updates.l10n.installing ) {\n\t\t\t$message.data( 'originaltext', $message.html() );\n\t\t}\n\n\t\t$message\n\t\t\t.addClass( 'updating-message' )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginInstallingLabel.replace( '%s', $message.data( 'name' ) ) )\n\t\t\t.text( wp.updates.l10n.installing );\n\n\t\twp.a11y.speak( wp.updates.l10n.installingMsg, 'polite' );\n\n\t\t// Remove previous error messages, if any.\n\t\t$card.removeClass( 'plugin-card-install-failed' ).find( '.notice.notice-error' ).remove();\n\n\t\t$document.trigger( 'wp-plugin-installing', args );\n\n\t\treturn wp.updates.ajax( 'install-plugin', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful plugin install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installPluginSuccess\n\t * @param {object} response             Response from the server.\n\t * @param {string} response.slug        Slug of the installed plugin.\n\t * @param {string} response.pluginName  Name of the installed plugin.\n\t * @param {string} response.activateUrl URL to activate the just installed plugin.\n\t */\n\twp.updates.installPluginSuccess = function( response ) {\n\t\tvar $message = $( '.plugin-card-' + response.slug ).find( '.install-now' );\n\n\t\t$message\n\t\t\t.removeClass( 'updating-message' )\n\t\t\t.addClass( 'updated-message installed button-disabled' )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginInstalledLabel.replace( '%s', response.pluginName ) )\n\t\t\t.text( wp.updates.l10n.pluginInstalled );\n\n\t\twp.a11y.speak( wp.updates.l10n.installedMsg, 'polite' );\n\n\t\t$document.trigger( 'wp-plugin-install-success', response );\n\n\t\tif ( response.activateUrl ) {\n\t\t\tsetTimeout( function() {\n\n\t\t\t\t// Transform the 'Install' button into an 'Activate' button.\n\t\t\t\t$message.removeClass( 'install-now installed button-disabled updated-message' ).addClass( 'activate-now button-primary' )\n\t\t\t\t\t.attr( 'href', response.activateUrl )\n\t\t\t\t\t.attr( 'aria-label', wp.updates.l10n.activatePluginLabel.replace( '%s', response.pluginName ) )\n\t\t\t\t\t.text( wp.updates.l10n.activatePlugin );\n\t\t\t}, 1000 );\n\t\t}\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed plugin install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installPluginError\n\t * @param {object}  response              Response from the server.\n\t * @param {string}  response.slug         Slug of the plugin to be installed.\n\t * @param {string=} response.pluginName   Optional. Name of the plugin to be installed.\n\t * @param {string}  response.errorCode    Error code for the error that occurred.\n\t * @param {string}  response.errorMessage The error that occurred.\n\t */\n\twp.updates.installPluginError = function( response ) {\n\t\tvar $card   = $( '.plugin-card-' + response.slug ),\n\t\t\t$button = $card.find( '.install-now' ),\n\t\t\terrorMessage;\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'install' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'install-plugin' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\terrorMessage = wp.updates.l10n.installFailed.replace( '%s', response.errorMessage );\n\n\t\t$card\n\t\t\t.addClass( 'plugin-card-update-failed' )\n\t\t\t.append( '<div class=\"notice notice-error notice-alt is-dismissible\"><p>' + errorMessage + '</p></div>' );\n\n\t\t$card.on( 'click', '.notice.is-dismissible .notice-dismiss', function() {\n\n\t\t\t// Use same delay as the total duration of the notice fadeTo + slideUp animation.\n\t\t\tsetTimeout( function() {\n\t\t\t\t$card\n\t\t\t\t\t.removeClass( 'plugin-card-update-failed' )\n\t\t\t\t\t.find( '.column-name a' ).focus();\n\t\t\t}, 200 );\n\t\t} );\n\n\t\t$button\n\t\t\t.removeClass( 'updating-message' ).addClass( 'button-disabled' )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginInstallFailedLabel.replace( '%s', $button.data( 'name' ) ) )\n\t\t\t.text( wp.updates.l10n.installFailedShort );\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\t$document.trigger( 'wp-plugin-install-error', response );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful importer install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installImporterSuccess\n\t * @param {object} response             Response from the server.\n\t * @param {string} response.slug        Slug of the installed plugin.\n\t * @param {string} response.pluginName  Name of the installed plugin.\n\t * @param {string} response.activateUrl URL to activate the just installed plugin.\n\t */\n\twp.updates.installImporterSuccess = function( response ) {\n\t\twp.updates.addAdminNotice( {\n\t\t\tid:        'install-success',\n\t\t\tclassName: 'notice-success is-dismissible',\n\t\t\tmessage:   wp.updates.l10n.importerInstalledMsg.replace( '%s', response.activateUrl + '&from=import' )\n\t\t} );\n\n\t\t$( '[data-slug=\"' + response.slug + '\"]' )\n\t\t\t.removeClass( 'install-now updating-message' )\n\t\t\t.addClass( 'activate-now' )\n\t\t\t.attr({\n\t\t\t\t'href': response.activateUrl + '&from=import',\n\t\t\t\t'aria-label': wp.updates.l10n.activateImporterLabel.replace( '%s', response.pluginName )\n\t\t\t})\n\t\t\t.text( wp.updates.l10n.activateImporter );\n\n\t\twp.a11y.speak( wp.updates.l10n.installedMsg, 'polite' );\n\n\t\t$document.trigger( 'wp-importer-install-success', response );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed importer install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installImporterError\n\t * @param {object}  response              Response from the server.\n\t * @param {string}  response.slug         Slug of the plugin to be installed.\n\t * @param {string=} response.pluginName   Optional. Name of the plugin to be installed.\n\t * @param {string}  response.errorCode    Error code for the error that occurred.\n\t * @param {string}  response.errorMessage The error that occurred.\n\t */\n\twp.updates.installImporterError = function( response ) {\n\t\tvar errorMessage = wp.updates.l10n.installFailed.replace( '%s', response.errorMessage ),\n\t\t\t$installLink = $( '[data-slug=\"' + response.slug + '\"]' ),\n\t\t\tpluginName = $installLink.data( 'name' );\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'install' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'install-plugin' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\twp.updates.addAdminNotice( {\n\t\t\tid:        response.errorCode,\n\t\t\tclassName: 'notice-error is-dismissible',\n\t\t\tmessage:   errorMessage\n\t\t} );\n\n\t\t$installLink\n\t\t\t.removeClass( 'updating-message' )\n\t\t\t.text( wp.updates.l10n.installNow )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.installNowLabel.replace( '%s', pluginName ) );\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\t$document.trigger( 'wp-importer-install-error', response );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to delete a plugin.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}               args         Arguments.\n\t * @param {string}               args.plugin  Basename of the plugin to be deleted.\n\t * @param {string}               args.slug    Slug of the plugin to be deleted.\n\t * @param {deletePluginSuccess=} args.success Optional. Success callback. Default: wp.updates.deletePluginSuccess\n\t * @param {deletePluginError=}   args.error   Optional. Error callback. Default: wp.updates.deletePluginError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.deletePlugin = function( args ) {\n\t\tvar $link = $( '[data-plugin=\"' + args.plugin + '\"]' ).find( '.row-actions a.delete' );\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.deletePluginSuccess,\n\t\t\terror: wp.updates.deletePluginError\n\t\t}, args );\n\n\t\tif ( $link.html() !== wp.updates.l10n.deleting ) {\n\t\t\t$link\n\t\t\t\t.data( 'originaltext', $link.html() )\n\t\t\t\t.text( wp.updates.l10n.deleting );\n\t\t}\n\n\t\twp.a11y.speak( wp.updates.l10n.deleting, 'polite' );\n\n\t\t$document.trigger( 'wp-plugin-deleting', args );\n\n\t\treturn wp.updates.ajax( 'delete-plugin', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful plugin deletion.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} deletePluginSuccess\n\t * @param {object} response            Response from the server.\n\t * @param {string} response.slug       Slug of the plugin that was deleted.\n\t * @param {string} response.plugin     Base name of the plugin that was deleted.\n\t * @param {string} response.pluginName Name of the plugin that was deleted.\n\t */\n\twp.updates.deletePluginSuccess = function( response ) {\n\n\t\t// Removes the plugin and updates rows.\n\t\t$( '[data-plugin=\"' + response.plugin + '\"]' ).css( { backgroundColor: '#faafaa' } ).fadeOut( 350, function() {\n\t\t\tvar $form            = $( '#bulk-action-form' ),\n\t\t\t\t$views           = $( '.subsubsub' ),\n\t\t\t\t$pluginRow       = $( this ),\n\t\t\t\tcolumnCount      = $form.find( 'thead th:not(.hidden), thead td' ).length,\n\t\t\t\tpluginDeletedRow = wp.template( 'item-deleted-row' ),\n\t\t\t\t/** @type {object} plugins Base names of plugins in their different states. */\n\t\t\t\tplugins          = settings.plugins;\n\n\t\t\t// Add a success message after deleting a plugin.\n\t\t\tif ( ! $pluginRow.hasClass( 'plugin-update-tr' ) ) {\n\t\t\t\t$pluginRow.after(\n\t\t\t\t\tpluginDeletedRow( {\n\t\t\t\t\t\tslug:    response.slug,\n\t\t\t\t\t\tplugin:  response.plugin,\n\t\t\t\t\t\tcolspan: columnCount,\n\t\t\t\t\t\tname:    response.pluginName\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$pluginRow.remove();\n\n\t\t\t// Remove plugin from update count.\n\t\t\tif ( -1 !== _.indexOf( plugins.upgrade, response.plugin ) ) {\n\t\t\t\tplugins.upgrade = _.without( plugins.upgrade, response.plugin );\n\t\t\t\twp.updates.decrementCount( 'plugin' );\n\t\t\t}\n\n\t\t\t// Remove from views.\n\t\t\tif ( -1 !== _.indexOf( plugins.inactive, response.plugin ) ) {\n\t\t\t\tplugins.inactive = _.without( plugins.inactive, response.plugin );\n\t\t\t\tif ( plugins.inactive.length ) {\n\t\t\t\t\t$views.find( '.inactive .count' ).text( '(' + plugins.inactive.length + ')' );\n\t\t\t\t} else {\n\t\t\t\t\t$views.find( '.inactive' ).remove();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( -1 !== _.indexOf( plugins.active, response.plugin ) ) {\n\t\t\t\tplugins.active = _.without( plugins.active, response.plugin );\n\t\t\t\tif ( plugins.active.length ) {\n\t\t\t\t\t$views.find( '.active .count' ).text( '(' + plugins.active.length + ')' );\n\t\t\t\t} else {\n\t\t\t\t\t$views.find( '.active' ).remove();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( -1 !== _.indexOf( plugins.recently_activated, response.plugin ) ) {\n\t\t\t\tplugins.recently_activated = _.without( plugins.recently_activated, response.plugin );\n\t\t\t\tif ( plugins.recently_activated.length ) {\n\t\t\t\t\t$views.find( '.recently_activated .count' ).text( '(' + plugins.recently_activated.length + ')' );\n\t\t\t\t} else {\n\t\t\t\t\t$views.find( '.recently_activated' ).remove();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tplugins.all = _.without( plugins.all, response.plugin );\n\n\t\t\tif ( plugins.all.length ) {\n\t\t\t\t$views.find( '.all .count' ).text( '(' + plugins.all.length + ')' );\n\t\t\t} else {\n\t\t\t\t$form.find( '.tablenav' ).css( { visibility: 'hidden' } );\n\t\t\t\t$views.find( '.all' ).remove();\n\n\t\t\t\tif ( ! $form.find( 'tr.no-items' ).length ) {\n\t\t\t\t\t$form.find( '#the-list' ).append( '<tr class=\"no-items\"><td class=\"colspanchange\" colspan=\"' + columnCount + '\">' + wp.updates.l10n.noPlugins + '</td></tr>' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\twp.a11y.speak( wp.updates.l10n.pluginDeleted, 'polite' );\n\n\t\t$document.trigger( 'wp-plugin-delete-success', response );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed plugin deletion.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} deletePluginError\n\t * @param {object}  response              Response from the server.\n\t * @param {string}  response.slug         Slug of the plugin to be deleted.\n\t * @param {string}  response.plugin       Base name of the plugin to be deleted\n\t * @param {string=} response.pluginName   Optional. Name of the plugin to be deleted.\n\t * @param {string}  response.errorCode    Error code for the error that occurred.\n\t * @param {string}  response.errorMessage The error that occurred.\n\t */\n\twp.updates.deletePluginError = function( response ) {\n\t\tvar $plugin, $pluginUpdateRow,\n\t\t\tpluginUpdateRow  = wp.template( 'item-update-row' ),\n\t\t\tnoticeContent    = wp.updates.adminNotice( {\n\t\t\t\tclassName: 'update-message notice-error notice-alt',\n\t\t\t\tmessage:   response.errorMessage\n\t\t\t} );\n\n\t\tif ( response.plugin ) {\n\t\t\t$plugin          = $( 'tr.inactive[data-plugin=\"' + response.plugin + '\"]' );\n\t\t\t$pluginUpdateRow = $plugin.siblings( '[data-plugin=\"' + response.plugin + '\"]' );\n\t\t} else {\n\t\t\t$plugin          = $( 'tr.inactive[data-slug=\"' + response.slug + '\"]' );\n\t\t\t$pluginUpdateRow = $plugin.siblings( '[data-slug=\"' + response.slug + '\"]' );\n\t\t}\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'delete' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'delete-plugin' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add a plugin update row if it doesn't exist yet.\n\t\tif ( ! $pluginUpdateRow.length ) {\n\t\t\t$plugin.addClass( 'update' ).after(\n\t\t\t\tpluginUpdateRow( {\n\t\t\t\t\tslug:    response.slug,\n\t\t\t\t\tplugin:  response.plugin || response.slug,\n\t\t\t\t\tcolspan: $( '#bulk-action-form' ).find( 'thead th:not(.hidden), thead td' ).length,\n\t\t\t\t\tcontent: noticeContent\n\t\t\t\t} )\n\t\t\t);\n\t\t} else {\n\n\t\t\t// Remove previous error messages, if any.\n\t\t\t$pluginUpdateRow.find( '.notice-error' ).remove();\n\n\t\t\t$pluginUpdateRow.find( '.plugin-update' ).append( noticeContent );\n\t\t}\n\n\t\t$document.trigger( 'wp-plugin-delete-error', response );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to update a theme.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}              args         Arguments.\n\t * @param {string}              args.slug    Theme stylesheet.\n\t * @param {updateThemeSuccess=} args.success Optional. Success callback. Default: wp.updates.updateThemeSuccess\n\t * @param {updateThemeError=}   args.error   Optional. Error callback. Default: wp.updates.updateThemeError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.updateTheme = function( args ) {\n\t\tvar $notice;\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.updateThemeSuccess,\n\t\t\terror: wp.updates.updateThemeError\n\t\t}, args );\n\n\t\tif ( 'themes-network' === pagenow ) {\n\t\t\t$notice = $( '[data-slug=\"' + args.slug + '\"]' ).find( '.update-message' ).removeClass( 'notice-error' ).addClass( 'updating-message notice-warning' ).find( 'p' );\n\n\t\t} else {\n\t\t\t$notice = $( '#update-theme' ).closest( '.notice' ).removeClass( 'notice-large' );\n\n\t\t\t$notice.find( 'h3' ).remove();\n\n\t\t\t$notice = $notice.add( $( '[data-slug=\"' + args.slug + '\"]' ).find( '.update-message' ) );\n\t\t\t$notice = $notice.addClass( 'updating-message' ).find( 'p' );\n\t\t}\n\n\t\tif ( $notice.html() !== wp.updates.l10n.updating ) {\n\t\t\t$notice.data( 'originaltext', $notice.html() );\n\t\t}\n\n\t\twp.a11y.speak( wp.updates.l10n.updatingMsg, 'polite' );\n\t\t$notice.text( wp.updates.l10n.updating );\n\n\t\t$document.trigger( 'wp-theme-updating', args );\n\n\t\treturn wp.updates.ajax( 'update-theme', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful theme update.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} updateThemeSuccess\n\t * @param {object} response\n\t * @param {string} response.slug       Slug of the theme to be updated.\n\t * @param {object} response.theme      Updated theme.\n\t * @param {string} response.oldVersion Old version of the theme.\n\t * @param {string} response.newVersion New version of the theme.\n\t */\n\twp.updates.updateThemeSuccess = function( response ) {\n\t\tvar isModalOpen    = $( 'body.modal-open' ).length,\n\t\t\t$theme         = $( '[data-slug=\"' + response.slug + '\"]' ),\n\t\t\tupdatedMessage = {\n\t\t\t\tclassName: 'updated-message notice-success notice-alt',\n\t\t\t\tmessage:   wp.updates.l10n.themeUpdated\n\t\t\t},\n\t\t\t$notice, newText;\n\n\t\tif ( 'themes-network' === pagenow ) {\n\t\t\t$notice = $theme.find( '.update-message' );\n\n\t\t\t// Update the version number in the row.\n\t\t\tnewText = $theme.find( '.theme-version-author-uri' ).html().replace( response.oldVersion, response.newVersion );\n\t\t\t$theme.find( '.theme-version-author-uri' ).html( newText );\n\t\t} else {\n\t\t\t$notice = $( '.theme-info .notice' ).add( $theme.find( '.update-message' ) );\n\n\t\t\t// Focus on Customize button after updating.\n\t\t\tif ( isModalOpen ) {\n\t\t\t\t$( '.load-customize:visible' ).focus();\n\t\t\t} else {\n\t\t\t\t$theme.find( '.load-customize' ).focus();\n\t\t\t}\n\t\t}\n\n\t\twp.updates.addAdminNotice( _.extend( { selector: $notice }, updatedMessage ) );\n\t\twp.a11y.speak( wp.updates.l10n.updatedMsg, 'polite' );\n\n\t\twp.updates.decrementCount( 'theme' );\n\n\t\t$document.trigger( 'wp-theme-update-success', response );\n\n\t\t// Show updated message after modal re-rendered.\n\t\tif ( isModalOpen ) {\n\t\t\t$( '.theme-info .theme-author' ).after( wp.updates.adminNotice( updatedMessage ) );\n\t\t}\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed theme update.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} updateThemeError\n\t * @param {object} response              Response from the server.\n\t * @param {string} response.slug         Slug of the theme to be updated.\n\t * @param {string} response.errorCode    Error code for the error that occurred.\n\t * @param {string} response.errorMessage The error that occurred.\n\t */\n\twp.updates.updateThemeError = function( response ) {\n\t\tvar $theme       = $( '[data-slug=\"' + response.slug + '\"]' ),\n\t\t\terrorMessage = wp.updates.l10n.updateFailed.replace( '%s', response.errorMessage ),\n\t\t\t$notice;\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'update' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'update-theme' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( 'themes-network' === pagenow ) {\n\t\t\t$notice = $theme.find( '.update-message ' );\n\t\t} else {\n\t\t\t$notice = $( '.theme-info .notice' ).add( $theme.find( '.notice' ) );\n\n\t\t\t$( 'body.modal-open' ).length ? $( '.load-customize:visible' ).focus() : $theme.find( '.load-customize' ).focus();\n\t\t}\n\n\t\twp.updates.addAdminNotice( {\n\t\t\tselector:  $notice,\n\t\t\tclassName: 'update-message notice-error notice-alt is-dismissible',\n\t\t\tmessage:   errorMessage\n\t\t} );\n\n\t\twp.a11y.speak( errorMessage, 'polite' );\n\n\t\t$document.trigger( 'wp-theme-update-error', response );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to install a theme.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}               args\n\t * @param {string}               args.slug    Theme stylesheet.\n\t * @param {installThemeSuccess=} args.success Optional. Success callback. Default: wp.updates.installThemeSuccess\n\t * @param {installThemeError=}   args.error   Optional. Error callback. Default: wp.updates.installThemeError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.installTheme = function( args ) {\n\t\tvar $message = $( '.theme-install[data-slug=\"' + args.slug + '\"]' );\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.installThemeSuccess,\n\t\t\terror: wp.updates.installThemeError\n\t\t}, args );\n\n\t\t$message.addClass( 'updating-message' );\n\t\t$message.parents( '.theme' ).addClass( 'focus' );\n\t\tif ( $message.html() !== wp.updates.l10n.installing ) {\n\t\t\t$message.data( 'originaltext', $message.html() );\n\t\t}\n\n\t\t$message\n\t\t\t.text( wp.updates.l10n.installing )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.themeInstallingLabel.replace( '%s', $message.data( 'name' ) ) );\n\t\twp.a11y.speak( wp.updates.l10n.installingMsg, 'polite' );\n\n\t\t// Remove previous error messages, if any.\n\t\t$( '.install-theme-info, [data-slug=\"' + args.slug + '\"]' ).removeClass( 'theme-install-failed' ).find( '.notice.notice-error' ).remove();\n\n\t\t$document.trigger( 'wp-theme-installing', args );\n\n\t\treturn wp.updates.ajax( 'install-theme', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful theme install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installThemeSuccess\n\t * @param {object} response              Response from the server.\n\t * @param {string} response.slug         Slug of the theme to be installed.\n\t * @param {string} response.customizeUrl URL to the Customizer for the just installed theme.\n\t * @param {string} response.activateUrl  URL to activate the just installed theme.\n\t */\n\twp.updates.installThemeSuccess = function( response ) {\n\t\tvar $card = $( '.wp-full-overlay-header, [data-slug=' + response.slug + ']' ),\n\t\t\t$message;\n\n\t\t$document.trigger( 'wp-theme-install-success', response );\n\n\t\t$message = $card.find( '.button-primary' )\n\t\t\t.removeClass( 'updating-message' )\n\t\t\t.addClass( 'updated-message disabled' )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.themeInstalledLabel.replace( '%s', response.themeName ) )\n\t\t\t.text( wp.updates.l10n.themeInstalled );\n\n\t\twp.a11y.speak( wp.updates.l10n.installedMsg, 'polite' );\n\n\t\tsetTimeout( function() {\n\n\t\t\tif ( response.activateUrl ) {\n\n\t\t\t\t// Transform the 'Install' button into an 'Activate' button.\n\t\t\t\t$message\n\t\t\t\t\t.attr( 'href', response.activateUrl )\n\t\t\t\t\t.removeClass( 'theme-install updated-message disabled' )\n\t\t\t\t\t.addClass( 'activate' )\n\t\t\t\t\t.attr( 'aria-label', wp.updates.l10n.activateThemeLabel.replace( '%s', response.themeName ) )\n\t\t\t\t\t.text( wp.updates.l10n.activateTheme );\n\t\t\t}\n\n\t\t\tif ( response.customizeUrl ) {\n\n\t\t\t\t// Transform the 'Preview' button into a 'Live Preview' button.\n\t\t\t\t$message.siblings( '.preview' ).replaceWith( function () {\n\t\t\t\t\treturn $( '<a>' )\n\t\t\t\t\t\t.attr( 'href', response.customizeUrl )\n\t\t\t\t\t\t.addClass( 'button load-customize' )\n\t\t\t\t\t\t.text( wp.updates.l10n.livePreview );\n\t\t\t\t} );\n\t\t\t}\n\t\t}, 1000 );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed theme install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installThemeError\n\t * @param {object} response              Response from the server.\n\t * @param {string} response.slug         Slug of the theme to be installed.\n\t * @param {string} response.errorCode    Error code for the error that occurred.\n\t * @param {string} response.errorMessage The error that occurred.\n\t */\n\twp.updates.installThemeError = function( response ) {\n\t\tvar $card, $button,\n\t\t\terrorMessage = wp.updates.l10n.installFailed.replace( '%s', response.errorMessage ),\n\t\t\t$message     = wp.updates.adminNotice( {\n\t\t\t\tclassName: 'update-message notice-error notice-alt',\n\t\t\t\tmessage:   errorMessage\n\t\t\t} );\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'install' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'install-theme' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( $document.find( 'body' ).hasClass( 'full-overlay-active' ) ) {\n\t\t\t$button = $( '.theme-install[data-slug=\"' + response.slug + '\"]' );\n\t\t\t$card   = $( '.install-theme-info' ).prepend( $message );\n\t\t} else {\n\t\t\t$card   = $( '[data-slug=\"' + response.slug + '\"]' ).removeClass( 'focus' ).addClass( 'theme-install-failed' ).append( $message );\n\t\t\t$button = $card.find( '.theme-install' );\n\t\t}\n\n\t\t$button\n\t\t\t.removeClass( 'updating-message' )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.themeInstallFailedLabel.replace( '%s', $button.data( 'name' ) ) )\n\t\t\t.text( wp.updates.l10n.installFailedShort );\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\t$document.trigger( 'wp-theme-install-error', response );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to delete a theme.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}              args\n\t * @param {string}              args.slug    Theme stylesheet.\n\t * @param {deleteThemeSuccess=} args.success Optional. Success callback. Default: wp.updates.deleteThemeSuccess\n\t * @param {deleteThemeError=}   args.error   Optional. Error callback. Default: wp.updates.deleteThemeError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.deleteTheme = function( args ) {\n\t\tvar $button;\n\n\t\tif ( 'themes' === pagenow ) {\n\t\t\t$button = $( '.theme-actions .delete-theme' );\n\t\t} else if ( 'themes-network' === pagenow ) {\n\t\t\t$button = $( '[data-slug=\"' + args.slug + '\"]' ).find( '.row-actions a.delete' );\n\t\t}\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.deleteThemeSuccess,\n\t\t\terror: wp.updates.deleteThemeError\n\t\t}, args );\n\n\t\tif ( $button && $button.html() !== wp.updates.l10n.deleting ) {\n\t\t\t$button\n\t\t\t\t.data( 'originaltext', $button.html() )\n\t\t\t\t.text( wp.updates.l10n.deleting );\n\t\t}\n\n\t\twp.a11y.speak( wp.updates.l10n.deleting, 'polite' );\n\n\t\t// Remove previous error messages, if any.\n\t\t$( '.theme-info .update-message' ).remove();\n\n\t\t$document.trigger( 'wp-theme-deleting', args );\n\n\t\treturn wp.updates.ajax( 'delete-theme', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful theme deletion.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} deleteThemeSuccess\n\t * @param {object} response      Response from the server.\n\t * @param {string} response.slug Slug of the theme that was deleted.\n\t */\n\twp.updates.deleteThemeSuccess = function( response ) {\n\t\tvar $themeRows = $( '[data-slug=\"' + response.slug + '\"]' );\n\n\t\tif ( 'themes-network' === pagenow ) {\n\n\t\t\t// Removes the theme and updates rows.\n\t\t\t$themeRows.css( { backgroundColor: '#faafaa' } ).fadeOut( 350, function() {\n\t\t\t\tvar $views     = $( '.subsubsub' ),\n\t\t\t\t\t$themeRow  = $( this ),\n\t\t\t\t\ttotals     = settings.themes,\n\t\t\t\t\tdeletedRow = wp.template( 'item-deleted-row' );\n\n\t\t\t\tif ( ! $themeRow.hasClass( 'plugin-update-tr' ) ) {\n\t\t\t\t\t$themeRow.after(\n\t\t\t\t\t\tdeletedRow( {\n\t\t\t\t\t\t\tslug:    response.slug,\n\t\t\t\t\t\t\tcolspan: $( '#bulk-action-form' ).find( 'thead th:not(.hidden), thead td' ).length,\n\t\t\t\t\t\t\tname:    $themeRow.find( '.theme-title strong' ).text()\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$themeRow.remove();\n\n\t\t\t\t// Remove theme from update count.\n\t\t\t\tif ( $themeRow.hasClass( 'update' ) ) {\n\t\t\t\t\ttotals.upgrade--;\n\t\t\t\t\twp.updates.decrementCount( 'theme' );\n\t\t\t\t}\n\n\t\t\t\t// Remove from views.\n\t\t\t\tif ( $themeRow.hasClass( 'inactive' ) ) {\n\t\t\t\t\ttotals.disabled--;\n\t\t\t\t\tif ( totals.disabled ) {\n\t\t\t\t\t\t$views.find( '.disabled .count' ).text( '(' + totals.disabled + ')' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$views.find( '.disabled' ).remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// There is always at least one theme available.\n\t\t\t\t$views.find( '.all .count' ).text( '(' + --totals.all + ')' );\n\t\t\t} );\n\t\t}\n\n\t\twp.a11y.speak( wp.updates.l10n.themeDeleted, 'polite' );\n\n\t\t$document.trigger( 'wp-theme-delete-success', response );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed theme deletion.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} deleteThemeError\n\t * @param {object} response              Response from the server.\n\t * @param {string} response.slug         Slug of the theme to be deleted.\n\t * @param {string} response.errorCode    Error code for the error that occurred.\n\t * @param {string} response.errorMessage The error that occurred.\n\t */\n\twp.updates.deleteThemeError = function( response ) {\n\t\tvar $themeRow    = $( 'tr.inactive[data-slug=\"' + response.slug + '\"]' ),\n\t\t\t$button      = $( '.theme-actions .delete-theme' ),\n\t\t\tupdateRow    = wp.template( 'item-update-row' ),\n\t\t\t$updateRow   = $themeRow.siblings( '#' + response.slug + '-update' ),\n\t\t\terrorMessage = wp.updates.l10n.deleteFailed.replace( '%s', response.errorMessage ),\n\t\t\t$message     = wp.updates.adminNotice( {\n\t\t\t\tclassName: 'update-message notice-error notice-alt',\n\t\t\t\tmessage:   errorMessage\n\t\t\t} );\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'delete-theme' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( 'themes-network' === pagenow ) {\n\t\t\tif ( ! $updateRow.length ) {\n\t\t\t\t$themeRow.addClass( 'update' ).after(\n\t\t\t\t\tupdateRow( {\n\t\t\t\t\t\tslug: response.slug,\n\t\t\t\t\t\tcolspan: $( '#bulk-action-form' ).find( 'thead th:not(.hidden), thead td' ).length,\n\t\t\t\t\t\tcontent: $message\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// Remove previous error messages, if any.\n\t\t\t\t$updateRow.find( '.notice-error' ).remove();\n\t\t\t\t$updateRow.find( '.plugin-update' ).append( $message );\n\t\t\t}\n\t\t} else {\n\t\t\t$( '.theme-info .theme-description' ).before( $message );\n\t\t}\n\n\t\t$button.html( $button.data( 'originaltext' ) );\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\t$document.trigger( 'wp-theme-delete-error', response );\n\t};\n\n\t/**\n\t * Adds the appropriate callback based on the type of action and the current page.\n\t *\n\t * @since 4.6.0\n\t * @private\n\t *\n\t * @param {object} data   AJAX payload.\n\t * @param {string} action The type of request to perform.\n\t * @return {object} The AJAX payload with the appropriate callbacks.\n\t */\n\twp.updates._addCallbacks = function( data, action ) {\n\t\tif ( 'import' === pagenow && 'install-plugin' === action ) {\n\t\t\tdata.success = wp.updates.installImporterSuccess;\n\t\t\tdata.error   = wp.updates.installImporterError;\n\t\t}\n\n\t\treturn data;\n\t};\n\n\t/**\n\t * Pulls available jobs from the queue and runs them.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 Can handle multiple job types.\n\t */\n\twp.updates.queueChecker = function() {\n\t\tvar job;\n\n\t\tif ( wp.updates.ajaxLocked || ! wp.updates.queue.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tjob = wp.updates.queue.shift();\n\n\t\t// Handle a queue job.\n\t\tswitch ( job.action ) {\n\t\t\tcase 'install-plugin':\n\t\t\t\twp.updates.installPlugin( job.data );\n\t\t\t\tbreak;\n\n\t\t\tcase 'update-plugin':\n\t\t\t\twp.updates.updatePlugin( job.data );\n\t\t\t\tbreak;\n\n\t\t\tcase 'delete-plugin':\n\t\t\t\twp.updates.deletePlugin( job.data );\n\t\t\t\tbreak;\n\n\t\t\tcase 'install-theme':\n\t\t\t\twp.updates.installTheme( job.data );\n\t\t\t\tbreak;\n\n\t\t\tcase 'update-theme':\n\t\t\t\twp.updates.updateTheme( job.data );\n\t\t\t\tbreak;\n\n\t\t\tcase 'delete-theme':\n\t\t\t\twp.updates.deleteTheme( job.data );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\t/**\n\t * Requests the users filesystem credentials if they aren't already known.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param {Event=} event Optional. Event interface.\n\t */\n\twp.updates.requestFilesystemCredentials = function( event ) {\n\t\tif ( false === wp.updates.filesystemCredentials.available ) {\n\t\t\t/*\n\t\t\t * After exiting the credentials request modal,\n\t\t\t * return the focus to the element triggering the request.\n\t\t\t */\n\t\t\tif ( event && ! wp.updates.$elToReturnFocusToFromCredentialsModal ) {\n\t\t\t\twp.updates.$elToReturnFocusToFromCredentialsModal = $( event.target );\n\t\t\t}\n\n\t\t\twp.updates.ajaxLocked = true;\n\t\t\twp.updates.requestForCredentialsModalOpen();\n\t\t}\n\t};\n\n\t/**\n\t * Requests the users filesystem credentials if needed and there is no lock.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {Event=} event Optional. Event interface.\n\t */\n\twp.updates.maybeRequestFilesystemCredentials = function( event ) {\n\t\tif ( wp.updates.shouldRequestFilesystemCredentials && ! wp.updates.ajaxLocked ) {\n\t\t\twp.updates.requestFilesystemCredentials( event );\n\t\t}\n\t};\n\n\t/**\n\t * Keydown handler for the request for credentials modal.\n\t *\n\t * Closes the modal when the escape key is pressed and\n\t * constrains keyboard navigation to inside the modal.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param {Event} event Event interface.\n\t */\n\twp.updates.keydown = function( event ) {\n\t\tif ( 27 === event.keyCode ) {\n\t\t\twp.updates.requestForCredentialsModalCancel();\n\t\t} else if ( 9 === event.keyCode ) {\n\n\t\t\t// #upgrade button must always be the last focus-able element in the dialog.\n\t\t\tif ( 'upgrade' === event.target.id && ! event.shiftKey ) {\n\t\t\t\t$( '#hostname' ).focus();\n\n\t\t\t\tevent.preventDefault();\n\t\t\t} else if ( 'hostname' === event.target.id && event.shiftKey ) {\n\t\t\t\t$( '#upgrade' ).focus();\n\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Opens the request for credentials modal.\n\t *\n\t * @since 4.2.0\n\t */\n\twp.updates.requestForCredentialsModalOpen = function() {\n\t\tvar $modal = $( '#request-filesystem-credentials-dialog' );\n\n\t\t$( 'body' ).addClass( 'modal-open' );\n\t\t$modal.show();\n\t\t$modal.find( 'input:enabled:first' ).focus();\n\t\t$modal.on( 'keydown', wp.updates.keydown );\n\t};\n\n\t/**\n\t * Closes the request for credentials modal.\n\t *\n\t * @since 4.2.0\n\t */\n\twp.updates.requestForCredentialsModalClose = function() {\n\t\t$( '#request-filesystem-credentials-dialog' ).hide();\n\t\t$( 'body' ).removeClass( 'modal-open' );\n\n\t\tif ( wp.updates.$elToReturnFocusToFromCredentialsModal ) {\n\t\t\twp.updates.$elToReturnFocusToFromCredentialsModal.focus();\n\t\t}\n\t};\n\n\t/**\n\t * Takes care of the steps that need to happen when the modal is canceled out.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 Triggers an event for callbacks to listen to and add their actions.\n\t */\n\twp.updates.requestForCredentialsModalCancel = function() {\n\n\t\t// Not ajaxLocked and no queue means we already have cleared things up.\n\t\tif ( ! wp.updates.ajaxLocked && ! wp.updates.queue.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\t_.each( wp.updates.queue, function( job ) {\n\t\t\t$document.trigger( 'credential-modal-cancel', job );\n\t\t} );\n\n\t\t// Remove the lock, and clear the queue.\n\t\twp.updates.ajaxLocked = false;\n\t\twp.updates.queue = [];\n\n\t\twp.updates.requestForCredentialsModalClose();\n\t};\n\n\t/**\n\t * Displays an error message in the request for credentials form.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param {string} message Error message.\n\t */\n\twp.updates.showErrorInCredentialsForm = function( message ) {\n\t\tvar $filesystemForm = $( '#request-filesystem-credentials-form' );\n\n\t\t// Remove any existing error.\n\t\t$filesystemForm.find( '.notice' ).remove();\n\t\t$filesystemForm.find( '#request-filesystem-credentials-title' ).after( '<div class=\"notice notice-alt notice-error\"><p>' + message + '</p></div>' );\n\t};\n\n\t/**\n\t * Handles credential errors and runs events that need to happen in that case.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param {object} response Ajax response.\n\t * @param {string} action   The type of request to perform.\n\t */\n\twp.updates.credentialError = function( response, action ) {\n\n\t\t// Restore callbacks.\n\t\tresponse = wp.updates._addCallbacks( response, action );\n\n\t\twp.updates.queue.unshift( {\n\t\t\taction: action,\n\n\t\t\t/*\n\t\t\t * Not cool that we're depending on response for this data.\n\t\t\t * This would feel more whole in a view all tied together.\n\t\t\t */\n\t\t\tdata: response\n\t\t} );\n\n\t\twp.updates.filesystemCredentials.available = false;\n\t\twp.updates.showErrorInCredentialsForm( response.errorMessage );\n\t\twp.updates.requestFilesystemCredentials();\n\t};\n\n\t/**\n\t * Handles credentials errors if it could not connect to the filesystem.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} maybeHandleCredentialError\n\t * @param {object} response              Response from the server.\n\t * @param {string} response.errorCode    Error code for the error that occurred.\n\t * @param {string} response.errorMessage The error that occurred.\n\t * @param {string} action                The type of request to perform.\n\t * @returns {boolean} Whether there is an error that needs to be handled or not.\n\t */\n\twp.updates.maybeHandleCredentialError = function( response, action ) {\n\t\tif ( wp.updates.shouldRequestFilesystemCredentials && response.errorCode && 'unable_to_connect_to_filesystem' === response.errorCode ) {\n\t\t\twp.updates.credentialError( response, action );\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\t/**\n\t * Validates an AJAX response to ensure it's a proper object.\n\t *\n\t * If the response deems to be invalid, an admin notice is being displayed.\n\t *\n\t * @param {(object|string)} response              Response from the server.\n\t * @param {function=}       response.always       Optional. Callback for when the Deferred is resolved or rejected.\n\t * @param {string=}         response.statusText   Optional. Status message corresponding to the status code.\n\t * @param {string=}         response.responseText Optional. Request response as text.\n\t * @param {string}          action                Type of action the response is referring to. Can be 'delete',\n\t *                                                'update' or 'install'.\n\t */\n\twp.updates.isValidResponse = function( response, action ) {\n\t\tvar error = wp.updates.l10n.unknownError,\n\t\t    errorMessage;\n\n\t\t// Make sure the response is a valid data object and not a Promise object.\n\t\tif ( _.isObject( response ) && ! _.isFunction( response.always ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( _.isString( response ) && '-1' === response ) {\n\t\t\terror = wp.updates.l10n.nonceError;\n\t\t} else if ( _.isString( response ) ) {\n\t\t\terror = response;\n\t\t} else if ( 'undefined' !== typeof response.readyState && 0 === response.readyState ) {\n\t\t\terror = wp.updates.l10n.connectionError;\n\t\t} else if ( _.isString( response.responseText ) && '' !== response.responseText ) {\n\t\t\terror = response.responseText;\n\t\t} else if ( _.isString( response.statusText ) ) {\n\t\t\terror = response.statusText;\n\t\t}\n\n\t\tswitch ( action ) {\n\t\t\tcase 'update':\n\t\t\t\terrorMessage = wp.updates.l10n.updateFailed;\n\t\t\t\tbreak;\n\n\t\t\tcase 'install':\n\t\t\t\terrorMessage = wp.updates.l10n.installFailed;\n\t\t\t\tbreak;\n\n\t\t\tcase 'delete':\n\t\t\t\terrorMessage = wp.updates.l10n.deleteFailed;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Messages are escaped, remove HTML tags to make them more readable.\n\t\terror = error.replace( /<[\\/a-z][^<>]*>/gi, '' );\n\t\terrorMessage = errorMessage.replace( '%s', error );\n\n\t\t// Add admin notice.\n\t\twp.updates.addAdminNotice( {\n\t\t\tid:        'unknown_error',\n\t\t\tclassName: 'notice-error is-dismissible',\n\t\t\tmessage:   _.escape( errorMessage )\n\t\t} );\n\n\t\t// Remove the lock, and clear the queue.\n\t\twp.updates.ajaxLocked = false;\n\t\twp.updates.queue      = [];\n\n\t\t// Change buttons of all running updates.\n\t\t$( '.button.updating-message' )\n\t\t\t.removeClass( 'updating-message' )\n\t\t\t.removeAttr( 'aria-label' )\n\t\t\t.prop( 'disabled', true )\n\t\t\t.text( wp.updates.l10n.updateFailedShort );\n\n\t\t$( '.updating-message:not(.button):not(.thickbox)' )\n\t\t\t.removeClass( 'updating-message notice-warning' )\n\t\t\t.addClass( 'notice-error' )\n\t\t\t.find( 'p' )\n\t\t\t\t.removeAttr( 'aria-label' )\n\t\t\t\t.text( errorMessage );\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\treturn false;\n\t};\n\n\t/**\n\t * Potentially adds an AYS to a user attempting to leave the page.\n\t *\n\t * If an update is on-going and a user attempts to leave the page,\n\t * opens an \"Are you sure?\" alert.\n\t *\n\t * @since 4.2.0\n\t */\n\twp.updates.beforeunload = function() {\n\t\tif ( wp.updates.ajaxLocked ) {\n\t\t\treturn wp.updates.l10n.beforeunload;\n\t\t}\n\t};\n\n\t$( function() {\n\t\tvar $pluginFilter        = $( '#plugin-filter' ),\n\t\t\t$bulkActionForm      = $( '#bulk-action-form' ),\n\t\t\t$filesystemForm      = $( '#request-filesystem-credentials-form' ),\n\t\t\t$filesystemModal     = $( '#request-filesystem-credentials-dialog' ),\n\t\t\t$pluginSearch        = $( '.plugins-php .wp-filter-search' ),\n\t\t\t$pluginInstallSearch = $( '.plugin-install-php .wp-filter-search' );\n\n\t\tsettings = _.extend( settings, window._wpUpdatesItemCounts || {} );\n\n\t\tif ( settings.totals ) {\n\t\t\twp.updates.refreshCount();\n\t\t}\n\n\t\t/*\n\t\t * Whether a user needs to submit filesystem credentials.\n\t\t *\n\t\t * This is based on whether the form was output on the page server-side.\n\t\t *\n\t\t * @see {wp_print_request_filesystem_credentials_modal() in PHP}\n\t\t */\n\t\twp.updates.shouldRequestFilesystemCredentials = $filesystemModal.length > 0;\n\n\t\t/**\n\t\t * File system credentials form submit noop-er / handler.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\t$filesystemModal.on( 'submit', 'form', function( event ) {\n\t\t\tevent.preventDefault();\n\n\t\t\t// Persist the credentials input by the user for the duration of the page load.\n\t\t\twp.updates.filesystemCredentials.ftp.hostname       = $( '#hostname' ).val();\n\t\t\twp.updates.filesystemCredentials.ftp.username       = $( '#username' ).val();\n\t\t\twp.updates.filesystemCredentials.ftp.password       = $( '#password' ).val();\n\t\t\twp.updates.filesystemCredentials.ftp.connectionType = $( 'input[name=\"connection_type\"]:checked' ).val();\n\t\t\twp.updates.filesystemCredentials.ssh.publicKey      = $( '#public_key' ).val();\n\t\t\twp.updates.filesystemCredentials.ssh.privateKey     = $( '#private_key' ).val();\n\t\t\twp.updates.filesystemCredentials.available          = true;\n\n\t\t\t// Unlock and invoke the queue.\n\t\t\twp.updates.ajaxLocked = false;\n\t\t\twp.updates.queueChecker();\n\n\t\t\twp.updates.requestForCredentialsModalClose();\n\t\t} );\n\n\t\t/**\n\t\t * Closes the request credentials modal when clicking the 'Cancel' button or outside of the modal.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\t$filesystemModal.on( 'click', '[data-js-action=\"close\"], .notification-dialog-background', wp.updates.requestForCredentialsModalCancel );\n\n\t\t/**\n\t\t * Hide SSH fields when not selected.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\t$filesystemForm.on( 'change', 'input[name=\"connection_type\"]', function() {\n\t\t\t$( '#ssh-keys' ).toggleClass( 'hidden', ( 'ssh' !== $( this ).val() ) );\n\t\t} ).change();\n\n\t\t/**\n\t\t * Handles events after the credential modal was closed.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event}  event Event interface.\n\t\t * @param {string} job   The install/update.delete request.\n\t\t */\n\t\t$document.on( 'credential-modal-cancel', function( event, job ) {\n\t\t\tvar $updatingMessage = $( '.updating-message' ),\n\t\t\t\t$message, originalText;\n\n\t\t\tif ( 'import' === pagenow ) {\n\t\t\t\t$updatingMessage.removeClass( 'updating-message' );\n\t\t\t} else if ( 'plugins' === pagenow || 'plugins-network' === pagenow ) {\n\t\t\t\tif ( 'update-plugin' === job.action ) {\n\t\t\t\t\t$message = $( 'tr[data-plugin=\"' + job.data.plugin + '\"]' ).find( '.update-message' );\n\t\t\t\t} else if ( 'delete-plugin' === job.action ) {\n\t\t\t\t\t$message = $( '[data-plugin=\"' + job.data.plugin + '\"]' ).find( '.row-actions a.delete' );\n\t\t\t\t}\n\t\t\t} else if ( 'themes' === pagenow || 'themes-network' === pagenow ) {\n\t\t\t\tif ( 'update-theme' === job.action ) {\n\t\t\t\t\t$message = $( '[data-slug=\"' + job.data.slug + '\"]' ).find( '.update-message' );\n\t\t\t\t} else if ( 'delete-theme' === job.action && 'themes-network' === pagenow ) {\n\t\t\t\t\t$message = $( '[data-slug=\"' + job.data.slug + '\"]' ).find( '.row-actions a.delete' );\n\t\t\t\t} else if ( 'delete-theme' === job.action && 'themes' === pagenow ) {\n\t\t\t\t\t$message = $( '.theme-actions .delete-theme' );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$message = $updatingMessage;\n\t\t\t}\n\n\t\t\tif ( $message && $message.hasClass( 'updating-message' ) ) {\n\t\t\t\toriginalText = $message.data( 'originaltext' );\n\n\t\t\t\tif ( 'undefined' === typeof originalText ) {\n\t\t\t\t\toriginalText = $( '<p>' ).html( $message.find( 'p' ).data( 'originaltext' ) );\n\t\t\t\t}\n\n\t\t\t\t$message\n\t\t\t\t\t.removeClass( 'updating-message' )\n\t\t\t\t\t.html( originalText );\n\n\t\t\t\tif ( 'plugin-install' === pagenow || 'plugin-install-network' === pagenow ) {\n\t\t\t\t\tif ( 'update-plugin' === job.action ) {\n\t\t\t\t\t\t$message.attr( 'aria-label', wp.updates.l10n.pluginUpdateNowLabel.replace( '%s', $message.data( 'name' ) ) );\n\t\t\t\t\t} else if ( 'install-plugin' === job.action ) {\n\t\t\t\t\t\t$message.attr( 'aria-label', wp.updates.l10n.pluginInstallNowLabel.replace( '%s', $message.data( 'name' ) ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twp.a11y.speak( wp.updates.l10n.updateCancel, 'polite' );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for plugin updates in List Table view.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$bulkActionForm.on( 'click', '[data-plugin] .update-link', function( event ) {\n\t\t\tvar $message   = $( event.target ),\n\t\t\t\t$pluginRow = $message.parents( 'tr' );\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( $message.hasClass( 'updating-message' ) || $message.hasClass( 'button-disabled' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\t// Return the user to the input box of the plugin's table row after closing the modal.\n\t\t\twp.updates.$elToReturnFocusToFromCredentialsModal = $pluginRow.find( '.check-column input' );\n\t\t\twp.updates.updatePlugin( {\n\t\t\t\tplugin: $pluginRow.data( 'plugin' ),\n\t\t\t\tslug:   $pluginRow.data( 'slug' )\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for plugin updates in plugin install view.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$pluginFilter.on( 'click', '.update-now', function( event ) {\n\t\t\tvar $button = $( event.target );\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( $button.hasClass( 'updating-message' ) || $button.hasClass( 'button-disabled' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\twp.updates.updatePlugin( {\n\t\t\t\tplugin: $button.data( 'plugin' ),\n\t\t\t\tslug:   $button.data( 'slug' )\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for plugin installs in plugin install view.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$pluginFilter.on( 'click', '.install-now', function( event ) {\n\t\t\tvar $button = $( event.target );\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( $button.hasClass( 'updating-message' ) || $button.hasClass( 'button-disabled' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( wp.updates.shouldRequestFilesystemCredentials && ! wp.updates.ajaxLocked ) {\n\t\t\t\twp.updates.requestFilesystemCredentials( event );\n\n\t\t\t\t$document.on( 'credential-modal-cancel', function() {\n\t\t\t\t\tvar $message = $( '.install-now.updating-message' );\n\n\t\t\t\t\t$message\n\t\t\t\t\t\t.removeClass( 'updating-message' )\n\t\t\t\t\t\t.text( wp.updates.l10n.installNow );\n\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.updateCancel, 'polite' );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\twp.updates.installPlugin( {\n\t\t\t\tslug: $button.data( 'slug' )\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for importer plugins installs in the Import screen.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$document.on( 'click', '.importer-item .install-now', function( event ) {\n\t\t\tvar $button = $( event.target ),\n\t\t\t\tpluginName = $( this ).data( 'name' );\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( $button.hasClass( 'updating-message' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( wp.updates.shouldRequestFilesystemCredentials && ! wp.updates.ajaxLocked ) {\n\t\t\t\twp.updates.requestFilesystemCredentials( event );\n\n\t\t\t\t$document.on( 'credential-modal-cancel', function() {\n\n\t\t\t\t\t$button\n\t\t\t\t\t\t.removeClass( 'updating-message' )\n\t\t\t\t\t\t.text( wp.updates.l10n.installNow )\n\t\t\t\t\t\t.attr( 'aria-label', wp.updates.l10n.installNowLabel.replace( '%s', pluginName ) );\n\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.updateCancel, 'polite' );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\twp.updates.installPlugin( {\n\t\t\t\tslug:    $button.data( 'slug' ),\n\t\t\t\tpagenow: pagenow,\n\t\t\t\tsuccess: wp.updates.installImporterSuccess,\n\t\t\t\terror:   wp.updates.installImporterError\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for plugin deletions.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$bulkActionForm.on( 'click', '[data-plugin] a.delete', function( event ) {\n\t\t\tvar $pluginRow = $( event.target ).parents( 'tr' );\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( ! window.confirm( wp.updates.l10n.aysDeleteUninstall.replace( '%s', $pluginRow.find( '.plugin-title strong' ).text() ) ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\twp.updates.deletePlugin( {\n\t\t\t\tplugin: $pluginRow.data( 'plugin' ),\n\t\t\t\tslug:   $pluginRow.data( 'slug' )\n\t\t\t} );\n\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for theme updates.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$document.on( 'click', '.themes-php.network-admin .update-link', function( event ) {\n\t\t\tvar $message  = $( event.target ),\n\t\t\t\t$themeRow = $message.parents( 'tr' );\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( $message.hasClass( 'updating-message' ) || $message.hasClass( 'button-disabled' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\t// Return the user to the input box of the theme's table row after closing the modal.\n\t\t\twp.updates.$elToReturnFocusToFromCredentialsModal = $themeRow.find( '.check-column input' );\n\t\t\twp.updates.updateTheme( {\n\t\t\t\tslug: $themeRow.data( 'slug' )\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for theme deletions.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$document.on( 'click', '.themes-php.network-admin a.delete', function( event ) {\n\t\t\tvar $themeRow = $( event.target ).parents( 'tr' );\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( ! window.confirm( wp.updates.l10n.aysDelete.replace( '%s', $themeRow.find( '.theme-title strong' ).text() ) ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\twp.updates.deleteTheme( {\n\t\t\t\tslug: $themeRow.data( 'slug' )\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Bulk action handler for plugins and themes.\n\t\t *\n\t\t * Handles both deletions and updates.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$bulkActionForm.on( 'click', '[type=\"submit\"]', function( event ) {\n\t\t\tvar bulkAction    = $( event.target ).siblings( 'select' ).val(),\n\t\t\t\titemsSelected = $bulkActionForm.find( 'input[name=\"checked[]\"]:checked' ),\n\t\t\t\tsuccess       = 0,\n\t\t\t\terror         = 0,\n\t\t\t\terrorMessages = [],\n\t\t\t\ttype, action;\n\n\t\t\t// Determine which type of item we're dealing with.\n\t\t\tswitch ( pagenow ) {\n\t\t\t\tcase 'plugins':\n\t\t\t\tcase 'plugins-network':\n\t\t\t\t\ttype = 'plugin';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'themes-network':\n\t\t\t\t\ttype = 'theme';\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Bail if there were no items selected.\n\t\t\tif ( ! itemsSelected.length ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\t$( 'html, body' ).animate( { scrollTop: 0 } );\n\n\t\t\t\treturn wp.updates.addAdminNotice( {\n\t\t\t\t\tid:        'no-items-selected',\n\t\t\t\t\tclassName: 'notice-error is-dismissible',\n\t\t\t\t\tmessage:   wp.updates.l10n.noItemsSelected\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Determine the type of request we're dealing with.\n\t\t\tswitch ( bulkAction ) {\n\t\t\t\tcase 'update-selected':\n\t\t\t\t\taction = bulkAction.replace( 'selected', type );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'delete-selected':\n\t\t\t\t\tif ( ! window.confirm( 'plugin' === type ? wp.updates.l10n.aysBulkDelete : wp.updates.l10n.aysBulkDeleteThemes ) ) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\taction = bulkAction.replace( 'selected', type );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\tevent.preventDefault();\n\n\t\t\t// Un-check the bulk checkboxes.\n\t\t\t$bulkActionForm.find( '.manage-column [type=\"checkbox\"]' ).prop( 'checked', false );\n\n\t\t\t$document.trigger( 'wp-' + type + '-bulk-' + bulkAction, itemsSelected );\n\n\t\t\t// Find all the checkboxes which have been checked.\n\t\t\titemsSelected.each( function( index, element ) {\n\t\t\t\tvar $checkbox = $( element ),\n\t\t\t\t\t$itemRow = $checkbox.parents( 'tr' );\n\n\t\t\t\t// Only add update-able items to the update queue.\n\t\t\t\tif ( 'update-selected' === bulkAction && ( ! $itemRow.hasClass( 'update' ) || $itemRow.find( 'notice-error' ).length ) ) {\n\n\t\t\t\t\t// Un-check the box.\n\t\t\t\t\t$checkbox.prop( 'checked', false );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Add it to the queue.\n\t\t\t\twp.updates.queue.push( {\n\t\t\t\t\taction: action,\n\t\t\t\t\tdata:   {\n\t\t\t\t\t\tplugin: $itemRow.data( 'plugin' ),\n\t\t\t\t\t\tslug:   $itemRow.data( 'slug' )\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\t// Display bulk notification for updates of any kind.\n\t\t\t$document.on( 'wp-plugin-update-success wp-plugin-update-error wp-theme-update-success wp-theme-update-error', function( event, response ) {\n\t\t\t\tvar $itemRow = $( '[data-slug=\"' + response.slug + '\"]' ),\n\t\t\t\t\t$bulkActionNotice, itemName;\n\n\t\t\t\tif ( 'wp-' + response.update + '-update-success' === event.type ) {\n\t\t\t\t\tsuccess++;\n\t\t\t\t} else {\n\t\t\t\t\titemName = response.pluginName ? response.pluginName : $itemRow.find( '.column-primary strong' ).text();\n\n\t\t\t\t\terror++;\n\t\t\t\t\terrorMessages.push( itemName + ': ' + response.errorMessage );\n\t\t\t\t}\n\n\t\t\t\t$itemRow.find( 'input[name=\"checked[]\"]:checked' ).prop( 'checked', false );\n\n\t\t\t\twp.updates.adminNotice = wp.template( 'wp-bulk-updates-admin-notice' );\n\n\t\t\t\twp.updates.addAdminNotice( {\n\t\t\t\t\tid:            'bulk-action-notice',\n\t\t\t\t\tclassName:     'bulk-action-notice',\n\t\t\t\t\tsuccesses:     success,\n\t\t\t\t\terrors:        error,\n\t\t\t\t\terrorMessages: errorMessages,\n\t\t\t\t\ttype:          response.update\n\t\t\t\t} );\n\n\t\t\t\t$bulkActionNotice = $( '#bulk-action-notice' ).on( 'click', 'button', function() {\n\t\t\t\t\t// $( this ) is the clicked button, no need to get it again.\n\t\t\t\t\t$( this )\n\t\t\t\t\t\t.toggleClass( 'bulk-action-errors-collapsed' )\n\t\t\t\t\t\t.attr( 'aria-expanded', ! $( this ).hasClass( 'bulk-action-errors-collapsed' ) );\n\t\t\t\t\t// Show the errors list.\n\t\t\t\t\t$bulkActionNotice.find( '.bulk-action-errors' ).toggleClass( 'hidden' );\n\t\t\t\t} );\n\n\t\t\t\tif ( error > 0 && ! wp.updates.queue.length ) {\n\t\t\t\t\t$( 'html, body' ).animate( { scrollTop: 0 } );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Reset admin notice template after #bulk-action-notice was added.\n\t\t\t$document.on( 'wp-updates-notice-added', function() {\n\t\t\t\twp.updates.adminNotice = wp.template( 'wp-updates-admin-notice' );\n\t\t\t} );\n\n\t\t\t// Check the queue, now that the event handlers have been added.\n\t\t\twp.updates.queueChecker();\n\t\t} );\n\n\t\tif ( $pluginInstallSearch.length ) {\n\t\t\t$pluginInstallSearch.attr( 'aria-describedby', 'live-search-desc' );\n\t\t}\n\n\t\t/**\n\t\t * Handles changes to the plugin search box on the new-plugin page,\n\t\t * searching the repository dynamically.\n\t\t *\n\t\t * @since 4.6.0\n\t\t */\n\t\t$pluginInstallSearch.on( 'keyup input', _.debounce( function( event, eventtype ) {\n\t\t\tvar $searchTab = $( '.plugin-install-search' ), data, searchLocation;\n\n\t\t\tdata = {\n\t\t\t\t_ajax_nonce: wp.updates.ajaxNonce,\n\t\t\t\ts:           event.target.value,\n\t\t\t\ttab:         'search',\n\t\t\t\ttype:        $( '#typeselector' ).val(),\n\t\t\t\tpagenow:     pagenow\n\t\t\t};\n\t\t\tsearchLocation = location.href.split( '?' )[ 0 ] + '?' + $.param( _.omit( data, [ '_ajax_nonce', 'pagenow' ] ) );\n\n\t\t\t// Clear on escape.\n\t\t\tif ( 'keyup' === event.type && 27 === event.which ) {\n\t\t\t\tevent.target.value = '';\n\t\t\t}\n\n\t\t\tif ( wp.updates.searchTerm === data.s && 'typechange' !== eventtype ) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t$pluginFilter.empty();\n\t\t\t\twp.updates.searchTerm = data.s;\n\t\t\t}\n\n\t\t\tif ( window.history && window.history.replaceState ) {\n\t\t\t\twindow.history.replaceState( null, '', searchLocation );\n\t\t\t}\n\n\t\t\tif ( ! $searchTab.length ) {\n\t\t\t\t$searchTab = $( '<li class=\"plugin-install-search\" />' )\n\t\t\t\t\t.append( $( '<a />', {\n\t\t\t\t\t\t'class': 'current',\n\t\t\t\t\t\t'href': searchLocation,\n\t\t\t\t\t\t'text': wp.updates.l10n.searchResultsLabel\n\t\t\t\t\t} ) );\n\n\t\t\t\t$( '.wp-filter .filter-links .current' )\n\t\t\t\t\t.removeClass( 'current' )\n\t\t\t\t\t.parents( '.filter-links' )\n\t\t\t\t\t.prepend( $searchTab );\n\n\t\t\t\t$pluginFilter.prev( 'p' ).remove();\n\t\t\t\t$( '.plugins-popular-tags-wrapper' ).remove();\n\t\t\t}\n\n\t\t\tif ( 'undefined' !== typeof wp.updates.searchRequest ) {\n\t\t\t\twp.updates.searchRequest.abort();\n\t\t\t}\n\t\t\t$( 'body' ).addClass( 'loading-content' );\n\n\t\t\twp.updates.searchRequest = wp.ajax.post( 'search-install-plugins', data ).done( function( response ) {\n\t\t\t\t$( 'body' ).removeClass( 'loading-content' );\n\t\t\t\t$pluginFilter.append( response.items );\n\t\t\t\tdelete wp.updates.searchRequest;\n\n\t\t\t\tif ( 0 === response.count ) {\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.noPluginsFound );\n\t\t\t\t} else {\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.pluginsFound.replace( '%d', response.count ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t}, 500 ) );\n\n\t\tif ( $pluginSearch.length ) {\n\t\t\t$pluginSearch.attr( 'aria-describedby', 'live-search-desc' );\n\t\t}\n\n\t\t/**\n\t\t * Handles changes to the plugin search box on the Installed Plugins screen,\n\t\t * searching the plugin list dynamically.\n\t\t *\n\t\t * @since 4.6.0\n\t\t */\n\t\t$pluginSearch.on( 'keyup input', _.debounce( function( event ) {\n\t\t\tvar data = {\n\t\t\t\t_ajax_nonce:   wp.updates.ajaxNonce,\n\t\t\t\ts:             event.target.value,\n\t\t\t\tpagenow:       pagenow,\n\t\t\t\tplugin_status: 'all'\n\t\t\t},\n\t\t\tqueryArgs;\n\n\t\t\t// Clear on escape.\n\t\t\tif ( 'keyup' === event.type && 27 === event.which ) {\n\t\t\t\tevent.target.value = '';\n\t\t\t}\n\n\t\t\tif ( wp.updates.searchTerm === data.s ) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\twp.updates.searchTerm = data.s;\n\t\t\t}\n\n\t\t\tqueryArgs = _.object( _.compact( _.map( location.search.slice( 1 ).split( '&' ), function( item ) {\n\t\t\t\tif ( item ) return item.split( '=' );\n\t\t\t} ) ) );\n\n\t\t\tdata.plugin_status = queryArgs.plugin_status || 'all';\n\n\t\t\tif ( window.history && window.history.replaceState ) {\n\t\t\t\twindow.history.replaceState( null, '', location.href.split( '?' )[ 0 ] + '?s=' + data.s + '&plugin_status=' + data.plugin_status );\n\t\t\t}\n\n\t\t\tif ( 'undefined' !== typeof wp.updates.searchRequest ) {\n\t\t\t\twp.updates.searchRequest.abort();\n\t\t\t}\n\n\t\t\t$bulkActionForm.empty();\n\t\t\t$( 'body' ).addClass( 'loading-content' );\n\t\t\t$( '.subsubsub .current' ).removeClass( 'current' );\n\n\t\t\twp.updates.searchRequest = wp.ajax.post( 'search-plugins', data ).done( function( response ) {\n\n\t\t\t\t// Can we just ditch this whole subtitle business?\n\t\t\t\tvar $subTitle    = $( '<span />' ).addClass( 'subtitle' ).html( wp.updates.l10n.searchResults.replace( '%s', _.escape( data.s ) ) ),\n\t\t\t\t\t$oldSubTitle = $( '.wrap .subtitle' );\n\n\t\t\t\tif ( ! data.s.length ) {\n\t\t\t\t\t$oldSubTitle.remove();\n\t\t\t\t\t$( '.subsubsub .' + data.plugin_status + ' a' ).addClass( 'current' );\n\t\t\t\t} else if ( $oldSubTitle.length ) {\n\t\t\t\t\t$oldSubTitle.replaceWith( $subTitle );\n\t\t\t\t} else {\n\t\t\t\t\t$( '.wp-header-end' ).before( $subTitle );\n\t\t\t\t}\n\n\t\t\t\t$( 'body' ).removeClass( 'loading-content' );\n\t\t\t\t$bulkActionForm.append( response.items );\n\t\t\t\tdelete wp.updates.searchRequest;\n\n\t\t\t\tif ( 0 === response.count ) {\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.noPluginsFound );\n\t\t\t\t} else {\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.pluginsFound.replace( '%d', response.count ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t}, 500 ) );\n\n\t\t/**\n\t\t * Trigger a search event when the search form gets submitted.\n\t\t *\n\t\t * @since 4.6.0\n\t\t */\n\t\t$document.on( 'submit', '.search-plugins', function( event ) {\n\t\t\tevent.preventDefault();\n\n\t\t\t$( 'input.wp-filter-search' ).trigger( 'input' );\n\t\t} );\n\n\t\t/**\n\t\t * Trigger a search event when the search type gets changed.\n\t\t *\n\t\t * @since 4.6.0\n\t\t */\n\t\t$( '#typeselector' ).on( 'change', function() {\n\t\t\tvar $search = $( 'input[name=\"s\"]' );\n\n\t\t\tif ( $search.val().length ) {\n\t\t\t\t$search.trigger( 'input', 'typechange' );\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for updating a plugin from the details modal on `plugin-install.php`.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$( '#plugin_update_from_iframe' ).on( 'click', function( event ) {\n\t\t\tvar target = window.parent === window ? null : window.parent,\n\t\t\t\tupdate;\n\n\t\t\t$.support.postMessage = !! window.postMessage;\n\n\t\t\tif ( false === $.support.postMessage || null === target || -1 !== window.parent.location.pathname.indexOf( 'update-core.php' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tupdate = {\n\t\t\t\taction: 'update-plugin',\n\t\t\t\tdata:   {\n\t\t\t\t\tplugin: $( this ).data( 'plugin' ),\n\t\t\t\t\tslug:   $( this ).data( 'slug' )\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttarget.postMessage( JSON.stringify( update ), window.location.origin );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for installing a plugin from the details modal on `plugin-install.php`.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$( '#plugin_install_from_iframe' ).on( 'click', function( event ) {\n\t\t\tvar target = window.parent === window ? null : window.parent,\n\t\t\t\tinstall;\n\n\t\t\t$.support.postMessage = !! window.postMessage;\n\n\t\t\tif ( false === $.support.postMessage || null === target || -1 !== window.parent.location.pathname.indexOf( 'index.php' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tinstall = {\n\t\t\t\taction: 'install-plugin',\n\t\t\t\tdata:   {\n\t\t\t\t\tslug: $( this ).data( 'slug' )\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttarget.postMessage( JSON.stringify( install ), window.location.origin );\n\t\t} );\n\n\t\t/**\n\t\t * Handles postMessage events.\n\t\t *\n\t\t * @since 4.2.0\n\t\t * @since 4.6.0 Switched `update-plugin` action to use the queue.\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$( window ).on( 'message', function( event ) {\n\t\t\tvar originalEvent  = event.originalEvent,\n\t\t\t\texpectedOrigin = document.location.protocol + '//' + document.location.hostname,\n\t\t\t\tmessage;\n\n\t\t\tif ( originalEvent.origin !== expectedOrigin ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tmessage = $.parseJSON( originalEvent.data );\n\t\t\t} catch ( e ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( 'undefined' === typeof message.action ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch ( message.action ) {\n\n\t\t\t\t// Called from `wp-admin/includes/class-wp-upgrader-skins.php`.\n\t\t\t\tcase 'decrementUpdateCount':\n\t\t\t\t\t/** @property {string} message.upgradeType */\n\t\t\t\t\twp.updates.decrementCount( message.upgradeType );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'install-plugin':\n\t\t\t\tcase 'update-plugin':\n\t\t\t\t\t/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n\t\t\t\t\twindow.tb_remove();\n\t\t\t\t\t/* jscs:enable */\n\n\t\t\t\t\tmessage.data = wp.updates._addCallbacks( message.data, message.action );\n\n\t\t\t\t\twp.updates.queue.push( message );\n\t\t\t\t\twp.updates.queueChecker();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Adds a callback to display a warning before leaving the page.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\t$( window ).on( 'beforeunload', wp.updates.beforeunload );\n\t} );\n})( jQuery, window.wp, window._wpUpdatesSettings );\n", "!function(a,b,c){var d=a(document);b=b||{},b.updates={},b.updates.ajaxNonce=c.ajax_nonce,b.updates.l10n=c.l10n,b.updates.searchTerm=\"\",b.updates.shouldRequestFilesystemCredentials=!1,b.updates.filesystemCredentials={ftp:{host:\"\",username:\"\",password:\"\",connectionType:\"\"},ssh:{publicKey:\"\",privateKey:\"\"},available:!1},b.updates.ajaxLocked=!1,b.updates.adminNotice=b.template(\"wp-updates-admin-notice\"),b.updates.queue=[],b.updates.$elToReturnFocusToFromCredentialsModal=void 0,b.updates.addAdminNotice=function(c){var e,f=a(c.selector);delete c.selector,e=b.updates.adminNotice(c),f.length||(f=a(\"#\"+c.id)),f.length?f.replaceWith(e):a(\".wrap\").find(\"> h1\").after(e),d.trigger(\"wp-updates-notice-added\")},b.updates.ajax=function(c,d){var e={};return b.updates.ajaxLocked?(b.updates.queue.push({action:c,data:d}),a.Deferred()):(b.updates.ajaxLocked=!0,d.success&&(e.success=d.success,delete d.success),d.error&&(e.error=d.error,delete d.error),e.data=_.extend(d,{action:c,_ajax_nonce:b.updates.ajaxNonce,username:b.updates.filesystemCredentials.ftp.username,password:b.updates.filesystemCredentials.ftp.password,hostname:b.updates.filesystemCredentials.ftp.hostname,connection_type:b.updates.filesystemCredentials.ftp.connectionType,public_key:b.updates.filesystemCredentials.ssh.publicKey,private_key:b.updates.filesystemCredentials.ssh.privateKey}),b.ajax.send(e).always(b.updates.ajaxAlways))},b.updates.ajaxAlways=function(c){c.errorCode&&\"unable_to_connect_to_filesystem\"===c.errorCode||(b.updates.ajaxLocked=!1,b.updates.queueChecker()),\"undefined\"!=typeof c.debug&&window.console&&window.console.log&&_.map(c.debug,function(b){window.console.log(a(\"<p />\").html(b).text())})},b.updates.refreshCount=function(){var b,d=a(\"#wp-admin-bar-updates\"),e=a('a[href=\"update-core.php\"] .update-plugins'),f=a('a[href=\"plugins.php\"] .update-plugins'),g=a('a[href=\"themes.php\"] .update-plugins');d.find(\".ab-item\").removeAttr(\"title\"),d.find(\".ab-label\").text(c.totals.counts.total),0===c.totals.counts.total&&d.find(\".ab-label\").parents(\"li\").remove(),e.each(function(a,b){b.className=b.className.replace(/count-\\d+/,\"count-\"+c.totals.counts.total)}),c.totals.counts.total>0?e.find(\".update-count\").text(c.totals.counts.total):e.remove(),f.each(function(a,b){b.className=b.className.replace(/count-\\d+/,\"count-\"+c.totals.counts.plugins)}),c.totals.counts.total>0?f.find(\".plugin-count\").text(c.totals.counts.plugins):f.remove(),g.each(function(a,b){b.className=b.className.replace(/count-\\d+/,\"count-\"+c.totals.counts.themes)}),c.totals.counts.total>0?g.find(\".theme-count\").text(c.totals.counts.themes):g.remove(),\"plugins\"===pagenow||\"plugins-network\"===pagenow?b=c.totals.counts.plugins:\"themes\"!==pagenow&&\"themes-network\"!==pagenow||(b=c.totals.counts.themes),b>0?a(\".subsubsub .upgrade .count\").text(\"(\"+b+\")\"):(a(\".subsubsub .upgrade\").remove(),a(\".subsubsub li:last\").html(function(){return a(this).children()}))},b.updates.decrementCount=function(a){c.totals.counts.total=Math.max(--c.totals.counts.total,0),\"plugin\"===a?c.totals.counts.plugins=Math.max(--c.totals.counts.plugins,0):\"theme\"===a&&(c.totals.counts.themes=Math.max(--c.totals.counts.themes,0)),b.updates.refreshCount(a)},b.updates.updatePlugin=function(c){var e,f,g,h;return c=_.extend({success:b.updates.updatePluginSuccess,error:b.updates.updatePluginError},c),\"plugins\"===pagenow||\"plugins-network\"===pagenow?(e=a('tr[data-plugin=\"'+c.plugin+'\"]'),g=e.find(\".update-message\").removeClass(\"notice-error\").addClass(\"updating-message notice-warning\").find(\"p\"),h=b.updates.l10n.pluginUpdatingLabel.replace(\"%s\",e.find(\".plugin-title strong\").text())):\"plugin-install\"!==pagenow&&\"plugin-install-network\"!==pagenow||(f=a(\".plugin-card-\"+c.slug),g=f.find(\".update-now\").addClass(\"updating-message\"),h=b.updates.l10n.pluginUpdatingLabel.replace(\"%s\",g.data(\"name\")),f.removeClass(\"plugin-card-update-failed\").find(\".notice.notice-error\").remove()),g.html()!==b.updates.l10n.updating&&g.data(\"originaltext\",g.html()),g.attr(\"aria-label\",h).text(b.updates.l10n.updating),d.trigger(\"wp-plugin-updating\",c),b.updates.ajax(\"update-plugin\",c)},b.updates.updatePluginSuccess=function(c){var e,f,g;\"plugins\"===pagenow||\"plugins-network\"===pagenow?(e=a('tr[data-plugin=\"'+c.plugin+'\"]').removeClass(\"update\").addClass(\"updated\"),f=e.find(\".update-message\").removeClass(\"updating-message notice-warning\").addClass(\"updated-message notice-success\").find(\"p\"),g=e.find(\".plugin-version-author-uri\").html().replace(c.oldVersion,c.newVersion),e.find(\".plugin-version-author-uri\").html(g)):\"plugin-install\"!==pagenow&&\"plugin-install-network\"!==pagenow||(f=a(\".plugin-card-\"+c.slug).find(\".update-now\").removeClass(\"updating-message\").addClass(\"button-disabled updated-message\")),f.attr(\"aria-label\",b.updates.l10n.pluginUpdatedLabel.replace(\"%s\",c.pluginName)).text(b.updates.l10n.pluginUpdated),b.a11y.speak(b.updates.l10n.updatedMsg,\"polite\"),b.updates.decrementCount(\"plugin\"),d.trigger(\"wp-plugin-update-success\",c)},b.updates.updatePluginError=function(c){var e,f,g;b.updates.isValidResponse(c,\"update\")&&(b.updates.maybeHandleCredentialError(c,\"update-plugin\")||(g=b.updates.l10n.updateFailed.replace(\"%s\",c.errorMessage),\"plugins\"===pagenow||\"plugins-network\"===pagenow?(f=c.plugin?a('tr[data-plugin=\"'+c.plugin+'\"]').find(\".update-message\"):a('tr[data-slug=\"'+c.slug+'\"]').find(\".update-message\"),f.removeClass(\"updating-message notice-warning\").addClass(\"notice-error\").find(\"p\").html(g),c.pluginName?f.find(\"p\").attr(\"aria-label\",b.updates.l10n.pluginUpdateFailedLabel.replace(\"%s\",c.pluginName)):f.find(\"p\").removeAttr(\"aria-label\")):\"plugin-install\"!==pagenow&&\"plugin-install-network\"!==pagenow||(e=a(\".plugin-card-\"+c.slug).addClass(\"plugin-card-update-failed\").append(b.updates.adminNotice({className:\"update-message notice-error notice-alt is-dismissible\",message:g})),e.find(\".update-now\").text(b.updates.l10n.updateFailedShort).removeClass(\"updating-message\"),c.pluginName?e.find(\".update-now\").attr(\"aria-label\",b.updates.l10n.pluginUpdateFailedLabel.replace(\"%s\",c.pluginName)):e.find(\".update-now\").removeAttr(\"aria-label\"),e.on(\"click\",\".notice.is-dismissible .notice-dismiss\",function(){setTimeout(function(){e.removeClass(\"plugin-card-update-failed\").find(\".column-name a\").focus(),e.find(\".update-now\").attr(\"aria-label\",!1).text(b.updates.l10n.updateNow)},200)})),b.a11y.speak(g,\"assertive\"),d.trigger(\"wp-plugin-update-error\",c)))},b.updates.installPlugin=function(c){var e=a(\".plugin-card-\"+c.slug),f=e.find(\".install-now\");return c=_.extend({success:b.updates.installPluginSuccess,error:b.updates.installPluginError},c),\"import\"===pagenow&&(f=a('[data-slug=\"'+c.slug+'\"]')),f.html()!==b.updates.l10n.installing&&f.data(\"originaltext\",f.html()),f.addClass(\"updating-message\").attr(\"aria-label\",b.updates.l10n.pluginInstallingLabel.replace(\"%s\",f.data(\"name\"))).text(b.updates.l10n.installing),b.a11y.speak(b.updates.l10n.installingMsg,\"polite\"),e.removeClass(\"plugin-card-install-failed\").find(\".notice.notice-error\").remove(),d.trigger(\"wp-plugin-installing\",c),b.updates.ajax(\"install-plugin\",c)},b.updates.installPluginSuccess=function(c){var e=a(\".plugin-card-\"+c.slug).find(\".install-now\");e.removeClass(\"updating-message\").addClass(\"updated-message installed button-disabled\").attr(\"aria-label\",b.updates.l10n.pluginInstalledLabel.replace(\"%s\",c.pluginName)).text(b.updates.l10n.pluginInstalled),b.a11y.speak(b.updates.l10n.installedMsg,\"polite\"),d.trigger(\"wp-plugin-install-success\",c),c.activateUrl&&setTimeout(function(){e.removeClass(\"install-now installed button-disabled updated-message\").addClass(\"activate-now button-primary\").attr(\"href\",c.activateUrl).attr(\"aria-label\",b.updates.l10n.activatePluginLabel.replace(\"%s\",c.pluginName)).text(b.updates.l10n.activatePlugin)},1e3)},b.updates.installPluginError=function(c){var e,f=a(\".plugin-card-\"+c.slug),g=f.find(\".install-now\");b.updates.isValidResponse(c,\"install\")&&(b.updates.maybeHandleCredentialError(c,\"install-plugin\")||(e=b.updates.l10n.installFailed.replace(\"%s\",c.errorMessage),f.addClass(\"plugin-card-update-failed\").append('<div class=\"notice notice-error notice-alt is-dismissible\"><p>'+e+\"</p></div>\"),f.on(\"click\",\".notice.is-dismissible .notice-dismiss\",function(){setTimeout(function(){f.removeClass(\"plugin-card-update-failed\").find(\".column-name a\").focus()},200)}),g.removeClass(\"updating-message\").addClass(\"button-disabled\").attr(\"aria-label\",b.updates.l10n.pluginInstallFailedLabel.replace(\"%s\",g.data(\"name\"))).text(b.updates.l10n.installFailedShort),b.a11y.speak(e,\"assertive\"),d.trigger(\"wp-plugin-install-error\",c)))},b.updates.installImporterSuccess=function(c){b.updates.addAdminNotice({id:\"install-success\",className:\"notice-success is-dismissible\",message:b.updates.l10n.importerInstalledMsg.replace(\"%s\",c.activateUrl+\"&from=import\")}),a('[data-slug=\"'+c.slug+'\"]').removeClass(\"install-now updating-message\").addClass(\"activate-now\").attr({href:c.activateUrl+\"&from=import\",\"aria-label\":b.updates.l10n.activateImporterLabel.replace(\"%s\",c.pluginName)}).text(b.updates.l10n.activateImporter),b.a11y.speak(b.updates.l10n.installedMsg,\"polite\"),d.trigger(\"wp-importer-install-success\",c)},b.updates.installImporterError=function(c){var e=b.updates.l10n.installFailed.replace(\"%s\",c.errorMessage),f=a('[data-slug=\"'+c.slug+'\"]'),g=f.data(\"name\");b.updates.isValidResponse(c,\"install\")&&(b.updates.maybeHandleCredentialError(c,\"install-plugin\")||(b.updates.addAdminNotice({id:c.errorCode,className:\"notice-error is-dismissible\",message:e}),f.removeClass(\"updating-message\").text(b.updates.l10n.installNow).attr(\"aria-label\",b.updates.l10n.installNowLabel.replace(\"%s\",g)),b.a11y.speak(e,\"assertive\"),d.trigger(\"wp-importer-install-error\",c)))},b.updates.deletePlugin=function(c){var e=a('[data-plugin=\"'+c.plugin+'\"]').find(\".row-actions a.delete\");return c=_.extend({success:b.updates.deletePluginSuccess,error:b.updates.deletePluginError},c),e.html()!==b.updates.l10n.deleting&&e.data(\"originaltext\",e.html()).text(b.updates.l10n.deleting),b.a11y.speak(b.updates.l10n.deleting,\"polite\"),d.trigger(\"wp-plugin-deleting\",c),b.updates.ajax(\"delete-plugin\",c)},b.updates.deletePluginSuccess=function(e){a('[data-plugin=\"'+e.plugin+'\"]').css({backgroundColor:\"#faafaa\"}).fadeOut(350,function(){var d=a(\"#bulk-action-form\"),f=a(\".subsubsub\"),g=a(this),h=d.find(\"thead th:not(.hidden), thead td\").length,i=b.template(\"item-deleted-row\"),j=c.plugins;g.hasClass(\"plugin-update-tr\")||g.after(i({slug:e.slug,plugin:e.plugin,colspan:h,name:e.pluginName})),g.remove(),-1!==_.indexOf(j.upgrade,e.plugin)&&(j.upgrade=_.without(j.upgrade,e.plugin),b.updates.decrementCount(\"plugin\")),-1!==_.indexOf(j.inactive,e.plugin)&&(j.inactive=_.without(j.inactive,e.plugin),j.inactive.length?f.find(\".inactive .count\").text(\"(\"+j.inactive.length+\")\"):f.find(\".inactive\").remove()),-1!==_.indexOf(j.active,e.plugin)&&(j.active=_.without(j.active,e.plugin),j.active.length?f.find(\".active .count\").text(\"(\"+j.active.length+\")\"):f.find(\".active\").remove()),-1!==_.indexOf(j.recently_activated,e.plugin)&&(j.recently_activated=_.without(j.recently_activated,e.plugin),j.recently_activated.length?f.find(\".recently_activated .count\").text(\"(\"+j.recently_activated.length+\")\"):f.find(\".recently_activated\").remove()),j.all=_.without(j.all,e.plugin),j.all.length?f.find(\".all .count\").text(\"(\"+j.all.length+\")\"):(d.find(\".tablenav\").css({visibility:\"hidden\"}),f.find(\".all\").remove(),d.find(\"tr.no-items\").length||d.find(\"#the-list\").append('<tr class=\"no-items\"><td class=\"colspanchange\" colspan=\"'+h+'\">'+b.updates.l10n.noPlugins+\"</td></tr>\"))}),b.a11y.speak(b.updates.l10n.pluginDeleted,\"polite\"),d.trigger(\"wp-plugin-delete-success\",e)},b.updates.deletePluginError=function(c){var e,f,g=b.template(\"item-update-row\"),h=b.updates.adminNotice({className:\"update-message notice-error notice-alt\",message:c.errorMessage});c.plugin?(e=a('tr.inactive[data-plugin=\"'+c.plugin+'\"]'),f=e.siblings('[data-plugin=\"'+c.plugin+'\"]')):(e=a('tr.inactive[data-slug=\"'+c.slug+'\"]'),f=e.siblings('[data-slug=\"'+c.slug+'\"]')),b.updates.isValidResponse(c,\"delete\")&&(b.updates.maybeHandleCredentialError(c,\"delete-plugin\")||(f.length?(f.find(\".notice-error\").remove(),f.find(\".plugin-update\").append(h)):e.addClass(\"update\").after(g({slug:c.slug,plugin:c.plugin||c.slug,colspan:a(\"#bulk-action-form\").find(\"thead th:not(.hidden), thead td\").length,content:h})),d.trigger(\"wp-plugin-delete-error\",c)))},b.updates.updateTheme=function(c){var e;return c=_.extend({success:b.updates.updateThemeSuccess,error:b.updates.updateThemeError},c),\"themes-network\"===pagenow?e=a('[data-slug=\"'+c.slug+'\"]').find(\".update-message\").removeClass(\"notice-error\").addClass(\"updating-message notice-warning\").find(\"p\"):(e=a(\"#update-theme\").closest(\".notice\").removeClass(\"notice-large\"),e.find(\"h3\").remove(),e=e.add(a('[data-slug=\"'+c.slug+'\"]').find(\".update-message\")),e=e.addClass(\"updating-message\").find(\"p\")),e.html()!==b.updates.l10n.updating&&e.data(\"originaltext\",e.html()),b.a11y.speak(b.updates.l10n.updatingMsg,\"polite\"),e.text(b.updates.l10n.updating),d.trigger(\"wp-theme-updating\",c),b.updates.ajax(\"update-theme\",c)},b.updates.updateThemeSuccess=function(c){var e,f,g=a(\"body.modal-open\").length,h=a('[data-slug=\"'+c.slug+'\"]'),i={className:\"updated-message notice-success notice-alt\",message:b.updates.l10n.themeUpdated};\"themes-network\"===pagenow?(e=h.find(\".update-message\"),f=h.find(\".theme-version-author-uri\").html().replace(c.oldVersion,c.newVersion),h.find(\".theme-version-author-uri\").html(f)):(e=a(\".theme-info .notice\").add(h.find(\".update-message\")),g?a(\".load-customize:visible\").focus():h.find(\".load-customize\").focus()),b.updates.addAdminNotice(_.extend({selector:e},i)),b.a11y.speak(b.updates.l10n.updatedMsg,\"polite\"),b.updates.decrementCount(\"theme\"),d.trigger(\"wp-theme-update-success\",c),g&&a(\".theme-info .theme-author\").after(b.updates.adminNotice(i))},b.updates.updateThemeError=function(c){var e,f=a('[data-slug=\"'+c.slug+'\"]'),g=b.updates.l10n.updateFailed.replace(\"%s\",c.errorMessage);b.updates.isValidResponse(c,\"update\")&&(b.updates.maybeHandleCredentialError(c,\"update-theme\")||(\"themes-network\"===pagenow?e=f.find(\".update-message \"):(e=a(\".theme-info .notice\").add(f.find(\".notice\")),a(\"body.modal-open\").length?a(\".load-customize:visible\").focus():f.find(\".load-customize\").focus()),b.updates.addAdminNotice({selector:e,className:\"update-message notice-error notice-alt is-dismissible\",message:g}),b.a11y.speak(g,\"polite\"),d.trigger(\"wp-theme-update-error\",c)))},b.updates.installTheme=function(c){var e=a('.theme-install[data-slug=\"'+c.slug+'\"]');return c=_.extend({success:b.updates.installThemeSuccess,error:b.updates.installThemeError},c),e.addClass(\"updating-message\"),e.parents(\".theme\").addClass(\"focus\"),e.html()!==b.updates.l10n.installing&&e.data(\"originaltext\",e.html()),e.text(b.updates.l10n.installing).attr(\"aria-label\",b.updates.l10n.themeInstallingLabel.replace(\"%s\",e.data(\"name\"))),b.a11y.speak(b.updates.l10n.installingMsg,\"polite\"),a('.install-theme-info, [data-slug=\"'+c.slug+'\"]').removeClass(\"theme-install-failed\").find(\".notice.notice-error\").remove(),d.trigger(\"wp-theme-installing\",c),b.updates.ajax(\"install-theme\",c)},b.updates.installThemeSuccess=function(c){var e,f=a(\".wp-full-overlay-header, [data-slug=\"+c.slug+\"]\");d.trigger(\"wp-theme-install-success\",c),e=f.find(\".button-primary\").removeClass(\"updating-message\").addClass(\"updated-message disabled\").attr(\"aria-label\",b.updates.l10n.themeInstalledLabel.replace(\"%s\",c.themeName)).text(b.updates.l10n.themeInstalled),b.a11y.speak(b.updates.l10n.installedMsg,\"polite\"),setTimeout(function(){c.activateUrl&&e.attr(\"href\",c.activateUrl).removeClass(\"theme-install updated-message disabled\").addClass(\"activate\").attr(\"aria-label\",b.updates.l10n.activateThemeLabel.replace(\"%s\",c.themeName)).text(b.updates.l10n.activateTheme),c.customizeUrl&&e.siblings(\".preview\").replaceWith(function(){return a(\"<a>\").attr(\"href\",c.customizeUrl).addClass(\"button load-customize\").text(b.updates.l10n.livePreview)})},1e3)},b.updates.installThemeError=function(c){var e,f,g=b.updates.l10n.installFailed.replace(\"%s\",c.errorMessage),h=b.updates.adminNotice({className:\"update-message notice-error notice-alt\",message:g});b.updates.isValidResponse(c,\"install\")&&(b.updates.maybeHandleCredentialError(c,\"install-theme\")||(d.find(\"body\").hasClass(\"full-overlay-active\")?(f=a('.theme-install[data-slug=\"'+c.slug+'\"]'),e=a(\".install-theme-info\").prepend(h)):(e=a('[data-slug=\"'+c.slug+'\"]').removeClass(\"focus\").addClass(\"theme-install-failed\").append(h),f=e.find(\".theme-install\")),f.removeClass(\"updating-message\").attr(\"aria-label\",b.updates.l10n.themeInstallFailedLabel.replace(\"%s\",f.data(\"name\"))).text(b.updates.l10n.installFailedShort),b.a11y.speak(g,\"assertive\"),d.trigger(\"wp-theme-install-error\",c)))},b.updates.deleteTheme=function(c){var e;return\"themes\"===pagenow?e=a(\".theme-actions .delete-theme\"):\"themes-network\"===pagenow&&(e=a('[data-slug=\"'+c.slug+'\"]').find(\".row-actions a.delete\")),c=_.extend({success:b.updates.deleteThemeSuccess,error:b.updates.deleteThemeError},c),e&&e.html()!==b.updates.l10n.deleting&&e.data(\"originaltext\",e.html()).text(b.updates.l10n.deleting),b.a11y.speak(b.updates.l10n.deleting,\"polite\"),a(\".theme-info .update-message\").remove(),d.trigger(\"wp-theme-deleting\",c),b.updates.ajax(\"delete-theme\",c)},b.updates.deleteThemeSuccess=function(e){var f=a('[data-slug=\"'+e.slug+'\"]');\"themes-network\"===pagenow&&f.css({backgroundColor:\"#faafaa\"}).fadeOut(350,function(){var d=a(\".subsubsub\"),f=a(this),g=c.themes,h=b.template(\"item-deleted-row\");f.hasClass(\"plugin-update-tr\")||f.after(h({slug:e.slug,colspan:a(\"#bulk-action-form\").find(\"thead th:not(.hidden), thead td\").length,name:f.find(\".theme-title strong\").text()})),f.remove(),f.hasClass(\"update\")&&(g.upgrade--,b.updates.decrementCount(\"theme\")),f.hasClass(\"inactive\")&&(g.disabled--,g.disabled?d.find(\".disabled .count\").text(\"(\"+g.disabled+\")\"):d.find(\".disabled\").remove()),d.find(\".all .count\").text(\"(\"+--g.all+\")\")}),b.a11y.speak(b.updates.l10n.themeDeleted,\"polite\"),d.trigger(\"wp-theme-delete-success\",e)},b.updates.deleteThemeError=function(c){var e=a('tr.inactive[data-slug=\"'+c.slug+'\"]'),f=a(\".theme-actions .delete-theme\"),g=b.template(\"item-update-row\"),h=e.siblings(\"#\"+c.slug+\"-update\"),i=b.updates.l10n.deleteFailed.replace(\"%s\",c.errorMessage),j=b.updates.adminNotice({className:\"update-message notice-error notice-alt\",message:i});b.updates.maybeHandleCredentialError(c,\"delete-theme\")||(\"themes-network\"===pagenow?h.length?(h.find(\".notice-error\").remove(),h.find(\".plugin-update\").append(j)):e.addClass(\"update\").after(g({slug:c.slug,colspan:a(\"#bulk-action-form\").find(\"thead th:not(.hidden), thead td\").length,content:j})):a(\".theme-info .theme-description\").before(j),f.html(f.data(\"originaltext\")),b.a11y.speak(i,\"assertive\"),d.trigger(\"wp-theme-delete-error\",c))},b.updates._addCallbacks=function(a,c){return\"import\"===pagenow&&\"install-plugin\"===c&&(a.success=b.updates.installImporterSuccess,a.error=b.updates.installImporterError),a},b.updates.queueChecker=function(){var a;if(!b.updates.ajaxLocked&&b.updates.queue.length)switch(a=b.updates.queue.shift(),a.action){case\"install-plugin\":b.updates.installPlugin(a.data);break;case\"update-plugin\":b.updates.updatePlugin(a.data);break;case\"delete-plugin\":b.updates.deletePlugin(a.data);break;case\"install-theme\":b.updates.installTheme(a.data);break;case\"update-theme\":b.updates.updateTheme(a.data);break;case\"delete-theme\":b.updates.deleteTheme(a.data)}},b.updates.requestFilesystemCredentials=function(c){!1===b.updates.filesystemCredentials.available&&(c&&!b.updates.$elToReturnFocusToFromCredentialsModal&&(b.updates.$elToReturnFocusToFromCredentialsModal=a(c.target)),b.updates.ajaxLocked=!0,b.updates.requestForCredentialsModalOpen())},b.updates.maybeRequestFilesystemCredentials=function(a){b.updates.shouldRequestFilesystemCredentials&&!b.updates.ajaxLocked&&b.updates.requestFilesystemCredentials(a)},b.updates.keydown=function(c){27===c.keyCode?b.updates.requestForCredentialsModalCancel():9===c.keyCode&&(\"upgrade\"!==c.target.id||c.shiftKey?\"hostname\"===c.target.id&&c.shiftKey&&(a(\"#upgrade\").focus(),c.preventDefault()):(a(\"#hostname\").focus(),c.preventDefault()))},b.updates.requestForCredentialsModalOpen=function(){var c=a(\"#request-filesystem-credentials-dialog\");a(\"body\").addClass(\"modal-open\"),c.show(),c.find(\"input:enabled:first\").focus(),c.on(\"keydown\",b.updates.keydown)},b.updates.requestForCredentialsModalClose=function(){a(\"#request-filesystem-credentials-dialog\").hide(),a(\"body\").removeClass(\"modal-open\"),b.updates.$elToReturnFocusToFromCredentialsModal&&b.updates.$elToReturnFocusToFromCredentialsModal.focus()},b.updates.requestForCredentialsModalCancel=function(){(b.updates.ajaxLocked||b.updates.queue.length)&&(_.each(b.updates.queue,function(a){d.trigger(\"credential-modal-cancel\",a)}),b.updates.ajaxLocked=!1,b.updates.queue=[],b.updates.requestForCredentialsModalClose())},b.updates.showErrorInCredentialsForm=function(b){var c=a(\"#request-filesystem-credentials-form\");c.find(\".notice\").remove(),c.find(\"#request-filesystem-credentials-title\").after('<div class=\"notice notice-alt notice-error\"><p>'+b+\"</p></div>\")},b.updates.credentialError=function(a,c){a=b.updates._addCallbacks(a,c),b.updates.queue.unshift({action:c,data:a}),b.updates.filesystemCredentials.available=!1,b.updates.showErrorInCredentialsForm(a.errorMessage),b.updates.requestFilesystemCredentials()},b.updates.maybeHandleCredentialError=function(a,c){return!(!b.updates.shouldRequestFilesystemCredentials||!a.errorCode||\"unable_to_connect_to_filesystem\"!==a.errorCode)&&(b.updates.credentialError(a,c),!0)},b.updates.isValidResponse=function(c,d){var e,f=b.updates.l10n.unknownError;if(_.isObject(c)&&!_.isFunction(c.always))return!0;switch(_.isString(c)&&\"-1\"===c?f=b.updates.l10n.nonceError:_.isString(c)?f=c:\"undefined\"!=typeof c.readyState&&0===c.readyState?f=b.updates.l10n.connectionError:_.isString(c.responseText)&&\"\"!==c.responseText?f=c.responseText:_.isString(c.statusText)&&(f=c.statusText),d){case\"update\":e=b.updates.l10n.updateFailed;break;case\"install\":e=b.updates.l10n.installFailed;break;case\"delete\":e=b.updates.l10n.deleteFailed}return f=f.replace(/<[\\/a-z][^<>]*>/gi,\"\"),e=e.replace(\"%s\",f),b.updates.addAdminNotice({id:\"unknown_error\",className:\"notice-error is-dismissible\",message:_.escape(e)}),b.updates.ajaxLocked=!1,b.updates.queue=[],a(\".button.updating-message\").removeClass(\"updating-message\").removeAttr(\"aria-label\").prop(\"disabled\",!0).text(b.updates.l10n.updateFailedShort),a(\".updating-message:not(.button):not(.thickbox)\").removeClass(\"updating-message notice-warning\").addClass(\"notice-error\").find(\"p\").removeAttr(\"aria-label\").text(e),b.a11y.speak(e,\"assertive\"),!1},b.updates.beforeunload=function(){if(b.updates.ajaxLocked)return b.updates.l10n.beforeunload},a(function(){var e=a(\"#plugin-filter\"),f=a(\"#bulk-action-form\"),g=a(\"#request-filesystem-credentials-form\"),h=a(\"#request-filesystem-credentials-dialog\"),i=a(\".plugins-php .wp-filter-search\"),j=a(\".plugin-install-php .wp-filter-search\");c=_.extend(c,window._wpUpdatesItemCounts||{}),c.totals&&b.updates.refreshCount(),b.updates.shouldRequestFilesystemCredentials=h.length>0,h.on(\"submit\",\"form\",function(c){c.preventDefault(),b.updates.filesystemCredentials.ftp.hostname=a(\"#hostname\").val(),b.updates.filesystemCredentials.ftp.username=a(\"#username\").val(),b.updates.filesystemCredentials.ftp.password=a(\"#password\").val(),b.updates.filesystemCredentials.ftp.connectionType=a('input[name=\"connection_type\"]:checked').val(),b.updates.filesystemCredentials.ssh.publicKey=a(\"#public_key\").val(),b.updates.filesystemCredentials.ssh.privateKey=a(\"#private_key\").val(),b.updates.filesystemCredentials.available=!0,b.updates.ajaxLocked=!1,b.updates.queueChecker(),b.updates.requestForCredentialsModalClose()}),h.on(\"click\",'[data-js-action=\"close\"], .notification-dialog-background',b.updates.requestForCredentialsModalCancel),g.on(\"change\",'input[name=\"connection_type\"]',function(){a(\"#ssh-keys\").toggleClass(\"hidden\",\"ssh\"!==a(this).val())}).change(),d.on(\"credential-modal-cancel\",function(c,d){var e,f,g=a(\".updating-message\");\"import\"===pagenow?g.removeClass(\"updating-message\"):\"plugins\"===pagenow||\"plugins-network\"===pagenow?\"update-plugin\"===d.action?e=a('tr[data-plugin=\"'+d.data.plugin+'\"]').find(\".update-message\"):\"delete-plugin\"===d.action&&(e=a('[data-plugin=\"'+d.data.plugin+'\"]').find(\".row-actions a.delete\")):\"themes\"===pagenow||\"themes-network\"===pagenow?\"update-theme\"===d.action?e=a('[data-slug=\"'+d.data.slug+'\"]').find(\".update-message\"):\"delete-theme\"===d.action&&\"themes-network\"===pagenow?e=a('[data-slug=\"'+d.data.slug+'\"]').find(\".row-actions a.delete\"):\"delete-theme\"===d.action&&\"themes\"===pagenow&&(e=a(\".theme-actions .delete-theme\")):e=g,e&&e.hasClass(\"updating-message\")&&(f=e.data(\"originaltext\"),\"undefined\"==typeof f&&(f=a(\"<p>\").html(e.find(\"p\").data(\"originaltext\"))),e.removeClass(\"updating-message\").html(f),\"plugin-install\"!==pagenow&&\"plugin-install-network\"!==pagenow||(\"update-plugin\"===d.action?e.attr(\"aria-label\",b.updates.l10n.pluginUpdateNowLabel.replace(\"%s\",e.data(\"name\"))):\"install-plugin\"===d.action&&e.attr(\"aria-label\",b.updates.l10n.pluginInstallNowLabel.replace(\"%s\",e.data(\"name\"))))),b.a11y.speak(b.updates.l10n.updateCancel,\"polite\")}),f.on(\"click\",\"[data-plugin] .update-link\",function(c){var d=a(c.target),e=d.parents(\"tr\");c.preventDefault(),d.hasClass(\"updating-message\")||d.hasClass(\"button-disabled\")||(b.updates.maybeRequestFilesystemCredentials(c),b.updates.$elToReturnFocusToFromCredentialsModal=e.find(\".check-column input\"),b.updates.updatePlugin({plugin:e.data(\"plugin\"),slug:e.data(\"slug\")}))}),e.on(\"click\",\".update-now\",function(c){var d=a(c.target);c.preventDefault(),d.hasClass(\"updating-message\")||d.hasClass(\"button-disabled\")||(b.updates.maybeRequestFilesystemCredentials(c),b.updates.updatePlugin({plugin:d.data(\"plugin\"),slug:d.data(\"slug\")}))}),e.on(\"click\",\".install-now\",function(c){var e=a(c.target);c.preventDefault(),e.hasClass(\"updating-message\")||e.hasClass(\"button-disabled\")||(b.updates.shouldRequestFilesystemCredentials&&!b.updates.ajaxLocked&&(b.updates.requestFilesystemCredentials(c),d.on(\"credential-modal-cancel\",function(){var c=a(\".install-now.updating-message\");c.removeClass(\"updating-message\").text(b.updates.l10n.installNow),b.a11y.speak(b.updates.l10n.updateCancel,\"polite\")})),b.updates.installPlugin({slug:e.data(\"slug\")}))}),d.on(\"click\",\".importer-item .install-now\",function(c){var e=a(c.target),f=a(this).data(\"name\");c.preventDefault(),e.hasClass(\"updating-message\")||(b.updates.shouldRequestFilesystemCredentials&&!b.updates.ajaxLocked&&(b.updates.requestFilesystemCredentials(c),d.on(\"credential-modal-cancel\",function(){e.removeClass(\"updating-message\").text(b.updates.l10n.installNow).attr(\"aria-label\",b.updates.l10n.installNowLabel.replace(\"%s\",f)),b.a11y.speak(b.updates.l10n.updateCancel,\"polite\")})),b.updates.installPlugin({slug:e.data(\"slug\"),pagenow:pagenow,success:b.updates.installImporterSuccess,error:b.updates.installImporterError}))}),f.on(\"click\",\"[data-plugin] a.delete\",function(c){var d=a(c.target).parents(\"tr\");c.preventDefault(),window.confirm(b.updates.l10n.aysDeleteUninstall.replace(\"%s\",d.find(\".plugin-title strong\").text()))&&(b.updates.maybeRequestFilesystemCredentials(c),b.updates.deletePlugin({plugin:d.data(\"plugin\"),slug:d.data(\"slug\")}))}),d.on(\"click\",\".themes-php.network-admin .update-link\",function(c){var d=a(c.target),e=d.parents(\"tr\");c.preventDefault(),d.hasClass(\"updating-message\")||d.hasClass(\"button-disabled\")||(b.updates.maybeRequestFilesystemCredentials(c),b.updates.$elToReturnFocusToFromCredentialsModal=e.find(\".check-column input\"),b.updates.updateTheme({slug:e.data(\"slug\")}))}),d.on(\"click\",\".themes-php.network-admin a.delete\",function(c){var d=a(c.target).parents(\"tr\");c.preventDefault(),window.confirm(b.updates.l10n.aysDelete.replace(\"%s\",d.find(\".theme-title strong\").text()))&&(b.updates.maybeRequestFilesystemCredentials(c),b.updates.deleteTheme({slug:d.data(\"slug\")}))}),f.on(\"click\",'[type=\"submit\"]',function(c){var e,g,h=a(c.target).siblings(\"select\").val(),i=f.find('input[name=\"checked[]\"]:checked'),j=0,k=0,l=[];switch(pagenow){case\"plugins\":case\"plugins-network\":e=\"plugin\";break;case\"themes-network\":e=\"theme\";break;default:return}if(!i.length)return c.preventDefault(),a(\"html, body\").animate({scrollTop:0}),b.updates.addAdminNotice({id:\"no-items-selected\",className:\"notice-error is-dismissible\",message:b.updates.l10n.noItemsSelected});switch(h){case\"update-selected\":g=h.replace(\"selected\",e);break;case\"delete-selected\":if(!window.confirm(\"plugin\"===e?b.updates.l10n.aysBulkDelete:b.updates.l10n.aysBulkDeleteThemes))return void c.preventDefault();g=h.replace(\"selected\",e);break;default:return}b.updates.maybeRequestFilesystemCredentials(c),c.preventDefault(),f.find('.manage-column [type=\"checkbox\"]').prop(\"checked\",!1),d.trigger(\"wp-\"+e+\"-bulk-\"+h,i),i.each(function(c,d){var e=a(d),f=e.parents(\"tr\");return\"update-selected\"!==h||f.hasClass(\"update\")&&!f.find(\"notice-error\").length?void b.updates.queue.push({action:g,data:{plugin:f.data(\"plugin\"),slug:f.data(\"slug\")}}):void e.prop(\"checked\",!1)}),d.on(\"wp-plugin-update-success wp-plugin-update-error wp-theme-update-success wp-theme-update-error\",function(c,d){var e,f,g=a('[data-slug=\"'+d.slug+'\"]');\"wp-\"+d.update+\"-update-success\"===c.type?j++:(f=d.pluginName?d.pluginName:g.find(\".column-primary strong\").text(),k++,l.push(f+\": \"+d.errorMessage)),g.find('input[name=\"checked[]\"]:checked').prop(\"checked\",!1),b.updates.adminNotice=b.template(\"wp-bulk-updates-admin-notice\"),b.updates.addAdminNotice({id:\"bulk-action-notice\",className:\"bulk-action-notice\",successes:j,errors:k,errorMessages:l,type:d.update}),e=a(\"#bulk-action-notice\").on(\"click\",\"button\",function(){a(this).toggleClass(\"bulk-action-errors-collapsed\").attr(\"aria-expanded\",!a(this).hasClass(\"bulk-action-errors-collapsed\")),e.find(\".bulk-action-errors\").toggleClass(\"hidden\")}),k>0&&!b.updates.queue.length&&a(\"html, body\").animate({scrollTop:0})}),d.on(\"wp-updates-notice-added\",function(){b.updates.adminNotice=b.template(\"wp-updates-admin-notice\")}),b.updates.queueChecker()}),j.length&&j.attr(\"aria-describedby\",\"live-search-desc\"),j.on(\"keyup input\",_.debounce(function(c,d){var f,g,h=a(\".plugin-install-search\");f={_ajax_nonce:b.updates.ajaxNonce,s:c.target.value,tab:\"search\",type:a(\"#typeselector\").val(),pagenow:pagenow},g=location.href.split(\"?\")[0]+\"?\"+a.param(_.omit(f,[\"_ajax_nonce\",\"pagenow\"])),\"keyup\"===c.type&&27===c.which&&(c.target.value=\"\"),b.updates.searchTerm===f.s&&\"typechange\"!==d||(e.empty(),b.updates.searchTerm=f.s,window.history&&window.history.replaceState&&window.history.replaceState(null,\"\",g),h.length||(h=a('<li class=\"plugin-install-search\" />').append(a(\"<a />\",{\"class\":\"current\",href:g,text:b.updates.l10n.searchResultsLabel})),a(\".wp-filter .filter-links .current\").removeClass(\"current\").parents(\".filter-links\").prepend(h),e.prev(\"p\").remove(),a(\".plugins-popular-tags-wrapper\").remove()),\"undefined\"!=typeof b.updates.searchRequest&&b.updates.searchRequest.abort(),a(\"body\").addClass(\"loading-content\"),b.updates.searchRequest=b.ajax.post(\"search-install-plugins\",f).done(function(c){a(\"body\").removeClass(\"loading-content\"),e.append(c.items),delete b.updates.searchRequest,0===c.count?b.a11y.speak(b.updates.l10n.noPluginsFound):b.a11y.speak(b.updates.l10n.pluginsFound.replace(\"%d\",c.count))}))},500)),i.length&&i.attr(\"aria-describedby\",\"live-search-desc\"),i.on(\"keyup input\",_.debounce(function(c){var d,e={_ajax_nonce:b.updates.ajaxNonce,s:c.target.value,pagenow:pagenow,plugin_status:\"all\"};\"keyup\"===c.type&&27===c.which&&(c.target.value=\"\"),b.updates.searchTerm!==e.s&&(b.updates.searchTerm=e.s,d=_.object(_.compact(_.map(location.search.slice(1).split(\"&\"),function(a){if(a)return a.split(\"=\")}))),e.plugin_status=d.plugin_status||\"all\",\nwindow.history&&window.history.replaceState&&window.history.replaceState(null,\"\",location.href.split(\"?\")[0]+\"?s=\"+e.s+\"&plugin_status=\"+e.plugin_status),\"undefined\"!=typeof b.updates.searchRequest&&b.updates.searchRequest.abort(),f.empty(),a(\"body\").addClass(\"loading-content\"),a(\".subsubsub .current\").removeClass(\"current\"),b.updates.searchRequest=b.ajax.post(\"search-plugins\",e).done(function(c){var d=a(\"<span />\").addClass(\"subtitle\").html(b.updates.l10n.searchResults.replace(\"%s\",_.escape(e.s))),g=a(\".wrap .subtitle\");e.s.length?g.length?g.replaceWith(d):a(\".wp-header-end\").before(d):(g.remove(),a(\".subsubsub .\"+e.plugin_status+\" a\").addClass(\"current\")),a(\"body\").removeClass(\"loading-content\"),f.append(c.items),delete b.updates.searchRequest,0===c.count?b.a11y.speak(b.updates.l10n.noPluginsFound):b.a11y.speak(b.updates.l10n.pluginsFound.replace(\"%d\",c.count))}))},500)),d.on(\"submit\",\".search-plugins\",function(b){b.preventDefault(),a(\"input.wp-filter-search\").trigger(\"input\")}),a(\"#typeselector\").on(\"change\",function(){var b=a('input[name=\"s\"]');b.val().length&&b.trigger(\"input\",\"typechange\")}),a(\"#plugin_update_from_iframe\").on(\"click\",function(b){var c,d=window.parent===window?null:window.parent;a.support.postMessage=!!window.postMessage,!1!==a.support.postMessage&&null!==d&&-1===window.parent.location.pathname.indexOf(\"update-core.php\")&&(b.preventDefault(),c={action:\"update-plugin\",data:{plugin:a(this).data(\"plugin\"),slug:a(this).data(\"slug\")}},d.postMessage(JSON.stringify(c),window.location.origin))}),a(\"#plugin_install_from_iframe\").on(\"click\",function(b){var c,d=window.parent===window?null:window.parent;a.support.postMessage=!!window.postMessage,!1!==a.support.postMessage&&null!==d&&-1===window.parent.location.pathname.indexOf(\"index.php\")&&(b.preventDefault(),c={action:\"install-plugin\",data:{slug:a(this).data(\"slug\")}},d.postMessage(JSON.stringify(c),window.location.origin))}),a(window).on(\"message\",function(c){var d,e=c.originalEvent,f=document.location.protocol+\"//\"+document.location.hostname;if(e.origin===f){try{d=a.parseJSON(e.data)}catch(g){return}if(\"undefined\"!=typeof d.action)switch(d.action){case\"decrementUpdateCount\":b.updates.decrementCount(d.upgradeType);break;case\"install-plugin\":case\"update-plugin\":window.tb_remove(),d.data=b.updates._addCallbacks(d.data,d.action),b.updates.queue.push(d),b.updates.queueChecker()}}}),a(window).on(\"beforeunload\",b.updates.beforeunload)})}(jQuery,window.wp,window._wpUpdatesSettings);", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-beta1-40716';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4601-20170510';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * Filesystem API: Top-level functionality\n *\n * Functions for reading, writing, modifying, and deleting files on the file system.\n * Includes functionality for theme-specific files as well as operations for uploading,\n * archiving, and rendering output when necessary.\n *\n * @package WordPress\n * @subpackage Filesystem\n * @since 2.3.0\n */\n\n/** The descriptions for theme files. */\n$wp_file_descriptions = array(\n\t'functions.php'         => __( 'Theme Functions' ),\n\t'header.php'            => __( 'Theme Header' ),\n\t'footer.php'            => __( 'Theme Footer' ),\n\t'sidebar.php'           => __( 'Sidebar' ),\n\t'comments.php'          => __( 'Comments' ),\n\t'searchform.php'        => __( 'Search Form' ),\n\t'404.php'               => __( '404 Template' ),\n\t'link.php'              => __( 'Links Template' ),\n\t// Archives\n\t'index.php'             => __( 'Main Index Template' ),\n\t'archive.php'           => __( 'Archives' ),\n\t'author.php'            => __( 'Author Template' ),\n\t'taxonomy.php'          => __( 'Taxonomy Template' ),\n\t'category.php'          => __( 'Category Template' ),\n\t'tag.php'               => __( 'Tag Template' ),\n\t'home.php'              => __( 'Posts Page' ),\n\t'search.php'            => __( 'Search Results' ),\n\t'date.php'              => __( 'Date Template' ),\n\t// Content\n\t'singular.php'          => __( 'Singular Template' ),\n\t'single.php'            => __( 'Single Post' ),\n\t'page.php'              => __( 'Single Page' ),\n\t'front-page.php'        => __( 'Static Front Page' ),\n\t// Attachments\n\t'attachment.php'        => __( 'Attachment Template' ),\n\t'image.php'             => __( 'Image Attachment Template' ),\n\t'video.php'             => __( 'Video Attachment Template' ),\n\t'audio.php'             => __( 'Audio Attachment Template' ),\n\t'application.php'       => __( 'Application Attachment Template' ),\n\t// Embeds\n\t'embed.php'             => __( 'Embed Template' ),\n\t'embed-404.php'         => __( 'Embed 404 Template' ),\n\t'embed-content.php'     => __( 'Embed Content Template' ),\n\t'header-embed.php'      => __( 'Embed Header Template' ),\n\t'footer-embed.php'      => __( 'Embed Footer Template' ),\n\t// Stylesheets\n\t'style.css'             => __( 'Stylesheet' ),\n\t'editor-style.css'      => __( 'Visual Editor Stylesheet' ),\n\t'editor-style-rtl.css'  => __( 'Visual Editor RTL Stylesheet' ),\n\t'rtl.css'               => __( 'RTL Stylesheet' ),\n\t// Other\n\t'my-hacks.php'          => __( 'my-hacks.php (legacy hacks support)' ),\n\t'.htaccess'             => __( '.htaccess (for rewrite rules )' ),\n\t// Deprecated files\n\t'wp-layout.css'         => __( 'Stylesheet' ),\n\t'wp-comments.php'       => __( 'Comments Template' ),\n\t'wp-comments-popup.php' => __( 'Popup Comments Template' ),\n\t'comments-popup.php'    => __( 'Popup Comments' ),\n);\n\n/**\n * Get the description for standard WordPress theme files and other various standard\n * WordPress files\n *\n * @since 1.5.0\n *\n * @global array $wp_file_descriptions\n * @param string $file Filesystem path or filename\n * @return string Description of file from $wp_file_descriptions or basename of $file if description doesn't exist.\n *                Appends 'Page Template' to basename of $file if the file is a page template\n */\nfunction get_file_description( $file ) {\n\tglobal $wp_file_descriptions, $allowed_files;\n\n\t$dirname = pathinfo( $file, PATHINFO_DIRNAME );\n\n\t$file_path = $allowed_files[ $file ];\n\tif ( isset( $wp_file_descriptions[ basename( $file ) ] ) && '.' === $dirname ) {\n\t\treturn $wp_file_descriptions[ basename( $file ) ];\n\t} elseif ( file_exists( $file_path ) && is_file( $file_path ) ) {\n\t\t$template_data = implode( '', file( $file_path ) );\n\t\tif ( preg_match( '|Template Name:(.*)$|mi', $template_data, $name ) ) {\n\t\t\treturn sprintf( __( '%s Page Template' ), _cleanup_header_comment( $name[1] ) );\n\t\t}\n\t}\n\n\treturn trim( basename( $file ) );\n}\n\n/**\n * Get the absolute filesystem path to the root of the WordPress installation\n *\n * @since 1.5.0\n *\n * @return string Full filesystem path to the root of the WordPress installation\n */\nfunction get_home_path() {\n\t$home    = set_url_scheme( get_option( 'home' ), 'http' );\n\t$siteurl = set_url_scheme( get_option( 'siteurl' ), 'http' );\n\tif ( ! empty( $home ) && 0 !== strcasecmp( $home, $siteurl ) ) {\n\t\t$wp_path_rel_to_home = str_ireplace( $home, '', $siteurl ); /* $siteurl - $home */\n\t\t$pos = strripos( str_replace( '\\\\', '/', $_SERVER['SCRIPT_FILENAME'] ), trailingslashit( $wp_path_rel_to_home ) );\n\t\t$home_path = substr( $_SERVER['SCRIPT_FILENAME'], 0, $pos );\n\t\t$home_path = trailingslashit( $home_path );\n\t} else {\n\t\t$home_path = ABSPATH;\n\t}\n\n\treturn str_replace( '\\\\', '/', $home_path );\n}\n\n/**\n * Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep.\n * The depth of the recursiveness can be controlled by the $levels param.\n *\n * @since 2.6.0\n *\n * @param string $folder Optional. Full path to folder. Default empty.\n * @param int    $levels Optional. Levels of folders to follow, Default 100 (PHP Loop limit).\n * @return bool|array False on failure, Else array of files\n */\nfunction list_files( $folder = '', $levels = 100 ) {\n\tif ( empty($folder) )\n\t\treturn false;\n\n\tif ( ! $levels )\n\t\treturn false;\n\n\t$files = array();\n\tif ( $dir = @opendir( $folder ) ) {\n\t\twhile (($file = readdir( $dir ) ) !== false ) {\n\t\t\tif ( in_array($file, array('.', '..') ) )\n\t\t\t\tcontinue;\n\t\t\tif ( is_dir( $folder . '/' . $file ) ) {\n\t\t\t\t$files2 = list_files( $folder . '/' . $file, $levels - 1);\n\t\t\t\tif ( $files2 )\n\t\t\t\t\t$files = array_merge($files, $files2 );\n\t\t\t\telse\n\t\t\t\t\t$files[] = $folder . '/' . $file . '/';\n\t\t\t} else {\n\t\t\t\t$files[] = $folder . '/' . $file;\n\t\t\t}\n\t\t}\n\t}\n\t@closedir( $dir );\n\treturn $files;\n}\n\n/**\n * Returns a filename of a Temporary unique file.\n * Please note that the calling function must unlink() this itself.\n *\n * The filename is based off the passed parameter or defaults to the current unix timestamp,\n * while the directory can either be passed as well, or by leaving it blank, default to a writable temporary directory.\n *\n * @since 2.6.0\n *\n * @param string $filename Optional. Filename to base the Unique file off. Default empty.\n * @param string $dir      Optional. Directory to store the file in. Default empty.\n * @return string a writable filename\n */\nfunction wp_tempnam( $filename = '', $dir = '' ) {\n\tif ( empty( $dir ) ) {\n\t\t$dir = get_temp_dir();\n\t}\n\n\tif ( empty( $filename ) || '.' == $filename || '/' == $filename || '\\\\' == $filename ) {\n\t\t$filename = time();\n\t}\n\n\t// Use the basename of the given file without the extension as the name for the temporary directory\n\t$temp_filename = basename( $filename );\n\t$temp_filename = preg_replace( '|\\.[^.]*$|', '', $temp_filename );\n\n\t// If the folder is falsey, use its parent directory name instead.\n\tif ( ! $temp_filename ) {\n\t\treturn wp_tempnam( dirname( $filename ), $dir );\n\t}\n\n\t// Suffix some random data to avoid filename conflicts\n\t$temp_filename .= '-' . wp_generate_password( 6, false );\n\t$temp_filename .= '.tmp';\n\t$temp_filename = $dir . wp_unique_filename( $dir, $temp_filename );\n\n\t$fp = @fopen( $temp_filename, 'x' );\n\tif ( ! $fp && is_writable( $dir ) && file_exists( $temp_filename ) ) {\n\t\treturn wp_tempnam( $filename, $dir );\n\t}\n\tif ( $fp ) {\n\t\tfclose( $fp );\n\t}\n\n\treturn $temp_filename;\n}\n\n/**\n * Make sure that the file that was requested to edit, is allowed to be edited\n *\n * Function will die if you are not allowed to edit the file\n *\n * @since 1.5.0\n *\n * @param string $file file the users is attempting to edit\n * @param array $allowed_files Array of allowed files to edit, $file must match an entry exactly\n * @return string|null\n */\nfunction validate_file_to_edit( $file, $allowed_files = '' ) {\n\t$code = validate_file( $file, $allowed_files );\n\n\tif (!$code )\n\t\treturn $file;\n\n\tswitch ( $code ) {\n\t\tcase 1 :\n\t\t\twp_die( __( 'Sorry, that file cannot be edited.' ) );\n\n\t\t// case 2 :\n\t\t// wp_die( __('Sorry, can&#8217;t call files with their real path.' ));\n\n\t\tcase 3 :\n\t\t\twp_die( __( 'Sorry, that file cannot be edited.' ) );\n\t}\n}\n\n/**\n * Handle PHP uploads in WordPress, sanitizing file names, checking extensions for mime type,\n * and moving the file to the appropriate directory within the uploads directory.\n *\n * @access private\n * @since 4.0.0\n *\n * @see wp_handle_upload_error\n *\n * @param array       $file      Reference to a single element of $_FILES. Call the function once for each uploaded file.\n * @param array|false $overrides An associative array of names => values to override default variables. Default false.\n * @param string      $time      Time formatted in 'yyyy/mm'.\n * @param string      $action    Expected value for $_POST['action'].\n * @return array On success, returns an associative array of file attributes. On failure, returns\n *               $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ).\n */\nfunction _wp_handle_upload( &$file, $overrides, $time, $action ) {\n\t// The default error handler.\n\tif ( ! function_exists( 'wp_handle_upload_error' ) ) {\n\t\tfunction wp_handle_upload_error( &$file, $message ) {\n\t\t\treturn array( 'error' => $message );\n\t\t}\n\t}\n\n\t/**\n\t * Filters the data for a file before it is uploaded to WordPress.\n\t *\n\t * The dynamic portion of the hook name, `$action`, refers to the post action.\n\t *\n\t * @since 2.9.0 as 'wp_handle_upload_prefilter'.\n\t * @since 4.0.0 Converted to a dynamic hook with `$action`.\n\t *\n\t * @param array $file An array of data for a single file.\n\t */\n\t$file = apply_filters( \"{$action}_prefilter\", $file );\n\n\t// You may define your own function and pass the name in $overrides['upload_error_handler']\n\t$upload_error_handler = 'wp_handle_upload_error';\n\tif ( isset( $overrides['upload_error_handler'] ) ) {\n\t\t$upload_error_handler = $overrides['upload_error_handler'];\n\t}\n\n\t// You may have had one or more 'wp_handle_upload_prefilter' functions error out the file. Handle that gracefully.\n\tif ( isset( $file['error'] ) && ! is_numeric( $file['error'] ) && $file['error'] ) {\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, $file['error'] ) );\n\t}\n\n\t// Install user overrides. Did we mention that this voids your warranty?\n\n\t// You may define your own function and pass the name in $overrides['unique_filename_callback']\n\t$unique_filename_callback = null;\n\tif ( isset( $overrides['unique_filename_callback'] ) ) {\n\t\t$unique_filename_callback = $overrides['unique_filename_callback'];\n\t}\n\n\t/*\n\t * This may not have orignially been intended to be overrideable,\n\t * but historically has been.\n\t */\n\tif ( isset( $overrides['upload_error_strings'] ) ) {\n\t\t$upload_error_strings = $overrides['upload_error_strings'];\n\t} else {\n\t\t// Courtesy of php.net, the strings that describe the error indicated in $_FILES[{form field}]['error'].\n\t\t$upload_error_strings = array(\n\t\t\tfalse,\n\t\t\t__( 'The uploaded file exceeds the upload_max_filesize directive in php.ini.' ),\n\t\t\t__( 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.' ),\n\t\t\t__( 'The uploaded file was only partially uploaded.' ),\n\t\t\t__( 'No file was uploaded.' ),\n\t\t\t'',\n\t\t\t__( 'Missing a temporary folder.' ),\n\t\t\t__( 'Failed to write file to disk.' ),\n\t\t\t__( 'File upload stopped by extension.' )\n\t\t);\n\t}\n\n\t// All tests are on by default. Most can be turned off by $overrides[{test_name}] = false;\n\t$test_form = isset( $overrides['test_form'] ) ? $overrides['test_form'] : true;\n\t$test_size = isset( $overrides['test_size'] ) ? $overrides['test_size'] : true;\n\n\t// If you override this, you must provide $ext and $type!!\n\t$test_type = isset( $overrides['test_type'] ) ? $overrides['test_type'] : true;\n\t$mimes = isset( $overrides['mimes'] ) ? $overrides['mimes'] : false;\n\n\t// A correct form post will pass this test.\n\tif ( $test_form && ( ! isset( $_POST['action'] ) || ( $_POST['action'] != $action ) ) ) {\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, __( 'Invalid form submission.' ) ) );\n\t}\n\t// A successful upload will pass this test. It makes no sense to override this one.\n\tif ( isset( $file['error'] ) && $file['error'] > 0 ) {\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, $upload_error_strings[ $file['error'] ] ) );\n\t}\n\n\t$test_file_size = 'wp_handle_upload' === $action ? $file['size'] : filesize( $file['tmp_name'] );\n\t// A non-empty file will pass this test.\n\tif ( $test_size && ! ( $test_file_size > 0 ) ) {\n\t\tif ( is_multisite() ) {\n\t\t\t$error_msg = __( 'File is empty. Please upload something more substantial.' );\n\t\t} else {\n\t\t\t$error_msg = __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.' );\n\t\t}\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, $error_msg ) );\n\t}\n\n\t// A properly uploaded file will pass this test. There should be no reason to override this one.\n\t$test_uploaded_file = 'wp_handle_upload' === $action ? @ is_uploaded_file( $file['tmp_name'] ) : @ is_file( $file['tmp_name'] );\n\tif ( ! $test_uploaded_file ) {\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, __( 'Specified file failed upload test.' ) ) );\n\t}\n\n\t// A correct MIME type will pass this test. Override $mimes or use the upload_mimes filter.\n\tif ( $test_type ) {\n\t\t$wp_filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'], $mimes );\n\t\t$ext = empty( $wp_filetype['ext'] ) ? '' : $wp_filetype['ext'];\n\t\t$type = empty( $wp_filetype['type'] ) ? '' : $wp_filetype['type'];\n\t\t$proper_filename = empty( $wp_filetype['proper_filename'] ) ? '' : $wp_filetype['proper_filename'];\n\n\t\t// Check to see if wp_check_filetype_and_ext() determined the filename was incorrect\n\t\tif ( $proper_filename ) {\n\t\t\t$file['name'] = $proper_filename;\n\t\t}\n\t\tif ( ( ! $type || !$ext ) && ! current_user_can( 'unfiltered_upload' ) ) {\n\t\t\treturn call_user_func_array( $upload_error_handler, array( &$file, __( 'Sorry, this file type is not permitted for security reasons.' ) ) );\n\t\t}\n\t\tif ( ! $type ) {\n\t\t\t$type = $file['type'];\n\t\t}\n\t} else {\n\t\t$type = '';\n\t}\n\n\t/*\n\t * A writable uploads dir will pass this test. Again, there's no point\n\t * overriding this one.\n\t */\n\tif ( ! ( ( $uploads = wp_upload_dir( $time ) ) && false === $uploads['error'] ) ) {\n\t\treturn call_user_func_array( $upload_error_handler, array( &$file, $uploads['error'] ) );\n\t}\n\n\t$filename = wp_unique_filename( $uploads['path'], $file['name'], $unique_filename_callback );\n\n\t// Move the file to the uploads dir.\n\t$new_file = $uploads['path'] . \"/$filename\";\n\tif ( 'wp_handle_upload' === $action ) {\n\t\t$move_new_file = @ move_uploaded_file( $file['tmp_name'], $new_file );\n\t} else {\n\t\t// use copy and unlink because rename breaks streams.\n\t\t$move_new_file = @ copy( $file['tmp_name'], $new_file );\n\t\tunlink( $file['tmp_name'] );\n\t}\n\n\tif ( false === $move_new_file ) {\n\t\tif ( 0 === strpos( $uploads['basedir'], ABSPATH ) ) {\n\t\t\t$error_path = str_replace( ABSPATH, '', $uploads['basedir'] ) . $uploads['subdir'];\n\t\t} else {\n\t\t\t$error_path = basename( $uploads['basedir'] ) . $uploads['subdir'];\n\t\t}\n\t\treturn $upload_error_handler( $file, sprintf( __('The uploaded file could not be moved to %s.' ), $error_path ) );\n\t}\n\n\t// Set correct file permissions.\n\t$stat = stat( dirname( $new_file ));\n\t$perms = $stat['mode'] & 0000666;\n\t@ chmod( $new_file, $perms );\n\n\t// Compute the URL.\n\t$url = $uploads['url'] . \"/$filename\";\n\n\tif ( is_multisite() ) {\n\t\tdelete_transient( 'dirsize_cache' );\n\t}\n\n\t/**\n\t * Filters the data array for the uploaded file.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param array  $upload {\n\t *     Array of upload data.\n\t *\n\t *     @type string $file Filename of the newly-uploaded file.\n\t *     @type string $url  URL of the uploaded file.\n\t *     @type string $type File type.\n\t * }\n\t * @param string $context The type of upload action. Values include 'upload' or 'sideload'.\n\t */\n\treturn apply_filters( 'wp_handle_upload', array(\n\t\t'file' => $new_file,\n\t\t'url'  => $url,\n\t\t'type' => $type\n\t), 'wp_handle_sideload' === $action ? 'sideload' : 'upload' );\n}\n\n/**\n * Wrapper for _wp_handle_upload().\n *\n * Passes the {@see 'wp_handle_upload'} action.\n *\n * @since 2.0.0\n *\n * @see _wp_handle_upload()\n *\n * @param array      $file      Reference to a single element of `$_FILES`. Call the function once for\n *                              each uploaded file.\n * @param array|bool $overrides Optional. An associative array of names=>values to override default\n *                              variables. Default false.\n * @param string     $time      Optional. Time formatted in 'yyyy/mm'. Default null.\n * @return array On success, returns an associative array of file attributes. On failure, returns\n *               $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ).\n */\nfunction wp_handle_upload( &$file, $overrides = false, $time = null ) {\n\t/*\n\t *  $_POST['action'] must be set and its value must equal $overrides['action']\n\t *  or this:\n\t */\n\t$action = 'wp_handle_upload';\n\tif ( isset( $overrides['action'] ) ) {\n\t\t$action = $overrides['action'];\n\t}\n\n\treturn _wp_handle_upload( $file, $overrides, $time, $action );\n}\n\n/**\n * Wrapper for _wp_handle_upload().\n *\n * Passes the {@see 'wp_handle_sideload'} action.\n *\n * @since 2.6.0\n *\n * @see _wp_handle_upload()\n *\n * @param array      $file      An array similar to that of a PHP `$_FILES` POST array\n * @param array|bool $overrides Optional. An associative array of names=>values to override default\n *                              variables. Default false.\n * @param string     $time      Optional. Time formatted in 'yyyy/mm'. Default null.\n * @return array On success, returns an associative array of file attributes. On failure, returns\n *               $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ).\n */\nfunction wp_handle_sideload( &$file, $overrides = false, $time = null ) {\n\t/*\n\t *  $_POST['action'] must be set and its value must equal $overrides['action']\n\t *  or this:\n\t */\n\t$action = 'wp_handle_sideload';\n\tif ( isset( $overrides['action'] ) ) {\n\t\t$action = $overrides['action'];\n\t}\n\treturn _wp_handle_upload( $file, $overrides, $time, $action );\n}\n\n\n/**\n * Downloads a URL to a local temporary file using the WordPress HTTP Class.\n * Please note, That the calling function must unlink() the file.\n *\n * @since 2.5.0\n *\n * @param string $url the URL of the file to download\n * @param int $timeout The timeout for the request to download the file default 300 seconds\n * @return mixed WP_Error on failure, string Filename on success.\n */\nfunction download_url( $url, $timeout = 300 ) {\n\t//WARNING: The file is not automatically deleted, The script must unlink() the file.\n\tif ( ! $url )\n\t\treturn new WP_Error('http_no_url', __('Invalid URL Provided.'));\n\n\t$url_filename = basename( parse_url( $url, PHP_URL_PATH ) );\n\n\t$tmpfname = wp_tempnam( $url_filename );\n\tif ( ! $tmpfname )\n\t\treturn new WP_Error('http_no_file', __('Could not create Temporary file.'));\n\n\t$response = wp_safe_remote_get( $url, array( 'timeout' => $timeout, 'stream' => true, 'filename' => $tmpfname ) );\n\n\tif ( is_wp_error( $response ) ) {\n\t\tunlink( $tmpfname );\n\t\treturn $response;\n\t}\n\n\tif ( 200 != wp_remote_retrieve_response_code( $response ) ){\n\t\tunlink( $tmpfname );\n\t\treturn new WP_Error( 'http_404', trim( wp_remote_retrieve_response_message( $response ) ) );\n\t}\n\n\t$content_md5 = wp_remote_retrieve_header( $response, 'content-md5' );\n\tif ( $content_md5 ) {\n\t\t$md5_check = verify_file_md5( $tmpfname, $content_md5 );\n\t\tif ( is_wp_error( $md5_check ) ) {\n\t\t\tunlink( $tmpfname );\n\t\t\treturn $md5_check;\n\t\t}\n\t}\n\n\treturn $tmpfname;\n}\n\n/**\n * Calculates and compares the MD5 of a file to its expected value.\n *\n * @since 3.7.0\n *\n * @param string $filename The filename to check the MD5 of.\n * @param string $expected_md5 The expected MD5 of the file, either a base64 encoded raw md5, or a hex-encoded md5\n * @return bool|object WP_Error on failure, true on success, false when the MD5 format is unknown/unexpected\n */\nfunction verify_file_md5( $filename, $expected_md5 ) {\n\tif ( 32 == strlen( $expected_md5 ) )\n\t\t$expected_raw_md5 = pack( 'H*', $expected_md5 );\n\telseif ( 24 == strlen( $expected_md5 ) )\n\t\t$expected_raw_md5 = base64_decode( $expected_md5 );\n\telse\n\t\treturn false; // unknown format\n\n\t$file_md5 = md5_file( $filename, true );\n\n\tif ( $file_md5 === $expected_raw_md5 )\n\t\treturn true;\n\n\treturn new WP_Error( 'md5_mismatch', sprintf( __( 'The checksum of the file (%1$s) does not match the expected checksum value (%2$s).' ), bin2hex( $file_md5 ), bin2hex( $expected_raw_md5 ) ) );\n}\n\n/**\n * Unzips a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction.\n * Assumes that WP_Filesystem() has already been called and set up. Does not extract a root-level __MACOSX directory, if present.\n *\n * Attempts to increase the PHP Memory limit to 256M before uncompressing,\n * However, The most memory required shouldn't be much larger than the Archive itself.\n *\n * @since 2.5.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $file Full path and filename of zip archive\n * @param string $to Full path on the filesystem to extract archive to\n * @return mixed WP_Error on failure, True on success\n */\nfunction unzip_file($file, $to) {\n\tglobal $wp_filesystem;\n\n\tif ( ! $wp_filesystem || !is_object($wp_filesystem) )\n\t\treturn new WP_Error('fs_unavailable', __('Could not access filesystem.'));\n\n\t// Unzip can use a lot of memory, but not this much hopefully.\n\twp_raise_memory_limit( 'admin' );\n\n\t$needed_dirs = array();\n\t$to = trailingslashit($to);\n\n\t// Determine any parent dir's needed (of the upgrade directory)\n\tif ( ! $wp_filesystem->is_dir($to) ) { //Only do parents if no children exist\n\t\t$path = preg_split('![/\\\\\\]!', untrailingslashit($to));\n\t\tfor ( $i = count($path); $i >= 0; $i-- ) {\n\t\t\tif ( empty($path[$i]) )\n\t\t\t\tcontinue;\n\n\t\t\t$dir = implode('/', array_slice($path, 0, $i+1) );\n\t\t\tif ( preg_match('!^[a-z]:$!i', $dir) ) // Skip it if it looks like a Windows Drive letter.\n\t\t\t\tcontinue;\n\n\t\t\tif ( ! $wp_filesystem->is_dir($dir) )\n\t\t\t\t$needed_dirs[] = $dir;\n\t\t\telse\n\t\t\t\tbreak; // A folder exists, therefor, we dont need the check the levels below this\n\t\t}\n\t}\n\n\t/**\n\t * Filters whether to use ZipArchive to unzip archives.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param bool $ziparchive Whether to use ZipArchive. Default true.\n\t */\n\tif ( class_exists( 'ZipArchive', false ) && apply_filters( 'unzip_file_use_ziparchive', true ) ) {\n\t\t$result = _unzip_file_ziparchive($file, $to, $needed_dirs);\n\t\tif ( true === $result ) {\n\t\t\treturn $result;\n\t\t} elseif ( is_wp_error($result) ) {\n\t\t\tif ( 'incompatible_archive' != $result->get_error_code() )\n\t\t\t\treturn $result;\n\t\t}\n\t}\n\t// Fall through to PclZip if ZipArchive is not available, or encountered an error opening the file.\n\treturn _unzip_file_pclzip($file, $to, $needed_dirs);\n}\n\n/**\n * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the ZipArchive class.\n * Assumes that WP_Filesystem() has already been called and set up.\n *\n * @since 3.0.0\n * @see unzip_file\n * @access private\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $file Full path and filename of zip archive\n * @param string $to Full path on the filesystem to extract archive to\n * @param array $needed_dirs A partial list of required folders needed to be created.\n * @return mixed WP_Error on failure, True on success\n */\nfunction _unzip_file_ziparchive($file, $to, $needed_dirs = array() ) {\n\tglobal $wp_filesystem;\n\n\t$z = new ZipArchive();\n\n\t$zopen = $z->open( $file, ZIPARCHIVE::CHECKCONS );\n\tif ( true !== $zopen )\n\t\treturn new WP_Error( 'incompatible_archive', __( 'Incompatible Archive.' ), array( 'ziparchive_error' => $zopen ) );\n\n\t$uncompressed_size = 0;\n\n\tfor ( $i = 0; $i < $z->numFiles; $i++ ) {\n\t\tif ( ! $info = $z->statIndex($i) )\n\t\t\treturn new WP_Error( 'stat_failed_ziparchive', __( 'Could not retrieve file from archive.' ) );\n\n\t\tif ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Skip the OS X-created __MACOSX directory\n\t\t\tcontinue;\n\n\t\t$uncompressed_size += $info['size'];\n\n\t\tif ( '/' === substr( $info['name'], -1 ) ) {\n\t\t\t// Directory.\n\t\t\t$needed_dirs[] = $to . untrailingslashit( $info['name'] );\n\t\t} elseif ( '.' !== $dirname = dirname( $info['name'] ) ) {\n\t\t\t// Path to a file.\n\t\t\t$needed_dirs[] = $to . untrailingslashit( $dirname );\n\t\t}\n\t}\n\n\t/*\n\t * disk_free_space() could return false. Assume that any falsey value is an error.\n\t * A disk that has zero free bytes has bigger problems.\n\t * Require we have enough space to unzip the file and copy its contents, with a 10% buffer.\n\t */\n\tif ( wp_doing_cron() ) {\n\t\t$available_space = @disk_free_space( WP_CONTENT_DIR );\n\t\tif ( $available_space && ( $uncompressed_size * 2.1 ) > $available_space )\n\t\t\treturn new WP_Error( 'disk_full_unzip_file', __( 'Could not copy files. You may have run out of disk space.' ), compact( 'uncompressed_size', 'available_space' ) );\n\t}\n\n\t$needed_dirs = array_unique($needed_dirs);\n\tforeach ( $needed_dirs as $dir ) {\n\t\t// Check the parent folders of the folders all exist within the creation array.\n\t\tif ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)\n\t\t\tcontinue;\n\t\tif ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it\n\t\t\tcontinue;\n\n\t\t$parent_folder = dirname($dir);\n\t\twhile ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {\n\t\t\t$needed_dirs[] = $parent_folder;\n\t\t\t$parent_folder = dirname($parent_folder);\n\t\t}\n\t}\n\tasort($needed_dirs);\n\n\t// Create those directories if need be:\n\tforeach ( $needed_dirs as $_dir ) {\n\t\t// Only check to see if the Dir exists upon creation failure. Less I/O this way.\n\t\tif ( ! $wp_filesystem->mkdir( $_dir, FS_CHMOD_DIR ) && ! $wp_filesystem->is_dir( $_dir ) ) {\n\t\t\treturn new WP_Error( 'mkdir_failed_ziparchive', __( 'Could not create directory.' ), substr( $_dir, strlen( $to ) ) );\n\t\t}\n\t}\n\tunset($needed_dirs);\n\n\tfor ( $i = 0; $i < $z->numFiles; $i++ ) {\n\t\tif ( ! $info = $z->statIndex($i) )\n\t\t\treturn new WP_Error( 'stat_failed_ziparchive', __( 'Could not retrieve file from archive.' ) );\n\n\t\tif ( '/' == substr($info['name'], -1) ) // directory\n\t\t\tcontinue;\n\n\t\tif ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files\n\t\t\tcontinue;\n\n\t\t$contents = $z->getFromIndex($i);\n\t\tif ( false === $contents )\n\t\t\treturn new WP_Error( 'extract_failed_ziparchive', __( 'Could not extract file from archive.' ), $info['name'] );\n\n\t\tif ( ! $wp_filesystem->put_contents( $to . $info['name'], $contents, FS_CHMOD_FILE) )\n\t\t\treturn new WP_Error( 'copy_failed_ziparchive', __( 'Could not copy file.' ), $info['name'] );\n\t}\n\n\t$z->close();\n\n\treturn true;\n}\n\n/**\n * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the PclZip library.\n * Assumes that WP_Filesystem() has already been called and set up.\n *\n * @since 3.0.0\n * @see unzip_file\n * @access private\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $file Full path and filename of zip archive\n * @param string $to Full path on the filesystem to extract archive to\n * @param array $needed_dirs A partial list of required folders needed to be created.\n * @return mixed WP_Error on failure, True on success\n */\nfunction _unzip_file_pclzip($file, $to, $needed_dirs = array()) {\n\tglobal $wp_filesystem;\n\n\tmbstring_binary_safe_encoding();\n\n\trequire_once(ABSPATH . 'wp-admin/includes/class-pclzip.php');\n\n\t$archive = new PclZip($file);\n\n\t$archive_files = $archive->extract(PCLZIP_OPT_EXTRACT_AS_STRING);\n\n\treset_mbstring_encoding();\n\n\t// Is the archive valid?\n\tif ( !is_array($archive_files) )\n\t\treturn new WP_Error('incompatible_archive', __('Incompatible Archive.'), $archive->errorInfo(true));\n\n\tif ( 0 == count($archive_files) )\n\t\treturn new WP_Error( 'empty_archive_pclzip', __( 'Empty archive.' ) );\n\n\t$uncompressed_size = 0;\n\n\t// Determine any children directories needed (From within the archive)\n\tforeach ( $archive_files as $file ) {\n\t\tif ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Skip the OS X-created __MACOSX directory\n\t\t\tcontinue;\n\n\t\t$uncompressed_size += $file['size'];\n\n\t\t$needed_dirs[] = $to . untrailingslashit( $file['folder'] ? $file['filename'] : dirname($file['filename']) );\n\t}\n\n\t/*\n\t * disk_free_space() could return false. Assume that any falsey value is an error.\n\t * A disk that has zero free bytes has bigger problems.\n\t * Require we have enough space to unzip the file and copy its contents, with a 10% buffer.\n\t */\n\tif ( wp_doing_cron() ) {\n\t\t$available_space = @disk_free_space( WP_CONTENT_DIR );\n\t\tif ( $available_space && ( $uncompressed_size * 2.1 ) > $available_space )\n\t\t\treturn new WP_Error( 'disk_full_unzip_file', __( 'Could not copy files. You may have run out of disk space.' ), compact( 'uncompressed_size', 'available_space' ) );\n\t}\n\n\t$needed_dirs = array_unique($needed_dirs);\n\tforeach ( $needed_dirs as $dir ) {\n\t\t// Check the parent folders of the folders all exist within the creation array.\n\t\tif ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)\n\t\t\tcontinue;\n\t\tif ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it\n\t\t\tcontinue;\n\n\t\t$parent_folder = dirname($dir);\n\t\twhile ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {\n\t\t\t$needed_dirs[] = $parent_folder;\n\t\t\t$parent_folder = dirname($parent_folder);\n\t\t}\n\t}\n\tasort($needed_dirs);\n\n\t// Create those directories if need be:\n\tforeach ( $needed_dirs as $_dir ) {\n\t\t// Only check to see if the dir exists upon creation failure. Less I/O this way.\n\t\tif ( ! $wp_filesystem->mkdir( $_dir, FS_CHMOD_DIR ) && ! $wp_filesystem->is_dir( $_dir ) )\n\t\t\treturn new WP_Error( 'mkdir_failed_pclzip', __( 'Could not create directory.' ), substr( $_dir, strlen( $to ) ) );\n\t}\n\tunset($needed_dirs);\n\n\t// Extract the files from the zip\n\tforeach ( $archive_files as $file ) {\n\t\tif ( $file['folder'] )\n\t\t\tcontinue;\n\n\t\tif ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files\n\t\t\tcontinue;\n\n\t\tif ( ! $wp_filesystem->put_contents( $to . $file['filename'], $file['content'], FS_CHMOD_FILE) )\n\t\t\treturn new WP_Error( 'copy_failed_pclzip', __( 'Could not copy file.' ), $file['filename'] );\n\t}\n\treturn true;\n}\n\n/**\n * Copies a directory from one location to another via the WordPress Filesystem Abstraction.\n * Assumes that WP_Filesystem() has already been called and setup.\n *\n * @since 2.5.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param string $from source directory\n * @param string $to destination directory\n * @param array $skip_list a list of files/folders to skip copying\n * @return mixed WP_Error on failure, True on success.\n */\nfunction copy_dir($from, $to, $skip_list = array() ) {\n\tglobal $wp_filesystem;\n\n\t$dirlist = $wp_filesystem->dirlist($from);\n\n\t$from = trailingslashit($from);\n\t$to = trailingslashit($to);\n\n\tforeach ( (array) $dirlist as $filename => $fileinfo ) {\n\t\tif ( in_array( $filename, $skip_list ) )\n\t\t\tcontinue;\n\n\t\tif ( 'f' == $fileinfo['type'] ) {\n\t\t\tif ( ! $wp_filesystem->copy($from . $filename, $to . $filename, true, FS_CHMOD_FILE) ) {\n\t\t\t\t// If copy failed, chmod file to 0644 and try again.\n\t\t\t\t$wp_filesystem->chmod( $to . $filename, FS_CHMOD_FILE );\n\t\t\t\tif ( ! $wp_filesystem->copy($from . $filename, $to . $filename, true, FS_CHMOD_FILE) )\n\t\t\t\t\treturn new WP_Error( 'copy_failed_copy_dir', __( 'Could not copy file.' ), $to . $filename );\n\t\t\t}\n\t\t} elseif ( 'd' == $fileinfo['type'] ) {\n\t\t\tif ( !$wp_filesystem->is_dir($to . $filename) ) {\n\t\t\t\tif ( !$wp_filesystem->mkdir($to . $filename, FS_CHMOD_DIR) )\n\t\t\t\t\treturn new WP_Error( 'mkdir_failed_copy_dir', __( 'Could not create directory.' ), $to . $filename );\n\t\t\t}\n\n\t\t\t// generate the $sub_skip_list for the subdirectory as a sub-set of the existing $skip_list\n\t\t\t$sub_skip_list = array();\n\t\t\tforeach ( $skip_list as $skip_item ) {\n\t\t\t\tif ( 0 === strpos( $skip_item, $filename . '/' ) )\n\t\t\t\t\t$sub_skip_list[] = preg_replace( '!^' . preg_quote( $filename, '!' ) . '/!i', '', $skip_item );\n\t\t\t}\n\n\t\t\t$result = copy_dir($from . $filename, $to . $filename, $sub_skip_list);\n\t\t\tif ( is_wp_error($result) )\n\t\t\t\treturn $result;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Initialises and connects the WordPress Filesystem Abstraction classes.\n * This function will include the chosen transport and attempt connecting.\n *\n * Plugins may add extra transports, And force WordPress to use them by returning\n * the filename via the {@see 'filesystem_method_file'} filter.\n *\n * @since 2.5.0\n *\n * @global WP_Filesystem_Base $wp_filesystem Subclass\n *\n * @param array|false  $args                         Optional. Connection args, These are passed directly to\n *                                                   the `WP_Filesystem_*()` classes. Default false.\n * @param string|false $context                      Optional. Context for get_filesystem_method(). Default false.\n * @param bool         $allow_relaxed_file_ownership Optional. Whether to allow Group/World writable. Default false.\n * @return null|bool false on failure, true on success.\n */\nfunction WP_Filesystem( $args = false, $context = false, $allow_relaxed_file_ownership = false ) {\n\tglobal $wp_filesystem;\n\n\trequire_once(ABSPATH . 'wp-admin/includes/class-wp-filesystem-base.php');\n\n\t$method = get_filesystem_method( $args, $context, $allow_relaxed_file_ownership );\n\n\tif ( ! $method )\n\t\treturn false;\n\n\tif ( ! class_exists( \"WP_Filesystem_$method\" ) ) {\n\n\t\t/**\n\t\t * Filters the path for a specific filesystem method class file.\n\t\t *\n\t\t * @since 2.6.0\n\t\t *\n\t\t * @see get_filesystem_method()\n\t\t *\n\t\t * @param string $path   Path to the specific filesystem method class file.\n\t\t * @param string $method The filesystem method to use.\n\t\t */\n\t\t$abstraction_file = apply_filters( 'filesystem_method_file', ABSPATH . 'wp-admin/includes/class-wp-filesystem-' . $method . '.php', $method );\n\n\t\tif ( ! file_exists($abstraction_file) )\n\t\t\treturn;\n\n\t\trequire_once($abstraction_file);\n\t}\n\t$method = \"WP_Filesystem_$method\";\n\n\t$wp_filesystem = new $method($args);\n\n\t//Define the timeouts for the connections. Only available after the construct is called to allow for per-transport overriding of the default.\n\tif ( ! defined('FS_CONNECT_TIMEOUT') )\n\t\tdefine('FS_CONNECT_TIMEOUT', 30);\n\tif ( ! defined('FS_TIMEOUT') )\n\t\tdefine('FS_TIMEOUT', 30);\n\n\tif ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )\n\t\treturn false;\n\n\tif ( !$wp_filesystem->connect() )\n\t\treturn false; //There was an error connecting to the server.\n\n\t// Set the permission constants if not already set.\n\tif ( ! defined('FS_CHMOD_DIR') )\n\t\tdefine('FS_CHMOD_DIR', ( fileperms( ABSPATH ) & 0777 | 0755 ) );\n\tif ( ! defined('FS_CHMOD_FILE') )\n\t\tdefine('FS_CHMOD_FILE', ( fileperms( ABSPATH . 'index.php' ) & 0777 | 0644 ) );\n\n\treturn true;\n}\n\n/**\n * Determines which method to use for reading, writing, modifying, or deleting\n * files on the filesystem.\n *\n * The priority of the transports are: Direct, SSH2, FTP PHP Extension, FTP Sockets\n * (Via Sockets class, or `fsockopen()`). Valid values for these are: 'direct', 'ssh2',\n * 'ftpext' or 'ftpsockets'.\n *\n * The return value can be overridden by defining the `FS_METHOD` constant in `wp-config.php`,\n * or filtering via {@see 'filesystem_method'}.\n *\n * @link https://codex.wordpress.org/Editing_wp-config.php#WordPress_Upgrade_Constants\n *\n * Plugins may define a custom transport handler, See WP_Filesystem().\n *\n * @since 2.5.0\n *\n * @global callable $_wp_filesystem_direct_method\n *\n * @param array  $args                         Optional. Connection details. Default empty array.\n * @param string $context                      Optional. Full path to the directory that is tested\n *                                             for being writable. Default empty.\n * @param bool   $allow_relaxed_file_ownership Optional. Whether to allow Group/World writable.\n *                                             Default false.\n * @return string The transport to use, see description for valid return values.\n */\nfunction get_filesystem_method( $args = array(), $context = '', $allow_relaxed_file_ownership = false ) {\n\t$method = defined('FS_METHOD') ? FS_METHOD : false; // Please ensure that this is either 'direct', 'ssh2', 'ftpext' or 'ftpsockets'\n\n\tif ( ! $context ) {\n\t\t$context = WP_CONTENT_DIR;\n\t}\n\n\t// If the directory doesn't exist (wp-content/languages) then use the parent directory as we'll create it.\n\tif ( WP_LANG_DIR == $context && ! is_dir( $context ) ) {\n\t\t$context = dirname( $context );\n\t}\n\n\t$context = trailingslashit( $context );\n\n\tif ( ! $method ) {\n\n\t\t$temp_file_name = $context . 'temp-write-test-' . time();\n\t\t$temp_handle = @fopen($temp_file_name, 'w');\n\t\tif ( $temp_handle ) {\n\n\t\t\t// Attempt to determine the file owner of the WordPress files, and that of newly created files\n\t\t\t$wp_file_owner = $temp_file_owner = false;\n\t\t\tif ( function_exists('fileowner') ) {\n\t\t\t\t$wp_file_owner = @fileowner( __FILE__ );\n\t\t\t\t$temp_file_owner = @fileowner( $temp_file_name );\n\t\t\t}\n\n\t\t\tif ( $wp_file_owner !== false && $wp_file_owner === $temp_file_owner ) {\n\t\t\t\t// WordPress is creating files as the same owner as the WordPress files,\n\t\t\t\t// this means it's safe to modify & create new files via PHP.\n\t\t\t\t$method = 'direct';\n\t\t\t\t$GLOBALS['_wp_filesystem_direct_method'] = 'file_owner';\n\t\t\t} elseif ( $allow_relaxed_file_ownership ) {\n\t\t\t\t// The $context directory is writable, and $allow_relaxed_file_ownership is set, this means we can modify files\n\t\t\t\t// safely in this directory. This mode doesn't create new files, only alter existing ones.\n\t\t\t\t$method = 'direct';\n\t\t\t\t$GLOBALS['_wp_filesystem_direct_method'] = 'relaxed_ownership';\n\t\t\t}\n\n\t\t\t@fclose($temp_handle);\n\t\t\t@unlink($temp_file_name);\n\t\t}\n \t}\n\n\tif ( ! $method && isset($args['connection_type']) && 'ssh' == $args['connection_type'] && extension_loaded('ssh2') && function_exists('stream_get_contents') ) $method = 'ssh2';\n\tif ( ! $method && extension_loaded('ftp') ) $method = 'ftpext';\n\tif ( ! $method && ( extension_loaded('sockets') || function_exists('fsockopen') ) ) $method = 'ftpsockets'; //Sockets: Socket extension; PHP Mode: FSockopen / fwrite / fread\n\n\t/**\n\t * Filters the filesystem method to use.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param string $method  Filesystem method to return.\n\t * @param array  $args    An array of connection details for the method.\n\t * @param string $context Full path to the directory that is tested for being writable.\n\t * @param bool   $allow_relaxed_file_ownership Whether to allow Group/World writable.\n\t */\n\treturn apply_filters( 'filesystem_method', $method, $args, $context, $allow_relaxed_file_ownership );\n}\n\n/**\n * Displays a form to the user to request for their FTP/SSH details in order\n * to connect to the filesystem.\n *\n * All chosen/entered details are saved, excluding the password.\n *\n * Hostnames may be in the form of hostname:portnumber (eg: wordpress.org:2467)\n * to specify an alternate FTP/SSH port.\n *\n * Plugins may override this form by returning true|false via the {@see 'request_filesystem_credentials'} filter.\n *\n * @since 2.5.0\n * @since 4.6.0 The `$context` parameter default changed from `false` to an empty string.\n *\n * @global string $pagenow\n *\n * @param string $form_post                    The URL to post the form to.\n * @param string $type                         Optional. Chosen type of filesystem. Default empty.\n * @param bool   $error                        Optional. Whether the current request has failed to connect.\n *                                             Default false.\n * @param string $context                      Optional. Full path to the directory that is tested for being\n *                                             writable. Default empty.\n * @param array  $extra_fields                 Optional. Extra `POST` fields to be checked for inclusion in\n *                                             the post. Default null.\n * @param bool   $allow_relaxed_file_ownership Optional. Whether to allow Group/World writable. Default false.\n *\n * @return bool False on failure, true on success.\n */\nfunction request_filesystem_credentials( $form_post, $type = '', $error = false, $context = '', $extra_fields = null, $allow_relaxed_file_ownership = false ) {\n\tglobal $pagenow;\n\n\t/**\n\t * Filters the filesystem credentials form output.\n\t *\n\t * Returning anything other than an empty string will effectively short-circuit\n\t * output of the filesystem credentials form, returning that value instead.\n\t *\n\t * @since 2.5.0\n\t * @since 4.6.0 The `$context` parameter default changed from `false` to an empty string.\n\t *\n\t * @param mixed  $output                       Form output to return instead. Default empty.\n\t * @param string $form_post                    The URL to post the form to.\n\t * @param string $type                         Chosen type of filesystem.\n\t * @param bool   $error                        Whether the current request has failed to connect.\n\t *                                             Default false.\n\t * @param string $context                      Full path to the directory that is tested for\n\t *                                             being writable.\n\t * @param bool   $allow_relaxed_file_ownership Whether to allow Group/World writable.\n\t *                                             Default false.\n\t * @param array  $extra_fields                 Extra POST fields.\n\t */\n\t$req_cred = apply_filters( 'request_filesystem_credentials', '', $form_post, $type, $error, $context, $extra_fields, $allow_relaxed_file_ownership );\n\tif ( '' !== $req_cred )\n\t\treturn $req_cred;\n\n\tif ( empty($type) ) {\n\t\t$type = get_filesystem_method( array(), $context, $allow_relaxed_file_ownership );\n\t}\n\n\tif ( 'direct' == $type )\n\t\treturn true;\n\n\tif ( is_null( $extra_fields ) )\n\t\t$extra_fields = array( 'version', 'locale' );\n\n\t$credentials = get_option('ftp_credentials', array( 'hostname' => '', 'username' => ''));\n\n\t$submitted_form = wp_unslash( $_POST );\n\n\t// Verify nonce, or unset submitted form field values on failure\n\tif ( ! isset( $_POST['_fs_nonce'] ) || ! wp_verify_nonce( $_POST['_fs_nonce'], 'filesystem-credentials' ) ) {\n\t\tunset(\n\t\t\t$submitted_form['hostname'],\n\t\t\t$submitted_form['username'],\n\t\t\t$submitted_form['password'],\n\t\t\t$submitted_form['public_key'],\n\t\t\t$submitted_form['private_key'],\n\t\t\t$submitted_form['connection_type']\n\t\t);\n\t}\n\n\t// If defined, set it to that, Else, If POST'd, set it to that, If not, Set it to whatever it previously was(saved details in option)\n\t$credentials['hostname'] = defined('FTP_HOST') ? FTP_HOST : (!empty($submitted_form['hostname']) ? $submitted_form['hostname'] : $credentials['hostname']);\n\t$credentials['username'] = defined('FTP_USER') ? FTP_USER : (!empty($submitted_form['username']) ? $submitted_form['username'] : $credentials['username']);\n\t$credentials['password'] = defined('FTP_PASS') ? FTP_PASS : (!empty($submitted_form['password']) ? $submitted_form['password'] : '');\n\n\t// Check to see if we are setting the public/private keys for ssh\n\t$credentials['public_key'] = defined('FTP_PUBKEY') ? FTP_PUBKEY : (!empty($submitted_form['public_key']) ? $submitted_form['public_key'] : '');\n\t$credentials['private_key'] = defined('FTP_PRIKEY') ? FTP_PRIKEY : (!empty($submitted_form['private_key']) ? $submitted_form['private_key'] : '');\n\n\t// Sanitize the hostname, Some people might pass in odd-data:\n\t$credentials['hostname'] = preg_replace('|\\w+://|', '', $credentials['hostname']); //Strip any schemes off\n\n\tif ( strpos($credentials['hostname'], ':') ) {\n\t\tlist( $credentials['hostname'], $credentials['port'] ) = explode(':', $credentials['hostname'], 2);\n\t\tif ( ! is_numeric($credentials['port']) )\n\t\t\tunset($credentials['port']);\n\t} else {\n\t\tunset($credentials['port']);\n\t}\n\n\tif ( ( defined( 'FTP_SSH' ) && FTP_SSH ) || ( defined( 'FS_METHOD' ) && 'ssh2' == FS_METHOD ) ) {\n\t\t$credentials['connection_type'] = 'ssh';\n\t} elseif ( ( defined( 'FTP_SSL' ) && FTP_SSL ) && 'ftpext' == $type ) { //Only the FTP Extension understands SSL\n\t\t$credentials['connection_type'] = 'ftps';\n\t} elseif ( ! empty( $submitted_form['connection_type'] ) ) {\n\t\t$credentials['connection_type'] = $submitted_form['connection_type'];\n\t} elseif ( ! isset( $credentials['connection_type'] ) ) { //All else fails (And it's not defaulted to something else saved), Default to FTP\n\t\t$credentials['connection_type'] = 'ftp';\n\t}\n\tif ( ! $error &&\n\t\t\t(\n\t\t\t\t( !empty($credentials['password']) && !empty($credentials['username']) && !empty($credentials['hostname']) ) ||\n\t\t\t\t( 'ssh' == $credentials['connection_type'] && !empty($credentials['public_key']) && !empty($credentials['private_key']) )\n\t\t\t) ) {\n\t\t$stored_credentials = $credentials;\n\t\tif ( !empty($stored_credentials['port']) ) //save port as part of hostname to simplify above code.\n\t\t\t$stored_credentials['hostname'] .= ':' . $stored_credentials['port'];\n\n\t\tunset($stored_credentials['password'], $stored_credentials['port'], $stored_credentials['private_key'], $stored_credentials['public_key']);\n\t\tif ( ! wp_installing() ) {\n\t\t\tupdate_option( 'ftp_credentials', $stored_credentials );\n\t\t}\n\t\treturn $credentials;\n\t}\n\t$hostname = isset( $credentials['hostname'] ) ? $credentials['hostname'] : '';\n\t$username = isset( $credentials['username'] ) ? $credentials['username'] : '';\n\t$public_key = isset( $credentials['public_key'] ) ? $credentials['public_key'] : '';\n\t$private_key = isset( $credentials['private_key'] ) ? $credentials['private_key'] : '';\n\t$port = isset( $credentials['port'] ) ? $credentials['port'] : '';\n\t$connection_type = isset( $credentials['connection_type'] ) ? $credentials['connection_type'] : '';\n\n\tif ( $error ) {\n\t\t$error_string = __('<strong>ERROR:</strong> There was an error connecting to the server, Please verify the settings are correct.');\n\t\tif ( is_wp_error($error) )\n\t\t\t$error_string = esc_html( $error->get_error_message() );\n\t\techo '<div id=\"message\" class=\"error\"><p>' . $error_string . '</p></div>';\n\t}\n\n\t$types = array();\n\tif ( extension_loaded('ftp') || extension_loaded('sockets') || function_exists('fsockopen') )\n\t\t$types[ 'ftp' ] = __('FTP');\n\tif ( extension_loaded('ftp') ) //Only this supports FTPS\n\t\t$types[ 'ftps' ] = __('FTPS (SSL)');\n\tif ( extension_loaded('ssh2') && function_exists('stream_get_contents') )\n\t\t$types[ 'ssh' ] = __('SSH2');\n\n\t/**\n\t * Filters the connection types to output to the filesystem credentials form.\n\t *\n\t * @since 2.9.0\n\t * @since 4.6.0 The `$context` parameter default changed from `false` to an empty string.\n\t *\n\t * @param array  $types       Types of connections.\n\t * @param array  $credentials Credentials to connect with.\n\t * @param string $type        Chosen filesystem method.\n\t * @param object $error       Error object.\n\t * @param string $context     Full path to the directory that is tested\n\t *                            for being writable.\n\t */\n\t$types = apply_filters( 'fs_ftp_connection_types', $types, $credentials, $type, $error, $context );\n\n?>\n<form action=\"<?php echo esc_url( $form_post ) ?>\" method=\"post\">\n<div id=\"request-filesystem-credentials-form\" class=\"request-filesystem-credentials-form\">\n<?php\n// Print a H1 heading in the FTP credentials modal dialog, default is a H2.\n$heading_tag = 'h2';\nif ( 'plugins.php' === $pagenow || 'plugin-install.php' === $pagenow ) {\n\t$heading_tag = 'h1';\n}\necho \"<$heading_tag id='request-filesystem-credentials-title'>\" . __( 'Connection Information' ) . \"</$heading_tag>\";\n?>\n<p id=\"request-filesystem-credentials-desc\"><?php\n\t$label_user = __('Username');\n\t$label_pass = __('Password');\n\t_e('To perform the requested action, WordPress needs to access your web server.');\n\techo ' ';\n\tif ( ( isset( $types['ftp'] ) || isset( $types['ftps'] ) ) ) {\n\t\tif ( isset( $types['ssh'] ) ) {\n\t\t\t_e('Please enter your FTP or SSH credentials to proceed.');\n\t\t\t$label_user = __('FTP/SSH Username');\n\t\t\t$label_pass = __('FTP/SSH Password');\n\t\t} else {\n\t\t\t_e('Please enter your FTP credentials to proceed.');\n\t\t\t$label_user = __('FTP Username');\n\t\t\t$label_pass = __('FTP Password');\n\t\t}\n\t\techo ' ';\n\t}\n\t_e('If you do not remember your credentials, you should contact your web host.');\n?></p>\n<label for=\"hostname\">\n\t<span class=\"field-title\"><?php _e( 'Hostname' ) ?></span>\n\t<input name=\"hostname\" type=\"text\" id=\"hostname\" aria-describedby=\"request-filesystem-credentials-desc\" class=\"code\" placeholder=\"<?php esc_attr_e( 'example: www.wordpress.org' ) ?>\" value=\"<?php echo esc_attr($hostname); if ( !empty($port) ) echo \":$port\"; ?>\"<?php disabled( defined('FTP_HOST') ); ?> />\n</label>\n<div class=\"ftp-username\">\n\t<label for=\"username\">\n\t\t<span class=\"field-title\"><?php echo $label_user; ?></span>\n\t\t<input name=\"username\" type=\"text\" id=\"username\" value=\"<?php echo esc_attr($username) ?>\"<?php disabled( defined('FTP_USER') ); ?> />\n\t</label>\n</div>\n<div class=\"ftp-password\">\n\t<label for=\"password\">\n\t\t<span class=\"field-title\"><?php echo $label_pass; ?></span>\n\t\t<input name=\"password\" type=\"password\" id=\"password\" value=\"<?php if ( defined('FTP_PASS') ) echo '*****'; ?>\"<?php disabled( defined('FTP_PASS') ); ?> />\n\t\t<em><?php if ( ! defined('FTP_PASS') ) _e( 'This password will not be stored on the server.' ); ?></em>\n\t</label>\n</div>\n<fieldset>\n<legend><?php _e( 'Connection Type' ); ?></legend>\n<?php\n\t$disabled = disabled( ( defined( 'FTP_SSL' ) && FTP_SSL ) || ( defined( 'FTP_SSH' ) && FTP_SSH ), true, false );\n\tforeach ( $types as $name => $text ) : ?>\n\t<label for=\"<?php echo esc_attr( $name ) ?>\">\n\t\t<input type=\"radio\" name=\"connection_type\" id=\"<?php echo esc_attr( $name ) ?>\" value=\"<?php echo esc_attr( $name ) ?>\"<?php checked( $name, $connection_type ); echo $disabled; ?> />\n\t\t<?php echo $text; ?>\n\t</label>\n<?php\n\tendforeach;\n?>\n</fieldset>\n<?php\nif ( isset( $types['ssh'] ) ) {\n\t$hidden_class = '';\n\tif ( 'ssh' != $connection_type || empty( $connection_type ) ) {\n\t\t$hidden_class = ' class=\"hidden\"';\n\t}\n?>\n<fieldset id=\"ssh-keys\"<?php echo $hidden_class; ?>>\n<legend><?php _e( 'Authentication Keys' ); ?></legend>\n<label for=\"public_key\">\n\t<span class=\"field-title\"><?php _e('Public Key:') ?></span>\n\t<input name=\"public_key\" type=\"text\" id=\"public_key\" aria-describedby=\"auth-keys-desc\" value=\"<?php echo esc_attr($public_key) ?>\"<?php disabled( defined('FTP_PUBKEY') ); ?> />\n</label>\n<label for=\"private_key\">\n\t<span class=\"field-title\"><?php _e('Private Key:') ?></span>\n\t<input name=\"private_key\" type=\"text\" id=\"private_key\" value=\"<?php echo esc_attr($private_key) ?>\"<?php disabled( defined('FTP_PRIKEY') ); ?> />\n</label>\n<p id=\"auth-keys-desc\"><?php _e( 'Enter the location on the server where the public and private keys are located. If a passphrase is needed, enter that in the password field above.' ) ?></p>\n</fieldset>\n<?php\n}\n\nforeach ( (array) $extra_fields as $field ) {\n\tif ( isset( $submitted_form[ $field ] ) )\n\t\techo '<input type=\"hidden\" name=\"' . esc_attr( $field ) . '\" value=\"' . esc_attr( $submitted_form[ $field ] ) . '\" />';\n}\n?>\n\t<p class=\"request-filesystem-credentials-action-buttons\">\n\t\t<?php wp_nonce_field( 'filesystem-credentials', '_fs_nonce', false, true ); ?>\n\t\t<button class=\"button cancel-button\" data-js-action=\"close\" type=\"button\"><?php _e( 'Cancel' ); ?></button>\n\t\t<?php submit_button( __( 'Proceed' ), '', 'upgrade', false ); ?>\n\t</p>\n</div>\n</form>\n<?php\n\treturn false;\n}\n\n/**\n * Print the filesystem credentials modal when needed.\n *\n * @since 4.2.0\n */\nfunction wp_print_request_filesystem_credentials_modal() {\n\t$filesystem_method = get_filesystem_method();\n\tob_start();\n\t$filesystem_credentials_are_stored = request_filesystem_credentials( self_admin_url() );\n\tob_end_clean();\n\t$request_filesystem_credentials = ( $filesystem_method != 'direct' && ! $filesystem_credentials_are_stored );\n\tif ( ! $request_filesystem_credentials ) {\n\t\treturn;\n\t}\n\t?>\n\t<div id=\"request-filesystem-credentials-dialog\" class=\"notification-dialog-wrap request-filesystem-credentials-dialog\">\n\t\t<div class=\"notification-dialog-background\"></div>\n\t\t<div class=\"notification-dialog\" role=\"dialog\" aria-labelledby=\"request-filesystem-credentials-title\" tabindex=\"0\">\n\t\t\t<div class=\"request-filesystem-credentials-dialog-content\">\n\t\t\t\t<?php request_filesystem_credentials( site_url() ); ?>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<?php\n}\n", "/**\n * Functions for ajaxified updates, deletions and installs inside the WordPress admin.\n *\n * @version 4.2.0\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/* global pagenow */\n\n/**\n * @param {jQuery}  $                                   jQuery object.\n * @param {object}  wp                                  WP object.\n * @param {object}  settings                            WP Updates settings.\n * @param {string}  settings.ajax_nonce                 AJAX nonce.\n * @param {object}  settings.l10n                       Translation strings.\n * @param {object=} settings.plugins                    Base names of plugins in their different states.\n * @param {Array}   settings.plugins.all                Base names of all plugins.\n * @param {Array}   settings.plugins.active             Base names of active plugins.\n * @param {Array}   settings.plugins.inactive           Base names of inactive plugins.\n * @param {Array}   settings.plugins.upgrade            Base names of plugins with updates available.\n * @param {Array}   settings.plugins.recently_activated Base names of recently activated plugins.\n * @param {object=} settings.themes                     Plugin/theme status information or null.\n * @param {number}  settings.themes.all                 Amount of all themes.\n * @param {number}  settings.themes.upgrade             Amount of themes with updates available.\n * @param {number}  settings.themes.disabled            Amount of disabled themes.\n * @param {object=} settings.totals                     Combined information for available update counts.\n * @param {number}  settings.totals.count               Holds the amount of available updates.\n */\n(function( $, wp, settings ) {\n\tvar $document = $( document );\n\n\twp = wp || {};\n\n\t/**\n\t * The WP Updates object.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @type {object}\n\t */\n\twp.updates = {};\n\n\t/**\n\t * User nonce for ajax calls.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @type {string}\n\t */\n\twp.updates.ajaxNonce = settings.ajax_nonce;\n\n\t/**\n\t * Localized strings.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @type {object}\n\t */\n\twp.updates.l10n = settings.l10n;\n\n\t/**\n\t * Current search term.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @type {string}\n\t */\n\twp.updates.searchTerm = '';\n\n\t/**\n\t * Whether filesystem credentials need to be requested from the user.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @type {bool}\n\t */\n\twp.updates.shouldRequestFilesystemCredentials = false;\n\n\t/**\n\t * Filesystem credentials to be packaged along with the request.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 Added `available` property to indicate whether credentials have been provided.\n\t *\n\t * @type {object} filesystemCredentials                    Holds filesystem credentials.\n\t * @type {object} filesystemCredentials.ftp                Holds FTP credentials.\n\t * @type {string} filesystemCredentials.ftp.host           FTP host. Default empty string.\n\t * @type {string} filesystemCredentials.ftp.username       FTP user name. Default empty string.\n\t * @type {string} filesystemCredentials.ftp.password       FTP password. Default empty string.\n\t * @type {string} filesystemCredentials.ftp.connectionType Type of FTP connection. 'ssh', 'ftp', or 'ftps'.\n\t *                                                         Default empty string.\n\t * @type {object} filesystemCredentials.ssh                Holds SSH credentials.\n\t * @type {string} filesystemCredentials.ssh.publicKey      The public key. Default empty string.\n\t * @type {string} filesystemCredentials.ssh.privateKey     The private key. Default empty string.\n\t * @type {string} filesystemCredentials.fsNonce            Filesystem credentials form nonce.\n\t * @type {bool}   filesystemCredentials.available          Whether filesystem credentials have been provided.\n\t *                                                         Default 'false'.\n\t */\n\twp.updates.filesystemCredentials = {\n\t\tftp:       {\n\t\t\thost:           '',\n\t\t\tusername:       '',\n\t\t\tpassword:       '',\n\t\t\tconnectionType: ''\n\t\t},\n\t\tssh:       {\n\t\t\tpublicKey:  '',\n\t\t\tprivateKey: ''\n\t\t},\n\t\tfsNonce: '',\n\t\tavailable: false\n\t};\n\n\t/**\n\t * Whether we're waiting for an Ajax request to complete.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 More accurately named `ajaxLocked`.\n\t *\n\t * @type {bool}\n\t */\n\twp.updates.ajaxLocked = false;\n\n\t/**\n\t * Admin notice template.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @type {function} A function that lazily-compiles the template requested.\n\t */\n\twp.updates.adminNotice = wp.template( 'wp-updates-admin-notice' );\n\n\t/**\n\t * Update queue.\n\t *\n\t * If the user tries to update a plugin while an update is\n\t * already happening, it can be placed in this queue to perform later.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 More accurately named `queue`.\n\t *\n\t * @type {Array.object}\n\t */\n\twp.updates.queue = [];\n\n\t/**\n\t * Holds a jQuery reference to return focus to when exiting the request credentials modal.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @type {jQuery}\n\t */\n\twp.updates.$elToReturnFocusToFromCredentialsModal = undefined;\n\n\t/**\n\t * Adds or updates an admin notice.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}  data\n\t * @param {*=}      data.selector      Optional. Selector of an element to be replaced with the admin notice.\n\t * @param {string=} data.id            Optional. Unique id that will be used as the notice's id attribute.\n\t * @param {string=} data.className     Optional. Class names that will be used in the admin notice.\n\t * @param {string=} data.message       Optional. The message displayed in the notice.\n\t * @param {number=} data.successes     Optional. The amount of successful operations.\n\t * @param {number=} data.errors        Optional. The amount of failed operations.\n\t * @param {Array=}  data.errorMessages Optional. Error messages of failed operations.\n\t *\n\t */\n\twp.updates.addAdminNotice = function( data ) {\n\t\tvar $notice = $( data.selector ), $adminNotice;\n\n\t\tdelete data.selector;\n\t\t$adminNotice = wp.updates.adminNotice( data );\n\n\t\t// Check if this admin notice already exists.\n\t\tif ( ! $notice.length ) {\n\t\t\t$notice = $( '#' + data.id );\n\t\t}\n\n\t\tif ( $notice.length ) {\n\t\t\t$notice.replaceWith( $adminNotice );\n\t\t} else {\n\t\t\t$( '.wrap' ).find( '> h1' ).after( $adminNotice );\n\t\t}\n\n\t\t$document.trigger( 'wp-updates-notice-added' );\n\t};\n\n\t/**\n\t * Handles Ajax requests to WordPress.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {string} action The type of Ajax request ('update-plugin', 'install-theme', etc).\n\t * @param {object} data   Data that needs to be passed to the ajax callback.\n\t * @return {$.promise}    A jQuery promise that represents the request,\n\t *                        decorated with an abort() method.\n\t */\n\twp.updates.ajax = function( action, data ) {\n\t\tvar options = {};\n\n\t\tif ( wp.updates.ajaxLocked ) {\n\t\t\twp.updates.queue.push( {\n\t\t\t\taction: action,\n\t\t\t\tdata:   data\n\t\t\t} );\n\n\t\t\t// Return a Deferred object so callbacks can always be registered.\n\t\t\treturn $.Deferred();\n\t\t}\n\n\t\twp.updates.ajaxLocked = true;\n\n\t\tif ( data.success ) {\n\t\t\toptions.success = data.success;\n\t\t\tdelete data.success;\n\t\t}\n\n\t\tif ( data.error ) {\n\t\t\toptions.error = data.error;\n\t\t\tdelete data.error;\n\t\t}\n\n\t\toptions.data = _.extend( data, {\n\t\t\taction:          action,\n\t\t\t_ajax_nonce:     wp.updates.ajaxNonce,\n\t\t\t_fs_nonce:       wp.updates.filesystemCredentials.fsNonce,\n\t\t\tusername:        wp.updates.filesystemCredentials.ftp.username,\n\t\t\tpassword:        wp.updates.filesystemCredentials.ftp.password,\n\t\t\thostname:        wp.updates.filesystemCredentials.ftp.hostname,\n\t\t\tconnection_type: wp.updates.filesystemCredentials.ftp.connectionType,\n\t\t\tpublic_key:      wp.updates.filesystemCredentials.ssh.publicKey,\n\t\t\tprivate_key:     wp.updates.filesystemCredentials.ssh.privateKey\n\t\t} );\n\n\t\treturn wp.ajax.send( options ).always( wp.updates.ajaxAlways );\n\t};\n\n\t/**\n\t * Actions performed after every Ajax request.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}  response\n\t * @param {array=}  response.debug     Optional. Debug information.\n\t * @param {string=} response.errorCode Optional. Error code for an error that occurred.\n\t */\n\twp.updates.ajaxAlways = function( response ) {\n\t\tif ( ! response.errorCode || 'unable_to_connect_to_filesystem' !== response.errorCode ) {\n\t\t\twp.updates.ajaxLocked = false;\n\t\t\twp.updates.queueChecker();\n\t\t}\n\n\t\tif ( 'undefined' !== typeof response.debug && window.console && window.console.log ) {\n\t\t\t_.map( response.debug, function( message ) {\n\t\t\t\twindow.console.log( $( '<p />' ).html( message ).text() );\n\t\t\t} );\n\t\t}\n\t};\n\n\t/**\n\t * Refreshes update counts everywhere on the screen.\n\t *\n\t * @since 4.7.0\n\t */\n\twp.updates.refreshCount = function() {\n\t\tvar $adminBarUpdates              = $( '#wp-admin-bar-updates' ),\n\t\t\t$dashboardNavMenuUpdateCount  = $( 'a[href=\"update-core.php\"] .update-plugins' ),\n\t\t\t$pluginsNavMenuUpdateCount    = $( 'a[href=\"plugins.php\"] .update-plugins' ),\n\t\t\t$appearanceNavMenuUpdateCount = $( 'a[href=\"themes.php\"] .update-plugins' ),\n\t\t\titemCount;\n\n\t\t$adminBarUpdates.find( '.ab-item' ).removeAttr( 'title' );\n\t\t$adminBarUpdates.find( '.ab-label' ).text( settings.totals.counts.total );\n\n\t\t// Remove the update count from the toolbar if it's zero.\n\t\tif ( 0 === settings.totals.counts.total ) {\n\t\t\t$adminBarUpdates.find( '.ab-label' ).parents( 'li' ).remove();\n\t\t}\n\n\t\t// Update the \"Updates\" menu item.\n\t\t$dashboardNavMenuUpdateCount.each( function( index, element ) {\n\t\t\telement.className = element.className.replace( /count-\\d+/, 'count-' + settings.totals.counts.total );\n\t\t} );\n\t\tif ( settings.totals.counts.total > 0 ) {\n\t\t\t$dashboardNavMenuUpdateCount.find( '.update-count' ).text( settings.totals.counts.total );\n\t\t} else {\n\t\t\t$dashboardNavMenuUpdateCount.remove();\n\t\t}\n\n\t\t// Update the \"Plugins\" menu item.\n\t\t$pluginsNavMenuUpdateCount.each( function( index, element ) {\n\t\t\telement.className = element.className.replace( /count-\\d+/, 'count-' + settings.totals.counts.plugins );\n\t\t} );\n\t\tif ( settings.totals.counts.total > 0 ) {\n\t\t\t$pluginsNavMenuUpdateCount.find( '.plugin-count' ).text( settings.totals.counts.plugins );\n\t\t} else {\n\t\t\t$pluginsNavMenuUpdateCount.remove();\n\t\t}\n\n\t\t// Update the \"Appearance\" menu item.\n\t\t$appearanceNavMenuUpdateCount.each( function( index, element ) {\n\t\t\telement.className = element.className.replace( /count-\\d+/, 'count-' + settings.totals.counts.themes );\n\t\t} );\n\t\tif ( settings.totals.counts.total > 0 ) {\n\t\t\t$appearanceNavMenuUpdateCount.find( '.theme-count' ).text( settings.totals.counts.themes );\n\t\t} else {\n\t\t\t$appearanceNavMenuUpdateCount.remove();\n\t\t}\n\n\t\t// Update list table filter navigation.\n\t\tif ( 'plugins' === pagenow || 'plugins-network' === pagenow ) {\n\t\t\titemCount = settings.totals.counts.plugins;\n\t\t} else if ( 'themes' === pagenow || 'themes-network' === pagenow ) {\n\t\t\titemCount = settings.totals.counts.themes;\n\t\t}\n\n\t\tif ( itemCount > 0 ) {\n\t\t\t$( '.subsubsub .upgrade .count' ).text( '(' + itemCount + ')' );\n\t\t} else {\n\t\t\t$( '.subsubsub .upgrade' ).remove();\n\t\t\t$( '.subsubsub li:last' ).html( function() { return $( this ).children(); } );\n\t\t}\n\t};\n\n\t/**\n\t * Decrements the update counts throughout the various menus.\n\t *\n\t * This includes the toolbar, the \"Updates\" menu item and the menu items\n\t * for plugins and themes.\n\t *\n\t * @since 3.9.0\n\t *\n\t * @param {string} type The type of item that was updated or deleted.\n\t *                      Can be 'plugin', 'theme'.\n\t */\n\twp.updates.decrementCount = function( type ) {\n\t\tsettings.totals.counts.total = Math.max( --settings.totals.counts.total, 0 );\n\n\t\tif ( 'plugin' === type ) {\n\t\t\tsettings.totals.counts.plugins = Math.max( --settings.totals.counts.plugins, 0 );\n\t\t} else if ( 'theme' === type ) {\n\t\t\tsettings.totals.counts.themes = Math.max( --settings.totals.counts.themes, 0 );\n\t\t}\n\n\t\twp.updates.refreshCount( type );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to update a plugin.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 More accurately named `updatePlugin`.\n\t *\n\t * @param {object}               args         Arguments.\n\t * @param {string}               args.plugin  Plugin basename.\n\t * @param {string}               args.slug    Plugin slug.\n\t * @param {updatePluginSuccess=} args.success Optional. Success callback. Default: wp.updates.updatePluginSuccess\n\t * @param {updatePluginError=}   args.error   Optional. Error callback. Default: wp.updates.updatePluginError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.updatePlugin = function( args ) {\n\t\tvar $updateRow, $card, $message, message;\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.updatePluginSuccess,\n\t\t\terror: wp.updates.updatePluginError\n\t\t}, args );\n\n\t\tif ( 'plugins' === pagenow || 'plugins-network' === pagenow ) {\n\t\t\t$updateRow = $( 'tr[data-plugin=\"' + args.plugin + '\"]' );\n\t\t\t$message   = $updateRow.find( '.update-message' ).removeClass( 'notice-error' ).addClass( 'updating-message notice-warning' ).find( 'p' );\n\t\t\tmessage    = wp.updates.l10n.pluginUpdatingLabel.replace( '%s', $updateRow.find( '.plugin-title strong' ).text() );\n\t\t} else if ( 'plugin-install' === pagenow || 'plugin-install-network' === pagenow ) {\n\t\t\t$card    = $( '.plugin-card-' + args.slug );\n\t\t\t$message = $card.find( '.update-now' ).addClass( 'updating-message' );\n\t\t\tmessage  = wp.updates.l10n.pluginUpdatingLabel.replace( '%s', $message.data( 'name' ) );\n\n\t\t\t// Remove previous error messages, if any.\n\t\t\t$card.removeClass( 'plugin-card-update-failed' ).find( '.notice.notice-error' ).remove();\n\t\t}\n\n\t\tif ( $message.html() !== wp.updates.l10n.updating ) {\n\t\t\t$message.data( 'originaltext', $message.html() );\n\t\t}\n\n\t\t$message\n\t\t\t.attr( 'aria-label', message )\n\t\t\t.text( wp.updates.l10n.updating );\n\n\t\t$document.trigger( 'wp-plugin-updating', args );\n\n\t\treturn wp.updates.ajax( 'update-plugin', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful plugin update.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 More accurately named `updatePluginSuccess`.\n\t *\n\t * @typedef {object} updatePluginSuccess\n\t * @param {object} response            Response from the server.\n\t * @param {string} response.slug       Slug of the plugin to be updated.\n\t * @param {string} response.plugin     Basename of the plugin to be updated.\n\t * @param {string} response.pluginName Name of the plugin to be updated.\n\t * @param {string} response.oldVersion Old version of the plugin.\n\t * @param {string} response.newVersion New version of the plugin.\n\t */\n\twp.updates.updatePluginSuccess = function( response ) {\n\t\tvar $pluginRow, $updateMessage, newText;\n\n\t\tif ( 'plugins' === pagenow || 'plugins-network' === pagenow ) {\n\t\t\t$pluginRow     = $( 'tr[data-plugin=\"' + response.plugin + '\"]' )\n\t\t\t\t.removeClass( 'update' )\n\t\t\t\t.addClass( 'updated' );\n\t\t\t$updateMessage = $pluginRow.find( '.update-message' )\n\t\t\t\t.removeClass( 'updating-message notice-warning' )\n\t\t\t\t.addClass( 'updated-message notice-success' ).find( 'p' );\n\n\t\t\t// Update the version number in the row.\n\t\t\tnewText = $pluginRow.find( '.plugin-version-author-uri' ).html().replace( response.oldVersion, response.newVersion );\n\t\t\t$pluginRow.find( '.plugin-version-author-uri' ).html( newText );\n\t\t} else if ( 'plugin-install' === pagenow || 'plugin-install-network' === pagenow ) {\n\t\t\t$updateMessage = $( '.plugin-card-' + response.slug ).find( '.update-now' )\n\t\t\t\t.removeClass( 'updating-message' )\n\t\t\t\t.addClass( 'button-disabled updated-message' );\n\t\t}\n\n\t\t$updateMessage\n\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginUpdatedLabel.replace( '%s', response.pluginName ) )\n\t\t\t.text( wp.updates.l10n.pluginUpdated );\n\n\t\twp.a11y.speak( wp.updates.l10n.updatedMsg, 'polite' );\n\n\t\twp.updates.decrementCount( 'plugin' );\n\n\t\t$document.trigger( 'wp-plugin-update-success', response );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed plugin update.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 More accurately named `updatePluginError`.\n\t *\n\t * @typedef {object} updatePluginError\n\t * @param {object}  response              Response from the server.\n\t * @param {string}  response.slug         Slug of the plugin to be updated.\n\t * @param {string}  response.plugin       Basename of the plugin to be updated.\n\t * @param {string=} response.pluginName   Optional. Name of the plugin to be updated.\n\t * @param {string}  response.errorCode    Error code for the error that occurred.\n\t * @param {string}  response.errorMessage The error that occurred.\n\t */\n\twp.updates.updatePluginError = function( response ) {\n\t\tvar $card, $message, errorMessage;\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'update' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'update-plugin' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\terrorMessage = wp.updates.l10n.updateFailed.replace( '%s', response.errorMessage );\n\n\t\tif ( 'plugins' === pagenow || 'plugins-network' === pagenow ) {\n\t\t\tif ( response.plugin ) {\n\t\t\t\t$message = $( 'tr[data-plugin=\"' + response.plugin + '\"]' ).find( '.update-message' );\n\t\t\t} else {\n\t\t\t\t$message = $( 'tr[data-slug=\"' + response.slug + '\"]' ).find( '.update-message' );\n\t\t\t}\n\t\t\t$message.removeClass( 'updating-message notice-warning' ).addClass( 'notice-error' ).find( 'p' ).html( errorMessage );\n\n\t\t\tif ( response.pluginName ) {\n\t\t\t\t$message.find( 'p' )\n\t\t\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginUpdateFailedLabel.replace( '%s', response.pluginName ) );\n\t\t\t} else {\n\t\t\t\t$message.find( 'p' ).removeAttr( 'aria-label' );\n\t\t\t}\n\t\t} else if ( 'plugin-install' === pagenow || 'plugin-install-network' === pagenow ) {\n\t\t\t$card = $( '.plugin-card-' + response.slug )\n\t\t\t\t.addClass( 'plugin-card-update-failed' )\n\t\t\t\t.append( wp.updates.adminNotice( {\n\t\t\t\t\tclassName: 'update-message notice-error notice-alt is-dismissible',\n\t\t\t\t\tmessage:   errorMessage\n\t\t\t\t} ) );\n\n\t\t\t$card.find( '.update-now' )\n\t\t\t\t.text( wp.updates.l10n.updateFailedShort ).removeClass( 'updating-message' );\n\n\t\t\tif ( response.pluginName ) {\n\t\t\t\t$card.find( '.update-now' )\n\t\t\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginUpdateFailedLabel.replace( '%s', response.pluginName ) );\n\t\t\t} else {\n\t\t\t\t$card.find( '.update-now' ).removeAttr( 'aria-label' );\n\t\t\t}\n\n\t\t\t$card.on( 'click', '.notice.is-dismissible .notice-dismiss', function() {\n\n\t\t\t\t// Use same delay as the total duration of the notice fadeTo + slideUp animation.\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t$card\n\t\t\t\t\t\t.removeClass( 'plugin-card-update-failed' )\n\t\t\t\t\t\t.find( '.column-name a' ).focus();\n\n\t\t\t\t\t$card.find( '.update-now' )\n\t\t\t\t\t\t.attr( 'aria-label', false )\n\t\t\t\t\t\t.text( wp.updates.l10n.updateNow );\n\t\t\t\t}, 200 );\n\t\t\t} );\n\t\t}\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\t$document.trigger( 'wp-plugin-update-error', response );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to install a plugin.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}                args         Arguments.\n\t * @param {string}                args.slug    Plugin identifier in the WordPress.org Plugin repository.\n\t * @param {installPluginSuccess=} args.success Optional. Success callback. Default: wp.updates.installPluginSuccess\n\t * @param {installPluginError=}   args.error   Optional. Error callback. Default: wp.updates.installPluginError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.installPlugin = function( args ) {\n\t\tvar $card    = $( '.plugin-card-' + args.slug ),\n\t\t\t$message = $card.find( '.install-now' );\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.installPluginSuccess,\n\t\t\terror: wp.updates.installPluginError\n\t\t}, args );\n\n\t\tif ( 'import' === pagenow ) {\n\t\t\t$message = $( '[data-slug=\"' + args.slug + '\"]' );\n\t\t}\n\n\t\tif ( $message.html() !== wp.updates.l10n.installing ) {\n\t\t\t$message.data( 'originaltext', $message.html() );\n\t\t}\n\n\t\t$message\n\t\t\t.addClass( 'updating-message' )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginInstallingLabel.replace( '%s', $message.data( 'name' ) ) )\n\t\t\t.text( wp.updates.l10n.installing );\n\n\t\twp.a11y.speak( wp.updates.l10n.installingMsg, 'polite' );\n\n\t\t// Remove previous error messages, if any.\n\t\t$card.removeClass( 'plugin-card-install-failed' ).find( '.notice.notice-error' ).remove();\n\n\t\t$document.trigger( 'wp-plugin-installing', args );\n\n\t\treturn wp.updates.ajax( 'install-plugin', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful plugin install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installPluginSuccess\n\t * @param {object} response             Response from the server.\n\t * @param {string} response.slug        Slug of the installed plugin.\n\t * @param {string} response.pluginName  Name of the installed plugin.\n\t * @param {string} response.activateUrl URL to activate the just installed plugin.\n\t */\n\twp.updates.installPluginSuccess = function( response ) {\n\t\tvar $message = $( '.plugin-card-' + response.slug ).find( '.install-now' );\n\n\t\t$message\n\t\t\t.removeClass( 'updating-message' )\n\t\t\t.addClass( 'updated-message installed button-disabled' )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginInstalledLabel.replace( '%s', response.pluginName ) )\n\t\t\t.text( wp.updates.l10n.pluginInstalled );\n\n\t\twp.a11y.speak( wp.updates.l10n.installedMsg, 'polite' );\n\n\t\t$document.trigger( 'wp-plugin-install-success', response );\n\n\t\tif ( response.activateUrl ) {\n\t\t\tsetTimeout( function() {\n\n\t\t\t\t// Transform the 'Install' button into an 'Activate' button.\n\t\t\t\t$message.removeClass( 'install-now installed button-disabled updated-message' ).addClass( 'activate-now button-primary' )\n\t\t\t\t\t.attr( 'href', response.activateUrl )\n\t\t\t\t\t.attr( 'aria-label', wp.updates.l10n.activatePluginLabel.replace( '%s', response.pluginName ) )\n\t\t\t\t\t.text( wp.updates.l10n.activatePlugin );\n\t\t\t}, 1000 );\n\t\t}\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed plugin install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installPluginError\n\t * @param {object}  response              Response from the server.\n\t * @param {string}  response.slug         Slug of the plugin to be installed.\n\t * @param {string=} response.pluginName   Optional. Name of the plugin to be installed.\n\t * @param {string}  response.errorCode    Error code for the error that occurred.\n\t * @param {string}  response.errorMessage The error that occurred.\n\t */\n\twp.updates.installPluginError = function( response ) {\n\t\tvar $card   = $( '.plugin-card-' + response.slug ),\n\t\t\t$button = $card.find( '.install-now' ),\n\t\t\terrorMessage;\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'install' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'install-plugin' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\terrorMessage = wp.updates.l10n.installFailed.replace( '%s', response.errorMessage );\n\n\t\t$card\n\t\t\t.addClass( 'plugin-card-update-failed' )\n\t\t\t.append( '<div class=\"notice notice-error notice-alt is-dismissible\"><p>' + errorMessage + '</p></div>' );\n\n\t\t$card.on( 'click', '.notice.is-dismissible .notice-dismiss', function() {\n\n\t\t\t// Use same delay as the total duration of the notice fadeTo + slideUp animation.\n\t\t\tsetTimeout( function() {\n\t\t\t\t$card\n\t\t\t\t\t.removeClass( 'plugin-card-update-failed' )\n\t\t\t\t\t.find( '.column-name a' ).focus();\n\t\t\t}, 200 );\n\t\t} );\n\n\t\t$button\n\t\t\t.removeClass( 'updating-message' ).addClass( 'button-disabled' )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.pluginInstallFailedLabel.replace( '%s', $button.data( 'name' ) ) )\n\t\t\t.text( wp.updates.l10n.installFailedShort );\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\t$document.trigger( 'wp-plugin-install-error', response );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful importer install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installImporterSuccess\n\t * @param {object} response             Response from the server.\n\t * @param {string} response.slug        Slug of the installed plugin.\n\t * @param {string} response.pluginName  Name of the installed plugin.\n\t * @param {string} response.activateUrl URL to activate the just installed plugin.\n\t */\n\twp.updates.installImporterSuccess = function( response ) {\n\t\twp.updates.addAdminNotice( {\n\t\t\tid:        'install-success',\n\t\t\tclassName: 'notice-success is-dismissible',\n\t\t\tmessage:   wp.updates.l10n.importerInstalledMsg.replace( '%s', response.activateUrl + '&from=import' )\n\t\t} );\n\n\t\t$( '[data-slug=\"' + response.slug + '\"]' )\n\t\t\t.removeClass( 'install-now updating-message' )\n\t\t\t.addClass( 'activate-now' )\n\t\t\t.attr({\n\t\t\t\t'href': response.activateUrl + '&from=import',\n\t\t\t\t'aria-label': wp.updates.l10n.activateImporterLabel.replace( '%s', response.pluginName )\n\t\t\t})\n\t\t\t.text( wp.updates.l10n.activateImporter );\n\n\t\twp.a11y.speak( wp.updates.l10n.installedMsg, 'polite' );\n\n\t\t$document.trigger( 'wp-importer-install-success', response );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed importer install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installImporterError\n\t * @param {object}  response              Response from the server.\n\t * @param {string}  response.slug         Slug of the plugin to be installed.\n\t * @param {string=} response.pluginName   Optional. Name of the plugin to be installed.\n\t * @param {string}  response.errorCode    Error code for the error that occurred.\n\t * @param {string}  response.errorMessage The error that occurred.\n\t */\n\twp.updates.installImporterError = function( response ) {\n\t\tvar errorMessage = wp.updates.l10n.installFailed.replace( '%s', response.errorMessage ),\n\t\t\t$installLink = $( '[data-slug=\"' + response.slug + '\"]' ),\n\t\t\tpluginName = $installLink.data( 'name' );\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'install' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'install-plugin' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\twp.updates.addAdminNotice( {\n\t\t\tid:        response.errorCode,\n\t\t\tclassName: 'notice-error is-dismissible',\n\t\t\tmessage:   errorMessage\n\t\t} );\n\n\t\t$installLink\n\t\t\t.removeClass( 'updating-message' )\n\t\t\t.text( wp.updates.l10n.installNow )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.installNowLabel.replace( '%s', pluginName ) );\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\t$document.trigger( 'wp-importer-install-error', response );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to delete a plugin.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}               args         Arguments.\n\t * @param {string}               args.plugin  Basename of the plugin to be deleted.\n\t * @param {string}               args.slug    Slug of the plugin to be deleted.\n\t * @param {deletePluginSuccess=} args.success Optional. Success callback. Default: wp.updates.deletePluginSuccess\n\t * @param {deletePluginError=}   args.error   Optional. Error callback. Default: wp.updates.deletePluginError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.deletePlugin = function( args ) {\n\t\tvar $link = $( '[data-plugin=\"' + args.plugin + '\"]' ).find( '.row-actions a.delete' );\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.deletePluginSuccess,\n\t\t\terror: wp.updates.deletePluginError\n\t\t}, args );\n\n\t\tif ( $link.html() !== wp.updates.l10n.deleting ) {\n\t\t\t$link\n\t\t\t\t.data( 'originaltext', $link.html() )\n\t\t\t\t.text( wp.updates.l10n.deleting );\n\t\t}\n\n\t\twp.a11y.speak( wp.updates.l10n.deleting, 'polite' );\n\n\t\t$document.trigger( 'wp-plugin-deleting', args );\n\n\t\treturn wp.updates.ajax( 'delete-plugin', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful plugin deletion.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} deletePluginSuccess\n\t * @param {object} response            Response from the server.\n\t * @param {string} response.slug       Slug of the plugin that was deleted.\n\t * @param {string} response.plugin     Base name of the plugin that was deleted.\n\t * @param {string} response.pluginName Name of the plugin that was deleted.\n\t */\n\twp.updates.deletePluginSuccess = function( response ) {\n\n\t\t// Removes the plugin and updates rows.\n\t\t$( '[data-plugin=\"' + response.plugin + '\"]' ).css( { backgroundColor: '#faafaa' } ).fadeOut( 350, function() {\n\t\t\tvar $form            = $( '#bulk-action-form' ),\n\t\t\t\t$views           = $( '.subsubsub' ),\n\t\t\t\t$pluginRow       = $( this ),\n\t\t\t\tcolumnCount      = $form.find( 'thead th:not(.hidden), thead td' ).length,\n\t\t\t\tpluginDeletedRow = wp.template( 'item-deleted-row' ),\n\t\t\t\t/** @type {object} plugins Base names of plugins in their different states. */\n\t\t\t\tplugins          = settings.plugins;\n\n\t\t\t// Add a success message after deleting a plugin.\n\t\t\tif ( ! $pluginRow.hasClass( 'plugin-update-tr' ) ) {\n\t\t\t\t$pluginRow.after(\n\t\t\t\t\tpluginDeletedRow( {\n\t\t\t\t\t\tslug:    response.slug,\n\t\t\t\t\t\tplugin:  response.plugin,\n\t\t\t\t\t\tcolspan: columnCount,\n\t\t\t\t\t\tname:    response.pluginName\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$pluginRow.remove();\n\n\t\t\t// Remove plugin from update count.\n\t\t\tif ( -1 !== _.indexOf( plugins.upgrade, response.plugin ) ) {\n\t\t\t\tplugins.upgrade = _.without( plugins.upgrade, response.plugin );\n\t\t\t\twp.updates.decrementCount( 'plugin' );\n\t\t\t}\n\n\t\t\t// Remove from views.\n\t\t\tif ( -1 !== _.indexOf( plugins.inactive, response.plugin ) ) {\n\t\t\t\tplugins.inactive = _.without( plugins.inactive, response.plugin );\n\t\t\t\tif ( plugins.inactive.length ) {\n\t\t\t\t\t$views.find( '.inactive .count' ).text( '(' + plugins.inactive.length + ')' );\n\t\t\t\t} else {\n\t\t\t\t\t$views.find( '.inactive' ).remove();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( -1 !== _.indexOf( plugins.active, response.plugin ) ) {\n\t\t\t\tplugins.active = _.without( plugins.active, response.plugin );\n\t\t\t\tif ( plugins.active.length ) {\n\t\t\t\t\t$views.find( '.active .count' ).text( '(' + plugins.active.length + ')' );\n\t\t\t\t} else {\n\t\t\t\t\t$views.find( '.active' ).remove();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( -1 !== _.indexOf( plugins.recently_activated, response.plugin ) ) {\n\t\t\t\tplugins.recently_activated = _.without( plugins.recently_activated, response.plugin );\n\t\t\t\tif ( plugins.recently_activated.length ) {\n\t\t\t\t\t$views.find( '.recently_activated .count' ).text( '(' + plugins.recently_activated.length + ')' );\n\t\t\t\t} else {\n\t\t\t\t\t$views.find( '.recently_activated' ).remove();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tplugins.all = _.without( plugins.all, response.plugin );\n\n\t\t\tif ( plugins.all.length ) {\n\t\t\t\t$views.find( '.all .count' ).text( '(' + plugins.all.length + ')' );\n\t\t\t} else {\n\t\t\t\t$form.find( '.tablenav' ).css( { visibility: 'hidden' } );\n\t\t\t\t$views.find( '.all' ).remove();\n\n\t\t\t\tif ( ! $form.find( 'tr.no-items' ).length ) {\n\t\t\t\t\t$form.find( '#the-list' ).append( '<tr class=\"no-items\"><td class=\"colspanchange\" colspan=\"' + columnCount + '\">' + wp.updates.l10n.noPlugins + '</td></tr>' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\twp.a11y.speak( wp.updates.l10n.pluginDeleted, 'polite' );\n\n\t\t$document.trigger( 'wp-plugin-delete-success', response );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed plugin deletion.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} deletePluginError\n\t * @param {object}  response              Response from the server.\n\t * @param {string}  response.slug         Slug of the plugin to be deleted.\n\t * @param {string}  response.plugin       Base name of the plugin to be deleted\n\t * @param {string=} response.pluginName   Optional. Name of the plugin to be deleted.\n\t * @param {string}  response.errorCode    Error code for the error that occurred.\n\t * @param {string}  response.errorMessage The error that occurred.\n\t */\n\twp.updates.deletePluginError = function( response ) {\n\t\tvar $plugin, $pluginUpdateRow,\n\t\t\tpluginUpdateRow  = wp.template( 'item-update-row' ),\n\t\t\tnoticeContent    = wp.updates.adminNotice( {\n\t\t\t\tclassName: 'update-message notice-error notice-alt',\n\t\t\t\tmessage:   response.errorMessage\n\t\t\t} );\n\n\t\tif ( response.plugin ) {\n\t\t\t$plugin          = $( 'tr.inactive[data-plugin=\"' + response.plugin + '\"]' );\n\t\t\t$pluginUpdateRow = $plugin.siblings( '[data-plugin=\"' + response.plugin + '\"]' );\n\t\t} else {\n\t\t\t$plugin          = $( 'tr.inactive[data-slug=\"' + response.slug + '\"]' );\n\t\t\t$pluginUpdateRow = $plugin.siblings( '[data-slug=\"' + response.slug + '\"]' );\n\t\t}\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'delete' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'delete-plugin' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add a plugin update row if it doesn't exist yet.\n\t\tif ( ! $pluginUpdateRow.length ) {\n\t\t\t$plugin.addClass( 'update' ).after(\n\t\t\t\tpluginUpdateRow( {\n\t\t\t\t\tslug:    response.slug,\n\t\t\t\t\tplugin:  response.plugin || response.slug,\n\t\t\t\t\tcolspan: $( '#bulk-action-form' ).find( 'thead th:not(.hidden), thead td' ).length,\n\t\t\t\t\tcontent: noticeContent\n\t\t\t\t} )\n\t\t\t);\n\t\t} else {\n\n\t\t\t// Remove previous error messages, if any.\n\t\t\t$pluginUpdateRow.find( '.notice-error' ).remove();\n\n\t\t\t$pluginUpdateRow.find( '.plugin-update' ).append( noticeContent );\n\t\t}\n\n\t\t$document.trigger( 'wp-plugin-delete-error', response );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to update a theme.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}              args         Arguments.\n\t * @param {string}              args.slug    Theme stylesheet.\n\t * @param {updateThemeSuccess=} args.success Optional. Success callback. Default: wp.updates.updateThemeSuccess\n\t * @param {updateThemeError=}   args.error   Optional. Error callback. Default: wp.updates.updateThemeError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.updateTheme = function( args ) {\n\t\tvar $notice;\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.updateThemeSuccess,\n\t\t\terror: wp.updates.updateThemeError\n\t\t}, args );\n\n\t\tif ( 'themes-network' === pagenow ) {\n\t\t\t$notice = $( '[data-slug=\"' + args.slug + '\"]' ).find( '.update-message' ).removeClass( 'notice-error' ).addClass( 'updating-message notice-warning' ).find( 'p' );\n\n\t\t} else {\n\t\t\t$notice = $( '#update-theme' ).closest( '.notice' ).removeClass( 'notice-large' );\n\n\t\t\t$notice.find( 'h3' ).remove();\n\n\t\t\t$notice = $notice.add( $( '[data-slug=\"' + args.slug + '\"]' ).find( '.update-message' ) );\n\t\t\t$notice = $notice.addClass( 'updating-message' ).find( 'p' );\n\t\t}\n\n\t\tif ( $notice.html() !== wp.updates.l10n.updating ) {\n\t\t\t$notice.data( 'originaltext', $notice.html() );\n\t\t}\n\n\t\twp.a11y.speak( wp.updates.l10n.updatingMsg, 'polite' );\n\t\t$notice.text( wp.updates.l10n.updating );\n\n\t\t$document.trigger( 'wp-theme-updating', args );\n\n\t\treturn wp.updates.ajax( 'update-theme', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful theme update.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} updateThemeSuccess\n\t * @param {object} response\n\t * @param {string} response.slug       Slug of the theme to be updated.\n\t * @param {object} response.theme      Updated theme.\n\t * @param {string} response.oldVersion Old version of the theme.\n\t * @param {string} response.newVersion New version of the theme.\n\t */\n\twp.updates.updateThemeSuccess = function( response ) {\n\t\tvar isModalOpen    = $( 'body.modal-open' ).length,\n\t\t\t$theme         = $( '[data-slug=\"' + response.slug + '\"]' ),\n\t\t\tupdatedMessage = {\n\t\t\t\tclassName: 'updated-message notice-success notice-alt',\n\t\t\t\tmessage:   wp.updates.l10n.themeUpdated\n\t\t\t},\n\t\t\t$notice, newText;\n\n\t\tif ( 'themes-network' === pagenow ) {\n\t\t\t$notice = $theme.find( '.update-message' );\n\n\t\t\t// Update the version number in the row.\n\t\t\tnewText = $theme.find( '.theme-version-author-uri' ).html().replace( response.oldVersion, response.newVersion );\n\t\t\t$theme.find( '.theme-version-author-uri' ).html( newText );\n\t\t} else {\n\t\t\t$notice = $( '.theme-info .notice' ).add( $theme.find( '.update-message' ) );\n\n\t\t\t// Focus on Customize button after updating.\n\t\t\tif ( isModalOpen ) {\n\t\t\t\t$( '.load-customize:visible' ).focus();\n\t\t\t} else {\n\t\t\t\t$theme.find( '.load-customize' ).focus();\n\t\t\t}\n\t\t}\n\n\t\twp.updates.addAdminNotice( _.extend( { selector: $notice }, updatedMessage ) );\n\t\twp.a11y.speak( wp.updates.l10n.updatedMsg, 'polite' );\n\n\t\twp.updates.decrementCount( 'theme' );\n\n\t\t$document.trigger( 'wp-theme-update-success', response );\n\n\t\t// Show updated message after modal re-rendered.\n\t\tif ( isModalOpen ) {\n\t\t\t$( '.theme-info .theme-author' ).after( wp.updates.adminNotice( updatedMessage ) );\n\t\t}\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed theme update.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} updateThemeError\n\t * @param {object} response              Response from the server.\n\t * @param {string} response.slug         Slug of the theme to be updated.\n\t * @param {string} response.errorCode    Error code for the error that occurred.\n\t * @param {string} response.errorMessage The error that occurred.\n\t */\n\twp.updates.updateThemeError = function( response ) {\n\t\tvar $theme       = $( '[data-slug=\"' + response.slug + '\"]' ),\n\t\t\terrorMessage = wp.updates.l10n.updateFailed.replace( '%s', response.errorMessage ),\n\t\t\t$notice;\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'update' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'update-theme' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( 'themes-network' === pagenow ) {\n\t\t\t$notice = $theme.find( '.update-message ' );\n\t\t} else {\n\t\t\t$notice = $( '.theme-info .notice' ).add( $theme.find( '.notice' ) );\n\n\t\t\t$( 'body.modal-open' ).length ? $( '.load-customize:visible' ).focus() : $theme.find( '.load-customize' ).focus();\n\t\t}\n\n\t\twp.updates.addAdminNotice( {\n\t\t\tselector:  $notice,\n\t\t\tclassName: 'update-message notice-error notice-alt is-dismissible',\n\t\t\tmessage:   errorMessage\n\t\t} );\n\n\t\twp.a11y.speak( errorMessage, 'polite' );\n\n\t\t$document.trigger( 'wp-theme-update-error', response );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to install a theme.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}               args\n\t * @param {string}               args.slug    Theme stylesheet.\n\t * @param {installThemeSuccess=} args.success Optional. Success callback. Default: wp.updates.installThemeSuccess\n\t * @param {installThemeError=}   args.error   Optional. Error callback. Default: wp.updates.installThemeError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.installTheme = function( args ) {\n\t\tvar $message = $( '.theme-install[data-slug=\"' + args.slug + '\"]' );\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.installThemeSuccess,\n\t\t\terror: wp.updates.installThemeError\n\t\t}, args );\n\n\t\t$message.addClass( 'updating-message' );\n\t\t$message.parents( '.theme' ).addClass( 'focus' );\n\t\tif ( $message.html() !== wp.updates.l10n.installing ) {\n\t\t\t$message.data( 'originaltext', $message.html() );\n\t\t}\n\n\t\t$message\n\t\t\t.text( wp.updates.l10n.installing )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.themeInstallingLabel.replace( '%s', $message.data( 'name' ) ) );\n\t\twp.a11y.speak( wp.updates.l10n.installingMsg, 'polite' );\n\n\t\t// Remove previous error messages, if any.\n\t\t$( '.install-theme-info, [data-slug=\"' + args.slug + '\"]' ).removeClass( 'theme-install-failed' ).find( '.notice.notice-error' ).remove();\n\n\t\t$document.trigger( 'wp-theme-installing', args );\n\n\t\treturn wp.updates.ajax( 'install-theme', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful theme install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installThemeSuccess\n\t * @param {object} response              Response from the server.\n\t * @param {string} response.slug         Slug of the theme to be installed.\n\t * @param {string} response.customizeUrl URL to the Customizer for the just installed theme.\n\t * @param {string} response.activateUrl  URL to activate the just installed theme.\n\t */\n\twp.updates.installThemeSuccess = function( response ) {\n\t\tvar $card = $( '.wp-full-overlay-header, [data-slug=' + response.slug + ']' ),\n\t\t\t$message;\n\n\t\t$document.trigger( 'wp-theme-install-success', response );\n\n\t\t$message = $card.find( '.button-primary' )\n\t\t\t.removeClass( 'updating-message' )\n\t\t\t.addClass( 'updated-message disabled' )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.themeInstalledLabel.replace( '%s', response.themeName ) )\n\t\t\t.text( wp.updates.l10n.themeInstalled );\n\n\t\twp.a11y.speak( wp.updates.l10n.installedMsg, 'polite' );\n\n\t\tsetTimeout( function() {\n\n\t\t\tif ( response.activateUrl ) {\n\n\t\t\t\t// Transform the 'Install' button into an 'Activate' button.\n\t\t\t\t$message\n\t\t\t\t\t.attr( 'href', response.activateUrl )\n\t\t\t\t\t.removeClass( 'theme-install updated-message disabled' )\n\t\t\t\t\t.addClass( 'activate' )\n\t\t\t\t\t.attr( 'aria-label', wp.updates.l10n.activateThemeLabel.replace( '%s', response.themeName ) )\n\t\t\t\t\t.text( wp.updates.l10n.activateTheme );\n\t\t\t}\n\n\t\t\tif ( response.customizeUrl ) {\n\n\t\t\t\t// Transform the 'Preview' button into a 'Live Preview' button.\n\t\t\t\t$message.siblings( '.preview' ).replaceWith( function () {\n\t\t\t\t\treturn $( '<a>' )\n\t\t\t\t\t\t.attr( 'href', response.customizeUrl )\n\t\t\t\t\t\t.addClass( 'button load-customize' )\n\t\t\t\t\t\t.text( wp.updates.l10n.livePreview );\n\t\t\t\t} );\n\t\t\t}\n\t\t}, 1000 );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed theme install.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} installThemeError\n\t * @param {object} response              Response from the server.\n\t * @param {string} response.slug         Slug of the theme to be installed.\n\t * @param {string} response.errorCode    Error code for the error that occurred.\n\t * @param {string} response.errorMessage The error that occurred.\n\t */\n\twp.updates.installThemeError = function( response ) {\n\t\tvar $card, $button,\n\t\t\terrorMessage = wp.updates.l10n.installFailed.replace( '%s', response.errorMessage ),\n\t\t\t$message     = wp.updates.adminNotice( {\n\t\t\t\tclassName: 'update-message notice-error notice-alt',\n\t\t\t\tmessage:   errorMessage\n\t\t\t} );\n\n\t\tif ( ! wp.updates.isValidResponse( response, 'install' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'install-theme' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( $document.find( 'body' ).hasClass( 'full-overlay-active' ) ) {\n\t\t\t$button = $( '.theme-install[data-slug=\"' + response.slug + '\"]' );\n\t\t\t$card   = $( '.install-theme-info' ).prepend( $message );\n\t\t} else {\n\t\t\t$card   = $( '[data-slug=\"' + response.slug + '\"]' ).removeClass( 'focus' ).addClass( 'theme-install-failed' ).append( $message );\n\t\t\t$button = $card.find( '.theme-install' );\n\t\t}\n\n\t\t$button\n\t\t\t.removeClass( 'updating-message' )\n\t\t\t.attr( 'aria-label', wp.updates.l10n.themeInstallFailedLabel.replace( '%s', $button.data( 'name' ) ) )\n\t\t\t.text( wp.updates.l10n.installFailedShort );\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\t$document.trigger( 'wp-theme-install-error', response );\n\t};\n\n\t/**\n\t * Sends an Ajax request to the server to delete a theme.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {object}              args\n\t * @param {string}              args.slug    Theme stylesheet.\n\t * @param {deleteThemeSuccess=} args.success Optional. Success callback. Default: wp.updates.deleteThemeSuccess\n\t * @param {deleteThemeError=}   args.error   Optional. Error callback. Default: wp.updates.deleteThemeError\n\t * @return {$.promise} A jQuery promise that represents the request,\n\t *                     decorated with an abort() method.\n\t */\n\twp.updates.deleteTheme = function( args ) {\n\t\tvar $button;\n\n\t\tif ( 'themes' === pagenow ) {\n\t\t\t$button = $( '.theme-actions .delete-theme' );\n\t\t} else if ( 'themes-network' === pagenow ) {\n\t\t\t$button = $( '[data-slug=\"' + args.slug + '\"]' ).find( '.row-actions a.delete' );\n\t\t}\n\n\t\targs = _.extend( {\n\t\t\tsuccess: wp.updates.deleteThemeSuccess,\n\t\t\terror: wp.updates.deleteThemeError\n\t\t}, args );\n\n\t\tif ( $button && $button.html() !== wp.updates.l10n.deleting ) {\n\t\t\t$button\n\t\t\t\t.data( 'originaltext', $button.html() )\n\t\t\t\t.text( wp.updates.l10n.deleting );\n\t\t}\n\n\t\twp.a11y.speak( wp.updates.l10n.deleting, 'polite' );\n\n\t\t// Remove previous error messages, if any.\n\t\t$( '.theme-info .update-message' ).remove();\n\n\t\t$document.trigger( 'wp-theme-deleting', args );\n\n\t\treturn wp.updates.ajax( 'delete-theme', args );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a successful theme deletion.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} deleteThemeSuccess\n\t * @param {object} response      Response from the server.\n\t * @param {string} response.slug Slug of the theme that was deleted.\n\t */\n\twp.updates.deleteThemeSuccess = function( response ) {\n\t\tvar $themeRows = $( '[data-slug=\"' + response.slug + '\"]' );\n\n\t\tif ( 'themes-network' === pagenow ) {\n\n\t\t\t// Removes the theme and updates rows.\n\t\t\t$themeRows.css( { backgroundColor: '#faafaa' } ).fadeOut( 350, function() {\n\t\t\t\tvar $views     = $( '.subsubsub' ),\n\t\t\t\t\t$themeRow  = $( this ),\n\t\t\t\t\ttotals     = settings.themes,\n\t\t\t\t\tdeletedRow = wp.template( 'item-deleted-row' );\n\n\t\t\t\tif ( ! $themeRow.hasClass( 'plugin-update-tr' ) ) {\n\t\t\t\t\t$themeRow.after(\n\t\t\t\t\t\tdeletedRow( {\n\t\t\t\t\t\t\tslug:    response.slug,\n\t\t\t\t\t\t\tcolspan: $( '#bulk-action-form' ).find( 'thead th:not(.hidden), thead td' ).length,\n\t\t\t\t\t\t\tname:    $themeRow.find( '.theme-title strong' ).text()\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$themeRow.remove();\n\n\t\t\t\t// Remove theme from update count.\n\t\t\t\tif ( $themeRow.hasClass( 'update' ) ) {\n\t\t\t\t\ttotals.upgrade--;\n\t\t\t\t\twp.updates.decrementCount( 'theme' );\n\t\t\t\t}\n\n\t\t\t\t// Remove from views.\n\t\t\t\tif ( $themeRow.hasClass( 'inactive' ) ) {\n\t\t\t\t\ttotals.disabled--;\n\t\t\t\t\tif ( totals.disabled ) {\n\t\t\t\t\t\t$views.find( '.disabled .count' ).text( '(' + totals.disabled + ')' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$views.find( '.disabled' ).remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// There is always at least one theme available.\n\t\t\t\t$views.find( '.all .count' ).text( '(' + --totals.all + ')' );\n\t\t\t} );\n\t\t}\n\n\t\twp.a11y.speak( wp.updates.l10n.themeDeleted, 'polite' );\n\n\t\t$document.trigger( 'wp-theme-delete-success', response );\n\t};\n\n\t/**\n\t * Updates the UI appropriately after a failed theme deletion.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} deleteThemeError\n\t * @param {object} response              Response from the server.\n\t * @param {string} response.slug         Slug of the theme to be deleted.\n\t * @param {string} response.errorCode    Error code for the error that occurred.\n\t * @param {string} response.errorMessage The error that occurred.\n\t */\n\twp.updates.deleteThemeError = function( response ) {\n\t\tvar $themeRow    = $( 'tr.inactive[data-slug=\"' + response.slug + '\"]' ),\n\t\t\t$button      = $( '.theme-actions .delete-theme' ),\n\t\t\tupdateRow    = wp.template( 'item-update-row' ),\n\t\t\t$updateRow   = $themeRow.siblings( '#' + response.slug + '-update' ),\n\t\t\terrorMessage = wp.updates.l10n.deleteFailed.replace( '%s', response.errorMessage ),\n\t\t\t$message     = wp.updates.adminNotice( {\n\t\t\t\tclassName: 'update-message notice-error notice-alt',\n\t\t\t\tmessage:   errorMessage\n\t\t\t} );\n\n\t\tif ( wp.updates.maybeHandleCredentialError( response, 'delete-theme' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( 'themes-network' === pagenow ) {\n\t\t\tif ( ! $updateRow.length ) {\n\t\t\t\t$themeRow.addClass( 'update' ).after(\n\t\t\t\t\tupdateRow( {\n\t\t\t\t\t\tslug: response.slug,\n\t\t\t\t\t\tcolspan: $( '#bulk-action-form' ).find( 'thead th:not(.hidden), thead td' ).length,\n\t\t\t\t\t\tcontent: $message\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// Remove previous error messages, if any.\n\t\t\t\t$updateRow.find( '.notice-error' ).remove();\n\t\t\t\t$updateRow.find( '.plugin-update' ).append( $message );\n\t\t\t}\n\t\t} else {\n\t\t\t$( '.theme-info .theme-description' ).before( $message );\n\t\t}\n\n\t\t$button.html( $button.data( 'originaltext' ) );\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\t$document.trigger( 'wp-theme-delete-error', response );\n\t};\n\n\t/**\n\t * Adds the appropriate callback based on the type of action and the current page.\n\t *\n\t * @since 4.6.0\n\t * @private\n\t *\n\t * @param {object} data   AJAX payload.\n\t * @param {string} action The type of request to perform.\n\t * @return {object} The AJAX payload with the appropriate callbacks.\n\t */\n\twp.updates._addCallbacks = function( data, action ) {\n\t\tif ( 'import' === pagenow && 'install-plugin' === action ) {\n\t\t\tdata.success = wp.updates.installImporterSuccess;\n\t\t\tdata.error   = wp.updates.installImporterError;\n\t\t}\n\n\t\treturn data;\n\t};\n\n\t/**\n\t * Pulls available jobs from the queue and runs them.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 Can handle multiple job types.\n\t */\n\twp.updates.queueChecker = function() {\n\t\tvar job;\n\n\t\tif ( wp.updates.ajaxLocked || ! wp.updates.queue.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tjob = wp.updates.queue.shift();\n\n\t\t// Handle a queue job.\n\t\tswitch ( job.action ) {\n\t\t\tcase 'install-plugin':\n\t\t\t\twp.updates.installPlugin( job.data );\n\t\t\t\tbreak;\n\n\t\t\tcase 'update-plugin':\n\t\t\t\twp.updates.updatePlugin( job.data );\n\t\t\t\tbreak;\n\n\t\t\tcase 'delete-plugin':\n\t\t\t\twp.updates.deletePlugin( job.data );\n\t\t\t\tbreak;\n\n\t\t\tcase 'install-theme':\n\t\t\t\twp.updates.installTheme( job.data );\n\t\t\t\tbreak;\n\n\t\t\tcase 'update-theme':\n\t\t\t\twp.updates.updateTheme( job.data );\n\t\t\t\tbreak;\n\n\t\t\tcase 'delete-theme':\n\t\t\t\twp.updates.deleteTheme( job.data );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\t/**\n\t * Requests the users filesystem credentials if they aren't already known.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param {Event=} event Optional. Event interface.\n\t */\n\twp.updates.requestFilesystemCredentials = function( event ) {\n\t\tif ( false === wp.updates.filesystemCredentials.available ) {\n\t\t\t/*\n\t\t\t * After exiting the credentials request modal,\n\t\t\t * return the focus to the element triggering the request.\n\t\t\t */\n\t\t\tif ( event && ! wp.updates.$elToReturnFocusToFromCredentialsModal ) {\n\t\t\t\twp.updates.$elToReturnFocusToFromCredentialsModal = $( event.target );\n\t\t\t}\n\n\t\t\twp.updates.ajaxLocked = true;\n\t\t\twp.updates.requestForCredentialsModalOpen();\n\t\t}\n\t};\n\n\t/**\n\t * Requests the users filesystem credentials if needed and there is no lock.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param {Event=} event Optional. Event interface.\n\t */\n\twp.updates.maybeRequestFilesystemCredentials = function( event ) {\n\t\tif ( wp.updates.shouldRequestFilesystemCredentials && ! wp.updates.ajaxLocked ) {\n\t\t\twp.updates.requestFilesystemCredentials( event );\n\t\t}\n\t};\n\n\t/**\n\t * Keydown handler for the request for credentials modal.\n\t *\n\t * Closes the modal when the escape key is pressed and\n\t * constrains keyboard navigation to inside the modal.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param {Event} event Event interface.\n\t */\n\twp.updates.keydown = function( event ) {\n\t\tif ( 27 === event.keyCode ) {\n\t\t\twp.updates.requestForCredentialsModalCancel();\n\t\t} else if ( 9 === event.keyCode ) {\n\n\t\t\t// #upgrade button must always be the last focus-able element in the dialog.\n\t\t\tif ( 'upgrade' === event.target.id && ! event.shiftKey ) {\n\t\t\t\t$( '#hostname' ).focus();\n\n\t\t\t\tevent.preventDefault();\n\t\t\t} else if ( 'hostname' === event.target.id && event.shiftKey ) {\n\t\t\t\t$( '#upgrade' ).focus();\n\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Opens the request for credentials modal.\n\t *\n\t * @since 4.2.0\n\t */\n\twp.updates.requestForCredentialsModalOpen = function() {\n\t\tvar $modal = $( '#request-filesystem-credentials-dialog' );\n\n\t\t$( 'body' ).addClass( 'modal-open' );\n\t\t$modal.show();\n\t\t$modal.find( 'input:enabled:first' ).focus();\n\t\t$modal.on( 'keydown', wp.updates.keydown );\n\t};\n\n\t/**\n\t * Closes the request for credentials modal.\n\t *\n\t * @since 4.2.0\n\t */\n\twp.updates.requestForCredentialsModalClose = function() {\n\t\t$( '#request-filesystem-credentials-dialog' ).hide();\n\t\t$( 'body' ).removeClass( 'modal-open' );\n\n\t\tif ( wp.updates.$elToReturnFocusToFromCredentialsModal ) {\n\t\t\twp.updates.$elToReturnFocusToFromCredentialsModal.focus();\n\t\t}\n\t};\n\n\t/**\n\t * Takes care of the steps that need to happen when the modal is canceled out.\n\t *\n\t * @since 4.2.0\n\t * @since 4.6.0 Triggers an event for callbacks to listen to and add their actions.\n\t */\n\twp.updates.requestForCredentialsModalCancel = function() {\n\n\t\t// Not ajaxLocked and no queue means we already have cleared things up.\n\t\tif ( ! wp.updates.ajaxLocked && ! wp.updates.queue.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\t_.each( wp.updates.queue, function( job ) {\n\t\t\t$document.trigger( 'credential-modal-cancel', job );\n\t\t} );\n\n\t\t// Remove the lock, and clear the queue.\n\t\twp.updates.ajaxLocked = false;\n\t\twp.updates.queue = [];\n\n\t\twp.updates.requestForCredentialsModalClose();\n\t};\n\n\t/**\n\t * Displays an error message in the request for credentials form.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param {string} message Error message.\n\t */\n\twp.updates.showErrorInCredentialsForm = function( message ) {\n\t\tvar $filesystemForm = $( '#request-filesystem-credentials-form' );\n\n\t\t// Remove any existing error.\n\t\t$filesystemForm.find( '.notice' ).remove();\n\t\t$filesystemForm.find( '#request-filesystem-credentials-title' ).after( '<div class=\"notice notice-alt notice-error\"><p>' + message + '</p></div>' );\n\t};\n\n\t/**\n\t * Handles credential errors and runs events that need to happen in that case.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param {object} response Ajax response.\n\t * @param {string} action   The type of request to perform.\n\t */\n\twp.updates.credentialError = function( response, action ) {\n\n\t\t// Restore callbacks.\n\t\tresponse = wp.updates._addCallbacks( response, action );\n\n\t\twp.updates.queue.unshift( {\n\t\t\taction: action,\n\n\t\t\t/*\n\t\t\t * Not cool that we're depending on response for this data.\n\t\t\t * This would feel more whole in a view all tied together.\n\t\t\t */\n\t\t\tdata: response\n\t\t} );\n\n\t\twp.updates.filesystemCredentials.available = false;\n\t\twp.updates.showErrorInCredentialsForm( response.errorMessage );\n\t\twp.updates.requestFilesystemCredentials();\n\t};\n\n\t/**\n\t * Handles credentials errors if it could not connect to the filesystem.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @typedef {object} maybeHandleCredentialError\n\t * @param {object} response              Response from the server.\n\t * @param {string} response.errorCode    Error code for the error that occurred.\n\t * @param {string} response.errorMessage The error that occurred.\n\t * @param {string} action                The type of request to perform.\n\t * @returns {boolean} Whether there is an error that needs to be handled or not.\n\t */\n\twp.updates.maybeHandleCredentialError = function( response, action ) {\n\t\tif ( wp.updates.shouldRequestFilesystemCredentials && response.errorCode && 'unable_to_connect_to_filesystem' === response.errorCode ) {\n\t\t\twp.updates.credentialError( response, action );\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\t/**\n\t * Validates an AJAX response to ensure it's a proper object.\n\t *\n\t * If the response deems to be invalid, an admin notice is being displayed.\n\t *\n\t * @param {(object|string)} response              Response from the server.\n\t * @param {function=}       response.always       Optional. Callback for when the Deferred is resolved or rejected.\n\t * @param {string=}         response.statusText   Optional. Status message corresponding to the status code.\n\t * @param {string=}         response.responseText Optional. Request response as text.\n\t * @param {string}          action                Type of action the response is referring to. Can be 'delete',\n\t *                                                'update' or 'install'.\n\t */\n\twp.updates.isValidResponse = function( response, action ) {\n\t\tvar error = wp.updates.l10n.unknownError,\n\t\t    errorMessage;\n\n\t\t// Make sure the response is a valid data object and not a Promise object.\n\t\tif ( _.isObject( response ) && ! _.isFunction( response.always ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( _.isString( response ) && '-1' === response ) {\n\t\t\terror = wp.updates.l10n.nonceError;\n\t\t} else if ( _.isString( response ) ) {\n\t\t\terror = response;\n\t\t} else if ( 'undefined' !== typeof response.readyState && 0 === response.readyState ) {\n\t\t\terror = wp.updates.l10n.connectionError;\n\t\t} else if ( _.isString( response.responseText ) && '' !== response.responseText ) {\n\t\t\terror = response.responseText;\n\t\t} else if ( _.isString( response.statusText ) ) {\n\t\t\terror = response.statusText;\n\t\t}\n\n\t\tswitch ( action ) {\n\t\t\tcase 'update':\n\t\t\t\terrorMessage = wp.updates.l10n.updateFailed;\n\t\t\t\tbreak;\n\n\t\t\tcase 'install':\n\t\t\t\terrorMessage = wp.updates.l10n.installFailed;\n\t\t\t\tbreak;\n\n\t\t\tcase 'delete':\n\t\t\t\terrorMessage = wp.updates.l10n.deleteFailed;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Messages are escaped, remove HTML tags to make them more readable.\n\t\terror = error.replace( /<[\\/a-z][^<>]*>/gi, '' );\n\t\terrorMessage = errorMessage.replace( '%s', error );\n\n\t\t// Add admin notice.\n\t\twp.updates.addAdminNotice( {\n\t\t\tid:        'unknown_error',\n\t\t\tclassName: 'notice-error is-dismissible',\n\t\t\tmessage:   _.escape( errorMessage )\n\t\t} );\n\n\t\t// Remove the lock, and clear the queue.\n\t\twp.updates.ajaxLocked = false;\n\t\twp.updates.queue      = [];\n\n\t\t// Change buttons of all running updates.\n\t\t$( '.button.updating-message' )\n\t\t\t.removeClass( 'updating-message' )\n\t\t\t.removeAttr( 'aria-label' )\n\t\t\t.prop( 'disabled', true )\n\t\t\t.text( wp.updates.l10n.updateFailedShort );\n\n\t\t$( '.updating-message:not(.button):not(.thickbox)' )\n\t\t\t.removeClass( 'updating-message notice-warning' )\n\t\t\t.addClass( 'notice-error' )\n\t\t\t.find( 'p' )\n\t\t\t\t.removeAttr( 'aria-label' )\n\t\t\t\t.text( errorMessage );\n\n\t\twp.a11y.speak( errorMessage, 'assertive' );\n\n\t\treturn false;\n\t};\n\n\t/**\n\t * Potentially adds an AYS to a user attempting to leave the page.\n\t *\n\t * If an update is on-going and a user attempts to leave the page,\n\t * opens an \"Are you sure?\" alert.\n\t *\n\t * @since 4.2.0\n\t */\n\twp.updates.beforeunload = function() {\n\t\tif ( wp.updates.ajaxLocked ) {\n\t\t\treturn wp.updates.l10n.beforeunload;\n\t\t}\n\t};\n\n\t$( function() {\n\t\tvar $pluginFilter        = $( '#plugin-filter' ),\n\t\t\t$bulkActionForm      = $( '#bulk-action-form' ),\n\t\t\t$filesystemForm      = $( '#request-filesystem-credentials-form' ),\n\t\t\t$filesystemModal     = $( '#request-filesystem-credentials-dialog' ),\n\t\t\t$pluginSearch        = $( '.plugins-php .wp-filter-search' ),\n\t\t\t$pluginInstallSearch = $( '.plugin-install-php .wp-filter-search' );\n\n\t\tsettings = _.extend( settings, window._wpUpdatesItemCounts || {} );\n\n\t\tif ( settings.totals ) {\n\t\t\twp.updates.refreshCount();\n\t\t}\n\n\t\t/*\n\t\t * Whether a user needs to submit filesystem credentials.\n\t\t *\n\t\t * This is based on whether the form was output on the page server-side.\n\t\t *\n\t\t * @see {wp_print_request_filesystem_credentials_modal() in PHP}\n\t\t */\n\t\twp.updates.shouldRequestFilesystemCredentials = $filesystemModal.length > 0;\n\n\t\t/**\n\t\t * File system credentials form submit noop-er / handler.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\t$filesystemModal.on( 'submit', 'form', function( event ) {\n\t\t\tevent.preventDefault();\n\n\t\t\t// Persist the credentials input by the user for the duration of the page load.\n\t\t\twp.updates.filesystemCredentials.ftp.hostname       = $( '#hostname' ).val();\n\t\t\twp.updates.filesystemCredentials.ftp.username       = $( '#username' ).val();\n\t\t\twp.updates.filesystemCredentials.ftp.password       = $( '#password' ).val();\n\t\t\twp.updates.filesystemCredentials.ftp.connectionType = $( 'input[name=\"connection_type\"]:checked' ).val();\n\t\t\twp.updates.filesystemCredentials.ssh.publicKey      = $( '#public_key' ).val();\n\t\t\twp.updates.filesystemCredentials.ssh.privateKey     = $( '#private_key' ).val();\n\t\t\twp.updates.filesystemCredentials.fsNonce            = $( '#_fs_nonce' ).val();\n\t\t\twp.updates.filesystemCredentials.available          = true;\n\n\t\t\t// Unlock and invoke the queue.\n\t\t\twp.updates.ajaxLocked = false;\n\t\t\twp.updates.queueChecker();\n\n\t\t\twp.updates.requestForCredentialsModalClose();\n\t\t} );\n\n\t\t/**\n\t\t * Closes the request credentials modal when clicking the 'Cancel' button or outside of the modal.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\t$filesystemModal.on( 'click', '[data-js-action=\"close\"], .notification-dialog-background', wp.updates.requestForCredentialsModalCancel );\n\n\t\t/**\n\t\t * Hide SSH fields when not selected.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\t$filesystemForm.on( 'change', 'input[name=\"connection_type\"]', function() {\n\t\t\t$( '#ssh-keys' ).toggleClass( 'hidden', ( 'ssh' !== $( this ).val() ) );\n\t\t} ).change();\n\n\t\t/**\n\t\t * Handles events after the credential modal was closed.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event}  event Event interface.\n\t\t * @param {string} job   The install/update.delete request.\n\t\t */\n\t\t$document.on( 'credential-modal-cancel', function( event, job ) {\n\t\t\tvar $updatingMessage = $( '.updating-message' ),\n\t\t\t\t$message, originalText;\n\n\t\t\tif ( 'import' === pagenow ) {\n\t\t\t\t$updatingMessage.removeClass( 'updating-message' );\n\t\t\t} else if ( 'plugins' === pagenow || 'plugins-network' === pagenow ) {\n\t\t\t\tif ( 'update-plugin' === job.action ) {\n\t\t\t\t\t$message = $( 'tr[data-plugin=\"' + job.data.plugin + '\"]' ).find( '.update-message' );\n\t\t\t\t} else if ( 'delete-plugin' === job.action ) {\n\t\t\t\t\t$message = $( '[data-plugin=\"' + job.data.plugin + '\"]' ).find( '.row-actions a.delete' );\n\t\t\t\t}\n\t\t\t} else if ( 'themes' === pagenow || 'themes-network' === pagenow ) {\n\t\t\t\tif ( 'update-theme' === job.action ) {\n\t\t\t\t\t$message = $( '[data-slug=\"' + job.data.slug + '\"]' ).find( '.update-message' );\n\t\t\t\t} else if ( 'delete-theme' === job.action && 'themes-network' === pagenow ) {\n\t\t\t\t\t$message = $( '[data-slug=\"' + job.data.slug + '\"]' ).find( '.row-actions a.delete' );\n\t\t\t\t} else if ( 'delete-theme' === job.action && 'themes' === pagenow ) {\n\t\t\t\t\t$message = $( '.theme-actions .delete-theme' );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$message = $updatingMessage;\n\t\t\t}\n\n\t\t\tif ( $message && $message.hasClass( 'updating-message' ) ) {\n\t\t\t\toriginalText = $message.data( 'originaltext' );\n\n\t\t\t\tif ( 'undefined' === typeof originalText ) {\n\t\t\t\t\toriginalText = $( '<p>' ).html( $message.find( 'p' ).data( 'originaltext' ) );\n\t\t\t\t}\n\n\t\t\t\t$message\n\t\t\t\t\t.removeClass( 'updating-message' )\n\t\t\t\t\t.html( originalText );\n\n\t\t\t\tif ( 'plugin-install' === pagenow || 'plugin-install-network' === pagenow ) {\n\t\t\t\t\tif ( 'update-plugin' === job.action ) {\n\t\t\t\t\t\t$message.attr( 'aria-label', wp.updates.l10n.pluginUpdateNowLabel.replace( '%s', $message.data( 'name' ) ) );\n\t\t\t\t\t} else if ( 'install-plugin' === job.action ) {\n\t\t\t\t\t\t$message.attr( 'aria-label', wp.updates.l10n.pluginInstallNowLabel.replace( '%s', $message.data( 'name' ) ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twp.a11y.speak( wp.updates.l10n.updateCancel, 'polite' );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for plugin updates in List Table view.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$bulkActionForm.on( 'click', '[data-plugin] .update-link', function( event ) {\n\t\t\tvar $message   = $( event.target ),\n\t\t\t\t$pluginRow = $message.parents( 'tr' );\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( $message.hasClass( 'updating-message' ) || $message.hasClass( 'button-disabled' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\t// Return the user to the input box of the plugin's table row after closing the modal.\n\t\t\twp.updates.$elToReturnFocusToFromCredentialsModal = $pluginRow.find( '.check-column input' );\n\t\t\twp.updates.updatePlugin( {\n\t\t\t\tplugin: $pluginRow.data( 'plugin' ),\n\t\t\t\tslug:   $pluginRow.data( 'slug' )\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for plugin updates in plugin install view.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$pluginFilter.on( 'click', '.update-now', function( event ) {\n\t\t\tvar $button = $( event.target );\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( $button.hasClass( 'updating-message' ) || $button.hasClass( 'button-disabled' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\twp.updates.updatePlugin( {\n\t\t\t\tplugin: $button.data( 'plugin' ),\n\t\t\t\tslug:   $button.data( 'slug' )\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for plugin installs in plugin install view.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$pluginFilter.on( 'click', '.install-now', function( event ) {\n\t\t\tvar $button = $( event.target );\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( $button.hasClass( 'updating-message' ) || $button.hasClass( 'button-disabled' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( wp.updates.shouldRequestFilesystemCredentials && ! wp.updates.ajaxLocked ) {\n\t\t\t\twp.updates.requestFilesystemCredentials( event );\n\n\t\t\t\t$document.on( 'credential-modal-cancel', function() {\n\t\t\t\t\tvar $message = $( '.install-now.updating-message' );\n\n\t\t\t\t\t$message\n\t\t\t\t\t\t.removeClass( 'updating-message' )\n\t\t\t\t\t\t.text( wp.updates.l10n.installNow );\n\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.updateCancel, 'polite' );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\twp.updates.installPlugin( {\n\t\t\t\tslug: $button.data( 'slug' )\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for importer plugins installs in the Import screen.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$document.on( 'click', '.importer-item .install-now', function( event ) {\n\t\t\tvar $button = $( event.target ),\n\t\t\t\tpluginName = $( this ).data( 'name' );\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( $button.hasClass( 'updating-message' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( wp.updates.shouldRequestFilesystemCredentials && ! wp.updates.ajaxLocked ) {\n\t\t\t\twp.updates.requestFilesystemCredentials( event );\n\n\t\t\t\t$document.on( 'credential-modal-cancel', function() {\n\n\t\t\t\t\t$button\n\t\t\t\t\t\t.removeClass( 'updating-message' )\n\t\t\t\t\t\t.text( wp.updates.l10n.installNow )\n\t\t\t\t\t\t.attr( 'aria-label', wp.updates.l10n.installNowLabel.replace( '%s', pluginName ) );\n\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.updateCancel, 'polite' );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\twp.updates.installPlugin( {\n\t\t\t\tslug:    $button.data( 'slug' ),\n\t\t\t\tpagenow: pagenow,\n\t\t\t\tsuccess: wp.updates.installImporterSuccess,\n\t\t\t\terror:   wp.updates.installImporterError\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for plugin deletions.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$bulkActionForm.on( 'click', '[data-plugin] a.delete', function( event ) {\n\t\t\tvar $pluginRow = $( event.target ).parents( 'tr' );\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( ! window.confirm( wp.updates.l10n.aysDeleteUninstall.replace( '%s', $pluginRow.find( '.plugin-title strong' ).text() ) ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\twp.updates.deletePlugin( {\n\t\t\t\tplugin: $pluginRow.data( 'plugin' ),\n\t\t\t\tslug:   $pluginRow.data( 'slug' )\n\t\t\t} );\n\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for theme updates.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$document.on( 'click', '.themes-php.network-admin .update-link', function( event ) {\n\t\t\tvar $message  = $( event.target ),\n\t\t\t\t$themeRow = $message.parents( 'tr' );\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( $message.hasClass( 'updating-message' ) || $message.hasClass( 'button-disabled' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\t// Return the user to the input box of the theme's table row after closing the modal.\n\t\t\twp.updates.$elToReturnFocusToFromCredentialsModal = $themeRow.find( '.check-column input' );\n\t\t\twp.updates.updateTheme( {\n\t\t\t\tslug: $themeRow.data( 'slug' )\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for theme deletions.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$document.on( 'click', '.themes-php.network-admin a.delete', function( event ) {\n\t\t\tvar $themeRow = $( event.target ).parents( 'tr' );\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( ! window.confirm( wp.updates.l10n.aysDelete.replace( '%s', $themeRow.find( '.theme-title strong' ).text() ) ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\twp.updates.deleteTheme( {\n\t\t\t\tslug: $themeRow.data( 'slug' )\n\t\t\t} );\n\t\t} );\n\n\t\t/**\n\t\t * Bulk action handler for plugins and themes.\n\t\t *\n\t\t * Handles both deletions and updates.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$bulkActionForm.on( 'click', '[type=\"submit\"]', function( event ) {\n\t\t\tvar bulkAction    = $( event.target ).siblings( 'select' ).val(),\n\t\t\t\titemsSelected = $bulkActionForm.find( 'input[name=\"checked[]\"]:checked' ),\n\t\t\t\tsuccess       = 0,\n\t\t\t\terror         = 0,\n\t\t\t\terrorMessages = [],\n\t\t\t\ttype, action;\n\n\t\t\t// Determine which type of item we're dealing with.\n\t\t\tswitch ( pagenow ) {\n\t\t\t\tcase 'plugins':\n\t\t\t\tcase 'plugins-network':\n\t\t\t\t\ttype = 'plugin';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'themes-network':\n\t\t\t\t\ttype = 'theme';\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Bail if there were no items selected.\n\t\t\tif ( ! itemsSelected.length ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\t$( 'html, body' ).animate( { scrollTop: 0 } );\n\n\t\t\t\treturn wp.updates.addAdminNotice( {\n\t\t\t\t\tid:        'no-items-selected',\n\t\t\t\t\tclassName: 'notice-error is-dismissible',\n\t\t\t\t\tmessage:   wp.updates.l10n.noItemsSelected\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Determine the type of request we're dealing with.\n\t\t\tswitch ( bulkAction ) {\n\t\t\t\tcase 'update-selected':\n\t\t\t\t\taction = bulkAction.replace( 'selected', type );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'delete-selected':\n\t\t\t\t\tif ( ! window.confirm( 'plugin' === type ? wp.updates.l10n.aysBulkDelete : wp.updates.l10n.aysBulkDeleteThemes ) ) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\taction = bulkAction.replace( 'selected', type );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twp.updates.maybeRequestFilesystemCredentials( event );\n\n\t\t\tevent.preventDefault();\n\n\t\t\t// Un-check the bulk checkboxes.\n\t\t\t$bulkActionForm.find( '.manage-column [type=\"checkbox\"]' ).prop( 'checked', false );\n\n\t\t\t$document.trigger( 'wp-' + type + '-bulk-' + bulkAction, itemsSelected );\n\n\t\t\t// Find all the checkboxes which have been checked.\n\t\t\titemsSelected.each( function( index, element ) {\n\t\t\t\tvar $checkbox = $( element ),\n\t\t\t\t\t$itemRow = $checkbox.parents( 'tr' );\n\n\t\t\t\t// Only add update-able items to the update queue.\n\t\t\t\tif ( 'update-selected' === bulkAction && ( ! $itemRow.hasClass( 'update' ) || $itemRow.find( 'notice-error' ).length ) ) {\n\n\t\t\t\t\t// Un-check the box.\n\t\t\t\t\t$checkbox.prop( 'checked', false );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Add it to the queue.\n\t\t\t\twp.updates.queue.push( {\n\t\t\t\t\taction: action,\n\t\t\t\t\tdata:   {\n\t\t\t\t\t\tplugin: $itemRow.data( 'plugin' ),\n\t\t\t\t\t\tslug:   $itemRow.data( 'slug' )\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\t// Display bulk notification for updates of any kind.\n\t\t\t$document.on( 'wp-plugin-update-success wp-plugin-update-error wp-theme-update-success wp-theme-update-error', function( event, response ) {\n\t\t\t\tvar $itemRow = $( '[data-slug=\"' + response.slug + '\"]' ),\n\t\t\t\t\t$bulkActionNotice, itemName;\n\n\t\t\t\tif ( 'wp-' + response.update + '-update-success' === event.type ) {\n\t\t\t\t\tsuccess++;\n\t\t\t\t} else {\n\t\t\t\t\titemName = response.pluginName ? response.pluginName : $itemRow.find( '.column-primary strong' ).text();\n\n\t\t\t\t\terror++;\n\t\t\t\t\terrorMessages.push( itemName + ': ' + response.errorMessage );\n\t\t\t\t}\n\n\t\t\t\t$itemRow.find( 'input[name=\"checked[]\"]:checked' ).prop( 'checked', false );\n\n\t\t\t\twp.updates.adminNotice = wp.template( 'wp-bulk-updates-admin-notice' );\n\n\t\t\t\twp.updates.addAdminNotice( {\n\t\t\t\t\tid:            'bulk-action-notice',\n\t\t\t\t\tclassName:     'bulk-action-notice',\n\t\t\t\t\tsuccesses:     success,\n\t\t\t\t\terrors:        error,\n\t\t\t\t\terrorMessages: errorMessages,\n\t\t\t\t\ttype:          response.update\n\t\t\t\t} );\n\n\t\t\t\t$bulkActionNotice = $( '#bulk-action-notice' ).on( 'click', 'button', function() {\n\t\t\t\t\t// $( this ) is the clicked button, no need to get it again.\n\t\t\t\t\t$( this )\n\t\t\t\t\t\t.toggleClass( 'bulk-action-errors-collapsed' )\n\t\t\t\t\t\t.attr( 'aria-expanded', ! $( this ).hasClass( 'bulk-action-errors-collapsed' ) );\n\t\t\t\t\t// Show the errors list.\n\t\t\t\t\t$bulkActionNotice.find( '.bulk-action-errors' ).toggleClass( 'hidden' );\n\t\t\t\t} );\n\n\t\t\t\tif ( error > 0 && ! wp.updates.queue.length ) {\n\t\t\t\t\t$( 'html, body' ).animate( { scrollTop: 0 } );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Reset admin notice template after #bulk-action-notice was added.\n\t\t\t$document.on( 'wp-updates-notice-added', function() {\n\t\t\t\twp.updates.adminNotice = wp.template( 'wp-updates-admin-notice' );\n\t\t\t} );\n\n\t\t\t// Check the queue, now that the event handlers have been added.\n\t\t\twp.updates.queueChecker();\n\t\t} );\n\n\t\tif ( $pluginInstallSearch.length ) {\n\t\t\t$pluginInstallSearch.attr( 'aria-describedby', 'live-search-desc' );\n\t\t}\n\n\t\t/**\n\t\t * Handles changes to the plugin search box on the new-plugin page,\n\t\t * searching the repository dynamically.\n\t\t *\n\t\t * @since 4.6.0\n\t\t */\n\t\t$pluginInstallSearch.on( 'keyup input', _.debounce( function( event, eventtype ) {\n\t\t\tvar $searchTab = $( '.plugin-install-search' ), data, searchLocation;\n\n\t\t\tdata = {\n\t\t\t\t_ajax_nonce: wp.updates.ajaxNonce,\n\t\t\t\ts:           event.target.value,\n\t\t\t\ttab:         'search',\n\t\t\t\ttype:        $( '#typeselector' ).val(),\n\t\t\t\tpagenow:     pagenow\n\t\t\t};\n\t\t\tsearchLocation = location.href.split( '?' )[ 0 ] + '?' + $.param( _.omit( data, [ '_ajax_nonce', 'pagenow' ] ) );\n\n\t\t\t// Clear on escape.\n\t\t\tif ( 'keyup' === event.type && 27 === event.which ) {\n\t\t\t\tevent.target.value = '';\n\t\t\t}\n\n\t\t\tif ( wp.updates.searchTerm === data.s && 'typechange' !== eventtype ) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t$pluginFilter.empty();\n\t\t\t\twp.updates.searchTerm = data.s;\n\t\t\t}\n\n\t\t\tif ( window.history && window.history.replaceState ) {\n\t\t\t\twindow.history.replaceState( null, '', searchLocation );\n\t\t\t}\n\n\t\t\tif ( ! $searchTab.length ) {\n\t\t\t\t$searchTab = $( '<li class=\"plugin-install-search\" />' )\n\t\t\t\t\t.append( $( '<a />', {\n\t\t\t\t\t\t'class': 'current',\n\t\t\t\t\t\t'href': searchLocation,\n\t\t\t\t\t\t'text': wp.updates.l10n.searchResultsLabel\n\t\t\t\t\t} ) );\n\n\t\t\t\t$( '.wp-filter .filter-links .current' )\n\t\t\t\t\t.removeClass( 'current' )\n\t\t\t\t\t.parents( '.filter-links' )\n\t\t\t\t\t.prepend( $searchTab );\n\n\t\t\t\t$pluginFilter.prev( 'p' ).remove();\n\t\t\t\t$( '.plugins-popular-tags-wrapper' ).remove();\n\t\t\t}\n\n\t\t\tif ( 'undefined' !== typeof wp.updates.searchRequest ) {\n\t\t\t\twp.updates.searchRequest.abort();\n\t\t\t}\n\t\t\t$( 'body' ).addClass( 'loading-content' );\n\n\t\t\twp.updates.searchRequest = wp.ajax.post( 'search-install-plugins', data ).done( function( response ) {\n\t\t\t\t$( 'body' ).removeClass( 'loading-content' );\n\t\t\t\t$pluginFilter.append( response.items );\n\t\t\t\tdelete wp.updates.searchRequest;\n\n\t\t\t\tif ( 0 === response.count ) {\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.noPluginsFound );\n\t\t\t\t} else {\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.pluginsFound.replace( '%d', response.count ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t}, 500 ) );\n\n\t\tif ( $pluginSearch.length ) {\n\t\t\t$pluginSearch.attr( 'aria-describedby', 'live-search-desc' );\n\t\t}\n\n\t\t/**\n\t\t * Handles changes to the plugin search box on the Installed Plugins screen,\n\t\t * searching the plugin list dynamically.\n\t\t *\n\t\t * @since 4.6.0\n\t\t */\n\t\t$pluginSearch.on( 'keyup input', _.debounce( function( event ) {\n\t\t\tvar data = {\n\t\t\t\t_ajax_nonce:   wp.updates.ajaxNonce,\n\t\t\t\ts:             event.target.value,\n\t\t\t\tpagenow:       pagenow,\n\t\t\t\tplugin_status: 'all'\n\t\t\t},\n\t\t\tqueryArgs;\n\n\t\t\t// Clear on escape.\n\t\t\tif ( 'keyup' === event.type && 27 === event.which ) {\n\t\t\t\tevent.target.value = '';\n\t\t\t}\n\n\t\t\tif ( wp.updates.searchTerm === data.s ) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\twp.updates.searchTerm = data.s;\n\t\t\t}\n\n\t\t\tqueryArgs = _.object( _.compact( _.map( location.search.slice( 1 ).split( '&' ), function( item ) {\n\t\t\t\tif ( item ) return item.split( '=' );\n\t\t\t} ) ) );\n\n\t\t\tdata.plugin_status = queryArgs.plugin_status || 'all';\n\n\t\t\tif ( window.history && window.history.replaceState ) {\n\t\t\t\twindow.history.replaceState( null, '', location.href.split( '?' )[ 0 ] + '?s=' + data.s + '&plugin_status=' + data.plugin_status );\n\t\t\t}\n\n\t\t\tif ( 'undefined' !== typeof wp.updates.searchRequest ) {\n\t\t\t\twp.updates.searchRequest.abort();\n\t\t\t}\n\n\t\t\t$bulkActionForm.empty();\n\t\t\t$( 'body' ).addClass( 'loading-content' );\n\t\t\t$( '.subsubsub .current' ).removeClass( 'current' );\n\n\t\t\twp.updates.searchRequest = wp.ajax.post( 'search-plugins', data ).done( function( response ) {\n\n\t\t\t\t// Can we just ditch this whole subtitle business?\n\t\t\t\tvar $subTitle    = $( '<span />' ).addClass( 'subtitle' ).html( wp.updates.l10n.searchResults.replace( '%s', _.escape( data.s ) ) ),\n\t\t\t\t\t$oldSubTitle = $( '.wrap .subtitle' );\n\n\t\t\t\tif ( ! data.s.length ) {\n\t\t\t\t\t$oldSubTitle.remove();\n\t\t\t\t\t$( '.subsubsub .' + data.plugin_status + ' a' ).addClass( 'current' );\n\t\t\t\t} else if ( $oldSubTitle.length ) {\n\t\t\t\t\t$oldSubTitle.replaceWith( $subTitle );\n\t\t\t\t} else {\n\t\t\t\t\t$( '.wp-header-end' ).before( $subTitle );\n\t\t\t\t}\n\n\t\t\t\t$( 'body' ).removeClass( 'loading-content' );\n\t\t\t\t$bulkActionForm.append( response.items );\n\t\t\t\tdelete wp.updates.searchRequest;\n\n\t\t\t\tif ( 0 === response.count ) {\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.noPluginsFound );\n\t\t\t\t} else {\n\t\t\t\t\twp.a11y.speak( wp.updates.l10n.pluginsFound.replace( '%d', response.count ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t}, 500 ) );\n\n\t\t/**\n\t\t * Trigger a search event when the search form gets submitted.\n\t\t *\n\t\t * @since 4.6.0\n\t\t */\n\t\t$document.on( 'submit', '.search-plugins', function( event ) {\n\t\t\tevent.preventDefault();\n\n\t\t\t$( 'input.wp-filter-search' ).trigger( 'input' );\n\t\t} );\n\n\t\t/**\n\t\t * Trigger a search event when the search type gets changed.\n\t\t *\n\t\t * @since 4.6.0\n\t\t */\n\t\t$( '#typeselector' ).on( 'change', function() {\n\t\t\tvar $search = $( 'input[name=\"s\"]' );\n\n\t\t\tif ( $search.val().length ) {\n\t\t\t\t$search.trigger( 'input', 'typechange' );\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for updating a plugin from the details modal on `plugin-install.php`.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$( '#plugin_update_from_iframe' ).on( 'click', function( event ) {\n\t\t\tvar target = window.parent === window ? null : window.parent,\n\t\t\t\tupdate;\n\n\t\t\t$.support.postMessage = !! window.postMessage;\n\n\t\t\tif ( false === $.support.postMessage || null === target || -1 !== window.parent.location.pathname.indexOf( 'update-core.php' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tupdate = {\n\t\t\t\taction: 'update-plugin',\n\t\t\t\tdata:   {\n\t\t\t\t\tplugin: $( this ).data( 'plugin' ),\n\t\t\t\t\tslug:   $( this ).data( 'slug' )\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttarget.postMessage( JSON.stringify( update ), window.location.origin );\n\t\t} );\n\n\t\t/**\n\t\t * Click handler for installing a plugin from the details modal on `plugin-install.php`.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$( '#plugin_install_from_iframe' ).on( 'click', function( event ) {\n\t\t\tvar target = window.parent === window ? null : window.parent,\n\t\t\t\tinstall;\n\n\t\t\t$.support.postMessage = !! window.postMessage;\n\n\t\t\tif ( false === $.support.postMessage || null === target || -1 !== window.parent.location.pathname.indexOf( 'index.php' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tinstall = {\n\t\t\t\taction: 'install-plugin',\n\t\t\t\tdata:   {\n\t\t\t\t\tslug: $( this ).data( 'slug' )\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttarget.postMessage( JSON.stringify( install ), window.location.origin );\n\t\t} );\n\n\t\t/**\n\t\t * Handles postMessage events.\n\t\t *\n\t\t * @since 4.2.0\n\t\t * @since 4.6.0 Switched `update-plugin` action to use the queue.\n\t\t *\n\t\t * @param {Event} event Event interface.\n\t\t */\n\t\t$( window ).on( 'message', function( event ) {\n\t\t\tvar originalEvent  = event.originalEvent,\n\t\t\t\texpectedOrigin = document.location.protocol + '//' + document.location.hostname,\n\t\t\t\tmessage;\n\n\t\t\tif ( originalEvent.origin !== expectedOrigin ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tmessage = $.parseJSON( originalEvent.data );\n\t\t\t} catch ( e ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( 'undefined' === typeof message.action ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch ( message.action ) {\n\n\t\t\t\t// Called from `wp-admin/includes/class-wp-upgrader-skins.php`.\n\t\t\t\tcase 'decrementUpdateCount':\n\t\t\t\t\t/** @property {string} message.upgradeType */\n\t\t\t\t\twp.updates.decrementCount( message.upgradeType );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'install-plugin':\n\t\t\t\tcase 'update-plugin':\n\t\t\t\t\t/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n\t\t\t\t\twindow.tb_remove();\n\t\t\t\t\t/* jscs:enable */\n\n\t\t\t\t\tmessage.data = wp.updates._addCallbacks( message.data, message.action );\n\n\t\t\t\t\twp.updates.queue.push( message );\n\t\t\t\t\twp.updates.queueChecker();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Adds a callback to display a warning before leaving the page.\n\t\t *\n\t\t * @since 4.2.0\n\t\t */\n\t\t$( window ).on( 'beforeunload', wp.updates.beforeunload );\n\t} );\n})( jQuery, window.wp, window._wpUpdatesSettings );\n", "!function(a,b,c){var d=a(document);b=b||{},b.updates={},b.updates.ajaxNonce=c.ajax_nonce,b.updates.l10n=c.l10n,b.updates.searchTerm=\"\",b.updates.shouldRequestFilesystemCredentials=!1,b.updates.filesystemCredentials={ftp:{host:\"\",username:\"\",password:\"\",connectionType:\"\"},ssh:{publicKey:\"\",privateKey:\"\"},fsNonce:\"\",available:!1},b.updates.ajaxLocked=!1,b.updates.adminNotice=b.template(\"wp-updates-admin-notice\"),b.updates.queue=[],b.updates.$elToReturnFocusToFromCredentialsModal=void 0,b.updates.addAdminNotice=function(c){var e,f=a(c.selector);delete c.selector,e=b.updates.adminNotice(c),f.length||(f=a(\"#\"+c.id)),f.length?f.replaceWith(e):a(\".wrap\").find(\"> h1\").after(e),d.trigger(\"wp-updates-notice-added\")},b.updates.ajax=function(c,d){var e={};return b.updates.ajaxLocked?(b.updates.queue.push({action:c,data:d}),a.Deferred()):(b.updates.ajaxLocked=!0,d.success&&(e.success=d.success,delete d.success),d.error&&(e.error=d.error,delete d.error),e.data=_.extend(d,{action:c,_ajax_nonce:b.updates.ajaxNonce,_fs_nonce:b.updates.filesystemCredentials.fsNonce,username:b.updates.filesystemCredentials.ftp.username,password:b.updates.filesystemCredentials.ftp.password,hostname:b.updates.filesystemCredentials.ftp.hostname,connection_type:b.updates.filesystemCredentials.ftp.connectionType,public_key:b.updates.filesystemCredentials.ssh.publicKey,private_key:b.updates.filesystemCredentials.ssh.privateKey}),b.ajax.send(e).always(b.updates.ajaxAlways))},b.updates.ajaxAlways=function(c){c.errorCode&&\"unable_to_connect_to_filesystem\"===c.errorCode||(b.updates.ajaxLocked=!1,b.updates.queueChecker()),\"undefined\"!=typeof c.debug&&window.console&&window.console.log&&_.map(c.debug,function(b){window.console.log(a(\"<p />\").html(b).text())})},b.updates.refreshCount=function(){var b,d=a(\"#wp-admin-bar-updates\"),e=a('a[href=\"update-core.php\"] .update-plugins'),f=a('a[href=\"plugins.php\"] .update-plugins'),g=a('a[href=\"themes.php\"] .update-plugins');d.find(\".ab-item\").removeAttr(\"title\"),d.find(\".ab-label\").text(c.totals.counts.total),0===c.totals.counts.total&&d.find(\".ab-label\").parents(\"li\").remove(),e.each(function(a,b){b.className=b.className.replace(/count-\\d+/,\"count-\"+c.totals.counts.total)}),c.totals.counts.total>0?e.find(\".update-count\").text(c.totals.counts.total):e.remove(),f.each(function(a,b){b.className=b.className.replace(/count-\\d+/,\"count-\"+c.totals.counts.plugins)}),c.totals.counts.total>0?f.find(\".plugin-count\").text(c.totals.counts.plugins):f.remove(),g.each(function(a,b){b.className=b.className.replace(/count-\\d+/,\"count-\"+c.totals.counts.themes)}),c.totals.counts.total>0?g.find(\".theme-count\").text(c.totals.counts.themes):g.remove(),\"plugins\"===pagenow||\"plugins-network\"===pagenow?b=c.totals.counts.plugins:\"themes\"!==pagenow&&\"themes-network\"!==pagenow||(b=c.totals.counts.themes),b>0?a(\".subsubsub .upgrade .count\").text(\"(\"+b+\")\"):(a(\".subsubsub .upgrade\").remove(),a(\".subsubsub li:last\").html(function(){return a(this).children()}))},b.updates.decrementCount=function(a){c.totals.counts.total=Math.max(--c.totals.counts.total,0),\"plugin\"===a?c.totals.counts.plugins=Math.max(--c.totals.counts.plugins,0):\"theme\"===a&&(c.totals.counts.themes=Math.max(--c.totals.counts.themes,0)),b.updates.refreshCount(a)},b.updates.updatePlugin=function(c){var e,f,g,h;return c=_.extend({success:b.updates.updatePluginSuccess,error:b.updates.updatePluginError},c),\"plugins\"===pagenow||\"plugins-network\"===pagenow?(e=a('tr[data-plugin=\"'+c.plugin+'\"]'),g=e.find(\".update-message\").removeClass(\"notice-error\").addClass(\"updating-message notice-warning\").find(\"p\"),h=b.updates.l10n.pluginUpdatingLabel.replace(\"%s\",e.find(\".plugin-title strong\").text())):\"plugin-install\"!==pagenow&&\"plugin-install-network\"!==pagenow||(f=a(\".plugin-card-\"+c.slug),g=f.find(\".update-now\").addClass(\"updating-message\"),h=b.updates.l10n.pluginUpdatingLabel.replace(\"%s\",g.data(\"name\")),f.removeClass(\"plugin-card-update-failed\").find(\".notice.notice-error\").remove()),g.html()!==b.updates.l10n.updating&&g.data(\"originaltext\",g.html()),g.attr(\"aria-label\",h).text(b.updates.l10n.updating),d.trigger(\"wp-plugin-updating\",c),b.updates.ajax(\"update-plugin\",c)},b.updates.updatePluginSuccess=function(c){var e,f,g;\"plugins\"===pagenow||\"plugins-network\"===pagenow?(e=a('tr[data-plugin=\"'+c.plugin+'\"]').removeClass(\"update\").addClass(\"updated\"),f=e.find(\".update-message\").removeClass(\"updating-message notice-warning\").addClass(\"updated-message notice-success\").find(\"p\"),g=e.find(\".plugin-version-author-uri\").html().replace(c.oldVersion,c.newVersion),e.find(\".plugin-version-author-uri\").html(g)):\"plugin-install\"!==pagenow&&\"plugin-install-network\"!==pagenow||(f=a(\".plugin-card-\"+c.slug).find(\".update-now\").removeClass(\"updating-message\").addClass(\"button-disabled updated-message\")),f.attr(\"aria-label\",b.updates.l10n.pluginUpdatedLabel.replace(\"%s\",c.pluginName)).text(b.updates.l10n.pluginUpdated),b.a11y.speak(b.updates.l10n.updatedMsg,\"polite\"),b.updates.decrementCount(\"plugin\"),d.trigger(\"wp-plugin-update-success\",c)},b.updates.updatePluginError=function(c){var e,f,g;b.updates.isValidResponse(c,\"update\")&&(b.updates.maybeHandleCredentialError(c,\"update-plugin\")||(g=b.updates.l10n.updateFailed.replace(\"%s\",c.errorMessage),\"plugins\"===pagenow||\"plugins-network\"===pagenow?(f=c.plugin?a('tr[data-plugin=\"'+c.plugin+'\"]').find(\".update-message\"):a('tr[data-slug=\"'+c.slug+'\"]').find(\".update-message\"),f.removeClass(\"updating-message notice-warning\").addClass(\"notice-error\").find(\"p\").html(g),c.pluginName?f.find(\"p\").attr(\"aria-label\",b.updates.l10n.pluginUpdateFailedLabel.replace(\"%s\",c.pluginName)):f.find(\"p\").removeAttr(\"aria-label\")):\"plugin-install\"!==pagenow&&\"plugin-install-network\"!==pagenow||(e=a(\".plugin-card-\"+c.slug).addClass(\"plugin-card-update-failed\").append(b.updates.adminNotice({className:\"update-message notice-error notice-alt is-dismissible\",message:g})),e.find(\".update-now\").text(b.updates.l10n.updateFailedShort).removeClass(\"updating-message\"),c.pluginName?e.find(\".update-now\").attr(\"aria-label\",b.updates.l10n.pluginUpdateFailedLabel.replace(\"%s\",c.pluginName)):e.find(\".update-now\").removeAttr(\"aria-label\"),e.on(\"click\",\".notice.is-dismissible .notice-dismiss\",function(){setTimeout(function(){e.removeClass(\"plugin-card-update-failed\").find(\".column-name a\").focus(),e.find(\".update-now\").attr(\"aria-label\",!1).text(b.updates.l10n.updateNow)},200)})),b.a11y.speak(g,\"assertive\"),d.trigger(\"wp-plugin-update-error\",c)))},b.updates.installPlugin=function(c){var e=a(\".plugin-card-\"+c.slug),f=e.find(\".install-now\");return c=_.extend({success:b.updates.installPluginSuccess,error:b.updates.installPluginError},c),\"import\"===pagenow&&(f=a('[data-slug=\"'+c.slug+'\"]')),f.html()!==b.updates.l10n.installing&&f.data(\"originaltext\",f.html()),f.addClass(\"updating-message\").attr(\"aria-label\",b.updates.l10n.pluginInstallingLabel.replace(\"%s\",f.data(\"name\"))).text(b.updates.l10n.installing),b.a11y.speak(b.updates.l10n.installingMsg,\"polite\"),e.removeClass(\"plugin-card-install-failed\").find(\".notice.notice-error\").remove(),d.trigger(\"wp-plugin-installing\",c),b.updates.ajax(\"install-plugin\",c)},b.updates.installPluginSuccess=function(c){var e=a(\".plugin-card-\"+c.slug).find(\".install-now\");e.removeClass(\"updating-message\").addClass(\"updated-message installed button-disabled\").attr(\"aria-label\",b.updates.l10n.pluginInstalledLabel.replace(\"%s\",c.pluginName)).text(b.updates.l10n.pluginInstalled),b.a11y.speak(b.updates.l10n.installedMsg,\"polite\"),d.trigger(\"wp-plugin-install-success\",c),c.activateUrl&&setTimeout(function(){e.removeClass(\"install-now installed button-disabled updated-message\").addClass(\"activate-now button-primary\").attr(\"href\",c.activateUrl).attr(\"aria-label\",b.updates.l10n.activatePluginLabel.replace(\"%s\",c.pluginName)).text(b.updates.l10n.activatePlugin)},1e3)},b.updates.installPluginError=function(c){var e,f=a(\".plugin-card-\"+c.slug),g=f.find(\".install-now\");b.updates.isValidResponse(c,\"install\")&&(b.updates.maybeHandleCredentialError(c,\"install-plugin\")||(e=b.updates.l10n.installFailed.replace(\"%s\",c.errorMessage),f.addClass(\"plugin-card-update-failed\").append('<div class=\"notice notice-error notice-alt is-dismissible\"><p>'+e+\"</p></div>\"),f.on(\"click\",\".notice.is-dismissible .notice-dismiss\",function(){setTimeout(function(){f.removeClass(\"plugin-card-update-failed\").find(\".column-name a\").focus()},200)}),g.removeClass(\"updating-message\").addClass(\"button-disabled\").attr(\"aria-label\",b.updates.l10n.pluginInstallFailedLabel.replace(\"%s\",g.data(\"name\"))).text(b.updates.l10n.installFailedShort),b.a11y.speak(e,\"assertive\"),d.trigger(\"wp-plugin-install-error\",c)))},b.updates.installImporterSuccess=function(c){b.updates.addAdminNotice({id:\"install-success\",className:\"notice-success is-dismissible\",message:b.updates.l10n.importerInstalledMsg.replace(\"%s\",c.activateUrl+\"&from=import\")}),a('[data-slug=\"'+c.slug+'\"]').removeClass(\"install-now updating-message\").addClass(\"activate-now\").attr({href:c.activateUrl+\"&from=import\",\"aria-label\":b.updates.l10n.activateImporterLabel.replace(\"%s\",c.pluginName)}).text(b.updates.l10n.activateImporter),b.a11y.speak(b.updates.l10n.installedMsg,\"polite\"),d.trigger(\"wp-importer-install-success\",c)},b.updates.installImporterError=function(c){var e=b.updates.l10n.installFailed.replace(\"%s\",c.errorMessage),f=a('[data-slug=\"'+c.slug+'\"]'),g=f.data(\"name\");b.updates.isValidResponse(c,\"install\")&&(b.updates.maybeHandleCredentialError(c,\"install-plugin\")||(b.updates.addAdminNotice({id:c.errorCode,className:\"notice-error is-dismissible\",message:e}),f.removeClass(\"updating-message\").text(b.updates.l10n.installNow).attr(\"aria-label\",b.updates.l10n.installNowLabel.replace(\"%s\",g)),b.a11y.speak(e,\"assertive\"),d.trigger(\"wp-importer-install-error\",c)))},b.updates.deletePlugin=function(c){var e=a('[data-plugin=\"'+c.plugin+'\"]').find(\".row-actions a.delete\");return c=_.extend({success:b.updates.deletePluginSuccess,error:b.updates.deletePluginError},c),e.html()!==b.updates.l10n.deleting&&e.data(\"originaltext\",e.html()).text(b.updates.l10n.deleting),b.a11y.speak(b.updates.l10n.deleting,\"polite\"),d.trigger(\"wp-plugin-deleting\",c),b.updates.ajax(\"delete-plugin\",c)},b.updates.deletePluginSuccess=function(e){a('[data-plugin=\"'+e.plugin+'\"]').css({backgroundColor:\"#faafaa\"}).fadeOut(350,function(){var d=a(\"#bulk-action-form\"),f=a(\".subsubsub\"),g=a(this),h=d.find(\"thead th:not(.hidden), thead td\").length,i=b.template(\"item-deleted-row\"),j=c.plugins;g.hasClass(\"plugin-update-tr\")||g.after(i({slug:e.slug,plugin:e.plugin,colspan:h,name:e.pluginName})),g.remove(),-1!==_.indexOf(j.upgrade,e.plugin)&&(j.upgrade=_.without(j.upgrade,e.plugin),b.updates.decrementCount(\"plugin\")),-1!==_.indexOf(j.inactive,e.plugin)&&(j.inactive=_.without(j.inactive,e.plugin),j.inactive.length?f.find(\".inactive .count\").text(\"(\"+j.inactive.length+\")\"):f.find(\".inactive\").remove()),-1!==_.indexOf(j.active,e.plugin)&&(j.active=_.without(j.active,e.plugin),j.active.length?f.find(\".active .count\").text(\"(\"+j.active.length+\")\"):f.find(\".active\").remove()),-1!==_.indexOf(j.recently_activated,e.plugin)&&(j.recently_activated=_.without(j.recently_activated,e.plugin),j.recently_activated.length?f.find(\".recently_activated .count\").text(\"(\"+j.recently_activated.length+\")\"):f.find(\".recently_activated\").remove()),j.all=_.without(j.all,e.plugin),j.all.length?f.find(\".all .count\").text(\"(\"+j.all.length+\")\"):(d.find(\".tablenav\").css({visibility:\"hidden\"}),f.find(\".all\").remove(),d.find(\"tr.no-items\").length||d.find(\"#the-list\").append('<tr class=\"no-items\"><td class=\"colspanchange\" colspan=\"'+h+'\">'+b.updates.l10n.noPlugins+\"</td></tr>\"))}),b.a11y.speak(b.updates.l10n.pluginDeleted,\"polite\"),d.trigger(\"wp-plugin-delete-success\",e)},b.updates.deletePluginError=function(c){var e,f,g=b.template(\"item-update-row\"),h=b.updates.adminNotice({className:\"update-message notice-error notice-alt\",message:c.errorMessage});c.plugin?(e=a('tr.inactive[data-plugin=\"'+c.plugin+'\"]'),f=e.siblings('[data-plugin=\"'+c.plugin+'\"]')):(e=a('tr.inactive[data-slug=\"'+c.slug+'\"]'),f=e.siblings('[data-slug=\"'+c.slug+'\"]')),b.updates.isValidResponse(c,\"delete\")&&(b.updates.maybeHandleCredentialError(c,\"delete-plugin\")||(f.length?(f.find(\".notice-error\").remove(),f.find(\".plugin-update\").append(h)):e.addClass(\"update\").after(g({slug:c.slug,plugin:c.plugin||c.slug,colspan:a(\"#bulk-action-form\").find(\"thead th:not(.hidden), thead td\").length,content:h})),d.trigger(\"wp-plugin-delete-error\",c)))},b.updates.updateTheme=function(c){var e;return c=_.extend({success:b.updates.updateThemeSuccess,error:b.updates.updateThemeError},c),\"themes-network\"===pagenow?e=a('[data-slug=\"'+c.slug+'\"]').find(\".update-message\").removeClass(\"notice-error\").addClass(\"updating-message notice-warning\").find(\"p\"):(e=a(\"#update-theme\").closest(\".notice\").removeClass(\"notice-large\"),e.find(\"h3\").remove(),e=e.add(a('[data-slug=\"'+c.slug+'\"]').find(\".update-message\")),e=e.addClass(\"updating-message\").find(\"p\")),e.html()!==b.updates.l10n.updating&&e.data(\"originaltext\",e.html()),b.a11y.speak(b.updates.l10n.updatingMsg,\"polite\"),e.text(b.updates.l10n.updating),d.trigger(\"wp-theme-updating\",c),b.updates.ajax(\"update-theme\",c)},b.updates.updateThemeSuccess=function(c){var e,f,g=a(\"body.modal-open\").length,h=a('[data-slug=\"'+c.slug+'\"]'),i={className:\"updated-message notice-success notice-alt\",message:b.updates.l10n.themeUpdated};\"themes-network\"===pagenow?(e=h.find(\".update-message\"),f=h.find(\".theme-version-author-uri\").html().replace(c.oldVersion,c.newVersion),h.find(\".theme-version-author-uri\").html(f)):(e=a(\".theme-info .notice\").add(h.find(\".update-message\")),g?a(\".load-customize:visible\").focus():h.find(\".load-customize\").focus()),b.updates.addAdminNotice(_.extend({selector:e},i)),b.a11y.speak(b.updates.l10n.updatedMsg,\"polite\"),b.updates.decrementCount(\"theme\"),d.trigger(\"wp-theme-update-success\",c),g&&a(\".theme-info .theme-author\").after(b.updates.adminNotice(i))},b.updates.updateThemeError=function(c){var e,f=a('[data-slug=\"'+c.slug+'\"]'),g=b.updates.l10n.updateFailed.replace(\"%s\",c.errorMessage);b.updates.isValidResponse(c,\"update\")&&(b.updates.maybeHandleCredentialError(c,\"update-theme\")||(\"themes-network\"===pagenow?e=f.find(\".update-message \"):(e=a(\".theme-info .notice\").add(f.find(\".notice\")),a(\"body.modal-open\").length?a(\".load-customize:visible\").focus():f.find(\".load-customize\").focus()),b.updates.addAdminNotice({selector:e,className:\"update-message notice-error notice-alt is-dismissible\",message:g}),b.a11y.speak(g,\"polite\"),d.trigger(\"wp-theme-update-error\",c)))},b.updates.installTheme=function(c){var e=a('.theme-install[data-slug=\"'+c.slug+'\"]');return c=_.extend({success:b.updates.installThemeSuccess,error:b.updates.installThemeError},c),e.addClass(\"updating-message\"),e.parents(\".theme\").addClass(\"focus\"),e.html()!==b.updates.l10n.installing&&e.data(\"originaltext\",e.html()),e.text(b.updates.l10n.installing).attr(\"aria-label\",b.updates.l10n.themeInstallingLabel.replace(\"%s\",e.data(\"name\"))),b.a11y.speak(b.updates.l10n.installingMsg,\"polite\"),a('.install-theme-info, [data-slug=\"'+c.slug+'\"]').removeClass(\"theme-install-failed\").find(\".notice.notice-error\").remove(),d.trigger(\"wp-theme-installing\",c),b.updates.ajax(\"install-theme\",c)},b.updates.installThemeSuccess=function(c){var e,f=a(\".wp-full-overlay-header, [data-slug=\"+c.slug+\"]\");d.trigger(\"wp-theme-install-success\",c),e=f.find(\".button-primary\").removeClass(\"updating-message\").addClass(\"updated-message disabled\").attr(\"aria-label\",b.updates.l10n.themeInstalledLabel.replace(\"%s\",c.themeName)).text(b.updates.l10n.themeInstalled),b.a11y.speak(b.updates.l10n.installedMsg,\"polite\"),setTimeout(function(){c.activateUrl&&e.attr(\"href\",c.activateUrl).removeClass(\"theme-install updated-message disabled\").addClass(\"activate\").attr(\"aria-label\",b.updates.l10n.activateThemeLabel.replace(\"%s\",c.themeName)).text(b.updates.l10n.activateTheme),c.customizeUrl&&e.siblings(\".preview\").replaceWith(function(){return a(\"<a>\").attr(\"href\",c.customizeUrl).addClass(\"button load-customize\").text(b.updates.l10n.livePreview)})},1e3)},b.updates.installThemeError=function(c){var e,f,g=b.updates.l10n.installFailed.replace(\"%s\",c.errorMessage),h=b.updates.adminNotice({className:\"update-message notice-error notice-alt\",message:g});b.updates.isValidResponse(c,\"install\")&&(b.updates.maybeHandleCredentialError(c,\"install-theme\")||(d.find(\"body\").hasClass(\"full-overlay-active\")?(f=a('.theme-install[data-slug=\"'+c.slug+'\"]'),e=a(\".install-theme-info\").prepend(h)):(e=a('[data-slug=\"'+c.slug+'\"]').removeClass(\"focus\").addClass(\"theme-install-failed\").append(h),f=e.find(\".theme-install\")),f.removeClass(\"updating-message\").attr(\"aria-label\",b.updates.l10n.themeInstallFailedLabel.replace(\"%s\",f.data(\"name\"))).text(b.updates.l10n.installFailedShort),b.a11y.speak(g,\"assertive\"),d.trigger(\"wp-theme-install-error\",c)))},b.updates.deleteTheme=function(c){var e;return\"themes\"===pagenow?e=a(\".theme-actions .delete-theme\"):\"themes-network\"===pagenow&&(e=a('[data-slug=\"'+c.slug+'\"]').find(\".row-actions a.delete\")),c=_.extend({success:b.updates.deleteThemeSuccess,error:b.updates.deleteThemeError},c),e&&e.html()!==b.updates.l10n.deleting&&e.data(\"originaltext\",e.html()).text(b.updates.l10n.deleting),b.a11y.speak(b.updates.l10n.deleting,\"polite\"),a(\".theme-info .update-message\").remove(),d.trigger(\"wp-theme-deleting\",c),b.updates.ajax(\"delete-theme\",c)},b.updates.deleteThemeSuccess=function(e){var f=a('[data-slug=\"'+e.slug+'\"]');\"themes-network\"===pagenow&&f.css({backgroundColor:\"#faafaa\"}).fadeOut(350,function(){var d=a(\".subsubsub\"),f=a(this),g=c.themes,h=b.template(\"item-deleted-row\");f.hasClass(\"plugin-update-tr\")||f.after(h({slug:e.slug,colspan:a(\"#bulk-action-form\").find(\"thead th:not(.hidden), thead td\").length,name:f.find(\".theme-title strong\").text()})),f.remove(),f.hasClass(\"update\")&&(g.upgrade--,b.updates.decrementCount(\"theme\")),f.hasClass(\"inactive\")&&(g.disabled--,g.disabled?d.find(\".disabled .count\").text(\"(\"+g.disabled+\")\"):d.find(\".disabled\").remove()),d.find(\".all .count\").text(\"(\"+--g.all+\")\")}),b.a11y.speak(b.updates.l10n.themeDeleted,\"polite\"),d.trigger(\"wp-theme-delete-success\",e)},b.updates.deleteThemeError=function(c){var e=a('tr.inactive[data-slug=\"'+c.slug+'\"]'),f=a(\".theme-actions .delete-theme\"),g=b.template(\"item-update-row\"),h=e.siblings(\"#\"+c.slug+\"-update\"),i=b.updates.l10n.deleteFailed.replace(\"%s\",c.errorMessage),j=b.updates.adminNotice({className:\"update-message notice-error notice-alt\",message:i});b.updates.maybeHandleCredentialError(c,\"delete-theme\")||(\"themes-network\"===pagenow?h.length?(h.find(\".notice-error\").remove(),h.find(\".plugin-update\").append(j)):e.addClass(\"update\").after(g({slug:c.slug,colspan:a(\"#bulk-action-form\").find(\"thead th:not(.hidden), thead td\").length,content:j})):a(\".theme-info .theme-description\").before(j),f.html(f.data(\"originaltext\")),b.a11y.speak(i,\"assertive\"),d.trigger(\"wp-theme-delete-error\",c))},b.updates._addCallbacks=function(a,c){return\"import\"===pagenow&&\"install-plugin\"===c&&(a.success=b.updates.installImporterSuccess,a.error=b.updates.installImporterError),a},b.updates.queueChecker=function(){var a;if(!b.updates.ajaxLocked&&b.updates.queue.length)switch(a=b.updates.queue.shift(),a.action){case\"install-plugin\":b.updates.installPlugin(a.data);break;case\"update-plugin\":b.updates.updatePlugin(a.data);break;case\"delete-plugin\":b.updates.deletePlugin(a.data);break;case\"install-theme\":b.updates.installTheme(a.data);break;case\"update-theme\":b.updates.updateTheme(a.data);break;case\"delete-theme\":b.updates.deleteTheme(a.data)}},b.updates.requestFilesystemCredentials=function(c){!1===b.updates.filesystemCredentials.available&&(c&&!b.updates.$elToReturnFocusToFromCredentialsModal&&(b.updates.$elToReturnFocusToFromCredentialsModal=a(c.target)),b.updates.ajaxLocked=!0,b.updates.requestForCredentialsModalOpen())},b.updates.maybeRequestFilesystemCredentials=function(a){b.updates.shouldRequestFilesystemCredentials&&!b.updates.ajaxLocked&&b.updates.requestFilesystemCredentials(a)},b.updates.keydown=function(c){27===c.keyCode?b.updates.requestForCredentialsModalCancel():9===c.keyCode&&(\"upgrade\"!==c.target.id||c.shiftKey?\"hostname\"===c.target.id&&c.shiftKey&&(a(\"#upgrade\").focus(),c.preventDefault()):(a(\"#hostname\").focus(),c.preventDefault()))},b.updates.requestForCredentialsModalOpen=function(){var c=a(\"#request-filesystem-credentials-dialog\");a(\"body\").addClass(\"modal-open\"),c.show(),c.find(\"input:enabled:first\").focus(),c.on(\"keydown\",b.updates.keydown)},b.updates.requestForCredentialsModalClose=function(){a(\"#request-filesystem-credentials-dialog\").hide(),a(\"body\").removeClass(\"modal-open\"),b.updates.$elToReturnFocusToFromCredentialsModal&&b.updates.$elToReturnFocusToFromCredentialsModal.focus()},b.updates.requestForCredentialsModalCancel=function(){(b.updates.ajaxLocked||b.updates.queue.length)&&(_.each(b.updates.queue,function(a){d.trigger(\"credential-modal-cancel\",a)}),b.updates.ajaxLocked=!1,b.updates.queue=[],b.updates.requestForCredentialsModalClose())},b.updates.showErrorInCredentialsForm=function(b){var c=a(\"#request-filesystem-credentials-form\");c.find(\".notice\").remove(),c.find(\"#request-filesystem-credentials-title\").after('<div class=\"notice notice-alt notice-error\"><p>'+b+\"</p></div>\")},b.updates.credentialError=function(a,c){a=b.updates._addCallbacks(a,c),b.updates.queue.unshift({action:c,data:a}),b.updates.filesystemCredentials.available=!1,b.updates.showErrorInCredentialsForm(a.errorMessage),b.updates.requestFilesystemCredentials()},b.updates.maybeHandleCredentialError=function(a,c){return!(!b.updates.shouldRequestFilesystemCredentials||!a.errorCode||\"unable_to_connect_to_filesystem\"!==a.errorCode)&&(b.updates.credentialError(a,c),!0)},b.updates.isValidResponse=function(c,d){var e,f=b.updates.l10n.unknownError;if(_.isObject(c)&&!_.isFunction(c.always))return!0;switch(_.isString(c)&&\"-1\"===c?f=b.updates.l10n.nonceError:_.isString(c)?f=c:\"undefined\"!=typeof c.readyState&&0===c.readyState?f=b.updates.l10n.connectionError:_.isString(c.responseText)&&\"\"!==c.responseText?f=c.responseText:_.isString(c.statusText)&&(f=c.statusText),d){case\"update\":e=b.updates.l10n.updateFailed;break;case\"install\":e=b.updates.l10n.installFailed;break;case\"delete\":e=b.updates.l10n.deleteFailed}return f=f.replace(/<[\\/a-z][^<>]*>/gi,\"\"),e=e.replace(\"%s\",f),b.updates.addAdminNotice({id:\"unknown_error\",className:\"notice-error is-dismissible\",message:_.escape(e)}),b.updates.ajaxLocked=!1,b.updates.queue=[],a(\".button.updating-message\").removeClass(\"updating-message\").removeAttr(\"aria-label\").prop(\"disabled\",!0).text(b.updates.l10n.updateFailedShort),a(\".updating-message:not(.button):not(.thickbox)\").removeClass(\"updating-message notice-warning\").addClass(\"notice-error\").find(\"p\").removeAttr(\"aria-label\").text(e),b.a11y.speak(e,\"assertive\"),!1},b.updates.beforeunload=function(){if(b.updates.ajaxLocked)return b.updates.l10n.beforeunload},a(function(){var e=a(\"#plugin-filter\"),f=a(\"#bulk-action-form\"),g=a(\"#request-filesystem-credentials-form\"),h=a(\"#request-filesystem-credentials-dialog\"),i=a(\".plugins-php .wp-filter-search\"),j=a(\".plugin-install-php .wp-filter-search\");c=_.extend(c,window._wpUpdatesItemCounts||{}),c.totals&&b.updates.refreshCount(),b.updates.shouldRequestFilesystemCredentials=h.length>0,h.on(\"submit\",\"form\",function(c){c.preventDefault(),b.updates.filesystemCredentials.ftp.hostname=a(\"#hostname\").val(),b.updates.filesystemCredentials.ftp.username=a(\"#username\").val(),b.updates.filesystemCredentials.ftp.password=a(\"#password\").val(),b.updates.filesystemCredentials.ftp.connectionType=a('input[name=\"connection_type\"]:checked').val(),b.updates.filesystemCredentials.ssh.publicKey=a(\"#public_key\").val(),b.updates.filesystemCredentials.ssh.privateKey=a(\"#private_key\").val(),b.updates.filesystemCredentials.fsNonce=a(\"#_fs_nonce\").val(),b.updates.filesystemCredentials.available=!0,b.updates.ajaxLocked=!1,b.updates.queueChecker(),b.updates.requestForCredentialsModalClose()}),h.on(\"click\",'[data-js-action=\"close\"], .notification-dialog-background',b.updates.requestForCredentialsModalCancel),g.on(\"change\",'input[name=\"connection_type\"]',function(){a(\"#ssh-keys\").toggleClass(\"hidden\",\"ssh\"!==a(this).val())}).change(),d.on(\"credential-modal-cancel\",function(c,d){var e,f,g=a(\".updating-message\");\"import\"===pagenow?g.removeClass(\"updating-message\"):\"plugins\"===pagenow||\"plugins-network\"===pagenow?\"update-plugin\"===d.action?e=a('tr[data-plugin=\"'+d.data.plugin+'\"]').find(\".update-message\"):\"delete-plugin\"===d.action&&(e=a('[data-plugin=\"'+d.data.plugin+'\"]').find(\".row-actions a.delete\")):\"themes\"===pagenow||\"themes-network\"===pagenow?\"update-theme\"===d.action?e=a('[data-slug=\"'+d.data.slug+'\"]').find(\".update-message\"):\"delete-theme\"===d.action&&\"themes-network\"===pagenow?e=a('[data-slug=\"'+d.data.slug+'\"]').find(\".row-actions a.delete\"):\"delete-theme\"===d.action&&\"themes\"===pagenow&&(e=a(\".theme-actions .delete-theme\")):e=g,e&&e.hasClass(\"updating-message\")&&(f=e.data(\"originaltext\"),\"undefined\"==typeof f&&(f=a(\"<p>\").html(e.find(\"p\").data(\"originaltext\"))),e.removeClass(\"updating-message\").html(f),\"plugin-install\"!==pagenow&&\"plugin-install-network\"!==pagenow||(\"update-plugin\"===d.action?e.attr(\"aria-label\",b.updates.l10n.pluginUpdateNowLabel.replace(\"%s\",e.data(\"name\"))):\"install-plugin\"===d.action&&e.attr(\"aria-label\",b.updates.l10n.pluginInstallNowLabel.replace(\"%s\",e.data(\"name\"))))),b.a11y.speak(b.updates.l10n.updateCancel,\"polite\")}),f.on(\"click\",\"[data-plugin] .update-link\",function(c){var d=a(c.target),e=d.parents(\"tr\");c.preventDefault(),d.hasClass(\"updating-message\")||d.hasClass(\"button-disabled\")||(b.updates.maybeRequestFilesystemCredentials(c),b.updates.$elToReturnFocusToFromCredentialsModal=e.find(\".check-column input\"),b.updates.updatePlugin({plugin:e.data(\"plugin\"),slug:e.data(\"slug\")}))}),e.on(\"click\",\".update-now\",function(c){var d=a(c.target);c.preventDefault(),d.hasClass(\"updating-message\")||d.hasClass(\"button-disabled\")||(b.updates.maybeRequestFilesystemCredentials(c),b.updates.updatePlugin({plugin:d.data(\"plugin\"),slug:d.data(\"slug\")}))}),e.on(\"click\",\".install-now\",function(c){var e=a(c.target);c.preventDefault(),e.hasClass(\"updating-message\")||e.hasClass(\"button-disabled\")||(b.updates.shouldRequestFilesystemCredentials&&!b.updates.ajaxLocked&&(b.updates.requestFilesystemCredentials(c),d.on(\"credential-modal-cancel\",function(){var c=a(\".install-now.updating-message\");c.removeClass(\"updating-message\").text(b.updates.l10n.installNow),b.a11y.speak(b.updates.l10n.updateCancel,\"polite\")})),b.updates.installPlugin({slug:e.data(\"slug\")}))}),d.on(\"click\",\".importer-item .install-now\",function(c){var e=a(c.target),f=a(this).data(\"name\");c.preventDefault(),e.hasClass(\"updating-message\")||(b.updates.shouldRequestFilesystemCredentials&&!b.updates.ajaxLocked&&(b.updates.requestFilesystemCredentials(c),d.on(\"credential-modal-cancel\",function(){e.removeClass(\"updating-message\").text(b.updates.l10n.installNow).attr(\"aria-label\",b.updates.l10n.installNowLabel.replace(\"%s\",f)),b.a11y.speak(b.updates.l10n.updateCancel,\"polite\")})),b.updates.installPlugin({slug:e.data(\"slug\"),pagenow:pagenow,success:b.updates.installImporterSuccess,error:b.updates.installImporterError}))}),f.on(\"click\",\"[data-plugin] a.delete\",function(c){var d=a(c.target).parents(\"tr\");c.preventDefault(),window.confirm(b.updates.l10n.aysDeleteUninstall.replace(\"%s\",d.find(\".plugin-title strong\").text()))&&(b.updates.maybeRequestFilesystemCredentials(c),b.updates.deletePlugin({plugin:d.data(\"plugin\"),slug:d.data(\"slug\")}))}),d.on(\"click\",\".themes-php.network-admin .update-link\",function(c){var d=a(c.target),e=d.parents(\"tr\");c.preventDefault(),d.hasClass(\"updating-message\")||d.hasClass(\"button-disabled\")||(b.updates.maybeRequestFilesystemCredentials(c),b.updates.$elToReturnFocusToFromCredentialsModal=e.find(\".check-column input\"),b.updates.updateTheme({slug:e.data(\"slug\")}))}),d.on(\"click\",\".themes-php.network-admin a.delete\",function(c){var d=a(c.target).parents(\"tr\");c.preventDefault(),window.confirm(b.updates.l10n.aysDelete.replace(\"%s\",d.find(\".theme-title strong\").text()))&&(b.updates.maybeRequestFilesystemCredentials(c),b.updates.deleteTheme({slug:d.data(\"slug\")}))}),f.on(\"click\",'[type=\"submit\"]',function(c){var e,g,h=a(c.target).siblings(\"select\").val(),i=f.find('input[name=\"checked[]\"]:checked'),j=0,k=0,l=[];switch(pagenow){case\"plugins\":case\"plugins-network\":e=\"plugin\";break;case\"themes-network\":e=\"theme\";break;default:return}if(!i.length)return c.preventDefault(),a(\"html, body\").animate({scrollTop:0}),b.updates.addAdminNotice({id:\"no-items-selected\",className:\"notice-error is-dismissible\",message:b.updates.l10n.noItemsSelected});switch(h){case\"update-selected\":g=h.replace(\"selected\",e);break;case\"delete-selected\":if(!window.confirm(\"plugin\"===e?b.updates.l10n.aysBulkDelete:b.updates.l10n.aysBulkDeleteThemes))return void c.preventDefault();g=h.replace(\"selected\",e);break;default:return}b.updates.maybeRequestFilesystemCredentials(c),c.preventDefault(),f.find('.manage-column [type=\"checkbox\"]').prop(\"checked\",!1),d.trigger(\"wp-\"+e+\"-bulk-\"+h,i),i.each(function(c,d){var e=a(d),f=e.parents(\"tr\");return\"update-selected\"!==h||f.hasClass(\"update\")&&!f.find(\"notice-error\").length?void b.updates.queue.push({action:g,data:{plugin:f.data(\"plugin\"),slug:f.data(\"slug\")}}):void e.prop(\"checked\",!1)}),d.on(\"wp-plugin-update-success wp-plugin-update-error wp-theme-update-success wp-theme-update-error\",function(c,d){var e,f,g=a('[data-slug=\"'+d.slug+'\"]');\"wp-\"+d.update+\"-update-success\"===c.type?j++:(f=d.pluginName?d.pluginName:g.find(\".column-primary strong\").text(),k++,l.push(f+\": \"+d.errorMessage)),g.find('input[name=\"checked[]\"]:checked').prop(\"checked\",!1),b.updates.adminNotice=b.template(\"wp-bulk-updates-admin-notice\"),b.updates.addAdminNotice({id:\"bulk-action-notice\",className:\"bulk-action-notice\",successes:j,errors:k,errorMessages:l,type:d.update}),e=a(\"#bulk-action-notice\").on(\"click\",\"button\",function(){a(this).toggleClass(\"bulk-action-errors-collapsed\").attr(\"aria-expanded\",!a(this).hasClass(\"bulk-action-errors-collapsed\")),e.find(\".bulk-action-errors\").toggleClass(\"hidden\")}),k>0&&!b.updates.queue.length&&a(\"html, body\").animate({scrollTop:0})}),d.on(\"wp-updates-notice-added\",function(){b.updates.adminNotice=b.template(\"wp-updates-admin-notice\")}),b.updates.queueChecker()}),j.length&&j.attr(\"aria-describedby\",\"live-search-desc\"),j.on(\"keyup input\",_.debounce(function(c,d){var f,g,h=a(\".plugin-install-search\");f={_ajax_nonce:b.updates.ajaxNonce,s:c.target.value,tab:\"search\",type:a(\"#typeselector\").val(),pagenow:pagenow},g=location.href.split(\"?\")[0]+\"?\"+a.param(_.omit(f,[\"_ajax_nonce\",\"pagenow\"])),\"keyup\"===c.type&&27===c.which&&(c.target.value=\"\"),b.updates.searchTerm===f.s&&\"typechange\"!==d||(e.empty(),b.updates.searchTerm=f.s,window.history&&window.history.replaceState&&window.history.replaceState(null,\"\",g),h.length||(h=a('<li class=\"plugin-install-search\" />').append(a(\"<a />\",{\"class\":\"current\",href:g,text:b.updates.l10n.searchResultsLabel})),a(\".wp-filter .filter-links .current\").removeClass(\"current\").parents(\".filter-links\").prepend(h),e.prev(\"p\").remove(),a(\".plugins-popular-tags-wrapper\").remove()),\"undefined\"!=typeof b.updates.searchRequest&&b.updates.searchRequest.abort(),a(\"body\").addClass(\"loading-content\"),b.updates.searchRequest=b.ajax.post(\"search-install-plugins\",f).done(function(c){a(\"body\").removeClass(\"loading-content\"),e.append(c.items),delete b.updates.searchRequest,0===c.count?b.a11y.speak(b.updates.l10n.noPluginsFound):b.a11y.speak(b.updates.l10n.pluginsFound.replace(\"%d\",c.count))}))},500)),i.length&&i.attr(\"aria-describedby\",\"live-search-desc\"),i.on(\"keyup input\",_.debounce(function(c){var d,e={_ajax_nonce:b.updates.ajaxNonce,s:c.target.value,pagenow:pagenow,plugin_status:\"all\"};\"keyup\"===c.type&&27===c.which&&(c.target.value=\"\"),b.updates.searchTerm!==e.s&&(b.updates.searchTerm=e.s,d=_.object(_.compact(_.map(location.search.slice(1).split(\"&\"),function(a){\nif(a)return a.split(\"=\")}))),e.plugin_status=d.plugin_status||\"all\",window.history&&window.history.replaceState&&window.history.replaceState(null,\"\",location.href.split(\"?\")[0]+\"?s=\"+e.s+\"&plugin_status=\"+e.plugin_status),\"undefined\"!=typeof b.updates.searchRequest&&b.updates.searchRequest.abort(),f.empty(),a(\"body\").addClass(\"loading-content\"),a(\".subsubsub .current\").removeClass(\"current\"),b.updates.searchRequest=b.ajax.post(\"search-plugins\",e).done(function(c){var d=a(\"<span />\").addClass(\"subtitle\").html(b.updates.l10n.searchResults.replace(\"%s\",_.escape(e.s))),g=a(\".wrap .subtitle\");e.s.length?g.length?g.replaceWith(d):a(\".wp-header-end\").before(d):(g.remove(),a(\".subsubsub .\"+e.plugin_status+\" a\").addClass(\"current\")),a(\"body\").removeClass(\"loading-content\"),f.append(c.items),delete b.updates.searchRequest,0===c.count?b.a11y.speak(b.updates.l10n.noPluginsFound):b.a11y.speak(b.updates.l10n.pluginsFound.replace(\"%d\",c.count))}))},500)),d.on(\"submit\",\".search-plugins\",function(b){b.preventDefault(),a(\"input.wp-filter-search\").trigger(\"input\")}),a(\"#typeselector\").on(\"change\",function(){var b=a('input[name=\"s\"]');b.val().length&&b.trigger(\"input\",\"typechange\")}),a(\"#plugin_update_from_iframe\").on(\"click\",function(b){var c,d=window.parent===window?null:window.parent;a.support.postMessage=!!window.postMessage,!1!==a.support.postMessage&&null!==d&&-1===window.parent.location.pathname.indexOf(\"update-core.php\")&&(b.preventDefault(),c={action:\"update-plugin\",data:{plugin:a(this).data(\"plugin\"),slug:a(this).data(\"slug\")}},d.postMessage(JSON.stringify(c),window.location.origin))}),a(\"#plugin_install_from_iframe\").on(\"click\",function(b){var c,d=window.parent===window?null:window.parent;a.support.postMessage=!!window.postMessage,!1!==a.support.postMessage&&null!==d&&-1===window.parent.location.pathname.indexOf(\"index.php\")&&(b.preventDefault(),c={action:\"install-plugin\",data:{slug:a(this).data(\"slug\")}},d.postMessage(JSON.stringify(c),window.location.origin))}),a(window).on(\"message\",function(c){var d,e=c.originalEvent,f=document.location.protocol+\"//\"+document.location.hostname;if(e.origin===f){try{d=a.parseJSON(e.data)}catch(g){return}if(\"undefined\"!=typeof d.action)switch(d.action){case\"decrementUpdateCount\":b.updates.decrementCount(d.upgradeType);break;case\"install-plugin\":case\"update-plugin\":window.tb_remove(),d.data=b.updates._addCallbacks(d.data,d.action),b.updates.queue.push(d),b.updates.queueChecker()}}}),a(window).on(\"beforeunload\",b.updates.beforeunload)})}(jQuery,window.wp,window._wpUpdatesSettings);", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-beta1-40723';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4601-20170510';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-admin/includes/file.php", "wp-admin/js/updates.js", "wp-admin/js/updates.min.js", "wp-includes/version.php"], "buggy_code_start_loc": [1093, 96, 1, 7], "buggy_code_end_loc": [1262, 1708, 3, 8], "fixing_code_start_loc": [1094, 97, 1, 7], "fixing_code_end_loc": [1278, 1713, 3, 8], "type": "CWE-352", "message": "In WordPress before 4.7.5, a Cross Site Request Forgery (CSRF) vulnerability exists in the filesystem credentials dialog because a nonce is not required for updating credentials.", "other": {"cve": {"id": "CVE-2017-9064", "sourceIdentifier": "cve@mitre.org", "published": "2017-05-18T14:29:00.323", "lastModified": "2019-03-15T12:35:25.153", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In WordPress before 4.7.5, a Cross Site Request Forgery (CSRF) vulnerability exists in the filesystem credentials dialog because a nonce is not required for updating credentials."}, {"lang": "es", "value": "En WordPress antes de 4.7.5, existe una vulnerabilidad de Cross Site Request Forgery (CSRF) en el di\u00e1logo de credenciales del sistema de archivos porque no se requiere un nonce para actualizar las credenciales."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7.4", "matchCriteriaId": "0F07CF70-A29C-490E-8728-C51AED224D76"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.debian.org/security/2017/dsa-3870", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/98509", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1038520", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.7.5", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/38347d7c580be4cdd8476e4bbc653d5c79ed9b67", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2017/05/wordpress-4-7-5/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8818", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/38347d7c580be4cdd8476e4bbc653d5c79ed9b67"}}