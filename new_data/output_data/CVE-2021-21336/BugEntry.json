{"buggy_code": ["Change Log\n==========\n\n2.6.0 (unreleased)\n------------------\n\n- Fix open redirect issue in `Cookie Auth Helper` redirect handling\n\n- Add support for Python 3.9.\n\n\n2.5.1 (2020-11-13)\n------------------\n\n- Fixed error assigning groups in ``manage_groups`` page in ZMI.\n  (`#61 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/61>`_,\n  `#84 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/84>`_)\n\n- Fix DeprecationWarnings occurring on Zope 5.\n\n\n2.5 (2020-10-12)\n----------------\n\n- Renamed ``xml`` dir to ``xml_templates``.\n  This avoids an import warning on Python 2.7.\n\n- Disable ZMI CSRF check and log it if sessioning is not available\n  instead of breaking ZMI interactions\n\n- Clear caches before sending group user added/removed events\n  (`#71 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/71>`_)\n\n- Prevent creation of users/groups/roles with empty ID in the ZODB\n  (`#70 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/70>`_)\n\n- update configuration for version 5 of ``isort``\n\n\n2.4 (2020-02-09)\n----------------\n\n- no longer rely on ``ZServer`` for any WebDAV-related functionality.\n  (`#64 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/64>`_)\n\n\n2.3 (2020-02-02)\n----------------\n\n- Replace all ``filter(None...)`` expressions which break under Python 3\n  (`#63 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/63>`_)\n\n\n2.2.1 (2020-01-13)\n------------------\n\n- Fix broken ICredentialsUpdatedEvent event handler call to updateCredentials.\n  (`#59 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/59>`_)\n\n\n2.2 (2019-11-23)\n----------------\n\n- Add new events to be able to notify when a principal is added to\n  or removed from a group. Notify these events when principals are\n  added or removed to a group in ZODBGroupManager\n  (`#17 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/17>`_)\n\n\n2.1.1 (2019-10-23)\n------------------\n\n- Fix bug in ``getRolesForPrincipal`` for non PAS user.\n\n\n2.1 (2019-08-29)\n----------------\n\n- Fix formatting in \"Plugin Types\" documentation.\n\n- Fixed error assigning roles in ``manage_roles`` page in ZMI.\n  See issues `#43 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/43>`_\n  and `#51 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/51>`_.\n\n\n2.0 (2019-05-10)\n----------------\n\n- Drop unused ``.utils.allTests`` method.\n\n\n2.0b6 (2019-04-17)\n------------------\n\n- fixed usage of deprecated ``im_self``\n  (`#40 <https://github.com/zopefoundation/Products.PluggableAuthService/pull/40>`_)\n\n\n2.0b5 (2019-04-13)\n------------------\n\n- fixed the \"Configured PAS\" factory\n  (`#39 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/39>`_)\n\n- styled \"Configured PAS\" add dialog for the Zope 4 ZMI\n  (`#38 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/38>`_)\n\n- prevent the ZMI add dialog showing in the Zope 4 ZMI\n  (`#37 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/37>`_)\n\n- added the indirect dependency ``Products.Sessions`` for the CSRF-support\n\n\n2.0b4 (2019-04-04)\n------------------\n\n- simplified Travis CI test configuration\n\n- added stricter linting configuration\n\n- added ``project_urls`` to the setup so PyPI shows more relevant links\n\n- added project badges to the README, which will show on the GitHub front page\n\n- Fix ZMI Templates and add ZMI icons for Zope 4\n  (`#36 <https://github.com/zopefoundation/Products.PluggableAuthService/pull/36>`_)\n\n\n2.0b3 (2019-03-29)\n------------------\n\n- Fixed Dynamic Groups Plugin ZMI view\n  (`#33 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/33>`_)\n\n- Re-enabled XML-RPC support without requiring ZServer\n  (`#34 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/34>`_)\n\n- Specify supported Python versions using ``python_requires`` in setup.py\n\n- Added support for Python 3.8\n\n- Fix CSRF defense incompatibility with some session implementations\n\n\n2.0b2 (2018-10-16)\n------------------\n\n- Add support for Python 3.7.\n\n- Do not override a previously set response body in\n  ``HTTPBasicAuthHelper.challenge()`` allowing to set the response body via\n  an exception view in Zope >= 4.0b6.\n\n- Add new event to be able to notify group creation.\n\n- Refactoring to make it easier to override ``updateCredentials``.\n\n\n2.0b1 (2018-05-18)\n------------------\n\n- The dependency on ``ZServer`` is now optional. To use the features which\n  require ``ZServer`` (WebDav, XML-RPC, FTP) use the setuptools extra `zserver`\n  when installing the package.\n\n- Do not fail when our base profiles are already registered.\n  This may happen in tests if our ``initialize`` code is called twice.\n\n- Add support for Python 3.\n\n- Reformatted code for PEP-8 compliance.\n\n- Require Zope 4.0b5 as minimum Zope version.\n\n\n1.11.0 (2016-03-01)\n-------------------\n\n- Add new event to be able to notify group deletion.\n\n- Fix usage of os.path.split(). Could result in Errors during import\n  on Windows.\n\n\n1.10.0 (2013-02-19)\n-------------------\n\n- Allow specifying a policy for transforming / normalizing login names\n  for all plugins in a PAS:\n\n  - Added ``login_transform`` string property to PAS.\n\n  - Added ``applyTransform`` method to PAS, which looks for a method on PAS\n    with the name specified in the ``login_transform`` property.\n\n  - Added two possible transforms to PAS: ``lower`` and ``upper``.\n\n  - Changed the methods of PAS to call ``applyTransform`` wherever needed.\n\n  - Added the existing ``updateUser`` method of ZODBUserManager to the\n    IUserEnumerationPlugin interface.\n\n  - Added a new ``updateEveryLoginName`` method to ZODBUserManager and the\n    IUserEnumerationPlugin interface.\n\n  - Added three methods to PAS and IPluggableAuthService:\n    ``updateLoginName``, ``updateOwnLoginName``, ``updateAllLoginNames``.\n    These methods call ``updateUser`` or ``updateEveryLoginName`` on every\n    IUserEnumerationPlugin. Since these are later additions to the plugin\n    interface, we log a warning when a plugin does not have these methods\n    (for example the ``mutable_properties`` plugin of PlonePAS) but will\n    not fail.  When no plugin is able to update a user, this will raise an\n    exception: we do not want to quietly let this pass when for example a\n    login name is already taken by another user.\n\n  - Changing the ``login_transform`` property in the ZMI will call\n    ``PAS.updateAllLoginNames``, unless ``login_transform`` is the same or\n    has become an empty string.\n\n  - The new ``login_transform`` property is empty by default. In that case,\n    the behavior of PAS is the same as previously. The various\n    ``applyTransform`` calls will have a (presumably very small)\n    performance impact.\n\n- Launchpad #1079204:  Added CSRF protection for the ZODBUserManager,\n  ZODBGroupManager, ZODBRoleManger, and DynamicGroupsPlugin plugins.\n\n\n1.9.0 (2012-08-30)\n------------------\n\n- Launchpad #649596:  add a protocol for plugins which check whether a\n  non-top-level PAS instance is \"competent\" to authenticate a given request;\n  if not, the instance defers to higher-level instances.  Thanks to Dieter\n  Maurer for the patch.\n\n\n1.8.0 (2012-05-08)\n------------------\n\n- Added export / import support for the ChallengeProtocolChooser plugin's\n  label - protocols mapping.\n\n\n1.7.8 (2012-05-08)\n------------------\n\n- In authenticateCredentials do NOT fall back to using the login as\n  userid when there is no match, as that gives a high chance of\n  seeming to log in successfully, but in reality failing.\n  [maurits]\n\n\n1.7.7 (2012-02-27)\n------------------\n\n- Explicitly encode/decode data for GS\n\n\n1.7.6 (2011-10-31)\n------------------\n\n- Launchpad #795086:  fixed creation of PropertiesUpdated event.\n\n\n1.7.5 (2011-05-30)\n------------------\n\n- Launchpad #789858:  don't allow conflicting login name in 'updateUser'.\n\n- Set appropriate cache headers on CookieAuthHelper login redirects to prevent\n  caching by proxy servers.\n\n\n1.7.4 (2011-05-13)\n------------------\n\n- Added forward compatibility with DateTime 3.\n\n\n1.7.3 (2011-02-10)\n------------------\n\n- In the ZODBRoleManager made it clearer that adding a removing a role\n  does not have much effect if you do not do the same in the root of\n  the site (at the bottom of the Security tab at manage_access).\n  Fixes https://bugs.launchpad.net/zope-pas/+bug/672694\n\n- Return the created user in _doAddUser, to match change in\n  AccessControl 2.13.4.\n\n- Fixed possible ``binascii.Error`` in ``extractCredentials`` of\n  CookieAuthHelper. This is a corner case that might happen after\n  a browser upgrade.\n\n\n1.7.2 (2010-11-11)\n------------------\n\n- Allow for a query string in CookieAuthHelper's ``login_path``.\n\n- Trap \"swallowable\" exceptions from ``IRoles`` plugins.  Thanks to\n  Willi Langenburger for the patch.  Fixes\n  https://bugs.launchpad.net/zope-pas/+bug/615474 .\n\n- Fixed possible TypeError in ``extractCredentials`` of CookieAuthHelper\n  when the ``__ac`` cookie is not ours (but e.g. from plone.session,\n  though even then only in a corner case).\n\n- Fixed chameleon incompatibilities\n\n\n1.7.1 (2010-07-01)\n------------------\n\n- Made ``ZODBRoleManager.assignRoleToPrincipal`` raise and log a more\n  informative error when detecting a duplicate principal.\n  https://bugs.launchpad.net/zope-pas/+bug/348795\n\n- Updated ``DynamicGroupsPlugin.enumerateGroups`` to return an empty sequence\n  for an unknown group ID, rather than raising KeyError.\n  https://bugs.launchpad.net/zope-pas/+bug/585365\n\n- Updated all code to raise new-style exceptions.\n\n- Removed dependency on ``zope.app.testing``.\n\n- Cleaned out a number of old imports, because we now require Zope >= 2.12.\n\n- Updated ``setDefaultRoles`` to use the ``addPermission`` API if available.\n\n\n1.7.0 (2010-04-08)\n------------------\n\n- Allow CookieAuthHelper's ``login_path`` to be set to an absolute url for\n  integration with external authentication mechanisms.\n\n- Fixed xml templates directory path computation to allow reuse of\n  ``SimpleXMLExportImport`` class outside ``Products.PluggableAuthService``.\n\n\n1.7.0b2 (2010-01-31)\n--------------------\n\n- Modify ZODBGroupManager to update group title and description independently.\n\n\n1.7.0b1 (2009-11-16)\n--------------------\n\n- This release requires for Zope2 >= 2.12.\n\n- Simplified buildout to just what is needed to run tests.\n\n- Don't fail on users defined in multiple user sources on the\n  ZODBGroupManager listing page.\n\n- Fixed deprecation warnings for use of ``Globals`` under Zope 2.12.\n\n- Fixed deprecation warnings for the ``md5`` and ``sha`` modules under\n  Python >= 2.6.\n\n- Added test for multiple auth header support in the HTTPBasicAuthHelper.\n\n- Changed HTTPBasicAuthHelper to not rely on one obscure feature of the\n  HTTPResponse.\n\n\n1.6.2 (2009-11-16)\n------------------\n\n- Launchpad #420319:  Fix misconfigured ``startswith`` match type filter\n  in ``Products.PluggableAuthService.plugins.DomainAuthHelper``.\n\n- Fixed test setup for tests using page templates relying on the\n  ``DefaultTraversable`` adapter.\n\n- Fixed broken markup in templates.\n\n\n1.6.1 (2008-11-20)\n------------------\n\n- Launchpad #273680:  Avoid expensive / incorrect dive into ``enumerateUsers``\n  when trying to validate w/o either a real ID or login.\n\n- Launchpad #300321:\n  ``Products.PluggableAuthService.pluginsZODBGroupManager.enumerateGroups``\n  failed to find groups with unicode IDs.\n\n\n1.6 (2008-08-05)\n----------------\n\n- Fixed another deprecation for ``manage_afterAdd`` occurring when used\n  together with Five (this time for the ``ZODBRoleManager`` class).\n\n- Ensure the ``_findUser`` cache is invalidated if the roles or groups for\n  a principal change.\n\n- Launchpad #15569586:  docstring fix.\n\n- Factored out ``filter`` logic into separate classes;  added filters\n  for ``startswith`` test and (if the IPy module is present) IP-range\n  tests.  See https://bugs.launchpad.net/zope-pas/+bug/173580 .\n\n- Zope 2.12 compatibility - removed ``Interface.Implements`` import if\n  ``zope.interface`` available.\n\n- Ensure ``ZODBRoleManagerExportImport`` doesn't fail if it tries to add a\n  role that already exists (idempotence is desirable in GS importers)\n\n- Fixed tests so they run with Zope 2.11.\n\n- Split up large permission tests into individual tests.\n\n- Fixed deprecation warning occurring when used together with\n  Five. (``manage_afterAdd`` got undeprecated.)\n\n- Added buildout.\n\n\n1.5.3 (2008-02-06)\n------------------\n\n- ZODBUserManager plugin: allow unicode arguments to\n  ``enumerateUsers``. (https://bugs.launchpad.net/zope-pas/+bug/189627)\n\n- plugins/ZODBRoleManager: added logging in case searchPrincipial()\n  returning more than one result (which might happen in case of having\n  duplicate id within difference user sources)\n\n\n1.5.2 (2007-11-28)\n------------------\n\n- DomainAuthHelper plugin:  fix glitch for plugins which have never\n  configured any \"default\" policy:  ``authenticateCredentials`` and\n  ``getRolesForPrincipal`` would raise ValueError.\n  (http://www.zope.org/Collectors/PAS/59)\n\n\n1.5.1 (2007-09-11)\n------------------\n\n- PluggableAuthService._verifyUser: changed to use exact_match to the\n  enumerator, otherwise a user with login ``foobar`` might get returned\n  by _verifyUser for a query for ``login='foo'`` because the enumerator\n  happened to return 'foobar' first in the results.\n\n- Add a test for manage_zmi_logout and replace a call to isImplementedBy\n  with providedBy.\n  (http://www.zope.org/Collectors/PAS/58)\n\n\n1.5 (2006-06-17)\n----------------\n\n- Add support for property plugins returning an IPropertySheet\n  to PropertiedUser. Added addPropertysheet to the IPropertiedUser.\n\n- Added a method to the IRoleAssignerPlugin to remove roles from a\n  principal, and an implementation for it on the ZODBRoleManager.\n  (http://www.zope.org/Collectors/PAS/57)\n\n- Added events infrastructure. Enabled new IPrincipalCreatedEvent and\n  ICredentialsUpdatedEvent events.\n\n- Added support for registering plugin types via ZCML.\n\n- Implemented authentication caching in _extractUserIds.\n\n- Ported standard user folder tests from the AccessControl test suite.\n\n- Passwords with \":\" characters would break authentication\n  (http://www.zope.org/Collectors/PAS/51)\n\n- Corrected documented software dependencies\n\n- Converted to publishable security sensitive methods to only accept\n  POST requests to prevent XSS attacks.  See\n  http://www.zope.org/Products/Zope/Hotfix-2007-03-20/announcement and\n  http://dev.plone.org/plone/ticket/6310\n\n- Fixed issue in the user search filter where unrecognized keyword\n  arguments were ignored resulting in duplicate search entries.\n  (http://dev.plone.org/plone/ticket/6300)\n\n- Made sure the Extensions.upgrade script does not commit full\n  transactions but only sets (optimistic) savepoints. Removed bogus\n  Zope 2.7 compatibility in the process.\n  (http://www.zope.org/Collectors/PAS/55)\n\n- Made the CookieAuthHelper only use the ``__ac_name`` field if\n  ``__ac_password`` is also present. This fixes a login problem for\n  CMF sites where the login name was remembered between sessions with\n  an ``__ac_name`` cookie.\n\n- Made the DomainAuthHelper return the remote address, even it the\n  remote host is not available (http://www.zope.org/Collectors/PAS/49).\n\n- Fixed bug in DelegatingMultiPlugin which attempted to validate the\n  supplied password directly against the user password - updated to use\n  AuthEncoding.pw_validate to handle encoding issues\n\n- Fixed serious security hole in DelegatingMultiPlugin which allowed\n  Authentication if the EmergencyUser login was passed in.  Added\n  password validation utilizing AuthEncoding.pw_validate\n\n- Fixed a set of tests that tested values computed from dictionaries\n  and could break since dictionaries are not guaranteed to have any\n  sort order.\n\n- Fixed test breakage induced by use of Z3 pagetemplates in Zope\n  2.10+.\n\n- BasePlugin: The listInterfaces method only considered the old-style\n  __implements__ machinery when determining interfaces provided by\n  a plugin instance.\n\n- ZODBUserManager: Already encrypted passwords were encrypted again in\n  addUser and updateUserPassword.\n  (http://www.zope.org/Collectors/Zope/1926)\n\n- Made sure the emergency user via HTTP basic auth always wins, no matter\n  how borken the plugin landscape.\n\n- Cleaned up code in CookieAuthHelper which allowed the form to override\n  login/password if a cookie had already been set.\n\n- Removed some BBB code for Zope versions < 2.8, which is not needed\n  since we require Zope > 2.8.5 nowadays.\n\n\n1.4 (2006-08-28)\n----------------\n\n- Extended the DomainAuthHelper to function as its own extraction\n  plugin, to allow for the case that another extractor is registered,\n  but does not return any credentials.\n  (http://www.zope.org/Collectors/PAS/46)\n\n- Re-worded parts of the README so they don't point to specific or\n  non-existing files (http://www.zope.org/Collectors/PAS/6 and\n  http://www.zope.org/Collectors/PAS/47)\n\n\n1.4-beta (2006-08-07)\n---------------------\n\n- Created a \"Configured PAS\" entry in the ZMI add list, which\n  allows creating a PAS using base and extension GenericSetup profiles\n  registered for IPluggableAuthService.  This entry should eventually\n  replace the \"stock\" PAS entry (assuming that we make GenericSetup\n  a \"hard\" dependency).\n\n- Added an \"empty\" GenericSetup profile, which creates a PAS containing\n  only a plugin registry and a setup tool.\n\n- Repaired the \"simple\" GenericSetup profile to be useful, rather than\n  catastrophic, to apply:  it now creates and registers a set of\n  ZODB-based user / group / role plugins, along with a basic auth\n  helper.\n\n- ZODBUserManager: Extend the \"notional IZODBUserManager interface\"\n  with the left-out updateUser facility and a corresponding\n  manage_updateUser method for ZMI use. Removed any responsibility\n  for updating a user's login from the updateUserPassword and\n  manage_updateUserPassword methods. This fixes the breakage\n  described in the collector issue below, and makes the ZMI view\n  for updating users work in a sane way.\n  (http://www.zope.org/Collectors/PAS/42)\n\n- CookieAuthHelper: If expireCookie was called and extractCredentials\n  was hit in the same request, the CookieAuthHelper would throw an\n  exception (http://www.zope.org/Collectors/PAS/43)\n\n- Added a DEPENDENCIES.txt. (http://www.zope.org/Collectors/PAS/44)\n\n\n1.3 (2006-06-09)\n----------------\n\n- No changes from version 1.3-beta\n\n\n1.3-beta (2006-06-03)\n---------------------\n\n- Modify CookieAuthHelper to prefer __ac form variables to the cookie\n  when extracting credentials.\n  (https://dev.plone.org/plone/ticket/5355)\n\n\n1.2 (2006-05-14)\n----------------\n\n- Fix manage_zmi_logout which stopped working correctly as soon as the\n  PluggableAuthService product code was installed by correcting the\n  monkeypatch for it in __init__.py.\n  (http://www.zope.org/Collectors/PAS/12)\n\n- Add missing interface for IPropertiedUser and tests\n  (http://www.zope.org/Collectors/PAS/16)\n\n- Removed STX links from README.txt which do nothing but return\n  404s when clicked from the README on zope.org.\n  (http://www.zope.org/Collectors/PAS/6)\n\n- Fixing up inconsistent searching in the listAvailablePrincipals\n  method of the ZODBRoleManager and ZODBGroupManager plugins. Now both\n  constrain searches by ID.\n  (http://www.zope.org/Collectors/PAS/11)\n\n- Convert from using zLOG to using the Python logging module.\n  (http://www.zope.org/Collectors/PAS/14)\n\n\n1.2-beta (2006-02-25)\n---------------------\n\n- Added suppport for exporting / importing a PAS and its content via\n  the GenericSetup file export framework.\n\n- Made ZODBRoleManager plugin check grants to the principal's groups,\n  as well as those made to the principal directly.\n\n- Added two new interfaces, IChallengeProtocolChooser and\n  IRequestTypeSniffer. Those are used to select the 'authorization\n  protocol' or 'challenger protocol' to be used for challenging\n  according to the incoming request type.\n\n- Repaired warings appearing in Zope 2.8.5 due to a couple typos\n  in security declarations.\n\n- Repaired DeprecationWarnings due to use of Zope2 interface verification.\n\n- Repaired unit test breakage (unittest.TestCase instances have\n  'failUnless'/'failIf', rather than 'assertTrue'/'assertFalse').\n\n- Fixed a couple more places where Zope 2-style ``__implements__``\n  were being used to standardize on using ``classImplements``.\n\n- Fixed fallback implementations of ``providedBy`` and\n  ``implementedBy`` to always return a tuple.\n\n- Make sure challenge doesn't break if existing instances of the\n  PluginRegistry don't yet have ``IChallengeProtocolChooser`` as a\n  registered interface. (Would be nice to have some sort of\n  migration for the PluginRegistry between PAS releases)\n\n- Don't assume that just because zope.interface can be imported\n  that Five is present.\n\n\n1.1b2 (2005-07-14)\n------------------\n\n- Repaired a missing 'nocall:' in the Interfaces activation form.\n\n\n1.1b1 (2005-07-06)\n------------------\n\n- PAS-level id mangling is no more. All (optional) mangling is now\n  done on a per-plugin basis.\n\n- Interfaces used by PAS are now usable in both Zope 2.7 and 2.8\n  (Five compatible)\n\n\n1.0.5 (2005-01-31)\n------------------\n\n- Simplified detection of the product directory using 'package_home'.\n\n- Set a default value for the 'login' attribute of a PAS, to avoid\n  UnboundLocalError.\n\n1.0.4 (2005-01-27)\n------------------\n\n- Made 'Extensions' a package, to allow importing its scripts\n  as modules.\n\n- Declared new 'IPluggableAuthService' interface, describing additional\n  PAS-specific API.\n\n- Exposed PAS' 'resetCredentials' and 'updateCredentials' as public\n  methods.\n\n- Monkey-patch ZMI's logout to invoke PAS' 'resetCredentials', if\n  present.\n\n- CookieAuth plugin now encodes and decodes cookies in the same\n  format as CookieCrumbler to provide compatibility between\n  sites running PAS and CC.\n\n- Add a publicly callable \"logout\" method on the PluggableAuthService\n  instance that will call resetCredentials on all activated\n  ICredentialsRest plugins, thus effecting a logout.\n\n- Enabled the usage of the CookieAuthHelper login screen functionality\n  without actually using the CookieAuthHelper to maintain the\n  credentials store in its own auth cookie by ensuring that only\n  active updateCredentials plugins are informed about a successful\n  login so they can store the credentials.\n\n- Added a _getPAS method to the BasePlugin base class to be used\n  as the canonical way of getting at the PAS instance from within\n  plugins.\n\n- Group and user plugins can now specify their own title for a\n  principal entry (PAS will not compute one if they do).\n\n- PAS and/or plugins can now take advantage of caching using the\n  Zope ZCacheable framework with RAM Cache Managers. See\n  doc/caching.stx for the details.\n\n- Make 'getUserById' pass the 'login' to '_findUser', so that\n  the returned user object can answer 'getUserName' sanely.\n\n- Harden 'logout' against missing HTTP_REFERRER.\n\n- Avoid triggering \"Emergency user cannot own\" when adding a\n  CookieAuthHelper plugin as that user.\n\n- Detect and prevent recursive redirecting in the CookieAuthHelper\n  if the login_form cannot be reached by the Anonymous User.\n\n- Made logging when swallowing exceptions much less noisy (they\n  *don't* necessarily require attention).\n\n- Clarified interface of IAuthenticationPlugin, which should return\n  None rather than raising an exception if asked to authenticate an\n  unknown principal;  adjusted ZODBUserManager accordingly.\n\n- Don't log an error in zodb_user_plugin's authenticateCredentials\n  if we don't have a record for a particular username, just return None.\n\n- If an IAuthenticationPlugin returns None instead of a tuple\n  from authenticateCredentials, don't log a tuple-unpack error in PAS\n  itself.\n\n\n1.0.3 (2004-10-16)\n------------------\n\n- Implemented support for issuing challenges via IChallengePlugins.\n\n  - three challenge styles in particular:\n\n    - HTTP Basic Auth\n\n    - CookieCrumbler-like redirection\n\n    - Inline authentication form\n\n- Made unit tests pass when run with cAccessControl.\n\n- plugins/ZODBRoleManager.py: don't claim authority for 'Authenticated'\n  or 'Anonymous' roles, which are managed by PAS.\n\n- plugins/ZODBRoleManager.py: don't freak out if a previously assigned\n  principal goes away.\n\n- plugins/ZODBGroupManager.py: don't freek out if a previously assigned\n  principal goes away.\n\n- plugins/ZODBUserManager.py: plugin now uses AuthEncoding for its\n  password encryption so that we can more easily support migrating\n  existing UserFolders. Since PAS has been out for a while,\n  though, we still will authenticate against old credentials\n\n- Repaired arrow images in two-list ZMI views.\n\n- searchPrincipals will work for exact matches when a plugin supports\n  both 'enumerateUsers' and 'enumerateGroups'.\n\n- 'Authenticated' Role is now added dynamically by the\n  PluggableAuthService, not by any role manager\n\n- Added WARNING-level logs with tracebacks for all swallowed\n  plugin exceptions, so that you notice that there is something\n  wrong with the plugins.\n\n- All authenticateCredentials() returned a single None when they\n  could not authenticate, although all calls expected a tuple.\n\n- The user id in extract user now calls _verifyUser to get the ID\n  mangled by the enumeration plugin, instead of mangling it with the\n  authentication ID, thereby allowing the authentication and\n  enumeration plugins to be different plugins.\n\n\n1.0.2 (2004-07-15)\n------------------\n\n- ZODBRoleManager and ZODBGroupManager needed the \"two_lists\" view,\n  and associated images, which migrated to the PluginRegsitry product\n  when they split;  restored them.\n\n\n1.0.1 (2004-05-18)\n------------------\n\n- CookieAuth plugin didn't successfully set cookies (first, because\n  of a NameError, then, due to a glitch with long lines).\n\n- Missing ZPL in most modules.\n\n\n1.0 (2004-04-29)\n----------------\n\n- Initial release\n", "##############################################################################\n#\n# Copyright (c) 2001 Zope Foundation and Contributors\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this\n# distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\"\"\" Classes: ZODBRoleManager\n\"\"\"\n\nimport logging\n\nfrom AccessControl import ClassSecurityInfo\nfrom AccessControl.class_init import InitializeClass\nfrom AccessControl.requestmethod import postonly\nfrom Acquisition import aq_inner\nfrom Acquisition import aq_parent\nfrom BTrees.OOBTree import OOBTree\nfrom Products.PageTemplates.PageTemplateFile import PageTemplateFile\nfrom zope.interface import Interface\n\nfrom ..interfaces.plugins import IRoleAssignerPlugin\nfrom ..interfaces.plugins import IRoleEnumerationPlugin\nfrom ..interfaces.plugins import IRolesPlugin\nfrom ..permissions import ManageUsers\nfrom ..plugins.BasePlugin import BasePlugin\nfrom ..utils import classImplements\nfrom ..utils import csrf_only\n\n\nLOG = logging.getLogger('PluggableAuthService')\n\n\nclass MultiplePrincipalError(Exception):\n    pass\n\n\nclass IZODBRoleManager(Interface):\n    \"\"\" Marker interface.\n    \"\"\"\n\n\nmanage_addZODBRoleManagerForm = PageTemplateFile(\n    'www/zrAdd', globals(), __name__='manage_addZODBRoleManagerForm')\n\n\ndef addZODBRoleManager(dispatcher, id, title=None, REQUEST=None):\n    \"\"\" Add a ZODBRoleManager to a Pluggable Auth Service. \"\"\"\n\n    zum = ZODBRoleManager(id, title)\n    dispatcher._setObject(zum.getId(), zum)\n\n    if REQUEST is not None:\n        REQUEST['RESPONSE'].redirect('%s/manage_workspace'\n                                     '?manage_tabs_message='\n                                     'ZODBRoleManager+added.' %\n                                     dispatcher.absolute_url())\n\n\nclass ZODBRoleManager(BasePlugin):\n\n    \"\"\" PAS plugin for managing roles in the ZODB.\n    \"\"\"\n    meta_type = 'ZODB Role Manager'\n    zmi_icon = 'fas fa-user-tag'\n\n    security = ClassSecurityInfo()\n\n    def __init__(self, id, title=None):\n\n        self._id = self.id = id\n        self.title = title\n\n        self._roles = OOBTree()\n        self._principal_roles = OOBTree()\n\n    def manage_afterAdd(self, item, container):\n\n        if item is self:\n            role_holder = aq_parent(aq_inner(container))\n            for role in getattr(role_holder, '__ac_roles__', ()):\n                try:\n                    if role not in ('Anonymous', 'Authenticated'):\n                        self.addRole(role)\n                except KeyError:\n                    pass\n\n        if 'Manager' not in self._roles:\n            self.addRole('Manager')\n\n    #\n    #   IRolesPlugin implementation\n    #\n    @security.private\n    def getRolesForPrincipal(self, principal, request=None):\n        \"\"\" See IRolesPlugin.\n        \"\"\"\n        result = list(self._principal_roles.get(principal.getId(), ()))\n\n        getGroups = getattr(principal, 'getGroups', lambda: ())\n        for group_id in getGroups():\n            result.extend(self._principal_roles.get(group_id, ()))\n\n        return tuple(result)\n\n    #\n    #   IRoleEnumerationPlugin implementation\n    #\n    def enumerateRoles(self, id=None, exact_match=False, sort_by=None,\n                       max_results=None, **kw):\n        \"\"\" See IRoleEnumerationPlugin.\n        \"\"\"\n        role_info = []\n        role_ids = []\n        plugin_id = self.getId()\n\n        if isinstance(id, str):\n            id = [id]\n\n        if exact_match and (id):\n            role_ids.extend(id)\n\n        if role_ids:\n            role_filter = None\n\n        else:   # Searching\n            role_ids = self.listRoleIds()\n            role_filter = _ZODBRoleFilter(id, **kw)\n\n        for role_id in role_ids:\n\n            if self._roles.get(role_id):\n                e_url = '%s/manage_roles' % self.getId()\n                p_qs = 'role_id=%s' % role_id\n                m_qs = 'role_id=%s&assign=1' % role_id\n\n                info = {}\n                info.update(self._roles[role_id])\n\n                info['pluginid'] = plugin_id\n                info['properties_url'] = '%s?%s' % (e_url, p_qs)\n                info['members_url'] = '%s?%s' % (e_url, m_qs)\n\n                if not role_filter or role_filter(info):\n                    role_info.append(info)\n\n        return tuple(role_info)\n\n    #\n    #   IRoleAssignerPlugin implementation\n    #\n    @security.private\n    def doAssignRoleToPrincipal(self, principal_id, role):\n        return self.assignRoleToPrincipal(role, principal_id)\n\n    @security.private\n    def doRemoveRoleFromPrincipal(self, principal_id, role):\n        return self.removeRoleFromPrincipal(role, principal_id)\n\n    #\n    #   Role management API\n    #\n    @security.protected(ManageUsers)\n    def listRoleIds(self):\n        \"\"\" Return a list of the role IDs managed by this object.\n        \"\"\"\n        return self._roles.keys()\n\n    @security.protected(ManageUsers)\n    def listRoleInfo(self):\n        \"\"\" Return a list of the role mappings.\n        \"\"\"\n        return self._roles.values()\n\n    @security.protected(ManageUsers)\n    def getRoleInfo(self, role_id):\n        \"\"\" Return a role mapping.\n        \"\"\"\n        return self._roles[role_id]\n\n    @security.private\n    def addRole(self, role_id, title='', description=''):\n        \"\"\" Add 'role_id' to the list of roles managed by this object.\n\n        o Raise KeyError on duplicate.\n        \"\"\"\n        if self._roles.get(role_id) is not None:\n            raise KeyError('Duplicate role: %s' % role_id)\n\n        self._roles[role_id] = {'id': role_id, 'title': title,\n                                'description': description}\n\n    @security.private\n    def updateRole(self, role_id, title, description):\n        \"\"\" Update title and description for the role.\n\n        o Raise KeyError if not found.\n        \"\"\"\n        self._roles[role_id].update({'title': title,\n                                     'description': description})\n\n    @security.private\n    def removeRole(self, role_id, REQUEST=None):\n        \"\"\" Remove 'role_id' from the list of roles managed by this object.\n\n        o Raise KeyError if not found.\n\n        Note that if you really want to remove a role you should first\n        remove it from the roles in the root of the site (at the\n        bottom of the Security tab at manage_access).\n        \"\"\"\n        for principal_id in self._principal_roles.keys():\n            self.removeRoleFromPrincipal(role_id, principal_id)\n\n        del self._roles[role_id]\n\n    #\n    #   Role assignment API\n    #\n    @security.protected(ManageUsers)\n    def listAvailablePrincipals(self, role_id, search_id):\n        \"\"\" Return a list of principal IDs to whom a role can be assigned.\n\n        o If supplied, 'search_id' constrains the principal IDs;  if not,\n          return empty list.\n\n        o Omit principals with existing assignments.\n        \"\"\"\n        result = []\n\n        if search_id:  # don't bother searching if no criteria\n\n            parent = aq_parent(self)\n\n            for info in parent.searchPrincipals(max_results=20,\n                                                sort_by='id',\n                                                id=search_id,\n                                                exact_match=False):\n                id = info['id']\n                title = info.get('title', id)\n                if role_id not in self._principal_roles.get(id, ()) and \\\n                        role_id != id:\n                    result.append((id, title))\n\n        return result\n\n    @security.protected(ManageUsers)\n    def listAssignedPrincipals(self, role_id):\n        \"\"\" Return a list of principal IDs to whom a role is assigned.\n        \"\"\"\n        result = []\n\n        for k, v in self._principal_roles.items():\n            if role_id in v:\n                # should be at most one and only one mapping to 'k'\n\n                parent = aq_parent(self)\n                info = parent.searchPrincipals(id=k, exact_match=True)\n\n                if len(info) > 1:\n                    message = ('Multiple groups or users exist with the '\n                               'name \"%s\". Remove one of the duplicate groups '\n                               'or users.' % (k))\n                    LOG.error(message)\n                    raise MultiplePrincipalError(message)\n\n                if len(info) == 0:\n                    title = '<%s: not found>' % k\n                else:\n                    title = info[0].get('title', k)\n                result.append((k, title))\n\n        return result\n\n    @security.private\n    def assignRoleToPrincipal(self, role_id, principal_id):\n        \"\"\" Assign a role to a principal (user or group).\n\n        o Return a boolean indicating whether a new assignment was created.\n\n        o Raise KeyError if 'role_id' is unknown.\n        \"\"\"\n        # raise KeyError if unknown!\n        role_info = self._roles[role_id]  # noqa\n\n        current = self._principal_roles.get(principal_id, ())\n        already = role_id in current\n\n        if not already:\n            new = current + (role_id,)\n            self._principal_roles[principal_id] = new\n            self._invalidatePrincipalCache(principal_id)\n\n        return not already\n\n    @security.private\n    def removeRoleFromPrincipal(self, role_id, principal_id):\n        \"\"\" Remove a role from a principal (user or group).\n\n        o Return a boolean indicating whether the role was already present.\n\n        o Raise KeyError if 'role_id' is unknown.\n\n        o Ignore requests to remove a role not already assigned to the\n          principal.\n        \"\"\"\n        # raise KeyError if unknown!\n        role_info = self._roles[role_id]  # noqa\n\n        current = self._principal_roles.get(principal_id, ())\n        new = tuple([x for x in current if x != role_id])\n        already = current != new\n\n        if already:\n            self._principal_roles[principal_id] = new\n            self._invalidatePrincipalCache(principal_id)\n\n        return already\n\n    #\n    #   ZMI\n    #\n    manage_options = (({'label': 'Roles', 'action': 'manage_roles'},)\n                      + BasePlugin.manage_options)\n\n    security.declareProtected(ManageUsers, 'manage_roles')  # NOQA: D001\n    manage_roles = PageTemplateFile('www/zrRoles', globals(),\n                                    __name__='manage_roles')\n\n    security.declareProtected(ManageUsers, 'manage_twoLists')  # NOQA: D001\n    manage_twoLists = PageTemplateFile('../www/two_lists', globals(),\n                                       __name__='manage_twoLists')\n\n    @security.protected(ManageUsers)\n    @csrf_only\n    @postonly\n    def manage_addRole(self, role_id, title, description, RESPONSE=None,\n                       REQUEST=None):\n        \"\"\" Add a role via the ZMI.\n        \"\"\"\n        if not role_id:\n            message = 'Please+provide+a+Role+ID'\n        else:\n            self.addRole(role_id, title, description)\n            message = 'Role+added'\n\n        if RESPONSE is not None:\n            RESPONSE.redirect('%s/manage_roles?manage_tabs_message=%s' %\n                              (self.absolute_url(), message))\n\n    @security.protected(ManageUsers)\n    @csrf_only\n    @postonly\n    def manage_updateRole(self, role_id, title, description, RESPONSE=None,\n                          REQUEST=None):\n        \"\"\" Update a role via the ZMI.\n        \"\"\"\n        self.updateRole(role_id, title, description)\n\n        message = 'Role+updated'\n\n        if RESPONSE is not None:\n            RESPONSE.redirect('%s/manage_roles?role_id=%s&'\n                              'manage_tabs_message=%s' %\n                              (self.absolute_url(), role_id, message))\n\n    @security.protected(ManageUsers)\n    @csrf_only\n    @postonly\n    def manage_removeRoles(self, role_ids, RESPONSE=None, REQUEST=None):\n        \"\"\" Remove one or more role assignments via the ZMI.\n\n        Note that if you really want to remove a role you should first\n        remove it from the roles in the root of the site (at the\n        bottom of the Security tab at manage_access).\n        \"\"\"\n        role_ids = [_f for _f in role_ids if _f]\n\n        if not role_ids:\n            message = 'no+roles+selected'\n\n        else:\n\n            for role_id in role_ids:\n                self.removeRole(role_id)\n\n            message = 'Role+assignments+removed'\n\n        if RESPONSE is not None:\n            RESPONSE.redirect('%s/manage_roles?manage_tabs_message=%s' %\n                              (self.absolute_url(), message))\n\n    @security.protected(ManageUsers)\n    @csrf_only\n    @postonly\n    def manage_assignRoleToPrincipals(self, role_id, principal_ids,\n                                      RESPONSE, REQUEST=None):\n        \"\"\" Assign a role to one or more principals via the ZMI.\n        \"\"\"\n        assigned = []\n\n        for principal_id in principal_ids:\n            if self.assignRoleToPrincipal(role_id, principal_id):\n                assigned.append(principal_id)\n\n        if not assigned:\n            message = 'Role+%s+already+assigned+to+all+principals' % role_id\n        else:\n            message = 'Role+%s+assigned+to+%s' % (role_id, '+'.join(assigned))\n\n        if RESPONSE is not None:\n            RESPONSE.redirect('%s/manage_roles?role_id=%s&assign=1'\n                              '&manage_tabs_message=%s' %\n                              (self.absolute_url(), role_id, message))\n\n    @security.protected(ManageUsers)\n    @csrf_only\n    @postonly\n    def manage_removeRoleFromPrincipals(self, role_id, principal_ids,\n                                        RESPONSE=None, REQUEST=None):\n        \"\"\" Remove a role from one or more principals via the ZMI.\n        \"\"\"\n        removed = []\n\n        for principal_id in principal_ids:\n            if self.removeRoleFromPrincipal(role_id, principal_id):\n                removed.append(principal_id)\n\n        if not removed:\n            message = 'Role+%s+alread+removed+from+all+principals' % role_id\n        else:\n            message = 'Role+%s+removed+from+%s' % (role_id, '+'.join(removed))\n\n        if RESPONSE is not None:\n            RESPONSE.redirect('%s/manage_roles?role_id=%s&assign=1'\n                              '&manage_tabs_message=%s' %\n                              (self.absolute_url(), role_id, message))\n\n\nclassImplements(ZODBRoleManager, IZODBRoleManager, IRolesPlugin,\n                IRoleEnumerationPlugin, IRoleAssignerPlugin)\n\n\nInitializeClass(ZODBRoleManager)\n\n\nclass _ZODBRoleFilter:\n\n    def __init__(self, id=None, **kw):\n\n        self._filter_ids = id\n\n    def __call__(self, role_info):\n\n        if self._filter_ids:\n\n            key = 'id'\n\n        else:\n            return 1  # ???:  try using 'kw'\n\n        value = role_info.get(key)\n\n        if not value:\n            return False\n\n        for id in self._filter_ids:\n            if value.find(id) >= 0:\n                return 1\n\n        return False\n"], "fixing_code": ["Change Log\n==========\n\n2.6.0 (unreleased)\n------------------\n\n- Fix missing access control on ZODB Role Manager ``enumerateRoles``\n\n- Fix open redirect issue in `Cookie Auth Helper` redirect handling\n\n- Add support for Python 3.9.\n\n\n2.5.1 (2020-11-13)\n------------------\n\n- Fixed error assigning groups in ``manage_groups`` page in ZMI.\n  (`#61 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/61>`_,\n  `#84 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/84>`_)\n\n- Fix DeprecationWarnings occurring on Zope 5.\n\n\n2.5 (2020-10-12)\n----------------\n\n- Renamed ``xml`` dir to ``xml_templates``.\n  This avoids an import warning on Python 2.7.\n\n- Disable ZMI CSRF check and log it if sessioning is not available\n  instead of breaking ZMI interactions\n\n- Clear caches before sending group user added/removed events\n  (`#71 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/71>`_)\n\n- Prevent creation of users/groups/roles with empty ID in the ZODB\n  (`#70 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/70>`_)\n\n- update configuration for version 5 of ``isort``\n\n\n2.4 (2020-02-09)\n----------------\n\n- no longer rely on ``ZServer`` for any WebDAV-related functionality.\n  (`#64 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/64>`_)\n\n\n2.3 (2020-02-02)\n----------------\n\n- Replace all ``filter(None...)`` expressions which break under Python 3\n  (`#63 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/63>`_)\n\n\n2.2.1 (2020-01-13)\n------------------\n\n- Fix broken ICredentialsUpdatedEvent event handler call to updateCredentials.\n  (`#59 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/59>`_)\n\n\n2.2 (2019-11-23)\n----------------\n\n- Add new events to be able to notify when a principal is added to\n  or removed from a group. Notify these events when principals are\n  added or removed to a group in ZODBGroupManager\n  (`#17 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/17>`_)\n\n\n2.1.1 (2019-10-23)\n------------------\n\n- Fix bug in ``getRolesForPrincipal`` for non PAS user.\n\n\n2.1 (2019-08-29)\n----------------\n\n- Fix formatting in \"Plugin Types\" documentation.\n\n- Fixed error assigning roles in ``manage_roles`` page in ZMI.\n  See issues `#43 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/43>`_\n  and `#51 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/51>`_.\n\n\n2.0 (2019-05-10)\n----------------\n\n- Drop unused ``.utils.allTests`` method.\n\n\n2.0b6 (2019-04-17)\n------------------\n\n- fixed usage of deprecated ``im_self``\n  (`#40 <https://github.com/zopefoundation/Products.PluggableAuthService/pull/40>`_)\n\n\n2.0b5 (2019-04-13)\n------------------\n\n- fixed the \"Configured PAS\" factory\n  (`#39 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/39>`_)\n\n- styled \"Configured PAS\" add dialog for the Zope 4 ZMI\n  (`#38 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/38>`_)\n\n- prevent the ZMI add dialog showing in the Zope 4 ZMI\n  (`#37 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/37>`_)\n\n- added the indirect dependency ``Products.Sessions`` for the CSRF-support\n\n\n2.0b4 (2019-04-04)\n------------------\n\n- simplified Travis CI test configuration\n\n- added stricter linting configuration\n\n- added ``project_urls`` to the setup so PyPI shows more relevant links\n\n- added project badges to the README, which will show on the GitHub front page\n\n- Fix ZMI Templates and add ZMI icons for Zope 4\n  (`#36 <https://github.com/zopefoundation/Products.PluggableAuthService/pull/36>`_)\n\n\n2.0b3 (2019-03-29)\n------------------\n\n- Fixed Dynamic Groups Plugin ZMI view\n  (`#33 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/33>`_)\n\n- Re-enabled XML-RPC support without requiring ZServer\n  (`#34 <https://github.com/zopefoundation/Products.PluggableAuthService/issues/34>`_)\n\n- Specify supported Python versions using ``python_requires`` in setup.py\n\n- Added support for Python 3.8\n\n- Fix CSRF defense incompatibility with some session implementations\n\n\n2.0b2 (2018-10-16)\n------------------\n\n- Add support for Python 3.7.\n\n- Do not override a previously set response body in\n  ``HTTPBasicAuthHelper.challenge()`` allowing to set the response body via\n  an exception view in Zope >= 4.0b6.\n\n- Add new event to be able to notify group creation.\n\n- Refactoring to make it easier to override ``updateCredentials``.\n\n\n2.0b1 (2018-05-18)\n------------------\n\n- The dependency on ``ZServer`` is now optional. To use the features which\n  require ``ZServer`` (WebDav, XML-RPC, FTP) use the setuptools extra `zserver`\n  when installing the package.\n\n- Do not fail when our base profiles are already registered.\n  This may happen in tests if our ``initialize`` code is called twice.\n\n- Add support for Python 3.\n\n- Reformatted code for PEP-8 compliance.\n\n- Require Zope 4.0b5 as minimum Zope version.\n\n\n1.11.0 (2016-03-01)\n-------------------\n\n- Add new event to be able to notify group deletion.\n\n- Fix usage of os.path.split(). Could result in Errors during import\n  on Windows.\n\n\n1.10.0 (2013-02-19)\n-------------------\n\n- Allow specifying a policy for transforming / normalizing login names\n  for all plugins in a PAS:\n\n  - Added ``login_transform`` string property to PAS.\n\n  - Added ``applyTransform`` method to PAS, which looks for a method on PAS\n    with the name specified in the ``login_transform`` property.\n\n  - Added two possible transforms to PAS: ``lower`` and ``upper``.\n\n  - Changed the methods of PAS to call ``applyTransform`` wherever needed.\n\n  - Added the existing ``updateUser`` method of ZODBUserManager to the\n    IUserEnumerationPlugin interface.\n\n  - Added a new ``updateEveryLoginName`` method to ZODBUserManager and the\n    IUserEnumerationPlugin interface.\n\n  - Added three methods to PAS and IPluggableAuthService:\n    ``updateLoginName``, ``updateOwnLoginName``, ``updateAllLoginNames``.\n    These methods call ``updateUser`` or ``updateEveryLoginName`` on every\n    IUserEnumerationPlugin. Since these are later additions to the plugin\n    interface, we log a warning when a plugin does not have these methods\n    (for example the ``mutable_properties`` plugin of PlonePAS) but will\n    not fail.  When no plugin is able to update a user, this will raise an\n    exception: we do not want to quietly let this pass when for example a\n    login name is already taken by another user.\n\n  - Changing the ``login_transform`` property in the ZMI will call\n    ``PAS.updateAllLoginNames``, unless ``login_transform`` is the same or\n    has become an empty string.\n\n  - The new ``login_transform`` property is empty by default. In that case,\n    the behavior of PAS is the same as previously. The various\n    ``applyTransform`` calls will have a (presumably very small)\n    performance impact.\n\n- Launchpad #1079204:  Added CSRF protection for the ZODBUserManager,\n  ZODBGroupManager, ZODBRoleManger, and DynamicGroupsPlugin plugins.\n\n\n1.9.0 (2012-08-30)\n------------------\n\n- Launchpad #649596:  add a protocol for plugins which check whether a\n  non-top-level PAS instance is \"competent\" to authenticate a given request;\n  if not, the instance defers to higher-level instances.  Thanks to Dieter\n  Maurer for the patch.\n\n\n1.8.0 (2012-05-08)\n------------------\n\n- Added export / import support for the ChallengeProtocolChooser plugin's\n  label - protocols mapping.\n\n\n1.7.8 (2012-05-08)\n------------------\n\n- In authenticateCredentials do NOT fall back to using the login as\n  userid when there is no match, as that gives a high chance of\n  seeming to log in successfully, but in reality failing.\n  [maurits]\n\n\n1.7.7 (2012-02-27)\n------------------\n\n- Explicitly encode/decode data for GS\n\n\n1.7.6 (2011-10-31)\n------------------\n\n- Launchpad #795086:  fixed creation of PropertiesUpdated event.\n\n\n1.7.5 (2011-05-30)\n------------------\n\n- Launchpad #789858:  don't allow conflicting login name in 'updateUser'.\n\n- Set appropriate cache headers on CookieAuthHelper login redirects to prevent\n  caching by proxy servers.\n\n\n1.7.4 (2011-05-13)\n------------------\n\n- Added forward compatibility with DateTime 3.\n\n\n1.7.3 (2011-02-10)\n------------------\n\n- In the ZODBRoleManager made it clearer that adding a removing a role\n  does not have much effect if you do not do the same in the root of\n  the site (at the bottom of the Security tab at manage_access).\n  Fixes https://bugs.launchpad.net/zope-pas/+bug/672694\n\n- Return the created user in _doAddUser, to match change in\n  AccessControl 2.13.4.\n\n- Fixed possible ``binascii.Error`` in ``extractCredentials`` of\n  CookieAuthHelper. This is a corner case that might happen after\n  a browser upgrade.\n\n\n1.7.2 (2010-11-11)\n------------------\n\n- Allow for a query string in CookieAuthHelper's ``login_path``.\n\n- Trap \"swallowable\" exceptions from ``IRoles`` plugins.  Thanks to\n  Willi Langenburger for the patch.  Fixes\n  https://bugs.launchpad.net/zope-pas/+bug/615474 .\n\n- Fixed possible TypeError in ``extractCredentials`` of CookieAuthHelper\n  when the ``__ac`` cookie is not ours (but e.g. from plone.session,\n  though even then only in a corner case).\n\n- Fixed chameleon incompatibilities\n\n\n1.7.1 (2010-07-01)\n------------------\n\n- Made ``ZODBRoleManager.assignRoleToPrincipal`` raise and log a more\n  informative error when detecting a duplicate principal.\n  https://bugs.launchpad.net/zope-pas/+bug/348795\n\n- Updated ``DynamicGroupsPlugin.enumerateGroups`` to return an empty sequence\n  for an unknown group ID, rather than raising KeyError.\n  https://bugs.launchpad.net/zope-pas/+bug/585365\n\n- Updated all code to raise new-style exceptions.\n\n- Removed dependency on ``zope.app.testing``.\n\n- Cleaned out a number of old imports, because we now require Zope >= 2.12.\n\n- Updated ``setDefaultRoles`` to use the ``addPermission`` API if available.\n\n\n1.7.0 (2010-04-08)\n------------------\n\n- Allow CookieAuthHelper's ``login_path`` to be set to an absolute url for\n  integration with external authentication mechanisms.\n\n- Fixed xml templates directory path computation to allow reuse of\n  ``SimpleXMLExportImport`` class outside ``Products.PluggableAuthService``.\n\n\n1.7.0b2 (2010-01-31)\n--------------------\n\n- Modify ZODBGroupManager to update group title and description independently.\n\n\n1.7.0b1 (2009-11-16)\n--------------------\n\n- This release requires for Zope2 >= 2.12.\n\n- Simplified buildout to just what is needed to run tests.\n\n- Don't fail on users defined in multiple user sources on the\n  ZODBGroupManager listing page.\n\n- Fixed deprecation warnings for use of ``Globals`` under Zope 2.12.\n\n- Fixed deprecation warnings for the ``md5`` and ``sha`` modules under\n  Python >= 2.6.\n\n- Added test for multiple auth header support in the HTTPBasicAuthHelper.\n\n- Changed HTTPBasicAuthHelper to not rely on one obscure feature of the\n  HTTPResponse.\n\n\n1.6.2 (2009-11-16)\n------------------\n\n- Launchpad #420319:  Fix misconfigured ``startswith`` match type filter\n  in ``Products.PluggableAuthService.plugins.DomainAuthHelper``.\n\n- Fixed test setup for tests using page templates relying on the\n  ``DefaultTraversable`` adapter.\n\n- Fixed broken markup in templates.\n\n\n1.6.1 (2008-11-20)\n------------------\n\n- Launchpad #273680:  Avoid expensive / incorrect dive into ``enumerateUsers``\n  when trying to validate w/o either a real ID or login.\n\n- Launchpad #300321:\n  ``Products.PluggableAuthService.pluginsZODBGroupManager.enumerateGroups``\n  failed to find groups with unicode IDs.\n\n\n1.6 (2008-08-05)\n----------------\n\n- Fixed another deprecation for ``manage_afterAdd`` occurring when used\n  together with Five (this time for the ``ZODBRoleManager`` class).\n\n- Ensure the ``_findUser`` cache is invalidated if the roles or groups for\n  a principal change.\n\n- Launchpad #15569586:  docstring fix.\n\n- Factored out ``filter`` logic into separate classes;  added filters\n  for ``startswith`` test and (if the IPy module is present) IP-range\n  tests.  See https://bugs.launchpad.net/zope-pas/+bug/173580 .\n\n- Zope 2.12 compatibility - removed ``Interface.Implements`` import if\n  ``zope.interface`` available.\n\n- Ensure ``ZODBRoleManagerExportImport`` doesn't fail if it tries to add a\n  role that already exists (idempotence is desirable in GS importers)\n\n- Fixed tests so they run with Zope 2.11.\n\n- Split up large permission tests into individual tests.\n\n- Fixed deprecation warning occurring when used together with\n  Five. (``manage_afterAdd`` got undeprecated.)\n\n- Added buildout.\n\n\n1.5.3 (2008-02-06)\n------------------\n\n- ZODBUserManager plugin: allow unicode arguments to\n  ``enumerateUsers``. (https://bugs.launchpad.net/zope-pas/+bug/189627)\n\n- plugins/ZODBRoleManager: added logging in case searchPrincipial()\n  returning more than one result (which might happen in case of having\n  duplicate id within difference user sources)\n\n\n1.5.2 (2007-11-28)\n------------------\n\n- DomainAuthHelper plugin:  fix glitch for plugins which have never\n  configured any \"default\" policy:  ``authenticateCredentials`` and\n  ``getRolesForPrincipal`` would raise ValueError.\n  (http://www.zope.org/Collectors/PAS/59)\n\n\n1.5.1 (2007-09-11)\n------------------\n\n- PluggableAuthService._verifyUser: changed to use exact_match to the\n  enumerator, otherwise a user with login ``foobar`` might get returned\n  by _verifyUser for a query for ``login='foo'`` because the enumerator\n  happened to return 'foobar' first in the results.\n\n- Add a test for manage_zmi_logout and replace a call to isImplementedBy\n  with providedBy.\n  (http://www.zope.org/Collectors/PAS/58)\n\n\n1.5 (2006-06-17)\n----------------\n\n- Add support for property plugins returning an IPropertySheet\n  to PropertiedUser. Added addPropertysheet to the IPropertiedUser.\n\n- Added a method to the IRoleAssignerPlugin to remove roles from a\n  principal, and an implementation for it on the ZODBRoleManager.\n  (http://www.zope.org/Collectors/PAS/57)\n\n- Added events infrastructure. Enabled new IPrincipalCreatedEvent and\n  ICredentialsUpdatedEvent events.\n\n- Added support for registering plugin types via ZCML.\n\n- Implemented authentication caching in _extractUserIds.\n\n- Ported standard user folder tests from the AccessControl test suite.\n\n- Passwords with \":\" characters would break authentication\n  (http://www.zope.org/Collectors/PAS/51)\n\n- Corrected documented software dependencies\n\n- Converted to publishable security sensitive methods to only accept\n  POST requests to prevent XSS attacks.  See\n  http://www.zope.org/Products/Zope/Hotfix-2007-03-20/announcement and\n  http://dev.plone.org/plone/ticket/6310\n\n- Fixed issue in the user search filter where unrecognized keyword\n  arguments were ignored resulting in duplicate search entries.\n  (http://dev.plone.org/plone/ticket/6300)\n\n- Made sure the Extensions.upgrade script does not commit full\n  transactions but only sets (optimistic) savepoints. Removed bogus\n  Zope 2.7 compatibility in the process.\n  (http://www.zope.org/Collectors/PAS/55)\n\n- Made the CookieAuthHelper only use the ``__ac_name`` field if\n  ``__ac_password`` is also present. This fixes a login problem for\n  CMF sites where the login name was remembered between sessions with\n  an ``__ac_name`` cookie.\n\n- Made the DomainAuthHelper return the remote address, even it the\n  remote host is not available (http://www.zope.org/Collectors/PAS/49).\n\n- Fixed bug in DelegatingMultiPlugin which attempted to validate the\n  supplied password directly against the user password - updated to use\n  AuthEncoding.pw_validate to handle encoding issues\n\n- Fixed serious security hole in DelegatingMultiPlugin which allowed\n  Authentication if the EmergencyUser login was passed in.  Added\n  password validation utilizing AuthEncoding.pw_validate\n\n- Fixed a set of tests that tested values computed from dictionaries\n  and could break since dictionaries are not guaranteed to have any\n  sort order.\n\n- Fixed test breakage induced by use of Z3 pagetemplates in Zope\n  2.10+.\n\n- BasePlugin: The listInterfaces method only considered the old-style\n  __implements__ machinery when determining interfaces provided by\n  a plugin instance.\n\n- ZODBUserManager: Already encrypted passwords were encrypted again in\n  addUser and updateUserPassword.\n  (http://www.zope.org/Collectors/Zope/1926)\n\n- Made sure the emergency user via HTTP basic auth always wins, no matter\n  how borken the plugin landscape.\n\n- Cleaned up code in CookieAuthHelper which allowed the form to override\n  login/password if a cookie had already been set.\n\n- Removed some BBB code for Zope versions < 2.8, which is not needed\n  since we require Zope > 2.8.5 nowadays.\n\n\n1.4 (2006-08-28)\n----------------\n\n- Extended the DomainAuthHelper to function as its own extraction\n  plugin, to allow for the case that another extractor is registered,\n  but does not return any credentials.\n  (http://www.zope.org/Collectors/PAS/46)\n\n- Re-worded parts of the README so they don't point to specific or\n  non-existing files (http://www.zope.org/Collectors/PAS/6 and\n  http://www.zope.org/Collectors/PAS/47)\n\n\n1.4-beta (2006-08-07)\n---------------------\n\n- Created a \"Configured PAS\" entry in the ZMI add list, which\n  allows creating a PAS using base and extension GenericSetup profiles\n  registered for IPluggableAuthService.  This entry should eventually\n  replace the \"stock\" PAS entry (assuming that we make GenericSetup\n  a \"hard\" dependency).\n\n- Added an \"empty\" GenericSetup profile, which creates a PAS containing\n  only a plugin registry and a setup tool.\n\n- Repaired the \"simple\" GenericSetup profile to be useful, rather than\n  catastrophic, to apply:  it now creates and registers a set of\n  ZODB-based user / group / role plugins, along with a basic auth\n  helper.\n\n- ZODBUserManager: Extend the \"notional IZODBUserManager interface\"\n  with the left-out updateUser facility and a corresponding\n  manage_updateUser method for ZMI use. Removed any responsibility\n  for updating a user's login from the updateUserPassword and\n  manage_updateUserPassword methods. This fixes the breakage\n  described in the collector issue below, and makes the ZMI view\n  for updating users work in a sane way.\n  (http://www.zope.org/Collectors/PAS/42)\n\n- CookieAuthHelper: If expireCookie was called and extractCredentials\n  was hit in the same request, the CookieAuthHelper would throw an\n  exception (http://www.zope.org/Collectors/PAS/43)\n\n- Added a DEPENDENCIES.txt. (http://www.zope.org/Collectors/PAS/44)\n\n\n1.3 (2006-06-09)\n----------------\n\n- No changes from version 1.3-beta\n\n\n1.3-beta (2006-06-03)\n---------------------\n\n- Modify CookieAuthHelper to prefer __ac form variables to the cookie\n  when extracting credentials.\n  (https://dev.plone.org/plone/ticket/5355)\n\n\n1.2 (2006-05-14)\n----------------\n\n- Fix manage_zmi_logout which stopped working correctly as soon as the\n  PluggableAuthService product code was installed by correcting the\n  monkeypatch for it in __init__.py.\n  (http://www.zope.org/Collectors/PAS/12)\n\n- Add missing interface for IPropertiedUser and tests\n  (http://www.zope.org/Collectors/PAS/16)\n\n- Removed STX links from README.txt which do nothing but return\n  404s when clicked from the README on zope.org.\n  (http://www.zope.org/Collectors/PAS/6)\n\n- Fixing up inconsistent searching in the listAvailablePrincipals\n  method of the ZODBRoleManager and ZODBGroupManager plugins. Now both\n  constrain searches by ID.\n  (http://www.zope.org/Collectors/PAS/11)\n\n- Convert from using zLOG to using the Python logging module.\n  (http://www.zope.org/Collectors/PAS/14)\n\n\n1.2-beta (2006-02-25)\n---------------------\n\n- Added suppport for exporting / importing a PAS and its content via\n  the GenericSetup file export framework.\n\n- Made ZODBRoleManager plugin check grants to the principal's groups,\n  as well as those made to the principal directly.\n\n- Added two new interfaces, IChallengeProtocolChooser and\n  IRequestTypeSniffer. Those are used to select the 'authorization\n  protocol' or 'challenger protocol' to be used for challenging\n  according to the incoming request type.\n\n- Repaired warings appearing in Zope 2.8.5 due to a couple typos\n  in security declarations.\n\n- Repaired DeprecationWarnings due to use of Zope2 interface verification.\n\n- Repaired unit test breakage (unittest.TestCase instances have\n  'failUnless'/'failIf', rather than 'assertTrue'/'assertFalse').\n\n- Fixed a couple more places where Zope 2-style ``__implements__``\n  were being used to standardize on using ``classImplements``.\n\n- Fixed fallback implementations of ``providedBy`` and\n  ``implementedBy`` to always return a tuple.\n\n- Make sure challenge doesn't break if existing instances of the\n  PluginRegistry don't yet have ``IChallengeProtocolChooser`` as a\n  registered interface. (Would be nice to have some sort of\n  migration for the PluginRegistry between PAS releases)\n\n- Don't assume that just because zope.interface can be imported\n  that Five is present.\n\n\n1.1b2 (2005-07-14)\n------------------\n\n- Repaired a missing 'nocall:' in the Interfaces activation form.\n\n\n1.1b1 (2005-07-06)\n------------------\n\n- PAS-level id mangling is no more. All (optional) mangling is now\n  done on a per-plugin basis.\n\n- Interfaces used by PAS are now usable in both Zope 2.7 and 2.8\n  (Five compatible)\n\n\n1.0.5 (2005-01-31)\n------------------\n\n- Simplified detection of the product directory using 'package_home'.\n\n- Set a default value for the 'login' attribute of a PAS, to avoid\n  UnboundLocalError.\n\n1.0.4 (2005-01-27)\n------------------\n\n- Made 'Extensions' a package, to allow importing its scripts\n  as modules.\n\n- Declared new 'IPluggableAuthService' interface, describing additional\n  PAS-specific API.\n\n- Exposed PAS' 'resetCredentials' and 'updateCredentials' as public\n  methods.\n\n- Monkey-patch ZMI's logout to invoke PAS' 'resetCredentials', if\n  present.\n\n- CookieAuth plugin now encodes and decodes cookies in the same\n  format as CookieCrumbler to provide compatibility between\n  sites running PAS and CC.\n\n- Add a publicly callable \"logout\" method on the PluggableAuthService\n  instance that will call resetCredentials on all activated\n  ICredentialsRest plugins, thus effecting a logout.\n\n- Enabled the usage of the CookieAuthHelper login screen functionality\n  without actually using the CookieAuthHelper to maintain the\n  credentials store in its own auth cookie by ensuring that only\n  active updateCredentials plugins are informed about a successful\n  login so they can store the credentials.\n\n- Added a _getPAS method to the BasePlugin base class to be used\n  as the canonical way of getting at the PAS instance from within\n  plugins.\n\n- Group and user plugins can now specify their own title for a\n  principal entry (PAS will not compute one if they do).\n\n- PAS and/or plugins can now take advantage of caching using the\n  Zope ZCacheable framework with RAM Cache Managers. See\n  doc/caching.stx for the details.\n\n- Make 'getUserById' pass the 'login' to '_findUser', so that\n  the returned user object can answer 'getUserName' sanely.\n\n- Harden 'logout' against missing HTTP_REFERRER.\n\n- Avoid triggering \"Emergency user cannot own\" when adding a\n  CookieAuthHelper plugin as that user.\n\n- Detect and prevent recursive redirecting in the CookieAuthHelper\n  if the login_form cannot be reached by the Anonymous User.\n\n- Made logging when swallowing exceptions much less noisy (they\n  *don't* necessarily require attention).\n\n- Clarified interface of IAuthenticationPlugin, which should return\n  None rather than raising an exception if asked to authenticate an\n  unknown principal;  adjusted ZODBUserManager accordingly.\n\n- Don't log an error in zodb_user_plugin's authenticateCredentials\n  if we don't have a record for a particular username, just return None.\n\n- If an IAuthenticationPlugin returns None instead of a tuple\n  from authenticateCredentials, don't log a tuple-unpack error in PAS\n  itself.\n\n\n1.0.3 (2004-10-16)\n------------------\n\n- Implemented support for issuing challenges via IChallengePlugins.\n\n  - three challenge styles in particular:\n\n    - HTTP Basic Auth\n\n    - CookieCrumbler-like redirection\n\n    - Inline authentication form\n\n- Made unit tests pass when run with cAccessControl.\n\n- plugins/ZODBRoleManager.py: don't claim authority for 'Authenticated'\n  or 'Anonymous' roles, which are managed by PAS.\n\n- plugins/ZODBRoleManager.py: don't freak out if a previously assigned\n  principal goes away.\n\n- plugins/ZODBGroupManager.py: don't freek out if a previously assigned\n  principal goes away.\n\n- plugins/ZODBUserManager.py: plugin now uses AuthEncoding for its\n  password encryption so that we can more easily support migrating\n  existing UserFolders. Since PAS has been out for a while,\n  though, we still will authenticate against old credentials\n\n- Repaired arrow images in two-list ZMI views.\n\n- searchPrincipals will work for exact matches when a plugin supports\n  both 'enumerateUsers' and 'enumerateGroups'.\n\n- 'Authenticated' Role is now added dynamically by the\n  PluggableAuthService, not by any role manager\n\n- Added WARNING-level logs with tracebacks for all swallowed\n  plugin exceptions, so that you notice that there is something\n  wrong with the plugins.\n\n- All authenticateCredentials() returned a single None when they\n  could not authenticate, although all calls expected a tuple.\n\n- The user id in extract user now calls _verifyUser to get the ID\n  mangled by the enumeration plugin, instead of mangling it with the\n  authentication ID, thereby allowing the authentication and\n  enumeration plugins to be different plugins.\n\n\n1.0.2 (2004-07-15)\n------------------\n\n- ZODBRoleManager and ZODBGroupManager needed the \"two_lists\" view,\n  and associated images, which migrated to the PluginRegsitry product\n  when they split;  restored them.\n\n\n1.0.1 (2004-05-18)\n------------------\n\n- CookieAuth plugin didn't successfully set cookies (first, because\n  of a NameError, then, due to a glitch with long lines).\n\n- Missing ZPL in most modules.\n\n\n1.0 (2004-04-29)\n----------------\n\n- Initial release\n", "##############################################################################\n#\n# Copyright (c) 2001 Zope Foundation and Contributors\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this\n# distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\"\"\" Classes: ZODBRoleManager\n\"\"\"\n\nimport logging\n\nfrom AccessControl import ClassSecurityInfo\nfrom AccessControl.class_init import InitializeClass\nfrom AccessControl.requestmethod import postonly\nfrom Acquisition import aq_inner\nfrom Acquisition import aq_parent\nfrom BTrees.OOBTree import OOBTree\nfrom Products.PageTemplates.PageTemplateFile import PageTemplateFile\nfrom zope.interface import Interface\n\nfrom ..interfaces.plugins import IRoleAssignerPlugin\nfrom ..interfaces.plugins import IRoleEnumerationPlugin\nfrom ..interfaces.plugins import IRolesPlugin\nfrom ..permissions import ManageUsers\nfrom ..plugins.BasePlugin import BasePlugin\nfrom ..utils import classImplements\nfrom ..utils import csrf_only\n\n\nLOG = logging.getLogger('PluggableAuthService')\n\n\nclass MultiplePrincipalError(Exception):\n    pass\n\n\nclass IZODBRoleManager(Interface):\n    \"\"\" Marker interface.\n    \"\"\"\n\n\nmanage_addZODBRoleManagerForm = PageTemplateFile(\n    'www/zrAdd', globals(), __name__='manage_addZODBRoleManagerForm')\n\n\ndef addZODBRoleManager(dispatcher, id, title=None, REQUEST=None):\n    \"\"\" Add a ZODBRoleManager to a Pluggable Auth Service. \"\"\"\n\n    zum = ZODBRoleManager(id, title)\n    dispatcher._setObject(zum.getId(), zum)\n\n    if REQUEST is not None:\n        REQUEST['RESPONSE'].redirect('%s/manage_workspace'\n                                     '?manage_tabs_message='\n                                     'ZODBRoleManager+added.' %\n                                     dispatcher.absolute_url())\n\n\nclass ZODBRoleManager(BasePlugin):\n\n    \"\"\" PAS plugin for managing roles in the ZODB.\n    \"\"\"\n    meta_type = 'ZODB Role Manager'\n    zmi_icon = 'fas fa-user-tag'\n\n    security = ClassSecurityInfo()\n\n    def __init__(self, id, title=None):\n\n        self._id = self.id = id\n        self.title = title\n\n        self._roles = OOBTree()\n        self._principal_roles = OOBTree()\n\n    def manage_afterAdd(self, item, container):\n\n        if item is self:\n            role_holder = aq_parent(aq_inner(container))\n            for role in getattr(role_holder, '__ac_roles__', ()):\n                try:\n                    if role not in ('Anonymous', 'Authenticated'):\n                        self.addRole(role)\n                except KeyError:\n                    pass\n\n        if 'Manager' not in self._roles:\n            self.addRole('Manager')\n\n    #\n    #   IRolesPlugin implementation\n    #\n    @security.private\n    def getRolesForPrincipal(self, principal, request=None):\n        \"\"\" See IRolesPlugin.\n        \"\"\"\n        result = list(self._principal_roles.get(principal.getId(), ()))\n\n        getGroups = getattr(principal, 'getGroups', lambda: ())\n        for group_id in getGroups():\n            result.extend(self._principal_roles.get(group_id, ()))\n\n        return tuple(result)\n\n    #\n    #   IRoleEnumerationPlugin implementation\n    #\n    @security.private\n    def enumerateRoles(self, id=None, exact_match=False, sort_by=None,\n                       max_results=None, **kw):\n        \"\"\" See IRoleEnumerationPlugin.\n        \"\"\"\n        role_info = []\n        role_ids = []\n        plugin_id = self.getId()\n\n        if isinstance(id, str):\n            id = [id]\n\n        if exact_match and (id):\n            role_ids.extend(id)\n\n        if role_ids:\n            role_filter = None\n\n        else:   # Searching\n            role_ids = self.listRoleIds()\n            role_filter = _ZODBRoleFilter(id, **kw)\n\n        for role_id in role_ids:\n\n            if self._roles.get(role_id):\n                e_url = '%s/manage_roles' % self.getId()\n                p_qs = 'role_id=%s' % role_id\n                m_qs = 'role_id=%s&assign=1' % role_id\n\n                info = {}\n                info.update(self._roles[role_id])\n\n                info['pluginid'] = plugin_id\n                info['properties_url'] = '%s?%s' % (e_url, p_qs)\n                info['members_url'] = '%s?%s' % (e_url, m_qs)\n\n                if not role_filter or role_filter(info):\n                    role_info.append(info)\n\n        return tuple(role_info)\n\n    #\n    #   IRoleAssignerPlugin implementation\n    #\n    @security.private\n    def doAssignRoleToPrincipal(self, principal_id, role):\n        return self.assignRoleToPrincipal(role, principal_id)\n\n    @security.private\n    def doRemoveRoleFromPrincipal(self, principal_id, role):\n        return self.removeRoleFromPrincipal(role, principal_id)\n\n    #\n    #   Role management API\n    #\n    @security.protected(ManageUsers)\n    def listRoleIds(self):\n        \"\"\" Return a list of the role IDs managed by this object.\n        \"\"\"\n        return self._roles.keys()\n\n    @security.protected(ManageUsers)\n    def listRoleInfo(self):\n        \"\"\" Return a list of the role mappings.\n        \"\"\"\n        return self._roles.values()\n\n    @security.protected(ManageUsers)\n    def getRoleInfo(self, role_id):\n        \"\"\" Return a role mapping.\n        \"\"\"\n        return self._roles[role_id]\n\n    @security.private\n    def addRole(self, role_id, title='', description=''):\n        \"\"\" Add 'role_id' to the list of roles managed by this object.\n\n        o Raise KeyError on duplicate.\n        \"\"\"\n        if self._roles.get(role_id) is not None:\n            raise KeyError('Duplicate role: %s' % role_id)\n\n        self._roles[role_id] = {'id': role_id, 'title': title,\n                                'description': description}\n\n    @security.private\n    def updateRole(self, role_id, title, description):\n        \"\"\" Update title and description for the role.\n\n        o Raise KeyError if not found.\n        \"\"\"\n        self._roles[role_id].update({'title': title,\n                                     'description': description})\n\n    @security.private\n    def removeRole(self, role_id, REQUEST=None):\n        \"\"\" Remove 'role_id' from the list of roles managed by this object.\n\n        o Raise KeyError if not found.\n\n        Note that if you really want to remove a role you should first\n        remove it from the roles in the root of the site (at the\n        bottom of the Security tab at manage_access).\n        \"\"\"\n        for principal_id in self._principal_roles.keys():\n            self.removeRoleFromPrincipal(role_id, principal_id)\n\n        del self._roles[role_id]\n\n    #\n    #   Role assignment API\n    #\n    @security.protected(ManageUsers)\n    def listAvailablePrincipals(self, role_id, search_id):\n        \"\"\" Return a list of principal IDs to whom a role can be assigned.\n\n        o If supplied, 'search_id' constrains the principal IDs;  if not,\n          return empty list.\n\n        o Omit principals with existing assignments.\n        \"\"\"\n        result = []\n\n        if search_id:  # don't bother searching if no criteria\n\n            parent = aq_parent(self)\n\n            for info in parent.searchPrincipals(max_results=20,\n                                                sort_by='id',\n                                                id=search_id,\n                                                exact_match=False):\n                id = info['id']\n                title = info.get('title', id)\n                if role_id not in self._principal_roles.get(id, ()) and \\\n                        role_id != id:\n                    result.append((id, title))\n\n        return result\n\n    @security.protected(ManageUsers)\n    def listAssignedPrincipals(self, role_id):\n        \"\"\" Return a list of principal IDs to whom a role is assigned.\n        \"\"\"\n        result = []\n\n        for k, v in self._principal_roles.items():\n            if role_id in v:\n                # should be at most one and only one mapping to 'k'\n\n                parent = aq_parent(self)\n                info = parent.searchPrincipals(id=k, exact_match=True)\n\n                if len(info) > 1:\n                    message = ('Multiple groups or users exist with the '\n                               'name \"%s\". Remove one of the duplicate groups '\n                               'or users.' % (k))\n                    LOG.error(message)\n                    raise MultiplePrincipalError(message)\n\n                if len(info) == 0:\n                    title = '<%s: not found>' % k\n                else:\n                    title = info[0].get('title', k)\n                result.append((k, title))\n\n        return result\n\n    @security.private\n    def assignRoleToPrincipal(self, role_id, principal_id):\n        \"\"\" Assign a role to a principal (user or group).\n\n        o Return a boolean indicating whether a new assignment was created.\n\n        o Raise KeyError if 'role_id' is unknown.\n        \"\"\"\n        # raise KeyError if unknown!\n        role_info = self._roles[role_id]  # noqa\n\n        current = self._principal_roles.get(principal_id, ())\n        already = role_id in current\n\n        if not already:\n            new = current + (role_id,)\n            self._principal_roles[principal_id] = new\n            self._invalidatePrincipalCache(principal_id)\n\n        return not already\n\n    @security.private\n    def removeRoleFromPrincipal(self, role_id, principal_id):\n        \"\"\" Remove a role from a principal (user or group).\n\n        o Return a boolean indicating whether the role was already present.\n\n        o Raise KeyError if 'role_id' is unknown.\n\n        o Ignore requests to remove a role not already assigned to the\n          principal.\n        \"\"\"\n        # raise KeyError if unknown!\n        role_info = self._roles[role_id]  # noqa\n\n        current = self._principal_roles.get(principal_id, ())\n        new = tuple([x for x in current if x != role_id])\n        already = current != new\n\n        if already:\n            self._principal_roles[principal_id] = new\n            self._invalidatePrincipalCache(principal_id)\n\n        return already\n\n    #\n    #   ZMI\n    #\n    manage_options = (({'label': 'Roles', 'action': 'manage_roles'},)\n                      + BasePlugin.manage_options)\n\n    security.declareProtected(ManageUsers, 'manage_roles')  # NOQA: D001\n    manage_roles = PageTemplateFile('www/zrRoles', globals(),\n                                    __name__='manage_roles')\n\n    security.declareProtected(ManageUsers, 'manage_twoLists')  # NOQA: D001\n    manage_twoLists = PageTemplateFile('../www/two_lists', globals(),\n                                       __name__='manage_twoLists')\n\n    @security.protected(ManageUsers)\n    @csrf_only\n    @postonly\n    def manage_addRole(self, role_id, title, description, RESPONSE=None,\n                       REQUEST=None):\n        \"\"\" Add a role via the ZMI.\n        \"\"\"\n        if not role_id:\n            message = 'Please+provide+a+Role+ID'\n        else:\n            self.addRole(role_id, title, description)\n            message = 'Role+added'\n\n        if RESPONSE is not None:\n            RESPONSE.redirect('%s/manage_roles?manage_tabs_message=%s' %\n                              (self.absolute_url(), message))\n\n    @security.protected(ManageUsers)\n    @csrf_only\n    @postonly\n    def manage_updateRole(self, role_id, title, description, RESPONSE=None,\n                          REQUEST=None):\n        \"\"\" Update a role via the ZMI.\n        \"\"\"\n        self.updateRole(role_id, title, description)\n\n        message = 'Role+updated'\n\n        if RESPONSE is not None:\n            RESPONSE.redirect('%s/manage_roles?role_id=%s&'\n                              'manage_tabs_message=%s' %\n                              (self.absolute_url(), role_id, message))\n\n    @security.protected(ManageUsers)\n    @csrf_only\n    @postonly\n    def manage_removeRoles(self, role_ids, RESPONSE=None, REQUEST=None):\n        \"\"\" Remove one or more role assignments via the ZMI.\n\n        Note that if you really want to remove a role you should first\n        remove it from the roles in the root of the site (at the\n        bottom of the Security tab at manage_access).\n        \"\"\"\n        role_ids = [_f for _f in role_ids if _f]\n\n        if not role_ids:\n            message = 'no+roles+selected'\n\n        else:\n\n            for role_id in role_ids:\n                self.removeRole(role_id)\n\n            message = 'Role+assignments+removed'\n\n        if RESPONSE is not None:\n            RESPONSE.redirect('%s/manage_roles?manage_tabs_message=%s' %\n                              (self.absolute_url(), message))\n\n    @security.protected(ManageUsers)\n    @csrf_only\n    @postonly\n    def manage_assignRoleToPrincipals(self, role_id, principal_ids,\n                                      RESPONSE, REQUEST=None):\n        \"\"\" Assign a role to one or more principals via the ZMI.\n        \"\"\"\n        assigned = []\n\n        for principal_id in principal_ids:\n            if self.assignRoleToPrincipal(role_id, principal_id):\n                assigned.append(principal_id)\n\n        if not assigned:\n            message = 'Role+%s+already+assigned+to+all+principals' % role_id\n        else:\n            message = 'Role+%s+assigned+to+%s' % (role_id, '+'.join(assigned))\n\n        if RESPONSE is not None:\n            RESPONSE.redirect('%s/manage_roles?role_id=%s&assign=1'\n                              '&manage_tabs_message=%s' %\n                              (self.absolute_url(), role_id, message))\n\n    @security.protected(ManageUsers)\n    @csrf_only\n    @postonly\n    def manage_removeRoleFromPrincipals(self, role_id, principal_ids,\n                                        RESPONSE=None, REQUEST=None):\n        \"\"\" Remove a role from one or more principals via the ZMI.\n        \"\"\"\n        removed = []\n\n        for principal_id in principal_ids:\n            if self.removeRoleFromPrincipal(role_id, principal_id):\n                removed.append(principal_id)\n\n        if not removed:\n            message = 'Role+%s+alread+removed+from+all+principals' % role_id\n        else:\n            message = 'Role+%s+removed+from+%s' % (role_id, '+'.join(removed))\n\n        if RESPONSE is not None:\n            RESPONSE.redirect('%s/manage_roles?role_id=%s&assign=1'\n                              '&manage_tabs_message=%s' %\n                              (self.absolute_url(), role_id, message))\n\n\nclassImplements(ZODBRoleManager, IZODBRoleManager, IRolesPlugin,\n                IRoleEnumerationPlugin, IRoleAssignerPlugin)\n\n\nInitializeClass(ZODBRoleManager)\n\n\nclass _ZODBRoleFilter:\n\n    def __init__(self, id=None, **kw):\n\n        self._filter_ids = id\n\n    def __call__(self, role_info):\n\n        if self._filter_ids:\n\n            key = 'id'\n\n        else:\n            return 1  # ???:  try using 'kw'\n\n        value = role_info.get(key)\n\n        if not value:\n            return False\n\n        for id in self._filter_ids:\n            if value.find(id) >= 0:\n                return 1\n\n        return False\n"], "filenames": ["CHANGES.rst", "src/Products/PluggableAuthService/plugins/ZODBRoleManager.py"], "buggy_code_start_loc": [5, 114], "buggy_code_end_loc": [5, 114], "fixing_code_start_loc": [6, 115], "fixing_code_end_loc": [8, 116], "type": "CWE-200", "message": "Products.PluggableAuthService is a pluggable Zope authentication and authorization framework. In Products.PluggableAuthService before version 2.6.0 there is an information disclosure vulnerability - everyone can list the names of roles defined in the ZODB Role Manager plugin if the site uses this plugin. The problem has been fixed in version 2.6.0. Depending on how you have installed Products.PluggableAuthService, you should change the buildout version pin to 2.6.0 and re-run the buildout, or if you used pip simply do `pip install \"Products.PluggableAuthService>=2.6.0\"`.", "other": {"cve": {"id": "CVE-2021-21336", "sourceIdentifier": "security-advisories@github.com", "published": "2021-03-08T21:15:16.683", "lastModified": "2022-06-03T12:54:08.477", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Products.PluggableAuthService is a pluggable Zope authentication and authorization framework. In Products.PluggableAuthService before version 2.6.0 there is an information disclosure vulnerability - everyone can list the names of roles defined in the ZODB Role Manager plugin if the site uses this plugin. The problem has been fixed in version 2.6.0. Depending on how you have installed Products.PluggableAuthService, you should change the buildout version pin to 2.6.0 and re-run the buildout, or if you used pip simply do `pip install \"Products.PluggableAuthService>=2.6.0\"`."}, {"lang": "es", "value": "Products.PluggableAuthService es un framework de autenticaci\u00f3n y autorizaci\u00f3n de Zope conectable.&#xa0;En Products.PluggableAuthService versiones anteriores a 2.6.0, se presenta una vulnerabilidad de divulgaci\u00f3n de informaci\u00f3n: todos pueden enumerar los nombres de los roles definidos en el plugin ZODB Role Manager si el sitio usa este plugin.&#xa0;El problema ha sido corregido en versi\u00f3n 2.6.0.&#xa0;Dependiendo de c\u00f3mo haya instalado Products.PluggableAuthService, debe cambiar el pin de la versi\u00f3n de compilaci\u00f3n a 2.6.0 y volver a ejecutar la compilaci\u00f3n, o si us\u00f3 pip simplemente haga la instalaci\u00f3n de pip \"Products.PluggableAuthService versiones posteriores o iguales a 2.6.0 \"`"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zope:products.pluggableauthservice:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.6.0", "matchCriteriaId": "9B3C2A43-06D9-4E9B-AE27-04DA56FFF848"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:plone:plone:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.3.0", "versionEndIncluding": "4.3.20", "matchCriteriaId": "821A3793-1D04-4480-823E-6B92391AB000"}, {"vulnerable": true, "criteria": "cpe:2.3:a:plone:plone:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0", "versionEndIncluding": "5.2.4", "matchCriteriaId": "49BC6F68-1C5B-4EE6-AF9C-5C28E86CC669"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2021/05/21/1", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2021/05/22/1", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/zopefoundation/Products.PluggableAuthService/commit/2dad81128250cb2e5d950cddc9d3c0314a80b4bb", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/zopefoundation/Products.PluggableAuthService/security/advisories/GHSA-p75f-g7gx-2r7p", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://pypi.org/project/Products.PluggableAuthService/", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/zopefoundation/Products.PluggableAuthService/commit/2dad81128250cb2e5d950cddc9d3c0314a80b4bb"}}