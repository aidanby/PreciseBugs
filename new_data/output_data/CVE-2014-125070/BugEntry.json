{"buggy_code": ["#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#    under the License.\n\nfrom django.template import defaultfilters as filters\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom horizon import tables\n\nfrom openstack_dashboard import api\nfrom openstack_dashboard.dashboards.admin.aggregates import constants\n\n\nclass DeleteAggregateAction(tables.DeleteAction):\n    data_type_singular = _(\"Host Aggregate\")\n    data_type_plural = _(\"Host Aggregates\")\n\n    def delete(self, request, obj_id):\n        api.nova.aggregate_delete(request, obj_id)\n\n\nclass CreateAggregateAction(tables.LinkAction):\n    name = \"create\"\n    verbose_name = _(\"Create Host Aggregate\")\n    url = constants.AGGREGATES_CREATE_URL\n    classes = (\"ajax-modal\", \"btn-create\")\n\n\nclass ManageHostsAction(tables.LinkAction):\n    name = \"manage\"\n    verbose_name = _(\"Manage Hosts\")\n    url = constants.AGGREGATES_MANAGE_HOSTS_URL\n    classes = (\"ajax-modal\", \"btn-create\")\n\n\nclass UpdateAggregateAction(tables.LinkAction):\n    name = \"update\"\n    verbose_name = _(\"Edit Host Aggregate\")\n    url = constants.AGGREGATES_UPDATE_URL\n    classes = (\"ajax-modal\", \"btn-edit\")\n\n\nclass AggregateFilterAction(tables.FilterAction):\n    def filter(self, table, aggregates, filter_string):\n        q = filter_string.lower()\n\n        def comp(aggregate):\n            return q in aggregate.name.lower()\n\n        return filter(comp, aggregates)\n\n\nclass AvailabilityZoneFilterAction(tables.FilterAction):\n    def filter(self, table, availability_zones, filter_string):\n        q = filter_string.lower()\n\n        def comp(availabilityZone):\n            return q in availabilityZone.name.lower()\n\n        return filter(comp, availability_zones)\n\n\ndef get_aggregate_hosts(aggregate):\n    return [host for host in aggregate.hosts]\n\n\ndef get_metadata(aggregate):\n    return [' = '.join([key, val]) for key, val\n            in aggregate.metadata.iteritems()]\n\n\ndef get_available(zone):\n    return zone.zoneState['available']\n\n\ndef get_zone_hosts(zone):\n    hosts = zone.hosts\n    host_details = []\n    if hosts is None:\n        return []\n    for name, services in hosts.items():\n        up = all(s['active'] and s['available'] for s in services.values())\n        up = _(\"Services Up\") if up else _(\"Services Down\")\n        host_details.append(\"%(host)s (%(up)s)\" % {'host': name, 'up': up})\n    return host_details\n\n\nclass HostAggregatesTable(tables.DataTable):\n    name = tables.Column('name', verbose_name=_('Name'))\n    availability_zone = tables.Column('availability_zone',\n                                      verbose_name=_('Availability Zone'))\n    hosts = tables.Column(get_aggregate_hosts,\n                          verbose_name=_(\"Hosts\"),\n                          wrap_list=True,\n                          filters=(filters.unordered_list,))\n    metadata = tables.Column(get_metadata,\n                             verbose_name=_(\"Metadata\"),\n                             wrap_list=True,\n                             filters=(filters.unordered_list,))\n\n    class Meta:\n        name = \"host_aggregates\"\n        verbose_name = _(\"Host Aggregates\")\n        table_actions = (AggregateFilterAction,\n                         CreateAggregateAction,\n                         DeleteAggregateAction)\n        row_actions = (UpdateAggregateAction,\n                       ManageHostsAction,\n                       DeleteAggregateAction)\n\n\nclass AvailabilityZonesTable(tables.DataTable):\n    name = tables.Column('zoneName',\n                         verbose_name=_('Availability Zone Name'))\n    hosts = tables.Column(get_zone_hosts,\n                          verbose_name=_('Hosts'),\n                          wrap_list=True,\n                          filters=(filters.unordered_list,))\n    available = tables.Column(get_available,\n                              verbose_name=_('Available'),\n                              status=True,\n                              filters=(filters.yesno, filters.capfirst))\n\n    def get_object_id(self, zone):\n        return zone.zoneName\n\n    class Meta:\n        name = \"availability_zones\"\n        verbose_name = _(\"Availability Zones\")\n        table_actions = (AggregateFilterAction,)\n        multi_select = False\n"], "fixing_code": ["#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#    under the License.\n\nfrom django.template import defaultfilters as filters\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom horizon import tables\n\nfrom openstack_dashboard import api\nfrom openstack_dashboard.dashboards.admin.aggregates import constants\n\n\nclass DeleteAggregateAction(tables.DeleteAction):\n    data_type_singular = _(\"Host Aggregate\")\n    data_type_plural = _(\"Host Aggregates\")\n\n    def delete(self, request, obj_id):\n        api.nova.aggregate_delete(request, obj_id)\n\n\nclass CreateAggregateAction(tables.LinkAction):\n    name = \"create\"\n    verbose_name = _(\"Create Host Aggregate\")\n    url = constants.AGGREGATES_CREATE_URL\n    classes = (\"ajax-modal\", \"btn-create\")\n\n\nclass ManageHostsAction(tables.LinkAction):\n    name = \"manage\"\n    verbose_name = _(\"Manage Hosts\")\n    url = constants.AGGREGATES_MANAGE_HOSTS_URL\n    classes = (\"ajax-modal\", \"btn-create\")\n\n\nclass UpdateAggregateAction(tables.LinkAction):\n    name = \"update\"\n    verbose_name = _(\"Edit Host Aggregate\")\n    url = constants.AGGREGATES_UPDATE_URL\n    classes = (\"ajax-modal\", \"btn-edit\")\n\n\nclass AggregateFilterAction(tables.FilterAction):\n    def filter(self, table, aggregates, filter_string):\n        q = filter_string.lower()\n\n        def comp(aggregate):\n            return q in aggregate.name.lower()\n\n        return filter(comp, aggregates)\n\n\nclass AvailabilityZoneFilterAction(tables.FilterAction):\n    def filter(self, table, availability_zones, filter_string):\n        q = filter_string.lower()\n\n        def comp(availabilityZone):\n            return q in availabilityZone.name.lower()\n\n        return filter(comp, availability_zones)\n\n\ndef get_aggregate_hosts(aggregate):\n    return [host for host in aggregate.hosts]\n\n\ndef get_metadata(aggregate):\n    return [' = '.join([key, val]) for key, val\n            in aggregate.metadata.iteritems()]\n\n\ndef get_available(zone):\n    return zone.zoneState['available']\n\n\ndef get_zone_hosts(zone):\n    hosts = zone.hosts\n    host_details = []\n    if hosts is None:\n        return []\n    for name, services in hosts.items():\n        up = all(s['active'] and s['available'] for s in services.values())\n        up = _(\"Services Up\") if up else _(\"Services Down\")\n        host_details.append(\"%(host)s (%(up)s)\" % {'host': name, 'up': up})\n    return host_details\n\n\ndef safe_unordered_list(value):\n    return filters.unordered_list(value, autoescape=True)\n\n\nclass HostAggregatesTable(tables.DataTable):\n    name = tables.Column('name', verbose_name=_('Name'))\n    availability_zone = tables.Column('availability_zone',\n                                      verbose_name=_('Availability Zone'))\n    hosts = tables.Column(get_aggregate_hosts,\n                          verbose_name=_(\"Hosts\"),\n                          wrap_list=True,\n                          filters=(safe_unordered_list,))\n    metadata = tables.Column(get_metadata,\n                             verbose_name=_(\"Metadata\"),\n                             wrap_list=True,\n                             filters=(safe_unordered_list,))\n\n    class Meta:\n        name = \"host_aggregates\"\n        verbose_name = _(\"Host Aggregates\")\n        table_actions = (AggregateFilterAction,\n                         CreateAggregateAction,\n                         DeleteAggregateAction)\n        row_actions = (UpdateAggregateAction,\n                       ManageHostsAction,\n                       DeleteAggregateAction)\n\n\nclass AvailabilityZonesTable(tables.DataTable):\n    name = tables.Column('zoneName',\n                         verbose_name=_('Availability Zone Name'))\n    hosts = tables.Column(get_zone_hosts,\n                          verbose_name=_('Hosts'),\n                          wrap_list=True,\n                          filters=(safe_unordered_list,))\n    available = tables.Column(get_available,\n                              verbose_name=_('Available'),\n                              status=True,\n                              filters=(filters.yesno, filters.capfirst))\n\n    def get_object_id(self, zone):\n        return zone.zoneName\n\n    class Meta:\n        name = \"availability_zones\"\n        verbose_name = _(\"Availability Zones\")\n        table_actions = (AggregateFilterAction,)\n        multi_select = False\n"], "filenames": ["openstack_dashboard/dashboards/admin/aggregates/tables.py"], "buggy_code_start_loc": [95], "buggy_code_end_loc": [127], "fixing_code_start_loc": [96], "fixing_code_end_loc": [131], "type": "CWE-79", "message": "A vulnerability has been found in yanheven console and classified as problematic. Affected by this vulnerability is the function get_zone_hosts/AvailabilityZonesTable of the file openstack_dashboard/dashboards/admin/aggregates/tables.py. The manipulation leads to cross site scripting. The attack can be launched remotely. The name of the patch is ba908ae88d5925f4f6783eb234cc4ea95017472b. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217651.", "other": {"cve": {"id": "CVE-2014-125070", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-08T18:15:09.917", "lastModified": "2023-01-12T22:25:48.720", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in yanheven console and classified as problematic. Affected by this vulnerability is the function get_zone_hosts/AvailabilityZonesTable of the file openstack_dashboard/dashboards/admin/aggregates/tables.py. The manipulation leads to cross site scripting. The attack can be launched remotely. The name of the patch is ba908ae88d5925f4f6783eb234cc4ea95017472b. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217651."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:console_project:console:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-08-19", "matchCriteriaId": "084BF83C-AFC3-4C00-960E-87869FB2382E"}]}]}], "references": [{"url": "https://github.com/yanheven/console/commit/ba908ae88d5925f4f6783eb234cc4ea95017472b", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217651", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217651", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yanheven/console/commit/ba908ae88d5925f4f6783eb234cc4ea95017472b"}}