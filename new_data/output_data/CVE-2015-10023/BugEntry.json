{"buggy_code": ["package main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n\t_ \"github.com/lib/pq\"\n)\n\nvar servport = \":6862\"\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Fatalf(\"[X] %s, %s\", msg, err)\n\t\tpanic(fmt.Sprintf(\"%s, %s\", msg, err))\n\t}\n}\n\nfunc main() {\n\tlog.Println(\"[i] Server started\")\n\n\t// Connect to DB\n\tdb, err := sql.Open(\"postgres\", \"user=appread dbname='quantifiedSelf' sslmode=disable\")\n\tfailOnError(err, \"Error connecting to database\")\n\tdefer db.Close()\n\n\thttp.HandleFunc(\"/data/all/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// TODO: Allow filtering via URL\n\t\t// Get rows from DB\n\t\tvar output string\n\t\terr := db.QueryRow(`SELECT json_agg(r) FROM (SELECT * FROM trello.cards) r;`).Scan(&output)\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error retriving from DB, \", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\tfmt.Fprintln(w, \"Error retriving from DB, \", err)\n\t\t\treturn\n\t\t}\n\n\t\t// Print out returned\n\t\tfmt.Fprint(w, output)\n\t})\n\n\t// Restful handler\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/api\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"dla;jfkdlsajflkdsa;jfk;ldsajfklds;a\")\n\t})\n\n\tr.HandleFunc(\"/api/totals/last/{num}\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Grab vars\n\t\tvars := mux.Vars(r)\n\n\t\tvar output string\n\t\t// This is bad... don't do this.... omg\n\t\tquery := fmt.Sprintf(`SELECT json_agg(r) FROM (select EXTRACT(epoch FROM day) as day, end_of_day_total from trello.dailytallies order by day DESC limit %s) r;`, vars[\"num\"])\n\t\terr := db.QueryRow(query).Scan(&output)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error retriving from DB, \", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\tfmt.Fprintln(w, \"Error retriving from DB, \", err)\n\t\t\treturn\n\t\t}\n\n\t\t// Print out returned\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tfmt.Fprint(w, output)\n\t})\n\n\tr.HandleFunc(\"/api/diffs/last/{num}\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Grab vars\n\t\tvars := mux.Vars(r)\n\n\t\tvar output string\n\t\t// This is bad... don't do this.... omg\n\t\tquery := fmt.Sprintf(`SELECT json_agg(r) FROM (select EXTRACT(epoch FROM day) as day, up_count, down_count, finished_count from trello.dailytallies order by day DESC limit %s) r;`, vars[\"num\"])\n\t\terr := db.QueryRow(query).Scan(&output)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error retriving from DB, \", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\tfmt.Fprintln(w, \"Error retriving from DB, \", err)\n\t\t\treturn\n\t\t}\n\n\t\t// Print out returned\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tfmt.Fprint(w, output)\n\t})\n\tr.PathPrefix(\"/\").Handler(http.FileServer(http.Dir(\"../ui\")))\n\thttp.Handle(\"/\", r)\n\n\t// Die gracefully\n\t// killchan := make(chan os.Signal)\n\t// signal.Notify(killchan, os.Interrupt, os.Kill)\n\n\tlog.Println(\"[i] Serving on \", servport, \"\\n\\tWaiting...\")\n\n\tlog.Fatal(http.ListenAndServe(servport, nil))\n\t// <-killchan\n\n\tlog.Println(\"[i] Shutting down...\")\n}\n"], "fixing_code": ["package main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n\t_ \"github.com/lib/pq\"\n)\n\nvar servport = \":6862\"\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Fatalf(\"[X] %s, %s\", msg, err)\n\t\tpanic(fmt.Sprintf(\"%s, %s\", msg, err))\n\t}\n}\n\nfunc main() {\n\tlog.Println(\"[i] Server started\")\n\n\t// Connect to DB\n\tdb, err := sql.Open(\"postgres\", \"user=appread dbname='quantifiedSelf' sslmode=disable\")\n\tfailOnError(err, \"Error connecting to database\")\n\tdefer db.Close()\n\n\thttp.HandleFunc(\"/data/all/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// TODO: Allow filtering via URL\n\t\t// Get rows from DB\n\t\tvar output string\n\t\terr := db.QueryRow(`SELECT json_agg(r) FROM (SELECT * FROM trello.cards) r;`).Scan(&output)\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error retriving from DB, \", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\tfmt.Fprintln(w, \"Error retriving from DB, \", err)\n\t\t\treturn\n\t\t}\n\n\t\t// Print out returned\n\t\tfmt.Fprint(w, output)\n\t})\n\n\t// Restful handler\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/api\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"dla;jfkdlsajflkdsa;jfk;ldsajfklds;a\")\n\t})\n\n\tr.HandleFunc(\"/api/totals/last/{num}\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Grab vars\n\t\tvars := mux.Vars(r)\n\n\t\tvar output string\n\t\t// This is bad... don't do this.... omg\n\t\tquery := `SELECT json_agg(r) FROM (select EXTRACT(epoch FROM day) as day, end_of_day_total from trello.dailytallies order by day DESC limit $1) r;`\n\t\terr := db.QueryRow(query, vars[\"num\"]).Scan(&output)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error retriving from DB, \", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\tfmt.Fprintln(w, \"Error retriving from DB, \", err)\n\t\t\treturn\n\t\t}\n\n\t\t// Print out returned\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tfmt.Fprint(w, output)\n\t})\n\n\tr.HandleFunc(\"/api/diffs/last/{num}\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Grab vars\n\t\tvars := mux.Vars(r)\n\n\t\tvar output string\n\t\t// This is bad... don't do this.... omg\n\t\tquery := `SELECT json_agg(r) FROM (select EXTRACT(epoch FROM day) as day, up_count, down_count, finished_count from trello.dailytallies order by day DESC limit $1) r;`\n\t\terr := db.QueryRow(query, vars[\"num\"]).Scan(&output)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error retriving from DB, \", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\tfmt.Fprintln(w, \"Error retriving from DB, \", err)\n\t\t\treturn\n\t\t}\n\n\t\t// Print out returned\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tfmt.Fprint(w, output)\n\t})\n\tr.PathPrefix(\"/\").Handler(http.FileServer(http.Dir(\"../ui\")))\n\thttp.Handle(\"/\", r)\n\n\t// Die gracefully\n\t// killchan := make(chan os.Signal)\n\t// signal.Notify(killchan, os.Interrupt, os.Kill)\n\n\tlog.Println(\"[i] Serving on \", servport, \"\\n\\tWaiting...\")\n\n\tlog.Fatal(http.ListenAndServe(servport, nil))\n\t// <-killchan\n\n\tlog.Println(\"[i] Shutting down...\")\n}\n"], "filenames": ["metrics-ui/server/srv.go"], "buggy_code_start_loc": [58], "buggy_code_end_loc": [81], "fixing_code_start_loc": [58], "fixing_code_end_loc": [81], "type": "CWE-89", "message": "A vulnerability classified as critical has been found in Fumon trello-octometric. This affects the function main of the file metrics-ui/server/srv.go. The manipulation of the argument num leads to sql injection. The name of the patch is a1f1754933fbf21e2221fbc671c81a47de6a04ef. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217611.", "other": {"cve": {"id": "CVE-2015-10023", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T12:15:08.803", "lastModified": "2023-01-12T17:52:20.633", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as critical has been found in Fumon trello-octometric. This affects the function main of the file metrics-ui/server/srv.go. The manipulation of the argument num leads to sql injection. The name of the patch is a1f1754933fbf21e2221fbc671c81a47de6a04ef. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217611."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:trello-octometric_project:trello-octometric:*:*:*:*:*:*:*:*", "versionEndExcluding": "25-01-2015", "matchCriteriaId": "7BB3AF95-0978-4798-A335-ACDB51084718"}]}]}], "references": [{"url": "https://github.com/Fumon/trello-octometric/commit/a1f1754933fbf21e2221fbc671c81a47de6a04ef", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217611", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217611", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Fumon/trello-octometric/commit/a1f1754933fbf21e2221fbc671c81a47de6a04ef"}}