{"buggy_code": ["<?php\n/**\n * General template tags that can go anywhere in a template.\n *\n * @package WordPress\n * @subpackage Template\n */\n\n/**\n * Load header template.\n *\n * Includes the header template for a theme or if a name is specified then a\n * specialised header will be included.\n *\n * For the parameter, if the file is called \"header-special.php\" then specify\n * \"special\".\n *\n * @since 1.5.0\n *\n * @param string $name The name of the specialised header.\n */\nfunction get_header( $name = null ) {\n\t/**\n\t * Fires before the header template file is loaded.\n\t *\n\t * @since 2.1.0\n\t * @since 2.8.0 $name parameter added.\n\t *\n\t * @param string|null $name Name of the specific header file to use. null for the default header.\n\t */\n\tdo_action( 'get_header', $name );\n\n\t$templates = array();\n\t$name      = (string) $name;\n\tif ( '' !== $name ) {\n\t\t$templates[] = \"header-{$name}.php\";\n\t}\n\n\t$templates[] = 'header.php';\n\n\tlocate_template( $templates, true );\n}\n\n/**\n * Load footer template.\n *\n * Includes the footer template for a theme or if a name is specified then a\n * specialised footer will be included.\n *\n * For the parameter, if the file is called \"footer-special.php\" then specify\n * \"special\".\n *\n * @since 1.5.0\n *\n * @param string $name The name of the specialised footer.\n */\nfunction get_footer( $name = null ) {\n\t/**\n\t * Fires before the footer template file is loaded.\n\t *\n\t * @since 2.1.0\n\t * @since 2.8.0 $name parameter added.\n\t *\n\t * @param string|null $name Name of the specific footer file to use. null for the default footer.\n\t */\n\tdo_action( 'get_footer', $name );\n\n\t$templates = array();\n\t$name      = (string) $name;\n\tif ( '' !== $name ) {\n\t\t$templates[] = \"footer-{$name}.php\";\n\t}\n\n\t$templates[] = 'footer.php';\n\n\tlocate_template( $templates, true );\n}\n\n/**\n * Load sidebar template.\n *\n * Includes the sidebar template for a theme or if a name is specified then a\n * specialised sidebar will be included.\n *\n * For the parameter, if the file is called \"sidebar-special.php\" then specify\n * \"special\".\n *\n * @since 1.5.0\n *\n * @param string $name The name of the specialised sidebar.\n */\nfunction get_sidebar( $name = null ) {\n\t/**\n\t * Fires before the sidebar template file is loaded.\n\t *\n\t * @since 2.2.0\n\t * @since 2.8.0 $name parameter added.\n\t *\n\t * @param string|null $name Name of the specific sidebar file to use. null for the default sidebar.\n\t */\n\tdo_action( 'get_sidebar', $name );\n\n\t$templates = array();\n\t$name      = (string) $name;\n\tif ( '' !== $name ) {\n\t\t$templates[] = \"sidebar-{$name}.php\";\n\t}\n\n\t$templates[] = 'sidebar.php';\n\n\tlocate_template( $templates, true );\n}\n\n/**\n * Loads a template part into a template.\n *\n * Provides a simple mechanism for child themes to overload reusable sections of code\n * in the theme.\n *\n * Includes the named template part for a theme or if a name is specified then a\n * specialised part will be included. If the theme contains no {slug}.php file\n * then no template will be included.\n *\n * The template is included using require, not require_once, so you may include the\n * same template part multiple times.\n *\n * For the $name parameter, if the file is called \"{slug}-special.php\" then specify\n * \"special\".\n *\n * @since 3.0.0\n *\n * @param string $slug The slug name for the generic template.\n * @param string $name The name of the specialised template.\n */\nfunction get_template_part( $slug, $name = null ) {\n\t/**\n\t * Fires before the specified template part file is loaded.\n\t *\n\t * The dynamic portion of the hook name, `$slug`, refers to the slug name\n\t * for the generic template part.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string      $slug The slug name for the generic template.\n\t * @param string|null $name The name of the specialized template.\n\t */\n\tdo_action( \"get_template_part_{$slug}\", $slug, $name );\n\n\t$templates = array();\n\t$name      = (string) $name;\n\tif ( '' !== $name ) {\n\t\t$templates[] = \"{$slug}-{$name}.php\";\n\t}\n\n\t$templates[] = \"{$slug}.php\";\n\n\tlocate_template( $templates, true, false );\n}\n\n/**\n * Display search form.\n *\n * Will first attempt to locate the searchform.php file in either the child or\n * the parent, then load it. If it doesn't exist, then the default search form\n * will be displayed. The default search form is HTML, which will be displayed.\n * There is a filter applied to the search form HTML in order to edit or replace\n * it. The filter is {@see 'get_search_form'}.\n *\n * This function is primarily used by themes which want to hardcode the search\n * form into the sidebar and also by the search widget in WordPress.\n *\n * There is also an action that is called whenever the function is run called,\n * {@see 'pre_get_search_form'}. This can be useful for outputting JavaScript that the\n * search relies on or various formatting that applies to the beginning of the\n * search. To give a few examples of what it can be used for.\n *\n * @since 2.7.0\n *\n * @param bool $echo Default to echo and not return the form.\n * @return string|void String when $echo is false.\n */\nfunction get_search_form( $echo = true ) {\n\t/**\n\t * Fires before the search form is retrieved, at the start of get_search_form().\n\t *\n\t * @since 2.7.0 as 'get_search_form' action.\n\t * @since 3.6.0\n\t *\n\t * @link https://core.trac.wordpress.org/ticket/19321\n\t */\n\tdo_action( 'pre_get_search_form' );\n\n\t$format = current_theme_supports( 'html5', 'search-form' ) ? 'html5' : 'xhtml';\n\n\t/**\n\t * Filters the HTML format of the search form.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $format The type of markup to use in the search form.\n\t *                       Accepts 'html5', 'xhtml'.\n\t */\n\t$format = apply_filters( 'search_form_format', $format );\n\n\t$search_form_template = locate_template( 'searchform.php' );\n\tif ( '' != $search_form_template ) {\n\t\tob_start();\n\t\trequire( $search_form_template );\n\t\t$form = ob_get_clean();\n\t} else {\n\t\tif ( 'html5' == $format ) {\n\t\t\t$form = '<form role=\"search\" method=\"get\" class=\"search-form\" action=\"' . esc_url( home_url( '/' ) ) . '\">\n\t\t\t\t<label>\n\t\t\t\t\t<span class=\"screen-reader-text\">' . _x( 'Search for:', 'label' ) . '</span>\n\t\t\t\t\t<input type=\"search\" class=\"search-field\" placeholder=\"' . esc_attr_x( 'Search &hellip;', 'placeholder' ) . '\" value=\"' . get_search_query() . '\" name=\"s\" />\n\t\t\t\t</label>\n\t\t\t\t<input type=\"submit\" class=\"search-submit\" value=\"' . esc_attr_x( 'Search', 'submit button' ) . '\" />\n\t\t\t</form>';\n\t\t} else {\n\t\t\t$form = '<form role=\"search\" method=\"get\" id=\"searchform\" class=\"searchform\" action=\"' . esc_url( home_url( '/' ) ) . '\">\n\t\t\t\t<div>\n\t\t\t\t\t<label class=\"screen-reader-text\" for=\"s\">' . _x( 'Search for:', 'label' ) . '</label>\n\t\t\t\t\t<input type=\"text\" value=\"' . get_search_query() . '\" name=\"s\" id=\"s\" />\n\t\t\t\t\t<input type=\"submit\" id=\"searchsubmit\" value=\"' . esc_attr_x( 'Search', 'submit button' ) . '\" />\n\t\t\t\t</div>\n\t\t\t</form>';\n\t\t}\n\t}\n\n\t/**\n\t * Filters the HTML output of the search form.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param string $form The search form HTML output.\n\t */\n\t$result = apply_filters( 'get_search_form', $form );\n\n\tif ( null === $result ) {\n\t\t$result = $form;\n\t}\n\n\tif ( $echo ) {\n\t\techo $result;\n\t} else {\n\t\treturn $result;\n\t}\n}\n\n/**\n * Display the Log In/Out link.\n *\n * Displays a link, which allows users to navigate to the Log In page to log in\n * or log out depending on whether they are currently logged in.\n *\n * @since 1.5.0\n *\n * @param string $redirect Optional path to redirect to on login/logout.\n * @param bool   $echo     Default to echo and not return the link.\n * @return string|void String when retrieving.\n */\nfunction wp_loginout( $redirect = '', $echo = true ) {\n\tif ( ! is_user_logged_in() ) {\n\t\t$link = '<a href=\"' . esc_url( wp_login_url( $redirect ) ) . '\">' . __( 'Log in' ) . '</a>';\n\t} else {\n\t\t$link = '<a href=\"' . esc_url( wp_logout_url( $redirect ) ) . '\">' . __( 'Log out' ) . '</a>';\n\t}\n\n\tif ( $echo ) {\n\t\t/**\n\t\t * Filters the HTML output for the Log In/Log Out link.\n\t\t *\n\t\t * @since 1.5.0\n\t\t *\n\t\t * @param string $link The HTML link content.\n\t\t */\n\t\techo apply_filters( 'loginout', $link );\n\t} else {\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\treturn apply_filters( 'loginout', $link );\n\t}\n}\n\n/**\n * Retrieves the logout URL.\n *\n * Returns the URL that allows the user to log out of the site.\n *\n * @since 2.7.0\n *\n * @param string $redirect Path to redirect to on logout.\n * @return string The logout URL. Note: HTML-encoded via esc_html() in wp_nonce_url().\n */\nfunction wp_logout_url( $redirect = '' ) {\n\t$args = array( 'action' => 'logout' );\n\tif ( ! empty( $redirect ) ) {\n\t\t$args['redirect_to'] = urlencode( $redirect );\n\t}\n\n\t$logout_url = add_query_arg( $args, site_url( 'wp-login.php', 'login' ) );\n\t$logout_url = wp_nonce_url( $logout_url, 'log-out' );\n\n\t/**\n\t * Filters the logout URL.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $logout_url The HTML-encoded logout URL.\n\t * @param string $redirect   Path to redirect to on logout.\n\t */\n\treturn apply_filters( 'logout_url', $logout_url, $redirect );\n}\n\n/**\n * Retrieves the login URL.\n *\n * @since 2.7.0\n *\n * @param string $redirect     Path to redirect to on log in.\n * @param bool   $force_reauth Whether to force reauthorization, even if a cookie is present.\n *                             Default false.\n * @return string The login URL. Not HTML-encoded.\n */\nfunction wp_login_url( $redirect = '', $force_reauth = false ) {\n\t$login_url = site_url( 'wp-login.php', 'login' );\n\n\tif ( ! empty( $redirect ) ) {\n\t\t$login_url = add_query_arg( 'redirect_to', urlencode( $redirect ), $login_url );\n\t}\n\n\tif ( $force_reauth ) {\n\t\t$login_url = add_query_arg( 'reauth', '1', $login_url );\n\t}\n\n\t/**\n\t * Filters the login URL.\n\t *\n\t * @since 2.8.0\n\t * @since 4.2.0 The `$force_reauth` parameter was added.\n\t *\n\t * @param string $login_url    The login URL. Not HTML-encoded.\n\t * @param string $redirect     The path to redirect to on login, if supplied.\n\t * @param bool   $force_reauth Whether to force reauthorization, even if a cookie is present.\n\t */\n\treturn apply_filters( 'login_url', $login_url, $redirect, $force_reauth );\n}\n\n/**\n * Returns the URL that allows the user to register on the site.\n *\n * @since 3.6.0\n *\n * @return string User registration URL.\n */\nfunction wp_registration_url() {\n\t/**\n\t * Filters the user registration URL.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $register The user registration URL.\n\t */\n\treturn apply_filters( 'register_url', site_url( 'wp-login.php?action=register', 'login' ) );\n}\n\n/**\n * Provides a simple login form for use anywhere within WordPress.\n *\n * The login format HTML is echoed by default. Pass a false value for `$echo` to return it instead.\n *\n * @since 3.0.0\n *\n * @param array $args {\n *     Optional. Array of options to control the form output. Default empty array.\n *\n *     @type bool   $echo           Whether to display the login form or return the form HTML code.\n *                                  Default true (echo).\n *     @type string $redirect       URL to redirect to. Must be absolute, as in \"https://example.com/mypage/\".\n *                                  Default is to redirect back to the request URI.\n *     @type string $form_id        ID attribute value for the form. Default 'loginform'.\n *     @type string $label_username Label for the username or email address field. Default 'Username or Email Address'.\n *     @type string $label_password Label for the password field. Default 'Password'.\n *     @type string $label_remember Label for the remember field. Default 'Remember Me'.\n *     @type string $label_log_in   Label for the submit button. Default 'Log In'.\n *     @type string $id_username    ID attribute value for the username field. Default 'user_login'.\n *     @type string $id_password    ID attribute value for the password field. Default 'user_pass'.\n *     @type string $id_remember    ID attribute value for the remember field. Default 'rememberme'.\n *     @type string $id_submit      ID attribute value for the submit button. Default 'wp-submit'.\n *     @type bool   $remember       Whether to display the \"rememberme\" checkbox in the form.\n *     @type string $value_username Default value for the username field. Default empty.\n *     @type bool   $value_remember Whether the \"Remember Me\" checkbox should be checked by default.\n *                                  Default false (unchecked).\n *\n * }\n * @return string|void String when retrieving.\n */\nfunction wp_login_form( $args = array() ) {\n\t$defaults = array(\n\t\t'echo'           => true,\n\t\t// Default 'redirect' value takes the user back to the request URI.\n\t\t'redirect'       => ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'],\n\t\t'form_id'        => 'loginform',\n\t\t'label_username' => __( 'Username or Email Address' ),\n\t\t'label_password' => __( 'Password' ),\n\t\t'label_remember' => __( 'Remember Me' ),\n\t\t'label_log_in'   => __( 'Log In' ),\n\t\t'id_username'    => 'user_login',\n\t\t'id_password'    => 'user_pass',\n\t\t'id_remember'    => 'rememberme',\n\t\t'id_submit'      => 'wp-submit',\n\t\t'remember'       => true,\n\t\t'value_username' => '',\n\t\t// Set 'value_remember' to true to default the \"Remember me\" checkbox to checked.\n\t\t'value_remember' => false,\n\t);\n\n\t/**\n\t * Filters the default login form output arguments.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @see wp_login_form()\n\t *\n\t * @param array $defaults An array of default login form arguments.\n\t */\n\t$args = wp_parse_args( $args, apply_filters( 'login_form_defaults', $defaults ) );\n\n\t/**\n\t * Filters content to display at the top of the login form.\n\t *\n\t * The filter evaluates just following the opening form tag element.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $content Content to display. Default empty.\n\t * @param array  $args    Array of login form arguments.\n\t */\n\t$login_form_top = apply_filters( 'login_form_top', '', $args );\n\n\t/**\n\t * Filters content to display in the middle of the login form.\n\t *\n\t * The filter evaluates just following the location where the 'login-password'\n\t * field is displayed.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $content Content to display. Default empty.\n\t * @param array  $args    Array of login form arguments.\n\t */\n\t$login_form_middle = apply_filters( 'login_form_middle', '', $args );\n\n\t/**\n\t * Filters content to display at the bottom of the login form.\n\t *\n\t * The filter evaluates just preceding the closing form tag element.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $content Content to display. Default empty.\n\t * @param array  $args    Array of login form arguments.\n\t */\n\t$login_form_bottom = apply_filters( 'login_form_bottom', '', $args );\n\n\t$form = '\n\t\t<form name=\"' . $args['form_id'] . '\" id=\"' . $args['form_id'] . '\" action=\"' . esc_url( site_url( 'wp-login.php', 'login_post' ) ) . '\" method=\"post\">\n\t\t\t' . $login_form_top . '\n\t\t\t<p class=\"login-username\">\n\t\t\t\t<label for=\"' . esc_attr( $args['id_username'] ) . '\">' . esc_html( $args['label_username'] ) . '</label>\n\t\t\t\t<input type=\"text\" name=\"log\" id=\"' . esc_attr( $args['id_username'] ) . '\" class=\"input\" value=\"' . esc_attr( $args['value_username'] ) . '\" size=\"20\" />\n\t\t\t</p>\n\t\t\t<p class=\"login-password\">\n\t\t\t\t<label for=\"' . esc_attr( $args['id_password'] ) . '\">' . esc_html( $args['label_password'] ) . '</label>\n\t\t\t\t<input type=\"password\" name=\"pwd\" id=\"' . esc_attr( $args['id_password'] ) . '\" class=\"input\" value=\"\" size=\"20\" />\n\t\t\t</p>\n\t\t\t' . $login_form_middle . '\n\t\t\t' . ( $args['remember'] ? '<p class=\"login-remember\"><label><input name=\"rememberme\" type=\"checkbox\" id=\"' . esc_attr( $args['id_remember'] ) . '\" value=\"forever\"' . ( $args['value_remember'] ? ' checked=\"checked\"' : '' ) . ' /> ' . esc_html( $args['label_remember'] ) . '</label></p>' : '' ) . '\n\t\t\t<p class=\"login-submit\">\n\t\t\t\t<input type=\"submit\" name=\"wp-submit\" id=\"' . esc_attr( $args['id_submit'] ) . '\" class=\"button button-primary\" value=\"' . esc_attr( $args['label_log_in'] ) . '\" />\n\t\t\t\t<input type=\"hidden\" name=\"redirect_to\" value=\"' . esc_url( $args['redirect'] ) . '\" />\n\t\t\t</p>\n\t\t\t' . $login_form_bottom . '\n\t\t</form>';\n\n\tif ( $args['echo'] ) {\n\t\techo $form;\n\t} else {\n\t\treturn $form;\n\t}\n}\n\n/**\n * Returns the URL that allows the user to retrieve the lost password\n *\n * @since 2.8.0\n *\n * @param string $redirect Path to redirect to on login.\n * @return string Lost password URL.\n */\nfunction wp_lostpassword_url( $redirect = '' ) {\n\t$args = array( 'action' => 'lostpassword' );\n\tif ( ! empty( $redirect ) ) {\n\t\t$args['redirect_to'] = urlencode( $redirect );\n\t}\n\n\t$lostpassword_url = add_query_arg( $args, network_site_url( 'wp-login.php', 'login' ) );\n\n\t/**\n\t * Filters the Lost Password URL.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $lostpassword_url The lost password page URL.\n\t * @param string $redirect         The path to redirect to on login.\n\t */\n\treturn apply_filters( 'lostpassword_url', $lostpassword_url, $redirect );\n}\n\n/**\n * Display the Registration or Admin link.\n *\n * Display a link which allows the user to navigate to the registration page if\n * not logged in and registration is enabled or to the dashboard if logged in.\n *\n * @since 1.5.0\n *\n * @param string $before Text to output before the link. Default `<li>`.\n * @param string $after  Text to output after the link. Default `</li>`.\n * @param bool   $echo   Default to echo and not return the link.\n * @return string|void String when retrieving.\n */\nfunction wp_register( $before = '<li>', $after = '</li>', $echo = true ) {\n\tif ( ! is_user_logged_in() ) {\n\t\tif ( get_option( 'users_can_register' ) ) {\n\t\t\t$link = $before . '<a href=\"' . esc_url( wp_registration_url() ) . '\">' . __( 'Register' ) . '</a>' . $after;\n\t\t} else {\n\t\t\t$link = '';\n\t\t}\n\t} elseif ( current_user_can( 'read' ) ) {\n\t\t$link = $before . '<a href=\"' . admin_url() . '\">' . __( 'Site Admin' ) . '</a>' . $after;\n\t} else {\n\t\t$link = '';\n\t}\n\n\t/**\n\t * Filters the HTML link to the Registration or Admin page.\n\t *\n\t * Users are sent to the admin page if logged-in, or the registration page\n\t * if enabled and logged-out.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param string $link The HTML code for the link to the Registration or Admin page.\n\t */\n\t$link = apply_filters( 'register', $link );\n\n\tif ( $echo ) {\n\t\techo $link;\n\t} else {\n\t\treturn $link;\n\t}\n}\n\n/**\n * Theme container function for the 'wp_meta' action.\n *\n * The {@see 'wp_meta'} action can have several purposes, depending on how you use it,\n * but one purpose might have been to allow for theme switching.\n *\n * @since 1.5.0\n *\n * @link https://core.trac.wordpress.org/ticket/1458 Explanation of 'wp_meta' action.\n */\nfunction wp_meta() {\n\t/**\n\t * Fires before displaying echoed content in the sidebar.\n\t *\n\t * @since 1.5.0\n\t */\n\tdo_action( 'wp_meta' );\n}\n\n/**\n * Displays information about the current site.\n *\n * @since 0.71\n *\n * @see get_bloginfo() For possible `$show` values\n *\n * @param string $show Optional. Site information to display. Default empty.\n */\nfunction bloginfo( $show = '' ) {\n\techo get_bloginfo( $show, 'display' );\n}\n\n/**\n * Retrieves information about the current site.\n *\n * Possible values for `$show` include:\n *\n * - 'name' - Site title (set in Settings > General)\n * - 'description' - Site tagline (set in Settings > General)\n * - 'wpurl' - The WordPress address (URL) (set in Settings > General)\n * - 'url' - The Site address (URL) (set in Settings > General)\n * - 'admin_email' - Admin email (set in Settings > General)\n * - 'charset' - The \"Encoding for pages and feeds\"  (set in Settings > Reading)\n * - 'version' - The current WordPress version\n * - 'html_type' - The content-type (default: \"text/html\"). Themes and plugins\n *   can override the default value using the {@see 'pre_option_html_type'} filter\n * - 'text_direction' - The text direction determined by the site's language. is_rtl()\n *   should be used instead\n * - 'language' - Language code for the current site\n * - 'stylesheet_url' - URL to the stylesheet for the active theme. An active child theme\n *   will take precedence over this value\n * - 'stylesheet_directory' - Directory path for the active theme.  An active child theme\n *   will take precedence over this value\n * - 'template_url' / 'template_directory' - URL of the active theme's directory. An active\n *   child theme will NOT take precedence over this value\n * - 'pingback_url' - The pingback XML-RPC file URL (xmlrpc.php)\n * - 'atom_url' - The Atom feed URL (/feed/atom)\n * - 'rdf_url' - The RDF/RSS 1.0 feed URL (/feed/rdf)\n * - 'rss_url' - The RSS 0.92 feed URL (/feed/rss)\n * - 'rss2_url' - The RSS 2.0 feed URL (/feed)\n * - 'comments_atom_url' - The comments Atom feed URL (/comments/feed)\n * - 'comments_rss2_url' - The comments RSS 2.0 feed URL (/comments/feed)\n *\n * Some `$show` values are deprecated and will be removed in future versions.\n * These options will trigger the _deprecated_argument() function.\n *\n * Deprecated arguments include:\n *\n * - 'siteurl' - Use 'url' instead\n * - 'home' - Use 'url' instead\n *\n * @since 0.71\n *\n * @global string $wp_version\n *\n * @param string $show   Optional. Site info to retrieve. Default empty (site name).\n * @param string $filter Optional. How to filter what is retrieved. Default 'raw'.\n * @return string Mostly string values, might be empty.\n */\nfunction get_bloginfo( $show = '', $filter = 'raw' ) {\n\tswitch ( $show ) {\n\t\tcase 'home': // DEPRECATED\n\t\tcase 'siteurl': // DEPRECATED\n\t\t\t_deprecated_argument(\n\t\t\t\t__FUNCTION__, '2.2.0', sprintf(\n\t\t\t\t\t/* translators: 1: 'siteurl'/'home' argument, 2: bloginfo() function name, 3: 'url' argument */\n\t\t\t\t\t__( 'The %1$s option is deprecated for the family of %2$s functions. Use the %3$s option instead.' ),\n\t\t\t\t\t'<code>' . $show . '</code>',\n\t\t\t\t\t'<code>bloginfo()</code>',\n\t\t\t\t\t'<code>url</code>'\n\t\t\t\t)\n\t\t\t);\n\t\tcase 'url':\n\t\t\t$output = home_url();\n\t\t\tbreak;\n\t\tcase 'wpurl':\n\t\t\t$output = site_url();\n\t\t\tbreak;\n\t\tcase 'description':\n\t\t\t$output = get_option( 'blogdescription' );\n\t\t\tbreak;\n\t\tcase 'rdf_url':\n\t\t\t$output = get_feed_link( 'rdf' );\n\t\t\tbreak;\n\t\tcase 'rss_url':\n\t\t\t$output = get_feed_link( 'rss' );\n\t\t\tbreak;\n\t\tcase 'rss2_url':\n\t\t\t$output = get_feed_link( 'rss2' );\n\t\t\tbreak;\n\t\tcase 'atom_url':\n\t\t\t$output = get_feed_link( 'atom' );\n\t\t\tbreak;\n\t\tcase 'comments_atom_url':\n\t\t\t$output = get_feed_link( 'comments_atom' );\n\t\t\tbreak;\n\t\tcase 'comments_rss2_url':\n\t\t\t$output = get_feed_link( 'comments_rss2' );\n\t\t\tbreak;\n\t\tcase 'pingback_url':\n\t\t\t$output = site_url( 'xmlrpc.php' );\n\t\t\tbreak;\n\t\tcase 'stylesheet_url':\n\t\t\t$output = get_stylesheet_uri();\n\t\t\tbreak;\n\t\tcase 'stylesheet_directory':\n\t\t\t$output = get_stylesheet_directory_uri();\n\t\t\tbreak;\n\t\tcase 'template_directory':\n\t\tcase 'template_url':\n\t\t\t$output = get_template_directory_uri();\n\t\t\tbreak;\n\t\tcase 'admin_email':\n\t\t\t$output = get_option( 'admin_email' );\n\t\t\tbreak;\n\t\tcase 'charset':\n\t\t\t$output = get_option( 'blog_charset' );\n\t\t\tif ( '' == $output ) {\n\t\t\t\t$output = 'UTF-8';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'html_type':\n\t\t\t$output = get_option( 'html_type' );\n\t\t\tbreak;\n\t\tcase 'version':\n\t\t\tglobal $wp_version;\n\t\t\t$output = $wp_version;\n\t\t\tbreak;\n\t\tcase 'language':\n\t\t\t/* translators: Translate this to the correct language tag for your locale,\n\t\t\t * see https://www.w3.org/International/articles/language-tags/ for reference.\n\t\t\t * Do not translate into your own language.\n\t\t\t */\n\t\t\t$output = __( 'html_lang_attribute' );\n\t\t\tif ( 'html_lang_attribute' === $output || preg_match( '/[^a-zA-Z0-9-]/', $output ) ) {\n\t\t\t\t$output = is_admin() ? get_user_locale() : get_locale();\n\t\t\t\t$output = str_replace( '_', '-', $output );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'text_direction':\n\t\t\t_deprecated_argument(\n\t\t\t\t__FUNCTION__, '2.2.0', sprintf(\n\t\t\t\t\t/* translators: 1: 'text_direction' argument, 2: bloginfo() function name, 3: is_rtl() function name */\n\t\t\t\t\t__( 'The %1$s option is deprecated for the family of %2$s functions. Use the %3$s function instead.' ),\n\t\t\t\t\t'<code>' . $show . '</code>',\n\t\t\t\t\t'<code>bloginfo()</code>',\n\t\t\t\t\t'<code>is_rtl()</code>'\n\t\t\t\t)\n\t\t\t);\n\t\t\tif ( function_exists( 'is_rtl' ) ) {\n\t\t\t\t$output = is_rtl() ? 'rtl' : 'ltr';\n\t\t\t} else {\n\t\t\t\t$output = 'ltr';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'name':\n\t\tdefault:\n\t\t\t$output = get_option( 'blogname' );\n\t\t\tbreak;\n\t}\n\n\t$url = true;\n\tif ( strpos( $show, 'url' ) === false &&\n\t\tstrpos( $show, 'directory' ) === false &&\n\t\tstrpos( $show, 'home' ) === false ) {\n\t\t$url = false;\n\t}\n\n\tif ( 'display' == $filter ) {\n\t\tif ( $url ) {\n\t\t\t/**\n\t\t\t * Filters the URL returned by get_bloginfo().\n\t\t\t *\n\t\t\t * @since 2.0.5\n\t\t\t *\n\t\t\t * @param mixed $output The URL returned by bloginfo().\n\t\t\t * @param mixed $show   Type of information requested.\n\t\t\t */\n\t\t\t$output = apply_filters( 'bloginfo_url', $output, $show );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Filters the site information returned by get_bloginfo().\n\t\t\t *\n\t\t\t * @since 0.71\n\t\t\t *\n\t\t\t * @param mixed $output The requested non-URL site information.\n\t\t\t * @param mixed $show   Type of information requested.\n\t\t\t */\n\t\t\t$output = apply_filters( 'bloginfo', $output, $show );\n\t\t}\n\t}\n\n\treturn $output;\n}\n\n/**\n * Returns the Site Icon URL.\n *\n * @since 4.3.0\n *\n * @param int    $size    Optional. Size of the site icon. Default 512 (pixels).\n * @param string $url     Optional. Fallback url if no site icon is found. Default empty.\n * @param int    $blog_id Optional. ID of the blog to get the site icon for. Default current blog.\n * @return string Site Icon URL.\n */\nfunction get_site_icon_url( $size = 512, $url = '', $blog_id = 0 ) {\n\t$switched_blog = false;\n\n\tif ( is_multisite() && ! empty( $blog_id ) && (int) $blog_id !== get_current_blog_id() ) {\n\t\tswitch_to_blog( $blog_id );\n\t\t$switched_blog = true;\n\t}\n\n\t$site_icon_id = get_option( 'site_icon' );\n\n\tif ( $site_icon_id ) {\n\t\tif ( $size >= 512 ) {\n\t\t\t$size_data = 'full';\n\t\t} else {\n\t\t\t$size_data = array( $size, $size );\n\t\t}\n\t\t$url = wp_get_attachment_image_url( $site_icon_id, $size_data );\n\t}\n\n\tif ( $switched_blog ) {\n\t\trestore_current_blog();\n\t}\n\n\t/**\n\t * Filters the site icon URL.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $url     Site icon URL.\n\t * @param int    $size    Size of the site icon.\n\t * @param int    $blog_id ID of the blog to get the site icon for.\n\t */\n\treturn apply_filters( 'get_site_icon_url', $url, $size, $blog_id );\n}\n\n/**\n * Displays the Site Icon URL.\n *\n * @since 4.3.0\n *\n * @param int    $size    Optional. Size of the site icon. Default 512 (pixels).\n * @param string $url     Optional. Fallback url if no site icon is found. Default empty.\n * @param int    $blog_id Optional. ID of the blog to get the site icon for. Default current blog.\n */\nfunction site_icon_url( $size = 512, $url = '', $blog_id = 0 ) {\n\techo esc_url( get_site_icon_url( $size, $url, $blog_id ) );\n}\n\n/**\n * Whether the site has a Site Icon.\n *\n * @since 4.3.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default current blog.\n * @return bool Whether the site has a site icon or not.\n */\nfunction has_site_icon( $blog_id = 0 ) {\n\treturn (bool) get_site_icon_url( 512, '', $blog_id );\n}\n\n/**\n * Determines whether the site has a custom logo.\n *\n * @since 4.5.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default is the ID of the current blog.\n * @return bool Whether the site has a custom logo or not.\n */\nfunction has_custom_logo( $blog_id = 0 ) {\n\t$switched_blog = false;\n\n\tif ( is_multisite() && ! empty( $blog_id ) && (int) $blog_id !== get_current_blog_id() ) {\n\t\tswitch_to_blog( $blog_id );\n\t\t$switched_blog = true;\n\t}\n\n\t$custom_logo_id = get_theme_mod( 'custom_logo' );\n\n\tif ( $switched_blog ) {\n\t\trestore_current_blog();\n\t}\n\n\treturn (bool) $custom_logo_id;\n}\n\n/**\n * Returns a custom logo, linked to home.\n *\n * @since 4.5.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default is the ID of the current blog.\n * @return string Custom logo markup.\n */\nfunction get_custom_logo( $blog_id = 0 ) {\n\t$html          = '';\n\t$switched_blog = false;\n\n\tif ( is_multisite() && ! empty( $blog_id ) && (int) $blog_id !== get_current_blog_id() ) {\n\t\tswitch_to_blog( $blog_id );\n\t\t$switched_blog = true;\n\t}\n\n\t$custom_logo_id = get_theme_mod( 'custom_logo' );\n\n\t// We have a logo. Logo is go.\n\tif ( $custom_logo_id ) {\n\t\t$custom_logo_attr = array(\n\t\t\t'class'    => 'custom-logo',\n\t\t\t'itemprop' => 'logo',\n\t\t);\n\n\t\t/*\n\t\t * If the logo alt attribute is empty, get the site title and explicitly\n\t\t * pass it to the attributes used by wp_get_attachment_image().\n\t\t */\n\t\t$image_alt = get_post_meta( $custom_logo_id, '_wp_attachment_image_alt', true );\n\t\tif ( empty( $image_alt ) ) {\n\t\t\t$custom_logo_attr['alt'] = get_bloginfo( 'name', 'display' );\n\t\t}\n\n\t\t/*\n\t\t * If the alt attribute is not empty, there's no need to explicitly pass\n\t\t * it because wp_get_attachment_image() already adds the alt attribute.\n\t\t */\n\t\t$html = sprintf(\n\t\t\t'<a href=\"%1$s\" class=\"custom-logo-link\" rel=\"home\" itemprop=\"url\">%2$s</a>',\n\t\t\tesc_url( home_url( '/' ) ),\n\t\t\twp_get_attachment_image( $custom_logo_id, 'full', false, $custom_logo_attr )\n\t\t);\n\t} // If no logo is set but we're in the Customizer, leave a placeholder (needed for the live preview).\n\telseif ( is_customize_preview() ) {\n\t\t$html = sprintf(\n\t\t\t'<a href=\"%1$s\" class=\"custom-logo-link\" style=\"display:none;\"><img class=\"custom-logo\"/></a>',\n\t\t\tesc_url( home_url( '/' ) )\n\t\t);\n\t}\n\n\tif ( $switched_blog ) {\n\t\trestore_current_blog();\n\t}\n\n\t/**\n\t * Filters the custom logo output.\n\t *\n\t * @since 4.5.0\n\t * @since 4.6.0 Added the `$blog_id` parameter.\n\t *\n\t * @param string $html    Custom logo HTML output.\n\t * @param int    $blog_id ID of the blog to get the custom logo for.\n\t */\n\treturn apply_filters( 'get_custom_logo', $html, $blog_id );\n}\n\n/**\n * Displays a custom logo, linked to home.\n *\n * @since 4.5.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default is the ID of the current blog.\n */\nfunction the_custom_logo( $blog_id = 0 ) {\n\techo get_custom_logo( $blog_id );\n}\n\n/**\n * Returns document title for the current page.\n *\n * @since 4.4.0\n *\n * @global int $page  Page number of a single post.\n * @global int $paged Page number of a list of posts.\n *\n * @return string Tag with the document title.\n */\nfunction wp_get_document_title() {\n\n\t/**\n\t * Filters the document title before it is generated.\n\t *\n\t * Passing a non-empty value will short-circuit wp_get_document_title(),\n\t * returning that value instead.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $title The document title. Default empty string.\n\t */\n\t$title = apply_filters( 'pre_get_document_title', '' );\n\tif ( ! empty( $title ) ) {\n\t\treturn $title;\n\t}\n\n\tglobal $page, $paged;\n\n\t$title = array(\n\t\t'title' => '',\n\t);\n\n\t// If it's a 404 page, use a \"Page not found\" title.\n\tif ( is_404() ) {\n\t\t$title['title'] = __( 'Page not found' );\n\n\t\t// If it's a search, use a dynamic search results title.\n\t} elseif ( is_search() ) {\n\t\t/* translators: %s: search phrase */\n\t\t$title['title'] = sprintf( __( 'Search Results for &#8220;%s&#8221;' ), get_search_query() );\n\n\t\t// If on the front page, use the site title.\n\t} elseif ( is_front_page() ) {\n\t\t$title['title'] = get_bloginfo( 'name', 'display' );\n\n\t\t// If on a post type archive, use the post type archive title.\n\t} elseif ( is_post_type_archive() ) {\n\t\t$title['title'] = post_type_archive_title( '', false );\n\n\t\t// If on a taxonomy archive, use the term title.\n\t} elseif ( is_tax() ) {\n\t\t$title['title'] = single_term_title( '', false );\n\n\t\t/*\n\t\t* If we're on the blog page that is not the homepage or\n\t\t* a single post of any post type, use the post title.\n\t\t*/\n\t} elseif ( is_home() || is_singular() ) {\n\t\t$title['title'] = single_post_title( '', false );\n\n\t\t// If on a category or tag archive, use the term title.\n\t} elseif ( is_category() || is_tag() ) {\n\t\t$title['title'] = single_term_title( '', false );\n\n\t\t// If on an author archive, use the author's display name.\n\t} elseif ( is_author() && $author = get_queried_object() ) {\n\t\t$title['title'] = $author->display_name;\n\n\t\t// If it's a date archive, use the date as the title.\n\t} elseif ( is_year() ) {\n\t\t$title['title'] = get_the_date( _x( 'Y', 'yearly archives date format' ) );\n\n\t} elseif ( is_month() ) {\n\t\t$title['title'] = get_the_date( _x( 'F Y', 'monthly archives date format' ) );\n\n\t} elseif ( is_day() ) {\n\t\t$title['title'] = get_the_date();\n\t}\n\n\t// Add a page number if necessary.\n\tif ( ( $paged >= 2 || $page >= 2 ) && ! is_404() ) {\n\t\t$title['page'] = sprintf( __( 'Page %s' ), max( $paged, $page ) );\n\t}\n\n\t// Append the description or site title to give context.\n\tif ( is_front_page() ) {\n\t\t$title['tagline'] = get_bloginfo( 'description', 'display' );\n\t} else {\n\t\t$title['site'] = get_bloginfo( 'name', 'display' );\n\t}\n\n\t/**\n\t * Filters the separator for the document title.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $sep Document title separator. Default '-'.\n\t */\n\t$sep = apply_filters( 'document_title_separator', '-' );\n\n\t/**\n\t * Filters the parts of the document title.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array $title {\n\t *     The document title parts.\n\t *\n\t *     @type string $title   Title of the viewed page.\n\t *     @type string $page    Optional. Page number if paginated.\n\t *     @type string $tagline Optional. Site description when on home page.\n\t *     @type string $site    Optional. Site title when not on home page.\n\t * }\n\t */\n\t$title = apply_filters( 'document_title_parts', $title );\n\n\t$title = implode( \" $sep \", array_filter( $title ) );\n\t$title = wptexturize( $title );\n\t$title = convert_chars( $title );\n\t$title = esc_html( $title );\n\t$title = capital_P_dangit( $title );\n\n\treturn $title;\n}\n\n/**\n * Displays title tag with content.\n *\n * @ignore\n * @since 4.1.0\n * @since 4.4.0 Improved title output replaced `wp_title()`.\n * @access private\n */\nfunction _wp_render_title_tag() {\n\tif ( ! current_theme_supports( 'title-tag' ) ) {\n\t\treturn;\n\t}\n\n\techo '<title>' . wp_get_document_title() . '</title>' . \"\\n\";\n}\n\n/**\n * Display or retrieve page title for all areas of blog.\n *\n * By default, the page title will display the separator before the page title,\n * so that the blog title will be before the page title. This is not good for\n * title display, since the blog title shows up on most tabs and not what is\n * important, which is the page that the user is looking at.\n *\n * There are also SEO benefits to having the blog title after or to the 'right'\n * of the page title. However, it is mostly common sense to have the blog title\n * to the right with most browsers supporting tabs. You can achieve this by\n * using the seplocation parameter and setting the value to 'right'. This change\n * was introduced around 2.5.0, in case backward compatibility of themes is\n * important.\n *\n * @since 1.0.0\n *\n * @global WP_Locale $wp_locale\n *\n * @param string $sep         Optional, default is '&raquo;'. How to separate the various items\n *                            within the page title.\n * @param bool   $display     Optional, default is true. Whether to display or retrieve title.\n * @param string $seplocation Optional. Direction to display title, 'right'.\n * @return string|null String on retrieve, null when displaying.\n */\nfunction wp_title( $sep = '&raquo;', $display = true, $seplocation = '' ) {\n\tglobal $wp_locale;\n\n\t$m        = get_query_var( 'm' );\n\t$year     = get_query_var( 'year' );\n\t$monthnum = get_query_var( 'monthnum' );\n\t$day      = get_query_var( 'day' );\n\t$search   = get_query_var( 's' );\n\t$title    = '';\n\n\t$t_sep = '%WP_TITLE_SEP%'; // Temporary separator, for accurate flipping, if necessary\n\n\t// If there is a post\n\tif ( is_single() || ( is_home() && ! is_front_page() ) || ( is_page() && ! is_front_page() ) ) {\n\t\t$title = single_post_title( '', false );\n\t}\n\n\t// If there's a post type archive\n\tif ( is_post_type_archive() ) {\n\t\t$post_type = get_query_var( 'post_type' );\n\t\tif ( is_array( $post_type ) ) {\n\t\t\t$post_type = reset( $post_type );\n\t\t}\n\t\t$post_type_object = get_post_type_object( $post_type );\n\t\tif ( ! $post_type_object->has_archive ) {\n\t\t\t$title = post_type_archive_title( '', false );\n\t\t}\n\t}\n\n\t// If there's a category or tag\n\tif ( is_category() || is_tag() ) {\n\t\t$title = single_term_title( '', false );\n\t}\n\n\t// If there's a taxonomy\n\tif ( is_tax() ) {\n\t\t$term = get_queried_object();\n\t\tif ( $term ) {\n\t\t\t$tax   = get_taxonomy( $term->taxonomy );\n\t\t\t$title = single_term_title( $tax->labels->name . $t_sep, false );\n\t\t}\n\t}\n\n\t// If there's an author\n\tif ( is_author() && ! is_post_type_archive() ) {\n\t\t$author = get_queried_object();\n\t\tif ( $author ) {\n\t\t\t$title = $author->display_name;\n\t\t}\n\t}\n\n\t// Post type archives with has_archive should override terms.\n\tif ( is_post_type_archive() && $post_type_object->has_archive ) {\n\t\t$title = post_type_archive_title( '', false );\n\t}\n\n\t// If there's a month\n\tif ( is_archive() && ! empty( $m ) ) {\n\t\t$my_year  = substr( $m, 0, 4 );\n\t\t$my_month = $wp_locale->get_month( substr( $m, 4, 2 ) );\n\t\t$my_day   = intval( substr( $m, 6, 2 ) );\n\t\t$title    = $my_year . ( $my_month ? $t_sep . $my_month : '' ) . ( $my_day ? $t_sep . $my_day : '' );\n\t}\n\n\t// If there's a year\n\tif ( is_archive() && ! empty( $year ) ) {\n\t\t$title = $year;\n\t\tif ( ! empty( $monthnum ) ) {\n\t\t\t$title .= $t_sep . $wp_locale->get_month( $monthnum );\n\t\t}\n\t\tif ( ! empty( $day ) ) {\n\t\t\t$title .= $t_sep . zeroise( $day, 2 );\n\t\t}\n\t}\n\n\t// If it's a search\n\tif ( is_search() ) {\n\t\t/* translators: 1: separator, 2: search phrase */\n\t\t$title = sprintf( __( 'Search Results %1$s %2$s' ), $t_sep, strip_tags( $search ) );\n\t}\n\n\t// If it's a 404 page\n\tif ( is_404() ) {\n\t\t$title = __( 'Page not found' );\n\t}\n\n\t$prefix = '';\n\tif ( ! empty( $title ) ) {\n\t\t$prefix = \" $sep \";\n\t}\n\n\t/**\n\t * Filters the parts of the page title.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param array $title_array Parts of the page title.\n\t */\n\t$title_array = apply_filters( 'wp_title_parts', explode( $t_sep, $title ) );\n\n\t// Determines position of the separator and direction of the breadcrumb\n\tif ( 'right' == $seplocation ) { // sep on right, so reverse the order\n\t\t$title_array = array_reverse( $title_array );\n\t\t$title       = implode( \" $sep \", $title_array ) . $prefix;\n\t} else {\n\t\t$title = $prefix . implode( \" $sep \", $title_array );\n\t}\n\n\t/**\n\t * Filters the text of the page title.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param string $title Page title.\n\t * @param string $sep Title separator.\n\t * @param string $seplocation Location of the separator (left or right).\n\t */\n\t$title = apply_filters( 'wp_title', $title, $sep, $seplocation );\n\n\t// Send it out\n\tif ( $display ) {\n\t\techo $title;\n\t} else {\n\t\treturn $title;\n\t}\n}\n\n/**\n * Display or retrieve page title for post.\n *\n * This is optimized for single.php template file for displaying the post title.\n *\n * It does not support placing the separator after the title, but by leaving the\n * prefix parameter empty, you can set the title separator manually. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 0.71\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n */\nfunction single_post_title( $prefix = '', $display = true ) {\n\t$_post = get_queried_object();\n\n\tif ( ! isset( $_post->post_title ) ) {\n\t\treturn;\n\t}\n\n\t/**\n\t * Filters the page title for a single post.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $_post_title The single post page title.\n\t * @param object $_post       The current queried object as returned by get_queried_object().\n\t */\n\t$title = apply_filters( 'single_post_title', $_post->post_title, $_post );\n\tif ( $display ) {\n\t\techo $prefix . $title;\n\t} else {\n\t\treturn $prefix . $title;\n\t}\n}\n\n/**\n * Display or retrieve title for a post type archive.\n *\n * This is optimized for archive.php and archive-{$post_type}.php template files\n * for displaying the title of the post type.\n *\n * @since 3.1.0\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving, null when displaying or failure.\n */\nfunction post_type_archive_title( $prefix = '', $display = true ) {\n\tif ( ! is_post_type_archive() ) {\n\t\treturn;\n\t}\n\n\t$post_type = get_query_var( 'post_type' );\n\tif ( is_array( $post_type ) ) {\n\t\t$post_type = reset( $post_type );\n\t}\n\n\t$post_type_obj = get_post_type_object( $post_type );\n\n\t/**\n\t * Filters the post type archive title.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param string $post_type_name Post type 'name' label.\n\t * @param string $post_type      Post type.\n\t */\n\t$title = apply_filters( 'post_type_archive_title', $post_type_obj->labels->name, $post_type );\n\n\tif ( $display ) {\n\t\techo $prefix . $title;\n\t} else {\n\t\treturn $prefix . $title;\n\t}\n}\n\n/**\n * Display or retrieve page title for category archive.\n *\n * Useful for category template files for displaying the category page title.\n * The prefix does not automatically place a space between the prefix, so if\n * there should be a space, the parameter value will need to have it at the end.\n *\n * @since 0.71\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n */\nfunction single_cat_title( $prefix = '', $display = true ) {\n\treturn single_term_title( $prefix, $display );\n}\n\n/**\n * Display or retrieve page title for tag post archive.\n *\n * Useful for tag template files for displaying the tag page title. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 2.3.0\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n */\nfunction single_tag_title( $prefix = '', $display = true ) {\n\treturn single_term_title( $prefix, $display );\n}\n\n/**\n * Display or retrieve page title for taxonomy term archive.\n *\n * Useful for taxonomy term template files for displaying the taxonomy term page title.\n * The prefix does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 3.1.0\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n */\nfunction single_term_title( $prefix = '', $display = true ) {\n\t$term = get_queried_object();\n\n\tif ( ! $term ) {\n\t\treturn;\n\t}\n\n\tif ( is_category() ) {\n\t\t/**\n\t\t * Filters the category archive page title.\n\t\t *\n\t\t * @since 2.0.10\n\t\t *\n\t\t * @param string $term_name Category name for archive being displayed.\n\t\t */\n\t\t$term_name = apply_filters( 'single_cat_title', $term->name );\n\t} elseif ( is_tag() ) {\n\t\t/**\n\t\t * Filters the tag archive page title.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param string $term_name Tag name for archive being displayed.\n\t\t */\n\t\t$term_name = apply_filters( 'single_tag_title', $term->name );\n\t} elseif ( is_tax() ) {\n\t\t/**\n\t\t * Filters the custom taxonomy archive page title.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param string $term_name Term name for archive being displayed.\n\t\t */\n\t\t$term_name = apply_filters( 'single_term_title', $term->name );\n\t} else {\n\t\treturn;\n\t}\n\n\tif ( empty( $term_name ) ) {\n\t\treturn;\n\t}\n\n\tif ( $display ) {\n\t\techo $prefix . $term_name;\n\t} else {\n\t\treturn $prefix . $term_name;\n\t}\n}\n\n/**\n * Display or retrieve page title for post archive based on date.\n *\n * Useful for when the template only needs to display the month and year,\n * if either are available. The prefix does not automatically place a space\n * between the prefix, so if there should be a space, the parameter value\n * will need to have it at the end.\n *\n * @since 0.71\n *\n * @global WP_Locale $wp_locale\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n */\nfunction single_month_title( $prefix = '', $display = true ) {\n\tglobal $wp_locale;\n\n\t$m        = get_query_var( 'm' );\n\t$year     = get_query_var( 'year' );\n\t$monthnum = get_query_var( 'monthnum' );\n\n\tif ( ! empty( $monthnum ) && ! empty( $year ) ) {\n\t\t$my_year  = $year;\n\t\t$my_month = $wp_locale->get_month( $monthnum );\n\t} elseif ( ! empty( $m ) ) {\n\t\t$my_year  = substr( $m, 0, 4 );\n\t\t$my_month = $wp_locale->get_month( substr( $m, 4, 2 ) );\n\t}\n\n\tif ( empty( $my_month ) ) {\n\t\treturn false;\n\t}\n\n\t$result = $prefix . $my_month . $prefix . $my_year;\n\n\tif ( ! $display ) {\n\t\treturn $result;\n\t}\n\techo $result;\n}\n\n/**\n * Display the archive title based on the queried object.\n *\n * @since 4.1.0\n *\n * @see get_the_archive_title()\n *\n * @param string $before Optional. Content to prepend to the title. Default empty.\n * @param string $after  Optional. Content to append to the title. Default empty.\n */\nfunction the_archive_title( $before = '', $after = '' ) {\n\t$title = get_the_archive_title();\n\n\tif ( ! empty( $title ) ) {\n\t\techo $before . $title . $after;\n\t}\n}\n\n/**\n * Retrieve the archive title based on the queried object.\n *\n * @since 4.1.0\n *\n * @return string Archive title.\n */\nfunction get_the_archive_title() {\n\tif ( is_category() ) {\n\t\t/* translators: Category archive title. %s: Category name */\n\t\t$title = sprintf( __( 'Category: %s' ), single_cat_title( '', false ) );\n\t} elseif ( is_tag() ) {\n\t\t/* translators: Tag archive title. %s: Tag name */\n\t\t$title = sprintf( __( 'Tag: %s' ), single_tag_title( '', false ) );\n\t} elseif ( is_author() ) {\n\t\t/* translators: Author archive title. %s: Author name */\n\t\t$title = sprintf( __( 'Author: %s' ), '<span class=\"vcard\">' . get_the_author() . '</span>' );\n\t} elseif ( is_year() ) {\n\t\t/* translators: Yearly archive title. %s: Year */\n\t\t$title = sprintf( __( 'Year: %s' ), get_the_date( _x( 'Y', 'yearly archives date format' ) ) );\n\t} elseif ( is_month() ) {\n\t\t/* translators: Monthly archive title. %s: Month name and year */\n\t\t$title = sprintf( __( 'Month: %s' ), get_the_date( _x( 'F Y', 'monthly archives date format' ) ) );\n\t} elseif ( is_day() ) {\n\t\t/* translators: Daily archive title. %s: Date */\n\t\t$title = sprintf( __( 'Day: %s' ), get_the_date( _x( 'F j, Y', 'daily archives date format' ) ) );\n\t} elseif ( is_tax( 'post_format' ) ) {\n\t\tif ( is_tax( 'post_format', 'post-format-aside' ) ) {\n\t\t\t$title = _x( 'Asides', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-gallery' ) ) {\n\t\t\t$title = _x( 'Galleries', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-image' ) ) {\n\t\t\t$title = _x( 'Images', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-video' ) ) {\n\t\t\t$title = _x( 'Videos', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-quote' ) ) {\n\t\t\t$title = _x( 'Quotes', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-link' ) ) {\n\t\t\t$title = _x( 'Links', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-status' ) ) {\n\t\t\t$title = _x( 'Statuses', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-audio' ) ) {\n\t\t\t$title = _x( 'Audio', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-chat' ) ) {\n\t\t\t$title = _x( 'Chats', 'post format archive title' );\n\t\t}\n\t} elseif ( is_post_type_archive() ) {\n\t\t/* translators: Post type archive title. %s: Post type name */\n\t\t$title = sprintf( __( 'Archives: %s' ), post_type_archive_title( '', false ) );\n\t} elseif ( is_tax() ) {\n\t\t$tax = get_taxonomy( get_queried_object()->taxonomy );\n\t\t/* translators: Taxonomy term archive title. 1: Taxonomy singular name, 2: Current taxonomy term */\n\t\t$title = sprintf( __( '%1$s: %2$s' ), $tax->labels->singular_name, single_term_title( '', false ) );\n\t} else {\n\t\t$title = __( 'Archives' );\n\t}\n\n\t/**\n\t * Filters the archive title.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param string $title Archive title to be displayed.\n\t */\n\treturn apply_filters( 'get_the_archive_title', $title );\n}\n\n/**\n * Display category, tag, term, or author description.\n *\n * @since 4.1.0\n *\n * @see get_the_archive_description()\n *\n * @param string $before Optional. Content to prepend to the description. Default empty.\n * @param string $after  Optional. Content to append to the description. Default empty.\n */\nfunction the_archive_description( $before = '', $after = '' ) {\n\t$description = get_the_archive_description();\n\tif ( $description ) {\n\t\techo $before . $description . $after;\n\t}\n}\n\n/**\n * Retrieves the description for an author, post type, or term archive.\n *\n * @since 4.1.0\n * @since 4.7.0 Added support for author archives.\n * @since 4.9.0 Added support for post type archives.\n *\n * @see term_description()\n *\n * @return string Archive description.\n */\nfunction get_the_archive_description() {\n\tif ( is_author() ) {\n\t\t$description = get_the_author_meta( 'description' );\n\t} elseif ( is_post_type_archive() ) {\n\t\t$description = get_the_post_type_description();\n\t} else {\n\t\t$description = term_description();\n\t}\n\n\t/**\n\t * Filters the archive description.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param string $description Archive description to be displayed.\n\t */\n\treturn apply_filters( 'get_the_archive_description', $description );\n}\n\n/**\n * Retrieves the description for a post type archive.\n *\n * @since 4.9.0\n *\n * @return string The post type description.\n */\nfunction get_the_post_type_description() {\n\t$post_type = get_query_var( 'post_type' );\n\n\tif ( is_array( $post_type ) ) {\n\t\t$post_type = reset( $post_type );\n\t}\n\n\t$post_type_obj = get_post_type_object( $post_type );\n\n\t// Check if a description is set.\n\tif ( isset( $post_type_obj->description ) ) {\n\t\t$description = $post_type_obj->description;\n\t} else {\n\t\t$description = '';\n\t}\n\n\t/**\n\t * Filters the description for a post type archive.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param string       $description   The post type description.\n\t * @param WP_Post_Type $post_type_obj The post type object.\n\t */\n\treturn apply_filters( 'get_the_post_type_description', $description, $post_type_obj );\n}\n\n/**\n * Retrieve archive link content based on predefined or custom code.\n *\n * The format can be one of four styles. The 'link' for head element, 'option'\n * for use in the select element, 'html' for use in list (either ol or ul HTML\n * elements). Custom content is also supported using the before and after\n * parameters.\n *\n * The 'link' format uses the `<link>` HTML element with the **archives**\n * relationship. The before and after parameters are not used. The text\n * parameter is used to describe the link.\n *\n * The 'option' format uses the option HTML element for use in select element.\n * The value is the url parameter and the before and after parameters are used\n * between the text description.\n *\n * The 'html' format, which is the default, uses the li HTML element for use in\n * the list HTML elements. The before parameter is before the link and the after\n * parameter is after the closing link.\n *\n * The custom format uses the before parameter before the link ('a' HTML\n * element) and the after parameter after the closing link tag. If the above\n * three values for the format are not used, then custom format is assumed.\n *\n * @since 1.0.0\n *\n * @param string $url    URL to archive.\n * @param string $text   Archive text description.\n * @param string $format Optional, default is 'html'. Can be 'link', 'option', 'html', or custom.\n * @param string $before Optional. Content to prepend to the description. Default empty.\n * @param string $after  Optional. Content to append to the description. Default empty.\n * @return string HTML link content for archive.\n */\nfunction get_archives_link( $url, $text, $format = 'html', $before = '', $after = '' ) {\n\t$text = wptexturize( $text );\n\t$url  = esc_url( $url );\n\n\tif ( 'link' == $format ) {\n\t\t$link_html = \"\\t<link rel='archives' title='\" . esc_attr( $text ) . \"' href='$url' />\\n\";\n\t} elseif ( 'option' == $format ) {\n\t\t$link_html = \"\\t<option value='$url'>$before $text $after</option>\\n\";\n\t} elseif ( 'html' == $format ) {\n\t\t$link_html = \"\\t<li>$before<a href='$url'>$text</a>$after</li>\\n\";\n\t} else { // custom\n\t\t$link_html = \"\\t$before<a href='$url'>$text</a>$after\\n\";\n\t}\n\n\t/**\n\t * Filters the archive link content.\n\t *\n\t * @since 2.6.0\n\t * @since 4.5.0 Added the `$url`, `$text`, `$format`, `$before`, and `$after` parameters.\n\t *\n\t * @param string $link_html The archive HTML link content.\n\t * @param string $url       URL to archive.\n\t * @param string $text      Archive text description.\n\t * @param string $format    Link format. Can be 'link', 'option', 'html', or custom.\n\t * @param string $before    Content to prepend to the description.\n\t * @param string $after     Content to append to the description.\n\t */\n\treturn apply_filters( 'get_archives_link', $link_html, $url, $text, $format, $before, $after );\n}\n\n/**\n * Display archive links based on type and format.\n *\n * @since 1.2.0\n * @since 4.4.0 $post_type arg was added.\n *\n * @see get_archives_link()\n *\n * @global wpdb      $wpdb\n * @global WP_Locale $wp_locale\n *\n * @param string|array $args {\n *     Default archive links arguments. Optional.\n *\n *     @type string     $type            Type of archive to retrieve. Accepts 'daily', 'weekly', 'monthly',\n *                                       'yearly', 'postbypost', or 'alpha'. Both 'postbypost' and 'alpha'\n *                                       display the same archive link list as well as post titles instead\n *                                       of displaying dates. The difference between the two is that 'alpha'\n *                                       will order by post title and 'postbypost' will order by post date.\n *                                       Default 'monthly'.\n *     @type string|int $limit           Number of links to limit the query to. Default empty (no limit).\n *     @type string     $format          Format each link should take using the $before and $after args.\n *                                       Accepts 'link' (`<link>` tag), 'option' (`<option>` tag), 'html'\n *                                       (`<li>` tag), or a custom format, which generates a link anchor\n *                                       with $before preceding and $after succeeding. Default 'html'.\n *     @type string     $before          Markup to prepend to the beginning of each link. Default empty.\n *     @type string     $after           Markup to append to the end of each link. Default empty.\n *     @type bool       $show_post_count Whether to display the post count alongside the link. Default false.\n *     @type bool|int   $echo            Whether to echo or return the links list. Default 1|true to echo.\n *     @type string     $order           Whether to use ascending or descending order. Accepts 'ASC', or 'DESC'.\n *                                       Default 'DESC'.\n *     @type string     $post_type       Post type. Default 'post'.\n * }\n * @return string|void String when retrieving.\n */\nfunction wp_get_archives( $args = '' ) {\n\tglobal $wpdb, $wp_locale;\n\n\t$defaults = array(\n\t\t'type'            => 'monthly',\n\t\t'limit'           => '',\n\t\t'format'          => 'html',\n\t\t'before'          => '',\n\t\t'after'           => '',\n\t\t'show_post_count' => false,\n\t\t'echo'            => 1,\n\t\t'order'           => 'DESC',\n\t\t'post_type'       => 'post',\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$post_type_object = get_post_type_object( $r['post_type'] );\n\tif ( ! is_post_type_viewable( $post_type_object ) ) {\n\t\treturn;\n\t}\n\t$r['post_type'] = $post_type_object->name;\n\n\tif ( '' == $r['type'] ) {\n\t\t$r['type'] = 'monthly';\n\t}\n\n\tif ( ! empty( $r['limit'] ) ) {\n\t\t$r['limit'] = absint( $r['limit'] );\n\t\t$r['limit'] = ' LIMIT ' . $r['limit'];\n\t}\n\n\t$order = strtoupper( $r['order'] );\n\tif ( $order !== 'ASC' ) {\n\t\t$order = 'DESC';\n\t}\n\n\t// this is what will separate dates on weekly archive links\n\t$archive_week_separator = '&#8211;';\n\n\t$sql_where = $wpdb->prepare( \"WHERE post_type = %s AND post_status = 'publish'\", $r['post_type'] );\n\n\t/**\n\t * Filters the SQL WHERE clause for retrieving archives.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param string $sql_where Portion of SQL query containing the WHERE clause.\n\t * @param array  $r         An array of default arguments.\n\t */\n\t$where = apply_filters( 'getarchives_where', $sql_where, $r );\n\n\t/**\n\t * Filters the SQL JOIN clause for retrieving archives.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param string $sql_join Portion of SQL query containing JOIN clause.\n\t * @param array  $r        An array of default arguments.\n\t */\n\t$join = apply_filters( 'getarchives_join', '', $r );\n\n\t$output = '';\n\n\t$last_changed = wp_cache_get_last_changed( 'posts' );\n\n\t$limit = $r['limit'];\n\n\tif ( 'monthly' == $r['type'] ) {\n\t\t$query = \"SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date) ORDER BY post_date $order $limit\";\n\t\t$key   = md5( $query );\n\t\t$key   = \"wp_get_archives:$key:$last_changed\";\n\t\tif ( ! $results = wp_cache_get( $key, 'posts' ) ) {\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( $key, $results, 'posts' );\n\t\t}\n\t\tif ( $results ) {\n\t\t\t$after = $r['after'];\n\t\t\tforeach ( (array) $results as $result ) {\n\t\t\t\t$url = get_month_link( $result->year, $result->month );\n\t\t\t\tif ( 'post' !== $r['post_type'] ) {\n\t\t\t\t\t$url = add_query_arg( 'post_type', $r['post_type'], $url );\n\t\t\t\t}\n\t\t\t\t/* translators: 1: month name, 2: 4-digit year */\n\t\t\t\t$text = sprintf( __( '%1$s %2$d' ), $wp_locale->get_month( $result->month ), $result->year );\n\t\t\t\tif ( $r['show_post_count'] ) {\n\t\t\t\t\t$r['after'] = '&nbsp;(' . $result->posts . ')' . $after;\n\t\t\t\t}\n\t\t\t\t$output .= get_archives_link( $url, $text, $r['format'], $r['before'], $r['after'] );\n\t\t\t}\n\t\t}\n\t} elseif ( 'yearly' == $r['type'] ) {\n\t\t$query = \"SELECT YEAR(post_date) AS `year`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date) ORDER BY post_date $order $limit\";\n\t\t$key   = md5( $query );\n\t\t$key   = \"wp_get_archives:$key:$last_changed\";\n\t\tif ( ! $results = wp_cache_get( $key, 'posts' ) ) {\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( $key, $results, 'posts' );\n\t\t}\n\t\tif ( $results ) {\n\t\t\t$after = $r['after'];\n\t\t\tforeach ( (array) $results as $result ) {\n\t\t\t\t$url = get_year_link( $result->year );\n\t\t\t\tif ( 'post' !== $r['post_type'] ) {\n\t\t\t\t\t$url = add_query_arg( 'post_type', $r['post_type'], $url );\n\t\t\t\t}\n\t\t\t\t$text = sprintf( '%d', $result->year );\n\t\t\t\tif ( $r['show_post_count'] ) {\n\t\t\t\t\t$r['after'] = '&nbsp;(' . $result->posts . ')' . $after;\n\t\t\t\t}\n\t\t\t\t$output .= get_archives_link( $url, $text, $r['format'], $r['before'], $r['after'] );\n\t\t\t}\n\t\t}\n\t} elseif ( 'daily' == $r['type'] ) {\n\t\t$query = \"SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, DAYOFMONTH(post_date) AS `dayofmonth`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date), DAYOFMONTH(post_date) ORDER BY post_date $order $limit\";\n\t\t$key   = md5( $query );\n\t\t$key   = \"wp_get_archives:$key:$last_changed\";\n\t\tif ( ! $results = wp_cache_get( $key, 'posts' ) ) {\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( $key, $results, 'posts' );\n\t\t}\n\t\tif ( $results ) {\n\t\t\t$after = $r['after'];\n\t\t\tforeach ( (array) $results as $result ) {\n\t\t\t\t$url = get_day_link( $result->year, $result->month, $result->dayofmonth );\n\t\t\t\tif ( 'post' !== $r['post_type'] ) {\n\t\t\t\t\t$url = add_query_arg( 'post_type', $r['post_type'], $url );\n\t\t\t\t}\n\t\t\t\t$date = sprintf( '%1$d-%2$02d-%3$02d 00:00:00', $result->year, $result->month, $result->dayofmonth );\n\t\t\t\t$text = mysql2date( get_option( 'date_format' ), $date );\n\t\t\t\tif ( $r['show_post_count'] ) {\n\t\t\t\t\t$r['after'] = '&nbsp;(' . $result->posts . ')' . $after;\n\t\t\t\t}\n\t\t\t\t$output .= get_archives_link( $url, $text, $r['format'], $r['before'], $r['after'] );\n\t\t\t}\n\t\t}\n\t} elseif ( 'weekly' == $r['type'] ) {\n\t\t$week  = _wp_mysql_week( '`post_date`' );\n\t\t$query = \"SELECT DISTINCT $week AS `week`, YEAR( `post_date` ) AS `yr`, DATE_FORMAT( `post_date`, '%Y-%m-%d' ) AS `yyyymmdd`, count( `ID` ) AS `posts` FROM `$wpdb->posts` $join $where GROUP BY $week, YEAR( `post_date` ) ORDER BY `post_date` $order $limit\";\n\t\t$key   = md5( $query );\n\t\t$key   = \"wp_get_archives:$key:$last_changed\";\n\t\tif ( ! $results = wp_cache_get( $key, 'posts' ) ) {\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( $key, $results, 'posts' );\n\t\t}\n\t\t$arc_w_last = '';\n\t\tif ( $results ) {\n\t\t\t$after = $r['after'];\n\t\t\tforeach ( (array) $results as $result ) {\n\t\t\t\tif ( $result->week != $arc_w_last ) {\n\t\t\t\t\t$arc_year       = $result->yr;\n\t\t\t\t\t$arc_w_last     = $result->week;\n\t\t\t\t\t$arc_week       = get_weekstartend( $result->yyyymmdd, get_option( 'start_of_week' ) );\n\t\t\t\t\t$arc_week_start = date_i18n( get_option( 'date_format' ), $arc_week['start'] );\n\t\t\t\t\t$arc_week_end   = date_i18n( get_option( 'date_format' ), $arc_week['end'] );\n\t\t\t\t\t$url            = add_query_arg(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'm' => $arc_year,\n\t\t\t\t\t\t\t'w' => $result->week,\n\t\t\t\t\t\t), home_url( '/' )\n\t\t\t\t\t);\n\t\t\t\t\tif ( 'post' !== $r['post_type'] ) {\n\t\t\t\t\t\t$url = add_query_arg( 'post_type', $r['post_type'], $url );\n\t\t\t\t\t}\n\t\t\t\t\t$text = $arc_week_start . $archive_week_separator . $arc_week_end;\n\t\t\t\t\tif ( $r['show_post_count'] ) {\n\t\t\t\t\t\t$r['after'] = '&nbsp;(' . $result->posts . ')' . $after;\n\t\t\t\t\t}\n\t\t\t\t\t$output .= get_archives_link( $url, $text, $r['format'], $r['before'], $r['after'] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} elseif ( ( 'postbypost' == $r['type'] ) || ( 'alpha' == $r['type'] ) ) {\n\t\t$orderby = ( 'alpha' == $r['type'] ) ? 'post_title ASC ' : 'post_date DESC, ID DESC ';\n\t\t$query   = \"SELECT * FROM $wpdb->posts $join $where ORDER BY $orderby $limit\";\n\t\t$key     = md5( $query );\n\t\t$key     = \"wp_get_archives:$key:$last_changed\";\n\t\tif ( ! $results = wp_cache_get( $key, 'posts' ) ) {\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( $key, $results, 'posts' );\n\t\t}\n\t\tif ( $results ) {\n\t\t\tforeach ( (array) $results as $result ) {\n\t\t\t\tif ( $result->post_date != '0000-00-00 00:00:00' ) {\n\t\t\t\t\t$url = get_permalink( $result );\n\t\t\t\t\tif ( $result->post_title ) {\n\t\t\t\t\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t\t\t\t\t$text = strip_tags( apply_filters( 'the_title', $result->post_title, $result->ID ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$text = $result->ID;\n\t\t\t\t\t}\n\t\t\t\t\t$output .= get_archives_link( $url, $text, $r['format'], $r['before'], $r['after'] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ( $r['echo'] ) {\n\t\techo $output;\n\t} else {\n\t\treturn $output;\n\t}\n}\n\n/**\n * Get number of days since the start of the week.\n *\n * @since 1.5.0\n *\n * @param int $num Number of day.\n * @return float Days since the start of the week.\n */\nfunction calendar_week_mod( $num ) {\n\t$base = 7;\n\treturn ( $num - $base * floor( $num / $base ) );\n}\n\n/**\n * Display calendar with days that have posts as links.\n *\n * The calendar is cached, which will be retrieved, if it exists. If there are\n * no posts for the month, then it will not be displayed.\n *\n * @since 1.0.0\n *\n * @global wpdb      $wpdb\n * @global int       $m\n * @global int       $monthnum\n * @global int       $year\n * @global WP_Locale $wp_locale\n * @global array     $posts\n *\n * @param bool $initial Optional, default is true. Use initial calendar names.\n * @param bool $echo    Optional, default is true. Set to false for return.\n * @return string|void String when retrieving.\n */\nfunction get_calendar( $initial = true, $echo = true ) {\n\tglobal $wpdb, $m, $monthnum, $year, $wp_locale, $posts;\n\n\t$key   = md5( $m . $monthnum . $year );\n\t$cache = wp_cache_get( 'get_calendar', 'calendar' );\n\n\tif ( $cache && is_array( $cache ) && isset( $cache[ $key ] ) ) {\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\t$output = apply_filters( 'get_calendar', $cache[ $key ] );\n\n\t\tif ( $echo ) {\n\t\t\techo $output;\n\t\t\treturn;\n\t\t}\n\n\t\treturn $output;\n\t}\n\n\tif ( ! is_array( $cache ) ) {\n\t\t$cache = array();\n\t}\n\n\t// Quick check. If we have no posts at all, abort!\n\tif ( ! $posts ) {\n\t\t$gotsome = $wpdb->get_var( \"SELECT 1 as test FROM $wpdb->posts WHERE post_type = 'post' AND post_status = 'publish' LIMIT 1\" );\n\t\tif ( ! $gotsome ) {\n\t\t\t$cache[ $key ] = '';\n\t\t\twp_cache_set( 'get_calendar', $cache, 'calendar' );\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif ( isset( $_GET['w'] ) ) {\n\t\t$w = (int) $_GET['w'];\n\t}\n\t// week_begins = 0 stands for Sunday\n\t$week_begins = (int) get_option( 'start_of_week' );\n\t$ts          = current_time( 'timestamp' );\n\n\t// Let's figure out when we are\n\tif ( ! empty( $monthnum ) && ! empty( $year ) ) {\n\t\t$thismonth = zeroise( intval( $monthnum ), 2 );\n\t\t$thisyear  = (int) $year;\n\t} elseif ( ! empty( $w ) ) {\n\t\t// We need to get the month from MySQL\n\t\t$thisyear = (int) substr( $m, 0, 4 );\n\t\t//it seems MySQL's weeks disagree with PHP's\n\t\t$d         = ( ( $w - 1 ) * 7 ) + 6;\n\t\t$thismonth = $wpdb->get_var( \"SELECT DATE_FORMAT((DATE_ADD('{$thisyear}0101', INTERVAL $d DAY) ), '%m')\" );\n\t} elseif ( ! empty( $m ) ) {\n\t\t$thisyear = (int) substr( $m, 0, 4 );\n\t\tif ( strlen( $m ) < 6 ) {\n\t\t\t$thismonth = '01';\n\t\t} else {\n\t\t\t$thismonth = zeroise( (int) substr( $m, 4, 2 ), 2 );\n\t\t}\n\t} else {\n\t\t$thisyear  = gmdate( 'Y', $ts );\n\t\t$thismonth = gmdate( 'm', $ts );\n\t}\n\n\t$unixmonth = mktime( 0, 0, 0, $thismonth, 1, $thisyear );\n\t$last_day  = date( 't', $unixmonth );\n\n\t// Get the next and previous month and year with at least one post\n\t$previous = $wpdb->get_row(\n\t\t\"SELECT MONTH(post_date) AS month, YEAR(post_date) AS year\n\t\tFROM $wpdb->posts\n\t\tWHERE post_date < '$thisyear-$thismonth-01'\n\t\tAND post_type = 'post' AND post_status = 'publish'\n\t\t\tORDER BY post_date DESC\n\t\t\tLIMIT 1\"\n\t);\n\t$next     = $wpdb->get_row(\n\t\t\"SELECT MONTH(post_date) AS month, YEAR(post_date) AS year\n\t\tFROM $wpdb->posts\n\t\tWHERE post_date > '$thisyear-$thismonth-{$last_day} 23:59:59'\n\t\tAND post_type = 'post' AND post_status = 'publish'\n\t\t\tORDER BY post_date ASC\n\t\t\tLIMIT 1\"\n\t);\n\n\t/* translators: Calendar caption: 1: month name, 2: 4-digit year */\n\t$calendar_caption = _x( '%1$s %2$s', 'calendar caption' );\n\t$calendar_output  = '<table id=\"wp-calendar\">\n\t<caption>' . sprintf(\n\t\t$calendar_caption,\n\t\t$wp_locale->get_month( $thismonth ),\n\t\tdate( 'Y', $unixmonth )\n\t) . '</caption>\n\t<thead>\n\t<tr>';\n\n\t$myweek = array();\n\n\tfor ( $wdcount = 0; $wdcount <= 6; $wdcount++ ) {\n\t\t$myweek[] = $wp_locale->get_weekday( ( $wdcount + $week_begins ) % 7 );\n\t}\n\n\tforeach ( $myweek as $wd ) {\n\t\t$day_name         = $initial ? $wp_locale->get_weekday_initial( $wd ) : $wp_locale->get_weekday_abbrev( $wd );\n\t\t$wd               = esc_attr( $wd );\n\t\t$calendar_output .= \"\\n\\t\\t<th scope=\\\"col\\\" title=\\\"$wd\\\">$day_name</th>\";\n\t}\n\n\t$calendar_output .= '\n\t</tr>\n\t</thead>\n\n\t<tfoot>\n\t<tr>';\n\n\tif ( $previous ) {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td colspan=\"3\" id=\"prev\"><a href=\"' . get_month_link( $previous->year, $previous->month ) . '\">&laquo; ' .\n\t\t\t$wp_locale->get_month_abbrev( $wp_locale->get_month( $previous->month ) ) .\n\t\t'</a></td>';\n\t} else {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td colspan=\"3\" id=\"prev\" class=\"pad\">&nbsp;</td>';\n\t}\n\n\t$calendar_output .= \"\\n\\t\\t\" . '<td class=\"pad\">&nbsp;</td>';\n\n\tif ( $next ) {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td colspan=\"3\" id=\"next\"><a href=\"' . get_month_link( $next->year, $next->month ) . '\">' .\n\t\t\t$wp_locale->get_month_abbrev( $wp_locale->get_month( $next->month ) ) .\n\t\t' &raquo;</a></td>';\n\t} else {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td colspan=\"3\" id=\"next\" class=\"pad\">&nbsp;</td>';\n\t}\n\n\t$calendar_output .= '\n\t</tr>\n\t</tfoot>\n\n\t<tbody>\n\t<tr>';\n\n\t$daywithpost = array();\n\n\t// Get days with posts\n\t$dayswithposts = $wpdb->get_results(\n\t\t\"SELECT DISTINCT DAYOFMONTH(post_date)\n\t\tFROM $wpdb->posts WHERE post_date >= '{$thisyear}-{$thismonth}-01 00:00:00'\n\t\tAND post_type = 'post' AND post_status = 'publish'\n\t\tAND post_date <= '{$thisyear}-{$thismonth}-{$last_day} 23:59:59'\", ARRAY_N\n\t);\n\tif ( $dayswithposts ) {\n\t\tforeach ( (array) $dayswithposts as $daywith ) {\n\t\t\t$daywithpost[] = $daywith[0];\n\t\t}\n\t}\n\n\t// See how much we should pad in the beginning\n\t$pad = calendar_week_mod( date( 'w', $unixmonth ) - $week_begins );\n\tif ( 0 != $pad ) {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td colspan=\"' . esc_attr( $pad ) . '\" class=\"pad\">&nbsp;</td>';\n\t}\n\n\t$newrow      = false;\n\t$daysinmonth = (int) date( 't', $unixmonth );\n\n\tfor ( $day = 1; $day <= $daysinmonth; ++$day ) {\n\t\tif ( isset( $newrow ) && $newrow ) {\n\t\t\t$calendar_output .= \"\\n\\t</tr>\\n\\t<tr>\\n\\t\\t\";\n\t\t}\n\t\t$newrow = false;\n\n\t\tif ( $day == gmdate( 'j', $ts ) &&\n\t\t\t$thismonth == gmdate( 'm', $ts ) &&\n\t\t\t$thisyear == gmdate( 'Y', $ts ) ) {\n\t\t\t$calendar_output .= '<td id=\"today\">';\n\t\t} else {\n\t\t\t$calendar_output .= '<td>';\n\t\t}\n\n\t\tif ( in_array( $day, $daywithpost ) ) {\n\t\t\t// any posts today?\n\t\t\t$date_format = date( _x( 'F j, Y', 'daily archives date format' ), strtotime( \"{$thisyear}-{$thismonth}-{$day}\" ) );\n\t\t\t/* translators: Post calendar label. %s: Date */\n\t\t\t$label            = sprintf( __( 'Posts published on %s' ), $date_format );\n\t\t\t$calendar_output .= sprintf(\n\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">%s</a>',\n\t\t\t\tget_day_link( $thisyear, $thismonth, $day ),\n\t\t\t\tesc_attr( $label ),\n\t\t\t\t$day\n\t\t\t);\n\t\t} else {\n\t\t\t$calendar_output .= $day;\n\t\t}\n\t\t$calendar_output .= '</td>';\n\n\t\tif ( 6 == calendar_week_mod( date( 'w', mktime( 0, 0, 0, $thismonth, $day, $thisyear ) ) - $week_begins ) ) {\n\t\t\t$newrow = true;\n\t\t}\n\t}\n\n\t$pad = 7 - calendar_week_mod( date( 'w', mktime( 0, 0, 0, $thismonth, $day, $thisyear ) ) - $week_begins );\n\tif ( $pad != 0 && $pad != 7 ) {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td class=\"pad\" colspan=\"' . esc_attr( $pad ) . '\">&nbsp;</td>';\n\t}\n\t$calendar_output .= \"\\n\\t</tr>\\n\\t</tbody>\\n\\t</table>\";\n\n\t$cache[ $key ] = $calendar_output;\n\twp_cache_set( 'get_calendar', $cache, 'calendar' );\n\n\tif ( $echo ) {\n\t\t/**\n\t\t * Filters the HTML calendar output.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string $calendar_output HTML output of the calendar.\n\t\t */\n\t\techo apply_filters( 'get_calendar', $calendar_output );\n\t\treturn;\n\t}\n\t/** This filter is documented in wp-includes/general-template.php */\n\treturn apply_filters( 'get_calendar', $calendar_output );\n}\n\n/**\n * Purge the cached results of get_calendar.\n *\n * @see get_calendar\n * @since 2.1.0\n */\nfunction delete_get_calendar_cache() {\n\twp_cache_delete( 'get_calendar', 'calendar' );\n}\n\n/**\n * Display all of the allowed tags in HTML format with attributes.\n *\n * This is useful for displaying in the comment area, which elements and\n * attributes are supported. As well as any plugins which want to display it.\n *\n * @since 1.0.1\n *\n * @global array $allowedtags\n *\n * @return string HTML allowed tags entity encoded.\n */\nfunction allowed_tags() {\n\tglobal $allowedtags;\n\t$allowed = '';\n\tforeach ( (array) $allowedtags as $tag => $attributes ) {\n\t\t$allowed .= '<' . $tag;\n\t\tif ( 0 < count( $attributes ) ) {\n\t\t\tforeach ( $attributes as $attribute => $limits ) {\n\t\t\t\t$allowed .= ' ' . $attribute . '=\"\"';\n\t\t\t}\n\t\t}\n\t\t$allowed .= '> ';\n\t}\n\treturn htmlentities( $allowed );\n}\n\n/***** Date/Time tags */\n\n/**\n * Outputs the date in iso8601 format for xml files.\n *\n * @since 1.0.0\n */\nfunction the_date_xml() {\n\techo mysql2date( 'Y-m-d', get_post()->post_date, false );\n}\n\n/**\n * Display or Retrieve the date the current post was written (once per date)\n *\n * Will only output the date if the current post's date is different from the\n * previous one output.\n *\n * i.e. Only one date listing will show per day worth of posts shown in the loop, even if the\n * function is called several times for each post.\n *\n * HTML output can be filtered with 'the_date'.\n * Date string output can be filtered with 'get_the_date'.\n *\n * @since 0.71\n *\n * @global string|int|bool $currentday\n * @global string|int|bool $previousday\n *\n * @param string $d      Optional. PHP date format defaults to the date_format option if not specified.\n * @param string $before Optional. Output before the date.\n * @param string $after  Optional. Output after the date.\n * @param bool   $echo   Optional, default is display. Whether to echo the date or return it.\n * @return string|void String if retrieving.\n */\nfunction the_date( $d = '', $before = '', $after = '', $echo = true ) {\n\tglobal $currentday, $previousday;\n\n\tif ( is_new_day() ) {\n\t\t$the_date    = $before . get_the_date( $d ) . $after;\n\t\t$previousday = $currentday;\n\n\t\t/**\n\t\t * Filters the date a post was published for display.\n\t\t *\n\t\t * @since 0.71\n\t\t *\n\t\t * @param string $the_date The formatted date string.\n\t\t * @param string $d        PHP date format. Defaults to 'date_format' option\n\t\t *                         if not specified.\n\t\t * @param string $before   HTML output before the date.\n\t\t * @param string $after    HTML output after the date.\n\t\t */\n\t\t$the_date = apply_filters( 'the_date', $the_date, $d, $before, $after );\n\n\t\tif ( $echo ) {\n\t\t\techo $the_date;\n\t\t} else {\n\t\t\treturn $the_date;\n\t\t}\n\t}\n}\n\n/**\n * Retrieve the date on which the post was written.\n *\n * Unlike the_date() this function will always return the date.\n * Modify output with the {@see 'get_the_date'} filter.\n *\n * @since 3.0.0\n *\n * @param  string      $d    Optional. PHP date format defaults to the date_format option if not specified.\n * @param  int|WP_Post $post Optional. Post ID or WP_Post object. Default current post.\n * @return false|string Date the current post was written. False on failure.\n */\nfunction get_the_date( $d = '', $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\tif ( '' == $d ) {\n\t\t$the_date = mysql2date( get_option( 'date_format' ), $post->post_date );\n\t} else {\n\t\t$the_date = mysql2date( $d, $post->post_date );\n\t}\n\n\t/**\n\t * Filters the date a post was published.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string      $the_date The formatted date.\n\t * @param string      $d        PHP date format. Defaults to 'date_format' option\n\t *                              if not specified.\n\t * @param int|WP_Post $post     The post object or ID.\n\t */\n\treturn apply_filters( 'get_the_date', $the_date, $d, $post );\n}\n\n/**\n * Display the date on which the post was last modified.\n *\n * @since 2.1.0\n *\n * @param string $d      Optional. PHP date format defaults to the date_format option if not specified.\n * @param string $before Optional. Output before the date.\n * @param string $after  Optional. Output after the date.\n * @param bool   $echo   Optional, default is display. Whether to echo the date or return it.\n * @return string|void String if retrieving.\n */\nfunction the_modified_date( $d = '', $before = '', $after = '', $echo = true ) {\n\t$the_modified_date = $before . get_the_modified_date( $d ) . $after;\n\n\t/**\n\t * Filters the date a post was last modified for display.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $the_modified_date The last modified date.\n\t * @param string $d                 PHP date format. Defaults to 'date_format' option\n\t *                                  if not specified.\n\t * @param string $before            HTML output before the date.\n\t * @param string $after             HTML output after the date.\n\t */\n\t$the_modified_date = apply_filters( 'the_modified_date', $the_modified_date, $d, $before, $after );\n\n\tif ( $echo ) {\n\t\techo $the_modified_date;\n\t} else {\n\t\treturn $the_modified_date;\n\t}\n\n}\n\n/**\n * Retrieve the date on which the post was last modified.\n *\n * @since 2.1.0\n * @since 4.6.0 Added the `$post` parameter.\n *\n * @param string      $d    Optional. PHP date format defaults to the date_format option if not specified.\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default current post.\n * @return false|string Date the current post was modified. False on failure.\n */\nfunction get_the_modified_date( $d = '', $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\t// For backward compatibility, failures go through the filter below.\n\t\t$the_time = false;\n\t} elseif ( empty( $d ) ) {\n\t\t$the_time = get_post_modified_time( get_option( 'date_format' ), false, $post, true );\n\t} else {\n\t\t$the_time = get_post_modified_time( $d, false, $post, true );\n\t}\n\n\t/**\n\t * Filters the date a post was last modified.\n\t *\n\t * @since 2.1.0\n\t * @since 4.6.0 Added the `$post` parameter.\n\t *\n\t * @param string|bool  $the_time The formatted date or false if no post is found.\n\t * @param string       $d        PHP date format. Defaults to value specified in\n\t *                               'date_format' option.\n\t * @param WP_Post|null $post     WP_Post object or null if no post is found.\n\t */\n\treturn apply_filters( 'get_the_modified_date', $the_time, $d, $post );\n}\n\n/**\n * Display the time at which the post was written.\n *\n * @since 0.71\n *\n * @param string $d Either 'G', 'U', or php date format.\n */\nfunction the_time( $d = '' ) {\n\t/**\n\t * Filters the time a post was written for display.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $get_the_time The formatted time.\n\t * @param string $d            The time format. Accepts 'G', 'U',\n\t *                             or php date format.\n\t */\n\techo apply_filters( 'the_time', get_the_time( $d ), $d );\n}\n\n/**\n * Retrieve the time at which the post was written.\n *\n * @since 1.5.0\n *\n * @param string      $d    Optional. Format to use for retrieving the time the post\n *                          was written. Either 'G', 'U', or php date format defaults\n *                          to the value specified in the time_format option. Default empty.\n * @param int|WP_Post $post WP_Post object or ID. Default is global $post object.\n * @return string|int|false Formatted date string or Unix timestamp if `$id` is 'U' or 'G'. False on failure.\n */\nfunction get_the_time( $d = '', $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\tif ( '' == $d ) {\n\t\t$the_time = get_post_time( get_option( 'time_format' ), false, $post, true );\n\t} else {\n\t\t$the_time = get_post_time( $d, false, $post, true );\n\t}\n\n\t/**\n\t * Filters the time a post was written.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param string      $the_time The formatted time.\n\t * @param string      $d        Format to use for retrieving the time the post was written.\n\t *                              Accepts 'G', 'U', or php date format value specified\n\t *                              in 'time_format' option. Default empty.\n\t * @param int|WP_Post $post     WP_Post object or ID.\n\t */\n\treturn apply_filters( 'get_the_time', $the_time, $d, $post );\n}\n\n/**\n * Retrieve the time at which the post was written.\n *\n * @since 2.0.0\n *\n * @param string      $d         Optional. Format to use for retrieving the time the post\n *                               was written. Either 'G', 'U', or php date format. Default 'U'.\n * @param bool        $gmt       Optional. Whether to retrieve the GMT time. Default false.\n * @param int|WP_Post $post      WP_Post object or ID. Default is global $post object.\n * @param bool        $translate Whether to translate the time string. Default false.\n * @return string|int|false Formatted date string or Unix timestamp if `$id` is 'U' or 'G'. False on failure.\n */\nfunction get_post_time( $d = 'U', $gmt = false, $post = null, $translate = false ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\tif ( $gmt ) {\n\t\t$time = $post->post_date_gmt;\n\t} else {\n\t\t$time = $post->post_date;\n\t}\n\n\t$time = mysql2date( $d, $time, $translate );\n\n\t/**\n\t * Filters the localized time a post was written.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param string $time The formatted time.\n\t * @param string $d    Format to use for retrieving the time the post was written.\n\t *                     Accepts 'G', 'U', or php date format. Default 'U'.\n\t * @param bool   $gmt  Whether to retrieve the GMT time. Default false.\n\t */\n\treturn apply_filters( 'get_post_time', $time, $d, $gmt );\n}\n\n/**\n * Display the time at which the post was last modified.\n *\n * @since 2.0.0\n *\n * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option.\n */\nfunction the_modified_time( $d = '' ) {\n\t/**\n\t * Filters the localized time a post was last modified, for display.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param string $get_the_modified_time The formatted time.\n\t * @param string $d                     The time format. Accepts 'G', 'U',\n\t *                                      or php date format. Defaults to value\n\t *                                      specified in 'time_format' option.\n\t */\n\techo apply_filters( 'the_modified_time', get_the_modified_time( $d ), $d );\n}\n\n/**\n * Retrieve the time at which the post was last modified.\n *\n * @since 2.0.0\n * @since 4.6.0 Added the `$post` parameter.\n *\n * @param string      $d     Optional. Format to use for retrieving the time the post\n *                           was modified. Either 'G', 'U', or php date format defaults\n *                           to the value specified in the time_format option. Default empty.\n * @param int|WP_Post $post  Optional. Post ID or WP_Post object. Default current post.\n * @return false|string Formatted date string or Unix timestamp. False on failure.\n */\nfunction get_the_modified_time( $d = '', $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\t// For backward compatibility, failures go through the filter below.\n\t\t$the_time = false;\n\t} elseif ( empty( $d ) ) {\n\t\t$the_time = get_post_modified_time( get_option( 'time_format' ), false, $post, true );\n\t} else {\n\t\t$the_time = get_post_modified_time( $d, false, $post, true );\n\t}\n\n\t/**\n\t * Filters the localized time a post was last modified.\n\t *\n\t * @since 2.0.0\n\t * @since 4.6.0 Added the `$post` parameter.\n\t *\n\t * @param string|bool  $the_time The formatted time or false if no post is found.\n\t * @param string       $d        Format to use for retrieving the time the post was\n\t *                               written. Accepts 'G', 'U', or php date format. Defaults\n\t *                               to value specified in 'time_format' option.\n\t * @param WP_Post|null $post     WP_Post object or null if no post is found.\n\t */\n\treturn apply_filters( 'get_the_modified_time', $the_time, $d, $post );\n}\n\n/**\n * Retrieve the time at which the post was last modified.\n *\n * @since 2.0.0\n *\n * @param string      $d         Optional. Format to use for retrieving the time the post\n *                               was modified. Either 'G', 'U', or php date format. Default 'U'.\n * @param bool        $gmt       Optional. Whether to retrieve the GMT time. Default false.\n * @param int|WP_Post $post      WP_Post object or ID. Default is global $post object.\n * @param bool        $translate Whether to translate the time string. Default false.\n * @return string|int|false Formatted date string or Unix timestamp if `$id` is 'U' or 'G'. False on failure.\n */\nfunction get_post_modified_time( $d = 'U', $gmt = false, $post = null, $translate = false ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\tif ( $gmt ) {\n\t\t$time = $post->post_modified_gmt;\n\t} else {\n\t\t$time = $post->post_modified;\n\t}\n\t$time = mysql2date( $d, $time, $translate );\n\n\t/**\n\t * Filters the localized time a post was last modified.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $time The formatted time.\n\t * @param string $d    The date format. Accepts 'G', 'U', or php date format. Default 'U'.\n\t * @param bool   $gmt  Whether to return the GMT time. Default false.\n\t */\n\treturn apply_filters( 'get_post_modified_time', $time, $d, $gmt );\n}\n\n/**\n * Display the weekday on which the post was written.\n *\n * @since 0.71\n *\n * @global WP_Locale $wp_locale\n */\nfunction the_weekday() {\n\tglobal $wp_locale;\n\t$the_weekday = $wp_locale->get_weekday( mysql2date( 'w', get_post()->post_date, false ) );\n\n\t/**\n\t * Filters the weekday on which the post was written, for display.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $the_weekday\n\t */\n\techo apply_filters( 'the_weekday', $the_weekday );\n}\n\n/**\n * Display the weekday on which the post was written.\n *\n * Will only output the weekday if the current post's weekday is different from\n * the previous one output.\n *\n * @since 0.71\n *\n * @global WP_Locale       $wp_locale\n * @global string|int|bool $currentday\n * @global string|int|bool $previousweekday\n *\n * @param string $before Optional Output before the date.\n * @param string $after Optional Output after the date.\n */\nfunction the_weekday_date( $before = '', $after = '' ) {\n\tglobal $wp_locale, $currentday, $previousweekday;\n\t$the_weekday_date = '';\n\tif ( $currentday != $previousweekday ) {\n\t\t$the_weekday_date .= $before;\n\t\t$the_weekday_date .= $wp_locale->get_weekday( mysql2date( 'w', get_post()->post_date, false ) );\n\t\t$the_weekday_date .= $after;\n\t\t$previousweekday   = $currentday;\n\t}\n\n\t/**\n\t * Filters the localized date on which the post was written, for display.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $the_weekday_date\n\t * @param string $before           The HTML to output before the date.\n\t * @param string $after            The HTML to output after the date.\n\t */\n\t$the_weekday_date = apply_filters( 'the_weekday_date', $the_weekday_date, $before, $after );\n\techo $the_weekday_date;\n}\n\n/**\n * Fire the wp_head action.\n *\n * See {@see 'wp_head'}.\n *\n * @since 1.2.0\n */\nfunction wp_head() {\n\t/**\n\t * Prints scripts or data in the head tag on the front end.\n\t *\n\t * @since 1.5.0\n\t */\n\tdo_action( 'wp_head' );\n}\n\n/**\n * Fire the wp_footer action.\n *\n * See {@see 'wp_footer'}.\n *\n * @since 1.5.1\n */\nfunction wp_footer() {\n\t/**\n\t * Prints scripts or data before the closing body tag on the front end.\n\t *\n\t * @since 1.5.1\n\t */\n\tdo_action( 'wp_footer' );\n}\n\n/**\n * Display the links to the general feeds.\n *\n * @since 2.8.0\n *\n * @param array $args Optional arguments.\n */\nfunction feed_links( $args = array() ) {\n\tif ( ! current_theme_supports( 'automatic-feed-links' ) ) {\n\t\treturn;\n\t}\n\n\t$defaults = array(\n\t\t/* translators: Separator between blog name and feed type in feed links */\n\t\t'separator' => _x( '&raquo;', 'feed link' ),\n\t\t/* translators: 1: blog title, 2: separator (raquo) */\n\t\t'feedtitle' => __( '%1$s %2$s Feed' ),\n\t\t/* translators: 1: blog title, 2: separator (raquo) */\n\t\t'comstitle' => __( '%1$s %2$s Comments Feed' ),\n\t);\n\n\t$args = wp_parse_args( $args, $defaults );\n\n\t/**\n\t * Filters whether to display the posts feed link.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param bool $show Whether to display the posts feed link. Default true.\n\t */\n\tif ( apply_filters( 'feed_links_show_posts_feed', true ) ) {\n\t\techo '<link rel=\"alternate\" type=\"' . feed_content_type() . '\" title=\"' . esc_attr( sprintf( $args['feedtitle'], get_bloginfo( 'name' ), $args['separator'] ) ) . '\" href=\"' . esc_url( get_feed_link() ) . \"\\\" />\\n\";\n\t}\n\n\t/**\n\t * Filters whether to display the comments feed link.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param bool $show Whether to display the comments feed link. Default true.\n\t */\n\tif ( apply_filters( 'feed_links_show_comments_feed', true ) ) {\n\t\techo '<link rel=\"alternate\" type=\"' . feed_content_type() . '\" title=\"' . esc_attr( sprintf( $args['comstitle'], get_bloginfo( 'name' ), $args['separator'] ) ) . '\" href=\"' . esc_url( get_feed_link( 'comments_' . get_default_feed() ) ) . \"\\\" />\\n\";\n\t}\n}\n\n/**\n * Display the links to the extra feeds such as category feeds.\n *\n * @since 2.8.0\n *\n * @param array $args Optional arguments.\n */\nfunction feed_links_extra( $args = array() ) {\n\t$defaults = array(\n\t\t/* translators: Separator between blog name and feed type in feed links */\n\t\t'separator'     => _x( '&raquo;', 'feed link' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: post title */\n\t\t'singletitle'   => __( '%1$s %2$s %3$s Comments Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: category name */\n\t\t'cattitle'      => __( '%1$s %2$s %3$s Category Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: tag name */\n\t\t'tagtitle'      => __( '%1$s %2$s %3$s Tag Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: term name, 4: taxonomy singular name */\n\t\t'taxtitle'      => __( '%1$s %2$s %3$s %4$s Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: author name  */\n\t\t'authortitle'   => __( '%1$s %2$s Posts by %3$s Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: search phrase */\n\t\t'searchtitle'   => __( '%1$s %2$s Search Results for &#8220;%3$s&#8221; Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: post type name */\n\t\t'posttypetitle' => __( '%1$s %2$s %3$s Feed' ),\n\t);\n\n\t$args = wp_parse_args( $args, $defaults );\n\n\tif ( is_singular() ) {\n\t\t$id   = 0;\n\t\t$post = get_post( $id );\n\n\t\tif ( comments_open() || pings_open() || $post->comment_count > 0 ) {\n\t\t\t$title = sprintf( $args['singletitle'], get_bloginfo( 'name' ), $args['separator'], the_title_attribute( array( 'echo' => false ) ) );\n\t\t\t$href  = get_post_comments_feed_link( $post->ID );\n\t\t}\n\t} elseif ( is_post_type_archive() ) {\n\t\t$post_type = get_query_var( 'post_type' );\n\t\tif ( is_array( $post_type ) ) {\n\t\t\t$post_type = reset( $post_type );\n\t\t}\n\n\t\t$post_type_obj = get_post_type_object( $post_type );\n\t\t$title         = sprintf( $args['posttypetitle'], get_bloginfo( 'name' ), $args['separator'], $post_type_obj->labels->name );\n\t\t$href          = get_post_type_archive_feed_link( $post_type_obj->name );\n\t} elseif ( is_category() ) {\n\t\t$term = get_queried_object();\n\n\t\tif ( $term ) {\n\t\t\t$title = sprintf( $args['cattitle'], get_bloginfo( 'name' ), $args['separator'], $term->name );\n\t\t\t$href  = get_category_feed_link( $term->term_id );\n\t\t}\n\t} elseif ( is_tag() ) {\n\t\t$term = get_queried_object();\n\n\t\tif ( $term ) {\n\t\t\t$title = sprintf( $args['tagtitle'], get_bloginfo( 'name' ), $args['separator'], $term->name );\n\t\t\t$href  = get_tag_feed_link( $term->term_id );\n\t\t}\n\t} elseif ( is_tax() ) {\n\t\t$term  = get_queried_object();\n\t\t$tax   = get_taxonomy( $term->taxonomy );\n\t\t$title = sprintf( $args['taxtitle'], get_bloginfo( 'name' ), $args['separator'], $term->name, $tax->labels->singular_name );\n\t\t$href  = get_term_feed_link( $term->term_id, $term->taxonomy );\n\t} elseif ( is_author() ) {\n\t\t$author_id = intval( get_query_var( 'author' ) );\n\n\t\t$title = sprintf( $args['authortitle'], get_bloginfo( 'name' ), $args['separator'], get_the_author_meta( 'display_name', $author_id ) );\n\t\t$href  = get_author_feed_link( $author_id );\n\t} elseif ( is_search() ) {\n\t\t$title = sprintf( $args['searchtitle'], get_bloginfo( 'name' ), $args['separator'], get_search_query( false ) );\n\t\t$href  = get_search_feed_link();\n\t} elseif ( is_post_type_archive() ) {\n\t\t$title         = sprintf( $args['posttypetitle'], get_bloginfo( 'name' ), $args['separator'], post_type_archive_title( '', false ) );\n\t\t$post_type_obj = get_queried_object();\n\t\tif ( $post_type_obj ) {\n\t\t\t$href = get_post_type_archive_feed_link( $post_type_obj->name );\n\t\t}\n\t}\n\n\tif ( isset( $title ) && isset( $href ) ) {\n\t\techo '<link rel=\"alternate\" type=\"' . feed_content_type() . '\" title=\"' . esc_attr( $title ) . '\" href=\"' . esc_url( $href ) . '\" />' . \"\\n\";\n\t}\n}\n\n/**\n * Display the link to the Really Simple Discovery service endpoint.\n *\n * @link http://archipelago.phrasewise.com/rsd\n * @since 2.0.0\n */\nfunction rsd_link() {\n\techo '<link rel=\"EditURI\" type=\"application/rsd+xml\" title=\"RSD\" href=\"' . esc_url( site_url( 'xmlrpc.php?rsd', 'rpc' ) ) . '\" />' . \"\\n\";\n}\n\n/**\n * Display the link to the Windows Live Writer manifest file.\n *\n * @link https://msdn.microsoft.com/en-us/library/bb463265.aspx\n * @since 2.3.1\n */\nfunction wlwmanifest_link() {\n\techo '<link rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\" href=\"',\n\t\tincludes_url( 'wlwmanifest.xml' ), '\" /> ', \"\\n\";\n}\n\n/**\n * Displays a noindex meta tag if required by the blog configuration.\n *\n * If a blog is marked as not being public then the noindex meta tag will be\n * output to tell web robots not to index the page content. Add this to the\n * {@see 'wp_head'} action.\n *\n * Typical usage is as a {@see 'wp_head'} callback:\n *\n *     add_action( 'wp_head', 'noindex' );\n *\n * @see wp_no_robots\n *\n * @since 2.1.0\n */\nfunction noindex() {\n\t// If the blog is not public, tell robots to go away.\n\tif ( '0' == get_option( 'blog_public' ) ) {\n\t\twp_no_robots();\n\t}\n}\n\n/**\n * Display a noindex meta tag.\n *\n * Outputs a noindex meta tag that tells web robots not to index the page content.\n * Typical usage is as a wp_head callback. add_action( 'wp_head', 'wp_no_robots' );\n *\n * @since 3.3.0\n */\nfunction wp_no_robots() {\n\techo \"<meta name='robots' content='noindex,follow' />\\n\";\n}\n\n/**\n * Display site icon meta tags.\n *\n * @since 4.3.0\n *\n * @link https://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#rel-icon HTML5 specification link icon.\n */\nfunction wp_site_icon() {\n\tif ( ! has_site_icon() && ! is_customize_preview() ) {\n\t\treturn;\n\t}\n\n\t$meta_tags = array();\n\t$icon_32   = get_site_icon_url( 32 );\n\tif ( empty( $icon_32 ) && is_customize_preview() ) {\n\t\t$icon_32 = '/favicon.ico'; // Serve default favicon URL in customizer so element can be updated for preview.\n\t}\n\tif ( $icon_32 ) {\n\t\t$meta_tags[] = sprintf( '<link rel=\"icon\" href=\"%s\" sizes=\"32x32\" />', esc_url( $icon_32 ) );\n\t}\n\t$icon_192 = get_site_icon_url( 192 );\n\tif ( $icon_192 ) {\n\t\t$meta_tags[] = sprintf( '<link rel=\"icon\" href=\"%s\" sizes=\"192x192\" />', esc_url( $icon_192 ) );\n\t}\n\t$icon_180 = get_site_icon_url( 180 );\n\tif ( $icon_180 ) {\n\t\t$meta_tags[] = sprintf( '<link rel=\"apple-touch-icon-precomposed\" href=\"%s\" />', esc_url( $icon_180 ) );\n\t}\n\t$icon_270 = get_site_icon_url( 270 );\n\tif ( $icon_270 ) {\n\t\t$meta_tags[] = sprintf( '<meta name=\"msapplication-TileImage\" content=\"%s\" />', esc_url( $icon_270 ) );\n\t}\n\n\t/**\n\t * Filters the site icon meta tags, so Plugins can add their own.\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param array $meta_tags Site Icon meta elements.\n\t */\n\t$meta_tags = apply_filters( 'site_icon_meta_tags', $meta_tags );\n\t$meta_tags = array_filter( $meta_tags );\n\n\tforeach ( $meta_tags as $meta_tag ) {\n\t\techo \"$meta_tag\\n\";\n\t}\n}\n\n/**\n * Prints resource hints to browsers for pre-fetching, pre-rendering\n * and pre-connecting to web sites.\n *\n * Gives hints to browsers to prefetch specific pages or render them\n * in the background, to perform DNS lookups or to begin the connection\n * handshake (DNS, TCP, TLS) in the background.\n *\n * These performance improving indicators work by using `<link rel\"\u2026\">`.\n *\n * @since 4.6.0\n */\nfunction wp_resource_hints() {\n\t$hints = array(\n\t\t'dns-prefetch' => wp_dependencies_unique_hosts(),\n\t\t'preconnect'   => array(),\n\t\t'prefetch'     => array(),\n\t\t'prerender'    => array(),\n\t);\n\n\t/*\n\t * Add DNS prefetch for the Emoji CDN.\n\t * The path is removed in the foreach loop below.\n\t */\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$hints['dns-prefetch'][] = apply_filters( 'emoji_svg_url', 'https://s.w.org/images/core/emoji/2.4/svg/' );\n\n\tforeach ( $hints as $relation_type => $urls ) {\n\t\t$unique_urls = array();\n\n\t\t/**\n\t\t * Filters domains and URLs for resource hints of relation type.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param array  $urls          URLs to print for resource hints.\n\t\t * @param string $relation_type The relation type the URLs are printed for, e.g. 'preconnect' or 'prerender'.\n\t\t */\n\t\t$urls = apply_filters( 'wp_resource_hints', $urls, $relation_type );\n\n\t\tforeach ( $urls as $key => $url ) {\n\t\t\t$atts = array();\n\n\t\t\tif ( is_array( $url ) ) {\n\t\t\t\tif ( isset( $url['href'] ) ) {\n\t\t\t\t\t$atts = $url;\n\t\t\t\t\t$url  = $url['href'];\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$url = esc_url( $url, array( 'http', 'https' ) );\n\n\t\t\tif ( ! $url ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( isset( $unique_urls[ $url ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( in_array( $relation_type, array( 'preconnect', 'dns-prefetch' ) ) ) {\n\t\t\t\t$parsed = wp_parse_url( $url );\n\n\t\t\t\tif ( empty( $parsed['host'] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( 'preconnect' === $relation_type && ! empty( $parsed['scheme'] ) ) {\n\t\t\t\t\t$url = $parsed['scheme'] . '://' . $parsed['host'];\n\t\t\t\t} else {\n\t\t\t\t\t// Use protocol-relative URLs for dns-prefetch or if scheme is missing.\n\t\t\t\t\t$url = '//' . $parsed['host'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$atts['rel']  = $relation_type;\n\t\t\t$atts['href'] = $url;\n\n\t\t\t$unique_urls[ $url ] = $atts;\n\t\t}\n\n\t\tforeach ( $unique_urls as $atts ) {\n\t\t\t$html = '';\n\n\t\t\tforeach ( $atts as $attr => $value ) {\n\t\t\t\tif ( ! is_scalar( $value ) ||\n\t\t\t\t\t( ! in_array( $attr, array( 'as', 'crossorigin', 'href', 'pr', 'rel', 'type' ), true ) && ! is_numeric( $attr ) ) ) {\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$value = ( 'href' === $attr ) ? esc_url( $value ) : esc_attr( $value );\n\n\t\t\t\tif ( ! is_string( $attr ) ) {\n\t\t\t\t\t$html .= \" $value\";\n\t\t\t\t} else {\n\t\t\t\t\t$html .= \" $attr='$value'\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$html = trim( $html );\n\n\t\t\techo \"<link $html />\\n\";\n\t\t}\n\t}\n}\n\n/**\n * Retrieves a list of unique hosts of all enqueued scripts and styles.\n *\n * @since 4.6.0\n *\n * @return array A list of unique hosts of enqueued scripts and styles.\n */\nfunction wp_dependencies_unique_hosts() {\n\tglobal $wp_scripts, $wp_styles;\n\n\t$unique_hosts = array();\n\n\tforeach ( array( $wp_scripts, $wp_styles ) as $dependencies ) {\n\t\tif ( $dependencies instanceof WP_Dependencies && ! empty( $dependencies->queue ) ) {\n\t\t\tforeach ( $dependencies->queue as $handle ) {\n\t\t\t\tif ( ! isset( $dependencies->registered[ $handle ] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t/* @var _WP_Dependency $dependency */\n\t\t\t\t$dependency = $dependencies->registered[ $handle ];\n\t\t\t\t$parsed     = wp_parse_url( $dependency->src );\n\n\t\t\t\tif ( ! empty( $parsed['host'] ) && ! in_array( $parsed['host'], $unique_hosts ) && $parsed['host'] !== $_SERVER['SERVER_NAME'] ) {\n\t\t\t\t\t$unique_hosts[] = $parsed['host'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $unique_hosts;\n}\n\n/**\n * Whether the user can access the visual editor.\n *\n * Checks if the user can access the visual editor and that it's supported by the user's browser.\n *\n * @since 2.0.0\n *\n * @global bool $wp_rich_edit Whether the user can access the visual editor.\n * @global bool $is_gecko     Whether the browser is Gecko-based.\n * @global bool $is_opera     Whether the browser is Opera.\n * @global bool $is_safari    Whether the browser is Safari.\n * @global bool $is_chrome    Whether the browser is Chrome.\n * @global bool $is_IE        Whether the browser is Internet Explorer.\n * @global bool $is_edge      Whether the browser is Microsoft Edge.\n *\n * @return bool True if the user can access the visual editor, false otherwise.\n */\nfunction user_can_richedit() {\n\tglobal $wp_rich_edit, $is_gecko, $is_opera, $is_safari, $is_chrome, $is_IE, $is_edge;\n\n\tif ( ! isset( $wp_rich_edit ) ) {\n\t\t$wp_rich_edit = false;\n\n\t\tif ( get_user_option( 'rich_editing' ) == 'true' || ! is_user_logged_in() ) { // default to 'true' for logged out users\n\t\t\tif ( $is_safari ) {\n\t\t\t\t$wp_rich_edit = ! wp_is_mobile() || ( preg_match( '!AppleWebKit/(\\d+)!', $_SERVER['HTTP_USER_AGENT'], $match ) && intval( $match[1] ) >= 534 );\n\t\t\t} elseif ( $is_IE ) {\n\t\t\t\t$wp_rich_edit = ( strpos( $_SERVER['HTTP_USER_AGENT'], 'Trident/7.0;' ) !== false );\n\t\t\t} elseif ( $is_gecko || $is_chrome || $is_edge || ( $is_opera && ! wp_is_mobile() ) ) {\n\t\t\t\t$wp_rich_edit = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Filters whether the user can access the visual editor.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param bool $wp_rich_edit Whether the user can access the visual editor.\n\t */\n\treturn apply_filters( 'user_can_richedit', $wp_rich_edit );\n}\n\n/**\n * Find out which editor should be displayed by default.\n *\n * Works out which of the two editors to display as the current editor for a\n * user. The 'html' setting is for the \"Text\" editor tab.\n *\n * @since 2.5.0\n *\n * @return string Either 'tinymce', or 'html', or 'test'\n */\nfunction wp_default_editor() {\n\t$r = user_can_richedit() ? 'tinymce' : 'html'; // defaults\n\tif ( wp_get_current_user() ) { // look for cookie\n\t\t$ed = get_user_setting( 'editor', 'tinymce' );\n\t\t$r  = ( in_array( $ed, array( 'tinymce', 'html', 'test' ) ) ) ? $ed : $r;\n\t}\n\n\t/**\n\t * Filters which editor should be displayed by default.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $r Which editor should be displayed by default. Either 'tinymce', 'html', or 'test'.\n\t */\n\treturn apply_filters( 'wp_default_editor', $r );\n}\n\n/**\n * Renders an editor.\n *\n * Using this function is the proper way to output all needed components for both TinyMCE and Quicktags.\n * _WP_Editors should not be used directly. See https://core.trac.wordpress.org/ticket/17144.\n *\n * NOTE: Once initialized the TinyMCE editor cannot be safely moved in the DOM. For that reason\n * running wp_editor() inside of a meta box is not a good idea unless only Quicktags is used.\n * On the post edit screen several actions can be used to include additional editors\n * containing TinyMCE: 'edit_page_form', 'edit_form_advanced' and 'dbx_post_sidebar'.\n * See https://core.trac.wordpress.org/ticket/19173 for more information.\n *\n * @see _WP_Editors::editor()\n * @since 3.3.0\n *\n * @param string $content   Initial content for the editor.\n * @param string $editor_id HTML ID attribute value for the textarea and TinyMCE. Can only be /[a-z]+/.\n * @param array  $settings  See _WP_Editors::editor().\n */\nfunction wp_editor( $content, $editor_id, $settings = array() ) {\n\tif ( ! class_exists( '_WP_Editors', false ) ) {\n\t\trequire( ABSPATH . WPINC . '/class-wp-editor.php' );\n\t}\n\t_WP_Editors::editor( $content, $editor_id, $settings );\n}\n\n/**\n * Outputs the editor scripts, stylesheets, and default settings.\n *\n * The editor can be initialized when needed after page load.\n * See wp.editor.initialize() in wp-admin/js/editor.js for initialization options.\n *\n * @uses _WP_Editors\n * @since 4.8.0\n */\nfunction wp_enqueue_editor() {\n\tif ( ! class_exists( '_WP_Editors', false ) ) {\n\t\trequire( ABSPATH . WPINC . '/class-wp-editor.php' );\n\t}\n\n\t_WP_Editors::enqueue_default_editor();\n}\n\n/**\n * Enqueue assets needed by the code editor for the given settings.\n *\n * @since 4.9.0\n *\n * @see wp_enqueue_editor()\n * @see _WP_Editors::parse_settings()\n * @param array $args {\n *     Args.\n *\n *     @type string   $type       The MIME type of the file to be edited.\n *     @type string   $file       Filename to be edited. Extension is used to sniff the type. Can be supplied as alternative to `$type` param.\n *     @type WP_Theme $theme      Theme being edited when on theme editor.\n *     @type string   $plugin     Plugin being edited when on plugin editor.\n *     @type array    $codemirror Additional CodeMirror setting overrides.\n *     @type array    $csslint    CSSLint rule overrides.\n *     @type array    $jshint     JSHint rule overrides.\n *     @type array    $htmlhint   JSHint rule overrides.\n * }\n * @returns array|false Settings for the enqueued code editor, or false if the editor was not enqueued .\n */\nfunction wp_enqueue_code_editor( $args ) {\n\tif ( is_user_logged_in() && 'false' === wp_get_current_user()->syntax_highlighting ) {\n\t\treturn false;\n\t}\n\n\t$settings = array(\n\t\t'codemirror' => array(\n\t\t\t'indentUnit'       => 4,\n\t\t\t'indentWithTabs'   => true,\n\t\t\t'inputStyle'       => 'contenteditable',\n\t\t\t'lineNumbers'      => true,\n\t\t\t'lineWrapping'     => true,\n\t\t\t'styleActiveLine'  => true,\n\t\t\t'continueComments' => true,\n\t\t\t'extraKeys'        => array(\n\t\t\t\t'Ctrl-Space' => 'autocomplete',\n\t\t\t\t'Ctrl-/'     => 'toggleComment',\n\t\t\t\t'Cmd-/'      => 'toggleComment',\n\t\t\t\t'Alt-F'      => 'findPersistent',\n\t\t\t\t'Ctrl-F'     => 'findPersistent',\n\t\t\t\t'Cmd-F'      => 'findPersistent',\n\t\t\t),\n\t\t\t'direction'        => 'ltr', // Code is shown in LTR even in RTL languages.\n\t\t\t'gutters'          => array(),\n\t\t),\n\t\t'csslint'    => array(\n\t\t\t'errors'                    => true, // Parsing errors.\n\t\t\t'box-model'                 => true,\n\t\t\t'display-property-grouping' => true,\n\t\t\t'duplicate-properties'      => true,\n\t\t\t'known-properties'          => true,\n\t\t\t'outline-none'              => true,\n\t\t),\n\t\t'jshint'     => array(\n\t\t\t// The following are copied from <https://github.com/WordPress/wordpress-develop/blob/4.8.1/.jshintrc>.\n\t\t\t'boss'     => true,\n\t\t\t'curly'    => true,\n\t\t\t'eqeqeq'   => true,\n\t\t\t'eqnull'   => true,\n\t\t\t'es3'      => true,\n\t\t\t'expr'     => true,\n\t\t\t'immed'    => true,\n\t\t\t'noarg'    => true,\n\t\t\t'nonbsp'   => true,\n\t\t\t'onevar'   => true,\n\t\t\t'quotmark' => 'single',\n\t\t\t'trailing' => true,\n\t\t\t'undef'    => true,\n\t\t\t'unused'   => true,\n\n\t\t\t'browser'  => true,\n\n\t\t\t'globals'  => array(\n\t\t\t\t'_'        => false,\n\t\t\t\t'Backbone' => false,\n\t\t\t\t'jQuery'   => false,\n\t\t\t\t'JSON'     => false,\n\t\t\t\t'wp'       => false,\n\t\t\t),\n\t\t),\n\t\t'htmlhint'   => array(\n\t\t\t'tagname-lowercase'        => true,\n\t\t\t'attr-lowercase'           => true,\n\t\t\t'attr-value-double-quotes' => false,\n\t\t\t'doctype-first'            => false,\n\t\t\t'tag-pair'                 => true,\n\t\t\t'spec-char-escape'         => true,\n\t\t\t'id-unique'                => true,\n\t\t\t'src-not-empty'            => true,\n\t\t\t'attr-no-duplication'      => true,\n\t\t\t'alt-require'              => true,\n\t\t\t'space-tab-mixed-disabled' => 'tab',\n\t\t\t'attr-unsafe-chars'        => true,\n\t\t),\n\t);\n\n\t$type = '';\n\tif ( isset( $args['type'] ) ) {\n\t\t$type = $args['type'];\n\n\t\t// Remap MIME types to ones that CodeMirror modes will recognize.\n\t\tif ( 'application/x-patch' === $type || 'text/x-patch' === $type ) {\n\t\t\t$type = 'text/x-diff';\n\t\t}\n\t} elseif ( isset( $args['file'] ) && false !== strpos( basename( $args['file'] ), '.' ) ) {\n\t\t$extension = strtolower( pathinfo( $args['file'], PATHINFO_EXTENSION ) );\n\t\tforeach ( wp_get_mime_types() as $exts => $mime ) {\n\t\t\tif ( preg_match( '!^(' . $exts . ')$!i', $extension ) ) {\n\t\t\t\t$type = $mime;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Supply any types that are not matched by wp_get_mime_types().\n\t\tif ( empty( $type ) ) {\n\t\t\tswitch ( $extension ) {\n\t\t\t\tcase 'conf':\n\t\t\t\t\t$type = 'text/nginx';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'css':\n\t\t\t\t\t$type = 'text/css';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'diff':\n\t\t\t\tcase 'patch':\n\t\t\t\t\t$type = 'text/x-diff';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'html':\n\t\t\t\tcase 'htm':\n\t\t\t\t\t$type = 'text/html';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'http':\n\t\t\t\t\t$type = 'message/http';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'js':\n\t\t\t\t\t$type = 'text/javascript';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'json':\n\t\t\t\t\t$type = 'application/json';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'jsx':\n\t\t\t\t\t$type = 'text/jsx';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'less':\n\t\t\t\t\t$type = 'text/x-less';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'md':\n\t\t\t\t\t$type = 'text/x-gfm';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'php':\n\t\t\t\tcase 'phtml':\n\t\t\t\tcase 'php3':\n\t\t\t\tcase 'php4':\n\t\t\t\tcase 'php5':\n\t\t\t\tcase 'php7':\n\t\t\t\tcase 'phps':\n\t\t\t\t\t$type = 'application/x-httpd-php';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'scss':\n\t\t\t\t\t$type = 'text/x-scss';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'sass':\n\t\t\t\t\t$type = 'text/x-sass';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'sh':\n\t\t\t\tcase 'bash':\n\t\t\t\t\t$type = 'text/x-sh';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'sql':\n\t\t\t\t\t$type = 'text/x-sql';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'svg':\n\t\t\t\t\t$type = 'application/svg+xml';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'xml':\n\t\t\t\t\t$type = 'text/xml';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'yml':\n\t\t\t\tcase 'yaml':\n\t\t\t\t\t$type = 'text/x-yaml';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'txt':\n\t\t\t\tdefault:\n\t\t\t\t\t$type = 'text/plain';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( 'text/css' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'css',\n\t\t\t\t'lint'              => true,\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/x-scss' === $type || 'text/x-less' === $type || 'text/x-sass' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => $type,\n\t\t\t\t'lint'              => false,\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/x-diff' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode' => 'diff',\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/html' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'htmlmixed',\n\t\t\t\t'lint'              => true,\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'autoCloseTags'     => true,\n\t\t\t\t'matchTags'         => array(\n\t\t\t\t\t'bothTags' => true,\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\n\t\tif ( ! current_user_can( 'unfiltered_html' ) ) {\n\t\t\t$settings['htmlhint']['kses'] = wp_kses_allowed_html( 'post' );\n\t\t}\n\t} elseif ( 'text/x-gfm' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'                => 'gfm',\n\t\t\t\t'highlightFormatting' => true,\n\t\t\t)\n\t\t);\n\t} elseif ( 'application/javascript' === $type || 'text/javascript' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'javascript',\n\t\t\t\t'lint'              => true,\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t} elseif ( false !== strpos( $type, 'json' ) ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => array(\n\t\t\t\t\t'name' => 'javascript',\n\t\t\t\t),\n\t\t\t\t'lint'              => true,\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t\tif ( 'application/ld+json' === $type ) {\n\t\t\t$settings['codemirror']['mode']['jsonld'] = true;\n\t\t} else {\n\t\t\t$settings['codemirror']['mode']['json'] = true;\n\t\t}\n\t} elseif ( false !== strpos( $type, 'jsx' ) ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'jsx',\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/x-markdown' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'                => 'markdown',\n\t\t\t\t'highlightFormatting' => true,\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/nginx' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode' => 'nginx',\n\t\t\t)\n\t\t);\n\t} elseif ( 'application/x-httpd-php' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'php',\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'autoCloseTags'     => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t\t'matchTags'         => array(\n\t\t\t\t\t'bothTags' => true,\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/x-sql' === $type || 'text/x-mysql' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'sql',\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t} elseif ( false !== strpos( $type, 'xml' ) ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'xml',\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'autoCloseTags'     => true,\n\t\t\t\t'matchTags'         => array(\n\t\t\t\t\t'bothTags' => true,\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/x-yaml' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode' => 'yaml',\n\t\t\t)\n\t\t);\n\t} else {\n\t\t$settings['codemirror']['mode'] = $type;\n\t}\n\n\tif ( ! empty( $settings['codemirror']['lint'] ) ) {\n\t\t$settings['codemirror']['gutters'][] = 'CodeMirror-lint-markers';\n\t}\n\n\t// Let settings supplied via args override any defaults.\n\tforeach ( wp_array_slice_assoc( $args, array( 'codemirror', 'csslint', 'jshint', 'htmlhint' ) ) as $key => $value ) {\n\t\t$settings[ $key ] = array_merge(\n\t\t\t$settings[ $key ],\n\t\t\t$value\n\t\t);\n\t}\n\n\t/**\n\t * Filters settings that are passed into the code editor.\n\t *\n\t * Returning a falsey value will disable the syntax-highlighting code editor.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param array $settings The array of settings passed to the code editor. A falsey value disables the editor.\n\t * @param array $args {\n\t *     Args passed when calling `wp_enqueue_code_editor()`.\n\t *\n\t *     @type string   $type       The MIME type of the file to be edited.\n\t *     @type string   $file       Filename being edited.\n\t *     @type WP_Theme $theme      Theme being edited when on theme editor.\n\t *     @type string   $plugin     Plugin being edited when on plugin editor.\n\t *     @type array    $codemirror Additional CodeMirror setting overrides.\n\t *     @type array    $csslint    CSSLint rule overrides.\n\t *     @type array    $jshint     JSHint rule overrides.\n\t *     @type array    $htmlhint   JSHint rule overrides.\n\t * }\n\t */\n\t$settings = apply_filters( 'wp_code_editor_settings', $settings, $args );\n\n\tif ( empty( $settings ) || empty( $settings['codemirror'] ) ) {\n\t\treturn false;\n\t}\n\n\twp_enqueue_script( 'code-editor' );\n\twp_enqueue_style( 'code-editor' );\n\n\tif ( isset( $settings['codemirror']['mode'] ) ) {\n\t\t$mode = $settings['codemirror']['mode'];\n\t\tif ( is_string( $mode ) ) {\n\t\t\t$mode = array(\n\t\t\t\t'name' => $mode,\n\t\t\t);\n\t\t}\n\n\t\tif ( ! empty( $settings['codemirror']['lint'] ) ) {\n\t\t\tswitch ( $mode['name'] ) {\n\t\t\t\tcase 'css':\n\t\t\t\tcase 'text/css':\n\t\t\t\tcase 'text/x-scss':\n\t\t\t\tcase 'text/x-less':\n\t\t\t\t\twp_enqueue_script( 'csslint' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'htmlmixed':\n\t\t\t\tcase 'text/html':\n\t\t\t\tcase 'php':\n\t\t\t\tcase 'application/x-httpd-php':\n\t\t\t\tcase 'text/x-php':\n\t\t\t\t\twp_enqueue_script( 'htmlhint' );\n\t\t\t\t\twp_enqueue_script( 'csslint' );\n\t\t\t\t\twp_enqueue_script( 'jshint' );\n\t\t\t\t\tif ( ! current_user_can( 'unfiltered_html' ) ) {\n\t\t\t\t\t\twp_enqueue_script( 'htmlhint-kses' );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'javascript':\n\t\t\t\tcase 'application/ecmascript':\n\t\t\t\tcase 'application/json':\n\t\t\t\tcase 'application/javascript':\n\t\t\t\tcase 'application/ld+json':\n\t\t\t\tcase 'text/typescript':\n\t\t\t\tcase 'application/typescript':\n\t\t\t\t\twp_enqueue_script( 'jshint' );\n\t\t\t\t\twp_enqueue_script( 'jsonlint' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\twp_add_inline_script( 'code-editor', sprintf( 'jQuery.extend( wp.codeEditor.defaultSettings, %s );', wp_json_encode( $settings ) ) );\n\n\t/**\n\t * Fires when scripts and styles are enqueued for the code editor.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param array $settings Settings for the enqueued code editor.\n\t */\n\tdo_action( 'wp_enqueue_code_editor', $settings );\n\n\treturn $settings;\n}\n\n/**\n * Retrieves the contents of the search WordPress query variable.\n *\n * The search query string is passed through esc_attr() to ensure that it is safe\n * for placing in an html attribute.\n *\n * @since 2.3.0\n *\n * @param bool $escaped Whether the result is escaped. Default true.\n *                      Only use when you are later escaping it. Do not use unescaped.\n * @return string\n */\nfunction get_search_query( $escaped = true ) {\n\t/**\n\t * Filters the contents of the search query variable.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param mixed $search Contents of the search query variable.\n\t */\n\t$query = apply_filters( 'get_search_query', get_query_var( 's' ) );\n\n\tif ( $escaped ) {\n\t\t$query = esc_attr( $query );\n\t}\n\treturn $query;\n}\n\n/**\n * Displays the contents of the search query variable.\n *\n * The search query string is passed through esc_attr() to ensure that it is safe\n * for placing in an html attribute.\n *\n * @since 2.1.0\n */\nfunction the_search_query() {\n\t/**\n\t * Filters the contents of the search query variable for display.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param mixed $search Contents of the search query variable.\n\t */\n\techo esc_attr( apply_filters( 'the_search_query', get_search_query( false ) ) );\n}\n\n/**\n * Gets the language attributes for the html tag.\n *\n * Builds up a set of html attributes containing the text direction and language\n * information for the page.\n *\n * @since 4.3.0\n *\n * @param string $doctype Optional. The type of html document. Accepts 'xhtml' or 'html'. Default 'html'.\n */\nfunction get_language_attributes( $doctype = 'html' ) {\n\t$attributes = array();\n\n\tif ( function_exists( 'is_rtl' ) && is_rtl() ) {\n\t\t$attributes[] = 'dir=\"rtl\"';\n\t}\n\n\tif ( $lang = get_bloginfo( 'language' ) ) {\n\t\tif ( get_option( 'html_type' ) == 'text/html' || $doctype == 'html' ) {\n\t\t\t$attributes[] = 'lang=\"' . esc_attr( $lang ) . '\"';\n\t\t}\n\n\t\tif ( get_option( 'html_type' ) != 'text/html' || $doctype == 'xhtml' ) {\n\t\t\t$attributes[] = 'xml:lang=\"' . esc_attr( $lang ) . '\"';\n\t\t}\n\t}\n\n\t$output = implode( ' ', $attributes );\n\n\t/**\n\t * Filters the language attributes for display in the html tag.\n\t *\n\t * @since 2.5.0\n\t * @since 4.3.0 Added the `$doctype` parameter.\n\t *\n\t * @param string $output A space-separated list of language attributes.\n\t * @param string $doctype The type of html document (xhtml|html).\n\t */\n\treturn apply_filters( 'language_attributes', $output, $doctype );\n}\n\n/**\n * Displays the language attributes for the html tag.\n *\n * Builds up a set of html attributes containing the text direction and language\n * information for the page.\n *\n * @since 2.1.0\n * @since 4.3.0 Converted into a wrapper for get_language_attributes().\n *\n * @param string $doctype Optional. The type of html document. Accepts 'xhtml' or 'html'. Default 'html'.\n */\nfunction language_attributes( $doctype = 'html' ) {\n\techo get_language_attributes( $doctype );\n}\n\n/**\n * Retrieve paginated link for archive post pages.\n *\n * Technically, the function can be used to create paginated link list for any\n * area. The 'base' argument is used to reference the url, which will be used to\n * create the paginated links. The 'format' argument is then used for replacing\n * the page number. It is however, most likely and by default, to be used on the\n * archive post pages.\n *\n * The 'type' argument controls format of the returned value. The default is\n * 'plain', which is just a string with the links separated by a newline\n * character. The other possible values are either 'array' or 'list'. The\n * 'array' value will return an array of the paginated link list to offer full\n * control of display. The 'list' value will place all of the paginated links in\n * an unordered HTML list.\n *\n * The 'total' argument is the total amount of pages and is an integer. The\n * 'current' argument is the current page number and is also an integer.\n *\n * An example of the 'base' argument is \"http://example.com/all_posts.php%_%\"\n * and the '%_%' is required. The '%_%' will be replaced by the contents of in\n * the 'format' argument. An example for the 'format' argument is \"?page=%#%\"\n * and the '%#%' is also required. The '%#%' will be replaced with the page\n * number.\n *\n * You can include the previous and next links in the list by setting the\n * 'prev_next' argument to true, which it is by default. You can set the\n * previous text, by using the 'prev_text' argument. You can set the next text\n * by setting the 'next_text' argument.\n *\n * If the 'show_all' argument is set to true, then it will show all of the pages\n * instead of a short list of the pages near the current page. By default, the\n * 'show_all' is set to false and controlled by the 'end_size' and 'mid_size'\n * arguments. The 'end_size' argument is how many numbers on either the start\n * and the end list edges, by default is 1. The 'mid_size' argument is how many\n * numbers to either side of current page, but not including current page.\n *\n * It is possible to add query vars to the link by using the 'add_args' argument\n * and see add_query_arg() for more information.\n *\n * The 'before_page_number' and 'after_page_number' arguments allow users to\n * augment the links themselves. Typically this might be to add context to the\n * numbered links so that screen reader users understand what the links are for.\n * The text strings are added before and after the page number - within the\n * anchor tag.\n *\n * @since 2.1.0\n * @since 4.9.0 Added the `aria_current` argument.\n *\n * @global WP_Query   $wp_query\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string|array $args {\n *     Optional. Array or string of arguments for generating paginated links for archives.\n *\n *     @type string $base               Base of the paginated url. Default empty.\n *     @type string $format             Format for the pagination structure. Default empty.\n *     @type int    $total              The total amount of pages. Default is the value WP_Query's\n *                                      `max_num_pages` or 1.\n *     @type int    $current            The current page number. Default is 'paged' query var or 1.\n *     @type string $aria_current       The value for the aria-current attribute. Possible values are 'page',\n *                                      'step', 'location', 'date', 'time', 'true', 'false'. Default is 'page'.\n *     @type bool   $show_all           Whether to show all pages. Default false.\n *     @type int    $end_size           How many numbers on either the start and the end list edges.\n *                                      Default 1.\n *     @type int    $mid_size           How many numbers to either side of the current pages. Default 2.\n *     @type bool   $prev_next          Whether to include the previous and next links in the list. Default true.\n *     @type bool   $prev_text          The previous page text. Default '&laquo; Previous'.\n *     @type bool   $next_text          The next page text. Default 'Next &raquo;'.\n *     @type string $type               Controls format of the returned value. Possible values are 'plain',\n *                                      'array' and 'list'. Default is 'plain'.\n *     @type array  $add_args           An array of query args to add. Default false.\n *     @type string $add_fragment       A string to append to each link. Default empty.\n *     @type string $before_page_number A string to appear before the page number. Default empty.\n *     @type string $after_page_number  A string to append after the page number. Default empty.\n * }\n * @return string|array|void String of page links or array of page links.\n */\nfunction paginate_links( $args = '' ) {\n\tglobal $wp_query, $wp_rewrite;\n\n\t// Setting up default values based on the current URL.\n\t$pagenum_link = html_entity_decode( get_pagenum_link() );\n\t$url_parts    = explode( '?', $pagenum_link );\n\n\t// Get max pages and current page out of the current query, if available.\n\t$total   = isset( $wp_query->max_num_pages ) ? $wp_query->max_num_pages : 1;\n\t$current = get_query_var( 'paged' ) ? intval( get_query_var( 'paged' ) ) : 1;\n\n\t// Append the format placeholder to the base URL.\n\t$pagenum_link = trailingslashit( $url_parts[0] ) . '%_%';\n\n\t// URL base depends on permalink settings.\n\t$format  = $wp_rewrite->using_index_permalinks() && ! strpos( $pagenum_link, 'index.php' ) ? 'index.php/' : '';\n\t$format .= $wp_rewrite->using_permalinks() ? user_trailingslashit( $wp_rewrite->pagination_base . '/%#%', 'paged' ) : '?paged=%#%';\n\n\t$defaults = array(\n\t\t'base'               => $pagenum_link, // http://example.com/all_posts.php%_% : %_% is replaced by format (below)\n\t\t'format'             => $format, // ?page=%#% : %#% is replaced by the page number\n\t\t'total'              => $total,\n\t\t'current'            => $current,\n\t\t'aria_current'       => 'page',\n\t\t'show_all'           => false,\n\t\t'prev_next'          => true,\n\t\t'prev_text'          => __( '&laquo; Previous' ),\n\t\t'next_text'          => __( 'Next &raquo;' ),\n\t\t'end_size'           => 1,\n\t\t'mid_size'           => 2,\n\t\t'type'               => 'plain',\n\t\t'add_args'           => array(), // array of query args to add\n\t\t'add_fragment'       => '',\n\t\t'before_page_number' => '',\n\t\t'after_page_number'  => '',\n\t);\n\n\t$args = wp_parse_args( $args, $defaults );\n\n\tif ( ! is_array( $args['add_args'] ) ) {\n\t\t$args['add_args'] = array();\n\t}\n\n\t// Merge additional query vars found in the original URL into 'add_args' array.\n\tif ( isset( $url_parts[1] ) ) {\n\t\t// Find the format argument.\n\t\t$format       = explode( '?', str_replace( '%_%', $args['format'], $args['base'] ) );\n\t\t$format_query = isset( $format[1] ) ? $format[1] : '';\n\t\twp_parse_str( $format_query, $format_args );\n\n\t\t// Find the query args of the requested URL.\n\t\twp_parse_str( $url_parts[1], $url_query_args );\n\n\t\t// Remove the format argument from the array of query arguments, to avoid overwriting custom format.\n\t\tforeach ( $format_args as $format_arg => $format_arg_value ) {\n\t\t\tunset( $url_query_args[ $format_arg ] );\n\t\t}\n\n\t\t$args['add_args'] = array_merge( $args['add_args'], urlencode_deep( $url_query_args ) );\n\t}\n\n\t// Who knows what else people pass in $args\n\t$total = (int) $args['total'];\n\tif ( $total < 2 ) {\n\t\treturn;\n\t}\n\t$current  = (int) $args['current'];\n\t$end_size = (int) $args['end_size']; // Out of bounds?  Make it the default.\n\tif ( $end_size < 1 ) {\n\t\t$end_size = 1;\n\t}\n\t$mid_size = (int) $args['mid_size'];\n\tif ( $mid_size < 0 ) {\n\t\t$mid_size = 2;\n\t}\n\t$add_args   = $args['add_args'];\n\t$r          = '';\n\t$page_links = array();\n\t$dots       = false;\n\n\tif ( $args['prev_next'] && $current && 1 < $current ) :\n\t\t$link = str_replace( '%_%', 2 == $current ? '' : $args['format'], $args['base'] );\n\t\t$link = str_replace( '%#%', $current - 1, $link );\n\t\tif ( $add_args ) {\n\t\t\t$link = add_query_arg( $add_args, $link );\n\t\t}\n\t\t$link .= $args['add_fragment'];\n\n\t\t/**\n\t\t * Filters the paginated links for the given archive pages.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string $link The paginated link URL.\n\t\t */\n\t\t$page_links[] = '<a class=\"prev page-numbers\" href=\"' . esc_url( apply_filters( 'paginate_links', $link ) ) . '\">' . $args['prev_text'] . '</a>';\n\tendif;\n\tfor ( $n = 1; $n <= $total; $n++ ) :\n\t\tif ( $n == $current ) :\n\t\t\t$page_links[] = \"<span aria-current='\" . esc_attr( $args['aria_current'] ) . \"' class='page-numbers current'>\" . $args['before_page_number'] . number_format_i18n( $n ) . $args['after_page_number'] . '</span>';\n\t\t\t$dots         = true;\n\t\telse :\n\t\t\tif ( $args['show_all'] || ( $n <= $end_size || ( $current && $n >= $current - $mid_size && $n <= $current + $mid_size ) || $n > $total - $end_size ) ) :\n\t\t\t\t$link = str_replace( '%_%', 1 == $n ? '' : $args['format'], $args['base'] );\n\t\t\t\t$link = str_replace( '%#%', $n, $link );\n\t\t\t\tif ( $add_args ) {\n\t\t\t\t\t$link = add_query_arg( $add_args, $link );\n\t\t\t\t}\n\t\t\t\t$link .= $args['add_fragment'];\n\n\t\t\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\t\t\t$page_links[] = \"<a class='page-numbers' href='\" . esc_url( apply_filters( 'paginate_links', $link ) ) . \"'>\" . $args['before_page_number'] . number_format_i18n( $n ) . $args['after_page_number'] . '</a>';\n\t\t\t\t$dots         = true;\n\t\t\telseif ( $dots && ! $args['show_all'] ) :\n\t\t\t\t$page_links[] = '<span class=\"page-numbers dots\">' . __( '&hellip;' ) . '</span>';\n\t\t\t\t$dots         = false;\n\t\t\tendif;\n\t\tendif;\n\tendfor;\n\tif ( $args['prev_next'] && $current && $current < $total ) :\n\t\t$link = str_replace( '%_%', $args['format'], $args['base'] );\n\t\t$link = str_replace( '%#%', $current + 1, $link );\n\t\tif ( $add_args ) {\n\t\t\t$link = add_query_arg( $add_args, $link );\n\t\t}\n\t\t$link .= $args['add_fragment'];\n\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\t$page_links[] = '<a class=\"next page-numbers\" href=\"' . esc_url( apply_filters( 'paginate_links', $link ) ) . '\">' . $args['next_text'] . '</a>';\n\tendif;\n\tswitch ( $args['type'] ) {\n\t\tcase 'array':\n\t\t\treturn $page_links;\n\n\t\tcase 'list':\n\t\t\t$r .= \"<ul class='page-numbers'>\\n\\t<li>\";\n\t\t\t$r .= join( \"</li>\\n\\t<li>\", $page_links );\n\t\t\t$r .= \"</li>\\n</ul>\\n\";\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t$r = join( \"\\n\", $page_links );\n\t\t\tbreak;\n\t}\n\treturn $r;\n}\n\n/**\n * Registers an admin color scheme css file.\n *\n * Allows a plugin to register a new admin color scheme. For example:\n *\n *     wp_admin_css_color( 'classic', __( 'Classic' ), admin_url( \"css/colors-classic.css\" ), array(\n *         '#07273E', '#14568A', '#D54E21', '#2683AE'\n *     ) );\n *\n * @since 2.5.0\n *\n * @global array $_wp_admin_css_colors\n *\n * @param string $key    The unique key for this theme.\n * @param string $name   The name of the theme.\n * @param string $url    The URL of the CSS file containing the color scheme.\n * @param array  $colors Optional. An array of CSS color definition strings which are used\n *                       to give the user a feel for the theme.\n * @param array  $icons {\n *     Optional. CSS color definitions used to color any SVG icons.\n *\n *     @type string $base    SVG icon base color.\n *     @type string $focus   SVG icon color on focus.\n *     @type string $current SVG icon color of current admin menu link.\n * }\n */\nfunction wp_admin_css_color( $key, $name, $url, $colors = array(), $icons = array() ) {\n\tglobal $_wp_admin_css_colors;\n\n\tif ( ! isset( $_wp_admin_css_colors ) ) {\n\t\t$_wp_admin_css_colors = array();\n\t}\n\n\t$_wp_admin_css_colors[ $key ] = (object) array(\n\t\t'name'        => $name,\n\t\t'url'         => $url,\n\t\t'colors'      => $colors,\n\t\t'icon_colors' => $icons,\n\t);\n}\n\n/**\n * Registers the default admin color schemes.\n *\n * Registers the initial set of eight color schemes in the Profile section\n * of the dashboard which allows for styling the admin menu and toolbar.\n *\n * @see wp_admin_css_color()\n *\n * @since 3.0.0\n */\nfunction register_admin_color_schemes() {\n\t$suffix  = is_rtl() ? '-rtl' : '';\n\t$suffix .= SCRIPT_DEBUG ? '' : '.min';\n\n\twp_admin_css_color(\n\t\t'fresh', _x( 'Default', 'admin color scheme' ),\n\t\tfalse,\n\t\tarray( '#222', '#333', '#0073aa', '#00a0d2' ),\n\t\tarray(\n\t\t\t'base'    => '#82878c',\n\t\t\t'focus'   => '#00a0d2',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\t// Other color schemes are not available when running out of src\n\tif ( false !== strpos( get_bloginfo( 'version' ), '-src' ) ) {\n\t\treturn;\n\t}\n\n\twp_admin_css_color(\n\t\t'light', _x( 'Light', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/light/colors$suffix.css\" ),\n\t\tarray( '#e5e5e5', '#999', '#d64e07', '#04a4cc' ),\n\t\tarray(\n\t\t\t'base'    => '#999',\n\t\t\t'focus'   => '#ccc',\n\t\t\t'current' => '#ccc',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'blue', _x( 'Blue', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/blue/colors$suffix.css\" ),\n\t\tarray( '#096484', '#4796b3', '#52accc', '#74B6CE' ),\n\t\tarray(\n\t\t\t'base'    => '#e5f8ff',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'midnight', _x( 'Midnight', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/midnight/colors$suffix.css\" ),\n\t\tarray( '#25282b', '#363b3f', '#69a8bb', '#e14d43' ),\n\t\tarray(\n\t\t\t'base'    => '#f1f2f3',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'sunrise', _x( 'Sunrise', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/sunrise/colors$suffix.css\" ),\n\t\tarray( '#b43c38', '#cf4944', '#dd823b', '#ccaf0b' ),\n\t\tarray(\n\t\t\t'base'    => '#f3f1f1',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'ectoplasm', _x( 'Ectoplasm', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/ectoplasm/colors$suffix.css\" ),\n\t\tarray( '#413256', '#523f6d', '#a3b745', '#d46f15' ),\n\t\tarray(\n\t\t\t'base'    => '#ece6f6',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'ocean', _x( 'Ocean', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/ocean/colors$suffix.css\" ),\n\t\tarray( '#627c83', '#738e96', '#9ebaa0', '#aa9d88' ),\n\t\tarray(\n\t\t\t'base'    => '#f2fcff',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'coffee', _x( 'Coffee', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/coffee/colors$suffix.css\" ),\n\t\tarray( '#46403c', '#59524c', '#c7a589', '#9ea476' ),\n\t\tarray(\n\t\t\t'base'    => '#f3f2f1',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n}\n\n/**\n * Displays the URL of a WordPress admin CSS file.\n *\n * @see WP_Styles::_css_href and its {@see 'style_loader_src'} filter.\n *\n * @since 2.3.0\n *\n * @param string $file file relative to wp-admin/ without its \".css\" extension.\n * @return string\n */\nfunction wp_admin_css_uri( $file = 'wp-admin' ) {\n\tif ( defined( 'WP_INSTALLING' ) ) {\n\t\t$_file = \"./$file.css\";\n\t} else {\n\t\t$_file = admin_url( \"$file.css\" );\n\t}\n\t$_file = add_query_arg( 'version', get_bloginfo( 'version' ), $_file );\n\n\t/**\n\t * Filters the URI of a WordPress admin CSS file.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $_file Relative path to the file with query arguments attached.\n\t * @param string $file  Relative path to the file, minus its \".css\" extension.\n\t */\n\treturn apply_filters( 'wp_admin_css_uri', $_file, $file );\n}\n\n/**\n * Enqueues or directly prints a stylesheet link to the specified CSS file.\n *\n * \"Intelligently\" decides to enqueue or to print the CSS file. If the\n * {@see 'wp_print_styles'} action has *not* yet been called, the CSS file will be\n * enqueued. If the {@see 'wp_print_styles'} action has been called, the CSS link will\n * be printed. Printing may be forced by passing true as the $force_echo\n * (second) parameter.\n *\n * For backward compatibility with WordPress 2.3 calling method: If the $file\n * (first) parameter does not correspond to a registered CSS file, we assume\n * $file is a file relative to wp-admin/ without its \".css\" extension. A\n * stylesheet link to that generated URL is printed.\n *\n * @since 2.3.0\n *\n * @param string $file       Optional. Style handle name or file name (without \".css\" extension) relative\n *                           to wp-admin/. Defaults to 'wp-admin'.\n * @param bool   $force_echo Optional. Force the stylesheet link to be printed rather than enqueued.\n */\nfunction wp_admin_css( $file = 'wp-admin', $force_echo = false ) {\n\t// For backward compatibility\n\t$handle = 0 === strpos( $file, 'css/' ) ? substr( $file, 4 ) : $file;\n\n\tif ( wp_styles()->query( $handle ) ) {\n\t\tif ( $force_echo || did_action( 'wp_print_styles' ) ) { // we already printed the style queue. Print this one immediately\n\t\t\twp_print_styles( $handle );\n\t\t} else { // Add to style queue\n\t\t\twp_enqueue_style( $handle );\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * Filters the stylesheet link to the specified CSS file.\n\t *\n\t * If the site is set to display right-to-left, the RTL stylesheet link\n\t * will be used instead.\n\t *\n\t * @since 2.3.0\n\t * @param string $stylesheet_link HTML link element for the stylesheet.\n\t * @param string $file            Style handle name or filename (without \".css\" extension)\n\t *                                relative to wp-admin/. Defaults to 'wp-admin'.\n\t */\n\techo apply_filters( 'wp_admin_css', \"<link rel='stylesheet' href='\" . esc_url( wp_admin_css_uri( $file ) ) . \"' type='text/css' />\\n\", $file );\n\n\tif ( function_exists( 'is_rtl' ) && is_rtl() ) {\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\techo apply_filters( 'wp_admin_css', \"<link rel='stylesheet' href='\" . esc_url( wp_admin_css_uri( \"$file-rtl\" ) ) . \"' type='text/css' />\\n\", \"$file-rtl\" );\n\t}\n}\n\n/**\n * Enqueues the default ThickBox js and css.\n *\n * If any of the settings need to be changed, this can be done with another js\n * file similar to media-upload.js. That file should\n * require array('thickbox') to ensure it is loaded after.\n *\n * @since 2.5.0\n */\nfunction add_thickbox() {\n\twp_enqueue_script( 'thickbox' );\n\twp_enqueue_style( 'thickbox' );\n\n\tif ( is_network_admin() ) {\n\t\tadd_action( 'admin_head', '_thickbox_path_admin_subfolder' );\n\t}\n}\n\n/**\n * Displays the XHTML generator that is generated on the wp_head hook.\n *\n * See {@see 'wp_head'}.\n *\n * @since 2.5.0\n */\nfunction wp_generator() {\n\t/**\n\t * Filters the output of the XHTML generator tag.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $generator_type The XHTML generator.\n\t */\n\tthe_generator( apply_filters( 'wp_generator_type', 'xhtml' ) );\n}\n\n/**\n * Display the generator XML or Comment for RSS, ATOM, etc.\n *\n * Returns the correct generator type for the requested output format. Allows\n * for a plugin to filter generators overall the {@see 'the_generator'} filter.\n *\n * @since 2.5.0\n *\n * @param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export).\n */\nfunction the_generator( $type ) {\n\t/**\n\t * Filters the output of the XHTML generator tag for display.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $generator_type The generator output.\n\t * @param string $type           The type of generator to output. Accepts 'html',\n\t *                               'xhtml', 'atom', 'rss2', 'rdf', 'comment', 'export'.\n\t */\n\techo apply_filters( 'the_generator', get_the_generator( $type ), $type ) . \"\\n\";\n}\n\n/**\n * Creates the generator XML or Comment for RSS, ATOM, etc.\n *\n * Returns the correct generator type for the requested output format. Allows\n * for a plugin to filter generators on an individual basis using the\n * {@see 'get_the_generator_$type'} filter.\n *\n * @since 2.5.0\n *\n * @param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export).\n * @return string|void The HTML content for the generator.\n */\nfunction get_the_generator( $type = '' ) {\n\tif ( empty( $type ) ) {\n\n\t\t$current_filter = current_filter();\n\t\tif ( empty( $current_filter ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch ( $current_filter ) {\n\t\t\tcase 'rss2_head':\n\t\t\tcase 'commentsrss2_head':\n\t\t\t\t$type = 'rss2';\n\t\t\t\tbreak;\n\t\t\tcase 'rss_head':\n\t\t\tcase 'opml_head':\n\t\t\t\t$type = 'comment';\n\t\t\t\tbreak;\n\t\t\tcase 'rdf_header':\n\t\t\t\t$type = 'rdf';\n\t\t\t\tbreak;\n\t\t\tcase 'atom_head':\n\t\t\tcase 'comments_atom_head':\n\t\t\tcase 'app_head':\n\t\t\t\t$type = 'atom';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tswitch ( $type ) {\n\t\tcase 'html':\n\t\t\t$gen = '<meta name=\"generator\" content=\"WordPress ' . get_bloginfo( 'version' ) . '\">';\n\t\t\tbreak;\n\t\tcase 'xhtml':\n\t\t\t$gen = '<meta name=\"generator\" content=\"WordPress ' . get_bloginfo( 'version' ) . '\" />';\n\t\t\tbreak;\n\t\tcase 'atom':\n\t\t\t$gen = '<generator uri=\"https://wordpress.org/\" version=\"' . get_bloginfo_rss( 'version' ) . '\">WordPress</generator>';\n\t\t\tbreak;\n\t\tcase 'rss2':\n\t\t\t$gen = '<generator>https://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) . '</generator>';\n\t\t\tbreak;\n\t\tcase 'rdf':\n\t\t\t$gen = '<admin:generatorAgent rdf:resource=\"https://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) . '\" />';\n\t\t\tbreak;\n\t\tcase 'comment':\n\t\t\t$gen = '<!-- generator=\"WordPress/' . get_bloginfo( 'version' ) . '\" -->';\n\t\t\tbreak;\n\t\tcase 'export':\n\t\t\t$gen = '<!-- generator=\"WordPress/' . get_bloginfo_rss( 'version' ) . '\" created=\"' . date( 'Y-m-d H:i' ) . '\" -->';\n\t\t\tbreak;\n\t}\n\n\t/**\n\t * Filters the HTML for the retrieved generator type.\n\t *\n\t * The dynamic portion of the hook name, `$type`, refers to the generator type.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $gen  The HTML markup output to wp_head().\n\t * @param string $type The type of generator. Accepts 'html', 'xhtml', 'atom',\n\t *                     'rss2', 'rdf', 'comment', 'export'.\n\t */\n\treturn apply_filters( \"get_the_generator_{$type}\", $gen, $type );\n}\n\n/**\n * Outputs the html checked attribute.\n *\n * Compares the first two arguments and if identical marks as checked\n *\n * @since 1.0.0\n *\n * @param mixed $checked One of the values to compare\n * @param mixed $current (true) The other value to compare if not just true\n * @param bool  $echo    Whether to echo or just return the string\n * @return string html attribute or empty string\n */\nfunction checked( $checked, $current = true, $echo = true ) {\n\treturn __checked_selected_helper( $checked, $current, $echo, 'checked' );\n}\n\n/**\n * Outputs the html selected attribute.\n *\n * Compares the first two arguments and if identical marks as selected\n *\n * @since 1.0.0\n *\n * @param mixed $selected One of the values to compare\n * @param mixed $current  (true) The other value to compare if not just true\n * @param bool  $echo     Whether to echo or just return the string\n * @return string html attribute or empty string\n */\nfunction selected( $selected, $current = true, $echo = true ) {\n\treturn __checked_selected_helper( $selected, $current, $echo, 'selected' );\n}\n\n/**\n * Outputs the html disabled attribute.\n *\n * Compares the first two arguments and if identical marks as disabled\n *\n * @since 3.0.0\n *\n * @param mixed $disabled One of the values to compare\n * @param mixed $current  (true) The other value to compare if not just true\n * @param bool  $echo     Whether to echo or just return the string\n * @return string html attribute or empty string\n */\nfunction disabled( $disabled, $current = true, $echo = true ) {\n\treturn __checked_selected_helper( $disabled, $current, $echo, 'disabled' );\n}\n\n/**\n * Outputs the html readonly attribute.\n *\n * Compares the first two arguments and if identical marks as readonly\n *\n * @since 4.9.0\n *\n * @param mixed $readonly One of the values to compare\n * @param mixed $current  (true) The other value to compare if not just true\n * @param bool  $echo     Whether to echo or just return the string\n * @return string html attribute or empty string\n */\nfunction readonly( $readonly, $current = true, $echo = true ) {\n\treturn __checked_selected_helper( $readonly, $current, $echo, 'readonly' );\n}\n\n/**\n * Private helper function for checked, selected, disabled and readonly.\n *\n * Compares the first two arguments and if identical marks as $type\n *\n * @since 2.8.0\n * @access private\n *\n * @param mixed  $helper  One of the values to compare\n * @param mixed  $current (true) The other value to compare if not just true\n * @param bool   $echo    Whether to echo or just return the string\n * @param string $type    The type of checked|selected|disabled|readonly we are doing\n * @return string html attribute or empty string\n */\nfunction __checked_selected_helper( $helper, $current, $echo, $type ) {\n\tif ( (string) $helper === (string) $current ) {\n\t\t$result = \" $type='$type'\";\n\t} else {\n\t\t$result = '';\n\t}\n\n\tif ( $echo ) {\n\t\techo $result;\n\t}\n\n\treturn $result;\n}\n\n/**\n * Default settings for heartbeat\n *\n * Outputs the nonce used in the heartbeat XHR\n *\n * @since 3.6.0\n *\n * @param array $settings\n * @return array $settings\n */\nfunction wp_heartbeat_settings( $settings ) {\n\tif ( ! is_admin() ) {\n\t\t$settings['ajaxurl'] = admin_url( 'admin-ajax.php', 'relative' );\n\t}\n\n\tif ( is_user_logged_in() ) {\n\t\t$settings['nonce'] = wp_create_nonce( 'heartbeat-nonce' );\n\t}\n\n\treturn $settings;\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '5.0-alpha-42892';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 42836;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4607-20180123';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * General template tags that can go anywhere in a template.\n *\n * @package WordPress\n * @subpackage Template\n */\n\n/**\n * Load header template.\n *\n * Includes the header template for a theme or if a name is specified then a\n * specialised header will be included.\n *\n * For the parameter, if the file is called \"header-special.php\" then specify\n * \"special\".\n *\n * @since 1.5.0\n *\n * @param string $name The name of the specialised header.\n */\nfunction get_header( $name = null ) {\n\t/**\n\t * Fires before the header template file is loaded.\n\t *\n\t * @since 2.1.0\n\t * @since 2.8.0 $name parameter added.\n\t *\n\t * @param string|null $name Name of the specific header file to use. null for the default header.\n\t */\n\tdo_action( 'get_header', $name );\n\n\t$templates = array();\n\t$name      = (string) $name;\n\tif ( '' !== $name ) {\n\t\t$templates[] = \"header-{$name}.php\";\n\t}\n\n\t$templates[] = 'header.php';\n\n\tlocate_template( $templates, true );\n}\n\n/**\n * Load footer template.\n *\n * Includes the footer template for a theme or if a name is specified then a\n * specialised footer will be included.\n *\n * For the parameter, if the file is called \"footer-special.php\" then specify\n * \"special\".\n *\n * @since 1.5.0\n *\n * @param string $name The name of the specialised footer.\n */\nfunction get_footer( $name = null ) {\n\t/**\n\t * Fires before the footer template file is loaded.\n\t *\n\t * @since 2.1.0\n\t * @since 2.8.0 $name parameter added.\n\t *\n\t * @param string|null $name Name of the specific footer file to use. null for the default footer.\n\t */\n\tdo_action( 'get_footer', $name );\n\n\t$templates = array();\n\t$name      = (string) $name;\n\tif ( '' !== $name ) {\n\t\t$templates[] = \"footer-{$name}.php\";\n\t}\n\n\t$templates[] = 'footer.php';\n\n\tlocate_template( $templates, true );\n}\n\n/**\n * Load sidebar template.\n *\n * Includes the sidebar template for a theme or if a name is specified then a\n * specialised sidebar will be included.\n *\n * For the parameter, if the file is called \"sidebar-special.php\" then specify\n * \"special\".\n *\n * @since 1.5.0\n *\n * @param string $name The name of the specialised sidebar.\n */\nfunction get_sidebar( $name = null ) {\n\t/**\n\t * Fires before the sidebar template file is loaded.\n\t *\n\t * @since 2.2.0\n\t * @since 2.8.0 $name parameter added.\n\t *\n\t * @param string|null $name Name of the specific sidebar file to use. null for the default sidebar.\n\t */\n\tdo_action( 'get_sidebar', $name );\n\n\t$templates = array();\n\t$name      = (string) $name;\n\tif ( '' !== $name ) {\n\t\t$templates[] = \"sidebar-{$name}.php\";\n\t}\n\n\t$templates[] = 'sidebar.php';\n\n\tlocate_template( $templates, true );\n}\n\n/**\n * Loads a template part into a template.\n *\n * Provides a simple mechanism for child themes to overload reusable sections of code\n * in the theme.\n *\n * Includes the named template part for a theme or if a name is specified then a\n * specialised part will be included. If the theme contains no {slug}.php file\n * then no template will be included.\n *\n * The template is included using require, not require_once, so you may include the\n * same template part multiple times.\n *\n * For the $name parameter, if the file is called \"{slug}-special.php\" then specify\n * \"special\".\n *\n * @since 3.0.0\n *\n * @param string $slug The slug name for the generic template.\n * @param string $name The name of the specialised template.\n */\nfunction get_template_part( $slug, $name = null ) {\n\t/**\n\t * Fires before the specified template part file is loaded.\n\t *\n\t * The dynamic portion of the hook name, `$slug`, refers to the slug name\n\t * for the generic template part.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string      $slug The slug name for the generic template.\n\t * @param string|null $name The name of the specialized template.\n\t */\n\tdo_action( \"get_template_part_{$slug}\", $slug, $name );\n\n\t$templates = array();\n\t$name      = (string) $name;\n\tif ( '' !== $name ) {\n\t\t$templates[] = \"{$slug}-{$name}.php\";\n\t}\n\n\t$templates[] = \"{$slug}.php\";\n\n\tlocate_template( $templates, true, false );\n}\n\n/**\n * Display search form.\n *\n * Will first attempt to locate the searchform.php file in either the child or\n * the parent, then load it. If it doesn't exist, then the default search form\n * will be displayed. The default search form is HTML, which will be displayed.\n * There is a filter applied to the search form HTML in order to edit or replace\n * it. The filter is {@see 'get_search_form'}.\n *\n * This function is primarily used by themes which want to hardcode the search\n * form into the sidebar and also by the search widget in WordPress.\n *\n * There is also an action that is called whenever the function is run called,\n * {@see 'pre_get_search_form'}. This can be useful for outputting JavaScript that the\n * search relies on or various formatting that applies to the beginning of the\n * search. To give a few examples of what it can be used for.\n *\n * @since 2.7.0\n *\n * @param bool $echo Default to echo and not return the form.\n * @return string|void String when $echo is false.\n */\nfunction get_search_form( $echo = true ) {\n\t/**\n\t * Fires before the search form is retrieved, at the start of get_search_form().\n\t *\n\t * @since 2.7.0 as 'get_search_form' action.\n\t * @since 3.6.0\n\t *\n\t * @link https://core.trac.wordpress.org/ticket/19321\n\t */\n\tdo_action( 'pre_get_search_form' );\n\n\t$format = current_theme_supports( 'html5', 'search-form' ) ? 'html5' : 'xhtml';\n\n\t/**\n\t * Filters the HTML format of the search form.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $format The type of markup to use in the search form.\n\t *                       Accepts 'html5', 'xhtml'.\n\t */\n\t$format = apply_filters( 'search_form_format', $format );\n\n\t$search_form_template = locate_template( 'searchform.php' );\n\tif ( '' != $search_form_template ) {\n\t\tob_start();\n\t\trequire( $search_form_template );\n\t\t$form = ob_get_clean();\n\t} else {\n\t\tif ( 'html5' == $format ) {\n\t\t\t$form = '<form role=\"search\" method=\"get\" class=\"search-form\" action=\"' . esc_url( home_url( '/' ) ) . '\">\n\t\t\t\t<label>\n\t\t\t\t\t<span class=\"screen-reader-text\">' . _x( 'Search for:', 'label' ) . '</span>\n\t\t\t\t\t<input type=\"search\" class=\"search-field\" placeholder=\"' . esc_attr_x( 'Search &hellip;', 'placeholder' ) . '\" value=\"' . get_search_query() . '\" name=\"s\" />\n\t\t\t\t</label>\n\t\t\t\t<input type=\"submit\" class=\"search-submit\" value=\"' . esc_attr_x( 'Search', 'submit button' ) . '\" />\n\t\t\t</form>';\n\t\t} else {\n\t\t\t$form = '<form role=\"search\" method=\"get\" id=\"searchform\" class=\"searchform\" action=\"' . esc_url( home_url( '/' ) ) . '\">\n\t\t\t\t<div>\n\t\t\t\t\t<label class=\"screen-reader-text\" for=\"s\">' . _x( 'Search for:', 'label' ) . '</label>\n\t\t\t\t\t<input type=\"text\" value=\"' . get_search_query() . '\" name=\"s\" id=\"s\" />\n\t\t\t\t\t<input type=\"submit\" id=\"searchsubmit\" value=\"' . esc_attr_x( 'Search', 'submit button' ) . '\" />\n\t\t\t\t</div>\n\t\t\t</form>';\n\t\t}\n\t}\n\n\t/**\n\t * Filters the HTML output of the search form.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param string $form The search form HTML output.\n\t */\n\t$result = apply_filters( 'get_search_form', $form );\n\n\tif ( null === $result ) {\n\t\t$result = $form;\n\t}\n\n\tif ( $echo ) {\n\t\techo $result;\n\t} else {\n\t\treturn $result;\n\t}\n}\n\n/**\n * Display the Log In/Out link.\n *\n * Displays a link, which allows users to navigate to the Log In page to log in\n * or log out depending on whether they are currently logged in.\n *\n * @since 1.5.0\n *\n * @param string $redirect Optional path to redirect to on login/logout.\n * @param bool   $echo     Default to echo and not return the link.\n * @return string|void String when retrieving.\n */\nfunction wp_loginout( $redirect = '', $echo = true ) {\n\tif ( ! is_user_logged_in() ) {\n\t\t$link = '<a href=\"' . esc_url( wp_login_url( $redirect ) ) . '\">' . __( 'Log in' ) . '</a>';\n\t} else {\n\t\t$link = '<a href=\"' . esc_url( wp_logout_url( $redirect ) ) . '\">' . __( 'Log out' ) . '</a>';\n\t}\n\n\tif ( $echo ) {\n\t\t/**\n\t\t * Filters the HTML output for the Log In/Log Out link.\n\t\t *\n\t\t * @since 1.5.0\n\t\t *\n\t\t * @param string $link The HTML link content.\n\t\t */\n\t\techo apply_filters( 'loginout', $link );\n\t} else {\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\treturn apply_filters( 'loginout', $link );\n\t}\n}\n\n/**\n * Retrieves the logout URL.\n *\n * Returns the URL that allows the user to log out of the site.\n *\n * @since 2.7.0\n *\n * @param string $redirect Path to redirect to on logout.\n * @return string The logout URL. Note: HTML-encoded via esc_html() in wp_nonce_url().\n */\nfunction wp_logout_url( $redirect = '' ) {\n\t$args = array( 'action' => 'logout' );\n\tif ( ! empty( $redirect ) ) {\n\t\t$args['redirect_to'] = urlencode( $redirect );\n\t}\n\n\t$logout_url = add_query_arg( $args, site_url( 'wp-login.php', 'login' ) );\n\t$logout_url = wp_nonce_url( $logout_url, 'log-out' );\n\n\t/**\n\t * Filters the logout URL.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $logout_url The HTML-encoded logout URL.\n\t * @param string $redirect   Path to redirect to on logout.\n\t */\n\treturn apply_filters( 'logout_url', $logout_url, $redirect );\n}\n\n/**\n * Retrieves the login URL.\n *\n * @since 2.7.0\n *\n * @param string $redirect     Path to redirect to on log in.\n * @param bool   $force_reauth Whether to force reauthorization, even if a cookie is present.\n *                             Default false.\n * @return string The login URL. Not HTML-encoded.\n */\nfunction wp_login_url( $redirect = '', $force_reauth = false ) {\n\t$login_url = site_url( 'wp-login.php', 'login' );\n\n\tif ( ! empty( $redirect ) ) {\n\t\t$login_url = add_query_arg( 'redirect_to', urlencode( $redirect ), $login_url );\n\t}\n\n\tif ( $force_reauth ) {\n\t\t$login_url = add_query_arg( 'reauth', '1', $login_url );\n\t}\n\n\t/**\n\t * Filters the login URL.\n\t *\n\t * @since 2.8.0\n\t * @since 4.2.0 The `$force_reauth` parameter was added.\n\t *\n\t * @param string $login_url    The login URL. Not HTML-encoded.\n\t * @param string $redirect     The path to redirect to on login, if supplied.\n\t * @param bool   $force_reauth Whether to force reauthorization, even if a cookie is present.\n\t */\n\treturn apply_filters( 'login_url', $login_url, $redirect, $force_reauth );\n}\n\n/**\n * Returns the URL that allows the user to register on the site.\n *\n * @since 3.6.0\n *\n * @return string User registration URL.\n */\nfunction wp_registration_url() {\n\t/**\n\t * Filters the user registration URL.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $register The user registration URL.\n\t */\n\treturn apply_filters( 'register_url', site_url( 'wp-login.php?action=register', 'login' ) );\n}\n\n/**\n * Provides a simple login form for use anywhere within WordPress.\n *\n * The login format HTML is echoed by default. Pass a false value for `$echo` to return it instead.\n *\n * @since 3.0.0\n *\n * @param array $args {\n *     Optional. Array of options to control the form output. Default empty array.\n *\n *     @type bool   $echo           Whether to display the login form or return the form HTML code.\n *                                  Default true (echo).\n *     @type string $redirect       URL to redirect to. Must be absolute, as in \"https://example.com/mypage/\".\n *                                  Default is to redirect back to the request URI.\n *     @type string $form_id        ID attribute value for the form. Default 'loginform'.\n *     @type string $label_username Label for the username or email address field. Default 'Username or Email Address'.\n *     @type string $label_password Label for the password field. Default 'Password'.\n *     @type string $label_remember Label for the remember field. Default 'Remember Me'.\n *     @type string $label_log_in   Label for the submit button. Default 'Log In'.\n *     @type string $id_username    ID attribute value for the username field. Default 'user_login'.\n *     @type string $id_password    ID attribute value for the password field. Default 'user_pass'.\n *     @type string $id_remember    ID attribute value for the remember field. Default 'rememberme'.\n *     @type string $id_submit      ID attribute value for the submit button. Default 'wp-submit'.\n *     @type bool   $remember       Whether to display the \"rememberme\" checkbox in the form.\n *     @type string $value_username Default value for the username field. Default empty.\n *     @type bool   $value_remember Whether the \"Remember Me\" checkbox should be checked by default.\n *                                  Default false (unchecked).\n *\n * }\n * @return string|void String when retrieving.\n */\nfunction wp_login_form( $args = array() ) {\n\t$defaults = array(\n\t\t'echo'           => true,\n\t\t// Default 'redirect' value takes the user back to the request URI.\n\t\t'redirect'       => ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'],\n\t\t'form_id'        => 'loginform',\n\t\t'label_username' => __( 'Username or Email Address' ),\n\t\t'label_password' => __( 'Password' ),\n\t\t'label_remember' => __( 'Remember Me' ),\n\t\t'label_log_in'   => __( 'Log In' ),\n\t\t'id_username'    => 'user_login',\n\t\t'id_password'    => 'user_pass',\n\t\t'id_remember'    => 'rememberme',\n\t\t'id_submit'      => 'wp-submit',\n\t\t'remember'       => true,\n\t\t'value_username' => '',\n\t\t// Set 'value_remember' to true to default the \"Remember me\" checkbox to checked.\n\t\t'value_remember' => false,\n\t);\n\n\t/**\n\t * Filters the default login form output arguments.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @see wp_login_form()\n\t *\n\t * @param array $defaults An array of default login form arguments.\n\t */\n\t$args = wp_parse_args( $args, apply_filters( 'login_form_defaults', $defaults ) );\n\n\t/**\n\t * Filters content to display at the top of the login form.\n\t *\n\t * The filter evaluates just following the opening form tag element.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $content Content to display. Default empty.\n\t * @param array  $args    Array of login form arguments.\n\t */\n\t$login_form_top = apply_filters( 'login_form_top', '', $args );\n\n\t/**\n\t * Filters content to display in the middle of the login form.\n\t *\n\t * The filter evaluates just following the location where the 'login-password'\n\t * field is displayed.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $content Content to display. Default empty.\n\t * @param array  $args    Array of login form arguments.\n\t */\n\t$login_form_middle = apply_filters( 'login_form_middle', '', $args );\n\n\t/**\n\t * Filters content to display at the bottom of the login form.\n\t *\n\t * The filter evaluates just preceding the closing form tag element.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $content Content to display. Default empty.\n\t * @param array  $args    Array of login form arguments.\n\t */\n\t$login_form_bottom = apply_filters( 'login_form_bottom', '', $args );\n\n\t$form = '\n\t\t<form name=\"' . $args['form_id'] . '\" id=\"' . $args['form_id'] . '\" action=\"' . esc_url( site_url( 'wp-login.php', 'login_post' ) ) . '\" method=\"post\">\n\t\t\t' . $login_form_top . '\n\t\t\t<p class=\"login-username\">\n\t\t\t\t<label for=\"' . esc_attr( $args['id_username'] ) . '\">' . esc_html( $args['label_username'] ) . '</label>\n\t\t\t\t<input type=\"text\" name=\"log\" id=\"' . esc_attr( $args['id_username'] ) . '\" class=\"input\" value=\"' . esc_attr( $args['value_username'] ) . '\" size=\"20\" />\n\t\t\t</p>\n\t\t\t<p class=\"login-password\">\n\t\t\t\t<label for=\"' . esc_attr( $args['id_password'] ) . '\">' . esc_html( $args['label_password'] ) . '</label>\n\t\t\t\t<input type=\"password\" name=\"pwd\" id=\"' . esc_attr( $args['id_password'] ) . '\" class=\"input\" value=\"\" size=\"20\" />\n\t\t\t</p>\n\t\t\t' . $login_form_middle . '\n\t\t\t' . ( $args['remember'] ? '<p class=\"login-remember\"><label><input name=\"rememberme\" type=\"checkbox\" id=\"' . esc_attr( $args['id_remember'] ) . '\" value=\"forever\"' . ( $args['value_remember'] ? ' checked=\"checked\"' : '' ) . ' /> ' . esc_html( $args['label_remember'] ) . '</label></p>' : '' ) . '\n\t\t\t<p class=\"login-submit\">\n\t\t\t\t<input type=\"submit\" name=\"wp-submit\" id=\"' . esc_attr( $args['id_submit'] ) . '\" class=\"button button-primary\" value=\"' . esc_attr( $args['label_log_in'] ) . '\" />\n\t\t\t\t<input type=\"hidden\" name=\"redirect_to\" value=\"' . esc_url( $args['redirect'] ) . '\" />\n\t\t\t</p>\n\t\t\t' . $login_form_bottom . '\n\t\t</form>';\n\n\tif ( $args['echo'] ) {\n\t\techo $form;\n\t} else {\n\t\treturn $form;\n\t}\n}\n\n/**\n * Returns the URL that allows the user to retrieve the lost password\n *\n * @since 2.8.0\n *\n * @param string $redirect Path to redirect to on login.\n * @return string Lost password URL.\n */\nfunction wp_lostpassword_url( $redirect = '' ) {\n\t$args = array( 'action' => 'lostpassword' );\n\tif ( ! empty( $redirect ) ) {\n\t\t$args['redirect_to'] = urlencode( $redirect );\n\t}\n\n\t$lostpassword_url = add_query_arg( $args, network_site_url( 'wp-login.php', 'login' ) );\n\n\t/**\n\t * Filters the Lost Password URL.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $lostpassword_url The lost password page URL.\n\t * @param string $redirect         The path to redirect to on login.\n\t */\n\treturn apply_filters( 'lostpassword_url', $lostpassword_url, $redirect );\n}\n\n/**\n * Display the Registration or Admin link.\n *\n * Display a link which allows the user to navigate to the registration page if\n * not logged in and registration is enabled or to the dashboard if logged in.\n *\n * @since 1.5.0\n *\n * @param string $before Text to output before the link. Default `<li>`.\n * @param string $after  Text to output after the link. Default `</li>`.\n * @param bool   $echo   Default to echo and not return the link.\n * @return string|void String when retrieving.\n */\nfunction wp_register( $before = '<li>', $after = '</li>', $echo = true ) {\n\tif ( ! is_user_logged_in() ) {\n\t\tif ( get_option( 'users_can_register' ) ) {\n\t\t\t$link = $before . '<a href=\"' . esc_url( wp_registration_url() ) . '\">' . __( 'Register' ) . '</a>' . $after;\n\t\t} else {\n\t\t\t$link = '';\n\t\t}\n\t} elseif ( current_user_can( 'read' ) ) {\n\t\t$link = $before . '<a href=\"' . admin_url() . '\">' . __( 'Site Admin' ) . '</a>' . $after;\n\t} else {\n\t\t$link = '';\n\t}\n\n\t/**\n\t * Filters the HTML link to the Registration or Admin page.\n\t *\n\t * Users are sent to the admin page if logged-in, or the registration page\n\t * if enabled and logged-out.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param string $link The HTML code for the link to the Registration or Admin page.\n\t */\n\t$link = apply_filters( 'register', $link );\n\n\tif ( $echo ) {\n\t\techo $link;\n\t} else {\n\t\treturn $link;\n\t}\n}\n\n/**\n * Theme container function for the 'wp_meta' action.\n *\n * The {@see 'wp_meta'} action can have several purposes, depending on how you use it,\n * but one purpose might have been to allow for theme switching.\n *\n * @since 1.5.0\n *\n * @link https://core.trac.wordpress.org/ticket/1458 Explanation of 'wp_meta' action.\n */\nfunction wp_meta() {\n\t/**\n\t * Fires before displaying echoed content in the sidebar.\n\t *\n\t * @since 1.5.0\n\t */\n\tdo_action( 'wp_meta' );\n}\n\n/**\n * Displays information about the current site.\n *\n * @since 0.71\n *\n * @see get_bloginfo() For possible `$show` values\n *\n * @param string $show Optional. Site information to display. Default empty.\n */\nfunction bloginfo( $show = '' ) {\n\techo get_bloginfo( $show, 'display' );\n}\n\n/**\n * Retrieves information about the current site.\n *\n * Possible values for `$show` include:\n *\n * - 'name' - Site title (set in Settings > General)\n * - 'description' - Site tagline (set in Settings > General)\n * - 'wpurl' - The WordPress address (URL) (set in Settings > General)\n * - 'url' - The Site address (URL) (set in Settings > General)\n * - 'admin_email' - Admin email (set in Settings > General)\n * - 'charset' - The \"Encoding for pages and feeds\"  (set in Settings > Reading)\n * - 'version' - The current WordPress version\n * - 'html_type' - The content-type (default: \"text/html\"). Themes and plugins\n *   can override the default value using the {@see 'pre_option_html_type'} filter\n * - 'text_direction' - The text direction determined by the site's language. is_rtl()\n *   should be used instead\n * - 'language' - Language code for the current site\n * - 'stylesheet_url' - URL to the stylesheet for the active theme. An active child theme\n *   will take precedence over this value\n * - 'stylesheet_directory' - Directory path for the active theme.  An active child theme\n *   will take precedence over this value\n * - 'template_url' / 'template_directory' - URL of the active theme's directory. An active\n *   child theme will NOT take precedence over this value\n * - 'pingback_url' - The pingback XML-RPC file URL (xmlrpc.php)\n * - 'atom_url' - The Atom feed URL (/feed/atom)\n * - 'rdf_url' - The RDF/RSS 1.0 feed URL (/feed/rdf)\n * - 'rss_url' - The RSS 0.92 feed URL (/feed/rss)\n * - 'rss2_url' - The RSS 2.0 feed URL (/feed)\n * - 'comments_atom_url' - The comments Atom feed URL (/comments/feed)\n * - 'comments_rss2_url' - The comments RSS 2.0 feed URL (/comments/feed)\n *\n * Some `$show` values are deprecated and will be removed in future versions.\n * These options will trigger the _deprecated_argument() function.\n *\n * Deprecated arguments include:\n *\n * - 'siteurl' - Use 'url' instead\n * - 'home' - Use 'url' instead\n *\n * @since 0.71\n *\n * @global string $wp_version\n *\n * @param string $show   Optional. Site info to retrieve. Default empty (site name).\n * @param string $filter Optional. How to filter what is retrieved. Default 'raw'.\n * @return string Mostly string values, might be empty.\n */\nfunction get_bloginfo( $show = '', $filter = 'raw' ) {\n\tswitch ( $show ) {\n\t\tcase 'home': // DEPRECATED\n\t\tcase 'siteurl': // DEPRECATED\n\t\t\t_deprecated_argument(\n\t\t\t\t__FUNCTION__, '2.2.0', sprintf(\n\t\t\t\t\t/* translators: 1: 'siteurl'/'home' argument, 2: bloginfo() function name, 3: 'url' argument */\n\t\t\t\t\t__( 'The %1$s option is deprecated for the family of %2$s functions. Use the %3$s option instead.' ),\n\t\t\t\t\t'<code>' . $show . '</code>',\n\t\t\t\t\t'<code>bloginfo()</code>',\n\t\t\t\t\t'<code>url</code>'\n\t\t\t\t)\n\t\t\t);\n\t\tcase 'url':\n\t\t\t$output = home_url();\n\t\t\tbreak;\n\t\tcase 'wpurl':\n\t\t\t$output = site_url();\n\t\t\tbreak;\n\t\tcase 'description':\n\t\t\t$output = get_option( 'blogdescription' );\n\t\t\tbreak;\n\t\tcase 'rdf_url':\n\t\t\t$output = get_feed_link( 'rdf' );\n\t\t\tbreak;\n\t\tcase 'rss_url':\n\t\t\t$output = get_feed_link( 'rss' );\n\t\t\tbreak;\n\t\tcase 'rss2_url':\n\t\t\t$output = get_feed_link( 'rss2' );\n\t\t\tbreak;\n\t\tcase 'atom_url':\n\t\t\t$output = get_feed_link( 'atom' );\n\t\t\tbreak;\n\t\tcase 'comments_atom_url':\n\t\t\t$output = get_feed_link( 'comments_atom' );\n\t\t\tbreak;\n\t\tcase 'comments_rss2_url':\n\t\t\t$output = get_feed_link( 'comments_rss2' );\n\t\t\tbreak;\n\t\tcase 'pingback_url':\n\t\t\t$output = site_url( 'xmlrpc.php' );\n\t\t\tbreak;\n\t\tcase 'stylesheet_url':\n\t\t\t$output = get_stylesheet_uri();\n\t\t\tbreak;\n\t\tcase 'stylesheet_directory':\n\t\t\t$output = get_stylesheet_directory_uri();\n\t\t\tbreak;\n\t\tcase 'template_directory':\n\t\tcase 'template_url':\n\t\t\t$output = get_template_directory_uri();\n\t\t\tbreak;\n\t\tcase 'admin_email':\n\t\t\t$output = get_option( 'admin_email' );\n\t\t\tbreak;\n\t\tcase 'charset':\n\t\t\t$output = get_option( 'blog_charset' );\n\t\t\tif ( '' == $output ) {\n\t\t\t\t$output = 'UTF-8';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'html_type':\n\t\t\t$output = get_option( 'html_type' );\n\t\t\tbreak;\n\t\tcase 'version':\n\t\t\tglobal $wp_version;\n\t\t\t$output = $wp_version;\n\t\t\tbreak;\n\t\tcase 'language':\n\t\t\t/* translators: Translate this to the correct language tag for your locale,\n\t\t\t * see https://www.w3.org/International/articles/language-tags/ for reference.\n\t\t\t * Do not translate into your own language.\n\t\t\t */\n\t\t\t$output = __( 'html_lang_attribute' );\n\t\t\tif ( 'html_lang_attribute' === $output || preg_match( '/[^a-zA-Z0-9-]/', $output ) ) {\n\t\t\t\t$output = is_admin() ? get_user_locale() : get_locale();\n\t\t\t\t$output = str_replace( '_', '-', $output );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'text_direction':\n\t\t\t_deprecated_argument(\n\t\t\t\t__FUNCTION__, '2.2.0', sprintf(\n\t\t\t\t\t/* translators: 1: 'text_direction' argument, 2: bloginfo() function name, 3: is_rtl() function name */\n\t\t\t\t\t__( 'The %1$s option is deprecated for the family of %2$s functions. Use the %3$s function instead.' ),\n\t\t\t\t\t'<code>' . $show . '</code>',\n\t\t\t\t\t'<code>bloginfo()</code>',\n\t\t\t\t\t'<code>is_rtl()</code>'\n\t\t\t\t)\n\t\t\t);\n\t\t\tif ( function_exists( 'is_rtl' ) ) {\n\t\t\t\t$output = is_rtl() ? 'rtl' : 'ltr';\n\t\t\t} else {\n\t\t\t\t$output = 'ltr';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'name':\n\t\tdefault:\n\t\t\t$output = get_option( 'blogname' );\n\t\t\tbreak;\n\t}\n\n\t$url = true;\n\tif ( strpos( $show, 'url' ) === false &&\n\t\tstrpos( $show, 'directory' ) === false &&\n\t\tstrpos( $show, 'home' ) === false ) {\n\t\t$url = false;\n\t}\n\n\tif ( 'display' == $filter ) {\n\t\tif ( $url ) {\n\t\t\t/**\n\t\t\t * Filters the URL returned by get_bloginfo().\n\t\t\t *\n\t\t\t * @since 2.0.5\n\t\t\t *\n\t\t\t * @param mixed $output The URL returned by bloginfo().\n\t\t\t * @param mixed $show   Type of information requested.\n\t\t\t */\n\t\t\t$output = apply_filters( 'bloginfo_url', $output, $show );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Filters the site information returned by get_bloginfo().\n\t\t\t *\n\t\t\t * @since 0.71\n\t\t\t *\n\t\t\t * @param mixed $output The requested non-URL site information.\n\t\t\t * @param mixed $show   Type of information requested.\n\t\t\t */\n\t\t\t$output = apply_filters( 'bloginfo', $output, $show );\n\t\t}\n\t}\n\n\treturn $output;\n}\n\n/**\n * Returns the Site Icon URL.\n *\n * @since 4.3.0\n *\n * @param int    $size    Optional. Size of the site icon. Default 512 (pixels).\n * @param string $url     Optional. Fallback url if no site icon is found. Default empty.\n * @param int    $blog_id Optional. ID of the blog to get the site icon for. Default current blog.\n * @return string Site Icon URL.\n */\nfunction get_site_icon_url( $size = 512, $url = '', $blog_id = 0 ) {\n\t$switched_blog = false;\n\n\tif ( is_multisite() && ! empty( $blog_id ) && (int) $blog_id !== get_current_blog_id() ) {\n\t\tswitch_to_blog( $blog_id );\n\t\t$switched_blog = true;\n\t}\n\n\t$site_icon_id = get_option( 'site_icon' );\n\n\tif ( $site_icon_id ) {\n\t\tif ( $size >= 512 ) {\n\t\t\t$size_data = 'full';\n\t\t} else {\n\t\t\t$size_data = array( $size, $size );\n\t\t}\n\t\t$url = wp_get_attachment_image_url( $site_icon_id, $size_data );\n\t}\n\n\tif ( $switched_blog ) {\n\t\trestore_current_blog();\n\t}\n\n\t/**\n\t * Filters the site icon URL.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $url     Site icon URL.\n\t * @param int    $size    Size of the site icon.\n\t * @param int    $blog_id ID of the blog to get the site icon for.\n\t */\n\treturn apply_filters( 'get_site_icon_url', $url, $size, $blog_id );\n}\n\n/**\n * Displays the Site Icon URL.\n *\n * @since 4.3.0\n *\n * @param int    $size    Optional. Size of the site icon. Default 512 (pixels).\n * @param string $url     Optional. Fallback url if no site icon is found. Default empty.\n * @param int    $blog_id Optional. ID of the blog to get the site icon for. Default current blog.\n */\nfunction site_icon_url( $size = 512, $url = '', $blog_id = 0 ) {\n\techo esc_url( get_site_icon_url( $size, $url, $blog_id ) );\n}\n\n/**\n * Whether the site has a Site Icon.\n *\n * @since 4.3.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default current blog.\n * @return bool Whether the site has a site icon or not.\n */\nfunction has_site_icon( $blog_id = 0 ) {\n\treturn (bool) get_site_icon_url( 512, '', $blog_id );\n}\n\n/**\n * Determines whether the site has a custom logo.\n *\n * @since 4.5.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default is the ID of the current blog.\n * @return bool Whether the site has a custom logo or not.\n */\nfunction has_custom_logo( $blog_id = 0 ) {\n\t$switched_blog = false;\n\n\tif ( is_multisite() && ! empty( $blog_id ) && (int) $blog_id !== get_current_blog_id() ) {\n\t\tswitch_to_blog( $blog_id );\n\t\t$switched_blog = true;\n\t}\n\n\t$custom_logo_id = get_theme_mod( 'custom_logo' );\n\n\tif ( $switched_blog ) {\n\t\trestore_current_blog();\n\t}\n\n\treturn (bool) $custom_logo_id;\n}\n\n/**\n * Returns a custom logo, linked to home.\n *\n * @since 4.5.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default is the ID of the current blog.\n * @return string Custom logo markup.\n */\nfunction get_custom_logo( $blog_id = 0 ) {\n\t$html          = '';\n\t$switched_blog = false;\n\n\tif ( is_multisite() && ! empty( $blog_id ) && (int) $blog_id !== get_current_blog_id() ) {\n\t\tswitch_to_blog( $blog_id );\n\t\t$switched_blog = true;\n\t}\n\n\t$custom_logo_id = get_theme_mod( 'custom_logo' );\n\n\t// We have a logo. Logo is go.\n\tif ( $custom_logo_id ) {\n\t\t$custom_logo_attr = array(\n\t\t\t'class'    => 'custom-logo',\n\t\t\t'itemprop' => 'logo',\n\t\t);\n\n\t\t/*\n\t\t * If the logo alt attribute is empty, get the site title and explicitly\n\t\t * pass it to the attributes used by wp_get_attachment_image().\n\t\t */\n\t\t$image_alt = get_post_meta( $custom_logo_id, '_wp_attachment_image_alt', true );\n\t\tif ( empty( $image_alt ) ) {\n\t\t\t$custom_logo_attr['alt'] = get_bloginfo( 'name', 'display' );\n\t\t}\n\n\t\t/*\n\t\t * If the alt attribute is not empty, there's no need to explicitly pass\n\t\t * it because wp_get_attachment_image() already adds the alt attribute.\n\t\t */\n\t\t$html = sprintf(\n\t\t\t'<a href=\"%1$s\" class=\"custom-logo-link\" rel=\"home\" itemprop=\"url\">%2$s</a>',\n\t\t\tesc_url( home_url( '/' ) ),\n\t\t\twp_get_attachment_image( $custom_logo_id, 'full', false, $custom_logo_attr )\n\t\t);\n\t} // If no logo is set but we're in the Customizer, leave a placeholder (needed for the live preview).\n\telseif ( is_customize_preview() ) {\n\t\t$html = sprintf(\n\t\t\t'<a href=\"%1$s\" class=\"custom-logo-link\" style=\"display:none;\"><img class=\"custom-logo\"/></a>',\n\t\t\tesc_url( home_url( '/' ) )\n\t\t);\n\t}\n\n\tif ( $switched_blog ) {\n\t\trestore_current_blog();\n\t}\n\n\t/**\n\t * Filters the custom logo output.\n\t *\n\t * @since 4.5.0\n\t * @since 4.6.0 Added the `$blog_id` parameter.\n\t *\n\t * @param string $html    Custom logo HTML output.\n\t * @param int    $blog_id ID of the blog to get the custom logo for.\n\t */\n\treturn apply_filters( 'get_custom_logo', $html, $blog_id );\n}\n\n/**\n * Displays a custom logo, linked to home.\n *\n * @since 4.5.0\n *\n * @param int $blog_id Optional. ID of the blog in question. Default is the ID of the current blog.\n */\nfunction the_custom_logo( $blog_id = 0 ) {\n\techo get_custom_logo( $blog_id );\n}\n\n/**\n * Returns document title for the current page.\n *\n * @since 4.4.0\n *\n * @global int $page  Page number of a single post.\n * @global int $paged Page number of a list of posts.\n *\n * @return string Tag with the document title.\n */\nfunction wp_get_document_title() {\n\n\t/**\n\t * Filters the document title before it is generated.\n\t *\n\t * Passing a non-empty value will short-circuit wp_get_document_title(),\n\t * returning that value instead.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $title The document title. Default empty string.\n\t */\n\t$title = apply_filters( 'pre_get_document_title', '' );\n\tif ( ! empty( $title ) ) {\n\t\treturn $title;\n\t}\n\n\tglobal $page, $paged;\n\n\t$title = array(\n\t\t'title' => '',\n\t);\n\n\t// If it's a 404 page, use a \"Page not found\" title.\n\tif ( is_404() ) {\n\t\t$title['title'] = __( 'Page not found' );\n\n\t\t// If it's a search, use a dynamic search results title.\n\t} elseif ( is_search() ) {\n\t\t/* translators: %s: search phrase */\n\t\t$title['title'] = sprintf( __( 'Search Results for &#8220;%s&#8221;' ), get_search_query() );\n\n\t\t// If on the front page, use the site title.\n\t} elseif ( is_front_page() ) {\n\t\t$title['title'] = get_bloginfo( 'name', 'display' );\n\n\t\t// If on a post type archive, use the post type archive title.\n\t} elseif ( is_post_type_archive() ) {\n\t\t$title['title'] = post_type_archive_title( '', false );\n\n\t\t// If on a taxonomy archive, use the term title.\n\t} elseif ( is_tax() ) {\n\t\t$title['title'] = single_term_title( '', false );\n\n\t\t/*\n\t\t* If we're on the blog page that is not the homepage or\n\t\t* a single post of any post type, use the post title.\n\t\t*/\n\t} elseif ( is_home() || is_singular() ) {\n\t\t$title['title'] = single_post_title( '', false );\n\n\t\t// If on a category or tag archive, use the term title.\n\t} elseif ( is_category() || is_tag() ) {\n\t\t$title['title'] = single_term_title( '', false );\n\n\t\t// If on an author archive, use the author's display name.\n\t} elseif ( is_author() && $author = get_queried_object() ) {\n\t\t$title['title'] = $author->display_name;\n\n\t\t// If it's a date archive, use the date as the title.\n\t} elseif ( is_year() ) {\n\t\t$title['title'] = get_the_date( _x( 'Y', 'yearly archives date format' ) );\n\n\t} elseif ( is_month() ) {\n\t\t$title['title'] = get_the_date( _x( 'F Y', 'monthly archives date format' ) );\n\n\t} elseif ( is_day() ) {\n\t\t$title['title'] = get_the_date();\n\t}\n\n\t// Add a page number if necessary.\n\tif ( ( $paged >= 2 || $page >= 2 ) && ! is_404() ) {\n\t\t$title['page'] = sprintf( __( 'Page %s' ), max( $paged, $page ) );\n\t}\n\n\t// Append the description or site title to give context.\n\tif ( is_front_page() ) {\n\t\t$title['tagline'] = get_bloginfo( 'description', 'display' );\n\t} else {\n\t\t$title['site'] = get_bloginfo( 'name', 'display' );\n\t}\n\n\t/**\n\t * Filters the separator for the document title.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $sep Document title separator. Default '-'.\n\t */\n\t$sep = apply_filters( 'document_title_separator', '-' );\n\n\t/**\n\t * Filters the parts of the document title.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array $title {\n\t *     The document title parts.\n\t *\n\t *     @type string $title   Title of the viewed page.\n\t *     @type string $page    Optional. Page number if paginated.\n\t *     @type string $tagline Optional. Site description when on home page.\n\t *     @type string $site    Optional. Site title when not on home page.\n\t * }\n\t */\n\t$title = apply_filters( 'document_title_parts', $title );\n\n\t$title = implode( \" $sep \", array_filter( $title ) );\n\t$title = wptexturize( $title );\n\t$title = convert_chars( $title );\n\t$title = esc_html( $title );\n\t$title = capital_P_dangit( $title );\n\n\treturn $title;\n}\n\n/**\n * Displays title tag with content.\n *\n * @ignore\n * @since 4.1.0\n * @since 4.4.0 Improved title output replaced `wp_title()`.\n * @access private\n */\nfunction _wp_render_title_tag() {\n\tif ( ! current_theme_supports( 'title-tag' ) ) {\n\t\treturn;\n\t}\n\n\techo '<title>' . wp_get_document_title() . '</title>' . \"\\n\";\n}\n\n/**\n * Display or retrieve page title for all areas of blog.\n *\n * By default, the page title will display the separator before the page title,\n * so that the blog title will be before the page title. This is not good for\n * title display, since the blog title shows up on most tabs and not what is\n * important, which is the page that the user is looking at.\n *\n * There are also SEO benefits to having the blog title after or to the 'right'\n * of the page title. However, it is mostly common sense to have the blog title\n * to the right with most browsers supporting tabs. You can achieve this by\n * using the seplocation parameter and setting the value to 'right'. This change\n * was introduced around 2.5.0, in case backward compatibility of themes is\n * important.\n *\n * @since 1.0.0\n *\n * @global WP_Locale $wp_locale\n *\n * @param string $sep         Optional, default is '&raquo;'. How to separate the various items\n *                            within the page title.\n * @param bool   $display     Optional, default is true. Whether to display or retrieve title.\n * @param string $seplocation Optional. Direction to display title, 'right'.\n * @return string|null String on retrieve, null when displaying.\n */\nfunction wp_title( $sep = '&raquo;', $display = true, $seplocation = '' ) {\n\tglobal $wp_locale;\n\n\t$m        = get_query_var( 'm' );\n\t$year     = get_query_var( 'year' );\n\t$monthnum = get_query_var( 'monthnum' );\n\t$day      = get_query_var( 'day' );\n\t$search   = get_query_var( 's' );\n\t$title    = '';\n\n\t$t_sep = '%WP_TITLE_SEP%'; // Temporary separator, for accurate flipping, if necessary\n\n\t// If there is a post\n\tif ( is_single() || ( is_home() && ! is_front_page() ) || ( is_page() && ! is_front_page() ) ) {\n\t\t$title = single_post_title( '', false );\n\t}\n\n\t// If there's a post type archive\n\tif ( is_post_type_archive() ) {\n\t\t$post_type = get_query_var( 'post_type' );\n\t\tif ( is_array( $post_type ) ) {\n\t\t\t$post_type = reset( $post_type );\n\t\t}\n\t\t$post_type_object = get_post_type_object( $post_type );\n\t\tif ( ! $post_type_object->has_archive ) {\n\t\t\t$title = post_type_archive_title( '', false );\n\t\t}\n\t}\n\n\t// If there's a category or tag\n\tif ( is_category() || is_tag() ) {\n\t\t$title = single_term_title( '', false );\n\t}\n\n\t// If there's a taxonomy\n\tif ( is_tax() ) {\n\t\t$term = get_queried_object();\n\t\tif ( $term ) {\n\t\t\t$tax   = get_taxonomy( $term->taxonomy );\n\t\t\t$title = single_term_title( $tax->labels->name . $t_sep, false );\n\t\t}\n\t}\n\n\t// If there's an author\n\tif ( is_author() && ! is_post_type_archive() ) {\n\t\t$author = get_queried_object();\n\t\tif ( $author ) {\n\t\t\t$title = $author->display_name;\n\t\t}\n\t}\n\n\t// Post type archives with has_archive should override terms.\n\tif ( is_post_type_archive() && $post_type_object->has_archive ) {\n\t\t$title = post_type_archive_title( '', false );\n\t}\n\n\t// If there's a month\n\tif ( is_archive() && ! empty( $m ) ) {\n\t\t$my_year  = substr( $m, 0, 4 );\n\t\t$my_month = $wp_locale->get_month( substr( $m, 4, 2 ) );\n\t\t$my_day   = intval( substr( $m, 6, 2 ) );\n\t\t$title    = $my_year . ( $my_month ? $t_sep . $my_month : '' ) . ( $my_day ? $t_sep . $my_day : '' );\n\t}\n\n\t// If there's a year\n\tif ( is_archive() && ! empty( $year ) ) {\n\t\t$title = $year;\n\t\tif ( ! empty( $monthnum ) ) {\n\t\t\t$title .= $t_sep . $wp_locale->get_month( $monthnum );\n\t\t}\n\t\tif ( ! empty( $day ) ) {\n\t\t\t$title .= $t_sep . zeroise( $day, 2 );\n\t\t}\n\t}\n\n\t// If it's a search\n\tif ( is_search() ) {\n\t\t/* translators: 1: separator, 2: search phrase */\n\t\t$title = sprintf( __( 'Search Results %1$s %2$s' ), $t_sep, strip_tags( $search ) );\n\t}\n\n\t// If it's a 404 page\n\tif ( is_404() ) {\n\t\t$title = __( 'Page not found' );\n\t}\n\n\t$prefix = '';\n\tif ( ! empty( $title ) ) {\n\t\t$prefix = \" $sep \";\n\t}\n\n\t/**\n\t * Filters the parts of the page title.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param array $title_array Parts of the page title.\n\t */\n\t$title_array = apply_filters( 'wp_title_parts', explode( $t_sep, $title ) );\n\n\t// Determines position of the separator and direction of the breadcrumb\n\tif ( 'right' == $seplocation ) { // sep on right, so reverse the order\n\t\t$title_array = array_reverse( $title_array );\n\t\t$title       = implode( \" $sep \", $title_array ) . $prefix;\n\t} else {\n\t\t$title = $prefix . implode( \" $sep \", $title_array );\n\t}\n\n\t/**\n\t * Filters the text of the page title.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param string $title Page title.\n\t * @param string $sep Title separator.\n\t * @param string $seplocation Location of the separator (left or right).\n\t */\n\t$title = apply_filters( 'wp_title', $title, $sep, $seplocation );\n\n\t// Send it out\n\tif ( $display ) {\n\t\techo $title;\n\t} else {\n\t\treturn $title;\n\t}\n}\n\n/**\n * Display or retrieve page title for post.\n *\n * This is optimized for single.php template file for displaying the post title.\n *\n * It does not support placing the separator after the title, but by leaving the\n * prefix parameter empty, you can set the title separator manually. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 0.71\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n */\nfunction single_post_title( $prefix = '', $display = true ) {\n\t$_post = get_queried_object();\n\n\tif ( ! isset( $_post->post_title ) ) {\n\t\treturn;\n\t}\n\n\t/**\n\t * Filters the page title for a single post.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $_post_title The single post page title.\n\t * @param object $_post       The current queried object as returned by get_queried_object().\n\t */\n\t$title = apply_filters( 'single_post_title', $_post->post_title, $_post );\n\tif ( $display ) {\n\t\techo $prefix . $title;\n\t} else {\n\t\treturn $prefix . $title;\n\t}\n}\n\n/**\n * Display or retrieve title for a post type archive.\n *\n * This is optimized for archive.php and archive-{$post_type}.php template files\n * for displaying the title of the post type.\n *\n * @since 3.1.0\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving, null when displaying or failure.\n */\nfunction post_type_archive_title( $prefix = '', $display = true ) {\n\tif ( ! is_post_type_archive() ) {\n\t\treturn;\n\t}\n\n\t$post_type = get_query_var( 'post_type' );\n\tif ( is_array( $post_type ) ) {\n\t\t$post_type = reset( $post_type );\n\t}\n\n\t$post_type_obj = get_post_type_object( $post_type );\n\n\t/**\n\t * Filters the post type archive title.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param string $post_type_name Post type 'name' label.\n\t * @param string $post_type      Post type.\n\t */\n\t$title = apply_filters( 'post_type_archive_title', $post_type_obj->labels->name, $post_type );\n\n\tif ( $display ) {\n\t\techo $prefix . $title;\n\t} else {\n\t\treturn $prefix . $title;\n\t}\n}\n\n/**\n * Display or retrieve page title for category archive.\n *\n * Useful for category template files for displaying the category page title.\n * The prefix does not automatically place a space between the prefix, so if\n * there should be a space, the parameter value will need to have it at the end.\n *\n * @since 0.71\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n */\nfunction single_cat_title( $prefix = '', $display = true ) {\n\treturn single_term_title( $prefix, $display );\n}\n\n/**\n * Display or retrieve page title for tag post archive.\n *\n * Useful for tag template files for displaying the tag page title. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 2.3.0\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n */\nfunction single_tag_title( $prefix = '', $display = true ) {\n\treturn single_term_title( $prefix, $display );\n}\n\n/**\n * Display or retrieve page title for taxonomy term archive.\n *\n * Useful for taxonomy term template files for displaying the taxonomy term page title.\n * The prefix does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 3.1.0\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n */\nfunction single_term_title( $prefix = '', $display = true ) {\n\t$term = get_queried_object();\n\n\tif ( ! $term ) {\n\t\treturn;\n\t}\n\n\tif ( is_category() ) {\n\t\t/**\n\t\t * Filters the category archive page title.\n\t\t *\n\t\t * @since 2.0.10\n\t\t *\n\t\t * @param string $term_name Category name for archive being displayed.\n\t\t */\n\t\t$term_name = apply_filters( 'single_cat_title', $term->name );\n\t} elseif ( is_tag() ) {\n\t\t/**\n\t\t * Filters the tag archive page title.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param string $term_name Tag name for archive being displayed.\n\t\t */\n\t\t$term_name = apply_filters( 'single_tag_title', $term->name );\n\t} elseif ( is_tax() ) {\n\t\t/**\n\t\t * Filters the custom taxonomy archive page title.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param string $term_name Term name for archive being displayed.\n\t\t */\n\t\t$term_name = apply_filters( 'single_term_title', $term->name );\n\t} else {\n\t\treturn;\n\t}\n\n\tif ( empty( $term_name ) ) {\n\t\treturn;\n\t}\n\n\tif ( $display ) {\n\t\techo $prefix . $term_name;\n\t} else {\n\t\treturn $prefix . $term_name;\n\t}\n}\n\n/**\n * Display or retrieve page title for post archive based on date.\n *\n * Useful for when the template only needs to display the month and year,\n * if either are available. The prefix does not automatically place a space\n * between the prefix, so if there should be a space, the parameter value\n * will need to have it at the end.\n *\n * @since 0.71\n *\n * @global WP_Locale $wp_locale\n *\n * @param string $prefix  Optional. What to display before the title.\n * @param bool   $display Optional, default is true. Whether to display or retrieve title.\n * @return string|void Title when retrieving.\n */\nfunction single_month_title( $prefix = '', $display = true ) {\n\tglobal $wp_locale;\n\n\t$m        = get_query_var( 'm' );\n\t$year     = get_query_var( 'year' );\n\t$monthnum = get_query_var( 'monthnum' );\n\n\tif ( ! empty( $monthnum ) && ! empty( $year ) ) {\n\t\t$my_year  = $year;\n\t\t$my_month = $wp_locale->get_month( $monthnum );\n\t} elseif ( ! empty( $m ) ) {\n\t\t$my_year  = substr( $m, 0, 4 );\n\t\t$my_month = $wp_locale->get_month( substr( $m, 4, 2 ) );\n\t}\n\n\tif ( empty( $my_month ) ) {\n\t\treturn false;\n\t}\n\n\t$result = $prefix . $my_month . $prefix . $my_year;\n\n\tif ( ! $display ) {\n\t\treturn $result;\n\t}\n\techo $result;\n}\n\n/**\n * Display the archive title based on the queried object.\n *\n * @since 4.1.0\n *\n * @see get_the_archive_title()\n *\n * @param string $before Optional. Content to prepend to the title. Default empty.\n * @param string $after  Optional. Content to append to the title. Default empty.\n */\nfunction the_archive_title( $before = '', $after = '' ) {\n\t$title = get_the_archive_title();\n\n\tif ( ! empty( $title ) ) {\n\t\techo $before . $title . $after;\n\t}\n}\n\n/**\n * Retrieve the archive title based on the queried object.\n *\n * @since 4.1.0\n *\n * @return string Archive title.\n */\nfunction get_the_archive_title() {\n\tif ( is_category() ) {\n\t\t/* translators: Category archive title. %s: Category name */\n\t\t$title = sprintf( __( 'Category: %s' ), single_cat_title( '', false ) );\n\t} elseif ( is_tag() ) {\n\t\t/* translators: Tag archive title. %s: Tag name */\n\t\t$title = sprintf( __( 'Tag: %s' ), single_tag_title( '', false ) );\n\t} elseif ( is_author() ) {\n\t\t/* translators: Author archive title. %s: Author name */\n\t\t$title = sprintf( __( 'Author: %s' ), '<span class=\"vcard\">' . get_the_author() . '</span>' );\n\t} elseif ( is_year() ) {\n\t\t/* translators: Yearly archive title. %s: Year */\n\t\t$title = sprintf( __( 'Year: %s' ), get_the_date( _x( 'Y', 'yearly archives date format' ) ) );\n\t} elseif ( is_month() ) {\n\t\t/* translators: Monthly archive title. %s: Month name and year */\n\t\t$title = sprintf( __( 'Month: %s' ), get_the_date( _x( 'F Y', 'monthly archives date format' ) ) );\n\t} elseif ( is_day() ) {\n\t\t/* translators: Daily archive title. %s: Date */\n\t\t$title = sprintf( __( 'Day: %s' ), get_the_date( _x( 'F j, Y', 'daily archives date format' ) ) );\n\t} elseif ( is_tax( 'post_format' ) ) {\n\t\tif ( is_tax( 'post_format', 'post-format-aside' ) ) {\n\t\t\t$title = _x( 'Asides', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-gallery' ) ) {\n\t\t\t$title = _x( 'Galleries', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-image' ) ) {\n\t\t\t$title = _x( 'Images', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-video' ) ) {\n\t\t\t$title = _x( 'Videos', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-quote' ) ) {\n\t\t\t$title = _x( 'Quotes', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-link' ) ) {\n\t\t\t$title = _x( 'Links', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-status' ) ) {\n\t\t\t$title = _x( 'Statuses', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-audio' ) ) {\n\t\t\t$title = _x( 'Audio', 'post format archive title' );\n\t\t} elseif ( is_tax( 'post_format', 'post-format-chat' ) ) {\n\t\t\t$title = _x( 'Chats', 'post format archive title' );\n\t\t}\n\t} elseif ( is_post_type_archive() ) {\n\t\t/* translators: Post type archive title. %s: Post type name */\n\t\t$title = sprintf( __( 'Archives: %s' ), post_type_archive_title( '', false ) );\n\t} elseif ( is_tax() ) {\n\t\t$tax = get_taxonomy( get_queried_object()->taxonomy );\n\t\t/* translators: Taxonomy term archive title. 1: Taxonomy singular name, 2: Current taxonomy term */\n\t\t$title = sprintf( __( '%1$s: %2$s' ), $tax->labels->singular_name, single_term_title( '', false ) );\n\t} else {\n\t\t$title = __( 'Archives' );\n\t}\n\n\t/**\n\t * Filters the archive title.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param string $title Archive title to be displayed.\n\t */\n\treturn apply_filters( 'get_the_archive_title', $title );\n}\n\n/**\n * Display category, tag, term, or author description.\n *\n * @since 4.1.0\n *\n * @see get_the_archive_description()\n *\n * @param string $before Optional. Content to prepend to the description. Default empty.\n * @param string $after  Optional. Content to append to the description. Default empty.\n */\nfunction the_archive_description( $before = '', $after = '' ) {\n\t$description = get_the_archive_description();\n\tif ( $description ) {\n\t\techo $before . $description . $after;\n\t}\n}\n\n/**\n * Retrieves the description for an author, post type, or term archive.\n *\n * @since 4.1.0\n * @since 4.7.0 Added support for author archives.\n * @since 4.9.0 Added support for post type archives.\n *\n * @see term_description()\n *\n * @return string Archive description.\n */\nfunction get_the_archive_description() {\n\tif ( is_author() ) {\n\t\t$description = get_the_author_meta( 'description' );\n\t} elseif ( is_post_type_archive() ) {\n\t\t$description = get_the_post_type_description();\n\t} else {\n\t\t$description = term_description();\n\t}\n\n\t/**\n\t * Filters the archive description.\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param string $description Archive description to be displayed.\n\t */\n\treturn apply_filters( 'get_the_archive_description', $description );\n}\n\n/**\n * Retrieves the description for a post type archive.\n *\n * @since 4.9.0\n *\n * @return string The post type description.\n */\nfunction get_the_post_type_description() {\n\t$post_type = get_query_var( 'post_type' );\n\n\tif ( is_array( $post_type ) ) {\n\t\t$post_type = reset( $post_type );\n\t}\n\n\t$post_type_obj = get_post_type_object( $post_type );\n\n\t// Check if a description is set.\n\tif ( isset( $post_type_obj->description ) ) {\n\t\t$description = $post_type_obj->description;\n\t} else {\n\t\t$description = '';\n\t}\n\n\t/**\n\t * Filters the description for a post type archive.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param string       $description   The post type description.\n\t * @param WP_Post_Type $post_type_obj The post type object.\n\t */\n\treturn apply_filters( 'get_the_post_type_description', $description, $post_type_obj );\n}\n\n/**\n * Retrieve archive link content based on predefined or custom code.\n *\n * The format can be one of four styles. The 'link' for head element, 'option'\n * for use in the select element, 'html' for use in list (either ol or ul HTML\n * elements). Custom content is also supported using the before and after\n * parameters.\n *\n * The 'link' format uses the `<link>` HTML element with the **archives**\n * relationship. The before and after parameters are not used. The text\n * parameter is used to describe the link.\n *\n * The 'option' format uses the option HTML element for use in select element.\n * The value is the url parameter and the before and after parameters are used\n * between the text description.\n *\n * The 'html' format, which is the default, uses the li HTML element for use in\n * the list HTML elements. The before parameter is before the link and the after\n * parameter is after the closing link.\n *\n * The custom format uses the before parameter before the link ('a' HTML\n * element) and the after parameter after the closing link tag. If the above\n * three values for the format are not used, then custom format is assumed.\n *\n * @since 1.0.0\n *\n * @param string $url    URL to archive.\n * @param string $text   Archive text description.\n * @param string $format Optional, default is 'html'. Can be 'link', 'option', 'html', or custom.\n * @param string $before Optional. Content to prepend to the description. Default empty.\n * @param string $after  Optional. Content to append to the description. Default empty.\n * @return string HTML link content for archive.\n */\nfunction get_archives_link( $url, $text, $format = 'html', $before = '', $after = '' ) {\n\t$text = wptexturize( $text );\n\t$url  = esc_url( $url );\n\n\tif ( 'link' == $format ) {\n\t\t$link_html = \"\\t<link rel='archives' title='\" . esc_attr( $text ) . \"' href='$url' />\\n\";\n\t} elseif ( 'option' == $format ) {\n\t\t$link_html = \"\\t<option value='$url'>$before $text $after</option>\\n\";\n\t} elseif ( 'html' == $format ) {\n\t\t$link_html = \"\\t<li>$before<a href='$url'>$text</a>$after</li>\\n\";\n\t} else { // custom\n\t\t$link_html = \"\\t$before<a href='$url'>$text</a>$after\\n\";\n\t}\n\n\t/**\n\t * Filters the archive link content.\n\t *\n\t * @since 2.6.0\n\t * @since 4.5.0 Added the `$url`, `$text`, `$format`, `$before`, and `$after` parameters.\n\t *\n\t * @param string $link_html The archive HTML link content.\n\t * @param string $url       URL to archive.\n\t * @param string $text      Archive text description.\n\t * @param string $format    Link format. Can be 'link', 'option', 'html', or custom.\n\t * @param string $before    Content to prepend to the description.\n\t * @param string $after     Content to append to the description.\n\t */\n\treturn apply_filters( 'get_archives_link', $link_html, $url, $text, $format, $before, $after );\n}\n\n/**\n * Display archive links based on type and format.\n *\n * @since 1.2.0\n * @since 4.4.0 $post_type arg was added.\n *\n * @see get_archives_link()\n *\n * @global wpdb      $wpdb\n * @global WP_Locale $wp_locale\n *\n * @param string|array $args {\n *     Default archive links arguments. Optional.\n *\n *     @type string     $type            Type of archive to retrieve. Accepts 'daily', 'weekly', 'monthly',\n *                                       'yearly', 'postbypost', or 'alpha'. Both 'postbypost' and 'alpha'\n *                                       display the same archive link list as well as post titles instead\n *                                       of displaying dates. The difference between the two is that 'alpha'\n *                                       will order by post title and 'postbypost' will order by post date.\n *                                       Default 'monthly'.\n *     @type string|int $limit           Number of links to limit the query to. Default empty (no limit).\n *     @type string     $format          Format each link should take using the $before and $after args.\n *                                       Accepts 'link' (`<link>` tag), 'option' (`<option>` tag), 'html'\n *                                       (`<li>` tag), or a custom format, which generates a link anchor\n *                                       with $before preceding and $after succeeding. Default 'html'.\n *     @type string     $before          Markup to prepend to the beginning of each link. Default empty.\n *     @type string     $after           Markup to append to the end of each link. Default empty.\n *     @type bool       $show_post_count Whether to display the post count alongside the link. Default false.\n *     @type bool|int   $echo            Whether to echo or return the links list. Default 1|true to echo.\n *     @type string     $order           Whether to use ascending or descending order. Accepts 'ASC', or 'DESC'.\n *                                       Default 'DESC'.\n *     @type string     $post_type       Post type. Default 'post'.\n * }\n * @return string|void String when retrieving.\n */\nfunction wp_get_archives( $args = '' ) {\n\tglobal $wpdb, $wp_locale;\n\n\t$defaults = array(\n\t\t'type'            => 'monthly',\n\t\t'limit'           => '',\n\t\t'format'          => 'html',\n\t\t'before'          => '',\n\t\t'after'           => '',\n\t\t'show_post_count' => false,\n\t\t'echo'            => 1,\n\t\t'order'           => 'DESC',\n\t\t'post_type'       => 'post',\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$post_type_object = get_post_type_object( $r['post_type'] );\n\tif ( ! is_post_type_viewable( $post_type_object ) ) {\n\t\treturn;\n\t}\n\t$r['post_type'] = $post_type_object->name;\n\n\tif ( '' == $r['type'] ) {\n\t\t$r['type'] = 'monthly';\n\t}\n\n\tif ( ! empty( $r['limit'] ) ) {\n\t\t$r['limit'] = absint( $r['limit'] );\n\t\t$r['limit'] = ' LIMIT ' . $r['limit'];\n\t}\n\n\t$order = strtoupper( $r['order'] );\n\tif ( $order !== 'ASC' ) {\n\t\t$order = 'DESC';\n\t}\n\n\t// this is what will separate dates on weekly archive links\n\t$archive_week_separator = '&#8211;';\n\n\t$sql_where = $wpdb->prepare( \"WHERE post_type = %s AND post_status = 'publish'\", $r['post_type'] );\n\n\t/**\n\t * Filters the SQL WHERE clause for retrieving archives.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param string $sql_where Portion of SQL query containing the WHERE clause.\n\t * @param array  $r         An array of default arguments.\n\t */\n\t$where = apply_filters( 'getarchives_where', $sql_where, $r );\n\n\t/**\n\t * Filters the SQL JOIN clause for retrieving archives.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param string $sql_join Portion of SQL query containing JOIN clause.\n\t * @param array  $r        An array of default arguments.\n\t */\n\t$join = apply_filters( 'getarchives_join', '', $r );\n\n\t$output = '';\n\n\t$last_changed = wp_cache_get_last_changed( 'posts' );\n\n\t$limit = $r['limit'];\n\n\tif ( 'monthly' == $r['type'] ) {\n\t\t$query = \"SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date) ORDER BY post_date $order $limit\";\n\t\t$key   = md5( $query );\n\t\t$key   = \"wp_get_archives:$key:$last_changed\";\n\t\tif ( ! $results = wp_cache_get( $key, 'posts' ) ) {\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( $key, $results, 'posts' );\n\t\t}\n\t\tif ( $results ) {\n\t\t\t$after = $r['after'];\n\t\t\tforeach ( (array) $results as $result ) {\n\t\t\t\t$url = get_month_link( $result->year, $result->month );\n\t\t\t\tif ( 'post' !== $r['post_type'] ) {\n\t\t\t\t\t$url = add_query_arg( 'post_type', $r['post_type'], $url );\n\t\t\t\t}\n\t\t\t\t/* translators: 1: month name, 2: 4-digit year */\n\t\t\t\t$text = sprintf( __( '%1$s %2$d' ), $wp_locale->get_month( $result->month ), $result->year );\n\t\t\t\tif ( $r['show_post_count'] ) {\n\t\t\t\t\t$r['after'] = '&nbsp;(' . $result->posts . ')' . $after;\n\t\t\t\t}\n\t\t\t\t$output .= get_archives_link( $url, $text, $r['format'], $r['before'], $r['after'] );\n\t\t\t}\n\t\t}\n\t} elseif ( 'yearly' == $r['type'] ) {\n\t\t$query = \"SELECT YEAR(post_date) AS `year`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date) ORDER BY post_date $order $limit\";\n\t\t$key   = md5( $query );\n\t\t$key   = \"wp_get_archives:$key:$last_changed\";\n\t\tif ( ! $results = wp_cache_get( $key, 'posts' ) ) {\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( $key, $results, 'posts' );\n\t\t}\n\t\tif ( $results ) {\n\t\t\t$after = $r['after'];\n\t\t\tforeach ( (array) $results as $result ) {\n\t\t\t\t$url = get_year_link( $result->year );\n\t\t\t\tif ( 'post' !== $r['post_type'] ) {\n\t\t\t\t\t$url = add_query_arg( 'post_type', $r['post_type'], $url );\n\t\t\t\t}\n\t\t\t\t$text = sprintf( '%d', $result->year );\n\t\t\t\tif ( $r['show_post_count'] ) {\n\t\t\t\t\t$r['after'] = '&nbsp;(' . $result->posts . ')' . $after;\n\t\t\t\t}\n\t\t\t\t$output .= get_archives_link( $url, $text, $r['format'], $r['before'], $r['after'] );\n\t\t\t}\n\t\t}\n\t} elseif ( 'daily' == $r['type'] ) {\n\t\t$query = \"SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, DAYOFMONTH(post_date) AS `dayofmonth`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date), DAYOFMONTH(post_date) ORDER BY post_date $order $limit\";\n\t\t$key   = md5( $query );\n\t\t$key   = \"wp_get_archives:$key:$last_changed\";\n\t\tif ( ! $results = wp_cache_get( $key, 'posts' ) ) {\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( $key, $results, 'posts' );\n\t\t}\n\t\tif ( $results ) {\n\t\t\t$after = $r['after'];\n\t\t\tforeach ( (array) $results as $result ) {\n\t\t\t\t$url = get_day_link( $result->year, $result->month, $result->dayofmonth );\n\t\t\t\tif ( 'post' !== $r['post_type'] ) {\n\t\t\t\t\t$url = add_query_arg( 'post_type', $r['post_type'], $url );\n\t\t\t\t}\n\t\t\t\t$date = sprintf( '%1$d-%2$02d-%3$02d 00:00:00', $result->year, $result->month, $result->dayofmonth );\n\t\t\t\t$text = mysql2date( get_option( 'date_format' ), $date );\n\t\t\t\tif ( $r['show_post_count'] ) {\n\t\t\t\t\t$r['after'] = '&nbsp;(' . $result->posts . ')' . $after;\n\t\t\t\t}\n\t\t\t\t$output .= get_archives_link( $url, $text, $r['format'], $r['before'], $r['after'] );\n\t\t\t}\n\t\t}\n\t} elseif ( 'weekly' == $r['type'] ) {\n\t\t$week  = _wp_mysql_week( '`post_date`' );\n\t\t$query = \"SELECT DISTINCT $week AS `week`, YEAR( `post_date` ) AS `yr`, DATE_FORMAT( `post_date`, '%Y-%m-%d' ) AS `yyyymmdd`, count( `ID` ) AS `posts` FROM `$wpdb->posts` $join $where GROUP BY $week, YEAR( `post_date` ) ORDER BY `post_date` $order $limit\";\n\t\t$key   = md5( $query );\n\t\t$key   = \"wp_get_archives:$key:$last_changed\";\n\t\tif ( ! $results = wp_cache_get( $key, 'posts' ) ) {\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( $key, $results, 'posts' );\n\t\t}\n\t\t$arc_w_last = '';\n\t\tif ( $results ) {\n\t\t\t$after = $r['after'];\n\t\t\tforeach ( (array) $results as $result ) {\n\t\t\t\tif ( $result->week != $arc_w_last ) {\n\t\t\t\t\t$arc_year       = $result->yr;\n\t\t\t\t\t$arc_w_last     = $result->week;\n\t\t\t\t\t$arc_week       = get_weekstartend( $result->yyyymmdd, get_option( 'start_of_week' ) );\n\t\t\t\t\t$arc_week_start = date_i18n( get_option( 'date_format' ), $arc_week['start'] );\n\t\t\t\t\t$arc_week_end   = date_i18n( get_option( 'date_format' ), $arc_week['end'] );\n\t\t\t\t\t$url            = add_query_arg(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'm' => $arc_year,\n\t\t\t\t\t\t\t'w' => $result->week,\n\t\t\t\t\t\t), home_url( '/' )\n\t\t\t\t\t);\n\t\t\t\t\tif ( 'post' !== $r['post_type'] ) {\n\t\t\t\t\t\t$url = add_query_arg( 'post_type', $r['post_type'], $url );\n\t\t\t\t\t}\n\t\t\t\t\t$text = $arc_week_start . $archive_week_separator . $arc_week_end;\n\t\t\t\t\tif ( $r['show_post_count'] ) {\n\t\t\t\t\t\t$r['after'] = '&nbsp;(' . $result->posts . ')' . $after;\n\t\t\t\t\t}\n\t\t\t\t\t$output .= get_archives_link( $url, $text, $r['format'], $r['before'], $r['after'] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} elseif ( ( 'postbypost' == $r['type'] ) || ( 'alpha' == $r['type'] ) ) {\n\t\t$orderby = ( 'alpha' == $r['type'] ) ? 'post_title ASC ' : 'post_date DESC, ID DESC ';\n\t\t$query   = \"SELECT * FROM $wpdb->posts $join $where ORDER BY $orderby $limit\";\n\t\t$key     = md5( $query );\n\t\t$key     = \"wp_get_archives:$key:$last_changed\";\n\t\tif ( ! $results = wp_cache_get( $key, 'posts' ) ) {\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( $key, $results, 'posts' );\n\t\t}\n\t\tif ( $results ) {\n\t\t\tforeach ( (array) $results as $result ) {\n\t\t\t\tif ( $result->post_date != '0000-00-00 00:00:00' ) {\n\t\t\t\t\t$url = get_permalink( $result );\n\t\t\t\t\tif ( $result->post_title ) {\n\t\t\t\t\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t\t\t\t\t$text = strip_tags( apply_filters( 'the_title', $result->post_title, $result->ID ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$text = $result->ID;\n\t\t\t\t\t}\n\t\t\t\t\t$output .= get_archives_link( $url, $text, $r['format'], $r['before'], $r['after'] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ( $r['echo'] ) {\n\t\techo $output;\n\t} else {\n\t\treturn $output;\n\t}\n}\n\n/**\n * Get number of days since the start of the week.\n *\n * @since 1.5.0\n *\n * @param int $num Number of day.\n * @return float Days since the start of the week.\n */\nfunction calendar_week_mod( $num ) {\n\t$base = 7;\n\treturn ( $num - $base * floor( $num / $base ) );\n}\n\n/**\n * Display calendar with days that have posts as links.\n *\n * The calendar is cached, which will be retrieved, if it exists. If there are\n * no posts for the month, then it will not be displayed.\n *\n * @since 1.0.0\n *\n * @global wpdb      $wpdb\n * @global int       $m\n * @global int       $monthnum\n * @global int       $year\n * @global WP_Locale $wp_locale\n * @global array     $posts\n *\n * @param bool $initial Optional, default is true. Use initial calendar names.\n * @param bool $echo    Optional, default is true. Set to false for return.\n * @return string|void String when retrieving.\n */\nfunction get_calendar( $initial = true, $echo = true ) {\n\tglobal $wpdb, $m, $monthnum, $year, $wp_locale, $posts;\n\n\t$key   = md5( $m . $monthnum . $year );\n\t$cache = wp_cache_get( 'get_calendar', 'calendar' );\n\n\tif ( $cache && is_array( $cache ) && isset( $cache[ $key ] ) ) {\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\t$output = apply_filters( 'get_calendar', $cache[ $key ] );\n\n\t\tif ( $echo ) {\n\t\t\techo $output;\n\t\t\treturn;\n\t\t}\n\n\t\treturn $output;\n\t}\n\n\tif ( ! is_array( $cache ) ) {\n\t\t$cache = array();\n\t}\n\n\t// Quick check. If we have no posts at all, abort!\n\tif ( ! $posts ) {\n\t\t$gotsome = $wpdb->get_var( \"SELECT 1 as test FROM $wpdb->posts WHERE post_type = 'post' AND post_status = 'publish' LIMIT 1\" );\n\t\tif ( ! $gotsome ) {\n\t\t\t$cache[ $key ] = '';\n\t\t\twp_cache_set( 'get_calendar', $cache, 'calendar' );\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif ( isset( $_GET['w'] ) ) {\n\t\t$w = (int) $_GET['w'];\n\t}\n\t// week_begins = 0 stands for Sunday\n\t$week_begins = (int) get_option( 'start_of_week' );\n\t$ts          = current_time( 'timestamp' );\n\n\t// Let's figure out when we are\n\tif ( ! empty( $monthnum ) && ! empty( $year ) ) {\n\t\t$thismonth = zeroise( intval( $monthnum ), 2 );\n\t\t$thisyear  = (int) $year;\n\t} elseif ( ! empty( $w ) ) {\n\t\t// We need to get the month from MySQL\n\t\t$thisyear = (int) substr( $m, 0, 4 );\n\t\t//it seems MySQL's weeks disagree with PHP's\n\t\t$d         = ( ( $w - 1 ) * 7 ) + 6;\n\t\t$thismonth = $wpdb->get_var( \"SELECT DATE_FORMAT((DATE_ADD('{$thisyear}0101', INTERVAL $d DAY) ), '%m')\" );\n\t} elseif ( ! empty( $m ) ) {\n\t\t$thisyear = (int) substr( $m, 0, 4 );\n\t\tif ( strlen( $m ) < 6 ) {\n\t\t\t$thismonth = '01';\n\t\t} else {\n\t\t\t$thismonth = zeroise( (int) substr( $m, 4, 2 ), 2 );\n\t\t}\n\t} else {\n\t\t$thisyear  = gmdate( 'Y', $ts );\n\t\t$thismonth = gmdate( 'm', $ts );\n\t}\n\n\t$unixmonth = mktime( 0, 0, 0, $thismonth, 1, $thisyear );\n\t$last_day  = date( 't', $unixmonth );\n\n\t// Get the next and previous month and year with at least one post\n\t$previous = $wpdb->get_row(\n\t\t\"SELECT MONTH(post_date) AS month, YEAR(post_date) AS year\n\t\tFROM $wpdb->posts\n\t\tWHERE post_date < '$thisyear-$thismonth-01'\n\t\tAND post_type = 'post' AND post_status = 'publish'\n\t\t\tORDER BY post_date DESC\n\t\t\tLIMIT 1\"\n\t);\n\t$next     = $wpdb->get_row(\n\t\t\"SELECT MONTH(post_date) AS month, YEAR(post_date) AS year\n\t\tFROM $wpdb->posts\n\t\tWHERE post_date > '$thisyear-$thismonth-{$last_day} 23:59:59'\n\t\tAND post_type = 'post' AND post_status = 'publish'\n\t\t\tORDER BY post_date ASC\n\t\t\tLIMIT 1\"\n\t);\n\n\t/* translators: Calendar caption: 1: month name, 2: 4-digit year */\n\t$calendar_caption = _x( '%1$s %2$s', 'calendar caption' );\n\t$calendar_output  = '<table id=\"wp-calendar\">\n\t<caption>' . sprintf(\n\t\t$calendar_caption,\n\t\t$wp_locale->get_month( $thismonth ),\n\t\tdate( 'Y', $unixmonth )\n\t) . '</caption>\n\t<thead>\n\t<tr>';\n\n\t$myweek = array();\n\n\tfor ( $wdcount = 0; $wdcount <= 6; $wdcount++ ) {\n\t\t$myweek[] = $wp_locale->get_weekday( ( $wdcount + $week_begins ) % 7 );\n\t}\n\n\tforeach ( $myweek as $wd ) {\n\t\t$day_name         = $initial ? $wp_locale->get_weekday_initial( $wd ) : $wp_locale->get_weekday_abbrev( $wd );\n\t\t$wd               = esc_attr( $wd );\n\t\t$calendar_output .= \"\\n\\t\\t<th scope=\\\"col\\\" title=\\\"$wd\\\">$day_name</th>\";\n\t}\n\n\t$calendar_output .= '\n\t</tr>\n\t</thead>\n\n\t<tfoot>\n\t<tr>';\n\n\tif ( $previous ) {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td colspan=\"3\" id=\"prev\"><a href=\"' . get_month_link( $previous->year, $previous->month ) . '\">&laquo; ' .\n\t\t\t$wp_locale->get_month_abbrev( $wp_locale->get_month( $previous->month ) ) .\n\t\t'</a></td>';\n\t} else {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td colspan=\"3\" id=\"prev\" class=\"pad\">&nbsp;</td>';\n\t}\n\n\t$calendar_output .= \"\\n\\t\\t\" . '<td class=\"pad\">&nbsp;</td>';\n\n\tif ( $next ) {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td colspan=\"3\" id=\"next\"><a href=\"' . get_month_link( $next->year, $next->month ) . '\">' .\n\t\t\t$wp_locale->get_month_abbrev( $wp_locale->get_month( $next->month ) ) .\n\t\t' &raquo;</a></td>';\n\t} else {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td colspan=\"3\" id=\"next\" class=\"pad\">&nbsp;</td>';\n\t}\n\n\t$calendar_output .= '\n\t</tr>\n\t</tfoot>\n\n\t<tbody>\n\t<tr>';\n\n\t$daywithpost = array();\n\n\t// Get days with posts\n\t$dayswithposts = $wpdb->get_results(\n\t\t\"SELECT DISTINCT DAYOFMONTH(post_date)\n\t\tFROM $wpdb->posts WHERE post_date >= '{$thisyear}-{$thismonth}-01 00:00:00'\n\t\tAND post_type = 'post' AND post_status = 'publish'\n\t\tAND post_date <= '{$thisyear}-{$thismonth}-{$last_day} 23:59:59'\", ARRAY_N\n\t);\n\tif ( $dayswithposts ) {\n\t\tforeach ( (array) $dayswithposts as $daywith ) {\n\t\t\t$daywithpost[] = $daywith[0];\n\t\t}\n\t}\n\n\t// See how much we should pad in the beginning\n\t$pad = calendar_week_mod( date( 'w', $unixmonth ) - $week_begins );\n\tif ( 0 != $pad ) {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td colspan=\"' . esc_attr( $pad ) . '\" class=\"pad\">&nbsp;</td>';\n\t}\n\n\t$newrow      = false;\n\t$daysinmonth = (int) date( 't', $unixmonth );\n\n\tfor ( $day = 1; $day <= $daysinmonth; ++$day ) {\n\t\tif ( isset( $newrow ) && $newrow ) {\n\t\t\t$calendar_output .= \"\\n\\t</tr>\\n\\t<tr>\\n\\t\\t\";\n\t\t}\n\t\t$newrow = false;\n\n\t\tif ( $day == gmdate( 'j', $ts ) &&\n\t\t\t$thismonth == gmdate( 'm', $ts ) &&\n\t\t\t$thisyear == gmdate( 'Y', $ts ) ) {\n\t\t\t$calendar_output .= '<td id=\"today\">';\n\t\t} else {\n\t\t\t$calendar_output .= '<td>';\n\t\t}\n\n\t\tif ( in_array( $day, $daywithpost ) ) {\n\t\t\t// any posts today?\n\t\t\t$date_format = date( _x( 'F j, Y', 'daily archives date format' ), strtotime( \"{$thisyear}-{$thismonth}-{$day}\" ) );\n\t\t\t/* translators: Post calendar label. %s: Date */\n\t\t\t$label            = sprintf( __( 'Posts published on %s' ), $date_format );\n\t\t\t$calendar_output .= sprintf(\n\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">%s</a>',\n\t\t\t\tget_day_link( $thisyear, $thismonth, $day ),\n\t\t\t\tesc_attr( $label ),\n\t\t\t\t$day\n\t\t\t);\n\t\t} else {\n\t\t\t$calendar_output .= $day;\n\t\t}\n\t\t$calendar_output .= '</td>';\n\n\t\tif ( 6 == calendar_week_mod( date( 'w', mktime( 0, 0, 0, $thismonth, $day, $thisyear ) ) - $week_begins ) ) {\n\t\t\t$newrow = true;\n\t\t}\n\t}\n\n\t$pad = 7 - calendar_week_mod( date( 'w', mktime( 0, 0, 0, $thismonth, $day, $thisyear ) ) - $week_begins );\n\tif ( $pad != 0 && $pad != 7 ) {\n\t\t$calendar_output .= \"\\n\\t\\t\" . '<td class=\"pad\" colspan=\"' . esc_attr( $pad ) . '\">&nbsp;</td>';\n\t}\n\t$calendar_output .= \"\\n\\t</tr>\\n\\t</tbody>\\n\\t</table>\";\n\n\t$cache[ $key ] = $calendar_output;\n\twp_cache_set( 'get_calendar', $cache, 'calendar' );\n\n\tif ( $echo ) {\n\t\t/**\n\t\t * Filters the HTML calendar output.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string $calendar_output HTML output of the calendar.\n\t\t */\n\t\techo apply_filters( 'get_calendar', $calendar_output );\n\t\treturn;\n\t}\n\t/** This filter is documented in wp-includes/general-template.php */\n\treturn apply_filters( 'get_calendar', $calendar_output );\n}\n\n/**\n * Purge the cached results of get_calendar.\n *\n * @see get_calendar\n * @since 2.1.0\n */\nfunction delete_get_calendar_cache() {\n\twp_cache_delete( 'get_calendar', 'calendar' );\n}\n\n/**\n * Display all of the allowed tags in HTML format with attributes.\n *\n * This is useful for displaying in the comment area, which elements and\n * attributes are supported. As well as any plugins which want to display it.\n *\n * @since 1.0.1\n *\n * @global array $allowedtags\n *\n * @return string HTML allowed tags entity encoded.\n */\nfunction allowed_tags() {\n\tglobal $allowedtags;\n\t$allowed = '';\n\tforeach ( (array) $allowedtags as $tag => $attributes ) {\n\t\t$allowed .= '<' . $tag;\n\t\tif ( 0 < count( $attributes ) ) {\n\t\t\tforeach ( $attributes as $attribute => $limits ) {\n\t\t\t\t$allowed .= ' ' . $attribute . '=\"\"';\n\t\t\t}\n\t\t}\n\t\t$allowed .= '> ';\n\t}\n\treturn htmlentities( $allowed );\n}\n\n/***** Date/Time tags */\n\n/**\n * Outputs the date in iso8601 format for xml files.\n *\n * @since 1.0.0\n */\nfunction the_date_xml() {\n\techo mysql2date( 'Y-m-d', get_post()->post_date, false );\n}\n\n/**\n * Display or Retrieve the date the current post was written (once per date)\n *\n * Will only output the date if the current post's date is different from the\n * previous one output.\n *\n * i.e. Only one date listing will show per day worth of posts shown in the loop, even if the\n * function is called several times for each post.\n *\n * HTML output can be filtered with 'the_date'.\n * Date string output can be filtered with 'get_the_date'.\n *\n * @since 0.71\n *\n * @global string|int|bool $currentday\n * @global string|int|bool $previousday\n *\n * @param string $d      Optional. PHP date format defaults to the date_format option if not specified.\n * @param string $before Optional. Output before the date.\n * @param string $after  Optional. Output after the date.\n * @param bool   $echo   Optional, default is display. Whether to echo the date or return it.\n * @return string|void String if retrieving.\n */\nfunction the_date( $d = '', $before = '', $after = '', $echo = true ) {\n\tglobal $currentday, $previousday;\n\n\tif ( is_new_day() ) {\n\t\t$the_date    = $before . get_the_date( $d ) . $after;\n\t\t$previousday = $currentday;\n\n\t\t/**\n\t\t * Filters the date a post was published for display.\n\t\t *\n\t\t * @since 0.71\n\t\t *\n\t\t * @param string $the_date The formatted date string.\n\t\t * @param string $d        PHP date format. Defaults to 'date_format' option\n\t\t *                         if not specified.\n\t\t * @param string $before   HTML output before the date.\n\t\t * @param string $after    HTML output after the date.\n\t\t */\n\t\t$the_date = apply_filters( 'the_date', $the_date, $d, $before, $after );\n\n\t\tif ( $echo ) {\n\t\t\techo $the_date;\n\t\t} else {\n\t\t\treturn $the_date;\n\t\t}\n\t}\n}\n\n/**\n * Retrieve the date on which the post was written.\n *\n * Unlike the_date() this function will always return the date.\n * Modify output with the {@see 'get_the_date'} filter.\n *\n * @since 3.0.0\n *\n * @param  string      $d    Optional. PHP date format defaults to the date_format option if not specified.\n * @param  int|WP_Post $post Optional. Post ID or WP_Post object. Default current post.\n * @return false|string Date the current post was written. False on failure.\n */\nfunction get_the_date( $d = '', $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\tif ( '' == $d ) {\n\t\t$the_date = mysql2date( get_option( 'date_format' ), $post->post_date );\n\t} else {\n\t\t$the_date = mysql2date( $d, $post->post_date );\n\t}\n\n\t/**\n\t * Filters the date a post was published.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string      $the_date The formatted date.\n\t * @param string      $d        PHP date format. Defaults to 'date_format' option\n\t *                              if not specified.\n\t * @param int|WP_Post $post     The post object or ID.\n\t */\n\treturn apply_filters( 'get_the_date', $the_date, $d, $post );\n}\n\n/**\n * Display the date on which the post was last modified.\n *\n * @since 2.1.0\n *\n * @param string $d      Optional. PHP date format defaults to the date_format option if not specified.\n * @param string $before Optional. Output before the date.\n * @param string $after  Optional. Output after the date.\n * @param bool   $echo   Optional, default is display. Whether to echo the date or return it.\n * @return string|void String if retrieving.\n */\nfunction the_modified_date( $d = '', $before = '', $after = '', $echo = true ) {\n\t$the_modified_date = $before . get_the_modified_date( $d ) . $after;\n\n\t/**\n\t * Filters the date a post was last modified for display.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $the_modified_date The last modified date.\n\t * @param string $d                 PHP date format. Defaults to 'date_format' option\n\t *                                  if not specified.\n\t * @param string $before            HTML output before the date.\n\t * @param string $after             HTML output after the date.\n\t */\n\t$the_modified_date = apply_filters( 'the_modified_date', $the_modified_date, $d, $before, $after );\n\n\tif ( $echo ) {\n\t\techo $the_modified_date;\n\t} else {\n\t\treturn $the_modified_date;\n\t}\n\n}\n\n/**\n * Retrieve the date on which the post was last modified.\n *\n * @since 2.1.0\n * @since 4.6.0 Added the `$post` parameter.\n *\n * @param string      $d    Optional. PHP date format defaults to the date_format option if not specified.\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default current post.\n * @return false|string Date the current post was modified. False on failure.\n */\nfunction get_the_modified_date( $d = '', $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\t// For backward compatibility, failures go through the filter below.\n\t\t$the_time = false;\n\t} elseif ( empty( $d ) ) {\n\t\t$the_time = get_post_modified_time( get_option( 'date_format' ), false, $post, true );\n\t} else {\n\t\t$the_time = get_post_modified_time( $d, false, $post, true );\n\t}\n\n\t/**\n\t * Filters the date a post was last modified.\n\t *\n\t * @since 2.1.0\n\t * @since 4.6.0 Added the `$post` parameter.\n\t *\n\t * @param string|bool  $the_time The formatted date or false if no post is found.\n\t * @param string       $d        PHP date format. Defaults to value specified in\n\t *                               'date_format' option.\n\t * @param WP_Post|null $post     WP_Post object or null if no post is found.\n\t */\n\treturn apply_filters( 'get_the_modified_date', $the_time, $d, $post );\n}\n\n/**\n * Display the time at which the post was written.\n *\n * @since 0.71\n *\n * @param string $d Either 'G', 'U', or php date format.\n */\nfunction the_time( $d = '' ) {\n\t/**\n\t * Filters the time a post was written for display.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $get_the_time The formatted time.\n\t * @param string $d            The time format. Accepts 'G', 'U',\n\t *                             or php date format.\n\t */\n\techo apply_filters( 'the_time', get_the_time( $d ), $d );\n}\n\n/**\n * Retrieve the time at which the post was written.\n *\n * @since 1.5.0\n *\n * @param string      $d    Optional. Format to use for retrieving the time the post\n *                          was written. Either 'G', 'U', or php date format defaults\n *                          to the value specified in the time_format option. Default empty.\n * @param int|WP_Post $post WP_Post object or ID. Default is global $post object.\n * @return string|int|false Formatted date string or Unix timestamp if `$id` is 'U' or 'G'. False on failure.\n */\nfunction get_the_time( $d = '', $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\tif ( '' == $d ) {\n\t\t$the_time = get_post_time( get_option( 'time_format' ), false, $post, true );\n\t} else {\n\t\t$the_time = get_post_time( $d, false, $post, true );\n\t}\n\n\t/**\n\t * Filters the time a post was written.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param string      $the_time The formatted time.\n\t * @param string      $d        Format to use for retrieving the time the post was written.\n\t *                              Accepts 'G', 'U', or php date format value specified\n\t *                              in 'time_format' option. Default empty.\n\t * @param int|WP_Post $post     WP_Post object or ID.\n\t */\n\treturn apply_filters( 'get_the_time', $the_time, $d, $post );\n}\n\n/**\n * Retrieve the time at which the post was written.\n *\n * @since 2.0.0\n *\n * @param string      $d         Optional. Format to use for retrieving the time the post\n *                               was written. Either 'G', 'U', or php date format. Default 'U'.\n * @param bool        $gmt       Optional. Whether to retrieve the GMT time. Default false.\n * @param int|WP_Post $post      WP_Post object or ID. Default is global $post object.\n * @param bool        $translate Whether to translate the time string. Default false.\n * @return string|int|false Formatted date string or Unix timestamp if `$id` is 'U' or 'G'. False on failure.\n */\nfunction get_post_time( $d = 'U', $gmt = false, $post = null, $translate = false ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\tif ( $gmt ) {\n\t\t$time = $post->post_date_gmt;\n\t} else {\n\t\t$time = $post->post_date;\n\t}\n\n\t$time = mysql2date( $d, $time, $translate );\n\n\t/**\n\t * Filters the localized time a post was written.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param string $time The formatted time.\n\t * @param string $d    Format to use for retrieving the time the post was written.\n\t *                     Accepts 'G', 'U', or php date format. Default 'U'.\n\t * @param bool   $gmt  Whether to retrieve the GMT time. Default false.\n\t */\n\treturn apply_filters( 'get_post_time', $time, $d, $gmt );\n}\n\n/**\n * Display the time at which the post was last modified.\n *\n * @since 2.0.0\n *\n * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option.\n */\nfunction the_modified_time( $d = '' ) {\n\t/**\n\t * Filters the localized time a post was last modified, for display.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param string $get_the_modified_time The formatted time.\n\t * @param string $d                     The time format. Accepts 'G', 'U',\n\t *                                      or php date format. Defaults to value\n\t *                                      specified in 'time_format' option.\n\t */\n\techo apply_filters( 'the_modified_time', get_the_modified_time( $d ), $d );\n}\n\n/**\n * Retrieve the time at which the post was last modified.\n *\n * @since 2.0.0\n * @since 4.6.0 Added the `$post` parameter.\n *\n * @param string      $d     Optional. Format to use for retrieving the time the post\n *                           was modified. Either 'G', 'U', or php date format defaults\n *                           to the value specified in the time_format option. Default empty.\n * @param int|WP_Post $post  Optional. Post ID or WP_Post object. Default current post.\n * @return false|string Formatted date string or Unix timestamp. False on failure.\n */\nfunction get_the_modified_time( $d = '', $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\t// For backward compatibility, failures go through the filter below.\n\t\t$the_time = false;\n\t} elseif ( empty( $d ) ) {\n\t\t$the_time = get_post_modified_time( get_option( 'time_format' ), false, $post, true );\n\t} else {\n\t\t$the_time = get_post_modified_time( $d, false, $post, true );\n\t}\n\n\t/**\n\t * Filters the localized time a post was last modified.\n\t *\n\t * @since 2.0.0\n\t * @since 4.6.0 Added the `$post` parameter.\n\t *\n\t * @param string|bool  $the_time The formatted time or false if no post is found.\n\t * @param string       $d        Format to use for retrieving the time the post was\n\t *                               written. Accepts 'G', 'U', or php date format. Defaults\n\t *                               to value specified in 'time_format' option.\n\t * @param WP_Post|null $post     WP_Post object or null if no post is found.\n\t */\n\treturn apply_filters( 'get_the_modified_time', $the_time, $d, $post );\n}\n\n/**\n * Retrieve the time at which the post was last modified.\n *\n * @since 2.0.0\n *\n * @param string      $d         Optional. Format to use for retrieving the time the post\n *                               was modified. Either 'G', 'U', or php date format. Default 'U'.\n * @param bool        $gmt       Optional. Whether to retrieve the GMT time. Default false.\n * @param int|WP_Post $post      WP_Post object or ID. Default is global $post object.\n * @param bool        $translate Whether to translate the time string. Default false.\n * @return string|int|false Formatted date string or Unix timestamp if `$id` is 'U' or 'G'. False on failure.\n */\nfunction get_post_modified_time( $d = 'U', $gmt = false, $post = null, $translate = false ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\tif ( $gmt ) {\n\t\t$time = $post->post_modified_gmt;\n\t} else {\n\t\t$time = $post->post_modified;\n\t}\n\t$time = mysql2date( $d, $time, $translate );\n\n\t/**\n\t * Filters the localized time a post was last modified.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $time The formatted time.\n\t * @param string $d    The date format. Accepts 'G', 'U', or php date format. Default 'U'.\n\t * @param bool   $gmt  Whether to return the GMT time. Default false.\n\t */\n\treturn apply_filters( 'get_post_modified_time', $time, $d, $gmt );\n}\n\n/**\n * Display the weekday on which the post was written.\n *\n * @since 0.71\n *\n * @global WP_Locale $wp_locale\n */\nfunction the_weekday() {\n\tglobal $wp_locale;\n\t$the_weekday = $wp_locale->get_weekday( mysql2date( 'w', get_post()->post_date, false ) );\n\n\t/**\n\t * Filters the weekday on which the post was written, for display.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $the_weekday\n\t */\n\techo apply_filters( 'the_weekday', $the_weekday );\n}\n\n/**\n * Display the weekday on which the post was written.\n *\n * Will only output the weekday if the current post's weekday is different from\n * the previous one output.\n *\n * @since 0.71\n *\n * @global WP_Locale       $wp_locale\n * @global string|int|bool $currentday\n * @global string|int|bool $previousweekday\n *\n * @param string $before Optional Output before the date.\n * @param string $after Optional Output after the date.\n */\nfunction the_weekday_date( $before = '', $after = '' ) {\n\tglobal $wp_locale, $currentday, $previousweekday;\n\t$the_weekday_date = '';\n\tif ( $currentday != $previousweekday ) {\n\t\t$the_weekday_date .= $before;\n\t\t$the_weekday_date .= $wp_locale->get_weekday( mysql2date( 'w', get_post()->post_date, false ) );\n\t\t$the_weekday_date .= $after;\n\t\t$previousweekday   = $currentday;\n\t}\n\n\t/**\n\t * Filters the localized date on which the post was written, for display.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $the_weekday_date\n\t * @param string $before           The HTML to output before the date.\n\t * @param string $after            The HTML to output after the date.\n\t */\n\t$the_weekday_date = apply_filters( 'the_weekday_date', $the_weekday_date, $before, $after );\n\techo $the_weekday_date;\n}\n\n/**\n * Fire the wp_head action.\n *\n * See {@see 'wp_head'}.\n *\n * @since 1.2.0\n */\nfunction wp_head() {\n\t/**\n\t * Prints scripts or data in the head tag on the front end.\n\t *\n\t * @since 1.5.0\n\t */\n\tdo_action( 'wp_head' );\n}\n\n/**\n * Fire the wp_footer action.\n *\n * See {@see 'wp_footer'}.\n *\n * @since 1.5.1\n */\nfunction wp_footer() {\n\t/**\n\t * Prints scripts or data before the closing body tag on the front end.\n\t *\n\t * @since 1.5.1\n\t */\n\tdo_action( 'wp_footer' );\n}\n\n/**\n * Display the links to the general feeds.\n *\n * @since 2.8.0\n *\n * @param array $args Optional arguments.\n */\nfunction feed_links( $args = array() ) {\n\tif ( ! current_theme_supports( 'automatic-feed-links' ) ) {\n\t\treturn;\n\t}\n\n\t$defaults = array(\n\t\t/* translators: Separator between blog name and feed type in feed links */\n\t\t'separator' => _x( '&raquo;', 'feed link' ),\n\t\t/* translators: 1: blog title, 2: separator (raquo) */\n\t\t'feedtitle' => __( '%1$s %2$s Feed' ),\n\t\t/* translators: 1: blog title, 2: separator (raquo) */\n\t\t'comstitle' => __( '%1$s %2$s Comments Feed' ),\n\t);\n\n\t$args = wp_parse_args( $args, $defaults );\n\n\t/**\n\t * Filters whether to display the posts feed link.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param bool $show Whether to display the posts feed link. Default true.\n\t */\n\tif ( apply_filters( 'feed_links_show_posts_feed', true ) ) {\n\t\techo '<link rel=\"alternate\" type=\"' . feed_content_type() . '\" title=\"' . esc_attr( sprintf( $args['feedtitle'], get_bloginfo( 'name' ), $args['separator'] ) ) . '\" href=\"' . esc_url( get_feed_link() ) . \"\\\" />\\n\";\n\t}\n\n\t/**\n\t * Filters whether to display the comments feed link.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param bool $show Whether to display the comments feed link. Default true.\n\t */\n\tif ( apply_filters( 'feed_links_show_comments_feed', true ) ) {\n\t\techo '<link rel=\"alternate\" type=\"' . feed_content_type() . '\" title=\"' . esc_attr( sprintf( $args['comstitle'], get_bloginfo( 'name' ), $args['separator'] ) ) . '\" href=\"' . esc_url( get_feed_link( 'comments_' . get_default_feed() ) ) . \"\\\" />\\n\";\n\t}\n}\n\n/**\n * Display the links to the extra feeds such as category feeds.\n *\n * @since 2.8.0\n *\n * @param array $args Optional arguments.\n */\nfunction feed_links_extra( $args = array() ) {\n\t$defaults = array(\n\t\t/* translators: Separator between blog name and feed type in feed links */\n\t\t'separator'     => _x( '&raquo;', 'feed link' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: post title */\n\t\t'singletitle'   => __( '%1$s %2$s %3$s Comments Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: category name */\n\t\t'cattitle'      => __( '%1$s %2$s %3$s Category Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: tag name */\n\t\t'tagtitle'      => __( '%1$s %2$s %3$s Tag Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: term name, 4: taxonomy singular name */\n\t\t'taxtitle'      => __( '%1$s %2$s %3$s %4$s Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: author name  */\n\t\t'authortitle'   => __( '%1$s %2$s Posts by %3$s Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: search phrase */\n\t\t'searchtitle'   => __( '%1$s %2$s Search Results for &#8220;%3$s&#8221; Feed' ),\n\t\t/* translators: 1: blog name, 2: separator(raquo), 3: post type name */\n\t\t'posttypetitle' => __( '%1$s %2$s %3$s Feed' ),\n\t);\n\n\t$args = wp_parse_args( $args, $defaults );\n\n\tif ( is_singular() ) {\n\t\t$id   = 0;\n\t\t$post = get_post( $id );\n\n\t\tif ( comments_open() || pings_open() || $post->comment_count > 0 ) {\n\t\t\t$title = sprintf( $args['singletitle'], get_bloginfo( 'name' ), $args['separator'], the_title_attribute( array( 'echo' => false ) ) );\n\t\t\t$href  = get_post_comments_feed_link( $post->ID );\n\t\t}\n\t} elseif ( is_post_type_archive() ) {\n\t\t$post_type = get_query_var( 'post_type' );\n\t\tif ( is_array( $post_type ) ) {\n\t\t\t$post_type = reset( $post_type );\n\t\t}\n\n\t\t$post_type_obj = get_post_type_object( $post_type );\n\t\t$title         = sprintf( $args['posttypetitle'], get_bloginfo( 'name' ), $args['separator'], $post_type_obj->labels->name );\n\t\t$href          = get_post_type_archive_feed_link( $post_type_obj->name );\n\t} elseif ( is_category() ) {\n\t\t$term = get_queried_object();\n\n\t\tif ( $term ) {\n\t\t\t$title = sprintf( $args['cattitle'], get_bloginfo( 'name' ), $args['separator'], $term->name );\n\t\t\t$href  = get_category_feed_link( $term->term_id );\n\t\t}\n\t} elseif ( is_tag() ) {\n\t\t$term = get_queried_object();\n\n\t\tif ( $term ) {\n\t\t\t$title = sprintf( $args['tagtitle'], get_bloginfo( 'name' ), $args['separator'], $term->name );\n\t\t\t$href  = get_tag_feed_link( $term->term_id );\n\t\t}\n\t} elseif ( is_tax() ) {\n\t\t$term  = get_queried_object();\n\t\t$tax   = get_taxonomy( $term->taxonomy );\n\t\t$title = sprintf( $args['taxtitle'], get_bloginfo( 'name' ), $args['separator'], $term->name, $tax->labels->singular_name );\n\t\t$href  = get_term_feed_link( $term->term_id, $term->taxonomy );\n\t} elseif ( is_author() ) {\n\t\t$author_id = intval( get_query_var( 'author' ) );\n\n\t\t$title = sprintf( $args['authortitle'], get_bloginfo( 'name' ), $args['separator'], get_the_author_meta( 'display_name', $author_id ) );\n\t\t$href  = get_author_feed_link( $author_id );\n\t} elseif ( is_search() ) {\n\t\t$title = sprintf( $args['searchtitle'], get_bloginfo( 'name' ), $args['separator'], get_search_query( false ) );\n\t\t$href  = get_search_feed_link();\n\t} elseif ( is_post_type_archive() ) {\n\t\t$title         = sprintf( $args['posttypetitle'], get_bloginfo( 'name' ), $args['separator'], post_type_archive_title( '', false ) );\n\t\t$post_type_obj = get_queried_object();\n\t\tif ( $post_type_obj ) {\n\t\t\t$href = get_post_type_archive_feed_link( $post_type_obj->name );\n\t\t}\n\t}\n\n\tif ( isset( $title ) && isset( $href ) ) {\n\t\techo '<link rel=\"alternate\" type=\"' . feed_content_type() . '\" title=\"' . esc_attr( $title ) . '\" href=\"' . esc_url( $href ) . '\" />' . \"\\n\";\n\t}\n}\n\n/**\n * Display the link to the Really Simple Discovery service endpoint.\n *\n * @link http://archipelago.phrasewise.com/rsd\n * @since 2.0.0\n */\nfunction rsd_link() {\n\techo '<link rel=\"EditURI\" type=\"application/rsd+xml\" title=\"RSD\" href=\"' . esc_url( site_url( 'xmlrpc.php?rsd', 'rpc' ) ) . '\" />' . \"\\n\";\n}\n\n/**\n * Display the link to the Windows Live Writer manifest file.\n *\n * @link https://msdn.microsoft.com/en-us/library/bb463265.aspx\n * @since 2.3.1\n */\nfunction wlwmanifest_link() {\n\techo '<link rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\" href=\"',\n\t\tincludes_url( 'wlwmanifest.xml' ), '\" /> ', \"\\n\";\n}\n\n/**\n * Displays a noindex meta tag if required by the blog configuration.\n *\n * If a blog is marked as not being public then the noindex meta tag will be\n * output to tell web robots not to index the page content. Add this to the\n * {@see 'wp_head'} action.\n *\n * Typical usage is as a {@see 'wp_head'} callback:\n *\n *     add_action( 'wp_head', 'noindex' );\n *\n * @see wp_no_robots\n *\n * @since 2.1.0\n */\nfunction noindex() {\n\t// If the blog is not public, tell robots to go away.\n\tif ( '0' == get_option( 'blog_public' ) ) {\n\t\twp_no_robots();\n\t}\n}\n\n/**\n * Display a noindex meta tag.\n *\n * Outputs a noindex meta tag that tells web robots not to index the page content.\n * Typical usage is as a wp_head callback. add_action( 'wp_head', 'wp_no_robots' );\n *\n * @since 3.3.0\n */\nfunction wp_no_robots() {\n\techo \"<meta name='robots' content='noindex,follow' />\\n\";\n}\n\n/**\n * Display site icon meta tags.\n *\n * @since 4.3.0\n *\n * @link https://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#rel-icon HTML5 specification link icon.\n */\nfunction wp_site_icon() {\n\tif ( ! has_site_icon() && ! is_customize_preview() ) {\n\t\treturn;\n\t}\n\n\t$meta_tags = array();\n\t$icon_32   = get_site_icon_url( 32 );\n\tif ( empty( $icon_32 ) && is_customize_preview() ) {\n\t\t$icon_32 = '/favicon.ico'; // Serve default favicon URL in customizer so element can be updated for preview.\n\t}\n\tif ( $icon_32 ) {\n\t\t$meta_tags[] = sprintf( '<link rel=\"icon\" href=\"%s\" sizes=\"32x32\" />', esc_url( $icon_32 ) );\n\t}\n\t$icon_192 = get_site_icon_url( 192 );\n\tif ( $icon_192 ) {\n\t\t$meta_tags[] = sprintf( '<link rel=\"icon\" href=\"%s\" sizes=\"192x192\" />', esc_url( $icon_192 ) );\n\t}\n\t$icon_180 = get_site_icon_url( 180 );\n\tif ( $icon_180 ) {\n\t\t$meta_tags[] = sprintf( '<link rel=\"apple-touch-icon-precomposed\" href=\"%s\" />', esc_url( $icon_180 ) );\n\t}\n\t$icon_270 = get_site_icon_url( 270 );\n\tif ( $icon_270 ) {\n\t\t$meta_tags[] = sprintf( '<meta name=\"msapplication-TileImage\" content=\"%s\" />', esc_url( $icon_270 ) );\n\t}\n\n\t/**\n\t * Filters the site icon meta tags, so Plugins can add their own.\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param array $meta_tags Site Icon meta elements.\n\t */\n\t$meta_tags = apply_filters( 'site_icon_meta_tags', $meta_tags );\n\t$meta_tags = array_filter( $meta_tags );\n\n\tforeach ( $meta_tags as $meta_tag ) {\n\t\techo \"$meta_tag\\n\";\n\t}\n}\n\n/**\n * Prints resource hints to browsers for pre-fetching, pre-rendering\n * and pre-connecting to web sites.\n *\n * Gives hints to browsers to prefetch specific pages or render them\n * in the background, to perform DNS lookups or to begin the connection\n * handshake (DNS, TCP, TLS) in the background.\n *\n * These performance improving indicators work by using `<link rel\"\u2026\">`.\n *\n * @since 4.6.0\n */\nfunction wp_resource_hints() {\n\t$hints = array(\n\t\t'dns-prefetch' => wp_dependencies_unique_hosts(),\n\t\t'preconnect'   => array(),\n\t\t'prefetch'     => array(),\n\t\t'prerender'    => array(),\n\t);\n\n\t/*\n\t * Add DNS prefetch for the Emoji CDN.\n\t * The path is removed in the foreach loop below.\n\t */\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$hints['dns-prefetch'][] = apply_filters( 'emoji_svg_url', 'https://s.w.org/images/core/emoji/2.4/svg/' );\n\n\tforeach ( $hints as $relation_type => $urls ) {\n\t\t$unique_urls = array();\n\n\t\t/**\n\t\t * Filters domains and URLs for resource hints of relation type.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param array  $urls          URLs to print for resource hints.\n\t\t * @param string $relation_type The relation type the URLs are printed for, e.g. 'preconnect' or 'prerender'.\n\t\t */\n\t\t$urls = apply_filters( 'wp_resource_hints', $urls, $relation_type );\n\n\t\tforeach ( $urls as $key => $url ) {\n\t\t\t$atts = array();\n\n\t\t\tif ( is_array( $url ) ) {\n\t\t\t\tif ( isset( $url['href'] ) ) {\n\t\t\t\t\t$atts = $url;\n\t\t\t\t\t$url  = $url['href'];\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$url = esc_url( $url, array( 'http', 'https' ) );\n\n\t\t\tif ( ! $url ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( isset( $unique_urls[ $url ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( in_array( $relation_type, array( 'preconnect', 'dns-prefetch' ) ) ) {\n\t\t\t\t$parsed = wp_parse_url( $url );\n\n\t\t\t\tif ( empty( $parsed['host'] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( 'preconnect' === $relation_type && ! empty( $parsed['scheme'] ) ) {\n\t\t\t\t\t$url = $parsed['scheme'] . '://' . $parsed['host'];\n\t\t\t\t} else {\n\t\t\t\t\t// Use protocol-relative URLs for dns-prefetch or if scheme is missing.\n\t\t\t\t\t$url = '//' . $parsed['host'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$atts['rel']  = $relation_type;\n\t\t\t$atts['href'] = $url;\n\n\t\t\t$unique_urls[ $url ] = $atts;\n\t\t}\n\n\t\tforeach ( $unique_urls as $atts ) {\n\t\t\t$html = '';\n\n\t\t\tforeach ( $atts as $attr => $value ) {\n\t\t\t\tif ( ! is_scalar( $value ) ||\n\t\t\t\t\t( ! in_array( $attr, array( 'as', 'crossorigin', 'href', 'pr', 'rel', 'type' ), true ) && ! is_numeric( $attr ) ) ) {\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$value = ( 'href' === $attr ) ? esc_url( $value ) : esc_attr( $value );\n\n\t\t\t\tif ( ! is_string( $attr ) ) {\n\t\t\t\t\t$html .= \" $value\";\n\t\t\t\t} else {\n\t\t\t\t\t$html .= \" $attr='$value'\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$html = trim( $html );\n\n\t\t\techo \"<link $html />\\n\";\n\t\t}\n\t}\n}\n\n/**\n * Retrieves a list of unique hosts of all enqueued scripts and styles.\n *\n * @since 4.6.0\n *\n * @return array A list of unique hosts of enqueued scripts and styles.\n */\nfunction wp_dependencies_unique_hosts() {\n\tglobal $wp_scripts, $wp_styles;\n\n\t$unique_hosts = array();\n\n\tforeach ( array( $wp_scripts, $wp_styles ) as $dependencies ) {\n\t\tif ( $dependencies instanceof WP_Dependencies && ! empty( $dependencies->queue ) ) {\n\t\t\tforeach ( $dependencies->queue as $handle ) {\n\t\t\t\tif ( ! isset( $dependencies->registered[ $handle ] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t/* @var _WP_Dependency $dependency */\n\t\t\t\t$dependency = $dependencies->registered[ $handle ];\n\t\t\t\t$parsed     = wp_parse_url( $dependency->src );\n\n\t\t\t\tif ( ! empty( $parsed['host'] ) && ! in_array( $parsed['host'], $unique_hosts ) && $parsed['host'] !== $_SERVER['SERVER_NAME'] ) {\n\t\t\t\t\t$unique_hosts[] = $parsed['host'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $unique_hosts;\n}\n\n/**\n * Whether the user can access the visual editor.\n *\n * Checks if the user can access the visual editor and that it's supported by the user's browser.\n *\n * @since 2.0.0\n *\n * @global bool $wp_rich_edit Whether the user can access the visual editor.\n * @global bool $is_gecko     Whether the browser is Gecko-based.\n * @global bool $is_opera     Whether the browser is Opera.\n * @global bool $is_safari    Whether the browser is Safari.\n * @global bool $is_chrome    Whether the browser is Chrome.\n * @global bool $is_IE        Whether the browser is Internet Explorer.\n * @global bool $is_edge      Whether the browser is Microsoft Edge.\n *\n * @return bool True if the user can access the visual editor, false otherwise.\n */\nfunction user_can_richedit() {\n\tglobal $wp_rich_edit, $is_gecko, $is_opera, $is_safari, $is_chrome, $is_IE, $is_edge;\n\n\tif ( ! isset( $wp_rich_edit ) ) {\n\t\t$wp_rich_edit = false;\n\n\t\tif ( get_user_option( 'rich_editing' ) == 'true' || ! is_user_logged_in() ) { // default to 'true' for logged out users\n\t\t\tif ( $is_safari ) {\n\t\t\t\t$wp_rich_edit = ! wp_is_mobile() || ( preg_match( '!AppleWebKit/(\\d+)!', $_SERVER['HTTP_USER_AGENT'], $match ) && intval( $match[1] ) >= 534 );\n\t\t\t} elseif ( $is_IE ) {\n\t\t\t\t$wp_rich_edit = ( strpos( $_SERVER['HTTP_USER_AGENT'], 'Trident/7.0;' ) !== false );\n\t\t\t} elseif ( $is_gecko || $is_chrome || $is_edge || ( $is_opera && ! wp_is_mobile() ) ) {\n\t\t\t\t$wp_rich_edit = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Filters whether the user can access the visual editor.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param bool $wp_rich_edit Whether the user can access the visual editor.\n\t */\n\treturn apply_filters( 'user_can_richedit', $wp_rich_edit );\n}\n\n/**\n * Find out which editor should be displayed by default.\n *\n * Works out which of the two editors to display as the current editor for a\n * user. The 'html' setting is for the \"Text\" editor tab.\n *\n * @since 2.5.0\n *\n * @return string Either 'tinymce', or 'html', or 'test'\n */\nfunction wp_default_editor() {\n\t$r = user_can_richedit() ? 'tinymce' : 'html'; // defaults\n\tif ( wp_get_current_user() ) { // look for cookie\n\t\t$ed = get_user_setting( 'editor', 'tinymce' );\n\t\t$r  = ( in_array( $ed, array( 'tinymce', 'html', 'test' ) ) ) ? $ed : $r;\n\t}\n\n\t/**\n\t * Filters which editor should be displayed by default.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $r Which editor should be displayed by default. Either 'tinymce', 'html', or 'test'.\n\t */\n\treturn apply_filters( 'wp_default_editor', $r );\n}\n\n/**\n * Renders an editor.\n *\n * Using this function is the proper way to output all needed components for both TinyMCE and Quicktags.\n * _WP_Editors should not be used directly. See https://core.trac.wordpress.org/ticket/17144.\n *\n * NOTE: Once initialized the TinyMCE editor cannot be safely moved in the DOM. For that reason\n * running wp_editor() inside of a meta box is not a good idea unless only Quicktags is used.\n * On the post edit screen several actions can be used to include additional editors\n * containing TinyMCE: 'edit_page_form', 'edit_form_advanced' and 'dbx_post_sidebar'.\n * See https://core.trac.wordpress.org/ticket/19173 for more information.\n *\n * @see _WP_Editors::editor()\n * @since 3.3.0\n *\n * @param string $content   Initial content for the editor.\n * @param string $editor_id HTML ID attribute value for the textarea and TinyMCE. Can only be /[a-z]+/.\n * @param array  $settings  See _WP_Editors::editor().\n */\nfunction wp_editor( $content, $editor_id, $settings = array() ) {\n\tif ( ! class_exists( '_WP_Editors', false ) ) {\n\t\trequire( ABSPATH . WPINC . '/class-wp-editor.php' );\n\t}\n\t_WP_Editors::editor( $content, $editor_id, $settings );\n}\n\n/**\n * Outputs the editor scripts, stylesheets, and default settings.\n *\n * The editor can be initialized when needed after page load.\n * See wp.editor.initialize() in wp-admin/js/editor.js for initialization options.\n *\n * @uses _WP_Editors\n * @since 4.8.0\n */\nfunction wp_enqueue_editor() {\n\tif ( ! class_exists( '_WP_Editors', false ) ) {\n\t\trequire( ABSPATH . WPINC . '/class-wp-editor.php' );\n\t}\n\n\t_WP_Editors::enqueue_default_editor();\n}\n\n/**\n * Enqueue assets needed by the code editor for the given settings.\n *\n * @since 4.9.0\n *\n * @see wp_enqueue_editor()\n * @see _WP_Editors::parse_settings()\n * @param array $args {\n *     Args.\n *\n *     @type string   $type       The MIME type of the file to be edited.\n *     @type string   $file       Filename to be edited. Extension is used to sniff the type. Can be supplied as alternative to `$type` param.\n *     @type WP_Theme $theme      Theme being edited when on theme editor.\n *     @type string   $plugin     Plugin being edited when on plugin editor.\n *     @type array    $codemirror Additional CodeMirror setting overrides.\n *     @type array    $csslint    CSSLint rule overrides.\n *     @type array    $jshint     JSHint rule overrides.\n *     @type array    $htmlhint   JSHint rule overrides.\n * }\n * @returns array|false Settings for the enqueued code editor, or false if the editor was not enqueued .\n */\nfunction wp_enqueue_code_editor( $args ) {\n\tif ( is_user_logged_in() && 'false' === wp_get_current_user()->syntax_highlighting ) {\n\t\treturn false;\n\t}\n\n\t$settings = array(\n\t\t'codemirror' => array(\n\t\t\t'indentUnit'       => 4,\n\t\t\t'indentWithTabs'   => true,\n\t\t\t'inputStyle'       => 'contenteditable',\n\t\t\t'lineNumbers'      => true,\n\t\t\t'lineWrapping'     => true,\n\t\t\t'styleActiveLine'  => true,\n\t\t\t'continueComments' => true,\n\t\t\t'extraKeys'        => array(\n\t\t\t\t'Ctrl-Space' => 'autocomplete',\n\t\t\t\t'Ctrl-/'     => 'toggleComment',\n\t\t\t\t'Cmd-/'      => 'toggleComment',\n\t\t\t\t'Alt-F'      => 'findPersistent',\n\t\t\t\t'Ctrl-F'     => 'findPersistent',\n\t\t\t\t'Cmd-F'      => 'findPersistent',\n\t\t\t),\n\t\t\t'direction'        => 'ltr', // Code is shown in LTR even in RTL languages.\n\t\t\t'gutters'          => array(),\n\t\t),\n\t\t'csslint'    => array(\n\t\t\t'errors'                    => true, // Parsing errors.\n\t\t\t'box-model'                 => true,\n\t\t\t'display-property-grouping' => true,\n\t\t\t'duplicate-properties'      => true,\n\t\t\t'known-properties'          => true,\n\t\t\t'outline-none'              => true,\n\t\t),\n\t\t'jshint'     => array(\n\t\t\t// The following are copied from <https://github.com/WordPress/wordpress-develop/blob/4.8.1/.jshintrc>.\n\t\t\t'boss'     => true,\n\t\t\t'curly'    => true,\n\t\t\t'eqeqeq'   => true,\n\t\t\t'eqnull'   => true,\n\t\t\t'es3'      => true,\n\t\t\t'expr'     => true,\n\t\t\t'immed'    => true,\n\t\t\t'noarg'    => true,\n\t\t\t'nonbsp'   => true,\n\t\t\t'onevar'   => true,\n\t\t\t'quotmark' => 'single',\n\t\t\t'trailing' => true,\n\t\t\t'undef'    => true,\n\t\t\t'unused'   => true,\n\n\t\t\t'browser'  => true,\n\n\t\t\t'globals'  => array(\n\t\t\t\t'_'        => false,\n\t\t\t\t'Backbone' => false,\n\t\t\t\t'jQuery'   => false,\n\t\t\t\t'JSON'     => false,\n\t\t\t\t'wp'       => false,\n\t\t\t),\n\t\t),\n\t\t'htmlhint'   => array(\n\t\t\t'tagname-lowercase'        => true,\n\t\t\t'attr-lowercase'           => true,\n\t\t\t'attr-value-double-quotes' => false,\n\t\t\t'doctype-first'            => false,\n\t\t\t'tag-pair'                 => true,\n\t\t\t'spec-char-escape'         => true,\n\t\t\t'id-unique'                => true,\n\t\t\t'src-not-empty'            => true,\n\t\t\t'attr-no-duplication'      => true,\n\t\t\t'alt-require'              => true,\n\t\t\t'space-tab-mixed-disabled' => 'tab',\n\t\t\t'attr-unsafe-chars'        => true,\n\t\t),\n\t);\n\n\t$type = '';\n\tif ( isset( $args['type'] ) ) {\n\t\t$type = $args['type'];\n\n\t\t// Remap MIME types to ones that CodeMirror modes will recognize.\n\t\tif ( 'application/x-patch' === $type || 'text/x-patch' === $type ) {\n\t\t\t$type = 'text/x-diff';\n\t\t}\n\t} elseif ( isset( $args['file'] ) && false !== strpos( basename( $args['file'] ), '.' ) ) {\n\t\t$extension = strtolower( pathinfo( $args['file'], PATHINFO_EXTENSION ) );\n\t\tforeach ( wp_get_mime_types() as $exts => $mime ) {\n\t\t\tif ( preg_match( '!^(' . $exts . ')$!i', $extension ) ) {\n\t\t\t\t$type = $mime;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Supply any types that are not matched by wp_get_mime_types().\n\t\tif ( empty( $type ) ) {\n\t\t\tswitch ( $extension ) {\n\t\t\t\tcase 'conf':\n\t\t\t\t\t$type = 'text/nginx';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'css':\n\t\t\t\t\t$type = 'text/css';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'diff':\n\t\t\t\tcase 'patch':\n\t\t\t\t\t$type = 'text/x-diff';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'html':\n\t\t\t\tcase 'htm':\n\t\t\t\t\t$type = 'text/html';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'http':\n\t\t\t\t\t$type = 'message/http';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'js':\n\t\t\t\t\t$type = 'text/javascript';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'json':\n\t\t\t\t\t$type = 'application/json';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'jsx':\n\t\t\t\t\t$type = 'text/jsx';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'less':\n\t\t\t\t\t$type = 'text/x-less';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'md':\n\t\t\t\t\t$type = 'text/x-gfm';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'php':\n\t\t\t\tcase 'phtml':\n\t\t\t\tcase 'php3':\n\t\t\t\tcase 'php4':\n\t\t\t\tcase 'php5':\n\t\t\t\tcase 'php7':\n\t\t\t\tcase 'phps':\n\t\t\t\t\t$type = 'application/x-httpd-php';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'scss':\n\t\t\t\t\t$type = 'text/x-scss';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'sass':\n\t\t\t\t\t$type = 'text/x-sass';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'sh':\n\t\t\t\tcase 'bash':\n\t\t\t\t\t$type = 'text/x-sh';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'sql':\n\t\t\t\t\t$type = 'text/x-sql';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'svg':\n\t\t\t\t\t$type = 'application/svg+xml';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'xml':\n\t\t\t\t\t$type = 'text/xml';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'yml':\n\t\t\t\tcase 'yaml':\n\t\t\t\t\t$type = 'text/x-yaml';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'txt':\n\t\t\t\tdefault:\n\t\t\t\t\t$type = 'text/plain';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( 'text/css' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'css',\n\t\t\t\t'lint'              => true,\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/x-scss' === $type || 'text/x-less' === $type || 'text/x-sass' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => $type,\n\t\t\t\t'lint'              => false,\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/x-diff' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode' => 'diff',\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/html' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'htmlmixed',\n\t\t\t\t'lint'              => true,\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'autoCloseTags'     => true,\n\t\t\t\t'matchTags'         => array(\n\t\t\t\t\t'bothTags' => true,\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\n\t\tif ( ! current_user_can( 'unfiltered_html' ) ) {\n\t\t\t$settings['htmlhint']['kses'] = wp_kses_allowed_html( 'post' );\n\t\t}\n\t} elseif ( 'text/x-gfm' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'                => 'gfm',\n\t\t\t\t'highlightFormatting' => true,\n\t\t\t)\n\t\t);\n\t} elseif ( 'application/javascript' === $type || 'text/javascript' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'javascript',\n\t\t\t\t'lint'              => true,\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t} elseif ( false !== strpos( $type, 'json' ) ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => array(\n\t\t\t\t\t'name' => 'javascript',\n\t\t\t\t),\n\t\t\t\t'lint'              => true,\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t\tif ( 'application/ld+json' === $type ) {\n\t\t\t$settings['codemirror']['mode']['jsonld'] = true;\n\t\t} else {\n\t\t\t$settings['codemirror']['mode']['json'] = true;\n\t\t}\n\t} elseif ( false !== strpos( $type, 'jsx' ) ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'jsx',\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/x-markdown' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'                => 'markdown',\n\t\t\t\t'highlightFormatting' => true,\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/nginx' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode' => 'nginx',\n\t\t\t)\n\t\t);\n\t} elseif ( 'application/x-httpd-php' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'php',\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'autoCloseTags'     => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t\t'matchTags'         => array(\n\t\t\t\t\t'bothTags' => true,\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/x-sql' === $type || 'text/x-mysql' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'sql',\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'matchBrackets'     => true,\n\t\t\t)\n\t\t);\n\t} elseif ( false !== strpos( $type, 'xml' ) ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode'              => 'xml',\n\t\t\t\t'autoCloseBrackets' => true,\n\t\t\t\t'autoCloseTags'     => true,\n\t\t\t\t'matchTags'         => array(\n\t\t\t\t\t'bothTags' => true,\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t} elseif ( 'text/x-yaml' === $type ) {\n\t\t$settings['codemirror'] = array_merge(\n\t\t\t$settings['codemirror'], array(\n\t\t\t\t'mode' => 'yaml',\n\t\t\t)\n\t\t);\n\t} else {\n\t\t$settings['codemirror']['mode'] = $type;\n\t}\n\n\tif ( ! empty( $settings['codemirror']['lint'] ) ) {\n\t\t$settings['codemirror']['gutters'][] = 'CodeMirror-lint-markers';\n\t}\n\n\t// Let settings supplied via args override any defaults.\n\tforeach ( wp_array_slice_assoc( $args, array( 'codemirror', 'csslint', 'jshint', 'htmlhint' ) ) as $key => $value ) {\n\t\t$settings[ $key ] = array_merge(\n\t\t\t$settings[ $key ],\n\t\t\t$value\n\t\t);\n\t}\n\n\t/**\n\t * Filters settings that are passed into the code editor.\n\t *\n\t * Returning a falsey value will disable the syntax-highlighting code editor.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param array $settings The array of settings passed to the code editor. A falsey value disables the editor.\n\t * @param array $args {\n\t *     Args passed when calling `wp_enqueue_code_editor()`.\n\t *\n\t *     @type string   $type       The MIME type of the file to be edited.\n\t *     @type string   $file       Filename being edited.\n\t *     @type WP_Theme $theme      Theme being edited when on theme editor.\n\t *     @type string   $plugin     Plugin being edited when on plugin editor.\n\t *     @type array    $codemirror Additional CodeMirror setting overrides.\n\t *     @type array    $csslint    CSSLint rule overrides.\n\t *     @type array    $jshint     JSHint rule overrides.\n\t *     @type array    $htmlhint   JSHint rule overrides.\n\t * }\n\t */\n\t$settings = apply_filters( 'wp_code_editor_settings', $settings, $args );\n\n\tif ( empty( $settings ) || empty( $settings['codemirror'] ) ) {\n\t\treturn false;\n\t}\n\n\twp_enqueue_script( 'code-editor' );\n\twp_enqueue_style( 'code-editor' );\n\n\tif ( isset( $settings['codemirror']['mode'] ) ) {\n\t\t$mode = $settings['codemirror']['mode'];\n\t\tif ( is_string( $mode ) ) {\n\t\t\t$mode = array(\n\t\t\t\t'name' => $mode,\n\t\t\t);\n\t\t}\n\n\t\tif ( ! empty( $settings['codemirror']['lint'] ) ) {\n\t\t\tswitch ( $mode['name'] ) {\n\t\t\t\tcase 'css':\n\t\t\t\tcase 'text/css':\n\t\t\t\tcase 'text/x-scss':\n\t\t\t\tcase 'text/x-less':\n\t\t\t\t\twp_enqueue_script( 'csslint' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'htmlmixed':\n\t\t\t\tcase 'text/html':\n\t\t\t\tcase 'php':\n\t\t\t\tcase 'application/x-httpd-php':\n\t\t\t\tcase 'text/x-php':\n\t\t\t\t\twp_enqueue_script( 'htmlhint' );\n\t\t\t\t\twp_enqueue_script( 'csslint' );\n\t\t\t\t\twp_enqueue_script( 'jshint' );\n\t\t\t\t\tif ( ! current_user_can( 'unfiltered_html' ) ) {\n\t\t\t\t\t\twp_enqueue_script( 'htmlhint-kses' );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'javascript':\n\t\t\t\tcase 'application/ecmascript':\n\t\t\t\tcase 'application/json':\n\t\t\t\tcase 'application/javascript':\n\t\t\t\tcase 'application/ld+json':\n\t\t\t\tcase 'text/typescript':\n\t\t\t\tcase 'application/typescript':\n\t\t\t\t\twp_enqueue_script( 'jshint' );\n\t\t\t\t\twp_enqueue_script( 'jsonlint' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\twp_add_inline_script( 'code-editor', sprintf( 'jQuery.extend( wp.codeEditor.defaultSettings, %s );', wp_json_encode( $settings ) ) );\n\n\t/**\n\t * Fires when scripts and styles are enqueued for the code editor.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param array $settings Settings for the enqueued code editor.\n\t */\n\tdo_action( 'wp_enqueue_code_editor', $settings );\n\n\treturn $settings;\n}\n\n/**\n * Retrieves the contents of the search WordPress query variable.\n *\n * The search query string is passed through esc_attr() to ensure that it is safe\n * for placing in an html attribute.\n *\n * @since 2.3.0\n *\n * @param bool $escaped Whether the result is escaped. Default true.\n *                      Only use when you are later escaping it. Do not use unescaped.\n * @return string\n */\nfunction get_search_query( $escaped = true ) {\n\t/**\n\t * Filters the contents of the search query variable.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param mixed $search Contents of the search query variable.\n\t */\n\t$query = apply_filters( 'get_search_query', get_query_var( 's' ) );\n\n\tif ( $escaped ) {\n\t\t$query = esc_attr( $query );\n\t}\n\treturn $query;\n}\n\n/**\n * Displays the contents of the search query variable.\n *\n * The search query string is passed through esc_attr() to ensure that it is safe\n * for placing in an html attribute.\n *\n * @since 2.1.0\n */\nfunction the_search_query() {\n\t/**\n\t * Filters the contents of the search query variable for display.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param mixed $search Contents of the search query variable.\n\t */\n\techo esc_attr( apply_filters( 'the_search_query', get_search_query( false ) ) );\n}\n\n/**\n * Gets the language attributes for the html tag.\n *\n * Builds up a set of html attributes containing the text direction and language\n * information for the page.\n *\n * @since 4.3.0\n *\n * @param string $doctype Optional. The type of html document. Accepts 'xhtml' or 'html'. Default 'html'.\n */\nfunction get_language_attributes( $doctype = 'html' ) {\n\t$attributes = array();\n\n\tif ( function_exists( 'is_rtl' ) && is_rtl() ) {\n\t\t$attributes[] = 'dir=\"rtl\"';\n\t}\n\n\tif ( $lang = get_bloginfo( 'language' ) ) {\n\t\tif ( get_option( 'html_type' ) == 'text/html' || $doctype == 'html' ) {\n\t\t\t$attributes[] = 'lang=\"' . esc_attr( $lang ) . '\"';\n\t\t}\n\n\t\tif ( get_option( 'html_type' ) != 'text/html' || $doctype == 'xhtml' ) {\n\t\t\t$attributes[] = 'xml:lang=\"' . esc_attr( $lang ) . '\"';\n\t\t}\n\t}\n\n\t$output = implode( ' ', $attributes );\n\n\t/**\n\t * Filters the language attributes for display in the html tag.\n\t *\n\t * @since 2.5.0\n\t * @since 4.3.0 Added the `$doctype` parameter.\n\t *\n\t * @param string $output A space-separated list of language attributes.\n\t * @param string $doctype The type of html document (xhtml|html).\n\t */\n\treturn apply_filters( 'language_attributes', $output, $doctype );\n}\n\n/**\n * Displays the language attributes for the html tag.\n *\n * Builds up a set of html attributes containing the text direction and language\n * information for the page.\n *\n * @since 2.1.0\n * @since 4.3.0 Converted into a wrapper for get_language_attributes().\n *\n * @param string $doctype Optional. The type of html document. Accepts 'xhtml' or 'html'. Default 'html'.\n */\nfunction language_attributes( $doctype = 'html' ) {\n\techo get_language_attributes( $doctype );\n}\n\n/**\n * Retrieve paginated link for archive post pages.\n *\n * Technically, the function can be used to create paginated link list for any\n * area. The 'base' argument is used to reference the url, which will be used to\n * create the paginated links. The 'format' argument is then used for replacing\n * the page number. It is however, most likely and by default, to be used on the\n * archive post pages.\n *\n * The 'type' argument controls format of the returned value. The default is\n * 'plain', which is just a string with the links separated by a newline\n * character. The other possible values are either 'array' or 'list'. The\n * 'array' value will return an array of the paginated link list to offer full\n * control of display. The 'list' value will place all of the paginated links in\n * an unordered HTML list.\n *\n * The 'total' argument is the total amount of pages and is an integer. The\n * 'current' argument is the current page number and is also an integer.\n *\n * An example of the 'base' argument is \"http://example.com/all_posts.php%_%\"\n * and the '%_%' is required. The '%_%' will be replaced by the contents of in\n * the 'format' argument. An example for the 'format' argument is \"?page=%#%\"\n * and the '%#%' is also required. The '%#%' will be replaced with the page\n * number.\n *\n * You can include the previous and next links in the list by setting the\n * 'prev_next' argument to true, which it is by default. You can set the\n * previous text, by using the 'prev_text' argument. You can set the next text\n * by setting the 'next_text' argument.\n *\n * If the 'show_all' argument is set to true, then it will show all of the pages\n * instead of a short list of the pages near the current page. By default, the\n * 'show_all' is set to false and controlled by the 'end_size' and 'mid_size'\n * arguments. The 'end_size' argument is how many numbers on either the start\n * and the end list edges, by default is 1. The 'mid_size' argument is how many\n * numbers to either side of current page, but not including current page.\n *\n * It is possible to add query vars to the link by using the 'add_args' argument\n * and see add_query_arg() for more information.\n *\n * The 'before_page_number' and 'after_page_number' arguments allow users to\n * augment the links themselves. Typically this might be to add context to the\n * numbered links so that screen reader users understand what the links are for.\n * The text strings are added before and after the page number - within the\n * anchor tag.\n *\n * @since 2.1.0\n * @since 4.9.0 Added the `aria_current` argument.\n *\n * @global WP_Query   $wp_query\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string|array $args {\n *     Optional. Array or string of arguments for generating paginated links for archives.\n *\n *     @type string $base               Base of the paginated url. Default empty.\n *     @type string $format             Format for the pagination structure. Default empty.\n *     @type int    $total              The total amount of pages. Default is the value WP_Query's\n *                                      `max_num_pages` or 1.\n *     @type int    $current            The current page number. Default is 'paged' query var or 1.\n *     @type string $aria_current       The value for the aria-current attribute. Possible values are 'page',\n *                                      'step', 'location', 'date', 'time', 'true', 'false'. Default is 'page'.\n *     @type bool   $show_all           Whether to show all pages. Default false.\n *     @type int    $end_size           How many numbers on either the start and the end list edges.\n *                                      Default 1.\n *     @type int    $mid_size           How many numbers to either side of the current pages. Default 2.\n *     @type bool   $prev_next          Whether to include the previous and next links in the list. Default true.\n *     @type bool   $prev_text          The previous page text. Default '&laquo; Previous'.\n *     @type bool   $next_text          The next page text. Default 'Next &raquo;'.\n *     @type string $type               Controls format of the returned value. Possible values are 'plain',\n *                                      'array' and 'list'. Default is 'plain'.\n *     @type array  $add_args           An array of query args to add. Default false.\n *     @type string $add_fragment       A string to append to each link. Default empty.\n *     @type string $before_page_number A string to appear before the page number. Default empty.\n *     @type string $after_page_number  A string to append after the page number. Default empty.\n * }\n * @return string|array|void String of page links or array of page links.\n */\nfunction paginate_links( $args = '' ) {\n\tglobal $wp_query, $wp_rewrite;\n\n\t// Setting up default values based on the current URL.\n\t$pagenum_link = html_entity_decode( get_pagenum_link() );\n\t$url_parts    = explode( '?', $pagenum_link );\n\n\t// Get max pages and current page out of the current query, if available.\n\t$total   = isset( $wp_query->max_num_pages ) ? $wp_query->max_num_pages : 1;\n\t$current = get_query_var( 'paged' ) ? intval( get_query_var( 'paged' ) ) : 1;\n\n\t// Append the format placeholder to the base URL.\n\t$pagenum_link = trailingslashit( $url_parts[0] ) . '%_%';\n\n\t// URL base depends on permalink settings.\n\t$format  = $wp_rewrite->using_index_permalinks() && ! strpos( $pagenum_link, 'index.php' ) ? 'index.php/' : '';\n\t$format .= $wp_rewrite->using_permalinks() ? user_trailingslashit( $wp_rewrite->pagination_base . '/%#%', 'paged' ) : '?paged=%#%';\n\n\t$defaults = array(\n\t\t'base'               => $pagenum_link, // http://example.com/all_posts.php%_% : %_% is replaced by format (below)\n\t\t'format'             => $format, // ?page=%#% : %#% is replaced by the page number\n\t\t'total'              => $total,\n\t\t'current'            => $current,\n\t\t'aria_current'       => 'page',\n\t\t'show_all'           => false,\n\t\t'prev_next'          => true,\n\t\t'prev_text'          => __( '&laquo; Previous' ),\n\t\t'next_text'          => __( 'Next &raquo;' ),\n\t\t'end_size'           => 1,\n\t\t'mid_size'           => 2,\n\t\t'type'               => 'plain',\n\t\t'add_args'           => array(), // array of query args to add\n\t\t'add_fragment'       => '',\n\t\t'before_page_number' => '',\n\t\t'after_page_number'  => '',\n\t);\n\n\t$args = wp_parse_args( $args, $defaults );\n\n\tif ( ! is_array( $args['add_args'] ) ) {\n\t\t$args['add_args'] = array();\n\t}\n\n\t// Merge additional query vars found in the original URL into 'add_args' array.\n\tif ( isset( $url_parts[1] ) ) {\n\t\t// Find the format argument.\n\t\t$format       = explode( '?', str_replace( '%_%', $args['format'], $args['base'] ) );\n\t\t$format_query = isset( $format[1] ) ? $format[1] : '';\n\t\twp_parse_str( $format_query, $format_args );\n\n\t\t// Find the query args of the requested URL.\n\t\twp_parse_str( $url_parts[1], $url_query_args );\n\n\t\t// Remove the format argument from the array of query arguments, to avoid overwriting custom format.\n\t\tforeach ( $format_args as $format_arg => $format_arg_value ) {\n\t\t\tunset( $url_query_args[ $format_arg ] );\n\t\t}\n\n\t\t$args['add_args'] = array_merge( $args['add_args'], urlencode_deep( $url_query_args ) );\n\t}\n\n\t// Who knows what else people pass in $args\n\t$total = (int) $args['total'];\n\tif ( $total < 2 ) {\n\t\treturn;\n\t}\n\t$current  = (int) $args['current'];\n\t$end_size = (int) $args['end_size']; // Out of bounds?  Make it the default.\n\tif ( $end_size < 1 ) {\n\t\t$end_size = 1;\n\t}\n\t$mid_size = (int) $args['mid_size'];\n\tif ( $mid_size < 0 ) {\n\t\t$mid_size = 2;\n\t}\n\t$add_args   = $args['add_args'];\n\t$r          = '';\n\t$page_links = array();\n\t$dots       = false;\n\n\tif ( $args['prev_next'] && $current && 1 < $current ) :\n\t\t$link = str_replace( '%_%', 2 == $current ? '' : $args['format'], $args['base'] );\n\t\t$link = str_replace( '%#%', $current - 1, $link );\n\t\tif ( $add_args ) {\n\t\t\t$link = add_query_arg( $add_args, $link );\n\t\t}\n\t\t$link .= $args['add_fragment'];\n\n\t\t/**\n\t\t * Filters the paginated links for the given archive pages.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string $link The paginated link URL.\n\t\t */\n\t\t$page_links[] = '<a class=\"prev page-numbers\" href=\"' . esc_url( apply_filters( 'paginate_links', $link ) ) . '\">' . $args['prev_text'] . '</a>';\n\tendif;\n\tfor ( $n = 1; $n <= $total; $n++ ) :\n\t\tif ( $n == $current ) :\n\t\t\t$page_links[] = \"<span aria-current='\" . esc_attr( $args['aria_current'] ) . \"' class='page-numbers current'>\" . $args['before_page_number'] . number_format_i18n( $n ) . $args['after_page_number'] . '</span>';\n\t\t\t$dots         = true;\n\t\telse :\n\t\t\tif ( $args['show_all'] || ( $n <= $end_size || ( $current && $n >= $current - $mid_size && $n <= $current + $mid_size ) || $n > $total - $end_size ) ) :\n\t\t\t\t$link = str_replace( '%_%', 1 == $n ? '' : $args['format'], $args['base'] );\n\t\t\t\t$link = str_replace( '%#%', $n, $link );\n\t\t\t\tif ( $add_args ) {\n\t\t\t\t\t$link = add_query_arg( $add_args, $link );\n\t\t\t\t}\n\t\t\t\t$link .= $args['add_fragment'];\n\n\t\t\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\t\t\t$page_links[] = \"<a class='page-numbers' href='\" . esc_url( apply_filters( 'paginate_links', $link ) ) . \"'>\" . $args['before_page_number'] . number_format_i18n( $n ) . $args['after_page_number'] . '</a>';\n\t\t\t\t$dots         = true;\n\t\t\telseif ( $dots && ! $args['show_all'] ) :\n\t\t\t\t$page_links[] = '<span class=\"page-numbers dots\">' . __( '&hellip;' ) . '</span>';\n\t\t\t\t$dots         = false;\n\t\t\tendif;\n\t\tendif;\n\tendfor;\n\tif ( $args['prev_next'] && $current && $current < $total ) :\n\t\t$link = str_replace( '%_%', $args['format'], $args['base'] );\n\t\t$link = str_replace( '%#%', $current + 1, $link );\n\t\tif ( $add_args ) {\n\t\t\t$link = add_query_arg( $add_args, $link );\n\t\t}\n\t\t$link .= $args['add_fragment'];\n\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\t$page_links[] = '<a class=\"next page-numbers\" href=\"' . esc_url( apply_filters( 'paginate_links', $link ) ) . '\">' . $args['next_text'] . '</a>';\n\tendif;\n\tswitch ( $args['type'] ) {\n\t\tcase 'array':\n\t\t\treturn $page_links;\n\n\t\tcase 'list':\n\t\t\t$r .= \"<ul class='page-numbers'>\\n\\t<li>\";\n\t\t\t$r .= join( \"</li>\\n\\t<li>\", $page_links );\n\t\t\t$r .= \"</li>\\n</ul>\\n\";\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t$r = join( \"\\n\", $page_links );\n\t\t\tbreak;\n\t}\n\treturn $r;\n}\n\n/**\n * Registers an admin color scheme css file.\n *\n * Allows a plugin to register a new admin color scheme. For example:\n *\n *     wp_admin_css_color( 'classic', __( 'Classic' ), admin_url( \"css/colors-classic.css\" ), array(\n *         '#07273E', '#14568A', '#D54E21', '#2683AE'\n *     ) );\n *\n * @since 2.5.0\n *\n * @global array $_wp_admin_css_colors\n *\n * @param string $key    The unique key for this theme.\n * @param string $name   The name of the theme.\n * @param string $url    The URL of the CSS file containing the color scheme.\n * @param array  $colors Optional. An array of CSS color definition strings which are used\n *                       to give the user a feel for the theme.\n * @param array  $icons {\n *     Optional. CSS color definitions used to color any SVG icons.\n *\n *     @type string $base    SVG icon base color.\n *     @type string $focus   SVG icon color on focus.\n *     @type string $current SVG icon color of current admin menu link.\n * }\n */\nfunction wp_admin_css_color( $key, $name, $url, $colors = array(), $icons = array() ) {\n\tglobal $_wp_admin_css_colors;\n\n\tif ( ! isset( $_wp_admin_css_colors ) ) {\n\t\t$_wp_admin_css_colors = array();\n\t}\n\n\t$_wp_admin_css_colors[ $key ] = (object) array(\n\t\t'name'        => $name,\n\t\t'url'         => $url,\n\t\t'colors'      => $colors,\n\t\t'icon_colors' => $icons,\n\t);\n}\n\n/**\n * Registers the default admin color schemes.\n *\n * Registers the initial set of eight color schemes in the Profile section\n * of the dashboard which allows for styling the admin menu and toolbar.\n *\n * @see wp_admin_css_color()\n *\n * @since 3.0.0\n */\nfunction register_admin_color_schemes() {\n\t$suffix  = is_rtl() ? '-rtl' : '';\n\t$suffix .= SCRIPT_DEBUG ? '' : '.min';\n\n\twp_admin_css_color(\n\t\t'fresh', _x( 'Default', 'admin color scheme' ),\n\t\tfalse,\n\t\tarray( '#222', '#333', '#0073aa', '#00a0d2' ),\n\t\tarray(\n\t\t\t'base'    => '#82878c',\n\t\t\t'focus'   => '#00a0d2',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\t// Other color schemes are not available when running out of src\n\tif ( false !== strpos( get_bloginfo( 'version' ), '-src' ) ) {\n\t\treturn;\n\t}\n\n\twp_admin_css_color(\n\t\t'light', _x( 'Light', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/light/colors$suffix.css\" ),\n\t\tarray( '#e5e5e5', '#999', '#d64e07', '#04a4cc' ),\n\t\tarray(\n\t\t\t'base'    => '#999',\n\t\t\t'focus'   => '#ccc',\n\t\t\t'current' => '#ccc',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'blue', _x( 'Blue', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/blue/colors$suffix.css\" ),\n\t\tarray( '#096484', '#4796b3', '#52accc', '#74B6CE' ),\n\t\tarray(\n\t\t\t'base'    => '#e5f8ff',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'midnight', _x( 'Midnight', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/midnight/colors$suffix.css\" ),\n\t\tarray( '#25282b', '#363b3f', '#69a8bb', '#e14d43' ),\n\t\tarray(\n\t\t\t'base'    => '#f1f2f3',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'sunrise', _x( 'Sunrise', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/sunrise/colors$suffix.css\" ),\n\t\tarray( '#b43c38', '#cf4944', '#dd823b', '#ccaf0b' ),\n\t\tarray(\n\t\t\t'base'    => '#f3f1f1',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'ectoplasm', _x( 'Ectoplasm', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/ectoplasm/colors$suffix.css\" ),\n\t\tarray( '#413256', '#523f6d', '#a3b745', '#d46f15' ),\n\t\tarray(\n\t\t\t'base'    => '#ece6f6',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'ocean', _x( 'Ocean', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/ocean/colors$suffix.css\" ),\n\t\tarray( '#627c83', '#738e96', '#9ebaa0', '#aa9d88' ),\n\t\tarray(\n\t\t\t'base'    => '#f2fcff',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n\twp_admin_css_color(\n\t\t'coffee', _x( 'Coffee', 'admin color scheme' ),\n\t\tadmin_url( \"css/colors/coffee/colors$suffix.css\" ),\n\t\tarray( '#46403c', '#59524c', '#c7a589', '#9ea476' ),\n\t\tarray(\n\t\t\t'base'    => '#f3f2f1',\n\t\t\t'focus'   => '#fff',\n\t\t\t'current' => '#fff',\n\t\t)\n\t);\n\n}\n\n/**\n * Displays the URL of a WordPress admin CSS file.\n *\n * @see WP_Styles::_css_href and its {@see 'style_loader_src'} filter.\n *\n * @since 2.3.0\n *\n * @param string $file file relative to wp-admin/ without its \".css\" extension.\n * @return string\n */\nfunction wp_admin_css_uri( $file = 'wp-admin' ) {\n\tif ( defined( 'WP_INSTALLING' ) ) {\n\t\t$_file = \"./$file.css\";\n\t} else {\n\t\t$_file = admin_url( \"$file.css\" );\n\t}\n\t$_file = add_query_arg( 'version', get_bloginfo( 'version' ), $_file );\n\n\t/**\n\t * Filters the URI of a WordPress admin CSS file.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $_file Relative path to the file with query arguments attached.\n\t * @param string $file  Relative path to the file, minus its \".css\" extension.\n\t */\n\treturn apply_filters( 'wp_admin_css_uri', $_file, $file );\n}\n\n/**\n * Enqueues or directly prints a stylesheet link to the specified CSS file.\n *\n * \"Intelligently\" decides to enqueue or to print the CSS file. If the\n * {@see 'wp_print_styles'} action has *not* yet been called, the CSS file will be\n * enqueued. If the {@see 'wp_print_styles'} action has been called, the CSS link will\n * be printed. Printing may be forced by passing true as the $force_echo\n * (second) parameter.\n *\n * For backward compatibility with WordPress 2.3 calling method: If the $file\n * (first) parameter does not correspond to a registered CSS file, we assume\n * $file is a file relative to wp-admin/ without its \".css\" extension. A\n * stylesheet link to that generated URL is printed.\n *\n * @since 2.3.0\n *\n * @param string $file       Optional. Style handle name or file name (without \".css\" extension) relative\n *                           to wp-admin/. Defaults to 'wp-admin'.\n * @param bool   $force_echo Optional. Force the stylesheet link to be printed rather than enqueued.\n */\nfunction wp_admin_css( $file = 'wp-admin', $force_echo = false ) {\n\t// For backward compatibility\n\t$handle = 0 === strpos( $file, 'css/' ) ? substr( $file, 4 ) : $file;\n\n\tif ( wp_styles()->query( $handle ) ) {\n\t\tif ( $force_echo || did_action( 'wp_print_styles' ) ) { // we already printed the style queue. Print this one immediately\n\t\t\twp_print_styles( $handle );\n\t\t} else { // Add to style queue\n\t\t\twp_enqueue_style( $handle );\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * Filters the stylesheet link to the specified CSS file.\n\t *\n\t * If the site is set to display right-to-left, the RTL stylesheet link\n\t * will be used instead.\n\t *\n\t * @since 2.3.0\n\t * @param string $stylesheet_link HTML link element for the stylesheet.\n\t * @param string $file            Style handle name or filename (without \".css\" extension)\n\t *                                relative to wp-admin/. Defaults to 'wp-admin'.\n\t */\n\techo apply_filters( 'wp_admin_css', \"<link rel='stylesheet' href='\" . esc_url( wp_admin_css_uri( $file ) ) . \"' type='text/css' />\\n\", $file );\n\n\tif ( function_exists( 'is_rtl' ) && is_rtl() ) {\n\t\t/** This filter is documented in wp-includes/general-template.php */\n\t\techo apply_filters( 'wp_admin_css', \"<link rel='stylesheet' href='\" . esc_url( wp_admin_css_uri( \"$file-rtl\" ) ) . \"' type='text/css' />\\n\", \"$file-rtl\" );\n\t}\n}\n\n/**\n * Enqueues the default ThickBox js and css.\n *\n * If any of the settings need to be changed, this can be done with another js\n * file similar to media-upload.js. That file should\n * require array('thickbox') to ensure it is loaded after.\n *\n * @since 2.5.0\n */\nfunction add_thickbox() {\n\twp_enqueue_script( 'thickbox' );\n\twp_enqueue_style( 'thickbox' );\n\n\tif ( is_network_admin() ) {\n\t\tadd_action( 'admin_head', '_thickbox_path_admin_subfolder' );\n\t}\n}\n\n/**\n * Displays the XHTML generator that is generated on the wp_head hook.\n *\n * See {@see 'wp_head'}.\n *\n * @since 2.5.0\n */\nfunction wp_generator() {\n\t/**\n\t * Filters the output of the XHTML generator tag.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $generator_type The XHTML generator.\n\t */\n\tthe_generator( apply_filters( 'wp_generator_type', 'xhtml' ) );\n}\n\n/**\n * Display the generator XML or Comment for RSS, ATOM, etc.\n *\n * Returns the correct generator type for the requested output format. Allows\n * for a plugin to filter generators overall the {@see 'the_generator'} filter.\n *\n * @since 2.5.0\n *\n * @param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export).\n */\nfunction the_generator( $type ) {\n\t/**\n\t * Filters the output of the XHTML generator tag for display.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $generator_type The generator output.\n\t * @param string $type           The type of generator to output. Accepts 'html',\n\t *                               'xhtml', 'atom', 'rss2', 'rdf', 'comment', 'export'.\n\t */\n\techo apply_filters( 'the_generator', get_the_generator( $type ), $type ) . \"\\n\";\n}\n\n/**\n * Creates the generator XML or Comment for RSS, ATOM, etc.\n *\n * Returns the correct generator type for the requested output format. Allows\n * for a plugin to filter generators on an individual basis using the\n * {@see 'get_the_generator_$type'} filter.\n *\n * @since 2.5.0\n *\n * @param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export).\n * @return string|void The HTML content for the generator.\n */\nfunction get_the_generator( $type = '' ) {\n\tif ( empty( $type ) ) {\n\n\t\t$current_filter = current_filter();\n\t\tif ( empty( $current_filter ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch ( $current_filter ) {\n\t\t\tcase 'rss2_head':\n\t\t\tcase 'commentsrss2_head':\n\t\t\t\t$type = 'rss2';\n\t\t\t\tbreak;\n\t\t\tcase 'rss_head':\n\t\t\tcase 'opml_head':\n\t\t\t\t$type = 'comment';\n\t\t\t\tbreak;\n\t\t\tcase 'rdf_header':\n\t\t\t\t$type = 'rdf';\n\t\t\t\tbreak;\n\t\t\tcase 'atom_head':\n\t\t\tcase 'comments_atom_head':\n\t\t\tcase 'app_head':\n\t\t\t\t$type = 'atom';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tswitch ( $type ) {\n\t\tcase 'html':\n\t\t\t$gen = '<meta name=\"generator\" content=\"WordPress ' . esc_attr( get_bloginfo( 'version' ) ) . '\">';\n\t\t\tbreak;\n\t\tcase 'xhtml':\n\t\t\t$gen = '<meta name=\"generator\" content=\"WordPress ' . esc_attr( get_bloginfo( 'version' ) ) . '\" />';\n\t\t\tbreak;\n\t\tcase 'atom':\n\t\t\t$gen = '<generator uri=\"https://wordpress.org/\" version=\"' . esc_attr( get_bloginfo_rss( 'version' ) ) . '\">WordPress</generator>';\n\t\t\tbreak;\n\t\tcase 'rss2':\n\t\t\t$gen = '<generator>' . esc_url_raw( 'https://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) ) . '</generator>';\n\t\t\tbreak;\n\t\tcase 'rdf':\n\t\t\t$gen = '<admin:generatorAgent rdf:resource=\"' . esc_url_raw( 'https://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) ) . '\" />';\n\t\t\tbreak;\n\t\tcase 'comment':\n\t\t\t$gen = '<!-- generator=\"WordPress/' . esc_attr( get_bloginfo( 'version' ) ) . '\" -->';\n\t\t\tbreak;\n\t\tcase 'export':\n\t\t\t$gen = '<!-- generator=\"WordPress/' . esc_attr( get_bloginfo_rss( 'version' ) ) . '\" created=\"' . date( 'Y-m-d H:i' ) . '\" -->';\n\t\t\tbreak;\n\t}\n\n\t/**\n\t * Filters the HTML for the retrieved generator type.\n\t *\n\t * The dynamic portion of the hook name, `$type`, refers to the generator type.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $gen  The HTML markup output to wp_head().\n\t * @param string $type The type of generator. Accepts 'html', 'xhtml', 'atom',\n\t *                     'rss2', 'rdf', 'comment', 'export'.\n\t */\n\treturn apply_filters( \"get_the_generator_{$type}\", $gen, $type );\n}\n\n/**\n * Outputs the html checked attribute.\n *\n * Compares the first two arguments and if identical marks as checked\n *\n * @since 1.0.0\n *\n * @param mixed $checked One of the values to compare\n * @param mixed $current (true) The other value to compare if not just true\n * @param bool  $echo    Whether to echo or just return the string\n * @return string html attribute or empty string\n */\nfunction checked( $checked, $current = true, $echo = true ) {\n\treturn __checked_selected_helper( $checked, $current, $echo, 'checked' );\n}\n\n/**\n * Outputs the html selected attribute.\n *\n * Compares the first two arguments and if identical marks as selected\n *\n * @since 1.0.0\n *\n * @param mixed $selected One of the values to compare\n * @param mixed $current  (true) The other value to compare if not just true\n * @param bool  $echo     Whether to echo or just return the string\n * @return string html attribute or empty string\n */\nfunction selected( $selected, $current = true, $echo = true ) {\n\treturn __checked_selected_helper( $selected, $current, $echo, 'selected' );\n}\n\n/**\n * Outputs the html disabled attribute.\n *\n * Compares the first two arguments and if identical marks as disabled\n *\n * @since 3.0.0\n *\n * @param mixed $disabled One of the values to compare\n * @param mixed $current  (true) The other value to compare if not just true\n * @param bool  $echo     Whether to echo or just return the string\n * @return string html attribute or empty string\n */\nfunction disabled( $disabled, $current = true, $echo = true ) {\n\treturn __checked_selected_helper( $disabled, $current, $echo, 'disabled' );\n}\n\n/**\n * Outputs the html readonly attribute.\n *\n * Compares the first two arguments and if identical marks as readonly\n *\n * @since 4.9.0\n *\n * @param mixed $readonly One of the values to compare\n * @param mixed $current  (true) The other value to compare if not just true\n * @param bool  $echo     Whether to echo or just return the string\n * @return string html attribute or empty string\n */\nfunction readonly( $readonly, $current = true, $echo = true ) {\n\treturn __checked_selected_helper( $readonly, $current, $echo, 'readonly' );\n}\n\n/**\n * Private helper function for checked, selected, disabled and readonly.\n *\n * Compares the first two arguments and if identical marks as $type\n *\n * @since 2.8.0\n * @access private\n *\n * @param mixed  $helper  One of the values to compare\n * @param mixed  $current (true) The other value to compare if not just true\n * @param bool   $echo    Whether to echo or just return the string\n * @param string $type    The type of checked|selected|disabled|readonly we are doing\n * @return string html attribute or empty string\n */\nfunction __checked_selected_helper( $helper, $current, $echo, $type ) {\n\tif ( (string) $helper === (string) $current ) {\n\t\t$result = \" $type='$type'\";\n\t} else {\n\t\t$result = '';\n\t}\n\n\tif ( $echo ) {\n\t\techo $result;\n\t}\n\n\treturn $result;\n}\n\n/**\n * Default settings for heartbeat\n *\n * Outputs the nonce used in the heartbeat XHR\n *\n * @since 3.6.0\n *\n * @param array $settings\n * @return array $settings\n */\nfunction wp_heartbeat_settings( $settings ) {\n\tif ( ! is_admin() ) {\n\t\t$settings['ajaxurl'] = admin_url( 'admin-ajax.php', 'relative' );\n\t}\n\n\tif ( is_user_logged_in() ) {\n\t\t$settings['nonce'] = wp_create_nonce( 'heartbeat-nonce' );\n\t}\n\n\treturn $settings;\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '5.0-alpha-42893';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 42836;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4607-20180123';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-includes/general-template.php", "wp-includes/version.php"], "buggy_code_start_loc": [4252, 7], "buggy_code_end_loc": [4271, 8], "fixing_code_start_loc": [4252, 7], "fixing_code_end_loc": [4271, 8], "type": "CWE-79", "message": "Before WordPress 4.9.5, the version string was not escaped in the get_the_generator function, and could lead to XSS in a generator tag.", "other": {"cve": {"id": "CVE-2018-10102", "sourceIdentifier": "cve@mitre.org", "published": "2018-04-16T09:58:09.713", "lastModified": "2018-05-18T13:50:36.550", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Before WordPress 4.9.5, the version string was not escaped in the get_the_generator function, and could lead to XSS in a generator tag."}, {"lang": "es", "value": "En versiones anteriores a la 4.9.5 de WordPress, la cadena de versi\u00f3n no se escap\u00f3 en la funci\u00f3n get_the_generator, lo que podr\u00eda conducir a Cross-Site Scripting (XSS) en una etiqueta generator."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.9.5", "matchCriteriaId": "8F03A691-0741-487D-A951-523B04170F4E"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/103775", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1040836", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.9.5", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://core.trac.wordpress.org/changeset/42893", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/31a4369366d6b8ce30045d4c838de2412c77850d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/04/msg00031.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://wordpress.org/news/2018/04/wordpress-4-9-5-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/9055", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://www.debian.org/security/2018/dsa-4193", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/31a4369366d6b8ce30045d4c838de2412c77850d"}}