{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.element.selector.document\");\npimcore.element.selector.document = Class.create(pimcore.element.selector.abstract, {\n\n    initStore: function () {\n        this.store = new Ext.data.Store({\n            autoDestroy: true,\n            remoteSort: true,\n            pageSize: 50,\n            proxy : {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_searchadmin_search_find'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data'\n                },\n                extraParams: {\n                    type: 'document'\n                }\n            },\n            fields: [\"id\", \"fullpath\", \"type\", \"subtype\", \"published\", \"title\", \"description\", \"name\", \"filename\"]\n        });\n    },\n\n    getTabTitle: function() {\n        return \"document_search\";\n    },\n\n    getForm: function () {\n\n        var compositeConfig = {\n            xtype: \"toolbar\",\n            items: [{\n                xtype: \"textfield\",\n                name: \"query\",\n                width: 370,\n                hideLabel: true,\n                enableKeyEvents: true,\n                listeners: {\n                    \"keydown\" : function (field, key) {\n                        if (key.getKey() == key.ENTER) {\n                            this.search();\n                        }\n                    }.bind(this),\n                    afterrender: function () {\n                        this.focus(true,500);\n                    }\n                }\n            }, new Ext.Button({\n                handler: function () {\n                    window.open(\"http://dev.mysql.com/doc/refman/5.6/en/fulltext-boolean.html\");\n                },\n                iconCls: \"pimcore_icon_help\"\n            })]\n        };\n\n        // check for restrictions\n        let possibleRestrictions = pimcore.globalmanager.get('document_search_types');\n        let filterStore = [];\n        let selectedStore = [];\n        for (let i=0; i<possibleRestrictions.length; i++) {\n            if(this.parent.restrictions.subtype.document && in_array(possibleRestrictions[i],\n                this.parent.restrictions.subtype.document )) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        // add all to store if empty\n        if(filterStore.length < 1) {\n            for (let i=0; i<possibleRestrictions.length; i++) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        let selectedValue = selectedStore.join(\",\");\n        if(filterStore.length > 1) {\n            filterStore.splice(0,0,[selectedValue, t(\"all_types\")]);\n        }\n\n\n        compositeConfig.items.push({\n            xtype: \"combo\",\n            store: filterStore,\n            mode: \"local\",\n            name: \"subtype\",\n            triggerAction: \"all\",\n            editable: false,\n            value: selectedValue\n        });\n\n\n        // add button\n        compositeConfig.items.push({\n            xtype: \"button\",\n            iconCls: \"pimcore_icon_search\",\n            text: t(\"search\"),\n            handler: this.search.bind(this)\n        });\n\n        if(!this.formPanel) {\n            this.formPanel = new Ext.form.FormPanel({\n                region: \"north\",\n                bodyStyle: \"padding: 2px;\",\n                items: [compositeConfig]\n            });\n        }\n\n        return this.formPanel;\n    },\n\n    getSelectionPanel: function () {\n        if(!this.selectionPanel) {\n\n            this.selectionStore = new Ext.data.JsonStore({\n                data: [],\n                fields: [\"id\", \"type\", \"filename\", \"fullpath\", \"subtype\"]\n            });\n\n            this.selectionPanel = new Ext.grid.GridPanel({\n                region: \"east\",\n                title: t(\"your_selection\"),\n                tbar: [{\n                    xtype: \"tbtext\",\n                    text: t(\"double_click_to_add_item_to_selection\"),\n                    autoHeight: true,\n                    style: {\n                        whiteSpace: \"normal\"\n                    }\n                }],\n                tbarCfg: {\n                    autoHeight: true\n                },\n                width: 300,\n                store: this.selectionStore,\n                columns: [\n                    {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                        renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                            return '<div class=\"pimcore_icon_' + value + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                        }\n                    },\n                    {text: t(\"filename\"), flex: 1, sortable: true, dataIndex: 'filename'}\n                ],\n                viewConfig: {\n                    forceFit: true\n                },\n                listeners: {\n                    rowcontextmenu: function (grid, record, tr, rowIndex, e, eOpts ) {\n                        var menu = new Ext.menu.Menu();\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('remove'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: function (index, item) {\n                                this.selectionStore.removeAt(index);\n                                item.parentMenu.destroy();\n                            }.bind(this, rowIndex)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.getXY());\n                    }.bind(this)\n                },\n                selModel: Ext.create('Ext.selection.RowModel', {}),\n                bbar: [\"->\", {\n                    text: t(\"select\"),\n                    iconCls: \"pimcore_icon_apply\",\n                    handler: function () {\n                        this.parent.commitData(this.getData());\n                    }.bind(this)\n                }]\n            });\n        }\n\n        return this.selectionPanel;\n    },\n\n    getResultPanel: function () {\n        if (!this.resultPanel) {\n            var columns = [\n                {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                        return '<div class=\"pimcore_icon_' + value + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                    }\n                },\n                {text: 'ID', width: 40, sortable: true, dataIndex: 'id', hidden: true},\n                {text: t(\"published\"), width: 40, sortable: true, dataIndex: 'published', hidden: true},\n                {text: t(\"path\"), flex: 200, sortable: true, dataIndex: 'fullpath'},\n                {text: t(\"title\"), flex: 200, sortable: false, dataIndex: 'title', hidden: false},\n                {text: t(\"description\"), width: 200, sortable: false, dataIndex: 'description', hidden: true},\n                {text: t(\"filename\"), width: 200, sortable: true, dataIndex: 'filename', hidden: true}\n            ];\n\n            this.pagingtoolbar = this.getPagingToolbar();\n\n            this.resultPanel = new Ext.grid.GridPanel({\n                region: \"center\",\n                store: this.store,\n                columns: columns,\n                viewConfig: {\n                    forceFit: true,\n                    listeners: {\n                        refresh: function (dataview) {\n                            Ext.each(dataview.panel.columns, function (column) {\n                                if (column.autoSizeColumn === true) {\n                                    column.autoSize();\n                                }\n                            })\n                        }\n                    }\n                },\n                loadMask: true,\n                columnLines: true,\n                stripeRows: true,\n                selModel: this.getGridSelModel(),\n                bbar: this.pagingtoolbar,\n                listeners: {\n                    rowdblclick: function (grid, record, tr, rowIndex, e, eOpts ) {\n\n                        var data = grid.getStore().getAt(rowIndex);\n\n                        if(this.parent.multiselect) {\n                            this.addToSelection(data.data);\n                        } else {\n                            // select and close\n                            this.parent.commitData(this.getData());\n                        }\n                    }.bind(this)\n                }\n            });\n        }\n\n        if(this.parent.multiselect) {\n            this.resultPanel.on(\"rowcontextmenu\", this.onRowContextmenu.bind(this));\n        }\n\n        return this.resultPanel;\n    },\n\n    getGrid: function () {\n        return this.resultPanel;\n    },\n\n    search: function () {\n        let formValues = this.formPanel.getForm().getFieldValues();\n\n        let proxy = this.store.getProxy();\n        let query = Ext.util.Format.htmlEncode(formValues.query);\n        proxy.setExtraParam(\"query\", query);\n        proxy.setExtraParam(\"type\", 'document');\n        proxy.setExtraParam(\"subtype\", formValues.subtype);\n\n        if (this.parent.config && this.parent.config.context) {\n            proxy.setExtraParam(\"context\", Ext.encode(this.parent.config.context));\n        }\n\n        this.pagingtoolbar.moveFirst();\n        this.updateTabTitle(query);\n    }\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.element.selector.document\");\npimcore.element.selector.document = Class.create(pimcore.element.selector.abstract, {\n\n    initStore: function () {\n        this.store = new Ext.data.Store({\n            autoDestroy: true,\n            remoteSort: true,\n            pageSize: 50,\n            proxy : {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_searchadmin_search_find'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data'\n                },\n                extraParams: {\n                    type: 'document'\n                }\n            },\n            fields: [\"id\", \"fullpath\", \"type\", \"subtype\", \"published\", \"title\", \"description\", \"name\", \"filename\"]\n        });\n    },\n\n    getTabTitle: function() {\n        return \"document_search\";\n    },\n\n    getForm: function () {\n\n        var compositeConfig = {\n            xtype: \"toolbar\",\n            items: [{\n                xtype: \"textfield\",\n                name: \"query\",\n                width: 370,\n                hideLabel: true,\n                enableKeyEvents: true,\n                listeners: {\n                    \"keydown\" : function (field, key) {\n                        if (key.getKey() == key.ENTER) {\n                            this.search();\n                        }\n                    }.bind(this),\n                    afterrender: function () {\n                        this.focus(true,500);\n                    }\n                }\n            }, new Ext.Button({\n                handler: function () {\n                    window.open(\"http://dev.mysql.com/doc/refman/5.6/en/fulltext-boolean.html\");\n                },\n                iconCls: \"pimcore_icon_help\"\n            })]\n        };\n\n        // check for restrictions\n        let possibleRestrictions = pimcore.globalmanager.get('document_search_types');\n        let filterStore = [];\n        let selectedStore = [];\n        for (let i=0; i<possibleRestrictions.length; i++) {\n            if(this.parent.restrictions.subtype.document && in_array(possibleRestrictions[i],\n                this.parent.restrictions.subtype.document )) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        // add all to store if empty\n        if(filterStore.length < 1) {\n            for (let i=0; i<possibleRestrictions.length; i++) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        let selectedValue = selectedStore.join(\",\");\n        if(filterStore.length > 1) {\n            filterStore.splice(0,0,[selectedValue, t(\"all_types\")]);\n        }\n\n\n        compositeConfig.items.push({\n            xtype: \"combo\",\n            store: filterStore,\n            mode: \"local\",\n            name: \"subtype\",\n            triggerAction: \"all\",\n            editable: false,\n            value: selectedValue\n        });\n\n\n        // add button\n        compositeConfig.items.push({\n            xtype: \"button\",\n            iconCls: \"pimcore_icon_search\",\n            text: t(\"search\"),\n            handler: this.search.bind(this)\n        });\n\n        if(!this.formPanel) {\n            this.formPanel = new Ext.form.FormPanel({\n                region: \"north\",\n                bodyStyle: \"padding: 2px;\",\n                items: [compositeConfig]\n            });\n        }\n\n        return this.formPanel;\n    },\n\n    getSelectionPanel: function () {\n        if(!this.selectionPanel) {\n\n            this.selectionStore = new Ext.data.JsonStore({\n                data: [],\n                fields: [\"id\", \"type\", \"filename\", \"fullpath\", \"subtype\"]\n            });\n\n            this.selectionPanel = new Ext.grid.GridPanel({\n                region: \"east\",\n                title: t(\"your_selection\"),\n                tbar: [{\n                    xtype: \"tbtext\",\n                    text: t(\"double_click_to_add_item_to_selection\"),\n                    autoHeight: true,\n                    style: {\n                        whiteSpace: \"normal\"\n                    }\n                }],\n                tbarCfg: {\n                    autoHeight: true\n                },\n                width: 300,\n                store: this.selectionStore,\n                columns: [\n                    {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                        renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                            return '<div class=\"pimcore_icon_' + value + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                        }\n                    },\n                    {text: t(\"filename\"), flex: 1, sortable: true, dataIndex: 'filename'}\n                ],\n                viewConfig: {\n                    forceFit: true\n                },\n                listeners: {\n                    rowcontextmenu: function (grid, record, tr, rowIndex, e, eOpts ) {\n                        var menu = new Ext.menu.Menu();\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('remove'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: function (index, item) {\n                                this.selectionStore.removeAt(index);\n                                item.parentMenu.destroy();\n                            }.bind(this, rowIndex)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.getXY());\n                    }.bind(this)\n                },\n                selModel: Ext.create('Ext.selection.RowModel', {}),\n                bbar: [\"->\", {\n                    text: t(\"select\"),\n                    iconCls: \"pimcore_icon_apply\",\n                    handler: function () {\n                        this.parent.commitData(this.getData());\n                    }.bind(this)\n                }]\n            });\n        }\n\n        return this.selectionPanel;\n    },\n\n    getResultPanel: function () {\n        if (!this.resultPanel) {\n            var columns = [\n                {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                        return '<div class=\"pimcore_icon_' + value + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                    }\n                },\n                {text: 'ID', width: 40, sortable: true, dataIndex: 'id', hidden: true},\n                {text: t(\"published\"), width: 40, sortable: true, dataIndex: 'published', hidden: true},\n                {text: t(\"path\"), flex: 200, sortable: true, dataIndex: 'fullpath'},\n                {\n                    text: t(\"title\"),\n                    flex: 200,\n                    sortable: false,\n                    dataIndex: 'title',\n                    hidden: false,\n                    renderer: function (value) {\n                        return Ext.util.Format.htmlEncode(value);\n                    }\n                },\n                {text: t(\"description\"), width: 200, sortable: false, dataIndex: 'description', hidden: true},\n                {text: t(\"filename\"), width: 200, sortable: true, dataIndex: 'filename', hidden: true}\n            ];\n\n            this.pagingtoolbar = this.getPagingToolbar();\n\n            this.resultPanel = new Ext.grid.GridPanel({\n                region: \"center\",\n                store: this.store,\n                columns: columns,\n                viewConfig: {\n                    forceFit: true,\n                    listeners: {\n                        refresh: function (dataview) {\n                            Ext.each(dataview.panel.columns, function (column) {\n                                if (column.autoSizeColumn === true) {\n                                    column.autoSize();\n                                }\n                            })\n                        }\n                    }\n                },\n                loadMask: true,\n                columnLines: true,\n                stripeRows: true,\n                selModel: this.getGridSelModel(),\n                bbar: this.pagingtoolbar,\n                listeners: {\n                    rowdblclick: function (grid, record, tr, rowIndex, e, eOpts ) {\n\n                        var data = grid.getStore().getAt(rowIndex);\n\n                        if(this.parent.multiselect) {\n                            this.addToSelection(data.data);\n                        } else {\n                            // select and close\n                            this.parent.commitData(this.getData());\n                        }\n                    }.bind(this)\n                }\n            });\n        }\n\n        if(this.parent.multiselect) {\n            this.resultPanel.on(\"rowcontextmenu\", this.onRowContextmenu.bind(this));\n        }\n\n        return this.resultPanel;\n    },\n\n    getGrid: function () {\n        return this.resultPanel;\n    },\n\n    search: function () {\n        let formValues = this.formPanel.getForm().getFieldValues();\n\n        let proxy = this.store.getProxy();\n        let query = Ext.util.Format.htmlEncode(formValues.query);\n        proxy.setExtraParam(\"query\", query);\n        proxy.setExtraParam(\"type\", 'document');\n        proxy.setExtraParam(\"subtype\", formValues.subtype);\n\n        if (this.parent.config && this.parent.config.context) {\n            proxy.setExtraParam(\"context\", Ext.encode(this.parent.config.context));\n        }\n\n        this.pagingtoolbar.moveFirst();\n        this.updateTabTitle(query);\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/element/selector/document.js"], "buggy_code_start_loc": [202], "buggy_code_end_loc": [203], "fixing_code_start_loc": [202], "fixing_code_end_loc": [212], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.6.4.", "other": {"cve": {"id": "CVE-2023-3821", "sourceIdentifier": "security@huntr.dev", "published": "2023-07-21T15:15:10.243", "lastModified": "2023-07-26T21:27:23.860", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.6.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.6.4", "matchCriteriaId": "E3D96DF5-A6F7-47ED-965B-AA5D6600071F"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/92811f07d39e4ad95c92003868f5f7309489d79c", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/599ba4f6-c900-4161-9127-f1e6a6e29aaa", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/92811f07d39e4ad95c92003868f5f7309489d79c"}}