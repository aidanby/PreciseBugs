{"buggy_code": ["/**\n * Copyright (C) 2014, Oliver Salzburg\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n * Created: 2014-01-21 19:40\n *\n * @author Oliver Salzburg\n * @copyright Copyright (C) 2014, Oliver Salzburg\n * @license http://opensource.org/licenses/mit-license.php MIT License\n */\n\nvar i18n = require( \"i18n\" );\nvar path = require( \"path\" );\n\nvar configuration = {\n\tdirectory      : \"locales/\",\n\textension      : \".json\",\n\tobjectNotation : \".\"\n};\n\n/**\n * Configure the express routes through which translations are served.\n * @param app\n * @param {Object} [configObject]\n */\nvar configure = function( app, configObject ) {\n\tif( typeof configObject !== \"undefined\" ) {\n\t\tconfiguration.directory = configObject.directory || configuration.directory;\n\t\tconfiguration.extension = configObject.extension || configuration.extension;\n\t\tconfiguration.objectNotation = configObject.objectNotation || configuration.objectNotation;\n\t}\n\n\t// Register routes\n\tapp.get( \"/i18n/:locale\", i18nRoutes.i18n );\n\tapp.get( \"/i18n/:locale/:phrase\", i18nRoutes.translate );\n};\n\n/**\n * Middleware to allow retrieval of users locale in the template engine.\n * @param {Object} request\n * @param {Object} response\n * @param {Function} [next]\n */\nvar getLocale = function( request, response, next ) {\n\tresponse.locals.i18n = {\n\t\tgetLocale : function() {\n\t\t\treturn i18n.getLocale.apply( request, arguments );\n\t\t}\n\t};\n\n\t// For backwards compatibility, also define \"acceptedLanguage\".\n\tresponse.locals.acceptedLanguage = response.locals.i18n.getLocale;\n\n\tif( typeof next !== \"undefined\" ) {\n\t\tnext();\n\t}\n};\n\nvar i18nRoutes = {\n\t/**\n\t * Sends a translation file to the client.\n\t * @param request\n\t * @param response\n\t */\n\ti18n : function( request, response ) {\n\t\tvar locale = request.params.locale;\n\t\tvar sendFile = response.sendFile || response.sendfile;\n\t\tsendFile.apply( response, [ path.join( configuration.directory, locale + configuration.extension ) ] );\n\t},\n\n\t/**\n\t * Translate a given string and provide the result.\n\t * @param request\n\t * @param response\n\t */\n\ttranslate : function( request, response ) {\n\t\tvar locale = request.params.locale;\n\t\tvar phrase = request.params.phrase;\n\n\t\tvar result;\n\t\tif( request.query.plural ) {\n\t\t\tvar singular = phrase;\n\t\t\tvar plural = request.query.plural;\n\t\t\t// Make sure the information is added to the catalog if it doesn't exist yet.\n\t\t\tvar translated = i18n.__n( {\n\t\t\t\tsingular : singular,\n\t\t\t\tplural   : plural,\n\t\t\t\tcount    : request.query.count,\n\t\t\t\tlocale   : locale\n\t\t\t} );\n\t\t\t// Retrieve the translation object from the catalog and return it.\n\t\t\tvar catalog = i18n.getCatalog( locale );\n\t\t\tresult = singular.split( configuration.objectNotation ).reduce( function( object, index ) {\n\t\t\t\treturn object[ index ];\n\t\t\t}, catalog );\n\n\t\t} else {\n\t\t\tresult = i18n.__( { phrase : phrase, locale : locale } );\n\t\t}\n\t\tresponse.send( result );\n\t}\n};\n\nmodule.exports.configure = configure;\nmodule.exports.getLocale = getLocale;\n"], "fixing_code": ["/**\n * Copyright (C) 2014, Oliver Salzburg\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n * Created: 2014-01-21 19:40\n *\n * @author Oliver Salzburg\n * @copyright Copyright (C) 2014, Oliver Salzburg\n * @license http://opensource.org/licenses/mit-license.php MIT License\n */\n\nvar i18n = require( \"i18n\" );\nvar path = require( \"path\" );\n\nvar configuration = {\n\tdirectory      : \"locales/\",\n\textension      : \".json\",\n\tobjectNotation : \".\"\n};\n\n/**\n * Configure the express routes through which translations are served.\n * @param app\n * @param {Object} [configObject]\n */\nvar configure = function( app, configObject ) {\n\tif( typeof configObject !== \"undefined\" ) {\n\t\tconfiguration.directory = configObject.directory || configuration.directory;\n\t\tconfiguration.extension = configObject.extension || configuration.extension;\n\t\tconfiguration.objectNotation = configObject.objectNotation || configuration.objectNotation;\n\t}\n\n\t// Register routes\n\tapp.get( \"/i18n/:locale\", i18nRoutes.i18n );\n\n\tif( process.env.NODE_ENV === \"development\" ) {\n\t\tapp.get( \"/i18n/:locale/:phrase\", i18nRoutes.translate );\n\t}\n};\n\n/**\n * Middleware to allow retrieval of users locale in the template engine.\n * @param {Object} request\n * @param {Object} response\n * @param {Function} [next]\n */\nvar getLocale = function( request, response, next ) {\n\tresponse.locals.i18n = {\n\t\tgetLocale : function() {\n\t\t\treturn i18n.getLocale.apply( request, arguments );\n\t\t}\n\t};\n\n\t// For backwards compatibility, also define \"acceptedLanguage\".\n\tresponse.locals.acceptedLanguage = response.locals.i18n.getLocale;\n\n\tif( typeof next !== \"undefined\" ) {\n\t\tnext();\n\t}\n};\n\nvar i18nRoutes = {\n\t/**\n\t * Sends a translation file to the client.\n\t * @param request\n\t * @param response\n\t */\n\ti18n : function( request, response ) {\n\t\tvar locale = request.params.locale;\n\t\tvar sendFile = response.sendFile || response.sendfile;\n\t\tsendFile.apply( response, [ path.join( configuration.directory, locale + configuration.extension ) ] );\n\t},\n\n\t/**\n\t * Translate a given string and provide the result.\n\t * @param request\n\t * @param response\n\t */\n\ttranslate : function( request, response ) {\n\t\tvar locale = request.params.locale;\n\t\tvar phrase = request.params.phrase;\n\n\t\tvar result;\n\t\tif( request.query.plural ) {\n\t\t\tvar singular = phrase;\n\t\t\tvar plural = request.query.plural;\n\t\t\t// Make sure the information is added to the catalog if it doesn't exist yet.\n\t\t\tvar translated = i18n.__n( {\n\t\t\t\tsingular : singular,\n\t\t\t\tplural   : plural,\n\t\t\t\tcount    : request.query.count,\n\t\t\t\tlocale   : locale\n\t\t\t} );\n\t\t\t// Retrieve the translation object from the catalog and return it.\n\t\t\tvar catalog = i18n.getCatalog( locale );\n\t\t\tresult = singular.split( configuration.objectNotation ).reduce( function( object, index ) {\n\t\t\t\treturn object[ index ];\n\t\t\t}, catalog );\n\n\t\t} else {\n\t\t\tresult = i18n.__( { phrase : phrase, locale : locale } );\n\t\t}\n\t\tresponse.send( result );\n\t}\n};\n\nmodule.exports.configure = configure;\nmodule.exports.getLocale = getLocale;\n"], "filenames": ["i18n-node-routes.js"], "buggy_code_start_loc": [52], "buggy_code_end_loc": [53], "fixing_code_start_loc": [52], "fixing_code_end_loc": [56], "type": "CWE-400", "message": "i18n-node-angular is a module used to interact between i18n and angular without using additional resources. A REST API endpoint that is used for development in i18n-node-angular before 1.4.0 was not disabled in production environments a malicious user could fill up the server causing a Denial of Service or content injection.", "other": {"cve": {"id": "CVE-2016-10524", "sourceIdentifier": "support@hackerone.com", "published": "2018-05-31T20:29:00.767", "lastModified": "2022-04-06T19:45:14.743", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "i18n-node-angular is a module used to interact between i18n and angular without using additional resources. A REST API endpoint that is used for development in i18n-node-angular before 1.4.0 was not disabled in production environments a malicious user could fill up the server causing a Denial of Service or content injection."}, {"lang": "es", "value": "i18n-node-angular es un m\u00f3dulo empleado para interactuar entre i18n y angular sin emplear recursos adicionales. Un endpoint API REST que se emplea para desarrollo en i18n-node-angular en versiones anteriores a la 1.4.0 no se deshabilit\u00f3 en entornos de producci\u00f3n, por lo que un usuario podr\u00eda llenar el servidor y provocar una denegaci\u00f3n de servicio (DoS) o una inyecci\u00f3n de contenidos."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.3}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-400"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:i18n-node-angular_project:i18n-node-angular:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.4.0", "matchCriteriaId": "1244AB7E-4B82-479F-B31A-487F3DB6DC4B"}]}]}], "references": [{"url": "https://github.com/oliversalzburg/i18n-node-angular/commit/877720d2d9bb90dc8233706e81ffa03f99fc9dc8", "source": "support@hackerone.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/oliversalzburg/i18n-node-angular/commit/877720d2d9bb90dc8233706e81ffa03f99fc9dc8"}}