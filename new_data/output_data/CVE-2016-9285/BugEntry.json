{"buggy_code": ["<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @package Modules\n * @subpackage Controllers\n */\n\nclass addressController extends expController {\n//\tpublic $useractions = array(\n//        'myaddressbook'=>'Show my addressbook'\n//    );\n    protected $remove_permissions = array(\n        'create',\n        'edit',\n        'delete'\n    );\n    protected $manage_permissions = array(\n//        'import' => 'Import External Addresses',\n        'process' => 'Import External Addresses'\n    );\n    public $requires_login = array(\n        'myaddressbook'=>'You must be logged in to perform this action',\n    );\n\tpublic $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'pagination',\n        'rss',\n        'tags',\n        'twitter',\n    ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    static function displayname() { return gt(\"Addresses\"); }\n    static function description() { return gt(\"Display and manage addresses of users on your site.\"); }\n    static function canImportData() { return true;}\n\n    static function hasSources() {\n        return false;\n    }\n\n    function showall() {\n//        redirect_to(array(\"controller\"=>'address',\"action\"=>'myaddressbook'));\n        $this->myaddressbook();\n\t}\n\n    public function edit()\n    {\n        if((isset($this->params['id']))) $record = new address(intval($this->params['id']));\n        else $record = null;\n        $config = ecomconfig::getConfig('address_allow_admins_all');\n        assign_to_template(array(\n            'record'=>$record,\n            'admin_config'=>$config\n        ));\n        if (expSession::get('customer-signup')) {\n            assign_to_template(array(\n                'checkout'=>true\n            ));\n        }\n    }\n\n\tpublic function myaddressbook() {\n\t\tglobal $user;\n\n\t\t// check if the user is logged in.\n\t\texpQueue::flashIfNotLoggedIn('message',gt('You must be logged in to manage your address book.'));\n        if (!$user->isAdmin() && $this->params['user_id'] != $user->id) {\n            unset($this->params['user_id']);\n        }\n\t\texpHistory::set('viewable', $this->params);\n\t\t$userid = (empty($this->params['user_id'])) ? $user->id : $this->params['user_id'];\n\t\tassign_to_template(array(\n            'addresses'=>$this->address->find('all', 'user_id='.$userid)\n        ));\n\t}\n\n\tfunction show() {\n\t    expHistory::set('viewable', $this->params);\n\t\tassign_to_template(array(\n            'address'=>new address($this->params['id'])\n        ));\n\t}\n\n\tpublic function update() {\n        global $user;\n\n        if (expSession::get('customer-signup')) expSession::set('customer-signup', false);\n        if (isset($this->params['address_country_id'])) {\n            $this->params['country'] = $this->params['address_country_id'];\n            unset($this->params['address_country_id']);\n        }\n        if (isset($this->params['address_region_id'])) {\n            $this->params['state'] = $this->params['address_region_id'];\n            unset($this->params['address_region_id']);\n        }\n\t\tif ($user->isLoggedIn()) {\n\t\t\t// check to see how many other addresses this user has already.\n\t\t\t$count = $this->address->find('count', 'user_id='.$user->id);\n\t\t\t// if this is first address save for this user we'll make this the default\n\t\t\tif ($count == 0)\n            {\n                $this->params['is_default'] = 1;\n                $this->params['is_billing'] = 1;\n                $this->params['is_shipping'] = 1;\n            }\n\t\t\t// associate this address with the current user.\n\t\t\t$this->params['user_id'] = $user->id;\n\t\t\t// save the object\n\t\t\t$this->address->update($this->params);\n\t\t}\n        else { //if (ecomconfig::getConfig('allow_anonymous_checkout')){\n            //user is not logged in, but allow anonymous checkout is enabled so we'll check\n            //a few things that we don't check in the parent 'stuff and create a user account.\n            $this->params['is_default'] = 1;\n            $this->params['is_billing'] = 1;\n            $this->params['is_shipping'] = 1;\n            $this->address->update($this->params);\n        }\n\t\texpHistory::back();\n\t}\n\n\tpublic function delete() {\n\t    global $user;\n\n        $count = $this->address->find('count', 'user_id=' . $user->id);\n        if($count > 1)\n        {\n            $address = new address($this->params['id']);\n\t        if ($user->isAdmin() || ($user->id == $address->user_id)) {\n                if ($address->is_billing)\n                {\n                    $billAddress = $this->address->find('first', 'user_id=' . $user->id . \" AND id != \" . $address->id);\n                    $billAddress->is_billing = true;\n                    $billAddress->save();\n                }\n                if ($address->is_shipping)\n                {\n                    $shipAddress = $this->address->find('first', 'user_id=' . $user->id . \" AND id != \" . $address->id);\n                    $shipAddress->is_shipping = true;\n                    $shipAddress->save();\n                }\n\t            parent::delete();\n\t        }\n        }\n        else\n        {\n            flash(\"error\", gt(\"You must have at least one address.\"));\n        }\n\t    expHistory::back();\n\t}\n\n    public function activate_address()\n    {\n        global $db, $user;\n\n        $object = new stdClass();\n        $object->id = $this->params['id'];\n        $db->setUniqueFlag($object, 'addresses', expString::escape($this->params['is_what']), \"user_id=\" . $user->id);\n        flash(\"message\", gt(\"Successfully updated address.\"));\n        expHistory::back();\n    }\n\n    public function manage()\n    {\n        expHistory::set('manageable',$this->params);\n        $gc = new geoCountry();\n        $countries = $gc->find('all');\n\n        $gr = new geoRegion();\n        $regions = $gr->find('all',null,'rank asc,name asc');\n\n        assign_to_template(array(\n            'countries'=>$countries,\n            'regions'=>$regions\n        ));\n    }\n\n    public function manage_update()\n    {\n        global $db;\n\n        //eDebug($this->params,true);\n        //countries\n        $db->columnUpdate('geo_country','active',0,'active=1');\n        foreach($this->params['country'] as $country_id=>$is_active)\n        {\n            $gc = new geoCountry($country_id);\n            $gc->active = true;\n            $gc->save();\n        }\n        //country default\n        $db->columnUpdate('geo_country','is_default',0,'is_default=1');\n        if(isset($this->params['country_default']))\n        {\n            $gc = new geoCountry(intval($this->params['country_default']));\n            $db->setUniqueFlag($gc,'geo_country','is_default','id=' . $gc->id);\n            $gc->refresh();\n        }\n        //regions\n        $db->columnUpdate('geo_region','active',0,'active=1');\n        foreach($this->params['region'] as $region_id=>$is_active)\n        {\n            $gr = new geoRegion($region_id);\n            $gr->active = true;\n            if(isset($this->params['region_rank'][$region_id])) $gr->rank = $this->params['region_rank'][$region_id];\n            $gr->save();\n        }\n        flash('message',gt('Address configurations successfully updated.'));\n        redirect_to(array('controller'=>'address','action'=>'manage'));\n//        $this->manage();\n    }\n\n    function edit_country() {\n        $country_id = !empty($this->params['id']) ? $this->params['id'] : null;\n        $country = new geoCountry($country_id);\n        assign_to_template(array(\n            'record'=>$country,\n        ));\n    }\n\n    function update_country() {\n        $country_id = !empty($this->params['id']) ? $this->params['id'] : null;\n        $country = new geoCountry($country_id);\n        $country->update($this->params);\n        expHistory::returnTo('manageable');\n    }\n\n    function delete_country() {\n        if (empty($this->params['id'])) {\n            flash('error', gt('Missing id for the country you would like to delete'));\n            expHistory::back();\n        }\n        $country = new geoCountry($this->params['id']);\n        $country->delete();\n        expHistory::returnTo('manageable');\n    }\n\n    function edit_region() {\n        $region_id = !empty($this->params['id']) ? $this->params['id'] : null;\n        $region = new geoRegion($region_id);\n        assign_to_template(array(\n            'record'=>$region,\n        ));\n    }\n\n    function update_region() {\n        $region_id = !empty($this->params['id']) ? $this->params['id'] : null;\n        $region = new geoRegion($region_id);\n        $region->update($this->params);\n        expHistory::returnTo('manageable');\n    }\n\n    function delete_region() {\n        if (empty($this->params['id'])) {\n            flash('error', gt('Missing id for the region you would like to delete'));\n            expHistory::back();\n        }\n        $region = new geoRegion($this->params['id']);\n        $region->delete();\n        expHistory::returnTo('manageable');\n    }\n\n    /**\n     * Import external addresses\n     */\n    function import() {\n        $sources = array('mc' => 'MilitaryClothing.com', 'nt' => 'NameTapes.com', 'am' => 'Amazon');\n        assign_to_template(array(\n            'sources' => $sources\n        ));\n    }\n\n    function process_external_addresses() {\n        global $db;\n\n        set_time_limit(0);\n        //$file = new expFile($this->params['expFile']['batch_process_upload'][0]);\n        eDebug($this->params);\n//        eDebug($_FILES,true);\n        if (!empty($_FILES['address_csv']['error'])) {\n            flash('error', gt('There was an error uploading your file.  Please try again.'));\n            redirect_to(array('controller' => 'store', 'action' => 'import_external_addresses'));\n//            $this->import_external_addresses();\n        }\n\n        $file = new stdClass();\n        $file->path = $_FILES['address_csv']['tmp_name'];\n        echo \"Validating file...<br/>\";\n\n        //replace tabs with commas\n        /*if($this->params['type_of_address'][0] == 'am')\n        {\n            $checkhandle = fopen($file->path, \"w\");\n            $oldFile = file_get_contents($file->path);\n            $newFile = str_ireplace(chr(9),',',$oldFile);\n            fwrite($checkhandle,$newFile);\n            fclose($checkhandle);\n        }*/\n\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $checkhandle = fopen($file->path, \"r\");\n        if ($this->params['type_of_address'][0] == 'am') {\n            $checkdata = fgetcsv($checkhandle, 10000, \"\\t\");\n            $fieldCount = count($checkdata);\n        } else {\n            $checkdata = fgetcsv($checkhandle, 10000, \",\");\n            $fieldCount = count($checkdata);\n        }\n\n        $count = 1;\n        if ($this->params['type_of_address'][0] == 'am') {\n            while (($checkdata = fgetcsv($checkhandle, 10000, \"\\t\")) !== FALSE) {\n                $count++;\n                //eDebug($checkdata);\n                if (count($checkdata) != $fieldCount) {\n                    echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                    echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                    exit();\n                }\n            }\n        } else {\n            while (($checkdata = fgetcsv($checkhandle, 10000, \",\")) !== FALSE) {\n                $count++;\n                if (count($checkdata) != $fieldCount) {\n                    echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                    echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                    exit();\n                }\n            }\n        }\n\n        fclose($checkhandle);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        echo \"<br/>CSV File passed validation...<br/><br/>Importing....<br/><br/>\";\n        //exit();\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $handle = fopen($file->path, \"r\");\n        $data = fgetcsv($handle, 10000, \",\");\n        //eDebug($data);\n        $dataset = array();\n\n        //mc=1, nt=2, amm=3\n\n        if ($this->params['type_of_address'][0] == 'mc') {\n            //militaryclothing\n            $db->delete('external_addresses', 'source=1');\n\n        } else if ($this->params['type_of_address'][0] == 'nt') {\n            //nametapes\n            $db->delete('external_addresses', 'source=2');\n        } else if ($this->params['type_of_address'][0] == 'am') {\n            //amazon\n            $db->delete('external_addresses', 'source=3');\n        }\n\n        if ($this->params['type_of_address'][0] == 'am') {\n            while (($data = fgetcsv($handle, 10000, \"\\t\")) !== FALSE) {\n                //eDebug($data,true);\n                $extAddy = new external_address();\n\n                //eDebug($data);\n                $extAddy->source = 3;\n                $extAddy->user_id = 0;\n                $name = explode(' ', $data[15]);\n                $extAddy->firstname = $name[0];\n                if (isset($name[3])) {\n                    $extAddy->firstname .= ' ' . $name[1];\n                    $extAddy->middlename = $name[2];\n                    $extAddy->lastname = $name[3];\n                } else if (isset($name[2])) {\n                    $extAddy->middlename = $name[1];\n                    $extAddy->lastname = $name[2];\n                } else {\n                    $extAddy->lastname = $name[1];\n                }\n                $extAddy->organization = $data[15];\n                $extAddy->address1 = $data[16];\n                $extAddy->address2 = $data[17];\n                $extAddy->city = $data[19];\n                $state = new geoRegion();\n                $state = $state->findBy('code', trim($data[20]));\n                if (empty($state->id)) {\n                    $state = new geoRegion();\n                    $state = $state->findBy('name', trim($data[20]));\n                }\n                $extAddy->state = $state->id;\n                $extAddy->zip = str_ireplace(\"'\", '', $data[21]);\n                $extAddy->phone = $data[6];\n                $extAddy->email = $data[4];\n                //eDebug($extAddy);\n                $extAddy->save();\n            }\n        } else {\n            while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n                eDebug($data);\n                $extAddy = new external_address();\n                if ($this->params['type_of_address'][0] == 'mc') {\n                    $extAddy->source = 1;\n                    $extAddy->user_id = 0;\n                    $name = explode(' ', $data[3]);\n                    $extAddy->firstname = $name[0];\n                    if (isset($name[2])) {\n                        $extAddy->middlename = $name[1];\n                        $extAddy->lastname = $name[2];\n                    } else {\n                        $extAddy->lastname = $name[1];\n                    }\n                    $extAddy->organization = $data[4];\n                    $extAddy->address1 = $data[5];\n                    $extAddy->address2 = $data[6];\n                    $extAddy->city = $data[7];\n                    $state = new geoRegion();\n                    $state = $state->findBy('code', $data[8]);\n                    $extAddy->state = $state->id;\n                    $extAddy->zip = str_ireplace(\"'\", '', $data[9]);\n                    $extAddy->phone = $data[20];\n                    $extAddy->email = $data[21];\n                    //eDebug($extAddy);\n                    $extAddy->save();\n\n                    //Check if the shipping add is same as the billing add\n                    if ($data[5] != $data[14]) {\n                        $extAddy = new external_address();\n                        $extAddy->source = 1;\n                        $extAddy->user_id = 0;\n                        $name = explode(' ', $data[12]);\n                        $extAddy->firstname = $name[0];\n                        if (isset($name[2])) {\n                            $extAddy->middlename = $name[1];\n                            $extAddy->lastname = $name[2];\n                        } else {\n                            $extAddy->lastname = $name[1];\n                        }\n                        $extAddy->organization = $data[13];\n                        $extAddy->address1 = $data[14];\n                        $extAddy->address2 = $data[15];\n                        $extAddy->city = $data[16];\n                        $state = new geoRegion();\n                        $state = $state->findBy('code', $data[17]);\n                        $extAddy->state = $state->id;\n                        $extAddy->zip = str_ireplace(\"'\", '', $data[18]);\n                        $extAddy->phone = $data[20];\n                        $extAddy->email = $data[21];\n                        // eDebug($extAddy, true);\n                        $extAddy->save();\n                    }\n                }\n                if ($this->params['type_of_address'][0] == 'nt') {\n                    //eDebug($data,true);\n                    $extAddy->source = 2;\n                    $extAddy->user_id = 0;\n                    $extAddy->firstname = $data[16];\n                    $extAddy->lastname = $data[17];\n                    $extAddy->organization = $data[15];\n                    $extAddy->address1 = $data[18];\n                    $extAddy->address2 = $data[19];\n                    $extAddy->city = $data[20];\n                    $state = new geoRegion();\n                    $state = $state->findBy('code', $data[21]);\n                    $extAddy->state = $state->id;\n                    $extAddy->zip = str_ireplace(\"'\", '', $data[22]);\n                    $extAddy->phone = $data[23];\n                    $extAddy->email = $data[13];\n                    //eDebug($extAddy);\n                    $extAddy->save();\n                }\n            }\n        }\n        fclose($handle);\n        ini_set('auto_detect_line_endings',$line_end);\n        echo \"Done!\";\n    }\n\n}\n\n?>"], "fixing_code": ["<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @package Modules\n * @subpackage Controllers\n */\n\nclass addressController extends expController {\n//\tpublic $useractions = array(\n//        'myaddressbook'=>'Show my addressbook'\n//    );\n    protected $remove_permissions = array(\n        'create',\n        'edit',\n        'delete'\n    );\n    protected $manage_permissions = array(\n//        'import' => 'Import External Addresses',\n        'process' => 'Import External Addresses',\n        'edit_country' => 'Edit Country',\n        'delete_country' => 'Delete Country',\n        'update_country' => 'Update Country',\n        'edit_region' => 'Edit Region',\n        'delete_region' => 'Delete Region',\n        'update_region' => 'Update Region',\n    );\n    public $requires_login = array(\n        'edit'=>'You must be logged in to perform this action',\n        'myaddressbook'=>'You must be logged in to perform this action',\n    );\n\tpublic $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'pagination',\n        'rss',\n        'tags',\n        'twitter',\n    ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    static function displayname() { return gt(\"Addresses\"); }\n    static function description() { return gt(\"Display and manage addresses of users on your site.\"); }\n    static function canImportData() { return true;}\n\n    static function hasSources() {\n        return false;\n    }\n\n    function showall() {\n//        redirect_to(array(\"controller\"=>'address',\"action\"=>'myaddressbook'));\n        $this->myaddressbook();\n\t}\n\n    public function edit()\n    {\n        global $user;\n\n        $id = !empty($this->params['id']) ? $this->params['id'] : null;\n\n        // check to see if we should be editing.  You either need to be an admin, or editing own account.\n        if ($user->isAdmin() || ($user->id == $id)) {\n            $record = new address($id);\n        } else {\n            flash('error', gt('You do not have the proper permissions to edit this address'));\n            expHistory::back();\n        }\n\n        $config = ecomconfig::getConfig('address_allow_admins_all');\n        assign_to_template(array(\n            'record'=>$record,\n            'admin_config'=>$config\n        ));\n        if (expSession::get('customer-signup')) {\n            assign_to_template(array(\n                'checkout'=>true\n            ));\n        }\n    }\n\n\tpublic function myaddressbook() {\n\t\tglobal $user;\n\n\t\t// check if the user is logged in.\n\t\texpQueue::flashIfNotLoggedIn('message',gt('You must be logged in to manage your address book.'));  //fixme is this redundant to common routine?\n        if (!$user->isAdmin() && $this->params['user_id'] != $user->id) {\n            unset($this->params['user_id']);\n        }\n\t\texpHistory::set('viewable', $this->params);\n\t\t$userid = (empty($this->params['user_id'])) ? $user->id : $this->params['user_id'];\n\t\tassign_to_template(array(\n            'addresses'=>$this->address->find('all', 'user_id='.$userid)\n        ));\n\t}\n\n\tfunction show() {\n\t    expHistory::set('viewable', $this->params);\n\t\tassign_to_template(array(\n            'address'=>new address($this->params['id'])\n        ));\n\t}\n\n\tpublic function update() {\n        global $user;\n\n        if (expSession::get('customer-signup')) expSession::set('customer-signup', false);\n        if (isset($this->params['address_country_id'])) {\n            $this->params['country'] = $this->params['address_country_id'];\n            unset($this->params['address_country_id']);\n        }\n        if (isset($this->params['address_region_id'])) {\n            $this->params['state'] = $this->params['address_region_id'];\n            unset($this->params['address_region_id']);\n        }\n\t\tif ($user->isLoggedIn()) {\n\t\t\t// check to see how many other addresses this user has already.\n\t\t\t$count = $this->address->find('count', 'user_id='.$user->id);\n\t\t\t// if this is first address save for this user we'll make this the default\n\t\t\tif ($count == 0)\n            {\n                $this->params['is_default'] = 1;\n                $this->params['is_billing'] = 1;\n                $this->params['is_shipping'] = 1;\n            }\n\t\t\t// associate this address with the current user.\n\t\t\t$this->params['user_id'] = $user->id;\n\t\t\t// save the object\n\t\t\t$this->address->update($this->params);\n\t\t}\n        else { //if (ecomconfig::getConfig('allow_anonymous_checkout')){\n            //user is not logged in, but allow anonymous checkout is enabled so we'll check\n            //a few things that we don't check in the parent 'stuff and create a user account.\n            $this->params['is_default'] = 1;\n            $this->params['is_billing'] = 1;\n            $this->params['is_shipping'] = 1;\n            $this->address->update($this->params);\n        }\n\t\texpHistory::back();\n\t}\n\n\tpublic function delete() {\n\t    global $user;\n\n        $count = $this->address->find('count', 'user_id=' . $user->id);\n        if($count > 1)\n        {\n            $address = new address($this->params['id']);\n\t        if ($user->isAdmin() || ($user->id == $address->user_id)) {\n                if ($address->is_billing)\n                {\n                    $billAddress = $this->address->find('first', 'user_id=' . $user->id . \" AND id != \" . $address->id);\n                    $billAddress->is_billing = true;\n                    $billAddress->save();\n                }\n                if ($address->is_shipping)\n                {\n                    $shipAddress = $this->address->find('first', 'user_id=' . $user->id . \" AND id != \" . $address->id);\n                    $shipAddress->is_shipping = true;\n                    $shipAddress->save();\n                }\n\t            parent::delete();\n\t        }\n        }\n        else\n        {\n            flash(\"error\", gt(\"You must have at least one address.\"));\n        }\n\t    expHistory::back();\n\t}\n\n    public function activate_address()\n    {\n        global $db, $user;\n\n        $object = new stdClass();\n        $object->id = $this->params['id'];\n        $db->setUniqueFlag($object, 'addresses', expString::escape($this->params['is_what']), \"user_id=\" . $user->id);\n        flash(\"message\", gt(\"Successfully updated address.\"));\n        expHistory::back();\n    }\n\n    public function manage()\n    {\n        expHistory::set('manageable',$this->params);\n        $gc = new geoCountry();\n        $countries = $gc->find('all');\n\n        $gr = new geoRegion();\n        $regions = $gr->find('all',null,'rank asc,name asc');\n\n        assign_to_template(array(\n            'countries'=>$countries,\n            'regions'=>$regions\n        ));\n    }\n\n    public function manage_update()\n    {\n        global $db;\n\n        //eDebug($this->params,true);\n        //countries\n        $db->columnUpdate('geo_country','active',0,'active=1');\n        foreach($this->params['country'] as $country_id=>$is_active)\n        {\n            $gc = new geoCountry($country_id);\n            $gc->active = true;\n            $gc->save();\n        }\n        //country default\n        $db->columnUpdate('geo_country','is_default',0,'is_default=1');\n        if(isset($this->params['country_default']))\n        {\n            $gc = new geoCountry(intval($this->params['country_default']));\n            $db->setUniqueFlag($gc,'geo_country','is_default','id=' . $gc->id);\n            $gc->refresh();\n        }\n        //regions\n        $db->columnUpdate('geo_region','active',0,'active=1');\n        foreach($this->params['region'] as $region_id=>$is_active)\n        {\n            $gr = new geoRegion($region_id);\n            $gr->active = true;\n            if(isset($this->params['region_rank'][$region_id])) $gr->rank = $this->params['region_rank'][$region_id];\n            $gr->save();\n        }\n        flash('message',gt('Address configurations successfully updated.'));\n        redirect_to(array('controller'=>'address','action'=>'manage'));\n//        $this->manage();\n    }\n\n    function edit_country() {\n        $country_id = !empty($this->params['id']) ? $this->params['id'] : null;\n        $country = new geoCountry($country_id);\n        assign_to_template(array(\n            'record'=>$country,\n        ));\n    }\n\n    function update_country() {\n        $country_id = !empty($this->params['id']) ? $this->params['id'] : null;\n        $country = new geoCountry($country_id);\n        $country->update($this->params);\n        expHistory::returnTo('manageable');\n    }\n\n    function delete_country() {\n        if (empty($this->params['id'])) {\n            flash('error', gt('Missing id for the country you would like to delete'));\n            expHistory::back();\n        }\n        $country = new geoCountry($this->params['id']);\n        $country->delete();\n        expHistory::returnTo('manageable');\n    }\n\n    function edit_region() {\n        $region_id = !empty($this->params['id']) ? $this->params['id'] : null;\n        $region = new geoRegion($region_id);\n        assign_to_template(array(\n            'record'=>$region,\n        ));\n    }\n\n    function update_region() {\n        $region_id = !empty($this->params['id']) ? $this->params['id'] : null;\n        $region = new geoRegion($region_id);\n        $region->update($this->params);\n        expHistory::returnTo('manageable');\n    }\n\n    function delete_region() {\n        if (empty($this->params['id'])) {\n            flash('error', gt('Missing id for the region you would like to delete'));\n            expHistory::back();\n        }\n        $region = new geoRegion($this->params['id']);\n        $region->delete();\n        expHistory::returnTo('manageable');\n    }\n\n    /**\n     * Import external addresses\n     */\n    function import() {\n        $sources = array('mc' => 'MilitaryClothing.com', 'nt' => 'NameTapes.com', 'am' => 'Amazon');\n        assign_to_template(array(\n            'sources' => $sources\n        ));\n    }\n\n    function process_external_addresses() {\n        global $db;\n\n        set_time_limit(0);\n        //$file = new expFile($this->params['expFile']['batch_process_upload'][0]);\n        eDebug($this->params);\n//        eDebug($_FILES,true);\n        if (!empty($_FILES['address_csv']['error'])) {\n            flash('error', gt('There was an error uploading your file.  Please try again.'));\n            redirect_to(array('controller' => 'store', 'action' => 'import_external_addresses'));\n//            $this->import_external_addresses();\n        }\n\n        $file = new stdClass();\n        $file->path = $_FILES['address_csv']['tmp_name'];\n        echo \"Validating file...<br/>\";\n\n        //replace tabs with commas\n        /*if($this->params['type_of_address'][0] == 'am')\n        {\n            $checkhandle = fopen($file->path, \"w\");\n            $oldFile = file_get_contents($file->path);\n            $newFile = str_ireplace(chr(9),',',$oldFile);\n            fwrite($checkhandle,$newFile);\n            fclose($checkhandle);\n        }*/\n\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $checkhandle = fopen($file->path, \"r\");\n        if ($this->params['type_of_address'][0] == 'am') {\n            $checkdata = fgetcsv($checkhandle, 10000, \"\\t\");\n            $fieldCount = count($checkdata);\n        } else {\n            $checkdata = fgetcsv($checkhandle, 10000, \",\");\n            $fieldCount = count($checkdata);\n        }\n\n        $count = 1;\n        if ($this->params['type_of_address'][0] == 'am') {\n            while (($checkdata = fgetcsv($checkhandle, 10000, \"\\t\")) !== FALSE) {\n                $count++;\n                //eDebug($checkdata);\n                if (count($checkdata) != $fieldCount) {\n                    echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                    echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                    exit();\n                }\n            }\n        } else {\n            while (($checkdata = fgetcsv($checkhandle, 10000, \",\")) !== FALSE) {\n                $count++;\n                if (count($checkdata) != $fieldCount) {\n                    echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                    echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                    exit();\n                }\n            }\n        }\n\n        fclose($checkhandle);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        echo \"<br/>CSV File passed validation...<br/><br/>Importing....<br/><br/>\";\n        //exit();\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $handle = fopen($file->path, \"r\");\n        $data = fgetcsv($handle, 10000, \",\");\n        //eDebug($data);\n        $dataset = array();\n\n        //mc=1, nt=2, amm=3\n\n        if ($this->params['type_of_address'][0] == 'mc') {\n            //militaryclothing\n            $db->delete('external_addresses', 'source=1');\n\n        } else if ($this->params['type_of_address'][0] == 'nt') {\n            //nametapes\n            $db->delete('external_addresses', 'source=2');\n        } else if ($this->params['type_of_address'][0] == 'am') {\n            //amazon\n            $db->delete('external_addresses', 'source=3');\n        }\n\n        if ($this->params['type_of_address'][0] == 'am') {\n            while (($data = fgetcsv($handle, 10000, \"\\t\")) !== FALSE) {\n                //eDebug($data,true);\n                $extAddy = new external_address();\n\n                //eDebug($data);\n                $extAddy->source = 3;\n                $extAddy->user_id = 0;\n                $name = explode(' ', $data[15]);\n                $extAddy->firstname = $name[0];\n                if (isset($name[3])) {\n                    $extAddy->firstname .= ' ' . $name[1];\n                    $extAddy->middlename = $name[2];\n                    $extAddy->lastname = $name[3];\n                } else if (isset($name[2])) {\n                    $extAddy->middlename = $name[1];\n                    $extAddy->lastname = $name[2];\n                } else {\n                    $extAddy->lastname = $name[1];\n                }\n                $extAddy->organization = $data[15];\n                $extAddy->address1 = $data[16];\n                $extAddy->address2 = $data[17];\n                $extAddy->city = $data[19];\n                $state = new geoRegion();\n                $state = $state->findBy('code', trim($data[20]));\n                if (empty($state->id)) {\n                    $state = new geoRegion();\n                    $state = $state->findBy('name', trim($data[20]));\n                }\n                $extAddy->state = $state->id;\n                $extAddy->zip = str_ireplace(\"'\", '', $data[21]);\n                $extAddy->phone = $data[6];\n                $extAddy->email = $data[4];\n                //eDebug($extAddy);\n                $extAddy->save();\n            }\n        } else {\n            while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n                eDebug($data);\n                $extAddy = new external_address();\n                if ($this->params['type_of_address'][0] == 'mc') {\n                    $extAddy->source = 1;\n                    $extAddy->user_id = 0;\n                    $name = explode(' ', $data[3]);\n                    $extAddy->firstname = $name[0];\n                    if (isset($name[2])) {\n                        $extAddy->middlename = $name[1];\n                        $extAddy->lastname = $name[2];\n                    } else {\n                        $extAddy->lastname = $name[1];\n                    }\n                    $extAddy->organization = $data[4];\n                    $extAddy->address1 = $data[5];\n                    $extAddy->address2 = $data[6];\n                    $extAddy->city = $data[7];\n                    $state = new geoRegion();\n                    $state = $state->findBy('code', $data[8]);\n                    $extAddy->state = $state->id;\n                    $extAddy->zip = str_ireplace(\"'\", '', $data[9]);\n                    $extAddy->phone = $data[20];\n                    $extAddy->email = $data[21];\n                    //eDebug($extAddy);\n                    $extAddy->save();\n\n                    //Check if the shipping add is same as the billing add\n                    if ($data[5] != $data[14]) {\n                        $extAddy = new external_address();\n                        $extAddy->source = 1;\n                        $extAddy->user_id = 0;\n                        $name = explode(' ', $data[12]);\n                        $extAddy->firstname = $name[0];\n                        if (isset($name[2])) {\n                            $extAddy->middlename = $name[1];\n                            $extAddy->lastname = $name[2];\n                        } else {\n                            $extAddy->lastname = $name[1];\n                        }\n                        $extAddy->organization = $data[13];\n                        $extAddy->address1 = $data[14];\n                        $extAddy->address2 = $data[15];\n                        $extAddy->city = $data[16];\n                        $state = new geoRegion();\n                        $state = $state->findBy('code', $data[17]);\n                        $extAddy->state = $state->id;\n                        $extAddy->zip = str_ireplace(\"'\", '', $data[18]);\n                        $extAddy->phone = $data[20];\n                        $extAddy->email = $data[21];\n                        // eDebug($extAddy, true);\n                        $extAddy->save();\n                    }\n                }\n                if ($this->params['type_of_address'][0] == 'nt') {\n                    //eDebug($data,true);\n                    $extAddy->source = 2;\n                    $extAddy->user_id = 0;\n                    $extAddy->firstname = $data[16];\n                    $extAddy->lastname = $data[17];\n                    $extAddy->organization = $data[15];\n                    $extAddy->address1 = $data[18];\n                    $extAddy->address2 = $data[19];\n                    $extAddy->city = $data[20];\n                    $state = new geoRegion();\n                    $state = $state->findBy('code', $data[21]);\n                    $extAddy->state = $state->id;\n                    $extAddy->zip = str_ireplace(\"'\", '', $data[22]);\n                    $extAddy->phone = $data[23];\n                    $extAddy->email = $data[13];\n                    //eDebug($extAddy);\n                    $extAddy->save();\n                }\n            }\n        }\n        fclose($handle);\n        ini_set('auto_detect_line_endings',$line_end);\n        echo \"Done!\";\n    }\n\n}\n\n?>"], "filenames": ["framework/modules/addressbook/controllers/addressController.php"], "buggy_code_start_loc": [35], "buggy_code_end_loc": [87], "fixing_code_start_loc": [35], "fixing_code_end_loc": [104], "type": "CWE-200", "message": "framework/modules/addressbook/controllers/addressController.php in Exponent CMS v2.4.0 allows remote attackers to read user information via a modified id number, as demonstrated by address/edit/id/1, related to an \"addresses, countries, and regions\" issue.", "other": {"cve": {"id": "CVE-2016-9285", "sourceIdentifier": "cve@mitre.org", "published": "2016-11-11T22:59:03.357", "lastModified": "2017-07-28T01:29:08.220", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "framework/modules/addressbook/controllers/addressController.php in Exponent CMS v2.4.0 allows remote attackers to read user information via a modified id number, as demonstrated by address/edit/id/1, related to an \"addresses, countries, and regions\" issue."}, {"lang": "es", "value": "framework/modules/addressbook/controllers/addressController.php en Exponent CMS v2.4.0 permite a atacantes remotos leer informaci\u00f3n de usuario a trav\u00e9s de un n\u00famero id modificado, como es demostrado por address/edit/id/1, relacionado con un problema \"addresses, countries, and regions\"."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:2.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "CFEAA82F-83B2-49B8-B860-2F18C3C66321"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/94296", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1037281", "source": "cve@mitre.org"}, {"url": "https://github.com/exponentcms/exponent-cms/commit/9eeed1e82fb9e6d0d41e7dd10672df48045a9b59", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch"]}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/9eeed1e82fb9e6d0d41e7dd10672df48045a9b59"}}