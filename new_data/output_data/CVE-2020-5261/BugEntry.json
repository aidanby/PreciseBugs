{"buggy_code": ["using Sustainsys.Saml2.Metadata;\nusing Sustainsys.Saml2.Saml2P;\nusing System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Sustainsys.Saml2.Configuration\n{\n    /// <summary>\n    /// Options for the service provider's behaviour; i.e. everything except\n    /// the idp and federation list.\n    /// </summary>\n    public class SPOptions\n    {\n        /// <summary>\n        /// Ctor\n        /// </summary>\n        public SPOptions()\n        {\n\t\t\tMetadataCacheDuration = new XsdDuration(hours: 1);\n            Compatibility = new Compatibility();\n            OutboundSigningAlgorithm = XmlHelpers.GetDefaultSigningAlgorithmName();\n            MinIncomingSigningAlgorithm = XmlHelpers.GetDefaultSigningAlgorithmName();\n        }\n\n        /// <summary>\n        /// Construct the options from the given configuration section\n        /// </summary>\n        /// <param name=\"configSection\"></param>\n        public SPOptions(SustainsysSaml2Section configSection)\n        {\n            if (configSection == null)\n            {\n                throw new ArgumentNullException(nameof(configSection));\n            }\n\n            ReturnUrl = configSection.ReturnUrl;\n            MetadataCacheDuration = configSection.Metadata.CacheDuration;\n            MetadataValidDuration = configSection.Metadata.ValidUntil;\n            WantAssertionsSigned = configSection.Metadata.WantAssertionsSigned;\n            ValidateCertificates = configSection.ValidateCertificates;\n            DiscoveryServiceUrl = configSection.DiscoveryServiceUrl;\n            EntityId = configSection.EntityId;\n            ModulePath = configSection.ModulePath;\n            PublicOrigin = configSection.PublicOrigin;\n            Organization = configSection.Organization;\n            OutboundSigningAlgorithm = XmlHelpers.GetFullSigningAlgorithmName(configSection.OutboundSigningAlgorithm);\n            MinIncomingSigningAlgorithm = XmlHelpers.GetFullSigningAlgorithmName(configSection.MinIncomingSigningAlgorithm);\n            AuthenticateRequestSigningBehavior = configSection.AuthenticateRequestSigningBehavior;\n            NameIdPolicy = new Saml2NameIdPolicy(\n                configSection.NameIdPolicyElement.AllowCreate, configSection.NameIdPolicyElement.Format);\n            RequestedAuthnContext = new Saml2RequestedAuthnContext(configSection.RequestedAuthnContext);\n            Compatibility = new Compatibility(configSection.Compatibility);\n\n            configSection.ServiceCertificates.RegisterServiceCertificates(this);\n\n            foreach (var acs in configSection.AttributeConsumingServices)\n            {\n                AttributeConsumingServices.Add(acs);\n            }\n\n            foreach (var contact in configSection.Contacts)\n            {\n                Contacts.Add(contact);\n            }\n        }\n\n        /// <summary>\n        /// Return Uri to redirect the client to, if no return uri was specified\n        /// when initiating the signin sequence.\n        /// </summary>\n        public Uri ReturnUrl { get; set; }\n\n        /// <summary>\n        /// Recommendation of cache refresh interval to those who reads our\n        /// metadata.\n        /// </summary>\n        public XsdDuration MetadataCacheDuration { get; set; }\n\n        /// <summary>\n        /// Maximum validity duration after fetch for those who reads our\n        /// metadata. Exposed as an absolute validUntil time in the metadata.\n        /// If set to null, no validUntil is exposed in metadata.\n        /// </summary>\n        public TimeSpan? MetadataValidDuration { get; set; }\n\n        volatile private Saml2PSecurityTokenHandler saml2PSecurityTokenHandler;\n\n        /// <summary>\n        /// The security token handler used to process incoming assertions for this SP.\n        /// The default value is to lazy create one using the current EntityId.\n        /// </summary>\n        public Saml2PSecurityTokenHandler Saml2PSecurityTokenHandler\n        {\n            get\n            {\n                // Capture in a local variable to prevent race conditions. Reads and writes\n                // of references are atomic so there is no need for a lock.\n                var value = saml2PSecurityTokenHandler;\n                if(value == null)\n                {\n                    // Set the saved value, but don't trust it - still use a local var for the return.\n                    saml2PSecurityTokenHandler = value = new Saml2PSecurityTokenHandler(this);\n                }\n\n                return value;\n            }\n            set\n            {\n                saml2PSecurityTokenHandler = value; \n            }\n        }\n\n        /// <summary>\n        /// Url to discovery service to use if no idp is specified in the sign in call.\n        /// </summary>\n        public Uri DiscoveryServiceUrl { get; set; }\n\n        private EntityId entityId;\n\n        /// <summary>\n        /// EntityId - The identity of the ServiceProvider to use when sending requests to Idp\n        /// and presenting the SP in metadata.\n        /// </summary>\n        public EntityId EntityId\n        {\n            get\n            {\n                return entityId;\n            }\n            set\n            {\n                if(saml2PSecurityTokenHandler != null)\n                {\n                    throw new InvalidOperationException(\"Can't change entity id when a token handler has been instantiated.\");\n                }\n                entityId = value;\n            }\n        }\n\n        private string modulePath = \"/Saml2\";\n\n        /// <summary>\n        /// Application root relative path for Saml2 endpoints. The\n        /// default is \"/Saml2\".\n        /// </summary>\n        public string ModulePath\n        {\n            get\n            {\n                return modulePath;\n            }\n            set\n            {\n                if(value == null)\n                {\n                    throw new ArgumentNullException(nameof(value));\n                }\n\n                value = value.TrimEnd('/');\n\n                if (!value.StartsWith(\"/\", StringComparison.OrdinalIgnoreCase))\n                {\n                    value = \"/\" + value;\n                }\n\n                modulePath = value;\n            }\n        }\n\n        /// <summary>\n        /// By default, the service provider uses the host, protocol, port and\n        /// application root path from the HTTP request when creating links. \n        /// This might not be accurate in reverse proxy or load-balancing\n        /// situations. You can override the origin used for link generation\n        /// for the entire application using this property. To override per request,\n        /// implement a <code>GetPublicOrigin</code> Notification function.\n        /// </summary>\n        public Uri PublicOrigin { get; set; }\n\n        /// <summary>\n        /// Metadata describing the organization responsible for the entity.\n        /// </summary>\n        public Organization Organization { get; set; }\n\n        /// <summary>\n        /// NameId Policy.\n        /// </summary>\n        public Saml2NameIdPolicy NameIdPolicy { get; set; }\n\n        /// <summary>\n        /// RequestedAuthnContext\n        /// </summary>\n        public Saml2RequestedAuthnContext RequestedAuthnContext { get; set; }\n\n        readonly ICollection<ContactPerson> contacts = new List<ContactPerson>();\n\n        /// <summary>\n        /// Collection of contacts for the SAML2 entity.\n        /// </summary>\n        public ICollection<ContactPerson> Contacts\n        {\n            get\n            {\n                return contacts;\n            }\n        }\n\n        readonly ICollection<AttributeConsumingService> attributeConsumingServices\n\t\t\t= new List<AttributeConsumingService>();\n\n        /// <summary>\n        /// Collection of attribute consuming services for the service provider.\n        /// </summary>\n        public ICollection<AttributeConsumingService> AttributeConsumingServices\n        {\n            get\n            {\n                return attributeConsumingServices;\n            }\n        }\n\n        readonly ServiceCertificateCollection serviceCertificates = new ServiceCertificateCollection();\n\n        /// <summary>\n        /// Certificates used by the service provider for signing or decryption.\n        /// </summary>\n        public ServiceCertificateCollection ServiceCertificates\n        {\n            get\n            {\n                return serviceCertificates;\n            }\n        }\n\n        /// <summary>\n        /// Certificates valid for use in decryption\n        /// </summary>\n        public ReadOnlyCollection<X509Certificate2> DecryptionServiceCertificates\n        {\n            get\n            {\n                var decryptionCertificates = ServiceCertificates\n                    .Where(c => c.Use.HasFlag(CertificateUse.Encryption) || c.Use == CertificateUse.Both)\n                    .Select(c => c.Certificate);\n\n                return decryptionCertificates.ToList().AsReadOnly();\n            }\n        }\n\n        /// <summary>\n        /// Certificate for use in signing outbound requests\n        /// </summary>\n        public X509Certificate2 SigningServiceCertificate\n        {\n            get\n            {\n                var signingCertificates = ServiceCertificates\n                    .Where(c => c.Status == CertificateStatus.Current)\n                    .Where(c => c.Use.HasFlag(CertificateUse.Signing) || c.Use == CertificateUse.Both)\n                    .Select(c => c.Certificate);\n\n                return signingCertificates.FirstOrDefault();\n            }\n        }\n\n        /// <summary>\n        /// Certificates to be published in metadata\n        /// </summary>\n        public ReadOnlyCollection<ServiceCertificate> MetadataCertificates\n        {\n            get\n            {\n                var futureEncryptionCertExists = PublishableServiceCertificates\n                    .Any(c => c.Status == CertificateStatus.Future && (c.Use == CertificateUse.Encryption || c.Use == CertificateUse.Both));\n\n                var metaDataCertificates = PublishableServiceCertificates\n                    .Where(\n                        // Signing & \"Both\" certs always get published because we want Idp's to be aware of upcoming keys\n                        c => c.Status == CertificateStatus.Future || c.Use != CertificateUse.Encryption\n                        // But current Encryption cert stops getting published immediately when a Future one is added\n                        // (of course we still decrypt with the current cert, but that's a different part of the code)\n                        || (c.Status == CertificateStatus.Current && c.Use == CertificateUse.Encryption && !futureEncryptionCertExists)\n                        || c.MetadataPublishOverride != MetadataPublishOverrideType.None\n                    ).ToList();\n\n                var futureBothCertExists = metaDataCertificates\n                    .Any(c => c.Status == CertificateStatus.Future && c.Use == CertificateUse.Both);\n\n                foreach(var cert in metaDataCertificates)\n                {\n                    // Just like we stop publishing Encryption cert immediately when a Future one is added,\n                    // in the case of a \"Both\" cert we should switch the current use to Signing so that Idp's stop sending\n                    // us certs encrypted with the old key\n                    if (cert.Use == CertificateUse.Both && cert.Status == CertificateStatus.Current && futureBothCertExists)\n                    {\n                        cert.Use = CertificateUse.Signing;\n                    }\n\n                    if (cert.MetadataPublishOverride == MetadataPublishOverrideType.PublishEncryption)\n                    {\n                        cert.Use = CertificateUse.Encryption;\n                    }\n                    if (cert.MetadataPublishOverride == MetadataPublishOverrideType.PublishSigning)\n                    {\n                        cert.Use = CertificateUse.Signing;\n                    }\n                    if (cert.MetadataPublishOverride == MetadataPublishOverrideType.PublishUnspecified)\n                    {\n                        cert.Use = CertificateUse.Both;\n                    }\n                }\n\n                return metaDataCertificates.AsReadOnly();\n            }\n        }\n\n        private static CertificateUse ConvertUse(CertificateUse certificateUse)\n        {\n            var use = certificateUse & (CertificateUse.Signing | CertificateUse.Encryption);\n\n            if (use == (CertificateUse.Signing | CertificateUse.Encryption))\n            {\n                use = CertificateUse.Both;\n            }\n            return use;\n        }\n\n        private IEnumerable<ServiceCertificate> PublishableServiceCertificates\n        {\n            get\n            {\n                return ServiceCertificates\n                    .Where(c => c.MetadataPublishOverride != MetadataPublishOverrideType.DoNotPublish\n                    && c.Use != CertificateUse.TlsClient) // Certs that are only Tls should not be published.\n                    .Select(c => new ServiceCertificate // Finally create new instances and convert use to ignore Tls.\n                    {\n                        Use = ConvertUse(c.Use),\n                        Status = c.Status,\n                        MetadataPublishOverride = c.MetadataPublishOverride,\n                        Certificate = c.Certificate\n                    });\n            }\n        }\n\n        /// <summary>\n        /// Signing behaviour for AuthnRequests.\n        /// </summary>\n        public SigningBehavior AuthenticateRequestSigningBehavior { get; set; }\n\n        /// <summary>\n        /// Signing algorithm for metadata and outbound messages. Can be \n        /// overriden for each <see cref=\"IdentityProvider\"/>.\n        /// </summary>\n        public string OutboundSigningAlgorithm { get; set; }\n        \n        /// <summary>\n        /// Metadata flag that we want assertions to be signed.\n        /// </summary>\n        public bool WantAssertionsSigned { get; set; }\n\n        /// <summary>\n        /// Validate certificates when validating signatures? Normally not a\n        /// good idea as SAML2 deployments typically exchange certificates\n        /// directly and instead of relying on the public certificate\n        /// infrastructure.\n        /// </summary>\n        public bool ValidateCertificates { get; set; }\n\n        /// <summary>\n        /// Compatibility settings. Can be used to make Saml2 accept\n        /// certain non-standard behaviour.\n        /// </summary>\n        public Compatibility Compatibility { get; set; }\n\n        private string minIncomingSigningAlgorithm;\n        \n        /// <summary>\n        /// Minimum accepted signature algorithm for any incoming messages.\n        /// </summary>\n        public string MinIncomingSigningAlgorithm\n        {\n            get\n            {\n                return minIncomingSigningAlgorithm;\n            }\n            set\n            {\n                if(!XmlHelpers.KnownSigningAlgorithms.Contains(value))\n                {\n                    throw new ArgumentException(\"The signing algorithm \" + value +\n                        \" is unknown or not supported by the current .NET Framework.\");\n                }\n                minIncomingSigningAlgorithm = value;\n            }\n        }\n\n        /// <summary>\n        /// Adapter to logging framework of hosting application.\n        /// </summary>\n        public ILoggerAdapter Logger { get; set; }\n    }\n}\n", "using Microsoft.IdentityModel.Tokens;\nusing Microsoft.IdentityModel.Tokens.Saml2;\nusing Sustainsys.Saml2.Configuration;\nusing Sustainsys.Saml2.Internal;\nusing Sustainsys.Saml2.Tokens;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\n\nnamespace Sustainsys.Saml2.Saml2P\n{\n\t/// <summary>\n\t/// Somewhat ugly subclassing to be able to access some methods that are protected\n\t/// on Saml2SecurityTokenHandler. The public interface of Saml2SecurityTokenHandler\n\t/// expects the actual assertion to be signed, which is not always the case when\n\t/// using Saml2-P. The assertion can be embedded in a signed response. Or the signing\n\t/// could be handled at transport level.\n\t/// </summary>\n\tpublic class Saml2PSecurityTokenHandler : Saml2SecurityTokenHandler\n\t{\n\t\tpublic Saml2PSecurityTokenHandler(): this(null)\n\t\t{\n\t\t\t// backward compatibility = null spOptions\n\t\t}\n\n\t\tpublic Saml2PSecurityTokenHandler(SPOptions spOptions)\n\t\t{\n\t\t\tSerializer = new Saml2PSerializer(spOptions);\n\t\t}\n\n\t\t// Overridden to fix the fact that the base class version uses NotBefore as the token replay expiry time\n\t\t// Due to the fact that we can't override the ValidateToken function (it's overridden in the base class!)\n\t\t// we have to parse the token again.\n\t\t// This can be removed when:\n\t\t// https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/898\n\t\t// is fixed.\n\t\tprotected override void ValidateTokenReplay(DateTime? expirationTime, string securityToken, TokenValidationParameters validationParameters)\n\t\t{\n\t\t\tvar saml2Token = ReadSaml2Token(securityToken);\n\t\t\tbase.ValidateTokenReplay(saml2Token.Assertion.Conditions.NotOnOrAfter,\n\t\t\t\tsecurityToken, validationParameters);\n\t\t}\n\n\t\t// TODO: needed with Microsoft.identitymodel?\n\t\t/// <summary>\n\t\t/// Process authentication statement from SAML assertion. WIF chokes if the authentication statement \n\t\t/// contains a DeclarationReference, so we clear this out before calling the base method\n\t\t/// http://referencesource.microsoft.com/#System.IdentityModel/System/IdentityModel/Tokens/Saml2SecurityTokenHandler.cs,1970\n\t\t/// </summary>\n\t\t/// <param name=\"statement\">Authentication statement</param>\n\t\t/// <param name=\"subject\">Claim subject</param>\n\t\t/// <param name=\"issuer\">Assertion Issuer</param>\n\t\t[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", MessageId = \"1\")]\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", MessageId = \"0\")]\n        protected override void ProcessAuthenticationStatement(Saml2AuthenticationStatement statement, ClaimsIdentity subject, string issuer)\n        {\n            if (statement.AuthenticationContext != null)\n            {\n                statement.AuthenticationContext.DeclarationReference = null;\n            }\n            base.ProcessAuthenticationStatement(statement, subject, issuer);\n\n            if(statement.SessionIndex != null)\n            {\n                var nameIdClaim = subject.FindFirst(ClaimTypes.NameIdentifier);\n\n                if (nameIdClaim != null)\n                {\n                    subject.AddClaim(\n                        new Claim(\n                            Saml2ClaimTypes.LogoutNameIdentifier,\n                            DelimitedString.Join(\n                                nameIdClaim.Properties.GetValueOrEmpty(ClaimProperties.SamlNameIdentifierNameQualifier),\n                                nameIdClaim.Properties.GetValueOrEmpty(ClaimProperties.SamlNameIdentifierSPNameQualifier),\n                                nameIdClaim.Properties.GetValueOrEmpty(ClaimProperties.SamlNameIdentifierFormat),\n                                nameIdClaim.Properties.GetValueOrEmpty(ClaimProperties.SamlNameIdentifierSPProvidedId),\n                                nameIdClaim.Value),\n                            null,\n                            issuer));\n                }\n\n                subject.AddClaim(\n                    new Claim(Saml2ClaimTypes.SessionIndex, statement.SessionIndex, null, issuer));\n            }\n        }\n\n\t\tprotected override Saml2SecurityToken ValidateSignature(string token, TokenValidationParameters validationParameters)\n\t\t{\n\t\t\t// Just skip signature validation -- we do this elsewhere\n\t\t\treturn ReadSaml2Token(token);\n\t\t}\n    }\n}\n", "using Microsoft.IdentityModel.Tokens.Saml2;\nusing Microsoft.IdentityModel.Tokens;\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Xml;\nusing Sustainsys.Saml2.Configuration;\nusing System.Security.Cryptography;\nusing Sustainsys.Saml2.Internal;\nusing Sustainsys.Saml2.Exceptions;\nusing System.Diagnostics.CodeAnalysis;\nusing Sustainsys.Saml2.Metadata;\n\nnamespace Sustainsys.Saml2.Saml2P\n{\n    /// <summary>\n    /// Represents a SAML2 response according to 3.3.3. The class is immutable (to an\n    /// external observer. Internal state is lazy initiated).\n    /// </summary>\n    public class Saml2Response : ISaml2Message\n    {\n        /// <summary>Holds all assertion element nodes</summary>\n        private IEnumerable<XmlElement> allAssertionElementNodes;\n\n        /// <summary>\n        /// Read the supplied Xml and parse it into a response.\n        /// </summary>\n        /// <param name=\"xml\">xml data.</param>\n        /// <returns>Saml2Response</returns>\n        /// <exception cref=\"XmlException\">On xml errors or unexpected xml structure.</exception>\n        public static Saml2Response Read(string xml)\n        {\n            return Read(xml, null, null);\n        }\n\n        /// <summary>\n        /// Read the supplied Xml and parse it into a response.\n        /// </summary>\n        /// <param name=\"xml\">xml data.</param>\n        /// <param name=\"expectedInResponseTo\">The expected value of the\n        /// InReplyTo parameter in the message.</param>\n        /// <returns>Saml2Response</returns>\n        /// <exception cref=\"XmlException\">On xml errors or unexpected xml structure.</exception>\n        public static Saml2Response Read(string xml, Saml2Id expectedInResponseTo)\n        {\n            return Read(xml, expectedInResponseTo, null);\n        }\n\n        /// <summary>\n        /// Read the supplied Xml and parse it into a response.\n        /// </summary>\n        /// <param name=\"xml\">xml data.</param>\n        /// <param name=\"expectedInResponseTo\">The expected value of the\n        /// InReplyTo parameter in the message.</param>\n        /// <param name=\"options\">Service provider settings used when validating Saml response</param>\n        /// <returns>Saml2Response</returns>\n        /// <exception cref=\"XmlException\">On xml errors or unexpected xml structure.</exception>\n        public static Saml2Response Read(string xml, Saml2Id expectedInResponseTo, IOptions options)\n        {\n            var x = XmlHelpers.XmlDocumentFromString(xml);\n\n            return new Saml2Response(x.DocumentElement, expectedInResponseTo, options);\n        }\n\n        /// <summary>\n        /// Ctor\n        /// </summary>\n        /// <param name=\"xml\">Root xml element.</param>\n        /// <param name=\"expectedInResponseTo\">The expected value of the\n        /// InReplyTo parameter in the message.</param>\n        /// <param name=\"options\">Service provider settings used when validating Saml response</param>\n#pragma warning disable IDE0060 // Remove unused parameter\n        public Saml2Response(XmlElement xml, Saml2Id expectedInResponseTo, IOptions options)\n            : this(xml, expectedInResponseTo)\n#pragma warning restore IDE0060 // Remove unused parameter\n        { }\n\n        /// <summary>\n        /// Ctor\n        /// </summary>\n        /// <param name=\"xml\">Root xml element.</param>\n        /// <param name=\"expectedInResponseTo\">The expected value of the\n        /// InReplyTo parameter in the message.</param>\n        public Saml2Response(XmlElement xml, Saml2Id expectedInResponseTo)\n        {\n            if (xml == null)\n            {\n                throw new ArgumentNullException(nameof(xml));\n            }\n\n            if (xml.LocalName != \"Response\"\n                || xml.NamespaceURI != Saml2Namespaces.Saml2P)\n            {\n                throw new XmlException(\"Expected a SAML2 assertion document\");\n            }\n\n            if (xml.Attributes[\"Version\"].Value != \"2.0\")\n            {\n                throw new XmlException(\"Wrong or unsupported SAML2 version\");\n            }\n\n            xmlElement = xml;\n\n            id = new Saml2Id(xml.GetRequiredAttributeValue(\"ID\"));\n\n            ExpectedInResponseTo = expectedInResponseTo;\n            ReadInResponseTo(xml);\n\n            issueInstant = DateTime.Parse(xml.GetRequiredAttributeValue(\"IssueInstant\"),\n                CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);\n\n            var statusElement = xml.GetRequiredElement(\"Status\", Saml2Namespaces.Saml2PName);\n            var statusCodeElement = statusElement.GetRequiredElement(\"StatusCode\", Saml2Namespaces.Saml2PName);\n            var statusString = statusCodeElement.GetRequiredAttributeValue(\"Value\");\n\n            status = StatusCodeHelper.FromString(statusString);\n\n            statusMessage = statusElement\n                [\"StatusMessage\", Saml2Namespaces.Saml2PName].GetTrimmedTextIfNotNull();\n            if (statusCodeElement[\"StatusCode\", Saml2Namespaces.Saml2PName] != null)\n            {\n                secondLevelStatus = statusCodeElement[\"StatusCode\", Saml2Namespaces.Saml2PName].Attributes[\"Value\"].Value;\n            }\n\n            Issuer = new EntityId(xmlElement[\"Issuer\", Saml2Namespaces.Saml2Name].GetTrimmedTextIfNotNull());\n\n            var destinationUrlString = xmlElement.Attributes[\"Destination\"].GetValueIfNotNull();\n\n            if (destinationUrlString != null)\n            {\n                if (!Uri.TryCreate(destinationUrlString, UriKind.Absolute, out Uri parsedDestination))\n                {\n                    throw new BadFormatSamlResponseException(\"Destination value was not a valid Uri\");\n                }\n                DestinationUrl = parsedDestination;\n            }\n        }\n\n        private void ReadInResponseTo(XmlElement xml)\n        {\n            var parsedInResponseTo = xml.Attributes[\"InResponseTo\"].GetValueIfNotNull();\n\n            if(parsedInResponseTo != null)\n            {\n                InResponseTo = new Saml2Id(parsedInResponseTo);\n            }\n        }\n\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"IgnoreMissingInResponseTo\")]\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"InResponseTo\")]\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"RelayState\")]\n        private void ValidateInResponseTo(IOptions options, IEnumerable<ClaimsIdentity> claimsIdentities)\n        {\n            if(InResponseTo != null)\n            { \n                if (ExpectedInResponseTo == null)\n                {\n                    if (options.Notifications.Unsafe.IgnoreUnexpectedInResponseTo(this, claimsIdentities))\n                    {\n                        options.SPOptions.Logger.WriteInformation($\"Ignoring unexpected InReponseTo {InResponseTo.Value}\"\n                            + $\"for Saml2 response {Id.Value} for user \"\n                            + claimsIdentities.First().FindFirst(ClaimTypes.NameIdentifier)?.Value + \".\");\n                    }\n                    else\n                    {\n                        throw new UnexpectedInResponseToException(\n                            $\"Received message {id.Value} contains unexpected InResponseTo \\\"{InResponseTo.Value}\\\". No \" +\n                            $\"cookie preserving state from the request was found so the message was not expected to have an \" +\n                            $\"InResponseTo attribute. This error typically occurs if the cookie set when doing SP-initiated \" +\n                            $\"sign on have been lost.\");\n                    }\n\n                }\n                else\n                {\n                    if (ExpectedInResponseTo.Value != InResponseTo.Value)\n                    {\n                        throw new Saml2ResponseFailedValidationException(\n                            string.Format(CultureInfo.InvariantCulture,\n                            \"InResponseTo Id \\\"{0}\\\" in received response does not match Id \\\"{1}\\\" of the sent request.\",\n                            InResponseTo.Value, ExpectedInResponseTo.Value));\n                    }\n                }\n            }\n            else\n            {\n                if (options?.SPOptions.Compatibility.IgnoreMissingInResponseTo ?? false)\n                {\n                    return;\n                };\n\n                if (ExpectedInResponseTo != null)\n                {\n                    throw new Saml2ResponseFailedValidationException(\n                        string.Format(CultureInfo.InvariantCulture,\n                        \"Expected message to contain InResponseTo \\\"{0}\\\", but found none. If this error occurs \" +\n                        \"due to the Idp not setting InResponseTo according to the SAML2 specification, this check \" +\n                        \"can be disabled by setting the IgnoreMissingInResponseTo compatibility flag to true.\",\n                        ExpectedInResponseTo.Value));\n                }\n            }\n        }\n\n        /// <summary>\n        /// Create a response with the supplied data.\n        /// </summary>\n        /// <param name=\"issuer\">Issuer of the response.</param>\n        /// <param name=\"signingCertificate\">The certificate to use when signing\n        /// this response in XML form.</param>\n        /// <param name=\"destinationUrl\">The destination Uri for the message</param>\n        /// <param name=\"inResponseTo\">In response to id</param>\n        /// <param name=\"claimsIdentities\">Claims identities to be included in the \n        /// response. Each identity is translated into a separate assertion.</param>\n        public Saml2Response(\n            EntityId issuer,\n            X509Certificate2 signingCertificate,\n            Uri destinationUrl,\n            Saml2Id inResponseTo,\n            params ClaimsIdentity[] claimsIdentities)\n            : this(issuer, signingCertificate, destinationUrl, inResponseTo, null, claimsIdentities)\n        { }\n\n        /// <summary>\n        /// Create a response with the supplied data.\n        /// </summary>\n        /// <param name=\"issuer\">Issuer of the response.</param>\n        /// <param name=\"signingCertificate\">The certificate to use when signing\n        /// this response in XML form.</param>\n        /// <param name=\"destinationUrl\">The destination Uri for the message</param>\n        /// <param name=\"inResponseTo\">In response to id</param>\n        /// <param name=\"relayState\">RelayState associated with the message.</param>\n        /// <param name=\"claimsIdentities\">Claims identities to be included in the \n        /// response. Each identity is translated into a separate assertion.</param>\n        public Saml2Response(\n            EntityId issuer,\n            X509Certificate2 signingCertificate,\n            Uri destinationUrl,\n            Saml2Id inResponseTo,\n            string relayState,\n            params ClaimsIdentity[] claimsIdentities)\n            : this(issuer, signingCertificate, destinationUrl, inResponseTo, relayState, null, claimsIdentities)\n        { }\n\n        /// <summary>\n        /// Create a response with the supplied data.\n        /// </summary>\n        /// <param name=\"issuer\">Issuer of the response.</param>\n        /// <param name=\"issuerCertificate\">The certificate to use when signing\n        /// this response in XML form.</param>\n        /// <param name=\"destinationUrl\">The destination Uri for the message</param>\n        /// <param name=\"inResponseTo\">In response to id</param>\n        /// <param name=\"relayState\">RelayState associated with the message.</param>\n        /// <param name=\"claimsIdentities\">Claims identities to be included in the \n        /// <param name=\"audience\">Audience of the response, set as AudienceRestriction</param>\n        /// response. Each identity is translated into a separate assertion.</param>\n        public Saml2Response(\n            EntityId issuer,\n            X509Certificate2 issuerCertificate,\n            Uri destinationUrl,\n            Saml2Id inResponseTo,\n            string relayState,\n            Uri audience,\n            params ClaimsIdentity[] claimsIdentities)\n        {\n            Issuer = issuer;\n            this.claimsIdentities = claimsIdentities;\n            SigningCertificate = issuerCertificate;\n            SigningAlgorithm = XmlHelpers.GetDefaultSigningAlgorithmName();\n            DestinationUrl = destinationUrl;\n            RelayState = relayState;\n            InResponseTo = inResponseTo;\n            id = new Saml2Id(\"id\" + Guid.NewGuid().ToString(\"N\"));\n            status = Saml2StatusCode.Success;\n            this.audience = audience;\n        }\n\n        /// <summary>\n        /// Certificate used to sign the message with during binding, according\n        /// to the signature processing rules of each binding.\n        /// </summary>\n        [ExcludeFromCodeCoverage]\n        public X509Certificate2 SigningCertificate { get; }\n\n        /// <summary>\n        /// The signing algorithm to use when signing the message during binding, \n        /// according to the signature processing rules of each binding.\n        /// </summary>\n        /// <value>The signing algorithm.</value>\n        [ExcludeFromCodeCoverage]\n        public string SigningAlgorithm { get; set; }\n\n        private XmlElement xmlElement;\n\n        /// <summary>\n        /// The response as an xml element. Either the original xml, or xml that is\n        /// generated from supplied data.\n        /// </summary>\n        public XmlElement XmlElement\n        {\n            get\n            {\n                if (xmlElement == null)\n                {\n                    CreateXmlElement();\n                }\n\n                return xmlElement;\n            }\n        }\n\n        /// <summary>\n        /// SAML Message name for responses, hard coded to SAMLResponse.\n        /// </summary>\n        public string MessageName\n        {\n            get\n            {\n                return \"SAMLResponse\";\n            }\n        }\n\n        /// <summary>\n        /// string representation of the Saml2Response serialized to xml.\n        /// </summary>\n        /// <returns>string containing xml.</returns>\n        public string ToXml()\n        {\n            return XmlElement.OuterXml;\n        }\n\n        private void CreateXmlElement()\n        {\n            var xml = XmlHelpers.CreateSafeXmlDocument();\n\n            var responseElement = xml.CreateElement(\"saml2p\", \"Response\", Saml2Namespaces.Saml2PName);\n\n            if (DestinationUrl != null)\n            {\n                responseElement.SetAttributeNode(\"Destination\", \"\").Value = DestinationUrl.ToString();\n            }\n\n            responseElement.SetAttributeNode(\"ID\", \"\").Value = id.Value;\n            responseElement.SetAttributeNode(\"Version\", \"\").Value = \"2.0\";\n            responseElement.SetAttributeNode(\"IssueInstant\", \"\").Value =\n                DateTime.UtcNow.ToSaml2DateTimeString();\n            if (InResponseTo != null)\n            {\n                responseElement.SetAttributeNode(\"InResponseTo\", \"\").Value = InResponseTo.Value;\n            }\n            xml.AppendChild(responseElement);\n\n            var issuerElement = xml.CreateElement(\"saml2\", \"Issuer\", Saml2Namespaces.Saml2Name);\n            issuerElement.InnerText = Issuer.Id;\n            responseElement.AppendChild(issuerElement);\n\n            var statusElement = xml.CreateElement(\"saml2p\", \"Status\", Saml2Namespaces.Saml2PName);\n            var statusCodeElement = xml.CreateElement(\"saml2p\", \"StatusCode\", Saml2Namespaces.Saml2PName);\n            statusCodeElement.SetAttributeNode(\"Value\", \"\").Value = StatusCodeHelper.FromCode(Status);\n            statusElement.AppendChild(statusCodeElement);\n            responseElement.AppendChild(statusElement);\n\n            foreach (var ci in claimsIdentities)\n            {\n                responseElement.AppendChild(xml.ReadNode(\n                    ci.ToSaml2Assertion(Issuer, audience, InResponseTo, DestinationUrl).ToXElement().CreateReader()));\n            }\n\n            xmlElement = xml.DocumentElement;\n        }\n\n        readonly Saml2Id id;\n\n        /// <summary>\n        /// Id of the response message.\n        /// </summary>\n        public Saml2Id Id { get { return id; } }\n\n        /// <summary>\n        /// Expected InResponseTo as extracted from \n        /// </summary>\n        public Saml2Id ExpectedInResponseTo { get; private set; }\n\n        /// <summary>\n        /// InResponseTo id.\n        /// </summary>\n        public Saml2Id InResponseTo { get; private set; }\n\n        readonly DateTime issueInstant;\n\n        /// <summary>\n        /// Issue instant of the response message.\n        /// </summary>\n        public DateTime IssueInstant { get { return issueInstant; } }\n\n        readonly Saml2StatusCode status;\n\n        /// <summary>\n        /// Status code of the message according to the SAML2 spec section 3.2.2.2\n        /// </summary>\n        public Saml2StatusCode Status { get { return status; } }\n\n        readonly string statusMessage;\n\n        /// <summary>\n        /// StatusMessage of the message according to the SAML2 spec section 3.2.2.1\n        /// </summary>\n        public string StatusMessage { get { return statusMessage; } }\n\n        readonly string secondLevelStatus;\n        /// <summary>\n        /// Optional status which MAY give additional information about the cause of the problem (according to the SAML2 spec section 3.2.2.2))))))))). \n        /// Because it may change in future specifications let's not make enum out of it yet.\n        /// </summary>\n        public string SecondLevelStatus { get { return secondLevelStatus; } }\n\n        /// <summary>\n        /// Issuer (= sender) of the response.\n        /// </summary>\n        public EntityId Issuer { get; }\n\n        /// <summary>\n        /// The destination of the response message.\n        /// </summary>\n        public Uri DestinationUrl { get; }\n\n        /// <summary>Gets all assertion element nodes from this response message.</summary>\n        /// <value>All assertion element nodes.</value>\n        private IEnumerable<XmlElement> GetAllAssertionElementNodes(IOptions options)\n        {\n            return allAssertionElementNodes ?? (allAssertionElementNodes = RetrieveAssertionElements(options));\n        }\n\n        private IEnumerable<XmlElement> RetrieveAssertionElements(IOptions options)\n        {\n            var assertions = new List<XmlElement>();\n\n            assertions.AddRange(XmlElement.ChildNodes.Cast<XmlNode>()\n                .Where(node => node.NodeType == XmlNodeType.Element).Cast<XmlElement>()\n                .Where(xe => xe.LocalName == \"Assertion\" && xe.NamespaceURI == Saml2Namespaces.Saml2Name));\n\n            var encryptedAssertions = XmlElement.ChildNodes.Cast<XmlNode>()\n                .Where(node => node.NodeType == XmlNodeType.Element).Cast<XmlElement>()\n                .Where(xe => xe.LocalName == \"EncryptedAssertion\" && xe.NamespaceURI == Saml2Namespaces.Saml2Name);\n\n            if (encryptedAssertions.Count() > 0)\n            {\n                options.SPOptions.Logger.WriteVerbose(\"Found encrypted assertions, decrypting...\");\n\n                var decryptionCertificates = GetCertificatesValidForDecryption(options);\n\n                bool decrypted = false;\n                foreach (var serviceCertificate in decryptionCertificates)\n                {\n                    try\n                    {\n                        assertions.AddRange(encryptedAssertions.Decrypt(serviceCertificate.PrivateKey)\n                                .Select(xe => (XmlElement)xe.GetElementsByTagName(\"Assertion\", Saml2Namespaces.Saml2Name)[0]));\n                        decrypted = true;\n                        break;\n                    }\n                    catch (CryptographicException)\n                    {\n                        // we cannot depend on Idp's sending KeyInfo, so this is the only \n                        // reliable way to know we've got the wrong cert\n                    }\n                }\n                if (!decrypted)\n                {\n                    throw new Saml2ResponseFailedValidationException(\"Encrypted Assertion(s) could not be decrypted using the configured Service Certificate(s).\");\n                }\n            }\n\n            return assertions;\n        }\n\n        private static IEnumerable<X509Certificate2> GetCertificatesValidForDecryption(IOptions options)\n        {\n            var decryptionCertificates = options.SPOptions.DecryptionServiceCertificates;\n\n            if (decryptionCertificates.Count == 0)\n            {\n                throw new Saml2ResponseFailedValidationException(\"Encrypted Assertions encountered but Service Certificate was not provided.\");\n            }\n\n            return decryptionCertificates;\n        }\n\n        private void Validate(IOptions options, IdentityProvider idp)\n        {\n            CheckIfUnsolicitedIsAllowed(options, idp);\n            ValidateSignature(options, idp);\n        }\n\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"RelayState\")]\n\n        private void CheckIfUnsolicitedIsAllowed(IOptions options, IdentityProvider idp)\n        {\n            if (InResponseTo == null)\n            {\n                if (idp.AllowUnsolicitedAuthnResponse)\n                {\n                    options.SPOptions.Logger.WriteVerbose(\"Received unsolicited Saml Response \" + Id \n                        + \" which is allowed for idp \" + idp.EntityId.Id);\n                    return;\n                }\n                string msg = string.Format(CultureInfo.InvariantCulture,\n                    \"Unsolicited responses are not allowed for idp \\\"{0}\\\".\", Issuer.Id);\n                throw new Saml2ResponseFailedValidationException(msg);\n            }\n        }\n\n        private void ValidateSignature(IOptions options, IdentityProvider idp)\n        {\n            var idpKeys = idp.SigningKeys;\n\n            var minAlgorithm = options.SPOptions.MinIncomingSigningAlgorithm;\n\n            if(!xmlElement.IsSignedByAny(idpKeys, options.SPOptions.ValidateCertificates, minAlgorithm)\n                && GetAllAssertionElementNodes(options)\n                .Any(a => !a.IsSignedByAny(idpKeys, options.SPOptions.ValidateCertificates, minAlgorithm)))\n            {\n                throw new Saml2ResponseFailedValidationException(\"The SAML Response is not signed and contains unsigned Assertions. Response cannot be trusted.\");\n            }\n            options.SPOptions.Logger.WriteVerbose(\"Signature validation passed for Saml Response \" + Id);\n        }\n\n        private readonly Uri audience;\n\n        private IEnumerable<ClaimsIdentity> claimsIdentities;\n        private Exception createClaimsException;\n\n        /// <summary>\n        /// Extract claims from the assertions contained in the response.\n        /// </summary>\n        /// <param name=\"options\">Service provider settings used when processing the response into claims.</param>\n        /// <returns>ClaimsIdentities</returns>\n        // Method might throw expections so make it a method and not a property.\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1024:UsePropertiesWhereAppropriate\")]\n        public IEnumerable<ClaimsIdentity> GetClaims(IOptions options)\n        {\n            return GetClaims(options, null);\n        }\n        \n        /// <summary>\n        /// Extract claims from the assertions contained in the response.\n        /// </summary>\n        /// <param name=\"options\">Service provider settings used when processing the response into claims.</param>\n        /// <param name=\"relayData\">Relay data stored when creating AuthnRequest, to be passed on to\n        /// GetIdentityProvider notification.</param>\n        /// <returns>ClaimsIdentities</returns>\n        // Method might throw expections so make it a method and not a property.\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1024:UsePropertiesWhereAppropriate\")]\n        public IEnumerable<ClaimsIdentity> GetClaims(IOptions options, IDictionary<string, string> relayData)\n        {\n            if (createClaimsException != null)\n            {\n                throw createClaimsException;\n            }\n\n            if (claimsIdentities == null)\n            {\n                try\n                {\n                    var idp = options.Notifications.GetIdentityProvider(Issuer, relayData, options);\n                    claimsIdentities = CreateClaims(options, idp).ToList();\n\n                    // Validate InResponseTo now, to be able to include generated claims in notification.\n                    ValidateInResponseTo(options, claimsIdentities);\n                }\n                catch (Exception ex)\n                {\n                    createClaimsException = ex;\n                    throw;\n                }\n            }\n\n            return claimsIdentities;\n        }\n\n        private IEnumerable<ClaimsIdentity> CreateClaims(IOptions options, IdentityProvider idp)\n        {\n            Validate(options, idp);\n\n            if (status != Saml2StatusCode.Success)\n            {\n                throw new UnsuccessfulSamlOperationException(\n                    \"The Saml2Response must have status success to extract claims.\",\n                    status, statusMessage, secondLevelStatus);\n            }\n\n\t\t\tTokenValidationParameters validationParameters = new TokenValidationParameters();\n\t\t\tvalidationParameters.AuthenticationType = \"Federation\";\n\t\t\tvalidationParameters.RequireSignedTokens = false;\n\t\t\tvalidationParameters.ValidateIssuer = false;\n            validationParameters.ValidAudience = options.SPOptions.EntityId.Id;\n\n            options.Notifications.Unsafe.TokenValidationParametersCreated(validationParameters, idp, XmlElement);\n\n\t\t\tvar handler = options.SPOptions.Saml2PSecurityTokenHandler;\n\n\t\t\tforeach (XmlElement assertionNode in GetAllAssertionElementNodes(options))\n            {\n                var principal = handler.ValidateToken(assertionNode.OuterXml, validationParameters, out SecurityToken baseToken);\n                var token = (Saml2SecurityToken)baseToken;\n                options.SPOptions.Logger.WriteVerbose(\"Extracted SAML assertion \" + token.Id);\n\n\t\t\t\tsessionNotOnOrAfter = DateTimeHelper.EarliestTime(sessionNotOnOrAfter,\n\t\t\t\t\ttoken.Assertion.Statements.OfType<Saml2AuthenticationStatement>()\n\t\t\t\t\t\t.SingleOrDefault()?.SessionNotOnOrAfter);\n\n\t\t\t\tforeach (var identity in principal.Identities)\n\t\t\t\t{\n\t\t\t\t\tyield return identity;\n\t\t\t\t}\n            }\n        }\n        \n        /// <summary>\n        /// RelayState attached to the message.\n        /// </summary>\n        public string RelayState { get; } = null;\n\n        private DateTime? sessionNotOnOrAfter;\n\n        /// <summary>\n        /// Session termination time for a session generated from this\n        /// response.\n        /// </summary>\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"GetClaims\")]\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"SessionNotOnOrAfter\")]\n        public DateTime? SessionNotOnOrAfter\n        {\n            get\n            {\n                if(claimsIdentities == null)\n                {\n                    // This is not a good design, but will have to do for now.\n                    // The entire Saml2Response class needs some refactoring\n                    // love - probably by extracting more stuff to the \n                    // Saml2PSecurityTokenHandler.\n                    throw new InvalidOperationException(\"Accessing SessionNotOnOrAfter requires GetClaims to have been called first.\");\n                }\n                return sessionNotOnOrAfter;\n            }\n        }\n\n    }\n}\n", "using FluentAssertions;\nusing Sustainsys.Saml2.Configuration;\nusing Sustainsys.Saml2.Metadata;\nusing Sustainsys.Saml2.Tokens;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Microsoft.IdentityModel.Tokens.Saml2;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Security.Cryptography.Xml;\nusing System.Xml;\nusing System.IO;\nusing Sustainsys.Saml2.Saml2P;\nusing System.Reflection;\nusing Sustainsys.Saml2.Exceptions;\nusing Sustainsys.Saml2.TestHelpers;\n\nusing SecurityTokenInvalidAudienceException = Microsoft.IdentityModel.Tokens.SecurityTokenInvalidAudienceException;\nusing SecurityTokenExpiredException = Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException;\nusing SecurityTokenReplayDetectedException = Microsoft.IdentityModel.Tokens.SecurityTokenReplayDetectedException;\nusing EncryptingCredentials = Microsoft.IdentityModel.Tokens.EncryptingCredentials;\nusing SecurityAlgorithms = Microsoft.IdentityModel.Tokens.SecurityAlgorithms;\nusing SigningCredentials = Microsoft.IdentityModel.Tokens.SigningCredentials;\nusing X509SecurityKey = Microsoft.IdentityModel.Tokens.X509SecurityKey;\nusing System.Collections.Generic;\nusing Microsoft.IdentityModel.Logging;\n\nnamespace Sustainsys.Saml2.Tests.Saml2P\n{\n    [TestClass]\n    public class Saml2ResponseTests\n    {\n        [TestMethod]\n        public void Saml2Response_Read_BasicParams()\n        {\n            string responseText =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"\n            InResponseTo = \"\"InResponseToId\"\"\n            Destination=\"\"http://destination.example.com\"\">\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                    <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            var expected = new\n            {\n                Id = new Saml2Id(MethodBase.GetCurrentMethod().Name),\n                IssueInstant = new DateTime(2013, 01, 01, 0, 0, 0, DateTimeKind.Utc),\n                Status = Saml2StatusCode.Requester,\n                StatusMessage = \"Unable to encrypt assertion\",\n                Issuer = new EntityId(null),\n                DestinationUrl = new Uri(\"http://destination.example.com\"),\n                MessageName = \"SAMLResponse\",\n                InResponseTo = new Saml2Id(\"InResponseToId\"),\n                RequestState = (StoredRequestState)null,\n                SecondLevelStatus = (string)null,\n                RelayState = (string)null,\n                ExpectedInResponseTo = new Saml2Id(\"InResponseToId\")\n            };\n\n\t\t\tvar response = Saml2Response.Read(responseText, expected.InResponseTo);\n\t\t\texpected.Should().BeEquivalentTo(\n\t\t\t\tresponse, opt => opt\n                    .Excluding(s => s.XmlElement)\n                    .Excluding(s => s.SigningCertificate)\n                    .Excluding(s => s.SigningAlgorithm)\n                    .Excluding(s => s.SessionNotOnOrAfter));\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnNonXml()\n        {\n            Action a = () => Saml2Response.Read(\"not xml\");\n\n            a.Should().Throw<XmlException>();\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsWrongRootNodeName()\n        {\n            Action a = () => Saml2Response.Read(\"<saml2p:NotResponse xmlns:saml2p=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" />\");\n\n            a.Should().Throw<XmlException>()\n                .WithMessage(\"Expected a SAML2 assertion document\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsWrongRootNamespace()\n        {\n            Action a = () => Saml2Response.Read(\"<saml2p:Response xmlns:saml2p=\\\"something\\\" /> \");\n            a.Should().Throw<XmlException>()\n                .WithMessage(\"Expected a SAML2 assertion document\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnWrongVersion()\n        {\n            Action a = () => Saml2Response.Read(\"<saml2p:Response xmlns:saml2p=\\\"\"\n                + Saml2Namespaces.Saml2P + \"\\\" Version=\\\"wrong\\\" />\");\n\n            a.Should().Throw<XmlException>()\n                .WithMessage(\"Wrong or unsupported SAML2 version\");\n\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnMissingId()\n        {\n            string responseText = @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" Version=\"\"2.0\"\"\n                 IssueInstant=\"\"2013-01-01T00:00:00Z\"\" InResponseTo = \"\"InResponseToId\"\" Destination=\"\"http://destination.example.com\"\">\n                    <saml2p:Status>\n                        <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                        <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                    </saml2p:Status>\n                </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read( responseText );\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage( \"Attribute 'ID' (case-sensitive) was not found or its value is empty\" );\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnEmptyId()\n        {\n            string responseText = @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" Version=\"\"2.0\"\" ID=\"\" \"\"\n                 IssueInstant=\"\"2013-01-01T00:00:00Z\"\" Destination=\"\"http://destination.example.com\"\">\n                    <saml2p:Status>\n                        <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                        <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                    </saml2p:Status>\n                </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read( responseText );\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage( \"Attribute 'ID' (case-sensitive) was not found or its value is empty\" );\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnMissingIssueInstant()\n        {\n            string responseText = @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" Version=\"\"2.0\"\" ID=\"\"_abc123\"\"\n                 Destination=\"\"http://destination.example.com\"\">\n                    <saml2p:Status>\n                        <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                        <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                    </saml2p:Status>\n                </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read( responseText );\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage( \"Attribute 'IssueInstant' (case-sensitive) was not found or its value is empty\" );\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnMissingStatus()\n        {\n            string responseText = @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" Version=\"\"2.0\"\" ID=\"\"_abc123\"\"\n                 IssueInstant=\"\"2013-01-01T00:00:00Z\"\" Destination=\"\"http://destination.example.com\"\">\n                    <Flatus>\n                        <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                        <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                    </Flatus>\n                </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read( responseText );\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage( \"Element 'Status' (case-sensitive, namespace 'urn:oasis:names:tc:SAML:2.0:protocol') was not found\" );\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnMissingStatusCode()\n        {\n            string responseText = @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" Version=\"\"2.0\"\" ID=\"\"_abc123\"\"\n                 IssueInstant=\"\"2013-01-01T00:00:00Z\"\" Destination=\"\"http://destination.example.com\"\">\n                    <saml2p:Status>\n                        <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                    </saml2p:Status>\n                </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read( responseText );\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage( \"Element 'StatusCode' (case-sensitive, namespace 'urn:oasis:names:tc:SAML:2.0:protocol') was not found\" );\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnMalformedDestination()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            Destination = \"\"not_a_uri\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n            <saml2:Issuer>\n                https://some.issuer.example.com\n            </saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read(response);\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage(\"Destination value was not a valid Uri\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_Issuer()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n            <saml2:Issuer>\n                https://some.issuer.example.com\n            </saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            Saml2Response.Read(response).Issuer.Id.Should().Be(\"https://some.issuer.example.com\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowOnMissingSignatureInResponseAndAnyAssertion()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read(response).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"The SAML Response is not signed and contains unsigned Assertions. Response cannot be trusted.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        /// This is a specific test for the vulnerabilities found by Duo in February 2018\n        /// https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage_CommentInNameId()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>Some<!--Comment-->User</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\t\t\tvar claims = Saml2Response.Read(signedResponse).GetClaims(StubFactory.CreateOptions());\n\t\t\tclaims.Single().FindFirst(\n\t\t\t\t\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\")\n\t\t\t\t.Value.Should().Be(\"SomeUser\");\n        }\n\n        /// This is a specific test for the vulnerabilities found by Duo in February 2018\n        /// https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage_CommentInAttributeValue()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AttributeStatement>\n                        <saml2:Attribute Name=\"\"CommentTest\"\">\n                            <saml2:AttributeValue>Some<!--Comment-->Value</saml2:AttributeValue>\n                        </saml2:Attribute>\n                    </saml2:AttributeStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var claims = Saml2Response.Read(signedResponse).GetClaims(StubFactory.CreateOptions());\n\n            claims.Single().FindFirst(\"CommentTest\").Value.Should().Be(\"SomeValue\");\n        }\n\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessageSecondaryKey()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://twokeys.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://twokeys.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var options = StubFactory.CreateOptions();\n\n            var idp = new IdentityProvider(\n                new EntityId(\"https://twokeys.example.com\"), options.SPOptions)\n            {\n                AllowUnsolicitedAuthnResponse = true\n            };\n\n            idp.SigningKeys.AddConfiguredKey(SignedXmlHelper.TestKey2);\n            idp.SigningKeys.AddConfiguredKey(SignedXmlHelper.TestKey);\n\n            options.IdentityProviders.Add(idp);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(options);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage_WithAuthnStatementGeneratesLogoutNameIdentifierAllNameIdProperties()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID\n                            NameQualifier=\"\"NameQualifier\"\"\n                            SPNameQualifier=\"\"SPNameQualifier\"\"\n                            Format=\"\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\"\n                            SPProvidedID=\"\"SPProvidedID\"\"\n                            >someone@example.com</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                            <saml2:AuthnContextDeclRef>http://custom/password/form/consumer</saml2:AuthnContextDeclRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var result = Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            var logoutInfoClaim = result.Single().Claims.SingleOrDefault(c => c.Type == Saml2ClaimTypes.LogoutNameIdentifier);\n            logoutInfoClaim.Should().NotBeNull(\"the LogoutInfo claim should be generated\");\n            logoutInfoClaim.Value.Should().Be(\"NameQualifier,SPNameQualifier,urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress,SPProvidedID,someone@example.com\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage_WithAuthnStatementGeneratesLogoutInfo()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeOne</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                            <saml2:AuthnContextDeclRef>http://custom/password/form/consumer</saml2:AuthnContextDeclRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var result = Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            var logoutInfoClaim = result.Single().Claims.SingleOrDefault(c => c.Type == Saml2ClaimTypes.LogoutNameIdentifier);\n            logoutInfoClaim.Should().NotBeNull(\"the Logout name identifier claim should be generated\");\n            logoutInfoClaim.Value.Should().Be(\",,,,SomeOne\");\n\n            var sessionIdClaim = result.Single().Claims.SingleOrDefault(c => c.Type == Saml2ClaimTypes.SessionIndex);\n            sessionIdClaim.Should().NotBeNull(\"the Session ID claim should be generated\");\n            sessionIdClaim.Value.Should().Be(\"17\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage_WithAuthnContextGeneratesClaims()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeOne</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:somespecialvalue</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var result = Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            var authMethodClaim = result.Single().Claims.SingleOrDefault(c => c.Type == ClaimTypes.AuthenticationMethod);\n            authMethodClaim.Should().NotBeNull(\"the authentication method claim should be generated\");\n            authMethodClaim.Value.Should().Be(\"urn:somespecialvalue\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_BadAuthnContext_IgnoredWhenConfigured()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>AuthenticatedSomeone</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>badvalue</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.Compatibility.IgnoreAuthenticationContextInResponse = true;\n            var result = Saml2Response.Read(signedResponse).GetClaims(options);\n\n            var authMethodClaim = result.Single().Claims.SingleOrDefault(c => c.Type == ClaimTypes.AuthenticationMethod);\n            authMethodClaim.Should().BeNull(\"the authentication method claim should not be generated\");\n\n            var nameidClaim = result.Single().Claims.SingleOrDefault(c => c.Type == ClaimTypes.NameIdentifier);\n            nameidClaim.Should().NotBeNull(\"the subject nameid claim should be generated\");\n            nameidClaim.Value.Should().Be(\"AuthenticatedSomeone\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_HandlerWithNullOptions_AuthnContextGeneratesClaims()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeOne</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:somespecialvalue</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var options = Options.FromConfiguration;\n            options.SPOptions.Saml2PSecurityTokenHandler = new Saml2PSecurityTokenHandler();\n            var result = Saml2Response.Read(signedResponse).GetClaims(options);\n\n            var authMethodClaim = result.Single().Claims.SingleOrDefault(c => c.Type == ClaimTypes.AuthenticationMethod);\n            authMethodClaim.Should().NotBeNull(\"the authentication method claim should be generated\");\n            authMethodClaim.Value.Should().Be(\"urn:somespecialvalue\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_SessionIndexButNoNameId()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                            <saml2:AuthnContextDeclRef>http://custom/password/form/consumer</saml2:AuthnContextDeclRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var result = Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            result.First().FindFirst(ClaimTypes.NameIdentifier).Should().BeNull();\n\n            var sessionIdClaim = result.Single().Claims.SingleOrDefault(c => c.Type == Saml2ClaimTypes.SessionIndex);\n            sessionIdClaim.Should().NotBeNull(\"the Session ID claim should be generated\");\n            sessionIdClaim.Value.Should().Be(\"17\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedSingleAssertionInResponseMessage()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n\n            var signedAssertion = SignedXmlHelper.SignXml(assertion);\n            var signedResponse = string.Format(response, signedAssertion);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedSingleAssertion_WithKeyInfo_InResponseMessage()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion = SignedXmlHelper.SignXml(assertion, true, false);\n            var signedResponse = string.Format(response, signedAssertion);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedMultipleAssertionInResponseMessage()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n                {1}\n            </saml2p:Response>\";\n\n            var assertion1 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var assertion2 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser2</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion1 = SignedXmlHelper.SignXml(assertion1);\n            var signedAssertion2 = SignedXmlHelper.SignXml(assertion2);\n            var signedResponse = string.Format(response, signedAssertion1, signedAssertion2);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedMultipleAssertion_WithKeyInfo_InResponseMessage()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n                {1}\n            </saml2p:Response>\";\n\n            var assertion1 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var assertion2 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser2</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion1 = SignedXmlHelper.SignXml(assertion1, true, false);\n            var signedAssertion2 = SignedXmlHelper.SignXml(assertion2, true, false);\n            var signedResponse = string.Format(response, signedAssertion1, signedAssertion2);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnMultipleAssertionInUnsignedResponseMessageButNotAllSigned()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n                {1}\n            </saml2p:Response>\";\n\n            var assertion1 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var assertion2 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser2</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n\n            var signedAssertion1 = SignedXmlHelper.SignXml(assertion1);\n            var signedResponse = string.Format(response, signedAssertion1, assertion2);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"The SAML Response is not signed and contains unsigned Assertions. Response cannot be trusted.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnTamperedAssertionWithAssertionSignature()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n                {1}\n            </saml2p:Response>\";\n\n            var assertion1 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var assertion2 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser2</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion1 = SignedXmlHelper.SignXml(assertion1);\n            var signedAssertion2 = SignedXmlHelper.SignXml(assertion2).Replace(\"SomeUser2\", \"SomeOtherUser\");\n            var signedResponse = string.Format(response, signedAssertion1, signedAssertion2);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"Signature didn't verify. Have the contents been tampered with?\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnAssertionInjectionWithAssertionSignature()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n                {1}\n            </saml2p:Response>\";\n\n            var assertion1 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var assertionToInject = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser2</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion1 = SignedXmlHelper.SignXml(assertion1);\n\n            var signedAssertion1Doc = XmlHelpers.XmlDocumentFromString(signedAssertion1);\n\n            var signatureToCopy = signedAssertion1Doc.DocumentElement[\"Signature\", SignedXml.XmlDsigNamespaceUrl];\n\n            var assertionToInjectDoc = XmlHelpers.XmlDocumentFromString(assertionToInject);\n\n            assertionToInjectDoc.DocumentElement.AppendChild(assertionToInjectDoc.ImportNode(signatureToCopy, true));\n\n            var signedAssertionToInject = assertionToInjectDoc.OuterXml;\n\n            var signedResponse = string.Format(response, signedAssertion1, signedAssertionToInject);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"Incorrect reference on Xml signature. The reference must be to the root element of the element containing the signature.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ReturnsExistingResultOnSecondGetClaimsCall()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var samlResponse = Saml2Response.Read(signedResponse);\n\n            Action a = () => samlResponse.GetClaims(Options.FromConfiguration);\n\n            a.Should().NotThrow();\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectEncryptedSingleAssertion_SignedResponse()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n                \n            var assertion =\n            @\"<saml2:Assertion Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\" xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>UserIDInsideEncryptedAssertion</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(assertion);\n            var signedResponse = SignedXmlHelper.SignXml(string.Format(response, encryptedAssertion));\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.ServiceCertificates.Add(new ServiceCertificate { Certificate = SignedXmlHelper.TestCert2 });\n\n            var claims = Saml2Response.Read(signedResponse).GetClaims(options);\n            claims.Count().Should().Be(1);\n            claims.First().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"UserIDInsideEncryptedAssertion\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectEncryptedSingleAssertion_SignedAssertion()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion = SignedXmlHelper.SignXml(assertion);\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(signedAssertion);\n            var responseWithAssertion = string.Format(response, encryptedAssertion);\n\n            var claims = Saml2Response.Read(responseWithAssertion).GetClaims(Options.FromConfiguration);\n            claims.Count().Should().Be(1);\n            claims.First().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"SomeUser\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectEncryptedSingleAssertion_AndMultipleCertsConfigured()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\" xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>UserIDInsideEncryptedAssertion</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(assertion);\n            var signedResponse = SignedXmlHelper.SignXml(string.Format(response, encryptedAssertion));\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.ServiceCertificates.Add(new ServiceCertificate { Certificate = SignedXmlHelper.TestCert });\n            options.SPOptions.ServiceCertificates.Add(new ServiceCertificate { Certificate = SignedXmlHelper.TestCert2 });\n\n            var claims = Saml2Response.Read(signedResponse).GetClaims(options);\n            claims.Count().Should().Be(1);\n            claims.First().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"UserIDInsideEncryptedAssertion\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsWhenEncryptedAssertion_WrongCertsConfigured()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\" xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>UserIDInsideEncryptedAssertion</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(assertion, false, SignedXmlHelper.TestCert2);\n            var signedResponse = SignedXmlHelper.SignXml(string.Format(response, encryptedAssertion));\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.ServiceCertificates.Add(new ServiceCertificate { Certificate = SignedXmlHelper.TestCert });\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(options);\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"Encrypted Assertion(s) could not be decrypted using the configured Service Certificate(s).\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectEncryptedSingleAssertion_OAEP()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion = SignedXmlHelper.SignXml(assertion);\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(signedAssertion, useOaep: true);\n            var responseWithAssertion = string.Format(response, encryptedAssertion);\n\n            var claims = Saml2Response.Read(responseWithAssertion).GetClaims(Options.FromConfiguration);\n            claims.Count().Should().Be(1);\n            claims.First().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"SomeUser\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectEncryptedSingleAssertion_UsingMSIdentityModel()\n        {\n\t\t\tvar response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion = new Saml2EncryptedAssertion(new Saml2NameIdentifier(\"https://idp.example.com\"))\n            {\n                Subject = new Saml2Subject(new Saml2NameIdentifier(\"WIFUser\"))\n            };\n            assertion.Subject.SubjectConfirmations.Add(new Saml2SubjectConfirmation(new Uri(\"urn:oasis:names:tc:SAML:2.0:cm:bearer\")));\n            assertion.Conditions = new Saml2Conditions { NotOnOrAfter = new DateTime(2100, 1, 1) };\n\n            var token = new Saml2SecurityToken(assertion);\n            var handler = new Saml2SecurityTokenHandler();\n\n\t\t\tvar signingKey = new X509SecurityKey(SignedXmlHelper.TestCert);\n\t\t\tvar signingCreds = new SigningCredentials(signingKey,\n\t\t\t\tSecurityAlgorithms.RsaSha256Signature, SecurityAlgorithms.Sha256Digest);\n\t\t\tassertion.SigningCredentials = signingCreds;\n\n\t\t\tvar encryptionKey = new X509SecurityKey(SignedXmlHelper.TestCert2);\n\t\t\tvar encryptionCreds = new EncryptingCredentials(encryptionKey,\n\t\t\t\tSecurityAlgorithms.RsaOAEP, SecurityAlgorithms.Aes192CbcHmacSha384);\n\t\t\tassertion.EncryptingCredentials = encryptionCreds;\n\n\t\t\tstring assertionXml = String.Empty;\n            using (var sw = new StringWriter())\n            {\n                using (var xw = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = true }))\n                {\n                    handler.WriteToken(xw, token);\n                }\n                assertionXml = sw.ToString();\n            }\n            var responseWithAssertion = string.Format(response, assertionXml);\n\n\t\t\tvar claims = Saml2Response.Read(responseWithAssertion).GetClaims(Options.FromConfiguration);\n            claims.Count().Should().Be(1);\n            claims.First().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"WIFUser\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnEncryptedAssertionWithoutSignature()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(assertion);\n            var responseWithAssertion = string.Format(response, encryptedAssertion);\n\n            Action a = () => Saml2Response.Read(responseWithAssertion).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"The SAML Response is not signed and contains unsigned Assertions. Response cannot be trusted.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnTamperedSignatureInEncryptedAssertion()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion = SignedXmlHelper.SignXml(assertion);\n            var tamperedAssertion = signedAssertion.Replace(\"SomeUser\", \"AnotherUser\");\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(tamperedAssertion);\n            var responseWithAssertion = string.Format(response, encryptedAssertion);\n\n            Action a = () => Saml2Response.Read(responseWithAssertion).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"Signature didn't verify. Have the contents been tampered with?\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnEncryptedAssertionAndNoServiceCert()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\" xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>UserIDInsideEncryptedAssertion</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(assertion);\n            var signedResponse = SignedXmlHelper.SignXml(string.Format(response, encryptedAssertion));\n\n            var options = StubFactory.CreateOptions();\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(options);\n            a.Should().Throw<Saml2ResponseFailedValidationException>();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CreateIdentities()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeOtherUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var c1 = new ClaimsIdentity(\"Federation\");\n            c1.AddClaim(new Claim(ClaimTypes.NameIdentifier, \"SomeUser\", null, \"https://idp.example.com\"));\n            var c2 = new ClaimsIdentity(\"Federation\");\n            c2.AddClaim(new Claim(ClaimTypes.NameIdentifier, \"SomeOtherUser\", null, \"https://idp.example.com\"));\n\n            var expected = new ClaimsIdentity[] { c1, c2 };\n\n            var r = Saml2Response.Read(SignedXmlHelper.SignXml(response));\n\n            r.GetClaims(StubFactory.CreateOptions())\n                .Should().BeEquivalentTo(expected, opt => opt.IgnoringCyclicReferences());\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_SavesBootstrapContext()\n        {\n            Assert.Inconclusive(\"Deliberately ignored test for now\");\n            \n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2:Subject>\n                    <saml2:NameID>SomeUser</saml2:NameID>\n                    <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                </saml2:Subject>\n                <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n            </saml2:Assertion>\";\n\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\"\n            + assertion +\n            \"</saml2p:Response>\";\n\n            var options = StubFactory.CreateOptions();\n\n            //options.SPOptions.Saml2PSecurityTokenHandler.Configuration.SaveBootstrapContext = true;\n\n            var expected = options.SPOptions.Saml2PSecurityTokenHandler.ReadToken(assertion);\n\n            var r = Saml2Response.Read(SignedXmlHelper.SignXml(response));\n\n            var subject = r.GetClaims(options).Single().BootstrapContext;\n\n            subject.As<BootstrapContext>().SecurityToken.Should().BeEquivalentTo(expected);\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnWrongAudience()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" >\n                        <saml2:AudienceRestriction>\n                            <saml2:Audience>https://example.com/wrong/audience</saml2:Audience>\n                        </saml2:AudienceRestriction>\n                    </saml2:Conditions>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n\n            var subject = Saml2Response.Read(response);\n\n            var options = StubFactory.CreateOptions();\n\n            subject.Invoking(s => s.GetClaims(options))\n                .Should().Throw<SecurityTokenInvalidAudienceException>();\n\t\t}\n\n\t\t[TestMethod]\n        public void Saml2Response_GetClaims_IgnoresAudienceUsingTVPNotificationFlag()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" >\n                        <saml2:AudienceRestriction>\n                            <saml2:Audience>https://example.com/wrong/audience</saml2:Audience>\n                        </saml2:AudienceRestriction>\n                    </saml2:Conditions>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n\n            var subject = Saml2Response.Read(response);\n\n            var options = StubFactory.CreateOptions();\n            options.Notifications.Unsafe.TokenValidationParametersCreated = (tvp, idp, xml) =>\n            {\n                tvp.ValidateAudience = false;\n\n                idp.EntityId.Id.Should().Be(\"https://idp.example.com\");\n                xml.OuterXml.Should().Contain(\"https://example.com/wrong/audience\");\n            };\n\n            subject.Invoking(s => s.GetClaims(options)).Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnExpired()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2013-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n            var r = Saml2Response.Read(response);\n\n            Action a = () => r.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<SecurityTokenExpiredException>();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectInResponseTo()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"\n            InResponseTo = \"\"abc123\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var response = Saml2Response.Read(responseXML, new Saml2Id(\"abc123\"));\n\n            Action a = () => response.GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_FalseOnMissingInResponseTo_IfDisallowed()\n        {\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp2.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var response = Saml2Response.Read(responseXML);\n\n            Action a = () => response.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"Unsolicited responses are not allowed for idp \\\"https://idp2.example.com\\\".\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_MissingInResponseTo_IfAllowed()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var request = idp.CreateAuthenticateRequest(StubFactory.CreateSaml2Urls());\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var response = Saml2Response.Read(responseXML);\n\n            Action a = () => response.GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnIncorrectInResponseTo()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"\n            InResponseTo = \"\"anothervalue\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var subject = Saml2Response.Read(responseXML, new Saml2Id(\"somevalue\"));\n\n            Action a = () => subject.GetClaims(StubFactory.CreateOptions());\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"InResponseTo Id \\\"anothervalue\\\" in received response does not match Id \\\"somevalue\\\" of the sent request.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnInResponseTo_When_NoneExpected()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"\n            InResponseTo = \"\"InResponseTo\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var subject = Saml2Response.Read(responseXML, null);\n\n            Action a = () => subject.GetClaims(StubFactory.CreateOptions());\n\n            a.Should().Throw<UnexpectedInResponseToException>()\n                .WithMessage(\"*unexpected InResponseTo \\\"InResponseTo\\\"*\");\n\n            // Should throw even on a second call (catches bug where incorrect placement of the\n            // check caused second call to succeed. That's bad.\n            a.Should().Throw<UnexpectedInResponseToException>()\n                .WithMessage(\"*unexpected InResponseTo \\\"InResponseTo\\\"*\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_UsesNotificationByPassOnInResponseTo_When_NoneExpected()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"\n            InResponseTo = \"\"InResponseTo\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var subject = Saml2Response.Read(responseXML, null);\n\n            var options = StubFactory.CreateOptions();\n\n            Saml2Response capturedResponse = null;\n            IEnumerable<ClaimsIdentity> claimsIdentities = null;\n\n            options.Notifications.Unsafe.IgnoreUnexpectedInResponseTo = (r, c) =>\n            {\n                capturedResponse = r;\n                claimsIdentities = c;\n\n                return true;\n            };\n\n            // Should not throw\n            subject.GetClaims(options);\n\n            capturedResponse.Should().BeSameAs(subject);\n            claimsIdentities.Single().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"SomeUser\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnNoInResponseTo_When_OneWasExpected()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                    Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                    IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var subject = Saml2Response.Read(responseXML, new Saml2Id(\"ExpectedId\"));\n\n            Action a = () => subject.GetClaims(StubFactory.CreateOptions());\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n\t\t\t\t.WithMessage(\n\t\t\t\t\t\"Expected message to contain InResponseTo \\\"ExpectedId\\\", but found none. If this error occurs \" +\n\t\t\t\t\t\"due to the Idp not setting InResponseTo according to the SAML2 specification, this check \" +\n\t\t\t\t\t\"can be disabled by setting the IgnoreMissingInResponseTo compatibility flag to true.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_CorrectResponse_When_MissingInResponseTo_And_IgnoreMissingEnabled()\n        {\n            var options = Options.FromConfiguration;\n            options.SPOptions.Compatibility.IgnoreMissingInResponseTo = true;\n\n            var responseXML =\n                @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            Action a = () => Saml2Response.Read(responseXML, new Saml2Id(\"ExpectedId\"), options);\n\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnNoInResponseTo_When_MissingInResponseTo_AndIgnoreMissingDisabled()\n        {\n            var options = Options.FromConfiguration;\n            options.SPOptions.Compatibility.IgnoreMissingInResponseTo = false;\n\n            var responseXML =\n                @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                    Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                    IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var subject = Saml2Response.Read(responseXML, new Saml2Id(\"ExpectedId\"), options);\n\n            Action a = () => subject.GetClaims(StubFactory.CreateOptions());\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"Expected message to contain InResponseTo \\\"ExpectedId\\\", but found none*\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnTamperedMessage()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n            responseXML = responseXML.Replace(\"2013-01-01\", \"2015-01-01\"); // Break signature.\n\n            var response = Saml2Response.Read(responseXML, null);\n\n            Action a = () =>\n            {\n                response.GetClaims(Options.FromConfiguration);\n            };\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"Signature didn't verify. Have the contents been tampered with?\");\n\n            // With an incorrect signature, a signature validation should be\n            // thrown - even if we response is validate twice. In case\n            // GetClaims/Validate doesn't cache the result it will instead\n            // report a replay exception the second time because the replay\n            // detection is done before the signature validation.\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"Signature didn't verify. Have the contents been tampered with?\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnWeakSigningAlgoritm()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var response = Saml2Response.Read(responseXML, null);\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.MinIncomingSigningAlgorithm = SecurityAlgorithms.RsaSha512Signature;\n\n            Action a = () =>\n            {\n                response.GetClaims(options);\n            };\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"*rsa-sha256*weak*rsa-sha512*\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnReplayAssertionId()\n        {\n            Assert.Inconclusive(\"Deliberately ignored test for now\");\n\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n            var r1 = Saml2Response.Read(response);\n            r1.GetClaims(Options.FromConfiguration);\n\n            var r2 = Saml2Response.Read(response);\n\n            Action a = () => r2.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<SecurityTokenReplayDetectedException>();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnReplayAssertionIdSameConfig()\n        {\n            Assert.Inconclusive(\"Ingored for now\");\n\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n            var r1 = Saml2Response.Read(response);\n            var options = StubFactory.CreateOptions();\n            r1.GetClaims(options);\n\n            var r2 = Saml2Response.Read(response);\n\n            Action a = () => r2.GetClaims(options);\n\n            a.Should().Throw<SecurityTokenReplayDetectedException>();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_NotThrowsOnReplayAssertionIdDifferentConfig()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n            var r1 = Saml2Response.Read(response);\n            var options1 = StubFactory.CreateOptions();\n            r1.GetClaims(options1);\n\n            var r2 = Saml2Response.Read(response);\n\n            var options2 = StubFactory.CreateOptions();\n            Action a = () => r2.GetClaims(options2);\n\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnStatusFailure()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var xml = SignedXmlHelper.SignXml(response);\n\n            var subject = Saml2Response.Read(xml);\n\n            Action a = () => subject.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<UnsuccessfulSamlOperationException>()\n                .WithMessage(\"The Saml2Response must have status success to extract claims.\\n*Status Code: Requester*\")\n                .Where(x => x.Status == Saml2StatusCode.Requester);\n\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnStatusFailure_IncludingSecondLevelMessage()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusMessage>A status message</saml2p:StatusMessage>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Responder\"\">\n                        <saml2p:StatusCode Value = \"\"urn:oasis:names:tc:SAML:2.0:status:RequestDenied\"\" />\n                    </saml2p:StatusCode >\n                </saml2p:Status >\n            </saml2p:Response>\";\n\n            var xml = SignedXmlHelper.SignXml(response);\n\n            var subject = Saml2Response.Read(xml);\n\n            Action a = () => subject.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<UnsuccessfulSamlOperationException>()\n                .WithMessage(\"The Saml2Response must have status success to extract claims.*Status Code: Responder*Message: A status message*RequestDenied\")\n                .Where(x => x.Status == Saml2StatusCode.Responder && x.StatusMessage == \"A status message\" && x.SecondLevelStatus == \"urn:oasis:names:tc:SAML:2.0:status:RequestDenied\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_DisplayStatusMessageInExceptionText()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                    <saml2p:StatusMessage>A status message</saml2p:StatusMessage>\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var xml = SignedXmlHelper.SignXml(response);\n\n            var subject = Saml2Response.Read(xml);\n\n            Action a = () => subject.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<UnsuccessfulSamlOperationException>()\n                .WithMessage(\"The Saml2Response must have status success to extract claims.*Status Code: Requester*Message: A status message*\")\n                .Where(x => x.Status == Saml2StatusCode.Requester);\n\n        }\n\n        [TestMethod]\n        public void Saml2Response_Ctor_FromData()\n        {\n            var issuer = new EntityId(\"http://idp.example.com\");\n            var identity = new ClaimsIdentity(new Claim[] \n            {\n                new Claim(ClaimTypes.NameIdentifier, \"JohnDoe\") \n            });\n            var response = new Saml2Response(issuer, null, null, null, identity);\n\n            response.Issuer.Should().Be(issuer);\n            response.GetClaims(Options.FromConfiguration)\n                .Single()\n                .Should().BeEquivalentTo(identity);\n        }\n\n        [TestMethod]\n        public void Saml2Response_Ctor_Nullcheck()\n        {\n            Action a = () => new Saml2Response(null, new Saml2Id(\"foo\"));\n\n            a.Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"xml\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Ctor_Options_Nullcheck()\n        {\n            Action a = () => new Saml2Response(null, new Saml2Id(\"foo\"), null);\n\n            a.Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"xml\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Xml_FromData_ContainsBasicData()\n        {\n            var issuer = new EntityId(\"http://idp.example.com\");\n            var nameId = \"JohnDoe\";\n            var destination = \"http://destination.example.com/\";\n\n            var identity = new ClaimsIdentity(new Claim[] \n            {\n                new Claim(ClaimTypes.NameIdentifier, nameId) \n            });\n\n            // Grab current time both before and after generating the response\n            // to avoid heisenbugs if the second counter is updated while creating\n            // the response.\n            string before = DateTime.UtcNow.ToSaml2DateTimeString();\n            var response = new Saml2Response(issuer, null,\n                new Uri(destination), null, identity);\n            string after = DateTime.UtcNow.ToSaml2DateTimeString();\n\n            var xml = response.XmlElement;\n\n            xml.LocalName.Should().Be(\"Response\");\n            xml.NamespaceURI.Should().Be(Saml2Namespaces.Saml2PName);\n            xml.Prefix.Should().Be(\"saml2p\");\n            xml[\"Issuer\", Saml2Namespaces.Saml2Name].InnerText.Should().Be(issuer.Id);\n            xml[\"Assertion\", Saml2Namespaces.Saml2Name]\n                [\"Subject\", Saml2Namespaces.Saml2Name][\"NameID\", Saml2Namespaces.Saml2Name]\n                .InnerText.Should().Be(nameId);\n            xml.GetAttribute(\"Destination\").Should().Be(destination);\n            xml.GetAttribute(\"ID\").Should().NotBeNullOrWhiteSpace();\n            xml.GetAttribute(\"Version\").Should().Be(\"2.0\");\n            xml.GetAttribute(\"IssueInstant\").Should().Match(\n                i => i == before || i == after);\n        }\n\n        [TestMethod]\n        public void Saml2Response_Xml_FromData_ContainsStatus_Success()\n        {\n            var identity = new ClaimsIdentity(new Claim[] \n            {\n                new Claim(ClaimTypes.NameIdentifier, \"JohnDoe\") \n            });\n\n            var response = new Saml2Response(new EntityId(\"issuer\"), null,\n                new Uri(\"http://destination.example.com\"), null, identity);\n\n            var xml = response.XmlElement;\n\n            var subject = xml[\"Status\", Saml2Namespaces.Saml2PName];\n\n            subject[\"StatusCode\", Saml2Namespaces.Saml2PName].GetAttribute(\"Value\")\n                .Should().Be(\"urn:oasis:names:tc:SAML:2.0:status:Success\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Xml_FromData_ContainsInResponseTo()\n        {\n            var identity = new ClaimsIdentity(new Claim[] \n            {\n                new Claim(ClaimTypes.NameIdentifier, \"JohnDoe\") \n            });\n\n            var response = new Saml2Response(new EntityId(\"issuer\"), null,\n                new Uri(\"http://destination.example.com\"), new Saml2Id(\"InResponseToID\"), identity);\n\n            var xml = response.XmlElement;\n\n            xml.GetAttribute(\"InResponseTo\").Should().Be(\"InResponseToID\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Xml_FromData_ContainsAudienceRestriction()\n        {\n            var identity = new ClaimsIdentity(new Claim[]\n            {\n                new Claim(ClaimTypes.NameIdentifier, \"JohnDoe\")\n            });\n\n            var audience = \"http://sp.example.com/\";\n\n            var subject = new Saml2Response(\n                new EntityId(\"issuer\"),\n                null,\n                new Uri(\"http://destination.example.com\"),\n                new Saml2Id(\"InResponseToID\"),\n                null,\n                new Uri(audience),\n                identity);\n\n            var actual = subject.XmlElement;\n\n            actual[\"Assertion\", Saml2Namespaces.Saml2Name].Should().NotBeNull(\"Assertion element should be present\")\n                .And.Subject[\"Conditions\", Saml2Namespaces.Saml2Name].Should().NotBeNull(\"Conditions element should be present\")\n                .And.Subject[\"AudienceRestriction\", Saml2Namespaces.Saml2Name].Should().NotBeNull(\"AudienceRestriction element should be present\")\n                .And.Subject[\"Audience\", Saml2Namespaces.Saml2Name].Should().NotBeNull(\"Audience element should be present\")\n                .And.Subject.InnerText.Should().Be(audience);\n        }\n\n        [TestMethod]\n        public void Saml2Response_FromData_RelayState()\n        {\n            var subject = new Saml2Response(new EntityId(\"issuer\"), null, null, null, \"ABC123\");\n\n            subject.RelayState.Should().Be(\"ABC123\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_FromData_SigningDetails()\n        {\n            var subject = new Saml2Response(new EntityId(\"issuer\"), SignedXmlHelper.TestCert, null, null);\n\n            subject.SigningAlgorithm.Should().Be(SecurityAlgorithms.RsaSha256Signature);\n        }\n\n        [TestMethod]\n        public void Saml2Response_ToXml()\n        {\n            string response = @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" ID=\"\"Saml2Response_ToXml\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"><saml2p:Status><saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" /></saml2p:Status></saml2p:Response>\";\n\n            var subject = Saml2Response.Read(response).ToXml();\n\n            subject.Should().Be(response);\n        }\n\n        [TestMethod]\n        public void Saml2Response_MessageName()\n        {\n            var subject = new Saml2Response(new EntityId(\"issuer\"), null, null, null);\n\n            subject.MessageName.Should().Be(\"SAMLResponse\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ChecksSha256WhenEnabled()\n        {\n            var signedResponse =\n                @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n                    xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                    ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Response\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                        <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                        <saml2p:Status>\n                            <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                        </saml2p:Status>\n                        <Assertion ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" IssueInstant=\"\"2015-03-13T20:43:33.466Z\"\" Version=\"\"2.0\"\" xmlns=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"><Issuer>https://idp.example.com</Issuer><Signature xmlns=\"\"http://www.w3.org/2000/09/xmldsig#\"\"><SignedInfo><CanonicalizationMethod Algorithm=\"\"http://www.w3.org/2001/10/xml-exc-c14n#\"\" /><SignatureMethod Algorithm=\"\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"\" /><Reference URI=\"\"#Saml2Response_GetClaims_ChecksSha256WhenEnabled\"\"><Transforms><Transform Algorithm=\"\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"\" /><Transform Algorithm=\"\"http://www.w3.org/2001/10/xml-exc-c14n#\"\" /></Transforms><DigestMethod Algorithm=\"\"http://www.w3.org/2001/04/xmlenc#sha256\"\" /><DigestValue>8s5HDYeicqbNwESGyrvYYXinJeJJgl4t6O27KGE0ejc=</DigestValue></Reference></SignedInfo><SignatureValue>mS2TFErenJHyvUbyIDUItOvH6AavUNGg5zL3hVueWDGjhaft2mlWSlQIFm9ajVQKrZq2Q/V4oZYGTQ8muTfrhdCL3fyu453nEWcNgQ+gm1H1e89N75XWonfL+UQDl73O95SX0dD4DjqQAC4MlSwMOkwOR7GakhjPbSzRct7lFbRx/3k+TUZNj9rfV4uzlf79ebkw9EaaSfu0tR6bAfGyrefFaNTZs2NeRICfD/GKn7HRo9zSdVPBHfEW2UUy0x/aWREG4GgUs7qObWL4uhDZ6oyy5FbsRcrUJMiXCFNXA8dr9EtZ2VafHz3d4kJFLiq63xjqpjGk/ng2gP+47F/9Rw==</SignatureValue><KeyInfo><X509Data><X509Certificate>MIIDIzCCAg+gAwIBAgIQg7mOjTf994NAVxZu4jqXpzAJBgUrDgMCHQUAMCQxIjAgBgNVBAMTGUtlbnRvci5BdXRoU2VydmljZXMuVGVzdHMwHhcNMTMwOTI1MTMzNTQ0WhcNMzkxMjMxMjM1OTU5WjAkMSIwIAYDVQQDExlLZW50b3IuQXV0aFNlcnZpY2VzLlRlc3RzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwVGpfvK9N//MnA5Jo1q2liyPR24406Dp25gv7LB3HK4DWgqsb7xXM6KIV/WVOyCV2g/O1ErBlB+HLhVZ4XUJvbqBbgAJqFO+TZwcCIe8u4nTEXeU660FdtkKClA17sbtMrAGdDfOPwVBHSuavdHeD7jHNI4RUDGKnEW13/0EvnHDilIetwODRxrX/+41R24sJThFbMczByS3OAL2dcIxoAynaGeM90gXsVYow1QhJUy21+cictikb7jW4mW6dvFCBrWIceom9J295DcQIHoxJy5NoZwMir/JV00qs1wDVoN20Ve1DC5ImwcG46XPF7efQ44yLh2j5Yexw+xloA81dwIDAQABo1kwVzBVBgNVHQEETjBMgBAWIahoZhXVUogbAqkS7zwfoSYwJDEiMCAGA1UEAxMZS2VudG9yLkF1dGhTZXJ2aWNlcy5UZXN0c4IQg7mOjTf994NAVxZu4jqXpzAJBgUrDgMCHQUAA4IBAQA2aGzmuKw4AYXWMhrGj5+i8vyAoifUn1QVOFsUukEA77CrqhqqaWFoeagfJp/45vlvrfrEwtF0QcWfmO9w1VvHwm7sk1G/cdYyJ71sU+llDsdPZm7LxQvWZYkK+xELcinQpSwt4ExavS+jLcHoOYHYwIZMBn3U8wZw7Kq29oGnoFQz7HLCEl/G9i3QRyvFITNlWTjoScaqMjHTzq6HCMaRsL09DLcY3KB+cedfpC0/MBlzaxZv0DctTulyaDfM9DCYOyokGN/rQ6qkAR0DDm8fVwknbJY7kURXNGoUetulTb5ow8BvD1gncOaYHSD0kbHZG+bLsUZDFatEr2KW8jbG</X509Certificate></X509Data></KeyInfo></Signature><Subject><NameID>SomeUser</NameID><SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" /></Subject><Conditions NotOnOrAfter=\"\"2100-01-01T05:00:00.000Z\"\" /></Assertion>\n                    </saml2p:Response>\";\n\n            var spOptions = StubFactory.CreateSPOptions();\n            var options = new Options(spOptions);\n            var idp = new IdentityProvider(new EntityId(\"https://idp.example.com\"), spOptions) { AllowUnsolicitedAuthnResponse = true };\n            idp.SigningKeys.AddConfiguredKey(SignedXmlHelper.TestKeySignOnly);\n            options.IdentityProviders.Add(idp);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(options);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ValidatesIdpCertificateIfConfigured()\n        {\n            var options = StubFactory.CreateOptions();\n\n            options.SPOptions.ValidateCertificates = true;\n\n            var responseXml = \n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXml = SignedXmlHelper.SignXml(responseXml);\n\n            Saml2Response.Read(responseXml).Invoking(\n                r => r.GetClaims(options))\n                .Should().Throw<InvalidSignatureException>()\n                .And.Message.Should().Be(\"The signature was valid, but the verification of the certificate failed. Is it expired or revoked? Are you sure you really want to enable ValidateCertificates (it's normally not needed)?\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_SessionNotOnOrAfter_ExtractedFromMessage()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + $@\"1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"{DateTime.UtcNow.ToSaml2DateTimeString()}\"\" SessionNotOnOrAfter = \"\"2050-01-01T00:00:00Z\"\">\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + $@\"2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeOtherUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"{DateTime.UtcNow.ToSaml2DateTimeString()}\"\" SessionNotOnOrAfter = \"\"2051-01-01T00:00:00Z\"\">\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var subject = Saml2Response.Read(SignedXmlHelper.SignXml(response));\n\n            subject.GetClaims(StubFactory.CreateOptions());\n\n            subject.SessionNotOnOrAfter.Should().Be(new DateTime(2050, 1, 1, 0, 0, 0, DateTimeKind.Utc));\n        }\n\n        [TestMethod]\n        public void Saml2Response_SessionNotOnOrAfter_ThrowsIfCalledBeforeGetClaims()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + $@\"1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"{DateTime.UtcNow.ToSaml2DateTimeString()}\"\" SessionNotOnOrAfter = \"\"2200-01-01T00:00:00Z\"\">\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var subject = Saml2Response.Read(SignedXmlHelper.SignXml(response));\n\n            subject.Invoking(s => { var value = s.SessionNotOnOrAfter; })\n                .Should().Throw<InvalidOperationException>()\n                .WithMessage(\"*GetClaims*\");\n        }\n    }\n}\n", "using Sustainsys.Saml2.WebSso;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing FluentAssertions;\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Web;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing Sustainsys.Saml2.Metadata;\nusing Sustainsys.Saml2.Saml2P;\nusing System.Reflection;\nusing Sustainsys.Saml2.Tests.Helpers;\nusing Sustainsys.Saml2.TestHelpers;\n\nnamespace Sustainsys.Saml2.Tests.WebSso\n{\n    [TestClass]\n    public class Saml2ArtifactBindingTests\n    {\n        [TestMethod]\n        public void Saml2ArtifactBinding_CanUnbind_Nullcheck()\n        {\n            Saml2Binding.Get(Saml2BindingType.Artifact)\n                .Invoking(b => b.CanUnbind(null))\n                .Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"request\");\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_Nullcheck_Request()\n        {\n            Saml2Binding.Get(Saml2BindingType.Artifact)\n                .Invoking(b => b.Unbind(null, null))\n                .Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"request\");\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_Nullcheck_Options()\n        {\n            Saml2Binding.Get(Saml2BindingType.Artifact)\n                .Invoking(b => b.Unbind(new HttpRequestData(\"GET\", new Uri(\"http://localhost\")), null))\n                .Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"options\");\n\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromGet()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Uri.EscapeDataString(\n                Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234)));\n\n            var relayState = \"relayState\";\n\n            var r = new HttpRequestData(\n                \"GET\",\n                new Uri($\"http://example.com/path/acs?SAMLart={artifact}&RelayState={relayState}\"),\n                null,\n                null,\n                new StoredRequestState(issuer, null, null, null));\n\n            StubServer.LastArtifactResolutionSoapActionHeader = null;\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, StubFactory.CreateOptions());\n\n            var xmlDocument = XmlHelpers.XmlDocumentFromString(\n                \"<message>   <child-node /> </message>\");\n\n            var expected = new UnbindResult(xmlDocument.DocumentElement, relayState, TrustLevel.None);\n\n            result.Should().BeEquivalentTo(expected);\n            StubServer.LastArtifactResolutionSoapActionHeader.Should().Be(\n                \"\\\"http://www.oasis-open.org/committees/security\\\"\");\n            StubServer.LastArtifactResolutionContentType.Should().Be(\"text/xml; charset=\\\"utf-8\\\"\");\n            StubServer.LastArtifactResolutionWasSigned.Should().BeFalse();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromGetUsesIdpFromNotification()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Uri.EscapeDataString(\n                Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234)));\n\n            var relayState = \"relayState\";\n\n            var relayData = new Dictionary<string, string>\n            {\n                { \"key\", \"value\" }\n            };\n\n            var r = new HttpRequestData(\n                \"GET\",\n                new Uri($\"http://example.com/path/acs?SAMLart={artifact}&RelayState={relayState}\"),\n                null,\n                null,\n                new StoredRequestState(issuer, null, null, relayData));\n\n            var options = StubFactory.CreateOptions();\n\n            var idp = options.IdentityProviders.Default;\n            options.IdentityProviders.Remove(idp.EntityId);\n\n            var getIdentityProviderCalled = false;\n            options.Notifications.GetIdentityProvider = (ei, rd, opt) =>\n            {\n                getIdentityProviderCalled = true;\n                rd[\"key\"].Should().Be(\"value\");\n                return idp;\n            };\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, options);\n\n            getIdentityProviderCalled.Should().BeTrue();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromGet_ArtifactIsntHashOfEntityId()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Uri.EscapeDataString(\n                Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(\n                        new EntityId(\"https://this.entityid.is.invalid\"),\n                        0x1234)));\n\n            var relayState = \"relayState\";\n\n            var r = new HttpRequestData(\n                \"GET\",\n                new Uri($\"http://example.com/path/acs?SAMLart={artifact}&RelayState={relayState}\"),\n                null,\n                null,\n                new StoredRequestState(issuer, null, null, null));\n\n            StubServer.LastArtifactResolutionSoapActionHeader = null;\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, StubFactory.CreateOptions());\n\n            var xmlDocument = XmlHelpers.XmlDocumentFromString(\n                \"<message>   <child-node /> </message>\");\n\n            var expected = new UnbindResult(xmlDocument.DocumentElement, relayState, TrustLevel.None);\n\n            result.Should().BeEquivalentTo(expected);\n            StubServer.LastArtifactResolutionWasSigned.Should().BeFalse();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromGet_SignsArtifactResolve()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Uri.EscapeDataString(\n                Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234)));\n\n            var r = new HttpRequestData(\n                \"GET\",\n                new Uri($\"http://example.com/path/acs?SAMLart={artifact}\"));\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.ServiceCertificates.Add(new ServiceCertificate\n            {\n                Certificate = SignedXmlHelper.TestCert\n            });\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, options);\n\n            StubServer.LastArtifactResolutionWasSigned.Should().BeTrue();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromGetWithoutRelayState()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Uri.EscapeDataString(\n                Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234)));\n\n            var r = new HttpRequestData(\n                \"GET\",\n                new Uri($\"http://example.com/path/acs?SAMLart={artifact}\"));\n\n            StubServer.LastArtifactResolutionSoapActionHeader = null;\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, StubFactory.CreateOptions());\n\n            var xmlDocument = XmlHelpers.XmlDocumentFromString(\n                \"<message>   <child-node /> </message>\");\n\n            var expected = new UnbindResult(xmlDocument.DocumentElement, null, TrustLevel.None);\n\n            result.Should().BeEquivalentTo(expected);\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromPost()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234));\n\n            var relayState = MethodBase.GetCurrentMethod().Name;\n\n            var r = new HttpRequestData(\n                \"POST\",\n                new Uri(\"http://example.com\"),\n                \"/ModulePath\",\n                new KeyValuePair<string, IEnumerable<string>>[]\n                {\n                    new KeyValuePair<string, IEnumerable<string>>(\"SAMLart\", new[] { artifact }),\n                    new KeyValuePair<string, IEnumerable<string>>(\"RelayState\", new[] { relayState })\n                },\n                new StoredRequestState(issuer, null, null, null));\n\n            StubServer.LastArtifactResolutionSoapActionHeader = null;\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, StubFactory.CreateOptions());\n\n            var xmlDocument = XmlHelpers.XmlDocumentFromString(\n                \"<message>   <child-node /> </message>\");\n\n            var expected = new UnbindResult(xmlDocument.DocumentElement, relayState, TrustLevel.None);\n\n            result.Should().BeEquivalentTo(expected);\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromPostWithoutRelayState()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234));\n\n            var r = new HttpRequestData(\n                \"POST\",\n                new Uri(\"http://example.com\"),\n                \"/ModulePath\",\n                new KeyValuePair<string, IEnumerable<string>>[]\n                {\n                    new KeyValuePair<string, IEnumerable<string>>(\"SAMLart\", new[] { artifact }),\n                },\n                null,\n                null);\n\n            StubServer.LastArtifactResolutionSoapActionHeader = null;\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, StubFactory.CreateOptions());\n\n            var xmlDocument = XmlHelpers.XmlDocumentFromString(\n                \"<message>   <child-node /> </message>\");\n\n            var expected = new UnbindResult(xmlDocument.DocumentElement, null, TrustLevel.None);\n\n            result.Should().BeEquivalentTo(expected);\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_ThrowsOnUnknownHttpMethod()\n        {\n            var r = new HttpRequestData(\"PUT\", new Uri(\"http://host\"));\n\n            Saml2Binding.Get(Saml2BindingType.Artifact)\n                .Invoking(b => b.Unbind(r, StubFactory.CreateOptions()))\n                .Should().Throw<InvalidOperationException>()\n                .WithMessage(\"Artifact binding can only use GET or POST http method, but found PUT\");\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind()\n        {\n            var message = new Saml2MessageImplementation\n            {\n                DestinationUrl = new Uri(\"http://example.com/destination\"),\n                MessageName = \"ShouldBeIgnored\",\n                RelayState = \"ABC& needs escape\",\n                XmlData = \"<XML />\",\n                Issuer = new EntityId(\"http://idp.example.com\"),\n            };\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Bind(message);\n\n            var expected = new CommandResult\n            {\n                HttpStatusCode = HttpStatusCode.SeeOther\n            };\n\n            result.Should().BeEquivalentTo(expected, opt => opt.Excluding(r => r.Location));\n\n            result.Location.Query.Count(c => c == '=').Should().Be(2, \"there are 2 params and = inside values should have been escaped\");\n            var query = HttpUtility.ParseQueryString(result.Location.Query);\n\n            Uri.UnescapeDataString(query[\"RelayState\"]).Should().Be(message.RelayState);\n\n            var artifact = Convert.FromBase64String(\n                Uri.UnescapeDataString(query[\"SAMLart\"]));\n\n            ISaml2Message storedMessage;\n            Saml2ArtifactBinding.PendingMessages.TryRemove(artifact, out storedMessage)\n                .Should().BeTrue();\n\n            storedMessage.Should().BeSameAs(message);\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind_WithQueryInDestination()\n        {\n            var message = new Saml2MessageImplementation\n            {\n                DestinationUrl = new Uri(\"http://example.com/destination?q=a\"),\n                MessageName = \"ShouldBeIgnored\",\n                RelayState = \"ABC123\",\n                XmlData = \"<XML />\",\n                Issuer = new EntityId(\"http://idp.example.com\")\n            };\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Bind(message);\n\n            result.Location.Query.Trim('?').Contains(\"?\").Should().BeFalse();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind_WithoutRelayState()\n        {\n            var message = new Saml2MessageImplementation\n            {\n                DestinationUrl = new Uri(\"http://example.com/destination?q=a\"),\n                MessageName = \"ShouldBeIgnored\",\n                XmlData = \"<XML />\",\n                Issuer = new EntityId(\"http://idp.example.com\")\n            };\n\n            Action a = () => Saml2Binding.Get(Saml2BindingType.Artifact).Bind(message);\n\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind_Nullcheck()\n        {\n            Saml2Binding.Get(Saml2BindingType.Artifact)\n                .Invoking(b => b.Bind(null))\n                .Should().Throw<ArgumentNullException>(\"message\");\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind_CreateArtifact()\n        {\n            var issuer = new EntityId(\"http://idp.example.com\");\n            var index = 0x1234;\n            var artifact = Saml2ArtifactBinding.CreateArtifact(issuer, index);\n\n            // Header\n            artifact[0].Should().Be(0);\n            artifact[1].Should().Be(4);\n\n            //Endpoint index\n            artifact[2].Should().Be(0x12);\n            artifact[3].Should().Be(0x34);\n\n            artifact.Length.Should().Be(44);\n\n            var sourceID = new byte[20];\n            Array.Copy(artifact, 4, sourceID, 0, 20);\n\n            sourceID.Should().BeEquivalentTo(\n                SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(issuer.Id)));\n\n            // Can't test a random value, but check it's not 0 all over.\n            artifact.Skip(24).Count(c => c == 0).Should().BeLessThan(10);\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind_CreateArtifact_NullcheckIssuer()\n        {\n            Action a = () => Saml2ArtifactBinding.CreateArtifact(null, 17);\n\n            a.Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"issuer\");\n        }\n\n    }\n}\n"], "fixing_code": ["using Microsoft.IdentityModel.Tokens;\nusing Sustainsys.Saml2.Metadata;\nusing Sustainsys.Saml2.Saml2P;\nusing Sustainsys.Saml2.Tokens;\nusing System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Sustainsys.Saml2.Configuration\n{\n    /// <summary>\n    /// Options for the service provider's behaviour; i.e. everything except\n    /// the idp and federation list.\n    /// </summary>\n    public class SPOptions\n    {\n        /// <summary>\n        /// Ctor\n        /// </summary>\n        public SPOptions()\n        {\n            MetadataCacheDuration = new XsdDuration(hours: 1);\n            Compatibility = new Compatibility();\n            OutboundSigningAlgorithm = XmlHelpers.GetDefaultSigningAlgorithmName();\n            MinIncomingSigningAlgorithm = XmlHelpers.GetDefaultSigningAlgorithmName();\n        }\n\n        /// <summary>\n        /// Construct the options from the given configuration section\n        /// </summary>\n        /// <param name=\"configSection\"></param>\n        public SPOptions(SustainsysSaml2Section configSection)\n        {\n            if (configSection == null)\n            {\n                throw new ArgumentNullException(nameof(configSection));\n            }\n\n            ReturnUrl = configSection.ReturnUrl;\n            MetadataCacheDuration = configSection.Metadata.CacheDuration;\n            MetadataValidDuration = configSection.Metadata.ValidUntil;\n            WantAssertionsSigned = configSection.Metadata.WantAssertionsSigned;\n            ValidateCertificates = configSection.ValidateCertificates;\n            DiscoveryServiceUrl = configSection.DiscoveryServiceUrl;\n            EntityId = configSection.EntityId;\n            ModulePath = configSection.ModulePath;\n            PublicOrigin = configSection.PublicOrigin;\n            Organization = configSection.Organization;\n            OutboundSigningAlgorithm = XmlHelpers.GetFullSigningAlgorithmName(configSection.OutboundSigningAlgorithm);\n            MinIncomingSigningAlgorithm = XmlHelpers.GetFullSigningAlgorithmName(configSection.MinIncomingSigningAlgorithm);\n            AuthenticateRequestSigningBehavior = configSection.AuthenticateRequestSigningBehavior;\n            NameIdPolicy = new Saml2NameIdPolicy(\n                configSection.NameIdPolicyElement.AllowCreate, configSection.NameIdPolicyElement.Format);\n            RequestedAuthnContext = new Saml2RequestedAuthnContext(configSection.RequestedAuthnContext);\n            Compatibility = new Compatibility(configSection.Compatibility);\n\n            configSection.ServiceCertificates.RegisterServiceCertificates(this);\n\n            foreach (var acs in configSection.AttributeConsumingServices)\n            {\n                AttributeConsumingServices.Add(acs);\n            }\n\n            foreach (var contact in configSection.Contacts)\n            {\n                Contacts.Add(contact);\n            }\n        }\n\n        /// <summary>\n        /// Return Uri to redirect the client to, if no return uri was specified\n        /// when initiating the signin sequence.\n        /// </summary>\n        public Uri ReturnUrl { get; set; }\n\n        /// <summary>\n        /// Recommendation of cache refresh interval to those who reads our\n        /// metadata.\n        /// </summary>\n        public XsdDuration MetadataCacheDuration { get; set; }\n\n        /// <summary>\n        /// Maximum validity duration after fetch for those who reads our\n        /// metadata. Exposed as an absolute validUntil time in the metadata.\n        /// If set to null, no validUntil is exposed in metadata.\n        /// </summary>\n        public TimeSpan? MetadataValidDuration { get; set; }\n\n        volatile private Saml2PSecurityTokenHandler saml2PSecurityTokenHandler;\n\n        /// <summary>\n        /// The security token handler used to process incoming assertions for this SP.\n        /// The default value is to lazy create one using the current EntityId.\n        /// </summary>\n        public Saml2PSecurityTokenHandler Saml2PSecurityTokenHandler\n        {\n            get\n            {\n                // Capture in a local variable to prevent race conditions. Reads and writes\n                // of references are atomic so there is no need for a lock.\n                var value = saml2PSecurityTokenHandler;\n                if (value == null)\n                {\n                    // Set the saved value, but don't trust it - still use a local var for the return.\n                    saml2PSecurityTokenHandler = value = new Saml2PSecurityTokenHandler(this);\n                }\n\n                return value;\n            }\n            set\n            {\n                saml2PSecurityTokenHandler = value;\n            }\n        }\n\n        /// <summary>\n        /// Url to discovery service to use if no idp is specified in the sign in call.\n        /// </summary>\n        public Uri DiscoveryServiceUrl { get; set; }\n\n        private EntityId entityId;\n\n        /// <summary>\n        /// EntityId - The identity of the ServiceProvider to use when sending requests to Idp\n        /// and presenting the SP in metadata.\n        /// </summary>\n        public EntityId EntityId\n        {\n            get\n            {\n                return entityId;\n            }\n            set\n            {\n                if (saml2PSecurityTokenHandler != null)\n                {\n                    throw new InvalidOperationException(\"Can't change entity id when a token handler has been instantiated.\");\n                }\n                entityId = value;\n            }\n        }\n\n        private string modulePath = \"/Saml2\";\n\n        /// <summary>\n        /// Application root relative path for Saml2 endpoints. The\n        /// default is \"/Saml2\".\n        /// </summary>\n        public string ModulePath\n        {\n            get\n            {\n                return modulePath;\n            }\n            set\n            {\n                if (value == null)\n                {\n                    throw new ArgumentNullException(nameof(value));\n                }\n\n                value = value.TrimEnd('/');\n\n                if (!value.StartsWith(\"/\", StringComparison.OrdinalIgnoreCase))\n                {\n                    value = \"/\" + value;\n                }\n\n                modulePath = value;\n            }\n        }\n\n        /// <summary>\n        /// By default, the service provider uses the host, protocol, port and\n        /// application root path from the HTTP request when creating links. \n        /// This might not be accurate in reverse proxy or load-balancing\n        /// situations. You can override the origin used for link generation\n        /// for the entire application using this property. To override per request,\n        /// implement a <code>GetPublicOrigin</code> Notification function.\n        /// </summary>\n        public Uri PublicOrigin { get; set; }\n\n        /// <summary>\n        /// Metadata describing the organization responsible for the entity.\n        /// </summary>\n        public Organization Organization { get; set; }\n\n        /// <summary>\n        /// NameId Policy.\n        /// </summary>\n        public Saml2NameIdPolicy NameIdPolicy { get; set; }\n\n        /// <summary>\n        /// RequestedAuthnContext\n        /// </summary>\n        public Saml2RequestedAuthnContext RequestedAuthnContext { get; set; }\n\n        readonly ICollection<ContactPerson> contacts = new List<ContactPerson>();\n\n        /// <summary>\n        /// Collection of contacts for the SAML2 entity.\n        /// </summary>\n        public ICollection<ContactPerson> Contacts\n        {\n            get\n            {\n                return contacts;\n            }\n        }\n\n        readonly ICollection<AttributeConsumingService> attributeConsumingServices\n            = new List<AttributeConsumingService>();\n\n        /// <summary>\n        /// Collection of attribute consuming services for the service provider.\n        /// </summary>\n        public ICollection<AttributeConsumingService> AttributeConsumingServices\n        {\n            get\n            {\n                return attributeConsumingServices;\n            }\n        }\n\n        readonly ServiceCertificateCollection serviceCertificates = new ServiceCertificateCollection();\n\n        /// <summary>\n        /// Certificates used by the service provider for signing or decryption.\n        /// </summary>\n        public ServiceCertificateCollection ServiceCertificates\n        {\n            get\n            {\n                return serviceCertificates;\n            }\n        }\n\n        /// <summary>\n        /// Certificates valid for use in decryption\n        /// </summary>\n        public ReadOnlyCollection<X509Certificate2> DecryptionServiceCertificates\n        {\n            get\n            {\n                var decryptionCertificates = ServiceCertificates\n                    .Where(c => c.Use.HasFlag(CertificateUse.Encryption) || c.Use == CertificateUse.Both)\n                    .Select(c => c.Certificate);\n\n                return decryptionCertificates.ToList().AsReadOnly();\n            }\n        }\n\n        /// <summary>\n        /// Certificate for use in signing outbound requests\n        /// </summary>\n        public X509Certificate2 SigningServiceCertificate\n        {\n            get\n            {\n                var signingCertificates = ServiceCertificates\n                    .Where(c => c.Status == CertificateStatus.Current)\n                    .Where(c => c.Use.HasFlag(CertificateUse.Signing) || c.Use == CertificateUse.Both)\n                    .Select(c => c.Certificate);\n\n                return signingCertificates.FirstOrDefault();\n            }\n        }\n\n        /// <summary>\n        /// Certificates to be published in metadata\n        /// </summary>\n        public ReadOnlyCollection<ServiceCertificate> MetadataCertificates\n        {\n            get\n            {\n                var futureEncryptionCertExists = PublishableServiceCertificates\n                    .Any(c => c.Status == CertificateStatus.Future && (c.Use == CertificateUse.Encryption || c.Use == CertificateUse.Both));\n\n                var metaDataCertificates = PublishableServiceCertificates\n                    .Where(\n                        // Signing & \"Both\" certs always get published because we want Idp's to be aware of upcoming keys\n                        c => c.Status == CertificateStatus.Future || c.Use != CertificateUse.Encryption\n                        // But current Encryption cert stops getting published immediately when a Future one is added\n                        // (of course we still decrypt with the current cert, but that's a different part of the code)\n                        || (c.Status == CertificateStatus.Current && c.Use == CertificateUse.Encryption && !futureEncryptionCertExists)\n                        || c.MetadataPublishOverride != MetadataPublishOverrideType.None\n                    ).ToList();\n\n                var futureBothCertExists = metaDataCertificates\n                    .Any(c => c.Status == CertificateStatus.Future && c.Use == CertificateUse.Both);\n\n                foreach (var cert in metaDataCertificates)\n                {\n                    // Just like we stop publishing Encryption cert immediately when a Future one is added,\n                    // in the case of a \"Both\" cert we should switch the current use to Signing so that Idp's stop sending\n                    // us certs encrypted with the old key\n                    if (cert.Use == CertificateUse.Both && cert.Status == CertificateStatus.Current && futureBothCertExists)\n                    {\n                        cert.Use = CertificateUse.Signing;\n                    }\n\n                    if (cert.MetadataPublishOverride == MetadataPublishOverrideType.PublishEncryption)\n                    {\n                        cert.Use = CertificateUse.Encryption;\n                    }\n                    if (cert.MetadataPublishOverride == MetadataPublishOverrideType.PublishSigning)\n                    {\n                        cert.Use = CertificateUse.Signing;\n                    }\n                    if (cert.MetadataPublishOverride == MetadataPublishOverrideType.PublishUnspecified)\n                    {\n                        cert.Use = CertificateUse.Both;\n                    }\n                }\n\n                return metaDataCertificates.AsReadOnly();\n            }\n        }\n\n        private static CertificateUse ConvertUse(CertificateUse certificateUse)\n        {\n            var use = certificateUse & (CertificateUse.Signing | CertificateUse.Encryption);\n\n            if (use == (CertificateUse.Signing | CertificateUse.Encryption))\n            {\n                use = CertificateUse.Both;\n            }\n            return use;\n        }\n\n        private IEnumerable<ServiceCertificate> PublishableServiceCertificates\n        {\n            get\n            {\n                return ServiceCertificates\n                    .Where(c => c.MetadataPublishOverride != MetadataPublishOverrideType.DoNotPublish\n                    && c.Use != CertificateUse.TlsClient) // Certs that are only Tls should not be published.\n                    .Select(c => new ServiceCertificate // Finally create new instances and convert use to ignore Tls.\n                    {\n                        Use = ConvertUse(c.Use),\n                        Status = c.Status,\n                        MetadataPublishOverride = c.MetadataPublishOverride,\n                        Certificate = c.Certificate\n                    });\n            }\n        }\n\n        /// <summary>\n        /// Signing behaviour for AuthnRequests.\n        /// </summary>\n        public SigningBehavior AuthenticateRequestSigningBehavior { get; set; }\n\n        /// <summary>\n        /// Signing algorithm for metadata and outbound messages. Can be \n        /// overriden for each <see cref=\"IdentityProvider\"/>.\n        /// </summary>\n        public string OutboundSigningAlgorithm { get; set; }\n\n        /// <summary>\n        /// Metadata flag that we want assertions to be signed.\n        /// </summary>\n        public bool WantAssertionsSigned { get; set; }\n\n        /// <summary>\n        /// Validate certificates when validating signatures? Normally not a\n        /// good idea as SAML2 deployments typically exchange certificates\n        /// directly and instead of relying on the public certificate\n        /// infrastructure.\n        /// </summary>\n        public bool ValidateCertificates { get; set; }\n\n        /// <summary>\n        /// Compatibility settings. Can be used to make Saml2 accept\n        /// certain non-standard behaviour.\n        /// </summary>\n        public Compatibility Compatibility { get; set; }\n\n        private string minIncomingSigningAlgorithm;\n\n        /// <summary>\n        /// Minimum accepted signature algorithm for any incoming messages.\n        /// </summary>\n        public string MinIncomingSigningAlgorithm\n        {\n            get\n            {\n                return minIncomingSigningAlgorithm;\n            }\n            set\n            {\n                if (!XmlHelpers.KnownSigningAlgorithms.Contains(value))\n                {\n                    throw new ArgumentException(\"The signing algorithm \" + value +\n                        \" is unknown or not supported by the current .NET Framework.\");\n                }\n                minIncomingSigningAlgorithm = value;\n            }\n        }\n\n        /// <summary>\n        /// Adapter to logging framework of hosting application.\n        /// </summary>\n        public ILoggerAdapter Logger { get; set; }\n\n        private ITokenReplayCache tokenReplayCache;\n        public ITokenReplayCache TokenReplayCache \n        { \n            get\n            {\n                if(tokenReplayCache == null)\n                {\n                    tokenReplayCache = new TokenReplayCache();\n                }\n                return tokenReplayCache;\n            }\n            set\n            {\n                tokenReplayCache = value;\n            }\n        }\n}\n}\n", "using Microsoft.IdentityModel.Tokens;\nusing Microsoft.IdentityModel.Tokens.Saml2;\nusing Sustainsys.Saml2.Configuration;\nusing Sustainsys.Saml2.Internal;\nusing Sustainsys.Saml2.Tokens;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\n\nnamespace Sustainsys.Saml2.Saml2P\n{\n\t/// <summary>\n\t/// Somewhat ugly subclassing to be able to access some methods that are protected\n\t/// on Saml2SecurityTokenHandler. The public interface of Saml2SecurityTokenHandler\n\t/// expects the actual assertion to be signed, which is not always the case when\n\t/// using Saml2-P. The assertion can be embedded in a signed response. Or the signing\n\t/// could be handled at transport level.\n\t/// </summary>\n\tpublic class Saml2PSecurityTokenHandler : Saml2SecurityTokenHandler\n\t{\n\t\tpublic Saml2PSecurityTokenHandler(): this(null)\n\t\t{\n\t\t\t// backward compatibility = null spOptions\n\t\t}\n\n\t\tpublic Saml2PSecurityTokenHandler(SPOptions spOptions)\n\t\t{\n\t\t\tSerializer = new Saml2PSerializer(spOptions);\n\t\t}\n\n\t\t// TODO: needed with Microsoft.identitymodel?\n\t\t/// <summary>\n\t\t/// Process authentication statement from SAML assertion. WIF chokes if the authentication statement \n\t\t/// contains a DeclarationReference, so we clear this out before calling the base method\n\t\t/// http://referencesource.microsoft.com/#System.IdentityModel/System/IdentityModel/Tokens/Saml2SecurityTokenHandler.cs,1970\n\t\t/// </summary>\n\t\t/// <param name=\"statement\">Authentication statement</param>\n\t\t/// <param name=\"subject\">Claim subject</param>\n\t\t/// <param name=\"issuer\">Assertion Issuer</param>\n\t\t[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", MessageId = \"1\")]\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", MessageId = \"0\")]\n        protected override void ProcessAuthenticationStatement(Saml2AuthenticationStatement statement, ClaimsIdentity subject, string issuer)\n        {\n            if (statement.AuthenticationContext != null)\n            {\n                statement.AuthenticationContext.DeclarationReference = null;\n            }\n            base.ProcessAuthenticationStatement(statement, subject, issuer);\n\n            if(statement.SessionIndex != null)\n            {\n                var nameIdClaim = subject.FindFirst(ClaimTypes.NameIdentifier);\n\n                if (nameIdClaim != null)\n                {\n                    subject.AddClaim(\n                        new Claim(\n                            Saml2ClaimTypes.LogoutNameIdentifier,\n                            DelimitedString.Join(\n                                nameIdClaim.Properties.GetValueOrEmpty(ClaimProperties.SamlNameIdentifierNameQualifier),\n                                nameIdClaim.Properties.GetValueOrEmpty(ClaimProperties.SamlNameIdentifierSPNameQualifier),\n                                nameIdClaim.Properties.GetValueOrEmpty(ClaimProperties.SamlNameIdentifierFormat),\n                                nameIdClaim.Properties.GetValueOrEmpty(ClaimProperties.SamlNameIdentifierSPProvidedId),\n                                nameIdClaim.Value),\n                            null,\n                            issuer));\n                }\n\n                subject.AddClaim(\n                    new Claim(Saml2ClaimTypes.SessionIndex, statement.SessionIndex, null, issuer));\n            }\n        }\n\n\t\t// Override and build our own logic. The problem is ValidateTokenReplay that serializes the token back. And that\n\t\t// breaks because it expects some optional values to be present.\n\t\tpublic override ClaimsPrincipal ValidateToken(string token, TokenValidationParameters validationParameters, out Microsoft.IdentityModel.Tokens.SecurityToken validatedToken)\n\t\t{\n\t\t\tvar samlToken = ReadSaml2Token(token);\n\n\t\t\tValidateConditions(samlToken, validationParameters);\n\t\t\tValidateSubject(samlToken, validationParameters);\n\n\t\t\tvar issuer = ValidateIssuer(samlToken.Issuer, samlToken, validationParameters);\n\n\t\t\t// Just using the assertion id for token replay. As that is part of the signed value it cannot\n\t\t\t// be altered by someone replaying the token.\n\t\t\tValidateTokenReplay(samlToken.Assertion.Conditions.NotOnOrAfter, samlToken.Assertion.Id.Value, validationParameters);\n\n\t\t\t// ValidateIssuerSecurityKey not called - we have our own signature validation.\n\n\t\t\tvalidatedToken = samlToken;\n\t\t\tvar identity = CreateClaimsIdentity(samlToken, issuer, validationParameters);\n\n\t\t\treturn new ClaimsPrincipal(identity);\n\t\t}\n\t}\n}\n", "using Microsoft.IdentityModel.Tokens.Saml2;\nusing Microsoft.IdentityModel.Tokens;\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Xml;\nusing Sustainsys.Saml2.Configuration;\nusing System.Security.Cryptography;\nusing Sustainsys.Saml2.Internal;\nusing Sustainsys.Saml2.Exceptions;\nusing System.Diagnostics.CodeAnalysis;\nusing Sustainsys.Saml2.Metadata;\n\nnamespace Sustainsys.Saml2.Saml2P\n{\n    /// <summary>\n    /// Represents a SAML2 response according to 3.3.3. The class is immutable (to an\n    /// external observer. Internal state is lazy initiated).\n    /// </summary>\n    public class Saml2Response : ISaml2Message\n    {\n        /// <summary>Holds all assertion element nodes</summary>\n        private IEnumerable<XmlElement> allAssertionElementNodes;\n\n        /// <summary>\n        /// Read the supplied Xml and parse it into a response.\n        /// </summary>\n        /// <param name=\"xml\">xml data.</param>\n        /// <returns>Saml2Response</returns>\n        /// <exception cref=\"XmlException\">On xml errors or unexpected xml structure.</exception>\n        public static Saml2Response Read(string xml)\n        {\n            return Read(xml, null, null);\n        }\n\n        /// <summary>\n        /// Read the supplied Xml and parse it into a response.\n        /// </summary>\n        /// <param name=\"xml\">xml data.</param>\n        /// <param name=\"expectedInResponseTo\">The expected value of the\n        /// InReplyTo parameter in the message.</param>\n        /// <returns>Saml2Response</returns>\n        /// <exception cref=\"XmlException\">On xml errors or unexpected xml structure.</exception>\n        public static Saml2Response Read(string xml, Saml2Id expectedInResponseTo)\n        {\n            return Read(xml, expectedInResponseTo, null);\n        }\n\n        /// <summary>\n        /// Read the supplied Xml and parse it into a response.\n        /// </summary>\n        /// <param name=\"xml\">xml data.</param>\n        /// <param name=\"expectedInResponseTo\">The expected value of the\n        /// InReplyTo parameter in the message.</param>\n        /// <param name=\"options\">Service provider settings used when validating Saml response</param>\n        /// <returns>Saml2Response</returns>\n        /// <exception cref=\"XmlException\">On xml errors or unexpected xml structure.</exception>\n        public static Saml2Response Read(string xml, Saml2Id expectedInResponseTo, IOptions options)\n        {\n            var x = XmlHelpers.XmlDocumentFromString(xml);\n\n            return new Saml2Response(x.DocumentElement, expectedInResponseTo, options);\n        }\n\n        /// <summary>\n        /// Ctor\n        /// </summary>\n        /// <param name=\"xml\">Root xml element.</param>\n        /// <param name=\"expectedInResponseTo\">The expected value of the\n        /// InReplyTo parameter in the message.</param>\n        /// <param name=\"options\">Service provider settings used when validating Saml response</param>\n#pragma warning disable IDE0060 // Remove unused parameter\n        public Saml2Response(XmlElement xml, Saml2Id expectedInResponseTo, IOptions options)\n            : this(xml, expectedInResponseTo)\n#pragma warning restore IDE0060 // Remove unused parameter\n        { }\n\n        /// <summary>\n        /// Ctor\n        /// </summary>\n        /// <param name=\"xml\">Root xml element.</param>\n        /// <param name=\"expectedInResponseTo\">The expected value of the\n        /// InReplyTo parameter in the message.</param>\n        public Saml2Response(XmlElement xml, Saml2Id expectedInResponseTo)\n        {\n            if (xml == null)\n            {\n                throw new ArgumentNullException(nameof(xml));\n            }\n\n            if (xml.LocalName != \"Response\"\n                || xml.NamespaceURI != Saml2Namespaces.Saml2P)\n            {\n                throw new XmlException(\"Expected a SAML2 assertion document\");\n            }\n\n            if (xml.Attributes[\"Version\"].Value != \"2.0\")\n            {\n                throw new XmlException(\"Wrong or unsupported SAML2 version\");\n            }\n\n            xmlElement = xml;\n\n            id = new Saml2Id(xml.GetRequiredAttributeValue(\"ID\"));\n\n            ExpectedInResponseTo = expectedInResponseTo;\n            ReadInResponseTo(xml);\n\n            issueInstant = DateTime.Parse(xml.GetRequiredAttributeValue(\"IssueInstant\"),\n                CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);\n\n            var statusElement = xml.GetRequiredElement(\"Status\", Saml2Namespaces.Saml2PName);\n            var statusCodeElement = statusElement.GetRequiredElement(\"StatusCode\", Saml2Namespaces.Saml2PName);\n            var statusString = statusCodeElement.GetRequiredAttributeValue(\"Value\");\n\n            status = StatusCodeHelper.FromString(statusString);\n\n            statusMessage = statusElement\n                [\"StatusMessage\", Saml2Namespaces.Saml2PName].GetTrimmedTextIfNotNull();\n            if (statusCodeElement[\"StatusCode\", Saml2Namespaces.Saml2PName] != null)\n            {\n                secondLevelStatus = statusCodeElement[\"StatusCode\", Saml2Namespaces.Saml2PName].Attributes[\"Value\"].Value;\n            }\n\n            Issuer = new EntityId(xmlElement[\"Issuer\", Saml2Namespaces.Saml2Name].GetTrimmedTextIfNotNull());\n\n            var destinationUrlString = xmlElement.Attributes[\"Destination\"].GetValueIfNotNull();\n\n            if (destinationUrlString != null)\n            {\n                if (!Uri.TryCreate(destinationUrlString, UriKind.Absolute, out Uri parsedDestination))\n                {\n                    throw new BadFormatSamlResponseException(\"Destination value was not a valid Uri\");\n                }\n                DestinationUrl = parsedDestination;\n            }\n        }\n\n        private void ReadInResponseTo(XmlElement xml)\n        {\n            var parsedInResponseTo = xml.Attributes[\"InResponseTo\"].GetValueIfNotNull();\n\n            if(parsedInResponseTo != null)\n            {\n                InResponseTo = new Saml2Id(parsedInResponseTo);\n            }\n        }\n\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"IgnoreMissingInResponseTo\")]\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"InResponseTo\")]\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"RelayState\")]\n        private void ValidateInResponseTo(IOptions options, IEnumerable<ClaimsIdentity> claimsIdentities)\n        {\n            if(InResponseTo != null)\n            { \n                if (ExpectedInResponseTo == null)\n                {\n                    if (options.Notifications.Unsafe.IgnoreUnexpectedInResponseTo(this, claimsIdentities))\n                    {\n                        options.SPOptions.Logger.WriteInformation($\"Ignoring unexpected InReponseTo {InResponseTo.Value}\"\n                            + $\"for Saml2 response {Id.Value} for user \"\n                            + claimsIdentities.First().FindFirst(ClaimTypes.NameIdentifier)?.Value + \".\");\n                    }\n                    else\n                    {\n                        throw new UnexpectedInResponseToException(\n                            $\"Received message {id.Value} contains unexpected InResponseTo \\\"{InResponseTo.Value}\\\". No \" +\n                            $\"cookie preserving state from the request was found so the message was not expected to have an \" +\n                            $\"InResponseTo attribute. This error typically occurs if the cookie set when doing SP-initiated \" +\n                            $\"sign on have been lost.\");\n                    }\n\n                }\n                else\n                {\n                    if (ExpectedInResponseTo.Value != InResponseTo.Value)\n                    {\n                        throw new Saml2ResponseFailedValidationException(\n                            string.Format(CultureInfo.InvariantCulture,\n                            \"InResponseTo Id \\\"{0}\\\" in received response does not match Id \\\"{1}\\\" of the sent request.\",\n                            InResponseTo.Value, ExpectedInResponseTo.Value));\n                    }\n                }\n            }\n            else\n            {\n                if (options?.SPOptions.Compatibility.IgnoreMissingInResponseTo ?? false)\n                {\n                    return;\n                };\n\n                if (ExpectedInResponseTo != null)\n                {\n                    throw new Saml2ResponseFailedValidationException(\n                        string.Format(CultureInfo.InvariantCulture,\n                        \"Expected message to contain InResponseTo \\\"{0}\\\", but found none. If this error occurs \" +\n                        \"due to the Idp not setting InResponseTo according to the SAML2 specification, this check \" +\n                        \"can be disabled by setting the IgnoreMissingInResponseTo compatibility flag to true.\",\n                        ExpectedInResponseTo.Value));\n                }\n            }\n        }\n\n        /// <summary>\n        /// Create a response with the supplied data.\n        /// </summary>\n        /// <param name=\"issuer\">Issuer of the response.</param>\n        /// <param name=\"signingCertificate\">The certificate to use when signing\n        /// this response in XML form.</param>\n        /// <param name=\"destinationUrl\">The destination Uri for the message</param>\n        /// <param name=\"inResponseTo\">In response to id</param>\n        /// <param name=\"claimsIdentities\">Claims identities to be included in the \n        /// response. Each identity is translated into a separate assertion.</param>\n        public Saml2Response(\n            EntityId issuer,\n            X509Certificate2 signingCertificate,\n            Uri destinationUrl,\n            Saml2Id inResponseTo,\n            params ClaimsIdentity[] claimsIdentities)\n            : this(issuer, signingCertificate, destinationUrl, inResponseTo, null, claimsIdentities)\n        { }\n\n        /// <summary>\n        /// Create a response with the supplied data.\n        /// </summary>\n        /// <param name=\"issuer\">Issuer of the response.</param>\n        /// <param name=\"signingCertificate\">The certificate to use when signing\n        /// this response in XML form.</param>\n        /// <param name=\"destinationUrl\">The destination Uri for the message</param>\n        /// <param name=\"inResponseTo\">In response to id</param>\n        /// <param name=\"relayState\">RelayState associated with the message.</param>\n        /// <param name=\"claimsIdentities\">Claims identities to be included in the \n        /// response. Each identity is translated into a separate assertion.</param>\n        public Saml2Response(\n            EntityId issuer,\n            X509Certificate2 signingCertificate,\n            Uri destinationUrl,\n            Saml2Id inResponseTo,\n            string relayState,\n            params ClaimsIdentity[] claimsIdentities)\n            : this(issuer, signingCertificate, destinationUrl, inResponseTo, relayState, null, claimsIdentities)\n        { }\n\n        /// <summary>\n        /// Create a response with the supplied data.\n        /// </summary>\n        /// <param name=\"issuer\">Issuer of the response.</param>\n        /// <param name=\"issuerCertificate\">The certificate to use when signing\n        /// this response in XML form.</param>\n        /// <param name=\"destinationUrl\">The destination Uri for the message</param>\n        /// <param name=\"inResponseTo\">In response to id</param>\n        /// <param name=\"relayState\">RelayState associated with the message.</param>\n        /// <param name=\"claimsIdentities\">Claims identities to be included in the \n        /// <param name=\"audience\">Audience of the response, set as AudienceRestriction</param>\n        /// response. Each identity is translated into a separate assertion.</param>\n        public Saml2Response(\n            EntityId issuer,\n            X509Certificate2 issuerCertificate,\n            Uri destinationUrl,\n            Saml2Id inResponseTo,\n            string relayState,\n            Uri audience,\n            params ClaimsIdentity[] claimsIdentities)\n        {\n            Issuer = issuer;\n            this.claimsIdentities = claimsIdentities;\n            SigningCertificate = issuerCertificate;\n            SigningAlgorithm = XmlHelpers.GetDefaultSigningAlgorithmName();\n            DestinationUrl = destinationUrl;\n            RelayState = relayState;\n            InResponseTo = inResponseTo;\n            id = new Saml2Id(\"id\" + Guid.NewGuid().ToString(\"N\"));\n            status = Saml2StatusCode.Success;\n            this.audience = audience;\n        }\n\n        /// <summary>\n        /// Certificate used to sign the message with during binding, according\n        /// to the signature processing rules of each binding.\n        /// </summary>\n        [ExcludeFromCodeCoverage]\n        public X509Certificate2 SigningCertificate { get; }\n\n        /// <summary>\n        /// The signing algorithm to use when signing the message during binding, \n        /// according to the signature processing rules of each binding.\n        /// </summary>\n        /// <value>The signing algorithm.</value>\n        [ExcludeFromCodeCoverage]\n        public string SigningAlgorithm { get; set; }\n\n        private XmlElement xmlElement;\n\n        /// <summary>\n        /// The response as an xml element. Either the original xml, or xml that is\n        /// generated from supplied data.\n        /// </summary>\n        public XmlElement XmlElement\n        {\n            get\n            {\n                if (xmlElement == null)\n                {\n                    CreateXmlElement();\n                }\n\n                return xmlElement;\n            }\n        }\n\n        /// <summary>\n        /// SAML Message name for responses, hard coded to SAMLResponse.\n        /// </summary>\n        public string MessageName\n        {\n            get\n            {\n                return \"SAMLResponse\";\n            }\n        }\n\n        /// <summary>\n        /// string representation of the Saml2Response serialized to xml.\n        /// </summary>\n        /// <returns>string containing xml.</returns>\n        public string ToXml()\n        {\n            return XmlElement.OuterXml;\n        }\n\n        private void CreateXmlElement()\n        {\n            var xml = XmlHelpers.CreateSafeXmlDocument();\n\n            var responseElement = xml.CreateElement(\"saml2p\", \"Response\", Saml2Namespaces.Saml2PName);\n\n            if (DestinationUrl != null)\n            {\n                responseElement.SetAttributeNode(\"Destination\", \"\").Value = DestinationUrl.ToString();\n            }\n\n            responseElement.SetAttributeNode(\"ID\", \"\").Value = id.Value;\n            responseElement.SetAttributeNode(\"Version\", \"\").Value = \"2.0\";\n            responseElement.SetAttributeNode(\"IssueInstant\", \"\").Value =\n                DateTime.UtcNow.ToSaml2DateTimeString();\n            if (InResponseTo != null)\n            {\n                responseElement.SetAttributeNode(\"InResponseTo\", \"\").Value = InResponseTo.Value;\n            }\n            xml.AppendChild(responseElement);\n\n            var issuerElement = xml.CreateElement(\"saml2\", \"Issuer\", Saml2Namespaces.Saml2Name);\n            issuerElement.InnerText = Issuer.Id;\n            responseElement.AppendChild(issuerElement);\n\n            var statusElement = xml.CreateElement(\"saml2p\", \"Status\", Saml2Namespaces.Saml2PName);\n            var statusCodeElement = xml.CreateElement(\"saml2p\", \"StatusCode\", Saml2Namespaces.Saml2PName);\n            statusCodeElement.SetAttributeNode(\"Value\", \"\").Value = StatusCodeHelper.FromCode(Status);\n            statusElement.AppendChild(statusCodeElement);\n            responseElement.AppendChild(statusElement);\n\n            foreach (var ci in claimsIdentities)\n            {\n                responseElement.AppendChild(xml.ReadNode(\n                    ci.ToSaml2Assertion(Issuer, audience, InResponseTo, DestinationUrl).ToXElement().CreateReader()));\n            }\n\n            xmlElement = xml.DocumentElement;\n        }\n\n        readonly Saml2Id id;\n\n        /// <summary>\n        /// Id of the response message.\n        /// </summary>\n        public Saml2Id Id { get { return id; } }\n\n        /// <summary>\n        /// Expected InResponseTo as extracted from \n        /// </summary>\n        public Saml2Id ExpectedInResponseTo { get; private set; }\n\n        /// <summary>\n        /// InResponseTo id.\n        /// </summary>\n        public Saml2Id InResponseTo { get; private set; }\n\n        readonly DateTime issueInstant;\n\n        /// <summary>\n        /// Issue instant of the response message.\n        /// </summary>\n        public DateTime IssueInstant { get { return issueInstant; } }\n\n        readonly Saml2StatusCode status;\n\n        /// <summary>\n        /// Status code of the message according to the SAML2 spec section 3.2.2.2\n        /// </summary>\n        public Saml2StatusCode Status { get { return status; } }\n\n        readonly string statusMessage;\n\n        /// <summary>\n        /// StatusMessage of the message according to the SAML2 spec section 3.2.2.1\n        /// </summary>\n        public string StatusMessage { get { return statusMessage; } }\n\n        readonly string secondLevelStatus;\n        /// <summary>\n        /// Optional status which MAY give additional information about the cause of the problem (according to the SAML2 spec section 3.2.2.2))))))))). \n        /// Because it may change in future specifications let's not make enum out of it yet.\n        /// </summary>\n        public string SecondLevelStatus { get { return secondLevelStatus; } }\n\n        /// <summary>\n        /// Issuer (= sender) of the response.\n        /// </summary>\n        public EntityId Issuer { get; }\n\n        /// <summary>\n        /// The destination of the response message.\n        /// </summary>\n        public Uri DestinationUrl { get; }\n\n        /// <summary>Gets all assertion element nodes from this response message.</summary>\n        /// <value>All assertion element nodes.</value>\n        private IEnumerable<XmlElement> GetAllAssertionElementNodes(IOptions options)\n        {\n            return allAssertionElementNodes ?? (allAssertionElementNodes = RetrieveAssertionElements(options));\n        }\n\n        private IEnumerable<XmlElement> RetrieveAssertionElements(IOptions options)\n        {\n            var assertions = new List<XmlElement>();\n\n            assertions.AddRange(XmlElement.ChildNodes.Cast<XmlNode>()\n                .Where(node => node.NodeType == XmlNodeType.Element).Cast<XmlElement>()\n                .Where(xe => xe.LocalName == \"Assertion\" && xe.NamespaceURI == Saml2Namespaces.Saml2Name));\n\n            var encryptedAssertions = XmlElement.ChildNodes.Cast<XmlNode>()\n                .Where(node => node.NodeType == XmlNodeType.Element).Cast<XmlElement>()\n                .Where(xe => xe.LocalName == \"EncryptedAssertion\" && xe.NamespaceURI == Saml2Namespaces.Saml2Name);\n\n            if (encryptedAssertions.Count() > 0)\n            {\n                options.SPOptions.Logger.WriteVerbose(\"Found encrypted assertions, decrypting...\");\n\n                var decryptionCertificates = GetCertificatesValidForDecryption(options);\n\n                bool decrypted = false;\n                foreach (var serviceCertificate in decryptionCertificates)\n                {\n                    try\n                    {\n                        assertions.AddRange(encryptedAssertions.Decrypt(serviceCertificate.PrivateKey)\n                                .Select(xe => (XmlElement)xe.GetElementsByTagName(\"Assertion\", Saml2Namespaces.Saml2Name)[0]));\n                        decrypted = true;\n                        break;\n                    }\n                    catch (CryptographicException)\n                    {\n                        // we cannot depend on Idp's sending KeyInfo, so this is the only \n                        // reliable way to know we've got the wrong cert\n                    }\n                }\n                if (!decrypted)\n                {\n                    throw new Saml2ResponseFailedValidationException(\"Encrypted Assertion(s) could not be decrypted using the configured Service Certificate(s).\");\n                }\n            }\n\n            return assertions;\n        }\n\n        private static IEnumerable<X509Certificate2> GetCertificatesValidForDecryption(IOptions options)\n        {\n            var decryptionCertificates = options.SPOptions.DecryptionServiceCertificates;\n\n            if (decryptionCertificates.Count == 0)\n            {\n                throw new Saml2ResponseFailedValidationException(\"Encrypted Assertions encountered but Service Certificate was not provided.\");\n            }\n\n            return decryptionCertificates;\n        }\n\n        private void Validate(IOptions options, IdentityProvider idp)\n        {\n            CheckIfUnsolicitedIsAllowed(options, idp);\n            ValidateSignature(options, idp);\n        }\n\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"RelayState\")]\n\n        private void CheckIfUnsolicitedIsAllowed(IOptions options, IdentityProvider idp)\n        {\n            if (InResponseTo == null)\n            {\n                if (idp.AllowUnsolicitedAuthnResponse)\n                {\n                    options.SPOptions.Logger.WriteVerbose(\"Received unsolicited Saml Response \" + Id \n                        + \" which is allowed for idp \" + idp.EntityId.Id);\n                    return;\n                }\n                string msg = string.Format(CultureInfo.InvariantCulture,\n                    \"Unsolicited responses are not allowed for idp \\\"{0}\\\".\", Issuer.Id);\n                throw new Saml2ResponseFailedValidationException(msg);\n            }\n        }\n\n        private void ValidateSignature(IOptions options, IdentityProvider idp)\n        {\n            var idpKeys = idp.SigningKeys;\n\n            var minAlgorithm = options.SPOptions.MinIncomingSigningAlgorithm;\n\n            if(!xmlElement.IsSignedByAny(idpKeys, options.SPOptions.ValidateCertificates, minAlgorithm)\n                && GetAllAssertionElementNodes(options)\n                .Any(a => !a.IsSignedByAny(idpKeys, options.SPOptions.ValidateCertificates, minAlgorithm)))\n            {\n                throw new Saml2ResponseFailedValidationException(\"The SAML Response is not signed and contains unsigned Assertions. Response cannot be trusted.\");\n            }\n            options.SPOptions.Logger.WriteVerbose(\"Signature validation passed for Saml Response \" + Id);\n        }\n\n        private readonly Uri audience;\n\n        private IEnumerable<ClaimsIdentity> claimsIdentities;\n        private Exception createClaimsException;\n\n        /// <summary>\n        /// Extract claims from the assertions contained in the response.\n        /// </summary>\n        /// <param name=\"options\">Service provider settings used when processing the response into claims.</param>\n        /// <returns>ClaimsIdentities</returns>\n        // Method might throw expections so make it a method and not a property.\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1024:UsePropertiesWhereAppropriate\")]\n        public IEnumerable<ClaimsIdentity> GetClaims(IOptions options)\n        {\n            return GetClaims(options, null);\n        }\n        \n        /// <summary>\n        /// Extract claims from the assertions contained in the response.\n        /// </summary>\n        /// <param name=\"options\">Service provider settings used when processing the response into claims.</param>\n        /// <param name=\"relayData\">Relay data stored when creating AuthnRequest, to be passed on to\n        /// GetIdentityProvider notification.</param>\n        /// <returns>ClaimsIdentities</returns>\n        // Method might throw expections so make it a method and not a property.\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1024:UsePropertiesWhereAppropriate\")]\n        public IEnumerable<ClaimsIdentity> GetClaims(IOptions options, IDictionary<string, string> relayData)\n        {\n            if (createClaimsException != null)\n            {\n                throw createClaimsException;\n            }\n\n            if (claimsIdentities == null)\n            {\n                try\n                {\n                    var idp = options.Notifications.GetIdentityProvider(Issuer, relayData, options);\n                    claimsIdentities = CreateClaims(options, idp).ToList();\n\n                    // Validate InResponseTo now, to be able to include generated claims in notification.\n                    ValidateInResponseTo(options, claimsIdentities);\n                }\n                catch (Exception ex)\n                {\n                    createClaimsException = ex;\n                    throw;\n                }\n            }\n\n            return claimsIdentities;\n        }\n\n        private IEnumerable<ClaimsIdentity> CreateClaims(IOptions options, IdentityProvider idp)\n        {\n            Validate(options, idp);\n\n            if (status != Saml2StatusCode.Success)\n            {\n                throw new UnsuccessfulSamlOperationException(\n                    \"The Saml2Response must have status success to extract claims.\",\n                    status, statusMessage, secondLevelStatus);\n            }\n\n\t\t\tTokenValidationParameters validationParameters = new TokenValidationParameters();\n\t\t\tvalidationParameters.AuthenticationType = \"Federation\";\n\t\t\tvalidationParameters.RequireSignedTokens = false;\n\t\t\tvalidationParameters.ValidateIssuer = false;\n            validationParameters.ValidAudience = options.SPOptions.EntityId.Id;\n            validationParameters.RequireAudience = false; // Audience restriction optional in SAML2 spec.\n            validationParameters.TokenReplayCache = options.SPOptions.TokenReplayCache;\n            validationParameters.ValidateTokenReplay = true;\n\n            options.Notifications.Unsafe.TokenValidationParametersCreated(validationParameters, idp, XmlElement);\n\n\t\t\tvar handler = options.SPOptions.Saml2PSecurityTokenHandler;\n\n\t\t\tforeach (XmlElement assertionNode in GetAllAssertionElementNodes(options))\n            {\n                var principal = handler.ValidateToken(assertionNode.OuterXml, validationParameters, out SecurityToken baseToken);\n                var token = (Saml2SecurityToken)baseToken;\n                options.SPOptions.Logger.WriteVerbose(\"Extracted SAML assertion \" + token.Id);\n\n\t\t\t\tsessionNotOnOrAfter = DateTimeHelper.EarliestTime(sessionNotOnOrAfter,\n\t\t\t\t\ttoken.Assertion.Statements.OfType<Saml2AuthenticationStatement>()\n\t\t\t\t\t\t.SingleOrDefault()?.SessionNotOnOrAfter);\n\n\t\t\t\tforeach (var identity in principal.Identities)\n\t\t\t\t{\n\t\t\t\t\tyield return identity;\n\t\t\t\t}\n            }\n        }\n        \n        /// <summary>\n        /// RelayState attached to the message.\n        /// </summary>\n        public string RelayState { get; } = null;\n\n        private DateTime? sessionNotOnOrAfter;\n\n        /// <summary>\n        /// Session termination time for a session generated from this\n        /// response.\n        /// </summary>\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"GetClaims\")]\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"SessionNotOnOrAfter\")]\n        public DateTime? SessionNotOnOrAfter\n        {\n            get\n            {\n                if(claimsIdentities == null)\n                {\n                    // This is not a good design, but will have to do for now.\n                    // The entire Saml2Response class needs some refactoring\n                    // love - probably by extracting more stuff to the \n                    // Saml2PSecurityTokenHandler.\n                    throw new InvalidOperationException(\"Accessing SessionNotOnOrAfter requires GetClaims to have been called first.\");\n                }\n                return sessionNotOnOrAfter;\n            }\n        }\n\n    }\n}\n", "using FluentAssertions;\nusing Sustainsys.Saml2.Configuration;\nusing Sustainsys.Saml2.Metadata;\nusing Sustainsys.Saml2.Tokens;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Microsoft.IdentityModel.Tokens.Saml2;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Security.Cryptography.Xml;\nusing System.Xml;\nusing System.IO;\nusing Sustainsys.Saml2.Saml2P;\nusing System.Reflection;\nusing Sustainsys.Saml2.Exceptions;\nusing Sustainsys.Saml2.TestHelpers;\n\nusing SecurityTokenInvalidAudienceException = Microsoft.IdentityModel.Tokens.SecurityTokenInvalidAudienceException;\nusing SecurityTokenExpiredException = Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException;\nusing SecurityTokenReplayDetectedException = Microsoft.IdentityModel.Tokens.SecurityTokenReplayDetectedException;\nusing EncryptingCredentials = Microsoft.IdentityModel.Tokens.EncryptingCredentials;\nusing SecurityAlgorithms = Microsoft.IdentityModel.Tokens.SecurityAlgorithms;\nusing SigningCredentials = Microsoft.IdentityModel.Tokens.SigningCredentials;\nusing X509SecurityKey = Microsoft.IdentityModel.Tokens.X509SecurityKey;\nusing System.Collections.Generic;\nusing Microsoft.IdentityModel.Logging;\n\nnamespace Sustainsys.Saml2.Tests.Saml2P\n{\n    [TestClass]\n    public class Saml2ResponseTests\n    {\n        [TestMethod]\n        public void Saml2Response_Read_BasicParams()\n        {\n            string responseText =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"\n            InResponseTo = \"\"InResponseToId\"\"\n            Destination=\"\"http://destination.example.com\"\">\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                    <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            var expected = new\n            {\n                Id = new Saml2Id(MethodBase.GetCurrentMethod().Name),\n                IssueInstant = new DateTime(2013, 01, 01, 0, 0, 0, DateTimeKind.Utc),\n                Status = Saml2StatusCode.Requester,\n                StatusMessage = \"Unable to encrypt assertion\",\n                Issuer = new EntityId(null),\n                DestinationUrl = new Uri(\"http://destination.example.com\"),\n                MessageName = \"SAMLResponse\",\n                InResponseTo = new Saml2Id(\"InResponseToId\"),\n                RequestState = (StoredRequestState)null,\n                SecondLevelStatus = (string)null,\n                RelayState = (string)null,\n                ExpectedInResponseTo = new Saml2Id(\"InResponseToId\")\n            };\n\n\t\t\tvar response = Saml2Response.Read(responseText, expected.InResponseTo);\n\t\t\texpected.Should().BeEquivalentTo(\n\t\t\t\tresponse, opt => opt\n                    .Excluding(s => s.XmlElement)\n                    .Excluding(s => s.SigningCertificate)\n                    .Excluding(s => s.SigningAlgorithm)\n                    .Excluding(s => s.SessionNotOnOrAfter));\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnNonXml()\n        {\n            Action a = () => Saml2Response.Read(\"not xml\");\n\n            a.Should().Throw<XmlException>();\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsWrongRootNodeName()\n        {\n            Action a = () => Saml2Response.Read(\"<saml2p:NotResponse xmlns:saml2p=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" />\");\n\n            a.Should().Throw<XmlException>()\n                .WithMessage(\"Expected a SAML2 assertion document\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsWrongRootNamespace()\n        {\n            Action a = () => Saml2Response.Read(\"<saml2p:Response xmlns:saml2p=\\\"something\\\" /> \");\n            a.Should().Throw<XmlException>()\n                .WithMessage(\"Expected a SAML2 assertion document\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnWrongVersion()\n        {\n            Action a = () => Saml2Response.Read(\"<saml2p:Response xmlns:saml2p=\\\"\"\n                + Saml2Namespaces.Saml2P + \"\\\" Version=\\\"wrong\\\" />\");\n\n            a.Should().Throw<XmlException>()\n                .WithMessage(\"Wrong or unsupported SAML2 version\");\n\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnMissingId()\n        {\n            string responseText = @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" Version=\"\"2.0\"\"\n                 IssueInstant=\"\"2013-01-01T00:00:00Z\"\" InResponseTo = \"\"InResponseToId\"\" Destination=\"\"http://destination.example.com\"\">\n                    <saml2p:Status>\n                        <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                        <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                    </saml2p:Status>\n                </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read( responseText );\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage( \"Attribute 'ID' (case-sensitive) was not found or its value is empty\" );\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnEmptyId()\n        {\n            string responseText = @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" Version=\"\"2.0\"\" ID=\"\" \"\"\n                 IssueInstant=\"\"2013-01-01T00:00:00Z\"\" Destination=\"\"http://destination.example.com\"\">\n                    <saml2p:Status>\n                        <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                        <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                    </saml2p:Status>\n                </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read( responseText );\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage( \"Attribute 'ID' (case-sensitive) was not found or its value is empty\" );\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnMissingIssueInstant()\n        {\n            string responseText = @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" Version=\"\"2.0\"\" ID=\"\"_abc123\"\"\n                 Destination=\"\"http://destination.example.com\"\">\n                    <saml2p:Status>\n                        <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                        <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                    </saml2p:Status>\n                </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read( responseText );\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage( \"Attribute 'IssueInstant' (case-sensitive) was not found or its value is empty\" );\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnMissingStatus()\n        {\n            string responseText = @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" Version=\"\"2.0\"\" ID=\"\"_abc123\"\"\n                 IssueInstant=\"\"2013-01-01T00:00:00Z\"\" Destination=\"\"http://destination.example.com\"\">\n                    <Flatus>\n                        <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                        <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                    </Flatus>\n                </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read( responseText );\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage( \"Element 'Status' (case-sensitive, namespace 'urn:oasis:names:tc:SAML:2.0:protocol') was not found\" );\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnMissingStatusCode()\n        {\n            string responseText = @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n                <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" Version=\"\"2.0\"\" ID=\"\"_abc123\"\"\n                 IssueInstant=\"\"2013-01-01T00:00:00Z\"\" Destination=\"\"http://destination.example.com\"\">\n                    <saml2p:Status>\n                        <saml2p:StatusMessage>Unable to encrypt assertion</saml2p:StatusMessage>\n                    </saml2p:Status>\n                </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read( responseText );\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage( \"Element 'StatusCode' (case-sensitive, namespace 'urn:oasis:names:tc:SAML:2.0:protocol') was not found\" );\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_ThrowsOnMalformedDestination()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            Destination = \"\"not_a_uri\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n            <saml2:Issuer>\n                https://some.issuer.example.com\n            </saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read(response);\n\n            a.Should().Throw<BadFormatSamlResponseException>()\n                .WithMessage(\"Destination value was not a valid Uri\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_Issuer()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n            <saml2:Issuer>\n                https://some.issuer.example.com\n            </saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            Saml2Response.Read(response).Issuer.Id.Should().Be(\"https://some.issuer.example.com\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowOnMissingSignatureInResponseAndAnyAssertion()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            Action a = () => Saml2Response.Read(response).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"The SAML Response is not signed and contains unsigned Assertions. Response cannot be trusted.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        /// This is a specific test for the vulnerabilities found by Duo in February 2018\n        /// https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage_CommentInNameId()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>Some<!--Comment-->User</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\t\t\tvar claims = Saml2Response.Read(signedResponse).GetClaims(StubFactory.CreateOptions());\n\t\t\tclaims.Single().FindFirst(\n\t\t\t\t\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\")\n\t\t\t\t.Value.Should().Be(\"SomeUser\");\n        }\n\n        /// This is a specific test for the vulnerabilities found by Duo in February 2018\n        /// https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage_CommentInAttributeValue()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AttributeStatement>\n                        <saml2:Attribute Name=\"\"CommentTest\"\">\n                            <saml2:AttributeValue>Some<!--Comment-->Value</saml2:AttributeValue>\n                        </saml2:Attribute>\n                    </saml2:AttributeStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var claims = Saml2Response.Read(signedResponse).GetClaims(StubFactory.CreateOptions());\n\n            claims.Single().FindFirst(\"CommentTest\").Value.Should().Be(\"SomeValue\");\n        }\n\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessageSecondaryKey()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://twokeys.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://twokeys.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var options = StubFactory.CreateOptions();\n\n            var idp = new IdentityProvider(\n                new EntityId(\"https://twokeys.example.com\"), options.SPOptions)\n            {\n                AllowUnsolicitedAuthnResponse = true\n            };\n\n            idp.SigningKeys.AddConfiguredKey(SignedXmlHelper.TestKey2);\n            idp.SigningKeys.AddConfiguredKey(SignedXmlHelper.TestKey);\n\n            options.IdentityProviders.Add(idp);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(options);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage_WithAuthnStatementGeneratesLogoutNameIdentifierAllNameIdProperties()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID\n                            NameQualifier=\"\"NameQualifier\"\"\n                            SPNameQualifier=\"\"SPNameQualifier\"\"\n                            Format=\"\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\"\n                            SPProvidedID=\"\"SPProvidedID\"\"\n                            >someone@example.com</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                            <saml2:AuthnContextDeclRef>http://custom/password/form/consumer</saml2:AuthnContextDeclRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var result = Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            var logoutInfoClaim = result.Single().Claims.SingleOrDefault(c => c.Type == Saml2ClaimTypes.LogoutNameIdentifier);\n            logoutInfoClaim.Should().NotBeNull(\"the LogoutInfo claim should be generated\");\n            logoutInfoClaim.Value.Should().Be(\"NameQualifier,SPNameQualifier,urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress,SPProvidedID,someone@example.com\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage_WithAuthnStatementGeneratesLogoutInfo()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeOne</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                            <saml2:AuthnContextDeclRef>http://custom/password/form/consumer</saml2:AuthnContextDeclRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var result = Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            var logoutInfoClaim = result.Single().Claims.SingleOrDefault(c => c.Type == Saml2ClaimTypes.LogoutNameIdentifier);\n            logoutInfoClaim.Should().NotBeNull(\"the Logout name identifier claim should be generated\");\n            logoutInfoClaim.Value.Should().Be(\",,,,SomeOne\");\n\n            var sessionIdClaim = result.Single().Claims.SingleOrDefault(c => c.Type == Saml2ClaimTypes.SessionIndex);\n            sessionIdClaim.Should().NotBeNull(\"the Session ID claim should be generated\");\n            sessionIdClaim.Value.Should().Be(\"17\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedResponseMessage_WithAuthnContextGeneratesClaims()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeOne</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:somespecialvalue</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var result = Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            var authMethodClaim = result.Single().Claims.SingleOrDefault(c => c.Type == ClaimTypes.AuthenticationMethod);\n            authMethodClaim.Should().NotBeNull(\"the authentication method claim should be generated\");\n            authMethodClaim.Value.Should().Be(\"urn:somespecialvalue\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_BadAuthnContext_IgnoredWhenConfigured()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>AuthenticatedSomeone</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>badvalue</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.Compatibility.IgnoreAuthenticationContextInResponse = true;\n            var result = Saml2Response.Read(signedResponse).GetClaims(options);\n\n            var authMethodClaim = result.Single().Claims.SingleOrDefault(c => c.Type == ClaimTypes.AuthenticationMethod);\n            authMethodClaim.Should().BeNull(\"the authentication method claim should not be generated\");\n\n            var nameidClaim = result.Single().Claims.SingleOrDefault(c => c.Type == ClaimTypes.NameIdentifier);\n            nameidClaim.Should().NotBeNull(\"the subject nameid claim should be generated\");\n            nameidClaim.Value.Should().Be(\"AuthenticatedSomeone\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_HandlerWithNullOptions_AuthnContextGeneratesClaims()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeOne</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:somespecialvalue</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var options = Options.FromConfiguration;\n            options.SPOptions.Saml2PSecurityTokenHandler = new Saml2PSecurityTokenHandler();\n            var result = Saml2Response.Read(signedResponse).GetClaims(options);\n\n            var authMethodClaim = result.Single().Claims.SingleOrDefault(c => c.Type == ClaimTypes.AuthenticationMethod);\n            authMethodClaim.Should().NotBeNull(\"the authentication method claim should be generated\");\n            authMethodClaim.Value.Should().Be(\"urn:somespecialvalue\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_SessionIndexButNoNameId()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"2013-09-25T00:00:00Z\"\" SessionIndex=\"\"17\"\" >\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                            <saml2:AuthnContextDeclRef>http://custom/password/form/consumer</saml2:AuthnContextDeclRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var result = Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            result.First().FindFirst(ClaimTypes.NameIdentifier).Should().BeNull();\n\n            var sessionIdClaim = result.Single().Claims.SingleOrDefault(c => c.Type == Saml2ClaimTypes.SessionIndex);\n            sessionIdClaim.Should().NotBeNull(\"the Session ID claim should be generated\");\n            sessionIdClaim.Value.Should().Be(\"17\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedSingleAssertionInResponseMessage()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n\n            var signedAssertion = SignedXmlHelper.SignXml(assertion);\n            var signedResponse = string.Format(response, signedAssertion);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedSingleAssertion_WithKeyInfo_InResponseMessage()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion = SignedXmlHelper.SignXml(assertion, true, false);\n            var signedResponse = string.Format(response, signedAssertion);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedMultipleAssertionInResponseMessage()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n                {1}\n            </saml2p:Response>\";\n\n            var assertion1 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var assertion2 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser2</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion1 = SignedXmlHelper.SignXml(assertion1);\n            var signedAssertion2 = SignedXmlHelper.SignXml(assertion2);\n            var signedResponse = string.Format(response, signedAssertion1, signedAssertion2);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectSignedMultipleAssertion_WithKeyInfo_InResponseMessage()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n                {1}\n            </saml2p:Response>\";\n\n            var assertion1 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var assertion2 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser2</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion1 = SignedXmlHelper.SignXml(assertion1, true, false);\n            var signedAssertion2 = SignedXmlHelper.SignXml(assertion2, true, false);\n            var signedResponse = string.Format(response, signedAssertion1, signedAssertion2);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnMultipleAssertionInUnsignedResponseMessageButNotAllSigned()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n                {1}\n            </saml2p:Response>\";\n\n            var assertion1 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var assertion2 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser2</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n\n            var signedAssertion1 = SignedXmlHelper.SignXml(assertion1);\n            var signedResponse = string.Format(response, signedAssertion1, assertion2);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"The SAML Response is not signed and contains unsigned Assertions. Response cannot be trusted.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnTamperedAssertionWithAssertionSignature()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n                {1}\n            </saml2p:Response>\";\n\n            var assertion1 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var assertion2 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser2</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion1 = SignedXmlHelper.SignXml(assertion1);\n            var signedAssertion2 = SignedXmlHelper.SignXml(assertion2).Replace(\"SomeUser2\", \"SomeOtherUser\");\n            var signedResponse = string.Format(response, signedAssertion1, signedAssertion2);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"Signature didn't verify. Have the contents been tampered with?\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnAssertionInjectionWithAssertionSignature()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n                {1}\n            </saml2p:Response>\";\n\n            var assertion1 = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var assertionToInject = @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser2</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion1 = SignedXmlHelper.SignXml(assertion1);\n\n            var signedAssertion1Doc = XmlHelpers.XmlDocumentFromString(signedAssertion1);\n\n            var signatureToCopy = signedAssertion1Doc.DocumentElement[\"Signature\", SignedXml.XmlDsigNamespaceUrl];\n\n            var assertionToInjectDoc = XmlHelpers.XmlDocumentFromString(assertionToInject);\n\n            assertionToInjectDoc.DocumentElement.AppendChild(assertionToInjectDoc.ImportNode(signatureToCopy, true));\n\n            var signedAssertionToInject = assertionToInjectDoc.OuterXml;\n\n            var signedResponse = string.Format(response, signedAssertion1, signedAssertionToInject);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"Incorrect reference on Xml signature. The reference must be to the root element of the element containing the signature.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ReturnsExistingResultOnSecondGetClaimsCall()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            var signedResponse = SignedXmlHelper.SignXml(response);\n\n            var samlResponse = Saml2Response.Read(signedResponse);\n\n            Action a = () => samlResponse.GetClaims(Options.FromConfiguration);\n\n            a.Should().NotThrow();\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectEncryptedSingleAssertion_SignedResponse()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n                \n            var assertion =\n            @\"<saml2:Assertion Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\" xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>UserIDInsideEncryptedAssertion</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(assertion);\n            var signedResponse = SignedXmlHelper.SignXml(string.Format(response, encryptedAssertion));\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.ServiceCertificates.Add(new ServiceCertificate { Certificate = SignedXmlHelper.TestCert2 });\n\n            var claims = Saml2Response.Read(signedResponse).GetClaims(options);\n            claims.Count().Should().Be(1);\n            claims.First().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"UserIDInsideEncryptedAssertion\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectEncryptedSingleAssertion_SignedAssertion()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion = SignedXmlHelper.SignXml(assertion);\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(signedAssertion);\n            var responseWithAssertion = string.Format(response, encryptedAssertion);\n\n            var claims = Saml2Response.Read(responseWithAssertion).GetClaims(Options.FromConfiguration);\n            claims.Count().Should().Be(1);\n            claims.First().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"SomeUser\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectEncryptedSingleAssertion_AndMultipleCertsConfigured()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\" xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>UserIDInsideEncryptedAssertion</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(assertion);\n            var signedResponse = SignedXmlHelper.SignXml(string.Format(response, encryptedAssertion));\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.ServiceCertificates.Add(new ServiceCertificate { Certificate = SignedXmlHelper.TestCert });\n            options.SPOptions.ServiceCertificates.Add(new ServiceCertificate { Certificate = SignedXmlHelper.TestCert2 });\n\n            var claims = Saml2Response.Read(signedResponse).GetClaims(options);\n            claims.Count().Should().Be(1);\n            claims.First().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"UserIDInsideEncryptedAssertion\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsWhenEncryptedAssertion_WrongCertsConfigured()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\" xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>UserIDInsideEncryptedAssertion</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(assertion, false, SignedXmlHelper.TestCert2);\n            var signedResponse = SignedXmlHelper.SignXml(string.Format(response, encryptedAssertion));\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.ServiceCertificates.Add(new ServiceCertificate { Certificate = SignedXmlHelper.TestCert });\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(options);\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"Encrypted Assertion(s) could not be decrypted using the configured Service Certificate(s).\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectEncryptedSingleAssertion_OAEP()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion = SignedXmlHelper.SignXml(assertion);\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(signedAssertion, useOaep: true);\n            var responseWithAssertion = string.Format(response, encryptedAssertion);\n\n            var claims = Saml2Response.Read(responseWithAssertion).GetClaims(Options.FromConfiguration);\n            claims.Count().Should().Be(1);\n            claims.First().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"SomeUser\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectEncryptedSingleAssertion_UsingMSIdentityModel()\n        {\n\t\t\tvar response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion = new Saml2EncryptedAssertion(new Saml2NameIdentifier(\"https://idp.example.com\"))\n            {\n                Subject = new Saml2Subject(new Saml2NameIdentifier(\"WIFUser\"))\n            };\n            assertion.Subject.SubjectConfirmations.Add(new Saml2SubjectConfirmation(new Uri(\"urn:oasis:names:tc:SAML:2.0:cm:bearer\")));\n            assertion.Conditions = new Saml2Conditions { NotOnOrAfter = new DateTime(2100, 1, 1) };\n\n            var token = new Saml2SecurityToken(assertion);\n            var handler = new Saml2SecurityTokenHandler();\n\n\t\t\tvar signingKey = new X509SecurityKey(SignedXmlHelper.TestCert);\n\t\t\tvar signingCreds = new SigningCredentials(signingKey,\n\t\t\t\tSecurityAlgorithms.RsaSha256Signature, SecurityAlgorithms.Sha256Digest);\n\t\t\tassertion.SigningCredentials = signingCreds;\n\n\t\t\tvar encryptionKey = new X509SecurityKey(SignedXmlHelper.TestCert2);\n\t\t\tvar encryptionCreds = new EncryptingCredentials(encryptionKey,\n\t\t\t\tSecurityAlgorithms.RsaOAEP, SecurityAlgorithms.Aes192CbcHmacSha384);\n\t\t\tassertion.EncryptingCredentials = encryptionCreds;\n\n\t\t\tstring assertionXml = String.Empty;\n            using (var sw = new StringWriter())\n            {\n                using (var xw = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = true }))\n                {\n                    handler.WriteToken(xw, token);\n                }\n                assertionXml = sw.ToString();\n            }\n            var responseWithAssertion = string.Format(response, assertionXml);\n\n\t\t\tvar claims = Saml2Response.Read(responseWithAssertion).GetClaims(Options.FromConfiguration);\n            claims.Count().Should().Be(1);\n            claims.First().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"WIFUser\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnEncryptedAssertionWithoutSignature()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(assertion);\n            var responseWithAssertion = string.Format(response, encryptedAssertion);\n\n            Action a = () => Saml2Response.Read(responseWithAssertion).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"The SAML Response is not signed and contains unsigned Assertions. Response cannot be trusted.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnTamperedSignatureInEncryptedAssertion()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var signedAssertion = SignedXmlHelper.SignXml(assertion);\n            var tamperedAssertion = signedAssertion.Replace(\"SomeUser\", \"AnotherUser\");\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(tamperedAssertion);\n            var responseWithAssertion = string.Format(response, encryptedAssertion);\n\n            Action a = () => Saml2Response.Read(responseWithAssertion).GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"Signature didn't verify. Have the contents been tampered with?\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnEncryptedAssertionAndNoServiceCert()\n        {\n            var response =\n            @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                {0}\n            </saml2p:Response>\";\n\n            var assertion =\n            @\"<saml2:Assertion Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\" xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>UserIDInsideEncryptedAssertion</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\";\n\n            var encryptedAssertion = SignedXmlHelper.EncryptAssertion(assertion);\n            var signedResponse = SignedXmlHelper.SignXml(string.Format(response, encryptedAssertion));\n\n            var options = StubFactory.CreateOptions();\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(options);\n            a.Should().Throw<Saml2ResponseFailedValidationException>();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CreateIdentities()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeOtherUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var c1 = new ClaimsIdentity(\"Federation\");\n            c1.AddClaim(new Claim(ClaimTypes.NameIdentifier, \"SomeUser\", null, \"https://idp.example.com\"));\n            var c2 = new ClaimsIdentity(\"Federation\");\n            c2.AddClaim(new Claim(ClaimTypes.NameIdentifier, \"SomeOtherUser\", null, \"https://idp.example.com\"));\n\n            var expected = new ClaimsIdentity[] { c1, c2 };\n\n            var r = Saml2Response.Read(SignedXmlHelper.SignXml(response));\n\n            r.GetClaims(StubFactory.CreateOptions())\n                .Should().BeEquivalentTo(expected, opt => opt.IgnoringCyclicReferences());\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_SavesBootstrapContext()\n        {\n            Assert.Inconclusive(\"Deliberately ignored test for now\");\n            \n            var assertion =\n            @\"<saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2:Subject>\n                    <saml2:NameID>SomeUser</saml2:NameID>\n                    <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                </saml2:Subject>\n                <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n            </saml2:Assertion>\";\n\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\"\n            + assertion +\n            \"</saml2p:Response>\";\n\n            var options = StubFactory.CreateOptions();\n\n            //options.SPOptions.Saml2PSecurityTokenHandler.Configuration.SaveBootstrapContext = true;\n\n            var expected = options.SPOptions.Saml2PSecurityTokenHandler.ReadToken(assertion);\n\n            var r = Saml2Response.Read(SignedXmlHelper.SignXml(response));\n\n            var subject = r.GetClaims(options).Single().BootstrapContext;\n\n            subject.As<BootstrapContext>().SecurityToken.Should().BeEquivalentTo(expected);\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnWrongAudience()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" >\n                        <saml2:AudienceRestriction>\n                            <saml2:Audience>https://example.com/wrong/audience</saml2:Audience>\n                        </saml2:AudienceRestriction>\n                    </saml2:Conditions>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n\n            var subject = Saml2Response.Read(response);\n\n            var options = StubFactory.CreateOptions();\n\n            subject.Invoking(s => s.GetClaims(options))\n                .Should().Throw<SecurityTokenInvalidAudienceException>();\n\t\t}\n\n\t\t[TestMethod]\n        public void Saml2Response_GetClaims_IgnoresAudienceUsingTVPNotificationFlag()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" >\n                        <saml2:AudienceRestriction>\n                            <saml2:Audience>https://example.com/wrong/audience</saml2:Audience>\n                        </saml2:AudienceRestriction>\n                    </saml2:Conditions>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n\n            var subject = Saml2Response.Read(response);\n\n            var options = StubFactory.CreateOptions();\n            options.Notifications.Unsafe.TokenValidationParametersCreated = (tvp, idp, xml) =>\n            {\n                tvp.ValidateAudience = false;\n\n                idp.EntityId.Id.Should().Be(\"https://idp.example.com\");\n                xml.OuterXml.Should().Contain(\"https://example.com/wrong/audience\");\n            };\n\n            subject.Invoking(s => s.GetClaims(options)).Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnExpired()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2013-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n            var r = Saml2Response.Read(response);\n\n            Action a = () => r.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<SecurityTokenExpiredException>();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_CorrectInResponseTo()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"\n            InResponseTo = \"\"abc123\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var response = Saml2Response.Read(responseXML, new Saml2Id(\"abc123\"));\n\n            Action a = () => response.GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_FalseOnMissingInResponseTo_IfDisallowed()\n        {\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp2.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var response = Saml2Response.Read(responseXML);\n\n            Action a = () => response.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"Unsolicited responses are not allowed for idp \\\"https://idp2.example.com\\\".\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_MissingInResponseTo_IfAllowed()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var request = idp.CreateAuthenticateRequest(StubFactory.CreateSaml2Urls());\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var response = Saml2Response.Read(responseXML);\n\n            Action a = () => response.GetClaims(Options.FromConfiguration);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnIncorrectInResponseTo()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"\n            InResponseTo = \"\"anothervalue\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var subject = Saml2Response.Read(responseXML, new Saml2Id(\"somevalue\"));\n\n            Action a = () => subject.GetClaims(StubFactory.CreateOptions());\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"InResponseTo Id \\\"anothervalue\\\" in received response does not match Id \\\"somevalue\\\" of the sent request.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnInResponseTo_When_NoneExpected()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"\n            InResponseTo = \"\"InResponseTo\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var subject = Saml2Response.Read(responseXML, null);\n\n            Action a = () => subject.GetClaims(StubFactory.CreateOptions());\n\n            a.Should().Throw<UnexpectedInResponseToException>()\n                .WithMessage(\"*unexpected InResponseTo \\\"InResponseTo\\\"*\");\n\n            // Should throw even on a second call (catches bug where incorrect placement of the\n            // check caused second call to succeed. That's bad.\n            a.Should().Throw<UnexpectedInResponseToException>()\n                .WithMessage(\"*unexpected InResponseTo \\\"InResponseTo\\\"*\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_UsesNotificationByPassOnInResponseTo_When_NoneExpected()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"\n            InResponseTo = \"\"InResponseTo\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var subject = Saml2Response.Read(responseXML, null);\n\n            var options = StubFactory.CreateOptions();\n\n            Saml2Response capturedResponse = null;\n            IEnumerable<ClaimsIdentity> claimsIdentities = null;\n\n            options.Notifications.Unsafe.IgnoreUnexpectedInResponseTo = (r, c) =>\n            {\n                capturedResponse = r;\n                claimsIdentities = c;\n\n                return true;\n            };\n\n            // Should not throw\n            subject.GetClaims(options);\n\n            capturedResponse.Should().BeSameAs(subject);\n            claimsIdentities.Single().FindFirst(ClaimTypes.NameIdentifier).Value.Should().Be(\"SomeUser\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnNoInResponseTo_When_OneWasExpected()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                    Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                    IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var subject = Saml2Response.Read(responseXML, new Saml2Id(\"ExpectedId\"));\n\n            Action a = () => subject.GetClaims(StubFactory.CreateOptions());\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n\t\t\t\t.WithMessage(\n\t\t\t\t\t\"Expected message to contain InResponseTo \\\"ExpectedId\\\", but found none. If this error occurs \" +\n\t\t\t\t\t\"due to the Idp not setting InResponseTo according to the SAML2 specification, this check \" +\n\t\t\t\t\t\"can be disabled by setting the IgnoreMissingInResponseTo compatibility flag to true.\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Read_CorrectResponse_When_MissingInResponseTo_And_IgnoreMissingEnabled()\n        {\n            var options = Options.FromConfiguration;\n            options.SPOptions.Compatibility.IgnoreMissingInResponseTo = true;\n\n            var responseXML =\n                @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            Action a = () => Saml2Response.Read(responseXML, new Saml2Id(\"ExpectedId\"), options);\n\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnNoInResponseTo_When_MissingInResponseTo_AndIgnoreMissingDisabled()\n        {\n            var options = Options.FromConfiguration;\n            options.SPOptions.Compatibility.IgnoreMissingInResponseTo = false;\n\n            var responseXML =\n                @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                    Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                    IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-06-30T08:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var subject = Saml2Response.Read(responseXML, new Saml2Id(\"ExpectedId\"), options);\n\n            Action a = () => subject.GetClaims(StubFactory.CreateOptions());\n\n            a.Should().Throw<Saml2ResponseFailedValidationException>()\n                .WithMessage(\"Expected message to contain InResponseTo \\\"ExpectedId\\\", but found none*\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnTamperedMessage()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n            responseXML = responseXML.Replace(\"2013-01-01\", \"2015-01-01\"); // Break signature.\n\n            var response = Saml2Response.Read(responseXML, null);\n\n            Action a = () =>\n            {\n                response.GetClaims(Options.FromConfiguration);\n            };\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"Signature didn't verify. Have the contents been tampered with?\");\n\n            // With an incorrect signature, a signature validation should be\n            // thrown - even if we response is validate twice. In case\n            // GetClaims/Validate doesn't cache the result it will instead\n            // report a replay exception the second time because the replay\n            // detection is done before the signature validation.\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"Signature didn't verify. Have the contents been tampered with?\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnWeakSigningAlgoritm()\n        {\n            var idp = Options.FromConfiguration.IdentityProviders.Default;\n\n            var responseXML =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n            </saml2p:Response>\";\n\n            responseXML = SignedXmlHelper.SignXml(responseXML);\n\n            var response = Saml2Response.Read(responseXML, null);\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.MinIncomingSigningAlgorithm = SecurityAlgorithms.RsaSha512Signature;\n\n            Action a = () =>\n            {\n                response.GetClaims(options);\n            };\n\n            a.Should().Throw<InvalidSignatureException>()\n                .WithMessage(\"*rsa-sha256*weak*rsa-sha512*\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnReplayAssertionId()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n            var r1 = Saml2Response.Read(response);\n            r1.GetClaims(Options.FromConfiguration);\n\n            var r2 = Saml2Response.Read(response);\n\n            Action a = () => r2.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<SecurityTokenReplayDetectedException>();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnReplayAssertionIdSameConfig()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n            var r1 = Saml2Response.Read(response);\n            var options = StubFactory.CreateOptions();\n            r1.GetClaims(options);\n\n            var r2 = Saml2Response.Read(response);\n\n            Action a = () => r2.GetClaims(options);\n\n            a.Should().Throw<SecurityTokenReplayDetectedException>();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_NotThrowsOnReplayAssertionIdDifferentConfig()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            response = SignedXmlHelper.SignXml(response);\n            var r1 = Saml2Response.Read(response);\n            var options1 = StubFactory.CreateOptions();\n            r1.GetClaims(options1);\n\n            var r2 = Saml2Response.Read(response);\n\n            var options2 = StubFactory.CreateOptions();\n            Action a = () => r2.GetClaims(options2);\n\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnStatusFailure()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var xml = SignedXmlHelper.SignXml(response);\n\n            var subject = Saml2Response.Read(xml);\n\n            Action a = () => subject.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<UnsuccessfulSamlOperationException>()\n                .WithMessage(\"The Saml2Response must have status success to extract claims.\\n*Status Code: Requester*\")\n                .Where(x => x.Status == Saml2StatusCode.Requester);\n\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ThrowsOnStatusFailure_IncludingSecondLevelMessage()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusMessage>A status message</saml2p:StatusMessage>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Responder\"\">\n                        <saml2p:StatusCode Value = \"\"urn:oasis:names:tc:SAML:2.0:status:RequestDenied\"\" />\n                    </saml2p:StatusCode >\n                </saml2p:Status >\n            </saml2p:Response>\";\n\n            var xml = SignedXmlHelper.SignXml(response);\n\n            var subject = Saml2Response.Read(xml);\n\n            Action a = () => subject.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<UnsuccessfulSamlOperationException>()\n                .WithMessage(\"The Saml2Response must have status success to extract claims.*Status Code: Responder*Message: A status message*RequestDenied\")\n                .Where(x => x.Status == Saml2StatusCode.Responder && x.StatusMessage == \"A status message\" && x.SecondLevelStatus == \"urn:oasis:names:tc:SAML:2.0:status:RequestDenied\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_DisplayStatusMessageInExceptionText()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" />\n                    <saml2p:StatusMessage>A status message</saml2p:StatusMessage>\n                </saml2p:Status>\n                <saml2:Assertion\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var xml = SignedXmlHelper.SignXml(response);\n\n            var subject = Saml2Response.Read(xml);\n\n            Action a = () => subject.GetClaims(Options.FromConfiguration);\n\n            a.Should().Throw<UnsuccessfulSamlOperationException>()\n                .WithMessage(\"The Saml2Response must have status success to extract claims.*Status Code: Requester*Message: A status message*\")\n                .Where(x => x.Status == Saml2StatusCode.Requester);\n\n        }\n\n        [TestMethod]\n        public void Saml2Response_Ctor_FromData()\n        {\n            var issuer = new EntityId(\"http://idp.example.com\");\n            var identity = new ClaimsIdentity(new Claim[] \n            {\n                new Claim(ClaimTypes.NameIdentifier, \"JohnDoe\") \n            });\n            var response = new Saml2Response(issuer, null, null, null, identity);\n\n            response.Issuer.Should().Be(issuer);\n            response.GetClaims(Options.FromConfiguration)\n                .Single()\n                .Should().BeEquivalentTo(identity);\n        }\n\n        [TestMethod]\n        public void Saml2Response_Ctor_Nullcheck()\n        {\n            Action a = () => new Saml2Response(null, new Saml2Id(\"foo\"));\n\n            a.Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"xml\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Ctor_Options_Nullcheck()\n        {\n            Action a = () => new Saml2Response(null, new Saml2Id(\"foo\"), null);\n\n            a.Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"xml\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Xml_FromData_ContainsBasicData()\n        {\n            var issuer = new EntityId(\"http://idp.example.com\");\n            var nameId = \"JohnDoe\";\n            var destination = \"http://destination.example.com/\";\n\n            var identity = new ClaimsIdentity(new Claim[] \n            {\n                new Claim(ClaimTypes.NameIdentifier, nameId) \n            });\n\n            // Grab current time both before and after generating the response\n            // to avoid heisenbugs if the second counter is updated while creating\n            // the response.\n            string before = DateTime.UtcNow.ToSaml2DateTimeString();\n            var response = new Saml2Response(issuer, null,\n                new Uri(destination), null, identity);\n            string after = DateTime.UtcNow.ToSaml2DateTimeString();\n\n            var xml = response.XmlElement;\n\n            xml.LocalName.Should().Be(\"Response\");\n            xml.NamespaceURI.Should().Be(Saml2Namespaces.Saml2PName);\n            xml.Prefix.Should().Be(\"saml2p\");\n            xml[\"Issuer\", Saml2Namespaces.Saml2Name].InnerText.Should().Be(issuer.Id);\n            xml[\"Assertion\", Saml2Namespaces.Saml2Name]\n                [\"Subject\", Saml2Namespaces.Saml2Name][\"NameID\", Saml2Namespaces.Saml2Name]\n                .InnerText.Should().Be(nameId);\n            xml.GetAttribute(\"Destination\").Should().Be(destination);\n            xml.GetAttribute(\"ID\").Should().NotBeNullOrWhiteSpace();\n            xml.GetAttribute(\"Version\").Should().Be(\"2.0\");\n            xml.GetAttribute(\"IssueInstant\").Should().Match(\n                i => i == before || i == after);\n        }\n\n        [TestMethod]\n        public void Saml2Response_Xml_FromData_ContainsStatus_Success()\n        {\n            var identity = new ClaimsIdentity(new Claim[] \n            {\n                new Claim(ClaimTypes.NameIdentifier, \"JohnDoe\") \n            });\n\n            var response = new Saml2Response(new EntityId(\"issuer\"), null,\n                new Uri(\"http://destination.example.com\"), null, identity);\n\n            var xml = response.XmlElement;\n\n            var subject = xml[\"Status\", Saml2Namespaces.Saml2PName];\n\n            subject[\"StatusCode\", Saml2Namespaces.Saml2PName].GetAttribute(\"Value\")\n                .Should().Be(\"urn:oasis:names:tc:SAML:2.0:status:Success\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Xml_FromData_ContainsInResponseTo()\n        {\n            var identity = new ClaimsIdentity(new Claim[] \n            {\n                new Claim(ClaimTypes.NameIdentifier, \"JohnDoe\") \n            });\n\n            var response = new Saml2Response(new EntityId(\"issuer\"), null,\n                new Uri(\"http://destination.example.com\"), new Saml2Id(\"InResponseToID\"), identity);\n\n            var xml = response.XmlElement;\n\n            xml.GetAttribute(\"InResponseTo\").Should().Be(\"InResponseToID\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_Xml_FromData_ContainsAudienceRestriction()\n        {\n            var identity = new ClaimsIdentity(new Claim[]\n            {\n                new Claim(ClaimTypes.NameIdentifier, \"JohnDoe\")\n            });\n\n            var audience = \"http://sp.example.com/\";\n\n            var subject = new Saml2Response(\n                new EntityId(\"issuer\"),\n                null,\n                new Uri(\"http://destination.example.com\"),\n                new Saml2Id(\"InResponseToID\"),\n                null,\n                new Uri(audience),\n                identity);\n\n            var actual = subject.XmlElement;\n\n            actual[\"Assertion\", Saml2Namespaces.Saml2Name].Should().NotBeNull(\"Assertion element should be present\")\n                .And.Subject[\"Conditions\", Saml2Namespaces.Saml2Name].Should().NotBeNull(\"Conditions element should be present\")\n                .And.Subject[\"AudienceRestriction\", Saml2Namespaces.Saml2Name].Should().NotBeNull(\"AudienceRestriction element should be present\")\n                .And.Subject[\"Audience\", Saml2Namespaces.Saml2Name].Should().NotBeNull(\"Audience element should be present\")\n                .And.Subject.InnerText.Should().Be(audience);\n        }\n\n        [TestMethod]\n        public void Saml2Response_FromData_RelayState()\n        {\n            var subject = new Saml2Response(new EntityId(\"issuer\"), null, null, null, \"ABC123\");\n\n            subject.RelayState.Should().Be(\"ABC123\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_FromData_SigningDetails()\n        {\n            var subject = new Saml2Response(new EntityId(\"issuer\"), SignedXmlHelper.TestCert, null, null);\n\n            subject.SigningAlgorithm.Should().Be(SecurityAlgorithms.RsaSha256Signature);\n        }\n\n        [TestMethod]\n        public void Saml2Response_ToXml()\n        {\n            string response = @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\" ID=\"\"Saml2Response_ToXml\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\"><saml2p:Status><saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Requester\"\" /></saml2p:Status></saml2p:Response>\";\n\n            var subject = Saml2Response.Read(response).ToXml();\n\n            subject.Should().Be(response);\n        }\n\n        [TestMethod]\n        public void Saml2Response_MessageName()\n        {\n            var subject = new Saml2Response(new EntityId(\"issuer\"), null, null, null);\n\n            subject.MessageName.Should().Be(\"SAMLResponse\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ChecksSha256WhenEnabled()\n        {\n            var signedResponse =\n                @\"<saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n                    xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                    ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Response\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                        <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                        <saml2p:Status>\n                            <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                        </saml2p:Status>\n                        <Assertion ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" IssueInstant=\"\"2015-03-13T20:43:33.466Z\"\" Version=\"\"2.0\"\" xmlns=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"><Issuer>https://idp.example.com</Issuer><Signature xmlns=\"\"http://www.w3.org/2000/09/xmldsig#\"\"><SignedInfo><CanonicalizationMethod Algorithm=\"\"http://www.w3.org/2001/10/xml-exc-c14n#\"\" /><SignatureMethod Algorithm=\"\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"\" /><Reference URI=\"\"#Saml2Response_GetClaims_ChecksSha256WhenEnabled\"\"><Transforms><Transform Algorithm=\"\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"\" /><Transform Algorithm=\"\"http://www.w3.org/2001/10/xml-exc-c14n#\"\" /></Transforms><DigestMethod Algorithm=\"\"http://www.w3.org/2001/04/xmlenc#sha256\"\" /><DigestValue>8s5HDYeicqbNwESGyrvYYXinJeJJgl4t6O27KGE0ejc=</DigestValue></Reference></SignedInfo><SignatureValue>mS2TFErenJHyvUbyIDUItOvH6AavUNGg5zL3hVueWDGjhaft2mlWSlQIFm9ajVQKrZq2Q/V4oZYGTQ8muTfrhdCL3fyu453nEWcNgQ+gm1H1e89N75XWonfL+UQDl73O95SX0dD4DjqQAC4MlSwMOkwOR7GakhjPbSzRct7lFbRx/3k+TUZNj9rfV4uzlf79ebkw9EaaSfu0tR6bAfGyrefFaNTZs2NeRICfD/GKn7HRo9zSdVPBHfEW2UUy0x/aWREG4GgUs7qObWL4uhDZ6oyy5FbsRcrUJMiXCFNXA8dr9EtZ2VafHz3d4kJFLiq63xjqpjGk/ng2gP+47F/9Rw==</SignatureValue><KeyInfo><X509Data><X509Certificate>MIIDIzCCAg+gAwIBAgIQg7mOjTf994NAVxZu4jqXpzAJBgUrDgMCHQUAMCQxIjAgBgNVBAMTGUtlbnRvci5BdXRoU2VydmljZXMuVGVzdHMwHhcNMTMwOTI1MTMzNTQ0WhcNMzkxMjMxMjM1OTU5WjAkMSIwIAYDVQQDExlLZW50b3IuQXV0aFNlcnZpY2VzLlRlc3RzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwVGpfvK9N//MnA5Jo1q2liyPR24406Dp25gv7LB3HK4DWgqsb7xXM6KIV/WVOyCV2g/O1ErBlB+HLhVZ4XUJvbqBbgAJqFO+TZwcCIe8u4nTEXeU660FdtkKClA17sbtMrAGdDfOPwVBHSuavdHeD7jHNI4RUDGKnEW13/0EvnHDilIetwODRxrX/+41R24sJThFbMczByS3OAL2dcIxoAynaGeM90gXsVYow1QhJUy21+cictikb7jW4mW6dvFCBrWIceom9J295DcQIHoxJy5NoZwMir/JV00qs1wDVoN20Ve1DC5ImwcG46XPF7efQ44yLh2j5Yexw+xloA81dwIDAQABo1kwVzBVBgNVHQEETjBMgBAWIahoZhXVUogbAqkS7zwfoSYwJDEiMCAGA1UEAxMZS2VudG9yLkF1dGhTZXJ2aWNlcy5UZXN0c4IQg7mOjTf994NAVxZu4jqXpzAJBgUrDgMCHQUAA4IBAQA2aGzmuKw4AYXWMhrGj5+i8vyAoifUn1QVOFsUukEA77CrqhqqaWFoeagfJp/45vlvrfrEwtF0QcWfmO9w1VvHwm7sk1G/cdYyJ71sU+llDsdPZm7LxQvWZYkK+xELcinQpSwt4ExavS+jLcHoOYHYwIZMBn3U8wZw7Kq29oGnoFQz7HLCEl/G9i3QRyvFITNlWTjoScaqMjHTzq6HCMaRsL09DLcY3KB+cedfpC0/MBlzaxZv0DctTulyaDfM9DCYOyokGN/rQ6qkAR0DDm8fVwknbJY7kURXNGoUetulTb5ow8BvD1gncOaYHSD0kbHZG+bLsUZDFatEr2KW8jbG</X509Certificate></X509Data></KeyInfo></Signature><Subject><NameID>SomeUser</NameID><SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" /></Subject><Conditions NotOnOrAfter=\"\"2100-01-01T05:00:00.000Z\"\" /></Assertion>\n                    </saml2p:Response>\";\n\n            var spOptions = StubFactory.CreateSPOptions();\n            var options = new Options(spOptions);\n            var idp = new IdentityProvider(new EntityId(\"https://idp.example.com\"), spOptions) { AllowUnsolicitedAuthnResponse = true };\n            idp.SigningKeys.AddConfiguredKey(SignedXmlHelper.TestKeySignOnly);\n            options.IdentityProviders.Add(idp);\n\n            Action a = () => Saml2Response.Read(signedResponse).GetClaims(options);\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2Response_GetClaims_ValidatesIdpCertificateIfConfigured()\n        {\n            var options = StubFactory.CreateOptions();\n\n            options.SPOptions.ValidateCertificates = true;\n\n            var responseXml = \n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + @\"_Assertion1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            responseXml = SignedXmlHelper.SignXml(responseXml);\n\n            Saml2Response.Read(responseXml).Invoking(\n                r => r.GetClaims(options))\n                .Should().Throw<InvalidSignatureException>()\n                .And.Message.Should().Be(\"The signature was valid, but the verification of the certificate failed. Is it expired or revoked? Are you sure you really want to enable ValidateCertificates (it's normally not needed)?\");\n        }\n\n        [TestMethod]\n        public void Saml2Response_SessionNotOnOrAfter_ExtractedFromMessage()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + $@\"1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"{DateTime.UtcNow.ToSaml2DateTimeString()}\"\" SessionNotOnOrAfter = \"\"2050-01-01T00:00:00Z\"\">\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + $@\"2\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeOtherUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"{DateTime.UtcNow.ToSaml2DateTimeString()}\"\" SessionNotOnOrAfter = \"\"2051-01-01T00:00:00Z\"\">\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var subject = Saml2Response.Read(SignedXmlHelper.SignXml(response));\n\n            subject.GetClaims(StubFactory.CreateOptions());\n\n            subject.SessionNotOnOrAfter.Should().Be(new DateTime(2050, 1, 1, 0, 0, 0, DateTimeKind.Utc));\n        }\n\n        [TestMethod]\n        public void Saml2Response_SessionNotOnOrAfter_ThrowsIfCalledBeforeGetClaims()\n        {\n            var response =\n            @\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n            <saml2p:Response xmlns:saml2p=\"\"urn:oasis:names:tc:SAML:2.0:protocol\"\"\n            xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n            ID = \"\"\" + MethodBase.GetCurrentMethod().Name + @\"\"\" Version=\"\"2.0\"\" IssueInstant=\"\"2013-01-01T00:00:00Z\"\">\n                <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                <saml2p:Status>\n                    <saml2p:StatusCode Value=\"\"urn:oasis:names:tc:SAML:2.0:status:Success\"\" />\n                </saml2p:Status>\n                <saml2:Assertion xmlns:saml2=\"\"urn:oasis:names:tc:SAML:2.0:assertion\"\"\n                Version=\"\"2.0\"\" ID=\"\"\" + MethodBase.GetCurrentMethod().Name + $@\"1\"\"\n                IssueInstant=\"\"2013-09-25T00:00:00Z\"\">\n                    <saml2:Issuer>https://idp.example.com</saml2:Issuer>\n                    <saml2:Subject>\n                        <saml2:NameID>SomeUser</saml2:NameID>\n                        <saml2:SubjectConfirmation Method=\"\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"\" />\n                    </saml2:Subject>\n                    <saml2:Conditions NotOnOrAfter=\"\"2100-01-01T00:00:00Z\"\" />\n                    <saml2:AuthnStatement AuthnInstant=\"\"{DateTime.UtcNow.ToSaml2DateTimeString()}\"\" SessionNotOnOrAfter = \"\"2200-01-01T00:00:00Z\"\">\n                        <saml2:AuthnContext>\n                            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n                        </saml2:AuthnContext>\n                    </saml2:AuthnStatement>\n                </saml2:Assertion>\n            </saml2p:Response>\";\n\n            var subject = Saml2Response.Read(SignedXmlHelper.SignXml(response));\n\n            subject.Invoking(s => { var value = s.SessionNotOnOrAfter; })\n                .Should().Throw<InvalidOperationException>()\n                .WithMessage(\"*GetClaims*\");\n        }\n    }\n}\n", "using Sustainsys.Saml2.WebSso;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing FluentAssertions;\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Web;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing Sustainsys.Saml2.Metadata;\nusing Sustainsys.Saml2.Saml2P;\nusing System.Reflection;\nusing Sustainsys.Saml2.Tests.Helpers;\nusing Sustainsys.Saml2.TestHelpers;\n\nnamespace Sustainsys.Saml2.Tests.WebSso\n{\n    [TestClass]\n    public class Saml2ArtifactBindingTests\n    {\n        [TestMethod]\n        public void Saml2ArtifactBinding_CanUnbind_Nullcheck()\n        {\n            Saml2Binding.Get(Saml2BindingType.Artifact)\n                .Invoking(b => b.CanUnbind(null))\n                .Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"request\");\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_Nullcheck_Request()\n        {\n            Saml2Binding.Get(Saml2BindingType.Artifact)\n                .Invoking(b => b.Unbind(null, null))\n                .Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"request\");\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_Nullcheck_Options()\n        {\n            Saml2Binding.Get(Saml2BindingType.Artifact)\n                .Invoking(b => b.Unbind(new HttpRequestData(\"GET\", new Uri(\"http://localhost\")), null))\n                .Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"options\");\n\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromGet()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Uri.EscapeDataString(\n                Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234)));\n\n            var relayState = \"relayState\";\n\n            var r = new HttpRequestData(\n                \"GET\",\n                new Uri($\"http://example.com/path/acs?SAMLart={artifact}&RelayState={relayState}\"),\n                null,\n                null,\n                new StoredRequestState(issuer, null, null, null));\n\n            StubServer.LastArtifactResolutionSoapActionHeader = null;\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, StubFactory.CreateOptions());\n\n            var xmlDocument = XmlHelpers.XmlDocumentFromString(\n                \"<message>   <child-node /> </message>\");\n\n            var expected = new UnbindResult(xmlDocument.DocumentElement, relayState, TrustLevel.None);\n\n            result.Should().BeEquivalentTo(expected);\n            StubServer.LastArtifactResolutionSoapActionHeader.Should().Be(\n                \"\\\"http://www.oasis-open.org/committees/security\\\"\");\n            StubServer.LastArtifactResolutionContentType.Should().Be(\"text/xml; charset=\\\"utf-8\\\"\");\n            StubServer.LastArtifactResolutionWasSigned.Should().BeFalse();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromGetUsesIdpFromNotification()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Uri.EscapeDataString(\n                Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234)));\n\n            var relayState = \"relayState\";\n\n            var relayData = new Dictionary<string, string>\n            {\n                { \"key\", \"value\" }\n            };\n\n            var r = new HttpRequestData(\n                \"GET\",\n                new Uri($\"http://example.com/path/acs?SAMLart={artifact}&RelayState={relayState}\"),\n                null,\n                null,\n                new StoredRequestState(issuer, null, null, relayData));\n\n            var options = StubFactory.CreateOptions();\n\n            var idp = options.IdentityProviders.Default;\n            options.IdentityProviders.Remove(idp.EntityId);\n\n            var getIdentityProviderCalled = false;\n            options.Notifications.GetIdentityProvider = (ei, rd, opt) =>\n            {\n                getIdentityProviderCalled = true;\n                rd[\"key\"].Should().Be(\"value\");\n                return idp;\n            };\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, options);\n\n            getIdentityProviderCalled.Should().BeTrue();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromGet_ArtifactIsntHashOfEntityId()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Uri.EscapeDataString(\n                Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(\n                        new EntityId(\"https://this.entityid.is.invalid\"),\n                        0x1234)));\n\n            var relayState = \"relayState\";\n\n            var r = new HttpRequestData(\n                \"GET\",\n                new Uri($\"http://example.com/path/acs?SAMLart={artifact}&RelayState={relayState}\"),\n                null,\n                null,\n                new StoredRequestState(issuer, null, null, null));\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, StubFactory.CreateOptions());\n\n            var xmlDocument = XmlHelpers.XmlDocumentFromString(\n                \"<message>   <child-node /> </message>\");\n\n            var expected = new UnbindResult(xmlDocument.DocumentElement, relayState, TrustLevel.None);\n\n            result.Should().BeEquivalentTo(expected);\n            StubServer.LastArtifactResolutionWasSigned.Should().BeFalse();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromGet_SignsArtifactResolve()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Uri.EscapeDataString(\n                Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234)));\n\n            var r = new HttpRequestData(\n                \"GET\",\n                new Uri($\"http://example.com/path/acs?SAMLart={artifact}\"));\n\n            var options = StubFactory.CreateOptions();\n            options.SPOptions.ServiceCertificates.Add(new ServiceCertificate\n            {\n                Certificate = SignedXmlHelper.TestCert\n            });\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, options);\n\n            StubServer.LastArtifactResolutionWasSigned.Should().BeTrue();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromGetWithoutRelayState()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Uri.EscapeDataString(\n                Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234)));\n\n            var r = new HttpRequestData(\n                \"GET\",\n                new Uri($\"http://example.com/path/acs?SAMLart={artifact}\"));\n\n            StubServer.LastArtifactResolutionSoapActionHeader = null;\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, StubFactory.CreateOptions());\n\n            var xmlDocument = XmlHelpers.XmlDocumentFromString(\n                \"<message>   <child-node /> </message>\");\n\n            var expected = new UnbindResult(xmlDocument.DocumentElement, null, TrustLevel.None);\n\n            result.Should().BeEquivalentTo(expected);\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromPost()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234));\n\n            var relayState = MethodBase.GetCurrentMethod().Name;\n\n            var r = new HttpRequestData(\n                \"POST\",\n                new Uri(\"http://example.com\"),\n                \"/ModulePath\",\n                new KeyValuePair<string, IEnumerable<string>>[]\n                {\n                    new KeyValuePair<string, IEnumerable<string>>(\"SAMLart\", new[] { artifact }),\n                    new KeyValuePair<string, IEnumerable<string>>(\"RelayState\", new[] { relayState })\n                },\n                new StoredRequestState(issuer, null, null, null));\n\n            StubServer.LastArtifactResolutionSoapActionHeader = null;\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, StubFactory.CreateOptions());\n\n            var xmlDocument = XmlHelpers.XmlDocumentFromString(\n                \"<message>   <child-node /> </message>\");\n\n            var expected = new UnbindResult(xmlDocument.DocumentElement, relayState, TrustLevel.None);\n\n            result.Should().BeEquivalentTo(expected);\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_FromPostWithoutRelayState()\n        {\n            var issuer = new EntityId(\"https://idp.example.com\");\n            var artifact = Convert.ToBase64String(\n                    Saml2ArtifactBinding.CreateArtifact(issuer, 0x1234));\n\n            var r = new HttpRequestData(\n                \"POST\",\n                new Uri(\"http://example.com\"),\n                \"/ModulePath\",\n                new KeyValuePair<string, IEnumerable<string>>[]\n                {\n                    new KeyValuePair<string, IEnumerable<string>>(\"SAMLart\", new[] { artifact }),\n                },\n                null,\n                null);\n\n            StubServer.LastArtifactResolutionSoapActionHeader = null;\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Unbind(r, StubFactory.CreateOptions());\n\n            var xmlDocument = XmlHelpers.XmlDocumentFromString(\n                \"<message>   <child-node /> </message>\");\n\n            var expected = new UnbindResult(xmlDocument.DocumentElement, null, TrustLevel.None);\n\n            result.Should().BeEquivalentTo(expected);\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Unbind_ThrowsOnUnknownHttpMethod()\n        {\n            var r = new HttpRequestData(\"PUT\", new Uri(\"http://host\"));\n\n            Saml2Binding.Get(Saml2BindingType.Artifact)\n                .Invoking(b => b.Unbind(r, StubFactory.CreateOptions()))\n                .Should().Throw<InvalidOperationException>()\n                .WithMessage(\"Artifact binding can only use GET or POST http method, but found PUT\");\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind()\n        {\n            var message = new Saml2MessageImplementation\n            {\n                DestinationUrl = new Uri(\"http://example.com/destination\"),\n                MessageName = \"ShouldBeIgnored\",\n                RelayState = \"ABC& needs escape\",\n                XmlData = \"<XML />\",\n                Issuer = new EntityId(\"http://idp.example.com\"),\n            };\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Bind(message);\n\n            var expected = new CommandResult\n            {\n                HttpStatusCode = HttpStatusCode.SeeOther\n            };\n\n            result.Should().BeEquivalentTo(expected, opt => opt.Excluding(r => r.Location));\n\n            result.Location.Query.Count(c => c == '=').Should().Be(2, \"there are 2 params and = inside values should have been escaped\");\n            var query = HttpUtility.ParseQueryString(result.Location.Query);\n\n            Uri.UnescapeDataString(query[\"RelayState\"]).Should().Be(message.RelayState);\n\n            var artifact = Convert.FromBase64String(\n                Uri.UnescapeDataString(query[\"SAMLart\"]));\n\n            ISaml2Message storedMessage;\n            Saml2ArtifactBinding.PendingMessages.TryRemove(artifact, out storedMessage)\n                .Should().BeTrue();\n\n            storedMessage.Should().BeSameAs(message);\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind_WithQueryInDestination()\n        {\n            var message = new Saml2MessageImplementation\n            {\n                DestinationUrl = new Uri(\"http://example.com/destination?q=a\"),\n                MessageName = \"ShouldBeIgnored\",\n                RelayState = \"ABC123\",\n                XmlData = \"<XML />\",\n                Issuer = new EntityId(\"http://idp.example.com\")\n            };\n\n            var result = Saml2Binding.Get(Saml2BindingType.Artifact).Bind(message);\n\n            result.Location.Query.Trim('?').Contains(\"?\").Should().BeFalse();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind_WithoutRelayState()\n        {\n            var message = new Saml2MessageImplementation\n            {\n                DestinationUrl = new Uri(\"http://example.com/destination?q=a\"),\n                MessageName = \"ShouldBeIgnored\",\n                XmlData = \"<XML />\",\n                Issuer = new EntityId(\"http://idp.example.com\")\n            };\n\n            Action a = () => Saml2Binding.Get(Saml2BindingType.Artifact).Bind(message);\n\n            a.Should().NotThrow();\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind_Nullcheck()\n        {\n            Saml2Binding.Get(Saml2BindingType.Artifact)\n                .Invoking(b => b.Bind(null))\n                .Should().Throw<ArgumentNullException>(\"message\");\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind_CreateArtifact()\n        {\n            var issuer = new EntityId(\"http://idp.example.com\");\n            var index = 0x1234;\n            var artifact = Saml2ArtifactBinding.CreateArtifact(issuer, index);\n\n            // Header\n            artifact[0].Should().Be(0);\n            artifact[1].Should().Be(4);\n\n            //Endpoint index\n            artifact[2].Should().Be(0x12);\n            artifact[3].Should().Be(0x34);\n\n            artifact.Length.Should().Be(44);\n\n            var sourceID = new byte[20];\n            Array.Copy(artifact, 4, sourceID, 0, 20);\n\n            sourceID.Should().BeEquivalentTo(\n                SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(issuer.Id)));\n\n            // Can't test a random value, but check it's not 0 all over.\n            artifact.Skip(24).Count(c => c == 0).Should().BeLessThan(10);\n        }\n\n        [TestMethod]\n        public void Saml2ArtifactBinding_Bind_CreateArtifact_NullcheckIssuer()\n        {\n            Action a = () => Saml2ArtifactBinding.CreateArtifact(null, 17);\n\n            a.Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"issuer\");\n        }\n\n    }\n}\n"], "filenames": ["Sustainsys.Saml2/Configuration/SPOptions.cs", "Sustainsys.Saml2/SAML2P/Saml2PSecurityTokenHandler.cs", "Sustainsys.Saml2/SAML2P/Saml2Response.cs", "Tests/Tests.Shared/Saml2P/Saml2ResponseTests.cs", "Tests/Tests.Shared/WebSSO/Saml2ArtifactBindingTests.cs"], "buggy_code_start_loc": [0, 29, 599, 1921, 142], "buggy_code_end_loc": [408, 93, 599, 1960, 144], "fixing_code_start_loc": [1, 28, 600, 1920, 141], "fixing_code_end_loc": [428, 97, 603, 1955, 141], "type": "CWE-294", "message": "Saml2 Authentication services for ASP.NET (NuGet package Sustainsys.Saml2) greater than 2.0.0, and less than version 2.5.0 has a faulty implementation of Token Replay Detection. Token Replay Detection is an important defence in depth measure for Single Sign On solutions. The 2.5.0 version is patched. Note that version 1.0.1 is not affected. It has a correct Token Replay Implementation and is safe to use. Saml2 Authentication services for ASP.NET (NuGet package Sustainsys.Saml2) greater than 2.0.0, and less than version 2.5.0 have a faulty implementation of Token Replay Detection. Token Replay Detection is an important defense measure for Single Sign On solutions. The 2.5.0 version is patched. Note that version 1.0.1 and prior versions are not affected. These versions have a correct Token Replay Implementation and are safe to use.", "other": {"cve": {"id": "CVE-2020-5261", "sourceIdentifier": "security-advisories@github.com", "published": "2020-03-25T02:15:11.427", "lastModified": "2021-03-24T13:15:43.067", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Saml2 Authentication services for ASP.NET (NuGet package Sustainsys.Saml2) greater than 2.0.0, and less than version 2.5.0 has a faulty implementation of Token Replay Detection. Token Replay Detection is an important defence in depth measure for Single Sign On solutions. The 2.5.0 version is patched. Note that version 1.0.1 is not affected. It has a correct Token Replay Implementation and is safe to use. Saml2 Authentication services for ASP.NET (NuGet package Sustainsys.Saml2) greater than 2.0.0, and less than version 2.5.0 have a faulty implementation of Token Replay Detection. Token Replay Detection is an important defense measure for Single Sign On solutions. The 2.5.0 version is patched. Note that version 1.0.1 and prior versions are not affected. These versions have a correct Token Replay Implementation and are safe to use."}, {"lang": "es", "value": "Los servicios de autenticaci\u00f3n Saml2 para ASP.NET (paquete NuGet Sustainsys.Saml2) superior a la versi\u00f3n 2.0.0 y menor que la versi\u00f3n 2.5.0 tienen una implementaci\u00f3n defectuosa de la detecci\u00f3n de reproducci\u00f3n de tokens. Token Replay Detection es una defensa importante en la medida de profundidad para las soluciones de Single Sign On. La versi\u00f3n 2.5.0 est\u00e1 parcheada. Tenga en cuenta que la versi\u00f3n 1.0.1 no se ve afectada. Tiene una implementaci\u00f3n correcta de reproducci\u00f3n de tokens y es seguro de usar. Los servicios de autenticaci\u00f3n Saml2 para ASP.NET (paquete NuGet Sustainsys.Saml2) superior a la versi\u00f3n 2.0.0 y menor que la versi\u00f3n 2.5.0 tienen una implementaci\u00f3n defectuosa de la detecci\u00f3n de reproducci\u00f3n de tokens. La detecci\u00f3n de reproducci\u00f3n de tokens es una medida de defensa importante para las soluciones de inicio de sesi\u00f3n \u00fanico. La versi\u00f3n 2.5.0 est\u00e1 parcheada. Tenga en cuenta que la versi\u00f3n 1.0.1 y las versiones anteriores no se ven afectadas. Estas versiones tienen una implementaci\u00f3n correcta de reproducci\u00f3n de tokens y son seguras de usar."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-294"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-294"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sustainsys:saml2:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.5.0", "matchCriteriaId": "74E6577A-B61E-43AD-BE8E-CC0CAC83C4F2"}]}]}], "references": [{"url": "https://github.com/Sustainsys/Saml2/commit/e58e0a1aff2b1ead6aca080b7cdced55ee6d5241", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Sustainsys/Saml2/issues/711", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/Sustainsys/Saml2/security/advisories/GHSA-g6j2-ch25-5mmv", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Sustainsys/Saml2/commit/e58e0a1aff2b1ead6aca080b7cdced55ee6d5241"}}