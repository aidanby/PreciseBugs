{"buggy_code": ["<?php\n/**\n* WikiNi action allowing to list pages among different ways\n*\n* @version $Id: listpages.php 833 2007-08-10 01:16:57Z gandon $\n* @author Didier Loiseau\n* @copyright 2005   Didier Loiseau\n* @license This program is free software; you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published by\n* the Free Software Foundation; either version 2 of the License, or\n* (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n* @todo tree & levels\n*/\n\n/*\n* Parameters:\n*  - tree: tree display starting at some page\n*       by default: if owner is not specified, the main page\n*           else, the page of the user specified by the owner parameter\n*  - levels: the depth of the tree\n*  - sort: specifies the sorting order; by time, user (last editor), owner or tag (page name)\n*  - owner: if tree is specified, only list pages whose owner is the given user\n*           else, list all pages belonging to the given user\n*  - exclude: list of page that should not be listed (including their descendents)\n*  - user: list all pages to which the given user has taken part\n*    (cannot be combined with tree)\n*/\n\n// retrieve parameters\n$sort = strtolower($this->GetParameter('sort'));\n$tree = $this->GetParameter('tree');\n$levels = (int) $this->GetParameter('levels');\n$max_levels = 7;\n$owner = $this->GetParameter('owner');\n$exclude = $this->GetParameter('exclude');\n$user = $this->GetParameter('user');\n\n// default values\n// use a secure $sort value for MySQL\nif (!in_array($sort, array('time', 'user', 'owner', 'tag'))) {\n    $sort = 'tag';\n}\nif ($owner == 'owner') {\n    $owner = $this->GetPageOwner();\n}\nif (($owner && $sort == 'owner') || ($user && $sort == 'user')) {\n    $sort = 'tag';\n}\nif ($tree == 'tree') {\n    if ($owner) {\n        $tree = $owner;\n    } else {\n        $tree = $this->GetConfigValue('root_page');\n    }\n}\nif ($levels <= 0) {\n    $levels = 3;\n} elseif ($levels > $max_levels) {\n    $levels = $max_levels;\n}\nif ($exclude) {\n    // notice we can addslash() the list before splitting it because escaped character are not separators\n    $exclude = preg_split('/[ ;,\\|]/', addslashes($exclude), -1, PREG_SPLIT_NO_EMPTY);\n} else {\n    $exclude = array();\n}\nif ($user == 'user') {\n    $user = $this->GetPageOwner();\n}\n\n$prefix = $this->GetConfigValue('table_prefix');\n\n// treatment\nif ($tree) {\n    // tree display\n    /* first step: retrieve every pages of the tree:\n     * $links will be built according to the following template:\n     * 'tag' => array(\n     *  'page_exists' => true|false, // whether the page exists (avoids 1 request for each page...)\n     *  'haslinksto'  => array( // list of pages to which this one is linked\n     *      ['tag' => etc.[, ...]] // data are stored in a recursive tree\n     *  )\n     *  [, additionnal info[, ...]] // modification date, owner (+ does he have his own page ?), user (+ idem and is he registered ?)\n     * )\n     */\n    $links = array();\n\n    // informations on the root page\n    switch ($sort) {\n        case 'owner':\n            $sql = 'SELECT a.owner, b.tag IS NOT NULL owner_has_ownpage'\n                . ' FROM ' . $prefix . 'pages a'\n                . ' LEFT JOIN ' . $prefix . 'pages b ON a.owner = b.tag AND b.latest = \"Y\"';\n                break;\n        case 'user':\n            $sql = 'SELECT a.user, u.name IS NOT NULL user_is_registered, b.tag IS NOT NULL user_has_ownpage'\n                . ' FROM ' . $prefix . 'pages a'\n                . ' LEFT JOIN ' . $prefix . 'users u ON a.user = u.name'\n                . ' LEFT JOIN ' . $prefix . 'pages b ON u.name = b.tag AND b.latest = \"Y\"';\n            break;\n        case 'time':\n            $sql = 'SELECT a.time'\n                . ' FROM ' . $prefix . 'pages a';\n            break;\n        case 'tag':\n            $links[$tree] = array();\n    } // switch\n    if ($sort != 'tag') {\n        $sql .= ' WHERE a.tag = \"' . AddSlashes($tree) . '\" AND a.latest = \"Y\" LIMIT 1';\n        if (!$rootData = $this->LoadSingle($sql)) {\n            echo '<div class=\"alert alert-danger\"><strong>'._t('ERROR').' '._t('ACTION').' ListPages</strong> : '._('THE_PAGE').' ' . htmlspecialchars($tree, ENT_COMPAT, YW_CHARSET) . ' '._t('DOESNT_EXIST').' !</div>';\n            return;\n        }\n        $links[$tree] = $rootData;\n    }\n    $links[$tree]['page_exists'] = true;\n    $links[$tree]['haslinksto'] = array();\n    \n    // To simplify treatment and to make it more efficient we'll work by referrence.\n    // This will allow you to do only one request by tree level\n    // $workingon represents every page of the current level\n    $workingon = array($tree => &$links[$tree]['haslinksto']);\n    \n    // to avoid many loops and computing several time the lists needed for the request,\n    // we store them into variables\n    $from = '\"' . AddSlashes($tree) . '\"';\n    $exclude[] = AddSlashes($tree);\n    $exclude_str = '\"' . implode('\", \"', $exclude) . '\"';\n    for ($i = 1; $i <= $levels; $i++) {\n        if ($from) {\n            if ($owner) {\n                $sql = 'SELECT from_tag, to_tag, a.tag IS NOT NULL page_exists'\n                    . ($sort == 'time' ? ', a.time' : '');\n                if ($sort == 'user') {\n                    $sql .= ', a.user, u.name IS NOT NULL user_is_registered, b.tag IS NOT NULL user_has_ownpage'\n                        . ' FROM ' . $prefix . 'links, ' . $prefix . 'pages a'\n                        . ' LEFT JOIN ' . $prefix . 'users u ON a.user = u.name'\n                        . ' LEFT JOIN ' . $prefix . 'pages b ON u.name = b.tag AND b.latest = \"Y\"';\n                } else {\n                    $sql .= ' FROM ' . $prefix . 'links, ' . $prefix . 'pages a';\n                }\n                $sql .= ' WHERE from_tag IN (' . $from . ')'\n                    . ' AND to_tag NOT IN (' . $from . ')'\n                    . ' AND to_tag = a.tag'\n                    . ' AND a.owner = \"' . AddSlashes($owner) . '\"'\n                    . ' AND a.latest = \"Y\"';\n            } else {\n                $sql = 'SELECT from_tag, to_tag, a.tag IS NOT NULL page_exists';\n                switch ($sort) {\n                    case 'owner':\n                        $sql .= ', a.owner, b.tag IS NOT NULL owner_has_ownpage'\n                            . ' FROM ' . $prefix . 'links'\n                            . ' LEFT JOIN ' . $prefix . 'pages a ON to_tag = a.tag AND a.latest = \"Y\"'\n                            . ' LEFT JOIN ' . $prefix . 'pages b ON a.owner = b.tag AND b.latest = \"Y\"';\n                        break;\n                    case 'user':\n                        $sql .= ', a.user, u.name IS NOT NULL user_is_registered, b.tag IS NOT NULL user_has_ownpage'\n                            . ' FROM ' . $prefix . 'links'\n                            . ' LEFT JOIN ' . $prefix . 'pages a ON to_tag = a.tag AND a.latest = \"Y\"'\n                            . ' LEFT JOIN ' . $prefix . 'users u ON a.user = u.name'\n                            . ' LEFT JOIN ' . $prefix . 'pages b ON u.name = b.tag AND b.latest = \"Y\"';\n                        break;\n                    case 'time':\n                        $sql .= ', a.time';\n                        // no break\n                    default:\n                        $sql .= ' FROM ' . $prefix . 'links'\n                            . ' LEFT JOIN ' . $prefix . 'pages a ON to_tag = a.tag AND a.latest = \"Y\"';\n                } // switch\n                $sql .= ' WHERE from_tag IN (' . $from . ')'\n                    . ' AND to_tag NOT IN (' . $exclude_str . ')';\n            }\n        }\n        // result order\n        $sql .= ' ORDER BY ';\n        switch ($sort) {\n            case 'tag':\n                $sql .= 'to_tag';\n                break;\n            case 'owner':\n                // 1) existing pages having an owner, sorted by owner name\n                // 2) existing pages without owner\n                // 3) non-existent pages\n                $sql .= 'a.owner IS NULL, a.owner = \"\", a.owner';\n                break;\n            case 'time':\n                // 1) existing pages, sorted in antechronologic order\n                // 2) non-existent pages\n                $sql .= 'a.time IS NULL, a.time DESC';\n                break;\n            case 'user':\n                // 1) existing pages, sorted by last editor\n                // 2) non-existent pages\n                $sql .= 'a.user IS NULL, a.user';\n                break;\n        } // switch\n        \n        if ($pages = $this->LoadAll($sql)) {\n            $from = '';\n            $newworkingon = array();\n            foreach ($pages as $page) {\n                $to_tag = '\"' . AddSlashes($page['to_tag']) . '\"';\n                $workingon[$page['from_tag']][$page['to_tag']] = array('page_exists' => $page['page_exists'], 'haslinksto' => array());\n                if ($sort != 'tag') {\n                    $workingon[$page['from_tag']][$page['to_tag']][$sort] = $page[$sort];\n                    switch ($sort) {\n                        case 'owner':\n                            $workingon[$page['from_tag']][$page['to_tag']]['owner_has_ownpage'] = $page['owner_has_ownpage'];\n                            break;\n                        case 'user':\n                            $workingon[$page['from_tag']][$page['to_tag']]['user_is_registered'] = $page['user_is_registered'];\n                            $workingon[$page['from_tag']][$page['to_tag']]['user_has_ownpage'] = $page['user_has_ownpage'];\n                            break;\n                    } // switch\n                }\n                if ($page['page_exists']) {\n                    $from .= ($from ? ', ' : '') . $to_tag;\n                    // if several pages link to the same page, only display the tree once\n                    // (for the first appearing time)\n                    if (!isset($newworkingon[$page['to_tag']])) {\n                        $newworkingon[$page['to_tag']] = &$workingon[$page['from_tag']][$page['to_tag']]['haslinksto'];\n                    }\n                }\n                $exclude_str .= ', ' . $to_tag;\n            }\n            if (!$workingon = $newworkingon) {\n                // no page had link to still non-referrenced pages, we can stop here\n                break;\n            }\n        } else {\n            // no page was found at this tree level, we can stop here\n            break;\n        }\n    }\n    \n    // Seccond step: display the tree\n    // this function allows us to render the tree using HTML lists.\n    if (!function_exists('ShowPageTree')) {\n        function ShowPageTree($tree, &$wiki, $show = 'tag', $indent = 0)\n        {\n            if ($tree) {\n                $indentStr = str_repeat(\"\\t\", $indent);\n                $retour =  \"$indentStr<ul>\\n\";\n                foreach ($tree as $pageName => $pageData) {\n                    $retour .= \"$indentStr\\t<li>\";\n                    if ($pageData['page_exists']) {\n                        $retour .= $wiki->ComposeLinkToPage($pageName, false, false, false);\n                        switch ($show) {\n                            case 'owner':\n                                $retour .= ' . . . . '._t('BELONGING_TO').' : ';\n                                if ($pageData['owner']) {\n                                    if ($pageData['owner_has_ownpage']) {\n                                        $retour .= $wiki->ComposeLinkToPage($pageData['owner'], false, false, false);\n                                    } else {\n                                        $retour .= '<span class=\"forced-link missingpage\">' . $pageData['owner'] . '</span>';\n                                        $retour .= $wiki->ComposeLinkToPage($pageData['owner'], 'edit', '?', false);\n                                    }\n                                } else {\n                                    $retour .= _t('UNKNOWN');\n                                }\n                                break;\n                            case 'user':\n                                $retour .= ' . . . . '._t('LAST_CHANGE_BY').' : ';\n                                if ($pageData['user_is_registered']) {\n                                    if ($pageData['user_has_ownpage']) {\n                                        $retour .= $wiki->ComposeLinkToPage($pageData['user'], false, false, false);\n                                    } else {\n                                        $retour .= '<span class=\"forced-link missingpage\">' . $pageData['user'] . '</span>';\n                                        $retour .= $wiki->ComposeLinkToPage($pageData['user'], 'edit', '?', false);\n                                    }\n                                } else {\n                                    $retour .= $pageData['user'];\n                                }\n                                break;\n                            case 'time':\n                                $retour .= ' . . . . '._t('LAST_CHANGE').' : ' . $pageData['time'];\n                                break;\n                        } // switch\n                        if ($pageData['haslinksto']) {\n                            $retour .= \"\\n\";\n                            $retour .= ShowPageTree($pageData['haslinksto'], $wiki, $show, $indent + 2);\n                            $retour .= $indentStr . \"\\t\"; // just put tabs before the </li>\n                        }\n                    } else {\n                        $retour .= '<span class=\"forced-link missingpage\">' . $pageName . '</span>'\n                            . $wiki->ComposeLinkToPage($pageName, 'edit', '?', false);\n                    }\n                    $retour .= \"</li>\\n\";\n                }\n                return \"$retour$indentStr</ul>\\n\";\n            }\n            return '';\n        }\n    }\n    \n    echo ShowPageTree($links, $this, $sort);\n} else {\n    // classical list display\n    // building the request\n    // has_ownpage and user_is_registered avoid us to make requests to know\n    // whether the personnal pages of owners and users exist\n    if ($user) {\n        $sql = 'SELECT a.tag, b.time,\n            b.user, name IS NOT NULL user_is_registered, user_page.tag IS NOT NULL user_has_ownpage'\n            . ($owner ? '' : ', b.owner, owner_page.tag IS NOT NULL owner_has_ownpage')\n            . ' FROM ' . $prefix . 'pages a, ' . $prefix . 'pages b\n            LEFT JOIN ' . $prefix . 'users ON b.user = name\n            LEFT JOIN ' . $prefix . 'pages user_page ON name = user_page.tag AND user_page.latest = \"Y\"'\n            . ($owner ? '' : ' LEFT JOIN ' . $prefix . 'pages owner_page ON b.owner = owner_page.tag AND owner_page.latest = \"Y\"')\n            . ' WHERE a.user = \"' . AddSlashes($user) . '\"'\n            . ' AND a.tag = b.tag AND b.latest = \"Y\"'\n            . ($owner ? ' AND b.owner = \"' . AddSlashes($owner) . '\"' : '');\n    } elseif ($owner) {\n        if ($sort == 'user') {\n            $sql = 'SELECT a.tag, a.time,\n                a.user, name IS NOT NULL user_is_registered, user_page.tag IS NOT NULL user_has_ownpage\n                FROM ' . $prefix . 'pages a\n                LEFT JOIN ' . $prefix . 'users ON a.user = name\n                LEFT JOIN ' . $prefix . 'pages user_page ON name = user_page.tag AND user_page.latest = \"Y\"';\n        } else {\n            $sql = 'SELECT tag, time FROM ' . $prefix . 'pages a';\n        }\n        $sql .= ' WHERE a.owner = \"' . AddSlashes($owner) . '\" AND a.latest = \"Y\"';\n    } else {\n        if ($sort == 'user') {\n            $sql = 'SELECT a.tag, a.owner,\n                owner_page.tag IS NOT NULL owner_has_ownpage,\n                a.user, name IS NOT NULL user_is_registered, user_page.tag IS NOT NULL user_has_ownpage\n                FROM ' . $prefix . 'pages a\n                LEFT JOIN ' . $prefix . 'users ON a.user = name\n\t\tLEFT JOIN ' . $prefix . 'pages user_page ON name = user_page.tag AND user_page.latest = \"Y\"\n\t\tLEFT JOIN ' . $prefix . 'pages owner_page ON a.owner = owner_page.tag AND owner_page.latest = \"Y\"';\n        } else {\n            $sql = 'SELECT a.tag, a.owner, a.time, b.tag IS NOT NULL owner_has_ownpage\n                FROM ' . $prefix . 'pages a\n                LEFT JOIN ' . $prefix . 'pages b ON a.owner = b.tag AND b.latest = \\'Y\\'';\n        }\n        $sql .= ' WHERE a.latest = \"Y\"';\n    }\n    $sql .= ' AND a.comment_on = \"\"';\n    if ($exclude) {\n        $sql .= ' AND a.tag NOT IN (\"' . implode('\", \"', $exclude) . '\")';\n    }\n    if ($user) {\n        $sql .= ' GROUP BY tag';\n        if ($sort == 'owner') {\n            $sql .= ' ORDER BY b.owner = \"\", b.owner';\n        } else {\n            $sql .= ' ORDER BY b.' . $sort;\n        }\n    } elseif ($sort == 'owner') {\n        // this allows to display non existent pages last\n        $sql .= ' ORDER BY a.owner = \"\", a.owner';\n    } else {\n        $sql .= ' ORDER BY a.' . $sort;\n    }\n    \n    // retrieving the pages\n    $pages = $this->LoadAll($sql);\n    \n    // Display\n    // Header\n    if ($user) {\n        echo _t('PAGE_LIST_WHERE').' ' . $this->Format($user) . ' '._t('HAS_PARTICIPATED');\n        if ($owner) {\n            echo ' '._t('INCLUDING').' ' . $this->Link($owner) . ' '._t('IS_THE_OWNER');\n        }\n        if ($exclude) {\n            echo ' ('._t('EXCLUDING_EXCLUSIONS').')';\n        }\n        echo \":\\n\";\n        if (!$pages) {\n            echo \"<br />\\n\"._t('NO_PAGE_FOUND').\"...<br />\\n\";\n            return;\n        }\n    } elseif ($owner) {\n        echo _t('LIST_PAGES_BELONGING_TO').' ' . $this->Link($owner);\n        if ($exclude) {\n            echo ' ('._t('EXCLUDING_EXCLUSIONS').')';\n        }\n        echo \":\\n\";\n        if (!$pages) {\n            echo \"<br />\\n\"._t('THIS_USER_HAS_NO_PAGE').\"...\\n<br />\\n\";\n            return;\n        }\n    } elseif (!$pages) {\n        // because it is still possible...\n        echo _t('NO_PAGE_FOUND').' '._t('IN_THIS_WIKI').' ('._t('EXCLUDING_EXCLUSIONS').')';\n        return;\n    }\n    // No header if it is a simple page list that was asked\n    \n    // Display the list itself\n    echo \"<ul>\\n\";\n    foreach ($pages as $page) {\n        echo \"\\t<li>\" . $this->ComposeLinkToPage($page['tag'], false, false, false);\n        if (!$owner) {\n            echo ' . . . . ';\n            if ($page['owner']) {\n                if ($page['owner_has_ownpage']) {\n                    echo $this->ComposeLinkToPage($page['owner'], false, false, false);\n                } else {\n                    echo '<span class=\"forced-link missingpage\">' . $page['owner'] . '</span>';\n                    echo $this->ComposeLinkToPage($page['owner'], 'edit', '?', false);\n                }\n            } else {\n                echo _t('UNKNOWN');\n            }\n        }\n        if ($sort == 'user' || $sort == 'time') {\n            echo '  . . . . <strong>'._t('LAST_CHANGE').'</strong>';\n            if ($sort == 'time') {\n                echo ': ' . $page['time'];\n            }\n            if ($sort == 'user' || ($user && $sort == 'time')) {\n                echo ' <strong>'._t('BY').'</strong> ';\n                if ($page['user_is_registered']) {\n                    if ($page['user_has_ownpage']) {\n                        echo $this->ComposeLinkToPage($page['user'], false, false, false);\n                    } else {\n                        echo '<span class=\"forced-link missingpage\">' . $page['user'] . '</span>';\n                        echo $this->ComposeLinkToPage($page['user'], 'edit', '?', false);\n                    }\n                } else {\n                    echo htmlspecialchars($page['user'], ENT_COMPAT, YW_CHARSET);\n                }\n            }\n        }\n        echo \"</li>\\n\";\n    }\n    echo \"</ul>\\n\";\n}\n", "<?php\n/**\n * Adaptation de l'action textsearch & newtextsearch de wikini pour Yeswiki\n * Copyright (c) 2002, Hendrik Mans <hendrik@mans.de>\n * Copyright 2002, 2003 David DELON\n * Copyright 2002  Patrick PAUL\n * Copyright 2004  Jean Christophe ANDR\u00e9\n * Copyright 2004  Nicephore17\n * Copyright 2019  XF75013\n * 08/02/2019 - v1.0 initial release\n * INFORMATION D'UTILISATION\n * Utilisation {{newtextsearch}} en lieu eet place de {{textsearch}}\n **/\n\n use YesWiki\\Bazar\\Controller\\EntryController;\n use YesWiki\\Bazar\\Service\\EntryManager;\n use YesWiki\\Bazar\\Service\\FormManager;\n use YesWiki\\Bazar\\Service\\SearchManager;\n\n // On r\u00e9cup\u00e9re ou initialise toutes le varible comme pour textsearch\n// label \u00e0 afficher devant la zone de saisie\n$label = $this->GetParameter('label', _t('WHAT_YOU_SEARCH').'&nbsp;: ');\n// largeur de la zone de saisie\n$size = $this->GetParameter('size', '40');\n// texte du bouton\n$button = $this->GetParameter('button', _t('SEARCH'));\n// texte \u00e0 chercher\n$phrase = $this->GetParameter('phrase', false);\n// s\u00e9parateur entre les \u00e9l\u00e9ments trouv\u00e9s\n$separator = $this->GetParameter('separator', false);\n// prefixe des tables pour ce wiki\n$prefixe = $this->config['table_prefix'];\n// prefixe des tables pour ce wiki\n$user = $this->GetUser();\n// nombre de pages dont on affiche une partie du contenu\n$maxDisplayedPages = 25;\n\n\n$entryController = $this->services->get(EntryController::class);\n$entryManager = $this->services->get(EntryManager::class);\n\n// se souvenir si c'\u00e9tait :\n// -- un param\u00e9tre de l'action : {{textsearch phrase=\"Test\"}}\n// -- ou du CGI http://example.org/wakka.php?wiki=RechercheTexte&phrase=Test\n//\n// r\u00e9cup\u00e9rer le param\u00e9tre de l'action\n$paramPhrase = htmlspecialchars($phrase, ENT_COMPAT, YW_CHARSET);\n// ou, le cas \u00e9ch\u00e9ant, r\u00e9cup\u00e9rer le param\u00e9tre du CGI\nif (!$phrase && isset($_GET['phrase'])) {\n    $phrase = htmlspecialchars($_GET['phrase'], ENT_COMPAT, YW_CHARSET);\n}\n\n// s'il y a un param\u00e9tre d'action \"phrase\", on affiche uniquement le r\u00e9sultat\n// dans le cas contraire, pr\u00e9senter une zone de saisie\nif (!$paramPhrase) {\n    echo $this->FormOpen('', '', 'get');\n    echo '<div class=\"input-prepend input-append input-group input-group-lg\">\n          <span class=\"add-on input-group-addon\"><i class=\"fa fa-search icon-search\"></i></span>\n          <input name=\"phrase\" type=\"text\" class=\"form-control\" placeholder=\"'.(($label) ? $label : '').'\" size=\"', $size, '\" value=\"', $phrase, '\" >\n          <span class=\"input-group-btn\">\n          <input type=\"submit\" class=\"btn btn-primary btn-lg\" value=\"', $button, '\" />\n          </span>\n          </div>\n          <span class=\"\">\n          <small>Un caract&eacute;re inconnu peut &ecirc;tre remplac&eacute; par \u00ab ? \u00bb plusieurs par \u00ab * \u00bb</small>\n          </span><!-- /input-group --><br>';\n    echo \"\\n\", $this->FormClose();\n}\n\nif (!function_exists('displayNewSearchResult')) {\n    /* fonction n\u00e9cessaire \u00e0 l'affichage en contexte */\n    function displayNewSearchResult($string, $phrase, $needles = [])\n    {\n        $string = strip_tags($string);\n        $query = trim(str_replace(array(\"+\",\"?\",\"*\"), array(\" \",\" \",\" \"), $phrase));\n        $qt = explode(\" \", $query);\n        $num = count($qt);\n        $cc = ceil(154 / $num);\n        $string_re = '';\n        foreach ($needles as $needle => $result) {\n            if (preg_match('/'.$needle.'/i', $string, $matches)) {\n                $tab = preg_split(\"/(\".$matches[0].\")/iu\", $string, 2, PREG_SPLIT_DELIM_CAPTURE);\n                if (count($tab)>1) {\n                    $avant = strip_tags(mb_substr($tab[0], -$cc, $cc));\n                    $apres = strip_tags(mb_substr($tab[2], 0, $cc));\n                    $string_re .= '<p style=\"margin-top:0;margin-left:1rem;\"><i style=\"color:silver;\">[\u2026]</i>' . $avant . '<b>' . $tab[1] . '</b>' . $apres . '<i style=\"color:silver;\">[\u2026]</i></p> ';\n                }\n            }\n        }\n        if (empty($string_re)) {\n            for ($i = 0; $i < $num; $i++) {\n                $tab[$i] = preg_split(\"/($qt[$i])/iu\", $string, 2, PREG_SPLIT_DELIM_CAPTURE);\n                if (count($tab[$i])>1) {\n                    $avant[$i] = strip_tags(mb_substr($tab[$i][0], -$cc, $cc));\n                    $apres[$i] = strip_tags(mb_substr($tab[$i][2], 0, $cc));\n                    $string_re .= '<p style=\"margin-top:0;margin-left:1rem;\"><i style=\"color:silver;\">[\u2026]</i>' . $avant[$i] . '<b>' . $tab[$i][1] . '</b>' . $apres[$i] . '<i style=\"color:silver;\">[\u2026]</i></p> ';\n                }\n            }\n        }\n        return $string_re;\n    }\n}\n\n// lancement de la recherche\nif ($phrase) {\n    // extract needles with values in list\n    // find in values for entries\n    $formManager = $this->services->get(FormManager::class);\n    $forms = $formManager->getAll();\n    $searchManager = $this->services->get(SearchManager::class);\n    $needles = $searchManager->searchWithLists(str_replace(array('*', '?'), array('', '_'), $phrase), $forms);\n    $requeteSQLForList = '';\n    if (!empty($needles)) {\n        $first = true;\n        // generate search\n        foreach ($needles as $needle => $results) {\n            if (!empty($results)) {\n                if ($first) {\n                    $first = false;\n                } else {\n                    $requeteSQLForList .= ' AND ';\n                }\n                $requeteSQLForList .= '(';\n                // add regexp standard search\n                $requeteSQLForList .= 'body REGEXP \\''.$needle.'\\'';\n                // add search in list\n                // $results is an array not empty only if list\n                foreach ($results as $result) {\n                    $requeteSQLForList .= ' OR ';\n                    if (!$result['isCheckBox']) {\n                        $requeteSQLForList .= ' body LIKE \\'%\"'.str_replace('_', '\\\\_', $result['propertyName']).'\":\"'.$result['key'].'\"%\\'';\n                    } else {\n                        $requeteSQLForList .= ' body REGEXP \\'\"'.str_replace('_', '\\\\_', $result['propertyName']).'\":(' .\n                            '\"'.$result['key'] . '\"'.\n                            '|\"[^\"]*,' . $result['key'] . '\"'.\n                            '|\"' . $result['key'] . ',[^\"]*\"'.\n                            '|\"[^\"]*,' .$result['key'] . ',[^\"]*\"'.\n                            ')\\'';\n                    }\n                }\n                $requeteSQLForList .= ')';\n            }\n        }\n    }\n    if (!empty($requeteSQLForList)) {\n        $requeteSQLForList = ' OR ('.$requeteSQLForList.') ';\n    }\n    \n    // Modification de caract\u00e8re sp\u00e9ciaux\n    $phraseFormatted= str_replace(array('*', '?'), array('%', '_'), $phrase);\n    $phraseFormatted = addslashes($phraseFormatted);\n\n    // Blablabla SQL\n    $requestfull = 'SELECT body, tag FROM '.$prefixe.'pages\n                  LEFT JOIN '.$prefixe.'acls ON tag = page_tag AND privilege = \"read\"\n                  WHERE latest = \"Y\"\n                  AND ( list IS NULL OR list =\"*\" '.\n                  ($user ? 'OR owner = \"'.$user['name'].'\" OR list = \"+\" OR (list NOT LIKE \"%!'.$user['name'].'%\" AND list LIKE \"%'.$user['name'].'\")':'').')'.\n                  // TODO retrouver la facon d'afficher les commentaires (AFFICHER_COMMENTAIRES ? '':'AND tag NOT LIKE \"comment%\"').\n                  ' AND body LIKE \"%' . $phraseFormatted . '%\"'.$requeteSQLForList.'\n                  GROUP BY tag ORDER BY tag LIMIT 100';\n\n    // ex\u00e9cution de la requete\n    if ($resultat = $this->LoadAll($requestfull)) {\n        if ($GLOBALS['js']) {\n            $js = $GLOBALS['js'];\n        } else {\n            $js = '';\n        }\n        // affichage des resultats\n\n        // affichage des r\u00e9sultats en liste\n        if (empty($separator)) {\n            echo $this->Format('---- --- **R\u00e9sultats de la recherche [\"\"'.$phrase.'\"\"] :---**');\n            echo('<ol>');\n            $counter = 0;\n            foreach ($resultat as $i => $page) {\n                if ($this->HasAccess(\"read\", $page[\"tag\"])) {\n                    $lien = $this->ComposeLinkToPage($page[\"tag\"]);\n                    echo '<li><h4 style=\"margin-bottom:0.2rem;\">', $lien, \"</h4>\";\n                    $extract= '';\n                    if ($counter < $maxDisplayedPages) {\n                        if ($entryManager->isEntry($page[\"tag\"])) {\n                            $renderedEntry = $entryController->view($page[\"tag\"], '', false); // without footer\n                            $extract = displayNewSearchResult($renderedEntry, $phrase, $needles);\n                        }\n                        if (empty($extract)) {\n                            $extract = displayNewSearchResult($this->Format($page[\"body\"], 'wakka', $page[\"tag\"]), $phrase, $needles);\n                        }\n                        $counter += 1;\n                    }\n                    echo $extract.\"</li>\\n\";\n                }\n            }\n            echo('</ol>');\n\n        // affichage des r\u00e9sultats en ligne\n        } else {\n            $separator = htmlspecialchars($separator, ENT_COMPAT, YW_CHARSET);\n            echo '<p>'._t('SEARCH_RESULT_OF').' \"', htmlspecialchars($phrase, ENT_COMPAT, YW_CHARSET), '\"&nbsp;: ';\n            foreach ($resultat as $i => $line) {\n                if ($this->HasAccess(\"read\", $line[\"tag\"])) {\n                    echo((($i>0) ? $separator:'').$this->ComposeLinkToPage($line['tag']));\n                }\n            }\n            echo '</p>', \"\\n\";\n        }\n        $GLOBALS['js'] = $js;\n    } else {\n        echo $this->Format('---- --- **D\u00e9sol\u00e9 mais il n\\'y a aucun de r\u00e9sultat pour votre recherche.**');\n    }\n}\n", "<?php\nnamespace YesWiki;\n\nuse YesWiki\\Core\\Service\\DbService;\nuse YesWiki\\Core\\Service\\TripleStore;\nuse YesWiki\\Security\\Controller\\SecurityController;\n\nclass User\n{\n    // Obviously needs a group or ACLS class. In the meantime, use of $this->wiki->GetGroupACL and so on\n\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PROPERTIES ~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n    // User properties (cf database)\n    // The case is, on purpose, similar to the one in the database\n    protected $properties = [\n        'name' => '',\n        'password' => '', // MD5 encrypted or not (retrieved from DB => encrypted)\n        'email' => '',\n        'motto' => '',\n        'revisioncount' => '',\n        'changescount' => '',\n        'doubleclickedit' => '',\n        'show_comments' => '',\n    ];\n    // End of user properties (cf database)\n\n    public $error = '';\n    protected $wiki = ''; // give access to the main wiki object\n    protected $usersTable = '';\n    protected $nameMaxLength = 80;\n    protected $emailMaxLength = 254;\n    protected $passwordMinimumLength = 5;\n\n    protected $keyVocabulary = 'http://outils-reseaux.org/_vocabulary/key';\n\n    protected $securityController;\n    protected $dbService;\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~ END OF PROPERTIES ~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n\n    public function __construct($wiki)\n    {\n        $this->wiki = $wiki;\n        $this->initUsersTable();\n        $this->initLimitations();\n        $this->dbService = $this->wiki->services->get(DbService::class);\n        $this->securityController = $this->wiki->services->get(SecurityController::class);\n    }\n\n    /* ~~~~~~~~~~~~~~~~~~~~~~ SETS PROPERTY METHODS ~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n    /** Tells if the user who actually runs the wiki session is admin\n     *\n     * @param none\n     *\n     * @return boolean True if the user who actually runs the session is admin, false otherwise.\n     */\n    protected function runnerIsAdmin()\n    {\n        return $this->wiki->UserIsAdmin();\n    }\n\n    /** Sets the users table name\n     *\n     * In some cases, multiple wikis share a unique users table.\n     * This unique users table prefix is the one specified in config.\n     * Therefore we must build $this->userstable using\n     * - this unique users table prefix if specified,\n     *   or\n     * - the wiki default table prefix\n     *\n     * @param none\n     *\n     * @return void\n     */\n    protected function initUsersTable()\n    {\n        // Set value of MySQL user table name\n        if (!empty($this->wiki->config['user_table_prefix'])) {\n            $usersTablePrefix =  $this->wiki->config['user_table_prefix'];\n        } else {\n            $usersTablePrefix =  $this->wiki->config['table_prefix'];\n        }\n        $this->usersTable =  $usersTablePrefix.'users';\n    }\n    \n    /** Initializes object limitation properties using values from the config file\n     *\n     * Initialiezd properties are:\n     * - $this->nameMaxLength (default value = 80)\n     * - $this->emailMaxLength (default value = 254)\n     * - $this->passwordMinimumLength (default value = 5)\n     *\n     * @param none\n     *\n     * @return void\n     */\n    protected function initLimitations()\n    {\n        if (!empty($this->wiki->config['user_name_max_length'])) {\n            if (filter_var($this->wiki->config['user_name_max_length'], FILTER_VALIDATE_INT)) {\n                $this->nameMaxLength = $this->wiki->config['user_name_max_length'];\n            } else {\n                $this->error = _t('USER_NAME_MAX_LENGTH_NOT_INT');\n            }\n        }\n        if (!empty($this->wiki->config['user_email_max_length'])) {\n            if (filter_var($this->wiki->config['user_email_max_length'], FILTER_VALIDATE_INT)) {\n                $this->emailMaxLength = $this->wiki->config['user_email_max_length'];\n            } else {\n                $this->error = _t('USER_EMAIL_MAX_LENGTH_NOT_INT');\n            }\n        }\n        if (!empty($this->wiki->config['user_password_min_length'])) {\n            if (filter_var($this->wiki->config['user_password_min_length'], FILTER_VALIDATE_INT)) {\n                $this->passwordMinimumLength = $this->wiki->config['user_password_min_length'];\n            } else {\n                $this->error = _t('USER_PASSWORD_MIN_LENGTH_NOT_INT');\n            }\n        }\n    }\n    /* ~~~~~~~~~~~~~~~~~~ END OF SETS PROPERTY METHODS ~~~~~~~~~~~~~~~~~~~~~ */\n\n    /* ~~~~~~~~~~~~~PROPERTY ACCESS METHODS~~~~~~~~~~~~~~~~~~~ */\n\n    public function checkProperty($propertyName, $newValue, $confValue = '')\n    {\n        $result = false;\n        $newValue = trim($newValue);\n        switch ($propertyName) {\n            case 'name':\n                $result = $this->checkName($newValue);\n                break;\n            case 'email':\n                $result = $this->checkEmail($newValue);\n                break;\n            case 'password':\n                $result = $this->checkPassword($newValue, $confValue);\n                break;\n            case 'revisioncount':\n            case 'changescount':\n                $newValue = intval($newValue);\n                if (empty($newValue) || !filter_var($newValue, FILTER_VALIDATE_INT) || $newValue < 0) {\n                    $this->error = _t('USER_YOU_MUST_SPECIFY_A_POSITIVE_INTEGER_FOR').' '.$propertyName.'.';\n                } else {\n                    $result = true;\n                }\n                break;\n            case 'show_comments':\n            case 'doubleclickedit':\n                $value = strtolower($newValue);\n                if (!in_array($value, ['o', 'oui', 'y', 'yes', 'n', 'non', 'no', '0', '1'])) {\n                    $this->error = _t('USER_YOU_MUST_SPECIFY_YES_OR_NO').' '.$propertyName.'.';\n                } else {\n                    $result = true;\n                }\n                break;\n            default:\n                $result = !empty($newValue);\n        }\n        return $result;\n    }\n\n\n    /** Sets a given property to a given value\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $propertyName Name of the property to set.\n     * @param string $newValue Value to set the property with.\n     * @param string $confValue optional Only used when property name egals 'password'. Confirmation value of the password.\n     * @return boolean true if worked all right and false otherwise\n     */\n    public function setProperty($propertyName, $newValue, $confValue = '')\n    {\n        $this->error ='';\n        $newValue = trim($newValue);\n        if ($this->checkProperty($propertyName, $newValue, $confValue)) {\n            switch ($propertyName) {\n                case 'password':\n                    if (!empty($confValue)) {\n                        $OK = $this->passwordIsCorrect($newValue, $confValue);\n                    } else {\n                        $OK = $this->passwordIsCorrect($newValue);\n                    } // $result is true if password IS correct and $this->error contains error if any\n                    if ($OK) { // password is correct\n                        $newValue = MD5($newValue);\n                    }\n                    break;\n                case 'revisioncount':\n                case 'changescount':\n                    $newValue = intval($newValue);\n                    break;\n                case 'show_comments':\n                case 'doubleclickedit':\n                    $value = strtolower($newValue);\n                    if (in_array($value, ['o', 'oui', 'y', 'yes', '1'])) {\n                        $newValue = 'Y';\n                    } else {\n                        $newValue = 'N';\n                    }\n                    break;\n            }\n            $this->properties[$propertyName] = $newValue;\n            $result = true;\n        } else {\n            $result = false;\n        }\n        return $result;\n    }\n\n    /**\n    * Gets the value of a given property\n    *\n    * @param string $propertyName Name of the property from which the value is retrieved.\n    * @return mixed The property value (string) or false in case of failure.\n    */\n    public function getProperty($propertyName)\n    {\n        if (isset($this->properties[$propertyName])) {\n            return $this->properties[$propertyName];\n        } else {\n            return false;\n        }\n    }\n\n    /** Checks if a value is fit for name property.\n     *\n     * Name must be set and its lenght must be less than nameMaxLength characters\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $newName\n     * @return boolean True if OK or false if any problems\n     */\n    protected function checkName($newName)\n    {\n        $this->error = '';\n        $result = false;\n        if (empty($newName)) {\n            $this->error = _t('USER_YOU_MUST_SPECIFY_A_NAME').'.';\n        } elseif (strlen($newName) > $this->nameMaxLength) {\n            $this->error = _t('USER_NAME_S_MAXIMUM_LENGTH_IS').' '.$this->nameMaxLength.'.';\n        } elseif (preg_match('/[!#@<>\\\\\\\\\\/][^<>\\\\\\\\\\/]{2,}/', $newName)) {\n            $this->error = _t('USER_THIS_IS_NOT_A_VALID_NAME').'.';\n        } else {\n            $result = true;\n        }\n        return $result;\n    }\n\n    /** Checks if a value is fit for email property.\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $newEmail\n     * @return boolean True if OK or false if any problems\n     */\n    protected function checkEmail($newEmail)\n    {\n        // NOTE: Can we change name ?\n        $this->error ='';\n        $result = false;\n        if (empty($newEmail)) {\n            $this->error = _t('USER_YOU_MUST_SPECIFY_AN_EMAIL').'.';\n        } elseif ($newEmail == $this->properties['email']) { // if email is the current user's email\n            $result = true;\n        } elseif ($this->emailExistsInDB($newEmail)) {\n            $this->error = _t('USER_THIS_EMAIL_IS_ALLREADY_USED_ON_THIS_WIKI').'.';\n        } elseif (strlen($newEmail) > $this->emailMaxLength) {\n            $this->error = _t('USER_EMAIL_S_MAXIMUM_LENGTH_IS').' '.$this->emailMaxLength.'.';\n        } elseif (!filter_var($newEmail, FILTER_VALIDATE_EMAIL)) {\n            $this->error = _t('USER_THIS_IS_NOT_A_VALID_EMAIL').'.';\n        } else {\n            $result = true;\n        }\n        return $result;\n    }\n\n    /** sets user properties using an associative array\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @param string[] $newValues Associative array containing object property values\n     *  $newValues = Array(\n     *      ['name'] \t\t\t=> string()\tOptional\n     *      ['email']\t \t\t=> string()\tOptional\n     *      ['password']\t\t=> string()\tOptional\n     *      ['motto']\t\t\t=> string()\tOptional\n     *      ['revisioncount']\t=> integer()Optional\n     *      ['changescount']\t=> integer()Optional\n     *      ['doubleclickedit'] => string()\tOptional\n     *      ['show_comments']\t=> string()\tOptional\n     *      )\n     * @return boolean True if OK or false if any problems\n    */\n    public function setByAssociativeArray($newValues)\n    {\n        $this->error = '';\n        $error = [];\n        $result = true;\n        if (isset($newValues['name']) && (trim($newValues['name']) != '')) {\n            if (!$this->setProperty('name', $newValues['name'])) {\n                $result = false;\n                $error[] = $this->error;\n            }\n        }\n        if (isset($newValues['email']) && (trim($newValues['email']) != '')) {\n            if (!$this->setProperty('email', $newValues['email'])) {\n                $result = false;\n                $error[] = $this->error;\n            }\n        }\n        if (isset($newValues['password']) && (trim($newValues['password']) != '')) {\n            if (!$this->setProperty('password', $newValues['password'], isset($_POST['confpassword']) ? '1' : '')) {\n                $result = false;\n                $error[]= $this->error;\n            }\n        }\n        if (isset($newValues['motto']) && trim($newValues['motto']) != '') {\n            $this->setProperty('motto', $newValues['motto']);\n        }\n        if (isset($newValues['revisioncount']) && (trim($newValues['revisioncount']) != '')) {\n            if (!$this->setProperty('revisioncount', $newValues['revisioncount'])) {\n                $result = false;\n                $error[] = $this->error;\n            }\n        }\n        if (isset($newValues['changescount']) && (trim($newValues['changescount']) != '')) {\n            if (!$this->setProperty('changescount', $newValues['changescount'])) {\n                $result = false;\n                $error[] = $this->error;\n            }\n        }\n        if (isset($newValues['doubleclickedit']) && (trim($newValues['doubleclickedit']) != '')) {\n            $this->setProperty('doubleclickedit', $newValues['doubleclickedit']);\n        }\n        if (isset($newValues['show_comments']) && (trim($newValues['show_comments']) != '')) {\n            $this->setProperty('show_comments', $newValues['show_comments']);\n        }\n        if (count($error) > 0) {\n            $this->error = '<strong>'._t('USER_ERRORS_FOUND').'</strong> :'.\"\\n\"\n              .'<ul><li>'.implode('</li><li>', $error).'</li></ul>'.\"\\n\";\n        }\n        return $result;\n    }\n\n    /**\tgets every user properties and put them into an associative array\n     *\n     * If parameter $format is set to 'array', then returns an associative array:\n     *  Array(\n     *      ['name'] \t\t\t=> string()\tOptional\n     *      ['email']\t \t\t=> string()\tOptional\n     *      ['password']\t\t=> string()\tOptional\n     *      ['motto']\t\t\t=> string()\tOptional\n     *      ['revisioncount']\t=> integer()Optional\n     *      ['changescount']\t=> integer()Optional\n     *      ['doubleclickedit'] => string()\tOptional\n     *      ['show_comments']\t=> string()\tOptional\n     *      )\n     *\n     * @param string $format optional describes the type of return (array by default or json)\n     * @return mixed An array or a json depending on parameter value\n    */\n    public function getAllProperties($format = 'array')\n    {\n        if ($format == 'array') {\n            return $this->properties;\n        } elseif ($format == 'json') {\n            return json_encode($this->properties);\n        }\n    }\n    /* ~~~~~~~~~~~~~~~~~~ END OF PROPERTY ACCESS METHODS ~~~~~~~~~~~~~~~~~~~ */\n\n    /* ~~~~~~~~~~~~~~~~~~~~~ PASSWORD HANDLING METHODS ~~~~~~~~~~~~~~~~~~~~~ */\n\n    /** checks if the given string is the user's password\n     *\n     * @param string $pwd The password to check\n     * @return boolean True if OK or false if any problems\n     */\n    public function checkPassword($pwd, $newUser = '')\n    {\n        if (empty($newUser) && $this->properties['password'] !== md5($pwd)) {\n            $this->error = _t('USER_WRONG_PASSWORD').' !';\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\tChecks if the given password complies with the rules\n     *\n     * BEWARE returns true or false the other way around from other functions\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $pwd the password to check\n     * @param string $confPassword optional The confirmation password if any\n     * @return boolean True if the password is not compliant or false if the password looks good\n     *       True\n     *           If the password is not compliant, ie\n     *               contains spaces\n     *               is too short ($passwordMinimumLength defines the minimum length)\n     *           If $confPasswordis is set and different from $pwd\n     *           $this->error contains the error message\n     *       False\n     *           if the password looks good\n     */\n    public function passwordIsCorrect($pwd, $confPassword = '')\n    {\n        $correct = true;\n        if (isset($confPassword) && (trim($confPassword) !='')) {\n            if ($confPassword !== $pwd) {\n                $this->error = _t('USER_PASSWORDS_NOT_IDENTICAL').'.';\n                $correct = false;\n            }\n        }\n        if (strlen($pwd) < $this->passwordMinimumLength) {\n            $this->error = _t('USER_PASSWORD_TOO_SHORT').'. '._t('USER_PASSWORD_MINIMUM_NUMBER_OF_CHARACTERS_IS').' ' .$this->passwordMinimumLength.'.';\n            $correct = false;\n        }\n        return $correct;\n    }\n\n    /* Password recovery process (AKA reset password)\n            1. A key is generated using name, email alongside with other stuff.\n            2. The triple (user's name, specific key \"vocabulary\",key) is stored in triples table.\n            3. In order to update h\u00b7er\u00b7is password, the user must provided that key.\n            4. The new password is accepted only if the key matches with the value in triples table.\n            5. The corresponding row is removed from triples table.\n    */\n\n    /** Part of the Password recovery process: Handles the password recovery email process\n     *\n     * Generates the password recovery key\n     * Stores the (name, vocabulary, key) triple in triples table\n     * Generates the recovery email\n     * Sends it\n     *\n     * @return boolean True if OK or false if any problems\n     */\n    public function sendPasswordRecoveryEmail()\n    {\n        // Generate the password recovery key\n        $key = md5($this->properties['name'] . '_' . $this->properties['email'] . rand(0, 10000) . date('Y-m-d H:i:s') . PW_SALT);\n        // Erase the previous triples in the trible table\n        $this->wiki->services->get(TripleStore::class)->delete($this->properties['name'], $this->keyVocabulary, null, '', '') ;\n        // Store the (name, vocabulary, key) triple in triples table\n        $res = $this->wiki->services->get(TripleStore::class)->create($this->properties['name'], $this->keyVocabulary, $key, '', '');\n\n        // Generate the recovery email\n        $passwordLink = $this->wiki->Href() . (($this->wiki->config['rewrite_mode'] ?? false) ? '?' : '&').'a=recover&email=' . $key . '&u=' . urlencode(base64_encode($this->properties['name']));\n        $pieces = parse_url($this->wiki->GetConfigValue('base_url'));\n        $domain = isset($pieces['host']) ? $pieces['host'] : '';\n\n        $message = _t('LOGIN_DEAR').' ' . $this->properties['name'] . \",\\n\";\n        $message .= _t('LOGIN_CLICK_FOLLOWING_LINK').' :' . \"\\n\";\n        $message .= '-----------------------' . \"\\n\";\n        $message .= $passwordLink . \"\\n\";\n        $message .= '-----------------------' . \"\\n\";\n        $message .= _t('LOGIN_THE_TEAM').' ' . $domain . \"\\n\";\n\n        $subject = _t('LOGIN_PASSWORD_LOST_FOR').' ' . $domain;\n        // Send the email\n        if (!function_exists('send_mail')) {\n            require_once('includes/email.inc.php');\n        }\n        return send_mail($this->wiki->config['BAZ_ADRESSE_MAIL_ADMIN'], $this->wiki->config['BAZ_ADRESSE_MAIL_ADMIN'], $this->properties['email'], $subject, $message);\n    }\n\n    /** Part of the Password recovery process: sets the password to a new value if given the the proper recovery key (sent in a recovery email).\n     *\n     * In order to update h\u00b7er\u00b7is password, the user provides a key (sent using sendPasswordRecoveryEmail())\n     * The new password is accepted only if the key matches with the value in triples table.\n     * The corresponding row is the removed from triples table.\n     * See Password recovery process above\n     * replaces updateUserPassword($userID, $password, $key) from login.functions.php\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $user The user login\n     * @param string $key The password recovery key (sent by email)\n     * @param string $pwd the new password value\n     * @param string $confPassword optional The confirmation password if any\n     *\n     * @return boolean True if OK or false if any problems\n    */\n    public function resetPassword($user, $key, $password, $confPassword='')\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        $this->error = '';\n        if ($this->checkEmailKey($key, $user) === false) { // The password recovery key does not match\n            $this->error = _t('USER_INCORRECT_PASSWORD_KEY').'.';\n            $OK = false;\n        } else { // The password recovery key matches\n            if (isset($confPassword) && ($confPassword != '')) {\n                $OK = $this->updatePassword($password, $confPassword);\n            } else {\n                $OK = $this->updatePassword($password);\n            }\n            if ($OK) {// Was able to update password => Remove the key from triples table\n                $res = $this->wiki->DeleteTriple($user, 'http://outils-reseaux.org/_vocabulary/key', $key, '', '');\n            }\n        }\n        return $OK;\n    }\n\n    /** Part of the Password recovery process: Checks the provided key against the value stored for the provided user in triples table\n     *\n     * As part of the Password recovery process, a key is generated and stored as part of a (user, $this->keyVocabulary, key) triple in the triples table. This function checks wether the key is right or not.\n     * See Password recovery process above\n     * replaces checkEmailKey($hash, $key) from login.functions.php\n     *         TODO : Add error handling\n     * @param string $hash The key to check\n     * @param string $user The user for whom we check the key\n     *\n     * @return boolean True if success and false otherwise.\n    */\n    public function checkEmailKey($hash, $user): bool\n    {\n        // Pas de detournement possible car utilisation de _vocabulary/key ....\n        return !is_null($this->wiki->services->get(TripleStore::class)->exist($user, 'http://outils-reseaux.org/_vocabulary/key', $hash, '', ''));\n    }\n    /* End of Password recovery process (AKA reset password)   */\n\n    /** Normal change of password (requested via the usersettings page)\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $password the new password value\n     * @param string $confPassword optional The confirmation password if any\n     *\n     * @return boolean True if OK or false if any problems\n     */\n    public function updatePassword($password, $confPassword='')\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        $this->error = '';\n        if (isset($confPassword) && ($confPassword != '')) {\n            $OK = $this->passwordIsCorrect($password, $confPassword);\n        } else {\n            $OK = $this->passwordIsCorrect($password);\n        } // $result is true if password IS correct and $this->error contains error if any\n        if ($OK) { // password is correct\n            // Update user's password\n            $sql\t= 'UPDATE '.$this->usersTable;\n            $sql .= ' SET password = \"'.MD5($password).'\" ';\n            $sql .= 'WHERE name = \"'.$this->dbService->escape($this->properties['name']).'\" LIMIT 1;';\n            $OK = $this->wiki->query($sql); // true or false depending on the query execution\n            if ($OK) {\n                $this->properties['password'] = md5($password);\n            } else {\n                $this->error = _t('USER_PASSWORD_UPDATE_FAILED').'.';\n            }\n        }\n        return $OK;\n    }\n    /* ~~~~~~~~~~~~~~~~~ END OF PASSWORD HANDLING METHODS ~~~~~~~~~~~~~~~~~~ */\n\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~ WEB SESSION METHODS ~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n    /** Sets the http session and the cookie\n     *\n     * For a user to be logged in requires:\n     * -\ta corresponding http session record\n     *     (ie containing the database row converted to an associative array)\n     * -\ta cookie set to the corresponding name and password\n     * Replaces $wiki->SetUser\n     *         // TODO: Error handling\n     *\n     * @param int $remember sets the cookie duration (0 means \"ends with the session\")\n    */\n    public function logIn($remember = 0)\n    {\n        $_SESSION['user'] = array(\n            'name'\t\t\t\t=> $this->properties['name'],\n            'password'\t\t\t=> $this->properties['password'],\n            'email'\t\t\t\t=> $this->properties['email'],\n            'motto'\t\t\t\t=> $this->properties['motto'],\n            'revisioncount' \t=> $this->properties['revisioncount'],\n            'changescount'\t\t=> $this->properties['changescount'],\n            'doubleclickedit'\t=> $this->properties['doubleclickedit'],\n            'show_comments' \t=> $this->properties['show_comments'],\n        );\n        $this->wiki->setPersistentCookie('name', $this->properties['name'], $remember);\n        $this->wiki->setPersistentCookie('password', $this->properties['password'], $remember);\n        $this->wiki->setPersistentCookie('remember', $remember, $remember);\n    }\n\n    /** Deletes the http session and cookie\n     *\n     * To log a user out, we:\n     *  -\tdelete the corresponding http session record\n     *  -\tdelete the cookie set to the corresponding name and password\n     * In case of failure $this->error contains the error message\n     * Replaces $wiki->logOut()\n     *\n     * @return boolean True if OK or false if any problems\n    */\n    public function logOut()\n    {\n        $OK = true;\n        if (!isset($_SESSION['user'])) { // No one is logged in\n            $this->error = _t('USER_NOT_LOGGED_IN_CANT_LOG_OUT').'.';\n            $OK = false;\n        }\n        if ($OK && !$this->isRunner()) { // The user who actually runs this session is not $user. Don't want to log the wrong one out\n            $this->error = _t('USER_TRYING_TO_LOG_WRONG_USER_OUT').'.';\n            $OK = false;\n        }\n        if ($OK) {\n            $_SESSION['user'] = '';\n            $this->wiki->session->deleteCookie('name');\n            $this->wiki->session->deleteCookie('password');\n            $this->wiki->session->deleteCookie('remember');\n            $OK = true;\n        }\n        return $OK;\n    }\n\n    /** Loads user's ($this) properties from session cookie\n     *\n     * @return boolean True if OK or false if any problems\n    */\n    public function loadFromSession()\n    {\n        if (isset($_SESSION['user']) && $_SESSION['user'] != '') {\n            $this->properties['name']\t\t\t= $_SESSION['user']['name'];\n            $this->properties['password']\t\t= $_SESSION['user']['password'];\n            $this->properties['email']\t\t\t= $_SESSION['user']['email'];\n            $this->properties['motto']\t\t\t= $_SESSION['user']['motto'];\n            $this->properties['revisioncount']\t= $_SESSION['user']['revisioncount'];\n            $this->properties['changescount']\t= $_SESSION['user']['changescount'];\n            $this->properties['doubleclickedit']= $_SESSION['user']['doubleclickedit'];\n            $this->properties['show_comments']\t= $_SESSION['user']['show_comments'];\n            $result = true;\n        } else {\n            $result = false;\n        }\n        return $result;\n    }\n    /* ~~~~~~~~~~~~~~~~~~~~ END OF WEB SESSION METHODS ~~~~~~~~~~~~~~~~~~~~~ */\n\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~ DATABASE METHODS ~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n    /**\tCreates  into database user table the row correponding to the user object ($this)\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @return boolean true if worked all right and false otherwise\n    */\n    public function createIntoDB()\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        $this->error = '';\n        $result = false;\n        $sql = 'INSERT INTO `'.$this->usersTable.'` SET '.\n            'signuptime = now(), '.\n            'name = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['name']).'\", '.\n            'email = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['email']).'\", '.\n            'password = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['password']).'\"'; // has already been md5ed.\n        if (isset($this->properties['motto'])) {\n            $sql .= ', motto = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['motto']).'\"';\n        }\n        if (isset($this->properties['revisioncount'])) {\n            $sql .= ', revisioncount = \"'.$this->properties['revisioncount'].'\"';\n        }\n        if (isset($this->properties['changescount'])) {\n            $sql .= ', changescount = \"'.$this->properties['changescount'].'\"';\n        }\n        if (isset($this->properties['doubleclickedit'])) {\n            $sql .= ', doubleclickedit = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['doubleclickedit']).'\"';\n        }\n        if (isset($this->properties['show_comments'])) {\n            $sql .= ', show_comments = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['show_comments']).'\"';\n        }\n        $sql .= ';';\n        $queryResult = $this->wiki->query($sql);\n        if ($queryResult) {\n            $result = true;\n        } else {\n            $this->error = _t('USER_CREATION_FAILED').'.';\n        }\n        return $result;\n    }\n\n    /**\tPopulates the user object's properties ($this->properties[]) from the database record.\n     *\n     * Uses user's name to retrieve the user.\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $name The name of the user to retrieve\n     * @param string $password optional The user's password\n     *\n     * @return boolean true if worked all right and false otherwise\n   */\n    public function loadByNameFromDB($name, $password = 0)\n    {\n        $this->error = '';\n        $sql = 'SELECT * FROM '.$this->usersTable.' WHERE name = \"'.mysqli_real_escape_string($this->wiki->dblink, $name).'\" ';\n        if ($password == 0) {\n            $sql .= '';\n        } else { // If password has been specified\n            $sql .= 'AND password = MD5(\"'.mysqli_real_escape_string($this->wiki->dblink, $password).'\")';\n        }\n        $sql .= ' LIMIT 1;'; // fetches the first corresponding line, and only that one\n        $row = $this->wiki->loadSingle($sql);\n        if ($row) {\n            $this->properties['name']\t\t\t= $row['name'];\n            $this->properties['password']\t\t= $row['password'];\n            $this->properties['email']\t\t\t= $row['email'];\n            $this->properties['motto']\t\t\t= $row['motto'];\n            $this->properties['revisioncount']\t= $row['revisioncount'];\n            $this->properties['changescount']\t= $row['changescount'];\n            $this->properties['doubleclickedit']= $row['doubleclickedit'];\n            $this->properties['show_comments']\t= $row['show_comments'];\n            $result = true;\n        } elseif ($row === false) {\n            // TODO never called ?\n            $this->error = _t('USER_LOAD_BY_NAME_QUERY_FAILED').'.';\n            $result = false;\n        } else {\n            $this->error = _t('USER_NO_USER_WITH_THAT_NAME').'.';\n            $result = false;\n        }\n        return $result;\n    }\n\n    /**\tPopulates the user object's properties ($this->properties[]) from the database record.\n     *\n     * Uses user's email to retrieve the user.\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $email The email of the user to retrieve\n     * @param string $password optional The user's password\n     *\n     * @return boolean true if worked all right and false otherwise\n   */\n    public function loadByEmailFromDB($email, $password = 0)\n    {\n        $this->error = '';\n        $sql = 'SELECT * FROM '.$this->usersTable.' WHERE email = \"'.mysqli_real_escape_string($this->wiki->dblink, $email).'\" ';\n        if ($password == 0) {\n            $sql .= '';\n        } else { // If password has been specified\n            $sql .= 'AND password = MD5(\"' . mysqli_real_escape_string($this->wiki->dblink, $password) . '\")';\n        }\n        $sql .= ' LIMIT 1;'; // fetches the first corresponding line, and only that one\n        $row = $this->wiki->loadSingle($sql);\n        if ($row) {\n            $this->properties['name']\t\t\t\t= $row['name'];\n            $this->properties['password']\t\t\t= $row['password'];\n            $this->properties['email']\t\t\t\t= $row['email'];\n            $this->properties['motto']\t\t\t\t= $row['motto'];\n            $this->properties['revisioncount']\t\t= $row['revisioncount'];\n            $this->properties['changescount']\t\t= $row['changescount'];\n            $this->properties['doubleclickedit']  \t= $row['doubleclickedit'];\n            $this->properties['show_comments']\t\t= $row['show_comments'];\n            $result = true;\n        } elseif ($row === false) {\n            // TODO never called ?\n            $this->error = _t('USER_LOAD_BY_EMAIL_QUERY_FAILED').'.';\n            $result = false;\n        } else {\n            $this->error = _t('USER_NO_USER_WITH_THAT_EMAIL').'.';\n            $result = false;\n        }\n        return $result;\n    }\n\n    /**\tUpdates the row corresponding to the user in the database.\n     *\n     * BEWARE * You cannot modify password using that fonction, use updatePassword() instead.\n     * In case of failure $this->error contains the error message\n     *\n     * @param string fieldsToUpdate lists the fields to update in the DB using $this properties. Values are comma separated i.e.: 'motto, changescount'\n     *\n     * @return boolean true if worked all right and false otherwise\n   */\n    public function updateIntoDB($fieldsToUpdate = '')\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        // NOTE: Can we update name ?\n        $this->error = '';\n        $fieldsTab = array_map('trim', explode(',', $fieldsToUpdate));\n        if ((count($fieldsTab) == 0) || ((count($fieldsTab) == 1) && ($fieldsTab[0] == ''))) { // Obviously empty => Then we update all but name and pwd\n            $fieldsTab = array(\n                'email',\n                'motto',\n                'revisioncount',\n                'changescount',\n                'doubleclickedit',\n                'show_comments',\n            );\n        }\n        $prefixe = false;\n        $setClause ='';\n        foreach ($fieldsTab as $field) {\n            switch ($field) {\n                case 'email':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' email = \"'.$this->properties['email'].'\"';\n                    $prefixe = true;\n                    break;\n                case 'motto':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' motto = \"'.$this->properties['motto'].'\"';\n                    $prefixe = true;\n                    break;\n                case 'revisioncount':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' revisioncount = \"'.$this->properties['revisioncount'].'\"';\n                    $prefixe = true;\n                    break;\n                case 'changescount':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' changescount = \"'.$this->properties['changescount'].'\"';\n                    $prefixe = true;\n                    break;\n                case 'doubleclickedit':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' doubleclickedit = \"'.$this->properties['doubleclickedit'].'\"';\n                    $prefixe = true;\n                    break;\n                case 'show_comments':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' show_comments = \"'.$this->properties['show_comments'].'\"';\n                    $prefixe = true;\n                    break;\n            } //End switch\n        } // End foreach\n        if ($prefixe) { // At least one field to update\n            $sql = 'UPDATE '.$this->usersTable.' SET '.$setClause;\n            $sql .= ' WHERE name = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['name']).'\" LIMIT 1;';\n            $result = $this->wiki->query($sql);\n            if ($result) {\n                $error = '';\n            } else {\n                $this->error = _t('USER_UPDATE_QUERY_FAILED').'.';\n                $result = false;\n            }\n        } else {\n            $this->error = _t('USER_UPDATE_MISSPELLED_PROPERTIES').'.';\n            $result = false;\n        }\n        return $result;\n    }\n\n    /*\tNOTE: Doesn't make any sense in a user class (singular)\n        code comes from tools/login/libs/login.class.inc.php\n        and should stay there for the time being\n    public function loadUsers()\n    {\n         return $this->wiki->loadAll(\"select * from \" . $this->usersTable . \" order by name\");\n    }\n    */\n\n    /** Deletes the user from the wiki.\n     *\n     * Only Admins can delete a user and can't delete themselves.\n     * Users are not only a row in users database table. They also may appear in groups and as owners of pages.\n     * If the user is the only member of at least one group, an error is raised and the deletion is not performed.\n     * Otherwise,\n     * - The user is removed from every group\n     * - The ownership of each page owned by this user is set to NULL\n     * - The user row is deleted from user table\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @return boolean true if worked all right and false otherwise\n    */\n    public function delete()\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        $this->error = '';\n        $OK = true;\n        if (!$this->runnerIsAdmin()) { // actual user is not admin\n            $this->error = _t('USER_MUST_BE_ADMIN_TO_DELETE').'.';\n            $OK = false;\n        }\n        if ($this->isRunner()) { // actual user is trying to delete oneself\n            $this->error = _t('USER_CANT_DELETE_ONESELF').'.';\n            $OK = false;\n        }\n\n        if ($OK) {\n            $grouptab = $this->listGroupMemberships(); // All the groups with this user in\n            foreach ($grouptab as $group) {\n                $groupmembers = $this->wiki->GetGroupACL($group);\n                $groupmembers = explode('\\n', $groupmembers);\n                $groupmembers = array_map('trim', $groupmembers);\n                if (count($groupmembers) == 1) { // Only one user in (this user then)\n                    $this->error = _t('USER_DELETE_LONE_MEMBER_OF_GROUP').'.';\n                    //\t\t\t\t$this->error .= 'La suppression de cet utilisateur est impossible car c\\'est l\\'unique membre du groupe @'.$group.'. Fa\u00eetes en sorte que ce ne soit plus le cas avant de tenter \u00e0 nouveau de le supprimer.';\n                    $OK = false;\n                }\n            }\n            if ($OK) {\n                // Delete user in every group\n                $triplesTable = $this->wiki->config['table_prefix'].'triples';\n                $searched_value = '%' . $this->dbService->escape($this->properties['name']) . '%';\n                $seek_value_bf = '' . $this->dbService->escape($this->properties['name']) . '\\n'; // username to delete can be followed by another username\n                $seek_value_af = '\\n' . $this->dbService->escape($this->properties['name']); // username to delete can follow another username\n                // get rid of this username everytime it's followed by another\n                $sql  = 'UPDATE '.$triplesTable.'';\n                $sql .= ' SET value = REPLACE(value, \"'.$seek_value_bf.'\", \"\")';\n                $sql .= ' WHERE resource LIKE \"'.GROUP_PREFIX.'%\" and value LIKE \"'.$searched_value.'\";';\n                $OK = $this->wiki->query($sql);\n                if (!$OK) {\n                    $this->error = _t('USER_DELETE_QUERY_FAILED').'.';\n                }\n                // in the remaining get rid of this username everytime it follows another\n                if ($OK) {\n                    $sql  = 'UPDATE `'.$triplesTable.'`';\n                    $sql .= ' SET `value` = REPLACE(`value`, \"'.$seek_value_af.'\", \"\")';\n                    $sql .= ' WHERE `resource` LIKE \"'.GROUP_PREFIX.'%\" and `value` LIKE \"'.$searched_value.'\";';\n                    $OK = $this->wiki->query($sql);\n                    if (!$OK) {\n                        $this->error = _t('USER_DELETE_QUERY_FAILED').'.';\n                    }\n                }\n                // For each page belonging to the user, set the ownership to null\n                if ($OK) {\n                    $pagesTable =$this->wiki->config['table_prefix'].'pages';\n                    $sql = 'UPDATE `'.$pagesTable.'`';\n                    // $sql .= ' SET `owner` = NULL';\n                    $sql .= ' SET `owner` = \"\" ';\n                    $sql .= ' WHERE `owner` = \"'.$this->dbService->escape($this->properties['name']).'\";';\n                    $OK = $this->wiki->query($sql);\n                    if (!$OK) {\n                        $this->error = _t('USER_DELETE_QUERY_FAILED').'.';\n                    }\n                }\n                // Delete the user row from the user table\n                if ($OK) {\n                    $sql = 'DELETE FROM `'.$this->usersTable.'`';\n                    $sql .= ' WHERE `name` = \"'.$this->dbService->escape($this->properties['name']).'\";';\n                    $OK = $this->wiki->query($sql);\n                    if (!$OK) {\n                        $this->error = _t('USER_DELETE_QUERY_FAILED').'.';\n                    }\n                }\n            }\n        }\n        return $OK;\n    }\n    /* ~~~~~~~~~~~~~~~~~~~~~ END OF DATABASE METHODS ~~~~~~~~~~~~~~~~~~~~~~~ */\n\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~ INFO METHODS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n    /** Tells if $this user is the one who actually runs this wiki session.\n     *\n     * @return boolean True if $user is the one who actually runs this wiki session. False otherwise\n    */\n    public function isRunner()\n    {\n        if (!empty($_SESSION['user']) && isset($this->properties['name']) && ($_SESSION['user']['name'] == $this->properties['name'])) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /** Tells if $this user is member of @admins group.\n     *\n     * @return boolean True if $user is member of @admins group. False otherwise\n    */\n    public function isAdmin()\n    {\n        return $this->isInGroup(ADMIN_GROUP);\n    }\n\n    /** Tells if the database user table contains users with that email.\n     *\n     * @param string $email The email to look for in the DB\n     *\n     * @return string[] Array of user names (ie true) or, if no matches, an empty array (ie false)\n    */\n    protected function emailExistsInDB($email)\n    {\n        /* Build sql query*/\n        $sql  = 'SELECT * FROM '.$this->usersTable;\n        $sql .= ' WHERE email = \"'.$email.'\";';\n        /* Execute query */\n        $results = $this->wiki->loadAll($sql);\n        return $results; // If the password does not already exist in DB, $result is an empty table => false\n    }\n\n    /** Tells if $this user is member of the specified group.\n     *\n     * @param string $groupName The name of the group for wich we are testing membership\n     *\n     * @return boolean True if the $this user is member of $groupName, false otherwise\n    */\n    public function isInGroup($groupName)\n    {\n        //\tpublic function UserIsInGroup($group, $user = null, $admincheck = true)\n        return $this->wiki->CheckACL($this->wiki->GetGroupACL($groupName), $this->properties['name'], false);\n    }\n\n    /** Lists the groups $this user is member of\n     *\n     * @return string[] An array of group names\n    */\n    public function listGroupMemberships()\n    {\n        /* Build sql query*/\n        $triplesTable = $this->wiki->config['table_prefix'].'triples';\n        $sql  = 'SELECT resource FROM '.$triplesTable;\n        $sql .= ' WHERE resource LIKE \"'.GROUP_PREFIX.'%\"';\n        $sql .= ' AND property LIKE \"'.WIKINI_VOC_ACLS_URI.'\"';\n        $sql .= ' AND value LIKE \"%'.$this->dbService->escape($this->properties['name']).'%\";';\n        /* Execute query */\n        $results = array();\n        if ($groups = $this->wiki->loadAll($sql)) {\n            foreach ($variable as $key => $groupName) {\n                $results[] = ltrim($groupName, \"@ \\t\\n\\r\\0\\xOB\");\n            }\n            return $results;\n        } else {\n            $error = _t('USER_LISTGROUPMEMBERSHIPS_QUERY_FAILED').'.';\n            return $error;\n        }\n    }\n    /* ~~~~~~~~~~~~~~~~~~~~~~~ END OF INFO METHODS ~~~~~~~~~~~~~~~~~~~~~~~~~ */\n} //end User class\n", "<?php\n\nnamespace YesWiki\\Bazar\\Service;\n\nuse Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBagInterface;\nuse YesWiki\\Bazar\\Field\\BazarField;\nuse YesWiki\\Bazar\\Field\\CheckboxEntryField;\nuse YesWiki\\Bazar\\Field\\EnumField;\nuse YesWiki\\Bazar\\Field\\SelectEntryField;\nuse YesWiki\\Core\\Service\\DbService;\nuse YesWiki\\Security\\Controller\\SecurityController;\nuse YesWiki\\Wiki;\n\nclass FormManager\n{\n    protected $wiki;\n    protected $dbService;\n    protected $entryManager;\n    protected $securityController;\n    protected $fieldFactory;\n    protected $params;\n\n    protected $cachedForms;\n\n    public function __construct(\n        Wiki $wiki,\n        DbService $dbService,\n        EntryManager $entryManager,\n        FieldFactory $fieldFactory,\n        ParameterBagInterface $params,\n        SecurityController $securityController\n    ) {\n        $this->wiki = $wiki;\n        $this->dbService = $dbService;\n        $this->entryManager = $entryManager;\n        $this->fieldFactory = $fieldFactory;\n        $this->params = $params;\n\n        $this->cachedForms = [];\n        $this->securityController = $securityController;\n    }\n\n    public function getOne($formId): ?array\n    {\n        if (isset($this->cachedForms[$formId])) {\n            return $this->cachedForms[$formId];\n        }\n\n        $form = $this->dbService->loadSingle('SELECT * FROM ' . $this->dbService->prefixTable('nature') . 'WHERE bn_id_nature=\\'' . $formId . '\\'');\n\n        if (!$form) {\n            return null;\n        }\n\n        foreach ($form as $key => $value) {\n            $form[$key] = _convert($value, 'ISO-8859-15');\n        }\n\n        $form['template'] = $this->parseTemplate($form['bn_template']);\n        $form['prepared'] = $this->prepareData($form);\n\n        $this->cachedForms[$formId] = $form;\n\n        return $form;\n    }\n\n    public function getAll(): array\n    {\n        $forms = $this->dbService->loadAll('SELECT * FROM ' . $this->dbService->prefixTable('nature') . 'ORDER BY bn_label_nature ASC');\n\n        foreach ($forms as $form) {\n            $formId = $form['bn_id_nature'];\n            $this->cachedForms[$formId] = $this->getOne($formId);\n        }\n        // TODO verify this method : each form is written with the same key in the array\n\n        return $this->cachedForms;\n    }\n\n    public function getMany($formsIds): array\n    {\n        $results = [];\n\n        foreach ($formsIds as $formId) {\n            if (empty($this->cachedForms[$formId])) {\n                $this->cachedForms[$formId] = $this->getOne($formId);\n            }\n            $results[$formId] = $this->cachedForms[$formId];\n        }\n\n        return $results;\n    }\n\n    // TODO Pass a Form object instead of a raw array\n    public function create($data)\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        // If ID is not set or if it is already used, find a new ID\n        if (!$data['bn_id_nature'] || $this->getOne($data['bn_id_nature'])) {\n            $data['bn_id_nature'] = $this->findNewId();\n        }\n\n        return $this->dbService->query('INSERT INTO ' . $this->dbService->prefixTable('nature')\n            . '(`bn_id_nature` ,`bn_ce_i18n` ,`bn_label_nature` ,`bn_template` ,`bn_description` ,`bn_sem_context` ,`bn_sem_type` ,`bn_sem_use_template` ,`bn_condition`)'\n            . ' VALUES (' . $data['bn_id_nature'] . ', \"fr-FR\", \"'\n            . addslashes(_convert($data['bn_label_nature'], YW_CHARSET, true)) . '\",\"'\n            . addslashes(_convert($data['bn_template'], YW_CHARSET, true)) . '\", \"'\n            . addslashes(_convert($data['bn_description'], YW_CHARSET, true)) . '\", \"'\n            . addslashes(_convert($data['bn_sem_context'], YW_CHARSET, true)) . '\", \"'\n            . addslashes(_convert($data['bn_sem_type'], YW_CHARSET, true)) . '\", '\n            . (isset($data['bn_sem_use_template']) ? '1' : '0') . ', \"'\n            . addslashes(_convert($data['bn_condition'], YW_CHARSET, true)) . '\")');\n    }\n\n    public function update($data)\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        return $this->dbService->query('UPDATE' . $this->dbService->prefixTable('nature') . 'SET '\n            . '`bn_label_nature`=\"' . addslashes(_convert($data['bn_label_nature'], YW_CHARSET, true)) . '\" ,'\n            . '`bn_template`=\"' . addslashes(_convert($data['bn_template'], YW_CHARSET, true)) . '\" ,'\n            . '`bn_description`=\"' . addslashes(_convert($data['bn_description'], YW_CHARSET, true)) . '\" ,'\n            . '`bn_sem_context`=\"' . addslashes(_convert($data['bn_sem_context'], YW_CHARSET, true)) . '\" ,'\n            . '`bn_sem_type`=\"' . addslashes(_convert($data['bn_sem_type'], YW_CHARSET, true)) . '\" ,'\n            . '`bn_sem_use_template`=' . (isset($data['bn_sem_use_template']) ? '1' : '0') . ' ,'\n            . '`bn_condition`=\"' . addslashes(_convert($data['bn_condition'], YW_CHARSET, true)) . '\"'\n            . ' WHERE `bn_id_nature`=' . $data['bn_id_nature']);\n    }\n\n    public function clone($id)\n    {\n        $data = $this->getOne($id);\n        if (!empty($data)) {\n            unset($data['bn_id_nature']);\n            $data['bn_label_nature'] = $data['bn_label_nature'].' ('._t('BAZ_DUPLICATE').')';\n            return $this->create($data);\n        } else {\n            // raise error?\n            return false;\n        }\n    }\n\n    public function delete($id)\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n\n        // tests of if $formId is int\n        if (strval(intval($id)) != strval($id)) {\n            return null ;\n        }\n\n        $this->clear($id);\n        return $this->dbService->query('DELETE FROM ' . $this->dbService->prefixTable('nature') . 'WHERE bn_id_nature=' . $id);\n    }\n\n    public function clear($id)\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        $this->dbService->query(\n            'DELETE FROM' . $this->dbService->prefixTable('acls') .\n            'WHERE page_tag IN (SELECT tag FROM ' . $this->dbService->prefixTable('pages') .\n            'WHERE tag IN (SELECT resource FROM ' . $this->dbService->prefixTable('triples') .\n            'WHERE property=\"http://outils-reseaux.org/_vocabulary/type\" AND value=\"fiche_bazar\") AND body LIKE \\'%\"id_typeannonce\":\"' . $id . '\"%\\' );'\n        );\n\n        // TODO use PageManager\n        $this->dbService->query(\n            'DELETE FROM' . $this->dbService->prefixTable('pages') .\n            'WHERE tag IN (SELECT resource FROM ' . $this->dbService->prefixTable('triples') .\n            'WHERE property=\"http://outils-reseaux.org/_vocabulary/type\" AND value=\"fiche_bazar\") AND body LIKE \\'%\"id_typeannonce\":\"' . $id . '\"%\\';'\n        );\n\n        // TODO use TripleStore\n        $this->dbService->query(\n            'DELETE FROM' . $this->dbService->prefixTable('triples') .\n            'WHERE resource NOT IN (SELECT tag FROM ' . $this->dbService->prefixTable('pages') .\n            'WHERE 1) AND property=\"http://outils-reseaux.org/_vocabulary/type\" AND value=\"fiche_bazar\";'\n        );\n    }\n\n    public function findNewId()\n    {\n        $result = $this->dbService->loadSingle('SELECT MAX(bn_id_nature) AS maxi FROM ' . $this->dbService->prefixTable('nature') . 'where bn_id_nature < 1000');\n\n        if (!$result['maxi']) {\n            return 1;\n        }\n        if ($result['maxi'] < 999) {\n            return $result['maxi'] + 1;\n        }\n\n        $result = $this->dbService->loadSingle('SELECT MAX(bn_id_nature) AS maxi FROM' . $this->dbService->prefixTable('nature') . ' where bn_id_nature > 10000');\n\n        if (!$result['maxi']) {\n            return 10001;\n        } else {\n            return $result['maxi'] + 1;\n        }\n    }\n\n    /**\n     * D\u00e9coupe le template et renvoie un tableau structur\u00e9\n     *\n     * @param string  Template du formulaire\n     * @return  mixed   Le tableau des elements du formulaire et options pour l'element liste\n     */\n    public function parseTemplate($raw)\n    {\n        //Parcours du template, pour mettre les champs du formulaire avec leurs valeurs specifiques\n        $tableau_template = array();\n        $nblignes = 0;\n\n        //on traite le template ligne par ligne\n        $chaine = explode(\"\\n\", $raw);\n        foreach ($chaine as $ligne) {\n            $ligne = trim($ligne);\n            // on ignore les lignes vides ou commencant par # (commentaire)\n            if (!empty($ligne) && !(strrpos($ligne, '#', -strlen($ligne)) !== false)) {\n                //on decoupe chaque ligne par le separateur *** (c'est historique)\n                $tablignechampsformulaire = array_map(\"trim\", explode(\"***\", $ligne));\n\n                // TODO find another way to check that the field is valid\n                if (true /*function_exists($tablignechampsformulaire[self::FIELD_TYPE])*/) {\n                    if (count($tablignechampsformulaire) > 3) {\n                        $tableau_template[$nblignes] = $tablignechampsformulaire;\n                        for ($i = 0; $i < 16; $i++) {\n                            if (!isset($tableau_template[$nblignes][$i])) {\n                                $tableau_template[$nblignes][$i] = '';\n                            }\n                        }\n\n                        $nblignes++;\n                    }\n                }\n            }\n        }\n\n        return $tableau_template;\n    }\n\n    public function prepareData($form)\n    {\n        $i = 0;\n        $prepared = $result = [];\n\n        $form['template'] = _convert($form['template'], 'ISO-8859-15');\n\n        foreach ($form['template'] as $field) {\n            $classField = $this->fieldFactory->create($field);\n\n            if ($classField) {\n                $prepared[$i] = $classField;\n            } elseif (function_exists($field[0])) {\n                $functionName = $field[0];\n                $field[0] = 'old'; // field name\n                $field['functionName'] = $functionName ;\n                $classField = $this->fieldFactory->create($field);\n                if ($classField) {\n                    $prepared[$i] = $classField;\n                }\n            }\n            $i++;\n        }\n        return $prepared;\n    }\n\n    public function scanAllFacettable($entries, $groups = ['all'], $onlyLists = false)\n    {\n        $facetteValue = $fields = [];\n\n        foreach ($entries as $entry) {\n            $form = $this->getOne($entry['id_typeannonce']);\n\n            // on filtre pour n'avoir que les liste, checkbox, listefiche ou checkboxfiche\n            $fields[$entry['id_typeannonce']] = isset($fields[$entry['id_typeannonce']])\n                ? $fields[$entry['id_typeannonce']]\n                : $this->filterFieldsByPropertyName($form['prepared'], $groups);\n\n            foreach ($entry as $key => $value) {\n                $facetteasked = (isset($groups[0]) && $groups[0] == 'all') || in_array($key, $groups);\n\n                if (!empty($value) and is_array($fields[$entry['id_typeannonce']]) && $facetteasked) {\n                    $filteredFields = $this->filterFieldsByPropertyName($fields[$entry['id_typeannonce']], [$key]);\n                    $field = array_pop($filteredFields);\n\n                    $fieldPropName = null;\n                    if ($field instanceof BazarField) {\n                        $fieldPropName = $field->getPropertyName();\n                        $fieldType = $field->getType();\n                    }\n\n                    if ($fieldPropName) {\n                        if ($field instanceof EnumField) {\n                            if ($field instanceof SelectEntryField || $field instanceof CheckboxEntryField) {\n                                // listefiche ou checkboxfiche\n                                $facetteValue[$fieldPropName]['type'] = 'fiche';\n                            } else {\n                                $facetteValue[$fieldPropName]['type'] = 'liste';\n                            }\n\n                            $facetteValue[$fieldPropName]['source'] = $key;\n\n                            $tabval = explode(',', $value);\n                            foreach ($tabval as $tval) {\n                                if (isset($facetteValue[$fieldPropName][$tval])) {\n                                    ++$facetteValue[$fieldPropName][$tval];\n                                } else {\n                                    $facetteValue[$fieldPropName][$tval] = 1;\n                                }\n                            }\n                        } elseif (!$onlyLists) {\n                            // texte\n                            $facetteValue[$key]['type'] = 'form';\n                            $facetteValue[$key]['source'] = $key;\n                            if (isset($facetteValue[$key][$value])) {\n                                ++$facetteValue[$key][$value];\n                            } else {\n                                $facetteValue[$key][$value] = 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return $facetteValue;\n    }\n\n    /*\n     * Filter an array of fields by their potential entry ID\n     */\n    private function filterFieldsByPropertyName(array $fields, array $id)\n    {\n        if (count($id)===1 && $id[0]==='all') {\n            return array_filter($fields, function ($field) use ($id) {\n                if ($field instanceof EnumField) {\n                    return true;\n                }\n            });\n        } else {\n            return array_filter($fields, function ($field) use ($id) {\n                if ($field instanceof BazarField) {\n                    return $id[0] === 'all' || in_array($field->getPropertyName(), $id);\n                }\n            });\n        }\n    }\n\n    /**\n     * put a form form External Wiki in cache\n     * @param int $localFormId\n     * @return bool\n     */\n    public function putInCacheFromExternalBazarService(int $localFormId): bool\n    {\n        if (empty($localFormId) || !empty($this->getOne($localFormId))) {\n            // error\n            return false;\n        }\n        $form = $this->wiki->services->get(ExternalBazarService::class)->getTmpForm();\n        if (empty($form)) {\n            return false;\n        } else {\n            $this->cachedForms[$localFormId] = $form;\n            return true;\n        }\n    }\n\n    /**\n     * return field from field name or property name\n     * @param null|string $name\n     * @param null|string $formId\n     * @return null|BazarField\n     */\n    public function findFieldFromNameOrPropertyName(?string $name, ?string $formId): ?BazarField\n    {\n        // check params\n        if (empty($name) || empty($formId) || strval(intval($formId)) != strval($formId)) {\n            return null;\n        }\n\n        $form = $this->getOne($formId);\n        if (empty($form) || !is_array($form['prepared'])) {\n            return null;\n        }\n\n        foreach ($form['prepared'] as $field) {\n            if (in_array($name, [$field->getName(),$field->getPropertyName()])) {\n                return $field;\n            }\n        }\n        return null;\n    }\n}\n", "<?php\n\nuse YesWiki\\Security\\Controller\\SecurityController;\n\n// Charles Nepote 2005-2006\n// Didier Loiseau 2005\n// License GPL.\n// Version 0.7.3 du 10/04/2006 a 23:37.\n\n// TODO\n// -- case pour selectionner tout\n// -- attention au cas ou la version mais aussi la page est effacee\n//   (cf. handler deletepage) (et les commentaires)\n// -- ne rien loguer si rien n'a ete efface\n// -- idealement la derniere page affiche les resultats mais ne renettoie\n//    pas les pages si elle est rechargee\n// -- test pour savoir si quelque chose a bien ete efface\n\nif (!defined(\"WIKINI_VERSION\")) {\n    die(\"acc&egrave;s direct interdit\");\n}\n\n$despam_url = $this->href('', $this->GetPageTag());\n\n\n// -- (1) Formulaire d'accueil de l'action -------------------------------\n//\n// Le formulaire est affiche si aucun spammer n'a encore \u00e9t\u00e9 pr\u00e9cis\u00e9 ou\n// si le champ a \u00e9t\u00e9 laisse vide et valid\u00e9\n\n\n// Action r\u00e9serv\u00e9e aux admins\nif ($this->UserIsAdmin()) {\n    if (empty($_POST['spammer']) && empty($_POST['from']) && !isset($_POST['clean'])) {\n        echo \"<div class=\\\"action_erasespam\\\">\\n\" .\n            \"<form method=\\\"post\\\" action=\\\"\". $despam_url . \"\\\" name=\\\"selection\\\">\\n\".\n            \"<fieldset>\\n\".\n            \"<legend>S&eacute;lection des pages</legend>\\n\";\n        echo \"<p>\\n\".\n          \"Toutes les modifications depuis \".\n          \"<select name=\\\"from\\\">\\n\".\n          \"<option selected=\\\"selected\\\" value=\\\"1\\\">depuis 1 heure</option>\\n\".\n          \"<option value=\\\"3\\\">depuis 3 heures</option>\\n\".\n          \"<option value=\\\"6\\\">depuis 6 heures</option>\\n\".\n          \"<option value=\\\"12\\\">depuis 12 heures</option>\\n\".\n          \"<option value=\\\"24\\\">depuis 24 heures</option>\\n\".\n          \"<option value=\\\"48\\\">depuis 48 heures</option>\\n\".\n          \"<option value=\\\"168\\\">depuis 1 semaine</option>\\n\".\n          \"<option value=\\\"336\\\">depuis 2 semaines</option>\\n\".\n          \"<option value=\\\"744\\\">depuis 1 mois</option>\\n\".\n          \"</select>\\n\".\n          \"<button name=\\\"2\\\" value=\\\"Valider\\\">Valider</button>\\n\".\n          \"</p>\\n\";\n        echo \"</fieldset>\\n\".\n          \"</form>\\n\".\n          \"</div>\\n\\n\";\n    } elseif (!isset($_POST['clean'])) {\n        // -- (2) Page de resultats et form. de selection des pages a effacer ----\n        //\n        if (isset($_POST['from']) && isset($_POST['2'])) {\n            $requete =\n              \"select *\n              from \".$this->config[\"table_prefix\"].\"pages\n              where\n              time > date_sub(now(), interval \" . addslashes($_POST['from']) . \" hour)\n              and latest = 'Y'\n              order by `time` desc\";\n            $title =\n              \"<h2>Nettoyage des pages vandalis\u00e9es depuis \" .\n              $_POST['from'] . \" heure(s)</h2>\\n\";\n        }\n        //echo $requete;\n        $pagesFromSpammer = $this->LoadAll($requete);\n        // Affichage des pages pour validation\n        echo \"<div class=\\\"action_erasespam\\\">\\n\";\n        echo $title;\n        echo \"<form method=\\\"post\\\" action=\\\"\". $despam_url . \"\\\">\\n\";\n        echo \"<table>\\n\";\n        foreach ($pagesFromSpammer as $i => $page) {\n            $req = \"select * from \".$this->config[\"table_prefix\"].\"pages where tag = '\"\n                .mysqli_real_escape_string($this->dblink, $page[\"tag\"])\n                .\"' order by time desc\";\n            $revisions = $this->LoadAll($req);\n\n            echo \"<tr>\\n\".\n              \"<td>\".\n              $page[\"tag\"]. \" \".\n              \"(\". $page[\"time\"]. \") \".\n                \" par \". $page['user'] . \" \".\n              \"</td>\\n\";\n            echo \"<td>\".\n              \"<input name=\\\"suppr[]\\\" value=\\\"\" . $page[\"tag\"] . \"\\\" type=\\\"checkbox\\\" /> [Suppr.!]\".\n              \"</td>\\n\";\n            echo \"<td>\\n\";\n            echo \"<p>\";\n            echo \"_____________________________________________________________________________________________________\";\n            echo \"<p>\";\n\n\n\n            foreach ($revisions as $revision) {\n                // Si c'est la derniere version on saute cette iteration\n                // ce n'est pas elle qu'on va vouloir restaurer...\n                if (!isset($revision1)) {\n                    $revision1 = \"\";\n                    continue;\n                }\n                echo \"<input name=  \\\"rev[]\\\" value=\\\"\" . $revision[\"id\"] . \"\\\" type=\\\"checkbox\\\" /> \";\n                echo \"Restaurer depuis la version du \".\n                   \" \".$revision[\"time\"].\" \".\n                  \" par \". $revision['user'] . \" \".\n                  \"<br />\\n\";\n            }\n            unset($revision1);\n            echo //\" . . . . \",$this->Format($page[\"user\"]),\"</p>\\n\",\n              \"</td>\\n\",\n              \"</tr>\\n\",\n              \"\";\n        }\n        echo \"</table>\\n\";\n        echo \"<p>Commentaire&nbsp;: <input class=\\\"form-control\\\" name=\\\"comment\\\" style=\\\"width: 80%;\\\" /></p>\\n\";\n        echo \"<p>\\n\".\n          \"<input type=\\\"hidden\\\" name=\\\"spammer\\\" value=\\\"\" . (isset($_POST['spammer']) ? $_POST['spammer'] : '') . \"\\\" />\\n\".\n          \"<input type=\\\"hidden\\\" name=\\\"clean\\\" value=\\\"yes\\\" />\\n\".\n          \"<button class=\\\"btn btn-danger\\\" value=\\\"Valider\\\">Nettoyer >></button>\\n\".\n          \"</p>\\n\";\n        echo \"</form>\\n\";\n        echo \"</div>\\n\\n\";\n    } elseif (isset($_POST['clean'])) {\n        if ($this->services->get(SecurityController::class)->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        // -- (3) Nettoyage des pages et affichage de la page de resultats -------\n        //\n        $deletedPages = \"\";\n        $restoredPages = \"\";\n\n        // -- 3.1 Effacement ---\n        // On efface chaque element du tableau suppr[]\n        // Pour chaque page selectionnee\n        if (!empty($_POST['suppr'])) {\n            foreach ($_POST['suppr'] as $page) {\n                // Effacement de la page en utilisant la m\u00e9thode ad\u00e9quate\n                // (si DeleteOrphanedPage ne convient pas, soit on cr\u00e9\u00e9\n                // une autre, soit on la modifie\n                $this->DeleteOrphanedPage($page);\n                $deletedPages .= $page . \", \";\n            }\n            $deletedPages = trim($deletedPages, \", \");\n        }\n\n\n        // -- 3.2 Restauration des pages s\u00e9lectionn\u00e9es ---\n        if (!empty($_POST['rev'])) {\n            //print_r($_POST[\"rev\"]);\n            foreach ($_POST[\"rev\"] as $rev_id) {\n                echo $rev_id.\"<br>\";\n                // Selectionne la revision\n                $revision = $this->LoadSingle(\"select * from \".$this->config[\"table_prefix\"].\"pages where id = '\"\n                  .mysqli_real_escape_string($this->dblink, $rev_id).\"' limit 1\");\n\n\n                // Fait de la derniere version de cette revision\n                // une version archivee\n                $requeteUpdate =\n                  \"update \" . $this->config[\"table_prefix\"] . \"pages \" .\n                  \"set latest = 'N' \".\n                  \"where latest = 'Y' \" .\n                  \"and tag = '\" . $revision[\"tag\"] . \"' \" .\n                  \"limit 1\";\n                $this->Query($requeteUpdate);\n                $restoredPages .= $revision[\"tag\"] . \", \";\n\n                // add new revision\n                $this->Query(\"insert into \".$this->config[\"table_prefix\"].\"pages set \".\n                 \"tag = '\".mysqli_real_escape_string($this->dblink, $revision['tag']).\"', \".\n                 \"time = now(), \".\n                 \"owner = '\".mysqli_real_escape_string($this->dblink, $revision['owner']).\"', \".\n                 \"user = '\".mysqli_real_escape_string($this->dblink, \"despam\").\"', \".\n                 \"latest = 'Y', \".\n                 \"body = '\".mysqli_real_escape_string($this->dblink, chop($revision['body'])).\"'\");\n            }\n        }\n        $restoredPages = trim($restoredPages, \", \");\n\n        echo \"<li>Pages restaur\u00e9es&nbsp;: \" .\n        $restoredPages . \".</li>\\n\";\n        echo \"<li>Pages supprim\u00e9es&nbsp;: \" .\n        $deletedPages . \".</li>\\n\" ;\n\n        echo \"</ul>\\n\";\n        echo \"<p><a href=\\\"\". $despam_url. \"\\\">Retour au formulaire de d\u00e9part >></a></p>\\n\";\n        echo \"</div>\\n\\n\";\n    }\n} else {\n    echo '<div class=\"alert alert-danger\">Action {{despam}} r\u00e9serv\u00e9e aux administrateurs.</div>';\n}\n"], "fixing_code": ["<?php\n/**\n* WikiNi action allowing to list pages among different ways\n*\n* @version $Id: listpages.php 833 2007-08-10 01:16:57Z gandon $\n* @author Didier Loiseau\n* @copyright 2005   Didier Loiseau\n* @license This program is free software; you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published by\n* the Free Software Foundation; either version 2 of the License, or\n* (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n* @todo tree & levels\n*/\n\n/*\n* Parameters:\n*  - tree: tree display starting at some page\n*       by default: if owner is not specified, the main page\n*           else, the page of the user specified by the owner parameter\n*  - levels: the depth of the tree\n*  - sort: specifies the sorting order; by time, user (last editor), owner or tag (page name)\n*  - owner: if tree is specified, only list pages whose owner is the given user\n*           else, list all pages belonging to the given user\n*  - exclude: list of page that should not be listed (including their descendents)\n*  - user: list all pages to which the given user has taken part\n*    (cannot be combined with tree)\n*/\n\n// retrieve parameters\n$sort = strtolower($this->GetParameter('sort'));\n$tree = $this->GetParameter('tree');\n$levels = (int) $this->GetParameter('levels');\n$max_levels = 7;\n$owner = $this->GetParameter('owner');\n$exclude = $this->GetParameter('exclude');\n$user = $this->GetParameter('user');\n\n// default values\n// use a secure $sort value for MySQL\nif (!in_array($sort, array('time', 'user', 'owner', 'tag'))) {\n    $sort = 'tag';\n}\nif ($owner == 'owner') {\n    $owner = $this->GetPageOwner();\n}\nif (($owner && $sort == 'owner') || ($user && $sort == 'user')) {\n    $sort = 'tag';\n}\nif ($tree == 'tree') {\n    if ($owner) {\n        $tree = $owner;\n    } else {\n        $tree = $this->GetConfigValue('root_page');\n    }\n}\nif ($levels <= 0) {\n    $levels = 3;\n} elseif ($levels > $max_levels) {\n    $levels = $max_levels;\n}\nif ($exclude) {\n    // notice we can addslash() the list before splitting it because escaped character are not separators\n    $exclude = preg_split('/[ ;,\\|]/', addslashes($exclude), -1, PREG_SPLIT_NO_EMPTY);\n} else {\n    $exclude = array();\n}\nif ($user == 'user') {\n    $user = $this->GetPageOwner();\n}\n\n$prefix = $this->GetConfigValue('table_prefix');\n\n// treatment\nif ($tree) {\n    // tree display\n    /* first step: retrieve every pages of the tree:\n     * $links will be built according to the following template:\n     * 'tag' => array(\n     *  'page_exists' => true|false, // whether the page exists (avoids 1 request for each page...)\n     *  'haslinksto'  => array( // list of pages to which this one is linked\n     *      ['tag' => etc.[, ...]] // data are stored in a recursive tree\n     *  )\n     *  [, additionnal info[, ...]] // modification date, owner (+ does he have his own page ?), user (+ idem and is he registered ?)\n     * )\n     */\n    $links = array();\n\n    // informations on the root page\n    switch ($sort) {\n        case 'owner':\n            $sql = 'SELECT a.owner, b.tag IS NOT NULL owner_has_ownpage'\n                . ' FROM ' . $prefix . 'pages a'\n                . ' LEFT JOIN ' . $prefix . 'pages b ON a.owner = b.tag AND b.latest = \"Y\"';\n                break;\n        case 'user':\n            $sql = 'SELECT a.user, u.name IS NOT NULL user_is_registered, b.tag IS NOT NULL user_has_ownpage'\n                . ' FROM ' . $prefix . 'pages a'\n                . ' LEFT JOIN ' . $prefix . 'users u ON a.user = u.name'\n                . ' LEFT JOIN ' . $prefix . 'pages b ON u.name = b.tag AND b.latest = \"Y\"';\n            break;\n        case 'time':\n            $sql = 'SELECT a.time'\n                . ' FROM ' . $prefix . 'pages a';\n            break;\n        case 'tag':\n            $links[$tree] = array();\n    } // switch\n    if ($sort != 'tag') {\n        $sql .= ' WHERE a.tag = \"' . $this->services->get(\\YesWiki\\Core\\Service\\DbService::class)->escape($tree) . '\" AND a.latest = \"Y\" LIMIT 1';\n        if (!$rootData = $this->LoadSingle($sql)) {\n            echo '<div class=\"alert alert-danger\"><strong>'._t('ERROR').' '._t('ACTION').' ListPages</strong> : '._('THE_PAGE').' ' . htmlspecialchars($tree, ENT_COMPAT, YW_CHARSET) . ' '._t('DOESNT_EXIST').' !</div>';\n            return;\n        }\n        $links[$tree] = $rootData;\n    }\n    $links[$tree]['page_exists'] = true;\n    $links[$tree]['haslinksto'] = array();\n    \n    // To simplify treatment and to make it more efficient we'll work by referrence.\n    // This will allow you to do only one request by tree level\n    // $workingon represents every page of the current level\n    $workingon = array($tree => &$links[$tree]['haslinksto']);\n    \n    // to avoid many loops and computing several time the lists needed for the request,\n    // we store them into variables\n    $from = '\"' . $this->services->get(\\YesWiki\\Core\\Service\\DbService::class)->escape($tree) . '\"';\n    $exclude[] = $this->services->get(\\YesWiki\\Core\\Service\\DbService::class)->escape($tree);\n    $exclude_str = '\"' . implode('\", \"', $exclude) . '\"';\n    for ($i = 1; $i <= $levels; $i++) {\n        if ($from) {\n            if ($owner) {\n                $sql = 'SELECT from_tag, to_tag, a.tag IS NOT NULL page_exists'\n                    . ($sort == 'time' ? ', a.time' : '');\n                if ($sort == 'user') {\n                    $sql .= ', a.user, u.name IS NOT NULL user_is_registered, b.tag IS NOT NULL user_has_ownpage'\n                        . ' FROM ' . $prefix . 'links, ' . $prefix . 'pages a'\n                        . ' LEFT JOIN ' . $prefix . 'users u ON a.user = u.name'\n                        . ' LEFT JOIN ' . $prefix . 'pages b ON u.name = b.tag AND b.latest = \"Y\"';\n                } else {\n                    $sql .= ' FROM ' . $prefix . 'links, ' . $prefix . 'pages a';\n                }\n                $sql .= ' WHERE from_tag IN (' . $from . ')'\n                    . ' AND to_tag NOT IN (' . $from . ')'\n                    . ' AND to_tag = a.tag'\n                    . ' AND a.owner = \"' . $this->services->get(\\YesWiki\\Core\\Service\\DbService::class)->escape($owner) . '\"'\n                    . ' AND a.latest = \"Y\"';\n            } else {\n                $sql = 'SELECT from_tag, to_tag, a.tag IS NOT NULL page_exists';\n                switch ($sort) {\n                    case 'owner':\n                        $sql .= ', a.owner, b.tag IS NOT NULL owner_has_ownpage'\n                            . ' FROM ' . $prefix . 'links'\n                            . ' LEFT JOIN ' . $prefix . 'pages a ON to_tag = a.tag AND a.latest = \"Y\"'\n                            . ' LEFT JOIN ' . $prefix . 'pages b ON a.owner = b.tag AND b.latest = \"Y\"';\n                        break;\n                    case 'user':\n                        $sql .= ', a.user, u.name IS NOT NULL user_is_registered, b.tag IS NOT NULL user_has_ownpage'\n                            . ' FROM ' . $prefix . 'links'\n                            . ' LEFT JOIN ' . $prefix . 'pages a ON to_tag = a.tag AND a.latest = \"Y\"'\n                            . ' LEFT JOIN ' . $prefix . 'users u ON a.user = u.name'\n                            . ' LEFT JOIN ' . $prefix . 'pages b ON u.name = b.tag AND b.latest = \"Y\"';\n                        break;\n                    case 'time':\n                        $sql .= ', a.time';\n                        // no break\n                    default:\n                        $sql .= ' FROM ' . $prefix . 'links'\n                            . ' LEFT JOIN ' . $prefix . 'pages a ON to_tag = a.tag AND a.latest = \"Y\"';\n                } // switch\n                $sql .= ' WHERE from_tag IN (' . $from . ')'\n                    . ' AND to_tag NOT IN (' . $exclude_str . ')';\n            }\n        }\n        // result order\n        $sql .= ' ORDER BY ';\n        switch ($sort) {\n            case 'tag':\n                $sql .= 'to_tag';\n                break;\n            case 'owner':\n                // 1) existing pages having an owner, sorted by owner name\n                // 2) existing pages without owner\n                // 3) non-existent pages\n                $sql .= 'a.owner IS NULL, a.owner = \"\", a.owner';\n                break;\n            case 'time':\n                // 1) existing pages, sorted in antechronologic order\n                // 2) non-existent pages\n                $sql .= 'a.time IS NULL, a.time DESC';\n                break;\n            case 'user':\n                // 1) existing pages, sorted by last editor\n                // 2) non-existent pages\n                $sql .= 'a.user IS NULL, a.user';\n                break;\n        } // switch\n        \n        if ($pages = $this->LoadAll($sql)) {\n            $from = '';\n            $newworkingon = array();\n            foreach ($pages as $page) {\n                $to_tag = '\"' . $this->services->get(\\YesWiki\\Core\\Service\\DbService::class)->escape($page['to_tag']) . '\"';\n                $workingon[$page['from_tag']][$page['to_tag']] = array('page_exists' => $page['page_exists'], 'haslinksto' => array());\n                if ($sort != 'tag') {\n                    $workingon[$page['from_tag']][$page['to_tag']][$sort] = $page[$sort];\n                    switch ($sort) {\n                        case 'owner':\n                            $workingon[$page['from_tag']][$page['to_tag']]['owner_has_ownpage'] = $page['owner_has_ownpage'];\n                            break;\n                        case 'user':\n                            $workingon[$page['from_tag']][$page['to_tag']]['user_is_registered'] = $page['user_is_registered'];\n                            $workingon[$page['from_tag']][$page['to_tag']]['user_has_ownpage'] = $page['user_has_ownpage'];\n                            break;\n                    } // switch\n                }\n                if ($page['page_exists']) {\n                    $from .= ($from ? ', ' : '') . $to_tag;\n                    // if several pages link to the same page, only display the tree once\n                    // (for the first appearing time)\n                    if (!isset($newworkingon[$page['to_tag']])) {\n                        $newworkingon[$page['to_tag']] = &$workingon[$page['from_tag']][$page['to_tag']]['haslinksto'];\n                    }\n                }\n                $exclude_str .= ', ' . $to_tag;\n            }\n            if (!$workingon = $newworkingon) {\n                // no page had link to still non-referrenced pages, we can stop here\n                break;\n            }\n        } else {\n            // no page was found at this tree level, we can stop here\n            break;\n        }\n    }\n    \n    // Seccond step: display the tree\n    // this function allows us to render the tree using HTML lists.\n    if (!function_exists('ShowPageTree')) {\n        function ShowPageTree($tree, &$wiki, $show = 'tag', $indent = 0)\n        {\n            if ($tree) {\n                $indentStr = str_repeat(\"\\t\", $indent);\n                $retour =  \"$indentStr<ul>\\n\";\n                foreach ($tree as $pageName => $pageData) {\n                    $retour .= \"$indentStr\\t<li>\";\n                    if ($pageData['page_exists']) {\n                        $retour .= $wiki->ComposeLinkToPage($pageName, false, false, false);\n                        switch ($show) {\n                            case 'owner':\n                                $retour .= ' . . . . '._t('BELONGING_TO').' : ';\n                                if ($pageData['owner']) {\n                                    if ($pageData['owner_has_ownpage']) {\n                                        $retour .= $wiki->ComposeLinkToPage($pageData['owner'], false, false, false);\n                                    } else {\n                                        $retour .= '<span class=\"forced-link missingpage\">' . $pageData['owner'] . '</span>';\n                                        $retour .= $wiki->ComposeLinkToPage($pageData['owner'], 'edit', '?', false);\n                                    }\n                                } else {\n                                    $retour .= _t('UNKNOWN');\n                                }\n                                break;\n                            case 'user':\n                                $retour .= ' . . . . '._t('LAST_CHANGE_BY').' : ';\n                                if ($pageData['user_is_registered']) {\n                                    if ($pageData['user_has_ownpage']) {\n                                        $retour .= $wiki->ComposeLinkToPage($pageData['user'], false, false, false);\n                                    } else {\n                                        $retour .= '<span class=\"forced-link missingpage\">' . $pageData['user'] . '</span>';\n                                        $retour .= $wiki->ComposeLinkToPage($pageData['user'], 'edit', '?', false);\n                                    }\n                                } else {\n                                    $retour .= $pageData['user'];\n                                }\n                                break;\n                            case 'time':\n                                $retour .= ' . . . . '._t('LAST_CHANGE').' : ' . $pageData['time'];\n                                break;\n                        } // switch\n                        if ($pageData['haslinksto']) {\n                            $retour .= \"\\n\";\n                            $retour .= ShowPageTree($pageData['haslinksto'], $wiki, $show, $indent + 2);\n                            $retour .= $indentStr . \"\\t\"; // just put tabs before the </li>\n                        }\n                    } else {\n                        $retour .= '<span class=\"forced-link missingpage\">' . $pageName . '</span>'\n                            . $wiki->ComposeLinkToPage($pageName, 'edit', '?', false);\n                    }\n                    $retour .= \"</li>\\n\";\n                }\n                return \"$retour$indentStr</ul>\\n\";\n            }\n            return '';\n        }\n    }\n    \n    echo ShowPageTree($links, $this, $sort);\n} else {\n    // classical list display\n    // building the request\n    // has_ownpage and user_is_registered avoid us to make requests to know\n    // whether the personnal pages of owners and users exist\n    if ($user) {\n        $sql = 'SELECT a.tag, b.time,\n            b.user, name IS NOT NULL user_is_registered, user_page.tag IS NOT NULL user_has_ownpage'\n            . ($owner ? '' : ', b.owner, owner_page.tag IS NOT NULL owner_has_ownpage')\n            . ' FROM ' . $prefix . 'pages a, ' . $prefix . 'pages b\n            LEFT JOIN ' . $prefix . 'users ON b.user = name\n            LEFT JOIN ' . $prefix . 'pages user_page ON name = user_page.tag AND user_page.latest = \"Y\"'\n            . ($owner ? '' : ' LEFT JOIN ' . $prefix . 'pages owner_page ON b.owner = owner_page.tag AND owner_page.latest = \"Y\"')\n            . ' WHERE a.user = \"' . $this->services->get(\\YesWiki\\Core\\Service\\DbService::class)->escape($user) . '\"'\n            . ' AND a.tag = b.tag AND b.latest = \"Y\"'\n            . ($owner ? ' AND b.owner = \"' . $this->services->get(\\YesWiki\\Core\\Service\\DbService::class)->escape($owner) . '\"' : '');\n    } elseif ($owner) {\n        if ($sort == 'user') {\n            $sql = 'SELECT a.tag, a.time,\n                a.user, name IS NOT NULL user_is_registered, user_page.tag IS NOT NULL user_has_ownpage\n                FROM ' . $prefix . 'pages a\n                LEFT JOIN ' . $prefix . 'users ON a.user = name\n                LEFT JOIN ' . $prefix . 'pages user_page ON name = user_page.tag AND user_page.latest = \"Y\"';\n        } else {\n            $sql = 'SELECT tag, time FROM ' . $prefix . 'pages a';\n        }\n        $sql .= ' WHERE a.owner = \"' . $this->services->get(\\YesWiki\\Core\\Service\\DbService::class)->escape($owner) . '\" AND a.latest = \"Y\"';\n    } else {\n        if ($sort == 'user') {\n            $sql = 'SELECT a.tag, a.owner,\n                owner_page.tag IS NOT NULL owner_has_ownpage,\n                a.user, name IS NOT NULL user_is_registered, user_page.tag IS NOT NULL user_has_ownpage\n                FROM ' . $prefix . 'pages a\n                LEFT JOIN ' . $prefix . 'users ON a.user = name\n\t\tLEFT JOIN ' . $prefix . 'pages user_page ON name = user_page.tag AND user_page.latest = \"Y\"\n\t\tLEFT JOIN ' . $prefix . 'pages owner_page ON a.owner = owner_page.tag AND owner_page.latest = \"Y\"';\n        } else {\n            $sql = 'SELECT a.tag, a.owner, a.time, b.tag IS NOT NULL owner_has_ownpage\n                FROM ' . $prefix . 'pages a\n                LEFT JOIN ' . $prefix . 'pages b ON a.owner = b.tag AND b.latest = \\'Y\\'';\n        }\n        $sql .= ' WHERE a.latest = \"Y\"';\n    }\n    $sql .= ' AND a.comment_on = \"\"';\n    if ($exclude) {\n        $sql .= ' AND a.tag NOT IN (\"' . implode('\", \"', $exclude) . '\")';\n    }\n    if ($user) {\n        $sql .= ' GROUP BY tag';\n        if ($sort == 'owner') {\n            $sql .= ' ORDER BY b.owner = \"\", b.owner';\n        } else {\n            $sql .= ' ORDER BY b.' . $sort;\n        }\n    } elseif ($sort == 'owner') {\n        // this allows to display non existent pages last\n        $sql .= ' ORDER BY a.owner = \"\", a.owner';\n    } else {\n        $sql .= ' ORDER BY a.' . $sort;\n    }\n    \n    // retrieving the pages\n    $pages = $this->LoadAll($sql);\n    \n    // Display\n    // Header\n    if ($user) {\n        echo _t('PAGE_LIST_WHERE').' ' . $this->Format($user) . ' '._t('HAS_PARTICIPATED');\n        if ($owner) {\n            echo ' '._t('INCLUDING').' ' . $this->Link($owner) . ' '._t('IS_THE_OWNER');\n        }\n        if ($exclude) {\n            echo ' ('._t('EXCLUDING_EXCLUSIONS').')';\n        }\n        echo \":\\n\";\n        if (!$pages) {\n            echo \"<br />\\n\"._t('NO_PAGE_FOUND').\"...<br />\\n\";\n            return;\n        }\n    } elseif ($owner) {\n        echo _t('LIST_PAGES_BELONGING_TO').' ' . $this->Link($owner);\n        if ($exclude) {\n            echo ' ('._t('EXCLUDING_EXCLUSIONS').')';\n        }\n        echo \":\\n\";\n        if (!$pages) {\n            echo \"<br />\\n\"._t('THIS_USER_HAS_NO_PAGE').\"...\\n<br />\\n\";\n            return;\n        }\n    } elseif (!$pages) {\n        // because it is still possible...\n        echo _t('NO_PAGE_FOUND').' '._t('IN_THIS_WIKI').' ('._t('EXCLUDING_EXCLUSIONS').')';\n        return;\n    }\n    // No header if it is a simple page list that was asked\n    \n    // Display the list itself\n    echo \"<ul>\\n\";\n    foreach ($pages as $page) {\n        echo \"\\t<li>\" . $this->ComposeLinkToPage($page['tag'], false, false, false);\n        if (!$owner) {\n            echo ' . . . . ';\n            if ($page['owner']) {\n                if ($page['owner_has_ownpage']) {\n                    echo $this->ComposeLinkToPage($page['owner'], false, false, false);\n                } else {\n                    echo '<span class=\"forced-link missingpage\">' . $page['owner'] . '</span>';\n                    echo $this->ComposeLinkToPage($page['owner'], 'edit', '?', false);\n                }\n            } else {\n                echo _t('UNKNOWN');\n            }\n        }\n        if ($sort == 'user' || $sort == 'time') {\n            echo '  . . . . <strong>'._t('LAST_CHANGE').'</strong>';\n            if ($sort == 'time') {\n                echo ': ' . $page['time'];\n            }\n            if ($sort == 'user' || ($user && $sort == 'time')) {\n                echo ' <strong>'._t('BY').'</strong> ';\n                if ($page['user_is_registered']) {\n                    if ($page['user_has_ownpage']) {\n                        echo $this->ComposeLinkToPage($page['user'], false, false, false);\n                    } else {\n                        echo '<span class=\"forced-link missingpage\">' . $page['user'] . '</span>';\n                        echo $this->ComposeLinkToPage($page['user'], 'edit', '?', false);\n                    }\n                } else {\n                    echo htmlspecialchars($page['user'], ENT_COMPAT, YW_CHARSET);\n                }\n            }\n        }\n        echo \"</li>\\n\";\n    }\n    echo \"</ul>\\n\";\n}\n", "<?php\n/**\n * Adaptation de l'action textsearch & newtextsearch de wikini pour Yeswiki\n * Copyright (c) 2002, Hendrik Mans <hendrik@mans.de>\n * Copyright 2002, 2003 David DELON\n * Copyright 2002  Patrick PAUL\n * Copyright 2004  Jean Christophe ANDR\u00e9\n * Copyright 2004  Nicephore17\n * Copyright 2019  XF75013\n * 08/02/2019 - v1.0 initial release\n * INFORMATION D'UTILISATION\n * Utilisation {{newtextsearch}} en lieu eet place de {{textsearch}}\n **/\n\n use YesWiki\\Bazar\\Controller\\EntryController;\n use YesWiki\\Bazar\\Service\\EntryManager;\n use YesWiki\\Bazar\\Service\\FormManager;\n use YesWiki\\Bazar\\Service\\SearchManager;\n\n // On r\u00e9cup\u00e9re ou initialise toutes le varible comme pour textsearch\n// label \u00e0 afficher devant la zone de saisie\n$label = $this->GetParameter('label', _t('WHAT_YOU_SEARCH').'&nbsp;: ');\n// largeur de la zone de saisie\n$size = $this->GetParameter('size', '40');\n// texte du bouton\n$button = $this->GetParameter('button', _t('SEARCH'));\n// texte \u00e0 chercher\n$phrase = $this->GetParameter('phrase', false);\n// s\u00e9parateur entre les \u00e9l\u00e9ments trouv\u00e9s\n$separator = $this->GetParameter('separator', false);\n// prefixe des tables pour ce wiki\n$prefixe = $this->config['table_prefix'];\n// prefixe des tables pour ce wiki\n$user = $this->GetUser();\n// nombre de pages dont on affiche une partie du contenu\n$maxDisplayedPages = 25;\n\n\n$entryController = $this->services->get(EntryController::class);\n$entryManager = $this->services->get(EntryManager::class);\n\n// se souvenir si c'\u00e9tait :\n// -- un param\u00e9tre de l'action : {{textsearch phrase=\"Test\"}}\n// -- ou du CGI http://example.org/wakka.php?wiki=RechercheTexte&phrase=Test\n//\n// r\u00e9cup\u00e9rer le param\u00e9tre de l'action\n$paramPhrase = htmlspecialchars($phrase, ENT_COMPAT, YW_CHARSET);\n// ou, le cas \u00e9ch\u00e9ant, r\u00e9cup\u00e9rer le param\u00e9tre du CGI\nif (!$phrase && isset($_GET['phrase'])) {\n    $phrase = htmlspecialchars($_GET['phrase'], ENT_COMPAT, YW_CHARSET);\n}\n\n// s'il y a un param\u00e9tre d'action \"phrase\", on affiche uniquement le r\u00e9sultat\n// dans le cas contraire, pr\u00e9senter une zone de saisie\nif (!$paramPhrase) {\n    echo $this->FormOpen('', '', 'get');\n    echo '<div class=\"input-prepend input-append input-group input-group-lg\">\n          <span class=\"add-on input-group-addon\"><i class=\"fa fa-search icon-search\"></i></span>\n          <input name=\"phrase\" type=\"text\" class=\"form-control\" placeholder=\"'.(($label) ? $label : '').'\" size=\"', $size, '\" value=\"', $phrase, '\" >\n          <span class=\"input-group-btn\">\n          <input type=\"submit\" class=\"btn btn-primary btn-lg\" value=\"', $button, '\" />\n          </span>\n          </div>\n          <span class=\"\">\n          <small>Un caract&eacute;re inconnu peut &ecirc;tre remplac&eacute; par \u00ab ? \u00bb plusieurs par \u00ab * \u00bb</small>\n          </span><!-- /input-group --><br>';\n    echo \"\\n\", $this->FormClose();\n}\n\nif (!function_exists('displayNewSearchResult')) {\n    /* fonction n\u00e9cessaire \u00e0 l'affichage en contexte */\n    function displayNewSearchResult($string, $phrase, $needles = [])\n    {\n        $string = strip_tags($string);\n        $query = trim(str_replace(array(\"+\",\"?\",\"*\"), array(\" \",\" \",\" \"), $phrase));\n        $qt = explode(\" \", $query);\n        $num = count($qt);\n        $cc = ceil(154 / $num);\n        $string_re = '';\n        foreach ($needles as $needle => $result) {\n            if (preg_match('/'.$needle.'/i', $string, $matches)) {\n                $tab = preg_split(\"/(\".$matches[0].\")/iu\", $string, 2, PREG_SPLIT_DELIM_CAPTURE);\n                if (count($tab)>1) {\n                    $avant = strip_tags(mb_substr($tab[0], -$cc, $cc));\n                    $apres = strip_tags(mb_substr($tab[2], 0, $cc));\n                    $string_re .= '<p style=\"margin-top:0;margin-left:1rem;\"><i style=\"color:silver;\">[\u2026]</i>' . $avant . '<b>' . $tab[1] . '</b>' . $apres . '<i style=\"color:silver;\">[\u2026]</i></p> ';\n                }\n            }\n        }\n        if (empty($string_re)) {\n            for ($i = 0; $i < $num; $i++) {\n                $tab[$i] = preg_split(\"/($qt[$i])/iu\", $string, 2, PREG_SPLIT_DELIM_CAPTURE);\n                if (count($tab[$i])>1) {\n                    $avant[$i] = strip_tags(mb_substr($tab[$i][0], -$cc, $cc));\n                    $apres[$i] = strip_tags(mb_substr($tab[$i][2], 0, $cc));\n                    $string_re .= '<p style=\"margin-top:0;margin-left:1rem;\"><i style=\"color:silver;\">[\u2026]</i>' . $avant[$i] . '<b>' . $tab[$i][1] . '</b>' . $apres[$i] . '<i style=\"color:silver;\">[\u2026]</i></p> ';\n                }\n            }\n        }\n        return $string_re;\n    }\n}\n\n// lancement de la recherche\nif ($phrase) {\n    // extract needles with values in list\n    // find in values for entries\n    $formManager = $this->services->get(FormManager::class);\n    $forms = $formManager->getAll();\n    $searchManager = $this->services->get(SearchManager::class);\n    $needles = $searchManager->searchWithLists(str_replace(array('*', '?'), array('', '_'), $phrase), $forms);\n    $requeteSQLForList = '';\n    if (!empty($needles)) {\n        $first = true;\n        // generate search\n        foreach ($needles as $needle => $results) {\n            if (!empty($results)) {\n                if ($first) {\n                    $first = false;\n                } else {\n                    $requeteSQLForList .= ' AND ';\n                }\n                $requeteSQLForList .= '(';\n                // add regexp standard search\n                $requeteSQLForList .= 'body REGEXP \\''.$needle.'\\'';\n                // add search in list\n                // $results is an array not empty only if list\n                foreach ($results as $result) {\n                    $requeteSQLForList .= ' OR ';\n                    if (!$result['isCheckBox']) {\n                        $requeteSQLForList .= ' body LIKE \\'%\"'.str_replace('_', '\\\\_', $result['propertyName']).'\":\"'.$result['key'].'\"%\\'';\n                    } else {\n                        $requeteSQLForList .= ' body REGEXP \\'\"'.str_replace('_', '\\\\_', $result['propertyName']).'\":(' .\n                            '\"'.$result['key'] . '\"'.\n                            '|\"[^\"]*,' . $result['key'] . '\"'.\n                            '|\"' . $result['key'] . ',[^\"]*\"'.\n                            '|\"[^\"]*,' .$result['key'] . ',[^\"]*\"'.\n                            ')\\'';\n                    }\n                }\n                $requeteSQLForList .= ')';\n            }\n        }\n    }\n    if (!empty($requeteSQLForList)) {\n        $requeteSQLForList = ' OR ('.$requeteSQLForList.') ';\n    }\n    \n    // Modification de caract\u00e8re sp\u00e9ciaux\n    $phraseFormatted= str_replace(array('*', '?'), array('%', '_'), $phrase);\n    $phraseFormatted = $this->services->get(\\YesWiki\\Core\\Service\\DbService::class)->escape($phraseFormatted);\n\n    // Blablabla SQL\n    $requestfull = 'SELECT body, tag FROM '.$prefixe.'pages\n                  LEFT JOIN '.$prefixe.'acls ON tag = page_tag AND privilege = \"read\"\n                  WHERE latest = \"Y\"\n                  AND ( list IS NULL OR list =\"*\" '.\n                  ($user ? 'OR owner = \"'.$user['name'].'\" OR list = \"+\" OR (list NOT LIKE \"%!'.$user['name'].'%\" AND list LIKE \"%'.$user['name'].'\")':'').')'.\n                  // TODO retrouver la facon d'afficher les commentaires (AFFICHER_COMMENTAIRES ? '':'AND tag NOT LIKE \"comment%\"').\n                  ' AND body LIKE \"%' . $phraseFormatted . '%\"'.$requeteSQLForList.'\n                  GROUP BY tag ORDER BY tag LIMIT 100';\n\n    // ex\u00e9cution de la requete\n    if ($resultat = $this->LoadAll($requestfull)) {\n        if ($GLOBALS['js']) {\n            $js = $GLOBALS['js'];\n        } else {\n            $js = '';\n        }\n        // affichage des resultats\n\n        // affichage des r\u00e9sultats en liste\n        if (empty($separator)) {\n            echo $this->Format('---- --- **R\u00e9sultats de la recherche [\"\"'.$phrase.'\"\"] :---**');\n            echo('<ol>');\n            $counter = 0;\n            foreach ($resultat as $i => $page) {\n                if ($this->HasAccess(\"read\", $page[\"tag\"])) {\n                    $lien = $this->ComposeLinkToPage($page[\"tag\"]);\n                    echo '<li><h4 style=\"margin-bottom:0.2rem;\">', $lien, \"</h4>\";\n                    $extract= '';\n                    if ($counter < $maxDisplayedPages) {\n                        if ($entryManager->isEntry($page[\"tag\"])) {\n                            $renderedEntry = $entryController->view($page[\"tag\"], '', false); // without footer\n                            $extract = displayNewSearchResult($renderedEntry, $phrase, $needles);\n                        }\n                        if (empty($extract)) {\n                            $extract = displayNewSearchResult($this->Format($page[\"body\"], 'wakka', $page[\"tag\"]), $phrase, $needles);\n                        }\n                        $counter += 1;\n                    }\n                    echo $extract.\"</li>\\n\";\n                }\n            }\n            echo('</ol>');\n\n        // affichage des r\u00e9sultats en ligne\n        } else {\n            $separator = htmlspecialchars($separator, ENT_COMPAT, YW_CHARSET);\n            echo '<p>'._t('SEARCH_RESULT_OF').' \"', htmlspecialchars($phrase, ENT_COMPAT, YW_CHARSET), '\"&nbsp;: ';\n            foreach ($resultat as $i => $line) {\n                if ($this->HasAccess(\"read\", $line[\"tag\"])) {\n                    echo((($i>0) ? $separator:'').$this->ComposeLinkToPage($line['tag']));\n                }\n            }\n            echo '</p>', \"\\n\";\n        }\n        $GLOBALS['js'] = $js;\n    } else {\n        echo $this->Format('---- --- **D\u00e9sol\u00e9 mais il n\\'y a aucun de r\u00e9sultat pour votre recherche.**');\n    }\n}\n", "<?php\nnamespace YesWiki;\n\nuse YesWiki\\Core\\Service\\DbService;\nuse YesWiki\\Core\\Service\\TripleStore;\nuse YesWiki\\Security\\Controller\\SecurityController;\n\nclass User\n{\n    // Obviously needs a group or ACLS class. In the meantime, use of $this->wiki->GetGroupACL and so on\n\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PROPERTIES ~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n    // User properties (cf database)\n    // The case is, on purpose, similar to the one in the database\n    protected $properties = [\n        'name' => '',\n        'password' => '', // MD5 encrypted or not (retrieved from DB => encrypted)\n        'email' => '',\n        'motto' => '',\n        'revisioncount' => '',\n        'changescount' => '',\n        'doubleclickedit' => '',\n        'show_comments' => '',\n    ];\n    // End of user properties (cf database)\n\n    public $error = '';\n    protected $wiki = ''; // give access to the main wiki object\n    protected $usersTable = '';\n    protected $nameMaxLength = 80;\n    protected $emailMaxLength = 254;\n    protected $passwordMinimumLength = 5;\n\n    protected $keyVocabulary = 'http://outils-reseaux.org/_vocabulary/key';\n\n    protected $securityController;\n    protected $dbService;\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~ END OF PROPERTIES ~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n\n    public function __construct($wiki)\n    {\n        $this->wiki = $wiki;\n        $this->initUsersTable();\n        $this->initLimitations();\n        $this->dbService = $this->wiki->services->get(DbService::class);\n        $this->securityController = $this->wiki->services->get(SecurityController::class);\n    }\n\n    /* ~~~~~~~~~~~~~~~~~~~~~~ SETS PROPERTY METHODS ~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n    /** Tells if the user who actually runs the wiki session is admin\n     *\n     * @param none\n     *\n     * @return boolean True if the user who actually runs the session is admin, false otherwise.\n     */\n    protected function runnerIsAdmin()\n    {\n        return $this->wiki->UserIsAdmin();\n    }\n\n    /** Sets the users table name\n     *\n     * In some cases, multiple wikis share a unique users table.\n     * This unique users table prefix is the one specified in config.\n     * Therefore we must build $this->userstable using\n     * - this unique users table prefix if specified,\n     *   or\n     * - the wiki default table prefix\n     *\n     * @param none\n     *\n     * @return void\n     */\n    protected function initUsersTable()\n    {\n        // Set value of MySQL user table name\n        if (!empty($this->wiki->config['user_table_prefix'])) {\n            $usersTablePrefix =  $this->wiki->config['user_table_prefix'];\n        } else {\n            $usersTablePrefix =  $this->wiki->config['table_prefix'];\n        }\n        $this->usersTable =  $usersTablePrefix.'users';\n    }\n    \n    /** Initializes object limitation properties using values from the config file\n     *\n     * Initialiezd properties are:\n     * - $this->nameMaxLength (default value = 80)\n     * - $this->emailMaxLength (default value = 254)\n     * - $this->passwordMinimumLength (default value = 5)\n     *\n     * @param none\n     *\n     * @return void\n     */\n    protected function initLimitations()\n    {\n        if (!empty($this->wiki->config['user_name_max_length'])) {\n            if (filter_var($this->wiki->config['user_name_max_length'], FILTER_VALIDATE_INT)) {\n                $this->nameMaxLength = $this->wiki->config['user_name_max_length'];\n            } else {\n                $this->error = _t('USER_NAME_MAX_LENGTH_NOT_INT');\n            }\n        }\n        if (!empty($this->wiki->config['user_email_max_length'])) {\n            if (filter_var($this->wiki->config['user_email_max_length'], FILTER_VALIDATE_INT)) {\n                $this->emailMaxLength = $this->wiki->config['user_email_max_length'];\n            } else {\n                $this->error = _t('USER_EMAIL_MAX_LENGTH_NOT_INT');\n            }\n        }\n        if (!empty($this->wiki->config['user_password_min_length'])) {\n            if (filter_var($this->wiki->config['user_password_min_length'], FILTER_VALIDATE_INT)) {\n                $this->passwordMinimumLength = $this->wiki->config['user_password_min_length'];\n            } else {\n                $this->error = _t('USER_PASSWORD_MIN_LENGTH_NOT_INT');\n            }\n        }\n    }\n    /* ~~~~~~~~~~~~~~~~~~ END OF SETS PROPERTY METHODS ~~~~~~~~~~~~~~~~~~~~~ */\n\n    /* ~~~~~~~~~~~~~PROPERTY ACCESS METHODS~~~~~~~~~~~~~~~~~~~ */\n\n    public function checkProperty($propertyName, $newValue, $confValue = '')\n    {\n        $result = false;\n        $newValue = trim($newValue);\n        switch ($propertyName) {\n            case 'name':\n                $result = $this->checkName($newValue);\n                break;\n            case 'email':\n                $result = $this->checkEmail($newValue);\n                break;\n            case 'password':\n                $result = $this->checkPassword($newValue, $confValue);\n                break;\n            case 'revisioncount':\n            case 'changescount':\n                $newValue = intval($newValue);\n                if (empty($newValue) || !filter_var($newValue, FILTER_VALIDATE_INT) || $newValue < 0) {\n                    $this->error = _t('USER_YOU_MUST_SPECIFY_A_POSITIVE_INTEGER_FOR').' '.$propertyName.'.';\n                } else {\n                    $result = true;\n                }\n                break;\n            case 'show_comments':\n            case 'doubleclickedit':\n                $value = strtolower($newValue);\n                if (!in_array($value, ['o', 'oui', 'y', 'yes', 'n', 'non', 'no', '0', '1'])) {\n                    $this->error = _t('USER_YOU_MUST_SPECIFY_YES_OR_NO').' '.$propertyName.'.';\n                } else {\n                    $result = true;\n                }\n                break;\n            default:\n                $result = !empty($newValue);\n        }\n        return $result;\n    }\n\n\n    /** Sets a given property to a given value\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $propertyName Name of the property to set.\n     * @param string $newValue Value to set the property with.\n     * @param string $confValue optional Only used when property name egals 'password'. Confirmation value of the password.\n     * @return boolean true if worked all right and false otherwise\n     */\n    public function setProperty($propertyName, $newValue, $confValue = '')\n    {\n        $this->error ='';\n        $newValue = trim($newValue);\n        if ($this->checkProperty($propertyName, $newValue, $confValue)) {\n            switch ($propertyName) {\n                case 'password':\n                    if (!empty($confValue)) {\n                        $OK = $this->passwordIsCorrect($newValue, $confValue);\n                    } else {\n                        $OK = $this->passwordIsCorrect($newValue);\n                    } // $result is true if password IS correct and $this->error contains error if any\n                    if ($OK) { // password is correct\n                        $newValue = MD5($newValue);\n                    }\n                    break;\n                case 'revisioncount':\n                case 'changescount':\n                    $newValue = intval($newValue);\n                    break;\n                case 'show_comments':\n                case 'doubleclickedit':\n                    $value = strtolower($newValue);\n                    if (in_array($value, ['o', 'oui', 'y', 'yes', '1'])) {\n                        $newValue = 'Y';\n                    } else {\n                        $newValue = 'N';\n                    }\n                    break;\n            }\n            $this->properties[$propertyName] = $newValue;\n            $result = true;\n        } else {\n            $result = false;\n        }\n        return $result;\n    }\n\n    /**\n    * Gets the value of a given property\n    *\n    * @param string $propertyName Name of the property from which the value is retrieved.\n    * @return mixed The property value (string) or false in case of failure.\n    */\n    public function getProperty($propertyName)\n    {\n        if (isset($this->properties[$propertyName])) {\n            return $this->properties[$propertyName];\n        } else {\n            return false;\n        }\n    }\n\n    /** Checks if a value is fit for name property.\n     *\n     * Name must be set and its lenght must be less than nameMaxLength characters\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $newName\n     * @return boolean True if OK or false if any problems\n     */\n    protected function checkName($newName)\n    {\n        $this->error = '';\n        $result = false;\n        if (empty($newName)) {\n            $this->error = _t('USER_YOU_MUST_SPECIFY_A_NAME').'.';\n        } elseif (strlen($newName) > $this->nameMaxLength) {\n            $this->error = _t('USER_NAME_S_MAXIMUM_LENGTH_IS').' '.$this->nameMaxLength.'.';\n        } elseif (preg_match('/[!#@<>\\\\\\\\\\/][^<>\\\\\\\\\\/]{2,}/', $newName)) {\n            $this->error = _t('USER_THIS_IS_NOT_A_VALID_NAME').'.';\n        } else {\n            $result = true;\n        }\n        return $result;\n    }\n\n    /** Checks if a value is fit for email property.\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $newEmail\n     * @return boolean True if OK or false if any problems\n     */\n    protected function checkEmail($newEmail)\n    {\n        // NOTE: Can we change name ?\n        $this->error ='';\n        $result = false;\n        if (empty($newEmail)) {\n            $this->error = _t('USER_YOU_MUST_SPECIFY_AN_EMAIL').'.';\n        } elseif ($newEmail == $this->properties['email']) { // if email is the current user's email\n            $result = true;\n        } elseif ($this->emailExistsInDB($newEmail)) {\n            $this->error = _t('USER_THIS_EMAIL_IS_ALLREADY_USED_ON_THIS_WIKI').'.';\n        } elseif (strlen($newEmail) > $this->emailMaxLength) {\n            $this->error = _t('USER_EMAIL_S_MAXIMUM_LENGTH_IS').' '.$this->emailMaxLength.'.';\n        } elseif (!filter_var($newEmail, FILTER_VALIDATE_EMAIL)) {\n            $this->error = _t('USER_THIS_IS_NOT_A_VALID_EMAIL').'.';\n        } else {\n            $result = true;\n        }\n        return $result;\n    }\n\n    /** sets user properties using an associative array\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @param string[] $newValues Associative array containing object property values\n     *  $newValues = Array(\n     *      ['name'] \t\t\t=> string()\tOptional\n     *      ['email']\t \t\t=> string()\tOptional\n     *      ['password']\t\t=> string()\tOptional\n     *      ['motto']\t\t\t=> string()\tOptional\n     *      ['revisioncount']\t=> integer()Optional\n     *      ['changescount']\t=> integer()Optional\n     *      ['doubleclickedit'] => string()\tOptional\n     *      ['show_comments']\t=> string()\tOptional\n     *      )\n     * @return boolean True if OK or false if any problems\n    */\n    public function setByAssociativeArray($newValues)\n    {\n        $this->error = '';\n        $error = [];\n        $result = true;\n        if (isset($newValues['name']) && (trim($newValues['name']) != '')) {\n            if (!$this->setProperty('name', $newValues['name'])) {\n                $result = false;\n                $error[] = $this->error;\n            }\n        }\n        if (isset($newValues['email']) && (trim($newValues['email']) != '')) {\n            if (!$this->setProperty('email', $newValues['email'])) {\n                $result = false;\n                $error[] = $this->error;\n            }\n        }\n        if (isset($newValues['password']) && (trim($newValues['password']) != '')) {\n            if (!$this->setProperty('password', $newValues['password'], isset($_POST['confpassword']) ? '1' : '')) {\n                $result = false;\n                $error[]= $this->error;\n            }\n        }\n        if (isset($newValues['motto']) && trim($newValues['motto']) != '') {\n            $this->setProperty('motto', $newValues['motto']);\n        }\n        if (isset($newValues['revisioncount']) && (trim($newValues['revisioncount']) != '')) {\n            if (!$this->setProperty('revisioncount', $newValues['revisioncount'])) {\n                $result = false;\n                $error[] = $this->error;\n            }\n        }\n        if (isset($newValues['changescount']) && (trim($newValues['changescount']) != '')) {\n            if (!$this->setProperty('changescount', $newValues['changescount'])) {\n                $result = false;\n                $error[] = $this->error;\n            }\n        }\n        if (isset($newValues['doubleclickedit']) && (trim($newValues['doubleclickedit']) != '')) {\n            $this->setProperty('doubleclickedit', $newValues['doubleclickedit']);\n        }\n        if (isset($newValues['show_comments']) && (trim($newValues['show_comments']) != '')) {\n            $this->setProperty('show_comments', $newValues['show_comments']);\n        }\n        if (count($error) > 0) {\n            $this->error = '<strong>'._t('USER_ERRORS_FOUND').'</strong> :'.\"\\n\"\n              .'<ul><li>'.implode('</li><li>', $error).'</li></ul>'.\"\\n\";\n        }\n        return $result;\n    }\n\n    /**\tgets every user properties and put them into an associative array\n     *\n     * If parameter $format is set to 'array', then returns an associative array:\n     *  Array(\n     *      ['name'] \t\t\t=> string()\tOptional\n     *      ['email']\t \t\t=> string()\tOptional\n     *      ['password']\t\t=> string()\tOptional\n     *      ['motto']\t\t\t=> string()\tOptional\n     *      ['revisioncount']\t=> integer()Optional\n     *      ['changescount']\t=> integer()Optional\n     *      ['doubleclickedit'] => string()\tOptional\n     *      ['show_comments']\t=> string()\tOptional\n     *      )\n     *\n     * @param string $format optional describes the type of return (array by default or json)\n     * @return mixed An array or a json depending on parameter value\n    */\n    public function getAllProperties($format = 'array')\n    {\n        if ($format == 'array') {\n            return $this->properties;\n        } elseif ($format == 'json') {\n            return json_encode($this->properties);\n        }\n    }\n    /* ~~~~~~~~~~~~~~~~~~ END OF PROPERTY ACCESS METHODS ~~~~~~~~~~~~~~~~~~~ */\n\n    /* ~~~~~~~~~~~~~~~~~~~~~ PASSWORD HANDLING METHODS ~~~~~~~~~~~~~~~~~~~~~ */\n\n    /** checks if the given string is the user's password\n     *\n     * @param string $pwd The password to check\n     * @return boolean True if OK or false if any problems\n     */\n    public function checkPassword($pwd, $newUser = '')\n    {\n        if (empty($newUser) && $this->properties['password'] !== md5($pwd)) {\n            $this->error = _t('USER_WRONG_PASSWORD').' !';\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\tChecks if the given password complies with the rules\n     *\n     * BEWARE returns true or false the other way around from other functions\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $pwd the password to check\n     * @param string $confPassword optional The confirmation password if any\n     * @return boolean True if the password is not compliant or false if the password looks good\n     *       True\n     *           If the password is not compliant, ie\n     *               contains spaces\n     *               is too short ($passwordMinimumLength defines the minimum length)\n     *           If $confPasswordis is set and different from $pwd\n     *           $this->error contains the error message\n     *       False\n     *           if the password looks good\n     */\n    public function passwordIsCorrect($pwd, $confPassword = '')\n    {\n        $correct = true;\n        if (isset($confPassword) && (trim($confPassword) !='')) {\n            if ($confPassword !== $pwd) {\n                $this->error = _t('USER_PASSWORDS_NOT_IDENTICAL').'.';\n                $correct = false;\n            }\n        }\n        if (strlen($pwd) < $this->passwordMinimumLength) {\n            $this->error = _t('USER_PASSWORD_TOO_SHORT').'. '._t('USER_PASSWORD_MINIMUM_NUMBER_OF_CHARACTERS_IS').' ' .$this->passwordMinimumLength.'.';\n            $correct = false;\n        }\n        return $correct;\n    }\n\n    /* Password recovery process (AKA reset password)\n            1. A key is generated using name, email alongside with other stuff.\n            2. The triple (user's name, specific key \"vocabulary\",key) is stored in triples table.\n            3. In order to update h\u00b7er\u00b7is password, the user must provided that key.\n            4. The new password is accepted only if the key matches with the value in triples table.\n            5. The corresponding row is removed from triples table.\n    */\n\n    /** Part of the Password recovery process: Handles the password recovery email process\n     *\n     * Generates the password recovery key\n     * Stores the (name, vocabulary, key) triple in triples table\n     * Generates the recovery email\n     * Sends it\n     *\n     * @return boolean True if OK or false if any problems\n     */\n    public function sendPasswordRecoveryEmail()\n    {\n        // Generate the password recovery key\n        $key = md5($this->properties['name'] . '_' . $this->properties['email'] . rand(0, 10000) . date('Y-m-d H:i:s') . PW_SALT);\n        // Erase the previous triples in the trible table\n        $this->wiki->services->get(TripleStore::class)->delete($this->properties['name'], $this->keyVocabulary, null, '', '') ;\n        // Store the (name, vocabulary, key) triple in triples table\n        $res = $this->wiki->services->get(TripleStore::class)->create($this->properties['name'], $this->keyVocabulary, $key, '', '');\n\n        // Generate the recovery email\n        $passwordLink = $this->wiki->Href() . (($this->wiki->config['rewrite_mode'] ?? false) ? '?' : '&').'a=recover&email=' . $key . '&u=' . urlencode(base64_encode($this->properties['name']));\n        $pieces = parse_url($this->wiki->GetConfigValue('base_url'));\n        $domain = isset($pieces['host']) ? $pieces['host'] : '';\n\n        $message = _t('LOGIN_DEAR').' ' . $this->properties['name'] . \",\\n\";\n        $message .= _t('LOGIN_CLICK_FOLLOWING_LINK').' :' . \"\\n\";\n        $message .= '-----------------------' . \"\\n\";\n        $message .= $passwordLink . \"\\n\";\n        $message .= '-----------------------' . \"\\n\";\n        $message .= _t('LOGIN_THE_TEAM').' ' . $domain . \"\\n\";\n\n        $subject = _t('LOGIN_PASSWORD_LOST_FOR').' ' . $domain;\n        // Send the email\n        if (!function_exists('send_mail')) {\n            require_once('includes/email.inc.php');\n        }\n        return send_mail($this->wiki->config['BAZ_ADRESSE_MAIL_ADMIN'], $this->wiki->config['BAZ_ADRESSE_MAIL_ADMIN'], $this->properties['email'], $subject, $message);\n    }\n\n    /** Part of the Password recovery process: sets the password to a new value if given the the proper recovery key (sent in a recovery email).\n     *\n     * In order to update h\u00b7er\u00b7is password, the user provides a key (sent using sendPasswordRecoveryEmail())\n     * The new password is accepted only if the key matches with the value in triples table.\n     * The corresponding row is the removed from triples table.\n     * See Password recovery process above\n     * replaces updateUserPassword($userID, $password, $key) from login.functions.php\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $user The user login\n     * @param string $key The password recovery key (sent by email)\n     * @param string $pwd the new password value\n     * @param string $confPassword optional The confirmation password if any\n     *\n     * @return boolean True if OK or false if any problems\n    */\n    public function resetPassword($user, $key, $password, $confPassword='')\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        $this->error = '';\n        if ($this->checkEmailKey($key, $user) === false) { // The password recovery key does not match\n            $this->error = _t('USER_INCORRECT_PASSWORD_KEY').'.';\n            $OK = false;\n        } else { // The password recovery key matches\n            if (isset($confPassword) && ($confPassword != '')) {\n                $OK = $this->updatePassword($password, $confPassword);\n            } else {\n                $OK = $this->updatePassword($password);\n            }\n            if ($OK) {// Was able to update password => Remove the key from triples table\n                $res = $this->wiki->DeleteTriple($user, 'http://outils-reseaux.org/_vocabulary/key', $key, '', '');\n            }\n        }\n        return $OK;\n    }\n\n    /** Part of the Password recovery process: Checks the provided key against the value stored for the provided user in triples table\n     *\n     * As part of the Password recovery process, a key is generated and stored as part of a (user, $this->keyVocabulary, key) triple in the triples table. This function checks wether the key is right or not.\n     * See Password recovery process above\n     * replaces checkEmailKey($hash, $key) from login.functions.php\n     *         TODO : Add error handling\n     * @param string $hash The key to check\n     * @param string $user The user for whom we check the key\n     *\n     * @return boolean True if success and false otherwise.\n    */\n    public function checkEmailKey($hash, $user): bool\n    {\n        // Pas de detournement possible car utilisation de _vocabulary/key ....\n        return !is_null($this->wiki->services->get(TripleStore::class)->exist($user, 'http://outils-reseaux.org/_vocabulary/key', $hash, '', ''));\n    }\n    /* End of Password recovery process (AKA reset password)   */\n\n    /** Normal change of password (requested via the usersettings page)\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $password the new password value\n     * @param string $confPassword optional The confirmation password if any\n     *\n     * @return boolean True if OK or false if any problems\n     */\n    public function updatePassword($password, $confPassword='')\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        $this->error = '';\n        if (isset($confPassword) && ($confPassword != '')) {\n            $OK = $this->passwordIsCorrect($password, $confPassword);\n        } else {\n            $OK = $this->passwordIsCorrect($password);\n        } // $result is true if password IS correct and $this->error contains error if any\n        if ($OK) { // password is correct\n            // Update user's password\n            $sql\t= 'UPDATE '.$this->usersTable;\n            $sql .= ' SET password = \"'.MD5($password).'\" ';\n            $sql .= 'WHERE name = \"'.$this->dbService->escape($this->properties['name']).'\" LIMIT 1;';\n            $OK = $this->wiki->query($sql); // true or false depending on the query execution\n            if ($OK) {\n                $this->properties['password'] = md5($password);\n            } else {\n                $this->error = _t('USER_PASSWORD_UPDATE_FAILED').'.';\n            }\n        }\n        return $OK;\n    }\n    /* ~~~~~~~~~~~~~~~~~ END OF PASSWORD HANDLING METHODS ~~~~~~~~~~~~~~~~~~ */\n\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~ WEB SESSION METHODS ~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n    /** Sets the http session and the cookie\n     *\n     * For a user to be logged in requires:\n     * -\ta corresponding http session record\n     *     (ie containing the database row converted to an associative array)\n     * -\ta cookie set to the corresponding name and password\n     * Replaces $wiki->SetUser\n     *         // TODO: Error handling\n     *\n     * @param int $remember sets the cookie duration (0 means \"ends with the session\")\n    */\n    public function logIn($remember = 0)\n    {\n        $_SESSION['user'] = array(\n            'name'\t\t\t\t=> $this->properties['name'],\n            'password'\t\t\t=> $this->properties['password'],\n            'email'\t\t\t\t=> $this->properties['email'],\n            'motto'\t\t\t\t=> $this->properties['motto'],\n            'revisioncount' \t=> $this->properties['revisioncount'],\n            'changescount'\t\t=> $this->properties['changescount'],\n            'doubleclickedit'\t=> $this->properties['doubleclickedit'],\n            'show_comments' \t=> $this->properties['show_comments'],\n        );\n        $this->wiki->setPersistentCookie('name', $this->properties['name'], $remember);\n        $this->wiki->setPersistentCookie('password', $this->properties['password'], $remember);\n        $this->wiki->setPersistentCookie('remember', $remember, $remember);\n    }\n\n    /** Deletes the http session and cookie\n     *\n     * To log a user out, we:\n     *  -\tdelete the corresponding http session record\n     *  -\tdelete the cookie set to the corresponding name and password\n     * In case of failure $this->error contains the error message\n     * Replaces $wiki->logOut()\n     *\n     * @return boolean True if OK or false if any problems\n    */\n    public function logOut()\n    {\n        $OK = true;\n        if (!isset($_SESSION['user'])) { // No one is logged in\n            $this->error = _t('USER_NOT_LOGGED_IN_CANT_LOG_OUT').'.';\n            $OK = false;\n        }\n        if ($OK && !$this->isRunner()) { // The user who actually runs this session is not $user. Don't want to log the wrong one out\n            $this->error = _t('USER_TRYING_TO_LOG_WRONG_USER_OUT').'.';\n            $OK = false;\n        }\n        if ($OK) {\n            $_SESSION['user'] = '';\n            $this->wiki->session->deleteCookie('name');\n            $this->wiki->session->deleteCookie('password');\n            $this->wiki->session->deleteCookie('remember');\n            $OK = true;\n        }\n        return $OK;\n    }\n\n    /** Loads user's ($this) properties from session cookie\n     *\n     * @return boolean True if OK or false if any problems\n    */\n    public function loadFromSession()\n    {\n        if (isset($_SESSION['user']) && $_SESSION['user'] != '') {\n            $this->properties['name']\t\t\t= $_SESSION['user']['name'];\n            $this->properties['password']\t\t= $_SESSION['user']['password'];\n            $this->properties['email']\t\t\t= $_SESSION['user']['email'];\n            $this->properties['motto']\t\t\t= $_SESSION['user']['motto'];\n            $this->properties['revisioncount']\t= $_SESSION['user']['revisioncount'];\n            $this->properties['changescount']\t= $_SESSION['user']['changescount'];\n            $this->properties['doubleclickedit']= $_SESSION['user']['doubleclickedit'];\n            $this->properties['show_comments']\t= $_SESSION['user']['show_comments'];\n            $result = true;\n        } else {\n            $result = false;\n        }\n        return $result;\n    }\n    /* ~~~~~~~~~~~~~~~~~~~~ END OF WEB SESSION METHODS ~~~~~~~~~~~~~~~~~~~~~ */\n\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~ DATABASE METHODS ~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n    /**\tCreates  into database user table the row correponding to the user object ($this)\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @return boolean true if worked all right and false otherwise\n    */\n    public function createIntoDB()\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        $this->error = '';\n        $result = false;\n        $sql = 'INSERT INTO `'.$this->usersTable.'` SET '.\n            'signuptime = now(), '.\n            'name = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['name']).'\", '.\n            'email = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['email']).'\", '.\n            'password = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['password']).'\"'; // has already been md5ed.\n        if (isset($this->properties['motto'])) {\n            $sql .= ', motto = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['motto']).'\"';\n        }\n        if (isset($this->properties['revisioncount'])) {\n            $sql .= ', revisioncount = \"'.$this->properties['revisioncount'].'\"';\n        }\n        if (isset($this->properties['changescount'])) {\n            $sql .= ', changescount = \"'.$this->properties['changescount'].'\"';\n        }\n        if (isset($this->properties['doubleclickedit'])) {\n            $sql .= ', doubleclickedit = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['doubleclickedit']).'\"';\n        }\n        if (isset($this->properties['show_comments'])) {\n            $sql .= ', show_comments = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['show_comments']).'\"';\n        }\n        $sql .= ';';\n        $queryResult = $this->wiki->query($sql);\n        if ($queryResult) {\n            $result = true;\n        } else {\n            $this->error = _t('USER_CREATION_FAILED').'.';\n        }\n        return $result;\n    }\n\n    /**\tPopulates the user object's properties ($this->properties[]) from the database record.\n     *\n     * Uses user's name to retrieve the user.\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $name The name of the user to retrieve\n     * @param string $password optional The user's password\n     *\n     * @return boolean true if worked all right and false otherwise\n   */\n    public function loadByNameFromDB($name, $password = 0)\n    {\n        $this->error = '';\n        $sql = 'SELECT * FROM '.$this->usersTable.' WHERE name = \"'.mysqli_real_escape_string($this->wiki->dblink, $name).'\" ';\n        if ($password == 0) {\n            $sql .= '';\n        } else { // If password has been specified\n            $sql .= 'AND password = MD5(\"'.mysqli_real_escape_string($this->wiki->dblink, $password).'\")';\n        }\n        $sql .= ' LIMIT 1;'; // fetches the first corresponding line, and only that one\n        $row = $this->wiki->loadSingle($sql);\n        if ($row) {\n            $this->properties['name']\t\t\t= $row['name'];\n            $this->properties['password']\t\t= $row['password'];\n            $this->properties['email']\t\t\t= $row['email'];\n            $this->properties['motto']\t\t\t= $row['motto'];\n            $this->properties['revisioncount']\t= $row['revisioncount'];\n            $this->properties['changescount']\t= $row['changescount'];\n            $this->properties['doubleclickedit']= $row['doubleclickedit'];\n            $this->properties['show_comments']\t= $row['show_comments'];\n            $result = true;\n        } elseif ($row === false) {\n            // TODO never called ?\n            $this->error = _t('USER_LOAD_BY_NAME_QUERY_FAILED').'.';\n            $result = false;\n        } else {\n            $this->error = _t('USER_NO_USER_WITH_THAT_NAME').'.';\n            $result = false;\n        }\n        return $result;\n    }\n\n    /**\tPopulates the user object's properties ($this->properties[]) from the database record.\n     *\n     * Uses user's email to retrieve the user.\n     * In case of failure $this->error contains the error message\n     *\n     * @param string $email The email of the user to retrieve\n     * @param string $password optional The user's password\n     *\n     * @return boolean true if worked all right and false otherwise\n   */\n    public function loadByEmailFromDB($email, $password = 0)\n    {\n        $this->error = '';\n        $sql = 'SELECT * FROM '.$this->usersTable.' WHERE email = \"'.mysqli_real_escape_string($this->wiki->dblink, $email).'\" ';\n        if ($password == 0) {\n            $sql .= '';\n        } else { // If password has been specified\n            $sql .= 'AND password = MD5(\"' . mysqli_real_escape_string($this->wiki->dblink, $password) . '\")';\n        }\n        $sql .= ' LIMIT 1;'; // fetches the first corresponding line, and only that one\n        $row = $this->wiki->loadSingle($sql);\n        if ($row) {\n            $this->properties['name']\t\t\t\t= $row['name'];\n            $this->properties['password']\t\t\t= $row['password'];\n            $this->properties['email']\t\t\t\t= $row['email'];\n            $this->properties['motto']\t\t\t\t= $row['motto'];\n            $this->properties['revisioncount']\t\t= $row['revisioncount'];\n            $this->properties['changescount']\t\t= $row['changescount'];\n            $this->properties['doubleclickedit']  \t= $row['doubleclickedit'];\n            $this->properties['show_comments']\t\t= $row['show_comments'];\n            $result = true;\n        } elseif ($row === false) {\n            // TODO never called ?\n            $this->error = _t('USER_LOAD_BY_EMAIL_QUERY_FAILED').'.';\n            $result = false;\n        } else {\n            $this->error = _t('USER_NO_USER_WITH_THAT_EMAIL').'.';\n            $result = false;\n        }\n        return $result;\n    }\n\n    /**\tUpdates the row corresponding to the user in the database.\n     *\n     * BEWARE * You cannot modify password using that fonction, use updatePassword() instead.\n     * In case of failure $this->error contains the error message\n     *\n     * @param string fieldsToUpdate lists the fields to update in the DB using $this properties. Values are comma separated i.e.: 'motto, changescount'\n     *\n     * @return boolean true if worked all right and false otherwise\n   */\n    public function updateIntoDB($fieldsToUpdate = '')\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        // NOTE: Can we update name ?\n        $this->error = '';\n        $fieldsTab = array_map('trim', explode(',', $fieldsToUpdate));\n        if ((count($fieldsTab) == 0) || ((count($fieldsTab) == 1) && ($fieldsTab[0] == ''))) { // Obviously empty => Then we update all but name and pwd\n            $fieldsTab = array(\n                'email',\n                'motto',\n                'revisioncount',\n                'changescount',\n                'doubleclickedit',\n                'show_comments',\n            );\n        }\n        $prefixe = false;\n        $setClause ='';\n        foreach ($fieldsTab as $field) {\n            switch ($field) {\n                case 'email':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' email = \"'.$this->properties['email'].'\"';\n                    $prefixe = true;\n                    break;\n                case 'motto':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' motto = \"'.$this->properties['motto'].'\"';\n                    $prefixe = true;\n                    break;\n                case 'revisioncount':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' revisioncount = \"'.$this->properties['revisioncount'].'\"';\n                    $prefixe = true;\n                    break;\n                case 'changescount':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' changescount = \"'.$this->properties['changescount'].'\"';\n                    $prefixe = true;\n                    break;\n                case 'doubleclickedit':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' doubleclickedit = \"'.$this->properties['doubleclickedit'].'\"';\n                    $prefixe = true;\n                    break;\n                case 'show_comments':\n                    if ($prefixe) {\n                        $setClause .= ',';\n                    }\n                    $setClause .= ' show_comments = \"'.$this->properties['show_comments'].'\"';\n                    $prefixe = true;\n                    break;\n            } //End switch\n        } // End foreach\n        if ($prefixe) { // At least one field to update\n            $sql = 'UPDATE '.$this->usersTable.' SET '.$setClause;\n            $sql .= ' WHERE name = \"'.mysqli_real_escape_string($this->wiki->dblink, $this->properties['name']).'\" LIMIT 1;';\n            $result = $this->wiki->query($sql);\n            if ($result) {\n                $error = '';\n            } else {\n                $this->error = _t('USER_UPDATE_QUERY_FAILED').'.';\n                $result = false;\n            }\n        } else {\n            $this->error = _t('USER_UPDATE_MISSPELLED_PROPERTIES').'.';\n            $result = false;\n        }\n        return $result;\n    }\n\n    /*\tNOTE: Doesn't make any sense in a user class (singular)\n        code comes from tools/login/libs/login.class.inc.php\n        and should stay there for the time being\n    public function loadUsers()\n    {\n         return $this->wiki->loadAll(\"select * from \" . $this->usersTable . \" order by name\");\n    }\n    */\n\n    /** Deletes the user from the wiki.\n     *\n     * Only Admins can delete a user and can't delete themselves.\n     * Users are not only a row in users database table. They also may appear in groups and as owners of pages.\n     * If the user is the only member of at least one group, an error is raised and the deletion is not performed.\n     * Otherwise,\n     * - The user is removed from every group\n     * - The ownership of each page owned by this user is set to NULL\n     * - The user row is deleted from user table\n     *\n     * In case of failure $this->error contains the error message\n     *\n     * @return boolean true if worked all right and false otherwise\n    */\n    public function delete()\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        $this->error = '';\n        $OK = true;\n        if (!$this->runnerIsAdmin()) { // actual user is not admin\n            $this->error = _t('USER_MUST_BE_ADMIN_TO_DELETE').'.';\n            $OK = false;\n        }\n        if ($this->isRunner()) { // actual user is trying to delete oneself\n            $this->error = _t('USER_CANT_DELETE_ONESELF').'.';\n            $OK = false;\n        }\n\n        if ($OK) {\n            $grouptab = $this->listGroupMemberships(); // All the groups with this user in\n            foreach ($grouptab as $group) {\n                $groupmembers = $this->wiki->GetGroupACL($group);\n                $groupmembers = explode('\\n', $groupmembers);\n                $groupmembers = array_map('trim', $groupmembers);\n                if (count($groupmembers) == 1) { // Only one user in (this user then)\n                    $this->error = _t('USER_DELETE_LONE_MEMBER_OF_GROUP').'.';\n                    //\t\t\t\t$this->error .= 'La suppression de cet utilisateur est impossible car c\\'est l\\'unique membre du groupe @'.$group.'. Fa\u00eetes en sorte que ce ne soit plus le cas avant de tenter \u00e0 nouveau de le supprimer.';\n                    $OK = false;\n                }\n            }\n            if ($OK) {\n                // Delete user in every group\n                $triplesTable = $this->wiki->config['table_prefix'].'triples';\n                $searched_value = '%' . $this->dbService->escape($this->properties['name']) . '%';\n                $seek_value_bf = '' . $this->dbService->escape($this->properties['name']) . '\\n'; // username to delete can be followed by another username\n                $seek_value_af = '\\n' . $this->dbService->escape($this->properties['name']); // username to delete can follow another username\n                // get rid of this username everytime it's followed by another\n                $sql  = 'UPDATE '.$triplesTable.'';\n                $sql .= ' SET value = REPLACE(value, \"'.$seek_value_bf.'\", \"\")';\n                $sql .= ' WHERE resource LIKE \"'.GROUP_PREFIX.'%\" and value LIKE \"'.$searched_value.'\";';\n                $OK = $this->wiki->query($sql);\n                if (!$OK) {\n                    $this->error = _t('USER_DELETE_QUERY_FAILED').'.';\n                }\n                // in the remaining get rid of this username everytime it follows another\n                if ($OK) {\n                    $sql  = 'UPDATE `'.$triplesTable.'`';\n                    $sql .= ' SET `value` = REPLACE(`value`, \"'.$seek_value_af.'\", \"\")';\n                    $sql .= ' WHERE `resource` LIKE \"'.GROUP_PREFIX.'%\" and `value` LIKE \"'.$searched_value.'\";';\n                    $OK = $this->wiki->query($sql);\n                    if (!$OK) {\n                        $this->error = _t('USER_DELETE_QUERY_FAILED').'.';\n                    }\n                }\n                // For each page belonging to the user, set the ownership to null\n                if ($OK) {\n                    $pagesTable =$this->wiki->config['table_prefix'].'pages';\n                    $sql = 'UPDATE `'.$pagesTable.'`';\n                    // $sql .= ' SET `owner` = NULL';\n                    $sql .= ' SET `owner` = \"\" ';\n                    $sql .= ' WHERE `owner` = \"'.$this->dbService->escape($this->properties['name']).'\";';\n                    $OK = $this->wiki->query($sql);\n                    if (!$OK) {\n                        $this->error = _t('USER_DELETE_QUERY_FAILED').'.';\n                    }\n                }\n                // Delete the user row from the user table\n                if ($OK) {\n                    $sql = 'DELETE FROM `'.$this->usersTable.'`';\n                    $sql .= ' WHERE `name` = \"'.$this->dbService->escape($this->properties['name']).'\";';\n                    $OK = $this->wiki->query($sql);\n                    if (!$OK) {\n                        $this->error = _t('USER_DELETE_QUERY_FAILED').'.';\n                    }\n                }\n            }\n        }\n        return $OK;\n    }\n    /* ~~~~~~~~~~~~~~~~~~~~~ END OF DATABASE METHODS ~~~~~~~~~~~~~~~~~~~~~~~ */\n\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~ INFO METHODS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n\n    /** Tells if $this user is the one who actually runs this wiki session.\n     *\n     * @return boolean True if $user is the one who actually runs this wiki session. False otherwise\n    */\n    public function isRunner()\n    {\n        if (!empty($_SESSION['user']) && isset($this->properties['name']) && ($_SESSION['user']['name'] == $this->properties['name'])) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /** Tells if $this user is member of @admins group.\n     *\n     * @return boolean True if $user is member of @admins group. False otherwise\n    */\n    public function isAdmin()\n    {\n        return $this->isInGroup(ADMIN_GROUP);\n    }\n\n    /** Tells if the database user table contains users with that email.\n     *\n     * @param string $email The email to look for in the DB\n     *\n     * @return string[] Array of user names (ie true) or, if no matches, an empty array (ie false)\n    */\n    protected function emailExistsInDB($email)\n    {\n        /* Build sql query*/\n        $sql  = 'SELECT * FROM '.$this->usersTable;\n        $sql .= ' WHERE email = \"'.mysqli_real_escape_string($this->wiki->dblink,$email).'\";';\n        /* Execute query */\n        $results = $this->wiki->loadAll($sql);\n        return $results; // If the password does not already exist in DB, $result is an empty table => false\n    }\n\n    /** Tells if $this user is member of the specified group.\n     *\n     * @param string $groupName The name of the group for wich we are testing membership\n     *\n     * @return boolean True if the $this user is member of $groupName, false otherwise\n    */\n    public function isInGroup($groupName)\n    {\n        //\tpublic function UserIsInGroup($group, $user = null, $admincheck = true)\n        return $this->wiki->CheckACL($this->wiki->GetGroupACL($groupName), $this->properties['name'], false);\n    }\n\n    /** Lists the groups $this user is member of\n     *\n     * @return string[] An array of group names\n    */\n    public function listGroupMemberships()\n    {\n        /* Build sql query*/\n        $triplesTable = $this->wiki->config['table_prefix'].'triples';\n        $sql  = 'SELECT resource FROM '.$triplesTable;\n        $sql .= ' WHERE resource LIKE \"'.GROUP_PREFIX.'%\"';\n        $sql .= ' AND property LIKE \"'.WIKINI_VOC_ACLS_URI.'\"';\n        $sql .= ' AND value LIKE \"%'.$this->dbService->escape($this->properties['name']).'%\";';\n        /* Execute query */\n        $results = array();\n        if ($groups = $this->wiki->loadAll($sql)) {\n            foreach ($variable as $key => $groupName) {\n                $results[] = ltrim($groupName, \"@ \\t\\n\\r\\0\\xOB\");\n            }\n            return $results;\n        } else {\n            $error = _t('USER_LISTGROUPMEMBERSHIPS_QUERY_FAILED').'.';\n            return $error;\n        }\n    }\n    /* ~~~~~~~~~~~~~~~~~~~~~~~ END OF INFO METHODS ~~~~~~~~~~~~~~~~~~~~~~~~~ */\n} //end User class\n", "<?php\n\nnamespace YesWiki\\Bazar\\Service;\n\nuse Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBagInterface;\nuse YesWiki\\Bazar\\Field\\BazarField;\nuse YesWiki\\Bazar\\Field\\CheckboxEntryField;\nuse YesWiki\\Bazar\\Field\\EnumField;\nuse YesWiki\\Bazar\\Field\\SelectEntryField;\nuse YesWiki\\Core\\Service\\DbService;\nuse YesWiki\\Security\\Controller\\SecurityController;\nuse YesWiki\\Wiki;\n\nclass FormManager\n{\n    protected $wiki;\n    protected $dbService;\n    protected $entryManager;\n    protected $securityController;\n    protected $fieldFactory;\n    protected $params;\n\n    protected $cachedForms;\n\n    public function __construct(\n        Wiki $wiki,\n        DbService $dbService,\n        EntryManager $entryManager,\n        FieldFactory $fieldFactory,\n        ParameterBagInterface $params,\n        SecurityController $securityController\n    ) {\n        $this->wiki = $wiki;\n        $this->dbService = $dbService;\n        $this->entryManager = $entryManager;\n        $this->fieldFactory = $fieldFactory;\n        $this->params = $params;\n\n        $this->cachedForms = [];\n        $this->securityController = $securityController;\n    }\n\n    public function getOne($formId): ?array\n    {\n        if (isset($this->cachedForms[$formId])) {\n            return $this->cachedForms[$formId];\n        }\n\n        $form = $this->dbService->loadSingle('SELECT * FROM ' . $this->dbService->prefixTable('nature') . 'WHERE bn_id_nature=\\'' . $this->dbService->escape($formId) . '\\'');\n\n        if (!$form) {\n            return null;\n        }\n\n        foreach ($form as $key => $value) {\n            $form[$key] = _convert($value, 'ISO-8859-15');\n        }\n\n        $form['template'] = $this->parseTemplate($form['bn_template']);\n        $form['prepared'] = $this->prepareData($form);\n\n        $this->cachedForms[$formId] = $form;\n\n        return $form;\n    }\n\n    public function getAll(): array\n    {\n        $forms = $this->dbService->loadAll('SELECT * FROM ' . $this->dbService->prefixTable('nature') . 'ORDER BY bn_label_nature ASC');\n\n        foreach ($forms as $form) {\n            $formId = $form['bn_id_nature'];\n            $this->cachedForms[$formId] = $this->getOne($formId);\n        }\n        // TODO verify this method : each form is written with the same key in the array\n\n        return $this->cachedForms;\n    }\n\n    public function getMany($formsIds): array\n    {\n        $results = [];\n\n        foreach ($formsIds as $formId) {\n            if (empty($this->cachedForms[$formId])) {\n                $this->cachedForms[$formId] = $this->getOne($formId);\n            }\n            $results[$formId] = $this->cachedForms[$formId];\n        }\n\n        return $results;\n    }\n\n    // TODO Pass a Form object instead of a raw array\n    public function create($data)\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        // If ID is not set or if it is already used, find a new ID\n        if (!$data['bn_id_nature'] || $this->getOne($data['bn_id_nature'])) {\n            $data['bn_id_nature'] = $this->findNewId();\n        }\n\n        return $this->dbService->query('INSERT INTO ' . $this->dbService->prefixTable('nature')\n            . '(`bn_id_nature` ,`bn_ce_i18n` ,`bn_label_nature` ,`bn_template` ,`bn_description` ,`bn_sem_context` ,`bn_sem_type` ,`bn_sem_use_template` ,`bn_condition`)'\n            . ' VALUES (' . $data['bn_id_nature'] . ', \"fr-FR\", \"'\n            . $this->dbService->escape(_convert($data['bn_label_nature'], YW_CHARSET, true)) . '\",\"'\n            . $this->dbService->escape(_convert($data['bn_template'], YW_CHARSET, true)) . '\", \"'\n            . $this->dbService->escape(_convert($data['bn_description'], YW_CHARSET, true)) . '\", \"'\n            . $this->dbService->escape(_convert($data['bn_sem_context'], YW_CHARSET, true)) . '\", \"'\n            . $this->dbService->escape(_convert($data['bn_sem_type'], YW_CHARSET, true)) . '\", '\n            . (isset($data['bn_sem_use_template']) ? '1' : '0') . ', \"'\n            . $this->dbService->escape(_convert($data['bn_condition'], YW_CHARSET, true)) . '\")');\n    }\n\n    public function update($data)\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        return $this->dbService->query('UPDATE' . $this->dbService->prefixTable('nature') . 'SET '\n            . '`bn_label_nature`=\"' . $this->dbService->escape(_convert($data['bn_label_nature'], YW_CHARSET, true)) . '\" ,'\n            . '`bn_template`=\"' . $this->dbService->escape(_convert($data['bn_template'], YW_CHARSET, true)) . '\" ,'\n            . '`bn_description`=\"' . $this->dbService->escape(_convert($data['bn_description'], YW_CHARSET, true)) . '\" ,'\n            . '`bn_sem_context`=\"' . $this->dbService->escape(_convert($data['bn_sem_context'], YW_CHARSET, true)) . '\" ,'\n            . '`bn_sem_type`=\"' . $this->dbService->escape(_convert($data['bn_sem_type'], YW_CHARSET, true)) . '\" ,'\n            . '`bn_sem_use_template`=' . (isset($data['bn_sem_use_template']) ? '1' : '0') . ' ,'\n            . '`bn_condition`=\"' . $this->dbService->escape(_convert($data['bn_condition'], YW_CHARSET, true)) . '\"'\n            . ' WHERE `bn_id_nature`=' . $this->dbService->escape($data['bn_id_nature']));\n    }\n\n    public function clone($id)\n    {\n        $data = $this->getOne($id);\n        if (!empty($data)) {\n            unset($data['bn_id_nature']);\n            $data['bn_label_nature'] = $data['bn_label_nature'].' ('._t('BAZ_DUPLICATE').')';\n            return $this->create($data);\n        } else {\n            // raise error?\n            return false;\n        }\n    }\n\n    public function delete($id)\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n\n        // tests of if $formId is int\n        if (strval(intval($id)) != strval($id)) {\n            return null ;\n        }\n\n        $this->clear($id);\n        return $this->dbService->query('DELETE FROM ' . $this->dbService->prefixTable('nature') . 'WHERE bn_id_nature=' . $this->dbService->escape($id));\n    }\n\n    public function clear($id)\n    {\n        if ($this->securityController->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        $this->dbService->query(\n            'DELETE FROM' . $this->dbService->prefixTable('acls') .\n            'WHERE page_tag IN (SELECT tag FROM ' . $this->dbService->prefixTable('pages') .\n            'WHERE tag IN (SELECT resource FROM ' . $this->dbService->prefixTable('triples') .\n            'WHERE property=\"http://outils-reseaux.org/_vocabulary/type\" AND value=\"fiche_bazar\") AND body LIKE \\'%\"id_typeannonce\":\"' . $this->dbService->escape($id) . '\"%\\' );'\n        );\n\n        // TODO use PageManager\n        $this->dbService->query(\n            'DELETE FROM' . $this->dbService->prefixTable('pages') .\n            'WHERE tag IN (SELECT resource FROM ' . $this->dbService->prefixTable('triples') .\n            'WHERE property=\"http://outils-reseaux.org/_vocabulary/type\" AND value=\"fiche_bazar\") AND body LIKE \\'%\"id_typeannonce\":\"' . $this->dbService->escape($id) . '\"%\\';'\n        );\n\n        // TODO use TripleStore\n        $this->dbService->query(\n            'DELETE FROM' . $this->dbService->prefixTable('triples') .\n            'WHERE resource NOT IN (SELECT tag FROM ' . $this->dbService->prefixTable('pages') .\n            'WHERE 1) AND property=\"http://outils-reseaux.org/_vocabulary/type\" AND value=\"fiche_bazar\";'\n        );\n    }\n\n    public function findNewId()\n    {\n        $result = $this->dbService->loadSingle('SELECT MAX(bn_id_nature) AS maxi FROM ' . $this->dbService->prefixTable('nature') . 'where bn_id_nature < 1000');\n\n        if (!$result['maxi']) {\n            return 1;\n        }\n        if ($result['maxi'] < 999) {\n            return $result['maxi'] + 1;\n        }\n\n        $result = $this->dbService->loadSingle('SELECT MAX(bn_id_nature) AS maxi FROM' . $this->dbService->prefixTable('nature') . ' where bn_id_nature > 10000');\n\n        if (!$result['maxi']) {\n            return 10001;\n        } else {\n            return $result['maxi'] + 1;\n        }\n    }\n\n    /**\n     * D\u00e9coupe le template et renvoie un tableau structur\u00e9\n     *\n     * @param string  Template du formulaire\n     * @return  mixed   Le tableau des elements du formulaire et options pour l'element liste\n     */\n    public function parseTemplate($raw)\n    {\n        //Parcours du template, pour mettre les champs du formulaire avec leurs valeurs specifiques\n        $tableau_template = array();\n        $nblignes = 0;\n\n        //on traite le template ligne par ligne\n        $chaine = explode(\"\\n\", $raw);\n        foreach ($chaine as $ligne) {\n            $ligne = trim($ligne);\n            // on ignore les lignes vides ou commencant par # (commentaire)\n            if (!empty($ligne) && !(strrpos($ligne, '#', -strlen($ligne)) !== false)) {\n                //on decoupe chaque ligne par le separateur *** (c'est historique)\n                $tablignechampsformulaire = array_map(\"trim\", explode(\"***\", $ligne));\n\n                // TODO find another way to check that the field is valid\n                if (true /*function_exists($tablignechampsformulaire[self::FIELD_TYPE])*/) {\n                    if (count($tablignechampsformulaire) > 3) {\n                        $tableau_template[$nblignes] = $tablignechampsformulaire;\n                        for ($i = 0; $i < 16; $i++) {\n                            if (!isset($tableau_template[$nblignes][$i])) {\n                                $tableau_template[$nblignes][$i] = '';\n                            }\n                        }\n\n                        $nblignes++;\n                    }\n                }\n            }\n        }\n\n        return $tableau_template;\n    }\n\n    public function prepareData($form)\n    {\n        $i = 0;\n        $prepared = $result = [];\n\n        $form['template'] = _convert($form['template'], 'ISO-8859-15');\n\n        foreach ($form['template'] as $field) {\n            $classField = $this->fieldFactory->create($field);\n\n            if ($classField) {\n                $prepared[$i] = $classField;\n            } elseif (function_exists($field[0])) {\n                $functionName = $field[0];\n                $field[0] = 'old'; // field name\n                $field['functionName'] = $functionName ;\n                $classField = $this->fieldFactory->create($field);\n                if ($classField) {\n                    $prepared[$i] = $classField;\n                }\n            }\n            $i++;\n        }\n        return $prepared;\n    }\n\n    public function scanAllFacettable($entries, $groups = ['all'], $onlyLists = false)\n    {\n        $facetteValue = $fields = [];\n\n        foreach ($entries as $entry) {\n            $form = $this->getOne($entry['id_typeannonce']);\n\n            // on filtre pour n'avoir que les liste, checkbox, listefiche ou checkboxfiche\n            $fields[$entry['id_typeannonce']] = isset($fields[$entry['id_typeannonce']])\n                ? $fields[$entry['id_typeannonce']]\n                : $this->filterFieldsByPropertyName($form['prepared'], $groups);\n\n            foreach ($entry as $key => $value) {\n                $facetteasked = (isset($groups[0]) && $groups[0] == 'all') || in_array($key, $groups);\n\n                if (!empty($value) and is_array($fields[$entry['id_typeannonce']]) && $facetteasked) {\n                    $filteredFields = $this->filterFieldsByPropertyName($fields[$entry['id_typeannonce']], [$key]);\n                    $field = array_pop($filteredFields);\n\n                    $fieldPropName = null;\n                    if ($field instanceof BazarField) {\n                        $fieldPropName = $field->getPropertyName();\n                        $fieldType = $field->getType();\n                    }\n\n                    if ($fieldPropName) {\n                        if ($field instanceof EnumField) {\n                            if ($field instanceof SelectEntryField || $field instanceof CheckboxEntryField) {\n                                // listefiche ou checkboxfiche\n                                $facetteValue[$fieldPropName]['type'] = 'fiche';\n                            } else {\n                                $facetteValue[$fieldPropName]['type'] = 'liste';\n                            }\n\n                            $facetteValue[$fieldPropName]['source'] = $key;\n\n                            $tabval = explode(',', $value);\n                            foreach ($tabval as $tval) {\n                                if (isset($facetteValue[$fieldPropName][$tval])) {\n                                    ++$facetteValue[$fieldPropName][$tval];\n                                } else {\n                                    $facetteValue[$fieldPropName][$tval] = 1;\n                                }\n                            }\n                        } elseif (!$onlyLists) {\n                            // texte\n                            $facetteValue[$key]['type'] = 'form';\n                            $facetteValue[$key]['source'] = $key;\n                            if (isset($facetteValue[$key][$value])) {\n                                ++$facetteValue[$key][$value];\n                            } else {\n                                $facetteValue[$key][$value] = 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return $facetteValue;\n    }\n\n    /*\n     * Filter an array of fields by their potential entry ID\n     */\n    private function filterFieldsByPropertyName(array $fields, array $id)\n    {\n        if (count($id)===1 && $id[0]==='all') {\n            return array_filter($fields, function ($field) use ($id) {\n                if ($field instanceof EnumField) {\n                    return true;\n                }\n            });\n        } else {\n            return array_filter($fields, function ($field) use ($id) {\n                if ($field instanceof BazarField) {\n                    return $id[0] === 'all' || in_array($field->getPropertyName(), $id);\n                }\n            });\n        }\n    }\n\n    /**\n     * put a form form External Wiki in cache\n     * @param int $localFormId\n     * @return bool\n     */\n    public function putInCacheFromExternalBazarService(int $localFormId): bool\n    {\n        if (empty($localFormId) || !empty($this->getOne($localFormId))) {\n            // error\n            return false;\n        }\n        $form = $this->wiki->services->get(ExternalBazarService::class)->getTmpForm();\n        if (empty($form)) {\n            return false;\n        } else {\n            $this->cachedForms[$localFormId] = $form;\n            return true;\n        }\n    }\n\n    /**\n     * return field from field name or property name\n     * @param null|string $name\n     * @param null|string $formId\n     * @return null|BazarField\n     */\n    public function findFieldFromNameOrPropertyName(?string $name, ?string $formId): ?BazarField\n    {\n        // check params\n        if (empty($name) || empty($formId) || strval(intval($formId)) != strval($formId)) {\n            return null;\n        }\n\n        $form = $this->getOne($formId);\n        if (empty($form) || !is_array($form['prepared'])) {\n            return null;\n        }\n\n        foreach ($form['prepared'] as $field) {\n            if (in_array($name, [$field->getName(),$field->getPropertyName()])) {\n                return $field;\n            }\n        }\n        return null;\n    }\n}\n", "<?php\n\nuse YesWiki\\Security\\Controller\\SecurityController;\n\n// Charles Nepote 2005-2006\n// Didier Loiseau 2005\n// License GPL.\n// Version 0.7.3 du 10/04/2006 a 23:37.\n\n// TODO\n// -- case pour selectionner tout\n// -- attention au cas ou la version mais aussi la page est effacee\n//   (cf. handler deletepage) (et les commentaires)\n// -- ne rien loguer si rien n'a ete efface\n// -- idealement la derniere page affiche les resultats mais ne renettoie\n//    pas les pages si elle est rechargee\n// -- test pour savoir si quelque chose a bien ete efface\n\nif (!defined(\"WIKINI_VERSION\")) {\n    die(\"acc&egrave;s direct interdit\");\n}\n\n$despam_url = $this->href('', $this->GetPageTag());\n\n\n// -- (1) Formulaire d'accueil de l'action -------------------------------\n//\n// Le formulaire est affiche si aucun spammer n'a encore \u00e9t\u00e9 pr\u00e9cis\u00e9 ou\n// si le champ a \u00e9t\u00e9 laisse vide et valid\u00e9\n\n\n// Action r\u00e9serv\u00e9e aux admins\nif ($this->UserIsAdmin()) {\n    if (empty($_POST['spammer']) && empty($_POST['from']) && !isset($_POST['clean'])) {\n        echo \"<div class=\\\"action_erasespam\\\">\\n\" .\n            \"<form method=\\\"post\\\" action=\\\"\". $despam_url . \"\\\" name=\\\"selection\\\">\\n\".\n            \"<fieldset>\\n\".\n            \"<legend>S&eacute;lection des pages</legend>\\n\";\n        echo \"<p>\\n\".\n          \"Toutes les modifications depuis \".\n          \"<select name=\\\"from\\\">\\n\".\n          \"<option selected=\\\"selected\\\" value=\\\"1\\\">depuis 1 heure</option>\\n\".\n          \"<option value=\\\"3\\\">depuis 3 heures</option>\\n\".\n          \"<option value=\\\"6\\\">depuis 6 heures</option>\\n\".\n          \"<option value=\\\"12\\\">depuis 12 heures</option>\\n\".\n          \"<option value=\\\"24\\\">depuis 24 heures</option>\\n\".\n          \"<option value=\\\"48\\\">depuis 48 heures</option>\\n\".\n          \"<option value=\\\"168\\\">depuis 1 semaine</option>\\n\".\n          \"<option value=\\\"336\\\">depuis 2 semaines</option>\\n\".\n          \"<option value=\\\"744\\\">depuis 1 mois</option>\\n\".\n          \"</select>\\n\".\n          \"<button name=\\\"2\\\" value=\\\"Valider\\\">Valider</button>\\n\".\n          \"</p>\\n\";\n        echo \"</fieldset>\\n\".\n          \"</form>\\n\".\n          \"</div>\\n\\n\";\n    } elseif (!isset($_POST['clean'])) {\n        // -- (2) Page de resultats et form. de selection des pages a effacer ----\n        //\n        if (isset($_POST['from']) && isset($_POST['2'])) {\n            $requete =\n              \"select *\n              from \".$this->config[\"table_prefix\"].\"pages\n              where\n              time > date_sub(now(), interval \" . $this->services->get(\\YesWiki\\Core\\Service\\DbService::class)->escape($_POST['from']) . \" hour)\n              and latest = 'Y'\n              order by `time` desc\";\n            $title =\n              \"<h2>Nettoyage des pages vandalis\u00e9es depuis \" .\n              $_POST['from'] . \" heure(s)</h2>\\n\";\n        }\n        //echo $requete;\n        $pagesFromSpammer = $this->LoadAll($requete);\n        // Affichage des pages pour validation\n        echo \"<div class=\\\"action_erasespam\\\">\\n\";\n        echo $title;\n        echo \"<form method=\\\"post\\\" action=\\\"\". $despam_url . \"\\\">\\n\";\n        echo \"<table>\\n\";\n        foreach ($pagesFromSpammer as $i => $page) {\n            $req = \"select * from \".$this->config[\"table_prefix\"].\"pages where tag = '\"\n                .mysqli_real_escape_string($this->dblink, $page[\"tag\"])\n                .\"' order by time desc\";\n            $revisions = $this->LoadAll($req);\n\n            echo \"<tr>\\n\".\n              \"<td>\".\n              $page[\"tag\"]. \" \".\n              \"(\". $page[\"time\"]. \") \".\n                \" par \". $page['user'] . \" \".\n              \"</td>\\n\";\n            echo \"<td>\".\n              \"<input name=\\\"suppr[]\\\" value=\\\"\" . $page[\"tag\"] . \"\\\" type=\\\"checkbox\\\" /> [Suppr.!]\".\n              \"</td>\\n\";\n            echo \"<td>\\n\";\n            echo \"<p>\";\n            echo \"_____________________________________________________________________________________________________\";\n            echo \"<p>\";\n\n\n\n            foreach ($revisions as $revision) {\n                // Si c'est la derniere version on saute cette iteration\n                // ce n'est pas elle qu'on va vouloir restaurer...\n                if (!isset($revision1)) {\n                    $revision1 = \"\";\n                    continue;\n                }\n                echo \"<input name=  \\\"rev[]\\\" value=\\\"\" . $revision[\"id\"] . \"\\\" type=\\\"checkbox\\\" /> \";\n                echo \"Restaurer depuis la version du \".\n                   \" \".$revision[\"time\"].\" \".\n                  \" par \". $revision['user'] . \" \".\n                  \"<br />\\n\";\n            }\n            unset($revision1);\n            echo //\" . . . . \",$this->Format($page[\"user\"]),\"</p>\\n\",\n              \"</td>\\n\",\n              \"</tr>\\n\",\n              \"\";\n        }\n        echo \"</table>\\n\";\n        echo \"<p>Commentaire&nbsp;: <input class=\\\"form-control\\\" name=\\\"comment\\\" style=\\\"width: 80%;\\\" /></p>\\n\";\n        echo \"<p>\\n\".\n          \"<input type=\\\"hidden\\\" name=\\\"spammer\\\" value=\\\"\" . (isset($_POST['spammer']) ? $_POST['spammer'] : '') . \"\\\" />\\n\".\n          \"<input type=\\\"hidden\\\" name=\\\"clean\\\" value=\\\"yes\\\" />\\n\".\n          \"<button class=\\\"btn btn-danger\\\" value=\\\"Valider\\\">Nettoyer >></button>\\n\".\n          \"</p>\\n\";\n        echo \"</form>\\n\";\n        echo \"</div>\\n\\n\";\n    } elseif (isset($_POST['clean'])) {\n        if ($this->services->get(SecurityController::class)->isWikiHibernated()) {\n            throw new \\Exception(_t('WIKI_IN_HIBERNATION'));\n        }\n        // -- (3) Nettoyage des pages et affichage de la page de resultats -------\n        //\n        $deletedPages = \"\";\n        $restoredPages = \"\";\n\n        // -- 3.1 Effacement ---\n        // On efface chaque element du tableau suppr[]\n        // Pour chaque page selectionnee\n        if (!empty($_POST['suppr'])) {\n            foreach ($_POST['suppr'] as $page) {\n                // Effacement de la page en utilisant la m\u00e9thode ad\u00e9quate\n                // (si DeleteOrphanedPage ne convient pas, soit on cr\u00e9\u00e9\n                // une autre, soit on la modifie\n                $this->DeleteOrphanedPage($page);\n                $deletedPages .= $page . \", \";\n            }\n            $deletedPages = trim($deletedPages, \", \");\n        }\n\n\n        // -- 3.2 Restauration des pages s\u00e9lectionn\u00e9es ---\n        if (!empty($_POST['rev'])) {\n            //print_r($_POST[\"rev\"]);\n            foreach ($_POST[\"rev\"] as $rev_id) {\n                echo $rev_id.\"<br>\";\n                // Selectionne la revision\n                $revision = $this->LoadSingle(\"select * from \".$this->config[\"table_prefix\"].\"pages where id = '\"\n                  .mysqli_real_escape_string($this->dblink, $rev_id).\"' limit 1\");\n\n\n                // Fait de la derniere version de cette revision\n                // une version archivee\n                $requeteUpdate =\n                  \"update \" . $this->config[\"table_prefix\"] . \"pages \" .\n                  \"set latest = 'N' \".\n                  \"where latest = 'Y' \" .\n                  \"and tag = '\" . $revision[\"tag\"] . \"' \" .\n                  \"limit 1\";\n                $this->Query($requeteUpdate);\n                $restoredPages .= $revision[\"tag\"] . \", \";\n\n                // add new revision\n                $this->Query(\"insert into \".$this->config[\"table_prefix\"].\"pages set \".\n                 \"tag = '\".mysqli_real_escape_string($this->dblink, $revision['tag']).\"', \".\n                 \"time = now(), \".\n                 \"owner = '\".mysqli_real_escape_string($this->dblink, $revision['owner']).\"', \".\n                 \"user = '\".mysqli_real_escape_string($this->dblink, \"despam\").\"', \".\n                 \"latest = 'Y', \".\n                 \"body = '\".mysqli_real_escape_string($this->dblink, chop($revision['body'])).\"'\");\n            }\n        }\n        $restoredPages = trim($restoredPages, \", \");\n\n        echo \"<li>Pages restaur\u00e9es&nbsp;: \" .\n        $restoredPages . \".</li>\\n\";\n        echo \"<li>Pages supprim\u00e9es&nbsp;: \" .\n        $deletedPages . \".</li>\\n\" ;\n\n        echo \"</ul>\\n\";\n        echo \"<p><a href=\\\"\". $despam_url. \"\\\">Retour au formulaire de d\u00e9part >></a></p>\\n\";\n        echo \"</div>\\n\\n\";\n    }\n} else {\n    echo '<div class=\"alert alert-danger\">Action {{despam}} r\u00e9serv\u00e9e aux administrateurs.</div>';\n}\n"], "filenames": ["actions/listpages.php", "actions/newtextsearch.php", "includes/User.class.php", "tools/bazar/services/FormManager.php", "tools/security/actions/despam.php"], "buggy_code_start_loc": [118, 151, 1003, 49, 65], "buggy_code_end_loc": [333, 152, 1004, 178, 66], "fixing_code_start_loc": [118, 151, 1003, 49, 65], "fixing_code_end_loc": [333, 152, 1004, 178, 66], "type": "CWE-89", "message": "An SQL Injection vlnerability exits in Yeswiki doryphore 20211012 via the email parameter in the registration form.", "other": {"cve": {"id": "CVE-2021-43091", "sourceIdentifier": "cve@mitre.org", "published": "2022-03-25T17:15:08.603", "lastModified": "2022-03-29T18:40:28.067", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An SQL Injection vlnerability exits in Yeswiki doryphore 20211012 via the email parameter in the registration form."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de Inyecci\u00f3n SQL en Yeswiki doryphore versi\u00f3n 20211012, por medio del par\u00e1metro email en el formulario de registro"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yeswiki:yeswiki:4.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "13088326-FCEB-4862-BD69-22FF35C9B2D9"}]}]}], "references": [{"url": "https://github.com/yeswiki/yeswiki/commit/c9785f9a92744c3475f9676a0d8f95de24750094", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/07f245a7-ee9f-4b55-a0cc-13d5cb1be6e0/", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yeswiki/yeswiki/commit/c9785f9a92744c3475f9676a0d8f95de24750094"}}