{"buggy_code": ["<?php\n/*********************************************************************\n    class.sla.php\n\n    SLA\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nclass SLA extends VerySimpleModel\nimplements TemplateVariable {\n\n    static $meta = array(\n        'table' => SLA_TABLE,\n        'pk' => array('id'),\n    );\n\n    const FLAG_ACTIVE       = 0x0001;\n    const FLAG_ESCALATE     = 0x0002;\n    const FLAG_NOALERTS     = 0x0004;\n    const FLAG_TRANSIENT    = 0x0008;\n\n    var $_config;\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getName() {\n        return $this->getLocal('name');\n    }\n\n    function getGracePeriod() {\n        return $this->grace_period;\n    }\n\n    function getInfo() {\n        $base = $this->ht;\n        $base['isactive'] = $this->flags & self::FLAG_ACTIVE;\n        $base['disable_overdue_alerts'] = $this->flags & self::FLAG_NOALERTS;\n        $base['enable_priority_escalation'] = $this->flags & self::FLAG_ESCALATE;\n        $base['transient'] = $this->flags & self::FLAG_TRANSIENT;\n        return $base;\n    }\n\n    function getCreateDate() {\n        return $this->created;\n    }\n\n    function getUpdateDate() {\n        return $this->updated;\n    }\n\n    function isActive() {\n        return $this->flags & self::FLAG_ACTIVE;\n    }\n\n    function isTransient() {\n        return $this->flags & self::FLAG_TRANSIENT;\n    }\n\n    function sendAlerts() {\n        return 0 === ($this->flags & self::FLAG_NOALERTS);\n    }\n\n    function alertOnOverdue() {\n        return $this->sendAlerts();\n    }\n\n    function priorityEscalation() {\n        return $this->flags && self::FLAG_ESCALATE;\n    }\n\n    function getTranslateTag($subtag) {\n        return _H(sprintf('sla.%s.%s', $subtag, $this->getId()));\n    }\n\n    function getLocal($subtag) {\n        $tag = $this->getTranslateTag($subtag);\n        $T = CustomDataTranslation::translate($tag);\n        return $T != $tag ? $T : $this->ht[$subtag];\n    }\n\n    static function getLocalById($id, $subtag, $default) {\n        $tag = _H(sprintf('sla.%s.%s', $subtag, $id));\n        $T = CustomDataTranslation::translate($tag);\n        return $T != $tag ? $T : $default;\n    }\n\n    // TemplateVariable interface\n    function asVar() {\n        return $this->getName();\n    }\n\n    static function getVarScope() {\n        return array(\n            'name' => __('Service Level Agreement'),\n            'graceperiod' => __(\"Grace Period (hrs)\"),\n        );\n    }\n\n    function update($vars, &$errors) {\n\n        if (!$vars['grace_period'])\n            $errors['grace_period'] = __('Grace period required');\n        elseif (!is_numeric($vars['grace_period']))\n            $errors['grace_period'] = __('Numeric value required (in hours)');\n        elseif ($vars['grace_period'] > 8760)\n            $errors['grace_period'] = sprintf(\n                    __('%s cannot be more than 8760 hours'),\n                    __('Grace period')\n                    );\n\n        if (!$vars['name'])\n            $errors['name'] = __('Name is required');\n        elseif (($sid=SLA::getIdByName($vars['name'])) && $sid!=$vars['id'])\n            $errors['name'] = __('Name already exists');\n\n        if ($errors)\n            return false;\n\n        $this->name = $vars['name'];\n        $this->grace_period = $vars['grace_period'];\n        $this->notes = Format::sanitize($vars['notes']);\n        $this->flags =\n              ($vars['isactive'] ? self::FLAG_ACTIVE : 0)\n            | (isset($vars['disable_overdue_alerts']) ? self::FLAG_NOALERTS : 0)\n            | (isset($vars['enable_priority_escalation']) ? self::FLAG_ESCALATE : 0)\n            | (isset($vars['transient']) ? self::FLAG_TRANSIENT : 0);\n\n        if ($this->save())\n            return true;\n\n        if (isset($this->id)) {\n            $errors['err']=sprintf(__('Unable to update %s.'), __('this SLA plan'))\n               .' '.__('Internal error occurred');\n        } else {\n            $errors['err']=sprintf(__('Unable to add %s.'), __('this SLA plan'))\n               .' '.__('Internal error occurred');\n        }\n\n        return false;\n    }\n\n    function save($refetch=false) {\n        if ($this->dirty)\n            $this->updated = SqlFunction::NOW();\n\n        return parent::save($refetch || $this->dirty);\n    }\n\n    function delete() {\n        global $cfg;\n\n        if(!$cfg || $cfg->getDefaultSLAId()==$this->getId())\n            return false;\n\n        //TODO: Use ORM to delete & update\n        $id=$this->getId();\n        $sql='DELETE FROM '.SLA_TABLE.' WHERE id='.db_input($id).' LIMIT 1';\n        if(db_query($sql) && ($num=db_affected_rows())) {\n            db_query('UPDATE '.DEPT_TABLE.' SET sla_id=0 WHERE sla_id='.db_input($id));\n            db_query('UPDATE '.TOPIC_TABLE.' SET sla_id=0 WHERE sla_id='.db_input($id));\n            db_query('UPDATE '.TICKET_TABLE.' SET sla_id='.db_input($cfg->getDefaultSLAId()).' WHERE sla_id='.db_input($id));\n        }\n\n        return $num;\n    }\n\n    /** static functions **/\n    static function getSLAs($criteria=array()) {\n\n       $slas = self::objects()\n           ->order_by('name')\n           ->values_flat('id', 'name', 'flags', 'grace_period');\n\n        $entries = array();\n        foreach ($slas as $row) {\n            $row[2] = $row[2] & self::FLAG_ACTIVE;\n            $entries[$row[0]] = sprintf(__('%s (%d hours - %s)'\n                        /* Tokens are <name> (<#> hours - <Active|Disabled>) */),\n                        self::getLocalById($row[0], 'name', $row[1]),\n                        $row[3],\n                        $row[2] ? __('Active') : __('Disabled'));\n        }\n\n        return $entries;\n    }\n\n    static function getSLAName($id) {\n        $slas = static::getSLAs();\n        return @$slas[$id];\n    }\n\n    static function getIdByName($name) {\n        $row = static::objects()\n            ->filter(array('name'=>$name))\n            ->values_flat('id')\n            ->first();\n\n        return $row ? $row[0] : 0;\n    }\n\n    static function create($vars=false, &$errors=array()) {\n        $sla = new static($vars);\n        $sla->created = SqlFunction::NOW();\n        return $sla;\n    }\n\n    static function __create($vars, &$errors=array()) {\n        $sla = self::create($vars);\n        $sla->save();\n        return $sla;\n    }\n}\n?>\n"], "fixing_code": ["<?php\n/*********************************************************************\n    class.sla.php\n\n    SLA\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nclass SLA extends VerySimpleModel\nimplements TemplateVariable {\n\n    static $meta = array(\n        'table' => SLA_TABLE,\n        'pk' => array('id'),\n    );\n\n    const FLAG_ACTIVE       = 0x0001;\n    const FLAG_ESCALATE     = 0x0002;\n    const FLAG_NOALERTS     = 0x0004;\n    const FLAG_TRANSIENT    = 0x0008;\n\n    var $_config;\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getName() {\n        return $this->getLocal('name');\n    }\n\n    function getGracePeriod() {\n        return $this->grace_period;\n    }\n\n    function getInfo() {\n        $base = $this->ht;\n        $base['isactive'] = $this->flags & self::FLAG_ACTIVE;\n        $base['disable_overdue_alerts'] = $this->flags & self::FLAG_NOALERTS;\n        $base['enable_priority_escalation'] = $this->flags & self::FLAG_ESCALATE;\n        $base['transient'] = $this->flags & self::FLAG_TRANSIENT;\n        return $base;\n    }\n\n    function getCreateDate() {\n        return $this->created;\n    }\n\n    function getUpdateDate() {\n        return $this->updated;\n    }\n\n    function isActive() {\n        return $this->flags & self::FLAG_ACTIVE;\n    }\n\n    function isTransient() {\n        return $this->flags & self::FLAG_TRANSIENT;\n    }\n\n    function sendAlerts() {\n        return 0 === ($this->flags & self::FLAG_NOALERTS);\n    }\n\n    function alertOnOverdue() {\n        return $this->sendAlerts();\n    }\n\n    function priorityEscalation() {\n        return $this->flags && self::FLAG_ESCALATE;\n    }\n\n    function getTranslateTag($subtag) {\n        return _H(sprintf('sla.%s.%s', $subtag, $this->getId()));\n    }\n\n    function getLocal($subtag) {\n        $tag = $this->getTranslateTag($subtag);\n        $T = CustomDataTranslation::translate($tag);\n        return $T != $tag ? $T : $this->ht[$subtag];\n    }\n\n    static function getLocalById($id, $subtag, $default) {\n        $tag = _H(sprintf('sla.%s.%s', $subtag, $id));\n        $T = CustomDataTranslation::translate($tag);\n        return $T != $tag ? $T : $default;\n    }\n\n    // TemplateVariable interface\n    function asVar() {\n        return $this->getName();\n    }\n\n    static function getVarScope() {\n        return array(\n            'name' => __('Service Level Agreement'),\n            'graceperiod' => __(\"Grace Period (hrs)\"),\n        );\n    }\n\n    function update($vars, &$errors) {\n        $vars = Format::htmlchars($vars);\n        if (!$vars['grace_period'])\n            $errors['grace_period'] = __('Grace period required');\n        elseif (!is_numeric($vars['grace_period']))\n            $errors['grace_period'] = __('Numeric value required (in hours)');\n        elseif ($vars['grace_period'] > 8760)\n            $errors['grace_period'] = sprintf(\n                    __('%s cannot be more than 8760 hours'),\n                    __('Grace period')\n                    );\n\n        if (!$vars['name'])\n            $errors['name'] = __('Name is required');\n        elseif (($sid=SLA::getIdByName($vars['name'])) && $sid!=$vars['id'])\n            $errors['name'] = __('Name already exists');\n\n        if ($errors)\n            return false;\n\n        $this->name = $vars['name'];\n        $this->grace_period = $vars['grace_period'];\n        $this->notes = Format::sanitize($vars['notes']);\n        $this->flags =\n              ($vars['isactive'] ? self::FLAG_ACTIVE : 0)\n            | (isset($vars['disable_overdue_alerts']) ? self::FLAG_NOALERTS : 0)\n            | (isset($vars['enable_priority_escalation']) ? self::FLAG_ESCALATE : 0)\n            | (isset($vars['transient']) ? self::FLAG_TRANSIENT : 0);\n\n        if ($this->save())\n            return true;\n\n        if (isset($this->id)) {\n            $errors['err']=sprintf(__('Unable to update %s.'), __('this SLA plan'))\n               .' '.__('Internal error occurred');\n        } else {\n            $errors['err']=sprintf(__('Unable to add %s.'), __('this SLA plan'))\n               .' '.__('Internal error occurred');\n        }\n\n        return false;\n    }\n\n    function save($refetch=false) {\n        if ($this->dirty)\n            $this->updated = SqlFunction::NOW();\n\n        return parent::save($refetch || $this->dirty);\n    }\n\n    function delete() {\n        global $cfg;\n\n        if(!$cfg || $cfg->getDefaultSLAId()==$this->getId())\n            return false;\n\n        //TODO: Use ORM to delete & update\n        $id=$this->getId();\n        $sql='DELETE FROM '.SLA_TABLE.' WHERE id='.db_input($id).' LIMIT 1';\n        if(db_query($sql) && ($num=db_affected_rows())) {\n            db_query('UPDATE '.DEPT_TABLE.' SET sla_id=0 WHERE sla_id='.db_input($id));\n            db_query('UPDATE '.TOPIC_TABLE.' SET sla_id=0 WHERE sla_id='.db_input($id));\n            db_query('UPDATE '.TICKET_TABLE.' SET sla_id='.db_input($cfg->getDefaultSLAId()).' WHERE sla_id='.db_input($id));\n        }\n\n        return $num;\n    }\n\n    /** static functions **/\n    static function getSLAs($criteria=array()) {\n\n       $slas = self::objects()\n           ->order_by('name')\n           ->values_flat('id', 'name', 'flags', 'grace_period');\n\n        $entries = array();\n        foreach ($slas as $row) {\n            $row[2] = $row[2] & self::FLAG_ACTIVE;\n            $entries[$row[0]] = sprintf(__('%s (%d hours - %s)'\n                        /* Tokens are <name> (<#> hours - <Active|Disabled>) */),\n                        self::getLocalById($row[0], 'name', $row[1]),\n                        $row[3],\n                        $row[2] ? __('Active') : __('Disabled'));\n        }\n\n        return $entries;\n    }\n\n    static function getSLAName($id) {\n        $slas = static::getSLAs();\n        return @$slas[$id];\n    }\n\n    static function getIdByName($name) {\n        $row = static::objects()\n            ->filter(array('name'=>$name))\n            ->values_flat('id')\n            ->first();\n\n        return $row ? $row[0] : 0;\n    }\n\n    static function create($vars=false, &$errors=array()) {\n        $vars = Format::htmlchars($vars);\n        $sla = new static($vars);\n        $sla->created = SqlFunction::NOW();\n        return $sla;\n    }\n\n    static function __create($vars, &$errors=array()) {\n        $sla = self::create($vars);\n        $sla->save();\n        return $sla;\n    }\n}\n?>\n"], "filenames": ["include/class.sla.php"], "buggy_code_start_loc": [109], "buggy_code_end_loc": [210], "fixing_code_start_loc": [109], "fixing_code_end_loc": [212], "type": "CWE-79", "message": "include/class.sla.php in osTicket before 1.14.2 allows XSS via the SLA Name.", "other": {"cve": {"id": "CVE-2020-12629", "sourceIdentifier": "cve@mitre.org", "published": "2020-05-04T13:15:13.047", "lastModified": "2020-05-06T20:44:34.660", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "include/class.sla.php in osTicket before 1.14.2 allows XSS via the SLA Name."}, {"lang": "es", "value": "En el archivo include/class.sla.php en osTicket versiones anteriores a la versi\u00f3n  1.14.2, permite un ataque de tipo XSS por medio del Nombre SLA."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enhancesoft:osticket:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.14.2", "matchCriteriaId": "40AC6A28-57EF-482A-8D89-9DBB94CACD37"}]}]}], "references": [{"url": "https://github.com/osTicket/osTicket/compare/v1.14.1...v1.14.2", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/osticket/osticket/commit/fc4c8608fa122f38673b9dddcb8fef4a15a9c884", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/48413", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/osticket/osticket/commit/fc4c8608fa122f38673b9dddcb8fef4a15a9c884"}}