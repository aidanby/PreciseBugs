{"buggy_code": ["<?php\n\n/**\n * HTML5 Export class for phpMyFAQ.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-10-07\n */\n\nnamespace phpMyFAQ\\Export;\n\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Export;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Strings;\nuse XMLWriter;\n\n/**\n * Class Html5\n *\n * @package phpMyFAQ\\Export\n */\nclass Html5 extends Export\n{\n    /**\n     * XMLWriter object.\n     *\n     * @var XMLWriter\n     */\n    private $xml;\n\n    /**\n     * Constructor.\n     *\n     * @param Faq           $faq      FaqHelper object\n     * @param Category      $category CategoryHelper object\n     * @param Configuration $config   Configuration\n     *                                return\n     *                                PMF_Export_Xhtml\n     */\n    public function __construct(Faq $faq, Category $category, Configuration $config)\n    {\n        $this->faq = $faq;\n        $this->category = $category;\n        $this->config = $config;\n        $this->xml = new XMLWriter();\n\n        $this->xml->openMemory();\n        $this->xml->setIndent(true);\n    }\n\n    /**\n     * Generates the export.\n     *\n     * @param int    $categoryId CategoryHelper Id\n     * @param bool   $downwards  If true, downwards, otherwise upward ordering\n     * @param string $language   Language\n     *\n     * @return string\n     */\n    public function generate(int $categoryId = 0, bool $downwards = true, string $language = ''): string\n    {\n        global $PMF_LANG;\n\n        // Initialize categories\n        $this->category->transform($categoryId);\n\n        $faqData = $this->faq->get(FAQ_QUERY_TYPE_EXPORT_XHTML, $categoryId, $downwards, $language);\n        $version = $this->config->getVersion();\n        $comment = sprintf(\n            ' HTML5 output by phpMyFAQ %s | Date: %s ',\n            $version,\n            Date::createIsoDate(date('YmdHis'))\n        );\n\n        $this->xml->startDTD('html');\n        $this->xml->startElement('html');\n\n        $this->xml->writeComment($comment);\n\n        $this->xml->startElement('head');\n        $this->xml->writeElement('title', $this->config->getTitle());\n        $this->xml->startElement('meta');\n        $this->xml->writeAttribute('charset', 'utf-8');\n        $this->xml->endElement();\n        $this->xml->endElement(); // </head>\n\n        $this->xml->startElement('body');\n        $this->xml->writeAttribute('dir', $PMF_LANG['dir']);\n\n        if (count($faqData)) {\n            $lastCategory = 0;\n            foreach ($faqData as $data) {\n                if ($data['category_id'] != $lastCategory) {\n                    $this->xml->writeElement('h1', $this->category->getPath($data['category_id'], ' >> '));\n                }\n\n                $this->xml->startElement('h2');\n                $this->xml->writeAttribute('id', \"entry-\" . $data['solution_id']);\n                $this->xml->text(Strings::htmlentities($data['topic']));\n                $this->xml->endElement();\n                $this->xml->startElement('p');\n                $this->xml->writeCdata(html_entity_decode($data['content'], ENT_HTML5, 'UTF-8'));\n                $this->xml->endElement();\n                $this->xml->writeElement('p', $PMF_LANG['msgAuthor'] . ': ' . $data['author_email']);\n                $this->xml->writeElement(\n                    'p',\n                    $PMF_LANG['msgLastUpdateArticle'] . Date::createIsoDate($data['lastmodified'])\n                );\n\n                $lastCategory = $data['category_id'];\n            }\n        }\n\n        $this->xml->endElement(); // </body>\n        $this->xml->endElement(); // </html>\n\n        header('Content-type: text/html');\n\n        return $this->xml->outputMemory();\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * HTML5 Export class for phpMyFAQ.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-10-07\n */\n\nnamespace phpMyFAQ\\Export;\n\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Export;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Strings;\nuse XMLWriter;\n\n/**\n * Class Html5\n *\n * @package phpMyFAQ\\Export\n */\nclass Html5 extends Export\n{\n    /**\n     * XMLWriter object.\n     *\n     * @var XMLWriter\n     */\n    private $xml;\n\n    /**\n     * Constructor.\n     *\n     * @param Faq           $faq      FaqHelper object\n     * @param Category      $category CategoryHelper object\n     * @param Configuration $config   Configuration\n     *                                return\n     *                                PMF_Export_Xhtml\n     */\n    public function __construct(Faq $faq, Category $category, Configuration $config)\n    {\n        $this->faq = $faq;\n        $this->category = $category;\n        $this->config = $config;\n        $this->xml = new XMLWriter();\n\n        $this->xml->openMemory();\n        $this->xml->setIndent(true);\n    }\n\n    /**\n     * Generates the export.\n     *\n     * @param int    $categoryId CategoryHelper Id\n     * @param bool   $downwards  If true, downwards, otherwise upward ordering\n     * @param string $language   Language\n     *\n     * @return string\n     */\n    public function generate(int $categoryId = 0, bool $downwards = true, string $language = ''): string\n    {\n        global $PMF_LANG;\n\n        // Initialize categories\n        $this->category->transform($categoryId);\n\n        $faqData = $this->faq->get(FAQ_QUERY_TYPE_EXPORT_XHTML, $categoryId, $downwards, $language);\n        $version = $this->config->getVersion();\n        $comment = sprintf(\n            ' HTML5 output by phpMyFAQ %s | Date: %s ',\n            $version,\n            Date::createIsoDate(date('YmdHis'))\n        );\n\n        $this->xml->startDTD('html');\n        $this->xml->startElement('html');\n\n        $this->xml->writeComment($comment);\n\n        $this->xml->startElement('head');\n        $this->xml->writeElement('title', $this->config->getTitle());\n        $this->xml->startElement('meta');\n        $this->xml->writeAttribute('charset', 'utf-8');\n        $this->xml->endElement();\n        $this->xml->startElement('meta');\n        $this->xml->writeAttribute('http-equiv', 'Content-Security-Policy');\n        $this->xml->writeAttribute('content', 'default-src \\'self\\'; img-src https://*; child-src \\'none\\';');\n        $this->xml->endElement();\n        $this->xml->endElement(); // </head>\n\n        $this->xml->startElement('body');\n        $this->xml->writeAttribute('dir', $PMF_LANG['dir']);\n\n        if (count($faqData)) {\n            $lastCategory = 0;\n            foreach ($faqData as $data) {\n                if ($data['category_id'] != $lastCategory) {\n                    $this->xml->writeElement('h1', $this->category->getPath($data['category_id'], ' >> '));\n                }\n\n                $this->xml->startElement('h2');\n                $this->xml->writeAttribute('id', \"entry-\" . $data['solution_id']);\n                $this->xml->text(Strings::htmlentities($data['topic']));\n                $this->xml->endElement();\n                $this->xml->startElement('p');\n                $this->xml->writeCdata(html_entity_decode($data['content'], ENT_HTML5, 'UTF-8'));\n                $this->xml->endElement();\n                $this->xml->writeElement('p', $PMF_LANG['msgAuthor'] . ': ' . $data['author_email']);\n                $this->xml->writeElement(\n                    'p',\n                    $PMF_LANG['msgLastUpdateArticle'] . Date::createIsoDate($data['lastmodified'])\n                );\n\n                $lastCategory = $data['category_id'];\n            }\n        }\n\n        $this->xml->endElement(); // </body>\n        $this->xml->endElement(); // </html>\n\n        header('Content-type: text/html');\n\n        return $this->xml->outputMemory();\n    }\n}\n"], "filenames": ["phpmyfaq/src/phpMyFAQ/Export/Html5.php"], "buggy_code_start_loc": [95], "buggy_code_end_loc": [95], "fixing_code_start_loc": [96], "fixing_code_end_loc": [100], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.12.", "other": {"cve": {"id": "CVE-2023-1756", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-05T16:15:07.273", "lastModified": "2023-04-11T18:30:50.660", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.12."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.12", "matchCriteriaId": "653EC167-06FC-4D30-AAF8-B75F596519AE"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/ca75f4688a8b0f14d5d0697b9f4b6ea66088f726", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/e495b443-b328-42f5-aed5-d68b929b4cb9", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/ca75f4688a8b0f14d5d0697b9f4b6ea66088f726"}}